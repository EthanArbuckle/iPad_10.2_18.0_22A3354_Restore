void sub_100003FA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_100003FD4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_100004004(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_100004324(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_100004354(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_100004610(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_100004640(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_1000048FC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_10000492C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_100004BF4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_100004C24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_1000050BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_10000538C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5D8;
  qword_10012A5D8 = (uint64_t)v1;

}

void sub_1000055CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5E8;
  qword_10012A5E8 = (uint64_t)v1;

}

void sub_1000055FC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5E8;
  qword_10012A5E8 = (uint64_t)v1;

}

void sub_100005DE0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A5E8;
  qword_10012A5E8 = (uint64_t)v1;

}

unint64_t ProtocolVersion_EnumDescriptor()
{
  id v1;

  if (!atomic_load(&qword_10012A5F0))
  {
    v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:](TransparencyGPBEnumDescriptor, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:", CFSTR("ProtocolVersion"), "UnknownVersion", &unk_1000DB098, 5, ProtocolVersion_IsValidValue, 0);
    while (!__ldaxr(&qword_10012A5F0))
    {
      if (!__stlxr((unint64_t)v1, &qword_10012A5F0))
        return atomic_load(&qword_10012A5F0);
    }
    __clrex();

  }
  return atomic_load(&qword_10012A5F0);
}

BOOL ProtocolVersion_IsValidValue(unsigned int a1)
{
  return a1 < 4 || a1 == 999999999;
}

unint64_t Application_EnumDescriptor()
{
  id v1;

  if (!atomic_load(&qword_10012A5F8))
  {
    v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:](TransparencyGPBEnumDescriptor, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:", CFSTR("Application"), "UnknownApplication", &unk_1000DB128, 7, Application_IsValidValue, 0);
    while (!__ldaxr(&qword_10012A5F8))
    {
      if (!__stlxr((unint64_t)v1, &qword_10012A5F8))
        return atomic_load(&qword_10012A5F8);
    }
    __clrex();

  }
  return atomic_load(&qword_10012A5F8);
}

BOOL Application_IsValidValue(unsigned int a1)
{
  return a1 < 7;
}

unint64_t Status_EnumDescriptor()
{
  id v1;

  if (!atomic_load(&qword_10012A600))
  {
    v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:](TransparencyGPBEnumDescriptor, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:", CFSTR("Status"), "UnknownStatus", &unk_1000DB18C, 6, Status_IsValidValue, 0);
    while (!__ldaxr(&qword_10012A600))
    {
      if (!__stlxr((unint64_t)v1, &qword_10012A600))
        return atomic_load(&qword_10012A600);
    }
    __clrex();

  }
  return atomic_load(&qword_10012A600);
}

uint64_t Status_IsValidValue(unsigned int a1)
{
  return (a1 < 8) & (0xEBu >> a1);
}

unint64_t VRFType_EnumDescriptor()
{
  id v1;

  if (!atomic_load(&qword_10012A608))
  {
    v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:extraTextFormatInfo:](TransparencyGPBEnumDescriptor, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:extraTextFormatInfo:", CFSTR("VRFType"), "UnknownVrf", &unk_1000DB1D0, 2, VRFType_IsValidValue, 0, &unk_1000DB1D8);
    while (!__ldaxr(&qword_10012A608))
    {
      if (!__stlxr((unint64_t)v1, &qword_10012A608))
        return atomic_load(&qword_10012A608);
    }
    __clrex();

  }
  return atomic_load(&qword_10012A608);
}

BOOL VRFType_IsValidValue(int a1)
{
  return !a1 || a1 == 3;
}

unint64_t LogType_EnumDescriptor()
{
  id v1;

  if (!atomic_load(&qword_10012A610))
  {
    v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:](TransparencyGPBEnumDescriptor, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:", CFSTR("LogType"), "UnknownLog", &unk_1000DB23C, 7, LogType_IsValidValue, 0);
    while (!__ldaxr(&qword_10012A610))
    {
      if (!__stlxr((unint64_t)v1, &qword_10012A610))
        return atomic_load(&qword_10012A610);
    }
    __clrex();

  }
  return atomic_load(&qword_10012A610);
}

BOOL LogType_IsValidValue(unsigned int a1)
{
  return a1 < 7;
}

unint64_t MapType_EnumDescriptor()
{
  id v1;

  if (!atomic_load(&qword_10012A618))
  {
    v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:](TransparencyGPBEnumDescriptor, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:", CFSTR("MapType"), "UnknownMap", &unk_1000DB288, 3, MapType_IsValidValue, 0);
    while (!__ldaxr(&qword_10012A618))
    {
      if (!__stlxr((unint64_t)v1, &qword_10012A618))
        return atomic_load(&qword_10012A618);
    }
    __clrex();

  }
  return atomic_load(&qword_10012A618);
}

BOOL MapType_IsValidValue(unsigned int a1)
{
  return a1 < 3;
}

unint64_t NodeType_EnumDescriptor()
{
  id v1;

  if (!atomic_load(&qword_10012A620))
  {
    v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:](TransparencyGPBEnumDescriptor, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:", CFSTR("NodeType"), "PaclNode", &unk_1000DB2F0, 9, NodeType_IsValidValue, 0);
    while (!__ldaxr(&qword_10012A620))
    {
      if (!__stlxr((unint64_t)v1, &qword_10012A620))
        return atomic_load(&qword_10012A620);
    }
    __clrex();

  }
  return atomic_load(&qword_10012A620);
}

BOOL NodeType_IsValidValue(unsigned int a1)
{
  return a1 < 9;
}

unint64_t Signature_SignatureAlgorithm_EnumDescriptor()
{
  id v1;

  if (!atomic_load(&qword_10012A628))
  {
    v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:](TransparencyGPBEnumDescriptor, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:", CFSTR("Signature_SignatureAlgorithm"), "Unknown", &unk_1000DB32C, 2, Signature_SignatureAlgorithm_IsValidValue, 0);
    while (!__ldaxr(&qword_10012A628))
    {
      if (!__stlxr((unint64_t)v1, &qword_10012A628))
        return atomic_load(&qword_10012A628);
    }
    __clrex();

  }
  return atomic_load(&qword_10012A628);
}

BOOL Signature_SignatureAlgorithm_IsValidValue(unsigned int a1)
{
  return a1 < 2;
}

uint64_t VRFWitness_Type_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[VRFWitness descriptor](VRFWitness, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetVRFWitness_Type_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[VRFWitness descriptor](VRFWitness, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t VRFPublicKey_Type_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[VRFPublicKey descriptor](VRFPublicKey, "descriptor"), "fieldWithNumber:", 2));
}

uint64_t SetVRFPublicKey_Type_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[VRFPublicKey descriptor](VRFPublicKey, "descriptor"), "fieldWithNumber:", 2), a2);
}

uint64_t Signature_Algorithm_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[Signature descriptor](Signature, "descriptor"), "fieldWithNumber:", 3));
}

uint64_t SetSignature_Algorithm_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[Signature descriptor](Signature, "descriptor"), "fieldWithNumber:", 3), a2);
}

uint64_t LogHead_LogType_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[LogHead descriptor](LogHead, "descriptor"), "fieldWithNumber:", 5));
}

uint64_t SetLogHead_LogType_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[LogHead descriptor](LogHead, "descriptor"), "fieldWithNumber:", 5), a2);
}

uint64_t LogHead_Application_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[LogHead descriptor](LogHead, "descriptor"), "fieldWithNumber:", 6));
}

uint64_t SetLogHead_Application_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[LogHead descriptor](LogHead, "descriptor"), "fieldWithNumber:", 6), a2);
}

uint64_t LogEntry_LogType_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[LogEntry descriptor](LogEntry, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetLogEntry_LogType_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[LogEntry descriptor](LogEntry, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t LogEntry_NodeType_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[LogEntry descriptor](LogEntry, "descriptor"), "fieldWithNumber:", 6));
}

uint64_t SetLogEntry_NodeType_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[LogEntry descriptor](LogEntry, "descriptor"), "fieldWithNumber:", 6), a2);
}

uint64_t MapHead_Application_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[MapHead descriptor](MapHead, "descriptor"), "fieldWithNumber:", 3));
}

uint64_t SetMapHead_Application_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[MapHead descriptor](MapHead, "descriptor"), "fieldWithNumber:", 3), a2);
}

uint64_t MapHead_MapType_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[MapHead descriptor](MapHead, "descriptor"), "fieldWithNumber:", 6));
}

uint64_t SetMapHead_MapType_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[MapHead descriptor](MapHead, "descriptor"), "fieldWithNumber:", 6), a2);
}

uint64_t PerApplicationTreeConfigNode_EarliestVersion_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[PerApplicationTreeConfigNode descriptor](PerApplicationTreeConfigNode, "descriptor"), "fieldWithNumber:", 3));
}

uint64_t SetPerApplicationTreeConfigNode_EarliestVersion_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[PerApplicationTreeConfigNode descriptor](PerApplicationTreeConfigNode, "descriptor"), "fieldWithNumber:", 3), a2);
}

uint64_t TopLevelTreeConfigNode_EarliestVersion_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[TopLevelTreeConfigNode descriptor](TopLevelTreeConfigNode, "descriptor"), "fieldWithNumber:", 3));
}

uint64_t SetTopLevelTreeConfigNode_EarliestVersion_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[TopLevelTreeConfigNode descriptor](TopLevelTreeConfigNode, "descriptor"), "fieldWithNumber:", 3), a2);
}

uint64_t LogClosedNode_EarliestVersionForNextTree_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[LogClosedNode descriptor](LogClosedNode, "descriptor"), "fieldWithNumber:", 3));
}

uint64_t SetLogClosedNode_EarliestVersionForNextTree_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[LogClosedNode descriptor](LogClosedNode, "descriptor"), "fieldWithNumber:", 3), a2);
}

uint64_t ConsistencyProofRequest_Version_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetConsistencyProofRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t ConsistencyProofRequest_LogType_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"), "fieldWithNumber:", 3));
}

uint64_t SetConsistencyProofRequest_LogType_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"), "fieldWithNumber:", 3), a2);
}

uint64_t ConsistencyProofRequest_Application_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"), "fieldWithNumber:", 4));
}

uint64_t SetConsistencyProofRequest_Application_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"), "fieldWithNumber:", 4), a2);
}

uint64_t ConsistencyProofResponse_Status_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetConsistencyProofResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t ConsistencyProofResponse_LogType_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"), "fieldWithNumber:", 4));
}

uint64_t SetConsistencyProofResponse_LogType_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"), "fieldWithNumber:", 4), a2);
}

uint64_t ConsistencyProofResponse_Application_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"), "fieldWithNumber:", 5));
}

uint64_t SetConsistencyProofResponse_Application_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"), "fieldWithNumber:", 5), a2);
}

uint64_t RevisionLogInclusionProofRequest_Version_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetRevisionLogInclusionProofRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t RevisionLogInclusionProofRequest_Application_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest, "descriptor"), "fieldWithNumber:", 2));
}

uint64_t SetRevisionLogInclusionProofRequest_Application_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest, "descriptor"), "fieldWithNumber:", 2), a2);
}

uint64_t RevisionLogInclusionProofRequest_LogType_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest, "descriptor"), "fieldWithNumber:", 3));
}

uint64_t SetRevisionLogInclusionProofRequest_LogType_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest, "descriptor"), "fieldWithNumber:", 3), a2);
}

uint64_t RevisionLogInclusionProofResponse_Status_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[RevisionLogInclusionProofResponse descriptor](RevisionLogInclusionProofResponse, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetRevisionLogInclusionProofResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[RevisionLogInclusionProofResponse descriptor](RevisionLogInclusionProofResponse, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t PublicKeysRequest_Version_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetPublicKeysRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t PublicKeysRequest_Application_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor"), "fieldWithNumber:", 2));
}

uint64_t SetPublicKeysRequest_Application_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor"), "fieldWithNumber:", 2), a2);
}

uint64_t PublicKeysResponse_Status_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[PublicKeysResponse descriptor](PublicKeysResponse, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetPublicKeysResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[PublicKeysResponse descriptor](PublicKeysResponse, "descriptor"), "fieldWithNumber:", 1), a2);
}

void sub_100007B04(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A6F8;
  qword_10012A6F8 = (uint64_t)v1;

}

void sub_100007C24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A6F8;
  qword_10012A6F8 = (uint64_t)v1;

}

void sub_100008084(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A6F8;
  qword_10012A6F8 = (uint64_t)v1;

}

void sub_1000080B4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A6F8;
  qword_10012A6F8 = (uint64_t)v1;

}

void sub_100008610(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A708;
  qword_10012A708 = (uint64_t)v1;

}

void sub_100008640(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A708;
  qword_10012A708 = (uint64_t)v1;

}

void sub_100008814(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A708;
  qword_10012A708 = (uint64_t)v1;

}

BOOL sub_1000088D4(uint64_t a1)
{
  return a1 && (a1 & (a1 - 1)) == 0;
}

void sub_100008E5C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A718;
  qword_10012A718 = (uint64_t)v1;

}

void sub_100008E8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A718;
  qword_10012A718 = (uint64_t)v1;

}

void sub_1000090B4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A718;
  qword_10012A718 = (uint64_t)v1;

}

unint64_t ATLogDataType_EnumDescriptor()
{
  id v1;

  if (!atomic_load(&qword_10012A720))
  {
    v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:](TransparencyGPBEnumDescriptor, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:", CFSTR("ATLogDataType"), "Unknown", &unk_1000DB4E0, 6, ATLogDataType_IsValidValue, 0);
    while (!__ldaxr(&qword_10012A720))
    {
      if (!__stlxr((unint64_t)v1, &qword_10012A720))
        return atomic_load(&qword_10012A720);
    }
    __clrex();

  }
  return atomic_load(&qword_10012A720);
}

BOOL ATLogDataType_IsValidValue(unsigned int a1)
{
  return a1 < 6;
}

uint64_t ATLogInsertRequest_Version_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ATLogInsertRequest descriptor](ATLogInsertRequest, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetATLogInsertRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ATLogInsertRequest descriptor](ATLogInsertRequest, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t ATLogInsertRequest_Type_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ATLogInsertRequest descriptor](ATLogInsertRequest, "descriptor"), "fieldWithNumber:", 3));
}

uint64_t SetATLogInsertRequest_Type_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ATLogInsertRequest descriptor](ATLogInsertRequest, "descriptor"), "fieldWithNumber:", 3), a2);
}

uint64_t ATLogInsertResponse_Status_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ATLogInsertResponse descriptor](ATLogInsertResponse, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetATLogInsertResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ATLogInsertResponse descriptor](ATLogInsertResponse, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t ATLogProofRequest_Version_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ATLogProofRequest descriptor](ATLogProofRequest, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetATLogProofRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ATLogProofRequest descriptor](ATLogProofRequest, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t ATLogProofResponse_Status_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[ATLogProofResponse descriptor](ATLogProofResponse, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetATLogProofResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[ATLogProofResponse descriptor](ATLogProofResponse, "descriptor"), "fieldWithNumber:", 1), a2);
}

void sub_1000097F8(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  NSObject *v7;
  void *v8;
  double Current;
  double v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint8_t buf[4];
  id v18;

  v2 = objc_msgSend(*(id *)(a1 + 32), "copyManagedObject:", 0);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    objc_msgSend(v3, "onMocSetMapHead:inclusionResult:inclusionError:", v2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    v16 = 0;
    v5 = objc_msgSend(v4, "persistWithError:", &v16);
    v6 = v16;

    if ((v5 & 1) == 0)
    {
      if (qword_10012A758 != -1)
        dispatch_once(&qword_10012A758, &stru_100105D10);
      v7 = qword_10012A760;
      if (os_log_type_enabled((os_log_t)qword_10012A760, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to save inclusion state for map head: %@", buf, 0xCu);
      }
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
      objc_msgSend(v8, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("mapHeadIncusionState"), v6);

    }
    Current = CFAbsoluteTimeGetCurrent();
    objc_msgSend(v2, "receiptTime");
    v11 = Current - v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "application"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("PatInclusionProofTime"), v12));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11));
    objc_msgSend(v14, "logMetric:withName:", v15, v13);

  }
}

void sub_1000099F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A760;
  qword_10012A760 = (uint64_t)v1;

}

void sub_100009CA8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A760;
  qword_10012A760 = (uint64_t)v1;

}

uint64_t sub_100009CD8(id *a1, _QWORD *a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  id v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  id v27;
  id v28;
  uint8_t buf[4];
  id v30;

  if (+[TransparencyAnalytics hasInternalDiagnostics](TransparencyAnalytics, "hasInternalDiagnostics"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "metadata"));
    v8 = kTransparencyResponseMetadataKeyServerHint;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "metadata"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v8));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v11, v8);

    }
    if (objc_msgSend(v6, "count"))
      *a3 = objc_retainAutorelease(v6);

  }
  v12 = a1[4];
  v28 = 0;
  v13 = (uint64_t)objc_msgSend(v12, "verifyWithError:", &v28);
  v14 = v28;
  if (v13 == 1)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "nodeBytes"));
    v27 = v14;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](PerApplicationTreeNode, "parseFromData:error:", v15, &v27));
    v17 = v27;

    if (v16)
    {
      if (objc_msgSend(v16, "hasObjectMapHead")
        && (v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectMapHead")),
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "object")),
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "mapHead")),
            v21 = objc_msgSend(v19, "isEqualToData:", v20),
            v20,
            v19,
            v18,
            (v21 & 1) != 0))
      {
        v13 = 1;
        objc_msgSend(a1[6], "setInclusionResult:mapHead:failure:", 1, a1[5], 0);
        v22 = v17;
      }
      else
      {
        v22 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", CFSTR("TransparencyErrorVerify"), -62, CFSTR("per-app tree entry does not contain the SMH in the map entry")));

        if (a2 && v22)
          *a2 = objc_retainAutorelease(v22);
        if (qword_10012A758 != -1)
          dispatch_once(&qword_10012A758, &stru_100105DB8);
        v24 = qword_10012A760;
        if (os_log_type_enabled((os_log_t)qword_10012A760, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "per-app tree entry does not contain the SMH in the map entry", buf, 2u);
        }
        objc_msgSend(a1[6], "setInclusionResult:mapHead:failure:", 0, a1[5], v22);
        v13 = 0;
      }
    }
    else
    {
      v22 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", kTransparencyErrorDecode, -140, v17, CFSTR("failed to decode per-app tree node: %@"), v17));

      if (qword_10012A758 != -1)
        dispatch_once(&qword_10012A758, &stru_100105D98);
      v25 = qword_10012A760;
      if (os_log_type_enabled((os_log_t)qword_10012A760, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v30 = v22;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "failed to decode per-app tree node: %@", buf, 0xCu);
      }
      v13 = 0;
      if (a2 && v22)
      {
        v22 = objc_retainAutorelease(v22);
        v13 = 0;
        *a2 = v22;
      }
    }

  }
  else
  {
    v22 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", CFSTR("TransparencyErrorVerify"), -13, v14, CFSTR("per-app tree verification failed")));

    if (a2 && v22)
      *a2 = objc_retainAutorelease(v22);
    if (qword_10012A758 != -1)
      dispatch_once(&qword_10012A758, &stru_100105D78);
    v23 = qword_10012A760;
    if (os_log_type_enabled((os_log_t)qword_10012A760, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "per-app tree verification failed", buf, 2u);
    }
  }

  return v13;
}

void sub_10000A130(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A760;
  qword_10012A760 = (uint64_t)v1;

}

void sub_10000A160(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A760;
  qword_10012A760 = (uint64_t)v1;

}

void sub_10000A190(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A760;
  qword_10012A760 = (uint64_t)v1;

}

void sub_10000A1C0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A760;
  qword_10012A760 = (uint64_t)v1;

}

id sub_10000A494(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v5 = objc_msgSend(*(id *)(a1 + 32), "verifyWithError:", a2);
  if (!v5
    && +[TransparencyAnalytics hasInternalDiagnostics](TransparencyAnalytics, "hasInternalDiagnostics"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
    v8 = kTransparencyResponseMetadataKeyServerHint;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v8));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v11, v8);

    }
    if (objc_msgSend(v6, "count"))
      *a3 = objc_retainAutorelease(v6);

  }
  return v5;
}

void sub_10000A594(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A760;
  qword_10012A760 = (uint64_t)v1;

}

id sub_10000A800(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  uint8_t v15[16];

  if (+[TransparencyAnalytics hasInternalDiagnostics](TransparencyAnalytics, "hasInternalDiagnostics"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
    v8 = kTransparencyResponseMetadataKeyServerHint;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v8));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v11, v8);

    }
    if (objc_msgSend(v6, "count"))
      *a3 = objc_retainAutorelease(v6);

  }
  v12 = objc_msgSend(*(id *)(a1 + 32), "verifyWithError:", a2);
  if (v12 != (id)1)
  {
    if (a2)
      *a2 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", CFSTR("TransparencyErrorVerify"), -13, *a2, CFSTR("per-app tree verification failed")));
    if (qword_10012A768 != -1)
      dispatch_once(&qword_10012A768, &stru_100105E68);
    v13 = qword_10012A770;
    if (os_log_type_enabled((os_log_t)qword_10012A770, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "per-app tree verification failed", v15, 2u);
    }
  }
  return v12;
}

void sub_10000A9B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A770;
  qword_10012A770 = (uint64_t)v1;

}

void sub_10000B108(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A780;
  qword_10012A780 = (uint64_t)v1;

}

void sub_10000B294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B2C0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000B2D0(uint64_t a1)
{

}

void sub_10000B2D8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned __int8 v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  double Current;
  double v36;
  double v37;
  double v38;
  double v39;
  void *v40;
  id v41;
  id v42;
  uint8_t buf[4];
  id v44;

  v2 = *(void **)(a1 + 32);
  v42 = 0;
  v3 = objc_msgSend(v2, "copyManagedObject:", &v42);
  v4 = v42;
  if (!v3)
  {
    if (qword_10012A778 != -1)
      dispatch_once(&qword_10012A778, &stru_100105EA8);
    v9 = qword_10012A780;
    if (os_log_type_enabled((os_log_t)qword_10012A780, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v44 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to find tree head after inclusion verification: %@", buf, 0xCu);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    v10 = objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v4));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;
    v13 = v4;
    goto LABEL_31;
  }
  objc_msgSend(v3, "setUnsigned:value:", "inclusionVerified", *(_QWORD *)(a1 + 64));
  if (*(_QWORD *)(a1 + 64) != 1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataStore"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "createSignedTreeHeadFailure"));

    v7 = *(id **)(a1 + 72);
    if (v7 && *v7)
      v8 = (uint64_t)objc_msgSend(*v7, "code");
    else
      v8 = -120;
    objc_msgSend(v6, "setErrorCode:", v8);
    v14 = *(id **)(a1 + 72);
    if (v14 && *v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v14, "domain"));
      objc_msgSend(v6, "setErrorDomain:", v15);

    }
    else
    {
      objc_msgSend(v6, "setErrorDomain:", kTransparencyErrorUnknown);
    }
    objc_msgSend(v6, "setSth:", v3);
    objc_msgSend(v6, "setVerificationType:", 1);
    if (!*(_QWORD *)(a1 + 64))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataStore"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "application"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "optInServer"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "createFailureEvent:application:optInServer:", v4, v17, v18));

      objc_msgSend(v3, "setFailureEvent:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "optInServer"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "getAggregateOptInState:", 0));

      if (qword_10012A778 != -1)
        dispatch_once(&qword_10012A778, &stru_100105EC8);
      v22 = (void *)qword_10012A780;
      if (os_log_type_enabled((os_log_t)qword_10012A780, OS_LOG_TYPE_DEFAULT))
      {
        v23 = v22;
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "eventId"));
        *(_DWORD *)buf = 138543362;
        v44 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Created failure eventId %{public}@ for STH inclusion validation", buf, 0xCu);

      }
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "followUp"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "application"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "eventId"));
      objc_msgSend(v25, "postFollowup:type:eventId:errorCode:optInState:infoLink:additionalInfo:error:", v26, 2, v27, objc_msgSend(v4, "code"), v21, 0, 0, 0);

    }
  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataStore"));
  v41 = v4;
  v29 = objc_msgSend(v28, "persistWithError:", &v41);
  v13 = v41;

  if ((v29 & 1) == 0)
  {
    if (qword_10012A778 != -1)
      dispatch_once(&qword_10012A778, &stru_100105EE8);
    v30 = qword_10012A780;
    if (os_log_type_enabled((os_log_t)qword_10012A780, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v44 = v13;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "failed to save inclusion verification state to PAT head after TLT entry verification: %@", buf, 0xCu);
    }
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataStore"));
    objc_msgSend(v31, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("verifyPatHeadInclusion"), v13);

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    v32 = objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:", v13));
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v34 = *(void **)(v33 + 40);
    *(_QWORD *)(v33 + 40) = v32;

  }
  Current = CFAbsoluteTimeGetCurrent();
  objc_msgSend(v3, "receiptTime");
  if (Current - v36 > 1.0)
  {
    v37 = CFAbsoluteTimeGetCurrent();
    objc_msgSend(v3, "receiptTime");
    v39 = v37 - v38;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v39));
    objc_msgSend(v12, "logMetric:withName:", v40, CFSTR("ktTLTInclusionProofTime"));

LABEL_31:
  }

}

void sub_10000B804(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A780;
  qword_10012A780 = (uint64_t)v1;

}

void sub_10000B834(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A780;
  qword_10012A780 = (uint64_t)v1;

}

void sub_10000B864(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A780;
  qword_10012A780 = (uint64_t)v1;

}

id sub_10000B944(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  id v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t buf[4];
  uint64_t v31;

  if (+[TransparencyAnalytics hasInternalDiagnostics](TransparencyAnalytics, "hasInternalDiagnostics"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
    v8 = kTransparencyResponseMetadataKeyServerHint;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v8));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v11, v8);

    }
    if (objc_msgSend(v6, "count"))
      *a3 = objc_retainAutorelease(v6);

  }
  v12 = objc_msgSend(*(id *)(a1 + 32), "verifyWithError:", a2);
  if (v12 == (id)1)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nodeBytes"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](TopLevelTreeNode, "parseFromData:error:", v13, a2));

    if (v14)
    {
      if (objc_msgSend(v14, "hasPatHead"))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "patHead"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "object"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "logHead"));
        v18 = objc_msgSend(v16, "isEqualToData:", v17);

        if ((v18 & 1) != 0)
        {
          v19 = 1;
LABEL_36:
          v22 = objc_msgSend(*(id *)(a1 + 32), "setInclusionResult:signedLogHead:error:", v19, *(_QWORD *)(a1 + 40), a2);

          return v22;
        }
      }
      if (a2)
        *a2 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", CFSTR("TransparencyErrorVerify"), -63, CFSTR("top-level tree entry does not contain the SLH in the per-app tree entry")));
      if (qword_10012A778 != -1)
        dispatch_once(&qword_10012A778, &stru_100105F70);
      v23 = qword_10012A780;
      if (!os_log_type_enabled((os_log_t)qword_10012A780, OS_LOG_TYPE_ERROR))
      {
LABEL_35:
        v19 = 0;
        goto LABEL_36;
      }
      *(_WORD *)buf = 0;
      v24 = "top-level tree entry does not contain the SLH in the per-app tree entry";
      v25 = v23;
      v26 = 2;
    }
    else
    {
      if (a2)
        *a2 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", kTransparencyErrorDecode, -141, *a2));
      if (qword_10012A778 != -1)
        dispatch_once(&qword_10012A778, &stru_100105F50);
      v27 = qword_10012A780;
      if (!os_log_type_enabled((os_log_t)qword_10012A780, OS_LOG_TYPE_ERROR))
        goto LABEL_35;
      if (a2)
        v28 = *a2;
      else
        v28 = 0;
      *(_DWORD *)buf = 138412290;
      v31 = v28;
      v24 = "failed to decode top-level tree node: %@";
      v25 = v27;
      v26 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
    goto LABEL_35;
  }
  v20 = v12;
  if (a2)
    *a2 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", CFSTR("TransparencyErrorVerify"), -14, *a2, CFSTR("top-level tree verification failed")));
  if (qword_10012A778 != -1)
    dispatch_once(&qword_10012A778, &stru_100105F30);
  v21 = qword_10012A780;
  if (os_log_type_enabled((os_log_t)qword_10012A780, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "top level tree verification failed", buf, 2u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "setInclusionResult:signedLogHead:error:", v20, *(_QWORD *)(a1 + 40), a2);
}

void sub_10000BD44(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A780;
  qword_10012A780 = (uint64_t)v1;

}

void sub_10000BD74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A780;
  qword_10012A780 = (uint64_t)v1;

}

void sub_10000BDA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A780;
  qword_10012A780 = (uint64_t)v1;

}

void sub_10000C660(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000C690(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000C6C0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000C6F0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000C720(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000C750(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000CE4C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000CE7C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000CEAC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000CEDC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000D664(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000D694(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000D6C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000D6F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000D8A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000DEF8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000DF28(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000DF58(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000E580(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000E5B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000E5E0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000E610(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000E640(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000EB68(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000EB98(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000EBC8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000EBF8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000F03C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000F06C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000F564(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000F594(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000F5C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000F5F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_10000F830(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A790;
  qword_10012A790 = (uint64_t)v1;

}

void sub_1000101B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7A0;
  qword_10012A7A0 = (uint64_t)v1;

}

void sub_1000107CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7A0;
  qword_10012A7A0 = (uint64_t)v1;

}

uint64_t sub_100010948(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  void *v38;
  _QWORD v39[5];
  id v40;
  id v41;
  __int128 *p_buf;
  uint64_t *v43;
  id obj;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  id v48;
  __int128 buf;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t);
  id v53;

  if (!objc_msgSend(*(id *)(a1 + 32), "hasStartSlh")
    || (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startSlh")), v6, !v6))
  {
    v35 = -181;
    if (!a2)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (!objc_msgSend(*(id *)(a1 + 32), "hasEndSlh")
    || (v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endSlh")), v7, !v7))
  {
    v35 = -182;
    if (!a2)
      goto LABEL_20;
    goto LABEL_19;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "proofHashesArray"));
  if (v8)
  {
    v9 = objc_msgSend(*(id *)(a1 + 32), "proofHashesArray_Count");

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startSlh"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "verifier"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "trustedKeyStore"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "signatureVerifier"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[SignedLogHead signedTypeWithObject:verifier:dataStore:](SignedLogHead, "signedTypeWithObject:verifier:dataStore:", v10, v13, v14));

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endSlh"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "verifier"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "trustedKeyStore"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "signatureVerifier"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[SignedLogHead signedTypeWithObject:verifier:dataStore:](SignedLogHead, "signedTypeWithObject:verifier:dataStore:", v15, v18, v19));

      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v50 = 0x3032000000;
      v51 = sub_100010E84;
      v52 = sub_100010E94;
      v53 = 0;
      v45 = 0;
      v46 = &v45;
      v47 = 0x2020000000;
      v48 = 0;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "verifier"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "proofHashesArray"));
      v23 = (id *)(*((_QWORD *)&buf + 1) + 40);
      obj = *(id *)(*((_QWORD *)&buf + 1) + 40);
      v24 = objc_msgSend(v21, "verifyConsistencyProof:startLogHead:endLogHead:error:", v22, v38, v20, &obj);
      objc_storeStrong(v23, obj);

      v48 = v24;
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_100010E9C;
      v39[3] = &unk_1001064A0;
      v39[4] = *(_QWORD *)(a1 + 32);
      v26 = v38;
      v40 = v26;
      p_buf = &buf;
      v27 = v20;
      v41 = v27;
      v43 = &v45;
      objc_msgSend(v25, "performBlockAndWait:", v39);

      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
      v30 = kTransparencyResponseMetadataKeyServerHint;
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", kTransparencyResponseMetadataKeyServerHint));

      if (v31)
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v30));
        objc_msgSend(v28, "setObject:forKeyedSubscript:", v33, v30);

      }
      if (objc_msgSend(v28, "count"))
        *a3 = objc_retainAutorelease(v28);
      if (a2)
        *a2 = objc_retainAutorelease(*(id *)(*((_QWORD *)&buf + 1) + 40));
      v34 = v46[3];

      _Block_object_dispose(&v45, 8);
      _Block_object_dispose(&buf, 8);

      return v34;
    }
  }
  v35 = -183;
  if (a2)
LABEL_19:
    *a2 = (id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorDecode, v35, CFSTR("log consistency response missing data required for verification")));
LABEL_20:
  if (qword_10012A798 != -1)
    dispatch_once(&qword_10012A798, &stru_100106438);
  v36 = qword_10012A7A0;
  if (os_log_type_enabled((os_log_t)qword_10012A7A0, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v35;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "log consistency response missing data required for verification: %ld", (uint8_t *)&buf, 0xCu);
  }
  return 0;
}

void sub_100010E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100010E54(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7A0;
  qword_10012A7A0 = (uint64_t)v1;

}

uint64_t sub_100010E84(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100010E94(uint64_t a1)
{

}

void sub_100010E9C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  void *v4;
  id *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  unsigned __int8 v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id obj;
  uint8_t buf[4];
  uint64_t v38;

  v2 = objc_msgSend(*(id *)(a1 + 32), "forwards");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v6 = *(void **)(v3 + 40);
  v5 = (id *)(v3 + 40);
  v4 = v6;
  if (v2)
  {
    v7 = *(void **)(a1 + 40);
    obj = v4;
    v8 = objc_msgSend(v7, "copyManagedObject:", &obj);
    objc_storeStrong(v5, obj);
    v9 = *(void **)(a1 + 48);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v12 = *(void **)(v10 + 40);
    v11 = (void **)(v10 + 40);
    v35 = v12;
    v13 = objc_msgSend(v9, "copyManagedObject:", &v35);
    v14 = v35;
  }
  else
  {
    v15 = *(void **)(a1 + 48);
    v34 = v4;
    v8 = objc_msgSend(v15, "copyManagedObject:", &v34);
    objc_storeStrong(v5, v34);
    v16 = *(void **)(a1 + 40);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v18 = *(void **)(v17 + 40);
    v11 = (void **)(v17 + 40);
    v33 = v18;
    v13 = objc_msgSend(v16, "copyManagedObject:", &v33);
    v14 = v33;
  }
  v19 = v14;
  v20 = *v11;
  *v11 = v19;

  if (!v8 || !v13)
  {
    if (qword_10012A798 != -1)
      dispatch_once(&qword_10012A798, &stru_100106458);
    v21 = qword_10012A7A0;
    if (os_log_type_enabled((os_log_t)qword_10012A7A0, OS_LOG_TYPE_ERROR))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v38 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to get SLHs from data store: %@", buf, 0xCu);
    }
  }
  if (objc_msgSend(*(id *)(a1 + 32), "forwards"))
  {
    if (objc_msgSend(v8, "consistencyVerified") == (id)2)
    {
      v23 = objc_msgSend(v8, "revision");
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startRevision"));
      v25 = objc_msgSend(v24, "longLongValue");

      if (v23 == v25)
        objc_msgSend(*(id *)(a1 + 32), "setResult:treeHead:error:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    }
  }
  if (objc_msgSend(v8, "consistencyVerified") == (id)1)
    objc_msgSend(*(id *)(a1 + 32), "setResult:treeHead:error:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) == 1)
    objc_msgSend(*(id *)(a1 + 32), "checkSplitsFor:", v13);
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v32 = *(id *)(v27 + 40);
  v28 = objc_msgSend(v26, "persistWithError:", &v32);
  objc_storeStrong((id *)(v27 + 40), v32);

  if ((v28 & 1) == 0)
  {
    if (qword_10012A798 != -1)
      dispatch_once(&qword_10012A798, &stru_100106478);
    v29 = qword_10012A7A0;
    if (os_log_type_enabled((os_log_t)qword_10012A7A0, OS_LOG_TYPE_ERROR))
    {
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v38 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "failed to save consistency results: %@", buf, 0xCu);
    }
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    objc_msgSend(v31, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("verifyConsistency"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

  }
}

void sub_1000111E4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7A0;
  qword_10012A7A0 = (uint64_t)v1;

}

void sub_100011214(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7A0;
  qword_10012A7A0 = (uint64_t)v1;

}

void sub_100011830(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7B0;
  qword_10012A7B0 = (uint64_t)v1;

}

void sub_100011860(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7B0;
  qword_10012A7B0 = (uint64_t)v1;

}

void sub_100011BD8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id *v7;
  uint64_t v8;
  id *v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  id v13;
  NSObject *v14;
  void *v15;
  id v16;
  id v17;
  uint8_t buf[4];
  id v19;

  v2 = *(void **)(a1 + 32);
  v17 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "createManagedObjectWithError:", &v17));
  v4 = v17;
  objc_msgSend(v3, "getUnsigned:", "signatureVerified");
  objc_msgSend(v3, "setUnsigned:value:", "signatureVerified", *(_QWORD *)(a1 + 40));
  objc_msgSend(v3, "setGossip:", objc_msgSend(*(id *)(a1 + 32), "gossip"));
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "createSignedTreeHeadFailure"));

    v7 = *(id **)(a1 + 48);
    if (v7 && *v7)
      v8 = (uint64_t)objc_msgSend(*v7, "code");
    else
      v8 = -120;
    objc_msgSend(v6, "setErrorCode:", v8);
    v9 = *(id **)(a1 + 48);
    if (v9 && *v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v9, "domain"));
      objc_msgSend(v6, "setErrorDomain:", v10);

    }
    else
    {
      objc_msgSend(v6, "setErrorDomain:", kTransparencyErrorUnknown);
    }
    objc_msgSend(v6, "setSth:", v3);
    objc_msgSend(v6, "setVerificationType:", 0);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
  v16 = v4;
  v12 = objc_msgSend(v11, "persistWithError:", &v16);
  v13 = v16;

  if ((v12 & 1) == 0)
  {
    if (qword_10012A7A8 != -1)
      dispatch_once(&qword_10012A7A8, &stru_100106500);
    v14 = qword_10012A7B0;
    if (os_log_type_enabled((os_log_t)qword_10012A7B0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "failed to save signature result for STH: %@", buf, 0xCu);
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    objc_msgSend(v15, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("verifySTHSignature"), v13);

  }
}

void sub_100011E1C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7B0;
  qword_10012A7B0 = (uint64_t)v1;

}

uint64_t sub_100011F64(uint64_t a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  id v28;
  uint64_t v29;
  unsigned int v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  uint8_t buf[4];
  uint64_t v45;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logHead"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](LogHead, "parseFromData:error:", v4, a2));

  if (!objc_msgSend(*(id *)(a1 + 32), "hasSignature")
    || (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature")),
        v6,
        !v6))
  {
    v36 = -27;
    goto LABEL_24;
  }
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logHead"));
  if (!v7
    || (v8 = (void *)v7,
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logHead")),
        v10 = objc_msgSend(v9, "length"),
        v9,
        v8,
        !v10))
  {
    v36 = -26;
    goto LABEL_24;
  }
  if (!v5)
  {
    v36 = -208;
    goto LABEL_24;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signature"));
  if (!v12)
  {
    v36 = -46;
LABEL_36:

    goto LABEL_24;
  }
  v13 = (void *)v12;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "signature"));
  v16 = objc_msgSend(v15, "length");

  if (!v16)
  {
    v36 = -46;
    goto LABEL_24;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
  v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signingKeySpkihash"));
  if (!v17)
  {
    v36 = -47;
    goto LABEL_36;
  }
  v18 = (void *)v17;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "signingKeySpkihash"));
  v21 = objc_msgSend(v20, "length");

  if (v21)
  {
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "verifier"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logHead"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "signature"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "signingKeySpkihash"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
    v43 = 0;
    v27 = objc_msgSend(v41, "verifyMessage:signature:spkiHash:algorithm:error:", v22, v23, v25, +[TransparencySignatureVerifier secKeyAlgorithmForProtoAlgorithm:](TransparencySignatureVerifier, "secKeyAlgorithmForProtoAlgorithm:", objc_msgSend(v26, "algorithm")), &v43);
    v28 = v43;

    v29 = v27;
    v30 = +[TransparencyError hasUnknownSPKIHashError:](TransparencyError, "hasUnknownSPKIHashError:", v28);
    if (v30)
      v29 = 2;
    if (a2 && v28)
      *a2 = (uint64_t)objc_retainAutorelease(v28);
    if (!objc_msgSend(*(id *)(a1 + 32), "gossip") || v29)
    {
      objc_msgSend(*(id *)(a1 + 32), "storeSignatureResult:signatureError:", v29, a2);
      if ((v27 & ~v30 & 1) == 0)
      {
        if (a2)
          *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", CFSTR("TransparencyErrorVerify"), -139, *a2));
        if (qword_10012A7A8 != -1)
          dispatch_once(&qword_10012A7A8, &stru_100106588);
        v39 = qword_10012A7B0;
        if (os_log_type_enabled((os_log_t)qword_10012A7B0, OS_LOG_TYPE_ERROR))
        {
          if (a2)
            v40 = *a2;
          else
            v40 = 0;
          *(_DWORD *)buf = 138412290;
          v45 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Signed log head signature verification failed: %@", buf, 0xCu);
        }
      }
    }
    else
    {
      if (qword_10012A7A8 != -1)
        dispatch_once(&qword_10012A7A8, &stru_100106568);
      v31 = qword_10012A7B0;
      if (os_log_type_enabled((os_log_t)qword_10012A7B0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "gossiped signed log head failed signature validation, will not store result", buf, 2u);
      }
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", CFSTR("TransparencyErrorVerify"), -139, *a2));
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics formatEventName:application:](TransparencyAnalytics, "formatEventName:application:", CFSTR("GossipSignatureVerificationFailed"), kKTApplicationIdentifierTLT));
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](TransparencyAnalytics, "logger"));
      objc_msgSend(v34, "logResultForEvent:hardFailure:result:", v33, 1, v32);

      v35 = objc_retainAutorelease(v32);
      *a2 = (uint64_t)v35;

    }
    goto LABEL_31;
  }
  v36 = -47;
LABEL_24:
  if (a2)
    *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", kTransparencyErrorDecode, v36, *a2, CFSTR("SLH missing data required for verification")));
  if (qword_10012A7A8 != -1)
    dispatch_once(&qword_10012A7A8, &stru_100106548);
  v37 = qword_10012A7B0;
  if (os_log_type_enabled((os_log_t)qword_10012A7B0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v45 = v36;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "SLH missing data required for verification: %ld", buf, 0xCu);
  }
  v29 = 0;
LABEL_31:

  return v29;
}

void sub_100012508(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7B0;
  qword_10012A7B0 = (uint64_t)v1;

}

void sub_100012538(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7B0;
  qword_10012A7B0 = (uint64_t)v1;

}

void sub_100012568(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7B0;
  qword_10012A7B0 = (uint64_t)v1;

}

uint64_t MilestoneRootsRequest_Version_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[MilestoneRootsRequest descriptor](MilestoneRootsRequest, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetMilestoneRootsRequest_Version_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[MilestoneRootsRequest descriptor](MilestoneRootsRequest, "descriptor"), "fieldWithNumber:", 1), a2);
}

uint64_t MilestoneRootsResponse_Status_RawValue(uint64_t a1)
{
  return sub_1000C9A70(a1, objc_msgSend(+[MilestoneRootsResponse descriptor](MilestoneRootsResponse, "descriptor"), "fieldWithNumber:", 1));
}

uint64_t SetMilestoneRootsResponse_Status_RawValue(uint64_t a1, uint64_t a2)
{
  return sub_1000C9A74(a1, objc_msgSend(+[MilestoneRootsResponse descriptor](MilestoneRootsResponse, "descriptor"), "fieldWithNumber:", 1), a2);
}

id sub_100013240(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "writeData:", *(_QWORD *)(a1 + 32));
}

void sub_100013C08(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7D8;
  qword_10012A7D8 = (uint64_t)v1;

}

void sub_100013C38(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7D8;
  qword_10012A7D8 = (uint64_t)v1;

}

uint64_t sub_100013D80(uint64_t a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  id v34;
  uint64_t v35;
  unsigned int v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  void *v42;
  id v43;
  uint8_t buf[4];
  uint64_t v45;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapHead"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](MapHead, "parseFromData:error:", v4, a2));

  if (!objc_msgSend(*(id *)(a1 + 32), "hasSignature")
    || (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature")),
        v6,
        !v6))
  {
    v39 = -22;
    goto LABEL_36;
  }
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapHead"));
  if (!v7
    || (v8 = (void *)v7,
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapHead")),
        v10 = objc_msgSend(v9, "length"),
        v9,
        v8,
        !v10))
  {
    v39 = -21;
    goto LABEL_36;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signature"));
  if (!v12)
  {
    v39 = -51;
LABEL_35:

    goto LABEL_36;
  }
  v13 = (void *)v12;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "signature"));
  v16 = objc_msgSend(v15, "length");

  if (!v16)
  {
    v39 = -51;
    goto LABEL_36;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
  v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signingKeySpkihash"));
  if (!v17)
  {
    v39 = -52;
    goto LABEL_35;
  }
  v18 = (void *)v17;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "signingKeySpkihash"));
  v21 = objc_msgSend(v20, "length");

  if (v21)
  {
    if (v5)
    {
      v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapHeadHash"));
      if (v22
        && (v23 = (void *)v22,
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapHeadHash")),
            v25 = objc_msgSend(v24, "length"),
            v24,
            v23,
            v25))
      {
        if (objc_msgSend(v5, "application") && objc_msgSend(v5, "application"))
        {
          if (objc_msgSend(v5, "hasChangeLogHead")
            && (v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "changeLogHead")),
                v26,
                v26))
          {
            if (objc_msgSend(v5, "timestampMs"))
            {
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "verifier"));
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapHead"));
              v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
              v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "signature"));
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "signingKeySpkihash"));
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signature"));
              v43 = 0;
              v33 = objc_msgSend(v27, "verifyMessage:signature:spkiHash:algorithm:error:", v28, v29, v31, +[TransparencySignatureVerifier secKeyAlgorithmForProtoAlgorithm:](TransparencySignatureVerifier, "secKeyAlgorithmForProtoAlgorithm:", objc_msgSend(v32, "algorithm")), &v43);
              v34 = v43;

              v35 = v33;
              v36 = +[TransparencyError hasUnknownSPKIHashError:](TransparencyError, "hasUnknownSPKIHashError:", v34);
              if (v36)
                v35 = 2;
              if (a2 && v34)
                *a2 = (uint64_t)objc_retainAutorelease(v34);
              if ((v33 & ~v36 & 1) == 0)
              {
                if (a2)
                  *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", CFSTR("TransparencyErrorVerify"), -138, *a2));
                if (qword_10012A7D0 != -1)
                  dispatch_once(&qword_10012A7D0, &stru_100106630);
                v37 = qword_10012A7D8;
                if (os_log_type_enabled((os_log_t)qword_10012A7D8, OS_LOG_TYPE_ERROR))
                {
                  if (a2)
                    v38 = *a2;
                  else
                    v38 = 0;
                  *(_DWORD *)buf = 138412290;
                  v45 = v38;
                  _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "SMH signature verification failed: %@", buf, 0xCu);
                }
              }

              goto LABEL_43;
            }
            v39 = -227;
          }
          else
          {
            v39 = -25;
          }
        }
        else
        {
          v39 = -24;
        }
      }
      else
      {
        v39 = -23;
      }
    }
    else
    {
      v39 = -207;
    }
  }
  else
  {
    v39 = -52;
  }
LABEL_36:
  if (a2)
    *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", kTransparencyErrorDecode, v39, *a2, CFSTR("SMH missing data required for verification")));
  if (qword_10012A7D0 != -1)
    dispatch_once(&qword_10012A7D0, &stru_100106610);
  v40 = qword_10012A7D8;
  if (os_log_type_enabled((os_log_t)qword_10012A7D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v45 = v39;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "SMH missing data required for verification: %ld", buf, 0xCu);
  }
  v35 = 0;
LABEL_43:

  return v35;
}

void sub_10001429C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7D8;
  qword_10012A7D8 = (uint64_t)v1;

}

void sub_1000142CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7D8;
  qword_10012A7D8 = (uint64_t)v1;

}

void sub_10001439C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  uint8_t buf[4];
  id v11;

  v2 = objc_msgSend(*(id *)(a1 + 32), "copyManagedObject:", 0);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    objc_msgSend(v3, "onMocSetMapHead:mmdResult:mmdError:", v2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    v9 = 0;
    v5 = objc_msgSend(v4, "persistWithError:", &v9);
    v6 = v9;

    if ((v5 & 1) == 0)
    {
      if (qword_10012A7D0 != -1)
        dispatch_once(&qword_10012A7D0, &stru_100106650);
      v7 = qword_10012A7D8;
      if (os_log_type_enabled((os_log_t)qword_10012A7D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v11 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to save inclusion state for map head: %@", buf, 0xCu);
      }
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
      objc_msgSend(v8, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("mapHeadMMDState"), v6);

    }
  }

}

void sub_100014504(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7D8;
  qword_10012A7D8 = (uint64_t)v1;

}

uint64_t sub_1000146AC(uint64_t a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  void *v6;
  double v7;
  unint64_t v8;
  id v9;
  void *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint8_t buf[4];
  id v18;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapHead"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](MapHead, "parseFromData:error:", v4, a2));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 40)));
  objc_msgSend(v6, "timeIntervalSince1970");
  v8 = (unint64_t)(v7 * 1000.0);

  v9 = objc_msgSend(v5, "timestampMs");
  if ((unint64_t)v9 + kKTMaximumMergeDelayMs >= v8)
  {
    if (qword_10012A7D0 != -1)
      dispatch_once(&qword_10012A7D0, &stru_100106690);
    v14 = qword_10012A7D8;
    if (os_log_type_enabled((os_log_t)qword_10012A7D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "SMH MMD verified", buf, 2u);
    }
    v15 = *(void **)(a1 + 32);
    v13 = 1;
    objc_msgSend(v15, "setMMDVerifiedForMapHead:mmdError:", 1, 0);
  }
  else
  {
    if (qword_10012A7D0 != -1)
      dispatch_once(&qword_10012A7D0, &stru_100106670);
    v10 = (void *)qword_10012A7D8;
    if (os_log_type_enabled((os_log_t)qword_10012A7D8, OS_LOG_TYPE_ERROR))
    {
      v11 = v10;
      *(_DWORD *)buf = 134217984;
      v18 = objc_msgSend(v5, "timestampMs");
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "SMH timestamp exceeds MMD: %lld", buf, 0xCu);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", CFSTR("TransparencyErrorVerify"), -228, *a2, CFSTR("SMH timestamp exceeds MMD: %lld"), objc_msgSend(v5, "timestampMs")));
    objc_msgSend(*(id *)(a1 + 32), "setMMDVerifiedForMapHead:mmdError:", 0, v12);
    if (v12)
      *a2 = objc_retainAutorelease(v12);

    v13 = 0;
  }

  return v13;
}

void sub_10001490C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7D8;
  qword_10012A7D8 = (uint64_t)v1;

}

void sub_10001493C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7D8;
  qword_10012A7D8 = (uint64_t)v1;

}

void sub_100014C9C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7E8;
  qword_10012A7E8 = (uint64_t)v1;

}

void sub_100014CCC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7E8;
  qword_10012A7E8 = (uint64_t)v1;

}

void sub_100014F18(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7E8;
  qword_10012A7E8 = (uint64_t)v1;

}

void sub_1000152F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 buf)
{
  uint64_t v15;
  void *v16;
  id v19;
  NSObject *v20;

  _Block_object_dispose(&buf, 8);
  if (a2 == 1)
  {
    v19 = objc_begin_catch(a1);
    if (qword_10012A7E0 != -1)
      dispatch_once(&qword_10012A7E0, &stru_1001067C0);
    v20 = qword_10012A7E8;
    if (os_log_type_enabled((os_log_t)qword_10012A7E8, OS_LOG_TYPE_ERROR))
    {
      buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Runtime missing PCCServerEnvironment class", (uint8_t *)&buf, 2u);
    }
    objc_msgSend(v16, "readPCCPreferences:", v15);

    objc_end_catch();
    JUMPOUT(0x10001528CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1000153C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7E8;
  qword_10012A7E8 = (uint64_t)v1;

}

void sub_1000153F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7E8;
  qword_10012A7E8 = (uint64_t)v1;

}

void sub_100015424(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (qword_10012A7E0 != -1)
      dispatch_once(&qword_10012A7E0, &stru_100106778);
    v7 = qword_10012A7E8;
    if (os_log_type_enabled((os_log_t)qword_10012A7E8, OS_LOG_TYPE_ERROR))
    {
      v8 = 138412290;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to get PCC environment, defaulting to Carry: %@", (uint8_t *)&v8, 0xCu);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "determineATEnvironmentFromPCCEnvironment:completion:", v5, *(_QWORD *)(a1 + 40));

}

void sub_10001551C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7E8;
  qword_10012A7E8 = (uint64_t)v1;

}

void sub_10001554C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A7E8;
  qword_10012A7E8 = (uint64_t)v1;

}

Class sub_1000155BC(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_10012A7F8)
  {
    v4 = off_100106808;
    v5 = 0;
    qword_10012A7F8 = _sl_dlopen(&v4, &v3);
    if (!qword_10012A7F8)
    {
      abort_report_np("%s", (const char *)v3);
LABEL_8:
      sub_1000CC904();
    }
    if (v3)
      free(v3);
  }
  result = objc_getClass("PCCServerEnvironment");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    goto LABEL_8;
  qword_10012A7F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100015FE8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A808;
  qword_10012A808 = (uint64_t)v1;

}

void sub_100016018(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A808;
  qword_10012A808 = (uint64_t)v1;

}

void sub_100016244(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A808;
  qword_10012A808 = (uint64_t)v1;

}

void sub_100016AB0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100016AE0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100016C34(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100016C64(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100016F58(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100016F88(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100016FB8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100017120(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100017A1C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100017A4C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100017E24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100017E54(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100018294(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_1000182C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_1000182F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100018324(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_10001889C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_1000188CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_1000188FC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_10001892C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100018B10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100018B34(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100018C7C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100018F24(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a3;
  if (!v5)
  {
    v6 = *(void **)(a1 + 32);
    v7 = 0;
    objc_msgSend(v6, "configureFromNetworkBagData:error:", a2, &v7);
    v5 = v7;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10001926C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100019280(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_1000192B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_1000192E0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100019310(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100019514(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100019530(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A818;
  qword_10012A818 = (uint64_t)v1;

}

void sub_100019B44(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A828;
  qword_10012A828 = (uint64_t)v1;

}

void sub_100019C74(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A838;
  qword_10012A838 = (uint64_t)v1;

}

void sub_100019F10(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A838;
  qword_10012A838 = (uint64_t)v1;

}

void sub_100019F40(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A838;
  qword_10012A838 = (uint64_t)v1;

}

void sub_100019F70(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A838;
  qword_10012A838 = (uint64_t)v1;

}

void sub_10001A2A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A838;
  qword_10012A838 = (uint64_t)v1;

}

void sub_10001A4E8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A838;
  qword_10012A838 = (uint64_t)v1;

}

void sub_10001A518(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A838;
  qword_10012A838 = (uint64_t)v1;

}

void sub_10001BCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtColumn:", a2));
  v6 = (id)v4;
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", v4, a2);
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", v5, a2);

  }
}

void sub_10001BDE8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtColumn:", a2));
  if (v5)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v5, v6);

}

void sub_10001C7CC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A848;
  qword_10012A848 = (uint64_t)v1;

}

void sub_10001C7FC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A848;
  qword_10012A848 = (uint64_t)v1;

}

void sub_10001C8E8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  id v12;
  id v13;
  uint8_t buf[4];
  id v15;

  v2 = *(void **)(a1 + 32);
  v13 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "createManagedObjectWithError:", &v13));
  v4 = v13;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    objc_msgSend(v5, "onMocSetMapHead:signatureResult:signatureError:", v3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
    v12 = v4;
    v7 = objc_msgSend(v6, "persistWithError:", &v12);
    v8 = v12;

    if ((v7 & 1) == 0)
    {
      if (qword_10012A840 != -1)
        dispatch_once(&qword_10012A840, &stru_100106DD0);
      v9 = qword_10012A848;
      if (os_log_type_enabled((os_log_t)qword_10012A848, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed persist SMH signature failure: %@", buf, 0xCu);
      }
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataStore"));
      objc_msgSend(v10, "reportCoreDataPersistEventForLocation:underlyingError:", CFSTR("mapHeadSignature"), v8);

    }
  }
  else
  {
    if (qword_10012A840 != -1)
      dispatch_once(&qword_10012A840, &stru_100106DB0);
    v11 = qword_10012A848;
    if (os_log_type_enabled((os_log_t)qword_10012A848, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "failed to create SMH object: %@", buf, 0xCu);
    }
    v8 = v4;
  }

}

void sub_10001CAE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A848;
  qword_10012A848 = (uint64_t)v1;

}

void sub_10001CB14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A848;
  qword_10012A848 = (uint64_t)v1;

}

void sub_10001CD24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Transparency", "default");
  v2 = (void *)qword_10012A848;
  qword_10012A848 = (uint64_t)v1;

}

id sub_10001CDAC()
{
  uint64_t v0;

  return *(id *)(v0 + 112);
}

uint64_t sub_10001CDB4()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 120));
}

uint64_t sub_10001CDBC()
{
  return 0;
}

uint64_t sub_10001CDC8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 128, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 128);
  sub_10001CE14(v1, *(_QWORD *)(v0 + 136));
  return v1;
}

uint64_t sub_10001CE14(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10001CE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 128, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 128);
  v6 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return sub_10001CE74(v5, v6);
}

uint64_t sub_10001CE74(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void *sub_10001CE84(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 128, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10001CEC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 144, 15);
  sub_10001CEF4();
  return v1;
}

_QWORD *sub_10001CEF4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1);
  sub_10001D0FC();
  v1[16] = 0;
  v1[17] = 0;
  static DispatchQoS.unspecified.getter();
  v19 = &_swiftEmptyArrayStorage;
  v12 = sub_1000202A4(&qword_100126940, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_10001D138(&qword_100126948);
  v14 = sub_10001D178();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v13, v14, v6, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  v1[14] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ALL, 0x80000001000DB5F0, v11, v8, v5, 0);
  v15 = type metadata accessor for NWPathMonitor(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = NWPathMonitor.init()();
  v1[15] = v16;
  swift_retain(v16);
  swift_retain(v1);
  NWPathMonitor.pathUpdateHandler.setter(sub_10001D34C, v1);
  swift_release(v16);
  return v1;
}

unint64_t sub_10001D0FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100126938;
  if (!qword_100126938)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100126938);
  }
  return result;
}

uint64_t sub_10001D138(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_10001D178()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100126950;
  if (!qword_100126950)
  {
    v1 = sub_10001D1C4(&qword_100126948);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100126950);
  }
  return result;
}

uint64_t sub_10001D1C4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001D208(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for NWPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 40) & ~v11;
  v13 = (char *)swift_allocObject(&unk_100106FE8, v12 + v6, v11 | 7);
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v13[v12], (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain(a2);
  v14 = sub_10001D3C0((uint64_t)v9, (uint64_t)&unk_100126C48, (uint64_t)v13);
  return swift_release(v14);
}

uint64_t sub_10001D34C(uint64_t a1)
{
  uint64_t v1;

  return sub_10001D208(a1, v1);
}

uint64_t sub_10001D354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v7 = *(int **)(*(_QWORD *)a4 + 144);
  v10 = (uint64_t (*)(uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v5 + 16) = v8;
  *v8 = v5;
  v8[1] = sub_100020638;
  return v10(a5);
}

uint64_t sub_10001D3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000202F0(a1, &qword_100127220);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100106F98, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100126C10, v16);
}

uint64_t sub_10001D50C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for NWPath.Status(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v5);
  v2[9] = swift_task_alloc(v5);
  return swift_task_switch(sub_10001D57C, v1, 0);
}

uint64_t sub_10001D57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v14;
  uint64_t (*v15)(void);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = sub_10001D138(&qword_100126960);
  OS_dispatch_queue.sync<A>(execute:)(sub_10001D780, v1, v2);
  v3 = *(int **)(v0 + 16);
  *(_QWORD *)(v0 + 80) = v3;
  if (v3)
  {
    v5 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 88) = v8;
    v9 = swift_retain(v8);
    NWPath.status.getter(v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v5, enum case for NWPath.Status.satisfied(_:), v6);
    v10 = static NWPath.Status.== infix(_:_:)(v4, v5);
    v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v11(v5, v6);
    v11(v4, v6);
    *(_BYTE *)(v0 + 104) = v10 & 1;
    v15 = (uint64_t (*)(void))((char *)v3 + *v3);
    v12 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 96) = v12;
    *v12 = v0;
    v12[1] = sub_10001D6D0;
    return v15();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001D6D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  sub_10001CE74(v2, v1);
  return swift_task_switch(sub_10001D740, v3, 0);
}

uint64_t sub_10001D740()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001CE74(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001D780@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject(&unk_100106FC0, 32, 7);
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = &unk_100126C38;
  }
  else
  {
    v7 = 0;
  }
  *a1 = v7;
  a1[1] = result;
  return result;
}

uint64_t sub_10001D7F0(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *a2;
  v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_100020638;
  return v7(v4);
}

uint64_t sub_10001D850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[5];
  uint64_t v13;

  v3 = v2;
  v6 = *(NSObject **)(v3 + 112);
  v7 = (_QWORD *)swift_allocObject(&unk_100106E20, 40, 7);
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  v8 = swift_allocObject(&unk_100106E48, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_10001D9A0;
  *(_QWORD *)(v8 + 24) = v7;
  v12[4] = sub_10001D9F8;
  v13 = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10001DA18;
  v12[3] = &unk_100106E60;
  v9 = _Block_copy(v12);
  v10 = v13;
  swift_retain(v3);
  swift_retain(a2);
  swift_retain(v8);
  swift_release(v10);
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v8, "", 117, 38, 25, 1);
  swift_release(v7);
  result = swift_release(v8);
  if ((v6 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10001D994()
{
  return sub_10001E450((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10001D9A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 120);
  swift_retain(v3);
  return v4(v2, v3);
}

uint64_t sub_10001D9E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001D9F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10001DA18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10001DA38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001DA48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001DA50()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10001DA68, v0, 0);
}

uint64_t sub_10001DA68()
{
  uint64_t v0;

  NWPathMonitor.start(queue:)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DA9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 120));
  sub_10001CE74(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10001DAD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 120));
  sub_10001CE74(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10001DB04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_10001DB20, v2, 0);
}

uint64_t sub_10001DB20()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 32) + 152))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DB5C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)(*(_QWORD *)v0 + 160);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100020638;
  return v5();
}

uint64_t sub_10001DBB4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 112, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t sub_10001DBE4(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 112, v4, 1, 0);
  *(_BYTE *)(v1 + 112) = a1;
  return result;
}

void *sub_10001DC20(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return &j__swift_endAccess;
}

unint64_t sub_10001DC60()
{
  return sub_10001DC6C((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t sub_10001DC6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10001D138(&qword_100126C28);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10001D138(&qword_100126BF0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100020448(v13, (uint64_t)v5);
    result = sub_10001F334((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10001DDF8()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 120, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 120));
}

uint64_t sub_10001DE2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 120, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 120) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *sub_10001DE70(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 120, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10001DEAC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 128, v2, 0, 0);
  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 128));
}

uint64_t sub_10001DEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 128, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_unknownObjectRelease(v5);
}

uint64_t sub_10001DF3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for NetworkReachabilityMonitor();
  v1 = swift_allocObject(v0, 144, 15);
  sub_10001CEF4();
  sub_1000202A4(&qword_100126970, v2, (uint64_t (*)(uint64_t))type metadata accessor for NetworkReachabilityMonitor, (uint64_t)&unk_1000DB654);
  return v1;
}

uint64_t type metadata accessor for NetworkReachabilityMonitor()
{
  return objc_opt_self(_TtC15swtransparencyd26NetworkReachabilityMonitor);
}

uint64_t sub_10001DFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v5 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_allocObject(v2, 144, 15);
  swift_defaultActor_initialize(v8);
  v9 = sub_10001DC6C((uint64_t)_swiftEmptyArrayStorage);
  *(_BYTE *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = v9;
  *(_QWORD *)(v8 + 128) = a1;
  *(_QWORD *)(v8 + 136) = a2;
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject(&unk_100106E98, 40, 7);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v8;
  swift_retain(v8);
  v12 = sub_10001D3C0((uint64_t)v7, (uint64_t)&unk_100126980, (uint64_t)v11);
  swift_release(v12);
  return v8;
}

uint64_t sub_10001E0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v5 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v2);
  v8 = sub_10001DC6C((uint64_t)&_swiftEmptyArrayStorage);
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = v8;
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  v10 = (_QWORD *)swift_allocObject(&unk_100106EC0, 40, 7);
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v2;
  swift_retain(v2);
  v11 = sub_10001D3C0((uint64_t)v7, (uint64_t)&unk_100126988, (uint64_t)v10);
  swift_release(v11);
  return v2;
}

uint64_t sub_10001E19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(*(_QWORD *)a4 + 160);
  return swift_task_switch(sub_10001E1C0, a4, 0);
}

uint64_t sub_10001E1C0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 32) = (*(uint64_t (**)(void))(v0 + 24))();
  *(_QWORD *)(v0 + 40) = v1;
  return swift_task_switch(sub_10001E200, 0, 0);
}

uint64_t sub_10001E200()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  int *v8;

  v1 = v0[5];
  v2 = v0[2];
  ObjectType = swift_getObjectType(v0[4]);
  v4 = *(int **)(v1 + 16);
  v5 = v4[1];
  v8 = (int *)((char *)v4 + *v4);
  swift_retain(v2);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[6] = v6;
  *v6 = v0;
  v6[1] = sub_10001E290;
  return ((uint64_t (*)(void *, _QWORD, uint64_t, _QWORD))v8)(&unk_100126C20, v0[2], ObjectType, v0[5]);
}

uint64_t sub_10001E290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_unknownObjectRelease(v1);
  swift_release(v2);
  return swift_task_switch(sub_10001E2FC, v2, 0);
}

uint64_t sub_10001E2FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v1 = (*(uint64_t (**)(void))(v0 + 24))();
  v3 = v2;
  *(_QWORD *)(v0 + 56) = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = *(int **)(v3 + 24);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v0 + 64) = v6;
  *v6 = v0;
  v6[1] = sub_10001E37C;
  return v8(ObjectType, v3);
}

uint64_t sub_10001E37C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v0;
  v2 = *(_QWORD *)(v5 + 56);
  v1 = *(_QWORD *)(v5 + 64);
  v3 = *v0;
  v5 = v3;
  swift_task_dealloc(v1);
  swift_unknownObjectRelease(v2);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10001E3CC()
{
  return sub_10001E450((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_10001E3D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10012697C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100020638;
  v3[2] = v2;
  v3[3] = *(_QWORD *)(*(_QWORD *)v2 + 160);
  return swift_task_switch(sub_10001E1C0, v2, 0);
}

uint64_t sub_10001E444()
{
  return sub_10001E450((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_10001E450(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_10001E480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10012697C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001E4EC;
  v3[2] = v2;
  v3[3] = *(_QWORD *)(*(_QWORD *)v2 + 160);
  return swift_task_switch(sub_10001E1C0, v2, 0);
}

uint64_t sub_10001E4EC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001E534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(*(_QWORD *)a2 + 208);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100020638;
  return v7(a1);
}

uint64_t sub_10001E59C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[8] = v0;
  v2 = sub_10001D138(&qword_100126998);
  v1[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001D138(&qword_1001269A0);
  v1[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[11] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[12] = swift_task_alloc(v5);
  v1[13] = swift_task_alloc(v5);
  v1[14] = swift_task_alloc(v5);
  return swift_task_switch(sub_10001E640, v0, 0);
}

uint64_t sub_10001E640()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(unint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t (*v38)(uint64_t, _QWORD);
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;
  uint64_t (*v52)(void);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v50 = (_QWORD *)(v0 + 48);
  v1 = (_QWORD *)(v0 + 56);
  v56 = *(_QWORD *)(v0 + 80);
  v57 = v0 + 16;
  v52 = *(uint64_t (**)(void))(**(_QWORD **)(v0 + 64) + 136);
  v53 = *(_QWORD *)(v0 + 88);
  while (1)
  {
    v7 = v52();
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      *v50 = 0;
      swift_stdlib_random(v50, 8);
      v9 = *v50 * v8;
      v10 = ((unint64_t)*v50 * (unsigned __int128)v8) >> 64;
      if (v8 > v9)
      {
        v11 = -(uint64_t)v8 % v8;
        if (v11 > v9)
        {
          do
          {
            *v1 = 0;
            swift_stdlib_random(v1, 8);
          }
          while (v11 > *v1 * v8);
          v10 = ((unint64_t)*v1 * (unsigned __int128)v8) >> 64;
        }
      }
      v12 = *(_QWORD *)(v0 + 104);
      v54 = *(_QWORD *)(v0 + 72);
      v55 = *(_QWORD *)(v0 + 80);
      v13 = sub_10001FF48(v7);
      v15 = v14;
      v17 = v16 & 1;
      v18 = sub_10001FFD0(v13, v14, v16 & 1, v10, v7);
      v20 = v19;
      v22 = v21 & 1;
      sub_100020120(v13, v15, v17);
      v23 = *(int *)(v56 + 48);
      v24 = sub_10002012C(v12, v18, v20, v22, v7);
      *(_QWORD *)(v12 + v23) = v24;
      v25 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v54, v12, v25);
      *(_QWORD *)(v54 + *(int *)(v56 + 48)) = v24;
      swift_retain(v24);
      sub_1000202F0(v12, &qword_1001269A0);
      sub_100020120(v18, v20, v22);
      v26 = v53;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v55);
    }
    else
    {
      v26 = v53;
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v53 + 56))(*(_QWORD *)(v0 + 72), 1, 1, *(_QWORD *)(v0 + 80));
    }
    swift_bridgeObjectRelease(v7);
    v27 = *(_QWORD *)(v0 + 72);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v26 + 48))(v27, 1, *(_QWORD *)(v0 + 80));
    v29 = *(_QWORD *)(v0 + 112);
    if (v28 == 1)
      break;
    v30 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 64);
    v32 = *(int *)(v56 + 48);
    v33 = type metadata accessor for UUID(0);
    v34 = *(_QWORD *)(v33 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v29, v27, v33);
    v35 = *(_QWORD *)(v27 + v32);
    *(_QWORD *)(v29 + v32) = v35;
    v36 = *(int *)(v56 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v30, v29, v33);
    *(_QWORD *)(v30 + v36) = v35;
    v37 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 152);
    swift_retain(v35);
    v38 = (uint64_t (*)(uint64_t, _QWORD))v37(v57);
    v40 = v39;
    v41 = *v39;
    swift_bridgeObjectRetain(*v39);
    v42 = sub_10001F334(v30);
    LOBYTE(v30) = v43;
    swift_bridgeObjectRelease(v41);
    if ((v30 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v40);
      v58 = *v40;
      *v40 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
        sub_10001FD18();
      v45 = *(_QWORD *)(v58 + 48) + *(_QWORD *)(v34 + 72) * v42;
      v3 = *(void (**)(unint64_t, uint64_t))(v34 + 8);
      v3(v45, v33);
      v2 = *(_QWORD *)(*(_QWORD *)(v58 + 56) + 8 * v42);
      sub_10001F880(v42, v58);
      v46 = *v40;
      *v40 = v58;
      swift_bridgeObjectRelease(v46);
    }
    else
    {
      v2 = 0;
      v3 = *(void (**)(unint64_t, uint64_t))(v34 + 8);
    }
    v4 = *(_QWORD *)(v51 + 112);
    v5 = v33;
    v0 = v51;
    v3(*(_QWORD *)(v51 + 96), v5);
    swift_release(v2);
    v6 = v38(v57, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 176))(v6);
    swift_release(v35);
    sub_1000202F0(v4, &qword_1001269A0);
  }
  v47 = *(_QWORD *)(v0 + 96);
  v48 = *(_QWORD *)(v0 + 104);
  sub_1000202F0(v27, &qword_100126998);
  swift_task_dealloc(v29);
  swift_task_dealloc(v48);
  swift_task_dealloc(v47);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E9F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[6] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  return swift_task_switch(sub_10001EA60, v0, 0);
}

uint64_t sub_10001EA60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void (*v11)(uint64_t, _QWORD);
  uint64_t *v12;
  uint64_t *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 48) + 112))();
  if ((v1 & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 48);
    UUID.init()(v1);
    type metadata accessor for ContinuationStore(0);
    v9 = sub_100077450();
    *(_QWORD *)(v0 + 88) = v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v5, v6);
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 152);
    swift_retain(v9);
    v11 = (void (*)(uint64_t, _QWORD))v10(v0 + 16);
    v13 = v12;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
    v19 = *v13;
    *v13 = 0x8000000000000000;
    sub_10001FB24(v9, v4, isUniquelyReferenced_nonNull_native);
    v15 = *v13;
    *v13 = v19;
    swift_bridgeObjectRelease(v15);
    v16 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    *(_QWORD *)(v0 + 96) = v16;
    v16(v4, v6);
    v11(v0 + 16, 0);
    sub_1000202A4(&qword_1001269C0, v17, (uint64_t (*)(uint64_t))type metadata accessor for ReachabilityTracker, (uint64_t)&unk_1000DB670);
    v18 = (_QWORD *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
    *(_QWORD *)(v0 + 104) = v18;
    *v18 = v0;
    v18[1] = sub_10001EC24;
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
  }
}

uint64_t sub_10001EC24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10001ECE8;
  else
    v4 = sub_10001EC88;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 48), 0);
}

uint64_t sub_10001EC88()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001ECE8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  v1(v3, v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001ED48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10001ED60, 0, 0);
}

uint64_t sub_10001ED60()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)
                                  + 1));
  v0[4] = v1;
  *v1 = v0;
  v1[1] = sub_10001EDE4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0[2], 0, 0, 0xD000000000000010, 0x80000001000E1500, sub_100020298, v0[3], (char *)&type metadata for () + 8);
}

uint64_t sub_10001EDE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10001EE50, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10001EE50()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EE5C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = a1;
  return swift_task_switch(sub_10001EE78, v1, 0);
}

uint64_t sub_10001EE78()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(unsigned __int8 *)(v0 + 24);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v0 + 16) + 120))(*(unsigned __int8 *)(v0 + 24));
  if (v1 == 1)
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 136))(v2);
    sub_10001EF04(v4);
    swift_bridgeObjectRelease(v4);
    v5 = sub_10001DC6C((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 144))(v5);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EF04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;

  v2 = sub_10001D138(&qword_1001269A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v9)
      return swift_release(a1);
    v19 = *(_QWORD *)(v5 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v9)
        return swift_release(a1);
      v19 = *(_QWORD *)(v5 + 8 * v11);
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v9)
          return swift_release(a1);
        v19 = *(_QWORD *)(v5 + 8 * v11);
        if (!v19)
        {
          v11 = v18 + 3;
          if (v18 + 3 >= v9)
            return swift_release(a1);
          v19 = *(_QWORD *)(v5 + 8 * v11);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v19 - 1) & v19;
    v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(a1 + 48);
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v4, v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v13, v15);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    *(_QWORD *)&v4[*(int *)(v2 + 48)] = v16;
    v17 = *(void (**)(void))(*(_QWORD *)v16 + 168);
    swift_retain(v16);
    v17();
    result = sub_1000202F0((uint64_t)v4, &qword_1001269A0);
  }
  v20 = v18 + 4;
  if (v20 >= v9)
    return swift_release(a1);
  v19 = *(_QWORD *)(v5 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v9)
      return swift_release(a1);
    v19 = *(_QWORD *)(v5 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

BOOL sub_10001F0F4(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = objc_msgSend(a1, "domain");
  v3 = ((uint64_t (*)(void))static String._unconditionallyBridgeFromObjectiveC(_:))();
  v5 = v4;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  if (v3 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease_n(v5, 2);
    return 1;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v9);
    return (v10 & 1) != 0 || objc_msgSend(a1, "code") == (id)-1001;
  }
}

uint64_t sub_10001F1C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10001F1F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10001F21C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001F228()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)(**(_QWORD **)v0 + 200);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001E4EC;
  return v5();
}

uint64_t sub_10001F284(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001F2E8;
  return v6(a1);
}

uint64_t sub_10001F2E8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_10001F334(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_1000202A4(&qword_100126BF8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001F3A4(a1, v7);
}

unint64_t sub_10001F3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_1000202A4(&qword_100126C00, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_10001F4E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001D138(&qword_100126BF0);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_retain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_1000202A4(&qword_100126BF8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

unint64_t sub_10001F880(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_1000202A4(&qword_100126BF8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10001FB24(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10001F334(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10001FD18();
    goto LABEL_7;
  }
  sub_10001F4E8(v17, a3 & 1);
  v23 = sub_10001F334(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10001FC80(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10001FC80(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void *sub_10001FD18()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D138(&qword_100126BF0);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_retain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10001FF48(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10001FFD0(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (a4 < 0)
    goto LABEL_25;
  if (!a4)
  {
    v11 = result;
LABEL_22:
    sub_1000202E4(result, a2, a3 & 1);
    return v11;
  }
  v5 = 0;
  v6 = a5 + 64;
  v7 = 1 << *(_BYTE *)(a5 + 32);
  v8 = *(_DWORD *)(a5 + 36);
  v9 = (unint64_t)(v7 + 63) >> 6;
  v10 = a5 + 88;
  v11 = result;
  v12 = a2;
  while ((v11 & 0x8000000000000000) == 0 && (uint64_t)v11 < v7)
  {
    if (v12 != v8)
      goto LABEL_24;
    v13 = v11 >> 6;
    v14 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
    if ((v14 & (1 << v11)) == 0)
      goto LABEL_24;
    v15 = v14 & (-2 << (v11 & 0x3F));
    if (v15)
    {
      v11 = __clz(__rbit64(v15)) | v11 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v16 = v13 + 1;
      v11 = v7;
      if (v13 + 1 < v9)
      {
        v17 = *(_QWORD *)(v6 + 8 * v16);
        if (!v17)
        {
          v16 = v13 + 2;
          v11 = v7;
          if (v13 + 2 >= v9)
            goto LABEL_5;
          v17 = *(_QWORD *)(v6 + 8 * v16);
          if (!v17)
          {
            while (v9 - 3 != v13)
            {
              v17 = *(_QWORD *)(v10 + 8 * v13++);
              if (v17)
              {
                v16 = v13 + 2;
                goto LABEL_13;
              }
            }
            v11 = v7;
            goto LABEL_5;
          }
        }
LABEL_13:
        v11 = __clz(__rbit64(v17)) + (v16 << 6);
      }
    }
LABEL_5:
    ++v5;
    v12 = v8;
    if (v5 == a4)
      goto LABEL_22;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100020120(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10002012C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v7 = result;
    v8 = *(_QWORD *)(a5 + 48);
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a2, v9);
    return swift_retain(*(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * a2));
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000201D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1001269B4);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001E4EC;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_10001ED60, 0, 0);
}

uint64_t sub_100020230()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t type metadata accessor for ReachabilityTracker()
{
  return objc_opt_self(_TtC15swtransparencyd19ReachabilityTracker);
}

uint64_t sub_10002025C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000202A4(&qword_1001269E0, a2, (uint64_t (*)(uint64_t))type metadata accessor for NetworkReachabilityMonitor, (uint64_t)&unk_1000DB62C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100020298()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t sub_1000202A4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000202E4(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_1000202F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10001D138(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002032C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100020350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100126C0C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100020638;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100126C08 + dword_100126C08))(a1, v4);
}

uint64_t sub_1000203C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = (_QWORD *)swift_task_alloc(dword_100126C1C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100020638;
  v5 = *(int **)(*(_QWORD *)v1 + 208);
  v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v4[2] = v6;
  *v6 = v4;
  v6[1] = sub_100020638;
  return v8(a1);
}

uint64_t sub_100020448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001D138(&qword_100126C28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020490(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100126C34);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100020638;
  return ((uint64_t (*)(uint64_t, unsigned __int8 *, int *))((char *)&dword_100126C30 + dword_100126C30))(a1, a2, v6);
}

uint64_t sub_100020510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for NWPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002058C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NWPath(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_100126C44);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100020638;
  v6 = *(int **)(*(_QWORD *)v3 + 144);
  v9 = (uint64_t (*)(uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v5[2] = v7;
  *v7 = v5;
  v7[1] = sub_100020638;
  return v9(v4);
}

uint64_t sub_100020644()
{
  return 0;
}

uint64_t sub_10002064C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_10002067C(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

void *sub_1000206B8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_1000206F4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000206FC()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 17, 7);
}

uint64_t sub_10002070C()
{
  uint64_t v0;
  uint64_t result;

  result = swift_allocObject(v0, 17, 7);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t sub_100020730()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_BYTE *)(v0 + 16) = 0;
  return result;
}

uint64_t sub_10002073C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_100131418);
  sub_100020804(v0, (uint64_t)qword_100131418);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0xD000000000000014, 0x80000001000E17D0);
}

uint64_t sub_1000207BC()
{
  uint64_t v0;

  if (qword_10012A9D0 != -1)
    swift_once(&qword_10012A9D0, sub_10002073C);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_100131418);
}

uint64_t sub_100020804(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10002081C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012A9D0 != -1)
    swift_once(&qword_10012A9D0, sub_10002073C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131418);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100020890(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100020898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1000208A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease(0xE000000000000000);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x6F704577656E202CLL;
  v7._object = (void *)0xEC000000203A6863;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  v10._object = (void *)0xEC000000203A6E6FLL;
  v10._countAndFlagsBits = 0x697369766572202CLL;
  String.append(_:)(v10);
  if ((a4 & 1) != 0)
  {
    v14 = 0xE100000000000000;
    v12 = 45;
  }
  else
  {
    v11 = sub_100020A14();
    v12 = BinaryInteger.description.getter(&type metadata for Int64, v11);
    v14 = v13;
  }
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease(v14);
  return 0x68636F7045646C6FLL;
}

unint64_t sub_100020A14()
{
  unint64_t result;

  result = qword_100126C50;
  if (!qword_100126C50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_100126C50);
  }
  return result;
}

uint64_t sub_100020A60()
{
  uint64_t v0;

  return sub_1000208A4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

unint64_t sub_100020A70(void *a1, unint64_t a2)
{
  id v4;
  void *v5;
  unint64_t v6;
  id v7;
  int64_t v8;

  if (objc_msgSend(a1, "hasSlh"))
  {
    v4 = objc_msgSend(a1, "slh");
    if (v4)
    {
      v5 = v4;
      v6 = sub_100020B88();
      v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "signedTypeWithObject:", v5);
      v8 = sub_100053DAC();
      if (v8 >= 1 && v8 > a2)
      {
        sub_100053E60();

        return a2;
      }

    }
  }
  return 0;
}

unint64_t sub_100020B88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100126C58;
  if (!qword_100126C58)
  {
    v1 = objc_opt_self(SignedLogHead);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100126C58);
  }
  return result;
}

id sub_100020BC4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD v29[5];
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  id v59;

  v6 = sub_10001D138(&qword_100126C60);
  __chkstk_darwin(v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for KTSWDB.SignedLogHead(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_100053CB4();
  if (!v3)
  {
    v15 = v14;
    v57 = v8;
    v58 = v10;
    v56 = v12;
    v59 = result;
    v55 = a3;
    v16 = sub_100053DAC();
    v52 = sub_100053DC8();
    v47 = sub_100053E60();
    v42 = (uint64_t)sub_100053E7C();
    v39 = v17;
    v18 = a1[3];
    v19 = a1[4];
    sub_100022F20(a1, v18);
    v20 = (*(uint64_t (**)(id, uint64_t, unint64_t, _QWORD, unint64_t, uint64_t, uint64_t))(v19 + 120))(v59, v15, v16, v52, v47, v18, v19);
    v21 = (_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 16);
    v48 = v15;
    v40 = v9;
    if (v22 == 1)
    {
      v23 = v42;
      v24 = v39;
      if ((sub_100022330(v42, v39, v20) & 1) != 0)
      {
        swift_bridgeObjectRelease(v21);
        sub_100022F44(v23, v24);
        return (id)swift_bridgeObjectRelease(v48);
      }
      v22 = v21[2];
      v15 = v48;
    }
    if (v22)
    {
      v30 = 0;
      v32 = HIDWORD(v42);
      v25 = __OFSUB__(HIDWORD(v42), (_DWORD)v42);
      v37 = v25;
      v36 = HIDWORD(v42) - (int)v42;
      v45 = BYTE6(v39);
      v38 = v39 & 0x3FFFFFFFFFFFFFFFLL;
      v34 = (int)v42;
      v33 = v42 >> 32;
      v31 = (v42 >> 32) - (int)v42;
      v29[4] = v21;
      v35 = v39 >> 62;
      v44 = v39 >> 62;
      v46 = a1;
      v41 = v16;
      v43 = v22;
      v51 = 0;
      v49 = 1;
      v27 = v21[4];
      v26 = v21[5];
      v50 = v21 + 7;
      v28 = (char *)&loc_100020FA0 + *((int *)qword_100022300 + (v26 >> 62));
      v54 = v26;
      v53 = v27;
      __asm { BR              X8 }
    }
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v21);
    return (id)sub_100022F44(v42, v39);
  }
  return result;
}

uint64_t sub_100022330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a3);
    __asm { BR              X8 }
  }
  return 0;
}

void sub_100022CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_100022D18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100022EFCLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

_QWORD *sub_100022F20(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100022F44(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100022F88(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100022FCC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001D138(&qword_100126C60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10002300C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[5];
  v3 = a1[6];
  swift_bridgeObjectRelease(a1[1]);
  sub_100022F44(v2, v3);
  return a1;
}

_QWORD *sub_10002304C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[5];
  v3 = a1[6];
  swift_bridgeObjectRetain(a1[1]);
  sub_100022F88(v2, v3);
  return a1;
}

unint64_t sub_10002308C()
{
  unint64_t result;

  result = qword_100126C68;
  if (!qword_100126C68)
  {
    result = swift_getWitnessTable(&unk_1000DC014, &type metadata for MilestoneConsistencyError);
    atomic_store(result, (unint64_t *)&qword_100126C68);
  }
  return result;
}

uint64_t sub_1000230D0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1000231A0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100023CCC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100023CCC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100023CAC(v12);
  return v7;
}

uint64_t sub_1000231A0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100023358(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100023358(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000233EC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000235C4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000235C4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000233EC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100023560(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100023560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10001D138((uint64_t *)&unk_100127740);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000235C4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001D138((uint64_t *)&unk_100127740);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_100023710()
{
  unint64_t result;

  result = qword_100126C70;
  if (!qword_100126C70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KTSWDB.STHKey, &type metadata for KTSWDB.STHKey);
    atomic_store(result, (unint64_t *)&qword_100126C70);
  }
  return result;
}

uint64_t sub_100023754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KTSWDB.SignedLogHead(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100023798(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KTSWDB.SignedLogHead(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000237D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_100022CB8((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1000238A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_100022CB8(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_10002395C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1000239A8()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1000239DC + dword_100023BB4[v0 >> 62]))();
}

uint64_t sub_1000239EC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t type metadata accessor for AssociatedObjectKey()
{
  return objc_opt_self(_TtC15swtransparencyd19AssociatedObjectKey);
}

ValueMetadata *type metadata accessor for VerifiableTypeHelpers()
{
  return &type metadata for VerifiableTypeHelpers;
}

uint64_t initializeBufferWithCopyOfBuffer for VerifiableTypeHelpers.LogEntryEpochStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithCopy for VerifiableTypeHelpers.LogEntryEpochStatus(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for VerifiableTypeHelpers.LogEntryEpochStatus(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VerifiableTypeHelpers.LogEntryEpochStatus(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VerifiableTypeHelpers.LogEntryEpochStatus()
{
  return &type metadata for VerifiableTypeHelpers.LogEntryEpochStatus;
}

uint64_t sub_100023CAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100023CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *sub_100023D0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100023D54(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    v16 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v11);
    swift_bridgeObjectRetain(v15);
    v17 = sub_10002559C(v16);
    if ((v18 & 1) == 0)
    {
      swift_bridgeObjectRelease(v15);
      return 0;
    }
    v19 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v17);
    v20 = swift_bridgeObjectRetain(v19);
    v21 = sub_100023D54(v20, v15);
    swift_bridgeObjectRelease(v15);
    result = swift_bridgeObjectRelease(v19);
    if ((v21 & 1) == 0)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100023EFC(char a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16) && (v3 = sub_10002559C(a1), (v4 & 1) != 0))
    return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3));
  else
    return 0;
}

uint64_t sub_100023F3C(uint64_t *a1, uint64_t *a2)
{
  return sub_100023D54(*a1, *a2);
}

uint64_t TransparencyExtensionType.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*TransparencyExtensionType.rawValue.modify())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100023F60(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100023F68(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_100023F90())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100023FA0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 112);
}

unint64_t sub_100023FA8()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 128, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 128);
  sub_100025604(v1);
  return v1;
}

unint64_t sub_100023FEC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 128, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = a1;
  return sub_100025614(v3);
}

uint64_t sub_100024030@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_10001D138(&qword_100126D18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_100024070@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100025624(v3, a1);
}

uint64_t sub_1000240C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation;
  swift_beginAccess(v3, v5, 33, 0);
  sub_10002566C(a1, v3);
  return swift_endAccess(v5);
}

void *sub_100024118(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_100024160@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000241A4(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v3 = v2;
  v6 = sub_10001D138(&qword_100126D20);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  swift_defaultActor_initialize(v9);
  v10 = v9 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation;
  v11 = sub_10001D138(&qword_100126D18);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v13 = v12(v10, 1, 1, v11);
  UUID.init()(v13);
  *(_BYTE *)(v9 + 112) = a1;
  *(_QWORD *)(v9 + 120) = a2;
  *(_QWORD *)(v9 + 128) = 0;
  v12((uint64_t)v8, 1, 1, v11);
  v14 = v9 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation;
  swift_beginAccess(v9 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation, v17, 33, 0);
  sub_10002566C((uint64_t)v8, v14);
  swift_endAccess(v17);
  return v9;
}

uint64_t sub_1000242D0(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t (*v10)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];

  v5 = sub_10001D138(&qword_100126D20);
  __chkstk_darwin(v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_defaultActor_initialize(v2);
  v8 = (_BYTE *)(v2 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation);
  v9 = sub_10001D138(&qword_100126D18);
  v10 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v11 = v10(v8, 1, 1, v9);
  UUID.init()(v11);
  *(_BYTE *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  *(_QWORD *)(v2 + 128) = 0;
  v10(v7, 1, 1, v9);
  v12 = v2 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation;
  swift_beginAccess(v2 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation, v15, 33, 0);
  sub_10002566C((uint64_t)v7, v12);
  swift_endAccess(v15);
  return v2;
}

BOOL sub_1000243E8()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  if (v1 < 3)
    return (v1 & 7) == 2;
  sub_100025614(v1);
  return 1;
}

uint64_t sub_100024428()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[3] = v0;
  v2 = sub_10001D138(&qword_100126D18);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100126D20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[7] = swift_task_alloc(v4);
  v1[8] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000244C0, v0, 0);
}

uint64_t sub_1000244C0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 152))();
  if (v1 >= 2)
  {
    if (v1 != 2)
      sub_100025614(v1);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    (*(void (**)(void))(**(_QWORD **)(v0 + 24) + 176))();
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
    v6 = *(_QWORD *)(v0 + 64);
    if (v5)
    {
      sub_1000202F0(*(_QWORD *)(v0 + 64), &qword_100126D20);
    }
    else
    {
      v8 = *(_QWORD *)(v0 + 40);
      v7 = *(_QWORD *)(v0 + 48);
      v9 = *(_QWORD *)(v0 + 32);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 16))(v7, *(_QWORD *)(v0 + 64), v9);
      sub_1000202F0(v6, &qword_100126D20);
      v10 = type metadata accessor for SWTStateMachineError(0);
      v11 = sub_100025DB4((unint64_t *)&qword_1001271A0, type metadata accessor for SWTStateMachineError, (uint64_t)&unk_1000DE57C);
      v12 = swift_allocError(v10, v11, 0, 0);
      swift_storeEnumTagMultiPayload(v13, v10, 6);
      *(_QWORD *)(v0 + 16) = v12;
      CheckedContinuation.resume(throwing:)(v0 + 16, v9);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    v14 = *(_QWORD *)(v0 + 56);
    v15 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 40) + 56))(v14, 1, 1, *(_QWORD *)(v0 + 32));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 184))(v14);
  }
  v16 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024658(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_10001D138(&qword_100127220);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000246B8, v2, 0);
}

uint64_t sub_1000246B8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 32) + 152))();
  if (v1 >= 2)
  {
    if (v1 != 2)
      swift_willThrow();
    swift_task_dealloc(*(_QWORD *)(v0 + 40));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 32);
    v2 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 16);
    v4 = *(_QWORD *)(v0 + 24);
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 1, 1, v6);
    v7 = sub_100025DB4(&qword_100126D40, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB7F8);
    v8 = (_QWORD *)swift_allocObject(&unk_1001070E0, 56, 7);
    v8[2] = v3;
    v8[3] = v7;
    v8[4] = v5;
    v8[5] = v4;
    v8[6] = v3;
    swift_retain_n(v3, 2);
    *(_QWORD *)(v0 + 48) = sub_10001D3C0(v2, (uint64_t)&unk_100126D48, (uint64_t)v8);
    v9 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 56) = v9;
    *v9 = v0;
    v9[1] = sub_100024848;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, v3, v7, 0xD000000000000010, 0x80000001000E17F0, sub_10002577C, *(_QWORD *)(v0 + 32), (char *)&type metadata for () + 8);
  }
}

uint64_t sub_100024848()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100024910;
  else
    v4 = sub_1000248AC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_1000248AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  Task.cancel()();
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024910()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002494C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v8 = type metadata accessor for ContinuousClock(0);
  v6[5] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[6] = v9;
  v6[7] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000249B4, a6, 0);
}

uint64_t sub_1000249B4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100126EB0 + dword_100126EB0);
  v1 = (_QWORD *)swift_task_alloc(unk_100126EB4);
  v0[8] = v1;
  *v1 = v0;
  v1[1] = sub_100024A2C;
  return v3(v0[2], v0[3], 0, 0, 1);
}

uint64_t sub_100024A2C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 64));
  v4 = v2[6];
  v3 = v2[7];
  v7 = v2 + 4;
  v5 = v2[4];
  v6 = v7[1];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
    v8 = sub_100025F40;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
    v8 = sub_100024ACC;
  }
  return swift_task_switch(v8, v5, 0);
}

uint64_t sub_100024ACC()
{
  uint64_t v0;
  int *v2;
  _QWORD *v3;
  uint64_t (*v4)(void);

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = *(int **)(**(_QWORD **)(v0 + 32) + 216);
    v4 = (uint64_t (*)(void))((char *)v2 + *v2);
    v3 = (_QWORD *)swift_task_alloc(v2[1]);
    *(_QWORD *)(v0 + 72) = v3;
    *v3 = v0;
    v3[1] = sub_100024B50;
    return v4();
  }
}

uint64_t sub_100024B50()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100024B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_10001D138(&qword_100126D20);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001D138(&qword_100126D18);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  return (*(uint64_t (**)(char *))(*(_QWORD *)a2 + 184))(v6);
}

uint64_t sub_100024C58(char a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;

  v2 = v1;
  v4 = sub_10001D138(&qword_100126D18);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v45 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001D138(&qword_100126D20);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v45 - v14;
  v16 = type metadata accessor for SWTStateMachineError(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v17);
  if (!v20)
  {
    v22 = v1[112];
    v51 = a1;
    v50 = v22;
    v23 = sub_100025804();
    dispatch thunk of RawRepresentable.rawValue.getter(&v48, &type metadata for SMState, v23);
    dispatch thunk of RawRepresentable.rawValue.getter(&v46, &type metadata for SMState, v23);
    v24 = v49;
    v25 = v47;
    if (v48 == v46 && v49 == v47)
    {
      swift_bridgeObjectRelease_n(v49, 2);
    }
    else
    {
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, v46, v47, 0);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v25);
      v21 = 0;
      if ((v35 & 1) == 0)
        return v21;
    }
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 160))(1);
    goto LABEL_16;
  }
  if (v20 == 1)
  {
    v26 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 128))();
    if (!*(_QWORD *)(v26 + 16) || (v27 = sub_10002559C(a1), (v28 & 1) == 0))
    {
      swift_bridgeObjectRelease(v26);
      *v19 = a1;
      swift_storeEnumTagMultiPayload(v19, v16, 1);
      v31 = sub_100025DB4((unint64_t *)&qword_1001271A0, type metadata accessor for SWTStateMachineError, (uint64_t)&unk_1000DE57C);
      v32 = swift_allocError(v16, v31, 0, 0);
      sub_100025784((uint64_t)v19, v33);
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 160))(v32);
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 176))(v34);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4))
      {
        sub_1000202F0((uint64_t)v15, &qword_100126D20);
      }
      else
      {
        v39 = v45;
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v45, v15, v4);
        sub_1000202F0((uint64_t)v15, &qword_100126D20);
        v40 = swift_allocError(v16, v31, 0, 0);
        sub_100025784((uint64_t)v19, v41);
        v48 = v40;
        CheckedContinuation.resume(throwing:)(&v48, v4);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v39, v4);
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
      (*(void (**)(char *))(*(_QWORD *)v2 + 184))(v13);
      sub_1000257C8((uint64_t)v19);
      return 0;
    }
    v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v26);
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v29);
LABEL_16:
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v30);
    v37 = *(_QWORD *)(v36 + 16);
    swift_bridgeObjectRelease(v36);
    if (!v37)
    {
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 160))(2);
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 176))(v38);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4))
      {
        sub_1000202F0((uint64_t)v10, &qword_100126D20);
      }
      else
      {
        v42 = v45;
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v45, v10, v4);
        v43 = sub_1000202F0((uint64_t)v10, &qword_100126D20);
        CheckedContinuation.resume(returning:)(v43, v4);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v42, v4);
      }
      v21 = 1;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
      (*(void (**)(char *))(*(_QWORD *)v2 + 184))(v13);
      return v21;
    }
    return 0;
  }
  if (v20 != 2)
    sub_100025614(v20);
  return 1;
}

uint64_t sub_1000250E0(uint64_t a1, uint64_t a2)
{
  return static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_id, a2 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_id);
}

uint64_t sub_1000250F4()
{
  return UUID.hash(into:)();
}

uint64_t sub_10002511C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  sub_100025614(*(_QWORD *)(v0 + 128));
  sub_1000202F0(v0 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation, &qword_100126D20);
  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100025190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  sub_100025614(*(_QWORD *)(v0 + 128));
  sub_1000202F0(v0 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_continuation, &qword_100126D20);
  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

Swift::Int sub_100025204()
{
  uint64_t v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  (*(void (**)(_QWORD *))(*(_QWORD *)v0 + 240))(v2);
  return Hasher._finalize()();
}

uint64_t sub_100025248()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 248))();
}

uint64_t sub_100025270()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 240))();
}

Swift::Int sub_100025298(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  (*(void (**)(_QWORD *))(*(_QWORD *)v2 + 240))(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000252DC(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_id, *a2 + OBJC_IVAR____TtC15swtransparencyd17TransitionWatcher_id);
}

uint64_t sub_1000252F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_10002539C, 0, 0);
}

uint64_t sub_10002539C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100025DB4(&qword_100126EB8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100025DB4(&qword_100126EC0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_1000254B4;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_1000254B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_100025560, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100025560()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10002559C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = sub_100025DF4();
  v5 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, &type metadata for SMState, v4);
  return sub_100025E38(a1, v5);
}

unint64_t sub_100025604(unint64_t result)
{
  if (result >= 3)
    return swift_errorRetain();
  return result;
}

unint64_t sub_100025614(unint64_t result)
{
  if (result >= 3)
    return swift_errorRelease();
  return result;
}

uint64_t sub_100025624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001D138(&qword_100126D20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002566C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001D138(&qword_100126D20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TransitionWatcher(uint64_t a1)
{
  uint64_t result;

  result = qword_10012AC60;
  if (!qword_10012AC60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TransitionWatcher);
  return result;
}

uint64_t sub_1000256F0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002571C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc(dword_100126D3C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10001E4EC;
  return sub_10002494C((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_10002577C(uint64_t a1)
{
  uint64_t v1;

  return sub_100024B9C(a1, v1);
}

uint64_t sub_100025784(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SWTStateMachineError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000257C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SWTStateMachineError(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100025804()
{
  unint64_t result;

  result = qword_100126D50;
  if (!qword_100126D50)
  {
    result = swift_getWitnessTable(&unk_1000DE84C, &type metadata for SMState);
    atomic_store(result, (unint64_t *)&qword_100126D50);
  }
  return result;
}

uint64_t sub_100025848()
{
  return sub_100025DB4(&qword_100126D58, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB860);
}

ValueMetadata *type metadata accessor for TransitionPathStep()
{
  return &type metadata for TransitionPathStep;
}

uint64_t initializeBufferWithCopyOfBuffer for TransitionPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for TransitionPath(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for TransitionPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for TransitionPath(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for TransitionPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitionPath(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransitionPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransitionPath()
{
  return &type metadata for TransitionPath;
}

uint64_t sub_1000259D8()
{
  return type metadata accessor for TransitionWatcher(0);
}

void sub_1000259E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[1] = &unk_1000DB910;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[3] = &unk_1000DB928;
  sub_100025A94(319);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    }
  }
}

void sub_100025A94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100126D88)
  {
    v2 = sub_10001D1C4(&qword_100126D18);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100126D88);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for TransitionWatcher.WatcherState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for TransitionWatcher.WatcherState(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease();
  return result;
}

unint64_t *assignWithCopy for TransitionWatcher.WatcherState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v3 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v3;
  }
  else if (v3 < 0xFFFFFFFF)
  {
    ((void (*)(void))swift_errorRelease)();
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v4 = *a1;
    *a1 = v3;
    swift_errorRelease(v4);
  }
  return a1;
}

_QWORD *initializeWithTake for TransitionWatcher.WatcherState(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for TransitionWatcher.WatcherState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitionWatcher.WatcherState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TransitionWatcher.WatcherState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_100025CD8(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100025CF0(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TransitionWatcher.WatcherState()
{
  return &type metadata for TransitionWatcher.WatcherState;
}

uint64_t sub_100025D20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100025D44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100126C0C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001E4EC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100126C08 + dword_100126C08))(a1, v4);
}

uint64_t sub_100025DB4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100025DF4()
{
  unint64_t result;

  result = qword_100126EC8;
  if (!qword_100126EC8)
  {
    result = swift_getWitnessTable(&unk_1000DE80C, &type metadata for SMState);
    atomic_store(result, (unint64_t *)&qword_100126EC8);
  }
  return result;
}

unint64_t sub_100025E38(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;
  char v9;

  v9 = a1;
  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = sub_100025EFC();
    do
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v8, &v9, &type metadata for SMState, v6) & 1) != 0)
        break;
      v4 = (v4 + 1) & v5;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100025EFC()
{
  unint64_t result;

  result = qword_100126ED0;
  if (!qword_100126ED0)
  {
    result = swift_getWitnessTable(&unk_1000DE7E4, &type metadata for SMState);
    atomic_store(result, (unint64_t *)&qword_100126ED0);
  }
  return result;
}

uint64_t sub_100025F4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0x7972726163;
  switch(v1)
  {
    case 0:
      result = 7759204;
      break;
    case 1:
      result = 0x6172656D65687065;
      break;
    case 2:
      result = 1718773104;
      break;
    case 3:
      result = 24945;
      break;
    case 4:
      result = 0x676E6967617473;
      break;
    case 5:
      return result;
    case 6:
      result = 0x69746375646F7270;
      break;
    case 7:
      result = 0x616D697250326171;
      break;
    case 8:
      result = 0x7265746E49326171;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

BOOL sub_100026054(uint64_t a1)
{
  return a1 == 0;
}

void *sub_100026060()
{
  return &unk_1000DB965;
}

uint64_t sub_10002606C()
{
  return 1;
}

_UNKNOWN **static SerializationVersion.allCases.getter()
{
  return &off_1001072A0;
}

void sub_100026080(_QWORD *a1@<X8>)
{
  *a1 = &off_1001072C8;
}

uint64_t SerializationVersion.description.getter(char a1)
{
  Swift::String v2;
  void *object;
  Swift::String v4;

  if (a1 == 1)
    return 3233326;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD00000000000001FLL;
}

uint64_t sub_100026154()
{
  char *v0;

  return SerializationVersion.description.getter(*v0);
}

unint64_t sub_100026160()
{
  unint64_t result;

  result = qword_100126ED8;
  if (!qword_100126ED8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_100126ED8);
  }
  return result;
}

unsigned __int8 *sub_1000261A8@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000261B8(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void *sub_1000261C4()
{
  return &unk_1000DB966;
}

void *sub_1000261D0()
{
  return &unk_1000DB967;
}

uint64_t variable initialization expression of KTSWDB.schemaVersion()
{
  return 2;
}

void *sub_1000261E4()
{
  return &unk_1000DB968;
}

uint64_t sub_1000261F0()
{
  return 3;
}

void *sub_1000261F8()
{
  return &unk_1000DB969;
}

uint64_t sub_100026204()
{
  return 4;
}

void *sub_10002620C()
{
  return &unk_1000DB96A;
}

uint64_t sub_100026218()
{
  return 5;
}

_UNKNOWN **static ATLeafType.allCases.getter()
{
  return &off_1001072F0;
}

void sub_10002622C(_QWORD *a1@<X8>)
{
  *a1 = &off_100107318;
}

void sub_10002623C()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL sub_100026264(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t ATLeafType.description.getter(unsigned __int8 a1)
{
  int v1;
  unint64_t result;
  Swift::String v3;
  void *object;
  Swift::String v5;

  v1 = a1 - 1;
  result = 0x455341454C45522ELL;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x4C45444F4D2ELL;
      break;
    case 2:
    case 3:
      result = 0x444E554259454B2ELL;
      break;
    case 4:
      result = 0xD000000000000010;
      break;
    default:
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      result = 0xD000000000000015;
      break;
  }
  return result;
}

unint64_t sub_1000263C0()
{
  unsigned __int8 *v0;

  return ATLeafType.description.getter(*v0);
}

Swift::Int sub_1000263C8()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10002640C(uint64_t a1)
{
  Swift::UInt8 *v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t TransparencyExtensionType.description.getter()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0xD000000000000024;
}

unint64_t sub_1000264EC()
{
  return TransparencyExtensionType.description.getter();
}

uint64_t sub_1000264F4(char a1)
{
  unint64_t v1;
  char v3;

  v3 = a1;
  v1 = sub_100026160();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  return sub_10008B1EC((uint64_t)&v3, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v1);
}

uint64_t sub_100026550()
{
  unint64_t v0;
  int v1;
  unsigned __int8 v3;
  unsigned __int8 v4;

  v0 = sub_100026160();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v0);
  sub_10008BD44((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v0);
  v1 = v3;
  if (v4)
    v1 = 0;
  return v1 | (v4 << 8);
}

uint64_t sub_1000265BC(uint64_t a1, Swift::UInt8 a2)
{
  unint64_t v4;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(a2);
  v4 = sub_100026638();
  return dispatch thunk of Hashable.hash(into:)(a1, &type metadata for TransparencyByteBuffer, v4);
}

unint64_t sub_100026638()
{
  unint64_t result;

  result = qword_100126EE0;
  if (!qword_100126EE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TransparencyByteBuffer, &type metadata for TransparencyByteBuffer);
    atomic_store(result, (unint64_t *)&qword_100126EE0);
  }
  return result;
}

uint64_t sub_10002667C(char a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, unint64_t a7)
{
  char v11;
  char v12;

  if (a1 != a5)
    return 0;
  sub_100022F88(a2, a3);
  sub_100022F88(a6, a7);
  static TransparencyByteBuffer.== infix(_:_:)(a2, a3);
  v12 = v11;
  sub_100022F44(a6, a7);
  sub_100022F44(a2, a3);
  return v12 & 1;
}

Swift::Int sub_100026724(Swift::UInt8 a1)
{
  unint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(a1);
  v2 = sub_100026638();
  dispatch thunk of Hashable.hash(into:)(v4, &type metadata for TransparencyByteBuffer, v2);
  return Hasher._finalize()();
}

Swift::Int sub_1000267B4()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  v2 = sub_100026638();
  dispatch thunk of Hashable.hash(into:)(v4, &type metadata for TransparencyByteBuffer, v2);
  return Hasher._finalize()();
}

uint64_t sub_100026840(uint64_t a1)
{
  Swift::UInt8 *v1;
  Swift::UInt8 v3;
  unint64_t v4;

  v3 = *v1;
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v3);
  v4 = sub_100026638();
  return dispatch thunk of Hashable.hash(into:)(a1, &type metadata for TransparencyByteBuffer, v4);
}

Swift::Int sub_1000268B8(uint64_t a1)
{
  Swift::UInt8 *v1;
  Swift::UInt8 v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v2);
  v3 = sub_100026638();
  dispatch thunk of Hashable.hash(into:)(v5, &type metadata for TransparencyByteBuffer, v3);
  return Hasher._finalize()();
}

uint64_t sub_100026940(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  if (*a1 != *a2)
    return 0;
  v2 = *((_QWORD *)a2 + 2);
  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a1 + 1);
  sub_100022F88(v5, v4);
  sub_100022F88(v3, v2);
  static TransparencyByteBuffer.== infix(_:_:)(v5, v4);
  v7 = v6;
  sub_100022F44(v3, v2);
  sub_100022F44(v5, v4);
  return v7 & 1;
}

uint64_t sub_1000269E4(char a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  char v6;

  v6 = a1;
  v1 = sub_100026160();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  v2 = sub_10008B1EC((uint64_t)&v6, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v1);
  sub_100026B0C();
  sub_10008C88C();
  v4 = __OFADD__(v2, v3);
  result = v2 + v3;
  if (v4)
    __break(1u);
  return result;
}

uint64_t sub_100026AA0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  sub_100022F88(a2, a3);
  sub_10008C0E0(a2, a3);
  v6 = v5;
  sub_100022F44(a2, a3);
  return v6;
}

uint64_t sub_100026B00(uint64_t a1)
{
  uint64_t v1;

  return sub_100026AA0(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t sub_100026B0C()
{
  unint64_t result;

  result = qword_100126EE8;
  if (!qword_100126EE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_100126EE8);
  }
  return result;
}

uint64_t sub_100026B50()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = sub_100026160();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  sub_10008BD44((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v1);
  if ((v4 & 0x100) != 0)
    return 0;
  __chkstk_darwin(v2);
  sub_100026B0C();
  result = sub_10008CCD4((uint64_t)&type metadata for TransparencyExtension, (uint64_t)&v4);
  if (!v0)
    return v4;
  return result;
}

void sub_100026C40(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = sub_10008B198(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10008C538(v5);
  if (v7 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)a3 = a2;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 24) = v8;
  }
}

void sub_100026C98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100026C40(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_100026CC0()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_100026CC8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t sub_100026CD0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*sub_100026CD8())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100026CE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_100022F88(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t sub_100026D18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100022F44(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t sub_100026D4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_100022F88(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t sub_100026D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100022F44(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*sub_100026DB0())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100026DC0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_100026DC8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*sub_100026DD0())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100026DE0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t sub_100026DE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*sub_100026E10())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t variable initialization expression of KTSwiftDB.db()
{
  return 0;
}

void *sub_100026E28()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 56);
  v2 = v1;
  return v1;
}

void sub_100026E4C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
}

uint64_t (*sub_100026E74())()
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100026E84@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_BYTE *)a9 = result;
  *(_BYTE *)(a9 + 1) = a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_QWORD *)(a9 + 24) = a5;
  *(_QWORD *)(a9 + 32) = a6;
  *(_QWORD *)(a9 + 40) = a7;
  *(_QWORD *)(a9 + 48) = a8;
  *(_QWORD *)(a9 + 56) = 0;
  return result;
}

uint64_t sub_100026EA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v3 = sub_100026160();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v3);
  sub_10008BD44((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v3);
  if ((v30 & 0x100) != 0)
    goto LABEL_3;
  v4 = v30;
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v3);
  sub_10008BD44((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v3);
  v9 = v30;
  result = sub_10008CCD4((uint64_t)&type metadata for TransparencyByteBuffer, (uint64_t)&v30);
  if (!v1)
  {
    v10 = v31;
    if (v31 >> 60 == 15)
    {
LABEL_3:
      v5 = sub_100027190();
      v6 = swift_allocError(&type metadata for TransparencyTLSError, v5, 0, 0);
      *v7 = 1;
      return swift_willThrow(v6);
    }
    v29 = v9;
    v11 = v30;
    v12 = TransparencyByteBuffer.readableBytesView.getter(v30, v31, v32);
    v33 = v13;
    sub_100027420(v11, v10);
    sub_10008CCD4((uint64_t)&type metadata for TransparencyByteBuffer, (uint64_t)&v30);
    v28 = v12;
    v14 = v31;
    if (v31 >> 60 != 15)
    {
      v15 = v30;
      v16 = TransparencyByteBuffer.readableBytesView.getter(v30, v31, v32);
      v18 = v17;
      sub_100027420(v15, v14);
      v19 = sub_100027434();
      sub_10008BD44((uint64_t)&type metadata for UInt64, (uint64_t)&type metadata for UInt64, v19);
      if (v31 != 1)
      {
        v22 = v18;
        v23 = v30;
        v24 = sub_10001D138(&qword_100126F00);
        sub_100026B0C();
        result = sub_10008CCD4(v24, (uint64_t)&v30);
        v25 = v23;
        v26 = v30;
        v27 = v33;
        if (v30)
        {
          *(_BYTE *)a1 = v4;
          *(_BYTE *)(a1 + 1) = v29;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v27;
          *(_QWORD *)(a1 + 24) = v16;
          *(_QWORD *)(a1 + 32) = v22;
          *(_QWORD *)(a1 + 40) = v25;
          *(_QWORD *)(a1 + 48) = v26;
          *(_QWORD *)(a1 + 56) = 0;
          return result;
        }
        sub_100022F44(v16, v22);
        v20 = v28;
        v21 = v27;
        goto LABEL_11;
      }
      sub_100022F44(v16, v18);
    }
    v20 = v28;
    v21 = v33;
LABEL_11:
    sub_100022F44(v20, v21);
    goto LABEL_3;
  }
  return result;
}

unint64_t sub_100027190()
{
  unint64_t result;

  result = qword_100126EF0;
  if (!qword_100126EF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TransparencyTLSError, &type metadata for TransparencyTLSError);
    atomic_store(result, (unint64_t *)&qword_100126EF0);
  }
  return result;
}

char *sub_1000271D4()
{
  uint64_t v0;
  unint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = sub_100026160();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  sub_10008BD44((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v1);
  if ((v13 & 0x100) != 0)
    return (char *)_swiftEmptyArrayStorage;
  v2 = (char *)_swiftEmptyArrayStorage;
  v3 = sub_100026B0C();
  v17 = v3;
  v12 = v1;
  while (1)
  {
    __chkstk_darwin(v3);
    sub_10008CCD4((uint64_t)&type metadata for TransparencyExtension, (uint64_t)&v13);
    if (v0)
      break;
    v4 = v15;
    if (v15 >> 60 != 15)
    {
      v6 = v13;
      v5 = v14;
      v7 = v16;
      sub_100022F88(v14, v15);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
        v2 = sub_100027B90(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
      v9 = *((_QWORD *)v2 + 2);
      v8 = *((_QWORD *)v2 + 3);
      if (v9 >= v8 >> 1)
        v2 = sub_100027B90((char *)(v8 > 1), v9 + 1, 1, v2);
      *((_QWORD *)v2 + 2) = v9 + 1;
      v10 = &v2[32 * v9];
      v10[32] = v6;
      *((_QWORD *)v10 + 5) = v5;
      *((_QWORD *)v10 + 6) = v4;
      *((_QWORD *)v10 + 7) = v7;
      sub_10002946C(v6, v5, v4);
      ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v12);
      sub_10008BD44((uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v12);
      if ((v13 & 0x100) == 0)
        continue;
    }
    return v2;
  }
  swift_bridgeObjectRelease(v2);
  return v2;
}

void sub_1000273C8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = sub_10008B198(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10008C538(v3);
  if (v5 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
  }
}

uint64_t sub_100027420(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100022F44(result, a2);
  return result;
}

unint64_t sub_100027434()
{
  unint64_t result;

  result = qword_100126EF8;
  if (!qword_100126EF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100126EF8);
  }
  return result;
}

char *sub_100027478@<X0>(char **a1@<X8>)
{
  uint64_t v1;
  char *result;

  result = sub_1000271D4();
  if (!v1)
    *a1 = result;
  return result;
}

void sub_1000274A0()
{
  char *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v16 = *v0;
  v1 = sub_100026160();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  v2 = sub_10008B1EC((uint64_t)&v16, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v1);
  v15 = v0[1];
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v1);
  v3 = sub_10008B1EC((uint64_t)&v15, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v1);
  v4 = v2 + v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_8;
  }
  __chkstk_darwin(v3);
  sub_10008C88C();
  v6 = __OFADD__(v4, v5);
  v7 = v4 + v5;
  if (v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  __chkstk_darwin(v5);
  sub_10008C88C();
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = *((_QWORD *)v0 + 5);
  v10 = sub_100027434();
  ATLogProofs.VerificationResult.result.getter(&type metadata for UInt64, v10);
  v11 = sub_10008B1EC((uint64_t)&v14, (uint64_t)&type metadata for UInt64, (uint64_t)&type metadata for UInt64, v10);
  v12 = v9 + v11;
  if (__OFADD__(v9, v11))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  __chkstk_darwin(v11);
  sub_100026B0C();
  sub_10008C88C();
  if (__OFADD__(v12, v13))
LABEL_11:
    __break(1u);
}

uint64_t sub_100027684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  sub_100022F88(v2, v3);
  v4 = TransparencyByteBuffer.init(data:)(v2, v3);
  v6 = v5;
  sub_10008C0E0(v4, v5);
  v8 = v7;
  sub_100022F44(v4, v6);
  return v8;
}

uint64_t sub_1000276EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  sub_100022F88(v2, v3);
  v4 = TransparencyByteBuffer.init(data:)(v2, v3);
  v6 = v5;
  sub_10008C0E0(v4, v5);
  v8 = v7;
  sub_100022F44(v4, v6);
  return v8;
}

uint64_t sub_100027754(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t result;
  char *v12;
  char *v13;
  char *v14;

  v13 = *(char **)(a2 + 48);
  v14 = v13;
  swift_bridgeObjectRetain_n();
  sub_100027C90(&v13);
  sub_100029444(&v14);
  v2 = v13;
  v3 = *((_QWORD *)v13 + 2);
  if (v3)
  {
    v4 = sub_100026160();
    swift_retain(v2);
    v5 = 0;
    v12 = v2;
    v6 = v2 + 56;
    while (1)
    {
      LOBYTE(v13) = *(v6 - 24);
      ATLogProofs.VerificationResult.result.getter(&type metadata for UInt8, v4);
      v7 = sub_10008B1EC((uint64_t)&v13, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for UInt8, v4);
      __chkstk_darwin(v7);
      sub_100026B0C();
      sub_10008C88C();
      v9 = v7 + v8;
      if (__OFADD__(v7, v8))
        break;
      v10 = __OFADD__(v5, v9);
      v5 += v9;
      if (v10)
        goto LABEL_10;
      v6 += 32;
      if (!--v3)
      {
        v2 = v12;
        swift_release(v12);
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
    result = swift_release(v13);
    __break(1u);
  }
  else
  {
    v5 = 0;
LABEL_8:
    swift_release(v2);
    return v5;
  }
  return result;
}

uint64_t sub_1000278D0(uint64_t a1)
{
  uint64_t v1;

  return sub_100027754(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000278DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a1 + 56;
    for (i = a2 + 56; *(unsigned __int8 *)(v3 - 24) == *(unsigned __int8 *)(i - 24); i += 32)
    {
      v5 = *(_QWORD *)(v3 - 8);
      v6 = *(_QWORD *)(v3 - 16);
      v7 = *(_QWORD *)(i - 8);
      v8 = *(_QWORD *)(i - 16);
      sub_100022F88(v6, v5);
      sub_100022F88(v8, v7);
      static TransparencyByteBuffer.== infix(_:_:)(v6, v5);
      v10 = v9;
      sub_100022F44(v8, v7);
      sub_100022F44(v6, v5);
      if ((v10 & 1) == 0)
        break;
      v3 += 32;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

void sub_1000279C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  sub_100022F88(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_100022F44(v4, v5);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  sub_100022F88(v6, v7);
  Data.hash(into:)(a1, v6, v7);
  sub_100022F44(v6, v7);
  Hasher._combine(_:)(*(_QWORD *)(v2 + 40));
  v8 = *(_QWORD *)(v2 + 48);
  swift_bridgeObjectRetain(v8);
  sub_1000289F0(a1, v8);
  swift_bridgeObjectRelease(v8);
  v9 = *(void **)(v2 + 56);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    v10 = v9;
    NSObject.hash(into:)(a1);

  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_100027AD0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000279C8((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100027B10(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000279C8((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_100027B48(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[4];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_100028AB8((unsigned __int8 *)v7, (unsigned __int8 *)v8) & 1;
}

char *sub_100027B90(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001D138(&qword_100126F58);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_100027C90(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100028AA4((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_100027CF8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100027CF8(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  _OWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  Swift::Int v30;
  unsigned __int8 *v31;
  unsigned int v32;
  Swift::Int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  Swift::Int *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  Swift::Int v109;
  uint64_t v110;
  char *v111;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v89 = 0;
      v90 = *a1;
      v91 = 1;
      while (1)
      {
        v92 = *(unsigned __int8 *)(v90 + 32 * v91);
        v93 = v89;
        do
        {
          v94 = v90 + v93;
          if (v92 >= *(unsigned __int8 *)(v90 + v93))
            break;
          if (!v90)
            goto LABEL_143;
          v95 = *(_QWORD *)(v94 + 56);
          v96 = *(_OWORD *)(v94 + 40);
          v97 = *(_OWORD *)(v94 + 16);
          *(_OWORD *)(v90 + v93 + 32) = *(_OWORD *)v94;
          *(_OWORD *)(v90 + v93 + 48) = v97;
          *(_BYTE *)v94 = v92;
          *(_OWORD *)(v94 + 8) = v96;
          *(_QWORD *)(v94 + 24) = v95;
          v93 -= 32;
        }
        while (v93 != -32);
        ++v91;
        v89 += 32;
        if (v91 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_138;
  v6 = result;
  v105 = a1;
  if (v3 <= 1)
  {
    v8 = &_swiftEmptyArrayStorage;
    v111 = (char *)&_swiftEmptyArrayStorage + 32;
    if (v3 != 1)
    {
      v12 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
      v11 = (char *)&_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v107 = &_swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    result = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for TransparencyExtension);
    *(_QWORD *)(result + 16) = v7;
    v107 = (void *)result;
    v111 = (char *)(result + 32);
  }
  v9 = 0;
  v10 = *a1;
  v106 = *a1 + 64;
  v104 = *a1 - 32;
  v11 = (char *)&_swiftEmptyArrayStorage;
  v108 = v6;
  v109 = v3;
  v110 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(unsigned __int8 *)(v10 + 32 * v9);
      v15 = 32 * v13;
      v16 = *(unsigned __int8 *)(v10 + 32 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v17 = (unsigned __int8 *)(v106 + 32 * v13);
        v18 = v14;
        while (1)
        {
          v20 = *v17;
          v17 += 32;
          v19 = v20;
          if (v14 < v16 == v20 >= v18)
            break;
          ++v9;
          v18 = v19;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v16)
      {
        if (v9 < v13)
          goto LABEL_140;
        if (v13 < v9)
        {
          v21 = 32 * v9;
          v22 = v9;
          v23 = v13;
          do
          {
            if (v23 != --v22)
            {
              if (!v10)
                goto LABEL_146;
              v24 = (_OWORD *)(v10 + v15);
              v25 = v10 + v21;
              v26 = *(_BYTE *)(v10 + v15);
              v27 = *(_QWORD *)(v10 + v15 + 24);
              v28 = *(_OWORD *)(v10 + v15 + 8);
              v29 = *(_OWORD *)(v10 + v21 - 16);
              *v24 = *(_OWORD *)(v10 + v21 - 32);
              v24[1] = v29;
              *(_BYTE *)(v25 - 32) = v26;
              *(_OWORD *)(v25 - 24) = v28;
              *(_QWORD *)(v25 - 8) = v27;
            }
            ++v23;
            v21 -= 32;
            v15 += 32;
          }
          while (v23 < v22);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_137;
      if (v9 - v13 < v6)
      {
        v30 = v13 + v6;
        if (__OFADD__(v13, v6))
          goto LABEL_141;
        if (v30 >= v3)
          v30 = v3;
        if (v30 < v13)
          goto LABEL_142;
        if (v9 != v30)
        {
          v31 = (unsigned __int8 *)(v104 + 32 * v9);
          do
          {
            v32 = *(unsigned __int8 *)(v10 + 32 * v9);
            v33 = v13;
            v34 = v31;
            do
            {
              if (v32 >= *v34)
                break;
              if (!v10)
                goto LABEL_144;
              v35 = *((_QWORD *)v34 + 7);
              v36 = *(_OWORD *)(v34 + 40);
              v37 = *((_OWORD *)v34 + 1);
              *((_OWORD *)v34 + 2) = *(_OWORD *)v34;
              *((_OWORD *)v34 + 3) = v37;
              *v34 = v32;
              *(_OWORD *)(v34 + 8) = v36;
              *((_QWORD *)v34 + 3) = v35;
              v34 -= 32;
              ++v33;
            }
            while (v9 != v33);
            ++v9;
            v31 += 32;
          }
          while (v9 != v30);
          v9 = v30;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v11);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1000285B0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v11 = (char *)result;
    }
    v39 = *((_QWORD *)v11 + 2);
    v38 = *((_QWORD *)v11 + 3);
    v12 = v39 + 1;
    v10 = v110;
    if (v39 >= v38 >> 1)
    {
      result = (uint64_t)sub_1000285B0((char *)(v38 > 1), v39 + 1, 1, v11);
      v10 = v110;
      v11 = (char *)result;
    }
    *((_QWORD *)v11 + 2) = v12;
    v40 = v11 + 32;
    v41 = (Swift::Int *)&v11[16 * v39 + 32];
    *v41 = v13;
    v41[1] = v9;
    if (v39)
      break;
    v12 = 1;
LABEL_15:
    v6 = v108;
    v3 = v109;
    if (v9 >= v109)
    {
      v8 = v107;
LABEL_104:
      result = (uint64_t)v11;
      v107 = v8;
      if (v12 < 2)
        goto LABEL_95;
      v98 = *v105;
      while (1)
      {
        v99 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v98)
          goto LABEL_147;
        v88 = result;
        v100 = *(_QWORD *)(result + 32 + 16 * v99);
        v101 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_1000283A4((unsigned __int8 *)(v98 + 32 * v100), (unsigned __int8 *)(v98 + 32 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v98 + 32 * v101, v111);
        if (v1)
          goto LABEL_94;
        if (v101 < v100)
          goto LABEL_134;
        result = swift_isUniquelyReferenced_nonNull_native(v88);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1000286A8(v88);
          v88 = result;
        }
        if (v99 >= *(_QWORD *)(v88 + 16))
          goto LABEL_135;
        v102 = (_QWORD *)(v88 + 32 + 16 * v99);
        *v102 = v100;
        v102[1] = v101;
        v103 = *(_QWORD *)(v88 + 16);
        if (v12 > v103)
          goto LABEL_136;
        memmove((void *)(v88 + 32 + 16 * (v12 - 1)), (const void *)(v88 + 32 + 16 * v12), 16 * (v103 - v12));
        result = v88;
        *(_QWORD *)(v88 + 16) = v103 - 1;
        v12 = v103 - 1;
        if (v103 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      return result;
    }
  }
  while (1)
  {
    v42 = v12 - 1;
    if (v12 >= 4)
    {
      v47 = &v40[16 * v12];
      v48 = *((_QWORD *)v47 - 8);
      v49 = *((_QWORD *)v47 - 7);
      v53 = __OFSUB__(v49, v48);
      v50 = v49 - v48;
      if (v53)
        goto LABEL_121;
      v52 = *((_QWORD *)v47 - 6);
      v51 = *((_QWORD *)v47 - 5);
      v53 = __OFSUB__(v51, v52);
      v45 = v51 - v52;
      v46 = v53;
      if (v53)
        goto LABEL_122;
      v54 = v12 - 2;
      v55 = &v40[16 * v12 - 32];
      v57 = *(_QWORD *)v55;
      v56 = *((_QWORD *)v55 + 1);
      v53 = __OFSUB__(v56, v57);
      v58 = v56 - v57;
      if (v53)
        goto LABEL_123;
      v53 = __OFADD__(v45, v58);
      v59 = v45 + v58;
      if (v53)
        goto LABEL_125;
      if (v59 >= v50)
      {
        v77 = &v40[16 * v42];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v53 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v53)
          goto LABEL_131;
        v70 = v45 < v80;
        goto LABEL_83;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v71 = *((_QWORD *)v11 + 4);
        v72 = *((_QWORD *)v11 + 5);
        v53 = __OFSUB__(v72, v71);
        v64 = v72 - v71;
        v65 = v53;
        goto LABEL_77;
      }
      v44 = *((_QWORD *)v11 + 4);
      v43 = *((_QWORD *)v11 + 5);
      v53 = __OFSUB__(v43, v44);
      v45 = v43 - v44;
      v46 = v53;
    }
    if ((v46 & 1) != 0)
      goto LABEL_124;
    v54 = v12 - 2;
    v60 = &v40[16 * v12 - 32];
    v62 = *(_QWORD *)v60;
    v61 = *((_QWORD *)v60 + 1);
    v63 = __OFSUB__(v61, v62);
    v64 = v61 - v62;
    v65 = v63;
    if (v63)
      goto LABEL_126;
    v66 = &v40[16 * v42];
    v68 = *(_QWORD *)v66;
    v67 = *((_QWORD *)v66 + 1);
    v53 = __OFSUB__(v67, v68);
    v69 = v67 - v68;
    if (v53)
      goto LABEL_128;
    if (__OFADD__(v64, v69))
      goto LABEL_130;
    if (v64 + v69 >= v45)
    {
      v70 = v45 < v69;
LABEL_83:
      if (v70)
        v42 = v54;
      goto LABEL_85;
    }
LABEL_77:
    if ((v65 & 1) != 0)
      goto LABEL_127;
    v73 = &v40[16 * v42];
    v75 = *(_QWORD *)v73;
    v74 = *((_QWORD *)v73 + 1);
    v53 = __OFSUB__(v74, v75);
    v76 = v74 - v75;
    if (v53)
      goto LABEL_129;
    if (v76 < v64)
      goto LABEL_15;
LABEL_85:
    v81 = v42 - 1;
    if (v42 - 1 >= v12)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v10)
      goto LABEL_145;
    v82 = (unint64_t *)v11;
    v83 = &v40[16 * v81];
    v84 = *(_QWORD *)v83;
    v85 = &v40[16 * v42];
    v86 = *((_QWORD *)v85 + 1);
    result = sub_1000283A4((unsigned __int8 *)(v10 + 32 * *(_QWORD *)v83), (unsigned __int8 *)(v10 + 32 * *(_QWORD *)v85), v10 + 32 * v86, v111);
    if (v1)
      break;
    if (v86 < v84)
      goto LABEL_118;
    if (v42 > v82[2])
      goto LABEL_119;
    *(_QWORD *)v83 = v84;
    *(_QWORD *)&v40[16 * v81 + 8] = v86;
    v87 = v82[2];
    if (v42 >= v87)
      goto LABEL_120;
    v11 = (char *)v82;
    v12 = v87 - 1;
    result = (uint64_t)memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
    v82[2] = v87 - 1;
    v10 = v110;
    if (v87 <= 2)
      goto LABEL_15;
  }
  v88 = (uint64_t)v82;
LABEL_94:
  result = v88;
LABEL_95:
  swift_bridgeObjectRelease(result);
  *((_QWORD *)v107 + 2) = 0;
  return swift_bridgeObjectRelease(v107);
}

uint64_t sub_1000283A4(unsigned __int8 *__dst, unsigned __int8 *__src, unint64_t a3, char *a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  BOOL v16;
  __int128 v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  BOOL v21;
  __int128 v22;
  int64_t v23;

  v4 = (unsigned __int8 *)a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 31;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 31;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != (char *)__src || &__src[32 * v13] <= (unsigned __int8 *)a4)
      memmove(a4, __src, 32 * v13);
    v14 = &v4[32 * v13];
    if (v7 >= v6 || v11 < 32)
      goto LABEL_40;
    v18 = (unsigned __int8 *)(a3 - 32);
    while (1)
    {
      v19 = v18 + 32;
      v20 = v6 - 32;
      if (*(v14 - 32) >= *(v6 - 32))
      {
        v20 = v14 - 32;
        if (v19 != v14)
        {
          v14 -= 32;
          goto LABEL_37;
        }
        v21 = v18 >= v14;
        v14 -= 32;
        if (v21)
          goto LABEL_37;
      }
      else
      {
        if (v19 != v6)
        {
          v6 -= 32;
LABEL_37:
          v22 = *((_OWORD *)v20 + 1);
          *(_OWORD *)v18 = *(_OWORD *)v20;
          *((_OWORD *)v18 + 1) = v22;
          goto LABEL_38;
        }
        v21 = v18 >= v6;
        v6 -= 32;
        if (v21)
          goto LABEL_37;
      }
LABEL_38:
      if (v6 > v7)
      {
        v18 -= 32;
        if (v14 > v4)
          continue;
      }
      goto LABEL_40;
    }
  }
  if (a4 != (char *)__dst || &__dst[32 * v10] <= (unsigned __int8 *)a4)
    memmove(a4, __dst, 32 * v10);
  v14 = &v4[32 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (*v6 < *v4)
    {
      v15 = v6;
      v16 = v7 == v6;
      v6 += 32;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      v7 += 32;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = v4;
    v16 = v7 == v4;
    v4 += 32;
    if (v16)
      goto LABEL_17;
LABEL_16:
    v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v15;
    *((_OWORD *)v7 + 1) = v17;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_40:
  v23 = v14 - v4 + (v14 - v4 < 0 ? 0x1FuLL : 0);
  if (v6 != v4 || v6 >= &v4[v23 & 0xFFFFFFFFFFFFFFE0])
    memmove(v6, v4, 32 * (v23 >> 5));
  return 1;
}

char *sub_1000285B0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001D138(&qword_100126F50);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000286A8(uint64_t a1)
{
  return sub_1000285B0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_1000286CC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100028728()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_100022CB8((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_100022F44(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

char *sub_1000288F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001D138(&qword_100126F58);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_release(a4);
  return v11;
}

void sub_1000289F0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  uint64_t v5;
  Swift::UInt8 v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = a2 + 56;
    do
    {
      v6 = *(_BYTE *)(v5 - 24);
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v6);
      v7 = sub_100026638();
      dispatch thunk of Hashable.hash(into:)(a1, &type metadata for TransparencyByteBuffer, v7);
      v5 += 32;
      --v4;
    }
    while (v4);
  }
}

char *sub_100028AA4(uint64_t a1)
{
  return sub_1000288F0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100028AB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    __asm { BR              X10 }
  return 0;
}

uint64_t sub_100028DE4()
{
  return sub_100028E74(&qword_100126F08, &qword_100126F10);
}

unint64_t sub_100028E0C()
{
  unint64_t result;

  result = qword_100126F18;
  if (!qword_100126F18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SerializationVersion, &type metadata for SerializationVersion);
    atomic_store(result, (unint64_t *)&qword_100126F18);
  }
  return result;
}

uint64_t sub_100028E50()
{
  return sub_100028E74(&qword_100126F20, &qword_100126F28);
}

uint64_t sub_100028E74(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10001D1C4(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100028EB8()
{
  unint64_t result;

  result = qword_100126F30;
  if (!qword_100126F30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ATLeafType, &type metadata for ATLeafType);
    atomic_store(result, (unint64_t *)&qword_100126F30);
  }
  return result;
}

unint64_t sub_100028F00()
{
  unint64_t result;

  result = qword_100126F38;
  if (!qword_100126F38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TransparencyExtensionType, &type metadata for TransparencyExtensionType);
    atomic_store(result, (unint64_t *)&qword_100126F38);
  }
  return result;
}

unint64_t sub_100028F48()
{
  unint64_t result;

  result = qword_100126F40;
  if (!qword_100126F40)
  {
    result = swift_getWitnessTable(&unk_1000DBC74, &type metadata for TransparencyExtension);
    atomic_store(result, (unint64_t *)&qword_100126F40);
  }
  return result;
}

unint64_t sub_100028F90()
{
  unint64_t result;

  result = qword_100126F48;
  if (!qword_100126F48)
  {
    result = swift_getWitnessTable(&unk_1000DBCDC, &type metadata for ATLeafData);
    atomic_store(result, (unint64_t *)&qword_100126F48);
  }
  return result;
}

ValueMetadata *type metadata accessor for SerializationVersion()
{
  return &type metadata for SerializationVersion;
}

ValueMetadata *type metadata accessor for ATLeafType()
{
  return &type metadata for ATLeafType;
}

ValueMetadata *type metadata accessor for TransparencyExtensionType()
{
  return &type metadata for TransparencyExtensionType;
}

uint64_t destroy for TransparencyExtension(uint64_t a1)
{
  return sub_100022F44(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for TransparencyExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_100022F88(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for TransparencyExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_100022F88(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  sub_100022F44(v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for TransparencyExtension(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for TransparencyExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100022F44(v4, v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyExtension(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TransparencyExtension(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyExtension()
{
  return &type metadata for TransparencyExtension;
}

void destroy for ATLeafData(uint64_t a1)
{
  sub_100022F44(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_100022F44(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));

}

uint64_t initializeWithCopy for ATLeafData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_100022F88(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  sub_100022F88(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v8);
  v10 = v9;
  return a1;
}

uint64_t assignWithCopy for ATLeafData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_100022F88(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  sub_100022F44(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  sub_100022F88(v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  sub_100022F44(v10, v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(void **)(a1 + 56);
  v15 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v15;
  v16 = v15;

  return a1;
}

__n128 initializeWithTake for ATLeafData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ATLeafData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100022F44(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_100022F44(v6, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v8 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  return a1;
}

uint64_t getEnumTagSinglePayload for ATLeafData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ATLeafData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ATLeafData()
{
  return &type metadata for ATLeafData;
}

_QWORD *sub_100029444(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_10002946C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return sub_100022F44(a2, a3);
  return result;
}

void sub_1000294A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100026C98(a1, a2);
}

uint64_t *sub_1000294B8()
{
  return &qword_100126F60;
}

uint64_t sub_1000294C4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_100126F60, v2, 0, 0);
  v0 = qword_100126F60;
  swift_bridgeObjectRetain(off_100126F68);
  return v0;
}

uint64_t sub_100029514(uint64_t a1, void *a2)
{
  void *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_100126F60, v6, 1, 0);
  v4 = off_100126F68;
  qword_100126F60 = a1;
  off_100126F68 = a2;
  return swift_bridgeObjectRelease(v4);
}

void *sub_10002956C(uint64_t a1)
{
  swift_beginAccess(&qword_100126F60, a1, 33, 0);
  return &j__swift_endAccess;
}

void sub_1000295AC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000295E8()
{
  int v0;
  Swift::String v1;
  uint64_t v2;
  int v4;
  _QWORD v5[10];

  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  v1._countAndFlagsBits = 0xD000000000000016;
  v1._object = (void *)0x80000001000E1A10;
  String.append(_:)(v1);
  v4 = v0;
  type metadata accessor for Status(0);
  ((void (*)(int *, _QWORD *, uint64_t, void *, void *))_print_unlocked<A, B>(_:_:))(&v4, v5, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

void type metadata accessor for LogType(uint64_t a1)
{
  sub_10002987C(a1, &qword_100126FB8, (uint64_t)&unk_100107648);
}

void type metadata accessor for Application(uint64_t a1)
{
  sub_10002987C(a1, &qword_100126FB0, (uint64_t)&unk_100107628);
}

void type metadata accessor for Status(uint64_t a1)
{
  sub_10002987C(a1, &qword_100126FA8, (uint64_t)&unk_100107608);
}

void sub_10002987C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1000298C0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000298E4 + 4 * byte_1000DBD95[a2 >> 5]))(1);
}

uint64_t sub_1000298E4()
{
  return 2;
}

uint64_t sub_1000298EC()
{
  return 3;
}

uint64_t sub_1000298F4()
{
  return 7;
}

uint64_t sub_1000298FC@<X0>(uint64_t a1@<X8>)
{
  return a1 + 4;
}

uint64_t sub_100029904(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002E2EC();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10002992C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002E2EC();
  return Error<>._code.getter(a1, v2);
}

void sub_10002995C()
{
  uint64_t v0;

  sub_1000295AC(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_100029974()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_100029998 + 4
                                                                  * byte_1000DBD9A[*(unsigned __int8 *)(v0 + 8) >> 5]))(1);
}

uint64_t sub_100029998()
{
  return 2;
}

uint64_t sub_1000299A0()
{
  return 3;
}

uint64_t sub_1000299A8()
{
  return 7;
}

uint64_t sub_1000299B0()
{
  _QWORD *v0;

  return *v0 + 4;
}

uint64_t sub_1000299C0()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012B578 = result;
  return result;
}

uint64_t sub_1000299F0()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012B588 = result;
  return result;
}

uint64_t sub_100029A20()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012B598 = result;
  return result;
}

uint64_t sub_100029A50()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012B5A8 = result;
  return result;
}

uint64_t sub_100029A80()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012B5B8 = result;
  return result;
}

uint64_t sub_100029AB0()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012B5C8 = result;
  return result;
}

uint64_t sub_100029AE0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_100131440);
  sub_100020804(v0, (uint64_t)qword_100131440);
  return Logger.init(subsystem:category:)(0xD000000000000016, 0x80000001000E1A30, 0xD000000000000018, 0x80000001000E1A50);
}

uint64_t sub_100029B5C()
{
  uint64_t v0;

  if (qword_10012B5D0 != -1)
    swift_once(&qword_10012B5D0, sub_100029AE0);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_100131440);
}

uint64_t sub_100029BA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012B5D0 != -1)
    swift_once(&qword_10012B5D0, sub_100029AE0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131440);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t ConsistencyProofResponse.expectedApplication.getter()
{
  return sub_100029D40(&qword_10012B570, &qword_10012B578, (uint64_t (*)(_QWORD))type metadata accessor for Application, (uint64_t)sub_1000299C0);
}

uint64_t sub_100029C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001D138(&qword_100126F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ConsistencyProofResponse.expectedApplication.setter(uint64_t a1)
{
  return sub_100029E80(a1, &qword_10012B570, &qword_10012B578, (uint64_t (*)(_QWORD))type metadata accessor for Application, (uint64_t)sub_1000299C0);
}

void (*ConsistencyProofResponse.expectedApplication.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = ConsistencyProofResponse.expectedApplication.getter();
  *((_DWORD *)v3 + 8) = v4;
  *((_BYTE *)v3 + 36) = BYTE4(v4) & 1;
  return sub_100029CF8;
}

void sub_100029CF8(uint64_t a1, uint64_t a2)
{
  sub_100029FB4(a1, a2, &qword_10012B570, &qword_10012B578, (uint64_t (*)(_QWORD))type metadata accessor for Application, (uint64_t)sub_1000299C0);
}

unint64_t ConsistencyProofResponse.expectedLogType.getter()
{
  return sub_100029D40(&qword_10012B580, &qword_10012B588, (uint64_t (*)(_QWORD))type metadata accessor for LogType, (uint64_t)sub_1000299F0);
}

unint64_t sub_100029D40(_QWORD *a1, _QWORD *a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  void *v4;
  const void *v7;
  id v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned int v14;
  _OWORD v15[2];
  _BYTE v16[24];
  uint64_t v17;

  if (*a1 != -1)
    swift_once(a1, a4);
  v7 = (const void *)(*a2 + 16);
  swift_beginAccess(v7, v16, 32, 0);
  v8 = objc_getAssociatedObject(v4, v7);
  swift_endAccess(v16);
  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v15, v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  sub_100029C38((uint64_t)v15, (uint64_t)v16);
  if (v17)
  {
    v9 = a3(0);
    v10 = swift_dynamicCast(&v14, v16, (char *)&type metadata for Any + 8, v9, 6);
    v11 = v14;
    v12 = v10 ^ 1;
    if (!v10)
      v11 = 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v16, &qword_100126F70);
    v11 = 0;
    v12 = 1;
  }
  return v11 | ((unint64_t)v12 << 32);
}

uint64_t ConsistencyProofResponse.expectedLogType.setter(uint64_t a1)
{
  return sub_100029E80(a1, &qword_10012B580, &qword_10012B588, (uint64_t (*)(_QWORD))type metadata accessor for LogType, (uint64_t)sub_1000299F0);
}

uint64_t sub_100029E80(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  void *v5;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _DWORD v13[6];

  if (*a2 != -1)
  {
    swift_once(a2, a5);
    v9 = *a3;
    if ((a1 & 0x100000000) == 0)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v9 = *a3;
  if ((a1 & 0x100000000) != 0)
    goto LABEL_5;
LABEL_3:
  v13[0] = a1;
  v10 = a4(0);
  v11 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v13, v10);
LABEL_6:
  swift_beginAccess(v9 + 16, v13, 32, 0);
  objc_setAssociatedObject(v5, (const void *)(v9 + 16), v11, (void *)0x303);
  swift_endAccess(v13);
  return swift_unknownObjectRelease(v11);
}

void (*ConsistencyProofResponse.expectedLogType.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = ConsistencyProofResponse.expectedLogType.getter();
  *((_DWORD *)v3 + 8) = v4;
  *((_BYTE *)v3 + 36) = BYTE4(v4) & 1;
  return sub_100029F90;
}

void sub_100029F90(uint64_t a1, uint64_t a2)
{
  sub_100029FB4(a1, a2, &qword_10012B580, &qword_10012B588, (uint64_t (*)(_QWORD))type metadata accessor for LogType, (uint64_t)sub_1000299F0);
}

void sub_100029FB4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  _QWORD *v8;
  int v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;

  v8 = *(_QWORD **)a1;
  v9 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v10 = *(_BYTE *)(*(_QWORD *)a1 + 36);
  if (*a3 != -1)
  {
    swift_once(a3, a6);
    v11 = *a4;
    if ((v10 & 1) != 0)
      goto LABEL_3;
LABEL_5:
    *(_DWORD *)v8 = v9;
    v13 = a5(0);
    v12 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v8, v13);
    goto LABEL_6;
  }
  v11 = *a4;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 36) & 1) == 0)
    goto LABEL_5;
LABEL_3:
  v12 = 0;
LABEL_6:
  v14 = (void *)v8[3];
  swift_beginAccess(v11 + 16, v8, 32, 0);
  objc_setAssociatedObject(v14, (const void *)(v11 + 16), v12, (void *)0x303);
  swift_endAccess(v8);
  swift_unknownObjectRelease(v12);
  free(v8);
}

uint64_t ConsistencyProofResponse.startRevision.getter()
{
  void *v0;
  const void *v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  if (qword_10012B590 != -1)
    swift_once(&qword_10012B590, sub_100029A20);
  v1 = (const void *)(qword_10012B598 + 16);
  swift_beginAccess(qword_10012B598 + 16, v6, 32, 0);
  v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess(v6);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100029C38((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for Int64, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v6, &qword_100126F70);
    return 0;
  }
}

uint64_t ConsistencyProofResponse.startRevision.setter(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v4;
  NSNumber v5;
  _BYTE v7[24];

  if (qword_10012B590 != -1)
    swift_once(&qword_10012B590, sub_100029A20);
  v4 = qword_10012B598;
  if ((a2 & 1) != 0)
    v5.super.super.isa = 0;
  else
    v5.super.super.isa = Int64._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess(v4 + 16, v7, 32, 0);
  objc_setAssociatedObject(v2, (const void *)(v4 + 16), v5.super.super.isa, (void *)0x303);
  swift_endAccess(v7);
  return swift_unknownObjectRelease(v5.super.super.isa);
}

void (*ConsistencyProofResponse.startRevision.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v3[3] = ConsistencyProofResponse.startRevision.getter();
  *((_BYTE *)v3 + 32) = v4 & 1;
  return sub_10002A2A0;
}

void sub_10002A2A0(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  uint64_t v3;
  Class isa;
  void *v5;
  const void *v6;

  v1 = *(_QWORD **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  if (qword_10012B590 != -1)
    swift_once(&qword_10012B590, sub_100029A20);
  v3 = qword_10012B598;
  if ((v2 & 1) != 0)
    isa = 0;
  else
    isa = Int64._bridgeToObjectiveC()().super.super.isa;
  v5 = (void *)v1[5];
  v6 = (const void *)(v3 + 16);
  swift_beginAccess(v6, v1, 32, 0);
  objc_setAssociatedObject(v5, v6, isa, (void *)0x303);
  swift_endAccess(v1);
  swift_unknownObjectRelease(isa);
  free(v1);
}

uint64_t ConsistencyProofResponse.keyBag.getter()
{
  void *v0;
  const void *v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (qword_10012B5A0 != -1)
    swift_once(&qword_10012B5A0, sub_100029A50);
  v1 = (const void *)(qword_10012B5A8 + 16);
  swift_beginAccess(qword_10012B5A8 + 16, v7, 32, 0);
  v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess(v7);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100029C38((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10002E3EC(0, (unint64_t *)&qword_100126F78, &off_100105120);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v7, &qword_100126F70);
    return 0;
  }
}

void ConsistencyProofResponse.keyBag.setter(void *a1)
{
  void *v1;
  const void *v3;
  id v4;
  _BYTE v5[24];

  if (qword_10012B5A0 != -1)
    swift_once(&qword_10012B5A0, sub_100029A50);
  v3 = (const void *)(qword_10012B5A8 + 16);
  swift_beginAccess(qword_10012B5A8 + 16, v5, 32, 0);
  v4 = a1;
  objc_setAssociatedObject(v1, v3, v4, (void *)1);
  swift_endAccess(v5);

}

void (*ConsistencyProofResponse.keyBag.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = ConsistencyProofResponse.keyBag.getter();
  return sub_10002A564;
}

void sub_10002A564(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  const void *v7;
  id v8;
  id v9;
  void *v10;
  const void *v11;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    v4 = qword_10012B5A0;
    v5 = v3;
    if (v4 != -1)
      swift_once(&qword_10012B5A0, sub_100029A50);
    v6 = (void *)v2[4];
    v7 = (const void *)(qword_10012B5A8 + 16);
    swift_beginAccess(qword_10012B5A8 + 16, v2, 32, 0);
    v8 = v5;
    objc_setAssociatedObject(v6, v7, v8, (void *)1);
    swift_endAccess(v2);

    v9 = (id)v2[3];
  }
  else
  {
    if (qword_10012B5A0 != -1)
      swift_once(&qword_10012B5A0, sub_100029A50);
    v10 = (void *)v2[4];
    v11 = (const void *)(qword_10012B5A8 + 16);
    swift_beginAccess(qword_10012B5A8 + 16, v2, 32, 0);
    v9 = v3;
    objc_setAssociatedObject(v10, v11, v9, (void *)1);
    swift_endAccess(v2);

  }
  free(v2);
}

double sub_10002A694@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v3;
  id v4;
  uint64_t v5;
  double result;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  if (qword_10012B5B0 != -1)
    swift_once(&qword_10012B5B0, sub_100029A80);
  v3 = (const void *)(qword_10012B5B8 + 16);
  swift_beginAccess(qword_10012B5B8 + 16, v7, 32, 0);
  v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess(v7);
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v7, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100029C38((uint64_t)v7, (uint64_t)v8);
  if (!v9)
  {
    sub_1000202F0((uint64_t)v8, &qword_100126F70);
    goto LABEL_10;
  }
  v5 = sub_10001D138(&qword_100126F80);
  if ((swift_dynamicCast(a1, v8, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
  {
LABEL_10:
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10002A7B0(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  _QWORD v12[3];
  uint64_t v13;

  if (qword_10012B5B0 != -1)
    swift_once(&qword_10012B5B0, sub_100029A80);
  v3 = qword_10012B5B8;
  sub_10002AC5C(a1, (uint64_t)v12, &qword_100126F88);
  v4 = v13;
  if (v13)
  {
    v5 = sub_100022F20(v12, v13);
    v6 = *(_QWORD *)(v4 - 8);
    __chkstk_darwin(v5);
    v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v8, v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    sub_100023CAC(v12);
  }
  else
  {
    v9 = 0;
  }
  swift_beginAccess(v3 + 16, v12, 32, 0);
  objc_setAssociatedObject(v1, (const void *)(v3 + 16), v9, (void *)1);
  swift_endAccess(v12);
  swift_unknownObjectRelease(v9);
  return sub_1000202F0(a1, &qword_100126F88);
}

void (*sub_10002A908(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_10002A694((uint64_t)v3);
  return sub_10002A954;
}

void sub_10002A954(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*a1, (uint64_t)v2 + 40, &qword_100126F88);
    sub_10002A7B0((uint64_t)v2 + 40);
    sub_1000202F0((uint64_t)v2, &qword_100126F88);
  }
  else
  {
    sub_10002A7B0(*a1);
  }
  free(v2);
}

uint64_t ConsistencyProofResponse.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  if (qword_10012B5C0 != -1)
    swift_once(&qword_10012B5C0, sub_100029AB0);
  v3 = (const void *)(qword_10012B5C8 + 16);
  swift_beginAccess(qword_10012B5C8 + 16, v9, 32, 0);
  v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess(v9);
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100029C38((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_1000202F0((uint64_t)v10, &qword_100126F70);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t ConsistencyProofResponse.receiptTime.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  _BYTE v13[24];

  v2 = v1;
  v4 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10012B5C0 != -1)
    swift_once(&qword_10012B5C0, sub_100029AB0);
  v7 = qword_10012B5C8;
  sub_10002AC5C(a1, (uint64_t)v6, &qword_100127710);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v6, v8);
  }
  swift_beginAccess(v7 + 16, v13, 32, 0);
  objc_setAssociatedObject(v2, (const void *)(v7 + 16), isa, (void *)0x303);
  swift_endAccess(v13);
  swift_unknownObjectRelease(isa);
  return sub_1000202F0(a1, &qword_100127710);
}

uint64_t sub_10002AC5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001D138(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void (*ConsistencyProofResponse.receiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100127710) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  ConsistencyProofResponse.receiptTime.getter((uint64_t)v4);
  return sub_10002AD0C;
}

void sub_10002AD0C(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*(_QWORD *)(a1 + 16), (uint64_t)v2, &qword_100127710);
    ConsistencyProofResponse.receiptTime.setter((uint64_t)v2);
    sub_1000202F0((uint64_t)v3, &qword_100127710);
  }
  else
  {
    ConsistencyProofResponse.receiptTime.setter(*(_QWORD *)(a1 + 16));
  }
  free(v3);
  free(v2);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ConsistencyProofResponse.isNewEpoch()()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  char **v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v30;
  _QWORD v31[4];

  v2 = objc_msgSend(v0, "responsesArray");
  if (!v2)
  {
    __break(1u);
    goto LABEL_23;
  }
  v3 = v2;
  v4 = (uint64_t)objc_msgSend(v2, "count");

  if (v4 >= 1)
  {
    v5 = ConsistencyProofResponse.keyBag.getter();
    if (!v5)
    {
      v19 = sub_10002B05C();
      v20 = swift_allocError(&type metadata for ATLogProofsError, v19, 0, 0);
      v21[1] = 0;
      v21[2] = 0;
      *v21 = 0;
      swift_willThrow(v20);
      goto LABEL_18;
    }
    v6 = (void *)v5;
    if (objc_msgSend(v0, "logType") != 3 && objc_msgSend(v0, "logType") != 2)
    {
      v26 = objc_msgSend(v0, "logType");
      v27 = sub_10002E13C();
      v23 = swift_allocError(&type metadata for ConsistencyProofResponseError, v27, 0, 0);
      *(_QWORD *)v24 = v26;
      v25 = 96;
      goto LABEL_17;
    }
    v7 = objc_msgSend(v0, "logType");
    v8 = &selRef_tltLogBeginningMs;
    if (v7 != 3)
      v8 = &selRef_patLogBeginningMs;
    v9 = objc_msgSend(v6, *v8);
    v2 = objc_msgSend(v0, "responsesArray");
    if (v2)
    {
      v10 = v2;
      v11 = objc_msgSend(v2, "objectAtIndexedSubscript:", 0);

      _bridgeAnyObjectToAny(_:)(v31, v11);
      swift_unknownObjectRelease(v11);
      v12 = sub_10002E3EC(0, &qword_100126FA0, &off_100104FA8);
      if (swift_dynamicCast(&v30, v31, (char *)&type metadata for Any + 8, v12, 6))
      {
        v13 = v30;
        v2 = objc_msgSend(v30, "startSlh");
        if (v2)
        {
          v14 = v2;
          v15 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
          v16 = objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "signedTypeWithObject:", v14);

          v17 = sub_100053DAC();
          if (v1)
          {
            swift_errorRelease();

          }
          else
          {
            v28 = v17;

            if (v28 >= 1 && (unint64_t)v9 < v28)
            {
              v18 = 1;
              goto LABEL_18;
            }
          }
          goto LABEL_13;
        }
LABEL_24:
        __break(1u);
        return (char)v2;
      }
      v22 = sub_10002E13C();
      v23 = swift_allocError(&type metadata for ConsistencyProofResponseError, v22, 0, 0);
      *(_QWORD *)v24 = 2;
      v25 = 0x80;
LABEL_17:
      *(_BYTE *)(v24 + 8) = v25;
      swift_willThrow(v23);

      goto LABEL_18;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_13:
  v18 = 0;
LABEL_18:
  LOBYTE(v2) = v18 & 1;
  return (char)v2;
}

unint64_t sub_10002B05C()
{
  unint64_t result;

  result = qword_100126F90;
  if (!qword_100126F90)
  {
    result = swift_getWitnessTable(&unk_1000DD810, &type metadata for ATLogProofsError);
    atomic_store(result, (unint64_t *)&qword_100126F90);
  }
  return result;
}

void sub_10002B0A0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int (**v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *ObjCClassFromMetadata;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned int (**v30)(_QWORD, _QWORD, _QWORD);
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void (**v36)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  char **v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  void (**v59)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint8_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  id v72;
  uint64_t v73;
  void (**v74)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint8_t **v84;
  _QWORD *v85;
  void (**v86)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v87;
  void (**v88)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint8_t *v89;
  id v90;
  void *v91;
  unsigned int (**v92)(_QWORD, _QWORD, _QWORD);
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97[3];
  _QWORD *v98;
  void (**v99)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _OWORD v100[3];
  uint64_t v101;
  _OWORD v102[3];
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;

  v4 = sub_10001D138(&qword_100127710);
  v5 = __chkstk_darwin(v4);
  v7 = (uint8_t *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v85 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(unsigned int (***)(_QWORD, _QWORD, _QWORD))(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v85 - v15;
  if (!objc_msgSend(a1, "hasStartSlh") || !objc_msgSend(a1, "hasEndSlh"))
  {
    v26 = sub_10002E13C();
    v27 = swift_allocError(&type metadata for ConsistencyProofResponseError, v26, 0, 0);
    *(_QWORD *)v28 = 0;
    *(_BYTE *)(v28 + 8) = 0x80;
    swift_willThrow(v27);
    return;
  }
  v89 = v7;
  v90 = v14;
  v92 = v11;
  v104 = (uint8_t *)v10;
  v91 = v1;
  v17 = objc_msgSend(a1, "startSlh");
  if (!v17)
  {
    __break(1u);
    goto LABEL_42;
  }
  v18 = v17;
  v19 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v19);
  v21 = objc_msgSend(ObjCClassFromMetadata, "signedTypeWithObject:", v18);

  v22 = objc_msgSend(a1, "endSlh");
  if (!v22)
  {
LABEL_42:
    __break(1u);
    return;
  }
  v23 = v22;
  v24 = objc_msgSend(ObjCClassFromMetadata, "signedTypeWithObject:", v22);

  sub_100053F40((uint64_t)v100);
  v25 = v21;
  if (v2)
  {
LABEL_7:

    return;
  }
  sub_100053F40((uint64_t)v102);
  v29 = v91;
  sub_10002A694((uint64_t)&v93);
  if (*((_QWORD *)&v94 + 1))
  {
    sub_10002E424((uint64_t)&v93, (uint64_t)v97);
    sub_1000202F0((uint64_t)&v93, &qword_100126F88);
    v86 = v99;
    v87 = v98;
    v85 = sub_100022F20(v97, (uint64_t)v98);
    ConsistencyProofResponse.receiptTime.getter((uint64_t)v9);
    v30 = v92;
    v31 = v104;
    if (((unsigned int (**)(char *, uint64_t, uint8_t *))v92)[6](v9, 1, v104) == 1)
    {
      static Date.now.getter();
      sub_1000202F0((uint64_t)v9, &qword_100127710);
    }
    else
    {
      ((unsigned int (**)(char *, char *, uint8_t *))v30)[4](v16, v9, v31);
    }
    v34 = objc_msgSend(v25, "data");
    v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v88 = v36;

    v37 = sub_100054114();
    ((void (**)(_OWORD *, char *, uint64_t, _QWORD, unint64_t, _QWORD *))v86)[3](v100, v16, v35, v88, v37, v87);
    ((void (*)(char *, uint8_t *))v30[1])(v16, v31);
    sub_100022F44(v35, (unint64_t)v88);
    sub_100023CAC(v97);
  }
  else
  {
    sub_1000202F0((uint64_t)&v93, &qword_100126F88);
    v31 = v104;
    v30 = v92;
  }
  sub_10002A694((uint64_t)&v93);
  if (*((_QWORD *)&v94 + 1))
  {
    sub_10002E424((uint64_t)&v93, (uint64_t)v97);
    sub_1000202F0((uint64_t)&v93, &qword_100126F88);
    v32 = (uint64_t)v98;
    v88 = v99;
    v87 = sub_100022F20(v97, (uint64_t)v98);
    v33 = (uint64_t)v89;
    ConsistencyProofResponse.receiptTime.getter((uint64_t)v89);
    if (((unsigned int (**)(uint64_t, uint64_t, uint8_t *))v30)[6](v33, 1, v31) == 1)
    {
      static Date.now.getter();
      sub_1000202F0(v33, &qword_100127710);
    }
    else
    {
      ((unsigned int (**)(id, uint64_t, uint8_t *))v30)[4](v90, v33, v31);
    }
    v48 = objc_msgSend(v24, "data");
    v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v51 = v50;

    v52 = sub_100054114();
    v53 = v90;
    ((void (**)(_OWORD *, id, uint64_t, unint64_t, unint64_t, uint64_t))v88)[3](v102, v90, v49, v51, v52, v32);
    ((void (*)(id, uint8_t *))v92[1])(v53, v104);
    sub_100022F44(v49, v51);
    sub_100023CAC(v97);
  }
  else
  {
    sub_1000202F0((uint64_t)&v93, &qword_100126F88);
  }
  v38 = ConsistencyProofResponse.keyBag.getter();
  if (!v38)
  {
    v54 = sub_10002E13C();
    v55 = swift_allocError(&type metadata for ConsistencyProofResponseError, v54, 0, 0);
    *(_QWORD *)v56 = 1;
    *(_BYTE *)(v56 + 8) = 0x80;
    swift_willThrow(v55);
    sub_10002300C(v102);
    sub_10002300C(v100);
    goto LABEL_7;
  }
  v39 = (void *)v38;
  v40 = objc_msgSend(v29, "logType");
  v41 = &selRef_tltKeyStore;
  if (v40 != 3)
    v41 = &selRef_appSthKeyStore;
  v42 = objc_msgSend(v39, *v41);
  v43 = v25;
  v44 = v24;
  v45 = objc_msgSend(v42, "signatureVerifier");
  objc_msgSend(v44, "setVerifier:", v45);

  v46 = v43;
  v47 = objc_msgSend(v42, "signatureVerifier");
  objc_msgSend(v46, "setVerifier:", v47);

  v57 = sub_10004BAB0();
  sub_10002A694((uint64_t)&v93);
  if (*((_QWORD *)&v94 + 1))
  {
    sub_10002E424((uint64_t)&v93, (uint64_t)v97);
    sub_1000202F0((uint64_t)&v93, &qword_100126F88);
    v58 = (uint64_t)v98;
    v59 = v99;
    sub_100022F20(v97, (uint64_t)v98);
    ((void (*)(_OWORD *, id, uint64_t, void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))v59[6])(v100, v57, v58, v59);
    sub_100023CAC(v97);
  }
  else
  {
    sub_1000202F0((uint64_t)&v93, &qword_100126F88);
  }
  if (qword_10012B5D0 != -1)
    swift_once(&qword_10012B5D0, sub_100029AE0);
  v60 = type metadata accessor for Logger(0);
  v61 = sub_100020804(v60, (uint64_t)qword_100131440);
  sub_10002304C(v100);
  v62 = sub_10002304C(v100);
  v104 = (uint8_t *)v61;
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.debug.getter();
  v65 = os_log_type_enabled(v63, v64);
  v88 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v39;
  v92 = (unsigned int (**)(_QWORD, _QWORD, _QWORD))v42;
  v90 = v46;
  if (v65)
  {
    v66 = (uint8_t *)swift_slowAlloc(12, -1);
    v67 = swift_slowAlloc(32, -1);
    *(_DWORD *)v66 = 136315138;
    v89 = v66 + 4;
    v93 = v100[0];
    v94 = v100[1];
    v95 = v100[2];
    v96 = v101;
    v97[0] = v67;
    v68 = sub_100023710();
    v69 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v68);
    v71 = v70;
    *(_QWORD *)&v93 = sub_1000230D0(v69, v70, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, (char *)&v93 + 8, v89, v66 + 12);
    swift_bridgeObjectRelease(v71);
    sub_10002300C(v100);
    sub_10002300C(v100);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Verified signature for %s", v66, 0xCu);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v66, -1, -1);
  }
  else
  {
    sub_10002300C(v100);
    sub_10002300C(v100);
  }

  v72 = sub_10004BAB0();
  sub_10002A694((uint64_t)&v93);
  if (*((_QWORD *)&v94 + 1))
  {
    sub_10002E424((uint64_t)&v93, (uint64_t)v97);
    sub_1000202F0((uint64_t)&v93, &qword_100126F88);
    v73 = (uint64_t)v98;
    v74 = v99;
    sub_100022F20(v97, (uint64_t)v98);
    ((void (*)(_OWORD *, id, uint64_t, void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))v74[6])(v102, v72, v73, v74);
    sub_100023CAC(v97);
  }
  else
  {
    sub_1000202F0((uint64_t)&v93, &qword_100126F88);
  }
  sub_10002304C(v102);
  v75 = sub_10002304C(v102);
  v76 = Logger.logObject.getter(v75);
  v77 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v76, v77))
  {
    v78 = (uint8_t *)swift_slowAlloc(12, -1);
    v79 = swift_slowAlloc(32, -1);
    *(_DWORD *)v78 = 136315138;
    v104 = v78 + 4;
    v93 = v102[0];
    v94 = v102[1];
    v95 = v102[2];
    v96 = v103;
    v97[0] = v79;
    v80 = sub_100023710();
    v81 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v80);
    v83 = v82;
    *(_QWORD *)&v93 = sub_1000230D0(v81, v82, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, (char *)&v93 + 8, v104, v78 + 12);
    swift_bridgeObjectRelease(v83);
    sub_10002300C(v102);
    sub_10002300C(v102);
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "Verified signature for %s", v78, 0xCu);
    swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v79, -1, -1);
    swift_slowDealloc(v78, -1, -1);

    sub_10002300C(v102);
    sub_10002300C(v100);

    v84 = &v104;
  }
  else
  {

    sub_10002300C(v100);
    sub_10002300C(v102);
    sub_10002300C(v102);
    sub_10002300C(v102);

    v84 = (uint8_t **)&v105;
  }

}

uint64_t sub_10002C1EC(void *a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char **v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  char **v28;
  const char *v29;
  id v30;
  id v31;
  id v32;
  Class isa;
  id v34;
  void *v35;
  uint64_t v36;
  void *ObjCClassFromMetadata;
  id v38;
  id v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  id *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char **v106;
  void *v107;
  id v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113[3];
  uint64_t v114;
  uint64_t v115;
  _OWORD v116[3];
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  id v122;
  uint64_t v123;

  v4 = v1;
  v6 = type metadata accessor for KTSWDB.SignedLogHead(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!objc_msgSend(a1, "hasStartSlh") || !objc_msgSend(a1, "hasEndSlh"))
  {
    v18 = sub_10002E13C();
    v19 = swift_allocError(&type metadata for ConsistencyProofResponseError, v18, 0, 0);
    *(_QWORD *)v20 = 0;
    *(_BYTE *)(v20 + 8) = 0x80;
    swift_willThrow(v19);
    return v17 & 1;
  }
  v9 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
  v10 = objc_msgSend(a1, "startSlh");
  if (!v10)
  {
    __break(1u);
    goto LABEL_63;
  }
  v11 = v10;
  v3 = objc_msgSend(v10, "object");

  if (!v3)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    swift_once(&qword_10012B5D0, sub_100029AE0);
LABEL_34:
    v62 = type metadata accessor for Logger(0);
    v63 = sub_100020804(v62, (uint64_t)qword_100131440);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Unknown startSlh consistency verification state", v66, 2u);
      swift_slowDealloc(v66, -1, -1);

      sub_10002300C(v116);
      sub_10002300C(&v118);
      v67 = (id *)&v123;
LABEL_36:

      v17 = 1;
    }
    else
    {

      sub_10002300C(v116);
      sub_10002300C(&v118);

      v17 = 1;
    }
    return v17 & 1;
  }
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v14 = v13;

  v15 = objc_allocWithZone((Class)LogHead);
  v16 = sub_10002E330();
  if (v2)
  {
    sub_100022F44(v12, v14);
    return v17 & 1;
  }
  v3 = v16;
  sub_100022F44(v12, v14);
  v22 = objc_msgSend(v3, "revision");
  v23 = ConsistencyProofResponse.startRevision.getter();
  if ((v24 & 1) == 0 && v23 >= 1 && (unint64_t)v22 < v23)
  {

    v17 = 0;
    return v17 & 1;
  }
  sub_10002B0A0(a1);
  v25 = ConsistencyProofResponse.keyBag.getter();
  if (!v25)
  {
    v41 = sub_10002E13C();
    v42 = swift_allocError(&type metadata for ConsistencyProofResponseError, v41, 0, 0);
    *(_QWORD *)v43 = 1;
    *(_BYTE *)(v43 + 8) = 0x80;
    swift_willThrow(v42);

    return v17 & 1;
  }
  v26 = (void *)v25;
  v27 = objc_msgSend(v4, "logType");
  v28 = &selRef_tltKeyStore;
  if (v27 != 3)
    v28 = &selRef_appSthKeyStore;
  v29 = *v28;
  v122 = v26;
  v30 = objc_msgSend(v26, v29);
  v31 = objc_allocWithZone((Class)TransparencyConsistencyProofVerifier);
  v108 = v30;
  v32 = objc_msgSend(v31, "initWithTrustedKeyStore:", v30);
  objc_msgSend(a1, "setVerifier:", v32);

  ConsistencyProofResponse.startRevision.getter();
  isa = Int64._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(a1, "setStartRevision:", isa);

  objc_msgSend(a1, "setForwards:", 1);
  v34 = objc_msgSend(a1, "startSlh");
  if (!v34)
  {
    __break(1u);
    goto LABEL_66;
  }
  v35 = v34;
  v36 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v36);
  v38 = objc_msgSend(ObjCClassFromMetadata, "signedTypeWithObject:", v35);

  v39 = objc_msgSend(a1, "endSlh");
  if (!v39)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v40 = v39;
  v9 = (char **)objc_msgSend(ObjCClassFromMetadata, "signedTypeWithObject:", v39);

  sub_100053F40((uint64_t)v116);
  sub_100053F40((uint64_t)&v118);
  v107 = v38;
  sub_10002A694((uint64_t)&v109);
  v44 = *((_QWORD *)&v110 + 1);
  v106 = v9;
  if (*((_QWORD *)&v110 + 1))
  {
    sub_10002E424((uint64_t)&v109, (uint64_t)v113);
    sub_1000202F0((uint64_t)&v109, &qword_100126F88);
    v45 = v114;
    v46 = v115;
    sub_100022F20(v113, v114);
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(v46 + 64))(v116, v45, v46);
    v47 = *v8;
    sub_100023798((uint64_t)v8);
    sub_100023CAC(v113);
    v9 = v106;
  }
  else
  {
    sub_1000202F0((uint64_t)&v109, &qword_100126F88);
    v47 = 0;
  }
  v48 = objc_msgSend(a1, "proofHashesArray");
  if (!v48)
  {
LABEL_67:
    __break(1u);
    JUMPOUT(0x10002D410);
  }
  v49 = v48;
  v50 = (uint64_t)objc_msgSend(v48, "count");

  if (v50 < 1)
  {
    sub_10002E3EC(0, &qword_100126FC8, &off_100104FC8);
    sub_1000309E8(v107, v9);
  }
  else
  {
    sub_10004BAB0();
  }
  if (!v44)
  {
LABEL_33:
    if (qword_10012B5D0 == -1)
      goto LABEL_34;
    goto LABEL_64;
  }
  switch(v47)
  {
    case 0:
    case 3:
      if (qword_10012B5D0 != -1)
        swift_once(&qword_10012B5D0, sub_100029AE0);
      v51 = type metadata accessor for Logger(0);
      sub_100020804(v51, (uint64_t)qword_100131440);
      sub_10002304C(&v118);
      v52 = sub_10002304C(&v118);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v53, v54))
        goto LABEL_43;
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      v56 = swift_slowAlloc(32, -1);
      v105 = v56;
      *(_DWORD *)v55 = 136315138;
      v109 = v118;
      v110 = v119;
      v111 = v120;
      v112 = v121;
      v113[0] = v56;
      v57 = sub_100023710();
      v58 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v57);
      v60 = v59;
      *(_QWORD *)&v109 = sub_1000230D0(v58, v59, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v55 + 4, v55 + 12);
      swift_bridgeObjectRelease(v60);
      sub_10002300C(&v118);
      sub_10002300C(&v118);
      v61 = "Verified consistency for %s following split";
      goto LABEL_42;
    case 1:
      if (qword_10012B5D0 != -1)
        swift_once(&qword_10012B5D0, sub_100029AE0);
      v68 = type metadata accessor for Logger(0);
      sub_100020804(v68, (uint64_t)qword_100131440);
      sub_10002304C(&v118);
      v69 = sub_10002304C(&v118);
      v53 = Logger.logObject.getter(v69);
      v54 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v70 = swift_slowAlloc(32, -1);
        v105 = v70;
        *(_DWORD *)v55 = 136315138;
        v109 = v118;
        v110 = v119;
        v111 = v120;
        v112 = v121;
        v113[0] = v70;
        v71 = sub_100023710();
        v72 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v71);
        v74 = v73;
        *(_QWORD *)&v109 = sub_1000230D0(v72, v73, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v55 + 4, v55 + 12);
        swift_bridgeObjectRelease(v74);
        sub_10002300C(&v118);
        sub_10002300C(&v118);
        v61 = "Verified consistency for %s";
LABEL_42:
        _os_log_impl((void *)&_mh_execute_header, v53, v54, v61, v55, 0xCu);
        v75 = v105;
        swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v55, -1, -1);
      }
      else
      {
LABEL_43:
        sub_10002300C(&v118);
        sub_10002300C(&v118);
      }

      goto LABEL_45;
    case 2:
      ConsistencyProofResponse.startRevision.getter();
      if ((v78 & 1) == 0)
      {

        sub_10002300C(v116);
        sub_10002300C(&v118);

        v67 = &v122;
        goto LABEL_36;
      }
      if (qword_10012B5D0 != -1)
        swift_once(&qword_10012B5D0, sub_100029AE0);
      v79 = type metadata accessor for Logger(0);
      v80 = sub_100020804(v79, (uint64_t)qword_100131440);
      sub_10002304C(v116);
      v81 = sub_10002304C(v116);
      v105 = v80;
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc(12, -1);
        v85 = swift_slowAlloc(32, -1);
        v104 = v85;
        *(_DWORD *)v84 = 136315138;
        v109 = v116[0];
        v110 = v116[1];
        v111 = v116[2];
        v112 = v117;
        v113[0] = v85;
        v86 = sub_100023710();
        v87 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v86);
        v89 = v88;
        *(_QWORD *)&v109 = sub_1000230D0(v87, v88, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v84 + 4, v84 + 12);
        swift_bridgeObjectRelease(v89);
        sub_10002300C(v116);
        sub_10002300C(v116);
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Verified TOFU consistency for %s", v84, 0xCu);
        v90 = v104;
        swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1, -1);
        swift_slowDealloc(v84, -1, -1);
      }
      else
      {
        sub_10002300C(v116);
        sub_10002300C(v116);
      }

      sub_10002304C(&v118);
      v91 = sub_10002304C(&v118);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v92, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc(12, -1);
        v95 = swift_slowAlloc(32, -1);
        v105 = v95;
        *(_DWORD *)v94 = 136315138;
        v109 = v118;
        v110 = v119;
        v111 = v120;
        v112 = v121;
        v113[0] = v95;
        v96 = sub_100023710();
        v97 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v96);
        v99 = v98;
        *(_QWORD *)&v109 = sub_1000230D0(v97, v98, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v94 + 4, v94 + 12);
        swift_bridgeObjectRelease(v99);
        sub_10002300C(&v118);
        sub_10002300C(&v118);
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "Verified consistency for %s", v94, 0xCu);
        v100 = v105;
        swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v100, -1, -1);
        swift_slowDealloc(v94, -1, -1);
      }
      else
      {
        sub_10002300C(&v118);
        sub_10002300C(&v118);
      }

      sub_10002A694((uint64_t)&v109);
      if (*((_QWORD *)&v110 + 1))
      {
        sub_10002E424((uint64_t)&v109, (uint64_t)v113);
        sub_1000202F0((uint64_t)&v109, &qword_100126F88);
        v101 = v114;
        v102 = v115;
        sub_100022F20(v113, v114);
        (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v102 + 32))(v116, 1, v101, v102);
        sub_100023CAC(v113);
      }
      else
      {
        sub_1000202F0((uint64_t)&v109, &qword_100126F88);
      }
LABEL_45:
      sub_10002A694((uint64_t)&v109);
      if (*((_QWORD *)&v110 + 1))
      {
        sub_10002E424((uint64_t)&v109, (uint64_t)v113);
        sub_1000202F0((uint64_t)&v109, &qword_100126F88);
        v76 = v114;
        v77 = v115;
        sub_100022F20(v113, v114);
        (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v77 + 32))(&v118, 1, v76, v77);

        sub_10002300C(v116);
        sub_10002300C(&v118);

        sub_100023CAC(v113);
      }
      else
      {

        sub_10002300C(v116);
        sub_10002300C(&v118);

        sub_1000202F0((uint64_t)&v109, &qword_100126F88);
      }
      v17 = 1;
      break;
    default:
      goto LABEL_33;
  }
  return v17 & 1;
}

void sub_10002D420(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  char **v10;
  id v11;
  id v12;
  id v13;
  Class isa;
  id v15;
  void *v16;
  uint64_t v17;
  void *ObjCClassFromMetadata;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47[3];
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[3];
  uint64_t v51;
  _QWORD v52[8];
  id v53;

  v4 = type metadata accessor for KTSWDB.SignedLogHead(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002B0A0(a1);
  if (v2)
    return;
  v7 = ConsistencyProofResponse.keyBag.getter();
  if (!v7)
  {
    v20 = sub_10002E13C();
    v21 = swift_allocError(&type metadata for ConsistencyProofResponseError, v20, 0, 0);
    *(_QWORD *)v22 = 1;
    *(_BYTE *)(v22 + 8) = 0x80;
    swift_willThrow(v21);
    return;
  }
  v8 = (void *)v7;
  v9 = objc_msgSend(v1, "logType");
  v10 = &selRef_tltKeyStore;
  if (v9 != 3)
    v10 = &selRef_appSthKeyStore;
  v11 = objc_msgSend(v8, *v10);
  v12 = objc_allocWithZone((Class)TransparencyConsistencyProofVerifier);
  v53 = v11;
  v13 = objc_msgSend(v12, "initWithTrustedKeyStore:", v11);
  objc_msgSend(a1, "setVerifier:", v13);

  ConsistencyProofResponse.startRevision.getter();
  isa = Int64._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(a1, "setStartRevision:", isa);

  objc_msgSend(a1, "setForwards:", 0);
  v15 = objc_msgSend(a1, "startSlh");
  if (!v15)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return;
  }
  v16 = v15;
  v17 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v17);
  v19 = objc_msgSend(ObjCClassFromMetadata, "signedTypeWithObject:", v16);

  sub_100053F40((uint64_t)v50);
  v23 = objc_msgSend(a1, "endSlh");
  if (!v23)
    goto LABEL_23;
  v24 = v23;
  v25 = objc_msgSend(ObjCClassFromMetadata, "signedTypeWithObject:", v23);

  sub_100053F40((uint64_t)v52);
  sub_10002A694((uint64_t)&v43);
  if (!*((_QWORD *)&v44 + 1))
  {
    sub_1000202F0((uint64_t)&v43, &qword_100126F88);
    sub_10004BAB0();
LABEL_17:

    sub_10002300C(v50);
    sub_10002300C(v52);

    return;
  }
  sub_10002E424((uint64_t)&v43, (uint64_t)v47);
  sub_1000202F0((uint64_t)&v43, &qword_100126F88);
  v26 = v48;
  v27 = v49;
  sub_100022F20(v47, v48);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v27 + 64))(v52, v26, v27);
  v28 = *v6;
  sub_100023798((uint64_t)v6);
  sub_100023CAC(v47);
  sub_10004BAB0();
  if (v28 != 1)
    goto LABEL_17;
  if (qword_10012B5D0 != -1)
    swift_once(&qword_10012B5D0, sub_100029AE0);
  v29 = type metadata accessor for Logger(0);
  sub_100020804(v29, (uint64_t)qword_100131440);
  sub_10002304C(v50);
  v30 = sub_10002304C(v50);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v47[0] = v34;
    *(_DWORD *)v33 = 136315138;
    v42 = v33 + 4;
    v43 = v50[0];
    v44 = v50[1];
    v45 = v50[2];
    v46 = v51;
    v35 = sub_100023710();
    v36 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v35);
    v38 = v37;
    *(_QWORD *)&v43 = sub_1000230D0(v36, v37, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 8, v42, v33 + 12);
    swift_bridgeObjectRelease(v38);
    sub_10002300C(v50);
    sub_10002300C(v50);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Verified consistency for %s", v33, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    sub_10002300C(v50);
    sub_10002300C(v50);
  }

  sub_10002A694((uint64_t)&v43);
  if (*((_QWORD *)&v44 + 1))
  {
    sub_10002E424((uint64_t)&v43, (uint64_t)v47);
    sub_1000202F0((uint64_t)&v43, &qword_100126F88);
    v39 = v48;
    v40 = v49;
    sub_100022F20(v47, v48);
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v40 + 32))(v50, 1, v39, v40);

    sub_10002300C(v50);
    sub_10002300C(v52);

    sub_100023CAC(v47);
  }
  else
  {

    sub_10002300C(v50);
    sub_10002300C(v52);

    sub_1000202F0((uint64_t)&v43, &qword_100126F88);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ConsistencyProofResponse.verify()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  id v11;
  void *v12;
  unint64_t *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  unint64_t *v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v36;
  void *v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _OWORD v48[2];
  __int128 v49;
  uint64_t v50;
  unint64_t v51;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for NSFastEnumerationIterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v0, "status") != 1)
  {
    v15 = objc_msgSend(v0, "status");
    v16 = sub_10002E13C();
    v17 = swift_allocError(&type metadata for ConsistencyProofResponseError, v16, 0, 0);
    *(_QWORD *)v18 = v15;
    *(_BYTE *)(v18 + 8) = 0;
LABEL_13:
    swift_willThrow(v17);
    return;
  }
  v45 = v5;
  v46 = v4;
  v8 = ConsistencyProofResponse.expectedLogType.getter();
  if ((v8 & 0x100000000) != 0 || objc_msgSend(v0, "logType") != (_DWORD)v8)
  {
    v19 = objc_msgSend(v0, "logType");
    v20 = ConsistencyProofResponse.expectedLogType.getter();
    v21 = v19 | (v20 << 32);
    v22 = BYTE4(v20) & 1 | 0x20;
LABEL_12:
    v23 = sub_10002E13C();
    v17 = swift_allocError(&type metadata for ConsistencyProofResponseError, v23, 0, 0);
    *(_QWORD *)v24 = v21;
    *(_BYTE *)(v24 + 8) = v22;
    goto LABEL_13;
  }
  if (objc_msgSend(v0, "logType") != 3)
  {
    v9 = ConsistencyProofResponse.expectedApplication.getter();
    v10 = objc_msgSend(v3, "application");
    if ((v9 & 0x100000000) != 0 || v10 != (_DWORD)v9)
    {
      v38 = objc_msgSend(v3, "application");
      v39 = ConsistencyProofResponse.expectedApplication.getter();
      v21 = v38 | (v39 << 32);
      v22 = BYTE4(v39) & 1 | 0x40;
      goto LABEL_12;
    }
  }
  v51 = (unint64_t)_swiftEmptyArrayStorage;
  v11 = objc_msgSend(v3, "responsesArray");
  if (!v11)
  {
    __break(1u);
    return;
  }
  v12 = v11;
  NSArray.makeIterator()();

  NSFastEnumerationIterator.next()(&v49);
  if (!v50)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v46);
    v33 = v51;
    if (v51 >> 62)
      goto LABEL_38;
    v34 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v34)
    {
LABEL_31:
      swift_bridgeObjectRelease(v33);
      return;
    }
    while (1)
    {
      while (__OFSUB__(v34--, 1))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        if (v33 < 0)
          v43 = v33;
        else
          v43 = v33 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v33);
        v34 = _CocoaArrayWrapper.endIndex.getter(v43);
        swift_bridgeObjectRelease(v33);
        if (!v34)
          goto LABEL_31;
      }
      if ((v33 & 0xC000000000000001) != 0)
      {
        v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v33);
        goto LABEL_29;
      }
      if ((v34 & 0x8000000000000000) != 0)
        goto LABEL_36;
      if (v34 >= *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_37;
      v36 = *(id *)(v33 + 32 + 8 * v34);
LABEL_29:
      v37 = v36;
      sub_10002D420(v36);

      if (v2 || !v34)
        goto LABEL_31;
    }
  }
  v13 = &qword_100126FA0;
  v14 = (char *)&type metadata for Any + 8;
  v44 = (char *)&type metadata for Any + 8;
  while (1)
  {
    sub_10002E1B0(&v49, v48);
    v26 = sub_10002E3EC(0, v13, &off_100104FA8);
    if (!swift_dynamicCast(&v47, v48, v14, v26, 6))
    {
      swift_bridgeObjectRelease(v51);
      v40 = sub_10002E13C();
      v41 = swift_allocError(&type metadata for ConsistencyProofResponseError, v40, 0, 0);
      *(_QWORD *)v42 = 2;
      *(_BYTE *)(v42 + 8) = 0x80;
      swift_willThrow(v41);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v46);
      return;
    }
    v27 = v47;
    v28 = sub_10002C1EC(v47);
    if (v1)
      break;
    if ((v28 & 1) == 0)
    {
      v29 = v13;
      v30 = v27;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v32 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v31 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v32 >= v31 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
      specialized Array._endMutation()(v25);
      v13 = v29;
      v14 = v44;
    }

    NSFastEnumerationIterator.next()(&v49);
    if (!v50)
      goto LABEL_21;
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v46);
  swift_bridgeObjectRelease(v51);
}

unint64_t sub_10002E13C()
{
  unint64_t result;

  result = qword_100126F98;
  if (!qword_100126F98)
  {
    result = swift_getWitnessTable(&unk_1000DBDA0, &type metadata for ConsistencyProofResponseError);
    atomic_store(result, (unint64_t *)&qword_100126F98);
  }
  return result;
}

BOOL sub_10002E180(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_10002E194@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_10002E1A4(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_OWORD *sub_10002E1B0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for ConsistencyProofResponseError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConsistencyProofResponseError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 124);
  v3 = ((*(unsigned __int8 *)(a1 + 8) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 8) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConsistencyProofResponseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_BYTE *)(result + 8) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_10002E280(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = (char)v1;
  v3 = v1 >> 5;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_10002E2A0(uint64_t result)
{
  *(_BYTE *)(result + 8) &= 0x1Fu;
  return result;
}

uint64_t sub_10002E2B0(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 1 | (32 * a2);
  }
  else
  {
    *(_QWORD *)result = a2 - 4;
    *(_BYTE *)(result + 8) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConsistencyProofResponseError()
{
  return &type metadata for ConsistencyProofResponseError;
}

unint64_t sub_10002E2EC()
{
  unint64_t result;

  result = qword_100126FC0;
  if (!qword_100126FC0)
  {
    result = swift_getWitnessTable(&unk_1000DBE28, &type metadata for ConsistencyProofResponseError);
    atomic_store(result, (unint64_t *)&qword_100126FC0);
  }
  return result;
}

id sub_10002E330()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v5;
  id v7;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = 0;
  v2 = objc_msgSend(v0, "initWithData:error:", isa, &v7);

  v3 = v7;
  if (v2)
  {
    v4 = v7;
  }
  else
  {
    v5 = v7;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_10002E3EC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10002E424(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *sub_10002E470()
{
  return &qword_100126FD0;
}

uint64_t sub_10002E47C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_100126FD0, v2, 0, 0);
  v0 = qword_100126FD0;
  swift_bridgeObjectRetain(off_100126FD8);
  return v0;
}

uint64_t sub_10002E4CC(uint64_t a1, char *a2)
{
  char *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_100126FD0, v6, 1, 0);
  v4 = off_100126FD8;
  qword_100126FD0 = a1;
  off_100126FD8 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10002E524(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_100126FD0, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10002E564(unsigned __int8 a1)
{
  return a1 + 1;
}

BOOL sub_10002E570(char a1, char a2)
{
  return a1 == a2;
}

void sub_10002E580(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_10002E5A4(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int sub_10002E5E8()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10002E62C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10002E654(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10002E694(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100032434();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10002E6BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100032434();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002E6E8()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

uint64_t sub_10002E6F4()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012B968 = result;
  return result;
}

uint64_t sub_10002E724()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012B978 = result;
  return result;
}

uint64_t sub_10002E754()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012B988 = result;
  return result;
}

uint64_t sub_10002E784()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012B998 = result;
  return result;
}

uint64_t sub_10002E7B4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_100131458);
  sub_100020804(v0, (uint64_t)qword_100131458);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0xD000000000000014, 0x80000001000E1AA0);
}

uint64_t sub_10002E834()
{
  uint64_t v0;

  if (qword_10012B9A0 != -1)
    swift_once(&qword_10012B9A0, sub_10002E7B4);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_100131458);
}

uint64_t sub_10002E87C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012B9A0 != -1)
    swift_once(&qword_10012B9A0, sub_10002E7B4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131458);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t MilestoneConsistency.startSlh.getter()
{
  void *v0;
  const void *v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (qword_10012B970 != -1)
    swift_once(&qword_10012B970, sub_10002E724);
  v1 = (const void *)(qword_10012B978 + 16);
  swift_beginAccess(qword_10012B978 + 16, v7, 32, 0);
  v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess(v7);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100029C38((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v7, &qword_100126F70);
    return 0;
  }
}

void MilestoneConsistency.startSlh.setter(void *a1)
{
  sub_10002EBC4(a1, &qword_10012B970, &qword_10012B978, (uint64_t)sub_10002E724);
}

void (*MilestoneConsistency.startSlh.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = MilestoneConsistency.startSlh.getter();
  return sub_10002EA70;
}

void sub_10002EA70(uint64_t a1, char a2)
{
  sub_10002ECC0(a1, a2, &qword_10012B970, &qword_10012B978, (uint64_t)sub_10002E724);
}

uint64_t MilestoneConsistency.verifier.getter()
{
  void *v0;
  const void *v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (qword_10012B960 != -1)
    swift_once(&qword_10012B960, sub_10002E6F4);
  v1 = (const void *)(qword_10012B968 + 16);
  swift_beginAccess(qword_10012B968 + 16, v7, 32, 0);
  v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess(v7);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100029C38((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10002E3EC(0, &qword_100126FE0, &off_100105108);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v7, &qword_100126F70);
    return 0;
  }
}

void MilestoneConsistency.verifier.setter(void *a1)
{
  sub_10002EBC4(a1, &qword_10012B960, &qword_10012B968, (uint64_t)sub_10002E6F4);
}

void sub_10002EBC4(void *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  void *v4;
  const void *v7;
  id v8;
  _BYTE v9[24];

  if (*a2 != -1)
    swift_once(a2, a4);
  v7 = (const void *)(*a3 + 16);
  swift_beginAccess(v7, v9, 32, 0);
  v8 = a1;
  objc_setAssociatedObject(v4, v7, v8, (void *)1);
  swift_endAccess(v9);

}

void (*MilestoneConsistency.verifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = MilestoneConsistency.verifier.getter();
  return sub_10002ECA4;
}

void sub_10002ECA4(uint64_t a1, char a2)
{
  sub_10002ECC0(a1, a2, &qword_10012B960, &qword_10012B968, (uint64_t)sub_10002E6F4);
}

void sub_10002ECC0(uint64_t a1, char a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  const void *v13;
  id v14;
  id v15;
  void *v16;
  const void *v17;

  v8 = *(_QWORD **)a1;
  v9 = *(void **)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    v10 = *a3;
    v11 = v9;
    if (v10 != -1)
      swift_once(a3, a5);
    v12 = (void *)v8[4];
    v13 = (const void *)(*a4 + 16);
    swift_beginAccess(v13, v8, 32, 0);
    v14 = v11;
    objc_setAssociatedObject(v12, v13, v14, (void *)1);
    swift_endAccess(v8);

    v15 = (id)v8[3];
  }
  else
  {
    if (*a3 != -1)
      swift_once(a3, a5);
    v16 = (void *)v8[4];
    v17 = (const void *)(*a4 + 16);
    swift_beginAccess(v17, v8, 32, 0);
    v15 = v9;
    objc_setAssociatedObject(v16, v17, v15, (void *)1);
    swift_endAccess(v8);

  }
  free(v8);
}

double sub_10002EDE8@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v3;
  id v4;
  uint64_t v5;
  double result;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  if (qword_10012B980 != -1)
    swift_once(&qword_10012B980, sub_10002E754);
  v3 = (const void *)(qword_10012B988 + 16);
  swift_beginAccess(qword_10012B988 + 16, v7, 32, 0);
  v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess(v7);
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v7, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100029C38((uint64_t)v7, (uint64_t)v8);
  if (!v9)
  {
    sub_1000202F0((uint64_t)v8, &qword_100126F70);
    goto LABEL_10;
  }
  v5 = sub_10001D138(&qword_100126F80);
  if ((swift_dynamicCast(a1, v8, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
  {
LABEL_10:
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10002EF04(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  _QWORD v12[3];
  uint64_t v13;

  if (qword_10012B980 != -1)
    swift_once(&qword_10012B980, sub_10002E754);
  v3 = qword_10012B988;
  sub_10002AC5C(a1, (uint64_t)v12, &qword_100126F88);
  v4 = v13;
  if (v13)
  {
    v5 = sub_100022F20(v12, v13);
    v6 = *(_QWORD *)(v4 - 8);
    __chkstk_darwin(v5);
    v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v8, v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    sub_100023CAC(v12);
  }
  else
  {
    v9 = 0;
  }
  swift_beginAccess(v3 + 16, v12, 32, 0);
  objc_setAssociatedObject(v1, (const void *)(v3 + 16), v9, (void *)1);
  swift_endAccess(v12);
  swift_unknownObjectRelease(v9);
  return sub_1000202F0(a1, &qword_100126F88);
}

void (*sub_10002F05C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_10002EDE8((uint64_t)v3);
  return sub_10002F0A8;
}

void sub_10002F0A8(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*a1, (uint64_t)v2 + 40, &qword_100126F88);
    sub_10002EF04((uint64_t)v2 + 40);
    sub_1000202F0((uint64_t)v2, &qword_100126F88);
  }
  else
  {
    sub_10002EF04(*a1);
  }
  free(v2);
}

uint64_t MilestoneConsistency.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  if (qword_10012B990 != -1)
    swift_once(&qword_10012B990, sub_10002E784);
  v3 = (const void *)(qword_10012B998 + 16);
  swift_beginAccess(qword_10012B998 + 16, v9, 32, 0);
  v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess(v9);
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100029C38((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_1000202F0((uint64_t)v10, &qword_100126F70);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t MilestoneConsistency.receiptTime.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  _BYTE v13[24];

  v2 = v1;
  v4 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10012B990 != -1)
    swift_once(&qword_10012B990, sub_10002E784);
  v7 = qword_10012B998;
  sub_10002AC5C(a1, (uint64_t)v6, &qword_100127710);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v6, v8);
  }
  swift_beginAccess(v7 + 16, v13, 32, 0);
  objc_setAssociatedObject(v2, (const void *)(v7 + 16), isa, (void *)0x303);
  swift_endAccess(v13);
  swift_unknownObjectRelease(isa);
  return sub_1000202F0(a1, &qword_100127710);
}

void (*MilestoneConsistency.receiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100127710) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  MilestoneConsistency.receiptTime.getter((uint64_t)v4);
  return sub_10002F41C;
}

void sub_10002F41C(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*(_QWORD *)(a1 + 16), (uint64_t)v2, &qword_100127710);
    MilestoneConsistency.receiptTime.setter((uint64_t)v2);
    sub_1000202F0((uint64_t)v3, &qword_100127710);
  }
  else
  {
    MilestoneConsistency.receiptTime.setter(*(_QWORD *)(a1 + 16));
  }
  free(v3);
  free(v2);
}

id MilestoneConsistency.endSlh.getter()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;

  v1 = MilestoneConsistency.verifier.getter();
  if (!v1)
    return 0;
  v2 = (void *)v1;
  v3 = objc_msgSend(v0, "milestoneSlh");
  if (!v3)
  {

    return 0;
  }
  v4 = v3;
  v5 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "signedTypeWithObject:", v4);
  v7 = objc_msgSend(v2, "trustedKeyStore");
  v8 = objc_msgSend(v7, "signatureVerifier");

  objc_msgSend(v6, "setVerifier:", v8);
  return v6;
}

char *sub_10002F588()
{
  uint8_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int (**v9)(_QWORD, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  id v32;
  unsigned int (**v33)(_QWORD, _QWORD, _QWORD);
  uint8_t *v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int (**v45)(_QWORD, _QWORD, _QWORD);
  uint8_t *v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  id v56;
  id v57;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  uint64_t v61;
  _QWORD *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD v83[2];
  _QWORD *v84;
  uint64_t v85;
  id v86;
  id v87;
  id v88;
  uint8_t *v89;
  uint8_t *v90;
  unsigned int (**v91)(_QWORD, _QWORD, _QWORD);
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96[3];
  uint64_t v97;
  _QWORD *v98;
  _OWORD v99[3];
  uint64_t v100;
  _OWORD v101[3];
  uint64_t v102;
  char v103;
  uint64_t v104;
  id v105;
  uint64_t v106;

  v2 = sub_10001D138(&qword_100127710);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v83 - v6;
  v8 = type metadata accessor for Date(0);
  v9 = *(unsigned int (***)(_QWORD, _QWORD, _QWORD))(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v83 - v13;
  v15 = (void *)MilestoneConsistency.verifier.getter();
  if (v15)
  {
    v105 = v15;
    v16 = MilestoneConsistency.startSlh.getter();
    if (v16)
    {
      v17 = (void *)v16;
      v91 = v9;
      if (-[uint8_t hasMilestoneSlh](v0, "hasMilestoneSlh")
        && (v18 = -[uint8_t milestoneSlh](v0, "milestoneSlh")) != 0)
      {
        v19 = v18;
        v89 = (uint8_t *)v8;
        v90 = v0;
        v20 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
        v21 = objc_msgSend((id)swift_getObjCClassFromMetadata(v20), "signedTypeWithObject:", v19);
        sub_100053F40((uint64_t)v99);
        if (v1)
        {

        }
        else
        {
          v88 = v17;
          v87 = v19;
          sub_100053F40((uint64_t)v101);
          v86 = v21;
          sub_10002EDE8((uint64_t)&v92);
          v32 = v88;
          if (*((_QWORD *)&v93 + 1))
          {
            sub_10002E424((uint64_t)&v92, (uint64_t)v96);
            sub_1000202F0((uint64_t)&v92, &qword_100126F88);
            v84 = v98;
            v85 = v97;
            v83[1] = sub_100022F20(v96, v97);
            MilestoneConsistency.receiptTime.getter((uint64_t)v7);
            v33 = v91;
            v34 = v89;
            if (((unsigned int (**)(char *, uint64_t, uint8_t *))v91)[6](v7, 1, v89) == 1)
            {
              static Date.now.getter();
              sub_1000202F0((uint64_t)v7, &qword_100127710);
            }
            else
            {
              ((unsigned int (**)(char *, char *, uint8_t *))v33)[4](v14, v7, v34);
            }
            v37 = objc_msgSend(v88, "data");
            v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
            v40 = v39;

            v41 = sub_100054114();
            ((void (*)(_OWORD *, char *, uint64_t, unint64_t, unint64_t, uint64_t))v84[3])(v99, v14, v38, v40, v41, v85);
            ((void (*)(char *, uint8_t *))v91[1])(v14, v89);
            sub_100022F44(v38, v40);
            sub_100023CAC(v96);
            v32 = v88;
          }
          else
          {
            sub_1000202F0((uint64_t)&v92, &qword_100126F88);
          }
          sub_10002EDE8((uint64_t)&v92);
          if (*((_QWORD *)&v93 + 1))
          {
            sub_10002E424((uint64_t)&v92, (uint64_t)v96);
            sub_1000202F0((uint64_t)&v92, &qword_100126F88);
            v35 = v97;
            v36 = v98;
            sub_100022F20(v96, v97);
            ((void (*)(_OWORD *, uint64_t, uint64_t, _QWORD *))v36[7])(v99, 1, v35, v36);
            sub_100023CAC(v96);
          }
          else
          {
            sub_1000202F0((uint64_t)&v92, &qword_100126F88);
          }
          sub_10002EDE8((uint64_t)&v92);
          if (*((_QWORD *)&v93 + 1))
          {
            sub_10002E424((uint64_t)&v92, (uint64_t)v96);
            sub_1000202F0((uint64_t)&v92, &qword_100126F88);
            v42 = v97;
            v43 = (uint64_t)v98;
            v44 = sub_100022F20(v96, v97);
            MilestoneConsistency.receiptTime.getter((uint64_t)v5);
            v45 = v91;
            v46 = v89;
            v47 = ((unsigned int (**)(char *, uint64_t, uint8_t *))v91)[6](v5, 1, v89);
            v85 = v43;
            v84 = v44;
            if (v47 == 1)
            {
              static Date.now.getter();
              sub_1000202F0((uint64_t)v5, &qword_100127710);
            }
            else
            {
              ((unsigned int (**)(char *, char *, uint8_t *))v45)[4](v12, v5, v46);
            }
            v50 = objc_msgSend(v86, "data");
            v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v50);
            v53 = v52;

            v54 = sub_100054114();
            (*(void (**)(_OWORD *, char *, uint64_t, unint64_t, unint64_t, uint64_t))(v85 + 24))(v101, v12, v51, v53, v54, v42);
            ((void (*)(char *, uint8_t *))v91[1])(v12, v89);
            sub_100022F44(v51, v53);
            sub_100023CAC(v96);
            v32 = v88;
          }
          else
          {
            sub_1000202F0((uint64_t)&v92, &qword_100126F88);
          }
          sub_10002EDE8((uint64_t)&v92);
          if (*((_QWORD *)&v93 + 1))
          {
            sub_10002E424((uint64_t)&v92, (uint64_t)v96);
            sub_1000202F0((uint64_t)&v92, &qword_100126F88);
            v48 = v97;
            v49 = v98;
            sub_100022F20(v96, v97);
            ((void (*)(_OWORD *, uint64_t, uint64_t, _QWORD *))v49[7])(v101, 1, v48, v49);
            v55 = v32;
            sub_100023CAC(v96);
          }
          else
          {
            v55 = v32;
            sub_1000202F0((uint64_t)&v92, &qword_100126F88);
          }
          v56 = objc_msgSend(v105, "trustedKeyStore");
          v57 = objc_msgSend(v56, "signatureVerifier");

          objc_msgSend(v86, "setVerifier:", v57);
          v91 = (unsigned int (**)(_QWORD, _QWORD, _QWORD))v57;
          objc_msgSend(v55, "setVerifier:", v57);
          v12 = (char *)sub_10004BAB0();
          sub_10002EDE8((uint64_t)&v92);
          if (*((_QWORD *)&v93 + 1))
          {
            sub_10002E424((uint64_t)&v92, (uint64_t)v96);
            sub_1000202F0((uint64_t)&v92, &qword_100126F88);
            v58 = v97;
            v59 = v98;
            sub_100022F20(v96, v97);
            ((void (*)(_OWORD *, char *, uint64_t, _QWORD *))v59[6])(v99, v12, v58, v59);
            sub_100023CAC(v96);
          }
          else
          {
            sub_1000202F0((uint64_t)&v92, &qword_100126F88);
          }
          v60 = v87;
          if (v12 == (char *)1)
          {
            if (qword_10012B9A0 != -1)
              swift_once(&qword_10012B9A0, sub_10002E7B4);
            v61 = type metadata accessor for Logger(0);
            sub_100020804(v61, (uint64_t)qword_100131458);
            sub_10002304C(v99);
            v62 = sub_10002304C(v99);
            v63 = Logger.logObject.getter(v62);
            v64 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v63, v64))
            {
              v65 = (uint8_t *)swift_slowAlloc(12, -1);
              v66 = swift_slowAlloc(32, -1);
              *(_DWORD *)v65 = 136315138;
              v89 = v65 + 4;
              v92 = v99[0];
              v93 = v99[1];
              v94 = v99[2];
              v95 = v100;
              v96[0] = v66;
              v67 = sub_100023710();
              v68 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v67);
              v70 = v69;
              *(_QWORD *)&v92 = sub_1000230D0(v68, v69, v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, (char *)&v92 + 8, v89, v65 + 12);
              swift_bridgeObjectRelease(v70);
              sub_10002300C(v99);
              sub_10002300C(v99);
              _os_log_impl((void *)&_mh_execute_header, v63, v64, "Verified signature for %s", v65, 0xCu);
              swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v66, -1, -1);
              swift_slowDealloc(v65, -1, -1);
            }
            else
            {
              sub_10002300C(v99);
              sub_10002300C(v99);
            }

            v12 = (char *)sub_10004BAB0();
            sub_10002EDE8((uint64_t)&v92);
            if (*((_QWORD *)&v93 + 1))
            {
              sub_10002E424((uint64_t)&v92, (uint64_t)v96);
              sub_1000202F0((uint64_t)&v92, &qword_100126F88);
              v72 = v97;
              v73 = v98;
              sub_100022F20(v96, v97);
              ((void (*)(_OWORD *, char *, uint64_t, _QWORD *))v73[6])(v101, v12, v72, v73);
              sub_100023CAC(v96);
            }
            else
            {
              sub_1000202F0((uint64_t)&v92, &qword_100126F88);
            }
            sub_10002304C(v101);
            v74 = sub_10002304C(v101);
            v75 = Logger.logObject.getter(v74);
            v76 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v75, v76))
            {
              v77 = (uint8_t *)swift_slowAlloc(12, -1);
              v78 = swift_slowAlloc(32, -1);
              *(_DWORD *)v77 = 136315138;
              v90 = v77 + 4;
              v92 = v101[0];
              v93 = v101[1];
              v94 = v101[2];
              v95 = v102;
              v96[0] = v78;
              v79 = sub_100023710();
              v80 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v79);
              v82 = v81;
              *(_QWORD *)&v92 = sub_1000230D0(v80, v81, v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, (char *)&v92 + 8, v90, v77 + 12);
              swift_bridgeObjectRelease(v82);
              sub_10002300C(v101);
              sub_10002300C(v101);
              _os_log_impl((void *)&_mh_execute_header, v75, v76, "Verified signature for %s", v77, 0xCu);
              swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v78, -1, -1);
              swift_slowDealloc(v77, -1, -1);

              sub_10002300C(v101);
              sub_10002300C(v99);

              v71 = &v104;
            }
            else
            {

              sub_10002300C(v99);
              sub_10002300C(v101);
              sub_10002300C(v101);
              sub_10002300C(v101);

              v71 = &v106;
            }
          }
          else
          {

            sub_10002300C(v101);
            sub_10002300C(v99);

            v71 = (uint64_t *)&v103;
          }

        }
      }
      else
      {
        v25 = sub_10002308C();
        v26 = swift_allocError(&type metadata for MilestoneConsistencyError, v25, 0, 0);
        *v27 = 2;
        swift_willThrow(v26);

      }
    }
    else
    {
      v28 = sub_10002308C();
      v29 = swift_allocError(&type metadata for MilestoneConsistencyError, v28, 0, 0);
      *v30 = 1;
      swift_willThrow(v29);

    }
  }
  else
  {
    v22 = sub_10002308C();
    v23 = swift_allocError(&type metadata for MilestoneConsistencyError, v22, 0, 0);
    *v24 = 0;
    swift_willThrow(v23);
  }
  return v12;
}

uint64_t sub_1000309E8(void *a1, void *a2)
{
  return sub_100031FC0(a1, a2);
}

void sub_1000309FC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  NSObject *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  id v69;
  uint8_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  id v93;
  id v94;
  void *v95;
  unint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  id v104;
  char **v105;
  char **v106;
  uint64_t v107;
  _QWORD *v108;
  NSObject *v109;
  os_log_type_t v110;
  NSObject *v111;
  uint8_t *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  NSObject *v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  const char *v141;
  id v142;
  id v143;
  id v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  id v149;
  id v150;
  void *v151;
  id v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  _QWORD v170[9];
  _QWORD *v171;

  v2 = type metadata accessor for KTSWDB.SignedLogHead(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v146 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = MilestoneConsistency.verifier.getter();
  if (!v5)
  {
    v15 = sub_10002308C();
    v16 = swift_allocError(&type metadata for MilestoneConsistencyError, v15, 0, 0);
    *v17 = 0;
    swift_willThrow(v16);
    return;
  }
  v6 = (void *)v5;
  v7 = MilestoneConsistency.startSlh.getter();
  if (!v7)
  {
    v21 = sub_10002308C();
    v22 = swift_allocError(&type metadata for MilestoneConsistencyError, v21, 0, 0);
    *v23 = 1;
    swift_willThrow(v22);

    return;
  }
  v8 = (void *)v7;
  if (!objc_msgSend(v0, "hasMilestoneSlh")
    || (v9 = objc_msgSend(v0, "milestoneSlh")) == 0)
  {
    v18 = sub_10002308C();
    v19 = swift_allocError(&type metadata for MilestoneConsistencyError, v18, 0, 0);
    *v20 = 2;
    swift_willThrow(v19);

    return;
  }
  v10 = v9;
  v171 = v0;
  v11 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "signedTypeWithObject:", v10);
  v13 = objc_msgSend(v6, "trustedKeyStore");
  v14 = objc_msgSend(v13, "signatureVerifier");

  objc_msgSend(v12, "setVerifier:", v14);
  objc_msgSend(v8, "setVerifier:", v14);
  sub_100053F40((uint64_t)&v162);
  if (v1)
  {

    return;
  }
  v152 = v6;
  sub_100053F40((uint64_t)&v166);
  v150 = v14;
  v151 = v12;
  v149 = v10;
  if (!(_QWORD)v164)
  {
    sub_10002EDE8((uint64_t)&v154);
    if (*((_QWORD *)&v155 + 1))
    {
      sub_10002E424((uint64_t)&v154, (uint64_t)&v158);
      sub_1000202F0((uint64_t)&v154, &qword_100126F88);
      v25 = v159;
      v24 = v160;
      sub_100022F20(&v158, v159);
      (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v24 + 32))(&v162, 1, v25, v24);
      sub_100023CAC(&v158);
    }
    else
    {
      sub_1000202F0((uint64_t)&v154, &qword_100126F88);
    }
    if (qword_10012B9A0 != -1)
      swift_once(&qword_10012B9A0, sub_10002E7B4);
    v26 = type metadata accessor for Logger(0);
    sub_100020804(v26, (uint64_t)qword_100131458);
    sub_10002304C(&v162);
    v27 = sub_10002304C(&v162);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter();
    v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      LODWORD(v147) = v30;
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v146 = v32;
      *(_DWORD *)v31 = 136315138;
      v154 = v162;
      v155 = v163;
      v156 = v164;
      v157 = v165;
      *(_QWORD *)&v158 = v32;
      v33 = sub_100023710();
      v34 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v33);
      v36 = v35;
      *(_QWORD *)&v154 = sub_1000230D0(v34, v35, (uint64_t *)&v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v36);
      sub_10002300C(&v162);
      sub_10002300C(&v162);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v147, "Verified consistency for %s", v31, 0xCu);
      v37 = v146;
      swift_arrayDestroy(v146, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      sub_10002300C(&v162);
      sub_10002300C(&v162);
    }

  }
  sub_10002EDE8((uint64_t)&v154);
  v38 = *((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    sub_10002E424((uint64_t)&v154, (uint64_t)&v158);
    sub_1000202F0((uint64_t)&v154, &qword_100126F88);
    v39 = v159;
    v40 = v160;
    sub_100022F20(&v158, v159);
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v40 + 64))(&v162, v39, v40);
    v41 = v8;
    v42 = *v4;
    sub_100023798((uint64_t)v4);
    sub_100023CAC(&v158);
  }
  else
  {
    v41 = v8;
    sub_1000202F0((uint64_t)&v154, &qword_100126F88);
    v42 = 0;
  }
  v43 = objc_msgSend(v171, "proofHashesArray");
  v148 = v41;
  if (v43)
  {
    v44 = v43;
    *(_QWORD *)&v154 = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)(v43, &v154, &type metadata for Data);

    v45 = v154;
    if ((_QWORD)v154)
    {
      if (*(_QWORD *)(v154 + 16))
      {
        v47 = sub_10004BAF8(v154, (uint64_t)v41, (uint64_t)v151);
        swift_bridgeObjectRelease(v45);
        v48 = v150;
        goto LABEL_29;
      }
      swift_bridgeObjectRelease(v154);
    }
  }
  v46 = sub_100031FC0(v41, v151);
  v48 = v150;
  v47 = (id)v46;
LABEL_29:
  if (v47 == (id)1)
  {
    if (v38)
    {
      switch(v42)
      {
        case 0:
        case 3:
          if (qword_10012B9A0 != -1)
            swift_once(&qword_10012B9A0, sub_10002E7B4);
          v49 = type metadata accessor for Logger(0);
          sub_100020804(v49, (uint64_t)qword_100131458);
          sub_10002304C(&v166);
          v50 = sub_10002304C(&v166);
          v51 = Logger.logObject.getter(v50);
          v52 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v51, v52))
          {
            v53 = (uint8_t *)swift_slowAlloc(12, -1);
            v54 = swift_slowAlloc(32, -1);
            *(_DWORD *)v53 = 136315138;
            v154 = v166;
            v155 = v167;
            v156 = v168;
            v157 = v169;
            *(_QWORD *)&v158 = v54;
            v55 = sub_100023710();
            v56 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v55);
            v58 = v57;
            *(_QWORD *)&v154 = sub_1000230D0(v56, v57, (uint64_t *)&v158);
            v48 = v150;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v53 + 4, v53 + 12);
            swift_bridgeObjectRelease(v58);
            sub_10002300C(&v166);
            sub_10002300C(&v166);
            _os_log_impl((void *)&_mh_execute_header, v51, v52, "Verified consistency for %s following split", v53, 0xCu);
            swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v54, -1, -1);
            swift_slowDealloc(v53, -1, -1);
          }
          else
          {
            sub_10002300C(&v166);
            sub_10002300C(&v166);
          }

          v104 = v149;
          v105 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
          v106 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
          sub_10002EDE8((uint64_t)&v154);
          if (*((_QWORD *)&v155 + 1))
            goto LABEL_74;
          sub_1000202F0((uint64_t)&v154, &qword_100126F88);
          break;
        case 1:
          if (qword_10012B9A0 != -1)
            swift_once(&qword_10012B9A0, sub_10002E7B4);
          v107 = type metadata accessor for Logger(0);
          sub_100020804(v107, (uint64_t)qword_100131458);
          sub_10002304C(&v166);
          v108 = sub_10002304C(&v166);
          v109 = Logger.logObject.getter(v108);
          v110 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v109, v110))
          {
            v111 = v109;
            v112 = (uint8_t *)swift_slowAlloc(12, -1);
            v113 = swift_slowAlloc(32, -1);
            *(_DWORD *)v112 = 136315138;
            v154 = v166;
            v155 = v167;
            v156 = v168;
            v157 = v169;
            *(_QWORD *)&v158 = v113;
            v114 = sub_100023710();
            v115 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v114);
            v117 = v116;
            *(_QWORD *)&v154 = sub_1000230D0(v115, v116, (uint64_t *)&v158);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v112 + 4, v112 + 12);
            swift_bridgeObjectRelease(v117);
            sub_10002300C(&v166);
            sub_10002300C(&v166);
            _os_log_impl((void *)&_mh_execute_header, v111, v110, "Verified consistency for %s", v112, 0xCu);
            swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v113, -1, -1);
            swift_slowDealloc(v112, -1, -1);

          }
          else
          {
            sub_10002300C(&v166);
            sub_10002300C(&v166);

          }
          sub_10002EDE8((uint64_t)&v154);
          v105 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
          v106 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
          if (*((_QWORD *)&v155 + 1))
          {
LABEL_74:
            sub_10002E424((uint64_t)&v154, (uint64_t)&v158);
            sub_1000202F0((uint64_t)&v154, &qword_100126F88);
            v128 = v159;
            v129 = v160;
            sub_100022F20(&v158, v159);
            (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v129 + 32))(&v166, 1, v128, v129);
            sub_100023CAC(&v158);
          }
          else
          {
            sub_1000202F0((uint64_t)&v154, &qword_100126F88);
          }
          v104 = v149;
          v48 = v150;
          break;
        case 2:
          if (qword_10012B9A0 != -1)
            swift_once(&qword_10012B9A0, sub_10002E7B4);
          v118 = type metadata accessor for Logger(0);
          sub_100020804(v118, (uint64_t)qword_100131458);
          sub_10002304C(&v162);
          v119 = sub_10002304C(&v162);
          v120 = Logger.logObject.getter(v119);
          v121 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v120, v121))
          {
            v122 = (uint8_t *)swift_slowAlloc(12, -1);
            v123 = swift_slowAlloc(32, -1);
            *(_DWORD *)v122 = 136315138;
            v154 = v162;
            v155 = v163;
            v156 = v164;
            v157 = v165;
            *(_QWORD *)&v158 = v123;
            v124 = sub_100023710();
            v125 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v124);
            v127 = v126;
            *(_QWORD *)&v154 = sub_1000230D0(v125, v126, (uint64_t *)&v158);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v122 + 4, v122 + 12);
            swift_bridgeObjectRelease(v127);
            sub_10002300C(&v162);
            sub_10002300C(&v162);
            _os_log_impl((void *)&_mh_execute_header, v120, v121, "Consistency for start %s still pending due to disjoint proof", v122, 0xCu);
            swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v123, -1, -1);
            swift_slowDealloc(v122, -1, -1);
          }
          else
          {
            sub_10002300C(&v162);
            sub_10002300C(&v162);
          }

          sub_10002304C(&v166);
          v130 = sub_10002304C(&v166);
          v131 = Logger.logObject.getter(v130);
          v132 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v131, v132))
          {
            v133 = (uint8_t *)swift_slowAlloc(12, -1);
            v134 = swift_slowAlloc(32, -1);
            *(_DWORD *)v133 = 136315138;
            v154 = v166;
            v155 = v167;
            v156 = v168;
            v157 = v169;
            *(_QWORD *)&v158 = v134;
            v135 = sub_100023710();
            v136 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v135);
            v138 = v137;
            *(_QWORD *)&v154 = sub_1000230D0(v136, v137, (uint64_t *)&v158);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v133 + 4, v133 + 12);
            swift_bridgeObjectRelease(v138);
            sub_10002300C(&v166);
            sub_10002300C(&v166);
            _os_log_impl((void *)&_mh_execute_header, v131, v132, "Consistency for end %s still pending due to disjoint proof", v133, 0xCu);
            swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v134, -1, -1);
            swift_slowDealloc(v133, -1, -1);
          }
          else
          {
            sub_10002300C(&v166);
            sub_10002300C(&v166);
          }

          v139 = sub_10002308C();
          v60 = swift_allocError(&type metadata for MilestoneConsistencyError, v139, 0, 0);
          *v140 = 6;
          swift_willThrow(v60);
          v62 = 0;
          v48 = v150;
          goto LABEL_37;
        default:
          goto LABEL_56;
      }
    }
    else
    {
LABEL_56:
      if (qword_10012B9A0 != -1)
        swift_once(&qword_10012B9A0, sub_10002E7B4);
      v99 = type metadata accessor for Logger(0);
      v100 = sub_100020804(v99, (uint64_t)qword_100131458);
      v101 = Logger.logObject.getter(v100);
      v102 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v101, v102))
      {
        v103 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v103 = 0;
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "Unknown startSlh consistency verification state", v103, 2u);
        swift_slowDealloc(v103, -1, -1);
      }

      v104 = v149;
      v105 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
      v106 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
    }
    sub_10002EDE8((uint64_t)&v158);
    if (v159)
    {
      sub_100032478(&v158, (uint64_t)&v154);
      v141 = v105[461];
      v142 = v152;
      v143 = objc_msgSend(v152, v141);
      v144 = objc_msgSend(v143, v106[406]);

      v145 = v151;
      sub_100020BC4(&v154, (uint64_t)v151, (uint64_t)v144);
      sub_100023CAC(&v154);

      sub_10002300C(&v166);
LABEL_84:
      sub_10002300C(&v162);
      return;
    }

    sub_10002300C(&v166);
    sub_10002300C(&v162);
    sub_1000202F0((uint64_t)&v158, &qword_100126F88);
  }
  else
  {
    v59 = sub_10002308C();
    v60 = swift_allocError(&type metadata for MilestoneConsistencyError, v59, 0, 0);
    *v61 = 7;
    swift_willThrow(v60);
    v62 = 0;
LABEL_37:
    *(_QWORD *)&v158 = v60;
    swift_errorRetain(v60);
    v63 = sub_10001D138(&qword_100127AE0);
    if (!swift_dynamicCast(&v161, &v158, v63, &type metadata for MilestoneConsistencyError, 0)
      || v161 != 6)
    {
      swift_errorRelease();
      if (qword_10012B9A0 != -1)
        swift_once(&qword_10012B9A0, sub_10002E7B4);
      v76 = type metadata accessor for Logger(0);
      sub_100020804(v76, (uint64_t)qword_100131458);
      sub_10002304C(&v166);
      v77 = sub_10002304C(&v166);
      v78 = Logger.logObject.getter(v77);
      v79 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v78, v79))
      {
        v80 = (uint8_t *)swift_slowAlloc(12, -1);
        v81 = swift_slowAlloc(32, -1);
        v147 = 0;
        v82 = v81;
        *(_DWORD *)v80 = 136315138;
        v154 = v166;
        v155 = v167;
        v156 = v168;
        v157 = v169;
        *(_QWORD *)&v158 = v81;
        v83 = sub_100023710();
        v84 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v83);
        v86 = v85;
        *(_QWORD *)&v154 = sub_1000230D0(v84, v85, (uint64_t *)&v158);
        v48 = v150;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v80 + 4, v80 + 12);
        swift_bridgeObjectRelease(v86);
        sub_10002300C(&v166);
        sub_10002300C(&v166);
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Failed to verify consistency for %s", v80, 0xCu);
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        v87 = v82;
        v62 = v147;
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v80, -1, -1);
      }
      else
      {
        sub_10002300C(&v166);
        sub_10002300C(&v166);
      }

      v88 = v149;
      sub_10002EDE8((uint64_t)&v154);
      if (*((_QWORD *)&v155 + 1))
      {
        sub_10002E424((uint64_t)&v154, (uint64_t)&v158);
        sub_1000202F0((uint64_t)&v154, &qword_100126F88);
        v90 = v159;
        v89 = v160;
        v171 = sub_100022F20(&v158, v159);
        v91 = v151;
        sub_100053F40((uint64_t)v170);
        if (v62)
        {

          sub_10002300C(&v166);
          swift_errorRelease();
          sub_10002300C(&v162);
          sub_100023CAC(&v158);
          return;
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v89 + 32))(v170, 0, v90, v89);
        v93 = v148;
        sub_10002300C(v170);
        v92 = sub_100023CAC(&v158);
      }
      else
      {
        v92 = sub_1000202F0((uint64_t)&v154, &qword_100126F88);
        v93 = v148;
      }
      swift_willThrow(v92);

      sub_10002300C(&v166);
      goto LABEL_84;
    }
    swift_errorRelease();
    if (qword_10012B9A0 != -1)
      swift_once(&qword_10012B9A0, sub_10002E7B4);
    v64 = type metadata accessor for Logger(0);
    sub_100020804(v64, (uint64_t)qword_100131458);
    sub_10002304C(&v166);
    v65 = sub_10002304C(&v166);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.info.getter();
    v68 = os_log_type_enabled(v66, v67);
    v69 = v148;
    if (v68)
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v153 = v71;
      *(_DWORD *)v70 = 136315138;
      v154 = v166;
      v155 = v167;
      v156 = v168;
      v157 = v169;
      v72 = sub_100023710();
      v73 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v72);
      v75 = v74;
      *(_QWORD *)&v154 = sub_1000230D0(v73, v74, &v153);
      v48 = v150;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, (char *)&v154 + 8, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease(v75);
      sub_10002300C(&v166);
      sub_10002300C(&v166);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Consistency for %s still pending due to disjoint proof", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);
    }
    else
    {
      sub_10002300C(&v166);
      sub_10002300C(&v166);
    }

    v94 = v149;
    v95 = v151;
    v96 = sub_10002308C();
    v97 = swift_allocError(&type metadata for MilestoneConsistencyError, v96, 0, 0);
    *v98 = 6;
    swift_willThrow(v97);

    sub_10002300C(&v166);
    sub_10002300C(&v162);
    swift_errorRelease();
  }
}

char *MilestoneConsistency.verify()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  void *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v3 = objc_autoreleasePoolPush();
  if (objc_msgSend(v0, "hasMilestoneSlh"))
  {
    v4 = sub_10002F588();
    if (!v1)
    {
      v2 = v4;
      if (v4 == (char *)1)
        sub_1000309FC();
    }
  }
  else
  {
    v5 = sub_10002308C();
    v6 = swift_allocError(&type metadata for MilestoneConsistencyError, v5, 0, 0);
    *v7 = 2;
    swift_willThrow(v6);
  }
  objc_autoreleasePoolPop(v3);
  return v2;
}

uint64_t sub_100031FC0(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  unsigned int v8;
  unsigned int v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  char v28;
  char v29;

  v3 = objc_msgSend(a1, "parsedLogHead");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(a2, "parsedLogHead");
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v4, "treeId");
      if (v7 != objc_msgSend(v6, "treeId"))
        goto LABEL_21;
      v8 = objc_msgSend(v4, "application");
      if (v8 != objc_msgSend(v6, "application"))
        goto LABEL_21;
      v9 = objc_msgSend(v4, "logType");
      if (v9 != objc_msgSend(v6, "logType"))
        goto LABEL_21;
      v10 = objc_msgSend(v4, "logSize");
      if (v10 != objc_msgSend(v6, "logSize"))
        goto LABEL_20;
      v11 = objc_msgSend(v4, "logHeadHash");
      if (v11)
      {
        v12 = v11;
        v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v15 = v14;

      }
      else
      {
        v13 = 0;
        v15 = 0xF000000000000000;
      }
      v19 = objc_msgSend(v6, "logHeadHash");
      if (v19)
      {
        v20 = v19;
        v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v23 = v22;

        if (v15 >> 60 == 15)
        {
          if (v23 >> 60 == 15)
            goto LABEL_22;
        }
        else if (v23 >> 60 != 15)
        {
          sub_100022F88(v13, v15);
          sub_10002395C(v13, v15);
          v29 = v28;
          sub_100027420(v21, v23);
          sub_100027420(v13, v15);
          sub_100027420(v13, v15);
          if ((v29 & 1) != 0)
            goto LABEL_22;
LABEL_20:
          if (objc_msgSend(v4, "logSize"))
          {
LABEL_21:
            v24 = sub_10002308C();
            v25 = swift_allocError(&type metadata for MilestoneConsistencyError, v24, 0, 0);
            *v26 = 3;
            swift_willThrow(v25);
          }
LABEL_22:

          return 1;
        }
      }
      else
      {
        if (v15 >> 60 == 15)
          goto LABEL_22;
        v21 = 0;
        v23 = 0xF000000000000000;
      }
      sub_100027420(v13, v15);
      sub_100027420(v21, v23);
      goto LABEL_20;
    }

  }
  v16 = sub_10002308C();
  v17 = swift_allocError(&type metadata for MilestoneConsistencyError, v16, 0, 0);
  *v18 = 5;
  swift_willThrow(v17);
  return 1;
}

unint64_t sub_100032274()
{
  unint64_t result;

  result = qword_100126FE8;
  if (!qword_100126FE8)
  {
    result = swift_getWitnessTable(&unk_1000DBFAC, &type metadata for MilestoneConsistencyError);
    atomic_store(result, (unint64_t *)&qword_100126FE8);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for ContinuationStore.ContinuationState(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MilestoneConsistencyError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MilestoneConsistencyError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1000323A4 + 4 * byte_1000DBFA5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000323D8 + 4 * byte_1000DBFA0[v4]))();
}

uint64_t sub_1000323D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000323E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000323E8);
  return result;
}

uint64_t sub_1000323F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000323FCLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100032400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100032408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100032414(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10003241C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MilestoneConsistencyError()
{
  return &type metadata for MilestoneConsistencyError;
}

unint64_t sub_100032434()
{
  unint64_t result;

  result = qword_100126FF0;
  if (!qword_100126FF0)
  {
    result = swift_getWitnessTable(&unk_1000DC09C, &type metadata for MilestoneConsistencyError);
    atomic_store(result, (unint64_t *)&qword_100126FF0);
  }
  return result;
}

uint64_t sub_100032478(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100032490()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_100131470);
  sub_100020804(v0, (uint64_t)qword_100131470);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0xD000000000000013, 0x80000001000DC190);
}

uint64_t sub_100032510()
{
  uint64_t v0;

  if (qword_10012BC30 != -1)
    swift_once(&qword_10012BC30, sub_100032490);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_100131470);
}

uint64_t sub_100032558@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012BC30 != -1)
    swift_once(&qword_10012BC30, sub_100032490);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131470);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1000325C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002E424(v1 + 16, a1);
}

uint64_t sub_1000325D4(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 56, 7);
  sub_100032478(a1, v3 + 16);
  return v3;
}

uint64_t sub_100032614(__int128 *a1)
{
  uint64_t v1;

  sub_100032478(a1, v1 + 16);
  return v1;
}

uint64_t sub_100032630(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_100127000 + dword_100127000);
  v3 = (_QWORD *)swift_task_alloc(unk_100127004);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100032690;
  return v5(a1);
}

uint64_t sub_100032690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *v3;
  v8 = swift_task_dealloc(v6);
  if (!v2)
  {
    v8 = a1;
    v9 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t sub_100032828(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t);

  v3[2] = a3;
  v7 = type metadata accessor for URLRequest(0);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[4] = v8;
  v9 = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = v9;
  v3[6] = _Block_copy(a2);
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = unk_100127004;
  v13 = (uint64_t (*)(uint64_t))((char *)&dword_100127000 + dword_100127000);
  swift_retain(a3);
  v11 = (_QWORD *)swift_task_alloc(v10);
  v3[7] = v11;
  *v11 = v3;
  v11[1] = sub_1000328F0;
  return v13(v9);
}

uint64_t sub_1000328F0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;

  v4 = v2;
  v7 = *(_QWORD *)(*v3 + 56);
  v8 = *v3;
  swift_task_dealloc(v7);
  v9 = *(_QWORD *)(v8 + 16);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v8 + 32) + 8))(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 24));
  swift_release(v9);
  if (v4)
  {
    v10 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100022F44(a1, a2);
    v10 = 0;
    v12 = isa;
  }
  v14 = *(_QWORD *)(v8 + 40);
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 + 48);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_1000329DC(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  double v17;
  uint64_t v18;

  v2 = v1;
  v4 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10012BC30 != -1)
    swift_once(&qword_10012BC30, sub_100032490);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100020804(v7, (uint64_t)qword_100131470);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v11 = 134217984;
    v17 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 4, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "triggerConfigBagFetch(delayInSeconds: %f)", v11, 0xCu);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject(&unk_100107860, 40, 7);
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v2;
  swift_retain(v2);
  v14 = sub_10001D3C0((uint64_t)v6, (uint64_t)&unk_100127010, (uint64_t)v13);
  return swift_release(v14);
}

uint64_t sub_100032B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100032BA4, 0, 0);
}

uint64_t sub_100032BA4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[5];
  v3 = v1[6];
  sub_100022F20(v1 + 2, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 24) = v5;
  *v5 = v0;
  v5[1] = sub_100032C20;
  return v7(v2, v3);
}

uint64_t sub_100032C20()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_100032CA0(uint64_t a1, char a2)
{
  unint64_t v2;
  Swift::String v3;
  void *object;

  v2 = 0xD000000000000010;
  if ((a2 & 1) == 0)
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease(0xE000000000000000);
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    return 0xD00000000000001ELL;
  }
  return v2;
}

unint64_t sub_100032D58()
{
  uint64_t v0;

  return sub_100032CA0(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_100032D6C()
{
  uint64_t v0;

  sub_100023CAC((_QWORD *)(v0 + 16));
  return v0;
}

uint64_t sub_100032D88()
{
  uint64_t v0;

  sub_100023CAC((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_100032DAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100020638;
  return v6();
}

uint64_t sub_100032E00(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100020638;
  return v7();
}

uint64_t sub_100032E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000202F0(a1, &qword_100127220);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100107990, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100127158, v16);
}

uint64_t sub_100032FA0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100033A08;
  return v6(a1);
}

uint64_t sub_100033004(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[3] = a1;
  v2 = sub_10001D138(&qword_100127170);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URLRequest(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v1[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v1[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[9] = v6;
  v1[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000330B0, 0, 0);
}

uint64_t sub_1000330B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;

  if (qword_10012BC30 != -1)
    swift_once(&qword_10012BC30, sub_100032490);
  v1 = v0[3];
  v3 = v0[9];
  v2 = v0[10];
  v5 = v0[7];
  v4 = v0[8];
  v6 = v0[5];
  v7 = v0[6];
  v8 = sub_100020804(v4, (uint64_t)qword_100131470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v8, v4);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v1, v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v33 = v11;
    v12 = v0[4];
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v34 = v32;
    *(_DWORD *)v13 = 136315138;
    URLRequest.url.getter();
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
    v17 = v0[4];
    if (v16 == 1)
    {
      sub_1000202F0(v0[4], &qword_100127170);
      v18 = 0xEB000000004C5255;
      v19 = 0x206E776F6E6B6E75;
    }
    else
    {
      v19 = URL.description.getter();
      v18 = v23;
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
    }
    v29 = v0[9];
    v24 = v0[7];
    v30 = v0[8];
    v31 = v0[10];
    v26 = v0[5];
    v25 = v0[6];
    v0[2] = sub_1000230D0(v19, v18, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    _os_log_impl((void *)&_mh_execute_header, v10, v33, "Fetching config bag from %s", v13, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  }
  else
  {
    v21 = v0[9];
    v20 = v0[10];
    v22 = v0[8];
    (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  v0[11] = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
  v27 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
  v0[12] = v27;
  *v27 = v0;
  v27[1] = sub_1000333A8;
  return NSURLSession.data(for:delegate:)(v0[3], 0);
}

uint64_t sub_1000333A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 96);
  *(_QWORD *)(v5 + 104) = a1;
  *(_QWORD *)(v5 + 112) = a2;
  *(_QWORD *)(v5 + 120) = a3;
  *(_QWORD *)(v5 + 128) = v3;
  swift_task_dealloc(v6);
  if (v3)
  {
    v7 = sub_1000335A4;
  }
  else
  {

    v7 = sub_100033420;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100033420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  v4 = *(void **)(v0 + 120);
  if (v3)
  {
    v5 = (void *)v3;
    v6 = v4;
    v7 = objc_msgSend(v5, "statusCode");
    v4 = *(void **)(v0 + 120);
    if (v7 == (id)200)
    {
      v8 = *(_QWORD *)(v0 + 80);
      v9 = *(_QWORD *)(v0 + 56);
      v10 = *(_QWORD *)(v0 + 32);

      swift_task_dealloc(v8);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    }
    v13 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112);
    v17 = objc_msgSend(v5, "statusCode");
    v18 = sub_100033690();
    v19 = swift_allocError(&type metadata for SWTConfigBagFetcher.SWTConfigBagFetcher, v18, 0, 0);
    *(_QWORD *)v20 = v17;
    *(_BYTE *)(v20 + 8) = 0;
    swift_willThrow(v19);

  }
  else
  {
    v13 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112);
    v14 = sub_100033690();
    v15 = swift_allocError(&type metadata for SWTConfigBagFetcher.SWTConfigBagFetcher, v14, 0, 0);
    *(_QWORD *)v16 = 0;
    *(_BYTE *)(v16 + 8) = 1;
    swift_willThrow(v15);
  }

  sub_100022F44(v13, v12);
  v21 = *(_QWORD *)(v0 + 56);
  v22 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000335A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100033600()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003362C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10012700C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100020638;
  v3[2] = v2;
  return swift_task_switch(sub_100032BA4, 0, 0);
}

unint64_t sub_100033690()
{
  unint64_t result;

  result = qword_100127018;
  if (!qword_100127018)
  {
    result = swift_getWitnessTable(&unk_1000DC158, &type metadata for SWTConfigBagFetcher.SWTConfigBagFetcher);
    atomic_store(result, (unint64_t *)&qword_100127018);
  }
  return result;
}

uint64_t type metadata accessor for SWTConfigBagFetcher()
{
  return objc_opt_self(_TtC15swtransparencyd19SWTConfigBagFetcher);
}

uint64_t initializeBufferWithCopyOfBuffer for SWTConfigBagFetcher.SWTConfigBagFetcher(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SWTConfigBagFetcher.SWTConfigBagFetcher(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SWTConfigBagFetcher.SWTConfigBagFetcher(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_100033758(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100033774(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTConfigBagFetcher.SWTConfigBagFetcher()
{
  return &type metadata for SWTConfigBagFetcher.SWTConfigBagFetcher;
}

uint64_t sub_1000337A4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000337D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (const void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100127124);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10001E4EC;
  return ((uint64_t (*)(uint64_t, const void *, uint64_t))((char *)&dword_100127120 + dword_100127120))(v2, v3, v4);
}

uint64_t sub_100033848()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100127134);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100020638;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100127130 + dword_100127130))(v2, v3, v4);
}

uint64_t sub_1000338C4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000338F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100127144);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100020638;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100127140 + dword_100127140))(a1, v4, v5, v6);
}

uint64_t sub_100033974()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033998(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100127154);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100020638;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100127150 + dword_100127150))(a1, v4);
}

uint64_t sub_100033A10()
{
  unsigned int *v0;

  return *v0;
}

uint64_t sub_100033A18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SWTDeps(0) + 20);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SWTDeps(uint64_t a1)
{
  return sub_100039874(a1, (uint64_t *)&unk_10012BF50, (uint64_t)&nominal type descriptor for SWTDeps);
}

uint64_t sub_100033A74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SWTDeps(0) + 24);
  return sub_100033AA4(v3, a1);
}

uint64_t sub_100033AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001D138(&qword_100127170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033AEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for SWTDeps(0);
  return swift_unknownObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 28)));
}

uint64_t sub_100033B0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for SWTDeps(0);
  return swift_unknownObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 32)));
}

uint64_t sub_100033B2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for SWTDeps(0);
  return swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 36)));
}

id sub_100033B4C()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for SWTDeps(0) + 40));
}

uint64_t sub_100033B6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for SWTDeps(0);
  return swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 44)));
}

uint64_t sub_100033B8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for SWTDeps(0) + 44);
  result = swift_release(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*sub_100033BC8())(_QWORD, _QWORD)
{
  type metadata accessor for SWTDeps(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100033BF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for SWTDeps(0);
  return swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 48)));
}

uint64_t sub_100033C10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for SWTDeps(0) + 48);
  result = swift_release(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*sub_100033C4C())(_QWORD, _QWORD)
{
  type metadata accessor for SWTDeps(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100033C74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SWTDeps(0);
  return sub_10002E424(v1 + *(int *)(v3 + 52), a1);
}

uint64_t sub_100033CA8(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for SWTDeps(0) + 52));
  sub_100023CAC(v3);
  return sub_100032478(a1, (uint64_t)v3);
}

uint64_t (*sub_100033CE4())(_QWORD, _QWORD)
{
  type metadata accessor for SWTDeps(0);
  return ATLogProofs.VerificationResult.result.getter;
}

id sub_100033D0C()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for SWTDeps(0) + 56));
}

void sub_100033D2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for SWTDeps(0) + 56);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*sub_100033D68())(_QWORD, _QWORD)
{
  type metadata accessor for SWTDeps(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100033D90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SWTDeps(0);
  return sub_10002E424(v1 + *(int *)(v3 + 60), a1);
}

uint64_t sub_100033DC4(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for SWTDeps(0) + 60));
  sub_100023CAC(v3);
  return sub_100032478(a1, (uint64_t)v3);
}

uint64_t (*sub_100033E00())(_QWORD, _QWORD)
{
  type metadata accessor for SWTDeps(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100033E28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SWTDeps(0);
  return sub_10002E424(v1 + *(int *)(v3 + 64), a1);
}

uint64_t sub_100033E5C(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for SWTDeps(0) + 64));
  sub_100023CAC(v3);
  return sub_100032478(a1, (uint64_t)v3);
}

uint64_t (*sub_100033E98())(_QWORD, _QWORD)
{
  type metadata accessor for SWTDeps(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100033EC0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_100131488);
  sub_100020804(v0, (uint64_t)qword_100131488);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0x73706544545753, 0xE700000000000000);
}

uint64_t sub_100033F34()
{
  uint64_t v0;

  if (qword_10012BD40 != -1)
    swift_once(&qword_10012BD40, sub_100033EC0);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_100131488);
}

uint64_t sub_100033F7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012BD40 != -1)
    swift_once(&qword_10012BD40, sub_100033EC0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131488);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_100033FEC()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[152];

  v0 = sub_10001D138(&qword_100127178);
  inited = swift_initStackObject(v0, v5);
  *(_OWORD *)(inited + 16) = xmmword_1000DC1D0;
  *(_QWORD *)(inited + 32) = 0xD000000000000018;
  *(_QWORD *)(inited + 40) = 0x80000001000E1B90;
  v2 = sub_10002E3EC(0, &qword_100127180, NSString_ptr);
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = 0xD000000000000013;
  *(_QWORD *)(inited + 64) = 0x80000001000E1BB0;
  *(_QWORD *)(inited + 72) = v2;
  *(_QWORD *)(inited + 80) = 0xD000000000000019;
  *(_QWORD *)(inited + 88) = 0x80000001000E1BD0;
  *(_QWORD *)(inited + 96) = v2;
  *(_QWORD *)(inited + 104) = 0xD000000000000011;
  *(_QWORD *)(inited + 112) = 0x80000001000E1BF0;
  v3 = sub_10002E3EC(0, &qword_100127188, NSNumber_ptr);
  *(_QWORD *)(inited + 120) = v3;
  *(_QWORD *)(inited + 128) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 136) = 0x80000001000E1C10;
  *(_QWORD *)(inited + 144) = v3;
  return sub_1000340F0(inited);
}

unint64_t sub_1000340F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D138(&qword_100127768);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10003AFB8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100034200()
{
  return URL.init(fileURLWithPath:)(0xD000000000000017, 0x80000001000E1C30);
}

uint64_t sub_10003423C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_BYTE *)(v3 + 532) = a3;
  *(_QWORD *)(v3 + 376) = a1;
  *(_QWORD *)(v3 + 384) = a2;
  v4 = type metadata accessor for URL(0);
  *(_QWORD *)(v3 + 392) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 400) = v5;
  *(_QWORD *)(v3 + 408) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL.DirectoryHint(0);
  *(_QWORD *)(v3 + 416) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 424) = v7;
  *(_QWORD *)(v3 + 432) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100127170) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 440) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 448) = swift_task_alloc(v8);
  return swift_task_switch(sub_1000342FC, 0, 0);
}

uint64_t sub_1000342FC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  id v56;
  id v57;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = *(_BYTE *)(v0 + 532);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = (int *)type metadata accessor for SWTDeps(0);
  *(_QWORD *)(v0 + 456) = v3;
  v4 = v3[17];
  v5 = sub_10001D138(&qword_100127178);
  inited = swift_initStackObject(v5, v0 + 80);
  *(_OWORD *)(inited + 16) = xmmword_1000DC1D0;
  *(_QWORD *)(inited + 32) = 0xD000000000000018;
  *(_QWORD *)(inited + 40) = 0x80000001000E1B90;
  v7 = sub_10002E3EC(0, &qword_100127180, NSString_ptr);
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = 0xD000000000000013;
  *(_QWORD *)(inited + 64) = 0x80000001000E1BB0;
  *(_QWORD *)(inited + 72) = v7;
  *(_QWORD *)(inited + 80) = 0xD000000000000019;
  *(_QWORD *)(inited + 88) = 0x80000001000E1BD0;
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = 0xD000000000000011;
  *(_QWORD *)(inited + 112) = 0x80000001000E1BF0;
  v8 = sub_10002E3EC(0, &qword_100127188, NSNumber_ptr);
  *(_QWORD *)(inited + 120) = v8;
  *(_QWORD *)(inited + 128) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 136) = 0x80000001000E1C10;
  *(_QWORD *)(inited + 144) = v8;
  v9 = sub_1000340F0(inited);
  *(_QWORD *)(v0 + 464) = v9;
  *(_QWORD *)(v2 + v4) = v9;
  v10 = v3[5];
  *(_DWORD *)(v0 + 528) = v10;
  v11 = v2 + v10;
  swift_bridgeObjectRetain(v9);
  URL.init(fileURLWithPath:)(0xD000000000000017, 0x80000001000E1C30);
  v60 = v4;
  v61 = v2;
  v65 = v11;
  if ((v1 & 1) != 0)
  {
    v12 = 1;
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 424);
    v14 = *(_QWORD *)(v0 + 432);
    v15 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(v0 + 352) = 0x696C71732E747773;
    *(_QWORD *)(v0 + 360) = 0xEA00000000006574;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v14, enum case for URL.DirectoryHint.inferFromPath(_:), v15);
    v16 = sub_100034D6C();
    URL.appending<A>(path:directoryHint:)(v0 + 352, v14, &type metadata for String, v16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 360));
    v12 = 0;
  }
  v18 = *(_QWORD *)(v0 + 440);
  v17 = *(_QWORD *)(v0 + 448);
  v19 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 384);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 56))(v17, v12, 1, *(_QWORD *)(v0 + 392));
  v21 = v19 + v3[6];
  sub_100034DB0(v17, v21);
  type metadata accessor for SWTConfigBagFetcher();
  sub_10002E424(v20, v0 + 232);
  v22 = sub_1000325D4((__int128 *)(v0 + 232));
  v23 = v3[7];
  *(_QWORD *)(v19 + v23) = v22;
  v24 = objc_msgSend(objc_allocWithZone((Class)TransparencySettings), "init");
  v25 = objc_msgSend(objc_allocWithZone((Class)SWTSettings), "initWithTransparencySettings:", v24);
  *(_QWORD *)(v0 + 472) = v25;

  v63 = v3[8];
  *(_QWORD *)(v19 + v63) = v25;
  *(_QWORD *)(v0 + 480) = type metadata accessor for SWTFollowUp(0);
  v26 = v25;
  v27 = sub_100069384();
  *(_QWORD *)(v0 + 488) = v27;
  v62 = v3[9];
  *(_QWORD *)(v19 + v62) = v27;
  type metadata accessor for KTSwiftDB();
  sub_100033AA4(v21, v18);
  swift_retain(v27);
  v28 = KTSwiftDB.__allocating_init(url:)(v18);
  *(_QWORD *)(v0 + 496) = v28;
  v64 = v23;
  if (v28)
  {
    v29 = v28;
    v59 = v26;
    *(_QWORD *)(v0 + 504) = type metadata accessor for KTSWDB();
    v30 = swift_retain(v29);
    v31 = KTSWDB.__allocating_init(db:)(v30);
    *(_QWORD *)(v0 + 512) = v31;
    v42 = v31;
    v43 = v0 + 16;
    v44 = v0 + 312;
    v46 = *(_QWORD *)(v0 + 376);
    v45 = *(_QWORD *)(v0 + 384);
    *(_QWORD *)(v46 + v3[12]) = v31;
    v47 = type metadata accessor for ReachabilityTracker();
    swift_retain(v42);
    v48 = sub_10001DF3C();
    v50 = sub_10001DFB4(v48, v49);
    v51 = (uint64_t *)(v46 + v3[13]);
    v51[3] = v47;
    v51[4] = (uint64_t)&off_100106EF8;
    *v51 = v50;
    v52 = objc_msgSend((id)objc_opt_self(TransparencyAnalytics), "logger");
    *(_QWORD *)(v0 + 520) = v52;
    *(_QWORD *)(v46 + v3[14]) = v52;
    v53 = type metadata accessor for SWTCloudTelemetry();
    v54 = swift_allocObject(v53, 16, 7);
    v55 = (uint64_t *)(v46 + v3[15]);
    v55[3] = v53;
    v55[4] = (uint64_t)&off_100107C20;
    *v55 = v54;
    sub_10002E424(v45, v46 + v3[16]);
    *(_QWORD *)(v0 + 56) = v0 + 368;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000348DC;
    *(_QWORD *)(v0 + 344) = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 312) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 320) = 0x40000000;
    *(_QWORD *)(v0 + 328) = sub_100034E28;
    *(_QWORD *)(v0 + 336) = &unk_100107A90;
    v56 = v59;
    v57 = v52;
    objc_msgSend(v56, "initializeATEnvironmentWithCompletion:", v44);
    return swift_continuation_await(v43);
  }
  else
  {
    v32 = *(_QWORD **)(v0 + 384);

    swift_bridgeObjectRelease(v9);
    swift_release(v27);
    v33 = type metadata accessor for SWTStateMachineError(0);
    v34 = sub_100025DB4((unint64_t *)&qword_1001271A0, type metadata accessor for SWTStateMachineError, (uint64_t)&unk_1000DE57C);
    swift_allocError(v33, v34, 0, 0);
    v36 = v35;
    sub_100033AA4(v21, v35);
    v37 = swift_storeEnumTagMultiPayload(v36, v33, 0);
    swift_willThrow(v37);
    sub_100023CAC(v32);
    v39 = *(_QWORD *)(v0 + 440);
    v38 = *(_QWORD *)(v0 + 448);
    v40 = *(_QWORD *)(v0 + 432);
    v41 = *(_QWORD *)(v0 + 408);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 8))(v65, *(_QWORD *)(v0 + 392));
    sub_1000202F0(v21, &qword_100127170);
    swift_unknownObjectRelease(*(_QWORD *)(v19 + v64));
    swift_unknownObjectRelease(*(_QWORD *)(v19 + v63));
    swift_release(*(_QWORD *)(v19 + v62));
    swift_bridgeObjectRelease(*(_QWORD *)(v61 + v60));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000348DC()
{
  return swift_task_switch(sub_100034928, 0, 0);
}

uint64_t sub_100034928()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  id v16;
  id v17;
  id v18;
  Class isa;
  NSURL *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  _QWORD v45[6];

  v1 = *(_QWORD *)(v0 + 368);

  if (v1 <= 9)
  {
    if (((1 << v1) & 0x25E) != 0)
    {
      if (qword_10012BD40 != -1)
        swift_once(&qword_10012BD40, sub_100033EC0);
      v2 = type metadata accessor for Logger(0);
      v3 = sub_100020804(v2, (uint64_t)qword_100131488);
      v4 = Logger.logObject.getter(v3);
      v5 = static os_log_type_t.default.getter();
      v40 = 6;
      if (!os_log_type_enabled(v4, v5))
        goto LABEL_13;
      v6 = "Using PrivateCloudCompute Internal";
LABEL_12:
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, v6, v9, 2u);
      swift_slowDealloc(v9, -1, -1);
LABEL_13:
      v32 = *(_QWORD *)(v0 + 512);
      v30 = *(_QWORD *)(v0 + 504);
      v35 = *(_QWORD *)(v0 + 520);
      v36 = *(_QWORD *)(v0 + 496);
      v10 = *(void **)(v0 + 472);
      v33 = *(_QWORD *)(v0 + 480);
      v34 = *(_QWORD *)(v0 + 488);
      v11 = *(int *)(v0 + 528);
      v12 = *(_QWORD *)(v0 + 464);
      v37 = *(_QWORD *)(v0 + 448);
      v38 = *(_QWORD *)(v0 + 440);
      v39 = *(_QWORD *)(v0 + 432);
      v13 = *(_QWORD *)(v0 + 408);
      v27 = *(_QWORD *)(v0 + 456);
      v28 = *(_QWORD *)(v0 + 400);
      v29 = *(_QWORD *)(v0 + 392);
      v14 = *(int **)(v0 + 376);
      v31 = *(_QWORD **)(v0 + 384);

      v15 = (char *)v14 + v11;
      v16 = objc_msgSend(v10, "transparencySettings");
      v17 = objc_allocWithZone((Class)TransparencyConfigBag);
      v18 = v10;
      sub_10001D138(&qword_1001271A8);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v12);
      URL._bridgeToObjectiveC()(v20);
      v22 = v21;
      v23 = objc_msgSend(v17, "initWithRequiredKeys:settings:directory:configApp:swtSettings:", isa, v16, v21, 2, v18);

      swift_unknownObjectRelease(v16);
      *(_QWORD *)((char *)v14 + *(int *)(v27 + 40)) = v23;
      *v14 = v40;
      type metadata accessor for SWTPublicKeyBag(0);
      (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v13, v15, v29);
      v42 = v30;
      v43 = sub_100025DB4(qword_1001271B0, (uint64_t (*)(uint64_t))type metadata accessor for KTSWDB, (uint64_t)&unk_1000DCBDC);
      *(_QWORD *)&v41 = v32;
      v24 = type metadata accessor for SWTKeyBagFetcher();
      sub_10002E424((uint64_t)v31, v0 + 272);
      v44[3] = v24;
      v44[4] = &off_10010ADF0;
      v44[0] = sub_100090BE4((uint64_t)v23, (__int128 *)(v0 + 272));
      v45[3] = v33;
      v45[4] = &off_100109B90;
      v45[0] = v34;
      v25 = sub_10006DD9C(v40, (uint64_t)v18, v13, &v41, (uint64_t)v44, (uint64_t)v45, v35);
      swift_release(v36);
      sub_100023CAC(v31);
      *(_QWORD *)((char *)v14 + *(int *)(v27 + 44)) = v25;
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v13);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    if (((1 << v1) & 0x1A0) != 0)
    {
      if (qword_10012BD40 != -1)
        swift_once(&qword_10012BD40, sub_100033EC0);
      v7 = type metadata accessor for Logger(0);
      v8 = sub_100020804(v7, (uint64_t)qword_100131488);
      v4 = Logger.logObject.getter(v8);
      v5 = static os_log_type_t.default.getter();
      v40 = 5;
      if (!os_log_type_enabled(v4, v5))
        goto LABEL_13;
      v6 = "Using PrivateCloudCompute Primary";
      goto LABEL_12;
    }
  }
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x80000001000E1C90, "swtransparencyd/SWTransparencyDaemon.swift", 42, 2, 78, 0);
}

unint64_t sub_100034D6C()
{
  unint64_t result;

  result = qword_100127198;
  if (!qword_100127198)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100127198);
  }
  return result;
}

uint64_t sub_100034DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001D138(&qword_100127170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100034DF8()
{
  uint64_t v0;

  return swift_allocObject(v0, 16, 7);
}

uint64_t type metadata accessor for SWTCloudTelemetry()
{
  return objc_opt_self(_TtC15swtransparencyd17SWTCloudTelemetry);
}

uint64_t sub_100034E28(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_100034E3C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100034E54, 0, 0);
}

uint64_t sub_100034E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = type metadata accessor for SWTDeps(0);
  v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v3 = swift_unknownObjectRetain(*(_QWORD *)(v1 + *(int *)(v2 + 28)));
  return v5(v3);
}

uint64_t sub_100034E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return swift_task_switch(sub_100034EB8, 0, 0);
}

uint64_t sub_100034EB8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void **)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(uint64_t **)(v0 + 56);
  v4 = type metadata accessor for SWTKeyBagFetcher();
  v5 = type metadata accessor for SWTDeps(0);
  sub_10002E424(v1 + *(int *)(v5 + 64), v0 + 16);
  v6 = sub_100090BE4((uint64_t)v2, (__int128 *)(v0 + 16));
  v3[3] = v4;
  v3[4] = (uint64_t)&off_10010ADF0;
  *v3 = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100034F40(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100034F58, 0, 0);
}

uint64_t sub_100034F58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  ATLogProofs.VerificationResult.result.getter();
  *(_QWORD *)(v1 + 24) = &type metadata for ActualMilestoneFetcher;
  *(_QWORD *)(v1 + 32) = &off_100108DD8;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100034F9C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100034FB4, 0, 0);
}

uint64_t sub_100034FB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  ATLogProofs.VerificationResult.result.getter();
  *(_QWORD *)(v1 + 24) = &type metadata for ActualConsistencyFetcher;
  *(_QWORD *)(v1 + 32) = &off_100107FF8;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100034FF8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for SWTDeps(0) + 36));
  a1[3] = type metadata accessor for SWTFollowUp(0);
  a1[4] = &off_100109B90;
  *a1 = v3;
  return swift_retain(v3);
}

uint64_t sub_100035040(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *object;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  unint64_t v32;
  void *v33;
  Class isa;
  NSString v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = JSONEncoder.init()();
  v12 = sub_10001D138(&qword_1001271D8);
  v13 = swift_allocObject(v12, ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72), *(unsigned __int8 *)(v7 + 80) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_1000DC1E0;
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  v38 = v13;
  v14 = sub_100025DB4(&qword_1001271E0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting, (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  v15 = sub_10001D138(&qword_1001271E8);
  v16 = sub_10003B508(&qword_1001271F0, &qword_1001271E8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v15, v16, v6, v14);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v9);
  v17 = type metadata accessor for TransparencySWIssue(0);
  v18 = sub_100025DB4(&qword_1001271F8, (uint64_t (*)(uint64_t))&type metadata accessor for TransparencySWIssue, (uint64_t)&protocol conformance descriptor for TransparencySWIssue);
  v19 = dispatch thunk of JSONEncoder.encode<A>(_:)(a1, v17, v18);
  v21 = v20;
  v38 = 0;
  v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v22 = swift_bridgeObjectRelease(v39);
  v38 = 0x70736E6172545753;
  v39 = 0xEF2D79636E657261;
  v23._countAndFlagsBits = TransparencySWIssue.issue.getter(v22);
  object = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(object);
  v25._countAndFlagsBits = 45;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v27 = UUID.init()(v26);
  v28 = UUID.uuidString.getter(v27);
  v30 = v29;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v31._countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30);
  v32 = v39;
  v33 = (void *)objc_opt_self(SWTBridge);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  objc_msgSend(v33, "writeIssueReport:filename:", isa, v35);

  sub_100022F44(v19, v21);
  return swift_release(v11);
}

uint64_t sub_1000353E8(char a1)
{
  return qword_1000DC5C8[a1];
}

uint64_t sub_1000353FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10003543C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100033AA4(v2 + *(int *)(a1 + 24), a2);
}

uint64_t sub_10003544C(uint64_t a1)
{
  uint64_t v1;

  return swift_unknownObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 32)));
}

uint64_t sub_100035458@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + *(int *)(a1 + 36));
  a2[3] = type metadata accessor for SWTFollowUp(0);
  a2[4] = &off_100109B90;
  *a2 = v4;
  return swift_retain(v4);
}

id sub_100035498(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(v1 + *(int *)(a1 + 40));
}

uint64_t sub_1000354A4(uint64_t a1)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v1 + *(int *)(a1 + 44)));
}

uint64_t sub_1000354B0(uint64_t a1)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v1 + *(int *)(a1 + 48)));
}

uint64_t sub_1000354BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10002E424(v2 + *(int *)(a1 + 52), a2);
}

id sub_1000354DC(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(v1 + *(int *)(a1 + 56));
}

uint64_t sub_1000354E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10002E424(v2 + *(int *)(a1 + 60), a2);
}

uint64_t sub_100035508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_100035520, 0, 0);
}

uint64_t sub_100035520()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))v0[1];
  v1 = swift_unknownObjectRetain(*(_QWORD *)(v0[2] + *(int *)(v0[3] + 28)));
  return v3(v1);
}

uint64_t sub_100035560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[9] = v3;
  v4[10] = a3;
  v4[7] = a1;
  v4[8] = a2;
  return swift_task_switch(sub_10003557C, 0, 0);
}

uint64_t sub_10003557C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(uint64_t **)(v0 + 56);
  v3 = *(void **)(v0 + 64);
  v5 = type metadata accessor for SWTKeyBagFetcher();
  sub_10002E424(v2 + *(int *)(v1 + 64), v0 + 16);
  v6 = sub_100090BE4((uint64_t)v3, (__int128 *)(v0 + 16));
  v4[3] = v5;
  v4[4] = (uint64_t)&off_10010ADF0;
  *v4 = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000355FC(uint64_t a1)
{
  return sub_100035040(a1);
}

uint64_t sub_100035610(char *a1, char *a2)
{
  return sub_10003561C(*a1, *a2);
}

uint64_t sub_10003561C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = qword_1000DC5C8[a1];
  v3 = qword_1000DC5C8[a2];
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000, v3, 0xE100000000000000, 0);
  swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  return v4 & 1;
}

Swift::Int sub_100035680()
{
  char *v0;

  return sub_100035688(*v0);
}

Swift::Int sub_100035688(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  String.hash(into:)(v3, qword_1000DC5C8[a1], 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000356E4(uint64_t a1)
{
  char *v1;

  return sub_1000356EC(a1, *v1);
}

uint64_t sub_1000356EC(uint64_t a1, char a2)
{
  String.hash(into:)(a1, qword_1000DC5C8[a2], 0xE100000000000000);
  return swift_bridgeObjectRelease(0xE100000000000000);
}

Swift::Int sub_100035718(uint64_t a1)
{
  char *v1;

  return sub_100035720(a1, *v1);
}

Swift::Int sub_100035720(uint64_t a1, char a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, qword_1000DC5C8[a2], 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100035778@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10003B0FC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000357A4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_1000353E8(*v1);
  *a1 = result;
  a1[1] = 0xE100000000000000;
  return result;
}

uint64_t sub_1000357D0()
{
  char *v0;

  return sub_1000353E8(*v0);
}

unint64_t sub_1000357EC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10003B0FC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100035810()
{
  return 0;
}

void sub_10003581C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100035828(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003AF74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100035850(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003AF74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100035878(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  id v45;
  uint64_t v46;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  _QWORD *v54;

  v4 = a1;
  v54 = _swiftEmptyArrayStorage;
  v5 = objc_msgSend(a1, "userInfo");
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16) || (v10 = sub_10003AFB8(v7, v8), (v11 & 1) == 0))
  {
    v52 = 0u;
    v53 = 0u;
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v6);
    goto LABEL_10;
  }
  sub_100023CCC(*(_QWORD *)(v6 + 56) + 32 * v10, (uint64_t)&v52);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v6);
  if (!*((_QWORD *)&v53 + 1))
  {
LABEL_10:
    sub_1000202F0((uint64_t)&v52, &qword_100126F70);
    goto LABEL_11;
  }
  v12 = sub_10002E3EC(0, &qword_100127758, NSError_ptr);
  if ((swift_dynamicCast(&v51, &v52, (char *)&type metadata for Any + 8, v12, 6) & 1) == 0)
    goto LABEL_11;
  v13 = v51;
  v49 = sub_100035878(v51);
  v1 = v14;
  v2 = v15;
  v17 = v16;
  v3 = v54;
  v18 = (uint64_t)v4;
  if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
    goto LABEL_41;
  while (1)
  {
    v20 = v3[2];
    v19 = v3[3];
    if (v20 >= v19 >> 1)
      v3 = sub_100039A34((_QWORD *)(v19 > 1), v20 + 1, 1, v3);
    v3[2] = v20 + 1;
    v21 = &v3[4 * v20];
    v21[4] = v49;
    v21[5] = v1;
    v21[6] = v2;
    v21[7] = v17;

    v54 = v3;
    v4 = (void *)v18;
LABEL_11:
    v22 = objc_msgSend(v4, "userInfo");
    v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSMultipleUnderlyingErrorsKey);
    v18 = v25;
    if (*(_QWORD *)(v23 + 16) && (v26 = sub_10003AFB8(v24, v25), (v27 & 1) != 0))
    {
      sub_100023CCC(*(_QWORD *)(v23 + 56) + 32 * v26, (uint64_t)&v52);
    }
    else
    {
      v52 = 0u;
      v53 = 0u;
    }
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v23);
    if (!*((_QWORD *)&v53 + 1))
    {
      sub_1000202F0((uint64_t)&v52, &qword_100126F70);
      goto LABEL_37;
    }
    v28 = sub_10001D138(&qword_100127750);
    if ((swift_dynamicCast(&v51, &v52, (char *)&type metadata for Any + 8, v28, 6) & 1) == 0)
      goto LABEL_37;
    v13 = v51;
    if ((unint64_t)v51 >> 62)
    {
      if (v51 < 0)
        v18 = v51;
      else
        v18 = v51 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v51);
      v17 = _CocoaArrayWrapper.endIndex.getter(v18);
      v48 = v4;
      if (!v17)
      {
LABEL_35:
        v30 = _swiftEmptyArrayStorage;
        goto LABEL_36;
      }
    }
    else
    {
      v17 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v51);
      v48 = v4;
      if (!v17)
        goto LABEL_35;
    }
    if (v17 >= 1)
      break;
    __break(1u);
LABEL_41:
    v3 = sub_100039A34(0, v3[2] + 1, 1, v3);
  }
  v29 = 0;
  v50 = v13 & 0xC000000000000001;
  v30 = _swiftEmptyArrayStorage;
  v31 = v13;
  v32 = v17;
  do
  {
    if (v50)
      v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v13);
    else
      v33 = *(id *)(v13 + 8 * v29 + 32);
    v34 = v33;
    v35 = sub_100035878(v33);
    v37 = v36;
    v39 = v38;
    v41 = v40;

    if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
      v30 = sub_100039A34(0, v30[2] + 1, 1, v30);
    v43 = v30[2];
    v42 = v30[3];
    if (v43 >= v42 >> 1)
      v30 = sub_100039A34((_QWORD *)(v42 > 1), v43 + 1, 1, v30);
    ++v29;
    v30[2] = v43 + 1;
    v44 = &v30[4 * v43];
    v44[4] = v35;
    v44[5] = v37;
    v44[6] = v39;
    v44[7] = v41;
    v13 = v31;
  }
  while (v32 != v29);
LABEL_36:
  swift_bridgeObjectRelease_n(v13, 2);
  sub_100035CE8((uint64_t)v30);
  v4 = v48;
LABEL_37:
  v45 = objc_msgSend(v4, "domain");
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);

  objc_msgSend(v4, "code");
  if (!v54[2])
    swift_bridgeObjectRelease(v54);
  return v46;
}

uint64_t sub_100035CE8(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_100039A34(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100035E3C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v21 = a5;
  v22 = a4;
  v9 = sub_10001D138(&qword_1001276A0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100022F20(a1, v14);
  v15 = sub_10003AF74();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for JSONSError.CodingKeys, &type metadata for JSONSError.CodingKeys, v15, v14, v13);
  v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v26, v9);
  if (!v5)
  {
    v16 = v21;
    v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v25, v9);
    v23 = v16;
    v24 = 2;
    v17 = sub_10001D138(&qword_1001276A8);
    v18 = sub_10003B444(&qword_1001276B0, (void (*)(void))sub_1000397B8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v23, &v24, v9, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100035FC4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10003B234(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100035FF0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100035E3C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10003600C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  _QWORD v31[4];

  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v30[0] = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100035878(a1);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = JSONEncoder.init()();
  v17 = sub_10001D138(&qword_1001271D8);
  v18 = swift_allocObject(v17, ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72), *(unsigned __int8 *)(v5 + 80) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_1000DC1E0;
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  v31[0] = v18;
  v19 = sub_100025DB4(&qword_1001271E0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting, (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  v20 = sub_10001D138(&qword_1001271E8);
  v21 = sub_10003B508(&qword_1001271F0, &qword_1001271E8);
  dispatch thunk of SetAlgebra.init<A>(_:)(v31, v20, v21, v4, v19);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v7);
  v31[0] = v8;
  v31[1] = v10;
  v31[2] = v12;
  v31[3] = v14;
  v22 = sub_1000397B8();
  v23 = dispatch thunk of JSONEncoder.encode<A>(_:)(v31, &type metadata for JSONSError, v22);
  v25 = v24;
  swift_bridgeObjectRelease(v10);
  v26 = swift_bridgeObjectRelease(v14);
  v27 = v30[0];
  static String.Encoding.utf8.getter(v26);
  v28 = String.init(data:encoding:)(v23, v25, v27);
  sub_100022F44(v23, v25);
  swift_release(v16);
  return v28;
}

uint64_t sub_10003625C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_10003626C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = a1;
  swift_retain(a1);
  return swift_release(v2);
}

uint64_t sub_100036294()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000362AC, v0, 0);
}

uint64_t sub_1000362AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v0 + 24) = v2;
  v3 = dword_1001288FC;
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 32) = v4;
  *v4 = v0;
  v4[1] = sub_10003B8C8;
  return sub_10007C4DC(2);
}

uint64_t sub_10003632C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100036344, v0, 0);
}

uint64_t sub_100036344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v0 + 24) = v2;
  v3 = dword_1001288FC;
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 32) = v4;
  *v4 = v0;
  v4[1] = sub_1000363C4;
  return sub_10007C4DC(1);
}

uint64_t sub_1000363C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 24);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100036414()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100036438()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10003645C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 120, 15);
  swift_defaultActor_initialize();
  *(_QWORD *)(v1 + 112) = 0;
  return v1;
}

uint64_t sub_100036494()
{
  uint64_t v0;

  swift_defaultActor_initialize(v0);
  *(_QWORD *)(v0 + 112) = 0;
  return v0;
}

uint64_t sub_1000364B4()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)(**(_QWORD **)v0 + 128);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100020638;
  return v5();
}

uint64_t sub_100036510()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)(**(_QWORD **)v0 + 136);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001E4EC;
  return v5();
}

uint64_t sub_10003656C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000365B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000397FC(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps, a1);
}

void *sub_1000365C4()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_service);
  swift_beginAccess(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_service, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_100036610(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_service);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_100036660(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_service, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000366A4()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine));
}

uint64_t sub_1000366B4()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger);
  swift_beginAccess(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t sub_1000366FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t (*sub_10003674C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_100036790()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = (_QWORD *)swift_task_alloc(dword_10012721C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000367E8;
  return sub_10003683C();
}

uint64_t sub_1000367E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10003683C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[18] = v0;
  v2 = type metadata accessor for SWTDeps(0);
  v1[19] = v2;
  v1[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Logger(0);
  v1[21] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[22] = v4;
  v1[23] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000368C0, 0, 0);
}

uint64_t sub_1000368C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[22];
  v1 = v0[23];
  v3 = v0[21];
  v4 = v0[18];
  v5 = OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_service;
  v0[24] = OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_service;
  *(_QWORD *)(v4 + v5) = 0;
  v6 = type metadata accessor for TriggerInterface();
  v7 = swift_allocObject(v6, 120, 15);
  v0[25] = v7;
  swift_defaultActor_initialize(v7);
  *(_QWORD *)(v7 + 112) = 0;
  Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0xD000000000000014, 0x80000001000DC1F0);
  v8 = OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  v0[26] = OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4 + v8, v1, v3);
  v0[5] = v6;
  v0[6] = &off_100107C30;
  v0[2] = v7;
  v9 = dword_100127194;
  swift_retain(v7);
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[27] = v10;
  *v10 = v0;
  v10[1] = sub_1000369E0;
  return sub_10003423C(v0[20], (uint64_t)(v0 + 2), 0);
}

uint64_t sub_1000369E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100036C24;
  else
    v3 = sub_100036A44;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100036A44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = v0[25];
  v2 = v0[19];
  v3 = v0[18];
  v4 = (void **)(v3 + v0[24]);
  v5 = v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps;
  sub_1000398A8(v0[20], v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps);
  swift_beginAccess(v4, v0 + 12, 1, 0);
  v6 = *v4;
  *v4 = 0;

  *(_QWORD *)(v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger) = v1;
  type metadata accessor for SWT2SM();
  v0[10] = v2;
  v0[11] = &off_100107B98;
  v7 = sub_1000398EC(v0 + 7);
  sub_1000397FC(v5, (uint64_t)v7);
  swift_retain(v1);
  v8 = sub_1000916F4(v0 + 7);
  v0[29] = v8;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine) = v8;
  v9 = (uint64_t *)(v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger);
  swift_beginAccess(v3 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger, v0 + 15, 0, 0);
  v10 = *v9;
  v0[30] = *v9;
  v0[31] = *(_QWORD *)(*(_QWORD *)v10 + 120);
  swift_retain(v10);
  swift_retain(v8);
  return swift_task_switch(sub_100036B80, v10, 0);
}

uint64_t sub_100036B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 232);
  (*(void (**)(uint64_t))(v0 + 248))(v2);
  swift_release(v2);
  swift_release(v1);
  return swift_task_switch(sub_100036BD4, 0, 0);
}

uint64_t sub_100036BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144));
}

uint64_t sub_100036C24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 200));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6 + v1, v4);

  v7 = type metadata accessor for SWTransparencyDaemon(0);
  swift_deallocPartialClassInstance(v6, v7, *(unsigned int *)(*(_QWORD *)v6 + 48), *(unsigned __int16 *)(*(_QWORD *)v6 + 52));
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100036CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[4];

  v1 = v0;
  v2 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_100107AB8, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain(v1);
  if (v9 == 1)
  {
    sub_1000202F0((uint64_t)v4, &qword_100127220);
    v11 = 7168;
LABEL_6:
    v19 = 0;
    goto LABEL_7;
  }
  v12 = TaskPriority.rawValue.getter(v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v11 = v12 | 0x1C00;
  v13 = *v8;
  if (!*v8)
    goto LABEL_6;
  v14 = v7[3];
  ObjectType = swift_getObjectType(*v8);
  swift_unknownObjectRetain(v13);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
  v18 = v17;
  swift_unknownObjectRelease(v13);
  if (!(v18 | v16))
    goto LABEL_6;
  v22[0] = 0;
  v22[1] = 0;
  v19 = v22;
  v22[2] = v16;
  v22[3] = v18;
LABEL_7:
  v20 = swift_task_create(v11, v19, (char *)&type metadata for () + 8, &unk_100127230, v7);
  return swift_release(v20);
}

uint64_t sub_100036E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100036E9C, 0, 0);
}

uint64_t sub_100036E9C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine);
  v2 = (_QWORD *)swift_task_alloc(dword_10012725C);
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_100032C20;
  return sub_10003702C(v1);
}

uint64_t sub_100036EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_1000202F0(a1, &qword_100127220);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      v16 = 0;
      return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v10);
  swift_unknownObjectRetain(v10);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13))
    goto LABEL_6;
  v19[0] = 0;
  v19[1] = 0;
  v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10003702C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2[107] = v1;
  v2[101] = a1;
  v3 = type metadata accessor for URL.DirectoryHint(0);
  v2[108] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[109] = v4;
  v2[110] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v2[111] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[112] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[113] = swift_task_alloc(v7);
  v2[114] = swift_task_alloc(v7);
  v8 = sub_10001D138(&qword_100127710);
  v2[115] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001D138(&qword_100127718);
  v2[116] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TransparencySWSysdiagnose(0);
  v2[117] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[118] = v11;
  v2[119] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TransparencySWSysdiagnose.StateMachine(0);
  v2[120] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[121] = v13;
  v2[122] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100037160, 0, 0);
}

uint64_t sub_100037160()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[122];
  v2 = v0[120];
  v3 = v0[101];
  swift_retain_n(v3, 2);
  swift_asyncLet_begin(v0 + 2, 0, v2, &unk_100127728, v3, v1);
  return swift_asyncLet_get_throwing(v0 + 2, v0[122], sub_1000371E8, v0 + 82);
}

uint64_t sub_1000371E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 984) = v0;
  if (v0)
    v2 = sub_100037800;
  else
    v2 = sub_100037210;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100037210()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t, uint64_t);
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v55 = v0[123];
  v1 = v0[121];
  v2 = v0[120];
  v3 = v0[116];
  v4 = v0[115];
  v52 = v0 + 2;
  v5 = v0[110];
  v6 = v0[109];
  v7 = v0[108];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 16))(v3, v0[122], v2);
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v3, 0, 1, v2);
  Date.init()(v8);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
  TransparencySWSysdiagnose.init(stateMachine:fallback:)(v3, v4);
  type metadata accessor for SWTDeps(0);
  v0[87] = 0xD000000000000012;
  v0[88] = 0x80000001000E1DD0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for URL.DirectoryHint.inferFromPath(_:), v7);
  v10 = sub_100034D6C();
  URL.appending<A>(path:directoryHint:)(v0 + 87, v5, &type metadata for String, v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v11 = swift_bridgeObjectRelease(v0[88]);
  v12 = TransparencySWSysdiagnose.json()(v11);
  if (v55)
  {
    swift_errorRetain(v55);
    v16 = swift_errorRetain(v55);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      swift_errorRetain(v55);
      v21 = _swift_stdlib_bridgeErrorToNSError(v55);
      v0[89] = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 89, v0 + 90, v19 + 4, v19 + 12);
      *v20 = v21;
      swift_errorRelease(v55);
      swift_errorRelease(v55);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "sysdiagnose write error %@", v19, 0xCu);
      v22 = sub_10001D138(&qword_100127730);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_errorRelease(v55);
      swift_errorRelease(v55);
    }
    v23 = v0[119];
    v24 = v0[118];
    v25 = v0[117];
    v26 = v0[114];
    v27 = v0[112];
    v28 = v0[111];
    swift_errorRelease(v55);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    return swift_asyncLet_finish(v52, v0[122], sub_1000378D0, v0 + 96);
  }
  else
  {
    v14 = v12;
    v15 = v13;
    Data.write(to:options:)(v0[114], 1, v12, v13);
    v30 = v0[114];
    v31 = v0[113];
    v32 = v0[112];
    v33 = v0[111];
    sub_100022F44(v14, v15);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v30, v33);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    v37 = os_log_type_enabled(v35, v36);
    v38 = v0[119];
    v39 = v0[118];
    v40 = v0[117];
    v56 = v0[114];
    v41 = v0[113];
    v42 = v0[112];
    v43 = v0[111];
    if (v37)
    {
      v54 = v0[117];
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = v38;
      v45 = swift_slowAlloc(32, -1);
      v57 = v45;
      *(_DWORD *)v44 = 136315138;
      v46 = sub_100025DB4(&qword_100127738, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v43, v46);
      v49 = v48;
      v0[95] = sub_1000230D0(v47, v48, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 95, v0 + 96, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v49);
      v50 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v50(v41, v43);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "wrote fallback sysdiagnose to: %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      v50(v56, v43);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v53, v54);
    }
    else
    {

      v51 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v51(v41, v43);
      v51(v56, v43);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    }
    return swift_asyncLet_finish(v52, v0[122], sub_100037748, v0 + 102);
  }
}

uint64_t sub_100037748()
{
  return swift_task_switch(sub_10003775C, 0, 0);
}

uint64_t sub_10003775C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 976);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 928);
  v4 = *(_QWORD *)(v0 + 920);
  v5 = *(_QWORD *)(v0 + 912);
  v6 = *(_QWORD *)(v0 + 904);
  v7 = *(_QWORD *)(v0 + 880);
  swift_release_n(*(_QWORD *)(v0 + 808), 2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037800()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 16, *(_QWORD *)(v0 + 976), sub_100037818, v0 + 720);
}

uint64_t sub_100037818()
{
  return swift_task_switch(sub_10003782C, 0, 0);
}

uint64_t sub_10003782C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 976);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 928);
  v4 = *(_QWORD *)(v0 + 920);
  v5 = *(_QWORD *)(v0 + 912);
  v6 = *(_QWORD *)(v0 + 904);
  v7 = *(_QWORD *)(v0 + 880);
  swift_release_n(*(_QWORD *)(v0 + 808), 2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000378D0()
{
  return swift_task_switch(sub_10003B8F0, 0, 0);
}

uint64_t sub_1000378E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(*(_QWORD *)a2 + 200);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001E4EC;
  return v7(a1);
}

xpc_activity_state_t sub_100037950(_xpc_activity_s *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  xpc_activity_state_t result;
  unint64_t v8;
  char v9;
  char v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ValueMetadata *v20;
  unint64_t v21;

  v2 = v1;
  v4 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = xpc_activity_get_state(a1);
  if (result == 2)
  {
    v20 = &type metadata for SWTFeatureFlags;
    v8 = sub_10003998C();
    v21 = v8;
    LOBYTE(v18) = 0;
    v9 = isFeatureEnabled(_:)(&v18);
    result = sub_100023CAC(&v18);
    if ((v9 & 1) != 0
      || (v20 = &type metadata for SWTFeatureFlags,
          v21 = v8,
          LOBYTE(v18) = 1,
          v10 = isFeatureEnabled(_:)(&v18),
          result = sub_100023CAC(&v18),
          (v10 & 1) != 0))
    {
      v11 = Logger.logObject.getter(result);
      v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v13 = 134217984;
        v18 = 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v13 + 4, v13 + 12);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Milestone refresh XPC activity triggered, state: %ld", v13, 0xCu);
        swift_slowDealloc(v13, -1, -1);
      }

      v14 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
      v15 = (_QWORD *)swift_allocObject(&unk_100107AE0, 40, 7);
      v15[2] = 0;
      v15[3] = 0;
      v15[4] = v2;
      swift_retain(v2);
      v16 = sub_100036EF8((uint64_t)v6, (uint64_t)&unk_100127248, (uint64_t)v15);
      swift_release(v16);
      return xpc_activity_set_state(a1, 5);
    }
  }
  return result;
}

uint64_t sub_100037B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 136) = a4;
  return swift_task_switch(sub_100037B5C, 0, 0);
}

uint64_t sub_100037B5C()
{
  _QWORD *v0;
  unint64_t v1;
  char v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v5)();
  uint64_t v6;
  char v7;
  int *v8;
  uint64_t v9;
  char v10;
  int *v11;
  uint64_t (*v12)(void);
  uint64_t (*v14)(void);

  v0[5] = &type metadata for SWTFeatureFlags;
  v1 = sub_10003998C();
  *((_BYTE *)v0 + 16) = 0;
  v0[18] = v1;
  v0[6] = v1;
  v2 = isFeatureEnabled(_:)(v0 + 2);
  sub_100023CAC(v0 + 2);
  if ((v2 & 1) != 0)
  {
    v3 = *(int **)(**(_QWORD **)(v0[17] + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine) + 160);
    v14 = (uint64_t (*)(void))((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc(v3[1]);
    v0[19] = v4;
    v5 = sub_100037CE8;
  }
  else
  {
    *((_BYTE *)v0 + 56) = 1;
    v6 = v0[18];
    v0[10] = &type metadata for SWTFeatureFlags;
    v0[11] = v6;
    v7 = isFeatureEnabled(_:)(v0 + 7);
    sub_100023CAC(v0 + 7);
    if ((v7 & 1) != 0)
    {
      v8 = *(int **)(**(_QWORD **)(v0[17] + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine) + 168);
      v14 = (uint64_t (*)(void))((char *)v8 + *v8);
      v4 = (_QWORD *)swift_task_alloc(v8[1]);
      v0[20] = v4;
      v5 = sub_100037E6C;
    }
    else
    {
      v9 = v0[18];
      v0[15] = &type metadata for SWTFeatureFlags;
      v0[16] = v9;
      *((_BYTE *)v0 + 96) = 4;
      v10 = isFeatureEnabled(_:)(v0 + 12);
      sub_100023CAC(v0 + 12);
      if ((v10 & 1) == 0)
      {
        v12 = (uint64_t (*)(void))v0[1];
        return v12();
      }
      v11 = *(int **)(**(_QWORD **)(v0[17] + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine)
                    + 184);
      v14 = (uint64_t (*)(void))((char *)v11 + *v11);
      v4 = (_QWORD *)swift_task_alloc(v11[1]);
      v0[21] = v4;
      v5 = sub_100037F88;
    }
  }
  *v4 = v0;
  v4[1] = v5;
  v12 = v14;
  return v12();
}

uint64_t sub_100037CE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 152);
  v3 = *v1;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_100037D54, 0, 0);
}

uint64_t sub_100037D54()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v5)();
  uint64_t v6;
  char v7;
  int *v8;
  uint64_t (*v9)(void);
  uint64_t (*v11)(void);

  *((_BYTE *)v0 + 56) = 1;
  v1 = v0[18];
  v0[10] = &type metadata for SWTFeatureFlags;
  v0[11] = v1;
  v2 = isFeatureEnabled(_:)(v0 + 7);
  sub_100023CAC(v0 + 7);
  if ((v2 & 1) != 0)
  {
    v3 = *(int **)(**(_QWORD **)(v0[17] + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine) + 168);
    v11 = (uint64_t (*)(void))((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc(v3[1]);
    v0[20] = v4;
    v5 = sub_100037E6C;
  }
  else
  {
    *((_BYTE *)v0 + 96) = 4;
    v6 = v0[18];
    v0[15] = &type metadata for SWTFeatureFlags;
    v0[16] = v6;
    v7 = isFeatureEnabled(_:)(v0 + 12);
    sub_100023CAC(v0 + 12);
    if ((v7 & 1) == 0)
    {
      v9 = (uint64_t (*)(void))v0[1];
      return v9();
    }
    v8 = *(int **)(**(_QWORD **)(v0[17] + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine) + 184);
    v11 = (uint64_t (*)(void))((char *)v8 + *v8);
    v4 = (_QWORD *)swift_task_alloc(v8[1]);
    v0[21] = v4;
    v5 = sub_100037F88;
  }
  *v4 = v0;
  v4[1] = v5;
  v9 = v11;
  return v9();
}

uint64_t sub_100037E6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 160);
  v3 = *v1;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_100037ED8, 0, 0);
}

uint64_t sub_100037ED8()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t (*v7)(void);

  *((_BYTE *)v0 + 96) = 4;
  v1 = v0[18];
  v0[15] = &type metadata for SWTFeatureFlags;
  v0[16] = v1;
  v2 = isFeatureEnabled(_:)(v0 + 12);
  sub_100023CAC(v0 + 12);
  if ((v2 & 1) != 0)
  {
    v3 = *(int **)(**(_QWORD **)(v0[17] + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine) + 184);
    v7 = (uint64_t (*)(void))((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc(v3[1]);
    v0[21] = v4;
    *v4 = v0;
    v4[1] = sub_100037F88;
    v5 = v7;
  }
  else
  {
    v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_100037F88()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 168));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100037FD0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100037FE8, 0, 0);
}

uint64_t sub_100037FE8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine);
  v2 = (_QWORD *)swift_task_alloc(dword_10012725C);
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_100038044;
  return sub_10003702C(v1);
}

uint64_t sub_100038044()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 24);
  v3 = *v1;
  swift_task_dealloc(v2);
  if (v0)
    swift_errorRelease(v0);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

xpc_activity_state_t sub_10003809C(_xpc_activity_s *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  xpc_activity_state_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = sub_10001D138(&qword_100127220);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Logger.logObject.getter(v5);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "24h background work", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  result = xpc_activity_get_state(a1);
  if (result == 2)
  {
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
    v13 = (_QWORD *)swift_allocObject(&unk_100107B08, 56, 7);
    v13[2] = 0;
    v13[3] = 0;
    v13[4] = v2;
    v13[5] = 2;
    v13[6] = a1;
    swift_retain(v2);
    swift_unknownObjectRetain(a1);
    v14 = sub_10001D3C0((uint64_t)v7, (uint64_t)&unk_1001272C8, (uint64_t)v13);
    return swift_release(v14);
  }
  return result;
}

uint64_t sub_100038204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return swift_task_switch(sub_100038220, 0, 0);
}

uint64_t sub_100038220(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v1 + 32);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    *(_QWORD *)(v1 + 16) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "24h job triggered triggered, state: %ld", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = *(int **)(**(_QWORD **)(v1 + 24) + 200);
  v9 = (uint64_t (*)(void))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v1 + 48) = v7;
  *v7 = v1;
  v7[1] = sub_10003833C;
  return v9();
}

uint64_t sub_10003833C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 48));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_10003B8D4;
  }
  else
  {
    v2 = sub_1000383A8;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000383A8()
{
  uint64_t v0;

  xpc_activity_set_state(*(xpc_activity_t *)(v0 + 40), 5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000383DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t ObjectType;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[5];
  uint64_t v46;
  id v47;
  uint64_t v48;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v2 - 8);
  v43 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001D138(&qword_100127220);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  v13 = Logger.logObject.getter(v10);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "swtransparencyd starting", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
  v17 = (_QWORD *)swift_allocObject(&unk_100107B30, 40, 7);
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v1;
  swift_retain(v1);
  v18 = sub_10001D3C0((uint64_t)v12, (uint64_t)&unk_1001272D8, (uint64_t)v17);
  swift_release(v18);
  sub_10002E3EC(0, (unint64_t *)&unk_1001272E0, OS_dispatch_source_ptr);
  sub_10002E3EC(0, (unint64_t *)&qword_100126938, OS_dispatch_queue_ptr);
  v19 = (void *)static OS_dispatch_queue.main.getter();
  v20 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15, v19);

  ObjectType = swift_getObjectType(v20);
  aBlock[4] = sub_100039C48;
  v46 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100038C94;
  aBlock[3] = &unk_100107B48;
  v22 = _Block_copy(aBlock);
  v23 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v23);
  sub_100038C98();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v8, v4, v22, ObjectType);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v4, v43);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release(v46);
  OS_dispatch_source.resume()();
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Registering XPC service", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  type metadata accessor for SWTransparencyXPCService();
  v28 = sub_10005AA90(*(_QWORD *)(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine));
  v29 = (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 128))(v28);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v29);
  if (v30)
  {
    v31 = (void *)v30;
    v32 = v30 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon;
    swift_beginAccess(v30 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon, aBlock, 1, 0);
    *(_QWORD *)(v32 + 8) = &off_100107C48;
    swift_unknownObjectWeakAssign(v32, v1);

  }
  v33 = v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps;
  v34 = *(void **)(v33 + *(int *)(type metadata accessor for SWTDeps(0) + 32));
  v35 = objc_msgSend(v34, "transparencySettings");
  v36 = objc_msgSend(v35, "getEnvironment");
  swift_unknownObjectRelease(v35);
  v37 = objc_msgSend(v34, "atEnvironment");
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(22, -1);
    *(_DWORD *)v40 = 134218240;
    v47 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v40 + 4, v40 + 12);
    *(_WORD *)(v40 + 12) = 2048;
    v47 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v40 + 14, v40 + 22);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "swtransparencyd started at: %lu kt: %lu", (uint8_t *)v40, 0x16u);
    swift_slowDealloc(v40, -1, -1);
  }

  return swift_unknownObjectRelease(v20);
}

uint64_t sub_1000388DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000388F4, 0, 0);
}

uint64_t sub_1000388F4()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v1 = *(_QWORD *)(v0[2] + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine);
  v0[3] = v1;
  v2 = *(int **)(*(_QWORD *)v1 + 120);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[4] = v3;
  *v3 = v0;
  v3[1] = sub_100038960;
  return v5();
}

uint64_t sub_100038960()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);
  uint64_t v7;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 24);
  v7 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  v3 = *(int **)(*(_QWORD *)v2 + 136);
  v6 = (uint64_t (*)(void))((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  *(_QWORD *)(v1 + 40) = v4;
  *v4 = v7;
  v4[1] = sub_1000389DC;
  return v6();
}

uint64_t sub_1000389DC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100038A24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v23[4];

  v2 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_100107DB0, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = a1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain(a1);
  if (v9 == 1)
  {
    sub_1000202F0((uint64_t)v4, &qword_100127220);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_100107DD8, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_1001276F0;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v23[0] = 0;
    v23[1] = 0;
    v20 = v23;
    v23[2] = v11;
    v23[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  v21 = swift_task_create(v13, v20, (char *)&type metadata for () + 8, &unk_100127700, v19);
  return swift_release(v21);
}

uint64_t sub_100038BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100038C10, 0, 0);
}

uint64_t sub_100038C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = *(_QWORD *)(v0 + 16);
  xpc_transaction_exit_clean();
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine);
  v3 = sub_100020644();
  v4 = *(int **)(*(_QWORD *)v2 + 192);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 24) = v5;
  *v5 = v0;
  v5[1] = sub_100032C20;
  return ((uint64_t (*)(_QWORD, uint64_t))v7)(v3 & 1, 1);
}

uint64_t sub_100038C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_100025DB4(&qword_1001276D0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_10001D138(&qword_1001276D8);
  v3 = sub_10003B508(&qword_1001276E0, &qword_1001276D8);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_100038D44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100039C68(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger));
  return v0;
}

uint64_t sub_100038DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100039C68(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_deps);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_stateMachine));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd20SWTransparencyDaemon_trigger));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100038E58()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)(*(_QWORD *)v0 + 200);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100020638;
  return v5();
}

void sub_100038EB0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  v0 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = swift_allocObject(&unk_100107B80, 32, 7);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v5 = sub_100036EF8((uint64_t)v2, (uint64_t)&unk_1001272F8, v4);
  swift_release(v5);
  v6 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  objc_msgSend(v6, "run");

}

uint64_t sub_100038F94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v0[21] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[22] = v2;
  v0[23] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v0[24] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[25] = v4;
  v0[26] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchTimeInterval(0);
  v0[27] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[28] = v6;
  v0[29] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime(0);
  v0[30] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v0[31] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[32] = swift_task_alloc(v9);
  v0[33] = swift_task_alloc(v9);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v0[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v0[35] = v11;
  v0[36] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SWTransparencyDaemon(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = (_QWORD *)swift_task_alloc(dword_10012721C);
  v0[37] = v13;
  *v13 = v0;
  v13[1] = sub_1000390C8;
  return sub_10003683C();
}

uint64_t sub_1000390C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(*v2 + 296);
  v4 = *v2;
  *(_QWORD *)(v4 + 304) = a1;
  *(_QWORD *)(v4 + 312) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_100039194, 0, 0);
  v6 = *(_QWORD *)(v4 + 256);
  v5 = *(_QWORD *)(v4 + 264);
  v7 = *(_QWORD *)(v4 + 232);
  v8 = *(_QWORD *)(v4 + 208);
  v9 = *(_QWORD *)(v4 + 184);
  swift_task_dealloc(*(_QWORD *)(v4 + 288));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100039194()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0[38];
  v40 = v0[39];
  v2 = v0[36];
  v26 = v0[35];
  v27 = v0[34];
  v3 = v0[32];
  v31 = v0[33];
  v32 = v0[31];
  v4 = (_QWORD *)v0[29];
  v41 = v0[30];
  v29 = v0[28];
  v30 = v0[27];
  v38 = v0[25];
  v39 = v0[24];
  v34 = v0[26];
  v35 = v0[23];
  v36 = v0[21];
  v37 = v0[22];
  v0[6] = sub_10003B4F0;
  v0[7] = v1;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1000395B8;
  v0[5] = &unk_100107D28;
  v5 = _Block_copy(v0 + 2);
  v6 = v0[7];
  swift_retain(v1);
  swift_release(v6);
  xpc_activity_register("com.apple.swtransparencyd.milestone-refresh", XPC_ACTIVITY_CHECK_IN, v5);
  _Block_release(v5);
  v0[8] = _NSConcreteStackBlock;
  v0[12] = sub_10003B4FC;
  v0[13] = v1;
  v0[9] = 1107296256;
  v0[10] = sub_1000395B8;
  v0[11] = &unk_100107D50;
  v7 = _Block_copy(v0 + 8);
  v8 = v0[13];
  swift_retain(v1);
  swift_release(v8);
  xpc_activity_register("com.apple.swtransparencyd.24h", XPC_ACTIVITY_CHECK_IN, v7);
  _Block_release(v7);
  sub_10002E3EC(0, (unint64_t *)&qword_100126938, OS_dispatch_queue_ptr);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v2, enum case for DispatchQoS.QoSClass.default(_:), v27);
  v28 = (void *)static OS_dispatch_queue.global(qos:)(v2);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v2, v27);
  static DispatchTime.now()(v9);
  *v4 = 5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v29 + 104))(v4, enum case for DispatchTimeInterval.seconds(_:), v30);
  + infix(_:_:)(v3, v4);
  (*(void (**)(_QWORD *, uint64_t))(v29 + 8))(v4, v30);
  v33 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v33(v3, v41);
  v0[18] = sub_100020230;
  v0[19] = v1;
  v0[14] = _NSConcreteStackBlock;
  v0[15] = 1107296256;
  v0[16] = sub_100038C94;
  v0[17] = &unk_100107D78;
  v10 = _Block_copy(v0 + 14);
  v11 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v11);
  v0[20] = _swiftEmptyArrayStorage;
  v12 = sub_100025DB4(&qword_1001276D0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_10001D138(&qword_1001276D8);
  v14 = sub_10003B508(&qword_1001276E0, &qword_1001276D8);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 20, v13, v14, v36, v12);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v31, v34, v35, v10);
  _Block_release(v10);

  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v34, v39);
  v33(v31, v41);
  v15 = swift_release(v0[19]);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 216))(v15);
  v16 = v0[38];
  if (v40)
  {
    swift_release(v16);
    v17 = v0[32];
    v18 = v0[33];
    v19 = v0[29];
    v20 = v0[26];
    v21 = v0[23];
    swift_task_dealloc(v0[36]);
    swift_task_dealloc(v18);
    swift_task_dealloc(v17);
  }
  else
  {
    v22 = v0[36];
    v24 = v0[32];
    v23 = v0[33];
    v19 = v0[29];
    v20 = v0[26];
    v21 = v0[23];
    swift_release(v16);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
  }
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1000395B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100039600(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10003962C()
{
  sub_100039D0C();
  return static ParsableCommand.main()();
}

uint64_t sub_10003965C(_QWORD *a1)
{
  return sub_100023CAC(a1);
}

void sub_100039688()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  v0 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = swift_allocObject(&unk_100107D10, 32, 7);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v5 = sub_100036EF8((uint64_t)v2, (uint64_t)&unk_1001276C8, v4);
  swift_release(v5);
  v6 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  objc_msgSend(v6, "run");

}

void sub_10003976C()
{
  ParsableArguments.validate()();
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100039D0C();
  static ParsableCommand.main()();
  return 0;
}

unint64_t sub_1000397B8()
{
  unint64_t result;

  result = qword_10012BD48[0];
  if (!qword_10012BD48[0])
  {
    result = swift_getWitnessTable(&unk_1000DC450, &type metadata for JSONSError);
    atomic_store(result, qword_10012BD48);
  }
  return result;
}

uint64_t sub_1000397FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SWTDeps(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TriggerInterface()
{
  return objc_opt_self(_TtC15swtransparencyd16TriggerInterface);
}

uint64_t type metadata accessor for SWTransparencyDaemon(uint64_t a1)
{
  return sub_100039874(a1, qword_10012BF60, (uint64_t)&nominal type descriptor for SWTransparencyDaemon);
}

uint64_t sub_100039874(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_1000398A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SWTDeps(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1000398EC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10003992C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10012722C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100020638;
  v3[2] = v2;
  return swift_task_switch(sub_100036E9C, 0, 0);
}

unint64_t sub_10003998C()
{
  unint64_t result;

  result = qword_100127238;
  if (!qword_100127238)
  {
    result = swift_getWitnessTable(&unk_1000DD1EC, &type metadata for SWTFeatureFlags);
    atomic_store(result, &qword_100127238);
  }
  return result;
}

uint64_t sub_1000399D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100127244);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001E4EC;
  v3[17] = v2;
  return swift_task_switch(sub_100037B5C, 0, 0);
}

_QWORD *sub_100039A34(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001D138(&qword_100127760);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10003B144(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100039B40()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_unknownObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100039B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_100127264);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100020638;
  *(_QWORD *)(v3 + 40) = v2;
  *(_OWORD *)(v3 + 24) = v5;
  return swift_task_switch(sub_100038220, 0, 0);
}

uint64_t sub_100039BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1001272D4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100020638;
  v3[2] = v2;
  return swift_task_switch(sub_1000388F4, 0, 0);
}

uint64_t sub_100039C48()
{
  uint64_t v0;

  return sub_100038A24(v0);
}

uint64_t sub_100039C50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100039C60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100039C68(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SWTDeps(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100039CA4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100039CC8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001272F4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100020638;
  return sub_100038F94();
}

unint64_t sub_100039D0C()
{
  unint64_t result;

  result = qword_100127300;
  if (!qword_100127300)
  {
    result = swift_getWitnessTable(&unk_1000DC298, &type metadata for SWTransparencyDaemonCommand);
    atomic_store(result, (unint64_t *)&qword_100127300);
  }
  return result;
}

unint64_t sub_100039D54()
{
  unint64_t result;

  result = qword_100127340;
  if (!qword_100127340)
  {
    result = swift_getWitnessTable(&unk_1000DC2D8, &type metadata for SWTransparencyDaemonCommand);
    atomic_store(result, (unint64_t *)&qword_100127340);
  }
  return result;
}

unint64_t sub_100039D9C()
{
  unint64_t result;

  result = qword_100127348;
  if (!qword_100127348)
  {
    result = swift_getWitnessTable(&unk_1000DC318, &type metadata for SWTransparencyDaemonCommand);
    atomic_store(result, (unint64_t *)&qword_100127348);
  }
  return result;
}

_QWORD *sub_100039DE0(_DWORD *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  id v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v49;
  void (*v50)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = &a2[v7];
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = &a2[v13];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a2[v13], 1, v10))
    {
      v16 = sub_10001D138(&qword_100127170);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
    }
    v18 = a3[7];
    v19 = a3[8];
    v20 = *(_QWORD *)&a2[v18];
    *(_QWORD *)((char *)v4 + v18) = v20;
    v21 = *(_QWORD *)&a2[v19];
    *(_QWORD *)((char *)v4 + v19) = v21;
    v22 = a3[9];
    v23 = a3[10];
    v24 = *(_QWORD *)&a2[v22];
    *(_QWORD *)((char *)v4 + v22) = v24;
    v25 = *(void **)&a2[v23];
    *(_QWORD *)((char *)v4 + v23) = v25;
    v26 = a3[11];
    v27 = a3[12];
    v28 = *(_QWORD *)&a2[v26];
    *(_QWORD *)((char *)v4 + v26) = v28;
    v29 = *(_QWORD *)&a2[v27];
    *(_QWORD *)((char *)v4 + v27) = v29;
    v30 = a3[13];
    v31 = &a2[v30];
    v32 = *(_OWORD *)&a2[v30 + 24];
    *(_OWORD *)((char *)v4 + v30 + 24) = v32;
    v33 = v32;
    v49 = (char *)v4 + v30;
    v50 = **(void (***)(char *, char *, uint64_t))(v32 - 8);
    swift_unknownObjectRetain(v20);
    swift_unknownObjectRetain(v21);
    swift_retain(v24);
    v34 = v25;
    swift_retain(v28);
    swift_retain(v29);
    v50(v49, v31, v33);
    v35 = a3[14];
    v36 = a3[15];
    v37 = *(void **)&a2[v35];
    *(_QWORD *)((char *)v4 + v35) = v37;
    v38 = (char *)v4 + v36;
    v39 = &a2[v36];
    v40 = *(_OWORD *)&a2[v36 + 24];
    *(_OWORD *)((char *)v4 + v36 + 24) = v40;
    v41 = v40;
    v42 = **(void (***)(char *, char *, uint64_t))(v40 - 8);
    v43 = v37;
    v42(v38, v39, v41);
    v44 = a3[16];
    v45 = *(_OWORD *)&a2[v44 + 24];
    *(_OWORD *)((char *)v4 + v44 + 24) = v45;
    (**(void (***)(void))(v45 - 8))();
    v46 = a3[17];
    v47 = *(_QWORD *)&a2[v46];
    *(_QWORD *)((char *)v4 + v46) = v47;
    swift_bridgeObjectRetain(v47);
  }
  return v4;
}

uint64_t sub_10003A00C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = a1 + a2[6];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);
  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[7]));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[8]));
  swift_release(*(_QWORD *)(a1 + a2[9]));

  swift_release(*(_QWORD *)(a1 + a2[11]));
  swift_release(*(_QWORD *)(a1 + a2[12]));
  sub_100023CAC((_QWORD *)(a1 + a2[13]));

  sub_100023CAC((_QWORD *)(a1 + a2[15]));
  sub_100023CAC((_QWORD *)(a1 + a2[16]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17]));
}

_DWORD *sub_10003A110(_DWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  id v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;
  void (*v48)(char *, char *, uint64_t);

  *a1 = *(_DWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
  {
    v15 = sub_10001D138(&qword_100127170);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v16 = a3[7];
  v17 = a3[8];
  v18 = *(_QWORD *)&a2[v16];
  *(_QWORD *)((char *)a1 + v16) = v18;
  v19 = *(_QWORD *)&a2[v17];
  *(_QWORD *)((char *)a1 + v17) = v19;
  v20 = a3[9];
  v21 = a3[10];
  v22 = *(_QWORD *)&a2[v20];
  *(_QWORD *)((char *)a1 + v20) = v22;
  v23 = *(void **)&a2[v21];
  *(_QWORD *)((char *)a1 + v21) = v23;
  v24 = a3[11];
  v25 = a3[12];
  v26 = *(_QWORD *)&a2[v24];
  *(_QWORD *)((char *)a1 + v24) = v26;
  v27 = *(_QWORD *)&a2[v25];
  *(_QWORD *)((char *)a1 + v25) = v27;
  v28 = a3[13];
  v29 = &a2[v28];
  v30 = *(_OWORD *)&a2[v28 + 24];
  *(_OWORD *)((char *)a1 + v28 + 24) = v30;
  v31 = v30;
  v47 = (char *)a1 + v28;
  v48 = **(void (***)(char *, char *, uint64_t))(v30 - 8);
  swift_unknownObjectRetain(v18);
  swift_unknownObjectRetain(v19);
  swift_retain(v22);
  v32 = v23;
  swift_retain(v26);
  swift_retain(v27);
  v48(v47, v29, v31);
  v33 = a3[14];
  v34 = a3[15];
  v35 = *(void **)&a2[v33];
  *(_QWORD *)((char *)a1 + v33) = v35;
  v36 = (char *)a1 + v34;
  v37 = &a2[v34];
  v38 = *(_OWORD *)&a2[v34 + 24];
  *(_OWORD *)((char *)a1 + v34 + 24) = v38;
  v39 = v38;
  v40 = **(void (***)(char *, char *, uint64_t))(v38 - 8);
  v41 = v35;
  v40(v36, v37, v39);
  v42 = a3[16];
  v43 = *(_OWORD *)&a2[v42 + 24];
  *(_OWORD *)((char *)a1 + v42 + 24) = v43;
  (**(void (***)(void))(v43 - 8))();
  v44 = a3[17];
  v45 = *(_QWORD *)&a2[v44];
  *(_QWORD *)((char *)a1 + v44) = v45;
  swift_bridgeObjectRetain(v45);
  return a1;
}

char *sub_10003A310(char *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_DWORD *)a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v16 = v15(&a1[v12], 1, v9);
  v17 = v15(v14, 1, v9);
  if (!v16)
  {
    if (!v17)
    {
      v11(v13, v14, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_10001D138(&qword_100127170);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
LABEL_7:
  v19 = a3[7];
  v20 = *(_QWORD *)((char *)a2 + v19);
  v21 = *(_QWORD *)&a1[v19];
  *(_QWORD *)&a1[v19] = v20;
  swift_unknownObjectRetain(v20);
  swift_unknownObjectRelease(v21);
  v22 = a3[8];
  v23 = *(_QWORD *)((char *)a2 + v22);
  v24 = *(_QWORD *)&a1[v22];
  *(_QWORD *)&a1[v22] = v23;
  swift_unknownObjectRetain(v23);
  swift_unknownObjectRelease(v24);
  v25 = a3[9];
  v26 = *(_QWORD *)((char *)a2 + v25);
  v27 = *(_QWORD *)&a1[v25];
  *(_QWORD *)&a1[v25] = v26;
  swift_retain(v26);
  swift_release(v27);
  v28 = a3[10];
  v29 = *(void **)((char *)a2 + v28);
  v30 = *(void **)&a1[v28];
  *(_QWORD *)&a1[v28] = v29;
  v31 = v29;

  v32 = a3[11];
  v33 = *(_QWORD *)((char *)a2 + v32);
  v34 = *(_QWORD *)&a1[v32];
  *(_QWORD *)&a1[v32] = v33;
  swift_retain(v33);
  swift_release(v34);
  v35 = a3[12];
  v36 = *(_QWORD *)((char *)a2 + v35);
  v37 = *(_QWORD *)&a1[v35];
  *(_QWORD *)&a1[v35] = v36;
  swift_retain(v36);
  swift_release(v37);
  sub_10003A54C(&a1[a3[13]], (_DWORD *)((char *)a2 + a3[13]));
  v38 = a3[14];
  v39 = *(void **)((char *)a2 + v38);
  v40 = *(void **)&a1[v38];
  *(_QWORD *)&a1[v38] = v39;
  v41 = v39;

  sub_10003A54C(&a1[a3[15]], (_DWORD *)((char *)a2 + a3[15]));
  sub_10003A54C(&a1[a3[16]], (_DWORD *)((char *)a2 + a3[16]));
  v42 = a3[17];
  v43 = *(_QWORD *)((char *)a2 + v42);
  v44 = *(_QWORD *)&a1[v42];
  *(_QWORD *)&a1[v42] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  return a1;
}

_QWORD *sub_10003A54C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

_DWORD *sub_10003A6B4(_DWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;

  *a1 = *(_DWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
  {
    v15 = sub_10001D138(&qword_100127170);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v16 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)&a2[v16];
  v17 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)&a2[v17];
  v18 = a3[12];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)&a2[a3[11]];
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)&a2[v18];
  v19 = a3[13];
  v20 = a3[14];
  v21 = (char *)a1 + v19;
  v22 = &a2[v19];
  v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)&a2[v20];
  v24 = a3[15];
  v25 = a3[16];
  v26 = (char *)a1 + v24;
  v27 = &a2[v24];
  v28 = *(_OWORD *)v27;
  v29 = *((_OWORD *)v27 + 1);
  *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
  *(_OWORD *)v26 = v28;
  *((_OWORD *)v26 + 1) = v29;
  v30 = (char *)a1 + v25;
  v31 = &a2[v25];
  v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v32;
  *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)&a2[a3[17]];
  return a1;
}

char *sub_10003A83C(char *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  *(_DWORD *)a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = (char *)a2 + v12;
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v16 = v15(&a1[v12], 1, v9);
  v17 = v15(v14, 1, v9);
  if (!v16)
  {
    if (!v17)
    {
      v11(v13, v14, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_10001D138(&qword_100127170);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v14, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
LABEL_7:
  v19 = a3[7];
  v20 = *(_QWORD *)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)((char *)a2 + v19);
  swift_unknownObjectRelease(v20);
  v21 = a3[8];
  v22 = *(_QWORD *)&a1[v21];
  *(_QWORD *)&a1[v21] = *(_QWORD *)((char *)a2 + v21);
  swift_unknownObjectRelease(v22);
  v23 = a3[9];
  v24 = *(_QWORD *)&a1[v23];
  *(_QWORD *)&a1[v23] = *(_QWORD *)((char *)a2 + v23);
  swift_release(v24);
  v25 = a3[10];
  v26 = *(void **)&a1[v25];
  *(_QWORD *)&a1[v25] = *(_QWORD *)((char *)a2 + v25);

  v27 = a3[11];
  v28 = *(_QWORD *)&a1[v27];
  *(_QWORD *)&a1[v27] = *(_QWORD *)((char *)a2 + v27);
  swift_release(v28);
  v29 = a3[12];
  v30 = *(_QWORD *)&a1[v29];
  *(_QWORD *)&a1[v29] = *(_QWORD *)((char *)a2 + v29);
  swift_release(v30);
  v31 = a3[13];
  v32 = &a1[v31];
  v33 = (char *)a2 + v31;
  sub_100023CAC(&a1[v31]);
  v34 = *((_OWORD *)v33 + 1);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *((_OWORD *)v32 + 1) = v34;
  *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
  v35 = a3[14];
  v36 = *(void **)&a1[v35];
  *(_QWORD *)&a1[v35] = *(_QWORD *)((char *)a2 + v35);

  v37 = a3[15];
  v38 = &a1[v37];
  v39 = (char *)a2 + v37;
  sub_100023CAC(&a1[v37]);
  v40 = *((_OWORD *)v39 + 1);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v40;
  *((_QWORD *)v38 + 4) = *((_QWORD *)v39 + 4);
  v41 = a3[16];
  v42 = &a1[v41];
  v43 = (char *)a2 + v41;
  sub_100023CAC(&a1[v41]);
  v44 = *((_OWORD *)v43 + 1);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *((_OWORD *)v42 + 1) = v44;
  *((_QWORD *)v42 + 4) = *((_QWORD *)v43 + 4);
  v45 = a3[17];
  v46 = *(_QWORD *)&a1[v45];
  *(_QWORD *)&a1[v45] = *(_QWORD *)((char *)a2 + v45);
  swift_bridgeObjectRelease(v46);
  return a1;
}

uint64_t sub_10003AA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003AA88);
}

uint64_t sub_10003AA88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_10001D138(&qword_100127170);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[7]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_10003AB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003AB3C);
}

uint64_t sub_10003AB3C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_10001D138(&qword_100127170);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
  return result;
}

void sub_10003ABE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[14];

  v6[0] = (char *)&value witness table for Builtin.Int32 + 64;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003ACBC(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = "\b";
      v6[4] = "\b";
      v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[9] = &unk_1000DC370;
      v6[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[11] = &unk_1000DC370;
      v6[12] = &unk_1000DC370;
      v6[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 14, v6, a1 + 16);
    }
  }
}

void sub_10003ACBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001273A8)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001273A8);
  }
}

uint64_t sub_10003AD10()
{
  return type metadata accessor for SWTransparencyDaemon(0);
}

uint64_t sub_10003AD18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for SWTDeps(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "\b";
      v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      result = swift_updateClassMetadata2(a1, 256, 5, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTransparencyDaemonCommand()
{
  return &type metadata for SWTransparencyDaemonCommand;
}

uint64_t destroy for JSONSError(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for JSONSError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for JSONSError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a1[3];
  v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

_QWORD *assignWithTake for JSONSError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a1[3];
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONSError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONSError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONSError()
{
  return &type metadata for JSONSError;
}

unint64_t sub_10003AF74()
{
  unint64_t result;

  result = qword_10012C070;
  if (!qword_10012C070)
  {
    result = swift_getWitnessTable(&unk_1000DC574, &type metadata for JSONSError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10012C070);
  }
  return result;
}

unint64_t sub_10003AFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10003B01C(a1, a2, v5);
}

unint64_t sub_10003B01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10003B0FC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100107A28, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_10003B144(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10003B234(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v3 = sub_10001D138(&qword_1001276B8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100022F20(a1, v7);
  v9 = sub_10003AF74();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for JSONSError.CodingKeys, &type metadata for JSONSError.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100023CAC(a1);
  }
  else
  {
    v20 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v3);
    v12 = v11;
    v19 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    v13 = sub_10001D138(&qword_1001276A8);
    v18 = 2;
    v14 = sub_10003B444(&qword_1001276C0, (void (*)(void))sub_10003B4AC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, v13, &v18, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v15 = v17;
    swift_bridgeObjectRetain(v17);
    sub_100023CAC(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

uint64_t sub_10003B444(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10001D1C4(&qword_1001276A8);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003B4AC()
{
  unint64_t result;

  result = qword_10012C078;
  if (!qword_10012C078)
  {
    result = swift_getWitnessTable(&unk_1000DC428, &type metadata for JSONSError);
    atomic_store(result, (unint64_t *)&qword_10012C078);
  }
  return result;
}

uint64_t sub_10003B4F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t sub_10003B4FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t sub_10003B508(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10001D1C4(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003B54C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003B578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1001276EC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100020638;
  v3[2] = v2;
  return swift_task_switch(sub_100038C10, 0, 0);
}

uint64_t sub_10003B5D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003B5FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = (_QWORD *)swift_task_alloc(dword_100127724);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100020638;
  v5 = *(int **)(*(_QWORD *)v1 + 200);
  v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v4[2] = v6;
  *v6 = v4;
  v6[1] = sub_10001E4EC;
  return v8(a1);
}

uint64_t getEnumTagSinglePayload for JSONSError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONSError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10003B760 + 4 * byte_1000DC205[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10003B794 + 4 * byte_1000DC200[v4]))();
}

uint64_t sub_10003B794(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B79C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003B7A4);
  return result;
}

uint64_t sub_10003B7B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003B7B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10003B7BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B7C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JSONSError.CodingKeys()
{
  return &type metadata for JSONSError.CodingKeys;
}

unint64_t sub_10003B7E4()
{
  unint64_t result;

  result = qword_10012C200[0];
  if (!qword_10012C200[0])
  {
    result = swift_getWitnessTable(&unk_1000DC54C, &type metadata for JSONSError.CodingKeys);
    atomic_store(result, qword_10012C200);
  }
  return result;
}

unint64_t sub_10003B82C()
{
  unint64_t result;

  result = qword_10012C310;
  if (!qword_10012C310)
  {
    result = swift_getWitnessTable(&unk_1000DC484, &type metadata for JSONSError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10012C310);
  }
  return result;
}

unint64_t sub_10003B874()
{
  unint64_t result;

  result = qword_10012C318[0];
  if (!qword_10012C318[0])
  {
    result = swift_getWitnessTable(&unk_1000DC4AC, &type metadata for JSONSError.CodingKeys);
    atomic_store(result, qword_10012C318);
  }
  return result;
}

void sub_10003B8B8()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t *sub_10003B8F4()
{
  return &qword_1001277D0;
}

uint64_t sub_10003B900()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_1001277D0, v2, 0, 0);
  v0 = qword_1001277D0;
  swift_bridgeObjectRetain(off_1001277D8);
  return v0;
}

uint64_t sub_10003B950(uint64_t a1, void *a2)
{
  void *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_1001277D0, v6, 1, 0);
  v4 = off_1001277D8;
  qword_1001277D0 = a1;
  off_1001277D8 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10003B9A8(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_1001277D0, a1, 33, 0);
  return j__swift_endAccess;
}

void sub_10003B9E8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

unint64_t sub_10003BA18()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000001ELL;
}

uint64_t sub_10003BB64(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003BB88 + 4 * byte_1000DC5E4[a2]))(3);
}

uint64_t sub_10003BB88()
{
  return 4;
}

uint64_t sub_10003BB90()
{
  return 5;
}

uint64_t sub_10003BB98@<X0>(uint64_t a1@<X8>)
{
  if (a1)
    return 2;
  else
    return 1;
}

uint64_t sub_10003BBA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100041024();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10003BBD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100041024();
  return Error<>._code.getter(a1, v2);
}

void sub_10003BBF8()
{
  uint64_t v0;

  sub_10003B9E8(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_10003BC04()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_10003BC24 + 4 * byte_1000DC5E8[*(unsigned __int8 *)(v0 + 8)]))(3);
}

uint64_t sub_10003BC24()
{
  return 4;
}

uint64_t sub_10003BC2C()
{
  return 5;
}

uint64_t sub_10003BC34()
{
  _QWORD *v0;

  if (*v0)
    return 2;
  else
    return 1;
}

uint64_t sub_10003BC48(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10003BC60, 0, 0);
}

uint64_t sub_10003BC60()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[3] = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
  v1 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
  v0[4] = v1;
  *v1 = v0;
  v1[1] = sub_10003BCDC;
  return NSURLSession.data(for:delegate:)(v0[2], 0);
}

uint64_t sub_10003BCDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(*v4 + 32);
  v9 = *v4;
  *(_QWORD *)(v9 + 40) = v3;
  swift_task_dealloc(v8);
  if (v3)
    return swift_task_switch(sub_10003BD80, 0, 0);

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(a1, a2, a3);
}

uint64_t sub_10003BD80()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BDB4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_1001314C8);
  sub_100020804(v0, (uint64_t)qword_1001314C8);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0x69736E6F43746150, 0xEE0079636E657473);
}

uint64_t sub_10003BE34()
{
  uint64_t v0;

  if (qword_10012C3A0 != -1)
    swift_once(&qword_10012C3A0, sub_10003BDB4);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_1001314C8);
}

uint64_t sub_10003BE7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012C3A0 != -1)
    swift_once(&qword_10012C3A0, sub_10003BDB4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_1001314C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id sub_10003BEEC()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

id sub_10003BEF4()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_10003BEFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002E424(v1 + 24, a1);
}

uint64_t sub_10003BF18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002E424(v1 + 64, a1);
}

uint64_t sub_10003BF34()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 104));
}

void *sub_10003BF3C()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 112);
  v2 = v1;
  return v1;
}

uint64_t sub_10003BF60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002E424(v1 + 120, a1);
}

uint64_t sub_10003BF7C(unsigned int a1)
{
  Swift::String v1;
  void *object;
  _QWORD v4[2];

  strcpy((char *)v4, "SWTFetchCnst-");
  v1._countAndFlagsBits = Application.description.getter(a1);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  return v4[0];
}

uint64_t sub_10003BFDC()
{
  _DWORD *v0;

  if (*v0)
    return 2;
  else
    return 3;
}

void sub_10003BFF0(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for ActualConsistencyFetcher;
  *(_QWORD *)(a1 + 32) = &off_100107FF8;
}

uint64_t sub_10003C008@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>)
{
  *(_DWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  sub_100032478(a4, a9 + 24);
  *(_QWORD *)(a9 + 104) = a5;
  sub_100032478(a6, a9 + 64);
  *(_QWORD *)(a9 + 112) = a7;
  return sub_100032478(a8, a9 + 120);
}

_QWORD *sub_10003C074(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1000403E4(a1, a2, a3, a4 & 1);
}

uint64_t sub_10003C07C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t, uint64_t, uint64_t, uint64_t, _BOOL4, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _BOOL4 v42;
  unsigned int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  v3 = v1;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v41 - v10;
  v48 = sub_100041EB0(a1);
  if (!v12)
  {
    v18 = sub_100040860();
    v19 = swift_allocError(&type metadata for ConsistencyDownloadError, v18, 0, 0);
    *(_QWORD *)v20 = a1;
    *(_BYTE *)(v20 + 8) = 1;
    return swift_willThrow(v19);
  }
  v13 = v12;
  v46 = v5;
  v47 = v11;
  v14 = (void *)v3[2];
  v44 = v9;
  v45 = v6;
  if ((_DWORD)a1)
  {
    result = (uint64_t)objc_msgSend(v14, "patLogBeginningMs");
    if ((result & 0x8000000000000000) == 0)
    {
      v16 = result;
      v17 = 2;
      goto LABEL_8;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  result = (uint64_t)objc_msgSend(v14, "tltLogBeginningMs");
  if (result < 0)
    goto LABEL_15;
  v16 = result;
  v17 = 3;
LABEL_8:
  v21 = v3[6];
  v22 = v3[7];
  sub_100022F20(v3 + 3, v21);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 136))(v48, v13, v16, v17, 1, 1, 1, v21, v22);
  if (v2)
    return swift_bridgeObjectRelease(v13);
  v24 = *(_QWORD *)(v23 + 16);
  v43 = v17;
  if (v24)
    v25 = *(_QWORD *)(v23 + 8 * v24 + 24);
  else
    v25 = 0;
  v41 = v3 + 3;
  v42 = v24 == 0;
  v26 = swift_bridgeObjectRelease(v23);
  v27 = v47;
  Date.init(timeIntervalSinceNow:)(v26, -3600.0);
  v28 = v3[6];
  v29 = v3[7];
  sub_100022F20(v3 + 3, v28);
  v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t, uint64_t, uint64_t, uint64_t, _BOOL4, uint64_t, uint64_t))(v29 + 88);
  v40 = v29;
  v39 = v25;
  v31 = v48;
  v32 = v43;
  v33 = v30(v48, v13, v16, v43, v27, 1, 1, 1, v39, v42, v28, v40);
  v34 = v44;
  Date.init(timeIntervalSinceNow:)(v33, -2592000.0);
  v35 = v3[6];
  v36 = v3[7];
  sub_100022F20(v41, v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v36 + 96))(v31, v13, v16, v32, v34, v35, v36);
  swift_bridgeObjectRelease(v13);
  v37 = v46;
  v38 = *(void (**)(char *, uint64_t))(v45 + 8);
  v38(v34, v46);
  return ((uint64_t (*)(char *, uint64_t))v38)(v47, v37);
}

uint64_t sub_10003C360@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  NSString v14;
  id v15;
  void (*v16)(char *, char *, uint64_t);
  id v17;
  NSURL *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v2 = v1;
  v31[1] = a1;
  v3 = sub_10001D138(&qword_100127170);
  __chkstk_darwin(v3);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v31 - v11;
  v13 = *(void **)(v2 + 8);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "urlForKey:", v14);

  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_11;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

  v16 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v16(v5, v10, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_11:
    sub_1000202F0((uint64_t)v5, &qword_100127170);
    v28 = sub_100040860();
    v29 = swift_allocError(&type metadata for ConsistencyDownloadError, v28, 0, 0);
    *(_QWORD *)v30 = 0;
    *(_BYTE *)(v30 + 8) = 3;
    return swift_willThrow(v29);
  }
  v16(v12, v5, v6);
  v17 = objc_allocWithZone((Class)NSMutableURLRequest);
  URL._bridgeToObjectiveC()(v18);
  v20 = v19;
  v21 = objc_msgSend(v17, "initWithURL:", v19);

  sub_100097938(1);
  if (sub_100026054((uint64_t)objc_msgSend(v13, "currentEnvironment")))
  {
    objc_msgSend(v21, "_setPrivacyProxyFailClosed:", 1);
    if (qword_10012C3A0 != -1)
      swift_once(&qword_10012C3A0, sub_10003BDB4);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100020804(v22, (uint64_t)qword_1001314C8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Enforcing privacy proxy", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

  }
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v21);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

uint64_t sub_10003C694(uint64_t a1, uint64_t a2)
{
  return a2;
}

_QWORD *sub_10003C6A8()
{
  unsigned int *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  char v32;
  void *v33;
  NSString v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v3 = *v0;
  v4 = sub_100041EB0(v3);
  if (!v5)
  {
    v12 = sub_100040860();
    v13 = swift_allocError(&type metadata for ConsistencyDownloadError, v12, 0, 0);
    *(_QWORD *)v14 = v3;
    *(_BYTE *)(v14 + 8) = 1;
    swift_willThrow(v13);
    return v2;
  }
  v6 = v5;
  v80 = v4;
  v2 = (_QWORD *)*((_QWORD *)v0 + 6);
  v7 = *((_QWORD *)v0 + 7);
  sub_100022F20((_QWORD *)v0 + 3, (uint64_t)v2);
  v78 = v0;
  v8 = (void *)*((_QWORD *)v0 + 2);
  v9 = (unint64_t)objc_msgSend(v8, "patLogBeginningMs");
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if ((_DWORD)v3)
    v10 = 2;
  else
    v10 = 3;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(v7 + 136))(v80, v6, v9, v10, 2, 1, 1, v2, v7);
  if (v1)
  {
    swift_bridgeObjectRelease(v6);
    return v2;
  }
  v16 = v11;
  v84 = v11;
  swift_bridgeObjectRetain(v11);
  sub_10003F528(&v84);
  swift_bridgeObjectRelease(v16);
  v17 = v84;
  v18 = *(_QWORD *)(v84 + 16);
  if (!v18)
  {
    swift_release(v84);
    swift_bridgeObjectRelease(v6);
    if (qword_10012C3A0 == -1)
    {
LABEL_14:
      v23 = type metadata accessor for Logger(0);
      v24 = sub_100020804(v23, (uint64_t)qword_1001314C8);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v25, v26))
      {
LABEL_17:

        return 0;
      }
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      v28 = "No pending PAT revisions";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v25, v26, v28, v27, 2u);
      swift_slowDealloc(v27, -1, -1);
      goto LABEL_17;
    }
LABEL_64:
    swift_once(&qword_10012C3A0, sub_10003BDB4);
    goto LABEL_14;
  }
  v19 = *((_QWORD *)v0 + 6);
  v20 = *((_QWORD *)v0 + 7);
  sub_100022F20((_QWORD *)v0 + 3, v19);
  v21 = (unint64_t)objc_msgSend(v8, "patLogBeginningMs");
  if ((v21 & 0x8000000000000000) != 0)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 136))(v80, v6, v21, v10, 1, 1, 1, v19, v20);
  swift_bridgeObjectRelease(v6);
  v29 = *(_QWORD *)(v22 + 16);
  if (v29)
  {
    v30 = *(_QWORD *)(v22 + 8 * v29 + 24);
    swift_bridgeObjectRelease(v22);
    v31 = v78;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease(v22);
  v31 = v78;
  if (v18 <= 1)
  {
    swift_release(v17);
    if (qword_10012C3A0 != -1)
LABEL_66:
      swift_once(&qword_10012C3A0, sub_10003BDB4);
    v71 = type metadata accessor for Logger(0);
    v72 = sub_100020804(v71, (uint64_t)qword_1001314C8);
    v25 = Logger.logObject.getter(v72);
    v26 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v25, v26))
      goto LABEL_17;
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    v28 = "No verified revision and only one pending PAT revision";
    goto LABEL_16;
  }
  v30 = 0;
LABEL_22:
  v32 = v29 == 0;
  v33 = (void *)*((_QWORD *)v31 + 1);
  v34 = String._bridgeToObjectiveC()();
  v35 = objc_msgSend(v33, "uintegerForKey:", v34);

  v36 = sub_1000403E4(v17, (uint64_t)v35, v30, v32);
  swift_release(v17);
  if (qword_10012C3A0 != -1)
    swift_once(&qword_10012C3A0, sub_10003BDB4);
  v37 = type metadata accessor for Logger(0);
  sub_100020804(v37, (uint64_t)qword_1001314C8);
  v38 = swift_bridgeObjectRetain_n(v36, 2);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.info.getter();
  v74 = v36;
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v84 = v42;
    *(_DWORD *)v41 = 136315138;
    swift_bridgeObjectRetain(v36);
    v43 = sub_10001D138(&qword_1001277F0);
    v44 = Array.description.getter(v36, v43);
    v46 = v45;
    swift_bridgeObjectRelease(v74);
    v82 = sub_1000230D0(v44, v46, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease_n(v74, 2);
    v47 = v46;
    v36 = v74;
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Generating requests for %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v36, 2);
  }
  v81 = v36[2];
  if (!v81)
  {
    swift_bridgeObjectRelease(v36);
    return _swiftEmptyArrayStorage;
  }
  v48 = 0;
  v49 = *v31;
  v79 = v36 + 4;
  if ((_DWORD)v49)
    v50 = 2;
  else
    v50 = 3;
  v77 = v50;
  v2 = _swiftEmptyArrayStorage;
  v75 = *v31;
  v76 = kTransparencyProtocolVersion;
  while (1)
  {
    if (v48 >= v36[2])
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v52 = v79[v48];
    v53 = objc_allocWithZone((Class)ConsistencyProofRequest);
    swift_bridgeObjectRetain(v52);
    v54 = objc_msgSend(v53, "init");
    objc_msgSend(v54, "setVersion:", v76);
    objc_msgSend(v54, "setLogType:", v77);
    if ((_DWORD)v49)
      objc_msgSend(v54, "setApplication:", v49);
    v55 = *(_QWORD *)(v52 + 16);
    if (v55 && v55 != 1)
      break;
LABEL_49:
    swift_bridgeObjectRelease(v52);
    v64 = objc_msgSend(v54, "data");
    if (v64)
    {
      v65 = v64;
      v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v64);
      v68 = v67;

      sub_100022F88(v66, v68);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
        v2 = sub_10003F41C(0, v2[2] + 1, 1, v2);
      v70 = v2[2];
      v69 = v2[3];
      if (v70 >= v69 >> 1)
        v2 = sub_10003F41C((_QWORD *)(v69 > 1), v70 + 1, 1, v2);
      v2[2] = v70 + 1;
      v51 = &v2[2 * v70];
      v51[4] = v66;
      v51[5] = v68;
      sub_100022F44(v66, v68);
      v49 = v75;
    }
    ++v48;

    if (v48 == v81)
    {
      swift_bridgeObjectRelease(v36);
      return v2;
    }
  }
  v57 = *(_QWORD *)(v52 + 32);
  swift_bridgeObjectRetain(v52);
  v58 = 0;
  while (1)
  {
    v59 = objc_msgSend(objc_allocWithZone((Class)ConsistencyProofRequest_LogConsistencyRequest), "init");
    if (v57 < 0)
      break;
    v60 = v59;
    objc_msgSend(v59, "setStartRevision:", v57);
    if ((unint64_t)(v58 + 1) >= *(_QWORD *)(v52 + 16))
    {
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    v61 = v52 + 8 * v58;
    if ((*(_QWORD *)(v61 + 40) & 0x8000000000000000) != 0)
      break;
    objc_msgSend(v60, "setEndRevision:");
    v62 = objc_msgSend(v54, "requestsArray");
    if (!v62)
    {
      __break(1u);
      goto LABEL_66;
    }
    v63 = v62;
    objc_msgSend(v62, "addObject:", v60);

    if ((unint64_t)(v58 + 1) >= *(_QWORD *)(v52 + 16))
      goto LABEL_60;
    v57 = *(_QWORD *)(v61 + 40);
    if (v55 - 1 == ++v58)
    {
      swift_bridgeObjectRelease(v52);
      v36 = v74;
      v49 = v75;
      goto LABEL_49;
    }
  }
  LOBYTE(v73) = 2;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v73, 3451, 0);
  __break(1u);
  result = (_QWORD *)swift_release(v84);
  __break(1u);
  return result;
}

uint64_t sub_10003CF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v6 + 448) = a4;
  *(_QWORD *)(v6 + 456) = v5;
  *(_BYTE *)(v6 + 568) = a5;
  *(_QWORD *)(v6 + 432) = a2;
  *(_QWORD *)(v6 + 440) = a3;
  *(_QWORD *)(v6 + 424) = a1;
  v7 = sub_10001D138(&qword_100127710);
  *(_QWORD *)(v6 + 464) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  *(_QWORD *)(v6 + 472) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 480) = v9;
  *(_QWORD *)(v6 + 488) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v6 + 496) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 504) = v11;
  *(_QWORD *)(v6 + 512) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003CFE8, 0, 0);
}

uint64_t sub_10003CFE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  _QWORD *v17;
  uint64_t v19;
  int *v20;
  uint64_t v21;

  if (qword_10012C3A0 != -1)
    swift_once(&qword_10012C3A0, sub_10003BDB4);
  v1 = *(_QWORD *)(v0 + 456);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 520) = sub_100020804(v2, (uint64_t)qword_1001314C8);
  v3 = sub_1000408A4(v1, v0 + 16);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v19 = *(_QWORD *)(v0 + 424);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    v21 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = Application.description.getter(*(_DWORD *)(v0 + 16));
    v10 = v9;
    *(_QWORD *)(v0 + 408) = sub_1000230D0(v8, v9, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    sub_1000408B4(v0 + 16);
    *(_WORD *)(v6 + 12) = 2048;
    *(_QWORD *)(v0 + 416) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v6 + 14, v6 + 22);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Requesting %s consistency chunk %ld", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    sub_1000408B4(v0 + 16);
  }

  sub_10003C360(*(_QWORD *)(v0 + 512));
  v11 = *(_QWORD **)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 432);
  v12 = *(_QWORD *)(v0 + 440);
  sub_100022F88(v13, v12);
  URLRequest.httpBody.setter(v13, v12);
  v14 = v11[11];
  v15 = v11[12];
  sub_100022F20(v11 + 8, v14);
  v16 = *(int **)(v15 + 8);
  v20 = (int *)((char *)v16 + *v16);
  v17 = (_QWORD *)swift_task_alloc(v16[1]);
  *(_QWORD *)(v0 + 528) = v17;
  *v17 = v0;
  v17[1] = sub_10003D28C;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v20)(*(_QWORD *)(v0 + 512), v14, v15);
}

uint64_t sub_10003D28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 528);
  v5[67] = a1;
  v5[68] = a2;
  v5[69] = a3;
  v5[70] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_10003D980;
  else
    v7 = sub_10003D304;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10003D304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  void *v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  void *v27;
  char **v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[2];

  v1 = *(_QWORD *)(v0 + 552);
  static Date.now.getter();
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  v4 = *(void **)(v0 + 552);
  if (!v3)
  {
    v12 = *(_QWORD *)(v0 + 544);
    v13 = *(_QWORD *)(v0 + 536);
    v14 = *(_QWORD *)(v0 + 504);
    v15 = *(_QWORD *)(v0 + 488);
    v81 = *(_QWORD *)(v0 + 496);
    v84 = *(_QWORD *)(v0 + 512);
    v17 = *(_QWORD *)(v0 + 472);
    v16 = *(_QWORD *)(v0 + 480);
    v18 = sub_100040860();
    v19 = swift_allocError(&type metadata for ConsistencyDownloadError, v18, 0, 0);
    *(_QWORD *)v20 = 1;
    *(_BYTE *)(v20 + 8) = 3;
    swift_willThrow(v19);
    sub_100022F44(v13, v12);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
LABEL_13:
    v21(v84, v81);
    goto LABEL_14;
  }
  v5 = (void *)v3;
  v6 = v4;
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v5, "valueForHTTPHeaderField:", v7);

  if (v8)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

  }
  else
  {
    v11 = 0xE700000000000000;
    v9 = 0x3E4853206F6E3CLL;
  }
  v22 = *(void **)(v0 + 552);
  sub_1000408A4(*(_QWORD *)(v0 + 456), v0 + 176);
  v23 = v22;
  swift_bridgeObjectRetain_n(v11, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  v26 = os_log_type_enabled(v24, v25);
  v27 = *(void **)(v0 + 552);
  v28 = &selRef_writeAsMessageSetTo_;
  if (v26)
  {
    v77 = *(_QWORD *)(v0 + 424);
    v29 = swift_slowAlloc(42, -1);
    v82 = swift_slowAlloc(64, -1);
    v88[0] = v82;
    *(_DWORD *)v29 = 134218754;
    v85 = v9;
    v30 = v11;
    v31 = objc_msgSend(v5, "statusCode");

    *(_QWORD *)(v0 + 376) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v29 + 4, v29 + 12);

    *(_WORD *)(v29 + 12) = 2080;
    v32 = Application.description.getter(*(_DWORD *)(v0 + 176));
    v34 = v33;
    *(_QWORD *)(v0 + 384) = sub_1000230D0(v32, v33, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v29 + 14, v29 + 22);
    v35 = v34;
    v11 = v30;
    v9 = v85;
    swift_bridgeObjectRelease(v35);
    sub_1000408B4(v0 + 176);
    *(_WORD *)(v29 + 22) = 2048;
    *(_QWORD *)(v0 + 392) = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v29 + 24, v29 + 32);
    *(_WORD *)(v29 + 32) = 2080;
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 400) = sub_1000230D0(v85, v11, v88);
    v28 = &selRef_writeAsMessageSetTo_;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v29 + 34, v29 + 42);
    swift_bridgeObjectRelease_n(v11, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Received %ld response for %s consistency chunk %ld with %s", (uint8_t *)v29, 0x2Au);
    swift_arrayDestroy(v82, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {

    sub_1000408B4(v0 + 176);
    swift_bridgeObjectRelease_n(v11, 2);
  }

  if (objc_msgSend(v5, v28[260]) != (id)200)
  {
    v48 = *(void **)(v0 + 552);
    v49 = *(_QWORD *)(v0 + 544);
    v50 = *(_QWORD *)(v0 + 536);
    v79 = *(_QWORD *)(v0 + 504);
    v51 = *(_QWORD *)(v0 + 488);
    v81 = *(_QWORD *)(v0 + 496);
    v84 = *(_QWORD *)(v0 + 512);
    v53 = *(_QWORD *)(v0 + 472);
    v52 = *(_QWORD *)(v0 + 480);
    swift_bridgeObjectRelease(v11);
    v54 = objc_msgSend(v5, v28[260]);
    v55 = sub_100040860();
    v56 = swift_allocError(&type metadata for ConsistencyDownloadError, v55, 0, 0);
    *(_QWORD *)v57 = v54;
    *(_BYTE *)(v57 + 8) = 0;
    swift_willThrow(v56);
    sub_100022F44(v50, v49);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
    v21 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
    goto LABEL_13;
  }
  v83 = v11;
  v36 = *(_QWORD *)(v0 + 560);
  v37 = *(_QWORD *)(v0 + 544);
  v38 = *(_QWORD *)(v0 + 536);
  objc_allocWithZone((Class)ConsistencyProofResponse);
  sub_100022F88(v38, v37);
  v39 = sub_10002E330();
  if (v36)
  {
    v40 = *(void **)(v0 + 552);
    v41 = *(_QWORD *)(v0 + 544);
    v42 = *(_QWORD *)(v0 + 536);
    v43 = *(_QWORD *)(v0 + 504);
    v86 = *(_QWORD *)(v0 + 512);
    v45 = *(_QWORD *)(v0 + 488);
    v44 = *(_QWORD *)(v0 + 496);
    v47 = *(_QWORD *)(v0 + 472);
    v46 = *(_QWORD *)(v0 + 480);
    sub_100022F44(v42, v41);
    sub_100022F44(v42, v41);

    swift_bridgeObjectRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v86, v44);
LABEL_14:
    v58 = *(_QWORD *)(v0 + 488);
    v59 = *(_QWORD *)(v0 + 464);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v61 = v39;
  v74 = *(_QWORD *)(v0 + 544);
  v75 = *(void **)(v0 + 552);
  v76 = *(_QWORD *)(v0 + 504);
  v78 = *(_QWORD *)(v0 + 496);
  v80 = *(_QWORD *)(v0 + 512);
  v62 = *(_QWORD *)(v0 + 480);
  v72 = *(_QWORD *)(v0 + 488);
  v73 = *(_QWORD *)(v0 + 536);
  v63 = *(_QWORD *)(v0 + 464);
  v64 = *(_QWORD *)(v0 + 472);
  v65 = *(_BYTE *)(v0 + 568) & 1;
  v87 = v9;
  v66 = *(_QWORD *)(v0 + 448);
  v67 = *(unsigned int **)(v0 + 456);
  sub_100022F44(v73, v74);
  v68 = *v67;
  LOBYTE(v88[0]) = 0;
  ConsistencyProofResponse.expectedApplication.setter(v68);
  v69 = 2;
  if (!(_DWORD)v68)
    v69 = 3;
  LOBYTE(v88[0]) = 0;
  ConsistencyProofResponse.expectedLogType.setter(v69);
  ConsistencyProofResponse.startRevision.setter(v66, v65);
  v70 = (void *)*((_QWORD *)v67 + 2);
  v71 = v70;
  ConsistencyProofResponse.keyBag.setter(v70);
  sub_10002E424((uint64_t)(v67 + 6), v0 + 336);
  sub_10002A7B0(v0 + 336);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v63, v72, v64);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v63, 0, 1, v64);
  ConsistencyProofResponse.receiptTime.setter(v63);
  sub_100022F44(v73, v74);

  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v72, v64);
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v80, v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v72);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(id, uint64_t, unint64_t))(v0 + 8))(v61, v87, v83);
}

uint64_t sub_10003D980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 504) + 8))(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 496));
  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 464);
  swift_task_dealloc(*(_QWORD *)(v0 + 512));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D9E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10003D9FC, 0, 0);
}

uint64_t sub_10003D9FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = sub_10003C6A8();
  *(_QWORD *)(v0 + 24) = v1;
  v4 = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v5 = v2;
  v6 = v3;
  v7 = *(_QWORD *)(v0 + 16);
  v8 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 32) = v8;
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v5;
  *(_BYTE *)(v8 + 32) = v6 & 1;
  *(_QWORD *)(v8 + 40) = v7;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 40) = v9;
  *v9 = v0;
  v9[1] = sub_10003DAF8;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v9, &type metadata for Int, (char *)&type metadata for () + 8, 0, 0, &unk_100127810, v8, &type metadata for Int);
}

uint64_t sub_10003DAF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10003DB78;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 32);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
    swift_task_dealloc(v5);
    v4 = sub_10003DB6C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10003DB6C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DB78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_BYTE *)(v6 + 401) = a5;
  *(_QWORD *)(v6 + 448) = a4;
  *(_QWORD *)(v6 + 456) = a6;
  *(_QWORD *)(v6 + 432) = a2;
  *(_QWORD *)(v6 + 440) = a3;
  v7 = sub_10001D138(&qword_100127828);
  *(_QWORD *)(v6 + 464) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 472) = v8;
  *(_QWORD *)(v6 + 480) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100127220) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 488) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 496) = swift_task_alloc(v9);
  return swift_task_switch(sub_10003DC54, 0, 0);
}

uint64_t sub_10003DC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v1 = *(_QWORD *)(v0 + 440);
  v34 = *(_QWORD *)(v1 + 16);
  if (v34)
  {
    v35 = type metadata accessor for TaskPriority(0);
    v33 = *(_QWORD *)(v35 - 8);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
    swift_bridgeObjectRetain(v1);
    v2 = 0;
    v3 = (unint64_t *)(v1 + 40);
    do
    {
      v6 = *(_QWORD *)(v0 + 496);
      v43 = *(_QWORD *)(v0 + 488);
      v41 = *(_BYTE *)(v0 + 401);
      v7 = *(_QWORD *)(v0 + 456);
      v39 = *(_QWORD *)(v0 + 440);
      v40 = *(_QWORD *)(v0 + 448);
      v9 = *(v3 - 1);
      v8 = *v3;
      v37 = v3;
      v32(v6, 1, 1, v35);
      sub_1000408A4(v7, v0 + 16);
      v10 = swift_allocObject(&unk_1001081E0, 233, 7);
      *(_QWORD *)(v10 + 16) = 0;
      v36 = (_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 24) = 0;
      v11 = *(_OWORD *)(v0 + 128);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v0 + 112);
      *(_OWORD *)(v10 + 144) = v11;
      v12 = *(_OWORD *)(v0 + 160);
      *(_OWORD *)(v10 + 160) = *(_OWORD *)(v0 + 144);
      *(_OWORD *)(v10 + 176) = v12;
      v13 = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v10 + 64) = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v10 + 80) = v13;
      v14 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v10 + 112) = v14;
      v15 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v10 + 48) = v15;
      v38 = v2;
      *(_QWORD *)(v10 + 192) = v2;
      *(_QWORD *)(v10 + 200) = v9;
      *(_QWORD *)(v10 + 208) = v8;
      *(_QWORD *)(v10 + 216) = v39;
      *(_QWORD *)(v10 + 224) = v40;
      *(_BYTE *)(v10 + 232) = v41 & 1;
      sub_10002AC5C(v6, v43, &qword_100127220);
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v43, 1, v35);
      sub_100022F88(v9, v8);
      swift_bridgeObjectRetain(v39);
      v42 = v9;
      v44 = v8;
      v16 = sub_100022F88(v9, v8);
      v17 = *(_QWORD *)(v0 + 488);
      if ((_DWORD)v6 == 1)
      {
        sub_1000202F0(*(_QWORD *)(v0 + 488), &qword_100127220);
        v18 = 0;
      }
      else
      {
        v19 = TaskPriority.rawValue.getter(v16);
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v17, v35);
        v18 = v19;
      }
      v20 = *v36;
      if (*v36)
      {
        v21 = *(_QWORD *)(v10 + 24);
        ObjectType = swift_getObjectType(*v36);
        swift_unknownObjectRetain(v20);
        v23 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v21);
        v25 = v24;
        swift_unknownObjectRelease(v20);
      }
      else
      {
        v23 = 0;
        v25 = 0;
      }
      v26 = **(_QWORD **)(v0 + 432);
      v27 = v25 | v23;
      if (v25 | v23)
      {
        v27 = v0 + 336;
        *(_QWORD *)(v0 + 336) = 0;
        *(_QWORD *)(v0 + 344) = 0;
        *(_QWORD *)(v0 + 352) = v23;
        *(_QWORD *)(v0 + 360) = v25;
      }
      ++v2;
      v4 = *(_QWORD *)(v0 + 496);
      v3 = v37 + 2;
      *(_QWORD *)(v0 + 368) = 1;
      *(_QWORD *)(v0 + 376) = v27;
      *(_QWORD *)(v0 + 384) = v26;
      v5 = swift_task_create(v18 | 0x3100, v0 + 368, &type metadata for Int, &unk_100127838, v10);
      swift_release(v5);
      sub_100022F44(v42, v44);
      sub_1000202F0(v4, &qword_100127220);
    }
    while (v34 != v38 + 1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 440));
  }
  v28 = **(_QWORD **)(v0 + 432);
  v29 = sub_10001D138(&qword_100127AE0);
  ThrowingTaskGroup.makeAsyncIterator()(v28, &type metadata for Int, v29, &protocol self-conformance witness table for Error);
  v30 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  *(_QWORD *)(v0 + 504) = v30;
  *v30 = v0;
  v30[1] = sub_10003DFC4;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 392, 0, 0, *(_QWORD *)(v0 + 464), v0 + 424);
}

uint64_t sub_10003DFC4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 504));
  if (v0)
  {
    v3 = sub_10003E5E4;
  }
  else
  {
    *(_QWORD *)(v2 + 512) = 0;
    v3 = sub_10003E028;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003E028()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*(_BYTE *)(v0 + 400) == 1)
  {
    v1 = *(_QWORD *)(v0 + 512);
    v2 = *(unsigned int **)(v0 + 456);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 472) + 8))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 464));
    sub_10003C07C(*v2);
    if (v1)
    {
      if (qword_10012C3A0 != -1)
        swift_once(&qword_10012C3A0, sub_10003BDB4);
      v3 = type metadata accessor for Logger(0);
      sub_100020804(v3, (uint64_t)qword_1001314C8);
      swift_errorRetain(v1);
      v4 = swift_errorRetain(v1);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc(12, -1);
        v8 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v7 = 138412290;
        swift_errorRetain(v1);
        v9 = _swift_stdlib_bridgeErrorToNSError(v1);
        *(_QWORD *)(v0 + 416) = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v7 + 4, v7 + 12);
        *v8 = v9;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "PAT garbage collection failed: %@", v7, 0xCu);
        v10 = sub_10001D138(&qword_100127730);
        swift_arrayDestroy(v8, 1, v10);
        swift_slowDealloc(v8, -1, -1);
        swift_slowDealloc(v7, -1, -1);

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

      }
    }
    sub_10003C07C(0);
    v24 = *(_QWORD *)(v0 + 488);
    v25 = *(_QWORD *)(v0 + 480);
    swift_task_dealloc(*(_QWORD *)(v0 + 496));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 392);
    if (qword_10012C3A0 != -1)
      swift_once(&qword_10012C3A0, sub_10003BDB4);
    v12 = *(_QWORD *)(v0 + 456);
    v13 = type metadata accessor for Logger(0);
    sub_100020804(v13, (uint64_t)qword_1001314C8);
    v14 = sub_1000408A4(v12, v0 + 176);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(32, -1);
      v26 = v18;
      *(_DWORD *)v17 = 136315394;
      v19 = Application.description.getter(*(_DWORD *)(v0 + 176));
      v21 = v20;
      *(_QWORD *)(v17 + 4) = sub_1000230D0(v19, v20, &v26);
      swift_bridgeObjectRelease(v21);
      sub_1000408B4(v0 + 176);
      *(_WORD *)(v17 + 12) = 2048;
      *(_QWORD *)(v17 + 14) = v11;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Verified %s consistency proof chunk %ld", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      sub_1000408B4(v0 + 176);
    }

    v22 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v0 + 520) = v22;
    *v22 = v0;
    v22[1] = sub_10003E580;
    return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 392, 0, 0, *(_QWORD *)(v0 + 464), v0 + 424);
  }
}

uint64_t sub_10003E580()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 520));
  if (v0)
  {
    v3 = sub_10003E5E4;
  }
  else
  {
    *(_QWORD *)(v2 + 512) = 0;
    v3 = sub_10003E028;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003E5E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 480);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 472) + 8))(v3, *(_QWORD *)(v0 + 464));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003E648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v11;
  uint64_t v13;
  char v14;

  v7[50] = a4;
  v7[51] = a5;
  v7[49] = a1;
  v11 = (_QWORD *)swift_task_alloc(dword_1001277FC);
  v7[52] = v11;
  *v11 = v7;
  v11[1] = sub_10003E6DC;
  return sub_10003CF30(a5, a6, a7, v13, v14 & 1);
}

uint64_t sub_10003E6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*v4 + 416);
  v6 = *v4;
  *(_QWORD *)(v6 + 424) = a1;
  *(_QWORD *)(v6 + 432) = a2;
  *(_QWORD *)(v6 + 440) = a3;
  *(_QWORD *)(v6 + 448) = v3;
  swift_task_dealloc(v5);
  if (v3)
    return (*(uint64_t (**)(void))(v6 + 8))();
  else
    return swift_task_switch(sub_10003E754, 0, 0);
}

uint64_t sub_10003E754()
{
  uint64_t v0;
  Swift::Bool v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int *v35;
  void *v36;
  unsigned int v37;
  Swift::String v38;
  void *object;
  uint64_t v40;
  NSString v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void);
  uint64_t v57;
  void *v58;
  void *v59;
  unsigned int v60;
  Swift::String v61;
  void *v62;
  uint64_t v63;
  NSString v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  os_log_t log;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[3];

  v1 = ConsistencyProofResponse.isNewEpoch()();
  if (v2)
  {
    swift_errorRelease();
  }
  else if (v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 440));
    v3 = ConsistencyProofResponse.keyBag.getter();
    if (v3)
    {
      v4 = (void *)v3;
      sub_10006D80C();

    }
    v5 = *(_QWORD *)(*(_QWORD *)(v0 + 400) + 104);
    *(_QWORD *)(v0 + 456) = v5;
    if (v5)
    {
      *(_QWORD *)(v0 + 464) = *(_QWORD *)(*(_QWORD *)v5 + 184);
      return swift_task_switch(sub_10003EF2C, v5, 0);
    }
    v59 = *(void **)(v0 + 424);
    goto LABEL_25;
  }
  ConsistencyProofResponse.verify()();
  if (v7)
  {
    v8 = v7;
    if (qword_10012C3A0 != -1)
      swift_once(&qword_10012C3A0, sub_10003BDB4);
    v9 = *(_QWORD *)(v0 + 440);
    v10 = *(_QWORD *)(v0 + 400);
    v11 = type metadata accessor for Logger(0);
    sub_100020804(v11, (uint64_t)qword_1001314C8);
    sub_1000408A4(v10, v0 + 16);
    swift_errorRetain(v8);
    swift_bridgeObjectRetain(v9);
    v12 = swift_errorRetain(v8);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(_QWORD *)(v0 + 440);
    if (v15)
    {
      v66 = *(_QWORD *)(v0 + 432);
      v65 = *(_QWORD *)(v0 + 408);
      v17 = swift_slowAlloc(42, -1);
      v68 = (uint64_t *)swift_slowAlloc(8, -1);
      v70 = swift_slowAlloc(64, -1);
      v72[0] = v70;
      *(_DWORD *)v17 = 136315906;
      v18 = Application.description.getter(*(_DWORD *)(v0 + 16));
      v20 = v19;
      *(_QWORD *)(v0 + 360) = sub_1000230D0(v18, v19, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v20);
      sub_1000408B4(v0 + 16);
      *(_WORD *)(v17 + 12) = 2048;
      *(_QWORD *)(v0 + 336) = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v17 + 14, v17 + 22);
      *(_WORD *)(v17 + 22) = 2080;
      swift_bridgeObjectRetain(v16);
      *(_QWORD *)(v0 + 344) = sub_1000230D0(v66, v16, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v17 + 24, v17 + 32);
      swift_bridgeObjectRelease_n(v16, 3);
      *(_WORD *)(v17 + 32) = 2112;
      swift_errorRetain(v8);
      v21 = _swift_stdlib_bridgeErrorToNSError(v8);
      *(_QWORD *)(v0 + 352) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v17 + 34, v17 + 42);
      *v68 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s consistency chunk %ld with %s failed verification %@", (uint8_t *)v17, 0x2Au);
      v22 = sub_10001D138(&qword_100127730);
      swift_arrayDestroy(v68, 1, v22);
      swift_slowDealloc(v68, -1, -1);
      swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      sub_1000408B4(v0 + 16);
      swift_bridgeObjectRelease_n(v16, 2);
      swift_errorRelease();
      swift_errorRelease();
    }

    v35 = *(int **)(v0 + 400);
    v36 = (void *)*((_QWORD *)v35 + 14);
    if (v36)
    {
      v37 = *v35;
      strcpy((char *)v72, "SWTFetchCnst-");
      HIWORD(v72[1]) = -4864;
      v38._countAndFlagsBits = Application.description.getter(v37);
      object = v38._object;
      String.append(_:)(v38);
      swift_bridgeObjectRelease(object);
      v40 = v72[1];
      v41 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
      v42 = (void *)_convertErrorToNSError(_:)(v8);
      objc_msgSend(v36, "logResultForEvent:hardFailure:result:", v41, 1, v42);

      v35 = *(int **)(v0 + 400);
    }
    v43 = *(void **)(v0 + 424);
    v44 = *((_QWORD *)v35 + 18);
    v45 = *((_QWORD *)v35 + 19);
    sub_100022F20((_QWORD *)v35 + 15, v44);
    v46 = sub_10001D138(&qword_100127840);
    v47 = *(_QWORD *)(sub_10001D138(&qword_100127848) - 8);
    v48 = *(_QWORD *)(v47 + 72);
    v49 = *(unsigned __int8 *)(v47 + 80);
    v50 = (v49 + 32) & ~v49;
    v51 = swift_allocObject(v46, v50 + v48, v49 | 7);
    *(_OWORD *)(v51 + 16) = xmmword_1000DC1E0;
    v52 = (_QWORD *)(v51 + v50);
    *v52 = 7368801;
    v52[1] = 0xE300000000000000;
    v53 = *v35;
    swift_errorRetain(v8);
    EventValue.init(integerLiteral:)(v53);
    v54 = sub_10003F064(v51);
    (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v45 + 8))(0x6863746566747753, 0xEC00000074736E63, v8, v54, v44, v45);
    swift_bridgeObjectRelease(v54);
    v55 = swift_errorRelease();
    swift_willThrow(v55);

    v56 = *(uint64_t (**)(void))(v0 + 8);
    return v56();
  }
  if (qword_10012C3A0 != -1)
    swift_once(&qword_10012C3A0, sub_10003BDB4);
  v23 = *(_QWORD *)(v0 + 440);
  v24 = *(_QWORD *)(v0 + 400);
  v25 = type metadata accessor for Logger(0);
  sub_100020804(v25, (uint64_t)qword_1001314C8);
  sub_1000408A4(v24, v0 + 176);
  v26 = swift_bridgeObjectRetain(v23);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  v29 = os_log_type_enabled(v27, v28);
  v30 = *(_QWORD *)(v0 + 440);
  if (v29)
  {
    log = *(os_log_t *)(v0 + 432);
    v67 = *(_QWORD *)(v0 + 408);
    v31 = swift_slowAlloc(32, -1);
    v71 = swift_slowAlloc(64, -1);
    v72[0] = v71;
    *(_DWORD *)v31 = 136315650;
    v32 = Application.description.getter(*(_DWORD *)(v0 + 176));
    v34 = v33;
    *(_QWORD *)(v0 + 368) = sub_1000230D0(v32, v33, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease(v34);
    sub_1000408B4(v0 + 176);
    *(_WORD *)(v31 + 12) = 2048;
    *(_QWORD *)(v0 + 376) = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v31 + 14, v31 + 22);
    *(_WORD *)(v31 + 22) = 2080;
    swift_bridgeObjectRetain(v30);
    *(_QWORD *)(v0 + 384) = sub_1000230D0((uint64_t)log, v30, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v31 + 24, v31 + 32);
    swift_bridgeObjectRelease_n(v30, 3);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s consistency chunk %ld with %s verified", (uint8_t *)v31, 0x20u);
    swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    sub_1000408B4(v0 + 176);
    swift_bridgeObjectRelease_n(v30, 2);
  }

  v57 = *(_QWORD *)(v0 + 400);
  v58 = *(void **)(v57 + 112);
  v59 = *(void **)(v0 + 424);
  if (v58)
  {
    v60 = *(_DWORD *)v57;
    strcpy((char *)v72, "SWTFetchCnst-");
    HIWORD(v72[1]) = -4864;
    v61._countAndFlagsBits = Application.description.getter(v60);
    v62 = v61._object;
    String.append(_:)(v61);
    swift_bridgeObjectRelease(v62);
    v63 = v72[1];
    v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v63);
    objc_msgSend(v58, "logResultForEvent:hardFailure:result:", v64, 0, 0);

    v59 = v64;
  }
LABEL_25:

  **(_QWORD **)(v0 + 392) = *(_QWORD *)(v0 + 408);
  v56 = *(uint64_t (**)(void))(v0 + 8);
  return v56();
}

uint64_t sub_10003EF2C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 464))(1);
  return swift_task_switch(sub_10003EF6C, 0, 0);
}

uint64_t sub_10003EF6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 400) + 104);
  *(_QWORD *)(v0 + 472) = v1;
  if (v1)
  {
    *(_QWORD *)(v0 + 480) = *(_QWORD *)(*(_QWORD *)v1 + 184);
    return swift_task_switch(sub_10003EFE4, v1, 0);
  }
  else
  {

    **(_QWORD **)(v0 + 392) = *(_QWORD *)(v0 + 408);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10003EFE4()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 480))(3);
  return swift_task_switch(sub_10003F024, 0, 0);
}

uint64_t sub_10003F024()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 392) = *(_QWORD *)(v0 + 408);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10003F064(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_10001D138(&qword_100127848);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_10001D138(&qword_100127850);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10002AC5C(v13, (uint64_t)v5, &qword_100127848);
    v15 = *v5;
    v16 = v5[1];
    result = sub_10003AFB8(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for EventValue(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

_QWORD *sub_10003F204(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001D138(&qword_100127868);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000402DC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10003F310(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001D138(&qword_100127860);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10004009C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10003F41C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001D138(&qword_100127858);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000408D8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

Swift::Int sub_10003F528(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100040088(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_10003F590(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10003F590(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  Swift::Int v96;
  Swift::Int v97;
  uint64_t v98;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v80 = 0;
      v81 = *v2;
      v82 = 1;
      while (1)
      {
        v83 = *(_QWORD *)(v81 + 8 * v82);
        v84 = v80;
        do
        {
          v85 = *(_QWORD *)(v81 + v84);
          if (v83 >= v85)
            break;
          if (!v81)
            goto LABEL_143;
          *(_QWORD *)(v81 + v84 + 8) = v85;
          *(_QWORD *)(v81 + v84) = v83;
          v84 -= 8;
        }
        while (v84 != -8);
        ++v82;
        v80 += 8;
        if (v82 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v96 = result;
  v97 = v3;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v95 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for Int64);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v97;
    v95 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v93 = v2;
  v94 = *v2 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v98 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_140;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_146;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_138;
      if (v9 - v13 < v96)
      {
        v21 = v13 + v96;
        if (__OFADD__(v13, v96))
          goto LABEL_141;
        if (v21 >= v3)
          v21 = v3;
        if (v21 < v13)
          goto LABEL_142;
        if (v9 != v21)
        {
          v22 = (uint64_t *)(v94 + 8 * v9);
          do
          {
            v23 = *(_QWORD *)(v10 + 8 * v9);
            v24 = v13;
            v25 = v22;
            do
            {
              v26 = *v25;
              if (v23 >= *v25)
                break;
              if (!v10)
                goto LABEL_144;
              *v25 = v23;
              v25[1] = v26;
              --v25;
              ++v24;
            }
            while (v9 != v24);
            ++v9;
            ++v22;
          }
          while (v9 != v21);
          v9 = v21;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1000285B0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v98;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_1000285B0((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v98;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
      break;
    v12 = 1;
LABEL_15:
    v3 = v97;
    if (v9 >= v97)
    {
      v8 = v95;
      v2 = v93;
LABEL_104:
      v95 = v8;
      if (v12 < 2)
      {
LABEL_115:
        v79 = v11;
        goto LABEL_116;
      }
      v86 = *v2;
      while (1)
      {
        v87 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v86)
          goto LABEL_147;
        v78 = v11;
        v88 = v11 + 32;
        v89 = *(_QWORD *)&v11[16 * v87 + 32];
        v90 = *(_QWORD *)&v11[16 * v12 + 24];
        sub_10003FC18((char *)(v86 + 8 * v89), (char *)(v86 + 8 * *(_QWORD *)&v88[16 * v12 - 16]), v86 + 8 * v90, __dst);
        if (v1)
          goto LABEL_95;
        if (v90 < v89)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
          v78 = sub_1000286A8((uint64_t)v78);
        if (v87 >= *((_QWORD *)v78 + 2))
          goto LABEL_136;
        v91 = &v78[16 * v87 + 32];
        *(_QWORD *)v91 = v89;
        *((_QWORD *)v91 + 1) = v90;
        v92 = *((_QWORD *)v78 + 2);
        if (v12 > v92)
          goto LABEL_137;
        memmove(&v78[16 * v12 + 16], &v78[16 * v12 + 32], 16 * (v92 - v12));
        v11 = v78;
        *((_QWORD *)v78 + 2) = v92 - 1;
        v12 = v92 - 1;
        if (v92 <= 2)
          goto LABEL_115;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v31 = v12 - 1;
    if (v12 >= 4)
    {
      v36 = &v29[16 * v12];
      v37 = *((_QWORD *)v36 - 8);
      v38 = *((_QWORD *)v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_122;
      v41 = *((_QWORD *)v36 - 6);
      v40 = *((_QWORD *)v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_123;
      v43 = v12 - 2;
      v44 = &v29[16 * v12 - 32];
      v46 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_125;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_128;
      if (v48 >= v39)
      {
        v66 = &v29[16 * v31];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_132;
        v59 = v34 < v69;
        goto LABEL_84;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v60 = *((_QWORD *)v11 + 4);
        v61 = *((_QWORD *)v11 + 5);
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_78;
      }
      v33 = *((_QWORD *)v11 + 4);
      v32 = *((_QWORD *)v11 + 5);
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_124;
    v43 = v12 - 2;
    v49 = &v29[16 * v12 - 32];
    v51 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_127;
    v55 = &v29[16 * v31];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_130;
    if (__OFADD__(v53, v58))
      goto LABEL_131;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_84:
      if (v59)
        v31 = v43;
      goto LABEL_86;
    }
LABEL_78:
    if ((v54 & 1) != 0)
      goto LABEL_126;
    v62 = &v29[16 * v31];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_129;
    if (v65 < v53)
      goto LABEL_15;
LABEL_86:
    v70 = v31 - 1;
    if (v31 - 1 >= v12)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v10)
      goto LABEL_145;
    v71 = &v29[16 * v70];
    v72 = *(_QWORD *)v71;
    v73 = v29;
    v74 = &v29[16 * v31];
    v75 = *((_QWORD *)v74 + 1);
    sub_10003FC18((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
    if (v1)
      break;
    if (v75 < v72)
      goto LABEL_119;
    if (v31 > *((_QWORD *)v11 + 2))
      goto LABEL_120;
    *(_QWORD *)v71 = v72;
    *(_QWORD *)&v73[16 * v70 + 8] = v75;
    v76 = *((_QWORD *)v11 + 2);
    if (v31 >= v76)
      goto LABEL_121;
    v12 = v76 - 1;
    memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
    v29 = v73;
    *((_QWORD *)v11 + 2) = v76 - 1;
    v10 = v98;
    if (v76 <= 2)
      goto LABEL_15;
  }
  v78 = v11;
LABEL_95:
  v79 = v78;
LABEL_116:
  swift_bridgeObjectRelease(v79);
  v95[2] = 0;
  return swift_bridgeObjectRelease(v95);
}

uint64_t sub_10003FC18(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_10003FE84((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10003FE84(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

uint64_t sub_10003FF2C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001D138(&qword_100127860);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100040088(uint64_t a1)
{
  return sub_10003FF2C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_10004009C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_100040184(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)sub_10003F310(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[8 * a1 + 32];
    v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14])
      result = (char *)memmove(result, v15, 8 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000402DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_10001D138(&qword_1001277F0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_1000403E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int64_t *v20;
  int64_t v21;
  uint64_t v22;
  int64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  _QWORD *result;
  uint64_t v37[2];
  uint64_t *v38;

  v7 = (uint64_t *)a1;
  if (a2)
  {
    v37[0] = a1;
    swift_bridgeObjectRetain(a1);
    sub_10003F528(v37);
    v7 = (uint64_t *)v37[0];
    v38 = (uint64_t *)v37[0];
    v9 = *(_QWORD *)(v37[0] + 16);
    if ((a4 & 1) != 0)
    {
      if (!v9)
      {
LABEL_48:
        swift_release(v37[0]);
        return _swiftEmptyArrayStorage;
      }
      a3 = *(_QWORD *)(v37[0] + 32);
    }
    else if (!v9)
    {
      goto LABEL_48;
    }
    if (a2 < 0)
      goto LABEL_53;
    v14 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v4 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v9 >= a2)
        v15 = a2;
      else
        v15 = v9;
      v16 = swift_bridgeObjectRetain(v7);
      v17 = swift_unknownObjectRetain_n(v16, 2);
      v18 = (_QWORD *)swift_dynamicCastClass(v17, v14);
      if (!v18)
      {
        swift_bridgeObjectRelease(v7);
        v18 = _swiftEmptyArrayStorage;
      }
      v19 = v18[2];
      swift_release(v18);
      if (v19 == v15)
      {
        v20 = (int64_t *)swift_dynamicCastClass(v7, v14);
        if (!v20)
        {
          swift_bridgeObjectRelease(v7);
          v20 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v7);
        v30 = sub_10001D138(&qword_100127860);
        v31 = v15;
        v20 = (int64_t *)swift_allocObject(v30, 8 * v15 + 32, 7);
        v32 = j__malloc_size(v20);
        v33 = v32 - 32;
        if (v32 < 32)
          v33 = v32 - 25;
        v20[2] = v15;
        v20[3] = 2 * (v33 >> 3);
        v34 = (char *)(v7 + 4);
        v35 = (char *)(v20 + 4);
        if (v7 + 4 < &v20[v31 + 4] && v35 < &v34[v31 * 8])
        {
          _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
          __break(1u);
          swift_release(v7);
          __break(1u);
          result = (_QWORD *)swift_release(v38);
          __break(1u);
          return result;
        }
        memcpy(v35, v34, 8 * v15);
      }
      swift_bridgeObjectRelease(v7);
      v7 = (uint64_t *)&v38;
      sub_100040184(0, v20[2]);
      v21 = v20[2];
      if (!v21)
        goto LABEL_25;
      if (v20[4] != a3)
      {
        if (v21 == 1)
          goto LABEL_25;
        if (v20[5] != a3)
          break;
      }
LABEL_30:
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_10003F204(0, v4[2] + 1, 1, v4);
      v27 = v4[2];
      v26 = v4[3];
      if (v27 >= v26 >> 1)
        v4 = sub_10003F204((_QWORD *)(v26 > 1), v27 + 1, 1, v4);
      v4[2] = v27 + 1;
      v4[v27 + 4] = v20;
      v7 = v38;
      v9 = v38[2];
      if (!v9)
      {
        swift_bridgeObjectRelease(v38);
        return v4;
      }
    }
    if (v21 != 2)
    {
      v28 = 6;
      while (1)
      {
        v29 = v28 - 3;
        if (__OFADD__(v28 - 4, 1))
          break;
        if (v20[v28] == a3)
          goto LABEL_30;
        ++v28;
        if (v29 == v21)
          goto LABEL_25;
      }
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      v7 = sub_10003F310(0, v7[2] + 1, 1, v7);
LABEL_7:
      v13 = v7[2];
      v12 = v7[3];
      if (v13 >= v12 >> 1)
        v7 = sub_10003F310((_QWORD *)(v12 > 1), v13 + 1, 1, v7);
      v7[2] = v13 + 1;
      v7[v13 + 4] = a3;
      v38 = v7;
      swift_bridgeObjectRetain(v7);
      sub_10003F528((uint64_t *)&v38);
      swift_bridgeObjectRelease(v7);
      goto LABEL_50;
    }
LABEL_25:
    v22 = swift_retain(v20);
    v23 = v20;
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
      v23 = sub_10003F310(0, v21 + 1, 1, v20);
    v25 = v23[2];
    v24 = v23[3];
    if (v25 >= v24 >> 1)
      v23 = sub_10003F310((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
    v23[2] = v25 + 1;
    v23[v25 + 4] = a3;
    swift_release(v20);
    v37[0] = (uint64_t)v23;
    swift_bridgeObjectRetain(v23);
    sub_10003F528(v37);
    swift_bridgeObjectRelease(v23);
    v20 = (int64_t *)v37[0];
    goto LABEL_30;
  }
  v10 = sub_10001D138(&qword_100127868);
  v4 = (_QWORD *)swift_allocObject(v10, 40, 7);
  *((_OWORD *)v4 + 1) = xmmword_1000DC1E0;
  if ((a4 & 1) == 0)
  {
    v11 = swift_bridgeObjectRetain(v7);
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      goto LABEL_54;
    goto LABEL_7;
  }
  v38 = v7;
  swift_bridgeObjectRetain(v7);
  sub_10003F528((uint64_t *)&v38);
LABEL_50:
  v4[4] = v38;
  return v4;
}

unint64_t sub_100040860()
{
  unint64_t result;

  result = qword_1001277E8;
  if (!qword_1001277E8)
  {
    result = swift_getWitnessTable(&unk_1000DC5EC, &type metadata for ConsistencyDownloadError);
    atomic_store(result, (unint64_t *)&qword_1001277E8);
  }
  return result;
}

uint64_t sub_1000408A4(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for ConsistencyDownload(a2, a1);
}

uint64_t sub_1000408B4(uint64_t a1)
{
  destroy for ConsistencyDownload(a1);
  return a1;
}

uint64_t sub_1000408D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000409C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_BYTE *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 40);
  v9 = (_QWORD *)swift_task_alloc(dword_10012780C);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100020638;
  return sub_10003DBB4((uint64_t)v9, a2, v5, v6, v7, v8);
}

uint64_t getEnumTagSinglePayload for ConsistencyDownloadError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConsistencyDownloadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100040AD0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_100040AE8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConsistencyDownloadError()
{
  return &type metadata for ConsistencyDownloadError;
}

ValueMetadata *type metadata accessor for ActualConsistencyFetcher()
{
  return &type metadata for ActualConsistencyFetcher;
}

uint64_t destroy for ConsistencyDownload(uint64_t a1)
{

  sub_100023CAC((_QWORD *)(a1 + 24));
  sub_100023CAC((_QWORD *)(a1 + 64));
  swift_release(*(_QWORD *)(a1 + 104));

  return sub_100023CAC((_QWORD *)(a1 + 120));
}

uint64_t initializeWithCopy for ConsistencyDownload(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  id v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a1 + 24;
  v7 = a2 + 24;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  v11 = v4;
  v12 = v5;
  v10(v6, v7, v9);
  v13 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 64, a2 + 64);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(void **)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v15;
  v16 = a2 + 120;
  v17 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v17;
  v18 = v17;
  v19 = **(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8);
  swift_retain(v14);
  v20 = v15;
  v19(a1 + 120, v16, v18);
  return a1;
}

uint64_t assignWithCopy for ConsistencyDownload(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 16);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  sub_10003A54C((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
  sub_10003A54C((_QWORD *)(a1 + 64), (_QWORD *)(a2 + 64));
  v10 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = *(void **)(a1 + 112);
  v13 = *(void **)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v13;
  v14 = v13;

  sub_10003A54C((_QWORD *)(a1 + 120), (_QWORD *)(a2 + 120));
  return a1;
}

__n128 initializeWithTake for ConsistencyDownload(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for ConsistencyDownload(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  sub_100023CAC((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100023CAC((_QWORD *)(a1 + 64));
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  swift_release(v7);
  v9 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  sub_100023CAC((_QWORD *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConsistencyDownload(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConsistencyDownload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConsistencyDownload()
{
  return &type metadata for ConsistencyDownload;
}

uint64_t initializeBufferWithCopyOfBuffer for ConsistencyDownload.ProofRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ConsistencyDownload.ProofRequest(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for ConsistencyDownload.ProofRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[1] = v6;
  return a1;
}

__n128 initializeWithTake for ConsistencyDownload.ProofRequest(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for ConsistencyDownload.ProofRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConsistencyDownload.ProofRequest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConsistencyDownload.ProofRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConsistencyDownload.ProofRequest()
{
  return &type metadata for ConsistencyDownload.ProofRequest;
}

unint64_t sub_100041024()
{
  unint64_t result;

  result = qword_100127820;
  if (!qword_100127820)
  {
    result = swift_getWitnessTable(&unk_1000DC674, &type metadata for ConsistencyDownloadError);
    atomic_store(result, (unint64_t *)&qword_100127820);
  }
  return result;
}

uint64_t sub_100041068()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  sub_100023CAC((_QWORD *)(v0 + 56));
  sub_100023CAC((_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 136));

  sub_100023CAC((_QWORD *)(v0 + 152));
  sub_100022F44(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 216));
  return swift_deallocObject(v0, 233, 7);
}

uint64_t sub_1000410D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = v1 + 32;
  v5 = *(_QWORD *)(v1 + 192);
  v6 = *(_QWORD *)(v1 + 200);
  v7 = *(_QWORD *)(v1 + 208);
  v8 = *(_QWORD *)(v1 + 224);
  v9 = *(_BYTE *)(v1 + 232);
  v10 = (_QWORD *)swift_task_alloc(dword_100127834);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001E4EC;
  v10[50] = v4;
  v10[51] = v5;
  v10[49] = a1;
  v11 = (_QWORD *)swift_task_alloc(dword_1001277FC);
  v10[52] = v11;
  *v11 = v10;
  v11[1] = sub_10003E6DC;
  return sub_10003CF30(v5, v6, v7, v8, v9);
}

uint64_t *sub_10004118C()
{
  return &qword_100127870;
}

uint64_t sub_100041198()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_100127870, v2, 0, 0);
  v0 = qword_100127870;
  swift_bridgeObjectRetain(off_100127878);
  return v0;
}

uint64_t sub_1000411E8(uint64_t a1, void *a2)
{
  void *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_100127870, v6, 1, 0);
  v4 = off_100127878;
  qword_100127870 = a1;
  off_100127878 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_100041240(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_100127870, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_100041280(uint64_t a1, uint64_t a2, char a3)
{
  return qword_1000DC878[a3];
}

uint64_t sub_100041294(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100041CB4();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000412BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100041CB4();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000412E4()
{
  uint64_t v0;

  return qword_1000DC878[*(char *)(v0 + 16)];
}

uint64_t sub_1000412F8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _UNKNOWN **v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *i;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  _QWORD v27[8];
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v28 = a2;
  v29 = a1;
  v6 = type metadata accessor for SHA256(0);
  v27[5] = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v7 = type metadata accessor for SHA256Digest(0);
  v27[7] = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v27[6] = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static SerializationVersion.allCases.getter();
  v10 = *v3;
  v11 = v9[2];
  if (v11)
  {
    v27[3] = v4;
    v27[4] = v7;
    v27[2] = a3;
    v12 = sub_100028E0C();
    v13 = 0;
    while (1)
    {
      v31[0] = *((_BYTE *)v9 + v13 + 32);
      LOBYTE(v30) = v10;
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v31, &v30, &type metadata for SerializationVersion, v12) & 1) != 0)
        break;
      if (v11 == (void *)++v13)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease(v9);
    v17 = static ATLeafType.allCases.getter();
    v18 = v3[1];
    v19 = (char *)v17[2];
    if (v19)
    {
      v20 = sub_100028EB8();
      for (i = 0; i != v19; ++i)
      {
        v31[0] = i[(_QWORD)v17 + 32];
        LOBYTE(v30) = v18;
        if ((dispatch thunk of static Equatable.== infix(_:_:)(v31, &v30, &type metadata for ATLeafType, v20) & 1) != 0)
        {
          swift_bridgeObjectRelease(v17);
          v25 = sub_100025DB4(&qword_100127888, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
          dispatch thunk of HashFunction.init()(v6, v25);
          v26 = (char *)&loc_100041574 + *((int *)qword_1000419F8 + (v28 >> 62));
          v27[1] = v3;
          __asm { BR              X10 }
        }
      }
    }
    swift_bridgeObjectRelease(v17);
    v22 = sub_100041A48();
    v15 = swift_allocError(&type metadata for ATLeafDataError, v22, 0, 0);
    *(_QWORD *)v23 = v18;
    *(_QWORD *)(v23 + 8) = 0;
    *(_BYTE *)(v23 + 16) = 1;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease(v9);
    v14 = sub_100041A48();
    v15 = swift_allocError(&type metadata for ATLeafDataError, v14, 0, 0);
    *(_QWORD *)v16 = v10;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
  }
  return swift_willThrow(v15);
}

unint64_t sub_100041A48()
{
  unint64_t result;

  result = qword_100127880;
  if (!qword_100127880)
  {
    result = swift_getWitnessTable(&unk_1000DC790, &type metadata for ATLeafDataError);
    atomic_store(result, (unint64_t *)&qword_100127880);
  }
  return result;
}

_BYTE *sub_100041A8C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_100041CF8(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_100041DB8((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_100041E30((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100041B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = __DataStorage._bytes.getter();
  if (v4)
  {
    v5 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v5))
    {
LABEL_13:
      __break(1u);
      JUMPOUT(0x100041BD4);
    }
    v4 += a1 - v5;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v4 + v9;
  if (v4)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for SHA256(0);
  v13 = sub_100025DB4(&qword_100127888, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v4, v11, v12, v13);
}

uint64_t getEnumTagSinglePayload for ATLeafDataError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ATLeafDataError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100041C74(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_100041C8C(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ATLeafDataError()
{
  return &type metadata for ATLeafDataError;
}

unint64_t sub_100041CB4()
{
  unint64_t result;

  result = qword_100127898;
  if (!qword_100127898)
  {
    result = swift_getWitnessTable(&unk_1000DC818, &type metadata for ATLeafDataError);
    atomic_store(result, (unint64_t *)&qword_100127898);
  }
  return result;
}

uint64_t sub_100041CF8(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_100041DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_100041E30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100041EB0(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;

  v2 = (id)Application_EnumDescriptor();
  v3 = objc_msgSend(v2, "textFormatNameForValue:", a1);

  if (!v3)
    return 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

uint64_t sub_100041F30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100049980();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100041F58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100049980();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100041F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000202A4(&qword_100127AB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for LogType, (uint64_t)&unk_1000DBEC0);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100042000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000202A4(&qword_100127AB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for LogType, (uint64_t)&unk_1000DBEC0);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100042068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000202A4(&qword_100127AA8, 255, (uint64_t (*)(uint64_t))type metadata accessor for KTResult, (uint64_t)&unk_1000DCEEC);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000420E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000202A4(&qword_100127AA8, 255, (uint64_t (*)(uint64_t))type metadata accessor for KTResult, (uint64_t)&unk_1000DCEEC);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t static KTSWDB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for KTSwiftDB();
  return (unint64_t)static KTSwiftDB.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1;
}

uint64_t sub_100042188()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 24));
}

id sub_100042190()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t sub_100042198()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_1000421C4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1000421CC()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t sub_1000421D4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_1000421DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_100022F88(v1, *(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t KTSWDB.STHKey.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  void *v12;

  v1 = *v0;
  v2 = (void *)v0[1];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  v10._countAndFlagsBits = 46;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  return 776492115;
}

uint64_t KTSWDB.STHKey.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *v2;
  v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(v2[2]);
  Hasher._combine(_:)(*((_DWORD *)v2 + 6));
  Hasher._combine(_:)(v2[4]);
  v7 = v2[5];
  v6 = v2[6];
  sub_100022F88(v7, v6);
  Data.hash(into:)(a1, v7, v6);
  return sub_100022F44(v7, v6);
}

uint64_t sub_1000423D4(char a1)
{
  return *(_QWORD *)&aApplicatlogbeg[8 * a1];
}

uint64_t sub_1000423FC()
{
  char *v0;

  return sub_1000423D4(*v0);
}

uint64_t sub_100042404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100046FB4(a1, a2);
  *a3 = result;
  return result;
}

void sub_100042428(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100042434(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046F2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004245C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046F2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t KTSWDB.STHKey.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v21;
  char v22;

  v3 = v1;
  v5 = sub_10001D138(&qword_1001278A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100022F20(a1, v9);
  v11 = sub_100046F2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KTSWDB.STHKey.CodingKeys, &type metadata for KTSWDB.STHKey.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v21) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v21, v5);
  if (!v2)
  {
    v14 = v3[2];
    LOBYTE(v21) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v21, v5);
    LODWORD(v21) = *((_DWORD *)v3 + 6);
    v22 = 2;
    type metadata accessor for LogType(0);
    v16 = v15;
    v17 = sub_1000202A4(&qword_1001278A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for LogType, (uint64_t)&protocol conformance descriptor for LogType);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v22, v5, v16, v17);
    v18 = v3[4];
    LOBYTE(v21) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v21, v5);
    v21 = *(_OWORD *)(v3 + 5);
    v22 = 4;
    v19 = sub_100046F70();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v22, v5, &type metadata for Data, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int KTSWDB.STHKey.hashValue.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v1 = v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = *v0;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v1[2]);
  Hasher._combine(_:)(*((_DWORD *)v1 + 6));
  Hasher._combine(_:)(v1[4]);
  v5 = v1[5];
  v4 = v1[6];
  sub_100022F88(v5, v4);
  Data.hash(into:)(v7, v5, v4);
  sub_100022F44(v5, v4);
  return Hasher._finalize()();
}

uint64_t sub_10004271C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_DWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = a7;
  return result;
}

double KTSWDB.STHKey.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1000471D8(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100042780(_QWORD *a1)
{
  return KTSWDB.STHKey.encode(to:)(a1);
}

Swift::Int sub_100042794()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt64 v3;
  Swift::UInt32 v4;
  Swift::UInt64 v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_DWORD *)v0 + 6);
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  Hasher.init(_seed:)(v9, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v9, v1, v2);
  swift_bridgeObjectRelease(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100022F88(v6, v7);
  Data.hash(into:)(v9, v6, v7);
  sub_100022F44(v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_100042860(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt64 v5;
  Swift::UInt32 v6;
  Swift::UInt64 v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = *((_DWORD *)v1 + 6);
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  sub_100022F88(v8, v9);
  Data.hash(into:)(a1, v8, v9);
  return sub_100022F44(v8, v9);
}

Swift::Int sub_100042910(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;
  Swift::UInt32 v5;
  Swift::UInt64 v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = *((_DWORD *)v1 + 6);
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  Hasher.init(_seed:)(v10, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v10, v2, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  sub_100022F88(v7, v8);
  Data.hash(into:)(v10, v7, v8);
  sub_100022F44(v7, v8);
  return Hasher._finalize()();
}

uint64_t sub_1000429DC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return _s15swtransparencyd6KTSWDBC6STHKeyV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v5, (uint64_t)v7) & 1;
}

uint64_t sub_100042A34()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_100042A3C(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_100042A44()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_100042A4C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t sub_100042A54(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*sub_100042A5C())(void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100042A6C(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t sub_100042A74(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*sub_100042A7C())(void)
{
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100042A8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead(0) + 40);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100042AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead(0) + 40);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_100042B1C())(_QWORD, _QWORD)
{
  type metadata accessor for KTSWDB.SignedLogHead(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100042B44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead(0) + 44));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100042B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead(0) + 44));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_100042BC4())(_QWORD, _QWORD)
{
  type metadata accessor for KTSWDB.SignedLogHead(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100042BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead(0) + 48);
  v2 = *(_QWORD *)v1;
  sub_100022F88(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t sub_100042C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead(0) + 48);
  result = sub_100022F44(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*sub_100042C70())(_QWORD, _QWORD)
{
  type metadata accessor for KTSWDB.SignedLogHead(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100042C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead(0) + 52);
  v2 = *(_QWORD *)v1;
  sub_100022F88(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t sub_100042CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead(0) + 52);
  result = sub_100022F44(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*sub_100042D1C())(_QWORD, _QWORD)
{
  type metadata accessor for KTSWDB.SignedLogHead(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100042D44()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead(0) + 56));
}

uint64_t sub_100042D64(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for KTSWDB.SignedLogHead(0);
  *(_QWORD *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*sub_100042D90())(_QWORD, _QWORD)
{
  type metadata accessor for KTSWDB.SignedLogHead(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100042DB8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for KTSWDB.SignedLogHead(0) + 60));
}

uint64_t sub_100042DD8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for KTSWDB.SignedLogHead(0);
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*sub_100042E04())(_QWORD, _QWORD)
{
  type metadata accessor for KTSWDB.SignedLogHead(0);
  return ATLogProofs.VerificationResult.result.getter;
}

uint64_t sub_100042E30(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100042E6C + 4 * byte_1000DC8A0[a1]))(0xD000000000000013, 0x80000001000E23C0);
}

unint64_t sub_100042E6C()
{
  return 0xD000000000000011;
}

uint64_t sub_100042EE0()
{
  return 0x5474706965636572;
}

uint64_t sub_100042F00()
{
  return 0x746163696C707061;
}

uint64_t sub_100042F20()
{
  return 0x4864616548676F6CLL;
}

uint64_t sub_100042F40()
{
  return 6845555;
}

uint64_t sub_100042F50()
{
  return 0x644965657274;
}

uint64_t sub_100042F64()
{
  return 0x7473656C694D7369;
}

uint64_t sub_100042F88()
{
  unsigned __int8 *v0;

  return sub_100042E30(*v0);
}

uint64_t sub_100042F90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000479A0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100042FB4(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_100042FC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047608();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100042FE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047608();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100043010(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  char v32;

  v3 = v1;
  v5 = sub_10001D138(&qword_1001278B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100022F20(a1, v9);
  v11 = sub_100047608();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KTSWDB.SignedLogHead.CodingKeys, &type metadata for KTSWDB.SignedLogHead.CodingKeys, v11, v9, v10);
  *(_QWORD *)&v31 = *(_QWORD *)v3;
  v32 = 0;
  type metadata accessor for KTResult(0);
  v13 = v12;
  v14 = sub_1000202A4(&qword_1001278C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for KTResult, (uint64_t)&protocol conformance descriptor for KTResult);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v5, v13, v14);
  if (!v2)
  {
    *(_QWORD *)&v31 = *(_QWORD *)(v3 + 8);
    v32 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v5, v13, v14);
    v15 = *(_QWORD *)(v3 + 16);
    LOBYTE(v31) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v31, v5);
    LODWORD(v31) = *(_DWORD *)(v3 + 24);
    v32 = 3;
    type metadata accessor for LogType(0);
    v17 = v16;
    v18 = sub_1000202A4(&qword_1001278A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for LogType, (uint64_t)&protocol conformance descriptor for LogType);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v5, v17, v18);
    v19 = *(_QWORD *)(v3 + 32);
    LOBYTE(v31) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v31, v5);
    *(_QWORD *)&v31 = *(_QWORD *)(v3 + 40);
    v32 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v5, v13, v14);
    v20 = (int *)type metadata accessor for KTSWDB.SignedLogHead(0);
    v21 = v3 + v20[10];
    LOBYTE(v31) = 6;
    v22 = type metadata accessor for Date(0);
    v23 = sub_1000202A4(&qword_1001278C8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v31, v5, v22, v23);
    v24 = (uint64_t *)(v3 + v20[11]);
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v31) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v26, &v31, v5);
    v31 = *(_OWORD *)(v3 + v20[12]);
    v32 = 8;
    v27 = sub_100046F70();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v5, &type metadata for Data, v27);
    v31 = *(_OWORD *)(v3 + v20[13]);
    v32 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v5, &type metadata for Data, v27);
    v28 = *(_QWORD *)(v3 + v20[14]);
    LOBYTE(v31) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v28, &v31, v5);
    v29 = *(unsigned __int8 *)(v3 + v20[15]);
    LOBYTE(v31) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v29, &v31, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000433E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_DWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  v19 = (int *)type metadata accessor for KTSWDB.SignedLogHead(0);
  v20 = a9 + v19[10];
  v21 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a7, v21);
  v23 = (_QWORD *)(a9 + v19[11]);
  *v23 = a8;
  v23[1] = a10;
  v24 = (_QWORD *)(a9 + v19[12]);
  *v24 = a11;
  v24[1] = a12;
  v25 = (_QWORD *)(a9 + v19[13]);
  *v25 = a13;
  v25[1] = a14;
  *(_QWORD *)(a9 + v19[14]) = a15;
  *(_BYTE *)(a9 + v19[15]) = a16;
  return result;
}

uint64_t sub_1000434C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int *v41;
  __int128 v42;
  char v43;

  v5 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = sub_10001D138(&qword_1001278D0);
  v8 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = (int *)type metadata accessor for KTSWDB.SignedLogHead(0);
  __chkstk_darwin(v41);
  v40 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v12 = a1[4];
  sub_100022F20(a1, v13);
  v14 = sub_100047608();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KTSWDB.SignedLogHead.CodingKeys, &type metadata for KTSWDB.SignedLogHead.CodingKeys, v14, v13, v12);
  if (v2)
    return sub_100023CAC(a1);
  v35 = a2;
  v36 = v8;
  type metadata accessor for KTResult(0);
  v16 = v15;
  v43 = 0;
  v17 = sub_1000202A4(&qword_1001278D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for KTResult, (uint64_t)&protocol conformance descriptor for KTResult);
  v18 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, v16, &v43, v37, v16, v17);
  v19 = v40;
  *v40 = v42;
  v43 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, v16, &v43, v18, v16, v17);
  v34 = v17;
  v19[1] = v42;
  LOBYTE(v42) = 2;
  v19[2] = KeyedDecodingContainer.decode(_:forKey:)(&v42, v18);
  type metadata accessor for LogType(0);
  v21 = v20;
  v43 = 3;
  v22 = sub_1000202A4(&qword_1001278E0, 255, (uint64_t (*)(uint64_t))type metadata accessor for LogType, (uint64_t)&protocol conformance descriptor for LogType);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, v21, &v43, v18, v21, v22);
  *((_DWORD *)v19 + 6) = v42;
  LOBYTE(v42) = 4;
  v19[4] = KeyedDecodingContainer.decode(_:forKey:)(&v42, v18);
  v43 = 5;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, v16, &v43, v18, v16, v34);
  v19[5] = v42;
  LOBYTE(v42) = 6;
  v23 = sub_1000202A4(&qword_1001278E8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v24 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v39, &v42, v18, v39, v23);
  v25 = v41;
  (*(void (**)(char *, _QWORD *, uint64_t))(v38 + 32))((char *)v19 + v41[10], v7, v24);
  LOBYTE(v42) = 7;
  v26 = v37;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v37);
  v28 = (_QWORD *)((char *)v19 + v25[11]);
  *v28 = v27;
  v28[1] = v29;
  v43 = 8;
  v30 = sub_100047660();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, &type metadata for Data, &v43, v26, &type metadata for Data, v30);
  *(_OWORD *)((char *)v19 + v41[12]) = v42;
  v43 = 9;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, &type metadata for Data, &v43, v26, &type metadata for Data, v30);
  *(_OWORD *)((char *)v40 + v41[13]) = v42;
  LOBYTE(v42) = 10;
  v31 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v37);
  *(_QWORD *)((char *)v40 + v41[14]) = v31;
  LOBYTE(v42) = 11;
  LOBYTE(v21) = KeyedDecodingContainer.decode(_:forKey:)(&v42, v37);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v37);
  v32 = (uint64_t)v40;
  *((_BYTE *)v40 + v41[15]) = v21 & 1;
  sub_1000476A4(v32, v35);
  sub_100023CAC(a1);
  return sub_100023798(v32);
}

uint64_t sub_100043B18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000434C8(a1, a2);
}

uint64_t sub_100043B2C(_QWORD *a1)
{
  return sub_100043010(a1);
}

uint64_t sub_100043B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 24);
  sub_10004A4FC();
  if (!v1)
  {
    v4 = v3;
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 160))();
    v6 = v5;
    if (v5
      && (v7 = *(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 112),
          swift_retain(v5),
          v2 = v7(0),
          v9 = v8,
          swift_release(v6),
          (v9 & 1) == 0)
      && v2)
    {
      swift_release(v6);
      swift_release(v4);
    }
    else
    {
      sub_10004A4FC();
      v11 = v10;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 160))(v10);
      swift_release(v4);
      swift_release(v11);
      swift_release(v6);
      if (v13)
      {
        swift_release(v13);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

void sub_100043CB8()
{
  uint64_t v0;

  sub_10004A474();
  if (!v0)
    sub_100043D00();
}

void sub_100043D00()
{
  uint64_t v0;
  Swift::String v1;
  void *object;

  sub_10004A474();
  if (!v0)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(0xE000000000000000);
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v1._object;
    String.append(_:)(v1);
    swift_bridgeObjectRelease(object);
    sub_10004A474();
    swift_bridgeObjectRelease(0x80000001000E2270);
  }
}

uint64_t KTSWDB.__allocating_init(db:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 40, 7);
  KTSWDB.init(db:)(a1);
  return v3;
}

uint64_t KTSWDB.init(db:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v3 = type metadata accessor for Logger(0);
  v52 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  v4 = __chkstk_darwin(v3);
  v51 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v50 = (char *)&v48 - v7;
  __chkstk_darwin(v6);
  v49 = (char *)&v48 - v8;
  v56 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue_serial.Attributes(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v1;
  *(_QWORD *)(v1 + 16) = 2;
  *(_QWORD *)(v1 + 24) = a1;
  v54 = sub_1000476E8();
  v18 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v18);
  v58 = (uint64_t)_swiftEmptyArrayStorage;
  v19 = sub_1000202A4(&qword_100127900, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue_serial.Attributes);
  v20 = sub_10001D138(&qword_100127908);
  v21 = sub_100047724();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v20, v21, v12, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v56);
  v22 = v17;
  v23 = v55;
  v24 = v14;
  v25 = a1;
  *(_QWORD *)(v23 + 32) = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000010, 0x80000001000E2290, v22, v24, v11, 0);
  v26 = v57;
  v27 = sub_100043B40();
  if (v26)
  {
    swift_release(v23);
LABEL_3:
    swift_release(v25);
    return v23;
  }
  v29 = v50;
  v30 = v51;
  v31 = v52;
  v32 = v53;
  v57 = v25;
  if (v27 == 1)
  {
    Logger.init()();
    v38 = swift_retain(v23);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v41 = 134217984;
      v58 = 2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v41 + 4, v41 + 12);
      swift_release(v23);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Opening existing swt database with schema version 1. Dropping table and replacing with schema version %ld.", v41, 0xCu);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      swift_release(v23);
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v32);
    sub_10004A474();
    v25 = v57;
    sub_100043D00();
    goto LABEL_3;
  }
  if (!v27)
  {
    v33 = v49;
    Logger.init()();
    v34 = swift_retain(v23);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v37 = 134217984;
      v58 = 2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v37 + 4, v37 + 12);
      swift_release(v23);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Creating new swt database with schema version %ld.", v37, 0xCu);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

      swift_release(v23);
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v32);
    sub_100043D00();
    v25 = v57;
    goto LABEL_3;
  }
  v42 = v51;
  Logger.init()();
  v43 = swift_retain(v23);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v46 = 134217984;
    v42 = v30;
    v58 = 2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v46 + 4, v46 + 12);
    swift_release(v23);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Opening existing swt database with schema version %ld", v46, 0xCu);
    swift_slowDealloc(v46, -1, -1);

    v47 = v57;
  }
  else
  {

    swift_release(v57);
    v47 = v23;
  }
  swift_release(v47);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v42, v32);
  return v23;
}

uint64_t sub_1000443B8()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  uint64_t v7;

  v1 = *(NSObject **)(v0 + 32);
  v2 = swift_allocObject(&unk_1001083C8, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_100047770;
  *(_QWORD *)(v2 + 24) = v0;
  v6[4] = sub_10001D9F8;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_10001DA18;
  v6[3] = &unk_1001083E0;
  v3 = _Block_copy(v6);
  v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 101, 203, 20, 1);
  swift_release(v0);
  result = swift_release(v2);
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1000444C0()
{
  uint64_t v0;

  return OS_dispatch_queue.sync<A>(execute:)(sub_1000477B8, v0, (char *)&type metadata for () + 8);
}

uint64_t sub_1000444F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[7] = a5;
  v6[3] = a1;
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100047828, v6, (char *)&type metadata for () + 8);
}

void sub_100044548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_10004A4FC();
  if (!v6)
  {
    v13 = v12;
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 120);
    v14(0, *(_QWORD *)(a2 + 16));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 112))(1, *(unsigned int *)(a2 + 24));
    v14(2, *(_QWORD *)(a2 + 32));
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 104))(3, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    v15 = *(_QWORD *)(a2 + 40);
    v16 = *(_QWORD *)(a2 + 48);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 144);
    v17(4, v15, v16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 128))(5, a3);
    v17(6, a4, a5);
    v18 = v14(7, a6);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 160))(v18);
    if (v19)
    {
      swift_release(v19);
      v20 = sub_100048100();
      v21 = swift_allocError(&type metadata for KTSWDBError, v20, 0, 0);
      *(_OWORD *)v22 = xmmword_1000DD160;
      *(_DWORD *)(v22 + 16) = 0;
      swift_willThrow(v21);
    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)v13 + 96))();
    }
    swift_release(v13);
  }
}

uint64_t sub_1000446B8(uint64_t a1, uint64_t a2)
{
  return sub_10004470C(a1, a2, (uint64_t)sub_10004783C);
}

uint64_t sub_1000446D4(uint64_t a1, uint64_t a2)
{
  return sub_10004470C(a1, a2, (uint64_t)sub_100047870);
}

uint64_t sub_1000446F0(uint64_t a1, uint64_t a2)
{
  return sub_10004470C(a1, a2, (uint64_t)sub_1000478A4);
}

uint64_t sub_10004470C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[3] = a2;
  v4[4] = a1;
  return OS_dispatch_queue.sync<A>(execute:)(a3, v4, (char *)&type metadata for () + 8);
}

void sub_100044758(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, unint64_t);
  void (*v9)(uint64_t, _QWORD);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_10004A4FC();
  if (!v3)
  {
    if (a2 >> 31)
    {
      __break(1u);
    }
    else
    {
      v7 = v6;
      v8 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)v6 + 112);
      v8(0, a2);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 104))(1, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
      v9 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 120);
      v9(2, *(_QWORD *)(a3 + 16));
      v8(3, *(unsigned int *)(a3 + 24));
      v9(4, *(_QWORD *)(a3 + 32));
      v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 144))(5, *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48));
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 160))(v10);
      if (v11)
      {
        swift_release(v11);
        v12 = sub_100048100();
        v13 = swift_allocError(&type metadata for KTSWDBError, v12, 0, 0);
        *(_OWORD *)v14 = xmmword_1000DD160;
        *(_DWORD *)(v14 + 16) = 0;
        swift_willThrow(v13);
      }
      else
      {
        (*(void (**)(void))(*(_QWORD *)v7 + 96))();
      }
      swift_release(v7);
    }
  }
}

uint64_t sub_10004488C(uint64_t a1)
{
  _QWORD v2[4];

  v2[3] = a1;
  return OS_dispatch_queue.sync<A>(execute:)(sub_1000478D8, v2, (char *)&type metadata for () + 8);
}

void sub_1000448D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t, _QWORD);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10004A4FC();
  if (!v2)
  {
    v5 = v4;
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 112);
    v6(0, 1);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 104))(1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    v7 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 120);
    v7(2, *(_QWORD *)(a2 + 16));
    v6(3, *(unsigned int *)(a2 + 24));
    v7(4, *(_QWORD *)(a2 + 32));
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 144))(5, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 160))(v8);
    if (v9)
    {
      swift_release(v9);
      v10 = sub_100048100();
      v11 = swift_allocError(&type metadata for KTSWDBError, v10, 0, 0);
      *(_OWORD *)v12 = xmmword_1000DD160;
      *(_DWORD *)(v12 + 16) = 0;
      swift_willThrow(v11);
    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)v5 + 96))();
    }
    swift_release(v5);
  }
}

uint64_t sub_100044A08(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[4];

  v3[3] = a1;
  v1 = type metadata accessor for KTSWDB.SignedLogHead(0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_1000478F0, v3, v1);
}

void sub_100044A68(uint64_t a1@<X1>, void (*a2)(_QWORD)@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  int *v47;
  void (*v48)(_QWORD);
  BOOL v49;
  uint64_t v50;
  uint64_t (*v51)(_QWORD);
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  unint64_t v76;
  void (*v77)(_QWORD);

  v5 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v5);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004A4FC();
  if (v2)
    return;
  v13 = v12;
  v77 = a2;
  v14 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 120);
  v14(0, *(_QWORD *)(a1 + 16));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 112))(1, *(unsigned int *)(a1 + 24));
  v14(2, *(_QWORD *)(a1 + 32));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 104))(3, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v15 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 144))(4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 160))(v15);
  v17 = v16;
  if (!v16)
  {
    v29 = sub_100048100();
    v30 = swift_allocError(&type metadata for KTSWDBError, v29, 0, 0);
    *(_QWORD *)v31 = 0;
    *(_QWORD *)(v31 + 8) = 0;
    *(_DWORD *)(v31 + 16) = 0;
    swift_willThrow(v30);
    swift_release(v13);
    return;
  }
  v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 104);
  swift_retain_n(v16, 2);
  v19 = v18(0);
  if ((v19 & 0x100000000) != 0)
    goto LABEL_16;
  v20 = v18;
  v21 = v19;
  v76 = (unint64_t)v20;
  v22 = v20(1);
  if ((v22 & 0x100000000) != 0)
    goto LABEL_16;
  v74 = v22;
  v75 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 112);
  v23 = v75(2);
  if ((v24 & 1) != 0
    || (v73 = v23, v25 = ((uint64_t (*)(uint64_t))v76)(3), (v25 & 0x100000000) != 0)
    || (v72 = v25, v26 = v75(4), (v27 & 1) != 0)
    || (v71 = v26, v28 = ((uint64_t (*)(uint64_t))v76)(5), (v28 & 0x100000000) != 0))
  {
LABEL_16:
    swift_release(v17);
    goto LABEL_17;
  }
  v70 = v28;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 120))(6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    swift_release(v17);
    sub_100049C70((uint64_t)v7);
LABEL_17:
    v37 = sub_100048100();
    v38 = swift_allocError(&type metadata for KTSWDBError, v37, 0, 0);
    *(_QWORD *)v39 = 0;
    *(_QWORD *)(v39 + 8) = 0;
    *(_DWORD *)(v39 + 16) = 0;
    swift_willThrow(v38);
    swift_release(v13);
    swift_release_n(v17, 2);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 96))(7);
  if (!v33)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_16;
  }
  v66 = v32;
  v69 = v33;
  v34 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 128);
  v35 = v34(8);
  if (v36 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_32:
    swift_release(v17);
LABEL_33:
    swift_bridgeObjectRelease(v69);
    goto LABEL_17;
  }
  v67 = v35;
  v68 = v36;
  v65 = v34(9);
  if (v40 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v41 = v67;
    v42 = v68;
LABEL_31:
    sub_100027420(v41, v42);
    goto LABEL_32;
  }
  v43 = v40;
  v75 = (uint64_t (*)(uint64_t))v75(10);
  if ((v44 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_100027420(v67, v68);
    v41 = v65;
    v42 = v43;
    goto LABEL_31;
  }
  v64 = v43;
  v45 = ((uint64_t (*)(uint64_t))v76)(11);
  swift_release(v17);
  if ((v45 & 0x100000000) != 0)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_100027420(v65, v64);
    sub_100027420(v67, v68);
    goto LABEL_33;
  }
  if ((v21 & 0x80000000) != 0 || (v74 & 0x80000000) != 0 || (v70 & 0x80000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    v46 = v45;
    v63 = v21;
    v74 = v74;
    v76 = v70;
    v47 = (int *)type metadata accessor for KTSWDB.SignedLogHead(0);
    v48 = v77;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v77 + v47[10], v11, v8);
    v49 = v46 == 0;
    v50 = v74;
    *(_QWORD *)v48 = v63;
    *((_QWORD *)v48 + 1) = v50;
    *((_QWORD *)v48 + 2) = v73;
    *((_DWORD *)v48 + 6) = v72;
    v51 = (uint64_t (*)(_QWORD))v76;
    *((_QWORD *)v48 + 4) = v71;
    *((_QWORD *)v48 + 5) = v51;
    v52 = (uint64_t *)((char *)v48 + v47[11]);
    v53 = v69;
    *v52 = v66;
    v52[1] = v53;
    v54 = (_QWORD *)((char *)v48 + v47[12]);
    v55 = v67;
    *v54 = v67;
    v56 = v55;
    v57 = v68;
    v54[1] = v68;
    v58 = (_QWORD *)((char *)v48 + v47[13]);
    v59 = v64;
    *v58 = v65;
    v58[1] = v59;
    *(_QWORD *)((char *)v48 + v47[14]) = v75;
    v60 = !v49;
    *((_BYTE *)v48 + v47[15]) = v60;
    v77 = *(void (**)(_QWORD))(*(_QWORD *)v13 + 96);
    sub_100049CB0(v56, v57);
    v61 = v65;
    v62 = sub_100049CB0(v65, v59);
    v77(v62);
    swift_release_n(v17, 2);
    swift_release(v13);
    sub_100027420(v61, v59);
    sub_100027420(v67, v68);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_10004504C(uint64_t a1)
{
  _QWORD v2[4];

  v2[3] = a1;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100047908, v2, (char *)&type metadata for () + 8);
}

void sub_100045094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD);

  sub_10004A4FC();
  if (!v2)
  {
    v5 = v4;
    v6 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 120);
    v6(0, *(_QWORD *)(a2 + 16));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 112))(1, *(unsigned int *)(a2 + 24));
    v6(2, *(_QWORD *)(a2 + 32));
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 104))(3, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 144))(4, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
    (*(void (**)(uint64_t (*)(), _QWORD))(*(_QWORD *)v5 + 152))(sub_10002606C, 0);
    swift_release(v5);
  }
}

uint64_t sub_10004516C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD v5[6];
  int v6;

  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v6 = a4;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100047920, v5, (char *)&type metadata for () + 8);
}

void sub_1000451BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  sub_10004A4FC();
  if (!v5)
  {
    v11 = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(0, a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 120))(1, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 112))(2, a5);
    (*(void (**)(uint64_t (*)(), _QWORD))(*(_QWORD *)v11 + 152))(sub_10002606C, 0);
    swift_release(v11);
  }
}

uint64_t sub_10004528C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11[2] = a9;
  v12 = a10 & 1;
  v13 = a1;
  v14 = a2;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100047934, v11, (char *)&type metadata for () + 8);
}

void sub_1000452F8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  uint64_t v10;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, uint64_t, uint64_t);
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD, uint64_t, uint64_t);

  if ((a2 & 1) != 0)
  {
    sub_10004A4FC();
    if (v10)
      return;
    v18 = v22;
    v23 = *(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v22 + 104);
    swift_retain(v22);
    v23(0, a4, a5);
    v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 112);
    v20(1, a6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 128))(2, a7);
    if (!(a8 >> 31))
    {
      v20(3, a8);
      if (!(a9 >> 31))
      {
        v20(4, a9);
        if (!(a10 >> 31))
        {
          v21 = 5;
          goto LABEL_14;
        }
LABEL_23:
        __break(1u);
        return;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_10004A4FC();
  if (v10)
    return;
  v18 = v17;
  v19 = *(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v17 + 104);
  swift_retain(v17);
  v19(0, a4, a5);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 112);
  v20(1, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 128))(2, a7);
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v20(3, a1);
  if (a8 >> 31)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v20(4, a8);
  if (a9 >> 31)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v20(5, a9);
  if (a10 >> 31)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v21 = 6;
LABEL_14:
  ((void (*)(uint64_t))v20)(v21);
  swift_release(v18);
  (*(void (**)(uint64_t (*)(), _QWORD))(*(_QWORD *)v18 + 152))(sub_10002606C, 0);
  swift_release(v18);
}

uint64_t sub_100045528(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD v6[5];
  int v7;
  uint64_t v8;

  v6[3] = a1;
  v6[4] = a2;
  v7 = a4;
  v8 = a5;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100047948, v6, (char *)&type metadata for () + 8);
}

void sub_10004557C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  sub_10004A4FC();
  if (!v5)
  {
    v11 = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(0, a2, a3);
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 112);
    v12(1, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 128))(2, a5);
    v12(3, 1);
    v12(4, 1);
    v12(5, 1);
    (*(void (**)(uint64_t (*)(), _QWORD))(*(_QWORD *)v11 + 152))(sub_10002606C, 0);
    swift_release(v11);
  }
}

uint64_t sub_100045670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t sub_100045678()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;
  _QWORD v10[2];

  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v10, "Milestone(t=");
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 1030037548;
  v2._object = (void *)0xE400000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v5._countAndFlagsBits = 1030889516;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return v10[0];
}

uint64_t sub_1000457CC(char a1)
{
  return *(_QWORD *)&aTreeid_1[8 * a1];
}

uint64_t sub_1000457EC()
{
  char *v0;

  return sub_1000457CC(*v0);
}

uint64_t sub_1000457F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100047E38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100045818(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004795C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100045840(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004795C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100045868(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  char v22;

  v19 = a4;
  v18 = a3;
  v9 = sub_10001D138(&qword_100127918);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100022F20(a1, v14);
  v15 = sub_10004795C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KTSWDB.Milestone.CodingKeys, &type metadata for KTSWDB.Milestone.CodingKeys, v15, v14, v13);
  v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v22, v9);
  if (!v5)
  {
    v21 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19 & 1, &v21, v9);
    v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a5, &v20, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000459C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  char v3;

  result = sub_100047F7C(a1);
  if (v1)
    return v3 & 1;
  return result;
}

uint64_t sub_100045A04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  result = sub_100047F7C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_100045A38(_QWORD *a1)
{
  uint64_t v1;

  return sub_100045868(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100045A60()
{
  return sub_100045678();
}

uint64_t sub_100045A78(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(_QWORD, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;

  if ((a4 & 1) != 0)
  {
    sub_10004A4FC();
    if (v5)
      return v6;
    v11 = v13;
    v14 = *(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v13 + 104);
    swift_retain(v13);
    v14(0, a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 112))(1, a5);
  }
  else
  {
    v6 = a3;
    sub_10004A4FC();
    if (v5)
      return v6;
    v11 = v10;
    v12 = *(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 104);
    swift_retain(v10);
    v12(0, a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 120))(1, v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 112))(2, a5);
  }
  v15 = swift_release(v11);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 160))(v15);
  v17 = v16;
  if (!v16
    || (v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 112),
        v6 = v18(0),
        v25 = v19,
        v18(1),
        LOBYTE(v18) = v25 | v20,
        swift_release(v17),
        (v18 & 1) != 0))
  {
    v21 = sub_100048100();
    swift_allocError(&type metadata for KTSWDBError, v21, 0, 0);
    *(_QWORD *)v22 = a1;
    *(_QWORD *)(v22 + 8) = a2;
    *(_DWORD *)(v22 + 16) = a5;
    v23 = swift_bridgeObjectRetain(a2);
    swift_willThrow(v23);
  }
  swift_release(v11);
  return v6;
}

uint64_t sub_100045C5C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112);
  v4 = v3(0);
  if ((v5 & 1) != 0)
    return 0;
  v6 = v4;
  v7 = v3(1);
  if ((v8 & 1) != 0)
    return 0;
  v9 = v7;
  v10 = v3(2);
  if ((v11 & 1) != 0)
    return 0;
  v12 = v10;
  v13 = 1;
  swift_beginAccess(a2 + 16, v15, 1, 0);
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v12;
  *(_BYTE *)(a2 + 48) = 0;
  return v13;
}

uint64_t sub_100045CFC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6)
{
  return sub_100045D34(a1, a2, a3, a4, a5, a6, (uint64_t)sub_100048144);
}

uint64_t sub_100045D18(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6)
{
  return sub_100045D34(a1, a2, a3, a4, a5, a6, (uint64_t)sub_100048188);
}

uint64_t sub_100045D34(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9[2] = a3;
  v10 = a4 & 1;
  v11 = a1;
  v12 = a2;
  v13 = a5;
  v14 = a6;
  result = OS_dispatch_queue.sync<A>(execute:)(a7, v9, &type metadata for KTSWDB.Milestone);
  if (!v7)
    return v15;
  return result;
}

void sub_100045DA4(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE v39[24];
  uint64_t v40;

  v40 = a1;
  if ((a2 & 1) == 0)
  {
    sub_10004A4FC();
    if (v10)
      return;
    v17 = v16;
    v18 = *(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v16 + 104);
    swift_retain(v16);
    v37 = a4;
    v18(0, a3, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 120))(1, v40);
    v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 112);
    v19(2, a5);
    if (!(a6 >> 31))
    {
      v36 = a5;
      v20 = 3;
      goto LABEL_8;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  sub_10004A4FC();
  if (v10)
    return;
  v17 = v21;
  v22 = *(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v21 + 104);
  swift_retain(v21);
  v37 = a4;
  v22(0, a3, a4);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 112);
  v19(1, a5);
  if (a6 >> 31)
    goto LABEL_13;
  v36 = a5;
  v20 = 2;
LABEL_8:
  v19(v20, a6);
  swift_release(v17);
  v23 = swift_allocObject(&unk_100108898, 56, 7);
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_BYTE *)(v23 + 48) = 1;
  v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 152);
  swift_retain(v23);
  v24(a10, v23);
  swift_release(v23);
  swift_beginAccess(v23 + 16, v39, 0, 0);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = *(_QWORD *)(v23 + 24);
  v34 = *(_QWORD *)(v23 + 32);
  v35 = *(_QWORD *)(v23 + 40);
  LOBYTE(v24) = *(_BYTE *)(v23 + 48);
  swift_release(v23);
  if ((v24 & 1) != 0)
  {
    v27 = sub_100045A78(a3, v37, v40, a2 & 1, v36);
    v29 = v28;
    v31 = v30;
    v33 = v32;
    swift_release(v17);
    *(_QWORD *)a7 = v27;
    *(_QWORD *)(a7 + 8) = v29;
    *(_BYTE *)(a7 + 16) = v31 & 1;
    *(_QWORD *)(a7 + 24) = v33;
  }
  else
  {
    swift_release(v17);
    *(_QWORD *)a7 = v25;
    *(_QWORD *)(a7 + 8) = v26;
    *(_BYTE *)(a7 + 16) = v34 & 1;
    *(_QWORD *)(a7 + 24) = v35;
  }
}

uint64_t sub_10004602C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[6];
  int v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a5;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  v9 = a4;
  v6 = sub_10001D138(&qword_100127928);
  result = OS_dispatch_queue.sync<A>(execute:)(sub_100048218, v8, v6);
  if (!v5)
    return v11;
  return result;
}

void sub_1000460A0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t (*)(), uint64_t);
  uint64_t v18;
  _BYTE v19[24];

  sub_10004A4FC();
  if (!v6)
  {
    v14 = v13;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v13 + 104))(0, a1, a2);
    v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 120);
    v15(1, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 112))(2, a4);
    v15(3, a5);
    v16 = swift_allocObject(&unk_100108820, 24, 7);
    *(_QWORD *)(v16 + 16) = _swiftEmptyArrayStorage;
    v17 = *(void (**)(uint64_t (*)(), uint64_t))(*(_QWORD *)v14 + 152);
    swift_retain(v16);
    v17(sub_1000499E8, v16);
    swift_release(v16);
    swift_release(v14);
    swift_beginAccess(v16 + 16, v19, 0, 0);
    v18 = *(_QWORD *)(v16 + 16);
    *a6 = v18;
    swift_bridgeObjectRetain(v18);
    swift_release(v16);
  }
}

uint64_t sub_10004620C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[10];

  v6[3] = a1;
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  result = OS_dispatch_queue.sync<A>(execute:)(sub_10004822C, v6, &type metadata for Int);
  if (!v4)
    return v6[9];
  return result;
}

void sub_100046268(uint64_t a1@<X1>, unint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD);
  void (*v14)(uint64_t, unint64_t);
  uint64_t v15;
  void (*v16)(uint64_t (*)(uint64_t), uint64_t);
  _BYTE v17[24];

  sub_10004A4FC();
  if (!v5)
  {
    v12 = v11;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v11 + 104))(0, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v13 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 120);
    v13(1, *(_QWORD *)(a1 + 16));
    v14 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 112);
    v14(2, *(unsigned int *)(a1 + 24));
    v13(3, *(_QWORD *)(a1 + 32));
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 144))(4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    if (a2 >> 31)
    {
      __break(1u);
    }
    else
    {
      v14(5, a2);
      if (!(a3 >> 31))
      {
        v14(6, a3);
        if (!(a4 >> 31))
        {
          v14(7, a4);
          v15 = swift_allocObject(&unk_100108870, 24, 7);
          *(_QWORD *)(v15 + 16) = 0;
          v16 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(_QWORD *)v12 + 152);
          swift_retain(v15);
          v16(sub_100049AE8, v15);
          swift_release(v15);
          swift_release(v12);
          swift_beginAccess(v15 + 16, v17, 0, 0);
          *a5 = *(_QWORD *)(v15 + 16);
          swift_release(v15);
          return;
        }
LABEL_9:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

uint64_t sub_100046424(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[6];
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a7;
  v10[3] = a1;
  v10[4] = a2;
  v10[5] = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v8 = sub_10001D138(&qword_1001277F0);
  result = OS_dispatch_queue.sync<A>(execute:)(sub_100048240, v10, v8);
  if (!v7)
    return v15;
  return result;
}

void sub_10004649C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned int a4@<W4>, unint64_t a5@<X5>, unint64_t a6@<X6>, unint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, unint64_t);
  uint64_t v19;
  void (*v20)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _BYTE v23[24];
  unsigned int v24;

  v24 = a4;
  sub_10004A4FC();
  if (!v8)
  {
    v17 = v16;
    v22 = a8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(0, a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 120))(1, a3);
    v18 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 112);
    v18(2, v24);
    if (a5 >> 31)
    {
      __break(1u);
    }
    else
    {
      v18(3, a5);
      if (!(a6 >> 31))
      {
        v18(4, a6);
        if (!(a7 >> 31))
        {
          v18(5, a7);
          v19 = swift_allocObject(&unk_100108848, 24, 7);
          *(_QWORD *)(v19 + 16) = _swiftEmptyArrayStorage;
          v20 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(_QWORD *)v17 + 152);
          swift_retain(v19);
          v20(sub_1000499EC, v19);
          swift_release(v19);
          swift_release(v17);
          swift_beginAccess(v19 + 16, v23, 0, 0);
          v21 = *(_QWORD *)(v19 + 16);
          *v22 = v21;
          swift_bridgeObjectRetain(v21);
          swift_release(v19);
          return;
        }
LABEL_9:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

uint64_t sub_10004665C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[6];
  int v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a5;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  v9 = a4;
  v6 = sub_10001D138(&qword_100127928);
  result = OS_dispatch_queue.sync<A>(execute:)(sub_100048254, v8, v6);
  if (!v5)
    return v11;
  return result;
}

uint64_t sub_1000466D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[7];
  int v8;
  uint64_t v9;

  v7[3] = a6;
  v7[4] = a1;
  v7[5] = a2;
  v7[6] = a3;
  v8 = a4;
  v9 = a5;
  return OS_dispatch_queue.sync<A>(execute:)(sub_1000483E4, v7, (char *)&type metadata for () + 8);
}

uint64_t KTSWDB.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return v0;
}

uint64_t KTSWDB.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_100046778()
{
  return sub_1000443B8();
}

uint64_t sub_100046798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD v7[8];

  v7[2] = *v5;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = a3;
  v7[6] = a4;
  v7[7] = a5;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100047828, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_1000467E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004683C(a1, a2, a3, a4, (uint64_t)sub_100049D30);
}

uint64_t sub_100046804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004683C(a1, a2, a3, a4, (uint64_t)sub_100049D1C);
}

uint64_t sub_100046820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004683C(a1, a2, a3, a4, (uint64_t)sub_100049D08);
}

uint64_t sub_10004683C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD v7[6];

  v7[2] = *v5;
  v7[3] = a2;
  v7[4] = a1;
  return OS_dispatch_queue.sync<A>(execute:)(a5, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100046884(uint64_t a1)
{
  _QWORD *v1;
  _QWORD v3[4];

  v3[3] = a1;
  v3[2] = *v1;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100049CF4, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1000468CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v4[4];

  v4[3] = a1;
  v4[2] = *v1;
  v2 = type metadata accessor for KTSWDB.SignedLogHead(0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100049CE0, v4, v2);
}

uint64_t sub_10004692C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD v3[4];

  v3[3] = a1;
  v3[2] = *v1;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100049CCC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100046974(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  _QWORD v6[6];
  int v7;

  v6[2] = *v4;
  v6[3] = a1;
  v6[4] = a2;
  v6[5] = a3;
  v7 = a4;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100047920, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1000469C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t *v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v11 = *v10;
  v13[2] = a9;
  v14 = a10 & 1;
  v15 = v11;
  v16 = a1;
  v17 = a2;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100047934, v13, (char *)&type metadata for () + 8);
}

uint64_t sub_100046A30(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD v7[5];
  int v8;
  uint64_t v9;

  v7[2] = *v5;
  v7[3] = a1;
  v7[4] = a2;
  v8 = a4;
  v9 = a5;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100047948, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100046A84(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100046AD4(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_100048188);
}

uint64_t sub_100046AAC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100046AD4(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_100048144);
}

uint64_t sub_100046AD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v11 = *v9;
  v13[2] = a3;
  v14 = a4 & 1;
  v15 = v11;
  v16 = a1;
  v17 = a2;
  v18 = a5;
  v19 = a6;
  result = OS_dispatch_queue.sync<A>(execute:)(a9, v13, &type metadata for KTSWDB.Milestone);
  if (!v10)
    return v20;
  return result;
}

uint64_t sub_100046B48(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[6];
  int v10;
  uint64_t v11;
  uint64_t v12;

  v9[2] = *v5;
  v9[3] = a1;
  v9[4] = a2;
  v9[5] = a3;
  v10 = a4;
  v11 = a5;
  v7 = sub_10001D138(&qword_100127928);
  result = OS_dispatch_queue.sync<A>(execute:)(sub_100048218, v9, v7);
  if (!v6)
    return v12;
  return result;
}

uint64_t sub_100046BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[10];

  v7[2] = *v4;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = a3;
  v7[6] = a4;
  result = OS_dispatch_queue.sync<A>(execute:)(sub_10004822C, v7, &type metadata for Int);
  if (!v5)
    return v7[9];
  return result;
}

uint64_t sub_100046C14(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[6];
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11[2] = *v7;
  v11[3] = a1;
  v11[4] = a2;
  v11[5] = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = a7;
  v9 = sub_10001D138(&qword_1001277F0);
  result = OS_dispatch_queue.sync<A>(execute:)(sub_100048240, v11, v9);
  if (!v8)
    return v16;
  return result;
}

unint64_t sub_100046C88(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  type metadata accessor for KTSwiftDB();
  return (unint64_t)static KTSwiftDB.== infix(_:_:)(*(_QWORD *)(v2 + 24), *(_QWORD *)(v3 + 24)) & 1;
}

_QWORD *sub_100046CCC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100046CDC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

Swift::Int sub_100046CE8()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100046D2C()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100046D54(uint64_t a1)
{
  Swift::UInt32 *v1;
  Swift::UInt32 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t _s15swtransparencyd6KTSWDBC6STHKeyV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    if (a1[2] == *(_QWORD *)(a2 + 16) && *((_DWORD *)a1 + 6) == *(_DWORD *)(a2 + 24) && a1[4] == *(_QWORD *)(a2 + 32))
      __asm { BR              X11 }
    return 0;
  }
  return result;
}

unint64_t sub_100046F2C()
{
  unint64_t result;

  result = qword_10012C7B0;
  if (!qword_10012C7B0)
  {
    result = swift_getWitnessTable(&unk_1000DD080, &type metadata for KTSWDB.STHKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10012C7B0);
  }
  return result;
}

unint64_t sub_100046F70()
{
  unint64_t result;

  result = qword_1001278B0;
  if (!qword_1001278B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001278B0);
  }
  return result;
}

uint64_t sub_100046FB4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x746163696C707061 && a2 == 0xEB000000006E6F69;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746163696C707061, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x6E69676542676F6CLL && a2 == 0xEA0000000000734DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69676542676F6CLL, 0xEA0000000000734DLL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x65707954676F6CLL && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65707954676F6CLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697369766572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  else if (a1 == 0x4864616548676F6CLL && a2 == 0xEB00000000687361)
  {
    swift_bridgeObjectRelease(0xEB00000000687361);
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4864616548676F6CLL, 0xEB00000000687361, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000471D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  int v25;
  char v26;

  v5 = sub_10001D138(&qword_100127AC8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100022F20(a1, v9);
  v11 = sub_100046F2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KTSWDB.STHKey.CodingKeys, &type metadata for KTSWDB.STHKey.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100023CAC(a1);
  LOBYTE(v24[0]) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(v24, v5);
  v14 = v13;
  LOBYTE(v24[0]) = 1;
  swift_bridgeObjectRetain(v13);
  v23 = KeyedDecodingContainer.decode(_:forKey:)(v24, v5);
  type metadata accessor for LogType(0);
  v16 = v15;
  v26 = 2;
  v17 = sub_1000202A4(&qword_1001278E0, 255, (uint64_t (*)(uint64_t))type metadata accessor for LogType, (uint64_t)&protocol conformance descriptor for LogType);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v24, v16, &v26, v5, v16, v17);
  v25 = v24[0];
  LOBYTE(v24[0]) = 3;
  v22 = KeyedDecodingContainer.decode(_:forKey:)(v24, v5);
  v26 = 4;
  v18 = sub_100047660();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v24, &type metadata for Data, &v26, v5, &type metadata for Data, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v24[0];
  v20 = v24[1];
  swift_bridgeObjectRetain(v14);
  sub_100022F88(v19, v20);
  swift_bridgeObjectRelease(v14);
  sub_100023CAC(a1);
  swift_bridgeObjectRelease(v14);
  result = sub_100022F44(v19, v20);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v23;
  *(_DWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = v22;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v20;
  return result;
}

uint64_t type metadata accessor for KTSWDB.SignedLogHead(uint64_t a1)
{
  uint64_t result;

  result = qword_10012D150;
  if (!qword_10012D150)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTSWDB.SignedLogHead);
  return result;
}

uint64_t sub_1000474BC(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_17;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    goto LABEL_17;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    goto LABEL_17;
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
    goto LABEL_17;
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
    goto LABEL_17;
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
    goto LABEL_17;
  v4 = (int *)type metadata accessor for KTSWDB.SignedLogHead(0);
  if ((static Date.== infix(_:_:)(a1 + v4[10], a2 + v4[10]) & 1) == 0)
    goto LABEL_17;
  v5 = v4[11];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  v10 = v6 == *v8 && v7 == v9;
  if (v10 || (v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v8, v9, 0), v12 = 0, (v11 & 1) != 0))
  {
    sub_10002395C(*(_QWORD *)(a1 + v4[12]), *(_QWORD *)(a1 + v4[12] + 8));
    if ((v13 & 1) != 0)
    {
      sub_10002395C(*(_QWORD *)(a1 + v4[13]), *(_QWORD *)(a1 + v4[13] + 8));
      if ((v14 & 1) != 0 && *(_QWORD *)(a1 + v4[14]) == *(_QWORD *)(a2 + v4[14]))
      {
        v12 = *(_BYTE *)(a1 + v4[15]) ^ *(_BYTE *)(a2 + v4[15]) ^ 1;
        return v12 & 1;
      }
    }
LABEL_17:
    v12 = 0;
  }
  return v12 & 1;
}

unint64_t sub_100047608()
{
  unint64_t result;

  result = qword_10012C7B8;
  if (!qword_10012C7B8)
  {
    result = swift_getWitnessTable(&unk_1000DD030, &type metadata for KTSWDB.SignedLogHead.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10012C7B8);
  }
  return result;
}

void type metadata accessor for KTResult(uint64_t a1)
{
  sub_10002987C(a1, &qword_100127A98, (uint64_t)&unk_1001086E0);
}

unint64_t sub_100047660()
{
  unint64_t result;

  result = qword_1001278F0;
  if (!qword_1001278F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001278F0);
  }
  return result;
}

uint64_t sub_1000476A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KTSWDB.SignedLogHead(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000476E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001278F8;
  if (!qword_1001278F8)
  {
    v1 = objc_opt_self(OS_dispatch_queue_serial);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001278F8);
  }
  return result;
}

unint64_t sub_100047724()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100127910;
  if (!qword_100127910)
  {
    v1 = sub_10001D1C4(&qword_100127908);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100127910);
  }
  return result;
}

void sub_100047770()
{
  sub_10004A41C();
}

uint64_t sub_100047790()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000477A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000477B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000477B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004A4FC();
  if (!v0)
  {
    v2 = v1;
    (*(void (**)(uint64_t (*)(), _QWORD))(*(_QWORD *)v1 + 152))(sub_10002606C, 0);
    swift_release(v2);
  }
}

void sub_100047828()
{
  sub_100049960();
}

void sub_10004783C()
{
  uint64_t v0;

  sub_100044758(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_100047870()
{
  uint64_t v0;

  sub_100044758(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1000478A4()
{
  uint64_t v0;

  sub_100044758(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1000478D8()
{
  uint64_t v0;

  sub_1000448D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000478F0(void (*a1)(_QWORD)@<X8>)
{
  uint64_t v1;

  sub_100044A68(*(_QWORD *)(v1 + 24), a1);
}

void sub_100047908()
{
  uint64_t v0;

  sub_100045094(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100047920()
{
  sub_100049940();
}

void sub_100047934()
{
  sub_100049904();
}

void sub_100047948()
{
  sub_1000498E0();
}

unint64_t sub_10004795C()
{
  unint64_t result;

  result = qword_10012C7C0[0];
  if (!qword_10012C7C0[0])
  {
    result = swift_getWitnessTable(&unk_1000DCFE0, &type metadata for KTSWDB.Milestone.CodingKeys);
    atomic_store(result, qword_10012C7C0);
  }
  return result;
}

uint64_t sub_1000479A0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000013)
  {
    v4 = 0x80000001000E23C0;
    if (a2 == 0x80000001000E23C0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000E23C0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v6 = 0x80000001000E23E0;
    if (a2 == 0x80000001000E23E0)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000E23E0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x6E69676542676F6CLL && a2 == 0xEA0000000000734DLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69676542676F6CLL, 0xEA0000000000734DLL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  if (a1 == 0x65707954676F6CLL && a2 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65707954676F6CLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697369766572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x80000001000E2400;
    if (a2 == 0x80000001000E2400)
      goto LABEL_27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000E2400, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v7);
    return 5;
  }
  if (a1 == 0x5474706965636572 && a2 == 0xEB00000000656D69
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x5474706965636572, 0xEB00000000656D69, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6;
  }
  else if (a1 == 0x746163696C707061 && a2 == 0xEB000000006E6F69
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746163696C707061, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 7;
  }
  else if (a1 == 0x4864616548676F6CLL && a2 == 0xEB00000000687361
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4864616548676F6CLL, 0xEB00000000687361, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 8;
  }
  else if (a1 == 6845555 && a2 == 0xE300000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(6845555, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 9;
  }
  else if (a1 == 0x644965657274 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x644965657274, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 10;
  }
  else if (a1 == 0x7473656C694D7369 && a2 == 0xEB00000000656E6FLL)
  {
    swift_bridgeObjectRelease(0xEB00000000656E6FLL);
    return 11;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7473656C694D7369, 0xEB00000000656E6FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_100047E38(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x644965657274 && a2 == 0xE600000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x644965657274, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697369766572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x6E69676542676F6CLL && a2 == 0xEA0000000000734DLL)
  {
    swift_bridgeObjectRelease(0xEA0000000000734DLL);
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E69676542676F6CLL, 0xEA0000000000734DLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100047F7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  v2 = sub_10001D138(&qword_100127AC0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_100022F20(a1, v6);
  v8 = sub_10004795C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KTSWDB.Milestone.CodingKeys, &type metadata for KTSWDB.Milestone.CodingKeys, v8, v6, v7);
  v14 = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v2);
  v13 = 1;
  KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v13, v2);
  v12 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v12, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100023CAC(a1);
  return v9;
}

unint64_t sub_100048100()
{
  unint64_t result;

  result = qword_100127920;
  if (!qword_100127920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KTSWDBError, &type metadata for KTSWDBError);
    atomic_store(result, (unint64_t *)&qword_100127920);
  }
  return result;
}

void sub_100048144(uint64_t a1@<X8>)
{
  sub_1000481CC(0x80000001000E2A40, 0x80000001000E2AF0, (uint64_t)sub_100049C68, a1);
}

void sub_100048188(uint64_t a1@<X8>)
{
  sub_1000481CC(0x80000001000E28C0, 0x80000001000E2980, (uint64_t)sub_100049C68, a1);
}

void sub_1000481CC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  sub_100045DA4(*(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(unsigned int *)(v4 + 56), *(_QWORD *)(v4 + 64), a4, a1, a2, a3);
}

void sub_100048218(_QWORD *a1@<X8>)
{
  sub_1000498BC(a1);
}

void sub_10004822C(_QWORD *a1@<X8>)
{
  sub_10004989C(a1);
}

void sub_100048240(_QWORD *a1@<X8>)
{
  sub_100049874(a1);
}

void sub_100048254(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t (*)(), uint64_t);
  uint64_t v14;
  _BYTE v15[24];

  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v7 = *(unsigned int *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  sub_10004A4FC();
  if (!v2)
  {
    v10 = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(0, v4, v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 120))(1, v5);
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 112);
    v11(2, v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 128))(3, v8);
    v11(4, 1);
    v11(5, 1);
    v11(6, 0);
    v12 = swift_allocObject(&unk_100108820, 24, 7);
    *(_QWORD *)(v12 + 16) = _swiftEmptyArrayStorage;
    v13 = *(void (**)(uint64_t (*)(), uint64_t))(*(_QWORD *)v10 + 152);
    swift_retain(v12);
    v13(sub_1000499E8, v12);
    swift_release(v10);
    swift_release(v12);
    swift_beginAccess(v12 + 16, v15, 0, 0);
    v14 = *(_QWORD *)(v12 + 16);
    *a1 = v14;
    swift_bridgeObjectRetain(v14);
    swift_release(v12);
  }
}

void sub_1000483E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(unsigned int *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  sub_10004A4FC();
  if (!v1)
  {
    if (v2 >> 31)
    {
      __break(1u);
    }
    else
    {
      v9 = v8;
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 112);
      v10(0, v2);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(1, v3, v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 120))(2, v5);
      v10(3, v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 128))(4, v7);
      v10(5, 1);
      v10(6, 1);
      v11 = ((uint64_t (*)(uint64_t, _QWORD))v10)(7, 0);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 160))(v11);
      if (v12)
      {
        swift_release(v12);
        v13 = sub_100048100();
        v14 = swift_allocError(&type metadata for KTSWDBError, v13, 0, 0);
        *(_OWORD *)v15 = xmmword_1000DD160;
        *(_DWORD *)(v15 + 16) = 0;
        swift_willThrow(v14);
      }
      else
      {
        (*(void (**)(void))(*(_QWORD *)v9 + 96))();
      }
      swift_release(v9);
    }
  }
}

unint64_t sub_100048568()
{
  unint64_t result;

  result = qword_100127930;
  if (!qword_100127930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KTSWDB.STHKey, &type metadata for KTSWDB.STHKey);
    atomic_store(result, (unint64_t *)&qword_100127930);
  }
  return result;
}

uint64_t sub_1000485AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000202A4(&qword_100127938, a2, (uint64_t (*)(uint64_t))type metadata accessor for KTSWDB, (uint64_t)&protocol conformance descriptor for KTSWDB);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for KTSWDB()
{
  return objc_opt_self(_TtC15swtransparencyd6KTSWDB);
}

unint64_t destroy for KTSWDBError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s15swtransparencyd11KTSWDBErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

uint64_t assignWithCopy for KTSWDBError(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *((_QWORD *)a2 + 1);
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v7;
      *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    v8 = *a2;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)a1 = v8;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  return a1;
}

__n128 initializeWithTake for KTSWDBError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for KTSWDBError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
LABEL_6:
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for KTSWDBError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for KTSWDBError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 20) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_100048864(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_10004887C(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for KTSWDBError()
{
  return &type metadata for KTSWDBError;
}

uint64_t destroy for KTSWDB.STHKey(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  return sub_100022F44(a1[5], a1[6]);
}

uint64_t initializeWithCopy for KTSWDB.STHKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  sub_100022F88(v4, v5);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  return a1;
}

uint64_t assignWithCopy for KTSWDB.STHKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  sub_100022F88(v7, v6);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  sub_100022F44(v8, v9);
  return a1;
}

__n128 initializeWithTake for KTSWDB.STHKey(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for KTSWDB.STHKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v6;
  sub_100022F44(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for KTSWDB.STHKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KTSWDB.STHKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KTSWDB.STHKey()
{
  return &type metadata for KTSWDB.STHKey;
}

_QWORD *sub_100048AD4(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    v7 = a3[10];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[11];
    v12 = a3[12];
    v13 = (_QWORD *)((char *)v4 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (_QWORD *)((char *)v4 + v12);
    v17 = *(uint64_t *)((char *)a2 + v12);
    v18 = *(uint64_t *)((char *)a2 + v12 + 8);
    swift_bridgeObjectRetain(v15);
    sub_100022F88(v17, v18);
    *v16 = v17;
    v16[1] = v18;
    v19 = a3[13];
    v20 = (_QWORD *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = *v21;
    v23 = v21[1];
    sub_100022F88(*v21, v23);
    *v20 = v22;
    v20[1] = v23;
    v24 = a3[15];
    *(_QWORD *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    *((_BYTE *)v4 + v24) = *((_BYTE *)a2 + v24);
  }
  return v4;
}

uint64_t sub_100048BEC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + a2[10];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  sub_100022F44(*(_QWORD *)(a1 + a2[12]), *(_QWORD *)(a1 + a2[12] + 8));
  return sub_100022F44(*(_QWORD *)(a1 + a2[13]), *(_QWORD *)(a1 + a2[13] + 8));
}

uint64_t sub_100048C64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = a3[10];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[11];
  v11 = a3[12];
  v12 = (_QWORD *)(a1 + v10);
  v13 = (_QWORD *)(a2 + v10);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = (uint64_t *)(a1 + v11);
  v16 = *(_QWORD *)(a2 + v11);
  v17 = *(_QWORD *)(a2 + v11 + 8);
  swift_bridgeObjectRetain(v14);
  sub_100022F88(v16, v17);
  *v15 = v16;
  v15[1] = v17;
  v18 = a3[13];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_100022F88(*v20, v22);
  *v19 = v21;
  v19[1] = v22;
  v23 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  return a1;
}

uint64_t sub_100048D50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = a3[10];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[11];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[12];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  v19 = v17[1];
  sub_100022F88(*v17, v19);
  v20 = *v16;
  v21 = v16[1];
  *v16 = v18;
  v16[1] = v19;
  sub_100022F44(v20, v21);
  v22 = a3[13];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_100022F88(*v24, v26);
  v27 = *v23;
  v28 = v23[1];
  *v23 = v25;
  v23[1] = v26;
  sub_100022F44(v27, v28);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_100048E78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = a3[10];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_100048F30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = a3[10];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[11];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[12];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_100022F44(v17, v18);
  v19 = a3[13];
  v20 = *(_QWORD *)(a1 + v19);
  v21 = *(_QWORD *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_100022F44(v20, v21);
  v22 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t sub_100049014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100049020);
}

uint64_t sub_100049020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 40), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 44) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000490A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000490B0);
}

uint64_t sub_1000490B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 40), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 44) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100049130(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = &unk_1000DCC88;
    v4[8] = &unk_1000DCCA0;
    v4[9] = &unk_1000DCCA0;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[11] = &unk_1000DCCB8;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KTSWDB.Milestone(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for KTSWDB.Milestone(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for KTSWDB.Milestone()
{
  return &type metadata for KTSWDB.Milestone;
}

uint64_t storeEnumTagSinglePayload for KTSWDB.Milestone.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100049284 + 4 * byte_1000DC8B1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000492B8 + 4 * byte_1000DC8AC[v4]))();
}

uint64_t sub_1000492B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000492C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000492C8);
  return result;
}

uint64_t sub_1000492D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000492DCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000492E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000492E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KTSWDB.Milestone.CodingKeys()
{
  return &type metadata for KTSWDB.Milestone.CodingKeys;
}

uint64_t getEnumTagSinglePayload for KTSWDB.SignedLogHead.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KTSWDB.SignedLogHead.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1000493E0 + 4 * byte_1000DC8BB[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_100049414 + 4 * byte_1000DC8B6[v4]))();
}

uint64_t sub_100049414(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004941C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100049424);
  return result;
}

uint64_t sub_100049430(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100049438);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_10004943C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049444(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KTSWDB.SignedLogHead.CodingKeys()
{
  return &type metadata for KTSWDB.SignedLogHead.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SWTStateMachine.SMRunningState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KTSWDB.STHKey.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10004953C + 4 * byte_1000DC8C5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100049570 + 4 * byte_1000DC8C0[v4]))();
}

uint64_t sub_100049570(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049578(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100049580);
  return result;
}

uint64_t sub_10004958C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100049594);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100049598(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000495A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KTSWDB.STHKey.CodingKeys()
{
  return &type metadata for KTSWDB.STHKey.CodingKeys;
}

unint64_t sub_1000495C0()
{
  unint64_t result;

  result = qword_10012D260[0];
  if (!qword_10012D260[0])
  {
    result = swift_getWitnessTable(&unk_1000DCD8C, &type metadata for KTSWDB.STHKey.CodingKeys);
    atomic_store(result, qword_10012D260);
  }
  return result;
}

uint64_t sub_100049604()
{
  return sub_1000202A4(&qword_100127AA0, 255, (uint64_t (*)(uint64_t))type metadata accessor for LogType, (uint64_t)&unk_1000DCDF4);
}

unint64_t sub_100049638()
{
  unint64_t result;

  result = qword_10012D5F0[0];
  if (!qword_10012D5F0[0])
  {
    result = swift_getWitnessTable(&unk_1000DCEB4, &type metadata for KTSWDB.SignedLogHead.CodingKeys);
    atomic_store(result, qword_10012D5F0);
  }
  return result;
}

unint64_t sub_100049680()
{
  unint64_t result;

  result = qword_10012D880[0];
  if (!qword_10012D880[0])
  {
    result = swift_getWitnessTable(&unk_1000DCFB8, &type metadata for KTSWDB.Milestone.CodingKeys);
    atomic_store(result, qword_10012D880);
  }
  return result;
}

unint64_t sub_1000496C8()
{
  unint64_t result;

  result = qword_10012D990;
  if (!qword_10012D990)
  {
    result = swift_getWitnessTable(&unk_1000DCF28, &type metadata for KTSWDB.Milestone.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10012D990);
  }
  return result;
}

unint64_t sub_100049710()
{
  unint64_t result;

  result = qword_10012D998[0];
  if (!qword_10012D998[0])
  {
    result = swift_getWitnessTable(&unk_1000DCF50, &type metadata for KTSWDB.Milestone.CodingKeys);
    atomic_store(result, qword_10012D998);
  }
  return result;
}

unint64_t sub_100049758()
{
  unint64_t result;

  result = qword_10012DA20;
  if (!qword_10012DA20)
  {
    result = swift_getWitnessTable(&unk_1000DCE24, &type metadata for KTSWDB.SignedLogHead.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10012DA20);
  }
  return result;
}

unint64_t sub_1000497A0()
{
  unint64_t result;

  result = qword_10012DA28[0];
  if (!qword_10012DA28[0])
  {
    result = swift_getWitnessTable(&unk_1000DCE4C, &type metadata for KTSWDB.SignedLogHead.CodingKeys);
    atomic_store(result, qword_10012DA28);
  }
  return result;
}

unint64_t sub_1000497E8()
{
  unint64_t result;

  result = qword_10012DAB0;
  if (!qword_10012DAB0)
  {
    result = swift_getWitnessTable(&unk_1000DCCFC, &type metadata for KTSWDB.STHKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10012DAB0);
  }
  return result;
}

unint64_t sub_100049830()
{
  unint64_t result;

  result = qword_10012DAB8[0];
  if (!qword_10012DAB8[0])
  {
    result = swift_getWitnessTable(&unk_1000DCD24, &type metadata for KTSWDB.STHKey.CodingKeys);
    atomic_store(result, qword_10012DAB8);
  }
  return result;
}

void sub_100049874(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10004649C(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_DWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), a1);
}

void sub_10004989C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100046268(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

void sub_1000498BC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1000460A0(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned int *)(v1 + 48), *(_QWORD *)(v1 + 56), a1);
}

void sub_1000498E0()
{
  uint64_t v0;

  sub_10004557C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned int *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

void sub_100049904()
{
  uint64_t v0;

  sub_1000452F8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned int *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

void sub_100049940()
{
  uint64_t v0;

  sub_1000451BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned int *)(v0 + 48));
}

void sub_100049960()
{
  uint64_t *v0;

  sub_100044548(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

unint64_t sub_100049980()
{
  unint64_t result;

  result = qword_100127AB8;
  if (!qword_100127AB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KTSWDBError, &type metadata for KTSWDBError);
    atomic_store(result, (unint64_t *)&qword_100127AB8);
  }
  return result;
}

uint64_t sub_1000499C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000499EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _BYTE v12[24];

  v2 = v1;
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 112))(0);
  if ((v4 & 1) == 0)
  {
    v5 = v3;
    v6 = (_QWORD *)(v1 + 16);
    swift_beginAccess(v2 + 16, v12, 33, 0);
    v7 = (_QWORD *)*v6;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
    *v6 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v7 = sub_10003F310(0, v7[2] + 1, 1, v7);
      *v6 = v7;
    }
    v10 = v7[2];
    v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      v7 = sub_10003F310((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      *v6 = v7;
    }
    v7[2] = v10 + 1;
    v7[v10 + 4] = v5;
    swift_endAccess(v12);
  }
  return 1;
}

uint64_t sub_100049AD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100049AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = v1;
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 104))(0);
  if ((v3 & 0x100000000) == 0)
  {
    v4 = (int)v3;
    swift_beginAccess(v2 + 16, v6, 1, 0);
    *(_QWORD *)(v2 + 16) = v4;
  }
  return 1;
}

uint64_t sub_100049B48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE v14[24];

  v2 = v1;
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 128))(0);
  if (v4 >> 60 != 15)
  {
    v5 = v3;
    v6 = v4;
    v7 = (_QWORD **)(v2 + 16);
    swift_beginAccess(v7, v14, 33, 0);
    v8 = *v7;
    sub_100022F88(v5, v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    *v7 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v8 = sub_10003F41C(0, v8[2] + 1, 1, v8);
      *v7 = v8;
    }
    v11 = v8[2];
    v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      v8 = sub_10003F41C((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
      *v7 = v8;
    }
    v8[2] = v11 + 1;
    v12 = &v8[2 * v11];
    v12[4] = v5;
    v12[5] = v6;
    swift_endAccess(v14);
    sub_100027420(v5, v6);
  }
  return 1;
}

uint64_t sub_100049C58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100049C68(uint64_t a1)
{
  uint64_t v1;

  return sub_100045C5C(a1, v1);
}

uint64_t sub_100049C70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001D138(&qword_100127710);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100049CB0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100022F88(result, a2);
  return result;
}

void sub_100049CCC()
{
  sub_100047908();
}

void sub_100049CE0(void (*a1)(_QWORD)@<X8>)
{
  sub_1000478F0(a1);
}

void sub_100049CF4()
{
  sub_1000478D8();
}

void sub_100049D08()
{
  sub_1000478A4();
}

void sub_100049D1C()
{
  sub_100047870();
}

void sub_100049D30()
{
  sub_10004783C();
}

const char *sub_100049D4C()
{
  return "Transparency";
}

uint64_t sub_100049D60(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_100049D8C + 4 * byte_1000DD170[a1]))("ATMilestoneDownload", 19);
}

const char *sub_100049D8C()
{
  return "ATPatConsistency";
}

const char *sub_100049DA0()
{
  return "SWTStateMachine";
}

unint64_t sub_100049DD8()
{
  unint64_t result;

  result = qword_100127AD0;
  if (!qword_100127AD0)
  {
    result = swift_getWitnessTable(&unk_1000DD184, &type metadata for SWTFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100127AD0);
  }
  return result;
}

uint64_t sub_100049E1C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_100049E44 + 4 * byte_1000DD175[*v0]))("ATMilestoneDownload", 19);
}

const char *sub_100049E44()
{
  return "ATPatConsistency";
}

const char *sub_100049E58()
{
  return "SWTStateMachine";
}

uint64_t storeEnumTagSinglePayload for SWTFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100049ED8 + 4 * byte_1000DD17F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100049F0C + 4 * byte_1000DD17A[v4]))();
}

uint64_t sub_100049F0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049F14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100049F1CLL);
  return result;
}

uint64_t sub_100049F28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100049F30);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100049F34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049F3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SWTFeatureFlags()
{
  return &type metadata for SWTFeatureFlags;
}

void *sub_100049F58()
{
  return &unk_100108AB0;
}

unint64_t sub_100049F64()
{
  return 0xD000000000000018;
}

unint64_t sub_100049F80()
{
  return 0xD000000000000013;
}

void sub_100049F9C()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_100049FC0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_10004A000(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_10004A03C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004BA1C();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10004A064(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004BA1C();
  return Error<>._code.getter(a1, v2);
}

id static KTSwiftDB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(a1 + 16, v7, 0, 0);
  v4 = *(void **)(a1 + 16);
  if (v4 && (swift_beginAccess(a2 + 16, &v6, 0, 0), *(_QWORD *)(a2 + 16)))
    return objc_msgSend(v4, "isEqual:");
  else
    return 0;
}

void *sub_10004A104()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 16, v4, 0, 0);
  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void sub_10004A144(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 16, v4, 1, 0);
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t KTSwiftDB.__allocating_init(url:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSURL *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  _BYTE v17[24];

  v2 = v1;
  v4 = sub_10001D138(&qword_100127170);
  __chkstk_darwin(v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(v7 + 16) = 0;
  sub_100033AA4(a1, (uint64_t)v6);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    URL._bridgeToObjectiveC()(v10);
    v11 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  v13 = objc_msgSend(objc_allocWithZone((Class)KTSDBObjc), "initDatabaseWithURL:", v11);

  sub_1000202F0(a1, &qword_100127170);
  if (v13)
  {
    swift_beginAccess(v7 + 16, v17, 1, 0);
    v14 = *(void **)(v7 + 16);
    *(_QWORD *)(v7 + 16) = v13;

  }
  else
  {
    swift_release(v7);
    return 0;
  }
  return v7;
}

uint64_t KTSwiftDB.init(url:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSURL *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  _BYTE v16[24];

  v2 = v1;
  v4 = sub_10001D138(&qword_100127170);
  __chkstk_darwin(v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_QWORD *)(v2 + 16) = 0;
  sub_100033AA4(a1, (uint64_t)v6);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  v12 = objc_msgSend(objc_allocWithZone((Class)KTSDBObjc), "initDatabaseWithURL:", v10);

  sub_1000202F0(a1, &qword_100127170);
  if (v12)
  {
    swift_beginAccess(v2 + 16, v16, 1, 0);
    v13 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v12;

  }
  else
  {
    swift_release(v2);
    return 0;
  }
  return v2;
}

void sub_10004A41C()
{
  uint64_t v0;
  void **v1;
  void *v2;
  void *v3;
  _BYTE v4[24];

  v1 = (void **)(v0 + 16);
  swift_beginAccess(v0 + 16, v4, 1, 0);
  v2 = *(void **)(v0 + 16);
  if (v2)
  {
    objc_msgSend(v2, "close");
    v3 = *v1;
    *v1 = 0;

  }
}

void sub_10004A474()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSString v3;
  _BYTE v4[24];

  swift_beginAccess(v0 + 16, v4, 0, 0);
  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = v1;
    v3 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "executeSQLStmt:", v3);

  }
}

void sub_10004A4FC()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  _BYTE v13[24];

  swift_beginAccess(v0 + 16, v13, 0, 0);
  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = v1;
    v3 = String._bridgeToObjectiveC()();
    v12 = 0;
    v4 = objc_msgSend(v2, "prepareStatement:error:", v3, &v12);

    v5 = v12;
    if (v4)
    {
      v6 = v12;

      v7 = type metadata accessor for KTSwiftDB.SQLStatement();
      *(_QWORD *)(swift_allocObject(v7, 24, 7) + 16) = v4;
    }
    else
    {
      v10 = v12;
      _convertNSErrorToError(_:)(v5);

      swift_willThrow(v11);
    }
  }
  else
  {
    v8 = sub_10004A638();
    v9 = swift_allocError(&type metadata for KTSwiftDBError, v8, 0, 0);
    swift_willThrow(v9);
  }
}

unint64_t sub_10004A638()
{
  unint64_t result;

  result = qword_100127AD8;
  if (!qword_100127AD8)
  {
    result = swift_getWitnessTable(&unk_1000DD2B4, &type metadata for KTSwiftDBError);
    atomic_store(result, (unint64_t *)&qword_100127AD8);
  }
  return result;
}

uint64_t sub_10004A67C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t type metadata accessor for KTSwiftDB.SQLStatement()
{
  return objc_opt_self(_TtCC15swtransparencyd9KTSwiftDB12SQLStatement);
}

uint64_t sub_10004A6CC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

id sub_10004A6D8()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "reset");
}

void sub_10004A6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10004A7AC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&String._bridgeToObjectiveC(), (SEL *)&selRef_bindString_column_);
}

id sub_10004A6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)(v2 + 16), "bindInt:column:", a2, a1);
}

id sub_10004A714(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)(v2 + 16), "bindInt64:column:", a2, a1);
}

void sub_10004A72C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  Class isa;

  v3 = *(void **)(v1 + 16);
  isa = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "bindDate:column:", isa, a1);

}

id sub_10004A784(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "bindDouble:column:", a1);
}

void sub_10004A798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10004A7AC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&Data._bridgeToObjectiveC(), (SEL *)&selRef_bindData_column_);
}

void sub_10004A7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), SEL *a5)
{
  uint64_t v5;
  void *v8;
  id v9;

  v8 = *(void **)(v5 + 16);
  v9 = (id)a4(a2, a3);
  objc_msgSend(v8, *a5, v9, a1);

}

id sub_10004A808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id result;
  void *v10;
  uint64_t v11;
  id aBlock[5];
  uint64_t v13;

  v5 = *(void **)(v2 + 16);
  v6 = swift_allocObject(&unk_100108AD0, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  aBlock[4] = sub_10004A950;
  v13 = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10004A9B0;
  aBlock[3] = &unk_100108AE8;
  v7 = _Block_copy(aBlock);
  v8 = v13;
  swift_retain(a2);
  swift_release(v8);
  aBlock[0] = 0;
  LODWORD(a2) = objc_msgSend(v5, "steps:error:", v7, aBlock);
  _Block_release(v7);
  result = aBlock[0];
  if (!(_DWORD)a2)
  {
    v10 = result;
    _convertNSErrorToError(_:)(result);

    return (id)swift_willThrow(v11);
  }
  return result;
}

uint64_t sub_10004A92C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004A950(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v4 = type metadata accessor for KTSwiftDB.SQLRow();
  v5 = swift_allocObject(v4, 24, 7);
  *(_QWORD *)(v5 + 16) = a1;
  swift_unknownObjectRetain(a1);
  LOBYTE(a1) = v3(v5);
  swift_release(v5);
  return a1 & 1;
}

uint64_t sub_10004A9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  LOBYTE(v4) = v4(v5);
  swift_release(v3);
  swift_unknownObjectRelease(a2);
  return v4 & 1;
}

uint64_t sub_10004AA04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AA14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004AA1C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  id v19;

  v1 = *(void **)(v0 + 16);
  v19 = 0;
  v2 = objc_msgSend(v1, "stepWithError:", &v19);
  v3 = v19;
  if (v2)
  {
    v4 = v2;
    v5 = type metadata accessor for KTSwiftDB.SQLRow();
    v6 = swift_allocObject(v5, 24, 7);
    *(_QWORD *)(v6 + 16) = v4;
    v7 = v3;
  }
  else
  {
    v8 = v19;
    v9 = (void *)_convertNSErrorToError(_:)(v3);

    swift_willThrow(v10);
    v19 = v9;
    swift_errorRetain(v9);
    v11 = sub_10001D138(&qword_100127AE0);
    type metadata accessor for KTSDBObjcError(0);
    v6 = v12;
    if (swift_dynamicCast(&v18, &v19, v11, v12, 0)
      && (v13 = v18,
          v14 = sub_100025DB4(&qword_100127AE8, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD55C), _BridgedStoredNSError.code.getter(&v17, v6, v14), v13, v17 == 2))
    {
      swift_errorRelease();
      swift_errorRelease();
      return 0;
    }
    else
    {
      v15 = swift_errorRelease();
      swift_willThrow(v15);
    }
  }
  return v6;
}

uint64_t KTSwiftDB.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t KTSwiftDB.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_10004ABE0()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 16));
}

void type metadata accessor for KTSDBObjcError(uint64_t a1)
{
  sub_10002987C(a1, &qword_100127D58, (uint64_t)&unk_100108C40);
}

uint64_t sub_10004ABFC(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(*(id *)(v1 + 16), "textAtColumn:", a1);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_10004AC54(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "intAtColumn:", a1);
}

id sub_10004AC90(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "int64AtColumn:", a1);
}

uint64_t sub_10004ACB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v4;
  uint64_t v5;

  v4 = objc_msgSend(*(id *)(v2 + 16), "dateAtColumn:", a1);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 1, v5);
}

uint64_t sub_10004AD20(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(*(id *)(v1 + 16), "blobAtColumn:", a1);
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

double sub_10004AD78(uint64_t a1)
{
  uint64_t v1;
  double result;

  objc_msgSend(*(id *)(v1 + 16), "doubleAtColumn:", a1);
  return result;
}

unint64_t sub_10004ADA4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  unint64_t v3;

  v1 = objc_msgSend(*(id *)(v0 + 16), "allObjectsByColumnName");
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = sub_10004AE18(v2);
  swift_bridgeObjectRelease(v2);
  return v3;
}

unint64_t sub_10004AE18(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[32];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _QWORD v37[2];
  _BYTE v38[40];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001D138(&qword_100127DB0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = (v6 - 1) & v6;
      v11 = __clz(__rbit64(v6)) | (v8 << 6);
      v12 = v8;
    }
    else
    {
      v13 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_37;
      if (v13 >= v28)
      {
LABEL_33:
        sub_10004BA60(a1);
        return (unint64_t)v3;
      }
      v14 = *(_QWORD *)(v29 + 8 * v13);
      v12 = v8 + 1;
      if (!v14)
      {
        v12 = v8 + 2;
        if (v8 + 2 >= v28)
          goto LABEL_33;
        v14 = *(_QWORD *)(v29 + 8 * v12);
        if (!v14)
        {
          v12 = v8 + 3;
          if (v8 + 3 >= v28)
            goto LABEL_33;
          v14 = *(_QWORD *)(v29 + 8 * v12);
          if (!v14)
          {
            v12 = v8 + 4;
            if (v8 + 4 >= v28)
              goto LABEL_33;
            v14 = *(_QWORD *)(v29 + 8 * v12);
            if (!v14)
            {
              v15 = v8 + 5;
              if (v8 + 5 >= v28)
                goto LABEL_33;
              v14 = *(_QWORD *)(v29 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v12 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_38;
                  if (v12 >= v28)
                    goto LABEL_33;
                  v14 = *(_QWORD *)(v29 + 8 * v12);
                  ++v15;
                  if (v14)
                    goto LABEL_26;
                }
              }
              v12 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      v10 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    sub_100023CCC(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v38);
    v37[0] = v18;
    v37[1] = v17;
    sub_100023CCC((uint64_t)v38, (uint64_t)v33);
    swift_bridgeObjectRetain_n(v17, 2);
    sub_1000202F0((uint64_t)v37, &qword_100127DB8);
    if (!swift_dynamicCast(&v30, v33, (char *)&type metadata for Any + 8, &type metadata for AnyHashable, 6))
    {
      v32 = 0;
      v30 = 0u;
      v31 = 0u;
      swift_bridgeObjectRelease(v17);
      sub_1000202F0((uint64_t)&v30, &qword_100127DC0);
      sub_10004BA60(a1);
      swift_release(v3);
      return 0;
    }
    v34 = v30;
    v35 = v31;
    v36 = v32;
    result = sub_10003AFB8(v18, v17);
    v19 = result;
    if ((v20 & 1) != 0)
    {
      v9 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v9[1]);
      *v9 = v18;
      v9[1] = v17;
      result = sub_10004BA68((uint64_t)&v30, v3[7] + 40 * v19);
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v21 = (uint64_t *)(v3[6] + 16 * result);
    *v21 = v18;
    v21[1] = v17;
    v22 = v3[7] + 40 * result;
    v23 = v30;
    v24 = v31;
    *(_QWORD *)(v22 + 32) = v32;
    *(_OWORD *)v22 = v23;
    *(_OWORD *)(v22 + 16) = v24;
    v25 = v3[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_36;
    v3[2] = v27;
LABEL_8:
    v8 = v12;
    v6 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10004B1A0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t sub_10004B1BC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

id sub_10004B1E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  _BYTE v7[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a1 + 16, v7, 0, 0);
  v4 = *(void **)(v2 + 16);
  if (v4 && (swift_beginAccess(v3 + 16, &v6, 0, 0), *(_QWORD *)(v3 + 16)))
    return objc_msgSend(v4, "isEqual:");
  else
    return 0;
}

id sub_10004B258()
{
  id *v0;

  return *v0;
}

uint64_t sub_10004B260@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for KTSwiftDB.SQLRow()
{
  return objc_opt_self(_TtCC15swtransparencyd9KTSwiftDB6SQLRow);
}

unint64_t sub_10004B28C()
{
  unint64_t result;

  result = qword_100127AF0;
  if (!qword_100127AF0)
  {
    result = swift_getWitnessTable(&unk_1000DD24C, &type metadata for KTSwiftDBError);
    atomic_store(result, (unint64_t *)&qword_100127AF0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StateMachineEvents.WaitType(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for KTSwiftDBError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10004B368 + 4 * asc_1000DD240[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10004B388 + 4 * byte_1000DD245[v4]))();
}

_BYTE *sub_10004B368(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10004B388(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10004B390(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10004B398(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10004B3A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10004B3A8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KTSwiftDBError()
{
  return &type metadata for KTSwiftDBError;
}

uint64_t type metadata accessor for KTSwiftDB()
{
  return objc_opt_self(_TtC15swtransparencyd9KTSwiftDB);
}

uint64_t *initializeBufferWithCopyOfBuffer for KTSwiftDB.SQLStepResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for KTSwiftDB.SQLStepResult(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for KTSwiftDB.SQLStepResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t *assignWithTake for KTSwiftDB.SQLStepResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for KTSwiftDB.SQLStepResult(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for KTSwiftDB.SQLStepResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for KTSwiftDB.SQLStepResult()
{
  return &type metadata for KTSwiftDB.SQLStepResult;
}

uint64_t sub_10004B534()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("KTSDBObjcError"));
}

uint64_t sub_10004B544(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100025DB4(&qword_100127AE8, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD55C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10004B584(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100025DB4(&qword_100127AE8, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD55C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10004B5C4(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100025DB4(&qword_100127AE8, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD55C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10004B628()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10004B65C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100025DB4(&qword_100127AE8, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD55C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10004B6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_10004B708(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100025DB4(&qword_100127D70, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD51C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10004B748(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100025DB4(&qword_100127D70, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD51C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10004B788(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100025DB4(&qword_100127AE8, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD55C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10004B7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100025DB4(&qword_100127AE8, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD55C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10004B820()
{
  return sub_100025DB4(&qword_100127D60, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD444);
}

uint64_t sub_10004B84C()
{
  return sub_100025DB4(&qword_100127D68, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD46C);
}

uint64_t sub_10004B878()
{
  return sub_100025DB4(&qword_100127D70, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD51C);
}

uint64_t sub_10004B8A4()
{
  return sub_100025DB4(&qword_100127D78, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD4EC);
}

uint64_t sub_10004B8D0()
{
  return sub_100025DB4(&qword_100127D80, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD4AC);
}

uint64_t sub_10004B8FC()
{
  return sub_100025DB4(&qword_100127D88, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1000DD5FC);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_10002987C(a1, &qword_100127DC8, (uint64_t)&unk_100108C68);
}

uint64_t sub_10004B93C()
{
  return sub_100025DB4(&qword_100127D90, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1000DD5C4);
}

unint64_t sub_10004B96C()
{
  unint64_t result;

  result = qword_100127D98;
  if (!qword_100127D98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100127D98);
  }
  return result;
}

uint64_t sub_10004B9B0()
{
  return sub_100025DB4(&qword_100127DA0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1000DD634);
}

uint64_t sub_10004B9DC()
{
  return sub_100025DB4(&qword_100127AE8, (uint64_t (*)(uint64_t))type metadata accessor for KTSDBObjcError, (uint64_t)&unk_1000DD55C);
}

BOOL sub_10004BA08(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

unint64_t sub_10004BA1C()
{
  unint64_t result;

  result = qword_100127DA8;
  if (!qword_100127DA8)
  {
    result = swift_getWitnessTable(&unk_1000DD33C, &type metadata for KTSwiftDBError);
    atomic_store(result, (unint64_t *)&qword_100127DA8);
  }
  return result;
}

uint64_t sub_10004BA60(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10004BA68(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 40))(a2, a1);
  return a2;
}

id sub_10004BAB0()
{
  return sub_10004BBBC();
}

id sub_10004BAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  Class isa;
  id v7;
  id v9;

  isa = Array._bridgeToObjectiveC()().super.isa;
  v9 = 0;
  v7 = objc_msgSend(v3, "verifyConsistencyProof:startLogHead:endLogHead:error:", isa, a2, a3, &v9);

  if (v9)
  {
    v9;
    swift_willThrow();
  }
  return v7;
}

id sub_10004BBBC()
{
  void *v0;
  id v1;
  id v3;

  v3 = 0;
  v1 = objc_msgSend(v0, "verifyWithError:", &v3);
  if (v3)
  {
    v3;
    swift_willThrow();
  }
  return v1;
}

unint64_t sub_10004BC50(uint64_t a1, char a2)
{
  Swift::String v2;
  void *object;

  if ((a2 & 1) != 0)
    __asm { BR              X9 }
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000001ELL;
}

uint64_t sub_10004BD70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004FAA0();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10004BD98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004FAA0();
  return Error<>._code.getter(a1, v2);
}

unint64_t sub_10004BDC0()
{
  uint64_t v0;

  return sub_10004BC50(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_10004BDCC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_1001314E0);
  sub_100020804(v0, (uint64_t)qword_1001314E0);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0xD000000000000011, 0x80000001000DD7B0);
}

uint64_t sub_10004BE4C()
{
  uint64_t v0;

  if (qword_10012E440 != -1)
    swift_once(&qword_10012E440, sub_10004BDCC);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_1001314E0);
}

uint64_t sub_10004BE94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012E440 != -1)
    swift_once(&qword_10012E440, sub_10004BDCC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_1001314E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *sub_10004BF04()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 120);
  v2 = v1;
  return v1;
}

uint64_t sub_10004BF28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002AC5C(v1 + 128, a1, &qword_100127DF8);
}

uint64_t *sub_10004BF4C()
{
  return &qword_100127DD0;
}

uint64_t sub_10004BF58()
{
  return sub_10004BFD4(&qword_100127DD0, &off_100127DD8);
}

uint64_t sub_10004BF68(uint64_t a1, uint64_t a2)
{
  return sub_10004C034(a1, a2, &qword_100127DD0, (uint64_t *)&off_100127DD8);
}

uint64_t (*sub_10004BF78(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_100127DD0, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t *sub_10004BFB8()
{
  return &qword_100127DE0;
}

uint64_t sub_10004BFC4()
{
  return sub_10004BFD4(&qword_100127DE0, &off_100127DE8);
}

uint64_t sub_10004BFD4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(a1, v6, 0, 0);
  v4 = *a1;
  swift_bridgeObjectRetain(*a2);
  return v4;
}

uint64_t sub_10004C024(uint64_t a1, uint64_t a2)
{
  return sub_10004C034(a1, a2, &qword_100127DE0, (uint64_t *)&off_100127DE8);
}

uint64_t sub_10004C034(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a3, v10, 1, 0);
  v8 = *a4;
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease(v8);
}

uint64_t (*sub_10004C090(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_100127DE0, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10004C0D0(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for ActualMilestoneFetcher;
  *(_QWORD *)(a1 + 32) = &off_100108DD8;
}

uint64_t sub_10004C0E8@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(_DWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  sub_100032478(a4, a9 + 24);
  *(_QWORD *)(a9 + 104) = a5;
  sub_100032478(a6, a9 + 64);
  *(_QWORD *)(a9 + 112) = a7;
  *(_QWORD *)(a9 + 120) = a8;
  return sub_10004C158(a10, a9 + 128);
}

uint64_t sub_10004C158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001D138(&qword_100127DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004C1A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  _QWORD v76[2];
  id v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  uint64_t v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;

  v7 = v6;
  v84 = a4;
  v82 = a3;
  v83 = a2;
  v89 = a1;
  v10 = sub_10001D138(&qword_100127170);
  __chkstk_darwin(v10);
  v85 = (char *)v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v86 = *(_QWORD *)(v12 - 8);
  v87 = v12;
  v13 = __chkstk_darwin(v12);
  v78 = (char *)v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v80 = (char *)v76 - v15;
  v91 = type metadata accessor for URLQueryItem(0);
  v16 = *(_QWORD *)(v91 - 8);
  v17 = __chkstk_darwin(v91);
  v90 = (char *)v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v81 = (char *)v76 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)v76 - v21;
  v23 = sub_10001D138(&qword_100127E28);
  __chkstk_darwin(v23);
  v25 = (char *)v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for URLComponents(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v88 = (char *)v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v7;
  v29 = *(void **)(v7 + 8);
  v30 = String._bridgeToObjectiveC()();
  v77 = v29;
  v31 = objc_msgSend(v29, "stringForKey:", v30);

  if (!v31)
  {
    v38 = sub_10004F474();
    v36 = swift_allocError(&type metadata for MilestoneDownloadError, v38, 0, 0);
    *(_QWORD *)v39 = 0;
    *(_BYTE *)(v39 + 8) = 1;
    return swift_willThrow(v36);
  }
  v76[1] = a5;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  URLComponents.init(string:)(v32, v34);
  swift_bridgeObjectRelease(v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_1000202F0((uint64_t)v25, &qword_100127E28);
    v35 = sub_10004F474();
    v36 = swift_allocError(&type metadata for MilestoneDownloadError, v35, 0, 0);
    *(_QWORD *)v37 = 3;
    *(_BYTE *)(v37 + 8) = 1;
    return swift_willThrow(v36);
  }
  v41 = v26;
  v42 = v88;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v88, v25, v41);
  v76[0] = v27;
  if (v89)
  {
    v92 = v89;
    v43 = sub_100020A14();
    v44 = BinaryInteger.description.getter(&type metadata for Int64, v43);
    v46 = v45;
    URLQueryItem.init(name:value:)(0x6572546E776F6E6BLL, 0xEB00000000644965, v44, v45);
    swift_bridgeObjectRelease(v46);
    v47 = (_QWORD *)sub_10004F26C(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v49 = v47[2];
    v48 = v47[3];
    if (v49 >= v48 >> 1)
      v47 = (_QWORD *)sub_10004F26C(v48 > 1, v49 + 1, 1, (unint64_t)v47);
    v47[2] = v49 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))((unint64_t)v47+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v49, v22, v91);
  }
  else
  {
    v47 = _swiftEmptyArrayStorage;
  }
  v50 = v86;
  if ((v82 & 1) == 0 && v83)
  {
    v92 = v83;
    v51 = sub_100020A14();
    v52 = BinaryInteger.description.getter(&type metadata for Int64, v51);
    v54 = v53;
    URLQueryItem.init(name:value:)(0xD00000000000001CLL, 0x80000001000E3530, v52, v53);
    swift_bridgeObjectRelease(v54);
    if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
      v47 = (_QWORD *)sub_10004F26C(0, v47[2] + 1, 1, (unint64_t)v47);
    v56 = v47[2];
    v55 = v47[3];
    if (v56 >= v55 >> 1)
      v47 = (_QWORD *)sub_10004F26C(v55 > 1, v56 + 1, 1, (unint64_t)v47);
    v47[2] = v56 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))((unint64_t)v47+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v56, v81, v91);
  }
  if ((v84 & 1) != 0)
    v57 = 1702195828;
  else
    v57 = 0x65736C6166;
  if ((v84 & 1) != 0)
    v58 = 0xE400000000000000;
  else
    v58 = 0xE500000000000000;
  URLQueryItem.init(name:value:)(0x6572546563726F66, 0xE900000000000065, v57, v58);
  swift_bridgeObjectRelease(v58);
  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
    v47 = (_QWORD *)sub_10004F26C(0, v47[2] + 1, 1, (unint64_t)v47);
  v60 = v47[2];
  v59 = v47[3];
  if (v60 >= v59 >> 1)
    v47 = (_QWORD *)sub_10004F26C(v59 > 1, v60 + 1, 1, (unint64_t)v47);
  v47[2] = v60 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))((unint64_t)v47+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v60, v90, v91);
  v61 = URLComponents.queryItems.setter(v47);
  v62 = (uint64_t)v85;
  URLComponents.url.getter(v61);
  v63 = v87;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v62, 1, v87) == 1)
  {
    sub_1000202F0(v62, &qword_100127170);
    v64 = sub_10004F474();
    v65 = swift_allocError(&type metadata for MilestoneDownloadError, v64, 0, 0);
    *(_QWORD *)v66 = 3;
    *(_BYTE *)(v66 + 8) = 1;
    swift_willThrow(v65);
  }
  else
  {
    v67 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v80, v62, v63);
    sub_10004FAE4();
    v68 = (uint64_t)v78;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v78, v67, v63);
    v69 = sub_100097F40(v68, a6);
    v70 = sub_100020644();
    sub_100097938(v70 & 1);
    if (sub_100026054((uint64_t)objc_msgSend(v77, "currentEnvironment")))
    {
      objc_msgSend(v69, "_setPrivacyProxyFailClosed:", 1);
      if (qword_10012E440 != -1)
        swift_once(&qword_10012E440, sub_10004BDCC);
      v71 = type metadata accessor for Logger(0);
      v72 = sub_100020804(v71, (uint64_t)qword_1001314E0);
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v75 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Enforcing privacy proxy", v75, 2u);
        swift_slowDealloc(v75, -1, -1);
      }

      v42 = v88;
    }
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v69);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v67, v63);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v76[0] + 8))(v42, v41);
}

id sub_10004C990()
{
  return objc_msgSend((id)objc_opt_self(TransparencySettings), "defaultNetworkTimeout");
}

uint64_t sub_10004C9B4(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)(v2 + 776) = v1;
  *(double *)(v2 + 768) = a1;
  v3 = sub_10001D138(&qword_100127710);
  *(_QWORD *)(v2 + 784) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  *(_QWORD *)(v2 + 792) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 800) = v5;
  *(_QWORD *)(v2 + 808) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100127170) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 816) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 824) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 832) = swift_task_alloc(v6);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v2 + 840) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 848) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 856) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 864) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 872) = swift_task_alloc(v9);
  v10 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v2 + 880) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v2 + 888) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 896) = swift_task_alloc(v12);
  *(_QWORD *)(v2 + 904) = swift_task_alloc(v12);
  *(_QWORD *)(v2 + 912) = swift_task_alloc(v12);
  *(_QWORD *)(v2 + 920) = swift_task_alloc(v12);
  return swift_task_switch(sub_10004CB10, 0, 0);
}

uint64_t sub_10004CB10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  void (*v70)(uint64_t, uint64_t);
  unint64_t v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int *v89;
  uint64_t v90[2];

  v2 = sub_100041EB0(**(unsigned int **)(v1 + 776));
  if (!v3)
  {
    v11 = sub_10004F474();
    v12 = swift_allocError(&type metadata for MilestoneDownloadError, v11, 0, 0);
    *(_QWORD *)v13 = 4;
    *(_BYTE *)(v13 + 8) = 1;
    goto LABEL_12;
  }
  v4 = v2;
  v5 = v3;
  v6 = *(_QWORD *)(v1 + 776);
  v7 = *(void **)(v6 + 112);
  if (v7)
  {
    v8 = (unint64_t)objc_msgSend(v7, "logBeginningMs");
    if ((v8 & 0x8000000000000000) == 0)
    {
      v9 = v8;
      v10 = *(_QWORD **)(v1 + 776);
      goto LABEL_7;
    }
    __break(1u);
    swift_once(&qword_10012E440, sub_10004BDCC);
    sub_100020804(*(_QWORD *)(v1 + 840), (uint64_t)qword_1001314E0);
    swift_errorRetain(v0);
    v22 = swift_errorRetain(v0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v87 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 138412290;
      swift_errorRetain(v0);
      v26 = _swift_stdlib_bridgeErrorToNSError(v0);
      *(_QWORD *)(v1 + 736) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 736, v6, v25 + 4, v25 + 12);
      *v87 = v26;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to get last milestone from DB: %@", v25, 0xCu);
      v27 = sub_10001D138(&qword_100127730);
      swift_arrayDestroy(v87, 1, v27);
      swift_slowDealloc(v87, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

LABEL_12:
    swift_willThrow(v12);
    v28 = *(_QWORD *)(v1 + 912);
    v29 = *(_QWORD *)(v1 + 904);
    v30 = *(_QWORD *)(v1 + 896);
    v31 = *(_QWORD *)(v1 + 872);
    v32 = *(_QWORD *)(v1 + 864);
    v33 = *(_QWORD *)(v1 + 856);
    v34 = *(_QWORD *)(v1 + 832);
    v35 = *(_QWORD *)(v1 + 824);
    v36 = *(_QWORD *)(v1 + 816);
    v85 = *(_QWORD *)(v1 + 808);
    v86 = *(_QWORD *)(v1 + 784);
    swift_task_dealloc(*(_QWORD *)(v1 + 920));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v9 = 0;
  v10 = *(_QWORD **)(v1 + 776);
LABEL_7:
  v14 = v10[6];
  v15 = v10[7];
  sub_100022F20(v10 + 3, v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 104))(v4, v5, v9, v7 == 0, 5, 1, v14, v15);
  v18 = v17;
  LOBYTE(v15) = v19;
  v21 = v20;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(v1 + 168) = v16;
  *(_QWORD *)(v1 + 176) = v18;
  *(_BYTE *)(v1 + 184) = v15 & 1;
  *(_QWORD *)(v1 + 192) = v21;
  sub_10004C1A0(v16, v18, v15 & 1, v7 != 0, *(_QWORD *)(v1 + 920), *(double *)(v1 + 768));
  if (qword_10012E440 != -1)
    swift_once(&qword_10012E440, sub_10004BDCC);
  v38 = *(_QWORD *)(v1 + 920);
  v39 = *(_QWORD *)(v1 + 912);
  v40 = *(_QWORD *)(v1 + 888);
  v41 = *(_QWORD *)(v1 + 880);
  v42 = *(_QWORD *)(v1 + 872);
  v43 = *(_QWORD *)(v1 + 848);
  v44 = *(_QWORD *)(v1 + 840);
  v45 = sub_100020804(v44, (uint64_t)qword_1001314E0);
  *(_QWORD *)(v1 + 928) = v45;
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
  *(_QWORD *)(v1 + 936) = v46;
  v46(v42, v45, v44);
  v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
  *(_QWORD *)(v1 + 944) = v47;
  v48 = v47(v39, v38, v41);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    v83 = v50;
    v51 = *(_QWORD *)(v1 + 832);
    v52 = swift_slowAlloc(22, -1);
    v88 = swift_slowAlloc(64, -1);
    v90[0] = v88;
    *(_DWORD *)v52 = 136315394;
    swift_beginAccess(v1 + 168, v1 + 568, 0, 0);
    v53 = *(_BYTE *)(v1 + 184);
    v54 = *(_QWORD *)(v1 + 192);
    *(_OWORD *)(v1 + 136) = *(_OWORD *)(v1 + 168);
    *(_BYTE *)(v1 + 152) = v53;
    *(_QWORD *)(v1 + 160) = v54;
    v55 = sub_10004F4CC();
    v56 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.Milestone, v55);
    v58 = v57;
    *(_QWORD *)(v1 + 752) = sub_1000230D0(v56, v57, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 752, v1 + 760, v52 + 4, v52 + 12);
    v59 = swift_bridgeObjectRelease(v58);
    *(_WORD *)(v52 + 12) = 2080;
    URLRequest.url.getter(v59);
    v60 = type metadata accessor for URL(0);
    v61 = *(_QWORD *)(v60 - 8);
    v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v51, 1, v60);
    v63 = *(_QWORD *)(v1 + 832);
    if (v62 == 1)
    {
      sub_1000202F0(*(_QWORD *)(v1 + 832), &qword_100127170);
      v64 = 0xEB000000004C5255;
      v65 = 0x206E776F6E6B6E75;
    }
    else
    {
      v65 = URL.description.getter();
      v64 = v71;
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v63, v60);
    }
    v72 = v83;
    v73 = *(_QWORD *)(v1 + 912);
    v74 = *(_QWORD *)(v1 + 888);
    v75 = *(_QWORD *)(v1 + 880);
    v81 = *(_QWORD *)(v1 + 848);
    v82 = *(_QWORD *)(v1 + 840);
    v84 = *(_QWORD *)(v1 + 872);
    *(_QWORD *)(v1 + 760) = sub_1000230D0(v65, v64, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 760, v1 + 768, v52 + 14, v52 + 22);
    swift_bridgeObjectRelease(v64);
    v69 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
    v69(v73, v75);
    _os_log_impl((void *)&_mh_execute_header, v49, v72, "Fetching %s from %s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v52, -1, -1);

    v70 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    v70(v84, v82);
  }
  else
  {
    v66 = *(_QWORD *)(v1 + 872);
    v67 = *(_QWORD *)(v1 + 848);
    v68 = *(_QWORD *)(v1 + 840);
    v69 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 888) + 8);
    v69(*(_QWORD *)(v1 + 912), *(_QWORD *)(v1 + 880));

    v70 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v70(v66, v68);
  }
  *(_QWORD *)(v1 + 960) = v69;
  *(_QWORD *)(v1 + 952) = v70;
  v76 = *(_QWORD **)(v1 + 776);
  v77 = v76[11];
  v78 = v76[12];
  sub_100022F20(v76 + 8, v77);
  v79 = *(int **)(v78 + 8);
  v89 = (int *)((char *)v79 + *v79);
  v80 = (_QWORD *)swift_task_alloc(v79[1]);
  *(_QWORD *)(v1 + 968) = v80;
  *v80 = v1;
  v80[1] = sub_10004D2FC;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v89)(*(_QWORD *)(v1 + 920), v77, v78);
}

uint64_t sub_10004D2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 968);
  v5[122] = a1;
  v5[123] = a2;
  v5[124] = a3;
  v5[125] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_10004ED6C;
  else
    v7 = sub_10004D374;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10004D374()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSString v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  void *v37;
  char **v38;
  uint64_t v39;
  id v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  NSString v51;
  uint64_t v52;
  id v53;
  id v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  char **v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  void *v74;
  NSString v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  void *v106;
  Swift::Bool v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  unint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void (*v124)(uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  unint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  NSString v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t (*v162)(void);
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  NSString v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  _BOOL4 v173;
  unint64_t v174;
  void (*v175)(uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  NSString v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  void *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  char *v200;
  NSString v201;
  void *v202;
  void *v203;
  uint64_t v204;
  NSObject *v205;
  os_log_type_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  void *v231;
  unint64_t v232;
  uint64_t v233;
  void (*v234)(uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  void *v241;
  void (*v242)(uint64_t, uint64_t);
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  NSObject *v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void (*v267)(uint64_t, uint64_t);
  uint64_t *v268;
  uint64_t v269;
  os_log_type_t typea[8];
  os_log_type_t typeb[8];
  void *type;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void (*v276)(uint64_t, uint64_t);
  uint64_t v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  os_log_t logb;
  NSObject *logc;
  os_log_t logd;
  os_log_t log;
  os_log_t loga;
  os_log_t loge;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291[2];

  v278 = v0 + 680;
  v1 = *(void **)(v0 + 992);
  sub_100022F88(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984));
  v2 = v1;
  static Date.now.getter();
  v3 = objc_opt_self(NSHTTPURLResponse);
  v4 = swift_dynamicCastObjCClass(v2, v3);
  v288 = v0;
  if (!v4)
  {
    v12 = *(_QWORD *)(v0 + 984);
    v13 = *(_QWORD *)(v0 + 976);
    logb = *(os_log_t *)(v0 + 944);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 936);
    v15 = *(_QWORD *)(v0 + 928);
    v16 = *(_QWORD *)(v0 + 920);
    v17 = *(_QWORD *)(v0 + 904);
    v18 = *(_QWORD *)(v0 + 880);
    v19 = *(_QWORD *)(v0 + 864);
    v20 = *(_QWORD *)(v0 + 840);

    sub_100022F44(v13, v12);
    v14(v19, v15, v20);
    v21 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))logb)(v17, v16, v18);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = *(_QWORD *)(v0 + 824);
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v291[0] = v26;
      *(_DWORD *)v25 = 136315138;
      URLRequest.url.getter();
      v27 = type metadata accessor for URL(0);
      v28 = *(_QWORD *)(v27 - 8);
      v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v24, 1, v27);
      v30 = *(_QWORD *)(v0 + 824);
      if (v29 == 1)
      {
        sub_1000202F0(*(_QWORD *)(v0 + 824), &qword_100127170);
        v31 = 0xEB000000004C5255;
        v32 = 0x206E776F6E6B6E75;
      }
      else
      {
        v32 = URL.description.getter();
        v31 = v123;
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v27);
      }
      v124 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
      logd = *(os_log_t *)(v288 + 952);
      v125 = *(_QWORD *)(v288 + 904);
      v126 = *(_QWORD *)(v288 + 880);
      *(_QWORD *)typea = *(_QWORD *)(v288 + 840);
      v275 = *(_QWORD *)(v288 + 864);
      v127 = v32;
      v65 = (_QWORD *)v288;
      *(_QWORD *)(v288 + 680) = sub_1000230D0(v127, v31, v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v278, v288 + 688, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease(v31);
      v124(v125, v126);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Bad URL response from %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      ((void (*)(uint64_t, _QWORD))logd)(v275, *(_QWORD *)typea);
    }
    else
    {
      v95 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
      v96 = *(_QWORD *)(v0 + 864);
      v97 = *(_QWORD *)(v0 + 840);
      (*(void (**)(_QWORD, _QWORD))(v0 + 960))(*(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 880));

      v95(v96, v97);
      v65 = (_QWORD *)v0;
    }
    v128 = *(void **)(v65[97] + 120);
    v129 = v65[123];
    v130 = v65[122];
    v131 = (void (*)(uint64_t, uint64_t))v65[120];
    v132 = v65[115];
    v133 = v65[110];
    v134 = v65[101];
    v135 = v65[100];
    v136 = v65[99];
    v279 = (void *)v65[124];
    if (v128)
    {
      swift_beginAccess(&qword_100127DD0, v65 + 44, 0, 0);
      *(_QWORD *)typeb = v135;
      v276 = v131;
      v137 = off_100127DD8;
      swift_bridgeObjectRetain(off_100127DD8);
      v138 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v137);
      v139 = sub_10004F474();
      v140 = swift_allocError(&type metadata for MilestoneDownloadError, v139, 0, 0);
      *(_QWORD *)v141 = 1;
      *(_BYTE *)(v141 + 8) = 1;
      v266 = v134;
      v142 = (void *)_convertErrorToNSError(_:)(v140);
      v143 = v136;
      v144 = v129;
      v145 = (void *)_convertErrorToNSError(_:)(v142);

      swift_errorRelease();
      objc_msgSend(v128, "logResultForEvent:hardFailure:result:", v138, 1, v145);

      v65 = (_QWORD *)v288;
      v146 = swift_allocError(&type metadata for MilestoneDownloadError, v139, 0, 0);
      *(_QWORD *)v147 = 1;
      *(_BYTE *)(v147 + 8) = 1;
      swift_willThrow(v146);

      sub_100022F44(v130, v144);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)typeb + 8))(v266, v143);
      v276(v132, v133);
    }
    else
    {
      v148 = sub_10004F474();
      v149 = swift_allocError(&type metadata for MilestoneDownloadError, v148, 0, 0);
      *(_QWORD *)v150 = 1;
      *(_BYTE *)(v150 + 8) = 1;
      swift_willThrow(v149);

      sub_100022F44(v130, v129);
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v134, v136);
      v131(v132, v133);
    }
    goto LABEL_31;
  }
  v5 = (void *)v4;
  v6 = v0 + 168;
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v5, "valueForHTTPHeaderField:", v7);

  if (v8)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

  }
  else
  {
    v11 = 0xE700000000000000;
    v9 = 0x3E4853206F6E3CLL;
  }
  v33 = *(id *)(v0 + 992);
  swift_bridgeObjectRetain_n(v11, 2);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter();
  v36 = os_log_type_enabled(v34, v35);
  v37 = *(void **)(v0 + 992);
  v38 = &selRef_writeAsMessageSetTo_;
  if (v36)
  {
    logc = v34;
    v39 = swift_slowAlloc(32, -1);
    v273 = swift_slowAlloc(64, -1);
    v291[0] = v273;
    *(_DWORD *)v39 = 134218498;
    v40 = objc_msgSend(v5, "statusCode");

    *(_QWORD *)(v0 + 696) = v40;
    v6 = v0 + 168;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v0 + 704, v39 + 4, v39 + 12);

    *(_WORD *)(v39 + 12) = 2080;
    swift_beginAccess(v0 + 168, v0 + 448, 0, 0);
    v41 = *(_BYTE *)(v0 + 184);
    v42 = *(_QWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 168);
    *(_BYTE *)(v0 + 280) = v41;
    *(_QWORD *)(v0 + 288) = v42;
    v43 = sub_10004F4CC();
    v44 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.Milestone, v43);
    v46 = v45;
    *(_QWORD *)(v0 + 720) = sub_1000230D0(v44, v45, v291);
    v38 = &selRef_writeAsMessageSetTo_;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 720, v0 + 728, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v39 + 22) = 2080;
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 728) = sub_1000230D0(v9, v11, v291);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 728, v0 + 736, v39 + 24, v39 + 32);
    swift_bridgeObjectRelease_n(v11, 3);
    v34 = logc;
    _os_log_impl((void *)&_mh_execute_header, logc, v35, "Received %ld response for %s with %s", (uint8_t *)v39, 0x20u);
    swift_arrayDestroy(v273, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v273, -1, -1);
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n(v11, 2);
  }

  if (objc_msgSend(v5, v38[260]) != (id)200)
  {
    v66 = (_QWORD *)v0;
    v67 = (_QWORD *)(v0 + 16);
    v68 = *(_QWORD *)(v0 + 984);
    v69 = v38;
    v70 = *(_QWORD *)(v0 + 976);
    v71 = *(_QWORD *)(v0 + 776);
    swift_bridgeObjectRelease(v11);
    sub_100022F44(v70, v68);
    v72 = objc_msgSend(v5, v69[260]);
    v73 = *(void **)(v71 + 120);
    if (v73)
    {
      swift_beginAccess(&qword_100127DD0, v288 + 424, 0, 0);
      v74 = off_100127DD8;
      swift_bridgeObjectRetain(off_100127DD8);
      v75 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v74);
      v76 = sub_10004F474();
      v77 = swift_allocError(&type metadata for MilestoneDownloadError, v76, 0, 0);
      *(_QWORD *)v78 = v72;
      *(_BYTE *)(v78 + 8) = 0;
      v79 = (void *)_convertErrorToNSError(_:)(v77);
      v80 = (void *)_convertErrorToNSError(_:)(v79);

      swift_errorRelease();
      objc_msgSend(v73, "logResultForEvent:hardFailure:result:", v75, 1, v80);

    }
    sub_10002AC5C(*(_QWORD *)(v288 + 776) + 128, v288 + 16, &qword_100127DF8);
    v81 = *(_QWORD *)(v288 + 40);
    if (v81)
    {
      v82 = *(int **)(v288 + 776);
      v83 = *(_QWORD *)(v288 + 48);
      sub_100022F20((_QWORD *)(v288 + 16), *(_QWORD *)(v288 + 40));
      v84 = sub_10004F474();
      v85 = swift_allocError(&type metadata for MilestoneDownloadError, v84, 0, 0);
      *(_QWORD *)v86 = v72;
      *(_BYTE *)(v86 + 8) = 0;
      v87 = sub_10001D138(&qword_100127840);
      v88 = *(_QWORD *)(sub_10001D138(&qword_100127848) - 8);
      v89 = *(_QWORD *)(v88 + 72);
      v90 = *(unsigned __int8 *)(v88 + 80);
      v91 = (v90 + 32) & ~v90;
      v92 = swift_allocObject(v87, v91 + v89, v90 | 7);
      *(_OWORD *)(v92 + 16) = xmmword_1000DC1E0;
      v93 = (_QWORD *)(v92 + v91);
      v66 = (_QWORD *)v288;
      *v93 = 7368801;
      v93[1] = 0xE300000000000000;
      EventValue.init(integerLiteral:)(*v82);
      v94 = sub_10003F064(v92);
      (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v83 + 8))(0x73656C696D747753, 0xEC000000656E6F74, v85, v94, v81, v83);
      swift_bridgeObjectRelease(v94);
      swift_errorRelease();
      sub_100023CAC(v67);
    }
    else
    {
      sub_1000202F0(v288 + 16, &qword_100127DF8);
    }
    v110 = v72;
    v111 = (void *)v66[124];
    v112 = v66[123];
    v113 = v66[122];
    v114 = *(void (**)(uint64_t, uint64_t))(v288 + 960);
    v115 = *(_QWORD *)(v288 + 920);
    v116 = *(_QWORD *)(v288 + 880);
    v117 = *(_QWORD *)(v288 + 808);
    v118 = *(_QWORD *)(v288 + 800);
    v119 = *(_QWORD *)(v288 + 792);
    v120 = sub_10004F474();
    v121 = swift_allocError(&type metadata for MilestoneDownloadError, v120, 0, 0);
    *(_QWORD *)v122 = v110;
    *(_BYTE *)(v122 + 8) = 0;
    swift_willThrow(v121);

    sub_100022F44(v113, v112);
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v117, v119);
    v114(v115, v116);
    goto LABEL_25;
  }
  v47 = v11;
  v48 = *(_QWORD *)(v0 + 776);
  v49 = *(void **)(v48 + 120);
  if (v49)
  {
    swift_beginAccess(&qword_100127DD0, v288 + 400, 0, 0);
    v50 = off_100127DD8;
    swift_bridgeObjectRetain(off_100127DD8);
    v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    objc_msgSend(v49, "logResultForEvent:hardFailure:result:", v51, 0, 0);

  }
  v52 = *(_QWORD *)(v288 + 1000);
  v53 = objc_allocWithZone((Class)MilestoneRootsResponse);
  v54 = sub_10002E330();
  *(_QWORD *)(v288 + 1008) = v54;
  if (v52)
  {
    v55 = *(void **)(v288 + 992);
    v56 = *(_QWORD *)(v288 + 984);
    v57 = *(_QWORD *)(v288 + 976);
    v58 = *(void (**)(uint64_t, uint64_t))(v288 + 960);
    v59 = *(_QWORD *)(v288 + 920);
    v60 = *(_QWORD *)(v288 + 880);
    v61 = *(_QWORD *)(v288 + 808);
    v62 = *(_QWORD *)(v288 + 800);
    v63 = *(_QWORD *)(v288 + 792);
    sub_100022F44(v57, v56);

    sub_100022F44(v57, v56);
    swift_bridgeObjectRelease(v47);
    v64 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
    v65 = (_QWORD *)v288;
    v64(v61, v63);
    v58(v59, v60);
LABEL_31:
    v151 = v65[115];
    v152 = v65[114];
    v153 = v65[113];
    v154 = v65[112];
    v155 = v65[109];
    v156 = v65[108];
    v157 = v65[107];
    v158 = v65[104];
    v159 = v65[103];
    v160 = v65;
    v161 = v65[102];
    v280 = v160[101];
    v289 = v160[98];
    swift_task_dealloc(v151);
    swift_task_dealloc(v152);
    swift_task_dealloc(v153);
    swift_task_dealloc(v154);
    swift_task_dealloc(v155);
    swift_task_dealloc(v156);
    swift_task_dealloc(v157);
    swift_task_dealloc(v158);
    swift_task_dealloc(v159);
    swift_task_dealloc(v161);
    swift_task_dealloc(v280);
    swift_task_dealloc(v289);
    v162 = (uint64_t (*)(void))v160[1];
    return v162();
  }
  v98 = v54;
  v274 = v48;
  v264 = v6;
  v269 = v9;
  v99 = *(_QWORD *)(v288 + 808);
  v100 = *(_QWORD *)(v288 + 800);
  v101 = *(_QWORD *)(v288 + 792);
  v102 = *(_QWORD *)(v288 + 784);
  v103 = *(_QWORD *)(v288 + 776);
  sub_100022F44(*(_QWORD *)(v288 + 976), *(_QWORD *)(v288 + 984));
  sub_10002E424(v103 + 24, v288 + 56);
  sub_10005BA5C(v288 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 16))(v102, v99, v101);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v100 + 56))(v102, 0, 1, v101);
  MilestoneRootsResponse.receiptTime.setter(v102);
  v104 = *(void **)(v103 + 8);
  v105 = v104;
  MilestoneRootsResponse.configBag.setter(v104);
  v106 = *(void **)(v103 + 16);
  v106;
  MilestoneRootsResponse.keyBag.setter(v106);
  v107 = MilestoneRootsResponse.isNewEpoch()();
  if (v108)
  {
    swift_errorRelease();
    v109 = v264;
LABEL_36:
    v164 = (_QWORD *)v288;
    type = v98;
    MilestoneRootsResponse.verify()();
    if (v167 == 1)
    {
      if (v49)
      {
        swift_beginAccess(&qword_100127DE0, v288 + 376, 0, 0);
        v168 = off_100127DE8;
        swift_bridgeObjectRetain(off_100127DE8);
        v169 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v168);
        objc_msgSend(v49, "logResultForEvent:hardFailure:result:", v169, 0, 0);

      }
      v170 = swift_bridgeObjectRetain(v11);
      v171 = Logger.logObject.getter(v170);
      v172 = static os_log_type_t.default.getter();
      v173 = os_log_type_enabled(v171, v172);
      v174 = *(_QWORD *)(v288 + 984);
      v175 = *(void (**)(uint64_t, uint64_t))(v288 + 960);
      v176 = *(_QWORD *)(v288 + 920);
      v177 = *(_QWORD *)(v288 + 880);
      log = *(os_log_t *)(v288 + 792);
      v277 = *(_QWORD *)(v288 + 808);
      if (v173)
      {
        v267 = *(void (**)(uint64_t, uint64_t))(v288 + 960);
        v261 = *(_QWORD *)(v288 + 976);
        v262 = *(_QWORD *)(v288 + 984);
        v263 = *(_QWORD *)(v288 + 800);
        v178 = *(void **)(v288 + 992);
        v265 = *(_QWORD *)(v288 + 880);
        v179 = swift_slowAlloc(22, -1);
        v180 = swift_slowAlloc(64, -1);
        v181 = v109;
        v182 = v180;
        v291[0] = v180;
        *(_DWORD *)v179 = 136315394;
        swift_beginAccess(v181, v288 + 544, 0, 0);
        v183 = *(_BYTE *)(v288 + 184);
        v184 = *(_QWORD *)(v288 + 192);
        *(_OWORD *)(v288 + 232) = *(_OWORD *)(v288 + 168);
        *(_BYTE *)(v288 + 248) = v183;
        *(_QWORD *)(v288 + 256) = v184;
        v185 = sub_10004F4CC();
        v186 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.Milestone, v185);
        v188 = v187;
        *(_QWORD *)(v288 + 664) = sub_1000230D0(v186, v187, v291);
        v164 = (_QWORD *)v288;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v288 + 664, v288 + 672, v179 + 4, v179 + 12);
        swift_bridgeObjectRelease(v188);
        *(_WORD *)(v179 + 12) = 2080;
        swift_bridgeObjectRetain(v11);
        *(_QWORD *)(v288 + 672) = sub_1000230D0(v269, v11, v291);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v288 + 672, v278, v179 + 14, v179 + 22);
        swift_bridgeObjectRelease_n(v11, 3);
        _os_log_impl((void *)&_mh_execute_header, v171, v172, "Verified response for %s with %s", (uint8_t *)v179, 0x16u);
        swift_arrayDestroy(v182, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v182, -1, -1);
        swift_slowDealloc(v179, -1, -1);

        sub_100022F44(v261, v262);
        (*(void (**)(uint64_t, os_log_t))(v263 + 8))(v277, log);
        v267(v176, v265);
      }
      else
      {
        v248 = *(_QWORD *)(v288 + 800);
        v249 = v171;
        v250 = *(void **)(v288 + 992);
        v251 = *(_QWORD *)(v288 + 976);

        sub_100022F44(v251, v174);
        swift_bridgeObjectRelease_n(v11, 2);

        (*(void (**)(uint64_t, os_log_t))(v248 + 8))(v277, log);
        v175(v176, v177);
      }
      goto LABEL_54;
    }
    if (v49)
    {
      swift_beginAccess(&qword_100127DE0, v288 + 592, 0, 0);
      v189 = off_100127DE8;
      swift_bridgeObjectRetain(off_100127DE8);
      v190 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v189);
      v191 = sub_10004F474();
      v192 = swift_allocError(&type metadata for MilestoneDownloadError, v191, 0, 0);
      *(_QWORD *)v193 = 2;
      *(_BYTE *)(v193 + 8) = 1;
      v194 = (void *)_convertErrorToNSError(_:)(v192);
      v195 = (void *)_convertErrorToNSError(_:)(v194);

      swift_errorRelease();
      objc_msgSend(v49, "logResultForEvent:hardFailure:result:", v190, 1, v195);

    }
    v196 = sub_10004F474();
    v197 = swift_allocError(&type metadata for MilestoneDownloadError, v196, 0, 0);
    *(_QWORD *)v198 = 2;
    *(_BYTE *)(v198 + 8) = 1;
    swift_willThrow(v197);
    loga = (os_log_t)(v288 + 96);
    v199 = *(void **)(v274 + 120);
    if (v199)
    {
      swift_beginAccess(&qword_100127DE0, v288 + 496, 0, 0);
      v200 = off_100127DE8;
      swift_bridgeObjectRetain(off_100127DE8);
      v201 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v200);
      v202 = (void *)_convertErrorToNSError(_:)(v197);
      v203 = (void *)_convertErrorToNSError(_:)(v202);

      objc_msgSend(v199, "logResultForEvent:hardFailure:result:", v201, 1, v203);
    }
    swift_errorRetain(v197);
    swift_bridgeObjectRetain(v11);
    v204 = swift_errorRetain(v197);
    v205 = Logger.logObject.getter(v204);
    v206 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v205, v206))
    {
      v207 = v197;
      v208 = swift_slowAlloc(32, -1);
      v268 = (uint64_t *)swift_slowAlloc(8, -1);
      v281 = swift_slowAlloc(64, -1);
      v291[0] = v281;
      *(_DWORD *)v208 = 136315650;
      swift_beginAccess(v264, v288 + 520, 0, 0);
      v209 = *(_BYTE *)(v288 + 184);
      v210 = *(_QWORD *)(v288 + 192);
      *(_OWORD *)(v288 + 200) = *(_OWORD *)(v288 + 168);
      *(_BYTE *)(v288 + 216) = v209;
      *(_QWORD *)(v288 + 224) = v210;
      v211 = sub_10004F4CC();
      v212 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.Milestone, v211);
      v214 = v213;
      *(_QWORD *)(v288 + 656) = sub_1000230D0(v212, v213, v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v288 + 656, v288 + 664, v208 + 4, v208 + 12);
      swift_bridgeObjectRelease(v214);
      *(_WORD *)(v208 + 12) = 2080;
      swift_bridgeObjectRetain(v11);
      *(_QWORD *)(v288 + 648) = sub_1000230D0(v269, v11, v291);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v288 + 648, v288 + 656, v208 + 14, v208 + 22);
      swift_bridgeObjectRelease_n(v11, 3);
      *(_WORD *)(v208 + 22) = 2112;
      swift_errorRetain(v207);
      v215 = _swift_stdlib_bridgeErrorToNSError(v207);
      *(_QWORD *)(v288 + 640) = v215;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v288 + 640, v288 + 648, v208 + 24, v208 + 32);
      *v268 = v215;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v205, v206, "Response for %s with %s failed: %@", (uint8_t *)v208, 0x20u);
      v216 = sub_10001D138(&qword_100127730);
      swift_arrayDestroy(v268, 1, v216);
      swift_slowDealloc(v268, -1, -1);
      swift_arrayDestroy(v281, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v281, -1, -1);
      v217 = v208;
      v197 = v207;
      swift_slowDealloc(v217, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v11, 2);
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10002AC5C(*(_QWORD *)(v288 + 776) + 128, (uint64_t)loga, &qword_100127DF8);
    v218 = *(_QWORD *)(v288 + 120);
    if (v218)
    {
      v219 = *(int **)(v288 + 776);
      v220 = *(_QWORD *)(v288 + 128);
      sub_100022F20(loga, *(_QWORD *)(v288 + 120));
      v221 = sub_10001D138(&qword_100127840);
      v222 = *(_QWORD *)(sub_10001D138(&qword_100127848) - 8);
      v223 = *(_QWORD *)(v222 + 72);
      v224 = *(unsigned __int8 *)(v222 + 80);
      v225 = (v224 + 32) & ~v224;
      v226 = swift_allocObject(v221, v225 + v223, v224 | 7);
      *(_OWORD *)(v226 + 16) = xmmword_1000DC1E0;
      v227 = (_QWORD *)(v226 + v225);
      *v227 = 7368801;
      v227[1] = 0xE300000000000000;
      v228 = *v219;
      swift_errorRetain(v197);
      EventValue.init(integerLiteral:)(v228);
      v229 = sub_10003F064(v226);
      (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v220 + 8))(0x73656C696D747753, 0xEC000000656E6F74, v197, v229, v218, v220);
      swift_bridgeObjectRelease(v229);
      swift_errorRelease();
      v230 = sub_100023CAC(loga);
    }
    else
    {
      v230 = sub_1000202F0((uint64_t)loga, &qword_100127DF8);
    }
    v231 = *(void **)(v288 + 992);
    v232 = *(_QWORD *)(v288 + 984);
    v233 = *(_QWORD *)(v288 + 976);
    v234 = *(void (**)(uint64_t, uint64_t))(v288 + 960);
    v235 = *(_QWORD *)(v288 + 920);
    v236 = *(_QWORD *)(v288 + 880);
    v237 = *(_QWORD *)(v288 + 808);
    v238 = *(_QWORD *)(v288 + 800);
    v239 = *(_QWORD *)(v288 + 792);
    swift_willThrow(v230);

    sub_100022F44(v233, v232);
    (*(void (**)(uint64_t, uint64_t))(v238 + 8))(v237, v239);
    v234(v235, v236);
LABEL_25:
    v65 = (_QWORD *)v288;
    goto LABEL_31;
  }
  v109 = v264;
  if (!v107)
    goto LABEL_36;
  v164 = (_QWORD *)v288;
  v165 = *(_QWORD *)(v288 + 776);
  swift_bridgeObjectRelease(v11);
  sub_10006D80C();
  v166 = *(_QWORD *)(v165 + 104);
  *(_QWORD *)(v288 + 1016) = v166;
  if (!v166)
  {

    v240 = *(void **)(v288 + 1008);
    v241 = *(void **)(v288 + 992);
    v242 = *(void (**)(uint64_t, uint64_t))(v288 + 960);
    v243 = *(_QWORD *)(v288 + 920);
    v244 = *(_QWORD *)(v288 + 880);
    v245 = *(_QWORD *)(v288 + 808);
    v246 = *(_QWORD *)(v288 + 800);
    v247 = *(_QWORD *)(v288 + 792);
    sub_100022F44(*(_QWORD *)(v288 + 976), *(_QWORD *)(v288 + 984));

    (*(void (**)(uint64_t, uint64_t))(v246 + 8))(v245, v247);
    v242(v243, v244);
LABEL_54:
    v252 = v164[114];
    v253 = v164[113];
    v254 = v164[112];
    v255 = v164[109];
    v256 = v164[108];
    v257 = v164[107];
    v258 = v164[104];
    v259 = v164[103];
    v260 = v164[102];
    loge = (os_log_t)v164[101];
    v290 = v164[98];
    swift_task_dealloc(v164[115]);
    swift_task_dealloc(v252);
    swift_task_dealloc(v253);
    swift_task_dealloc(v254);
    swift_task_dealloc(v255);
    swift_task_dealloc(v256);
    swift_task_dealloc(v257);
    swift_task_dealloc(v258);
    swift_task_dealloc(v259);
    swift_task_dealloc(v260);
    swift_task_dealloc(loge);
    swift_task_dealloc(v290);
    v162 = (uint64_t (*)(void))v164[1];
    return v162();
  }
  *(_QWORD *)(v288 + 1024) = *(_QWORD *)(*(_QWORD *)v166 + 184);
  return swift_task_switch(sub_10004EA34, v166, 0);
}

uint64_t sub_10004EA34()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 1024))(1);
  return swift_task_switch(sub_10004EA78, 0, 0);
}

uint64_t sub_10004EA78()
{
  uint64_t v0;
  uint64_t v1;
  void *v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 776) + 104);
  *(_QWORD *)(v0 + 1032) = v1;
  if (v1)
  {
    *(_QWORD *)(v0 + 1040) = *(_QWORD *)(*(_QWORD *)v1 + 184);
    return swift_task_switch(sub_10004EBF4, v1, 0);
  }
  else
  {

    v3 = *(void **)(v0 + 1008);
    v4 = *(void **)(v0 + 992);
    v5 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
    v6 = *(_QWORD *)(v0 + 920);
    v7 = *(_QWORD *)(v0 + 880);
    v8 = *(_QWORD *)(v0 + 808);
    v9 = *(_QWORD *)(v0 + 800);
    v10 = *(_QWORD *)(v0 + 792);
    sub_100022F44(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984));

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v5(v6, v7);
    v11 = *(_QWORD *)(v0 + 912);
    v12 = *(_QWORD *)(v0 + 904);
    v13 = *(_QWORD *)(v0 + 896);
    v14 = *(_QWORD *)(v0 + 872);
    v15 = *(_QWORD *)(v0 + 864);
    v16 = *(_QWORD *)(v0 + 856);
    v17 = *(_QWORD *)(v0 + 832);
    v18 = *(_QWORD *)(v0 + 824);
    v19 = *(_QWORD *)(v0 + 816);
    v20 = *(_QWORD *)(v0 + 808);
    v21 = *(_QWORD *)(v0 + 784);
    swift_task_dealloc(*(_QWORD *)(v0 + 920));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10004EBF4()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 1040))(4);
  return swift_task_switch(sub_10004EC38, 0, 0);
}

uint64_t sub_10004EC38()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 1008);
  v2 = *(void **)(v0 + 992);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
  v4 = *(_QWORD *)(v0 + 920);
  v5 = *(_QWORD *)(v0 + 880);
  v6 = *(_QWORD *)(v0 + 808);
  v7 = *(_QWORD *)(v0 + 800);
  v8 = *(_QWORD *)(v0 + 792);
  sub_100022F44(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984));

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v3(v4, v5);
  v9 = *(_QWORD *)(v0 + 912);
  v10 = *(_QWORD *)(v0 + 904);
  v11 = *(_QWORD *)(v0 + 896);
  v12 = *(_QWORD *)(v0 + 872);
  v13 = *(_QWORD *)(v0 + 864);
  v14 = *(_QWORD *)(v0 + 856);
  v15 = *(_QWORD *)(v0 + 832);
  v16 = *(_QWORD *)(v0 + 824);
  v17 = *(_QWORD *)(v0 + 816);
  v19 = *(_QWORD *)(v0 + 808);
  v20 = *(_QWORD *)(v0 + 784);
  swift_task_dealloc(*(_QWORD *)(v0 + 920));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004ED6C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  NSString v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62[2];

  v1 = *(void **)(*(_QWORD *)(v0 + 776) + 120);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 1000);
    swift_beginAccess(&qword_100127DD0, v0 + 328, 0, 0);
    v3 = off_100127DD8;
    swift_bridgeObjectRetain(off_100127DD8);
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
    v5 = (void *)_convertErrorToNSError(_:)(v2);
    v6 = (void *)_convertErrorToNSError(_:)(v5);

    objc_msgSend(v1, "logResultForEvent:hardFailure:result:", v4, 1, v6);
  }
  v7 = *(_QWORD *)(v0 + 1000);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 944);
  v9 = *(_QWORD *)(v0 + 920);
  v10 = *(_QWORD *)(v0 + 896);
  v11 = *(_QWORD *)(v0 + 880);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 936))(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 840));
  v8(v10, v9, v11);
  swift_errorRetain(v7);
  v12 = swift_errorRetain(v7);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v61 = v14;
    v15 = *(_QWORD *)(v0 + 816);
    v16 = swift_slowAlloc(32, -1);
    v57 = (uint64_t *)swift_slowAlloc(8, -1);
    v59 = swift_slowAlloc(64, -1);
    v62[0] = v59;
    *(_DWORD *)v16 = 136315650;
    swift_beginAccess(v0 + 168, v0 + 472, 0, 0);
    v17 = *(_BYTE *)(v0 + 184);
    v18 = *(_QWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 168);
    *(_BYTE *)(v0 + 312) = v17;
    *(_QWORD *)(v0 + 320) = v18;
    v19 = sub_10004F4CC();
    v20 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.Milestone, v19);
    v22 = v21;
    *(_QWORD *)(v0 + 712) = sub_1000230D0(v20, v21, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 712, v0 + 720, v16 + 4, v16 + 12);
    v23 = swift_bridgeObjectRelease(v22);
    *(_WORD *)(v16 + 12) = 2080;
    URLRequest.url.getter(v23);
    v24 = type metadata accessor for URL(0);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v15, 1, v24);
    v27 = *(_QWORD *)(v0 + 816);
    if (v26 == 1)
    {
      sub_1000202F0(*(_QWORD *)(v0 + 816), &qword_100127170);
      v28 = 0xEB000000004C5255;
      v29 = 0x206E776F6E6B6E75;
    }
    else
    {
      v29 = URL.description.getter();
      v28 = v34;
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v24);
    }
    v35 = *(_QWORD *)(v0 + 1000);
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
    v37 = *(_QWORD *)(v0 + 896);
    v38 = *(_QWORD *)(v0 + 880);
    v55 = *(_QWORD *)(v0 + 856);
    v56 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 952);
    v54 = *(_QWORD *)(v0 + 840);
    *(_QWORD *)(v0 + 704) = sub_1000230D0(v29, v28, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 704, v0 + 712, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v28);
    v36(v37, v38);
    *(_WORD *)(v16 + 22) = 2112;
    swift_errorRetain(v35);
    v39 = _swift_stdlib_bridgeErrorToNSError(v35);
    *(_QWORD *)(v0 + 688) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v16 + 24, v16 + 32);
    *v57 = v39;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v61, "Failed to fetch %s from %s: %@", (uint8_t *)v16, 0x20u);
    v40 = sub_10001D138(&qword_100127730);
    swift_arrayDestroy(v57, 1, v40);
    swift_slowDealloc(v57, -1, -1);
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v33 = v56(v55, v54);
  }
  else
  {
    v30 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 952);
    v31 = *(_QWORD *)(v0 + 856);
    v32 = *(_QWORD *)(v0 + 840);
    (*(void (**)(_QWORD, _QWORD))(v0 + 960))(*(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 880));
    swift_errorRelease();
    swift_errorRelease();

    v33 = v30(v31, v32);
  }
  v41 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
  v42 = *(_QWORD *)(v0 + 920);
  v43 = *(_QWORD *)(v0 + 880);
  swift_willThrow(v33);
  v41(v42, v43);
  v44 = *(_QWORD *)(v0 + 912);
  v45 = *(_QWORD *)(v0 + 904);
  v46 = *(_QWORD *)(v0 + 896);
  v47 = *(_QWORD *)(v0 + 872);
  v48 = *(_QWORD *)(v0 + 864);
  v49 = *(_QWORD *)(v0 + 856);
  v50 = *(_QWORD *)(v0 + 832);
  v51 = *(_QWORD *)(v0 + 824);
  v52 = *(_QWORD *)(v0 + 816);
  v58 = *(_QWORD *)(v0 + 808);
  v60 = *(_QWORD *)(v0 + 784);
  swift_task_dealloc(*(_QWORD *)(v0 + 920));
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F26C(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10001D138(&qword_100127E38);
  v11 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for URLQueryItem(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10004F510(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

unint64_t sub_10004F474()
{
  unint64_t result;

  result = qword_100127E08;
  if (!qword_100127E08)
  {
    result = swift_getWitnessTable(&unk_1000DD688, &type metadata for MilestoneDownloadError);
    atomic_store(result, (unint64_t *)&qword_100127E08);
  }
  return result;
}

uint64_t sub_10004F4B8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t sub_10004F4CC()
{
  unint64_t result;

  result = qword_100127E10;
  if (!qword_100127E10)
  {
    result = swift_getWitnessTable(&unk_1000DCBB4, &type metadata for KTSWDB.Milestone);
    atomic_store(result, (unint64_t *)&qword_100127E10);
  }
  return result;
}

uint64_t sub_10004F510(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for MilestoneDownloadError()
{
  return &type metadata for MilestoneDownloadError;
}

ValueMetadata *type metadata accessor for ActualMilestoneFetcher()
{
  return &type metadata for ActualMilestoneFetcher;
}

void destroy for MilestoneDownload(uint64_t a1)
{

  sub_100023CAC((_QWORD *)(a1 + 24));
  sub_100023CAC((_QWORD *)(a1 + 64));
  swift_release(*(_QWORD *)(a1 + 104));

  if (*(_QWORD *)(a1 + 152))
    sub_100023CAC((_QWORD *)(a1 + 128));
}

uint64_t initializeWithCopy for MilestoneDownload(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  __int128 v21;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a1 + 24;
  v7 = a2 + 24;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  v11 = v4;
  v12 = v5;
  v10(v6, v7, v9);
  v13 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 64, a2 + 64);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(void **)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v15;
  v16 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v16;
  v17 = *(_QWORD *)(a2 + 152);
  swift_retain(v14);
  v18 = v15;
  v19 = v16;
  if (v17)
  {
    v20 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v17;
    *(_QWORD *)(a1 + 160) = v20;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8))(a1 + 128, a2 + 128, v17);
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v21;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  }
  return a1;
}

uint64_t assignWithCopy for MilestoneDownload(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 16);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  sub_10003A54C((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
  sub_10003A54C((_QWORD *)(a1 + 64), (_QWORD *)(a2 + 64));
  v10 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = *(void **)(a1 + 112);
  v13 = *(void **)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v13;
  v14 = v13;

  v15 = *(void **)(a1 + 120);
  v16 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v16;
  v17 = v16;

  v18 = *(_QWORD *)(a2 + 152);
  if (!*(_QWORD *)(a1 + 152))
  {
    if (v18)
    {
      *(_QWORD *)(a1 + 152) = v18;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 128, a2 + 128);
      return a1;
    }
LABEL_7:
    v19 = *(_OWORD *)(a2 + 128);
    v20 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v20;
    return a1;
  }
  if (!v18)
  {
    sub_100023CAC((_QWORD *)(a1 + 128));
    goto LABEL_7;
  }
  sub_10003A54C((_QWORD *)(a1 + 128), (_QWORD *)(a2 + 128));
  return a1;
}

__n128 initializeWithTake for MilestoneDownload(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for MilestoneDownload(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  sub_100023CAC((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100023CAC((_QWORD *)(a1 + 64));
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  swift_release(v7);
  v9 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  v10 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  if (*(_QWORD *)(a1 + 152))
    sub_100023CAC((_QWORD *)(a1 + 128));
  v11 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v11;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for MilestoneDownload(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MilestoneDownload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MilestoneDownload()
{
  return &type metadata for MilestoneDownload;
}

unint64_t sub_10004FAA0()
{
  unint64_t result;

  result = qword_100127E20;
  if (!qword_100127E20)
  {
    result = swift_getWitnessTable(&unk_1000DD710, &type metadata for MilestoneDownloadError);
    atomic_store(result, (unint64_t *)&qword_100127E20);
  }
  return result;
}

unint64_t sub_10004FAE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100127E30;
  if (!qword_100127E30)
  {
    v1 = objc_opt_self(NSMutableURLRequest);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100127E30);
  }
  return result;
}

uint64_t *sub_10004FB20()
{
  return &qword_100127E40;
}

uint64_t sub_10004FB2C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_100127E40, v2, 0, 0);
  v0 = qword_100127E40;
  swift_bridgeObjectRetain(off_100127E48);
  return v0;
}

uint64_t sub_10004FB7C(uint64_t a1, char *a2)
{
  char *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_100127E40, v6, 1, 0);
  v4 = off_100127E48;
  qword_100127E40 = a1;
  off_100127E48 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10004FBD4(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_100127E40, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10004FC14(unint64_t a1)
{
  if (a1 < 6)
    return a1 + 1;
  else
    return 7;
}

unint64_t sub_10004FC24(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  _BYTE v18[176];
  uint64_t v19;
  uint64_t v20;

  if (a1 < 6)
    return sub_10004FD2C((uint64_t)_swiftEmptyArrayStorage);
  v19 = v3;
  v20 = v4;
  v9 = sub_10001D138(&qword_100127E50);
  inited = swift_initStackObject(v9, v18);
  *(_OWORD *)(inited + 16) = xmmword_1000DD800;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  *(_QWORD *)(inited + 40) = v11;
  swift_getErrorValue(a1, v17, &v15);
  v12 = v15;
  v13 = v16;
  *(_QWORD *)(inited + 72) = v16;
  v14 = sub_1000398EC((_QWORD *)(inited + 48));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v14, v12, v13);
  *(_QWORD *)(inited + 80) = 0x736D42747773;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  *(_QWORD *)(inited + 96) = a2;
  *(_QWORD *)(inited + 120) = &type metadata for UInt64;
  *(_QWORD *)(inited + 128) = 0x736D50747773;
  *(_QWORD *)(inited + 168) = &type metadata for UInt64;
  *(_QWORD *)(inited + 136) = 0xE600000000000000;
  *(_QWORD *)(inited + 144) = a3;
  return sub_10004FD2C(inited);
}

unint64_t sub_10004FD2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D138(&qword_100127EA0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002AC5C(v7, (uint64_t)&v16, &qword_100127EA8);
    v8 = v16;
    v9 = v17;
    result = sub_10003AFB8(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10002E1B0(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10004FE60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100053B08();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10004FE88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100053B08();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10004FEB0()
{
  _QWORD *v0;

  if (*v0 < 6uLL)
    return *v0 + 1;
  else
    return 7;
}

unint64_t sub_10004FEC4()
{
  uint64_t v0;

  return sub_10004FC24(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t sub_10004FED0()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E5D8 = result;
  return result;
}

uint64_t sub_10004FF00()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E5E8 = result;
  return result;
}

uint64_t sub_10004FF30()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E5F8 = result;
  return result;
}

uint64_t sub_10004FF60()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E608 = result;
  return result;
}

uint64_t sub_10004FF90()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E618 = result;
  return result;
}

uint64_t sub_10004FFC0()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E628 = result;
  return result;
}

uint64_t sub_10004FFF0()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E638 = result;
  return result;
}

void sub_100050020(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for SHA256(0);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for SHA256Digest(0);
  __chkstk_darwin(v4);
  v5 = sub_100025DB4(&qword_100127888, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v3, v5);
  __asm { BR              X10 }
}

uint64_t sub_100050124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t countAndFlagsBits;

  *(_QWORD *)(v8 - 128) = v5;
  *(_WORD *)(v8 - 120) = v4;
  *(_BYTE *)(v8 - 118) = BYTE2(v4);
  *(_BYTE *)(v8 - 117) = BYTE3(v4);
  *(_BYTE *)(v8 - 116) = BYTE4(v4);
  *(_BYTE *)(v8 - 115) = BYTE5(v4);
  dispatch thunk of HashFunction.update(bufferPointer:)(v8 - 128, v8 - 128 + BYTE6(v4), v2, v6);
  sub_100022F44(v5, v4);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 160) + 8))(v3, v2);
  *(_QWORD *)(v8 - 104) = v0;
  v9 = sub_100025DB4(&qword_100127890, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  *(_QWORD *)(v8 - 96) = v9;
  v10 = sub_1000398EC((_QWORD *)(v8 - 128));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 16))(v10, v1, v0);
  sub_100022F20((_QWORD *)(v8 - 128), *(_QWORD *)(v8 - 104));
  ((void (*)(_BYTE *(*)@<X0>(_BYTE *@<X0>, _BYTE *@<X1>, _QWORD *@<X8>), _QWORD, void *, uint64_t, uint64_t))dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:))(sub_100041A8C, 0, &type metadata for Data._Representation, v0, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v0);
  v11 = *(_QWORD *)(v8 - 144);
  v12 = *(_QWORD *)(v8 - 136);
  sub_100023CAC((_QWORD *)(v8 - 128));
  countAndFlagsBits = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
  sub_100022F44(v11, v12);
  return countAndFlagsBits;
}

uint64_t sub_1000503A8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_1001314F8);
  sub_100020804(v0, (uint64_t)qword_1001314F8);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0x6F7250676F4C5441, 0xEB0000000073666FLL);
}

uint64_t sub_100050424()
{
  uint64_t v0;

  if (qword_10012E640 != -1)
    swift_once(&qword_10012E640, sub_1000503A8);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_1001314F8);
}

uint64_t sub_10005046C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012E640 != -1)
    swift_once(&qword_10012E640, sub_1000503A8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_1001314F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t ATLogProofs.configBag.getter()
{
  void *v0;
  const void *v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (qword_10012E5D0 != -1)
    swift_once(&qword_10012E5D0, sub_10004FED0);
  v1 = (const void *)(qword_10012E5D8 + 16);
  swift_beginAccess(qword_10012E5D8 + 16, v7, 32, 0);
  v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess(v7);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100029C38((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10002E3EC(0, &qword_100127E58, off_100105100);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v7, &qword_100126F70);
    return 0;
  }
}

void ATLogProofs.configBag.setter(void *a1)
{
  sub_10002EBC4(a1, &qword_10012E5D0, &qword_10012E5D8, (uint64_t)sub_10004FED0);
}

void (*ATLogProofs.configBag.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = ATLogProofs.configBag.getter();
  return sub_100050660;
}

void sub_100050660(uint64_t a1, char a2)
{
  sub_10002ECC0(a1, a2, &qword_10012E5D0, &qword_10012E5D8, (uint64_t)sub_10004FED0);
}

uint64_t ATLogProofs.keyBag.getter()
{
  void *v0;
  const void *v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (qword_10012E5E0 != -1)
    swift_once(&qword_10012E5E0, sub_10004FF00);
  v1 = (const void *)(qword_10012E5E8 + 16);
  swift_beginAccess(qword_10012E5E8 + 16, v7, 32, 0);
  v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess(v7);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100029C38((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10002E3EC(0, (unint64_t *)&qword_100126F78, &off_100105120);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v7, &qword_100126F70);
    return 0;
  }
}

void ATLogProofs.keyBag.setter(void *a1)
{
  sub_10002EBC4(a1, &qword_10012E5E0, &qword_10012E5E8, (uint64_t)sub_10004FF00);
}

void (*ATLogProofs.keyBag.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = ATLogProofs.keyBag.getter();
  return sub_100050800;
}

void sub_100050800(uint64_t a1, char a2)
{
  sub_10002ECC0(a1, a2, &qword_10012E5E0, &qword_10012E5E8, (uint64_t)sub_10004FF00);
}

double sub_10005081C@<D0>(uint64_t a1@<X8>)
{
  return sub_100050C8C(&qword_10012E5F0, &qword_10012E5F8, &qword_100126F80, (uint64_t)sub_10004FF30, a1);
}

uint64_t sub_100050840(uint64_t a1)
{
  return sub_100050DBC(a1, &qword_10012E5F0, &qword_10012E5F8, &qword_100126F88, (uint64_t)sub_10004FF30);
}

void (*sub_100050864(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_100050C8C(&qword_10012E5F0, &qword_10012E5F8, &qword_100126F80, (uint64_t)sub_10004FF30, (uint64_t)v3);
  return sub_1000508D0;
}

void sub_1000508D0(uint64_t *a1, char a2)
{
  sub_100051244(a1, a2, &qword_10012E5F0, &qword_10012E5F8, &qword_100126F88, (uint64_t)sub_10004FF30);
}

uint64_t ATLogProofs.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  if (qword_10012E600 != -1)
    swift_once(&qword_10012E600, sub_10004FF60);
  v3 = (const void *)(qword_10012E608 + 16);
  swift_beginAccess(qword_10012E608 + 16, v9, 32, 0);
  v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess(v9);
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100029C38((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_1000202F0((uint64_t)v10, &qword_100126F70);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t ATLogProofs.receiptTime.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  _BYTE v13[24];

  v2 = v1;
  v4 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10012E600 != -1)
    swift_once(&qword_10012E600, sub_10004FF60);
  v7 = qword_10012E608;
  sub_10002AC5C(a1, (uint64_t)v6, &qword_100127710);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v6, v8);
  }
  swift_beginAccess(v7 + 16, v13, 32, 0);
  objc_setAssociatedObject(v2, (const void *)(v7 + 16), isa, (void *)0x303);
  swift_endAccess(v13);
  swift_unknownObjectRelease(isa);
  return sub_1000202F0(a1, &qword_100127710);
}

void (*ATLogProofs.receiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100127710) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  ATLogProofs.receiptTime.getter((uint64_t)v4);
  return sub_100050BF8;
}

void sub_100050BF8(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*(_QWORD *)(a1 + 16), (uint64_t)v2, &qword_100127710);
    ATLogProofs.receiptTime.setter((uint64_t)v2);
    sub_1000202F0((uint64_t)v3, &qword_100127710);
  }
  else
  {
    ATLogProofs.receiptTime.setter(*(_QWORD *)(a1 + 16));
  }
  free(v3);
  free(v2);
}

double ATLogProofs.fetcher.getter@<D0>(uint64_t a1@<X8>)
{
  return sub_100050C8C(&qword_10012E610, &qword_10012E618, &qword_100127E60, (uint64_t)sub_10004FF90, a1);
}

double sub_100050C8C@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v5;
  const void *v9;
  id v10;
  uint64_t v11;
  double result;
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  if (*a1 != -1)
    swift_once(a1, a4);
  v9 = (const void *)(*a2 + 16);
  swift_beginAccess(v9, v13, 32, 0);
  v10 = objc_getAssociatedObject(v5, v9);
  swift_endAccess(v13);
  if (v10)
  {
    _bridgeAnyObjectToAny(_:)(v13, v10);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_100029C38((uint64_t)v13, (uint64_t)v14);
  if (!v15)
  {
    sub_1000202F0((uint64_t)v14, &qword_100126F70);
    goto LABEL_10;
  }
  v11 = sub_10001D138(a3);
  if ((swift_dynamicCast(a5, v14, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
  {
LABEL_10:
    *(_QWORD *)(a5 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t ATLogProofs.fetcher.setter(uint64_t a1)
{
  return sub_100050DBC(a1, &qword_10012E610, &qword_10012E618, &qword_100127E68, (uint64_t)sub_10004FF90);
}

uint64_t sub_100050DBC(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  void *v5;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD v19[3];
  uint64_t v20;

  v8 = v5;
  if (*a2 != -1)
    swift_once(a2, a5);
  v10 = *a3;
  sub_10002AC5C(a1, (uint64_t)v19, a4);
  v11 = v20;
  if (v20)
  {
    v12 = sub_100022F20(v19, v20);
    v13 = *(_QWORD *)(v11 - 8);
    __chkstk_darwin(v12);
    v15 = (char *)&v19[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v13 + 16))(v15);
    v16 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v15, v11);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v11);
    sub_100023CAC(v19);
  }
  else
  {
    v16 = 0;
  }
  swift_beginAccess(v10 + 16, v19, 32, 0);
  objc_setAssociatedObject(v8, (const void *)(v10 + 16), v16, (void *)1);
  swift_endAccess(v19);
  swift_unknownObjectRelease(v16);
  return sub_1000202F0(a1, a4);
}

void (*ATLogProofs.fetcher.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  ATLogProofs.fetcher.getter((uint64_t)v3);
  return sub_100050F5C;
}

void sub_100050F5C(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*a1, (uint64_t)v2 + 40, &qword_100127E68);
    ATLogProofs.fetcher.setter((uint64_t)v2 + 40);
    sub_1000202F0((uint64_t)v2, &qword_100127E68);
  }
  else
  {
    ATLogProofs.fetcher.setter(*a1);
  }
  free(v2);
}

uint64_t ATLogProofs.analytics.getter()
{
  void *v0;
  const void *v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (qword_10012E620 != -1)
    swift_once(&qword_10012E620, sub_10004FFC0);
  v1 = (const void *)(qword_10012E628 + 16);
  swift_beginAccess(qword_10012E628 + 16, v7, 32, 0);
  v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess(v7);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100029C38((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10002E3EC(0, &qword_100127E70, TransparencyAnalytics_ptr);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v7, &qword_100126F70);
    return 0;
  }
}

void ATLogProofs.analytics.setter(void *a1)
{
  sub_10002EBC4(a1, &qword_10012E620, &qword_10012E628, (uint64_t)sub_10004FFC0);
}

void (*ATLogProofs.analytics.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = ATLogProofs.analytics.getter();
  return sub_100051150;
}

void sub_100051150(uint64_t a1, char a2)
{
  sub_10002ECC0(a1, a2, &qword_10012E620, &qword_10012E628, (uint64_t)sub_10004FFC0);
}

double sub_10005116C@<D0>(uint64_t a1@<X8>)
{
  return sub_100050C8C(&qword_10012E630, &qword_10012E638, &qword_100127E78, (uint64_t)sub_10004FFF0, a1);
}

uint64_t sub_100051190(uint64_t a1)
{
  return sub_100050DBC(a1, &qword_10012E630, &qword_10012E638, &qword_100127DF8, (uint64_t)sub_10004FFF0);
}

void (*sub_1000511B4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_100050C8C(&qword_10012E630, &qword_10012E638, &qword_100127E78, (uint64_t)sub_10004FFF0, (uint64_t)v3);
  return sub_100051220;
}

void sub_100051220(uint64_t *a1, char a2)
{
  sub_100051244(a1, a2, &qword_10012E630, &qword_10012E638, &qword_100127DF8, (uint64_t)sub_10004FFF0);
}

void sub_100051244(uint64_t *a1, char a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  void *v10;

  v10 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*a1, (uint64_t)v10 + 40, a5);
    sub_100050DBC((uint64_t)v10 + 40, a3, a4, a5, a6);
    sub_1000202F0((uint64_t)v10, a5);
  }
  else
  {
    sub_100050DBC(*a1, a3, a4, a5, a6);
  }
  free(v10);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ATLogProofs.isNewEpoch()()
{
  id v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  Swift::Bool result;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  id v65;
  void *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  unint64_t v79;
  NSObject *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  os_log_type_t typeb;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v2 = v0;
  if (objc_msgSend(v0, "hasMilestoneConsistency"))
  {
    v3 = objc_msgSend(v0, "milestoneConsistency");
    if (v3)
    {
      v4 = v3;
      v5 = (void *)ATLogProofs.keyBag.getter();
      if (!v5)
      {
        v26 = sub_10002B05C();
        v27 = swift_allocError(&type metadata for ATLogProofsError, v26, 0, 0);
        v28[1] = 0;
        v28[2] = 0;
        *v28 = 0;
        swift_willThrow(v27);

        return v0 & 1;
      }
      v6 = v5;
      v7 = objc_msgSend(v5, "patLogBeginningMs");
      v8 = objc_msgSend(v6, "tltLogBeginningMs");
      if (objc_msgSend(v4, "hasTltInclusionProof"))
      {
        v9 = objc_msgSend(v4, "tltInclusionProof");
        if (v9)
        {
          v10 = v9;
          v11 = sub_100020A70(v9, (unint64_t)v8);
          if ((v14 & 0x100) == 0)
          {
            v15 = v11;
            v16 = v14;
            *(_QWORD *)type = v13;
            v89 = v12;
            if (qword_10012E640 != -1)
              swift_once(&qword_10012E640, sub_1000503A8);
            v17 = type metadata accessor for Logger(0);
            v18 = sub_100020804(v17, (uint64_t)qword_1001314F8);
            v19 = Logger.logObject.getter(v18);
            v20 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v19, v20))
            {
              v21 = v15;
              v22 = (uint8_t *)swift_slowAlloc(12, -1);
              v84 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v92 = v84;
              *(_DWORD *)v22 = 136315138;
              v95 = v21;
              v96 = v89;
              v97 = *(_QWORD *)type;
              LOBYTE(v98) = v16 & 1;
              v23 = sub_1000536D0();
              v24 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for VerifiableTypeHelpers.LogEntryEpochStatus, v23);
              v0 = (id)v25;
              v95 = sub_1000230D0(v24, v25, (uint64_t *)&v92);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v22 + 4, v22 + 12);
              swift_bridgeObjectRelease(v0);
              _os_log_impl((void *)&_mh_execute_header, v19, v20, "Detected new TLT epoch: %s", v22, 0xCu);
              LOBYTE(v0) = 1;
              swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v84, -1, -1);
              swift_slowDealloc(v22, -1, -1);

            }
            else
            {

              LOBYTE(v0) = 1;
            }
            return v0 & 1;
          }

        }
      }
      if (objc_msgSend(v4, "hasPatInclusionProof"))
      {
        v29 = objc_msgSend(v4, "patInclusionProof");
        if (v29)
        {
          v30 = v29;
          v31 = sub_100020A70(v29, (unint64_t)v7);
          if ((v34 & 0x100) == 0)
          {
            v35 = v31;
            v36 = v34;
            *(_QWORD *)typea = v33;
            v90 = v32;
            if (qword_10012E640 != -1)
              swift_once(&qword_10012E640, sub_1000503A8);
            v37 = type metadata accessor for Logger(0);
            v38 = sub_100020804(v37, (uint64_t)qword_1001314F8);
            v39 = Logger.logObject.getter(v38);
            v40 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v39, v40))
            {
              v41 = v35;
              v42 = (uint8_t *)swift_slowAlloc(12, -1);
              v85 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v92 = v85;
              *(_DWORD *)v42 = 136315138;
              v95 = v41;
              v96 = v90;
              v97 = *(_QWORD *)typea;
              LOBYTE(v98) = v36 & 1;
              v43 = sub_1000536D0();
              v44 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for VerifiableTypeHelpers.LogEntryEpochStatus, v43);
              v0 = (id)v45;
              v95 = sub_1000230D0(v44, v45, (uint64_t *)&v92);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v42 + 4, v42 + 12);
              swift_bridgeObjectRelease(v0);
              _os_log_impl((void *)&_mh_execute_header, v39, v40, "Detected new PAT epoch: %s", v42, 0xCu);
              LOBYTE(v0) = 1;
              swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v85, -1, -1);
              swift_slowDealloc(v42, -1, -1);

            }
            else
            {

              LOBYTE(v0) = 1;
            }
            return v0 & 1;
          }

        }
      }

    }
  }
  LOBYTE(v0) = (_BYTE)v2;
  sub_100050C8C(&qword_10012E5F0, &qword_10012E5F8, &qword_100126F80, (uint64_t)sub_10004FF30, (uint64_t)&v92);
  if (!v94)
  {
    sub_1000202F0((uint64_t)&v92, &qword_100126F88);
    v55 = sub_10002B05C();
    v56 = swift_allocError(&type metadata for ATLogProofsError, v55, 0, 0);
    v57[1] = 0;
    v57[2] = 0;
    *v57 = 3;
    swift_willThrow(v56);
    return v0 & 1;
  }
  sub_100032478(&v92, (uint64_t)&v95);
  v46 = objc_msgSend(v2, "inclusionProof");
  if (!v46)
  {
    __break(1u);
    goto LABEL_42;
  }
  v47 = v46;
  v0 = objc_msgSend(v46, "slh");

  if (!v0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v48 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  v49 = objc_msgSend((id)swift_getObjCClassFromMetadata(v48), "signedTypeWithObject:", v0);

  LOBYTE(v0) = (_BYTE)v49;
  v50 = sub_100053CB4();
  if (v1)
  {
    swift_errorRelease();
    v52 = sub_10002B05C();
    v53 = swift_allocError(&type metadata for ATLogProofsError, v52, 0, 0);
    v54[1] = 0;
    v54[2] = 0;
    *v54 = 5;
    swift_willThrow(v53);

    sub_100023CAC(&v95);
    return v0 & 1;
  }
  v59 = v50;
  v60 = v51;
  v61 = v98;
  v62 = v99;
  sub_100022F20(&v95, v98);
  (*(void (**)(id, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 112))(v59, v60, 0, 1, 5, 1, v61, v62);
  v64 = v63;
  swift_bridgeObjectRelease(v60);
  v65 = objc_msgSend(v2, "inclusionProof");
  if (!v65)
    goto LABEL_43;
  if ((v64 & 0x8000000000000000) == 0)
  {
    v66 = v65;
    v67 = sub_100020A70(v65, v64);
    v69 = v68;
    v71 = v70;
    v73 = v72;

    if ((v73 & 0x100) != 0)
    {

      sub_100023CAC(&v95);
      LOBYTE(v0) = 0;
    }
    else
    {
      if (qword_10012E640 != -1)
        swift_once(&qword_10012E640, sub_1000503A8);
      v74 = type metadata accessor for Logger(0);
      v75 = sub_100020804(v74, (uint64_t)qword_1001314F8);
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v76, v77))
      {
        typeb = v77;
        v78 = swift_slowAlloc(22, -1);
        v91 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v92 = v67;
        v100 = v91;
        *(_DWORD *)v78 = 136315394;
        *((_QWORD *)&v92 + 1) = v69;
        v93 = v71;
        LOBYTE(v94) = v73 & 1;
        v79 = sub_1000536D0();
        v80 = v76;
        v81 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for VerifiableTypeHelpers.LogEntryEpochStatus, v79);
        v83 = v82;
        *(_QWORD *)&v92 = sub_1000230D0(v81, v82, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, (char *)&v92 + 8, v78 + 4, v78 + 12);
        swift_bridgeObjectRelease(v83);
        *(_WORD *)(v78 + 12) = 2048;
        *(_QWORD *)&v92 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, (char *)&v92 + 8, v78 + 14, v78 + 22);
        _os_log_impl((void *)&_mh_execute_header, v80, typeb, "Detected new ATL epoch: %s - %lld", (uint8_t *)v78, 0x16u);
        swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v91, -1, -1);
        swift_slowDealloc(v78, -1, -1);

      }
      else
      {

      }
      sub_100023CAC(&v95);
      LOBYTE(v0) = 1;
    }
    return v0 & 1;
  }
LABEL_44:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

void sub_100051D50()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  sub_100050C8C(&qword_10012E5F0, &qword_10012E5F8, &qword_100126F80, (uint64_t)sub_10004FF30, (uint64_t)&v22);
  if (!*((_QWORD *)&v23 + 1))
  {
    sub_1000202F0((uint64_t)&v22, &qword_100126F88);
    v9 = sub_10002B05C();
    v10 = swift_allocError(&type metadata for ATLogProofsError, v9, 0, 0);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 3;
    swift_willThrow(v10);
    return;
  }
  sub_100032478(&v22, (uint64_t)v26);
  v2 = objc_msgSend(v0, "inclusionProof");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "slh");

    if (v4)
    {
      v5 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
      v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "signedTypeWithObject:", v4);

      sub_100053F40((uint64_t)v29);
      if (v1)
      {

        sub_100023CAC(v26);
        return;
      }
      v7 = v27;
      v8 = v28;
      sub_100022F20(v26, v27);
      if ((*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 128))(v29, 1, 1, 1, v7, v8) < 1)
      {
        sub_10002300C(v29);
      }
      else
      {
        if (qword_10012E640 != -1)
          swift_once(&qword_10012E640, sub_1000503A8);
        v12 = type metadata accessor for Logger(0);
        sub_100020804(v12, (uint64_t)qword_1001314F8);
        sub_10002304C(v29);
        v13 = sub_10002304C(v29);
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc(12, -1);
          v17 = swift_slowAlloc(32, -1);
          v31 = v17;
          *(_DWORD *)v16 = 136315138;
          v22 = v29[0];
          v23 = v29[1];
          v24 = v29[2];
          v25 = v30;
          v18 = sub_100023710();
          v19 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v18);
          v21 = v20;
          *(_QWORD *)&v22 = sub_1000230D0(v19, v20, &v31);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 8, v16 + 4, v16 + 12);
          swift_bridgeObjectRelease(v21);
          sub_10002300C(v29);
          sub_10002300C(v29);
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Verified ATLogProof inclusion to verified head %s", v16, 0xCu);
          swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v17, -1, -1);
          swift_slowDealloc(v16, -1, -1);

          sub_10002300C(v29);
LABEL_16:
          sub_100023CAC(v26);
          return;
        }
        sub_10002300C(v29);
        sub_10002300C(v29);
        sub_10002300C(v29);

      }
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t ATLogProofs.verify(data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[71] = v2;
  v3[70] = a2;
  v3[69] = a1;
  v4 = sub_10001D138(&qword_100127710);
  v3[72] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005214C, 0, 0);
}

id sub_10005214C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  unsigned int v16;
  id result;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  double v34;
  char v35;
  _QWORD *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  void *v54;
  uint8_t *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  double v83;
  double v84;
  _QWORD *v85;
  void *v86;
  void *v87;
  _QWORD *v88;
  _QWORD *v89;
  void *v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _BYTE v103[56];

  v1 = ATLogProofs.keyBag.getter();
  *(_QWORD *)(v0 + 584) = v1;
  if (!v1)
  {
    v12 = sub_10002B05C();
    v13 = swift_allocError(&type metadata for ATLogProofsError, v12, 0, 0);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = 0;
    swift_willThrow(v13);
    goto LABEL_16;
  }
  v2 = (void *)v1;
  if (!objc_msgSend(*(id *)(v0 + 568), "hasInclusionProof")
    || (v3 = objc_msgSend(*(id *)(v0 + 568), "inclusionProof"),
        (*(_QWORD *)(v0 + 592) = v3) == 0))
  {
    v9 = sub_10002B05C();
    v10 = swift_allocError(&type metadata for ATLogProofsError, v9, 0, 0);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 1;
    swift_willThrow(v10);

LABEL_16:
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = v3;
  v89 = (_QWORD *)(v0 + 536);
  v5 = objc_msgSend(v2, "appSthKeyStore");
  v6 = objc_msgSend(objc_allocWithZone((Class)TransparencyLogEntryVerifier), "initWithTrustedKeyStore:", v5);
  *(_QWORD *)(v0 + 600) = v6;

  v7 = objc_msgSend(v2, "tltKeyStore");
  v8 = objc_msgSend(objc_allocWithZone((Class)TransparencyLogEntryVerifier), "initWithTrustedKeyStore:", v7);
  *(_QWORD *)(v0 + 608) = v8;

  objc_msgSend(v4, "setVerifier:", v6);
  v15 = sub_10004BAB0();
  v16 = objc_msgSend(v4, "nodeType");
  if (v16 != 7)
  {
    v23 = sub_10002B05C();
    v24 = swift_allocError(&type metadata for ATLogProofsError, v23, 0, 0);
    v25[1] = 0;
    v25[2] = 0;
    *v25 = 2;
    swift_willThrow(v24);

    goto LABEL_16;
  }
  v86 = v15;
  v87 = v6;
  v90 = v8;
  result = objc_msgSend(v4, "nodeBytes");
  if (!result)
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v18 = result;
  v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
  v21 = v20;

  objc_allocWithZone((Class)ChangeLogNodeV2);
  v22 = sub_10002E330();
  sub_100022F44(v19, v21);
  result = objc_msgSend(v22, "mutation");
  if (!result)
    goto LABEL_47;
  v26 = result;
  v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
  v29 = v28;

  *(_QWORD *)&v92 = TransparencyByteBuffer.init(data:)(v27, v29);
  *((_QWORD *)&v92 + 1) = v30;
  *(_QWORD *)&v93 = v31;
  sub_100026EA0(v0 + 184);
  v32 = v87;
  *(_QWORD *)(v0 + 616) = *(_QWORD *)(v0 + 224);
  v33 = (void *)objc_opt_self(NSDate);
  sub_100053714((_QWORD *)(v0 + 184));
  objc_msgSend(v33, "kt_currentTimeMs");
  if ((~*(_QWORD *)&v34 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v34 <= -1.0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v34 >= 1.84467441e19)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    swift_once(&qword_10012E640, sub_1000503A8);
    goto LABEL_28;
  }
  sub_1000412F8(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 560), (unint64_t)v34);
  sub_100022F44(v92, *((unint64_t *)&v92 + 1));
  sub_100053770((_QWORD *)(v0 + 184));

  sub_100051D50();
  v89 = (_QWORD *)(v0 + 184);
  if ((v35 & 1) != 0)
  {
    v36 = (_QWORD *)(v0 + 184);
LABEL_19:
    sub_100053770(v36);

    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    return (id)(*(uint64_t (**)(void *, _QWORD))(v0 + 8))(v86, *(_QWORD *)(v0 + 616));
  }
  if (objc_msgSend(*(id *)(v0 + 568), "hasMilestoneConsistency"))
  {
    v37 = objc_msgSend(*(id *)(v0 + 568), "milestoneConsistency");
    if (v37)
    {
      v38 = v37;
      if (qword_10012E640 != -1)
        swift_once(&qword_10012E640, sub_1000503A8);
      v39 = type metadata accessor for Logger(0);
      v40 = sub_100020804(v39, (uint64_t)qword_1001314F8);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Verifiying included bridging consistency proof", v43, 2u);
        swift_slowDealloc(v43, -1, -1);
      }
      v44 = *(_QWORD *)(v0 + 576);

      v45 = objc_msgSend(v2, "appSthKeyStore");
      v46 = objc_msgSend(objc_allocWithZone((Class)TransparencyConsistencyProofVerifier), "initWithTrustedKeyStore:", v45);

      LogConsistency.consistencyVerifier.setter(v46);
      v47 = v87;
      LogConsistency.patVerifier.setter(v87);
      v48 = v90;
      LogConsistency.tltVerifier.setter(v90);
      sub_100050C8C(&qword_10012E5F0, &qword_10012E5F8, &qword_100126F80, (uint64_t)sub_10004FF30, (uint64_t)&v92);
      sub_100054B34((uint64_t)&v92);
      ATLogProofs.receiptTime.getter(v44);
      LogConsistency.receiptTime.setter(v44);
      v86 = LogConsistency.verify()();
      sub_100051D50();
      LOBYTE(v45) = v49;

      v32 = v87;
      v36 = (_QWORD *)(v0 + 184);
      if ((v45 & 1) != 0)
        goto LABEL_19;
    }
  }
  *(_QWORD *)(v0 + 624) = v86;
  if (qword_10012E640 != -1)
    goto LABEL_45;
LABEL_28:
  v50 = type metadata accessor for Logger(0);
  v51 = sub_100020804(v50, (uint64_t)qword_1001314F8);
  *(_QWORD *)(v0 + 632) = v51;
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.default.getter();
  v54 = v90;
  if (os_log_type_enabled(v52, v53))
  {
    v55 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Downloading milestone proof to verify ATLogProof", v55, 2u);
    v54 = v90;
    swift_slowDealloc(v55, -1, -1);
  }

  v56 = ATLogProofs.configBag.getter();
  *(_QWORD *)(v0 + 640) = v56;
  if (!v56)
    goto LABEL_37;
  v57 = (void *)v56;
  sub_100050C8C(&qword_10012E5F0, &qword_10012E5F8, &qword_100126F80, (uint64_t)sub_10004FF30, v0 + 368);
  if (!*(_QWORD *)(v0 + 392))
  {

    sub_1000202F0(v0 + 368, &qword_100126F88);
    v32 = v87;
LABEL_37:
    v72 = sub_10002B05C();
    v73 = swift_allocError(&type metadata for ATLogProofsError, v72, 0, 0);
    v74[1] = 0;
    v74[2] = 0;
    *v74 = 4;
    swift_willThrow(v73);

LABEL_38:
    sub_100053770(v89);
    goto LABEL_16;
  }
  v88 = (_QWORD *)(v0 + 328);
  sub_100032478((__int128 *)(v0 + 368), v0 + 328);
  result = objc_msgSend(v4, "slh");
  if (!result)
  {
LABEL_48:
    __break(1u);
    return result;
  }
  v58 = result;
  v59 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  v60 = objc_msgSend((id)swift_getObjCClassFromMetadata(v59), "signedTypeWithObject:", v58);
  *(_QWORD *)(v0 + 648) = v60;

  v61 = objc_msgSend(v60, "parsedLogHead");
  *(_QWORD *)(v0 + 656) = v61;
  if (!v61)
  {
    v75 = sub_1000537CC();
    v76 = swift_allocError(&type metadata for SignedLogHeadError, v75, 0, 0);
    *(_DWORD *)v77 = 0;
    *(_BYTE *)(v77 + 4) = 1;
    swift_willThrow(v76);

    sub_100023CAC(v88);
    goto LABEL_38;
  }
  v62 = v61;
  ATLogProofs.fetcher.getter(v0 + 488);
  if (*(_QWORD *)(v0 + 512))
  {
    sub_100032478((__int128 *)(v0 + 488), v0 + 248);
    v91 = objc_msgSend(v62, "application");
    sub_10002E424((uint64_t)v88, v0 + 288);
    sub_10002E424(v0 + 248, v0 + 448);
    v63 = v57;
    v64 = v2;
    v65 = v62;
    v66 = ATLogProofs.analytics.getter();
    sub_100050C8C(&qword_10012E630, &qword_10012E638, &qword_100127E78, (uint64_t)sub_10004FFF0, (uint64_t)v103);
    sub_10004C0E8(v91, (uint64_t)v63, (uint64_t)v64, (__int128 *)(v0 + 288), 0, (__int128 *)(v0 + 448), (uint64_t)v62, v66, (uint64_t)&v92, (uint64_t)v103);
    sub_100023CAC((_QWORD *)(v0 + 248));
    v67 = v101;
    *(_OWORD *)(v0 + 144) = v100;
    *(_OWORD *)(v0 + 160) = v67;
    *(_QWORD *)(v0 + 176) = v102;
    v68 = v97;
    *(_OWORD *)(v0 + 80) = v96;
    *(_OWORD *)(v0 + 96) = v68;
    v69 = v99;
    *(_OWORD *)(v0 + 112) = v98;
    *(_OWORD *)(v0 + 128) = v69;
    v70 = v93;
    *(_OWORD *)(v0 + 16) = v92;
    *(_OWORD *)(v0 + 32) = v70;
    v71 = v95;
    *(_OWORD *)(v0 + 48) = v94;
    *(_OWORD *)(v0 + 64) = v71;
  }
  else
  {
    sub_1000202F0(v0 + 488, &qword_100127E68);
    v78 = objc_msgSend(v62, "application");
    sub_10002E424((uint64_t)v88, v0 + 408);
    v79 = v57;
    v80 = v2;
    v81 = v62;
    v82 = ATLogProofs.analytics.getter();
    sub_100050C8C(&qword_10012E630, &qword_10012E638, &qword_100127E78, (uint64_t)sub_10004FFF0, (uint64_t)v103);
    sub_10004C0D0((uint64_t)&v92);
    sub_10004C0E8(v78, (uint64_t)v79, (uint64_t)v80, (__int128 *)(v0 + 408), 0, &v92, (uint64_t)v62, v82, v0 + 16, (uint64_t)v103);
  }
  objc_msgSend((id)objc_opt_self(TransparencySettings), "uiBlockingNetworkTimeout");
  v84 = v83;
  v85 = (_QWORD *)swift_task_alloc(dword_100127E04);
  *(_QWORD *)(v0 + 664) = v85;
  *v85 = v0;
  v85[1] = sub_10005323C;
  return (id)sub_10004C9B4(v84);
}

uint64_t sub_10005323C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  *(_QWORD *)(*(_QWORD *)v1 + 672) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100053608;
  else
    v3 = sub_1000532A0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000532A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  char v24;
  char v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  v1 = v0 + 16;
  v2 = (_QWORD *)(v0 + 184);
  v3 = (_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 672);
  sub_100051D50();
  if (v4)
  {
    v6 = *(void **)(v0 + 656);
    v39 = *(void **)(v0 + 640);
    v7 = *(void **)(v0 + 608);
    v8 = *(void **)(v0 + 600);
    v9 = *(void **)(v0 + 592);
    v10 = *(void **)(v0 + 584);

    v2 = (_QWORD *)(v0 + 184);
    v3 = (_QWORD *)(v0 + 328);
    v1 = v0 + 16;
LABEL_3:

    sub_100053810(v1);
    sub_100023CAC(v3);
    sub_100053770(v2);
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if ((v5 & 1) != 0)
  {
    v12 = *(void **)(v0 + 656);
    v13 = *(void **)(v0 + 640);
    v14 = *(void **)(v0 + 608);
    v15 = *(void **)(v0 + 600);
    v16 = *(void **)(v0 + 592);
    v17 = *(void **)(v0 + 584);

    sub_100053810(v0 + 16);
    sub_100023CAC((_QWORD *)(v0 + 328));
    sub_100053770((_QWORD *)(v0 + 184));
    v18 = *(void **)(v0 + 624);
  }
  else
  {
    if (!objc_msgSend(*(id *)(v0 + 568), "hasMilestoneConsistency"))
      goto LABEL_13;
    v19 = objc_msgSend(*(id *)(v0 + 568), "milestoneConsistency");
    if (!v19)
      goto LABEL_13;
    v20 = v19;
    v21 = Logger.logObject.getter(v19);
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Verifiying included bridging consistency proof after milestone refresh", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v18 = LogConsistency.verify()();
    sub_100051D50();
    v25 = v24;

    if ((v25 & 1) == 0)
    {
LABEL_13:
      v31 = *(void **)(v0 + 648);
      v38 = *(void **)(v0 + 656);
      v39 = *(void **)(v0 + 640);
      v32 = *(void **)(v0 + 608);
      v33 = *(void **)(v0 + 600);
      v10 = *(void **)(v0 + 592);
      v37 = *(void **)(v0 + 584);
      v34 = sub_10002B05C();
      v35 = swift_allocError(&type metadata for ATLogProofsError, v34, 0, 0);
      v36[1] = 0;
      v36[2] = 0;
      *v36 = 4;
      swift_willThrow(v35);

      goto LABEL_3;
    }
    v26 = *(void **)(v0 + 656);
    v27 = *(void **)(v0 + 640);
    v28 = *(void **)(v0 + 608);
    v29 = *(void **)(v0 + 600);
    v30 = *(void **)(v0 + 592);
    v40 = *(void **)(v0 + 584);

    sub_100053810(v0 + 16);
    sub_100023CAC((_QWORD *)(v0 + 328));
    sub_100053770((_QWORD *)(v0 + 184));
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  return (*(uint64_t (**)(void *, _QWORD))(v0 + 8))(v18, *(_QWORD *)(v0 + 616));
}

uint64_t sub_100053608()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(void **)(v0 + 656);
  v2 = *(void **)(v0 + 640);
  v3 = *(void **)(v0 + 608);
  v4 = *(void **)(v0 + 600);
  v5 = *(void **)(v0 + 592);
  v6 = *(void **)(v0 + 584);

  sub_100053810(v0 + 16);
  sub_100023CAC((_QWORD *)(v0 + 328));
  sub_100053770((_QWORD *)(v0 + 184));
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ATLogProofs.VerificationResult.expiry.getter(uint64_t a1, unint64_t a2)
{
  return Date.init(timeIntervalSince1970:)((double)a2 / 1000.0);
}

unint64_t sub_1000536D0()
{
  unint64_t result;

  result = qword_100127E80;
  if (!qword_100127E80)
  {
    result = swift_getWitnessTable(&unk_1000DB730, &type metadata for VerifiableTypeHelpers.LogEntryEpochStatus);
    atomic_store(result, (unint64_t *)&qword_100127E80);
  }
  return result;
}

_QWORD *sub_100053714(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[6];
  v5 = (void *)a1[7];
  sub_100022F88(a1[1], a1[2]);
  sub_100022F88(v2, v3);
  v6 = v5;
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_100053770(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[6];
  v5 = (void *)a1[7];
  sub_100022F44(a1[1], a1[2]);
  sub_100022F44(v2, v3);
  swift_bridgeObjectRelease(v4);

  return a1;
}

unint64_t sub_1000537CC()
{
  unint64_t result;

  result = qword_100127E90;
  if (!qword_100127E90)
  {
    result = swift_getWitnessTable(&unk_1000DD930, &type metadata for SignedLogHeadError);
    atomic_store(result, (unint64_t *)&qword_100127E90);
  }
  return result;
}

uint64_t sub_100053810(uint64_t a1)
{
  destroy for MilestoneDownload(a1);
  return a1;
}

uint64_t sub_10005384C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
  }
  else
  {
    swift_errorRetain(*a2);
    *(_QWORD *)a1 = v4;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  }
  return a1;
}

unint64_t *assignWithCopy for ATLogProofsError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      swift_errorRetain(*a2);
      *a1 = v5;
      goto LABEL_6;
    }
LABEL_8:
    v7 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v7;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_errorRelease(v4);
    goto LABEL_8;
  }
  swift_errorRetain(*a2);
  v6 = *a1;
  *a1 = v5;
  swift_errorRelease(v6);
LABEL_6:
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

__n128 initializeWithTake for TransparencyByteBuffer(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ATLogProofsError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)a1;
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_errorRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_errorRelease(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ATLogProofsError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF9 && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 2147483642);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 5;
  if (v4 >= 7)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ATLogProofsError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 5;
  }
  return result;
}

_QWORD *sub_100053A80(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ATLogProofsError()
{
  return &type metadata for ATLogProofsError;
}

uint64_t _s18VerificationResultVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s18VerificationResultVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ATLogProofs.VerificationResult()
{
  return &type metadata for ATLogProofs.VerificationResult;
}

unint64_t sub_100053B08()
{
  unint64_t result;

  result = qword_100127E98;
  if (!qword_100127E98)
  {
    result = swift_getWitnessTable(&unk_1000DD898, &type metadata for ATLogProofsError);
    atomic_store(result, (unint64_t *)&qword_100127E98);
  }
  return result;
}

uint64_t *sub_100053B4C()
{
  return &qword_100127EB0;
}

uint64_t sub_100053B58()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_100127EB0, v2, 0, 0);
  v0 = qword_100127EB0;
  swift_bridgeObjectRetain(off_100127EB8);
  return v0;
}

uint64_t sub_100053BA8(uint64_t a1, char *a2)
{
  char *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_100127EB0, v6, 1, 0);
  v4 = off_100127EB8;
  qword_100127EB0 = a1;
  off_100127EB8 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_100053C00(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_100127EB0, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_100053C40(uint64_t a1)
{
  if ((a1 & (unint64_t)&_mh_execute_header) != 0)
    return 1;
  else
    return 2;
}

uint64_t sub_100053C50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005427C();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100053C78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005427C();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100053CA0()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 4))
    return 1;
  else
    return 2;
}

id sub_100053CB4()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = objc_msgSend(v0, "parsedLogHead");
  if (v2)
  {
    v3 = v2;
    v4 = sub_100041EB0((uint64_t)objc_msgSend(v2, "application"));
    if (v5)
    {
      v1 = (id)v4;
    }
    else
    {
      v1 = objc_msgSend(v3, "application");
      v9 = sub_1000537CC();
      v10 = swift_allocError(&type metadata for SignedLogHeadError, v9, 0, 0);
      *(_DWORD *)v11 = (_DWORD)v1;
      *(_BYTE *)(v11 + 4) = 0;
      swift_willThrow(v10);
    }

  }
  else
  {
    v6 = sub_1000537CC();
    v7 = swift_allocError(&type metadata for SignedLogHeadError, v6, 0, 0);
    *(_DWORD *)v8 = 0;
    *(_BYTE *)(v8 + 4) = 1;
    swift_willThrow(v7);
  }
  return v1;
}

unint64_t sub_100053DAC()
{
  return sub_100054130((SEL *)&selRef_logBeginningMs);
}

uint64_t sub_100053DC8()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = objc_msgSend(v0, "parsedLogHead");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "logType");

    return (uint64_t)v3;
  }
  else
  {
    v5 = sub_1000537CC();
    v6 = swift_allocError(&type metadata for SignedLogHeadError, v5, 0, 0);
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 1;
    return swift_willThrow(v6);
  }
}

unint64_t sub_100053E60()
{
  return sub_100054130((SEL *)&selRef_revision);
}

id sub_100053E7C()
{
  void *v0;
  id v1;
  void *v2;
  id result;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = objc_msgSend(v0, "parsedLogHead");
  if (v1)
  {
    v2 = v1;
    result = objc_msgSend(v1, "logHeadHash");
    if (result)
    {
      v4 = result;
      v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);

      return (id)v5;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v6 = sub_1000537CC();
    v7 = swift_allocError(&type metadata for SignedLogHeadError, v6, 0, 0);
    *(_DWORD *)v8 = 0;
    *(_BYTE *)(v8 + 4) = 1;
    return (id)swift_willThrow(v7);
  }
  return result;
}

void sub_100053F40(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _OWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v3 = objc_msgSend(v1, "parsedLogHead");
  if (!v3)
  {
    v20 = sub_1000537CC();
    v21 = swift_allocError(&type metadata for SignedLogHeadError, v20, 0, 0);
    *(_DWORD *)v22 = 0;
    *(_BYTE *)(v22 + 4) = 1;
    swift_willThrow(v21);
    return;
  }
  v4 = v3;
  v5 = sub_100041EB0((uint64_t)objc_msgSend(v3, "application"));
  if (!v6)
  {
    v23 = objc_msgSend(v4, "application");
    v24 = sub_1000537CC();
    v25 = swift_allocError(&type metadata for SignedLogHeadError, v24, 0, 0);
    *(_DWORD *)v26 = v23;
    *(_BYTE *)(v26 + 4) = 0;
    swift_willThrow(v25);

    return;
  }
  v7 = v5;
  v8 = v6;
  v9 = (uint64_t)objc_msgSend(v4, "logBeginningMs");
  if (v9 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = v9;
    v11 = objc_msgSend(v4, "logType");
    v12 = (uint64_t)objc_msgSend(v4, "revision");
    if ((v12 & 0x8000000000000000) == 0)
    {
      v13 = v12;
      v27 = v11;
      v30 = v7;
      v14 = objc_msgSend(v4, "logHeadHash");
      if (v14)
      {
        v15 = v14;
        v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v18 = v17;

        sub_10004271C(v30, v8, v10, v27, v13, v16, v18, (uint64_t)v28);
        v19 = v28[1];
        *(_OWORD *)a1 = v28[0];
        *(_OWORD *)(a1 + 16) = v19;
        *(_OWORD *)(a1 + 32) = v28[2];
        *(_QWORD *)(a1 + 48) = v29;
        return;
      }
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
}

unint64_t sub_100054114()
{
  return sub_100054130((SEL *)&selRef_treeId);
}

unint64_t sub_100054130(SEL *a1)
{
  unint64_t v1;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend((id)v1, "parsedLogHead");
  if (!v3)
    goto LABEL_4;
  v4 = v3;
  v1 = (unint64_t)objc_msgSend(v3, *a1);

  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_4:
    v5 = sub_1000537CC();
    v6 = swift_allocError(&type metadata for SignedLogHeadError, v5, 0, 0);
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 1;
    swift_willThrow(v6);
  }
  return v1;
}

uint64_t initializeBufferWithCopyOfBuffer for SignedLogHeadError(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SignedLogHeadError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SignedLogHeadError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_100054230(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10005424C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedLogHeadError()
{
  return &type metadata for SignedLogHeadError;
}

unint64_t sub_10005427C()
{
  unint64_t result;

  result = qword_100127EC0;
  if (!qword_100127EC0)
  {
    result = swift_getWitnessTable(&unk_1000DD9B8, &type metadata for SignedLogHeadError);
    atomic_store(result, (unint64_t *)&qword_100127EC0);
  }
  return result;
}

uint64_t *sub_1000542C0()
{
  return &qword_100127EC8;
}

uint64_t sub_1000542CC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_100127EC8, v2, 0, 0);
  v0 = qword_100127EC8;
  swift_bridgeObjectRetain(off_100127ED0);
  return v0;
}

uint64_t sub_10005431C(uint64_t a1, char *a2)
{
  char *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_100127EC8, v6, 1, 0);
  v4 = off_100127ED0;
  qword_100127EC8 = a1;
  off_100127ED0 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_100054374(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_100127EC8, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000543B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005A304();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000543DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005A304();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100054404()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E958 = result;
  return result;
}

uint64_t sub_100054434()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E968 = result;
  return result;
}

uint64_t sub_100054464()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E978 = result;
  return result;
}

uint64_t sub_100054494()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E988 = result;
  return result;
}

uint64_t sub_1000544C4()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012E998 = result;
  return result;
}

uint64_t sub_1000544F4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_100131510);
  sub_100020804(v0, (uint64_t)qword_100131510);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0x69736E6F43676F4CLL, 0xEE0079636E657473);
}

uint64_t sub_100054574()
{
  uint64_t v0;

  if (qword_10012E9A0 != -1)
    swift_once(&qword_10012E9A0, sub_1000544F4);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_100131510);
}

uint64_t sub_1000545BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012E9A0 != -1)
    swift_once(&qword_10012E9A0, sub_1000544F4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131510);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t LogConsistency.consistencyVerifier.getter()
{
  void *v0;
  const void *v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (qword_10012E950 != -1)
    swift_once(&qword_10012E950, sub_100054404);
  v1 = (const void *)(qword_10012E958 + 16);
  swift_beginAccess(qword_10012E958 + 16, v7, 32, 0);
  v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess(v7);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100029C38((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10002E3EC(0, &qword_100126FE0, &off_100105108);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v7, &qword_100126F70);
    return 0;
  }
}

void LogConsistency.consistencyVerifier.setter(void *a1)
{
  sub_10002EBC4(a1, &qword_10012E950, &qword_10012E958, (uint64_t)sub_100054404);
}

void (*LogConsistency.consistencyVerifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = LogConsistency.consistencyVerifier.getter();
  return sub_1000547B0;
}

void sub_1000547B0(uint64_t a1, char a2)
{
  sub_10002ECC0(a1, a2, &qword_10012E950, &qword_10012E958, (uint64_t)sub_100054404);
}

uint64_t LogConsistency.patVerifier.getter()
{
  return sub_100054888(&qword_10012E960, &qword_10012E968, (uint64_t)sub_100054434);
}

void LogConsistency.patVerifier.setter(void *a1)
{
  sub_10002EBC4(a1, &qword_10012E960, &qword_10012E968, (uint64_t)sub_100054434);
}

void (*LogConsistency.patVerifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = LogConsistency.patVerifier.getter();
  return sub_100054850;
}

void sub_100054850(uint64_t a1, char a2)
{
  sub_10002ECC0(a1, a2, &qword_10012E960, &qword_10012E968, (uint64_t)sub_100054434);
}

uint64_t LogConsistency.tltVerifier.getter()
{
  return sub_100054888(&qword_10012E970, &qword_10012E978, (uint64_t)sub_100054464);
}

uint64_t sub_100054888(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v3;
  const void *v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  if (*a1 != -1)
    swift_once(a1, a3);
  v5 = (const void *)(*a2 + 16);
  swift_beginAccess(v5, v11, 32, 0);
  v6 = objc_getAssociatedObject(v3, v5);
  swift_endAccess(v11);
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v10, v6);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_100029C38((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    v7 = sub_10002E3EC(0, &qword_100127ED8, off_100105118);
    if (swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, v7, 6))
      return v9;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v11, &qword_100126F70);
    return 0;
  }
}

void LogConsistency.tltVerifier.setter(void *a1)
{
  sub_10002EBC4(a1, &qword_10012E970, &qword_10012E978, (uint64_t)sub_100054464);
}

void (*LogConsistency.tltVerifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = LogConsistency.tltVerifier.getter();
  return sub_1000549FC;
}

void sub_1000549FC(uint64_t a1, char a2)
{
  sub_10002ECC0(a1, a2, &qword_10012E970, &qword_10012E978, (uint64_t)sub_100054464);
}

double sub_100054A18@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v3;
  id v4;
  uint64_t v5;
  double result;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  if (qword_10012E980 != -1)
    swift_once(&qword_10012E980, sub_100054494);
  v3 = (const void *)(qword_10012E988 + 16);
  swift_beginAccess(qword_10012E988 + 16, v7, 32, 0);
  v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess(v7);
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v7, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100029C38((uint64_t)v7, (uint64_t)v8);
  if (!v9)
  {
    sub_1000202F0((uint64_t)v8, &qword_100126F70);
    goto LABEL_10;
  }
  v5 = sub_10001D138(&qword_100126F80);
  if ((swift_dynamicCast(a1, v8, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
  {
LABEL_10:
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100054B34(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  _QWORD v12[3];
  uint64_t v13;

  if (qword_10012E980 != -1)
    swift_once(&qword_10012E980, sub_100054494);
  v3 = qword_10012E988;
  sub_10002AC5C(a1, (uint64_t)v12, &qword_100126F88);
  v4 = v13;
  if (v13)
  {
    v5 = sub_100022F20(v12, v13);
    v6 = *(_QWORD *)(v4 - 8);
    __chkstk_darwin(v5);
    v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v8, v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    sub_100023CAC(v12);
  }
  else
  {
    v9 = 0;
  }
  swift_beginAccess(v3 + 16, v12, 32, 0);
  objc_setAssociatedObject(v1, (const void *)(v3 + 16), v9, (void *)1);
  swift_endAccess(v12);
  swift_unknownObjectRelease(v9);
  return sub_1000202F0(a1, &qword_100126F88);
}

void (*sub_100054C8C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_100054A18((uint64_t)v3);
  return sub_100054CD8;
}

void sub_100054CD8(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*a1, (uint64_t)v2 + 40, &qword_100126F88);
    sub_100054B34((uint64_t)v2 + 40);
    sub_1000202F0((uint64_t)v2, &qword_100126F88);
  }
  else
  {
    sub_100054B34(*a1);
  }
  free(v2);
}

uint64_t LogConsistency.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  if (qword_10012E990 != -1)
    swift_once(&qword_10012E990, sub_1000544C4);
  v3 = (const void *)(qword_10012E998 + 16);
  swift_beginAccess(qword_10012E998 + 16, v9, 32, 0);
  v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess(v9);
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100029C38((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_1000202F0((uint64_t)v10, &qword_100126F70);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t LogConsistency.receiptTime.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  _BYTE v13[24];

  v2 = v1;
  v4 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10012E990 != -1)
    swift_once(&qword_10012E990, sub_1000544C4);
  v7 = qword_10012E998;
  sub_10002AC5C(a1, (uint64_t)v6, &qword_100127710);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v6, v8);
  }
  swift_beginAccess(v7 + 16, v13, 32, 0);
  objc_setAssociatedObject(v2, (const void *)(v7 + 16), isa, (void *)0x303);
  swift_endAccess(v13);
  swift_unknownObjectRelease(isa);
  return sub_1000202F0(a1, &qword_100127710);
}

void (*LogConsistency.receiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100127710) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  LogConsistency.receiptTime.getter((uint64_t)v4);
  return sub_10005504C;
}

void sub_10005504C(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*(_QWORD *)(a1 + 16), (uint64_t)v2, &qword_100127710);
    LogConsistency.receiptTime.setter((uint64_t)v2);
    sub_1000202F0((uint64_t)v3, &qword_100127710);
  }
  else
  {
    LogConsistency.receiptTime.setter(*(_QWORD *)(a1 + 16));
  }
  free(v3);
  free(v2);
}

char *sub_1000550BC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  id v41;
  uint8_t *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  id v87;
  id v88;
  id ObjCClassFromMetadata;
  id v90;
  id v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97[3];
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  uint64_t v101;
  _OWORD v102[3];
  uint64_t v103;
  _QWORD v104[7];
  uint8_t *v105;

  v2 = sub_10001D138(&qword_100127710);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v83 - v6;
  v8 = type metadata accessor for Date(0);
  v105 = *(uint8_t **)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v83 - v12;
  v14 = LogConsistency.consistencyVerifier.getter();
  if (v14)
  {
    v15 = (void *)v14;
    v92 = v8;
    if (objc_msgSend(v0, "hasStartSlh")
      && (v16 = objc_msgSend(v0, "startSlh")) != 0)
    {
      v17 = v16;
      if (objc_msgSend(v0, "hasEndSlh")
        && (v18 = objc_msgSend(v0, "endSlh")) != 0)
      {
        v86 = v0;
        v19 = v18;
        v20 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
        ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata(v20);
        v91 = objc_msgSend(ObjCClassFromMetadata, "signedTypeWithObject:", v17);
        v21 = objc_msgSend(v15, "trustedKeyStore");
        v88 = v17;
        v22 = v19;
        v23 = v21;
        v24 = objc_msgSend(v21, "signatureVerifier");
        v90 = v15;
        v25 = v24;

        v26 = v91;
        objc_msgSend(v91, "setVerifier:", v25);

        v87 = v22;
        v27 = objc_msgSend(ObjCClassFromMetadata, "signedTypeWithObject:", v22);
        v28 = objc_msgSend(v90, "trustedKeyStore");
        v29 = objc_msgSend(v28, "signatureVerifier");

        objc_msgSend(v27, "setVerifier:", v29);
        ObjCClassFromMetadata = v27;

        v30 = v91;
        sub_100053F40((uint64_t)v100);
        if (v1)
        {

        }
        else
        {
          sub_100053F40((uint64_t)v102);
          sub_100054A18((uint64_t)&v93);
          v41 = v90;
          if (*((_QWORD *)&v94 + 1))
          {
            sub_10002E424((uint64_t)&v93, (uint64_t)v97);
            sub_1000202F0((uint64_t)&v93, &qword_100126F88);
            v83 = v99;
            v85 = v98;
            v84 = sub_100022F20(v97, v98);
            LogConsistency.receiptTime.getter((uint64_t)v7);
            v42 = v105;
            v43 = v92;
            if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v105 + 6))(v7, 1, v92) == 1)
            {
              static Date.now.getter();
              sub_1000202F0((uint64_t)v7, &qword_100127710);
            }
            else
            {
              (*((void (**)(char *, char *, uint64_t))v42 + 4))(v13, v7, v43);
            }
            v48 = objc_msgSend(v91, "data");
            v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v48);
            v51 = v50;

            v52 = sub_100054114();
            (*(void (**)(_OWORD *, char *, uint64_t, unint64_t, unint64_t, uint64_t))(v83 + 24))(v100, v13, v49, v51, v52, v85);
            (*((void (**)(char *, uint64_t))v105 + 1))(v13, v92);
            sub_100022F44(v49, v51);
            sub_100023CAC(v97);
            v44 = ObjCClassFromMetadata;
            v41 = v90;
          }
          else
          {
            sub_1000202F0((uint64_t)&v93, &qword_100126F88);
            v44 = ObjCClassFromMetadata;
          }
          sub_100054A18((uint64_t)&v93);
          if (*((_QWORD *)&v94 + 1))
          {
            sub_10002E424((uint64_t)&v93, (uint64_t)v97);
            sub_1000202F0((uint64_t)&v93, &qword_100126F88);
            v45 = v98;
            v85 = v99;
            v84 = sub_100022F20(v97, v98);
            LogConsistency.receiptTime.getter((uint64_t)v5);
            v46 = v105;
            v47 = v92;
            if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v105 + 6))(v5, 1, v92) == 1)
            {
              static Date.now.getter();
              sub_1000202F0((uint64_t)v5, &qword_100127710);
            }
            else
            {
              (*((void (**)(char *, char *, uint64_t))v46 + 4))(v11, v5, v47);
            }
            v53 = objc_msgSend(ObjCClassFromMetadata, "data");
            v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
            v56 = v55;

            v57 = sub_100054114();
            (*(void (**)(_OWORD *, char *, uint64_t, unint64_t, unint64_t, uint64_t))(v85 + 24))(v102, v11, v54, v56, v57, v45);
            (*((void (**)(char *, uint64_t))v105 + 1))(v11, v92);
            sub_100022F44(v54, v56);
            sub_100023CAC(v97);
            v44 = ObjCClassFromMetadata;
          }
          else
          {
            sub_1000202F0((uint64_t)&v93, &qword_100126F88);
          }
          v11 = (char *)sub_10004BAB0();
          sub_100054A18((uint64_t)&v93);
          if (*((_QWORD *)&v94 + 1))
          {
            sub_10002E424((uint64_t)&v93, (uint64_t)v97);
            sub_1000202F0((uint64_t)&v93, &qword_100126F88);
            v58 = v98;
            v59 = v99;
            sub_100022F20(v97, v98);
            (*(void (**)(_OWORD *, char *, uint64_t, uint64_t))(v59 + 48))(v100, v11, v58, v59);
            sub_100023CAC(v97);
          }
          else
          {
            sub_1000202F0((uint64_t)&v93, &qword_100126F88);
          }
          v60 = v88;
          if (v11 == (char *)1)
          {
            if (qword_10012E9A0 != -1)
              swift_once(&qword_10012E9A0, sub_1000544F4);
            v61 = type metadata accessor for Logger(0);
            v62 = sub_100020804(v61, (uint64_t)qword_100131510);
            sub_10002304C(v100);
            v63 = sub_10002304C(v100);
            v105 = (uint8_t *)v62;
            v64 = Logger.logObject.getter(v63);
            v65 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v64, v65))
            {
              v66 = (uint8_t *)swift_slowAlloc(12, -1);
              v67 = swift_slowAlloc(32, -1);
              *(_DWORD *)v66 = 136315138;
              v93 = v100[0];
              v94 = v100[1];
              v95 = v100[2];
              v96 = v101;
              v97[0] = v67;
              v68 = sub_100023710();
              v69 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v68);
              v71 = v70;
              *(_QWORD *)&v93 = sub_1000230D0(v69, v70, v97);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, (char *)&v93 + 8, v66 + 4, v66 + 12);
              swift_bridgeObjectRelease(v71);
              sub_10002300C(v100);
              sub_10002300C(v100);
              _os_log_impl((void *)&_mh_execute_header, v64, v65, "Verified signature for %s", v66, 0xCu);
              swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v67, -1, -1);
              swift_slowDealloc(v66, -1, -1);
            }
            else
            {
              sub_10002300C(v100);
              sub_10002300C(v100);
            }

            v11 = (char *)sub_10004BAB0();
            sub_100054A18((uint64_t)&v93);
            if (*((_QWORD *)&v94 + 1))
            {
              sub_10002E424((uint64_t)&v93, (uint64_t)v97);
              sub_1000202F0((uint64_t)&v93, &qword_100126F88);
              v72 = v98;
              v73 = v99;
              sub_100022F20(v97, v98);
              sub_100053F40((uint64_t)v104);
              (*(void (**)(_QWORD *, char *, uint64_t, uint64_t))(v73 + 48))(v104, v11, v72, v73);
              sub_10002300C(v104);
              sub_100023CAC(v97);
            }
            else
            {
              sub_1000202F0((uint64_t)&v93, &qword_100126F88);
            }
            sub_10002304C(v102);
            v74 = sub_10002304C(v102);
            v75 = Logger.logObject.getter(v74);
            v76 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v75, v76))
            {
              v77 = (uint8_t *)swift_slowAlloc(12, -1);
              v78 = swift_slowAlloc(32, -1);
              *(_DWORD *)v77 = 136315138;
              v105 = v77 + 4;
              v93 = v102[0];
              v94 = v102[1];
              v95 = v102[2];
              v96 = v103;
              v97[0] = v78;
              v79 = sub_100023710();
              v80 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v79);
              v82 = v81;
              *(_QWORD *)&v93 = sub_1000230D0(v80, v81, v97);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, (char *)&v93 + 8, v105, v77 + 12);
              swift_bridgeObjectRelease(v82);
              sub_10002300C(v102);
              sub_10002300C(v102);
              _os_log_impl((void *)&_mh_execute_header, v75, v76, "Verified signature for %s", v77, 0xCu);
              swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v78, -1, -1);
              swift_slowDealloc(v77, -1, -1);

              sub_10002300C(v102);
              sub_10002300C(v100);

            }
            else
            {

              sub_10002300C(v100);
              sub_10002300C(v102);
              sub_10002300C(v102);
              sub_10002300C(v102);

            }
          }
          else
          {
            sub_10002300C(v102);
            sub_10002300C(v100);

          }
        }
      }
      else
      {
        v37 = sub_10005A164();
        v38 = swift_allocError(&type metadata for LogConsistencyError, v37, 0, 0);
        *v39 = 2;
        swift_willThrow(v38);

      }
    }
    else
    {
      v31 = sub_10005A164();
      v32 = swift_allocError(&type metadata for LogConsistencyError, v31, 0, 0);
      *v33 = 1;
      swift_willThrow(v32);

    }
  }
  else
  {
    v34 = sub_10005A164();
    v35 = swift_allocError(&type metadata for LogConsistencyError, v34, 0, 0);
    *v36 = 0;
    swift_willThrow(v35);
  }
  return v11;
}

uint64_t *sub_100056444()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *ObjCClassFromMetadata;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint8_t *v41;
  NSObject *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8_t *v47;
  os_log_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  uint8_t *v62;
  NSObject *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint8_t *v68;
  os_log_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  char **v75;
  id v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  _QWORD *v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  NSObject *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  os_log_t v96;
  uint64_t v97;
  _QWORD *v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint8_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  NSObject *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  os_log_t v121;
  uint64_t v122;
  uint8_t *v123;
  uint8_t *v124;
  os_log_t v125;
  os_log_t v126;
  void *v127;
  void *v128;
  id v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  id v145;

  v2 = v0;
  v3 = type metadata accessor for KTSWDB.SignedLogHead(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = LogConsistency.consistencyVerifier.getter();
  if (!v6)
  {
    v25 = sub_10005A164();
    v26 = swift_allocError(&type metadata for LogConsistencyError, v25, 0, 0);
    *v27 = 0;
    swift_willThrow(v26);
    return v5;
  }
  v7 = (void *)v6;
  if (!objc_msgSend(v0, "hasStartSlh")
    || (v8 = objc_msgSend(v0, "startSlh")) == 0)
  {
    v22 = sub_10005A164();
    v23 = swift_allocError(&type metadata for LogConsistencyError, v22, 0, 0);
    *v24 = 1;
    swift_willThrow(v23);

    return v5;
  }
  v9 = v8;
  if (!objc_msgSend(v0, "hasEndSlh")
    || (v10 = objc_msgSend(v0, "endSlh")) == 0)
  {
    v28 = sub_10005A164();
    v29 = swift_allocError(&type metadata for LogConsistencyError, v28, 0, 0);
    *v30 = 2;
    swift_willThrow(v29);

    return v5;
  }
  v11 = v10;
  v12 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v12);
  v145 = v11;
  v14 = objc_msgSend(ObjCClassFromMetadata, "signedTypeWithObject:", v9);
  v129 = v9;
  v15 = v14;
  v16 = objc_msgSend(v7, "trustedKeyStore");
  v17 = objc_msgSend(v16, "signatureVerifier");

  objc_msgSend(v15, "setVerifier:", v17);
  v18 = v145;
  v19 = objc_msgSend(ObjCClassFromMetadata, "signedTypeWithObject:", v145);
  v20 = objc_msgSend(v7, "trustedKeyStore");
  v21 = objc_msgSend(v20, "signatureVerifier");

  objc_msgSend(v19, "setVerifier:", v21);
  sub_100053F40((uint64_t)&v137);
  if (v1)
  {

    return v5;
  }
  sub_100053F40((uint64_t)&v141);
  v128 = v15;
  if (!(_QWORD)v139)
  {
    sub_100054A18((uint64_t)&v130);
    if (*((_QWORD *)&v131 + 1))
    {
      v32 = v19;
      sub_10002E424((uint64_t)&v130, (uint64_t)&v134);
      sub_1000202F0((uint64_t)&v130, &qword_100126F88);
      v33 = v135;
      v34 = v136;
      sub_100022F20(&v134, v135);
      (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v34 + 32))(&v137, 1, v33, v34);
      sub_100023CAC(&v134);
      v19 = v32;
    }
    else
    {
      sub_1000202F0((uint64_t)&v130, &qword_100126F88);
    }
    if (qword_10012E9A0 != -1)
      swift_once(&qword_10012E9A0, sub_1000544F4);
    v35 = type metadata accessor for Logger(0);
    sub_100020804(v35, (uint64_t)qword_100131510);
    sub_10002304C(&v137);
    v36 = sub_10002304C(&v137);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter();
    v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      v126 = v37;
      v40 = swift_slowAlloc(12, -1);
      LODWORD(v124) = v39;
      v41 = (uint8_t *)v40;
      v42 = swift_slowAlloc(32, -1);
      v125 = v42;
      v123 = v41;
      *(_DWORD *)v41 = 136315138;
      v130 = v137;
      v131 = v138;
      v132 = v139;
      v133 = v140;
      *(_QWORD *)&v134 = v42;
      v43 = sub_100023710();
      v44 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v43);
      v46 = v45;
      *(_QWORD *)&v130 = sub_1000230D0(v44, v45, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v41 + 4, v41 + 12);
      swift_bridgeObjectRelease(v46);
      sub_10002300C(&v137);
      sub_10002300C(&v137);
      v37 = v126;
      v47 = v123;
      _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v124, "Verified consistency for %s", v123, 0xCu);
      v48 = v125;
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }
    else
    {
      sub_10002300C(&v137);
      sub_10002300C(&v137);
    }

  }
  v127 = v19;
  sub_100054A18((uint64_t)&v130);
  v49 = *((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1))
  {
    sub_10002E424((uint64_t)&v130, (uint64_t)&v134);
    sub_1000202F0((uint64_t)&v130, &qword_100126F88);
    v50 = v135;
    v51 = v136;
    sub_100022F20(&v134, v135);
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v51 + 64))(&v137, v50, v51);
    v52 = *v5;
    sub_100023798((uint64_t)v5);
    sub_100023CAC(&v134);
  }
  else
  {
    sub_1000202F0((uint64_t)&v130, &qword_100126F88);
    v52 = 0;
  }
  v53 = objc_msgSend(v2, "proofHashesArray");
  if (!v53)
    goto LABEL_31;
  v54 = v53;
  *(_QWORD *)&v130 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v53, &v130, &type metadata for Data);

  v55 = v130;
  if (!(_QWORD)v130)
    goto LABEL_31;
  if (!*(_QWORD *)(v130 + 16))
  {
    swift_bridgeObjectRelease(v130);
LABEL_31:
    sub_10002E3EC(0, &qword_100126FC8, &off_100104FC8);
    v56 = v128;
    v5 = (uint64_t *)sub_1000309E8(v128, v127);
    goto LABEL_32;
  }
  v5 = (uint64_t *)sub_10004BAF8(v130, (uint64_t)v128, (uint64_t)v127);
  swift_bridgeObjectRelease(v55);
  v56 = v128;
LABEL_32:
  if (v49)
  {
    switch(v52)
    {
      case 0:
      case 3:
        if (qword_10012E9A0 != -1)
          swift_once(&qword_10012E9A0, sub_1000544F4);
        v57 = type metadata accessor for Logger(0);
        sub_100020804(v57, (uint64_t)qword_100131510);
        sub_10002304C(&v141);
        v58 = sub_10002304C(&v141);
        v59 = Logger.logObject.getter(v58);
        v60 = static os_log_type_t.info.getter();
        v61 = v60;
        if (os_log_type_enabled(v59, v60))
        {
          LODWORD(v126) = v61;
          v62 = (uint8_t *)swift_slowAlloc(12, -1);
          v63 = swift_slowAlloc(32, -1);
          v125 = v63;
          v124 = v62;
          *(_DWORD *)v62 = 136315138;
          v130 = v141;
          v131 = v142;
          v132 = v143;
          v133 = v144;
          *(_QWORD *)&v134 = v63;
          v64 = sub_100023710();
          v65 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v64);
          v67 = v66;
          *(_QWORD *)&v130 = sub_1000230D0(v65, v66, (uint64_t *)&v134);
          v56 = v128;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v62 + 4, v62 + 12);
          swift_bridgeObjectRelease(v67);
          sub_10002300C(&v141);
          sub_10002300C(&v141);
          v68 = v124;
          _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v126, "Verified consistency for %s following split", v124, 0xCu);
          v69 = v125;
          swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v69, -1, -1);
          swift_slowDealloc(v68, -1, -1);
        }
        else
        {
          sub_10002300C(&v141);
          sub_10002300C(&v141);
        }

        v75 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
        sub_100054A18((uint64_t)&v130);
        if (*((_QWORD *)&v131 + 1))
        {
          sub_10002E424((uint64_t)&v130, (uint64_t)&v134);
          sub_1000202F0((uint64_t)&v130, &qword_100126F88);
          v108 = v135;
          v109 = v136;
          sub_100022F20(&v134, v135);
          (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v109 + 32))(&v141, 1, v108, v109);
          sub_100023CAC(&v134);
          v56 = v128;
        }
        else
        {
          sub_1000202F0((uint64_t)&v130, &qword_100126F88);
        }
        break;
      case 1:
        if (qword_10012E9A0 != -1)
          swift_once(&qword_10012E9A0, sub_1000544F4);
        v86 = type metadata accessor for Logger(0);
        sub_100020804(v86, (uint64_t)qword_100131510);
        sub_10002304C(&v141);
        v87 = sub_10002304C(&v141);
        v88 = Logger.logObject.getter(v87);
        v89 = static os_log_type_t.info.getter();
        LODWORD(v126) = v89;
        if (os_log_type_enabled(v88, v89))
        {
          v90 = (uint8_t *)swift_slowAlloc(12, -1);
          v91 = swift_slowAlloc(32, -1);
          v125 = v91;
          *(_DWORD *)v90 = 136315138;
          v130 = v141;
          v131 = v142;
          v132 = v143;
          v133 = v144;
          *(_QWORD *)&v134 = v91;
          v92 = sub_100023710();
          v93 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v92);
          v95 = v94;
          *(_QWORD *)&v130 = sub_1000230D0(v93, v94, (uint64_t *)&v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v90 + 4, v90 + 12);
          swift_bridgeObjectRelease(v95);
          sub_10002300C(&v141);
          sub_10002300C(&v141);
          _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v126, "Verified consistency for %s", v90, 0xCu);
          v96 = v125;
          swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v96, -1, -1);
          swift_slowDealloc(v90, -1, -1);
        }
        else
        {
          sub_10002300C(&v141);
          sub_10002300C(&v141);
        }

        sub_100054A18((uint64_t)&v130);
        if (*((_QWORD *)&v131 + 1))
        {
          sub_10002E424((uint64_t)&v130, (uint64_t)&v134);
          sub_1000202F0((uint64_t)&v130, &qword_100126F88);
          v110 = v135;
          v111 = v136;
          sub_100022F20(&v134, v135);
          (*(void (**)(__int128 *, uint64_t *, uint64_t, uint64_t))(v111 + 32))(&v141, v5, v110, v111);
          sub_100023CAC(&v134);
        }
        else
        {
          sub_1000202F0((uint64_t)&v130, &qword_100126F88);
        }
        goto LABEL_43;
      case 2:
        if (qword_10012E9A0 != -1)
          swift_once(&qword_10012E9A0, sub_1000544F4);
        v97 = type metadata accessor for Logger(0);
        sub_100020804(v97, (uint64_t)qword_100131510);
        sub_10002304C(&v137);
        v98 = sub_10002304C(&v137);
        v99 = Logger.logObject.getter(v98);
        v100 = static os_log_type_t.info.getter();
        LODWORD(v126) = v100;
        if (os_log_type_enabled(v99, v100))
        {
          v125 = v99;
          v101 = (uint8_t *)swift_slowAlloc(12, -1);
          v102 = (uint8_t *)swift_slowAlloc(32, -1);
          v124 = v102;
          *(_DWORD *)v101 = 136315138;
          v130 = v137;
          v131 = v138;
          v132 = v139;
          v133 = v140;
          *(_QWORD *)&v134 = v102;
          v103 = sub_100023710();
          v104 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v103);
          v106 = v105;
          *(_QWORD *)&v130 = sub_1000230D0(v104, v105, (uint64_t *)&v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v101 + 4, v101 + 12);
          swift_bridgeObjectRelease(v106);
          sub_10002300C(&v137);
          sub_10002300C(&v137);
          v99 = v125;
          _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v126, "Consistency for start %s still pending due to disjoint proof", v101, 0xCu);
          v107 = v124;
          swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v107, -1, -1);
          swift_slowDealloc(v101, -1, -1);
        }
        else
        {
          sub_10002300C(&v137);
          sub_10002300C(&v137);
        }

        sub_10002304C(&v141);
        v112 = sub_10002304C(&v141);
        v113 = Logger.logObject.getter(v112);
        v114 = static os_log_type_t.info.getter();
        LODWORD(v126) = v114;
        if (os_log_type_enabled(v113, v114))
        {
          v115 = (uint8_t *)swift_slowAlloc(12, -1);
          v116 = swift_slowAlloc(32, -1);
          v125 = v116;
          *(_DWORD *)v115 = 136315138;
          v130 = v141;
          v131 = v142;
          v132 = v143;
          v133 = v144;
          *(_QWORD *)&v134 = v116;
          v117 = sub_100023710();
          v118 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v117);
          v120 = v119;
          *(_QWORD *)&v130 = sub_1000230D0(v118, v119, (uint64_t *)&v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v115 + 4, v115 + 12);
          swift_bridgeObjectRelease(v120);
          sub_10002300C(&v141);
          sub_10002300C(&v141);
          _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v126, "Consistency for end %s still pending due to disjoint proof", v115, 0xCu);
          v121 = v125;
          swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v121, -1, -1);
          swift_slowDealloc(v115, -1, -1);
        }
        else
        {
          sub_10002300C(&v141);
          sub_10002300C(&v141);
        }

        goto LABEL_43;
      default:
        goto LABEL_38;
    }
  }
  else
  {
LABEL_38:
    if (qword_10012E9A0 != -1)
      swift_once(&qword_10012E9A0, sub_1000544F4);
    v70 = type metadata accessor for Logger(0);
    v71 = sub_100020804(v70, (uint64_t)qword_100131510);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Unknown startSlh consistency verification state", v74, 2u);
      swift_slowDealloc(v74, -1, -1);
    }

LABEL_43:
    v56 = v128;
    v75 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
  }
  sub_100054A18((uint64_t)&v134);
  if (v135)
  {
    sub_100032478(&v134, (uint64_t)&v130);
    v76 = objc_msgSend(v7, v75[461]);
    v77 = objc_msgSend(v76, "signatureVerifier");

    v78 = v127;
    sub_100020BC4(&v130, (uint64_t)v127, (uint64_t)v77);

    v82 = sub_10001D138(&qword_100127F08);
    v83 = swift_allocObject(v82, 48, 7);
    *(_OWORD *)(v83 + 16) = xmmword_1000DDA30;
    *(_QWORD *)(v83 + 32) = v56;
    *(_QWORD *)(v83 + 40) = v78;
    *(_QWORD *)&v134 = v83;
    specialized Array._endMutation()(v83);
    v84 = v56;
    v85 = v78;

    sub_10002300C(&v137);
    sub_10002300C(&v141);

    sub_100023CAC(&v130);
  }
  else
  {
    sub_1000202F0((uint64_t)&v134, &qword_100126F88);
    v79 = sub_10001D138(&qword_100127F08);
    v80 = swift_allocObject(v79, 48, 7);
    *(_OWORD *)(v80 + 16) = xmmword_1000DDA30;
    v81 = v127;
    *(_QWORD *)(v80 + 32) = v56;
    *(_QWORD *)(v80 + 40) = v81;
    *(_QWORD *)&v130 = v80;
    specialized Array._endMutation()(v80);
    sub_10002300C(&v141);

    sub_10002300C(&v137);
  }
  return v5;
}

uint64_t sub_1000579C4(unint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  id v15;
  char *v16;
  char *v17;
  uint64_t v18;
  id v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t result;
  char *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint8_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  void (**v39)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint8_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8_t *v52;
  uint8_t *v53;
  uint64_t v54;
  uint8_t *v55;
  id v56;
  id v57;
  char *v58;
  id v59;
  void *v60;
  uint64_t v61;
  void *ObjCClassFromMetadata;
  uint64_t v63;
  unint64_t v64;
  Class isa;
  uint8_t *v66;
  void *v67;
  uint64_t v68;
  id v69;
  unint64_t v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  id v79;
  uint64_t v80;
  id v81;
  void *v82;
  id v83;
  unint64_t v84;
  unint64_t v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  id v94;
  id v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  id v106;
  uint8_t *v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE v111[12];
  int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  id v116;
  uint8_t *v117;
  _QWORD *v118;
  void (**v119)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v120;
  void *v121;
  id v122;
  id v123;
  char *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void (**v132)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v133[7];
  _OWORD v134[3];
  uint64_t v135;
  _QWORD v136[7];

  v3 = v2;
  v4 = v1;
  v6 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v6);
  v8 = &v111[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v111[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = LogConsistency.patVerifier.getter();
  if (!v13)
  {
    v24 = sub_10005A164();
    v25 = swift_allocError(&type metadata for LogConsistencyError, v24, 0, 0);
    *v26 = 0;
    swift_willThrow(v25);
    return v9;
  }
  v14 = (char *)v13;
  if (!objc_msgSend(v4, "hasPatInclusionProof")
    || (v15 = objc_msgSend(v4, "patInclusionProof")) == 0)
  {
    v21 = sub_10005A164();
    v22 = swift_allocError(&type metadata for LogConsistencyError, v21, 0, 0);
    *v23 = 4;
    swift_willThrow(v22);

    return v9;
  }
  v120 = a1;
  v123 = v15;
  v124 = v14;
  v16 = (char *)objc_msgSend(v15, "slh");
  if (!v16)
  {
    __break(1u);
    goto LABEL_83;
  }
  v17 = v16;
  v18 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "signedTypeWithObject:", v17);

  sub_100054A18((uint64_t)&v125);
  if (*((_QWORD *)&v126 + 1))
  {
    v121 = v4;
    sub_10002E424((uint64_t)&v125, (uint64_t)&v129);
    sub_1000202F0((uint64_t)&v125, &qword_100126F88);
    v20 = v131;
    v119 = v132;
    v118 = sub_100022F20(&v129, (uint64_t)v131);
    sub_100053F40((uint64_t)v133);
    if (v2)
    {

      sub_100023CAC(&v129);
      return v9;
    }
    v116 = v20;
    v122 = v19;
    LogConsistency.receiptTime.getter((uint64_t)v8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      static Date.now.getter();
      sub_1000202F0((uint64_t)v8, &qword_100127710);
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v8, v9);
    }
    v31 = objc_msgSend(v122, "data");
    v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v117 = v33;

    v34 = sub_100054114();
    v4 = v121;
    v35 = v32;
    v36 = v32;
    v37 = v117;
    ((void (**)(_QWORD *, _BYTE *, uint64_t, uint8_t *, unint64_t, id))v119)[3](v133, v12, v36, v117, v34, v116);
    v3 = 0;
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    sub_100022F44(v35, (unint64_t)v37);
    sub_10002300C(v133);
    sub_100023CAC(&v129);
  }
  else
  {
    v122 = v19;
    sub_1000202F0((uint64_t)&v125, &qword_100126F88);
  }
  v28 = v124;
  v29 = objc_msgSend(v124, "trustedKeyStore");
  v30 = objc_msgSend(v29, "signatureVerifier");

  v10 = (uint64_t)v122;
  objc_msgSend(v122, "setVerifier:", v30);
  sub_100053F40((uint64_t)v134);
  if (v3)
  {

    return v9;
  }
  v119 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v30;
  v3 = 0;
  v9 = (uint64_t)sub_10004BAB0();
  sub_100054A18((uint64_t)&v125);
  if (*((_QWORD *)&v126 + 1))
  {
    sub_10002E424((uint64_t)&v125, (uint64_t)&v129);
    sub_1000202F0((uint64_t)&v125, &qword_100126F88);
    v38 = (uint64_t)v131;
    v39 = v132;
    sub_100022F20(&v129, (uint64_t)v131);
    ((void (*)(_OWORD *, uint64_t, uint64_t, void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))v39[6])(v134, v9, v38, v39);
    sub_100023CAC(&v129);
  }
  else
  {
    sub_1000202F0((uint64_t)&v125, &qword_100126F88);
  }
  if (v9 != 1)
  {
    sub_10002300C(v134);
    v56 = v123;
    v55 = (uint8_t *)v124;
LABEL_30:

    return v9;
  }
  if (qword_10012E9A0 != -1)
    swift_once(&qword_10012E9A0, sub_1000544F4);
  v40 = type metadata accessor for Logger(0);
  v41 = sub_100020804(v40, (uint64_t)qword_100131510);
  sub_10002304C(v134);
  v42 = sub_10002304C(v134);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    v121 = (void *)v46;
    v117 = v45;
    v118 = (_QWORD *)v41;
    *(_DWORD *)v45 = 136315138;
    v47 = v45 + 12;
    v116 = v45 + 4;
    v125 = v134[0];
    v126 = v134[1];
    v127 = v134[2];
    v128 = v135;
    v129 = v46;
    v48 = sub_100023710();
    v49 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v48);
    v51 = v50;
    *(_QWORD *)&v125 = sub_1000230D0(v49, v50, &v129);
    v52 = v47;
    v41 = (uint64_t)v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, (char *)&v125 + 8, v116, v52);
    swift_bridgeObjectRelease(v51);
    sub_10002300C(v134);
    sub_10002300C(v134);
    v53 = v117;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Verified signature for %s", v117, 0xCu);
    v54 = (uint64_t)v121;
    swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    sub_10002300C(v134);
    sub_10002300C(v134);
  }

  v57 = v123;
  v58 = v124;
  objc_msgSend(v123, "setVerifier:", v124);
  v9 = (uint64_t)sub_10004BAB0();
  if (objc_msgSend(v57, "nodeType") != 1)
  {
    v76 = sub_10005A164();
    v77 = swift_allocError(&type metadata for LogConsistencyError, v76, 0, 0);
    *v78 = 8;
    swift_willThrow(v77);
    sub_10002300C(v134);

    goto LABEL_21;
  }
  v118 = (_QWORD *)v41;
  v59 = objc_msgSend(v57, "nodeBytes");
  if (!v59)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    result = sub_100027420(v114, v115);
    __break(1u);
    return result;
  }
  v60 = v59;
  v61 = sub_10002E3EC(0, &qword_100127F00, &off_1001050B8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v61);
  v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
  a1 = v64;

  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100022F44(v63, a1);
  *(_QWORD *)&v125 = 0;
  v66 = (uint8_t *)objc_msgSend(ObjCClassFromMetadata, "parseFromData:error:", isa, &v125);

  v67 = (void *)v125;
  if (!v66)
  {
    v79 = (id)v125;
    _convertNSErrorToError(_:)(v67);

    swift_willThrow(v80);
    sub_10002300C(v134);

    goto LABEL_22;
  }
  v117 = v66;
  v68 = v120;
  if (v120 >> 62)
    goto LABEL_72;
  v14 = *(char **)((v120 & 0xFFFFFFFFFFFFF8) + 0x10);
  v69 = (id)v125;
  swift_bridgeObjectRetain(v68);
  if (!v14)
  {
LABEL_76:
    v87 = 0x206E776F6E6B6E75;
    swift_bridgeObjectRelease(v68);
    v86 = 0;
LABEL_77:
    v89 = 0xEB00000000686C73;
    goto LABEL_78;
  }
  while (1)
  {
    v16 = v14 - 1;
    if (__OFSUB__(v14, 1))
    {
LABEL_83:
      __break(1u);
LABEL_84:
      v70 = v120;
      v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v120);
      goto LABEL_42;
    }
    a1 = v68 & 0xC000000000000001;
    if ((v68 & 0xC000000000000001) != 0)
      goto LABEL_84;
    if (((unint64_t)v16 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    v70 = v120;
    if ((unint64_t)v16 >= *(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_86;
    v71 = *(id *)(v120 + 8 * (_QWORD)v16 + 32);
LABEL_42:
    v72 = v71;
    swift_bridgeObjectRelease(v70);
    v116 = v72;
    if ((-[uint8_t hasObjectMapHead](v117, "hasObjectMapHead") & 1) == 0)
      goto LABEL_58;
    v73 = objc_msgSend(v116, "logHead");
    if (v73)
    {
      v74 = v73;
      v114 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v73);
      v115 = v75;

    }
    else
    {
      v114 = 0;
      v115 = 0xF000000000000000;
    }
    v81 = -[uint8_t objectMapHead](v117, "objectMapHead");
    if (!v81)
      goto LABEL_88;
    v82 = v81;
    v83 = objc_msgSend(v81, "object");

    v122 = (id)v10;
    if (v83)
      break;
    if (v115 >> 60 != 15)
    {
      v113 = 0;
      v85 = 0xF000000000000000;
      goto LABEL_57;
    }
LABEL_62:
    swift_bridgeObjectRetain(v120);
    v10 = 4;
    while (1)
    {
      v94 = a1
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v120)
          : *(id *)(v120 + 8 * v10);
      v67 = v94;
      v68 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      *(_QWORD *)&v125 = v94;
      sub_10005A348((uint64_t)&v125, (uint64_t)v4, v9);
      if (v3)
      {
        swift_bridgeObjectRelease(v120);

        sub_10002300C(v134);
        v95 = v116;

        return v9;
      }

      ++v10;
      if ((char *)v68 == v14)
      {
        swift_bridgeObjectRelease(v120);
        sub_10002300C(v134);

        v56 = v116;
        v55 = v117;
        v119 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v116;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_72:
    if (v68 < 0)
      v96 = v68;
    else
      v96 = v68 & 0xFFFFFFFFFFFFFF8;
    v97 = v67;
    swift_bridgeObjectRetain(v68);
    v14 = (char *)_CocoaArrayWrapper.endIndex.getter(v96);
    if (!v14)
      goto LABEL_76;
  }
  v121 = v4;
  v113 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v83);
  v85 = v84;

  if (v115 >> 60 == 15)
  {
    v4 = v121;
    v10 = (uint64_t)v122;
    if (v85 >> 60 != 15)
      goto LABEL_57;
    goto LABEL_62;
  }
  if (v85 >> 60 != 15)
  {
    v91 = v114;
    v90 = v115;
    sub_100049CB0(v114, v115);
    v92 = v113;
    sub_10002395C(v91, v90);
    v112 = v93;
    sub_100027420(v92, v85);
    sub_100027420(v91, v90);
    sub_100027420(v91, v90);
    v4 = v121;
    v10 = (uint64_t)v122;
    if ((v112 & 1) == 0)
      goto LABEL_58;
    goto LABEL_62;
  }
  v10 = (uint64_t)v122;
LABEL_57:
  sub_100027420(v114, v115);
  sub_100027420(v113, v85);
LABEL_58:
  v86 = v116;
  sub_100053F40((uint64_t)v136);
  if (v3)
  {
    v87 = 0x206E776F6E6B6E75;
    swift_errorRelease();

    goto LABEL_77;
  }

  v87 = KTSWDB.STHKey.description.getter();
  v89 = v88;
  sub_10002300C(v136);
LABEL_78:
  v98 = swift_bridgeObjectRetain(v89);
  v99 = Logger.logObject.getter(v98);
  v100 = static os_log_type_t.error.getter();
  v9 = v100;
  if (os_log_type_enabled(v99, v100))
  {
    v121 = (void *)v87;
    v101 = (uint8_t *)swift_slowAlloc(12, -1);
    v102 = swift_slowAlloc(32, -1);
    v116 = v86;
    v103 = v102;
    *(_QWORD *)&v125 = v102;
    *(_DWORD *)v101 = 136315138;
    swift_bridgeObjectRetain(v89);
    v129 = sub_1000230D0((uint64_t)v121, v89, (uint64_t *)&v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v101 + 4, v101 + 12);
    swift_bridgeObjectRelease_n(v89, 3);
    _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v9, "Failed to verify inclusion proof for %s", v101, 0xCu);
    swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
    v104 = v103;
    v86 = v116;
    swift_slowDealloc(v104, -1, -1);
    swift_slowDealloc(v101, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v89, 2);
  }
  v106 = v123;
  v105 = v124;
  v107 = v117;
  v108 = sub_10005A164();
  v109 = swift_allocError(&type metadata for LogConsistencyError, v108, 0, 0);
  *v110 = 6;
  swift_willThrow(v109);

  sub_10002300C(v134);
LABEL_21:

LABEL_22:
  return v9;
}

uint64_t sub_100058C0C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  void (**v10)(char *, char *, id);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t result;
  id v28;
  id v29;
  id v30;
  char **v31;
  id v32;
  uint64_t v33;
  uint8_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8_t *v50;
  uint8_t *v51;
  _QWORD *v52;
  uint64_t v53;
  void (**v54)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v55;
  void (**v56)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  id v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  void *ObjCClassFromMetadata;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  Class isa;
  _QWORD *v67;
  uint64_t v68;
  id v69;
  void *v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  id v74;
  uint64_t v75;
  void (**v76)(char *, char *, id);
  id v77;
  void *v78;
  unint64_t v79;
  id v80;
  void *v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  char v98;
  char v99;
  _QWORD *v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void (**v110)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v111;
  uint8_t *v112;
  uint8_t *v113;
  _QWORD *v114;
  void (**v115)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v116;
  uint8_t *v117;
  void (**v118)(char *, char *, id);
  id v119;
  id v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125[3];
  uint64_t v126;
  void (**v127)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v128[7];
  _OWORD v129[3];
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v3 = v2;
  v4 = v1;
  v6 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v6);
  v8 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)type metadata accessor for Date(0);
  v10 = (void (**)(char *, char *, id))*(v9 - 1);
  __chkstk_darwin(v9);
  v12 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = LogConsistency.tltVerifier.getter();
  if (!v13)
  {
    v24 = sub_10005A164();
    v25 = swift_allocError(&type metadata for LogConsistencyError, v24, 0, 0);
    *v26 = 0;
    swift_willThrow(v25);
    return (uint64_t)v9;
  }
  v14 = v13;
  if (!objc_msgSend(v4, "hasTltInclusionProof")
    || (v15 = objc_msgSend(v4, "tltInclusionProof")) == 0)
  {
    v21 = sub_10005A164();
    v22 = swift_allocError(&type metadata for LogConsistencyError, v21, 0, 0);
    *v23 = 5;
    swift_willThrow(v22);

    return (uint64_t)v9;
  }
  v116 = a1;
  v119 = v15;
  v120 = (id)v14;
  v16 = objc_msgSend(v15, "slh");
  if (!v16)
  {
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v17 = v16;
  v18 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "signedTypeWithObject:", v17);

  sub_100054A18((uint64_t)&v121);
  if (*((_QWORD *)&v122 + 1))
  {
    v117 = (uint8_t *)v4;
    sub_10002E424((uint64_t)&v121, (uint64_t)v125);
    sub_1000202F0((uint64_t)&v121, &qword_100126F88);
    v20 = v126;
    v115 = v127;
    v114 = sub_100022F20(v125, v126);
    sub_100053F40((uint64_t)v128);
    if (v2)
    {

      sub_100023CAC(v125);
      return (uint64_t)v9;
    }
    v112 = (uint8_t *)v20;
    v118 = (void (**)(char *, char *, id))v19;
    LogConsistency.receiptTime.getter((uint64_t)v8);
    if (((unsigned int (*)(char *, uint64_t, _QWORD *))v10[6])(v8, 1, v9) == 1)
    {
      static Date.now.getter();
      sub_1000202F0((uint64_t)v8, &qword_100127710);
    }
    else
    {
      v10[4](v12, v8, v9);
    }
    v32 = objc_msgSend(v118, "data");
    v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v113 = v34;

    v35 = sub_100054114();
    v36 = v33;
    v37 = v33;
    v38 = v113;
    ((void (**)(_QWORD *, char *, uint64_t, uint8_t *, unint64_t, uint8_t *))v115)[3](v128, v12, v37, v113, v35, v112);
    v3 = 0;
    ((void (*)(char *, _QWORD *))v10[1])(v12, v9);
    sub_100022F44(v36, (unint64_t)v38);
    sub_10002300C(v128);
    sub_100023CAC(v125);
  }
  else
  {
    v118 = (void (**)(char *, char *, id))v19;
    sub_1000202F0((uint64_t)&v121, &qword_100126F88);
  }
  v28 = v120;
  v29 = objc_msgSend(v120, "trustedKeyStore");
  v30 = objc_msgSend(v29, "signatureVerifier");

  v31 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
  v10 = v118;
  objc_msgSend(v118, "setVerifier:", v30);
  sub_100053F40((uint64_t)v129);
  if (v3)
  {

LABEL_29:
    return (uint64_t)v9;
  }
  v9 = sub_10004BAB0();
  v115 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v30;
  if (qword_10012E9A0 != -1)
    swift_once(&qword_10012E9A0, sub_1000544F4);
  v39 = type metadata accessor for Logger(0);
  v40 = sub_100020804(v39, (uint64_t)qword_100131510);
  sub_10002304C(v129);
  v41 = sub_10002304C(v129);
  v117 = (uint8_t *)v40;
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = (_QWORD *)swift_slowAlloc(32, -1);
    v114 = v45;
    v113 = v44;
    *(_DWORD *)v44 = 136315138;
    v112 = v44 + 4;
    v121 = v129[0];
    v122 = v129[1];
    v123 = v129[2];
    v124 = v130;
    v125[0] = (uint64_t)v45;
    v46 = sub_100023710();
    v47 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v46);
    v49 = v48;
    *(_QWORD *)&v121 = sub_1000230D0(v47, v48, v125);
    v50 = v44 + 12;
    v31 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, (char *)&v121 + 8, v112, v50);
    swift_bridgeObjectRelease(v49);
    sub_10002300C(v129);
    sub_10002300C(v129);
    v51 = v113;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Verified signature for %s", v113, 0xCu);
    v52 = v114;
    swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    sub_10002300C(v129);
    sub_10002300C(v129);
  }

  sub_100054A18((uint64_t)&v121);
  v30 = v115;
  if (*((_QWORD *)&v122 + 1))
  {
    sub_10002E424((uint64_t)&v121, (uint64_t)v125);
    sub_1000202F0((uint64_t)&v121, &qword_100126F88);
    v53 = v126;
    v54 = v127;
    sub_100022F20(v125, v126);
    ((void (*)(_OWORD *, _QWORD *, uint64_t, void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))v54[6])(v129, v9, v53, v54);
    sub_100023CAC(v125);
    v31 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
  }
  else
  {
    sub_1000202F0((uint64_t)&v121, &qword_100126F88);
  }
  sub_100054A18((uint64_t)&v121);
  if (*((_QWORD *)&v122 + 1))
  {
    sub_10002E424((uint64_t)&v121, (uint64_t)v125);
    sub_1000202F0((uint64_t)&v121, &qword_100126F88);
    v55 = v126;
    v56 = v127;
    sub_100022F20(v125, v126);
    ((void (*)(_OWORD *, uint64_t, uint64_t, void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))v56[5])(v129, 1, v55, v56);
    sub_100023CAC(v125);
    v57 = v120;
    v31 = &selRef_enumerateRawValuesWithOptions_usingBlock_;
  }
  else
  {
    sub_1000202F0((uint64_t)&v121, &qword_100126F88);
    v57 = v120;
  }
  if (v9 != (_QWORD *)1)
  {
    sub_10002300C(v129);

    return (uint64_t)v9;
  }
  v58 = v119;
  objc_msgSend(v119, v31[394], v57);
  v14 = (unint64_t)v58;
  v9 = sub_10004BAB0();
  if (objc_msgSend(v58, "nodeType") != 3)
  {
    v71 = sub_10005A164();
    v72 = swift_allocError(&type metadata for LogConsistencyError, v71, 0, 0);
    *v73 = 9;
    swift_willThrow(v72);
    sub_10002300C(v129);

    goto LABEL_29;
  }
  v59 = objc_msgSend(v58, "nodeBytes");
  if (!v59)
    goto LABEL_66;
  v60 = v59;
  v61 = sub_10002E3EC(0, &qword_100127EF8, &off_1001050E8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v61);
  v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
  v65 = v64;

  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100022F44(v63, v65);
  *(_QWORD *)&v121 = 0;
  v67 = objc_msgSend(ObjCClassFromMetadata, "parseFromData:error:", isa, &v121);

  v68 = v121;
  if (!v67)
  {
    v74 = (id)v121;
    _convertNSErrorToError(_:)(v68);

    swift_willThrow(v75);
    sub_10002300C(v129);

    v76 = (void (**)(char *, char *, id))v119;
LABEL_57:

    return (uint64_t)v9;
  }
  v69 = (id)v121;
  v70 = v116;
  sub_100053F40((uint64_t)&v131);
  v113 = 0;
  v114 = v67;
  v118 = v10;
  if (!objc_msgSend(v67, "hasPatHead"))
  {
LABEL_53:
    sub_10002304C(&v131);
    v86 = sub_10002304C(&v131);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = swift_slowAlloc(32, -1);
      *(_DWORD *)v89 = 136315138;
      v9 = v89 + 4;
      v121 = v131;
      v122 = v132;
      v123 = v133;
      v124 = v134;
      v125[0] = v90;
      v91 = sub_100023710();
      v92 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v91);
      v94 = v93;
      *(_QWORD *)&v121 = sub_1000230D0(v92, v93, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, (char *)&v121 + 8, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease(v94);
      sub_10002300C(&v131);
      sub_10002300C(&v131);
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Failed to verify inclusion proof for %s", v89, 0xCu);
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v89, -1, -1);
    }
    else
    {
      sub_10002300C(&v131);
      sub_10002300C(&v131);
    }

    v95 = sub_10005A164();
    v96 = swift_allocError(&type metadata for LogConsistencyError, v95, 0, 0);
    *v97 = 7;
    swift_willThrow(v96);
    sub_10002300C(&v131);

    sub_10002300C(v129);
    v76 = v118;
    goto LABEL_57;
  }
  v77 = objc_msgSend(v70, "logHead");
  if (v77)
  {
    v78 = v77;
    v10 = (void (**)(char *, char *, id))static Data._unconditionallyBridgeFromObjectiveC(_:)(v77);
    v14 = v79;

  }
  else
  {
    v10 = 0;
    v14 = 0xF000000000000000;
  }
  v80 = objc_msgSend(v114, "patHead");
  if (v80)
  {
    v81 = v80;
    v82 = objc_msgSend(v80, "object");

    if (v82)
    {
      v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v82);
      v85 = v84;

      if (v14 >> 60 == 15)
      {
        if (v85 >> 60 == 15)
          goto LABEL_59;
        goto LABEL_52;
      }
      if (v85 >> 60 == 15)
      {
LABEL_52:
        sub_100027420((uint64_t)v10, v14);
        sub_100027420(v83, v85);
        goto LABEL_53;
      }
      sub_100049CB0((uint64_t)v10, v14);
      sub_10002395C((uint64_t)v10, v14);
      v99 = v98;
      sub_100027420(v83, v85);
      sub_100027420((uint64_t)v10, v14);
      sub_100027420((uint64_t)v10, v14);
      if ((v99 & 1) == 0)
        goto LABEL_53;
    }
    else if (v14 >> 60 != 15)
    {
      v83 = 0;
      v85 = 0xF000000000000000;
      goto LABEL_52;
    }
LABEL_59:
    sub_10002304C(&v131);
    v100 = sub_10002304C(&v131);
    v101 = Logger.logObject.getter(v100);
    v102 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v101, v102))
    {
      v103 = (uint8_t *)swift_slowAlloc(12, -1);
      v104 = swift_slowAlloc(32, -1);
      *(_DWORD *)v103 = 136315138;
      v117 = v103 + 4;
      v121 = v131;
      v122 = v132;
      v123 = v133;
      v124 = v134;
      v125[0] = v104;
      v105 = sub_100023710();
      v106 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v105);
      v108 = v107;
      *(_QWORD *)&v121 = sub_1000230D0(v106, v107, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, (char *)&v121 + 8, v117, v103 + 12);
      swift_bridgeObjectRelease(v108);
      sub_10002300C(&v131);
      sub_10002300C(&v131);
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "Verified inclusion for %s", v103, 0xCu);
      swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1, -1);
      swift_slowDealloc(v103, -1, -1);
    }
    else
    {
      sub_10002300C(&v131);
      sub_10002300C(&v131);
    }

    sub_100054A18((uint64_t)&v121);
    if (*((_QWORD *)&v122 + 1))
    {
      sub_10002E424((uint64_t)&v121, (uint64_t)v125);
      sub_1000202F0((uint64_t)&v121, &qword_100126F88);
      v109 = v126;
      v110 = v127;
      sub_100022F20(v125, v126);
      ((void (*)(__int128 *, _QWORD *, uint64_t, void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))v110[5])(&v131, v9, v109, v110);
      sub_10002300C(v129);
      sub_10002300C(&v131);

      sub_100023CAC(v125);
    }
    else
    {
      sub_10002300C(v129);
      sub_10002300C(&v131);

      sub_1000202F0((uint64_t)&v121, &qword_100126F88);
    }
    return (uint64_t)v9;
  }
LABEL_67:
  result = sub_100027420((uint64_t)v10, v14);
  __break(1u);
  return result;
}

void *LogConsistency.verify()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v14;
  void *v15;
  id v16;

  v2 = objc_autoreleasePoolPush();
  if (!objc_msgSend(v0, "hasStartSlh"))
  {
    v6 = sub_10005A164();
    v7 = swift_allocError(&type metadata for LogConsistencyError, v6, 0, 0);
    v9 = 1;
LABEL_13:
    *v8 = v9;
    swift_willThrow(v7);
    goto LABEL_14;
  }
  if (!objc_msgSend(v0, "hasEndSlh"))
  {
    v10 = sub_10005A164();
    v7 = swift_allocError(&type metadata for LogConsistencyError, v10, 0, 0);
    v9 = 2;
    goto LABEL_13;
  }
  if (!objc_msgSend(v0, "hasPatInclusionProof"))
  {
    v11 = sub_10005A164();
    v7 = swift_allocError(&type metadata for LogConsistencyError, v11, 0, 0);
    v9 = 4;
    goto LABEL_13;
  }
  if (!objc_msgSend(v0, "hasTltInclusionProof"))
  {
    v12 = sub_10005A164();
    v7 = swift_allocError(&type metadata for LogConsistencyError, v12, 0, 0);
    v9 = 5;
    goto LABEL_13;
  }
  v3 = sub_1000550BC();
  if (!v1)
  {
    v0 = v3;
    if (v3 == (char *)1)
    {
      v0 = sub_100056444();
      v5 = v4;
      if (v0 == (void *)1)
      {
        v0 = (void *)sub_1000579C4(v4);
        v15 = v14;
        swift_bridgeObjectRelease(v5);
        if (v0 == (void *)1)
        {
          v16 = v15;
          v0 = (void *)sub_100058C0C(v16);

        }
        else
        {

        }
      }
      else
      {
        swift_bridgeObjectRelease(v4);
      }
    }
  }
LABEL_14:
  objc_autoreleasePoolPop(v2);
  return v0;
}

unint64_t sub_10005A11C()
{
  unint64_t result;

  result = qword_100127EE0;
  if (!qword_100127EE0)
  {
    result = swift_getWitnessTable(&unk_1000DDA4C, &type metadata for LogConsistencyError);
    atomic_store(result, (unint64_t *)&qword_100127EE0);
  }
  return result;
}

unint64_t sub_10005A164()
{
  unint64_t result;

  result = qword_100127EE8;
  if (!qword_100127EE8)
  {
    result = swift_getWitnessTable(&unk_1000DDAB4, &type metadata for LogConsistencyError);
    atomic_store(result, (unint64_t *)&qword_100127EE8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LogConsistencyError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LogConsistencyError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10005A284 + 4 * byte_1000DDA45[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10005A2B8 + 4 * byte_1000DDA40[v4]))();
}

uint64_t sub_10005A2B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005A2C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005A2C8);
  return result;
}

uint64_t sub_10005A2D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005A2DCLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_10005A2E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005A2E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LogConsistencyError()
{
  return &type metadata for LogConsistencyError;
}

unint64_t sub_10005A304()
{
  unint64_t result;

  result = qword_100127EF0;
  if (!qword_100127EF0)
  {
    result = swift_getWitnessTable(&unk_1000DDB3C, &type metadata for LogConsistencyError);
    atomic_store(result, (unint64_t *)&qword_100127EF0);
  }
  return result;
}

void sub_10005A348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[3];
  uint64_t v28;
  _QWORD v29[8];
  uint64_t v30;

  sub_100053F40((uint64_t)v27);
  if (!v3)
  {
    if (qword_10012E9A0 != -1)
      swift_once(&qword_10012E9A0, sub_1000544F4);
    v5 = type metadata accessor for Logger(0);
    sub_100020804(v5, (uint64_t)qword_100131510);
    sub_10002304C(v27);
    v6 = sub_10002304C(v27);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(12, -1);
      v30 = a3;
      v10 = (uint8_t *)v9;
      v11 = swift_slowAlloc(32, -1);
      v24[0] = v11;
      *(_DWORD *)v10 = 136315138;
      v20 = *((_QWORD *)&v27[0] + 1);
      v21 = v27[1];
      v22 = v27[2];
      v23 = v28;
      v12 = sub_100023710();
      v13 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v12);
      v15 = v14;
      v19 = sub_1000230D0(v13, v14, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v15);
      sub_10002300C(v27);
      sub_10002300C(v27);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Verified inclusion for %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      v16 = v10;
      a3 = v30;
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_10002300C(v27);
      sub_10002300C(v27);
    }

    sub_100054A18((uint64_t)&v19);
    if (*((_QWORD *)&v21 + 1))
    {
      sub_10002E424((uint64_t)&v19, (uint64_t)v24);
      sub_1000202F0((uint64_t)&v19, &qword_100126F88);
      v17 = v25;
      v18 = v26;
      sub_100022F20(v24, v25);
      sub_100053F40((uint64_t)v29);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v18 + 40))(v29, a3, v17, v18);
      sub_10002300C(v27);
      sub_10002300C(v29);
      sub_100023CAC(v24);
    }
    else
    {
      sub_10002300C(v27);
      sub_1000202F0((uint64_t)&v19, &qword_100126F88);
    }
  }
}

uint64_t sub_10005A60C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_100131528);
  sub_100020804(v0, (uint64_t)qword_100131528);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0xD000000000000018, 0x80000001000DDBA0);
}

uint64_t sub_10005A68C()
{
  uint64_t v0;

  if (qword_10012EC30 != -1)
    swift_once(&qword_10012EC30, sub_10005A60C);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_100131528);
}

uint64_t sub_10005A6D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012EC30 != -1)
    swift_once(&qword_10012EC30, sub_10005A60C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131528);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10005A744()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon;
  swift_beginAccess(v0 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_10005A790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_10005A7F8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_10005A86C;
}

void sub_10005A86C(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)(v6 + 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

char *sub_10005A8E0(uint64_t a1, uint64_t (*a2)(unint64_t, unint64_t), uint64_t a3, void *a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return sub_10005A938(a1, a2, a3, a4);
}

char *sub_10005A938(uint64_t a1, uint64_t (*a2)(unint64_t, unint64_t), uint64_t a3, void *a4)
{
  char *v4;
  objc_class *ObjectType;
  char *v9;
  char *v10;
  id v11;
  char *v12;
  void *v13;
  char *v14;
  id v15;
  objc_super v17;
  char v18[24];

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v9 = &v4[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon];
  *((_QWORD *)v9 + 1) = 0;
  swift_unknownObjectWeakInit(v9, 0);
  v10 = v4;
  *(_QWORD *)&v10[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_listener] = a2(0xD000000000000019, 0x80000001000E3620);
  *(_QWORD *)&v10[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_xpcInterface] = a4;
  *(_QWORD *)&v10[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_stateMachine] = a1;
  swift_beginAccess(v9, v18, 1, 0);
  *((_QWORD *)v9 + 1) = 0;
  swift_unknownObjectWeakAssign(v9, 0);
  v11 = a4;
  swift_retain(a1);

  v17.receiver = v10;
  v17.super_class = ObjectType;
  v12 = (char *)objc_msgSendSuper2(&v17, "init");
  v13 = *(void **)&v12[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_listener];
  v14 = v12;
  objc_msgSend(v13, "setDelegate:", v14);
  v15 = v13;
  objc_msgSend(v15, "resume");

  swift_release(a1);
  return v14;
}

char *sub_10005AA90(uint64_t a1)
{
  objc_class *v1;
  void *v3;
  id v4;
  char *v5;
  char *v6;
  id v7;
  char *v8;
  NSString v9;
  id v10;
  id v11;
  char *v12;
  void *v13;
  char *v14;
  id v15;
  objc_super v17;
  char v18[24];

  v3 = (void *)objc_opt_self(SWTBridge);
  swift_retain(a1);
  v4 = objc_msgSend(v3, "swTransparencyXPCInterface");
  v5 = (char *)objc_allocWithZone(v1);
  v6 = &v5[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon];
  *((_QWORD *)v6 + 1) = 0;
  swift_unknownObjectWeakInit(v6, 0);
  v7 = objc_allocWithZone((Class)NSXPCListener);
  v8 = v5;
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v7, "initWithMachServiceName:", v9);

  *(_QWORD *)&v8[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_listener] = v10;
  *(_QWORD *)&v8[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_xpcInterface] = v4;
  *(_QWORD *)&v8[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_stateMachine] = a1;
  swift_beginAccess(v6, v18, 1, 0);
  *((_QWORD *)v6 + 1) = 0;
  swift_unknownObjectWeakAssign(v6, 0);
  swift_retain(a1);
  v11 = v4;

  v17.receiver = v8;
  v17.super_class = v1;
  v12 = (char *)objc_msgSendSuper2(&v17, "init");
  v13 = *(void **)&v12[OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_listener];
  v14 = v12;
  objc_msgSend(v13, "setDelegate:", v14);
  v15 = v13;
  objc_msgSend(v15, "resume");

  swift_release(a1);
  return v14;
}

uint64_t sub_10005AC3C(void *a1)
{
  __SecTask *v1;
  __SecTask *v2;
  CFStringRef v3;
  __CFString *v4;
  uint64_t v5;
  audit_token_t v7;

  objc_msgSend(a1, "auditToken");
  v1 = SecTaskCreateWithAuditToken(0, &v7);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = SecTaskCopySigningIdentifier(v1, 0);
  if (!v3)
  {

    return 0;
  }
  v4 = (__CFString *)v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v5;
}

uint64_t sub_10005ACCC(uint64_t a1, void *a2)
{
  return sub_10005AE34(a2);
}

id sub_10005AD30()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void sub_10005AD50()
{
  _swift_stdlib_reportUnimplementedInitializer("swtransparencyd.SWTransparencyXPCService", 40, "init()", 6, 0);
  __break(1u);
}

id sub_10005ADA8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10005AE34(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __SecTask *v5;
  __SecTask *v6;
  CFStringRef v7;
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  unint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t Strong;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char v39;
  _OWORD v40[2];
  audit_token_t token;

  v2 = v1;
  v4 = 0x6E776F6E6B6E75;
  objc_msgSend(a1, "auditToken");
  v5 = SecTaskCreateWithAuditToken(0, &token);
  if (v5)
  {
    v6 = v5;
    v7 = SecTaskCopySigningIdentifier(v5, 0);
    if (v7)
    {
      v8 = (__CFString *)v7;
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

      goto LABEL_6;
    }

  }
  v10 = 0xE700000000000000;
LABEL_6:
  *(_QWORD *)token.val = v4;
  *(_QWORD *)&token.val[2] = v10;
  swift_bridgeObjectRetain(v10);
  v11._countAndFlagsBits = 91;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  LODWORD(v40[0]) = objc_msgSend(a1, "processIdentifier");
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 93;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v16 = *(_QWORD *)token.val;
  v15 = *(_QWORD *)&token.val[2];
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(a1, "valueForEntitlement:", v17);

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)(v40, v18);
    swift_unknownObjectRelease(v18);
  }
  else
  {
    memset(v40, 0, sizeof(v40));
  }
  sub_100029C38((uint64_t)v40, (uint64_t)&token);
  if (*(_QWORD *)&token.val[6])
  {
    if ((swift_dynamicCast(&v39, &token, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
      && (v39 & 1) != 0)
    {
      if (qword_10012EC30 != -1)
        swift_once(&qword_10012EC30, sub_10005A60C);
      v19 = type metadata accessor for Logger(0);
      sub_100020804(v19, (uint64_t)qword_100131528);
      v20 = swift_bridgeObjectRetain(v15);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = v2;
        v24 = swift_slowAlloc(32, -1);
        *(_QWORD *)token.val = v24;
        *(_DWORD *)v23 = 136315138;
        swift_bridgeObjectRetain(v15);
        *(_QWORD *)&v40[0] = sub_1000230D0(v16, v15, (uint64_t *)&token);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, (char *)v40 + 8, v23 + 4, v23 + 12);
        swift_bridgeObjectRelease_n(v15, 3);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Accepting new connection from %s", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        v25 = v24;
        v2 = v38;
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v23, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v15, 2);
      }
      type metadata accessor for SWTransparencyXPCImplementation();
      v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_stateMachine);
      v34 = v2 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon;
      swift_beginAccess(v2 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_daemon, &token, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v34);
      v36 = *(_QWORD *)(v34 + 8);
      swift_retain(v33);
      v37 = sub_1000612AC(v33, Strong, v36, v4, v10, (int)objc_msgSend(a1, "processIdentifier"));
      objc_msgSend(a1, "setExportedInterface:", *(_QWORD *)(v2 + OBJC_IVAR____TtC15swtransparencyd24SWTransparencyXPCService_xpcInterface));
      objc_msgSend(a1, "setExportedObject:", v37);
      objc_msgSend(a1, "resume");

      return 1;
    }
  }
  else
  {
    sub_10005B3F0((uint64_t)&token);
  }
  swift_bridgeObjectRelease(v10);
  if (qword_10012EC30 != -1)
    swift_once(&qword_10012EC30, sub_10005A60C);
  v26 = type metadata accessor for Logger(0);
  sub_100020804(v26, (uint64_t)qword_100131528);
  v27 = swift_bridgeObjectRetain(v15);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    *(_QWORD *)token.val = v31;
    *(_DWORD *)v30 = 136315138;
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)&v40[0] = sub_1000230D0(v16, v15, (uint64_t *)&token);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, (char *)v40 + 8, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(v15, 3);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Rejecting connection from unauthorized client %s because it's missing the com.apple.transparency.privateCloudCompute entitlement", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v15, 2);
  }
  objc_msgSend(a1, "invalidate");
  return 0;
}

uint64_t sub_10005B3AC(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t type metadata accessor for SWTransparencyXPCService()
{
  return objc_opt_self(_TtC15swtransparencyd24SWTransparencyXPCService);
}

uint64_t sub_10005B3F0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001D138(&qword_100126F70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10005B430()
{
  return &qword_100127FB8;
}

uint64_t sub_10005B43C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_100127FB8, v2, 0, 0);
  v0 = qword_100127FB8;
  swift_bridgeObjectRetain(off_100127FC0);
  return v0;
}

uint64_t sub_10005B48C(uint64_t a1, void *a2)
{
  void *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_100127FB8, v6, 1, 0);
  v4 = off_100127FC0;
  qword_100127FB8 = a1;
  off_100127FC0 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10005B4E4(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_100127FB8, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10005B524(uint64_t a1)
{
  if ((a1 & (unint64_t)&_mh_execute_header) != 0)
    return a1 + 2;
  else
    return 1;
}

uint64_t sub_10005B538(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100060A8C();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10005B560(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100060A8C();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10005B588()
{
  unsigned int *v0;

  if (*((_BYTE *)v0 + 4) == 1)
    return *v0 + 2;
  else
    return 1;
}

uint64_t sub_10005B5A8()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012EC48 = result;
  return result;
}

uint64_t sub_10005B5D8()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012EC58 = result;
  return result;
}

uint64_t sub_10005B608()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012EC68 = result;
  return result;
}

uint64_t sub_10005B638()
{
  uint64_t result;

  type metadata accessor for AssociatedObjectKey();
  result = sub_10002070C();
  qword_10012EC78 = result;
  return result;
}

uint64_t sub_10005B668()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_100131540);
  sub_100020804(v0, (uint64_t)qword_100131540);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0xD000000000000016, 0x80000001000E3740);
}

uint64_t sub_10005B6E8()
{
  uint64_t v0;

  if (qword_10012EC80 != -1)
    swift_once(&qword_10012EC80, sub_10005B668);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_100131540);
}

uint64_t sub_10005B730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012EC80 != -1)
    swift_once(&qword_10012EC80, sub_10005B668);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131540);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t MilestoneRootsResponse.keyBag.getter()
{
  void *v0;
  const void *v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (qword_10012EC40 != -1)
    swift_once(&qword_10012EC40, sub_10005B5A8);
  v1 = (const void *)(qword_10012EC48 + 16);
  swift_beginAccess(qword_10012EC48 + 16, v7, 32, 0);
  v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess(v7);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100029C38((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10002E3EC(0, (unint64_t *)&qword_100126F78, &off_100105120);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v7, &qword_100126F70);
    return 0;
  }
}

void MilestoneRootsResponse.keyBag.setter(void *a1)
{
  sub_10002EBC4(a1, &qword_10012EC40, &qword_10012EC48, (uint64_t)sub_10005B5A8);
}

void (*MilestoneRootsResponse.keyBag.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = MilestoneRootsResponse.keyBag.getter();
  return sub_10005B924;
}

void sub_10005B924(uint64_t a1, char a2)
{
  sub_10002ECC0(a1, a2, &qword_10012EC40, &qword_10012EC48, (uint64_t)sub_10005B5A8);
}

double sub_10005B940@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v3;
  id v4;
  uint64_t v5;
  double result;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  if (qword_10012EC50 != -1)
    swift_once(&qword_10012EC50, sub_10005B5D8);
  v3 = (const void *)(qword_10012EC58 + 16);
  swift_beginAccess(qword_10012EC58 + 16, v7, 32, 0);
  v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess(v7);
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v7, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100029C38((uint64_t)v7, (uint64_t)v8);
  if (!v9)
  {
    sub_1000202F0((uint64_t)v8, &qword_100126F70);
    goto LABEL_10;
  }
  v5 = sub_10001D138(&qword_100126F80);
  if ((swift_dynamicCast(a1, v8, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
  {
LABEL_10:
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10005BA5C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  _QWORD v12[3];
  uint64_t v13;

  if (qword_10012EC50 != -1)
    swift_once(&qword_10012EC50, sub_10005B5D8);
  v3 = qword_10012EC58;
  sub_10002AC5C(a1, (uint64_t)v12, &qword_100126F88);
  v4 = v13;
  if (v13)
  {
    v5 = sub_100022F20(v12, v13);
    v6 = *(_QWORD *)(v4 - 8);
    __chkstk_darwin(v5);
    v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v8, v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    sub_100023CAC(v12);
  }
  else
  {
    v9 = 0;
  }
  swift_beginAccess(v3 + 16, v12, 32, 0);
  objc_setAssociatedObject(v1, (const void *)(v3 + 16), v9, (void *)1);
  swift_endAccess(v12);
  swift_unknownObjectRelease(v9);
  return sub_1000202F0(a1, &qword_100126F88);
}

void (*sub_10005BBB4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_10005B940((uint64_t)v3);
  return sub_10005BC00;
}

void sub_10005BC00(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*a1, (uint64_t)v2 + 40, &qword_100126F88);
    sub_10005BA5C((uint64_t)v2 + 40);
    sub_1000202F0((uint64_t)v2, &qword_100126F88);
  }
  else
  {
    sub_10005BA5C(*a1);
  }
  free(v2);
}

uint64_t MilestoneRootsResponse.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  if (qword_10012EC60 != -1)
    swift_once(&qword_10012EC60, sub_10005B608);
  v3 = (const void *)(qword_10012EC68 + 16);
  swift_beginAccess(qword_10012EC68 + 16, v9, 32, 0);
  v4 = objc_getAssociatedObject(v1, v3);
  swift_endAccess(v9);
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100029C38((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_1000202F0((uint64_t)v10, &qword_100126F70);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t MilestoneRootsResponse.receiptTime.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  _BYTE v13[24];

  v2 = v1;
  v4 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10012EC60 != -1)
    swift_once(&qword_10012EC60, sub_10005B608);
  v7 = qword_10012EC68;
  sub_10002AC5C(a1, (uint64_t)v6, &qword_100127710);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v6, v8);
  }
  swift_beginAccess(v7 + 16, v13, 32, 0);
  objc_setAssociatedObject(v2, (const void *)(v7 + 16), isa, (void *)0x303);
  swift_endAccess(v13);
  swift_unknownObjectRelease(isa);
  return sub_1000202F0(a1, &qword_100127710);
}

void (*MilestoneRootsResponse.receiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100127710) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  MilestoneRootsResponse.receiptTime.getter((uint64_t)v4);
  return sub_10005BF74;
}

void sub_10005BF74(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_10002AC5C(*(_QWORD *)(a1 + 16), (uint64_t)v2, &qword_100127710);
    MilestoneRootsResponse.receiptTime.setter((uint64_t)v2);
    sub_1000202F0((uint64_t)v3, &qword_100127710);
  }
  else
  {
    MilestoneRootsResponse.receiptTime.setter(*(_QWORD *)(a1 + 16));
  }
  free(v3);
  free(v2);
}

uint64_t MilestoneRootsResponse.configBag.getter()
{
  void *v0;
  const void *v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (qword_10012EC70 != -1)
    swift_once(&qword_10012EC70, sub_10005B638);
  v1 = (const void *)(qword_10012EC78 + 16);
  swift_beginAccess(qword_10012EC78 + 16, v7, 32, 0);
  v2 = objc_getAssociatedObject(v0, v1);
  swift_endAccess(v7);
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100029C38((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10002E3EC(0, &qword_100127E58, off_100105100);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_1000202F0((uint64_t)v7, &qword_100126F70);
    return 0;
  }
}

void MilestoneRootsResponse.configBag.setter(void *a1)
{
  sub_10002EBC4(a1, &qword_10012EC70, &qword_10012EC78, (uint64_t)sub_10005B638);
}

void (*MilestoneRootsResponse.configBag.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[3] = MilestoneRootsResponse.configBag.getter();
  return sub_10005C168;
}

void sub_10005C168(uint64_t a1, char a2)
{
  sub_10002ECC0(a1, a2, &qword_10012EC70, &qword_10012EC78, (uint64_t)sub_10005B638);
}

void sub_10005C184(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSString v25;
  double v26;
  double v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint8_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  os_log_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(id, uint64_t, unint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, _QWORD *, _BYTE, uint64_t, uint64_t);
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint8_t *v62;
  uint8_t *v63;
  uint64_t v64;
  os_log_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[3];
  uint64_t v78;
  _QWORD *v79;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v60 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v60 - v14;
  if (a2)
  {
    v72 = a1;
    v79 = v2;
    v16 = a2;
    v17 = sub_100053CB4();
    if (v3)
    {

    }
    else
    {
      v22 = v18;
      v70 = v17;
      v23 = MilestoneRootsResponse.configBag.getter();
      if (v23)
      {
        v71 = v22;
        v24 = (void *)v23;
        v25 = String._bridgeToObjectiveC()();
        objc_msgSend(v24, "doubleForKey:", v25);
        v27 = v26;

        if (v27 <= 0.0)
        {
          swift_bridgeObjectRelease(v71);
          v34 = sub_100060A38();
          v35 = swift_allocError(&type metadata for MilestoneRootsResponseError, v34, 0, 0);
          *(_DWORD *)v36 = 9;
          *(_BYTE *)(v36 + 4) = 1;
          swift_willThrow(v35);

        }
        else
        {
          v69 = v24;
          sub_10005B940((uint64_t)v77);
          if (v78)
          {
            sub_10002E424((uint64_t)v77, (uint64_t)&v73);
            sub_1000202F0((uint64_t)v77, &qword_100126F88);
            v66 = v76;
            v68 = v75;
            v67 = sub_100022F20(&v73, v75);
            v28 = sub_100053DAC();
            v29 = (*(uint64_t (**)(id, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 136))(v70, v71, v28, 5, 1, 1, 1, v68, v66);
            v30 = *(_QWORD *)(v29 + 16);
            LODWORD(v68) = v30 == 0;
            if (v30)
              v67 = *(_QWORD **)(v29 + 8 * v30 + 24);
            else
              v67 = 0;
            swift_bridgeObjectRelease(v29);
            sub_100023CAC(&v73);
          }
          else
          {
            sub_1000202F0((uint64_t)v77, &qword_100126F88);
            v67 = 0;
            LODWORD(v68) = 1;
          }
          if (qword_10012EC80 != -1)
            swift_once(&qword_10012EC80, sub_10005B668);
          v37 = type metadata accessor for Logger(0);
          v38 = sub_100020804(v37, (uint64_t)qword_100131540);
          v39 = Logger.logObject.getter(v38);
          v40 = static os_log_type_t.debug.getter();
          v41 = v40;
          if (os_log_type_enabled(v39, v40))
          {
            v65 = v39;
            LODWORD(v66) = v41;
            v42 = (uint8_t *)swift_slowAlloc(12, -1);
            v43 = swift_slowAlloc(32, -1);
            v64 = v43;
            *(_DWORD *)v42 = 136315138;
            v63 = v42 + 12;
            v77[0] = v43;
            v44 = v67;
            if ((_DWORD)v68)
              v44 = 0;
            v62 = v42 + 4;
            v61 = v42;
            v73 = (uint64_t)v44;
            v45 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
            v47 = v46;
            v73 = sub_1000230D0(v45, v46, v77);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v62, v63);
            swift_bridgeObjectRelease(v47);
            v48 = v65;
            _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v66, "GC: Keeping verified milestone revision %s", v42, 0xCu);
            v49 = v64;
            swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v49, -1, -1);
            swift_slowDealloc(v61, -1, -1);

          }
          else
          {

          }
          v66 = *(_QWORD *)(v7 + 16);
          ((void (*)(char *, uint64_t, uint64_t))v66)(v13, v72, v6);
          Date.init(timeInterval:since:)(v13, v27 * -86400.0);
          sub_10005B940((uint64_t)v77);
          v50 = v71;
          if (v78)
          {
            sub_10002E424((uint64_t)v77, (uint64_t)&v73);
            sub_1000202F0((uint64_t)v77, &qword_100126F88);
            v51 = v76;
            v64 = v75;
            v65 = (os_log_t)sub_100022F20(&v73, v75);
            v52 = sub_100053DAC();
            v57 = *(void (**)(id, uint64_t, unint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, _QWORD *, _BYTE, uint64_t, uint64_t))(v51 + 88);
            v59 = v51;
            v50 = v71;
            v57(v70, v71, v52, 5, v15, 1, 1, 1, v67, v68, v64, v59);
            sub_100023CAC(&v73);
          }
          else
          {
            sub_1000202F0((uint64_t)v77, &qword_100126F88);
          }
          ((void (*)(char *, uint64_t, uint64_t))v66)(v13, v72, v6);
          Date.init(timeInterval:since:)(v13, v27 * -172800.0);
          sub_10005B940((uint64_t)v77);
          if (v78)
          {
            sub_10002E424((uint64_t)v77, (uint64_t)&v73);
            sub_1000202F0((uint64_t)v77, &qword_100126F88);
            v54 = v75;
            v53 = v76;
            v79 = sub_100022F20(&v73, v75);
            v55 = sub_100053DAC();
            (*(void (**)(id, uint64_t, unint64_t, uint64_t, char *, uint64_t, uint64_t))(v53 + 96))(v70, v71, v55, 5, v10, v54, v53);
            swift_bridgeObjectRelease(v71);

            v56 = *(void (**)(char *, uint64_t))(v7 + 8);
            v56(v10, v6);
            v56(v15, v6);
            sub_100023CAC(&v73);
          }
          else
          {
            swift_bridgeObjectRelease(v50);

            v58 = *(void (**)(char *, uint64_t))(v7 + 8);
            v58(v10, v6);
            v58(v15, v6);
            sub_1000202F0((uint64_t)v77, &qword_100126F88);
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease(v22);
        v31 = sub_100060A38();
        v32 = swift_allocError(&type metadata for MilestoneRootsResponseError, v31, 0, 0);
        *(_DWORD *)v33 = 9;
        *(_BYTE *)(v33 + 4) = 1;
        swift_willThrow(v32);

      }
    }
  }
  else
  {
    v19 = sub_100060A38();
    v20 = swift_allocError(&type metadata for MilestoneRootsResponseError, v19, 0, 0);
    *(_DWORD *)v21 = 1;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow(v20);
  }
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MilestoneRootsResponse.isNewEpoch()()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v1 = (void *)MilestoneRootsResponse.keyBag.getter();
  if (!v1)
  {
    v20 = sub_10002B05C();
    v21 = swift_allocError(&type metadata for ATLogProofsError, v20, 0, 0);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = 0;
    swift_willThrow(v21);
    return v0 & 1;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "patLogBeginningMs");
  v4 = objc_msgSend(v2, "tltLogBeginningMs");
  if (objc_msgSend(v0, "hasTltInclusionProof"))
  {
    v5 = objc_msgSend(v0, "tltInclusionProof");
    if (v5)
    {
      v6 = v5;
      sub_100020A70(v5, (unint64_t)v4);
      if ((v9 & 0x100) == 0)
      {
        v10 = v8;
        v11 = v9;
        v41 = v7;
        if (qword_10012EC80 != -1)
          swift_once(&qword_10012EC80, sub_10005B668);
        v12 = type metadata accessor for Logger(0);
        v13 = sub_100020804(v12, (uint64_t)qword_100131540);
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc(12, -1);
          v39 = swift_slowAlloc(32, -1);
          v47 = v39;
          *(_DWORD *)v16 = 136315138;
          v44 = v41;
          v45 = v10;
          v46 = v11 & 1;
          v17 = sub_1000536D0();
          v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for VerifiableTypeHelpers.LogEntryEpochStatus, v17);
          v0 = (void *)v19;
          v43 = sub_1000230D0(v18, v19, &v47);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v16 + 4, v16 + 12);
          swift_bridgeObjectRelease(v0);
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Detected new TLT epoch: %s", v16, 0xCu);
          LOBYTE(v0) = 1;
          swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        else
        {

          LOBYTE(v0) = 1;
        }
        return v0 & 1;
      }

    }
  }
  if (!objc_msgSend(v0, "hasPatInclusionProof")
    || (v23 = objc_msgSend(v0, "patInclusionProof")) == 0)
  {
LABEL_19:

    LOBYTE(v0) = 0;
    return v0 & 1;
  }
  v24 = v23;
  sub_100020A70(v23, (unint64_t)v3);
  if ((v27 & 0x100) != 0)
  {

    goto LABEL_19;
  }
  v28 = v26;
  v29 = v27;
  v42 = v25;
  if (qword_10012EC80 != -1)
    swift_once(&qword_10012EC80, sub_10005B668);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100020804(v30, (uint64_t)qword_100131540);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v47 = v40;
    *(_DWORD *)v34 = 136315138;
    v44 = v42;
    v45 = v28;
    v46 = v29 & 1;
    v35 = sub_1000536D0();
    v36 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for VerifiableTypeHelpers.LogEntryEpochStatus, v35);
    v0 = (void *)v37;
    v43 = sub_1000230D0(v36, v37, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease(v0);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Detected new PAT epoch: %s", v34, 0xCu);
    LOBYTE(v0) = 1;
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    LOBYTE(v0) = 1;
  }
  return v0 & 1;
}

uint64_t sub_10005CD34()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  __int128 v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  const void *v48;
  id v49;
  id v50;
  uint64_t v51;
  const void *v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  id v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  id v89;
  void *v90;
  uint64_t v91;
  _OWORD v92[2];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;

  v3 = v1;
  v4 = v0;
  v5 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v5);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MilestoneRootsResponse.keyBag.getter();
  if (!v8)
  {
    v19 = sub_100060A38();
    v20 = swift_allocError(&type metadata for MilestoneRootsResponseError, v19, 0, 0);
    *(_DWORD *)v21 = 0;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow(v20);
    return v2;
  }
  v9 = (void *)v8;
  v10 = objc_msgSend(v0, "milestonesArray");
  if (!v10
    || (v11 = v10,
        *(_QWORD *)&v95 = 0,
        v12 = sub_10002E3EC(0, &qword_100126FC8, &off_100104FC8),
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v11, &v95, v12),
        v11,
        (v13 = v95) == 0))
  {
    v16 = sub_100060A38();
    v17 = swift_allocError(&type metadata for MilestoneRootsResponseError, v16, 0, 0);
    *(_DWORD *)v18 = 2;
    *(_BYTE *)(v18 + 4) = 1;
    swift_willThrow(v17);

    return v2;
  }
  v14 = (unint64_t)v95 >> 62;
  if ((unint64_t)v95 >> 62)
  {
LABEL_69:
    if (v13 < 0)
      v81 = v13;
    else
      v81 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v15 = _CocoaArrayWrapper.endIndex.getter(v81);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v15 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v90 = (void *)v13;
  v88 = v4;
  if (v15)
  {
    v2 = 2;
  }
  else
  {
    if (qword_10012EC80 != -1)
      swift_once(&qword_10012EC80, sub_10005B668);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100020804(v23, (uint64_t)qword_100131540);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No new milestones. Verifying inclusion only.", v27, 2u);
      v28 = v27;
      v4 = v88;
      swift_slowDealloc(v28, -1, -1);
    }

    v2 = 1;
    v13 = (uint64_t)v90;
  }
  result = (uint64_t)objc_msgSend(v4, "startSlh", (_QWORD)v82, *((_QWORD *)&v82 + 1));
  if (result)
  {
    v29 = (void *)result;
    v30 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
    v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(v30), "signedTypeWithObject:", v29);

    v31 = sub_10001D138(&qword_100127F08);
    v32 = swift_allocObject(v31, 40, 7);
    *(_OWORD *)(v32 + 16) = xmmword_1000DDBE0;
    *(_QWORD *)(v32 + 32) = v4;
    *(_QWORD *)&v95 = v32;
    specialized Array._endMutation()(v32);
    v98 = v95;
    if (v14)
    {
      if (v13 < 0)
        v64 = v13;
      else
        v64 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v65 = v4;
      v33 = _CocoaArrayWrapper.endIndex.getter(v64);
      if (v33)
      {
LABEL_19:
        v91 = v3;
        v83 = v15;
        v3 = 0;
        v87 = v13 & 0xC000000000000001;
        *(_QWORD *)&v35 = 134218240;
        v82 = v35;
        v84 = (char *)&type metadata for Any + 8;
        v85 = v33;
        while (1)
        {
          if (v87)
            v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v13);
          else
            v36 = *(id *)(v13 + 8 * v3 + 32);
          v37 = v36;
          v14 = v3 + 1;
          if (__OFADD__(v3, 1))
          {
            __break(1u);
            goto LABEL_69;
          }
          if (qword_10012EC80 != -1)
            swift_once(&qword_10012EC80, sub_10005B668);
          v38 = type metadata accessor for Logger(0);
          v39 = sub_100020804(v38, (uint64_t)qword_100131540);
          v40 = swift_bridgeObjectRetain(v13);
          v86 = v39;
          v41 = Logger.logObject.getter(v40);
          v42 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v41, v42))
          {
            v43 = v9;
            v44 = swift_slowAlloc(22, -1);
            *(_DWORD *)v44 = v82;
            *(_QWORD *)(v44 + 4) = v3;
            *(_WORD *)(v44 + 12) = 2048;
            *(_QWORD *)(v44 + 14) = v83;
            swift_bridgeObjectRelease(v90);
            _os_log_impl((void *)&_mh_execute_header, v41, v42, "Verifying milestone consistency proof %ld of %ld", (uint8_t *)v44, 0x16u);
            v45 = v44;
            v9 = v43;
            v13 = (uint64_t)v90;
            swift_slowDealloc(v45, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease(v13);
          }
          v46 = objc_msgSend(v9, "appSthKeyStore", (_QWORD)v82, *((_QWORD *)&v82 + 1));
          v47 = objc_msgSend(objc_allocWithZone((Class)TransparencyConsistencyProofVerifier), "initWithTrustedKeyStore:", v46);

          MilestoneConsistency.verifier.setter(v47);
          v89 = v4;
          MilestoneConsistency.startSlh.setter(v4);
          if (qword_10012EC50 != -1)
            swift_once(&qword_10012EC50, sub_10005B5D8);
          v48 = (const void *)(qword_10012EC58 + 16);
          swift_beginAccess(qword_10012EC58 + 16, &v95, 32, 0);
          v49 = v88;
          v50 = objc_getAssociatedObject(v88, v48);
          swift_endAccess(&v95);
          v2 = (uint64_t)v7;
          if (v50)
          {
            _bridgeAnyObjectToAny(_:)(v92, v50);
            swift_unknownObjectRelease(v50);
          }
          else
          {
            memset(v92, 0, sizeof(v92));
          }
          sub_100029C38((uint64_t)v92, (uint64_t)&v93);
          if (*((_QWORD *)&v94 + 1))
          {
            v51 = sub_10001D138(&qword_100126F80);
            if ((swift_dynamicCast(&v95, &v93, (char *)&type metadata for Any + 8, v51, 6) & 1) == 0)
            {
              v97 = 0;
              v95 = 0u;
              v96 = 0u;
            }
          }
          else
          {
            sub_1000202F0((uint64_t)&v93, &qword_100126F70);
            v95 = 0u;
            v96 = 0u;
            v97 = 0;
          }
          sub_10002EF04((uint64_t)&v95);
          if (qword_10012EC60 != -1)
            swift_once(&qword_10012EC60, sub_10005B608);
          v52 = (const void *)(qword_10012EC68 + 16);
          swift_beginAccess(qword_10012EC68 + 16, &v93, 32, 0);
          v53 = objc_getAssociatedObject(v49, v52);
          swift_endAccess(&v93);
          if (v53)
          {
            _bridgeAnyObjectToAny(_:)(&v93, v53);
            swift_unknownObjectRelease(v53);
          }
          else
          {
            v93 = 0u;
            v94 = 0u;
          }
          sub_100029C38((uint64_t)&v93, (uint64_t)&v95);
          if (*((_QWORD *)&v96 + 1))
          {
            v54 = type metadata accessor for Date(0);
            v55 = swift_dynamicCast(v7, &v95, v84, v54, 6);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v7, v55 ^ 1u, 1, v54);
          }
          else
          {
            sub_1000202F0((uint64_t)&v95, &qword_100126F70);
            v56 = type metadata accessor for Date(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v7, 1, 1, v56);
          }
          MilestoneConsistency.receiptTime.setter((uint64_t)v7);
          v57 = v91;
          v58 = MilestoneConsistency.verify()();
          v91 = v57;
          if (v57)
          {
            swift_bridgeObjectRelease(v13);
            swift_bridgeObjectRelease(v98);
            v66 = v91;
            swift_errorRetain(v91);
            swift_bridgeObjectRetain(v13);
            v67 = swift_errorRetain(v66);
            v68 = Logger.logObject.getter(v67);
            v69 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v68, v69))
            {
              v70 = v13;
              v71 = swift_slowAlloc(32, -1);
              v2 = swift_slowAlloc(8, -1);
              *(_DWORD *)v71 = 134218498;
              *(_QWORD *)&v95 = v3;
              v90 = v9;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v71 + 4, v71 + 12);
              *(_WORD *)(v71 + 12) = 2048;
              swift_bridgeObjectRelease(v70);
              *(_QWORD *)&v95 = v83;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v71 + 14, v71 + 22);
              swift_bridgeObjectRelease(v70);
              *(_WORD *)(v71 + 22) = 2112;
              swift_errorRetain(v66);
              v72 = _swift_stdlib_bridgeErrorToNSError(v66);
              *(_QWORD *)&v95 = v72;
              v9 = v90;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v71 + 24, v71 + 32);
              *(_QWORD *)v2 = v72;
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v68, v69, "Milestone consistency proof %ld of %ld failed: %@", (uint8_t *)v71, 0x20u);
              v73 = sub_10001D138(&qword_100127730);
              swift_arrayDestroy(v2, 1, v73);
              swift_slowDealloc(v2, -1, -1);
              swift_slowDealloc(v71, -1, -1);
            }
            else
            {
              swift_bridgeObjectRelease_n(v13, 2);
              swift_errorRelease();
              swift_errorRelease();
            }

            goto LABEL_66;
          }
          v2 = (uint64_t)v58;
          if (v58 != (char *)1)
            break;
          v59 = MilestoneConsistency.endSlh.getter();

          if (!v59)
          {
            swift_bridgeObjectRelease_n(v13, 2);
            swift_bridgeObjectRelease(v98);
            v78 = sub_100060A38();
            v79 = swift_allocError(&type metadata for MilestoneRootsResponseError, v78, 0, 0);
            *(_DWORD *)v80 = 4;
            *(_BYTE *)(v80 + 4) = 1;
LABEL_66:
            swift_willThrow(v79);

            return v2;
          }
          result = (uint64_t)MilestoneConsistency.endSlh.getter();
          if (!result)
          {
            __break(1u);
            goto LABEL_74;
          }
          v60 = (void *)result;

          v4 = v60;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v62 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v61 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v62 >= v61 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
          v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v4);
          specialized Array._endMutation()(v63);

          ++v3;
          v13 = (uint64_t)v90;
          if (v14 == v85)
          {

            swift_bridgeObjectRelease_n(v13, 2);
            return 1;
          }
        }
        v74 = Logger.logObject.getter(v58);
        v75 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v74, v75))
        {
          v76 = swift_slowAlloc(22, -1);
          *(_DWORD *)v76 = v82;
          *(_QWORD *)&v95 = v3;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v76 + 4, v76 + 12);
          *(_WORD *)(v76 + 12) = 2048;
          v77 = v90;
          swift_bridgeObjectRelease(v90);
          *(_QWORD *)&v95 = v83;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v76 + 14, v76 + 22);
          swift_bridgeObjectRelease(v77);
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "Milestone consistency proof %ld of %ld failed", (uint8_t *)v76, 0x16u);
          swift_slowDealloc(v76, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v90, 2);
        }
        return v2;
      }
    }
    else
    {
      v33 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v13);
      v34 = v4;
      if (v33)
        goto LABEL_19;
    }

    swift_bridgeObjectRelease_n(v13, 2);
    return v2;
  }
LABEL_74:
  __break(1u);
  return result;
}

uint64_t sub_10005D894(unint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint8_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  void (**v40)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint8_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint8_t *v53;
  uint8_t *v54;
  void *v55;
  uint8_t *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  void *ObjCClassFromMetadata;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  Class isa;
  uint8_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  unint64_t v75;
  unint64_t v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  id v87;
  void *v88;
  id v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  id v114;
  uint8_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[4];
  int v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint8_t *v124;
  _QWORD *v125;
  void (**v126)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v127;
  void *v128;
  unint64_t v129;
  id v130;
  id v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void (**v139)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v140[7];
  _OWORD v141[3];
  uint64_t v142;
  _QWORD v143[7];

  v3 = v2;
  v4 = v1;
  v6 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v6);
  v8 = &v119[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v119[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MilestoneRootsResponse.keyBag.getter();
  if (!v13)
  {
    v24 = sub_100060A38();
    v25 = swift_allocError(&type metadata for MilestoneRootsResponseError, v24, 0, 0);
    *(_DWORD *)v26 = 0;
    *(_BYTE *)(v26 + 4) = 1;
    swift_willThrow(v25);
    return v9;
  }
  v14 = (void *)v13;
  if (!objc_msgSend(v4, "hasPatInclusionProof")
    || (v15 = objc_msgSend(v4, "patInclusionProof")) == 0)
  {
    v21 = sub_100060A38();
    v22 = swift_allocError(&type metadata for MilestoneRootsResponseError, v21, 0, 0);
    *(_DWORD *)v23 = 3;
    *(_BYTE *)(v23 + 4) = 1;
    swift_willThrow(v22);

    return v9;
  }
  v127 = a1;
  v130 = v15;
  v131 = v14;
  v16 = objc_msgSend(v15, "slh");
  if (!v16)
    goto LABEL_80;
  v17 = v16;
  v18 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "signedTypeWithObject:", v17);

  sub_10005B940((uint64_t)&v132);
  if (*((_QWORD *)&v133 + 1))
  {
    v128 = v4;
    sub_10002E424((uint64_t)&v132, (uint64_t)&v136);
    sub_1000202F0((uint64_t)&v132, &qword_100126F88);
    v20 = v138;
    v126 = v139;
    v125 = sub_100022F20(&v136, (uint64_t)v138);
    sub_100053F40((uint64_t)v140);
    if (v2)
    {

      sub_100023CAC(&v136);
      return v9;
    }
    v123 = v20;
    v129 = (unint64_t)v19;
    MilestoneRootsResponse.receiptTime.getter((uint64_t)v8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      static Date.now.getter();
      sub_1000202F0((uint64_t)v8, &qword_100127710);
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v8, v9);
    }
    v32 = objc_msgSend((id)v129, "data");
    v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v124 = v34;

    v35 = sub_100054114();
    v4 = v128;
    v36 = v33;
    v37 = v33;
    v38 = v124;
    ((void (**)(_QWORD *, _BYTE *, uint64_t, uint8_t *, unint64_t, id))v126)[3](v140, v12, v37, v124, v35, v123);
    v3 = 0;
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    sub_100022F44(v36, (unint64_t)v38);
    sub_10002300C(v140);
    sub_100023CAC(&v136);
  }
  else
  {
    v129 = (unint64_t)v19;
    sub_1000202F0((uint64_t)&v132, &qword_100126F88);
  }
  v28 = v131;
  v29 = objc_msgSend(v131, "appSthKeyStore");
  v30 = objc_msgSend(v29, "signatureVerifier");

  v31 = v129;
  objc_msgSend((id)v129, "setVerifier:", v30);
  sub_100053F40((uint64_t)v141);
  if (v3)
  {

    return v9;
  }
  v126 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v30;
  v9 = (uint64_t)sub_10004BAB0();
  sub_10005B940((uint64_t)&v132);
  if (*((_QWORD *)&v133 + 1))
  {
    sub_10002E424((uint64_t)&v132, (uint64_t)&v136);
    sub_1000202F0((uint64_t)&v132, &qword_100126F88);
    v39 = (uint64_t)v138;
    v40 = v139;
    sub_100022F20(&v136, (uint64_t)v138);
    ((void (*)(_OWORD *, uint64_t, uint64_t, void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))v40[6])(v141, v9, v39, v40);
    sub_100023CAC(&v136);
  }
  else
  {
    sub_1000202F0((uint64_t)&v132, &qword_100126F88);
  }
  if (v9 != 1)
  {
    sub_10002300C(v141);
    v57 = v130;
    v56 = (uint8_t *)v131;
LABEL_30:

    return v9;
  }
  if (qword_10012EC80 != -1)
    swift_once(&qword_10012EC80, sub_10005B668);
  v41 = type metadata accessor for Logger(0);
  v42 = sub_100020804(v41, (uint64_t)qword_100131540);
  sub_10002304C(v141);
  v43 = sub_10002304C(v141);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    v128 = (void *)v47;
    v124 = v46;
    v125 = (_QWORD *)v42;
    *(_DWORD *)v46 = 136315138;
    v48 = v46 + 12;
    v123 = v46 + 4;
    v132 = v141[0];
    v133 = v141[1];
    v134 = v141[2];
    v135 = v142;
    v136 = v47;
    v49 = sub_100023710();
    v50 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v49);
    v52 = v51;
    *(_QWORD *)&v132 = sub_1000230D0(v50, v51, &v136);
    v53 = v48;
    v42 = (uint64_t)v125;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, (char *)&v132 + 8, v123, v53);
    swift_bridgeObjectRelease(v52);
    sub_10002300C(v141);
    sub_10002300C(v141);
    v54 = v124;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Verified signature for %s", v124, 0xCu);
    v55 = v128;
    swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }
  else
  {
    sub_10002300C(v141);
    sub_10002300C(v141);
  }

  v58 = v131;
  v59 = objc_msgSend(v131, "appSthKeyStore");
  v60 = objc_msgSend(objc_allocWithZone((Class)TransparencyLogEntryVerifier), "initWithTrustedKeyStore:", v59);

  v61 = v130;
  objc_msgSend(v130, "setVerifier:", v60);

  v9 = (uint64_t)sub_10004BAB0();
  if (objc_msgSend(v61, "nodeType") != 1)
  {
    v82 = sub_100060A38();
    v83 = swift_allocError(&type metadata for MilestoneRootsResponseError, v82, 0, 0);
    *(_DWORD *)v84 = 7;
    *(_BYTE *)(v84 + 4) = 1;
    swift_willThrow(v83);
    sub_10002300C(v141);

LABEL_21:
LABEL_22:

    return v9;
  }
  v125 = (_QWORD *)v42;
  v62 = objc_msgSend(v61, "nodeBytes");
  if (!v62)
    goto LABEL_81;
  v63 = v62;
  v64 = sub_10002E3EC(0, &qword_100127F00, &off_1001050B8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v64);
  v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v63);
  v68 = v67;

  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100022F44(v66, v68);
  *(_QWORD *)&v132 = 0;
  v70 = (uint8_t *)objc_msgSend(ObjCClassFromMetadata, "parseFromData:error:", isa, &v132);

  v71 = (void *)v132;
  if (!v70)
  {
    v85 = (id)v132;
    _convertNSErrorToError(_:)(v71);

    swift_willThrow(v86);
    sub_10002300C(v141);

    goto LABEL_22;
  }
  v124 = v70;
  v72 = v127;
  if (v127 >> 62)
    goto LABEL_67;
  v73 = *(_QWORD *)((v127 & 0xFFFFFFFFFFFFF8) + 0x10);
  v74 = (id)v132;
  swift_bridgeObjectRetain(v72);
  if (!v73)
  {
LABEL_71:
    v94 = 0x206E776F6E6B6E75;
    swift_bridgeObjectRelease(v72);
    v93 = 0;
    v96 = 0xEB00000000686C73;
LABEL_72:
    v106 = swift_bridgeObjectRetain(v96);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.error.getter();
    v9 = v108;
    if (os_log_type_enabled(v107, v108))
    {
      v129 = v94;
      v109 = (uint8_t *)swift_slowAlloc(12, -1);
      v110 = swift_slowAlloc(32, -1);
      v123 = v93;
      v111 = v110;
      *(_QWORD *)&v132 = v110;
      *(_DWORD *)v109 = 136315138;
      swift_bridgeObjectRetain(v96);
      v136 = sub_1000230D0(v129, v96, (uint64_t *)&v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v109 + 4, v109 + 12);
      swift_bridgeObjectRelease_n(v96, 3);
      _os_log_impl((void *)&_mh_execute_header, v107, (os_log_type_t)v9, "Failed to verify inclusion proof for %s", v109, 0xCu);
      swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
      v112 = v111;
      v93 = v123;
      swift_slowDealloc(v112, -1, -1);
      swift_slowDealloc(v109, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v96, 2);
    }
    v114 = v130;
    v113 = v131;
    v115 = v124;
    v116 = sub_100060A38();
    v117 = swift_allocError(&type metadata for MilestoneRootsResponseError, v116, 0, 0);
    *(_DWORD *)v118 = 5;
    *(_BYTE *)(v118 + 4) = 1;
    swift_willThrow(v117);

    sub_10002300C(v141);
    goto LABEL_21;
  }
  while (1)
  {
    v75 = v73 - 1;
    if (__OFSUB__(v73, 1))
    {
      __break(1u);
LABEL_77:
      v76 = v127;
      v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v75, v127);
      goto LABEL_42;
    }
    v68 = v72 & 0xC000000000000001;
    if ((v72 & 0xC000000000000001) != 0)
      goto LABEL_77;
    if ((v75 & 0x8000000000000000) != 0)
      break;
    v76 = v127;
    if (v75 >= *(_QWORD *)((v127 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_79;
    v77 = *(id *)(v127 + 8 * v75 + 32);
LABEL_42:
    v78 = v77;
    swift_bridgeObjectRelease(v76);
    v123 = v78;
    if ((-[uint8_t hasObjectMapHead](v124, "hasObjectMapHead") & 1) == 0)
      goto LABEL_57;
    v79 = objc_msgSend(v123, "logHead");
    if (v79)
    {
      v80 = v79;
      v122 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v79);
      v129 = v81;

    }
    else
    {
      v122 = 0;
      v129 = 0xF000000000000000;
    }
    v87 = -[uint8_t objectMapHead](v124, "objectMapHead");
    if (!v87)
      goto LABEL_82;
    v88 = v87;
    v89 = objc_msgSend(v87, "object");

    if (v89)
    {
      v121 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v89);
      v91 = v90;

      v92 = v129;
      if (v129 >> 60 == 15)
      {
        if (v91 >> 60 != 15)
          goto LABEL_56;
      }
      else
      {
        v128 = v4;
        if (v91 >> 60 == 15)
          goto LABEL_56;
        v97 = v122;
        v98 = v129;
        sub_100049CB0(v122, v129);
        v99 = v97;
        v100 = v121;
        sub_10002395C(v99, v98);
        v120 = v101;
        sub_100027420(v100, v91);
        v102 = v122;
        sub_100027420(v122, v98);
        sub_100027420(v102, v98);
        v4 = v128;
        if ((v120 & 1) == 0)
          goto LABEL_57;
      }
    }
    else
    {
      v92 = v129;
      if (v129 >> 60 != 15)
      {
        v121 = 0;
        v91 = 0xF000000000000000;
LABEL_56:
        sub_100027420(v122, v92);
        sub_100027420(v121, v91);
LABEL_57:
        v93 = v123;
        sub_100053F40((uint64_t)v143);

        v94 = KTSWDB.STHKey.description.getter();
        v96 = v95;
        sub_10002300C(v143);
        goto LABEL_72;
      }
    }
    v129 = v31;
    swift_bridgeObjectRetain(v127);
    v31 = 4;
    while (1)
    {
      v103 = v68
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31 - 4, v127)
           : *(id *)(v127 + 8 * v31);
      v71 = v103;
      v72 = v31 - 3;
      if (__OFADD__(v31 - 4, 1))
        break;
      *(_QWORD *)&v132 = v103;
      sub_100060AD0((uint64_t)&v132, (uint64_t)v4, v9);

      ++v31;
      if (v72 == v73)
      {
        swift_bridgeObjectRelease(v127);
        sub_10002300C(v141);

        v57 = v123;
        v56 = v124;
        v126 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v123;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_67:
    if (v72 < 0)
      v104 = v72;
    else
      v104 = v72 & 0xFFFFFFFFFFFFFF8;
    v105 = v71;
    swift_bridgeObjectRetain(v72);
    v73 = _CocoaArrayWrapper.endIndex.getter(v104);
    if (!v73)
      goto LABEL_71;
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  result = sub_100027420(v122, v129);
  __break(1u);
  return result;
}

uint64_t sub_10005EB4C(void *a1)
{
  unint64_t v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint8_t *v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  void *ObjCClassFromMetadata;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  Class isa;
  id v81;
  uint64_t v82;
  id v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  unsigned int v92;
  id v93;
  void *v94;
  unint64_t v95;
  id v96;
  void *v97;
  id v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  _QWORD *v117;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  uint8_t *v129;
  unint64_t v130;
  uint64_t v131;
  id v132;
  id v133;
  id v134;
  id v135;
  unint64_t v136;
  id v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142[3];
  uint64_t v143;
  uint64_t v144;
  _QWORD v145[7];
  _OWORD v146[3];
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;

  v4 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v4);
  v6 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MilestoneRootsResponse.keyBag.getter();
  if (!v11)
  {
    v25 = sub_100060A38();
    v26 = swift_allocError(&type metadata for MilestoneRootsResponseError, v25, 0, 0);
    *(_DWORD *)v27 = 0;
    *(_BYTE *)(v27 + 4) = 1;
    swift_willThrow(v26);
    return v7;
  }
  v12 = (void *)v11;
  if (!objc_msgSend((id)v1, "hasTltInclusionProof")
    || (v13 = objc_msgSend((id)v1, "tltInclusionProof")) == 0)
  {
    v22 = sub_100060A38();
    v23 = swift_allocError(&type metadata for MilestoneRootsResponseError, v22, 0, 0);
    *(_DWORD *)v24 = 3;
    *(_BYTE *)(v24 + 4) = 1;
    swift_willThrow(v23);

    return v7;
  }
  v132 = a1;
  v136 = v1;
  v137 = v2;
  v135 = v12;
  v14 = v13;
  v15 = objc_msgSend(v13, "slh");
  if (!v15)
  {
    __break(1u);
    goto LABEL_75;
  }
  v16 = v15;
  v17 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
  v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "signedTypeWithObject:", v16);

  sub_10005B940((uint64_t)&v138);
  if (*((_QWORD *)&v139 + 1))
  {
    v133 = v14;
    sub_10002E424((uint64_t)&v138, (uint64_t)v142);
    sub_1000202F0((uint64_t)&v138, &qword_100126F88);
    v19 = v143;
    v131 = v144;
    v20 = (uint8_t *)sub_100022F20(v142, v143);
    v21 = v137;
    sub_100053F40((uint64_t)v145);
    v137 = v21;
    if (v21)
    {

      sub_100023CAC(v142);
      return v7;
    }
    v129 = v20;
    v134 = v18;
    MilestoneRootsResponse.receiptTime.getter((uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      static Date.now.getter();
      sub_1000202F0((uint64_t)v6, &qword_100127710);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    }
    v36 = v134;
    v37 = objc_msgSend(v134, "data");
    v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v130 = v39;

    v40 = v137;
    v41 = sub_100054114();
    if (v40)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      sub_100022F44(v38, v130);
      sub_10002300C(v145);

      sub_100023CAC(v142);
      return v7;
    }
    (*(void (**)(_QWORD *, char *, uint64_t, unint64_t, unint64_t, uint64_t))(v131 + 24))(v145, v10, v38, v130, v41, v19);
    v30 = 0;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_100022F44(v38, v130);
    sub_10002300C(v145);
    sub_100023CAC(v142);
    v14 = v133;
    v29 = v135;
  }
  else
  {
    v134 = v18;
    sub_1000202F0((uint64_t)&v138, &qword_100126F88);
    v29 = v135;
    v30 = v137;
  }
  v31 = v29;
  v32 = objc_msgSend(v29, "tltKeyStore");
  v33 = objc_msgSend(v32, "signatureVerifier");

  v34 = v134;
  objc_msgSend(v134, "setVerifier:", v33);
  sub_100053F40((uint64_t)v146);
  if (v30)
  {

    return v7;
  }
  v134 = v34;
  v35 = sub_10004BAB0();
  v137 = 0;
  v133 = v14;
  v7 = (uint64_t)v35;
  if (qword_10012EC80 != -1)
    swift_once(&qword_10012EC80, sub_10005B668);
  v42 = type metadata accessor for Logger(0);
  v43 = sub_100020804(v42, (uint64_t)qword_100131540);
  sub_10002304C(v146);
  v44 = sub_10002304C(v146);
  v131 = v43;
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v130 = v48;
    *(_DWORD *)v47 = 136315138;
    v129 = v47 + 4;
    v138 = v146[0];
    v139 = v146[1];
    v140 = v146[2];
    v141 = v147;
    v142[0] = v48;
    v49 = sub_100023710();
    v50 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v49);
    v52 = v51;
    *(_QWORD *)&v138 = sub_1000230D0(v50, v51, v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, (char *)&v138 + 8, v129, v47 + 12);
    swift_bridgeObjectRelease(v52);
    sub_10002300C(v146);
    sub_10002300C(v146);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Verified signature for %s", v47, 0xCu);
    v53 = v130;
    swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {
    sub_10002300C(v146);
    sub_10002300C(v146);
  }

  sub_10005B940((uint64_t)&v138);
  v54 = v133;
  if (*((_QWORD *)&v139 + 1))
  {
    sub_10002E424((uint64_t)&v138, (uint64_t)v142);
    sub_1000202F0((uint64_t)&v138, &qword_100126F88);
    v55 = v143;
    v56 = v144;
    sub_100022F20(v142, v143);
    v57 = v137;
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v56 + 48))(v146, v7, v55, v56);
    if (v57)
    {
      swift_errorRelease();
      sub_100023CAC(v142);
      v137 = 0;
    }
    else
    {
      v137 = 0;
      sub_100023CAC(v142);
    }
  }
  else
  {
    sub_1000202F0((uint64_t)&v138, &qword_100126F88);
  }
  sub_10005B940((uint64_t)&v138);
  if (*((_QWORD *)&v139 + 1))
  {
    sub_10002E424((uint64_t)&v138, (uint64_t)v142);
    sub_1000202F0((uint64_t)&v138, &qword_100126F88);
    v58 = v143;
    v59 = v144;
    sub_100022F20(v142, v143);
    v60 = v137;
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v59 + 40))(v146, 1, v58, v59);
    if (v60)
    {
      swift_errorRelease();
      sub_100023CAC(v142);
      v137 = 0;
    }
    else
    {
      v137 = 0;
      sub_100023CAC(v142);
    }
  }
  else
  {
    sub_1000202F0((uint64_t)&v138, &qword_100126F88);
  }
  v61 = v135;
  if (v7 != 1)
  {
    sub_10002300C(v146);

    return v7;
  }
  v62 = objc_msgSend(v135, "tltKeyStore");
  v6 = (char *)objc_msgSend(objc_allocWithZone((Class)TransparencyLogEntryVerifier), "initWithTrustedKeyStore:", v62);

  objc_msgSend(v54, "setVerifier:", v6);
  v1 = (unint64_t)v54;
  v63 = v137;
  v64 = sub_10004BAB0();
  if (v63)
  {
    swift_errorRetain(v63);
    v65 = swift_errorRetain(v63);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = (uint64_t *)swift_slowAlloc(8, -1);
      v128 = v33;
      *(_DWORD *)v68 = 138412290;
      v7 = (uint64_t)(v68 + 4);
      swift_errorRetain(v63);
      v70 = _swift_stdlib_bridgeErrorToNSError(v63);
      *(_QWORD *)&v138 = v70;
      v33 = v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, (char *)&v138 + 8, v68 + 4, v68 + 12);
      *v69 = v70;
      v71 = v69;
      v54 = v133;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed to verify TLT inclusion proof: %@", v68, 0xCu);
      v72 = sub_10001D138(&qword_100127730);
      swift_arrayDestroy(v71, 1, v72);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v68, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    v84 = v134;

    swift_willThrow(v85);
    sub_10002300C(v146);

    return v7;
  }
  v7 = (uint64_t)v64;
  if (objc_msgSend(v54, "nodeType") != 3)
  {
    v86 = sub_100060A38();
    v87 = swift_allocError(&type metadata for MilestoneRootsResponseError, v86, 0, 0);
    *(_DWORD *)v88 = 8;
    *(_BYTE *)(v88 + 4) = 1;
    swift_willThrow(v87);
    sub_10002300C(v146);

    v89 = v134;
LABEL_49:

    return v7;
  }
  v73 = objc_msgSend(v54, "nodeBytes");
  if (!v73)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v74 = v73;
  v75 = sub_10002E3EC(0, &qword_100127EF8, &off_1001050E8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v75);
  v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v74);
  v79 = v78;

  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100022F44(v77, v79);
  *(_QWORD *)&v138 = 0;
  v81 = objc_msgSend(ObjCClassFromMetadata, "parseFromData:error:", isa, &v138);

  v82 = v138;
  if (!v81)
  {
    v90 = (id)v138;
    _convertNSErrorToError(_:)(v82);

    swift_willThrow(v91);
    sub_10002300C(v146);

    v89 = v133;
    goto LABEL_49;
  }
  v83 = (id)v138;
  sub_100053F40((uint64_t)&v148);
  v137 = v81;
  v92 = objc_msgSend(v81, "hasPatHead");
  v128 = v33;
  if (!v92)
  {
LABEL_63:
    sub_10002304C(&v148);
    v103 = sub_10002304C(&v148);
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v104, v105))
    {
      v106 = (uint8_t *)swift_slowAlloc(12, -1);
      v107 = swift_slowAlloc(32, -1);
      *(_DWORD *)v106 = 136315138;
      v7 = (uint64_t)(v106 + 4);
      v138 = v148;
      v139 = v149;
      v140 = v150;
      v141 = v151;
      v142[0] = v107;
      v108 = sub_100023710();
      v109 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v108);
      v111 = v110;
      *(_QWORD *)&v138 = sub_1000230D0(v109, v110, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, (char *)&v138 + 8, v106 + 4, v106 + 12);
      swift_bridgeObjectRelease(v111);
      sub_10002300C(&v148);
      sub_10002300C(&v148);
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "Failed to verify inclusion proof for %s", v106, 0xCu);
      swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1, -1);
      swift_slowDealloc(v106, -1, -1);
    }
    else
    {
      sub_10002300C(&v148);
      sub_10002300C(&v148);
    }

    v112 = sub_100060A38();
    v113 = swift_allocError(&type metadata for MilestoneRootsResponseError, v112, 0, 0);
    *(_DWORD *)v114 = 6;
    *(_BYTE *)(v114 + 4) = 1;
    swift_willThrow(v113);
    sub_10002300C(&v148);

    sub_10002300C(v146);
    return v7;
  }
  v93 = objc_msgSend(v132, "logHead");
  if (v93)
  {
    v94 = v93;
    v6 = (char *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v93);
    v1 = v95;

  }
  else
  {
    v6 = 0;
    v1 = 0xF000000000000000;
  }
  v96 = objc_msgSend(v137, "patHead", v128);
  if (v96)
  {
    v97 = v96;
    v98 = objc_msgSend(v96, "object");

    if (v98)
    {
      v99 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v98);
      v101 = v100;

      v102 = v1;
      if (v1 >> 60 == 15)
      {
        if (v101 >> 60 == 15)
          goto LABEL_68;
        goto LABEL_62;
      }
      if (v101 >> 60 == 15)
      {
LABEL_62:
        sub_100027420((uint64_t)v6, v102);
        sub_100027420(v99, v101);
        goto LABEL_63;
      }
      sub_100049CB0((uint64_t)v6, v1);
      sub_10002395C((uint64_t)v6, v1);
      v116 = v115;
      sub_100027420(v99, v101);
      sub_100027420((uint64_t)v6, v1);
      sub_100027420((uint64_t)v6, v1);
      if ((v116 & 1) == 0)
        goto LABEL_63;
    }
    else if (v1 >> 60 != 15)
    {
      v102 = v1;
      v99 = 0;
      v101 = 0xF000000000000000;
      goto LABEL_62;
    }
LABEL_68:
    sub_10002304C(&v148);
    v117 = sub_10002304C(&v148);
    v118 = Logger.logObject.getter(v117);
    v119 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v118, v119))
    {
      v120 = (uint8_t *)swift_slowAlloc(12, -1);
      v121 = swift_slowAlloc(32, -1);
      *(_DWORD *)v120 = 136315138;
      v132 = v120 + 4;
      v138 = v148;
      v139 = v149;
      v140 = v150;
      v141 = v151;
      v142[0] = v121;
      v122 = sub_100023710();
      v123 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v122);
      v125 = v124;
      *(_QWORD *)&v138 = sub_1000230D0(v123, v124, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, (char *)&v138 + 8, v132, v120 + 12);
      swift_bridgeObjectRelease(v125);
      sub_10002300C(&v148);
      sub_10002300C(&v148);
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "Verified inclusion for %s", v120, 0xCu);
      swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v121, -1, -1);
      swift_slowDealloc(v120, -1, -1);
    }
    else
    {
      sub_10002300C(&v148);
      sub_10002300C(&v148);
    }

    sub_10005B940((uint64_t)&v138);
    if (*((_QWORD *)&v139 + 1))
    {
      sub_10002E424((uint64_t)&v138, (uint64_t)v142);
      sub_1000202F0((uint64_t)&v138, &qword_100126F88);
      v126 = v143;
      v127 = v144;
      sub_100022F20(v142, v143);
      (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v127 + 40))(&v148, v7, v126, v127);
      sub_10002300C(v146);
      sub_10002300C(&v148);

      sub_100023CAC(v142);
    }
    else
    {
      sub_10002300C(v146);
      sub_10002300C(&v148);

      sub_1000202F0((uint64_t)&v138, &qword_100126F88);
    }
    return v7;
  }
LABEL_76:
  result = sub_100027420((uint64_t)v6, v1);
  __break(1u);
  return result;
}

void MilestoneRootsResponse.verify()()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = v0;
  v2 = objc_autoreleasePoolPush();
  sub_10005FF48(v1, &v3);
  objc_autoreleasePoolPop(v2);
}

void sub_10005FF48(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;

  v5 = sub_10001D138(&qword_100127710);
  __chkstk_darwin(v5);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, "status") != 1 && objc_msgSend(a1, "status") != 7)
  {
    v27 = objc_msgSend(a1, "status");
    v28 = sub_100060A38();
    v29 = swift_allocError(&type metadata for MilestoneRootsResponseError, v28, 0, 0);
    *(_DWORD *)v30 = v27;
    *(_BYTE *)(v30 + 4) = 0;
LABEL_21:
    swift_willThrow(v29);
    return;
  }
  if (objc_msgSend(a1, "status") == 7)
  {
    if (qword_10012EC80 != -1)
      swift_once(&qword_10012EC80, sub_10005B668);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100020804(v12, (uint64_t)qword_100131540);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Newer milestone not found", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    *a2 = 1;
    return;
  }
  if (!objc_msgSend(a1, "hasStartSlh"))
  {
    v31 = sub_100060A38();
    v29 = swift_allocError(&type metadata for MilestoneRootsResponseError, v31, 0, 0);
    *(_DWORD *)v32 = 1;
LABEL_20:
    *(_BYTE *)(v32 + 4) = 1;
    goto LABEL_21;
  }
  if (!objc_msgSend(a1, "hasPatInclusionProof")
    || !objc_msgSend(a1, "hasTltInclusionProof"))
  {
    v33 = sub_100060A38();
    v29 = swift_allocError(&type metadata for MilestoneRootsResponseError, v33, 0, 0);
    *(_DWORD *)v32 = 3;
    goto LABEL_20;
  }
  v17 = sub_10005CD34();
  if (v2)
  {
    if (qword_10012EC80 != -1)
      swift_once(&qword_10012EC80, sub_10005B668);
    v19 = type metadata accessor for Logger(0);
    sub_100020804(v19, (uint64_t)qword_100131540);
    swift_errorRetain(v2);
    v20 = swift_errorRetain(v2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 138412290;
      swift_errorRetain(v2);
      v25 = _swift_stdlib_bridgeErrorToNSError(v2);
      v62 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v23 + 4, v23 + 12);
      *v24 = v25;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to verify milestones: %@", v23, 0xCu);
      v26 = sub_10001D138(&qword_100127730);
      swift_arrayDestroy(v24, 1, v26);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    goto LABEL_21;
  }
  v34 = v17;
  v35 = v18;
  if (v17 == 1)
  {
    v36 = swift_bridgeObjectRetain(v18);
    v42 = sub_10005D894(v36);
    v61 = v43;
    swift_bridgeObjectRelease(v35);
    if (v42 == 1)
    {
      v44 = v61;
      v61 = (id)sub_10005EB4C(v44);

      MilestoneRootsResponse.receiptTime.getter((uint64_t)v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        static Date.now.getter();
        sub_1000202F0((uint64_t)v7, &qword_100127710);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      }
      if ((v35 & 0xC000000000000001) != 0)
      {
        v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v35);
      }
      else
      {
        if (!*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          swift_once(&qword_10012EC80, sub_10005B668);
          v52 = type metadata accessor for Logger(0);
          sub_100020804(v52, (uint64_t)qword_100131540);
          swift_errorRetain(0);
          v53 = swift_errorRetain(0);
          v54 = Logger.logObject.getter(v53);
          v55 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v54, v55))
          {
            v56 = (uint8_t *)swift_slowAlloc(12, -1);
            v60 = (uint64_t *)swift_slowAlloc(8, -1);
            *(_DWORD *)v56 = 138412290;
            swift_errorRetain(0);
            v57 = _swift_stdlib_bridgeErrorToNSError(0);
            v62 = v57;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v56 + 4, v56 + 12);
            v58 = v60;
            *v60 = v57;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v54, v55, "Failed to GC milestones: %@", v56, 0xCu);
            v59 = sub_10001D138(&qword_100127730);
            swift_arrayDestroy(v58, 1, v59);
            swift_slowDealloc(v58, -1, -1);
            swift_slowDealloc(v56, -1, -1);

            swift_errorRelease();
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();

          }
          goto LABEL_48;
        }
        v50 = *(id *)(v35 + 32);
      }
      v51 = v50;
      swift_bridgeObjectRelease(v35);
      sub_10005C184((uint64_t)v11, v51);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

LABEL_48:
      *a2 = (uint64_t)v61;
      return;
    }
    swift_bridgeObjectRelease(v35);
    if (qword_10012EC80 != -1)
      swift_once(&qword_10012EC80, sub_10005B668);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_100020804(v45, (uint64_t)qword_100131540);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Failed to verify TLT inclusion", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    *a2 = v42;
  }
  else
  {
    swift_bridgeObjectRelease(v18);
    if (qword_10012EC80 != -1)
      swift_once(&qword_10012EC80, sub_10005B668);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_100020804(v37, (uint64_t)qword_100131540);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to verify milestones", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    *a2 = v34;
  }
}

unint64_t sub_100060A38()
{
  unint64_t result;

  result = qword_100127FC8;
  if (!qword_100127FC8)
  {
    result = swift_getWitnessTable(&unk_1000DDBF0, &type metadata for MilestoneRootsResponseError);
    atomic_store(result, (unint64_t *)&qword_100127FC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MilestoneRootsResponseError()
{
  return &type metadata for MilestoneRootsResponseError;
}

unint64_t sub_100060A8C()
{
  unint64_t result;

  result = qword_100127FD0;
  if (!qword_100127FD0)
  {
    result = swift_getWitnessTable(&unk_1000DDC78, &type metadata for MilestoneRootsResponseError);
    atomic_store(result, (unint64_t *)&qword_100127FD0);
  }
  return result;
}

void sub_100060AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  sub_100053F40((uint64_t)v27);
  if (!v3)
  {
    if (qword_10012EC80 != -1)
      swift_once(&qword_10012EC80, sub_10005B668);
    v5 = type metadata accessor for Logger(0);
    sub_100020804(v5, (uint64_t)qword_100131540);
    sub_10002304C(v27);
    v6 = sub_10002304C(v27);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(12, -1);
      v29 = a3;
      v10 = (uint8_t *)v9;
      v11 = swift_slowAlloc(32, -1);
      *(_DWORD *)v10 = 136315138;
      v20 = *((_QWORD *)&v27[0] + 1);
      v21 = v27[1];
      v22 = v27[2];
      v23 = v28;
      v24[0] = v11;
      v12 = sub_100023710();
      v13 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KTSWDB.STHKey, v12);
      v15 = v14;
      v19 = sub_1000230D0(v13, v14, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v15);
      sub_10002300C(v27);
      sub_10002300C(v27);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Verified inclusion for %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      v16 = v10;
      a3 = v29;
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_10002300C(v27);
      sub_10002300C(v27);
    }

    sub_10005B940((uint64_t)&v19);
    if (*((_QWORD *)&v21 + 1))
    {
      sub_10002E424((uint64_t)&v19, (uint64_t)v24);
      sub_1000202F0((uint64_t)&v19, &qword_100126F88);
      v17 = v25;
      v18 = v26;
      sub_100022F20(v24, v25);
      (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v18 + 40))(v27, a3, v17, v18);
      sub_10002300C(v27);
      sub_100023CAC(v24);
    }
    else
    {
      sub_10002300C(v27);
      sub_1000202F0((uint64_t)&v19, &qword_100126F88);
    }
  }
}

void *sub_100060D54()
{
  return &unk_100127FD8;
}

uint64_t sub_100060D60()
{
  return sub_10004BFD4(&qword_100127FD8, &off_100127FE0);
}

uint64_t sub_100060D70(uint64_t a1, uint64_t a2)
{
  return sub_10004C034(a1, a2, &qword_100127FD8, (uint64_t *)&off_100127FE0);
}

uint64_t (*sub_100060D80(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&unk_100127FD8, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_100060DC0(uint64_t a1, unint64_t a2)
{
  if (a2 > 2)
    return 3;
  else
    return qword_1000DDFB0[a2];
}

unint64_t sub_100060DE0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  _QWORD v10[16];

  if (a2 < 3)
    return sub_10004FD2C((uint64_t)_swiftEmptyArrayStorage);
  v10[14] = v2;
  v10[15] = v3;
  v7 = sub_10001D138(&qword_100127E50);
  inited = swift_initStackObject(v7, v10);
  *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  *(_QWORD *)(inited + 40) = v9;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  swift_bridgeObjectRetain(a2);
  return sub_10004FD2C(inited);
}

unint64_t sub_100060E7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D138(&qword_1001282B8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002AC5C(v7, (uint64_t)v16, &qword_1001282C0);
    result = sub_100067DF8((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10002E1B0(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100060FBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100068A08();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100060FE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100068A08();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10006100C(uint64_t a1, uint64_t a2)
{
  return sub_100067D54(a1, a2, &qword_100127FD8, &off_100127FE0);
}

uint64_t sub_10006101C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 > 2)
    return 3;
  else
    return qword_1000DDFB0[v1];
}

unint64_t sub_100061040()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[1];
  if (v1 < 3)
    return sub_10004FD2C((uint64_t)_swiftEmptyArrayStorage);
  v3 = *v0;
  v4 = sub_10001D138(&qword_100127E50);
  inited = swift_initStackObject(v4, &v7);
  *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v1;
  swift_bridgeObjectRetain(v1);
  return sub_10004FD2C(inited);
}

uint64_t sub_1000610EC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_100131558);
  sub_100020804(v0, (uint64_t)qword_100131558);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0xD00000000000001FLL, 0x80000001000DDF60);
}

uint64_t sub_10006116C()
{
  uint64_t v0;

  if (qword_10012EE90 != -1)
    swift_once(&qword_10012EE90, sub_1000610EC);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_100131558);
}

uint64_t sub_1000611B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012EE90 != -1)
    swift_once(&qword_10012EE90, sub_1000610EC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131558);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100061224()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine));
}

uint64_t sub_100061234()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_daemon));
}

uint64_t sub_100061264()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName);
  swift_bridgeObjectRetain(*(_QWORD *)(v0
                                     + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName
                                     + 8));
  return v1;
}

uint64_t sub_10006129C()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid);
}

id sub_1000612AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  objc_super v17;

  v13 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v13[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine] = a1;
  v14 = &v13[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_daemon];
  *(_QWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = a3;
  v15 = &v13[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
  *(_QWORD *)v15 = a4;
  *((_QWORD *)v15 + 1) = a5;
  *(_DWORD *)&v13[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid] = a6;
  v17.receiver = v13;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, "init");
}

id sub_100061350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v6;
  objc_class *ObjectType;
  char *v14;
  char *v15;
  objc_super v17;

  ObjectType = (objc_class *)swift_getObjectType(v6);
  *(_QWORD *)&v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine] = a1;
  v14 = &v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_daemon];
  *(_QWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = a3;
  v15 = &v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
  *(_QWORD *)v15 = a4;
  *((_QWORD *)v15 + 1) = a5;
  *(_DWORD *)&v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid] = a6;
  v17.receiver = v6;
  v17.super_class = ObjectType;
  return objc_msgSendSuper2(&v17, "init");
}

uint64_t sub_1000613F4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 40) = v4;
  *v4 = v2;
  v4[1] = sub_100061458;
  return v6(a1);
}

uint64_t sub_100061458()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000614C4, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000614C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = (void *)objc_opt_self(SecXPCHelper);
  v3 = (void *)_convertErrorToNSError(_:)(v1);
  v4 = objc_msgSend(v2, "cleanseErrorForXPC:", v3);

  if (!v4)
  {
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    v6 = sub_10001D138(&qword_100127AE0);
    _print_unlocked<A, B>(_:_:)(v0 + 32, v0 + 16, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v9 = sub_1000615C4();
    v5 = swift_allocError(&type metadata for SWTransparencyXPCError, v9, 0, 0);
    *v10 = v7;
    v10[1] = v8;
  }
  swift_willThrow(v5);
  swift_errorRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000615C4()
{
  unint64_t result;

  result = qword_100128020;
  if (!qword_100128020)
  {
    result = swift_getWitnessTable(&unk_1000DDD2C, &type metadata for SWTransparencyXPCError);
    atomic_store(result, &qword_100128020);
  }
  return result;
}

uint64_t sub_100061608()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return swift_task_switch(sub_100061620, 0, 0);
}

uint64_t sub_100061620()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  char *v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t (*v17)(void);
  uint64_t v18;

  if (qword_10012EE90 != -1)
    swift_once(&qword_10012EE90, sub_1000610EC);
  v1 = (void *)v0[6];
  v2 = type metadata accessor for Logger(0);
  sub_100020804(v2, (uint64_t)qword_100131558);
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = (char *)v0[6];
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v18 = v8;
    *(_DWORD *)v7 = 136315138;
    v10 = *(_QWORD *)&v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
    v9 = *(_QWORD *)&v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName + 8];
    swift_bridgeObjectRetain(v9);
    v0[5] = sub_1000230D0(v10, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v9);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Refreshing milestones: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {

  }
  v11 = (char *)v0[6];
  v12 = *(int **)(**(_QWORD **)&v11[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine]
                + 160);
  v13 = v12[1];
  v17 = (uint64_t (*)(void))((char *)v12 + *v12);
  v14 = v11;
  v15 = (_QWORD *)swift_task_alloc(v13);
  v0[7] = v15;
  *v15 = v0;
  v15[1] = sub_10006181C;
  return v17();
}

uint64_t sub_10006181C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000618B4;
  else
    v3 = sub_100061880;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100061880()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000618B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = (void *)objc_opt_self(SecXPCHelper);
  v3 = (void *)_convertErrorToNSError(_:)(v1);
  v4 = objc_msgSend(v2, "cleanseErrorForXPC:", v3);

  if (!v4)
  {
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    v6 = sub_10001D138(&qword_100127AE0);
    _print_unlocked<A, B>(_:_:)(v0 + 32, v0 + 16, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v9 = sub_1000615C4();
    v5 = swift_allocError(&type metadata for SWTransparencyXPCError, v9, 0, 0);
    *v10 = v7;
    v10[1] = v8;
  }
  v11 = *(void **)(v0 + 48);
  swift_willThrow(v5);
  swift_errorRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100061AE0(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012802C;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_100068CF8;
  v6[6] = v5;
  return swift_task_switch(sub_100061620, 0, 0);
}

uint64_t sub_100061B58()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch(sub_100061B70, 0, 0);
}

uint64_t sub_100061B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t (*v12)(void);

  if (qword_10012EE90 != -1)
    swift_once(&qword_10012EE90, sub_1000610EC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100020804(v1, (uint64_t)qword_100131558);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Verifying PAT consistency", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(char **)(v0 + 40);

  v7 = *(int **)(**(_QWORD **)&v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine]
               + 168);
  v8 = v7[1];
  v12 = (uint64_t (*)(void))((char *)v7 + *v7);
  v9 = v6;
  v10 = (_QWORD *)swift_task_alloc(v8);
  *(_QWORD *)(v0 + 48) = v10;
  *v10 = v0;
  v10[1] = sub_100061C94;
  return v12();
}

uint64_t sub_100061C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100068D00;
  else
    v3 = sub_100068CEC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100061E14(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100128034;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_100068CF8;
  v6[5] = v5;
  return swift_task_switch(sub_100061B70, 0, 0);
}

uint64_t sub_100061E8C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch(sub_100061EA4, 0, 0);
}

uint64_t sub_100061EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t (*v12)(void);

  if (qword_10012EE90 != -1)
    swift_once(&qword_10012EE90, sub_1000610EC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100020804(v1, (uint64_t)qword_100131558);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Public keybag refresh", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(char **)(v0 + 40);

  v7 = *(int **)(**(_QWORD **)&v6[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine]
               + 176);
  v8 = v7[1];
  v12 = (uint64_t (*)(void))((char *)v7 + *v7);
  v9 = v6;
  v10 = (_QWORD *)swift_task_alloc(v8);
  *(_QWORD *)(v0 + 48) = v10;
  *v10 = v0;
  v10[1] = sub_100061FC8;
  return v12();
}

uint64_t sub_100061FC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100062060;
  else
    v3 = sub_10006202C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10006202C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062060()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = (void *)objc_opt_self(SecXPCHelper);
  v3 = (void *)_convertErrorToNSError(_:)(v1);
  v4 = objc_msgSend(v2, "cleanseErrorForXPC:", v3);

  if (!v4)
  {
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    v6 = sub_10001D138(&qword_100127AE0);
    _print_unlocked<A, B>(_:_:)(v0 + 32, v0 + 16, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v9 = sub_1000615C4();
    v5 = swift_allocError(&type metadata for SWTransparencyXPCError, v9, 0, 0);
    *v10 = v7;
    v10[1] = v8;
  }
  v11 = *(void **)(v0 + 40);
  swift_willThrow(v5);
  swift_errorRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006228C(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012803C;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_100068CF8;
  v6[5] = v5;
  return swift_task_switch(sub_100061EA4, 0, 0);
}

void sub_100062304()
{
  strcpy((char *)&qword_100131570, "SWTVfyProofs");
  algn_100131578[5] = 0;
  *(_WORD *)&algn_100131578[6] = -5120;
}

uint64_t *sub_100062330()
{
  if (qword_10012EE98 != -1)
    swift_once(&qword_10012EE98, sub_100062304);
  return &qword_100131570;
}

uint64_t sub_100062370()
{
  return sub_1000624B0(&qword_10012EE98, &qword_100131570, algn_100131578, (uint64_t)sub_100062304);
}

void sub_100062390()
{
  strcpy((char *)&qword_100131580, "SWTVfyProofsS");
  *(_WORD *)&algn_100131588[6] = -4864;
}

uint64_t *sub_1000623C0()
{
  if (qword_10012EEA0 != -1)
    swift_once(&qword_10012EEA0, sub_100062390);
  return &qword_100131580;
}

uint64_t sub_100062400()
{
  return sub_1000624B0(&qword_10012EEA0, &qword_100131580, algn_100131588, (uint64_t)sub_100062390);
}

void sub_100062420()
{
  strcpy((char *)&qword_100131590, "SWTVfyProofsF");
  *(_WORD *)&algn_100131598[6] = -4864;
}

uint64_t *sub_100062450()
{
  if (qword_10012EEA8 != -1)
    swift_once(&qword_10012EEA8, sub_100062420);
  return &qword_100131590;
}

uint64_t sub_100062490()
{
  return sub_1000624B0(qword_10012EEA8, &qword_100131590, algn_100131598, (uint64_t)sub_100062420);
}

uint64_t sub_1000624B0(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;

  if (*a1 != -1)
    swift_once(a1, a4);
  v6 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v6;
}

uint64_t sub_100062504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v5[11] = swift_getObjectType(v4);
  return swift_task_switch(sub_100062550, 0, 0);
}

uint64_t sub_100062550()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(id *)(v0 + 80);
  sub_100022F88(v4, v3);
  sub_100022F88(v2, v1);
  v6 = (_QWORD *)swift_task_alloc(dword_10012804C);
  *(_QWORD *)(v0 + 96) = v6;
  *v6 = v0;
  v6[1] = sub_1000625E4;
  return sub_1000627E8(v0 + 32, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_1000625E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000626A8;
  else
    v3 = sub_100062648;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100062648()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);

  sub_100022F44(v4, v3);
  sub_100022F44(v2, v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1000626A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = (void *)objc_opt_self(SecXPCHelper);
  v3 = (void *)_convertErrorToNSError(_:)(v1);
  v4 = objc_msgSend(v2, "cleanseErrorForXPC:", v3);

  if (!v4)
  {
    *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    v6 = sub_10001D138(&qword_100127AE0);
    _print_unlocked<A, B>(_:_:)(v0 + 40, v0 + 16, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v9 = sub_1000615C4();
    v5 = swift_allocError(&type metadata for SWTransparencyXPCError, v9, 0, 0);
    *v10 = v7;
    v10[1] = v8;
  }
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(void **)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 48);
  swift_willThrow(v5);
  swift_errorRelease();

  sub_100022F44(v15, v14);
  sub_100022F44(v13, v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000627E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6[66] = a6;
  v6[65] = a5;
  v6[63] = a3;
  v6[64] = a4;
  v6[61] = a1;
  v6[62] = a2;
  v7 = type metadata accessor for Date(0);
  v6[67] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[68] = v8;
  v6[69] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SuspendingClock(0);
  v6[70] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[71] = v10;
  v6[72] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001D138(&qword_100127220);
  v6[73] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SuspendingClock.Instant(0);
  v6[74] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[75] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[76] = swift_task_alloc(v14);
  v6[77] = swift_task_alloc(v14);
  return swift_task_switch(sub_1000628D8, 0, 0);
}

uint64_t sub_1000628D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 496);
  static SuspendingClock.now.getter();
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine);
  *(_QWORD *)(v0 + 624) = v2;
  return swift_task_switch(sub_100062924, v2, 0);
}

uint64_t sub_100062924()
{
  uint64_t v0;

  sub_10002E424(*(_QWORD *)(v0 + 624) + 112, v0 + 264);
  return swift_task_switch(sub_100062968, 0, 0);
}

uint64_t sub_100062968()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  id v41;
  NSString v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  NSString v47;
  void *v48;
  uint64_t v49;
  uint64_t inited;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  Class isa;
  char *v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  id v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  _QWORD *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  os_log_type_t typea[8];
  void (*type)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t (*v97)(uint64_t, uint64_t);
  uint64_t v98[2];

  v1 = (_QWORD *)(v0 + 224);
  v95 = v0 + 432;
  if (qword_10012EE90 != -1)
    swift_once(&qword_10012EE90, sub_1000610EC);
  v96 = (_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 512);
  v4 = *(void **)(v0 + 496);
  v5 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 632) = sub_100020804(v5, (uint64_t)qword_100131558);
  sub_100022F88(v2, v3);
  v6 = v4;
  sub_100022F88(v2, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 504);
  v10 = *(_QWORD *)(v0 + 512);
  v12 = *(char **)(v0 + 496);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v93 = swift_slowAlloc(64, -1);
    v98[0] = v93;
    *(_DWORD *)v13 = 136315394;
    sub_100022F88(v11, v10);
    v14 = Data.description.getter(v11, v10);
    v16 = v15;
    sub_100022F44(v11, v10);
    *(_QWORD *)(v0 + 456) = sub_1000230D0(v14, v16, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v13 + 4, v13 + 12);
    v17 = v16;
    v1 = (_QWORD *)(v0 + 224);
    swift_bridgeObjectRelease(v17);
    sub_100022F44(v11, v10);
    sub_100022F44(v11, v10);
    *(_WORD *)(v13 + 12) = 2080;
    v18 = *(_QWORD *)&v12[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
    v19 = *(_QWORD *)&v12[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName + 8];
    swift_bridgeObjectRetain(v19);
    *(_QWORD *)(v0 + 432) = sub_1000230D0(v18, v19, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v95, v0 + 440, v13 + 14, v13 + 22);

    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Verifying proofs %s for %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    sub_100022F44(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 512));
    sub_100022F44(v11, v10);

  }
  *(_QWORD *)(v0 + 248) = &type metadata for SWTFeatureFlags;
  *(_QWORD *)(v0 + 256) = sub_10003998C();
  *(_BYTE *)(v0 + 224) = 3;
  v20 = isFeatureEnabled(_:)(v1);
  sub_100023CAC(v1);
  if ((v20 & 1) != 0)
  {
    v21 = sub_1000681FC();
    v94 = swift_allocError(&type metadata for SWTXPCError, v21, 0, 0);
    swift_willThrow(v94);
    v22 = *(_QWORD *)(v0 + 608);
    v23 = *(_QWORD *)(v0 + 600);
    *(_QWORD *)typea = *(_QWORD *)(v0 + 592);
    v24 = *(_QWORD *)(v0 + 576);
    v25 = *(_QWORD *)(v0 + 568);
    v26 = *(_QWORD *)(v0 + 560);
    v27 = *(_QWORD *)(v0 + 504);
    v28 = *(_QWORD *)(v0 + 512);
    sub_100068AD4();
    sub_100050020(v27, v28);
    v87 = v29;
    v90 = v30;
    v31 = *(_QWORD *)(v0 + 288);
    v32 = *(_QWORD *)(v0 + 296);
    sub_100022F20(v96, v31);
    v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 80))(v31, v32);
    v34 = SuspendingClock.init()();
    SuspendingClock.now.getter(v34);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    v35 = SuspendingClock.Instant.duration(to:)(v22);
    v37 = v36;
    v38 = *(_QWORD *)typea;
    type = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    type(v22, v38);
    v39 = (double)Duration.components.getter(v35, v37);
    Duration.components.getter(v35, v37);
    v41 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", (double)v40 / 1.0e18 + v39);
    if (qword_10012EEA8[0] != -1)
      swift_once(qword_10012EEA8, sub_100062420);
    v42 = String._bridgeToObjectiveC()();
    objc_msgSend(v33, "logMetric:withName:", v41, v42);

    v43 = *(_QWORD *)(v0 + 288);
    v44 = *(_QWORD *)(v0 + 296);
    sub_100022F20(v96, v43);
    v45 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v44 + 80))(v43, v44);
    if (qword_10012EE98 != -1)
      swift_once(&qword_10012EE98, sub_100062304);
    v46 = *(char **)(v0 + 496);
    v47 = String._bridgeToObjectiveC()();
    v48 = (void *)_convertErrorToNSError(_:)(v94);
    v49 = sub_10001D138(&qword_100128288);
    inited = swift_initStackObject(v49, v0 + 120);
    *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
    *(_QWORD *)(v0 + 392) = 99;
    *(_QWORD *)(v0 + 400) = 0xE100000000000000;
    AnyHashable.init<A>(_:)(v0 + 392, &type metadata for String, &protocol witness table for String);
    v51 = *(_QWORD *)&v46[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
    v52 = *(_QWORD *)&v46[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName + 8];
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = v51;
    *(_QWORD *)(inited + 80) = v52;
    swift_bridgeObjectRetain(v52);
    v53 = sub_100060E7C(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v53);
    objc_msgSend(v45, "logResultForEvent:hardFailure:result:withAttributes:", v47, 1, v48, isa);

    swift_errorRetain(v94);
    v89 = v51;
    sub_100067FA4(v96, v51, v52, 0, v94);
    swift_errorRelease();
    v55 = v46;
    swift_errorRetain(v94);
    v56 = v55;
    swift_errorRetain(v94);
    v57 = swift_bridgeObjectRetain(v90);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter();
    v60 = os_log_type_enabled(v58, v59);
    v61 = *(char **)(v0 + 496);
    if (v60)
    {
      v62 = swift_slowAlloc(38, -1);
      v86 = (uint64_t *)swift_slowAlloc(8, -1);
      v88 = swift_slowAlloc(64, -1);
      v98[0] = v88;
      *(_DWORD *)v62 = 136315906;
      swift_bridgeObjectRetain(v90);
      *(_QWORD *)(v0 + 480) = sub_1000230D0(v87, v90, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 480, v0 + 488, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease_n(v90, 3);
      *(_WORD *)(v62 + 12) = 2112;
      swift_errorRetain(v94);
      v63 = _swift_stdlib_bridgeErrorToNSError(v94);
      *(_QWORD *)(v0 + 424) = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v95, v62 + 14, v62 + 22);
      *v86 = v63;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v62 + 22) = 2080;
      swift_bridgeObjectRetain(v52);
      *(_QWORD *)(v0 + 416) = sub_1000230D0(v89, v52, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v62 + 24, v62 + 32);

      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v62 + 32) = 1024;
      LODWORD(v63) = *(_DWORD *)&v61[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid];

      *(_DWORD *)(v0 + 752) = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 752, v0 + 756, v62 + 34, v62 + 38);

      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Proof verification %s failed with %@: %s[%d]", (uint8_t *)v62, 0x26u);
      v64 = sub_10001D138(&qword_100127730);
      swift_arrayDestroy(v86, 1, v64);
      swift_slowDealloc(v86, -1, -1);
      swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v62, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v90, 2);

      swift_errorRelease();
      swift_errorRelease();

    }
    v80 = *(_QWORD *)(v0 + 616);
    v81 = *(_QWORD *)(v0 + 608);
    v82 = *(_QWORD *)(v0 + 592);
    v83 = *(_QWORD *)(v0 + 584);
    v84 = *(_QWORD *)(v0 + 576);
    v85 = *(_QWORD *)(v0 + 552);
    swift_willThrow(v65);
    type(v80, v82);
    sub_100023CAC(v96);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v66 = *(_QWORD *)(v0 + 624);
    v67 = *(_QWORD *)(v0 + 288);
    v68 = *(_QWORD *)(v0 + 296);
    sub_100022F20(v96, v67);
    v69 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v68 + 32))(v67, v68);
    v70 = objc_msgSend(v69, "transparencySettings");
    swift_unknownObjectRelease(v69);
    objc_msgSend(v70, "uiBlockingNetworkTimeout");
    v72 = v71;
    *(double *)(v0 + 640) = v71;
    v73 = swift_unknownObjectRelease(v70);
    v74 = static Duration.milliseconds(_:)(v73, v72 * 1000.0);
    v76 = v75;
    v77 = *(int **)(*(_QWORD *)v66 + 128);
    v97 = (uint64_t (*)(uint64_t, uint64_t))((char *)v77 + *v77);
    v78 = (_QWORD *)swift_task_alloc(v77[1]);
    *(_QWORD *)(v0 + 648) = v78;
    *v78 = v0;
    v78[1] = sub_10006333C;
    return v97(v74, v76);
  }
}

uint64_t sub_10006333C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 648);
  *(_BYTE *)(*(_QWORD *)v1 + 756) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100063398, 0, 0);
}

uint64_t sub_100063398(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[6];

  if ((*(_BYTE *)(v1 + 756) & 1) == 0)
  {
    v2 = Logger.logObject.getter(a1);
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "State machine timed out getting ready, attemping to verify proofs regardless", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

  }
  v5 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Progressing after waiting for state machine", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v9 = *(_QWORD *)(v1 + 504);
  v8 = *(_QWORD *)(v1 + 512);

  v10 = objc_allocWithZone((Class)ATLogProofs);
  sub_100022F88(v9, v8);
  *(_QWORD *)(v1 + 656) = sub_10002E330();
  *(_QWORD *)(v1 + 664) = 0;
  sub_100022F44(*(_QWORD *)(v1 + 504), *(_QWORD *)(v1 + 512));
  v11 = *(_QWORD *)(v1 + 288);
  v12 = *(_QWORD *)(v1 + 296);
  sub_100022F20((_QWORD *)(v1 + 264), v11);
  v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 48))(v11, v12);
  ATLogProofs.configBag.setter(v13);
  v14 = *(_QWORD *)(v1 + 288);
  v15 = *(_QWORD *)(v1 + 296);
  sub_100022F20((_QWORD *)(v1 + 264), v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 64))(v14, v15);
  v21[3] = type metadata accessor for KTSWDB();
  v21[4] = sub_100068B10();
  v21[0] = v16;
  sub_100050840((uint64_t)v21);
  v17 = *(_QWORD *)(v1 + 288);
  v18 = *(_QWORD *)(v1 + 296);
  sub_100022F20((_QWORD *)(v1 + 264), v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 56))(v17, v18);
  *(_QWORD *)(v1 + 672) = v19;
  *(_QWORD *)(v1 + 680) = *(_QWORD *)(*(_QWORD *)v19 + 152);
  return swift_task_switch(sub_100063C10, v19, 0);
}

uint64_t sub_100063C10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 672);
  *(_QWORD *)(v0 + 688) = (*(uint64_t (**)(void))(v0 + 680))();
  swift_release(v1);
  return swift_task_switch(sub_100063C5C, 0, 0);
}

uint64_t sub_100063C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Bool v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD v14[6];

  ATLogProofs.keyBag.setter(*(void **)(v0 + 688));
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  sub_100022F20((_QWORD *)(v0 + 264), v1);
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(v1, v2);
  ATLogProofs.analytics.setter(v3);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 296);
  sub_100022F20((_QWORD *)(v0 + 264), v4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 88))(v14, v4, v5);
  sub_100051190((uint64_t)v14);
  v6 = ATLogProofs.isNewEpoch()();
  if (v7)
  {
    swift_errorRelease();
LABEL_7:
    v13 = (_QWORD *)swift_task_alloc(dword_100127E8C);
    *(_QWORD *)(v0 + 720) = v13;
    *v13 = v0;
    v13[1] = sub_100063F84;
    return ATLogProofs.verify(data:)(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 528));
  }
  if (!v6)
    goto LABEL_7;
  v8 = ATLogProofs.keyBag.getter();
  if (v8)
  {
    v10 = (void *)v8;
    sub_10006D80C();

  }
  v11 = *(_QWORD *)(v0 + 624);
  ATLogProofs.VerificationResult.result.getter(v8, v9);
  return swift_task_switch(sub_100063DA8, v11, 0);
}

uint64_t sub_100063DA8()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10002E424(*(_QWORD *)(v0 + 624) + 112, v0 + 304);
  v1 = (_QWORD *)swift_task_alloc(dword_100128FAC);
  *(_QWORD *)(v0 + 696) = v1;
  *v1 = v0;
  v1[1] = sub_100063E10;
  return sub_100090178(v0 + 304, 1, *(double *)(v0 + 640));
}

uint64_t sub_100063E10(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 696);
  *(_QWORD *)(*v2 + 704) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_100023CAC((_QWORD *)(v4 + 304));
    v6 = sub_100064A20;
  }
  else
  {
    *(_QWORD *)(v4 + 712) = a1;
    sub_100023CAC((_QWORD *)(v4 + 304));
    v6 = sub_100063E98;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100063E98()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = (void *)v0[89];
  v2 = v0[73];
  v3 = (void *)v0[62];
  v4 = v1;
  ATLogProofs.keyBag.setter(v1);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject(&unk_100109A88, 40, 7);
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v3;
  v7 = v3;
  v8 = sub_100065838(v2, (uint64_t)&unk_100128298, (uint64_t)v6);
  swift_release(v8);

  v9 = (_QWORD *)swift_task_alloc(dword_100127E8C);
  v0[90] = v9;
  *v9 = v0;
  v9[1] = sub_100063F84;
  return ATLogProofs.verify(data:)(v0[65], v0[66]);
}

uint64_t sub_100063F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = (_QWORD *)*v3;
  v4[43] = v3;
  v4[44] = a1;
  v4[45] = a2;
  v4[46] = v2;
  v5 = v4[90];
  v4[91] = a1;
  v4[92] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100065080;
  else
    v6 = sub_100063FFC;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100063FFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  id v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  NSString v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  NSString v45;
  unint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t inited;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  Class isa;
  uint64_t v56;
  _OWORD *v57;
  char *v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  id v80;
  Class v81;
  id v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  os_log_type_t type;
  uint64_t typea;
  os_log_type_t typeb[8];
  unint64_t v90;
  os_log_type_t v91;
  os_log_type_t v92[8];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  _QWORD *v101;
  uint64_t v102;

  v93 = v0 + 748;
  v95 = *(_QWORD *)(v0 + 728);
  v1 = *(_QWORD *)(v0 + 608);
  v2 = *(_QWORD *)(v0 + 600);
  v99 = *(_QWORD *)(v0 + 592);
  v101 = (_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 576);
  v4 = *(_QWORD *)(v0 + 568);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 296);
  sub_100022F20((_QWORD *)(v0 + 264), v6);
  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7);
  v9 = SuspendingClock.init()();
  SuspendingClock.now.getter(v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v10 = SuspendingClock.Instant.duration(to:)(v1);
  v12 = v11;
  v13 = v99;
  v100 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v100(v1, v13);
  v14 = (double)Duration.components.getter(v10, v12);
  Duration.components.getter(v10, v12);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", (double)v15 / 1.0e18 + v14);
  if (v95 == 1)
  {
    if (qword_10012EEA0 != -1)
      swift_once(&qword_10012EEA0, sub_100062390);
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "logMetric:withName:", v16, v17);

    v18 = *(_QWORD *)(v0 + 288);
    v19 = *(_QWORD *)(v0 + 296);
    sub_100022F20(v101, v18);
    v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 80))(v18, v19);
    if (qword_10012EE98 != -1)
      swift_once(&qword_10012EE98, sub_100062304);
    v22 = *(_QWORD *)(v0 + 504);
    v21 = *(_QWORD *)(v0 + 512);
    v23 = *(char **)(v0 + 496);
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "logResultForEvent:hardFailure:result:", v24, 0, 0);

    v26 = *(_QWORD *)&v23[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
    v25 = *(_QWORD *)&v23[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName + 8];
    sub_100067FA4(v101, v26, v25, 1, 0);
    v27 = v23;
    sub_100022F88(v22, v21);
    v28 = v27;
    sub_100022F88(v22, v21);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    v31 = os_log_type_enabled(v29, v30);
    v33 = *(_QWORD *)(v0 + 504);
    v32 = *(_QWORD *)(v0 + 512);
    v34 = *(char **)(v0 + 496);
    if (v31)
    {
      v35 = swift_slowAlloc(28, -1);
      v96 = swift_slowAlloc(64, -1);
      v102 = v96;
      *(_DWORD *)v35 = 136315650;
      type = v30;
      sub_100022F88(v33, v32);
      v36 = Data.description.getter(v33, v32);
      v85 = v26;
      v38 = v37;
      sub_100022F44(v33, v32);
      *(_QWORD *)(v0 + 464) = sub_1000230D0(v36, v38, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v38);
      sub_100022F44(v33, v32);
      sub_100022F44(v33, v32);
      *(_WORD *)(v35 + 12) = 2080;
      swift_bridgeObjectRetain(v25);
      *(_QWORD *)(v0 + 472) = sub_1000230D0(v85, v25, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 472, v0 + 480, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease(v25);

      *(_WORD *)(v35 + 22) = 1024;
      v39 = *(_DWORD *)&v34[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid];

      *(_DWORD *)(v0 + 744) = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v93, v35 + 24, v35 + 28);

      _os_log_impl((void *)&_mh_execute_header, v29, type, "Proofs %s valid: %s[%d]", (uint8_t *)v35, 0x1Cu);
      swift_arrayDestroy(v96, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {

      sub_100022F44(v33, v32);
      sub_100022F44(v33, v32);

    }
    v69 = 0;
    v70 = 1;
  }
  else
  {
    if (qword_10012EEA8[0] != -1)
      swift_once(qword_10012EEA8, sub_100062420);
    v40 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "logMetric:withName:", v16, v40);

    v41 = *(_QWORD *)(v0 + 288);
    v42 = *(_QWORD *)(v0 + 296);
    sub_100022F20(v101, v41);
    v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v42 + 80))(v41, v42);
    if (qword_10012EE98 != -1)
      swift_once(&qword_10012EE98, sub_100062304);
    v44 = *(char **)(v0 + 496);
    typea = *(_QWORD *)(v0 + 504);
    v90 = *(_QWORD *)(v0 + 512);
    v45 = String._bridgeToObjectiveC()();
    v46 = sub_1000615C4();
    v47 = swift_allocError(&type metadata for SWTransparencyXPCError, v46, 0, 0);
    *v48 = xmmword_1000DDD00;
    v49 = (void *)_convertErrorToNSError(_:)(v47);
    swift_errorRelease();
    v50 = sub_10001D138(&qword_100128288);
    inited = swift_initStackObject(v50, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
    *(_QWORD *)(v0 + 376) = 99;
    *(_QWORD *)(v0 + 384) = 0xE100000000000000;
    AnyHashable.init<A>(_:)(v0 + 376, &type metadata for String, &protocol witness table for String);
    v53 = *(_QWORD *)&v44[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
    v52 = *(_QWORD *)&v44[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName + 8];
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = v53;
    *(_QWORD *)(inited + 80) = v52;
    swift_bridgeObjectRetain(v52);
    v54 = sub_100060E7C(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v54);
    objc_msgSend(v43, "logResultForEvent:hardFailure:result:withAttributes:", v45, 1, v49, isa);

    v56 = swift_allocError(&type metadata for SWTransparencyXPCError, v46, 0, 0);
    *v57 = xmmword_1000DDD00;
    v86 = v53;
    sub_100067FA4(v101, v53, v52, 0, v56);
    swift_errorRelease();
    v58 = v44;
    sub_100022F88(typea, v90);
    v59 = v58;
    sub_100022F88(typea, v90);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v84 = *(_QWORD *)(v0 + 728);
      v62 = *(_QWORD *)(v0 + 504);
      v63 = *(_QWORD *)(v0 + 512);
      v64 = *(char **)(v0 + 496);
      v65 = swift_slowAlloc(38, -1);
      v97 = swift_slowAlloc(64, -1);
      v102 = v97;
      *(_DWORD *)v65 = 136315906;
      sub_100022F88(v62, v63);
      v91 = v61;
      v66 = Data.description.getter(v62, v63);
      v68 = v67;
      sub_100022F44(v62, v63);
      *(_QWORD *)(v0 + 408) = sub_1000230D0(v66, v68, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v65 + 4, v65 + 12);
      swift_bridgeObjectRelease(v68);
      sub_100022F44(v62, v63);
      sub_100022F44(v62, v63);
      *(_WORD *)(v65 + 12) = 2048;
      *(_QWORD *)(v0 + 440) = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v65 + 14, v65 + 22);
      *(_WORD *)(v65 + 22) = 2080;
      swift_bridgeObjectRetain(v52);
      *(_QWORD *)(v0 + 448) = sub_1000230D0(v86, v52, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v65 + 24, v65 + 32);
      swift_bridgeObjectRelease(v52);

      *(_WORD *)(v65 + 32) = 1024;
      LODWORD(v62) = *(_DWORD *)&v64[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid];

      *(_DWORD *)(v0 + 748) = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v93, v0 + 752, v65 + 34, v65 + 38);

      _os_log_impl((void *)&_mh_execute_header, v60, v91, "Proofs %s invalid with %lu: %s[%d]", (uint8_t *)v65, 0x26u);
      swift_arrayDestroy(v97, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v97, -1, -1);
      swift_slowDealloc(v65, -1, -1);
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 504);
      v71 = *(_QWORD *)(v0 + 512);
      v73 = *(void **)(v0 + 496);

      sub_100022F44(v72, v71);
      sub_100022F44(v72, v71);

    }
    v70 = *(_QWORD *)(v0 + 728);
    v69 = 1;
  }
  v74 = *(void **)(v0 + 656);
  v75 = *(_QWORD *)(v0 + 616);
  *(_QWORD *)typeb = *(_QWORD *)(v0 + 592);
  *(_QWORD *)v92 = *(_QWORD *)(v0 + 608);
  v94 = *(_QWORD *)(v0 + 584);
  v98 = *(_QWORD *)(v0 + 576);
  v76 = *(_QWORD *)(v0 + 552);
  v77 = *(_QWORD *)(v0 + 544);
  v78 = *(_QWORD *)(v0 + 536);
  v79 = *(_QWORD **)(v0 + 488);
  ATLogProofs.VerificationResult.expiry.getter(v70, *(_QWORD *)(v0 + 360));
  v80 = objc_allocWithZone((Class)SWTransparencyExpiringVerificationResult);
  v81 = Date._bridgeToObjectiveC()().super.isa;
  v82 = objc_msgSend(v80, "initWithResult:expiry:", v69, v81);

  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
  v100(v75, *(_QWORD *)typeb);
  *v79 = v82;
  sub_100023CAC(v101);
  swift_task_dealloc(v75);
  swift_task_dealloc(*(_QWORD *)v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v98);
  swift_task_dealloc(v76);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  id v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  NSString v25;
  void *v26;
  uint64_t v27;
  uint64_t inited;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  Class isa;
  _QWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63[2];

  v1 = *(_QWORD *)(v0 + 608);
  v56 = *(_QWORD *)(v0 + 600);
  v59 = *(_QWORD *)(v0 + 592);
  v61 = *(_QWORD *)(v0 + 704);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 568);
  v4 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 512);
  sub_100068AD4();
  sub_100050020(v6, v5);
  v55 = v7;
  v58 = v8;
  v9 = *(_QWORD *)(v0 + 288);
  v10 = *(_QWORD *)(v0 + 296);
  v62 = (_QWORD *)(v0 + 264);
  sub_100022F20((_QWORD *)(v0 + 264), v9);
  v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 80))(v9, v10);
  v12 = SuspendingClock.init()();
  SuspendingClock.now.getter(v12);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v13 = SuspendingClock.Instant.duration(to:)(v1);
  v15 = v14;
  v16 = v59;
  v60 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v60(v1, v16);
  v17 = (double)Duration.components.getter(v13, v15);
  Duration.components.getter(v13, v15);
  v19 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", (double)v18 / 1.0e18 + v17);
  if (qword_10012EEA8[0] != -1)
    swift_once(qword_10012EEA8, sub_100062420);
  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "logMetric:withName:", v19, v20);

  v21 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 296);
  sub_100022F20(v62, v21);
  v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 80))(v21, v22);
  if (qword_10012EE98 != -1)
    swift_once(&qword_10012EE98, sub_100062304);
  v24 = *(char **)(v0 + 496);
  v25 = String._bridgeToObjectiveC()();
  v26 = (void *)_convertErrorToNSError(_:)(v61);
  v27 = sub_10001D138(&qword_100128288);
  inited = swift_initStackObject(v27, v0 + 120);
  *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
  *(_QWORD *)(v0 + 392) = 99;
  *(_QWORD *)(v0 + 400) = 0xE100000000000000;
  AnyHashable.init<A>(_:)(v0 + 392, &type metadata for String, &protocol witness table for String);
  v30 = *(_QWORD *)&v24[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
  v29 = *(_QWORD *)&v24[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName + 8];
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 72) = v30;
  *(_QWORD *)(inited + 80) = v29;
  swift_bridgeObjectRetain(v29);
  v31 = sub_100060E7C(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v23, "logResultForEvent:hardFailure:result:withAttributes:", v25, 1, v26, isa);

  swift_errorRetain(v61);
  v33 = (_QWORD *)(v0 + 264);
  sub_100067FA4(v62, v30, v29, 0, v61);
  swift_errorRelease();
  v34 = v24;
  swift_errorRetain(v61);
  v35 = v34;
  swift_errorRetain(v61);
  v36 = swift_bridgeObjectRetain(v58);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(char **)(v0 + 496);
  if (v39)
  {
    v41 = swift_slowAlloc(38, -1);
    v54 = (uint64_t *)swift_slowAlloc(8, -1);
    v57 = swift_slowAlloc(64, -1);
    v63[0] = v57;
    *(_DWORD *)v41 = 136315906;
    swift_bridgeObjectRetain(v58);
    *(_QWORD *)(v0 + 480) = sub_1000230D0(v55, v58, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 480, v0 + 488, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease_n(v58, 3);
    *(_WORD *)(v41 + 12) = 2112;
    swift_errorRetain(v61);
    v42 = _swift_stdlib_bridgeErrorToNSError(v61);
    *(_QWORD *)(v0 + 424) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v41 + 14, v41 + 22);
    *v54 = v42;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v41 + 22) = 2080;
    swift_bridgeObjectRetain(v29);
    *(_QWORD *)(v0 + 416) = sub_1000230D0(v30, v29, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v41 + 24, v41 + 32);
    swift_bridgeObjectRelease(v29);

    *(_WORD *)(v41 + 32) = 1024;
    v43 = *(_DWORD *)&v40[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid];

    *(_DWORD *)(v0 + 752) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 752, v0 + 756, v41 + 34, v41 + 38);

    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Proof verification %s failed with %@: %s[%d]", (uint8_t *)v41, 0x26u);
    v44 = sub_10001D138(&qword_100127730);
    swift_arrayDestroy(v54, 1, v44);
    swift_slowDealloc(v54, -1, -1);
    swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    v45 = v41;
    v33 = (_QWORD *)(v0 + 264);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n(v58, 2);
    swift_errorRelease();
    swift_errorRelease();

  }
  v46 = *(_QWORD *)(v0 + 616);
  v47 = *(_QWORD *)(v0 + 608);
  v48 = *(_QWORD *)(v0 + 592);
  v49 = *(_QWORD *)(v0 + 584);
  v50 = *(_QWORD *)(v0 + 576);
  v51 = *(_QWORD *)(v0 + 552);
  swift_willThrow(v52);
  v60(v46, v48);
  sub_100023CAC(v33);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  id v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  NSString v25;
  void *v26;
  uint64_t v27;
  uint64_t inited;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  Class isa;
  _QWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63[2];

  v1 = *(_QWORD *)(v0 + 608);
  v56 = *(_QWORD *)(v0 + 600);
  v59 = *(_QWORD *)(v0 + 592);
  v61 = *(_QWORD *)(v0 + 736);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 568);
  v4 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 512);
  sub_100068AD4();
  sub_100050020(v6, v5);
  v55 = v7;
  v58 = v8;
  v9 = *(_QWORD *)(v0 + 288);
  v10 = *(_QWORD *)(v0 + 296);
  v62 = (_QWORD *)(v0 + 264);
  sub_100022F20((_QWORD *)(v0 + 264), v9);
  v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 80))(v9, v10);
  v12 = SuspendingClock.init()();
  SuspendingClock.now.getter(v12);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v13 = SuspendingClock.Instant.duration(to:)(v1);
  v15 = v14;
  v16 = v59;
  v60 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v60(v1, v16);
  v17 = (double)Duration.components.getter(v13, v15);
  Duration.components.getter(v13, v15);
  v19 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", (double)v18 / 1.0e18 + v17);
  if (qword_10012EEA8[0] != -1)
    swift_once(qword_10012EEA8, sub_100062420);
  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "logMetric:withName:", v19, v20);

  v21 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 296);
  sub_100022F20(v62, v21);
  v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 80))(v21, v22);
  if (qword_10012EE98 != -1)
    swift_once(&qword_10012EE98, sub_100062304);
  v24 = *(char **)(v0 + 496);
  v25 = String._bridgeToObjectiveC()();
  v26 = (void *)_convertErrorToNSError(_:)(v61);
  v27 = sub_10001D138(&qword_100128288);
  inited = swift_initStackObject(v27, v0 + 120);
  *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
  *(_QWORD *)(v0 + 392) = 99;
  *(_QWORD *)(v0 + 400) = 0xE100000000000000;
  AnyHashable.init<A>(_:)(v0 + 392, &type metadata for String, &protocol witness table for String);
  v30 = *(_QWORD *)&v24[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName];
  v29 = *(_QWORD *)&v24[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_clientName + 8];
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 72) = v30;
  *(_QWORD *)(inited + 80) = v29;
  swift_bridgeObjectRetain(v29);
  v31 = sub_100060E7C(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v23, "logResultForEvent:hardFailure:result:withAttributes:", v25, 1, v26, isa);

  swift_errorRetain(v61);
  v33 = (_QWORD *)(v0 + 264);
  sub_100067FA4(v62, v30, v29, 0, v61);
  swift_errorRelease();
  v34 = v24;
  swift_errorRetain(v61);
  v35 = v34;
  swift_errorRetain(v61);
  v36 = swift_bridgeObjectRetain(v58);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(char **)(v0 + 496);
  if (v39)
  {
    v41 = swift_slowAlloc(38, -1);
    v54 = (uint64_t *)swift_slowAlloc(8, -1);
    v57 = swift_slowAlloc(64, -1);
    v63[0] = v57;
    *(_DWORD *)v41 = 136315906;
    swift_bridgeObjectRetain(v58);
    *(_QWORD *)(v0 + 480) = sub_1000230D0(v55, v58, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 480, v0 + 488, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease_n(v58, 3);
    *(_WORD *)(v41 + 12) = 2112;
    swift_errorRetain(v61);
    v42 = _swift_stdlib_bridgeErrorToNSError(v61);
    *(_QWORD *)(v0 + 424) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v41 + 14, v41 + 22);
    *v54 = v42;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v41 + 22) = 2080;
    swift_bridgeObjectRetain(v29);
    *(_QWORD *)(v0 + 416) = sub_1000230D0(v30, v29, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v41 + 24, v41 + 32);
    swift_bridgeObjectRelease(v29);

    *(_WORD *)(v41 + 32) = 1024;
    v43 = *(_DWORD *)&v40[OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_pid];

    *(_DWORD *)(v0 + 752) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 752, v0 + 756, v41 + 34, v41 + 38);

    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Proof verification %s failed with %@: %s[%d]", (uint8_t *)v41, 0x26u);
    v44 = sub_10001D138(&qword_100127730);
    swift_arrayDestroy(v54, 1, v44);
    swift_slowDealloc(v54, -1, -1);
    swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    v45 = v41;
    v33 = (_QWORD *)(v0 + 264);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n(v58, 2);
    swift_errorRelease();
    swift_errorRelease();

  }
  v46 = *(_QWORD *)(v0 + 616);
  v47 = *(_QWORD *)(v0 + 608);
  v48 = *(_QWORD *)(v0 + 592);
  v49 = *(_QWORD *)(v0 + 584);
  v50 = *(_QWORD *)(v0 + 576);
  v51 = *(_QWORD *)(v0 + 552);
  swift_willThrow(v52);
  v60(v46, v48);
  sub_100023CAC(v33);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000656E0(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v5;

  v4 = (double)((uint64_t (*)(void))Duration.components.getter)();
  Duration.components.getter(a1, a2);
  return (double)v5 / 1.0e18 + v4;
}

uint64_t sub_100065730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_100065748, 0, 0);
}

uint64_t sub_100065748()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)(**(_QWORD **)(*(_QWORD *)(v0 + 24)
                             + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
               + 176);
  v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = sub_1000657B0;
  return v4();
}

uint64_t sub_1000657B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_errorRelease();
    v3 = sub_100068CFC;
  }
  else
  {
    v3 = sub_10006581C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10006581C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 40) != 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_1000202F0(a1, &qword_100127220);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_100109AB0, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  v18 = sub_10001D138(&qword_1001282B0);
  if (v15 | v13)
  {
    v21[0] = 0;
    v21[1] = 0;
    v19 = v21;
    v21[2] = v13;
    v21[3] = v15;
  }
  else
  {
    v19 = 0;
  }
  return swift_task_create(v9, v19, v18, &unk_1001282A8, v17);
}

uint64_t sub_100065AC4(void *a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = a1;
  v9 = a2;
  v10 = a4;
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v13 = v12;

  v4[4] = v11;
  v4[5] = v13;
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v16 = v15;

  v4[6] = v14;
  v4[7] = v16;
  v17 = (_QWORD *)swift_task_alloc(dword_100128044);
  v4[8] = v17;
  *v17 = v4;
  v17[1] = sub_100065BA8;
  v17[9] = v16;
  v17[10] = v10;
  v17[7] = v13;
  v17[8] = v14;
  v17[6] = v11;
  v17[11] = swift_getObjectType(v10);
  return swift_task_switch(sub_100062550, 0, 0);
}

uint64_t sub_100065BA8(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 64);
  v6 = *(void **)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc(v5);

  v9 = *(_QWORD *)(v7 + 32);
  v8 = *(_QWORD *)(v7 + 40);
  v10 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  sub_100022F44(*(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56));
  sub_100022F44(v9, v8);
  if (v3)
  {
    v11 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease();
    ((void (**)(_QWORD, _QWORD, void *))v10)[2](v10, 0, v11);

    _Block_release(v10);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v10)[2](v10, a1, 0);
    _Block_release(v10);

  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_100065C84()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_100065C9C, 0, 0);
}

uint64_t sub_100065C9C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;

  v1 = dword_10012805C;
  v2 = *(id *)(v0 + 56);
  v3 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_100065CFC;
  return sub_100065EA8(v0 + 16, *(_QWORD *)(v0 + 56));
}

uint64_t sub_100065CFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100065D98;
  else
    v3 = sub_100065D60;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100065D60()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100065D98()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = (void *)objc_opt_self(SecXPCHelper);
  v3 = (void *)_convertErrorToNSError(_:)(v1);
  v4 = objc_msgSend(v2, "cleanseErrorForXPC:", v3);

  if (!v4)
  {
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 32) = 0;
    *(_QWORD *)(v0 + 40) = 0xE000000000000000;
    v6 = sub_10001D138(&qword_100127AE0);
    _print_unlocked<A, B>(_:_:)(v0 + 48, v0 + 32, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v7 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 40);
    v9 = sub_1000615C4();
    v5 = swift_allocError(&type metadata for SWTransparencyXPCError, v9, 0, 0);
    *v10 = v7;
    v10[1] = v8;
  }
  v11 = *(void **)(v0 + 56);
  swift_willThrow(v5);
  swift_errorRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065EA8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[93] = a2;
  v2[87] = a1;
  v3 = sub_10001D138(&qword_100127710);
  v2[99] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001D138(&qword_100127718);
  v2[105] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TransparencySWSysdiagnose(0);
  v2[106] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[107] = v6;
  v2[108] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TransparencySWSysdiagnose.StateMachine(0);
  v2[109] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[110] = v8;
  v2[111] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100065F7C, 0, 0);
}

uint64_t sub_100065F7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v1 = v0[111];
  v2 = v0[109];
  v3 = (void *)v0[93];
  v4 = swift_allocObject(&unk_100109A60, 24, 7);
  v0[112] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  v5 = v3;
  swift_asyncLet_begin(v0 + 2, 0, v2, &unk_100128278, v4, v1);
  return swift_asyncLet_get_throwing(v0 + 2, v0[111], sub_10006601C, v0 + 82);
}

uint64_t sub_10006601C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 904) = v0;
  if (v0)
    v2 = sub_1000661EC;
  else
    v2 = sub_100066044;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100066044()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;

  v1 = v0[113];
  v2 = v0[110];
  v3 = v0[109];
  v4 = v0[105];
  v5 = v0[99];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v4, v0[111], v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = TransparencySWSysdiagnose.init(stateMachine:fallback:)(v4, v5);
  v8 = TransparencySWSysdiagnose.json()(v7);
  v10 = v9;
  v0[114] = v1;
  v11 = v0[108];
  v12 = v0[107];
  v13 = v0[106];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    v14 = v0[111];
    v15 = sub_10006628C;
    v16 = v0 + 2;
    v17 = v0 + 94;
  }
  else
  {
    v18 = (uint64_t *)v0[87];
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *v18 = v8;
    v18[1] = v10;
    v14 = v0[111];
    v15 = sub_10006616C;
    v16 = v0 + 2;
    v17 = v0 + 100;
  }
  return swift_asyncLet_finish(v16, v14, v15, v17);
}

uint64_t sub_10006616C()
{
  return swift_task_switch(sub_100066180, 0, 0);
}

uint64_t sub_100066180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 888);
  v2 = *(_QWORD *)(v0 + 864);
  v3 = *(_QWORD *)(v0 + 840);
  v4 = *(_QWORD *)(v0 + 792);
  swift_release(*(_QWORD *)(v0 + 896));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000661EC()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 16, *(_QWORD *)(v0 + 888), sub_100066204, v0 + 704);
}

uint64_t sub_100066204()
{
  return swift_task_switch(sub_100066218, 0, 0);
}

uint64_t sub_100066218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 888);
  v2 = *(_QWORD *)(v0 + 864);
  v3 = *(_QWORD *)(v0 + 840);
  v4 = *(_QWORD *)(v0 + 792);
  swift_release(*(_QWORD *)(v0 + 896));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006628C()
{
  return swift_task_switch(sub_1000662A0, 0, 0);
}

uint64_t sub_1000662A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 888);
  v2 = *(_QWORD *)(v0 + 864);
  v3 = *(_QWORD *)(v0 + 840);
  v4 = *(_QWORD *)(v0 + 792);
  swift_release(*(_QWORD *)(v0 + 896));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066314(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10006632C, 0, 0);
}

uint64_t sub_10006632C()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = *(int **)(**(_QWORD **)(v0[3] + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
               + 200);
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_10006639C;
  return v4(v0[2]);
}

uint64_t sub_10006639C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100066500(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100128054;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_100066578;
  v6[7] = v5;
  return swift_task_switch(sub_100065C9C, 0, 0);
}

uint64_t sub_100066578(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 32);
  v9 = *(void **)(*v3 + 16);
  v10 = *v3;
  swift_task_dealloc(v8);

  if (v4)
  {
    v11 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease();
    isa = 0;
    v13 = (void *)v11;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100022F44(a1, a2);
    v11 = 0;
    v13 = isa;
  }
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_10006664C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v3[8] = swift_getObjectType(v2);
  return swift_task_switch(sub_100066694, 0, 0);
}

uint64_t sub_100066694()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t **v4;

  v1 = (void *)v0[7];
  v2 = dword_10012806C;
  swift_bridgeObjectRetain(v0[6]);
  v3 = v1;
  v4 = (uint64_t **)swift_task_alloc(v2);
  v0[9] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_1000666F0;
  return sub_1000668A4((uint64_t)v4, v0[5], v0[6], v0[7]);
}

uint64_t sub_1000666F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10006678C;
  else
    v3 = sub_100066754;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100066754()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006678C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = (void *)objc_opt_self(SecXPCHelper);
  v3 = (void *)_convertErrorToNSError(_:)(v1);
  v4 = objc_msgSend(v2, "cleanseErrorForXPC:", v3);

  if (!v4)
  {
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    v6 = sub_10001D138(&qword_100127AE0);
    _print_unlocked<A, B>(_:_:)(v0 + 32, v0 + 16, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v9 = sub_1000615C4();
    v5 = swift_allocError(&type metadata for SWTransparencyXPCError, v9, 0, 0);
    *v10 = v7;
    v10[1] = v8;
  }
  v11 = *(_QWORD *)(v0 + 48);
  v12 = *(void **)(v0 + 56);
  swift_willThrow(v5);
  swift_errorRelease();
  swift_bridgeObjectRelease(v11);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000668A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  v5 = sub_10001D138(&qword_100128268);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SWTFollowUpType(0);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[8] = v7;
  v4[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006692C, 0, 0);
}

uint64_t sub_10006692C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;

  if (qword_10012EE90 != -1)
    swift_once(&qword_10012EE90, sub_1000610EC);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Logger(0);
  sub_100020804(v2, (uint64_t)qword_100131558);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 24);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v29 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 16) = sub_1000230D0(v8, v7, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "posting cfu %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 32), 2);
  }

  v11 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 48);
  v15 = *(_QWORD *)(v0 + 24);
  v14 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(v14);
  SWTFollowUpType.init(rawValue:)(v15, v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11);
  v17 = *(_QWORD *)(v0 + 72);
  if (v16 == 1)
  {
    v18 = *(_QWORD *)(v0 + 48);
    sub_1000202F0(v18, &qword_100128268);
    v19 = sub_1000615C4();
    v20 = swift_allocError(&type metadata for SWTransparencyXPCError, v19, 0, 0);
    *v21 = xmmword_1000DD160;
    swift_willThrow(v20);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 40);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    v24 = *(_QWORD *)(v23 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine);
    v25 = sub_100092480();
    *(_QWORD *)(v0 + 80) = v25;
    v26 = *(int **)(*(_QWORD *)v24 + 144);
    v28 = (int *)((char *)v26 + *v26);
    v27 = (_QWORD *)swift_task_alloc(v26[1]);
    *(_QWORD *)(v0 + 88) = v27;
    *v27 = v0;
    v27[1] = sub_100066C10;
    return ((uint64_t (*)(_QWORD, void *))v28)(*(_QWORD *)(v0 + 72), v25);
  }
}

uint64_t sub_100066C10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100066C6C, 0, 0);
}

uint64_t sub_100066C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v1, *(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066DEC(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100128064;
  v10 = a3;
  v11 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v11;
  *v11 = v3;
  v11[1] = sub_100066E98;
  v11[6] = v8;
  v11[7] = v10;
  v11[5] = v6;
  v11[8] = swift_getObjectType(v10);
  return swift_task_switch(sub_100066694, 0, 0);
}

uint64_t sub_100066E98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD *)(*v1 + 32);
  v2 = *(_QWORD *)(*v1 + 40);
  v4 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease(v3);
  v6 = *(_QWORD *)(v5 + 24);
  if (v0)
  {
    v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 16))(*(_QWORD *)(v5 + 24), 0);
  }
  _Block_release(*(const void **)(v5 + 24));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100066F40()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  *(_QWORD *)(v1 + 48) = swift_getObjectType(v0);
  return swift_task_switch(sub_100066F84, 0, 0);
}

uint64_t sub_100066F84()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;

  v1 = dword_10012807C;
  v2 = *(id *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_100066FF0;
  v3[2] = *(_QWORD *)(v0 + 40);
  return swift_task_switch(sub_10006717C, 0, 0);
}

uint64_t sub_100066FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100067054;
  else
    v3 = sub_10006202C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100067054()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = (void *)objc_opt_self(SecXPCHelper);
  v3 = (void *)_convertErrorToNSError(_:)(v1);
  v4 = objc_msgSend(v2, "cleanseErrorForXPC:", v3);

  if (!v4)
  {
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    v6 = sub_10001D138(&qword_100127AE0);
    _print_unlocked<A, B>(_:_:)(v0 + 32, v0 + 16, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v9 = sub_1000615C4();
    v5 = swift_allocError(&type metadata for SWTransparencyXPCError, v9, 0, 0);
    *v10 = v7;
    v10[1] = v8;
  }
  v11 = *(void **)(v0 + 40);
  swift_willThrow(v5);
  swift_errorRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch(sub_10006717C, 0, 0);
}

uint64_t sub_10006717C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  if (qword_10012EE90 != -1)
    swift_once(&qword_10012EE90, sub_1000610EC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100020804(v1, (uint64_t)qword_100131558);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "clearing all cfus", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16);

  v7 = *(int **)(**(_QWORD **)(v6 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
               + 152);
  v10 = (uint64_t (*)(void))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v0 + 24) = v8;
  *v8 = v0;
  v8[1] = sub_100067298;
  return v10();
}

uint64_t sub_100067298()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100067400(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100128074;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_100067484;
  v6[5] = v5;
  v6[6] = swift_getObjectType(v5);
  return swift_task_switch(sub_100066F84, 0, 0);
}

uint64_t sub_100067484()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *(void **)(*v1 + 16);
  v4 = *v1;
  swift_task_dealloc(v2);

  v5 = *(_QWORD *)(v4 + 24);
  if (v0)
  {
    v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v4 + 24), 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100067524()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10006753C, 0, 0);
}

uint64_t sub_10006753C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(unint64_t, uint64_t);

  if (qword_10012EE90 != -1)
    swift_once(&qword_10012EE90, sub_1000610EC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100020804(v1, (uint64_t)qword_100131558);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "wait for ready", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16);

  v7 = *(int **)(**(_QWORD **)(v6 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_stateMachine)
               + 128);
  v10 = (uint64_t (*)(unint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v0 + 24) = v8;
  *v8 = v0;
  v8[1] = sub_100067298;
  return v10(0xA055690D9DB80000, 1);
}

uint64_t sub_100067784(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100128084;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_100068CF8;
  v6[2] = v5;
  return swift_task_switch(sub_10006753C, 0, 0);
}

uint64_t sub_1000677FC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  *(_QWORD *)(v1 + 48) = swift_getObjectType(v0);
  return swift_task_switch(sub_100067840, 0, 0);
}

uint64_t sub_100067840()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;

  v1 = dword_100128094;
  v2 = *(id *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_1000678AC;
  v3[2] = *(_QWORD *)(v0 + 40);
  return swift_task_switch(sub_100067928, 0, 0);
}

uint64_t sub_1000678AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100068CF0;
  else
    v3 = sub_100068CEC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100067910(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch(sub_100067928, 0, 0);
}

uint64_t sub_100067928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t);

  if (qword_10012EE90 != -1)
    swift_once(&qword_10012EE90, sub_1000610EC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100020804(v1, (uint64_t)qword_100131558);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "running daily", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16);

  v7 = *(_QWORD *)(v6 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_daemon);
  if (!v7)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC15swtransparencyd31SWTransparencyXPCImplementation_daemon + 8);
  ObjectType = swift_getObjectType(v7);
  v10 = *(int **)(v8 + 8);
  v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  *(_QWORD *)(v0 + 24) = v11;
  *v11 = v0;
  v11[1] = sub_100032C20;
  return v13(ObjectType, v8);
}

uint64_t sub_100067B94(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012808C;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_100068CF8;
  v6[5] = v5;
  v6[6] = swift_getObjectType(v5);
  return swift_task_switch(sub_100067840, 0, 0);
}

void sub_100067C18()
{
  _swift_stdlib_reportUnimplementedInitializer("swtransparencyd.SWTransparencyXPCImplementation", 47, "init()", 6, 0);
  __break(1u);
}

void *sub_100067CBC()
{
  return &unk_100127FE8;
}

uint64_t sub_100067CC8()
{
  return sub_10004BFD4(&qword_100127FE8, &off_100127FF0);
}

uint64_t sub_100067CD8(uint64_t a1, uint64_t a2)
{
  return sub_10004C034(a1, a2, &qword_100127FE8, (uint64_t *)&off_100127FF0);
}

uint64_t (*sub_100067CE8(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&unk_100127FE8, a1, 33, 0);
  return j__swift_endAccess;
}

unint64_t sub_100067D28()
{
  return 0xD000000000000038;
}

uint64_t sub_100067D44(uint64_t a1, uint64_t a2)
{
  return sub_100067D54(a1, a2, &qword_100127FE8, &off_100127FF0);
}

uint64_t sub_100067D54(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(a3, v8, 0, 0);
  v6 = *a3;
  swift_bridgeObjectRetain(*a4);
  return v6;
}

uint64_t sub_100067DA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000689C4();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100067DD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000689C4();
  return Error<>._code.getter(a1, v2);
}

unint64_t sub_100067DF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100067E28(a1, v4);
}

unint64_t sub_100067E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_100068C7C(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100068CB8((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_100067EEC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_100067F54;
  return v5(v2 + 32);
}

uint64_t sub_100067F54()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_100067FA4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v10 = sub_10001D138(&qword_100127840);
  v11 = *(_QWORD *)(sub_10001D138(&qword_100127848) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v10, v14 + 3 * v12, v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_1000DD800;
  v16 = (_QWORD *)(v15 + v14);
  *v16 = 0x73736563637573;
  v16[1] = 0xE700000000000000;
  EventValue.init(BOOLeanLiteral:)(a4);
  v17 = (_QWORD *)((char *)v16 + v12);
  *v17 = 0x746E65696C63;
  v17[1] = 0xE600000000000000;
  swift_bridgeObjectRetain(a3);
  EventValue.init(stringLiteral:)(a2, a3);
  v18 = (_QWORD *)((char *)v16 + 2 * v12);
  *v18 = 7761509;
  v18[1] = 0xE300000000000000;
  v19 = a1[3];
  v20 = a1[4];
  sub_100022F20(a1, v19);
  v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 48))(v19, v20);
  v22 = (unint64_t)objc_msgSend(v21, "currentEnvironment");

  if ((v22 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    EventValue.init(integerLiteral:)(v22);
    v23 = sub_10003F064(v15);
    v24 = a1[3];
    v25 = a1[4];
    sub_100022F20(a1, v24);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v25 + 88))(v28, v24, v25);
    v26 = v29;
    v27 = v30;
    sub_100022F20(v28, v29);
    (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v27 + 8))(0x7270796676747753, 0xEC00000073666F6FLL, a5, v23, v26, v27);
    swift_bridgeObjectRelease(v23);
    sub_100023CAC(v28);
  }
}

unint64_t sub_1000681B4()
{
  unint64_t result;

  result = qword_100128098;
  if (!qword_100128098)
  {
    result = swift_getWitnessTable(&unk_1000DDDF4, &type metadata for SWTXPCError);
    atomic_store(result, (unint64_t *)&qword_100128098);
  }
  return result;
}

unint64_t sub_1000681FC()
{
  unint64_t result;

  result = qword_1001280A0;
  if (!qword_1001280A0)
  {
    result = swift_getWitnessTable(&unk_1000DDEE4, &type metadata for SWTXPCError);
    atomic_store(result, (unint64_t *)&qword_1001280A0);
  }
  return result;
}

uint64_t sub_100068244(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for SWTransparencyXPCError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for SWTransparencyXPCError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SWTransparencyXPCError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SWTransparencyXPCError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

_QWORD *sub_100068438(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTransparencyXPCError()
{
  return &type metadata for SWTransparencyXPCError;
}

uint64_t type metadata accessor for SWTransparencyXPCImplementation()
{
  return objc_opt_self(_TtC15swtransparencyd31SWTransparencyXPCImplementation);
}

uint64_t storeEnumTagSinglePayload for SWTXPCError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000684C8 + 4 * byte_1000DDD20[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000684E8 + 4 * byte_1000DDD25[v4]))();
}

_BYTE *sub_1000684C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000684E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000684F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000684F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100068500(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100068508(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SWTXPCError()
{
  return &type metadata for SWTXPCError;
}

uint64_t sub_100068528()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100128134);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100020638;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100128130 + dword_100128130))(v2, v3);
}

uint64_t sub_100068598()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10012815C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100020638;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100128158 + dword_100128158))(v2, v3);
}

uint64_t sub_100068608()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10012817C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10001E4EC;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100128178 + dword_100128178))(v2, v3);
}

uint64_t sub_100068674()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000686A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10012819C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100020638;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100128198 + dword_100128198))(v2, v3, v4);
}

uint64_t sub_100068720()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1001281BC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100020638;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1001281B8 + dword_1001281B8))(v2, v3);
}

uint64_t sub_10006878C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000687C8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_1001281DC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100020638;
  return ((uint64_t (*)(void *, void *, void *, void *))((char *)&dword_1001281D8 + dword_1001281D8))(v2, v3, v5, v4);
}

uint64_t sub_10006884C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1001281FC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100020638;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1001281F8 + dword_1001281F8))(v2, v3);
}

uint64_t sub_1000688BC()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10012821C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100020638;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100128218 + dword_100128218))(v2, v3);
}

uint64_t sub_10006892C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100068958()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10012823C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100020638;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100128238 + dword_100128238))(v2, v3);
}

unint64_t sub_1000689C4()
{
  unint64_t result;

  result = qword_100128258;
  if (!qword_100128258)
  {
    result = swift_getWitnessTable(&unk_1000DDEA4, &type metadata for SWTXPCError);
    atomic_store(result, (unint64_t *)&qword_100128258);
  }
  return result;
}

unint64_t sub_100068A08()
{
  unint64_t result;

  result = qword_100128260;
  if (!qword_100128260)
  {
    result = swift_getWitnessTable(&unk_1000DDDB4, &type metadata for SWTransparencyXPCError);
    atomic_store(result, (unint64_t *)&qword_100128260);
  }
  return result;
}

uint64_t sub_100068A4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100068A70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100128274);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001E4EC;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_10006632C, 0, 0);
}

unint64_t sub_100068AD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100128280;
  if (!qword_100128280)
  {
    v1 = objc_opt_self(ATLogProofs);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100128280);
  }
  return result;
}

unint64_t sub_100068B10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001271B0[0];
  if (!qword_1001271B0[0])
  {
    v1 = type metadata accessor for KTSWDB();
    result = swift_getWitnessTable(&unk_1000DCBDC, v1);
    atomic_store(result, qword_1001271B0);
  }
  return result;
}

uint64_t sub_100068B58()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100068B84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_100128294);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100020638;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100065748, 0, 0);
}

uint64_t sub_100068BE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100068C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1001282A4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100020638;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001282A0 + dword_1001282A0))(a1, v4);
}

uint64_t sub_100068C7C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100068CB8(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t SWTCFUInfo.posted.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SWTCFUInfo.expire.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SWTCFUInfo.slh.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100068D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  double v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;

  v8 = sub_10001D138(&qword_100127710);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = Date.timeIntervalSince1970.getter(v9);
  sub_10002AC5C(a2, (uint64_t)v11, &qword_100127710);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13);
  v16 = v15;
  if ((_DWORD)v15 == 1)
  {
    sub_1000202F0(a2, &qword_100127710);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
    result = sub_1000202F0((uint64_t)v11, &qword_100127710);
    v18 = 0.0;
  }
  else
  {
    v18 = Date.timeIntervalSince1970.getter(v15);
    sub_1000202F0(a2, &qword_100127710);
    v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(a1, v13);
    result = ((uint64_t (*)(char *, uint64_t))v19)(v11, v13);
  }
  *(double *)a4 = v12;
  *(_BYTE *)(a4 + 8) = 0;
  *(double *)(a4 + 16) = v18;
  *(_BYTE *)(a4 + 24) = v16 == 1;
  *(_QWORD *)(a4 + 32) = a3;
  return result;
}

double sub_100068E90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  sub_10006C794(a1, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v6;
  return result;
}

unint64_t sub_100068ED0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  char v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  _OWORD v19[2];
  __int128 v20;
  void *v21;
  _BYTE v22[40];
  unint64_t v23;
  _BYTE v24[16];
  _BYTE v25[16];
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;

  v1 = v0;
  v2 = sub_100060E7C((uint64_t)_swiftEmptyArrayStorage);
  v23 = v2;
  sub_10006CB78(v1, (uint64_t)v25);
  sub_10006CB78((uint64_t)v25, (uint64_t)&v26);
  if ((v27 & 1) == 0)
  {
    v3 = v26;
    *(_QWORD *)&v20 = 112;
    *((_QWORD *)&v20 + 1) = 0xE100000000000000;
    AnyHashable.init<A>(_:)(&v20, &type metadata for String, &protocol witness table for String);
    v21 = &type metadata for Double;
    *(_QWORD *)&v20 = v3;
    sub_10002E1B0(&v20, v19);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v28 = v2;
    sub_10006BB98(v19, (uint64_t)v22, isUniquelyReferenced_nonNull_native);
    v2 = v28;
    v23 = v28;
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_100068CB8((uint64_t)v22);
  }
  sub_10006CB78(v1 + 16, (uint64_t)v24);
  sub_10006CB78((uint64_t)v24, (uint64_t)&v28);
  if ((v29 & 1) == 0)
  {
    v5 = v28;
    *(_QWORD *)&v20 = 101;
    *((_QWORD *)&v20 + 1) = 0xE100000000000000;
    AnyHashable.init<A>(_:)(&v20, &type metadata for String, &protocol witness table for String);
    v21 = &type metadata for Double;
    *(_QWORD *)&v20 = v5;
    sub_10002E1B0(&v20, v19);
    v6 = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_10006BB98(v19, (uint64_t)v22, v6);
    v23 = v2;
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_100068CB8((uint64_t)v22);
  }
  *(_QWORD *)&v20 = 115;
  *((_QWORD *)&v20 + 1) = 0xE100000000000000;
  AnyHashable.init<A>(_:)(&v20, &type metadata for String, &protocol witness table for String);
  v7 = *(_QWORD *)(v1 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 16);
    v9 = _swiftEmptyArrayStorage;
    if (v8)
    {
      *(_QWORD *)&v20 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v7);
      sub_10006C488(0, v8, 0);
      v9 = (_QWORD *)v20;
      v10 = (unint64_t *)(v7 + 40);
      do
      {
        v11 = *(v10 - 1);
        v12 = *v10;
        sub_100022F88(v11, *v10);
        v13 = Data.base64EncodedString(options:)(0);
        sub_100022F44(v11, v12);
        *(_QWORD *)&v20 = v9;
        v15 = v9[2];
        v14 = v9[3];
        if (v15 >= v14 >> 1)
        {
          sub_10006C488(v14 > 1, v15 + 1, 1);
          v9 = (_QWORD *)v20;
        }
        v10 += 2;
        v9[2] = v15 + 1;
        *(Swift::String *)&v9[2 * v15 + 4] = v13;
        --v8;
      }
      while (v8);
      sub_10006CBC0(v1);
      v2 = v23;
    }
    v21 = (void *)sub_10001D138(&qword_1001282E0);
    *(_QWORD *)&v20 = v9;
    sub_10002E1B0(&v20, v19);
    v16 = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_10006BB98(v19, (uint64_t)v22, v16);
    v17 = v2;
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_100068CB8((uint64_t)v22);
  }
  else
  {
    sub_10006AF8C((uint64_t)v22, &v20);
    sub_100068CB8((uint64_t)v22);
    sub_1000202F0((uint64_t)&v20, &qword_100126F70);
    return v23;
  }
  return v17;
}

unint64_t sub_1000691E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D138(&qword_1001283D0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  v22 = v3 + 64;
  swift_retain(v3);
  v21 = v1;
  v6 = (_QWORD *)(v1 + 80);
  while (1)
  {
    v7 = *(v6 - 6);
    v8 = *(v6 - 5);
    v9 = *(v6 - 4);
    v10 = *((_BYTE *)v6 - 24);
    v11 = *(v6 - 2);
    v12 = *((_BYTE *)v6 - 8);
    v13 = *v6;
    swift_bridgeObjectRetain(*v6);
    swift_bridgeObjectRetain(v8);
    result = sub_10003AFB8(v7, v8);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v4[6] + 16 * result);
    *v16 = v7;
    v16[1] = v8;
    v17 = v4[7] + 40 * result;
    *(_QWORD *)v17 = v9;
    *(_BYTE *)(v17 + 8) = v10;
    *(_QWORD *)(v17 + 16) = v11;
    *(_BYTE *)(v17 + 24) = v12;
    *(_QWORD *)(v17 + 32) = v13;
    v18 = v4[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v6 += 7;
    v4[2] = v20;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v21;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100069340@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC15swtransparencyd11SWTFollowUp_log;
  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100069384()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_1000693B8();
  return v1;
}

uint64_t sub_1000693B8()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  swift_defaultActor_initialize(v0);
  if (FLFollowUpController)
  {
    v1 = objc_allocWithZone((Class)FLFollowUpController);
    v2 = String._bridgeToObjectiveC()();
    v3 = objc_msgSend(v1, "initWithClientIdentifier:", v2);

  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(v0 + 112) = v3;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0x6F6C6C6F46545753, 0xEB00000000705577, 0x7075776F6C6C6F66, 0xE800000000000000);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v0 + OBJC_IVAR____TtC15swtransparencyd11SWTFollowUp_log, v7, v4);
  return v0;
}

void *sub_1000694D8()
{
  return &unk_100109B80;
}

unint64_t sub_1000694E4()
{
  return 0xD000000000000019;
}

uint64_t sub_100069508(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001D138(&qword_1001282B8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_100023CCC(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10002E1B0(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10002E1B0(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10002E1B0(v37, v38);
    sub_10002E1B0(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10002E1B0(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_10004BA60(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1000698D0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(char *, uint64_t);
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  int v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  Swift::String v63;
  void *object;
  unint64_t v65;
  NSString v66;
  uint64_t v67;
  uint64_t v68;
  NSString v69;
  NSString v70;
  NSString v71;
  unint64_t v72;
  Class isa;
  uint64_t v74;
  Class v75;
  NSString v76;
  unsigned int v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  unint64_t v96;
  _BYTE v97[16];
  double v98;
  char v99;

  v5 = v3;
  v90 = a3;
  v86 = a2;
  v7 = type metadata accessor for Date(0);
  v88 = *(_QWORD *)(v7 - 8);
  v89 = v7;
  __chkstk_darwin(v7);
  v87 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SWTFollowUpType(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v92 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v82 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v93 = a1;
  v91 = v15;
  v16 = ((uint64_t (*)(char *, uint64_t, uint64_t))v15)((char *)&v82 - v13, a1, v9);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v84 = v3;
    v20 = (uint8_t *)v19;
    v21 = (void *)swift_slowAlloc(32, -1);
    v95 = v21;
    v85 = v4;
    *(_DWORD *)v20 = 136315138;
    v83 = v20 + 4;
    v22 = SWTFollowUpType.rawValue.getter();
    v24 = v23;
    v94 = sub_1000230D0(v22, v23, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v83, v20 + 12);
    swift_bridgeObjectRelease(v24);
    v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v14, v9);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "postCFU: %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v26 = v20;
    v27 = v84;
    swift_slowDealloc(v26, -1, -1);

    v28 = *(void **)(v27 + 112);
    if (!v28)
      return;
  }
  else
  {

    v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v14, v9);
    v28 = *(void **)(v5 + 112);
    if (!v28)
      return;
  }
  v29 = v92;
  v91(v92, v93, v9);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v29, v9);
  if (v30 == enum case for SWTFollowUpType.rollback(_:))
  {
    v31 = v28;
    v92 = (char *)sub_10006CBE8(0xD000000000000012, 0x80000001000E3AB0, 0xD000000000000021, 0x80000001000E3AD0);
    v33 = v32;
    v34 = 0xD000000000000038;
    v35 = 0x80000001000E3B00;
    v36 = "ENGINEERING UI: Tree was rolled back to an untrusted key";
  }
  else
  {
    if (v30 != enum case for SWTFollowUpType.treeFork(_:))
    {
      v25(v92, v9);
      return;
    }
    v37 = v28;
    v92 = (char *)sub_10006CBE8(0xD000000000000012, 0x80000001000E39E0, 0x742064656B726F46, 0xEB00000000656572);
    v33 = v38;
    v34 = 0xD000000000000053;
    v35 = 0x80000001000E3A00;
    v36 = "ENGINEERING UI: Tree was Tree was forked, and have not been repaired in a long time";
  }
  v91 = (void (*)(char *, uint64_t, uint64_t))sub_10006CBE8(0xD000000000000011, v35, v34, (unint64_t)(v36 - 32) | 0x8000000000000000);
  v40 = v39;
  v41 = sub_10001D138(&qword_100127F08);
  v42 = swift_allocObject(v41, 40, 7);
  *(_OWORD *)(v42 + 16) = xmmword_1000DDBE0;
  v43 = v86[3];
  v44 = v86[4];
  sub_100022F20(v86, v43);
  v45 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v44 + 48))(v43, v44);
  v46 = objc_msgSend(v45, "swtCFUDetailsURL");

  if (v46)
  {
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v49 = v48;

  }
  else
  {
    v47 = 0;
    v49 = 0;
  }
  sub_10006CDEC(v47, v49);
  v51 = v50;
  v52 = swift_bridgeObjectRelease(v49);
  *(_QWORD *)(v42 + 32) = v51;
  v95 = (id)v42;
  v53 = specialized Array._endMutation()(v52);
  v94 = (uint64_t)v95;
  v54 = v87;
  v55 = Date.init()(v53);
  v56 = Date.timeIntervalSince1970.getter(v55);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v54, v89);
  sub_10006CB78(v90, (uint64_t)v97);
  sub_10006CB78((uint64_t)v97, (uint64_t)&v98);
  if ((v99 & 1) == 0 && v98 + 1209600.0 < v56)
  {
    sub_10006D098();
    v58 = v57;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v60 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v59 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v60 >= v59 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
    v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
    specialized Array._endMutation()(v61);
  }
  v62 = objc_msgSend(objc_allocWithZone((Class)FLFollowUpItem), "init");
  v95 = (id)0xD000000000000019;
  v96 = 0x80000001000E3980;
  v63._countAndFlagsBits = SWTFollowUpType.rawValue.getter();
  object = v63._object;
  String.append(_:)(v63);
  swift_bridgeObjectRelease(object);
  v65 = v96;
  v66 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v65);
  objc_msgSend(v62, "setUniqueIdentifier:", v66);

  static String._unconditionallyBridgeFromObjectiveC(_:)(FLGroupIdentifierAccount);
  v68 = v67;
  v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v68);
  objc_msgSend(v62, "setGroupIdentifier:", v69);

  v70 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33);
  objc_msgSend(v62, "setTitle:", v70);

  v71 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  objc_msgSend(v62, "setInformativeText:", v71);

  v72 = sub_100068ED0();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v72);
  objc_msgSend(v62, "setUserInfo:", isa);

  v74 = v94;
  sub_10002E3EC(0, &qword_1001282E8, FLFollowUpAction_ptr);
  v75 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v74);
  objc_msgSend(v62, "setActions:", v75);

  v76 = String._bridgeToObjectiveC()();
  objc_msgSend(v62, "setExtensionIdentifier:", v76);

  v95 = 0;
  v77 = objc_msgSend(v28, "postFollowUpItem:error:", v62, &v95);
  v78 = v95;
  if (v77)
  {
    v79 = v95;

  }
  else
  {
    v80 = v95;
    _convertNSErrorToError(_:)(v78);

    swift_willThrow(v81);
  }
}

void sub_10006A054(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  int64_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  Class isa;
  unsigned __int8 v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21[2];
  _QWORD *v22;

  v2 = *(void **)(v1 + 112);
  if (v2)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      v22 = _swiftEmptyArrayStorage;
      v20 = v2;
      sub_10006C488(0, v4, 0);
      v5 = _swiftEmptyArrayStorage;
      v6 = (void **)(a1 + 40);
      do
      {
        v7 = (uint64_t)*(v6 - 1);
        v8 = *v6;
        v21[0] = (id)0xD000000000000019;
        v21[1] = (id)0x80000001000E3980;
        swift_bridgeObjectRetain(v8);
        v9._countAndFlagsBits = v7;
        v9._object = v8;
        String.append(_:)(v9);
        swift_bridgeObjectRelease(v8);
        v22 = v5;
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
        {
          sub_10006C488(v10 > 1, v11 + 1, 1);
          v5 = v22;
        }
        v6 += 2;
        v5[2] = v11 + 1;
        v12 = &v5[2 * v11];
        v12[4] = 0xD000000000000019;
        v12[5] = 0x80000001000E3980;
        --v4;
      }
      while (v4);
      v13 = sub_10006A23C((uint64_t)v5);
      swift_release(v5);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v13);
      v21[0] = 0;
      v15 = objc_msgSend(v20, "clearPendingFollowUpItemsWithUniqueIdentifiers:error:", isa, v21);

      v16 = v21[0];
      if ((v15 & 1) != 0)
      {
        v17 = v21[0];
      }
      else
      {
        v18 = v21[0];
        _convertNSErrorToError(_:)(v16);

        swift_willThrow(v19);
      }

    }
  }
}

_QWORD *sub_10006A23C(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = _swiftEmptyArrayStorage;
    sub_10006C4A4(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10006C4A4(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10006C4A4(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v4 += 2;
      v2[2] = v7 + 1;
      sub_10002E1B0(v10, &v2[4 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t sub_10006A360()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  unint64_t result;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v1 = *(void **)(v0 + 112);
  if (!v1)
    return sub_1000691E8((uint64_t)_swiftEmptyArrayStorage);
  v62 = 0;
  v2 = v1;
  v3 = objc_msgSend(v2, "pendingFollowUpItems:", &v62);
  v4 = (id)v62;
  if (v3)
  {
    v5 = v3;
    v57 = v2;
    v6 = sub_10002E3EC(0, &qword_1001282F0, FLFollowUpItem_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);
    v8 = v4;

    v62 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v7 >> 62)
      goto LABEL_20;
    v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
    {
LABEL_24:
      swift_bridgeObjectRelease(v7);
      v23 = (uint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
        goto LABEL_55;
      goto LABEL_25;
    }
    while (1)
    {
      v60 = v7 & 0xC000000000000001;
      v10 = 4;
      while (1)
      {
        v13 = v60
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v7)
            : *(id *)(v7 + 8 * v10);
        v14 = v13;
        v15 = v10 - 3;
        if (__OFADD__(v10 - 4, 1))
          break;
        v16 = v7;
        v17 = objc_msgSend(v13, "uniqueIdentifier");
        if (!v17)
        {
          __break(1u);
LABEL_57:
          __break(1u);
        }
        v18 = v17;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v20 = v19;

        v21._countAndFlagsBits = 0xD000000000000019;
        v21._object = (void *)0x80000001000E3980;
        LOBYTE(v18) = String.hasPrefix(_:)(v21);
        swift_bridgeObjectRelease(v20);
        if ((v18 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v11 = *(_QWORD *)(v62 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
          v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v14);
          specialized ContiguousArray._endMutation()(v12);
        }
        else
        {

        }
        v7 = v16;
        ++v10;
        if (v15 == v9)
        {
          swift_bridgeObjectRelease(v16);
          v23 = v62;
          if ((v62 & 0x8000000000000000) != 0)
            goto LABEL_55;
LABEL_25:
          if ((v23 & 0x4000000000000000) != 0)
            goto LABEL_55;
          v26 = *(_QWORD *)(v23 + 16);
          swift_retain(v23);
LABEL_27:
          v22 = &_swiftEmptyDictionarySingleton;
          if (!v26)
          {
LABEL_50:
            swift_release_n(v23, 2);

            return (unint64_t)v22;
          }
          v59 = v23 & 0xC000000000000001;
          v27 = 4;
          v58 = v23;
          while (1)
          {
            if (v59)
              v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27 - 4, v23);
            else
              v30 = *(id *)(v23 + 8 * v27);
            v31 = v30;
            if (__OFADD__(v27 - 4, 1))
            {
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              v55 = swift_retain(v23);
              v56 = swift_bridgeObjectRetain(v55);
              v26 = _CocoaArrayWrapper.endIndex.getter(v56);
              swift_release(v23);
              goto LABEL_27;
            }
            v61 = v27 - 3;
            v32 = objc_msgSend(v30, "userInfo");
            if (v32)
            {
              v33 = v32;
              v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v32, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

            }
            else
            {
              v34 = 0;
            }
            sub_10006C794(v34, (uint64_t)&v63);
            v35 = objc_msgSend(v31, "uniqueIdentifier");
            if (!v35)
              goto LABEL_57;
            v36 = v35;
            v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
            v23 = v38;

            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
            v62 = (unint64_t)v22;
            v41 = sub_10003AFB8(v37, v23);
            v42 = v22[2];
            v43 = (v40 & 1) == 0;
            v44 = v42 + v43;
            if (__OFADD__(v42, v43))
              goto LABEL_53;
            v45 = v40;
            if (v22[3] >= v44)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                v22 = (_QWORD *)v62;
                if ((v40 & 1) != 0)
                  goto LABEL_29;
              }
              else
              {
                sub_10006C2A8();
                v22 = (_QWORD *)v62;
                if ((v45 & 1) != 0)
                  goto LABEL_29;
              }
            }
            else
            {
              sub_10006B684(v44, isUniquelyReferenced_nonNull_native);
              v46 = sub_10003AFB8(v37, v23);
              if ((v45 & 1) != (v47 & 1))
              {
                result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
                __break(1u);
                return result;
              }
              v41 = v46;
              v22 = (_QWORD *)v62;
              if ((v45 & 1) != 0)
              {
LABEL_29:
                v28 = v22[7] + 40 * v41;
                swift_bridgeObjectRelease(*(_QWORD *)(v28 + 32));
                v29 = v64;
                *(_OWORD *)v28 = v63;
                *(_OWORD *)(v28 + 16) = v29;
                *(_QWORD *)(v28 + 32) = v65;
                goto LABEL_30;
              }
            }
            v22[(v41 >> 6) + 8] |= 1 << v41;
            v48 = (uint64_t *)(v22[6] + 16 * v41);
            *v48 = v37;
            v48[1] = v23;
            v49 = v22[7] + 40 * v41;
            v50 = v64;
            *(_OWORD *)v49 = v63;
            *(_OWORD *)(v49 + 16) = v50;
            *(_QWORD *)(v49 + 32) = v65;
            v51 = v22[2];
            v52 = __OFADD__(v51, 1);
            v53 = v51 + 1;
            if (v52)
              goto LABEL_54;
            v22[2] = v53;
            swift_bridgeObjectRetain(v23);
LABEL_30:

            swift_bridgeObjectRelease(v23);
            swift_bridgeObjectRelease(0x8000000000000000);
            ++v27;
            v23 = v58;
            if (v61 == v26)
              goto LABEL_50;
          }
        }
      }
      __break(1u);
LABEL_20:
      if (v7 < 0)
        v25 = v7;
      else
        v25 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v9 = _CocoaArrayWrapper.endIndex.getter(v25);
      swift_bridgeObjectRelease(v7);
      if (!v9)
        goto LABEL_24;
    }
  }
  v22 = (id)v62;
  _convertNSErrorToError(_:)(v4);

  swift_willThrow(v24);
  return (unint64_t)v22;
}

uint64_t sub_10006A890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = type metadata accessor for SWTFollowUpType(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static SWTFollowUpType.allCases.getter(v3);
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v23 = v0;
    v27 = _swiftEmptyArrayStorage;
    sub_10006C488(0, v8, 0);
    v9 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v22 = v7;
    v10 = v7 + v9;
    v11 = *(_QWORD *)(v2 + 72);
    v24 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v2 + 16);
    v25 = v11;
    v26 = v2;
    do
    {
      v12 = v24(v5, v10, v1);
      v13 = SWTFollowUpType.rawValue.getter(v12);
      v15 = v14;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      v16 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      {
        sub_10006C488(0, v16[2] + 1, 1);
        v16 = v27;
      }
      v18 = v16[2];
      v17 = v16[3];
      if (v18 >= v17 >> 1)
      {
        sub_10006C488(v17 > 1, v18 + 1, 1);
        v16 = v27;
      }
      v16[2] = v18 + 1;
      v19 = &v16[2 * v18];
      v19[4] = v13;
      v19[5] = v15;
      v2 = v26;
      v10 += v25;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease(v22);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    v16 = _swiftEmptyArrayStorage;
  }
  sub_10006A054((uint64_t)v16);
  return swift_bridgeObjectRelease(v16);
}

uint64_t *sub_10006AA50()
{
  return &qword_1001282C8;
}

uint64_t sub_10006AA5C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&qword_1001282C8, v2, 0, 0);
  v0 = qword_1001282C8;
  swift_bridgeObjectRetain(off_1001282D0);
  return v0;
}

uint64_t sub_10006AAAC(uint64_t a1, char *a2)
{
  char *v4;
  _BYTE v6[24];

  swift_beginAccess(&qword_1001282C8, v6, 1, 0);
  v4 = off_1001282D0;
  qword_1001282C8 = a1;
  off_1001282D0 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10006AB04(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&qword_1001282C8, a1, 33, 0);
  return j__swift_endAccess;
}

void sub_10006AB44()
{
  qword_1001315A0 = 0x617A696C61636F4CLL;
  qword_1001315A8 = 0xEF5457532D656C62;
}

uint64_t *sub_10006AB74()
{
  if (qword_10012F2B0 != -1)
    swift_once(&qword_10012F2B0, sub_10006AB44);
  return &qword_1001315A0;
}

uint64_t sub_10006ABB4()
{
  uint64_t v0;
  _BYTE v2[24];

  if (qword_10012F2B0 != -1)
    swift_once(&qword_10012F2B0, sub_10006AB44);
  swift_beginAccess(&qword_1001315A0, v2, 0, 0);
  v0 = qword_1001315A0;
  swift_bridgeObjectRetain(qword_1001315A8);
  return v0;
}

uint64_t sub_10006AC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  if (qword_10012F2B0 != -1)
    swift_once(&qword_10012F2B0, sub_10006AB44);
  swift_beginAccess(&qword_1001315A0, v6, 1, 0);
  v4 = qword_1001315A8;
  qword_1001315A0 = a1;
  qword_1001315A8 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10006ACAC(uint64_t a1))(_QWORD)
{
  if (qword_10012F2B0 != -1)
    swift_once(&qword_10012F2B0, sub_10006AB44);
  swift_beginAccess(&qword_1001315A0, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10006AD18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd11SWTFollowUp_log;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10006AD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd11SWTFollowUp_log;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10006ADC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a2;
  v5 = *v3;
  v4[4] = a3;
  v4[5] = v5;
  return swift_task_switch(sub_10006ADDC, v5, 0);
}

uint64_t sub_10006ADDC()
{
  uint64_t v0;

  sub_1000698D0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006AE2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a1;
  v3[3] = a2;
  v4 = *v2;
  v3[4] = *v2;
  return swift_task_switch(sub_10006AE48, v4, 0);
}

uint64_t sub_10006AE48()
{
  uint64_t v0;

  sub_10006D340(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006AE7C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_10006AE94, v3, 0);
}

uint64_t sub_10006AE94()
{
  uint64_t v0;

  sub_10006A054(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006AEE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10006AEF8, v2, 0);
}

uint64_t sub_10006AEF8()
{
  uint64_t v0;
  unint64_t v1;

  v1 = sub_10006A360();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v1);
}

uint64_t sub_10006AF44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10006AF5C, v2, 0);
}

uint64_t sub_10006AF5C()
{
  uint64_t v0;

  sub_10006A890();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10006AF8C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100067DF8(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10006BEE0();
      v10 = v13;
    }
    sub_100068CB8(*(_QWORD *)(v10 + 48) + 40 * v7);
    sub_10002E1B0((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v7), a2);
    sub_10006B9D0(v7, v10);
    v11 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10006B074(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001D138(&qword_1001282B8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v37 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v37 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v15 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v41 = *(_QWORD *)(v26 + 32);
      v39 = v27;
      v40 = v28;
      sub_10002E1B0((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v21), v38);
    }
    else
    {
      sub_100068C7C(v26, (uint64_t)&v39);
      sub_100023CCC(*(_QWORD *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 40 * v16;
    v18 = v39;
    v19 = v40;
    *(_QWORD *)(v17 + 32) = v41;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (uint64_t)sub_10002E1B0(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10006B388(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001D138(&qword_100127EA0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10002E1B0(v25, v38);
      }
      else
      {
        sub_100023CCC((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_10002E1B0(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10006B684(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  char v43;
  uint64_t v44;
  _QWORD v45[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001D138(&qword_1001283D0);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v40 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v23 >= v39)
          goto LABEL_36;
        v24 = v40[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v39)
            goto LABEL_36;
          v24 = v40[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_36:
              swift_release(v5);
              v3 = v38;
              if ((v42 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v14 >= v39)
                  goto LABEL_36;
                v24 = v40[v14];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v14 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v32 = *v30;
      v31 = v30[1];
      v33 = *(_QWORD *)(v5 + 56) + 40 * v22;
      v34 = *(_QWORD *)v33;
      v35 = *(_BYTE *)(v33 + 8);
      v44 = *(_QWORD *)(v33 + 16);
      v43 = *(_BYTE *)(v33 + 24);
      v36 = *(_QWORD *)(v33 + 32);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v31);
      }
      Hasher.init(_seed:)(v45, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v45, v32, v31);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v32;
      v19[1] = v31;
      v20 = *(_QWORD *)(v8 + 56) + 40 * v18;
      *(_QWORD *)v20 = v34;
      *(_BYTE *)(v20 + 8) = v35;
      *(_QWORD *)(v20 + 16) = v44;
      *(_BYTE *)(v20 + 24) = v43;
      *(_QWORD *)(v20 + 32) = v36;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

unint64_t sub_10006B9D0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_100068C7C(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = sub_100068CB8((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_10006BB98(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100067DF8(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100023CAC(v17);
        return sub_10002E1B0(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10006BEE0();
      goto LABEL_7;
    }
    sub_10006B074(v13, a3 & 1);
    v19 = sub_100067DF8(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100068C7C(a2, (uint64_t)v21);
      return sub_10006BE00(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

_OWORD *sub_10006BCD0(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10003AFB8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_100023CAC(v19);
        return sub_10002E1B0(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10006C0C4();
      goto LABEL_7;
    }
    sub_10006B388(v15, a4 & 1);
    v21 = sub_10003AFB8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10006BE78(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_10006BE00(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10002E1B0(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

_OWORD *sub_10006BE78(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10002E1B0(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *sub_10006BEE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_10001D138(&qword_1001282B8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_100068C7C(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_100023CCC(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_10002E1B0(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10006C0C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_10001D138(&qword_100127EA0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_100023CCC(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10002E1B0(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10006C2A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  sub_10001D138(&qword_1001283D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = *(_BYTE *)(v21 + 24);
    v26 = *(_QWORD *)(v21 + 32);
    v27 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v27 = v18;
    v27[1] = v19;
    v28 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v28 = v22;
    *(_BYTE *)(v28 + 8) = v23;
    *(_QWORD *)(v28 + 16) = v24;
    *(_BYTE *)(v28 + 24) = v25;
    *(_QWORD *)(v28 + 32) = v26;
    swift_bridgeObjectRetain(v26);
    result = (void *)swift_bridgeObjectRetain(v19);
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10006C488(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10006C4C0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10006C4A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10006C628(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10006C4C0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001D138(&qword_1001283E0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10006C628(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001D138(&qword_1001283D8);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10006C794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  int v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD v35[5];
  __int128 v36;
  __int128 v37;

  if (!a1)
  {
    v36 = 0u;
    v37 = 0u;
    sub_1000202F0((uint64_t)&v36, &qword_100126F70);
    v36 = 0u;
    v37 = 0u;
    sub_1000202F0((uint64_t)&v36, &qword_100126F70);
    v9 = 0;
    v7 = 0;
    v36 = 0u;
    v37 = 0u;
    v10 = 1;
    v8 = 1;
LABEL_38:
    result = sub_1000202F0((uint64_t)&v36, &qword_100126F70);
    goto LABEL_39;
  }
  v33 = 112;
  v34 = 0xE100000000000000;
  swift_bridgeObjectRetain(a1);
  AnyHashable.init<A>(_:)(&v33, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v4 = sub_100067DF8((uint64_t)v35), (v5 & 1) != 0))
  {
    sub_100023CCC(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v36);
  }
  else
  {
    v36 = 0u;
    v37 = 0u;
  }
  swift_bridgeObjectRelease(a1);
  sub_100068CB8((uint64_t)v35);
  if (*((_QWORD *)&v37 + 1))
  {
    v6 = swift_dynamicCast(v35, &v36, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
    if (v6)
      v7 = v35[0];
    else
      v7 = 0;
    v8 = v6 ^ 1;
  }
  else
  {
    sub_1000202F0((uint64_t)&v36, &qword_100126F70);
    v7 = 0;
    v8 = 1;
  }
  v33 = 101;
  v34 = 0xE100000000000000;
  swift_bridgeObjectRetain(a1);
  AnyHashable.init<A>(_:)(&v33, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v11 = sub_100067DF8((uint64_t)v35), (v12 & 1) != 0))
  {
    sub_100023CCC(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v36);
  }
  else
  {
    v36 = 0u;
    v37 = 0u;
  }
  swift_bridgeObjectRelease(a1);
  sub_100068CB8((uint64_t)v35);
  if (*((_QWORD *)&v37 + 1))
  {
    v13 = swift_dynamicCast(v35, &v36, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
    if (v13)
      v9 = v35[0];
    else
      v9 = 0;
    v10 = v13 ^ 1;
  }
  else
  {
    sub_1000202F0((uint64_t)&v36, &qword_100126F70);
    v9 = 0;
    v10 = 1;
  }
  v33 = 115;
  v34 = 0xE100000000000000;
  AnyHashable.init<A>(_:)(&v33, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v14 = sub_100067DF8((uint64_t)v35), (v15 & 1) != 0))
  {
    sub_100023CCC(*(_QWORD *)(a1 + 56) + 32 * v14, (uint64_t)&v36);
  }
  else
  {
    v36 = 0u;
    v37 = 0u;
  }
  swift_bridgeObjectRelease(a1);
  sub_100068CB8((uint64_t)v35);
  if (!*((_QWORD *)&v37 + 1))
    goto LABEL_38;
  v16 = sub_10001D138(&qword_1001282E0);
  result = swift_dynamicCast(v35, &v36, (char *)&type metadata for Any + 8, v16, 6);
  if ((result & 1) == 0)
  {
LABEL_39:
    v21 = 0;
    goto LABEL_40;
  }
  v18 = v35[0];
  v19 = *(_QWORD *)(v35[0] + 16);
  if (v19)
  {
    v30 = v9;
    v31 = v8;
    v32 = v7;
    swift_bridgeObjectRetain(v35[0]);
    v20 = (_QWORD *)(v18 + 40);
    v21 = _swiftEmptyArrayStorage;
    do
    {
      v23 = *(v20 - 1);
      v24 = *v20;
      swift_bridgeObjectRetain(*v20);
      v25 = Data.init(base64Encoded:options:)(v23, v24, 0);
      v27 = v26;
      swift_bridgeObjectRelease(v24);
      if (v27 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          v21 = sub_10003F41C(0, v21[2] + 1, 1, v21);
        v29 = v21[2];
        v28 = v21[3];
        if (v29 >= v28 >> 1)
          v21 = sub_10003F41C((_QWORD *)(v28 > 1), v29 + 1, 1, v21);
        v21[2] = v29 + 1;
        v22 = &v21[2 * v29];
        v22[4] = v25;
        v22[5] = v27;
      }
      v20 += 2;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease(v18);
    v7 = v32;
    v8 = v31;
    v9 = v30;
  }
  else
  {
    v21 = _swiftEmptyArrayStorage;
  }
  result = swift_bridgeObjectRelease(v18);
LABEL_40:
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v21;
  return result;
}

uint64_t sub_10006CB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001D138(&qword_1001282D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006CBC0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_10006CBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  id v13;
  NSURL *v14;
  void *v15;
  void *v16;
  id v17;
  NSString v18;
  NSString v19;
  uint64_t v20;
  NSString v21;
  id v22;
  _BYTE v24[24];
  _BYTE v25[24];

  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess(&qword_1001282C8, v25, 0, 0);
  v12 = qword_1001282C8;
  v11 = off_1001282D0;
  swift_bridgeObjectRetain(off_1001282D0);
  URL.init(fileURLWithPath:)(v12, v11);
  swift_bridgeObjectRelease(v11);
  v13 = objc_allocWithZone((Class)NSBundle);
  URL._bridgeToObjectiveC()(v14);
  v16 = v15;
  v17 = objc_msgSend(v13, "initWithURL:", v15);

  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  if (v17)
  {
    v18 = String._bridgeToObjectiveC()();
    if (a4)
      v19 = String._bridgeToObjectiveC()();
    else
      v19 = 0;
    if (qword_10012F2B0 != -1)
      swift_once(&qword_10012F2B0, sub_10006AB44);
    swift_beginAccess(&qword_1001315A0, v24, 0, 0);
    v20 = qword_1001315A8;
    swift_bridgeObjectRetain(qword_1001315A8);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v22 = objc_msgSend(v17, "localizedStringForKey:value:table:", v18, v19, v21);

    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  }
  else
  {
    swift_bridgeObjectRetain(a2);
  }
  return a1;
}

void sub_10006CDEC(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  NSURL *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t inited;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  Class isa;
  uint64_t v25;
  unint64_t v26;
  _OWORD v27[2];
  __int128 v28;
  void *v29;
  _BYTE v30[80];

  v4 = sub_10001D138(&qword_100127170);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006CBE8(0xD000000000000010, 0x80000001000E3BC0, 0x6F4D206E7261654CLL, 0xEA00000000006572);
  v8 = v7;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v9);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v13 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) != 1)
  {
    URL._bridgeToObjectiveC()(v12);
    v13 = v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v9);
  }
  v15 = objc_msgSend((id)objc_opt_self(FLFollowUpAction), "actionWithLabel:url:", v11, v13);

  if (v15)
  {
    v16 = sub_10001D138(&qword_100127E50);
    inited = swift_initStackObject(v16, v30);
    *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
    *(_QWORD *)(inited + 32) = 0x6E6F69746361;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    strcpy((char *)(inited + 48), "detailsAction");
    *(_WORD *)(inited + 62) = -4864;
    v18 = sub_10004FD2C(inited);
    v19 = 0x80000001000E3BE0;
    if (a2)
      v19 = a2;
    v20 = 0xD000000000000016;
    v29 = &type metadata for String;
    if (a2)
      v20 = a1;
    *(_QWORD *)&v28 = v20;
    *((_QWORD *)&v28 + 1) = v19;
    sub_10002E1B0(&v28, v27);
    swift_bridgeObjectRetain(a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v26 = v18;
    sub_10006BCD0(v27, 7107189, 0xE300000000000000, isUniquelyReferenced_nonNull_native);
    v22 = v26;
    swift_bridgeObjectRelease(0x8000000000000000);
    v23 = sub_100069508(v22);
    swift_bridgeObjectRelease(v22);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    objc_msgSend(v15, "setUserInfo:", isa);

  }
  else
  {
    __break(1u);
  }
}

void sub_10006D098()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  NSURL *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t inited;
  unint64_t v21;
  uint64_t v22;
  Class isa;
  _BYTE v25[88];

  v0 = sub_10001D138(&qword_100127170);
  __chkstk_darwin(v0);
  v2 = &v25[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v3 = type metadata accessor for Locale(0);
  __chkstk_darwin(v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = String.LocalizationValue.init(stringLiteral:)(0x7261656C43, 0xE500000000000000);
  static Locale.current.getter(v9);
  String.init(localized:defaultValue:table:bundle:locale:comment:)("SWT_VIEW_CLEAR", 14, 2, v8, 0, 0, 0, v5, 0, 0, 256);
  v11 = v10;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v2, 1, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v15);
    v16 = v17;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v2, v12);
  }
  v18 = objc_msgSend((id)objc_opt_self(FLFollowUpAction), "actionWithLabel:url:", v14, v16);

  if (v18)
  {
    v19 = sub_10001D138(&qword_100127E50);
    inited = swift_initStackObject(v19, v25);
    *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
    *(_QWORD *)(inited + 32) = 0x6E6F69746361;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0x7463417261656C63;
    *(_QWORD *)(inited + 56) = 0xEB000000006E6F69;
    v21 = sub_10004FD2C(inited);
    v22 = sub_100069508(v21);
    swift_bridgeObjectRelease(v21);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    objc_msgSend(v18, "setUserInfo:", isa);

  }
  else
  {
    __break(1u);
  }
}

void sub_10006D340(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  int v18;
  double v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  double v22;
  char v23;
  double v24;
  BOOL v25;
  uint64_t v26;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001D138(&qword_100127710);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v21 - v12;
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))((char *)&v21 - v12, 1, 1, v4);
  v15 = Date.init()(v14);
  v16 = Date.timeIntervalSince1970.getter(v15);
  sub_10002AC5C((uint64_t)v13, (uint64_t)v11, &qword_100127710);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4);
  v18 = v17;
  if ((_DWORD)v17 == 1)
  {
    sub_1000202F0((uint64_t)v13, &qword_100127710);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_1000202F0((uint64_t)v11, &qword_100127710);
    v19 = 0.0;
  }
  else
  {
    v19 = Date.timeIntervalSince1970.getter(v17);
    sub_1000202F0((uint64_t)v13, &qword_100127710);
    v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v7, v4);
    v20(v11, v4);
  }
  v22 = v16;
  v23 = 0;
  v24 = v19;
  v25 = v18 == 1;
  v26 = 0;
  sub_1000698D0(a1, a2, (uint64_t)&v22);
}

uint64_t destroy for SWTCFUInfo(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for SWTCFUInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for SWTCFUInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = a2[4];
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v5);
  return a1;
}

__n128 initializeWithTake for SWTCFUInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SWTCFUInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SWTCFUInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SWTCFUInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTCFUInfo()
{
  return &type metadata for SWTCFUInfo;
}

uint64_t sub_10006D708()
{
  return type metadata accessor for SWTFollowUp(0);
}

uint64_t type metadata accessor for SWTFollowUp(uint64_t a1)
{
  uint64_t result;

  result = qword_10012F340;
  if (!qword_10012F340)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SWTFollowUp);
  return result;
}

uint64_t sub_10006D74C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000DE058;
  v4[1] = &unk_1000DE070;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t Application.description.getter(unsigned int a1)
{
  if (a1 > 6)
    return 0x4E574F4E4B4E55;
  else
    return *(_QWORD *)&aUnknownIds[8 * a1];
}

void sub_10006D80C()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;

  v1 = objc_msgSend(v0, "appSmtKeyStore");
  v2 = objc_msgSend(v1, "signatureVerifier");

  objc_msgSend(v2, "setNeedsRefresh:", 1);
  v3 = objc_msgSend(v0, "appSthKeyStore");
  v4 = objc_msgSend(v3, "signatureVerifier");

  objc_msgSend(v4, "setNeedsRefresh:", 1);
  v5 = objc_msgSend(v0, "tltKeyStore");
  v6 = objc_msgSend(v5, "signatureVerifier");

  objc_msgSend(v6, "setNeedsRefresh:", 1);
}

void *sub_10006D91C()
{
  return &unk_100109C58;
}

unint64_t sub_10006D928()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10006D944(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3)
    return 4;
  if (a3 == 1)
    return 5;
  return qword_1000DE2D8[a1];
}

unint64_t sub_10006D974(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t inited;
  _QWORD v11[16];

  if (a3 > 1u)
    return sub_10004FD2C((uint64_t)_swiftEmptyArrayStorage);
  v11[14] = v3;
  v11[15] = v4;
  v8 = sub_10001D138(&qword_100127E50);
  inited = swift_initStackObject(v8, v11);
  *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
  *(_QWORD *)(inited + 32) = 107;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  sub_10006DA18(a1, a2, a3);
  return sub_10004FD2C(inited);
}

uint64_t sub_10006DA18(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

unint64_t sub_10006DA30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D138(&qword_100128600);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v9);
    result = sub_10003AFB8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006DB48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007509C();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10006DB70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007509C();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10006DB98()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 16))
    return 4;
  if (*(_BYTE *)(v0 + 16) == 1)
    return 5;
  return qword_1000DE2D8[*(_QWORD *)v0];
}

unint64_t sub_10006DBCC()
{
  uint64_t v0;

  return sub_10006D974(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void *sub_10006DBD8()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 112, v4, 0, 0);
  v1 = *(void **)(v0 + 112);
  v2 = v1;
  return v1;
}

void sub_10006DC18(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 112, v4, 1, 0);
  v3 = *(void **)(v1 + 112);
  *(_QWORD *)(v1 + 112) = a1;

}

uint64_t sub_10006DC5C()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 136);
}

uint64_t sub_10006DC64()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100023D0C(v0, qword_1001315B8);
  sub_100020804(v0, (uint64_t)qword_1001315B8);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0x696C627550545753, 0xEF67614279654B63);
}

uint64_t sub_10006DCE4()
{
  uint64_t v0;

  if (qword_10012F350 != -1)
    swift_once(&qword_10012F350, sub_10006DC64);
  v0 = type metadata accessor for Logger(0);
  return sub_100020804(v0, (uint64_t)qword_1001315B8);
}

uint64_t sub_10006DD2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10012F350 != -1)
    swift_once(&qword_10012F350, sub_10006DC64);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_1001315B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10006DD9C(int a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = v7;
  v16 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  swift_defaultActor_initialize(v16);
  *(_QWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v16 + 128) = a2;
  *(_DWORD *)(v16 + 136) = a1;
  sub_100074D7C(a5, v16 + 144, &qword_1001283E8);
  v17 = v16 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory;
  v18 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a3, v18);
  sub_100032478(a4, v16 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
  sub_100074D7C(a6, v16 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, &qword_1001283F0);
  *(_QWORD *)(v16 + 120) = a7;
  return v16;
}

uint64_t sub_10006DE88(int a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;

  swift_defaultActor_initialize(v7);
  *(_QWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 128) = a2;
  *(_DWORD *)(v7 + 136) = a1;
  sub_100074D7C(a5, v7 + 144, &qword_1001283E8);
  v15 = v7 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory;
  v16 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a3, v16);
  sub_100032478(a4, v7 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
  sub_100074D7C(a6, v7 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, &qword_1001283F0);
  *(_QWORD *)(v7 + 120) = a7;
  return v7;
}

uint64_t sub_10006DF60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_10006DF9C(a1);
  return v3;
}

uint64_t sub_10006DF9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v24[5];

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + 112) = 0;
  v8 = a1[3];
  v9 = a1[4];
  sub_100022F20(a1, v8);
  *(_DWORD *)(v1 + 136) = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  v10 = a1[3];
  v11 = a1[4];
  sub_100022F20(a1, v10);
  *(_QWORD *)(v1 + 128) = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_QWORD *)(v1 + 176) = 0;
  v12 = a1[3];
  v13 = a1[4];
  sub_100022F20(a1, v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory, v7, v4);
  v14 = a1[3];
  v15 = a1[4];
  sub_100022F20(a1, v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 64))(v14, v15);
  v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
  v17[3] = type metadata accessor for KTSWDB();
  v17[4] = sub_100068B10();
  *v17 = v16;
  v18 = a1[3];
  v19 = a1[4];
  sub_100022F20(a1, v18);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v19 + 40))(v24, v18, v19);
  sub_100074D7C((uint64_t)v24, v2 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, &qword_1001283F0);
  v20 = a1[3];
  v21 = a1[4];
  sub_100022F20(a1, v20);
  *(_QWORD *)(v2 + 120) = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 80))(v20, v21);
  sub_100023CAC(a1);
  return v2;
}

uint64_t sub_10006E184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  id v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 152))(v8);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "receiptTime");
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v14 = Date.timeIntervalSinceNow.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (kKTPublicKeysResponseRefresh == 0x8000000000000000)
    {
      __break(1u);
    }
    else
    {
      if (v14 >= (double)(uint64_t)-kKTPublicKeysResponseRefresh)
      {

        return 0;
      }
      if (qword_10012F350 == -1)
        goto LABEL_5;
    }
    swift_once(&qword_10012F350, sub_10006DC64);
LABEL_5:
    v15 = sub_100020804(v2, (uint64_t)qword_1001315B8);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15, v2);
    v16 = swift_retain_n(v1, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v33[0] = v31;
      *(_DWORD *)v19 = 136315138;
      v20 = *(int *)(v1 + 136);
      if (v20 > 6)
      {
        v23 = 0xE700000000000000;
        v22 = 0x4E574F4E4B4E55;
      }
      else
      {
        v21 = 8 * v20;
        v22 = *(_QWORD *)&aUnknownIds[v21];
        v23 = *(_QWORD *)&aTlt[v21];
      }
      v32 = sub_1000230D0(v22, v23, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v19 + 4, v19 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Public key response for %s older than refresh period", v19, 0xCu);
      v27 = v31;
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_10002AC5C(v1 + 144, (uint64_t)v33, &qword_1001283E8);
    v28 = v34;
    if (v34)
    {
      v29 = v35;
      sub_100022F20(v33, v34);
      (*(void (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);

      goto LABEL_16;
    }

LABEL_18:
    sub_1000202F0((uint64_t)v33, &qword_1001283E8);
    return 1;
  }
  sub_10002AC5C(v0 + 144, (uint64_t)v33, &qword_1001283E8);
  v24 = v34;
  if (!v34)
    goto LABEL_18;
  v25 = v35;
  sub_100022F20(v33, v34);
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
LABEL_16:
  sub_100023CAC(v33);
  return 1;
}

id sub_10006E52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  id v8;
  Class isa;
  id v10;
  uint64_t v12;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 152))(v3);
  if (!v6)
    return 0;
  v7 = (void *)objc_opt_self(SFAnalytics);
  v8 = objc_msgSend(v6, "receiptTime");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v10 = objc_msgSend(v7, "fuzzyDaysSinceDate:", isa);

  return v10;
}

uint64_t sub_10006E634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[3];
  uint64_t v60;
  uint64_t v61;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v56 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v56 - v11;
  v13 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 152))(v10);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, "appSthKeyStore");
    v16 = objc_msgSend(v15, "signatureVerifier");

    LODWORD(v15) = objc_msgSend(v16, "needsRefresh");
    if ((_DWORD)v15)
    {
      if (qword_10012F350 != -1)
        swift_once(&qword_10012F350, sub_10006DC64);
      v17 = sub_100020804(v2, (uint64_t)qword_1001315B8);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v17, v2);
      v18 = swift_retain_n(v1, 2);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        v59[0] = v22;
        *(_DWORD *)v21 = 136315138;
        v23 = *(int *)(v1 + 136);
        v57 = v3;
        if (v23 > 6)
        {
          v25 = 0x4E574F4E4B4E55;
          v26 = 0xE700000000000000;
        }
        else
        {
          v24 = 8 * v23;
          v25 = *(_QWORD *)&aUnknownIds[v24];
          v26 = *(_QWORD *)&aTlt[v24];
        }
        v58 = sub_1000230D0(v25, v26, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v21 + 4, v21 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "App STH keys for %s need refresh", v21, 0xCu);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v21, -1, -1);

        v49 = *(void (**)(char *, uint64_t))(v57 + 8);
      }
      else
      {

        swift_release_n(v1, 2);
        v49 = *(void (**)(char *, uint64_t))(v3 + 8);
      }
      v53 = v12;
    }
    else
    {
      v37 = objc_msgSend(v14, "tltKeyStore");
      v38 = objc_msgSend(v37, "signatureVerifier");

      LODWORD(v37) = objc_msgSend(v38, "needsRefresh");
      if (!(_DWORD)v37)
      {

        return 1;
      }
      if (qword_10012F350 != -1)
        swift_once(&qword_10012F350, sub_10006DC64);
      v39 = sub_100020804(v2, (uint64_t)qword_1001315B8);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v39, v2);
      v40 = swift_retain_n(v1, 2);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        v59[0] = v44;
        *(_DWORD *)v43 = 136315138;
        v45 = *(int *)(v1 + 136);
        v57 = v3;
        if (v45 > 6)
        {
          v47 = 0x4E574F4E4B4E55;
          v48 = 0xE700000000000000;
        }
        else
        {
          v46 = 8 * v45;
          v47 = *(_QWORD *)&aUnknownIds[v46];
          v48 = *(_QWORD *)&aTlt[v46];
        }
        v58 = sub_1000230D0(v47, v48, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v43 + 4, v43 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "TLT STH keys for %s need refresh", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        v49 = *(void (**)(char *, uint64_t))(v57 + 8);
      }
      else
      {

        swift_release_n(v1, 2);
        v49 = *(void (**)(char *, uint64_t))(v3 + 8);
      }
      v53 = v9;
    }
    v49(v53, v2);
    sub_10002AC5C(v1 + 144, (uint64_t)v59, &qword_1001283E8);
    v54 = v60;
    if (v60)
    {
      v55 = v61;
      sub_100022F20(v59, v60);
      (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);

      goto LABEL_35;
    }

LABEL_37:
    sub_1000202F0((uint64_t)v59, &qword_1001283E8);
    return 0;
  }
  if (qword_10012F350 != -1)
    swift_once(&qword_10012F350, sub_10006DC64);
  v27 = sub_100020804(v2, (uint64_t)qword_1001315B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v27, v2);
  v28 = swift_retain_n(v0, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v59[0] = v32;
    *(_DWORD *)v31 = 136315138;
    v33 = *(int *)(v1 + 136);
    if (v33 > 6)
    {
      v35 = 0x4E574F4E4B4E55;
      v36 = 0xE700000000000000;
    }
    else
    {
      v34 = 8 * v33;
      v35 = *(_QWORD *)&aUnknownIds[v34];
      v36 = *(_QWORD *)&aTlt[v34];
    }
    v58 = sub_1000230D0(v35, v36, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v31 + 4, v31 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "No key bag for %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_10002AC5C(v1 + 144, (uint64_t)v59, &qword_1001283E8);
  v51 = v60;
  if (!v60)
    goto LABEL_37;
  v52 = v61;
  sub_100022F20(v59, v60);
  (*(void (**)(uint64_t, uint64_t))(v52 + 16))(v51, v52);
LABEL_35:
  sub_100023CAC(v59);
  return 0;
}

void sub_10006ED74(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  if (v4)
  {
    v11 = v4;
    v5 = objc_msgSend(v4, "appSthKeyStore");
    v6 = objc_msgSend(v5, "signatureVerifier");

    objc_msgSend(v6, "setNeedsRefresh:", (a1 & 1) == 0);
    v7 = objc_msgSend(v11, "tltKeyStore");
    v8 = objc_msgSend(v7, "signatureVerifier");

    objc_msgSend(v8, "setNeedsRefresh:", (a1 & 1) == 0);
    if ((a1 & 1) != 0)
    {

    }
    else
    {
      sub_10007054C();
      sub_10002AC5C(v2 + 144, (uint64_t)v12, &qword_1001283E8);
      v9 = v13;
      if (v13)
      {
        v10 = v14;
        sub_100022F20(v12, v13);
        (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);

        sub_100023CAC(v12);
      }
      else
      {

        sub_1000202F0((uint64_t)v12, &qword_1001283E8);
      }
    }
  }
}

void (*sub_10006F088(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E634() & 1;
  return sub_10006F0C0;
}

void sub_10006F0C0(uint64_t a1)
{
  sub_10006ED74(*(_BYTE *)(a1 + 8));
}

void sub_10006F0E4()
{
  uint64_t v0;
  void *v1;
  _BYTE v2[24];

  swift_beginAccess(v0 + 112, v2, 1, 0);
  v1 = *(void **)(v0 + 112);
  *(_QWORD *)(v0 + 112) = 0;

}

unint64_t sub_10006F11C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v71;

  v1 = v0;
  v2 = 0xD000000000000019;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v70 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v70 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v70 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v70 - v17;
  switch((unint64_t)objc_msgSend(*(id *)(v1 + 128), "atEnvironment"))
  {
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
      if (qword_10012F350 != -1)
        swift_once(&qword_10012F350, sub_10006DC64);
      v19 = sub_100020804(v3, (uint64_t)qword_1001315B8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v19, v3);
      v20 = swift_retain_n(v1, 2);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = swift_slowAlloc(32, -1);
        v71 = v24;
        *(_DWORD *)v23 = 136315138;
        v25 = *(int *)(v1 + 136);
        if (v25 > 6)
        {
          v27 = 0x4E574F4E4B4E55;
          v28 = 0xE700000000000000;
        }
        else
        {
          v26 = 8 * v25;
          v27 = *(_QWORD *)&aUnknownIds[v26];
          v28 = *(_QWORD *)&aTlt[v26];
        }
        v70 = sub_1000230D0(v27, v28, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v23 + 4, v23 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v28);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Using QA1 Primary key bag for %s", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);

        (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
        return 0xD000000000000019;
      }

      swift_release_n(v1, 2);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
      return v2;
    case 6uLL:
      if (qword_10012F350 != -1)
        swift_once(&qword_10012F350, sub_10006DC64);
      v29 = sub_100020804(v3, (uint64_t)qword_1001315B8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v10, v29, v3);
      v30 = swift_retain_n(v1, 2);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        v71 = v34;
        *(_DWORD *)v33 = 136315138;
        v35 = *(int *)(v1 + 136);
        if (v35 > 6)
        {
          v37 = 0x4E574F4E4B4E55;
          v38 = 0xE700000000000000;
        }
        else
        {
          v36 = 8 * v35;
          v37 = *(_QWORD *)&aUnknownIds[v36];
          v38 = *(_QWORD *)&aTlt[v36];
        }
        v70 = sub_1000230D0(v37, v38, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v33 + 4, v33 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v38);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Using carry key bag for %s", v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
      }
      else
      {

        swift_release_n(v1, 2);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
      }
      return 0xD000000000000015;
    case 8uLL:
      if (qword_10012F350 != -1)
        swift_once(&qword_10012F350, sub_10006DC64);
      v49 = sub_100020804(v3, (uint64_t)qword_1001315B8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v18, v49, v3);
      v50 = swift_retain_n(v1, 2);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v51, v52))
      {

        swift_release_n(v1, 2);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
        return v2;
      }
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v71 = v54;
      *(_DWORD *)v53 = 136315138;
      v55 = *(int *)(v1 + 136);
      if (v55 > 6)
      {
        v57 = 0x4E574F4E4B4E55;
        v58 = 0xE700000000000000;
      }
      else
      {
        v56 = 8 * v55;
        v57 = *(_QWORD *)&aUnknownIds[v56];
        v58 = *(_QWORD *)&aTlt[v56];
      }
      v70 = sub_1000230D0(v57, v58, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v53 + 4, v53 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Using QA2 Primary key bag for %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

      (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
      return 0xD000000000000019;
    case 9uLL:
      if (qword_10012F350 != -1)
        swift_once(&qword_10012F350, sub_10006DC64);
      v59 = sub_100020804(v3, (uint64_t)qword_1001315B8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v16, v59, v3);
      v60 = swift_retain_n(v1, 2);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(12, -1);
        v64 = swift_slowAlloc(32, -1);
        v71 = v64;
        *(_DWORD *)v63 = 136315138;
        v65 = *(int *)(v1 + 136);
        if (v65 > 6)
        {
          v67 = 0x4E574F4E4B4E55;
          v68 = 0xE700000000000000;
        }
        else
        {
          v66 = 8 * v65;
          v67 = *(_QWORD *)&aUnknownIds[v66];
          v68 = *(_QWORD *)&aTlt[v66];
        }
        v70 = sub_1000230D0(v67, v68, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v63 + 4, v63 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v68);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Using QA2 Internal key bag for %s", v63, 0xCu);
        swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v64, -1, -1);
        swift_slowDealloc(v63, -1, -1);

        (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v3);
        return 0xD000000000000019;
      }
      else
      {

        swift_release_n(v1, 2);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v3);
      }
      return v2;
    default:
      if (qword_10012F350 != -1)
        swift_once(&qword_10012F350, sub_10006DC64);
      v39 = sub_100020804(v3, (uint64_t)qword_1001315B8);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v39, v3);
      v40 = swift_retain_n(v1, 2);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        v71 = v44;
        *(_DWORD *)v43 = 136315138;
        v45 = *(int *)(v1 + 136);
        if (v45 > 6)
        {
          v47 = 0x4E574F4E4B4E55;
          v48 = 0xE700000000000000;
        }
        else
        {
          v46 = 8 * v45;
          v47 = *(_QWORD *)&aUnknownIds[v46];
          v48 = *(_QWORD *)&aTlt[v46];
        }
        v70 = sub_1000230D0(v47, v48, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v43 + 4, v43 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Using prod key bag for %s", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      }
      else
      {

        swift_release_n(v1, 2);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      }
      return 0xD000000000000015;
  }
}

uint64_t sub_10006FB40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = sub_10001D138(&qword_100127710);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006FB9C, v1, 0);
}

uint64_t sub_10006FB9C()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  void *v2;
  void *v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = *(uint64_t (**)(void))(**(_QWORD **)(v0 + 32) + 152);
  v2 = (void *)v1();
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "trustedAppSigningKeys");

    v5 = sub_1000743B8();
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for Data, (char *)&type metadata for Any + 8, v5);

    v7 = sub_10006FDEC(v6);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_QWORD *)(v0 + 32);
  v9 = sub_100025F4C((uint64_t)objc_msgSend(*(id *)(v8 + 128), "atEnvironment"));
  v10 = *(int *)(v8 + 136);
  v29 = v9;
  v30 = v7;
  v28 = v11;
  if (v10 > 6)
  {
    v14 = 0xE700000000000000;
    v13 = 0x4E574F4E4B4E55;
  }
  else
  {
    v12 = 8 * v10;
    v13 = *(_QWORD *)&aUnknownIds[v12];
    v14 = *(_QWORD *)&aTlt[v12];
  }
  v15 = (void *)v1();
  v16 = v15;
  if (v15)
  {
    v17 = objc_msgSend(v15, "patLogBeginningMs");

  }
  else
  {
    v17 = 0;
  }
  v18 = (void *)v1();
  v19 = v18;
  if (v18)
  {
    v20 = objc_msgSend(v18, "tltLogBeginningMs");

  }
  else
  {
    v20 = 0;
  }
  v21 = (void *)v1();
  if (v21)
  {
    v22 = v21;
    v23 = objc_msgSend(v21, "receiptTime");

    static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v24 = 0;
  }
  else
  {
    v24 = 1;
  }
  v25 = *(_QWORD *)(v0 + 40);
  v26 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, v24, 1, v26);
  TransparencySWSysdiagnose.PublicKeybag.init(env:app:patLogBeginMs:tltLogBeginMs:fetchTime:trustedAppSPKI:)(v29, v28, v13, v14, v17, v16 == 0, v20, v19 == 0, v25, v30);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_10006FDEC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = a1;
  sub_10006C488(0, v1, 0);
  result = (_QWORD *)sub_100074A64(v2);
  v5 = (uint64_t)result;
  v6 = 0;
  v7 = v2 + 64;
  v23 = v2 + 80;
  v24 = v1;
  v25 = v4;
  v26 = v2 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v2 + 32))
  {
    v10 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v2 + 36) != v4)
      goto LABEL_24;
    v27 = v6;
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v5);
    v12 = v2;
    v14 = *v11;
    v13 = v11[1];
    sub_100022F88(*v11, v13);
    v15 = Data.base64EncodedString(options:)(0);
    result = (_QWORD *)sub_100022F44(v14, v13);
    v17 = _swiftEmptyArrayStorage[2];
    v16 = _swiftEmptyArrayStorage[3];
    if (v17 >= v16 >> 1)
      result = (_QWORD *)sub_10006C488(v16 > 1, v17 + 1, 1);
    _swiftEmptyArrayStorage[2] = v17 + 1;
    *(Swift::String *)&_swiftEmptyArrayStorage[2 * v17 + 4] = v15;
    v8 = 1 << *(_BYTE *)(v12 + 32);
    if (v5 >= v8)
      goto LABEL_25;
    v7 = v26;
    v18 = *(_QWORD *)(v26 + 8 * v10);
    if ((v18 & (1 << v5)) == 0)
      goto LABEL_26;
    v2 = v12;
    v4 = v25;
    if (*(_DWORD *)(v12 + 36) != v25)
      goto LABEL_27;
    v19 = v18 & (-2 << (v5 & 0x3F));
    if (v19)
    {
      v8 = __clz(__rbit64(v19)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v9 = v24;
    }
    else
    {
      v20 = v10 + 1;
      v21 = (unint64_t)(v8 + 63) >> 6;
      v9 = v24;
      if (v10 + 1 < v21)
      {
        v22 = *(_QWORD *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v8 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v10)
          {
            v22 = *(_QWORD *)(v23 + 8 * v10++);
            if (v22)
            {
              v20 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v6 = v27 + 1;
    v5 = v8;
    if (v27 + 1 == v9)
      return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

id sub_100070024()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  NSURL *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  id v15;

  v1 = (void *)objc_opt_self(TransparencyFileSupport);
  (*(void (**)(void))(*(_QWORD *)v0 + 240))();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  URL._bridgeToObjectiveC()(v5);
  v7 = v6;
  v15 = 0;
  v8 = objc_msgSend(v1, "readDictionaryFromFile:inDirectory:error:", v4, v6, &v15);

  v9 = v15;
  if (v8)
  {
    v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v11 = v9;

    v12 = (id)sub_100070170(v10);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v12 = v15;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v13);
  }
  return v12;
}

unint64_t sub_100070170(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[40];
  _OWORD v31[2];
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001D138(&qword_100128600);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v27 = a1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  if (v6)
    goto LABEL_9;
LABEL_10:
  v14 = v8 + 1;
  if (__OFADD__(v8, 1))
    goto LABEL_40;
  if (v14 >= v26)
    goto LABEL_36;
  v15 = *(_QWORD *)(v27 + 8 * v14);
  v13 = v8 + 1;
  if (!v15)
  {
    v13 = v8 + 2;
    if (v8 + 2 >= v26)
      goto LABEL_36;
    v15 = *(_QWORD *)(v27 + 8 * v13);
    if (!v15)
    {
      v13 = v8 + 3;
      if (v8 + 3 >= v26)
        goto LABEL_36;
      v15 = *(_QWORD *)(v27 + 8 * v13);
      if (!v15)
      {
        v13 = v8 + 4;
        if (v8 + 4 >= v26)
          goto LABEL_36;
        v15 = *(_QWORD *)(v27 + 8 * v13);
        if (!v15)
        {
          v16 = v8 + 5;
          if (v8 + 5 < v26)
          {
            v15 = *(_QWORD *)(v27 + 8 * v16);
            if (v15)
            {
              v13 = v8 + 5;
              goto LABEL_25;
            }
            while (1)
            {
              v13 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_41;
              if (v13 >= v26)
                break;
              v15 = *(_QWORD *)(v27 + 8 * v13);
              ++v16;
              if (v15)
                goto LABEL_25;
            }
          }
LABEL_36:
          sub_10004BA60(a1);
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_25:
  v11 = (v15 - 1) & v15;
  v12 = __clz(__rbit64(v15)) + (v13 << 6);
  while (1)
  {
    sub_100068C7C(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v34);
    sub_100023CCC(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v35 + 8);
    v32[0] = v35[0];
    v32[1] = v35[1];
    v33 = v36;
    v31[0] = v34[0];
    v31[1] = v34[1];
    sub_100068C7C((uint64_t)v31, (uint64_t)v30);
    if (!swift_dynamicCast(&v28, v30, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v28 = 0;
      v29 = 0;
      sub_1000202F0((uint64_t)v31, &qword_100128608);
      swift_bridgeObjectRelease(v29);
LABEL_35:
      sub_10004BA60(a1);
      swift_release(v3);
      return 0;
    }
    v17 = v28;
    v18 = v29;
    sub_100023CCC((uint64_t)v32 + 8, (uint64_t)v30);
    sub_1000202F0((uint64_t)v31, &qword_100128608);
    if ((swift_dynamicCast(&v28, v30, (char *)&type metadata for Any + 8, (char *)&type metadata for Swift.AnyObject + 8, 6) & 1) == 0)
    {
      v28 = 0;
      swift_bridgeObjectRelease(v18);
      swift_unknownObjectRelease(v28);
      goto LABEL_35;
    }
    v6 = v11;
    v19 = v28;
    result = sub_10003AFB8(v17, v18);
    v20 = result;
    if ((v21 & 1) != 0)
    {
      v9 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v9[1]);
      *v9 = v17;
      v9[1] = v18;
      v10 = v3[7];
      result = swift_unknownObjectRelease(*(_QWORD *)(v10 + 8 * v20));
      *(_QWORD *)(v10 + 8 * v20) = v19;
      v8 = v13;
      if (!v6)
        goto LABEL_10;
      goto LABEL_9;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v22 = (uint64_t *)(v3[6] + 16 * result);
    *v22 = v17;
    v22[1] = v18;
    *(_QWORD *)(v3[7] + 8 * result) = v19;
    v23 = v3[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_39;
    v3[2] = v25;
    v8 = v13;
    if (!v6)
      goto LABEL_10;
LABEL_9:
    v11 = (v6 - 1) & v6;
    v12 = __clz(__rbit64(v6)) | (v8 << 6);
    v13 = v8;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_10007054C()
{
  int *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  void *v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  char v33;
  void *v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  NSURL *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;

  v2 = v0;
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  if (!v3)
  {
    v7 = sub_1000743FC();
    v8 = swift_allocError(&type metadata for SWTPublicKeyBagError, v7, 0, 0);
    *(_OWORD *)v9 = xmmword_1000DE090;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
    return;
  }
  v4 = (void *)v3;
  v5 = sub_100070024();
  if (v1)
  {
    swift_errorRelease();
LABEL_4:
    v6 = sub_10006DA30((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(0);
    goto LABEL_7;
  }
  v6 = (unint64_t)v5;
  if (!v5)
    goto LABEL_4;
LABEL_7:
  v10 = v2[34];
  if (v10 > 6)
  {
    v13 = 0xE700000000000000;
    v12 = 0x4E574F4E4B4E55;
  }
  else
  {
    v11 = 8 * v10;
    v12 = *(_QWORD *)&aUnknownIds[v11];
    v13 = *(_QWORD *)&aTlt[v11];
  }
  v14 = objc_msgSend(v4, "diskStoreDictionary");
  if (!v14)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (!v6)
  {
LABEL_17:
    __break(1u);
    __break(1u);
    __break(1u);
    return;
  }
  v15 = (uint64_t)v14;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  sub_100074754(v15, v12, v13, isUniquelyReferenced_nonNull_native);
  v17 = (void *)v6;
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(0x8000000000000000);
  v18 = (void *)sub_10006DA30((uint64_t)_swiftEmptyArrayStorage);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_100126688);
  v21 = v20;
  isa = Int32._bridgeToObjectiveC()().super.super.isa;
  v23 = swift_isUniquelyReferenced_nonNull_native(v18);
  v48 = v18;
  sub_100074754((uint64_t)isa, v19, v21, v23);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(0x8000000000000000);
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_100126680);
  v26 = v25;
  (*(void (**)(void))(*(_QWORD *)v2 + 208))();
  v27 = Bool._bridgeToObjectiveC()().super.super.isa;
  v28 = swift_isUniquelyReferenced_nonNull_native(v18);
  sub_100074754((uint64_t)v27, v24, v26, v28);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(0x8000000000000000);
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_100126678);
  v31 = v30;
  swift_bridgeObjectRetain(v18);
  v32 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  v33 = swift_isUniquelyReferenced_nonNull_native(v17);
  v48 = v17;
  sub_100074754((uint64_t)v32, v29, v31, v33);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(0x8000000000000000);
  v34 = (void *)objc_opt_self(TransparencyFileSupport);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v35 = sub_10007098C((uint64_t)v17);
  swift_bridgeObjectRelease(v17);
  v36 = Dictionary._bridgeToObjectiveC()().super.isa;
  v37 = swift_bridgeObjectRelease(v35);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 240))(v37);
  v39 = v38;
  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v39);
  URL._bridgeToObjectiveC()(v41);
  v43 = v42;
  v48 = 0;
  LOBYTE(v24) = objc_msgSend(v34, "writeDictionaryToFile:fileName:inDirectory:error:", v36, v40, v42, &v48);

  v44 = v48;
  if ((v24 & 1) != 0)
  {
    v45 = v48;
  }
  else
  {
    v46 = v48;
    _convertNSErrorToError(_:)(v44);

    swift_willThrow(v47);
  }
  swift_bridgeObjectRelease(v17);

}

uint64_t sub_10007098C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001D138(&qword_1001282B8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    *(_QWORD *)&v39[0] = *v18;
    *((_QWORD *)&v39[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v31, v39, &type metadata for String, &type metadata for AnyHashable, 7);
    v30 = v20;
    swift_dynamicCast(v34, &v30, (char *)&type metadata for Swift.AnyObject + 8, (char *)&type metadata for Any + 8, 7);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_10002E1B0(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_10002E1B0(v38, v39);
    sub_10002E1B0(v39, &v35);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v31;
    *(_OWORD *)(v11 + 16) = v32;
    *(_QWORD *)(v11 + 32) = v33;
    result = (uint64_t)sub_10002E1B0(&v35, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_10004BA60(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100070D44(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001D138(&qword_1001282B8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v26 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v25)
      goto LABEL_37;
    v15 = *(_QWORD *)(v26 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v25)
        goto LABEL_37;
      v15 = *(_QWORD *)(v26 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v25)
          goto LABEL_37;
        v15 = *(_QWORD *)(v26 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v25)
            goto LABEL_37;
          v15 = *(_QWORD *)(v26 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    sub_100068C7C(*(_QWORD *)(a1 + 48) + 40 * v13, (uint64_t)v39);
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    v27 = v39[0];
    v29 = v39[1];
    v31 = v40;
    *(_QWORD *)&v38[0] = v41;
    swift_unknownObjectRetain(v41);
    swift_dynamicCast(v33, v38, (char *)&type metadata for Swift.AnyObject + 8, (char *)&type metadata for Any + 8, 7);
    v34 = v27;
    v35 = v29;
    v36 = v31;
    sub_10002E1B0(v33, v37);
    v28 = v34;
    v30 = v35;
    v32 = v36;
    sub_10002E1B0(v37, v38);
    sub_10002E1B0(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v18 = -1 << *((_BYTE *)v3 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)&v7[8 * (v19 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)&v7[8 * (v19 >> 6)])) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v23 = v20 == v22;
        if (v20 == v22)
          v20 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)&v7[8 * v20];
      }
      while (v24 == -1);
      v10 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v28;
    *(_OWORD *)(v11 + 16) = v30;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10002E1B0(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v25)
  {
LABEL_37:
    swift_release(v3);
    sub_10004BA60(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v26 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v25)
      goto LABEL_37;
    v15 = *(_QWORD *)(v26 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000710F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;

  v33 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a1);
    if (v5)
      goto LABEL_3;
    return swift_bridgeObjectRelease(a1);
  }
  if (a1 < 0)
    v26 = a1;
  else
    v26 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  result = _CocoaArrayWrapper.endIndex.getter(v26);
  v5 = result;
  if (!result)
    return swift_bridgeObjectRelease(a1);
LABEL_3:
  if (v5 >= 1)
  {
    v31 = v4;
    v8 = 0;
    v9 = (_QWORD *)(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
    v10 = a1 & 0xC000000000000001;
    *(_QWORD *)&v7 = 136315394;
    v28 = v7;
    v27[1] = (char *)&type metadata for Any + 8;
    v35 = a1;
    v30 = v5;
    v34 = (_QWORD *)(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database);
    v29 = a1 & 0xC000000000000001;
    do
    {
      if (v10)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v11 = *(id *)(a1 + 8 * v8 + 32);
      v12 = v11;
      sub_100053F40((uint64_t)&v39);
      sub_10002E424((uint64_t)v9, (uint64_t)&v36);
      v13 = v37;
      v14 = v38;
      sub_100022F20(&v36, v37);
      v15 = sub_10002304C(&v39);
      v16 = v31;
      static Date.now.getter(v15);
      v17 = objc_msgSend(v12, "data");
      v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      v21 = sub_100054114();
      (*(void (**)(__int128 *, char *, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 24))(&v39, v16, v18, v20, v21, v13, v14);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v33);
      sub_100022F44(v18, v20);
      sub_100023CAC(&v36);
      v9 = v34;
      v22 = v34[3];
      v23 = v34[4];
      sub_100022F20(v34, v22);
      (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v23 + 48))(&v39, 1, v22, v23);
      a1 = v35;
      v24 = v9[3];
      v25 = v9[4];
      sub_100022F20(v9, v24);
      (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v25 + 40))(&v39, 1, v24, v25);
      sub_10002300C(&v39);

      sub_10002300C(&v39);
      v10 = v29;
      ++v8;
    }
    while (v30 != v8);
    return swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_100071748(unint64_t a1)
{
  return sub_100071770(a1, (SEL *)&selRef_tltLogBeginningMs, "Detected a TLT reset from %llu to %llu");
}

uint64_t sub_10007175C(unint64_t a1)
{
  return sub_100071770(a1, (SEL *)&selRef_patLogBeginningMs, "Detected a PAT reset from %llu to %llu");
}

uint64_t sub_100071770(unint64_t a1, SEL *a2, const char *a3)
{
  uint64_t v3;
  uint64_t result;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 152))();
  if (result)
  {
    v8 = (void *)result;
    if (objc_msgSend((id)result, *a2) && (unint64_t)objc_msgSend(v8, *a2) < a1)
    {
      if (qword_10012F350 != -1)
        swift_once(&qword_10012F350, sub_10006DC64);
      v9 = type metadata accessor for Logger(0);
      sub_100020804(v9, (uint64_t)qword_1001315B8);
      v10 = v8;
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = swift_slowAlloc(22, -1);
        *(_DWORD *)v13 = 134218240;
        v14 = objc_msgSend(v10, *a2);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v13 + 4, v13 + 12);

        *(_WORD *)(v13 + 12) = 2048;
        v14 = (id)a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v13 + 14, v13 + 22);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, a3, (uint8_t *)v13, 0x16u);
        swift_slowDealloc(v13, -1, -1);

      }
      else
      {

      }
      return 1;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t sub_100071920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return swift_task_switch(sub_10007193C, v2, 0);
}

uint64_t sub_10007193C()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = sub_100071748(*(_QWORD *)(v0 + 56));
  *(_BYTE *)(v0 + 88) = v2 & 1;
  v3 = sub_10007175C(v1);
  *(_BYTE *)(v0 + 89) = v3 & 1;
  if ((v3 & 1) != 0 || (v2 & 1) != 0)
  {
    sub_10002AC5C(*(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, v0 + 16, &qword_1001283F0);
    v5 = *(_QWORD *)(v0 + 40);
    if (v5)
    {
      v6 = *(_QWORD *)(v0 + 48);
      sub_100022F20((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v7 = *(int **)(v6 + 40);
      v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v7 + *v7);
      v8 = (_QWORD *)swift_task_alloc(v7[1]);
      *(_QWORD *)(v0 + 80) = v8;
      *v8 = v0;
      v8[1] = sub_100071A50;
      return v10(v5, v6);
    }
    sub_1000202F0(v0 + 16, &qword_1001283F0);
    v4 = *(_BYTE *)(v0 + 89) | *(_BYTE *)(v0 + 88);
  }
  else
  {
    v4 = 0;
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v4 & 1);
}

uint64_t sub_100071A50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return swift_task_switch(sub_100071AA4, v1, 0);
}

uint64_t sub_100071AA4()
{
  uint64_t v0;

  sub_100023CAC((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))((*(_BYTE *)(v0 + 89) | *(_BYTE *)(v0 + 88)) & 1);
}

id sub_100071AE4()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  Class isa;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  void *v8;
  void *v9;
  id v10;
  id v12;
  uint64_t v13;
  id v14;

  v1 = (void *)objc_opt_self(TransparencyFileSupport);
  v2 = sub_100060E7C((uint64_t)_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v4 = swift_bridgeObjectRelease(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 240))(v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory);
  v9 = v8;
  v14 = 0;
  LODWORD(v1) = objc_msgSend(v1, "writeDictionaryToFile:fileName:inDirectory:error:", isa, v7, v8, &v14);

  v10 = v14;
  if ((_DWORD)v1)
    return v14;
  v12 = v14;
  _convertNSErrorToError(_:)(v10);

  return (id)swift_willThrow(v13);
}

void sub_100071C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[3];
  uint64_t v80;
  _QWORD v81[3];
  uint64_t v82;
  id v83;

  v2 = v0;
  v3 = sub_100070024();
  if (v1)
    return;
  v4 = v3;
  if (!v3)
  {
    v23 = sub_1000743FC();
    v21 = swift_allocError(&type metadata for SWTPublicKeyBagError, v23, 0, 0);
    *(_OWORD *)v24 = xmmword_1000DE0A0;
    *(_BYTE *)(v24 + 16) = 2;
    goto LABEL_10;
  }
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_100126678);
  v7 = v6;
  if (!v4[2] || (v8 = sub_10003AFB8(v5, v6), (v9 & 1) == 0))
  {
    swift_bridgeObjectRelease(v4);
    v16 = swift_bridgeObjectRelease(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 312))(v16);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_100126678);
    v19 = v18;
    v20 = sub_1000743FC();
    v21 = swift_allocError(&type metadata for SWTPublicKeyBagError, v20, 0, 0);
    *(_QWORD *)v22 = v17;
    *(_QWORD *)(v22 + 8) = v19;
    *(_BYTE *)(v22 + 16) = 0;
LABEL_10:
    swift_willThrow(v21);
    return;
  }
  v10 = *(void **)(v4[7] + 8 * v8);
  swift_unknownObjectRetain(v10);
  swift_bridgeObjectRelease(v7);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_100126688);
  v13 = v12;
  if ((objc_msgSend(v10, "respondsToSelector:", "__swift_objectForKeyedSubscript:") & 1) != 0)
  {
    *(_QWORD *)&v73 = v11;
    *((_QWORD *)&v73 + 1) = v13;
    swift_bridgeObjectRetain(v13);
    v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v73, &type metadata for String);
    v15 = objc_msgSend(v10, "__swift_objectForKeyedSubscript:", v14);
    swift_unknownObjectRelease(v14);
    if (v15)
    {
      _bridgeAnyObjectToAny(_:)(&v73, v15);
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v73 = 0u;
      v74 = 0u;
    }
    sub_100074D7C((uint64_t)&v73, (uint64_t)&v75, &qword_100126F70);
  }
  else
  {
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 1;
  }
  sub_100074D7C((uint64_t)&v75, (uint64_t)v79, &qword_100128410);
  if (v80 == 1)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v4);
    v25 = sub_1000202F0((uint64_t)v79, &qword_100128410);
LABEL_22:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 312))(v25);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_100126688);
    v30 = v29;
    v31 = sub_1000743FC();
    v32 = swift_allocError(&type metadata for SWTPublicKeyBagError, v31, 0, 0);
    *(_QWORD *)v33 = v28;
    *(_QWORD *)(v33 + 8) = v30;
    *(_BYTE *)(v33 + 16) = 0;
    swift_willThrow(v32);
    swift_unknownObjectRelease(v10);
    return;
  }
  sub_100074D7C((uint64_t)v79, (uint64_t)v81, &qword_100126F70);
  if (!v82)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v4);
    v25 = sub_1000202F0((uint64_t)v81, &qword_100126F70);
    goto LABEL_22;
  }
  if ((swift_dynamicCast(&v73, v81, (char *)&type metadata for Any + 8, &type metadata for Int32, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v13);
    v25 = swift_bridgeObjectRelease(v4);
    goto LABEL_22;
  }
  v83 = v10;
  v26 = v73;
  swift_bridgeObjectRelease(v13);
  if (v26 < kTransparencyProtocolVersion)
  {
    v27 = swift_bridgeObjectRelease(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 312))(v27);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_100126688);
    v43 = v42;
    v44 = sub_1000743FC();
    v45 = swift_allocError(&type metadata for SWTPublicKeyBagError, v44, 0, 0);
    *(_QWORD *)v46 = v41;
    *(_QWORD *)(v46 + 8) = v43;
    *(_BYTE *)(v46 + 16) = 1;
    swift_willThrow(v45);
    swift_unknownObjectRelease(v83);
    return;
  }
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_100126680);
  v36 = v35;
  v37 = v83;
  if ((objc_msgSend(v83, "respondsToSelector:", "__swift_objectForKeyedSubscript:") & 1) != 0)
  {
    *(_QWORD *)&v73 = v34;
    *((_QWORD *)&v73 + 1) = v36;
    v38 = v36;
    swift_bridgeObjectRetain(v36);
    v39 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v73, &type metadata for String);
    v40 = objc_msgSend(v37, "__swift_objectForKeyedSubscript:", v39);
    swift_unknownObjectRelease(v39);
    if (v40)
    {
      _bridgeAnyObjectToAny(_:)(&v73, v40);
      swift_unknownObjectRelease(v40);
    }
    else
    {
      v73 = 0u;
      v74 = 0u;
    }
    sub_100074D7C((uint64_t)&v73, (uint64_t)&v75, &qword_100126F70);
    v36 = v38;
  }
  else
  {
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 1;
  }
  sub_100074D7C((uint64_t)&v75, (uint64_t)v79, &qword_100128410);
  if (v80 == 1)
  {
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v4);
    v47 = sub_1000202F0((uint64_t)v79, &qword_100128410);
LABEL_38:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 312))(v47);
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_100126680);
    v55 = v54;
    v56 = sub_1000743FC();
    v57 = swift_allocError(&type metadata for SWTPublicKeyBagError, v56, 0, 0);
    *(_QWORD *)v58 = v53;
    *(_QWORD *)(v58 + 8) = v55;
LABEL_50:
    *(_BYTE *)(v58 + 16) = 0;
    swift_willThrow(v57);
    swift_unknownObjectRelease(v37);
    return;
  }
  sub_100074D7C((uint64_t)v79, (uint64_t)v81, &qword_100126F70);
  if (!v82)
  {
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v4);
    v47 = sub_1000202F0((uint64_t)v81, &qword_100126F70);
    goto LABEL_38;
  }
  if ((swift_dynamicCast(&v73, v81, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v36);
    v47 = swift_bridgeObjectRelease(v4);
    goto LABEL_38;
  }
  v48 = 0x4E574F4E4B4E55;
  v49 = v73;
  swift_bridgeObjectRelease(v36);
  v50 = *(int *)(v2 + 136);
  if (v50 > 6)
  {
    v52 = 0xE700000000000000;
    v51 = 0x4E574F4E4B4E55;
  }
  else
  {
    v51 = *(_QWORD *)&aUnknownIds[8 * v50];
    v52 = *(_QWORD *)&aTlt[8 * v50];
  }
  if (!v4[2] || (v59 = sub_10003AFB8(v51, v52), (v60 & 1) == 0))
  {
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v4);
    goto LABEL_46;
  }
  v61 = *(_QWORD *)(v4[7] + 8 * v59);
  swift_unknownObjectRetain(v61);
  swift_bridgeObjectRelease(v52);
  swift_bridgeObjectRelease(v4);
  v81[0] = v61;
  v62 = sub_10001D138(&qword_100128418);
  if ((swift_dynamicCast(v79, v81, (char *)&type metadata for Swift.AnyObject + 8, v62, 6) & 1) == 0)
  {
LABEL_46:
    if (v50 > 6)
    {
      v66 = 0xE700000000000000;
    }
    else
    {
      v48 = *(_QWORD *)&aUnknownIds[8 * v50];
      v66 = *(_QWORD *)&aTlt[8 * v50];
    }
    v67 = sub_1000743FC();
    v57 = swift_allocError(&type metadata for SWTPublicKeyBagError, v67, 0, 0);
    *(_QWORD *)v58 = v48;
    *(_QWORD *)(v58 + 8) = v66;
    goto LABEL_50;
  }
  v63 = v79[0];
  v64 = sub_100070D44(v79[0]);
  swift_bridgeObjectRelease(v63);
  if (v50 > 6)
  {
    v65 = 0xE700000000000000;
  }
  else
  {
    v48 = *(_QWORD *)&aUnknownIds[8 * v50];
    v65 = *(_QWORD *)&aTlt[8 * v50];
  }
  v68 = objc_msgSend(*(id *)(v2 + 128), "transparencySettings", v73, v74, v75, v76, v77, v78);
  v69 = objc_allocWithZone((Class)TransparencyPublicKeyBag);
  v70 = sub_100074B14(v64, v48, v65, (uint64_t)v68, 1);
  swift_unknownObjectRelease(v68);
  swift_beginAccess(v2 + 112, v81, 1, 0);
  v71 = *(void **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = v70;
  v72 = v70;

  if ((v49 & 1) == 0)
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 216))(0);
  swift_unknownObjectRelease(v83);

}

uint64_t sub_10007242C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  return swift_task_switch(sub_10007249C, v1, 0);
}

uint64_t sub_10007249C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v1 = *(int **)(v0 + 48);
  v2 = v1[34];
  v3 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();

  v4 = *(_QWORD *)v1;
  if (v3)
  {
    if (((*(uint64_t (**)(void))(v4 + 208))() & 1) == 0
      || ((*(uint64_t (**)(void))(**(_QWORD **)(v0 + 48) + 192))() & 1) != 0)
    {
      if (qword_10012F350 != -1)
        swift_once(&qword_10012F350, sub_10006DC64);
      v5 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 56);
      v6 = *(_QWORD *)(v0 + 64);
      v8 = sub_100020804(v7, (uint64_t)qword_1001315B8);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = swift_slowAlloc(32, -1);
        v24 = v13;
        *(_DWORD *)v12 = 136315138;
        if (v2 > 6)
        {
          v14 = 0x4E574F4E4B4E55;
          v15 = 0xE700000000000000;
        }
        else
        {
          v14 = *(_QWORD *)&aUnknownIds[8 * v2];
          v15 = *(_QWORD *)&aTlt[8 * v2];
        }
        v23 = *(_QWORD *)(v0 + 80);
        v20 = *(_QWORD *)(v0 + 56);
        v19 = *(_QWORD *)(v0 + 64);
        *(_QWORD *)(v0 + 32) = sub_1000230D0(v14, v15, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v12 + 4, v12 + 12);
        swift_bridgeObjectRelease(v15);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "have key bag for %s, but triggering refresh", v12, 0xCu);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v20);
      }
      else
      {
        v16 = *(_QWORD *)(v0 + 80);
        v17 = *(_QWORD *)(v0 + 56);
        v18 = *(_QWORD *)(v0 + 64);

        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
    }
  }
  else
  {
    (*(void (**)(void))(v4 + 320))();
    *(_QWORD *)(v0 + 88) = 0;
  }
  v21 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000729C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100072A6C;
  else
    v4 = sub_100072A28;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 48), 0);
}

uint64_t sub_100072A28()
{
  uint64_t v0;
  uint64_t v1;

  swift_errorRelease(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  swift_errorRelease(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100072AB4()
{
  qword_1001315D0 = 0x6142666E43545753;
  *(_QWORD *)algn_1001315D8 = 0xE900000000000067;
}

uint64_t *sub_100072ADC()
{
  if (qword_10012F358 != -1)
    swift_once(&qword_10012F358, sub_100072AB4);
  return &qword_1001315D0;
}

uint64_t sub_100072B1C()
{
  uint64_t v0;

  if (qword_10012F358 != -1)
    swift_once(&qword_10012F358, sub_100072AB4);
  v0 = qword_1001315D0;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1001315D8);
  return v0;
}

uint64_t sub_100072B78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for URLRequest(0);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[13] = v6;
  v2[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100127170) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v7);
  v2[16] = swift_task_alloc(v7);
  v2[17] = swift_task_alloc(v7);
  v8 = type metadata accessor for URL(0);
  v2[18] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[19] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v10);
  v2[21] = swift_task_alloc(v10);
  return swift_task_switch(sub_100072C78, v1, 0);
}

uint64_t sub_100072C78()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  void *v5;
  NSString v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  id v21;
  NSString v22;
  NSString v23;
  NSString v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  id v35;
  id v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  _QWORD *v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  void (*v88)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  int *v95;
  uint64_t v96;

  v1 = *(_QWORD **)(v0 + 56);
  v2 = v1[3];
  v3 = v1[4];
  sub_100022F20(v1, v2);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  v5 = (void *)v4(v2, v3);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "urlForKey:", v6);

  if (!v7)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 136), 1, 1, *(_QWORD *)(v0 + 144));
    goto LABEL_21;
  }
  v93 = v4;
  v9 = *(_QWORD **)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 144);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v7);

  v12 = (void (*)(uint64_t, uint64_t, uint64_t))v9[4];
  v12(v11, v8, v10);
  v13 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9[7];
  v13(v11, 0, 1, v10);
  v14 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v9[6];
  if (v14(v11, 1, v10) == 1)
  {
LABEL_21:
    sub_1000202F0(*(_QWORD *)(v0 + 136), &qword_100127170);
    v59 = sub_1000743FC();
    v60 = swift_allocError(&type metadata for SWTPublicKeyBagError, v59, 0, 0);
    *(_OWORD *)v61 = xmmword_1000DE0B0;
    *(_BYTE *)(v61 + 16) = 2;
    swift_willThrow(v60);
    v62 = *(_QWORD *)(v0 + 160);
    v64 = *(_QWORD *)(v0 + 128);
    v63 = *(_QWORD *)(v0 + 136);
    v66 = *(_QWORD *)(v0 + 112);
    v65 = *(_QWORD *)(v0 + 120);
    v67 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v88 = v13;
  v89 = v14;
  v16 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 152);
  v12(v15, *(_QWORD *)(v0 + 136), v18);
  sub_10002E3EC(0, (unint64_t *)&qword_100127E30, NSMutableURLRequest_ptr);
  v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v87(v16, v15, v18);
  v19 = (void *)objc_opt_self(TransparencySettings);
  objc_msgSend(v19, "defaultNetworkTimeout");
  v21 = sub_100097F40(v16, v20);
  *(_QWORD *)(v0 + 176) = v21;
  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(v21, "setHTTPMethod:", v22);

  v23 = String._bridgeToObjectiveC()();
  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v21, "setValue:forHTTPHeaderField:", v23, v24);

  v25 = objc_msgSend(v19, "deviceUserAgent");
  if (!v25)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v27 = v26;
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
  }
  v28 = *(_QWORD *)(v0 + 64);
  v29 = String._bridgeToObjectiveC()();
  objc_msgSend(v21, "setValue:forHTTPHeaderField:", v25, v29);

  v30 = *(_DWORD *)(v28 + 136);
  *(_DWORD *)(v0 + 260) = v30;
  *(_DWORD *)(v0 + 256) = v30;
  v31 = sub_100074C40();
  BinaryInteger.description.getter(&type metadata for Int32, v31);
  v33 = v32;
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33);
  objc_msgSend(v21, "setValue:forHTTPHeaderField:", v34, off_1001266A0);

  v35 = (id)ProtocolVersion_EnumDescriptor();
  v36 = objc_msgSend(v35, "textFormatNameForValue:", kTransparencyProtocolVersion);

  objc_msgSend(v21, "setValue:forHTTPHeaderField:", v36, off_1001266A8);
  v37 = objc_msgSend(v19, "transparencyVersionStr");
  if (!v37)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v39 = v38;
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
  }
  objc_msgSend(v21, "setValue:forHTTPHeaderField:", v37, off_1001266B8);

  v40 = objc_msgSend(v19, "automatedDeviceGroup");
  if (v40)
  {
    v41 = v40;
    objc_msgSend(v21, "setValue:forHTTPHeaderField:", v40, off_1001266B0);

  }
  v42 = (void *)v93(v2, v3);
  v43 = objc_msgSend(v42, "currentEnvironment");

  if (sub_100026054((uint64_t)v43))
  {
    objc_msgSend(v21, "_setPrivacyProxyFailClosed:", 1);
    if (qword_10012F350 != -1)
      swift_once(&qword_10012F350, sub_10006DC64);
    v44 = sub_100020804(*(_QWORD *)(v0 + 96), (uint64_t)qword_1001315B8);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Enforcing privacy proxy", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

  }
  if (qword_10012F350 != -1)
    swift_once(&qword_10012F350, sub_10006DC64);
  v49 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 112);
  v50 = *(_QWORD *)(v0 + 96);
  v51 = sub_100020804(v50, (uint64_t)qword_1001315B8);
  *(_QWORD *)(v0 + 184) = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v48, v51, v50);
  v52 = v21;
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v94 = swift_slowAlloc(32, -1);
    v96 = v94;
    *(_DWORD *)v55 = 136315138;
    v56 = objc_msgSend(v52, "URL");
    if (v56)
    {
      v57 = v56;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v56);

      v58 = 0;
    }
    else
    {
      v58 = 1;
    }
    v72 = *(_QWORD *)(v0 + 144);
    v74 = *(_QWORD *)(v0 + 120);
    v73 = *(_QWORD *)(v0 + 128);
    v88(v74, v58, 1, v72);
    sub_100074D7C(v74, v73, &qword_100127170);
    if (v89(v73, 1, v72))
    {
      sub_1000202F0(*(_QWORD *)(v0 + 128), &qword_100127170);
      v75 = 0xE100000000000000;
      v76 = 45;
    }
    else
    {
      v77 = *(_QWORD *)(v0 + 160);
      v91 = *(_QWORD *)(v0 + 152);
      v78 = *(_QWORD *)(v0 + 144);
      v79 = *(_QWORD *)(v0 + 128);
      v87(v77, v79, v78);
      v80 = sub_1000202F0(v79, &qword_100127170);
      v76 = URL.description.getter(v80);
      v75 = v81;
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v77, v78);
    }
    v82 = *(_QWORD *)(v0 + 104);
    v90 = *(_QWORD *)(v0 + 96);
    v92 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v0 + 48) = sub_1000230D0(v76, v75, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease(v75);

    _os_log_impl((void *)&_mh_execute_header, v53, v54, "configuring from network %s", v55, 0xCu);
    swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v92, v90);
  }
  else
  {
    v70 = *(_QWORD *)(v0 + 104);
    v69 = *(_QWORD *)(v0 + 112);
    v71 = *(_QWORD *)(v0 + 96);

    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
  }
  v84 = v1[3];
  v83 = v1[4];
  sub_100022F20(*(_QWORD **)(v0 + 56), v84);
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v52);
  v85 = *(int **)(v83 + 24);
  v95 = (int *)((char *)v85 + *v85);
  v86 = (_QWORD *)swift_task_alloc(v85[1]);
  *(_QWORD *)(v0 + 192) = v86;
  *v86 = v0;
  v86[1] = sub_100073530;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v95)(*(_QWORD *)(v0 + 88), v84, v83);
}

uint64_t sub_100073530(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 192);
  v4[25] = a1;
  v4[26] = a2;
  v4[27] = v2;
  swift_task_dealloc(v5);
  v7 = v4[10];
  v6 = v4[11];
  v9 = v4 + 8;
  v8 = v4[8];
  (*(void (**)(uint64_t, _QWORD))(v7 + 8))(v6, v9[1]);
  if (v2)
    v10 = sub_100073C1C;
  else
    v10 = sub_1000735B0;
  return swift_task_switch(v10, v8, 0);
}

uint64_t sub_1000735B0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = objc_allocWithZone((Class)PublicKeysResponse);
  sub_100022F88(v3, v1);
  v5 = sub_10002E330();
  *(_QWORD *)(v0 + 224) = v5;
  v7 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 208);
  if (v2)
  {
    v8 = *(_QWORD *)(v0 + 168);
    v9 = *(void **)(v0 + 176);
    v10 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 152);
    sub_100022F44(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
    sub_100022F44(v7, v6);

    v21 = *(_QWORD *)(v0 + 160);
    v23 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v0 + 136);
    v25 = *(_QWORD *)(v0 + 112);
    v24 = *(_QWORD *)(v0 + 120);
    v26 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = v5;
    v13 = *(int *)(v0 + 260);
    sub_100022F44(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
    if (v13 >= 7)
    {
      v15 = 0xE700000000000000;
      v14 = 0x4E574F4E4B4E55;
    }
    else
    {
      v14 = *(_QWORD *)&aUnknownIds[8 * v13];
      v15 = *(_QWORD *)&aTlt[8 * v13];
    }
    v16 = *(void **)(*(_QWORD *)(v0 + 64) + 128);
    v17 = v12;
    v18 = objc_msgSend(v16, "transparencySettings");
    v19 = objc_allocWithZone((Class)TransparencyPublicKeyBag);
    v20 = sub_100074C84((uint64_t)v17, v14, v15, (uint64_t)v18, 1);
    *(_QWORD *)(v0 + 232) = v20;
    *(_QWORD *)(v0 + 240) = 0;
    v28 = v20;
    swift_unknownObjectRelease(v18);

    v29 = objc_msgSend(v28, "verifiedLogHeads");
    v30 = sub_10002E3EC(0, (unint64_t *)&qword_100126C58, off_1001050E0);
    v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

    sub_1000710F4(v31);
    swift_bridgeObjectRelease(v31);
    v32 = objc_msgSend(v28, "tltLogBeginningMs");
    v33 = objc_msgSend(v28, "patLogBeginningMs");
    v34 = (_QWORD *)swift_task_alloc(dword_10012843C);
    *(_QWORD *)(v0 + 248) = v34;
    *v34 = v0;
    v34[1] = sub_100073884;
    v35 = *(_QWORD *)(v0 + 64);
    v34[8] = v33;
    v34[9] = v35;
    v34[7] = v32;
    return swift_task_switch(sub_10007193C, v35, 0);
  }
}

uint64_t sub_100073884()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  return swift_task_switch(sub_1000738DC, v1, 0);
}

uint64_t sub_1000738DC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  NSObject *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = (void *)v0[29];
  v2 = v0[8];
  swift_beginAccess(v2 + 112, v0 + 2, 1, 0);
  v3 = *(void **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = v1;
  v4 = v1;

  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "storing public key to disk", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = v0[30];

  sub_10007054C();
  if (v9)
  {
    v10 = v9;
    swift_errorRetain(v9);
    v11 = swift_errorRetain(v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      swift_errorRetain(v10);
      v16 = _swift_stdlib_bridgeErrorToNSError(v10);
      v0[5] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v14 + 4, v14 + 12);
      *v15 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "failed to write new public key response to disk: %@", v14, 0xCu);
      v17 = sub_10001D138(&qword_100127730);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    v28 = v12;
    v30 = (void *)v0[28];
    v29 = (void *)v0[29];
    v32 = v0[25];
    v31 = v0[26];
    v33 = (void *)v0[22];
    v47 = v0[21];
    v35 = v0[18];
    v34 = v0[19];

    swift_willThrow(v36);
    sub_100022F44(v32, v31);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v47, v35);
    v37 = v0[20];
    v39 = v0[16];
    v38 = v0[17];
    v41 = v0[14];
    v40 = v0[15];
    v42 = v0[11];
    swift_task_dealloc(v0[21]);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    v27 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v18 = (void *)v0[28];
    v19 = (void *)v0[29];
    v20 = v0[25];
    v21 = v0[26];
    v22 = v0[21];
    v23 = (void *)v0[22];
    v24 = v0[20];
    v25 = v0[17];
    v26 = v0[16];
    v44 = v0[15];
    v45 = v0[14];
    v46 = v0[11];
    (*(void (**)(uint64_t, _QWORD))(v0[19] + 8))(v22, v0[18]);

    sub_100022F44(v20, v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    v27 = (uint64_t (*)(void))v0[1];
  }
  return v27();
}

uint64_t sub_100073C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100073CC0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = v0;
  return swift_task_switch(sub_100073CD8, v0, 0);
}

uint64_t sub_100073CD8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  sub_10002AC5C(*(_QWORD *)(v0 + 96) + 144, v0 + 56, &qword_1001283E8);
  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 96);
    sub_100032478((__int128 *)(v0 + 56), v0 + 16);
    v2 = *(int **)(*(_QWORD *)v1 + 328);
    v8 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
    v3 = (_QWORD *)swift_task_alloc(v2[1]);
    *(_QWORD *)(v0 + 104) = v3;
    *v3 = v0;
    v3[1] = sub_100073DD4;
    return v8(v0 + 16);
  }
  else
  {
    sub_1000202F0(v0 + 56, &qword_1001283E8);
    v5 = sub_1000743FC();
    v6 = swift_allocError(&type metadata for SWTPublicKeyBagError, v5, 0, 0);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 16) = 2;
    swift_willThrow(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100073DD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100073E6C;
  else
    v4 = sub_100073E38;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), 0);
}

uint64_t sub_100073E38()
{
  uint64_t v0;

  sub_100023CAC((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100073E6C()
{
  uint64_t v0;

  sub_100023CAC((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100073EA0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 216) = v0;
  return swift_task_switch(sub_100073EB8, v0, 0);
}

uint64_t sub_100073EB8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  sub_10002AC5C(*(_QWORD *)(v0 + 216) + 144, v0 + 160, &qword_1001283E8);
  if (*(_QWORD *)(v0 + 184))
  {
    v1 = *(_QWORD *)(v0 + 216);
    sub_100032478((__int128 *)(v0 + 160), v0 + 120);
    v2 = *(int **)(*(_QWORD *)v1 + 336);
    v8 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
    v3 = (_QWORD *)swift_task_alloc(v2[1]);
    *(_QWORD *)(v0 + 224) = v3;
    *v3 = v0;
    v3[1] = sub_100073FB4;
    return v8(v0 + 120);
  }
  else
  {
    sub_1000202F0(v0 + 160, &qword_1001283E8);
    v5 = sub_1000743FC();
    v6 = swift_allocError(&type metadata for SWTPublicKeyBagError, v5, 0, 0);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 16) = 2;
    swift_willThrow(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100073FB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000740BC;
  else
    v4 = sub_100074018;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 216), 0);
}

uint64_t sub_100074018()
{
  uint64_t v0;
  void *v1;
  NSString v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 216) + 120);
  if (qword_10012F358 != -1)
    swift_once(&qword_10012F358, sub_100072AB4);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "logResultForEvent:hardFailure:result:", v2, 1, 0);

  sub_100023CAC((_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000740BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSString v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  BOOL v11;
  unint64_t v12;
  Class isa;

  v1 = *(void **)(*(_QWORD *)(v0 + 216) + 120);
  if (qword_10012F358 != -1)
    swift_once(&qword_10012F358, sub_100072AB4);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = String._bridgeToObjectiveC()();
  v4 = (void *)_convertErrorToNSError(_:)(v2);
  v5 = sub_10001D138(&qword_100128288);
  inited = swift_initStackObject(v5, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
  *(_QWORD *)(v0 + 200) = 112;
  *(_QWORD *)(v0 + 208) = 0xE100000000000000;
  AnyHashable.init<A>(_:)(v0 + 200, &type metadata for String, &protocol witness table for String);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 152);
  sub_100022F20((_QWORD *)(v0 + 120), v7);
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  v10 = objc_msgSend(v9, "currentEnvironment");

  v11 = sub_100026054((uint64_t)v10);
  *(_QWORD *)(inited + 96) = &type metadata for Bool;
  *(_BYTE *)(inited + 72) = v11;
  v12 = sub_100060E7C(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v1, "logResultForEvent:hardFailure:result:withAttributes:", v3, 1, v4, isa);

  swift_errorRelease();
  sub_100023CAC((_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100074280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 128));
  sub_1000202F0(v0 + 144, &qword_1001283E8);
  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100023CAC((_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database));
  sub_1000202F0(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, &qword_1001283F0);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10007431C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 128));
  sub_1000202F0(v0 + 144, &qword_1001283E8);
  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_directory;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100023CAC((_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_database));
  sub_1000202F0(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTPublicKeyBag_followup, &qword_1001283F0);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

unint64_t sub_1000743B8()
{
  unint64_t result;

  result = qword_100128400;
  if (!qword_100128400)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100128400);
  }
  return result;
}

unint64_t sub_1000743FC()
{
  unint64_t result;

  result = qword_100128408;
  if (!qword_100128408)
  {
    result = swift_getWitnessTable(&unk_1000DE0CC, &type metadata for SWTPublicKeyBagError);
    atomic_store(result, (unint64_t *)&qword_100128408);
  }
  return result;
}

Swift::Int sub_100074440(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001D138(&qword_100128600);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_unknownObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100074754(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10003AFB8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000748B0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_unknownObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_100074440(v15, a4 & 1);
  v21 = sub_10003AFB8(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void *sub_1000748B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10001D138(&qword_100128600);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_unknownObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100074A64(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

id sub_100074B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  void *v5;
  Class isa;
  NSString v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v17;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v17 = 0;
  v12 = objc_msgSend(v5, "initWithDiskKeyStore:application:settings:allowOldKeys:error:", isa, v11, a4, a5 & 1, &v17);

  v13 = v17;
  if (v12)
  {
    v14 = v17;
  }
  else
  {
    v15 = v17;
    _convertNSErrorToError(_:)(v13);

    swift_willThrow();
  }
  return v12;
}

unint64_t sub_100074C40()
{
  unint64_t result;

  result = qword_100128430;
  if (!qword_100128430)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_100128430);
  }
  return result;
}

id sub_100074C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  void *v5;
  NSString v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v16;

  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v16 = 0;
  v11 = objc_msgSend(v5, "initWithPublicKeysResponse:application:settings:allowOldKeys:error:", a1, v10, a4, a5 & 1, &v16);

  v12 = v16;
  if (v11)
  {
    v13 = v16;
  }
  else
  {
    v14 = v16;
    _convertNSErrorToError(_:)(v12);

    swift_willThrow();
  }
  return v11;
}

uint64_t sub_100074D7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001D138(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for SWTPublicKeyBagError(uint64_t a1)
{
  return sub_100074DD8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100074DD8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t _s15swtransparencyd20SWTPublicKeyBagErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10006DA18(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SWTPublicKeyBagError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10006DA18(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100074DD8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SWTPublicKeyBagError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100074DD8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SWTPublicKeyBagError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SWTPublicKeyBagError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100074F5C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_100074F74(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SWTPublicKeyBagError()
{
  return &type metadata for SWTPublicKeyBagError;
}

uint64_t sub_100074F9C()
{
  return type metadata accessor for SWTPublicKeyBag(0);
}

uint64_t type metadata accessor for SWTPublicKeyBag(uint64_t a1)
{
  uint64_t result;

  result = qword_10012F580;
  if (!qword_10012F580)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SWTPublicKeyBag);
  return result;
}

uint64_t sub_100074FE0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[1] = &unk_1000DE258;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = &unk_1000DE270;
  v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[5] = &unk_1000DE288;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = &unk_1000DE2A0;
    v4[8] = &unk_1000DE288;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_10007509C()
{
  unint64_t result;

  result = qword_1001285F8;
  if (!qword_1001285F8)
  {
    result = swift_getWitnessTable(&unk_1000DE154, &type metadata for SWTPublicKeyBagError);
    atomic_store(result, (unint64_t *)&qword_1001285F8);
  }
  return result;
}

void *sub_1000750E0()
{
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1000750EC(__int128 *a1)
{
  return sub_100075D24(a1, 1);
}

uint64_t sub_1000750F4(__int128 *a1)
{
  return sub_100075D8C(a1, 1);
}

uint64_t sub_1000750FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_10001D138(&qword_100127220);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100075158, v0, 0);
}

uint64_t sub_100075158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_allocObject(&unk_100109D98, 24, 7);
  *(_QWORD *)(v3 + 16) = os_transaction_create("InitialLoadConfigState");
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = sub_100076210(&qword_100128690, type metadata accessor for InitialLoadConfigState, (uint64_t)&unk_1000DE398);
  v6 = (_QWORD *)swift_allocObject(&unk_100109DC0, 48, 7);
  v6[2] = v1;
  v6[3] = v5;
  v6[4] = v1;
  v6[5] = v3;
  swift_retain_n(v1, 2);
  v7 = sub_100075B10(v2, (uint64_t)&unk_100128698, (uint64_t)v6) | 0x4000000000000000;
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_100075250()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100075274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[22] = a4;
  v5[23] = a5;
  v5[21] = a1;
  v7 = type metadata accessor for Logger(0);
  v5[24] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[25] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[26] = swift_task_alloc(v9);
  v5[27] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000752EC, a4, 0);
}

uint64_t sub_1000752EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  swift_beginAccess(v0[23] + 16, v0 + 15, 1, 0);
  v1 = (_QWORD *)v0[22];
  v2 = v1[19];
  v3 = v1[20];
  sub_100022F20(v1 + 16, v2);
  v0[28] = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  v4 = v1[19];
  v5 = v1[20];
  sub_100022F20(v1 + 16, v4);
  v6 = *(int **)(v5 + 96);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v0[29] = v7;
  *v7 = v0;
  v7[1] = sub_1000753B4;
  return v9(v4, v5);
}

uint64_t sub_1000753B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100075414, v3, 0);
}

uint64_t sub_100075414()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = v0[30];
  v3 = (void *)v0[28];
  v0[2] = v0;
  v0[3] = sub_1000754B0;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_100075A9C;
  v5[3] = &unk_100109E78;
  v5[4] = v4;
  objc_msgSend(v3, "configureWithFetcher:completionHandler:", v2, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_1000754B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 248) = v2;
  if (v2)
    v3 = sub_1000756B4;
  else
    v3 = sub_100075510;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 176), 0);
}

uint64_t sub_100075510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 184);

  swift_unknownObjectRelease(v1);
  swift_beginAccess(v2 + 16, v0 + 144, 0, 0);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  **(_BYTE **)(v0 + 168) = 4;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100075590()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 256));
  v3 = *(_QWORD *)(v2 + 176);
  if (v0)
  {
    swift_errorRelease();
    v4 = sub_100076554;
  }
  else
  {
    v4 = sub_1000755FC;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000755FC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  swift_errorRelease();
  v1 = (_QWORD *)v0[22];
  v2 = v1[19];
  v3 = v1[20];
  sub_100022F20(v1 + 16, v2);
  v0[28] = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  v4 = v1[19];
  v5 = v1[20];
  sub_100022F20(v1 + 16, v4);
  v6 = *(int **)(v5 + 96);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v0[29] = v7;
  *v7 = v0;
  v7[1] = sub_1000753B4;
  return v9(v4, v5);
}

uint64_t sub_1000756B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v2 = *(_QWORD *)(v1 + 240);
  v3 = *(_QWORD *)(v1 + 248);
  v4 = *(void **)(v1 + 224);
  swift_willThrow(a1);

  v5 = swift_unknownObjectRelease(v2);
  Logger.init()(v5);
  swift_errorRetain(v3);
  v6 = swift_errorRetain(v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v1 + 248);
  if (v9)
  {
    v11 = swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v10);
    v13 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v11 + 4) = v13;
    *v12 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "load config threw error: %@", (uint8_t *)v11, 0xCu);
    v14 = sub_10001D138(&qword_100127730);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  v15 = *(_QWORD *)(v1 + 248);
  v17 = *(_QWORD *)(v1 + 200);
  v16 = *(_QWORD *)(v1 + 208);
  v18 = *(_QWORD *)(v1 + 192);

  v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v19(v16, v18);
  type metadata accessor for ReachabilityTracker();
  v20 = (void *)_convertErrorToNSError(_:)(v15);
  LOBYTE(v16) = sub_10001F0F4(v20);

  v22 = *(_QWORD *)(v1 + 248);
  if ((v16 & 1) != 0)
  {
    swift_errorRelease();
    v24 = *(_QWORD *)(v1 + 208);
    v23 = *(_QWORD *)(v1 + 216);
    **(_BYTE **)(v1 + 168) = 2;
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    Logger.init()(v21);
    swift_errorRetain(v22);
    v26 = swift_errorRetain(v22);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(_QWORD *)(v1 + 248);
    if (v29)
    {
      v31 = swift_slowAlloc(12, -1);
      v32 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v31 = 138412290;
      swift_errorRetain(v30);
      v33 = _swift_stdlib_bridgeErrorToNSError(v30);
      *(_QWORD *)(v31 + 4) = v33;
      *v32 = v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "load config threw error: %@", (uint8_t *)v31, 0xCu);
      v34 = sub_10001D138(&qword_100127730);
      swift_arrayDestroy(v32, 1, v34);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    v35 = *(_QWORD *)(v1 + 216);
    v37 = *(_QWORD *)(v1 + 184);
    v36 = *(_QWORD *)(v1 + 192);

    v19(v35, v36);
    v38 = *(_QWORD *)(v37 + 16);
    *(_QWORD *)(v37 + 16) = 0;
    swift_unknownObjectRelease(v38);
    v39 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v1 + 256) = v39;
    *v39 = v1;
    v39[1] = sub_100075590;
    return static Task<>.sleep(nanoseconds:)(30000000000);
  }
}

uint64_t type metadata accessor for InitialLoadConfigState()
{
  return objc_opt_self(_TtC15swtransparencyd22InitialLoadConfigState);
}

uint64_t sub_100075A2C()
{
  return sub_100076278((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100075A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_10012868C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100020638;
  return sub_100075274(a1, v7, v8, v5, v4);
}

uint64_t sub_100075A9C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_10001D138(&qword_100127AE0);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_100075B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100076504(a1);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      v16 = 0;
      return swift_task_create(v9, v16, &type metadata for SMState, a2, a3);
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v10);
  swift_unknownObjectRetain(v10);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13))
    goto LABEL_6;
  v19[0] = 0;
  v19[1] = 0;
  v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v9, v16, &type metadata for SMState, a2, a3);
}

uint64_t sub_100075C40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(*(_QWORD *)v1 + 120);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100076548;
  return v7(a1);
}

uint64_t sub_100075CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(*(_QWORD *)v1 + 128);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100076548;
  return v7(a1);
}

uint64_t sub_100075D08()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 120));
}

uint64_t sub_100075D10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002E424(v1 + 128, a1);
}

uint64_t sub_100075D1C(__int128 *a1)
{
  return sub_100075D24(a1, 3);
}

uint64_t sub_100075D24(__int128 *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 168, 15);
  swift_defaultActor_initialize(v5);
  *(_BYTE *)(v5 + 112) = a2;
  *(_QWORD *)(v5 + 120) = &_swiftEmptySetSingleton;
  sub_100032478(a1, v5 + 128);
  return v5;
}

uint64_t sub_100075D84(__int128 *a1)
{
  return sub_100075D8C(a1, 3);
}

uint64_t sub_100075D8C(__int128 *a1, char a2)
{
  uint64_t v2;

  swift_defaultActor_initialize(v2);
  *(_BYTE *)(v2 + 112) = a2;
  *(_QWORD *)(v2 + 120) = &_swiftEmptySetSingleton;
  sub_100032478(a1, v2 + 128);
  return v2;
}

uint64_t sub_100075DDC()
{
  uint64_t v0;

  return sub_100075DEC(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 10);
}

uint64_t sub_100075DEC(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_100075DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_10001D138(&qword_100127220);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100075E58, v0, 0);
}

uint64_t sub_100075E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = os_transaction_create("StateLoadConfig");
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = sub_100076210(&qword_1001286B8, type metadata accessor for LoadConfigState, (uint64_t)&unk_1000DE3DC);
  v6 = (_QWORD *)swift_allocObject(&unk_100109DE8, 48, 7);
  v6[2] = v1;
  v6[3] = v5;
  v6[4] = v1;
  v6[5] = v3;
  swift_retain_n(v1, 2);
  v7 = sub_100075B10(v2, (uint64_t)&unk_1001286C0, (uint64_t)v6) | 0x4000000000000000;
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_100075F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 120) = a1;
  *(_QWORD *)(v4 + 128) = a4;
  return swift_task_switch(sub_100075F50, a4, 0);
}

uint64_t sub_100075F50()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = (_QWORD *)v0[16];
  v2 = v1[19];
  v3 = v1[20];
  sub_100022F20(v1 + 16, v2);
  v0[17] = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  v4 = v1[19];
  v5 = v1[20];
  sub_100022F20(v1 + 16, v4);
  v6 = *(int **)(v5 + 96);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v0[18] = v7;
  *v7 = v0;
  v7[1] = sub_100076000;
  return v9(v4, v5);
}

uint64_t sub_100076000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100076060, v3, 0);
}

uint64_t sub_100076060()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = v0[19];
  v3 = (void *)v0[17];
  v0[2] = v0;
  v0[3] = sub_1000760FC;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_100075A9C;
  v5[3] = &unk_100109E60;
  v5[4] = v4;
  objc_msgSend(v3, "configureWithFetcher:completionHandler:", v2, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_1000760FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 160) = v2;
  if (v2)
    v3 = sub_1000761A8;
  else
    v3 = sub_10007615C;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 128), 0);
}

uint64_t sub_10007615C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_BYTE **)(v0 + 120);

  swift_unknownObjectRelease(v1);
  *v2 = 9;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000761A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;

  v1 = *(_QWORD *)(v0 + 160);
  swift_willThrow();
  swift_errorRelease(v1);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_BYTE **)(v0 + 120);

  swift_unknownObjectRelease(v2);
  *v3 = 9;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100076210(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2();
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for LoadConfigState()
{
  return objc_opt_self(_TtC15swtransparencyd15LoadConfigState);
}

uint64_t sub_10007626C()
{
  return sub_100076278((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_100076278(void (*a1)(_QWORD))
{
  _QWORD *v1;

  swift_unknownObjectRelease(v1[2]);
  swift_release(v1[4]);
  a1(v1[5]);
  return swift_deallocObject(v1, 48, 7);
}

uint64_t sub_1000762B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1001286B4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001E4EC;
  v5[15] = a1;
  v5[16] = v4;
  return swift_task_switch(sub_100075F50, v4, 0);
}

uint64_t sub_10007631C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  sub_100023CAC((_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100076348()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  sub_100023CAC((_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100076374(uint64_t a1)
{
  uint64_t result;

  result = sub_100076210(&qword_100128690, type metadata accessor for InitialLoadConfigState, (uint64_t)&unk_1000DE398);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000763B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(*(_QWORD *)v1 + 120);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100076414;
  return v7(a1);
}

uint64_t sub_100076414(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_100076464(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(*(_QWORD *)v1 + 128);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100076414;
  return v7(a1);
}

uint64_t sub_1000764C8(uint64_t a1)
{
  uint64_t result;

  result = sub_100076210(&qword_1001286B8, type metadata accessor for LoadConfigState, (uint64_t)&unk_1000DE3DC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100076504(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001D138(&qword_100127220);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10007655C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001D0FC();
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_1000202A4(&qword_100126940, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_10001D138(&qword_100126948);
  v13 = sub_10008ADD0((unint64_t *)&qword_100126950, &qword_100126948, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000011, 0x80000001000DE9D0, v9, v6, v3, 0);
  qword_1001315E0 = result;
  return result;
}

uint64_t *sub_100076724()
{
  if (qword_10012F790 != -1)
    swift_once(&qword_10012F790, sub_10007655C);
  return &qword_1001315E0;
}

id sub_100076764()
{
  if (qword_10012F790 != -1)
    swift_once(&qword_10012F790, sub_10007655C);
  return (id)qword_1001315E0;
}

uint64_t sub_1000767A4(uint64_t a1, uint64_t a2)
{
  return static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id, a2 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id);
}

uint64_t sub_1000767B8()
{
  return UUID.hash(into:)();
}

uint64_t sub_1000767E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v16;

  v3 = sub_10001D138(&qword_100126D18);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  if (qword_10012F790 != -1)
    swift_once(&qword_10012F790, sub_10007655C);
  v6 = qword_1001315E0;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_10010A128, v8 + v5, v7 | 7);
  *(_QWORD *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v10 = swift_allocObject(&unk_10010A150, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100076C14;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10001D9F8;
  v16 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001DA18;
  aBlock[3] = &unk_10010A168;
  v11 = _Block_copy(aBlock);
  v12 = v16;
  swift_retain(v1);
  swift_retain(v10);
  swift_release(v12);
  dispatch_sync(v6, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 113, 74, 25, 1);
  swift_release(v9);
  result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void sub_1000769AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001D138(&qword_100126D20);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_100076A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = sub_10001D138(&qword_100126D18);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, v1, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
  sub_10008AD88(v3, v2);
  v8 = v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
  swift_beginAccess(v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation, v5 - 88, 33, 0);
  sub_10002566C(v2, v8);
  result = swift_endAccess(v5 - 88);
  *(_BYTE *)(v0 + v4) = 2;
  return result;
}

uint64_t sub_100076B9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001D138(&qword_100126D18);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100076C14()
{
  uint64_t v0;

  sub_10001D138(&qword_100126D18);
  sub_1000769AC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100076C48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100076C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100076C68(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100076C70()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  uint64_t v7;

  if (qword_10012F790 != -1)
    swift_once(&qword_10012F790, sub_10007655C);
  v1 = qword_1001315E0;
  v2 = swift_allocObject(&unk_10010A1A0, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_100076F9C;
  *(_QWORD *)(v2 + 24) = v0;
  v6[4] = sub_10008AE18;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_10001DA18;
  v6[3] = &unk_10010A1B8;
  v3 = _Block_copy(v6);
  v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 113, 96, 25, 1);
  swift_release(v0);
  result = swift_release(v2);
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

void sub_100076DA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_10001D138(&qword_100126D18);
  __chkstk_darwin(v2);
  v3 = sub_10001D138(&qword_100126D20);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X11 }
}

uint64_t sub_100076E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
  swift_beginAccess(v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation, v7 - 88, 0, 0);
  sub_10002AC5C(v8, v4, &qword_100126D20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v2))
  {
    sub_1000202F0(v4, &qword_100126D20);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v4, v2);
    v9 = sub_1000202F0(v4, &qword_100126D20);
    CheckedContinuation.resume(returning:)(v9, v2);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v2);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v2);
  swift_beginAccess(v8, v7 - 112, 33, 0);
  sub_10002566C(v3, v8);
  result = swift_endAccess(v7 - 112);
  *(_BYTE *)(v0 + v6) = 5;
  return result;
}

void sub_100076F9C()
{
  uint64_t v0;

  sub_100076DA4(v0);
}

uint64_t sub_100076FA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100076FB4()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  uint64_t v7;

  if (qword_10012F790 != -1)
    swift_once(&qword_10012F790, sub_10007655C);
  v1 = qword_1001315E0;
  v2 = swift_allocObject(&unk_10010A1F0, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_100077330;
  *(_QWORD *)(v2 + 24) = v0;
  v6[4] = sub_10008AE18;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_10001DA18;
  v6[3] = &unk_10010A208;
  v3 = _Block_copy(v6);
  v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 113, 115, 25, 1);
  swift_release(v0);
  result = swift_release(v2);
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

void sub_1000770E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_10001D138(&qword_100126D18);
  __chkstk_darwin(v2);
  v3 = sub_10001D138(&qword_100126D20);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X11 }
}

uint64_t sub_1000771C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
  swift_beginAccess(v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation, v7 - 88, 0, 0);
  sub_10002AC5C(v8, v4, &qword_100126D20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v2))
  {
    sub_1000202F0(v4, &qword_100126D20);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v4, v2);
    sub_1000202F0(v4, &qword_100126D20);
    v9 = ((uint64_t (*)(_QWORD))type metadata accessor for CancellationError)(0);
    v10 = sub_1000202A4(&qword_100128EE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
    v11 = swift_allocError(v9, v10, 0, 0);
    ((void (*)(void))CancellationError.init())();
    *(_QWORD *)(v7 - 112) = v11;
    CheckedContinuation.resume(throwing:)(v7 - 112, v2);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v2);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v2);
  swift_beginAccess(v8, v7 - 112, 33, 0);
  sub_10002566C(v3, v8);
  result = swift_endAccess(v7 - 112);
  *(_BYTE *)(v0 + v6) = 3;
  return result;
}

void sub_100077330()
{
  uint64_t v0;

  sub_1000770E8(v0);
}

uint64_t sub_100077338()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100077348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000202F0(v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation, &qword_100126D20);
  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000773A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000202F0(v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation, &qword_100126D20);
  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

Swift::Int sub_10007740C()
{
  uint64_t v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  (*(void (**)(_QWORD *))(*(_QWORD *)v0 + 152))(v2);
  return Hasher._finalize()();
}

uint64_t sub_100077450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
  v3 = sub_10001D138(&qword_100126D18);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  UUID.init()(v4);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state) = 0;
  return v1;
}

uint64_t sub_1000774D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
  v2 = sub_10001D138(&qword_100126D18);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  UUID.init()(v3);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state) = 0;
  return v0;
}

uint64_t sub_10007753C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t sub_100077564()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

Swift::Int sub_10007758C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  (*(void (**)(_QWORD *))(**(_QWORD **)v1 + 152))(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000775D0(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id, *a2 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id);
}

uint64_t sub_1000775EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch(sub_100077608, v2, 0);
}

uint64_t sub_100077608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 56);
  if ((*(_BYTE *)(v1 + 112) & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = type metadata accessor for ContinuationStore(0);
  v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v0 + 64) = v4;
  v5 = v4 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
  v6 = sub_10001D138(&qword_100126D18);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  UUID.init()(v7);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state) = 0;
  swift_beginAccess(v1 + 120, v0 + 16, 33, 0);
  swift_retain(v4);
  sub_100081E4C(&v11, v4);
  swift_endAccess(v0 + 16);
  swift_release(v11);
  v9 = sub_1000202A4(&qword_100128880, v8, (uint64_t (*)(uint64_t))type metadata accessor for SMSemaphore, (uint64_t)&unk_1000DE68C);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 72) = v10;
  *v10 = v0;
  v10[1] = sub_100077778;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v10, v1, v9, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), sub_10008AE14, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_100077778()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 72));
  v3 = *(_QWORD *)(v2 + 56);
  if (v0)
  {
    swift_errorRelease();
    v4 = sub_10008AE54;
  }
  else
  {
    v4 = sub_1000777E4;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000777E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for ContinuationStore(uint64_t a1)
{
  return sub_100039874(a1, (uint64_t *)&unk_100130140, (uint64_t)&nominal type descriptor for ContinuationStore);
}

uint64_t sub_100077828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  return swift_task_switch(sub_100077848, v4, 0);
}

uint64_t sub_100077848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15[13];

  v1 = *(_QWORD *)(v0 + 72);
  if ((*(_BYTE *)(v1 + 112) & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v7 = type metadata accessor for ContinuationStore(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  *(_QWORD *)(v0 + 80) = v8;
  v9 = v8 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_continuation;
  v10 = sub_10001D138(&qword_100126D18);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  UUID.init()(v11);
  *(_BYTE *)(v8 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_state) = 0;
  swift_beginAccess(v1 + 120, v0 + 16, 33, 0);
  swift_retain(v8);
  sub_100081E4C(v15, v8);
  swift_endAccess(v0 + 16);
  swift_release(v15[0]);
  sub_1000202A4(&qword_100128880, v12, (uint64_t (*)(uint64_t))type metadata accessor for SMSemaphore, (uint64_t)&unk_1000DE68C);
  v13 = (_QWORD *)swift_task_alloc(64);
  *(_QWORD *)(v0 + 88) = v13;
  v13[2] = v4;
  v13[3] = v3;
  v13[4] = v8;
  v13[5] = v6;
  v13[6] = v5;
  v13[7] = v1;
  v14 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 96) = v14;
  *v14 = v0;
  v14[1] = sub_100077A00;
  v15[11] = (uint64_t)&type metadata for () + 8;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100077A00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 72);
    v5 = sub_100077AA8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 72);
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    v5 = sub_100077A74;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100077A74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100077AA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100077AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a3;
  v8[7] = a4;
  v8[5] = a2;
  v10 = sub_10001D138(&qword_100127220);
  v8[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100077B50, a8, 0);
}

uint64_t sub_100077B50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[12];
  v16 = v0[11];
  v2 = v0[9];
  v15 = v0[10];
  v4 = v0[7];
  v3 = v0[8];
  v5 = v0[6];
  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject(&unk_10010A928, 56, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v5;
  v8[5] = v4;
  v8[6] = v3;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  sub_100077F60(v1, (uint64_t)&unk_100128EC0, (uint64_t)v8);
  sub_1000202F0(v1, &qword_100127220);
  v7(v1, 1, 1, v6);
  v9 = (_QWORD *)swift_allocObject(&unk_10010A950, 56, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = v15;
  v9[6] = v3;
  swift_retain(v3);
  sub_100077F60(v1, (uint64_t)&unk_100128ED0, (uint64_t)v9);
  sub_1000202F0(v1, &qword_100127220);
  v11 = sub_1000202A4(&qword_100128880, v10, (uint64_t (*)(uint64_t))type metadata accessor for SMSemaphore, (uint64_t)&unk_1000DE68C);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
  v0[13] = v12;
  v13 = sub_10001D138(&qword_100128ED8);
  *v12 = v0;
  v12[1] = sub_100077CFC;
  return ThrowingTaskGroup.next(isolation:)(v0 + 15, v16, v11, v13);
}

uint64_t sub_100077CFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100077DCC;
  else
    v4 = sub_100077D60;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 88), 0);
}

uint64_t sub_100077D60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  sub_10001D138(&qword_100127AE0);
  ThrowingTaskGroup.cancelAll()();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100077DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  swift_beginAccess(*(_QWORD *)(v0 + 88) + 120, v0 + 16, 33, 0);
  v3 = sub_1000852BC(v2);
  swift_endAccess(v0 + 16);
  v4 = swift_release(v3);
  swift_willThrow(v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100077E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return swift_task_switch(sub_100077E78, 0, 0);
}

uint64_t sub_100077E78()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v1;
  *v1 = v0;
  v1[1] = sub_100077EE8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0[2], 0, 0, v0[3], v0[4], sub_100020298, v0[5], (char *)&type metadata for () + 8);
}

uint64_t sub_100077EE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100077F54, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100077F54()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100077F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v27[3];
  _QWORD v28[4];

  v4 = v3;
  v8 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v8);
  v10 = (char *)&v27[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002AC5C(a1, (uint64_t)v10, &qword_100127220);
  v11 = type metadata accessor for TaskPriority(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if ((_DWORD)v13 == 1)
  {
    sub_1000202F0((uint64_t)v10, &qword_100127220);
    v14 = 12544;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      v16 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = TaskPriority.rawValue.getter(v13);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    v14 = v21 | 0x3100;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
      goto LABEL_3;
  }
  v18 = 0;
  v20 = 0;
LABEL_6:
  v22 = *v4;
  v23 = (_QWORD *)(v20 | v18);
  if (v20 | v18)
  {
    v28[0] = 0;
    v28[1] = 0;
    v23 = v28;
    v28[2] = v18;
    v28[3] = v20;
  }
  v27[0] = 1;
  v27[1] = v23;
  v27[2] = v22;
  v24 = swift_task_create(v14, v27, (char *)&type metadata for () + 8, a2, a3);
  return swift_release(v24);
}

uint64_t sub_1000780F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for ContinuousClock(0);
  v6[5] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[6] = v8;
  v6[7] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100078154, 0, 0);
}

uint64_t sub_100078154()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100126EB0 + dword_100126EB0);
  v1 = (_QWORD *)swift_task_alloc(unk_100126EB4);
  v0[8] = v1;
  *v1 = v0;
  v1[1] = sub_1000781CC;
  return v3(v0[2], v0[3], 0, 0, 1);
}

uint64_t sub_1000781CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    v6 = sub_1000782E8;
  else
    v6 = sub_10007824C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10007824C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(void))(**(_QWORD **)(v0 + 32) + 176))();
  v1 = type metadata accessor for CancellationError(0);
  v2 = sub_1000202A4(&qword_100128EE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
  swift_allocError(v1, v2, 0, 0);
  v3 = CancellationError.init()();
  swift_willThrow(v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000782E8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007831C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch(sub_100078334, v0, 0);
}

uint64_t sub_100078334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  if ((*(_BYTE *)(v1 + 112) & 1) == 0)
  {
    *(_BYTE *)(v1 + 112) = 1;
    v2 = (uint64_t *)(v1 + 120);
    swift_beginAccess(v1 + 120, v0 + 16, 1, 0);
    v3 = *(_QWORD *)(v1 + 120);
    v4 = swift_bridgeObjectRetain(v3);
    sub_1000783F4(v4);
    swift_bridgeObjectRelease(v3);
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      v5 = (void *)sub_100088B5C((Swift::Int)_swiftEmptyArrayStorage);
    }
    else
    {
      v5 = &_swiftEmptySetSingleton;
    }
    v6 = *v2;
    *v2 = (uint64_t)v5;
    swift_bridgeObjectRelease(v6);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1000783F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  uint64_t v28;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for ContinuationStore(0);
    v5 = sub_1000202A4(&qword_100128EB0, 255, type metadata accessor for ContinuationStore, (uint64_t)&unk_1000DE624);
    result = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    v1 = v27[0];
    v25 = v27[1];
    v7 = v27[2];
    v8 = v27[3];
    v9 = v27[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v14 = (v9 - 1) & v9;
      v15 = __clz(__rbit64(v9)) | (v8 << 6);
      v16 = v8;
      goto LABEL_32;
    }
    v22 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v22 >= v13)
      return (_QWORD *)sub_10004BA60(v1);
    v23 = *(_QWORD *)(v25 + 8 * v22);
    v16 = v8 + 1;
    if (!v23)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        return (_QWORD *)sub_10004BA60(v1);
      v23 = *(_QWORD *)(v25 + 8 * v16);
      if (!v23)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          return (_QWORD *)sub_10004BA60(v1);
        v23 = *(_QWORD *)(v25 + 8 * v16);
        if (!v23)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            return (_QWORD *)sub_10004BA60(v1);
          v23 = *(_QWORD *)(v25 + 8 * v16);
          if (!v23)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              return (_QWORD *)sub_10004BA60(v1);
            v23 = *(_QWORD *)(v25 + 8 * v16);
            if (!v23)
            {
              v24 = v8 + 6;
              while (v13 != v24)
              {
                v23 = *(_QWORD *)(v25 + 8 * v24++);
                if (v23)
                {
                  v16 = v24 - 1;
                  goto LABEL_31;
                }
              }
              return (_QWORD *)sub_10004BA60(v1);
            }
          }
        }
      }
    }
LABEL_31:
    v14 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_32:
    v20 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    v21 = swift_retain(v20);
    if (!v20)
      return (_QWORD *)sub_10004BA60(v1);
    while (1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 168))(v21);
      result = (_QWORD *)swift_release(v20);
      v8 = v16;
      v9 = v14;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v17 = __CocoaSet.Iterator.next()(result);
      if (v17)
      {
        v18 = v17;
        v26 = v17;
        v19 = type metadata accessor for ContinuationStore(0);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = v28;
        v21 = swift_unknownObjectRelease(v18);
        v16 = v8;
        v14 = v9;
        if (v20)
          continue;
      }
      return (_QWORD *)sub_10004BA60(v1);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000786A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000786C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000786E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 128, 15);
  swift_defaultActor_initialize(v1);
  *(_BYTE *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = &_swiftEmptySetSingleton;
  return v1;
}

uint64_t sub_10007872C()
{
  uint64_t v0;

  swift_defaultActor_initialize(v0);
  *(_BYTE *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = &_swiftEmptySetSingleton;
  return v0;
}

uint64_t sub_10007875C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100078794
                                                                     + 4 * asc_1000DE470[a1]))(0xD000000000000010, 0x80000001000E3DC0);
}

uint64_t sub_100078794(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_1000787F8()
{
  return 0x7053746365746564;
}

uint64_t sub_10007881C()
{
  return 0x6E776F6474756873;
}

void sub_100078834(char *a1)
{
  sub_1000788C4(*a1);
}

uint64_t sub_100078840(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aStopped_1[v2];
  v4 = *(_QWORD *)&aShutdown_2[v2 + 8];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aStopped_1[v5];
  v7 = *(_QWORD *)&aShutdown_2[v5 + 8];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aShutdown_2[8 * a2 + 8], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

void sub_1000788C4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100078910(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000789CC + 4 * byte_1000DE47E[a2]))(a3 + 2);
}

uint64_t sub_1000789CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v4 = a3 + 2;
  if (a1 == v4 && v3 == 0x80000001000E3DE0)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, v4, 0x80000001000E3DE0, 0);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(0x80000001000E3DE0);
  return v5 & 1;
}

void sub_100078AD4()
{
  char *v0;

  sub_100078C90(0, *v0);
}

Swift::Int sub_100078AE0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)&aShutdown_2[v2 + 8];
  String.hash(into:)(v5, *(_QWORD *)&aStopped_1[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_100078B48(uint64_t a1)
{
  char *v1;

  sub_100078B90(a1, *v1);
}

uint64_t sub_100078B50(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aShutdown_2[v2 + 8];
  String.hash(into:)(a1, *(_QWORD *)&aStopped_1[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

void sub_100078B90(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100078BD4(uint64_t a1, uint64_t a2)
{
  String.hash(into:)(a1, a2 + 2, 0x80000001000E3DE0);
  return swift_bridgeObjectRelease(0x80000001000E3DE0);
}

void sub_100078C88(uint64_t a1)
{
  char *v1;

  sub_100078C90(a1, *v1);
}

void sub_100078C90(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_100078CE4()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 2, 0x80000001000E3DE0);
  swift_bridgeObjectRelease(0x80000001000E3DE0);
  return Hasher._finalize()();
}

Swift::Int sub_100078DB4(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aShutdown_2[v3 + 8];
  String.hash(into:)(v6, *(_QWORD *)&aStopped_1[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_100078E18@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100089100(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100078E44@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10007875C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100078E6C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 112, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 112));
}

uint64_t sub_100078EA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 112, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_100078EE4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return j_j__swift_endAccess;
}

unint64_t sub_100078F20()
{
  return sub_100078F2C((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_100078F2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D138(&qword_100128E98);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v7 = *((unsigned __int8 *)v6 - 8);
    v8 = *v6;
    swift_bridgeObjectRetain(*v6);
    result = sub_1000863E4(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10007902C()
{
  return sub_1000891B8(_swiftEmptyArrayStorage);
}

uint64_t sub_100079040(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(_BYTE *, _QWORD);
  uint64_t (*v4)(_BYTE *, _QWORD);
  uint64_t v5;
  _BYTE v7[39];
  char v8;

  v3 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 128))(v7);
  sub_1000821CC(&v8, a1);
  v3(v7, 0);
  v4 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 152))(v7);
  v5 = sub_1000866DC(a1);
  swift_bridgeObjectRelease(v5);
  return v4(v7, 0);
}

uint64_t sub_1000790D4(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(_BYTE *, _QWORD);
  uint64_t (*v4)(_BYTE *, _QWORD);
  uint64_t v5;
  _BYTE v7[32];

  v3 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 128))(v7);
  sub_1000854C0(a1);
  v3(v7, 0);
  v4 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 152))(v7);
  v5 = sub_1000866DC(a1);
  swift_bridgeObjectRelease(v5);
  return v4(v7, 0);
}

uint64_t sub_100079164(char a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
  v4 = sub_1000791AC(a1, v3);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_1000791AC(char a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_100078C90(*(_QWORD *)(a2 + 40), a1);
    v4 = v3 & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_10007948C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t sub_100079498(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = v1;
  *(_BYTE *)(v2 + 112) = a1;
  return swift_task_switch(sub_1000794B4, v1, 0);
}

uint64_t sub_1000794B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD);
  uint64_t *v9;
  uint64_t *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD);
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  _QWORD *v29;
  uint64_t (*v31)(void);
  uint64_t v32;
  uint64_t v33;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 88) + 136))();
  if (*(_QWORD *)(v1 + 16) && (v2 = sub_1000863E4(*(unsigned __int8 *)(v0 + 112)), (v3 & 1) != 0))
  {
    v4 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v2);
    swift_bridgeObjectRetain(v4);
  }
  else
  {
    v4 = &_swiftEmptySetSingleton;
  }
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(unsigned __int8 *)(v0 + 112);
  swift_bridgeObjectRelease(v1);
  *(_QWORD *)(v0 + 80) = v4;
  sub_100082528();
  v7 = *(_QWORD *)(v0 + 80);
  v8 = (uint64_t (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 152))(v0 + 16);
  v10 = v9;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  v32 = *v10;
  *v10 = 0x8000000000000000;
  sub_100087BA8(v7, v6, isUniquelyReferenced_nonNull_native);
  v12 = *v10;
  *v10 = v32;
  swift_bridgeObjectRelease(v12);
  v13 = v8(v0 + 16, 0);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 160))(v13);
  if (*(_QWORD *)(v14 + 16) && (v15 = sub_100089174(), (v16 & 1) != 0))
  {
    v17 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
    *(_QWORD *)(v0 + 96) = v18;
    swift_retain(v18);
    swift_bridgeObjectRelease(v14);
    v19 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 176))(v0 + 48);
    v21 = v20;
    v22 = sub_100089174();
    if ((v23 & 1) != 0)
    {
      v24 = v22;
      v25 = swift_isUniquelyReferenced_nonNull_native(*v21);
      v33 = *v21;
      *v21 = 0x8000000000000000;
      if ((v25 & 1) == 0)
        sub_1000880C8();
      v26 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v24);
      sub_1000879F4(v24, v33);
      v27 = *v21;
      *v21 = v33;
      swift_release(v26);
      swift_bridgeObjectRelease(v27);
    }
    v19(v0 + 48, 0);
    v28 = *(int **)(*(_QWORD *)v18 + 168);
    v31 = (uint64_t (*)(void))((char *)v28 + *v28);
    v29 = (_QWORD *)swift_task_alloc(v28[1]);
    *(_QWORD *)(v0 + 104) = v29;
    *v29 = v0;
    v29[1] = sub_100079700;
    return v31();
  }
  else
  {
    swift_bridgeObjectRelease(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100079700()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_100079758, v1, 0);
}

uint64_t sub_100079758()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100079788()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return swift_task_switch(sub_1000797A0, v0, 0);
}

uint64_t sub_1000797A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void (*v15)(uint64_t, _QWORD);
  uint64_t *v16;
  uint64_t *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(unint64_t, unint64_t);
  uint64_t v22;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 48) + 232))();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = swift_bridgeObjectRelease(v1);
  if (v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v5 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 48) + 160))(v3);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_100089174(), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
    *(_QWORD *)(v0 + 56) = v8;
    swift_retain(v8);
    swift_bridgeObjectRelease(v5);
    v9 = *(int **)(*(_QWORD *)v8 + 152);
    v21 = (uint64_t (*)(unint64_t, unint64_t))((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc(v9[1]);
    *(_QWORD *)(v0 + 64) = v10;
    *v10 = v0;
    v10[1] = sub_1000799C0;
    return v21(0xD000000000000012, 0x80000001000E3F10);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease(v5);
    v12 = type metadata accessor for SMSemaphore();
    v13 = swift_allocObject(v12, 128, 15);
    *(_QWORD *)(v0 + 72) = v13;
    swift_defaultActor_initialize(v13);
    *(_BYTE *)(v13 + 112) = 0;
    *(_QWORD *)(v13 + 120) = &_swiftEmptySetSingleton;
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 176);
    swift_retain(v13);
    v15 = (void (*)(uint64_t, _QWORD))v14(v0 + 16);
    v17 = v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
    v22 = *v17;
    *v17 = 0x8000000000000000;
    sub_100087CDC(v13, isUniquelyReferenced_nonNull_native);
    v19 = *v17;
    *v17 = v22;
    swift_bridgeObjectRelease(v19);
    v15(v0 + 16, 0);
    v20 = (_QWORD *)swift_task_alloc(dword_10012887C);
    *(_QWORD *)(v0 + 80) = v20;
    *v20 = v0;
    v20[1] = sub_100079A4C;
    v20[6] = 0x80000001000E3F10;
    v20[7] = v13;
    v20[5] = 0xD000000000000012;
    return swift_task_switch(sub_100077608, v13, 0);
  }
}

uint64_t sub_1000799C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_100079A18, v1, 0);
}

uint64_t sub_100079A18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100079A4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return swift_task_switch(sub_100079AA4, v1, 0);
}

uint64_t sub_100079AA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int sub_100079AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::Int result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  _QWORD v18[9];
  void *v19;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
  v2 = v1;
  v19 = &_swiftEmptySetSingleton;
  v3 = v1 + 64;
  v4 = 1 << *(_BYTE *)(v1 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(v1);
  v9 = 0;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v9 << 6);
LABEL_25:
    v15 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v11);
    if (*(_QWORD *)(v15 + 16))
    {
      v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v11);
      Hasher.init(_seed:)(v18, *(_QWORD *)(v15 + 40));
      Hasher._combine(_:)(0);
      result = Hasher._finalize()();
      v17 = result & ~(-1 << *(_BYTE *)(v15 + 32));
      if (((*(_QWORD *)(v15 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v17) & 1) != 0)
        result = sub_1000821CC((char *)v18, v16);
    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 >= v7)
    goto LABEL_28;
  v13 = *(_QWORD *)(v3 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_24;
  v9 = v12 + 1;
  if (v12 + 1 >= v7)
    goto LABEL_28;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
    goto LABEL_24;
  v9 = v12 + 2;
  if (v12 + 2 >= v7)
    goto LABEL_28;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
    goto LABEL_24;
  v9 = v12 + 3;
  if (v12 + 3 >= v7)
    goto LABEL_28;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
    goto LABEL_24;
  v9 = v12 + 4;
  if (v12 + 4 >= v7)
    goto LABEL_28;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_25;
  }
  v14 = v12 + 5;
  if (v14 >= v7)
  {
LABEL_28:
    swift_release(v2);
    swift_bridgeObjectRelease(v2);
    return (Swift::Int)v19;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_28;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_30:
  __break(1u);
  return result;
}

_QWORD *sub_100079CCC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100079D00()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

_QWORD *sub_100079D34()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_allocObject(v0, 136, 15);
  swift_defaultActor_initialize(v1);
  v1[14] = &_swiftEmptySetSingleton;
  v1[15] = sub_100078F2C((uint64_t)_swiftEmptyArrayStorage);
  v1[16] = sub_1000891B8(_swiftEmptyArrayStorage);
  return v1;
}

_QWORD *sub_100079D94()
{
  _QWORD *v0;

  swift_defaultActor_initialize(v0);
  v0[14] = &_swiftEmptySetSingleton;
  v0[15] = sub_100078F2C((uint64_t)_swiftEmptyArrayStorage);
  v0[16] = sub_1000891B8(_swiftEmptyArrayStorage);
  return v0;
}

uint64_t sub_100079DE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100079E20 + 4 * byte_1000DE4A1[a1]))(0xD000000000000011, 0x80000001000E3E50);
}

uint64_t sub_100079E20()
{
  return 0x696C616974696E69;
}

uint64_t sub_100079E3C()
{
  return 0x4E726F4674696177;
}

uint64_t sub_100079E60()
{
  return 0x666E6F4364616F6CLL;
}

uint64_t sub_100079E80(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_100079ED8()
{
  return 0x7053746365746564;
}

uint64_t sub_100079EFC()
{
  return 0x7964616572;
}

uint64_t sub_100079F10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_100079DE8(*a1);
  v5 = v4;
  v6 = sub_100079DE8(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100079F98()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_100079DE8(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100079FF8(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100079DE8(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10007A038(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_100079DE8(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10007A094@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10008929C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007A0C0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100079DE8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

_QWORD *sub_10007A0E8()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = type metadata accessor for StateMachineEvents();
  v1 = (_QWORD *)swift_allocObject(v0, 136, 15);
  swift_defaultActor_initialize(v1);
  v1[14] = &_swiftEmptySetSingleton;
  v1[15] = sub_100078F2C((uint64_t)_swiftEmptyArrayStorage);
  v1[16] = sub_1000891B8(_swiftEmptyArrayStorage);
  return v1;
}

uint64_t sub_10007A148()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 112));
}

uint64_t sub_10007A150()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 128, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
}

uint64_t sub_10007A184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 128, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10007A1C8()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 136, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t sub_10007A1F8(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 136, v4, 1, 0);
  *(_BYTE *)(v1 + 136) = a1;
  return result;
}

uint64_t (*sub_10007A234(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 136, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10007A270()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 144, v2, 0, 0);
  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 144));
}

uint64_t sub_10007A2B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 144, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = a2;
  return swift_unknownObjectRelease(v5);
}

uint64_t (*sub_10007A300(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 144, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10007A33C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 160, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 160));
}

uint64_t sub_10007A370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 160, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 160) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10007A3B4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 160, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10007A3F0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 168, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 168));
}

uint64_t sub_10007A424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 168, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 168) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10007A468(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 168, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10007A4A4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 176, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 176);
}

uint64_t sub_10007A4D4(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 176, v4, 1, 0);
  *(_BYTE *)(v1 + 176) = a1;
  return result;
}

uint64_t (*sub_10007A510(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 176, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10007A54C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 184, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 184));
}

uint64_t sub_10007A580(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 184, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v1 + 184) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10007A5C4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 184, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10007A600()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 192);
}

uint64_t sub_10007A608()
{
  return Logger.init(subsystem:category:)(0x70736E6172545753, 0xEE0079636E657261, 28019, 0xE200000000000000);
}

uint64_t sub_10007A634@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_logger;
  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10007A678@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002AC5C(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_networkMonitor, a1, &qword_1001288B8);
}

uint64_t sub_10007A6A4()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers);
  swift_beginAccess(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_10007A6EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10007A73C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10007A784(char a1)
{
  return *(_QWORD *)&aStopped_1[8 * a1];
}

uint64_t sub_10007A7A4(char *a1, char *a2)
{
  return sub_100078840(*a1, *a2);
}

Swift::Int sub_10007A7B0()
{
  char *v0;

  return sub_100078AE0(*v0);
}

uint64_t sub_10007A7B8(uint64_t a1)
{
  char *v1;

  return sub_100078B50(a1, *v1);
}

Swift::Int sub_10007A7C0(uint64_t a1)
{
  char *v1;

  return sub_100078DB4(a1, *v1);
}

unint64_t sub_10007A7C8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100089304(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007A7F4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10007A784(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10007A81C(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  sub_10007A880(a1, a2, a3, a4);
  return v9;
}

uint64_t sub_10007A880(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t (*v20)(uint64_t, _QWORD);
  char v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  _QWORD *v71;

  v5 = v4;
  swift_defaultActor_initialize(v4);
  v10 = type metadata accessor for StateMachineEvents();
  v11 = (_QWORD *)swift_allocObject(v10, 136, 15);
  swift_defaultActor_initialize(v11);
  v11[14] = &_swiftEmptySetSingleton;
  v11[15] = sub_100078F2C((uint64_t)_swiftEmptyArrayStorage);
  v11[16] = sub_1000891B8(_swiftEmptyArrayStorage);
  *(_QWORD *)(v5 + 112) = v11;
  *(_QWORD *)(v5 + 160) = 0;
  v12 = v5 + 160;
  *(_QWORD *)(v5 + 168) = 0;
  Logger.init(subsystem:category:)(0x70736E6172545753, 0xEE0079636E657261, 28019, 0xE200000000000000);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers) = &_swiftEmptySetSingleton;
  *(_BYTE *)(v5 + 136) = a2;
  sub_10002AC5C(a4, v5 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_networkMonitor, &qword_1001288B8);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v63 = v5 + 160;
    v64 = a2;
    v65 = a3;
    v66 = a4;
    swift_bridgeObjectRetain(a1);
    v14 = 0;
    v15 = &_swiftEmptyDictionarySingleton;
    v67 = a1;
    while (1)
    {
      v68 = *(_OWORD *)(a1 + 16 * v14 + 32);
      v18 = *(_QWORD *)(a1 + 16 * v14 + 32);
      ObjectType = swift_getObjectType(v18);
      v20 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v68 + 1) + 16);
      swift_unknownObjectRetain(v18);
      v21 = v20(ObjectType, *((_QWORD *)&v68 + 1));
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
      v71 = v15;
      v24 = sub_10002559C(v21);
      v25 = v15[2];
      v26 = (v23 & 1) == 0;
      v27 = v25 + v26;
      if (__OFADD__(v25, v26))
        break;
      v28 = v23;
      if (v15[3] >= v27)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1000883FC();
      }
      else
      {
        sub_1000872A8(v27, isUniquelyReferenced_nonNull_native);
        v29 = sub_10002559C(v21);
        if ((v28 & 1) != (v30 & 1))
          goto LABEL_37;
        v24 = v29;
      }
      a1 = v67;
      v15 = v71;
      if ((v28 & 1) != 0)
      {
        v16 = v71[7];
        v17 = 16 * v24;
        swift_unknownObjectRelease(*(_QWORD *)(v16 + v17));
        *(_OWORD *)(v16 + v17) = v68;
      }
      else
      {
        v71[(v24 >> 6) + 8] |= 1 << v24;
        *(_BYTE *)(v15[6] + v24) = v21;
        *(_OWORD *)(v15[7] + 16 * v24) = v68;
        v31 = v15[2];
        v32 = __OFADD__(v31, 1);
        v33 = v31 + 1;
        if (v32)
          goto LABEL_35;
        v15[2] = v33;
      }
      ++v14;
      swift_bridgeObjectRelease(0x8000000000000000);
      if (v13 == v14)
      {
        swift_bridgeObjectRelease(v67);
        v69 = v5;
        *(_QWORD *)(v5 + 120) = v15;
        swift_bridgeObjectRetain(v67);
        v34 = (uint64_t *)(v67 + 40);
        v35 = &_swiftEmptyDictionarySingleton;
        while (1)
        {
          v39 = *(v34 - 1);
          v38 = *v34;
          v40 = swift_getObjectType(v39);
          v41 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 16);
          swift_unknownObjectRetain(v39);
          v42 = v41(v40, v38);
          v43 = type metadata accessor for SMSemaphore();
          v44 = swift_allocObject(v43, 128, 15);
          swift_defaultActor_initialize(v44);
          *(_BYTE *)(v44 + 112) = 0;
          *(_QWORD *)(v44 + 120) = &_swiftEmptySetSingleton;
          v45 = swift_isUniquelyReferenced_nonNull_native(v35);
          v71 = v35;
          v47 = sub_10002559C(v42);
          v48 = v35[2];
          v49 = (v46 & 1) == 0;
          v50 = v48 + v49;
          if (__OFADD__(v48, v49))
            goto LABEL_34;
          v51 = v46;
          if (v35[3] >= v50)
          {
            if ((v45 & 1) != 0)
            {
              v35 = v71;
              if ((v46 & 1) == 0)
                goto LABEL_24;
            }
            else
            {
              sub_10008825C();
              v35 = v71;
              if ((v51 & 1) == 0)
                goto LABEL_24;
            }
          }
          else
          {
            sub_100086E44(v50, v45);
            v52 = sub_10002559C(v42);
            if ((v51 & 1) != (v53 & 1))
              goto LABEL_37;
            v47 = v52;
            v35 = v71;
            if ((v51 & 1) == 0)
            {
LABEL_24:
              v35[(v47 >> 6) + 8] |= 1 << v47;
              *(_BYTE *)(v35[6] + v47) = v42;
              *(_QWORD *)(v35[7] + 8 * v47) = v44;
              v54 = v35[2];
              v32 = __OFADD__(v54, 1);
              v55 = v54 + 1;
              if (v32)
                goto LABEL_36;
              v35[2] = v55;
              goto LABEL_16;
            }
          }
          v36 = v35[7];
          v37 = 8 * v47;
          swift_release(*(_QWORD *)(v36 + v37));
          *(_QWORD *)(v36 + v37) = v44;
LABEL_16:
          swift_unknownObjectRelease(v39);
          swift_bridgeObjectRelease(0x8000000000000000);
          v34 += 2;
          if (!--v13)
          {
            a1 = v67;
            swift_bridgeObjectRelease(v67);
            v5 = v69;
            a4 = v66;
            a2 = v64;
            a3 = v65;
            v12 = v63;
            goto LABEL_30;
          }
        }
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SMState);
    __break(1u);
  }
  else
  {
    v35 = &_swiftEmptyDictionarySingleton;
    *(_QWORD *)(v5 + 120) = &_swiftEmptyDictionarySingleton;
LABEL_30:
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)(v5 + 128) = v35;
    v56 = *(_QWORD *)(v5 + 120);
    if (*(_QWORD *)(v56 + 16))
    {
      v57 = sub_10002559C(a2);
      if ((v58 & 1) != 0)
      {
        v70 = *(_OWORD *)(*(_QWORD *)(v56 + 56) + 16 * v57);
        *(_OWORD *)(v5 + 144) = v70;
        swift_beginAccess(v12, &v71, 1, 0);
        v59 = *(_QWORD *)(v5 + 160);
        *(_QWORD *)(v5 + 160) = 0;
        swift_unknownObjectRetain_n(v70, 2);
        swift_release(v59);
        *(_BYTE *)(v5 + 176) = 0;
        *(_BYTE *)(v5 + 192) = a3;
        v60 = type metadata accessor for SMSemaphore();
        v61 = swift_allocObject(v60, 128, 15);
        swift_defaultActor_initialize(v61);
        *(_BYTE *)(v61 + 112) = 0;
        *(_QWORD *)(v61 + 120) = &_swiftEmptySetSingleton;
        swift_unknownObjectRelease(v70);
        sub_1000202F0(a4, &qword_1001288B8);
        *(_QWORD *)(v5 + 184) = v61;
        return v5;
      }
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, 0x80000001000E3F60, "swtransparencyd/SWTStateMachine.swift", 37, 2, 335, 0);
  __break(1u);
  return result;
}

void sub_10007ADE4()
{
  uint64_t v0;
  _BYTE v1[24];

  swift_beginAccess(v0 + 176, v1, 0, 0);
  __asm { BR              X10 }
}

void sub_10007AE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(0xE700000000000000);
  v1 = type metadata accessor for SMSemaphore();
  v2 = swift_allocObject(v1, 128, 15);
  swift_defaultActor_initialize(v2);
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = &_swiftEmptySetSingleton;
  swift_beginAccess(v0 + 184, &v4, 1, 0);
  v3 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 184) = v2;
  swift_release(v3);
  sub_10007AF18();
  sub_10007B0B8();
}

uint64_t sub_10007AF18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];
  __int128 v12;
  uint64_t v13;
  _QWORD v14[5];

  v1 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v1);
  v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10002AC5C(v0 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_networkMonitor, (uint64_t)&v12, &qword_1001288B8);
  if (!v13)
    return sub_1000202F0((uint64_t)&v12, &qword_1001288B8);
  sub_100032478(&v12, (uint64_t)v14);
  swift_beginAccess(v0 + 168, v11, 1, 0);
  if (*(_QWORD *)(v0 + 168))
    return sub_100023CAC(v14);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  sub_10002E424((uint64_t)v14, (uint64_t)&v12);
  v6 = sub_1000202A4(&qword_1001288C8, 255, type metadata accessor for SWTStateMachine, (uint64_t)&unk_1000DE924);
  v7 = (_QWORD *)swift_allocObject(&unk_10010A240, 80, 7);
  v7[2] = v0;
  v7[3] = v6;
  v7[4] = v0;
  sub_100032478(&v12, (uint64_t)(v7 + 5));
  swift_retain_n(v0, 2);
  v8 = sub_10007DCD0((uint64_t)v3, (uint64_t)&unk_1001288D0, (uint64_t)v7, (uint64_t)&unk_10010A900, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_100128E70);
  sub_100023CAC(v14);
  v9 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 168) = v8;
  return swift_release(v9);
}

void sub_10007B0B8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[24];

  v1 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v1);
  swift_beginAccess(v0 + 176, v2, 1, 0);
  __asm { BR              X10 }
}

uint64_t sub_10007B154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E696E6E7572, v3, 1701602409, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v3);
  if ((v4 & 1) == 0)
    __asm { BR              X10 }
  *(_BYTE *)(v1 + 176) = 1;
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v0, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject(&unk_10010A268, 40, 7);
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v1;
  swift_retain(v1);
  v7 = sub_1000812C8(v0, (uint64_t)&unk_1001288E0, (uint64_t)v6);
  swift_release(v7);
  return sub_1000202F0(v0, &qword_100127220);
}

uint64_t sub_10007B2F8(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _BYTE v8[24];
  uint64_t v9;

  v3 = v2;
  type metadata accessor for TransitionWatcher(0);
  swift_bridgeObjectRetain(a2);
  v6 = sub_1000241A4(a1, a2);
  swift_beginAccess(v3 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers, v8, 33, 0);
  swift_retain(v6);
  sub_1000825E8(&v9, v6);
  swift_endAccess(v8);
  swift_release(v9);
  return v6;
}

uint64_t sub_10007B39C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = v1;
  *(_BYTE *)(v2 + 168) = a1;
  return swift_task_switch(sub_10007B3B8, v1, 0);
}

uint64_t sub_10007B3B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v0 + 80) = &_swiftEmptySetSingleton;
  v1 = (uint64_t *)(*(_QWORD *)(v0 + 104) + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers);
  swift_beginAccess(v1, v0 + 56, 0, 0);
  v2 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v3 = *v1;
    else
      v3 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for TransitionWatcher(0);
    v6 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
    Set.Iterator.init(_cocoa:)((_QWORD *)(v0 + 16), v4, v5, v6);
    result = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v10 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    v11 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 120) = v8;
    *(_QWORD *)(v0 + 128) = v10;
    *(_QWORD *)(v0 + 112) = result;
    if (result < 0)
    {
      v23 = __CocoaSet.Iterator.next()(result);
      if (v23)
      {
        v24 = v23;
        *(_QWORD *)(v0 + 96) = v23;
        swift_unknownObjectRetain(v23);
        swift_dynamicCast(v0 + 88, v0 + 96, (char *)&type metadata for Swift.AnyObject + 8, v5, 7);
        v15 = *(_QWORD *)(v0 + 88);
        swift_unknownObjectRelease(v24);
        v14 = v9;
        v12 = v11;
LABEL_9:
        *(_QWORD *)(v0 + 144) = v14;
        *(_QWORD *)(v0 + 152) = v12;
        *(_QWORD *)(v0 + 136) = v15;
        if (v15)
        {
          *(_QWORD *)(v0 + 160) = *(_QWORD *)(*(_QWORD *)v15 + 232);
          return swift_task_switch(sub_10007B69C, v15, 0);
        }
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (v11)
    {
LABEL_7:
      v12 = (v11 - 1) & v11;
      v13 = __clz(__rbit64(v11)) | (v9 << 6);
      v14 = v9;
LABEL_8:
      v15 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v13);
      swift_retain(v15);
      goto LABEL_9;
    }
  }
  else
  {
    v16 = -1 << *(_BYTE *)(v2 + 32);
    v10 = ~v16;
    v8 = v2 + 56;
    v17 = *(_QWORD *)(v2 + 56);
    v18 = -v16;
    *(_QWORD *)(v0 + 120) = v2 + 56;
    *(_QWORD *)(v0 + 128) = v10;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v11 = v19 & v17;
    *(_QWORD *)(v0 + 112) = v2;
    result = swift_bridgeObjectRetain(v2);
    v9 = 0;
    if (v11)
      goto LABEL_7;
  }
  v20 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    v21 = (unint64_t)(v10 + 64) >> 6;
    if (v20 < v21)
    {
      v22 = *(_QWORD *)(v8 + 8 * v20);
      v14 = v9 + 1;
      if (v22)
      {
LABEL_18:
        v12 = (v22 - 1) & v22;
        v13 = __clz(__rbit64(v22)) + (v14 << 6);
        goto LABEL_8;
      }
      v14 = v9 + 2;
      if (v9 + 2 < v21)
      {
        v22 = *(_QWORD *)(v8 + 8 * v14);
        if (v22)
          goto LABEL_18;
        v14 = v9 + 3;
        if (v9 + 3 < v21)
        {
          v22 = *(_QWORD *)(v8 + 8 * v14);
          if (v22)
            goto LABEL_18;
          v14 = v9 + 4;
          if (v9 + 4 < v21)
          {
            v22 = *(_QWORD *)(v8 + 8 * v14);
            if (v22)
              goto LABEL_18;
            v25 = v9 + 5;
            while (v21 != v25)
            {
              v22 = *(_QWORD *)(v8 + 8 * v25++);
              if (v22)
              {
                v14 = v25 - 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
LABEL_31:
    v26 = *(_QWORD *)(v0 + 104);
    sub_10004BA60(*(_QWORD *)(v0 + 112));
    v27 = *(_QWORD *)(v0 + 80);
    swift_retain(v26);
    v28 = swift_bridgeObjectRetain(v27);
    sub_100088E00(v28, v26);
    swift_release(v26);
    swift_bridgeObjectRelease_n(v27, 2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_10007B69C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  *(_BYTE *)(v0 + 169) = (*(uint64_t (**)(_QWORD))(v0 + 160))(*(unsigned __int8 *)(v0 + 168)) & 1;
  return swift_task_switch(sub_10007B6EC, v1, 0);
}

uint64_t sub_10007B6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((*(_BYTE *)(v0 + 169) & 1) != 0)
  {
    sub_1000825E8(&v21, *(_QWORD *)(v0 + 136));
    v1 = v21;
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 136);
  }
  result = swift_release(v1);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 112);
  if (v5 < 0)
  {
    v10 = __CocoaSet.Iterator.next()(result);
    if (v10)
    {
      v11 = v10;
      *(_QWORD *)(v0 + 96) = v10;
      v12 = type metadata accessor for TransitionWatcher(0);
      swift_unknownObjectRetain(v11);
      swift_dynamicCast(v0 + 88, v0 + 96, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
      v9 = *(_QWORD *)(v0 + 88);
      swift_unknownObjectRelease(v11);
      v8 = v3;
      v6 = v4;
LABEL_10:
      *(_QWORD *)(v0 + 144) = v8;
      *(_QWORD *)(v0 + 152) = v6;
      *(_QWORD *)(v0 + 136) = v9;
      if (v9)
      {
        *(_QWORD *)(v0 + 160) = *(_QWORD *)(*(_QWORD *)v9 + 232);
        return swift_task_switch(sub_10007B69C, v9, 0);
      }
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  if (v4)
  {
    v6 = (v4 - 1) & v4;
    v7 = __clz(__rbit64(v4)) | (v3 << 6);
    v8 = *(_QWORD *)(v0 + 144);
LABEL_7:
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v7);
    swift_retain(v9);
    goto LABEL_10;
  }
  v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    v14 = (unint64_t)(*(_QWORD *)(v0 + 128) + 64) >> 6;
    if (v13 < v14)
    {
      v15 = *(_QWORD *)(v0 + 120);
      v16 = *(_QWORD *)(v15 + 8 * v13);
      v8 = v3 + 1;
      if (v16)
      {
LABEL_15:
        v6 = (v16 - 1) & v16;
        v7 = __clz(__rbit64(v16)) + (v8 << 6);
        goto LABEL_7;
      }
      v8 = v3 + 2;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v8);
        if (v16)
          goto LABEL_15;
        v8 = v3 + 3;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * v8);
          if (v16)
            goto LABEL_15;
          v8 = v3 + 4;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v8);
            if (v16)
              goto LABEL_15;
            v17 = v3 + 5;
            while (v14 != v17)
            {
              v16 = *(_QWORD *)(v15 + 8 * v17++);
              if (v16)
              {
                v8 = v17 - 1;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
LABEL_26:
    v18 = *(_QWORD *)(v0 + 104);
    sub_10004BA60(*(_QWORD *)(v0 + 112));
    v19 = *(_QWORD *)(v0 + 80);
    swift_retain(v18);
    v20 = swift_bridgeObjectRetain(v19);
    sub_100088E00(v20, v18);
    swift_release(v18);
    swift_bridgeObjectRelease_n(v19, 2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_10007B928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 72) = a4;
  *(_QWORD *)(v5 + 80) = a5;
  return swift_task_switch(sub_10007B940, a4, 0);
}

uint64_t sub_10007B940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v9)(void);

  if ((static Task<>.isCancelled.getter(a1) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 72);
    swift_beginAccess(v2 + 168, v1 + 16, 1, 0);
    v3 = *(_QWORD *)(v2 + 168);
    *(_QWORD *)(v2 + 168) = 0;
    swift_release(v3);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 88) = OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_logger;
    v6 = *(_QWORD *)(v5 + 112);
    *(_QWORD *)(v1 + 96) = v6;
    v7 = *(int **)(*(_QWORD *)v6 + 224);
    *(_QWORD *)(v1 + 104) = v7;
    v9 = (uint64_t (*)(void))((char *)v7 + *v7);
    v8 = (_QWORD *)swift_task_alloc(v7[1]);
    *(_QWORD *)(v1 + 112) = v8;
    *v8 = v1;
    v8[1] = sub_10007B9F8;
    return v9();
  }
}

uint64_t sub_10007B9F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10007C42C;
  else
    v4 = sub_10007BA5C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 72), 0);
}

uint64_t sub_10007BA5C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 80);
  v2 = v1[3];
  v3 = v1[4];
  sub_100022F20(v1, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 128) = v5;
  *v5 = v0;
  v5[1] = sub_10007BAD4;
  return v7(v2, v3);
}

uint64_t sub_10007BAD4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[9];
    v5 = sub_10007C484;
  }
  else
  {
    v4 = v2[12];
    v2[18] = *(_QWORD *)(*(_QWORD *)v4 + 232);
    v5 = sub_10007BB48;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10007BB48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 152) = (*(uint64_t (**)(void))(v0 + 144))();
  return swift_task_switch(sub_10007BB90, v1, 0);
}

uint64_t sub_10007BB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  _QWORD *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t (*v44)(void);

  v1 = *(_QWORD *)(v0 + 152);
  if (!*(_QWORD *)(v1 + 16))
  {
    v11 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "have network, no waiters", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    goto LABEL_12;
  }
  v2 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 152), 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v3, v4))
  {
    v18 = *(_QWORD *)(v0 + 152);

    swift_bridgeObjectRelease_n(v18, 2);
    goto LABEL_15;
  }
  v42 = v4;
  v5 = (uint8_t *)swift_slowAlloc(12, -1);
  v41 = swift_slowAlloc(32, -1);
  *(_QWORD *)(v0 + 40) = v41;
  v43 = v5;
  *(_DWORD *)v5 = 136315138;
  v6 = *(_QWORD *)(v1 + 16);
  if (!v6)
  {
    v19 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 56) = _swiftEmptyArrayStorage;
    v20 = sub_10001D138(&qword_1001282E0);
    v21 = sub_10008ADD0(&qword_100128E78, &qword_1001282E0, (uint64_t)&protocol conformance descriptor for [A]);
    v22 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v20, v21);
    v24 = v23;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 64) = sub_1000230D0(v22, v24, (uint64_t *)(v0 + 40));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v19, 2);
    _os_log_impl((void *)&_mh_execute_header, v3, v42, "have network, waking up: %s", v43, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v43, -1, -1);

LABEL_15:
    v8 = *(_QWORD *)(v0 + 152);
    v25 = *(_BYTE *)(v8 + 32);
    *(_BYTE *)(v0 + 184) = v25;
    v26 = -1;
    v27 = -1 << v25;
    if (-v27 < 64)
      v26 = ~(-1 << -(char)v27);
    v28 = v26 & *(_QWORD *)(v8 + 56);
    if (v28)
    {
      v29 = 0;
      v30 = __clz(__rbit64(v28));
      v31 = (v28 - 1) & v28;
LABEL_19:
      *(_QWORD *)(v0 + 160) = v29;
      *(_QWORD *)(v0 + 168) = v31;
      v32 = *(_BYTE *)(*(_QWORD *)(v8 + 48) + v30);
      v33 = (_QWORD *)swift_task_alloc(dword_1001288FC);
      *(_QWORD *)(v0 + 176) = v33;
      *v33 = v0;
      v33[1] = sub_10007C210;
      return sub_10007C4DC(v32);
    }
    v10 = 63 - v27;
    if (v10 <= 0x7F)
      goto LABEL_42;
    v34 = *(_QWORD *)(v8 + 64);
    if (v34)
    {
      v29 = 1;
    }
    else
    {
      if (v10 < 0xC0)
        goto LABEL_42;
      v34 = *(_QWORD *)(v8 + 72);
      if (v34)
      {
        v29 = 2;
      }
      else
      {
        if (v10 < 0x100)
          goto LABEL_42;
        v34 = *(_QWORD *)(v8 + 80);
        if (!v34)
          goto LABEL_33;
        v29 = 3;
      }
    }
LABEL_23:
    v31 = (v34 - 1) & v34;
    v30 = __clz(__rbit64(v34)) + (v29 << 6);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 48) = _swiftEmptyArrayStorage;
  sub_10006C488(0, v6, 0);
  v8 = sub_100088920(v7);
  v10 = (unint64_t)"ag";
  if (v8 < 0 || (v10 = 1 << *(_BYTE *)(v7 + 32), v8 >= (uint64_t)v10))
  {
    __break(1u);
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 56 + (((unint64_t)v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8;
    if ((v10 & 1) != 0)
    {
      v10 = *(unsigned int *)(v7 + 36);
      if ((_DWORD)v10 == v9)
        __asm { BR              X9 }
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  if (v10 >= 0x140)
  {
    v34 = *(_QWORD *)(v8 + 88);
    if (v34)
    {
      v29 = 4;
      goto LABEL_23;
    }
    v35 = 0;
    v36 = v10 >> 6;
    if (v36 <= 5)
      v36 = 5;
    v37 = v36 - 5;
    while (v37 != v35)
    {
      v34 = *(_QWORD *)(v8 + 96 + 8 * v35++);
      if (v34)
      {
        v29 = v35 + 4;
        goto LABEL_23;
      }
    }
  }
LABEL_42:
  v38 = swift_release(v8);
  if ((static Task<>.isCancelled.getter(v38) & 1) != 0)
  {
LABEL_12:
    v15 = *(_QWORD *)(v0 + 72);
    swift_beginAccess(v15 + 168, v0 + 16, 1, 0);
    v16 = *(_QWORD *)(v15 + 168);
    *(_QWORD *)(v15 + 168) = 0;
    swift_release(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v39 = *(int **)(v0 + 104);
  v44 = (uint64_t (*)(void))((char *)v39 + *v39);
  v40 = (_QWORD *)swift_task_alloc(v39[1]);
  *(_QWORD *)(v0 + 112) = v40;
  *v40 = v0;
  v40[1] = sub_10007B9F8;
  return v44();
}

uint64_t sub_10007C210()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  return swift_task_switch(sub_10007C268, v1, 0);
}

void sub_10007C268()
{
  uint64_t v0;
  int64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  _QWORD *v17;
  void (*v18)(void);

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  if (v2)
  {
    v3 = (v2 - 1) & v2;
    v4 = __clz(__rbit64(v2)) | (v1 << 6);
    v5 = *(_QWORD *)(v0 + 152);
LABEL_3:
    *(_QWORD *)(v0 + 160) = v1;
    *(_QWORD *)(v0 + 168) = v3;
    v6 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v4);
    v7 = (_QWORD *)swift_task_alloc(dword_1001288FC);
    *(_QWORD *)(v0 + 176) = v7;
    *v7 = v0;
    v7[1] = sub_10007C210;
    sub_10007C4DC(v6);
    return;
  }
  v8 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_22:
    __break(1u);
    return;
  }
  v9 = (unint64_t)((1 << *(_BYTE *)(v0 + 184)) + 63) >> 6;
  v5 = *(_QWORD *)(v0 + 152);
  if (v8 < v9)
  {
    v10 = v5 + 56;
    v11 = *(_QWORD *)(v5 + 56 + 8 * v8);
    ++v1;
    if (v11)
    {
LABEL_7:
      v3 = (v11 - 1) & v11;
      v4 = __clz(__rbit64(v11)) + (v1 << 6);
      goto LABEL_3;
    }
    v1 = v8 + 1;
    if (v8 + 1 < v9)
    {
      v11 = *(_QWORD *)(v10 + 8 * v1);
      if (v11)
        goto LABEL_7;
      v1 = v8 + 2;
      if (v8 + 2 < v9)
      {
        v11 = *(_QWORD *)(v10 + 8 * v1);
        if (v11)
          goto LABEL_7;
        v12 = v8 + 3;
        if (v12 < v9)
        {
          v11 = *(_QWORD *)(v10 + 8 * v12);
          if (v11)
          {
            v1 = v12;
            goto LABEL_7;
          }
          while (1)
          {
            v1 = v12 + 1;
            if (__OFADD__(v12, 1))
              goto LABEL_22;
            if (v1 >= v9)
              break;
            v11 = *(_QWORD *)(v10 + 8 * v1);
            ++v12;
            if (v11)
              goto LABEL_7;
          }
        }
      }
    }
  }
  v13 = swift_release(v5);
  if ((static Task<>.isCancelled.getter(v13) & 1) != 0)
  {
    v14 = *(_QWORD *)(v0 + 72);
    swift_beginAccess(v14 + 168, v0 + 16, 1, 0);
    v15 = *(_QWORD *)(v14 + 168);
    *(_QWORD *)(v14 + 168) = 0;
    swift_release(v15);
    (*(void (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(int **)(v0 + 104);
    v18 = (void (*)(void))((char *)v16 + *v16);
    v17 = (_QWORD *)swift_task_alloc(v16[1]);
    *(_QWORD *)(v0 + 112) = v17;
    *v17 = v0;
    v17[1] = sub_10007B9F8;
    v18();
  }
}

uint64_t sub_10007C42C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_errorRelease(*(_QWORD *)(v0 + 120));
  v1 = *(_QWORD *)(v0 + 72);
  swift_beginAccess(v1 + 168, v0 + 16, 1, 0);
  v2 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 168) = 0;
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007C484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_errorRelease(*(_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 72);
  swift_beginAccess(v1 + 168, v0 + 16, 1, 0);
  v2 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 168) = 0;
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007C4DC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 392) = v1;
  *(_BYTE *)(v2 + 306) = a1;
  v3 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v2 + 400) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 408) = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 416) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 424) = swift_task_alloc(v5);
  v6 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v2 + 432) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v2 + 440) = v7;
  *(_QWORD *)(v2 + 448) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10007C578, v1, 0);
}

void sub_10007C578()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (uint64_t *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 392);
  *(_QWORD *)(v0 + 456) = OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_logger;
  v3 = swift_retain_n(v2, 4);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 392);
    v7 = swift_slowAlloc(32, -1);
    v21 = swift_slowAlloc(96, -1);
    *(_DWORD *)v7 = 136315650;
    swift_beginAccess(v6 + 176, v0 + 264, 0, 0);
    v8 = 8 * *(char *)(v6 + 176);
    v9 = *(_QWORD *)&aShutdown_2[v8 + 8];
    v10 = *(_QWORD *)(v0 + 392);
    v20 = *(unsigned __int8 *)(v0 + 306);
    *(_QWORD *)(v0 + 368) = sub_1000230D0(*(_QWORD *)&aStopped_1[v8], v9, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v9);
    swift_release_n(v10, 2);
    *(_WORD *)(v7 + 12) = 2080;
    swift_beginAccess(v10 + 144, v0 + 240, 0, 0);
    v11 = *(_QWORD *)(v10 + 144);
    v12 = *(_QWORD *)(v10 + 152);
    ObjectType = swift_getObjectType(v11);
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
    swift_unknownObjectRetain(v11);
    LOBYTE(v12) = v14(ObjectType, v12);
    swift_unknownObjectRelease(v11);
    v15 = sub_100079DE8(v12);
    v17 = v16;
    *(_QWORD *)(v0 + 376) = sub_1000230D0(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v17);
    swift_release_n(v10, 2);
    *(_WORD *)(v7 + 22) = 2080;
    __asm { BR              X9 }
  }
  v18 = *v1;

  swift_release_n(v18, 4);
  v19 = *v1;
  swift_beginAccess(*v1 + 176, v0 + 216, 0, 0);
  __asm { BR              X10 }
}

uint64_t sub_10007C944()
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E696E6E7572, v2, 0x6E776F6474756873, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v2);
  if ((v3 & 1) == 0)
    __asm { BR              X10 }
  v4 = *(_QWORD *)(v1 + 416);
  v5 = *(_QWORD *)(v1 + 424);
  swift_task_dealloc(*(_QWORD *)(v1 + 448));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10007CAC8()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;

  v3 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E696E6E7572, v0, 0x656C6449696D6573, 0xE800000000000000, 0);
  v4 = swift_bridgeObjectRelease(v0);
  if ((v3 & 1) == 0)
    __asm { BR              X10 }
  ((void (*)(uint64_t))ContinuousClock.init())(v4);
  *(_QWORD *)(v1 + 328) = 1000000000000000;
  *(_QWORD *)(v1 + 336) = 0;
  *(_QWORD *)(v1 + 288) = 0;
  *(_QWORD *)(v1 + 296) = 0;
  *(_BYTE *)(v1 + 304) = 1;
  return swift_task_switch(sub_10007CD40, 0, 0);
}

uint64_t sub_10007CD40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[54];
  v3 = v0[51];
  v2 = v0[52];
  v4 = v0[50];
  v5 = sub_1000202A4(&qword_100126EB8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v1, v5);
  v6 = sub_1000202A4(&qword_100126EC0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 41, v4, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[58] = v7;
  v7(v2, v4);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[59] = v8;
  *v8 = v0;
  v8[1] = sub_10007CE54;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[53], v0 + 36, v0[54], v5);
}

uint64_t sub_10007CE54()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 464);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 480) = v0;
  swift_task_dealloc(v3);
  v4(v5, v6);
  if (v0)
  {
    v7 = sub_10007D1C8;
    v8 = 0;
  }
  else
  {
    v9 = v2[49];
    (*(void (**)(_QWORD, _QWORD))(v2[55] + 8))(v2[56], v2[54]);
    v7 = sub_10007CEF4;
    v8 = v9;
  }
  return swift_task_switch(v7, v8, 0);
}

void sub_10007CEF4()
{
  __asm { BR              X10 }
}

uint64_t sub_10007CF5C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v2 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E696E6E7572, v0, 0x656C6449696D6573, 0xE800000000000000, 0);
  v3 = swift_bridgeObjectRelease(v0);
  if ((v2 & 1) == 0)
    __asm { BR              X10 }
  ((void (*)(uint64_t))ContinuousClock.init())(v3);
  *(_QWORD *)(v1 + 328) = 1000000000000000;
  *(_QWORD *)(v1 + 336) = 0;
  *(_QWORD *)(v1 + 288) = 0;
  *(_QWORD *)(v1 + 296) = 0;
  *(_BYTE *)(v1 + 304) = 1;
  return swift_task_switch(sub_10007CD40, 0, 0);
}

uint64_t sub_10007D1C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v0[55];
  v1 = v0[56];
  v3 = v0[54];
  v4 = v0[49];
  swift_errorRelease(v0[60]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_10008AE10, v4, 0);
}

uint64_t sub_10007D228(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_BYTE *)(*(_QWORD *)v1 + 307) = a1;
  swift_task_dealloc(v2);
  swift_unknownObjectRelease(v3);
  return swift_task_switch(sub_10007D290, v4, 0);
}

uint64_t sub_10007D290()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];

  v1 = *(unsigned __int8 *)(v0 + 307);
  if (v1 == 10)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 392) + 112);
    *(_QWORD *)(v0 + 528) = v2;
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(*(_QWORD *)v2 + 184);
    v3 = sub_10007DC28;
    return swift_task_switch(v3, v2, 0);
  }
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_BYTE *)(v0 + 306);
  v6 = swift_allocObject(&unk_10010A290, 17, 7);
  *(_BYTE *)(v6 + 16) = v5;
  v7 = v6;
  v50 = v6;
  v8 = swift_allocObject(&unk_10010A2B8, 17, 7);
  *(_BYTE *)(v8 + 16) = v1;
  v9 = v8;
  v51 = v8;
  v42 = v4;
  v10 = swift_retain_n(v4, 2);
  v45 = Logger.logObject.getter(v10);
  v44 = static os_log_type_t.default.getter();
  v47 = swift_allocObject(&unk_10010A2E0, 17, 7);
  *(_BYTE *)(v47 + 16) = 32;
  v46 = swift_allocObject(&unk_10010A308, 17, 7);
  *(_BYTE *)(v46 + 16) = 8;
  v11 = swift_allocObject(&unk_10010A330, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_100089464;
  *(_QWORD *)(v11 + 24) = v4;
  v12 = v11;
  v49 = v11;
  v48 = swift_allocObject(&unk_10010A358, 32, 7);
  *(_QWORD *)(v48 + 16) = sub_10001D9F8;
  *(_QWORD *)(v48 + 24) = v12;
  v53 = swift_allocObject(&unk_10010A380, 17, 7);
  *(_BYTE *)(v53 + 16) = 32;
  v13 = swift_allocObject(&unk_10010A3A8, 17, 7);
  *(_BYTE *)(v13 + 16) = 8;
  v14 = swift_allocObject(&unk_10010A3D0, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_1000894F8;
  *(_QWORD *)(v14 + 24) = v7;
  v52 = swift_allocObject(&unk_10010A3F8, 32, 7);
  *(_QWORD *)(v52 + 16) = sub_10008AE18;
  *(_QWORD *)(v52 + 24) = v14;
  v43 = swift_allocObject(&unk_10010A420, 17, 7);
  *(_BYTE *)(v43 + 16) = 32;
  v15 = swift_allocObject(&unk_10010A448, 17, 7);
  *(_BYTE *)(v15 + 16) = 8;
  v16 = swift_allocObject(&unk_10010A470, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_1000895DC;
  *(_QWORD *)(v16 + 24) = v9;
  v17 = swift_allocObject(&unk_10010A498, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_10008AE18;
  *(_QWORD *)(v17 + 24) = v16;
  v18 = sub_10001D138((uint64_t *)&unk_100128900);
  inited = swift_initStackObject(v18, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1000DEC50;
  *(_QWORD *)(inited + 32) = sub_1000895F4;
  *(_QWORD *)(inited + 40) = v47;
  *(_QWORD *)(inited + 48) = sub_10008AE50;
  *(_QWORD *)(inited + 56) = v46;
  *(_QWORD *)(inited + 64) = sub_100089618;
  *(_QWORD *)(inited + 72) = v48;
  *(_QWORD *)(inited + 80) = sub_10008AE50;
  *(_QWORD *)(inited + 88) = v53;
  *(_QWORD *)(inited + 96) = sub_10008AE50;
  *(_QWORD *)(inited + 104) = v13;
  *(_QWORD *)(inited + 112) = sub_10008AE1C;
  *(_QWORD *)(inited + 120) = v52;
  *(_QWORD *)(inited + 128) = sub_10008AE50;
  *(_QWORD *)(inited + 136) = v43;
  *(_QWORD *)(inited + 144) = sub_10008AE50;
  *(_QWORD *)(inited + 152) = v15;
  *(_QWORD *)(inited + 160) = sub_10008AE1C;
  *(_QWORD *)(inited + 168) = v17;
  swift_retain(v42);
  swift_retain(v49);
  swift_retain(v50);
  swift_retain(v14);
  swift_retain(v51);
  swift_retain(v16);
  swift_retain(v47);
  swift_retain(v46);
  swift_retain(v48);
  swift_retain(v53);
  swift_retain(v13);
  swift_retain(v52);
  swift_retain(v43);
  swift_retain(v15);
  swift_retain(v17);
  swift_bridgeObjectRelease(inited);
  v20 = os_log_type_enabled(v45, v44);
  v21 = *(_QWORD *)(v0 + 392);
  if (v20)
  {
    v41 = *(unsigned __int8 *)(v0 + 306);
    v22 = swift_slowAlloc(32, -1);
    v54[0] = swift_slowAlloc(96, -1);
    *(_WORD *)v22 = 770;
    *(_BYTE *)(v22 + 2) = 32;
    swift_release(v47);
    *(_BYTE *)(v22 + 3) = 8;
    swift_release(v46);
    v23 = *(_QWORD *)(v21 + 144);
    v24 = *(_QWORD *)(v21 + 152);
    ObjectType = swift_getObjectType(v23);
    v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 16);
    swift_unknownObjectRetain(v23);
    LOBYTE(ObjectType) = v26(ObjectType, v24);
    swift_unknownObjectRelease(v23);
    v27 = sub_100079DE8(ObjectType);
    v29 = v28;
    *(_QWORD *)(v0 + 360) = sub_1000230D0(v27, v28, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v29);
    swift_release(v48);
    swift_release(v49);
    swift_release_n(v21, 2);
    *(_BYTE *)(v22 + 12) = 32;
    swift_release(v53);
    *(_BYTE *)(v22 + 13) = 8;
    swift_release(v13);
    __asm { BR              X9 }
  }

  swift_release(v47);
  swift_release(v46);
  swift_release(v48);
  swift_release(v49);
  swift_release_n(v21, 2);
  swift_release(v53);
  swift_release(v13);
  swift_release(v52);
  swift_release(v14);
  swift_release(v50);
  swift_release(v43);
  swift_release(v15);
  swift_release(v17);
  swift_release(v16);
  swift_release(v51);
  v30 = *(_QWORD *)(*(_QWORD *)(v0 + 392) + 120);
  if (*(_QWORD *)(v30 + 16))
  {
    v31 = sub_10002559C(*(_BYTE *)(v0 + 307));
    if ((v32 & 1) != 0)
    {
      v33 = (uint64_t *)(*(_QWORD *)(v30 + 56) + 16 * v31);
      v34 = *v33;
      *(_QWORD *)(v0 + 504) = *v33;
      *(_QWORD *)(v0 + 512) = v33[1];
      v35 = dword_1001288EC;
      swift_unknownObjectRetain(v34);
      v36 = swift_task_alloc(v35);
      *(_QWORD *)(v0 + 520) = v36;
      *(_QWORD *)v36 = v0;
      *(_QWORD *)(v36 + 8) = sub_10007DB50;
      v37 = *(_BYTE *)(v0 + 307);
      v2 = *(_QWORD *)(v0 + 392);
      *(_QWORD *)(v36 + 104) = v2;
      *(_BYTE *)(v36 + 168) = v37;
      v3 = sub_10007B3B8;
      return swift_task_switch(v3, v2, 0);
    }
  }
  v39 = *(_BYTE *)(v0 + 307);
  v54[0] = 0;
  v54[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  *(_QWORD *)(v0 + 312) = 0;
  *(_QWORD *)(v0 + 320) = 0xE000000000000000;
  v40._countAndFlagsBits = 0xD00000000000001ALL;
  v40._object = (void *)0x80000001000E3F80;
  String.append(_:)(v40);
  *(_BYTE *)(v0 + 305) = v39;
  _print_unlocked<A, B>(_:_:)(v0 + 305, v0 + 312, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), "swtransparencyd/SWTStateMachine.swift", 37, 2, 554, 0);
}

uint64_t sub_10007DB50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 392);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 520));
  return swift_task_switch(sub_10007DBA8, v1, 0);
}

uint64_t sub_10007DBA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v1 + 144);
  v3 = *(_OWORD *)(v0 + 504);
  *(_OWORD *)(v1 + 144) = v3;
  v4 = v3;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRelease(v2);
  sub_10007B0B8();
  swift_unknownObjectRelease(v4);
  v5 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007DC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD))(v0 + 536))(*(unsigned __int8 *)(v0 + 306));
  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007DC7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD))(v0 + 552))(*(unsigned __int8 *)(v0 + 306));
  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007DCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v26[4];

  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12);
  if ((_DWORD)v14 == 1)
  {
    sub_1000202F0(a1, &qword_100127220);
    v15 = 7168;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
    {
LABEL_3:
      v17 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v16);
      swift_unknownObjectRetain(v16);
      v19 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      v21 = v20;
      swift_unknownObjectRelease(v16);
      goto LABEL_6;
    }
  }
  else
  {
    v22 = TaskPriority.rawValue.getter(v14);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v15 = v22 | 0x1C00;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
      goto LABEL_3;
  }
  v19 = 0;
  v21 = 0;
LABEL_6:
  v23 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = a3;
  if (v21 | v19)
  {
    v26[0] = 0;
    v26[1] = 0;
    v24 = v26;
    v26[2] = v19;
    v26[3] = v21;
  }
  else
  {
    v24 = 0;
  }
  return swift_task_create(v15, v24, a5, a6, v23);
}

uint64_t sub_10007DE20(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = v1;
  *(_BYTE *)(v2 + 105) = a1;
  return swift_task_switch(sub_10007DE3C, v1, 0);
}

uint64_t sub_10007DE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  char v10;
  Swift::String v11;
  uint64_t (*v12)(uint64_t, unint64_t);

  v1 = *(_QWORD *)(v0 + 80);
  swift_beginAccess(v1 + 128, v0 + 16, 32, 0);
  v2 = *(_QWORD *)(v1 + 128);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_10002559C(*(_BYTE *)(v0 + 105)), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    *(_QWORD *)(v0 + 88) = v5;
    swift_endAccess(v0 + 16);
    v6 = *(int **)(*(_QWORD *)v5 + 152);
    v7 = v6[1];
    v12 = (uint64_t (*)(uint64_t, unint64_t))((char *)v6 + *v6);
    swift_retain(v5);
    v8 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 96) = v8;
    *v8 = v0;
    v8[1] = sub_10007DFCC;
    return v12(0x746E652874696177, 0xEC000000293A7265);
  }
  else
  {
    v10 = *(_BYTE *)(v0 + 105);
    swift_endAccess(v0 + 16);
    _StringGuts.grow(_:)(29);
    *(_QWORD *)(v0 + 64) = 0;
    *(_QWORD *)(v0 + 72) = 0xE000000000000000;
    v11._object = (void *)0x80000001000E3FA0;
    v11._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v11);
    *(_BYTE *)(v0 + 104) = v10;
    _print_unlocked<A, B>(_:_:)(v0 + 104, v0 + 64, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), "swtransparencyd/SWTStateMachine.swift", 37, 2, 401, 0);
  }
}

uint64_t sub_10007DFCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_task_switch(sub_10007E024, v1, 0);
}

uint64_t sub_10007E024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_BYTE *)(v0 + 105);
  v4 = type metadata accessor for SMSemaphore();
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_BYTE *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = &_swiftEmptySetSingleton;
  swift_beginAccess(v2 + 128, v0 + 40, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 128));
  v9 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = 0x8000000000000000;
  sub_100087DF4(v5, v3, isUniquelyReferenced_nonNull_native);
  v7 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = v9;
  swift_bridgeObjectRelease(v7);
  swift_endAccess(v0 + 40);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007E0FC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 88) = a3;
  *(_QWORD *)(v4 + 96) = v3;
  *(_QWORD *)(v4 + 80) = a2;
  *(_BYTE *)(v4 + 129) = a1;
  return swift_task_switch(sub_10007E11C, v3, 0);
}

uint64_t sub_10007E11C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  char v10;
  Swift::String v11;
  int *v12;

  v1 = *(_QWORD *)(v0 + 96);
  swift_beginAccess(v1 + 128, v0 + 16, 32, 0);
  v2 = *(_QWORD *)(v1 + 128);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_10002559C(*(_BYTE *)(v0 + 129)), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    *(_QWORD *)(v0 + 104) = v5;
    swift_endAccess(v0 + 16);
    v6 = *(int **)(*(_QWORD *)v5 + 160);
    v7 = v6[1];
    v12 = (int *)((char *)v6 + *v6);
    swift_retain(v5);
    v8 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 112) = v8;
    *v8 = v0;
    v8[1] = sub_10007E2C0;
    return ((uint64_t (*)(_QWORD, _QWORD, unint64_t, unint64_t))v12)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), 0xD000000000000014, 0x80000001000E3FC0);
  }
  else
  {
    v10 = *(_BYTE *)(v0 + 129);
    swift_endAccess(v0 + 16);
    _StringGuts.grow(_:)(29);
    *(_QWORD *)(v0 + 64) = 0;
    *(_QWORD *)(v0 + 72) = 0xE000000000000000;
    v11._countAndFlagsBits = 0xD00000000000001BLL;
    v11._object = (void *)0x80000001000E3FA0;
    String.append(_:)(v11);
    *(_BYTE *)(v0 + 128) = v10;
    _print_unlocked<A, B>(_:_:)(v0 + 128, v0 + 64, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), "swtransparencyd/SWTStateMachine.swift", 37, 2, 410, 0);
  }
}

uint64_t sub_10007E2C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10007E400;
  else
    v4 = sub_10007E324;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), 0);
}

uint64_t sub_10007E324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_BYTE *)(v0 + 129);
  v4 = type metadata accessor for SMSemaphore();
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_BYTE *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = &_swiftEmptySetSingleton;
  swift_beginAccess(v2 + 128, v0 + 40, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 128));
  v9 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = 0x8000000000000000;
  sub_100087DF4(v5, v3, isUniquelyReferenced_nonNull_native);
  v7 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = v9;
  swift_bridgeObjectRelease(v7);
  swift_endAccess(v0 + 40);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007E400()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007E434(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 48) = a3;
  *(_QWORD *)(v4 + 56) = v3;
  *(_QWORD *)(v4 + 40) = a2;
  *(_BYTE *)(v4 + 72) = a1;
  return swift_task_switch(sub_10007E454, v3, 0);
}

uint64_t sub_10007E454()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_BYTE *)(v0 + 72);
  swift_beginAccess(v1 + 144, v0 + 16, 0, 0);
  v3 = *(_QWORD *)(v1 + 144);
  v4 = *(_QWORD *)(v1 + 152);
  ObjectType = swift_getObjectType(v3);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  swift_unknownObjectRetain(v3);
  LOBYTE(v4) = v6(ObjectType, v4);
  swift_unknownObjectRelease(v3);
  v7 = sub_100079DE8(v4);
  v9 = v8;
  v10 = sub_100079DE8(v2);
  if (v7 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease_n(v9, 2);
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v9);
    if ((v14 & 1) == 0)
    {
      v15 = swift_task_alloc(dword_100128914);
      *(_QWORD *)(v0 + 64) = v15;
      *(_QWORD *)v15 = v0;
      *(_QWORD *)(v15 + 8) = sub_10007E5A4;
      v16 = *(_QWORD *)(v0 + 56);
      v17 = *(_BYTE *)(v0 + 72);
      v18 = *(_OWORD *)(v0 + 40);
      *(_QWORD *)(v15 + 96) = v16;
      *(_OWORD *)(v15 + 80) = v18;
      *(_BYTE *)(v15 + 129) = v17;
      return swift_task_switch(sub_10007E11C, v16, 0);
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007E5A4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10007E5EC(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = v1;
  *(_BYTE *)(v2 + 120) = a1;
  return swift_task_switch(sub_10007E608, v1, 0);
}

void sub_10007E608()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_beginAccess(v1 + 176, v0 + 16, 1, 0);
  __asm { BR              X10 }
}

uint64_t sub_10007E680()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;

  v3 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E696E6E7572, v2, 1701602409, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v2);
  if ((v3 & 1) == 0)
    __asm { BR              X10 }
  v4 = *(_QWORD *)(v1 + 88);
  *v0 = 4;
  v5 = *(_BYTE *)(v4 + 192);
  v6 = (_QWORD *)swift_task_alloc(dword_1001288FC);
  *(_QWORD *)(v1 + 96) = v6;
  *v6 = v1;
  v6[1] = sub_10007E7E8;
  return sub_10007C4DC(v5);
}

uint64_t sub_10007E7E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_task_switch(sub_10007E83C, v1, 0);
}

uint64_t sub_10007E83C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, unint64_t);

  v1 = *(_QWORD *)(v0 + 88);
  swift_beginAccess(v1 + 168, v0 + 40, 0, 0);
  v2 = *(_QWORD *)(v1 + 168);
  if (v2)
  {
    swift_retain(v2);
    Task.cancel()();
    swift_release(v2);
  }
  if (*(_BYTE *)(v0 + 120) != 1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = *(_QWORD *)(v0 + 88);
  swift_beginAccess(v3 + 184, v0 + 64, 0, 0);
  v4 = *(_QWORD *)(v3 + 184);
  *(_QWORD *)(v0 + 104) = v4;
  v5 = *(int **)(*(_QWORD *)v4 + 152);
  v6 = v5[1];
  v9 = (uint64_t (*)(uint64_t, unint64_t))((char *)v5 + *v5);
  swift_retain(v4);
  v7 = (_QWORD *)swift_task_alloc(v6);
  *(_QWORD *)(v0 + 112) = v7;
  *v7 = v0;
  v7[1] = sub_10007E954;
  return v9(0x69617728706F7473, 0xEB00000000293A74);
}

uint64_t sub_10007E954()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 104);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10007E9A4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100128E3C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001E4EC;
  return sub_10007E9EC();
}

uint64_t sub_10007E9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 312) = v0;
  v2 = sub_10001D138(&qword_100127220);
  *(_QWORD *)(v1 + 320) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10007EA48, v0, 0);
}

uint64_t sub_10007EA48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = sub_1000202A4(&qword_1001288C8, 255, type metadata accessor for SWTStateMachine, (uint64_t)&unk_1000DE924);
  v3 = OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_logger;
  *(_QWORD *)(v0 + 328) = v2;
  *(_QWORD *)(v0 + 336) = v3;
  swift_beginAccess(v1 + 144, v0 + 16, 1, 0);
  swift_beginAccess(v1 + 176, v0 + 40, 1, 0);
  swift_beginAccess(v1 + 160, v0 + 64, 1, 0);
  swift_beginAccess(v1 + 136, v0 + 88, 0, 0);
  v4 = *(_QWORD **)(v0 + 312);
  *(_QWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 232) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 232);
  v5._countAndFlagsBits = 0x63614D6574617453;
  v5._object = (void *)0xEE00203A656E6968;
  String.append(_:)(v5);
  v6 = v4[18];
  v7 = v4[19];
  ObjectType = swift_getObjectType(v6);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
  swift_unknownObjectRetain(v6);
  LOBYTE(v7) = v9(ObjectType, v7);
  swift_unknownObjectRelease(v6);
  *(_BYTE *)(v0 + 465) = v7;
  _print_unlocked<A, B>(_:_:)(v0 + 465, v0 + 176, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10 = *(_QWORD *)(v0 + 184);
  v11 = String.utf8CString.getter(*(_QWORD *)(v0 + 176), v10);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(v0 + 344) = os_transaction_create(v11 + 32);
  swift_release(v11);
  v12 = v4[18];
  v13 = v4[19];
  v14 = swift_getObjectType(v12);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 16);
  swift_unknownObjectRetain(v12);
  v16 = v15(v14, v13);
  swift_unknownObjectRelease(v12);
  swift_beginAccess(v4 + 16, v0 + 112, 32, 0);
  v17 = v4[16];
  if (*(_QWORD *)(v17 + 16) && (v18 = sub_10002559C(v16), (v19 & 1) != 0))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
    *(_QWORD *)(v0 + 352) = v20;
    swift_endAccess(v0 + 112);
    v21 = *(int **)(*(_QWORD *)v20 + 168);
    v22 = v21[1];
    v45 = (uint64_t (*)(void))((char *)v21 + *v21);
    swift_retain(v20);
    v23 = (_QWORD *)swift_task_alloc(v22);
    *(_QWORD *)(v0 + 360) = v23;
    *v23 = v0;
    v23[1] = sub_10007EF28;
    return v45();
  }
  else
  {
    swift_endAccess(v0 + 112);
    v25 = swift_retain_n(*(_QWORD *)(v0 + 312), 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    v28 = os_log_type_enabled(v26, v27);
    v29 = *(_QWORD *)(v0 + 312);
    if (v28)
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v47 = v46;
      *(_DWORD *)v30 = 136315138;
      v31 = *(_QWORD *)(v29 + 144);
      v32 = *(_QWORD *)(v29 + 152);
      v33 = swift_getObjectType(v31);
      v34 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 16);
      swift_unknownObjectRetain(v31);
      LOBYTE(v32) = v34(v33, v32);
      swift_unknownObjectRelease(v31);
      v35 = sub_100079DE8(v32);
      v37 = v36;
      *(_QWORD *)(v0 + 280) = sub_1000230D0(v35, v36, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease(v37);
      swift_release_n(v29, 2);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "SM: activating state %s", v30, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_release_n(v29, 2);
    }
    v38 = *(_QWORD *)(v0 + 320);
    v39 = *(_QWORD *)(v0 + 328);
    v40 = *(_QWORD *)(v0 + 312);
    v41 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v38, 1, 1, v41);
    v42 = (_QWORD *)swift_allocObject(&unk_10010A8B0, 40, 7);
    v42[2] = v40;
    v42[3] = v39;
    v42[4] = v40;
    swift_retain_n(v40, 2);
    v43 = sub_10007DCD0(v38, (uint64_t)&unk_100128E48, (uint64_t)v42, (uint64_t)&unk_10010A8D8, (uint64_t)&type metadata for SWTStateMachine.SMTransition, (uint64_t)&unk_100128E68);
    *(_QWORD *)(v0 + 368) = v43;
    v44 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    *(_QWORD *)(v0 + 376) = v44;
    *v44 = v0;
    v44[1] = sub_10007F200;
    return Task<>.value.getter(v0 + 296, v43, &type metadata for SWTStateMachine.SMTransition);
  }
}

uint64_t sub_10007EF28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 352);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  swift_release(v1);
  return swift_task_switch(sub_10007EF88, v2, 0);
}

uint64_t sub_10007EF88()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;

  v1 = swift_retain_n(v0[39], 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[39];
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v23 = v22;
    *(_DWORD *)v5 = 136315138;
    v6 = *(_QWORD *)(v4 + 144);
    v7 = *(_QWORD *)(v4 + 152);
    ObjectType = swift_getObjectType(v6);
    v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
    swift_unknownObjectRetain(v6);
    LOBYTE(ObjectType) = v9(ObjectType, v7);
    swift_unknownObjectRelease(v6);
    v10 = sub_100079DE8(ObjectType);
    v12 = v11;
    v0[35] = sub_1000230D0(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 35, v0 + 36, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v12);
    swift_release_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SM: activating state %s", v5, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    v13 = v0[39];

    swift_release_n(v13, 2);
  }
  v14 = v0[40];
  v15 = v0[41];
  v16 = v0[39];
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject(&unk_10010A8B0, 40, 7);
  v18[2] = v16;
  v18[3] = v15;
  v18[4] = v16;
  swift_retain_n(v16, 2);
  v19 = sub_10007DCD0(v14, (uint64_t)&unk_100128E48, (uint64_t)v18, (uint64_t)&unk_10010A8D8, (uint64_t)&type metadata for SWTStateMachine.SMTransition, (uint64_t)&unk_100128E68);
  v0[46] = v19;
  v20 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  v0[47] = v20;
  *v20 = v0;
  v20[1] = sub_10007F200;
  return Task<>.value.getter(v0 + 37, v19, &type metadata for SWTStateMachine.SMTransition);
}

uint64_t sub_10007F200()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 376));
  return swift_task_switch(sub_10007F258, v1, 0);
}

uint64_t sub_10007F258()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49[13];

  v1 = v0[37];
  v0[48] = v1;
  if (v1 >> 62)
  {
    if (v1 >> 62 != 1)
      __asm { BR              X10 }
    v2 = v0[39];
    swift_unknownObjectRelease(v0[43]);
    v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    v4 = *(_QWORD *)(v2 + 160);
    *(_QWORD *)(v2 + 160) = v1 & 0x3FFFFFFFFFFFFFFFLL;
    sub_10008A3F4(v1);
    swift_retain(v1 & 0x3FFFFFFFFFFFFFFFLL);
    swift_release(v4);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[49] = v5;
    v6 = sub_10001D138(&qword_100127AE0);
    *v5 = v0;
    v5[1] = sub_10007F93C;
    return ((uint64_t (*)(char *, uint64_t, ValueMetadata *, uint64_t, void *))Task.value.getter)((char *)v0 + 466, v3, &type metadata for SMState, v6, &protocol self-conformance witness table for Error);
  }
  else
  {
    v48 = v0 + 31;
    v8 = v0[43];
    v0[54] = v8;
    v9 = swift_retain_n(v0[39], 4);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    v12 = os_log_type_enabled(v10, v11);
    v13 = v0[39];
    if (v12)
    {
      v14 = swift_slowAlloc(32, -1);
      v46 = swift_slowAlloc(96, -1);
      v0[31] = v46;
      *(_DWORD *)v14 = 136315650;
      v15 = 8 * *(char *)(v13 + 176);
      v16 = *(_QWORD *)&aShutdown_2[v15 + 8];
      v17 = v0[39];
      v0[32] = sub_1000230D0(*(_QWORD *)&aStopped_1[v15], v16, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v16);
      swift_release_n(v17, 2);
      *(_WORD *)(v14 + 12) = 2080;
      v18 = *(_QWORD *)(v17 + 144);
      v19 = *(_QWORD *)(v17 + 152);
      v47 = v8;
      ObjectType = swift_getObjectType(v18);
      v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 16);
      swift_unknownObjectRetain(v18);
      LOBYTE(ObjectType) = v21(ObjectType, v19);
      swift_unknownObjectRelease(v18);
      v22 = sub_100079DE8(ObjectType);
      v24 = v23;
      v0[33] = sub_1000230D0(v22, v23, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 33, v0 + 34, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease(v24);
      swift_release_n(v17, 2);
      *(_WORD *)(v14 + 22) = 2080;
      v25 = sub_100079DE8(v1);
      v27 = v26;
      v0[34] = sub_1000230D0(v25, v26, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v14 + 24, v14 + 32);
      v28 = v27;
      v8 = v47;
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "SM: %s transition from %s to %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy(v46, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release_n(v13, 4);
    }
    v29 = *(_QWORD *)(v0[39] + 120);
    if (*(_QWORD *)(v29 + 16) && (v30 = sub_10002559C(v1), (v31 & 1) != 0))
    {
      v32 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 16 * v30);
      v33 = *v32;
      v0[55] = *v32;
      v0[56] = v32[1];
      v34 = swift_unknownObjectRetain(v33);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = swift_slowAlloc(32, -1);
        v49[0] = v38;
        *(_DWORD *)v37 = 136315138;
        v39 = sub_100079DE8(v1);
        v41 = v40;
        v0[30] = sub_1000230D0(v39, v40, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v48, v37 + 4, v37 + 12);
        swift_bridgeObjectRelease(v41);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "next state: %s", v37, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }

      v42 = swift_task_alloc(dword_1001288EC);
      v0[57] = v42;
      *(_QWORD *)v42 = v0;
      *(_QWORD *)(v42 + 8) = sub_1000805A8;
      v43 = v0[39];
      *(_QWORD *)(v42 + 104) = v43;
      *(_BYTE *)(v42 + 168) = v1;
      return swift_task_switch(sub_10007B3B8, v43, 0);
    }
    else
    {
      swift_unknownObjectRelease(v8);
      v49[0] = 0;
      v49[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      v0[26] = 0;
      v44 = v0 + 26;
      v44[1] = 0xE000000000000000;
      v45._object = (void *)0x80000001000E3F80;
      v45._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v45);
      *((_BYTE *)v44 + 259) = v1;
      _print_unlocked<A, B>(_:_:)((char *)v44 + 259, v44, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *v44, v44[1], "swtransparencyd/SWTStateMachine.swift", 37, 2, 515, 0);
    }
  }
}

void sub_10007F8B0()
{
  swift_bridgeObjectRelease(0xE800000000000000);
  JUMPOUT(0x10007F8B8);
}

uint64_t sub_10007F93C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 392);
  *(_QWORD *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100080AA8;
  else
    v4 = sub_10007F9A0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 312), 0);
}

uint64_t sub_10007F9A0()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  Swift::String v50;
  os_log_type_t type;
  uint64_t v52;
  uint64_t *v53;
  char v54;
  uint64_t v55[2];

  v54 = *(_BYTE *)(v0 + 466);
  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD **)(v0 + 312);
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 160);
  v53 = (uint64_t *)(v0 + 248);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v0 + 168);
  v3._object = (void *)0x80000001000E4180;
  v3._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v3);
  v4 = v2[18];
  v5 = v2[19];
  ObjectType = swift_getObjectType(v4);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  swift_unknownObjectRetain(v4);
  LOBYTE(v5) = v7(ObjectType, v5);
  swift_unknownObjectRelease(v4);
  *(_BYTE *)(v0 + 464) = v5;
  _print_unlocked<A, B>(_:_:)(v0 + 464, v0 + 192, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8 = *(_QWORD *)(v0 + 200);
  v9 = String.utf8CString.getter(*(_QWORD *)(v0 + 192), v8);
  swift_bridgeObjectRelease(v8);
  v10 = os_transaction_create(v9 + 32);
  sub_10008A414(v1);
  swift_release(v9);
  v11 = v2[20];
  v2[20] = 0;
  swift_release(v11);
  *(_QWORD *)(v0 + 432) = v10;
  v12 = swift_retain_n(*(_QWORD *)(v0 + 312), 4);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 312);
  if (v15)
  {
    v17 = swift_slowAlloc(32, -1);
    v52 = swift_slowAlloc(96, -1);
    *(_QWORD *)(v0 + 248) = v52;
    *(_DWORD *)v17 = 136315650;
    v18 = 8 * *(char *)(v16 + 176);
    v19 = *(_QWORD *)&aShutdown_2[v18 + 8];
    type = v14;
    v20 = *(_QWORD *)(v0 + 312);
    *(_QWORD *)(v0 + 256) = sub_1000230D0(*(_QWORD *)&aStopped_1[v18], v19, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v19);
    swift_release_n(v20, 2);
    *(_WORD *)(v17 + 12) = 2080;
    v21 = *(_QWORD *)(v20 + 144);
    v22 = *(_QWORD *)(v20 + 152);
    v23 = swift_getObjectType(v21);
    v24 = v10;
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 16);
    swift_unknownObjectRetain(v21);
    v26 = v25(v23, v22);
    v10 = v24;
    LOBYTE(v23) = v26;
    swift_unknownObjectRelease(v21);
    v27 = sub_100079DE8(v23);
    v29 = v28;
    *(_QWORD *)(v0 + 264) = sub_1000230D0(v27, v28, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v29);
    swift_release_n(v20, 2);
    *(_WORD *)(v17 + 22) = 2080;
    v30 = sub_100079DE8(v54);
    v32 = v31;
    *(_QWORD *)(v0 + 272) = sub_1000230D0(v30, v31, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v13, type, "SM: %s transition from %s to %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v52, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_release_n(v16, 4);
  }
  v33 = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 120);
  if (*(_QWORD *)(v33 + 16) && (v34 = sub_10002559C(v54), (v35 & 1) != 0))
  {
    v36 = (uint64_t *)(*(_QWORD *)(v33 + 56) + 16 * v34);
    v37 = *v36;
    *(_QWORD *)(v0 + 440) = *v36;
    *(_QWORD *)(v0 + 448) = v36[1];
    v38 = swift_unknownObjectRetain(v37);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v55[0] = v42;
      *(_DWORD *)v41 = 136315138;
      v43 = sub_100079DE8(v54);
      v45 = v44;
      *(_QWORD *)(v0 + 240) = sub_1000230D0(v43, v44, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v53, v41 + 4, v41 + 12);
      swift_bridgeObjectRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "next state: %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }

    v46 = swift_task_alloc(dword_1001288EC);
    *(_QWORD *)(v0 + 456) = v46;
    *(_QWORD *)v46 = v0;
    *(_QWORD *)(v46 + 8) = sub_1000805A8;
    v47 = *(_QWORD *)(v0 + 312);
    *(_QWORD *)(v46 + 104) = v47;
    *(_BYTE *)(v46 + 168) = v54;
    return swift_task_switch(sub_10007B3B8, v47, 0);
  }
  else
  {
    swift_unknownObjectRelease(v10);
    v55[0] = 0;
    v55[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    *(_QWORD *)(v0 + 208) = 0;
    v49 = v0 + 208;
    *(_QWORD *)(v49 + 8) = 0xE000000000000000;
    v50._countAndFlagsBits = 0xD00000000000001ALL;
    v50._object = (void *)0x80000001000E3F80;
    String.append(_:)(v50);
    *(_BYTE *)(v49 + 259) = v54;
    _print_unlocked<A, B>(_:_:)(v49 + 259, v49, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)v49, *(_QWORD *)(v49 + 8), "swtransparencyd/SWTStateMachine.swift", 37, 2, 515, 0);
  }
}

uint64_t sub_10007FF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 408);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  swift_release(v1);
  return swift_task_switch(sub_10007FFC8, v2, 0);
}

uint64_t sub_10007FFC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 368);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 344));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100080010(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_BYTE *)(*(_QWORD *)v1 + 468) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100080070, v3, 0);
}

uint64_t sub_100080070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  os_log_type_t type;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51[2];

  if (*(_BYTE *)(v0 + 468) == 10)
  {
    v1 = *(_QWORD *)(v0 + 368);
    v2 = *(_QWORD *)(v0 + 312);
    swift_unknownObjectRelease(*(_QWORD *)(v0 + 344));
    swift_release(v1);
    *(_BYTE *)(v2 + 176) = 3;
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = v0 + 248;
    *(_BYTE *)(*(_QWORD *)(v0 + 312) + 176) = 1;
    v5 = *(_BYTE *)(v0 + 468);
    v6 = *(_QWORD *)(v0 + 344);
    *(_QWORD *)(v0 + 432) = v6;
    v7 = swift_retain_n(*(_QWORD *)(v0 + 312), 4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 312);
    if (v10)
    {
      v50 = v5;
      v12 = swift_slowAlloc(32, -1);
      v48 = swift_slowAlloc(96, -1);
      *(_QWORD *)(v0 + 248) = v48;
      *(_DWORD *)v12 = 136315650;
      v13 = 8 * *(char *)(v11 + 176);
      v14 = *(_QWORD *)&aShutdown_2[v13 + 8];
      type = v9;
      v15 = *(_QWORD *)(v0 + 312);
      *(_QWORD *)(v0 + 256) = sub_1000230D0(*(_QWORD *)&aStopped_1[v13], v14, (uint64_t *)(v0 + 248));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease(v14);
      swift_release_n(v15, 2);
      *(_WORD *)(v12 + 12) = 2080;
      v16 = *(_QWORD *)(v15 + 144);
      v17 = *(_QWORD *)(v15 + 152);
      ObjectType = swift_getObjectType(v16);
      v49 = v6;
      v19 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 16);
      swift_unknownObjectRetain(v16);
      v20 = v17;
      v5 = v50;
      LOBYTE(ObjectType) = v19(ObjectType, v20);
      swift_unknownObjectRelease(v16);
      v21 = ObjectType;
      v4 = v0 + 248;
      v22 = sub_100079DE8(v21);
      v24 = v23;
      *(_QWORD *)(v0 + 264) = sub_1000230D0(v22, v23, (uint64_t *)(v0 + 248));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease(v24);
      swift_release_n(v15, 2);
      *(_WORD *)(v12 + 22) = 2080;
      v25 = sub_100079DE8(v50);
      v27 = v26;
      *(_QWORD *)(v0 + 272) = sub_1000230D0(v25, v26, (uint64_t *)(v0 + 248));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v12 + 24, v12 + 32);
      v28 = v27;
      v6 = v49;
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v8, type, "SM: %s transition from %s to %s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v48, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_release_n(v11, 4);
    }
    v29 = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 120);
    if (*(_QWORD *)(v29 + 16) && (v30 = sub_10002559C(v5), (v31 & 1) != 0))
    {
      v32 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 16 * v30);
      v33 = *v32;
      *(_QWORD *)(v0 + 440) = *v32;
      *(_QWORD *)(v0 + 448) = v32[1];
      v34 = swift_unknownObjectRetain(v33);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = swift_slowAlloc(32, -1);
        v51[0] = v38;
        *(_DWORD *)v37 = 136315138;
        v39 = sub_100079DE8(v5);
        v40 = v4;
        v42 = v41;
        *(_QWORD *)(v0 + 240) = sub_1000230D0(v39, v41, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v40, v37 + 4, v37 + 12);
        swift_bridgeObjectRelease(v42);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "next state: %s", v37, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }

      v43 = swift_task_alloc(dword_1001288EC);
      *(_QWORD *)(v0 + 456) = v43;
      *(_QWORD *)v43 = v0;
      *(_QWORD *)(v43 + 8) = sub_1000805A8;
      v44 = *(_QWORD *)(v0 + 312);
      *(_QWORD *)(v43 + 104) = v44;
      *(_BYTE *)(v43 + 168) = v5;
      return swift_task_switch(sub_10007B3B8, v44, 0);
    }
    else
    {
      swift_unknownObjectRelease(v6);
      v51[0] = 0;
      v51[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      *(_QWORD *)(v0 + 208) = 0;
      v45 = v0 + 208;
      *(_QWORD *)(v45 + 8) = 0xE000000000000000;
      v46._object = (void *)0x80000001000E3F80;
      v46._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v46);
      *(_BYTE *)(v45 + 259) = v5;
      _print_unlocked<A, B>(_:_:)(v45 + 259, v45, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)v45, *(_QWORD *)(v45 + 8), "swtransparencyd/SWTStateMachine.swift", 37, 2, 515, 0);
    }
  }
}

uint64_t sub_1000805A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 456));
  return swift_task_switch(sub_100080600, v1, 0);
}

uint64_t sub_100080600()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v4 + 144);
  v6 = *(_OWORD *)(v0 + 440);
  *(_OWORD *)(v4 + 144) = v6;
  v7 = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v5);
  swift_unknownObjectRetain(v1);
  swift_release(v3);
  sub_10008A414(v2);
  swift_unknownObjectRelease(v7);
  swift_unknownObjectRelease(v1);
  v8 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD **)(v0 + 312);
  *(_QWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 232) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 232);
  v10._countAndFlagsBits = 0x63614D6574617453;
  v10._object = (void *)0xEE00203A656E6968;
  String.append(_:)(v10);
  v11 = v9[18];
  v12 = v9[19];
  ObjectType = swift_getObjectType(v11);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  swift_unknownObjectRetain(v11);
  LOBYTE(v12) = v14(ObjectType, v12);
  swift_unknownObjectRelease(v11);
  *(_BYTE *)(v0 + 465) = v12;
  _print_unlocked<A, B>(_:_:)(v0 + 465, v0 + 176, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v15 = *(_QWORD *)(v0 + 184);
  v16 = String.utf8CString.getter(*(_QWORD *)(v0 + 176), v15);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(v0 + 344) = os_transaction_create(v16 + 32);
  swift_unknownObjectRelease(v8);
  swift_release(v16);
  v17 = v9[18];
  v18 = v9[19];
  v19 = swift_getObjectType(v17);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 16);
  swift_unknownObjectRetain(v17);
  v21 = v20(v19, v18);
  swift_unknownObjectRelease(v17);
  swift_beginAccess(v9 + 16, v0 + 112, 32, 0);
  v22 = v9[16];
  if (*(_QWORD *)(v22 + 16) && (v23 = sub_10002559C(v21), (v24 & 1) != 0))
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
    *(_QWORD *)(v0 + 352) = v25;
    swift_endAccess(v0 + 112);
    v26 = *(int **)(*(_QWORD *)v25 + 168);
    v27 = v26[1];
    v50 = (uint64_t (*)(void))((char *)v26 + *v26);
    swift_retain(v25);
    v28 = (_QWORD *)swift_task_alloc(v27);
    *(_QWORD *)(v0 + 360) = v28;
    *v28 = v0;
    v28[1] = sub_10007EF28;
    return v50();
  }
  else
  {
    swift_endAccess(v0 + 112);
    v30 = swift_retain_n(*(_QWORD *)(v0 + 312), 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 312);
    if (v33)
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = swift_slowAlloc(32, -1);
      v52 = v51;
      *(_DWORD *)v35 = 136315138;
      v36 = *(_QWORD *)(v34 + 144);
      v37 = *(_QWORD *)(v34 + 152);
      v38 = swift_getObjectType(v36);
      v39 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 16);
      swift_unknownObjectRetain(v36);
      LOBYTE(v38) = v39(v38, v37);
      swift_unknownObjectRelease(v36);
      v40 = sub_100079DE8(v38);
      v42 = v41;
      *(_QWORD *)(v0 + 280) = sub_1000230D0(v40, v41, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v42);
      swift_release_n(v34, 2);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "SM: activating state %s", v35, 0xCu);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

      swift_release_n(v34, 2);
    }
    v43 = *(_QWORD *)(v0 + 320);
    v44 = *(_QWORD *)(v0 + 328);
    v45 = *(_QWORD *)(v0 + 312);
    v46 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v43, 1, 1, v46);
    v47 = (_QWORD *)swift_allocObject(&unk_10010A8B0, 40, 7);
    v47[2] = v45;
    v47[3] = v44;
    v47[4] = v45;
    swift_retain_n(v45, 2);
    v48 = sub_10007DCD0(v43, (uint64_t)&unk_100128E48, (uint64_t)v47, (uint64_t)&unk_10010A8D8, (uint64_t)&type metadata for SWTStateMachine.SMTransition, (uint64_t)&unk_100128E68);
    *(_QWORD *)(v0 + 368) = v48;
    v49 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
    *(_QWORD *)(v0 + 376) = v49;
    *v49 = v0;
    v49[1] = sub_10007F200;
    return Task<>.value.getter(v0 + 296, v48, &type metadata for SWTStateMachine.SMTransition);
  }
}

uint64_t sub_100080AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v69;
  uint64_t v70;
  Swift::String v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  os_log_type_t type;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;

  v75 = (uint64_t *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 312);
  swift_retain(v2);
  swift_errorRetain(v1);
  swift_retain(v2);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v73 = *(_QWORD *)(v0 + 400);
    v6 = *(_QWORD *)(v0 + 312);
    v7 = swift_slowAlloc(22, -1);
    v72 = (uint64_t *)swift_slowAlloc(8, -1);
    v74 = swift_slowAlloc(32, -1);
    v79 = v74;
    *(_DWORD *)v7 = 136315394;
    v8 = *(_QWORD *)(v6 + 144);
    v9 = *(_QWORD *)(v6 + 152);
    ObjectType = swift_getObjectType(v8);
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
    swift_unknownObjectRetain(v8);
    LOBYTE(v9) = v11(ObjectType, v9);
    swift_unknownObjectRelease(v8);
    v12 = sub_100079DE8(v9);
    v14 = v13;
    *(_QWORD *)(v0 + 304) = sub_1000230D0(v12, v13, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v14);
    swift_release_n(v6, 2);
    *(_WORD *)(v7 + 12) = 2112;
    swift_errorRetain(v73);
    v15 = _swift_stdlib_bridgeErrorToNSError(v73);
    *(_QWORD *)(v0 + 288) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v7 + 14, v7 + 22);
    *v72 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SM: state %s threw exception: %@", (uint8_t *)v7, 0x16u);
    v16 = sub_10001D138(&qword_100127730);
    swift_arrayDestroy(v72, 1, v16);
    swift_slowDealloc(v72, -1, -1);
    swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v7, -1, -1);
    swift_errorRelease();

  }
  else
  {
    v17 = *(_QWORD *)(v0 + 312);
    swift_errorRelease();

    swift_release_n(v17, 2);
    swift_errorRelease();
    swift_errorRelease();
  }
  v18 = *(_QWORD *)(v0 + 312);
  v19 = *(_BYTE *)(v18 + 136);
  v20 = *(_QWORD *)(v0 + 384);
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  v21 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 200) = v21;
  v22._object = (void *)0x80000001000E4180;
  v22._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v22);
  v23 = *(_QWORD *)(v18 + 144);
  v24 = *(_QWORD *)(v18 + 152);
  v25 = swift_getObjectType(v23);
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 16);
  swift_unknownObjectRetain(v23);
  LOBYTE(v24) = v26(v25, v24);
  swift_unknownObjectRelease(v23);
  *(_BYTE *)(v0 + 464) = v24;
  _print_unlocked<A, B>(_:_:)(v0 + 464, v0 + 192, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v27 = *(_QWORD *)(v0 + 200);
  v28 = String.utf8CString.getter(*(_QWORD *)(v0 + 192), v27);
  swift_bridgeObjectRelease(v27);
  v29 = os_transaction_create(v28 + 32);
  sub_10008A414(v20);
  swift_release(v28);
  v30 = *(_QWORD *)(v18 + 160);
  *(_QWORD *)(v18 + 160) = 0;
  swift_release(v30);
  *(_QWORD *)(v0 + 432) = v29;
  v31 = swift_retain_n(*(_QWORD *)(v0 + 312), 4);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  v34 = os_log_type_enabled(v32, v33);
  v35 = *(_QWORD *)(v0 + 312);
  if (v34)
  {
    type = v33;
    v36 = swift_slowAlloc(32, -1);
    v76 = swift_slowAlloc(96, -1);
    *(_QWORD *)(v0 + 248) = v76;
    *(_DWORD *)v36 = 136315650;
    v37 = 8 * *(char *)(v35 + 176);
    v38 = *(_QWORD *)&aShutdown_2[v37 + 8];
    v78 = v29;
    v39 = *(_QWORD *)(v0 + 312);
    *(_QWORD *)(v0 + 256) = sub_1000230D0(*(_QWORD *)&aStopped_1[v37], v38, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v38);
    swift_release_n(v39, 2);
    *(_WORD *)(v36 + 12) = 2080;
    v40 = *(_QWORD *)(v39 + 144);
    v41 = *(_QWORD *)(v39 + 152);
    v42 = v19;
    v43 = swift_getObjectType(v40);
    v44 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 16);
    swift_unknownObjectRetain(v40);
    v45 = v43;
    v19 = v42;
    LOBYTE(v41) = v44(v45, v41);
    swift_unknownObjectRelease(v40);
    v46 = sub_100079DE8(v41);
    v48 = v47;
    *(_QWORD *)(v0 + 264) = sub_1000230D0(v46, v47, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease(v48);
    v49 = v39;
    v29 = v78;
    swift_release_n(v49, 2);
    *(_WORD *)(v36 + 22) = 2080;
    v50 = sub_100079DE8(v42);
    v52 = v51;
    *(_QWORD *)(v0 + 272) = sub_1000230D0(v50, v51, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v36 + 24, v36 + 32);
    swift_bridgeObjectRelease(v52);
    _os_log_impl((void *)&_mh_execute_header, v32, type, "SM: %s transition from %s to %s", (uint8_t *)v36, 0x20u);
    swift_arrayDestroy(v76, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

    swift_release_n(v35, 4);
  }
  v53 = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 120);
  if (*(_QWORD *)(v53 + 16) && (v54 = sub_10002559C(v19), (v55 & 1) != 0))
  {
    v56 = (uint64_t *)(*(_QWORD *)(v53 + 56) + 16 * v54);
    v57 = *v56;
    *(_QWORD *)(v0 + 440) = *v56;
    *(_QWORD *)(v0 + 448) = v56[1];
    v58 = swift_unknownObjectRetain(v57);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = swift_slowAlloc(32, -1);
      v79 = v62;
      *(_DWORD *)v61 = 136315138;
      v63 = sub_100079DE8(v19);
      v65 = v64;
      *(_QWORD *)(v0 + 240) = sub_1000230D0(v63, v64, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v75, v61 + 4, v61 + 12);
      swift_bridgeObjectRelease(v65);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "next state: %s", v61, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }

    v66 = swift_task_alloc(dword_1001288EC);
    *(_QWORD *)(v0 + 456) = v66;
    *(_QWORD *)v66 = v0;
    *(_QWORD *)(v66 + 8) = sub_1000805A8;
    v67 = *(_QWORD *)(v0 + 312);
    *(_QWORD *)(v66 + 104) = v67;
    *(_BYTE *)(v66 + 168) = v19;
    return swift_task_switch(sub_10007B3B8, v67, 0);
  }
  else
  {
    swift_unknownObjectRelease(v29);
    v79 = 0;
    v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v69 = v80;
    *(_QWORD *)(v0 + 208) = v79;
    v70 = v0 + 208;
    *(_QWORD *)(v70 + 8) = v69;
    v71._countAndFlagsBits = 0xD00000000000001ALL;
    v71._object = (void *)0x80000001000E3F80;
    String.append(_:)(v71);
    *(_BYTE *)(v70 + 259) = v19;
    _print_unlocked<A, B>(_:_:)(v70 + 259, v70, &type metadata for SMState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)v70, *(_QWORD *)(v70 + 8), "swtransparencyd/SWTStateMachine.swift", 37, 2, 515, 0);
  }
}

uint64_t sub_1000812C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 v19;
  _QWORD v21[4];

  v6 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002AC5C(a1, (uint64_t)v8, &qword_100127220);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000202F0((uint64_t)v8, &qword_100127220);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
    {
LABEL_6:
      v18 = 0;
      return swift_task_create(v11, v18, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v19 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
      goto LABEL_6;
  }
  v13 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v12);
  swift_unknownObjectRetain(v12);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
  v17 = v16;
  swift_unknownObjectRelease(v12);
  if (!(v17 | v15))
    goto LABEL_6;
  v21[0] = 0;
  v21[1] = 0;
  v18 = v21;
  v21[2] = v15;
  v21[3] = v17;
  return swift_task_create(v11, v18, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_100081448()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch(sub_100081460, v0, 0);
}

uint64_t sub_100081460()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[5] + 112);
  v0[6] = v1;
  v0[7] = *(_QWORD *)(*(_QWORD *)v1 + 208);
  return swift_task_switch(sub_100081488, v1, 0);
}

uint64_t sub_100081488()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 64) = (*(uint64_t (**)(void))(v0 + 56))();
  return swift_task_switch(sub_1000814CC, v1, 0);
}

uint64_t sub_1000814CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  swift_beginAccess(v2 + 144, v0 + 16, 0, 0);
  v3 = *(_QWORD *)(v2 + 144);
  v4 = *(_QWORD *)(v2 + 152);
  ObjectType = swift_getObjectType(v3);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 24);
  swift_unknownObjectRetain(v3);
  v7 = v6(ObjectType, v4);
  swift_unknownObjectRelease(v3);
  v8 = sub_10008A9FC(v7, v1);
  *(_QWORD *)(v0 + 72) = v8;
  swift_bridgeObjectRelease(v1);
  v9 = *(_BYTE *)(v8 + 32);
  *(_BYTE *)(v0 + 120) = v9;
  v10 = -1;
  v11 = -1 << v9;
  if (-v11 < 64)
    v10 = ~(-1 << -(char)v11);
  v12 = v10 & *(_QWORD *)(v8 + 56);
  if (v12)
  {
    v13 = 0;
    v14 = __clz(__rbit64(v12));
    v15 = (v12 - 1) & v12;
    v16 = *(_QWORD **)(v0 + 72);
LABEL_5:
    *(_QWORD *)(v0 + 80) = v13;
    *(_QWORD *)(v0 + 88) = v15;
    v17 = *(_QWORD *)(v0 + 40);
    v18 = *(unsigned __int8 *)(v16[6] + v14);
    *(_BYTE *)(v0 + 121) = v18;
    v19 = *(_QWORD *)(v17 + 144);
    *(_QWORD *)(v0 + 96) = v19;
    v20 = *(_QWORD *)(v17 + 152);
    v21 = swift_getObjectType(v19);
    v22 = *(int **)(v20 + 32);
    v23 = v22[1];
    v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v22 + *v22);
    swift_unknownObjectRetain(v19);
    v24 = (_QWORD *)swift_task_alloc(v23);
    *(_QWORD *)(v0 + 104) = v24;
    *v24 = v0;
    v24[1] = sub_100081708;
    return v31(v18, v21, v20);
  }
  v26 = 63 - v11;
  v16 = *(_QWORD **)(v0 + 72);
  if (v26 > 0x7F)
  {
    v27 = v16[8];
    if (v27)
    {
      v13 = 1;
LABEL_9:
      v15 = (v27 - 1) & v27;
      v14 = __clz(__rbit64(v27)) + (v13 << 6);
      goto LABEL_5;
    }
    if (v26 >= 0xC0)
    {
      v27 = v16[9];
      if (v27)
      {
        v13 = 2;
        goto LABEL_9;
      }
      if (v26 >= 0x100)
      {
        v27 = v16[10];
        if (v27)
        {
          v13 = 3;
          goto LABEL_9;
        }
        if (v26 >= 0x140)
        {
          v27 = v16[11];
          if (v27)
          {
            v13 = 4;
            goto LABEL_9;
          }
          v28 = 0;
          v29 = v26 >> 6;
          if (v29 <= 5)
            v29 = 5;
          v30 = v29 - 5;
          while (v30 != v28)
          {
            v27 = v16[v28++ + 12];
            if (v27)
            {
              v13 = v28 + 4;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
  swift_release(v16);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(10);
}

uint64_t sub_100081708(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_BYTE *)(*(_QWORD *)v1 + 122) = a1;
  swift_task_dealloc(v2);
  swift_unknownObjectRelease(v3);
  return swift_task_switch(sub_100081770, v4, 0);
}

void sub_100081770()
{
  uint64_t v0;
  int64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);

  if (*(_BYTE *)(v0 + 122) != 10)
  {
    v14 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 112) = *(_QWORD *)(*(_QWORD *)v14 + 192);
    swift_task_switch(sub_100081958, v14, 0);
    return;
  }
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  if (v2)
  {
    v3 = (v2 - 1) & v2;
    v4 = __clz(__rbit64(v2)) | (v1 << 6);
    v5 = *(_QWORD *)(v0 + 72);
LABEL_4:
    *(_QWORD *)(v0 + 80) = v1;
    *(_QWORD *)(v0 + 88) = v3;
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v4);
    *(_BYTE *)(v0 + 121) = v7;
    v8 = *(_QWORD *)(v6 + 144);
    *(_QWORD *)(v0 + 96) = v8;
    v9 = *(_QWORD *)(v6 + 152);
    ObjectType = swift_getObjectType(v8);
    v11 = *(int **)(v9 + 32);
    v12 = v11[1];
    v20 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
    swift_unknownObjectRetain(v8);
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 104) = v13;
    *v13 = v0;
    v13[1] = sub_100081708;
    v20(v7, ObjectType, v9);
    return;
  }
  v15 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    v16 = (unint64_t)((1 << *(_BYTE *)(v0 + 120)) + 63) >> 6;
    v5 = *(_QWORD *)(v0 + 72);
    if (v15 >= v16)
      goto LABEL_20;
    v17 = v5 + 56;
    v18 = *(_QWORD *)(v5 + 56 + 8 * v15);
    ++v1;
    if (v18)
    {
LABEL_9:
      v3 = (v18 - 1) & v18;
      v4 = __clz(__rbit64(v18)) + (v1 << 6);
      goto LABEL_4;
    }
    v1 = v15 + 1;
    if (v15 + 1 >= v16)
      goto LABEL_20;
    v18 = *(_QWORD *)(v17 + 8 * v1);
    if (v18)
      goto LABEL_9;
    v1 = v15 + 2;
    if (v15 + 2 >= v16)
      goto LABEL_20;
    v18 = *(_QWORD *)(v17 + 8 * v1);
    if (v18)
      goto LABEL_9;
    v19 = v15 + 3;
    if (v19 >= v16)
    {
LABEL_20:
      swift_release(v5);
      (*(void (**)(uint64_t))(v0 + 8))(10);
      return;
    }
    v18 = *(_QWORD *)(v17 + 8 * v19);
    if (v18)
    {
      v1 = v19;
      goto LABEL_9;
    }
    while (1)
    {
      v1 = v19 + 1;
      if (__OFADD__(v19, 1))
        break;
      if (v1 >= v16)
        goto LABEL_20;
      v18 = *(_QWORD *)(v17 + 8 * v1);
      ++v19;
      if (v18)
        goto LABEL_9;
    }
  }
  __break(1u);
}

uint64_t sub_100081958()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD))(v0 + 112))(*(unsigned __int8 *)(v0 + 121));
  return swift_task_switch(sub_10008199C, v1, 0);
}

uint64_t sub_10008199C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 122));
}

uint64_t sub_1000819D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a4;
  return swift_task_switch(sub_1000819E8, a4, 0);
}

uint64_t sub_1000819E8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[6];
  swift_beginAccess(v1 + 18, v0 + 2, 0, 0);
  v2 = v1[18];
  v0[7] = v2;
  v3 = v1[19];
  ObjectType = swift_getObjectType(v2);
  v5 = v1[14];
  v6 = *(int **)(v3 + 40);
  v7 = v6[1];
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
  swift_unknownObjectRetain(v2);
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[8] = v8;
  *v8 = v0;
  v8[1] = sub_100081A98;
  return v10(v5, ObjectType, v3);
}

uint64_t sub_100081A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc(v2);
  swift_unknownObjectRelease(v3);
  return swift_task_switch(sub_100081B00, v4, 0);
}

uint64_t sub_100081B00()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 40) = *(_QWORD *)(v0 + 72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100081B14()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _BYTE v3[24];

  result = swift_beginAccess(v0 + 160, v3, 0, 0);
  v2 = *(_QWORD *)(v0 + 160);
  if (v2)
  {
    swift_retain(*(_QWORD *)(v0 + 160));
    sub_10001D138(&qword_100127AE0);
    Task.cancel()();
    return swift_release(v2);
  }
  return result;
}

uint64_t sub_100081B88()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100081BA0, v0, 0);
}

uint64_t sub_100081BA0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[2] + 112);
  v0[3] = v1;
  v0[4] = *(_QWORD *)(*(_QWORD *)v1 + 208);
  return swift_task_switch(sub_100081BC8, v1, 0);
}

uint64_t sub_100081BC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(v0 + 32))();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

_QWORD *sub_100081BF8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  swift_unknownObjectRelease(v0[18]);
  swift_release(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[23]);
  v1 = (char *)v0 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000202F0((uint64_t)v0 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_networkMonitor, &qword_1001288B8);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100081CA4()
{
  uint64_t v0;

  sub_100081BF8();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100081CBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_1000202A4(&qword_100126EB8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_1000202A4(&qword_100126EC0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_1000254B4;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100081DDC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v6 = a4();
  v8 = v7;
  v9 = sub_1000230D0(v6, v7, a3);
  v10 = *a1;
  v11 = *a1 + 8;
  v13 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10, v11);
  result = swift_bridgeObjectRelease(v8);
  *a1 = v11;
  return result;
}

uint64_t sub_100081E4C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(_QWORD *);
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[9];
  uint64_t v33;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v33 = v9;
      v10 = type metadata accessor for ContinuationStore(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v32, &v33, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_1000828B8(v7, result + 1);
    v32[0] = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      swift_retain(a2);
      sub_100082CE8(v29);
      v25 = v32[0];
    }
    else
    {
      v25 = v23;
      swift_retain(a2);
    }
    sub_100083918(a2, v25);
    v30 = *v3;
    *v3 = v25;
    swift_bridgeObjectRelease(v30);
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
    v12 = *(void (**)(_QWORD *))(*(_QWORD *)a2 + 152);
    swift_bridgeObjectRetain(v6);
    v12(v32);
    v13 = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      v16 = a2 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
      v17 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v18 = v17 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
      swift_retain(v17);
      LOBYTE(v18) = static UUID.== infix(_:_:)(v18, v16);
      swift_release(v17);
      if ((v18 & 1) != 0)
      {
LABEL_12:
        swift_release(a2);
        swift_bridgeObjectRelease(v6);
        v22 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = v22;
        swift_retain(v22);
        return 0;
      }
      v19 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v19;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v20 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v21 = v20 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
        swift_retain(v20);
        LOBYTE(v21) = static UUID.== infix(_:_:)(v21, v16);
        swift_release(v20);
        if ((v21 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32[0] = *v3;
    *v3 = 0x8000000000000000;
    v27 = swift_retain(a2);
    sub_100083A90(v27, v15, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v32[0];
    swift_bridgeObjectRelease(v28);
    *a1 = a2;
  }
  return 1;
}

uint64_t type metadata accessor for SMSemaphore()
{
  return objc_opt_self(_TtC15swtransparencyd11SMSemaphore);
}

uint64_t sub_100082144(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v10 = v2[6];
  v9 = v2[7];
  v11 = (_QWORD *)swift_task_alloc(dword_100128894);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_10001E4EC;
  return sub_100077AE4((uint64_t)v11, a2, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1000821CC(char *a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v13;

  v4 = *v2;
  v5 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  sub_100078C90(v5, a2);
  v7 = v6 & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  v13 = *v11;
  *v11 = 0x8000000000000000;
  sub_100083C60(a2, v7, isUniquelyReferenced_nonNull_native);
  v9 = *v11;
  *v11 = v13;
  swift_bridgeObjectRelease(v9);
  result = 1;
  *a1 = a2;
  return result;
}

BOOL sub_100082528()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, *(_QWORD *)(*v0 + 40));
  Hasher._combine(_:)(0);
  v2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v1 + 32));
  v3 = (1 << v2) & *(_QWORD *)(v1 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8) + 56);
  if (!v3)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
    v7[0] = *v0;
    *v0 = 0x8000000000000000;
    sub_100083FF4(v2, isUniquelyReferenced_nonNull_native);
    v5 = *v0;
    *v0 = v7[0];
    swift_bridgeObjectRelease(v5);
  }
  return v3 == 0;
}

uint64_t sub_1000825E8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v32 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v30 = v9;
      v10 = type metadata accessor for TransitionWatcher(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v24 = sub_100082AC4(v7, result + 1);
    v31 = v24;
    v25 = *(_QWORD *)(v24 + 16);
    if (*(_QWORD *)(v24 + 24) <= v25)
    {
      v28 = v25 + 1;
      swift_retain(a2);
      sub_100083604(v28);
      v26 = v31;
    }
    else
    {
      v26 = v24;
      swift_retain(a2);
    }
    sub_1000839C0(a2, v26);
    v29 = *v3;
    *v3 = v26;
    swift_bridgeObjectRelease(v29);
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  v13 = type metadata accessor for TransitionWatcher(0);
  v14 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
  swift_bridgeObjectRetain(v6);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v32;
    v31 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain(v21);
    sub_1000840F0(v22, v17, isUniquelyReferenced_nonNull_native);
    v23 = *v2;
    *v2 = v31;
    swift_bridgeObjectRelease(v23);
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_1000202A4(&qword_100126D58, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB860);
  while (1)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v31, &v32, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  v27 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  *a1 = v27;
  swift_retain(v27);
  return 0;
}

Swift::Int sub_1000828B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_10001D138(&qword_100128EA8);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for ContinuationStore(0);
      do
      {
        v21[0] = v7;
        swift_dynamicCast(&v22, v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_100082CE8(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        Hasher.init(_seed:)(v21, *(_QWORD *)(v4 + 40));
        (*(void (**)(_QWORD *))(*(_QWORD *)v9 + 152))(v21);
        result = Hasher._finalize()();
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

uint64_t sub_100082AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    sub_10001D138(&qword_100128E30);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v25 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()();
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for TransitionWatcher(0);
      do
      {
        v23 = v7;
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v25;
        v18 = *(_QWORD *)(v25 + 16);
        if (*(_QWORD *)(v25 + 24) <= v18)
        {
          sub_100083604(v18 + 1);
          v4 = v25;
        }
        v9 = v24;
        v23 = v24;
        v10 = *(_QWORD *)(v4 + 40);
        v11 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
        result = dispatch thunk of Hashable._rawHashValue(seed:)(v10, v8, v11);
        v13 = v4 + 56;
        v14 = -1 << *(_BYTE *)(v4 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = 0;
          v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v21 = v16 == v20;
            if (v16 == v20)
              v16 = 0;
            v19 |= v21;
            v22 = *(_QWORD *)(v13 + 8 * v16);
          }
          while (v22 == -1);
          v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }
        *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()();
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_100082CE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001D138(&qword_100128EA8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v30;
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
      (*(void (**)(_QWORD *))(*(_QWORD *)v21 + 152))(v31);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100082FA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001D138(&qword_100128E58);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v17 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x100083374);
              }
              if (v12 >= v9)
                break;
              v11 = v17[v12];
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v15 = 1 << *(_BYTE *)(v3 + 32);
  if (v15 > 63)
    bzero(v17, ((unint64_t)(v15 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v17 = -1 << v15;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release(v3);
  *v2 = v5;
  return result;
}

Swift::Int sub_100083390(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int *v25;
  Swift::Int v26;
  uint64_t v27[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001D138(&qword_100128EA0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v25 = v2;
    v26 = v3;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (!v11)
      {
        v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v15 >= v12)
          goto LABEL_34;
        v11 = v8[v15];
        ++v7;
        if (!v11)
        {
          v7 = v15 + 1;
          if (v15 + 1 >= v12)
            goto LABEL_34;
          v11 = v8[v7];
          if (!v11)
          {
            v7 = v15 + 2;
            if (v15 + 2 >= v12)
              goto LABEL_34;
            v11 = v8[v7];
            if (!v11)
            {
              v16 = v15 + 3;
              if (v16 >= v12)
              {
LABEL_34:
                v3 = v26;
                v24 = 1 << *(_BYTE *)(v26 + 32);
                if (v24 > 63)
                  bzero(v8, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v24;
                v2 = v25;
                *(_QWORD *)(v26 + 16) = 0;
                break;
              }
              v11 = v8[v16];
              if (!v11)
              {
                while (1)
                {
                  v7 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_40;
                  if (v7 >= v12)
                    goto LABEL_34;
                  v11 = v8[v7];
                  ++v16;
                  if (v11)
                    goto LABEL_25;
                }
              }
              v7 = v16;
            }
          }
        }
      }
LABEL_25:
      Hasher.init(_seed:)(v27, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(0);
      result = Hasher._finalize()();
      v17 = -1 << *(_BYTE *)(v6 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v22 = v19 == v21;
          if (v19 == v21)
            v19 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v13 + 8 * v19);
        }
        while (v23 == -1);
        v14 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      v11 &= v11 - 1;
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100083604(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001D138(&qword_100128E30);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v31 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v31)
          goto LABEL_36;
        v17 = v32[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v31)
            goto LABEL_36;
          v17 = v32[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v31)
              goto LABEL_36;
            v17 = v32[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v31)
              {
LABEL_36:
                swift_release(v3);
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v32[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v31)
                    goto LABEL_36;
                  v17 = v32[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      v20 = *(_QWORD *)(v6 + 40);
      v21 = type metadata accessor for TransitionWatcher(0);
      v22 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
      result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v10 + 8 * v25);
        }
        while (v29 == -1);
        v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t sub_100083918(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, *(_QWORD *)(a2 + 40));
  (*(void (**)(_QWORD *))(*(_QWORD *)a1 + 152))(v6);
  v4 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1000839C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = type metadata accessor for TransitionWatcher(0);
  v6 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_100083A90(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[9];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100082CE8(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_10008459C(&qword_100128EA8);
      goto LABEL_14;
    }
    sub_10008473C(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v23, *(_QWORD *)(*v3 + 40));
  (*(void (**)(_QWORD *))(*(_QWORD *)v6 + 152))(v23);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v22 = type metadata accessor for ContinuationStore(0);
    v12 = v6 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v14 = v13 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
    swift_retain(v13);
    LOBYTE(v14) = static UUID.== infix(_:_:)(v14, v12);
    result = swift_release(v13);
    if ((v14 & 1) != 0)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v16 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v17 = v16 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
        swift_retain(v16);
        LOBYTE(v17) = static UUID.== infix(_:_:)(v17, v12);
        result = swift_release(v16);
        if ((v17 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * a2) = v6;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v21;
  return result;
}

void sub_100083C60(char a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100082FA8(v8);
    }
    else
    {
      if (v7 > v6)
      {
        sub_1000842B0();
        goto LABEL_10;
      }
      sub_1000849E4(v8);
    }
    v9 = *v3;
    sub_100078C90(*(_QWORD *)(*v3 + 40), a1);
    a2 = v10 & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v11 = *v15;
  *(_QWORD *)(*v15 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v11 + 48) + a2) = v16;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
    JUMPOUT(0x100083F9CLL);
  }
  *(_QWORD *)(v11 + 16) = v14;
}

uint64_t sub_100083FF4(uint64_t result, char a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[9];

  v3 = result;
  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *(_QWORD *)(*v2 + 24);
  if (v5 <= v4 || (a2 & 1) == 0)
  {
    v6 = v4 + 1;
    if ((a2 & 1) != 0)
    {
      sub_100083390(v6);
      goto LABEL_8;
    }
    if (v5 <= v4)
    {
      sub_100084D94(v6);
LABEL_8:
      v7 = *v2;
      Hasher.init(_seed:)(v12, *(_QWORD *)(*v2 + 40));
      Hasher._combine(_:)(0);
      result = Hasher._finalize()();
      v3 = result & ~(-1 << *(_BYTE *)(v7 + 32));
      if (((*(_QWORD *)(v7 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v3) & 1) != 0)
        goto LABEL_12;
      goto LABEL_9;
    }
    result = (uint64_t)sub_100084440();
  }
LABEL_9:
  v8 = *v2;
  *(_QWORD *)(*v2 + 8 * (v3 >> 6) + 56) |= 1 << v3;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (!v10)
  {
    *(_QWORD *)(v8 + 16) = v11;
    return result;
  }
  __break(1u);
LABEL_12:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for StateMachineEvents.WaitType);
  __break(1u);
  return result;
}

uint64_t sub_1000840F0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = result;
  v21 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100083604(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_10008459C(&qword_100128E30);
      goto LABEL_12;
    }
    sub_100084FD4(v9);
  }
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v4 = type metadata accessor for TransitionWatcher(0);
  v12 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
  result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  v13 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v14 = ~v13;
    v15 = sub_1000202A4(&qword_100126D58, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB860);
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      result = dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v4, v15);
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v14;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = v6;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v16 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
  return result;
}

void *sub_1000842B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10001D138(&qword_100128E58);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100084440()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;

  v1 = v0;
  sub_10001D138(&qword_100128EA0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 16);
  if (!v5)
  {
LABEL_27:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v7 = v2 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v8)
  {
    result = memmove(result, (const void *)(v2 + 56), 8 * v8);
    v5 = *(_QWORD *)(v2 + 16);
  }
  v10 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (!v13)
    {
      v15 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v15 >= v14)
        goto LABEL_27;
      v13 = *(_QWORD *)(v7 + 8 * v15);
      ++v10;
      if (!v13)
      {
        v10 = v15 + 1;
        if (v15 + 1 >= v14)
          goto LABEL_27;
        v13 = *(_QWORD *)(v7 + 8 * v10);
        if (!v13)
        {
          v10 = v15 + 2;
          if (v15 + 2 >= v14)
            goto LABEL_27;
          v13 = *(_QWORD *)(v7 + 8 * v10);
          if (!v13)
            break;
        }
      }
    }
LABEL_12:
    v13 &= v13 - 1;
  }
  v16 = v15 + 3;
  if (v16 >= v14)
    goto LABEL_27;
  v13 = *(_QWORD *)(v7 + 8 * v16);
  if (v13)
  {
    v10 = v16;
    goto LABEL_12;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v14)
      goto LABEL_27;
    v13 = *(_QWORD *)(v7 + 8 * v10);
    ++v16;
    if (v13)
      goto LABEL_12;
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_10008459C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_10001D138(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = (void *)swift_retain(v18);
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_10008473C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  int64_t v30;
  _QWORD v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001D138(&qword_100128EA8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v29 = v2;
  v30 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v30)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v30)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v30)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
    v21 = *(void (**)(_QWORD *))(*(_QWORD *)v20 + 152);
    swift_retain(v20);
    v21(v31);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v24);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v30)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v29;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v30)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000849E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001D138(&qword_100128E58);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_26;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v15 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v15 > 1)
  {
    v10 = *(_QWORD *)(v3 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_22;
    v11 = 2;
    if (v15 > 2)
    {
      v10 = *(_QWORD *)(v3 + 72);
      if (v10)
        goto LABEL_22;
      v11 = 3;
      if (v15 > 3)
      {
        v10 = *(_QWORD *)(v3 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v15 > 4)
          {
            v10 = *(_QWORD *)(v3 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x100084D78);
              }
              if (v11 >= v15)
                break;
              v10 = *(_QWORD *)(v3 + 56 + 8 * v11);
              ++v12;
              if (v10)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v9);
        Hasher.init(_seed:)(v16, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  result = swift_release_n(v3, 2);
LABEL_26:
  *v2 = v5;
  return result;
}

Swift::Int sub_100084D94(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int *v25;
  uint64_t v26[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001D138(&qword_100128EA0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_36:
    *v2 = v6;
    return result;
  }
  v24 = v3;
  v25 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (!v11)
    {
      v15 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      if (v15 >= v12)
        goto LABEL_34;
      v11 = *(_QWORD *)(v8 + 8 * v15);
      ++v7;
      if (!v11)
      {
        v7 = v15 + 1;
        if (v15 + 1 >= v12)
          goto LABEL_34;
        v11 = *(_QWORD *)(v8 + 8 * v7);
        if (!v11)
        {
          v7 = v15 + 2;
          if (v15 + 2 >= v12)
            goto LABEL_34;
          v11 = *(_QWORD *)(v8 + 8 * v7);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    Hasher.init(_seed:)(v26, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(0);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v6 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v22 = v19 == v21;
        if (v19 == v21)
          v19 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)(v13 + 8 * v19);
      }
      while (v23 == -1);
      v14 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    v11 &= v11 - 1;
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    ++*(_QWORD *)(v6 + 16);
  }
  v16 = v15 + 3;
  if (v16 >= v12)
  {
LABEL_34:
    result = swift_release(v24);
    v2 = v25;
    goto LABEL_36;
  }
  v11 = *(_QWORD *)(v8 + 8 * v16);
  if (v11)
  {
    v7 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v7 >= v12)
      goto LABEL_34;
    v11 = *(_QWORD *)(v8 + 8 * v7);
    ++v16;
    if (v11)
      goto LABEL_25;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100084FD4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001D138(&qword_100128E30);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v30 = v2;
  v31 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v32)
      goto LABEL_36;
    v17 = *(_QWORD *)(v31 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_36;
      v17 = *(_QWORD *)(v31 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_36;
        v17 = *(_QWORD *)(v31 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    v20 = *(_QWORD *)(v6 + 40);
    v21 = type metadata accessor for TransitionWatcher(0);
    v22 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
    swift_retain(v19);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v10 + 8 * v25);
      }
      while (v29 == -1);
      v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v31 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v17 = *(_QWORD *)(v31 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000852BC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void (*v9)(_QWORD *);
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[9];

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v1;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = swift_retain(a1);
    v7 = __CocoaSet.contains(_:)(v6, v5);
    swift_release(a1);
    if ((v7 & 1) != 0)
    {
      v8 = sub_100085A0C(v5, a1);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  Hasher.init(_seed:)(v23, *(_QWORD *)(v4 + 40));
  v9 = *(void (**)(_QWORD *))(*(_QWORD *)a1 + 152);
  swift_bridgeObjectRetain(v4);
  v9(v23);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    goto LABEL_15;
  v13 = a1 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
  v14 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12);
  v15 = v14 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
  swift_retain(v14);
  LOBYTE(v15) = static UUID.== infix(_:_:)(v15, v13);
  swift_release(v14);
  if ((v15 & 1) == 0)
  {
    v16 = ~v11;
    do
    {
      v12 = (v12 + 1) & v16;
      if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      v17 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12);
      v18 = v17 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
      swift_retain(v17);
      LOBYTE(v18) = static UUID.== infix(_:_:)(v18, v13);
      swift_release(v17);
    }
    while ((v18 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v20 = *v2;
  v23[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10008459C(&qword_100128EA8);
    v20 = v23[0];
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v12);
  sub_100085D7C(v12);
  v21 = *v2;
  *v2 = v23[0];
  swift_bridgeObjectRelease(v21);
  return v8;
}

uint64_t sub_1000854C0(char a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 40);
  swift_bridgeObjectRetain(*v1);
  sub_100078C90(v4, a1);
  v6 = v5 & ~(-1 << *(_BYTE *)(v3 + 32));
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v3);
  return 7;
}

uint64_t sub_100085810(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a1;
  v2 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v4 = v2;
    else
      v4 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v5 = swift_retain(a1);
    v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release(a1);
    if ((v6 & 1) != 0)
    {
      v7 = sub_100085BC4(v4, a1);
      swift_bridgeObjectRelease(v2);
      return v7;
    }
LABEL_11:
    swift_bridgeObjectRelease(v2);
    return 0;
  }
  v8 = *(_QWORD *)(v2 + 40);
  v9 = type metadata accessor for TransitionWatcher(0);
  v10 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
  swift_bridgeObjectRetain(v2);
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  v12 = -1 << *(_BYTE *)(v2 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
    goto LABEL_11;
  v14 = ~v12;
  v15 = sub_1000202A4(&qword_100126D58, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB860);
  while (1)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v9, v15) & 1) != 0)
      break;
    v13 = (v13 + 1) & v14;
    if (((*(_QWORD *)(v2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease(v2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v18 = *v1;
  v20 = *v1;
  *v1 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10008459C(&qword_100128E30);
    v18 = v20;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * v13);
  sub_10008620C(v13);
  v19 = *v1;
  *v1 = v20;
  swift_bridgeObjectRelease(v19);
  return v7;
}

uint64_t sub_100085A0C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  void (*v9)(_QWORD *);
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[9];
  Swift::Int v21;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_1000828B8(v7, v6);
  v21 = v8;
  Hasher.init(_seed:)(v20, *(_QWORD *)(v8 + 40));
  v9 = *(void (**)(_QWORD *))(*(_QWORD *)a2 + 152);
  swift_retain(v8);
  v9(v20);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = a2 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
    v14 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v15 = v14 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
    swift_retain(v14);
    LOBYTE(v15) = static UUID.== infix(_:_:)(v15, v13);
    swift_release(v14);
    if ((v15 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_100085D7C(v12);
      if ((static UUID.== infix(_:_:)(v13, v8 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id) & 1) != 0)
      {
        *v3 = v21;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v16 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v16;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v17 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v18 = v17 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
        swift_retain(v17);
        LOBYTE(v18) = static UUID.== infix(_:_:)(v18, v13);
        swift_release(v17);
        if ((v18 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_100085BC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v19 = a2;
  swift_bridgeObjectRelease(*v3);
  v5 = __CocoaSet.count.getter(a1);
  v6 = swift_unknownObjectRetain(a1);
  v7 = sub_100082AC4(v6, v5);
  v18 = v7;
  v8 = *(_QWORD *)(v7 + 40);
  v9 = type metadata accessor for TransitionWatcher(0);
  v10 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
  swift_retain(v7);
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  v12 = -1 << *(_BYTE *)(v7 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = sub_1000202A4(&qword_100126D58, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB860);
    while (1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v17, &v19, v9, v15) & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_release(v7);
        __break(1u);
        break;
      }
    }
    swift_release(v7);
    v7 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13);
    v17 = v7;
    sub_10008620C(v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v17, v9, v15) & 1) != 0)
    {
      *v3 = v18;
      return v7;
    }
    __break(1u);
  }
  result = swift_release(v7);
  __break(1u);
  return result;
}

unint64_t sub_100085D7C(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *);
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v20, *(_QWORD *)(v3 + 40));
        v11 = *(void (**)(_QWORD *))(*(_QWORD *)v10 + 152);
        swift_retain(v10);
        v11(v20);
        v12 = Hasher._finalize()();
        swift_release(v10);
        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 < v9)
            goto LABEL_5;
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(v3 + 48);
          v15 = (_QWORD *)(v14 + 8 * v2);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v17 = *(_QWORD *)(v3 + 16);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_100085F48(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6);
      Hasher.init(_seed:)(v12, *(_QWORD *)(v3 + 40));
      __asm { BR              X8 }
    }
    *(_QWORD *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = __OFSUB__(v9, 1);
  v11 = v9 - 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x1000861F0);
  }
  *(_QWORD *)(v3 + 16) = v11;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_10008620C(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      v10 = type metadata accessor for TransitionWatcher(0);
      v11 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
      do
      {
        v12 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v3 + 40), v10, v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(v3 + 48);
            v16 = (_QWORD *)(v15 + 8 * v2);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000863E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_100078C90(*(_QWORD *)(v1 + 40), a1);
  return sub_100086414(a1, v3);
}

uint64_t sub_100086414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

uint64_t sub_1000866DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_1000863E4(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100087F28();
    v8 = v12;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_100087720(v5, v8);
  v10 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

uint64_t sub_100086790(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  int64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001D138(&qword_100128E98);
  v21 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_29;
  v18 = v3;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v20 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 > 1)
  {
    v12 = *(_QWORD *)(v5 + 72);
    v13 = 1;
    if (v12)
      goto LABEL_20;
    v13 = 2;
    if (v19 > 2)
    {
      v12 = *(_QWORD *)(v5 + 80);
      if (!v12)
      {
        v14 = 3;
        if (v19 > 3)
        {
          v12 = *(_QWORD *)(v5 + 88);
          if (v12)
          {
            v13 = 3;
            goto LABEL_20;
          }
          while (1)
          {
            v13 = v14 + 1;
            if (__OFADD__(v14, 1))
            {
              __break(1u);
              JUMPOUT(0x100086B6CLL);
            }
            if (v13 >= v19)
              break;
            v12 = v20[v13];
            ++v14;
            if (v12)
              goto LABEL_20;
          }
        }
        goto LABEL_24;
      }
LABEL_20:
      v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_21:
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
      if ((v21 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11));
      Hasher.init(_seed:)(v22, *(_QWORD *)(v7 + 40));
      __asm { BR              X8 }
    }
  }
LABEL_24:
  swift_release(v5);
  v3 = v18;
  if ((v21 & 1) != 0)
  {
    v16 = 1 << *(_BYTE *)(v5 + 32);
    if (v16 >= 64)
      bzero(v20, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v20 = -1 << v16;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_29:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

Swift::Int sub_100086B88(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  _QWORD *v32;
  uint64_t v33[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001D138(&qword_100128E90);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v31 = v3;
    v32 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v13)
          goto LABEL_36;
        v22 = v32[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v13)
            goto LABEL_36;
          v22 = v32[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v32[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v13)
                  goto LABEL_36;
                v22 = v32[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(v5 + 56);
      v29 = *(_QWORD *)(v28 + 8 * v20);
      if ((a2 & 1) == 0)
        swift_retain(*(_QWORD *)(v28 + 8 * v20));
      Hasher.init(_seed:)(v33, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(0);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100086E44(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  int64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001D138(&qword_100128E88);
  v21 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_29;
  v18 = v3;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v20 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 > 1)
  {
    v12 = *(_QWORD *)(v5 + 72);
    v13 = 1;
    if (v12)
      goto LABEL_20;
    v13 = 2;
    if (v19 > 2)
    {
      v12 = *(_QWORD *)(v5 + 80);
      if (!v12)
      {
        v14 = 3;
        if (v19 > 3)
        {
          v12 = *(_QWORD *)(v5 + 88);
          if (v12)
          {
            v13 = 3;
            goto LABEL_20;
          }
          while (1)
          {
            v13 = v14 + 1;
            if (__OFADD__(v14, 1))
            {
              __break(1u);
              JUMPOUT(0x100087280);
            }
            if (v13 >= v19)
              break;
            v12 = v20[v13];
            ++v14;
            if (v12)
              goto LABEL_20;
          }
        }
        goto LABEL_24;
      }
LABEL_20:
      v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_21:
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
      if ((v21 & 1) == 0)
        swift_retain(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11));
      Hasher.init(_seed:)(v22, *(_QWORD *)(v7 + 40));
      __asm { BR              X8 }
    }
  }
LABEL_24:
  swift_release(v5);
  v3 = v18;
  if ((v21 & 1) != 0)
  {
    v16 = 1 << *(_BYTE *)(v5 + 32);
    if (v16 >= 64)
      bzero(v20, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v20 = -1 << v16;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_29:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

uint64_t sub_1000872A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001D138(&qword_100128E80);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v19 <= 2)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    if ((a2 & 1) == 0)
      swift_unknownObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v11));
    Hasher.init(_seed:)(v20, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v19 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x1000876F8);
      }
      if (v14 >= v19)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((a2 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

unint64_t sub_100087720(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD v14[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
      Hasher.init(_seed:)(v14, *(_QWORD *)(a2 + 40));
      __asm { BR              X8 }
    }
    v8 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v9 = *v8;
    v10 = (-1 << v3) - 1;
  }
  else
  {
    v8 = (uint64_t *)(v4 + 8 * (result >> 6));
    v10 = *v8;
    v9 = (-1 << result) - 1;
  }
  *v8 = v10 & v9;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v12)
  {
    __break(1u);
    JUMPOUT(0x1000879D8);
  }
  *(_QWORD *)(a2 + 16) = v13;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1000879F4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)(v22, *(_QWORD *)(a2 + 40));
        Hasher._combine(_:)(0);
        result = Hasher._finalize()();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100087BA8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1000863E4(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_100087F28();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_100086790(result, a3 & 1);
  result = sub_1000863E4(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SWTSMEvent);
  __break(1u);
  return result;
}

uint64_t sub_100087CDC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v2;
  v8 = sub_100089174();
  v9 = *(_QWORD *)(v6 + 16);
  v10 = (v7 & 1) == 0;
  result = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v12 = v7;
  v13 = *(_QWORD *)(v6 + 24);
  if (v13 >= result && (a2 & 1) != 0)
    goto LABEL_7;
  if (v13 >= result && (a2 & 1) == 0)
  {
    result = (uint64_t)sub_1000880C8();
LABEL_7:
    v14 = *v3;
    if ((v12 & 1) != 0)
    {
LABEL_8:
      v15 = *(_QWORD *)(v14 + 56);
      result = swift_release(*(_QWORD *)(v15 + 8 * v8));
      *(_QWORD *)(v15 + 8 * v8) = a1;
      return result;
    }
LABEL_11:
    *(_QWORD *)(v14 + 8 * (v8 >> 6) + 64) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v8) = a1;
    v17 = *(_QWORD *)(v14 + 16);
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (!v18)
    {
      *(_QWORD *)(v14 + 16) = v19;
      return result;
    }
    goto LABEL_14;
  }
  sub_100086B88(result, a2 & 1);
  result = sub_100089174();
  if ((v12 & 1) == (v16 & 1))
  {
    v8 = result;
    v14 = *v3;
    if ((v12 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for StateMachineEvents.WaitType);
  __break(1u);
  return result;
}

uint64_t sub_100087DF4(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_10002559C(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_10008825C();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_100086E44(result, a3 & 1);
  result = sub_10002559C(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SMState);
  __break(1u);
  return result;
}

void *sub_100087F28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10001D138(&qword_100128E98);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 16);
  if (!v5)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v8)
  {
    result = memmove(result, (const void *)(v2 + 64), 8 * v8);
    v5 = *(_QWORD *)(v2 + 16);
  }
  v10 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v16) = v17;
    result = (void *)swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000880C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_10001D138(&qword_100128E90);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 16);
  if (!v5)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v8)
  {
    result = memmove(result, (const void *)(v2 + 64), 8 * v8);
    v5 = *(_QWORD *)(v2 + 16);
  }
  v10 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
    result = (void *)swift_retain(v18);
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10008825C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_10001D138(&qword_100128E88);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_retain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000883FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_10001D138(&qword_100128E80);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15) = v16;
    result = (void *)swift_unknownObjectRetain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000885A0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  _QWORD v18[9];

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
    goto LABEL_23;
  }
  if (*(_QWORD *)(a4 + 16) != a3)
  {
    sub_10001D138(&qword_100128E58);
    v8 = static _SetStorage.allocate(capacity:)(a3);
    v9 = (void *)v8;
    v17 = a1;
    if (a2 < 1)
      v10 = 0;
    else
      v10 = *a1;
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      goto LABEL_22;
    }
    if (a2 > 1)
    {
      v12 = v17[1];
      v13 = 1;
      if (v12)
        goto LABEL_21;
      v13 = 2;
      if (a2 > 2)
      {
        v12 = v17[2];
        if (v12)
          goto LABEL_21;
        v13 = 3;
        if (a2 > 3)
        {
          v12 = v17[3];
          if (!v12)
          {
            v14 = 4;
            if (a2 > 4)
            {
              v12 = v17[4];
              if (v12)
              {
                v13 = 4;
                goto LABEL_21;
              }
              while (1)
              {
                v13 = v14 + 1;
                if (__OFADD__(v14, 1))
                {
                  __break(1u);
                  JUMPOUT(0x100088904);
                }
                if (v13 >= a2)
                  break;
                v12 = v17[v13];
                ++v14;
                if (v12)
                  goto LABEL_21;
              }
            }
            goto LABEL_23;
          }
LABEL_21:
          v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_22:
          v15 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v11);
          Hasher.init(_seed:)(v18, *(_QWORD *)(v8 + 40));
          __asm { BR              X8 }
        }
      }
    }
LABEL_23:
    swift_release(v4);
    return v9;
  }
  return (void *)v4;
}

uint64_t sub_100088920(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_1000889C0(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100088AA4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = sub_100088B0C;
  return v5(v2 + 16);
}

uint64_t sub_100088B0C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD **)(*v0 + 24);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  *v2 = *(_QWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

Swift::Int sub_100088B5C(Swift::Int result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  Swift::Int v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[9];

  v1 = result;
  v2 = (unint64_t)result >> 62;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v6 = result;
    else
      v6 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    result = swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_10001D138(&qword_100128EA8);
      result = static _SetStorage.allocate(capacity:)(v3);
      v4 = (_QWORD *)result;
      if (!v2)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (!v2)
  {
LABEL_4:
    v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
      return (Swift::Int)v4;
    goto LABEL_15;
  }
LABEL_11:
  if (v1 < 0)
    v7 = v1;
  else
    v7 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  result = swift_bridgeObjectRelease(v1);
  if (!v5)
    return (Swift::Int)v4;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v28 = v5;
  v29 = v1 & 0xC000000000000001;
  v26 = v1 + 32;
  v27 = v1 & 0xFFFFFFFFFFFFFF8;
  while (v29)
  {
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v1);
    v10 = result;
    v11 = __OFADD__(v8++, 1);
    if (v11)
      goto LABEL_33;
LABEL_23:
    Hasher.init(_seed:)(v30, v4[5]);
    (*(void (**)(_QWORD *))(*(_QWORD *)v10 + 152))(v30);
    result = Hasher._finalize()();
    v12 = -1 << *((_BYTE *)v4 + 32);
    v13 = result & ~v12;
    v14 = v13 >> 6;
    v15 = *(_QWORD *)&v9[8 * (v13 >> 6)];
    v16 = 1 << v13;
    if (((1 << v13) & v15) == 0)
      goto LABEL_30;
    v17 = v1;
    v18 = v10 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
    v19 = *(_QWORD *)(v4[6] + 8 * v13);
    v20 = v19 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
    swift_retain(v19);
    LOBYTE(v20) = static UUID.== infix(_:_:)(v20, v18);
    result = swift_release(v19);
    if ((v20 & 1) != 0)
    {
LABEL_16:
      result = swift_release(v10);
      v1 = v17;
      v5 = v28;
      if (v8 == v28)
        return (Swift::Int)v4;
    }
    else
    {
      v21 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v21;
        v14 = v13 >> 6;
        v15 = *(_QWORD *)&v9[8 * (v13 >> 6)];
        v16 = 1 << v13;
        if ((v15 & (1 << v13)) == 0)
          break;
        v22 = *(_QWORD *)(v4[6] + 8 * v13);
        v23 = v22 + OBJC_IVAR____TtC15swtransparencyd17ContinuationStore_id;
        swift_retain(v22);
        LOBYTE(v23) = static UUID.== infix(_:_:)(v23, v18);
        result = swift_release(v22);
        if ((v23 & 1) != 0)
          goto LABEL_16;
      }
      v1 = v17;
      v5 = v28;
LABEL_30:
      *(_QWORD *)&v9[8 * v14] = v16 | v15;
      *(_QWORD *)(v4[6] + 8 * v13) = v10;
      v24 = v4[2];
      v11 = __OFADD__(v24, 1);
      v25 = v24 + 1;
      if (v11)
        goto LABEL_34;
      v4[2] = v25;
      if (v8 == v5)
        return (Swift::Int)v4;
    }
  }
  if (v8 >= *(_QWORD *)(v27 + 16))
    goto LABEL_35;
  v10 = *(_QWORD *)(v26 + 8 * v8);
  result = swift_retain(v10);
  v11 = __OFADD__(v8++, 1);
  if (!v11)
    goto LABEL_23;
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

_QWORD *sub_100088E00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[5];
  uint64_t v30;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = type metadata accessor for TransitionWatcher(0);
    v7 = sub_1000202A4(&qword_1001288F0, 255, type metadata accessor for TransitionWatcher, (uint64_t)&unk_1000DB820);
    result = Set.Iterator.init(_cocoa:)(v29, v5, v6, v7);
    v3 = v29[0];
    v27 = v29[1];
    v10 = v29[2];
    v9 = v29[3];
    v11 = v29[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v10 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v9 = 0;
  }
  v26 = (unint64_t)(v10 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v11)
    {
      v15 = (v11 - 1) & v11;
      v16 = __clz(__rbit64(v11)) | (v9 << 6);
      v17 = v9;
      goto LABEL_32;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v22 >= v26)
      return (_QWORD *)sub_10004BA60(v3);
    v23 = *(_QWORD *)(v27 + 8 * v22);
    v17 = v9 + 1;
    if (!v23)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v26)
        return (_QWORD *)sub_10004BA60(v3);
      v23 = *(_QWORD *)(v27 + 8 * v17);
      if (!v23)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v26)
          return (_QWORD *)sub_10004BA60(v3);
        v23 = *(_QWORD *)(v27 + 8 * v17);
        if (!v23)
        {
          v17 = v9 + 4;
          if (v9 + 4 >= v26)
            return (_QWORD *)sub_10004BA60(v3);
          v23 = *(_QWORD *)(v27 + 8 * v17);
          if (!v23)
          {
            v17 = v9 + 5;
            if (v9 + 5 >= v26)
              return (_QWORD *)sub_10004BA60(v3);
            v23 = *(_QWORD *)(v27 + 8 * v17);
            if (!v23)
            {
              v24 = v9 + 6;
              while (v26 != v24)
              {
                v23 = *(_QWORD *)(v27 + 8 * v24++);
                if (v23)
                {
                  v17 = v24 - 1;
                  goto LABEL_31;
                }
              }
              return (_QWORD *)sub_10004BA60(v3);
            }
          }
        }
      }
    }
LABEL_31:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    swift_retain(v21);
    if (!v21)
      return (_QWORD *)sub_10004BA60(v3);
    while (1)
    {
      swift_beginAccess(a2 + OBJC_IVAR____TtC15swtransparencyd15SWTStateMachine_watchers, v28, 33, 0);
      v25 = sub_100085810(v21);
      swift_endAccess(v28);
      swift_release(v21);
      result = (_QWORD *)swift_release(v25);
      v9 = v17;
      v11 = v15;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(result);
      if (v18)
      {
        v19 = v18;
        v30 = v18;
        v20 = type metadata accessor for TransitionWatcher(0);
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(v28, &v30, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v28[0];
        swift_unknownObjectRelease(v19);
        v17 = v9;
        v15 = v11;
        if (v21)
          continue;
      }
      return (_QWORD *)sub_10004BA60(v3);
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100089100(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100109EA8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t sub_100089148(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

uint64_t sub_100089174()
{
  uint64_t v0;
  Swift::Int v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v0 + 40));
  Hasher._combine(_:)(0);
  v1 = Hasher._finalize()();
  return sub_100089148(v1);
}

unint64_t sub_1000891B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v1 = a1[2];
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10001D138(&qword_100128E90);
  v3 = static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = a1[4];
  result = sub_100089174();
  if ((v6 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain(v4);
    return v3;
  }
  v7 = a1 + 5;
  v8 = v1 - 1;
  while (1)
  {
    *(_QWORD *)(v3 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * result) = v4;
    v9 = *(_QWORD *)(v3 + 16);
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    *(_QWORD *)(v3 + 16) = v11;
    if (!v8)
      goto LABEL_8;
    v12 = *v7++;
    swift_retain(v4);
    result = sub_100089174();
    --v8;
    v4 = v12;
    if ((v13 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_10008929C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100109F70, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t type metadata accessor for StateMachineEvents()
{
  return objc_opt_self(_TtC15swtransparencyd18StateMachineEvents);
}

unint64_t sub_100089304(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10010A080, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t type metadata accessor for SWTStateMachine(uint64_t a1)
{
  return sub_100039874(a1, qword_100130150, (uint64_t)&nominal type descriptor for SWTStateMachine);
}

uint64_t sub_100089360()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  sub_100023CAC(v0 + 5);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100089394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1001288C4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001E4EC;
  v3[9] = v2;
  v3[10] = v0 + 40;
  return swift_task_switch(sub_10007B940, v2, 0);
}

uint64_t sub_1000893FC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1001288DC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100020638;
  v2 = (_QWORD *)swift_task_alloc(dword_100128E3C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10001E4EC;
  return sub_10007E9EC();
}

uint64_t sub_100089464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  unsigned __int8 v5;
  _BYTE v7[24];

  swift_beginAccess(v0 + 144, v7, 0, 0);
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  ObjectType = swift_getObjectType(v1);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  swift_unknownObjectRetain(v1);
  v5 = v4(ObjectType, v2);
  swift_unknownObjectRelease(v1);
  return sub_100079DE8(v5);
}

uint64_t sub_1000894E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000894F8()
{
  uint64_t v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10008952C
                                                                     + 4 * byte_1000DE533[*(unsigned __int8 *)(v0 + 16)]))(0xD000000000000010, 0x80000001000E3DC0);
}

uint64_t sub_10008952C(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_100089590()
{
  return 0x7053746365746564;
}

uint64_t sub_1000895B4()
{
  return 0x6E776F6474756873;
}

uint64_t sub_1000895CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000895DC()
{
  uint64_t v0;

  return sub_100079DE8(*(_BYTE *)(v0 + 16));
}

uint64_t sub_1000895E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE **sub_1000895F4(_BYTE **result)
{
  uint64_t v1;
  _BYTE *v2;

  v2 = *result;
  *v2 = *(_BYTE *)(v1 + 16);
  *result = v2 + 1;
  return result;
}

uint64_t sub_100089608()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100089618(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_100081DDC(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_100089620()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100089630()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100089640()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100089650()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100089664()
{
  unint64_t result;

  result = qword_100128930;
  if (!qword_100128930)
  {
    result = swift_getWitnessTable(&unk_1000DE5BC, &type metadata for ContinuationStore.ContinuationState);
    atomic_store(result, (unint64_t *)&qword_100128930);
  }
  return result;
}

uint64_t sub_1000896A8()
{
  return sub_1000202A4(&qword_100128938, 255, type metadata accessor for ContinuationStore, (uint64_t)&unk_1000DE664);
}

unint64_t sub_1000896DC()
{
  unint64_t result;

  result = qword_100128940;
  if (!qword_100128940)
  {
    result = swift_getWitnessTable(&unk_1000DE6B4, &type metadata for SWTSMEvent);
    atomic_store(result, (unint64_t *)&qword_100128940);
  }
  return result;
}

unint64_t sub_100089724()
{
  unint64_t result;

  result = qword_100128948;
  if (!qword_100128948)
  {
    result = swift_getWitnessTable(&unk_1000DE754, &type metadata for StateMachineEvents.WaitType);
    atomic_store(result, (unint64_t *)&qword_100128948);
  }
  return result;
}

unint64_t sub_100089770()
{
  unint64_t result;

  result = qword_100128950;
  if (!qword_100128950)
  {
    result = swift_getWitnessTable(&unk_1000DE884, &type metadata for SWTStateMachine.SMRunningState);
    atomic_store(result, (unint64_t *)&qword_100128950);
  }
  return result;
}

uint64_t *sub_1000897B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v8);
  }
  else if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
    {
      v11 = sub_10001D138(&qword_100127170);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v9);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

uint64_t sub_1000898C4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = type metadata accessor for URL(0);
    v4 = *(_QWORD *)(v3 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return result;
}

void *sub_100089934(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL(0);
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = sub_10001D138(&qword_100127170);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_100089A1C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1000257C8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL(0);
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        v8 = sub_10001D138(&qword_100127170);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t type metadata accessor for SWTStateMachineError(uint64_t a1)
{
  return sub_100039874(a1, (uint64_t *)&unk_100130130, (uint64_t)&nominal type descriptor for SWTStateMachineError);
}

void *sub_100089B28(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL(0);
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = sub_10001D138(&qword_100127170);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_100089C10(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1000257C8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL(0);
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        v8 = sub_10001D138(&qword_100127170);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100089D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100089D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100089D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void sub_100089D34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10003ACBC(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1000DE9D8;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
  }
}

uint64_t sub_100089DA0()
{
  return type metadata accessor for ContinuationStore(0);
}

void sub_100089DA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_100025A94(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1000DEA08;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

uint64_t getEnumTagSinglePayload for ContinuationStore.ContinuationState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ContinuationStore.ContinuationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100089F14 + 4 * byte_1000DE53F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100089F48 + 4 * byte_1000DE53A[v4]))();
}

uint64_t sub_100089F48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100089F50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100089F58);
  return result;
}

uint64_t sub_100089F64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100089F6CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100089F70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100089F78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContinuationStore.ContinuationState()
{
  return &type metadata for ContinuationStore.ContinuationState;
}

uint64_t getEnumTagSinglePayload for SWTSMEvent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SWTSMEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10008A070 + 4 * byte_1000DE549[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10008A0A4 + 4 * byte_1000DE544[v4]))();
}

uint64_t sub_10008A0A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A0AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008A0B4);
  return result;
}

uint64_t sub_10008A0C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008A0C8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10008A0CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A0D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SWTSMEvent()
{
  return &type metadata for SWTSMEvent;
}

uint64_t storeEnumTagSinglePayload for StateMachineEvents.WaitType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10008A130 + 4 * byte_1000DE54E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10008A150 + 4 * byte_1000DE553[v4]))();
}

_BYTE *sub_10008A130(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10008A150(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10008A158(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10008A160(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10008A168(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10008A170(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StateMachineEvents.WaitType()
{
  return &type metadata for StateMachineEvents.WaitType;
}

uint64_t getEnumTagSinglePayload for SMState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SMState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10008A268 + 4 * byte_1000DE55D[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10008A29C + 4 * byte_1000DE558[v4]))();
}

uint64_t sub_10008A29C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A2A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008A2ACLL);
  return result;
}

uint64_t sub_10008A2B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008A2C0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10008A2C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A2CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SMState()
{
  return &type metadata for SMState;
}

uint64_t sub_10008A2E8()
{
  return type metadata accessor for SWTStateMachine(0);
}

uint64_t sub_10008A2F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_1000DE9D8;
  v4[5] = &unk_1000DEB40;
  v4[6] = &unk_1000DEB58;
  v4[7] = &unk_1000DEB58;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[8] = &unk_1000DEB70;
  v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[10] = &unk_1000DEB88;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    v4[12] = &unk_1000DEBA0;
    v4[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for SWTStateMachine.SMTransition(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_10008A3F4(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_10008A3F4(unint64_t result)
{
  if (result >> 62 == 1)
    return swift_retain(result & 0x3FFFFFFFFFFFFFFFLL);
  return result;
}

unint64_t destroy for SWTStateMachine.SMTransition(unint64_t *a1)
{
  return sub_10008A414(*a1);
}

unint64_t sub_10008A414(unint64_t result)
{
  if (result >> 62 == 1)
    return swift_release(result & 0x3FFFFFFFFFFFFFFFLL);
  return result;
}

unint64_t *assignWithCopy for SWTStateMachine.SMTransition(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_10008A3F4(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_10008A414(v4);
  return a1;
}

unint64_t *assignWithTake for SWTStateMachine.SMTransition(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_10008A414(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SWTStateMachine.SMTransition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xE && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 14);
  v3 = (((*(_QWORD *)a1 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)a1 >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SWTStateMachine.SMTransition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xD)
  {
    *(_QWORD *)result = a2 - 14;
    if (a3 >= 0xE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t sub_10008A534(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return *a1 + 2;
}

_QWORD *sub_10008A54C(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_10008A55C(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
    *result = *result & 0xFFFFFFFFFFFFFFFLL | (a2 << 62);
  else
    *result = (a2 - 2) | 0x8000000000000000;
  return result;
}

ValueMetadata *type metadata accessor for SWTStateMachine.SMTransition()
{
  return &type metadata for SWTStateMachine.SMTransition;
}

uint64_t getEnumTagSinglePayload for SWTStateMachine.SMEventResult(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
  {
    v6 = *a1;
    v7 = v6 >= 0xA;
    v8 = v6 - 10;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 10;
    if (a2 + 10 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10008A5E4 + 4 * byte_1000DE562[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for SWTStateMachine.SMEventResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 10;
  if (a3 + 10 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF6)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10008A68C + 4 * byte_1000DE56C[v5]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10008A6C0 + 4 * byte_1000DE567[v5]))();
}

uint64_t sub_10008A6C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A6C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008A6D0);
  return result;
}

uint64_t sub_10008A6DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008A6E4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_10008A6E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A6F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A6FC(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 0xA)
    return v1 - 9;
  else
    return 0;
}

_BYTE *sub_10008A710(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 9;
  return result;
}

ValueMetadata *type metadata accessor for SWTStateMachine.SMEventResult()
{
  return &type metadata for SWTStateMachine.SMEventResult;
}

uint64_t storeEnumTagSinglePayload for SWTStateMachine.SMRunningState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10008A77C + 4 * byte_1000DE576[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10008A7B0 + 4 * byte_1000DE571[v4]))();
}

uint64_t sub_10008A7B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A7B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008A7C0);
  return result;
}

uint64_t sub_10008A7CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008A7D4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10008A7D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A7E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SWTStateMachine.SMRunningState()
{
  return &type metadata for SWTStateMachine.SMRunningState;
}

uint64_t sub_10008A800(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_100128E44);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100020638;
  v5[5] = a1;
  v5[6] = v4;
  return swift_task_switch(sub_1000819E8, v4, 0);
}

uint64_t sub_10008A864(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v6 = (unint64_t *)result;
  v7 = 0;
  v8 = 0;
  v9 = a3 + 56;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a3 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v8 << 6);
      goto LABEL_5;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v13)
      goto LABEL_24;
    v17 = *(_QWORD *)(v9 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_24;
      v17 = *(_QWORD *)(v9 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_24;
        v17 = *(_QWORD *)(v9 + 8 * v8);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    result = sub_1000791AC(*(_BYTE *)(*(_QWORD *)(a3 + 48) + v15), a4);
    if ((result & 1) != 0)
    {
      *(unint64_t *)((char *)v6 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (uint64_t)sub_1000885A0(v6, a2, v7, a3);
      }
    }
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_24;
  v17 = *(_QWORD *)(v9 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v13)
      goto LABEL_24;
    v17 = *(_QWORD *)(v9 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10008A9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_10008A864((uint64_t)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_release(a1);
    v11 = swift_bridgeObjectRelease(a2);
    if (v2)
      swift_willThrow(v11);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v8, -1);
    bzero(v12, v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_10008A864((uint64_t)v12, v7, a1, a2);
    swift_release(a1);
    swift_bridgeObjectRelease(a2);
    swift_slowDealloc(v12, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v10;
}

uint64_t sub_10008ABC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008ABE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100128E64);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100020638;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100128E60 + dword_100128E60))(a1, v4);
}

uint64_t sub_10008AC54()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10008AC88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_100128EBC);
  v6 = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100020638;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v4;
  return swift_task_switch(sub_100077E78, 0, 0);
}

uint64_t sub_10008ACFC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10008AD28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc(dword_100128ECC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100020638;
  return sub_1000780F0((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_10008AD88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001D138(&qword_100126D20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008ADD0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001D1C4(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *TransparencyTLSError.errorDomain.unsafeMutableAddressor()
{
  return &static TransparencyTLSError.errorDomain;
}

uint64_t static TransparencyTLSError.errorDomain.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&static TransparencyTLSError.errorDomain, v2, 0, 0);
  v0 = static TransparencyTLSError.errorDomain;
  swift_bridgeObjectRetain(off_100128EF0);
  return v0;
}

uint64_t static TransparencyTLSError.errorDomain.setter(uint64_t a1, char *a2)
{
  char *v4;
  _BYTE v6[24];

  swift_beginAccess(&static TransparencyTLSError.errorDomain, v6, 1, 0);
  v4 = off_100128EF0;
  static TransparencyTLSError.errorDomain = a1;
  off_100128EF0 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*static TransparencyTLSError.errorDomain.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static TransparencyTLSError.errorDomain, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t TransparencyTLSError.errorCode.getter(char a1)
{
  return (a1 & 1u) + 1;
}

void TransparencyTLSError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

BOOL static TransparencyTLSError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

Swift::Int TransparencyTLSError.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t sub_10008AFD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008EE14();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10008AFF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008EE14();
  return Error<>._code.getter(a1, v2);
}

BOOL sub_10008B020(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10008B038()
{
  _BYTE *v0;

  if (*v0)
    return 2;
  else
    return 1;
}

uint64_t sub_10008B04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_10008B054(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_10008B078 + 4 * byte_1000DEC60[a2 >> 62]))(0);
}

uint64_t sub_10008B078(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

uint64_t sub_10008B080@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_10008B088@<X0>(uint64_t a1@<X8>)
{
  return a1 >> 32;
}

uint64_t TransparencyByteBuffer.init(data:)(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)())((char *)nullsub_1 + 4 * byte_1000DEC64[a2 >> 62]))();
}

void sub_10008B0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  Data.init<A>(_:)(v8, a2, a3);
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  __asm { BR              X10 }
}

uint64_t sub_10008B16C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10008B198(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_10008B1A8 + dword_10008B1DC[a2 >> 62]))();
}

uint64_t sub_10008B1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = BYTE6(a2) - a3;
  if (__OFSUB__(BYTE6(a2), a3))
  {
    __break(1u);
    JUMPOUT(0x10008B1DCLL);
  }
  return result;
}

uint64_t sub_10008B1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v10, v11);
  v13 = v12 + 7;
  if (__OFADD__(v12, 7))
    __break(1u);
  if (v13 < 0)
    v13 = v12 + 14;
  v14 = v13 >> 3;
  v15 = dispatch thunk of FixedWidthInteger.bigEndian.getter(a3, a4);
  __chkstk_darwin(v15);
  *(&v18 - 2) = v14;
  *(&v18 - 1) = v4;
  sub_10008C048((uint64_t)v9, (uint64_t)sub_10008B370, (uint64_t)(&v18 - 4), a3, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol witness table for Never, v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  return v14;
}

uint64_t sub_10008B334()
{
  uint64_t result;
  uint64_t v1;

  result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  v1 = result + 7;
  if (__OFADD__(result, 7))
  {
    __break(1u);
  }
  else
  {
    if (v1 < 0)
      v1 = result + 14;
    return v1 >> 3;
  }
  return result;
}

uint64_t sub_10008B370(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v5[5];

  v3 = a2 - result;
  if (!result)
    v3 = 0;
  if (v3 == *(_QWORD *)(v2 + 16))
  {
    v5[3] = &type metadata for UnsafeRawBufferPointer;
    v5[4] = &protocol witness table for UnsafeRawBufferPointer;
    v5[0] = result;
    v5[1] = a2;
    v4 = sub_100022F20(v5, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v4, v4[1]);
    return sub_100023CAC(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10008B3F0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11[2];
  uint64_t v12;
  _QWORD v13[4];

  v9 = a1;
  v10 = a2;
  v7 = a1;
  v8 = a2;
  v3 = sub_10001D138(&qword_100128F30);
  v4 = sub_10001D138(&qword_100128F38);
  if (!swift_dynamicCast(v11, &v7, v3, v4, 6))
  {
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    sub_10008EE58((uint64_t)v11);
    __asm { BR              X12 }
  }
  sub_100032478(v11, (uint64_t)v13);
  v5 = sub_100022F20(v13, v13[3]);
  __chkstk_darwin(v5);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(sub_10008EED8);
  return sub_100023CAC(v13);
}

void sub_10008B79C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v2 + 16) <= a2)
  {
    __asm { BR              X13 }
  }
  __break(1u);
  JUMPOUT(0x10008B85CLL);
}

void sub_10008B874(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (__OFADD__(a2, 2))
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v2 + 16) <= a2)
  {
    __asm { BR              X13 }
  }
  __break(1u);
  JUMPOUT(0x10008B93CLL);
}

void sub_10008B954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __chkstk_darwin(a1);
  v6 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v4, v5);
  v7 = v6 + 7;
  if (__OFADD__(v6, 7))
  {
    __break(1u);
  }
  else
  {
    if (v7 < 0)
      v7 = v6 + 14;
    if (!__OFADD__(a2, v7 >> 3))
    {
      if (*(_QWORD *)(v2 + 16) <= a2)
        __asm { BR              X13 }
LABEL_9:
      __break(1u);
      JUMPOUT(0x10008BB0CLL);
    }
  }
  __break(1u);
  goto LABEL_9;
}

uint64_t sub_10008BB24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];

  v6 = a2 - result;
  if (!result)
    v6 = 0;
  if (v6 != a3)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a6 < a5)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v12[3] = &type metadata for UnsafeRawBufferPointer;
  v12[4] = &protocol witness table for UnsafeRawBufferPointer;
  v12[0] = result;
  v12[1] = a2;
  v9 = sub_100022F20(v12, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v10 = *v9;
  if (*v9)
    v11 = v9[1] - v10;
  else
    v11 = 0;
  Data._Representation.replaceSubrange(_:with:count:)(a5, a6, v10, v11);
  return sub_100023CAC(v12);
}

uint64_t sub_10008BBCC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10008BB24(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

void sub_10008BBF8()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 2))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x10008BD2CLL);
}

void sub_10008BD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v3;
  v7 = __chkstk_darwin(a1);
  __chkstk_darwin(v7);
  dispatch thunk of static AdditiveArithmetic.zero.getter(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 24) + 8));
  v9 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a2, a3);
  v10 = v9 + 7;
  if (__OFADD__(v9, 7))
  {
    __break(1u);
  }
  else
  {
    if (v10 < 0)
      v10 = v9 + 14;
    if (!__OFADD__(*(_QWORD *)(v4 + 16), v10 >> 3))
      __asm { BR              X12 }
  }
  __break(1u);
  JUMPOUT(0x10008BF80);
}

uint64_t sub_10008BF94@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[2];
  __int128 v14;

  v6 = *(__int128 **)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v14 = *v6;
  v7 = *((_QWORD *)v6 + 2);
  if (v7 > v5)
  {
    __break(1u);
  }
  else
  {
    v9 = result;
    v13[0] = v7;
    v13[1] = v5;
    v10 = sub_10001D138(&qword_100128F00);
    v11 = sub_10008E770();
    v12 = sub_10008E7B4();
    result = DataProtocol.copyBytes<A>(to:from:)(v9, a2, v13, &type metadata for Data, v10, v11, v12);
    *a3 = result;
  }
  return result;
}

uint64_t sub_10008C048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = __chkstk_darwin();
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

void sub_10008C0E0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_10008C11C(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (BYTE6(a2) >= a1)
  {
    Data._Representation.subscript.getter(a1, BYTE6(a2), a3);
    v4 = v3;
    ((void (*)(void))Data.append(_:))();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x10008C1F0);
}

void sub_10008C214()
{
  __asm { BR              X10 }
}

void sub_10008C4C8(uint64_t *a1)
{
  uint64_t v1;

  v1 = a1[1];
  sub_10008C0E0(*a1, v1);
  __asm { BR              X11 }
}

void sub_10008C510()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = BYTE6(v1);
}

void sub_10008C538(uint64_t a1)
{
  uint64_t v1;

  if (!__OFADD__(*(_QWORD *)(v1 + 16), a1))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x10008C608);
}

uint64_t TransparencyByteBuffer.readableBytesView.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, unint64_t))((char *)&loc_10008C644
                                                                             + *((int *)qword_10008C680 + (a2 >> 62))))(a1, 0, a3, a2);
}

uint64_t sub_10008C654@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (BYTE6(a2) < a1)
  {
    __break(1u);
    JUMPOUT(0x10008C680);
  }
  return Data._Representation.subscript.getter(a1, BYTE6(a2), a3);
}

void sub_10008C690(uint64_t a1)
{
  uint64_t v1;

  if (!__OFADD__(*(_QWORD *)(v1 + 16), a1))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x10008C75CLL);
}

Swift::Int __swiftcall TransparencyByteBuffer.writeBytes(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1._rawValue + 2);
  if (!v1)
    return 0;
  Data._Representation.append(contentsOf:)((char *)a1._rawValue + 32, (char *)a1._rawValue + v1 + 32);
  return *((_QWORD *)a1._rawValue + 2);
}

uint64_t sub_10008C7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Data.append<A>(contentsOf:)(a1, a2, *(_QWORD *)(a3 + 8));
  return dispatch thunk of Collection.count.getter(a2, a3);
}

uint64_t sub_10008C7F0()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_10008C800 + dword_10008C86C[*(_QWORD *)(v0 + 8) >> 62]))();
}

uint64_t sub_10008C810(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result < 0)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x10008C860);
  }
  if (BYTE6(v1) < result)
  {
    __break(1u);
    goto LABEL_5;
  }
  *(_QWORD *)(v2 + 16) = result;
  return result;
}

uint64_t sub_10008C87C(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0)
    return sub_10008B3F0(result, 0);
  __break(1u);
  return result;
}

void sub_10008C88C()
{
  __chkstk_darwin();
  __asm { BR              X12 }
}

uint64_t sub_10008C90C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  v7 = BYTE6(v0);
  v8 = *(_QWORD *)(v3 + 8);
  dispatch thunk of static AdditiveArithmetic.zero.getter(v1, *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8));
  v10 = sub_10008B1EC(v4, v9, v1, v3);
  v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v11(v4, v1);
  v12 = (*(uint64_t (**)(uint64_t))(v6 - 96))(v2);
  *(_QWORD *)(v6 - 88) = v12;
  v13 = sub_10008E6F0();
  ((void (*)(uint64_t, void *, unint64_t, uint64_t, uint64_t))dispatch thunk of BinaryInteger.init<A>(_:))(v6 - 88, &type metadata for Int, v13, v1, v8);
  sub_10008B954(v4, v7);
  v11(v4, v1);
  result = v10 + v12;
  if (__OFADD__(v10, v12))
  {
    __break(1u);
    JUMPOUT(0x10008C9F0);
  }
  return result;
}

void sub_10008CA00()
{
  __asm { BR              X12 }
}

uint64_t sub_10008CA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v10;
  __int16 *v11;
  __int16 **v12;
  void *v13;
  void *v14;

  v3 = BYTE6(v0);
  LOBYTE(v10) = 0;
  v13 = &type metadata for UnsafeRawBufferPointer;
  v14 = &protocol witness table for UnsafeRawBufferPointer;
  v11 = &v10;
  v12 = (__int16 **)((char *)&v10 + 1);
  v4 = sub_100022F20(&v11, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v4, v4[1]);
  sub_100023CAC(&v11);
  v10 = 0;
  v13 = &type metadata for UnsafeRawBufferPointer;
  v14 = &protocol witness table for UnsafeRawBufferPointer;
  v11 = &v10;
  v12 = &v11;
  v5 = sub_100022F20(&v11, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v5, v5[1]);
  sub_100023CAC(&v11);
  v6 = v2(v1);
  if (v6 > 0xFFFFFF)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v7 = v6;
  sub_10008B79C((unint64_t)v6 >> 16, v3);
  if (__OFADD__(v3, v8))
    goto LABEL_5;
  sub_10008B874(v7, v3 + v8);
  return v7 + 3;
}

uint64_t sub_10008CB7C(uint64_t a1)
{
  unsigned int v1;
  _QWORD *v2;
  _QWORD *v3;
  __int16 v5;
  __int16 *v6;
  __int16 **v7;
  void *v8;
  void *v9;

  if (a1 > 0xFFFFFF)
    __break(1u);
  v1 = a1;
  LOBYTE(v5) = BYTE2(a1);
  v8 = &type metadata for UnsafeRawBufferPointer;
  v9 = &protocol witness table for UnsafeRawBufferPointer;
  v6 = &v5;
  v7 = (__int16 **)((char *)&v5 + 1);
  v2 = sub_100022F20(&v6, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v2, v2[1]);
  sub_100023CAC(&v6);
  v5 = bswap32(v1) >> 16;
  v8 = &type metadata for UnsafeRawBufferPointer;
  v9 = &protocol witness table for UnsafeRawBufferPointer;
  v6 = &v5;
  v7 = &v6;
  v3 = sub_100022F20(&v6, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v3, v3[1]);
  sub_100023CAC(&v6);
  return 3;
}

void sub_10008CC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 > 0xFFFFFF)
  {
    __break(1u);
    goto LABEL_6;
  }
  sub_10008B79C((unint64_t)a1 >> 16, a2);
  if (__OFADD__(a2, v4))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = v4;
  sub_10008B874(a1, a2 + v4);
  if (__OFADD__(v5, v6))
LABEL_7:
    __break(1u);
}

uint64_t sub_10008CCD4@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return sub_10008D5A0((void (*)(uint64_t *))sub_10008E734, a1, a2);
}

uint64_t sub_10008CD0C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char v72;
  uint64_t v73;
  char *v74;
  int64_t v75;
  uint64_t v76;
  uint64_t AssociatedConformanceWitness;
  char *v78;
  char *v79;
  int64_t v80;
  uint64_t v81;
  BOOL v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void (*v92)(uint64_t *);
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int64_t v106;

  v101 = a6;
  v91 = a3;
  v92 = a2;
  v97 = a7;
  v98 = *(_QWORD *)(a5 - 8);
  v99 = a5;
  __chkstk_darwin(a1);
  v93 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = *(_QWORD *)(v10 + 8);
  v87 = *(_QWORD *)(*(_QWORD *)(v95 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0);
  __chkstk_darwin(AssociatedTypeWitness);
  v86 = (char *)&v83 - v11;
  v12 = type metadata accessor for Optional(0, a4);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v83 - v15;
  v17 = *(_QWORD *)(a4 - 8);
  v18 = __chkstk_darwin(v14);
  v85 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v88 = (char *)&v83 - v21;
  v22 = __chkstk_darwin(v20);
  v96 = (char *)&v83 - v23;
  v24 = __chkstk_darwin(v22);
  v94 = (char *)&v83 - v25;
  v26 = __chkstk_darwin(v24);
  v90 = (char *)&v83 - v27;
  v28 = __chkstk_darwin(v26);
  v89 = (char *)&v83 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v83 - v31;
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v83 - v34;
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v83 - v37;
  v39 = v101;
  v101 = a1;
  sub_10008BD44(v36, a4, v39);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v97, 1, 1, v99);
  }
  v83 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v83(v38, v16, a4);
  v40 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v40(v35, v38, a4);
  v41 = v95;
  v42 = dispatch thunk of static BinaryInteger.isSigned.getter(a4, v95);
  v40(v32, v35, a4);
  if ((v42 & 1) == 0)
  {
    v44 = *(void (**)(char *, uint64_t))(v17 + 8);
    v46 = v32;
LABEL_9:
    v44(v46, a4);
    goto LABEL_10;
  }
  v43 = dispatch thunk of BinaryInteger.bitWidth.getter(a4, v41);
  v44 = *(void (**)(char *, uint64_t))(v17 + 8);
  v44(v32, a4);
  if (v43 <= 64)
  {
LABEL_10:
    v47 = v94;
    goto LABEL_11;
  }
  v45 = v89;
  v40(v89, v35, a4);
  v106 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a4, v41) & 1) == 0)
  {
    v67 = dispatch thunk of static BinaryInteger.isSigned.getter(a4, v41);
    v68 = dispatch thunk of BinaryInteger.bitWidth.getter(a4, v41);
    if ((v67 & 1) != 0)
    {
      if (v68 <= 64)
      {
        v76 = AssociatedTypeWitness;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v87, a4, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_1000DEE80, 256, v76, AssociatedConformanceWitness);
        v78 = v90;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v86, a4, v87);
        LODWORD(v87) = dispatch thunk of static Comparable.< infix(_:_:)(v45, v78, a4, *(_QWORD *)(*(_QWORD *)(v41 + 32) + 8));
        v44(v78, a4);
        v79 = v85;
        v83(v85, v45, a4);
        if ((v87 & 1) == 0)
        {
          v80 = v106;
          v81 = dispatch thunk of BinaryInteger._lowWord.getter(a4, v41);
          v44(v79, a4);
          v82 = v81 < v80;
          v47 = v94;
          if (v82)
            goto LABEL_44;
          goto LABEL_11;
        }
        v44(v79, a4);
LABEL_44:
        __break(1u);
        JUMPOUT(0x10008D590);
      }
LABEL_30:
      v69 = sub_10008E6F0();
      v70 = v90;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v106, &type metadata for Int, v69, a4, v41);
      v71 = v45;
      v72 = dispatch thunk of static Comparable.< infix(_:_:)(v45, v70, a4, *(_QWORD *)(*(_QWORD *)(v41 + 32) + 8));
      v44(v70, a4);
      v44(v71, a4);
      v47 = v94;
      if ((v72 & 1) == 0)
        goto LABEL_11;
      goto LABEL_44;
    }
    if (v68 < 64)
      goto LABEL_34;
    v46 = v45;
    goto LABEL_9;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(a4, v41) >= 64)
    goto LABEL_30;
LABEL_34:
  v73 = dispatch thunk of BinaryInteger._lowWord.getter(a4, v41);
  v74 = v45;
  v75 = v73;
  v44(v74, a4);
  v47 = v94;
  if (v75 < v106)
    goto LABEL_44;
LABEL_11:
  v48 = dispatch thunk of BinaryInteger.bitWidth.getter(a4, v41);
  v40(v47, v35, a4);
  if (v48 < 65)
  {
    v56 = dispatch thunk of BinaryInteger.bitWidth.getter(a4, v41);
    v44(v47, a4);
    if (v56 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a4, v41) & 1) != 0)
      goto LABEL_23;
  }
  else
  {
    v44(v47, a4);
  }
  v40(v96, v35, a4);
  v106 = 0x7FFFFFFFFFFFFFFFLL;
  v49 = dispatch thunk of static BinaryInteger.isSigned.getter(a4, v41);
  v50 = dispatch thunk of BinaryInteger.bitWidth.getter(a4, v41);
  if ((v49 & 1) != 0)
  {
    if (v50 > 64)
    {
      v51 = sub_10008E6F0();
      v52 = v90;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v106, &type metadata for Int, v51, a4, v41);
      v53 = v96;
      v54 = dispatch thunk of static Comparable.< infix(_:_:)(v52, v96, a4, *(_QWORD *)(*(_QWORD *)(v41 + 32) + 8));
      v44(v52, a4);
      v55 = v53;
      goto LABEL_22;
    }
LABEL_20:
    v57 = v96;
    dispatch thunk of BinaryInteger._lowWord.getter(a4, v41);
    v44(v57, a4);
    goto LABEL_23;
  }
  if (v50 <= 63)
    goto LABEL_20;
  v102 = 0x7FFFFFFFFFFFFFFFLL;
  v58 = v90;
  v83(v90, v96, a4);
  v59 = sub_10008E6F0();
  v60 = v88;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v102, &type metadata for Int, v59, a4, v41);
  v54 = dispatch thunk of static Comparable.< infix(_:_:)(v60, v58, a4, *(_QWORD *)(*(_QWORD *)(v41 + 32) + 8));
  v44(v60, a4);
  v55 = v58;
LABEL_22:
  v44(v55, a4);
  if ((v54 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x10008D57CLL);
  }
LABEL_23:
  v61 = dispatch thunk of BinaryInteger._lowWord.getter(a4, v41);
  v44(v35, a4);
  sub_10008C538(v61);
  if (v63 >> 60 == 15)
  {
    v44(v38, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v97, 1, 1, v99);
  }
  v103 = v62;
  v104 = v63;
  v105 = v64;
  v66 = v100;
  v92(&v103);
  if (!v66)
    __asm { BR              X12 }
  sub_100022F44(v103, v104);
  return ((uint64_t (*)(char *, uint64_t))v44)(v38, a4);
}

uint64_t sub_10008D5A0@<X0>(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *);
  uint64_t v21;

  v19 = a3;
  v20 = a1;
  v5 = type metadata accessor for Optional(0, a2);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - v7;
  v10 = *v3;
  v9 = v3[1];
  v11 = v3[2];
  sub_100022F88(*v3, v9);
  v12 = v21;
  v20(v3);
  if (v12)
  {
    v13 = sub_100022F44(*v3, v3[1]);
    *v3 = v10;
    v3[1] = v9;
    v3[2] = v11;
    return swift_willThrow(v13);
  }
  else
  {
    v20 = (void (*)(uint64_t *))v5;
    v21 = v11;
    v15 = *(_QWORD *)(a2 - 8);
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, a2);
    v17 = v19;
    if (v16 == 1)
    {
      sub_100022F44(*v3, v3[1]);
      (*(void (**)(char *, void (*)(uint64_t *)))(v6 + 8))(v8, v20);
      *v3 = v10;
      v3[1] = v9;
      v18 = 1;
      v3[2] = v21;
    }
    else
    {
      sub_100022F44(v10, v9);
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v8, a2);
      v18 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v17, v18, 1, a2);
  }
}

uint64_t sub_10008D710@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_10008D5A0((void (*)(uint64_t *))sub_10008E754, a1, a2);
}

void sub_10008D740(uint64_t a1)
{
  if (!__OFADD__(*(_QWORD *)(__chkstk_darwin(a1) + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x10008D9F8);
}

void sub_10008DA24()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 16), 1))
    __asm { BR              X13 }
  __break(1u);
  JUMPOUT(0x10008DB68);
}

void TransparencyByteBuffer.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }
}

uint64_t sub_10008DBC0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (BYTE6(a3) < a2)
  {
    __break(1u);
    JUMPOUT(0x10008DC1CLL);
  }
  v4 = Data._Representation.subscript.getter(a2, BYTE6(a3), a1);
  v6 = v5;
  Data.hash(into:)(v3, v4, v5);
  return sub_100022F44(v4, v6);
}

void TransparencyByteBuffer.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  __asm { BR              X10 }
}

Swift::Int sub_10008DC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;

  if (BYTE6(v0) < v2)
  {
    __break(1u);
    JUMPOUT(0x10008DCE8);
  }
  v3 = Data._Representation.subscript.getter(v2, BYTE6(v0), v1);
  v5 = v4;
  Data.hash(into:)(&v7, v3, v4);
  sub_100022F44(v3, v5);
  return Hasher._finalize()();
}

void sub_10008DCF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_10008DD40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x10008DDB0);
  }
  v3 = Data._Representation.subscript.getter(v1, BYTE6(v2), v0);
  v5 = v4;
  Data.hash(into:)(&v7, v3, v4);
  sub_100022F44(v3, v5);
  return Hasher._finalize()();
}

void sub_10008DDC0()
{
  __asm { BR              X10 }
}

uint64_t sub_10008DDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (BYTE6(a4) < a1)
  {
    __break(1u);
    JUMPOUT(0x10008DE50);
  }
  v5 = Data._Representation.subscript.getter(a1, BYTE6(a4), a3);
  v7 = v6;
  Data.hash(into:)(v4, v5, v6);
  return sub_100022F44(v5, v7);
}

void sub_10008DE60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *(_QWORD *)(v1 + 8);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10008DEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x10008DF14);
  }
  v3 = Data._Representation.subscript.getter(v1, BYTE6(v2), v0);
  v5 = v4;
  Data.hash(into:)(&v7, v3, v4);
  sub_100022F44(v3, v5);
  return Hasher._finalize()();
}

void sub_10008DF24(uint64_t *a1)
{
  _s15swtransparencyd22TransparencyByteBufferV2eeoiySbAC_ACtFZ_0(*a1, a1[1]);
}

void sub_10008DF40()
{
  __asm { BR              X11 }
}

_QWORD *sub_10008DFA0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  _QWORD *v12;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = v3(&v12, &v7, (char *)&v7 + BYTE6(a1));
  if (!v2)
    result = v12;
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

char *sub_10008E238(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

void sub_10008E2E8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10008E350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  return Data._Representation.replaceSubrange(_:with:count:)(v1, v0, &v5, BYTE6(v3));
}

uint64_t sub_10008E4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_13;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  if (v11)
    v16 = v15;
  else
    v16 = 0;
  return Data._Representation.replaceSubrange(_:with:count:)(a5, a6, v11, v16);
}

void sub_10008E588(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

_QWORD *sub_10008E604()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_10001D138((uint64_t *)&unk_100127740);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_100022F88(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_100022F44(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x10008E6D8);
    }
  }
  return v4;
}

unint64_t sub_10008E6F0()
{
  unint64_t result;

  result = qword_100128EF8;
  if (!qword_100128EF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100128EF8);
  }
  return result;
}

uint64_t sub_10008E734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10008CD0C(a1, *(void (**)(uint64_t *))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

void sub_10008E754(uint64_t a1)
{
  sub_10008D740(a1);
}

unint64_t sub_10008E770()
{
  unint64_t result;

  result = qword_100128F08;
  if (!qword_100128F08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100128F08);
  }
  return result;
}

unint64_t sub_10008E7B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100128F10;
  if (!qword_100128F10)
  {
    v1 = sub_10001D1C4(&qword_100128F00);
    result = swift_getWitnessTable(&protocol conformance descriptor for Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100128F10);
  }
  return result;
}

uint64_t sub_10008E800(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;

  if (!a2)
  {
    v5 = 0;
    a3 = 0;
    goto LABEL_30;
  }
  if (!a3)
  {
    v5 = 0;
    goto LABEL_30;
  }
  if (a3 < 0)
    goto LABEL_33;
  if (!a4)
  {
    a3 = 0;
    v5 = 0;
    goto LABEL_30;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 == 1)
    {
      v5 = 1;
LABEL_30:
      *(_QWORD *)result = a4;
      *(_BYTE *)(result + 8) = a5;
      *(_QWORD *)(result + 16) = v5;
      return a3;
    }
    v6 = a4 - 1;
    if (a4 == 1)
    {
      a3 = 1;
      v5 = 1;
      goto LABEL_30;
    }
    v7 = a4 - 2;
    if (a4 - 2 >= (unint64_t)(a3 - 2))
      v7 = a3 - 2;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 >= 0x11)
    {
      v12 = v8 & 0xF;
      if ((v8 & 0xF) == 0)
        v12 = 16;
      v13 = v8 - v12;
      v10 = v8 - v12 + 1;
      v11 = &a2[v13];
      v9 = v13 + 2;
      v14 = vdupq_n_s8(a5);
      v15 = (int8x16_t *)(a2 + 1);
      do
      {
        *v15++ = v14;
        v13 -= 16;
      }
      while (v13);
    }
    else
    {
      v9 = 2;
      v10 = 1;
      v11 = a2;
    }
    v16 = 0;
    v17 = v10 - a4;
    v18 = v11 + 1;
    while (v17 + v16)
    {
      v18[v16] = a5;
      if (!(v9 - a3 + v16))
      {
        v5 = v10 + v16 + 1;
        goto LABEL_30;
      }
      if (v10 - a3 + v16 == -1)
        goto LABEL_32;
      ++v16;
      if (!(v17 + v16))
      {
        a3 = v9 + v16 - 1;
        v5 = a4;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

void _s15swtransparencyd22TransparencyByteBufferV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_10008E988(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (BYTE6(a2) >= a1)
  {
    Data._Representation.subscript.getter(a1, BYTE6(a2), a3);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x10008EA58);
}

unint64_t sub_10008EA80()
{
  unint64_t result;

  result = qword_100128F18;
  if (!qword_100128F18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TransparencyTLSError, &type metadata for TransparencyTLSError);
    atomic_store(result, (unint64_t *)&qword_100128F18);
  }
  return result;
}

unint64_t sub_10008EACC()
{
  unint64_t result;

  result = qword_100128F20;
  if (!qword_100128F20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TransparencyByteBuffer, &type metadata for TransparencyByteBuffer);
    atomic_store(result, (unint64_t *)&qword_100128F20);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TransparencyTLSError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TransparencyTLSError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10008EBEC + 4 * byte_1000DEC75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10008EC20 + 4 * byte_1000DEC70[v4]))();
}

uint64_t sub_10008EC20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008EC28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008EC30);
  return result;
}

uint64_t sub_10008EC3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008EC44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10008EC48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008EC50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10008EC5C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TransparencyTLSError()
{
  return &type metadata for TransparencyTLSError;
}

uint64_t destroy for TransparencyByteBuffer(uint64_t a1)
{
  return sub_100022F44(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *_s15swtransparencyd22TransparencyByteBufferVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  sub_100022F88(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for TransparencyByteBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_100022F88(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100022F44(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for TransparencyByteBuffer(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100022F44(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyByteBuffer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TransparencyByteBuffer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyByteBuffer()
{
  return &type metadata for TransparencyByteBuffer;
}

unint64_t sub_10008EE14()
{
  unint64_t result;

  result = qword_100128F28;
  if (!qword_100128F28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TransparencyTLSError, &type metadata for TransparencyTLSError);
    atomic_store(result, (unint64_t *)&qword_100128F28);
  }
  return result;
}

uint64_t sub_10008EE58(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001D138(&qword_100128F40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008EE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_10008EF00(a1, a2, *(_QWORD *)(v3 + 16), **(_QWORD **)(v3 + 32), *(_BYTE *)(*(_QWORD *)(v3 + 32) + 8));
  if (!v4)
  {
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_QWORD *)(a3 + 24) = v9;
  }
  return result;
}

uint64_t sub_10008EED8(uint64_t a1, uint64_t a2)
{
  return Data._Representation.append(contentsOf:)(a1, a2);
}

uint64_t sub_10008EF00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  if (!result)
    return a4;
  if (!__OFSUB__(a2 - result, a3))
  {
    sub_10008E800((uint64_t)&v5, (_BYTE *)(result + a3), a2 - result - a3, a4, a5);
    return v5;
  }
  __break(1u);
  return result;
}

BOOL sub_10008EF74(uint64_t a1)
{
  return a1 != 1;
}

Swift::Int sub_10008EF80()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

void sub_10008EFC0()
{
  Hasher._combine(_:)(1uLL);
}

Swift::Int sub_10008EFE4(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

_QWORD *sub_10008F020@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 1;
  return result;
}

void sub_10008F034(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10008F040()
{
  return 0x654667614279656BLL;
}

uint64_t sub_10008F060()
{
  return 0x6D6974206B736154;
}

unint64_t sub_10008F080()
{
  return 0xD00000000000001FLL;
}

unint64_t sub_10008F09C()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v3;

  v0 = sub_10001D138(&qword_100127E50);
  inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_1000DC1E0;
  *(_QWORD *)(inited + 32) = 0x656D614E6B736174;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = 0x654667614279656BLL;
  *(_QWORD *)(inited + 56) = 0xEB00000000686374;
  return sub_10004FD2C(inited);
}

uint64_t sub_10008F11C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008FE80();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10008F144(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_10008FE80();
  v3 = sub_10008FEC4();
  v4 = sub_10004B96C();
  return Error<>._code.getter(a1, v2, v3, v4);
}

uint64_t sub_10008F18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002AC5C(a1, (uint64_t)v14, &qword_100127220);
  v15 = (_QWORD *)swift_allocObject(&unk_10010ABD0, 72, 7);
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = a6;
  v15[5] = a4;
  v15[6] = a5;
  v15[7] = a2;
  v15[8] = a3;
  v16 = sub_10008FC2C((uint64_t)v14, (uint64_t)&unk_100128F50, (uint64_t)v15, a6);
  sub_100076504(a1);
  return v16;
}

uint64_t sub_10008F270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[2] = a1;
  v8[3] = a4;
  return swift_task_switch(sub_10008F290, 0, 0);
}

uint64_t sub_10008F290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 64) = v4;
  v5 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_10008F334;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 56), 0, 0, &unk_100128F80, v4, *(_QWORD *)(v0 + 56));
}

uint64_t sub_10008F334()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10008F3A8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 64));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10008F3A8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F3DC()
{
  return sub_10008FFA0(72);
}

uint64_t sub_10008F3E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;

  v4 = *(_QWORD *)(v1 + 32);
  v8 = *(_OWORD *)(v1 + 56);
  v5 = swift_task_alloc(dword_100128F4C);
  v6 = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10001E4EC;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v8;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_10008F290, 0, 0);
}

uint64_t sub_10008F46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v8 = type metadata accessor for Optional(0, a7);
  v7[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001D138(&qword_100127220);
  v7[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008F500, 0, 0);
}

uint64_t sub_10008F500()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v14;

  v1 = v0[12];
  v2 = v0[8];
  v14 = v0[7];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject(&unk_10010AC88, 56, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = v5;
  v8[6] = v3;
  swift_retain(v3);
  v9 = sub_10001D1C4(&qword_100127AE0);
  v0[13] = v9;
  v10 = type metadata accessor for ThrowingTaskGroup(0, v2, v9, &protocol self-conformance witness table for Error);
  sub_10008F8B4(v1, (uint64_t)&unk_100128F90, (uint64_t)v8, v10);
  sub_100076504(v1);
  v7(v1, 1, 1, v6);
  v11 = (_QWORD *)swift_allocObject(&unk_10010ACB0, 56, 7);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v2;
  v11[5] = v4;
  v11[6] = v14;
  sub_10008F8B4(v1, (uint64_t)&unk_100128FA0, (uint64_t)v11, v10);
  sub_100076504(v1);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
  v0[14] = v12;
  *v12 = v0;
  v12[1] = sub_10008F68C;
  return ThrowingTaskGroup.next(isolation:)(v0[11], 0, 0, v10);
}

uint64_t sub_10008F68C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10008F814;
  else
    v3 = sub_10008F6F0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008F6F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v1, *(_QWORD *)(v0 + 72));
    v4 = type metadata accessor for CancellationError(0);
    v5 = sub_100025DB4(&qword_100128EE0, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
    swift_allocError(v4, v5, 0, 0);
    v6 = CancellationError.init()();
    swift_willThrow(v6);
    v7 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v7);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 16), v1, v2);
    ThrowingTaskGroup.cancelAll()();
    swift_task_dealloc(v8);
    swift_task_dealloc(v1);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F814()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008F850(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_10001E4EC;
  return v8(a1);
}

uint64_t sub_10008F8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v30[3];
  _QWORD v31[4];

  v5 = v4;
  v10 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v10);
  v12 = (char *)&v30[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002AC5C(a1, (uint64_t)v12, &qword_100127220);
  v13 = type metadata accessor for TaskPriority(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v15 == 1)
  {
    sub_100076504((uint64_t)v12);
    v16 = 12544;
    v17 = *(_QWORD *)(a3 + 16);
    if (v17)
    {
LABEL_3:
      v18 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v17);
      swift_unknownObjectRetain(v17);
      v20 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
      v22 = v21;
      swift_unknownObjectRelease(v17);
      goto LABEL_6;
    }
  }
  else
  {
    v23 = TaskPriority.rawValue.getter(v15);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    v16 = v23 | 0x3100;
    v17 = *(_QWORD *)(a3 + 16);
    if (v17)
      goto LABEL_3;
  }
  v20 = 0;
  v22 = 0;
LABEL_6:
  v24 = *v5;
  v25 = *(_QWORD *)(a4 + 16);
  v26 = (_QWORD *)(v22 | v20);
  if (v22 | v20)
  {
    v31[0] = 0;
    v31[1] = 0;
    v26 = v31;
    v31[2] = v20;
    v31[3] = v22;
  }
  v30[0] = 1;
  v30[1] = v26;
  v30[2] = v24;
  v27 = swift_task_create(v16, v30, v25, a2, a3);
  return swift_release(v27);
}

uint64_t sub_10008FA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for ContinuousClock(0);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v5[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008FAA0, 0, 0);
}

uint64_t sub_10008FAA0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100126EB0 + dword_100126EB0);
  v1 = (_QWORD *)swift_task_alloc(unk_100126EB4);
  v0[7] = v1;
  *v1 = v0;
  v1[1] = sub_10008FB18;
  return v3(v0[2], v0[3], 0, 0, 1);
}

uint64_t sub_10008FB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    v6 = sub_10008FBF8;
  else
    v6 = sub_10008FB98;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10008FB98()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = sub_10008FDA0();
  v2 = swift_allocError(&type metadata for TaskNamed, v1, 0, 0);
  swift_willThrow(v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008FBF8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008FC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 v19;
  _QWORD v21[4];

  v8 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8);
  if ((_DWORD)v10 == 1)
  {
    sub_100076504(a1);
    v11 = 7168;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
    {
LABEL_6:
      v18 = 0;
      return swift_task_create(v11, v18, a4, a2, a3);
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    v11 = v19 | 0x1C00;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
      goto LABEL_6;
  }
  v13 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v12);
  swift_unknownObjectRetain(v12);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
  v17 = v16;
  swift_unknownObjectRelease(v12);
  if (!(v17 | v15))
    goto LABEL_6;
  v21[0] = 0;
  v21[1] = 0;
  v18 = v21;
  v21[2] = v15;
  v21[3] = v17;
  return swift_task_create(v11, v18, a4, a2, a3);
}

unint64_t sub_10008FD58()
{
  unint64_t result;

  result = qword_100128F58;
  if (!qword_100128F58)
  {
    result = swift_getWitnessTable(&unk_1000DEE94, &type metadata for TaskNamed);
    atomic_store(result, (unint64_t *)&qword_100128F58);
  }
  return result;
}

unint64_t sub_10008FDA0()
{
  unint64_t result;

  result = qword_100128F60;
  if (!qword_100128F60)
  {
    result = swift_getWitnessTable(&unk_1000DEF34, &type metadata for TaskNamed);
    atomic_store(result, (unint64_t *)&qword_100128F60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TaskNamed(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10008FE24 + 4 * byte_1000DEE88[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10008FE44 + 4 * byte_1000DEE8D[v4]))();
}

_BYTE *sub_10008FE24(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10008FE44(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10008FE4C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10008FE54(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10008FE5C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10008FE64(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TaskNamed()
{
  return &type metadata for TaskNamed;
}

unint64_t sub_10008FE80()
{
  unint64_t result;

  result = qword_100128F68;
  if (!qword_100128F68)
  {
    result = swift_getWitnessTable(&unk_1000DEFBC, &type metadata for TaskNamed);
    atomic_store(result, (unint64_t *)&qword_100128F68);
  }
  return result;
}

unint64_t sub_10008FEC4()
{
  unint64_t result;

  result = qword_100128F70;
  if (!qword_100128F70)
  {
    result = swift_getWitnessTable(&unk_1000DEEFC, &type metadata for TaskNamed);
    atomic_store(result, &qword_100128F70);
  }
  return result;
}

uint64_t sub_10008FF08(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc(dword_100128F7C);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100020638;
  return sub_10008F46C(a1, a2, v7, v8, v9, v10, v6);
}

uint64_t sub_10008FF98()
{
  return sub_10008FFA0(56);
}

uint64_t sub_10008FFA0(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 48));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10008FFD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[5];
  v7 = (_QWORD *)swift_task_alloc(dword_100128F8C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100020638;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100128F88 + dword_100128F88))(a1, v4, v5, v6);
}

uint64_t sub_10009006C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100090090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (_QWORD *)swift_task_alloc(dword_100128F9C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100020638;
  return sub_10008FA40((uint64_t)v4, v5, v6, v2, v3);
}

uint64_t sub_1000900E0(uint64_t a1)
{
  return sub_100090A9C(a1, qword_100131600);
}

uint64_t sub_1000900EC()
{
  return sub_100090B34(&qword_1001307E0, (uint64_t)qword_100131600, (uint64_t)sub_1000900E0);
}

uint64_t sub_100090108@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1001307E0 != -1)
    swift_once(&qword_1001307E0, sub_1000900E0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131600);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100090178(uint64_t a1, char a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 + 65) = a2;
  *(double *)(v3 + 80) = a3;
  *(_QWORD *)(v3 + 72) = a1;
  v4 = sub_10001D138(&qword_100127220);
  *(_QWORD *)(v3 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000901DC, 0, 0);
}

uint64_t sub_1000901DC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_BYTE *)(v0 + 65);
  v3 = *(double *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v1, 1, 1, v5);
  v7 = static Duration.seconds(_:)(v6, v3);
  v9 = v8;
  sub_10002E424(v4, v0 + 16);
  v10 = swift_allocObject(&unk_10010ADB0, 57, 7);
  sub_100032478((__int128 *)(v0 + 16), v10 + 16);
  *(_BYTE *)(v10 + 56) = v2;
  v11 = sub_100090A54();
  v12 = sub_10008F18C(v1, v7, v9, (uint64_t)&unk_100128FB8, v10, v11);
  *(_QWORD *)(v0 + 96) = v12;
  v13 = (_QWORD *)swift_task_alloc(async function pointer to Task.result.getter[1]);
  *(_QWORD *)(v0 + 104) = v13;
  v14 = sub_10001D138(&qword_100127AE0);
  *v13 = v0;
  v13[1] = sub_100090318;
  return Task.result.getter(v0 + 56, v12, v11, v14, &protocol self-conformance witness table for Error);
}

uint64_t sub_100090318()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_10009036C, 0, 0);
}

uint64_t sub_10009036C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 56);
  if ((*(_BYTE *)(v0 + 64) & 1) != 0)
  {
    if (qword_1001307E0 != -1)
      swift_once(&qword_1001307E0, sub_1000900E0);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100020804(v2, (uint64_t)qword_100131600);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Timed out waiting to configure public key bag", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);

    swift_willThrow(v9);
    swift_release(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 88);
    swift_release(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }
}

uint64_t sub_1000904B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 240) = a3;
  *(_QWORD *)(v3 + 136) = a1;
  *(_QWORD *)(v3 + 144) = a2;
  return swift_task_switch(sub_1000904D0, 0, 0);
}

uint64_t sub_1000904D0()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(unsigned __int8 *)(v0 + 240);
  v2 = *(_QWORD **)(v0 + 144);
  type metadata accessor for SWTPublicKeyBag(0);
  sub_10002E424((uint64_t)v2, v0 + 16);
  *(_QWORD *)(v0 + 152) = sub_10006DF60((_QWORD *)(v0 + 16));
  v3 = v2[3];
  v4 = v2[4];
  sub_100022F20(v2, v3);
  v5 = *(_QWORD **)(v0 + 144);
  if (v1 == 1)
  {
    v6 = v0 + 96;
    v8 = v2[3];
    v7 = v2[4];
    sub_100022F20(v5, v8);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v8, v7);
    *(_QWORD *)(v0 + 160) = v9;
    v10 = *(int **)(v4 + 104);
    v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 168) = v11;
    v12 = sub_10009062C;
  }
  else
  {
    v6 = v0 + 56;
    v14 = v2[3];
    v13 = v2[4];
    sub_100022F20(v5, v14);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 48))(v14, v13);
    *(_QWORD *)(v0 + 192) = v9;
    v15 = *(int **)(v4 + 104);
    v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
    v11 = (_QWORD *)swift_task_alloc(v15[1]);
    *(_QWORD *)(v0 + 200) = v11;
    v12 = sub_100090748;
  }
  *v11 = v0;
  v11[1] = v12;
  return v17(v6, v9, v3, v4);
}

uint64_t sub_10009062C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  v1 = *v0;
  v2 = *v0 + 96;
  v3 = *(void **)(*v0 + 160);
  v4 = *(_QWORD *)(*v0 + 152);
  v9 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 168));

  v5 = *(int **)(*(_QWORD *)v4 + 336);
  v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v1 + 176) = v6;
  *v6 = v9;
  v6[1] = sub_1000906C0;
  return v8(v2);
}

uint64_t sub_1000906C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v3);
  sub_100023CAC(v2 + 12);
  if (v0)
  {
    v4 = sub_100090954;
    v5 = 0;
  }
  else
  {
    v5 = v2[19];
    v2[28] = *(_QWORD *)(*(_QWORD *)v5 + 152);
    v4 = sub_100090864;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_100090748()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  v1 = *v0;
  v2 = *v0 + 56;
  v3 = *(void **)(*v0 + 192);
  v4 = *(_QWORD *)(*v0 + 152);
  v9 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 200));

  v5 = *(int **)(*(_QWORD *)v4 + 328);
  v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v1 + 208) = v6;
  *v6 = v9;
  v6[1] = sub_1000907DC;
  return v8(v2);
}

uint64_t sub_1000907DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  sub_100023CAC(v2 + 7);
  if (v0)
  {
    v4 = sub_100090988;
    v5 = 0;
  }
  else
  {
    v5 = v2[19];
    v2[28] = *(_QWORD *)(*(_QWORD *)v5 + 152);
    v4 = sub_100090864;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_100090864()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 232) = (*(uint64_t (**)(void))(v0 + 224))();
  return swift_task_switch(sub_1000908A8, 0, 0);
}

uint64_t sub_1000908A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 152);
  if (v1)
  {
    v3 = *(_QWORD **)(v0 + 136);
    swift_release(*(_QWORD *)(v0 + 152));
    *v3 = v1;
  }
  else
  {
    v4 = type metadata accessor for SWTStateMachineError(0);
    v5 = sub_10009167C();
    swift_allocError(v4, v5, 0, 0);
    v7 = swift_storeEnumTagMultiPayload(v6, v4, 5);
    swift_willThrow(v7);
    swift_release(v2);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100090954()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100090988()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000909BC()
{
  uint64_t v0;

  sub_100023CAC((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1000909E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = v1 + 16;
  v5 = *(_BYTE *)(v1 + 56);
  v6 = swift_task_alloc(dword_100128FB4);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_10001E4EC;
  *(_BYTE *)(v6 + 240) = v5;
  *(_QWORD *)(v6 + 136) = a1;
  *(_QWORD *)(v6 + 144) = v4;
  return swift_task_switch(sub_1000904D0, 0, 0);
}

unint64_t sub_100090A54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100126F78;
  if (!qword_100126F78)
  {
    v1 = objc_opt_self(TransparencyPublicKeyBag);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100126F78);
  }
  return result;
}

uint64_t sub_100090A90(uint64_t a1)
{
  return sub_100090A9C(a1, qword_100131618);
}

uint64_t sub_100090A9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger(0);
  sub_100023D0C(v3, a2);
  sub_100020804(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001000E17A0, 0xD000000000000021, 0x80000001000E4220);
}

uint64_t sub_100090B18()
{
  return sub_100090B34(qword_1001307E8, (uint64_t)qword_100131618, (uint64_t)sub_100090A90);
}

uint64_t sub_100090B34(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for Logger(0);
  return sub_100020804(v4, a2);
}

uint64_t sub_100090B74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1001307E8[0] != -1)
    swift_once(qword_1001307E8, sub_100090A90);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100020804(v2, (uint64_t)qword_100131618);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100090BE4(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 64, 7);
  *(_QWORD *)(v5 + 16) = a1;
  sub_100032478(a2, v5 + 24);
  return v5;
}

uint64_t sub_100090C34(uint64_t a1, __int128 *a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  sub_100032478(a2, v2 + 24);
  return v2;
}

uint64_t sub_100090C5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_100128FC8 + dword_100128FC8);
  v3 = (_QWORD *)swift_task_alloc(unk_100128FCC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100032690;
  return v5(a1);
}

uint64_t sub_100090CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = sub_10001D138(&qword_100127220);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001307E8[0] != -1)
    swift_once(qword_1001307E8, sub_100090A90);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100020804(v5, (uint64_t)qword_100131618);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "triggerPublicKeyBagFetch", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject(&unk_10010ADD8, 40, 7);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v1;
  swift_retain(v1);
  v12 = sub_10001D3C0((uint64_t)v4, (uint64_t)&unk_100128FD8, (uint64_t)v11);
  return swift_release(v12);
}

uint64_t sub_100090E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100090E4C, 0, 0);
}

uint64_t sub_100090E4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[6];
  v3 = v1[7];
  sub_100022F20(v1 + 3, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 24) = v5;
  *v5 = v0;
  v5[1] = sub_100032C20;
  return v7(v2, v3);
}

uint64_t sub_100090EC8()
{
  uint64_t v0;

  sub_100023CAC((_QWORD *)(v0 + 24));
  return v0;
}

uint64_t sub_100090EEC()
{
  uint64_t v0;

  sub_100023CAC((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64, 7);
}

id sub_100090F18()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)v0 + 16);
}

uint64_t sub_100090F24()
{
  return sub_100090CBC();
}

uint64_t sub_100090F44(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_100128FC8 + dword_100128FC8);
  v3 = (_QWORD *)swift_task_alloc(unk_100128FCC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000916C4;
  return v5(a1);
}

uint64_t sub_100090FA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[3] = a1;
  v2 = sub_10001D138(&qword_100127170);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URLRequest(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v1[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v1[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[9] = v6;
  v1[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100091050, 0, 0);
}

uint64_t sub_100091050()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;

  if (qword_1001307E8[0] != -1)
    swift_once(qword_1001307E8, sub_100090A90);
  v1 = v0[3];
  v3 = v0[9];
  v2 = v0[10];
  v5 = v0[7];
  v4 = v0[8];
  v6 = v0[5];
  v7 = v0[6];
  v8 = sub_100020804(v4, (uint64_t)qword_100131618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v8, v4);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v1, v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v33 = v11;
    v12 = v0[4];
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v34 = v32;
    *(_DWORD *)v13 = 136315138;
    URLRequest.url.getter(v32);
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
    v17 = v0[4];
    if ((_DWORD)v16 == 1)
    {
      sub_1000202F0(v0[4], &qword_100127170);
      v18 = 0xEB000000004C5255;
      v19 = 0x206E776F6E6B6E75;
    }
    else
    {
      v19 = URL.description.getter(v16);
      v18 = v23;
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
    }
    v29 = v0[9];
    v24 = v0[7];
    v30 = v0[8];
    v31 = v0[10];
    v26 = v0[5];
    v25 = v0[6];
    v0[2] = sub_1000230D0(v19, v18, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    _os_log_impl((void *)&_mh_execute_header, v10, v33, "Fetching public key bag from %s", v13, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  }
  else
  {
    v21 = v0[9];
    v20 = v0[10];
    v22 = v0[8];
    (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  v0[11] = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
  v27 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
  v0[12] = v27;
  *v27 = v0;
  v27[1] = sub_100091348;
  return NSURLSession.data(for:delegate:)(v0[3], 0);
}

uint64_t sub_100091348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 96);
  *(_QWORD *)(v5 + 104) = a1;
  *(_QWORD *)(v5 + 112) = a2;
  *(_QWORD *)(v5 + 120) = a3;
  *(_QWORD *)(v5 + 128) = v3;
  swift_task_dealloc(v6);
  if (v3)
  {
    v7 = sub_1000335A4;
  }
  else
  {

    v7 = sub_1000913C0;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000913C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  v4 = *(void **)(v0 + 120);
  if (v3)
  {
    v5 = (void *)v3;
    v6 = v4;
    v7 = objc_msgSend(v5, "statusCode");
    v4 = *(void **)(v0 + 120);
    if (v7 == (id)200)
    {
      v8 = *(_QWORD *)(v0 + 80);
      v9 = *(_QWORD *)(v0 + 56);
      v10 = *(_QWORD *)(v0 + 32);

      swift_task_dealloc(v8);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    }
    v13 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112);
    v17 = objc_msgSend(v5, "statusCode");
    v18 = sub_1000915D4();
    v19 = swift_allocError(&type metadata for SWTKeyBagFetcher.SWTKeyBagFetcherError, v18, 0, 0);
    *(_QWORD *)v20 = v17;
    *(_BYTE *)(v20 + 8) = 0;
    swift_willThrow(v19);

  }
  else
  {
    v13 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112);
    v14 = sub_1000915D4();
    v15 = swift_allocError(&type metadata for SWTKeyBagFetcher.SWTKeyBagFetcherError, v14, 0, 0);
    *(_QWORD *)v16 = 0;
    *(_BYTE *)(v16 + 8) = 1;
    swift_willThrow(v15);
  }

  sub_100022F44(v13, v12);
  v21 = *(_QWORD *)(v0 + 56);
  v22 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100091544()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100091570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100128FD4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001E4EC;
  v3[2] = v2;
  return swift_task_switch(sub_100090E4C, 0, 0);
}

unint64_t sub_1000915D4()
{
  unint64_t result;

  result = qword_100128FE0;
  if (!qword_100128FE0)
  {
    result = swift_getWitnessTable(&unk_1000DF068, &type metadata for SWTKeyBagFetcher.SWTKeyBagFetcherError);
    atomic_store(result, (unint64_t *)&qword_100128FE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeybagReloader()
{
  return &type metadata for KeybagReloader;
}

uint64_t type metadata accessor for SWTKeyBagFetcher()
{
  return objc_opt_self(_TtC15swtransparencyd16SWTKeyBagFetcher);
}

ValueMetadata *type metadata accessor for SWTKeyBagFetcher.SWTKeyBagFetcherError()
{
  return &type metadata for SWTKeyBagFetcher.SWTKeyBagFetcherError;
}

uint64_t sub_100091658()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10009167C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001271A0;
  if (!qword_1001271A0)
  {
    v1 = type metadata accessor for SWTStateMachineError(255);
    result = swift_getWitnessTable(&unk_1000DE57C, v1);
    atomic_store(result, (unint64_t *)&qword_1001271A0);
  }
  return result;
}

uint64_t sub_1000916C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002E424(v1 + 112, a1);
}

uint64_t sub_1000916E4()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 152));
}

uint64_t sub_1000916EC()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 160));
}

uint64_t sub_1000916F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 168, 15);
  sub_100091730(a1);
  return v3;
}

uint64_t sub_100091730(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t PublicKeyState;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v46;
  __int128 v48[2];

  v2 = v1;
  swift_defaultActor_initialize(v1);
  type metadata accessor for SMSemaphore();
  v4 = sub_1000786E8();
  v5 = sub_10001D138(&qword_1001290A0);
  v6 = swift_allocObject(v5, 192, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000DF130;
  sub_10002E424((uint64_t)a1, (uint64_t)v48);
  v7 = type metadata accessor for Initial();
  v8 = swift_allocObject(v7, 168, 15);
  swift_defaultActor_initialize(v8);
  *(_BYTE *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = &_swiftEmptySetSingleton;
  sub_100032478(v48, v8 + 128);
  v10 = sub_1000202A4(&qword_1001290A8, v9, (uint64_t (*)(uint64_t))type metadata accessor for Initial, (uint64_t)&unk_1000DF190);
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v10;
  type metadata accessor for InitialLoadConfigState();
  sub_10002E424((uint64_t)a1, (uint64_t)v48);
  v11 = sub_1000750EC(v48);
  v12 = sub_1000202A4(&qword_1001290B0, 255, (uint64_t (*)(uint64_t))type metadata accessor for InitialLoadConfigState, (uint64_t)&unk_1000DE3C0);
  *(_QWORD *)(v6 + 48) = v11;
  *(_QWORD *)(v6 + 56) = v12;
  v13 = type metadata accessor for WaitForNetwork();
  v14 = swift_allocObject(v13, 128, 15);
  swift_defaultActor_initialize(v14);
  *(_BYTE *)(v14 + 112) = 2;
  *(_QWORD *)(v14 + 120) = sub_100097190((uint64_t)&off_10010AF70);
  v16 = sub_1000202A4(&qword_1001290B8, v15, (uint64_t (*)(uint64_t))type metadata accessor for WaitForNetwork, (uint64_t)&unk_1000DF1D4);
  *(_QWORD *)(v6 + 64) = v14;
  *(_QWORD *)(v6 + 72) = v16;
  type metadata accessor for LoadConfigState();
  sub_10002E424((uint64_t)a1, (uint64_t)v48);
  v17 = sub_100075D1C(v48);
  v18 = sub_1000202A4(&qword_1001290C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for LoadConfigState, (uint64_t)&unk_1000DE404);
  *(_QWORD *)(v6 + 80) = v17;
  *(_QWORD *)(v6 + 88) = v18;
  sub_10002E424((uint64_t)a1, (uint64_t)v48);
  PublicKeyState = type metadata accessor for InitialLoadPublicKeyState();
  v20 = swift_allocObject(PublicKeyState, 176, 15);
  swift_retain(v4);
  swift_defaultActor_initialize(v20);
  *(_BYTE *)(v20 + 112) = 4;
  *(_QWORD *)(v20 + 120) = &_swiftEmptySetSingleton;
  sub_100032478(v48, v20 + 128);
  *(_QWORD *)(v20 + 168) = v4;
  v22 = sub_1000202A4(&qword_1001290C8, v21, (uint64_t (*)(uint64_t))type metadata accessor for InitialLoadPublicKeyState, (uint64_t)&unk_1000DF218);
  *(_QWORD *)(v6 + 96) = v20;
  *(_QWORD *)(v6 + 104) = v22;
  sub_10002E424((uint64_t)a1, (uint64_t)v48);
  v23 = type metadata accessor for ReloadPublicKeyState();
  v24 = swift_allocObject(v23, 168, 15);
  swift_defaultActor_initialize(v24);
  *(_BYTE *)(v24 + 112) = 7;
  *(_QWORD *)(v24 + 120) = &_swiftEmptySetSingleton;
  sub_100032478(v48, v24 + 128);
  v26 = sub_1000202A4(&qword_1001290D0, v25, (uint64_t (*)(uint64_t))type metadata accessor for ReloadPublicKeyState, (uint64_t)&unk_1000DF25C);
  *(_QWORD *)(v6 + 112) = v24;
  *(_QWORD *)(v6 + 120) = v26;
  sub_10002E424((uint64_t)a1, (uint64_t)v48);
  v27 = type metadata accessor for MilestoneDownloadState();
  v28 = swift_allocObject(v27, 168, 15);
  swift_defaultActor_initialize(v28);
  *(_BYTE *)(v28 + 112) = 5;
  *(_QWORD *)(v28 + 120) = &_swiftEmptySetSingleton;
  sub_100032478(v48, v28 + 128);
  v30 = sub_1000202A4(&qword_1001290D8, v29, (uint64_t (*)(uint64_t))type metadata accessor for MilestoneDownloadState, (uint64_t)&unk_1000DF2A0);
  *(_QWORD *)(v6 + 128) = v28;
  *(_QWORD *)(v6 + 136) = v30;
  sub_10002E424((uint64_t)a1, (uint64_t)v48);
  v31 = type metadata accessor for PatConsistencyState();
  v32 = swift_allocObject(v31, 168, 15);
  swift_defaultActor_initialize(v32);
  *(_BYTE *)(v32 + 112) = 6;
  *(_QWORD *)(v32 + 120) = &_swiftEmptySetSingleton;
  sub_100032478(v48, v32 + 128);
  v34 = sub_1000202A4(&qword_1001290E0, v33, (uint64_t (*)(uint64_t))type metadata accessor for PatConsistencyState, (uint64_t)&unk_1000DF2E4);
  *(_QWORD *)(v6 + 144) = v32;
  *(_QWORD *)(v6 + 152) = v34;
  sub_10002E424((uint64_t)a1, (uint64_t)v48);
  v35 = type metadata accessor for DetectSplitViewState();
  v36 = swift_allocObject(v35, 168, 15);
  swift_defaultActor_initialize(v36);
  *(_BYTE *)(v36 + 112) = 8;
  *(_QWORD *)(v36 + 120) = &_swiftEmptySetSingleton;
  sub_100032478(v48, v36 + 128);
  v38 = sub_1000202A4(&qword_1001290E8, v37, (uint64_t (*)(uint64_t))type metadata accessor for DetectSplitViewState, (uint64_t)&unk_1000DF328);
  *(_QWORD *)(v6 + 160) = v36;
  *(_QWORD *)(v6 + 168) = v38;
  sub_10002E424((uint64_t)a1, (uint64_t)v48);
  v39 = type metadata accessor for Ready();
  v40 = swift_allocObject(v39, 168, 15);
  sub_100096848(v48);
  v42 = sub_1000202A4(&qword_1001290F0, v41, (uint64_t (*)(uint64_t))type metadata accessor for Ready, (uint64_t)&unk_1000DF36C);
  *(_QWORD *)(v6 + 176) = v40;
  *(_QWORD *)(v6 + 184) = v42;
  sub_10002E424((uint64_t)a1, v2 + 112);
  *(_QWORD *)(v2 + 160) = v4;
  type metadata accessor for SWTStateMachine(0);
  v43 = a1[3];
  v44 = a1[4];
  sub_100022F20(a1, v43);
  v45 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v44 + 72);
  swift_retain(v4);
  v45(v48, v43, v44);
  v46 = sub_10007A81C(v6, 0, 6, (uint64_t)v48);
  swift_release(v4);
  *(_QWORD *)(v2 + 152) = v46;
  sub_100023CAC(a1);
  return v2;
}

uint64_t sub_100091BC8(__int128 *a1)
{
  return sub_100075D24(a1, 0);
}

uint64_t type metadata accessor for Initial()
{
  return objc_opt_self(_TtC15swtransparencyd7Initial);
}

uint64_t sub_100091BF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 128, 15);
  swift_defaultActor_initialize(v1);
  *(_BYTE *)(v1 + 112) = 2;
  *(_QWORD *)(v1 + 120) = sub_100097190((uint64_t)&off_10010AF98);
  return v1;
}

uint64_t sub_100091C3C(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 176, 15);
  swift_defaultActor_initialize(v5);
  *(_BYTE *)(v5 + 112) = 4;
  *(_QWORD *)(v5 + 120) = &_swiftEmptySetSingleton;
  sub_100032478(a1, v5 + 128);
  *(_QWORD *)(v5 + 168) = a2;
  return v5;
}

uint64_t sub_100091CA4(__int128 *a1)
{
  return sub_100075D24(a1, 7);
}

uint64_t sub_100091CAC(__int128 *a1)
{
  return sub_100075D24(a1, 5);
}

uint64_t sub_100091CB4(__int128 *a1)
{
  return sub_100075D24(a1, 6);
}

uint64_t sub_100091CBC(__int128 *a1)
{
  return sub_100075D24(a1, 8);
}

uint64_t sub_100091CC4(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 168, 15);
  sub_100096848(a1);
  return v3;
}

uint64_t sub_100091D00()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100091D18, 0, 0);
}

uint64_t sub_100091D18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 152);
  *(_QWORD *)(v0 + 24) = v1;
  return swift_task_switch(sub_100091D34, v1, 0);
}

uint64_t sub_100091D34()
{
  uint64_t v0;

  sub_10007ADE4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100091D64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for CancellationError(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100091DC8, 0, 0);
}

uint64_t sub_100091DC8()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  v1 = *(_QWORD *)(v0[6] + 160);
  v0[10] = v1;
  v2 = *(int **)(*(_QWORD *)v1 + 160);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[11] = v3;
  *v3 = v0;
  v3[1] = sub_100091E4C;
  return ((uint64_t (*)(_QWORD, _QWORD, unint64_t, unint64_t))v5)(v0[4], v0[5], 0xD00000000000001DLL, 0x80000001000E4250);
}

uint64_t sub_100091E4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100091ECC, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 72));
  return (*(uint64_t (**)(BOOL))(v3 + 8))(*(_QWORD *)(v3 + 96) == 0);
}

uint64_t sub_100091ECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  v1 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  swift_errorRetain(v1);
  v4 = sub_10001D138(&qword_100127AE0);
  v5 = swift_dynamicCast(v2, v0 + 16, v4, v3, 0);
  v6 = *(_QWORD *)(v0 + 96);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(v0 + 80);
    swift_errorRelease();
    v8 = *(int **)(*(_QWORD *)v7 + 168);
    v20 = (uint64_t (*)(void))((char *)v8 + *v8);
    v9 = (_QWORD *)swift_task_alloc(v8[1]);
    *(_QWORD *)(v0 + 104) = v9;
    *v9 = v0;
    v9[1] = sub_10009212C;
    return v20();
  }
  else
  {
    swift_errorRelease();
    swift_errorRetain(v6);
    v11 = swift_errorRetain(v6);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 96);
    if (v14)
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      swift_errorRetain(v15);
      v18 = _swift_stdlib_bridgeErrorToNSError(v15);
      *(_QWORD *)(v0 + 24) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v16 + 4, v16 + 12);
      *v17 = v18;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "unknown error for isReadyEnoughForXPC %@", v16, 0xCu);
      v19 = sub_10001D138(&qword_100127730);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

    }
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 96) == 0);
  }
}

uint64_t sub_10009212C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_100092180, 0, 0);
}

uint64_t sub_100092180()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 96) == 0);
}

uint64_t sub_1000921D4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = v0;
  return swift_task_switch(sub_1000921EC, v0, 0);
}

uint64_t sub_1000921EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSString v5;
  double v6;
  void *v7;
  uint64_t v8;

  v1 = (_QWORD *)v0[8];
  v2 = v1[17];
  v3 = v1[18];
  sub_100022F20(v1 + 14, v2);
  v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 80))(v2, v3);
  v5 = String._bridgeToObjectiveC()();
  v6 = SFAnalyticsSamplerIntervalOncePerReport;
  v0[6] = sub_1000972C0;
  v0[7] = v1;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100092418;
  v0[5] = &unk_10010B038;
  v7 = _Block_copy(v0 + 2);
  v8 = v0[7];
  swift_retain(v1);
  swift_release(v8);
  objc_msgSend(v4, "addMultiSamplerForName:withTimeInterval:block:", v5, v7, v6);
  _Block_release(v7);

  return ((uint64_t (*)(void))v0[1])();
}

unint64_t sub_100092300(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D138(&qword_100129A18);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10003AFB8(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Class sub_100092418(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  sub_1000978A0();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  return isa;
}

void *sub_100092480()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10009248C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = type metadata accessor for Date(0);
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TransparencySWIssue(0);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[12] = v6;
  v3[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100092510, v2, 0);
}

uint64_t sub_100092510()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  int *v20;

  v1 = v0[13];
  v2 = v0[10];
  v19 = v0[11];
  v4 = v0[8];
  v3 = (_QWORD *)v0[9];
  v18 = v0[12];
  v5 = v3[17];
  v6 = v3[18];
  v7 = sub_100022F20(v3 + 14, v5);
  v8 = SWTFollowUpType.rawValue.getter(v7);
  v10 = v9;
  Date.init()(v8);
  swift_bridgeObjectRetain(v4);
  TransparencySWIssue.init(issue:posted:slh:)(v8, v10, v2, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 128))(v1, v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v1, v19);
  v11 = v3[17];
  v12 = v3[18];
  v3 += 14;
  sub_100022F20(v3, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v11, v12);
  v13 = v0[5];
  v14 = v0[6];
  sub_100022F20(v0 + 2, v13);
  v15 = *(int **)(v14 + 16);
  v20 = (int *)((char *)v15 + *v15);
  v16 = (_QWORD *)swift_task_alloc(v15[1]);
  v0[14] = v16;
  *v16 = v0;
  v16[1] = sub_100092668;
  return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, uint64_t, uint64_t))v20)(v0[7], v3, v0[8], v13, v14);
}

uint64_t sub_100092668()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_task_switch(sub_1000926C0, v1, 0);
}

uint64_t sub_1000926C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  sub_100023CAC((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092708()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_100092720, v0, 0);
}

uint64_t sub_100092720()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = (_QWORD *)v0[7];
  v2 = v1[17];
  v3 = v1[18];
  sub_100022F20(v1 + 14, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
  v4 = v0[5];
  v5 = v0[6];
  sub_100022F20(v0 + 2, v4);
  v6 = *(int **)(v5 + 40);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v0[8] = v7;
  *v7 = v0;
  v7[1] = sub_1000927CC;
  return v9(v4, v5);
}

uint64_t sub_1000927CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_100092820, v1, 0);
}

uint64_t sub_100092820()
{
  uint64_t v0;

  sub_100023CAC((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092850()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100092868, v0, 0);
}

uint64_t sub_100092868()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001288FC);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_100097928;
  return sub_10007C4DC(4);
}

uint64_t sub_1000928BC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000928D4, v0, 0);
}

uint64_t sub_1000928D4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001288FC);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_100097928;
  return sub_10007C4DC(3);
}

uint64_t sub_100092928()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100092940, v0, 0);
}

uint64_t sub_100092940()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001288FC);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_100097928;
  return sub_10007C4DC(1);
}

uint64_t sub_100092994()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000929AC, v0, 0);
}

uint64_t sub_1000929AC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001288FC);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_100067298;
  return sub_10007C4DC(5);
}

uint64_t sub_100092A00(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_BYTE *)(v3 + 40) = a2;
  return swift_task_switch(sub_100092A1C, v2, 0);
}

uint64_t sub_100092A1C()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 152);
  if (*(_BYTE *)(v0 + 40) == 1)
  {
    *(_QWORD *)(v0 + 24) = v1;
    return swift_task_switch(sub_100092AAC, v1, 0);
  }
  else
  {
    v3 = sub_100020644();
    v4 = (_QWORD *)swift_task_alloc(dword_100128924);
    *(_QWORD *)(v0 + 32) = v4;
    *v4 = v0;
    v4[1] = sub_10006639C;
    return sub_10007E5EC(v3 & 1);
  }
}

uint64_t sub_100092AAC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_100081B14();
  return swift_task_switch(sub_100092AE8, v1, 0);
}

uint64_t sub_100092AE8()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;

  v1 = sub_100020644();
  v2 = (_QWORD *)swift_task_alloc(dword_100128924);
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = sub_10006639C;
  return sub_10007E5EC(v1 & 1);
}

uint64_t sub_100092B48(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for URL(0);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001D138(&qword_100129150) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v5);
  v2[13] = swift_task_alloc(v5);
  return swift_task_switch(sub_100092BDC, v1, 0);
}

uint64_t sub_100092BDC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD);

  v1 = (_QWORD *)v0[8];
  v2 = v1[17];
  v3 = v1[18];
  sub_100022F20(v1 + 14, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  v0[14] = v4;
  v5 = *(int **)(*(_QWORD *)v4 + 248);
  v8 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v0[15] = v6;
  *v6 = v0;
  v6[1] = sub_100092C74;
  return v8(v0[13]);
}

uint64_t sub_100092C74()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  swift_release(v3);
  v4 = *(_QWORD *)(v2 + 64);
  if (v0)
  {
    swift_errorRelease();
    v5 = sub_10009314C;
  }
  else
  {
    v5 = sub_100092CF0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100092CF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;

  v1 = v0[13];
  v2 = type metadata accessor for TransparencySWSysdiagnose.PublicKeybag(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  v3 = (_QWORD *)v0[8];
  v4 = v3[17];
  v5 = v3[18];
  sub_100022F20(v3 + 14, v4);
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  LODWORD(v5) = objc_msgSend(v6, "allowsInternalSecurityPolicies");
  swift_unknownObjectRelease(v6);
  countAndFlagsBits = 0;
  object = 0;
  if ((_DWORD)v5)
  {
    v10 = v0[10];
    v9 = v0[11];
    v11 = (_QWORD *)v0[8];
    v12 = v0[9];
    v13 = v11[17];
    v14 = v11[18];
    sub_100022F20(v11 + 14, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    v15 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
  }
  v0[16] = countAndFlagsBits;
  v0[17] = object;
  v16 = *(_QWORD *)(v0[8] + 152);
  v0[18] = v16;
  return swift_task_switch(sub_100092E0C, v16, 0);
}

uint64_t sub_100092E0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[18];
  v2 = v0[8];
  swift_beginAccess(v1 + 144, v0 + 2, 0, 0);
  v3 = *(_QWORD *)(v1 + 144);
  v0[19] = v3;
  v0[20] = *(_QWORD *)(v1 + 152);
  swift_unknownObjectRetain(v3);
  return swift_task_switch(sub_100092E70, v2, 0);
}

uint64_t sub_100092E70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[18];
  ObjectType = swift_getObjectType(v2);
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  swift_unknownObjectRelease(v2);
  v0[5] = sub_100079DE8(v1);
  v0[6] = v5;
  v6 = *(_QWORD *)(v3 + 112);
  v0[21] = v6;
  v0[22] = *(_QWORD *)(*(_QWORD *)v6 + 112);
  swift_retain(v6);
  return swift_task_switch(sub_100092EFC, v6, 0);
}

uint64_t sub_100092EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 184) = (*(uint64_t (**)(void))(v0 + 176))();
  swift_release(v1);
  return swift_task_switch(sub_100092F48, v2, 0);
}

uint64_t sub_100092F48()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t result;
  int64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    sub_10006C488(0, v2, 0);
    result = sub_100088920(v1);
    v4 = result;
    v6 = v5;
    v8 = v7 & 1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v1 + 32))
    {
      if (((*(_QWORD *)(v1 + 56 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_14;
      if (*(_DWORD *)(v1 + 36) != v6)
        goto LABEL_15;
      v9 = sub_10007875C(*(_BYTE *)(*(_QWORD *)(v1 + 48) + v4));
      v11 = v10;
      v13 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1)
        sub_10006C488(v12 > 1, v13 + 1, 1);
      v14 = *(_QWORD *)(v26 + 184);
      _swiftEmptyArrayStorage[2] = v13 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v13];
      v15[4] = v9;
      v15[5] = v11;
      result = sub_1000889C0(v4, v6, v8 & 1, v14);
      v4 = result;
      v6 = v16;
      v8 = v17 & 1;
      if (!--v2)
      {
        v0 = v26;
        v18 = *(_QWORD *)(v26 + 184);
        sub_100020120(result, v16, v17 & 1);
        swift_bridgeObjectRelease(v18);
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
LABEL_12:
    v19 = *(_QWORD *)(v0 + 40);
    v20 = *(_QWORD *)(v0 + 48);
    v22 = *(_QWORD *)(v0 + 128);
    v21 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 96);
    v23 = *(_QWORD *)(v0 + 104);
    v25 = *(_QWORD *)(v0 + 88);
    sub_1000975A0(v23, v24);
    TransparencySWSysdiagnose.StateMachine.init(state:flags:publicKeybag:containerPath:)(v19, v20, _swiftEmptyArrayStorage, v24, v22, v21);
    sub_1000202F0(v23, &qword_100129150);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10009314C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;

  v1 = v0[13];
  v2 = type metadata accessor for TransparencySWSysdiagnose.PublicKeybag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (_QWORD *)v0[8];
  v4 = v3[17];
  v5 = v3[18];
  sub_100022F20(v3 + 14, v4);
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  LODWORD(v5) = objc_msgSend(v6, "allowsInternalSecurityPolicies");
  swift_unknownObjectRelease(v6);
  countAndFlagsBits = 0;
  object = 0;
  if ((_DWORD)v5)
  {
    v10 = v0[10];
    v9 = v0[11];
    v11 = (_QWORD *)v0[8];
    v12 = v0[9];
    v13 = v11[17];
    v14 = v11[18];
    sub_100022F20(v11 + 14, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    v15 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
  }
  v0[16] = countAndFlagsBits;
  v0[17] = object;
  v16 = *(_QWORD *)(v0[8] + 152);
  v0[18] = v16;
  return swift_task_switch(sub_100092E0C, v16, 0);
}

uint64_t sub_100093268(double a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = v1;
  *(double *)(v2 + 16) = a1;
  return swift_task_switch(sub_100093284, v1, 0);
}

uint64_t sub_100093284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = static Duration.milliseconds(_:)(a1, *(double *)(v1 + 16) * 1000.0);
  v4 = v3;
  v5 = (_QWORD *)swift_task_alloc(dword_10012891C);
  *(_QWORD *)(v1 + 32) = v5;
  *v5 = v1;
  v5[1] = sub_10006639C;
  return sub_10007E434(9, v2, v4);
}

_QWORD *sub_100093308()
{
  _QWORD *v0;

  sub_100023CAC(v0 + 14);
  swift_release(v0[19]);
  swift_release(v0[20]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10009333C()
{
  _QWORD *v0;

  sub_100023CAC(v0 + 14);
  swift_release(v0[19]);
  swift_release(v0[20]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100093370(__int128 *a1)
{
  return sub_100075D8C(a1, 0);
}

uint64_t type metadata accessor for WaitForNetwork()
{
  return objc_opt_self(_TtC15swtransparencyd14WaitForNetwork);
}

uint64_t sub_100093398()
{
  uint64_t v0;

  return sub_100075DEC(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 1);
}

uint64_t sub_1000933A8()
{
  return sub_100097190((uint64_t)&off_10010AFC0);
}

uint64_t sub_1000933B4()
{
  uint64_t v0;

  return sub_100075DEC(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t sub_1000933C4(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(_QWORD);

  v2 = *(int **)(*(_QWORD *)a1 + 216);
  v5 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100093424;
  return v5(0);
}

uint64_t sub_100093424()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(unint64_t))(v2 + 8))(0x8000000000000000);
}

uint64_t sub_100093470()
{
  uint64_t v0;

  swift_defaultActor_initialize(v0);
  *(_BYTE *)(v0 + 112) = 2;
  *(_QWORD *)(v0 + 120) = sub_100097190((uint64_t)&off_10010AFE8);
  return v0;
}

uint64_t sub_1000934A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(*(_QWORD *)v1 + 104);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100076414;
  return v7(a1);
}

uint64_t sub_100093508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(*(_QWORD *)v1 + 112);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100076414;
  return v7(a1);
}

uint64_t sub_10009356C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 168));
}

uint64_t sub_100093574(__int128 *a1, uint64_t a2)
{
  uint64_t v2;

  swift_defaultActor_initialize(v2);
  *(_BYTE *)(v2 + 112) = 4;
  *(_QWORD *)(v2 + 120) = &_swiftEmptySetSingleton;
  sub_100032478(a1, v2 + 128);
  *(_QWORD *)(v2 + 168) = a2;
  return v2;
}

uint64_t sub_1000935CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_10001D138(&qword_100127220);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100093628, v0, 0);
}

uint64_t sub_100093628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v5 = sub_1000202A4(&qword_100129198, v4, (uint64_t (*)(uint64_t))type metadata accessor for InitialLoadPublicKeyState, (uint64_t)&unk_1000DF1F0);
  v6 = (_QWORD *)swift_allocObject(&unk_10010B070, 40, 7);
  v6[2] = v1;
  v6[3] = v5;
  v6[4] = v1;
  swift_retain_n(v1, 2);
  v7 = sub_100075B10(v2, (uint64_t)&unk_1001291A0, (uint64_t)v6) | 0x4000000000000000;
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_1000936F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4[7] = a1;
  v4[8] = a4;
  v6 = type metadata accessor for Logger(0);
  v4[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[11] = swift_task_alloc(v8);
  v4[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_100093764, a4, 0);
}

uint64_t sub_100093764()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  int *v11;

  v1 = (_QWORD *)v0[8];
  v2 = v1 + 16;
  v3 = v1[19];
  v4 = v1[20];
  sub_100022F20(v1 + 16, v3);
  v5 = v1[19];
  v6 = v1[20];
  sub_100022F20(v2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(v5, v6);
  v0[13] = v7;
  v8 = *(int **)(v4 + 104);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[14] = v9;
  *v9 = v0;
  v9[1] = sub_100093834;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v11)(v0 + 2, v7, v3, v4);
}

uint64_t sub_100093834()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(*(_QWORD *)v0 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));

  return swift_task_switch(sub_100093890, v2, 0);
}

uint64_t sub_100093890()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD *);

  v1 = (_QWORD *)v0[8];
  v2 = v1[19];
  v3 = v1[20];
  sub_100022F20(v1 + 16, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  v0[15] = v4;
  v5 = *(int **)(*(_QWORD *)v4 + 328);
  v8 = (uint64_t (*)(_QWORD *))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v0[16] = v6;
  *v6 = v0;
  v6[1] = sub_10009392C;
  return v8(v0 + 2);
}

uint64_t sub_10009392C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 120);
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(v4);
  if (v0)
    v6 = sub_100093BB0;
  else
    v6 = sub_10009399C;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10009399C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(void);

  v1 = sub_100023CAC(v0 + 2);
  v2 = Logger.init()(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ready enough, unblocking XPC", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[12];
  v7 = v0[9];
  v8 = v0[10];
  v9 = v0[8];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = *(int **)(**(_QWORD **)(v9 + 168) + 168);
  v13 = (uint64_t (*)(void))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  v0[18] = v11;
  *v11 = v0;
  v11[1] = sub_100093AA4;
  return v13();
}

uint64_t sub_100093AA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_100093AFC, v1, 0);
}

uint64_t sub_100093AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  **(_BYTE **)(v0 + 56) = 9;
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100093B44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 152));
  v3 = *(_QWORD *)(v2 + 64);
  if (v0)
  {
    swift_errorRelease();
    v4 = sub_100093D48;
  }
  else
  {
    v4 = sub_100097920;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100093BB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = v0[17];
  v2 = sub_100023CAC(v0 + 2);
  Logger.init()(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[17];
  if (v6)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "load config threw error: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_10001D138(&qword_100127730);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  v13 = v0[10];
  v12 = v0[11];
  v14 = v0[9];

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  v15 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v0[19] = v15;
  *v15 = v0;
  v15[1] = sub_100093B44;
  return static Task<>.sleep(nanoseconds:)(30000000000);
}

uint64_t sub_100093D48()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  int *v11;

  swift_errorRelease();
  v1 = (_QWORD *)v0[8];
  v2 = v1 + 16;
  v3 = v1[19];
  v4 = v1[20];
  sub_100022F20(v1 + 16, v3);
  v5 = v1[19];
  v6 = v1[20];
  sub_100022F20(v2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(v5, v6);
  v0[13] = v7;
  v8 = *(int **)(v4 + 104);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[14] = v9;
  *v9 = v0;
  v9[1] = sub_100093834;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v11)(v0 + 2, v7, v3, v4);
}

_QWORD *sub_100093E20()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  sub_100023CAC(v0 + 16);
  swift_release(v0[21]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100093E54()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  sub_100023CAC(v0 + 16);
  swift_release(v0[21]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100093E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)(*(_QWORD *)v1 + 136);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100076548;
  return v7(a1);
}

uint64_t sub_100093EEC()
{
  return 7;
}

uint64_t sub_100093EF4(__int128 *a1)
{
  return sub_100075D8C(a1, 7);
}

uint64_t sub_100093EFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v4 = sub_10001D138(&qword_100127220);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[5] = *(_QWORD *)(*(_QWORD *)a1 + 192);
  return swift_task_switch(sub_100093F68, a1, 0);
}

uint64_t sub_100093F68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t))(v0 + 40))(1);
  return swift_task_switch(sub_100093FAC, v1, 0);
}

uint64_t sub_100093FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v5 = sub_1000202A4(&qword_1001291C0, v4, (uint64_t (*)(uint64_t))type metadata accessor for ReloadPublicKeyState, (uint64_t)&unk_1000DF234);
  v6 = (_QWORD *)swift_allocObject(&unk_10010B098, 40, 7);
  v6[2] = v1;
  v6[3] = v5;
  v6[4] = v1;
  swift_retain_n(v1, 2);
  v7 = sub_100075B10(v2, (uint64_t)&unk_1001291C8, (uint64_t)v6) | 0x4000000000000000;
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_100094074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  v4[7] = a1;
  v4[8] = a4;
  v6 = type metadata accessor for Logger(0);
  v4[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[10] = v7;
  v4[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000940D8, a4, 0);
}

uint64_t sub_1000940D8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  int *v11;

  v1 = (_QWORD *)v0[8];
  v2 = v1 + 16;
  v3 = v1[19];
  v4 = v1[20];
  sub_100022F20(v1 + 16, v3);
  v5 = v1[19];
  v6 = v1[20];
  sub_100022F20(v2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(v5, v6);
  v0[12] = v7;
  v8 = *(int **)(v4 + 104);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[13] = v9;
  *v9 = v0;
  v9[1] = sub_1000941A8;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v11)(v0 + 2, v7, v3, v4);
}

uint64_t sub_1000941A8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(*(_QWORD *)v0 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));

  return swift_task_switch(sub_100094204, v2, 0);
}

uint64_t sub_100094204()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD *);

  v1 = (_QWORD *)v0[8];
  v2 = v1[19];
  v3 = v1[20];
  sub_100022F20(v1 + 16, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  v0[14] = v4;
  v5 = *(int **)(*(_QWORD *)v4 + 336);
  v8 = (uint64_t (*)(_QWORD *))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v0[15] = v6;
  *v6 = v0;
  v6[1] = sub_1000942A0;
  return v8(v0 + 2);
}

uint64_t sub_1000942A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 112);
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(v4);
  if (v0)
    v6 = sub_1000944A0;
  else
    v6 = sub_100094310;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100094310()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_BYTE **)(v0 + 56);
  sub_100023CAC((_QWORD *)(v0 + 16));
  *v2 = 9;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009435C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 136));
  v3 = *(_QWORD *)(v2 + 64);
  if (v0)
  {
    swift_errorRelease();
    v4 = sub_10009792C;
  }
  else
  {
    v4 = sub_1000943C8;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000943C8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  int *v11;

  swift_errorRelease();
  v1 = (_QWORD *)v0[8];
  v2 = v1 + 16;
  v3 = v1[19];
  v4 = v1[20];
  sub_100022F20(v1 + 16, v3);
  v5 = v1[19];
  v6 = v1[20];
  sub_100022F20(v2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(v5, v6);
  v0[12] = v7;
  v8 = *(int **)(v4 + 104);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[13] = v9;
  *v9 = v0;
  v9[1] = sub_1000941A8;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v11)(v0 + 2, v7, v3, v4);
}

uint64_t sub_1000944A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = v0[16];
  v2 = sub_100023CAC(v0 + 2);
  Logger.init()(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[16];
  if (v6)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "load config threw error: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_10001D138(&qword_100127730);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  v13 = v0[10];
  v12 = v0[11];
  v14 = v0[9];

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  v15 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v0[17] = v15;
  *v15 = v0;
  v15[1] = sub_10009435C;
  return static Task<>.sleep(nanoseconds:)(30000000000);
}

uint64_t sub_100094638(__int128 *a1)
{
  return sub_100075D8C(a1, 5);
}

uint64_t sub_100094640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 264) = a1;
  *(_QWORD *)(v2 + 272) = v1;
  return swift_task_switch(sub_100094658, v1, 0);
}

uint64_t sub_100094658()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)v0[34];
  v2 = v1[19];
  v3 = v1[20];
  sub_100022F20(v1 + 16, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  v0[35] = v4;
  v0[36] = *(_QWORD *)(*(_QWORD *)v4 + 152);
  return swift_task_switch(sub_1000946CC, v4, 0);
}

uint64_t sub_1000946CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *(_QWORD *)(v0 + 280);
  v2 = (*(uint64_t (**)(void))(v0 + 288))();
  *(_QWORD *)(v0 + 296) = v2;
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 264);
  if (v2)
  {
    *(_QWORD *)(v0 + 304) = *(_QWORD *)(*(_QWORD *)v3 + 200);
    v4 = sub_100094740;
  }
  else
  {
    *(_QWORD *)(v0 + 328) = *(_QWORD *)(*(_QWORD *)v3 + 184);
    v4 = sub_100094B58;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100094740()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 272);
  *(_BYTE *)(v0 + 336) = (*(uint64_t (**)(uint64_t))(v0 + 304))(1) & 1;
  return swift_task_switch(sub_10009478C, v1, 0);
}

uint64_t sub_10009478C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  if ((*(_BYTE *)(v0 + 336) & 1) != 0)
  {

    v1 = *(_QWORD *)(v0 + 264);
    *(_QWORD *)(v0 + 328) = *(_QWORD *)(*(_QWORD *)v1 + 184);
    return swift_task_switch(sub_100094B58, v1, 0);
  }
  else
  {
    v3 = *(_QWORD **)(v0 + 272);
    v4 = v3[19];
    v5 = v3[20];
    sub_100022F20(v3 + 16, v4);
    v6 = *(int **)(v5 + 112);
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 312) = v7;
    *v7 = v0;
    v7[1] = sub_100094860;
    return v8(v0 + 184, v4, v5);
  }
}

uint64_t sub_100094860()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  return swift_task_switch(sub_1000948B8, v1, 0);
}

uint64_t sub_1000948B8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  _QWORD *v21;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];

  v1 = *(void **)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD **)(v0 + 272);
  v4 = v3 + 16;
  v5 = v3[19];
  v6 = v3[20];
  sub_100022F20(v3 + 16, v5);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  v7 = v3[19];
  v8 = v3[20];
  sub_100022F20(v3 + 16, v7);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 48))(v7, v8);
  v10 = v3[19];
  v9 = v3[20];
  sub_100022F20(v3 + 16, v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 64);
  v12 = v1;
  v13 = v11(v10, v9);
  v26 = type metadata accessor for KTSWDB();
  v27 = sub_1000202A4(qword_1001271B0, 255, (uint64_t (*)(uint64_t))type metadata accessor for KTSWDB, (uint64_t)&unk_1000DCBDC);
  *(_QWORD *)&v25 = v13;
  sub_10002E424(v0 + 184, v0 + 224);
  v14 = v3[19];
  v15 = v3[20];
  sub_100022F20(v3 + 16, v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 80))(v14, v15);
  v17 = v3[19];
  v18 = v3[20];
  sub_100022F20(v4, v17);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v18 + 88))(v28, v17, v18);
  swift_retain(v2);
  sub_10004C0E8(v24, v23, (uint64_t)v12, &v25, v2, (__int128 *)(v0 + 224), 0, v16, v0 + 16, (uint64_t)v28);
  sub_10004C990();
  v20 = v19;
  v21 = (_QWORD *)swift_task_alloc(dword_100127E04);
  *(_QWORD *)(v0 + 320) = v21;
  *v21 = v0;
  v21[1] = sub_100094AA0;
  return sub_10004C9B4(v20);
}

uint64_t sub_100094AA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 320));
  v3 = *(_QWORD *)(v2 + 272);
  if (v0)
  {
    swift_errorRelease();
    v4 = sub_100097930;
  }
  else
  {
    v4 = sub_100094B0C;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100094B0C()
{
  uint64_t v0;

  sub_100053810(v0 + 16);
  sub_100023CAC((_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(9);
}

uint64_t sub_100094B58()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 328))(4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(7);
}

uint64_t sub_100094B94()
{
  return 6;
}

uint64_t sub_100094B9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002E424(v1 + 128, a1);
}

uint64_t sub_100094BB8(__int128 *a1)
{
  return sub_100075D8C(a1, 6);
}

uint64_t sub_100094BC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 256) = a1;
  *(_QWORD *)(v2 + 264) = v1;
  return swift_task_switch(sub_100094BD8, v1, 0);
}

uint64_t sub_100094BD8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)v0[33];
  v2 = v1[19];
  v3 = v1[20];
  sub_100022F20(v1 + 16, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  v0[34] = v4;
  v0[35] = *(_QWORD *)(*(_QWORD *)v4 + 152);
  return swift_task_switch(sub_100094C4C, v4, 0);
}

uint64_t sub_100094C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *(_QWORD *)(v0 + 272);
  v2 = (*(uint64_t (**)(void))(v0 + 280))();
  *(_QWORD *)(v0 + 288) = v2;
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 256);
  if (v2)
  {
    *(_QWORD *)(v0 + 296) = *(_QWORD *)(*(_QWORD *)v3 + 200);
    v4 = sub_100094CC0;
  }
  else
  {
    *(_QWORD *)(v0 + 320) = *(_QWORD *)(*(_QWORD *)v3 + 184);
    v4 = sub_1000950B8;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100094CC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 264);
  *(_BYTE *)(v0 + 328) = (*(uint64_t (**)(uint64_t))(v0 + 296))(1) & 1;
  return swift_task_switch(sub_100094D0C, v1, 0);
}

uint64_t sub_100094D0C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  if ((*(_BYTE *)(v0 + 328) & 1) != 0)
  {

    v1 = *(_QWORD *)(v0 + 256);
    *(_QWORD *)(v0 + 320) = *(_QWORD *)(*(_QWORD *)v1 + 184);
    return swift_task_switch(sub_1000950B8, v1, 0);
  }
  else
  {
    v3 = *(_QWORD **)(v0 + 264);
    v4 = v3[19];
    v5 = v3[20];
    sub_100022F20(v3 + 16, v4);
    v6 = *(int **)(v5 + 120);
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 304) = v7;
    *v7 = v0;
    v7[1] = sub_100094DE0;
    return v8(v0 + 176, v4, v5);
  }
}

uint64_t sub_100094DE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  return swift_task_switch(sub_100094E38, v1, 0);
}

uint64_t sub_100094E38()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25[2];

  v1 = *(void **)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD **)(v0 + 264);
  v4 = v2[19];
  v5 = v2[20];
  sub_100022F20(v2 + 16, v4);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  v6 = v2[19];
  v7 = v2[20];
  sub_100022F20(v2 + 16, v6);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
  v8 = v2[19];
  v9 = v2[20];
  sub_100022F20(v2 + 16, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 64);
  v19 = v1;
  v11 = v10(v8, v9);
  v23 = type metadata accessor for KTSWDB();
  v24 = sub_1000202A4(qword_1001271B0, 255, (uint64_t (*)(uint64_t))type metadata accessor for KTSWDB, (uint64_t)&unk_1000DCBDC);
  *(_QWORD *)&v22 = v11;
  sub_10002E424(v0 + 176, v0 + 216);
  v12 = v2[19];
  v13 = v2[20];
  sub_100022F20(v2 + 16, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 80))(v12, v13);
  v15 = v2[19];
  v16 = v2[20];
  sub_100022F20(v2 + 16, v15);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v16 + 88))(v25, v15, v16);
  swift_retain(v3);
  sub_10003C008(v21, v20, (uint64_t)v19, &v22, v3, (__int128 *)(v0 + 216), v14, v25, v0 + 16);
  v17 = (_QWORD *)swift_task_alloc(dword_100127804);
  *(_QWORD *)(v0 + 312) = v17;
  *v17 = v0;
  v17[1] = sub_100095000;
  return sub_10003D9E4();
}

uint64_t sub_100095000()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 312));
  v3 = *(_QWORD *)(v2 + 264);
  if (v0)
  {
    swift_errorRelease();
    v4 = sub_100097934;
  }
  else
  {
    v4 = sub_10009506C;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_10009506C()
{
  uint64_t v0;

  sub_1000408B4(v0 + 16);
  sub_100023CAC((_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(9);
}

uint64_t sub_1000950B8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 320))(3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(7);
}

uint64_t sub_1000950F4()
{
  return 8;
}

uint64_t sub_1000950FC(__int128 *a1)
{
  return sub_100075D8C(a1, 8);
}

uint64_t sub_100095104()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v1[18] = v0;
  v2 = type metadata accessor for TransparencySWIssue(0);
  v1[19] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[20] = v3;
  v1[21] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SWTFollowUpType(0);
  v1[22] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[23] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[24] = swift_task_alloc(v6);
  v1[25] = swift_task_alloc(v6);
  v7 = type metadata accessor for Logger(0);
  v1[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[27] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[28] = swift_task_alloc(v9);
  v1[29] = swift_task_alloc(v9);
  v1[30] = swift_task_alloc(v9);
  v1[31] = swift_task_alloc(v9);
  v10 = type metadata accessor for Date(0);
  v1[32] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[33] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[34] = swift_task_alloc(v12);
  v1[35] = swift_task_alloc(v12);
  return swift_task_switch(sub_100095224, v0, 0);
}

uint64_t sub_100095224()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)v0[18];
  v2 = v1[19];
  v3 = v1[20];
  sub_100022F20(v1 + 16, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  v0[36] = v4;
  v0[37] = *(_QWORD *)(*(_QWORD *)v4 + 152);
  return swift_task_switch(sub_100095298, v4, 0);
}

uint64_t sub_100095298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 304) = (*(uint64_t (**)(void))(v0 + 296))();
  swift_release(v1);
  return swift_task_switch(sub_1000952E4, v2, 0);
}

uint64_t sub_1000952E4()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  _BOOL4 v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  _QWORD *v103;
  os_log_t log;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_log_type_t type;
  os_log_type_t typea[8];
  os_log_type_t typeb[8];
  uint64_t v116;
  int *v117;
  uint64_t v118;
  uint64_t v119[2];

  v1 = *(void **)(v0 + 304);
  if (!v1)
    goto LABEL_9;
  v2 = *(_QWORD **)(v0 + 144);
  v3 = v2[19];
  v4 = v2[20];
  sub_100022F20(v2 + 16, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v6 = sub_100041EB0(v5);
  *(_QWORD *)(v0 + 312) = v6;
  *(_QWORD *)(v0 + 320) = v7;
  if (!v7)
  {

    goto LABEL_9;
  }
  v8 = v6;
  v9 = v7;
  v10 = *(_QWORD **)(v0 + 144);
  v11 = v10[19];
  v12 = v10[20];
  sub_100022F20(v10 + 16, v11);
  v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  v14 = objc_msgSend(v13, "transparencySettings");
  swift_unknownObjectRelease(v13);
  objc_msgSend(v14, "atBackgroundFollowupDelayPeriod");
  v16 = v15;
  v17 = swift_unknownObjectRelease(v14);
  Date.init(timeIntervalSinceNow:)(v17, -v16);
  result = (uint64_t)objc_msgSend(v1, "patLogBeginningMs");
  *(_QWORD *)(v0 + 328) = result;
  if ((result & 0x8000000000000000) == 0)
  {
    v19 = result;
    v20 = *(_QWORD *)(v0 + 280);
    v21 = *(_QWORD **)(v0 + 144);
    v22 = v21[19];
    v23 = v21[20];
    sub_100022F20(v21 + 16, v22);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 64))(v22, v23);
    v25 = sub_10004665C(v8, v9, v19, 2, v20);
    *(_QWORD *)(v0 + 336) = v25;
    *(_QWORD *)(v0 + 344) = 0;
    v26 = v25;
    v27 = swift_release(v24);
    if (*(_QWORD *)(v26 + 16))
    {
      Logger.init()(v27);
      swift_bridgeObjectRetain_n(v9, 2);
      v28 = v1;
      v29 = Logger.logObject.getter(v28);
      type = static os_log_type_t.error.getter();
      v30 = os_log_type_enabled(v29, type);
      v31 = *(_QWORD *)(v0 + 248);
      v32 = *(_QWORD *)(v0 + 208);
      v116 = *(_QWORD *)(v0 + 216);
      if (v30)
      {
        v107 = *(_QWORD *)(v0 + 248);
        v33 = swift_slowAlloc(22, -1);
        v105 = swift_slowAlloc(32, -1);
        v119[0] = v105;
        *(_DWORD *)v33 = 136315394;
        swift_bridgeObjectRetain(v9);
        *(_QWORD *)(v0 + 128) = sub_1000230D0(v8, v9, v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v33 + 4, v33 + 12);
        swift_bridgeObjectRelease_n(v9, 3);
        *(_WORD *)(v33 + 12) = 2048;
        v34 = objc_msgSend(v28, "patLogBeginningMs");

        *(_QWORD *)(v0 + 136) = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v33 + 14, v33 + 22);

        _os_log_impl((void *)&_mh_execute_header, v29, type, "Found %s PAT split view from before CFU delay for %llu epoch", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v107, v32);
      }
      else
      {

        swift_bridgeObjectRelease_n(v9, 2);
        (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v31, v32);
      }
      v50 = *(_QWORD *)(v0 + 272);
      v51 = *(_QWORD *)(v0 + 168);
      v52 = *(_QWORD **)(v0 + 144);
      *(_QWORD *)typea = *(_QWORD *)(v0 + 152);
      v110 = *(_QWORD *)(v0 + 160);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 104))(*(_QWORD *)(v0 + 200), enum case for SWTFollowUpType.treeFork(_:), *(_QWORD *)(v0 + 176));
      v53 = v52[19];
      v54 = v52[20];
      v55 = sub_100022F20(v52 + 16, v53);
      v56 = SWTFollowUpType.rawValue.getter(v55);
      v58 = v57;
      Date.init()(v56);
      swift_bridgeObjectRetain(v26);
      TransparencySWIssue.init(issue:posted:slh:)(v56, v58, v50, v26);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 128))(v51, v53, v54);
      (*(void (**)(uint64_t, os_log_type_t *))(v110 + 8))(v51, *(os_log_type_t **)typea);
      v59 = v52[19];
      v60 = v52[20];
      v52 += 16;
      sub_100022F20(v52, v59);
      (*(void (**)(uint64_t, uint64_t))(v60 + 40))(v59, v60);
      v61 = *(_QWORD *)(v0 + 80);
      v62 = *(_QWORD *)(v0 + 88);
      sub_100022F20((_QWORD *)(v0 + 56), v61);
      v63 = *(int **)(v62 + 16);
      v117 = (int *)((char *)v63 + *v63);
      v64 = (_QWORD *)swift_task_alloc(v63[1]);
      *(_QWORD *)(v0 + 352) = v64;
      *v64 = v0;
      v64[1] = sub_100095F0C;
      v65 = *(_QWORD *)(v0 + 200);
      v66 = v52;
      return ((uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))v117)(v65, v66, v26, v61, v62);
    }
    v44 = *(_QWORD *)(v0 + 312);
    v43 = *(_QWORD *)(v0 + 320);
    v45 = *(_QWORD **)(v0 + 144);
    v46 = v45[19];
    v47 = v45[20];
    sub_100022F20(v45 + 16, v46);
    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 64))(v46, v47);
    sub_100045A78(v44, v43, 0, 1, 5);
    *(_QWORD *)(v0 + 360) = v49;
    v67 = v49;
    v69 = *(_QWORD *)(v0 + 312);
    v68 = *(_QWORD *)(v0 + 320);
    v70 = *(_QWORD *)(v0 + 280);
    v71 = *(_QWORD **)(v0 + 144);
    swift_release(v48);
    v72 = v71 + 16;
    v73 = v71[19];
    v74 = v71[20];
    sub_100022F20(v72, v73);
    v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 64))(v73, v74);
    v76 = sub_10004665C(v69, v68, v67, 5, v70);
    *(_QWORD *)(v0 + 368) = v76;
    *(_QWORD *)(v0 + 376) = 0;
    v26 = v76;
    v77 = swift_release(v75);
    if (*(_QWORD *)(v26 + 16))
    {
      v78 = *(_QWORD *)(v0 + 320);
      Logger.init()(v77);
      v79 = swift_bridgeObjectRetain_n(v78, 2);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.error.getter();
      v82 = os_log_type_enabled(v80, v81);
      v83 = *(_QWORD *)(v0 + 320);
      if (v82)
      {
        log = *(os_log_t *)(v0 + 312);
        v118 = *(_QWORD *)(v0 + 240);
        v108 = *(_QWORD *)(v0 + 216);
        v111 = *(_QWORD *)(v0 + 208);
        v84 = swift_slowAlloc(22, -1);
        v106 = swift_slowAlloc(32, -1);
        v119[0] = v106;
        *(_DWORD *)v84 = 136315394;
        swift_bridgeObjectRetain(v83);
        *(_QWORD *)(v0 + 112) = sub_1000230D0((uint64_t)log, v83, v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v84 + 4, v84 + 12);
        swift_bridgeObjectRelease_n(v83, 3);
        *(_WORD *)(v84 + 12) = 2048;
        *(_QWORD *)(v0 + 120) = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v84 + 14, v84 + 22);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Found %s AT split view from before CFU delay for %lld epoch", (uint8_t *)v84, 0x16u);
        swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1, -1);
        swift_slowDealloc(v84, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v118, v111);
      }
      else
      {
        v88 = *(_QWORD *)(v0 + 240);
        v89 = *(_QWORD *)(v0 + 208);
        v90 = *(_QWORD *)(v0 + 216);

        swift_bridgeObjectRelease_n(v83, 2);
        (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v88, v89);
      }
      v91 = *(_QWORD *)(v0 + 272);
      v92 = *(_QWORD *)(v0 + 168);
      v109 = *(_QWORD *)(v0 + 336);
      v112 = *(_QWORD *)(v0 + 160);
      v93 = *(_QWORD **)(v0 + 144);
      *(_QWORD *)typeb = *(_QWORD *)(v0 + 152);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 104))(*(_QWORD *)(v0 + 192), enum case for SWTFollowUpType.treeFork(_:), *(_QWORD *)(v0 + 176));
      v95 = v93[19];
      v94 = v93[20];
      v96 = sub_100022F20(v93 + 16, v95);
      v97 = SWTFollowUpType.rawValue.getter(v96);
      v99 = v98;
      Date.init()(v97);
      TransparencySWIssue.init(issue:posted:slh:)(v97, v99, v91, v109);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 128))(v92, v95, v94);
      (*(void (**)(uint64_t, os_log_type_t *))(v112 + 8))(v92, *(os_log_type_t **)typeb);
      v100 = v93[19];
      v101 = v93[20];
      sub_100022F20(v93 + 16, v100);
      (*(void (**)(uint64_t, uint64_t))(v101 + 40))(v100, v101);
      v61 = *(_QWORD *)(v0 + 40);
      v62 = *(_QWORD *)(v0 + 48);
      sub_100022F20((_QWORD *)(v0 + 16), v61);
      v102 = *(int **)(v62 + 16);
      v117 = (int *)((char *)v102 + *v102);
      v103 = (_QWORD *)swift_task_alloc(v102[1]);
      *(_QWORD *)(v0 + 384) = v103;
      *v103 = v0;
      v103[1] = sub_100096678;
      v65 = *(_QWORD *)(v0 + 192);
      v66 = v93 + 16;
      return ((uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))v117)(v65, v66, v26, v61, v62);
    }
    v85 = *(_QWORD *)(v0 + 336);
    v86 = *(_QWORD *)(v0 + 320);
    v87 = *(void **)(v0 + 304);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 256));

    swift_bridgeObjectRelease(v86);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v85);
LABEL_9:
    v35 = *(_QWORD *)(v0 + 272);
    v37 = *(_QWORD *)(v0 + 240);
    v36 = *(_QWORD *)(v0 + 248);
    v39 = *(_QWORD *)(v0 + 224);
    v38 = *(_QWORD *)(v0 + 232);
    v41 = *(_QWORD *)(v0 + 192);
    v40 = *(_QWORD *)(v0 + 200);
    v42 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(9);
  }
  __break(1u);
  return result;
}

uint64_t sub_100095F0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 352));
  return swift_task_switch(sub_100095F64, v1, 0);
}

uint64_t sub_100095F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;

  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD **)(v0 + 144);
  v7 = v6 + 16;
  sub_100023CAC((_QWORD *)(v0 + 56));
  v8 = v6[19];
  v9 = v6[20];
  sub_100022F20(v7, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 64))(v8, v9);
  sub_1000466D0(v4, v3, v2, 2, v5, 3);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 184);
  if (v1)
  {
    swift_release(v10);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
    swift_release(v10);
  }
  v15 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD **)(v0 + 144);
  v17 = v16[19];
  v18 = v16[20];
  sub_100022F20(v16 + 16, v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
  sub_100045A78(v15, v14, 0, 1, 5);
  *(_QWORD *)(v0 + 360) = v20;
  v21 = v20;
  v23 = *(_QWORD *)(v0 + 312);
  v22 = *(_QWORD *)(v0 + 320);
  v24 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD **)(v0 + 144);
  swift_release(v19);
  v26 = v25 + 16;
  v27 = v25[19];
  v28 = v25[20];
  sub_100022F20(v26, v27);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 64))(v27, v28);
  v30 = sub_10004665C(v23, v22, v21, 5, v24);
  *(_QWORD *)(v0 + 368) = v30;
  *(_QWORD *)(v0 + 376) = 0;
  v31 = v30;
  v32 = swift_release(v29);
  if (*(_QWORD *)(v31 + 16))
  {
    v33 = *(_QWORD *)(v0 + 320);
    Logger.init()(v32);
    v34 = swift_bridgeObjectRetain_n(v33, 2);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    v37 = os_log_type_enabled(v35, v36);
    v38 = *(_QWORD *)(v0 + 320);
    if (v37)
    {
      v71 = *(_QWORD *)(v0 + 312);
      v73 = *(_QWORD *)(v0 + 216);
      v75 = *(_QWORD *)(v0 + 208);
      v77 = *(_QWORD *)(v0 + 240);
      v39 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(32, -1);
      v79 = v40;
      *(_DWORD *)v39 = 136315394;
      swift_bridgeObjectRetain(v38);
      *(_QWORD *)(v0 + 112) = sub_1000230D0(v71, v38, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease_n(v38, 3);
      *(_WORD *)(v39 + 12) = 2048;
      *(_QWORD *)(v0 + 120) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v39 + 14, v39 + 22);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Found %s AT split view from before CFU delay for %lld epoch", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v77, v75);
    }
    else
    {
      v53 = *(_QWORD *)(v0 + 240);
      v54 = *(_QWORD *)(v0 + 208);
      v55 = *(_QWORD *)(v0 + 216);

      swift_bridgeObjectRelease_n(v38, 2);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
    }
    v56 = *(_QWORD *)(v0 + 272);
    v57 = *(_QWORD *)(v0 + 168);
    v72 = *(_QWORD *)(v0 + 336);
    v74 = *(_QWORD *)(v0 + 160);
    v58 = *(_QWORD **)(v0 + 144);
    v76 = *(_QWORD *)(v0 + 152);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 104))(*(_QWORD *)(v0 + 192), enum case for SWTFollowUpType.treeFork(_:), *(_QWORD *)(v0 + 176));
    v60 = v58[19];
    v59 = v58[20];
    v61 = sub_100022F20(v58 + 16, v60);
    v62 = SWTFollowUpType.rawValue.getter(v61);
    v64 = v63;
    Date.init()(v62);
    TransparencySWIssue.init(issue:posted:slh:)(v62, v64, v56, v72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 128))(v57, v60, v59);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v57, v76);
    v65 = v58[19];
    v66 = v58[20];
    sub_100022F20(v58 + 16, v65);
    (*(void (**)(uint64_t, uint64_t))(v66 + 40))(v65, v66);
    v67 = *(_QWORD *)(v0 + 40);
    v68 = *(_QWORD *)(v0 + 48);
    sub_100022F20((_QWORD *)(v0 + 16), v67);
    v69 = *(int **)(v68 + 16);
    v78 = (int *)((char *)v69 + *v69);
    v70 = (_QWORD *)swift_task_alloc(v69[1]);
    *(_QWORD *)(v0 + 384) = v70;
    *v70 = v0;
    v70[1] = sub_100096678;
    return ((uint64_t (*)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t))v78)(*(_QWORD *)(v0 + 192), v58 + 16, v31, v67, v68);
  }
  else
  {
    v50 = *(_QWORD *)(v0 + 336);
    v51 = *(_QWORD *)(v0 + 320);
    v52 = *(void **)(v0 + 304);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 256));

    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v50);
    v41 = *(_QWORD *)(v0 + 272);
    v43 = *(_QWORD *)(v0 + 240);
    v42 = *(_QWORD *)(v0 + 248);
    v45 = *(_QWORD *)(v0 + 224);
    v44 = *(_QWORD *)(v0 + 232);
    v47 = *(_QWORD *)(v0 + 192);
    v46 = *(_QWORD *)(v0 + 200);
    v48 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(9);
  }
}

uint64_t sub_100096678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 368);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_1000966DC, v2, 0);
}

uint64_t sub_1000966DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD **)(v0 + 144);
  v7 = v6 + 16;
  sub_100023CAC((_QWORD *)(v0 + 16));
  v8 = v6[19];
  v9 = v6[20];
  sub_100022F20(v7, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 64))(v8, v9);
  sub_1000466D0(v4, v3, v2, 5, v5, 3);
  v11 = *(_QWORD *)(v0 + 320);
  v12 = *(void **)(v0 + 304);
  swift_release(v10);
  swift_bridgeObjectRelease(v11);

  if (v1)
    swift_errorRelease();
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 264);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v16 = *(_QWORD *)(v0 + 272);
  v18 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 192);
  v21 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(9);
}

uint64_t sub_100096834()
{
  return 9;
}

uint64_t sub_10009683C()
{
  return sub_100097190((uint64_t)&off_10010B010);
}

uint64_t sub_100096848(__int128 *a1)
{
  uint64_t v1;

  swift_defaultActor_initialize(v1);
  *(_BYTE *)(v1 + 112) = 9;
  *(_QWORD *)(v1 + 120) = sub_100097190((uint64_t)&off_10010AF48);
  sub_100032478(a1, v1 + 128);
  return v1;
}

uint64_t sub_100096894(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 >= 6u)
    v2 = 10;
  else
    v2 = (0x805060A070AuLL >> (8 * a1));
  return sub_100075DEC(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v2);
}

uint64_t sub_1000968C8()
{
  uint64_t v0;

  return sub_100075DEC(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0x8000000000000000);
}

uint64_t sub_1000968D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10003AFB8(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100096FE0();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_100096CB0(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

Swift::Int sub_1000969A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001D138(&qword_100129A18);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

unint64_t sub_100096CB0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_100096E84(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10003AFB8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100096FE0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000969A4(v15, a4 & 1);
  v20 = sub_10003AFB8(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

id sub_100096FE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10001D138(&qword_100129A18);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100097190(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_1000978DC();
  result = Set.init(minimumCapacity:)(v2, &type metadata for SWTSMEvent, v3);
  v8 = result;
  if (v2)
  {
    v5 = (char *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_1000821CC(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t type metadata accessor for InitialLoadPublicKeyState()
{
  return objc_opt_self(_TtC15swtransparencyd25InitialLoadPublicKeyState);
}

uint64_t type metadata accessor for ReloadPublicKeyState()
{
  return objc_opt_self(_TtC15swtransparencyd20ReloadPublicKeyState);
}

uint64_t type metadata accessor for MilestoneDownloadState()
{
  return objc_opt_self(_TtC15swtransparencyd22MilestoneDownloadState);
}

uint64_t type metadata accessor for PatConsistencyState()
{
  return objc_opt_self(_TtC15swtransparencyd19PatConsistencyState);
}

uint64_t type metadata accessor for DetectSplitViewState()
{
  return objc_opt_self(_TtC15swtransparencyd20DetectSplitViewState);
}

uint64_t type metadata accessor for Ready()
{
  return objc_opt_self(_TtC15swtransparencyd5Ready);
}

unint64_t sub_1000972C0()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  id v20;
  uint64_t v21;
  char v22;
  id v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v28;

  v1 = v0;
  v2 = sub_100092300((uint64_t)_swiftEmptyArrayStorage);
  v28 = v2;
  v3 = v0 + 14;
  v4 = v0[17];
  v5 = v0[18];
  sub_100022F20(v0 + 14, v4);
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 48))(v4, v5);
  v7 = objc_msgSend(v6, "currentEnvironment");

  v8 = v0[17];
  v9 = v0[18];
  sub_100022F20(v0 + 14, v8);
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  v11 = objc_msgSend(v10, "transparencySettings");
  swift_unknownObjectRelease(v10);
  v12 = objc_msgSend(v11, "getEnvironment");
  swift_unknownObjectRelease(v11);
  v14 = v1[17];
  v13 = v1[18];
  sub_100022F20(v3, v14);
  v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v14, v13);
  v16 = objc_msgSend(v15, "atEnvironment");
  swift_unknownObjectRelease(v15);
  v17 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", v7);
  if (v17)
  {
    v18 = (uint64_t)v17;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_100096E84(v18, 0x766E45624B747773, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    v28 = v2;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {

  }
  v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", v16);
  if (v20)
  {
    v21 = (uint64_t)v20;
    v22 = swift_isUniquelyReferenced_nonNull_native(v28);
    sub_100096E84(v21, 0x766E457441747773, 0xE800000000000000, v22);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {

  }
  v23 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", v12);
  if (v23)
  {
    v24 = (uint64_t)v23;
    v25 = swift_isUniquelyReferenced_nonNull_native(v28);
    sub_100096E84(v24, 0x766E45744B747773, 0xE800000000000000, v25);
    v26 = v28;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {

    return v28;
  }
  return v26;
}

uint64_t sub_100097588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100097598(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000975A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001D138(&qword_100129150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000975EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_100129194);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100020638;
  return sub_1000936F0(a1, v6, v7, v4);
}

uint64_t sub_100097648(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1001291BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001E4EC;
  return sub_100094074(a1, v6, v7, v4);
}

uint64_t sub_1000976A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000202A4(&qword_100129220, a2, (uint64_t (*)(uint64_t))type metadata accessor for Initial, (uint64_t)&unk_1000DF168);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000976DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000202A4(&qword_100129238, a2, (uint64_t (*)(uint64_t))type metadata accessor for WaitForNetwork, (uint64_t)&unk_1000DF1AC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100097718(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000202A4(&qword_100129198, a2, (uint64_t (*)(uint64_t))type metadata accessor for InitialLoadPublicKeyState, (uint64_t)&unk_1000DF1F0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100097754(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000202A4(&qword_1001291C0, a2, (uint64_t (*)(uint64_t))type metadata accessor for ReloadPublicKeyState, (uint64_t)&unk_1000DF234);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100097790(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000202A4(&qword_100129270, a2, (uint64_t (*)(uint64_t))type metadata accessor for MilestoneDownloadState, (uint64_t)&unk_1000DF278);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000977CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000202A4(&qword_100129288, a2, (uint64_t (*)(uint64_t))type metadata accessor for PatConsistencyState, (uint64_t)&unk_1000DF2BC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100097808(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000202A4(&qword_1001292A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for DetectSplitViewState, (uint64_t)&unk_1000DF300);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100097844(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000202A4(&qword_1001292B8, a2, (uint64_t (*)(uint64_t))type metadata accessor for Ready, (uint64_t)&unk_1000DF344);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for SWT2SM()
{
  return objc_opt_self(_TtC15swtransparencyd6SWT2SM);
}

unint64_t sub_1000978A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100127188;
  if (!qword_100127188)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_100127188);
  }
  return result;
}

unint64_t sub_1000978DC()
{
  unint64_t result;

  result = qword_100129A20;
  if (!qword_100129A20)
  {
    result = swift_getWitnessTable(&unk_1000DE6DC, &type metadata for SWTSMEvent);
    atomic_store(result, (unint64_t *)&qword_100129A20);
  }
  return result;
}

void sub_100097938(char a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  NSString v5;
  char v6;
  NSString v7;
  NSString v8;
  NSString v9;
  NSString v10;
  void *v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  id v20;
  id v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;

  v2 = v1;
  if ((a1 & 1) != 0)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE300000000000000;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v1, "setHTTPMethod:", v5);

  if ((a1 & 1) != 0)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    goto LABEL_8;
  }
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(5522759, 0xE300000000000000, 1414745936, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(0xE300000000000000);
  if ((v6 & 1) != 0)
  {
LABEL_8:
    v7 = String._bridgeToObjectiveC()();
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setValue:forHTTPHeaderField:", v7, v8);

  }
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forHTTPHeaderField:", v9, v10);

  v11 = (void *)objc_opt_self(TransparencySettings);
  v12 = objc_msgSend(v11, "deviceUserAgent");
  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v14 = v13;
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
  }
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forHTTPHeaderField:", v12, v15);

  v16 = sub_100074C40();
  BinaryInteger.description.getter(&type metadata for Int32, v16);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v2, "setValue:forHTTPHeaderField:", v19, off_1001266A0);

  v20 = (id)ProtocolVersion_EnumDescriptor();
  v21 = objc_msgSend(v20, "textFormatNameForValue:", kTransparencyProtocolVersion);

  objc_msgSend(v2, "setValue:forHTTPHeaderField:", v21, off_1001266A8);
  v22 = objc_msgSend(v11, "transparencyVersionStr");
  if (!v22)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v24 = v23;
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
  }
  objc_msgSend(v2, "setValue:forHTTPHeaderField:", v22, off_1001266B8);

  v25 = objc_msgSend(v11, "automatedDeviceGroup");
  if (v25)
  {
    v26 = v25;
    objc_msgSend(v2, "setValue:forHTTPHeaderField:", v25, off_1001266B0);

  }
}

uint64_t sub_100097C74(char a1)
{
  if ((a1 & 1) != 0)
    return 1414745936;
  else
    return 5522759;
}

uint64_t sub_100097C9C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1414745936;
  else
    v3 = 5522759;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1414745936;
  else
    v5 = 5522759;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100097D30(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10010B248, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_100097D80(char *a1, char *a2)
{
  return sub_100097C9C(*a1, *a2);
}

Swift::Int sub_100097D8C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 1414745936;
  else
    v2 = 5522759;
  if (v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100097DFC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 1414745936;
  else
    v2 = 5522759;
  if (*v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100097E48(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 1414745936;
  else
    v3 = 5522759;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100097EB4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10010B248, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100097F10(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 5522759;
  if (*v1)
    v2 = 1414745936;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

id sub_100097F40(uint64_t a1, double a2)
{
  uint64_t v2;
  id v5;
  NSURL *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;

  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  URL._bridgeToObjectiveC()(v6);
  v8 = v7;
  v9 = objc_msgSend(v5, "initWithURL:cachePolicy:timeoutInterval:", v7, 0, a2);

  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  return v9;
}

unint64_t sub_100097FD4()
{
  unint64_t result;

  result = qword_100129A28;
  if (!qword_100129A28)
  {
    result = swift_getWitnessTable(&unk_1000DF534, &_s10HTTPMethodON);
    atomic_store(result, (unint64_t *)&qword_100129A28);
  }
  return result;
}

uint64_t _s10HTTPMethodOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100098064 + 4 * byte_1000DF52D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100098098 + 4 * asc_1000DF528[v4]))();
}

uint64_t sub_100098098(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000980A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000980A8);
  return result;
}

uint64_t sub_1000980B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000980BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000980C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000980C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10HTTPMethodOMa()
{
  return &_s10HTTPMethodON;
}

BOOL sub_10009BDD0(int a1)
{
  return a1 != -72499473;
}

double sub_10009CC7C(_QWORD *a1)
{
  uint64_t v2;
  double result;

  sub_10009D08C(a1, 8);
  v2 = a1[2];
  result = *(double *)(*a1 + v2);
  a1[2] = v2 + 8;
  return result;
}

float sub_10009CCB4(_QWORD *a1)
{
  uint64_t v2;
  float result;

  sub_10009D08C(a1, 4);
  v2 = a1[2];
  result = *(float *)(*a1 + v2);
  a1[2] = v2 + 4;
  return result;
}

uint64_t sub_10009CCF0(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 0;
  v3 = 0;
  while (v2 <= 0x3F)
  {
    sub_10009D08C(a1, 1);
    v4 = *a1;
    v5 = a1[2];
    a1[2] = v5 + 1;
    LOBYTE(v4) = *(_BYTE *)(v4 + v5);
    v3 |= (v4 & 0x7F) << v2;
    v2 += 7;
    if ((v4 & 0x80) == 0)
      return v3;
  }
  sub_10009CF08(-105, CFSTR("Invalid VarInt64"));
  return 0;
}

uint64_t sub_10009CD74(uint64_t *a1)
{
  return sub_10009CCF0(a1);
}

uint64_t sub_10009CD88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  sub_10009D08C(a1, 8);
  v2 = a1[2];
  result = *(_QWORD *)(*a1 + v2);
  a1[2] = v2 + 8;
  return result;
}

uint64_t sub_10009CDC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  sub_10009D08C(a1, 4);
  v2 = a1[2];
  result = *(unsigned int *)(*a1 + v2);
  a1[2] = v2 + 4;
  return result;
}

uint64_t sub_10009CDF8(uint64_t *a1)
{
  unsigned int v1;

  v1 = sub_10009CCF0(a1);
  return -(v1 & 1) ^ (v1 >> 1);
}

unint64_t sub_10009CE18(uint64_t *a1)
{
  unint64_t v1;

  v1 = sub_10009CCF0(a1);
  return -(uint64_t)(v1 & 1) ^ (v1 >> 1);
}

BOOL sub_10009CE38(uint64_t *a1)
{
  return sub_10009CCF0(a1) != 0;
}

uint64_t sub_10009CE54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a1 + 8) || v2 == *(_QWORD *)(a1 + 24))
  {
    v3 = 0;
    *(_DWORD *)(a1 + 32) = 0;
  }
  else
  {
    v3 = sub_10009CCF0((uint64_t *)a1);
    *(_DWORD *)(a1 + 32) = v3;
    if (!sub_1000CC244(v3))
    {
      sub_10009CF08(-103, CFSTR("Invalid wireformat in tag."));
      v3 = *(unsigned int *)(a1 + 32);
    }
    if (!sub_1000CC23C(v3))
    {
      sub_10009CF08(-103, CFSTR("A zero field number on the wire is invalid."));
      return *(unsigned int *)(a1 + 32);
    }
  }
  return v3;
}

BOOL sub_10009CEE4(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[2];
  return v1 == a1[1] || v1 == a1[3];
}

id sub_10009CF08(uint64_t a1, void *a2)
{
  NSDictionary *v4;
  const __CFString *v6;
  NSError *v7;
  const __CFString *v8;
  void *v9;

  if (objc_msgSend(a2, "length"))
  {
    v8 = CFSTR("Reason");
    v9 = a2;
    v4 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
  }
  else
  {
    v4 = 0;
  }
  v6 = CFSTR("TransparencyGPBCodedInputStreamUnderlyingErrorKey");
  v7 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("TransparencyGPBCodedInputStreamErrorDomain"), a1, v4);
  return -[NSException raise](+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", CFSTR("TransparencyGPBCodedInputStreamException"), a2, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1)), "raise");
}

const __CFString *sub_10009CFFC(uint64_t *a1)
{
  int v2;
  const __CFString *result;

  v2 = sub_10009CCF0(a1);
  if (!v2)
    return &stru_10010E2C8;
  sub_10009D08C(a1, v2);
  result = (const __CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithBytes:length:encoding:", *a1 + a1[2], v2, 4);
  a1[2] += v2;
  if (!result)
  {
    sub_10009CF08(-104, 0);
    return 0;
  }
  return result;
}

_QWORD *sub_10009D08C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = result;
  v3 = result[2] + a2;
  if (v3 > result[1])
    result = sub_10009CF08(-100, 0);
  v4 = v2[3];
  if (v3 > v4)
  {
    v2[2] = v4;
    return sub_10009CF08(-101, 0);
  }
  return result;
}

id sub_10009D0E8(uint64_t *a1)
{
  unsigned int v2;
  id result;

  v2 = sub_10009CCF0(a1);
  if ((v2 & 0x80000000) != 0)
    return 0;
  sub_10009D08C(a1, v2);
  result = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", *a1 + a1[2], v2);
  a1[2] += v2;
  return result;
}

id sub_10009D15C(uint64_t *a1)
{
  unsigned int v2;
  id result;

  v2 = sub_10009CCF0(a1);
  if ((v2 & 0x80000000) != 0)
    return 0;
  sub_10009D08C(a1, v2);
  result = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *a1 + a1[2], v2, 0);
  a1[2] += v2;
  return result;
}

unint64_t sub_10009D1D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 16) + a2;
  if (v4 > v3)
    sub_10009CF08(-102, 0);
  *(_QWORD *)(a1 + 24) = v4;
  return v3;
}

uint64_t sub_10009D21C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_10009D224(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

_DWORD *sub_10009D230(_DWORD *result, int a2)
{
  if (result[8] != a2)
    return sub_10009CF08(-103, CFSTR("Unexpected tag read"));
  return result;
}

uint64_t *sub_10009DBD8(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v4 = result[2];
  if (v4 == result[1])
  {
    result = sub_1000A0604(result);
    v4 = v3[2];
  }
  v5 = *v3;
  v3[2] = v4 + 1;
  *(_BYTE *)(v5 + v4) = a2;
  v6 = v3[2];
  if (v6 == v3[1])
  {
    result = sub_1000A0604(v3);
    v6 = v3[2];
  }
  v7 = *v3;
  v3[2] = v6 + 1;
  *(_BYTE *)(v7 + v6) = BYTE1(a2);
  v8 = v3[2];
  if (v8 == v3[1])
  {
    result = sub_1000A0604(v3);
    v8 = v3[2];
  }
  v9 = *v3;
  v3[2] = v8 + 1;
  *(_BYTE *)(v9 + v8) = BYTE2(a2);
  v10 = v3[2];
  if (v10 == v3[1])
  {
    result = sub_1000A0604(v3);
    v10 = v3[2];
  }
  v11 = *v3;
  v3[2] = v10 + 1;
  *(_BYTE *)(v11 + v10) = BYTE3(a2);
  v12 = v3[2];
  if (v12 == v3[1])
  {
    result = sub_1000A0604(v3);
    v12 = v3[2];
  }
  v13 = *v3;
  v3[2] = v12 + 1;
  *(_BYTE *)(v13 + v12) = BYTE4(a2);
  v14 = v3[2];
  if (v14 == v3[1])
  {
    result = sub_1000A0604(v3);
    v14 = v3[2];
  }
  v15 = *v3;
  v3[2] = v14 + 1;
  *(_BYTE *)(v15 + v14) = BYTE5(a2);
  v16 = v3[2];
  if (v16 == v3[1])
  {
    result = sub_1000A0604(v3);
    v16 = v3[2];
  }
  v17 = *v3;
  v3[2] = v16 + 1;
  *(_BYTE *)(v17 + v16) = BYTE6(a2);
  v18 = v3[2];
  if (v18 == v3[1])
  {
    result = sub_1000A0604(v3);
    v18 = v3[2];
  }
  v19 = *v3;
  v3[2] = v18 + 1;
  *(_BYTE *)(v19 + v18) = HIBYTE(a2);
  return result;
}

uint64_t *sub_10009DDA8(uint64_t *result, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = result[2];
  if (v4 == result[1])
  {
    result = sub_1000A0604(result);
    v4 = v3[2];
  }
  v5 = *v3;
  v3[2] = v4 + 1;
  *(_BYTE *)(v5 + v4) = a2;
  v6 = v3[2];
  if (v6 == v3[1])
  {
    result = sub_1000A0604(v3);
    v6 = v3[2];
  }
  v7 = *v3;
  v3[2] = v6 + 1;
  *(_BYTE *)(v7 + v6) = BYTE1(a2);
  v8 = v3[2];
  if (v8 == v3[1])
  {
    result = sub_1000A0604(v3);
    v8 = v3[2];
  }
  v9 = *v3;
  v3[2] = v8 + 1;
  *(_BYTE *)(v9 + v8) = BYTE2(a2);
  v10 = v3[2];
  if (v10 == v3[1])
  {
    result = sub_1000A0604(v3);
    v10 = v3[2];
  }
  v11 = *v3;
  v3[2] = v10 + 1;
  *(_BYTE *)(v11 + v10) = HIBYTE(a2);
  return result;
}

uint64_t *sub_10009DEC8(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = result;
  if (a2 >= 0x80)
  {
    do
    {
      v5 = v3[2];
      if (v5 == v3[1])
      {
        result = sub_1000A0604(v3);
        v5 = v3[2];
      }
      v6 = *v3;
      v3[2] = v5 + 1;
      *(_BYTE *)(v6 + v5) = v2 | 0x80;
      v4 = v2 >> 7;
      v7 = v2 >= 0x4000;
      v2 >>= 7;
    }
    while (v7);
  }
  else
  {
    LOBYTE(v4) = a2;
  }
  v8 = v3[2];
  if (v8 == v3[1])
  {
    result = sub_1000A0604(v3);
    v8 = v3[2];
  }
  v9 = *v3;
  v3[2] = v8 + 1;
  *(_BYTE *)(v9 + v8) = v4;
  return result;
}

uint64_t *sub_10009DFFC(uint64_t *result, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0)
    return sub_10009DEC8(result, (int)a2);
  else
    return sub_10009E2D0(result, a2);
}

uint64_t *sub_10009E2D0(uint64_t *result, unsigned int a2)
{
  unsigned int v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = result;
  if (a2 >= 0x80)
  {
    do
    {
      v5 = v3[2];
      if (v5 == v3[1])
      {
        result = sub_1000A0604(v3);
        v5 = v3[2];
      }
      v6 = *v3;
      v3[2] = v5 + 1;
      *(_BYTE *)(v6 + v5) = v2 | 0x80;
      v4 = v2 >> 7;
      v7 = v2 >= 0x4000;
      v2 >>= 7;
    }
    while (v7);
  }
  else
  {
    LOBYTE(v4) = a2;
  }
  v8 = v3[2];
  if (v8 == v3[1])
  {
    result = sub_1000A0604(v3);
    v8 = v3[2];
  }
  v9 = *v3;
  v3[2] = v8 + 1;
  *(_BYTE *)(v9 + v8) = v4;
  return result;
}

uint64_t *sub_10009E62C(uint64_t *a1, int a2, unsigned int a3)
{
  unsigned int v5;

  v5 = sub_1000CC22C(a2, 0);
  sub_10009E2D0(a1, v5);
  return sub_10009E2D0(a1, a3);
}

void sub_10009E93C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009E954(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 8;
  return result;
}

id sub_10009E96C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeDoubleNoTag:");
}

id sub_10009E974(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeDouble:value:", *(unsigned int *)(a1 + 40));
}

void sub_10009EAC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EAE0(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 4;
  return result;
}

id sub_10009EAF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeFloatNoTag:");
}

id sub_10009EB00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeFloat:value:", *(unsigned int *)(a1 + 40));
}

void sub_10009EC54(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EC6C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = sub_1000A0884(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

id sub_10009ECA8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeUInt64NoTag:", a2);
}

id sub_10009ECB4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeUInt64:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009EE0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EE24(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = sub_1000A0884(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

id sub_10009EE5C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeInt64NoTag:", a2);
}

id sub_10009EE68(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "writeInt64:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009EFC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EFD8(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 10;
  v3 = 1;
  v4 = 2;
  v5 = 3;
  v6 = 4;
  if (a2 >> 28)
    v6 = 5;
  if (a2 >= 0x200000)
    v5 = v6;
  if (a2 >= 0x4000)
    v4 = v5;
  if (a2 >= 0x80)
    v3 = v4;
  if ((a2 & 0x80000000) == 0)
    v2 = v3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v2;
  return result;
}

uint64_t sub_10009F030(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = 1;
  v2 = 2;
  v3 = 3;
  v4 = 4;
  if (a1 >> 28)
    v4 = 5;
  if (a1 >= 0x200000)
    v3 = v4;
  if (a1 >= 0x4000)
    v2 = v3;
  if (a1 >= 0x80)
    v1 = v2;
  if ((a1 & 0x80000000) == 0)
    return v1;
  else
    return 10;
}

id sub_10009F074(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeInt32NoTag:", a2);
}

id sub_10009F080(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "writeInt32:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009F1D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F1F0(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 1;
  v3 = 2;
  v4 = 3;
  v5 = 4;
  if (a2 >> 28)
    v5 = 5;
  if (a2 >= 0x200000)
    v4 = v5;
  if (a2 >= 0x4000)
    v3 = v4;
  if (a2 >= 0x80)
    v2 = v3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v2;
  return result;
}

uint64_t sub_10009F23C(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = 2;
  v2 = 3;
  v3 = 4;
  if (a1 >> 28)
    v3 = 5;
  if (a1 >= 0x200000)
    v2 = v3;
  if (a1 >= 0x4000)
    v1 = v2;
  if (a1 >= 0x80)
    return v1;
  else
    return 1;
}

id sub_10009F274(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeUInt32NoTag:", a2);
}

id sub_10009F280(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeUInt32:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009F3D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F3F0(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 8;
  return result;
}

id sub_10009F408(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeFixed64NoTag:", a2);
}

id sub_10009F414(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeFixed64:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009F56C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F584(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 4;
  return result;
}

id sub_10009F59C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeFixed32NoTag:", a2);
}

id sub_10009F5A8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeFixed32:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009F700(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F718(uint64_t result, int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (2 * a2) ^ (a2 >> 31);
  v3 = 2;
  v4 = 3;
  v5 = 4;
  if (v2 >> 28)
    v5 = 5;
  if (v2 >= 0x200000)
    v4 = v5;
  if (v2 >= 0x4000)
    v3 = v4;
  if (v2 >= 0x80)
    v6 = v3;
  else
    v6 = 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v6;
  return result;
}

uint64_t sub_10009F76C(int a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (2 * a1) ^ (a1 >> 31);
  v2 = 2;
  v3 = 3;
  v4 = 4;
  if (v1 >> 28)
    v4 = 5;
  if (v1 >= 0x200000)
    v3 = v4;
  if (v1 >= 0x4000)
    v2 = v3;
  if (v1 >= 0x80)
    return v2;
  else
    return 1;
}

id sub_10009F7AC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeSInt32NoTag:", a2);
}

id sub_10009F7B8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "writeSInt32:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009F910(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F928(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1000A0884((2 * a2) ^ (a2 >> 63));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_10009F964(uint64_t a1)
{
  return sub_1000A0884((2 * a1) ^ (a1 >> 63));
}

id sub_10009F970(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeSInt64NoTag:", a2);
}

id sub_10009F97C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "writeSInt64:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009FAD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009FAEC(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 8;
  return result;
}

id sub_10009FB04(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeSFixed64NoTag:", a2);
}

id sub_10009FB10(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "writeSFixed64:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009FC68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009FC80(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 4;
  return result;
}

id sub_10009FC98(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeSFixed32NoTag:", a2);
}

id sub_10009FCA4(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "writeSFixed32:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009FDFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009FE14(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

id sub_10009FE2C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeBoolNoTag:", a2);
}

id sub_10009FE38(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeBool:value:", *(unsigned int *)(a1 + 40), a2);
}

void sub_10009FF90(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009FFA8(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 10;
  v3 = 1;
  v4 = 2;
  v5 = 3;
  v6 = 4;
  if (a2 >> 28)
    v6 = 5;
  if (a2 >= 0x200000)
    v5 = v6;
  if (a2 >= 0x4000)
    v4 = v5;
  if (a2 >= 0x80)
    v3 = v4;
  if ((a2 & 0x80000000) == 0)
    v2 = v3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v2;
  return result;
}

id sub_1000A0000(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeEnumNoTag:", a2);
}

id sub_1000A000C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeEnum:value:", *(unsigned int *)(a1 + 40), a2);
}

_QWORD *sub_1000A0604(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (!result[3])
    result = +[NSException raise:format:](NSException, "raise:format:", CFSTR("OutOfSpace"), &stru_10010E2C8);
  if (v1[2])
  {
    result = objc_msgSend((id)v1[3], "write:maxLength:", *v1);
    if (result != (_QWORD *)v1[2])
      result = +[NSException raise:format:](NSException, "raise:format:", CFSTR("WriteFailed"), &stru_10010E2C8);
    v1[2] = 0;
  }
  return result;
}

uint64_t sub_1000A0884(unint64_t a1)
{
  uint64_t v2;

  if (a1 < 0x80)
    return 1;
  if (a1 < 0x4000)
    return 2;
  if (a1 < 0x200000)
    return 3;
  if (!(a1 >> 28))
    return 4;
  if (!(a1 >> 35))
    return 5;
  if (!(a1 >> 42))
    return 6;
  if (!(a1 >> 49))
    return 7;
  v2 = 9;
  if ((a1 & 0x8000000000000000) != 0)
    v2 = 10;
  if (HIBYTE(a1))
    return v2;
  else
    return 8;
}

char *sub_1000A0914(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (char *)objc_msgSend(a1, "lengthOfBytesUsingEncoding:", 4);
  v2 = 1;
  v3 = 2;
  v4 = 3;
  v5 = 4;
  if (v1 >> 28)
    v5 = 5;
  if (v1 >= 0x200000)
    v4 = v5;
  if (v1 >= 0x4000)
    v3 = v4;
  if (v1 >= 0x80)
    v2 = v3;
  return &v1[v2];
}

char *sub_1000A0968(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (char *)objc_msgSend(a1, "serializedSize");
  v2 = 1;
  v3 = 2;
  v4 = 3;
  v5 = 4;
  if (v1 >> 28)
    v5 = 5;
  if (v1 >= 0x200000)
    v4 = v5;
  if (v1 >= 0x4000)
    v3 = v4;
  if (v1 >= 0x80)
    v2 = v3;
  return &v1[v2];
}

char *sub_1000A09B4(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (char *)objc_msgSend(a1, "length");
  v2 = 1;
  v3 = 2;
  v4 = 3;
  v5 = 4;
  if (v1 >> 28)
    v5 = 5;
  if (v1 >= 0x200000)
    v4 = v5;
  if (v1 >= 0x4000)
    v3 = v4;
  if (v1 >= 0x80)
    v2 = v3;
  return &v1[v2];
}

uint64_t sub_1000A0A00(int a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1000CC22C(a1, 0);
  v2 = 10;
  v3 = 11;
  v4 = 12;
  if (v1 >> 28)
    v4 = 13;
  if (v1 >= 0x200000)
    v3 = v4;
  if (v1 >= 0x4000)
    v2 = v3;
  if (v1 >= 0x80)
    return v2;
  else
    return 9;
}

uint64_t sub_1000A0A4C(int a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1000CC22C(a1, 0);
  v2 = 2;
  v3 = 3;
  v4 = 4;
  if (v1 >> 28)
    v4 = 5;
  if (v1 >= 0x200000)
    v3 = v4;
  if (v1 >= 0x4000)
    v2 = v3;
  if (v1 >= 0x80)
    return v2;
  else
    return 1;
}

uint64_t sub_1000A0A98(int a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1000CC22C(a1, 0);
  v2 = 6;
  v3 = 7;
  v4 = 8;
  if (v1 >> 28)
    v4 = 9;
  if (v1 >= 0x200000)
    v3 = v4;
  if (v1 >= 0x4000)
    v2 = v3;
  if (v1 >= 0x80)
    return v2;
  else
    return 5;
}

uint64_t sub_1000A0AE4(int a1, unint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_1000CC22C(a1, 0);
  v4 = 2;
  v5 = 3;
  v6 = 4;
  if (v3 >> 28)
    v6 = 5;
  if (v3 >= 0x200000)
    v5 = v6;
  if (v3 >= 0x4000)
    v4 = v5;
  if (v3 >= 0x80)
    v7 = v4;
  else
    v7 = 1;
  return sub_1000A0884(a2) + v7;
}

uint64_t sub_1000A0B48(int a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = sub_1000CC22C(a1, 0);
  v4 = 1;
  v5 = 2;
  v6 = 3;
  v7 = 4;
  if (v3 >> 28)
    v7 = 5;
  if (v3 >= 0x200000)
    v6 = v7;
  if (v3 >= 0x4000)
    v5 = v6;
  if (v3 >= 0x80)
    v4 = v5;
  v8 = 10;
  v9 = 1;
  v10 = 2;
  v11 = 3;
  v12 = 4;
  if (a2 >> 28)
    v12 = 5;
  if (a2 >= 0x200000)
    v11 = v12;
  if (a2 >= 0x4000)
    v10 = v11;
  if (a2 >= 0x80)
    v9 = v10;
  if ((a2 & 0x80000000) == 0)
    v8 = v9;
  return v8 + v4;
}

uint64_t sub_1000A0BE4(int a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1000CC22C(a1, 0);
  v2 = 3;
  v3 = 4;
  v4 = 5;
  if (v1 >> 28)
    v4 = 6;
  if (v1 >= 0x200000)
    v3 = v4;
  if (v1 >= 0x4000)
    v2 = v3;
  if (v1 >= 0x80)
    return v2;
  else
    return 2;
}

char *sub_1000A0C30(int a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = sub_1000CC22C(a1, 0);
  v4 = 2;
  v5 = 3;
  v6 = 4;
  if (v3 >> 28)
    v6 = 5;
  if (v3 >= 0x200000)
    v5 = v6;
  if (v3 >= 0x4000)
    v4 = v5;
  if (v3 >= 0x80)
    v7 = v4;
  else
    v7 = 1;
  v8 = (char *)objc_msgSend(a2, "lengthOfBytesUsingEncoding:", 4);
  v9 = 1;
  v10 = 2;
  v11 = 3;
  v12 = 4;
  if (v8 >> 28)
    v12 = 5;
  if (v8 >= 0x200000)
    v11 = v12;
  if (v8 >= 0x4000)
    v10 = v11;
  if (v8 >= 0x80)
    v9 = v10;
  return &v8[v7 + v9];
}

char *sub_1000A0CD0(int a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_1000CC22C(a1, 0);
  v4 = 4;
  v5 = 6;
  v6 = 10;
  if (!(v3 >> 28))
    v6 = 8;
  if (v3 >= 0x200000)
    v5 = v6;
  if (v3 >= 0x4000)
    v4 = v5;
  if (v3 >= 0x80)
    v7 = v4;
  else
    v7 = 2;
  return (char *)objc_msgSend(a2, "serializedSize") + v7;
}

char *sub_1000A0D38(int a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = sub_1000CC22C(a1, 0);
  v4 = 2;
  v5 = 3;
  v6 = 4;
  if (v3 >> 28)
    v6 = 5;
  if (v3 >= 0x200000)
    v5 = v6;
  if (v3 >= 0x4000)
    v4 = v5;
  if (v3 >= 0x80)
    v7 = v4;
  else
    v7 = 1;
  v8 = (char *)objc_msgSend(a2, "serializedSize");
  v9 = 1;
  v10 = 2;
  v11 = 3;
  v12 = 4;
  if (v8 >> 28)
    v12 = 5;
  if (v8 >= 0x200000)
    v11 = v12;
  if (v8 >= 0x4000)
    v10 = v11;
  if (v8 >= 0x80)
    v9 = v10;
  return &v8[v7 + v9];
}

char *sub_1000A0DD4(int a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = sub_1000CC22C(a1, 0);
  v4 = 2;
  v5 = 3;
  v6 = 4;
  if (v3 >> 28)
    v6 = 5;
  if (v3 >= 0x200000)
    v5 = v6;
  if (v3 >= 0x4000)
    v4 = v5;
  if (v3 >= 0x80)
    v7 = v4;
  else
    v7 = 1;
  v8 = (char *)objc_msgSend(a2, "length");
  v9 = 1;
  v10 = 2;
  v11 = 3;
  v12 = 4;
  if (v8 >> 28)
    v12 = 5;
  if (v8 >= 0x200000)
    v11 = v12;
  if (v8 >= 0x4000)
    v10 = v11;
  if (v8 >= 0x80)
    v9 = v10;
  return &v8[v7 + v9];
}

uint64_t sub_1000A0E70(int a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = sub_1000CC22C(a1, 0);
  v4 = 1;
  v5 = 2;
  v6 = 3;
  v7 = 4;
  if (v3 >> 28)
    v7 = 5;
  if (v3 >= 0x200000)
    v6 = v7;
  if (v3 >= 0x4000)
    v5 = v6;
  if (v3 >= 0x80)
    v4 = v5;
  v8 = 1;
  v9 = 2;
  v10 = 3;
  v11 = 4;
  if (a2 >> 28)
    v11 = 5;
  if (a2 >= 0x200000)
    v10 = v11;
  if (a2 >= 0x4000)
    v9 = v10;
  if (a2 >= 0x80)
    v8 = v9;
  return v8 + v4;
}

uint64_t sub_1000A0F00(int a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = sub_1000CC22C(a1, 0);
  v4 = 1;
  v5 = 2;
  v6 = 3;
  v7 = 4;
  if (v3 >> 28)
    v7 = 5;
  if (v3 >= 0x200000)
    v6 = v7;
  if (v3 >= 0x4000)
    v5 = v6;
  if (v3 >= 0x80)
    v4 = v5;
  v8 = (2 * a2) ^ (a2 >> 31);
  v9 = 2;
  v10 = 3;
  v11 = 4;
  if (v8 >> 28)
    v11 = 5;
  if (v8 >= 0x200000)
    v10 = v11;
  if (v8 >= 0x4000)
    v9 = v10;
  if (v8 >= 0x80)
    v12 = v9;
  else
    v12 = 1;
  return v12 + v4;
}

uint64_t sub_1000A0F98(int a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_1000CC22C(a1, 0);
  v4 = 2;
  v5 = 3;
  v6 = 4;
  if (v3 >> 28)
    v6 = 5;
  if (v3 >= 0x200000)
    v5 = v6;
  if (v3 >= 0x4000)
    v4 = v5;
  if (v3 >= 0x80)
    v7 = v4;
  else
    v7 = 1;
  return sub_1000A0884((2 * a2) ^ (a2 >> 63)) + v7;
}

char *sub_1000A1000(unsigned int a1, void *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1000CC22C(1, 0);
  v5 = 4;
  v6 = 6;
  v7 = 10;
  if (!(v4 >> 28))
    v7 = 8;
  if (v4 >= 0x200000)
    v6 = v7;
  if (v4 >= 0x4000)
    v5 = v6;
  if (v4 >= 0x80)
    v8 = v5;
  else
    v8 = 2;
  v9 = sub_1000A0E70(2, a1) + v8;
  return &sub_1000A0D38(3, a2)[v9];
}

char *sub_1000A108C(unsigned int a1, void *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1000CC22C(1, 0);
  v5 = 4;
  v6 = 6;
  v7 = 10;
  if (!(v4 >> 28))
    v7 = 8;
  if (v4 >= 0x200000)
    v6 = v7;
  if (v4 >= 0x4000)
    v5 = v6;
  if (v4 >= 0x80)
    v8 = v5;
  else
    v8 = 2;
  v9 = sub_1000A0E70(2, a1) + v8;
  return &sub_1000A0DD4(3, a2)[v9];
}

uint64_t sub_1000A1118(int a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_1000CC22C(a1, 0);
  v4 = 1;
  v5 = 2;
  v6 = 3;
  v7 = 4;
  if (v3 >> 28)
    v7 = 5;
  if (v3 >= 0x200000)
    v6 = v7;
  if (v3 >= 0x4000)
    v5 = v6;
  if (v3 >= 0x80)
    v4 = v5;
  return v4 << (a2 == 16);
}

void sub_1000A1978(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

SEL sub_1000A21FC(char *__s, char *str, const char *a3, int a4)
{
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  if (!__s && !a3 && (a4 & 1) == 0)
    return sel_getUid(str);
  if (__s)
    v9 = strlen(__s);
  else
    v9 = 0;
  v10 = strlen(str);
  v11 = v10;
  if (a3)
  {
    v10 = strlen(a3);
    v12 = v10;
  }
  else
  {
    v12 = 0;
  }
  v18 = (uint64_t)&v18;
  v13 = v11 + v9 + v12;
  v14 = 1;
  if (a4)
    v14 = 2;
  v15 = v13 + v14;
  __chkstk_darwin(v10);
  v17 = (char *)&v18 - v16;
  bzero((char *)&v18 - v16, v15);
  if (!__s)
  {
    memcpy(v17, str, v11);
    if (!a3)
      goto LABEL_16;
    goto LABEL_15;
  }
  memcpy(v17, __s, v9);
  memcpy(&v17[v9], str, v11);
  v17[v9] = __toupper(v17[v9]);
  if (a3)
LABEL_15:
    memcpy(&v17[v9 + v11], a3, v12);
LABEL_16:
  if (a4)
    v17[v13] = 58;
  v17[v15 - 1] = 0;
  return sel_getUid(v17);
}

uint64_t sub_1000A262C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned __int16 *)(v1 + 28);
  if ((v2 & 0xF00) != 0)
  {
    v3 = 15;
    LOBYTE(v4) = 0;
  }
  else
  {
    v3 = *(unsigned __int8 *)(v1 + 30);
    v4 = (v2 >> 2) & 1;
  }
  v5 = sub_1000CC254(v3, v4);
  return sub_1000CC22C(*(_DWORD *)(v1 + 16), v5);
}

uint64_t sub_1000A2674(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_1000CC254(*(unsigned __int8 *)(v1 + 30), (*(_WORD *)(v1 + 28) & 4) == 0);
  return sub_1000CC22C(*(_DWORD *)(v1 + 16), v2);
}

void sub_1000A2E60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A354C(void *a1, uint64_t a2)
{
  int v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 30);
  v5 = objc_msgSend(a1, "keyEnumerator");
  v6 = objc_msgSend(v5, "nextObject");
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    do
    {
      v9 = objc_msgSend(a1, "objectForKeyedSubscript:", v7);
      v10 = sub_1000A0C30(1, v7);
      v11 = &v10[(_QWORD)sub_1000A362C(v9, v4)];
      v8 += (uint64_t)&v11[sub_10009F23C(v11)];
      v7 = objc_msgSend(v5, "nextObject");
    }
    while (v7);
  }
  else
  {
    v8 = 0;
  }
  v12 = sub_1000A1118(*(_DWORD *)(*(_QWORD *)(a2 + 8) + 16), 15);
  return v8 + (_QWORD)objc_msgSend(a1, "count") * v12;
}

char *sub_1000A362C(void *a1, int a2)
{
  switch(a2)
  {
    case 13:
      return sub_1000A0DD4(2, a1);
    case 14:
      return sub_1000A0C30(2, a1);
    case 15:
      return sub_1000A0D38(2, a1);
  }
  return 0;
}

id sub_1000A3674(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  id v8;
  id result;
  void *v10;
  id v11;
  unsigned int v12;

  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(unsigned __int8 *)(v5 + 30);
  v7 = sub_1000CC22C(*(_DWORD *)(v5 + 16), 2);
  v8 = objc_msgSend(a2, "keyEnumerator");
  result = objc_msgSend(v8, "nextObject");
  if (result)
  {
    v10 = result;
    do
    {
      v11 = objc_msgSend(a2, "objectForKeyedSubscript:", v10);
      objc_msgSend(a1, "writeInt32NoTag:", v7);
      v12 = sub_1000A0C30(1, v10);
      objc_msgSend(a1, "writeInt32NoTag:", sub_1000A362C(v11, v6) + v12);
      objc_msgSend(a1, "writeString:value:", 1, v10);
      sub_1000A375C(a1, (const char *)v11, v6);
      result = objc_msgSend(v8, "nextObject");
      v10 = result;
    }
    while (result);
  }
  return result;
}

void *sub_1000A375C(void *a1, const char *a2, int a3)
{
  switch(a3)
  {
    case 13:
      return objc_msgSend(a1, "writeBytes:value:", 2, a2);
    case 14:
      return objc_msgSend(a1, "writeString:value:", 2, a2);
    case 15:
      return objc_msgSend(a1, "writeMessage:value:", 2, a2);
  }
  return a1;
}

BOOL sub_1000A379C(void *a1)
{
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(a1, "objectEnumerator");
  do
  {
    v2 = objc_msgSend(v1, "nextObject");
    v3 = v2;
  }
  while (v2 && (objc_msgSend(v2, "isInitialized") & 1) != 0);
  return v3 == 0;
}

void sub_1000A37E0(void *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, void *a5)
{
  id v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  id *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v24;
  __CFString *v25;

  v9 = objc_msgSend(a4, "mapKeyDataType");
  v10 = *(unsigned __int8 *)(a4[1] + 30);
  v24 = 0;
  v25 = 0;
  if (v10 == 17)
    v24 = (__CFString *)objc_msgSend(a4, "defaultValue");
  v11 = sub_1000CC254((int)v9, 0);
  v12 = sub_1000CC22C(1, v11);
  v13 = sub_1000CC254(v10, 0);
  v14 = sub_1000CC22C(2, v13);
  while (1)
  {
    while (1)
    {
      v15 = sub_10009CE54((uint64_t)(a2 + 1));
      if ((_DWORD)v15 == v12)
      {
        v16 = (id *)&v25;
        v17 = a2;
        v18 = (int)v9;
        goto LABEL_8;
      }
      v19 = v15;
      if ((_DWORD)v15 != v14)
        break;
      v16 = (id *)&v24;
      v17 = a2;
      v18 = v10;
LABEL_8:
      sub_1000A3A5C(v17, v16, v18, a3, a4);
    }
    if (!(_DWORD)v15)
      break;
    if ((objc_msgSend(a2, "skipField:", v15) & 1) == 0)
      goto LABEL_32;
  }
  v20 = v25;
  if ((_DWORD)v9 == 14 && !v25)
  {
    v20 = &stru_10010E2C8;
    v25 = v20;
  }
  v21 = v24;
  if ((v10 - 13) > 3u || v24)
    goto LABEL_25;
  switch(v10)
  {
    case 13:
      v22 = (__CFString *)(id)sub_1000C8AFC();
LABEL_23:
      v21 = v22;
      v24 = v22;
      goto LABEL_25;
    case 15:
      v22 = (__CFString *)objc_alloc_init((Class)objc_msgSend(a4, "msgClass", v19));
      goto LABEL_23;
    case 14:
      v22 = &stru_10010E2C8;
      goto LABEL_23;
  }
  v21 = 0;
LABEL_25:
  if ((_DWORD)v9 == 14 && (v10 - 13) <= 3u)
  {
    objc_msgSend(a1, "setObject:forKey:", v21, v20);
    goto LABEL_34;
  }
  if (v10 == 17
    && (*(_WORD *)(a4[1] + 28) & 0x1000) != 0
    && !objc_msgSend(a4, "isValidEnumValue:", v21))
  {
    objc_msgSend(a5, "addUnknownMapEntry:value:", *(unsigned int *)(a4[1] + 16), objc_msgSend(a1, "serializedDataForUnknownValue:forKey:keyDataType:", v21, &v25, v9));
  }
  else
  {
    objc_msgSend(a1, "setTransparencyGPBGenericValue:forTransparencyGPBGenericValueKey:", &v24, &v25);
  }
LABEL_32:
  if (((_BYTE)v9 - 13) > 3u)
    goto LABEL_35;
  v20 = v25;
LABEL_34:

LABEL_35:
  if ((v10 - 13) <= 3u)

}

void sub_1000A3A5C(uint64_t *a1, id *a2, int a3, uint64_t a4, void *a5)
{
  int v7;
  uint64_t v8;
  id v10;

  switch(a3)
  {
    case 0:
      *(_BYTE *)a2 = sub_10009CE38(a1 + 1);
      return;
    case 1:
    case 2:
      v7 = sub_10009CDC0(a1 + 1);
      goto LABEL_15;
    case 3:
      *(float *)a2 = sub_10009CCB4(a1 + 1);
      return;
    case 4:
    case 5:
      v8 = sub_10009CD88(a1 + 1);
      goto LABEL_12;
    case 6:
      *(double *)a2 = sub_10009CC7C(a1 + 1);
      return;
    case 7:
    case 11:
    case 17:
      v7 = sub_10009CD74(a1 + 1);
      goto LABEL_15;
    case 8:
    case 12:
      v8 = sub_10009CCEC(a1 + 1);
      goto LABEL_12;
    case 9:
      v7 = sub_10009CDF8(a1 + 1);
LABEL_15:
      *(_DWORD *)a2 = v7;
      return;
    case 10:
      v8 = sub_10009CE18(a1 + 1);
      goto LABEL_12;
    case 13:

      v8 = (uint64_t)sub_10009D0E8(a1 + 1);
      goto LABEL_12;
    case 14:

      v8 = (uint64_t)sub_10009CFFC(a1 + 1);
LABEL_12:
      *a2 = (id)v8;
      break;
    case 15:
      v10 = objc_alloc_init((Class)objc_msgSend(a5, "msgClass"));
      objc_msgSend(a1, "readMessage:extensionRegistry:", v10, a4);

      *a2 = v10;
      break;
    default:
      return;
  }
}

uint64_t sub_1000A4084(unsigned int a1, int a2, int a3)
{
  if (a3 == 1)
    return sub_1000A0A98(a2);
  if (a3 == 11)
    return sub_1000A0E70(a2, a1);
  return 0;
}

uint64_t sub_1000A42D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a3));
}

uint64_t sub_1000A48A8(unsigned int a1, int a2, int a3)
{
  switch(a3)
  {
    case 2:
      return sub_1000A0A98(a2);
    case 9:
      return sub_1000A0F00(a2, a1);
    case 7:
      return sub_1000A0B48(a2, a1);
  }
  return 0;
}

id sub_1000A4A44(id result, uint64_t a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 2:
      return _objc_msgSend(result, "writeSFixed32:value:", a3, a2);
    case 9:
      return _objc_msgSend(result, "writeSInt32:value:", a3, a2);
    case 7:
      return _objc_msgSend(result, "writeInt32:value:", a3, a2);
  }
  return result;
}

uint64_t sub_1000A4B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a3));
}

uint64_t sub_1000A50EC(unint64_t a1, int a2, int a3)
{
  if (a3 == 4)
    return sub_1000A0A00(a2);
  if (a3 == 12)
    return sub_1000A0AE4(a2, a1);
  return 0;
}

uint64_t sub_1000A5338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a3));
}

uint64_t sub_1000A5908(unint64_t a1, int a2, int a3)
{
  switch(a3)
  {
    case 5:
      return sub_1000A0A00(a2);
    case 10:
      return sub_1000A0F98(a2, a1);
    case 8:
      return sub_1000A0AE4(a2, a1);
  }
  return 0;
}

id sub_1000A5AA4(id result, uint64_t a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 5:
      return _objc_msgSend(result, "writeSFixed64:value:", a3, a2);
    case 10:
      return _objc_msgSend(result, "writeSInt64:value:", a3, a2);
    case 8:
      return _objc_msgSend(result, "writeInt64:value:", a3, a2);
  }
  return result;
}

uint64_t sub_1000A5B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a3));
}

uint64_t sub_1000A6314(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  NSString *v5;
  const __CFString *v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a2);
  if (a3)
    v6 = CFSTR("true");
  else
    v6 = CFSTR("false");
  return (*(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_1000A6AA0(uint64_t a1, uint64_t a2, float a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.*g"), 6, a3));
}

uint64_t sub_1000A724C(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.*lg"), 15, *(_QWORD *)&a3));
}

BOOL sub_1000A7520(int a1)
{
  return a1 != -72499473;
}

uint64_t sub_1000A7B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSNumber *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a2), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
}

uint64_t sub_1000A8650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a2), a3);
}

uint64_t sub_1000A8DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a3));
}

uint64_t sub_1000A9584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a3));
}

uint64_t sub_1000A9D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a3));
}

uint64_t sub_1000AA4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a3));
}

uint64_t sub_1000AAC74(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  NSString *v5;
  const __CFString *v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a2);
  if (a3)
    v6 = CFSTR("true");
  else
    v6 = CFSTR("false");
  return (*(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_1000AB3E0(uint64_t a1, uint64_t a2, float a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.*g"), 6, a3));
}

uint64_t sub_1000ABB6C(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.*lg"), 15, *(_QWORD *)&a3));
}

uint64_t sub_1000AC3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSNumber *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a2), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
}

uint64_t sub_1000ACEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a2), a3);
}

uint64_t sub_1000AD6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a3));
}

uint64_t sub_1000ADE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a3));
}

uint64_t sub_1000AE658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a3));
}

uint64_t sub_1000AEE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a3));
}

uint64_t sub_1000AF5C0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  NSString *v5;
  const __CFString *v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a2);
  if (a3)
    v6 = CFSTR("true");
  else
    v6 = CFSTR("false");
  return (*(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_1000AFD4C(uint64_t a1, uint64_t a2, float a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.*g"), 6, a3));
}

uint64_t sub_1000B04F8(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.*lg"), 15, *(_QWORD *)&a3));
}

uint64_t sub_1000B0DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSNumber *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a2), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
}

uint64_t sub_1000B18E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a2), a3);
}

uint64_t sub_1000B2074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a3));
}

uint64_t sub_1000B281C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a3));
}

uint64_t sub_1000B2FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a3));
}

uint64_t sub_1000B378C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a3));
}

uint64_t sub_1000B3F0C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  NSString *v5;
  const __CFString *v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a2);
  if (a3)
    v6 = CFSTR("true");
  else
    v6 = CFSTR("false");
  return (*(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_1000B4678(uint64_t a1, uint64_t a2, float a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.*g"), 6, a3));
}

uint64_t sub_1000B4E04(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a2), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.*lg"), 15, *(_QWORD *)&a3));
}

uint64_t sub_1000B5670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, NSNumber *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a2), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
}

uint64_t sub_1000B6194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, NSString *, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a2), a3);
}

uint64_t sub_1000B68E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a3));
}

uint64_t sub_1000B700C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), a3));
}

uint64_t sub_1000B7750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a3));
}

uint64_t sub_1000B7E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a3));
}

uint64_t sub_1000B8570(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  const __CFString *v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    v4 = CFSTR("true");
  else
    v4 = CFSTR("false");
  return (*(uint64_t (**)(uint64_t, uint64_t, const __CFString *))(v3 + 16))(v3, a2, v4);
}

uint64_t sub_1000B8C38(uint64_t a1, uint64_t a2, float a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.*g"), 6, a3));
}

uint64_t sub_1000B9344(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, NSString *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.*lg"), 15, *(_QWORD *)&a3));
}

uint64_t sub_1000B9B24(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, NSNumber *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, +[NSNumber numberWithInt:](NSNumber, "numberWithInt:"));
}

id sub_1000BDF7C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id result;
  id v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  id v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v5 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v5 + 45) & 1) == 0)
    return sub_1000BE3CC(a2, v5, a3);
  if ((*(_BYTE *)(v5 + 45) & 2) != 0)
  {
    objc_msgSend(a3, "writeTag:format:", *(unsigned int *)(v5 + 40), 2);
    v10 = *(char *)(v5 + 44);
    if (v10 > 6)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v13 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
      if (v13)
      {
        v14 = v13;
        v12 = 0;
        v15 = *(_QWORD *)v25;
        do
        {
          for (i = 0; i != v14; i = (char *)i + 1)
          {
            if (*(_QWORD *)v25 != v15)
              objc_enumerationMutation(a2);
            v12 += (uint64_t)sub_1000BEAE0((id)*(unsigned __int8 *)(v5 + 44), *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i));
          }
          v14 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
        }
        while (v14);
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v11 = qword_1000DF678[v10];
      v12 = (_QWORD)objc_msgSend(a2, "count") * v11;
    }
    objc_msgSend(a3, "writeRawVarintSizeTAs32:", v12);
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v20, &v28, 16);
    if (result)
    {
      v17 = result;
      v18 = *(_QWORD *)v21;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v21 != v18)
            objc_enumerationMutation(a2);
          switch(*(_BYTE *)(v5 + 44))
          {
            case 0:
              objc_msgSend(a3, "writeBoolNoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "BOOLValue"));
              break;
            case 1:
              objc_msgSend(a3, "writeFixed32NoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "unsignedIntValue"));
              break;
            case 2:
              objc_msgSend(a3, "writeSFixed32NoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "intValue"));
              break;
            case 3:
              objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "floatValue");
              objc_msgSend(a3, "writeFloatNoTag:");
              break;
            case 4:
              objc_msgSend(a3, "writeFixed64NoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "unsignedLongLongValue"));
              break;
            case 5:
              objc_msgSend(a3, "writeSFixed64NoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "longLongValue"));
              break;
            case 6:
              objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "doubleValue");
              objc_msgSend(a3, "writeDoubleNoTag:");
              break;
            case 7:
              objc_msgSend(a3, "writeInt32NoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "intValue"));
              break;
            case 8:
              objc_msgSend(a3, "writeInt64NoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "longLongValue"));
              break;
            case 9:
              objc_msgSend(a3, "writeSInt32NoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "intValue"));
              break;
            case 0xA:
              objc_msgSend(a3, "writeSInt64NoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "longLongValue"));
              break;
            case 0xB:
              objc_msgSend(a3, "writeUInt32NoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "unsignedIntValue"));
              break;
            case 0xC:
              objc_msgSend(a3, "writeUInt64NoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "unsignedLongLongValue"));
              break;
            case 0xD:
              objc_msgSend(a3, "writeBytesNoTag:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19));
              break;
            case 0xE:
              objc_msgSend(a3, "writeStringNoTag:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19));
              break;
            case 0xF:
              objc_msgSend(a3, "writeMessageNoTag:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19));
              break;
            case 0x10:
              objc_msgSend(a3, "writeGroupNoTag:value:", *(unsigned int *)(v5 + 40), *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19));
              break;
            case 0x11:
              objc_msgSend(a3, "writeEnumNoTag:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), "intValue"));
              break;
            default:
              break;
          }
          v19 = (char *)v19 + 1;
        }
        while (v17 != v19);
        result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v20, &v28, 16);
        v17 = result;
      }
      while (result);
    }
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (result)
    {
      v7 = result;
      v8 = *(_QWORD *)v29;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v29 != v8)
            objc_enumerationMutation(a2);
          sub_1000BE3CC(*(id *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v9), v5, a3);
          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
        v7 = result;
      }
      while (result);
    }
  }
  return result;
}

id sub_1000BE3CC(id result, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  switch(*(_BYTE *)(a2 + 44))
  {
    case 0:
      result = objc_msgSend(a3, "writeBool:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "BOOLValue"));
      break;
    case 1:
      result = objc_msgSend(a3, "writeFixed32:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "unsignedIntValue"));
      break;
    case 2:
      result = _objc_msgSend(a3, "writeSFixed32:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "intValue"));
      break;
    case 3:
      v4 = *(unsigned int *)(a2 + 40);
      objc_msgSend(result, "floatValue");
      result = objc_msgSend(a3, "writeFloat:value:", v4);
      break;
    case 4:
      result = objc_msgSend(a3, "writeFixed64:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "unsignedLongLongValue"));
      break;
    case 5:
      result = _objc_msgSend(a3, "writeSFixed64:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "longLongValue"));
      break;
    case 6:
      v5 = *(unsigned int *)(a2 + 40);
      objc_msgSend(result, "doubleValue");
      result = objc_msgSend(a3, "writeDouble:value:", v5);
      break;
    case 7:
      result = _objc_msgSend(a3, "writeInt32:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "intValue"));
      break;
    case 8:
      result = _objc_msgSend(a3, "writeInt64:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "longLongValue"));
      break;
    case 9:
      result = _objc_msgSend(a3, "writeSInt32:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "intValue"));
      break;
    case 0xA:
      result = _objc_msgSend(a3, "writeSInt64:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "longLongValue"));
      break;
    case 0xB:
      result = objc_msgSend(a3, "writeUInt32:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "unsignedIntValue"));
      break;
    case 0xC:
      result = objc_msgSend(a3, "writeUInt64:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "unsignedLongLongValue"));
      break;
    case 0xD:
      result = objc_msgSend(a3, "writeBytes:value:", *(unsigned int *)(a2 + 40), result);
      break;
    case 0xE:
      result = objc_msgSend(a3, "writeString:value:", *(unsigned int *)(a2 + 40), result);
      break;
    case 0xF:
      v6 = *(unsigned int *)(a2 + 40);
      if ((*(_BYTE *)(a2 + 45) & 4) != 0)
        result = _objc_msgSend(a3, "writeMessageSetExtension:value:", v6, result);
      else
        result = objc_msgSend(a3, "writeMessage:value:", v6, result);
      break;
    case 0x10:
      result = objc_msgSend(a3, "writeGroup:value:", *(unsigned int *)(a2 + 40), result);
      break;
    case 0x11:
      result = objc_msgSend(a3, "writeEnum:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "intValue"));
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000BE664(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *j;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v3 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v3 + 45) & 1) == 0)
    return sub_1000BE898(*(_QWORD *)(a1 + 8), a2);
  if ((*(_BYTE *)(v3 + 45) & 2) != 0)
  {
    v10 = *(char *)(v3 + 44);
    if (v10 > 6)
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v13 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v13)
      {
        v14 = v13;
        v12 = 0;
        v15 = *(_QWORD *)v19;
        do
        {
          for (i = 0; i != v14; i = (char *)i + 1)
          {
            if (*(_QWORD *)v19 != v15)
              objc_enumerationMutation(a2);
            v12 += (uint64_t)sub_1000BEAE0((id)*(unsigned __int8 *)(v3 + 44), *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i));
          }
          v14 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v14);
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v11 = qword_1000DF678[v10];
      v12 = (_QWORD)objc_msgSend(a2, "count") * v11;
    }
    v17 = sub_1000A0A4C(*(_DWORD *)(v3 + 40));
    return v17 + v12 + sub_10009F23C(v12);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      v8 = *(_QWORD *)v19;
      do
      {
        for (j = 0; j != v6; j = (char *)j + 1)
        {
          if (*(_QWORD *)v19 != v8)
            objc_enumerationMutation(a2);
          v7 += sub_1000BE898(v3, *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)j));
        }
        v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v6);
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t sub_1000BE898(uint64_t result, void *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  unsigned int v10;

  switch(*(_BYTE *)(result + 44))
  {
    case 0:
      v2 = *(_DWORD *)(result + 40);
      objc_msgSend(a2, "BOOLValue");
      result = sub_1000A0BE4(v2);
      break;
    case 1:
      v5 = *(_DWORD *)(result + 40);
      objc_msgSend(a2, "unsignedIntValue");
      result = sub_1000A0A98(v5);
      break;
    case 2:
      v3 = *(_DWORD *)(result + 40);
      objc_msgSend(a2, "intValue");
      result = sub_1000A0A98(v3);
      break;
    case 3:
      v6 = *(_DWORD *)(result + 40);
      objc_msgSend(a2, "floatValue");
      result = sub_1000A0A98(v6);
      break;
    case 4:
      v4 = *(_DWORD *)(result + 40);
      objc_msgSend(a2, "unsignedLongLongValue");
      result = sub_1000A0A00(v4);
      break;
    case 5:
      v7 = *(_DWORD *)(result + 40);
      objc_msgSend(a2, "longLongValue");
      result = sub_1000A0A00(v7);
      break;
    case 6:
      v8 = *(_DWORD *)(result + 40);
      objc_msgSend(a2, "doubleValue");
      result = sub_1000A0A00(v8);
      break;
    case 7:
    case 0x11:
      result = sub_1000A0B48(*(_DWORD *)(result + 40), objc_msgSend(a2, "intValue"));
      break;
    case 8:
      result = sub_1000A0AE4(*(_DWORD *)(result + 40), (unint64_t)objc_msgSend(a2, "longLongValue"));
      break;
    case 9:
      result = sub_1000A0F00(*(_DWORD *)(result + 40), (int)objc_msgSend(a2, "intValue"));
      break;
    case 0xA:
      result = sub_1000A0F98(*(_DWORD *)(result + 40), (uint64_t)objc_msgSend(a2, "longLongValue"));
      break;
    case 0xB:
      result = sub_1000A0E70(*(_DWORD *)(result + 40), objc_msgSend(a2, "unsignedIntValue"));
      break;
    case 0xC:
      result = sub_1000A0AE4(*(_DWORD *)(result + 40), (unint64_t)objc_msgSend(a2, "unsignedLongLongValue"));
      break;
    case 0xD:
      result = (uint64_t)sub_1000A0DD4(*(_DWORD *)(result + 40), a2);
      break;
    case 0xE:
      result = (uint64_t)sub_1000A0C30(*(_DWORD *)(result + 40), a2);
      break;
    case 0xF:
      v9 = *(_BYTE *)(result + 45);
      v10 = *(_DWORD *)(result + 40);
      if ((v9 & 4) != 0)
        result = (uint64_t)sub_1000A1000(v10, a2);
      else
        result = (uint64_t)sub_1000A0D38(v10, a2);
      break;
    case 0x10:
      result = (uint64_t)sub_1000A0CD0(*(_DWORD *)(result + 40), a2);
      break;
    default:
      return result;
  }
  return result;
}

id sub_1000BEAE0(id result, void *a2)
{
  id v2;

  switch((int)result)
  {
    case 0:
      objc_msgSend(a2, "BOOLValue");
      return (id)sub_10002606C();
    case 1:
      objc_msgSend(a2, "unsignedIntValue");
      return (id)sub_100026204();
    case 2:
      objc_msgSend(a2, "intValue");
      return (id)sub_100026204();
    case 3:
      objc_msgSend(a2, "floatValue");
      return (id)sub_100026204();
    case 4:
      objc_msgSend(a2, "unsignedLongLongValue");
      return (id)sub_1000950F4();
    case 5:
      objc_msgSend(a2, "longLongValue");
      return (id)sub_1000950F4();
    case 6:
      objc_msgSend(a2, "doubleValue");
      return (id)sub_1000950F4();
    case 7:
    case 17:
      return (id)sub_10009F030(objc_msgSend(a2, "intValue"));
    case 8:
      v2 = objc_msgSend(a2, "longLongValue");
      goto LABEL_13;
    case 9:
      return (id)sub_10009F76C((int)objc_msgSend(a2, "intValue"));
    case 10:
      return (id)sub_10009F964((uint64_t)objc_msgSend(a2, "longLongValue"));
    case 11:
      return (id)sub_10009F23C(objc_msgSend(a2, "unsignedIntValue"));
    case 12:
      v2 = objc_msgSend(a2, "unsignedLongLongValue");
LABEL_13:
      result = (id)sub_10009ECA4((unint64_t)v2);
      break;
    case 13:
      result = sub_1000A09B4(a2);
      break;
    case 14:
      result = sub_1000A0914(a2);
      break;
    case 15:
      result = sub_1000A0968(a2);
      break;
    case 16:
      result = objc_msgSend(a2, "serializedSize");
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000BEE20(void *key, const __CFDictionary *a2, CFDictionaryRef theDict)
{
  void *Value;
  CFMutableDictionaryRef MutableCopy;

  Value = (void *)CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)sub_1000BEEAC, Value);
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a2);
    CFDictionarySetValue(theDict, key, MutableCopy);
    CFRelease(MutableCopy);
  }
}

void sub_1000BEEAC(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

_QWORD *sub_1000BEF2C(objc_class *a1, uint64_t a2, void *a3)
{
  _QWORD *v5;

  v5 = objc_alloc_init(a1);
  v5[4] = a2;
  v5[5] = a3;
  return v5;
}

BOOL sub_1000BEF6C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) == a2;
}

id sub_1000BEF7C(_QWORD *a1)
{
  id result;
  _QWORD *v3;

  result = (id)a1[4];
  if (result)
  {
    v3 = (_QWORD *)a1[5];
    if (v3)
      return (id)sub_1000C95CC((uint64_t)result, v3, a1);
    else
      return objc_msgSend(result, "setExtension:value:", a1[6]);
  }
  return result;
}

id sub_1000BEFA4(_QWORD *a1, uint64_t a2)
{
  void *v4;
  id result;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  int *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = (void *)*((_QWORD *)objc_msgSend((id)objc_opt_class(a1, a2), "descriptor") + 1);
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v12;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v8);
        if (objc_msgSend(v9, "fieldType") == 1 && sub_1000C8FE0((uint64_t)a1, (uint64_t)v9) == a2)
        {
          if (*(unsigned __int8 *)(v9[1] + 30) - 13 >= 4)
            v10 = &OBJC_IVAR___TransparencyGPBInt32Array__autocreator;
          else
            v10 = &OBJC_IVAR___TransparencyGPBAutocreatedArray__autocreator;
          *(_QWORD *)(a2 + *v10) = 0;
          return sub_1000BEF7C(a1);
        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      v6 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

id sub_1000BF10C(_QWORD *a1, uint64_t a2)
{
  void *v4;
  id result;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  int *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = (void *)*((_QWORD *)objc_msgSend((id)objc_opt_class(a1, a2), "descriptor") + 1);
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v12;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v8);
        if (objc_msgSend(v9, "fieldType") == 2 && sub_1000C8FE0((uint64_t)a1, (uint64_t)v9) == a2)
        {
          if (objc_msgSend(v9, "mapKeyDataType") == 14
            && *(unsigned __int8 *)(v9[1] + 30) - 13 < 4)
          {
            v10 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
          }
          else
          {
            v10 = &OBJC_IVAR___TransparencyGPBInt32Int32Dictionary__autocreator;
          }
          *(_QWORD *)(a2 + *v10) = 0;
          return sub_1000BEF7C(a1);
        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      v6 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

void sub_1000BF288(uint64_t a1)
{
  if (a1)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      *(_QWORD *)(a1 + 32) = 0;

      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
}

NSError *sub_1000BF534(void *a1)
{
  NSError *result;
  id v3;
  NSDictionary *v4;
  const __CFString *v5;
  id v6;

  if (!objc_msgSend(objc_msgSend(a1, "name"), "isEqual:", CFSTR("TransparencyGPBCodedInputStreamException"))|| (result = (NSError *)objc_msgSend(objc_msgSend(a1, "userInfo"), "objectForKeyedSubscript:", CFSTR("TransparencyGPBCodedInputStreamUnderlyingErrorKey"))) == 0)
  {
    v3 = objc_msgSend(a1, "reason");
    if (objc_msgSend(v3, "length"))
    {
      v5 = CFSTR("Reason");
      v6 = v3;
      v4 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1);
    }
    else
    {
      v4 = 0;
    }
    return +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("TransparencyGPBMessageErrorDomain"), -100, v4);
  }
  return result;
}

void sub_1000BFAE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = objc_msgSend(a3, "copyWithZone:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v5, a2);

}

NSMutableDictionary *sub_1000BFBAC(void *a1, uint64_t a2)
{
  NSMutableDictionary *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  unsigned int v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  id v17;
  id v18;
  void *v19;
  uint64_t v21;
  NSMutableDictionary *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];

  if (!objc_msgSend(a1, "count"))
    return 0;
  v4 = -[NSMutableDictionary initWithCapacity:](+[NSMutableDictionary allocWithZone:](NSMutableDictionary, "allocWithZone:", a2), "initWithCapacity:", objc_msgSend(a1, "count"));
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v29;
    v21 = *(_QWORD *)v29;
    v22 = v4;
    do
    {
      v8 = 0;
      v23 = v6;
      do
      {
        if (*(_QWORD *)v29 != v7)
          objc_enumerationMutation(a1);
        v9 = *(_QWORD **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v8);
        v10 = objc_msgSend(a1, "objectForKey:", v9);
        v11 = *(unsigned __int8 *)(v9[1] + 44) - 15;
        if (objc_msgSend(v9, "isRepeated"))
        {
          if (v11 > 1)
          {
            v18 = objc_msgSend(v10, "mutableCopyWithZone:", a2);
            goto LABEL_20;
          }
          v12 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v10, "count"));
          v24 = 0u;
          v25 = 0u;
          v26 = 0u;
          v27 = 0u;
          v13 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
          if (v13)
          {
            v14 = v13;
            v15 = *(_QWORD *)v25;
            do
            {
              for (i = 0; i != v14; i = (char *)i + 1)
              {
                if (*(_QWORD *)v25 != v15)
                  objc_enumerationMutation(v10);
                v17 = objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i), "copyWithZone:", a2);
                objc_msgSend(v12, "addObject:", v17);

              }
              v14 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
            }
            while (v14);
          }
          v4 = v22;
          -[NSMutableDictionary setObject:forKey:](v22, "setObject:forKey:", v12, v9);

          v7 = v21;
          v6 = v23;
        }
        else
        {
          if (v11 <= 1)
          {
            v18 = objc_msgSend(v10, "copyWithZone:", a2);
LABEL_20:
            v19 = v18;
            -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v18, v9);

            goto LABEL_22;
          }
          -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v10, v9);
        }
LABEL_22:
        v8 = (char *)v8 + 1;
      }
      while (v8 != v6);
      v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    }
    while (v6);
  }
  return v4;
}

_QWORD *sub_1000C01A0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;

  v4 = a2[1];
  if (*(unsigned __int8 *)(v4 + 30) - 15 >= 2)
  {
    if (sub_1000C94C8(a1, *(_DWORD *)(v4 + 20), *(_DWORD *)(v4 + 16)))
      return *(_QWORD **)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a2[1] + 24));
    else
      return objc_msgSend(a2, "defaultValue");
  }
  else
  {
    v5 = (unint64_t *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(v4 + 24));
    v6 = (_QWORD *)atomic_load(v5);
    if (!v6)
    {
      v6 = objc_alloc_init((Class)objc_msgSend(a2, "msgClass"));
      v6[4] = a1;
      v6[5] = a2;
      while (1)
      {
        v7 = __ldaxr(v5);
        if (v7)
          break;
        if (!__stlxr((unint64_t)v6, v5))
          return v6;
      }
      __clrex();
      sub_1000BF288((uint64_t)v6);

      return (_QWORD *)v7;
    }
  }
  return v6;
}

void sub_1000C0588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000C05A8(_QWORD *result, _QWORD *a2, void *a3, _BYTE *a4)
{
  _QWORD *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  if (*(unsigned __int8 *)(a2[1] + 44) - 15 <= 1)
  {
    v6 = result;
    if (objc_msgSend(a2, "isRepeated"))
    {
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      result = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (!result)
        return result;
      v7 = result;
      v8 = *(_QWORD *)v11;
LABEL_5:
      v9 = 0;
      while (1)
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(a3);
        result = objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9), "isInitialized");
        if (!(_DWORD)result)
          break;
        if (v7 == (id)++v9)
        {
          result = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
          v7 = result;
          if (result)
            goto LABEL_5;
          return result;
        }
      }
    }
    else
    {
      result = objc_msgSend(a3, "isInitialized");
      if ((result & 1) != 0)
        return result;
    }
    *(_BYTE *)(*(_QWORD *)(v6[4] + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_1000C1578(uint64_t a1, void *a2)
{
  uint64_t result;
  id v5;
  uint64_t v6;

  result = objc_opt_isKindOfClass(a1, objc_msgSend(a2, "containingMessageClass"));
  if ((result & 1) == 0)
  {
    v5 = objc_msgSend(a2, "singletonName");
    return (uint64_t)+[NSException raise:format:](NSException, "raise:format:", NSInvalidArgumentException, CFSTR("Extension %@ used on wrong class (%@ instead of %@)"), v5, objc_opt_class(a1, v6), objc_msgSend(a2, "containingMessageClass"));
  }
  return result;
}

void sub_1000C1E58(_QWORD *a1, int a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  int v9;
  unint64_t v10;
  const __CFString *v11;
  __CFString *v12;
  uint64_t v13;
  id v14;
  const __CFString *v15;
  const __CFString *v16;
  __CFString *v17;
  __CFString *v18;

  if (a2)
  {
    v9 = sub_10009CD74(a3 + 1);
    v10 = sub_10009D1D4((uint64_t)(a3 + 1), v9);
    while (sub_10009D224((uint64_t)(a3 + 1)))
    {
      v11 = sub_1000C54BC(a1, a5, a3, a4, 0);
      if (v11)
      {
        v12 = (__CFString *)v11;
        objc_msgSend(a5, "addExtension:value:", a1, v11);

      }
    }
    sub_10009D21C((uint64_t)(a3 + 1), v10);
  }
  else
  {
    v13 = a1[1];
    if ((*(_BYTE *)(v13 + 45) & 1) != 0)
    {
      v15 = sub_1000C54BC(a1, a5, a3, a4, 0);
      if (v15)
      {
        v17 = (__CFString *)v15;
        objc_msgSend(a5, "addExtension:value:", a1, v15);

      }
    }
    else
    {
      if (*(unsigned __int8 *)(v13 + 44) - 15 > 1)
        v14 = 0;
      else
        v14 = objc_msgSend(a5, "getExistingExtension:", a1);
      v16 = sub_1000C54BC(a1, a5, a3, a4, v14);
      if (v16)
      {
        v18 = (__CFString *)v16;
        objc_msgSend(a5, "setExtension:value:", a1, v16);

      }
    }
  }
}

uint64_t sub_1000C1FFC(_QWORD *a1)
{
  uint64_t result;

  result = a1[1];
  if (!result)
  {
    a1[1] = objc_alloc_init(TransparencyGPBUnknownFieldSet);
    sub_1000BEF7C(a1);
    return a1[1];
  }
  return result;
}

uint64_t sub_1000C26F4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t *v6;
  void *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;

  v5 = *(unsigned __int8 *)(a2[1] + 30);
  v6 = (uint64_t *)(a3 + 8);
  v7 = sub_1000C3240((uint64_t)a1, a2);
  v8 = sub_10009CD74(v6);
  v9 = sub_10009D1D4((uint64_t)v6, v8);
  while (sub_10009D224((uint64_t)v6))
  {
    switch(v5)
    {
      case 0:
        v10 = sub_10009CE38(v6);
        goto LABEL_16;
      case 1:
      case 2:
        v10 = sub_10009CDC0(v6);
        goto LABEL_16;
      case 3:
        *(float *)&v12 = sub_10009CCB4(v6);
        objc_msgSend(v7, "addValue:", v12);
        break;
      case 4:
      case 5:
        v10 = sub_10009CD88(v6);
        goto LABEL_16;
      case 6:
        objc_msgSend(v7, "addValue:", sub_10009CC7C(v6));
        break;
      case 7:
      case 11:
        v10 = sub_10009CD74(v6);
        goto LABEL_16;
      case 8:
      case 12:
        v10 = sub_10009CCEC(v6);
        goto LABEL_16;
      case 9:
        v10 = sub_10009CDF8(v6);
        goto LABEL_16;
      case 10:
        v10 = sub_10009CE18(v6);
LABEL_16:
        objc_msgSend(v7, "addValue:", v10);
        break;
      case 17:
        v11 = sub_10009CD74(v6);
        if ((*(_WORD *)(a2[1] + 28) & 0x1000) != 0 && !objc_msgSend(a2, "isValidEnumValue:", v11))
          objc_msgSend((id)sub_1000C1FFC(a1), "mergeVarintField:value:", *(unsigned int *)(a2[1] + 16), v11);
        else
          objc_msgSend(v7, "addRawValue:", v11);
        break;
      default:
        break;
    }
  }
  return sub_10009D21C((uint64_t)v6, v9);
}

void sub_1000C28D8(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  void *v8;
  uint64_t *v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;

  v8 = sub_1000C3240((uint64_t)a1, a2);
  v9 = a3 + 1;
  switch(*(_BYTE *)(a2[1] + 30))
  {
    case 0:
      sub_10009CE38(v9);
      goto LABEL_20;
    case 1:
    case 2:
      sub_10009CDC0(v9);
      goto LABEL_20;
    case 3:
      *(float *)&v10 = sub_10009CCB4(v9);
      v11 = v8;
      goto LABEL_5;
    case 4:
    case 5:
      sub_10009CD88(v9);
      goto LABEL_20;
    case 6:
      v10 = sub_10009CC7C(v9);
      v11 = v8;
      goto LABEL_5;
    case 7:
    case 0xB:
      sub_10009CD74(v9);
      goto LABEL_20;
    case 8:
    case 0xC:
      sub_10009CCEC(v9);
      goto LABEL_20;
    case 9:
      sub_10009CDF8(v9);
      goto LABEL_20;
    case 0xA:
      sub_10009CE18(v9);
LABEL_20:
      v11 = v8;
LABEL_5:
      objc_msgSend(v11, "addValue:", v10);
      return;
    case 0xD:
      v12 = sub_10009D0E8(v9);
      goto LABEL_22;
    case 0xE:
      v12 = (void *)sub_10009CFFC(v9);
LABEL_22:
      v14 = v12;
      v16 = v12;
      v13 = v8;
      goto LABEL_23;
    case 0xF:
      v16 = objc_alloc_init((Class)objc_msgSend(a2, "msgClass"));
      objc_msgSend(a3, "readMessage:extensionRegistry:", v16, a4);
      goto LABEL_14;
    case 0x10:
      v16 = objc_alloc_init((Class)objc_msgSend(a2, "msgClass"));
      objc_msgSend(a3, "readGroup:message:extensionRegistry:", *(unsigned int *)(a2[1] + 16), v16, a4);
LABEL_14:
      v13 = v8;
      v14 = v16;
LABEL_23:
      objc_msgSend(v13, "addObject:", v14);

      break;
    case 0x11:
      v15 = sub_10009CD74(v9);
      if ((*(_WORD *)(a2[1] + 28) & 0x1000) != 0 && !objc_msgSend(a2, "isValidEnumValue:", v15))
        objc_msgSend((id)sub_1000C1FFC(a1), "mergeVarintField:value:", *(unsigned int *)(a2[1] + 16), v15);
      else
        objc_msgSend(v8, "addRawValue:", v15);
      break;
    default:
      return;
  }
}

void *sub_1000C2B64(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = (void *)sub_1000C8FE0(a1, (uint64_t)a2);
  if (!v4)
  {
    v4 = sub_1000C5888(a2, 0);
    sub_1000C95FC(a1, a2, v4);
  }
  return v4;
}

void *sub_1000C3240(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = (void *)sub_1000C8FE0(a1, (uint64_t)a2);
  if (!v4)
  {
    v4 = sub_1000C5CD8(a2, 0);
    sub_1000C95FC(a1, a2, v4);
  }
  return v4;
}

void sub_1000C432C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x3A0], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C43B4(uint64_t a1)
{
  uint64_t result;

  result = sub_10002606C();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C43EC(uint64_t a1)
{
  uint64_t result;

  result = sub_100026204();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C4424(uint64_t a1)
{
  uint64_t result;

  result = sub_100026204();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C445C(uint64_t a1)
{
  uint64_t result;

  result = sub_100026204();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C4490(uint64_t a1)
{
  uint64_t result;

  result = sub_1000950F4();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C44C8(uint64_t a1)
{
  uint64_t result;

  result = sub_1000950F4();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C4500(uint64_t a1)
{
  uint64_t result;

  result = sub_1000950F4();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C4534(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_10009F030(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C456C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = sub_10009ECA4(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C45A4(uint64_t a1, int a2)
{
  uint64_t result;

  result = sub_10009F76C(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C45DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10009F964(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C4614(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_10009F23C(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C464C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = sub_10009ECA4(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1000C4684(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_10009F030(a2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

BOOL sub_1000C5130(uint64_t a1, uint64_t a2)
{
  return sub_1000C94C8(a2, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36));
}

void sub_1000C5140(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  if (a3)
  {
    v5 = objc_opt_class(a2, a2);
    +[NSException raise:format:](NSException, "raise:format:", NSInvalidArgumentException, CFSTR("%@: %@ can only be set to NO (to clear field)."), v5, NSStringFromSelector(*(SEL *)(*(_QWORD *)(a1 + 32) + 48)));
  }
  sub_1000C9258(a2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1000C51D4(uint64_t a1, uint64_t a2)
{
  return sub_1000C9514(a2, *(_DWORD *)(a1 + 32));
}

TransparencyGPBAutocreatedArray *sub_1000C51E4(uint64_t a1, objc_class *a2)
{
  _QWORD *v2;
  unint64_t *v3;
  TransparencyGPBAutocreatedArray *result;
  unint64_t v5;
  int *v6;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (unint64_t *)(*((_QWORD *)a2 + 8) + *(unsigned int *)(v2[1] + 24));
  result = (TransparencyGPBAutocreatedArray *)atomic_load(v3);
  if (!result)
  {
    result = sub_1000C5CD8(v2, a2);
    while (1)
    {
      v5 = __ldaxr(v3);
      if (v5)
        break;
      if (!__stlxr((unint64_t)result, v3))
        return result;
    }
    __clrex();
    if (*(unsigned __int8 *)(v2[1] + 30) - 13 >= 4)
      v6 = &OBJC_IVAR___TransparencyGPBInt32Array__autocreator;
    else
      v6 = &OBJC_IVAR___TransparencyGPBAutocreatedArray__autocreator;
    *(Class *)((char *)&result->super.super.super.isa + *v6) = 0;

    return (TransparencyGPBAutocreatedArray *)v5;
  }
  return result;
}

TransparencyGPBAutocreatedDictionary *sub_1000C5294(uint64_t a1, objc_class *a2)
{
  _QWORD *v2;
  unint64_t *v3;
  TransparencyGPBAutocreatedDictionary *v4;
  TransparencyGPBAutocreatedDictionary *v5;
  unint64_t v6;
  int *v7;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (unint64_t *)(*((_QWORD *)a2 + 8) + *(unsigned int *)(v2[1] + 24));
  v4 = (TransparencyGPBAutocreatedDictionary *)atomic_load(v3);
  if (!v4)
  {
    v5 = sub_1000C5888(*(_QWORD **)(a1 + 32), a2);
    v4 = v5;
    while (1)
    {
      v6 = __ldaxr(v3);
      if (v6)
        break;
      if (!__stlxr((unint64_t)v5, v3))
        return v4;
    }
    __clrex();
    if (objc_msgSend(v2, "mapKeyDataType") == 14
      && *(unsigned __int8 *)(v2[1] + 30) - 13 < 4)
    {
      v7 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
    }
    else
    {
      v7 = &OBJC_IVAR___TransparencyGPBInt32Int32Dictionary__autocreator;
    }
    *(Class *)((char *)&v4->super.super.super.isa + *v7) = 0;

    return (TransparencyGPBAutocreatedDictionary *)v6;
  }
  return v4;
}

