uint64_t sub_10068EBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a7
                                                                                + 8
                                                                                * ((2041
                                                                                  * ((LODWORD(STACK[0x3B68]) ^ (LODWORD(STACK[0x37A8]) + 119) & 0xF7) & 1u)) ^ LODWORD(STACK[0x37A8])))
                                                                    - ((LODWORD(STACK[0x37A8]) - 978) | 0x441u)
                                                                    + 5191))(a1, a2, a3, LODWORD(STACK[0x3828]));
}

uint64_t sub_10068EC18(int a1, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned __int8 v14;
  int v15;
  int v16;

  v11 = a1
      + 4647
      * ((((*(_BYTE *)(v9
                                      + 4647 * (a4 ^ 0xAF)
                                      + 9544938
                                      - ((((4647 * (a4 ^ 0xAFu) + 9544938)
                                                       * (unint64_t)v10) >> 32) >> 1)
                                      * v8)
                           - 87) ^ 0xFB)
                         + 85) ^ 0x9A);
  v12 = (*(unsigned __int8 *)(v9 + v11 - (((v11 * (unint64_t)v10) >> 32) >> 1) * v8) ^ 0xFFFFFFC3)
      + 85;
  v13 = (((LODWORD(STACK[0x3A48]) ^ a4 ^ 0x66) + 111) ^ a2);
  v14 = a4 ^ LODWORD(STACK[0x3818]);
  v15 = *(unsigned __int8 *)(v9
                           + 4647 * v13
                           + 17937420
                           - ((((4647 * v13 + 17937420) * (unint64_t)v10) >> 32) >> 1)
                           * v8) ^ 0xE;
  LODWORD(STACK[0x3C78]) = a4 ^ LODWORD(STACK[0x3A50]) ^ 7;
  LODWORD(STACK[0x3C60]) = v12 ^ LODWORD(STACK[0x3A60]);
  LODWORD(STACK[0x3C50]) = (v15 >> 3) | (32 * v15);
  v16 = *(unsigned __int8 *)(v9
                           + 4647 * (v14 ^ 0xB9)
                           + 13123128
                           - ((((4647 * (v14 ^ 0xB9u) + 13123128) * (unint64_t)v10) >> 32) >> 1)
                           * v8)
      - 71;
  LODWORD(STACK[0x3C58]) = a4 ^ LODWORD(STACK[0x3A80]) ^ 4;
  LODWORD(STACK[0x3C68]) = (v16 ^ (v16 << 6) ^ (4 * v16) ^ 0xFFFFFFFE) + 26;
  return ((uint64_t (*)(void))(*(_QWORD *)(a7 + 8 * v7) - 12))();
}

uint64_t sub_10068EF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v11 = STACK[0x37B0];
  v12 = STACK[0x3828];
  v13 = *(unsigned __int8 *)(v9
                           + 4647 * (v12 ^ 0x83)
                           + 14331348
                           - ((((4647 * (v12 ^ 0x83u) + 14331348) * (unint64_t)v10) >> 32) >> 1)
                           * v8)
      + 117;
  LODWORD(STACK[0x3C50]) = LODWORD(STACK[0x3BD0]) ^ LODWORD(STACK[0x3828]) ^ 0xFFFFFFDE;
  LODWORD(STACK[0x3C58]) = LODWORD(STACK[0x3B40]) ^ v12 ^ 0x2C;
  LODWORD(STACK[0x3C68]) = LODWORD(STACK[0x3BA0]) ^ v12 ^ 0xFFFFFFC9;
  LODWORD(STACK[0x3C60]) = LODWORD(STACK[0x3BD8]) ^ v12 ^ 0x3C;
  LODWORD(STACK[0x3C78]) = ((v13 ^ v7 ^ v7 & (v13 >> 2)) + 26) ^ LODWORD(STACK[0x3BB8]);
  return ((uint64_t (*)(void))(*(_QWORD *)(a7 + 8 * v11) - 12))();
}

uint64_t sub_10068F1E0(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4, int a5, unsigned __int8 a6, uint64_t a7, unsigned __int8 a8)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  unsigned __int8 v11;
  int v12;
  int v13;
  unsigned __int8 v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned int v51;
  int v52;
  char v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  char v60;
  int v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t (*v72)(void);

  LODWORD(STACK[0x3980]) = v16;
  v20 = (v16 - 2009088892) & 0x77C0629F;
  LODWORD(STACK[0x3B60]) = v20;
  v20 -= 16456;
  LODWORD(STACK[0x3960]) = v20;
  v21 = v13 + (v14 ^ 0xC) * (v20 ^ 0x33EA);
  LOBYTE(v21) = *(_BYTE *)(v18 + (v21 - ((81037119 * (unint64_t)(v21 >> 7)) >> 32) * v17)) - 71;
  LOBYTE(v21) = (v21 ^ ((_BYTE)v21 << 6) ^ (4 * v21) ^ 0xFE) + 26;
  v22 = (*(_BYTE *)(v18
                  + (v21 ^ 0xF) * v15
                  + 27589239
                  - (((((v21 ^ 0xFu) * v15 + 27589239) * (unint64_t)v19) >> 32) >> 1)
                  * v17) ^ v21 ^ 0xCD)
      * v15
      + 14331348;
  v23 = *(unsigned __int8 *)(v18 + v22 - (((v22 * (unint64_t)v19) >> 32) >> 1) * v17) + 117;
  v25 = (a5 ^ 0x96) * v15
      + 27589239
      - (((((a5 ^ 0x96u) * v15 + 27589239) * (unint64_t)v19) >> 32) >> 1) * v17;
  v26 = (LODWORD(STACK[0x3C50]) ^ 0xAD) * v15
      + 10734570
      - (((((LODWORD(STACK[0x3C50]) ^ 0xADu) * v15 + 10734570) * (unint64_t)v19) >> 32) >> 1)
      * v17;
  v27 = (v8 ^ 0x5D) * v15
      + 10734570
      - (((((v8 ^ 0x5Du) * v15 + 10734570) * (unint64_t)v19) >> 32) >> 1) * v17;
  v28 = *(unsigned __int8 *)(v18
                           + (a2 ^ 0x92) * v15
                           + 14331348
                           - (((((a2 ^ 0x92u) * v15 + 14331348) * (unint64_t)v19) >> 32) >> 1)
                           * v17)
      + 117;
  v29 = (v28 ^ 0x12 ^ (v28 >> 2) & 0x12) + 26;
  v30 = (((v28 ^ 0x12 ^ (v28 >> 2) & 0x12) + 26) ^ 0xF) * v15 + 27589239;
  v31 = v30 - (((v30 * (unint64_t)v19) >> 32) >> 1) * v17;
  v32 = 4647 * (a6 ^ 0x3C)
      + 10734570
      - ((((4647 * (a6 ^ 0x3Cu) + 10734570) * (unint64_t)v19) >> 32) >> 1) * v17;
  v33 = STACK[0x3C78];
  LODWORD(STACK[0x3970]) = 4647 * (v9 ^ 0x85)
                         + 10734570
                         - ((((4647 * (v9 ^ 0x85u) + 10734570) * (unint64_t)v19) >> 32) >> 1) * v17;
  LODWORD(STACK[0x3968]) = 4647 * (LODWORD(STACK[0x3C58]) ^ 0x18)
                         + 10734570
                         - ((((4647 * (LODWORD(STACK[0x3C58]) ^ 0x18u) + 10734570)
                                          * (unint64_t)v19) >> 32) >> 1)
                         * v17;
  LODWORD(STACK[0x3C50]) = 4647 * (a4 ^ 0xB2)
                         + 27589239
                         - ((((4647 * (a4 ^ 0xB2u) + 27589239) * (unint64_t)v19) >> 32) >> 1) * v17;
  v34 = ((v23 ^ v10 ^ v10 & (v23 >> 2)) + 26) ^ LODWORD(STACK[0x3990]);
  LODWORD(STACK[0x3978]) = 4647 * (LODWORD(STACK[0x3C60]) ^ 0x5B)
                         + 10734570
                         - ((((4647 * (LODWORD(STACK[0x3C60]) ^ 0x5Bu) + 10734570)
                                          * (unint64_t)v19) >> 32) >> 1)
                         * v17;
  v35 = (LODWORD(STACK[0x3988]) + 111) ^ 0x1C;
  v36 = STACK[0x3C68];
  v37 = *(unsigned __int8 *)(v18
                           + 4647 * v35
                           + 4767822
                           - ((((4647 * v35 + 4767822) * (unint64_t)v19) >> 32) >> 1)
                           * v17);
  LODWORD(STACK[0x3990]) = 4647 * (LODWORD(STACK[0x3C68]) ^ 0x1C)
                         + 27589239
                         - ((((4647 * (LODWORD(STACK[0x3C68]) ^ 0x1Cu) + 27589239)
                                          * (unint64_t)v19) >> 32) >> 1)
                         * v17;
  v38 = *(unsigned __int8 *)(v18
                           + (v12 ^ 0xCB) * v15
                           + 27589239
                           - (((((v12 ^ 0xCBu) * v15 + 27589239) * (unint64_t)v19) >> 32) >> 1)
                           * v17) ^ v12 ^ (((v37 ^ 0xE3) >> 3) | (32 * (v37 ^ 0xFFFFFFE3)));
  LODWORD(STACK[0x3C60]) = v38;
  if ((v34 & 8) != 0)
    v39 = -8;
  else
    v39 = 8;
  LODWORD(STACK[0x3C58]) = 4647 * (v38 ^ 0x85)
                         + 21552786
                         - ((((4647 * (v38 ^ 0x85u) + 21552786) * (unint64_t)v19) >> 32) >> 1)
                         * v17;
  v40 = 4647 * ((v39 + (v34 ^ 0xA4)) ^ 0x17) + 21552786;
  LODWORD(STACK[0x3988]) = v40 - (((v40 * (unint64_t)v19) >> 32) >> 1) * v17;
  v41 = *(unsigned __int8 *)(v18 + v26) ^ LODWORD(STACK[0x3998]);
  v42 = 4647
      * (*(unsigned __int8 *)(v18
                            + (a8 ^ 0xDB) * v15
                            + 10734570
                            - (((((a8 ^ 0xDBu) * v15 + 10734570) * (unint64_t)v19) >> 32) >> 1)
                            * v17) ^ ((*(_BYTE *)(v18
                                                                 + 4647 * (LODWORD(STACK[0x39A8]) ^ 0x9A)
                                                                 + 25186740
                                                                 - ((((4647
                                                                                   * (LODWORD(STACK[0x39A8]) ^ 0x9Au)
                                                                                   + 25186740)
                                                                                  * (unint64_t)v19) >> 32) >> 1)
                                                                 * v17) ^ 0xC3)
                                                     + 85) ^ 0x1F)
      + 14331348;
  v43 = *(unsigned __int8 *)(v18 + v42 - (((v42 * (unint64_t)v19) >> 32) >> 1) * v17) + 117;
  v44 = 4647 * (((v43 ^ 0x12 ^ (v43 >> 2) & 0x12) + 26) ^ 0x5D) + 28816047;
  LODWORD(STACK[0x39A8]) = v44 - (((v44 * (unint64_t)v19) >> 32) >> 1) * v17;
  v45 = (LODWORD(STACK[0x39A0]) ^ v11 ^ *(_BYTE *)(v18
                                                                  + (v11 ^ 0x56) * v15
                                                                  + 27589239
                                                                  - (((((v11 ^ 0x56u) * v15 + 27589239)
                                                                                   * (unint64_t)v19) >> 32) >> 1)
                                                                  * v17)) ^ 0xF;
  LODWORD(STACK[0x39A0]) = 4647 * v45
                         + 28816047
                         - ((((4647 * v45 + 28816047) * (unint64_t)v19) >> 32) >> 1)
                         * v17;
  LODWORD(STACK[0x3B78]) ^= a5 ^ *(unsigned __int8 *)(v18 + v25);
  v46 = (LODWORD(STACK[0x3BF8]) + 111) ^ 0x1C;
  LOBYTE(v46) = *(_BYTE *)(v18
                         + 4647 * v46
                         + 4767822
                         - ((((4647 * v46 + 4767822) * (unint64_t)v19) >> 32) >> 1)
                         * v17) ^ 0xE3;
  LOBYTE(v46) = *(_BYTE *)(v18 + v27) ^ ((v46 >> 3) | (32 * v46)) ^ 0xDF;
  v47 = 4647 * (((v46 >> 1) | ((_BYTE)v46 << 7)) ^ 0x40) + 15539568;
  v48 = 97
      * (*(unsigned __int8 *)(v18 + v47 - (((v47 * (unint64_t)v19) >> 32) >> 1) * v17) ^ 0xFFFFFFA2);
  v49 = *(_BYTE *)(v18 + v31) ^ v29 ^ LODWORD(STACK[0x3BE0]);
  LODWORD(STACK[0x3998]) = v48 ^ *(unsigned __int8 *)(v18
                                                    + 4647 * (v48 ^ 0x5E)
                                                    + 21552786
                                                    - ((((4647 * (v48 ^ 0x5Eu) + 21552786)
                                                                     * (unint64_t)v19) >> 32) >> 1)
                                                    * v17);
  v50 = v49 ^ 0x6A ^ *(_BYTE *)(v18
                              + 4647 * (v49 ^ 0xEE)
                              + 21552786
                              - ((((4647 * (v49 ^ 0xEEu) + 21552786) * (unint64_t)v19) >> 32) >> 1)
                              * v17);
  v51 = 4647
      * (*(unsigned __int8 *)(v18 + v32) ^ 0xCB ^ ((*(_BYTE *)(v18
                                                                              + 4647 * (LODWORD(STACK[0x3BF0]) ^ 0x9A)
                                                                              + 25186740
                                                                              - ((((4647
                                                                                                * (LODWORD(STACK[0x3BF0]) ^ 0x9Au)
                                                                                                + 25186740)
                                                                                               * (unint64_t)v19) >> 32) >> 1)
                                                                              * v17) ^ 0xC3)
                                                                  + 85))
      + 25186740;
  LOBYTE(v51) = (*(_BYTE *)(v18 + v51 - (((v51 * (unint64_t)v19) >> 32) >> 1) * v17) ^ 0xC3) + 85;
  v52 = v33 ^ *(unsigned __int8 *)(v18
                                 + 4647 * (v33 ^ 0x91)
                                 + 27589239
                                 - ((((4647 * (v33 ^ 0x91u) + 27589239)
                                                  * (unint64_t)v19) >> 32) >> 1)
                                 * v17) ^ LODWORD(STACK[0x3C08]);
  v53 = *(_BYTE *)(v18 + LODWORD(STACK[0x3970]));
  v54 = 4647
      * (*(_BYTE *)(v18
                  + 4647 * (v51 ^ 0x19)
                  + 21552786
                  - ((((4647 * (v51 ^ 0x19u) + 21552786) * (unint64_t)v19) >> 32) >> 1)
                  * v17) ^ v51 ^ 0xB3)
      + 14331348;
  v55 = (LODWORD(STACK[0x3C00]) + 111) ^ 0x36;
  LOBYTE(v55) = *(_BYTE *)(v18
                         + 4647 * v55
                         + 17937420
                         - ((((4647 * v55 + 17937420) * (unint64_t)v19) >> 32) >> 1)
                         * v17) ^ 0xE;
  v56 = *(unsigned __int8 *)(v18 + v54 - (((v54 * (unint64_t)v19) >> 32) >> 1) * v17) + 117;
  v57 = 4647
      * (*(_BYTE *)(v18
                  + 4647 * ((((v55 >> 3) | (32 * v55)) ^ v53) ^ 0xF4)
                  + 21552786
                  - ((((4647
                                    * ((((v55 >> 3) | (32 * v55)) ^ v53) ^ 0xF4u)
                                    + 21552786)
                                   * (unint64_t)v19) >> 32) >> 1)
                  * v17) ^ (((v55 >> 3) | (32 * v55)) ^ v53) ^ 0x8B)
      + 14331348;
  v58 = *(unsigned __int8 *)(v18 + v57 - (((v57 * (unint64_t)v19) >> 32) >> 1) * v17) + 117;
  v59 = *(unsigned __int8 *)(v18 + LODWORD(STACK[0x3978])) ^ LODWORD(STACK[0x3C40]);
  v60 = v36 ^ *(_BYTE *)(v18 + LODWORD(STACK[0x3990])) ^ 0xA8;
  v61 = *(unsigned __int8 *)(v18
                           + 4647 * (v59 ^ 0x84)
                           + 21552786
                           - ((((4647 * (v59 ^ 0x84u) + 21552786) * (unint64_t)v19) >> 32) >> 1)
                           * v17) ^ v59;
  v62 = v41 ^ 0xFFFFFFED ^ *(unsigned __int8 *)(v18
                                              + 4647 * (v41 ^ 0x6A)
                                              + 21552786
                                              - ((((4647 * (v41 ^ 0x6Au) + 21552786)
                                                               * (unint64_t)v19) >> 32) >> 1)
                                              * v17);
  v63 = 4647 * v50
      + 25186740
      - ((((4647 * v50 + 25186740) * (unint64_t)v19) >> 32) >> 1) * v17;
  v64 = *(unsigned __int8 *)(v18 + LODWORD(STACK[0x3C58]));
  v65 = (v56 ^ 0x12 ^ (v56 >> 2) & 0x12) + 26;
  v66 = (v58 ^ 0x12 ^ (v58 >> 2) & 0x12) + 26;
  v67 = (*(unsigned __int8 *)(v18
                            + 4647 * (LODWORD(STACK[0x3C48]) ^ v60)
                            + 28816047
                            - ((((4647 * (LODWORD(STACK[0x3C48]) ^ v60)
                                              + 28816047)
                                             * (unint64_t)v19) >> 32) >> 1)
                            * v17)
       - 61) ^ 0xFFFFFFE7;
  v68 = ((*(unsigned __int8 *)(v18 + v63) ^ 0xFFFFFFC3) + 85) ^ 0xFFFFFFEC;
  v69 = v52 ^ 0xFFFFFFE5 ^ *(unsigned __int8 *)(v18
                                              + 4647 * (v52 ^ 0x2C)
                                              + 21552786
                                              - ((((4647 * (v52 ^ 0x2Cu) + 21552786)
                                                               * (unint64_t)v19) >> 32) >> 1)
                                              * v17);
  LODWORD(STACK[0x39A8]) = v61;
  v70 = v64 ^ LODWORD(STACK[0x3C60]) ^ 0x72u;
  v71 = LODWORD(STACK[0x3998]) ^ 0xFFFFFFCA;
  v72 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8
                                                      * (LODWORD(STACK[0x3980]) | (8 * ((STACK[0x3B68] & 1) == 0))))
                          - 8);
  STACK[0x3C78] = v67;
  LODWORD(STACK[0x3C40]) = v65;
  STACK[0x3BE0] = v61 ^ 0xFFFFFF90;
  LODWORD(STACK[0x3BE8]) = v69;
  STACK[0x3C48] = v68;
  STACK[0x3B78] = v71;
  LODWORD(STACK[0x3C50]) = v66;
  STACK[0x3C28] = v70;
  STACK[0x3C20] = v62;
  return v72();
}

uint64_t sub_10068FC0C@<X0>(unint64_t a1@<X1>, unsigned __int8 a2@<W2>, unint64_t a3@<X3>, unsigned __int8 a4@<W5>, unint64_t a5@<X7>, unsigned __int8 a6@<W8>)
{
  unsigned __int8 v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned __int8 v23;
  int v24;
  unint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned __int8 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t (*v68)(void);

  v22 = v11;
  LODWORD(STACK[0x3B70]) = 0;
  STACK[0x3C60] = (v8 << 56) | ((unint64_t)v14 << 48) | ((unint64_t)v13 << 24) | ((unint64_t)a2 << 8) | ((unint64_t)v17 << 32) | ((unint64_t)v6 << 40) | a4 | ((unint64_t)a3 << 16);
  v23 = ((*(_BYTE *)(v20 + STACK[0x3730]) ^ 0xE3) >> 3) | (32 * (*(_BYTE *)(v20 + STACK[0x3730]) ^ 0xE3));
  STACK[0x3C58] = a1;
  v24 = v15;
  v25 = ((unint64_t)v15 << 48) | ((unint64_t)v7 << 40) | ((unint64_t)v16 << 24) | ((unint64_t)v9 << 32);
  v26 = ((*(_BYTE *)(v20 + STACK[0x3728]) ^ 0xE3) >> 3) | (32 * (*(_BYTE *)(v20 + STACK[0x3728]) ^ 0xE3));
  STACK[0x3BF0] = a3;
  LODWORD(STACK[0x3C30]) = v10;
  STACK[0x3BF8] = a5;
  LODWORD(STACK[0x3C08]) = v9;
  v27 = v6;
  LODWORD(STACK[0x3C00]) = v7;
  v28 = STACK[0x3C10];
  v29 = *(_QWORD *)(STACK[0x3C10]
                  + 8
                  * (1291 * (v23 ^ 0xD6)
                                 + 330496
                                 - 3108 * ((1381908 * (unint64_t)(1291 * (v23 ^ 0xD6u) + 330496)) >> 32)));
  v30 = 2 * v29 + 0xEB71AE962ALL;
  v31 = ((*(_BYTE *)(v20 + STACK[0x3720]) ^ 0xE3) >> 3) | (32 * (*(_BYTE *)(v20 + STACK[0x3720]) ^ 0xE3));
  v32 = ((*(_BYTE *)(v20 + STACK[0x3718]) ^ 0xE3) >> 3) | (32 * (*(_BYTE *)(v20 + STACK[0x3718]) ^ 0xE3));
  v33 = 1291
      * ((((*(_BYTE *)(v20 + STACK[0x3708]) ^ 0xE) >> 3) | (32
                                                                                            * (*(_BYTE *)(v20 + STACK[0x3708]) ^ 0xE))) ^ 0xD6)
      + 330496;
  v34 = *(_QWORD *)(STACK[0x3C10] + 8 * (v33 - 3108 * ((1381908 * (unint64_t)v33) >> 32)));
  HIDWORD(v35) = v22;
  LODWORD(v35) = v12 << 24;
  v36 = v12;
  v37 = *(unsigned __int8 *)(v20 + STACK[0x36F8]) + 117;
  v38 = STACK[0x3B60];
  STACK[0x3C38] = (LODWORD(STACK[0x3B60]) - 11436);
  LODWORD(STACK[0x3C68]) = v24;
  STACK[0x37D8] = STACK[0x3C60] ^ 0x65824E35D596C258;
  STACK[0x37D0] = (v25 & 0xFFFFFFFFFF000000 | ((unint64_t)STACK[0x3C58] << 16) | ((unint64_t)v36 << 8) | a5 | ((unint64_t)a6 << ((v38 + 84) ^ 0x51u))) ^ 0xD17706638CA73F56;
  v39 = *(_QWORD *)(v28
                  + 8
                  * (1291 * (v26 ^ 5)
                   + 3647075
                   - 3108 * (((5527629 * (unint64_t)(1291 * (v26 ^ 5u) + 3647075)) >> 32) >> 2))) ^ 0xFF3D18D43634272ELL;
  v40 = v29 + 0xF977E7DF92;
  STACK[0x3C60] = v13;
  v41 = *(_QWORD *)(v28
                  + 8
                  * (1291 * (v31 ^ 0xA1)
                   + 3647075
                   - 3108 * (((5527629 * (unint64_t)(1291 * (v31 ^ 0xA1u) + 3647075)) >> 32) >> 2))) ^ 0xFF3D18D43634272ELL;
  LODWORD(v39) = (v39 >> 17) ^ (v39 >> 21) ^ (v39 >> 16) ^ ((v30 ^ v40) >> 8);
  v42 = *(_QWORD *)(v28
                  + 8
                  * (1291 * (v32 ^ 0xA1)
                   + 3647075
                   - 3108 * (((5527629 * (unint64_t)(1291 * (v32 ^ 0xA1u) + 3647075)) >> 32) >> 2))) ^ 0xFF3D18D43634272ELL;
  v43 = 1291 * ((97 * (*(_BYTE *)(v20 + STACK[0x3700]) ^ 0x27)) ^ 0xA1) + 3647075;
  v44 = *(_QWORD *)(v28 + 8 * (v43 - 3108 * (((5527629 * (unint64_t)v43) >> 32) >> 2))) ^ 0xFF3D18D43634272ELL;
  LODWORD(STACK[0x3B30]) = v39 ^ (v41 >> 25) ^ (v41 >> 29) ^ (v41 >> 24) ^ (v42 >> 33) ^ (v42 >> 37) ^ HIDWORD(v42) ^ 0x9A4C0498;
  v45 = ((v35 >> 25) ^ 0x40) * v18 + 15539568;
  LODWORD(v39) = (v44 >> 25) ^ (v44 >> 29) ^ (v44 >> 24) ^ (((2 * v34 + 0xDAEB71AE962ALL) ^ (unint64_t)(v34 + 0xCFF977E7DF92)) >> 16);
  LODWORD(v42) = 1291 * (((v37 ^ 0x12 ^ (v37 >> 2) & 0x12) + 26) ^ 0xFA) + 330496;
  v46 = *(_QWORD *)(v28 + 8 * (v42 - 3108 * ((1381908 * (unint64_t)v42) >> 32)));
  LODWORD(v41) = 1291 * ((97 * (*(_BYTE *)(v20 + STACK[0x36F0]) ^ 0x27)) ^ 0x85) + 330496;
  v47 = LODWORD(STACK[0x3C30]) ^ 0x54;
  LODWORD(STACK[0x3B18]) = 97
                         * (*(unsigned __int8 *)(v20
                                               + v45
                                               - (((v45 * (unint64_t)v21) >> 32) >> 1) * v19) ^ 0xFFFFFFA2);
  v48 = v47 * v18 + 9544938;
  v49 = (2 * v46 - 0xFE925148E5169D6) ^ (v46 + 0x4577CFF977E7DF92);
  v50 = *(_QWORD *)(v28 + 8 * (v41 - 3108 * ((1381908 * (unint64_t)v41) >> 32)));
  v51 = *(_QWORD *)(v28 + 8 * STACK[0x36E8]) ^ 0xFF3D18D43634272ELL;
  v52 = *(unsigned __int8 *)(v20 + v48 - (((v48 * (unint64_t)v21) >> 32) >> 1) * v19) - 87;
  LODWORD(v44) = (((v27 >> 1) | (v27 << 7)) ^ 0x40) * v18 + 15539568;
  LODWORD(STACK[0x3B28]) = v39 ^ HIDWORD(v49) ^ (((2 * v50 + 0xEB71AE962ALL) ^ (unint64_t)(v50 + 0xF977E7DF92)) >> 8) ^ 0xB84AC7E1;
  v53 = *(_QWORD *)(v28 + 8 * STACK[0x36E0]);
  LODWORD(v50) = v44 - (((v44 * (unint64_t)v21) >> 32) >> 1) * v19;
  v54 = *(_QWORD *)(v28 + 8 * STACK[0x36D8]);
  LODWORD(v39) = *(unsigned __int8 *)(v20 + v50);
  LODWORD(STACK[0x3AE8]) = (v52 ^ 0xFFFFFFFB) + 85;
  v55 = (((2 * v53 + 0x16DAEB71AE962ALL) ^ (unint64_t)(v53 + 0x77CFF977E7DF92)) >> 24) ^ (v51 >> 17) ^ (v51 >> 21) ^ (v51 >> 16);
  v56 = *(_QWORD *)(v28 + 8 * STACK[0x36D0]);
  LODWORD(STACK[0x3B08]) = 97 * (v39 ^ 0xFFFFFFA2);
  LODWORD(v51) = 1291 * ((((*(_BYTE *)(v20 + STACK[0x36C0]) - 87) ^ 0xFB) + 85) ^ 0xD6) + 330496;
  v57 = LODWORD(STACK[0x39A8]) ^ 0x28;
  LODWORD(STACK[0x3B20]) = v55 ^ (((2 * v54 - 0xFE925148E5169D6) ^ (unint64_t)(v54 + 0x4577CFF977E7DF92)) >> 32) ^ ((*(_QWORD *)(v28 + 8 * STACK[0x36C8]) ^ 0xFF3D18D43634272ELL) >> 9) ^ ((*(_QWORD *)(v28 + 8 * STACK[0x36C8]) ^ 0xFF3D18D43634272ELL) >> 13) ^ (*(_QWORD *)(v28 + 8 * STACK[0x36C8]) >> 8) ^ 0xEACBE54F;
  v58 = v57;
  v59 = *(_QWORD *)(v28 + 8 * (v51 - 3108 * ((1381908 * (unint64_t)v51) >> 32)));
  LOBYTE(v39) = LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x39E8]);
  v60 = *(_QWORD *)(v28 + 8 * STACK[0x36B8]);
  LODWORD(v51) = *(unsigned __int8 *)(v20
                                    + v58 * v18
                                    + 9544938
                                    - ((((v58 * v18 + 9544938) * (unint64_t)v21) >> 32) >> 1)
                                    * v19)
               - 87;
  LODWORD(STACK[0x3BB8]) ^= LODWORD(STACK[0x3A20]);
  LOBYTE(v58) = v39 + 111;
  v61 = STACK[0x3C60];
  LODWORD(v30) = (LODWORD(STACK[0x39F0]) ^ LODWORD(STACK[0x3B98])) ^ 0xFE;
  LODWORD(v39) = 1291 * ((97 * (*(_BYTE *)(v20 + STACK[0x36B0]) ^ 0x27)) ^ 0xD6) + 330496;
  v62 = STACK[0x3C08];
  v63 = *(_QWORD *)(v28 + 8 * (v39 - 3108 * ((1381908 * (unint64_t)v39) >> 32)));
  v64 = STACK[0x3C68];
  LODWORD(STACK[0x3AE0]) = (v51 ^ 0xFFFFFFFB) + 85;
  LODWORD(STACK[0x3BC8]) ^= LODWORD(STACK[0x39F8]);
  LODWORD(v51) = *(unsigned __int8 *)(v20
                                    + (_DWORD)v30 * v18
                                    + 13123128
                                    - ((((v30 * v18 + 13123128) * (unint64_t)v21) >> 32) >> 1)
                                    * v19)
               - 71;
  LODWORD(v54) = LODWORD(STACK[0x3B58]) ^ STACK[0x3A08];
  LODWORD(STACK[0x3B48]) ^= STACK[0x3A18];
  LODWORD(v30) = LODWORD(STACK[0x3BD8]) ^ STACK[0x39D0];
  LODWORD(v59) = (((2 * v59 - 0xFE925148E5169D6) ^ (unint64_t)(v59 + 0x4577CFF977E7DF92)) >> 32) ^ ((v56 ^ 0xFF3D18D43634272ELL) >> 25) ^ ((v56 ^ 0xFF3D18D43634272ELL) >> 29) ^ ((v56 ^ 0xFF3D18D43634272ELL) >> 24) ^ (((2 * v60 + 0xEB71AE962ALL) ^ (unint64_t)(v60 + 0xF977E7DF92)) >> 8);
  LODWORD(STACK[0x3BA8]) ^= STACK[0x3A40];
  LODWORD(STACK[0x3B50]) ^= STACK[0x3B38];
  LODWORD(STACK[0x3BD0]) ^= STACK[0x3A10];
  LODWORD(STACK[0x3B88]) ^= STACK[0x3A00];
  LODWORD(v60) = ((v54 + 111) ^ 0x36) * v18 + 17937420;
  LODWORD(STACK[0x3BB0]) ^= LODWORD(STACK[0x3A30]);
  LODWORD(v60) = *(unsigned __int8 *)(v20
                                    + v60
                                    - (((v60 * (unint64_t)v21) >> 32) >> 1) * v19);
  LODWORD(STACK[0x3B98]) = (v51 ^ ((_DWORD)v51 << 6) ^ (4 * v51) ^ 0xFFFFFFFE) + 26;
  LODWORD(STACK[0x3BC0]) ^= STACK[0x3A28];
  LODWORD(STACK[0x3B90]) ^= STACK[0x39B8];
  LODWORD(STACK[0x3B10]) = v59 ^ 0xAB6CB3A9 ^ (((2 * v63 + 0xDAEB71AE962ALL) ^ (unint64_t)(v63 + 0xCFF977E7DF92)) >> 16);
  v65 = *(unsigned __int8 *)(v20
                           + (v58 ^ 0x1C) * v18
                           + 4767822
                           - (((((v58 ^ 0x1Cu) * v18 + 4767822) * (unint64_t)v21) >> 32) >> 1)
                           * v19) ^ 0xFFFFFFE3;
  LODWORD(STACK[0x3B58]) = ((v60 ^ 0xE) >> 3) | (32 * (v60 ^ 0xE));
  LODWORD(STACK[0x3B80]) = (v65 >> 3) | (32 * v65);
  v66 = (((v30 >> 1) | ((_BYTE)v30 << 7)) ^ 0x40) * v18 + 15539568;
  LODWORD(STACK[0x3B40]) ^= STACK[0x39B0];
  v67 = *(unsigned __int8 *)(v20 + v66 - (((v66 * (unint64_t)v21) >> 32) >> 1) * v19) ^ 0xFFFFFFA2;
  LODWORD(STACK[0x3BA0]) ^= STACK[0x3A38];
  LODWORD(STACK[0x3BD8]) = 97 * v67;
  v68 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * LODWORD(STACK[0x3B60]));
  LODWORD(STACK[0x3AD8]) = v62;
  LODWORD(STACK[0x3B00]) = STACK[0x3C50];
  LODWORD(STACK[0x3AD0]) = STACK[0x3C78];
  LODWORD(STACK[0x3AC8]) = STACK[0x3BF0];
  LODWORD(STACK[0x3AC0]) = STACK[0x3C28];
  LODWORD(STACK[0x3AB8]) = v64;
  LODWORD(STACK[0x3AF8]) = STACK[0x3C58];
  LODWORD(STACK[0x3AB0]) = STACK[0x3C20];
  LODWORD(STACK[0x3AA8]) = v61;
  LODWORD(STACK[0x3AF0]) = STACK[0x3C40];
  LODWORD(STACK[0x3AA0]) = STACK[0x3C00];
  LODWORD(STACK[0x3A98]) = STACK[0x3BF8];
  return v68();
}

uint64_t sub_100690554(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  _BOOL4 v8;

  v8 = LODWORD(STACK[0x3660]) != 0;
  LODWORD(STACK[0x3C78]) = a4 ^ 0xFFFFFFF7;
  LODWORD(STACK[0x3C68]) = a4 ^ 0x1A;
  LODWORD(STACK[0x3C58]) = a4 ^ 0xFFFFFF95;
  LODWORD(STACK[0x3C50]) = a4 ^ 0x30;
  LODWORD(STACK[0x3C60]) = a4 ^ 0x5D;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a7
                                                                                               + 8
                                                                                               * (v7 ^ (13533 * v8)))
                                                                                   - 12))(a1, a4 ^ 0x25u, a3, ~a4, a4 ^ 0x74u, a4 ^ 0x3Du);
}

uint64_t sub_100690660(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = a4 ^ LODWORD(STACK[0x3B88]);
  LODWORD(STACK[0x3C50]) ^= LODWORD(STACK[0x3BD0]);
  LODWORD(STACK[0x3C58]) ^= LODWORD(STACK[0x3B40]);
  v9 = a5 ^ LODWORD(STACK[0x3BC0]);
  LODWORD(STACK[0x3C78]) ^= LODWORD(STACK[0x3BB8]);
  v10 = a6 ^ LODWORD(STACK[0x3BA8]);
  LODWORD(STACK[0x3C68]) ^= LODWORD(STACK[0x3BA0]);
  v11 = a2 ^ LODWORD(STACK[0x3B58]);
  LODWORD(STACK[0x3C60]) ^= LODWORD(STACK[0x3BD8]);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 + 8 * v7)
                                                                                       - 12))(a1, v11, a3, v8, v9, v10);
}

uint64_t sub_100690750()
{
  return (*(uint64_t (**)(void))(STACK[0x3C70]
                              + 8
                              * (((((LODWORD(STACK[0x3960]) + 4148) | 0x1F4) - 13240) * ((STACK[0x3B70] & 1) == 0)) ^ LODWORD(STACK[0x3960]))))();
}

uint64_t sub_10069079C@<X0>(int a1@<W1>, int a2@<W7>, int a3@<W8>)
{
  int v3;
  char v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(uint64_t, unint64_t, unint64_t);

  v9 = v3;
  v10 = (unsigned __int8 *)STACK[0x3C80];
  v11 = *(unsigned __int8 *)(STACK[0x3C80] + 9);
  v12 = (unint64_t)*(unsigned __int8 *)(STACK[0x3C80] + 10) << ((13 * (a3 ^ 0xA0)) ^ 0x79u);
  v13 = *(unsigned __int8 *)(STACK[0x3C80] + 12);
  v15 = *(unsigned __int8 *)(STACK[0x3C80] + 15);
  v16 = *(unsigned __int8 *)(STACK[0x3C80] + 11);
  v17 = ((v4 + 111) ^ 0x1C) * v6 + 4767822;
  v18 = *(unsigned __int8 *)(STACK[0x3C80] + 1);
  v19 = *(unsigned __int8 *)(STACK[0x3C80] + 13);
  v20 = *(unsigned __int8 *)(v7 + v17 - 6784 * (((1266205 * (unint64_t)v17) >> 32) >> 1)) ^ 0xFFFFFFE3;
  v21 = *(unsigned __int8 *)(STACK[0x3C80] + 14);
  v22 = ((unint64_t)v10[5] << 16) | ((unint64_t)v10[3] << 32) | ((unint64_t)v10[2] << 40);
  LODWORD(STACK[0x3640]) = (v20 >> 3) | (32 * v20);
  v23 = v12 | (v11 << 48) | v15 | (v13 << 24) | (v16 << 32) | (v19 << 16) | (v21 << 8) | ((unint64_t)v10[8] << 56);
  v24 = (v22 | ((unint64_t)*v10 << 56) | v10[7] | (v18 << 48) | ((unint64_t)v10[4] << 24)) ^ ((unint64_t)v10[6] << 8);
  v25 = (uint64_t (*)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)(STACK[0x3C70] + 8 * a3) - 8);
  STACK[0x39B8] = LODWORD(STACK[0x3610]);
  LODWORD(STACK[0x3760]) = STACK[0x35A8];
  LODWORD(STACK[0x3530]) = a1;
  STACK[0x37E8] = LODWORD(STACK[0x35A0]);
  STACK[0x3A40] = LODWORD(STACK[0x35D0]);
  STACK[0x3798] = LODWORD(STACK[0x3590]);
  STACK[0x3790] = LODWORD(STACK[0x3570]);
  STACK[0x39D0] = LODWORD(STACK[0x3620]);
  LODWORD(STACK[0x3638]) = v8;
  LODWORD(STACK[0x3528]) = v5;
  LODWORD(STACK[0x3630]) = STACK[0x3C50];
  LODWORD(STACK[0x3520]) = STACK[0x3B78];
  LODWORD(STACK[0x3518]) = STACK[0x3C78];
  LODWORD(STACK[0x3508]) = v9;
  LODWORD(STACK[0x34E8]) = STACK[0x3C48];
  LODWORD(STACK[0x3510]) = STACK[0x3BE8];
  LODWORD(STACK[0x34F8]) = STACK[0x3BE0];
  LODWORD(STACK[0x3648]) = STACK[0x3C40];
  LODWORD(STACK[0x34F0]) = a2;
  STACK[0x39D8] = LODWORD(STACK[0x3568]);
  STACK[0x3A28] = LODWORD(STACK[0x3678]);
  LODWORD(STACK[0x3A20]) = STACK[0x35D8];
  STACK[0x3780] = LODWORD(STACK[0x35C8]);
  LODWORD(STACK[0x3768]) = STACK[0x35B8];
  LODWORD(STACK[0x39F8]) = STACK[0x36A8];
  STACK[0x3B38] = LODWORD(STACK[0x3600]);
  LODWORD(STACK[0x3A30]) = STACK[0x3618];
  STACK[0x3788] = LODWORD(STACK[0x3578]);
  LODWORD(STACK[0x3758]) = STACK[0x35B0];
  LODWORD(STACK[0x3660]) = 1;
  STACK[0x3658] = LODWORD(STACK[0x3550]);
  STACK[0x3A38] = LODWORD(STACK[0x35E0]);
  STACK[0x3C08] = v23;
  STACK[0x3748] = LODWORD(STACK[0x3560]);
  STACK[0x3A00] = LODWORD(STACK[0x35F0]);
  LODWORD(STACK[0x39E8]) = STACK[0x3608];
  STACK[0x37C8] = LODWORD(STACK[0x3580]);
  LODWORD(STACK[0x39F0]) = STACK[0x35E8];
  STACK[0x37E0] = LODWORD(STACK[0x35C0]);
  STACK[0x3A08] = LODWORD(STACK[0x3628]);
  STACK[0x3C20] = v24;
  LODWORD(STACK[0x3770]) = STACK[0x3558];
  STACK[0x3A18] = LODWORD(STACK[0x3670]);
  LODWORD(STACK[0x3750]) = STACK[0x3588];
  STACK[0x3A10] = LODWORD(STACK[0x3668]);
  STACK[0x39B0] = LODWORD(STACK[0x35F8]);
  return v25(1, STACK[0x37D8], STACK[0x37D0]);
}

uint64_t sub_100690AA0@<X0>(char a1@<W1>, char a2@<W2>, int a3@<W5>, char a4@<W7>, int a5@<W8>)
{
  char v5;
  char v6;
  char v7;
  char v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  int v21;
  char v22;
  char v23;
  unsigned int v24;
  char v25;
  int v26;
  char v27;
  char v28;
  int v29;
  char v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t (*v49)(_QWORD, unint64_t, unint64_t);

  LODWORD(STACK[0x3660]) = 0;
  v17 = v13 ^ LODWORD(STACK[0x3540]);
  v18 = v7 ^ LODWORD(STACK[0x3508]);
  v19 = v12 ^ LODWORD(STACK[0x3528]);
  v20 = v6 ^ LODWORD(STACK[0x34E8]);
  v21 = 703 * (a5 ^ 0x33E4);
  v22 = v5 ^ LODWORD(STACK[0x3548]);
  v23 = a1 ^ LODWORD(STACK[0x3530]);
  LODWORD(STACK[0x3C60]) = v21;
  v24 = ((v20 + 85 * (a5 ^ 0xF8) + 30) ^ 0x36) * (v21 ^ 0x3C88) + 17937420;
  v25 = a4 ^ LODWORD(STACK[0x34F0]);
  v26 = v11 ^ LODWORD(STACK[0x3648]);
  v27 = STACK[0x3C28] ^ LODWORD(STACK[0x3538]);
  v28 = v8 ^ LODWORD(STACK[0x3520]);
  LOBYTE(v24) = *(_BYTE *)(v15 + (v24 - 6784 * ((81037119 * (unint64_t)(v24 >> 7)) >> 32))) ^ 0xE;
  v29 = a3 ^ LODWORD(STACK[0x3518]);
  v30 = (v24 >> 3) | (32 * v24);
  v31 = v16 ^ LODWORD(STACK[0x3638]);
  v32 = (LODWORD(STACK[0x3630]) ^ LODWORD(STACK[0x3C50])) ^ 0x9A;
  v33 = *(unsigned __int8 *)(v15
                           + v9
                           + (LODWORD(STACK[0x35D0]) ^ 0xB8) * v14
                           - 6784
                           * (((1266205
                                            * (unint64_t)(v9
                                                               + (LODWORD(STACK[0x35D0]) ^ 0xB8u) * v14)) >> 32) >> 1));
  v34 = *(unsigned __int8 *)(v15
                           + (LODWORD(STACK[0x3A70]) ^ 0x9A) * v14
                           + 25186740
                           - 6784
                           * (((1266205
                                            * (unint64_t)((LODWORD(STACK[0x3A70]) ^ 0x9Au) * v14
                                                               + 25186740)) >> 32) >> 1));
  v35 = v10 ^ LODWORD(STACK[0x3640]);
  v36 = (*(_BYTE *)(v15
                  + v32 * v14
                  + 25186740
                  - 6784
                  * (((1266205 * (unint64_t)(v32 * v14 + 25186740)) >> 32) >> 1)) ^ 0xC3)
      + 85;
  v37 = (_BYTE *)STACK[0x3C80];
  v37[14] = a2 ^ LOBYTE(STACK[0x34F8]);
  v37[5] = v23;
  v38 = LODWORD(STACK[0x3BE8]) ^ LODWORD(STACK[0x3510]);
  v37[6] = v28;
  LODWORD(STACK[0x3B58]) = (v34 ^ 0xFFFFFFC3) + 85;
  v37[2] = v22;
  v37[11] = v36;
  v37[12] = v35;
  v39 = STACK[0x39C0] + 16;
  v37[1] = v19;
  v37[15] = v29;
  v37[4] = v17;
  v37[7] = v25;
  v37[9] = v26;
  v37[10] = v38;
  *v37 = v27;
  v37[3] = v18;
  LODWORD(STACK[0x3648]) = ((v33 - 87) ^ 0xFFFFFFFB) + 85;
  v37[8] = v30;
  v37[13] = v31;
  v40 = v37[16];
  STACK[0x3C80] = (unint64_t)(v37 + 16);
  v41 = v37[20];
  v42 = v37[22];
  v43 = (unint64_t)v37[26] << 40;
  v44 = v37[21];
  v45 = v37[30];
  v46 = STACK[0x36A0];
  STACK[0x39C0] = v39;
  v47 = (v43 | ((unint64_t)v37[24] << 56) | v37[31] | ((unint64_t)v37[28] << 24) | ((unint64_t)v37[25] << 48) | ((unint64_t)v37[27] << 32) | (v45 << 8))
      + ((unint64_t)v37[29] << 16);
  v48 = (((v40 << 56) | (v41 << 24) | (v42 << 8) | (v44 << 16) | ((unint64_t)v37[19] << 32) | v37[23])
       + ((unint64_t)v37[18] << 40)) ^ ((unint64_t)v37[17] << 48);
  STACK[0x39C8] += 16;
  v49 = (uint64_t (*)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)(STACK[0x3C70]
                                                                                       + 8
                                                                                       * (a5 ^ (31538
                                                                                              * (v39 >= v46))))
                                                                           - 8);
  LODWORD(STACK[0x3BD0]) = STACK[0x3A48];
  LODWORD(STACK[0x3B90]) = STACK[0x37F0];
  LODWORD(STACK[0x3530]) = STACK[0x3678];
  LODWORD(STACK[0x3BA8]) = STACK[0x37F8];
  LODWORD(STACK[0x3BB0]) = STACK[0x3820];
  LODWORD(STACK[0x3B50]) = STACK[0x3A78];
  LODWORD(STACK[0x3B98]) = STACK[0x3808];
  LODWORD(STACK[0x3BA0]) = STACK[0x3818];
  LODWORD(STACK[0x3638]) = STACK[0x35F0];
  LODWORD(STACK[0x3BC0]) = STACK[0x3A68];
  LODWORD(STACK[0x3B80]) = STACK[0x3810];
  LODWORD(STACK[0x3528]) = STACK[0x35E8];
  LODWORD(STACK[0x3630]) = STACK[0x3608];
  LODWORD(STACK[0x3520]) = STACK[0x3600];
  LODWORD(STACK[0x3518]) = STACK[0x35E0];
  LODWORD(STACK[0x3B88]) = STACK[0x3800];
  STACK[0x3C08] = v47;
  LODWORD(STACK[0x3508]) = STACK[0x3618];
  LODWORD(STACK[0x34E8]) = STACK[0x3628];
  LODWORD(STACK[0x3BC8]) = STACK[0x3A58];
  LODWORD(STACK[0x3510]) = STACK[0x35D8];
  LODWORD(STACK[0x34F8]) = STACK[0x3620];
  LODWORD(STACK[0x3B48]) = STACK[0x3A88];
  LODWORD(STACK[0x34F0]) = STACK[0x3610];
  LODWORD(STACK[0x3BB8]) = STACK[0x3A50];
  STACK[0x3C20] = v48;
  LODWORD(STACK[0x3BD8]) = STACK[0x3A60];
  LODWORD(STACK[0x3640]) = STACK[0x35F8];
  LODWORD(STACK[0x3B40]) = STACK[0x3A80];
  return v49(LODWORD(STACK[0x39E0]), STACK[0x37D8], STACK[0x37D0]);
}

uint64_t sub_100690E7C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  STACK[0x37D0] = a3;
  STACK[0x3C00] = a3 ^ ((a5 + 1650) - 0x2E88F99C7358FF6DLL);
  STACK[0x37D8] = a2;
  STACK[0x3BF8] = a2 ^ 0x65824E35D596C258;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * a5) - 8))();
}

uint64_t sub_100690ED8@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t (*v10)(void);

  STACK[0x3BF0] = v6;
  LODWORD(STACK[0x3778]) = v5;
  LODWORD(STACK[0x36A8]) = v4;
  LODWORD(STACK[0x37A0]) = v8;
  LODWORD(STACK[0x3548]) = v7;
  LODWORD(STACK[0x3538]) = v1;
  LODWORD(STACK[0x3540]) = v2;
  v9 = (a1 + 207568502) & 0xF3A0DFFF;
  v10 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * a1) - (v9 ^ 0x5D31));
  STACK[0x3C68] = v9;
  STACK[0x3C48] = v3;
  return v10();
}

uint64_t sub_100690F2C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t (*v7)(void);

  LODWORD(STACK[0x39E0]) = a1;
  STACK[0x37B8] = a5;
  STACK[0x37C0] = a7;
  v7 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (int)STACK[0x3C68]) - 12);
  STACK[0x3C40] = a6;
  return v7();
}

uint64_t sub_100690F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unsigned int v7;
  int v8;
  unint64_t v9;
  int v10;

  STACK[0x3C78] = a5;
  STACK[0x3C60] = a7;
  STACK[0x3C58] = v9;
  STACK[0x3C28] = (STACK[0x3C68] + v10) | 0x815;
  STACK[0x3C50] = v7 * (unint64_t)(v8 & 0x80000000);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70]
                                        + 8
                                        * (int)((15649 * (*(_BYTE *)(STACK[0x3C18] + STACK[0x3C58]) == 14)) ^ STACK[0x3C68]))
                            - 12))();
}

uint64_t sub_100691E90()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70]
                                        + 8
                                        * (int)((67
                                               * (LODWORD(STACK[0x39E0]) == ((STACK[0x3C28] - 96) ^ 0xB7))) ^ STACK[0x3C28]))
                            - 4))();
}

uint64_t sub_100691ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = v5 + 386;
  v7 = *(_QWORD *)(STACK[0x3C70]
                 + 8 * ((116 * (((LODWORD(STACK[0x3A90]) == 0) ^ (v5 - 52)) & 1)) ^ v5));
  v8 = v6 | 0x1D00u;
  STACK[0x3C68] = v8;
  STACK[0x3C48] = STACK[0x3C08];
  v9 = STACK[0x3C20];
  LODWORD(STACK[0x3A90]) = 0;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(v7 - (v8 ^ 0x5D31)))(0, a2, a3, a4, a5, v9);
}

uint64_t sub_100691F38()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (v0 ^ (41 * (LODWORD(STACK[0x3650]) == 0))))
                            - (v0 + 6129)
                            - ((v0 + 2560) ^ 0xFFFFFFFFFFFFE113)))();
}

uint64_t sub_100691F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  _BOOL4 v12;
  uint64_t (*v13)(void);

  v10 = (_BYTE *)STACK[0x3BF0];
  *v10 = HIBYTE(a7);
  v10[1] = BYTE6(v7);
  v10[3] = BYTE4(v7);
  v10[7] = v7;
  v11 = STACK[0x39C0] + 16;
  v10[6] = BYTE1(v7);
  v10[2] = BYTE5(v7);
  v10[12] = BYTE3(a5);
  v10[11] = BYTE4(a5);
  v12 = v11 >= STACK[0x36A0];
  v10[14] = a5 >> (((v8 ^ 0xCA) + 8) ^ 0x59u);
  v10[9] = BYTE6(v9);
  v10[13] = BYTE2(a5);
  v10[10] = BYTE5(v9);
  v10[15] = a5;
  v10[8] = HIBYTE(v9);
  v10[5] = BYTE2(v7);
  v10[4] = BYTE3(v7);
  STACK[0x39C8] += 16;
  v13 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (v8 ^ (11 * v12))) - 12);
  STACK[0x39C0] = v11;
  return v13();
}

uint64_t sub_100692054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  int v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t);
  unint64_t v10;
  unint64_t v11;

  LODWORD(STACK[0x3A70]) = 0;
  LODWORD(STACK[0x3A78]) = 0;
  LODWORD(STACK[0x3A88]) = 0;
  LODWORD(STACK[0x3A80]) = 0;
  LODWORD(STACK[0x37F8]) = 0;
  LODWORD(STACK[0x3A60]) = 0;
  LODWORD(STACK[0x3820]) = 0;
  LODWORD(STACK[0x3A48]) = 0;
  LODWORD(STACK[0x3818]) = 0;
  LODWORD(STACK[0x3A58]) = 0;
  LODWORD(STACK[0x37F0]) = 0;
  LODWORD(STACK[0x3810]) = 0;
  LODWORD(STACK[0x3808]) = 0;
  LODWORD(STACK[0x3800]) = 0;
  LODWORD(STACK[0x3A50]) = 0;
  LODWORD(STACK[0x3A68]) = 0;
  STACK[0x3C08] = a5 ^ (8 * v8);
  v9 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)(STACK[0x3C70] + 8 * v7) - ((v7 + 1650) ^ 0x3ECBLL));
  LODWORD(STACK[0x3650]) = 1;
  v10 = STACK[0x37B8];
  STACK[0x3C20] = a7;
  v11 = STACK[0x37C0];
  LODWORD(STACK[0x3A90]) = 1;
  return v9(0, a2, a3, a4, v10, v11);
}

uint64_t sub_1006920EC@<X0>(unint64_t a1@<X4>, unint64_t a2@<X6>, int a3@<W8>)
{
  int v3;
  uint64_t (*v4)(void);

  LODWORD(STACK[0x3C50]) = v3;
  STACK[0x3C60] = a2;
  STACK[0x3C78] = a1;
  STACK[0x3C80] = STACK[0x3BF0];
  v4 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (a3 + 4005));
  LODWORD(STACK[0x39E0]) = 1;
  return v4();
}

uint64_t sub_100692120@<X0>(unsigned int a1@<W8>)
{
  uint64_t (*v1)(void);

  v1 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (int)(a1 + 2575)) - (a1 ^ 0x3C45));
  STACK[0x3740] = STACK[0x3C08];
  STACK[0x3738] = STACK[0x3C20];
  return v1();
}

uint64_t sub_100692158@<X0>(unint64_t a1@<X4>, unint64_t a2@<X6>, int a3@<W8>)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t (*v6)(_QWORD, _QWORD, _QWORD);

  LODWORD(STACK[0x3BD0]) = 0;
  LODWORD(STACK[0x3B90]) = 0;
  LODWORD(STACK[0x3B58]) = 0;
  LODWORD(STACK[0x3BA8]) = 0;
  LODWORD(STACK[0x3BB0]) = 0;
  LODWORD(STACK[0x3B50]) = 0;
  LODWORD(STACK[0x3B98]) = 0;
  LODWORD(STACK[0x3BA0]) = 0;
  LODWORD(STACK[0x3BC0]) = 0;
  LODWORD(STACK[0x3B80]) = 0;
  LODWORD(STACK[0x39E0]) = 0;
  LODWORD(STACK[0x3B88]) = 0;
  LODWORD(STACK[0x3BC8]) = 0;
  LODWORD(STACK[0x3650]) = 0;
  LODWORD(STACK[0x3B48]) = 0;
  LODWORD(STACK[0x3BB8]) = 0;
  LODWORD(STACK[0x3BD8]) = 0;
  LODWORD(STACK[0x3A90]) = 0;
  LODWORD(STACK[0x3B40]) = 0;
  LODWORD(STACK[0x3C28]) = (a3 - 14175) | 0x6200;
  STACK[0x3C80] = STACK[0x3BF0];
  v4 = (unsigned __int8 *)STACK[0x3680];
  LODWORD(STACK[0x3C40]) = *(unsigned __int8 *)(STACK[0x3680] + 25);
  STACK[0x3BF8] = v4[23];
  v5 = v4[19];
  LODWORD(STACK[0x3BE8]) = v4[26];
  STACK[0x3C78] = v4[31];
  STACK[0x3C48] = v4[24];
  LODWORD(STACK[0x3C08]) = (*(unsigned __int8 *)(v3
                                               + 4647 * (v5 ^ 0x9A)
                                               + 25186740
                                               - 6784
                                               * (((1266205
                                                                * (unint64_t)(4647 * (v5 ^ 0x9Au) + 25186740)) >> 32) >> 1)) ^ 0xFFFFFFC3)
                         + 85;
  v6 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(STACK[0x3C70] + 8 * a3);
  STACK[0x3740] = a1;
  STACK[0x3738] = a2;
  LODWORD(STACK[0x3C68]) = v4[17];
  STACK[0x3C60] = v4[28];
  LODWORD(STACK[0x3C50]) = v4[27];
  LODWORD(STACK[0x3C00]) = v4[18];
  LODWORD(STACK[0x3A98]) = 163;
  LODWORD(STACK[0x3AA0]) = 170;
  LODWORD(STACK[0x3B18]) = 36;
  LODWORD(STACK[0x3AF0]) = 147;
  LODWORD(STACK[0x3AA8]) = 83;
  LODWORD(STACK[0x3AB0]) = 33;
  LODWORD(STACK[0x3B20]) = 1735013187;
  LODWORD(STACK[0x3AF8]) = 191;
  LODWORD(STACK[0x3AE0]) = 105;
  LODWORD(STACK[0x3B08]) = 24;
  LODWORD(STACK[0x3B10]) = 713447516;
  LODWORD(STACK[0x3B28]) = -839768396;
  LODWORD(STACK[0x3AE8]) = 246;
  LODWORD(STACK[0x3B30]) = 1298892032;
  LODWORD(STACK[0x3AB8]) = 52;
  LODWORD(STACK[0x3AC0]) = 238;
  LODWORD(STACK[0x3AC8]) = 120;
  LODWORD(STACK[0x3AD0]) = 248;
  LODWORD(STACK[0x3B00]) = 5;
  LODWORD(STACK[0x3AD8]) = 199;
  return v6(LODWORD(STACK[0x3600]), LODWORD(STACK[0x35D8]), LODWORD(STACK[0x35F0]));
}

uint64_t sub_1006923AC@<X0>(unint64_t a1@<X4>, unint64_t a2@<X6>, int a3@<W8>)
{
  int v3;
  unint64_t v4;
  uint64_t (*v5)(void);

  LODWORD(STACK[0x3C50]) = v3;
  LODWORD(STACK[0x3A70]) = 0;
  LODWORD(STACK[0x3A78]) = 0;
  LODWORD(STACK[0x3A88]) = 0;
  LODWORD(STACK[0x3A80]) = 0;
  LODWORD(STACK[0x37F8]) = 0;
  LODWORD(STACK[0x3A60]) = 0;
  LODWORD(STACK[0x3820]) = 0;
  LODWORD(STACK[0x3A48]) = 0;
  LODWORD(STACK[0x3818]) = 0;
  LODWORD(STACK[0x39E0]) = 0;
  LODWORD(STACK[0x3A58]) = 0;
  LODWORD(STACK[0x37F0]) = 0;
  LODWORD(STACK[0x3810]) = 0;
  LODWORD(STACK[0x3650]) = 0;
  LODWORD(STACK[0x3808]) = 0;
  LODWORD(STACK[0x3800]) = 0;
  LODWORD(STACK[0x3A90]) = 0;
  LODWORD(STACK[0x3A50]) = 0;
  LODWORD(STACK[0x3A68]) = 0;
  STACK[0x3C80] = v4;
  v5 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (a3 + 4005));
  STACK[0x3C78] = a1;
  STACK[0x3C08] = a1;
  STACK[0x3C60] = a2;
  STACK[0x3C20] = a2;
  return v5();
}

#error "10069BB00: call analysis failed (funcsize=5750)"

uint64_t sub_10069C158(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(void);

  STACK[0x3C78] = a8;
  v10 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 3482)) - 12);
  STACK[0x27A0] = STACK[0x3240];
  LODWORD(STACK[0x3C68]) = STACK[0x3270];
  STACK[0x27F0] = a1;
  STACK[0x27A8] = v8;
  STACK[0x27B0] = a4;
  STACK[0x27B8] = STACK[0x3308];
  STACK[0x27C0] = STACK[0x3300];
  STACK[0x27C8] = v9;
  STACK[0x27D0] = STACK[0x3360];
  STACK[0x27D8] = STACK[0x3BB8];
  STACK[0x27E0] = STACK[0x3C58];
  STACK[0x27E8] = STACK[0x3BA0];
  return v10();
}

#error "10069C20C: too big function (funcsize=0)"

uint64_t sub_10069EE2C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t (*v10)(uint64_t, unint64_t, unint64_t);
  unint64_t v11;
  unint64_t v12;

  v9 = STACK[0x3710];
  v10 = (uint64_t (*)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)(STACK[0x3C70]
                                                                                        + 8
                                                                                        * (LODWORD(STACK[0x3710]) - 624))
                                                                            - 4);
  v11 = STACK[0x3408];
  STACK[0x2418] = a7;
  STACK[0x3880] = STACK[0x3500];
  STACK[0x2410] = STACK[0x3C58];
  STACK[0x38F8] = STACK[0x3460];
  STACK[0x38F0] = STACK[0x3468];
  STACK[0x3920] = STACK[0x3470];
  STACK[0x3568] = STACK[0x3130];
  STACK[0x3918] = STACK[0x3478];
  STACK[0x3938] = STACK[0x3480];
  STACK[0x3560] = STACK[0x3138];
  STACK[0x3930] = STACK[0x3418];
  STACK[0x3878] = STACK[0x3508];
  STACK[0x3928] = STACK[0x3510];
  STACK[0x37D0] = STACK[0x3488];
  STACK[0x3558] = STACK[0x3140];
  STACK[0x37C8] = STACK[0x33E8];
  STACK[0x3908] = STACK[0x34E0];
  STACK[0x37C0] = STACK[0x3420];
  STACK[0x3550] = STACK[0x3148];
  STACK[0x3900] = STACK[0x33F0];
  STACK[0x37B8] = STACK[0x33F8];
  LODWORD(STACK[0x37D8]) = STACK[0x3400];
  STACK[0x38E8] = STACK[0x3490];
  STACK[0x3910] = STACK[0x3518];
  STACK[0x37B0] = STACK[0x3428];
  STACK[0x2408] = STACK[0x3C50];
  STACK[0x37A8] = STACK[0x3430];
  STACK[0x37A0] = STACK[0x3498];
  STACK[0x3798] = STACK[0x34E8];
  STACK[0x3548] = STACK[0x3180];
  STACK[0x3790] = STACK[0x34F0];
  STACK[0x3788] = STACK[0x34A0];
  STACK[0x38E0] = STACK[0x34F8];
  STACK[0x3780] = STACK[0x3028];
  STACK[0x38B0] = STACK[0x3030];
  STACK[0x3778] = STACK[0x3038];
  STACK[0x38D0] = STACK[0x3520];
  STACK[0x38D8] = STACK[0x34B0];
  STACK[0x38C8] = STACK[0x34A8];
  STACK[0x3770] = STACK[0x34B8];
  STACK[0x2400] = STACK[0x3BA0];
  STACK[0x38C0] = STACK[0x3098];
  STACK[0x3768] = STACK[0x3040];
  STACK[0x3760] = STACK[0x3048];
  STACK[0x3758] = STACK[0x3528];
  STACK[0x23F8] = STACK[0x3C40];
  STACK[0x3748] = STACK[0x30A0];
  STACK[0x3740] = STACK[0x34C0];
  STACK[0x3738] = STACK[0x2FF8];
  STACK[0x23F0] = v8;
  STACK[0x38B8] = STACK[0x3530];
  STACK[0x3750] = STACK[0x3538];
  STACK[0x38A8] = STACK[0x30C8];
  STACK[0x38A0] = STACK[0x3578];
  STACK[0x3730] = STACK[0x3020];
  STACK[0x3728] = STACK[0x3050];
  STACK[0x3720] = STACK[0x30A8];
  STACK[0x3718] = STACK[0x34C8];
  STACK[0x3700] = STACK[0x3000];
  STACK[0x23E8] = STACK[0x3828];
  STACK[0x36F8] = STACK[0x3058];
  STACK[0x3898] = STACK[0x34D0];
  STACK[0x3708] = STACK[0x34D8];
  STACK[0x36E8] = STACK[0x3060];
  STACK[0x23E0] = v7;
  STACK[0x23D8] = STACK[0x3C48];
  STACK[0x3890] = STACK[0x3068];
  STACK[0x36E0] = STACK[0x30B0];
  STACK[0x36F0] = STACK[0x3088];
  STACK[0x36D8] = STACK[0x3008];
  STACK[0x23D0] = STACK[0x3BB8];
  STACK[0x23C8] = a4;
  STACK[0x36D0] = STACK[0x3080];
  v12 = STACK[0x3018];
  STACK[0x3C00] = 2;
  LODWORD(STACK[0x3AC0]) = v9;
  STACK[0x33E0] = STACK[0x15C8];
  STACK[0x3450] = 0x9688F20F9174F32;
  STACK[0x3C38] = 0x9688F20F9174F32;
  STACK[0x3448] = 0x9688F20F9174F32;
  STACK[0x3BB0] = 0x9688F20F9174F32;
  STACK[0x3440] = 0x9688F20F9174F32;
  STACK[0x3438] = STACK[0x15A8];
  STACK[0x3BF8] = STACK[0x15B0];
  STACK[0x3398] = STACK[0x15D0];
  STACK[0x33B0] = 0x9688F20F9174F32;
  STACK[0x3388] = 0x9688F20F9174F32;
  STACK[0x3540] = STACK[0x15C0];
  STACK[0x33D8] = 0x9688F20F9174F32;
  STACK[0x3BE8] = STACK[0x15A0];
  STACK[0x3BF0] = 0x9688F20F9174F32;
  STACK[0x3570] = 0x9688F20F9174F32;
  STACK[0x3C78] = 0x9688F20F9174F32;
  STACK[0x3380] = STACK[0x1598];
  STACK[0x3BE0] = STACK[0x15D8];
  STACK[0x3390] = STACK[0x1590];
  STACK[0x33A8] = STACK[0x15B8];
  STACK[0x3C30] = STACK[0x1588];
  return v10(a1, v12, v11);
}

uint64_t sub_10069F190(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t (*v12)(void);
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  STACK[0x3AB8] = 0;
  STACK[0x3980] = 0;
  STACK[0x3A18] = 0;
  STACK[0x3BC0] = 0;
  STACK[0x3978] = 0;
  STACK[0x39F8] = 0;
  STACK[0x3930] = 0;
  STACK[0x3910] = 0;
  STACK[0x3970] = 0;
  STACK[0x3928] = 0;
  STACK[0x3908] = 0;
  STACK[0x3BA8] = 0;
  STACK[0x3C38] = 0;
  STACK[0x3438] = 0;
  STACK[0x3A10] = 0;
  STACK[0x3968] = 0;
  STACK[0x38D0] = 0;
  STACK[0x3C08] = 0;
  STACK[0x3A08] = 0;
  STACK[0x3540] = 0;
  STACK[0x38C8] = 0;
  STACK[0x38E0] = 0;
  STACK[0x38D8] = 0;
  STACK[0x3570] = 0;
  STACK[0x3900] = 0;
  STACK[0x39B8] = 0;
  STACK[0x38A0] = 0;
  STACK[0x38C0] = 0;
  STACK[0x3BB0] = 0;
  STACK[0x3448] = 0;
  STACK[0x38A8] = 0;
  STACK[0x3440] = 0;
  STACK[0x3C30] = 0;
  STACK[0x3898] = 0;
  STACK[0x38B8] = 0;
  STACK[0x3450] = 0;
  STACK[0x3568] = STACK[0x3130];
  STACK[0x1CF8] = STACK[0x3C50];
  STACK[0x3560] = STACK[0x3138];
  STACK[0x1CF0] = v7;
  STACK[0x1CE8] = STACK[0x3BB8];
  STACK[0x1CE0] = v8;
  STACK[0x3558] = STACK[0x3140];
  STACK[0x3550] = STACK[0x3148];
  STACK[0x1CD8] = a7;
  STACK[0x1CD0] = STACK[0x3C48];
  STACK[0x3548] = STACK[0x3180];
  STACK[0x1CC8] = STACK[0x3828];
  STACK[0x3C68] = STACK[0x3188];
  STACK[0x1CC0] = a4;
  STACK[0x3C48] = STACK[0x3190];
  STACK[0x3C28] = STACK[0x3198];
  STACK[0x3C20] = STACK[0x31A0];
  STACK[0x1CB0] = STACK[0x3BA0];
  STACK[0x1CA8] = STACK[0x3C58];
  STACK[0x3BD0] = STACK[0x3170];
  STACK[0x3BC8] = STACK[0x3150];
  STACK[0x1CB8] = STACK[0x3C40];
  LODWORD(STACK[0x3C60]) = STACK[0x2020];
  LODWORD(STACK[0x3C50]) = STACK[0x2050];
  LODWORD(STACK[0x3818]) = STACK[0x204C];
  LODWORD(STACK[0x3C40]) = STACK[0x2048];
  LODWORD(STACK[0x3BA0]) = STACK[0x2018];
  LODWORD(STACK[0x3810]) = STACK[0x205C];
  LODWORD(STACK[0x3B70]) = STACK[0x2044];
  LODWORD(STACK[0x3828]) = STACK[0x206C];
  STACK[0x38F8] = 0xFD81CB2F710F651ALL;
  LODWORD(STACK[0x3A88]) = STACK[0x2040];
  LODWORD(STACK[0x3B78]) = STACK[0x2060];
  LODWORD(STACK[0x3820]) = STACK[0x2078];
  LODWORD(STACK[0x3A78]) = STACK[0x2098];
  LODWORD(STACK[0x3B48]) = STACK[0x20A8];
  LODWORD(STACK[0x3A70]) = STACK[0x20A0];
  LODWORD(STACK[0x3B50]) = STACK[0x2030];
  LODWORD(STACK[0x3B60]) = STACK[0x20AC];
  LODWORD(STACK[0x3A80]) = STACK[0x20A4];
  LODWORD(STACK[0x3B68]) = STACK[0x2068];
  LODWORD(STACK[0x3B58]) = STACK[0x202C];
  LODWORD(STACK[0x3A90]) = STACK[0x2064];
  LODWORD(STACK[0x3B80]) = STACK[0x203C];
  LODWORD(STACK[0x39C0]) = STACK[0x2058];
  LODWORD(STACK[0x3BD8]) = STACK[0x2010];
  LODWORD(STACK[0x3B88]) = STACK[0x2038];
  STACK[0x3A00] = 0xE03F02DBA0F960B6;
  STACK[0x3AA0] = 0xFD81CB2F710F651ALL;
  LODWORD(STACK[0x3B90]) = STACK[0x2054];
  STACK[0x38E8] = 0xE03F02DBA0F960B6;
  LODWORD(STACK[0x3B40]) = STACK[0x2074];
  STACK[0x3918] = 0xE03F02DBA0F960B6;
  LODWORD(STACK[0x3A98]) = STACK[0x209C];
  LODWORD(STACK[0x3AC8]) = STACK[0x2034];
  STACK[0x3920] = 0xE03F02DBA0F960B6;
  STACK[0x38F0] = 0xE03F02DBA0F960B6;
  STACK[0x3938] = 0xFD81CB2F710F651ALL;
  LODWORD(STACK[0x3B98]) = STACK[0x2070];
  LODWORD(STACK[0x3BB8]) = STACK[0x2008];
  STACK[0x3890] = 0xE03F02DBA0F960B6;
  STACK[0x38B0] = 0xE03F02DBA0F960B6;
  v9 = STACK[0x3C70];
  v10 = STACK[0x3C18];
  v11 = STACK[0x3710];
  STACK[0x3878] = 0;
  STACK[0x3880] = 0;
  LODWORD(STACK[0x21D4]) = 0;
  v12 = (uint64_t (*)(void))(*(_QWORD *)(v9
                                      + 8
                                      * ((971
                                        * ((((*(unsigned __int8 *)(v10 + 3159) + 117) >> 2) & 0x12 ^ (*(_BYTE *)(v10 + 3159) + 117)) != 244)) ^ (v11 - 624)))
                          - ((v11 - 1662) ^ 0x35CFLL));
  STACK[0x3C00] = 24;
  LODWORD(STACK[0x37D8]) = 106;
  LODWORD(STACK[0x3AC0]) = v11;
  STACK[0x33E0] = 0;
  STACK[0x3A68] = 0xFD81CB2F710F651ALL;
  STACK[0x3A60] = STACK[0x38F8];
  STACK[0x3A20] = 0xFD81CB2F710F651ALL;
  STACK[0x37D0] = 0xFD81CB2F710F651ALL;
  v13 = STACK[0x3448];
  STACK[0x37C8] = STACK[0x3448];
  STACK[0x3888] = 0;
  STACK[0x37C0] = 0;
  STACK[0x39B0] = STACK[0x3BC0];
  v14 = STACK[0x3BB0];
  STACK[0x37B8] = STACK[0x3BB0];
  STACK[0x37B0] = 0;
  STACK[0x3860] = STACK[0x3930];
  STACK[0x37A8] = 0;
  STACK[0x39D8] = 0xE03F02DBA0F960B6;
  STACK[0x37A0] = 0xE03F02DBA0F960B6;
  STACK[0x3960] = STACK[0x3910];
  STACK[0x3798] = 0;
  STACK[0x3AB0] = 0;
  STACK[0x3BF8] = 0;
  STACK[0x3988] = 0;
  STACK[0x3398] = 0;
  v15 = STACK[0x3900];
  STACK[0x33B0] = STACK[0x3900];
  STACK[0x3838] = STACK[0x3928];
  v16 = STACK[0x3440];
  STACK[0x3790] = STACK[0x3440];
  STACK[0x3A50] = 0xFD81CB2F710F651ALL;
  STACK[0x3788] = 0xFD81CB2F710F651ALL;
  v17 = STACK[0x3908];
  STACK[0x3840] = STACK[0x3908];
  STACK[0x3388] = v17;
  STACK[0x3A38] = 0xFD81CB2F710F651ALL;
  STACK[0x3780] = 0xFD81CB2F710F651ALL;
  STACK[0x3A48] = 0xFD81CB2F710F651ALL;
  STACK[0x3778] = 0xFD81CB2F710F651ALL;
  STACK[0x3770] = STACK[0x3BA8];
  STACK[0x3848] = STACK[0x3C38];
  v18 = STACK[0x3438];
  STACK[0x39A8] = STACK[0x3438];
  STACK[0x39D0] = 0xE03F02DBA0F960B6;
  STACK[0x3768] = 0xE03F02DBA0F960B6;
  STACK[0x3A28] = 0xFD81CB2F710F651ALL;
  STACK[0x3760] = 0xFD81CB2F710F651ALL;
  STACK[0x3958] = 0;
  STACK[0x3758] = STACK[0x3A18];
  STACK[0x33D8] = 0;
  STACK[0x3868] = STACK[0x38E8];
  v19 = STACK[0x38C0];
  STACK[0x3BE8] = STACK[0x38C0];
  STACK[0x3850] = STACK[0x38D0];
  STACK[0x39E0] = 0;
  STACK[0x3748] = 0;
  STACK[0x3858] = STACK[0x3918];
  STACK[0x39E8] = 0;
  STACK[0x3BF0] = 0;
  STACK[0x3740] = STACK[0x39F8];
  v20 = STACK[0x3540];
  STACK[0x3738] = STACK[0x3540];
  STACK[0x3870] = STACK[0x3C08];
  STACK[0x3750] = STACK[0x3970];
  STACK[0x39A0] = v20;
  STACK[0x3948] = STACK[0x38C8];
  v21 = STACK[0x38E0];
  STACK[0x3998] = STACK[0x38E0];
  STACK[0x3950] = STACK[0x38D8];
  STACK[0x3C78] = STACK[0x3A08];
  v22 = STACK[0x3570];
  STACK[0x3AD0] = STACK[0x3570];
  STACK[0x3AD8] = STACK[0x3920];
  STACK[0x3730] = 0;
  STACK[0x3AE0] = v15;
  STACK[0x3AE8] = STACK[0x38F0];
  STACK[0x3940] = STACK[0x38A0];
  STACK[0x3A40] = 0xFD81CB2F710F651ALL;
  STACK[0x3728] = 0xFD81CB2F710F651ALL;
  v23 = STACK[0x3AB8];
  STACK[0x3720] = STACK[0x3AB8];
  STACK[0x3718] = STACK[0x3978];
  STACK[0x3AA8] = 0;
  STACK[0x3380] = 0;
  v24 = STACK[0x3450];
  STACK[0x3700] = STACK[0x3450];
  STACK[0x3990] = v19;
  STACK[0x39F0] = 0xE03F02DBA0F960B6;
  STACK[0x36F8] = 0xE03F02DBA0F960B6;
  STACK[0x3AF0] = v14;
  STACK[0x3BE0] = STACK[0x39B8];
  STACK[0x3708] = STACK[0x3968];
  STACK[0x3A58] = STACK[0x3938];
  STACK[0x39C8] = 0xE03F02DBA0F960B6;
  STACK[0x36E8] = 0xE03F02DBA0F960B6;
  STACK[0x36E0] = v22;
  STACK[0x3A30] = 0xFD81CB2F710F651ALL;
  STACK[0x36F0] = STACK[0x3980];
  STACK[0x3390] = v21;
  STACK[0x36D8] = v18;
  STACK[0x3AF8] = v13;
  STACK[0x3B08] = STACK[0x38A8];
  STACK[0x3B00] = STACK[0x3890];
  STACK[0x33A8] = v23;
  STACK[0x3B10] = STACK[0x38B0];
  STACK[0x3B18] = v16;
  STACK[0x37E0] = STACK[0x3C30];
  STACK[0x3B20] = STACK[0x3898];
  STACK[0x3B30] = STACK[0x38B8];
  STACK[0x36D0] = STACK[0x3AA0];
  STACK[0x3B28] = v24;
  STACK[0x3B38] = 0;
  return v12();
}

uint64_t sub_10069F830(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t (*v28)(void);
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;

  v12 = v3;
  v13 = 4647 * ((LODWORD(STACK[0x20B0]) + 111) ^ 0x36) + 17937420;
  v14 = STACK[0x3C18];
  v15 = *(unsigned __int8 *)(STACK[0x3C18] + v13 - 6784 * (((1266205 * (unint64_t)v13) >> 32) >> 1)) ^ 0xE;
  LODWORD(STACK[0x2068]) = (v15 >> 3) | (32 * v15);
  v16 = *(unsigned __int8 *)(v14
                           + 4647 * (LODWORD(STACK[0x20BC]) ^ 0xFE)
                           + 13123128
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647
                                                               * (LODWORD(STACK[0x20BC]) ^ 0xFEu)
                                                               + 13123128)) >> 32) >> 1))
      - 71;
  v17 = v16 ^ (v16 << 6) ^ (4 * v16);
  v18 = v4;
  v19 = (v9 + 1029720462) & 0xC29FBCEF;
  v20 = LODWORD(STACK[0x20C4]) ^ 0xB8;
  LODWORD(STACK[0x3590]) = v19;
  v21 = *(unsigned __int8 *)(v14
                           + 4647 * (LODWORD(STACK[0x20CC]) ^ 0xC4)
                           + 14331348
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647
                                                               * (LODWORD(STACK[0x20CC]) ^ 0xC4u)
                                                               + 14331348)) >> 32) >> 1))
      + 117;
  v22 = v21 ^ 0x12 ^ (v21 >> 2) & 0x12;
  v23 = 4647 * (STACK[0x20E0] ^ 0xB8)
      + 9544938
      - 6784
      * (((1266205 * (unint64_t)(4647 * (STACK[0x20E0] ^ 0xB8u) + 9544938)) >> 32) >> 1);
  v24 = 4647 * (STACK[0x20D0] ^ 0x9A)
      + 25186740
      - 6784
      * (((1266205 * (unint64_t)(4647 * (STACK[0x20D0] ^ 0x9Au) + 25186740)) >> 32) >> 1);
  v25 = STACK[0x20D8] ^ 0x9A;
  LODWORD(STACK[0x206C]) = ((*(unsigned __int8 *)(v14
                                                + (v19
                                                               + 4647 * v20
                                                               + 9529505
                                                               - 6784
                                                               * ((81037119
                                                                 * (unint64_t)((v19 + 4647 * v20 + 9529505) >> 7)) >> 32)))
                           - 87) ^ 0xFFFFFFFB)
                         + 85;
  LODWORD(STACK[0x2064]) = v22 + 26;
  LODWORD(STACK[0x2070]) = ((*(unsigned __int8 *)(v14 + v23) - 87) ^ 0xFFFFFFFB) + 85;
  v26 = *(unsigned __int8 *)(v14 + v24) ^ 0xFFFFFFC3;
  LODWORD(STACK[0x20A0]) = STACK[0x20F8];
  v27 = *(unsigned __int8 *)(v14
                           + 4647 * v25
                           + 25186740
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * v25 + 25186740)) >> 32) >> 1)) ^ 0xFFFFFFC3;
  STACK[0x2018] = LODWORD(STACK[0x2108]);
  LODWORD(STACK[0x2108]) = STACK[0x2110];
  v28 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * v9) - 4);
  STACK[0x2020] = STACK[0x2168];
  LODWORD(STACK[0x3834]) = STACK[0x2170];
  LODWORD(STACK[0x2050]) = STACK[0x20C0];
  LODWORD(STACK[0x204C]) = STACK[0x2124];
  LODWORD(STACK[0x2048]) = STACK[0x20EC];
  STACK[0x3688] = STACK[0x39E0];
  LODWORD(STACK[0x205C]) = STACK[0x2118];
  STACK[0x3C58] = STACK[0x33D0];
  LODWORD(STACK[0x2044]) = STACK[0x3C40];
  STACK[0x3C40] = STACK[0x33C8];
  LODWORD(STACK[0x20BC]) = STACK[0x3810];
  LODWORD(STACK[0x2124]) = STACK[0x20B8];
  STACK[0x3130] = STACK[0x3568];
  STACK[0x3138] = STACK[0x3560];
  LODWORD(STACK[0x2170]) = STACK[0x2164];
  LODWORD(STACK[0x2040]) = STACK[0x210C];
  LODWORD(STACK[0x2060]) = STACK[0x2144];
  STACK[0x3680] = STACK[0x39E8];
  LODWORD(STACK[0x2078]) = STACK[0x20C8];
  STACK[0x3140] = STACK[0x3558];
  LODWORD(STACK[0x2098]) = STACK[0x2148];
  STACK[0x3148] = STACK[0x3550];
  LODWORD(STACK[0x20A8]) = STACK[0x2100];
  STACK[0x20E0] = STACK[0x2128];
  STACK[0x3668] = STACK[0x39D8];
  LODWORD(STACK[0x2030]) = STACK[0x3C50];
  STACK[0x3678] = STACK[0x39F8];
  STACK[0x3C50] = STACK[0x33C0];
  STACK[0x3670] = STACK[0x3930];
  LODWORD(STACK[0x2144]) = STACK[0x20B4];
  LODWORD(STACK[0x20AC]) = STACK[0x3C60];
  LODWORD(STACK[0x20A4]) = STACK[0x20FC];
  LODWORD(STACK[0x20CC]) = STACK[0x3820];
  LODWORD(STACK[0x202C]) = STACK[0x2138];
  STACK[0x3660] = STACK[0x3928];
  STACK[0x3180] = STACK[0x3548];
  STACK[0x2128] = LODWORD(STACK[0x3A70]);
  STACK[0x3A70] = STACK[0x36C0];
  STACK[0x3658] = STACK[0x39D0];
  LODWORD(STACK[0x203C]) = STACK[0x2130];
  STACK[0x3188] = v5;
  STACK[0x3650] = STACK[0x3908];
  LODWORD(STACK[0x210C]) = STACK[0x20F4];
  LODWORD(STACK[0x2058]) = STACK[0x3A78];
  STACK[0x2010] = LODWORD(STACK[0x2154]);
  LODWORD(STACK[0x2038]) = STACK[0x3828];
  STACK[0x3640] = STACK[0x39C8];
  STACK[0x3648] = STACK[0x3BA8];
  STACK[0x3638] = STACK[0x3C38];
  LODWORD(STACK[0x2100]) = STACK[0x3A80];
  STACK[0x3A78] = STACK[0x36B8];
  STACK[0x3630] = STACK[0x3A00];
  STACK[0x3628] = STACK[0x3A10];
  LODWORD(STACK[0x2054]) = STACK[0x3B58];
  STACK[0x3190] = v8;
  STACK[0x3618] = STACK[0x38E8];
  STACK[0x3610] = STACK[0x39F0];
  v29 = STACK[0x3878];
  STACK[0x2168] = LODWORD(STACK[0x39C0]);
  STACK[0x3620] = STACK[0x38D0];
  LODWORD(STACK[0x20FC]) = STACK[0x3A90];
  LODWORD(STACK[0x2074]) = STACK[0x2158];
  STACK[0x3608] = STACK[0x3918];
  STACK[0x3600] = v12;
  STACK[0x35F8] = STACK[0x3A08];
  LODWORD(STACK[0x209C]) = STACK[0x3A88];
  v30 = STACK[0x38C8];
  STACK[0x2F68] = STACK[0x38C8];
  STACK[0x30E0] = v30;
  STACK[0x3948] = v30;
  v31 = STACK[0x38D8];
  STACK[0x2FD0] = STACK[0x38D8];
  STACK[0x37F0] = v31;
  STACK[0x3950] = v31;
  STACK[0x2138] = LODWORD(STACK[0x3A98]);
  LODWORD(STACK[0x2034]) = STACK[0x3818];
  STACK[0x35F0] = STACK[0x3570];
  v32 = STACK[0x38F8];
  STACK[0x3A60] = STACK[0x38F8];
  STACK[0x3C60] = v32;
  STACK[0x2F00] = v32;
  STACK[0x3C48] = STACK[0x33B8];
  STACK[0x35E8] = STACK[0x3920];
  STACK[0x35E0] = STACK[0x3900];
  STACK[0x35D8] = STACK[0x38F0];
  STACK[0x3198] = v11;
  STACK[0x31A0] = v10;
  STACK[0x2148] = LODWORD(STACK[0x3BD8]);
  STACK[0x3A80] = STACK[0x36B0];
  LODWORD(STACK[0x20C4]) = STACK[0x20F0];
  LODWORD(STACK[0x20F4]) = STACK[0x2104];
  v33 = STACK[0x38C0];
  STACK[0x3B58] = STACK[0x38C0];
  STACK[0x3820] = v33;
  STACK[0x2F70] = v33;
  STACK[0x2EF0] = v33;
  STACK[0x3990] = v33;
  STACK[0x20D8] = (v17 ^ 0xFFFFFFFE) + 26;
  STACK[0x3A68] = v18;
  STACK[0x2F30] = v18;
  STACK[0x2EE0] = v18;
  STACK[0x35D0] = STACK[0x3BB0];
  LODWORD(STACK[0x20F0]) = STACK[0x3B48];
  v34 = STACK[0x3438];
  STACK[0x2FE0] = STACK[0x3438];
  STACK[0x39A8] = v34;
  STACK[0x2F18] = v34;
  STACK[0x3C28] = v34;
  STACK[0x3B48] = v34;
  STACK[0x2130] = LODWORD(STACK[0x3AC8]);
  v35 = STACK[0x3938];
  STACK[0x2FD8] = STACK[0x3938];
  STACK[0x2F80] = v35;
  STACK[0x3A58] = v35;
  STACK[0x36C8] = v29;
  STACK[0x3958] = v29;
  STACK[0x2EC8] = v29;
  LODWORD(STACK[0x2164]) = STACK[0x3B40];
  LODWORD(STACK[0x20F8]) = v26 + 85;
  STACK[0x3A88] = STACK[0x36A8];
  STACK[0x3170] = v7;
  LODWORD(STACK[0x20C8]) = STACK[0x3B50];
  STACK[0x2158] = LODWORD(STACK[0x3B60]);
  STACK[0x35C8] = STACK[0x3448];
  STACK[0x35C0] = STACK[0x38A8];
  STACK[0x39C0] = STACK[0x36A0];
  STACK[0x2008] = LODWORD(STACK[0x3BA0]);
  STACK[0x35B8] = STACK[0x3890];
  v36 = STACK[0x38A0];
  STACK[0x2FB0] = STACK[0x38A0];
  STACK[0x3940] = v36;
  STACK[0x30E8] = v36;
  STACK[0x35B0] = STACK[0x38B0];
  STACK[0x35A8] = STACK[0x3440];
  STACK[0x3A90] = STACK[0x3698];
  LODWORD(STACK[0x20C0]) = STACK[0x3B68];
  STACK[0x20D0] = LODWORD(STACK[0x3BB8]);
  LODWORD(STACK[0x20B0]) = STACK[0x3B70];
  v37 = STACK[0x3C30];
  STACK[0x2F20] = STACK[0x3C30];
  STACK[0x3C20] = v37;
  STACK[0x2EF8] = v37;
  STACK[0x3B40] = v37;
  STACK[0x37E0] = v37;
  STACK[0x35A0] = STACK[0x3898];
  STACK[0x2FB8] = a3;
  STACK[0x39B0] = a3;
  STACK[0x30D8] = a3;
  STACK[0x3598] = STACK[0x38B8];
  STACK[0x3588] = STACK[0x3450];
  v38 = STACK[0x3910];
  STACK[0x3960] = STACK[0x3910];
  STACK[0x2ED0] = v38;
  STACK[0x3818] = v38;
  STACK[0x2118] = LODWORD(STACK[0x3B78]);
  STACK[0x2110] = v27 + 85;
  LODWORD(STACK[0x2104]) = STACK[0x3B80];
  LODWORD(STACK[0x20B8]) = STACK[0x3B88];
  STACK[0x3A98] = STACK[0x3690];
  v39 = STACK[0x3540];
  STACK[0x3120] = STACK[0x3540];
  STACK[0x2FC8] = v39;
  STACK[0x30F8] = v39;
  STACK[0x39A0] = v39;
  STACK[0x2E58] = v39;
  STACK[0x3150] = v6;
  LODWORD(STACK[0x2154]) = STACK[0x3B98];
  LODWORD(STACK[0x20B4]) = STACK[0x3B90];
  STACK[0x3580] = STACK[0x3880];
  v40 = STACK[0x38E0];
  STACK[0x2FE8] = STACK[0x38E0];
  STACK[0x3290] = v40;
  STACK[0x3998] = v40;
  STACK[0x3110] = v40;
  STACK[0x2E48] = v40;
  LODWORD(STACK[0x2F64]) = 23;
  LODWORD(STACK[0x3C08]) = 6;
  v41 = STACK[0x3980];
  STACK[0x3810] = STACK[0x3980];
  v42 = STACK[0x3AA8];
  STACK[0x3160] = STACK[0x3AA8];
  v43 = STACK[0x3970];
  STACK[0x37F8] = STACK[0x3970];
  v44 = STACK[0x3978];
  STACK[0x2FF0] = STACK[0x3978];
  v45 = STACK[0x3A40];
  STACK[0x2FC0] = STACK[0x3A40];
  v46 = STACK[0x3968];
  STACK[0x3808] = STACK[0x3968];
  v47 = STACK[0x3A30];
  STACK[0x2FA8] = STACK[0x3A30];
  v48 = STACK[0x3A50];
  STACK[0x2FA0] = STACK[0x3A50];
  STACK[0x2F90] = v47;
  STACK[0x2F88] = v42;
  v49 = STACK[0x3888];
  STACK[0x2F78] = STACK[0x3888];
  STACK[0x2F98] = v41;
  LODWORD(STACK[0x20EC]) = 252;
  v50 = STACK[0x3AA0];
  STACK[0x2F50] = STACK[0x3AA0];
  v51 = STACK[0x39B8];
  STACK[0x3B50] = STACK[0x39B8];
  v52 = STACK[0x3AB8];
  STACK[0x3108] = STACK[0x3AB8];
  v53 = STACK[0x3A48];
  STACK[0x2F48] = STACK[0x3A48];
  STACK[0x2F40] = v53;
  STACK[0x2F38] = v52;
  v54 = STACK[0x3A18];
  STACK[0x2F58] = STACK[0x3A18];
  STACK[0x3178] = v49;
  STACK[0x31A8] = v52;
  STACK[0x2F28] = v51;
  v55 = STACK[0x3988];
  STACK[0x3100] = STACK[0x3988];
  STACK[0x37E8] = v44;
  STACK[0x3118] = v42;
  STACK[0x30D0] = v54;
  STACK[0x3168] = v49;
  v56 = STACK[0x3A20];
  STACK[0x2F10] = STACK[0x3A20];
  STACK[0x2F08] = v49;
  STACK[0x2EE8] = v51;
  v57 = STACK[0x3A38];
  STACK[0x2ED8] = STACK[0x3A38];
  STACK[0x2EC0] = v55;
  v58 = STACK[0x3AB0];
  STACK[0x2EB8] = STACK[0x3AB0];
  STACK[0x3B60] = v51;
  STACK[0x2EB0] = v48;
  STACK[0x30F0] = v58;
  STACK[0x2EA8] = v45;
  STACK[0x2EA0] = v58;
  STACK[0x2E98] = v46;
  STACK[0x3800] = v55;
  STACK[0x3158] = v58;
  v59 = STACK[0x3A28];
  STACK[0x2E90] = STACK[0x3A28];
  STACK[0x2E88] = v59;
  STACK[0x2E78] = v42;
  STACK[0x3C68] = v56;
  STACK[0x2E70] = v55;
  STACK[0x2E68] = v52;
  STACK[0x2E60] = v57;
  STACK[0x2E80] = v43;
  STACK[0x2E50] = v50;
  return v28();
}

uint64_t sub_10069FFC8()
{
  unint64_t v0;
  unint64_t v1;
  _BOOL4 v2;
  unint64_t v3;
  unint64_t v4;
  _BOOL4 v5;
  unint64_t v6;
  _BOOL4 v7;
  unint64_t v8;
  _BOOL4 v9;
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  _BOOL4 v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL8 v19;
  unint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  unint64_t v23;
  _BOOL4 v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  _BOOL4 v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  _BOOL4 v48;
  uint64_t v49;
  unint64_t v50;
  _BOOL4 v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BOOL4 v64;
  uint64_t v65;
  unint64_t v66;
  _BOOL4 v67;
  unint64_t v68;
  _BOOL4 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BOOL4 v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BOOL4 v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BOOL4 v86;
  unint64_t v87;
  _BOOL4 v88;
  unint64_t v89;
  _BOOL4 v90;
  unint64_t v91;
  _BOOL4 v92;
  unint64_t v93;
  _BOOL4 v94;
  unint64_t v95;
  _BOOL4 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;

  v0 = STACK[0x2D60];
  v1 = STACK[0x2DF8];
  v2 = STACK[0x2D60] + STACK[0x2DF8] > 0xFFFFFFFFFFFFFFCALL;
  STACK[0x3C78] = STACK[0x2D60] + STACK[0x2DF8];
  if (__CFADD__(v0, v1))
    v2 = 1;
  LODWORD(STACK[0x3C38]) = v2;
  v3 = STACK[0x2E30];
  v4 = STACK[0x2D40];
  v5 = STACK[0x2D40] + STACK[0x2E30] > 0xFFFFFFFFFFFFFFD0;
  STACK[0x3C30] = STACK[0x2D40] + STACK[0x2E30];
  if (__CFADD__(v4, v3))
    v5 = 1;
  LODWORD(STACK[0x3C00]) = v5;
  v6 = STACK[0x2D38] + STACK[0x2E18];
  v7 = __CFADD__(STACK[0x2D38], STACK[0x2E18]) || STACK[0x2D38] + STACK[0x2E18] > 0xFFFFFFFFFFFFFFDELL;
  v8 = STACK[0x2BE8] + STACK[0x2BB8];
  v9 = __CFADD__(STACK[0x2BE8], STACK[0x2BB8]) || STACK[0x2BE8] + STACK[0x2BB8] > 0xFFFFFFFFFFFFFFEELL;
  v10 = STACK[0x2BF0] + STACK[0x2B68];
  v11 = __CFADD__(STACK[0x2BF0], STACK[0x2B68]) || STACK[0x2BF0] + STACK[0x2B68] > 0xFFFFFFFFFFFFFFF0;
  v12 = STACK[0x2B60] + STACK[0x2C00];
  v13 = __CFADD__(STACK[0x2B60], STACK[0x2C00]) || STACK[0x2B60] + STACK[0x2C00] > 0xFFFFFFFFFFFFFFF6;
  v14 = STACK[0x2B38] + STACK[0x2C68];
  v15 = __CFADD__(STACK[0x2B38], STACK[0x2C68]) || STACK[0x2B38] + STACK[0x2C68] > 0xFFFFFFFFFFFFFFD2;
  v16 = STACK[0x3590];
  v17 = (LODWORD(STACK[0x3590]) - 6567) | 1u;
  v18 = STACK[0x2BD0] + STACK[0x2BB0];
  v19 = __CFADD__(STACK[0x2BD0], STACK[0x2BB0]) || STACK[0x2BD0] + STACK[0x2BB0] == -1;
  v20 = STACK[0x2B20] + STACK[0x2BE0];
  v21 = __CFADD__(STACK[0x2B20], STACK[0x2BE0]) || STACK[0x2B20] + STACK[0x2BE0] > v17 - 8885;
  v22 = STACK[0x2C10] + STACK[0x2B98] > 0xFFFFFFFFFFFFFFF6;
  v23 = STACK[0x2C10] + STACK[0x2B98];
  if (__CFADD__(STACK[0x2C10], STACK[0x2B98]))
    v22 = 1;
  v24 = STACK[0x2B40] + STACK[0x2C18] > 0xFFFFFFFFFFFFFFF0;
  v25 = STACK[0x2B40] + STACK[0x2C18];
  if (__CFADD__(STACK[0x2B40], STACK[0x2C18]))
    v24 = 1;
  v26 = STACK[0x2B48] + STACK[0x2C28];
  v27 = __CFADD__(STACK[0x2B48], STACK[0x2C28]);
  v28 = STACK[0x2BF8] + STACK[0x2BC8];
  LODWORD(v29) = __CFADD__(STACK[0x2BF8], STACK[0x2BC8]);
  if (v28 == -1)
    v29 = 1;
  else
    v29 = v29;
  v30 = STACK[0x2C40] + STACK[0x2BC0];
  v31 = __CFADD__(STACK[0x2C40], STACK[0x2BC0]);
  if (v30 > 0xFFFFFFFFFFFFFFFCLL)
    v31 = 1;
  if (v31)
    v32 = 3;
  else
    v32 = 0;
  STACK[0x3BF0] = v32 + v30;
  STACK[0x3BC0] = v29 + v28;
  v33 = STACK[0x2C78] + STACK[0x2B80];
  v34 = __CFADD__(STACK[0x2C78], STACK[0x2B80]);
  if (v26 > 0xFFFFFFFFFFFFFFFALL || v27)
    v36 = 5;
  else
    v36 = 0;
  STACK[0x3BB8] = v36 + v26;
  v37 = 15;
  if (!v24)
    v37 = 0;
  STACK[0x3BB0] = v37 + v25;
  if (v22)
    v38 = 9;
  else
    v38 = 0;
  STACK[0x3BA0] = v38 + v23;
  v39 = STACK[0x2B50] + STACK[0x2C50];
  v40 = __CFADD__(STACK[0x2B50], STACK[0x2C50]);
  v41 = STACK[0x2C08] + STACK[0x2BA8];
  v42 = __CFADD__(STACK[0x2C08], STACK[0x2BA8]);
  v43 = !v21;
  v44 = 17;
  if (v43)
    v44 = 0;
  if (v39 > 0xFFFFFFFFFFFFFFDELL)
    v40 = 1;
  v45 = STACK[0x2B70] + STACK[0x2C48];
  v46 = __CFADD__(STACK[0x2B70], STACK[0x2C48]);
  v47 = STACK[0x2B78] + STACK[0x2C58];
  v48 = __CFADD__(STACK[0x2B78], STACK[0x2C58]);
  v43 = !v40;
  STACK[0x3B78] = v44 + v20;
  v49 = 33;
  if (v43)
    v49 = 0;
  STACK[0x3B70] = v49 + v39;
  if (v33 > 0xFFFFFFFFFFFFFFD8)
    v34 = 1;
  v50 = STACK[0x2C38] + STACK[0x2B88];
  v51 = __CFADD__(STACK[0x2C38], STACK[0x2B88]);
  v52 = v41 > 0xFFFFFFFFFFFFFFFALL || v42;
  if (v34)
    v53 = 39;
  else
    v53 = 0;
  v54 = v47 > 0xFFFFFFFFFFFFFFCALL || v48;
  STACK[0x3B68] = v53 + v33;
  v55 = 53;
  if (!v54)
    v55 = 0;
  v56 = v45 > 0xFFFFFFFFFFFFFFD0 || v46;
  if (v50 > 0xFFFFFFFFFFFFFFFCLL)
    v51 = 1;
  v43 = !v15;
  v57 = 45;
  if (v43)
    v57 = 0;
  if (v56)
    v58 = 47;
  else
    v58 = 0;
  STACK[0x3AC8] = v58 + v45;
  v59 = STACK[0x2B28] + STACK[0x2BD8];
  v60 = __CFADD__(STACK[0x2B28], STACK[0x2BD8]);
  if (v51)
    v61 = 3;
  else
    v61 = 0;
  STACK[0x3AC0] = v57 + v14;
  STACK[0x3938] = v19 + v18;
  STACK[0x3930] = v55 + v47;
  STACK[0x3928] = v61 + v50;
  if (v52)
    v62 = 5;
  else
    v62 = 0;
  STACK[0x3920] = v62 + v41;
  v63 = STACK[0x2C20] + STACK[0x2B90];
  v64 = __CFADD__(STACK[0x2C20], STACK[0x2B90]);
  if (v13)
    v65 = 9;
  else
    v65 = 0;
  v66 = STACK[0x2C30] + STACK[0x2BA0];
  v67 = __CFADD__(STACK[0x2C30], STACK[0x2BA0]);
  v68 = STACK[0x2B58] + STACK[0x2C60];
  v69 = __CFADD__(STACK[0x2B58], STACK[0x2C60]);
  v70 = v59 > 0xFFFFFFFFFFFFFFD2 || v60;
  if (v9)
    v71 = 17;
  else
    v71 = 0;
  if (v11)
    v72 = 15;
  else
    v72 = 0;
  if (v68 > 0xFFFFFFFFFFFFFFDELL)
    v69 = 1;
  STACK[0x3918] = v65 + v12;
  STACK[0x3910] = v71 + v8;
  if (v70)
    v73 = 45;
  else
    v73 = 0;
  STACK[0x3908] = v73 + v59;
  STACK[0x3900] = v72 + v10;
  v74 = STACK[0x2B30] + STACK[0x2C70];
  v75 = __CFADD__(STACK[0x2B30], STACK[0x2C70]);
  if (v63 > 0xFFFFFFFFFFFFFFD0)
    v64 = 1;
  v76 = v66 > 0xFFFFFFFFFFFFFFD8 || v67;
  if (v74 > 0xFFFFFFFFFFFFFFCALL)
    v75 = 1;
  if (v76)
    v77 = 39;
  else
    v77 = 0;
  STACK[0x38F8] = v77 + v66;
  if (v69)
    v78 = 33;
  else
    v78 = 0;
  STACK[0x38F0] = v78 + v68;
  if (v64)
    v79 = 47;
  else
    v79 = 0;
  if (v75)
    v80 = 53;
  else
    v80 = 0;
  STACK[0x38E8] = v80 + v74;
  STACK[0x38E0] = v79 + v63;
  v81 = STACK[0x2D30] + STACK[0x2E20];
  v82 = __CFADD__(STACK[0x2D30], STACK[0x2E20]);
  v83 = STACK[0x2D80] + STACK[0x2E28];
  LODWORD(v84) = __CFADD__(STACK[0x2D80], STACK[0x2E28]);
  v85 = STACK[0x2D50] + STACK[0x2E08];
  v86 = __CFADD__(STACK[0x2D50], STACK[0x2E08]);
  if (v83 == -1)
    v84 = 1;
  else
    v84 = v84;
  STACK[0x38D8] = v84 + v83;
  v87 = STACK[0x2D68] + STACK[0x2E10];
  v88 = __CFADD__(STACK[0x2D68], STACK[0x2E10]);
  v89 = STACK[0x2D78] + STACK[0x2DF0];
  v90 = __CFADD__(STACK[0x2D78], STACK[0x2DF0]);
  v91 = STACK[0x2D48] + STACK[0x2E38];
  v92 = __CFADD__(STACK[0x2D48], STACK[0x2E38]);
  if (v81 > 0xFFFFFFFFFFFFFFFALL)
    v82 = 1;
  if (v85 > 0xFFFFFFFFFFFFFFF6)
    v86 = 1;
  v93 = STACK[0x2D58] + STACK[0x2E00];
  v94 = __CFADD__(STACK[0x2D58], STACK[0x2E00]);
  if (v91 > 0xFFFFFFFFFFFFFFFCLL)
    v92 = 1;
  v95 = STACK[0x2D70] + STACK[0x2E40];
  v96 = __CFADD__(STACK[0x2D70], STACK[0x2E40]);
  if (v82)
    v97 = 5;
  else
    v97 = 0;
  if (v86)
    v98 = 9;
  else
    v98 = 0;
  if (v89 > 0xFFFFFFFFFFFFFFF0)
    v90 = 1;
  if (v92)
    v99 = 3;
  else
    v99 = 0;
  if (v93 > 0xFFFFFFFFFFFFFFEELL)
    v94 = 1;
  if (v95 > 0xFFFFFFFFFFFFFFD8)
    v96 = 1;
  STACK[0x38D0] = v97 + v81;
  STACK[0x38C8] = v99 + v91;
  STACK[0x38C0] = v98 + v85;
  if (v94)
    v100 = 17;
  else
    v100 = 0;
  v101 = v87 > 0xFFFFFFFFFFFFFFD2 || v88;
  if (v90)
    v102 = 15;
  else
    v102 = 0;
  if (v96)
    v103 = 39;
  else
    v103 = 0;
  STACK[0x38B8] = v100 + v93;
  if (v7)
    v104 = 33;
  else
    v104 = 0;
  STACK[0x38B0] = v104 + v6;
  STACK[0x38A8] = v102 + v89;
  if (LODWORD(STACK[0x3C00]))
    v105 = 47;
  else
    v105 = 0;
  v43 = LODWORD(STACK[0x3C38]) == 0;
  STACK[0x38A0] = v103 + v95;
  STACK[0x3898] = v105 + STACK[0x3C30];
  if (v43)
    v106 = 0;
  else
    v106 = 53;
  STACK[0x3890] = v106 + STACK[0x3C78];
  if (v101)
    v107 = 45;
  else
    v107 = 0;
  STACK[0x3880] = v107 + v87;
  STACK[0x3C30] = STACK[0x3C68];
  v108 = STACK[0x31B0];
  v109 = STACK[0x31B8];
  v110 = STACK[0x31C0];
  v111 = STACK[0x31C8];
  STACK[0x3C38] = STACK[0x3C60];
  v112 = STACK[0x31D0];
  v113 = STACK[0x31D8];
  v114 = STACK[0x31E0];
  v115 = STACK[0x31E8];
  v116 = (char)LODWORD(STACK[0x3834]);
  LODWORD(STACK[0x3878]) = v116;
  STACK[0x3C78] = *(_QWORD *)(STACK[0x3C70] + 8 * (v16 - 10687)) - 8;
  STACK[0x3C00] = v17;
  STACK[0x3240] = STACK[0x3888];
  STACK[0x3BD0] = STACK[0x36C8];
  STACK[0x3348] = STACK[0x3810];
  STACK[0x3248] = STACK[0x3988];
  STACK[0x3B90] = STACK[0x3A28];
  STACK[0x39E0] = STACK[0x3688];
  STACK[0x3258] = STACK[0x3AB8];
  STACK[0x3828] = STACK[0x37F8];
  STACK[0x3B80] = STACK[0x3A68];
  STACK[0x3368] = STACK[0x3980];
  STACK[0x3268] = STACK[0x3A20];
  STACK[0x3B88] = STACK[0x3A48];
  STACK[0x3270] = STACK[0x3A60];
  STACK[0x3BC8] = STACK[0x3808];
  STACK[0x3208] = STACK[0x3A50];
  STACK[0x39E8] = STACK[0x3680];
  STACK[0x31F8] = STACK[0x3AB0];
  STACK[0x3350] = STACK[0x3A18];
  STACK[0x3300] = STACK[0x39B0];
  STACK[0x39D8] = STACK[0x3668];
  STACK[0x32F8] = STACK[0x3978];
  STACK[0x3370] = STACK[0x37F0];
  STACK[0x39F8] = STACK[0x3678];
  STACK[0x3860] = STACK[0x3670];
  STACK[0x3358] = STACK[0x3960];
  STACK[0x3B98] = STACK[0x3A38];
  STACK[0x3200] = STACK[0x3AA8];
  STACK[0x3308] = STACK[0x3970];
  STACK[0x3838] = STACK[0x3660];
  STACK[0x39D0] = STACK[0x3658];
  STACK[0x3840] = STACK[0x3650];
  STACK[0x39C8] = STACK[0x3640];
  STACK[0x3BA8] = STACK[0x3648];
  STACK[0x3848] = STACK[0x3638];
  STACK[0x3210] = STACK[0x39A8];
  STACK[0x3A00] = STACK[0x3630];
  STACK[0x3BD8] = STACK[0x3AA0];
  STACK[0x3218] = STACK[0x3A40];
  STACK[0x3A10] = STACK[0x3628];
  STACK[0x32E8] = STACK[0x3958];
  STACK[0x3220] = STACK[0x3A30];
  STACK[0x3868] = STACK[0x3618];
  STACK[0x39F0] = STACK[0x3610];
  STACK[0x32F0] = STACK[0x3968];
  STACK[0x3850] = STACK[0x3620];
  STACK[0x3858] = STACK[0x3608];
  STACK[0x3870] = STACK[0x3600];
  STACK[0x3A08] = STACK[0x35F8];
  STACK[0x3340] = STACK[0x37E8];
  STACK[0x3228] = STACK[0x39A0];
  STACK[0x3230] = STACK[0x3948];
  STACK[0x3238] = STACK[0x3998];
  STACK[0x32E0] = STACK[0x3950];
  STACK[0x3AD0] = STACK[0x35F0];
  STACK[0x3AD8] = STACK[0x35E8];
  STACK[0x3AE0] = STACK[0x35E0];
  STACK[0x3AE8] = STACK[0x35D8];
  STACK[0x3250] = STACK[0x39B8];
  STACK[0x3260] = STACK[0x3940];
  STACK[0x3278] = STACK[0x3990];
  STACK[0x3AF0] = STACK[0x35D0];
  STACK[0x3280] = STACK[0x3A58];
  STACK[0x3AF8] = STACK[0x35C8];
  STACK[0x3B08] = STACK[0x35C0];
  STACK[0x3B00] = STACK[0x35B8];
  STACK[0x3B10] = STACK[0x35B0];
  STACK[0x3B18] = STACK[0x35A8];
  STACK[0x3288] = STACK[0x37E0];
  STACK[0x3B20] = STACK[0x35A0];
  STACK[0x3B30] = STACK[0x3598];
  STACK[0x3B28] = STACK[0x3588];
  STACK[0x3378] = STACK[0x3818];
  STACK[0x3B38] = STACK[0x3580];
  if (v116 < 0)
    v117 = STACK[0x2CE8];
  else
    v117 = STACK[0x2D18];
  v118 = STACK[0x2DD0];
  STACK[0x3C60] = v115;
  if (v116 < 0)
    v115 = v118;
  STACK[0x3318] = v114;
  if (v116 < 0)
    v119 = STACK[0x2DC0];
  else
    v119 = STACK[0x2C80];
  STACK[0x3C68] = v110;
  if (v116 < 0)
    v120 = STACK[0x2D28];
  else
    v120 = STACK[0x2C98];
  v121 = STACK[0x2DE8];
  STACK[0x3320] = v113;
  if (v116 < 0)
    v122 = v121;
  else
    v122 = v113;
  STACK[0x3330] = v112;
  v123 = STACK[0x2DA8];
  STACK[0x3310] = v111;
  if (v116 < 0)
    v111 = v123;
  v124 = STACK[0x2D98];
  STACK[0x3328] = v109;
  if (v116 < 0)
    v125 = v124;
  else
    v125 = v109;
  STACK[0x3338] = v108;
  if (v116 < 0)
    v126 = STACK[0x2CC0];
  else
    v126 = STACK[0x2C90];
  return ((uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))STACK[0x3C78])(v111, v125, v120, v115, v119, v126, v117, v122);
}

uint64_t sub_1006A093C@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, unint64_t a9@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t (*v24)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t);

  STACK[0x37D8] = v10;
  STACK[0x3A30] = v23;
  LODWORD(STACK[0x37E0]) = v22;
  STACK[0x3888] = a6;
  STACK[0x3940] = v15;
  STACK[0x3948] = a2;
  STACK[0x3950] = a1;
  STACK[0x3958] = v16;
  STACK[0x3960] = v9;
  STACK[0x3968] = v21;
  STACK[0x3970] = v12;
  STACK[0x3978] = a8;
  STACK[0x3980] = a3;
  STACK[0x3988] = a9;
  STACK[0x3990] = a5;
  STACK[0x3998] = v20;
  STACK[0x39A0] = v18;
  STACK[0x39A8] = a4;
  STACK[0x39B0] = a7;
  STACK[0x39B8] = v13;
  STACK[0x3A18] = v19;
  STACK[0x3A20] = v17;
  STACK[0x3A28] = v11;
  STACK[0x3128] = v14;
  v24 = (uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))(3142338077 - (STACK[0x3C00] - 1152638082) + *(_QWORD *)(STACK[0x3C70] + 8 * (int)STACK[0x3C00]));
  STACK[0x28D8] = STACK[0x3BD0];
  STACK[0x28E0] = STACK[0x3348];
  STACK[0x2800] = STACK[0x2FE8];
  STACK[0x2808] = STACK[0x2FE0];
  STACK[0x28E8] = STACK[0x3828];
  STACK[0x2810] = STACK[0x2FC8];
  STACK[0x28B0] = STACK[0x2FD8];
  STACK[0x2AE0] = STACK[0x2FF0];
  STACK[0x2AA8] = STACK[0x2FC0];
  STACK[0x28F0] = STACK[0x2FB0];
  STACK[0x2A10] = STACK[0x3BC8];
  STACK[0x28B8] = STACK[0x2FA8];
  STACK[0x2910] = STACK[0x2FA0];
  STACK[0x2AE8] = STACK[0x2FB8];
  STACK[0x28F8] = STACK[0x2FD0];
  STACK[0x2918] = STACK[0x2F90];
  STACK[0x2AF0] = STACK[0x3370];
  STACK[0x2818] = STACK[0x2F88];
  STACK[0x2820] = STACK[0x2F78];
  STACK[0x2A18] = STACK[0x2F98];
  STACK[0x2920] = STACK[0x2F80];
  STACK[0x2828] = STACK[0x2F70];
  STACK[0x2900] = STACK[0x2F68];
  STACK[0x2A20] = STACK[0x30E0];
  STACK[0x2928] = STACK[0x2F50];
  STACK[0x2930] = STACK[0x2F48];
  STACK[0x28C0] = STACK[0x2F40];
  STACK[0x2830] = STACK[0x2F38];
  STACK[0x2A28] = STACK[0x2F58];
  STACK[0x2AB0] = STACK[0x2F30];
  STACK[0x2838] = STACK[0x2F28];
  STACK[0x2840] = STACK[0x2F20];
  STACK[0x2938] = STACK[0x3C38];
  STACK[0x2AF8] = STACK[0x3340];
  STACK[0x2A30] = STACK[0x30D0];
  STACK[0x2AB8] = STACK[0x2F10];
  STACK[0x2848] = STACK[0x2F08];
  STACK[0x2850] = STACK[0x2F18];
  STACK[0x2AC0] = STACK[0x2F00];
  STACK[0x2858] = STACK[0x2EF8];
  STACK[0x2860] = STACK[0x2EE8];
  STACK[0x2868] = STACK[0x2EF0];
  STACK[0x2940] = STACK[0x2ED8];
  STACK[0x2AC8] = STACK[0x2EE0];
  STACK[0x2A38] = STACK[0x2ED0];
  STACK[0x2870] = STACK[0x2EC0];
  STACK[0x2878] = STACK[0x2EB8];
  STACK[0x2908] = STACK[0x2EC8];
  STACK[0x28C8] = STACK[0x2EB0];
  STACK[0x2948] = STACK[0x2EA8];
  STACK[0x2880] = STACK[0x2EA0];
  STACK[0x2B00] = STACK[0x2E98];
  STACK[0x2B08] = STACK[0x30E8];
  LODWORD(STACK[0x27FC]) = STACK[0x2F64];
  STACK[0x28D0] = STACK[0x2E90];
  STACK[0x2A40] = STACK[0x30D8];
  STACK[0x2AD0] = STACK[0x2E88];
  STACK[0x2888] = STACK[0x2E78];
  STACK[0x2950] = STACK[0x3C30];
  STACK[0x2890] = STACK[0x2E70];
  STACK[0x2898] = STACK[0x2E68];
  STACK[0x2A48] = STACK[0x3378];
  STACK[0x2AD8] = STACK[0x2E60];
  STACK[0x28A0] = STACK[0x2E58];
  STACK[0x2B10] = STACK[0x2E80];
  STACK[0x2958] = STACK[0x2E50];
  STACK[0x28A8] = STACK[0x2E48];
  return v24(STACK[0x3AF8], STACK[0x3AF0], STACK[0x3B20], STACK[0x3B38], STACK[0x3B18], STACK[0x3B30], STACK[0x3B28], STACK[0x3B00]);
}

uint64_t sub_1006A0C28@<X0>(unsigned int a1@<W8>)
{
  uint64_t v1;
  unint64_t v2;

  STACK[0x3800] = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)((a1 + 1152625867 + ((a1 + 1152629288) | 0x3C00)) ^ (29006
                                                                                                  * (a1 < 0xB5A262C0))))
                            - 8))();
}

uint64_t sub_1006A0C6C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void);

  v16 = (uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (int)(v8 + 2579)) - (v8 ^ 0x3C45));
  STACK[0x3B38] = a4;
  STACK[0x3B30] = a6;
  STACK[0x3B28] = a7;
  STACK[0x3B20] = a3;
  STACK[0x3B18] = a5;
  STACK[0x3B10] = v15;
  STACK[0x3B08] = v14;
  STACK[0x3B00] = a8;
  STACK[0x3AF8] = a1;
  STACK[0x3AF0] = a2;
  STACK[0x3AE8] = v10;
  STACK[0x3AE0] = v11;
  STACK[0x3AD8] = v12;
  STACK[0x3AD0] = v13;
  return v16();
}

uint64_t sub_1006A0CD8()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * v0) - ((11 * (v0 ^ 0x223Fu)) ^ 0x3C41)))();
}

uint64_t sub_1006A0CFC()
{
  unint64_t v0;
  unint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  unint64_t v15;
  _BOOL4 v16;
  _BOOL8 v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  _BOOL4 v21;
  unint64_t v22;
  _BOOL4 v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  _BOOL4 v27;
  int v28;
  unint64_t v29;
  _BOOL4 v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  LODWORD(STACK[0x3C08]) = v2;
  STACK[0x3C20] = v1;
  STACK[0x3820] = v0;
  STACK[0x3C28] = v5;
  v11 = STACK[0x2328] + STACK[0x22C8] > 0xFFFFFFFFFFFFFFD0;
  v12 = STACK[0x2328] + STACK[0x22C8];
  if (__CFADD__(STACK[0x2328], STACK[0x22C8]))
    v11 = 1;
  v13 = STACK[0x2320] + STACK[0x22D0];
  v14 = __CFADD__(STACK[0x2320], STACK[0x22D0]) || STACK[0x2320] + STACK[0x22D0] > 0xFFFFFFFFFFFFFFDELL;
  v15 = STACK[0x2310] + STACK[0x22D8];
  v16 = __CFADD__(STACK[0x2310], STACK[0x22D8]) || STACK[0x2310] + STACK[0x22D8] > 0xFFFFFFFFFFFFFFF6;
  v17 = __CFADD__(STACK[0x22E8], STACK[0x2290]) || STACK[0x22E8] + STACK[0x2290] == -1;
  v18 = STACK[0x2330] + STACK[0x2298];
  v19 = __CFADD__(STACK[0x2330], STACK[0x2298]);
  v20 = STACK[0x22F8] + STACK[0x22B0];
  v21 = __CFADD__(STACK[0x22F8], STACK[0x22B0]);
  v22 = STACK[0x22F0] + STACK[0x22B8];
  v23 = __CFADD__(STACK[0x22F0], STACK[0x22B8]);
  v24 = STACK[0x22E0] + STACK[0x2288];
  v25 = __CFADD__(STACK[0x22E0], STACK[0x2288]);
  v26 = STACK[0x2318] + STACK[0x22C0];
  v27 = __CFADD__(STACK[0x2318], STACK[0x22C0]);
  if (v22 > 0xFFFFFFFFFFFFFFFALL)
    v23 = 1;
  STACK[0x3AB8] = v17 + STACK[0x22E8] + STACK[0x2290];
  v28 = v18 > 0xFFFFFFFFFFFFFFFCLL || v19;
  v29 = STACK[0x2300] + STACK[0x22A8];
  v30 = __CFADD__(STACK[0x2300], STACK[0x22A8]);
  v31 = !v16;
  v32 = 9;
  if (v31)
    v32 = 0;
  v33 = STACK[0x2308] + STACK[0x22A0];
  v34 = __CFADD__(STACK[0x2308], STACK[0x22A0]);
  if (v26 > 0xFFFFFFFFFFFFFFF0)
    v27 = 1;
  v31 = v28 == 0;
  v35 = 3;
  if (v31)
    v35 = 0;
  STACK[0x3AB0] = v32 + v15;
  STACK[0x3AA8] = v35 + v18;
  v36 = 5;
  if (!v23)
    v36 = 0;
  v37 = v33 > 0xFFFFFFFFFFFFFFEELL || v34;
  if (v27)
    v38 = v9;
  else
    v38 = 0;
  v39 = v20 > 0xFFFFFFFFFFFFFFD8 || v21;
  if (v14)
    v40 = 33;
  else
    v40 = 0;
  STACK[0x3AA0] = v40 + v13;
  STACK[0x3A68] = v36 + v22;
  v41 = v24 > 0xFFFFFFFFFFFFFFD2 || v25;
  if (v37)
    v42 = v10;
  else
    v42 = 0;
  if (v39)
    v43 = v6;
  else
    v43 = 0;
  STACK[0x3A60] = v43 + v20;
  STACK[0x3A58] = v38 + v26;
  STACK[0x3A50] = v42 + v33;
  if (v29 > 0xFFFFFFFFFFFFFFCALL || v30)
    v45 = v7;
  else
    v45 = 0;
  if (v11)
    v46 = v8;
  else
    v46 = 0;
  STACK[0x3A48] = v46 + v12;
  if (v41)
    v47 = v4;
  else
    v47 = 0;
  STACK[0x3A40] = v47 + v24;
  STACK[0x3A38] = v45 + v29;
  return ((uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)(STACK[0x3C70] + 8 * (v3 + 3333)) - 8))(STACK[0x3108], STACK[0x3178], STACK[0x3100], STACK[0x3160], STACK[0x3118], STACK[0x3158], STACK[0x30F0], 3);
}

uint64_t sub_1006A0F34(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BOOL4 v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(unint64_t);
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _BOOL4 v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  _BOOL4 v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _BOOL4 v196;
  uint64_t v197;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  _BOOL4 v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _BOOL4 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  _BOOL4 v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  _BOOL4 v241;
  unint64_t v242;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  _BOOL4 v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  int v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _BOOL4 v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _BOOL4 v278;
  uint64_t v279;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  int v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  BOOL v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  int v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  int v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  int v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  int v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  int v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  int v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  _BOOL4 v365;
  unint64_t v366;
  int v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  _BOOL4 v374;
  uint64_t v375;
  int v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  _BOOL4 v383;
  uint64_t v384;
  int v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  int v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  int v405;
  unint64_t v406;
  unint64_t v407;
  _BOOL4 v408;
  unint64_t v409;
  int v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  int v422;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  _BOOL4 v428;
  unint64_t v429;
  int v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  _BOOL4 v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _BOOL4 v444;
  uint64_t v445;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  int v458;
  unint64_t v459;
  unint64_t v460;
  _BOOL4 v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  _BOOL4 v471;
  uint64_t v472;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  int v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  _BOOL4 v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  _BOOL4 v500;
  uint64_t v501;
  int v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  _BOOL4 v509;
  uint64_t v510;
  int v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  _BOOL4 v518;
  uint64_t v519;
  int v520;
  unint64_t v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unint64_t v527;
  int v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t v534;
  _BOOL4 v535;
  uint64_t v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  unint64_t v542;
  int v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  int v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _BOOL4 v558;
  uint64_t v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  _BOOL4 v567;
  unint64_t v568;
  unint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  int v581;
  unint64_t v582;
  unint64_t v583;
  _BOOL4 v584;
  unint64_t v585;
  unint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  _BOOL4 v594;
  uint64_t v595;
  unint64_t v597;
  unint64_t v598;
  uint64_t v599;
  unint64_t v600;
  uint64_t v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  int v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  uint64_t v611;
  unint64_t v612;
  unint64_t v613;
  unint64_t v614;
  unint64_t v615;
  int v616;
  unint64_t v617;
  unint64_t v618;
  unint64_t v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  unint64_t v623;
  _BOOL4 v624;
  unint64_t v625;
  unint64_t v626;
  uint64_t v627;
  unint64_t v628;
  unint64_t v629;
  unint64_t v630;
  _BOOL4 v631;
  unint64_t v632;
  unint64_t v633;
  unint64_t v634;
  uint64_t v635;
  unint64_t v636;
  unint64_t v637;
  unint64_t v638;
  _BOOL4 v639;
  unint64_t v640;
  unint64_t v641;
  unint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  unint64_t v648;
  int v649;
  unint64_t v650;
  unint64_t v651;
  unint64_t v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  int v664;
  unint64_t v665;
  unint64_t v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unint64_t v671;
  int v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  unint64_t v676;
  unint64_t v677;
  int v678;
  unint64_t v679;
  unint64_t v680;
  unint64_t v681;
  BOOL v682;
  unint64_t v683;
  uint64_t v684;
  unint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  unint64_t v689;
  unint64_t v690;
  int v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  int v696;
  unint64_t v697;
  int v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  int v702;
  unint64_t v703;
  unint64_t v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  int v713;
  unint64_t v714;
  unint64_t v715;
  unint64_t v716;
  int v717;
  unint64_t v718;
  unint64_t v719;
  uint64_t v720;
  unint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  unint64_t v727;
  int v728;
  unint64_t v729;
  unint64_t v730;
  unint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  _BOOL4 v737;
  unint64_t v738;
  unint64_t v740;
  unint64_t v741;
  unint64_t v742;
  unint64_t v743;
  uint64_t v744;
  unint64_t v745;
  unint64_t v746;
  unint64_t v747;
  unint64_t v748;
  int v749;
  unint64_t v750;
  unint64_t v751;
  unint64_t v752;
  unint64_t v753;
  unint64_t v754;
  int v755;
  unint64_t v756;
  unint64_t v757;
  unint64_t v758;
  unint64_t v759;
  _BOOL4 v760;
  unint64_t v761;
  unint64_t v762;
  unint64_t v763;
  uint64_t v764;
  unint64_t v765;
  unint64_t v766;
  unint64_t v767;
  _BOOL4 v768;
  unint64_t v769;
  int v770;
  unint64_t v771;
  unint64_t v772;
  uint64_t v773;
  unint64_t v774;
  unint64_t v775;
  unint64_t v776;
  _BOOL4 v777;
  unint64_t v778;
  int v779;
  unint64_t v780;
  unint64_t v781;
  uint64_t v782;
  uint64_t v783;
  unint64_t v784;
  unint64_t v785;
  uint64_t v786;
  unint64_t v787;
  unint64_t v788;
  unint64_t v789;
  unint64_t v790;
  uint64_t v791;
  int v792;
  unint64_t v793;
  unint64_t v794;
  unint64_t v795;
  unint64_t v796;
  unint64_t v797;
  unint64_t v798;
  int v799;
  unint64_t v800;
  unint64_t v801;
  unint64_t v802;
  unint64_t v803;
  _BOOL4 v804;
  unint64_t v805;
  int v806;
  unint64_t v807;
  unint64_t v808;
  uint64_t v809;
  unint64_t v810;
  unint64_t v811;
  unint64_t v812;
  unint64_t v813;
  int v814;
  unint64_t v815;
  unint64_t v816;
  unint64_t v817;
  unint64_t v818;
  unint64_t v820;
  unint64_t v821;
  unint64_t v822;
  unint64_t v823;
  unint64_t v824;
  int v825;
  unint64_t v826;
  unint64_t v827;
  unint64_t v828;
  unint64_t v829;
  _BOOL4 v830;
  unint64_t v831;
  unint64_t v832;
  unint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  int v840;
  unint64_t v841;
  unint64_t v842;
  unint64_t v843;
  unint64_t v844;
  unint64_t v845;
  unint64_t v846;
  uint64_t v847;
  uint64_t v848;
  unint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  int v853;
  unint64_t v854;
  unint64_t v855;
  unint64_t v856;
  int v857;
  unint64_t v858;
  unint64_t v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  _BOOL4 v867;
  uint64_t v868;
  unint64_t v870;
  unint64_t v871;
  uint64_t v872;
  unint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  _BOOL4 v880;
  unint64_t v881;
  unint64_t v882;
  uint64_t v883;
  unint64_t v884;
  unint64_t v885;
  unint64_t v886;
  _BOOL4 v887;
  unint64_t v888;
  unint64_t v889;
  unint64_t v890;
  uint64_t v891;
  unint64_t v892;
  unint64_t v893;
  unint64_t v894;
  _BOOL4 v895;
  unint64_t v896;
  int v897;
  unint64_t v898;
  unint64_t v899;
  uint64_t v900;
  unint64_t v901;
  unint64_t v902;
  unint64_t v903;
  _BOOL4 v904;
  unint64_t v905;
  int v906;
  unint64_t v907;
  unint64_t v908;
  uint64_t v909;
  unint64_t v910;
  unint64_t v911;
  unint64_t v912;
  unint64_t v913;
  int v914;
  unint64_t v915;
  unint64_t v916;
  unint64_t v917;
  unint64_t v918;
  unint64_t v919;
  unint64_t v920;
  _BOOL4 v921;
  unint64_t v922;
  int v923;
  unint64_t v924;
  unint64_t v925;
  uint64_t v926;
  unint64_t v927;
  unint64_t v928;
  unint64_t v929;
  unint64_t v930;
  unint64_t v931;
  int v932;
  unint64_t v933;
  unint64_t v934;
  unint64_t v935;
  unint64_t v937;
  unint64_t v938;
  unint64_t v939;
  unint64_t v940;
  _BOOL4 v941;
  unint64_t v942;
  unint64_t v943;
  unint64_t v944;
  uint64_t v945;
  uint64_t v946;
  unint64_t v947;
  uint64_t v948;
  uint64_t v949;
  _BOOL4 v950;
  unint64_t v951;
  unint64_t v953;
  unint64_t v954;
  unint64_t v955;
  unint64_t v956;
  unint64_t v957;
  unint64_t v958;
  unint64_t v959;
  int v960;
  unint64_t v961;
  unint64_t v962;
  unint64_t v963;
  unint64_t v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  unint64_t v970;
  int v971;
  unint64_t v972;
  unint64_t v973;
  _BOOL4 v974;
  unint64_t v975;
  unint64_t v976;
  unint64_t v977;
  uint64_t v978;
  unint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  unint64_t v985;
  int v986;
  unint64_t v987;
  unint64_t v988;
  unint64_t v989;
  unint64_t v990;
  unint64_t v991;
  unint64_t v992;
  uint64_t v993;
  unint64_t v994;
  unint64_t v995;
  unint64_t v996;
  unint64_t v997;
  unint64_t v998;
  unint64_t v999;
  int v1000;
  unint64_t v1001;
  unint64_t v1002;
  unint64_t v1003;
  int v1004;
  unint64_t v1005;
  unint64_t v1006;
  unint64_t v1007;
  uint64_t v1008;
  unint64_t v1009;
  unint64_t v1010;
  unint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  _BOOL4 v1017;
  unint64_t v1018;
  unint64_t v1020;
  unint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  uint64_t v1024;
  unint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  _BOOL4 v1030;
  uint64_t v1031;
  unint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  _BOOL4 v1039;
  uint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  _BOOL4 v1049;
  unint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  _BOOL4 v1053;
  uint64_t v1054;
  unint64_t v1055;
  unint64_t v1056;
  unint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  unint64_t v1061;
  _BOOL4 v1062;
  uint64_t v1063;
  unint64_t v1064;
  unint64_t v1065;
  unint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  _BOOL4 v1071;
  uint64_t v1072;
  int v1073;
  unint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  _BOOL4 v1080;
  uint64_t v1081;
  int v1082;
  uint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  unint64_t v1089;
  int v1090;
  uint64_t v1091;
  unint64_t v1092;
  uint64_t v1093;
  unint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  _BOOL4 v1097;
  uint64_t v1098;
  uint64_t v1099;
  unint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  unint64_t v1105;
  int v1106;
  uint64_t v1107;
  uint64_t v1108;
  int v1109;
  uint64_t v1110;
  unint64_t v1111;
  unint64_t v1112;
  int v1113;
  uint64_t v1114;
  uint64_t v1115;
  unint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  int v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  unint64_t v1123;
  uint64_t v1124;
  _BOOL4 v1125;
  uint64_t v1126;
  unint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  _BOOL4 v1132;
  uint64_t v1133;
  uint64_t v1134;
  unint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  _BOOL4 v1140;
  uint64_t v1141;
  int v1142;
  uint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  _BOOL4 v1149;
  uint64_t v1150;
  int v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  unint64_t v1158;
  int v1159;
  uint64_t v1160;
  uint64_t v1161;
  unint64_t v1162;
  unint64_t v1163;
  uint64_t v1164;
  unint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  unint64_t v1168;
  unint64_t v1169;
  uint64_t v1170;
  int v1171;
  uint64_t v1172;
  uint64_t v1173;
  unint64_t v1174;
  int v1175;
  uint64_t v1176;
  unint64_t v1177;
  int v1178;
  uint64_t v1179;
  unint64_t v1180;
  _BOOL4 v1181;
  unint64_t v1182;
  uint64_t v1184;
  uint64_t v1185;
  unint64_t v1186;
  uint64_t v1187;
  unint64_t v1188;
  int v1189;
  uint64_t v1190;
  unint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  _BOOL4 v1195;
  uint64_t v1196;
  unint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  _BOOL4 v1202;
  uint64_t v1203;
  int v1204;
  unint64_t v1205;
  uint64_t v1206;
  unint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  _BOOL4 v1212;
  uint64_t v1213;
  int v1214;
  uint64_t v1215;
  unint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  _BOOL4 v1221;
  uint64_t v1222;
  uint64_t v1224;
  unint64_t v1225;
  uint64_t v1226;
  unint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  unint64_t v1230;
  int v1231;
  uint64_t v1232;
  unint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  _BOOL4 v1236;
  uint64_t v1237;
  uint64_t v1238;
  unint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  unint64_t v1244;
  int v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  unint64_t v1249;
  _BOOL4 v1250;
  uint64_t v1251;
  int v1252;
  uint64_t v1253;
  unint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  _BOOL4 v1260;
  uint64_t v1261;
  unint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  _BOOL4 v1267;
  uint64_t v1268;
  int v1269;
  uint64_t v1270;
  unint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  _BOOL4 v1276;
  uint64_t v1277;
  uint64_t v1278;
  unint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  unint64_t v1285;
  int v1286;
  BOOL v1287;
  unint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  unint64_t v1294;
  unint64_t v1295;
  int v1296;
  uint64_t v1297;
  unint64_t v1298;
  uint64_t v1299;
  unint64_t v1300;
  _BOOL4 v1301;
  unint64_t v1302;
  uint64_t v1304;
  unint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  unint64_t v1308;
  int v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  _BOOL4 v1314;
  uint64_t v1315;
  unint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  _BOOL4 v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  _BOOL4 v1325;
  uint64_t v1326;
  uint64_t v1327;
  unint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  _BOOL4 v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  _BOOL4 v1337;
  uint64_t v1338;
  uint64_t v1339;
  unint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  _BOOL4 v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  _BOOL4 v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  _BOOL4 v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  unint64_t v1359;
  uint64_t v1360;
  unint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  unint64_t v1367;
  int v1368;
  uint64_t v1369;
  unint64_t v1370;
  uint64_t v1371;
  unint64_t v1372;
  int v1373;
  uint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  unint64_t v1380;
  int v1381;
  uint64_t v1382;
  unint64_t v1383;
  uint64_t v1384;
  unint64_t v1385;
  uint64_t v1386;
  unint64_t v1387;
  uint64_t v1388;
  unint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  unint64_t v1393;
  int v1394;
  uint64_t v1395;
  unint64_t v1396;
  unint64_t v1397;
  uint64_t v1398;
  unint64_t v1399;
  uint64_t v1400;
  unint64_t v1401;
  unint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  unint64_t v1405;
  unint64_t v1406;
  unint64_t v1407;
  uint64_t v1408;
  unint64_t v1409;
  uint64_t v1410;
  unint64_t v1411;
  unint64_t v1412;
  uint64_t v1413;
  unint64_t v1414;
  unint64_t v1415;
  uint64_t v1416;
  unint64_t v1417;
  int v1418;
  uint64_t v1419;
  unint64_t v1420;
  uint64_t v1421;
  unint64_t v1422;
  uint64_t v1423;
  unint64_t v1424;
  uint64_t v1425;
  unint64_t v1426;
  uint64_t v1427;
  unint64_t v1428;
  uint64_t v1429;
  unint64_t v1430;
  uint64_t v1431;
  unint64_t v1432;
  uint64_t v1433;
  unint64_t v1434;
  uint64_t v1435;
  unint64_t v1436;
  uint64_t v1437;
  uint64_t (*v1438)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t v1439;
  unint64_t v1440;
  unint64_t v1441;
  unint64_t v1442;
  unint64_t v1443;
  unint64_t v1444;
  uint64_t (*v1446)(uint64_t);
  uint64_t v1447;
  int v1448;
  unint64_t v1449;
  uint64_t v1450;
  unint64_t v1451;
  uint64_t v1452;
  unint64_t v1453;
  uint64_t v1454;
  unint64_t v1455;
  uint64_t v1456;
  unint64_t v1457;
  uint64_t v1458;
  unint64_t v1459;
  uint64_t v1460;
  unint64_t v1461;
  uint64_t v1462;
  unint64_t v1463;
  uint64_t v1464;
  unint64_t v1465;
  uint64_t v1466;
  unint64_t v1467;
  uint64_t v1468;
  uint64_t (*v1469)(void);
  unint64_t v1470;
  _BOOL4 v1471;
  unint64_t v1472;
  _BOOL4 v1473;
  unint64_t v1474;
  _BOOL4 v1475;
  _BOOL4 v1476;
  unint64_t v1477;
  unint64_t v1478;
  _BOOL4 v1479;
  unint64_t v1480;
  int v1481;
  unint64_t v1482;
  _BOOL4 v1483;
  int v1484;
  unint64_t v1485;
  uint64_t v1486;
  unint64_t v1487;
  _BOOL4 v1488;
  unint64_t v1489;
  _BOOL4 v1490;
  unint64_t v1491;
  _BOOL4 v1492;
  uint64_t v1493;
  unint64_t v1494;
  _BOOL4 v1495;
  uint64_t v1496;
  uint64_t v1497;
  unint64_t v1498;
  uint64_t v1499;
  unint64_t v1500;
  int v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  unint64_t v1505;
  unint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  unint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  int v1513;
  unint64_t v1514;
  unint64_t v1515;
  unint64_t v1516;
  unint64_t v1517;
  unint64_t v1518;
  unint64_t v1519;
  unint64_t v1520;
  unint64_t v1521;
  unint64_t v1522;
  unint64_t v1523;
  unint64_t v1524;
  unint64_t v1525;
  unint64_t v1526;
  unint64_t v1527;
  unint64_t v1528;
  unint64_t v1529;
  unint64_t v1530;
  unint64_t v1531;
  unint64_t v1532;
  unint64_t v1533;
  unint64_t v1534;
  unint64_t v1535;
  unint64_t v1536;
  unint64_t v1537;
  unint64_t v1538;
  unint64_t v1539;
  unint64_t v1540;
  unint64_t v1541;
  unint64_t v1542;
  unint64_t v1543;
  unint64_t v1544;
  unint64_t v1545;
  unint64_t v1546;
  unint64_t v1547;
  unint64_t v1548;
  unint64_t v1549;
  unint64_t v1550;
  unint64_t v1551;
  unint64_t v1552;
  uint64_t (*v1553)(void);
  unint64_t v1554;
  unint64_t v1555;
  unint64_t v1556;
  unint64_t v1557;
  unint64_t v1558;
  unint64_t v1559;
  unint64_t v1560;
  unint64_t v1561;
  unint64_t v1562;
  int v1563;
  unint64_t v1564;
  unint64_t v1565;
  unint64_t v1566;
  unint64_t v1567;
  unint64_t v1568;
  unint64_t v1569;
  unint64_t v1570;
  unint64_t v1571;
  unint64_t v1572;
  unint64_t v1573;
  _BOOL4 v1574;
  unint64_t v1575;
  uint64_t v1576;
  unint64_t v1577;
  unint64_t v1578;
  unint64_t v1579;
  unint64_t v1580;
  unint64_t v1581;
  unint64_t v1582;
  unint64_t v1583;
  unint64_t v1584;
  unint64_t v1585;
  unint64_t v1586;
  unint64_t v1587;
  unint64_t v1588;
  unint64_t v1589;
  unint64_t v1590;
  unint64_t v1591;
  unint64_t v1592;
  unint64_t v1593;
  unint64_t v1594;
  unint64_t v1595;
  unint64_t v1596;
  unint64_t v1597;
  unint64_t v1598;
  unint64_t v1599;
  unint64_t v1600;
  unint64_t v1601;
  unint64_t v1602;
  unint64_t v1603;
  unint64_t v1604;
  unint64_t v1605;
  unint64_t v1606;
  unint64_t v1607;
  int v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t (*v1619)(unint64_t);
  unint64_t v1620;
  unint64_t v1621;
  unint64_t v1622;
  unint64_t v1623;
  unint64_t v1624;
  unint64_t v1625;
  unint64_t v1626;
  unint64_t v1627;
  unint64_t v1628;
  unint64_t v1629;
  unint64_t v1630;
  unint64_t v1631;
  unint64_t v1632;
  unint64_t v1633;
  uint64_t v1634;
  _BOOL4 v1635;
  unint64_t v1636;
  _BOOL4 v1637;
  _BOOL4 v1638;
  _BOOL4 v1639;
  _BOOL4 v1640;
  _BOOL4 v1641;
  unint64_t v1642;
  _BOOL4 v1643;
  unint64_t v1644;
  uint64_t v1645;
  unint64_t v1646;
  _BOOL4 v1647;
  unint64_t v1648;
  unint64_t v1649;
  unint64_t v1650;
  _BOOL4 v1651;
  unint64_t v1652;
  int v1653;
  uint64_t v1654;
  unint64_t v1655;
  uint64_t v1656;
  unint64_t v1657;
  unint64_t v1658;
  _BOOL4 v1659;
  uint64_t v1660;
  unint64_t v1661;
  int v1662;
  uint64_t v1663;
  unint64_t v1664;
  uint64_t v1665;
  unint64_t v1666;
  uint64_t v1667;
  unint64_t v1668;
  uint64_t v1669;
  unint64_t v1670;
  uint64_t v1671;
  unint64_t v1672;
  uint64_t v1673;
  unint64_t v1674;
  unint64_t v1675;
  uint64_t v1676;
  unint64_t v1677;
  uint64_t v1678;
  unint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  unint64_t v1682;
  unint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  unint64_t v1686;
  unint64_t v1687;
  uint64_t v1688;
  unint64_t v1689;
  uint64_t v1690;
  unint64_t v1691;
  uint64_t v1692;
  unint64_t v1693;
  uint64_t v1694;
  unint64_t v1695;
  uint64_t v1696;
  unint64_t v1697;
  uint64_t v1698;
  uint64_t (*v1699)(void);
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  unint64_t v1708;
  unint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t (*v1712)(unint64_t);
  unint64_t v1713;
  uint64_t (*v1714)(uint64_t);
  _BOOL4 v1715;
  _BOOL4 v1716;
  _BOOL4 v1717;
  unint64_t v1718;
  _BOOL4 v1719;
  unint64_t v1720;
  _BOOL4 v1721;
  unint64_t v1722;
  _BOOL4 v1723;
  int v1724;
  uint64_t v1725;
  unint64_t v1726;
  unint64_t v1727;
  _BOOL4 v1728;
  int v1729;
  uint64_t v1730;
  unint64_t v1731;
  uint64_t v1732;
  unint64_t v1733;
  unint64_t v1734;
  _BOOL4 v1735;
  uint64_t v1736;
  unint64_t v1737;
  unint64_t v1738;
  _BOOL4 v1739;
  uint64_t v1740;
  unint64_t v1741;
  uint64_t v1742;
  unint64_t v1743;
  int v1744;
  unint64_t v1745;
  _BOOL4 v1746;
  uint64_t v1747;
  unint64_t v1748;
  unint64_t v1749;
  uint64_t v1750;
  unint64_t v1751;
  _BOOL4 v1752;
  uint64_t v1753;
  unint64_t v1754;
  uint64_t v1755;
  unint64_t v1756;
  unint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  unint64_t v1760;
  unint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  unint64_t v1764;
  unint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  unint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  unint64_t v1771;
  uint64_t v1772;
  unint64_t v1773;
  uint64_t v1774;
  unint64_t v1775;
  uint64_t v1776;
  unint64_t v1777;
  uint64_t v1778;
  int v1779;
  uint64_t (*v1780)(void);
  unint64_t v1781;
  _BOOL4 v1782;
  unint64_t v1783;
  _BOOL4 v1784;
  unint64_t v1785;
  _BOOL4 v1786;
  unint64_t v1787;
  _BOOL4 v1788;
  _BOOL8 v1789;
  unint64_t v1790;
  _BOOL4 v1791;
  unint64_t v1792;
  _BOOL4 v1793;
  unint64_t v1794;
  _BOOL4 v1795;
  uint64_t v1796;
  unint64_t v1797;
  _BOOL4 v1798;
  unint64_t v1799;
  _BOOL4 v1800;
  unint64_t v1801;
  _BOOL4 v1802;
  uint64_t v1803;
  int v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  int v1808;
  uint64_t v1809;
  int v1810;
  int v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t (*v1816)(void);
  int v1817;
  uint64_t (*v1818)(uint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t v1819;
  unint64_t v1820;
  uint64_t v1821;
  BOOL v1822;
  uint64_t v1823;
  unint64_t v1824;
  _BOOL4 v1825;
  uint64_t v1826;
  BOOL v1827;
  uint64_t v1828;
  unint64_t v1829;
  _BOOL4 v1830;
  uint64_t v1831;
  BOOL v1832;
  uint64_t v1833;
  unint64_t v1834;
  unint64_t v1835;
  _BOOL4 v1836;
  uint64_t v1837;
  BOOL v1838;
  uint64_t v1839;
  unint64_t v1840;
  unint64_t v1841;
  _BOOL4 v1842;
  uint64_t v1843;
  uint64_t v1845;
  unint64_t v1846;
  unint64_t v1847;
  _BOOL4 v1848;
  uint64_t v1849;
  uint64_t v1851;
  unint64_t v1852;
  unint64_t v1853;
  _BOOL4 v1854;
  uint64_t v1855;
  uint64_t v1857;
  unint64_t v1858;
  _BOOL4 v1859;
  unint64_t v1860;
  uint64_t v1861;
  uint64_t v1863;
  unint64_t v1864;
  _BOOL4 v1865;
  unint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  BOOL v1871;
  unint64_t v1872;
  unint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1878;
  unint64_t v1879;
  unint64_t v1880;
  int v1881;
  uint64_t v1882;
  unint64_t v1883;
  _BOOL4 v1884;
  uint64_t v1885;
  int v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  int v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t (*v1896)(void);
  unint64_t v1897;
  unint64_t v1898;
  _BOOL4 v1899;
  unint64_t v1900;
  unint64_t v1901;
  _BOOL4 v1902;
  unint64_t v1903;
  unint64_t v1904;
  _BOOL4 v1905;
  int v1906;
  unint64_t v1907;
  unint64_t v1908;
  _BOOL4 v1909;
  unint64_t v1910;
  unint64_t v1911;
  _BOOL4 v1912;
  unint64_t v1913;
  unint64_t v1914;
  uint64_t v1915;
  unint64_t v1916;
  unint64_t v1917;
  _BOOL4 v1918;
  unint64_t v1919;
  unint64_t v1920;
  _BOOL4 v1921;
  uint64_t v1922;
  int v1923;
  unint64_t v1924;
  unint64_t v1925;
  _BOOL4 v1926;
  uint64_t v1927;
  int v1928;
  unint64_t v1929;
  unint64_t v1930;
  _BOOL4 v1931;
  unint64_t v1932;
  unint64_t v1933;
  unint64_t v1934;
  int v1935;
  uint64_t v1936;
  int v1937;
  uint64_t v1938;
  int v1939;
  uint64_t v1940;
  uint64_t v1941;
  int v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  int v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  uint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  int v1958;
  uint64_t (*v1959)(void);
  unint64_t v1960;
  unint64_t v1961;
  unint64_t v1962;
  unint64_t v1963;
  unint64_t v1964;
  unint64_t v1965;
  unint64_t v1966;
  unint64_t v1967;
  unint64_t v1968;
  unint64_t v1969;
  unint64_t v1970;
  unint64_t v1971;
  unint64_t v1972;
  unint64_t v1973;
  unint64_t v1974;
  unint64_t v1975;
  unint64_t v1976;
  unint64_t v1977;
  unint64_t v1978;
  unint64_t v1979;
  unint64_t v1980;
  unint64_t v1981;
  unint64_t v1982;
  unint64_t v1983;
  unint64_t v1984;
  unint64_t v1985;
  unint64_t v1986;
  unint64_t v1987;
  unint64_t v1988;
  unint64_t v1989;
  unint64_t v1990;
  unint64_t v1991;
  unint64_t v1992;
  unint64_t v1993;
  unint64_t v1994;
  unint64_t v1995;
  unint64_t v1996;
  unint64_t v1997;
  unint64_t v1998;
  unint64_t v1999;
  unint64_t v2000;
  unint64_t v2001;
  unint64_t v2002;
  unint64_t v2003;
  unint64_t v2004;
  unint64_t v2005;
  unint64_t v2006;
  unint64_t v2007;
  unint64_t v2008;
  unint64_t v2009;
  unint64_t v2010;
  unint64_t v2011;
  unint64_t v2012;
  unint64_t v2013;
  unint64_t v2014;
  unint64_t v2015;
  unint64_t v2016;
  unint64_t v2017;
  unint64_t v2018;
  unint64_t v2019;
  unint64_t v2020;
  unint64_t v2021;
  unint64_t v2022;
  unint64_t v2023;
  unint64_t v2024;
  unint64_t v2025;
  unint64_t v2026;
  unint64_t v2027;
  unint64_t v2028;
  unint64_t v2029;
  unint64_t v2030;
  unint64_t v2031;
  unint64_t v2032;
  uint64_t (*v2033)(void);
  unint64_t v2034;
  unint64_t v2035;
  unint64_t v2036;
  unint64_t v2037;
  unint64_t v2038;
  unint64_t v2039;
  unint64_t v2040;
  unint64_t v2041;
  unint64_t v2042;
  unint64_t v2043;
  unint64_t v2044;
  unint64_t v2045;
  unint64_t v2046;
  _BOOL4 v2047;
  unint64_t v2048;
  uint64_t v2049;
  unint64_t v2050;
  _BOOL4 v2051;
  unint64_t v2052;
  unint64_t v2053;
  _BOOL4 v2054;
  uint64_t v2055;
  unint64_t v2056;
  _BOOL4 v2057;
  unint64_t v2058;
  unint64_t v2059;
  _BOOL4 v2060;
  uint64_t v2061;
  unint64_t v2062;
  _BOOL4 v2063;
  unint64_t v2064;
  _BOOL4 v2065;
  uint64_t v2066;
  unint64_t v2067;
  _BOOL4 v2068;
  unint64_t v2069;
  unint64_t v2070;
  _BOOL4 v2071;
  uint64_t v2072;
  unint64_t v2073;
  _BOOL4 v2074;
  unint64_t v2075;
  _BOOL4 v2076;
  uint64_t v2077;
  unint64_t v2078;
  _BOOL4 v2079;
  unint64_t v2080;
  unint64_t v2081;
  _BOOL4 v2082;
  uint64_t v2083;
  unint64_t v2084;
  _BOOL4 v2085;
  unint64_t v2086;
  unint64_t v2087;
  _BOOL4 v2088;
  unint64_t v2089;
  unint64_t v2090;
  _BOOL4 v2091;
  unint64_t v2092;
  unint64_t v2093;
  _BOOL4 v2094;
  unint64_t v2095;
  unint64_t v2096;
  _BOOL4 v2097;
  unint64_t v2098;
  unint64_t v2099;
  _BOOL4 v2100;
  unint64_t v2101;
  unint64_t v2102;
  _BOOL4 v2103;
  unint64_t v2104;
  unint64_t v2105;
  _BOOL4 v2106;
  unint64_t v2107;
  unint64_t v2108;
  _BOOL4 v2109;
  unint64_t v2110;
  unint64_t v2111;
  unint64_t v2112;
  unint64_t v2113;
  unint64_t v2114;
  _BOOL4 v2115;
  unint64_t v2116;
  unint64_t v2117;
  _BOOL4 v2118;
  unint64_t v2119;
  unint64_t v2120;
  _BOOL4 v2121;
  unint64_t v2122;
  unint64_t v2123;
  _BOOL4 v2124;
  unint64_t v2125;
  unint64_t v2126;
  _BOOL4 v2127;
  unint64_t v2128;
  unint64_t v2129;
  _BOOL4 v2130;
  unint64_t v2131;
  unint64_t v2132;
  _BOOL4 v2133;
  unint64_t v2134;
  unint64_t v2135;
  _BOOL4 v2136;
  unint64_t v2137;
  unint64_t v2138;
  _BOOL4 v2139;
  unint64_t v2140;
  unint64_t v2141;
  _BOOL4 v2142;
  unint64_t v2143;
  unint64_t v2144;
  _BOOL4 v2145;
  unint64_t v2146;
  unint64_t v2147;
  _BOOL4 v2148;
  uint64_t v2149;
  uint64_t v2150;
  uint64_t v2152;
  unint64_t v2153;
  unint64_t v2154;
  _BOOL4 v2155;
  uint64_t v2156;
  uint64_t v2158;
  unint64_t v2159;
  unint64_t v2160;
  _BOOL4 v2161;
  unint64_t v2162;
  uint64_t v2163;
  uint64_t v2165;
  unint64_t v2166;
  unint64_t v2167;
  _BOOL4 v2168;
  uint64_t v2169;
  uint64_t v2171;
  unint64_t v2172;
  _BOOL4 v2173;
  unint64_t v2174;
  uint64_t v2175;
  uint64_t v2177;
  unint64_t v2178;
  uint64_t v2179;
  uint64_t v2180;
  uint64_t v2181;
  unint64_t v2182;
  _BOOL4 v2183;
  uint64_t v2184;
  unint64_t v2185;
  uint64_t v2187;
  unint64_t v2188;
  uint64_t v2189;
  int v2190;
  unint64_t v2191;
  int v2192;
  uint64_t v2193;
  int v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t v2198;
  unint64_t v2199;
  unint64_t v2200;
  _BOOL4 v2201;
  uint64_t v2202;
  unint64_t v2203;
  _BOOL4 v2204;
  unint64_t v2205;
  _BOOL4 v2206;
  unint64_t v2207;
  _BOOL4 v2208;
  uint64_t v2209;
  unint64_t v2210;
  _BOOL4 v2211;
  uint64_t v2212;
  uint64_t v2213;
  uint64_t v2214;
  uint64_t v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2220;
  unint64_t v2221;
  uint64_t v2222;
  unint64_t v2223;
  _BOOL4 v2224;
  int v2225;
  uint64_t v2226;
  uint64_t v2227;
  unint64_t v2228;
  _BOOL4 v2229;
  uint64_t v2230;
  uint64_t v2231;
  uint64_t v2232;
  unint64_t v2233;
  _BOOL4 v2234;
  uint64_t v2235;
  uint64_t v2236;
  uint64_t v2238;
  unint64_t v2239;
  _BOOL4 v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  uint64_t v2244;
  unint64_t v2245;
  _BOOL4 v2246;
  unint64_t v2247;
  _BOOL4 v2248;
  unint64_t v2249;
  _BOOL4 v2250;
  uint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  unint64_t v2254;
  uint64_t v2255;
  uint64_t v2256;
  uint64_t v2257;
  uint64_t v2258;
  unint64_t v2259;
  unint64_t v2260;
  uint64_t v2261;
  unint64_t v2262;
  unint64_t v2263;
  uint64_t v2264;
  uint64_t v2265;
  uint64_t v2266;
  uint64_t v2267;
  uint64_t (*v2268)(unint64_t, unint64_t);
  unsigned int v2269;
  uint64_t (*v2270)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t);
  unint64_t v2271;
  unint64_t v2272;

  v103 = v87 * v96;
  v104 = (v87 * (unsigned __int128)v96) >> 64;
  v105 = (v104 * (unsigned __int128)9uLL) >> 64;
  v104 *= 9;
  v301 = __CFADD__(v104, v103);
  v106 = v104 + v103;
  if (v301)
    v107 = v105 + 1;
  else
    v107 = v105;
  v108 = 9 * v107;
  v301 = __CFADD__(v108, v106);
  v109 = v108 + v106;
  v110 = v301;
  if (v109 > 0xFFFFFFFFFFFFFFF6)
    v110 = 1;
  if (v110)
    v111 = 9;
  else
    v111 = 0;
  v112 = v111 + v109;
  v113 = 0x1513DAB390DF5A9ELL * v112;
  v114 = (__PAIR128__(8, 0x1513DAB390DF5A9ELL) * v112) >> 64;
  v301 = __CFADD__(v114, v113);
  v115 = v114 + v113;
  if (v301)
    v116 = 9;
  else
    v116 = 0;
  v301 = __CFADD__(v116, v115);
  v117 = v116 + v115;
  v118 = v301;
  if (v117 > 0xFFFFFFFFFFFFFFF6)
    v118 = 1;
  if (v118)
    v119 = 9;
  else
    v119 = 0;
  v120 = v119 + v117;
  v121 = 0xD6E38E38E38E38DCLL * v120;
  v122 = (((v120 * (unsigned __int128)0xD6E38E38E38E38DCLL) >> 64) * 9) >> 64;
  v123 = (__PAIR128__(8, 0xD6E38E38E38E38DCLL) * v120) >> 64;
  v301 = __CFADD__(v123, v121);
  v124 = v123 + v121;
  if (v301)
    v125 = v122 + 1;
  else
    v125 = v122;
  v126 = 9 * v125;
  v301 = __CFADD__(v126, v124);
  v127 = v126 + v124;
  v128 = v301;
  if (v127 > 0xFFFFFFFFFFFFFFF6)
    v128 = 1;
  if (v128)
    v129 = 9;
  else
    v129 = 0;
  v130 = v129 + v127;
  if (v129 + v127 >= 0xFFFFFFFFFFFFFFD3)
    v131 = v95;
  else
    v131 = 0;
  v132 = v131 + v130;
  v133 = 2217600 * v132;
  v134 = ((v132 * (unsigned __int128)0x21D680uLL) >> 64) * (unint64_t)v95;
  v301 = __CFADD__(v134, v133);
  v135 = v134 + v133;
  if (v301)
    v136 = v95;
  else
    v136 = 0;
  v137 = v136 + v135 > 0xFFFFFFFFFFFFFFD2;
  v301 = __CFADD__(v136, v135);
  v138 = v136 + v135;
  v139 = v89 * v88;
  v140 = (v89 * (unsigned __int128)v88) >> 64;
  v141 = (v140 * (unsigned __int128)v92) >> 64;
  v142 = 5 * v140;
  v143 = v301 || v137;
  v144 = v142 + v139;
  if (__CFADD__(v142, v139))
    v145 = v141 + 1;
  else
    v145 = v141;
  v146 = 5 * v145;
  v301 = __CFADD__(v146, v144);
  v147 = v146 + v144;
  v148 = v301;
  if (v147 > 0xFFFFFFFFFFFFFFFALL)
    v148 = 1;
  if (v148)
    v149 = v92;
  else
    v149 = 0;
  v150 = v149 + v147;
  v151 = 0xE7CF05C2128E4523 * v150;
  v152 = (((v150 * (unsigned __int128)0xE7CF05C2128E4523) >> 64) * v92) >> 64;
  v153 = (__PAIR128__(4, 0xE7CF05C2128E4523) * v150) >> 64;
  v301 = __CFADD__(v153, v151);
  v154 = v153 + v151;
  if (v301)
    v155 = v152 + 1;
  else
    v155 = v152;
  v156 = 5 * v155;
  v301 = __CFADD__(v156, v154);
  v157 = v156 + v154;
  v158 = v301;
  if (v157 > 0xFFFFFFFFFFFFFFFALL)
    v158 = 1;
  if (v158)
    v159 = v92;
  else
    v159 = 0;
  v160 = v159 + v157;
  v161 = 0xD73333333333332FLL * v160;
  v162 = (((v160 * (unsigned __int128)0xD73333333333332FLL) >> 64) * v92) >> 64;
  v163 = (__PAIR128__(4, 0xD73333333333332FLL) * v160) >> 64;
  v301 = __CFADD__(v163, v161);
  v164 = v163 + v161;
  if (v301)
    v165 = v162 + 1;
  else
    v165 = v162;
  v166 = 5 * v165;
  v301 = __CFADD__(v166, v164);
  v167 = v166 + v164;
  v168 = v301;
  if (v167 > 0xFFFFFFFFFFFFFFFALL)
    v168 = 1;
  if (v168)
    v169 = v92;
  else
    v169 = 0;
  v170 = v169 + v167;
  if (v169 + v167 >= 0xFFFFFFFFFFFFFFD3)
    v171 = v95;
  else
    v171 = 0;
  v172 = v171 + v170;
  v173 = 1995840 * v172;
  v174 = ((v172 * (unsigned __int128)0x1E7440uLL) >> 64) * (unint64_t)v95;
  v301 = __CFADD__(v174, v173);
  v175 = v174 + v173;
  if (v301)
    v176 = v95;
  else
    v176 = 0;
  v177 = v176 + v175 > 0xFFFFFFFFFFFFFFD2;
  v301 = __CFADD__(v176, v175);
  v178 = v176 + v175;
  v179 = v90 * a1;
  v180 = (v90 * (unsigned __int128)a1) >> 64;
  v181 = (v180 * (unsigned __int128)a8) >> 64;
  v182 = 3 * v180;
  if (v301)
    v177 = 1;
  v301 = __CFADD__(v182, v179);
  v183 = v182 + v179;
  if (v301)
    v184 = v181 + 1;
  else
    v184 = v181;
  v185 = 3 * v184;
  v301 = __CFADD__(v185, v183);
  v186 = v185 + v183;
  v187 = v301;
  if (v186 > 0xFFFFFFFFFFFFFFFCLL)
    v187 = 1;
  if (v187)
    v188 = a8;
  else
    v188 = 0;
  v189 = v188 + v186;
  v190 = 0x98FDEF4CCE72A7B8 * v189;
  v191 = (((v189 * (unsigned __int128)0x98FDEF4CCE72A7B8) >> 64) * a8) >> 64;
  v192 = (__PAIR128__(2, 0x98FDEF4CCE72A7B8) * v189) >> 64;
  v301 = __CFADD__(v192, v190);
  v193 = v192 + v190;
  if (v301)
    v194 = v191 + 1;
  else
    v194 = v191;
  v195 = 3 * v194;
  v196 = (unint64_t)(v195 + v193) > 0xFFFFFFFFFFFFFFFCLL;
  v301 = __CFADD__(v195, v193);
  v197 = v195 + v193;
  if (v301 || v196)
    v199 = a8;
  else
    v199 = 0;
  v200 = v199 + v197;
  v201 = 0xF638E38E38E38E36 * v200;
  v202 = (((v200 * (unsigned __int128)0xF638E38E38E38E36) >> 64) * a8) >> 64;
  v203 = (__PAIR128__(2, 0xF638E38E38E38E36) * v200) >> 64;
  v301 = __CFADD__(v203, v201);
  v204 = v203 + v201;
  if (v301)
    v205 = v202 + 1;
  else
    v205 = v202;
  v206 = 3 * v205;
  v301 = __CFADD__(v206, v204);
  v207 = v206 + v204;
  v208 = v301;
  if (v207 > 0xFFFFFFFFFFFFFFFCLL)
    v208 = 1;
  if (v208)
    v209 = a8;
  else
    v209 = 0;
  v210 = v209 + v207;
  if (v209 + v207 >= 0xFFFFFFFFFFFFFFD3)
    v211 = v95;
  else
    v211 = 0;
  v212 = v211 + v210;
  v213 = 1900800 * v212;
  v214 = ((v212 * (unsigned __int128)0x1D0100uLL) >> 64) * (unint64_t)v95;
  v301 = __CFADD__(v214, v213);
  v215 = v214 + v213;
  if (v301)
    v216 = v95;
  else
    v216 = 0;
  v217 = v216 + v215 > 0xFFFFFFFFFFFFFFD2;
  v301 = __CFADD__(v216, v215);
  v218 = v216 + v215;
  v219 = v91 * a2;
  v220 = (v91 * (unsigned __int128)a2) >> 64;
  v221 = v301 || v217;
  v222 = __CFADD__(__CFADD__(v220, v219), v220 + v219);
  v223 = __CFADD__(v220, v219) + v220 + v219 == -1 || v222;
  v224 = v220 + v219 + __CFADD__(v220, v219) + v223;
  v225 = ((unint64_t)v224 * (unsigned __int128)0x5CAECC2F8BD67150uLL) >> 64;
  v226 = 0x5CAECC2F8BD67150 * v224;
  v227 = __CFADD__(__CFADD__(v225, v226), v225 + v226);
  v228 = __CFADD__(v225, v226) + v225 + v226 == -1 || v227;
  v229 = v225 + v226 + __CFADD__(v225, v226) + v228;
  v230 = ((unint64_t)v229 * (unsigned __int128)0xDBB6DB6DB6DB6DB6) >> 64;
  v231 = 0xDBB6DB6DB6DB6DB6 * v229;
  v232 = __CFADD__(__CFADD__(v230, v231), v230 + v231);
  v233 = __CFADD__(v230, v231) + v230 + v231 == -1 || v232;
  v234 = v230 + v231 + __CFADD__(v230, v231) + v233;
  if (v234 >= 0xFFFFFFFFFFFFFFD3)
    v235 = v95;
  else
    v235 = 0;
  v236 = v235 + v234;
  v237 = 1814400 * v236;
  v238 = ((v236 * (unsigned __int128)0x1BAF80uLL) >> 64) * (unint64_t)v95;
  v301 = __CFADD__(v238, v237);
  v239 = v238 + v237;
  if (v301)
    v240 = v95;
  else
    v240 = 0;
  v241 = v240 + v239 > 0xFFFFFFFFFFFFFFD2;
  v301 = __CFADD__(v240, v239);
  v242 = v240 + v239;
  if (v301 || v241)
    v244 = v95;
  else
    v244 = 0;
  v245 = v244 + v242;
  if (v245 >= 0xFFFFFFFFFFFFFFD3)
    v246 = v95;
  else
    v246 = 0;
  if (v221)
    v247 = v95;
  else
    v247 = 0;
  v248 = v246 + v245;
  v249 = v247 + v218;
  v250 = v249 + v248 > 0xFFFFFFFFFFFFFFD2;
  v301 = __CFADD__(v249, v248);
  v251 = v249 + v248;
  v252 = v97 * a3;
  v253 = (v97 * (unsigned __int128)a3) >> 64;
  v254 = (v253 * (unsigned __int128)v101) >> 64;
  if (v301)
    v250 = 1;
  v255 = 15 * v253;
  v301 = __CFADD__(v255, v252);
  v256 = v255 + v252;
  if (v301)
    v257 = v254 + 1;
  else
    v257 = v254;
  v258 = 15 * v257;
  v301 = __CFADD__(v258, v256);
  v259 = v258 + v256;
  v260 = v301;
  if (v259 > 0xFFFFFFFFFFFFFFF0)
    v260 = 1;
  if (v260)
    v261 = v101;
  else
    v261 = 0;
  v262 = v261 + v259;
  v263 = 0x9FEC52B6396CF0C0 * v262;
  v264 = (v262 * (unsigned __int128)0x9FEC52B6396CF0C0) >> 64;
  v265 = (v264 * (unsigned __int128)v101) >> 64;
  v264 *= 15;
  v301 = __CFADD__(v264, v263);
  v266 = v264 + v263;
  if (v301)
    v267 = v265 + 1;
  else
    v267 = v265;
  v268 = 15 * v267;
  v269 = v268 + v266 > 0xFFFFFFFFFFFFFFF0;
  v301 = __CFADD__(v268, v266);
  v270 = v268 + v266;
  v271 = a5 * a4;
  v272 = (a5 * (unsigned __int128)a4) >> 64;
  v273 = (v272 * (unsigned __int128)v95) >> 64;
  v274 = v272 * v95;
  if (v301)
    v269 = 1;
  v301 = __CFADD__(v274, v271);
  v275 = v274 + v271;
  if (v301)
    v276 = v273 + 1;
  else
    v276 = v273;
  v277 = v276 * v95;
  v278 = (unint64_t)(v277 + v275) > 0xFFFFFFFFFFFFFFD2;
  v301 = __CFADD__(v277, v275);
  v279 = v277 + v275;
  if (v301 || v278)
    v281 = v95;
  else
    v281 = 0;
  v282 = v281 + v279;
  if (v269)
    v283 = v101;
  else
    v283 = 0;
  v284 = v283 + v270;
  v285 = 0x7FF97F97F97F97F2 * v284;
  v286 = (v284 * (unsigned __int128)0x7FF97F97F97F97F2uLL) >> 64;
  v287 = (v286 * (unsigned __int128)v101) >> 64;
  v286 *= 15;
  v301 = __CFADD__(v286, v285);
  v288 = v286 + v285;
  if (v301)
    v289 = v287 + 1;
  else
    v289 = v287;
  v290 = 15 * v289;
  v301 = __CFADD__(v290, v288);
  v291 = v290 + v288;
  v292 = v301;
  if (v291 > 0xFFFFFFFFFFFFFFF0)
    v292 = 1;
  if (v292)
    v293 = v101;
  else
    v293 = 0;
  v294 = v293 + v291;
  if (v177)
    v295 = v95;
  else
    v295 = 0;
  if (v250)
    v296 = v95;
  else
    v296 = 0;
  v297 = v296 + v251;
  v298 = v178 + v295 + v297;
  if (v294 >= 0xFFFFFFFFFFFFFFD3)
    v299 = v95;
  else
    v299 = 0;
  v300 = v299 + v294;
  v301 = v298 <= 0xFFFFFFFFFFFFFFD2 && v298 >= v297;
  v302 = 2661120 * v300;
  v303 = ((v300 * (unsigned __int128)0x289B00uLL) >> 64) * (unint64_t)v95;
  if (v301)
    v304 = 0;
  else
    v304 = v95;
  v305 = v304 + v298;
  if (v143)
    v306 = v95;
  else
    v306 = 0;
  v307 = v306 + v138;
  v301 = __CFADD__(v307, v305);
  v308 = v307 + v305;
  v309 = v301;
  if (v308 > 0xFFFFFFFFFFFFFFD2)
    v309 = 1;
  v310 = v303 + v302;
  if (__CFADD__(v303, v302))
    v311 = v95;
  else
    v311 = 0;
  v301 = __CFADD__(v311, v310);
  v312 = v311 + v310;
  v313 = v301;
  if (v312 > 0xFFFFFFFFFFFFFFD2)
    v313 = 1;
  if (v309)
    v314 = v95;
  else
    v314 = 0;
  v315 = v314 + v308;
  if (v313)
    v316 = v95;
  else
    v316 = 0;
  v317 = v316 + v312;
  v301 = __CFADD__(v317, v315);
  v318 = v317 + v315;
  v319 = v301;
  if (v318 > 0xFFFFFFFFFFFFFFD2)
    v319 = 1;
  if (v319)
    v320 = v95;
  else
    v320 = 0;
  v321 = v320 + v318;
  v322 = 0xB1035F48A597370CLL * v321;
  v323 = (v321 * (unsigned __int128)0xB1035F48A597370CLL) >> 64;
  v324 = (v323 * (unsigned __int128)v95) >> 64;
  v325 = v323 * v95;
  v301 = __CFADD__(v325, v322);
  v326 = v325 + v322;
  if (v301)
    v327 = v324 + 1;
  else
    v327 = v324;
  v328 = v327 * v95;
  v301 = __CFADD__(v328, v326);
  v329 = v328 + v326;
  v330 = v301;
  if (v329 > 0xFFFFFFFFFFFFFFD2)
    v330 = 1;
  if (v330)
    v331 = v95;
  else
    v331 = 0;
  v332 = v331 + v329;
  v301 = __CFADD__(v282, v332);
  v333 = v282 + v332;
  v334 = v301;
  if (v333 > 0xFFFFFFFFFFFFFFD2)
    v334 = 1;
  if (v334)
    v335 = v95;
  else
    v335 = 0;
  v336 = v335 + v333;
  v337 = 0xD122545C17BA3DF4 * v336;
  v338 = (v336 * (unsigned __int128)0xD122545C17BA3DF4) >> 64;
  v339 = (v338 * (unsigned __int128)v95) >> 64;
  v340 = v338 * v95;
  v301 = __CFADD__(v340, v337);
  v341 = v340 + v337;
  if (v301)
    v342 = v339 + 1;
  else
    v342 = v339;
  v343 = v342 * v95;
  v301 = __CFADD__(v343, v341);
  v344 = v343 + v341;
  v345 = v301;
  if (v344 > 0xFFFFFFFFFFFFFFD2)
    v345 = 1;
  if (v345)
    v346 = v95;
  else
    v346 = 0;
  v347 = v346 + v344;
  v348 = 0xC8D34D34D34D34B0 * (v346 + v344);
  STACK[0x3BD0] = v347;
  v349 = (v347 * (unsigned __int128)0xC8D34D34D34D34B0) >> 64;
  v350 = (v349 * (unsigned __int128)v95) >> 64;
  v351 = v349 * v95;
  v301 = __CFADD__(v351, v348);
  v352 = v351 + v348;
  if (v301)
    v353 = v350 + 1;
  else
    v353 = v350;
  v354 = v353 * v95;
  v301 = __CFADD__(v354, v352);
  v355 = v354 + v352;
  v356 = v301;
  if (v355 > 0xFFFFFFFFFFFFFFD2)
    v356 = 1;
  if (v356)
    v357 = v95;
  else
    v357 = 0;
  v358 = v357 + v355;
  STACK[0x3C78] = v358;
  if (v358 >= 0xFFFFFFFFFFFFFFCBLL)
    v359 = v99;
  else
    v359 = 0;
  v360 = v359 + v358;
  v361 = 60480 * v360;
  v362 = ((v360 * (unsigned __int128)0xEC40uLL) >> 64) * (unint64_t)v99;
  v301 = __CFADD__(v362, v361);
  v363 = v362 + v361;
  if (v301)
    v364 = v99;
  else
    v364 = 0;
  v365 = v364 + v363 > 0xFFFFFFFFFFFFFFCALL;
  v301 = __CFADD__(v364, v363);
  v366 = v364 + v363;
  v367 = v301 || v365;
  if (v294 >= 0xFFFFFFFFFFFFFFDFLL)
    v368 = v93;
  else
    v368 = 0;
  v369 = v368 + v294;
  v370 = 645120 * v369;
  v371 = (__PAIR128__(32, 645120) * v369) >> 64;
  v301 = __CFADD__(v371, v370);
  v372 = v371 + v370;
  if (v301)
    v373 = v93;
  else
    v373 = 0;
  v374 = v373 + v372 > 0xFFFFFFFFFFFFFFDELL;
  v301 = __CFADD__(v373, v372);
  v375 = v373 + v372;
  v376 = v301 || v374;
  if (v170 >= 0xFFFFFFFFFFFFFFDFLL)
    v377 = v93;
  else
    v377 = 0;
  v378 = v377 + v170;
  v379 = 414720 * v378;
  v380 = (__PAIR128__(32, 414720) * v378) >> 64;
  v301 = __CFADD__(v380, v379);
  v381 = v380 + v379;
  if (v301)
    v382 = v93;
  else
    v382 = 0;
  v383 = v382 + v381 > 0xFFFFFFFFFFFFFFDELL;
  v301 = __CFADD__(v382, v381);
  v384 = v382 + v381;
  v385 = v301 || v383;
  if (v234 >= 0xFFFFFFFFFFFFFFDFLL)
    v386 = v93;
  else
    v386 = 0;
  v387 = v386 + v234;
  v388 = 362880 * v387;
  v389 = (__PAIR128__(32, 362880) * v387) >> 64;
  v301 = __CFADD__(v389, v388);
  v390 = v389 + v388;
  if (v301)
    v391 = v93;
  else
    v391 = 0;
  v301 = __CFADD__(v391, v390);
  v392 = v391 + v390;
  v393 = v301;
  if (v392 > 0xFFFFFFFFFFFFFFDELL)
    v393 = 1;
  if (v210 >= 0xFFFFFFFFFFFFFFDFLL)
    v394 = v93;
  else
    v394 = 0;
  v395 = v394 + v210;
  if (v393)
    v396 = v93;
  else
    v396 = 0;
  v397 = 387072 * v395;
  v398 = (v395 * (unsigned __int128)0x5E800uLL) >> 64;
  v399 = v396 + v392;
  if (v399 >= 0xFFFFFFFFFFFFFFDFLL)
    v400 = v93;
  else
    v400 = 0;
  v401 = v400 + v399;
  v402 = 33 * v398 + v397;
  if (__CFADD__(33 * v398, v397))
    v403 = v93;
  else
    v403 = 0;
  v301 = __CFADD__(v403, v402);
  v404 = v403 + v402;
  v405 = v301;
  if (v404 > 0xFFFFFFFFFFFFFFDELL)
    v405 = 1;
  if (v405)
    v406 = v93;
  else
    v406 = 0;
  v407 = v406 + v404;
  v408 = v407 + v401 > 0xFFFFFFFFFFFFFFDELL;
  v301 = __CFADD__(v407, v401);
  v409 = v407 + v401;
  v410 = v301 || v408;
  if (v385)
    v411 = v93;
  else
    v411 = 0;
  if (v410)
    v412 = v93;
  else
    v412 = 0;
  v413 = v412 + v409;
  v414 = v384 + v411 + v413;
  if (v130 >= 0xFFFFFFFFFFFFFFDFLL)
    v415 = v93;
  else
    v415 = 0;
  v416 = v415 + v130;
  v417 = 483840 * v416;
  v418 = (__PAIR128__(32, 483840) * v416) >> 64;
  v301 = __CFADD__(v418, v417);
  v419 = v418 + v417;
  if (v301)
    v420 = v93;
  else
    v420 = 0;
  v301 = __CFADD__(v420, v419);
  v421 = v420 + v419;
  v422 = v301;
  if (v421 > 0xFFFFFFFFFFFFFFDELL)
    v422 = 1;
  if (v414 < v413 || v414 > 0xFFFFFFFFFFFFFFDELL)
    v424 = v93;
  else
    v424 = 0;
  v425 = v424 + v414;
  if (v422)
    v426 = v93;
  else
    v426 = 0;
  v427 = v426 + v421;
  v428 = v427 + v425 > 0xFFFFFFFFFFFFFFDELL;
  v301 = __CFADD__(v427, v425);
  v429 = v427 + v425;
  v430 = v301 || v428;
  if (v376)
    v431 = v93;
  else
    v431 = 0;
  if (v430)
    v432 = v93;
  else
    v432 = 0;
  v433 = v432 + v429;
  v434 = v431 + v375;
  v435 = v434 + v433 > 0xFFFFFFFFFFFFFFDELL;
  v301 = __CFADD__(v434, v433);
  v436 = v434 + v433;
  v437 = a6 * a7;
  v438 = (a6 * (unsigned __int128)a7) >> 64;
  v439 = (v438 * (unsigned __int128)v93) >> 64;
  v440 = 33 * v438;
  if (v301)
    v435 = 1;
  v301 = __CFADD__(v440, v437);
  v441 = v440 + v437;
  if (v301)
    v442 = v439 + 1;
  else
    v442 = v439;
  v443 = 33 * v442;
  v444 = (unint64_t)(v443 + v441) > 0xFFFFFFFFFFFFFFDELL;
  v301 = __CFADD__(v443, v441);
  v445 = v443 + v441;
  if (v301 || v444)
    v447 = v93;
  else
    v447 = 0;
  v448 = v447 + v445;
  if (v435)
    v449 = v93;
  else
    v449 = 0;
  v450 = v449 + v436;
  v451 = 0xD2087261F2F13621 * v450;
  v452 = (((v450 * (unsigned __int128)0xD2087261F2F13621) >> 64) * v93) >> 64;
  v453 = (__PAIR128__(32, 0xD2087261F2F13621) * v450) >> 64;
  v301 = __CFADD__(v453, v451);
  v454 = v453 + v451;
  if (v301)
    v455 = v452 + 1;
  else
    v455 = v452;
  v456 = 33 * v455;
  v301 = __CFADD__(v456, v454);
  v457 = v456 + v454;
  v458 = v301;
  if (v457 > 0xFFFFFFFFFFFFFFDELL)
    v458 = 1;
  if (v458)
    v459 = v93;
  else
    v459 = 0;
  v460 = v459 + v457;
  v461 = v448 + v460 > 0xFFFFFFFFFFFFFFDELL;
  v301 = __CFADD__(v448, v460);
  v462 = v448 + v460;
  if (v301)
    v461 = 1;
  if (v461)
    v463 = v93;
  else
    v463 = 0;
  v464 = v463 + v462;
  v465 = 0xBF751FE036E6FC90 * v464;
  v466 = (((v464 * (unsigned __int128)0xBF751FE036E6FC90) >> 64) * v93) >> 64;
  v467 = (__PAIR128__(32, 0xBF751FE036E6FC90) * v464) >> 64;
  v301 = __CFADD__(v467, v465);
  v468 = v467 + v465;
  if (v301)
    v469 = v466 + 1;
  else
    v469 = v466;
  v470 = 33 * v469;
  v471 = (unint64_t)(v470 + v468) > 0xFFFFFFFFFFFFFFDELL;
  v301 = __CFADD__(v470, v468);
  v472 = v470 + v468;
  if (v301 || v471)
    v474 = v93;
  else
    v474 = 0;
  v475 = v474 + v472;
  v476 = 0x8696596596596585 * (v474 + v472);
  STACK[0x3BF8] = v475;
  v477 = (((v475 * (unsigned __int128)0x8696596596596585) >> 64) * v93) >> 64;
  v478 = (__PAIR128__(32, 0x8696596596596585) * v475) >> 64;
  v301 = __CFADD__(v478, v476);
  v479 = v478 + v476;
  if (v301)
    v480 = v477 + 1;
  else
    v480 = v477;
  v481 = 33 * v480;
  v301 = __CFADD__(v481, v479);
  v482 = v481 + v479;
  v483 = v301;
  if (v482 > 0xFFFFFFFFFFFFFFDELL)
    v483 = 1;
  if (v483)
    v484 = v93;
  else
    v484 = 0;
  v485 = v484 + v482;
  if (v484 + v482 >= 0xFFFFFFFFFFFFFFCBLL)
    v486 = v99;
  else
    v486 = 0;
  v487 = v486 + v485;
  v488 = 24192 * v487;
  v489 = ((v487 * (unsigned __int128)0x5E80uLL) >> 64) * (unint64_t)v99;
  v301 = __CFADD__(v489, v488);
  v490 = v489 + v488;
  if (v301)
    v491 = v99;
  else
    v491 = 0;
  v492 = v491 + v490 > 0xFFFFFFFFFFFFFFCALL;
  v301 = __CFADD__(v491, v490);
  v493 = v491 + v490;
  if (v301)
    v492 = 1;
  if (v294 >= 0xFFFFFFFFFFFFFFEFLL)
    v494 = v102;
  else
    v494 = 0;
  v495 = v494 + v294;
  v496 = 21504 * v495;
  v497 = (__PAIR128__(16, 21504) * v495) >> 64;
  v301 = __CFADD__(v497, v496);
  v498 = v497 + v496;
  if (v301)
    v499 = v102;
  else
    v499 = 0;
  v500 = v499 + v498 > 0xFFFFFFFFFFFFFFEELL;
  v301 = __CFADD__(v499, v498);
  v501 = v499 + v498;
  v502 = v301 || v500;
  if (v130 >= 0xFFFFFFFFFFFFFFEFLL)
    v503 = v102;
  else
    v503 = 0;
  v504 = v503 + v130;
  v505 = 5376 * v504;
  v506 = (__PAIR128__(16, 5376) * v504) >> 64;
  v301 = __CFADD__(v506, v505);
  v507 = v506 + v505;
  if (v301)
    v508 = v102;
  else
    v508 = 0;
  v509 = v508 + v507 > 0xFFFFFFFFFFFFFFEELL;
  v301 = __CFADD__(v508, v507);
  v510 = v508 + v507;
  v511 = v301 || v509;
  if (v210 >= 0xFFFFFFFFFFFFFFEFLL)
    v512 = v102;
  else
    v512 = 0;
  v513 = v512 + v210;
  v514 = 3 * v513;
  v515 = (__PAIR128__(16, 3072) * v513) >> 64;
  v301 = __CFADD__(v515, v514 << 10);
  v516 = v515 + (v514 << 10);
  if (v301)
    v517 = v102;
  else
    v517 = 0;
  v518 = v517 + v516 > 0xFFFFFFFFFFFFFFEELL;
  v301 = __CFADD__(v517, v516);
  v519 = v517 + v516;
  v520 = v301 || v518;
  if (v234 >= 0xFFFFFFFFFFFFFFEFLL)
    v521 = v102;
  else
    v521 = 0;
  v522 = v521 + v234;
  v523 = 2688 * v522;
  v524 = (__PAIR128__(16, 2688) * v522) >> 64;
  v301 = __CFADD__(v524, v523);
  v525 = v524 + v523;
  if (v301)
    v526 = v102;
  else
    v526 = 0;
  v301 = __CFADD__(v526, v525);
  v527 = v526 + v525;
  v528 = v301;
  if (v527 > 0xFFFFFFFFFFFFFFEELL)
    v528 = 1;
  if (v528)
    v529 = v102;
  else
    v529 = 0;
  v530 = v529 + v527;
  if (v520)
    v531 = v102;
  else
    v531 = 0;
  if (v530 >= 0xFFFFFFFFFFFFFFEFLL)
    v532 = v102;
  else
    v532 = 0;
  v533 = v532 + v530;
  v534 = v531 + v519;
  v535 = v534 + v533 > 0xFFFFFFFFFFFFFFEELL;
  v301 = __CFADD__(v534, v533);
  v536 = v534 + v533;
  if (v301)
    v535 = 1;
  if (v170 >= 0xFFFFFFFFFFFFFFEFLL)
    v537 = v102;
  else
    v537 = 0;
  v538 = v537 + v170;
  v539 = 17 * ((v538 * (unsigned __int128)0xE00uLL) >> 64);
  v538 *= 3584;
  v301 = __CFADD__(v539, v538);
  v540 = v539 + v538;
  if (v301)
    v541 = v102;
  else
    v541 = 0;
  v301 = __CFADD__(v541, v540);
  v542 = v541 + v540;
  v543 = v301;
  if (v542 > 0xFFFFFFFFFFFFFFEELL)
    v543 = 1;
  if (v535)
    v544 = v102;
  else
    v544 = 0;
  if (v543)
    v545 = v102;
  else
    v545 = 0;
  v546 = v544 + v536;
  v547 = v542 + v545 + v546;
  if (v511)
    v548 = v102;
  else
    v548 = 0;
  if (v547 > 0xFFFFFFFFFFFFFFEELL || v546 > v547)
    v550 = v102;
  else
    v550 = 0;
  v551 = v548 + v510;
  v301 = __CFADD__(v551, v550 + v547);
  v552 = v551 + v550 + v547;
  v553 = v301;
  if (v552 > 0xFFFFFFFFFFFFFFEELL)
    v553 = 1;
  if (v553)
    v554 = v102;
  else
    v554 = 0;
  v555 = v554 + v552;
  if (v502)
    v556 = v102;
  else
    v556 = 0;
  v557 = v556 + v501;
  v558 = v557 + v555 > 0xFFFFFFFFFFFFFFEELL;
  v301 = __CFADD__(v557, v555);
  v559 = v557 + v555;
  v560 = v94 * STACK[0x3B58];
  v561 = (v94 * (unsigned __int128)STACK[0x3B58]) >> 64;
  v562 = (v561 * (unsigned __int128)v102) >> 64;
  v563 = 17 * v561;
  if (v301)
    v558 = 1;
  v301 = __CFADD__(v563, v560);
  v564 = v563 + v560;
  if (v301)
    v565 = v562 + 1;
  else
    v565 = v562;
  v566 = 17 * v565;
  v567 = v566 + v564 > 0xFFFFFFFFFFFFFFEELL;
  v301 = __CFADD__(v566, v564);
  v568 = v566 + v564;
  if (v301 || v567)
    v570 = v102;
  else
    v570 = 0;
  v571 = v570 + v568;
  if (v558)
    v572 = v102;
  else
    v572 = 0;
  v573 = v572 + v559;
  v574 = 0xBCE0B40AAD3903CALL * v573;
  v575 = (((v573 * (unsigned __int128)0xBCE0B40AAD3903CALL) >> 64) * v102) >> 64;
  v576 = (__PAIR128__(16, 0xBCE0B40AAD3903CALL) * v573) >> 64;
  v301 = __CFADD__(v576, v574);
  v577 = v576 + v574;
  if (v301)
    v578 = v575 + 1;
  else
    v578 = v575;
  v579 = 17 * v578;
  v301 = __CFADD__(v579, v577);
  v580 = v579 + v577;
  v581 = v301;
  if (v580 > 0xFFFFFFFFFFFFFFEELL)
    v581 = 1;
  if (v581)
    v582 = v102;
  else
    v582 = 0;
  v583 = v582 + v580;
  v584 = v571 + v583 > 0xFFFFFFFFFFFFFFEELL;
  v301 = __CFADD__(v571, v583);
  v585 = v571 + v583;
  if (v301)
    v584 = 1;
  if (v584)
    v586 = v102;
  else
    v586 = 0;
  v587 = v586 + v585;
  v588 = 0x260186186186185FLL * v587;
  v589 = (((v587 * (unsigned __int128)0x260186186186185FuLL) >> 64) * v102) >> 64;
  v590 = (__PAIR128__(16, 0x260186186186185FLL) * v587) >> 64;
  v301 = __CFADD__(v590, v588);
  v591 = v590 + v588;
  if (v301)
    v592 = v589 + 1;
  else
    v592 = v589;
  v593 = 17 * v592;
  v594 = (unint64_t)(v593 + v591) > 0xFFFFFFFFFFFFFFEELL;
  v301 = __CFADD__(v593, v591);
  v595 = v593 + v591;
  if (v301 || v594)
    v597 = v102;
  else
    v597 = 0;
  v598 = v597 + v595;
  v599 = 0x500038BDBA674958 * (v597 + v595);
  STACK[0x3BC8] = v598;
  v600 = (v598 * (unsigned __int128)0x500038BDBA674958uLL) >> 64;
  v601 = (v600 * (unsigned __int128)v102) >> 64;
  v600 *= 17;
  v301 = __CFADD__(v600, v599);
  v602 = v600 + v599;
  if (v301)
    v603 = v601 + 1;
  else
    v603 = v601;
  v604 = 17 * v603;
  v301 = __CFADD__(v604, v602);
  v605 = v604 + v602;
  v606 = v301;
  if (v605 > 0xFFFFFFFFFFFFFFEELL)
    v606 = 1;
  if (v606)
    v607 = v102;
  else
    v607 = 0;
  v608 = v607 + v605;
  if (v607 + v605 >= 0xFFFFFFFFFFFFFFCBLL)
    v609 = v99;
  else
    v609 = 0;
  v610 = v609 + v608;
  v611 = 13440 * v610;
  v612 = ((v610 * (unsigned __int128)0x3480uLL) >> 64) * (unint64_t)v99;
  v301 = __CFADD__(v612, v611);
  v613 = v612 + v611;
  if (v301)
    v614 = v99;
  else
    v614 = 0;
  v301 = __CFADD__(v614, v613);
  v615 = v614 + v613;
  v616 = v301;
  if (v615 > 0xFFFFFFFFFFFFFFCALL)
    v616 = 1;
  if (v616)
    v617 = v99;
  else
    v617 = 0;
  v618 = v617 + v615;
  if (v618 >= 0xFFFFFFFFFFFFFFCBLL)
    v619 = v99;
  else
    v619 = 0;
  v620 = v619 + v618;
  if (v492)
    v621 = v99;
  else
    v621 = 0;
  v622 = v621 + v493;
  v623 = v622 + v620;
  v624 = __CFADD__(v622, v620) || v622 + v620 > 0xFFFFFFFFFFFFFFCALL;
  if (v130 >= 0xFFFFFFFFFFFFFFD9)
    v625 = v98;
  else
    v625 = 0;
  v626 = v625 + v130;
  v627 = 1116288 * v626;
  v628 = ((v626 * (unsigned __int128)0x110880uLL) >> 64) * (unint64_t)v98;
  v301 = __CFADD__(v628, v627);
  v629 = v628 + v627;
  if (v301)
    v630 = v98;
  else
    v630 = 0;
  v631 = v630 + v629 > 0xFFFFFFFFFFFFFFD8;
  v301 = __CFADD__(v630, v629);
  v632 = v630 + v629;
  if (v301)
    v631 = 1;
  if (v234 >= 0xFFFFFFFFFFFFFFD9)
    v633 = v98;
  else
    v633 = 0;
  v634 = v633 + v234;
  v635 = 881280 * v634;
  v636 = ((v634 * (unsigned __int128)0xD7280uLL) >> 64) * (unint64_t)v98;
  v301 = __CFADD__(v636, v635);
  v637 = v636 + v635;
  if (v301)
    v638 = v98;
  else
    v638 = 0;
  v639 = v638 + v637 > 0xFFFFFFFFFFFFFFD8;
  v301 = __CFADD__(v638, v637);
  v640 = v638 + v637;
  v641 = STACK[0x3B48] * STACK[0x3C28];
  v642 = (STACK[0x3B48] * (unsigned __int128)STACK[0x3C28]) >> 64;
  v643 = (v642 * (unsigned __int128)v98) >> 64;
  v644 = v642 * v98;
  if (v301)
    v639 = 1;
  v301 = __CFADD__(v644, v641);
  v645 = v644 + v641;
  if (v301)
    v646 = v643 + 1;
  else
    v646 = v643;
  v647 = v646 * v98;
  v301 = __CFADD__(v647, v645);
  v648 = v647 + v645;
  v649 = v301;
  if (v648 > 0xFFFFFFFFFFFFFFD8)
    v649 = 1;
  if (v649)
    v650 = v98;
  else
    v650 = 0;
  v651 = v650 + v648;
  if (v210 >= 0xFFFFFFFFFFFFFFD9)
    v652 = v98;
  else
    v652 = 0;
  v653 = v652 + v210;
  v654 = 930240 * v653;
  v655 = (v653 * (unsigned __int128)0xE31C0uLL) >> 64;
  if (v639)
    v656 = v98;
  else
    v656 = 0;
  v657 = v656 + v640;
  if (v657 >= 0xFFFFFFFFFFFFFFD9)
    v658 = v98;
  else
    v658 = 0;
  v659 = v655 * (unint64_t)v98;
  v660 = v658 + v657;
  v661 = v659 + v654;
  if (__CFADD__(v659, v654))
    v662 = v98;
  else
    v662 = 0;
  v301 = __CFADD__(v662, v661);
  v663 = v662 + v661;
  v664 = v301;
  if (v663 > 0xFFFFFFFFFFFFFFD8)
    v664 = 1;
  if (v170 >= 0xFFFFFFFFFFFFFFD9)
    v665 = v98;
  else
    v665 = 0;
  if (v664)
    v666 = v98;
  else
    v666 = 0;
  v667 = v666 + v663;
  v668 = v665 + v170;
  v669 = 984960 * (v665 + v170);
  v301 = __CFADD__(v667, v660);
  v670 = v667 + v660;
  v671 = ((v668 * (unsigned __int128)0xF0780uLL) >> 64) * (unint64_t)v98;
  v672 = v301;
  if (v670 > 0xFFFFFFFFFFFFFFD8)
    v672 = 1;
  if (v672)
    v673 = v98;
  else
    v673 = 0;
  v301 = __CFADD__(v671, v669);
  v674 = v671 + v669;
  v675 = v673 + v670;
  if (v301)
    v676 = v98;
  else
    v676 = 0;
  v301 = __CFADD__(v676, v674);
  v677 = v676 + v674;
  v678 = v301;
  if (v677 > 0xFFFFFFFFFFFFFFD8)
    v678 = 1;
  if (v678)
    v679 = v98;
  else
    v679 = 0;
  v680 = v677 + v679 + v675;
  if (v294 >= 0xFFFFFFFFFFFFFFD9)
    v681 = v98;
  else
    v681 = 0;
  v682 = v675 > v680 || v680 > 0xFFFFFFFFFFFFFFD8;
  v683 = v681 + v294;
  v684 = 1395360 * (v681 + v294);
  v685 = ((v683 * (unsigned __int128)0x154AA0uLL) >> 64) * (unint64_t)v98;
  if (v682)
    v686 = v98;
  else
    v686 = 0;
  v687 = v686 + v680;
  if (v631)
    v688 = v98;
  else
    v688 = 0;
  v689 = v688 + v632;
  v301 = __CFADD__(v689, v687);
  v690 = v689 + v687;
  v691 = v301;
  if (v690 > 0xFFFFFFFFFFFFFFD8)
    v691 = 1;
  v301 = __CFADD__(v685, v684);
  v692 = v685 + v684;
  if (v301)
    v693 = v98;
  else
    v693 = 0;
  if (v691)
    v694 = v98;
  else
    v694 = 0;
  v301 = __CFADD__(v693, v692);
  v695 = v693 + v692;
  v696 = v301;
  v697 = v694 + v690;
  if (v695 > 0xFFFFFFFFFFFFFFD8)
    v698 = 1;
  else
    v698 = v696;
  if (v698)
    v699 = v98;
  else
    v699 = 0;
  v700 = v699 + v695;
  v301 = __CFADD__(v700, v697);
  v701 = v700 + v697;
  v702 = v301;
  if (v701 > 0xFFFFFFFFFFFFFFD8)
    v702 = 1;
  if (v702)
    v703 = v98;
  else
    v703 = 0;
  v704 = v703 + v701;
  v705 = 0x40685A60ABFE0A21 * v704;
  v706 = (v704 * (unsigned __int128)0x40685A60ABFE0A21uLL) >> 64;
  v707 = (v706 * (unsigned __int128)v98) >> 64;
  v708 = v706 * v98;
  v301 = __CFADD__(v708, v705);
  v709 = v708 + v705;
  if (v301)
    v710 = v707 + 1;
  else
    v710 = v707;
  v711 = v710 * v98;
  v301 = __CFADD__(v711, v709);
  v712 = v711 + v709;
  v713 = v301;
  if (v712 > 0xFFFFFFFFFFFFFFD8)
    v713 = 1;
  if (v713)
    v714 = v98;
  else
    v714 = 0;
  v715 = v714 + v712;
  v301 = __CFADD__(v651, v715);
  v716 = v651 + v715;
  v717 = v301;
  if (v716 > 0xFFFFFFFFFFFFFFD8)
    v717 = 1;
  if (v717)
    v718 = v98;
  else
    v718 = 0;
  v719 = v718 + v716;
  v720 = 0x68180B91CEB03F68 * v719;
  v721 = (v719 * (unsigned __int128)0x68180B91CEB03F68uLL) >> 64;
  v722 = (v721 * (unsigned __int128)v98) >> 64;
  v723 = v721 * v98;
  v301 = __CFADD__(v723, v720);
  v724 = v723 + v720;
  if (v301)
    v725 = v722 + 1;
  else
    v725 = v722;
  v726 = v725 * v98;
  v301 = __CFADD__(v726, v724);
  v727 = v726 + v724;
  v728 = v301;
  if (v727 > 0xFFFFFFFFFFFFFFD8)
    v728 = 1;
  if (v728)
    v729 = v98;
  else
    v729 = 0;
  v730 = v729 + v727;
  STACK[0x3BE8] = v730;
  v731 = (v730 * (unsigned __int128)0x56433B79890CEDD9uLL) >> 64;
  v732 = (v731 * (unsigned __int128)v98) >> 64;
  v733 = v731 * v98;
  v734 = v733 + 0x56433B79890CEDD9 * v730;
  if (__CFADD__(v733, 0x56433B79890CEDD9 * v730))
    v735 = v732 + 1;
  else
    v735 = v732;
  v736 = v735 * v98;
  v737 = v736 + v734 > 0xFFFFFFFFFFFFFFD8;
  v301 = __CFADD__(v736, v734);
  v738 = v736 + v734;
  if (v301 || v737)
    v740 = v98;
  else
    v740 = 0;
  v741 = v740 + v738;
  if (v741 >= 0xFFFFFFFFFFFFFFCBLL)
    v742 = v99;
  else
    v742 = 0;
  v743 = v742 + v741;
  v744 = 34560 * v743;
  v745 = ((v743 * (unsigned __int128)0x8700uLL) >> 64) * (unint64_t)v99;
  v301 = __CFADD__(v745, v744);
  v746 = v745 + v744;
  if (v301)
    v747 = v99;
  else
    v747 = 0;
  v301 = __CFADD__(v747, v746);
  v748 = v747 + v746;
  v749 = v301;
  if (v748 > 0xFFFFFFFFFFFFFFCALL)
    v749 = 1;
  if (v624)
    v750 = v99;
  else
    v750 = 0;
  v751 = v750 + v623;
  if (v749)
    v752 = v99;
  else
    v752 = 0;
  v753 = v752 + v748;
  v301 = __CFADD__(v753, v751);
  v754 = v753 + v751;
  v755 = v301;
  if (v754 > 0xFFFFFFFFFFFFFFCALL)
    v755 = 1;
  if (v755)
    v756 = v99;
  else
    v756 = 0;
  v757 = v756 + v754;
  if (v367)
    v758 = v99;
  else
    v758 = 0;
  v759 = v758 + v366;
  v760 = v759 + v757 > 0xFFFFFFFFFFFFFFCALL;
  v761 = v759 + v757;
  if (__CFADD__(v759, v757))
    v760 = 1;
  if (v294 >= 0xFFFFFFFFFFFFFFD1)
    v762 = v100;
  else
    v762 = 0;
  v763 = v762 + v294;
  v764 = 3230304 * v763;
  v765 = ((v763 * (unsigned __int128)0x314A60uLL) >> 64) * (unint64_t)v100;
  v301 = __CFADD__(v765, v764);
  v766 = v765 + v764;
  if (v301)
    v767 = v100;
  else
    v767 = 0;
  v768 = v767 + v766 > 0xFFFFFFFFFFFFFFD0;
  v301 = __CFADD__(v767, v766);
  v769 = v767 + v766;
  v770 = v301 || v768;
  if (v130 >= 0xFFFFFFFFFFFFFFD1)
    v771 = v100;
  else
    v771 = 0;
  v772 = v771 + v130;
  v773 = 2720256 * v772;
  v774 = ((v772 * (unsigned __int128)0x298200uLL) >> 64) * (unint64_t)v100;
  v301 = __CFADD__(v774, v773);
  v775 = v774 + v773;
  if (v301)
    v776 = v100;
  else
    v776 = 0;
  v777 = v776 + v775 > 0xFFFFFFFFFFFFFFD0;
  v301 = __CFADD__(v776, v775);
  v778 = v776 + v775;
  v779 = v301 || v777;
  if (v234 >= 0xFFFFFFFFFFFFFFD1)
    v780 = v100;
  else
    v780 = 0;
  v781 = v780 + v234;
  v782 = 2247168 * v781;
  v783 = (v781 * (unsigned __int128)0x224A00uLL) >> 64;
  if (v210 >= 0xFFFFFFFFFFFFFFD1)
    v784 = v100;
  else
    v784 = 0;
  v785 = v784 + v210;
  v786 = 2349312 * v785;
  v787 = v783 * (unint64_t)v100;
  v301 = __CFADD__(v787, v782);
  v788 = v787 + v782;
  if (v301)
    v789 = v100;
  else
    v789 = 0;
  v301 = __CFADD__(v789, v788);
  v790 = v789 + v788;
  v791 = (v785 * (unsigned __int128)0x23D900uLL) >> 64;
  v792 = v301;
  v793 = v791 * (unint64_t)v100;
  if (v790 > 0xFFFFFFFFFFFFFFD0)
    v792 = 1;
  if (v792)
    v794 = v100;
  else
    v794 = 0;
  v301 = __CFADD__(v793, v786);
  v795 = v793 + v786;
  v796 = v794 + v790;
  if (v301)
    v797 = v100;
  else
    v797 = 0;
  v301 = __CFADD__(v797, v795);
  v798 = v797 + v795;
  v799 = v301;
  if (v796 >= 0xFFFFFFFFFFFFFFD1)
    v800 = v100;
  else
    v800 = 0;
  if (v798 > 0xFFFFFFFFFFFFFFD0)
    v799 = 1;
  if (v799)
    v801 = v100;
  else
    v801 = 0;
  v802 = v800 + v796;
  v803 = v801 + v798;
  v804 = v803 + v802 > 0xFFFFFFFFFFFFFFD0;
  v301 = __CFADD__(v803, v802);
  v805 = v803 + v802;
  v806 = v301 || v804;
  if (v170 >= 0xFFFFFFFFFFFFFFD1)
    v807 = v100;
  else
    v807 = 0;
  v808 = v807 + v170;
  v809 = 2461184 * v808;
  v810 = ((v808 * (unsigned __int128)0x258E00uLL) >> 64) * (unint64_t)v100;
  v301 = __CFADD__(v810, v809);
  v811 = v810 + v809;
  if (v301)
    v812 = v100;
  else
    v812 = 0;
  v301 = __CFADD__(v812, v811);
  v813 = v812 + v811;
  v814 = v301;
  if (v806)
    v815 = v100;
  else
    v815 = 0;
  if (v813 > 0xFFFFFFFFFFFFFFD0)
    v814 = 1;
  if (v814)
    v816 = v100;
  else
    v816 = 0;
  v817 = v815 + v805;
  v818 = v813 + v816 + v817;
  if (v817 > v818 || v818 > 0xFFFFFFFFFFFFFFD0)
    v820 = v100;
  else
    v820 = 0;
  v821 = v820 + v818;
  if (v779)
    v822 = v100;
  else
    v822 = 0;
  v823 = v822 + v778;
  v301 = __CFADD__(v823, v821);
  v824 = v823 + v821;
  v825 = v301;
  if (v824 > 0xFFFFFFFFFFFFFFD0)
    v825 = 1;
  if (v825)
    v826 = v100;
  else
    v826 = 0;
  v827 = v826 + v824;
  if (v770)
    v828 = v100;
  else
    v828 = 0;
  v829 = v828 + v769;
  v830 = v829 + v827 > 0xFFFFFFFFFFFFFFD0;
  v301 = __CFADD__(v829, v827);
  v831 = v829 + v827;
  v832 = STACK[0x3B60] * STACK[0x3B50];
  v833 = (STACK[0x3B60] * (unsigned __int128)STACK[0x3B50]) >> 64;
  v834 = (v833 * (unsigned __int128)v100) >> 64;
  v835 = v833 * v100;
  if (v301)
    v830 = 1;
  v301 = __CFADD__(v835, v832);
  v836 = v835 + v832;
  if (v301)
    v837 = v834 + 1;
  else
    v837 = v834;
  v838 = v837 * v100;
  v301 = __CFADD__(v838, v836);
  v839 = v838 + v836;
  v840 = v301;
  if (v839 > 0xFFFFFFFFFFFFFFD0)
    v840 = 1;
  if (v840)
    v841 = v100;
  else
    v841 = 0;
  v842 = v841 + v839;
  if (v830)
    v843 = v100;
  else
    v843 = 0;
  v844 = v843 + v831;
  v845 = 0xF9CF898C924065FBLL * v844;
  v846 = (v844 * (unsigned __int128)0xF9CF898C924065FBLL) >> 64;
  v847 = (v846 * (unsigned __int128)v100) >> 64;
  v848 = v846 * v100;
  v301 = __CFADD__(v848, v845);
  v849 = v848 + v845;
  if (v301)
    v850 = v847 + 1;
  else
    v850 = v847;
  v851 = v850 * v100;
  v301 = __CFADD__(v851, v849);
  v852 = v851 + v849;
  v853 = v301;
  if (v852 > 0xFFFFFFFFFFFFFFD0)
    v853 = 1;
  if (v853)
    v854 = v100;
  else
    v854 = 0;
  v855 = v854 + v852;
  v301 = __CFADD__(v842, v855);
  v856 = v842 + v855;
  v857 = v301;
  if (v856 > 0xFFFFFFFFFFFFFFD0)
    v857 = 1;
  if (v857)
    v858 = v100;
  else
    v858 = 0;
  v859 = v858 + v856;
  v860 = 0x5C1DC82ED83E4DC6 * v859;
  v861 = (v859 * (unsigned __int128)0x5C1DC82ED83E4DC6uLL) >> 64;
  v862 = (v861 * (unsigned __int128)v100) >> 64;
  v863 = v861 * v100;
  v301 = __CFADD__(v863, v860);
  v864 = v863 + v860;
  if (v301)
    v865 = v862 + 1;
  else
    v865 = v862;
  v866 = v865 * v100;
  v867 = (unint64_t)(v866 + v864) > 0xFFFFFFFFFFFFFFD0;
  v301 = __CFADD__(v866, v864);
  v868 = v866 + v864;
  if (v301 || v867)
    v870 = v100;
  else
    v870 = 0;
  v871 = v870 + v868;
  v872 = 0xA52E52E52E52E51 * v871;
  STACK[0x3C00] = v871;
  v873 = (v871 * (unsigned __int128)0xA52E52E52E52E51uLL) >> 64;
  v874 = (v873 * (unsigned __int128)v100) >> 64;
  v875 = v873 * v100;
  v301 = __CFADD__(v875, v872);
  v876 = v875 + v872;
  if (v301)
    v877 = v874 + 1;
  else
    v877 = v874;
  v878 = v877 * v100;
  v879 = v878 + v876;
  v880 = __CFADD__(v878, v876) || (unint64_t)(v878 + v876) > 0xFFFFFFFFFFFFFFD0;
  if (v294 >= 0xFFFFFFFFFFFFFFCBLL)
    v881 = v99;
  else
    v881 = 0;
  v882 = v881 + v294;
  v883 = 5491200 * v882;
  v884 = ((v882 * (unsigned __int128)0x53CA00uLL) >> 64) * (unint64_t)v99;
  v301 = __CFADD__(v884, v883);
  v885 = v884 + v883;
  if (v301)
    v886 = v99;
  else
    v886 = 0;
  v887 = v886 + v885 > 0xFFFFFFFFFFFFFFCALL;
  v888 = v886 + v885;
  if (__CFADD__(v886, v885))
    v887 = 1;
  if (v130 >= 0xFFFFFFFFFFFFFFCBLL)
    v889 = v99;
  else
    v889 = 0;
  v890 = v889 + v130;
  v891 = 4742400 * v890;
  v892 = ((v890 * (unsigned __int128)0x485D00uLL) >> 64) * (unint64_t)v99;
  v301 = __CFADD__(v892, v891);
  v893 = v892 + v891;
  if (v301)
    v894 = v99;
  else
    v894 = 0;
  v895 = v894 + v893 > 0xFFFFFFFFFFFFFFCALL;
  v301 = __CFADD__(v894, v893);
  v896 = v894 + v893;
  v897 = v301 || v895;
  if (v210 >= 0xFFFFFFFFFFFFFFCBLL)
    v898 = v99;
  else
    v898 = 0;
  v899 = v898 + v210;
  v900 = 4173312 * v899;
  v901 = ((v899 * (unsigned __int128)0x3FAE00uLL) >> 64) * (unint64_t)v99;
  v301 = __CFADD__(v901, v900);
  v902 = v901 + v900;
  if (v301)
    v903 = v99;
  else
    v903 = 0;
  v904 = v903 + v902 > 0xFFFFFFFFFFFFFFCALL;
  v301 = __CFADD__(v903, v902);
  v905 = v903 + v902;
  v906 = v301 || v904;
  if (v234 >= 0xFFFFFFFFFFFFFFCBLL)
    v907 = v99;
  else
    v907 = 0;
  v908 = v907 + v234;
  v909 = 4012800 * v908;
  v910 = ((v908 * (unsigned __int128)0x3D3B00uLL) >> 64) * (unint64_t)v99;
  v301 = __CFADD__(v910, v909);
  v911 = v910 + v909;
  if (v301)
    v912 = v99;
  else
    v912 = 0;
  v301 = __CFADD__(v912, v911);
  v913 = v912 + v911;
  v914 = v301;
  if (v913 > 0xFFFFFFFFFFFFFFCALL)
    v914 = 1;
  if (v914)
    v915 = v99;
  else
    v915 = 0;
  v916 = v915 + v913;
  if (v916 >= 0xFFFFFFFFFFFFFFCBLL)
    v917 = v99;
  else
    v917 = 0;
  if (v906)
    v918 = v99;
  else
    v918 = 0;
  v919 = v917 + v916;
  v920 = v918 + v905;
  v921 = v920 + v919 > 0xFFFFFFFFFFFFFFCALL;
  v301 = __CFADD__(v920, v919);
  v922 = v920 + v919;
  v923 = v301 || v921;
  if (v170 >= 0xFFFFFFFFFFFFFFCBLL)
    v924 = v99;
  else
    v924 = 0;
  v925 = v924 + v170;
  v926 = 4347200 * v925;
  v927 = ((v925 * (unsigned __int128)0x425540uLL) >> 64) * (unint64_t)v99;
  if (v923)
    v928 = v99;
  else
    v928 = 0;
  v301 = __CFADD__(v927, v926);
  v929 = v927 + v926;
  if (v301)
    v930 = v99;
  else
    v930 = 0;
  v301 = __CFADD__(v930, v929);
  v931 = v930 + v929;
  v932 = v301;
  if (v931 > 0xFFFFFFFFFFFFFFCALL)
    v932 = 1;
  if (v932)
    v933 = v99;
  else
    v933 = 0;
  v934 = v928 + v922;
  v935 = v931 + v933 + v934;
  if (v935 <= 0xFFFFFFFFFFFFFFCALL && v935 >= v934)
    v937 = 0;
  else
    v937 = v99;
  v938 = v937 + v935;
  if (v897)
    v939 = v99;
  else
    v939 = 0;
  v940 = v939 + v896;
  v941 = v940 + v938 > 0xFFFFFFFFFFFFFFCALL;
  v301 = __CFADD__(v940, v938);
  v942 = v940 + v938;
  v943 = STACK[0x3B40] * STACK[0x3C20];
  v944 = (STACK[0x3B40] * (unsigned __int128)STACK[0x3C20]) >> 64;
  v945 = (v944 * (unsigned __int128)v99) >> 64;
  v946 = v944 * v99;
  if (v301)
    v941 = 1;
  v301 = __CFADD__(v946, v943);
  v947 = v946 + v943;
  if (v301)
    v948 = v945 + 1;
  else
    v948 = v945;
  v949 = v948 * v99;
  v950 = v949 + v947 > 0xFFFFFFFFFFFFFFCALL;
  v301 = __CFADD__(v949, v947);
  v951 = v949 + v947;
  if (v301 || v950)
    v953 = v99;
  else
    v953 = 0;
  v954 = v953 + v951;
  if (v941)
    v955 = v99;
  else
    v955 = 0;
  v956 = v955 + v942;
  if (v887)
    v957 = v99;
  else
    v957 = 0;
  v958 = v957 + v888;
  v301 = __CFADD__(v958, v956);
  v959 = v958 + v956;
  v960 = v301;
  if (v959 > 0xFFFFFFFFFFFFFFCALL)
    v960 = 1;
  if (v960)
    v961 = v99;
  else
    v961 = 0;
  v962 = v961 + v959;
  v963 = 0xA64A3E2F1B4DE8E6 * v962;
  v964 = (v962 * (unsigned __int128)0xA64A3E2F1B4DE8E6) >> 64;
  v965 = (v964 * (unsigned __int128)v99) >> 64;
  v966 = v964 * v99;
  v301 = __CFADD__(v966, v963);
  v967 = v966 + v963;
  if (v301)
    v968 = v965 + 1;
  else
    v968 = v965;
  v969 = v968 * v99;
  v301 = __CFADD__(v969, v967);
  v970 = v969 + v967;
  v971 = v301;
  if (v970 > 0xFFFFFFFFFFFFFFCALL)
    v971 = 1;
  if (v971)
    v972 = v99;
  else
    v972 = 0;
  v973 = v972 + v970;
  v974 = v954 + v973 > 0xFFFFFFFFFFFFFFCALL;
  v301 = __CFADD__(v954, v973);
  v975 = v954 + v973;
  if (v301)
    v974 = 1;
  if (v974)
    v976 = v99;
  else
    v976 = 0;
  v977 = v976 + v975;
  v978 = 0x59708602BDC08F49 * v977;
  v979 = (v977 * (unsigned __int128)0x59708602BDC08F49uLL) >> 64;
  v980 = (v979 * (unsigned __int128)v99) >> 64;
  v981 = v979 * v99;
  v301 = __CFADD__(v981, v978);
  v982 = v981 + v978;
  if (v301)
    v983 = v980 + 1;
  else
    v983 = v980;
  v984 = v983 * v99;
  v301 = __CFADD__(v984, v982);
  v985 = v984 + v982;
  v986 = v301;
  if (v985 > 0xFFFFFFFFFFFFFFCALL)
    v986 = 1;
  if (v986)
    v987 = v99;
  else
    v987 = 0;
  v988 = v987 + v985;
  if (v880)
    v989 = v100;
  else
    v989 = 0;
  v990 = v989 + v879;
  if (v989 + v879 >= 0xFFFFFFFFFFFFFFCBLL)
    v991 = v99;
  else
    v991 = 0;
  v992 = v991 + v990;
  v993 = 80640 * v992;
  v994 = ((v992 * (unsigned __int128)0x13B00uLL) >> 64) * (unint64_t)v99;
  if (v760)
    v995 = v99;
  else
    v995 = 0;
  v301 = __CFADD__(v994, v993);
  v996 = v994 + v993;
  v997 = v995 + v761;
  if (v301)
    v998 = v99;
  else
    v998 = 0;
  v301 = __CFADD__(v998, v996);
  v999 = v998 + v996;
  v1000 = v301;
  if (v999 > 0xFFFFFFFFFFFFFFCALL)
    v1000 = 1;
  if (v1000)
    v1001 = v99;
  else
    v1001 = 0;
  v1002 = v1001 + v999;
  v301 = __CFADD__(v1002, v997);
  v1003 = v1002 + v997;
  v1004 = v301;
  if (v1003 > 0xFFFFFFFFFFFFFFCALL)
    v1004 = 1;
  if (v1004)
    v1005 = v99;
  else
    v1005 = 0;
  v1006 = v1005 + v1003;
  STACK[0x3BE0] = v988;
  v301 = v1006 >= v988;
  v1007 = v1006 - v988;
  if (v301)
    v1008 = 0;
  else
    v1008 = -53;
  v1009 = v1007 + v1008;
  v1010 = 0xF1A85D307DB285A1 * v1009;
  v1011 = (v1009 * (unsigned __int128)0xF1A85D307DB285A1) >> 64;
  v1012 = (v1011 * (unsigned __int128)v99) >> 64;
  v1013 = v1011 * v99;
  v301 = __CFADD__(v1013, v1010);
  v1014 = v1013 + v1010;
  if (v301)
    v1015 = v1012 + 1;
  else
    v1015 = v1012;
  v1016 = v1015 * v99;
  v1017 = v1016 + v1014 > 0xFFFFFFFFFFFFFFCALL;
  v301 = __CFADD__(v1016, v1014);
  v1018 = v1016 + v1014;
  if (v301 || v1017)
    v1020 = v99;
  else
    v1020 = 0;
  v1021 = v1020 + v1018;
  if (v1020 + v1018 >= 0xFFFFFFFFFFFFFFF1)
    v1022 = v101;
  else
    v1022 = 0;
  v1023 = v1022 + v1021;
  v1024 = -829455 * v1023;
  v1025 = (v1023 * (unsigned __int128)0xFFFFFFFFFFF357F1) >> 64;
  v1026 = 15 * v1025;
  v1027 = (v1025 * (unsigned __int128)v101) >> 64;
  v301 = __CFADD__(v1026, v1024);
  v1028 = v1026 + v1024;
  if (v301)
    ++v1027;
  v1029 = 15 * v1027;
  STACK[0x3C38] = v1029 + v1028;
  v1030 = __CFADD__(v1029, v1028) || (unint64_t)(v1029 + v1028) > 0xFFFFFFFFFFFFFFF0;
  LODWORD(STACK[0x3C30]) = v1030;
  if (v1021 >= 0xFFFFFFFFFFFFFFF7)
    v1031 = 9;
  else
    v1031 = 0;
  v1032 = v1031 + v1021;
  v1033 = -7879689 * v1032;
  v1034 = (((v1032 * (unsigned __int128)0xFFFFFFFFFF87C3F7) >> 64) * 9) >> 64;
  v1035 = (__PAIR128__(8, -7879689) * v1032) >> 64;
  v301 = __CFADD__(v1035, v1033);
  v1036 = v1035 + v1033;
  if (v301)
    v1037 = v1034 + 1;
  else
    v1037 = v1034;
  v1038 = 9 * v1037;
  STACK[0x3C28] = v1038 + v1036;
  v1039 = __CFADD__(v1038, v1036) || (unint64_t)(v1038 + v1036) > 0xFFFFFFFFFFFFFFF6;
  LODWORD(STACK[0x3C20]) = v1039;
  if (v1021 >= 0xFFFFFFFFFFFFFFFBLL)
    v1040 = 5;
  else
    v1040 = 0;
  v1041 = v1040 + v1021;
  v1042 = -19192325 * v1041;
  v1043 = (((v1041 * (unsigned __int128)0xFFFFFFFFFEDB25FBLL) >> 64) * 5) >> 64;
  v1044 = (__PAIR128__(4, -19192325) * v1041) >> 64;
  v301 = __CFADD__(v1044, v1042);
  v1045 = v1044 + v1042;
  if (v301)
    v1046 = v1043 + 1;
  else
    v1046 = v1043;
  v1047 = 5 * v1046;
  v1048 = v1047 + v1045;
  v1049 = __CFADD__(v1047, v1045) || (unint64_t)(v1047 + v1045) > 0xFFFFFFFFFFFFFFFALL;
  if (v1021 == -1)
    v1050 = 0;
  else
    v1050 = v1021;
  v1051 = -39378945 * v1050;
  v1052 = (v1050 * (unsigned __int128)0xFFFFFFFFFDA71FFFLL) >> 64;
  v1053 = __CFADD__(__CFADD__(v1052, v1051), v1052 + v1051);
  v1054 = __CFADD__(v1052, v1051) + v1052 + v1051 == -1 || v1053;
  v1055 = v1052 + v1051 + __CFADD__(v1052, v1051) + v1054;
  if (v990 >= 0xFFFFFFFFFFFFFFF1)
    v1056 = v101;
  else
    v1056 = 0;
  v1057 = v1056 + v990;
  v1058 = 25920 * v1057;
  v1059 = 15 * ((v1057 * (unsigned __int128)0x6540uLL) >> 64);
  v301 = __CFADD__(v1059, v1058);
  v1060 = v1059 + v1058;
  if (v301)
    v1061 = v101;
  else
    v1061 = 0;
  v1062 = v1061 + v1060 > 0xFFFFFFFFFFFFFFF0;
  v301 = __CFADD__(v1061, v1060);
  v1063 = v1061 + v1060;
  if (v301)
    v1062 = 1;
  v1064 = STACK[0x3C78];
  if (STACK[0x3C78] >= 0xFFFFFFFFFFFFFFF1)
    v1065 = v101;
  else
    v1065 = 0;
  v1066 = v1065 + v1064;
  v1067 = 27648 * v1066;
  v1068 = 15 * ((v1066 * (unsigned __int128)0x6C00uLL) >> 64);
  v301 = __CFADD__(v1068, v1067);
  v1069 = v1068 + v1067;
  if (v301)
    v1070 = v101;
  else
    v1070 = 0;
  v1071 = v1070 + v1069 > 0xFFFFFFFFFFFFFFF0;
  v301 = __CFADD__(v1070, v1069);
  v1072 = v1070 + v1069;
  v1073 = v301 || v1071;
  if (v485 >= 0xFFFFFFFFFFFFFFF1)
    v1074 = v101;
  else
    v1074 = 0;
  v1075 = v1074 + v485;
  v1076 = 46080 * v1075;
  v1077 = 15 * ((v1075 * (unsigned __int128)0xB400uLL) >> 64);
  v301 = __CFADD__(v1077, v1076);
  v1078 = v1077 + v1076;
  if (v301)
    v1079 = 15;
  else
    v1079 = 0;
  v1080 = (unint64_t)(v1079 + v1078) > 0xFFFFFFFFFFFFFFF0;
  v301 = __CFADD__(v1079, v1078);
  v1081 = v1079 + v1078;
  v1082 = v301 || v1080;
  if (v608 >= 0xFFFFFFFFFFFFFFF1)
    v1083 = 15;
  else
    v1083 = 0;
  v1084 = v1083 + v608;
  v1085 = 414720 * v1084;
  v1086 = 15 * ((v1084 * (unsigned __int128)0x65400uLL) >> 64);
  v301 = __CFADD__(v1086, v1085);
  v1087 = v1086 + v1085;
  if (v301)
    v1088 = 15;
  else
    v1088 = 0;
  v301 = __CFADD__(v1088, v1087);
  v1089 = v1088 + v1087;
  v1090 = v301;
  if (v1089 > 0xFFFFFFFFFFFFFFF0)
    v1090 = 1;
  if (v1090)
    v1091 = 15;
  else
    v1091 = 0;
  v1092 = v1091 + v1089;
  if (v1092 >= 0xFFFFFFFFFFFFFFF1)
    v1093 = 15;
  else
    v1093 = 0;
  v1094 = v1093 + v1092;
  if (v1082)
    v1095 = 15;
  else
    v1095 = 0;
  v1096 = v1095 + v1081;
  v1097 = v1096 + v1094 > 0xFFFFFFFFFFFFFFF0;
  v301 = __CFADD__(v1096, v1094);
  v1098 = v1096 + v1094;
  if (v301)
    v1097 = 1;
  if (v741 >= 0xFFFFFFFFFFFFFFF1)
    v1099 = 15;
  else
    v1099 = 0;
  v1100 = v1099 + v741;
  v1101 = 34560 * v1100;
  v1102 = 15 * ((v1100 * (unsigned __int128)0x8700uLL) >> 64);
  v301 = __CFADD__(v1102, v1101);
  v1103 = v1102 + v1101;
  if (v301)
    v1104 = 15;
  else
    v1104 = 0;
  v301 = __CFADD__(v1104, v1103);
  v1105 = v1104 + v1103;
  v1106 = v301;
  if (v1097)
    v1107 = 15;
  else
    v1107 = 0;
  v1108 = v1107 + v1098;
  if (v1105 > 0xFFFFFFFFFFFFFFF0)
    v1109 = 1;
  else
    v1109 = v1106;
  if (v1109)
    v1110 = 15;
  else
    v1110 = 0;
  v1111 = v1110 + v1105;
  v301 = __CFADD__(v1111, v1108);
  v1112 = v1111 + v1108;
  v1113 = v301;
  if (v1112 > 0xFFFFFFFFFFFFFFF0)
    v1113 = 1;
  if (v1113)
    v1114 = 15;
  else
    v1114 = 0;
  if (v1073)
    v1115 = 15;
  else
    v1115 = 0;
  v1116 = v1114 + v1112;
  v1117 = v1115 + v1072;
  v301 = __CFADD__(v1117, v1116);
  v1118 = v1117 + v1116;
  v1119 = v301;
  if (v1118 > 0xFFFFFFFFFFFFFFF0)
    v1119 = 1;
  if (v1119)
    v1120 = 15;
  else
    v1120 = 0;
  if (v1062)
    v1121 = 15;
  else
    v1121 = 0;
  v1122 = v1121 + v1063;
  v1123 = v1120 + v1118;
  v1124 = v1122 + v1123;
  v1125 = __CFADD__(v1122, v1123) || v1122 + v1123 > 0xFFFFFFFFFFFFFFF0;
  if (v990 >= 0xFFFFFFFFFFFFFFF7)
    v1126 = 9;
  else
    v1126 = 0;
  v1127 = v1126 + v990;
  v1128 = 207360 * v1127;
  v1129 = (__PAIR128__(8, 207360) * v1127) >> 64;
  v301 = __CFADD__(v1129, v1128);
  v1130 = v1129 + v1128;
  if (v301)
    v1131 = 9;
  else
    v1131 = 0;
  v1132 = (unint64_t)(v1131 + v1130) > 0xFFFFFFFFFFFFFFF6;
  v301 = __CFADD__(v1131, v1130);
  v1133 = v1131 + v1130;
  if (v301)
    v1132 = 1;
  if (v1064 >= 0xFFFFFFFFFFFFFFF7)
    v1134 = 9;
  else
    v1134 = 0;
  v1135 = v1134 + v1064;
  v1136 = 218880 * v1135;
  v1137 = (__PAIR128__(8, 218880) * v1135) >> 64;
  v301 = __CFADD__(v1137, v1136);
  v1138 = v1137 + v1136;
  if (v301)
    v1139 = 9;
  else
    v1139 = 0;
  v1140 = (unint64_t)(v1139 + v1138) > 0xFFFFFFFFFFFFFFF6;
  v301 = __CFADD__(v1139, v1138);
  v1141 = v1139 + v1138;
  v1142 = v301 || v1140;
  if (v608 >= 0xFFFFFFFFFFFFFFF7)
    v1143 = 9;
  else
    v1143 = 0;
  v1144 = v1143 + v608;
  v1145 = 984960 * v1144;
  v1146 = (__PAIR128__(8, 984960) * v1144) >> 64;
  v301 = __CFADD__(v1146, v1145);
  v1147 = v1146 + v1145;
  if (v301)
    v1148 = 9;
  else
    v1148 = 0;
  v1149 = (unint64_t)(v1148 + v1147) > 0xFFFFFFFFFFFFFFF6;
  v301 = __CFADD__(v1148, v1147);
  v1150 = v1148 + v1147;
  v1151 = v301 || v1149;
  if (v485 >= 0xFFFFFFFFFFFFFFF7)
    v1152 = 9;
  else
    v1152 = 0;
  v1153 = v1152 + v485;
  v1154 = 328320 * v1153;
  v1155 = (__PAIR128__(8, 328320) * v1153) >> 64;
  v301 = __CFADD__(v1155, v1154);
  v1156 = v1155 + v1154;
  if (v301)
    v1157 = 9;
  else
    v1157 = 0;
  v301 = __CFADD__(v1157, v1156);
  v1158 = v1157 + v1156;
  v1159 = v301;
  if (v1158 > 0xFFFFFFFFFFFFFFF6)
    v1159 = 1;
  if (v1151)
    v1160 = 9;
  else
    v1160 = 0;
  if (v1159)
    v1161 = 9;
  else
    v1161 = 0;
  v1162 = v1160 + v1150;
  v1163 = v1161 + v1158;
  if (v741 >= 0xFFFFFFFFFFFFFFF7)
    v1164 = 9;
  else
    v1164 = 0;
  v1165 = v1164 + v741;
  if (v1162 >= 0xFFFFFFFFFFFFFFF7)
    v1166 = 9;
  else
    v1166 = 0;
  v1167 = 513 * v1165;
  v1168 = v1166 + v1162;
  v301 = __CFADD__(v1163, v1168);
  v1169 = v1163 + v1168;
  v1170 = (__PAIR128__(8, 262656) * v1165) >> 64;
  v1171 = v301;
  if (v1169 > 0xFFFFFFFFFFFFFFF6)
    v1171 = 1;
  v301 = __CFADD__(v1170, v1167 << 9);
  v1172 = v1170 + (v1167 << 9);
  if (v301)
    v1173 = 9;
  else
    v1173 = 0;
  v301 = __CFADD__(v1173, v1172);
  v1174 = v1173 + v1172;
  v1175 = v301;
  if (v1171)
    v1176 = 9;
  else
    v1176 = 0;
  v1177 = v1176 + v1169;
  if (v1174 > 0xFFFFFFFFFFFFFFF6)
    v1178 = 1;
  else
    v1178 = v1175;
  if (v1178)
    v1179 = 9;
  else
    v1179 = 0;
  v1180 = v1179 + v1174;
  v1181 = v1180 + v1177 > 0xFFFFFFFFFFFFFFF6;
  v301 = __CFADD__(v1180, v1177);
  v1182 = v1180 + v1177;
  if (v301 || v1181)
    v1184 = 9;
  else
    v1184 = 0;
  if (v1142)
    v1185 = 9;
  else
    v1185 = 0;
  v1186 = v1184 + v1182;
  v1187 = v1185 + v1141;
  v301 = __CFADD__(v1187, v1186);
  v1188 = v1187 + v1186;
  v1189 = v301;
  if (v1188 > 0xFFFFFFFFFFFFFFF6)
    v1189 = 1;
  if (v1189)
    v1190 = 9;
  else
    v1190 = 0;
  v1191 = v1190 + v1188;
  if (v1132)
    v1192 = 9;
  else
    v1192 = 0;
  v1193 = v1192 + v1133;
  v1194 = v1193 + v1191;
  v1195 = __CFADD__(v1193, v1191) || v1193 + v1191 > 0xFFFFFFFFFFFFFFF6;
  if (v741 >= 0xFFFFFFFFFFFFFFFBLL)
    v1196 = 5;
  else
    v1196 = 0;
  v1197 = v1196 + v741;
  v1198 = 564480 * v1197;
  v1199 = (__PAIR128__(4, 564480) * v1197) >> 64;
  v301 = __CFADD__(v1199, v1198);
  v1200 = v1199 + v1198;
  if (v301)
    v1201 = 5;
  else
    v1201 = 0;
  v1202 = (unint64_t)(v1201 + v1200) > 0xFFFFFFFFFFFFFFFALL;
  v301 = __CFADD__(v1201, v1200);
  v1203 = v1201 + v1200;
  v1204 = v301 || v1202;
  v1205 = v485;
  if (v485 >= 0xFFFFFFFFFFFFFFFBLL)
    v1206 = 5;
  else
    v1206 = 0;
  v1207 = v1206 + v485;
  v1208 = 685440 * v1207;
  v1209 = (__PAIR128__(4, 685440) * v1207) >> 64;
  v301 = __CFADD__(v1209, v1208);
  v1210 = v1209 + v1208;
  if (v301)
    v1211 = 5;
  else
    v1211 = 0;
  v1212 = (unint64_t)(v1211 + v1210) > 0xFFFFFFFFFFFFFFFALL;
  v301 = __CFADD__(v1211, v1210);
  v1213 = v1211 + v1210;
  v1214 = v301 || v1212;
  if (v608 >= 0xFFFFFFFFFFFFFFFBLL)
    v1215 = 5;
  else
    v1215 = 0;
  v1216 = v1215 + v608;
  v1217 = 1599360 * v1216;
  v1218 = (__PAIR128__(4, 1599360) * v1216) >> 64;
  v301 = __CFADD__(v1218, v1217);
  v1219 = v1218 + v1217;
  if (v301)
    v1220 = 5;
  else
    v1220 = 0;
  v1221 = (unint64_t)(v1220 + v1219) > 0xFFFFFFFFFFFFFFFALL;
  v301 = __CFADD__(v1220, v1219);
  v1222 = v1220 + v1219;
  if (v301 || v1221)
    v1224 = 5;
  else
    v1224 = 0;
  v1225 = v1224 + v1222;
  if (v1225 >= 0xFFFFFFFFFFFFFFFBLL)
    v1226 = 5;
  else
    v1226 = 0;
  v1227 = v1226 + v1225;
  if (v1214)
    v1228 = 5;
  else
    v1228 = 0;
  v1229 = v1228 + v1213;
  v301 = __CFADD__(v1229, v1227);
  v1230 = v1229 + v1227;
  v1231 = v301;
  if (v1230 > 0xFFFFFFFFFFFFFFFALL)
    v1231 = 1;
  if (v1231)
    v1232 = 5;
  else
    v1232 = 0;
  v1233 = v1232 + v1230;
  if (v1204)
    v1234 = 5;
  else
    v1234 = 0;
  v1235 = v1234 + v1203;
  v1236 = v1235 + v1233 > 0xFFFFFFFFFFFFFFFALL;
  v301 = __CFADD__(v1235, v1233);
  v1237 = v1235 + v1233;
  if (v301)
    v1236 = 1;
  if (v1064 >= 0xFFFFFFFFFFFFFFFBLL)
    v1238 = 5;
  else
    v1238 = 0;
  v1239 = v1238 + v1064;
  v1240 = 479808 * v1239;
  v1241 = (__PAIR128__(4, 479808) * v1239) >> 64;
  v301 = __CFADD__(v1241, v1240);
  v1242 = v1241 + v1240;
  if (v301)
    v1243 = 5;
  else
    v1243 = 0;
  v301 = __CFADD__(v1243, v1242);
  v1244 = v1243 + v1242;
  v1245 = v301;
  if (v1244 > 0xFFFFFFFFFFFFFFFALL)
    v1245 = 1;
  if (v1245)
    v1246 = 5;
  else
    v1246 = 0;
  if (v1236)
    v1247 = 5;
  else
    v1247 = 0;
  v1248 = v1247 + v1237;
  v1249 = v1246 + v1244;
  v1250 = v1246 + v1244 + v1248 > 0xFFFFFFFFFFFFFFFALL;
  v1251 = v1249 + v1248;
  v1252 = __CFADD__(v1249, v1248) || v1250;
  if (v990 >= 0xFFFFFFFFFFFFFFFBLL)
    v1253 = 5;
  else
    v1253 = 0;
  v1254 = v1253 + v990;
  v1255 = 456960 * v1254;
  v1256 = (__PAIR128__(4, 456960) * v1254) >> 64;
  v301 = __CFADD__(v1256, v1255);
  v1257 = v1256 + v1255;
  if (v301)
    v1258 = 5;
  else
    v1258 = 0;
  v1259 = v1258 + v1257;
  v1260 = __CFADD__(v1258, v1257) || (unint64_t)(v1258 + v1257) > 0xFFFFFFFFFFFFFFFALL;
  if (v1064 >= 0xFFFFFFFFFFFFFFFDLL)
    v1261 = 3;
  else
    v1261 = 0;
  v1262 = v1261 + v1064;
  v1263 = 665280 * v1262;
  v1264 = (__PAIR128__(2, 665280) * v1262) >> 64;
  v301 = __CFADD__(v1264, v1263);
  v1265 = v1264 + v1263;
  if (v301)
    v1266 = 3;
  else
    v1266 = 0;
  v1267 = (unint64_t)(v1266 + v1265) > 0xFFFFFFFFFFFFFFFCLL;
  v301 = __CFADD__(v1266, v1265);
  v1268 = v1266 + v1265;
  v1269 = v301 || v1267;
  if (v741 >= 0xFFFFFFFFFFFFFFFDLL)
    v1270 = 3;
  else
    v1270 = 0;
  v1271 = v1270 + v741;
  v1272 = 776160 * v1271;
  v1273 = (__PAIR128__(2, 776160) * v1271) >> 64;
  v301 = __CFADD__(v1273, v1272);
  v1274 = v1273 + v1272;
  if (v301)
    v1275 = 3;
  else
    v1275 = 0;
  v1276 = (unint64_t)(v1275 + v1274) > 0xFFFFFFFFFFFFFFFCLL;
  v301 = __CFADD__(v1275, v1274);
  v1277 = v1275 + v1274;
  if (v301)
    v1276 = 1;
  if (v608 >= 0xFFFFFFFFFFFFFFFDLL)
    v1278 = 3;
  else
    v1278 = 0;
  v1279 = v1278 + v608;
  v1280 = 1995840 * v1279;
  v1281 = (__PAIR128__(2, 1995840) * v1279) >> 64;
  if (v485 >= 0xFFFFFFFFFFFFFFFDLL)
    v1282 = 3;
  else
    v1282 = 0;
  v301 = __CFADD__(v1281, v1280);
  v1283 = v1281 + v1280;
  if (v301)
    v1284 = 3;
  else
    v1284 = 0;
  v301 = __CFADD__(v1284, v1283);
  v1285 = v1284 + v1283;
  v1286 = v301;
  if (v1285 > 0xFFFFFFFFFFFFFFFCLL)
    v1286 = 1;
  v1287 = v1286 == 0;
  v1288 = v1282 + v485;
  v1289 = 931392 * v1288;
  v1290 = (__PAIR128__(2, 931392) * v1288) >> 64;
  if (v1287)
    v1291 = 0;
  else
    v1291 = 3;
  v301 = __CFADD__(v1290, v1289);
  v1292 = v1290 + v1289;
  if (v301)
    v1293 = 3;
  else
    v1293 = 0;
  v301 = __CFADD__(v1293, v1292);
  v1294 = v1293 + v1292;
  v1295 = v1291 + v1285;
  v1296 = v301;
  if (v1294 > 0xFFFFFFFFFFFFFFFCLL)
    v1296 = 1;
  if (v1296)
    v1297 = 3;
  else
    v1297 = 0;
  v1298 = v1297 + v1294;
  if (v1295 >= 0xFFFFFFFFFFFFFFFDLL)
    v1299 = 3;
  else
    v1299 = 0;
  v1300 = v1299 + v1295;
  v1301 = v1298 + v1300 > 0xFFFFFFFFFFFFFFFCLL;
  v301 = __CFADD__(v1298, v1300);
  v1302 = v1298 + v1300;
  if (v301 || v1301)
    v1304 = 3;
  else
    v1304 = 0;
  v1305 = v1304 + v1302;
  if (v1276)
    v1306 = 3;
  else
    v1306 = 0;
  v1307 = v1306 + v1277;
  v301 = __CFADD__(v1307, v1305);
  v1308 = v1307 + v1305;
  v1309 = v301;
  if (v1308 > 0xFFFFFFFFFFFFFFFCLL)
    v1309 = 1;
  if (v1269)
    v1310 = 3;
  else
    v1310 = 0;
  v1311 = v1310 + v1268;
  if (v1309)
    v1312 = 3;
  else
    v1312 = 0;
  v1313 = v1312 + v1308;
  v1314 = v1311 + v1313 > 0xFFFFFFFFFFFFFFFCLL;
  v1315 = v1311 + v1313;
  if (__CFADD__(v1311, v1313))
    v1314 = 1;
  if (v990 == -1)
    v1316 = 0;
  else
    v1316 = v990;
  v1317 = 856064 * v1316;
  v1318 = (v1316 * (unsigned __int128)0xD1000uLL) >> 64;
  v1319 = __CFADD__(__CFADD__(v1318, v1317), v1318 + v1317);
  v1320 = __CFADD__(v1318, v1317) + v1318 + v1317 == -1 || v1319;
  v1321 = v1318 + v1317 + __CFADD__(v1318, v1317) + v1320;
  if (v1064 == -1)
    v1322 = 0;
  else
    v1322 = STACK[0x3C78];
  v1323 = 894976 * v1322;
  v1324 = (v1322 * (unsigned __int128)0xDA800uLL) >> 64;
  v1325 = __CFADD__(__CFADD__(v1324, v1323), v1324 + v1323);
  v1326 = __CFADD__(v1324, v1323) + v1324 + v1323 == -1 || v1325;
  v1327 = v1324 + v1323 + __CFADD__(v1324, v1323) + v1326;
  if (v741 == -1)
    v1328 = 0;
  else
    v1328 = v741;
  v1329 = 1036288 * v1328;
  v1330 = (v1328 * (unsigned __int128)0xFD000uLL) >> 64;
  v1331 = __CFADD__(__CFADD__(v1330, v1329), v1330 + v1329);
  v1332 = __CFADD__(v1330, v1329) + v1330 + v1329 == -1 || v1331;
  v1333 = v1330 + v1329 + __CFADD__(v1330, v1329) + v1332;
  if (v1205 == -1)
    v1334 = 0;
  else
    v1334 = v1205;
  v1335 = 1230592 * v1334;
  v1336 = (v1334 * (unsigned __int128)0x12C700uLL) >> 64;
  v1337 = __CFADD__(__CFADD__(v1336, v1335), v1336 + v1335);
  v1338 = __CFADD__(v1336, v1335) + v1336 + v1335 == -1 || v1337;
  v1339 = v1336 + v1335 + __CFADD__(v1336, v1335) + v1338;
  if (v608 == -1)
    v1340 = 0;
  else
    v1340 = v608;
  v1341 = 2461184 * v1340;
  v1342 = (v1340 * (unsigned __int128)0x258E00uLL) >> 64;
  v1343 = __CFADD__(__CFADD__(v1342, v1341), v1342 + v1341);
  v1344 = __CFADD__(v1342, v1341) + v1342 + v1341 == -1 || v1343;
  v1345 = v1342 + v1341 + __CFADD__(v1342, v1341) + v1344;
  if (v1345 == -1)
    v1345 = 0;
  v301 = __CFADD__(v1339, v1345);
  v1346 = v1339 + v1345;
  LODWORD(v1347) = v301;
  if (v1346 == -1)
    v1347 = 1;
  else
    v1347 = v1347;
  v1348 = v1347 + v1346;
  v1349 = v1333 + v1348 == -1;
  v301 = __CFADD__(v1333, v1348);
  v1350 = v1333 + v1348;
  v1351 = v301 || v1349;
  v1352 = v1351 + v1350;
  v1353 = v1327 + v1352 == -1;
  v301 = __CFADD__(v1327, v1352);
  v1354 = v1327 + v1352;
  v1355 = v301 || v1353;
  v1356 = v1355 + v1354;
  v301 = __CFADD__(v1321, v1356);
  v1357 = v1321 + v1356;
  LODWORD(v1358) = v301;
  if (v1357 == -1)
    v1358 = 1;
  else
    v1358 = v1358;
  v1359 = v1358 + v1357;
  if (v990 >= 0xFFFFFFFFFFFFFFFDLL)
    v1360 = 3;
  else
    v1360 = 0;
  v1361 = v1360 + v990;
  v1362 = 635040 * v1361;
  v1363 = (__PAIR128__(2, 635040) * v1361) >> 64;
  if (v1314)
    v1364 = 3;
  else
    v1364 = 0;
  v301 = __CFADD__(v1363, v1362);
  v1365 = v1363 + v1362;
  if (v301)
    v1366 = 3;
  else
    v1366 = 0;
  v301 = __CFADD__(v1366, v1365);
  v1367 = v1366 + v1365;
  v1368 = v301;
  if (v1367 > 0xFFFFFFFFFFFFFFFCLL)
    v1368 = 1;
  if (v1368)
    v1369 = 3;
  else
    v1369 = 0;
  v1370 = v1369 + v1367;
  v1371 = v1364 + v1315;
  v301 = __CFADD__(v1370, v1371);
  v1372 = v1370 + v1371;
  v1373 = v301;
  if (v1372 > 0xFFFFFFFFFFFFFFFCLL)
    v1373 = 1;
  if (v1373)
    v1374 = 3;
  else
    v1374 = 0;
  v1375 = v1374 + v1372;
  if (v1260)
    v1376 = 5;
  else
    v1376 = 0;
  v1377 = v1376 + v1259;
  if (v1252)
    v1378 = 5;
  else
    v1378 = 0;
  v1379 = v1378 + v1251;
  v301 = __CFADD__(v1377, v1379);
  v1380 = v1377 + v1379;
  v1381 = v301;
  if (v1380 > 0xFFFFFFFFFFFFFFFALL)
    v1381 = 1;
  if (v1381)
    v1382 = 5;
  else
    v1382 = 0;
  v1383 = v1382 + v1380;
  if (v1195)
    v1384 = 9;
  else
    v1384 = 0;
  v1385 = v1384 + v1194;
  if (v1125)
    v1386 = 15;
  else
    v1386 = 0;
  v1387 = v1386 + v1124;
  if (v1021 >= 0xFFFFFFFFFFFFFFFDLL)
    v1388 = 3;
  else
    v1388 = 0;
  v1389 = v1388 + v1021;
  v301 = __CFADD__((__PAIR128__(2, -27941763) * v1389) >> 64, -27941763 * v1389);
  v1390 = (__PAIR128__(v1389, v1389) * __PAIR128__(2, -27941763)) >> 64;
  v1391 = (((v1389 * (unsigned __int128)0xFFFFFFFFFE55A47DLL) >> 64) * 3) >> 64;
  if (v301)
    ++v1391;
  v1392 = 3 * v1391;
  v301 = __CFADD__(v1392, v1390);
  v1393 = v1392 + v1390;
  v1394 = v301;
  if (v1393 > 0xFFFFFFFFFFFFFFFCLL)
    v1394 = 1;
  if (v1394)
    v1395 = 3;
  else
    v1395 = 0;
  v301 = v1359 >= v1055;
  v1396 = v1359 - v1055;
  v1397 = v1395 + v1393;
  v1398 = !v301;
  v1399 = v1396 - v1398;
  if (v1049)
    v1400 = 5;
  else
    v1400 = 0;
  v301 = v1375 >= v1397;
  v1401 = v1375 - v1397;
  v1402 = v1400 + v1048;
  v1403 = -3;
  if (v301)
    v1403 = 0;
  if (LODWORD(STACK[0x3C20]))
    v1404 = 9;
  else
    v1404 = 0;
  v301 = v1383 >= v1402;
  v1405 = v1383 - v1402;
  v1406 = v1403 + v1401;
  v1407 = v1404 + STACK[0x3C28];
  v1408 = -5;
  if (v301)
    v1408 = 0;
  v301 = v1385 >= v1407;
  v1409 = v1385 - v1407;
  v1410 = -9;
  if (v301)
    v1410 = 0;
  v1411 = v1410 + v1409;
  v1412 = v1408 + v1405;
  if (LODWORD(STACK[0x3C30]))
    v1413 = 15;
  else
    v1413 = 0;
  v1414 = v1413 + STACK[0x3C38];
  v301 = v1387 >= v1414;
  v1415 = v1387 - v1414;
  v1416 = -15;
  if (v301)
    v1416 = 0;
  v1417 = v1416 + v1415;
  switch(LODWORD(STACK[0x3C08]))
  {
    case 3:
      STACK[0x3BB8] = STACK[0x2710];
      STACK[0x3888] = STACK[0x3240];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x3828] = STACK[0x2708];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      v1604 = STACK[0x2700];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x2CF8] = v1399;
      STACK[0x2CF0] = STACK[0x3C00];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x2CE8] = STACK[0x3BE8];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x3C58] = STACK[0x2798];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x3BA0] = STACK[0x26F8];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x33C0] = STACK[0x3C50];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x2CE0] = v1406;
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x2D28] = STACK[0x3BC8];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x2CD8] = v1411;
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3C50] = STACK[0x2770];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      v1605 = STACK[0x26F0];
      STACK[0x2CD0] = v1412;
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x2CC8] = STACK[0x3BF8];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x2CB8] = STACK[0x3BD0];
      v1606 = STACK[0x2778];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x2CB0] = v1417;
      STACK[0x3990] = STACK[0x3278];
      STACK[0x3C40] = STACK[0x2780];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x3C48] = STACK[0x2788];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      v1607 = STACK[0x2790];
      STACK[0x3690] = STACK[0x3A98];
      STACK[0x2CC0] = STACK[0x3BE0];
      LODWORD(STACK[0x3BD8]) = 4;
      v1608 = STACK[0x3710];
      STACK[0x3B70] = STACK[0x2DC0];
      STACK[0x3378] = STACK[0x18A8];
      STACK[0x3B68] = STACK[0x2DC8];
      STACK[0x3B78] = STACK[0x2DE0];
      STACK[0x3370] = STACK[0x18A0];
      STACK[0x3368] = STACK[0x1890];
      STACK[0x3210] = STACK[0x2DB8];
      STACK[0x3350] = STACK[0x2DD0];
      STACK[0x3238] = STACK[0x1898];
      STACK[0x3200] = STACK[0x18C0];
      STACK[0x3218] = STACK[0x2DD8];
      STACK[0x3358] = STACK[0x18B0];
      STACK[0x3BD0] = STACK[0x18D0];
      STACK[0x3230] = STACK[0x2DB0];
      STACK[0x3BC8] = STACK[0x1880];
      STACK[0x3208] = STACK[0x18C8];
      STACK[0x3228] = STACK[0x2DE8];
      STACK[0x3BC0] = STACK[0x18B8];
      STACK[0x3250] = STACK[0x2DA8];
      STACK[0x3220] = STACK[0x2D98];
      STACK[0x3AC8] = STACK[0x1888];
      STACK[0x3248] = STACK[0x2DA0];
      STACK[0x3C78] = v1607;
      STACK[0x3C68] = v1606;
      STACK[0x37E8] = v1605;
      STACK[0x3800] = v1604;
      v2045 = STACK[0x2550];
      v2046 = STACK[0x3A68];
      v2047 = STACK[0x2550] + STACK[0x3A68] > 0xFFFFFFFFFFFFFFD0;
      v301 = __CFADD__(v2045, v2046);
      v2048 = v2045 + v2046;
      if (v301)
        v2047 = 1;
      if (v2047)
        v2049 = 47;
      else
        v2049 = 0;
      v2050 = v2049 + v2048;
      STACK[0x3C60] = v2050 + v2045;
      v2051 = __CFADD__(v2050, v2045) || v2050 + v2045 > 0xFFFFFFFFFFFFFFD0;
      LODWORD(STACK[0x3C38]) = v2051;
      v2052 = STACK[0x2570];
      v2053 = STACK[0x3A48] + STACK[0x2570];
      v2054 = __CFADD__(STACK[0x3A48], STACK[0x2570]);
      if (v2053 > 0xFFFFFFFFFFFFFFCALL)
        v2054 = 1;
      v1287 = !v2054;
      v2055 = 53;
      if (v1287)
        v2055 = 0;
      v2056 = v2055 + v2053;
      STACK[0x3C30] = v2056 + v2052;
      v2057 = __CFADD__(v2056, v2052) || v2056 + v2052 > 0xFFFFFFFFFFFFFFCALL;
      LODWORD(STACK[0x3C28]) = v2057;
      v2058 = STACK[0x2558];
      v2059 = STACK[0x2558] + STACK[0x3A50];
      v2060 = __CFADD__(STACK[0x2558], STACK[0x3A50]);
      if (v2059 > 0xFFFFFFFFFFFFFFD2)
        v2060 = 1;
      if (v2060)
        v2061 = 45;
      else
        v2061 = 0;
      v2062 = v2061 + v2059;
      STACK[0x3C20] = v2062 + v2058;
      v2063 = __CFADD__(v2062, v2058) || v2062 + v2058 > 0xFFFFFFFFFFFFFFD2;
      LODWORD(STACK[0x3C08]) = v2063;
      v2064 = STACK[0x2548];
      v2065 = STACK[0x2548] + STACK[0x3A28] > 0xFFFFFFFFFFFFFFD8;
      if (__CFADD__(STACK[0x2548], STACK[0x3A28]))
        v2065 = 1;
      v1287 = !v2065;
      v2066 = 39;
      if (v1287)
        v2066 = 0;
      v2067 = v2066 + STACK[0x2548] + STACK[0x3A28];
      STACK[0x3C00] = v2067 + v2064;
      v2068 = __CFADD__(v2067, v2064) || v2067 + v2064 > 0xFFFFFFFFFFFFFFD8;
      LODWORD(STACK[0x3BF8]) = v2068;
      v2069 = STACK[0x2568];
      v2070 = STACK[0x3A38] + STACK[0x2568];
      v2071 = __CFADD__(STACK[0x3A38], STACK[0x2568]);
      if (v2070 > 0xFFFFFFFFFFFFFFEELL)
        v2071 = 1;
      if (v2071)
        v2072 = 17;
      else
        v2072 = 0;
      v2073 = v2072 + v2070;
      STACK[0x3BF0] = v2073 + v2069;
      v2074 = __CFADD__(v2073, v2069) || v2073 + v2069 > 0xFFFFFFFFFFFFFFEELL;
      LODWORD(STACK[0x3BE8]) = v2074;
      v2075 = STACK[0x26E0];
      v2076 = STACK[0x3A58] + STACK[0x26E0] > 0xFFFFFFFFFFFFFFDELL;
      if (__CFADD__(STACK[0x3A58], STACK[0x26E0]))
        v2076 = 1;
      v1287 = !v2076;
      v2077 = 33;
      if (v1287)
        v2077 = 0;
      v2078 = v2077 + STACK[0x3A58] + STACK[0x26E0];
      STACK[0x3BE0] = v2078 + v2075;
      v2079 = __CFADD__(v2078, v2075) || v2078 + v2075 > 0xFFFFFFFFFFFFFFDELL;
      LODWORD(STACK[0x3BB0]) = v2079;
      v2080 = STACK[0x2578];
      v2081 = STACK[0x3AA0] + STACK[0x2578];
      v2082 = __CFADD__(STACK[0x3AA0], STACK[0x2578]);
      if (v2081 > 0xFFFFFFFFFFFFFFFCLL)
        v2082 = 1;
      v1287 = !v2082;
      v2083 = 3;
      if (v1287)
        v2083 = 0;
      v2084 = v2083 + v2081;
      STACK[0x3B98] = v2084 + v2080;
      v2085 = __CFADD__(v2084, v2080) || v2084 + v2080 > 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(STACK[0x3B90]) = v2085;
      v2086 = STACK[0x33A0];
      v2087 = STACK[0x3A30];
      v2088 = STACK[0x33A0] + STACK[0x3A30] > 0xFFFFFFFFFFFFFFF0;
      STACK[0x3B88] = STACK[0x33A0] + STACK[0x3A30];
      if (__CFADD__(v2086, v2087))
        v2088 = 1;
      LODWORD(STACK[0x3B80]) = v2088;
      v2089 = STACK[0x31F0];
      v2090 = STACK[0x3A40];
      v2091 = STACK[0x3A40] + STACK[0x31F0] > 0xFFFFFFFFFFFFFFFALL;
      STACK[0x3B60] = STACK[0x3A40] + STACK[0x31F0];
      if (__CFADD__(v2090, v2089))
        v2091 = 1;
      LODWORD(STACK[0x3B58]) = v2091;
      v2092 = STACK[0x29B0];
      v2093 = STACK[0x2258];
      v2094 = STACK[0x2258] + STACK[0x29B0] > 0xFFFFFFFFFFFFFFD2;
      STACK[0x3B50] = STACK[0x2258] + STACK[0x29B0];
      if (__CFADD__(v2093, v2092))
        v2094 = 1;
      LODWORD(STACK[0x3B48]) = v2094;
      v2095 = STACK[0x29A0];
      v2096 = STACK[0x2260];
      v2097 = STACK[0x29A0] + STACK[0x2260] > 0xFFFFFFFFFFFFFFF0;
      STACK[0x3B40] = STACK[0x29A0] + STACK[0x2260];
      if (__CFADD__(v2095, v2096))
        v2097 = 1;
      LODWORD(STACK[0x3A90]) = v2097;
      v2098 = STACK[0x2278];
      v2099 = STACK[0x2978];
      v2100 = STACK[0x2978] + STACK[0x2278] > 0xFFFFFFFFFFFFFFEELL;
      STACK[0x3AC0] = STACK[0x2978] + STACK[0x2278];
      if (__CFADD__(v2099, v2098))
        v2100 = 1;
      LODWORD(STACK[0x3A88]) = v2100;
      v2101 = STACK[0x2268];
      v2102 = STACK[0x2988];
      v2103 = STACK[0x2988] + STACK[0x2268] > 0xFFFFFFFFFFFFFFF6;
      STACK[0x3A98] = STACK[0x2988] + STACK[0x2268];
      if (__CFADD__(v2102, v2101))
        v2103 = 1;
      LODWORD(STACK[0x3A80]) = v2103;
      v2104 = STACK[0x2980];
      v2105 = STACK[0x21E0];
      v2106 = STACK[0x21E0] + STACK[0x2980] > 0xFFFFFFFFFFFFFFFALL;
      STACK[0x3A78] = STACK[0x21E0] + STACK[0x2980];
      if (__CFADD__(v2105, v2104))
        v2106 = 1;
      LODWORD(STACK[0x3930]) = v2106;
      v2107 = STACK[0x2200];
      v2108 = STACK[0x2960];
      v2109 = STACK[0x2960] + STACK[0x2200] > 0xFFFFFFFFFFFFFFFCLL;
      STACK[0x3938] = STACK[0x2960] + STACK[0x2200];
      if (__CFADD__(v2108, v2107))
        v2109 = 1;
      LODWORD(STACK[0x3928]) = v2109;
      v2110 = STACK[0x2270];
      v2111 = STACK[0x2968];
      LODWORD(v2112) = STACK[0x2968] + STACK[0x2270] == -1;
      STACK[0x3920] = STACK[0x2968] + STACK[0x2270];
      if (__CFADD__(v2111, v2110))
        v2112 = 1;
      else
        v2112 = v2112;
      STACK[0x3918] = v2112;
      v2113 = STACK[0x29B8];
      v2114 = STACK[0x21E8];
      v2115 = STACK[0x21E8] + STACK[0x29B8] > 0xFFFFFFFFFFFFFFD2;
      STACK[0x3910] = STACK[0x21E8] + STACK[0x29B8];
      if (__CFADD__(v2114, v2113))
        v2115 = 1;
      LODWORD(STACK[0x3908]) = v2115;
      v2116 = STACK[0x29F8];
      v2117 = STACK[0x21F0];
      v2118 = STACK[0x21F0] + STACK[0x29F8] > 0xFFFFFFFFFFFFFFD8;
      STACK[0x3900] = STACK[0x21F0] + STACK[0x29F8];
      if (__CFADD__(v2117, v2116))
        v2118 = 1;
      LODWORD(STACK[0x38F8]) = v2118;
      v2119 = STACK[0x29F0];
      v2120 = STACK[0x2240];
      v2121 = STACK[0x29F0] + STACK[0x2240] > 0xFFFFFFFFFFFFFFF0;
      STACK[0x38F0] = STACK[0x29F0] + STACK[0x2240];
      if (__CFADD__(v2119, v2120))
        v2121 = 1;
      LODWORD(STACK[0x38E8]) = v2121;
      v2122 = STACK[0x2A08];
      v2123 = STACK[0x2210];
      v2124 = STACK[0x2210] + STACK[0x2A08] > 0xFFFFFFFFFFFFFFF6;
      STACK[0x38E0] = STACK[0x2210] + STACK[0x2A08];
      if (__CFADD__(v2123, v2122))
        v2124 = 1;
      LODWORD(STACK[0x38D8]) = v2124;
      v2125 = STACK[0x29C8];
      v2126 = STACK[0x2230];
      v2127 = STACK[0x2230] + STACK[0x29C8] > 0xFFFFFFFFFFFFFFFCLL;
      STACK[0x38D0] = STACK[0x2230] + STACK[0x29C8];
      if (__CFADD__(v2126, v2125))
        v2127 = 1;
      LODWORD(STACK[0x38C0]) = v2127;
      v2128 = STACK[0x29D8];
      v2129 = STACK[0x2250];
      v2130 = STACK[0x29D8] + STACK[0x2250] > 0xFFFFFFFFFFFFFFFALL;
      STACK[0x38C8] = STACK[0x29D8] + STACK[0x2250];
      if (__CFADD__(v2128, v2129))
        v2130 = 1;
      LODWORD(STACK[0x38B8]) = v2130;
      v2131 = STACK[0x2A78];
      v2132 = STACK[0x25A0];
      v2133 = STACK[0x25A0] + STACK[0x2A78] > 0xFFFFFFFFFFFFFFD8;
      STACK[0x38B0] = STACK[0x25A0] + STACK[0x2A78];
      if (__CFADD__(v2132, v2131))
        v2133 = 1;
      LODWORD(STACK[0x38A8]) = v2133;
      v2134 = STACK[0x25D8];
      v2135 = STACK[0x2A90];
      v2136 = STACK[0x2A90] + STACK[0x25D8] > 0xFFFFFFFFFFFFFFEELL;
      STACK[0x38A0] = STACK[0x2A90] + STACK[0x25D8];
      if (__CFADD__(v2135, v2134))
        v2136 = 1;
      LODWORD(STACK[0x3890]) = v2136;
      v2137 = STACK[0x2A98];
      v2138 = STACK[0x25B8];
      v2139 = STACK[0x2A98] + STACK[0x25B8] > 0xFFFFFFFFFFFFFFF0;
      STACK[0x3878] = STACK[0x2A98] + STACK[0x25B8];
      if (__CFADD__(v2137, v2138))
        v2139 = 1;
      LODWORD(STACK[0x3820]) = v2139;
      v2140 = STACK[0x2AA0];
      v2141 = STACK[0x25A8];
      v2142 = STACK[0x2AA0] + STACK[0x25A8] > 0xFFFFFFFFFFFFFFDELL;
      STACK[0x3898] = STACK[0x2AA0] + STACK[0x25A8];
      if (__CFADD__(v2140, v2141))
        v2142 = 1;
      LODWORD(STACK[0x3880]) = v2142;
      v2143 = STACK[0x2A70];
      v2144 = STACK[0x25B0];
      v2145 = STACK[0x25B0] + STACK[0x2A70] > 0xFFFFFFFFFFFFFFFCLL;
      STACK[0x3818] = STACK[0x25B0] + STACK[0x2A70];
      if (__CFADD__(v2144, v2143))
        v2145 = 1;
      LODWORD(STACK[0x3810]) = v2145;
      v2146 = STACK[0x2A58];
      v2147 = STACK[0x25D0];
      v2148 = STACK[0x2A58] + STACK[0x25D0] == -1;
      STACK[0x3808] = STACK[0x2A58] + STACK[0x25D0];
      v2149 = __CFADD__(v2146, v2147) || v2148;
      v2150 = STACK[0x2528];
      if (2 * STACK[0x2528] > 0xFFFFFFFFFFFFFFF0 || v2150 < 0)
        v2152 = 15;
      else
        v2152 = 0;
      v2153 = v2152 + 2 * STACK[0x2528];
      v2154 = v2153 + v2150;
      v2155 = __CFADD__(v2153, v2150) || v2153 + v2150 > 0xFFFFFFFFFFFFFFF0;
      v2156 = STACK[0x2538];
      if (2 * STACK[0x2538] > 0xFFFFFFFFFFFFFFDELL || v2156 < 0)
        v2158 = 33;
      else
        v2158 = 0;
      v2159 = v2158 + 2 * STACK[0x2538];
      v2160 = v2159 + v2156;
      v2161 = __CFADD__(v2159, v2156) || v2159 + v2156 > 0xFFFFFFFFFFFFFFDELL;
      LODWORD(STACK[0x39C0]) = v1608;
      v2162 = (v1608 - 10422);
      STACK[0x3A70] = v2162;
      v2163 = STACK[0x2510];
      if (2 * STACK[0x2510] > (v2162 ^ 0xFFFFFFFFFFFFEC6FLL) || v2163 < 0)
        v2165 = 3;
      else
        v2165 = 0;
      v2166 = v2165 + 2 * STACK[0x2510];
      v2167 = v2166 + v2163;
      v2168 = __CFADD__(v2166, v2163) || v2166 + v2163 > 0xFFFFFFFFFFFFFFFCLL;
      v2169 = STACK[0x2520];
      if (2 * STACK[0x2520] > 0xFFFFFFFFFFFFFFFALL || v2169 < 0)
        v2171 = 5;
      else
        v2171 = 0;
      v2172 = v2171 + 2 * STACK[0x2520];
      v2173 = v2172 + v2169 > 0xFFFFFFFFFFFFFFFALL;
      v2174 = v2172 + v2169;
      if (__CFADD__(v2172, v2169))
        v2173 = 1;
      v2175 = STACK[0x2500];
      if (2 * STACK[0x2500] > 0xFFFFFFFFFFFFFFF6 || v2175 < 0)
        v2177 = 9;
      else
        v2177 = 0;
      v2178 = v2177 + 2 * STACK[0x2500];
      v2179 = __ROR8__(STACK[0x2508], 63);
      v2180 = v2179 + STACK[0x2508];
      LODWORD(v2181) = __CFADD__(v2179, STACK[0x2508]);
      v2182 = v2178 + v2175;
      v2183 = __CFADD__(v2178, v2175);
      if (v2180 == -1)
        v2181 = 1;
      else
        v2181 = v2181;
      STACK[0x37F8] = v2181 + v2180;
      v2184 = STACK[0x24F8];
      v2185 = 2 * STACK[0x24F8];
      if (v2185 > 0xFFFFFFFFFFFFFFD8 || v2184 < 0)
        v2187 = 39;
      else
        v2187 = 0;
      v1287 = !v2168;
      v2188 = v2187 + v2185;
      if (v1287)
        v2189 = 0;
      else
        v2189 = 3;
      v2190 = v2182 > 0xFFFFFFFFFFFFFFF6 || v2183;
      v301 = __CFADD__(v2188, v2184);
      v2191 = v2188 + v2184;
      v2192 = v301;
      if (v2173)
        v2193 = 5;
      else
        v2193 = 0;
      STACK[0x37F0] = v2193 + v2174;
      if (v2191 > 0xFFFFFFFFFFFFFFD8)
        v2194 = 1;
      else
        v2194 = v2192;
      STACK[0x37D8] = v2189 + v2167;
      if (v2190)
        v2195 = 9;
      else
        v2195 = 0;
      if (v2194)
        v2196 = 39;
      else
        v2196 = 0;
      if (v2161)
        v2197 = 33;
      else
        v2197 = 0;
      if (v2155)
        v2198 = 15;
      else
        v2198 = 0;
      STACK[0x37D0] = v2198 + v2154;
      STACK[0x37C8] = v2197 + v2160;
      v2199 = v2195 + v2182;
      STACK[0x37C0] = v2196 + v2191;
      v2200 = STACK[0x2588] + STACK[0x2A50];
      v2201 = __CFADD__(STACK[0x2588], STACK[0x2A50]);
      if (v2200 > 0xFFFFFFFFFFFFFFFALL)
        v2201 = 1;
      if (v2201)
        v2202 = 5;
      else
        v2202 = 0;
      STACK[0x37B8] = v2202 + v2200;
      v2203 = STACK[0x2598] + STACK[0x2A68];
      v2204 = __CFADD__(STACK[0x2598], STACK[0x2A68]);
      v2205 = STACK[0x2590] + STACK[0x2A80];
      v2206 = __CFADD__(STACK[0x2590], STACK[0x2A80]);
      if (v2203 > 0xFFFFFFFFFFFFFFF6)
        v2204 = 1;
      v2207 = STACK[0x25C0] + STACK[0x2A88];
      v2208 = __CFADD__(STACK[0x25C0], STACK[0x2A88]);
      if (v2204)
        v2209 = 9;
      else
        v2209 = 0;
      STACK[0x37B0] = v2209 + v2203;
      STACK[0x3808] += v2149;
      v2210 = STACK[0x2A60] + STACK[0x25C8];
      v2211 = __CFADD__(STACK[0x2A60], STACK[0x25C8]);
      if (LODWORD(STACK[0x3810]))
        v2212 = 3;
      else
        v2212 = 0;
      STACK[0x3818] += v2212;
      if (v2205 > 0xFFFFFFFFFFFFFFD2)
        v2206 = 1;
      if (LODWORD(STACK[0x3820]))
        v2213 = 15;
      else
        v2213 = 0;
      STACK[0x3878] += v2213;
      if (LODWORD(STACK[0x3890]))
        v2214 = 17;
      else
        v2214 = 0;
      if (v2206)
        v2215 = 45;
      else
        v2215 = 0;
      STACK[0x3890] = v2215 + v2205;
      STACK[0x38A0] += v2214;
      if (v2210 > 0xFFFFFFFFFFFFFFD0)
        v2211 = 1;
      if (LODWORD(STACK[0x3880]))
        v2216 = 33;
      else
        v2216 = 0;
      STACK[0x3898] += v2216;
      if (v2211)
        v2217 = 47;
      else
        v2217 = 0;
      if (LODWORD(STACK[0x38A8]))
        v2218 = 39;
      else
        v2218 = 0;
      STACK[0x38B0] += v2218;
      STACK[0x38A8] = v2217 + v2210;
      if (v2207 > 0xFFFFFFFFFFFFFFCALL || v2208)
        v2220 = 53;
      else
        v2220 = 0;
      STACK[0x3880] = v2220 + v2207;
      v2221 = STACK[0x29E8] + STACK[0x2218];
      LODWORD(v2222) = __CFADD__(STACK[0x29E8], STACK[0x2218]);
      if (v2221 == -1)
        v2222 = 1;
      else
        v2222 = v2222;
      v2223 = STACK[0x2208] + STACK[0x2A00];
      v2224 = __CFADD__(STACK[0x2208], STACK[0x2A00]);
      v2225 = STACK[0x38C0];
      STACK[0x38C0] = v2222 + v2221;
      if (v2225)
        v2226 = 3;
      else
        v2226 = 0;
      if (LODWORD(STACK[0x38B8]))
        v2227 = 5;
      else
        v2227 = 0;
      STACK[0x38C8] += v2227;
      STACK[0x38D0] += v2226;
      v2228 = STACK[0x29D0] + STACK[0x21F8];
      v2229 = __CFADD__(STACK[0x29D0], STACK[0x21F8]);
      if (LODWORD(STACK[0x38D8]))
        v2230 = 9;
      else
        v2230 = 0;
      v1287 = LODWORD(STACK[0x38E8]) == 0;
      STACK[0x38E8] = v2230 + STACK[0x38E0];
      if (v1287)
        v2231 = 0;
      else
        v2231 = 15;
      STACK[0x38F0] += v2231;
      if (v2223 > 0xFFFFFFFFFFFFFFEELL)
        v2224 = 1;
      if (v2224)
        v2232 = 17;
      else
        v2232 = 0;
      STACK[0x38E0] = v2232 + v2223;
      if (v2228 > 0xFFFFFFFFFFFFFFDELL)
        v2229 = 1;
      v2233 = STACK[0x21D8] + STACK[0x29A8];
      v2234 = __CFADD__(STACK[0x21D8], STACK[0x29A8]);
      if (LODWORD(STACK[0x38F8]))
        v2235 = 39;
      else
        v2235 = 0;
      STACK[0x3900] += v2235;
      if (v2229)
        v2236 = 33;
      else
        v2236 = 0;
      STACK[0x38F8] = v2236 + v2228;
      if (v2233 > 0xFFFFFFFFFFFFFFD0 || v2234)
        v2238 = 47;
      else
        v2238 = 0;
      STACK[0x38D8] = v2238 + v2233;
      v2239 = STACK[0x29E0] + STACK[0x2248];
      v2240 = __CFADD__(STACK[0x29E0], STACK[0x2248]);
      if (v2239 > 0xFFFFFFFFFFFFFFCALL)
        v2240 = 1;
      if (LODWORD(STACK[0x3908]))
        v2241 = 45;
      else
        v2241 = 0;
      STACK[0x3910] += v2241;
      if (v2240)
        v2242 = 53;
      else
        v2242 = 0;
      STACK[0x3908] = v2242 + v2239;
      STACK[0x3920] += STACK[0x3918];
      if (LODWORD(STACK[0x3930]))
        v2243 = 5;
      else
        v2243 = 0;
      if (LODWORD(STACK[0x3928]))
        v2244 = 3;
      else
        v2244 = 0;
      STACK[0x3938] += v2244;
      STACK[0x3A78] += v2243;
      v2245 = STACK[0x2220] + STACK[0x2998];
      v2246 = __CFADD__(STACK[0x2220], STACK[0x2998]);
      v2247 = STACK[0x2238] + STACK[0x29C0];
      v2248 = __CFADD__(STACK[0x2238], STACK[0x29C0]);
      v2249 = STACK[0x2970] + STACK[0x2280];
      v2250 = __CFADD__(STACK[0x2970], STACK[0x2280]);
      if (LODWORD(STACK[0x3A80]))
        v2251 = 9;
      else
        v2251 = 0;
      if (LODWORD(STACK[0x3A90]))
        v2252 = 15;
      else
        v2252 = 0;
      if (LODWORD(STACK[0x3A88]))
        v2253 = 17;
      else
        v2253 = 0;
      v2254 = v2252 + STACK[0x3B40];
      STACK[0x3B40] = v2251 + STACK[0x3A98];
      STACK[0x3AC0] += v2253;
      if (v2245 > 0xFFFFFFFFFFFFFFD8)
        v2246 = 1;
      if (v2249 > 0xFFFFFFFFFFFFFFD0)
        v2250 = 1;
      if (LODWORD(STACK[0x3B48]))
        v2255 = 45;
      else
        v2255 = 0;
      STACK[0x3B50] += v2255;
      if (v2246)
        v2256 = 39;
      else
        v2256 = 0;
      if (v2247 > 0xFFFFFFFFFFFFFFCALL)
        v2248 = 1;
      if (v2250)
        v2257 = 47;
      else
        v2257 = 0;
      STACK[0x3B48] = v2256 + v2245;
      if (v2248)
        v2258 = 53;
      else
        v2258 = 0;
      STACK[0x3A98] = v2258 + v2247;
      STACK[0x3A90] = v2257 + v2249;
      v2259 = STACK[0x2580];
      v2260 = STACK[0x3A20] + STACK[0x2580];
      LODWORD(v2261) = __CFADD__(STACK[0x3A20], STACK[0x2580]);
      if (v2260 == -1)
        v2261 = 1;
      else
        v2261 = v2261;
      v2262 = v2261 + v2260;
      v301 = __CFADD__(v2262, v2259);
      v2263 = v2262 + v2259;
      LODWORD(v2264) = v301;
      if (v2263 == -1)
        v2264 = 1;
      else
        v2264 = v2264;
      STACK[0x3B98] = v2264 + v2263;
      if (LODWORD(STACK[0x3C08]))
        v2265 = 45;
      else
        v2265 = 0;
      v1287 = LODWORD(STACK[0x3C38]) == 0;
      STACK[0x3BF8] = v2265 + STACK[0x3C20];
      if (v1287)
        v2266 = 0;
      else
        v2266 = 47;
      STACK[0x3BF0] = v2266 + STACK[0x3C60];
      if (LODWORD(STACK[0x3C28]))
        v2267 = 53;
      else
        v2267 = 0;
      STACK[0x3BE8] = v2267 + STACK[0x3C30];
      STACK[0x2798] = STACK[0x3C58];
      v2268 = (uint64_t (*)(_QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x39C0]) - 5353))
                                                     - 12);
      STACK[0x3C58] = STACK[0x3A70];
      return v2268(v2254, v2199);
    case 6:
      v1446 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) + 2579))
                                             - (LODWORD(STACK[0x3710]) ^ 0x3C45));
      STACK[0x24F0] = STACK[0x3C00];
      STACK[0x24F8] = STACK[0x3BE8];
      STACK[0x2500] = v1411;
      STACK[0x2508] = v1399;
      STACK[0x2510] = v1406;
      STACK[0x2518] = STACK[0x3BC8];
      STACK[0x2520] = v1412;
      STACK[0x2528] = v1417;
      STACK[0x2530] = STACK[0x3BD0];
      STACK[0x2538] = STACK[0x3BF8];
      STACK[0x2540] = STACK[0x3BE0];
      STACK[0x3B58] = STACK[0x2AD8];
      STACK[0x3120] = STACK[0x2938];
      STACK[0x3160] = STACK[0x2910];
      STACK[0x3290] = STACK[0x2AA8];
      STACK[0x3B50] = STACK[0x2AB0];
      STACK[0x3108] = STACK[0x2928];
      STACK[0x3178] = STACK[0x2AB8];
      STACK[0x31A8] = STACK[0x2958];
      STACK[0x30F8] = STACK[0x2AC0];
      STACK[0x3100] = STACK[0x28B8];
      STACK[0x3118] = STACK[0x28C8];
      STACK[0x3168] = STACK[0x2950];
      STACK[0x3B48] = STACK[0x28D0];
      STACK[0x3B60] = STACK[0x2AC8];
      STACK[0x30F0] = STACK[0x28B0];
      STACK[0x3B40] = STACK[0x28C0];
      STACK[0x3110] = STACK[0x2948];
      STACK[0x3800] = STACK[0x2918];
      STACK[0x3158] = STACK[0x2920];
      return v1446(15);
    case 7:
      STACK[0x3888] = STACK[0x3240];
      v1621 = STACK[0x3458];
      v1622 = STACK[0x3408];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x3880] = STACK[0x3500];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x38F8] = STACK[0x3460];
      STACK[0x38F0] = STACK[0x3468];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      v1623 = STACK[0x3410];
      STACK[0x2D80] = v1399;
      STACK[0x3920] = STACK[0x3470];
      STACK[0x3568] = STACK[0x3130];
      STACK[0x3918] = STACK[0x3478];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3938] = STACK[0x3480];
      STACK[0x3560] = STACK[0x3138];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3930] = STACK[0x3418];
      STACK[0x3878] = STACK[0x3508];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x3928] = STACK[0x3510];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x37D0] = STACK[0x3488];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3558] = STACK[0x3140];
      STACK[0x37C8] = STACK[0x33E8];
      STACK[0x3908] = STACK[0x34E0];
      STACK[0x37C0] = STACK[0x3420];
      STACK[0x3550] = STACK[0x3148];
      STACK[0x3900] = STACK[0x33F0];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x37B8] = STACK[0x33F8];
      LODWORD(STACK[0x37D8]) = STACK[0x3400];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x38E8] = STACK[0x3490];
      STACK[0x2D78] = v1417;
      STACK[0x2D70] = STACK[0x3BE8];
      STACK[0x3910] = STACK[0x3518];
      STACK[0x33C0] = STACK[0x3C50];
      STACK[0x37B0] = STACK[0x3428];
      STACK[0x37A8] = STACK[0x3430];
      STACK[0x37A0] = STACK[0x3498];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3798] = STACK[0x34E8];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x3548] = STACK[0x3180];
      STACK[0x3790] = STACK[0x34F0];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x3788] = STACK[0x34A0];
      v1624 = STACK[0x3188];
      STACK[0x2D68] = STACK[0x3BD0];
      STACK[0x38E0] = STACK[0x34F8];
      STACK[0x2D60] = STACK[0x3BE0];
      STACK[0x3780] = STACK[0x3028];
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x38B0] = STACK[0x3030];
      STACK[0x3778] = STACK[0x3038];
      STACK[0x38D0] = STACK[0x3520];
      STACK[0x38D8] = STACK[0x34B0];
      STACK[0x38C8] = STACK[0x34A8];
      STACK[0x3770] = STACK[0x34B8];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x38C0] = STACK[0x3098];
      STACK[0x3768] = STACK[0x3040];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3760] = STACK[0x3048];
      STACK[0x3958] = STACK[0x32E8];
      v1625 = STACK[0x3190];
      STACK[0x3758] = STACK[0x3528];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x3748] = STACK[0x30A0];
      STACK[0x3740] = STACK[0x34C0];
      STACK[0x3738] = STACK[0x2FF8];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x38B8] = STACK[0x3530];
      STACK[0x3750] = STACK[0x3538];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x2D58] = STACK[0x3BC8];
      STACK[0x38A8] = STACK[0x30C8];
      STACK[0x38A0] = STACK[0x3578];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x3730] = STACK[0x3020];
      STACK[0x39B8] = STACK[0x3250];
      v1626 = STACK[0x3198];
      v1627 = STACK[0x31A0];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3728] = STACK[0x3050];
      STACK[0x3720] = STACK[0x30A8];
      STACK[0x3718] = STACK[0x34C8];
      STACK[0x3700] = STACK[0x3000];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x36F8] = STACK[0x3058];
      STACK[0x3898] = STACK[0x34D0];
      STACK[0x3708] = STACK[0x34D8];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x36E8] = STACK[0x3060];
      STACK[0x3890] = STACK[0x3068];
      STACK[0x36E0] = STACK[0x30B0];
      STACK[0x2D50] = v1411;
      STACK[0x2D48] = v1406;
      STACK[0x36A8] = STACK[0x3A88];
      v1628 = STACK[0x3170];
      STACK[0x36F0] = STACK[0x3088];
      STACK[0x36D8] = STACK[0x3008];
      STACK[0x2D40] = STACK[0x3C00];
      STACK[0x36A0] = STACK[0x39C0];
      v1629 = STACK[0x30B8];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x2D38] = STACK[0x3BF8];
      STACK[0x2D30] = v1412;
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x36D0] = STACK[0x3080];
      STACK[0x3690] = STACK[0x3A98];
      v1630 = STACK[0x3018];
      v1631 = STACK[0x3150];
      STACK[0x3C00] = 8;
      LODWORD(STACK[0x3AC0]) = STACK[0x3710];
      STACK[0x33E0] = STACK[0x2A40];
      STACK[0x3450] = STACK[0x2A18];
      STACK[0x3C38] = STACK[0x2908];
      STACK[0x3448] = STACK[0x2A38];
      STACK[0x3BB0] = STACK[0x2AE0];
      STACK[0x3440] = STACK[0x2AE8];
      STACK[0x3438] = STACK[0x2AF0];
      STACK[0x3BF8] = STACK[0x2A30];
      STACK[0x3398] = STACK[0x28E0];
      STACK[0x33B0] = STACK[0x2900];
      STACK[0x3388] = STACK[0x28F8];
      STACK[0x3540] = STACK[0x2A10];
      STACK[0x33D8] = STACK[0x28F0];
      STACK[0x3BE8] = STACK[0x28E8];
      STACK[0x3BF0] = STACK[0x2A28];
      STACK[0x3570] = STACK[0x2B00];
      STACK[0x3C78] = STACK[0x2B10];
      STACK[0x3380] = STACK[0x2A20];
      STACK[0x3BE0] = STACK[0x2AF8];
      STACK[0x3390] = STACK[0x2B08];
      STACK[0x33A8] = STACK[0x2A48];
      STACK[0x3C30] = STACK[0x28D8];
      goto LABEL_2860;
    case 0xB:
      v1447 = (LODWORD(STACK[0x3710]) - 5381);
      v1448 = LODWORD(STACK[0x3710]) + 2579;
      v1449 = STACK[0x3BC8] - STACK[0x38B8];
      v1450 = -17;
      if (STACK[0x3BC8] >= STACK[0x38B8])
        v1450 = 0;
      STACK[0x1A78] = (__PAIR128__(v1399 - STACK[0x38D8], v1399) - STACK[0x38D8]) >> 64;
      v1451 = STACK[0x3BF8] - STACK[0x38B0];
      v1452 = -33;
      if (STACK[0x3BF8] >= STACK[0x38B0])
        v1452 = 0;
      v1453 = v1412 - STACK[0x38D0];
      if (v1412 >= STACK[0x38D0])
        v1454 = 0;
      else
        v1454 = -5;
      v1455 = v1411 - STACK[0x38C0];
      if (v1411 >= STACK[0x38C0])
        v1456 = 0;
      else
        v1456 = -9;
      v1457 = v1417 - STACK[0x38A8];
      if (v1417 >= STACK[0x38A8])
        v1458 = 0;
      else
        v1458 = -15;
      v301 = v1406 >= STACK[0x38C8];
      v1459 = v1406 - STACK[0x38C8];
      STACK[0x19F8] = v1449 + v1450;
      if (v301)
        v1460 = 0;
      else
        v1460 = -3;
      v1461 = STACK[0x3C00] - STACK[0x3898];
      v1462 = -47;
      if (STACK[0x3C00] >= STACK[0x3898])
        v1462 = 0;
      v1463 = STACK[0x3BE8] - STACK[0x38A0];
      v1464 = -39;
      if (STACK[0x3BE8] >= STACK[0x38A0])
        v1464 = 0;
      v1465 = STACK[0x3BE0] - STACK[0x3890];
      v1466 = -53;
      if (STACK[0x3BE0] >= STACK[0x3890])
        v1466 = 0;
      v301 = STACK[0x3BD0] >= STACK[0x3880];
      v1467 = STACK[0x3BD0] - STACK[0x3880];
      STACK[0x1A48] = v1451 + v1452;
      STACK[0x1A68] = v1455 + v1456;
      STACK[0x1A28] = v1453 + v1454;
      STACK[0x1A38] = v1461 + v1462;
      STACK[0x1A70] = v1459 + v1460;
      STACK[0x1A98] = v1457 + v1458;
      v1468 = -45;
      if (v301)
        v1468 = 0;
      STACK[0x1A18] = v1465 + v1466;
      STACK[0x19F0] = v1467 + v1468;
      STACK[0x1A60] = v1463 + v1464;
      v1469 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * v1448) - v1447 + 10040);
      STACK[0x3B58] = STACK[0x26C0];
      STACK[0x3120] = 0x661C765BF4208041;
      STACK[0x3160] = 0x6EBA58B5908087BFLL;
      STACK[0x3290] = 0xD4A6F4CF55C46B4CLL;
      STACK[0x3B50] = STACK[0x2688];
      STACK[0x3108] = STACK[0x26C8];
      STACK[0x3178] = STACK[0x26B8];
      STACK[0x31A8] = 0xA299ED451E059C13;
      STACK[0x30F8] = STACK[0x2690];
      STACK[0x3100] = STACK[0x2698];
      STACK[0x3118] = STACK[0x26D0];
      STACK[0x3168] = 0x5B8FBBD5E48BD14FLL;
      STACK[0x3B48] = STACK[0x26A8];
      STACK[0x3B60] = 0x97B89D4EA264A1B3;
      STACK[0x30F0] = STACK[0x26A0];
      STACK[0x3B40] = STACK[0x26B0];
      STACK[0x3110] = STACK[0x26D8];
      STACK[0x3800] = 0x87E85B6E5A109AFALL;
      STACK[0x3158] = 0x32E284E124F24A81;
      return v1469();
    case 0xC:
      STACK[0x1308] = v1411;
      STACK[0x3888] = STACK[0x3240];
      STACK[0x3240] = STACK[0x27A0];
      STACK[0x12F8] = v1406;
      STACK[0x3988] = STACK[0x3248];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x12C0] = STACK[0x3BD0];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x12B0] = v1412;
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x1298] = v1417;
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x1288] = STACK[0x3BC8];
      STACK[0x33C0] = STACK[0x3C50];
      v1632 = STACK[0x27F0];
      STACK[0x1278] = STACK[0x3BE0];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x31E0] = STACK[0x3318];
      v1633 = STACK[0x27B0];
      STACK[0x3308] = STACK[0x27B8];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3300] = STACK[0x27C0];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x1258] = v1399;
      STACK[0x3360] = STACK[0x27D0];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x1250] = STACK[0x3BE8];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x3BB8] = STACK[0x27D8];
      STACK[0x1230] = STACK[0x3C00];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x1218] = STACK[0x3BF8];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x3C58] = STACK[0x27E0];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x3BA0] = STACK[0x27E8];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x3690] = STACK[0x3A98];
      STACK[0x3270] = 13;
      STACK[0x3128] = STACK[0x2E20];
      STACK[0x3318] = STACK[0x2DF0];
      v1634 = STACK[0x2E18];
      STACK[0x3310] = 0x21BAADC71E2E67AELL;
      STACK[0x3348] = STACK[0x2E10];
      STACK[0x32E8] = 0x1BD1E5A80B860D97;
      STACK[0x32F8] = STACK[0x2E28];
      STACK[0x3330] = 0x2EE818AC82F341C6;
      STACK[0x3288] = 0x8DB13C47EC9C5060;
      STACK[0x3328] = 0x8EA56294FB27789DLL;
      STACK[0x3340] = STACK[0x2DF8];
      STACK[0x32F0] = STACK[0x2E38];
      STACK[0x3338] = STACK[0x2E30];
      STACK[0x3268] = 0xF435247866A89D6ALL;
      STACK[0x3260] = 0xB597BB10BF49CF5;
      STACK[0x32E0] = STACK[0x2E00];
      STACK[0x3278] = 0xDE63DAE4FC78A846;
      STACK[0x3258] = 0x4F32EF6C4CA22D86;
      STACK[0x3320] = 0x85D9DC5E933D8215;
      STACK[0x3280] = STACK[0x2E08];
      return sub_10069C158(v1632, 15, 5, v1633, v1634, v1399, 3, 0x77BBC4BB7B718F6EuLL);
    case 0x1D:
      v1635 = __CFADD__(STACK[0x1D38], STACK[0x1F68]) || STACK[0x1D38] + STACK[0x1F68] > 0xFFFFFFFFFFFFFFD2;
      v1636 = STACK[0x1D00] + STACK[0x1F48];
      v1637 = __CFADD__(STACK[0x1D00], STACK[0x1F48]) || STACK[0x1D00] + STACK[0x1F48] > 0xFFFFFFFFFFFFFFCALL;
      v1638 = STACK[0x1D10] + STACK[0x1F40] > 0xFFFFFFFFFFFFFFEELL;
      if (__CFADD__(STACK[0x1D10], STACK[0x1F40]))
        v1638 = 1;
      v1639 = STACK[0x1D20] + STACK[0x1F60] > 0xFFFFFFFFFFFFFFF0;
      if (__CFADD__(STACK[0x1D20], STACK[0x1F60]))
        v1639 = 1;
      v1640 = STACK[0x1F70] + STACK[0x1D48] > 0xFFFFFFFFFFFFFFFALL;
      if (__CFADD__(STACK[0x1F70], STACK[0x1D48]))
        v1640 = 1;
      v1641 = STACK[0x1D08] + STACK[0x1F58] > 0xFFFFFFFFFFFFFFF6;
      if (__CFADD__(STACK[0x1D08], STACK[0x1F58]))
        v1641 = 1;
      v1642 = STACK[0x1F38] + STACK[0x1D18];
      v1643 = __CFADD__(STACK[0x1F38], STACK[0x1D18]);
      v1644 = STACK[0x1D50] + STACK[0x1F80];
      LODWORD(v1645) = __CFADD__(STACK[0x1D50], STACK[0x1F80]);
      v1646 = STACK[0x1F30] + STACK[0x1D28];
      v1647 = __CFADD__(STACK[0x1F30], STACK[0x1D28]);
      v1648 = v1417;
      v1649 = v1411;
      v1650 = STACK[0x1D40] + STACK[0x1F78];
      v1651 = __CFADD__(STACK[0x1D40], STACK[0x1F78]);
      if (v1644 == -1)
        v1645 = 1;
      else
        v1645 = v1645;
      v1652 = v1645 + v1644;
      v1653 = v1646 > 0xFFFFFFFFFFFFFFFCLL || v1647;
      if (v1642 > 0xFFFFFFFFFFFFFFDELL)
        v1643 = 1;
      if (v1640)
        v1654 = 5;
      else
        v1654 = 0;
      v1655 = v1654 + STACK[0x1F70] + STACK[0x1D48];
      if (v1653)
        v1656 = 3;
      else
        v1656 = 0;
      v1657 = v1656 + v1646;
      v1658 = STACK[0x1D30] + STACK[0x1F50];
      v1659 = __CFADD__(STACK[0x1D30], STACK[0x1F50]);
      if (v1641)
        v1660 = 9;
      else
        v1660 = 0;
      v1661 = v1660 + STACK[0x1D08] + STACK[0x1F58];
      v1662 = v1650 > 0xFFFFFFFFFFFFFFD0 || v1651;
      if (v1658 > 0xFFFFFFFFFFFFFFD8)
        v1659 = 1;
      v1287 = !v1638;
      v1663 = 17;
      if (v1287)
        v1663 = 0;
      v1664 = v1663 + STACK[0x1D10] + STACK[0x1F40];
      v1665 = 15;
      if (!v1639)
        v1665 = 0;
      v1666 = v1665 + STACK[0x1D20] + STACK[0x1F60];
      v1667 = 47;
      if (!v1662)
        v1667 = 0;
      v1668 = v1667 + v1650;
      v1669 = 33;
      if (!v1643)
        v1669 = 0;
      v1670 = v1669 + v1642;
      v1671 = 39;
      if (!v1659)
        v1671 = 0;
      v1287 = !v1635;
      v1672 = v1671 + v1658;
      v1673 = 45;
      if (v1287)
        v1673 = 0;
      v301 = v1399 >= v1652;
      v1674 = v1399 - v1652;
      v1675 = v1673 + STACK[0x1D38] + STACK[0x1F68];
      v1676 = !v301;
      v301 = v1406 >= v1657;
      v1677 = v1406 - v1657;
      STACK[0x2498] = v1674 - v1676;
      if (v301)
        v1678 = 0;
      else
        v1678 = -3;
      v301 = v1649 >= v1661;
      v1679 = v1649 - v1661;
      STACK[0x24E0] = v1677 + v1678;
      if (v301)
        v1680 = 0;
      else
        v1680 = -9;
      STACK[0x24D8] = v1679 + v1680;
      v1681 = 53;
      if (!v1637)
        v1681 = 0;
      v301 = STACK[0x3BF8] >= v1670;
      v1682 = STACK[0x3BF8] - v1670;
      v1683 = v1681 + v1636;
      v1684 = -33;
      if (v301)
        v1684 = 0;
      STACK[0x24A8] = v1682 + v1684;
      if (v1412 >= v1655)
        v1685 = 0;
      else
        v1685 = -5;
      v1686 = STACK[0x3BE8];
      v1687 = STACK[0x3BE8] - v1672;
      STACK[0x24C8] = v1412 - v1655 + v1685;
      v1688 = -39;
      if (v1686 >= v1672)
        v1688 = 0;
      v301 = STACK[0x3BC8] >= v1664;
      v1689 = STACK[0x3BC8] - v1664;
      v1690 = -17;
      if (v301)
        v1690 = 0;
      v301 = v1648 >= v1666;
      v1691 = v1648 - v1666;
      v1692 = -15;
      if (v301)
        v1692 = 0;
      v301 = STACK[0x3BD0] >= v1675;
      v1693 = STACK[0x3BD0] - v1675;
      v1694 = -45;
      if (v301)
        v1694 = 0;
      v301 = STACK[0x3C00] >= v1668;
      v1695 = STACK[0x3C00] - v1668;
      v1696 = -47;
      if (v301)
        v1696 = 0;
      v301 = STACK[0x3BE0] >= v1683;
      v1697 = STACK[0x3BE0] - v1683;
      STACK[0x24C0] = v1689 + v1690;
      STACK[0x24A0] = (v1688 ^ v1687) + 2 * (v1688 & v1687);
      STACK[0x24B8] = v1693 + v1694;
      STACK[0x24B0] = v1691 + v1692;
      STACK[0x24D0] = v1695 + v1696;
      v1698 = -53;
      if (v301)
        v1698 = 0;
      STACK[0x24E8] = v1697 + v1698;
      v1699 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9638)) - 12);
      STACK[0x3BB8] = STACK[0x2710];
      STACK[0x3888] = STACK[0x3240];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x3828] = STACK[0x2708];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x3C58] = STACK[0x2798];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x3BA0] = STACK[0x26F8];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x33C0] = STACK[0x3C50];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3C50] = STACK[0x2770];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x3C40] = STACK[0x2780];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x3C48] = STACK[0x2788];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x3690] = STACK[0x3A98];
      LODWORD(STACK[0x3BD8]) = 30;
      STACK[0x3B70] = 0x34B9D46858BE76EBLL;
      STACK[0x3378] = STACK[0x1968];
      STACK[0x3B68] = 0x97B89D4EA264A1B3;
      STACK[0x3B78] = 0xF7C854F0B7BCE901;
      STACK[0x3370] = STACK[0x1948];
      STACK[0x3368] = STACK[0x1940];
      STACK[0x3210] = 0x87E85B6E5A109AFALL;
      STACK[0x3350] = 0x661C765BF4208041;
      STACK[0x3238] = STACK[0x19B8];
      STACK[0x3200] = STACK[0x1958];
      STACK[0x3218] = 0x5B8FBBD5E48BD14FLL;
      STACK[0x3358] = STACK[0x1930];
      STACK[0x3BD0] = STACK[0x1950];
      STACK[0x3230] = 0x32E284E124F24A81;
      STACK[0x3BC8] = STACK[0x1938];
      STACK[0x3208] = STACK[0x1970];
      STACK[0x3228] = 0xA299ED451E059C13;
      STACK[0x3BC0] = STACK[0x19B0];
      STACK[0x3250] = 0xD4A6F4CF55C46B4CLL;
      STACK[0x3220] = 0x6EBA58B5908087BFLL;
      STACK[0x3AC8] = STACK[0x1980];
      STACK[0x3248] = 0xDDB22C380449E0BALL;
      return v1699();
    case 0x20:
      v8 = STACK[0x1ED8];
      v9 = 2 * STACK[0x1ED8] > 0xFFFFFFFFFFFFFFCALL || v8 < 0;
      v10 = 53;
      if (!v9)
        v10 = 0;
      v11 = v10 + 2 * STACK[0x1ED8];
      STACK[0x3C38] = v11 + v8;
      v12 = __CFADD__(v11, v8) || v11 + v8 > 0xFFFFFFFFFFFFFFCALL;
      LODWORD(STACK[0x3C28]) = v12;
      v13 = STACK[0x1EB8];
      v14 = 2 * STACK[0x1EB8] > 0xFFFFFFFFFFFFFFEELL || v13 < 0;
      v15 = 17;
      if (!v14)
        v15 = 0;
      v16 = v15 + 2 * STACK[0x1EB8];
      v17 = v16 + v13;
      v18 = __CFADD__(v16, v13) || v16 + v13 > 0xFFFFFFFFFFFFFFEELL;
      v19 = STACK[0x1EF8];
      v20 = 2 * STACK[0x1EF8] > 0xFFFFFFFFFFFFFFD8 || v19 < 0;
      v21 = 39;
      if (!v20)
        v21 = 0;
      v22 = v21 + 2 * STACK[0x1EF8];
      STACK[0x3C20] = v22 + v19;
      v23 = __CFADD__(v22, v19) || v22 + v19 > 0xFFFFFFFFFFFFFFD8;
      LODWORD(STACK[0x3C08]) = v23;
      v24 = STACK[0x1EF0];
      v25 = 2 * STACK[0x1EF0] > 0xFFFFFFFFFFFFFFF6 || v24 < 0;
      v26 = 9;
      if (!v25)
        v26 = 0;
      v27 = v26 + 2 * STACK[0x1EF0];
      v28 = v27 + v24;
      v29 = __CFADD__(v27, v24) || v27 + v24 > 0xFFFFFFFFFFFFFFF6;
      v30 = STACK[0x1F00];
      if (2 * STACK[0x1F00] > 0xFFFFFFFFFFFFFFF0 || v30 < 0)
        v32 = 15;
      else
        v32 = 0;
      v33 = v32 + 2 * STACK[0x1F00];
      v34 = v33 + v30;
      v35 = __CFADD__(v33, v30) || v33 + v30 > 0xFFFFFFFFFFFFFFF0;
      v36 = STACK[0x1EE8];
      if (2 * STACK[0x1EE8] > 0xFFFFFFFFFFFFFFFCLL || v36 < 0)
        v38 = 3;
      else
        v38 = 0;
      v39 = v38 + 2 * STACK[0x1EE8];
      v40 = v39 + v36 > 0xFFFFFFFFFFFFFFFCLL;
      v41 = v39 + v36;
      if (__CFADD__(v39, v36))
        v40 = 1;
      v42 = __ROR8__(STACK[0x1EE0], 63);
      v43 = v42 + STACK[0x1EE0] == -1;
      v301 = __CFADD__(v42, STACK[0x1EE0]);
      v44 = v42 + STACK[0x1EE0];
      v45 = v301 || v43;
      v46 = STACK[0x1ED0];
      if (2 * STACK[0x1ED0] > 0xFFFFFFFFFFFFFFFALL || v46 < 0)
        v48 = 5;
      else
        v48 = 0;
      v49 = v48 + 2 * STACK[0x1ED0];
      v50 = STACK[0x1F08];
      if (2 * STACK[0x1F08] > 0xFFFFFFFFFFFFFFDELL || v50 < 0)
        v52 = 33;
      else
        v52 = 0;
      v53 = v52 + 2 * STACK[0x1F08];
      v54 = STACK[0x1EC0];
      v55 = 2 * STACK[0x1EC0];
      v56 = v55 > 0xFFFFFFFFFFFFFFD0 || v54 < 0;
      v57 = STACK[0x1EC8];
      STACK[0x3C78] = v1417;
      v58 = 2 * v57;
      STACK[0x3C30] = v1411;
      if (v56)
        v59 = 47;
      else
        v59 = 0;
      if (v58 > 0xFFFFFFFFFFFFFFD2 || v57 < 0)
        v61 = 45;
      else
        v61 = 0;
      v62 = v61 + v58;
      v63 = v59 + v55;
      v301 = __CFADD__(v49, v46);
      v64 = v49 + v46;
      v65 = v301;
      v301 = __CFADD__(v53, v50);
      v66 = v53 + v50;
      v67 = v301;
      if (v64 > 0xFFFFFFFFFFFFFFFALL)
        v65 = 1;
      v301 = __CFADD__(v62, v57);
      v68 = v62 + v57;
      v69 = v301;
      if (v66 > 0xFFFFFFFFFFFFFFDELL)
        v67 = 1;
      STACK[0x1010] = v45 + v44;
      if (v65)
        v70 = 5;
      else
        v70 = 0;
      if (v35)
        v71 = 15;
      else
        v71 = 0;
      STACK[0x1018] = v71 + v34;
      if (v67)
        v72 = 33;
      else
        v72 = 0;
      if (v40)
        v73 = 3;
      else
        v73 = 0;
      v74 = v63 + v54;
      v75 = __CFADD__(v63, v54);
      STACK[0x1028] = v70 + v64;
      STACK[0xFD8] = v72 + v66;
      STACK[0xFF8] = v73 + v41;
      v76 = 9;
      if (!v29)
        v76 = 0;
      if (v68 > 0xFFFFFFFFFFFFFFD2)
        v77 = 1;
      else
        v77 = v69;
      v78 = v74 > 0xFFFFFFFFFFFFFFD0 || v75;
      if (v18)
        v79 = 17;
      else
        v79 = 0;
      STACK[0x1000] = v79 + v17;
      if (v78)
        v80 = 47;
      else
        v80 = 0;
      STACK[0x1038] = v76 + v28;
      STACK[0x1068] = v80 + v74;
      if (v77)
        v81 = 45;
      else
        v81 = 0;
      v82 = STACK[0x3C28];
      STACK[0xFF0] = v81 + v68;
      v83 = 53;
      if (!v82)
        v83 = 0;
      STACK[0xFE8] = v83 + STACK[0x3C38];
      v84 = 39;
      if (!LODWORD(STACK[0x3C08]))
        v84 = 0;
      STACK[0xFE0] = v84 + STACK[0x3C20];
      v85 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523)) - 8);
      STACK[0x12E8] = STACK[0x3BD0];
      STACK[0x3888] = STACK[0x3240];
      STACK[0x3240] = STACK[0x27A0];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x12B8] = STACK[0x3BF8];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x1290] = STACK[0x3BC8];
      STACK[0x3270] = 33;
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x1280] = v1399;
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x33C0] = STACK[0x3C50];
      v86 = STACK[0x27F0];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x1270] = v1412;
      STACK[0x1268] = STACK[0x3BE8];
      STACK[0x1260] = v1406;
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x3308] = STACK[0x27B8];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3300] = STACK[0x27C0];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x1228] = STACK[0x3BE0];
      STACK[0x3360] = STACK[0x27D0];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x3BB8] = STACK[0x27D8];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x3C58] = STACK[0x27E0];
      STACK[0x1200] = STACK[0x3C78];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x3BA0] = STACK[0x27E8];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x11F8] = STACK[0x3C30];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x1220] = STACK[0x3C00];
      STACK[0x3690] = STACK[0x3A98];
      STACK[0x3128] = STACK[0x1F70];
      STACK[0x3318] = STACK[0x1F60];
      STACK[0x3310] = 0x661C765BF4208041;
      STACK[0x3348] = STACK[0x1F68];
      STACK[0x32E8] = 0x5B8FBBD5E48BD14FLL;
      STACK[0x32F8] = STACK[0x1F80];
      STACK[0x3330] = 0xA299ED451E059C13;
      STACK[0x3288] = 0x32E284E124F24A81;
      STACK[0x3328] = 0x97B89D4EA264A1B3;
      STACK[0x3340] = STACK[0x1F48];
      STACK[0x32F0] = STACK[0x1F30];
      STACK[0x3338] = STACK[0x1F78];
      STACK[0x3268] = 0xD4A6F4CF55C46B4CLL;
      STACK[0x3260] = 0x87E85B6E5A109AFALL;
      STACK[0x32E0] = STACK[0x1F40];
      STACK[0x3278] = 0x34B9D46858BE76EBLL;
      STACK[0x3258] = 0xDDB22C380449E0BALL;
      STACK[0x3320] = 0x6EBA58B5908087BFLL;
      STACK[0x3280] = STACK[0x1F58];
      return v85(v86);
    case 0x26:
      STACK[0x2D90] = (__PAIR128__(v1399 - STACK[0x1160], v1399) - STACK[0x1160]) >> 64;
      if (v1411 >= STACK[0x11D8])
        v1700 = 0;
      else
        v1700 = -9;
      STACK[0x2CA0] = v1411 - STACK[0x11D8] + v1700;
      if (v1406 >= STACK[0x10E8])
        v1701 = 0;
      else
        v1701 = -3;
      STACK[0x2CA8] = v1406 - STACK[0x10E8] + v1701;
      v1702 = -33;
      if (STACK[0x3BF8] >= STACK[0x1108])
        v1702 = 0;
      STACK[0x2D10] = STACK[0x3BF8] - STACK[0x1108] + v1702;
      if (v1417 >= STACK[0x1130])
        v1703 = 0;
      else
        v1703 = -15;
      STACK[0x2D88] = v1417 - STACK[0x1130] + v1703;
      if (v1412 >= STACK[0x11A0])
        v1704 = 0;
      else
        v1704 = -5;
      STACK[0x2D08] = v1412 - STACK[0x11A0] + v1704;
      v1705 = -47;
      if (STACK[0x3C00] >= STACK[0x10F0])
        v1705 = 0;
      STACK[0x2D20] = STACK[0x3C00] - STACK[0x10F0] + v1705;
      v1706 = -45;
      if (STACK[0x3BD0] >= STACK[0x1100])
        v1706 = 0;
      STACK[0x2C88] = STACK[0x3BD0] - STACK[0x1100] + v1706;
      v1707 = -17;
      if (STACK[0x3BC8] >= STACK[0x11C8])
        v1707 = 0;
      STACK[0x2C98] = STACK[0x3BC8] - STACK[0x11C8] + v1707;
      v1708 = STACK[0x1988];
      v1709 = 0x4000000000000000;
      if ((STACK[0x1988] & 0x4000000000000000) != 0)
        v1709 = 0xC000000000000000;
      v1710 = -39;
      if (STACK[0x3BE8] >= STACK[0x1190])
        v1710 = 0;
      STACK[0x2D18] = STACK[0x3BE8] - STACK[0x1190] + v1710;
      v1711 = -53;
      if (STACK[0x3BE0] >= STACK[0x1178])
        v1711 = 0;
      STACK[0x2C90] = STACK[0x3BE0] - STACK[0x1178] + v1711;
      STACK[0x3128] = (v1709 + v1708) ^ 0x4000000000000000;
      v1712 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523)) - 8);
      STACK[0x3888] = STACK[0x3240];
      STACK[0x3240] = STACK[0x27A0];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x33C0] = STACK[0x3C50];
      v1713 = STACK[0x27F0];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x3308] = STACK[0x27B8];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3300] = STACK[0x27C0];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x3360] = STACK[0x27D0];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x3BB8] = STACK[0x27D8];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x3C58] = STACK[0x27E0];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x3BA0] = STACK[0x27E8];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x3690] = STACK[0x3A98];
      STACK[0x3270] = 39;
      STACK[0x3318] = STACK[0x19D8];
      STACK[0x3310] = STACK[0x1AE0];
      STACK[0x3348] = STACK[0x1978];
      STACK[0x32E8] = STACK[0x1AF0];
      STACK[0x32F8] = STACK[0x19A8];
      STACK[0x3330] = STACK[0x1AE8];
      STACK[0x3288] = STACK[0x1AD8];
      STACK[0x3328] = STACK[0x1AC0];
      STACK[0x3340] = STACK[0x19D0];
      STACK[0x32F0] = STACK[0x1998];
      STACK[0x3338] = STACK[0x1960];
      STACK[0x3268] = STACK[0x1AD0];
      STACK[0x3260] = STACK[0x1AB8];
      STACK[0x32E0] = STACK[0x19C0];
      STACK[0x3278] = STACK[0x1AB0];
      STACK[0x3258] = STACK[0x1AA0];
      STACK[0x3320] = STACK[0x1AA8];
      STACK[0x3280] = STACK[0x19C8];
      return v1712(v1713);
    case 0x28:
      v1470 = STACK[0x3BD0] + STACK[0x3C48];
      v1471 = __CFADD__(STACK[0x3BD0], STACK[0x3C48]) || STACK[0x3BD0] + STACK[0x3C48] > 0xFFFFFFFFFFFFFFD2;
      v1472 = STACK[0x3BE0] + STACK[0x3A70];
      v1473 = __CFADD__(STACK[0x3BE0], STACK[0x3A70]) || STACK[0x3BE0] + STACK[0x3A70] > 0xFFFFFFFFFFFFFFCALL;
      v1474 = STACK[0x3BE8] + STACK[0x3A80];
      v1475 = __CFADD__(STACK[0x3BE8], STACK[0x3A80]) || STACK[0x3BE8] + STACK[0x3A80] > 0xFFFFFFFFFFFFFFD8;
      v1476 = v1417 + STACK[0x3A90] > 0xFFFFFFFFFFFFFFF0;
      v1477 = v1417 + STACK[0x3A90];
      if (__CFADD__(v1417, STACK[0x3A90]))
        v1476 = 1;
      v1478 = STACK[0x3C58];
      v1479 = v1412 + STACK[0x3C58] > 0xFFFFFFFFFFFFFFFALL;
      v301 = __CFADD__(v1412, STACK[0x3C58]);
      v1480 = v1412 + STACK[0x3C58];
      v1481 = v301 || v1479;
      v1482 = v1406 + STACK[0x3A98];
      v1483 = __CFADD__(v1406, STACK[0x3A98]);
      v1484 = v1482 > 0xFFFFFFFFFFFFFFFCLL || v1483;
      v1485 = v1399 + STACK[0x39C0];
      LODWORD(v1486) = __CFADD__(v1399, STACK[0x39C0]);
      v1487 = v1411 + STACK[0x3A88];
      v1488 = __CFADD__(v1411, STACK[0x3A88]);
      v1489 = STACK[0x3BC8] + STACK[0x3C50];
      v1490 = __CFADD__(STACK[0x3BC8], STACK[0x3C50]);
      v1491 = STACK[0x3C00] + STACK[0x3A78];
      v1492 = __CFADD__(STACK[0x3C00], STACK[0x3A78]);
      if (v1484)
        v1493 = 3;
      else
        v1493 = 0;
      if (v1487 > 0xFFFFFFFFFFFFFFF6)
        v1488 = 1;
      if (v1485 == -1)
        v1486 = 1;
      else
        v1486 = v1486;
      if (v1489 > 0xFFFFFFFFFFFFFFEELL)
        v1490 = 1;
      v1494 = STACK[0x3BF8] + STACK[0x3C40];
      v1495 = __CFADD__(STACK[0x3BF8], STACK[0x3C40]);
      if (v1481)
        v1496 = 5;
      else
        v1496 = 0;
      if (v1494 > 0xFFFFFFFFFFFFFFDELL)
        v1495 = 1;
      if (v1488)
        v1497 = 9;
      else
        v1497 = 0;
      v1287 = !v1476;
      v1498 = v1493 + v1482;
      v1499 = 15;
      if (v1287)
        v1499 = 0;
      v1500 = v1497 + v1487;
      v1501 = v1491 > 0xFFFFFFFFFFFFFFD0 || v1492;
      v1502 = 33;
      if (!v1495)
        v1502 = 0;
      v1503 = 17;
      if (!v1490)
        v1503 = 0;
      if (v1475)
        v1504 = 39;
      else
        v1504 = 0;
      v1505 = v1496 + v1480;
      STACK[0x30D8] = v1486 + v1485;
      STACK[0x3828] = v1503 + v1489;
      v1506 = v1504 + v1474;
      STACK[0x30D0] = v1502 + v1494;
      if (v1501)
        v1507 = 47;
      else
        v1507 = 0;
      if (v1473)
        v1508 = 53;
      else
        v1508 = 0;
      v1509 = v1499 + v1477;
      v1510 = v1507 + v1491;
      if (v1471)
        v1511 = 45;
      else
        v1511 = 0;
      v1512 = v1511 + v1470;
      v1513 = STACK[0x3400];
      STACK[0x30E0] = v1511 + v1470;
      STACK[0x30E8] = v1505;
      STACK[0x3BC8] = v1500;
      STACK[0x3BD0] = v1508 + v1472;
      STACK[0x3370] = v1506;
      STACK[0x3348] = v1509;
      STACK[0x3340] = v1510;
      STACK[0x3378] = v1498;
      if (v1513 <= 89)
      {
        STACK[0x3C58] = v1478;
        v1554 = STACK[0x2D00];
        v1555 = STACK[0x2C80];
        v1556 = STACK[0x2D88];
        v1557 = STACK[0x2D20];
        v1518 = STACK[0x2CA8];
        v1558 = STACK[0x2D18];
        v1519 = STACK[0x2D90];
        v1559 = STACK[0x2D10];
        v1560 = STACK[0x2CA0];
        v1561 = STACK[0x2C98];
        v1562 = STACK[0x2D08];
        v1563 = STACK[0x3834];
        v1564 = STACK[0x3870];
        v1565 = STACK[0x3868];
        v1566 = STACK[0x3860];
        if (v1513 == 41)
        {
          LODWORD(STACK[0x3BB8]) = 59;
          v1960 = v1519;
          STACK[0x3888] = v1519;
          STACK[0x3988] = v1556;
          STACK[0x3A28] = STACK[0x3330];
          v1961 = v1518;
          STACK[0x3AB8] = v1518;
          v1962 = STACK[0x3828];
          STACK[0x3308] = STACK[0x3828];
          v1963 = STACK[0x3320];
          STACK[0x3BD8] = STACK[0x3320];
          v1964 = STACK[0x3BC8];
          v1965 = STACK[0x30D8];
          STACK[0x3300] = STACK[0x30D8];
          STACK[0x3A68] = STACK[0x3338];
          STACK[0x31A8] = v1518;
          v1966 = v1558;
          STACK[0x3BA0] = v1558;
          STACK[0x3980] = v1509;
          v1967 = STACK[0x3C68];
          STACK[0x3A20] = STACK[0x3C68];
          STACK[0x2D88] = v1556;
          v1968 = STACK[0x3318];
          STACK[0x3A48] = STACK[0x3318];
          v1969 = v1509;
          v1970 = STACK[0x3C60];
          STACK[0x3A60] = STACK[0x3C60];
          v1971 = STACK[0x3328];
          STACK[0x3A50] = STACK[0x3328];
          v1972 = v1559;
          STACK[0x3AB0] = v1559;
          STACK[0x31E8] = v1970;
          STACK[0x3B70] = v1562;
          STACK[0x3B78] = v1554;
          v1973 = STACK[0x30D0];
          STACK[0x3A18] = STACK[0x30D0];
          STACK[0x39B0] = v1965;
          STACK[0x3B68] = v1560;
          STACK[0x3350] = STACK[0x39F8];
          STACK[0x32F8] = v1566;
          STACK[0x32E0] = STACK[0x3838];
          STACK[0x3B98] = STACK[0x39C8];
          STACK[0x3B80] = v1565;
          STACK[0x3358] = v1564;
          STACK[0x3268] = v1965;
          STACK[0x3B90] = STACK[0x32D8];
          STACK[0x3978] = v1510;
          v1974 = STACK[0x30E8];
          STACK[0x3AC8] = STACK[0x30E8];
          v1975 = STACK[0x3378];
          STACK[0x3960] = STACK[0x3378];
          STACK[0x3A38] = v1555;
          v1976 = STACK[0x2C88];
          STACK[0x3AA8] = STACK[0x2C88];
          STACK[0x3970] = v1962;
          v1977 = STACK[0x2B18];
          STACK[0x3280] = STACK[0x2B18];
          STACK[0x3B88] = v1968;
          STACK[0x31E0] = v1968;
          STACK[0x3368] = v1969;
          STACK[0x3158] = v1972;
          STACK[0x39A8] = v1966;
          v1978 = STACK[0x2C90];
          STACK[0x3C20] = STACK[0x2C90];
          STACK[0x31D8] = v1963;
          STACK[0x3AA0] = v1963;
          v1979 = STACK[0x3310];
          STACK[0x3A40] = STACK[0x3310];
          STACK[0x3288] = v1972;
          STACK[0x3360] = v1977;
          v1980 = STACK[0x3BD0];
          STACK[0x3958] = STACK[0x3BD0];
          STACK[0x3A30] = v1554;
          STACK[0x37E8] = v1510;
          STACK[0x3968] = v1964;
          v1981 = STACK[0x3338];
          STACK[0x3240] = STACK[0x3338];
          STACK[0x3250] = v1973;
          STACK[0x3278] = v1971;
          STACK[0x31D0] = STACK[0x3330];
          STACK[0x3260] = v1557;
          STACK[0x3270] = v1512;
          STACK[0x39A0] = v1560;
          STACK[0x31C8] = v1979;
          STACK[0x3948] = v1512;
          STACK[0x32F0] = v1964;
          STACK[0x3160] = v1976;
          STACK[0x3998] = v1562;
          v1982 = STACK[0x3370];
          STACK[0x3950] = STACK[0x3370];
          STACK[0x3238] = v1967;
          STACK[0x3258] = v1970;
          STACK[0x32E8] = v1980;
          STACK[0x37F0] = v1982;
          STACK[0x39B8] = v1557;
          STACK[0x3820] = v1561;
          STACK[0x3940] = v1974;
          STACK[0x3290] = v1562;
          STACK[0x3120] = v1560;
          STACK[0x3990] = v1561;
          STACK[0x3B60] = v1557;
          v1983 = STACK[0x2D88];
          STACK[0x3248] = STACK[0x2D88];
          STACK[0x3230] = v1554;
          STACK[0x3A58] = v1977;
          STACK[0x31C0] = v1967;
          STACK[0x3C28] = v1966;
          STACK[0x3228] = v1555;
          STACK[0x3220] = v1960;
          STACK[0x3800] = v1983;
          STACK[0x37E0] = v1978;
          STACK[0x3168] = v1960;
          STACK[0x31B8] = v1971;
          STACK[0x31B0] = v1981;
          STACK[0x3818] = v1975;
          return sub_1006BF11C(v1561, v1978, v1961);
        }
        v1567 = STACK[0x3868];
        v1568 = STACK[0x3338];
        v1523 = STACK[0x3330];
        v1569 = STACK[0x3328];
        v1570 = STACK[0x3320];
        v1571 = STACK[0x3318];
        if (v1513 == 60)
        {
          LODWORD(STACK[0x156C]) = 78;
          v1984 = v1519;
          STACK[0x3240] = v1519;
          v1985 = v1556;
          STACK[0x3248] = v1556;
          STACK[0x3B90] = v1523;
          STACK[0x3168] = v1519;
          v1986 = v1518;
          STACK[0x3258] = v1518;
          STACK[0x3B80] = v1568;
          STACK[0x3368] = v1509;
          v1987 = STACK[0x3C68];
          STACK[0x3268] = STACK[0x3C68];
          v1988 = v1571;
          STACK[0x3B88] = v1571;
          v1989 = v1557;
          STACK[0x3B60] = v1557;
          v1990 = STACK[0x3C60];
          STACK[0x3270] = STACK[0x3C60];
          STACK[0x3208] = v1569;
          v1991 = v1560;
          STACK[0x3120] = v1560;
          STACK[0x1560] = v1561;
          v1992 = v1559;
          STACK[0x31F8] = v1559;
          STACK[0x31E8] = v1990;
          STACK[0x3800] = v1985;
          v1993 = STACK[0x30D0];
          STACK[0x3350] = STACK[0x30D0];
          STACK[0x3300] = STACK[0x30D8];
          v1994 = v1510;
          STACK[0x32F8] = v1510;
          v1995 = STACK[0x2B18];
          STACK[0x3128] = STACK[0x2B18];
          STACK[0x3820] = v1561;
          v1996 = STACK[0x30E0];
          STACK[0x1540] = STACK[0x30E0];
          STACK[0x1550] = v1568;
          v1997 = STACK[0x3378];
          STACK[0x3358] = STACK[0x3378];
          v1998 = v1555;
          STACK[0x3B98] = v1555;
          STACK[0x1558] = v1558;
          v1999 = STACK[0x2C88];
          STACK[0x3200] = STACK[0x2C88];
          v2000 = v1569;
          v2001 = STACK[0x3828];
          STACK[0x3308] = STACK[0x3828];
          STACK[0x1548] = v1986;
          STACK[0x3360] = v1995;
          STACK[0x3290] = v1562;
          v2002 = STACK[0x30E8];
          STACK[0x1538] = STACK[0x30E8];
          STACK[0x31E0] = v1988;
          STACK[0x3210] = v1558;
          STACK[0x31D8] = v1570;
          STACK[0x3BD8] = v1570;
          v2003 = STACK[0x3310];
          STACK[0x3218] = STACK[0x3310];
          STACK[0x1530] = v1523;
          v2004 = STACK[0x3BD0];
          STACK[0x32E8] = STACK[0x3BD0];
          v2005 = v1554;
          STACK[0x3220] = v1554;
          v2006 = STACK[0x3BC8];
          STACK[0x32F0] = STACK[0x3BC8];
          STACK[0x1528] = v1987;
          STACK[0x31D0] = v1523;
          STACK[0x3C28] = v1558;
          STACK[0x3228] = v1991;
          STACK[0x31C8] = v2003;
          STACK[0x3230] = v1996;
          STACK[0x3238] = v1562;
          STACK[0x1520] = v1992;
          STACK[0x1510] = v1984;
          STACK[0x1518] = v1993;
          STACK[0x1508] = v1990;
          v2007 = STACK[0x3370];
          STACK[0x32E0] = STACK[0x3370];
          STACK[0x3160] = v1999;
          STACK[0x1500] = v1999;
          STACK[0x3250] = v1989;
          STACK[0x36C8] = v2004;
          STACK[0x3260] = v2002;
          STACK[0x14F8] = v2005;
          STACK[0x14E8] = v1998;
          STACK[0x3158] = v1992;
          STACK[0x3810] = v1509;
          STACK[0x3278] = v1561;
          STACK[0x14F0] = v1562;
          STACK[0x3280] = v1995;
          STACK[0x31C0] = v1987;
          STACK[0x14B8] = v1998;
          STACK[0x14D8] = v1985;
          STACK[0x14E0] = v2003;
          STACK[0x14D0] = v1991;
          STACK[0x14C8] = v2000;
          STACK[0x3808] = v2006;
          v2008 = STACK[0x2C90];
          STACK[0x3C20] = STACK[0x2C90];
          STACK[0x14C0] = v1988;
          STACK[0x14A0] = v1570;
          STACK[0x3288] = v2008;
          STACK[0x3818] = v1997;
          STACK[0x31B8] = v2000;
          STACK[0x31B0] = STACK[0x3338];
          STACK[0x1498] = v2005;
          STACK[0x37F0] = v2007;
          STACK[0x31A8] = v1986;
          STACK[0x14B0] = v2008;
          STACK[0x37E8] = v1994;
          STACK[0x37F8] = v2001;
          STACK[0x14A8] = STACK[0x30D8];
          STACK[0x1490] = v1989;
          STACK[0x2A00] = STACK[0x37F8];
          STACK[0x29F8] = STACK[0x37F0];
          STACK[0x2A08] = STACK[0x3808];
          STACK[0x29F0] = STACK[0x3810];
          STACK[0x29E0] = STACK[0x36C8];
          STACK[0x29D0] = STACK[0x30D0];
          STACK[0x29E8] = STACK[0x30D8];
          STACK[0x29D8] = STACK[0x30E8];
          LODWORD(v1990) = STACK[0x3710];
          v2033 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 10112));
          STACK[0x3888] = STACK[0x3240];
          STACK[0x1C88] = STACK[0x14B8];
          STACK[0x36C8] = STACK[0x28D8];
          STACK[0x3810] = STACK[0x28E0];
          STACK[0x3988] = STACK[0x3248];
          STACK[0x3A28] = STACK[0x3B90];
          STACK[0x3688] = STACK[0x39E0];
          STACK[0x2FE8] = STACK[0x2800];
          STACK[0x29C8] = STACK[0x3818];
          STACK[0x2FE0] = STACK[0x2808];
          STACK[0x29C0] = STACK[0x3BD0];
          STACK[0x3AB8] = STACK[0x3258];
          STACK[0x37F8] = STACK[0x28E8];
          STACK[0x2FC8] = STACK[0x2810];
          STACK[0x2FD8] = STACK[0x28B0];
          STACK[0x2FF0] = STACK[0x2AE0];
          STACK[0x2FC0] = STACK[0x2AA8];
          STACK[0x1C80] = STACK[0x3320];
          STACK[0x3A68] = STACK[0x3B80];
          STACK[0x1C78] = STACK[0x3C68];
          STACK[0x3980] = STACK[0x3368];
          STACK[0x3A20] = STACK[0x3268];
          STACK[0x3A48] = STACK[0x3B88];
          STACK[0x2FB0] = STACK[0x28F0];
          STACK[0x3A60] = STACK[0x3270];
          STACK[0x3808] = STACK[0x2A10];
          STACK[0x2FA8] = STACK[0x28B8];
          STACK[0x2FA0] = STACK[0x2910];
          STACK[0x1C70] = STACK[0x3128];
          STACK[0x29B8] = STACK[0x30E0];
          STACK[0x2FB8] = STACK[0x2AE8];
          STACK[0x2FD0] = STACK[0x28F8];
          STACK[0x3A50] = STACK[0x3208];
          STACK[0x3680] = STACK[0x39E8];
          STACK[0x3AB0] = STACK[0x31F8];
          STACK[0x1C68] = STACK[0x14E8];
          STACK[0x2F90] = STACK[0x2918];
          STACK[0x1C60] = STACK[0x3310];
          STACK[0x3A18] = STACK[0x3350];
          STACK[0x39B0] = STACK[0x3300];
          STACK[0x3668] = STACK[0x39D8];
          STACK[0x3978] = STACK[0x32F8];
          STACK[0x37F0] = STACK[0x2AF0];
          STACK[0x2F88] = STACK[0x2818];
          STACK[0x3678] = STACK[0x39F8];
          STACK[0x3670] = STACK[0x3860];
          STACK[0x2F78] = STACK[0x2820];
          STACK[0x2F98] = STACK[0x2A18];
          STACK[0x1C58] = STACK[0x3318];
          STACK[0x3960] = STACK[0x3358];
          STACK[0x2F80] = STACK[0x2920];
          STACK[0x1C50] = STACK[0x1508];
          STACK[0x29B0] = STACK[0x1540];
          STACK[0x3A38] = STACK[0x3B98];
          STACK[0x3AA8] = STACK[0x3200];
          STACK[0x3970] = STACK[0x3308];
          STACK[0x3660] = STACK[0x3838];
          STACK[0x2F70] = STACK[0x2828];
          STACK[0x2F68] = STACK[0x2900];
          STACK[0x30E0] = STACK[0x2A20];
          STACK[0x3658] = STACK[0x39D0];
          STACK[0x3650] = STACK[0x3840];
          STACK[0x1C48] = STACK[0x3338];
          STACK[0x2F50] = STACK[0x2928];
          v2034 = STACK[0x1490];
          STACK[0x2280] = STACK[0x1490];
          STACK[0x3B50] = v2034;
          STACK[0x29A8] = STACK[0x37E8];
          v2035 = STACK[0x1560];
          STACK[0x3B58] = STACK[0x1560];
          STACK[0x2278] = v2035;
          STACK[0x2F48] = STACK[0x2930];
          STACK[0x2F40] = STACK[0x28C0];
          STACK[0x29A0] = STACK[0x3348];
          STACK[0x2F38] = STACK[0x2830];
          STACK[0x3640] = STACK[0x39C8];
          STACK[0x3648] = STACK[0x3BA8];
          STACK[0x3638] = STACK[0x3848];
          STACK[0x39A8] = STACK[0x3210];
          STACK[0x1C40] = STACK[0x14C0];
          STACK[0x3630] = STACK[0x3A00];
          STACK[0x3AA0] = STACK[0x3BD8];
          STACK[0x2998] = STACK[0x3370];
          STACK[0x3A40] = STACK[0x3218];
          STACK[0x2F58] = STACK[0x2A28];
          STACK[0x3628] = STACK[0x3A10];
          STACK[0x3958] = STACK[0x32E8];
          STACK[0x1C38] = STACK[0x3C60];
          v2036 = STACK[0x1510];
          STACK[0x2270] = STACK[0x1510];
          STACK[0x3178] = v2036;
          STACK[0x3A30] = STACK[0x3220];
          STACK[0x3618] = STACK[0x3868];
          STACK[0x3610] = STACK[0x39F0];
          STACK[0x3968] = STACK[0x32F0];
          STACK[0x3620] = STACK[0x3850];
          STACK[0x1C30] = STACK[0x1530];
          STACK[0x2F30] = STACK[0x2AB0];
          STACK[0x3608] = STACK[0x3858];
          STACK[0x3600] = STACK[0x3870];
          v2037 = STACK[0x14D0];
          STACK[0x2268] = STACK[0x14D0];
          STACK[0x30F8] = v2037;
          STACK[0x2F28] = STACK[0x2838];
          STACK[0x35F8] = STACK[0x3A08];
          v2038 = STACK[0x14D8];
          STACK[0x2260] = STACK[0x14D8];
          STACK[0x3100] = v2038;
          STACK[0x2F20] = STACK[0x2840];
          STACK[0x3C60] = STACK[0x2938];
          STACK[0x37E8] = STACK[0x2AF8];
          STACK[0x39A0] = STACK[0x3228];
          STACK[0x3948] = STACK[0x3230];
          STACK[0x2990] = STACK[0x1518];
          v2039 = STACK[0x1500];
          STACK[0x3118] = STACK[0x1500];
          STACK[0x2258] = v2039;
          STACK[0x3998] = STACK[0x3238];
          STACK[0x30D0] = STACK[0x2A30];
          STACK[0x3950] = STACK[0x32E0];
          STACK[0x1C18] = STACK[0x1550];
          STACK[0x1C10] = STACK[0x3330];
          STACK[0x2988] = STACK[0x3BC8];
          STACK[0x2F10] = STACK[0x2AB8];
          STACK[0x2F08] = STACK[0x2848];
          STACK[0x2F18] = STACK[0x2850];
          STACK[0x1C08] = STACK[0x14C8];
          STACK[0x2980] = STACK[0x1538];
          STACK[0x35F0] = STACK[0x3AD0];
          STACK[0x2F00] = STACK[0x2AC0];
          STACK[0x2EF8] = STACK[0x2858];
          STACK[0x1C00] = STACK[0x14A0];
          STACK[0x35E8] = STACK[0x3AD8];
          STACK[0x35E0] = STACK[0x3AE0];
          STACK[0x35D8] = STACK[0x3AE8];
          STACK[0x39B8] = STACK[0x3250];
          STACK[0x2978] = STACK[0x3828];
          STACK[0x3940] = STACK[0x3260];
          STACK[0x1BF8] = STACK[0x14F8];
          STACK[0x2EE8] = STACK[0x2860];
          STACK[0x2970] = STACK[0x3340];
          STACK[0x2EF0] = STACK[0x2868];
          LODWORD(STACK[0x760]) = STACK[0x156C];
          STACK[0x2ED8] = STACK[0x2940];
          STACK[0x1BF0] = STACK[0x1528];
          STACK[0x3990] = STACK[0x3278];
          STACK[0x1BE8] = STACK[0x3328];
          STACK[0x2EE0] = STACK[0x2AC8];
          STACK[0x35D0] = STACK[0x3AF0];
          STACK[0x2ED0] = STACK[0x2A38];
          v2040 = STACK[0x1558];
          STACK[0x2220] = STACK[0x1558];
          STACK[0x3B48] = v2040;
          STACK[0x2EC0] = STACK[0x2870];
          STACK[0x2EB8] = STACK[0x2878];
          STACK[0x3A58] = STACK[0x3280];
          STACK[0x2EC8] = STACK[0x2908];
          STACK[0x2EB0] = STACK[0x28C8];
          v2041 = STACK[0x1520];
          STACK[0x2228] = STACK[0x1520];
          STACK[0x30F0] = v2041;
          v2042 = STACK[0x14B0];
          STACK[0x2238] = STACK[0x14B0];
          STACK[0x3B40] = v2042;
          STACK[0x2EA8] = STACK[0x2948];
          STACK[0x2EA0] = STACK[0x2880];
          STACK[0x2968] = STACK[0x14A8];
          STACK[0x2E98] = STACK[0x2B00];
          STACK[0x35C8] = STACK[0x3AF8];
          v2043 = STACK[0x1548];
          STACK[0x3108] = STACK[0x1548];
          STACK[0x2200] = v2043;
          STACK[0x35C0] = STACK[0x3B08];
          STACK[0x35B8] = STACK[0x3B00];
          STACK[0x30E8] = STACK[0x2B08];
          STACK[0x1BE0] = STACK[0x1498];
          STACK[0x35B0] = STACK[0x3B10];
          STACK[0x35A8] = STACK[0x3B18];
          LODWORD(STACK[0x2F64]) = STACK[0x27FC];
          STACK[0x2E90] = STACK[0x28D0];
          STACK[0x37E0] = STACK[0x3288];
          STACK[0x2960] = STACK[0x3378];
          STACK[0x35A0] = STACK[0x3B20];
          STACK[0x30D8] = STACK[0x2A40];
          v2044 = STACK[0x14F0];
          STACK[0x3110] = STACK[0x14F0];
          STACK[0x21E0] = v2044;
          STACK[0x2E88] = STACK[0x2AD0];
          STACK[0x2E78] = STACK[0x2888];
          STACK[0x3C68] = STACK[0x2950];
          STACK[0x3598] = STACK[0x3B30];
          STACK[0x2E70] = STACK[0x2890];
          STACK[0x2E68] = STACK[0x2898];
          STACK[0x3588] = STACK[0x3B28];
          STACK[0x3818] = STACK[0x2A48];
          STACK[0x2E60] = STACK[0x2AD8];
          STACK[0x2E58] = STACK[0x28A0];
          STACK[0x1C28] = STACK[0x14E0];
          STACK[0x2E80] = STACK[0x2B10];
          STACK[0x2E50] = STACK[0x2958];
          STACK[0x3580] = STACK[0x3B38];
          STACK[0x1C20] = STACK[0x3360];
          STACK[0x2E48] = STACK[0x28A8];
          LODWORD(STACK[0x3C08]) = 61;
          LODWORD(STACK[0x3590]) = v1990;
          STACK[0x2248] = STACK[0x3C20];
          STACK[0x2240] = STACK[0x3800];
          STACK[0x2230] = STACK[0x31A8];
          STACK[0x2218] = STACK[0x3168];
          STACK[0x2210] = STACK[0x3120];
          STACK[0x2208] = STACK[0x3820];
          STACK[0x21F8] = STACK[0x3158];
          STACK[0x21F0] = STACK[0x3C28];
          STACK[0x21E8] = STACK[0x3160];
          STACK[0x21D8] = STACK[0x3B60];
          STACK[0x2250] = STACK[0x3290];
          return v2033();
        }
        STACK[0x2D20] = v1557;
        STACK[0x2D00] = v1554;
        v1520 = v1560;
        v1572 = v1568;
        v1521 = v1561;
        v1517 = v1556;
        STACK[0x2D08] = v1562;
        STACK[0x2D10] = v1559;
        v1515 = v1555;
        STACK[0x2D18] = v1558;
        v1516 = STACK[0x2B18];
        v1506 = STACK[0x3370];
        v1522 = v1572;
        v1524 = v1570;
        v1525 = v1571;
        v1526 = STACK[0x3310];
        v1573 = STACK[0x3C70];
        if (v1513 == 80)
        {
          v1574 = (v1563 & 0x10) == 0;
          STACK[0x3870] = v1564;
          v1575 = (LODWORD(STACK[0x3710]) - 6566);
          v1576 = *(_QWORD *)(v1573 + 8 * ((LODWORD(STACK[0x3710]) - 10687) ^ (18235 * v1574)));
          STACK[0x3C00] = v1575;
          STACK[0x3C78] = v1576 - v1575 + 8859;
          LODWORD(STACK[0x2F64]) = 81;
          LODWORD(STACK[0x3400]) = 80;
          LODWORD(STACK[0x3C08]) = 6;
          v1577 = v1521;
          STACK[0x2D90] = v1519;
          STACK[0x3240] = v1519;
          v1578 = STACK[0x27A0];
          STACK[0x3B58] = STACK[0x27A0];
          STACK[0x2D88] = v1517;
          STACK[0x3248] = v1517;
          v1579 = STACK[0x2D20];
          v1580 = v1525;
          v1581 = STACK[0x3328];
          STACK[0x2C80] = v1515;
          STACK[0x3B90] = v1523;
          v1582 = STACK[0x2D08];
          STACK[0x2FE8] = STACK[0x2D08];
          v1583 = STACK[0x2D18];
          STACK[0x2FE0] = STACK[0x2D18];
          STACK[0x3258] = v1518;
          STACK[0x3120] = v1520;
          STACK[0x3860] = v1566;
          v1584 = v1516;
          v1585 = STACK[0x2C88];
          STACK[0x3160] = STACK[0x2C88];
          STACK[0x2FC8] = v1520;
          STACK[0x2FD8] = STACK[0x23F8];
          STACK[0x2FF0] = STACK[0x15D8];
          STACK[0x2FC0] = v1526;
          STACK[0x3B80] = v1522;
          STACK[0x3368] = v1509;
          STACK[0x3268] = STACK[0x3C68];
          STACK[0x3B88] = v1580;
          STACK[0x2FB0] = STACK[0x1590];
          v1586 = v1526;
          v1587 = STACK[0x3C60];
          STACK[0x3270] = STACK[0x3C60];
          STACK[0x2FA8] = STACK[0x23C8];
          STACK[0x2FA0] = v1581;
          STACK[0x2FB8] = STACK[0x15C8];
          STACK[0x2FD0] = STACK[0x15A8];
          STACK[0x3208] = v1581;
          v1588 = STACK[0x2D10];
          STACK[0x31F8] = STACK[0x2D10];
          v1589 = STACK[0x2D00];
          STACK[0x2F90] = STACK[0x2D00];
          STACK[0x3350] = STACK[0x30D0];
          STACK[0x3300] = STACK[0x30D8];
          STACK[0x32F8] = v1510;
          STACK[0x2F88] = v1585;
          STACK[0x3820] = v1577;
          STACK[0x2F78] = v1519;
          STACK[0x2F98] = STACK[0x15D0];
          STACK[0x3358] = STACK[0x3378];
          STACK[0x2F80] = v1584;
          STACK[0x3290] = v1582;
          STACK[0x3B98] = v1515;
          STACK[0x3200] = v1585;
          STACK[0x3308] = STACK[0x3828];
          STACK[0x2F70] = v1578;
          STACK[0x2F68] = STACK[0x1598];
          STACK[0x2F50] = STACK[0x23F0];
          v1590 = STACK[0x27E8];
          STACK[0x3B50] = STACK[0x27E8];
          v1591 = STACK[0x27C0];
          STACK[0x3108] = STACK[0x27C0];
          STACK[0x2F48] = v1580;
          STACK[0x2F40] = STACK[0x23D0];
          STACK[0x2F38] = v1591;
          STACK[0x3210] = v1583;
          STACK[0x3BD8] = v1524;
          STACK[0x3218] = v1586;
          STACK[0x2F58] = STACK[0x15B0];
          STACK[0x32E8] = STACK[0x3BD0];
          v1592 = STACK[0x27F0];
          STACK[0x3178] = STACK[0x27F0];
          STACK[0x3220] = v1589;
          STACK[0x32F0] = STACK[0x3BC8];
          STACK[0x31A8] = v1518;
          STACK[0x2F30] = STACK[0x2400];
          v1593 = v1583;
          v1594 = STACK[0x27C8];
          STACK[0x30F8] = STACK[0x27C8];
          STACK[0x2F28] = v1590;
          v1595 = v1518;
          v1596 = STACK[0x27B0];
          STACK[0x3100] = STACK[0x27B0];
          v1597 = STACK[0x27D8];
          STACK[0x2F20] = STACK[0x27D8];
          STACK[0x3C38] = v1587;
          STACK[0x3228] = v1520;
          v1598 = STACK[0x27D0];
          STACK[0x3118] = STACK[0x27D0];
          STACK[0x3230] = STACK[0x30E0];
          v1599 = STACK[0x2C90];
          STACK[0x3C20] = STACK[0x2C90];
          STACK[0x3238] = v1582;
          STACK[0x2CA0] = v1520;
          STACK[0x32E0] = STACK[0x3370];
          STACK[0x3168] = v1519;
          STACK[0x2F10] = STACK[0x2418];
          STACK[0x2F08] = v1592;
          v1600 = STACK[0x27A8];
          STACK[0x2F18] = STACK[0x27A8];
          STACK[0x3C28] = v1593;
          STACK[0x2F00] = STACK[0x23E0];
          STACK[0x2EF8] = v1599;
          STACK[0x3250] = v1579;
          STACK[0x3260] = STACK[0x30E8];
          STACK[0x2EE8] = v1579;
          STACK[0x2EF0] = v1577;
          STACK[0x2ED8] = v1515;
          STACK[0x3278] = v1577;
          STACK[0x2EE0] = v1522;
          STACK[0x2ED0] = STACK[0x15B8];
          STACK[0x3B48] = v1600;
          STACK[0x2EC0] = v1596;
          v1601 = STACK[0x27B8];
          STACK[0x2EB8] = STACK[0x27B8];
          STACK[0x3B60] = v1579;
          STACK[0x3280] = v1584;
          STACK[0x2EC8] = STACK[0x1588];
          STACK[0x2EB0] = STACK[0x23D8];
          STACK[0x30F0] = v1601;
          STACK[0x3B40] = v1597;
          STACK[0x2EA8] = STACK[0x2410];
          STACK[0x2EA0] = v1588;
          v1602 = STACK[0x27E0];
          STACK[0x3110] = STACK[0x27E0];
          STACK[0x2E98] = STACK[0x15C0];
          v1603 = STACK[0x2D88];
          STACK[0x3800] = STACK[0x2D88];
          STACK[0x3158] = v1588;
          STACK[0x2E90] = STACK[0x23E8];
          STACK[0x3288] = v1599;
          STACK[0x2E88] = STACK[0x3330];
          STACK[0x2E78] = v1598;
          STACK[0x3C30] = STACK[0x3C68];
          STACK[0x2E70] = v1603;
          STACK[0x2CA8] = v1595;
          STACK[0x2E68] = v1595;
          STACK[0x2E60] = STACK[0x2408];
          STACK[0x2E58] = v1594;
          STACK[0x2E80] = STACK[0x15A0];
          STACK[0x2E50] = v1524;
          STACK[0x2E48] = v1602;
          STACK[0x2C98] = v1577;
          STACK[0x3868] = v1567;
          return ((uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))STACK[0x3C78])(STACK[0x3950], STACK[0x3948], STACK[0x3980], STACK[0x39A8], STACK[0x3990], STACK[0x3888], STACK[0x39B0], STACK[0x3978]);
        }
      }
      else
      {
        v1514 = STACK[0x3A30];
        if (v1513 == 90)
        {
          v1553 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * SLODWORD(STACK[0x500]));
          LODWORD(STACK[0x3400]) = 90;
          STACK[0x3B58] = STACK[0x3980];
          STACK[0x3B50] = STACK[0x3960];
          STACK[0x3108] = v1514;
          STACK[0x3178] = STACK[0x3A28];
          STACK[0x30F8] = STACK[0x37D8];
          STACK[0x3100] = STACK[0x3A18];
          STACK[0x3B40] = STACK[0x3888];
          STACK[0x3118] = STACK[0x39A0];
          STACK[0x3B48] = STACK[0x39B0];
          STACK[0x30F0] = STACK[0x3970];
          STACK[0x3110] = STACK[0x3968];
          LODWORD(STACK[0x3C78]) = STACK[0x37E0];
          return v1553();
        }
        STACK[0x3C58] = v1478;
        v1515 = STACK[0x2C80];
        v1516 = STACK[0x2B18];
        v1517 = STACK[0x2D88];
        v1518 = STACK[0x2CA8];
        v1519 = STACK[0x2D90];
        v1520 = STACK[0x2CA0];
        v1521 = STACK[0x2C98];
        v1522 = STACK[0x3338];
        v1523 = STACK[0x3330];
        v1524 = STACK[0x3320];
        v1525 = STACK[0x3318];
        v1526 = STACK[0x3310];
        if (v1513 == 102)
        {
          STACK[0x3C38] = *(_QWORD *)(STACK[0x3C70]
                                    + 8
                                    * ((518
                                      * ((((STACK[0x3834] & 2) == 0) ^ (LODWORD(STACK[0x3710]) + 90)) & 1)) | (LODWORD(STACK[0x3710]) - 6921)));
          LODWORD(STACK[0x156C]) = 104;
          LODWORD(STACK[0x3C78]) = 103;
          LODWORD(STACK[0x3400]) = 102;
          v1527 = STACK[0x2D08];
          STACK[0x39E0] = STACK[0x2D08];
          STACK[0x2D90] = v1519;
          STACK[0x3168] = v1519;
          v1528 = STACK[0x2D20];
          STACK[0x3B60] = STACK[0x2D20];
          STACK[0x3120] = v1520;
          v1529 = STACK[0x2D10];
          STACK[0x39E8] = STACK[0x2D10];
          STACK[0x1560] = v1521;
          v1530 = STACK[0x3C60];
          STACK[0x31E8] = STACK[0x3C60];
          v1531 = v1517;
          STACK[0x3800] = v1517;
          STACK[0x39D8] = v1530;
          STACK[0x3820] = v1521;
          v1532 = STACK[0x30D0];
          STACK[0x39F8] = STACK[0x30D0];
          STACK[0x3860] = v1510;
          v1533 = v1520;
          v1534 = STACK[0x30E0];
          STACK[0x1540] = STACK[0x30E0];
          v1535 = v1522;
          STACK[0x1550] = v1522;
          v1536 = v1525;
          v1537 = STACK[0x2D18];
          STACK[0x1558] = STACK[0x2D18];
          STACK[0x1548] = v1518;
          STACK[0x3838] = v1506;
          v1538 = STACK[0x3128];
          STACK[0x3360] = STACK[0x3128];
          v1539 = STACK[0x2D00];
          STACK[0x39D0] = STACK[0x2D00];
          STACK[0x3840] = v1537;
          STACK[0x3290] = v1527;
          v1540 = STACK[0x30E8];
          STACK[0x1538] = STACK[0x30E8];
          STACK[0x31E0] = v1536;
          STACK[0x39C8] = v1515;
          STACK[0x3BA8] = v1509;
          v1541 = STACK[0x2C90];
          STACK[0x3848] = STACK[0x2C90];
          STACK[0x3A00] = v1524;
          STACK[0x31D8] = v1524;
          v1542 = v1523;
          STACK[0x1530] = v1523;
          STACK[0x3A10] = v1534;
          STACK[0x3868] = v1535;
          STACK[0x39F0] = v1536;
          v1543 = STACK[0x30D8];
          STACK[0x3850] = STACK[0x30D8];
          v1544 = STACK[0x3328];
          STACK[0x3858] = STACK[0x3328];
          v1545 = STACK[0x3C68];
          STACK[0x1528] = STACK[0x3C68];
          v1546 = STACK[0x3378];
          STACK[0x3870] = STACK[0x3378];
          STACK[0x31D0] = v1542;
          STACK[0x3A08] = v1521;
          STACK[0x3C28] = v1537;
          STACK[0x31C8] = v1526;
          STACK[0x1520] = v1529;
          v1547 = STACK[0x2D90];
          STACK[0x1510] = STACK[0x2D90];
          STACK[0x1518] = v1532;
          STACK[0x1508] = v1530;
          v1548 = STACK[0x2C88];
          STACK[0x3160] = STACK[0x2C88];
          STACK[0x1500] = v1548;
          STACK[0x3AD0] = v1533;
          STACK[0x3AD8] = v1545;
          STACK[0x3AE0] = v1548;
          STACK[0x3AE8] = v1538;
          v1549 = STACK[0x3BD0];
          STACK[0x36C8] = STACK[0x3BD0];
          STACK[0x14F8] = v1539;
          STACK[0x14E8] = v1515;
          STACK[0x3158] = v1529;
          STACK[0x3810] = v1509;
          STACK[0x14F0] = v1527;
          STACK[0x3AF0] = v1528;
          STACK[0x31C0] = v1545;
          STACK[0x14B8] = v1515;
          STACK[0x14D8] = v1531;
          STACK[0x14E0] = v1526;
          STACK[0x14D0] = v1533;
          STACK[0x14C8] = v1544;
          STACK[0x3AF8] = v1518;
          STACK[0x3B08] = v1540;
          v1550 = v1544;
          v1551 = STACK[0x3BC8];
          STACK[0x3808] = STACK[0x3BC8];
          STACK[0x3B00] = v1542;
          STACK[0x3C20] = v1541;
          STACK[0x14C0] = v1536;
          STACK[0x3B10] = v1526;
          STACK[0x3B18] = v1547;
          STACK[0x14A0] = v1524;
          v1552 = STACK[0x3828];
          STACK[0x3B20] = STACK[0x3828];
          STACK[0x3818] = v1546;
          STACK[0x31B8] = v1550;
          STACK[0x31B0] = v1535;
          STACK[0x1498] = v1539;
          STACK[0x3B30] = v1549;
          STACK[0x37F0] = v1506;
          STACK[0x3B28] = v1531;
          STACK[0x31A8] = v1518;
          STACK[0x14B0] = v1541;
          STACK[0x37E8] = v1510;
          STACK[0x37F8] = v1552;
          STACK[0x14A8] = v1543;
          STACK[0x1490] = v1528;
          STACK[0x3B38] = v1551;
          STACK[0x3B58] = STACK[0x2D28];
          STACK[0x3B50] = STACK[0x2CF0];
          STACK[0x3108] = STACK[0x2CE0];
          STACK[0x3178] = STACK[0x2CF8];
          STACK[0x30F8] = STACK[0x2CD8];
          STACK[0x3100] = STACK[0x2CB0];
          STACK[0x3B40] = STACK[0x2CC0];
          STACK[0x3118] = STACK[0x2CB8];
          STACK[0x3B48] = STACK[0x2CE8];
          STACK[0x30F0] = STACK[0x2CC8];
          STACK[0x3110] = STACK[0x2CD0];
          return ((uint64_t (*)(void))STACK[0x3C38])();
        }
      }
      v2009 = STACK[0x3458];
      v2010 = STACK[0x3408];
      STACK[0x3880] = STACK[0x3500];
      STACK[0x38F8] = STACK[0x3460];
      STACK[0x38F0] = STACK[0x3468];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x33C8] = STACK[0x3C40];
      v2011 = STACK[0x3410];
      STACK[0x3920] = STACK[0x3470];
      STACK[0x3568] = STACK[0x3130];
      STACK[0x3918] = STACK[0x3478];
      STACK[0x3938] = STACK[0x3480];
      STACK[0x3560] = STACK[0x3138];
      STACK[0x3930] = STACK[0x3418];
      v2012 = STACK[0x3828];
      STACK[0x3878] = STACK[0x3508];
      STACK[0x3928] = STACK[0x3510];
      STACK[0x37D0] = STACK[0x3488];
      v2013 = STACK[0x3C60];
      STACK[0x3A60] = STACK[0x3C60];
      STACK[0x31E8] = v2013;
      STACK[0x3558] = STACK[0x3140];
      STACK[0x37C8] = STACK[0x33E8];
      STACK[0x3908] = STACK[0x34E0];
      STACK[0x37C0] = STACK[0x3420];
      v2014 = STACK[0x3378];
      STACK[0x3550] = STACK[0x3148];
      STACK[0x3900] = STACK[0x33F0];
      v2015 = STACK[0x30D8];
      STACK[0x33E0] = STACK[0x30D8];
      STACK[0x39B0] = v2015;
      STACK[0x37B8] = STACK[0x33F8];
      LODWORD(STACK[0x37D8]) = v1513;
      STACK[0x38E8] = STACK[0x3490];
      STACK[0x3910] = STACK[0x3518];
      STACK[0x33C0] = STACK[0x3C50];
      STACK[0x37B0] = STACK[0x3428];
      STACK[0x37A8] = STACK[0x3430];
      STACK[0x37A0] = STACK[0x3498];
      STACK[0x3798] = STACK[0x34E8];
      v2016 = STACK[0x30D0];
      STACK[0x3A18] = STACK[0x30D0];
      STACK[0x3BF8] = v2016;
      STACK[0x3980] = v1509;
      STACK[0x3398] = v1509;
      STACK[0x3548] = STACK[0x3180];
      STACK[0x3790] = STACK[0x34F0];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x3788] = STACK[0x34A0];
      v2017 = v1521;
      v2018 = v1520;
      v1624 = STACK[0x3188];
      STACK[0x38E0] = STACK[0x34F8];
      STACK[0x3780] = STACK[0x3028];
      STACK[0x3A48] = v1525;
      STACK[0x31E0] = v1525;
      STACK[0x38B0] = STACK[0x3030];
      STACK[0x3778] = STACK[0x3038];
      STACK[0x38D0] = STACK[0x3520];
      STACK[0x38D8] = STACK[0x34B0];
      STACK[0x38C8] = STACK[0x34A8];
      STACK[0x3770] = STACK[0x34B8];
      STACK[0x38C0] = STACK[0x3098];
      STACK[0x3768] = STACK[0x3040];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = v1524;
      STACK[0x3AA0] = v1524;
      STACK[0x3760] = STACK[0x3048];
      v2019 = v1516;
      v1625 = STACK[0x3190];
      STACK[0x3758] = STACK[0x3528];
      v2020 = STACK[0x3BC8];
      STACK[0x3540] = STACK[0x3BC8];
      STACK[0x3968] = v2020;
      STACK[0x3970] = v2012;
      STACK[0x3BE8] = v2012;
      STACK[0x3748] = STACK[0x30A0];
      STACK[0x3740] = STACK[0x34C0];
      STACK[0x3738] = STACK[0x2FF8];
      STACK[0x3A28] = v1523;
      STACK[0x31D0] = v1523;
      STACK[0x38B8] = STACK[0x3530];
      STACK[0x3750] = STACK[0x3538];
      STACK[0x3A40] = v1526;
      STACK[0x31C8] = v1526;
      STACK[0x3438] = v1506;
      STACK[0x3950] = v1506;
      STACK[0x38A8] = STACK[0x30C8];
      STACK[0x38A0] = STACK[0x3578];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x3730] = STACK[0x3020];
      v1626 = STACK[0x3198];
      v1627 = STACK[0x31A0];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3728] = STACK[0x3050];
      STACK[0x3720] = STACK[0x30A8];
      STACK[0x3718] = STACK[0x34C8];
      v2021 = STACK[0x30E0];
      STACK[0x3948] = STACK[0x30E0];
      STACK[0x3380] = v2021;
      STACK[0x3700] = STACK[0x3000];
      STACK[0x36F8] = STACK[0x3058];
      STACK[0x3898] = STACK[0x34D0];
      STACK[0x3978] = v1510;
      v2022 = v1517;
      v2023 = v1522;
      v2024 = STACK[0x2D08];
      STACK[0x3BE0] = v1510;
      STACK[0x3708] = STACK[0x34D8];
      v2025 = STACK[0x3C68];
      STACK[0x3A20] = STACK[0x3C68];
      STACK[0x31C0] = v2025;
      STACK[0x36E8] = STACK[0x3060];
      STACK[0x3890] = STACK[0x3068];
      STACK[0x36E0] = STACK[0x30B0];
      STACK[0x36A8] = STACK[0x3A88];
      v1628 = STACK[0x3170];
      STACK[0x36F0] = STACK[0x3088];
      v2026 = STACK[0x30E8];
      STACK[0x3940] = STACK[0x30E8];
      STACK[0x3390] = v2026;
      STACK[0x36D8] = STACK[0x3008];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3960] = v2014;
      v2027 = v2018;
      STACK[0x33A8] = v2014;
      v1629 = STACK[0x30B8];
      v2028 = STACK[0x3BD0];
      STACK[0x3958] = STACK[0x3BD0];
      STACK[0x3C30] = v2028;
      STACK[0x3698] = STACK[0x3A90];
      v2029 = STACK[0x3328];
      STACK[0x3A50] = STACK[0x3328];
      STACK[0x31B8] = v2029;
      STACK[0x3A68] = v2023;
      STACK[0x31B0] = v2023;
      v1622 = v2010;
      v1621 = v2009;
      STACK[0x36D0] = STACK[0x3080];
      v2030 = STACK[0x2D00];
      v2031 = v2022;
      STACK[0x3690] = STACK[0x3A98];
      v2032 = v1518;
      v1630 = STACK[0x3018];
      v1631 = STACK[0x3150];
      STACK[0x2548] = 0x40685A60ABFE0A21;
      STACK[0x1920] = 0xF4A52946BE46B164;
      STACK[0x3C00] = 107;
      STACK[0x2550] = 0xF9CF898C924065FBLL;
      STACK[0x33A0] = 0x6FA81A8F910493AFLL;
      STACK[0x1910] = 0x1BEFFAC7C4A7A5ECLL;
      STACK[0x3C78] = 0x88FE68573FF98731;
      STACK[0x18D8] = 0xFC8ABB83C2742E80;
      STACK[0x3570] = 0x633A3F8C2E225E6ALL;
      STACK[0x18E8] = 0x85A84558689F0D9;
      STACK[0x2558] = 0xB1035F48A597370CLL;
      STACK[0x1900] = 0x3D9C4055E867EEB4;
      STACK[0x3BF0] = 0xB39770E6CD189825;
      STACK[0x33D8] = 0x879E218FEC0F77FELL;
      STACK[0x2560] = 0xE59158E8201A2AE3;
      STACK[0x31F0] = 0xD6215473319C32AALL;
      STACK[0x18F0] = 0xBC78380761E3C024;
      STACK[0x3388] = 0x638A97392E11ADD8;
      STACK[0x1908] = 0x5B17B35E564C15FALL;
      STACK[0x33B0] = 0x2035FB91CC35E203;
      STACK[0x26E0] = 0xD2087261F2F13621;
      STACK[0x18F8] = 0x7A53B33B6B1CFD1ALL;
      STACK[0x3440] = 0x85F52DC550B5B6DDLL;
      STACK[0x1918] = 0x15A73B1FB7D75D87;
      STACK[0x3BB0] = 0x1B95A1FD43210014;
      STACK[0x3448] = 0x270E0C1D5FF189FFLL;
      STACK[0x18E0] = 0x6E00D49E7D501413;
      STACK[0x3C38] = 0xC576346461AAA480;
      STACK[0x3450] = 0x682DEFED59CF18BFLL;
      STACK[0x2570] = 0xA64A3E2F1B4DE8E6;
      STACK[0x1928] = 0x77B3CA49441A0F56;
      STACK[0x2578] = 0x4B640D8312B5E2A2;
      STACK[0x2580] = 0xF1A825580B063DECLL;
      LODWORD(STACK[0x3AC0]) = STACK[0x3710];
      STACK[0x3888] = v1519;
      STACK[0x3988] = v2031;
      STACK[0x3AB8] = v2032;
      STACK[0x2568] = 0xBCE0B40AAD3903CALL;
      STACK[0x3AB0] = STACK[0x2D10];
      STACK[0x3A38] = v1515;
      STACK[0x3AA8] = STACK[0x2C88];
      v1623 = v2011;
      STACK[0x39A8] = STACK[0x2D18];
      STACK[0x3A30] = v2030;
      STACK[0x39A0] = v2027;
      STACK[0x3998] = v2024;
      STACK[0x39B8] = STACK[0x2D20];
      STACK[0x3990] = v2017;
      STACK[0x3A58] = v2019;
      STACK[0x37E0] = STACK[0x2C90];
LABEL_2860:
      v2269 = 4647 * (((LODWORD(STACK[0x3834]) >> 5) + 111) ^ 0x1C) + 4767822;
      STACK[0x3B70] = v2269 - 6784 * (((1266205 * (unint64_t)v2269) >> 32) >> 1);
      STACK[0x3150] = v1631;
      STACK[0x3A98] = STACK[0x3690];
      STACK[0x3A90] = STACK[0x3698];
      STACK[0x39C0] = STACK[0x36A0];
      STACK[0x3170] = v1628;
      STACK[0x3A88] = STACK[0x36A8];
      STACK[0x3B98] = STACK[0x3298];
      STACK[0x3BD8] = STACK[0x32A0];
      STACK[0x3B90] = STACK[0x32D8];
      STACK[0x3B80] = STACK[0x32A8];
      STACK[0x3A80] = STACK[0x36B0];
      STACK[0x31A0] = v1627;
      STACK[0x3198] = v1626;
      STACK[0x3B88] = STACK[0x32B0];
      STACK[0x3C48] = STACK[0x33B8];
      STACK[0x3360] = STACK[0x32C0];
      STACK[0x3C60] = STACK[0x32B8];
      STACK[0x3190] = v1625;
      STACK[0x3A78] = STACK[0x36B8];
      STACK[0x3C68] = STACK[0x32C8];
      STACK[0x3188] = v1624;
      STACK[0x3A70] = STACK[0x36C0];
      STACK[0x3180] = STACK[0x3548];
      STACK[0x3C50] = STACK[0x33C0];
      STACK[0x3148] = STACK[0x3550];
      STACK[0x3140] = STACK[0x3558];
      STACK[0x3138] = STACK[0x3560];
      STACK[0x3130] = STACK[0x3568];
      STACK[0x3C40] = STACK[0x33C8];
      STACK[0x3C58] = STACK[0x33D0];
      v2270 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3AC0]) - 1986)) - 4);
      STACK[0x3458] = v1621;
      STACK[0x3408] = v1622;
      STACK[0x3500] = STACK[0x3880];
      STACK[0x3460] = STACK[0x38F8];
      STACK[0x3468] = STACK[0x38F0];
      STACK[0x3410] = v1623;
      STACK[0x3470] = STACK[0x3920];
      STACK[0x3478] = STACK[0x3918];
      STACK[0x3480] = STACK[0x3938];
      STACK[0x3418] = STACK[0x3930];
      STACK[0x3508] = STACK[0x3878];
      STACK[0x3510] = STACK[0x3928];
      STACK[0x3488] = STACK[0x37D0];
      STACK[0x33E8] = STACK[0x37C8];
      STACK[0x34E0] = STACK[0x3908];
      STACK[0x3420] = STACK[0x37C0];
      STACK[0x33F0] = STACK[0x3900];
      STACK[0x33F8] = STACK[0x37B8];
      LODWORD(STACK[0x3400]) = STACK[0x37D8];
      STACK[0x3490] = STACK[0x38E8];
      STACK[0x3518] = STACK[0x3910];
      STACK[0x3428] = STACK[0x37B0];
      STACK[0x3430] = STACK[0x37A8];
      STACK[0x3498] = STACK[0x37A0];
      STACK[0x34E8] = STACK[0x3798];
      STACK[0x34F0] = STACK[0x3790];
      STACK[0x34A0] = STACK[0x3788];
      STACK[0x34F8] = STACK[0x38E0];
      STACK[0x3520] = STACK[0x38D0];
      STACK[0x34B0] = STACK[0x38D8];
      STACK[0x34A8] = STACK[0x38C8];
      STACK[0x34B8] = STACK[0x3770];
      v2271 = STACK[0x3768];
      v2272 = STACK[0x3760];
      STACK[0x3528] = STACK[0x3758];
      STACK[0x34C0] = STACK[0x3740];
      STACK[0x3530] = STACK[0x38B8];
      STACK[0x3538] = STACK[0x3750];
      STACK[0x34C8] = STACK[0x3718];
      STACK[0x34D0] = STACK[0x3898];
      STACK[0x34D8] = STACK[0x3708];
      return v2270(STACK[0x36E0], v1630, STACK[0x3890], v2272, STACK[0x36F0], v1629, v2271, STACK[0x36E8]);
    case 0x2A:
      LODWORD(STACK[0x3C08]) = 43;
      STACK[0x3B58] = STACK[0x2BB8];
      STACK[0x3160] = STACK[0x2B38];
      STACK[0x2330] = v1406;
      STACK[0x2328] = STACK[0x3C00];
      STACK[0x2320] = STACK[0x3BF8];
      STACK[0x2318] = v1417;
      STACK[0x2310] = v1411;
      STACK[0x3820] = STACK[0x2B20];
      STACK[0x3290] = STACK[0x2B48];
      STACK[0x2308] = STACK[0x3BC8];
      STACK[0x3B50] = STACK[0x2B90];
      STACK[0x3108] = STACK[0x2B88];
      STACK[0x3178] = STACK[0x2BB0];
      STACK[0x2300] = STACK[0x3BE0];
      STACK[0x31A8] = STACK[0x2BC0];
      STACK[0x22F8] = STACK[0x3BE8];
      STACK[0x22F0] = v1412;
      STACK[0x30F8] = STACK[0x2B60];
      STACK[0x3100] = STACK[0x2B68];
      STACK[0x3118] = STACK[0x2B28];
      STACK[0x3C20] = STACK[0x2B78];
      STACK[0x3168] = STACK[0x2BC8];
      STACK[0x22E8] = v1399;
      STACK[0x3B48] = STACK[0x2BA0];
      STACK[0x3B60] = STACK[0x2B70];
      STACK[0x30F0] = STACK[0x2B58];
      STACK[0x22E0] = STACK[0x3BD0];
      STACK[0x3B40] = STACK[0x2B30];
      STACK[0x3110] = STACK[0x2BA8];
      STACK[0x3800] = STACK[0x2B40];
      STACK[0x3158] = STACK[0x2B50];
      JUMPOUT(0x1006A0D0CLL);
    case 0x2B:
      v1714 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9638)) - 12);
      STACK[0x3BB8] = STACK[0x2710];
      STACK[0x3888] = STACK[0x3240];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x3828] = STACK[0x2708];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x1DA8] = v1399;
      STACK[0x3C58] = STACK[0x2798];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x3BA0] = STACK[0x26F8];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x33C0] = STACK[0x3C50];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x1DA0] = STACK[0x3BE0];
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3C50] = STACK[0x2770];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x1D98] = STACK[0x3BC8];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x3C40] = STACK[0x2780];
      STACK[0x1D90] = STACK[0x3BD0];
      STACK[0x1D88] = v1406;
      STACK[0x1D80] = STACK[0x3BF8];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x1D78] = v1412;
      STACK[0x1D70] = v1417;
      STACK[0x1D68] = STACK[0x3C00];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x3C48] = STACK[0x2788];
      STACK[0x1D60] = STACK[0x3BE8];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x1D58] = v1411;
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x3690] = STACK[0x3A98];
      LODWORD(STACK[0x3BD8]) = 44;
      STACK[0x3B70] = STACK[0x2BE0];
      STACK[0x3378] = STACK[0x2BF0];
      STACK[0x3B68] = STACK[0x2C48];
      STACK[0x3B78] = STACK[0x2C58];
      STACK[0x3370] = STACK[0x2C38];
      STACK[0x3368] = STACK[0x2C30];
      STACK[0x3210] = STACK[0x2C18];
      STACK[0x3350] = STACK[0x2C10];
      STACK[0x3238] = STACK[0x2BD8];
      STACK[0x3200] = STACK[0x2BD0];
      STACK[0x3218] = STACK[0x2BF8];
      STACK[0x3358] = STACK[0x2C08];
      STACK[0x3BD0] = STACK[0x2BE8];
      STACK[0x3230] = STACK[0x2C50];
      STACK[0x3BC8] = STACK[0x2C60];
      STACK[0x3208] = STACK[0x2C00];
      STACK[0x3228] = STACK[0x2C40];
      STACK[0x3BC0] = STACK[0x2C70];
      STACK[0x3250] = STACK[0x2C28];
      STACK[0x3220] = STACK[0x2C68];
      STACK[0x3AC8] = STACK[0x2C20];
      STACK[0x3248] = STACK[0x2C78];
      return v1714(15);
    case 0x2E:
      v1418 = LODWORD(STACK[0x3710]) + 3333;
      STACK[0x2728] = (__PAIR128__(v1399 - STACK[0x3AB8], v1399) - STACK[0x3AB8]) >> 64;
      if (v1411 >= STACK[0x3AB0])
        v1419 = 0;
      else
        v1419 = -9;
      v1420 = v1412 - STACK[0x3A68];
      if (v1412 >= STACK[0x3A68])
        v1421 = 0;
      else
        v1421 = -5;
      v1422 = STACK[0x3BC8] - STACK[0x3A50];
      v1423 = -17;
      if (STACK[0x3BC8] >= STACK[0x3A50])
        v1423 = 0;
      v1424 = v1406 - STACK[0x3AA8];
      if (v1406 >= STACK[0x3AA8])
        v1425 = 0;
      else
        v1425 = -3;
      v1426 = v1417 - STACK[0x3A58];
      if (v1417 >= STACK[0x3A58])
        v1427 = 0;
      else
        v1427 = -15;
      v1428 = STACK[0x3BF8] - STACK[0x3AA0];
      v1429 = -33;
      if (STACK[0x3BF8] >= STACK[0x3AA0])
        v1429 = 0;
      v1430 = STACK[0x3BE8] - STACK[0x3A60];
      v1431 = -39;
      if (STACK[0x3BE8] >= STACK[0x3A60])
        v1431 = 0;
      v1432 = STACK[0x3BD0] - STACK[0x3A40];
      v1433 = -45;
      if (STACK[0x3BD0] >= STACK[0x3A40])
        v1433 = 0;
      v301 = STACK[0x3C00] >= STACK[0x3A48];
      v1434 = STACK[0x3C00] - STACK[0x3A48];
      STACK[0x2718] = v1411 - STACK[0x3AB0] + v1419;
      STACK[0x2748] = v1420 + v1421;
      STACK[0x2760] = v1422 + v1423;
      STACK[0x2720] = v1424 + v1425;
      STACK[0x2740] = v1426 + v1427;
      STACK[0x2730] = v1430 + v1431;
      STACK[0x2758] = v1428 + v1429;
      v1435 = -47;
      if (v301)
        v1435 = 0;
      v1436 = STACK[0x3BE0] - STACK[0x3A38];
      v1437 = -53;
      if (STACK[0x3BE0] >= STACK[0x3A38])
        v1437 = 0;
      STACK[0x2750] = v1432 + v1433;
      STACK[0x2738] = v1436 + v1437;
      STACK[0x2768] = v1434 + v1435;
      v1438 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * v1418) - 8);
      LODWORD(STACK[0x3C08]) = 47;
      STACK[0x3B58] = STACK[0x3910];
      v1439 = STACK[0x3AC0];
      STACK[0x3B50] = STACK[0x38E0];
      v1440 = STACK[0x3928];
      v1441 = STACK[0x3938];
      v1442 = STACK[0x3900];
      v1443 = STACK[0x3908];
      STACK[0x3C20] = STACK[0x3930];
      STACK[0x3C28] = STACK[0x3B68];
      STACK[0x3B48] = STACK[0x38F8];
      STACK[0x3B60] = STACK[0x3AC8];
      v1444 = STACK[0x38F0];
      STACK[0x3B40] = STACK[0x38E8];
      return v1438(v1440, v1441, v1442, v1439, v1443, STACK[0x3B70], v1444, 3);
    case 0x2F:
      v1715 = __CFADD__(STACK[0x1D60], STACK[0x22B0]) || STACK[0x1D60] + STACK[0x22B0] > 0xFFFFFFFFFFFFFFD8;
      v1716 = STACK[0x1D70] + STACK[0x22C0] > 0xFFFFFFFFFFFFFFF0;
      if (__CFADD__(STACK[0x1D70], STACK[0x22C0]))
        v1716 = 1;
      v1717 = STACK[0x1D78] + STACK[0x22B8] > 0xFFFFFFFFFFFFFFFALL;
      if (__CFADD__(STACK[0x1D78], STACK[0x22B8]))
        v1717 = 1;
      v1718 = STACK[0x1D88] + STACK[0x2298];
      v1719 = __CFADD__(STACK[0x1D88], STACK[0x2298]);
      v1720 = STACK[0x1DA8] + STACK[0x2290];
      v1721 = __CFADD__(STACK[0x1DA8], STACK[0x2290]);
      v1722 = STACK[0x1D80] + STACK[0x22D0];
      v1723 = __CFADD__(STACK[0x1D80], STACK[0x22D0]);
      v1724 = v1718 > 0xFFFFFFFFFFFFFFFCLL || v1719;
      v1725 = v1720 == -1 || v1721;
      v1726 = v1725 + v1720;
      v1727 = STACK[0x1D58] + STACK[0x22D8];
      v1728 = __CFADD__(STACK[0x1D58], STACK[0x22D8]);
      v1729 = v1727 > 0xFFFFFFFFFFFFFFF6 || v1728;
      if (v1716)
        v1730 = 15;
      else
        v1730 = 0;
      v1731 = v1730 + STACK[0x1D70] + STACK[0x22C0];
      if (v1717)
        v1732 = 5;
      else
        v1732 = 0;
      v1733 = v1732 + STACK[0x1D78] + STACK[0x22B8];
      v1734 = STACK[0x1D98] + STACK[0x22A0];
      v1735 = __CFADD__(STACK[0x1D98], STACK[0x22A0]);
      if (v1729)
        v1736 = 9;
      else
        v1736 = 0;
      v1737 = v1736 + v1727;
      v1738 = STACK[0x1D90] + STACK[0x2288];
      v1739 = __CFADD__(STACK[0x1D90], STACK[0x2288]);
      if (v1724)
        v1740 = 3;
      else
        v1740 = 0;
      v1741 = v1740 + v1718;
      if (v1734 > 0xFFFFFFFFFFFFFFEELL)
        v1735 = 1;
      v1287 = !v1735;
      v1742 = 17;
      if (v1287)
        v1742 = 0;
      v1743 = v1742 + v1734;
      v1744 = v1722 > 0xFFFFFFFFFFFFFFDELL || v1723;
      v1745 = STACK[0x1D68] + STACK[0x22C8];
      v1746 = __CFADD__(STACK[0x1D68], STACK[0x22C8]);
      if (v1745 > 0xFFFFFFFFFFFFFFD0)
        v1746 = 1;
      if (v1738 > 0xFFFFFFFFFFFFFFD2)
        v1739 = 1;
      v1287 = !v1715;
      v1747 = 39;
      if (v1287)
        v1747 = 0;
      v301 = v1399 >= v1726;
      v1748 = v1399 - v1726;
      v1749 = v1747 + STACK[0x1D60] + STACK[0x22B0];
      v1750 = !v301;
      STACK[0x1BC0] = v1748 - v1750;
      v1751 = STACK[0x1DA0] + STACK[0x22A8];
      v1752 = __CFADD__(STACK[0x1DA0], STACK[0x22A8]);
      v1287 = v1744 == 0;
      v1753 = 33;
      if (v1287)
        v1753 = 0;
      v1754 = v1753 + v1722;
      if (v1751 > 0xFFFFFFFFFFFFFFCALL)
        v1752 = 1;
      v1755 = 45;
      if (!v1739)
        v1755 = 0;
      v301 = v1406 >= v1741;
      v1756 = v1406 - v1741;
      v1757 = v1755 + v1738;
      if (v301)
        v1758 = 0;
      else
        v1758 = -3;
      STACK[0x1B98] = v1756 + v1758;
      v1759 = 47;
      if (!v1746)
        v1759 = 0;
      v301 = v1412 >= v1733;
      v1760 = v1412 - v1733;
      v1761 = v1759 + v1745;
      if (v301)
        v1762 = 0;
      else
        v1762 = -5;
      STACK[0x1BB8] = v1760 + v1762;
      v1763 = 53;
      if (!v1752)
        v1763 = 0;
      v301 = STACK[0x3BC8] >= v1743;
      v1764 = STACK[0x3BC8] - v1743;
      v1765 = v1763 + v1751;
      v1766 = -17;
      if (v301)
        v1766 = 0;
      STACK[0x1BD8] = v1764 + v1766;
      if (v1417 >= v1731)
        v1767 = 0;
      else
        v1767 = -15;
      v301 = STACK[0x3BE8] >= v1749;
      v1768 = STACK[0x3BE8] - v1749;
      STACK[0x1B90] = v1417 - v1731 + v1767;
      v1769 = -39;
      if (v301)
        v1769 = 0;
      STACK[0x1BA0] = v1768 + v1769;
      if (v1411 >= v1737)
        v1770 = 0;
      else
        v1770 = -9;
      v301 = STACK[0x3BF8] >= v1754;
      v1771 = STACK[0x3BF8] - v1754;
      STACK[0x1BC8] = v1411 - v1737 + v1770;
      v1772 = -33;
      if (v301)
        v1772 = 0;
      v301 = STACK[0x3BD0] >= v1757;
      v1773 = STACK[0x3BD0] - v1757;
      STACK[0x1B88] = v1771 + v1772;
      v1774 = -45;
      if (v301)
        v1774 = 0;
      v301 = STACK[0x3C00] >= v1761;
      v1775 = STACK[0x3C00] - v1761;
      STACK[0x1BD0] = v1773 + v1774;
      v1776 = -47;
      if (v301)
        v1776 = 0;
      v301 = STACK[0x3BE0] >= v1765;
      v1777 = STACK[0x3BE0] - v1765;
      STACK[0x1BB0] = v1775 + v1776;
      v1778 = -53;
      if (v301)
        v1778 = 0;
      STACK[0x1BA8] = v1777 + v1778;
      v1779 = STACK[0x3710];
      v1780 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 10456));
      STACK[0x3888] = STACK[0x3240];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x3880] = STACK[0x3500];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x38F8] = STACK[0x3460];
      STACK[0x38F0] = STACK[0x3468];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x3920] = STACK[0x3470];
      STACK[0x3568] = STACK[0x3130];
      STACK[0x3918] = STACK[0x3478];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3938] = STACK[0x3480];
      STACK[0x3560] = STACK[0x3138];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3930] = STACK[0x3418];
      STACK[0x3878] = STACK[0x3508];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x3928] = STACK[0x3510];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x37D0] = STACK[0x3488];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3558] = STACK[0x3140];
      STACK[0x37C8] = STACK[0x33E8];
      STACK[0x3908] = STACK[0x34E0];
      STACK[0x37C0] = STACK[0x3420];
      STACK[0x3550] = STACK[0x3148];
      STACK[0x3900] = STACK[0x33F0];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x37B8] = STACK[0x33F8];
      LODWORD(STACK[0x37D8]) = STACK[0x3400];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x38E8] = STACK[0x3490];
      STACK[0x3910] = STACK[0x3518];
      STACK[0x33C0] = STACK[0x3C50];
      STACK[0x37B0] = STACK[0x3428];
      STACK[0x37A8] = STACK[0x3430];
      STACK[0x37A0] = STACK[0x3498];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3798] = STACK[0x34E8];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x3548] = STACK[0x3180];
      STACK[0x3790] = STACK[0x34F0];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x3788] = STACK[0x34A0];
      STACK[0x38E0] = STACK[0x34F8];
      STACK[0x3780] = STACK[0x3028];
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x38B0] = STACK[0x3030];
      STACK[0x3778] = STACK[0x3038];
      STACK[0x38D0] = STACK[0x3520];
      STACK[0x38D8] = STACK[0x34B0];
      STACK[0x38C8] = STACK[0x34A8];
      STACK[0x3770] = STACK[0x34B8];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x38C0] = STACK[0x3098];
      STACK[0x3768] = STACK[0x3040];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3760] = STACK[0x3048];
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3758] = STACK[0x3528];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x3748] = STACK[0x30A0];
      STACK[0x3740] = STACK[0x34C0];
      STACK[0x3738] = STACK[0x2FF8];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x38B8] = STACK[0x3530];
      STACK[0x3750] = STACK[0x3538];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x38A8] = STACK[0x30C8];
      STACK[0x38A0] = STACK[0x3578];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x3730] = STACK[0x3020];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3728] = STACK[0x3050];
      STACK[0x3720] = STACK[0x30A8];
      STACK[0x3718] = STACK[0x34C8];
      STACK[0x3700] = STACK[0x3000];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x36F8] = STACK[0x3058];
      STACK[0x3898] = STACK[0x34D0];
      STACK[0x3708] = STACK[0x34D8];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x36E8] = STACK[0x3060];
      STACK[0x3890] = STACK[0x3068];
      STACK[0x36E0] = STACK[0x30B0];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x36F0] = STACK[0x3088];
      STACK[0x36D8] = STACK[0x3008];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x36D0] = STACK[0x3080];
      STACK[0x3690] = STACK[0x3A98];
      STACK[0x3C00] = 48;
      LODWORD(STACK[0x3AC0]) = v1779;
      STACK[0x33E0] = 0x5B8FBBD5E48BD14FLL;
      STACK[0x3450] = STACK[0x2740];
      STACK[0x3C38] = STACK[0x2738];
      STACK[0x3448] = STACK[0x2720];
      STACK[0x3BB0] = STACK[0x2768];
      STACK[0x3440] = STACK[0x2728];
      STACK[0x3438] = 0xDDB22C380449E0BALL;
      STACK[0x3BF8] = 0x32E284E124F24A81;
      STACK[0x3398] = 0x87E85B6E5A109AFALL;
      STACK[0x33B0] = STACK[0x2750];
      STACK[0x3388] = STACK[0x2730];
      STACK[0x3540] = 0x661C765BF4208041;
      STACK[0x33D8] = STACK[0x2748];
      STACK[0x3BE8] = 0x34B9D46858BE76EBLL;
      STACK[0x3BF0] = STACK[0x2758];
      STACK[0x3570] = STACK[0x2718];
      STACK[0x3C78] = STACK[0x2760];
      STACK[0x3380] = 0x6EBA58B5908087BFLL;
      STACK[0x3BE0] = 0x97B89D4EA264A1B3;
      STACK[0x3390] = 0xD4A6F4CF55C46B4CLL;
      STACK[0x33A8] = 0xA299ED451E059C13;
      STACK[0x3C30] = 0xF7C854F0B7BCE901;
      return v1780();
    case 0x36:
      v1781 = STACK[0x3BE0] + STACK[0x11C0];
      v1782 = __CFADD__(STACK[0x3BE0], STACK[0x11C0]) || STACK[0x3BE0] + STACK[0x11C0] > 0xFFFFFFFFFFFFFFCALL;
      v1783 = STACK[0x3BC8] + STACK[0x10B8];
      v1784 = __CFADD__(STACK[0x3BC8], STACK[0x10B8]) || STACK[0x3BC8] + STACK[0x10B8] > 0xFFFFFFFFFFFFFFEELL;
      v1785 = v1417 + STACK[0x10A0];
      v1786 = __CFADD__(v1417, STACK[0x10A0]) || v1417 + STACK[0x10A0] > 0xFFFFFFFFFFFFFFF0;
      v1787 = v1411 + STACK[0x1148];
      v1788 = __CFADD__(v1411, STACK[0x1148]) || v1411 + STACK[0x1148] > 0xFFFFFFFFFFFFFFF6;
      v1789 = __CFADD__(v1399, STACK[0x10E0]) || v1399 + STACK[0x10E0] == -1;
      STACK[0x1C98] = v1789 + v1399 + STACK[0x10E0];
      v1790 = v1406 + STACK[0x10D0];
      v1791 = __CFADD__(v1406, STACK[0x10D0]) || v1406 + STACK[0x10D0] > 0xFFFFFFFFFFFFFFFCLL;
      v1792 = v1412 + STACK[0x11A8];
      v1793 = __CFADD__(v1412, STACK[0x11A8]);
      if (v1792 > 0xFFFFFFFFFFFFFFFALL)
        v1793 = 1;
      v1794 = STACK[0x3BF8] + STACK[0x1128];
      v1795 = __CFADD__(STACK[0x3BF8], STACK[0x1128]);
      if (v1793)
        v1796 = 5;
      else
        v1796 = 0;
      STACK[0x1330] = v1796 + v1792;
      v1797 = STACK[0x3BD0] + STACK[0x1138];
      v1798 = __CFADD__(STACK[0x3BD0], STACK[0x1138]);
      v1799 = STACK[0x3C00] + STACK[0x1110];
      v1800 = __CFADD__(STACK[0x3C00], STACK[0x1110]);
      v1801 = STACK[0x3BE8] + STACK[0x10D8];
      v1802 = __CFADD__(STACK[0x3BE8], STACK[0x10D8]);
      if (v1791)
        v1803 = 3;
      else
        v1803 = 0;
      STACK[0x1AF8] = v1803 + v1790;
      v1804 = v1794 > 0xFFFFFFFFFFFFFFDELL || v1795;
      if (v1788)
        v1805 = 9;
      else
        v1805 = 0;
      STACK[0x1580] = v1805 + v1787;
      if (v1786)
        v1806 = 15;
      else
        v1806 = 0;
      STACK[0x15E8] = v1806 + v1785;
      v1807 = 33;
      if (!v1804)
        v1807 = 0;
      STACK[0x12D0] = v1807 + v1794;
      v1808 = v1801 > 0xFFFFFFFFFFFFFFD8 || v1802;
      v1287 = !v1784;
      v1809 = 17;
      if (v1287)
        v1809 = 0;
      STACK[0x1570] = v1809 + v1783;
      v1810 = v1797 > 0xFFFFFFFFFFFFFFD2 || v1798;
      v1811 = v1799 > 0xFFFFFFFFFFFFFFD0 || v1800;
      v1287 = v1808 == 0;
      v1812 = 39;
      if (v1287)
        v1812 = 0;
      STACK[0x15E0] = v1812 + v1801;
      v1813 = 47;
      if (!v1811)
        v1813 = 0;
      STACK[0x12C8] = v1813 + v1799;
      v1814 = 53;
      if (!v1782)
        v1814 = 0;
      STACK[0x1578] = v1814 + v1781;
      v1287 = v1810 == 0;
      v1815 = 45;
      if (v1287)
        v1815 = 0;
      STACK[0x1460] = v1815 + v1797;
      v1816 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9638)) - 12);
      STACK[0x3BB8] = STACK[0x2710];
      STACK[0x3888] = STACK[0x3240];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x3828] = STACK[0x2708];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x3C58] = STACK[0x2798];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x3BA0] = STACK[0x26F8];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x33C0] = STACK[0x3C50];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3C50] = STACK[0x2770];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x3C40] = STACK[0x2780];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x3C48] = STACK[0x2788];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x3690] = STACK[0x3A98];
      LODWORD(STACK[0x3BD8]) = 55;
      STACK[0x3B70] = STACK[0x1BD8];
      STACK[0x3378] = STACK[0x1208];
      STACK[0x3B68] = STACK[0x1BB0];
      STACK[0x3B78] = STACK[0x1BA8];
      STACK[0x3370] = STACK[0x1248];
      STACK[0x3368] = STACK[0x1240];
      STACK[0x3210] = STACK[0x1B90];
      STACK[0x3350] = STACK[0x1BC8];
      STACK[0x3238] = STACK[0x12E0];
      STACK[0x3200] = STACK[0x12D8];
      STACK[0x3218] = STACK[0x1BC0];
      STACK[0x3358] = STACK[0x12A0];
      STACK[0x3BD0] = STACK[0x1300];
      STACK[0x3230] = STACK[0x1B88];
      STACK[0x3BC8] = STACK[0x12F0];
      STACK[0x3208] = STACK[0x12A8];
      STACK[0x3228] = STACK[0x1B98];
      STACK[0x3BC0] = STACK[0x1238];
      STACK[0x3250] = STACK[0x1BB8];
      STACK[0x3220] = STACK[0x1BD0];
      STACK[0x3AC8] = STACK[0x1210];
      STACK[0x3248] = STACK[0x1BA0];
      return v1816();
    case 0x3D:
      v1817 = STACK[0x3710];
      v1818 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70]
                                                                                 + 8 * (LODWORD(STACK[0x3710]) - 624))
                                                                     - 4);
      STACK[0x3888] = STACK[0x3240];
      v1819 = STACK[0x3408];
      STACK[0x25D8] = STACK[0x3BC8];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x3880] = STACK[0x3500];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x38F8] = STACK[0x3460];
      STACK[0x38F0] = STACK[0x3468];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x3920] = STACK[0x3470];
      STACK[0x3568] = STACK[0x3130];
      STACK[0x3918] = STACK[0x3478];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3938] = STACK[0x3480];
      STACK[0x3560] = STACK[0x3138];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3930] = STACK[0x3418];
      STACK[0x3878] = STACK[0x3508];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x3928] = STACK[0x3510];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x37D0] = STACK[0x3488];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3558] = STACK[0x3140];
      STACK[0x37C8] = STACK[0x33E8];
      STACK[0x3908] = STACK[0x34E0];
      STACK[0x37C0] = STACK[0x3420];
      STACK[0x3550] = STACK[0x3148];
      STACK[0x3900] = STACK[0x33F0];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x37B8] = STACK[0x33F8];
      LODWORD(STACK[0x37D8]) = STACK[0x3400];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x38E8] = STACK[0x3490];
      STACK[0x3910] = STACK[0x3518];
      STACK[0x33C0] = STACK[0x3C50];
      STACK[0x37B0] = STACK[0x3428];
      STACK[0x37A8] = STACK[0x3430];
      STACK[0x37A0] = STACK[0x3498];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3798] = STACK[0x34E8];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x25D0] = v1399;
      STACK[0x3970] = STACK[0x3308];
      STACK[0x3548] = STACK[0x3180];
      STACK[0x25C8] = STACK[0x3C00];
      STACK[0x3790] = STACK[0x34F0];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x3788] = STACK[0x34A0];
      STACK[0x25C0] = STACK[0x3BE0];
      STACK[0x38E0] = STACK[0x34F8];
      STACK[0x3780] = STACK[0x3028];
      STACK[0x25B8] = v1417;
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x38B0] = STACK[0x3030];
      STACK[0x3778] = STACK[0x3038];
      STACK[0x38D0] = STACK[0x3520];
      STACK[0x38D8] = STACK[0x34B0];
      STACK[0x38C8] = STACK[0x34A8];
      STACK[0x3770] = STACK[0x34B8];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x38C0] = STACK[0x3098];
      STACK[0x3768] = STACK[0x3040];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3760] = STACK[0x3048];
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x25B0] = v1406;
      STACK[0x3758] = STACK[0x3528];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x25A8] = STACK[0x3BF8];
      STACK[0x25A0] = STACK[0x3BE8];
      STACK[0x3748] = STACK[0x30A0];
      STACK[0x3740] = STACK[0x34C0];
      STACK[0x3738] = STACK[0x2FF8];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x38B8] = STACK[0x3530];
      STACK[0x3750] = STACK[0x3538];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x38A8] = STACK[0x30C8];
      STACK[0x38A0] = STACK[0x3578];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x3730] = STACK[0x3020];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x2598] = v1411;
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3728] = STACK[0x3050];
      STACK[0x3720] = STACK[0x30A8];
      STACK[0x3718] = STACK[0x34C8];
      STACK[0x3700] = STACK[0x3000];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x36F8] = STACK[0x3058];
      STACK[0x2590] = STACK[0x3BD0];
      STACK[0x3898] = STACK[0x34D0];
      STACK[0x2588] = v1412;
      STACK[0x3708] = STACK[0x34D8];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x36E8] = STACK[0x3060];
      STACK[0x3890] = STACK[0x3068];
      STACK[0x36E0] = STACK[0x30B0];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x36F0] = STACK[0x3088];
      STACK[0x36D8] = STACK[0x3008];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x36D0] = STACK[0x3080];
      STACK[0x3690] = STACK[0x3A98];
      v1820 = STACK[0x3018];
      STACK[0x3C00] = 62;
      LODWORD(STACK[0x3AC0]) = v1817;
      STACK[0x33E0] = STACK[0x1C78];
      STACK[0x3450] = STACK[0x1BF8];
      STACK[0x3C38] = STACK[0x1C40];
      STACK[0x3448] = STACK[0x1C80];
      STACK[0x3BB0] = STACK[0x1C18];
      STACK[0x3440] = STACK[0x1BF0];
      STACK[0x3438] = STACK[0x1C10];
      STACK[0x3BF8] = STACK[0x1C20];
      STACK[0x3398] = STACK[0x1BE0];
      STACK[0x33B0] = STACK[0x1C08];
      STACK[0x3388] = STACK[0x1C30];
      STACK[0x3540] = STACK[0x1C38];
      STACK[0x33D8] = STACK[0x1C28];
      STACK[0x3BE8] = STACK[0x1C88];
      STACK[0x3BF0] = STACK[0x1C70];
      STACK[0x3570] = STACK[0x1C50];
      STACK[0x3C78] = STACK[0x1C68];
      STACK[0x3380] = STACK[0x1BE8];
      STACK[0x3BE0] = STACK[0x1C48];
      STACK[0x3390] = STACK[0x1C60];
      STACK[0x33A8] = STACK[0x1C00];
      STACK[0x3C30] = STACK[0x1C58];
      return v1818(15, v1820, v1819, 9);
    case 0x45:
      v1821 = STACK[0x25C0];
      v1822 = 2 * STACK[0x25C0] > 0xFFFFFFFFFFFFFFCALL || v1821 < 0;
      v1823 = 53;
      if (!v1822)
        v1823 = 0;
      v1824 = v1823 + 2 * STACK[0x25C0];
      STACK[0x3C38] = v1824 + v1821;
      v1825 = __CFADD__(v1824, v1821) || v1824 + v1821 > 0xFFFFFFFFFFFFFFCALL;
      LODWORD(STACK[0x3C30]) = v1825;
      v1826 = STACK[0x25C8];
      v1827 = 2 * STACK[0x25C8] > 0xFFFFFFFFFFFFFFD0 || v1826 < 0;
      v1828 = 47;
      if (!v1827)
        v1828 = 0;
      v1829 = v1828 + 2 * STACK[0x25C8];
      STACK[0x3C28] = v1829 + v1826;
      v1830 = __CFADD__(v1829, v1826) || v1829 + v1826 > 0xFFFFFFFFFFFFFFD0;
      LODWORD(STACK[0x3C20]) = v1830;
      v1831 = STACK[0x25A0];
      v1832 = 2 * STACK[0x25A0] > 0xFFFFFFFFFFFFFFD8 || v1831 < 0;
      v1833 = 39;
      if (!v1832)
        v1833 = 0;
      v1834 = v1833 + 2 * STACK[0x25A0];
      v1835 = v1834 + v1831;
      v1836 = __CFADD__(v1834, v1831) || v1834 + v1831 > 0xFFFFFFFFFFFFFFD8;
      v1837 = STACK[0x25A8];
      v1838 = 2 * STACK[0x25A8] > 0xFFFFFFFFFFFFFFDELL || v1837 < 0;
      v1839 = 33;
      if (!v1838)
        v1839 = 0;
      v1840 = v1839 + 2 * STACK[0x25A8];
      v1841 = v1840 + v1837;
      v1842 = __CFADD__(v1840, v1837) || v1840 + v1837 > 0xFFFFFFFFFFFFFFDELL;
      v1843 = STACK[0x25B8];
      if (2 * STACK[0x25B8] > 0xFFFFFFFFFFFFFFF0 || v1843 < 0)
        v1845 = 15;
      else
        v1845 = 0;
      v1846 = v1845 + 2 * STACK[0x25B8];
      v1847 = v1846 + v1843;
      v1848 = __CFADD__(v1846, v1843) || v1846 + v1843 > 0xFFFFFFFFFFFFFFF0;
      v1849 = STACK[0x25D8];
      if (2 * STACK[0x25D8] > 0xFFFFFFFFFFFFFFEELL || v1849 < 0)
        v1851 = 17;
      else
        v1851 = 0;
      v1852 = v1851 + 2 * STACK[0x25D8];
      v1853 = v1852 + v1849;
      v1854 = __CFADD__(v1852, v1849) || v1852 + v1849 > 0xFFFFFFFFFFFFFFEELL;
      v1855 = STACK[0x2588];
      if (2 * STACK[0x2588] > 0xFFFFFFFFFFFFFFFALL || v1855 < 0)
        v1857 = 5;
      else
        v1857 = 0;
      v1858 = v1857 + 2 * STACK[0x2588];
      v1859 = v1858 + v1855 > 0xFFFFFFFFFFFFFFFALL;
      v301 = __CFADD__(v1858, v1855);
      v1860 = v1858 + v1855;
      if (v301)
        v1859 = 1;
      v1861 = STACK[0x25B0];
      if (2 * STACK[0x25B0] > 0xFFFFFFFFFFFFFFFCLL || v1861 < 0)
        v1863 = 3;
      else
        v1863 = 0;
      v1864 = v1863 + 2 * STACK[0x25B0];
      v1865 = v1864 + v1861 > 0xFFFFFFFFFFFFFFFCLL;
      v301 = __CFADD__(v1864, v1861);
      v1866 = v1864 + v1861;
      if (v301)
        v1865 = 1;
      v1867 = __ROR8__(STACK[0x25D0], 63);
      LODWORD(v1868) = v1867 + STACK[0x25D0] == -1;
      v301 = __CFADD__(v1867, STACK[0x25D0]);
      v1869 = v1867 + STACK[0x25D0];
      if (v301)
        v1868 = 1;
      else
        v1868 = v1868;
      v1870 = STACK[0x2598];
      STACK[0x3C78] = v1417;
      v1871 = (unint64_t)(2 * v1870) > 0xFFFFFFFFFFFFFFF6 || v1870 < 0;
      v1872 = v1412;
      v1873 = v1411;
      if (v1871)
        v1874 = 9;
      else
        v1874 = 0;
      v1875 = v1874 + 2 * v1870;
      v1876 = STACK[0x2590];
      if (2 * STACK[0x2590] > 0xFFFFFFFFFFFFFFD2 || v1876 < 0)
        v1878 = 45;
      else
        v1878 = 0;
      v1879 = v1878 + 2 * STACK[0x2590];
      v301 = __CFADD__(v1875, v1870);
      v1880 = v1875 + v1870;
      v1881 = v301;
      if (v1865)
        v1882 = 3;
      else
        v1882 = 0;
      STACK[0x1370] = v1882 + v1866;
      STACK[0x1368] = v1868 + v1869;
      v1883 = v1879 + v1876;
      v1884 = __CFADD__(v1879, v1876);
      if (v1859)
        v1885 = 5;
      else
        v1885 = 0;
      STACK[0x1360] = v1885 + v1860;
      if (v1880 > 0xFFFFFFFFFFFFFFF6)
        v1886 = 1;
      else
        v1886 = v1881;
      if (v1886)
        v1887 = 9;
      else
        v1887 = 0;
      STACK[0x1380] = v1887 + v1880;
      if (v1854)
        v1888 = 17;
      else
        v1888 = 0;
      v1889 = 33;
      if (!v1842)
        v1889 = 0;
      if (v1848)
        v1890 = 15;
      else
        v1890 = 0;
      STACK[0x1390] = v1889 + v1841;
      STACK[0x1358] = v1890 + v1847;
      v1891 = 39;
      if (!v1836)
        v1891 = 0;
      STACK[0x13A8] = v1891 + v1835;
      v1892 = v1883 > 0xFFFFFFFFFFFFFFD2 || v1884;
      STACK[0x1388] = v1888 + v1853;
      if (v1892)
        v1893 = 45;
      else
        v1893 = 0;
      STACK[0x1378] = v1893 + v1883;
      v1894 = 47;
      if (!LODWORD(STACK[0x3C20]))
        v1894 = 0;
      v1895 = 53;
      if (!LODWORD(STACK[0x3C30]))
        v1895 = 0;
      STACK[0x13A0] = v1895 + STACK[0x3C38];
      STACK[0x1398] = v1894 + STACK[0x3C28];
      v1896 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9638)) - 12);
      STACK[0x1060] = STACK[0x3BC8];
      STACK[0x3BB8] = STACK[0x2710];
      STACK[0x3888] = STACK[0x3240];
      STACK[0x1050] = v1399;
      STACK[0x3988] = STACK[0x3248];
      STACK[0x1030] = v1873;
      STACK[0x3828] = STACK[0x2708];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x1008] = STACK[0x3BD0];
      STACK[0x3C58] = STACK[0x2798];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x3BA0] = STACK[0x26F8];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x33C0] = STACK[0x3C50];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0xFD0] = STACK[0x3BF8];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3C50] = STACK[0x2770];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0xFB0] = v1406;
      STACK[0x31D0] = STACK[0x3330];
      STACK[0xFA8] = v1872;
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0xF90] = STACK[0x3C00];
      STACK[0xF88] = STACK[0x3BE8];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x3C40] = STACK[0x2780];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0xF70] = STACK[0x3C78];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x3C48] = STACK[0x2788];
      STACK[0xF68] = STACK[0x3BE0];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x3690] = STACK[0x3A98];
      LODWORD(STACK[0x3BD8]) = 70;
      STACK[0x3B70] = 0x34B9D46858BE76EBLL;
      STACK[0x3378] = STACK[0x2620];
      STACK[0x3B68] = 0x97B89D4EA264A1B3;
      STACK[0x3B78] = 0xF7C854F0B7BCE901;
      STACK[0x3370] = STACK[0x25E0];
      STACK[0x3368] = STACK[0x25E8];
      STACK[0x3210] = 0x87E85B6E5A109AFALL;
      STACK[0x3350] = 0x661C765BF4208041;
      STACK[0x3238] = STACK[0x2618];
      STACK[0x3200] = STACK[0x2630];
      STACK[0x3218] = 0x5B8FBBD5E48BD14FLL;
      STACK[0x3358] = STACK[0x2610];
      STACK[0x3BD0] = STACK[0x2628];
      STACK[0x3230] = 0x32E284E124F24A81;
      STACK[0x3BC8] = STACK[0x2600];
      STACK[0x3208] = STACK[0x25F8];
      STACK[0x3228] = 0xA299ED451E059C13;
      STACK[0x3BC0] = STACK[0x25F0];
      STACK[0x3250] = 0xD4A6F4CF55C46B4CLL;
      STACK[0x3220] = 0x6EBA58B5908087BFLL;
      STACK[0x3AC8] = STACK[0x2608];
      STACK[0x3248] = 0xDDB22C380449E0BALL;
      return v1896();
    case 0x47:
      v1897 = STACK[0x13A0];
      v1898 = STACK[0x1EB0];
      v1899 = STACK[0x13A0] + STACK[0x1EB0] > 0xFFFFFFFFFFFFFFCALL;
      STACK[0x3C78] = STACK[0x13A0] + STACK[0x1EB0];
      if (__CFADD__(v1897, v1898))
        v1899 = 1;
      LODWORD(STACK[0x3C38]) = v1899;
      v1900 = STACK[0x1378];
      v1901 = STACK[0x1168];
      v1902 = STACK[0x1378] + STACK[0x1168] > 0xFFFFFFFFFFFFFFD2;
      STACK[0x3C28] = STACK[0x1378] + STACK[0x1168];
      if (__CFADD__(v1900, v1901))
        v1902 = 1;
      LODWORD(STACK[0x3C20]) = v1902;
      v1903 = STACK[0x13A8];
      v1904 = STACK[0x10C0];
      v1905 = STACK[0x13A8] + STACK[0x10C0] > 0xFFFFFFFFFFFFFFD8;
      STACK[0x3C08] = STACK[0x13A8] + STACK[0x10C0];
      v1906 = __CFADD__(v1903, v1904) || v1905;
      v1907 = STACK[0x1150];
      v1908 = STACK[0x1370] + STACK[0x1150];
      v1909 = __CFADD__(STACK[0x1370], STACK[0x1150]);
      v1910 = STACK[0x10F8];
      v1911 = STACK[0x10F8] + STACK[0x1390];
      v1912 = __CFADD__(STACK[0x10F8], STACK[0x1390]);
      v1913 = STACK[0x11B0];
      v1914 = STACK[0x1368] + STACK[0x11B0];
      LODWORD(v1915) = __CFADD__(STACK[0x1368], STACK[0x11B0]);
      v1916 = STACK[0x10A8];
      v1917 = STACK[0x1358] + STACK[0x10A8];
      v1918 = __CFADD__(STACK[0x1358], STACK[0x10A8]);
      v1919 = STACK[0x1118];
      v1920 = STACK[0x1360] + STACK[0x1118];
      v1921 = __CFADD__(STACK[0x1360], STACK[0x1118]);
      if (v1908 > 0xFFFFFFFFFFFFFFFCLL)
        v1909 = 1;
      if (v1914 == -1)
        v1915 = 1;
      else
        v1915 = v1915;
      STACK[0x1B40] = v1915 + v1914;
      if (v1909)
        v1922 = 3;
      else
        v1922 = 0;
      STACK[0x1B50] = v1922 + v1908;
      v1923 = v1920 > 0xFFFFFFFFFFFFFFFALL || v1921;
      v1924 = STACK[0x1170];
      v1925 = STACK[0x1380] + STACK[0x1170];
      v1926 = __CFADD__(STACK[0x1380], STACK[0x1170]);
      if (v1923)
        v1927 = 5;
      else
        v1927 = 0;
      STACK[0x1B30] = v1927 + v1920;
      v1928 = v1917 > 0xFFFFFFFFFFFFFFF0 || v1918;
      v1929 = STACK[0x11B8];
      v1930 = STACK[0x1388] + STACK[0x11B8];
      v1931 = __CFADD__(STACK[0x1388], STACK[0x11B8]);
      if (v1925 > 0xFFFFFFFFFFFFFFF6)
        v1926 = 1;
      v1932 = STACK[0x1398];
      STACK[0x3C30] = v1411;
      v1933 = STACK[0x1188];
      v301 = __CFADD__(STACK[0x1188], v1932);
      v1934 = STACK[0x1188] + v1932;
      v1935 = v301;
      if (v1926)
        v1936 = 9;
      else
        v1936 = 0;
      STACK[0x1B38] = v1936 + v1925;
      v1937 = v1930 > 0xFFFFFFFFFFFFFFEELL || v1931;
      v1287 = v1937 == 0;
      v1938 = 17;
      if (v1287)
        v1938 = 0;
      STACK[0x1B28] = v1938 + v1930;
      v1939 = v1911 > 0xFFFFFFFFFFFFFFDELL || v1912;
      if (v1928)
        v1940 = 15;
      else
        v1940 = 0;
      STACK[0x1B68] = v1940 + v1917;
      v1941 = 33;
      if (!v1939)
        v1941 = 0;
      STACK[0x1B20] = v1941 + v1911;
      if (v1934 > 0xFFFFFFFFFFFFFFD0)
        v1942 = 1;
      else
        v1942 = v1935;
      STACK[0x3440] = (__PAIR128__(STACK[0x25D0] - v1913, STACK[0x25D0]) - v1913) >> 64;
      v1943 = 39;
      if (!v1906)
        v1943 = 0;
      v1287 = LODWORD(STACK[0x3C20]) == 0;
      STACK[0x1B58] = v1943 + STACK[0x3C08];
      v1944 = 45;
      if (v1287)
        v1944 = 0;
      STACK[0x1B60] = v1944 + STACK[0x3C28];
      v1945 = 47;
      if (!v1942)
        v1945 = 0;
      v1946 = STACK[0x3C38];
      STACK[0x1B48] = v1945 + v1934;
      v1947 = 53;
      if (!v1946)
        v1947 = 0;
      STACK[0x1B18] = v1947 + STACK[0x3C78];
      if (STACK[0x25B0] >= v1907)
        v1948 = 0;
      else
        v1948 = -3;
      STACK[0x3448] = STACK[0x25B0] - v1907 + v1948;
      v1949 = -9;
      if (STACK[0x2598] >= v1924)
        v1949 = 0;
      STACK[0x3570] = STACK[0x2598] - v1924 + v1949;
      v1950 = -33;
      if (STACK[0x25A8] >= v1910)
        v1950 = 0;
      STACK[0x3BF0] = STACK[0x25A8] - v1910 + v1950;
      if (STACK[0x2588] >= v1919)
        v1951 = 0;
      else
        v1951 = -5;
      STACK[0x33D8] = STACK[0x2588] - v1919 + v1951;
      v1952 = -15;
      if (STACK[0x25B8] >= v1916)
        v1952 = 0;
      STACK[0x3450] = STACK[0x25B8] - v1916 + v1952;
      v1953 = -17;
      if (STACK[0x25D8] >= v1929)
        v1953 = 0;
      STACK[0x3C78] = STACK[0x25D8] - v1929 + v1953;
      v1954 = -39;
      if (STACK[0x25A0] >= v1904)
        v1954 = 0;
      STACK[0x3388] = STACK[0x25A0] - v1904 + v1954;
      v1955 = -47;
      if (STACK[0x25C8] >= v1933)
        v1955 = 0;
      STACK[0x3BB0] = STACK[0x25C8] - v1933 + v1955;
      v1956 = -45;
      if (STACK[0x2590] >= v1901)
        v1956 = 0;
      STACK[0x33B0] = STACK[0x2590] - v1901 + v1956;
      v1957 = -53;
      if (STACK[0x25C0] >= STACK[0x1EB0])
        v1957 = 0;
      STACK[0x3C38] = STACK[0x25C0] - STACK[0x1EB0] + v1957;
      v1958 = STACK[0x3710];
      v1959 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 10456));
      STACK[0x3888] = STACK[0x3240];
      STACK[0x1058] = v1399;
      STACK[0x1048] = STACK[0x3BD0];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x1040] = STACK[0x3BE0];
      STACK[0x3880] = STACK[0x3500];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x38F8] = STACK[0x3460];
      STACK[0x38F0] = STACK[0x3468];
      STACK[0x1020] = STACK[0x3BC8];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x3920] = STACK[0x3470];
      STACK[0x3568] = STACK[0x3130];
      STACK[0x3918] = STACK[0x3478];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3938] = STACK[0x3480];
      STACK[0x3560] = STACK[0x3138];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3930] = STACK[0x3418];
      STACK[0x3878] = STACK[0x3508];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x3928] = STACK[0x3510];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x37D0] = STACK[0x3488];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3558] = STACK[0x3140];
      STACK[0x37C8] = STACK[0x33E8];
      STACK[0x3908] = STACK[0x34E0];
      STACK[0x37C0] = STACK[0x3420];
      STACK[0x3550] = STACK[0x3148];
      STACK[0x3900] = STACK[0x33F0];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x37B8] = STACK[0x33F8];
      LODWORD(STACK[0x37D8]) = STACK[0x3400];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x38E8] = STACK[0x3490];
      STACK[0x3910] = STACK[0x3518];
      STACK[0x33C0] = STACK[0x3C50];
      STACK[0x37B0] = STACK[0x3428];
      STACK[0x37A8] = STACK[0x3430];
      STACK[0x37A0] = STACK[0x3498];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3798] = STACK[0x34E8];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x3548] = STACK[0x3180];
      STACK[0x3790] = STACK[0x34F0];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x3788] = STACK[0x34A0];
      STACK[0xFC8] = v1406;
      STACK[0x38E0] = STACK[0x34F8];
      STACK[0x3780] = STACK[0x3028];
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x38B0] = STACK[0x3030];
      STACK[0x3778] = STACK[0x3038];
      STACK[0x38D0] = STACK[0x3520];
      STACK[0x38D8] = STACK[0x34B0];
      STACK[0x38C8] = STACK[0x34A8];
      STACK[0x3770] = STACK[0x34B8];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x38C0] = STACK[0x3098];
      STACK[0x3768] = STACK[0x3040];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3760] = STACK[0x3048];
      STACK[0xFC0] = v1412;
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3758] = STACK[0x3528];
      STACK[0xFB8] = STACK[0x3BF8];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x3748] = STACK[0x30A0];
      STACK[0x3740] = STACK[0x34C0];
      STACK[0x3738] = STACK[0x2FF8];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x38B8] = STACK[0x3530];
      STACK[0x3750] = STACK[0x3538];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0xFA0] = STACK[0x3BE8];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x38A8] = STACK[0x30C8];
      STACK[0x38A0] = STACK[0x3578];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x3730] = STACK[0x3020];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3728] = STACK[0x3050];
      STACK[0x3720] = STACK[0x30A8];
      STACK[0x3718] = STACK[0x34C8];
      STACK[0x3700] = STACK[0x3000];
      STACK[0xF80] = v1417;
      STACK[0x3990] = STACK[0x3278];
      STACK[0x36F8] = STACK[0x3058];
      STACK[0x3898] = STACK[0x34D0];
      STACK[0x3708] = STACK[0x34D8];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x36E8] = STACK[0x3060];
      STACK[0x3890] = STACK[0x3068];
      STACK[0x36E0] = STACK[0x30B0];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x36F0] = STACK[0x3088];
      STACK[0x36D8] = STACK[0x3008];
      STACK[0xF78] = STACK[0x3C30];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x36D0] = STACK[0x3080];
      STACK[0x3690] = STACK[0x3A98];
      STACK[0xF98] = STACK[0x3C00];
      STACK[0x3C00] = 72;
      LODWORD(STACK[0x3AC0]) = v1958;
      STACK[0x33E0] = 0x5B8FBBD5E48BD14FLL;
      STACK[0x3438] = 0xDDB22C380449E0BALL;
      STACK[0x3BF8] = 0x32E284E124F24A81;
      STACK[0x3398] = 0x87E85B6E5A109AFALL;
      STACK[0x3540] = 0x661C765BF4208041;
      STACK[0x3BE8] = 0x34B9D46858BE76EBLL;
      STACK[0x3380] = 0x6EBA58B5908087BFLL;
      STACK[0x3BE0] = 0x97B89D4EA264A1B3;
      STACK[0x3390] = 0xD4A6F4CF55C46B4CLL;
      STACK[0x33A8] = 0xA299ED451E059C13;
      STACK[0x3C30] = 0xF7C854F0B7BCE901;
      return v1959();
    default:
      STACK[0x1318] = (__PAIR128__(v1399 - STACK[0x1158], v1399) - STACK[0x1158]) >> 64;
      if (v1406 >= STACK[0x1120])
        v1609 = 0;
      else
        v1609 = -3;
      STACK[0x1348] = v1406 - STACK[0x1120] + v1609;
      if (v1411 >= STACK[0x1140])
        v1610 = 0;
      else
        v1610 = -9;
      STACK[0x1310] = v1411 - STACK[0x1140] + v1610;
      if (v1412 >= STACK[0x1198])
        v1611 = 0;
      else
        v1611 = -5;
      STACK[0x1320] = v1412 - STACK[0x1198] + v1611;
      v1612 = -17;
      if (STACK[0x3BC8] >= STACK[0x1180])
        v1612 = 0;
      STACK[0x1078] = STACK[0x3BC8] - STACK[0x1180] + v1612;
      if (v1417 >= STACK[0x11E8])
        v1613 = 0;
      else
        v1613 = -15;
      STACK[0x1338] = v1417 - STACK[0x11E8] + v1613;
      v1614 = -33;
      if (STACK[0x3BF8] >= STACK[0x11E0])
        v1614 = 0;
      STACK[0x1070] = STACK[0x3BF8] - STACK[0x11E0] + v1614;
      v1615 = -39;
      if (STACK[0x3BE8] >= STACK[0x10C8])
        v1615 = 0;
      STACK[0x1090] = STACK[0x3BE8] - STACK[0x10C8] + v1615;
      v1616 = -45;
      if (STACK[0x3BD0] >= STACK[0x10B0])
        v1616 = 0;
      STACK[0x1328] = STACK[0x3BD0] - STACK[0x10B0] + v1616;
      v1617 = -47;
      if (STACK[0x3C00] >= STACK[0x11D0])
        v1617 = 0;
      STACK[0x1098] = STACK[0x3C00] - STACK[0x11D0] + v1617;
      v1618 = -53;
      if (STACK[0x3BE0] >= STACK[0x11F0])
        v1618 = 0;
      STACK[0x1340] = STACK[0x3BE0] - STACK[0x11F0] + v1618;
      v1619 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523)) - 8);
      STACK[0x3888] = STACK[0x3240];
      STACK[0x3240] = STACK[0x27A0];
      STACK[0x3988] = STACK[0x3248];
      STACK[0x3A28] = STACK[0x3B90];
      STACK[0x33D0] = STACK[0x3C58];
      STACK[0x3AB8] = STACK[0x3258];
      STACK[0x33C8] = STACK[0x3C40];
      STACK[0x3A68] = STACK[0x3B80];
      STACK[0x3980] = STACK[0x3368];
      STACK[0x3A20] = STACK[0x3268];
      STACK[0x3A48] = STACK[0x3B88];
      STACK[0x3A60] = STACK[0x3270];
      STACK[0x3A50] = STACK[0x3208];
      STACK[0x3AB0] = STACK[0x31F8];
      STACK[0x31E8] = STACK[0x3C60];
      STACK[0x3A18] = STACK[0x3350];
      STACK[0x39B0] = STACK[0x3300];
      STACK[0x3978] = STACK[0x32F8];
      STACK[0x33C0] = STACK[0x3C50];
      v1620 = STACK[0x27F0];
      STACK[0x3960] = STACK[0x3358];
      STACK[0x3A38] = STACK[0x3B98];
      STACK[0x3AA8] = STACK[0x3200];
      STACK[0x3970] = STACK[0x3308];
      STACK[0x36C0] = STACK[0x3A70];
      STACK[0x31E0] = STACK[0x3318];
      STACK[0x3308] = STACK[0x27B8];
      STACK[0x39A8] = STACK[0x3210];
      STACK[0x36B8] = STACK[0x3A78];
      STACK[0x31D8] = STACK[0x3320];
      STACK[0x3300] = STACK[0x27C0];
      STACK[0x3AA0] = STACK[0x3BD8];
      STACK[0x3A40] = STACK[0x3218];
      STACK[0x3958] = STACK[0x32E8];
      STACK[0x3A30] = STACK[0x3220];
      STACK[0x3968] = STACK[0x32F0];
      STACK[0x31D0] = STACK[0x3330];
      STACK[0x3360] = STACK[0x27D0];
      STACK[0x39A0] = STACK[0x3228];
      STACK[0x31C8] = STACK[0x3310];
      STACK[0x3948] = STACK[0x3230];
      STACK[0x3998] = STACK[0x3238];
      STACK[0x3950] = STACK[0x32E0];
      STACK[0x3BB8] = STACK[0x27D8];
      STACK[0x33B8] = STACK[0x3C48];
      STACK[0x39B8] = STACK[0x3250];
      STACK[0x3940] = STACK[0x3260];
      STACK[0x36B0] = STACK[0x3A80];
      STACK[0x3990] = STACK[0x3278];
      STACK[0x3C58] = STACK[0x27E0];
      STACK[0x3A58] = STACK[0x3280];
      STACK[0x31C0] = STACK[0x3C68];
      STACK[0x3BA0] = STACK[0x27E8];
      STACK[0x36A8] = STACK[0x3A88];
      STACK[0x36A0] = STACK[0x39C0];
      STACK[0x3698] = STACK[0x3A90];
      STACK[0x37E0] = STACK[0x3288];
      STACK[0x31B8] = STACK[0x3328];
      STACK[0x31B0] = STACK[0x3338];
      STACK[0x3690] = STACK[0x3A98];
      STACK[0x3270] = 76;
      STACK[0x3128] = STACK[0x1B30];
      STACK[0x3318] = STACK[0x1B68];
      STACK[0x3310] = STACK[0x1A30];
      STACK[0x3348] = STACK[0x1B60];
      STACK[0x32E8] = STACK[0x1A58];
      STACK[0x32F8] = STACK[0x1B40];
      STACK[0x3330] = STACK[0x1A88];
      STACK[0x3288] = STACK[0x1A10];
      STACK[0x3328] = STACK[0x1A20];
      STACK[0x3340] = STACK[0x1B18];
      STACK[0x32F0] = STACK[0x1B50];
      STACK[0x3338] = STACK[0x1B48];
      STACK[0x3268] = STACK[0x1A08];
      STACK[0x3260] = STACK[0x1A80];
      STACK[0x32E0] = STACK[0x1B28];
      STACK[0x3278] = STACK[0x1A50];
      STACK[0x3258] = STACK[0x1A00];
      STACK[0x3320] = STACK[0x1A40];
      STACK[0x3280] = STACK[0x1B38];
      return v1619(v1620);
  }
}

uint64_t sub_1006AF89C()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v0 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 6921));
  LODWORD(STACK[0x156C]) = 82;
  v1 = STACK[0x1F18];
  STACK[0x3240] = STACK[0x1F18];
  v2 = STACK[0x1F10];
  STACK[0x3C68] = STACK[0x1F10];
  v3 = STACK[0x1798];
  STACK[0x3C60] = STACK[0x1798];
  v4 = STACK[0x1F20];
  STACK[0x3248] = STACK[0x1F20];
  v5 = STACK[0x1F28];
  STACK[0x3B90] = STACK[0x1F28];
  STACK[0x3168] = v1;
  STACK[0x3C58] = STACK[0x33D0];
  v6 = STACK[0x17B0];
  STACK[0x3258] = STACK[0x17B0];
  STACK[0x3C40] = STACK[0x33C8];
  v7 = STACK[0x1B00];
  STACK[0x3B80] = STACK[0x1B00];
  v8 = STACK[0x3810];
  STACK[0x3368] = STACK[0x3810];
  STACK[0x3268] = v2;
  v9 = STACK[0x17A0];
  STACK[0x3B88] = STACK[0x17A0];
  v10 = STACK[0x16C8];
  STACK[0x3B60] = STACK[0x16C8];
  STACK[0x3270] = v3;
  STACK[0x3330] = v5;
  STACK[0x3348] = v8;
  v11 = STACK[0x1B08];
  STACK[0x3208] = STACK[0x1B08];
  v12 = STACK[0x1600];
  STACK[0x3120] = STACK[0x1600];
  v13 = STACK[0x1C90];
  STACK[0x1560] = STACK[0x1C90];
  STACK[0x3C50] = STACK[0x33C0];
  STACK[0x3A70] = STACK[0x36C0];
  STACK[0x3A78] = STACK[0x36B8];
  STACK[0x3C48] = STACK[0x33B8];
  STACK[0x3A80] = STACK[0x36B0];
  STACK[0x3A88] = STACK[0x36A8];
  STACK[0x39C0] = STACK[0x36A0];
  STACK[0x3A90] = STACK[0x3698];
  STACK[0x3A98] = STACK[0x3690];
  v14 = STACK[0x37F0];
  STACK[0x3370] = STACK[0x37F0];
  v15 = STACK[0x15F8];
  STACK[0x31F8] = STACK[0x15F8];
  STACK[0x3800] = v4;
  v16 = STACK[0x30D0];
  STACK[0x3350] = STACK[0x30D0];
  v17 = STACK[0x30D8];
  STACK[0x3300] = STACK[0x30D8];
  v18 = STACK[0x37E8];
  STACK[0x32F8] = STACK[0x37E8];
  v19 = STACK[0x1788];
  STACK[0x3128] = STACK[0x1788];
  STACK[0x3820] = v13;
  v20 = STACK[0x1780];
  STACK[0x3320] = STACK[0x1780];
  STACK[0x3318] = v9;
  STACK[0x3338] = v7;
  v21 = STACK[0x30E0];
  STACK[0x1540] = STACK[0x30E0];
  STACK[0x1550] = v7;
  v22 = STACK[0x3818];
  STACK[0x3358] = STACK[0x3818];
  v23 = STACK[0x1790];
  STACK[0x3B98] = STACK[0x1790];
  v24 = STACK[0x17B8];
  STACK[0x1558] = STACK[0x17B8];
  v25 = STACK[0x1B70];
  STACK[0x3200] = STACK[0x1B70];
  v26 = STACK[0x3808];
  STACK[0x3BC8] = STACK[0x3808];
  v27 = STACK[0x37F8];
  STACK[0x3308] = STACK[0x37F8];
  STACK[0x1548] = v6;
  STACK[0x3360] = v19;
  STACK[0x3340] = v18;
  v28 = STACK[0x1B10];
  STACK[0x3310] = STACK[0x1B10];
  v29 = STACK[0x17C0];
  STACK[0x3290] = STACK[0x17C0];
  v30 = STACK[0x30E8];
  STACK[0x1538] = STACK[0x30E8];
  v31 = STACK[0x36C8];
  STACK[0x3BD0] = STACK[0x36C8];
  STACK[0x3210] = v24;
  STACK[0x3828] = v27;
  STACK[0x3BD8] = v20;
  STACK[0x3218] = v28;
  STACK[0x1530] = v5;
  STACK[0x32E8] = v31;
  v32 = STACK[0x15F0];
  STACK[0x3220] = STACK[0x15F0];
  STACK[0x32F0] = v26;
  STACK[0x1528] = v2;
  STACK[0x3C28] = v24;
  STACK[0x3378] = v22;
  STACK[0x3228] = v12;
  STACK[0x3230] = v21;
  STACK[0x3328] = v11;
  STACK[0x3238] = v29;
  STACK[0x1520] = v15;
  STACK[0x1510] = v1;
  STACK[0x1518] = v16;
  STACK[0x1508] = v3;
  STACK[0x32E0] = v14;
  STACK[0x3160] = v25;
  STACK[0x1500] = v25;
  STACK[0x3250] = v10;
  STACK[0x3260] = v30;
  STACK[0x14F8] = v32;
  STACK[0x14E8] = v23;
  STACK[0x3158] = v15;
  STACK[0x3278] = v13;
  STACK[0x14F0] = v29;
  STACK[0x3280] = v19;
  STACK[0x14B8] = v23;
  STACK[0x14D8] = v4;
  STACK[0x14E0] = v28;
  STACK[0x14D0] = v12;
  STACK[0x14C8] = v11;
  v33 = STACK[0x17A8];
  STACK[0x3C20] = STACK[0x17A8];
  STACK[0x14C0] = v9;
  STACK[0x14A0] = v20;
  STACK[0x3288] = v33;
  STACK[0x1498] = v32;
  STACK[0x31A8] = v6;
  STACK[0x14B0] = v33;
  STACK[0x14A8] = v17;
  STACK[0x1490] = v10;
  return v0();
}

uint64_t sub_1006AFAF8()
{
  char v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v0 = (LODWORD(STACK[0x3834]) >> 3) | (32 * LODWORD(STACK[0x3834]));
  STACK[0x3C78] = *(_QWORD *)(STACK[0x3C70]
                            + 8
                            * ((13705
                              * ((*(_BYTE *)(STACK[0x3C18]
                                           + 4647 * (v0 & 0x9F | 0x40)
                                           + 15539568
                                           - 6784
                                           * (((1266205
                                                            * (unint64_t)(4647 * (v0 & 0x9F | 0x40u) + 15539568)) >> 32) >> 1)) & 1) == 0)) ^ (LODWORD(STACK[0x3710]) - 10112)));
  LODWORD(STACK[0x2F64]) = 85;
  LODWORD(STACK[0x3C08]) = 6;
  LODWORD(STACK[0x27FC]) = 84;
  LODWORD(STACK[0x156C]) = 86;
  v1 = STACK[0x1F18];
  STACK[0x3240] = STACK[0x1F18];
  v2 = STACK[0x1F10];
  STACK[0x3C68] = STACK[0x1F10];
  v3 = STACK[0x1798];
  STACK[0x3C60] = STACK[0x1798];
  v4 = STACK[0x1F20];
  STACK[0x3248] = STACK[0x1F20];
  v5 = v4;
  v6 = STACK[0x1F28];
  STACK[0x3B90] = STACK[0x1F28];
  v7 = v6;
  STACK[0x3168] = v1;
  STACK[0x3C58] = STACK[0x33D0];
  v8 = STACK[0x17B0];
  STACK[0x3258] = STACK[0x17B0];
  STACK[0x3C40] = STACK[0x33C8];
  v9 = STACK[0x1B00];
  STACK[0x3B80] = STACK[0x1B00];
  v10 = STACK[0x3810];
  STACK[0x3368] = STACK[0x3810];
  STACK[0x3268] = v2;
  v11 = STACK[0x17A0];
  STACK[0x3B88] = STACK[0x17A0];
  STACK[0x3B60] = STACK[0x16C8];
  STACK[0x3270] = v3;
  STACK[0x3330] = v6;
  STACK[0x3348] = v10;
  STACK[0x3C50] = STACK[0x33C0];
  STACK[0x3A70] = STACK[0x36C0];
  STACK[0x3A78] = STACK[0x36B8];
  STACK[0x3C48] = STACK[0x33B8];
  STACK[0x3A80] = STACK[0x36B0];
  STACK[0x3A88] = STACK[0x36A8];
  STACK[0x39C0] = STACK[0x36A0];
  STACK[0x3A90] = STACK[0x3698];
  STACK[0x3A98] = STACK[0x3690];
  v12 = STACK[0x1B08];
  STACK[0x3208] = STACK[0x1B08];
  v13 = STACK[0x1600];
  STACK[0x3120] = STACK[0x1600];
  v14 = STACK[0x1C90];
  STACK[0x1560] = STACK[0x1C90];
  v15 = STACK[0x37F0];
  STACK[0x3370] = STACK[0x37F0];
  v16 = STACK[0x15F8];
  STACK[0x31F8] = STACK[0x15F8];
  v17 = v5;
  STACK[0x3800] = v5;
  v18 = STACK[0x30D0];
  STACK[0x3350] = STACK[0x30D0];
  v19 = STACK[0x30D8];
  STACK[0x3300] = STACK[0x30D8];
  v20 = STACK[0x37E8];
  STACK[0x32F8] = STACK[0x37E8];
  v21 = STACK[0x1788];
  STACK[0x3128] = STACK[0x1788];
  STACK[0x3820] = v14;
  v22 = STACK[0x1780];
  STACK[0x3320] = STACK[0x1780];
  STACK[0x3318] = v11;
  STACK[0x3338] = v9;
  v23 = STACK[0x30E0];
  STACK[0x1540] = STACK[0x30E0];
  STACK[0x1550] = v9;
  v24 = STACK[0x3818];
  STACK[0x3358] = STACK[0x3818];
  v25 = STACK[0x1790];
  STACK[0x3B98] = STACK[0x1790];
  v26 = STACK[0x17B8];
  STACK[0x1558] = STACK[0x17B8];
  v27 = STACK[0x1B70];
  STACK[0x3200] = STACK[0x1B70];
  v28 = STACK[0x3808];
  STACK[0x3BC8] = STACK[0x3808];
  v29 = STACK[0x37F8];
  STACK[0x3308] = STACK[0x37F8];
  STACK[0x1548] = v8;
  STACK[0x3360] = v21;
  STACK[0x3340] = v20;
  v30 = STACK[0x1B10];
  STACK[0x3310] = STACK[0x1B10];
  v31 = STACK[0x17C0];
  STACK[0x3290] = STACK[0x17C0];
  v32 = STACK[0x30E8];
  STACK[0x1538] = STACK[0x30E8];
  v33 = STACK[0x36C8];
  STACK[0x3BD0] = STACK[0x36C8];
  STACK[0x3210] = v26;
  STACK[0x3828] = v29;
  STACK[0x3BD8] = v22;
  STACK[0x3218] = v30;
  STACK[0x1530] = v7;
  STACK[0x32E8] = v33;
  v34 = STACK[0x15F0];
  STACK[0x3220] = STACK[0x15F0];
  STACK[0x32F0] = v28;
  STACK[0x1528] = v2;
  STACK[0x3C28] = v26;
  STACK[0x3378] = v24;
  STACK[0x3228] = v13;
  STACK[0x3230] = v23;
  STACK[0x3328] = v12;
  STACK[0x3238] = v31;
  STACK[0x1520] = v16;
  v35 = v1;
  STACK[0x1510] = v1;
  STACK[0x1518] = v18;
  STACK[0x1508] = v3;
  STACK[0x32E0] = v15;
  STACK[0x3160] = v27;
  STACK[0x1500] = v27;
  v36 = STACK[0x16C8];
  STACK[0x3250] = STACK[0x16C8];
  STACK[0x3260] = v32;
  STACK[0x14F8] = v34;
  STACK[0x14E8] = v25;
  STACK[0x3158] = v16;
  STACK[0x3278] = v14;
  STACK[0x14F0] = v31;
  STACK[0x3280] = v21;
  v37 = v21;
  STACK[0x14B8] = v25;
  STACK[0x14D8] = v17;
  STACK[0x14E0] = v30;
  STACK[0x14D0] = v13;
  STACK[0x14C8] = v12;
  v38 = STACK[0x17A8];
  STACK[0x3C20] = STACK[0x17A8];
  STACK[0x14C0] = v11;
  STACK[0x14A0] = v22;
  v39 = v22;
  STACK[0x3288] = v38;
  STACK[0x1498] = v34;
  STACK[0x31A8] = v8;
  v40 = v8;
  STACK[0x17B0] = v8;
  STACK[0x14B0] = v38;
  STACK[0x14A8] = v19;
  STACK[0x1490] = v36;
  LODWORD(STACK[0x3590]) = STACK[0x3710];
  STACK[0x3888] = v35;
  v41 = STACK[0x27A0];
  STACK[0x3B58] = STACK[0x27A0];
  STACK[0x3988] = v17;
  STACK[0x3A28] = v7;
  STACK[0x3688] = STACK[0x39E0];
  STACK[0x2FE8] = v31;
  STACK[0x2FE0] = v26;
  STACK[0x3AB8] = v40;
  STACK[0x2FC8] = v13;
  STACK[0x2FD8] = STACK[0x23F8];
  STACK[0x2FF0] = STACK[0x15D8];
  STACK[0x2FC0] = v30;
  STACK[0x3A68] = v9;
  STACK[0x3980] = STACK[0x3810];
  STACK[0x3A20] = v2;
  STACK[0x3A48] = v11;
  STACK[0x2FB0] = STACK[0x1590];
  STACK[0x3A60] = v3;
  STACK[0x2FA8] = STACK[0x23C8];
  STACK[0x2FA0] = v12;
  STACK[0x2FB8] = STACK[0x15C8];
  STACK[0x2FD0] = STACK[0x15A8];
  STACK[0x3A50] = v12;
  STACK[0x3680] = STACK[0x39E8];
  STACK[0x3AB0] = v16;
  v42 = v16;
  STACK[0x2F90] = v34;
  STACK[0x3A18] = v18;
  STACK[0x39B0] = v19;
  STACK[0x3668] = STACK[0x39D8];
  STACK[0x3978] = v20;
  STACK[0x2F88] = v27;
  STACK[0x3678] = STACK[0x39F8];
  STACK[0x3670] = STACK[0x3860];
  STACK[0x2F78] = v35;
  STACK[0x2F98] = STACK[0x15D0];
  STACK[0x3960] = v24;
  STACK[0x2F80] = v21;
  STACK[0x3A38] = v25;
  STACK[0x3AA8] = v27;
  STACK[0x3970] = v29;
  STACK[0x3660] = STACK[0x3838];
  STACK[0x2F70] = v41;
  STACK[0x2F68] = STACK[0x1598];
  STACK[0x3658] = STACK[0x39D0];
  STACK[0x3650] = STACK[0x3840];
  STACK[0x2F50] = STACK[0x23F0];
  v43 = STACK[0x27E8];
  STACK[0x3B50] = STACK[0x27E8];
  v44 = STACK[0x27C0];
  STACK[0x3108] = STACK[0x27C0];
  STACK[0x2F48] = v11;
  STACK[0x2F40] = STACK[0x23D0];
  STACK[0x2F38] = v44;
  STACK[0x3640] = STACK[0x39C8];
  STACK[0x3648] = STACK[0x3BA8];
  STACK[0x3638] = STACK[0x3848];
  STACK[0x39A8] = v26;
  STACK[0x3630] = STACK[0x3A00];
  v45 = v39;
  STACK[0x3AA0] = v39;
  STACK[0x3A40] = v30;
  STACK[0x2F58] = STACK[0x15B0];
  STACK[0x3628] = STACK[0x3A10];
  STACK[0x3958] = STACK[0x36C8];
  v46 = STACK[0x27F0];
  STACK[0x3178] = STACK[0x27F0];
  STACK[0x3A30] = v34;
  STACK[0x3618] = STACK[0x3868];
  STACK[0x3610] = STACK[0x39F0];
  STACK[0x3968] = STACK[0x3808];
  STACK[0x3620] = STACK[0x3850];
  STACK[0x2F30] = STACK[0x2400];
  STACK[0x3608] = STACK[0x3858];
  STACK[0x3600] = STACK[0x3870];
  v47 = STACK[0x27C8];
  STACK[0x30F8] = STACK[0x27C8];
  STACK[0x2F28] = v43;
  STACK[0x35F8] = STACK[0x3A08];
  v48 = STACK[0x27B0];
  STACK[0x3100] = STACK[0x27B0];
  v49 = STACK[0x27D8];
  STACK[0x2F20] = STACK[0x27D8];
  STACK[0x39A0] = v13;
  v50 = STACK[0x27D0];
  STACK[0x3118] = STACK[0x27D0];
  STACK[0x3948] = STACK[0x30E0];
  STACK[0x3998] = v31;
  STACK[0x3950] = STACK[0x37F0];
  STACK[0x2F10] = STACK[0x2418];
  STACK[0x2F08] = v46;
  v51 = STACK[0x27A8];
  STACK[0x2F18] = STACK[0x27A8];
  STACK[0x35F0] = STACK[0x3AD0];
  STACK[0x2F00] = STACK[0x23E0];
  v52 = STACK[0x17A8];
  STACK[0x2EF8] = STACK[0x17A8];
  STACK[0x35E8] = STACK[0x3AD8];
  STACK[0x35E0] = STACK[0x3AE0];
  STACK[0x35D8] = STACK[0x3AE8];
  STACK[0x39B8] = v36;
  STACK[0x3940] = STACK[0x30E8];
  STACK[0x2EE8] = v36;
  STACK[0x2EF0] = v14;
  STACK[0x2ED8] = v25;
  STACK[0x3990] = v14;
  STACK[0x2EE0] = v9;
  STACK[0x35D0] = STACK[0x3AF0];
  STACK[0x2ED0] = STACK[0x15B8];
  STACK[0x3B48] = v51;
  STACK[0x2EC0] = v48;
  v53 = STACK[0x27B8];
  STACK[0x2EB8] = STACK[0x27B8];
  STACK[0x3A58] = v37;
  STACK[0x2EC8] = STACK[0x1588];
  STACK[0x2EB0] = STACK[0x23D8];
  STACK[0x30F0] = v53;
  STACK[0x3B40] = v49;
  STACK[0x2EA8] = STACK[0x2410];
  STACK[0x2EA0] = v42;
  v54 = STACK[0x27E0];
  STACK[0x3110] = STACK[0x27E0];
  STACK[0x2E98] = STACK[0x15C0];
  STACK[0x35C8] = STACK[0x3AF8];
  STACK[0x35C0] = STACK[0x3B08];
  STACK[0x35B8] = STACK[0x3B00];
  STACK[0x35B0] = STACK[0x3B10];
  STACK[0x35A8] = STACK[0x3B18];
  STACK[0x2E90] = STACK[0x23E8];
  STACK[0x37E0] = v52;
  STACK[0x35A0] = STACK[0x3B20];
  STACK[0x2E88] = STACK[0x1F28];
  STACK[0x2E78] = v50;
  STACK[0x3598] = STACK[0x3B30];
  STACK[0x2E70] = STACK[0x1F20];
  STACK[0x2E68] = STACK[0x17B0];
  STACK[0x3588] = STACK[0x3B28];
  STACK[0x2E60] = STACK[0x2408];
  STACK[0x2E58] = v47;
  STACK[0x2E80] = STACK[0x15A0];
  STACK[0x2E50] = v45;
  STACK[0x3580] = STACK[0x3B38];
  STACK[0x2E48] = v54;
  return ((uint64_t (*)(void))STACK[0x3C78])();
}

uint64_t sub_1006B0140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, int a12, int a13, int a14, unsigned int a15, unsigned int a16, int a17, int a18, unsigned int a19, int a20,unsigned int a21,unsigned int a22,int a23,unsigned int a24,unsigned int a25,int a26,unsigned int a27,unsigned int a28,unsigned int a29,int a30,int a31,int a32,int a33,int a34,int a35,char a36,int a37,int a38,unsigned int a39,unsigned int a40,unsigned int a41,int a42,int a43,int a44,int a45,int a46,unsigned int a47,unsigned __int8 a48,int a49,uint64_t a50,unsigned int a51,int a52,int a53,uint64_t a54,uint64_t a55,unsigned int a56,int a57,int a58,uint64_t a59,int a60,int a61,int a62,int a63)
{
  unsigned int a64;
  unsigned int a65;
  unsigned int a66;
  unsigned int a67;
  int a69;
  int a73;
  unsigned int a74;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v159;

  v74 = STACK[0x1F18];
  STACK[0x3888] = STACK[0x1F18];
  v75 = STACK[0x1F20];
  STACK[0x3988] = STACK[0x1F20];
  v76 = STACK[0x1F28];
  v77 = STACK[0x17B0];
  v78 = STACK[0x17B0];
  v79 = STACK[0x1B00];
  STACK[0x3368] = STACK[0x3810];
  v80 = STACK[0x1F10];
  v81 = STACK[0x17A0];
  STACK[0x3C60] = STACK[0x1798];
  v82 = STACK[0x1B08];
  v83 = STACK[0x15F8];
  v84 = STACK[0x15F8];
  STACK[0x3350] = STACK[0x30D0];
  STACK[0x3300] = STACK[0x30D8];
  STACK[0x32F8] = STACK[0x37E8];
  STACK[0x3358] = STACK[0x3818];
  STACK[0x3B98] = STACK[0x1790];
  v85 = STACK[0x1B70];
  v86 = STACK[0x1B70];
  STACK[0x3308] = STACK[0x37F8];
  v87 = STACK[0x17B8];
  v88 = STACK[0x17B8];
  STACK[0x3BD8] = STACK[0x1780];
  v89 = STACK[0x1B10];
  STACK[0x32E8] = STACK[0x36C8];
  v90 = STACK[0x15F0];
  STACK[0x32F0] = STACK[0x3808];
  v91 = STACK[0x1600];
  v92 = STACK[0x1600];
  v93 = STACK[0x17C0];
  v94 = STACK[0x17C0];
  v95 = STACK[0x37F0];
  v96 = STACK[0x16C8];
  v97 = STACK[0x16C8];
  v98 = STACK[0x1C90];
  v99 = STACK[0x1C90];
  v100 = STACK[0x1788];
  v101 = STACK[0x17A8];
  STACK[0x37E0] = STACK[0x17A8];
  STACK[0x3A58] = v100;
  STACK[0x3990] = v99;
  STACK[0x3998] = v94;
  STACK[0x39A0] = v92;
  STACK[0x39A8] = v88;
  STACK[0x39B8] = v97;
  STACK[0x3A30] = v90;
  STACK[0x3A40] = v89;
  STACK[0x3AA8] = v86;
  STACK[0x3A50] = v82;
  STACK[0x3AB0] = v84;
  STACK[0x3AB8] = v78;
  STACK[0x1F18] = v74;
  STACK[0x17A8] = v101;
  STACK[0x17B0] = v77;
  STACK[0x1F20] = v75;
  STACK[0x1C90] = v98;
  STACK[0x1B70] = v85;
  STACK[0x17B8] = v87;
  STACK[0x15F8] = v83;
  STACK[0x16C8] = v96;
  STACK[0x1600] = v91;
  STACK[0x17C0] = v93;
  LODWORD(v93) = 4647 * ((((2 * a36) & 0xDF) + (a36 ^ 0x6F)) ^ 0x36) + 17937420;
  LODWORD(v74) = a26;
  v102 = STACK[0x3C18];
  LODWORD(v93) = *(unsigned __int8 *)(STACK[0x3C18]
                                    + v93
                                    - 6784
                                    * (((1266205 * (unint64_t)v93) >> 32) >> 1)) ^ 0xE;
  LODWORD(v142) = (v93 >> 3) | (32 * v93);
  LODWORD(v93) = 4647 * (a48 ^ 0xB8)
               + 9544938
               - 6784 * (((1266205 * (unint64_t)(4647 * (a48 ^ 0xB8u) + 9544938)) >> 32) >> 1);
  LODWORD(v153) = v74;
  LODWORD(v147) = a10;
  v134 = __PAIR64__(a41, a11);
  HIDWORD(v149) = a33;
  LODWORD(v74) = a46;
  LODWORD(v152) = a34;
  LODWORD(v146) = a30;
  LODWORD(v144) = a43;
  LODWORD(v83) = a62;
  v159 = __PAIR64__(a51, a27);
  HIDWORD(v142) = a18;
  LODWORD(v138) = a12;
  LODWORD(v135) = a14;
  LODWORD(v136) = a49;
  HIDWORD(v153) = a32;
  v145 = __PAIR64__(v74, a40);
  LODWORD(v78) = a45;
  LODWORD(v149) = a44;
  v151 = __PAIR64__(a29, a16);
  HIDWORD(v143) = a38;
  v148 = __PAIR64__(a19, a39);
  HIDWORD(v138) = a37;
  HIDWORD(v147) = a35;
  HIDWORD(v146) = a17;
  v137 = __PAIR64__(a65, v78);
  v150 = __PAIR64__(v83, a47);
  LODWORD(STACK[0x3834]) = a73;
  LODWORD(v83) = HIDWORD(a59);
  HIDWORD(a59) = a60;
  v157 = a28;
  LODWORD(v143) = a53;
  v156 = a21;
  v139 = __PAIR64__(a24, v83);
  v155 = a25;
  v141 = __PAIR64__(a22, a56);
  v140 = __PAIR64__(a74, HIDWORD(a55));
  HIDWORD(a55) = a58;
  LODWORD(v93) = *(unsigned __int8 *)(v102 + v93);
  v154 = a15;
  HIDWORD(v136) = a69;
  LODWORD(v102) = STACK[0x3710];
  STACK[0x3C68] = *(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 10456));
  STACK[0x3A28] = v76;
  STACK[0x3568] = STACK[0x3130];
  STACK[0x3A68] = v79;
  STACK[0x3980] = STACK[0x3368];
  STACK[0x3A20] = v80;
  STACK[0x3560] = STACK[0x3138];
  STACK[0x3A48] = v81;
  STACK[0x3A60] = STACK[0x3C60];
  STACK[0x3558] = STACK[0x3140];
  STACK[0x3550] = STACK[0x3148];
  STACK[0x3A18] = STACK[0x3350];
  STACK[0x39B0] = STACK[0x3300];
  STACK[0x3978] = STACK[0x32F8];
  STACK[0x3960] = STACK[0x3358];
  STACK[0x3A38] = STACK[0x3B98];
  STACK[0x3970] = STACK[0x3308];
  STACK[0x3548] = STACK[0x3180];
  STACK[0x3AA0] = STACK[0x3BD8];
  STACK[0x3958] = STACK[0x32E8];
  STACK[0x3968] = STACK[0x32F0];
  STACK[0x3948] = STACK[0x30E0];
  STACK[0x3950] = v95;
  STACK[0x3940] = STACK[0x30E8];
  HIDWORD(v152) = a31;
  HIDWORD(v135) = ((v93 - 87) ^ 0xFFFFFFFB) + 85;
  STACK[0x3C00] = 24;
  HIDWORD(v144) = 254;
  LODWORD(STACK[0x37D8]) = 90;
  LODWORD(STACK[0x3AC0]) = v102;
  v103 = STACK[0x3868];
  STACK[0x3688] = STACK[0x3868];
  v104 = STACK[0x3850];
  v105 = STACK[0x3B38];
  STACK[0x3880] = STACK[0x3B38];
  v106 = STACK[0x39D8];
  STACK[0x38F8] = STACK[0x39D8];
  v107 = STACK[0x3AE8];
  STACK[0x38F0] = STACK[0x3AE8];
  v108 = STACK[0x3B18];
  STACK[0x33E0] = STACK[0x3B18];
  v109 = STACK[0x3870];
  v110 = STACK[0x3AD8];
  STACK[0x3920] = STACK[0x3AD8];
  v111 = STACK[0x3858];
  STACK[0x3918] = STACK[0x3858];
  STACK[0x3938] = v107;
  v112 = STACK[0x3860];
  STACK[0x3930] = STACK[0x3860];
  v113 = STACK[0x3B30];
  STACK[0x3878] = STACK[0x3B30];
  v114 = STACK[0x3B28];
  STACK[0x3450] = STACK[0x3B28];
  v115 = STACK[0x3848];
  STACK[0x3C38] = STACK[0x3848];
  v116 = STACK[0x3838];
  STACK[0x3928] = STACK[0x3838];
  v117 = STACK[0x3AF8];
  STACK[0x3448] = STACK[0x3AF8];
  v118 = STACK[0x3AF0];
  STACK[0x3BB0] = STACK[0x3AF0];
  STACK[0x37D0] = v110;
  STACK[0x37C8] = v117;
  v119 = STACK[0x3840];
  STACK[0x3908] = STACK[0x3840];
  STACK[0x37C0] = v108;
  v120 = STACK[0x3AE0];
  STACK[0x3900] = STACK[0x3AE0];
  STACK[0x3440] = v108;
  STACK[0x37B8] = v118;
  STACK[0x38E8] = v103;
  STACK[0x3910] = v109;
  STACK[0x37B0] = v114;
  v121 = STACK[0x39E8];
  STACK[0x37A8] = STACK[0x39E8];
  STACK[0x37A0] = v106;
  STACK[0x3438] = v119;
  STACK[0x3798] = v121;
  STACK[0x3BF8] = v121;
  STACK[0x3398] = v114;
  STACK[0x33B0] = v120;
  STACK[0x3790] = v108;
  STACK[0x3788] = v111;
  STACK[0x3388] = v119;
  v122 = STACK[0x3AD0];
  STACK[0x3540] = STACK[0x3AD0];
  v123 = STACK[0x39E0];
  STACK[0x38E0] = STACK[0x39E0];
  v124 = STACK[0x39C8];
  STACK[0x3780] = STACK[0x39C8];
  v125 = STACK[0x3B10];
  STACK[0x38B0] = STACK[0x3B10];
  v126 = STACK[0x39F0];
  STACK[0x3778] = STACK[0x39F0];
  STACK[0x38D0] = v104;
  STACK[0x38D8] = v116;
  STACK[0x38C8] = STACK[0x3A10];
  v127 = STACK[0x3BA8];
  STACK[0x3770] = STACK[0x3BA8];
  v128 = STACK[0x3A08];
  STACK[0x38C0] = STACK[0x3A08];
  STACK[0x3768] = STACK[0x39D0];
  v129 = STACK[0x3B00];
  STACK[0x3760] = STACK[0x3B00];
  v130 = STACK[0x39F8];
  STACK[0x3758] = STACK[0x39F8];
  STACK[0x33D8] = v123;
  STACK[0x3BE8] = v128;
  STACK[0x3748] = v123;
  STACK[0x3BF0] = v121;
  STACK[0x3740] = v130;
  STACK[0x3738] = v122;
  STACK[0x38B8] = v113;
  v131 = STACK[0x3B20];
  STACK[0x3750] = STACK[0x3B20];
  STACK[0x3570] = v122;
  v132 = STACK[0x3B08];
  STACK[0x38A8] = STACK[0x3B08];
  STACK[0x38A0] = v132;
  STACK[0x3C78] = v128;
  STACK[0x3730] = v120;
  STACK[0x3728] = v125;
  STACK[0x3720] = v117;
  STACK[0x3718] = v112;
  STACK[0x3380] = v120;
  STACK[0x3700] = v114;
  STACK[0x36F8] = v126;
  STACK[0x3898] = v131;
  STACK[0x3BE0] = v118;
  STACK[0x3708] = v105;
  STACK[0x36E8] = v124;
  STACK[0x3890] = v129;
  STACK[0x36E0] = v122;
  STACK[0x36F0] = v127;
  STACK[0x3390] = v123;
  STACK[0x36D8] = v119;
  STACK[0x33A8] = v117;
  STACK[0x3C30] = v115;
  STACK[0x36D0] = STACK[0x3A00];
  return ((uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, _QWORD, unint64_t))STACK[0x3C68])(v117, v128, v104, v122, v124, v115, v115, v119, a9, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143,
           v144,
           v145,
           v146,
           v147,
           v148,
           v149,
           v150,
           v151,
           v152,
           v153,
           v154,
           v155,
           v156,
           v157,
           a55,
           __PAIR64__(a64, a67),
           a50,
           a59,
           a66,
           v159);
}

uint64_t sub_1006B07C4()
{
  int v0;
  uint64_t (*v1)(void);
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v0 = STACK[0x3710];
  v1 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 1662)) - 4);
  LODWORD(STACK[0x2F64]) = 92;
  LODWORD(STACK[0x3C08]) = 6;
  LODWORD(STACK[0x3590]) = v0;
  v2 = STACK[0x1C90];
  STACK[0x3B58] = STACK[0x1C90];
  v3 = STACK[0x17C0];
  STACK[0x3688] = STACK[0x17C0];
  STACK[0x2FE8] = v3;
  v4 = STACK[0x17B8];
  STACK[0x2FE0] = STACK[0x17B8];
  STACK[0x3C58] = STACK[0x33D0];
  v5 = STACK[0x1600];
  STACK[0x3120] = STACK[0x1600];
  v6 = STACK[0x1B70];
  STACK[0x3160] = STACK[0x1B70];
  STACK[0x3C40] = STACK[0x33C8];
  STACK[0x2FC8] = v5;
  v7 = STACK[0x1788];
  STACK[0x2FD8] = STACK[0x1788];
  v8 = STACK[0x37E8];
  STACK[0x2FF0] = STACK[0x37E8];
  v9 = STACK[0x1B10];
  STACK[0x2FC0] = STACK[0x1B10];
  v10 = STACK[0x30E8];
  STACK[0x2FB0] = STACK[0x30E8];
  v11 = STACK[0x15F0];
  STACK[0x2FA8] = STACK[0x15F0];
  v12 = STACK[0x1B08];
  STACK[0x2FA0] = STACK[0x1B08];
  v13 = STACK[0x30D8];
  STACK[0x2FB8] = STACK[0x30D8];
  v14 = STACK[0x37F0];
  STACK[0x2FD0] = STACK[0x37F0];
  v15 = STACK[0x15F8];
  STACK[0x3680] = STACK[0x15F8];
  STACK[0x3C50] = STACK[0x33C0];
  STACK[0x3A70] = STACK[0x36C0];
  STACK[0x3A78] = STACK[0x36B8];
  STACK[0x3C48] = STACK[0x33B8];
  STACK[0x3A80] = STACK[0x36B0];
  STACK[0x3A88] = STACK[0x36A8];
  STACK[0x39C0] = STACK[0x36A0];
  STACK[0x3A90] = STACK[0x3698];
  STACK[0x3A98] = STACK[0x3690];
  STACK[0x2F90] = v11;
  v16 = STACK[0x1798];
  STACK[0x3668] = STACK[0x1798];
  STACK[0x2F88] = v6;
  v17 = STACK[0x30D0];
  STACK[0x3678] = STACK[0x30D0];
  STACK[0x3670] = v8;
  STACK[0x3820] = v2;
  v18 = STACK[0x1F18];
  STACK[0x2F78] = STACK[0x1F18];
  v19 = STACK[0x3810];
  STACK[0x2F98] = STACK[0x3810];
  STACK[0x2F80] = v7;
  STACK[0x3290] = v3;
  STACK[0x3660] = v14;
  STACK[0x2F70] = v2;
  v20 = STACK[0x30E0];
  STACK[0x2F68] = STACK[0x30E0];
  STACK[0x3658] = v11;
  STACK[0x3650] = v4;
  v21 = STACK[0x1780];
  STACK[0x2F50] = STACK[0x1780];
  v22 = STACK[0x16C8];
  STACK[0x3B50] = STACK[0x16C8];
  v23 = STACK[0x17B0];
  STACK[0x3108] = STACK[0x17B0];
  v24 = STACK[0x17A0];
  STACK[0x2F48] = STACK[0x17A0];
  STACK[0x2F40] = v24;
  STACK[0x2F38] = v23;
  v25 = STACK[0x1790];
  STACK[0x3640] = STACK[0x1790];
  STACK[0x3648] = v19;
  v26 = STACK[0x17A8];
  STACK[0x3638] = STACK[0x17A8];
  STACK[0x3630] = v21;
  STACK[0x2F58] = v17;
  STACK[0x3628] = v20;
  STACK[0x3178] = v18;
  v27 = STACK[0x1B00];
  STACK[0x3618] = STACK[0x1B00];
  STACK[0x3610] = v24;
  STACK[0x3620] = v13;
  STACK[0x31A8] = v23;
  STACK[0x2F30] = v27;
  STACK[0x3608] = v12;
  v28 = STACK[0x3818];
  STACK[0x3600] = STACK[0x3818];
  STACK[0x30F8] = v5;
  STACK[0x2F28] = v22;
  STACK[0x35F8] = v2;
  v29 = STACK[0x1F20];
  STACK[0x3100] = STACK[0x1F20];
  STACK[0x2F20] = v26;
  STACK[0x3C60] = v16;
  STACK[0x3118] = v6;
  STACK[0x3C20] = v26;
  STACK[0x3168] = v18;
  v30 = STACK[0x1F10];
  STACK[0x2F10] = STACK[0x1F10];
  STACK[0x2F08] = v18;
  STACK[0x2F18] = v4;
  STACK[0x35F0] = v5;
  STACK[0x3C28] = v4;
  STACK[0x2F00] = v16;
  STACK[0x2EF8] = v26;
  STACK[0x35E8] = v30;
  STACK[0x35E0] = v6;
  STACK[0x35D8] = v7;
  STACK[0x2EE8] = v22;
  STACK[0x2EF0] = v2;
  STACK[0x2ED8] = v25;
  STACK[0x2EE0] = v27;
  STACK[0x35D0] = v22;
  STACK[0x2ED0] = v28;
  STACK[0x3B48] = v4;
  STACK[0x2EC0] = v29;
  STACK[0x2EB8] = v15;
  STACK[0x3B60] = v22;
  v31 = STACK[0x36C8];
  STACK[0x2EC8] = STACK[0x36C8];
  STACK[0x2EB0] = v12;
  STACK[0x30F0] = v15;
  STACK[0x3B40] = v26;
  STACK[0x2EA8] = v9;
  STACK[0x2EA0] = v15;
  STACK[0x3110] = v3;
  v32 = STACK[0x3808];
  STACK[0x2E98] = STACK[0x3808];
  STACK[0x35C8] = v23;
  STACK[0x35C0] = v10;
  v33 = STACK[0x1F28];
  STACK[0x35B8] = STACK[0x1F28];
  STACK[0x3800] = v29;
  STACK[0x35B0] = v9;
  STACK[0x3158] = v15;
  STACK[0x35A8] = v18;
  STACK[0x2E90] = v33;
  v34 = STACK[0x37F8];
  STACK[0x35A0] = STACK[0x37F8];
  STACK[0x2E88] = v33;
  STACK[0x2E78] = v6;
  STACK[0x3C68] = v30;
  STACK[0x3598] = v31;
  STACK[0x2E70] = v29;
  STACK[0x2E68] = v23;
  STACK[0x3588] = v29;
  STACK[0x2E60] = v25;
  STACK[0x2E58] = v5;
  STACK[0x2E80] = v34;
  STACK[0x2E50] = v21;
  STACK[0x3580] = v32;
  STACK[0x2E48] = v3;
  return v1();
}

uint64_t sub_1006B0A84()
{
  int v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;

  v0 = ~(2 * LODWORD(STACK[0x3834])) & 0x80 | 0x59;
  v1 = *(unsigned __int8 *)(STACK[0x3C18]
                          + 4647 * v0
                          + 19140993
                          - 6784
                          * (((1266205 * (unint64_t)(4647 * v0 + 19140993)) >> 32) >> 1));
  v2 = 4096;
  if ((STACK[0x16C8] & 0x1000) != 0)
    v2 = -4096;
  v3 = v2 + STACK[0x16C8];
  STACK[0x3C78] = *(_QWORD *)(STACK[0x3C70] + 8 * ((13705 * (v1 == 39)) ^ (LODWORD(STACK[0x3710]) - 10112)));
  STACK[0x3B60] = v3 ^ 0x1000;
  LODWORD(STACK[0x2F64]) = 93;
  LODWORD(STACK[0x3C08]) = 6;
  LODWORD(STACK[0x27FC]) = 92;
  LODWORD(STACK[0x156C]) = 94;
  STACK[0x3240] = STACK[0x3888];
  v4 = STACK[0x1F10];
  STACK[0x3C68] = STACK[0x1F10];
  v5 = STACK[0x1798];
  STACK[0x3C60] = STACK[0x1798];
  STACK[0x3248] = STACK[0x3988];
  STACK[0x3B90] = STACK[0x3A28];
  v6 = STACK[0x17C0];
  STACK[0x39E0] = STACK[0x17C0];
  STACK[0x3168] = STACK[0x1F18];
  STACK[0x3C58] = STACK[0x33D0];
  STACK[0x3258] = STACK[0x3AB8];
  STACK[0x3C40] = STACK[0x33C8];
  STACK[0x3B80] = STACK[0x3A68];
  STACK[0x3368] = STACK[0x3980];
  STACK[0x3268] = STACK[0x3A20];
  STACK[0x3B88] = STACK[0x3A48];
  STACK[0x3270] = STACK[0x3A60];
  v7 = STACK[0x1F28];
  STACK[0x3330] = STACK[0x1F28];
  STACK[0x3C50] = STACK[0x33C0];
  STACK[0x3A70] = STACK[0x36C0];
  STACK[0x3A78] = STACK[0x36B8];
  STACK[0x3C48] = STACK[0x33B8];
  STACK[0x3A80] = STACK[0x36B0];
  STACK[0x3A88] = STACK[0x36A8];
  STACK[0x39C0] = STACK[0x36A0];
  STACK[0x3A90] = STACK[0x3698];
  STACK[0x3A98] = STACK[0x3690];
  v8 = STACK[0x3810];
  STACK[0x3348] = STACK[0x3810];
  v9 = v8;
  STACK[0x3208] = STACK[0x3A50];
  v10 = STACK[0x1600];
  STACK[0x3120] = STACK[0x1600];
  v11 = STACK[0x15F8];
  STACK[0x39E8] = STACK[0x15F8];
  v12 = STACK[0x1C90];
  STACK[0x1560] = STACK[0x1C90];
  v13 = STACK[0x37F0];
  STACK[0x3370] = STACK[0x37F0];
  STACK[0x31F8] = STACK[0x3AB0];
  v14 = STACK[0x1F20];
  STACK[0x3800] = STACK[0x1F20];
  STACK[0x3350] = STACK[0x3A18];
  STACK[0x3300] = STACK[0x39B0];
  STACK[0x39D8] = v5;
  STACK[0x32F8] = STACK[0x3978];
  v15 = STACK[0x1788];
  STACK[0x3128] = STACK[0x1788];
  STACK[0x3820] = v12;
  STACK[0x1C90] = v12;
  v16 = STACK[0x30D0];
  STACK[0x39F8] = STACK[0x30D0];
  v17 = STACK[0x1780];
  STACK[0x3320] = STACK[0x1780];
  v18 = v17;
  v19 = STACK[0x37E8];
  STACK[0x3860] = STACK[0x37E8];
  v20 = STACK[0x17A0];
  STACK[0x3318] = STACK[0x17A0];
  v21 = STACK[0x1B00];
  STACK[0x3338] = STACK[0x1B00];
  v22 = STACK[0x30E0];
  STACK[0x1540] = STACK[0x30E0];
  v23 = v22;
  STACK[0x1550] = v21;
  STACK[0x1B00] = v21;
  STACK[0x3358] = STACK[0x3960];
  STACK[0x3B98] = STACK[0x3A38];
  v24 = STACK[0x17B8];
  STACK[0x1558] = STACK[0x17B8];
  STACK[0x3200] = STACK[0x3AA8];
  v25 = STACK[0x3808];
  STACK[0x3BC8] = STACK[0x3808];
  STACK[0x3308] = STACK[0x3970];
  v26 = STACK[0x17B0];
  STACK[0x1548] = STACK[0x17B0];
  STACK[0x3838] = v13;
  STACK[0x3360] = v15;
  v27 = STACK[0x15F0];
  STACK[0x39D0] = STACK[0x15F0];
  STACK[0x3840] = v24;
  STACK[0x3340] = v19;
  v28 = STACK[0x1B10];
  STACK[0x3310] = STACK[0x1B10];
  STACK[0x3290] = v6;
  v29 = STACK[0x30E8];
  STACK[0x1538] = STACK[0x30E8];
  v30 = STACK[0x36C8];
  STACK[0x3BD0] = STACK[0x36C8];
  v31 = STACK[0x1790];
  STACK[0x39C8] = STACK[0x1790];
  STACK[0x3BA8] = v9;
  v32 = STACK[0x17A8];
  STACK[0x3848] = STACK[0x17A8];
  STACK[0x3210] = STACK[0x39A8];
  v33 = STACK[0x37F8];
  STACK[0x3828] = STACK[0x37F8];
  STACK[0x3A00] = v18;
  v34 = v18;
  STACK[0x3BD8] = STACK[0x3AA0];
  STACK[0x3218] = STACK[0x3A40];
  v35 = v7;
  STACK[0x1530] = v7;
  STACK[0x3A10] = v23;
  STACK[0x32E8] = STACK[0x3958];
  STACK[0x3220] = STACK[0x3A30];
  STACK[0x3868] = v21;
  STACK[0x39F0] = v20;
  STACK[0x32F0] = STACK[0x3968];
  v36 = STACK[0x30D8];
  STACK[0x3850] = STACK[0x30D8];
  v37 = STACK[0x1B08];
  STACK[0x3858] = STACK[0x1B08];
  STACK[0x1528] = v4;
  v38 = STACK[0x3818];
  STACK[0x3870] = STACK[0x3818];
  STACK[0x3A08] = v12;
  STACK[0x3C28] = v24;
  STACK[0x3378] = v38;
  STACK[0x3228] = STACK[0x39A0];
  STACK[0x3230] = STACK[0x3948];
  STACK[0x3328] = v37;
  STACK[0x3238] = STACK[0x3998];
  STACK[0x1520] = v11;
  v39 = STACK[0x1F18];
  STACK[0x1510] = STACK[0x1F18];
  STACK[0x1518] = v16;
  STACK[0x1508] = v5;
  STACK[0x32E0] = STACK[0x3950];
  v40 = STACK[0x1B70];
  STACK[0x3160] = STACK[0x1B70];
  STACK[0x1500] = v40;
  STACK[0x3AD0] = v10;
  STACK[0x3AD8] = v4;
  STACK[0x3AE0] = v40;
  STACK[0x3AE8] = v15;
  STACK[0x3250] = STACK[0x39B8];
  STACK[0x3260] = STACK[0x3940];
  STACK[0x14F8] = v27;
  STACK[0x14E8] = v31;
  STACK[0x3158] = v11;
  STACK[0x3278] = STACK[0x3990];
  STACK[0x14F0] = v6;
  v41 = STACK[0x3B60];
  STACK[0x3AF0] = STACK[0x3B60];
  STACK[0x3280] = STACK[0x3A58];
  STACK[0x14B8] = v31;
  STACK[0x14D8] = v14;
  STACK[0x14E0] = v28;
  STACK[0x14D0] = v10;
  STACK[0x14C8] = v37;
  STACK[0x3AF8] = v26;
  STACK[0x3B08] = v29;
  STACK[0x3B00] = v35;
  STACK[0x3C20] = v32;
  STACK[0x14C0] = v20;
  STACK[0x3B10] = v28;
  v42 = v28;
  STACK[0x3B18] = v39;
  STACK[0x14A0] = v34;
  STACK[0x3288] = STACK[0x37E0];
  STACK[0x3B20] = v33;
  STACK[0x1498] = v27;
  STACK[0x3B30] = v30;
  STACK[0x3B28] = v14;
  STACK[0x31A8] = v26;
  v43 = v26;
  STACK[0x14B0] = v32;
  STACK[0x14A8] = v36;
  STACK[0x1490] = v41;
  STACK[0x3B38] = v25;
  LODWORD(STACK[0x3590]) = STACK[0x3710];
  v44 = STACK[0x2D28];
  STACK[0x3B58] = STACK[0x2D28];
  STACK[0x3688] = v6;
  STACK[0x2FE8] = v6;
  STACK[0x2FE0] = v24;
  STACK[0x2FC8] = v10;
  STACK[0x2FD8] = STACK[0x2DB0];
  STACK[0x2FF0] = STACK[0x1CB0];
  STACK[0x2FC0] = v42;
  STACK[0x2FB0] = STACK[0x1CA8];
  STACK[0x2FA8] = STACK[0x2DB8];
  STACK[0x2FA0] = v37;
  STACK[0x2FB8] = STACK[0x1CD8];
  STACK[0x2FD0] = STACK[0x1CC8];
  STACK[0x3680] = v11;
  STACK[0x2F90] = v27;
  STACK[0x3668] = v5;
  STACK[0x2F88] = v40;
  STACK[0x3678] = v16;
  STACK[0x3670] = v19;
  STACK[0x2F78] = v39;
  STACK[0x2F98] = STACK[0x1CC0];
  STACK[0x2F80] = v15;
  STACK[0x3660] = v13;
  STACK[0x2F70] = v44;
  STACK[0x2F68] = STACK[0x1CD0];
  STACK[0x3658] = v27;
  STACK[0x3650] = v24;
  STACK[0x2F50] = STACK[0x2DE8];
  v45 = STACK[0x2CF0];
  STACK[0x3B50] = STACK[0x2CF0];
  v46 = STACK[0x2CE0];
  STACK[0x3108] = STACK[0x2CE0];
  STACK[0x2F48] = v20;
  STACK[0x2F40] = STACK[0x2DE0];
  STACK[0x2F38] = v46;
  STACK[0x3640] = v31;
  STACK[0x3648] = STACK[0x3810];
  STACK[0x3638] = v32;
  STACK[0x3630] = v34;
  v47 = v34;
  STACK[0x2F58] = STACK[0x1CB8];
  STACK[0x3628] = STACK[0x30E0];
  v48 = STACK[0x2CF8];
  STACK[0x3178] = STACK[0x2CF8];
  v49 = STACK[0x1B00];
  STACK[0x3618] = STACK[0x1B00];
  STACK[0x3610] = v20;
  STACK[0x3620] = v36;
  STACK[0x2F30] = STACK[0x2DC8];
  STACK[0x3608] = v37;
  STACK[0x3600] = STACK[0x3818];
  v50 = STACK[0x2CD8];
  STACK[0x30F8] = STACK[0x2CD8];
  STACK[0x2F28] = v45;
  v51 = STACK[0x1C90];
  STACK[0x35F8] = STACK[0x1C90];
  v52 = STACK[0x2CB0];
  STACK[0x3100] = STACK[0x2CB0];
  v53 = STACK[0x2CC0];
  STACK[0x2F20] = STACK[0x2CC0];
  v54 = STACK[0x2CB8];
  STACK[0x3118] = STACK[0x2CB8];
  STACK[0x2F10] = STACK[0x2DD8];
  STACK[0x2F08] = v48;
  v55 = STACK[0x2CE8];
  STACK[0x2F18] = STACK[0x2CE8];
  STACK[0x35F0] = v10;
  STACK[0x2F00] = STACK[0x2DD0];
  STACK[0x2EF8] = v32;
  STACK[0x35E8] = STACK[0x1F10];
  STACK[0x35E0] = v40;
  STACK[0x35D8] = v15;
  v56 = STACK[0x3B60];
  STACK[0x2EE8] = STACK[0x3B60];
  STACK[0x2EF0] = v51;
  STACK[0x2ED8] = v31;
  STACK[0x2EE0] = v49;
  STACK[0x35D0] = v56;
  STACK[0x2ED0] = STACK[0x1CE0];
  STACK[0x3B48] = v55;
  STACK[0x2EC0] = v52;
  v57 = STACK[0x2CC8];
  STACK[0x2EB8] = STACK[0x2CC8];
  STACK[0x2EC8] = STACK[0x1CE8];
  STACK[0x2EB0] = STACK[0x2D98];
  STACK[0x30F0] = v57;
  STACK[0x3B40] = v53;
  STACK[0x2EA8] = STACK[0x2DA8];
  STACK[0x2EA0] = v11;
  v58 = STACK[0x2CD0];
  STACK[0x3110] = STACK[0x2CD0];
  STACK[0x2E98] = STACK[0x1CF0];
  STACK[0x35C8] = v43;
  STACK[0x35C0] = STACK[0x30E8];
  v59 = STACK[0x1F28];
  STACK[0x35B8] = STACK[0x1F28];
  STACK[0x35B0] = v42;
  STACK[0x35A8] = v39;
  STACK[0x2E90] = STACK[0x2DA0];
  STACK[0x35A0] = v33;
  STACK[0x2E88] = v59;
  STACK[0x2E78] = v54;
  STACK[0x3598] = STACK[0x36C8];
  STACK[0x2E70] = v14;
  STACK[0x2E68] = v43;
  STACK[0x3588] = v14;
  STACK[0x2E60] = STACK[0x2DC0];
  STACK[0x2E58] = v50;
  STACK[0x2E80] = STACK[0x1CF8];
  STACK[0x2E50] = v47;
  STACK[0x3580] = STACK[0x3808];
  STACK[0x2E48] = v58;
  return ((uint64_t (*)(void))STACK[0x3C78])();
}

uint64_t sub_1006B10EC()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v0 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 6921));
  STACK[0x3240] = STACK[0x3888];
  STACK[0x3248] = STACK[0x3988];
  STACK[0x3B90] = STACK[0x3A28];
  STACK[0x3C58] = STACK[0x33D0];
  STACK[0x3258] = STACK[0x3AB8];
  STACK[0x3C40] = STACK[0x33C8];
  STACK[0x3B80] = STACK[0x3A68];
  STACK[0x3368] = STACK[0x3980];
  STACK[0x3268] = STACK[0x3A20];
  STACK[0x3B88] = STACK[0x3A48];
  STACK[0x3270] = STACK[0x3A60];
  STACK[0x3208] = STACK[0x3A50];
  STACK[0x31F8] = STACK[0x3AB0];
  STACK[0x3350] = STACK[0x3A18];
  STACK[0x3300] = STACK[0x39B0];
  STACK[0x32F8] = STACK[0x3978];
  STACK[0x3C50] = STACK[0x33C0];
  STACK[0x3358] = STACK[0x3960];
  STACK[0x3B98] = STACK[0x3A38];
  STACK[0x3200] = STACK[0x3AA8];
  STACK[0x3308] = STACK[0x3970];
  STACK[0x3A70] = STACK[0x36C0];
  STACK[0x3210] = STACK[0x39A8];
  STACK[0x3A78] = STACK[0x36B8];
  STACK[0x3BD8] = STACK[0x3AA0];
  STACK[0x3218] = STACK[0x3A40];
  STACK[0x32E8] = STACK[0x3958];
  STACK[0x3220] = STACK[0x3A30];
  STACK[0x32F0] = STACK[0x3968];
  STACK[0x3228] = STACK[0x39A0];
  STACK[0x3230] = STACK[0x3948];
  STACK[0x3238] = STACK[0x3998];
  STACK[0x32E0] = STACK[0x3950];
  STACK[0x3C48] = STACK[0x33B8];
  STACK[0x3250] = STACK[0x39B8];
  STACK[0x3260] = STACK[0x3940];
  STACK[0x3A80] = STACK[0x36B0];
  STACK[0x3278] = STACK[0x3990];
  STACK[0x3280] = STACK[0x3A58];
  STACK[0x3A88] = STACK[0x36A8];
  STACK[0x39C0] = STACK[0x36A0];
  STACK[0x3A90] = STACK[0x3698];
  STACK[0x3288] = STACK[0x37E0];
  STACK[0x3A98] = STACK[0x3690];
  LODWORD(STACK[0x27FC]) = 93;
  LODWORD(STACK[0x156C]) = 94;
  v1 = STACK[0x1F10];
  STACK[0x3C68] = STACK[0x1F10];
  v2 = STACK[0x1798];
  STACK[0x3C60] = STACK[0x1798];
  v3 = STACK[0x17C0];
  STACK[0x39E0] = STACK[0x17C0];
  v4 = STACK[0x1F18];
  STACK[0x3168] = STACK[0x1F18];
  v5 = STACK[0x16C8];
  STACK[0x3B60] = STACK[0x16C8];
  v6 = STACK[0x1F28];
  STACK[0x3330] = STACK[0x1F28];
  v7 = STACK[0x3810];
  STACK[0x3348] = STACK[0x3810];
  v8 = STACK[0x1600];
  STACK[0x3120] = STACK[0x1600];
  v9 = STACK[0x15F8];
  STACK[0x39E8] = STACK[0x15F8];
  v10 = STACK[0x1C90];
  STACK[0x1560] = STACK[0x1C90];
  v11 = STACK[0x37F0];
  STACK[0x3370] = STACK[0x37F0];
  v12 = STACK[0x1F20];
  STACK[0x3800] = STACK[0x1F20];
  STACK[0x39D8] = v2;
  v13 = STACK[0x1788];
  STACK[0x3128] = STACK[0x1788];
  STACK[0x3820] = v10;
  v14 = STACK[0x30D0];
  STACK[0x39F8] = STACK[0x30D0];
  v15 = STACK[0x1780];
  STACK[0x3320] = STACK[0x1780];
  v16 = STACK[0x37E8];
  STACK[0x3860] = STACK[0x37E8];
  v17 = STACK[0x17A0];
  STACK[0x3318] = STACK[0x17A0];
  v18 = STACK[0x1B00];
  STACK[0x3338] = STACK[0x1B00];
  v19 = STACK[0x30E0];
  STACK[0x1540] = STACK[0x30E0];
  STACK[0x1550] = v18;
  v20 = STACK[0x17B8];
  STACK[0x1558] = STACK[0x17B8];
  v21 = STACK[0x3808];
  STACK[0x3BC8] = STACK[0x3808];
  v22 = STACK[0x17B0];
  STACK[0x1548] = STACK[0x17B0];
  STACK[0x3838] = v11;
  STACK[0x3360] = v13;
  v23 = STACK[0x15F0];
  STACK[0x39D0] = STACK[0x15F0];
  STACK[0x3840] = v20;
  STACK[0x3340] = v16;
  v24 = STACK[0x1B10];
  STACK[0x3310] = STACK[0x1B10];
  STACK[0x3290] = v3;
  v25 = STACK[0x30E8];
  STACK[0x1538] = STACK[0x30E8];
  v26 = STACK[0x36C8];
  STACK[0x3BD0] = STACK[0x36C8];
  v27 = STACK[0x1790];
  STACK[0x39C8] = STACK[0x1790];
  STACK[0x3BA8] = v7;
  v28 = STACK[0x17A8];
  STACK[0x3848] = STACK[0x17A8];
  v29 = STACK[0x37F8];
  STACK[0x3828] = STACK[0x37F8];
  STACK[0x3A00] = v15;
  STACK[0x1530] = v6;
  STACK[0x3A10] = v19;
  STACK[0x3868] = v18;
  STACK[0x39F0] = v17;
  v30 = STACK[0x30D8];
  STACK[0x3850] = STACK[0x30D8];
  v31 = STACK[0x1B08];
  STACK[0x3858] = STACK[0x1B08];
  STACK[0x1528] = v1;
  v32 = STACK[0x3818];
  STACK[0x3870] = STACK[0x3818];
  STACK[0x3A08] = v10;
  STACK[0x3C28] = v20;
  STACK[0x3378] = v32;
  STACK[0x3328] = v31;
  STACK[0x1520] = v9;
  STACK[0x1510] = v4;
  STACK[0x1518] = v14;
  STACK[0x1508] = v2;
  v33 = STACK[0x1B70];
  STACK[0x3160] = STACK[0x1B70];
  STACK[0x1500] = v33;
  STACK[0x3AD0] = v8;
  STACK[0x3AD8] = v1;
  STACK[0x3AE0] = v33;
  STACK[0x3AE8] = v13;
  STACK[0x14F8] = v23;
  STACK[0x14E8] = v27;
  STACK[0x3158] = v9;
  STACK[0x14F0] = v3;
  STACK[0x3AF0] = v5;
  STACK[0x14B8] = v27;
  STACK[0x14D8] = v12;
  STACK[0x14E0] = v24;
  STACK[0x14D0] = v8;
  STACK[0x14C8] = v31;
  STACK[0x3AF8] = v22;
  STACK[0x3B08] = v25;
  STACK[0x3B00] = v6;
  STACK[0x3C20] = v28;
  STACK[0x14C0] = v17;
  STACK[0x3B10] = v24;
  STACK[0x3B18] = v4;
  STACK[0x14A0] = v15;
  STACK[0x3B20] = v29;
  STACK[0x1498] = v23;
  STACK[0x3B30] = v26;
  STACK[0x3B28] = v12;
  STACK[0x31A8] = v22;
  STACK[0x14B0] = v28;
  STACK[0x14A8] = v30;
  STACK[0x1490] = v5;
  STACK[0x3B38] = v21;
  return v0();
}

uint64_t sub_1006B1458()
{
  int v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v0 = STACK[0x3710];
  STACK[0x3C78] = *(_QWORD *)(STACK[0x3C70] + 8 * (int)((LODWORD(STACK[0x3710]) - 1662) | ((STACK[0x3834] & 8) >> 1)))
                - 4;
  LODWORD(STACK[0x2F64]) = 100;
  LODWORD(STACK[0x3C08]) = 6;
  LODWORD(STACK[0x27FC]) = 98;
  LODWORD(STACK[0x3BB8]) = 99;
  LODWORD(STACK[0x3590]) = v0;
  v1 = STACK[0x1C90];
  STACK[0x3B58] = STACK[0x1C90];
  v2 = STACK[0x17C0];
  STACK[0x3688] = STACK[0x17C0];
  STACK[0x2FE8] = v2;
  v3 = STACK[0x17B8];
  STACK[0x2FE0] = STACK[0x17B8];
  STACK[0x3C58] = STACK[0x33D0];
  v4 = STACK[0x1600];
  STACK[0x3120] = STACK[0x1600];
  v5 = STACK[0x1B70];
  STACK[0x3160] = STACK[0x1B70];
  STACK[0x3C40] = STACK[0x33C8];
  STACK[0x2FC8] = v4;
  v6 = STACK[0x1788];
  STACK[0x2FD8] = STACK[0x1788];
  v7 = v6;
  v8 = STACK[0x37E8];
  STACK[0x2FF0] = STACK[0x37E8];
  v9 = STACK[0x1B10];
  STACK[0x2FC0] = STACK[0x1B10];
  STACK[0x2FB0] = STACK[0x30E8];
  v10 = STACK[0x15F0];
  STACK[0x2FA8] = STACK[0x15F0];
  v11 = STACK[0x1B08];
  STACK[0x2FA0] = STACK[0x1B08];
  v12 = v11;
  v13 = STACK[0x30D8];
  STACK[0x2FB8] = STACK[0x30D8];
  STACK[0x3C50] = STACK[0x33C0];
  STACK[0x3A70] = STACK[0x36C0];
  STACK[0x3A78] = STACK[0x36B8];
  STACK[0x3C48] = STACK[0x33B8];
  STACK[0x3A80] = STACK[0x36B0];
  STACK[0x3A88] = STACK[0x36A8];
  STACK[0x39C0] = STACK[0x36A0];
  STACK[0x3A90] = STACK[0x3698];
  STACK[0x3A98] = STACK[0x3690];
  v14 = STACK[0x37F0];
  STACK[0x2FD0] = STACK[0x37F0];
  v15 = STACK[0x15F8];
  STACK[0x3680] = STACK[0x15F8];
  STACK[0x2F90] = v10;
  v16 = STACK[0x1798];
  STACK[0x3668] = STACK[0x1798];
  STACK[0x2F88] = v5;
  v17 = STACK[0x30D0];
  STACK[0x3678] = STACK[0x30D0];
  v18 = v8;
  STACK[0x3670] = v8;
  STACK[0x3820] = v1;
  v19 = STACK[0x1F18];
  STACK[0x2F78] = STACK[0x1F18];
  v20 = STACK[0x3810];
  STACK[0x2F98] = STACK[0x3810];
  STACK[0x1788] = v7;
  STACK[0x2F80] = v7;
  STACK[0x3290] = v2;
  STACK[0x3660] = v14;
  STACK[0x2F70] = v1;
  v21 = STACK[0x30E0];
  STACK[0x2F68] = STACK[0x30E0];
  STACK[0x3658] = v10;
  v22 = v3;
  STACK[0x17B8] = v3;
  STACK[0x3650] = v3;
  v23 = STACK[0x1780];
  STACK[0x2F50] = STACK[0x1780];
  v24 = STACK[0x16C8];
  STACK[0x3B50] = STACK[0x16C8];
  v25 = STACK[0x17B0];
  STACK[0x3108] = STACK[0x17B0];
  v26 = STACK[0x17A0];
  STACK[0x2F48] = STACK[0x17A0];
  STACK[0x2F40] = v26;
  STACK[0x2F38] = v25;
  v27 = STACK[0x1790];
  STACK[0x3640] = STACK[0x1790];
  STACK[0x3648] = v20;
  v28 = STACK[0x17A8];
  STACK[0x3638] = STACK[0x17A8];
  STACK[0x3630] = v23;
  STACK[0x2F58] = v17;
  STACK[0x3628] = v21;
  STACK[0x3178] = v19;
  v29 = STACK[0x1B00];
  STACK[0x3618] = STACK[0x1B00];
  STACK[0x3610] = v26;
  STACK[0x3620] = v13;
  STACK[0x31A8] = v25;
  STACK[0x2F30] = v29;
  STACK[0x1B08] = v12;
  STACK[0x3608] = v12;
  v30 = STACK[0x3818];
  STACK[0x3600] = STACK[0x3818];
  STACK[0x30F8] = v4;
  STACK[0x2F28] = v24;
  STACK[0x35F8] = v1;
  v31 = STACK[0x1F20];
  STACK[0x3100] = STACK[0x1F20];
  STACK[0x2F20] = v28;
  STACK[0x3C60] = v16;
  v32 = v5;
  STACK[0x3118] = v5;
  STACK[0x3C20] = v28;
  STACK[0x3168] = v19;
  v33 = STACK[0x1F10];
  STACK[0x2F10] = STACK[0x1F10];
  STACK[0x2F08] = v19;
  STACK[0x2F18] = v22;
  STACK[0x35F0] = v4;
  STACK[0x3C28] = v22;
  STACK[0x2F00] = v16;
  STACK[0x2EF8] = v28;
  STACK[0x35E8] = v33;
  STACK[0x35E0] = v32;
  STACK[0x1B70] = v32;
  STACK[0x35D8] = v7;
  STACK[0x2EE8] = v24;
  STACK[0x2EF0] = v1;
  STACK[0x2ED8] = v27;
  STACK[0x2EE0] = v29;
  STACK[0x35D0] = v24;
  STACK[0x2ED0] = v30;
  STACK[0x3B48] = v22;
  STACK[0x2EC0] = v31;
  STACK[0x2EB8] = v15;
  STACK[0x3B60] = v24;
  v34 = STACK[0x36C8];
  STACK[0x2EC8] = STACK[0x36C8];
  STACK[0x2EB0] = v12;
  STACK[0x30F0] = v15;
  STACK[0x3B40] = v28;
  STACK[0x1B10] = v9;
  STACK[0x2EA8] = v9;
  STACK[0x2EA0] = v15;
  STACK[0x3110] = v2;
  v35 = STACK[0x3808];
  STACK[0x2E98] = STACK[0x3808];
  STACK[0x35C8] = v25;
  STACK[0x35C0] = STACK[0x30E8];
  v36 = STACK[0x1F28];
  STACK[0x35B8] = STACK[0x1F28];
  STACK[0x3800] = v31;
  STACK[0x35B0] = v9;
  STACK[0x3158] = v15;
  STACK[0x35A8] = v19;
  STACK[0x2E90] = v36;
  v37 = STACK[0x37F8];
  STACK[0x35A0] = STACK[0x37F8];
  STACK[0x2E88] = v36;
  STACK[0x2E78] = v32;
  STACK[0x3C68] = v33;
  STACK[0x3598] = v34;
  STACK[0x2E70] = v31;
  STACK[0x2E68] = v25;
  STACK[0x3588] = v31;
  STACK[0x2E60] = v27;
  STACK[0x2E58] = v4;
  STACK[0x2E80] = v37;
  STACK[0x2E50] = v23;
  STACK[0x3580] = v35;
  v38 = v35;
  STACK[0x2E48] = v2;
  STACK[0x3828] = STACK[0x1CF8];
  STACK[0x3318] = STACK[0x2DE0];
  STACK[0x39E0] = v2;
  STACK[0x3308] = v37;
  STACK[0x3340] = STACK[0x1CB0];
  STACK[0x3BD8] = v23;
  STACK[0x3300] = v13;
  STACK[0x3BA0] = STACK[0x2CE8];
  STACK[0x3320] = STACK[0x2DE8];
  STACK[0x39E8] = v15;
  STACK[0x3330] = STACK[0x2DA0];
  STACK[0x3B70] = STACK[0x2CD0];
  STACK[0x3B78] = STACK[0x2DB8];
  STACK[0x3338] = STACK[0x2DC8];
  STACK[0x39D8] = v16;
  STACK[0x3B68] = STACK[0x2CD8];
  STACK[0x3AC8] = STACK[0x1CA8];
  STACK[0x3350] = v17;
  STACK[0x32F8] = v18;
  STACK[0x32E0] = v14;
  STACK[0x39D0] = v10;
  STACK[0x3280] = STACK[0x2DB0];
  STACK[0x3840] = STACK[0x17B8];
  STACK[0x3BD0] = STACK[0x1CE8];
  STACK[0x3B88] = v26;
  STACK[0x3368] = v20;
  STACK[0x3B98] = v27;
  STACK[0x3BA8] = v20;
  STACK[0x3848] = v28;
  STACK[0x3348] = STACK[0x1CC0];
  STACK[0x3A00] = v23;
  v39 = STACK[0x1B08];
  STACK[0x3328] = STACK[0x1B08];
  STACK[0x3288] = STACK[0x2CC8];
  STACK[0x3A10] = v21;
  v40 = STACK[0x1788];
  STACK[0x3360] = STACK[0x1788];
  STACK[0x3B80] = v29;
  STACK[0x39F0] = v26;
  STACK[0x3850] = v13;
  STACK[0x3240] = v29;
  STACK[0x3250] = STACK[0x1CB8];
  STACK[0x3858] = v39;
  STACK[0x3278] = STACK[0x2D98];
  STACK[0x3358] = v30;
  STACK[0x3260] = STACK[0x2CF0];
  STACK[0x3A08] = v1;
  STACK[0x3270] = STACK[0x1CD0];
  STACK[0x32F0] = v38;
  STACK[0x3238] = STACK[0x2DD8];
  STACK[0x3258] = STACK[0x2DD0];
  v41 = STACK[0x36C8];
  STACK[0x32E8] = STACK[0x36C8];
  STACK[0x3AD0] = v4;
  STACK[0x3AD8] = v33;
  STACK[0x3AE0] = STACK[0x1B70];
  STACK[0x3AE8] = v40;
  STACK[0x3268] = STACK[0x1CD8];
  STACK[0x3AF0] = v24;
  STACK[0x3BC8] = STACK[0x1CF0];
  STACK[0x3B90] = STACK[0x32D8];
  STACK[0x3248] = STACK[0x2CB0];
  STACK[0x3230] = v10;
  STACK[0x3228] = v27;
  STACK[0x3378] = STACK[0x1CE0];
  STACK[0x3310] = STACK[0x2DA8];
  STACK[0x3220] = STACK[0x2CF8];
  STACK[0x3AF8] = v25;
  STACK[0x3B08] = STACK[0x30E8];
  STACK[0x3B00] = v36;
  STACK[0x3B10] = STACK[0x1B10];
  STACK[0x3B18] = v19;
  STACK[0x3B20] = v37;
  STACK[0x3370] = STACK[0x1CC8];
  STACK[0x3B30] = v41;
  STACK[0x3B28] = v31;
  v42 = STACK[0x2D28];
  STACK[0x3B38] = v38;
  return ((uint64_t (*)(unint64_t))STACK[0x3C78])(v42);
}

uint64_t sub_1006B1940()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  STACK[0x3C08] = *(_QWORD *)(STACK[0x3C70]
                            + 8 * ((LODWORD(STACK[0x3710]) - 10456) ^ (12849 * ((LODWORD(STACK[0x3834]) >> 2) & 1))));
  STACK[0x3C00] = 24;
  LODWORD(STACK[0x37D8]) = 102;
  LODWORD(STACK[0x27FC]) = 100;
  LODWORD(STACK[0x156C]) = 101;
  STACK[0x3240] = STACK[0x3888];
  v0 = STACK[0x1F10];
  STACK[0x3C68] = STACK[0x1F10];
  v1 = STACK[0x1798];
  STACK[0x3C60] = STACK[0x1798];
  STACK[0x3248] = STACK[0x3988];
  STACK[0x3B90] = STACK[0x3A28];
  v2 = STACK[0x17C0];
  STACK[0x39E0] = STACK[0x17C0];
  v3 = v2;
  STACK[0x17C0] = v2;
  v4 = STACK[0x1F18];
  STACK[0x3168] = STACK[0x1F18];
  STACK[0x3C58] = STACK[0x33D0];
  STACK[0x3258] = STACK[0x3AB8];
  STACK[0x3C40] = STACK[0x33C8];
  STACK[0x3B80] = STACK[0x3A68];
  STACK[0x3368] = STACK[0x3980];
  STACK[0x3268] = STACK[0x3A20];
  STACK[0x3B88] = STACK[0x3A48];
  v5 = STACK[0x16C8];
  STACK[0x3B60] = STACK[0x16C8];
  STACK[0x3270] = STACK[0x3A60];
  v6 = STACK[0x1F28];
  STACK[0x3330] = STACK[0x1F28];
  STACK[0x3348] = STACK[0x1CC0];
  STACK[0x3208] = STACK[0x3A50];
  v7 = STACK[0x1600];
  STACK[0x3120] = STACK[0x1600];
  v8 = STACK[0x15F8];
  STACK[0x39E8] = STACK[0x15F8];
  STACK[0x1560] = STACK[0x2D28];
  STACK[0x3370] = STACK[0x1CC8];
  STACK[0x31F8] = STACK[0x3AB0];
  v9 = STACK[0x1F20];
  STACK[0x3800] = STACK[0x1F20];
  STACK[0x3350] = STACK[0x3A18];
  STACK[0x3300] = STACK[0x39B0];
  STACK[0x39D8] = v1;
  STACK[0x32F8] = STACK[0x3978];
  STACK[0x3128] = STACK[0x2DB0];
  v10 = STACK[0x1C90];
  STACK[0x3820] = STACK[0x1C90];
  v11 = v10;
  STACK[0x1C90] = v10;
  STACK[0x39F8] = STACK[0x30D0];
  STACK[0x3320] = STACK[0x2DE8];
  STACK[0x3C50] = STACK[0x33C0];
  STACK[0x3860] = STACK[0x37E8];
  v12 = STACK[0x17A0];
  STACK[0x3318] = STACK[0x17A0];
  v13 = v12;
  STACK[0x17A0] = v12;
  v14 = STACK[0x1B00];
  STACK[0x3338] = STACK[0x1B00];
  STACK[0x1540] = STACK[0x1CD0];
  STACK[0x1550] = STACK[0x2DC8];
  STACK[0x3358] = STACK[0x3960];
  STACK[0x3B98] = STACK[0x3A38];
  STACK[0x1558] = STACK[0x2CE8];
  STACK[0x3200] = STACK[0x3AA8];
  STACK[0x3BC8] = STACK[0x1CF0];
  STACK[0x3308] = STACK[0x3970];
  STACK[0x1548] = STACK[0x2CE0];
  STACK[0x3838] = STACK[0x37F0];
  v15 = STACK[0x1788];
  STACK[0x3360] = STACK[0x1788];
  STACK[0x3A70] = STACK[0x36C0];
  v16 = STACK[0x15F0];
  STACK[0x39D0] = STACK[0x15F0];
  v17 = STACK[0x17B8];
  STACK[0x3840] = STACK[0x17B8];
  STACK[0x3340] = STACK[0x1CB0];
  v18 = STACK[0x1B10];
  STACK[0x3310] = STACK[0x1B10];
  STACK[0x3290] = v3;
  STACK[0x1538] = STACK[0x1CA8];
  STACK[0x3BD0] = STACK[0x1CE8];
  v19 = STACK[0x1790];
  STACK[0x39C8] = STACK[0x1790];
  STACK[0x3BA8] = STACK[0x3810];
  v20 = STACK[0x17A8];
  STACK[0x3848] = STACK[0x17A8];
  STACK[0x3210] = STACK[0x39A8];
  STACK[0x3828] = STACK[0x1CF8];
  STACK[0x3A78] = STACK[0x36B8];
  v21 = STACK[0x1780];
  STACK[0x3A00] = STACK[0x1780];
  STACK[0x1780] = v21;
  STACK[0x3BD8] = STACK[0x3AA0];
  STACK[0x3218] = STACK[0x3A40];
  STACK[0x1530] = STACK[0x2DA0];
  STACK[0x3A10] = STACK[0x30E0];
  STACK[0x32E8] = STACK[0x3958];
  STACK[0x3220] = STACK[0x3A30];
  STACK[0x3868] = v14;
  STACK[0x39F0] = v13;
  STACK[0x32F0] = STACK[0x3968];
  v22 = STACK[0x30D8];
  STACK[0x3850] = STACK[0x30D8];
  v23 = STACK[0x1B08];
  STACK[0x3858] = STACK[0x1B08];
  STACK[0x1528] = STACK[0x2DD8];
  v24 = STACK[0x3818];
  STACK[0x3870] = STACK[0x3818];
  STACK[0x3A08] = v11;
  STACK[0x3C28] = v17;
  STACK[0x3378] = STACK[0x1CE0];
  STACK[0x3228] = STACK[0x39A0];
  STACK[0x3230] = STACK[0x3948];
  STACK[0x3328] = v23;
  STACK[0x3238] = STACK[0x3998];
  STACK[0x1520] = STACK[0x2CC8];
  STACK[0x1510] = STACK[0x2CF8];
  STACK[0x1518] = STACK[0x1CB8];
  STACK[0x1508] = STACK[0x2DD0];
  STACK[0x32E0] = STACK[0x3950];
  v25 = STACK[0x1B70];
  STACK[0x3160] = STACK[0x1B70];
  STACK[0x1500] = STACK[0x2CB8];
  STACK[0x3AD0] = v7;
  STACK[0x3C48] = STACK[0x33B8];
  STACK[0x3AD8] = v0;
  STACK[0x3AE0] = v25;
  STACK[0x3AE8] = v15;
  STACK[0x3250] = STACK[0x39B8];
  STACK[0x3260] = STACK[0x3940];
  STACK[0x3A80] = STACK[0x36B0];
  STACK[0x14F8] = STACK[0x2DB8];
  STACK[0x14E8] = STACK[0x2DC0];
  STACK[0x3158] = v8;
  STACK[0x3278] = STACK[0x3990];
  STACK[0x14F0] = STACK[0x2CD0];
  STACK[0x3AF0] = v5;
  STACK[0x3280] = STACK[0x3A58];
  STACK[0x14B8] = v19;
  STACK[0x14D8] = STACK[0x2CB0];
  STACK[0x3A88] = STACK[0x36A8];
  STACK[0x14E0] = STACK[0x2DA8];
  STACK[0x14D0] = STACK[0x2CD8];
  STACK[0x14C8] = STACK[0x2D98];
  v26 = STACK[0x17B0];
  STACK[0x3AF8] = STACK[0x17B0];
  v27 = STACK[0x30E8];
  STACK[0x3B08] = STACK[0x30E8];
  STACK[0x39C0] = STACK[0x36A0];
  STACK[0x3B00] = v6;
  STACK[0x3C20] = v20;
  STACK[0x14C0] = STACK[0x2DE0];
  STACK[0x3B10] = v18;
  STACK[0x3B18] = v4;
  STACK[0x3A90] = STACK[0x3698];
  STACK[0x14A0] = v21;
  STACK[0x3288] = STACK[0x37E0];
  v28 = STACK[0x37F8];
  STACK[0x3B20] = STACK[0x37F8];
  STACK[0x1498] = v16;
  v29 = STACK[0x36C8];
  STACK[0x3B30] = STACK[0x36C8];
  STACK[0x3B28] = v9;
  STACK[0x31A8] = v26;
  STACK[0x14B0] = STACK[0x2CC0];
  STACK[0x3A98] = STACK[0x3690];
  STACK[0x14A8] = STACK[0x1CD8];
  STACK[0x1490] = STACK[0x2CF0];
  v30 = STACK[0x3808];
  STACK[0x3B38] = STACK[0x3808];
  LODWORD(STACK[0x3AC0]) = STACK[0x3710];
  STACK[0x3688] = v14;
  STACK[0x3880] = v30;
  STACK[0x38F8] = v1;
  STACK[0x38F0] = v15;
  STACK[0x33E0] = v4;
  STACK[0x3920] = v0;
  STACK[0x3568] = STACK[0x3130];
  STACK[0x3918] = v23;
  STACK[0x3938] = v15;
  STACK[0x3560] = STACK[0x3138];
  v31 = STACK[0x37E8];
  STACK[0x3930] = STACK[0x37E8];
  STACK[0x3878] = v29;
  STACK[0x3450] = v9;
  STACK[0x3C38] = v20;
  v32 = STACK[0x37F0];
  STACK[0x3928] = STACK[0x37F0];
  STACK[0x3448] = v26;
  STACK[0x3BB0] = v5;
  STACK[0x37D0] = v0;
  STACK[0x3558] = STACK[0x3140];
  STACK[0x37C8] = v26;
  STACK[0x3908] = v17;
  STACK[0x37C0] = v4;
  STACK[0x3550] = STACK[0x3148];
  STACK[0x3900] = v25;
  STACK[0x3440] = v4;
  STACK[0x37B8] = v5;
  STACK[0x38E8] = v14;
  STACK[0x3910] = v24;
  STACK[0x37B0] = v9;
  STACK[0x37A8] = v8;
  STACK[0x37A0] = v1;
  STACK[0x3438] = v17;
  STACK[0x3798] = v8;
  STACK[0x3BF8] = v8;
  STACK[0x3398] = v9;
  STACK[0x33B0] = v25;
  STACK[0x3548] = STACK[0x3180];
  STACK[0x3790] = v4;
  STACK[0x3788] = v23;
  STACK[0x3388] = v17;
  STACK[0x3540] = v7;
  v33 = STACK[0x17C0];
  STACK[0x38E0] = STACK[0x17C0];
  STACK[0x3780] = v19;
  STACK[0x38B0] = v18;
  v34 = STACK[0x17A0];
  STACK[0x3778] = STACK[0x17A0];
  STACK[0x38D0] = v22;
  STACK[0x38D8] = v32;
  STACK[0x38C8] = STACK[0x30E0];
  v35 = STACK[0x3810];
  STACK[0x3770] = STACK[0x3810];
  v36 = STACK[0x1C90];
  STACK[0x38C0] = STACK[0x1C90];
  STACK[0x3768] = v16;
  STACK[0x3760] = v6;
  v37 = STACK[0x30D0];
  STACK[0x3758] = STACK[0x30D0];
  STACK[0x33D8] = v33;
  STACK[0x3BE8] = v36;
  STACK[0x3748] = v33;
  STACK[0x3BF0] = v8;
  STACK[0x3740] = v37;
  STACK[0x3738] = v7;
  STACK[0x38B8] = v29;
  STACK[0x3750] = v28;
  STACK[0x3570] = v7;
  STACK[0x38A8] = v27;
  STACK[0x38A0] = v27;
  STACK[0x3C78] = v36;
  STACK[0x3730] = v25;
  STACK[0x3728] = v18;
  STACK[0x3720] = v26;
  STACK[0x3718] = v31;
  STACK[0x3380] = v25;
  STACK[0x3700] = v9;
  STACK[0x36F8] = v34;
  STACK[0x3898] = v28;
  STACK[0x3BE0] = v5;
  STACK[0x3708] = v30;
  STACK[0x36E8] = v19;
  STACK[0x3890] = v6;
  STACK[0x36E0] = v7;
  STACK[0x36F0] = v35;
  STACK[0x3390] = v33;
  STACK[0x36D8] = v17;
  STACK[0x33A8] = v26;
  STACK[0x3C30] = v20;
  STACK[0x36D0] = STACK[0x1780];
  return ((uint64_t (*)(void))STACK[0x3C08])();
}

void sub_1006B1F5C()
{
  unint64_t v0;

  LODWORD(STACK[0x760]) = 88;
  STACK[0x3888] = STACK[0x1318];
  STACK[0x3988] = STACK[0x1338];
  STACK[0x32C8] = STACK[0x3C68];
  STACK[0x32B8] = STACK[0x3C60];
  STACK[0x32B0] = STACK[0x3B88];
  STACK[0x32A8] = STACK[0x3B80];
  v0 = STACK[0x3360];
  STACK[0x33D0] = STACK[0x3C58];
  STACK[0x33C8] = STACK[0x3C40];
  STACK[0x33C0] = STACK[0x3C50];
  STACK[0x36C0] = STACK[0x3A70];
  STACK[0x36B8] = STACK[0x3A78];
  STACK[0x32C0] = v0;
  STACK[0x33B8] = STACK[0x3C48];
  STACK[0x36B0] = STACK[0x3A80];
  STACK[0x36A8] = STACK[0x3A88];
  STACK[0x36A0] = STACK[0x39C0];
  STACK[0x3698] = STACK[0x3A90];
  STACK[0x3690] = STACK[0x3A98];
  STACK[0x32D8] = STACK[0x3B90];
  STACK[0x32A0] = STACK[0x3BD8];
  STACK[0x3298] = STACK[0x3B98];
  JUMPOUT(0x1006B0214);
}

uint64_t sub_1006B2074(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  STACK[0x3020] = v13;
  STACK[0x30C8] = v11;
  STACK[0x3578] = v17;
  STACK[0x3028] = v18;
  STACK[0x3030] = v9;
  STACK[0x3038] = v21;
  STACK[0x3098] = v8;
  STACK[0x3040] = a7;
  STACK[0x3048] = a4;
  STACK[0x30A0] = v15;
  STACK[0x2FF8] = v12;
  STACK[0x3050] = v25;
  STACK[0x30A8] = v24;
  STACK[0x3000] = v22;
  STACK[0x3058] = v20;
  STACK[0x3060] = a8;
  STACK[0x3068] = a3;
  STACK[0x30B0] = a1;
  STACK[0x3070] = v27;
  STACK[0x3008] = v16;
  STACK[0x3088] = a5;
  STACK[0x30B8] = a6;
  STACK[0x3090] = v19;
  STACK[0x3078] = v26;
  STACK[0x3080] = v10;
  STACK[0x3010] = v23;
  STACK[0x30C0] = v14;
  STACK[0x3018] = a2;
  return (*(uint64_t (**)(void))(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3AC0]) - 2862)))();
}

uint64_t sub_1006B20F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return ((uint64_t (*)(unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * (LODWORD(STACK[0x3AC0]) + 5624)) - ((LODWORD(STACK[0x3AC0]) - 13377) | 0x2254u) + 10836))(STACK[0x3388], a2, STACK[0x3570], a4, STACK[0x3C30], STACK[0x3540], STACK[0x3380], 39);
}

uint64_t sub_1006B2184@<X0>(unsigned int a1@<W8>)
{
  unint64_t v1;
  uint64_t v2;

  STACK[0x3578] = v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)a1) - (a1 ^ 0x2A50)))();
}

uint64_t sub_1006B21A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * (v3 + 3963))
                                                                              - 12))(STACK[0x33E0], v6, a3, v5);
}

uint64_t sub_1006B21D8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, int a9, int a10)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _BOOL4 v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BOOL4 v127;
  uint64_t v128;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BOOL4 v138;
  uint64_t v139;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  _BOOL4 v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _BOOL4 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _BOOL4 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _BOOL4 v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  BOOL v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  int v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  int v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  int v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _BOOL4 v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _BOOL4 v254;
  unint64_t v255;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  int v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  int v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  int v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _BOOL4 v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  _BOOL4 v300;
  unint64_t v301;
  int v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  _BOOL4 v309;
  unint64_t v310;
  int v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  int v331;
  uint64_t v332;
  unint64_t v333;
  BOOL v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  int v346;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  _BOOL4 v352;
  unint64_t v353;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  int v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _BOOL4 v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _BOOL4 v379;
  unint64_t v380;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _BOOL4 v386;
  uint64_t v387;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  int v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _BOOL4 v408;
  uint64_t v409;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _BOOL4 v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  _BOOL4 v427;
  unint64_t v428;
  int v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  uint64_t v435;
  _BOOL4 v436;
  unint64_t v437;
  int v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  _BOOL4 v445;
  unint64_t v446;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  int v464;
  uint64_t v465;
  unint64_t v466;
  _BOOL4 v467;
  unint64_t v468;
  int v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  int v480;
  uint64_t v481;
  unint64_t v482;
  _BOOL4 v483;
  unint64_t v484;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  _BOOL4 v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  int v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  int v513;
  uint64_t v514;
  unint64_t v515;
  _BOOL4 v516;
  unint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  _BOOL4 v527;
  uint64_t v528;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  _BOOL4 v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  _BOOL4 v547;
  uint64_t v548;
  int v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  _BOOL4 v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  _BOOL4 v564;
  uint64_t v565;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  unint64_t v577;
  int v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  _BOOL4 v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  unint64_t v592;
  int v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unint64_t v600;
  uint64_t v601;
  unint64_t v602;
  int v603;
  uint64_t v604;
  unint64_t v605;
  unint64_t v606;
  int v607;
  uint64_t v608;
  unint64_t v609;
  unint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  _BOOL4 v616;
  uint64_t v617;
  unint64_t v618;
  __int128 v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  unint64_t v624;
  int v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  _BOOL4 v630;
  uint64_t v631;
  uint64_t v633;
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  _BOOL4 v641;
  uint64_t v642;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  unint64_t v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t v651;
  _BOOL4 v652;
  unint64_t v653;
  uint64_t v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  _BOOL4 v660;
  uint64_t v661;
  uint64_t v663;
  unint64_t v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  int v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  int v687;
  uint64_t v688;
  unint64_t v689;
  _BOOL4 v690;
  unint64_t v691;
  int v692;
  uint64_t v693;
  unint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  uint64_t v700;
  unint64_t v701;
  int v702;
  uint64_t v703;
  unint64_t v704;
  unint64_t v705;
  int v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  int v716;
  uint64_t v717;
  unint64_t v718;
  _BOOL4 v719;
  unint64_t v720;
  unint64_t v721;
  __int128 v722;
  __int128 v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  _BOOL4 v728;
  uint64_t v729;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unint64_t v734;
  unint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  unint64_t v741;
  int v742;
  uint64_t v743;
  unint64_t v744;
  _BOOL4 v745;
  uint64_t v746;
  int v747;
  uint64_t v748;
  unint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  _BOOL4 v754;
  uint64_t v755;
  int v756;
  uint64_t v757;
  unint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  _BOOL4 v763;
  uint64_t v764;
  int v765;
  uint64_t v766;
  unint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  _BOOL4 v772;
  uint64_t v773;
  int v774;
  uint64_t v775;
  uint64_t v776;
  unint64_t v777;
  unint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  unint64_t v783;
  uint64_t v784;
  unint64_t v785;
  int v786;
  uint64_t v787;
  unint64_t v788;
  uint64_t v790;
  unint64_t v791;
  uint64_t v792;
  uint64_t v793;
  _BOOL4 v794;
  unint64_t v795;
  unint64_t v796;
  unint64_t v797;
  uint64_t v798;
  uint64_t v799;
  unint64_t v800;
  uint64_t v801;
  uint64_t v802;
  unint64_t v803;
  int v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  unint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  unint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  int v817;
  uint64_t v818;
  unint64_t v819;
  unint64_t v820;
  int v821;
  uint64_t v822;
  unint64_t v823;
  uint64_t v824;
  uint64_t v825;
  unint64_t v826;
  int v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  unint64_t v831;
  unint64_t v832;
  unint64_t v833;
  uint64_t v834;
  unint64_t v835;
  uint64_t v836;
  uint64_t v837;
  unint64_t v838;
  int v839;
  unint64_t v840;
  unint64_t v841;
  uint64_t v842;
  unint64_t v843;
  unint64_t v844;
  int v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  unint64_t v849;
  unint64_t v850;
  uint64_t v851;
  uint64_t v852;
  unint64_t v853;
  int v854;
  uint64_t v855;
  unint64_t v856;
  uint64_t v857;
  unint64_t v858;
  unint64_t v859;
  unint64_t v860;
  uint64_t v861;
  unint64_t v862;
  uint64_t v863;
  uint64_t v864;
  unint64_t v865;
  int v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t v873;
  int v874;
  uint64_t v875;
  unint64_t v876;
  int v877;
  uint64_t v878;
  unint64_t v879;
  unint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  unint64_t v889;
  uint64_t v890;
  unint64_t v891;
  int v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  unint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  unint64_t v901;
  unint64_t v902;
  int v903;
  uint64_t v904;
  unint64_t v905;
  unint64_t v906;
  int v907;
  uint64_t v908;
  unint64_t v909;
  uint64_t v910;
  uint64_t v911;
  unint64_t v912;
  int v913;
  uint64_t v914;
  unint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  uint64_t v919;
  unint64_t v920;
  unint64_t v921;
  int v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  uint64_t v928;
  unint64_t v929;
  int v930;
  uint64_t v931;
  unint64_t v932;
  unint64_t v933;
  int v934;
  uint64_t v935;
  unint64_t v936;
  unint64_t v937;
  uint64_t v938;
  unint64_t v939;
  unint64_t v940;
  unint64_t v941;
  uint64_t v942;
  unint64_t v943;
  uint64_t v944;
  uint64_t v945;
  unint64_t v946;
  int v947;
  uint64_t v948;
  unint64_t v949;
  uint64_t v950;
  unint64_t v951;
  uint64_t v952;
  unint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  _BOOL4 v958;
  uint64_t v959;
  unint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  _BOOL4 v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  _BOOL4 v976;
  uint64_t v977;
  unint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  _BOOL4 v985;
  uint64_t v986;
  uint64_t v987;
  _BOOL4 v988;
  uint64_t v989;
  uint64_t v990;
  unint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  _BOOL4 v996;
  uint64_t v997;
  unint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  _BOOL4 v1003;
  uint64_t v1004;
  unint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  unint64_t v1010;
  int v1011;
  uint64_t v1012;
  unint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  unint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  unint64_t v1020;
  int v1021;
  uint64_t v1022;
  unint64_t v1023;
  uint64_t v1024;
  unint64_t v1025;
  unint64_t v1026;
  int v1027;
  uint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  unint64_t v1036;
  int v1037;
  unint64_t v1038;
  int v1039;
  uint64_t v1040;
  unint64_t v1041;
  unint64_t v1042;
  _BOOL4 v1043;
  uint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  unint64_t v1050;
  int v1051;
  uint64_t v1052;
  unint64_t v1053;
  uint64_t v1054;
  unint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  int v1061;
  uint64_t v1062;
  unint64_t v1063;
  uint64_t v1064;
  unint64_t v1065;
  _BOOL4 v1066;
  unint64_t v1067;
  int v1068;
  uint64_t v1069;
  unint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  int v1078;
  uint64_t v1079;
  unint64_t v1080;
  _BOOL4 v1081;
  unint64_t v1082;
  uint64_t v1084;
  unint64_t v1085;
  uint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  unint64_t v1092;
  int v1093;
  uint64_t v1094;
  unint64_t v1095;
  _BOOL4 v1096;
  unint64_t v1097;
  int v1098;
  uint64_t v1099;
  unint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  int v1107;
  unint64_t v1108;
  int v1109;
  uint64_t v1110;
  unint64_t v1111;
  unint64_t v1112;
  _BOOL4 v1113;
  uint64_t v1114;
  unint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  _BOOL4 v1121;
  uint64_t v1122;
  unint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  _BOOL4 v1129;
  uint64_t v1130;
  unint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  _BOOL4 v1136;
  uint64_t v1137;
  int v1138;
  uint64_t v1139;
  unint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  unint64_t v1145;
  int v1146;
  uint64_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  unint64_t v1151;
  unint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  unint64_t v1157;
  int v1158;
  uint64_t v1159;
  unint64_t v1160;
  unint64_t v1161;
  int v1162;
  uint64_t v1163;
  unint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  _BOOL4 v1168;
  uint64_t v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  _BOOL4 v1176;
  uint64_t v1177;
  unint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  _BOOL4 v1184;
  uint64_t v1185;
  unint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  _BOOL4 v1191;
  uint64_t v1192;
  uint64_t v1194;
  unint64_t v1195;
  uint64_t v1196;
  unint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  unint64_t v1203;
  unint64_t v1204;
  int v1205;
  uint64_t v1206;
  unint64_t v1207;
  unint64_t v1208;
  _BOOL4 v1209;
  unint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  unint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  unint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  _BOOL4 v1223;
  uint64_t v1224;
  uint64_t v1225;
  unint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  _BOOL4 v1229;
  uint64_t v1230;
  uint64_t v1231;
  unint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  _BOOL4 v1235;
  uint64_t v1236;
  uint64_t v1237;
  _BOOL4 v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  _BOOL4 v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  unint64_t v1250;
  uint64_t v1251;
  unint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  unint64_t v1256;
  unint64_t v1257;
  int v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  unint64_t v1264;
  int v1265;
  unint64_t v1266;
  uint64_t v1267;
  unint64_t v1268;
  unint64_t v1269;
  int v1270;
  uint64_t v1271;
  unint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  unint64_t v1275;
  int v1276;
  uint64_t v1277;
  unint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  unint64_t v1283;
  int v1284;
  uint64_t v1285;
  unint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  unint64_t v1289;
  int v1290;
  uint64_t v1291;
  unint64_t v1292;
  uint64_t v1293;
  unint64_t v1294;
  uint64_t v1295;
  unint64_t v1296;
  uint64_t v1297;
  unint64_t v1298;
  unint64_t v1299;
  int v1300;
  uint64_t v1301;
  unint64_t v1302;
  uint64_t v1303;
  unint64_t v1304;
  unint64_t v1305;
  int v1306;
  uint64_t v1307;
  unint64_t v1308;
  uint64_t v1309;
  _BOOL8 v1310;
  uint64_t v1311;
  unint64_t v1312;
  unint64_t v1313;
  unint64_t v1314;
  uint64_t v1315;
  unint64_t v1316;
  uint64_t v1317;
  unint64_t v1318;
  unint64_t v1319;
  uint64_t v1320;
  unint64_t v1321;
  uint64_t v1322;
  unint64_t v1323;
  unint64_t v1324;
  uint64_t v1325;
  unint64_t v1326;
  uint64_t v1327;
  unint64_t v1328;
  unint64_t v1329;
  uint64_t v1330;
  unint64_t v1331;
  uint64_t (*v1332)(uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t);
  unint64_t v1333;
  _BOOL4 v1335;
  _BOOL4 v1336;
  unint64_t v1337;
  _BOOL4 v1338;
  _BOOL4 v1339;
  unint64_t v1340;
  _BOOL4 v1341;
  _BOOL4 v1342;
  unint64_t v1343;
  uint64_t v1344;
  unint64_t v1345;
  _BOOL4 v1346;
  uint64_t v1347;
  unint64_t v1348;
  uint64_t v1349;
  unint64_t v1350;
  unint64_t v1351;
  uint64_t v1352;
  unint64_t v1353;
  _BOOL4 v1354;
  unint64_t v1355;
  uint64_t v1357;
  uint64_t v1358;
  unint64_t v1359;
  _BOOL4 v1360;
  unint64_t v1361;
  uint64_t v1363;
  unint64_t v1364;
  int v1365;
  uint64_t v1366;
  unint64_t v1367;
  unint64_t v1368;
  _BOOL4 v1369;
  uint64_t v1370;
  uint64_t v1371;
  unint64_t v1372;
  unint64_t v1373;
  int v1374;
  uint64_t v1375;
  uint64_t (*v1376)(void);
  _BOOL4 v1377;
  _BOOL4 v1378;
  _BOOL4 v1379;
  unint64_t v1380;
  uint64_t v1381;
  unint64_t v1382;
  _BOOL4 v1383;
  unint64_t v1384;
  unint64_t v1385;
  _BOOL4 v1386;
  unint64_t v1387;
  _BOOL4 v1388;
  unint64_t v1389;
  _BOOL4 v1390;
  uint64_t v1391;
  unint64_t v1392;
  unint64_t v1393;
  _BOOL4 v1394;
  int v1395;
  uint64_t v1396;
  unint64_t v1397;
  unint64_t v1398;
  unint64_t v1399;
  _BOOL4 v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  unint64_t v1404;
  unint64_t v1405;
  uint64_t v1406;
  unint64_t v1407;
  int v1408;
  unint64_t v1409;
  unint64_t v1410;
  _BOOL4 v1411;
  uint64_t v1412;
  unint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  unint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  unint64_t v1420;
  unint64_t v1421;
  unint64_t v1422;
  unint64_t v1423;
  unint64_t v1424;
  unint64_t v1425;
  unint64_t v1426;
  unint64_t v1427;
  unint64_t v1428;
  unint64_t v1429;
  unint64_t v1430;
  unint64_t v1431;
  unint64_t v1432;
  unint64_t v1433;
  unint64_t v1434;
  unint64_t v1435;
  unint64_t v1436;
  unint64_t v1437;
  unint64_t v1438;
  unint64_t v1439;
  unint64_t v1440;
  unint64_t v1441;
  unint64_t v1442;
  int v1443;
  int v1444;
  unint64_t v1445;
  unint64_t v1446;
  unint64_t v1447;
  unint64_t v1448;
  unint64_t v1449;
  unint64_t v1450;
  uint64_t (*v1451)(void);
  unint64_t v1452;
  unint64_t v1453;
  unint64_t v1454;
  unint64_t v1455;
  unint64_t v1456;
  unint64_t v1457;
  unint64_t v1458;
  unint64_t v1459;
  unint64_t v1460;
  unint64_t v1461;
  unint64_t v1462;
  unint64_t v1463;
  unint64_t v1464;
  unint64_t v1465;
  unint64_t v1466;
  unint64_t v1467;
  unint64_t v1468;
  unint64_t v1469;
  unint64_t v1470;
  unint64_t v1471;
  unint64_t v1472;
  unint64_t v1473;
  unint64_t v1474;
  unint64_t v1475;
  unint64_t v1476;
  unint64_t v1477;
  unint64_t v1478;
  unint64_t v1479;
  unint64_t v1480;
  unint64_t v1481;
  unint64_t v1482;
  unint64_t v1483;
  unint64_t v1484;
  unint64_t v1485;
  unint64_t v1486;
  unint64_t v1487;
  unint64_t v1488;
  unint64_t v1489;
  unint64_t v1490;
  unint64_t v1491;
  unint64_t v1492;
  unint64_t v1493;
  unint64_t v1494;
  unint64_t v1495;
  unint64_t v1496;
  unint64_t v1497;
  unint64_t v1498;
  unint64_t v1499;
  unint64_t v1500;
  unint64_t v1501;
  unint64_t v1502;
  unint64_t v1503;
  unint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  _BOOL4 v1507;
  unint64_t v1508;
  uint64_t v1510;
  unint64_t v1511;
  unint64_t v1512;
  unint64_t v1513;
  unint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  _BOOL4 v1517;
  unint64_t v1518;
  uint64_t v1520;
  unint64_t v1521;
  uint64_t v1522;
  unint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  unint64_t v1527;
  int v1528;
  uint64_t v1529;
  unint64_t v1530;
  uint64_t v1531;
  unint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  _BOOL4 v1537;
  uint64_t v1538;
  unint64_t v1539;
  unint64_t v1540;
  int v1541;
  unint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  unint64_t v1545;
  int v1546;
  uint64_t v1547;
  unint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  _BOOL4 v1553;
  uint64_t v1554;
  uint64_t v1556;
  unint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  unint64_t v1561;
  int v1562;
  uint64_t v1563;
  unint64_t v1564;
  uint64_t v1565;
  unint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  _BOOL4 v1571;
  uint64_t v1572;
  unint64_t v1573;
  unint64_t v1574;
  int v1575;
  unint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  _BOOL4 v1579;
  unint64_t v1580;
  uint64_t v1582;
  unint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  unint64_t v1587;
  int v1588;
  uint64_t v1589;
  unint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  unint64_t v1594;
  int v1595;
  uint64_t v1596;
  unint64_t v1597;
  uint64_t v1598;
  unint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  _BOOL4 v1604;
  uint64_t v1605;
  unint64_t v1606;
  unint64_t v1607;
  unint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  unint64_t v1611;
  int v1612;
  uint64_t v1613;
  unint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  unint64_t v1618;
  int v1619;
  uint64_t v1620;
  unint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  _BOOL4 v1625;
  uint64_t v1626;
  uint64_t v1628;
  unint64_t v1629;
  uint64_t v1630;
  unint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  _BOOL4 v1636;
  uint64_t v1637;
  unint64_t v1638;
  uint64_t v1639;
  _BOOL4 v1640;
  uint64_t v1641;
  unint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  _BOOL4 v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  unint64_t v1649;
  _BOOL4 v1650;
  uint64_t v1651;
  unint64_t v1652;
  uint64_t v1653;
  unint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  unint64_t v1659;
  int v1660;
  uint64_t v1661;
  unint64_t v1662;
  uint64_t v1663;
  unint64_t v1664;
  unint64_t v1665;
  uint64_t v1666;
  unint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1671;
  unint64_t v1672;
  _BOOL4 v1673;
  unint64_t v1674;
  uint64_t v1676;
  unint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  _BOOL4 v1680;
  unint64_t v1681;
  uint64_t v1682;
  unint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  _BOOL4 v1686;
  unint64_t v1687;
  unint64_t v1688;
  unint64_t v1689;
  unint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  unint64_t v1693;
  int v1694;
  uint64_t v1695;
  unint64_t v1696;
  uint64_t v1697;
  unint64_t v1698;
  unint64_t v1699;
  unint64_t v1700;
  unint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  unint64_t v1704;
  int v1705;
  uint64_t v1706;
  unint64_t v1707;
  unint64_t v1708;
  int v1709;
  uint64_t v1710;
  unint64_t v1711;
  uint64_t v1712;
  unint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  _BOOL4 v1717;
  uint64_t v1718;
  int v1719;
  uint64_t v1720;
  unint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  _BOOL4 v1726;
  uint64_t v1727;
  int v1728;
  uint64_t v1729;
  unint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  _BOOL4 v1735;
  uint64_t v1736;
  int v1737;
  uint64_t v1738;
  unint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  _BOOL4 v1744;
  uint64_t v1745;
  int v1746;
  uint64_t v1747;
  unint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  _BOOL4 v1753;
  uint64_t v1754;
  uint64_t v1756;
  unint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  unint64_t v1760;
  unint64_t v1761;
  uint64_t v1763;
  unint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  _BOOL4 v1767;
  unint64_t v1768;
  uint64_t v1769;
  unint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  unint64_t v1776;
  unint64_t v1777;
  int v1778;
  uint64_t v1779;
  unint64_t v1780;
  _BOOL4 v1781;
  unint64_t v1782;
  uint64_t v1784;
  unint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  unint64_t v1788;
  int v1789;
  uint64_t v1790;
  unint64_t v1791;
  unint64_t v1792;
  unint64_t v1793;
  unint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  _BOOL4 v1797;
  unint64_t v1798;
  unint64_t v1799;
  unint64_t v1800;
  unint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  _BOOL4 v1804;
  unint64_t v1805;
  uint64_t v1807;
  unint64_t v1808;
  uint64_t v1809;
  unint64_t v1810;
  unint64_t v1811;
  int v1812;
  uint64_t v1813;
  unint64_t v1814;
  uint64_t v1815;
  unint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  unint64_t v1820;
  int v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  unint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  unint64_t v1829;
  int v1830;
  uint64_t v1831;
  unint64_t v1832;
  uint64_t v1833;
  unint64_t v1834;
  uint64_t v1835;
  unint64_t v1836;
  unint64_t v1837;
  unint64_t v1838;
  unint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  unint64_t v1842;
  int v1843;
  uint64_t v1844;
  unint64_t v1845;
  unint64_t v1846;
  int v1847;
  uint64_t v1848;
  unint64_t v1849;
  unint64_t v1850;
  unint64_t v1851;
  unint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  _BOOL4 v1855;
  unint64_t v1856;
  uint64_t v1857;
  unint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  _BOOL4 v1863;
  uint64_t v1864;
  int v1865;
  uint64_t v1866;
  unint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  _BOOL4 v1872;
  uint64_t v1873;
  int v1874;
  uint64_t v1875;
  unint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  _BOOL4 v1881;
  uint64_t v1882;
  int v1883;
  uint64_t v1884;
  unint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  unint64_t v1890;
  int v1891;
  uint64_t v1892;
  unint64_t v1893;
  uint64_t v1894;
  unint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  unint64_t v1898;
  uint64_t v1900;
  unint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  unint64_t v1904;
  int v1905;
  uint64_t v1906;
  unint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  _BOOL4 v1910;
  uint64_t v1911;
  uint64_t v1912;
  unint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  unint64_t v1920;
  int v1921;
  uint64_t v1922;
  unint64_t v1923;
  _BOOL4 v1924;
  uint64_t v1925;
  uint64_t v1927;
  unint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  _BOOL4 v1932;
  uint64_t v1933;
  unint64_t v1934;
  unint64_t v1935;
  unint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  _BOOL4 v1939;
  unint64_t v1940;
  uint64_t v1942;
  unint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  unint64_t v1946;
  int v1947;
  uint64_t v1948;
  unint64_t v1949;
  uint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  unint64_t v1953;
  int v1954;
  uint64_t v1955;
  unint64_t v1956;
  uint64_t v1957;
  unint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  uint64_t v1961;
  unint64_t v1962;
  int v1963;
  uint64_t v1964;
  unint64_t v1965;
  unint64_t v1966;
  int v1967;
  uint64_t v1968;
  unint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  uint64_t v1972;
  _BOOL4 v1973;
  uint64_t v1974;
  uint64_t v1976;
  unint64_t v1977;
  uint64_t v1978;
  unint64_t v1979;
  uint64_t v1980;
  unint64_t v1981;
  unint64_t v1982;
  uint64_t v1983;
  unint64_t v1984;
  uint64_t v1985;
  unint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  _BOOL4 v1990;
  uint64_t v1991;
  uint64_t v1992;
  unint64_t v1993;
  unint64_t v1994;
  unint64_t v1995;
  unint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  _BOOL4 v1999;
  unint64_t v2000;
  int v2001;
  uint64_t v2002;
  unint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;
  _BOOL4 v2008;
  uint64_t v2009;
  int v2010;
  uint64_t v2011;
  unint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  uint64_t v2016;
  uint64_t v2017;
  unint64_t v2018;
  int v2019;
  unint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  unint64_t v2025;
  uint64_t v2026;
  unint64_t v2027;
  int v2028;
  uint64_t v2029;
  unint64_t v2030;
  unint64_t v2031;
  uint64_t v2032;
  unint64_t v2033;
  uint64_t v2035;
  unint64_t v2036;
  uint64_t v2037;
  unint64_t v2038;
  uint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  unint64_t v2043;
  int v2044;
  uint64_t v2045;
  unint64_t v2046;
  _BOOL4 v2047;
  unint64_t v2048;
  int v2049;
  uint64_t v2050;
  uint64_t v2051;
  unint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  unint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  int v2058;
  uint64_t v2059;
  uint64_t v2060;
  unint64_t v2061;
  int v2062;
  uint64_t v2063;
  uint64_t v2064;
  unint64_t v2065;
  unint64_t v2066;
  _BOOL4 v2067;
  unint64_t v2068;
  unint64_t v2069;
  unint64_t v2070;
  unint64_t v2071;
  uint64_t v2072;
  uint64_t v2073;
  _BOOL4 v2074;
  unint64_t v2075;
  uint64_t v2077;
  unint64_t v2078;
  uint64_t v2079;
  unint64_t v2080;
  unint64_t v2081;
  unint64_t v2082;
  unint64_t v2083;
  uint64_t v2084;
  uint64_t v2085;
  unint64_t v2086;
  int v2087;
  uint64_t v2088;
  unint64_t v2089;
  _BOOL4 v2090;
  unint64_t v2091;
  uint64_t v2093;
  unint64_t v2094;
  unint64_t v2095;
  unint64_t v2096;
  unint64_t v2097;
  uint64_t v2098;
  uint64_t v2099;
  _BOOL4 v2100;
  unint64_t v2101;
  uint64_t v2103;
  unint64_t v2104;
  uint64_t v2105;
  unint64_t v2106;
  unint64_t v2107;
  int v2108;
  uint64_t v2109;
  unint64_t v2110;
  uint64_t v2111;
  unint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  _BOOL4 v2116;
  uint64_t v2117;
  uint64_t v2119;
  unint64_t v2120;
  uint64_t v2121;
  unint64_t v2122;
  unint64_t v2123;
  uint64_t v2124;
  unint64_t v2125;
  uint64_t v2126;
  unint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  _BOOL4 v2131;
  uint64_t v2132;
  uint64_t v2133;
  unint64_t v2134;
  uint64_t v2135;
  uint64_t v2136;
  uint64_t v2137;
  uint64_t v2138;
  _BOOL4 v2139;
  uint64_t v2140;
  int v2141;
  uint64_t v2142;
  unint64_t v2143;
  uint64_t v2144;
  uint64_t v2145;
  uint64_t v2146;
  uint64_t v2147;
  _BOOL4 v2148;
  uint64_t v2149;
  int v2150;
  uint64_t v2151;
  unint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  uint64_t v2155;
  uint64_t v2156;
  _BOOL4 v2157;
  uint64_t v2158;
  int v2159;
  uint64_t v2160;
  unint64_t v2161;
  uint64_t v2162;
  uint64_t v2163;
  uint64_t v2164;
  uint64_t v2165;
  _BOOL4 v2166;
  uint64_t v2167;
  int v2168;
  uint64_t v2169;
  uint64_t v2170;
  unint64_t v2171;
  uint64_t v2172;
  uint64_t v2173;
  unint64_t v2174;
  unint64_t v2175;
  BOOL v2176;
  uint64_t v2177;
  uint64_t v2178;
  uint64_t v2179;
  uint64_t v2180;
  uint64_t v2181;
  unint64_t v2182;
  unint64_t v2183;
  int v2184;
  uint64_t v2185;
  unint64_t v2186;
  _BOOL4 v2187;
  unint64_t v2188;
  unint64_t v2189;
  unint64_t v2190;
  unint64_t v2191;
  uint64_t v2192;
  uint64_t v2193;
  _BOOL4 v2194;
  unint64_t v2195;
  uint64_t v2197;
  unint64_t v2198;
  uint64_t v2199;
  unint64_t v2200;
  uint64_t v2201;
  uint64_t v2202;
  unint64_t v2203;
  int v2204;
  uint64_t v2205;
  unint64_t v2206;
  uint64_t v2207;
  uint64_t v2208;
  unint64_t v2209;
  int v2210;
  uint64_t v2211;
  unint64_t v2212;
  uint64_t v2213;
  uint64_t v2214;
  uint64_t v2215;
  unint64_t v2216;
  int v2217;
  uint64_t v2218;
  unint64_t v2219;
  unint64_t v2220;
  int v2221;
  uint64_t v2222;
  unint64_t v2223;
  uint64_t v2224;
  uint64_t v2225;
  uint64_t v2226;
  unint64_t v2227;
  int v2228;
  uint64_t v2229;
  unint64_t v2230;
  uint64_t v2231;
  unint64_t v2232;
  uint64_t v2233;
  uint64_t v2234;
  uint64_t v2235;
  unint64_t v2236;
  int v2237;
  uint64_t v2238;
  unint64_t v2239;
  _BOOL4 v2240;
  unint64_t v2241;
  uint64_t v2243;
  unint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  uint64_t v2247;
  unint64_t v2248;
  int v2249;
  uint64_t v2250;
  unint64_t v2251;
  uint64_t v2252;
  unint64_t v2253;
  unint64_t v2254;
  uint64_t v2255;
  unint64_t v2256;
  uint64_t v2257;
  uint64_t v2258;
  uint64_t v2259;
  _BOOL4 v2260;
  uint64_t v2261;
  uint64_t v2263;
  unint64_t v2264;
  uint64_t v2265;
  uint64_t v2266;
  unint64_t v2267;
  unint64_t v2268;
  uint64_t v2269;
  unint64_t v2270;
  uint64_t v2271;
  unint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  uint64_t v2275;
  _BOOL4 v2276;
  uint64_t v2277;
  int v2278;
  uint64_t v2279;
  unint64_t v2280;
  uint64_t v2281;
  unint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  _BOOL4 v2286;
  uint64_t v2287;
  int v2288;
  uint64_t v2289;
  unint64_t v2290;
  uint64_t v2291;
  uint64_t v2292;
  uint64_t v2293;
  uint64_t v2294;
  _BOOL4 v2295;
  uint64_t v2296;
  uint64_t v2297;
  unint64_t v2298;
  uint64_t v2299;
  uint64_t v2300;
  uint64_t v2301;
  uint64_t v2302;
  _BOOL4 v2303;
  uint64_t v2304;
  unint64_t v2305;
  unint64_t v2306;
  unint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  unint64_t v2310;
  uint64_t v2312;
  unint64_t v2313;
  uint64_t v2314;
  unint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  uint64_t v2319;
  unint64_t v2320;
  int v2321;
  uint64_t v2322;
  unint64_t v2323;
  uint64_t v2324;
  unint64_t v2325;
  unint64_t v2326;
  uint64_t v2327;
  unint64_t v2328;
  uint64_t v2329;
  unint64_t v2330;
  uint64_t v2332;
  uint64_t v2333;
  uint64_t v2334;
  unint64_t v2335;
  unint64_t v2336;
  uint64_t v2337;
  uint64_t v2338;
  int v2339;
  uint64_t v2340;
  uint64_t v2341;
  unint64_t v2342;
  int v2343;
  uint64_t v2344;
  uint64_t v2345;
  unint64_t v2346;
  uint64_t v2347;
  unint64_t v2348;
  unint64_t v2349;
  unint64_t v2350;
  int v2351;
  uint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  uint64_t v2355;
  unint64_t v2356;
  uint64_t v2357;
  unint64_t v2358;
  int v2359;
  uint64_t v2360;
  unint64_t v2361;
  unint64_t v2362;
  int v2363;
  uint64_t v2364;
  unint64_t v2365;
  uint64_t v2366;
  unint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  uint64_t v2370;
  unint64_t v2371;
  int v2372;
  uint64_t v2373;
  unint64_t v2374;
  unint64_t v2375;
  int v2376;
  uint64_t v2377;
  unint64_t v2378;
  uint64_t v2379;
  unint64_t v2380;
  uint64_t v2381;
  uint64_t v2382;
  uint64_t v2383;
  unint64_t v2384;
  int v2385;
  uint64_t v2386;
  unint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  _BOOL4 v2390;
  unint64_t v2391;
  uint64_t v2393;
  unint64_t v2394;
  uint64_t v2395;
  unint64_t v2396;
  uint64_t v2397;
  uint64_t v2398;
  uint64_t v2399;
  _BOOL4 v2400;
  uint64_t v2401;
  uint64_t v2403;
  unint64_t v2404;
  uint64_t v2405;
  unint64_t v2406;
  unint64_t v2407;
  uint64_t v2408;
  unint64_t v2409;
  uint64_t v2410;
  unint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  unint64_t v2415;
  int v2416;
  uint64_t v2417;
  unint64_t v2418;
  uint64_t v2419;
  unint64_t v2420;
  unint64_t v2421;
  uint64_t v2422;
  unint64_t v2423;
  unint64_t v2424;
  unint64_t v2425;
  unint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  unint64_t v2429;
  int v2430;
  uint64_t v2431;
  unint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  unint64_t v2435;
  unint64_t v2436;
  unint64_t v2437;
  uint64_t v2438;
  unint64_t v2439;
  unint64_t v2440;
  unint64_t v2441;
  unint64_t v2442;
  uint64_t v2443;
  uint64_t v2444;
  _BOOL4 v2445;
  unint64_t v2446;
  int v2447;
  uint64_t v2448;
  uint64_t v2449;
  unint64_t v2450;
  unint64_t v2451;
  uint64_t v2452;
  unint64_t v2453;
  unint64_t v2454;
  uint64_t v2455;
  unint64_t v2456;
  uint64_t v2457;
  unint64_t v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  unint64_t v2462;
  int v2463;
  uint64_t v2464;
  unint64_t v2465;
  uint64_t v2466;
  unint64_t v2467;
  unint64_t v2468;
  uint64_t v2469;
  unint64_t v2470;
  unint64_t v2471;
  unint64_t v2472;
  unint64_t v2473;
  uint64_t v2474;
  uint64_t v2475;
  unint64_t v2476;
  int v2477;
  uint64_t v2478;
  uint64_t v2479;
  unint64_t v2480;
  unint64_t v2481;
  uint64_t v2482;
  unint64_t v2483;
  uint64_t v2484;
  unint64_t v2485;
  uint64_t v2486;
  uint64_t v2487;
  uint64_t v2488;
  unint64_t v2489;
  int v2490;
  uint64_t v2491;
  unint64_t v2492;
  uint64_t v2493;
  unint64_t v2494;
  uint64_t v2495;
  unint64_t v2496;
  uint64_t v2497;
  uint64_t v2498;
  uint64_t v2499;
  unint64_t v2500;
  int v2501;
  uint64_t v2502;
  unint64_t v2503;
  uint64_t v2504;
  unint64_t v2505;
  unint64_t v2506;
  int v2507;
  uint64_t v2508;
  unint64_t v2509;
  uint64_t v2510;
  unint64_t v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  _BOOL4 v2515;
  uint64_t v2516;
  int v2517;
  uint64_t v2518;
  uint64_t v2519;
  uint64_t v2520;
  unint64_t v2521;
  _BOOL4 v2522;
  unint64_t v2523;
  int v2524;
  uint64_t v2525;
  uint64_t v2526;
  unint64_t v2527;
  uint64_t v2528;
  unint64_t v2529;
  uint64_t v2530;
  uint64_t v2531;
  uint64_t v2532;
  unint64_t v2533;
  int v2534;
  uint64_t v2535;
  unint64_t v2536;
  unint64_t v2537;
  _BOOL4 v2538;
  unint64_t v2539;
  uint64_t v2541;
  unint64_t v2542;
  uint64_t v2543;
  unint64_t v2544;
  uint64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  _BOOL4 v2548;
  uint64_t v2549;
  int v2550;
  uint64_t v2551;
  unint64_t v2552;
  uint64_t v2553;
  uint64_t v2554;
  uint64_t v2555;
  _BOOL4 v2556;
  uint64_t v2557;
  int v2558;
  uint64_t v2559;
  uint64_t v2560;
  uint64_t v2561;
  unint64_t v2562;
  int v2563;
  uint64_t v2564;
  unint64_t v2565;
  uint64_t v2566;
  uint64_t v2567;
  uint64_t v2568;
  _BOOL4 v2569;
  uint64_t v2570;
  int v2571;
  uint64_t v2572;
  uint64_t v2573;
  uint64_t v2574;
  unint64_t v2575;
  int v2576;
  uint64_t v2577;
  unint64_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  uint64_t v2581;
  _BOOL4 v2582;
  uint64_t v2583;
  int v2584;
  uint64_t v2585;
  uint64_t v2586;
  uint64_t v2587;
  unint64_t v2588;
  int v2589;
  uint64_t v2590;
  unint64_t v2591;
  uint64_t v2592;
  uint64_t v2593;
  uint64_t v2594;
  _BOOL4 v2595;
  uint64_t v2596;
  int v2597;
  uint64_t v2598;
  uint64_t v2599;
  uint64_t v2600;
  unint64_t v2601;
  _BOOL4 v2602;
  uint64_t v2603;
  int v2604;
  uint64_t v2605;
  unint64_t v2606;
  uint64_t v2607;
  uint64_t v2608;
  uint64_t v2609;
  _BOOL4 v2610;
  uint64_t v2611;
  int v2612;
  uint64_t v2613;
  uint64_t v2614;
  uint64_t v2615;
  unint64_t v2616;
  int v2617;
  uint64_t v2618;
  unint64_t v2619;
  uint64_t v2620;
  uint64_t v2621;
  uint64_t v2622;
  unint64_t v2623;
  int v2624;
  uint64_t v2625;
  uint64_t v2626;
  unint64_t v2627;
  unint64_t v2628;
  int v2629;
  uint64_t v2630;
  unint64_t v2631;
  uint64_t v2632;
  uint64_t v2633;
  uint64_t v2634;
  _BOOL4 v2635;
  uint64_t v2636;
  int v2637;
  uint64_t v2638;
  unint64_t v2639;
  uint64_t v2640;
  unint64_t v2641;
  __int128 v2642;
  uint64_t v2643;
  uint64_t v2644;
  uint64_t v2645;
  uint64_t v2646;
  uint64_t v2647;
  unint64_t v2648;
  int v2649;
  uint64_t v2650;
  unint64_t v2651;
  unint64_t v2652;
  int v2653;
  uint64_t v2654;
  unint64_t v2655;
  uint64_t v2656;
  uint64_t v2657;
  uint64_t v2658;
  uint64_t v2659;
  unint64_t v2660;
  int v2661;
  uint64_t v2662;
  unint64_t v2663;
  unint64_t v2664;
  _BOOL4 v2665;
  unint64_t v2666;
  uint64_t v2668;
  unint64_t v2669;
  uint64_t v2670;
  uint64_t v2671;
  uint64_t v2672;
  unint64_t v2673;
  int v2674;
  uint64_t v2675;
  unint64_t v2676;
  uint64_t v2677;
  unint64_t v2678;
  unint64_t v2679;
  int v2680;
  uint64_t v2681;
  unint64_t v2682;
  uint64_t v2683;
  uint64_t v2684;
  uint64_t v2685;
  _BOOL4 v2686;
  uint64_t v2687;
  unint64_t v2688;
  uint64_t v2689;
  uint64_t v2690;
  _BOOL4 v2691;
  uint64_t v2692;
  uint64_t v2693;
  unint64_t v2694;
  unint64_t v2695;
  uint64_t v2696;
  unint64_t v2697;
  uint64_t v2698;
  uint64_t v2699;
  _BOOL4 v2700;
  uint64_t v2701;
  uint64_t v2702;
  unint64_t v2703;
  unint64_t v2704;
  uint64_t v2705;
  unint64_t v2706;
  uint64_t v2707;
  uint64_t v2708;
  uint64_t v2709;
  _BOOL4 v2710;
  uint64_t v2711;
  uint64_t v2712;
  unint64_t v2713;
  unint64_t v2714;
  uint64_t v2715;
  unint64_t v2716;
  uint64_t v2717;
  uint64_t v2718;
  uint64_t v2719;
  _BOOL4 v2720;
  uint64_t v2721;
  uint64_t v2722;
  unint64_t v2723;
  _BOOL4 v2724;
  unint64_t v2725;
  uint64_t v2726;
  unint64_t v2727;
  uint64_t v2728;
  uint64_t v2729;
  uint64_t v2730;
  unint64_t v2731;
  int v2732;
  uint64_t v2733;
  unint64_t v2734;
  uint64_t v2735;
  uint64_t v2736;
  uint64_t v2737;
  unint64_t v2738;
  unint64_t v2739;
  int v2740;
  uint64_t v2741;
  unint64_t v2742;
  uint64_t v2743;
  uint64_t v2744;
  uint64_t v2745;
  unint64_t v2746;
  int v2747;
  uint64_t v2748;
  uint64_t v2749;
  unint64_t v2750;
  unint64_t v2751;
  int v2752;
  uint64_t v2753;
  unint64_t v2754;
  uint64_t v2755;
  unint64_t v2756;
  uint64_t v2757;
  unsigned int v2758;
  uint64_t v2759;
  BOOL v2760;
  uint64_t v2761;
  unint64_t v2762;
  unsigned int v2763;
  unsigned int v2764;
  unint64_t v2765;
  int v2766;
  BOOL v2767;
  uint64_t v2768;
  uint64_t v2769;
  uint64_t v2770;
  BOOL v2771;
  uint64_t v2772;
  uint64_t v2773;
  uint64_t v2774;
  uint64_t v2775;
  uint64_t v2776;
  unsigned int v2777;
  uint64_t v2778;
  unint64_t v2779;
  BOOL v2780;
  _BOOL8 v2781;
  uint64_t v2782;
  _BOOL8 v2783;
  BOOL v2784;
  uint64_t v2785;
  uint64_t v2786;
  uint64_t v2787;
  BOOL v2788;
  uint64_t v2789;
  unint64_t v2790;
  uint64_t v2791;
  unint64_t v2792;
  uint64_t v2793;
  unint64_t v2794;
  unint64_t v2795;
  unint64_t v2796;
  uint64_t v2797;
  uint64_t v2798;
  unint64_t v2799;
  unint64_t v2800;
  uint64_t v2801;
  uint64_t v2802;
  uint64_t (*v2803)(void);
  unint64_t v2804;
  unint64_t v2805;
  _BOOL4 v2806;
  int v2807;
  unint64_t v2808;
  unint64_t v2809;
  _BOOL4 v2810;
  int v2811;
  unint64_t v2812;
  _BOOL4 v2813;
  unint64_t v2814;
  _BOOL4 v2815;
  unint64_t v2816;
  _BOOL4 v2817;
  unint64_t v2818;
  unint64_t v2819;
  _BOOL4 v2820;
  unint64_t v2821;
  int v2822;
  unint64_t v2823;
  unint64_t v2824;
  _BOOL4 v2825;
  int v2826;
  unint64_t v2827;
  _BOOL4 v2828;
  unint64_t v2829;
  uint64_t v2830;
  unint64_t v2831;
  _BOOL4 v2832;
  unint64_t v2833;
  _BOOL4 v2834;
  unint64_t v2835;
  _BOOL4 v2836;
  uint64_t v2837;
  uint64_t v2839;
  unint64_t v2840;
  _BOOL4 v2841;
  uint64_t v2842;
  unint64_t v2843;
  _BOOL4 v2844;
  uint64_t v2845;
  uint64_t v2846;
  uint64_t v2847;
  unint64_t v2848;
  _BOOL4 v2849;
  uint64_t v2850;
  int v2851;
  int v2852;
  unint64_t v2853;
  _BOOL4 v2854;
  uint64_t v2855;
  uint64_t v2856;
  uint64_t v2857;
  uint64_t v2858;
  uint64_t v2859;
  uint64_t v2860;
  unint64_t v2861;
  _BOOL4 v2862;
  unint64_t v2863;
  _BOOL4 v2864;
  int v2865;
  unint64_t v2866;
  _BOOL4 v2867;
  uint64_t v2869;
  uint64_t v2870;
  int v2871;
  int v2872;
  uint64_t v2873;
  uint64_t v2874;
  uint64_t v2875;
  uint64_t (*v2876)(unint64_t);
  unint64_t v2877;
  unint64_t v2878;
  unint64_t v2879;
  _BOOL4 v2880;
  int v2881;
  unint64_t v2882;
  unint64_t v2883;
  _BOOL4 v2884;
  int v2885;
  unint64_t v2886;
  unint64_t v2887;
  _BOOL4 v2888;
  int v2889;
  _BOOL8 v2890;
  unint64_t v2891;
  unint64_t v2892;
  _BOOL4 v2893;
  int v2894;
  unint64_t v2895;
  unint64_t v2896;
  _BOOL4 v2897;
  int v2898;
  unint64_t v2899;
  _BOOL4 v2900;
  unint64_t v2901;
  _BOOL4 v2902;
  unint64_t v2903;
  _BOOL4 v2904;
  unint64_t v2905;
  _BOOL4 v2906;
  unint64_t v2907;
  unint64_t v2908;
  _BOOL4 v2909;
  _BOOL4 v2910;
  unint64_t v2911;
  _BOOL4 v2912;
  unint64_t v2913;
  uint64_t v2914;
  unint64_t v2915;
  unint64_t v2916;
  _BOOL4 v2917;
  unint64_t v2918;
  _BOOL4 v2919;
  unint64_t v2920;
  _BOOL4 v2921;
  uint64_t v2922;
  unint64_t v2923;
  uint64_t v2924;
  unint64_t v2925;
  int v2926;
  uint64_t v2927;
  unint64_t v2928;
  unint64_t v2929;
  _BOOL4 v2930;
  uint64_t v2931;
  unint64_t v2932;
  int v2933;
  uint64_t v2934;
  unint64_t v2935;
  uint64_t v2936;
  unint64_t v2937;
  uint64_t v2938;
  unint64_t v2939;
  int v2940;
  uint64_t v2941;
  uint64_t v2942;
  unint64_t v2943;
  unint64_t v2944;
  _BOOL4 v2945;
  uint64_t v2946;
  unint64_t v2947;
  unint64_t v2948;
  uint64_t v2949;
  uint64_t v2950;
  unint64_t v2951;
  uint64_t v2952;
  unint64_t v2953;
  _BOOL4 v2954;
  unint64_t v2955;
  _BOOL4 v2956;
  unint64_t v2957;
  uint64_t v2958;
  unint64_t v2959;
  uint64_t v2960;
  unint64_t v2961;
  unint64_t v2962;
  _BOOL4 v2963;
  unint64_t v2964;
  uint64_t v2965;
  unint64_t v2966;
  uint64_t v2967;
  unint64_t v2968;
  _BOOL4 v2969;
  unint64_t v2970;
  uint64_t v2971;
  uint64_t v2972;
  unint64_t v2973;
  uint64_t v2974;
  unint64_t v2975;
  _BOOL4 v2976;
  int v2977;
  unint64_t v2978;
  uint64_t v2979;
  unint64_t v2980;
  unint64_t v2981;
  _BOOL4 v2982;
  unint64_t v2983;
  unint64_t v2984;
  _BOOL4 v2985;
  uint64_t v2986;
  uint64_t v2987;
  uint64_t v2988;
  uint64_t v2989;
  int v2990;
  unint64_t v2991;
  _BOOL4 v2992;
  int v2993;
  uint64_t v2994;
  uint64_t v2995;
  int v2996;
  int v2997;
  unint64_t v2998;
  unint64_t v2999;
  _BOOL4 v3000;
  uint64_t v3001;
  unint64_t v3002;
  unint64_t v3003;
  _BOOL4 v3004;
  uint64_t v3005;
  uint64_t v3006;
  uint64_t v3007;
  unint64_t v3008;
  unint64_t v3009;
  _BOOL4 v3010;
  int v3011;
  uint64_t v3012;
  int v3013;
  int v3014;
  unint64_t v3015;
  unint64_t v3016;
  unint64_t v3017;
  _BOOL4 v3018;
  uint64_t v3019;
  uint64_t v3020;
  unint64_t v3021;
  unint64_t v3022;
  unint64_t v3023;
  _BOOL4 v3024;
  uint64_t v3025;
  int v3026;
  uint64_t v3027;
  unint64_t v3028;
  unint64_t v3029;
  unint64_t v3030;
  _BOOL4 v3031;
  int v3032;
  uint64_t v3033;
  int v3034;
  uint64_t v3035;
  uint64_t v3036;
  uint64_t v3037;
  uint64_t v3038;
  uint64_t (*v3039)(void);
  _BOOL4 v3040;
  _BOOL4 v3041;
  unint64_t v3042;
  unint64_t v3043;
  uint64_t v3044;
  unint64_t v3045;
  uint64_t v3046;
  _BOOL4 v3047;
  _BOOL4 v3048;
  _BOOL4 v3049;
  _BOOL8 v3050;
  unint64_t v3051;
  unint64_t v3052;
  _BOOL4 v3053;
  unint64_t v3054;
  _BOOL4 v3055;
  unint64_t v3056;
  _BOOL4 v3057;
  unint64_t v3058;
  _BOOL4 v3059;
  uint64_t v3060;
  unint64_t v3061;
  uint64_t v3063;
  unint64_t v3064;
  int v3065;
  uint64_t v3066;
  unint64_t v3067;
  uint64_t v3068;
  unint64_t v3069;
  int v3070;
  uint64_t v3071;
  unint64_t v3072;
  uint64_t v3073;
  unint64_t v3074;
  uint64_t v3075;
  unint64_t v3076;
  uint64_t v3077;
  unint64_t v3078;
  uint64_t v3079;
  unint64_t v3080;
  uint64_t v3081;
  unint64_t v3082;
  uint64_t (*v3083)(void);
  unint64_t v3084;
  unint64_t v3085;
  _BOOL4 v3086;
  unint64_t v3087;
  unint64_t v3088;
  _BOOL4 v3089;
  unint64_t v3090;
  unint64_t v3091;
  _BOOL4 v3092;
  unint64_t v3093;
  unint64_t v3094;
  _BOOL4 v3095;
  unint64_t v3096;
  unint64_t v3097;
  _BOOL4 v3098;
  unint64_t v3099;
  unint64_t v3100;
  _BOOL4 v3101;
  unint64_t v3102;
  unint64_t v3103;
  _BOOL4 v3104;
  unint64_t v3105;
  unint64_t v3106;
  _BOOL4 v3107;
  unint64_t v3108;
  unint64_t v3109;
  _BOOL4 v3110;
  unint64_t v3111;
  unint64_t v3112;
  _BOOL4 v3113;
  unint64_t v3114;
  unint64_t v3115;
  _BOOL4 v3116;
  unint64_t v3117;
  unint64_t v3118;
  _BOOL4 v3119;
  unint64_t v3120;
  _BOOL4 v3121;
  _BOOL8 v3122;
  unint64_t v3123;
  _BOOL4 v3124;
  unint64_t v3125;
  unint64_t v3126;
  _BOOL4 v3127;
  _BOOL4 v3128;
  _BOOL8 v3129;
  unint64_t v3130;
  unint64_t v3131;
  unint64_t v3132;
  _BOOL4 v3133;
  unint64_t v3134;
  _BOOL4 v3135;
  unint64_t v3136;
  _BOOL4 v3137;
  unint64_t v3138;
  _BOOL4 v3139;
  unint64_t v3140;
  _BOOL4 v3141;
  unint64_t v3142;
  _BOOL4 v3143;
  uint64_t v3144;
  unint64_t v3145;
  int v3146;
  int v3147;
  unint64_t v3148;
  _BOOL4 v3149;
  uint64_t v3150;
  unint64_t v3151;
  uint64_t v3152;
  unint64_t v3153;
  uint64_t v3154;
  unint64_t v3155;
  int v3156;
  uint64_t v3157;
  unint64_t v3158;
  int v3159;
  uint64_t v3160;
  unint64_t v3161;
  uint64_t v3162;
  unint64_t v3163;
  uint64_t v3164;
  unint64_t v3165;
  uint64_t v3166;
  unint64_t v3167;
  uint64_t v3168;
  unint64_t v3169;
  uint64_t v3170;
  unint64_t v3171;
  uint64_t v3172;
  unint64_t v3173;
  uint64_t v3174;
  unint64_t v3175;
  uint64_t v3176;
  unint64_t v3177;
  uint64_t v3178;
  unint64_t v3179;
  uint64_t v3180;
  unint64_t v3181;
  uint64_t v3182;
  unint64_t v3183;
  uint64_t v3184;
  unint64_t v3185;
  _BOOL4 v3186;
  uint64_t v3187;
  uint64_t v3188;
  unint64_t v3189;
  _BOOL4 v3190;
  unint64_t v3191;
  uint64_t v3192;
  unint64_t v3193;
  _BOOL4 v3194;
  uint64_t v3195;
  int v3196;
  uint64_t v3197;
  uint64_t v3198;
  int v3199;
  uint64_t v3200;
  int v3201;
  unint64_t v3202;
  _BOOL4 v3203;
  unint64_t v3204;
  uint64_t v3205;
  uint64_t v3206;
  unint64_t v3207;
  _BOOL4 v3208;
  unint64_t v3209;
  _BOOL4 v3210;
  uint64_t v3211;
  uint64_t v3212;
  int v3213;
  uint64_t v3214;
  uint64_t v3215;
  int v3216;
  uint64_t v3217;
  unint64_t v3218;
  _BOOL4 v3219;
  uint64_t v3220;
  uint64_t v3221;
  int v3222;
  uint64_t v3223;
  uint64_t v3224;
  uint64_t v3225;
  uint64_t v3226;
  uint64_t v3227;
  uint64_t v3228;
  uint64_t v3229;
  int v3230;
  uint64_t (*v3231)(void);
  unint64_t v3232;
  _BOOL4 v3233;
  uint64_t v3234;
  unint64_t v3235;
  unint64_t v3236;
  _BOOL4 v3237;
  int v3238;
  _BOOL4 v3239;
  unint64_t v3240;
  uint64_t v3241;
  unint64_t v3242;
  unint64_t v3243;
  _BOOL4 v3244;
  int v3245;
  unint64_t v3246;
  _BOOL4 v3247;
  uint64_t v3248;
  unint64_t v3249;
  unint64_t v3250;
  _BOOL4 v3251;
  int v3252;
  unint64_t v3253;
  _BOOL4 v3254;
  uint64_t v3255;
  unint64_t v3256;
  unint64_t v3257;
  unint64_t v3258;
  _BOOL4 v3259;
  unint64_t v3260;
  uint64_t v3261;
  unint64_t v3262;
  unint64_t v3263;
  _BOOL8 v3264;
  unint64_t v3265;
  _BOOL4 v3266;
  _BOOL4 v3267;
  unint64_t v3268;
  int v3269;
  unint64_t v3270;
  _BOOL4 v3271;
  unint64_t v3272;
  _BOOL4 v3273;
  unint64_t v3274;
  _BOOL4 v3275;
  uint64_t v3276;
  unint64_t v3277;
  uint64_t v3279;
  unint64_t v3280;
  int v3281;
  uint64_t v3282;
  unint64_t v3283;
  uint64_t v3284;
  unint64_t v3285;
  uint64_t v3286;
  unint64_t v3287;
  unint64_t v3288;
  _BOOL4 v3289;
  unint64_t v3290;
  uint64_t v3291;
  int v3292;
  unint64_t v3293;
  uint64_t v3294;
  uint64_t v3295;
  unint64_t v3296;
  unint64_t v3297;
  uint64_t v3298;
  unint64_t v3299;
  uint64_t v3300;
  unint64_t v3301;
  _BOOL4 v3302;
  unint64_t v3303;
  _BOOL4 v3304;
  unint64_t v3305;
  uint64_t v3306;
  unint64_t v3307;
  uint64_t v3308;
  unint64_t v3309;
  uint64_t v3310;
  uint64_t v3311;
  unint64_t v3312;
  unint64_t v3313;
  uint64_t v3314;
  unint64_t v3315;
  unint64_t v3316;
  _BOOL4 v3317;
  unint64_t v3318;
  uint64_t v3319;
  unint64_t v3320;
  unint64_t v3321;
  _BOOL4 v3322;
  unint64_t v3323;
  _BOOL4 v3324;
  int v3325;
  unint64_t v3326;
  int v3327;
  uint64_t v3328;
  unint64_t v3329;
  unint64_t v3330;
  uint64_t v3331;
  unint64_t v3332;
  int v3333;
  int v3334;
  uint64_t v3335;
  unint64_t v3336;
  uint64_t v3337;
  unint64_t v3338;
  uint64_t v3339;
  unint64_t v3340;
  uint64_t v3341;
  unint64_t v3342;
  uint64_t v3343;
  unint64_t v3344;
  uint64_t v3345;
  unint64_t v3346;
  uint64_t v3347;
  unint64_t v3348;
  int v3349;
  uint64_t v3350;
  unint64_t v3351;
  uint64_t v3352;
  unint64_t v3353;
  int v3354;
  uint64_t (*v3355)(void);
  unint64_t v3356;
  unint64_t v3357;
  _BOOL4 v3358;
  unint64_t v3359;
  _BOOL4 v3360;
  unint64_t v3361;
  unint64_t v3362;
  _BOOL4 v3363;
  unint64_t v3364;
  unint64_t v3365;
  _BOOL4 v3366;
  unint64_t v3367;
  unint64_t v3368;
  _BOOL8 v3369;
  unint64_t v3370;
  unint64_t v3371;
  _BOOL4 v3372;
  unint64_t v3373;
  int v3374;
  unint64_t v3375;
  unint64_t v3376;
  _BOOL4 v3377;
  unint64_t v3378;
  _BOOL4 v3379;
  unint64_t v3380;
  unint64_t v3381;
  int v3382;
  uint64_t v3383;
  uint64_t v3384;
  int v3385;
  int v3386;
  unint64_t v3387;
  unint64_t v3388;
  _BOOL4 v3389;
  uint64_t v3390;
  int v3391;
  int v3392;
  uint64_t v3393;
  uint64_t v3394;
  int v3395;
  uint64_t v3396;
  int v3397;
  int v3398;
  uint64_t v3399;
  uint64_t v3400;
  uint64_t v3401;
  uint64_t v3402;
  uint64_t v3403;
  uint64_t v3404;
  uint64_t v3405;
  uint64_t v3406;
  uint64_t v3407;
  uint64_t v3408;
  uint64_t v3409;
  uint64_t v3410;
  uint64_t (*v3411)(unint64_t);
  unint64_t v3412;
  _BOOL4 v3413;
  unint64_t v3414;
  uint64_t v3415;
  unint64_t v3416;
  unint64_t v3417;
  _BOOL4 v3418;
  int v3419;
  _BOOL4 v3420;
  unint64_t v3421;
  uint64_t v3422;
  unint64_t v3423;
  unint64_t v3424;
  _BOOL4 v3425;
  unint64_t v3426;
  unint64_t v3427;
  _BOOL4 v3428;
  _BOOL4 v3429;
  unint64_t v3430;
  unint64_t v3431;
  _BOOL4 v3432;
  _BOOL8 v3433;
  unint64_t v3434;
  unint64_t v3435;
  _BOOL4 v3436;
  unint64_t v3437;
  _BOOL4 v3438;
  uint64_t v3439;
  unint64_t v3440;
  unint64_t v3441;
  _BOOL4 v3442;
  uint64_t v3443;
  unint64_t v3444;
  unint64_t v3445;
  _BOOL4 v3446;
  uint64_t v3447;
  unint64_t v3448;
  unint64_t v3449;
  _BOOL4 v3450;
  int v3451;
  unint64_t v3452;
  uint64_t v3453;
  unint64_t v3454;
  uint64_t v3455;
  unint64_t v3456;
  unint64_t v3457;
  uint64_t v3458;
  uint64_t v3459;
  unint64_t v3460;
  unint64_t v3461;
  uint64_t v3462;
  int v3463;
  unint64_t v3464;
  uint64_t v3465;
  uint64_t v3466;
  unint64_t v3467;
  uint64_t v3468;
  unint64_t v3469;
  unint64_t v3470;
  uint64_t v3471;
  unint64_t v3472;
  uint64_t v3473;
  unint64_t v3474;
  _BOOL4 v3475;
  unint64_t v3476;
  uint64_t v3477;
  unint64_t v3478;
  _BOOL4 v3479;
  unint64_t v3480;
  uint64_t v3481;
  unint64_t v3482;
  int v3483;
  unint64_t v3484;
  uint64_t v3485;
  unint64_t v3486;
  unint64_t v3487;
  int v3488;
  unint64_t v3489;
  uint64_t v3490;
  unint64_t v3491;
  unint64_t v3492;
  uint64_t v3493;
  unint64_t v3494;
  uint64_t v3495;
  unint64_t v3496;
  int v3497;
  unint64_t v3498;
  uint64_t v3499;
  unint64_t v3500;
  uint64_t v3501;
  unint64_t v3502;
  uint64_t v3503;
  unint64_t v3504;
  unint64_t v3505;
  int v3506;
  int v3507;
  uint64_t v3508;
  unint64_t v3509;
  unint64_t v3510;
  _BOOL4 v3511;
  uint64_t v3512;
  unint64_t v3513;
  unint64_t v3514;
  _BOOL4 v3515;
  unint64_t v3516;
  int v3517;
  uint64_t v3518;
  unint64_t v3519;
  uint64_t v3520;
  unint64_t v3521;
  int v3522;
  uint64_t v3523;
  unint64_t v3524;
  uint64_t v3525;
  unint64_t v3526;
  uint64_t v3527;
  uint64_t (*v3528)(void);
  unint64_t v3529;
  unint64_t v3530;
  _BOOL4 v3531;
  int v3532;
  unint64_t v3533;
  unint64_t v3534;
  _BOOL4 v3535;
  unint64_t v3536;
  unint64_t v3537;
  _BOOL4 v3538;
  int v3539;
  unint64_t v3540;
  _BOOL4 v3541;
  unint64_t v3542;
  unint64_t v3543;
  unint64_t v3544;
  unint64_t v3545;
  unint64_t v3546;
  unint64_t v3547;
  unint64_t v3548;
  _BOOL4 v3549;
  unint64_t v3550;
  int v3551;
  unint64_t v3552;
  _BOOL4 v3553;
  unint64_t v3554;
  unint64_t v3555;
  uint64_t v3556;
  unint64_t v3557;
  unint64_t v3558;
  int v3559;
  unint64_t v3560;
  unint64_t v3561;
  int v3562;
  uint64_t v3564;
  unint64_t v3565;
  unint64_t v3566;
  _BOOL4 v3567;
  uint64_t v3568;
  int v3569;
  int v3570;
  unint64_t v3571;
  _BOOL8 v3572;
  uint64_t v3573;
  uint64_t v3574;
  uint64_t v3575;
  uint64_t v3576;
  uint64_t v3577;
  uint64_t v3578;
  uint64_t v3579;
  unint64_t v3580;
  uint64_t v3581;
  unint64_t v3582;
  uint64_t v3583;
  uint64_t v3584;
  uint64_t v3585;
  unint64_t v3586;
  uint64_t v3587;
  uint64_t v3588;
  uint64_t v3589;
  unint64_t v3590;
  uint64_t v3591;
  uint64_t v3592;
  uint64_t (*v3593)(unint64_t);
  unint64_t v3594;
  _BOOL4 v3595;
  unint64_t v3596;
  _BOOL4 v3597;
  unint64_t v3598;
  _BOOL4 v3599;
  unint64_t v3600;
  _BOOL4 v3601;
  unint64_t v3602;
  _BOOL8 v3603;
  unint64_t v3604;
  _BOOL4 v3605;
  unint64_t v3606;
  unint64_t v3607;
  _BOOL4 v3608;
  _BOOL4 v3609;
  unint64_t v3610;
  unint64_t v3611;
  _BOOL4 v3612;
  unint64_t v3613;
  unint64_t v3614;
  _BOOL4 v3615;
  unint64_t v3616;
  _BOOL8 v3617;
  _BOOL4 v3618;
  unint64_t v3619;
  _BOOL4 v3620;
  unint64_t v3621;
  _BOOL4 v3622;
  uint64_t v3623;
  uint64_t v3624;
  uint64_t v3625;
  uint64_t v3626;
  uint64_t v3627;
  unint64_t v3628;
  _BOOL4 v3629;
  unint64_t v3630;
  _BOOL4 v3631;
  uint64_t v3632;
  unint64_t v3633;
  _BOOL4 v3634;
  uint64_t v3635;
  uint64_t v3636;
  uint64_t v3637;
  int v3638;
  unint64_t v3639;
  _BOOL4 v3640;
  uint64_t v3641;
  unint64_t v3642;
  _BOOL4 v3643;
  unint64_t v3644;
  _BOOL4 v3645;
  int v3646;
  uint64_t v3647;
  uint64_t v3649;
  uint64_t v3650;
  unint64_t v3651;
  _BOOL4 v3652;
  uint64_t v3653;
  unint64_t v3654;
  _BOOL4 v3655;
  uint64_t v3656;
  uint64_t v3657;
  uint64_t v3659;
  uint64_t v3660;
  uint64_t v3661;
  uint64_t v3662;
  uint64_t (*v3663)(void);
  unint64_t v3664;
  _BOOL4 v3665;
  uint64_t v3666;
  unint64_t v3667;
  unint64_t v3668;
  _BOOL4 v3669;
  int v3670;
  unint64_t v3671;
  _BOOL4 v3672;
  uint64_t v3673;
  unint64_t v3674;
  unint64_t v3675;
  _BOOL4 v3676;
  int v3677;
  _BOOL4 v3678;
  unint64_t v3679;
  uint64_t v3680;
  unint64_t v3681;
  unint64_t v3682;
  _BOOL4 v3683;
  int v3684;
  _BOOL4 v3685;
  unint64_t v3686;
  uint64_t v3687;
  unint64_t v3688;
  unint64_t v3689;
  _BOOL4 v3690;
  unint64_t v3691;
  _BOOL4 v3692;
  unint64_t v3693;
  uint64_t v3694;
  unint64_t v3695;
  unint64_t v3696;
  unint64_t v3697;
  _BOOL4 v3698;
  unint64_t v3699;
  _BOOL4 v3700;
  unint64_t v3701;
  uint64_t v3702;
  unint64_t v3703;
  unint64_t v3704;
  _BOOL4 v3705;
  unint64_t v3706;
  unint64_t v3707;
  unint64_t v3708;
  uint64_t v3709;
  unint64_t v3710;
  unint64_t v3711;
  _BOOL8 v3712;
  _BOOL4 v3713;
  _BOOL4 v3714;
  unint64_t v3715;
  int v3716;
  uint64_t v3717;
  unint64_t v3718;
  uint64_t v3719;
  unint64_t v3720;
  unint64_t v3721;
  _BOOL4 v3722;
  uint64_t v3723;
  unint64_t v3724;
  int v3725;
  unint64_t v3726;
  uint64_t v3727;
  uint64_t v3728;
  unint64_t v3729;
  unint64_t v3730;
  uint64_t v3731;
  unint64_t v3732;
  uint64_t v3733;
  unint64_t v3734;
  _BOOL4 v3735;
  unint64_t v3736;
  uint64_t v3737;
  unint64_t v3738;
  uint64_t v3739;
  unint64_t v3740;
  unint64_t v3741;
  uint64_t v3742;
  unint64_t v3743;
  uint64_t v3744;
  unint64_t v3745;
  unint64_t v3746;
  uint64_t v3747;
  unint64_t v3748;
  unint64_t v3749;
  _BOOL4 v3750;
  unint64_t v3751;
  uint64_t v3752;
  unint64_t v3753;
  uint64_t v3754;
  unint64_t v3755;
  unint64_t v3756;
  uint64_t v3757;
  unint64_t v3758;
  int v3759;
  uint64_t v3761;
  unint64_t v3762;
  uint64_t v3763;
  unint64_t v3764;
  uint64_t v3765;
  unint64_t v3766;
  uint64_t v3767;
  unint64_t v3768;
  unint64_t v3769;
  _BOOL4 v3770;
  uint64_t v3771;
  unint64_t v3772;
  int v3773;
  uint64_t v3774;
  unint64_t v3775;
  unint64_t v3776;
  _BOOL4 v3777;
  uint64_t v3778;
  unint64_t v3779;
  uint64_t v3780;
  unint64_t v3781;
  uint64_t v3782;
  unint64_t v3783;
  uint64_t v3785;
  unint64_t v3786;
  int v3787;
  uint64_t (*v3788)(void);
  _BOOL4 v3789;
  unint64_t v3790;
  unint64_t v3791;
  _BOOL4 v3792;
  _BOOL4 v3793;
  unint64_t v3794;
  _BOOL4 v3795;
  unint64_t v3796;
  _BOOL4 v3797;
  unint64_t v3798;
  unint64_t v3799;
  unint64_t v3800;
  _BOOL4 v3801;
  unint64_t v3802;
  uint64_t v3803;
  uint64_t v3804;
  unint64_t v3805;
  _BOOL4 v3806;
  unint64_t v3807;
  _BOOL4 v3808;
  uint64_t v3809;
  uint64_t v3810;
  int v3811;
  uint64_t v3812;
  uint64_t v3813;
  unint64_t v3814;
  _BOOL4 v3815;
  uint64_t v3816;
  unint64_t v3817;
  _BOOL4 v3818;
  uint64_t v3819;
  int v3820;
  int v3821;
  uint64_t v3822;
  uint64_t v3823;
  uint64_t v3824;
  uint64_t v3825;
  int v3826;
  unint64_t v3827;
  unint64_t v3828;
  unint64_t v3829;
  unint64_t v3830;
  unint64_t v3831;
  unint64_t v3832;
  unint64_t v3833;
  uint64_t (*v3834)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t);
  unint64_t v3835;
  unint64_t v3836;
  unint64_t v3837;
  unint64_t v3838;
  unint64_t v3839;
  unint64_t v3840;
  unint64_t v3841;
  unsigned int v3842;
  unint64_t v3843;
  unint64_t v3844;
  unint64_t v3845;
  unint64_t v3846;
  unint64_t v3847;
  unint64_t v3848;
  unint64_t v3849;
  unint64_t v3850;
  unint64_t v3851;
  unint64_t v3852;
  unint64_t v3853;
  unint64_t v3854;
  unint64_t v3855;
  unint64_t v3856;
  unint64_t v3857;
  unint64_t v3858;
  unint64_t v3859;
  unint64_t v3860;
  unint64_t v3861;
  unint64_t v3862;
  unint64_t v3863;
  unint64_t v3864;
  unint64_t v3865;
  unint64_t v3866;
  unint64_t v3867;
  unint64_t v3868;
  unint64_t v3869;
  unint64_t v3870;
  unint64_t v3871;
  unint64_t v3872;
  unint64_t v3873;
  unint64_t v3874;
  unint64_t v3875;
  unint64_t v3876;
  unint64_t v3877;
  unint64_t v3878;
  unint64_t v3879;
  unint64_t v3880;
  unint64_t v3881;
  unint64_t v3882;
  unint64_t v3883;
  unint64_t v3884;
  unint64_t v3885;
  unint64_t v3886;
  unint64_t v3887;
  unint64_t v3888;
  unint64_t v3889;
  unint64_t v3890;
  unint64_t v3891;
  unint64_t v3892;
  unint64_t v3893;
  unint64_t v3894;
  unint64_t v3895;
  unint64_t v3896;
  unint64_t v3897;
  unint64_t v3898;
  unint64_t v3899;
  unint64_t v3900;
  unint64_t v3901;
  unint64_t v3902;
  unint64_t v3903;
  unint64_t v3904;
  unint64_t v3905;
  unint64_t v3906;
  unint64_t v3907;
  unint64_t v3908;
  unint64_t v3909;
  unint64_t v3910;
  unint64_t v3911;
  unint64_t v3912;
  unint64_t v3913;
  unint64_t v3914;
  unint64_t v3915;
  unint64_t v3916;
  unint64_t v3917;
  unint64_t v3918;
  unint64_t v3919;
  BOOL v3920;
  unint64_t v3921;
  unint64_t v3922;
  unint64_t v3923;
  unint64_t v3924;
  unint64_t v3925;
  unint64_t v3926;
  unint64_t v3927;
  unint64_t v3928;
  unint64_t v3929;
  unint64_t v3930;
  unint64_t v3931;
  unint64_t v3932;
  unint64_t v3933;
  unint64_t v3934;
  unint64_t v3935;
  unint64_t v3936;
  unint64_t v3937;
  unint64_t v3938;
  unint64_t v3939;
  unint64_t v3940;
  unint64_t v3941;
  unint64_t v3942;
  unint64_t v3943;
  unint64_t v3944;
  unint64_t v3945;
  unint64_t v3946;
  unint64_t v3947;
  unint64_t v3948;
  unint64_t v3949;
  unint64_t v3950;
  unint64_t v3951;
  unint64_t v3952;
  unint64_t v3953;
  unint64_t v3954;
  unint64_t v3955;
  unint64_t v3956;
  int v3957;
  unint64_t v3958;
  unint64_t v3959;
  unint64_t v3960;
  unint64_t v3961;
  unint64_t v3962;
  unint64_t v3963;
  unint64_t v3964;
  unint64_t v3965;
  unint64_t v3966;
  unint64_t v3967;
  unint64_t v3968;
  unint64_t v3969;
  unint64_t v3970;
  unint64_t v3971;
  unint64_t v3972;
  unint64_t v3973;
  unint64_t v3974;
  uint64_t (*v3975)(void);
  unint64_t v3976;
  unint64_t v3977;
  unint64_t v3978;
  unint64_t v3979;
  unint64_t v3980;
  unint64_t v3981;
  unint64_t v3982;
  unint64_t v3983;
  unint64_t v3984;
  unint64_t v3985;
  unint64_t v3986;
  unint64_t v3987;
  unint64_t v3988;
  unint64_t v3989;
  unint64_t v3990;
  unint64_t v3991;
  unint64_t v3992;
  unint64_t v3993;
  unint64_t v3994;
  unint64_t v3995;
  unint64_t v3996;
  unint64_t v3997;
  unint64_t v3998;
  unint64_t v3999;
  unint64_t v4000;
  unint64_t v4001;
  unint64_t v4002;
  unint64_t v4003;
  unint64_t v4004;
  unint64_t v4005;
  unint64_t v4006;
  unint64_t v4007;
  unint64_t v4008;
  unint64_t v4009;
  unint64_t v4010;
  unint64_t v4011;
  unint64_t v4012;
  unint64_t v4013;
  unint64_t v4014;
  unint64_t v4015;
  unint64_t v4016;
  unint64_t v4017;
  unint64_t v4018;
  unint64_t v4019;
  unint64_t v4020;
  unint64_t v4021;
  unint64_t v4022;
  unint64_t v4023;
  unint64_t v4024;
  unint64_t v4025;
  unint64_t v4026;
  unint64_t v4027;
  unint64_t v4028;
  unint64_t v4029;
  unint64_t v4030;
  unint64_t v4031;
  unint64_t v4032;
  unint64_t v4033;
  unint64_t v4034;
  unint64_t v4035;
  unint64_t v4036;
  unint64_t v4037;
  unint64_t v4038;
  unint64_t v4039;
  unint64_t v4040;
  int v4041;
  BOOL v4042;
  unint64_t v4043;
  unint64_t v4044;
  unint64_t v4045;
  unint64_t v4046;
  unint64_t v4047;
  unint64_t v4048;
  unint64_t v4049;
  unint64_t v4050;
  unint64_t v4051;
  unint64_t v4052;
  unint64_t v4053;
  unint64_t v4054;
  unint64_t v4055;
  unint64_t v4056;
  unint64_t v4057;
  unint64_t v4058;
  unint64_t v4059;
  unint64_t v4060;
  unint64_t v4061;
  unint64_t v4062;
  unint64_t v4063;
  unint64_t v4064;
  unint64_t v4065;
  unint64_t v4066;
  int v4067;
  unint64_t v4068;
  unint64_t v4069;
  unint64_t v4070;
  unint64_t v4071;
  unint64_t v4072;
  unint64_t v4073;
  unint64_t v4074;
  unint64_t v4075;
  unint64_t v4076;
  unint64_t v4077;
  unint64_t v4078;
  unint64_t v4079;
  unint64_t v4080;
  unint64_t v4081;
  unint64_t v4082;
  unint64_t v4083;
  unint64_t v4084;
  unint64_t v4085;
  unint64_t v4086;
  unint64_t v4087;
  unint64_t v4088;
  unint64_t v4089;
  unint64_t v4090;
  unint64_t v4091;
  unint64_t v4092;
  unint64_t v4093;
  uint64_t (*v4094)(unint64_t);
  unint64_t v4095;
  unint64_t v4096;
  unint64_t v4097;
  unint64_t v4098;
  unint64_t v4099;
  unint64_t v4100;
  unint64_t v4101;
  unint64_t v4102;
  unint64_t v4103;
  unint64_t v4104;
  unint64_t v4105;
  unint64_t v4106;
  unint64_t v4107;
  unint64_t v4108;
  unint64_t v4109;
  unint64_t v4110;
  unint64_t v4111;
  unint64_t v4112;
  uint64_t (*v4113)(unint64_t, unint64_t, unint64_t, unint64_t);

  STACK[0x3BE0] = a4;
  STACK[0x3C78] = v27;
  STACK[0x3BE8] = a2;
  STACK[0x3BF0] = v24;
  STACK[0x3BF8] = v22;
  STACK[0x3C30] = a5;
  STACK[0x3C38] = v14;
  STACK[0x3C00] = v10;
  v28 = v13;
  v29 = STACK[0x33B0];
  v30 = STACK[0x33A8];
  while (2)
  {
    v31 = (v11 * (unsigned __int128)v19) >> 64;
    v32 = 15 * v31;
    v33 = (v31 * (unsigned __int128)(unint64_t)v15) >> 64;
    v34 = v32 + v11 * v19;
    if (__CFADD__(v32, v11 * v19))
      ++v33;
    v35 = 15 * v33;
    v334 = __CFADD__(v35, v34);
    v36 = v35 + v34;
    v37 = v334;
    if (v36 > 0xFFFFFFFFFFFFFFF0)
      v37 = 1;
    if (v37)
      v38 = v15;
    else
      v38 = 0;
    v39 = v38 + v36;
    v40 = 0x9FEC52B6396CF0C0 * v39;
    v41 = (v39 * (unsigned __int128)0x9FEC52B6396CF0C0) >> 64;
    v42 = 15 * v41;
    v43 = (v41 * (unsigned __int128)(unint64_t)v15) >> 64;
    v334 = __CFADD__(v42, v40);
    v44 = v42 + v40;
    if (v334)
      ++v43;
    v45 = 15 * v43;
    v46 = v45 + v44 > 0xFFFFFFFFFFFFFFF0;
    v334 = __CFADD__(v45, v44);
    v47 = v45 + v44;
    if (v334 || v46)
      v49 = v15;
    else
      v49 = 0;
    v50 = v49 + v47;
    v51 = 0x7FF97F97F97F97F2 * v50;
    v52 = (v50 * (unsigned __int128)0x7FF97F97F97F97F2uLL) >> 64;
    v53 = 15 * v52;
    v54 = (v52 * (unsigned __int128)(unint64_t)v15) >> 64;
    v334 = __CFADD__(v53, v51);
    v55 = v53 + v51;
    if (v334)
      ++v54;
    v56 = 15 * v54;
    v334 = __CFADD__(v56, v55);
    v57 = v56 + v55;
    v58 = v334;
    if (v57 > 0xFFFFFFFFFFFFFFF0)
      v58 = 1;
    if (v58)
      v59 = v15;
    else
      v59 = 0;
    v60 = v59 + v57;
    if (v59 + v57 >= 0xFFFFFFFFFFFFFFD3)
      v61 = v17;
    else
      v61 = 0;
    v62 = v61 + v60;
    v63 = 2661120 * v62;
    v64 = ((v62 * (unsigned __int128)0x289B00uLL) >> 64) * (unint64_t)v17;
    v334 = __CFADD__(v64, v63);
    v65 = v64 + v63;
    if (v334)
      v66 = v17;
    else
      v66 = 0;
    v67 = v66 + v65 > 0xFFFFFFFFFFFFFFD2;
    v334 = __CFADD__(v66, v65);
    v68 = v66 + v65;
    v69 = v16 * v12;
    v70 = (v16 * (unsigned __int128)v12) >> 64;
    v71 = (v70 * (unsigned __int128)5uLL) >> 64;
    v72 = 5 * v70;
    v73 = v334 || v67;
    v74 = v72 + v69;
    if (__CFADD__(v72, v69))
      v75 = v71 + 1;
    else
      v75 = v71;
    v76 = 5 * v75;
    v334 = __CFADD__(v76, v74);
    v77 = v76 + v74;
    v78 = v334;
    if (v77 > 0xFFFFFFFFFFFFFFFALL)
      v78 = 1;
    if (v78)
      v79 = 5;
    else
      v79 = 0;
    v80 = v79 + v77;
    v81 = 0xE7CF05C2128E4523 * v80;
    v82 = (((v80 * (unsigned __int128)0xE7CF05C2128E4523) >> 64) * 5) >> 64;
    v83 = (__PAIR128__(4, 0xE7CF05C2128E4523) * v80) >> 64;
    v334 = __CFADD__(v83, v81);
    v84 = v83 + v81;
    if (v334)
      v85 = v82 + 1;
    else
      v85 = v82;
    v86 = 5 * v85;
    v334 = __CFADD__(v86, v84);
    v87 = v86 + v84;
    v88 = v334;
    if (v87 > 0xFFFFFFFFFFFFFFFALL)
      v88 = 1;
    if (v88)
      v89 = 5;
    else
      v89 = 0;
    v90 = v89 + v87;
    v91 = 0xD73333333333332FLL * v90;
    v92 = (((v90 * (unsigned __int128)0xD73333333333332FLL) >> 64) * 5) >> 64;
    v93 = (__PAIR128__(4, 0xD73333333333332FLL) * v90) >> 64;
    v334 = __CFADD__(v93, v91);
    v94 = v93 + v91;
    if (v334)
      v95 = v92 + 1;
    else
      v95 = v92;
    v96 = 5 * v95;
    v334 = __CFADD__(v96, v94);
    v97 = v96 + v94;
    v98 = v334;
    if (v97 > 0xFFFFFFFFFFFFFFFALL)
      v98 = 1;
    if (v98)
      v99 = 5;
    else
      v99 = 0;
    v100 = v99 + v97;
    if (v100 >= 0xFFFFFFFFFFFFFFD3)
      v101 = v17;
    else
      v101 = 0;
    v102 = v101 + v100;
    v103 = 1995840 * v102;
    v104 = ((v102 * (unsigned __int128)0x1E7440uLL) >> 64) * (unint64_t)v17;
    v334 = __CFADD__(v104, v103);
    v105 = v104 + v103;
    if (v334)
      v106 = v17;
    else
      v106 = 0;
    v107 = v106 + v105 > 0xFFFFFFFFFFFFFFD2;
    v334 = __CFADD__(v106, v105);
    v108 = v106 + v105;
    v109 = v30 * v20;
    v110 = (v30 * (unsigned __int128)v20) >> 64;
    v111 = (v110 * (unsigned __int128)3uLL) >> 64;
    v112 = 3 * v110;
    v113 = v334 || v107;
    v114 = v112 + v109;
    if (__CFADD__(v112, v109))
      v115 = v111 + 1;
    else
      v115 = v111;
    v116 = 3 * v115;
    v334 = __CFADD__(v116, v114);
    v117 = v116 + v114;
    v118 = v334;
    if (v117 > 0xFFFFFFFFFFFFFFFCLL)
      v118 = 1;
    if (v118)
      v119 = 3;
    else
      v119 = 0;
    v120 = v119 + v117;
    v121 = 0x98FDEF4CCE72A7B8 * v120;
    v122 = (((v120 * (unsigned __int128)0x98FDEF4CCE72A7B8) >> 64) * 3) >> 64;
    v123 = (__PAIR128__(2, 0x98FDEF4CCE72A7B8) * v120) >> 64;
    v334 = __CFADD__(v123, v121);
    v124 = v123 + v121;
    if (v334)
      v125 = v122 + 1;
    else
      v125 = v122;
    v126 = 3 * v125;
    v127 = (unint64_t)(v126 + v124) > 0xFFFFFFFFFFFFFFFCLL;
    v334 = __CFADD__(v126, v124);
    v128 = v126 + v124;
    if (v334 || v127)
      v130 = 3;
    else
      v130 = 0;
    v131 = v130 + v128;
    v132 = 0xF638E38E38E38E36 * v131;
    v133 = (((v131 * (unsigned __int128)0xF638E38E38E38E36) >> 64) * 3) >> 64;
    v134 = (__PAIR128__(2, 0xF638E38E38E38E36) * v131) >> 64;
    v334 = __CFADD__(v134, v132);
    v135 = v134 + v132;
    if (v334)
      v136 = v133 + 1;
    else
      v136 = v133;
    v137 = 3 * v136;
    v138 = (unint64_t)(v137 + v135) > 0xFFFFFFFFFFFFFFFCLL;
    v334 = __CFADD__(v137, v135);
    v139 = v137 + v135;
    if (v334 || v138)
      v141 = 3;
    else
      v141 = 0;
    v142 = v141 + v139;
    if (v142 >= 0xFFFFFFFFFFFFFFD3)
      v143 = v17;
    else
      v143 = 0;
    v144 = v143 + v142;
    v145 = 1900800 * v144;
    v146 = ((v144 * (unsigned __int128)0x1D0100uLL) >> 64) * (unint64_t)v17;
    v334 = __CFADD__(v146, v145);
    v147 = v146 + v145;
    if (v334)
      v148 = v17;
    else
      v148 = 0;
    v149 = v148 + v147 > 0xFFFFFFFFFFFFFFD2;
    v334 = __CFADD__(v148, v147);
    v150 = v148 + v147;
    v151 = v23 * a1;
    v152 = (v23 * (unsigned __int128)a1) >> 64;
    if (v334)
      v149 = 1;
    v153 = __CFADD__(__CFADD__(v152, v151), v152 + v151);
    v154 = __CFADD__(v152, v151) + v152 + v151 == -1 || v153;
    v155 = v152 + v151 + __CFADD__(v152, v151) + v154;
    v156 = ((unint64_t)v155 * (unsigned __int128)0x5CAECC2F8BD67150uLL) >> 64;
    v157 = 0x5CAECC2F8BD67150 * v155;
    v158 = __CFADD__(__CFADD__(v156, v157), v156 + v157);
    v159 = __CFADD__(v156, v157) + v156 + v157 == -1 || v158;
    v160 = v156 + v157 + __CFADD__(v156, v157) + v159;
    v161 = ((unint64_t)v160 * (unsigned __int128)0xDBB6DB6DB6DB6DB6) >> 64;
    v162 = 0xDBB6DB6DB6DB6DB6 * v160;
    v163 = __CFADD__(__CFADD__(v161, v162), v161 + v162);
    v164 = __CFADD__(v161, v162) + v161 + v162 == -1 || v163;
    v165 = v161 + v162 + __CFADD__(v161, v162) + v164;
    if (v165 >= 0xFFFFFFFFFFFFFFD3)
      v166 = v17;
    else
      v166 = 0;
    v167 = v166 + v165;
    v168 = 1814400 * v167;
    v169 = ((v167 * (unsigned __int128)0x1BAF80uLL) >> 64) * (unint64_t)v17;
    v334 = __CFADD__(v169, v168);
    v170 = v169 + v168;
    if (v334)
      v171 = v17;
    else
      v171 = 0;
    v334 = __CFADD__(v171, v170);
    v172 = v171 + v170;
    v173 = v334;
    if (v172 > 0xFFFFFFFFFFFFFFD2)
      v173 = 1;
    if (v173)
      v174 = v17;
    else
      v174 = 0;
    v175 = v174 + v172;
    if (v175 >= 0xFFFFFFFFFFFFFFD3)
      v176 = v17;
    else
      v176 = 0;
    v177 = v176 + v175;
    if (v149)
      v178 = v17;
    else
      v178 = 0;
    v179 = v150 + v177 + v178;
    v180 = v177 > v179 || v179 > 0xFFFFFFFFFFFFFFD2;
    if (v180)
      v181 = v17;
    else
      v181 = 0;
    v182 = v181 + v179;
    if (v113)
      v183 = v17;
    else
      v183 = 0;
    v184 = v183 + v108;
    LODWORD(v183) = v184 + v182 > 0xFFFFFFFFFFFFFFD2;
    v334 = __CFADD__(v184, v182);
    v185 = v184 + v182;
    v186 = a3 * a6;
    v187 = (a3 * (unsigned __int128)a6) >> 64;
    v188 = (v187 * (unsigned __int128)9uLL) >> 64;
    v189 = 9 * v187;
    if (v334)
      v183 = 1;
    else
      v183 = v183;
    v334 = __CFADD__(v189, v186);
    v190 = v189 + v186;
    if (v334)
      v191 = v188 + 1;
    else
      v191 = v188;
    v192 = 9 * v191;
    v334 = __CFADD__(v192, v190);
    v193 = v192 + v190;
    v194 = v334;
    if (v193 > 0xFFFFFFFFFFFFFFF6)
      v194 = 1;
    if (v194)
      v195 = 9;
    else
      v195 = 0;
    v196 = v195 + v193;
    v197 = 0x1513DAB390DF5A9ELL * v196;
    v198 = (__PAIR128__(8, 0x1513DAB390DF5A9ELL) * v196) >> 64;
    v334 = __CFADD__(v198, v197);
    v199 = v198 + v197;
    if (v334)
      v200 = 9;
    else
      v200 = 0;
    v334 = __CFADD__(v200, v199);
    v201 = v200 + v199;
    v202 = v334;
    if (v201 > 0xFFFFFFFFFFFFFFF6)
      v202 = 1;
    if (v202)
      v203 = 9;
    else
      v203 = 0;
    v204 = v203 + v201;
    v205 = 0xD6E38E38E38E38DCLL * v204;
    v206 = (((v204 * (unsigned __int128)0xD6E38E38E38E38DCLL) >> 64) * 9) >> 64;
    v207 = (__PAIR128__(8, 0xD6E38E38E38E38DCLL) * v204) >> 64;
    v334 = __CFADD__(v207, v205);
    v208 = v207 + v205;
    if (v334)
      v209 = v206 + 1;
    else
      v209 = v206;
    v210 = 9 * v209;
    v334 = __CFADD__(v210, v208);
    v211 = v210 + v208;
    v212 = v334;
    if (v211 > 0xFFFFFFFFFFFFFFF6)
      v212 = 1;
    if (v212)
      v213 = 9;
    else
      v213 = 0;
    v214 = v213 + v211;
    if (v213 + v211 >= 0xFFFFFFFFFFFFFFD3)
      v215 = v17;
    else
      v215 = 0;
    v216 = v215 + v214;
    v217 = 2217600 * v216;
    v218 = v183 << 63 >> 63;
    v2767 = (_DWORD)v183 == 0;
    v219 = -45;
    if (!v2767)
      v219 = -1;
    v220 = ((v216 * (unsigned __int128)0x21D680uLL) >> 64) * (unint64_t)v17;
    v334 = __CFADD__(v220, v217);
    v221 = v220 + v217;
    v222 = v185 + (v218 ^ 0x2C ^ v219) + 1;
    if (v334)
      v223 = v17;
    else
      v223 = 0;
    v334 = __CFADD__(v223, v221);
    v224 = v223 + v221;
    v225 = v334;
    if (v224 > 0xFFFFFFFFFFFFFFD2)
      v225 = 1;
    if (v225)
      v226 = v17;
    else
      v226 = 0;
    v227 = v226 + v224;
    v334 = __CFADD__(v227, v222);
    v228 = v227 + v222;
    v229 = v334;
    if (v228 > 0xFFFFFFFFFFFFFFD2)
      v229 = 1;
    if (v229)
      v230 = v17;
    else
      v230 = 0;
    v231 = v230 + v228;
    if (v73)
      v232 = v17;
    else
      v232 = 0;
    v233 = v232 + v68;
    v334 = __CFADD__(v233, v231);
    v234 = v233 + v231;
    v235 = v334;
    if (v234 > 0xFFFFFFFFFFFFFFD2)
      v235 = 1;
    if (v235)
      v236 = v17;
    else
      v236 = 0;
    v237 = v236 + v234;
    v238 = 0xB1035F48A597370CLL * v237;
    v239 = (v237 * (unsigned __int128)0xB1035F48A597370CLL) >> 64;
    v240 = (v239 * (unsigned __int128)(unint64_t)v17) >> 64;
    v241 = v239 * v17;
    v334 = __CFADD__(v241, v238);
    v242 = v241 + v238;
    if (v334)
      v243 = v240 + 1;
    else
      v243 = v240;
    v244 = v243 * v17;
    v245 = v244 + v242 > 0xFFFFFFFFFFFFFFD2;
    v334 = __CFADD__(v244, v242);
    v246 = v244 + v242;
    v247 = a7 * v29;
    v248 = (a7 * (unsigned __int128)v29) >> 64;
    v249 = (v248 * (unsigned __int128)(unint64_t)v17) >> 64;
    v250 = v248 * v17;
    if (v334)
      v245 = 1;
    v334 = __CFADD__(v250, v247);
    v251 = v250 + v247;
    if (v334)
      v252 = v249 + 1;
    else
      v252 = v249;
    v253 = v252 * v17;
    v254 = v253 + v251 > 0xFFFFFFFFFFFFFFD2;
    v334 = __CFADD__(v253, v251);
    v255 = v253 + v251;
    if (v334 || v254)
      v257 = v17;
    else
      v257 = 0;
    v258 = v257 + v255;
    if (v245)
      v259 = v17;
    else
      v259 = 0;
    v260 = v259 + v246;
    v334 = __CFADD__(v258, v260);
    v261 = v258 + v260;
    v262 = v334;
    if (v261 > 0xFFFFFFFFFFFFFFD2)
      v262 = 1;
    if (v262)
      v263 = v17;
    else
      v263 = 0;
    v264 = v263 + v261;
    v265 = 0xD122545C17BA3DF4 * v264;
    v266 = (v264 * (unsigned __int128)0xD122545C17BA3DF4) >> 64;
    v267 = (v266 * (unsigned __int128)(unint64_t)v17) >> 64;
    v268 = v266 * v17;
    v334 = __CFADD__(v268, v265);
    v269 = v268 + v265;
    if (v334)
      v270 = v267 + 1;
    else
      v270 = v267;
    v271 = v270 * v17;
    v334 = __CFADD__(v271, v269);
    v272 = v271 + v269;
    v273 = v334;
    if (v272 > 0xFFFFFFFFFFFFFFD2)
      v273 = 1;
    if (v273)
      v274 = v17;
    else
      v274 = 0;
    v275 = v274 + v272;
    v276 = 0xC8D34D34D34D34B0 * (v274 + v272);
    STACK[0x3C28] = v275;
    v277 = (v275 * (unsigned __int128)0xC8D34D34D34D34B0) >> 64;
    v278 = (v277 * (unsigned __int128)(unint64_t)v17) >> 64;
    v279 = v277 * v17;
    v334 = __CFADD__(v279, v276);
    v280 = v279 + v276;
    if (v334)
      v281 = v278 + 1;
    else
      v281 = v278;
    v282 = v281 * v17;
    v334 = __CFADD__(v282, v280);
    v283 = v282 + v280;
    v284 = v334;
    if (v283 > 0xFFFFFFFFFFFFFFD2)
      v284 = 1;
    if (v284)
      v285 = v17;
    else
      v285 = 0;
    v286 = v285 + v283;
    if (v285 + v283 >= 0xFFFFFFFFFFFFFFCBLL)
      v287 = 53;
    else
      v287 = 0;
    v288 = v287 + v286;
    v289 = 60480 * v288;
    v290 = 53 * ((v288 * (unsigned __int128)0xEC40uLL) >> 64);
    v334 = __CFADD__(v290, v289);
    v291 = v290 + v289;
    if (v334)
      v292 = 53;
    else
      v292 = 0;
    STACK[0x3BD0] = v292 + v291;
    v293 = __CFADD__(v292, v291) || (unint64_t)(v292 + v291) > 0xFFFFFFFFFFFFFFCALL;
    if (v60 >= 0xFFFFFFFFFFFFFFD9)
      v294 = a8;
    else
      v294 = 0;
    v295 = v294 + v60;
    v296 = 1395360 * v295;
    v297 = ((v295 * (unsigned __int128)0x154AA0uLL) >> 64) * (unint64_t)a8;
    v334 = __CFADD__(v297, v296);
    v298 = v297 + v296;
    if (v334)
      v299 = a8;
    else
      v299 = 0;
    v300 = v299 + v298 > 0xFFFFFFFFFFFFFFD8;
    v334 = __CFADD__(v299, v298);
    v301 = v299 + v298;
    v302 = v334 || v300;
    if (v100 >= 0xFFFFFFFFFFFFFFD9)
      v303 = a8;
    else
      v303 = 0;
    v304 = v303 + v100;
    v305 = 984960 * v304;
    v306 = ((v304 * (unsigned __int128)0xF0780uLL) >> 64) * (unint64_t)a8;
    v334 = __CFADD__(v306, v305);
    v307 = v306 + v305;
    if (v334)
      v308 = a8;
    else
      v308 = 0;
    v309 = v308 + v307 > 0xFFFFFFFFFFFFFFD8;
    v334 = __CFADD__(v308, v307);
    v310 = v308 + v307;
    v311 = v334 || v309;
    if (v165 >= 0xFFFFFFFFFFFFFFD9)
      v312 = a8;
    else
      v312 = 0;
    v313 = v312 + v165;
    v314 = 881280 * v313;
    v315 = ((v313 * (unsigned __int128)0xD7280uLL) >> 64) * (unint64_t)a8;
    v334 = __CFADD__(v315, v314);
    v316 = v315 + v314;
    if (v334)
      v317 = a8;
    else
      v317 = 0;
    v334 = __CFADD__(v317, v316);
    v318 = v317 + v316;
    v319 = v334;
    if (v318 > 0xFFFFFFFFFFFFFFD8)
      v319 = 1;
    if (v142 >= 0xFFFFFFFFFFFFFFD9)
      v320 = a8;
    else
      v320 = 0;
    if (v319)
      v321 = a8;
    else
      v321 = 0;
    v322 = v321 + v318;
    v323 = v320 + v142;
    v324 = 930240 * (v320 + v142);
    v325 = ((v323 * (unsigned __int128)0xE31C0uLL) >> 64) * (unint64_t)a8;
    if (v322 >= 0xFFFFFFFFFFFFFFD9)
      v326 = a8;
    else
      v326 = 0;
    v334 = __CFADD__(v325, v324);
    v327 = v325 + v324;
    v328 = v326 + v322;
    if (v334)
      v329 = a8;
    else
      v329 = 0;
    v334 = __CFADD__(v329, v327);
    v330 = v329 + v327;
    v331 = v334;
    if (v330 > 0xFFFFFFFFFFFFFFD8)
      v331 = 1;
    if (v331)
      v332 = a8;
    else
      v332 = 0;
    v333 = v330 + v328 + v332;
    v334 = v333 <= 0xFFFFFFFFFFFFFFD8 && v333 >= v328;
    if (v334)
      v335 = 0;
    else
      v335 = a8;
    v336 = v335 + v333;
    if (v311)
      v337 = a8;
    else
      v337 = 0;
    v338 = v337 + v310 + v336;
    if (v214 >= 0xFFFFFFFFFFFFFFD9)
      v339 = a8;
    else
      v339 = 0;
    v340 = v339 + v214;
    v341 = 1116288 * v340;
    v342 = ((v340 * (unsigned __int128)0x110880uLL) >> 64) * (unint64_t)a8;
    v334 = __CFADD__(v342, v341);
    v343 = v342 + v341;
    if (v334)
      v344 = a8;
    else
      v344 = 0;
    v334 = __CFADD__(v344, v343);
    v345 = v344 + v343;
    v346 = v334;
    if (v345 > 0xFFFFFFFFFFFFFFD8)
      v346 = 1;
    if (v338 < v336 || v338 > 0xFFFFFFFFFFFFFFD8)
      v348 = a8;
    else
      v348 = 0;
    v349 = v348 + v338;
    if (v346)
      v350 = a8;
    else
      v350 = 0;
    v351 = v350 + v345;
    v352 = v351 + v349 > 0xFFFFFFFFFFFFFFD8;
    v334 = __CFADD__(v351, v349);
    v353 = v351 + v349;
    if (v334 || v352)
      v355 = a8;
    else
      v355 = 0;
    v356 = v355 + v353;
    if (v302)
      v357 = a8;
    else
      v357 = 0;
    v358 = v357 + v301;
    v334 = __CFADD__(v358, v356);
    v359 = v358 + v356;
    v360 = v334;
    if (v359 > 0xFFFFFFFFFFFFFFD8)
      v360 = 1;
    if (v360)
      v361 = a8;
    else
      v361 = 0;
    v362 = v361 + v359;
    v363 = 0x40685A60ABFE0A21 * v362;
    v364 = (v362 * (unsigned __int128)0x40685A60ABFE0A21uLL) >> 64;
    v365 = (v364 * (unsigned __int128)(unint64_t)a8) >> 64;
    v366 = v364 * a8;
    v334 = __CFADD__(v366, v363);
    v367 = v366 + v363;
    if (v334)
      v368 = v365 + 1;
    else
      v368 = v365;
    v369 = v368 * a8;
    v370 = (unint64_t)(v369 + v367) > 0xFFFFFFFFFFFFFFD8;
    v334 = __CFADD__(v369, v367);
    v371 = v369 + v367;
    v372 = v28 * v18;
    v373 = (v28 * (unsigned __int128)v18) >> 64;
    v374 = (v373 * (unsigned __int128)(unint64_t)a8) >> 64;
    v375 = v373 * a8;
    if (v334)
      v370 = 1;
    v334 = __CFADD__(v375, v372);
    v376 = v375 + v372;
    if (v334)
      v377 = v374 + 1;
    else
      v377 = v374;
    v378 = v377 * a8;
    v379 = v378 + v376 > 0xFFFFFFFFFFFFFFD8;
    v334 = __CFADD__(v378, v376);
    v380 = v378 + v376;
    if (v334 || v379)
      v382 = a8;
    else
      v382 = 0;
    v383 = v382 + v380;
    if (v370)
      v384 = a8;
    else
      v384 = 0;
    v385 = v384 + v371;
    v386 = v383 + v385 > 0xFFFFFFFFFFFFFFD8;
    v334 = __CFADD__(v383, v385);
    v387 = v383 + v385;
    if (v334 || v386)
      v389 = a8;
    else
      v389 = 0;
    v390 = v389 + v387;
    v391 = 0x68180B91CEB03F68 * v390;
    v392 = (v390 * (unsigned __int128)0x68180B91CEB03F68uLL) >> 64;
    v393 = (v392 * (unsigned __int128)(unint64_t)a8) >> 64;
    v394 = v392 * a8;
    v334 = __CFADD__(v394, v391);
    v395 = v394 + v391;
    if (v334)
      v396 = v393 + 1;
    else
      v396 = v393;
    v397 = v396 * a8;
    v334 = __CFADD__(v397, v395);
    v398 = v397 + v395;
    v399 = v334;
    if (v398 > 0xFFFFFFFFFFFFFFD8)
      v399 = 1;
    if (v399)
      v400 = a8;
    else
      v400 = 0;
    v401 = v400 + v398;
    STACK[0x3C20] = v400 + v398;
    v402 = ((v400 + v398) * (unsigned __int128)0x56433B79890CEDD9uLL) >> 64;
    v403 = (v402 * (unsigned __int128)(unint64_t)a8) >> 64;
    v404 = v402 * a8;
    v405 = v404 + 0x56433B79890CEDD9 * v401;
    if (__CFADD__(v404, 0x56433B79890CEDD9 * v401))
      v406 = v403 + 1;
    else
      v406 = v403;
    v407 = v406 * a8;
    v408 = (unint64_t)(v407 + v405) > 0xFFFFFFFFFFFFFFD8;
    v334 = __CFADD__(v407, v405);
    v409 = v407 + v405;
    if (v334 || v408)
      v411 = a8;
    else
      v411 = 0;
    v412 = v411 + v409;
    if ((unint64_t)(v411 + v409) >= 0xFFFFFFFFFFFFFFCBLL)
      v413 = 53;
    else
      v413 = 0;
    v414 = v413 + v412;
    v415 = 34560 * v414;
    v416 = 53 * ((v414 * (unsigned __int128)0x8700uLL) >> 64);
    v334 = __CFADD__(v416, v415);
    v417 = v416 + v415;
    if (v334)
      v418 = 53;
    else
      v418 = 0;
    v419 = v418 + v417;
    v420 = __CFADD__(v418, v417) || (unint64_t)(v418 + v417) > 0xFFFFFFFFFFFFFFCALL;
    if (v60 >= 0xFFFFFFFFFFFFFFD1)
      v421 = v25;
    else
      v421 = 0;
    v422 = v421 + v60;
    v423 = 3230304 * v422;
    v424 = ((v422 * (unsigned __int128)0x314A60uLL) >> 64) * (unint64_t)v25;
    v334 = __CFADD__(v424, v423);
    v425 = v424 + v423;
    if (v334)
      v426 = v25;
    else
      v426 = 0;
    v427 = v426 + v425 > 0xFFFFFFFFFFFFFFD0;
    v334 = __CFADD__(v426, v425);
    v428 = v426 + v425;
    v429 = v334 || v427;
    if (v142 >= 0xFFFFFFFFFFFFFFD1)
      v430 = v25;
    else
      v430 = 0;
    v431 = v430 + v142;
    v432 = 2349312 * v431;
    v433 = ((v431 * (unsigned __int128)0x23D900uLL) >> 64) * (unint64_t)v25;
    v334 = __CFADD__(v433, v432);
    v434 = v433 + v432;
    if (v334)
      v435 = v25;
    else
      v435 = 0;
    v436 = v435 + v434 > 0xFFFFFFFFFFFFFFD0;
    v334 = __CFADD__(v435, v434);
    v437 = v435 + v434;
    v438 = v334 || v436;
    if (v165 >= 0xFFFFFFFFFFFFFFD1)
      v439 = v25;
    else
      v439 = 0;
    v440 = v439 + v165;
    v441 = 2247168 * v440;
    v442 = ((v440 * (unsigned __int128)0x224A00uLL) >> 64) * (unint64_t)v25;
    v334 = __CFADD__(v442, v441);
    v443 = v442 + v441;
    if (v334)
      v444 = v25;
    else
      v444 = 0;
    v445 = v444 + v443 > 0xFFFFFFFFFFFFFFD0;
    v334 = __CFADD__(v444, v443);
    v446 = v444 + v443;
    if (v334 || v445)
      v448 = v25;
    else
      v448 = 0;
    v449 = v448 + v446;
    if (v449 >= 0xFFFFFFFFFFFFFFD1)
      v450 = v25;
    else
      v450 = 0;
    v451 = v450 + v449;
    if (v438)
      v452 = v25;
    else
      v452 = 0;
    v453 = v437 + v451 + v452;
    if (v453 <= 0xFFFFFFFFFFFFFFD0 && v453 >= v451)
      v455 = 0;
    else
      v455 = v25;
    if (v100 >= 0xFFFFFFFFFFFFFFD1)
      v456 = v25;
    else
      v456 = 0;
    v457 = v456 + v100;
    v458 = 2461184 * v457;
    v459 = ((v457 * (unsigned __int128)0x258E00uLL) >> 64) * (unint64_t)v25;
    v460 = v455 + v453;
    v461 = v459 + v458;
    if (__CFADD__(v459, v458))
      v462 = v25;
    else
      v462 = 0;
    v334 = __CFADD__(v462, v461);
    v463 = v462 + v461;
    v464 = v334;
    if (v463 > 0xFFFFFFFFFFFFFFD0)
      v464 = 1;
    if (v464)
      v465 = v25;
    else
      v465 = 0;
    v466 = v465 + v463;
    v467 = v466 + v460 > 0xFFFFFFFFFFFFFFD0;
    v334 = __CFADD__(v466, v460);
    v468 = v466 + v460;
    v469 = v334 || v467;
    if (v214 >= 0xFFFFFFFFFFFFFFD1)
      v470 = v25;
    else
      v470 = 0;
    v471 = v470 + v214;
    v472 = 2720256 * v471;
    v473 = (v471 * (unsigned __int128)0x298200uLL) >> 64;
    if (v469)
      v474 = v25;
    else
      v474 = 0;
    v475 = v474 + v468;
    v476 = v473 * (unint64_t)v25;
    v334 = __CFADD__(v476, v472);
    v477 = v476 + v472;
    if (v334)
      v478 = v25;
    else
      v478 = 0;
    v334 = __CFADD__(v478, v477);
    v479 = v478 + v477;
    v480 = v334;
    if (v479 > 0xFFFFFFFFFFFFFFD0)
      v480 = 1;
    if (v480)
      v481 = v25;
    else
      v481 = 0;
    v482 = v481 + v479;
    v483 = v482 + v475 > 0xFFFFFFFFFFFFFFD0;
    v334 = __CFADD__(v482, v475);
    v484 = v482 + v475;
    if (v334 || v483)
      v486 = v25;
    else
      v486 = 0;
    v487 = v486 + v484;
    if (v429)
      v488 = v25;
    else
      v488 = 0;
    v489 = v488 + v428;
    v490 = v489 + v487 > 0xFFFFFFFFFFFFFFD0;
    v334 = __CFADD__(v489, v487);
    v491 = v489 + v487;
    v492 = STACK[0x3BE0] * STACK[0x3BB0];
    v493 = (STACK[0x3BE0] * (unsigned __int128)STACK[0x3BB0]) >> 64;
    v494 = (v493 * (unsigned __int128)(unint64_t)v25) >> 64;
    v495 = v493 * v25;
    if (v334)
      v490 = 1;
    v334 = __CFADD__(v495, v492);
    v496 = v495 + v492;
    if (v334)
      v497 = v494 + 1;
    else
      v497 = v494;
    v498 = v497 * v25;
    v334 = __CFADD__(v498, v496);
    v499 = v498 + v496;
    v500 = v334;
    if (v499 > 0xFFFFFFFFFFFFFFD0)
      v500 = 1;
    if (v500)
      v501 = v25;
    else
      v501 = 0;
    v502 = v501 + v499;
    if (v490)
      v503 = v25;
    else
      v503 = 0;
    v504 = v503 + v491;
    v505 = 0xF9CF898C924065FBLL * v504;
    v506 = (v504 * (unsigned __int128)0xF9CF898C924065FBLL) >> 64;
    v507 = (v506 * (unsigned __int128)(unint64_t)v25) >> 64;
    v508 = v506 * v25;
    v334 = __CFADD__(v508, v505);
    v509 = v508 + v505;
    if (v334)
      v510 = v507 + 1;
    else
      v510 = v507;
    v511 = v510 * v25;
    v334 = __CFADD__(v511, v509);
    v512 = v511 + v509;
    v513 = v334;
    if (v512 > 0xFFFFFFFFFFFFFFD0)
      v513 = 1;
    if (v513)
      v514 = v25;
    else
      v514 = 0;
    v515 = v514 + v512;
    v516 = v502 + v515 > 0xFFFFFFFFFFFFFFD0;
    v334 = __CFADD__(v502, v515);
    v517 = v502 + v515;
    if (v334)
      v516 = 1;
    if (v516)
      v518 = v25;
    else
      v518 = 0;
    v519 = v518 + v517;
    v520 = 0x5C1DC82ED83E4DC6 * v519;
    v521 = (v519 * (unsigned __int128)0x5C1DC82ED83E4DC6uLL) >> 64;
    v522 = (v521 * (unsigned __int128)(unint64_t)v25) >> 64;
    v523 = v521 * v25;
    v334 = __CFADD__(v523, v520);
    v524 = v523 + v520;
    if (v334)
      v525 = v522 + 1;
    else
      v525 = v522;
    v526 = v525 * v25;
    v527 = (unint64_t)(v526 + v524) > 0xFFFFFFFFFFFFFFD0;
    v334 = __CFADD__(v526, v524);
    v528 = v526 + v524;
    if (v334 || v527)
      v530 = v25;
    else
      v530 = 0;
    v531 = v530 + v528;
    v532 = 0xA52E52E52E52E51 * (v530 + v528);
    STACK[0x3B58] = v531;
    v533 = (v531 * (unsigned __int128)0xA52E52E52E52E51uLL) >> 64;
    v534 = (v533 * (unsigned __int128)(unint64_t)v25) >> 64;
    v535 = v533 * v25;
    v334 = __CFADD__(v535, v532);
    v536 = v535 + v532;
    if (v334)
      v537 = v534 + 1;
    else
      v537 = v534;
    v538 = v537 * v25;
    v539 = v538 + v536;
    v540 = __CFADD__(v538, v536) || (unint64_t)(v538 + v536) > 0xFFFFFFFFFFFFFFD0;
    if (v214 >= 0xFFFFFFFFFFFFFFEFLL)
      v541 = v21;
    else
      v541 = 0;
    v542 = v541 + v214;
    v543 = 5376 * v542;
    v544 = (__PAIR128__(16, 5376) * v542) >> 64;
    v334 = __CFADD__(v544, v543);
    v545 = v544 + v543;
    if (v334)
      v546 = v21;
    else
      v546 = 0;
    v547 = (unint64_t)(v546 + v545) > 0xFFFFFFFFFFFFFFEELL;
    v334 = __CFADD__(v546, v545);
    v548 = v546 + v545;
    v549 = v334 || v547;
    if (v100 >= 0xFFFFFFFFFFFFFFEFLL)
      v550 = v21;
    else
      v550 = 0;
    v551 = v550 + v100;
    v552 = 17 * ((v551 * (unsigned __int128)0xE00uLL) >> 64);
    v551 *= 3584;
    v334 = __CFADD__(v552, v551);
    v553 = v552 + v551;
    if (v334)
      v554 = v21;
    else
      v554 = 0;
    v555 = (unint64_t)(v554 + v553) > 0xFFFFFFFFFFFFFFEELL;
    v334 = __CFADD__(v554, v553);
    v556 = v554 + v553;
    v557 = v334 || v555;
    if (v165 >= 0xFFFFFFFFFFFFFFEFLL)
      v558 = v21;
    else
      v558 = 0;
    v559 = v558 + v165;
    v560 = 2688 * v559;
    v561 = (__PAIR128__(16, 2688) * v559) >> 64;
    v334 = __CFADD__(v561, v560);
    v562 = v561 + v560;
    if (v334)
      v563 = v21;
    else
      v563 = 0;
    v564 = (unint64_t)(v563 + v562) > 0xFFFFFFFFFFFFFFEELL;
    v334 = __CFADD__(v563, v562);
    v565 = v563 + v562;
    if (v334 || v564)
      v567 = v21;
    else
      v567 = 0;
    v568 = v567 + v565;
    if (v142 >= 0xFFFFFFFFFFFFFFEFLL)
      v569 = v21;
    else
      v569 = 0;
    v570 = v569 + v142;
    v571 = 3 * v570;
    v572 = (__PAIR128__(16, 3072) * v570) >> 64;
    if (v568 >= 0xFFFFFFFFFFFFFFEFLL)
      v573 = v21;
    else
      v573 = 0;
    v334 = __CFADD__(v572, v571 << 10);
    v574 = v572 + (v571 << 10);
    if (v334)
      v575 = v21;
    else
      v575 = 0;
    v334 = __CFADD__(v575, v574);
    v576 = v575 + v574;
    v577 = v573 + v568;
    v578 = v334;
    if (v576 > 0xFFFFFFFFFFFFFFEELL)
      v578 = 1;
    if (v578)
      v579 = v21;
    else
      v579 = 0;
    v580 = v576 + v577 + v579;
    if (v580 <= 0xFFFFFFFFFFFFFFEELL && v580 >= v577)
      v582 = 0;
    else
      v582 = v21;
    v583 = v582 + v580;
    if (v557)
      v584 = v21;
    else
      v584 = 0;
    v585 = v584 + v556;
    v586 = v585 + v583 > 0xFFFFFFFFFFFFFFEELL;
    v334 = __CFADD__(v585, v583);
    v587 = v585 + v583;
    if (v334)
      v586 = 1;
    if (v549)
      v588 = v21;
    else
      v588 = 0;
    v589 = v588 + v548;
    if (v586)
      v590 = v21;
    else
      v590 = 0;
    v591 = v590 + v587;
    v334 = __CFADD__(v589, v591);
    v592 = v589 + v591;
    v593 = v334;
    if (v60 >= 0xFFFFFFFFFFFFFFEFLL)
      v594 = v21;
    else
      v594 = 0;
    v595 = v594 + v60;
    v596 = 21504 * v595;
    v597 = (__PAIR128__(16, 21504) * v595) >> 64;
    if (v592 > 0xFFFFFFFFFFFFFFEELL)
      v593 = 1;
    if (v593)
      v598 = v21;
    else
      v598 = 0;
    v334 = __CFADD__(v597, v596);
    v599 = v597 + v596;
    v600 = v598 + v592;
    if (v334)
      v601 = v21;
    else
      v601 = 0;
    v334 = __CFADD__(v601, v599);
    v602 = v601 + v599;
    v603 = v334;
    if (v602 > 0xFFFFFFFFFFFFFFEELL)
      v603 = 1;
    if (v603)
      v604 = v21;
    else
      v604 = 0;
    v605 = v604 + v602;
    v334 = __CFADD__(v605, v600);
    v606 = v605 + v600;
    v607 = v334;
    if (v606 > 0xFFFFFFFFFFFFFFEELL)
      v607 = 1;
    if (v607)
      v608 = v21;
    else
      v608 = 0;
    v609 = v608 + v606;
    v610 = 0xBCE0B40AAD3903CALL * v609;
    v611 = (((v609 * (unsigned __int128)0xBCE0B40AAD3903CALL) >> 64) * (unint64_t)v21) >> 64;
    v612 = (__PAIR128__(16, 0xBCE0B40AAD3903CALL) * v609) >> 64;
    v334 = __CFADD__(v612, v610);
    v613 = v612 + v610;
    if (v334)
      v614 = v611 + 1;
    else
      v614 = v611;
    v615 = 17 * v614;
    v616 = (unint64_t)(v615 + v613) > 0xFFFFFFFFFFFFFFEELL;
    v334 = __CFADD__(v615, v613);
    v617 = v615 + v613;
    v618 = STACK[0x3C78] * STACK[0x3BE8];
    v619 = STACK[0x3BE8];
    v620 = (__PAIR128__(16, STACK[0x3C78]) * v619) >> 64;
    if (v334)
      v616 = 1;
    v334 = __CFADD__(v620, v618);
    v621 = v620 + v618;
    if (v334)
      v622 = (((((unsigned __int128)STACK[0x3C78] * v619) >> 64) * (unint64_t)v21) >> 64) + 1;
    else
      v622 = ((((unsigned __int128)STACK[0x3C78] * v619) >> 64) * (unint64_t)v21) >> 64;
    v623 = 17 * v622;
    v334 = __CFADD__(v623, v621);
    v624 = v623 + v621;
    v625 = v334;
    if (v624 > 0xFFFFFFFFFFFFFFEELL)
      v625 = 1;
    if (v625)
      v626 = v21;
    else
      v626 = 0;
    v627 = v626 + v624;
    if (v616)
      v628 = v21;
    else
      v628 = 0;
    v629 = v628 + v617;
    v630 = v627 + v629 > 0xFFFFFFFFFFFFFFEELL;
    v334 = __CFADD__(v627, v629);
    v631 = v627 + v629;
    if (v334 || v630)
      v633 = v21;
    else
      v633 = 0;
    v634 = v633 + v631;
    v635 = 0x260186186186185FLL * v634;
    v636 = (((v634 * (unsigned __int128)0x260186186186185FuLL) >> 64) * (unint64_t)v21) >> 64;
    v637 = (__PAIR128__(16, 0x260186186186185FLL) * v634) >> 64;
    v334 = __CFADD__(v637, v635);
    v638 = v637 + v635;
    if (v334)
      v639 = v636 + 1;
    else
      v639 = v636;
    v640 = 17 * v639;
    v641 = (unint64_t)(v640 + v638) > 0xFFFFFFFFFFFFFFEELL;
    v334 = __CFADD__(v640, v638);
    v642 = v640 + v638;
    if (v334 || v641)
      v644 = v21;
    else
      v644 = 0;
    v645 = v644 + v642;
    v646 = 0x500038BDBA674958 * (v644 + v642);
    STACK[0x3B60] = v645;
    v647 = (v645 * (unsigned __int128)0x500038BDBA674958uLL) >> 64;
    v648 = (v647 * (unsigned __int128)(unint64_t)v21) >> 64;
    v647 *= 17;
    v334 = __CFADD__(v647, v646);
    v649 = v647 + v646;
    if (v334)
      v650 = v648 + 1;
    else
      v650 = v648;
    v651 = 17 * v650;
    v652 = v651 + v649 > 0xFFFFFFFFFFFFFFEELL;
    v334 = __CFADD__(v651, v649);
    v653 = v651 + v649;
    if (v334)
      v652 = 1;
    if (v165 >= 0xFFFFFFFFFFFFFFDFLL)
      v654 = v26;
    else
      v654 = 0;
    v655 = v654 + v165;
    v656 = 362880 * v655;
    v657 = (__PAIR128__(32, 362880) * v655) >> 64;
    v334 = __CFADD__(v657, v656);
    v658 = v657 + v656;
    if (v334)
      v659 = v26;
    else
      v659 = 0;
    v660 = (unint64_t)(v659 + v658) > 0xFFFFFFFFFFFFFFDELL;
    v334 = __CFADD__(v659, v658);
    v661 = v659 + v658;
    if (v334 || v660)
      v663 = v26;
    else
      v663 = 0;
    v664 = v663 + v661;
    if (v142 >= 0xFFFFFFFFFFFFFFDFLL)
      v665 = v26;
    else
      v665 = 0;
    v666 = v665 + v142;
    v667 = 387072 * v666;
    v668 = (__PAIR128__(32, 387072) * v666) >> 64;
    if (v664 >= 0xFFFFFFFFFFFFFFDFLL)
      v669 = v26;
    else
      v669 = 0;
    v670 = v669 + v664;
    v334 = __CFADD__(v668, v667);
    v671 = v668 + v667;
    if (v334)
      v672 = v26;
    else
      v672 = 0;
    v334 = __CFADD__(v672, v671);
    v673 = v672 + v671;
    v674 = v334;
    if (v673 > 0xFFFFFFFFFFFFFFDELL)
      v674 = 1;
    if (v674)
      v675 = v26;
    else
      v675 = 0;
    v676 = v673 + v670 + v675;
    if (v100 >= 0xFFFFFFFFFFFFFFDFLL)
      v677 = v26;
    else
      v677 = 0;
    v678 = v677 + v100;
    v679 = 414720 * v678;
    if (v676 > 0xFFFFFFFFFFFFFFDELL || v670 > v676)
      v681 = v26;
    else
      v681 = 0;
    v682 = v681 + v676;
    v683 = 33 * ((v678 * (unsigned __int128)0x65400uLL) >> 64);
    v334 = __CFADD__(v683, v679);
    v684 = v683 + v679;
    if (v334)
      v685 = v26;
    else
      v685 = 0;
    v334 = __CFADD__(v685, v684);
    v686 = v685 + v684;
    v687 = v334;
    if (v686 > 0xFFFFFFFFFFFFFFDELL)
      v687 = 1;
    if (v687)
      v688 = v26;
    else
      v688 = 0;
    v689 = v688 + v686;
    v690 = v689 + v682 > 0xFFFFFFFFFFFFFFDELL;
    v334 = __CFADD__(v689, v682);
    v691 = v689 + v682;
    v692 = v334 || v690;
    if (v214 >= 0xFFFFFFFFFFFFFFDFLL)
      v693 = v26;
    else
      v693 = 0;
    v2767 = v692 == 0;
    v694 = v693 + v214;
    v695 = 483840 * (v693 + v214);
    v696 = (__PAIR128__(32, 483840) * v694) >> 64;
    if (v2767)
      v697 = 0;
    else
      v697 = v26;
    v334 = __CFADD__(v696, v695);
    v698 = v696 + v695;
    v699 = v697 + v691;
    if (v334)
      v700 = v26;
    else
      v700 = 0;
    v334 = __CFADD__(v700, v698);
    v701 = v700 + v698;
    v702 = v334;
    if (v701 > 0xFFFFFFFFFFFFFFDELL)
      v702 = 1;
    if (v702)
      v703 = v26;
    else
      v703 = 0;
    v704 = v703 + v701;
    v334 = __CFADD__(v704, v699);
    v705 = v704 + v699;
    v706 = v334;
    if (v60 >= 0xFFFFFFFFFFFFFFDFLL)
      v707 = v26;
    else
      v707 = 0;
    v708 = v707 + v60;
    v709 = 645120 * v708;
    v710 = (v708 * (unsigned __int128)0x9D800uLL) >> 64;
    if (v705 > 0xFFFFFFFFFFFFFFDELL)
      v706 = 1;
    if (v706)
      v711 = v26;
    else
      v711 = 0;
    v712 = v711 + v705;
    v713 = 33 * v710 + v709;
    if (__CFADD__(33 * v710, v709))
      v714 = v26;
    else
      v714 = 0;
    v334 = __CFADD__(v714, v713);
    v715 = v714 + v713;
    v716 = v334;
    if (v715 > 0xFFFFFFFFFFFFFFDELL)
      v716 = 1;
    if (v716)
      v717 = v26;
    else
      v717 = 0;
    v718 = v717 + v715;
    v719 = v718 + v712 > 0xFFFFFFFFFFFFFFDELL;
    v334 = __CFADD__(v718, v712);
    v720 = v718 + v712;
    v721 = STACK[0x3BF0] * STACK[0x3BF8];
    v722 = STACK[0x3BF0];
    v723 = STACK[0x3BF8];
    v724 = (__PAIR128__(32, v722) * v723) >> 64;
    if (v334)
      v719 = 1;
    v334 = __CFADD__(v724, v721);
    v725 = v724 + v721;
    if (v334)
      v726 = ((((unsigned __int128)(v722 * v723) >> 64) * (unint64_t)v26) >> 64) + 1;
    else
      v726 = (((unsigned __int128)(v722 * v723) >> 64) * (unint64_t)v26) >> 64;
    v727 = 33 * v726;
    v728 = (unint64_t)(v727 + v725) > 0xFFFFFFFFFFFFFFDELL;
    v334 = __CFADD__(v727, v725);
    v729 = v727 + v725;
    if (v334 || v728)
      v731 = v26;
    else
      v731 = 0;
    v732 = v731 + v729;
    if (v719)
      v733 = v26;
    else
      v733 = 0;
    v734 = v733 + v720;
    v735 = 0xD2087261F2F13621 * v734;
    v736 = (((v734 * (unsigned __int128)0xD2087261F2F13621) >> 64) * (unint64_t)v26) >> 64;
    v737 = (__PAIR128__(32, 0xD2087261F2F13621) * v734) >> 64;
    v334 = __CFADD__(v737, v735);
    v738 = v737 + v735;
    if (v334)
      v739 = v736 + 1;
    else
      v739 = v736;
    v740 = 33 * v739;
    v334 = __CFADD__(v740, v738);
    v741 = v740 + v738;
    v742 = v334;
    if (v741 > 0xFFFFFFFFFFFFFFDELL)
      v742 = 1;
    if (v742)
      v743 = v26;
    else
      v743 = 0;
    v744 = v743 + v741;
    v745 = v732 + v744 > 0xFFFFFFFFFFFFFFDELL;
    v334 = __CFADD__(v732, v744);
    v746 = v732 + v744;
    v747 = v334 || v745;
    if (v60 >= 0xFFFFFFFFFFFFFFCBLL)
      v748 = 53;
    else
      v748 = 0;
    v749 = v748 + v60;
    v750 = 5491200 * v749;
    v751 = 53 * ((v749 * (unsigned __int128)0x53CA00uLL) >> 64);
    v334 = __CFADD__(v751, v750);
    v752 = v751 + v750;
    if (v334)
      v753 = 53;
    else
      v753 = 0;
    v754 = (unint64_t)(v753 + v752) > 0xFFFFFFFFFFFFFFCALL;
    v334 = __CFADD__(v753, v752);
    v755 = v753 + v752;
    v756 = v334 || v754;
    if (v100 >= 0xFFFFFFFFFFFFFFCBLL)
      v757 = 53;
    else
      v757 = 0;
    v758 = v757 + v100;
    v759 = 4347200 * v758;
    v760 = 53 * ((v758 * (unsigned __int128)0x425540uLL) >> 64);
    v334 = __CFADD__(v760, v759);
    v761 = v760 + v759;
    if (v334)
      v762 = 53;
    else
      v762 = 0;
    v763 = (unint64_t)(v762 + v761) > 0xFFFFFFFFFFFFFFCALL;
    v334 = __CFADD__(v762, v761);
    v764 = v762 + v761;
    v765 = v334 || v763;
    if (v165 >= 0xFFFFFFFFFFFFFFCBLL)
      v766 = 53;
    else
      v766 = 0;
    v767 = v766 + v165;
    v768 = 4012800 * v767;
    v769 = 53 * ((v767 * (unsigned __int128)0x3D3B00uLL) >> 64);
    v334 = __CFADD__(v769, v768);
    v770 = v769 + v768;
    if (v334)
      v771 = 53;
    else
      v771 = 0;
    v772 = (unint64_t)(v771 + v770) > 0xFFFFFFFFFFFFFFCALL;
    v334 = __CFADD__(v771, v770);
    v773 = v771 + v770;
    v774 = v334 || v772;
    if (v142 >= 0xFFFFFFFFFFFFFFCBLL)
      v775 = 53;
    else
      v775 = 0;
    if (v774)
      v776 = 53;
    else
      v776 = 0;
    v777 = v776 + v773;
    v778 = v775 + v142;
    v779 = 4173312 * v778;
    v780 = 53 * ((v778 * (unsigned __int128)0x3FAE00uLL) >> 64);
    if (v777 >= 0xFFFFFFFFFFFFFFCBLL)
      v781 = 53;
    else
      v781 = 0;
    v334 = __CFADD__(v780, v779);
    v782 = v780 + v779;
    v783 = v781 + v777;
    if (v334)
      v784 = 53;
    else
      v784 = 0;
    v334 = __CFADD__(v784, v782);
    v785 = v784 + v782;
    v786 = v334;
    if (v785 > 0xFFFFFFFFFFFFFFCALL)
      v786 = 1;
    if (v786)
      v787 = 53;
    else
      v787 = 0;
    v788 = v785 + v783 + v787;
    if (v783 > v788 || v788 > 0xFFFFFFFFFFFFFFCALL)
      v790 = 53;
    else
      v790 = 0;
    v791 = v790 + v788;
    if (v765)
      v792 = 53;
    else
      v792 = 0;
    v793 = v792 + v764;
    v794 = v793 + v791 > 0xFFFFFFFFFFFFFFCALL;
    v334 = __CFADD__(v793, v791);
    v795 = v793 + v791;
    v796 = STACK[0x3C30] * STACK[0x3C38];
    v797 = (STACK[0x3C30] * (unsigned __int128)STACK[0x3C38]) >> 64;
    v798 = (v797 * (unsigned __int128)0x35uLL) >> 64;
    v799 = 53 * v797;
    if (v334)
      v794 = 1;
    v334 = __CFADD__(v799, v796);
    v800 = v799 + v796;
    if (v334)
      v801 = v798 + 1;
    else
      v801 = v798;
    v802 = 53 * v801;
    v334 = __CFADD__(v802, v800);
    v803 = v802 + v800;
    v804 = v334;
    if (v803 > 0xFFFFFFFFFFFFFFCALL)
      v804 = 1;
    if (v804)
      v805 = 53;
    else
      v805 = 0;
    v806 = v805 + v803;
    if (v214 >= 0xFFFFFFFFFFFFFFCBLL)
      v807 = 53;
    else
      v807 = 0;
    v808 = v807 + v214;
    v809 = 4742400 * v808;
    v810 = (v808 * (unsigned __int128)0x485D00uLL) >> 64;
    if (v794)
      v811 = 53;
    else
      v811 = 0;
    v812 = 53 * v810;
    v813 = v811 + v795;
    v814 = v812 + v809;
    if (__CFADD__(v812, v809))
      v815 = 53;
    else
      v815 = 0;
    v334 = __CFADD__(v815, v814);
    v816 = v815 + v814;
    v817 = v334;
    if (v816 > 0xFFFFFFFFFFFFFFCALL)
      v817 = 1;
    if (v817)
      v818 = 53;
    else
      v818 = 0;
    v819 = v818 + v816;
    v334 = __CFADD__(v819, v813);
    v820 = v819 + v813;
    v821 = v334;
    if (v820 > 0xFFFFFFFFFFFFFFCALL)
      v821 = 1;
    if (v821)
      v822 = 53;
    else
      v822 = 0;
    v823 = v822 + v820;
    if (v756)
      v824 = 53;
    else
      v824 = 0;
    v825 = v824 + v755;
    v334 = __CFADD__(v825, v823);
    v826 = v825 + v823;
    v827 = v334;
    if (v826 > 0xFFFFFFFFFFFFFFCALL)
      v827 = 1;
    if (v827)
      v828 = 53;
    else
      v828 = 0;
    v829 = v828 + v826;
    if (v747)
      v830 = v26;
    else
      v830 = 0;
    v831 = v830 + v746;
    v832 = 0xA64A3E2F1B4DE8E6 * v829;
    v833 = (v829 * (unsigned __int128)0xA64A3E2F1B4DE8E6) >> 64;
    v834 = (v833 * (unsigned __int128)0x35uLL) >> 64;
    v833 *= 53;
    v334 = __CFADD__(v833, v832);
    v835 = v833 + v832;
    if (v334)
      v836 = v834 + 1;
    else
      v836 = v834;
    v837 = 53 * v836;
    v334 = __CFADD__(v837, v835);
    v838 = v837 + v835;
    v839 = v334;
    v840 = 0xBF751FE036E6FC90 * v831;
    v841 = (v831 * (unsigned __int128)0xBF751FE036E6FC90) >> 64;
    if (v838 > 0xFFFFFFFFFFFFFFCALL)
      v839 = 1;
    if (v839)
      v842 = 53;
    else
      v842 = 0;
    v843 = v842 + v838;
    v334 = __CFADD__(v806, v843);
    v844 = v806 + v843;
    v845 = v334;
    v846 = (v841 * (unsigned __int128)(unint64_t)v26) >> 64;
    v847 = 33 * v841;
    if (v844 > 0xFFFFFFFFFFFFFFCALL)
      v845 = 1;
    if (v845)
      v848 = 53;
    else
      v848 = 0;
    v334 = __CFADD__(v847, v840);
    v849 = v847 + v840;
    v850 = v848 + v844;
    if (v334)
      v851 = v846 + 1;
    else
      v851 = v846;
    v852 = 33 * v851;
    v334 = __CFADD__(v852, v849);
    v853 = v852 + v849;
    v854 = v334;
    if (v853 > 0xFFFFFFFFFFFFFFDELL)
      v854 = 1;
    if (v854)
      v855 = v26;
    else
      v855 = 0;
    v856 = v855 + v853;
    v857 = 0x59708602BDC08F49 * v850;
    v858 = (v850 * (unsigned __int128)0x59708602BDC08F49uLL) >> 64;
    v859 = 0x8696596596596585 * v856;
    STACK[0x3C08] = v856;
    v860 = (v856 * (unsigned __int128)0x8696596596596585) >> 64;
    v861 = (v858 * (unsigned __int128)0x35uLL) >> 64;
    v858 *= 53;
    v334 = __CFADD__(v858, v857);
    v862 = v858 + v857;
    if (v334)
      v863 = v861 + 1;
    else
      v863 = v861;
    v864 = 53 * v863;
    v334 = __CFADD__(v864, v862);
    v865 = v864 + v862;
    v866 = v334;
    v867 = (v860 * (unsigned __int128)(unint64_t)v26) >> 64;
    v868 = 33 * v860;
    if (v865 > 0xFFFFFFFFFFFFFFCALL)
      v866 = 1;
    if (v652)
      v869 = v21;
    else
      v869 = 0;
    v334 = __CFADD__(v868, v859);
    v870 = v868 + v859;
    if (v334)
      v871 = v867 + 1;
    else
      v871 = v867;
    v872 = 33 * v871;
    v334 = __CFADD__(v872, v870);
    v873 = v872 + v870;
    v874 = v334;
    if (v866)
      v875 = 53;
    else
      v875 = 0;
    v876 = v875 + v865;
    if (v873 > 0xFFFFFFFFFFFFFFDELL)
      v877 = 1;
    else
      v877 = v874;
    if (v877)
      v878 = v26;
    else
      v878 = 0;
    v879 = v878 + v873;
    v880 = v869 + v653;
    if (v540)
      v881 = v25;
    else
      v881 = 0;
    v882 = v881 + v539;
    if (v880 >= 0xFFFFFFFFFFFFFFCBLL)
      v883 = 53;
    else
      v883 = 0;
    v884 = v883 + v880;
    v885 = 13440 * v884;
    v886 = 53 * ((v884 * (unsigned __int128)0x3480uLL) >> 64);
    if (v879 >= 0xFFFFFFFFFFFFFFCBLL)
      v887 = 53;
    else
      v887 = 0;
    v334 = __CFADD__(v886, v885);
    v888 = v886 + v885;
    v889 = v887 + v879;
    if (v334)
      v890 = 53;
    else
      v890 = 0;
    v334 = __CFADD__(v890, v888);
    v891 = v890 + v888;
    v892 = v334;
    v893 = 24192 * v889;
    v894 = (v889 * (unsigned __int128)0x5E80uLL) >> 64;
    if (v891 > 0xFFFFFFFFFFFFFFCALL)
      v892 = 1;
    if (v892)
      v895 = 53;
    else
      v895 = 0;
    v896 = v895 + v891;
    v897 = 53 * v894;
    v334 = __CFADD__(v897, v893);
    v898 = v897 + v893;
    if (v334)
      v899 = 53;
    else
      v899 = 0;
    if (v896 >= 0xFFFFFFFFFFFFFFCBLL)
      v900 = 53;
    else
      v900 = 0;
    v901 = v900 + v896;
    v334 = __CFADD__(v899, v898);
    v902 = v899 + v898;
    v903 = v334;
    if (v902 > 0xFFFFFFFFFFFFFFCALL)
      v903 = 1;
    if (v903)
      v904 = 53;
    else
      v904 = 0;
    v905 = v904 + v902;
    v334 = __CFADD__(v905, v901);
    v906 = v905 + v901;
    v907 = v334;
    if (v906 > 0xFFFFFFFFFFFFFFCALL)
      v907 = 1;
    if (v907)
      v908 = 53;
    else
      v908 = 0;
    v909 = v908 + v906;
    if (v420)
      v910 = 53;
    else
      v910 = 0;
    v911 = v910 + v419;
    v334 = __CFADD__(v911, v909);
    v912 = v911 + v909;
    v913 = v334;
    if (v912 > 0xFFFFFFFFFFFFFFCALL)
      v913 = 1;
    if (v913)
      v914 = 53;
    else
      v914 = 0;
    v915 = v914 + v912;
    if (v882 >= 0xFFFFFFFFFFFFFFCBLL)
      v916 = 53;
    else
      v916 = 0;
    if (v293)
      v917 = 53;
    else
      v917 = 0;
    v918 = v916 + v882;
    v919 = 80640 * v918;
    v920 = v917 + STACK[0x3BD0];
    v334 = __CFADD__(v920, v915);
    v921 = v920 + v915;
    v922 = v334;
    v923 = (v918 * (unsigned __int128)0x13B00uLL) >> 64;
    if (v921 > 0xFFFFFFFFFFFFFFCALL)
      v922 = 1;
    v924 = 53 * v923;
    if (v922)
      v925 = 53;
    else
      v925 = 0;
    v926 = v925 + v921;
    v334 = __CFADD__(v924, v919);
    v927 = v924 + v919;
    if (v334)
      v928 = 53;
    else
      v928 = 0;
    v334 = __CFADD__(v928, v927);
    v929 = v928 + v927;
    v930 = v334;
    if (v929 > 0xFFFFFFFFFFFFFFCALL)
      v930 = 1;
    if (v930)
      v931 = 53;
    else
      v931 = 0;
    v932 = v931 + v929;
    v334 = __CFADD__(v932, v926);
    v933 = v932 + v926;
    v934 = v334;
    if (v933 > 0xFFFFFFFFFFFFFFCALL)
      v934 = 1;
    if (v934)
      v935 = 53;
    else
      v935 = 0;
    v936 = v935 + v933;
    STACK[0x3C78] = v876;
    v334 = v936 >= v876;
    v937 = v936 - v876;
    v938 = -53;
    if (v334)
      v938 = 0;
    v939 = v937 + v938;
    v940 = 0xF1A85D307DB285A1 * v939;
    v941 = (v939 * (unsigned __int128)0xF1A85D307DB285A1) >> 64;
    v942 = (v941 * (unsigned __int128)0x35uLL) >> 64;
    v941 *= 53;
    v334 = __CFADD__(v941, v940);
    v943 = v941 + v940;
    if (v334)
      v944 = v942 + 1;
    else
      v944 = v942;
    v945 = 53 * v944;
    v334 = __CFADD__(v945, v943);
    v946 = v945 + v943;
    v947 = v334;
    if (v946 > 0xFFFFFFFFFFFFFFCALL)
      v947 = 1;
    if (v947)
      v948 = 53;
    else
      v948 = 0;
    v949 = v948 + v946;
    if (v949 >= 0xFFFFFFFFFFFFFFF1)
      v950 = 15;
    else
      v950 = 0;
    v951 = v950 + v949;
    v952 = -829455 * v951;
    v953 = (v951 * (unsigned __int128)0xFFFFFFFFFFF357F1) >> 64;
    v954 = 15 * v953;
    v955 = (v953 * (unsigned __int128)0xFuLL) >> 64;
    v334 = __CFADD__(v954, v952);
    v956 = v954 + v952;
    if (v334)
      ++v955;
    v957 = 15 * v955;
    STACK[0x3C38] = v957 + v956;
    v958 = __CFADD__(v957, v956) || (unint64_t)(v957 + v956) > 0xFFFFFFFFFFFFFFF0;
    LODWORD(STACK[0x3C30]) = v958;
    if (v949 >= 0xFFFFFFFFFFFFFFF7)
      v959 = 9;
    else
      v959 = 0;
    v960 = v959 + v949;
    v961 = -7879689 * v960;
    v962 = (((v960 * (unsigned __int128)0xFFFFFFFFFF87C3F7) >> 64) * 9) >> 64;
    v963 = (__PAIR128__(8, -7879689) * v960) >> 64;
    v334 = __CFADD__(v963, v961);
    v964 = v963 + v961;
    if (v334)
      v965 = v962 + 1;
    else
      v965 = v962;
    v966 = 9 * v965;
    STACK[0x3BF8] = v966 + v964;
    v967 = __CFADD__(v966, v964) || (unint64_t)(v966 + v964) > 0xFFFFFFFFFFFFFFF6;
    LODWORD(STACK[0x3BF0]) = v967;
    if (v949 >= 0xFFFFFFFFFFFFFFFBLL)
      v968 = 5;
    else
      v968 = 0;
    v969 = v968 + v949;
    v970 = -19192325 * v969;
    v971 = (((v969 * (unsigned __int128)0xFFFFFFFFFEDB25FBLL) >> 64) * 5) >> 64;
    v972 = (__PAIR128__(4, -19192325) * v969) >> 64;
    v334 = __CFADD__(v972, v970);
    v973 = v972 + v970;
    if (v334)
      v974 = v971 + 1;
    else
      v974 = v971;
    v975 = 5 * v974;
    STACK[0x3BE8] = v975 + v973;
    v976 = __CFADD__(v975, v973) || (unint64_t)(v975 + v973) > 0xFFFFFFFFFFFFFFFALL;
    LODWORD(STACK[0x3BE0]) = v976;
    if (v949 >= 0xFFFFFFFFFFFFFFFDLL)
      v977 = 3;
    else
      v977 = 0;
    v978 = v977 + v949;
    v979 = -27941763 * v978;
    v980 = (((v978 * (unsigned __int128)0xFFFFFFFFFE55A47DLL) >> 64) * 3) >> 64;
    v981 = (__PAIR128__(2, -27941763) * v978) >> 64;
    v334 = __CFADD__(v981, v979);
    v982 = v981 + v979;
    if (v334)
      v983 = v980 + 1;
    else
      v983 = v980;
    v984 = 3 * v983;
    STACK[0x3BD0] = v984 + v982;
    v985 = __CFADD__(v984, v982) || (unint64_t)(v984 + v982) > 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(STACK[0x3BC8]) = v985;
    if (v949 == -1)
      v949 = 0;
    v986 = -39378945 * v949;
    v987 = (v949 * (unsigned __int128)0xFFFFFFFFFDA71FFFLL) >> 64;
    v988 = __CFADD__(__CFADD__(v987, v986), v987 + v986);
    v989 = __CFADD__(v987, v986) + v987 + v986 == -1 || v988;
    STACK[0x3BC0] = v987 + v986 + __CFADD__(v987, v986) + v989;
    if (v882 >= 0xFFFFFFFFFFFFFFF1)
      v990 = 15;
    else
      v990 = 0;
    v991 = v990 + v882;
    v992 = 25920 * v991;
    v993 = 15 * ((v991 * (unsigned __int128)0x6540uLL) >> 64);
    v334 = __CFADD__(v993, v992);
    v994 = v993 + v992;
    if (v334)
      v995 = 15;
    else
      v995 = 0;
    STACK[0x3BB8] = v995 + v994;
    v996 = __CFADD__(v995, v994) || (unint64_t)(v995 + v994) > 0xFFFFFFFFFFFFFFF0;
    LODWORD(STACK[0x3BB0]) = v996;
    if (v286 >= 0xFFFFFFFFFFFFFFF1)
      v997 = 15;
    else
      v997 = 0;
    v998 = v997 + v286;
    v999 = 27648 * v998;
    v1000 = 15 * ((v998 * (unsigned __int128)0x6C00uLL) >> 64);
    v334 = __CFADD__(v1000, v999);
    v1001 = v1000 + v999;
    if (v334)
      v1002 = 15;
    else
      v1002 = 0;
    STACK[0x3BA0] = v1002 + v1001;
    v1003 = __CFADD__(v1002, v1001) || (unint64_t)(v1002 + v1001) > 0xFFFFFFFFFFFFFFF0;
    LODWORD(STACK[0x3B78]) = v1003;
    if (v880 >= 0xFFFFFFFFFFFFFFF1)
      v1004 = 15;
    else
      v1004 = 0;
    v1005 = v1004 + v880;
    v1006 = 414720 * v1005;
    v1007 = 15 * ((v1005 * (unsigned __int128)0x65400uLL) >> 64);
    v334 = __CFADD__(v1007, v1006);
    v1008 = v1007 + v1006;
    if (v334)
      v1009 = 15;
    else
      v1009 = 0;
    v334 = __CFADD__(v1009, v1008);
    v1010 = v1009 + v1008;
    v1011 = v334;
    if (v1010 > 0xFFFFFFFFFFFFFFF0)
      v1011 = 1;
    if (v879 >= 0xFFFFFFFFFFFFFFF1)
      v1012 = 15;
    else
      v1012 = 0;
    v1013 = v1012 + v879;
    v1014 = 46080 * v1013;
    v1015 = (v1013 * (unsigned __int128)0xB400uLL) >> 64;
    if (v1011)
      v1016 = 15;
    else
      v1016 = 0;
    v1017 = v1016 + v1010;
    v1018 = 15 * v1015 + v1014;
    if (__CFADD__(15 * v1015, v1014))
      v1019 = 15;
    else
      v1019 = 0;
    v334 = __CFADD__(v1019, v1018);
    v1020 = v1019 + v1018;
    v1021 = v334;
    if (v1020 > 0xFFFFFFFFFFFFFFF0)
      v1021 = 1;
    if (v1017 >= 0xFFFFFFFFFFFFFFF1)
      v1022 = 15;
    else
      v1022 = 0;
    v1023 = v1022 + v1017;
    if (v1021)
      v1024 = 15;
    else
      v1024 = 0;
    v1025 = v1024 + v1020;
    v334 = __CFADD__(v1025, v1023);
    v1026 = v1025 + v1023;
    v1027 = v334;
    if (v412 >= 0xFFFFFFFFFFFFFFF1)
      v1028 = 15;
    else
      v1028 = 0;
    v1029 = v1028 + v412;
    v1030 = 34560 * v1029;
    v1031 = (v1029 * (unsigned __int128)0x8700uLL) >> 64;
    if (v1026 > 0xFFFFFFFFFFFFFFF0)
      v1027 = 1;
    v1032 = 15 * v1031;
    if (v1027)
      v1033 = 15;
    else
      v1033 = 0;
    v334 = __CFADD__(v1032, v1030);
    v1034 = v1032 + v1030;
    if (v334)
      v1035 = 15;
    else
      v1035 = 0;
    v334 = __CFADD__(v1035, v1034);
    v1036 = v1035 + v1034;
    v1037 = v334;
    v1038 = v1033 + v1026;
    if (v1036 > 0xFFFFFFFFFFFFFFF0)
      v1039 = 1;
    else
      v1039 = v1037;
    if (v1039)
      v1040 = 15;
    else
      v1040 = 0;
    v1041 = v1040 + v1036;
    v1042 = v1041 + v1038;
    v1043 = __CFADD__(v1041, v1038) || v1041 + v1038 > 0xFFFFFFFFFFFFFFF0;
    if (v880 >= 0xFFFFFFFFFFFFFFF7)
      v1044 = 9;
    else
      v1044 = 0;
    v1045 = v1044 + v880;
    v1046 = 984960 * v1045;
    v1047 = (__PAIR128__(8, 984960) * v1045) >> 64;
    v334 = __CFADD__(v1047, v1046);
    v1048 = v1047 + v1046;
    if (v334)
      v1049 = 9;
    else
      v1049 = 0;
    v334 = __CFADD__(v1049, v1048);
    v1050 = v1049 + v1048;
    v1051 = v334;
    if (v1050 > 0xFFFFFFFFFFFFFFF6)
      v1051 = 1;
    if (v1051)
      v1052 = 9;
    else
      v1052 = 0;
    v1053 = v1052 + v1050;
    if (v879 >= 0xFFFFFFFFFFFFFFF7)
      v1054 = 9;
    else
      v1054 = 0;
    v1055 = v1054 + v879;
    v1056 = 328320 * v1055;
    v1057 = (__PAIR128__(8, 328320) * v1055) >> 64;
    v334 = __CFADD__(v1057, v1056);
    v1058 = v1057 + v1056;
    if (v334)
      v1059 = 9;
    else
      v1059 = 0;
    v334 = __CFADD__(v1059, v1058);
    v1060 = v1059 + v1058;
    v1061 = v334;
    if (v1053 >= 0xFFFFFFFFFFFFFFF7)
      v1062 = 9;
    else
      v1062 = 0;
    v1063 = v1062 + v1053;
    if (v1060 > 0xFFFFFFFFFFFFFFF6)
      v1061 = 1;
    if (v1061)
      v1064 = 9;
    else
      v1064 = 0;
    v1065 = v1064 + v1060;
    v1066 = v1065 + v1063 > 0xFFFFFFFFFFFFFFF6;
    v334 = __CFADD__(v1065, v1063);
    v1067 = v1065 + v1063;
    v1068 = v334 || v1066;
    if (v412 >= 0xFFFFFFFFFFFFFFF7)
      v1069 = 9;
    else
      v1069 = 0;
    v1070 = v1069 + v412;
    v1071 = 513 * v1070;
    v1072 = (__PAIR128__(8, 262656) * v1070) >> 64;
    if (v1068)
      v1073 = 9;
    else
      v1073 = 0;
    v334 = __CFADD__(v1072, v1071 << 9);
    v1074 = v1072 + (v1071 << 9);
    v1075 = v1073 + v1067;
    if (v334)
      v1076 = 9;
    else
      v1076 = 0;
    v334 = __CFADD__(v1076, v1074);
    v1077 = v1076 + v1074;
    v1078 = v334;
    if (v1077 > 0xFFFFFFFFFFFFFFF6)
      v1078 = 1;
    if (v1078)
      v1079 = 9;
    else
      v1079 = 0;
    v1080 = v1079 + v1077;
    v1081 = v1080 + v1075 > 0xFFFFFFFFFFFFFFF6;
    v334 = __CFADD__(v1080, v1075);
    v1082 = v1080 + v1075;
    if (v334 || v1081)
      v1084 = 9;
    else
      v1084 = 0;
    v1085 = v1084 + v1082;
    if (v286 >= 0xFFFFFFFFFFFFFFF7)
      v1086 = 9;
    else
      v1086 = 0;
    v1087 = v1086 + v286;
    v1088 = 218880 * v1087;
    v1089 = (__PAIR128__(8, 218880) * v1087) >> 64;
    v334 = __CFADD__(v1089, v1088);
    v1090 = v1089 + v1088;
    if (v334)
      v1091 = 9;
    else
      v1091 = 0;
    v334 = __CFADD__(v1091, v1090);
    v1092 = v1091 + v1090;
    v1093 = v334;
    if (v1092 > 0xFFFFFFFFFFFFFFF6)
      v1093 = 1;
    if (v1093)
      v1094 = 9;
    else
      v1094 = 0;
    v1095 = v1094 + v1092;
    v1096 = v1095 + v1085 > 0xFFFFFFFFFFFFFFF6;
    v334 = __CFADD__(v1095, v1085);
    v1097 = v1095 + v1085;
    v1098 = v334 || v1096;
    if (v882 >= 0xFFFFFFFFFFFFFFF7)
      v1099 = 9;
    else
      v1099 = 0;
    v1100 = v1099 + v882;
    v1101 = 207360 * v1100;
    v1102 = (__PAIR128__(8, 207360) * v1100) >> 64;
    if (v1098)
      v1103 = 9;
    else
      v1103 = 0;
    v334 = __CFADD__(v1102, v1101);
    v1104 = v1102 + v1101;
    if (v334)
      v1105 = 9;
    else
      v1105 = 0;
    v334 = __CFADD__(v1105, v1104);
    v1106 = v1105 + v1104;
    v1107 = v334;
    v1108 = v1103 + v1097;
    if (v1106 > 0xFFFFFFFFFFFFFFF6)
      v1109 = 1;
    else
      v1109 = v1107;
    if (v1109)
      v1110 = 9;
    else
      v1110 = 0;
    v1111 = v1110 + v1106;
    v1112 = v1111 + v1108;
    v1113 = __CFADD__(v1111, v1108) || v1111 + v1108 > 0xFFFFFFFFFFFFFFF6;
    if (v882 >= 0xFFFFFFFFFFFFFFFBLL)
      v1114 = 5;
    else
      v1114 = 0;
    v1115 = v1114 + v882;
    v1116 = 456960 * v1115;
    v1117 = (__PAIR128__(4, 456960) * v1115) >> 64;
    v334 = __CFADD__(v1117, v1116);
    v1118 = v1117 + v1116;
    if (v334)
      v1119 = 5;
    else
      v1119 = 0;
    v1120 = v1119 + v1118;
    v1121 = __CFADD__(v1119, v1118) || (unint64_t)(v1119 + v1118) > 0xFFFFFFFFFFFFFFFALL;
    if (v286 >= 0xFFFFFFFFFFFFFFFBLL)
      v1122 = 5;
    else
      v1122 = 0;
    v1123 = v1122 + v286;
    v1124 = 479808 * v1123;
    v1125 = (__PAIR128__(4, 479808) * v1123) >> 64;
    v334 = __CFADD__(v1125, v1124);
    v1126 = v1125 + v1124;
    if (v334)
      v1127 = 5;
    else
      v1127 = 0;
    v1128 = v1127 + v1126;
    v1129 = __CFADD__(v1127, v1126) || (unint64_t)(v1127 + v1126) > 0xFFFFFFFFFFFFFFFALL;
    if (v412 >= 0xFFFFFFFFFFFFFFFBLL)
      v1130 = 5;
    else
      v1130 = 0;
    v1131 = v1130 + v412;
    v1132 = 564480 * v1131;
    v1133 = (__PAIR128__(4, 564480) * v1131) >> 64;
    v334 = __CFADD__(v1133, v1132);
    v1134 = v1133 + v1132;
    if (v334)
      v1135 = 5;
    else
      v1135 = 0;
    v1136 = (unint64_t)(v1135 + v1134) > 0xFFFFFFFFFFFFFFFALL;
    v334 = __CFADD__(v1135, v1134);
    v1137 = v1135 + v1134;
    v1138 = v334 || v1136;
    if (v880 >= 0xFFFFFFFFFFFFFFFBLL)
      v1139 = 5;
    else
      v1139 = 0;
    v1140 = v1139 + v880;
    v1141 = 1599360 * v1140;
    v1142 = (__PAIR128__(4, 1599360) * v1140) >> 64;
    v334 = __CFADD__(v1142, v1141);
    v1143 = v1142 + v1141;
    if (v334)
      v1144 = 5;
    else
      v1144 = 0;
    v334 = __CFADD__(v1144, v1143);
    v1145 = v1144 + v1143;
    v1146 = v334;
    if (v1145 > 0xFFFFFFFFFFFFFFFALL)
      v1146 = 1;
    if (v1146)
      v1147 = 5;
    else
      v1147 = 0;
    v1148 = v1147 + v1145;
    if (v879 >= 0xFFFFFFFFFFFFFFFBLL)
      v1149 = 5;
    else
      v1149 = 0;
    if (v1148 >= 0xFFFFFFFFFFFFFFFBLL)
      v1150 = 5;
    else
      v1150 = 0;
    v1151 = v1150 + v1148;
    v1152 = v1149 + v879;
    v1153 = 685440 * v1152;
    v1154 = (__PAIR128__(4, 685440) * v1152) >> 64;
    v334 = __CFADD__(v1154, v1153);
    v1155 = v1154 + v1153;
    if (v334)
      v1156 = 5;
    else
      v1156 = 0;
    v334 = __CFADD__(v1156, v1155);
    v1157 = v1156 + v1155;
    v1158 = v334;
    if (v1157 > 0xFFFFFFFFFFFFFFFALL)
      v1158 = 1;
    if (v1158)
      v1159 = 5;
    else
      v1159 = 0;
    v1160 = v1159 + v1157;
    v334 = __CFADD__(v1160, v1151);
    v1161 = v1160 + v1151;
    v1162 = v334;
    if (v1161 > 0xFFFFFFFFFFFFFFFALL)
      v1162 = 1;
    if (v1162)
      v1163 = 5;
    else
      v1163 = 0;
    v1164 = v1163 + v1161;
    if (v1138)
      v1165 = 5;
    else
      v1165 = 0;
    v1166 = v1165 + v1137;
    v1167 = v1166 + v1164;
    v1168 = __CFADD__(v1166, v1164) || v1166 + v1164 > 0xFFFFFFFFFFFFFFFALL;
    if (v882 >= 0xFFFFFFFFFFFFFFFDLL)
      v1169 = 3;
    else
      v1169 = 0;
    v1170 = v1169 + v882;
    v1171 = 635040 * v1170;
    v1172 = (__PAIR128__(2, 635040) * v1170) >> 64;
    v334 = __CFADD__(v1172, v1171);
    v1173 = v1172 + v1171;
    if (v334)
      v1174 = 3;
    else
      v1174 = 0;
    v1175 = v1174 + v1173;
    v1176 = __CFADD__(v1174, v1173) || (unint64_t)(v1174 + v1173) > 0xFFFFFFFFFFFFFFFCLL;
    if (v412 >= 0xFFFFFFFFFFFFFFFDLL)
      v1177 = 3;
    else
      v1177 = 0;
    v1178 = v1177 + v412;
    v1179 = 776160 * v1178;
    v1180 = (__PAIR128__(2, 776160) * v1178) >> 64;
    v334 = __CFADD__(v1180, v1179);
    v1181 = v1180 + v1179;
    if (v334)
      v1182 = 3;
    else
      v1182 = 0;
    v1183 = v1182 + v1181;
    v1184 = __CFADD__(v1182, v1181) || (unint64_t)(v1182 + v1181) > 0xFFFFFFFFFFFFFFFCLL;
    if (v880 >= 0xFFFFFFFFFFFFFFFDLL)
      v1185 = 3;
    else
      v1185 = 0;
    v1186 = v1185 + v880;
    v1187 = 1995840 * v1186;
    v1188 = (__PAIR128__(2, 1995840) * v1186) >> 64;
    v334 = __CFADD__(v1188, v1187);
    v1189 = v1188 + v1187;
    if (v334)
      v1190 = 3;
    else
      v1190 = 0;
    v1191 = (unint64_t)(v1190 + v1189) > 0xFFFFFFFFFFFFFFFCLL;
    v334 = __CFADD__(v1190, v1189);
    v1192 = v1190 + v1189;
    if (v334 || v1191)
      v1194 = 3;
    else
      v1194 = 0;
    v1195 = v1194 + v1192;
    if (v879 >= 0xFFFFFFFFFFFFFFFDLL)
      v1196 = 3;
    else
      v1196 = 0;
    v1197 = v1196 + v879;
    v1198 = 931392 * v1197;
    v1199 = (__PAIR128__(2, 931392) * v1197) >> 64;
    if (v1195 >= 0xFFFFFFFFFFFFFFFDLL)
      v1200 = 3;
    else
      v1200 = 0;
    v334 = __CFADD__(v1199, v1198);
    v1201 = v1199 + v1198;
    if (v334)
      v1202 = 3;
    else
      v1202 = 0;
    v334 = __CFADD__(v1202, v1201);
    v1203 = v1202 + v1201;
    v1204 = v1200 + v1195;
    v1205 = v334;
    if (v1203 > 0xFFFFFFFFFFFFFFFCLL)
      v1205 = 1;
    if (v1205)
      v1206 = 3;
    else
      v1206 = 0;
    v1207 = v1206 + v1203;
    v1208 = v1207 + v1204;
    v1209 = __CFADD__(v1207, v1204) || v1207 + v1204 > 0xFFFFFFFFFFFFFFFCLL;
    if (v882 == -1)
      v1210 = 0;
    else
      v1210 = v882;
    v1211 = 856064 * v1210;
    v1212 = (v1210 * (unsigned __int128)0xD1000uLL) >> 64;
    LODWORD(v1213) = __CFADD__(__CFADD__(v1212, v1211), v1212 + v1211);
    if (__CFADD__(v1212, v1211) + v1212 + v1211 == -1)
      v1213 = 1;
    else
      v1213 = v1213;
    v1214 = v1212 + v1211 + __CFADD__(v1212, v1211) + v1213;
    if (v286 == -1)
      v1215 = 0;
    else
      v1215 = v286;
    v1216 = 894976 * v1215;
    v1217 = (v1215 * (unsigned __int128)0xDA800uLL) >> 64;
    LODWORD(v1218) = __CFADD__(__CFADD__(v1217, v1216), v1217 + v1216);
    if (__CFADD__(v1217, v1216) + v1217 + v1216 == -1)
      v1218 = 1;
    else
      v1218 = v1218;
    v1219 = v1217 + v1216 + __CFADD__(v1217, v1216) + v1218;
    if (v412 == -1)
      v1220 = 0;
    else
      v1220 = v412;
    v1221 = 1036288 * v1220;
    v1222 = (v1220 * (unsigned __int128)0xFD000uLL) >> 64;
    v1223 = __CFADD__(__CFADD__(v1222, v1221), v1222 + v1221);
    v1224 = __CFADD__(v1222, v1221) + v1222 + v1221 == -1 || v1223;
    v1225 = v1222 + v1221 + __CFADD__(v1222, v1221) + v1224;
    if (v879 == -1)
      v1226 = 0;
    else
      v1226 = v879;
    v1227 = 1230592 * v1226;
    v1228 = (v1226 * (unsigned __int128)0x12C700uLL) >> 64;
    v1229 = __CFADD__(__CFADD__(v1228, v1227), v1228 + v1227);
    v1230 = __CFADD__(v1228, v1227) + v1228 + v1227 == -1 || v1229;
    v1231 = v1228 + v1227 + __CFADD__(v1228, v1227) + v1230;
    if (v880 == -1)
      v1232 = 0;
    else
      v1232 = v880;
    v1233 = 2461184 * v1232;
    v1234 = (v1232 * (unsigned __int128)0x258E00uLL) >> 64;
    v1235 = __CFADD__(__CFADD__(v1234, v1233), v1234 + v1233);
    v1236 = __CFADD__(v1234, v1233) + v1234 + v1233 == -1 || v1235;
    v1237 = v1234 + v1233 + __CFADD__(v1234, v1233) + v1236;
    if (v1237 == -1)
      v1237 = 0;
    v1238 = v1231 + v1237 == -1;
    v334 = __CFADD__(v1231, v1237);
    v1239 = v1231 + v1237;
    v1240 = v334 || v1238;
    v1241 = v1240 + v1239;
    v1242 = v1225 + v1241 == -1;
    v334 = __CFADD__(v1225, v1241);
    v1243 = v1225 + v1241;
    v1244 = v334 || v1242;
    v1245 = v1244 + v1243;
    v334 = __CFADD__(v1219, v1245);
    v1246 = v1219 + v1245;
    LODWORD(v1247) = v334;
    if (v1246 == -1)
      v1247 = 1;
    else
      v1247 = v1247;
    v1248 = v1247 + v1246;
    LODWORD(v1247) = v1214 + v1248 == -1;
    v334 = __CFADD__(v1214, v1248);
    v1249 = v1214 + v1248;
    if (v334)
      v1247 = 1;
    else
      v1247 = v1247;
    v1250 = v1247 + v1249;
    if (v1209)
      v1251 = 3;
    else
      v1251 = 0;
    v1252 = v1251 + v1208;
    if (v1184)
      v1253 = 3;
    else
      v1253 = 0;
    v1254 = v1253 + v1183;
    if (v286 >= 0xFFFFFFFFFFFFFFFDLL)
      v1255 = 3;
    else
      v1255 = 0;
    v334 = __CFADD__(v1254, v1252);
    v1256 = v1254 + v1252;
    v1257 = v1255 + v286;
    v1258 = v334;
    if (v1256 > 0xFFFFFFFFFFFFFFFCLL)
      v1258 = 1;
    v2767 = v1258 == 0;
    v1259 = 665280 * v1257;
    v1260 = (__PAIR128__(2, 665280) * v1257) >> 64;
    if (v2767)
      v1261 = 0;
    else
      v1261 = 3;
    v334 = __CFADD__(v1260, v1259);
    v1262 = v1260 + v1259;
    if (v334)
      v1263 = 3;
    else
      v1263 = 0;
    v334 = __CFADD__(v1263, v1262);
    v1264 = v1263 + v1262;
    v1265 = v334;
    if (v1264 > 0xFFFFFFFFFFFFFFFCLL)
      v1265 = 1;
    v1266 = v1261 + v1256;
    if (v1265)
      v1267 = 3;
    else
      v1267 = 0;
    v1268 = v1267 + v1264;
    v334 = __CFADD__(v1268, v1266);
    v1269 = v1268 + v1266;
    v1270 = v334;
    if (v1269 > 0xFFFFFFFFFFFFFFFCLL)
      v1270 = 1;
    if (v1270)
      v1271 = 3;
    else
      v1271 = 0;
    v1272 = v1271 + v1269;
    if (v1176)
      v1273 = 3;
    else
      v1273 = 0;
    v1274 = v1273 + v1175;
    v334 = __CFADD__(v1274, v1272);
    v1275 = v1274 + v1272;
    v1276 = v334;
    if (v1275 > 0xFFFFFFFFFFFFFFFCLL)
      v1276 = 1;
    if (v1276)
      v1277 = 3;
    else
      v1277 = 0;
    v1278 = v1277 + v1275;
    if (v1168)
      v1279 = 5;
    else
      v1279 = 0;
    if (v1129)
      v1280 = 5;
    else
      v1280 = 0;
    v1281 = v1280 + v1128;
    v1282 = v1279 + v1167;
    v334 = __CFADD__(v1281, v1282);
    v1283 = v1281 + v1282;
    v1284 = v334;
    if (v1283 > 0xFFFFFFFFFFFFFFFALL)
      v1284 = 1;
    if (v1284)
      v1285 = 5;
    else
      v1285 = 0;
    v1286 = v1285 + v1283;
    if (v1121)
      v1287 = 5;
    else
      v1287 = 0;
    v1288 = v1287 + v1120;
    v334 = __CFADD__(v1288, v1286);
    v1289 = v1288 + v1286;
    v1290 = v334;
    if (v1289 > 0xFFFFFFFFFFFFFFFALL)
      v1290 = 1;
    if (v1290)
      v1291 = 5;
    else
      v1291 = 0;
    v1292 = v1291 + v1289;
    if (v1113)
      v1293 = 9;
    else
      v1293 = 0;
    v1294 = v1293 + v1112;
    if (v1043)
      v1295 = 15;
    else
      v1295 = 0;
    v1296 = v1295 + v1042;
    v15 = 15;
    if (LODWORD(STACK[0x3B78]))
      v1297 = 15;
    else
      v1297 = 0;
    v1298 = v1297 + STACK[0x3BA0];
    v334 = __CFADD__(v1298, v1296);
    v1299 = v1298 + v1296;
    v1300 = v334;
    if (v1299 > 0xFFFFFFFFFFFFFFF0)
      v1300 = 1;
    if (v1300)
      v1301 = 15;
    else
      v1301 = 0;
    v1302 = v1301 + v1299;
    if (LODWORD(STACK[0x3BB0]))
      v1303 = 15;
    else
      v1303 = 0;
    v1304 = v1303 + STACK[0x3BB8];
    v334 = __CFADD__(v1304, v1302);
    v1305 = v1304 + v1302;
    v1306 = v334;
    if (v1305 > 0xFFFFFFFFFFFFFFF0)
      v1306 = 1;
    if (v1306)
      v1307 = 15;
    else
      v1307 = 0;
    v1308 = v1307 + v1305;
    v1309 = v1250 - STACK[0x3BC0];
    v1310 = v1250 < STACK[0x3BC0];
    if (LODWORD(STACK[0x3BC8]))
      v1311 = 3;
    else
      v1311 = 0;
    v1312 = v1311 + STACK[0x3BD0];
    v1313 = v1309 - v1310;
    v334 = v1278 >= v1312;
    v1314 = v1278 - v1312;
    v1315 = -3;
    if (v334)
      v1315 = 0;
    v1316 = v1315 + v1314;
    if (LODWORD(STACK[0x3BE0]))
      v1317 = 5;
    else
      v1317 = 0;
    v1318 = v1317 + STACK[0x3BE8];
    v334 = v1292 >= v1318;
    v1319 = v1292 - v1318;
    v1320 = -5;
    if (v334)
      v1320 = 0;
    v1321 = v1320 + v1319;
    if (LODWORD(STACK[0x3BF0]))
      v1322 = 9;
    else
      v1322 = 0;
    v1323 = v1322 + STACK[0x3BF8];
    v334 = v1294 >= v1323;
    v1324 = v1294 - v1323;
    if (v334)
      v1325 = 0;
    else
      v1325 = -9;
    v1326 = v1325 + v1324;
    if (LODWORD(STACK[0x3C30]))
      v1327 = 15;
    else
      v1327 = 0;
    v1328 = v1327 + STACK[0x3C38];
    v334 = v1308 >= v1328;
    v1329 = v1308 - v1328;
    if (v334)
      v1330 = 0;
    else
      v1330 = -15;
    v1331 = v1330 + v1329;
    switch(STACK[0x3C00])
    {
      case 2u:
        STACK[0x15D8] = STACK[0x3B58];
        STACK[0x36C8] = STACK[0x28D8];
        STACK[0x3810] = STACK[0x28E0];
        STACK[0x3688] = STACK[0x39E0];
        STACK[0x2FE8] = STACK[0x2800];
        STACK[0x2FE0] = STACK[0x2808];
        STACK[0x37F8] = STACK[0x28E8];
        STACK[0x2FC8] = STACK[0x2810];
        STACK[0x2FD8] = STACK[0x28B0];
        STACK[0x2FF0] = STACK[0x2AE0];
        STACK[0x2FC0] = STACK[0x2AA8];
        STACK[0x2FB0] = STACK[0x28F0];
        STACK[0x3808] = STACK[0x2A10];
        STACK[0x2FA8] = STACK[0x28B8];
        STACK[0x2FA0] = STACK[0x2910];
        STACK[0x2FB8] = STACK[0x2AE8];
        STACK[0x2FD0] = STACK[0x28F8];
        STACK[0x3680] = STACK[0x39E8];
        STACK[0x2F90] = STACK[0x2918];
        STACK[0x3668] = STACK[0x39D8];
        STACK[0x15D0] = v1331;
        STACK[0x37F0] = STACK[0x2AF0];
        STACK[0x2F88] = STACK[0x2818];
        STACK[0x3678] = STACK[0x39F8];
        STACK[0x3670] = STACK[0x3860];
        STACK[0x2F78] = STACK[0x2820];
        STACK[0x2F98] = STACK[0x2A18];
        STACK[0x2F80] = STACK[0x2920];
        STACK[0x15C8] = v1313;
        STACK[0x3660] = STACK[0x3838];
        STACK[0x2F70] = STACK[0x2828];
        STACK[0x2F68] = STACK[0x2900];
        STACK[0x30E0] = STACK[0x2A20];
        STACK[0x3658] = STACK[0x39D0];
        STACK[0x3650] = STACK[0x3840];
        STACK[0x2F50] = STACK[0x2928];
        STACK[0x15C0] = v1326;
        STACK[0x15B8] = v1316;
        STACK[0x2F48] = STACK[0x2930];
        STACK[0x2F40] = STACK[0x28C0];
        STACK[0x15B0] = STACK[0x3C08];
        STACK[0x15A8] = STACK[0x3C20];
        STACK[0x15A0] = STACK[0x3B60];
        STACK[0x2F38] = STACK[0x2830];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x3640] = STACK[0x39C8];
        STACK[0x3648] = STACK[0x3BA8];
        STACK[0x3638] = STACK[0x3848];
        STACK[0x3630] = STACK[0x3A00];
        STACK[0x2F58] = STACK[0x2A28];
        STACK[0x3628] = STACK[0x3A10];
        STACK[0x3618] = STACK[0x3868];
        STACK[0x3610] = STACK[0x39F0];
        STACK[0x3620] = STACK[0x3850];
        STACK[0x2F30] = STACK[0x2AB0];
        STACK[0x3608] = STACK[0x3858];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x3600] = STACK[0x3870];
        STACK[0x2F28] = STACK[0x2838];
        STACK[0x35F8] = STACK[0x3A08];
        STACK[0x2F20] = STACK[0x2840];
        STACK[0x3C60] = STACK[0x2938];
        STACK[0x37E8] = STACK[0x2AF8];
        STACK[0x30D0] = STACK[0x2A30];
        STACK[0x2F10] = STACK[0x2AB8];
        STACK[0x2F08] = STACK[0x2848];
        STACK[0x2F18] = STACK[0x2850];
        STACK[0x1598] = STACK[0x3C28];
        STACK[0x1590] = v1321;
        STACK[0x35F0] = STACK[0x3AD0];
        STACK[0x2F00] = STACK[0x2AC0];
        STACK[0x2EF8] = STACK[0x2858];
        STACK[0x1588] = STACK[0x3C78];
        STACK[0x35E8] = STACK[0x3AD8];
        STACK[0x35E0] = STACK[0x3AE0];
        STACK[0x35D8] = STACK[0x3AE8];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x2EE8] = STACK[0x2860];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x2EF0] = STACK[0x2868];
        STACK[0x2ED8] = STACK[0x2940];
        STACK[0x2EE0] = STACK[0x2AC8];
        STACK[0x35D0] = STACK[0x3AF0];
        STACK[0x2ED0] = STACK[0x2A38];
        STACK[0x2EC0] = STACK[0x2870];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x2EB8] = STACK[0x2878];
        STACK[0x2EC8] = STACK[0x2908];
        STACK[0x2EB0] = STACK[0x28C8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x2EA8] = STACK[0x2948];
        STACK[0x2EA0] = STACK[0x2880];
        STACK[0x2E98] = STACK[0x2B00];
        STACK[0x35C8] = STACK[0x3AF8];
        STACK[0x35C0] = STACK[0x3B08];
        STACK[0x35B8] = STACK[0x3B00];
        STACK[0x30E8] = STACK[0x2B08];
        STACK[0x35B0] = STACK[0x3B10];
        STACK[0x35A8] = STACK[0x3B18];
        LODWORD(STACK[0x2F64]) = STACK[0x27FC];
        STACK[0x2E90] = STACK[0x28D0];
        STACK[0x35A0] = STACK[0x3B20];
        STACK[0x30D8] = STACK[0x2A40];
        STACK[0x2E88] = STACK[0x2AD0];
        STACK[0x2E78] = STACK[0x2888];
        STACK[0x3C68] = STACK[0x2950];
        STACK[0x3598] = STACK[0x3B30];
        STACK[0x2E70] = STACK[0x2890];
        STACK[0x2E68] = STACK[0x2898];
        STACK[0x3588] = STACK[0x3B28];
        STACK[0x3818] = STACK[0x2A48];
        STACK[0x2E60] = STACK[0x2AD8];
        STACK[0x2E58] = STACK[0x28A0];
        STACK[0x2E80] = STACK[0x2B10];
        STACK[0x2E50] = STACK[0x2958];
        STACK[0x3580] = STACK[0x3B38];
        STACK[0x2E48] = STACK[0x28A8];
        LODWORD(STACK[0x3C08]) = 3;
        LODWORD(STACK[0x3590]) = STACK[0x3710];
        STACK[0x3B58] = 0xCB0E70092261963DLL;
        STACK[0x18D0] = 0xCB0E70092261963DLL;
        v1491 = STACK[0x5D0];
        STACK[0x3120] = STACK[0x5D0];
        v1492 = STACK[0x5A8];
        STACK[0x3160] = STACK[0x5A8];
        v1493 = STACK[0x538];
        STACK[0x2CF8] = STACK[0x538];
        v1494 = STACK[0x5A0];
        STACK[0x2CF0] = STACK[0x5A0];
        STACK[0x1CF8] = 1;
        v1495 = STACK[0x5B0];
        STACK[0x2CE8] = STACK[0x5B0];
        STACK[0x1CF0] = 1;
        STACK[0x1CE8] = 1;
        STACK[0x18C8] = 0xCB0E70092261963DLL;
        STACK[0x1CE0] = 1;
        STACK[0x1CD8] = 1;
        STACK[0x18C0] = 0xCB0E70092261963DLL;
        v1496 = STACK[0x5C0];
        STACK[0x3820] = STACK[0x5C0];
        STACK[0x2DE8] = STACK[0x588];
        STACK[0x1CD0] = 1;
        v1497 = STACK[0x5D8];
        STACK[0x3290] = STACK[0x5D8];
        STACK[0x1CC8] = 1;
        v1498 = STACK[0x530];
        STACK[0x2CE0] = STACK[0x530];
        STACK[0x2DE0] = STACK[0x548];
        STACK[0x2DD8] = STACK[0x590];
        STACK[0x2DD0] = STACK[0x578];
        STACK[0x3B50] = 0xCB0E70092261963DLL;
        STACK[0x3108] = 0xCB0E70092261963DLL;
        STACK[0x18B8] = 0xCB0E70092261963DLL;
        STACK[0x2DC8] = STACK[0x540];
        STACK[0x18B0] = 0xCB0E70092261963DLL;
        STACK[0x2D28] = v1496;
        STACK[0x1CC0] = 1;
        STACK[0x2CD8] = v1491;
        STACK[0x3178] = 0xCB0E70092261963DLL;
        STACK[0x31A8] = v1498;
        STACK[0x2DC0] = STACK[0x568];
        STACK[0x2CD0] = v1497;
        STACK[0x30F8] = 0xCB0E70092261963DLL;
        v1499 = STACK[0x5B8];
        STACK[0x2CC8] = STACK[0x5B8];
        STACK[0x18A8] = 0xCB0E70092261963DLL;
        STACK[0x3100] = 0xCB0E70092261963DLL;
        STACK[0x3118] = 0xCB0E70092261963DLL;
        STACK[0x18A0] = 0xCB0E70092261963DLL;
        v1500 = STACK[0x598];
        STACK[0x3C20] = STACK[0x598];
        STACK[0x3168] = v1493;
        STACK[0x2CB8] = v1492;
        STACK[0x1898] = 0xCB0E70092261963DLL;
        STACK[0x1890] = 0xCB0E70092261963DLL;
        STACK[0x3C28] = v1495;
        STACK[0x1888] = 0xCB0E70092261963DLL;
        v1501 = STACK[0x5C8];
        STACK[0x2CB0] = STACK[0x5C8];
        STACK[0x2DA8] = STACK[0x580];
        STACK[0x1CB0] = 1;
        STACK[0x1CA8] = 1;
        STACK[0x3B48] = 0xCB0E70092261963DLL;
        STACK[0x2DA0] = STACK[0x558];
        STACK[0x2D98] = STACK[0x550];
        STACK[0x3B60] = v1494;
        STACK[0x30F0] = 0xCB0E70092261963DLL;
        STACK[0x3B40] = 0xCB0E70092261963DLL;
        STACK[0x1880] = 0xCB0E70092261963DLL;
        STACK[0x3110] = 0xCB0E70092261963DLL;
        STACK[0x3800] = v1501;
        STACK[0x3158] = v1499;
        STACK[0x2DB8] = STACK[0x570];
        STACK[0x2DB0] = STACK[0x560];
        STACK[0x1CB8] = 1;
        STACK[0x2CC0] = v1500;
        return sub_10069FFC8();
      case 8u:
        v2804 = STACK[0x28A0];
        v2805 = STACK[0x2AC0];
        v2806 = STACK[0x28A0] + STACK[0x2AC0] > 0xFFFFFFFFFFFFFFF6;
        STACK[0x3C30] = STACK[0x28A0] + STACK[0x2AC0];
        v2807 = __CFADD__(v2804, v2805) || v2806;
        LODWORD(STACK[0x3BE8]) = v2807;
        v2808 = STACK[0x2AD8];
        v2809 = STACK[0x2828];
        v2810 = STACK[0x2AD8] + STACK[0x2828] > 0xFFFFFFFFFFFFFFEELL;
        STACK[0x3BF8] = STACK[0x2AD8] + STACK[0x2828];
        v2811 = __CFADD__(v2808, v2809) || v2810;
        LODWORD(STACK[0x3BE0]) = v2811;
        v2812 = STACK[0x28A8] + STACK[0x2948];
        v2813 = __CFADD__(STACK[0x28A8], STACK[0x2948]) || STACK[0x28A8] + STACK[0x2948] > 0xFFFFFFFFFFFFFFFALL;
        v2814 = STACK[0x2830] + STACK[0x2928];
        v2815 = __CFADD__(STACK[0x2830], STACK[0x2928]) || STACK[0x2830] + STACK[0x2928] > 0xFFFFFFFFFFFFFFFCLL;
        STACK[0x3BF0] = v1331;
        v2816 = STACK[0x2880] + STACK[0x2920];
        v2817 = __CFADD__(STACK[0x2880], STACK[0x2920]) || STACK[0x2880] + STACK[0x2920] > 0xFFFFFFFFFFFFFFDELL;
        v2818 = STACK[0x2940];
        v2819 = STACK[0x2868];
        v2820 = STACK[0x2940] + STACK[0x2868] > 0xFFFFFFFFFFFFFFEELL;
        v2821 = STACK[0x2940] + STACK[0x2868];
        STACK[0x3C00] = v1326;
        v2822 = __CFADD__(v2818, v2819) || v2820;
        v2823 = STACK[0x2890];
        v2824 = STACK[0x2918];
        v2825 = STACK[0x2890] + STACK[0x2918] > 0xFFFFFFFFFFFFFFF0;
        STACK[0x3C38] = v1321;
        STACK[0x3BC8] = v1313;
        v2826 = __CFADD__(v2823, v2824) || v2825;
        v2827 = STACK[0x2958] + STACK[0x2898];
        v2828 = __CFADD__(STACK[0x2958], STACK[0x2898]);
        v2829 = STACK[0x2950] + STACK[0x2820];
        LODWORD(v2830) = __CFADD__(STACK[0x2950], STACK[0x2820]);
        v2831 = STACK[0x2818] + STACK[0x2910];
        v2832 = __CFADD__(STACK[0x2818], STACK[0x2910]);
        if (v2829 == -1)
          v2830 = 1;
        else
          v2830 = v2830;
        STACK[0x32E8] = v2830 + v2829;
        v2833 = STACK[0x2938] + STACK[0x2810];
        v2834 = __CFADD__(STACK[0x2938], STACK[0x2810]);
        v2835 = STACK[0x2AA8] + STACK[0x2800];
        v2836 = __CFADD__(STACK[0x2AA8], STACK[0x2800]);
        if (v2827 > 0xFFFFFFFFFFFFFFFCLL)
          v2828 = 1;
        STACK[0x3BD0] = v1316;
        if (v2828)
          v2837 = 3;
        else
          v2837 = 0;
        STACK[0x3330] = v2837 + v2827;
        if (v2835 > 0xFFFFFFFFFFFFFFFALL)
          v2836 = 1;
        if (v2833 > 0xFFFFFFFFFFFFFFF6 || v2834)
          v2839 = 9;
        else
          v2839 = 0;
        STACK[0x3310] = v2839 + v2833;
        v2840 = STACK[0x2AC8] + STACK[0x2860];
        v2841 = __CFADD__(STACK[0x2AC8], STACK[0x2860]);
        if (v2836)
          v2842 = 5;
        else
          v2842 = 0;
        v2843 = STACK[0x2AD0] + STACK[0x2808];
        v2844 = __CFADD__(STACK[0x2AD0], STACK[0x2808]);
        if (v2831 > 0xFFFFFFFFFFFFFFD2)
          v2832 = 1;
        v2845 = 17;
        if (v2822)
          v2846 = 17;
        else
          v2846 = 0;
        if (v2826)
          v2847 = 15;
        else
          v2847 = 0;
        v2848 = STACK[0x2848] + STACK[0x2AB8];
        v2849 = __CFADD__(STACK[0x2848], STACK[0x2AB8]);
        STACK[0x3268] = v2842 + v2835;
        STACK[0x3278] = v2846 + v2821;
        if (v2832)
          v2850 = 45;
        else
          v2850 = 0;
        STACK[0x3320] = v2850 + v2831;
        STACK[0x3260] = v2847 + v2823 + v2824;
        v2851 = v2843 > 0xFFFFFFFFFFFFFFD8 || v2844;
        v2852 = v2840 > 0xFFFFFFFFFFFFFFD0 || v2841;
        v2853 = STACK[0x2870] + STACK[0x28B8];
        v2854 = __CFADD__(STACK[0x2870], STACK[0x28B8]);
        v2855 = v2848 == -1 || v2849;
        if (v2851)
          v2856 = 39;
        else
          v2856 = 0;
        if (v2815)
          v2857 = 3;
        else
          v2857 = 0;
        if (v2817)
          v2858 = 33;
        else
          v2858 = 0;
        if (v2813)
          v2859 = 5;
        else
          v2859 = 0;
        if (v2852)
          v2860 = 47;
        else
          v2860 = 0;
        v2861 = STACK[0x2838] + STACK[0x2AB0];
        v2862 = __CFADD__(STACK[0x2838], STACK[0x2AB0]);
        v2863 = STACK[0x2888] + STACK[0x28C8];
        v2864 = __CFADD__(STACK[0x2888], STACK[0x28C8]);
        STACK[0x3258] = v2856 + v2843;
        STACK[0x3128] = v2859 + v2812;
        STACK[0x3328] = v2860 + v2840;
        STACK[0x32F0] = v2857 + v2814;
        STACK[0x3288] = v2858 + v2816;
        STACK[0x32F8] = v2855 + v2848;
        v2865 = v2853 > 0xFFFFFFFFFFFFFFF0 || v2854;
        if (!LODWORD(STACK[0x3BE0]))
          v2845 = 0;
        v2866 = STACK[0x2840] + STACK[0x28C0];
        v2867 = __CFADD__(STACK[0x2840], STACK[0x28C0]);
        if (v2863 > 0xFFFFFFFFFFFFFFD2 || v2864)
          v2869 = 45;
        else
          v2869 = 0;
        v2767 = LODWORD(STACK[0x3BE8]) == 0;
        STACK[0x32E0] = v2845 + STACK[0x3BF8];
        if (v2767)
          v2870 = 0;
        else
          v2870 = 9;
        STACK[0x3280] = v2870 + STACK[0x3C30];
        STACK[0x3348] = v2869 + v2863;
        v2871 = v2861 > 0xFFFFFFFFFFFFFFD0 || v2862;
        v2872 = v2866 > 0xFFFFFFFFFFFFFFCALL || v2867;
        if (v2865)
          v2873 = 15;
        else
          v2873 = 0;
        STACK[0x3318] = v2873 + v2853;
        if (v2871)
          v2874 = 47;
        else
          v2874 = 0;
        STACK[0x3338] = v2874 + v2861;
        v2875 = 53;
        if (!v2872)
          v2875 = 0;
        STACK[0x3340] = v2875 + v2866;
        v2876 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * SLODWORD(STACK[0x520])) - 8);
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x2E40] = STACK[0x3C20];
        STACK[0x2E38] = STACK[0x3BD0];
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        STACK[0x2E30] = STACK[0x3B58];
        STACK[0x3270] = 9;
        STACK[0x2E28] = STACK[0x3BC8];
        STACK[0x33C0] = STACK[0x3C50];
        v2877 = STACK[0x27F0];
        STACK[0x36C0] = STACK[0x3A70];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x2E20] = STACK[0x3C38];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0x36B8] = STACK[0x3A78];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x2E18] = STACK[0x3C08];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x2E10] = STACK[0x3C28];
        STACK[0x33B8] = STACK[0x3C48];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x36B0] = STACK[0x3A80];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x2E08] = STACK[0x3C00];
        STACK[0x2E00] = STACK[0x3B60];
        STACK[0x2DF8] = STACK[0x3C78];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0x36A8] = STACK[0x3A88];
        STACK[0x36A0] = STACK[0x39C0];
        STACK[0x2DF0] = STACK[0x3BF0];
        STACK[0x3698] = STACK[0x3A90];
        STACK[0x3690] = STACK[0x3A98];
        return v2876(v2877);
      case 0xAu:
        v2878 = STACK[0x2AB0];
        v2879 = STACK[0x2AE0];
        v2880 = STACK[0x2AB0] + STACK[0x2AE0] > 0xFFFFFFFFFFFFFFD0;
        STACK[0x3C38] = STACK[0x2AB0] + STACK[0x2AE0];
        v2881 = __CFADD__(v2878, v2879) || v2880;
        LODWORD(STACK[0x3C30]) = v2881;
        v2882 = STACK[0x2B10];
        v2883 = STACK[0x2AD8];
        v2884 = STACK[0x2B10] + STACK[0x2AD8] > 0xFFFFFFFFFFFFFFEELL;
        STACK[0x3C00] = STACK[0x2B10] + STACK[0x2AD8];
        v2885 = __CFADD__(v2882, v2883) || v2884;
        LODWORD(STACK[0x3BE8]) = v2885;
        v2886 = STACK[0x2B00];
        v2887 = STACK[0x2AC0];
        v2888 = STACK[0x2B00] + STACK[0x2AC0] > 0xFFFFFFFFFFFFFFF6;
        STACK[0x3BF8] = STACK[0x2B00] + STACK[0x2AC0];
        v2889 = __CFADD__(v2886, v2887) || v2888;
        LODWORD(STACK[0x3BF0]) = v2889;
        v2890 = __CFADD__(STACK[0x2AB8], STACK[0x2AE8]) || STACK[0x2AB8] + STACK[0x2AE8] == -1;
        STACK[0x3178] = v2890 + STACK[0x2AB8] + STACK[0x2AE8];
        v2891 = STACK[0x2AC8];
        v2892 = STACK[0x2AF8];
        v2893 = STACK[0x2AC8] + STACK[0x2AF8] > 0xFFFFFFFFFFFFFFD0;
        STACK[0x3BE0] = STACK[0x2AC8] + STACK[0x2AF8];
        v2894 = __CFADD__(v2891, v2892) || v2893;
        LODWORD(STACK[0x3BD0]) = v2894;
        v2895 = STACK[0x2AD0];
        v2896 = STACK[0x2AF0];
        v2897 = STACK[0x2AD0] + STACK[0x2AF0] > 0xFFFFFFFFFFFFFFD8;
        STACK[0x3BC8] = STACK[0x2AD0] + STACK[0x2AF0];
        v2898 = __CFADD__(v2895, v2896) || v2897;
        LODWORD(STACK[0x3BC0]) = v2898;
        v2899 = v1331;
        v2900 = STACK[0x2B08] + STACK[0x2AA8] > 0xFFFFFFFFFFFFFFFALL;
        v2901 = STACK[0x2B08] + STACK[0x2AA8];
        if (__CFADD__(STACK[0x2B08], STACK[0x2AA8]))
          v2900 = 1;
        v2902 = STACK[0x24F0] + STACK[0x2E30] > 0xFFFFFFFFFFFFFFD0;
        v2903 = STACK[0x24F0] + STACK[0x2E30];
        if (__CFADD__(STACK[0x24F0], STACK[0x2E30]))
          v2902 = 1;
        v2904 = STACK[0x2530] + STACK[0x2E10] > 0xFFFFFFFFFFFFFFD2;
        if (__CFADD__(STACK[0x2530], STACK[0x2E10]))
          v2904 = 1;
        v2905 = v1326;
        v2906 = STACK[0x2528] + STACK[0x2DF0] > 0xFFFFFFFFFFFFFFF0;
        v2907 = v1321;
        if (__CFADD__(STACK[0x2528], STACK[0x2DF0]))
          v2906 = 1;
        v2908 = v1313;
        v2909 = STACK[0x2510] + STACK[0x2E38] > 0xFFFFFFFFFFFFFFFCLL;
        if (__CFADD__(STACK[0x2510], STACK[0x2E38]))
          v2909 = 1;
        v2910 = STACK[0x2518] + STACK[0x2E00] > 0xFFFFFFFFFFFFFFEELL;
        if (__CFADD__(STACK[0x2518], STACK[0x2E00]))
          v2910 = 1;
        v2911 = STACK[0x2520] + STACK[0x2E20];
        v2912 = __CFADD__(STACK[0x2520], STACK[0x2E20]);
        v2913 = STACK[0x2508] + STACK[0x2E28];
        LODWORD(v2914) = __CFADD__(STACK[0x2508], STACK[0x2E28]);
        if (v2913 == -1)
          v2914 = 1;
        else
          v2914 = v2914;
        v2915 = v2914 + v2913;
        if (v2911 > 0xFFFFFFFFFFFFFFFALL)
          v2912 = 1;
        v2916 = STACK[0x2538] + STACK[0x2E18];
        v2917 = __CFADD__(STACK[0x2538], STACK[0x2E18]);
        v2918 = STACK[0x24F8] + STACK[0x2E40];
        v2919 = __CFADD__(STACK[0x24F8], STACK[0x2E40]);
        v2920 = STACK[0x2500] + STACK[0x2E08];
        v2921 = __CFADD__(STACK[0x2500], STACK[0x2E08]);
        if (v2920 > 0xFFFFFFFFFFFFFFF6)
          v2921 = 1;
        v2767 = !v2912;
        v2922 = 5;
        if (v2767)
          v2922 = 0;
        v2767 = !v2909;
        v2923 = v2922 + v2911;
        v2924 = 3;
        if (v2767)
          v2924 = 0;
        v2925 = v2924 + STACK[0x2510] + STACK[0x2E38];
        v2926 = v2916 > 0xFFFFFFFFFFFFFFDELL || v2917;
        v2767 = !v2921;
        v2927 = 9;
        if (v2767)
          v2927 = 0;
        v2928 = v2927 + v2920;
        v2929 = STACK[0x2540] + STACK[0x2DF8];
        v2930 = __CFADD__(STACK[0x2540], STACK[0x2DF8]);
        v2767 = v2926 == 0;
        v2931 = 33;
        if (v2767)
          v2931 = 0;
        v2932 = v2931 + v2916;
        v2933 = v2918 > 0xFFFFFFFFFFFFFFD8 || v2919;
        v2767 = !v2910;
        v2934 = 17;
        if (v2767)
          v2934 = 0;
        v2767 = !v2906;
        v2935 = v2934 + STACK[0x2518] + STACK[0x2E00];
        if (v2767)
          v2936 = 0;
        else
          v2936 = 15;
        v2937 = v2936 + STACK[0x2528] + STACK[0x2DF0];
        if (v2904)
          v2938 = 45;
        else
          v2938 = 0;
        v2939 = v2938 + STACK[0x2530] + STACK[0x2E10];
        STACK[0x26B8] = v2908 - v2915 - (v2908 < v2915);
        v2940 = v2929 > 0xFFFFFFFFFFFFFFCALL || v2930;
        v2941 = -3;
        if (v1316 >= v2925)
          v2941 = 0;
        STACK[0x26C8] = v1316 - v2925 + v2941;
        if (v2940)
          v2942 = 53;
        else
          v2942 = 0;
        v2943 = v2942 + v2929;
        v2944 = STACK[0x2950] + STACK[0x2A40];
        v2945 = __CFADD__(STACK[0x2950], STACK[0x2A40]);
        if (v2933)
          v2946 = 39;
        else
          v2946 = 0;
        v334 = v2907 >= v2923;
        v2947 = v2907 - v2923;
        v2948 = v2946 + v2918;
        v2949 = -5;
        if (v334)
          v2949 = 0;
        STACK[0x26D8] = v2947 + v2949;
        if (v2902)
          v2950 = 47;
        else
          v2950 = 0;
        v2951 = v2950 + v2903;
        v2952 = -17;
        if (STACK[0x3B60] >= v2935)
          v2952 = 0;
        STACK[0x26C0] = STACK[0x3B60] - v2935 + v2952;
        v2953 = STACK[0x2958] + STACK[0x2A48];
        v2954 = __CFADD__(STACK[0x2958], STACK[0x2A48]);
        v2955 = STACK[0x2938] + STACK[0x2A10];
        v2956 = __CFADD__(STACK[0x2938], STACK[0x2A10]);
        v334 = v2905 >= v2928;
        v2957 = v2905 - v2928;
        if (v334)
          v2958 = 0;
        else
          v2958 = -9;
        v334 = v2899 >= v2937;
        v2959 = v2899 - v2937;
        STACK[0x2690] = v2957 + v2958;
        if (v334)
          v2960 = 0;
        else
          v2960 = -15;
        STACK[0x2698] = v2959 + v2960;
        v2961 = STACK[0x28E0];
        v2962 = STACK[0x2918] + STACK[0x28E0];
        v2963 = __CFADD__(STACK[0x2918], STACK[0x28E0]);
        v334 = STACK[0x3C78] >= v2943;
        v2964 = STACK[0x3C78] - v2943;
        v2965 = -53;
        if (v334)
          v2965 = 0;
        v334 = STACK[0x3C08] >= v2932;
        v2966 = STACK[0x3C08] - v2932;
        STACK[0x26B0] = v2964 + v2965;
        v2967 = -33;
        if (v334)
          v2967 = 0;
        STACK[0x26A0] = v2966 + v2967;
        v2968 = STACK[0x2A20] + STACK[0x2910];
        v2969 = __CFADD__(STACK[0x2A20], STACK[0x2910]);
        v334 = STACK[0x3B58] >= v2951;
        v2970 = STACK[0x3B58] - v2951;
        if (v334)
          v2971 = 0;
        else
          v2971 = -47;
        STACK[0x2688] = v2970 + v2971;
        v2972 = v2944 == -1 || v2945;
        v334 = STACK[0x3C28] >= v2939;
        v2973 = STACK[0x3C28] - v2939;
        STACK[0x3168] = v2972 + v2944;
        if (v334)
          v2974 = 0;
        else
          v2974 = -45;
        STACK[0x26D0] = v2973 + v2974;
        v2975 = STACK[0x2A30] + STACK[0x2920];
        v2976 = __CFADD__(STACK[0x2A30], STACK[0x2920]);
        v2977 = v2955 > 0xFFFFFFFFFFFFFFF6 || v2956;
        if (v2962 > 0xFFFFFFFFFFFFFFF0)
          v2963 = 1;
        v2978 = STACK[0x3C20] - v2948;
        if (STACK[0x3C20] >= v2948)
          v2979 = 0;
        else
          v2979 = -39;
        STACK[0x26A8] = v2978 + v2979;
        v2980 = STACK[0x28D8];
        v2981 = STACK[0x2930] + STACK[0x28D8];
        v2982 = __CFADD__(STACK[0x2930], STACK[0x28D8]);
        v2983 = STACK[0x28E8];
        v2984 = STACK[0x2940] + STACK[0x28E8];
        v2985 = __CFADD__(STACK[0x2940], STACK[0x28E8]);
        if (v2953 > 0xFFFFFFFFFFFFFFFCLL)
          v2954 = 1;
        if (v2900)
          v2986 = 5;
        else
          v2986 = 0;
        STACK[0x3290] = v2986 + v2901;
        if (v2954)
          v2987 = 3;
        else
          v2987 = 0;
        STACK[0x31A8] = v2987 + v2953;
        if (v2977)
          v2988 = 9;
        else
          v2988 = 0;
        STACK[0x3120] = v2988 + v2955;
        if (v2963)
          v2989 = 15;
        else
          v2989 = 0;
        STACK[0x3800] = v2989 + v2962;
        v2990 = v2984 > 0xFFFFFFFFFFFFFFEELL || v2985;
        v2991 = STACK[0x2A38] + STACK[0x2928];
        v2992 = __CFADD__(STACK[0x2A38], STACK[0x2928]);
        v2993 = v2975 > 0xFFFFFFFFFFFFFFDELL || v2976;
        v2994 = 17;
        if (v2990)
          v2995 = 17;
        else
          v2995 = 0;
        STACK[0x3820] = v2995 + v2984;
        v2996 = v2968 > 0xFFFFFFFFFFFFFFD2 || v2969;
        v2997 = v2981 > 0xFFFFFFFFFFFFFFCALL || v2982;
        v2998 = STACK[0x28F0];
        v2999 = STACK[0x2948] + STACK[0x28F0];
        v3000 = __CFADD__(STACK[0x2948], STACK[0x28F0]);
        if (LODWORD(STACK[0x3BC0]))
          v3001 = 39;
        else
          v3001 = 0;
        STACK[0x3C28] = v3001 + STACK[0x3BC8];
        v3002 = STACK[0x28B8];
        v3003 = STACK[0x2A18] + STACK[0x28B8];
        v3004 = __CFADD__(STACK[0x2A18], STACK[0x28B8]);
        if (LODWORD(STACK[0x3BD0]))
          v3005 = 47;
        else
          v3005 = 0;
        STACK[0x3B60] = v3005 + STACK[0x3BE0];
        if (v2996)
          v3006 = 45;
        else
          v3006 = 0;
        STACK[0x3160] = v3006 + v2968;
        if (v2997)
          v3007 = 53;
        else
          v3007 = 0;
        STACK[0x3C20] = v3007 + v2981;
        v3008 = STACK[0x28B0];
        v3009 = STACK[0x2A28] + STACK[0x28B0];
        v3010 = __CFADD__(STACK[0x2A28], STACK[0x28B0]);
        v3011 = v2991 > 0xFFFFFFFFFFFFFFFCLL || v2992;
        if (v2993)
          v3012 = 33;
        else
          v3012 = 0;
        STACK[0x3158] = v3012 + v2975;
        v3013 = v3003 > 0xFFFFFFFFFFFFFFF0 || v3004;
        v3014 = v2999 > 0xFFFFFFFFFFFFFFFALL || v3000;
        v3015 = STACK[0x2908];
        v3016 = STACK[0x28C0];
        v3017 = STACK[0x2908] + STACK[0x28C0];
        v3018 = __CFADD__(STACK[0x2908], STACK[0x28C0]);
        if (v3011)
          v3019 = 3;
        else
          v3019 = 0;
        STACK[0x3108] = v3019 + v2991;
        if (v3013)
          v3020 = 15;
        else
          v3020 = 0;
        STACK[0x3100] = v3020 + v3003;
        if (v3009 > 0xFFFFFFFFFFFFFFDELL)
          v3010 = 1;
        v3021 = STACK[0x28C8];
        v3022 = STACK[0x2900];
        v3023 = STACK[0x28C8] + STACK[0x2900];
        v3024 = __CFADD__(STACK[0x28C8], STACK[0x2900]);
        if (!LODWORD(STACK[0x3BE8]))
          v2994 = 0;
        STACK[0x3B58] = v2994 + STACK[0x3C00];
        if (v3014)
          v3025 = 5;
        else
          v3025 = 0;
        STACK[0x3110] = v3025 + v2999;
        v3026 = v3023 > 0xFFFFFFFFFFFFFFD2 || v3024;
        if (LODWORD(STACK[0x3BF0]))
          v3027 = 9;
        else
          v3027 = 0;
        STACK[0x30F8] = v3027 + STACK[0x3BF8];
        v3028 = STACK[0x28D0];
        v3029 = STACK[0x28F8];
        v3030 = STACK[0x28D0] + STACK[0x28F8];
        v3031 = __CFADD__(STACK[0x28D0], STACK[0x28F8]);
        if (v3030 > 0xFFFFFFFFFFFFFFD8)
          v3031 = 1;
        v3032 = v3017 > 0xFFFFFFFFFFFFFFCALL || v3018;
        if (v3010)
          v3033 = 33;
        else
          v3033 = 0;
        v3034 = STACK[0x3C30];
        STACK[0x30F0] = v3033 + v3009;
        if (v3034)
          v3035 = 47;
        else
          v3035 = 0;
        STACK[0x3B50] = v3035 + STACK[0x3C38];
        if (v3026)
          v3036 = 45;
        else
          v3036 = 0;
        STACK[0x3118] = v3036 + v3023;
        if (v3032)
          v3037 = 53;
        else
          v3037 = 0;
        STACK[0x3B40] = v3037 + v3017;
        if (v3031)
          v3038 = 39;
        else
          v3038 = 0;
        STACK[0x3B48] = v3038 + v3030;
        STACK[0x36C8] = v2980;
        STACK[0x3810] = v2961;
        STACK[0x3688] = STACK[0x39E0];
        STACK[0x2FE8] = STACK[0x2800];
        STACK[0x2FE0] = STACK[0x2808];
        STACK[0x37F8] = v2983;
        STACK[0x2FC8] = STACK[0x2810];
        STACK[0x2FD8] = v3008;
        STACK[0x2FF0] = STACK[0x2AE0];
        STACK[0x2FC0] = STACK[0x2AA8];
        STACK[0x2FB0] = v2998;
        STACK[0x3808] = STACK[0x2A10];
        STACK[0x2FA8] = v3002;
        STACK[0x2FA0] = STACK[0x2910];
        STACK[0x2FB8] = STACK[0x2AE8];
        STACK[0x2FD0] = v3029;
        STACK[0x3680] = STACK[0x39E8];
        STACK[0x2F90] = STACK[0x2918];
        STACK[0x3668] = STACK[0x39D8];
        STACK[0x37F0] = STACK[0x2AF0];
        STACK[0x2F88] = STACK[0x2818];
        STACK[0x3678] = STACK[0x39F8];
        STACK[0x3670] = STACK[0x3860];
        STACK[0x2F78] = STACK[0x2820];
        STACK[0x2F98] = STACK[0x2A18];
        STACK[0x2F80] = STACK[0x2920];
        STACK[0x3660] = STACK[0x3838];
        STACK[0x2F70] = STACK[0x2828];
        STACK[0x2F68] = v3022;
        STACK[0x30E0] = STACK[0x2A20];
        STACK[0x3658] = STACK[0x39D0];
        STACK[0x3650] = STACK[0x3840];
        STACK[0x2F50] = STACK[0x2928];
        STACK[0x2F48] = STACK[0x2930];
        STACK[0x2F40] = v3016;
        STACK[0x2F38] = STACK[0x2830];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x3640] = STACK[0x39C8];
        STACK[0x3648] = STACK[0x3BA8];
        STACK[0x3638] = STACK[0x3848];
        STACK[0x3630] = STACK[0x3A00];
        STACK[0x2F58] = STACK[0x2A28];
        STACK[0x3628] = STACK[0x3A10];
        STACK[0x3618] = STACK[0x3868];
        STACK[0x3610] = STACK[0x39F0];
        STACK[0x3620] = STACK[0x3850];
        STACK[0x2F30] = STACK[0x2AB0];
        STACK[0x3608] = STACK[0x3858];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x3600] = STACK[0x3870];
        STACK[0x2F28] = STACK[0x2838];
        STACK[0x35F8] = STACK[0x3A08];
        STACK[0x2F20] = STACK[0x2840];
        STACK[0x3C60] = STACK[0x2938];
        STACK[0x37E8] = STACK[0x2AF8];
        STACK[0x30D0] = STACK[0x2A30];
        STACK[0x2F10] = STACK[0x2AB8];
        STACK[0x2F08] = STACK[0x2848];
        STACK[0x2F18] = STACK[0x2850];
        STACK[0x35F0] = STACK[0x3AD0];
        STACK[0x2F00] = STACK[0x2AC0];
        STACK[0x2EF8] = STACK[0x2858];
        STACK[0x35E8] = STACK[0x3AD8];
        STACK[0x35E0] = STACK[0x3AE0];
        STACK[0x35D8] = STACK[0x3AE8];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x2EE8] = STACK[0x2860];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x2EF0] = STACK[0x2868];
        STACK[0x2ED8] = STACK[0x2940];
        STACK[0x2EE0] = STACK[0x2AC8];
        STACK[0x35D0] = STACK[0x3AF0];
        STACK[0x2ED0] = STACK[0x2A38];
        STACK[0x2EC0] = STACK[0x2870];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x2EB8] = STACK[0x2878];
        STACK[0x2EC8] = v3015;
        STACK[0x2EB0] = v3021;
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x2EA8] = STACK[0x2948];
        STACK[0x2EA0] = STACK[0x2880];
        STACK[0x2E98] = STACK[0x2B00];
        STACK[0x35C8] = STACK[0x3AF8];
        STACK[0x35C0] = STACK[0x3B08];
        STACK[0x35B8] = STACK[0x3B00];
        STACK[0x30E8] = STACK[0x2B08];
        STACK[0x35B0] = STACK[0x3B10];
        STACK[0x35A8] = STACK[0x3B18];
        LODWORD(STACK[0x2F64]) = STACK[0x27FC];
        STACK[0x2E90] = v3028;
        STACK[0x35A0] = STACK[0x3B20];
        STACK[0x30D8] = STACK[0x2A40];
        STACK[0x2E88] = STACK[0x2AD0];
        STACK[0x2E78] = STACK[0x2888];
        STACK[0x3C68] = STACK[0x2950];
        STACK[0x3598] = STACK[0x3B30];
        STACK[0x2E70] = STACK[0x2890];
        STACK[0x2E68] = STACK[0x2898];
        STACK[0x3588] = STACK[0x3B28];
        STACK[0x3818] = STACK[0x2A48];
        STACK[0x2E60] = STACK[0x2AD8];
        STACK[0x2E58] = STACK[0x28A0];
        STACK[0x2E80] = STACK[0x2B10];
        STACK[0x2E50] = STACK[0x2958];
        STACK[0x3580] = STACK[0x3B38];
        STACK[0x2E48] = STACK[0x28A8];
        v3039 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * SLODWORD(STACK[0x51C]));
        LODWORD(STACK[0x3C08]) = 11;
        LODWORD(STACK[0x3590]) = STACK[0x3710];
        return v3039();
      case 0x11u:
        v3040 = STACK[0x3C78] + STACK[0x870] > 0xFFFFFFFFFFFFFFCALL;
        if (__CFADD__(STACK[0x3C78], STACK[0x870]))
          v3040 = 1;
        v3041 = STACK[0x3C28] + STACK[0x900] > 0xFFFFFFFFFFFFFFD2;
        if (__CFADD__(STACK[0x3C28], STACK[0x900]))
          v3041 = 1;
        v3042 = STACK[0x950];
        v3043 = STACK[0x3B58];
        if (STACK[0x3B58] + STACK[0x950] >= 0xFFFFFFFFFFFFFFD1)
          v3044 = 3142028216;
        else
          v3044 = 0;
        v3045 = v3043 + v3042;
        if (__CFADD__(v3043, v3042))
          v3046 = v3044 + 1;
        else
          v3046 = v3044;
        v3047 = __CFADD__(STACK[0x3C20], STACK[0x860]) || STACK[0x3C20] + STACK[0x860] > 0xFFFFFFFFFFFFFFD8;
        v3048 = STACK[0x3C08] + STACK[0x960] > 0xFFFFFFFFFFFFFFDELL;
        if (__CFADD__(STACK[0x3C08], STACK[0x960]))
          v3048 = 1;
        v3049 = STACK[0x3B60] + STACK[0x9E0] > 0xFFFFFFFFFFFFFFEELL;
        if (__CFADD__(STACK[0x3B60], STACK[0x9E0]))
          v3049 = 1;
        v3050 = __CFADD__(v1313, STACK[0x948]) || v1313 + STACK[0x948] == -1;
        v3051 = v3050 + v1313 + STACK[0x948];
        v3052 = v1316 + STACK[0x908];
        v3053 = __CFADD__(v1316, STACK[0x908]);
        v3054 = v1326 + STACK[0x968];
        v3055 = __CFADD__(v1326, STACK[0x968]);
        v3056 = v1321 + STACK[0x938];
        v3057 = __CFADD__(v1321, STACK[0x938]);
        if (v3052 > 0xFFFFFFFFFFFFFFFCLL)
          v3053 = 1;
        v3058 = v1331 + STACK[0x918];
        v3059 = __CFADD__(v1331, STACK[0x918]);
        if (v3053)
          v3060 = 3;
        else
          v3060 = 0;
        v3061 = v3060 + v3052;
        if (v3054 > 0xFFFFFFFFFFFFFFF6 || v3055)
          v3063 = 9;
        else
          v3063 = 0;
        v3064 = v3063 + v3054;
        v3065 = v3056 > 0xFFFFFFFFFFFFFFFALL || v3057;
        v2767 = !v3049;
        v3066 = 17;
        if (v2767)
          v3066 = 0;
        v3067 = v3066 + STACK[0x3B60] + STACK[0x9E0];
        if (v3065)
          v3068 = 5;
        else
          v3068 = 0;
        v3069 = v3068 + v3056;
        v3070 = v3058 > 0xFFFFFFFFFFFFFFF0 || v3059;
        v2767 = !v3047;
        v3071 = 39;
        if (v2767)
          v3071 = 0;
        v3072 = v3071 + STACK[0x3C20] + STACK[0x860];
        if (v3070)
          v3073 = 15;
        else
          v3073 = 0;
        v3074 = v3073 + v3058;
        v2767 = v3046 == 0;
        v3075 = 47;
        if (v2767)
          v3075 = 0;
        v2767 = !v3041;
        v3076 = v3075 + v3045;
        v3077 = 45;
        if (v2767)
          v3077 = 0;
        v3078 = v3077 + STACK[0x3C28] + STACK[0x900];
        v3079 = 33;
        if (!v3048)
          v3079 = 0;
        v3080 = v3079 + STACK[0x3C08] + STACK[0x960];
        v2767 = !v3040;
        v3081 = 53;
        if (v2767)
          v3081 = 0;
        v3082 = v3081 + STACK[0x3C78] + STACK[0x870];
        v3083 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9638)) - 12);
        STACK[0x3BB8] = STACK[0x2710];
        STACK[0x3828] = STACK[0x2708];
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        STACK[0x3C58] = STACK[0x2798];
        STACK[0x3BA0] = STACK[0x26F8];
        STACK[0x33C0] = STACK[0x3C50];
        STACK[0x36C0] = STACK[0x3A70];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x36B8] = STACK[0x3A78];
        STACK[0x3C50] = STACK[0x2770];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x33B8] = STACK[0x3C48];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x36B0] = STACK[0x3A80];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x3C40] = STACK[0x2780];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x36A8] = STACK[0x3A88];
        STACK[0x36A0] = STACK[0x39C0];
        STACK[0x3698] = STACK[0x3A90];
        STACK[0x3C48] = STACK[0x2788];
        STACK[0x3690] = STACK[0x3A98];
        LODWORD(STACK[0x3BD8]) = 18;
        STACK[0x3B70] = STACK[0x1678];
        STACK[0x3B68] = STACK[0x1688];
        STACK[0x3B78] = STACK[0x16A8];
        STACK[0x3210] = STACK[0x16C0];
        STACK[0x3350] = STACK[0x16B0];
        STACK[0x9E8] = v3078;
        STACK[0x3238] = v3078;
        STACK[0x3368] = v3072;
        STACK[0x8C8] = v3072;
        STACK[0x3218] = STACK[0x1680];
        STACK[0x3200] = v3051;
        STACK[0x8B8] = v3051;
        STACK[0x9F0] = v3067;
        STACK[0x3BD0] = v3067;
        STACK[0x3230] = STACK[0x1698];
        STACK[0x3378] = v3074;
        STACK[0x890] = v3074;
        STACK[0x9D0] = v3080;
        STACK[0x3BC8] = v3080;
        STACK[0x3228] = STACK[0x1670];
        STACK[0xA00] = v3082;
        STACK[0x3BC0] = v3082;
        STACK[0x3358] = v3069;
        STACK[0x868] = v3069;
        STACK[0x3370] = v3061;
        STACK[0x850] = v3061;
        STACK[0x3250] = STACK[0x1690];
        STACK[0x3220] = STACK[0x16B8];
        STACK[0x9D8] = v3076;
        STACK[0x3AC8] = v3076;
        STACK[0x3248] = STACK[0x16A0];
        STACK[0x3208] = v3064;
        STACK[0x910] = v3064;
        return v3083();
      case 0x18u:
        STACK[0x3BB8] = STACK[0x2710];
        STACK[0x3828] = STACK[0x2708];
        STACK[0x1F08] = STACK[0x3C08];
        STACK[0x1F00] = v1331;
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        STACK[0x3C58] = STACK[0x2798];
        STACK[0x3BA0] = STACK[0x26F8];
        STACK[0x1EF8] = STACK[0x3C20];
        STACK[0x33C0] = STACK[0x3C50];
        STACK[0x1EF0] = v1326;
        STACK[0x36C0] = STACK[0x3A70];
        STACK[0x1EE8] = v1316;
        STACK[0x1EE0] = v1313;
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x36B8] = STACK[0x3A78];
        STACK[0x3C50] = STACK[0x2770];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x1ED8] = STACK[0x3C78];
        STACK[0x33B8] = STACK[0x3C48];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x36B0] = STACK[0x3A80];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x3C40] = STACK[0x2780];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x1ED0] = v1321;
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x36A8] = STACK[0x3A88];
        STACK[0x1EC8] = STACK[0x3C28];
        STACK[0x1EC0] = STACK[0x3B58];
        STACK[0x36A0] = STACK[0x39C0];
        STACK[0x1EB8] = STACK[0x3B60];
        STACK[0x3698] = STACK[0x3A90];
        STACK[0x3C48] = STACK[0x2788];
        STACK[0x3690] = STACK[0x3A98];
        LODWORD(STACK[0x3BD8]) = 25;
        STACK[0x3B70] = STACK[0x3028];
        STACK[0x3378] = STACK[0x3040];
        STACK[0x3B68] = STACK[0x3458];
        STACK[0x3B78] = STACK[0x3038];
        STACK[0x3370] = STACK[0x3078];
        STACK[0x3368] = STACK[0x3068];
        STACK[0x3210] = STACK[0x3070];
        STACK[0x3350] = STACK[0x3460];
        STACK[0x3238] = STACK[0x3478];
        STACK[0x3200] = STACK[0x3470];
        STACK[0x3218] = STACK[0x3488];
        STACK[0x3358] = STACK[0x3030];
        STACK[0x3BD0] = STACK[0x3060];
        STACK[0x3230] = STACK[0x3480];
        STACK[0x3BC8] = STACK[0x3468];
        STACK[0x3208] = STACK[0x3498];
        STACK[0x3228] = STACK[0x3080];
        STACK[0x3BC0] = STACK[0x3058];
        STACK[0x3250] = STACK[0x3050];
        STACK[0x3220] = STACK[0x34A0];
        STACK[0x3AC8] = STACK[0x3490];
        JUMPOUT(0x1006B97E0);
      case 0x1Cu:
        v3084 = STACK[0x3058];
        v3085 = STACK[0x3530];
        v3086 = STACK[0x3058] + STACK[0x3530] > 0xFFFFFFFFFFFFFFCALL;
        STACK[0x3C38] = STACK[0x3058] + STACK[0x3530];
        if (__CFADD__(v3084, v3085))
          v3086 = 1;
        LODWORD(STACK[0x3C30]) = v3086;
        v3087 = STACK[0x3090];
        v3088 = STACK[0x3478];
        v3089 = STACK[0x3090] + STACK[0x3478] > 0xFFFFFFFFFFFFFFD2;
        STACK[0x3C00] = STACK[0x3090] + STACK[0x3478];
        if (__CFADD__(v3087, v3088))
          v3089 = 1;
        LODWORD(STACK[0x3BF8]) = v3089;
        v3090 = STACK[0x3490];
        v3091 = STACK[0x3418];
        v3092 = STACK[0x3490] + STACK[0x3418] > 0xFFFFFFFFFFFFFFD0;
        STACK[0x3BF0] = STACK[0x3490] + STACK[0x3418];
        if (__CFADD__(v3090, v3091))
          v3092 = 1;
        LODWORD(STACK[0x3BE8]) = v3092;
        v3093 = STACK[0x34C0];
        v3094 = STACK[0x3468];
        v3095 = STACK[0x34C0] + STACK[0x3468] > 0xFFFFFFFFFFFFFFDELL;
        STACK[0x3BE0] = STACK[0x34C0] + STACK[0x3468];
        if (__CFADD__(v3093, v3094))
          v3095 = 1;
        LODWORD(STACK[0x3BD0]) = v3095;
        v3096 = STACK[0x3060];
        v3097 = STACK[0x34D0];
        v3098 = STACK[0x3060] + STACK[0x34D0] > 0xFFFFFFFFFFFFFFEELL;
        STACK[0x3BC8] = STACK[0x3060] + STACK[0x34D0];
        if (__CFADD__(v3096, v3097))
          v3098 = 1;
        LODWORD(STACK[0x3BC0]) = v3098;
        v3099 = STACK[0x3068];
        v3100 = STACK[0x3510];
        v3101 = STACK[0x3068] + STACK[0x3510] > 0xFFFFFFFFFFFFFFD8;
        STACK[0x3BB8] = STACK[0x3068] + STACK[0x3510];
        if (__CFADD__(v3099, v3100))
          v3101 = 1;
        LODWORD(STACK[0x3BB0]) = v3101;
        v3102 = STACK[0x3038];
        v3103 = STACK[0x3508];
        v3104 = STACK[0x3038] + STACK[0x3508] > 0xFFFFFFFFFFFFFFCALL;
        STACK[0x3BA0] = STACK[0x3038] + STACK[0x3508];
        if (__CFADD__(v3102, v3103))
          v3104 = 1;
        LODWORD(STACK[0x3B78]) = v3104;
        v3105 = STACK[0x34C8];
        v3106 = STACK[0x3458];
        v3107 = STACK[0x34C8] + STACK[0x3458] > 0xFFFFFFFFFFFFFFD0;
        STACK[0x3B70] = STACK[0x34C8] + STACK[0x3458];
        if (__CFADD__(v3105, v3106))
          v3107 = 1;
        LODWORD(STACK[0x3B68]) = v3107;
        v3108 = STACK[0x3048];
        v3109 = STACK[0x34B0];
        v3110 = STACK[0x3048] + STACK[0x34B0] > 0xFFFFFFFFFFFFFFD8;
        STACK[0x3B50] = STACK[0x3048] + STACK[0x34B0];
        if (__CFADD__(v3108, v3109))
          v3110 = 1;
        LODWORD(STACK[0x3B48]) = v3110;
        v3111 = STACK[0x3538];
        v3112 = STACK[0x3028];
        v3113 = STACK[0x3538] + STACK[0x3028] > 0xFFFFFFFFFFFFFFEELL;
        STACK[0x3B40] = STACK[0x3538] + STACK[0x3028];
        if (__CFADD__(v3111, v3112))
          v3113 = 1;
        LODWORD(STACK[0x3AC0]) = v3113;
        v3114 = STACK[0x3050];
        v3115 = STACK[0x3578];
        v3116 = STACK[0x3050] + STACK[0x3578] > 0xFFFFFFFFFFFFFFFALL;
        STACK[0x3930] = STACK[0x3050] + STACK[0x3578];
        if (__CFADD__(v3114, v3115))
          v3116 = 1;
        LODWORD(STACK[0x3928]) = v3116;
        v3117 = STACK[0x34D8];
        v3118 = STACK[0x3460];
        v3119 = STACK[0x34D8] + STACK[0x3460] > 0xFFFFFFFFFFFFFFF6;
        STACK[0x3AC8] = STACK[0x34D8] + STACK[0x3460];
        if (__CFADD__(v3117, v3118))
          v3119 = 1;
        LODWORD(STACK[0x3938]) = v3119;
        v3120 = STACK[0x3080] + STACK[0x3518];
        v3121 = __CFADD__(STACK[0x3080], STACK[0x3518]) || STACK[0x3080] + STACK[0x3518] > 0xFFFFFFFFFFFFFFFCLL;
        v3122 = __CFADD__(STACK[0x3488], STACK[0x3408]) || STACK[0x3488] + STACK[0x3408] == -1;
        STACK[0x3168] = v3122 + STACK[0x3488] + STACK[0x3408];
        v3123 = STACK[0x1ED8] + STACK[0x1F48];
        v3124 = __CFADD__(STACK[0x1ED8], STACK[0x1F48]) || STACK[0x1ED8] + STACK[0x1F48] > 0xFFFFFFFFFFFFFFCALL;
        v3125 = STACK[0x1EC0] + STACK[0x1F78];
        v3126 = v1326;
        v3127 = __CFADD__(STACK[0x1EC0], STACK[0x1F78]) || STACK[0x1EC0] + STACK[0x1F78] > 0xFFFFFFFFFFFFFFD0;
        v3128 = __CFADD__(STACK[0x1EB8], STACK[0x1F40]) || STACK[0x1EB8] + STACK[0x1F40] > 0xFFFFFFFFFFFFFFEELL;
        v3129 = __CFADD__(STACK[0x1EE0], STACK[0x1F80]) || STACK[0x1EE0] + STACK[0x1F80] == -1;
        v3130 = v3129 + STACK[0x1EE0] + STACK[0x1F80];
        v3131 = STACK[0x1EC8] + STACK[0x1F68];
        v3132 = v1331;
        v3133 = __CFADD__(STACK[0x1EC8], STACK[0x1F68]);
        v3134 = STACK[0x1EF0] + STACK[0x1F58];
        v3135 = __CFADD__(STACK[0x1EF0], STACK[0x1F58]);
        v3136 = STACK[0x1EE8] + STACK[0x1F30];
        v3137 = __CFADD__(STACK[0x1EE8], STACK[0x1F30]);
        v3138 = STACK[0x1F00] + STACK[0x1F60];
        v3139 = __CFADD__(STACK[0x1F00], STACK[0x1F60]);
        if (v3136 > 0xFFFFFFFFFFFFFFFCLL)
          v3137 = 1;
        v3140 = STACK[0x1ED0] + STACK[0x1F70];
        v3141 = __CFADD__(STACK[0x1ED0], STACK[0x1F70]);
        v3142 = STACK[0x1EF8] + STACK[0x1F50];
        v3143 = __CFADD__(STACK[0x1EF8], STACK[0x1F50]);
        if (v3134 > 0xFFFFFFFFFFFFFFF6)
          v3135 = 1;
        if (v3137)
          v3144 = 3;
        else
          v3144 = 0;
        v3145 = v3144 + v3136;
        v3146 = v3140 > 0xFFFFFFFFFFFFFFFALL || v3141;
        v3147 = v3138 > 0xFFFFFFFFFFFFFFF0 || v3139;
        v3148 = STACK[0x1F08] + STACK[0x1F38];
        v3149 = __CFADD__(STACK[0x1F08], STACK[0x1F38]);
        if (v3147)
          v3150 = 15;
        else
          v3150 = 0;
        v2767 = v3146 == 0;
        v3151 = v3150 + v3138;
        v3152 = 5;
        if (v2767)
          v3152 = 0;
        v3153 = v3152 + v3140;
        if (v3135)
          v3154 = 9;
        else
          v3154 = 0;
        v3155 = v3154 + v3134;
        v3156 = v3142 > 0xFFFFFFFFFFFFFFD8 || v3143;
        if (v3128)
          v3157 = 17;
        else
          v3157 = 0;
        v3158 = v3157 + STACK[0x1EB8] + STACK[0x1F40];
        v3159 = v3131 > 0xFFFFFFFFFFFFFFD2 || v3133;
        if (v3148 > 0xFFFFFFFFFFFFFFDELL)
          v3149 = 1;
        STACK[0x1958] = (__PAIR128__(v1313 - v3130, v1313) - v3130) >> 64;
        if (v3156)
          v3160 = 39;
        else
          v3160 = 0;
        v3161 = v3160 + v3142;
        if (v3127)
          v3162 = 47;
        else
          v3162 = 0;
        v2767 = !v3149;
        v3163 = v3162 + v3125;
        if (v2767)
          v3164 = 0;
        else
          v3164 = 33;
        v3165 = v3164 + v3148;
        if (v3124)
          v3166 = 53;
        else
          v3166 = 0;
        v2767 = v3159 == 0;
        v3167 = v3166 + v3123;
        if (v2767)
          v3168 = 0;
        else
          v3168 = 45;
        v3169 = v3168 + v3131;
        v3170 = -3;
        if (v1316 >= v3145)
          v3170 = 0;
        v334 = v3132 >= v3151;
        v3171 = v3132 - v3151;
        STACK[0x1948] = v1316 - v3145 + v3170;
        v3172 = -15;
        if (v334)
          v3172 = 0;
        v334 = STACK[0x3B60] >= v3158;
        v3173 = STACK[0x3B60] - v3158;
        STACK[0x1968] = v3171 + v3172;
        v3174 = -17;
        if (v334)
          v3174 = 0;
        v334 = v3126 >= v3155;
        v3175 = v3126 - v3155;
        STACK[0x1950] = v3173 + v3174;
        v3176 = -9;
        if (v334)
          v3176 = 0;
        v334 = v1321 >= v3153;
        v3177 = v1321 - v3153;
        STACK[0x1970] = v3175 + v3176;
        v3178 = -5;
        if (v334)
          v3178 = 0;
        v334 = STACK[0x3C08] >= v3165;
        v3179 = STACK[0x3C08] - v3165;
        STACK[0x1930] = v3177 + v3178;
        v3180 = -33;
        if (v334)
          v3180 = 0;
        v334 = STACK[0x3C20] >= v3161;
        v3181 = STACK[0x3C20] - v3161;
        STACK[0x1938] = v3179 + v3180;
        v3182 = -39;
        if (v334)
          v3182 = 0;
        v334 = STACK[0x3C28] >= v3169;
        v3183 = STACK[0x3C28] - v3169;
        STACK[0x1940] = v3181 + v3182;
        v3184 = -45;
        if (v334)
          v3184 = 0;
        STACK[0x19B8] = v3183 + v3184;
        v3185 = STACK[0x3088] + STACK[0x3070];
        v3186 = __CFADD__(STACK[0x3088], STACK[0x3070]);
        v3187 = -53;
        if (STACK[0x3C78] >= v3167)
          v3187 = 0;
        STACK[0x19B0] = STACK[0x3C78] - v3167 + v3187;
        if (v3185 > 0xFFFFFFFFFFFFFFF0)
          v3186 = 1;
        if (v3121)
          v3188 = 3;
        else
          v3188 = 0;
        STACK[0x31A8] = v3188 + v3120;
        v3189 = STACK[0x3528] + STACK[0x3480];
        v3190 = __CFADD__(STACK[0x3528], STACK[0x3480]);
        v334 = STACK[0x3B58] >= v3163;
        v3191 = STACK[0x3B58] - v3163;
        v3192 = -47;
        if (v334)
          v3192 = 0;
        STACK[0x1980] = v3191 + v3192;
        v3193 = STACK[0x34A8] + STACK[0x34A0];
        v3194 = __CFADD__(STACK[0x34A8], STACK[0x34A0]);
        if (v3186)
          v3195 = 15;
        else
          v3195 = 0;
        v3196 = STACK[0x3928];
        STACK[0x3800] = v3195 + v3185;
        if (v3196)
          v3197 = 5;
        else
          v3197 = 0;
        v2767 = LODWORD(STACK[0x3AC0]) == 0;
        STACK[0x3290] = v3197 + STACK[0x3930];
        if (v2767)
          v3198 = 0;
        else
          v3198 = 17;
        STACK[0x3820] = v3198 + STACK[0x3B40];
        v3199 = v3189 > 0xFFFFFFFFFFFFFFDELL || v3190;
        if (LODWORD(STACK[0x3938]))
          v3200 = 9;
        else
          v3200 = 0;
        STACK[0x3120] = v3200 + STACK[0x3AC8];
        v3201 = v3193 > 0xFFFFFFFFFFFFFFD2 || v3194;
        v3202 = STACK[0x3498] + STACK[0x3500];
        v3203 = __CFADD__(STACK[0x3498], STACK[0x3500]);
        v3204 = STACK[0x3520] + STACK[0x3470];
        LODWORD(v3205) = __CFADD__(STACK[0x3520], STACK[0x3470]);
        if (v3201)
          v3206 = 45;
        else
          v3206 = 0;
        STACK[0x3160] = v3206 + v3193;
        v3207 = STACK[0x3040] + STACK[0x34B8];
        v3208 = __CFADD__(STACK[0x3040], STACK[0x34B8]);
        v3209 = STACK[0x3078] + STACK[0x3410];
        v3210 = __CFADD__(STACK[0x3078], STACK[0x3410]);
        if (LODWORD(STACK[0x3B48]))
          v3211 = 39;
        else
          v3211 = 0;
        STACK[0x3C28] = v3211 + STACK[0x3B50];
        if (v3199)
          v3212 = 33;
        else
          v3212 = 0;
        v3213 = STACK[0x3B68];
        STACK[0x3158] = v3212 + v3189;
        if (v3213)
          v3214 = 47;
        else
          v3214 = 0;
        v2767 = LODWORD(STACK[0x3B78]) == 0;
        STACK[0x3B60] = v3214 + STACK[0x3B70];
        if (v2767)
          v3215 = 0;
        else
          v3215 = 53;
        STACK[0x3C20] = v3215 + STACK[0x3BA0];
        v3216 = v3209 > 0xFFFFFFFFFFFFFFFCLL || v3210;
        if (v3204 == -1)
          v3205 = 1;
        else
          v3205 = v3205;
        STACK[0x3178] = v3205 + v3204;
        if (v3216)
          v3217 = 3;
        else
          v3217 = 0;
        STACK[0x3108] = v3217 + v3209;
        v3218 = STACK[0x30C8] + STACK[0x3030];
        v3219 = __CFADD__(STACK[0x30C8], STACK[0x3030]);
        if (v3207 > 0xFFFFFFFFFFFFFFF0)
          v3208 = 1;
        if (v3202 > 0xFFFFFFFFFFFFFFF6)
          v3203 = 1;
        if (v3208)
          v3220 = 15;
        else
          v3220 = 0;
        STACK[0x3100] = v3220 + v3207;
        if (v3203)
          v3221 = 9;
        else
          v3221 = 0;
        STACK[0x30F8] = v3221 + v3202;
        v3222 = v3218 > 0xFFFFFFFFFFFFFFFALL || v3219;
        if (LODWORD(STACK[0x3BC0]))
          v3223 = 17;
        else
          v3223 = 0;
        v2767 = LODWORD(STACK[0x3BB0]) == 0;
        STACK[0x3B58] = v3223 + STACK[0x3BC8];
        if (v2767)
          v3224 = 0;
        else
          v3224 = 39;
        STACK[0x3B48] = v3224 + STACK[0x3BB8];
        if (LODWORD(STACK[0x3BD0]))
          v3225 = 33;
        else
          v3225 = 0;
        v2767 = LODWORD(STACK[0x3BE8]) == 0;
        STACK[0x30F0] = v3225 + STACK[0x3BE0];
        if (v2767)
          v3226 = 0;
        else
          v3226 = 47;
        STACK[0x3B50] = v3226 + STACK[0x3BF0];
        if (v3222)
          v3227 = 5;
        else
          v3227 = 0;
        STACK[0x3110] = v3227 + v3218;
        if (LODWORD(STACK[0x3BF8]))
          v3228 = 45;
        else
          v3228 = 0;
        v2767 = LODWORD(STACK[0x3C30]) == 0;
        STACK[0x3118] = v3228 + STACK[0x3C00];
        if (v2767)
          v3229 = 0;
        else
          v3229 = 53;
        STACK[0x3B40] = v3229 + STACK[0x3C38];
        v3230 = STACK[0x3710];
        v3231 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 1662)) - 4);
        STACK[0x36C8] = STACK[0x28D8];
        STACK[0x3810] = STACK[0x28E0];
        STACK[0x3688] = STACK[0x39E0];
        STACK[0x2FE8] = STACK[0x2800];
        STACK[0x2FE0] = STACK[0x2808];
        STACK[0x37F8] = STACK[0x28E8];
        STACK[0x2FC8] = STACK[0x2810];
        STACK[0x2FD8] = STACK[0x28B0];
        STACK[0x2FF0] = STACK[0x2AE0];
        STACK[0x2FC0] = STACK[0x2AA8];
        STACK[0x2FB0] = STACK[0x28F0];
        STACK[0x3808] = STACK[0x2A10];
        STACK[0x2FA8] = STACK[0x28B8];
        STACK[0x2FA0] = STACK[0x2910];
        STACK[0x2FB8] = STACK[0x2AE8];
        STACK[0x2FD0] = STACK[0x28F8];
        STACK[0x3680] = STACK[0x39E8];
        STACK[0x2F90] = STACK[0x2918];
        STACK[0x3668] = STACK[0x39D8];
        STACK[0x37F0] = STACK[0x2AF0];
        STACK[0x2F88] = STACK[0x2818];
        STACK[0x3678] = STACK[0x39F8];
        STACK[0x3670] = STACK[0x3860];
        STACK[0x2F78] = STACK[0x2820];
        STACK[0x2F98] = STACK[0x2A18];
        STACK[0x2F80] = STACK[0x2920];
        STACK[0x3660] = STACK[0x3838];
        STACK[0x2F70] = STACK[0x2828];
        STACK[0x2F68] = STACK[0x2900];
        STACK[0x30E0] = STACK[0x2A20];
        STACK[0x3658] = STACK[0x39D0];
        STACK[0x3650] = STACK[0x3840];
        STACK[0x2F50] = STACK[0x2928];
        STACK[0x2F48] = STACK[0x2930];
        STACK[0x2F40] = STACK[0x28C0];
        STACK[0x2F38] = STACK[0x2830];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x3640] = STACK[0x39C8];
        STACK[0x3648] = STACK[0x3BA8];
        STACK[0x3638] = STACK[0x3848];
        STACK[0x3630] = STACK[0x3A00];
        STACK[0x2F58] = STACK[0x2A28];
        STACK[0x3628] = STACK[0x3A10];
        STACK[0x3618] = STACK[0x3868];
        STACK[0x3610] = STACK[0x39F0];
        STACK[0x3620] = STACK[0x3850];
        STACK[0x2F30] = STACK[0x2AB0];
        STACK[0x3608] = STACK[0x3858];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x3600] = STACK[0x3870];
        STACK[0x2F28] = STACK[0x2838];
        STACK[0x35F8] = STACK[0x3A08];
        STACK[0x2F20] = STACK[0x2840];
        STACK[0x3C60] = STACK[0x2938];
        STACK[0x37E8] = STACK[0x2AF8];
        STACK[0x30D0] = STACK[0x2A30];
        STACK[0x2F10] = STACK[0x2AB8];
        STACK[0x2F08] = STACK[0x2848];
        STACK[0x2F18] = STACK[0x2850];
        STACK[0x35F0] = STACK[0x3AD0];
        STACK[0x2F00] = STACK[0x2AC0];
        STACK[0x2EF8] = STACK[0x2858];
        STACK[0x35E8] = STACK[0x3AD8];
        STACK[0x35E0] = STACK[0x3AE0];
        STACK[0x35D8] = STACK[0x3AE8];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x2EE8] = STACK[0x2860];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x2EF0] = STACK[0x2868];
        STACK[0x2ED8] = STACK[0x2940];
        STACK[0x2EE0] = STACK[0x2AC8];
        STACK[0x35D0] = STACK[0x3AF0];
        STACK[0x2ED0] = STACK[0x2A38];
        STACK[0x2EC0] = STACK[0x2870];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x2EB8] = STACK[0x2878];
        STACK[0x2EC8] = STACK[0x2908];
        STACK[0x2EB0] = STACK[0x28C8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x2EA8] = STACK[0x2948];
        STACK[0x2EA0] = STACK[0x2880];
        STACK[0x2E98] = STACK[0x2B00];
        STACK[0x35C8] = STACK[0x3AF8];
        STACK[0x35C0] = STACK[0x3B08];
        STACK[0x35B8] = STACK[0x3B00];
        STACK[0x30E8] = STACK[0x2B08];
        STACK[0x35B0] = STACK[0x3B10];
        STACK[0x35A8] = STACK[0x3B18];
        LODWORD(STACK[0x2F64]) = STACK[0x27FC];
        STACK[0x2E90] = STACK[0x28D0];
        STACK[0x35A0] = STACK[0x3B20];
        STACK[0x30D8] = STACK[0x2A40];
        STACK[0x2E88] = STACK[0x2AD0];
        STACK[0x2E78] = STACK[0x2888];
        STACK[0x3C68] = STACK[0x2950];
        STACK[0x3598] = STACK[0x3B30];
        STACK[0x2E70] = STACK[0x2890];
        STACK[0x2E68] = STACK[0x2898];
        STACK[0x3588] = STACK[0x3B28];
        STACK[0x3818] = STACK[0x2A48];
        STACK[0x2E60] = STACK[0x2AD8];
        STACK[0x2E58] = STACK[0x28A0];
        STACK[0x2E80] = STACK[0x2B10];
        STACK[0x2E50] = STACK[0x2958];
        STACK[0x3580] = STACK[0x3B38];
        STACK[0x2E48] = STACK[0x28A8];
        LODWORD(STACK[0x3C08]) = 29;
        LODWORD(STACK[0x3590]) = v3230;
        return v3231();
      case 0x1Fu:
        v3232 = STACK[0x3C28] + STACK[0x920];
        v3233 = __CFADD__(STACK[0x3C28], STACK[0x920]);
        if (v3232 > 0xFFFFFFFFFFFFFFD2)
          v3233 = 1;
        v2767 = !v3233;
        v3234 = 45;
        if (v2767)
          v3234 = 0;
        v3235 = v3234 + v3232;
        v3236 = STACK[0x1D38];
        v3237 = v3234 + v3232 + STACK[0x1D38] > 0xFFFFFFFFFFFFFFD2;
        STACK[0x3C38] = v3235 + STACK[0x1D38];
        v3238 = __CFADD__(v3235, v3236) || v3237;
        LODWORD(STACK[0x3C30]) = v3238;
        v3239 = STACK[0x3C08] + STACK[0x8D8] > 0xFFFFFFFFFFFFFFDELL;
        v3240 = STACK[0x3C08] + STACK[0x8D8];
        if (__CFADD__(STACK[0x3C08], STACK[0x8D8]))
          v3239 = 1;
        if (v3239)
          v3241 = 33;
        else
          v3241 = 0;
        v3242 = v3241 + v3240;
        v3243 = STACK[0x1D18];
        v3244 = v3241 + v3240 + STACK[0x1D18] > 0xFFFFFFFFFFFFFFDELL;
        STACK[0x3C08] = v3242 + STACK[0x1D18];
        v3245 = __CFADD__(v3242, v3243) || v3244;
        LODWORD(STACK[0x3C00]) = v3245;
        v3246 = STACK[0x3C78] + STACK[0x958];
        v3247 = __CFADD__(STACK[0x3C78], STACK[0x958]);
        if (v3246 > 0xFFFFFFFFFFFFFFCALL)
          v3247 = 1;
        if (v3247)
          v3248 = 53;
        else
          v3248 = 0;
        v3249 = v3248 + v3246;
        v3250 = STACK[0x1D00];
        v3251 = v3248 + v3246 + STACK[0x1D00] > 0xFFFFFFFFFFFFFFCALL;
        STACK[0x3C78] = v3249 + STACK[0x1D00];
        v3252 = __CFADD__(v3249, v3250) || v3251;
        LODWORD(STACK[0x3BF8]) = v3252;
        v3253 = STACK[0x3C20] + STACK[0x8C0];
        v3254 = __CFADD__(STACK[0x3C20], STACK[0x8C0]);
        if (v3253 > 0xFFFFFFFFFFFFFFD8)
          v3254 = 1;
        if (v3254)
          v3255 = 39;
        else
          v3255 = 0;
        v3256 = v1331;
        v3257 = v3255 + v3253;
        v3258 = STACK[0x1D30];
        v3259 = v3255 + v3253 + STACK[0x1D30] > 0xFFFFFFFFFFFFFFD8;
        STACK[0x3C20] = v3257 + STACK[0x1D30];
        if (__CFADD__(v3257, v3258))
          v3259 = 1;
        v3260 = v1313 + STACK[0x928];
        LODWORD(v3261) = __CFADD__(v1313, STACK[0x928]);
        if (v3260 == -1)
          v3261 = 1;
        else
          v3261 = v3261;
        v3262 = v3261 + v3260;
        v3263 = STACK[0x1D50];
        v3264 = __CFADD__(v3262, STACK[0x1D50]) || v3262 + STACK[0x1D50] == -1;
        STACK[0x3178] = v3264 + v3262 + v3263;
        v3265 = v1321 + STACK[0x990];
        v3266 = __CFADD__(v1321, STACK[0x990]) || v1321 + STACK[0x990] > 0xFFFFFFFFFFFFFFFALL;
        v3267 = v1326 + STACK[0x980] > 0xFFFFFFFFFFFFFFF6;
        v334 = __CFADD__(v1326, STACK[0x980]);
        v3268 = v1326 + STACK[0x980];
        v3269 = v334 || v3267;
        v3270 = v1316 + STACK[0x8B0];
        v3271 = __CFADD__(v1316, STACK[0x8B0]);
        v3272 = v3256 + STACK[0x930];
        v3273 = __CFADD__(v3256, STACK[0x930]);
        if (v3270 > 0xFFFFFFFFFFFFFFFCLL)
          v3271 = 1;
        v3274 = STACK[0x3B60] + STACK[0xA38];
        v3275 = __CFADD__(STACK[0x3B60], STACK[0xA38]);
        if (v3271)
          v3276 = 3;
        else
          v3276 = 0;
        v3277 = v3276 + v3270;
        if (v3272 > 0xFFFFFFFFFFFFFFF0 || v3273)
          v3279 = 15;
        else
          v3279 = 0;
        v3280 = v3279 + v3272;
        v3281 = v3274 > 0xFFFFFFFFFFFFFFEELL || v3275;
        if (v3269)
          v3282 = 9;
        else
          v3282 = 0;
        v3283 = v3282 + v3268;
        if (v3281)
          v3284 = 17;
        else
          v3284 = 0;
        v2767 = !v3266;
        v3285 = v3284 + v3274;
        if (v2767)
          v3286 = 0;
        else
          v3286 = 5;
        v3287 = v3286 + v3265;
        v3288 = STACK[0x3B58] + STACK[0x940];
        v3289 = __CFADD__(STACK[0x3B58], STACK[0x940]);
        v334 = v3263 >= v3262;
        v3290 = v3263 - v3262;
        v3291 = !v334;
        STACK[0x1610] = v3290 - v3291;
        v3292 = v3288 > 0xFFFFFFFFFFFFFFD0 || v3289;
        v3293 = STACK[0x1D08];
        if (STACK[0x1D08] >= v3283)
          v3294 = 0;
        else
          v3294 = -9;
        STACK[0x3120] = v3294 + STACK[0x1D08] - v3283;
        if (v3292)
          v3295 = 47;
        else
          v3295 = 0;
        v3296 = v3295 + v3288;
        v3297 = STACK[0x1D48];
        v3298 = -5;
        if (STACK[0x1D48] >= v3287)
          v3298 = 0;
        STACK[0x3290] = v3298 + STACK[0x1D48] - v3287;
        v3299 = STACK[0x1D28];
        v3300 = -3;
        if (STACK[0x1D28] >= v3277)
          v3300 = 0;
        STACK[0x31A8] = v3300 + STACK[0x1D28] - v3277;
        v3301 = v3287 + v3297;
        v3302 = __CFADD__(v3287, v3297);
        v3303 = v3277 + v3299;
        v3304 = __CFADD__(v3277, v3299);
        v3305 = STACK[0x1D20];
        if (STACK[0x1D20] >= v3280)
          v3306 = 0;
        else
          v3306 = -15;
        STACK[0x1628] = v3306 + STACK[0x1D20] - v3280;
        v334 = v3258 >= v3257;
        v3307 = v3258 - v3257;
        if (v334)
          v3308 = 0;
        else
          v3308 = -39;
        STACK[0x3C28] = v3308 + v3307;
        v334 = v3243 >= v3242;
        v3309 = v3243 - v3242;
        if (v334)
          v3310 = 0;
        else
          v3310 = -33;
        STACK[0x1648] = v3310 + v3309;
        if (v3236 >= v3235)
          v3311 = 0;
        else
          v3311 = -45;
        v3312 = v3311 + v3236 - v3235;
        v3313 = STACK[0x1D10];
        if (STACK[0x1D10] >= v3285)
          v3314 = 0;
        else
          v3314 = -17;
        v3315 = v3314 + STACK[0x1D10] - v3285;
        v3316 = v3283 + v3293;
        v3317 = __CFADD__(v3283, v3293);
        if (v3303 > 0xFFFFFFFFFFFFFFFCLL)
          v3304 = 1;
        v3318 = STACK[0x1D40];
        if (STACK[0x1D40] >= v3296)
          v3319 = 0;
        else
          v3319 = -47;
        v3320 = v3319 + STACK[0x1D40] - v3296;
        v3321 = v3285 + v3313;
        v3322 = __CFADD__(v3285, v3313);
        v3323 = v3296 + v3318;
        v3324 = __CFADD__(v3296, v3318);
        v3325 = v3301 > 0xFFFFFFFFFFFFFFFALL || v3302;
        if (v3316 > 0xFFFFFFFFFFFFFFF6)
          v3317 = 1;
        v334 = __CFADD__(v3280, v3305);
        v3326 = v3280 + v3305;
        v3327 = v334;
        if (v3325)
          v3328 = 5;
        else
          v3328 = 0;
        v3329 = v3328 + v3301;
        v334 = v3250 >= v3249;
        v3330 = v3250 - v3249;
        v3331 = -53;
        if (v334)
          v3331 = 0;
        v3332 = v3331 + v3330;
        v3333 = v3321 > 0xFFFFFFFFFFFFFFEELL || v3322;
        if (v3326 > 0xFFFFFFFFFFFFFFF0)
          v3334 = 1;
        else
          v3334 = v3327;
        if (v3304)
          v3335 = 3;
        else
          v3335 = 0;
        v2767 = v3334 == 0;
        v3336 = v3335 + v3303;
        if (v2767)
          v3337 = 0;
        else
          v3337 = 15;
        v2767 = !v3317;
        v3338 = v3337 + v3326;
        if (v2767)
          v3339 = 0;
        else
          v3339 = 9;
        v3340 = v3339 + v3316;
        if (v3259)
          v3341 = 39;
        else
          v3341 = 0;
        v3342 = v3341 + STACK[0x3C20];
        if (v3333)
          v3343 = 17;
        else
          v3343 = 0;
        v3344 = v3343 + v3321;
        if (LODWORD(STACK[0x3BF8]))
          v3345 = 53;
        else
          v3345 = 0;
        v3346 = v3345 + STACK[0x3C78];
        if (LODWORD(STACK[0x3C30]))
          v3347 = 45;
        else
          v3347 = 0;
        v3348 = v3347 + STACK[0x3C38];
        v3349 = v3323 > 0xFFFFFFFFFFFFFFD0 || v3324;
        v3350 = 33;
        if (!LODWORD(STACK[0x3C00]))
          v3350 = 0;
        v3351 = v3350 + STACK[0x3C08];
        if (v3349)
          v3352 = 47;
        else
          v3352 = 0;
        v3353 = v3352 + v3323;
        v3354 = STACK[0x3710];
        v3355 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 1662)) - 4);
        STACK[0x36C8] = STACK[0x28D8];
        STACK[0x3810] = STACK[0x28E0];
        STACK[0x3688] = STACK[0x39E0];
        STACK[0x2FE8] = STACK[0x2800];
        STACK[0x2FE0] = STACK[0x2808];
        STACK[0x37F8] = STACK[0x28E8];
        STACK[0x2FC8] = STACK[0x2810];
        STACK[0x2FD8] = STACK[0x28B0];
        STACK[0x2FF0] = STACK[0x2AE0];
        STACK[0x2FC0] = STACK[0x2AA8];
        STACK[0x2FB0] = STACK[0x28F0];
        STACK[0x3808] = STACK[0x2A10];
        STACK[0x2FA8] = STACK[0x28B8];
        STACK[0x2FA0] = STACK[0x2910];
        STACK[0x2FB8] = STACK[0x2AE8];
        STACK[0x2FD0] = STACK[0x28F8];
        STACK[0x3680] = STACK[0x39E8];
        STACK[0x2F90] = STACK[0x2918];
        STACK[0x3668] = STACK[0x39D8];
        STACK[0x37F0] = STACK[0x2AF0];
        STACK[0x2F88] = STACK[0x2818];
        STACK[0x3678] = STACK[0x39F8];
        STACK[0x3670] = STACK[0x3860];
        STACK[0x2F78] = STACK[0x2820];
        STACK[0x2F98] = STACK[0x2A18];
        STACK[0x2F80] = STACK[0x2920];
        STACK[0x3660] = STACK[0x3838];
        STACK[0x2F70] = STACK[0x2828];
        STACK[0x2F68] = STACK[0x2900];
        STACK[0x30E0] = STACK[0x2A20];
        STACK[0x3658] = STACK[0x39D0];
        STACK[0x3650] = STACK[0x3840];
        STACK[0x2F50] = STACK[0x2928];
        STACK[0x2F48] = STACK[0x2930];
        STACK[0x2F40] = STACK[0x28C0];
        STACK[0x2F38] = STACK[0x2830];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x3640] = STACK[0x39C8];
        STACK[0x3648] = STACK[0x3BA8];
        STACK[0x3638] = STACK[0x3848];
        STACK[0x3630] = STACK[0x3A00];
        STACK[0x2F58] = STACK[0x2A28];
        STACK[0x3628] = STACK[0x3A10];
        STACK[0x3618] = STACK[0x3868];
        STACK[0x3610] = STACK[0x39F0];
        STACK[0x3620] = STACK[0x3850];
        STACK[0x2F30] = STACK[0x2AB0];
        STACK[0x3608] = STACK[0x3858];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x3600] = STACK[0x3870];
        STACK[0x2F28] = STACK[0x2838];
        STACK[0x35F8] = STACK[0x3A08];
        STACK[0x2F20] = STACK[0x2840];
        STACK[0x3C60] = STACK[0x2938];
        STACK[0x37E8] = STACK[0x2AF8];
        STACK[0x30D0] = STACK[0x2A30];
        STACK[0x2F10] = STACK[0x2AB8];
        STACK[0x2F08] = STACK[0x2848];
        STACK[0x2F18] = STACK[0x2850];
        STACK[0x35F0] = STACK[0x3AD0];
        STACK[0x2F00] = STACK[0x2AC0];
        STACK[0x2EF8] = STACK[0x2858];
        STACK[0x35E8] = STACK[0x3AD8];
        STACK[0x35E0] = STACK[0x3AE0];
        STACK[0x35D8] = STACK[0x3AE8];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x2EE8] = STACK[0x2860];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x2EF0] = STACK[0x2868];
        STACK[0x2ED8] = STACK[0x2940];
        STACK[0x2EE0] = STACK[0x2AC8];
        STACK[0x35D0] = STACK[0x3AF0];
        STACK[0x2ED0] = STACK[0x2A38];
        STACK[0x2EC0] = STACK[0x2870];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x2EB8] = STACK[0x2878];
        STACK[0x2EC8] = STACK[0x2908];
        STACK[0x2EB0] = STACK[0x28C8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x2EA8] = STACK[0x2948];
        STACK[0x2EA0] = STACK[0x2880];
        STACK[0x2E98] = STACK[0x2B00];
        STACK[0x35C8] = STACK[0x3AF8];
        STACK[0x35C0] = STACK[0x3B08];
        STACK[0x35B8] = STACK[0x3B00];
        STACK[0x30E8] = STACK[0x2B08];
        STACK[0x35B0] = STACK[0x3B10];
        STACK[0x35A8] = STACK[0x3B18];
        LODWORD(STACK[0x2F64]) = STACK[0x27FC];
        STACK[0x2E90] = STACK[0x28D0];
        STACK[0x35A0] = STACK[0x3B20];
        STACK[0x30D8] = STACK[0x2A40];
        STACK[0x2E88] = STACK[0x2AD0];
        STACK[0x2E78] = STACK[0x2888];
        STACK[0x3C68] = STACK[0x2950];
        STACK[0x3598] = STACK[0x3B30];
        STACK[0x2E70] = STACK[0x2890];
        STACK[0x2E68] = STACK[0x2898];
        STACK[0x3588] = STACK[0x3B28];
        STACK[0x3818] = STACK[0x2A48];
        STACK[0x2E60] = STACK[0x2AD8];
        STACK[0x2E58] = STACK[0x28A0];
        STACK[0x2E80] = STACK[0x2B10];
        STACK[0x2E50] = STACK[0x2958];
        STACK[0x3580] = STACK[0x3B38];
        STACK[0x2E48] = STACK[0x28A8];
        LODWORD(STACK[0x3C08]) = 32;
        LODWORD(STACK[0x3590]) = v3354;
        STACK[0x2370] = v3353;
        STACK[0x3B50] = v3353;
        STACK[0x2378] = v3336;
        STACK[0x3108] = v3336;
        STACK[0x3160] = v3312;
        STACK[0x888] = v3312;
        STACK[0x880] = STACK[0x3120];
        STACK[0x878] = STACK[0x3290];
        STACK[0x2388] = v3340;
        STACK[0x30F8] = v3340;
        STACK[0x3100] = v3338;
        STACK[0x2348] = v3338;
        STACK[0x2368] = v3348;
        STACK[0x3118] = v3348;
        STACK[0x2340] = STACK[0x3178];
        STACK[0x3168] = STACK[0x1610];
        STACK[0x840] = STACK[0x3C28];
        STACK[0x9C0] = v3320;
        STACK[0x3B60] = v3320;
        STACK[0x2360] = v3351;
        STACK[0x30F0] = v3351;
        STACK[0x2358] = v3346;
        STACK[0x3B40] = v3346;
        STACK[0x2380] = v3329;
        STACK[0x3110] = v3329;
        STACK[0x3800] = STACK[0x1628];
        STACK[0x3C20] = v3332;
        STACK[0x830] = v3332;
        STACK[0x3158] = STACK[0x1648];
        STACK[0x3B48] = v3342;
        STACK[0x2338] = v3342;
        STACK[0x828] = STACK[0x31A8];
        STACK[0x3820] = v3315;
        STACK[0x8E0] = v3315;
        STACK[0x3B58] = v3344;
        STACK[0x2350] = v3344;
        return v3355();
      case 0x22u:
        v3356 = STACK[0x1068];
        STACK[0x3BD0] = v1316;
        v3357 = STACK[0xB38];
        v3358 = STACK[0xB38] + v3356 > 0xFFFFFFFFFFFFFFD0;
        STACK[0x3C30] = STACK[0xB38] + v3356;
        if (__CFADD__(v3357, v3356))
          v3358 = 1;
        LODWORD(STACK[0x3BF8]) = v3358;
        STACK[0x3BC8] = v1313;
        v3359 = STACK[0xC80];
        v3360 = STACK[0xC80] + STACK[0x1028] > 0xFFFFFFFFFFFFFFFALL;
        v3361 = STACK[0xC80] + STACK[0x1028];
        if (__CFADD__(STACK[0xC80], STACK[0x1028]))
          v3360 = 1;
        v3362 = STACK[0xB90];
        v3363 = STACK[0xB90] + STACK[0xFF8] > 0xFFFFFFFFFFFFFFFCLL;
        v3364 = STACK[0xB90] + STACK[0xFF8];
        if (__CFADD__(STACK[0xB90], STACK[0xFF8]))
          v3363 = 1;
        v3365 = STACK[0xAF0];
        v3366 = STACK[0xAF0] + STACK[0x1038] > 0xFFFFFFFFFFFFFFF6;
        v3367 = STACK[0xAF0] + STACK[0x1038];
        if (__CFADD__(STACK[0xAF0], STACK[0x1038]))
          v3366 = 1;
        v3368 = STACK[0xAD0];
        v3369 = __CFADD__(STACK[0xAD0], STACK[0x1010]) || STACK[0xAD0] + STACK[0x1010] == -1;
        STACK[0x19A8] = v3369 + STACK[0xAD0] + STACK[0x1010];
        v3370 = STACK[0xC60];
        v3371 = STACK[0xC60] + STACK[0x1018];
        v3372 = __CFADD__(STACK[0xC60], STACK[0x1018]);
        v334 = __CFADD__(STACK[0x1658], STACK[0xFD8]);
        v3373 = STACK[0x1658] + STACK[0xFD8];
        STACK[0x3BF0] = v1331;
        v3374 = v334;
        v3375 = STACK[0xC70];
        v3376 = STACK[0xC70] + STACK[0x1000];
        v3377 = __CFADD__(STACK[0xC70], STACK[0x1000]);
        v3378 = STACK[0x1660] + STACK[0xFE0];
        v3379 = __CFADD__(STACK[0x1660], STACK[0xFE0]);
        v3380 = STACK[0xC68];
        STACK[0x3C00] = v1326;
        v334 = __CFADD__(v3380, STACK[0xFF0]);
        v3381 = v3380 + STACK[0xFF0];
        STACK[0x3C38] = v1321;
        v3382 = v334;
        if (v3366)
          v3383 = 9;
        else
          v3383 = 0;
        STACK[0x19C8] = v3383 + v3367;
        if (v3360)
          v3384 = 5;
        else
          v3384 = 0;
        STACK[0x1988] = v3384 + v3361;
        v3385 = v3371 > 0xFFFFFFFFFFFFFFF0 || v3372;
        v3386 = v3376 > 0xFFFFFFFFFFFFFFEELL || v3377;
        v3387 = STACK[0xB18];
        v3388 = STACK[0xB18] + STACK[0xFE8];
        v3389 = __CFADD__(STACK[0xB18], STACK[0xFE8]);
        v2767 = v3385 == 0;
        v3390 = 15;
        if (v2767)
          v3390 = 0;
        STACK[0x19D8] = v3390 + v3371;
        v3391 = v3378 > 0xFFFFFFFFFFFFFFD8 || v3379;
        if (v3373 > 0xFFFFFFFFFFFFFFDELL)
          v3392 = 1;
        else
          v3392 = v3374;
        v2767 = v3386 == 0;
        v3393 = 17;
        if (v2767)
          v3393 = 0;
        STACK[0x19C0] = v3393 + v3376;
        if (v3363)
          v3394 = 3;
        else
          v3394 = 0;
        v3395 = STACK[0x3BF8];
        STACK[0x1998] = v3394 + v3364;
        v3396 = 47;
        if (!v3395)
          v3396 = 0;
        STACK[0x1960] = v3396 + STACK[0x3C30];
        v3397 = v3388 > 0xFFFFFFFFFFFFFFCALL || v3389;
        if (v3381 > 0xFFFFFFFFFFFFFFD2)
          v3398 = 1;
        else
          v3398 = v3382;
        v2767 = v3391 == 0;
        STACK[0x32F8] = (__PAIR128__(STACK[0x1EE0] - v3368, STACK[0x1EE0]) - v3368) >> 64;
        v3399 = 39;
        if (v2767)
          v3399 = 0;
        STACK[0x19A0] = v3399 + v3378;
        v3400 = -3;
        if (STACK[0x1EE8] >= v3362)
          v3400 = 0;
        STACK[0x32F0] = STACK[0x1EE8] - v3362 + v3400;
        v3401 = 33;
        if (!v3392)
          v3401 = 0;
        v2767 = v3397 == 0;
        STACK[0x1990] = v3401 + v3373;
        v3402 = 53;
        if (v2767)
          v3402 = 0;
        STACK[0x19D0] = v3402 + v3388;
        v3403 = 45;
        if (!v3398)
          v3403 = 0;
        STACK[0x1978] = v3403 + v3381;
        if (STACK[0x1F00] >= v3370)
          v3404 = 0;
        else
          v3404 = -15;
        STACK[0x3318] = STACK[0x1F00] - v3370 + v3404;
        if (STACK[0x1EF0] >= v3365)
          v3405 = 0;
        else
          v3405 = -9;
        STACK[0x3280] = STACK[0x1EF0] - v3365 + v3405;
        v3406 = -17;
        if (STACK[0x1EB8] >= v3375)
          v3406 = 0;
        STACK[0x32E0] = STACK[0x1EB8] - v3375 + v3406;
        v3407 = -5;
        if (STACK[0x1ED0] >= v3359)
          v3407 = 0;
        STACK[0x3128] = STACK[0x1ED0] - v3359 + v3407;
        v3408 = -45;
        if (STACK[0x1EC8] >= v3380)
          v3408 = 0;
        STACK[0x3348] = STACK[0x1EC8] - v3380 + v3408;
        v3409 = -47;
        if (STACK[0x1EC0] >= v3357)
          v3409 = 0;
        STACK[0x3338] = STACK[0x1EC0] - v3357 + v3409;
        v3410 = -53;
        if (STACK[0x1ED8] >= v3387)
          v3410 = 0;
        STACK[0x3340] = STACK[0x1ED8] - v3387 + v3410;
        v3411 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523)) - 8);
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        STACK[0xC18] = STACK[0x3C28];
        STACK[0x33C0] = STACK[0x3C50];
        v3412 = STACK[0x27F0];
        STACK[0xBC8] = STACK[0x3BF0];
        STACK[0x36C0] = STACK[0x3A70];
        STACK[0xBB0] = STACK[0x3BC8];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0xB88] = STACK[0x3B60];
        STACK[0x36B8] = STACK[0x3A78];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0xB58] = STACK[0x3C78];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0xB10] = STACK[0x3C00];
        STACK[0xB00] = STACK[0x3C20];
        STACK[0x33B8] = STACK[0x3C48];
        STACK[0xAF8] = STACK[0x3C08];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x36B0] = STACK[0x3A80];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0x36A8] = STACK[0x3A88];
        STACK[0xAC0] = STACK[0x3C38];
        STACK[0xAB0] = STACK[0x3BD0];
        STACK[0x36A0] = STACK[0x39C0];
        STACK[0xAA8] = STACK[0x3B58];
        STACK[0x3698] = STACK[0x3A90];
        STACK[0x3690] = STACK[0x3A98];
        STACK[0x3270] = 35;
        STACK[0x3310] = 0x661C765BF4208041;
        STACK[0x32E8] = 0x5B8FBBD5E48BD14FLL;
        STACK[0x3330] = 0xA299ED451E059C13;
        STACK[0x3288] = 0x32E284E124F24A81;
        STACK[0x3328] = 0x97B89D4EA264A1B3;
        STACK[0x3268] = 0xD4A6F4CF55C46B4CLL;
        STACK[0x3260] = 0x87E85B6E5A109AFALL;
        STACK[0x3278] = 0x34B9D46858BE76EBLL;
        STACK[0x3258] = 0xDDB22C380449E0BALL;
        STACK[0x3320] = 0x6EBA58B5908087BFLL;
        return v3411(v3412);
      case 0x30u:
        v1332 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) + 3963)) - 12);
        STACK[0x810] = v1321;
        STACK[0x788] = v1331;
        STACK[0x790] = STACK[0x3C28];
        STACK[0x33A8] = 0x2EE818AC82F341C6;
        STACK[0x798] = v1326;
        STACK[0x7A0] = STACK[0x3C08];
        v1333 = STACK[0x22D8];
        STACK[0x7B8] = v1313;
        STACK[0x33B0] = STACK[0x2288];
        STACK[0x7C0] = STACK[0x3B58];
        STACK[0x3BB0] = STACK[0x22C8];
        STACK[0x7D0] = STACK[0x3B60];
        STACK[0x7D8] = STACK[0x3C78];
        STACK[0x7F8] = STACK[0x3C20];
        STACK[0x800] = v1316;
        return v1332(0x1BD1E5A80B860D97, 0xDE63DAE4FC78A846, v1333, 0x8EA56294FB27789DLL, 0x77BBC4BB7B718F6ELL, 0x21BAADC71E2E67AELL, 0x85D9DC5E933D8215, 39);
      case 0x31u:
        v3413 = STACK[0x3C08] + STACK[0x7A0] > 0xFFFFFFFFFFFFFFDELL;
        v3414 = STACK[0x3C08] + STACK[0x7A0];
        if (__CFADD__(STACK[0x3C08], STACK[0x7A0]))
          v3413 = 1;
        v2767 = !v3413;
        v3415 = 33;
        if (v2767)
          v3415 = 0;
        v3416 = v3415 + v3414;
        v3417 = STACK[0x1D80];
        v3418 = v3415 + v3414 + STACK[0x1D80] > 0xFFFFFFFFFFFFFFDELL;
        STACK[0x3C38] = v3416 + STACK[0x1D80];
        v3419 = __CFADD__(v3416, v3417) || v3418;
        LODWORD(STACK[0x3C30]) = v3419;
        v3420 = v1331 + STACK[0x788] > 0xFFFFFFFFFFFFFFF0;
        v3421 = v1331 + STACK[0x788];
        if (__CFADD__(v1331, STACK[0x788]))
          v3420 = 1;
        if (v3420)
          v3422 = 15;
        else
          v3422 = 0;
        v3423 = v3422 + v3421;
        v3424 = STACK[0x1D70];
        v3425 = v3422 + v3421 + STACK[0x1D70] > 0xFFFFFFFFFFFFFFF0;
        v3426 = v3423 + STACK[0x1D70];
        if (__CFADD__(v3423, STACK[0x1D70]))
          v3425 = 1;
        v3427 = STACK[0x3B60] + STACK[0x7D0];
        v3428 = __CFADD__(STACK[0x3B60], STACK[0x7D0]) || STACK[0x3B60] + STACK[0x7D0] > 0xFFFFFFFFFFFFFFEELL;
        v3429 = v1326 + STACK[0x798] > 0xFFFFFFFFFFFFFFF6;
        v3430 = v1326 + STACK[0x798];
        if (__CFADD__(v1326, STACK[0x798]))
          v3429 = 1;
        v3431 = v1321 + STACK[0x810];
        v3432 = __CFADD__(v1321, STACK[0x810]) || v1321 + STACK[0x810] > 0xFFFFFFFFFFFFFFFALL;
        v3433 = __CFADD__(v1313, STACK[0x7B8]) || v1313 + STACK[0x7B8] == -1;
        v3434 = v3433 + v1313 + STACK[0x7B8];
        v3435 = v1316 + STACK[0x800];
        v3436 = __CFADD__(v1316, STACK[0x800]);
        if (v3435 > 0xFFFFFFFFFFFFFFFCLL)
          v3436 = 1;
        v3437 = STACK[0x3C28] + STACK[0x790];
        v3438 = __CFADD__(STACK[0x3C28], STACK[0x790]);
        if (v3436)
          v3439 = 3;
        else
          v3439 = 0;
        v3440 = v3439 + v3435;
        v3441 = STACK[0x3C20] + STACK[0x7F8];
        v3442 = __CFADD__(STACK[0x3C20], STACK[0x7F8]);
        if (v3432)
          v3443 = 5;
        else
          v3443 = 0;
        v3444 = v3443 + v3431;
        v3445 = STACK[0x3B58] + STACK[0x7C0];
        v3446 = __CFADD__(STACK[0x3B58], STACK[0x7C0]);
        if (v3441 > 0xFFFFFFFFFFFFFFD8)
          v3442 = 1;
        if (v3437 > 0xFFFFFFFFFFFFFFD2)
          v3438 = 1;
        if (v3429)
          v3447 = 9;
        else
          v3447 = 0;
        v3448 = v3447 + v3430;
        v3449 = STACK[0x3C78] + STACK[0x7D8];
        v3450 = __CFADD__(STACK[0x3C78], STACK[0x7D8]);
        v3451 = v3445 > 0xFFFFFFFFFFFFFFD0 || v3446;
        v3452 = STACK[0x1DA8];
        STACK[0x3218] = (__PAIR128__(STACK[0x1DA8] - v3434, STACK[0x1DA8]) - v3434) >> 64;
        v3453 = 39;
        if (!v3442)
          v3453 = 0;
        v2767 = v3451 == 0;
        v3454 = v3453 + v3441;
        v3455 = 47;
        if (v2767)
          v3455 = 0;
        v3456 = v3455 + v3445;
        v3457 = STACK[0x1D78];
        v3458 = -5;
        if (STACK[0x1D78] >= v3444)
          v3458 = 0;
        STACK[0x1630] = v3458 + STACK[0x1D78] - v3444;
        if (v3428)
          v3459 = 17;
        else
          v3459 = 0;
        v3460 = v3459 + v3427;
        v3461 = STACK[0x1D88];
        v3462 = -3;
        if (STACK[0x1D88] >= v3440)
          v3462 = 0;
        STACK[0x1620] = v3462 + STACK[0x1D88] - v3440;
        v3463 = v3449 > 0xFFFFFFFFFFFFFFCALL || v3450;
        v3464 = STACK[0x1D58];
        if (STACK[0x1D58] >= v3448)
          v3465 = 0;
        else
          v3465 = -9;
        STACK[0x3350] = v3465 + STACK[0x1D58] - v3448;
        if (v3438)
          v3466 = 45;
        else
          v3466 = 0;
        v3467 = v3466 + v3437;
        if (v3463)
          v3468 = 53;
        else
          v3468 = 0;
        v3469 = v3468 + v3449;
        v334 = v3424 >= v3423;
        v3470 = v3424 - v3423;
        if (v334)
          v3471 = 0;
        else
          v3471 = -15;
        STACK[0x3210] = v3471 + v3470;
        v334 = v3417 >= v3416;
        v3472 = v3417 - v3416;
        if (v334)
          v3473 = 0;
        else
          v3473 = -33;
        STACK[0x1650] = v3473 + v3472;
        v3474 = v3444 + v3457;
        v3475 = __CFADD__(v3444, v3457);
        v3476 = STACK[0x1D60];
        if (STACK[0x1D60] >= v3454)
          v3477 = 0;
        else
          v3477 = -39;
        STACK[0x3248] = v3477 + STACK[0x1D60] - v3454;
        v3478 = v3448 + v3464;
        v3479 = __CFADD__(v3448, v3464);
        v3480 = STACK[0x1D98];
        if (STACK[0x1D98] >= v3460)
          v3481 = 0;
        else
          v3481 = -17;
        STACK[0x1640] = v3481 + STACK[0x1D98] - v3460;
        v334 = __CFADD__(v3440, v3461);
        v3482 = v3440 + v3461;
        v3483 = v334;
        v3484 = STACK[0x1DA0];
        v3485 = -53;
        if (STACK[0x1DA0] >= v3469)
          v3485 = 0;
        v3486 = v3485 + STACK[0x1DA0] - v3469;
        v334 = __CFADD__(v3460, v3480);
        v3487 = v3460 + v3480;
        v3488 = v334;
        v3489 = STACK[0x1D90];
        if (STACK[0x1D90] >= v3467)
          v3490 = 0;
        else
          v3490 = -45;
        v3491 = v3490 + STACK[0x1D90] - v3467;
        if (v3474 > 0xFFFFFFFFFFFFFFFALL)
          v3475 = 1;
        v334 = __CFADD__(v3434, v3452);
        v3492 = v3434 + v3452;
        LODWORD(v3493) = v334;
        if (v3482 > 0xFFFFFFFFFFFFFFFCLL)
          v3483 = 1;
        if (v3492 == -1)
          v3493 = 1;
        else
          v3493 = v3493;
        v3494 = v3493 + v3492;
        if (v3475)
          v3495 = 5;
        else
          v3495 = 0;
        v3496 = v3495 + v3474;
        v3497 = v3478 > 0xFFFFFFFFFFFFFFF6 || v3479;
        v3498 = STACK[0x1D68];
        if (STACK[0x1D68] >= v3456)
          v3499 = 0;
        else
          v3499 = -47;
        v3500 = v3499 + STACK[0x1D68] - v3456;
        if (v3483)
          v3501 = 3;
        else
          v3501 = 0;
        v3502 = v3501 + v3482;
        if (v3425)
          v3503 = 15;
        else
          v3503 = 0;
        v3504 = v3503 + v3426;
        v334 = __CFADD__(v3454, v3476);
        v3505 = v3454 + v3476;
        v3506 = v334;
        if (v3487 > 0xFFFFFFFFFFFFFFEELL)
          v3507 = 1;
        else
          v3507 = v3488;
        if (v3497)
          v3508 = 9;
        else
          v3508 = 0;
        v3509 = v3508 + v3478;
        v3510 = v3467 + v3489;
        v3511 = __CFADD__(v3467, v3489);
        if (v3507)
          v3512 = 17;
        else
          v3512 = 0;
        v3513 = v3512 + v3487;
        v3514 = v3456 + v3498;
        v3515 = __CFADD__(v3456, v3498);
        if (v3505 > 0xFFFFFFFFFFFFFFD8)
          v3506 = 1;
        v334 = __CFADD__(v3469, v3484);
        v3516 = v3469 + v3484;
        v3517 = v334;
        if (v3510 > 0xFFFFFFFFFFFFFFD2)
          v3511 = 1;
        if (v3514 > 0xFFFFFFFFFFFFFFD0)
          v3515 = 1;
        if (LODWORD(STACK[0x3C30]))
          v3518 = 33;
        else
          v3518 = 0;
        v3519 = v3518 + STACK[0x3C38];
        v3520 = 47;
        if (!v3515)
          v3520 = 0;
        v3521 = v3520 + v3514;
        if (v3516 > 0xFFFFFFFFFFFFFFCALL)
          v3522 = 1;
        else
          v3522 = v3517;
        v3523 = 39;
        if (!v3506)
          v3523 = 0;
        v3524 = v3523 + v3505;
        if (v3522)
          v3525 = 53;
        else
          v3525 = 0;
        v3526 = v3525 + v3516;
        if (v3511)
          v3527 = 45;
        else
          v3527 = 0;
        v3528 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9638)) - 12);
        STACK[0x3BB8] = STACK[0x2710];
        STACK[0x3828] = STACK[0x2708];
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        STACK[0x3C58] = STACK[0x2798];
        STACK[0x3BA0] = STACK[0x26F8];
        STACK[0x33C0] = STACK[0x3C50];
        STACK[0x36C0] = STACK[0x3A70];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x36B8] = STACK[0x3A78];
        STACK[0x3C50] = STACK[0x2770];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x33B8] = STACK[0x3C48];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x36B0] = STACK[0x3A80];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x3C40] = STACK[0x2780];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x36A8] = STACK[0x3A88];
        STACK[0x36A0] = STACK[0x39C0];
        STACK[0x3698] = STACK[0x3A90];
        STACK[0x3C48] = STACK[0x2788];
        STACK[0x3690] = STACK[0x3A98];
        LODWORD(STACK[0x3BD8]) = 50;
        STACK[0x3B70] = STACK[0x1640];
        STACK[0xA08] = v3500;
        STACK[0x3B68] = v3500;
        STACK[0x3378] = v3504;
        STACK[0xAB8] = v3504;
        STACK[0xC10] = v3527 + v3510;
        STACK[0x3238] = v3527 + v3510;
        STACK[0x8A8] = STACK[0x3210];
        STACK[0x8A0] = STACK[0x3350];
        STACK[0xC20] = v3494;
        STACK[0x3200] = v3494;
        STACK[0x3368] = v3524;
        STACK[0xAA0] = v3524;
        STACK[0xC50] = v3496;
        STACK[0x3358] = v3496;
        STACK[0x3230] = STACK[0x1650];
        STACK[0x858] = STACK[0x3218];
        STACK[0x3228] = STACK[0x1620];
        STACK[0xBE8] = v3526;
        STACK[0x3BC0] = v3526;
        STACK[0x3250] = STACK[0x1630];
        STACK[0x9C8] = v3491;
        STACK[0x3220] = v3491;
        STACK[0x3BC8] = v3519;
        STACK[0xA68] = v3519;
        STACK[0x3370] = v3502;
        STACK[0xA60] = v3502;
        STACK[0x3208] = v3509;
        STACK[0xA58] = v3509;
        STACK[0x3B78] = v3486;
        STACK[0x838] = v3486;
        STACK[0x3BD0] = v3513;
        STACK[0xA48] = v3513;
        STACK[0xC00] = v3521;
        STACK[0x3AC8] = v3521;
        STACK[0x8F8] = STACK[0x3248];
        return v3528();
      case 0x34u:
        v3529 = STACK[0xA10];
        v3530 = STACK[0x1CA0];
        v3531 = STACK[0x1CA0] + STACK[0xA10] > 0xFFFFFFFFFFFFFFCALL;
        STACK[0x3BF8] = STACK[0x1CA0] + STACK[0xA10];
        v3532 = __CFADD__(v3530, v3529) || v3531;
        STACK[0x3BD0] = v1316;
        v3533 = STACK[0xC78];
        v3534 = STACK[0xC78] + STACK[0x9F8];
        v3535 = __CFADD__(STACK[0xC78], STACK[0x9F8]) || STACK[0xC78] + STACK[0x9F8] > 0xFFFFFFFFFFFFFFD0;
        v3536 = STACK[0x988];
        v3537 = STACK[0xAD8];
        v3538 = STACK[0xAD8] + STACK[0x988] > 0xFFFFFFFFFFFFFFD8;
        STACK[0x3C30] = STACK[0xAD8] + STACK[0x988];
        v3539 = __CFADD__(v3537, v3536) || v3538;
        v3540 = STACK[0xB40];
        v3541 = STACK[0xB40] + STACK[0x970] > 0xFFFFFFFFFFFFFFD2;
        v3542 = STACK[0xB40] + STACK[0x970];
        if (__CFADD__(STACK[0xB40], STACK[0x970]))
          v3541 = 1;
        v3543 = STACK[0xA30];
        v3544 = STACK[0xB60];
        v3545 = STACK[0xB60] + STACK[0xA30];
        STACK[0x3BC8] = v1313;
        v3546 = STACK[0xA28];
        v3547 = STACK[0xBB8];
        v3548 = (STACK[0xBB8] ^ STACK[0xA28]) + 2 * (STACK[0xBB8] & STACK[0xA28]);
        v3549 = v3545 > 0xFFFFFFFFFFFFFFDELL;
        v334 = __CFADD__(v3544, v3543);
        v3550 = v3544 + v3543;
        STACK[0x3BF0] = v1331;
        v3551 = v334 || v3549;
        v3552 = STACK[0x1668] + STACK[0x9A0];
        v3553 = __CFADD__(STACK[0x1668], STACK[0x9A0]);
        v3554 = STACK[0xBD8];
        v3555 = STACK[0xBD8] + STACK[0xA18];
        LODWORD(v3556) = __CFADD__(STACK[0xBD8], STACK[0xA18]);
        v3557 = STACK[0xB08];
        v334 = __CFADD__(STACK[0xB08], STACK[0x998]);
        v3558 = STACK[0xB08] + STACK[0x998];
        STACK[0x3C00] = v1326;
        v3559 = v334;
        if (v3555 == -1)
          v3556 = 1;
        else
          v3556 = v3556;
        STACK[0x1760] = v3556 + v3555;
        v3560 = STACK[0xB68];
        v334 = __CFADD__(STACK[0xB68], STACK[0x9B8]);
        v3561 = STACK[0xB68] + STACK[0x9B8];
        STACK[0x3C38] = v1321;
        v3562 = v334;
        if (v3548 < v3546 || v3548 > 0xFFFFFFFFFFFFFFFCLL)
          v3564 = 3;
        else
          v3564 = 0;
        v3565 = STACK[0xB98];
        v3566 = STACK[0xB98] + STACK[0x978];
        v3567 = __CFADD__(STACK[0xB98], STACK[0x978]);
        if (v3558 > 0xFFFFFFFFFFFFFFFALL)
          v3559 = 1;
        STACK[0x1718] = v3564 + v3548;
        if (v3559)
          v3568 = 5;
        else
          v3568 = 0;
        STACK[0x16F0] = v3568 + v3558;
        v3569 = v3552 > 0xFFFFFFFFFFFFFFEELL || v3553;
        v3570 = v3566 > 0xFFFFFFFFFFFFFFF0 || v3567;
        v3571 = STACK[0x22E8] - v3554;
        v3572 = STACK[0x22E8] < v3554;
        if (v3561 > 0xFFFFFFFFFFFFFFF6)
          v3562 = 1;
        v2767 = v3569 == 0;
        v3573 = 17;
        if (v2767)
          v3573 = 0;
        STACK[0x1768] = v3573 + v3552;
        v3574 = 15;
        if (!v3570)
          v3574 = 0;
        v2767 = v3551 == 0;
        v3575 = 33;
        if (v2767)
          v3575 = 0;
        STACK[0x1740] = v3575 + v3550;
        if (v3562)
          v3576 = 9;
        else
          v3576 = 0;
        STACK[0x1708] = v3576 + v3561;
        v2767 = !v3535;
        v3577 = 47;
        if (v2767)
          v3577 = 0;
        v2767 = !v3541;
        v3578 = 45;
        if (v2767)
          v3578 = 0;
        v2767 = v3532 == 0;
        STACK[0x32F8] = v3571 - v3572;
        v3579 = 53;
        STACK[0x3270] = 53;
        if (v2767)
          v3579 = 0;
        v3580 = STACK[0x2330] - v3547;
        v3581 = -3;
        if (STACK[0x2330] >= v3547)
          v3581 = 0;
        v3582 = STACK[0x22F0] - v3557;
        v3583 = -5;
        if (STACK[0x22F0] >= v3557)
          v3583 = 0;
        STACK[0x16E8] = v3574 + v3566;
        STACK[0x1700] = v3577 + v3534;
        STACK[0x1748] = v3578 + v3542;
        STACK[0x1750] = v3579 + STACK[0x3BF8];
        STACK[0x32F0] = v3580 + v3581;
        STACK[0x3128] = v3582 + v3583;
        v3584 = 39;
        if (!v3539)
          v3584 = 0;
        STACK[0x1778] = v3584 + STACK[0x3C30];
        v3585 = -9;
        if (STACK[0x2310] >= v3560)
          v3585 = 0;
        STACK[0x3280] = STACK[0x2310] - v3560 + v3585;
        v3586 = STACK[0x2318] - v3565;
        v3587 = -15;
        if (STACK[0x2318] >= v3565)
          v3587 = 0;
        v3588 = -45;
        if (STACK[0x22E0] >= v3540)
          v3588 = 0;
        STACK[0x3348] = STACK[0x22E0] - v3540 + v3588;
        v3589 = -17;
        if (STACK[0x2308] >= STACK[0x1668])
          v3589 = 0;
        STACK[0x32E0] = STACK[0x2308] - STACK[0x1668] + v3589;
        STACK[0x3318] = v3586 + v3587;
        v3590 = STACK[0x2328] - v3533;
        v3591 = -47;
        if (STACK[0x2328] >= v3533)
          v3591 = 0;
        v3592 = -53;
        if (STACK[0x2300] >= STACK[0x1CA0])
          v3592 = 0;
        STACK[0x3340] = STACK[0x2300] - STACK[0x1CA0] + v3592;
        STACK[0x3338] = v3590 + v3591;
        v3593 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523)) - 8);
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        STACK[0xBF8] = STACK[0x3C08];
        STACK[0xBF0] = STACK[0x3BF0];
        STACK[0xBE0] = STACK[0x3B58];
        STACK[0xBD0] = STACK[0x3BC8];
        STACK[0xBC0] = STACK[0x3C20];
        STACK[0xBA0] = STACK[0x3B60];
        STACK[0x33C0] = STACK[0x3C50];
        v3594 = STACK[0x27F0];
        STACK[0xB80] = STACK[0x3C78];
        STACK[0xB70] = STACK[0x3C00];
        STACK[0x36C0] = STACK[0x3A70];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0x36B8] = STACK[0x3A78];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x33B8] = STACK[0x3C48];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x36B0] = STACK[0x3A80];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0xA98] = STACK[0x3BD0];
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0xA80] = STACK[0x3C38];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0x36A8] = STACK[0x3A88];
        STACK[0x36A0] = STACK[0x39C0];
        STACK[0x3698] = STACK[0x3A90];
        STACK[0xA40] = STACK[0x3C28];
        STACK[0x3690] = STACK[0x3A98];
        STACK[0x3310] = 0x661C765BF4208041;
        STACK[0x32E8] = 0x5B8FBBD5E48BD14FLL;
        STACK[0x3330] = 0xA299ED451E059C13;
        STACK[0x3288] = 0x32E284E124F24A81;
        STACK[0x3328] = 0x97B89D4EA264A1B3;
        STACK[0x3268] = 0xD4A6F4CF55C46B4CLL;
        STACK[0x3260] = 0x87E85B6E5A109AFALL;
        STACK[0x3278] = 0x34B9D46858BE76EBLL;
        STACK[0x3258] = 0xDDB22C380449E0BALL;
        STACK[0x3320] = 0x6EBA58B5908087BFLL;
        return v3593(v3594);
      case 0x3Eu:
        STACK[0x3C00] = 63;
        a1 = STACK[0x29E8];
        STACK[0x2A90] = STACK[0x3B60];
        v19 = STACK[0x29A0];
        STACK[0x3C38] = STACK[0x29C0];
        STACK[0x2A88] = STACK[0x3C78];
        v20 = STACK[0x2960];
        STACK[0x3BB0] = STACK[0x2970];
        v23 = STACK[0x2968];
        STACK[0x2A80] = STACK[0x3C28];
        v18 = STACK[0x29F8];
        STACK[0x3BF8] = STACK[0x29D0];
        v11 = STACK[0x29F0];
        v29 = STACK[0x29B0];
        STACK[0x2A78] = STACK[0x3C20];
        v28 = STACK[0x2998];
        a6 = STACK[0x2A08];
        STACK[0x2A70] = v1316;
        STACK[0x2A68] = v1326;
        v12 = STACK[0x2980];
        STACK[0x3BE8] = STACK[0x2A00];
        STACK[0x3BF0] = STACK[0x2990];
        a3 = STACK[0x2988];
        STACK[0x2A60] = STACK[0x3B58];
        STACK[0x3C78] = STACK[0x2978];
        STACK[0x2A58] = v1313;
        a7 = STACK[0x29B8];
        STACK[0x3BE0] = STACK[0x29A8];
        STACK[0x2A50] = v1321;
        STACK[0x2AA0] = STACK[0x3C08];
        STACK[0x2A98] = v1331;
        v16 = STACK[0x29D8];
        v30 = STACK[0x29C8];
        STACK[0x3C30] = STACK[0x29E0];
        a8 = 39;
        v21 = 17;
        v25 = 47;
        v17 = 45;
        v26 = 33;
        continue;
      case 0x3Fu:
        v3595 = STACK[0x2238] + STACK[0x1C40] > 0xFFFFFFFFFFFFFFCALL;
        v3596 = STACK[0x2238] + STACK[0x1C40];
        if (__CFADD__(STACK[0x2238], STACK[0x1C40]))
          v3595 = 1;
        v3597 = STACK[0x1C18] + STACK[0x2280] > 0xFFFFFFFFFFFFFFD0;
        v3598 = STACK[0x1C18] + STACK[0x2280];
        if (__CFADD__(STACK[0x1C18], STACK[0x2280]))
          v3597 = 1;
        v3599 = STACK[0x1C08] + STACK[0x2258] > 0xFFFFFFFFFFFFFFD2;
        v3600 = STACK[0x1C08] + STACK[0x2258];
        if (__CFADD__(STACK[0x1C08], STACK[0x2258]))
          v3599 = 1;
        v3601 = STACK[0x1BF8] + STACK[0x2260] > 0xFFFFFFFFFFFFFFF0;
        v3602 = STACK[0x1BF8] + STACK[0x2260];
        if (__CFADD__(STACK[0x1BF8], STACK[0x2260]))
          v3601 = 1;
        v3603 = __CFADD__(STACK[0x1BF0], STACK[0x2270]) || STACK[0x1BF0] + STACK[0x2270] == -1;
        STACK[0x3200] = v3603 + STACK[0x1BF0] + STACK[0x2270];
        v3604 = STACK[0x1C48];
        STACK[0x3BF0] = v1331;
        v3605 = STACK[0x21D8] + v3604 > 0xFFFFFFFFFFFFFFD0;
        v3606 = STACK[0x21D8] + v3604;
        if (__CFADD__(STACK[0x21D8], v3604))
          v3605 = 1;
        v3607 = STACK[0x21F0] + STACK[0x1C10];
        v3608 = __CFADD__(STACK[0x21F0], STACK[0x1C10]) || STACK[0x21F0] + STACK[0x1C10] > 0xFFFFFFFFFFFFFFD8;
        v3609 = STACK[0x1C20] + STACK[0x21F8] > 0xFFFFFFFFFFFFFFDELL;
        v3610 = STACK[0x1C20] + STACK[0x21F8];
        if (__CFADD__(STACK[0x1C20], STACK[0x21F8]))
          v3609 = 1;
        v3611 = STACK[0x1C88];
        STACK[0x3C00] = v1326;
        v3612 = STACK[0x2208] + v3611 > 0xFFFFFFFFFFFFFFEELL;
        v334 = __CFADD__(STACK[0x2208], v3611);
        v3613 = STACK[0x2208] + v3611;
        if (v334)
          v3612 = 1;
        STACK[0x3C38] = v1321;
        v3614 = v1313;
        v3615 = STACK[0x1BE0] + STACK[0x2240] > 0xFFFFFFFFFFFFFFF0;
        v3616 = STACK[0x1BE0] + STACK[0x2240];
        if (__CFADD__(STACK[0x1BE0], STACK[0x2240]))
          v3615 = 1;
        v3617 = __CFADD__(STACK[0x2218], STACK[0x1C78]) || STACK[0x2218] + STACK[0x1C78] == -1;
        STACK[0x3218] = v3617 + STACK[0x2218] + STACK[0x1C78];
        v3618 = STACK[0x1C00] + STACK[0x2230] > 0xFFFFFFFFFFFFFFFCLL;
        if (__CFADD__(STACK[0x1C00], STACK[0x2230]))
          v3618 = 1;
        v3619 = STACK[0x2250] + STACK[0x1C60];
        v3620 = __CFADD__(STACK[0x2250], STACK[0x1C60]);
        if (v3619 > 0xFFFFFFFFFFFFFFFALL)
          v3620 = 1;
        v3621 = STACK[0x1C38] + STACK[0x2210];
        v3622 = __CFADD__(STACK[0x1C38], STACK[0x2210]);
        if (v3621 > 0xFFFFFFFFFFFFFFF6)
          v3622 = 1;
        if (v3618)
          v3623 = 3;
        else
          v3623 = 0;
        STACK[0x3228] = v3623 + STACK[0x1C00] + STACK[0x2230];
        if (v3620)
          v3624 = 5;
        else
          v3624 = 0;
        STACK[0x3250] = v3624 + v3619;
        if (v3622)
          v3625 = 9;
        else
          v3625 = 0;
        STACK[0x3350] = v3625 + v3621;
        if (v3612)
          v3626 = 17;
        else
          v3626 = 0;
        STACK[0x3B70] = v3626 + v3613;
        if (v3615)
          v3627 = 15;
        else
          v3627 = 0;
        STACK[0x3210] = v3627 + v3616;
        v3628 = STACK[0x1C58] + STACK[0x2248];
        v3629 = __CFADD__(STACK[0x1C58], STACK[0x2248]);
        v3630 = STACK[0x1C50] + STACK[0x2268];
        v3631 = __CFADD__(STACK[0x1C50], STACK[0x2268]);
        if (v3608)
          v3632 = 39;
        else
          v3632 = 0;
        STACK[0x3248] = v3632 + v3607;
        v3633 = STACK[0x21E8] + STACK[0x1BE8];
        v3634 = __CFADD__(STACK[0x21E8], STACK[0x1BE8]);
        if (v3633 > 0xFFFFFFFFFFFFFFD2)
          v3634 = 1;
        if (v3609)
          v3635 = 33;
        else
          v3635 = 0;
        STACK[0x3230] = v3635 + v3610;
        if (v3634)
          v3636 = 45;
        else
          v3636 = 0;
        STACK[0x3220] = v3636 + v3633;
        if (v3605)
          v3637 = 47;
        else
          v3637 = 0;
        STACK[0x3B68] = v3637 + v3606;
        v3638 = v3628 > 0xFFFFFFFFFFFFFFCALL || v3629;
        v3639 = STACK[0x2200] + STACK[0x1C80];
        v3640 = __CFADD__(STACK[0x2200], STACK[0x1C80]);
        if (v3638)
          v3641 = 53;
        else
          v3641 = 0;
        STACK[0x3B78] = v3641 + v3628;
        v3642 = STACK[0x1C28] + STACK[0x21E0];
        v3643 = __CFADD__(STACK[0x1C28], STACK[0x21E0]);
        v3644 = STACK[0x2278] + STACK[0x1C68];
        v3645 = __CFADD__(STACK[0x2278], STACK[0x1C68]);
        if (v3642 > 0xFFFFFFFFFFFFFFFALL)
          v3643 = 1;
        v3646 = v3630 > 0xFFFFFFFFFFFFFFF6 || v3631;
        if (v3639 > 0xFFFFFFFFFFFFFFFCLL)
          v3640 = 1;
        if (v3640)
          v3647 = 3;
        else
          v3647 = 0;
        STACK[0x3370] = v3647 + v3639;
        if (v3644 > 0xFFFFFFFFFFFFFFEELL || v3645)
          v3649 = 17;
        else
          v3649 = 0;
        STACK[0x3BD0] = v3649 + v3644;
        if (v3643)
          v3650 = 5;
        else
          v3650 = 0;
        STACK[0x3358] = v3650 + v3642;
        v3651 = STACK[0x2220] + STACK[0x1C30];
        v3652 = __CFADD__(STACK[0x2220], STACK[0x1C30]);
        if (v3601)
          v3653 = 15;
        else
          v3653 = 0;
        STACK[0x3378] = v3653 + v3602;
        v3654 = STACK[0x2228] + STACK[0x1C70];
        v3655 = __CFADD__(STACK[0x2228], STACK[0x1C70]);
        if (v3646)
          v3656 = 9;
        else
          v3656 = 0;
        STACK[0x3208] = v3656 + v3630;
        if (v3654 > 0xFFFFFFFFFFFFFFDELL)
          v3655 = 1;
        if (v3655)
          v3657 = 33;
        else
          v3657 = 0;
        STACK[0x3BC8] = v3657 + v3654;
        if (v3651 > 0xFFFFFFFFFFFFFFD8 || v3652)
          v3659 = 39;
        else
          v3659 = 0;
        STACK[0x3368] = v3659 + v3651;
        if (v3599)
          v3660 = 45;
        else
          v3660 = 0;
        STACK[0x3238] = v3660 + v3600;
        if (v3597)
          v3661 = 47;
        else
          v3661 = 0;
        STACK[0x3AC8] = v3661 + v3598;
        if (v3595)
          v3662 = 53;
        else
          v3662 = 0;
        STACK[0x3BC0] = v3662 + v3596;
        v3663 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9638)) - 12);
        STACK[0x3BB8] = STACK[0x2710];
        STACK[0x2630] = v3614;
        STACK[0x3828] = STACK[0x2708];
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        STACK[0x3C58] = STACK[0x2798];
        STACK[0x2628] = STACK[0x3B60];
        STACK[0x3BA0] = STACK[0x26F8];
        STACK[0x33C0] = STACK[0x3C50];
        STACK[0x2620] = STACK[0x3BF0];
        STACK[0x36C0] = STACK[0x3A70];
        STACK[0x2618] = STACK[0x3C28];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x2610] = STACK[0x3C38];
        STACK[0x36B8] = STACK[0x3A78];
        STACK[0x3C50] = STACK[0x2770];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x2608] = STACK[0x3B58];
        STACK[0x2600] = STACK[0x3C08];
        STACK[0x33B8] = STACK[0x3C48];
        STACK[0x25F0] = STACK[0x3C78];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x36B0] = STACK[0x3A80];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x3C40] = STACK[0x2780];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x36A8] = STACK[0x3A88];
        STACK[0x25E8] = STACK[0x3C20];
        STACK[0x36A0] = STACK[0x39C0];
        STACK[0x25E0] = v1316;
        STACK[0x3698] = STACK[0x3A90];
        STACK[0x3C48] = STACK[0x2788];
        STACK[0x25F8] = STACK[0x3C00];
        STACK[0x3690] = STACK[0x3A98];
        LODWORD(STACK[0x3BD8]) = 64;
        return v3663();
      case 0x44u:
        v3664 = STACK[0x3C28] + STACK[0x3138];
        v3665 = __CFADD__(STACK[0x3C28], STACK[0x3138]);
        if (v3664 > 0xFFFFFFFFFFFFFFD2)
          v3665 = 1;
        v2767 = !v3665;
        v3666 = 45;
        if (v2767)
          v3666 = 0;
        v3667 = v3666 + v3664;
        v3668 = STACK[0x2A80];
        v3669 = v3666 + v3664 + STACK[0x2A80] > 0xFFFFFFFFFFFFFFD2;
        STACK[0x3C38] = v3667 + STACK[0x2A80];
        v3670 = __CFADD__(v3667, v3668) || v3669;
        LODWORD(STACK[0x3C30]) = v3670;
        v3671 = STACK[0x3B58] + STACK[0x3170];
        v3672 = __CFADD__(STACK[0x3B58], STACK[0x3170]);
        if (v3671 > 0xFFFFFFFFFFFFFFD0)
          v3672 = 1;
        if (v3672)
          v3673 = 47;
        else
          v3673 = 0;
        v3674 = v3673 + v3671;
        v3675 = STACK[0x2A60];
        v3676 = v3673 + v3671 + STACK[0x2A60] > 0xFFFFFFFFFFFFFFD0;
        STACK[0x3C28] = v3674 + STACK[0x2A60];
        v3677 = __CFADD__(v3674, v3675) || v3676;
        LODWORD(STACK[0x3C00]) = v3677;
        v3678 = STACK[0x3C08] + STACK[0x3198] > 0xFFFFFFFFFFFFFFDELL;
        v3679 = STACK[0x3C08] + STACK[0x3198];
        if (__CFADD__(STACK[0x3C08], STACK[0x3198]))
          v3678 = 1;
        if (v3678)
          v3680 = 33;
        else
          v3680 = 0;
        v3681 = v3680 + v3679;
        v3682 = STACK[0x2AA0];
        v3683 = v3680 + v3679 + STACK[0x2AA0] > 0xFFFFFFFFFFFFFFDELL;
        STACK[0x3C08] = v3681 + STACK[0x2AA0];
        v3684 = __CFADD__(v3681, v3682) || v3683;
        LODWORD(STACK[0x3BF8]) = v3684;
        v3685 = STACK[0x3B60] + STACK[0x3150] > 0xFFFFFFFFFFFFFFEELL;
        v3686 = STACK[0x3B60] + STACK[0x3150];
        if (__CFADD__(STACK[0x3B60], STACK[0x3150]))
          v3685 = 1;
        if (v3685)
          v3687 = 17;
        else
          v3687 = 0;
        v3688 = v3687 + v3686;
        v3689 = STACK[0x2A90];
        v3690 = v3687 + v3686 + STACK[0x2A90] > 0xFFFFFFFFFFFFFFEELL;
        v3691 = v3688 + STACK[0x2A90];
        if (__CFADD__(v3688, STACK[0x2A90]))
          v3690 = 1;
        v3692 = v1331 + STACK[0x3130] > 0xFFFFFFFFFFFFFFF0;
        v334 = __CFADD__(v1331, STACK[0x3130]);
        v3693 = v1331 + STACK[0x3130];
        if (v334)
          v3692 = 1;
        if (v3692)
          v3694 = 15;
        else
          v3694 = 0;
        v3695 = v1313;
        v3696 = v3694 + v3693;
        v3697 = STACK[0x2A98];
        v3698 = v3694 + v3693 + STACK[0x2A98] > 0xFFFFFFFFFFFFFFF0;
        v3699 = v3696 + STACK[0x2A98];
        if (__CFADD__(v3696, STACK[0x2A98]))
          v3698 = 1;
        v3700 = v1326 + STACK[0x3148] > 0xFFFFFFFFFFFFFFF6;
        v3701 = v1326 + STACK[0x3148];
        if (__CFADD__(v1326, STACK[0x3148]))
          v3700 = 1;
        if (v3700)
          v3702 = 9;
        else
          v3702 = 0;
        v3703 = v3702 + v3701;
        v3704 = STACK[0x2A68];
        v3705 = v3702 + v3701 + STACK[0x2A68] > 0xFFFFFFFFFFFFFFF6;
        v3706 = v3703 + STACK[0x2A68];
        if (__CFADD__(v3703, STACK[0x2A68]))
          v3705 = 1;
        v3707 = v3695 + STACK[0x3190];
        v3708 = v1321;
        LODWORD(v3709) = __CFADD__(v3695, STACK[0x3190]);
        if (v3707 == -1)
          v3709 = 1;
        else
          v3709 = v3709;
        v3710 = v3709 + v3707;
        v3711 = STACK[0x2A58];
        v3712 = __CFADD__(v3710, STACK[0x2A58]) || v3710 + STACK[0x2A58] == -1;
        STACK[0x3178] = v3712 + v3710 + v3711;
        v3713 = STACK[0x3C20] + STACK[0x31A0] > 0xFFFFFFFFFFFFFFD8;
        if (__CFADD__(STACK[0x3C20], STACK[0x31A0]))
          v3713 = 1;
        v3714 = v1316 + STACK[0x3188] > 0xFFFFFFFFFFFFFFFCLL;
        if (__CFADD__(v1316, STACK[0x3188]))
          v3714 = 1;
        v334 = __CFADD__(v3708, STACK[0x3140]);
        v3715 = v3708 + STACK[0x3140];
        v3716 = v334;
        if (v3715 > 0xFFFFFFFFFFFFFFFALL)
          v3716 = 1;
        if (v3716)
          v3717 = 5;
        else
          v3717 = 0;
        v2767 = !v3714;
        v3718 = v3717 + v3715;
        if (v2767)
          v3719 = 0;
        else
          v3719 = 3;
        v3720 = v3719 + v1316 + STACK[0x3188];
        v3721 = STACK[0x3C78] + STACK[0x3180];
        v3722 = __CFADD__(STACK[0x3C78], STACK[0x3180]);
        if (v3713)
          v3723 = 39;
        else
          v3723 = 0;
        v3724 = v3723 + STACK[0x3C20] + STACK[0x31A0];
        v3725 = v3721 > 0xFFFFFFFFFFFFFFCALL || v3722;
        v334 = v3711 >= v3710;
        v3726 = v3711 - v3710;
        v3727 = !v334;
        STACK[0x1608] = v3726 - v3727;
        if (v3725)
          v3728 = 53;
        else
          v3728 = 0;
        v3729 = v3728 + v3721;
        v3730 = STACK[0x2A50];
        v3731 = -5;
        if (STACK[0x2A50] >= v3718)
          v3731 = 0;
        STACK[0x3290] = v3731 + STACK[0x2A50] - v3718;
        v334 = v3704 >= v3703;
        v3732 = v3704 - v3703;
        if (v334)
          v3733 = 0;
        else
          v3733 = -9;
        STACK[0x3120] = v3733 + v3732;
        v3734 = v3718 + v3730;
        v3735 = __CFADD__(v3718, v3730);
        v3736 = STACK[0x2A70];
        if (STACK[0x2A70] >= v3720)
          v3737 = 0;
        else
          v3737 = -3;
        STACK[0x1618] = v3737 + STACK[0x2A70] - v3720;
        v334 = v3697 >= v3696;
        v3738 = v3697 - v3696;
        if (v334)
          v3739 = 0;
        else
          v3739 = -15;
        v3740 = v3739 + v3738;
        v3741 = STACK[0x2A78];
        if (STACK[0x2A78] >= v3724)
          v3742 = 0;
        else
          v3742 = -39;
        STACK[0x1638] = v3742 + STACK[0x2A78] - v3724;
        v334 = v3689 >= v3688;
        v3743 = v3689 - v3688;
        if (v334)
          v3744 = 0;
        else
          v3744 = -17;
        v3745 = v3744 + v3743;
        v334 = v3675 >= v3674;
        v3746 = v3675 - v3674;
        if (v334)
          v3747 = 0;
        else
          v3747 = -47;
        v3748 = v3747 + v3746;
        v3749 = v3720 + v3736;
        v3750 = __CFADD__(v3720, v3736);
        v334 = v3682 >= v3681;
        v3751 = v3682 - v3681;
        if (v334)
          v3752 = 0;
        else
          v3752 = -33;
        v3753 = v3752 + v3751;
        if (v3668 >= v3667)
          v3754 = 0;
        else
          v3754 = -45;
        v3755 = v3754 + v3668 - v3667;
        v3756 = STACK[0x2A88];
        if (STACK[0x2A88] >= v3729)
          v3757 = 0;
        else
          v3757 = -53;
        v3758 = v3757 + STACK[0x2A88] - v3729;
        v3759 = v3734 > 0xFFFFFFFFFFFFFFFALL || v3735;
        if (v3749 > 0xFFFFFFFFFFFFFFFCLL || v3750)
          v3761 = 3;
        else
          v3761 = 0;
        v3762 = v3761 + v3749;
        if (v3759)
          v3763 = 5;
        else
          v3763 = 0;
        v3764 = v3763 + v3734;
        if (v3705)
          v3765 = 9;
        else
          v3765 = 0;
        v3766 = v3765 + v3706;
        if (v3698)
          v3767 = 15;
        else
          v3767 = 0;
        v3768 = v3767 + v3699;
        v3769 = v3724 + v3741;
        v3770 = __CFADD__(v3724, v3741);
        if (v3690)
          v3771 = 17;
        else
          v3771 = 0;
        v3772 = v3771 + v3691;
        v3773 = v3769 > 0xFFFFFFFFFFFFFFD8 || v3770;
        if (LODWORD(STACK[0x3BF8]))
          v3774 = 33;
        else
          v3774 = 0;
        v3775 = v3774 + STACK[0x3C08];
        v3776 = v3729 + v3756;
        v3777 = __CFADD__(v3729, v3756);
        if (LODWORD(STACK[0x3C00]))
          v3778 = 47;
        else
          v3778 = 0;
        v2767 = v3773 == 0;
        v3779 = v3778 + STACK[0x3C28];
        if (v2767)
          v3780 = 0;
        else
          v3780 = 39;
        v3781 = v3780 + v3769;
        if (LODWORD(STACK[0x3C30]))
          v3782 = 45;
        else
          v3782 = 0;
        v3783 = v3782 + STACK[0x3C38];
        if (v3776 > 0xFFFFFFFFFFFFFFCALL || v3777)
          v3785 = 53;
        else
          v3785 = 0;
        v3786 = v3785 + v3776;
        v3787 = STACK[0x3710];
        v3788 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 10112));
        STACK[0x36C8] = STACK[0x28D8];
        STACK[0x3810] = STACK[0x28E0];
        STACK[0x3688] = STACK[0x39E0];
        STACK[0x2FE8] = STACK[0x2800];
        STACK[0x2FE0] = STACK[0x2808];
        STACK[0x37F8] = STACK[0x28E8];
        STACK[0x2FC8] = STACK[0x2810];
        STACK[0x2FD8] = STACK[0x28B0];
        STACK[0x2FF0] = STACK[0x2AE0];
        STACK[0x2FC0] = STACK[0x2AA8];
        STACK[0x2FB0] = STACK[0x28F0];
        STACK[0x3808] = STACK[0x2A10];
        STACK[0x2FA8] = STACK[0x28B8];
        STACK[0x2FA0] = STACK[0x2910];
        STACK[0x2FB8] = STACK[0x2AE8];
        STACK[0x2FD0] = STACK[0x28F8];
        STACK[0x3680] = STACK[0x39E8];
        STACK[0x2F90] = STACK[0x2918];
        STACK[0x3668] = STACK[0x39D8];
        STACK[0x37F0] = STACK[0x2AF0];
        STACK[0x2F88] = STACK[0x2818];
        STACK[0x3678] = STACK[0x39F8];
        STACK[0x3670] = STACK[0x3860];
        STACK[0x2F78] = STACK[0x2820];
        STACK[0x2F98] = STACK[0x2A18];
        STACK[0x2F80] = STACK[0x2920];
        STACK[0x3660] = STACK[0x3838];
        STACK[0x2F70] = STACK[0x2828];
        STACK[0x2F68] = STACK[0x2900];
        STACK[0x30E0] = STACK[0x2A20];
        STACK[0x3658] = STACK[0x39D0];
        STACK[0x3650] = STACK[0x3840];
        STACK[0x2F50] = STACK[0x2928];
        STACK[0x2F48] = STACK[0x2930];
        STACK[0x2F40] = STACK[0x28C0];
        STACK[0x2F38] = STACK[0x2830];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x3640] = STACK[0x39C8];
        STACK[0x3648] = STACK[0x3BA8];
        STACK[0x3638] = STACK[0x3848];
        STACK[0x3630] = STACK[0x3A00];
        STACK[0x2F58] = STACK[0x2A28];
        STACK[0x3628] = STACK[0x3A10];
        STACK[0x3618] = STACK[0x3868];
        STACK[0x3610] = STACK[0x39F0];
        STACK[0x3620] = STACK[0x3850];
        STACK[0x2F30] = STACK[0x2AB0];
        STACK[0x3608] = STACK[0x3858];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x3600] = STACK[0x3870];
        STACK[0x2F28] = STACK[0x2838];
        STACK[0x35F8] = STACK[0x3A08];
        STACK[0x2F20] = STACK[0x2840];
        STACK[0x3C60] = STACK[0x2938];
        STACK[0x37E8] = STACK[0x2AF8];
        STACK[0x30D0] = STACK[0x2A30];
        STACK[0x2F10] = STACK[0x2AB8];
        STACK[0x2F08] = STACK[0x2848];
        STACK[0x2F18] = STACK[0x2850];
        STACK[0x35F0] = STACK[0x3AD0];
        STACK[0x2F00] = STACK[0x2AC0];
        STACK[0x2EF8] = STACK[0x2858];
        STACK[0x35E8] = STACK[0x3AD8];
        STACK[0x35E0] = STACK[0x3AE0];
        STACK[0x35D8] = STACK[0x3AE8];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x2EE8] = STACK[0x2860];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x2EF0] = STACK[0x2868];
        STACK[0x2ED8] = STACK[0x2940];
        STACK[0x2EE0] = STACK[0x2AC8];
        STACK[0x35D0] = STACK[0x3AF0];
        STACK[0x2ED0] = STACK[0x2A38];
        STACK[0x2EC0] = STACK[0x2870];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x2EB8] = STACK[0x2878];
        STACK[0x2EC8] = STACK[0x2908];
        STACK[0x2EB0] = STACK[0x28C8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x2EA8] = STACK[0x2948];
        STACK[0x2EA0] = STACK[0x2880];
        STACK[0x2E98] = STACK[0x2B00];
        STACK[0x35C8] = STACK[0x3AF8];
        STACK[0x35C0] = STACK[0x3B08];
        STACK[0x35B8] = STACK[0x3B00];
        STACK[0x30E8] = STACK[0x2B08];
        STACK[0x35B0] = STACK[0x3B10];
        STACK[0x35A8] = STACK[0x3B18];
        LODWORD(STACK[0x2F64]) = STACK[0x27FC];
        STACK[0x2E90] = STACK[0x28D0];
        STACK[0x35A0] = STACK[0x3B20];
        STACK[0x30D8] = STACK[0x2A40];
        STACK[0x2E88] = STACK[0x2AD0];
        STACK[0x2E78] = STACK[0x2888];
        STACK[0x3C68] = STACK[0x2950];
        STACK[0x3598] = STACK[0x3B30];
        STACK[0x2E70] = STACK[0x2890];
        STACK[0x2E68] = STACK[0x2898];
        STACK[0x3588] = STACK[0x3B28];
        STACK[0x3818] = STACK[0x2A48];
        STACK[0x2E60] = STACK[0x2AD8];
        STACK[0x2E58] = STACK[0x28A0];
        STACK[0x2E80] = STACK[0x2B10];
        STACK[0x2E50] = STACK[0x2958];
        STACK[0x3580] = STACK[0x3B38];
        STACK[0x2E48] = STACK[0x28A8];
        LODWORD(STACK[0x3C08]) = 69;
        LODWORD(STACK[0x3590]) = v3787;
        STACK[0x3B58] = v3772;
        STACK[0xAC8] = v3772;
        STACK[0x8D0] = STACK[0x3120];
        STACK[0x3820] = v3745;
        STACK[0x898] = v3745;
        STACK[0x3108] = v3762;
        STACK[0xA88] = v3762;
        STACK[0x31A8] = STACK[0x1618];
        STACK[0x3B50] = v3779;
        STACK[0xA78] = v3779;
        STACK[0xC58] = v3766;
        STACK[0x30F8] = v3766;
        STACK[0xC28] = v3768;
        STACK[0x3100] = v3768;
        STACK[0x9A8] = v3758;
        STACK[0x3C20] = v3758;
        STACK[0x3168] = STACK[0x1608];
        STACK[0x3160] = v3755;
        STACK[0x848] = v3755;
        STACK[0x3C28] = STACK[0x1638];
        STACK[0xA70] = STACK[0x3178];
        STACK[0xC08] = v3775;
        STACK[0x30F0] = v3775;
        STACK[0xC30] = v3786;
        STACK[0x3B40] = v3786;
        STACK[0xBA8] = v3764;
        STACK[0x3110] = v3764;
        STACK[0x3B48] = v3781;
        STACK[0xA50] = v3781;
        STACK[0xA20] = v3740;
        STACK[0x3800] = v3740;
        STACK[0x9B0] = v3753;
        STACK[0x3158] = v3753;
        STACK[0x3B60] = v3748;
        STACK[0x8E8] = v3748;
        STACK[0x8F0] = STACK[0x3290];
        STACK[0x3118] = v3783;
        STACK[0xAE0] = v3783;
        return v3788();
      case 0x48u:
        v1335 = STACK[0x3C20] + STACK[0xFA0] > 0xFFFFFFFFFFFFFFD8;
        if (__CFADD__(STACK[0x3C20], STACK[0xFA0]))
          v1335 = 1;
        v1336 = __CFADD__(STACK[0x3C28], STACK[0x1048]) || STACK[0x3C28] + STACK[0x1048] > 0xFFFFFFFFFFFFFFD2;
        v1337 = v1331 + STACK[0xF80];
        v1338 = __CFADD__(v1331, STACK[0xF80]) || v1331 + STACK[0xF80] > 0xFFFFFFFFFFFFFFF0;
        v1339 = __CFADD__(v1326, STACK[0xF78]) || v1326 + STACK[0xF78] > 0xFFFFFFFFFFFFFFF6;
        v1340 = v1321 + STACK[0xFC0];
        v1341 = __CFADD__(v1321, STACK[0xFC0]) || v1321 + STACK[0xFC0] > 0xFFFFFFFFFFFFFFFALL;
        v1342 = v1316 + STACK[0xFC8] > 0xFFFFFFFFFFFFFFFCLL;
        if (__CFADD__(v1316, STACK[0xFC8]))
          v1342 = 1;
        v1343 = v1313 + STACK[0x1058];
        LODWORD(v1344) = __CFADD__(v1313, STACK[0x1058]);
        v1345 = STACK[0x3C08] + STACK[0xFB8];
        v1346 = __CFADD__(STACK[0x3C08], STACK[0xFB8]);
        if (v1343 == (STACK[0x528] ^ 0xFFFFFFFFFFFFD5A3))
          v1344 = 1;
        else
          v1344 = v1344;
        if (v1342)
          v1347 = 3;
        else
          v1347 = 0;
        v1348 = v1347 + v1316 + STACK[0xFC8];
        if (v1341)
          v1349 = 5;
        else
          v1349 = 0;
        v1350 = v1344 + v1343;
        v1351 = v1349 + v1340;
        if (v1339)
          v1352 = 9;
        else
          v1352 = 0;
        v1353 = STACK[0x3B60] + STACK[0x1020];
        v1354 = __CFADD__(STACK[0x3B60], STACK[0x1020]);
        v1355 = v1352 + v1326 + STACK[0xF78];
        if (v1353 > 0xFFFFFFFFFFFFFFEELL || v1354)
          v1357 = 17;
        else
          v1357 = 0;
        if (v1338)
          v1358 = 15;
        else
          v1358 = 0;
        v1359 = STACK[0x3B58] + STACK[0xF98];
        v1360 = __CFADD__(STACK[0x3B58], STACK[0xF98]);
        v1361 = v1357 + v1353;
        if (v1345 > 0xFFFFFFFFFFFFFFDELL || v1346)
          v1363 = 33;
        else
          v1363 = 0;
        v1364 = v1358 + v1337;
        v1365 = v1359 > 0xFFFFFFFFFFFFFFD0 || v1360;
        if (v1336)
          v1366 = 45;
        else
          v1366 = 0;
        v1367 = v1366 + STACK[0x3C28] + STACK[0x1048];
        v1368 = STACK[0x3C78] + STACK[0x1040];
        v1369 = __CFADD__(STACK[0x3C78], STACK[0x1040]);
        if (v1335)
          v1370 = 39;
        else
          v1370 = 0;
        if (v1365)
          v1371 = 47;
        else
          v1371 = 0;
        v1372 = v1371 + v1359;
        v1373 = v1370 + STACK[0x3C20] + STACK[0xFA0];
        v1374 = v1368 > 0xFFFFFFFFFFFFFFCALL || v1369;
        v2767 = v1374 == 0;
        v1375 = 53;
        if (v2767)
          v1375 = 0;
        v1376 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) + 5624)) - 8);
        STACK[0x33E0] = STACK[0x1B40];
        STACK[0x7B0] = v1375 + v1368;
        STACK[0x808] = v1348;
        STACK[0x7F0] = v1372;
        STACK[0x3BB0] = v1372;
        STACK[0x3398] = STACK[0x1B68];
        STACK[0x7E8] = v1367;
        STACK[0x33B0] = v1367;
        STACK[0x7A8] = v1373;
        STACK[0x7C8] = v1351;
        STACK[0x7E0] = v1355;
        STACK[0x780] = v1363 + v1345;
        STACK[0x778] = v1361;
        STACK[0x770] = v1364;
        STACK[0x768] = v1350;
        STACK[0x3390] = STACK[0x1B30];
        STACK[0x33A8] = STACK[0x1B50];
        return v1376();
      case 0x49u:
        v3789 = STACK[0x3C78] + STACK[0xF68] > 0xFFFFFFFFFFFFFFCALL;
        v3790 = STACK[0x3C78] + STACK[0xF68];
        if (__CFADD__(STACK[0x3C78], STACK[0xF68]))
          v3789 = 1;
        v3791 = STACK[0x3C08] + STACK[0xFD0];
        v3792 = __CFADD__(STACK[0x3C08], STACK[0xFD0]) || STACK[0x3C08] + STACK[0xFD0] > 0xFFFFFFFFFFFFFFDELL;
        v3793 = STACK[0x3C20] + STACK[0xF88] > 0xFFFFFFFFFFFFFFD8;
        v3794 = STACK[0x3C20] + STACK[0xF88];
        if (__CFADD__(STACK[0x3C20], STACK[0xF88]))
          v3793 = 1;
        v3795 = v1321 + STACK[0xFA8] > 0xFFFFFFFFFFFFFFFALL;
        v3796 = v1321 + STACK[0xFA8];
        if (__CFADD__(v1321, STACK[0xFA8]))
          v3795 = 1;
        v3797 = v1316 + STACK[0xFB0] > 0xFFFFFFFFFFFFFFFCLL;
        v3798 = v1316 + STACK[0xFB0];
        if (__CFADD__(v1316, STACK[0xFB0]))
          v3797 = 1;
        v3799 = v1331;
        v3800 = STACK[0x3B60] + STACK[0x1060];
        v3801 = __CFADD__(STACK[0x3B60], STACK[0x1060]);
        v3802 = v1313 + STACK[0x1050];
        LODWORD(v3803) = __CFADD__(v1313, STACK[0x1050]);
        if (v3802 == -1)
          v3803 = 1;
        else
          v3803 = v3803;
        STACK[0x32C8] = v3803 + v3802;
        if (v3797)
          v3804 = 3;
        else
          v3804 = 0;
        STACK[0x32A0] = v3804 + v3798;
        v3805 = v1326 + STACK[0x1030];
        v3806 = __CFADD__(v1326, STACK[0x1030]);
        v3807 = v3799 + STACK[0xF70];
        v3808 = __CFADD__(v3799, STACK[0xF70]);
        if (v3807 > 0xFFFFFFFFFFFFFFF0)
          v3808 = 1;
        if (v3805 > 0xFFFFFFFFFFFFFFF6)
          v3806 = 1;
        if (v3795)
          v3809 = 5;
        else
          v3809 = 0;
        STACK[0x820] = v3809 + v3796;
        if (v3806)
          v3810 = 9;
        else
          v3810 = 0;
        STACK[0x32B8] = v3810 + v3805;
        v3811 = v3800 > 0xFFFFFFFFFFFFFFEELL || v3801;
        if (v3808)
          v3812 = 15;
        else
          v3812 = 0;
        STACK[0x818] = v3812 + v3807;
        v2767 = !v3792;
        v3813 = 33;
        if (v2767)
          v3813 = 0;
        STACK[0x32C0] = v3813 + v3791;
        v3814 = STACK[0x3B58] + STACK[0xF90];
        v3815 = __CFADD__(STACK[0x3B58], STACK[0xF90]);
        v2767 = v3811 == 0;
        v3816 = 17;
        if (v2767)
          v3816 = 0;
        STACK[0x3298] = v3816 + v3800;
        v3817 = STACK[0x3C28] + STACK[0x1008];
        v3818 = __CFADD__(STACK[0x3C28], STACK[0x1008]);
        v2767 = !v3793;
        v3819 = 39;
        if (v2767)
          v3819 = 0;
        STACK[0x32D8] = v3819 + v3794;
        v3820 = v3814 > 0xFFFFFFFFFFFFFFD0 || v3815;
        v3821 = v3817 > 0xFFFFFFFFFFFFFFD2 || v3818;
        v2767 = v3820 == 0;
        v3822 = 47;
        if (v2767)
          v3822 = 0;
        STACK[0x32A8] = v3822 + v3814;
        v3823 = 45;
        if (!v3821)
          v3823 = 0;
        v2767 = !v3789;
        v3824 = 53;
        if (v2767)
          v3824 = 0;
        STACK[0x32B0] = v3824 + v3790;
        v3825 = *(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9638));
        STACK[0xC88] = v3823 + v3817;
        STACK[0x3BB8] = STACK[0x2710];
        STACK[0x3828] = STACK[0x2708];
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        STACK[0x3C58] = STACK[0x2798];
        STACK[0x3BA0] = STACK[0x26F8];
        STACK[0x33C0] = STACK[0x3C50];
        STACK[0x36C0] = STACK[0x3A70];
        STACK[0x36B8] = STACK[0x3A78];
        STACK[0x3C50] = STACK[0x2770];
        STACK[0x33B8] = STACK[0x3C48];
        STACK[0x36B0] = STACK[0x3A80];
        STACK[0x3C40] = STACK[0x2780];
        STACK[0x36A8] = STACK[0x3A88];
        STACK[0x36A0] = STACK[0x39C0];
        STACK[0x3698] = STACK[0x3A90];
        STACK[0x3C48] = STACK[0x2788];
        STACK[0x3690] = STACK[0x3A98];
        LODWORD(STACK[0x3BD8]) = 74;
        STACK[0x3B70] = STACK[0x16F8];
        STACK[0x3378] = STACK[0x770];
        STACK[0x3B68] = STACK[0x1738];
        STACK[0x3B78] = STACK[0x16E0];
        STACK[0x3370] = STACK[0x808];
        STACK[0x3368] = STACK[0x7A8];
        STACK[0x3210] = STACK[0x1770];
        STACK[0x3350] = STACK[0x16D0];
        STACK[0x3238] = STACK[0x7E8];
        STACK[0x3200] = STACK[0x768];
        STACK[0x3218] = STACK[0x1710];
        STACK[0x3358] = STACK[0x7C8];
        STACK[0x3BD0] = STACK[0x778];
        STACK[0x3230] = STACK[0x1720];
        STACK[0x3BC8] = STACK[0x780];
        STACK[0x3208] = STACK[0x7E0];
        STACK[0x3228] = STACK[0x1728];
        STACK[0x3BC0] = STACK[0x7B0];
        STACK[0x3250] = STACK[0x16D8];
        STACK[0x3220] = STACK[0x1758];
        STACK[0x3AC8] = STACK[0x7F0];
        STACK[0x3248] = STACK[0x1730];
        return ((uint64_t (*)(void))(v3825 - 12))();
      case 0x4Du:
        v1377 = STACK[0x3C78] + STACK[0xA90] > 0xFFFFFFFFFFFFFFCALL;
        if (__CFADD__(STACK[0x3C78], STACK[0xA90]))
          v1377 = 1;
        v1378 = STACK[0x3C28] + STACK[0xB48] > 0xFFFFFFFFFFFFFFD2;
        if (__CFADD__(STACK[0x3C28], STACK[0xB48]))
          v1378 = 1;
        v1379 = STACK[0x3B60] + STACK[0xC38] > 0xFFFFFFFFFFFFFFEELL;
        if (__CFADD__(STACK[0x3B60], STACK[0xC38]))
          v1379 = 1;
        v1380 = v1313 + STACK[0xC40];
        LODWORD(v1381) = __CFADD__(v1313, STACK[0xC40]);
        v1382 = v1321 + STACK[0xB20];
        v1383 = __CFADD__(v1321, STACK[0xB20]);
        if (v1380 == -1)
          v1381 = 1;
        else
          v1381 = v1381;
        v1384 = v1316 + STACK[0xAE8];
        v1385 = v1331;
        v1386 = __CFADD__(v1316, STACK[0xAE8]);
        v1387 = v1326 + STACK[0xB28];
        v1388 = __CFADD__(v1326, STACK[0xB28]);
        if (v1384 > 0xFFFFFFFFFFFFFFFCLL)
          v1386 = 1;
        if (v1382 > 0xFFFFFFFFFFFFFFFALL)
          v1383 = 1;
        v1389 = STACK[0x3C20] + STACK[0xB78];
        v1390 = __CFADD__(STACK[0x3C20], STACK[0xB78]);
        if (v1386)
          v1391 = 3;
        else
          v1391 = 0;
        v1392 = v1385 + STACK[0xB50];
        v1393 = v1381 + v1380;
        v1394 = __CFADD__(v1385, STACK[0xB50]);
        if (v1392 > 0xFFFFFFFFFFFFFFF0)
          v1394 = 1;
        v1395 = v1387 > 0xFFFFFFFFFFFFFFF6 || v1388;
        if (v1394)
          v1396 = 15;
        else
          v1396 = 0;
        v1397 = v1396 + v1392;
        v1398 = STACK[0x3C08] + STACK[0xC48];
        v1399 = v1391 + v1384;
        v1400 = __CFADD__(STACK[0x3C08], STACK[0xC48]);
        if (v1398 > 0xFFFFFFFFFFFFFFDELL)
          v1400 = 1;
        if (v1395)
          v1401 = 9;
        else
          v1401 = 0;
        if (v1400)
          v1402 = 33;
        else
          v1402 = 0;
        if (v1383)
          v1403 = 5;
        else
          v1403 = 0;
        v1404 = v1402 + v1398;
        v1405 = v1403 + v1382;
        if (v1379)
          v1406 = 17;
        else
          v1406 = 0;
        v1407 = v1401 + v1387;
        v1408 = v1389 > 0xFFFFFFFFFFFFFFD8 || v1390;
        v1409 = STACK[0x3B58] + STACK[0xB30];
        v1410 = v1406 + STACK[0x3B60] + STACK[0xC38];
        v1411 = __CFADD__(STACK[0x3B58], STACK[0xB30]);
        if (v1409 > 0xFFFFFFFFFFFFFFD0)
          v1411 = 1;
        if (v1378)
          v1412 = 45;
        else
          v1412 = 0;
        v1413 = v1412 + STACK[0x3C28] + STACK[0xB48];
        if (v1408)
          v1414 = 39;
        else
          v1414 = 0;
        if (v1411)
          v1415 = 47;
        else
          v1415 = 0;
        v1416 = v1414 + v1389;
        v1417 = v1415 + v1409;
        v2767 = !v1377;
        v1418 = 53;
        if (v2767)
          v1418 = 0;
        v1419 = v1418 + STACK[0x3C78] + STACK[0xA90];
        if (LODWORD(STACK[0x760]) != 101)
        {
          STACK[0x3368] = v1397;
          STACK[0x3358] = v1399;
          STACK[0x3300] = v1393;
          v1442 = STACK[0x3C70];
          v1443 = STACK[0x3710];
          v1444 = STACK[0x3834];
          v1445 = STACK[0x3C60];
          v1446 = STACK[0x3BD8];
          v1447 = STACK[0x3B98];
          v1448 = STACK[0x3B90];
          v1449 = STACK[0x3B88];
          v1450 = STACK[0x3360];
          switch(LODWORD(STACK[0x760]))
          {
            case 'N':
              v1451 = (uint64_t (*)(void))(*(_QWORD *)(v1442
                                                    + 8
                                                    * ((27189 * ((*(_BYTE *)(STACK[0x3C18] + STACK[0x3B70]) & 8) == 0)) ^ (v1443 + 490)))
                                        - 4);
              LODWORD(STACK[0x156C]) = 79;
              v1452 = STACK[0x1318];
              STACK[0x3240] = STACK[0x1318];
              v1453 = STACK[0x1338];
              STACK[0x3248] = STACK[0x1338];
              STACK[0x3168] = v1452;
              v1454 = STACK[0x1348];
              STACK[0x3258] = STACK[0x1348];
              v1455 = STACK[0x3C68];
              STACK[0x3268] = STACK[0x3C68];
              v1456 = v1417;
              v1457 = STACK[0x1098];
              STACK[0x3B60] = STACK[0x1098];
              STACK[0x3270] = v1445;
              STACK[0x3330] = v1448;
              STACK[0x3348] = STACK[0x15D0];
              v1458 = STACK[0xC88];
              STACK[0x3208] = STACK[0xC88];
              v1459 = STACK[0x1310];
              STACK[0x3120] = STACK[0x1310];
              STACK[0x1560] = STACK[0x27A0];
              STACK[0x3370] = STACK[0x15A8];
              v1460 = v1419;
              v1461 = v1410;
              v1462 = STACK[0x1070];
              STACK[0x31F8] = STACK[0x1070];
              STACK[0x3800] = v1453;
              STACK[0x3128] = STACK[0x23F8];
              v1463 = STACK[0x1078];
              STACK[0x3820] = STACK[0x1078];
              STACK[0x3320] = STACK[0x23F0];
              STACK[0x3318] = v1449;
              v1464 = STACK[0x3B80];
              STACK[0x3338] = STACK[0x3B80];
              STACK[0x1540] = STACK[0x1598];
              STACK[0x1550] = STACK[0x2400];
              STACK[0x1558] = STACK[0x27A8];
              v1465 = STACK[0x1328];
              STACK[0x3200] = STACK[0x1328];
              STACK[0x3BC8] = STACK[0x15C0];
              STACK[0x1548] = STACK[0x27C0];
              STACK[0x3340] = STACK[0x15D8];
              v1466 = STACK[0x820];
              STACK[0x3310] = STACK[0x820];
              v1467 = STACK[0x1320];
              STACK[0x3290] = STACK[0x1320];
              STACK[0x1538] = STACK[0x1590];
              STACK[0x3BD0] = STACK[0x1588];
              STACK[0x32C8] = v1455;
              v1468 = v1407;
              v1469 = STACK[0x1090];
              STACK[0x3210] = STACK[0x1090];
              STACK[0x3828] = STACK[0x15A0];
              STACK[0x30D8] = STACK[0x3300];
              STACK[0x3218] = v1466;
              STACK[0x1530] = STACK[0x23E8];
              v1470 = STACK[0x818];
              STACK[0x3220] = STACK[0x818];
              STACK[0x32B8] = v1445;
              STACK[0x1528] = STACK[0x2418];
              STACK[0x32C0] = v1450;
              STACK[0x3C28] = v1469;
              STACK[0x3378] = STACK[0x15B8];
              STACK[0x3228] = v1459;
              STACK[0x30E0] = v1413;
              STACK[0x3230] = v1413;
              STACK[0x3328] = v1458;
              STACK[0x3238] = v1467;
              STACK[0x1520] = STACK[0x27B8];
              STACK[0x1510] = STACK[0x27F0];
              STACK[0x3350] = v1404;
              STACK[0x30D0] = v1404;
              STACK[0x1518] = STACK[0x15B0];
              STACK[0x1508] = STACK[0x23E0];
              STACK[0x3160] = v1465;
              STACK[0x1500] = STACK[0x27D0];
              STACK[0x3250] = v1457;
              STACK[0x32B0] = v1449;
              STACK[0x32E8] = v1460;
              STACK[0x36C8] = v1460;
              STACK[0x30E8] = v1405;
              STACK[0x3260] = v1405;
              STACK[0x14F8] = STACK[0x23C8];
              STACK[0x32A8] = v1464;
              STACK[0x14E8] = STACK[0x2408];
              STACK[0x3158] = v1462;
              STACK[0x3810] = STACK[0x3368];
              STACK[0x3278] = v1463;
              STACK[0x14F0] = STACK[0x27E0];
              STACK[0x32D8] = v1448;
              STACK[0x32A0] = v1446;
              STACK[0x3280] = v1450;
              STACK[0x14B8] = v1447;
              STACK[0x3298] = v1447;
              STACK[0x14D8] = STACK[0x27B0];
              STACK[0x14E0] = STACK[0x2410];
              STACK[0x14D0] = STACK[0x27C8];
              STACK[0x14C8] = STACK[0x23D8];
              STACK[0x32F0] = v1468;
              STACK[0x3808] = v1468;
              v1471 = STACK[0x1340];
              STACK[0x3C20] = STACK[0x1340];
              STACK[0x14C0] = STACK[0x23D0];
              STACK[0x14A0] = v1446;
              STACK[0x3288] = v1471;
              STACK[0x3818] = STACK[0x3358];
              STACK[0x1498] = v1470;
              STACK[0x32E0] = v1416;
              STACK[0x37F0] = v1416;
              STACK[0x31A8] = v1454;
              STACK[0x14B0] = STACK[0x27D8];
              STACK[0x32F8] = v1456;
              STACK[0x37E8] = v1456;
              STACK[0x3308] = v1461;
              STACK[0x37F8] = v1461;
              STACK[0x14A8] = STACK[0x15C8];
              STACK[0x1490] = STACK[0x27E8];
              return v1451();
            case 'O':
              STACK[0x3C28] = *(_QWORD *)(v1442 + 8 * (v1443 - 1986)) - 4;
              v1472 = STACK[0x3300];
              STACK[0x3408] = STACK[0x3300];
              STACK[0x3500] = v1407;
              v1473 = STACK[0x3358];
              STACK[0x3410] = STACK[0x3358];
              v1474 = STACK[0x3368];
              STACK[0x3980] = STACK[0x3368];
              STACK[0x3418] = v1417;
              STACK[0x3508] = v1419;
              STACK[0x3510] = v1416;
              STACK[0x3A18] = v1404;
              STACK[0x39B0] = v1472;
              STACK[0x3978] = v1417;
              STACK[0x3518] = v1473;
              STACK[0x3960] = v1473;
              STACK[0x3970] = v1410;
              STACK[0x3520] = v1472;
              STACK[0x34B0] = v1416;
              STACK[0x3958] = v1419;
              STACK[0x3528] = v1404;
              STACK[0x3968] = v1407;
              STACK[0x34C0] = v1404;
              STACK[0x3530] = v1419;
              STACK[0x3538] = v1410;
              STACK[0x3950] = v1416;
              STACK[0x3578] = v1405;
              STACK[0x3940] = v1405;
              STACK[0x34C8] = v1417;
              STACK[0x34D0] = v1410;
              STACK[0x34D8] = v1407;
              STACK[0x34B8] = v1474;
              STACK[0x34A8] = v1413;
              STACK[0x3948] = v1413;
              STACK[0x3C00] = 24;
              LODWORD(STACK[0x3400]) = 80;
              LODWORD(STACK[0x3AC0]) = v1443;
              v1475 = STACK[0x1318];
              STACK[0x3888] = STACK[0x1318];
              v1476 = STACK[0x3B80];
              STACK[0x3458] = STACK[0x3B80];
              v1477 = STACK[0x1338];
              STACK[0x3988] = STACK[0x1338];
              STACK[0x3A28] = v1448;
              STACK[0x3460] = v1445;
              STACK[0x3468] = v1450;
              v1478 = STACK[0x1348];
              STACK[0x3AB8] = STACK[0x1348];
              STACK[0x33E0] = v1475;
              v1479 = STACK[0x3C68];
              STACK[0x3470] = STACK[0x3C68];
              v1480 = STACK[0xC88];
              STACK[0x3478] = STACK[0xC88];
              STACK[0x3A68] = v1476;
              STACK[0x3A20] = v1479;
              STACK[0x3480] = v1450;
              STACK[0x3A48] = v1449;
              STACK[0x3450] = v1477;
              STACK[0x3A60] = v1445;
              STACK[0x3C38] = STACK[0x1340];
              STACK[0x3448] = v1478;
              STACK[0x3A50] = v1480;
              v1481 = STACK[0x1098];
              STACK[0x3BB0] = STACK[0x1098];
              STACK[0x3488] = v1479;
              v1482 = STACK[0x1070];
              STACK[0x3AB0] = STACK[0x1070];
              STACK[0x33E8] = v1478;
              v1483 = STACK[0x1090];
              STACK[0x34E0] = STACK[0x1090];
              STACK[0x3420] = v1475;
              v1484 = STACK[0x1328];
              STACK[0x33F0] = STACK[0x1328];
              STACK[0x3440] = v1475;
              STACK[0x33F8] = v1481;
              STACK[0x3490] = v1476;
              STACK[0x3428] = v1477;
              STACK[0x3430] = v1482;
              STACK[0x3498] = v1445;
              STACK[0x3438] = v1483;
              STACK[0x34E8] = v1482;
              STACK[0x3A38] = v1447;
              STACK[0x3AA8] = v1484;
              STACK[0x3BF8] = v1482;
              STACK[0x3398] = v1477;
              STACK[0x33B0] = v1484;
              STACK[0x34F0] = v1475;
              STACK[0x34A0] = v1480;
              STACK[0x3388] = v1483;
              v1485 = STACK[0x1310];
              STACK[0x3540] = STACK[0x1310];
              v1486 = STACK[0x1320];
              STACK[0x34F8] = STACK[0x1320];
              v1487 = STACK[0x820];
              STACK[0x39A8] = v1483;
              v1488 = STACK[0x1078];
              v1489 = STACK[0x818];
              STACK[0x3AA0] = v1446;
              STACK[0x3A40] = v1487;
              STACK[0x33D8] = v1486;
              STACK[0x3A30] = v1489;
              STACK[0x3BE8] = v1488;
              STACK[0x3BF0] = v1482;
              STACK[0x39A0] = v1485;
              STACK[0x3570] = v1485;
              STACK[0x3998] = v1486;
              STACK[0x3C78] = v1488;
              STACK[0x39B8] = v1481;
              STACK[0x3380] = v1484;
              STACK[0x3990] = v1488;
              STACK[0x3BE0] = v1481;
              STACK[0x3A58] = STACK[0x3360];
              STACK[0x3390] = v1486;
              STACK[0x33A8] = v1478;
              v1490 = STACK[0x1340];
              STACK[0x3C30] = STACK[0x1340];
              STACK[0x37E0] = v1490;
              return ((uint64_t (*)(void))STACK[0x3C28])();
            case 'R':
              v3842 = 4647 * (((STACK[0x3834] & 0xF8) >> 3) ^ 0xC4) + 14331348;
              STACK[0x3C78] = *(_QWORD *)(v1442
                                        + 8
                                        * ((3064
                                          * ((*(_BYTE *)(STACK[0x3C18]
                                                       + v3842
                                                       - 6784
                                                       * (((1266205 * (unint64_t)v3842) >> 32) >> 1)) & 1) == 0)) ^ (v1443 - 1662)))
                            - 4;
              LODWORD(STACK[0x2F64]) = 84;
              LODWORD(STACK[0x760]) = 82;
              LODWORD(STACK[0x3C08]) = 6;
              LODWORD(STACK[0x156C]) = 83;
              v3843 = v1404;
              STACK[0x3350] = v1404;
              v3844 = v1405;
              v3845 = STACK[0x1318];
              STACK[0x3240] = STACK[0x1318];
              v3846 = v3845;
              STACK[0x1318] = v3845;
              v3847 = STACK[0x1338];
              STACK[0x3248] = STACK[0x1338];
              v3848 = v3847;
              STACK[0x1338] = v3847;
              STACK[0x3168] = v3846;
              STACK[0x3258] = STACK[0x1348];
              v3849 = STACK[0x3C68];
              STACK[0x3268] = STACK[0x3C68];
              v3850 = v3849;
              v3851 = v1416;
              v3852 = STACK[0x1098];
              STACK[0x3B60] = STACK[0x1098];
              STACK[0x3270] = v1445;
              STACK[0x3330] = v1448;
              v3853 = v1448;
              STACK[0x3348] = STACK[0x15D0];
              v3854 = STACK[0xC88];
              STACK[0x3208] = STACK[0xC88];
              v3855 = v3854;
              STACK[0xC88] = v3854;
              v3856 = v1413;
              STACK[0x30E0] = v1413;
              v3857 = STACK[0x1310];
              STACK[0x3120] = STACK[0x1310];
              v3858 = v3857;
              STACK[0x1560] = STACK[0x27A0];
              STACK[0x3370] = STACK[0x15A8];
              v3859 = STACK[0x1070];
              STACK[0x31F8] = STACK[0x1070];
              STACK[0x3800] = v3848;
              STACK[0x3128] = STACK[0x23F8];
              v3860 = STACK[0x1078];
              STACK[0x3820] = STACK[0x1078];
              STACK[0x3320] = STACK[0x23F0];
              STACK[0x3318] = v1449;
              v3861 = STACK[0x3B80];
              STACK[0x3338] = STACK[0x3B80];
              v3862 = v3861;
              STACK[0x1540] = STACK[0x1598];
              STACK[0x1550] = STACK[0x2400];
              STACK[0x1558] = STACK[0x27A8];
              v3863 = STACK[0x1328];
              STACK[0x3200] = STACK[0x1328];
              v3864 = v3863;
              STACK[0x1328] = v3863;
              STACK[0x3BC8] = STACK[0x15C0];
              STACK[0x1548] = STACK[0x27C0];
              STACK[0x3340] = STACK[0x15D8];
              v3865 = v1419;
              STACK[0x32E8] = v1419;
              v3866 = STACK[0x820];
              STACK[0x3310] = STACK[0x820];
              STACK[0x3308] = v1410;
              v3867 = STACK[0x1320];
              STACK[0x3290] = STACK[0x1320];
              STACK[0x1538] = STACK[0x1590];
              STACK[0x3BD0] = STACK[0x1588];
              STACK[0x32C8] = v3850;
              v3868 = STACK[0x1090];
              STACK[0x3210] = STACK[0x1090];
              STACK[0x3828] = STACK[0x15A0];
              v3869 = STACK[0x3300];
              STACK[0x30D8] = STACK[0x3300];
              STACK[0x3218] = v3866;
              STACK[0x1530] = STACK[0x23E8];
              v3870 = STACK[0x818];
              STACK[0x3220] = STACK[0x818];
              STACK[0x32B8] = v1445;
              STACK[0x1528] = STACK[0x2418];
              v3871 = v1450;
              STACK[0x32C0] = v1450;
              STACK[0x3C28] = v3868;
              STACK[0x3378] = STACK[0x15B8];
              STACK[0x3228] = v3858;
              v3872 = v3858;
              STACK[0x1310] = v3858;
              STACK[0x3230] = v3856;
              STACK[0x3328] = v3855;
              STACK[0x3238] = v3867;
              v3873 = v3867;
              STACK[0x1320] = v3867;
              STACK[0x1520] = STACK[0x27B8];
              STACK[0x1510] = STACK[0x27F0];
              STACK[0x30D0] = v3843;
              STACK[0x1518] = STACK[0x15B0];
              STACK[0x1508] = STACK[0x23E0];
              STACK[0x3160] = v3864;
              STACK[0x1500] = STACK[0x27D0];
              STACK[0x3250] = v3852;
              STACK[0x32B0] = v1449;
              STACK[0x36C8] = v3865;
              v3874 = v3844;
              STACK[0x3260] = v3844;
              STACK[0x14F8] = STACK[0x23C8];
              v3875 = v3862;
              STACK[0x32A8] = v3862;
              STACK[0x14E8] = STACK[0x2408];
              STACK[0x3158] = v3859;
              v3876 = v1407;
              v3877 = STACK[0x3368];
              STACK[0x3810] = STACK[0x3368];
              STACK[0x3278] = v3860;
              STACK[0x14F0] = STACK[0x27E0];
              v3878 = v3853;
              STACK[0x32D8] = v3853;
              STACK[0x32A0] = v1446;
              STACK[0x3280] = v1450;
              v3879 = v1447;
              STACK[0x14B8] = v1447;
              STACK[0x3298] = v1447;
              STACK[0x14D8] = STACK[0x27B0];
              STACK[0x14E0] = STACK[0x2410];
              STACK[0x14D0] = STACK[0x27C8];
              STACK[0x14C8] = STACK[0x23D8];
              STACK[0x3808] = v3876;
              v3880 = STACK[0x1340];
              STACK[0x3C20] = STACK[0x1340];
              STACK[0x14C0] = STACK[0x23D0];
              STACK[0x14A0] = v1446;
              STACK[0x3288] = v3880;
              v3881 = STACK[0x3358];
              STACK[0x3818] = STACK[0x3358];
              STACK[0x1498] = v3870;
              v3882 = v3851;
              STACK[0x37F0] = v3851;
              v3883 = STACK[0x1348];
              STACK[0x31A8] = STACK[0x1348];
              v3884 = v1446;
              STACK[0x14B0] = STACK[0x27D8];
              STACK[0x37E8] = v1417;
              v3885 = STACK[0x3308];
              STACK[0x37F8] = STACK[0x3308];
              STACK[0x14A8] = STACK[0x15C8];
              STACK[0x1490] = STACK[0x27E8];
              LODWORD(STACK[0x3590]) = v1443;
              v3886 = STACK[0x1318];
              STACK[0x3888] = STACK[0x1318];
              STACK[0x3B58] = v3860;
              v3887 = STACK[0x1338];
              STACK[0x3988] = STACK[0x1338];
              STACK[0x3A28] = v3878;
              STACK[0x3688] = STACK[0x39E0];
              STACK[0x2FE8] = v3873;
              STACK[0x2FE0] = v3868;
              STACK[0x3AB8] = v3883;
              STACK[0x2FC8] = v3872;
              STACK[0x2FD8] = v3871;
              STACK[0x2FF0] = v1417;
              STACK[0x2FC0] = v3866;
              STACK[0x3A68] = v3875;
              STACK[0x3980] = v3877;
              v3888 = STACK[0x3C68];
              STACK[0x3A20] = STACK[0x3C68];
              STACK[0x3A48] = v1449;
              v3889 = v3874;
              STACK[0x2FB0] = v3874;
              v3890 = STACK[0x3C60];
              STACK[0x3A60] = STACK[0x3C60];
              STACK[0x2FA8] = v3870;
              v3891 = STACK[0xC88];
              STACK[0x2FA0] = STACK[0xC88];
              STACK[0x2FB8] = v3869;
              STACK[0x2FD0] = v3851;
              STACK[0x3A50] = v3891;
              STACK[0x3680] = STACK[0x39E8];
              STACK[0x3AB0] = v3859;
              STACK[0x2F90] = v3870;
              v3892 = v3879;
              v3893 = STACK[0x3350];
              STACK[0x3A18] = STACK[0x3350];
              STACK[0x39B0] = v3869;
              STACK[0x3668] = STACK[0x39D8];
              STACK[0x32F8] = v1417;
              STACK[0x3978] = v1417;
              v3894 = STACK[0x1328];
              STACK[0x2F88] = STACK[0x1328];
              STACK[0x3678] = STACK[0x39F8];
              STACK[0x3670] = STACK[0x3860];
              STACK[0x2F78] = v3886;
              STACK[0x2F98] = v3877;
              STACK[0x3960] = v3881;
              STACK[0x2F80] = v3871;
              STACK[0x3A38] = v3892;
              STACK[0x3AA8] = v3894;
              STACK[0x3970] = v3885;
              STACK[0x3660] = STACK[0x3838];
              STACK[0x2F70] = v3860;
              v3895 = STACK[0x30E0];
              STACK[0x2F68] = STACK[0x30E0];
              STACK[0x3658] = STACK[0x39D0];
              STACK[0x3650] = STACK[0x3840];
              STACK[0x2F50] = v3884;
              STACK[0x3B50] = v3852;
              STACK[0x3108] = v3883;
              STACK[0x2F48] = v1449;
              STACK[0x2F40] = v1449;
              STACK[0x2F38] = v3883;
              STACK[0x3640] = STACK[0x39C8];
              STACK[0x3648] = STACK[0x3BA8];
              STACK[0x3638] = STACK[0x3848];
              STACK[0x39A8] = v3868;
              STACK[0x3630] = STACK[0x3A00];
              STACK[0x3AA0] = v3884;
              STACK[0x3A40] = v3866;
              STACK[0x2F58] = v3893;
              STACK[0x3628] = STACK[0x3A10];
              v3896 = STACK[0x32E8];
              STACK[0x3958] = STACK[0x32E8];
              STACK[0x3178] = v3886;
              STACK[0x3A30] = v3870;
              STACK[0x3618] = STACK[0x3868];
              STACK[0x3610] = STACK[0x39F0];
              STACK[0x3968] = v3876;
              STACK[0x3620] = STACK[0x3850];
              v3897 = v3875;
              STACK[0x2F30] = v3875;
              STACK[0x3608] = STACK[0x3858];
              STACK[0x3600] = STACK[0x3870];
              v3898 = STACK[0x1310];
              STACK[0x30F8] = STACK[0x1310];
              STACK[0x2F28] = v3852;
              STACK[0x35F8] = STACK[0x3A08];
              STACK[0x3100] = v3887;
              STACK[0x2F20] = v3880;
              STACK[0x39A0] = v3898;
              STACK[0x3118] = v3894;
              STACK[0x3948] = v3895;
              v3899 = STACK[0x1320];
              STACK[0x3998] = STACK[0x1320];
              STACK[0x32E0] = v3882;
              STACK[0x3950] = v3882;
              STACK[0x2F10] = v3888;
              STACK[0x2F08] = v3886;
              STACK[0x2F18] = v3868;
              STACK[0x35F0] = STACK[0x3AD0];
              STACK[0x2F00] = v3890;
              STACK[0x2EF8] = v3880;
              STACK[0x35E8] = STACK[0x3AD8];
              STACK[0x35E0] = STACK[0x3AE0];
              STACK[0x35D8] = STACK[0x3AE8];
              STACK[0x39B8] = v3852;
              STACK[0x30E8] = v3889;
              STACK[0x3940] = v3889;
              STACK[0x2EE8] = v3852;
              STACK[0x2EF0] = v3860;
              STACK[0x2ED8] = v3892;
              STACK[0x3990] = v3860;
              STACK[0x2EE0] = v3897;
              STACK[0x35D0] = STACK[0x3AF0];
              STACK[0x2ED0] = v3881;
              STACK[0x3B48] = v3868;
              STACK[0x2EC0] = v3887;
              STACK[0x2EB8] = v3859;
              STACK[0x3A58] = v3871;
              STACK[0x2EC8] = v3896;
              STACK[0x2EB0] = v3891;
              STACK[0x30F0] = v3859;
              STACK[0x3B40] = v3880;
              STACK[0x2EA8] = v3866;
              STACK[0x2EA0] = v3859;
              STACK[0x3110] = v3899;
              STACK[0x32F0] = v3876;
              STACK[0x2E98] = v3876;
              STACK[0x35C8] = STACK[0x3AF8];
              STACK[0x35C0] = STACK[0x3B08];
              STACK[0x35B8] = STACK[0x3B00];
              STACK[0x35B0] = STACK[0x3B10];
              STACK[0x35A8] = STACK[0x3B18];
              v3900 = STACK[0x3B90];
              STACK[0x2E90] = STACK[0x3B90];
              STACK[0x37E0] = v3880;
              STACK[0x35A0] = STACK[0x3B20];
              STACK[0x2E88] = v3900;
              STACK[0x2E78] = v3894;
              STACK[0x3598] = STACK[0x3B30];
              STACK[0x2E70] = v3887;
              STACK[0x2E68] = v3883;
              STACK[0x3588] = STACK[0x3B28];
              STACK[0x2E60] = v3892;
              STACK[0x2E58] = v3898;
              STACK[0x2E80] = STACK[0x3308];
              STACK[0x2E50] = v3884;
              STACK[0x3580] = STACK[0x3B38];
              STACK[0x2E48] = v3899;
              return ((uint64_t (*)(void))STACK[0x3C78])();
            case 'S':
              STACK[0x3688] = STACK[0x39E0];
              STACK[0x3680] = STACK[0x39E8];
              STACK[0x3668] = STACK[0x39D8];
              STACK[0x3678] = STACK[0x39F8];
              STACK[0x3670] = STACK[0x3860];
              v3901 = STACK[0x3368];
              STACK[0x3810] = STACK[0x3368];
              STACK[0x3980] = v3901;
              STACK[0x2F98] = v3901;
              STACK[0x3660] = STACK[0x3838];
              STACK[0x3658] = STACK[0x39D0];
              STACK[0x3650] = STACK[0x3840];
              STACK[0x3640] = STACK[0x39C8];
              STACK[0x3648] = STACK[0x3BA8];
              STACK[0x3638] = STACK[0x3848];
              STACK[0x3630] = STACK[0x3A00];
              STACK[0x3628] = STACK[0x3A10];
              STACK[0x3618] = STACK[0x3868];
              STACK[0x3610] = STACK[0x39F0];
              STACK[0x3620] = STACK[0x3850];
              STACK[0x3608] = STACK[0x3858];
              STACK[0x3600] = STACK[0x3870];
              STACK[0x35F8] = STACK[0x3A08];
              STACK[0x2FF0] = v1417;
              STACK[0x3978] = v1417;
              STACK[0x37E8] = v1417;
              STACK[0x3A18] = v1404;
              STACK[0x2F58] = v1404;
              STACK[0x30D0] = v1404;
              STACK[0x2FD0] = v1416;
              STACK[0x37F0] = v1416;
              STACK[0x3950] = v1416;
              STACK[0x35F0] = STACK[0x3AD0];
              STACK[0x35E8] = STACK[0x3AD8];
              STACK[0x35E0] = STACK[0x3AE0];
              STACK[0x35D8] = STACK[0x3AE8];
              STACK[0x3A48] = v1449;
              STACK[0x2F48] = v1449;
              STACK[0x2F40] = v1449;
              STACK[0x32B0] = v1449;
              v3902 = STACK[0x3B80];
              STACK[0x3A68] = STACK[0x3B80];
              STACK[0x2F30] = v3902;
              STACK[0x32A8] = v3902;
              STACK[0x2EE0] = v3902;
              STACK[0x35D0] = STACK[0x3AF0];
              STACK[0x2FD8] = v1450;
              STACK[0x2F80] = v1450;
              STACK[0x32C0] = v1450;
              STACK[0x3A58] = v1450;
              STACK[0x36C8] = v1419;
              STACK[0x3958] = v1419;
              STACK[0x2EC8] = v1419;
              STACK[0x3808] = v1407;
              STACK[0x3968] = v1407;
              STACK[0x2E98] = v1407;
              STACK[0x35C8] = STACK[0x3AF8];
              STACK[0x35C0] = STACK[0x3B08];
              STACK[0x35B8] = STACK[0x3B00];
              STACK[0x35B0] = STACK[0x3B10];
              STACK[0x35A8] = STACK[0x3B18];
              STACK[0x35A0] = STACK[0x3B20];
              v3903 = STACK[0x3300];
              STACK[0x2FB8] = STACK[0x3300];
              STACK[0x39B0] = v3903;
              STACK[0x30D8] = v3903;
              STACK[0x3A28] = v1448;
              STACK[0x32D8] = v1448;
              STACK[0x2E90] = v1448;
              STACK[0x2E88] = v1448;
              STACK[0x3598] = STACK[0x3B30];
              STACK[0x3588] = STACK[0x3B28];
              v3904 = STACK[0x3358];
              STACK[0x3960] = STACK[0x3358];
              STACK[0x2ED0] = v3904;
              STACK[0x3818] = v3904;
              STACK[0x3A38] = v1447;
              STACK[0x2ED8] = v1447;
              STACK[0x3298] = v1447;
              STACK[0x2E60] = v1447;
              STACK[0x37F8] = v1410;
              STACK[0x3970] = v1410;
              STACK[0x2E80] = v1410;
              STACK[0x2F50] = v1446;
              STACK[0x3AA0] = v1446;
              STACK[0x32A0] = v1446;
              STACK[0x2E50] = v1446;
              STACK[0x3580] = STACK[0x3B38];
              LODWORD(STACK[0x2F64]) = 84;
              LODWORD(STACK[0x3C08]) = 6;
              LODWORD(STACK[0x3590]) = v1443;
              v3905 = STACK[0x1318];
              STACK[0x3888] = STACK[0x1318];
              v3906 = STACK[0x1078];
              STACK[0x3B58] = STACK[0x1078];
              v3907 = STACK[0x1338];
              STACK[0x3988] = STACK[0x1338];
              v3908 = STACK[0x1320];
              STACK[0x2FE8] = STACK[0x1320];
              v3909 = STACK[0x1090];
              STACK[0x2FE0] = STACK[0x1090];
              v3910 = STACK[0x1348];
              STACK[0x3AB8] = STACK[0x1348];
              v3911 = STACK[0x1310];
              STACK[0x3120] = STACK[0x1310];
              v3912 = STACK[0x1328];
              STACK[0x3160] = STACK[0x1328];
              STACK[0x2FC8] = v3911;
              v3913 = STACK[0x820];
              STACK[0x2FC0] = STACK[0x820];
              v3914 = STACK[0x3C68];
              STACK[0x3A20] = STACK[0x3C68];
              STACK[0x2FB0] = v1405;
              STACK[0x3A60] = v1445;
              v3915 = STACK[0x818];
              STACK[0x2FA8] = STACK[0x818];
              v3916 = STACK[0xC88];
              STACK[0x2FA0] = STACK[0xC88];
              STACK[0x3A50] = v3916;
              v3917 = STACK[0x1070];
              STACK[0x3AB0] = STACK[0x1070];
              STACK[0x2F90] = v3915;
              STACK[0x2F88] = v3912;
              STACK[0x3820] = v3906;
              STACK[0x2F78] = v3905;
              STACK[0x3290] = v3908;
              STACK[0x3AA8] = v3912;
              STACK[0x2F70] = v3906;
              STACK[0x2F68] = v1413;
              v3918 = STACK[0x1098];
              STACK[0x3B50] = STACK[0x1098];
              STACK[0x3108] = v3910;
              STACK[0x2F38] = v3910;
              STACK[0x32C8] = v3914;
              STACK[0x39A8] = v3909;
              STACK[0x3A40] = v3913;
              STACK[0x3178] = v3905;
              STACK[0x3A30] = v3915;
              STACK[0x31A8] = v3910;
              STACK[0x32B8] = v1445;
              STACK[0x30F8] = v3911;
              STACK[0x2F28] = v3918;
              STACK[0x3100] = v3907;
              v3919 = STACK[0x1340];
              STACK[0x2F20] = STACK[0x1340];
              STACK[0x39A0] = v3911;
              STACK[0x3118] = v3912;
              STACK[0x30E0] = v1413;
              STACK[0x3948] = v1413;
              STACK[0x3C20] = v3919;
              STACK[0x3998] = v3908;
              STACK[0x3168] = v3905;
              STACK[0x2F10] = v3914;
              STACK[0x2F08] = v3905;
              STACK[0x2F18] = v3909;
              STACK[0x3C28] = v3909;
              STACK[0x2F00] = v1445;
              STACK[0x2EF8] = v3919;
              STACK[0x39B8] = v3918;
              STACK[0x30E8] = v1405;
              STACK[0x3940] = v1405;
              STACK[0x2EE8] = v3918;
              STACK[0x2EF0] = v3906;
              STACK[0x3990] = v3906;
              STACK[0x3B48] = v3909;
              STACK[0x2EC0] = v3907;
              STACK[0x2EB8] = v3917;
              STACK[0x3B60] = v3918;
              STACK[0x2EB0] = v3916;
              STACK[0x30F0] = v3917;
              STACK[0x3B40] = v3919;
              STACK[0x2EA8] = v3913;
              STACK[0x2EA0] = v3917;
              STACK[0x3110] = v3908;
              STACK[0x3800] = v3907;
              STACK[0x3158] = v3917;
              STACK[0x37E0] = v3919;
              STACK[0x2E78] = v3912;
              STACK[0x2E70] = v3907;
              STACK[0x2E68] = v3910;
              STACK[0x2E58] = v3911;
              STACK[0x2E48] = v3908;
              return sub_10069FFC8();
            case 'V':
              v3920 = (STACK[0x3834] & 2) == 0;
              v3921 = STACK[0x15D0];
              v3922 = STACK[0x3368];
              if ((v1444 & 2) == 0)
                v3921 = STACK[0x3368];
              STACK[0x3348] = v3921;
              v3923 = STACK[0x1078];
              v3924 = STACK[0x27A0];
              if ((v1444 & 2) == 0)
                v3924 = STACK[0x1078];
              STACK[0x1560] = v3924;
              v3925 = STACK[0x15A8];
              if ((v1444 & 2) == 0)
                v3925 = v1416;
              STACK[0x3370] = v3925;
              v3926 = STACK[0x23F8];
              if ((v1444 & 2) == 0)
                v3926 = v1450;
              STACK[0x3128] = v3926;
              v3927 = STACK[0x23F0];
              if ((v1444 & 2) == 0)
                v3927 = v1446;
              STACK[0x3320] = v3927;
              v3928 = STACK[0x1598];
              if ((v1444 & 2) == 0)
                v3928 = v1413;
              STACK[0x1540] = v3928;
              v3929 = STACK[0x2400];
              v3930 = STACK[0x3B80];
              if ((v1444 & 2) == 0)
                v3929 = STACK[0x3B80];
              STACK[0x1550] = v3929;
              v3931 = v1405;
              v3932 = STACK[0x1090];
              v3933 = STACK[0x27A8];
              if ((v1444 & 2) == 0)
                v3933 = STACK[0x1090];
              STACK[0x1558] = v3933;
              v3934 = STACK[0x15C0];
              if ((v1444 & 2) == 0)
                v3934 = v1407;
              STACK[0x3BC8] = v3934;
              STACK[0x32F0] = v1407;
              v3935 = STACK[0x1348];
              v3936 = STACK[0x27C0];
              if ((v1444 & 2) == 0)
                v3936 = STACK[0x1348];
              STACK[0x1548] = v3936;
              v3937 = STACK[0x15D8];
              if ((v1444 & 2) == 0)
                v3937 = v1415 + v1409;
              STACK[0x3340] = v3937;
              v3938 = STACK[0x1590];
              if ((v1444 & 2) == 0)
                v3938 = v3931;
              STACK[0x1538] = v3938;
              v3939 = STACK[0x1588];
              if ((v1444 & 2) == 0)
                v3939 = v1419;
              STACK[0x3BD0] = v3939;
              v3940 = STACK[0x15A0];
              if ((v1444 & 2) == 0)
                v3940 = v1410;
              STACK[0x3828] = v3940;
              v3941 = STACK[0x23E8];
              if ((v1444 & 2) == 0)
                v3941 = v1448;
              STACK[0x1530] = v3941;
              v3942 = STACK[0x2418];
              v3943 = STACK[0x3C68];
              if ((v1444 & 2) == 0)
                v3942 = STACK[0x3C68];
              STACK[0x1528] = v3942;
              v3944 = STACK[0x15B8];
              if ((v1444 & 2) == 0)
                v3944 = STACK[0x3358];
              STACK[0x3378] = v3944;
              v3945 = v1419;
              v3946 = STACK[0x1070];
              v3947 = STACK[0x27B8];
              if ((v1444 & 2) == 0)
                v3947 = STACK[0x1070];
              STACK[0x1520] = v3947;
              v3948 = STACK[0x1318];
              v3949 = STACK[0x27F0];
              if ((v1444 & 2) == 0)
                v3949 = STACK[0x1318];
              STACK[0x1510] = v3949;
              v3950 = STACK[0x15B0];
              if ((v1444 & 2) == 0)
                v3950 = v1404;
              STACK[0x1518] = v3950;
              v3951 = STACK[0x23E0];
              if ((v1444 & 2) == 0)
                v3951 = v1445;
              STACK[0x1508] = v3951;
              v3952 = STACK[0x1328];
              v3953 = STACK[0x27D0];
              if ((v1444 & 2) == 0)
                v3953 = STACK[0x1328];
              STACK[0x1500] = v3953;
              v3954 = STACK[0x818];
              v3955 = STACK[0x23C8];
              if ((v1444 & 2) == 0)
                v3955 = STACK[0x818];
              STACK[0x14F8] = v3955;
              v3956 = STACK[0x2408];
              if ((v1444 & 2) == 0)
                v3956 = v1447;
              STACK[0x14E8] = v3956;
              if ((v1444 & 2) != 0)
                v3957 = 87;
              else
                v3957 = 88;
              LODWORD(STACK[0x156C]) = v3957;
              v3958 = STACK[0x1320];
              v3959 = STACK[0x27E0];
              if (v3920)
                v3959 = STACK[0x1320];
              STACK[0x14F0] = v3959;
              STACK[0x32E0] = v1416;
              v3960 = STACK[0x1338];
              v3961 = STACK[0x27B0];
              if (v3920)
                v3961 = STACK[0x1338];
              STACK[0x14D8] = v3961;
              STACK[0x32F8] = v1417;
              v3962 = STACK[0x820];
              v3963 = STACK[0x2410];
              if (v3920)
                v3963 = STACK[0x820];
              STACK[0x14E0] = v3963;
              v3964 = STACK[0x1310];
              v3965 = STACK[0x27C8];
              if (v3920)
                v3965 = STACK[0x1310];
              STACK[0x14D0] = v3965;
              STACK[0x3308] = v1410;
              v3966 = STACK[0xC88];
              v3967 = STACK[0x23D8];
              if (v3920)
                v3967 = STACK[0xC88];
              STACK[0x14C8] = v3967;
              v3968 = STACK[0x23D0];
              if (v3920)
                v3968 = v1449;
              STACK[0x14C0] = v3968;
              v3969 = STACK[0x1340];
              v3970 = STACK[0x27D8];
              if (v3920)
                v3970 = STACK[0x1340];
              STACK[0x14B0] = v3970;
              v3971 = STACK[0x15C8];
              v3972 = STACK[0x3300];
              if (v3920)
                v3971 = STACK[0x3300];
              STACK[0x14A8] = v3971;
              v3973 = STACK[0x1098];
              v3974 = STACK[0x27E8];
              if (v3920)
                v3974 = STACK[0x1098];
              STACK[0x1490] = v3974;
              v3975 = *(uint64_t (**)(void))(v1442 + 8 * a10);
              STACK[0x3240] = v3948;
              STACK[0x3248] = v3960;
              STACK[0x3168] = v3948;
              STACK[0x3258] = v3935;
              STACK[0x3268] = v3943;
              STACK[0x3B60] = v3973;
              STACK[0x3270] = v1445;
              STACK[0x3330] = v1448;
              STACK[0x3208] = v3966;
              STACK[0x3120] = v3964;
              STACK[0x31F8] = v3946;
              STACK[0x3800] = v3960;
              STACK[0x3820] = v3923;
              STACK[0x3318] = v1449;
              STACK[0x3338] = v3930;
              STACK[0x3200] = v3952;
              STACK[0x3310] = v3962;
              STACK[0x3290] = v3958;
              STACK[0x32C8] = v3943;
              STACK[0x3210] = v3932;
              STACK[0x30D8] = v3972;
              STACK[0x3218] = v3962;
              STACK[0x3220] = v3954;
              STACK[0x32B8] = v1445;
              v3976 = STACK[0x3360];
              STACK[0x32C0] = STACK[0x3360];
              STACK[0x3C28] = v3932;
              STACK[0x3228] = v3964;
              STACK[0x30E0] = v1413;
              STACK[0x3230] = v1413;
              STACK[0x3328] = v3966;
              STACK[0x3238] = v3958;
              STACK[0x3350] = v1404;
              STACK[0x30D0] = v1404;
              STACK[0x3160] = v3952;
              STACK[0x3250] = v3973;
              STACK[0x32B0] = v1449;
              STACK[0x32E8] = v3945;
              STACK[0x36C8] = v3945;
              STACK[0x30E8] = v3931;
              STACK[0x3260] = v3931;
              STACK[0x32A8] = v3930;
              STACK[0x3158] = v3946;
              STACK[0x3810] = v3922;
              STACK[0x3278] = v3923;
              STACK[0x32D8] = v1448;
              v3977 = STACK[0x3BD8];
              STACK[0x32A0] = STACK[0x3BD8];
              STACK[0x3280] = v3976;
              STACK[0x14B8] = v1447;
              STACK[0x3298] = v1447;
              STACK[0x3808] = STACK[0x32F0];
              STACK[0x3C20] = v3969;
              STACK[0x14A0] = v3977;
              STACK[0x3288] = v3969;
              STACK[0x3818] = STACK[0x3358];
              STACK[0x1498] = v3954;
              STACK[0x37F0] = STACK[0x32E0];
              STACK[0x31A8] = v3935;
              STACK[0x37E8] = STACK[0x32F8];
              STACK[0x37F8] = STACK[0x3308];
              return v3975();
            case 'W':
              LODWORD(STACK[0x156C]) = 88;
              v3978 = v1407;
              v3979 = STACK[0x1318];
              STACK[0x3240] = STACK[0x1318];
              v3980 = STACK[0x1338];
              STACK[0x3248] = STACK[0x1338];
              STACK[0x3168] = v3979;
              v3981 = STACK[0x1348];
              STACK[0x3258] = STACK[0x1348];
              v3982 = v3981;
              STACK[0x1348] = v3981;
              v3983 = STACK[0x3C68];
              STACK[0x3268] = STACK[0x3C68];
              v3984 = v1417;
              STACK[0x3B60] = STACK[0x1098];
              STACK[0x3270] = v1445;
              STACK[0x3330] = v1448;
              v3985 = STACK[0x3368];
              STACK[0x3348] = STACK[0x3368];
              v3986 = STACK[0xC88];
              STACK[0x3208] = STACK[0xC88];
              v3987 = STACK[0x1310];
              STACK[0x3120] = STACK[0x1310];
              v3988 = STACK[0x1078];
              STACK[0x1560] = STACK[0x1078];
              STACK[0x3370] = v1416;
              v3989 = v1410;
              v3990 = STACK[0x1070];
              STACK[0x31F8] = STACK[0x1070];
              STACK[0x3800] = v3980;
              STACK[0x3128] = v1450;
              STACK[0x3820] = v3988;
              STACK[0x3320] = v1446;
              STACK[0x3318] = v1449;
              v3991 = STACK[0x3B80];
              STACK[0x3338] = STACK[0x3B80];
              STACK[0x1540] = v1413;
              STACK[0x1550] = v3991;
              v3992 = v1448;
              v3993 = v1419;
              v3994 = STACK[0x1090];
              STACK[0x1558] = STACK[0x1090];
              v3995 = STACK[0x1328];
              STACK[0x3200] = STACK[0x1328];
              STACK[0x3BC8] = v3978;
              STACK[0x1548] = v3982;
              STACK[0x3340] = v1417;
              v3996 = STACK[0x820];
              STACK[0x3310] = STACK[0x820];
              v3997 = STACK[0x1320];
              STACK[0x3290] = STACK[0x1320];
              STACK[0x1538] = v1405;
              STACK[0x3BD0] = v3993;
              STACK[0x32C8] = v3983;
              STACK[0x3210] = v3994;
              STACK[0x3828] = v3989;
              v3998 = STACK[0x3300];
              STACK[0x30D8] = STACK[0x3300];
              STACK[0x3218] = v3996;
              STACK[0x1530] = v3992;
              v3999 = STACK[0x818];
              STACK[0x3220] = STACK[0x818];
              STACK[0x32B8] = v1445;
              STACK[0x1528] = v3983;
              STACK[0x32C0] = v1450;
              STACK[0x3C28] = v3994;
              v4000 = STACK[0x3358];
              STACK[0x3378] = STACK[0x3358];
              STACK[0x3228] = v3987;
              STACK[0x30E0] = v1413;
              STACK[0x3230] = v1413;
              STACK[0x3328] = v3986;
              STACK[0x3238] = v3997;
              STACK[0x1520] = v3990;
              STACK[0x1510] = v3979;
              STACK[0x30D0] = v1404;
              STACK[0x3350] = v1404;
              STACK[0x1518] = v1404;
              STACK[0x1508] = v1445;
              STACK[0x3160] = v3995;
              STACK[0x1500] = v3995;
              v4001 = STACK[0x1098];
              STACK[0x3250] = STACK[0x1098];
              STACK[0x32B0] = v1449;
              STACK[0x32E8] = v3993;
              STACK[0x36C8] = v3993;
              STACK[0x30E8] = v1405;
              STACK[0x3260] = v1405;
              STACK[0x14F8] = v3999;
              STACK[0x32A8] = v3991;
              STACK[0x14E8] = v1447;
              STACK[0x3158] = v3990;
              STACK[0x3810] = v3985;
              STACK[0x3278] = v3988;
              STACK[0x14F0] = v3997;
              STACK[0x32D8] = v3992;
              STACK[0x32A0] = v1446;
              STACK[0x3280] = v1450;
              STACK[0x14B8] = v1447;
              STACK[0x3298] = v1447;
              STACK[0x14D8] = v3980;
              STACK[0x14E0] = v3996;
              STACK[0x14D0] = v3987;
              STACK[0x14C8] = v3986;
              STACK[0x32F0] = v3978;
              STACK[0x3808] = v3978;
              v4002 = STACK[0x1340];
              STACK[0x3C20] = STACK[0x1340];
              STACK[0x14C0] = v1449;
              STACK[0x14A0] = v1446;
              STACK[0x3288] = v4002;
              STACK[0x3818] = v4000;
              STACK[0x1498] = v3999;
              STACK[0x32E0] = v1416;
              STACK[0x37F0] = v1416;
              STACK[0x31A8] = STACK[0x1348];
              STACK[0x14B0] = v4002;
              STACK[0x32F8] = v3984;
              STACK[0x37E8] = v3984;
              STACK[0x3308] = v3989;
              STACK[0x37F8] = v3989;
              STACK[0x14A8] = v3998;
              STACK[0x1490] = v4001;
              JUMPOUT(0x1006BDD38);
            case 'X':
              STACK[0x3C78] = *(_QWORD *)(v1442 + 8 * ((v1443 - 1662) ^ (31732 * ((STACK[0x3834] & 1) == 0)))) - 4;
              LODWORD(STACK[0x2F64]) = 89;
              LODWORD(STACK[0x760]) = 88;
              LODWORD(STACK[0x3C08]) = 6;
              LODWORD(STACK[0x3590]) = v1443;
              v4003 = v1445;
              v4004 = v1415 + v1409;
              v4005 = STACK[0x1318];
              STACK[0x3888] = STACK[0x1318];
              v4006 = STACK[0x27A0];
              STACK[0x3B58] = STACK[0x27A0];
              STACK[0x36C8] = v1419;
              v4007 = STACK[0x3368];
              STACK[0x3810] = STACK[0x3368];
              v4008 = STACK[0x1338];
              STACK[0x3988] = STACK[0x1338];
              STACK[0x3A28] = v1448;
              STACK[0x3688] = STACK[0x39E0];
              v4009 = STACK[0x1320];
              STACK[0x2FE8] = STACK[0x1320];
              v4010 = STACK[0x1090];
              STACK[0x2FE0] = STACK[0x1090];
              v4011 = STACK[0x1348];
              STACK[0x3AB8] = STACK[0x1348];
              v4012 = v1419;
              v4013 = STACK[0x1310];
              STACK[0x3120] = STACK[0x1310];
              v4014 = STACK[0x1328];
              STACK[0x3160] = STACK[0x1328];
              STACK[0x37F8] = v1410;
              STACK[0x2FC8] = v4013;
              STACK[0x2FD8] = STACK[0x23F8];
              STACK[0x2FF0] = STACK[0x15D8];
              v4015 = STACK[0x820];
              STACK[0x2FC0] = STACK[0x820];
              v4016 = v1416;
              v4017 = STACK[0x3B80];
              STACK[0x3A68] = STACK[0x3B80];
              STACK[0x3980] = v4007;
              v4018 = STACK[0x3C68];
              STACK[0x3A20] = STACK[0x3C68];
              STACK[0x3A48] = v1449;
              STACK[0x2FB0] = STACK[0x1590];
              STACK[0x3A60] = v4003;
              STACK[0x3808] = v1407;
              STACK[0x2FA8] = STACK[0x23C8];
              v4019 = STACK[0xC88];
              STACK[0x2FA0] = STACK[0xC88];
              STACK[0x2FB8] = STACK[0x15C8];
              STACK[0x2FD0] = STACK[0x15A8];
              STACK[0x3A50] = v4019;
              STACK[0x3680] = STACK[0x39E8];
              v4020 = v1410;
              v4021 = STACK[0x1070];
              STACK[0x3AB0] = STACK[0x1070];
              v4022 = STACK[0x818];
              STACK[0x2F90] = STACK[0x818];
              STACK[0x3A18] = v1404;
              v4023 = STACK[0x3300];
              STACK[0x39B0] = STACK[0x3300];
              STACK[0x3668] = STACK[0x39D8];
              STACK[0x3978] = v4004;
              STACK[0x37F0] = v4016;
              STACK[0x2F88] = v4014;
              STACK[0x3678] = STACK[0x39F8];
              STACK[0x3670] = STACK[0x3860];
              v4024 = STACK[0x1078];
              STACK[0x3820] = STACK[0x1078];
              STACK[0x2F78] = v4005;
              STACK[0x2F98] = STACK[0x15D0];
              v4025 = STACK[0x3358];
              STACK[0x3960] = STACK[0x3358];
              STACK[0x2F80] = v1450;
              STACK[0x3290] = v4009;
              STACK[0x3A38] = v1447;
              STACK[0x3AA8] = v4014;
              STACK[0x3308] = v4020;
              STACK[0x3970] = v4020;
              STACK[0x3660] = STACK[0x3838];
              STACK[0x2F70] = v4006;
              STACK[0x2F68] = STACK[0x1598];
              STACK[0x3658] = STACK[0x39D0];
              STACK[0x3650] = STACK[0x3840];
              STACK[0x2F50] = STACK[0x23F0];
              v4026 = STACK[0x27E8];
              STACK[0x3B50] = STACK[0x27E8];
              v4027 = STACK[0x27C0];
              STACK[0x3108] = STACK[0x27C0];
              STACK[0x2F48] = v1449;
              STACK[0x2F40] = STACK[0x23D0];
              STACK[0x2F38] = v4027;
              STACK[0x32C8] = v4018;
              STACK[0x3640] = STACK[0x39C8];
              STACK[0x3648] = STACK[0x3BA8];
              STACK[0x3638] = STACK[0x3848];
              STACK[0x39A8] = v4010;
              STACK[0x3630] = STACK[0x3A00];
              STACK[0x3AA0] = v1446;
              STACK[0x3A40] = v4015;
              STACK[0x2F58] = STACK[0x15B0];
              STACK[0x3628] = STACK[0x3A10];
              STACK[0x32E8] = v4012;
              STACK[0x3958] = v4012;
              v4028 = v1450;
              v4029 = STACK[0x27F0];
              STACK[0x3178] = STACK[0x27F0];
              STACK[0x3A30] = v4022;
              STACK[0x3618] = STACK[0x3868];
              STACK[0x3610] = STACK[0x39F0];
              STACK[0x32F0] = v1407;
              STACK[0x3968] = v1407;
              STACK[0x3620] = STACK[0x3850];
              STACK[0x31A8] = v4011;
              STACK[0x2F30] = STACK[0x2400];
              STACK[0x3608] = STACK[0x3858];
              v4030 = v4003;
              STACK[0x32B8] = v4003;
              STACK[0x32C0] = v4028;
              STACK[0x3600] = STACK[0x3870];
              v4031 = STACK[0x27C8];
              STACK[0x30F8] = STACK[0x27C8];
              STACK[0x2F28] = v4026;
              STACK[0x35F8] = STACK[0x3A08];
              v4032 = STACK[0x27B0];
              STACK[0x3100] = STACK[0x27B0];
              v4033 = STACK[0x27D8];
              STACK[0x2F20] = STACK[0x27D8];
              STACK[0x32F8] = v4004;
              STACK[0x37E8] = v4004;
              STACK[0x39A0] = v4013;
              v4034 = STACK[0x27D0];
              STACK[0x3118] = STACK[0x27D0];
              STACK[0x30E0] = v1413;
              STACK[0x3948] = v1413;
              v4035 = STACK[0x1340];
              STACK[0x3C20] = STACK[0x1340];
              STACK[0x3998] = v4009;
              STACK[0x3350] = v1404;
              STACK[0x30D0] = v1404;
              STACK[0x32E0] = v4016;
              STACK[0x3950] = v4016;
              STACK[0x3168] = v4005;
              STACK[0x2F10] = STACK[0x2418];
              STACK[0x2F08] = v4029;
              v4036 = STACK[0x27A8];
              STACK[0x2F18] = STACK[0x27A8];
              STACK[0x35F0] = STACK[0x3AD0];
              STACK[0x3C28] = v4010;
              STACK[0x2F00] = STACK[0x23E0];
              STACK[0x2EF8] = v4035;
              STACK[0x35E8] = STACK[0x3AD8];
              STACK[0x35E0] = STACK[0x3AE0];
              STACK[0x35D8] = STACK[0x3AE8];
              v4037 = STACK[0x1098];
              STACK[0x39B8] = STACK[0x1098];
              STACK[0x32B0] = v1449;
              STACK[0x30E8] = v1405;
              STACK[0x3940] = v1405;
              STACK[0x2EE8] = v4037;
              STACK[0x32A8] = v4017;
              STACK[0x2EF0] = v4024;
              STACK[0x2ED8] = v1447;
              STACK[0x3990] = v4024;
              STACK[0x2EE0] = v4017;
              STACK[0x35D0] = STACK[0x3AF0];
              STACK[0x2ED0] = STACK[0x15B8];
              STACK[0x3B48] = v4036;
              STACK[0x2EC0] = v4032;
              v4038 = STACK[0x3B90];
              STACK[0x32D8] = STACK[0x3B90];
              STACK[0x32A0] = v1446;
              v4039 = STACK[0x27B8];
              STACK[0x2EB8] = STACK[0x27B8];
              STACK[0x3B60] = v4037;
              STACK[0x3A58] = v4028;
              STACK[0x2EC8] = STACK[0x1588];
              STACK[0x2EB0] = STACK[0x23D8];
              STACK[0x30F0] = v4039;
              STACK[0x3298] = v1447;
              STACK[0x3B40] = v4033;
              STACK[0x2EA8] = STACK[0x2410];
              STACK[0x2EA0] = v4021;
              v4040 = STACK[0x27E0];
              STACK[0x3110] = STACK[0x27E0];
              STACK[0x2E98] = STACK[0x15C0];
              STACK[0x35C8] = STACK[0x3AF8];
              STACK[0x35C0] = STACK[0x3B08];
              STACK[0x35B8] = STACK[0x3B00];
              STACK[0x3800] = v4008;
              STACK[0x35B0] = STACK[0x3B10];
              STACK[0x3158] = v4021;
              STACK[0x35A8] = STACK[0x3B18];
              STACK[0x2E90] = STACK[0x23E8];
              STACK[0x37E0] = v4035;
              STACK[0x35A0] = STACK[0x3B20];
              STACK[0x30D8] = v4023;
              STACK[0x2E88] = v4038;
              STACK[0x2E78] = v4034;
              STACK[0x3598] = STACK[0x3B30];
              STACK[0x2E70] = v4008;
              STACK[0x2E68] = v4011;
              STACK[0x3588] = STACK[0x3B28];
              STACK[0x3818] = v4025;
              STACK[0x2E60] = STACK[0x2408];
              STACK[0x2E58] = v4031;
              STACK[0x2E80] = STACK[0x15A0];
              STACK[0x2E50] = v1446;
              STACK[0x3580] = STACK[0x3B38];
              STACK[0x2E48] = v4040;
              return ((uint64_t (*)(unint64_t))STACK[0x3C78])(v4030);
            case '^':
              v4041 = v1443 - 1658;
              v4042 = (STACK[0x3834] & 0x20) == 0;
              v4043 = STACK[0x1CF8];
              if ((v1444 & 0x20) == 0)
                v4043 = v1410;
              STACK[0x3828] = v4043;
              v4044 = STACK[0x2DE0];
              if ((v1444 & 0x20) == 0)
                v4044 = v1449;
              STACK[0x3318] = v4044;
              v4045 = STACK[0x1CB0];
              if ((v1444 & 0x20) == 0)
                v4045 = v1415 + v1409;
              STACK[0x3340] = v4045;
              STACK[0x3350] = v1404;
              v4046 = STACK[0x2CE8];
              if ((v1444 & 0x20) == 0)
                v4046 = STACK[0x1090];
              STACK[0x3BA0] = v4046;
              v4047 = STACK[0x2DE8];
              if ((v1444 & 0x20) == 0)
                v4047 = v1446;
              STACK[0x3320] = v4047;
              v4048 = STACK[0x2DA0];
              if ((v1444 & 0x20) == 0)
                v4048 = v1448;
              STACK[0x3330] = v4048;
              v4049 = v1442;
              v4050 = STACK[0x1320];
              v4051 = STACK[0x2CD0];
              if ((v1444 & 0x20) == 0)
                v4051 = STACK[0x1320];
              STACK[0x3B70] = v4051;
              v4052 = STACK[0x2DB8];
              if ((v1444 & 0x20) == 0)
                v4052 = STACK[0x818];
              STACK[0x3B78] = v4052;
              v4053 = STACK[0x2DC8];
              v4054 = STACK[0x3B80];
              if ((v1444 & 0x20) == 0)
                v4053 = STACK[0x3B80];
              STACK[0x3338] = v4053;
              v4055 = STACK[0x1310];
              v4056 = STACK[0x2CD8];
              if ((v1444 & 0x20) == 0)
                v4056 = STACK[0x1310];
              STACK[0x3B68] = v4056;
              v4057 = STACK[0x1CA8];
              if ((v1444 & 0x20) == 0)
                v4057 = v1405;
              STACK[0x3AC8] = v4057;
              v4058 = STACK[0x2DB0];
              if ((v1444 & 0x20) == 0)
                v4058 = v1450;
              STACK[0x3280] = v4058;
              v4059 = STACK[0x1CE8];
              if ((v1444 & 0x20) == 0)
                v4059 = v1419;
              STACK[0x3BD0] = v4059;
              v4060 = STACK[0x1CC0];
              v4061 = STACK[0x3368];
              if ((v1444 & 0x20) == 0)
                v4060 = STACK[0x3368];
              STACK[0x3348] = v4060;
              STACK[0x32E8] = v1419;
              v4062 = STACK[0x1070];
              v4063 = STACK[0x2CC8];
              if ((v1444 & 0x20) == 0)
                v4063 = STACK[0x1070];
              STACK[0x3288] = v4063;
              v4064 = STACK[0x1CB8];
              if ((v1444 & 0x20) == 0)
                v4064 = v1404;
              STACK[0x3250] = v4064;
              v4065 = STACK[0xC88];
              v4066 = STACK[0x2D98];
              if ((v1444 & 0x20) == 0)
                v4066 = STACK[0xC88];
              STACK[0x3278] = v4066;
              if ((v1444 & 0x20) != 0)
                v4067 = 95;
              else
                v4067 = 96;
              LODWORD(STACK[0x3BB8]) = v4067;
              v4068 = v1446;
              v4069 = STACK[0x1098];
              v4070 = STACK[0x2CF0];
              if ((v1444 & 0x20) == 0)
                v4070 = STACK[0x1098];
              STACK[0x3260] = v4070;
              v4071 = STACK[0x1348];
              v4072 = STACK[0x1CD0];
              if ((v1444 & 0x20) == 0)
                v4072 = v1413;
              STACK[0x3270] = v4072;
              v4073 = STACK[0x2DD8];
              v4074 = STACK[0x3C68];
              if ((v1444 & 0x20) == 0)
                v4073 = STACK[0x3C68];
              STACK[0x3238] = v4073;
              v4075 = STACK[0x2DD0];
              if ((v1444 & 0x20) == 0)
                v4075 = v1445;
              STACK[0x3258] = v4075;
              v4076 = STACK[0x1CD8];
              v4077 = STACK[0x3300];
              if ((v1444 & 0x20) == 0)
                v4076 = STACK[0x3300];
              STACK[0x3268] = v4076;
              v4078 = STACK[0x1CF0];
              if ((v1444 & 0x20) == 0)
                v4078 = v1407;
              STACK[0x3BC8] = v4078;
              v4079 = STACK[0x2CB0];
              if ((v1444 & 0x20) == 0)
                v4079 = STACK[0x1338];
              STACK[0x3248] = v4079;
              v4080 = STACK[0x1CE0];
              if ((v1444 & 0x20) == 0)
                v4080 = STACK[0x3358];
              STACK[0x3378] = v4080;
              v4081 = STACK[0x2DA8];
              if ((v1444 & 0x20) == 0)
                v4081 = STACK[0x820];
              STACK[0x3310] = v4081;
              STACK[0x30E8] = v1405;
              v4082 = STACK[0x1318];
              v4083 = STACK[0x2CF8];
              if ((v1444 & 0x20) == 0)
                v4083 = STACK[0x1318];
              STACK[0x3220] = v4083;
              STACK[0x3308] = v1410;
              v4084 = STACK[0x1340];
              STACK[0x3C78] = *(_QWORD *)(v4049 + 8 * v4041) - 4;
              if ((v1444 & 0x20) != 0)
                v4085 = STACK[0x1CC8];
              else
                v4085 = v1416;
              STACK[0x3370] = v4085;
              v4086 = STACK[0x1328];
              v4087 = STACK[0x1078];
              v4088 = STACK[0x2D28];
              STACK[0x32F0] = v1407;
              if (v4042)
                v4089 = v4087;
              else
                v4089 = v4088;
              LODWORD(STACK[0x760]) = 94;
              STACK[0x39E0] = v4050;
              STACK[0x31A8] = v4071;
              STACK[0x39E8] = v4062;
              STACK[0x39D8] = v1445;
              v4090 = STACK[0x818];
              STACK[0x39D0] = STACK[0x818];
              v4091 = STACK[0x1090];
              STACK[0x3840] = STACK[0x1090];
              STACK[0x32C8] = v4074;
              STACK[0x3158] = v4062;
              STACK[0x3BA8] = v4061;
              STACK[0x3848] = v4084;
              STACK[0x3C20] = v4084;
              STACK[0x3A00] = v4068;
              STACK[0x3328] = v4065;
              STACK[0x30E0] = v1413;
              STACK[0x3A10] = v1413;
              STACK[0x32F8] = v1417;
              STACK[0x37E8] = v1417;
              v4092 = STACK[0x3B88];
              STACK[0x39F0] = STACK[0x3B88];
              STACK[0x3850] = v4077;
              STACK[0x3240] = v4054;
              STACK[0x3858] = v4065;
              STACK[0x32B8] = v1445;
              STACK[0x32C0] = v1450;
              STACK[0x3A08] = v4087;
              STACK[0x3160] = v4086;
              STACK[0x3AD0] = v4055;
              STACK[0x32E0] = v1416;
              STACK[0x37F0] = v1416;
              STACK[0x3AD8] = v4074;
              STACK[0x3AE0] = v4086;
              STACK[0x3AE8] = v1450;
              STACK[0x3820] = v4087;
              STACK[0x32B0] = v4092;
              STACK[0x3290] = v4050;
              STACK[0x32A8] = v4054;
              STACK[0x3120] = v4055;
              STACK[0x3AF0] = v4069;
              STACK[0x3B60] = v4069;
              STACK[0x32A0] = v4068;
              STACK[0x3230] = v4090;
              STACK[0x3C28] = v4091;
              STACK[0x3298] = v1447;
              STACK[0x3228] = v1447;
              STACK[0x3AF8] = v4071;
              STACK[0x3B08] = STACK[0x30E8];
              STACK[0x3B00] = STACK[0x3B90];
              STACK[0x3B10] = STACK[0x820];
              STACK[0x3B18] = v4082;
              v4093 = STACK[0x1338];
              STACK[0x3800] = STACK[0x1338];
              STACK[0x3168] = v4082;
              STACK[0x3B20] = STACK[0x3308];
              STACK[0x3B30] = STACK[0x32E8];
              STACK[0x30D0] = STACK[0x3350];
              STACK[0x3B28] = v4093;
              STACK[0x3818] = STACK[0x3358];
              STACK[0x3B38] = STACK[0x32F0];
              return ((uint64_t (*)(unint64_t))STACK[0x3C78])(v4089);
            default:
              v4094 = (uint64_t (*)(_QWORD))(*(_QWORD *)(v1442
                                                                 + 8
                                                                 * ((v1443 - 1658) ^ (26417 * ((STACK[0x3834] & 1) == 0))))
                                                     - 4);
              LODWORD(STACK[0x3BB8]) = 105;
              STACK[0x3828] = STACK[0x1CF8];
              STACK[0x3318] = STACK[0x2DE0];
              v4095 = STACK[0x1320];
              STACK[0x39E0] = STACK[0x1320];
              STACK[0x3340] = STACK[0x1CB0];
              v4096 = STACK[0x1348];
              STACK[0x31A8] = STACK[0x1348];
              STACK[0x3BA0] = STACK[0x2CE8];
              STACK[0x3320] = STACK[0x2DE8];
              v4097 = STACK[0x1070];
              STACK[0x39E8] = STACK[0x1070];
              STACK[0x3330] = STACK[0x2DA0];
              STACK[0x3B70] = STACK[0x2CD0];
              STACK[0x3B78] = STACK[0x2DB8];
              STACK[0x3338] = STACK[0x2DC8];
              STACK[0x39D8] = v1445;
              STACK[0x3B68] = STACK[0x2CD8];
              STACK[0x3AC8] = STACK[0x1CA8];
              v4098 = STACK[0x818];
              STACK[0x39D0] = STACK[0x818];
              STACK[0x3280] = STACK[0x2DB0];
              v4099 = v1407;
              v4100 = v1410;
              v4101 = STACK[0x1090];
              STACK[0x3840] = STACK[0x1090];
              STACK[0x3BD0] = STACK[0x1CE8];
              v4102 = STACK[0x3C68];
              STACK[0x32C8] = STACK[0x3C68];
              STACK[0x3158] = v4097;
              STACK[0x3BA8] = STACK[0x3368];
              v4103 = STACK[0x1340];
              STACK[0x3848] = STACK[0x1340];
              STACK[0x3C20] = v4103;
              STACK[0x3348] = STACK[0x1CC0];
              STACK[0x3A00] = v1446;
              v4104 = STACK[0xC88];
              STACK[0x3328] = STACK[0xC88];
              STACK[0x3288] = STACK[0x2CC8];
              STACK[0x30E0] = v1413;
              STACK[0x3A10] = v1413;
              STACK[0x32F8] = v1417;
              STACK[0x37E8] = v1417;
              STACK[0x39F0] = v1449;
              STACK[0x3850] = STACK[0x3300];
              v4105 = STACK[0x3B80];
              STACK[0x3240] = STACK[0x3B80];
              STACK[0x3250] = STACK[0x1CB8];
              STACK[0x3858] = v4104;
              STACK[0x32B8] = v1445;
              STACK[0x3278] = STACK[0x2D98];
              STACK[0x32C0] = v1450;
              STACK[0x3260] = STACK[0x2CF0];
              v4106 = STACK[0x1078];
              STACK[0x3A08] = STACK[0x1078];
              STACK[0x3270] = STACK[0x1CD0];
              v4107 = STACK[0x1328];
              STACK[0x3160] = STACK[0x1328];
              STACK[0x3238] = STACK[0x2DD8];
              STACK[0x3258] = STACK[0x2DD0];
              v4108 = STACK[0x1310];
              STACK[0x3AD0] = STACK[0x1310];
              STACK[0x32E0] = v1416;
              STACK[0x37F0] = v1416;
              STACK[0x3AD8] = v4102;
              STACK[0x3AE0] = v4107;
              STACK[0x3AE8] = v1450;
              STACK[0x3820] = v4106;
              STACK[0x32B0] = v1449;
              STACK[0x3290] = v4095;
              STACK[0x32A8] = v4105;
              STACK[0x3268] = STACK[0x1CD8];
              STACK[0x3120] = v4108;
              v4109 = STACK[0x1098];
              STACK[0x3AF0] = STACK[0x1098];
              STACK[0x3BC8] = STACK[0x1CF0];
              STACK[0x3B60] = v4109;
              STACK[0x32A0] = v1446;
              STACK[0x3248] = STACK[0x2CB0];
              STACK[0x3230] = v4098;
              STACK[0x3C28] = v4101;
              STACK[0x3298] = v1447;
              STACK[0x3228] = v1447;
              STACK[0x3378] = STACK[0x1CE0];
              STACK[0x3310] = STACK[0x2DA8];
              STACK[0x3220] = STACK[0x2CF8];
              STACK[0x3AF8] = v4096;
              STACK[0x30E8] = v1405;
              STACK[0x3B08] = v1405;
              STACK[0x3B00] = v1448;
              STACK[0x3B10] = STACK[0x820];
              v4110 = STACK[0x1318];
              STACK[0x3B18] = STACK[0x1318];
              v4111 = STACK[0x1338];
              STACK[0x3800] = STACK[0x1338];
              STACK[0x3168] = v4110;
              STACK[0x3308] = v4100;
              STACK[0x3B20] = v4100;
              STACK[0x3370] = STACK[0x1CC8];
              STACK[0x32E8] = v1419;
              STACK[0x3B30] = v1419;
              STACK[0x3350] = v1404;
              STACK[0x30D0] = v1404;
              STACK[0x3B28] = v4111;
              STACK[0x3818] = STACK[0x3358];
              v4112 = STACK[0x2D28];
              STACK[0x32F0] = v4099;
              STACK[0x3B38] = v4099;
              return v4094(v4112);
          }
        }
        STACK[0x3C78] = *(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) + 5624))
                      - ((LODWORD(STACK[0x3710]) - 13377) | 0x2254u)
                      + 10836;
        STACK[0x3B30] = v1419;
        STACK[0x3B20] = v1410;
        STACK[0x3090] = v1413;
        STACK[0x3B08] = v1405;
        STACK[0x3088] = v1397;
        STACK[0x34D0] = v1410;
        STACK[0x34C8] = v1417;
        STACK[0x30C8] = v1405;
        STACK[0x3538] = v1410;
        STACK[0x3530] = v1419;
        STACK[0x3870] = v1399;
        STACK[0x34C0] = v1404;
        STACK[0x3528] = v1404;
        STACK[0x3A10] = v1413;
        STACK[0x34B8] = v1397;
        STACK[0x3BA8] = v1397;
        STACK[0x34A8] = v1413;
        STACK[0x34B0] = v1416;
        STACK[0x3838] = v1416;
        STACK[0x3860] = v1417;
        STACK[0x3518] = v1399;
        STACK[0x39F8] = v1404;
        STACK[0x3510] = v1416;
        STACK[0x3508] = v1419;
        STACK[0x3418] = v1417;
        STACK[0x3410] = v1399;
        STACK[0x3B38] = v1407;
        STACK[0x34D8] = v1407;
        STACK[0x3500] = v1407;
        STACK[0x3850] = v1393;
        STACK[0x3520] = v1393;
        STACK[0x3408] = v1393;
        LODWORD(STACK[0x3400]) = 102;
        v1420 = STACK[0x1078];
        STACK[0x3018] = STACK[0x1078];
        v1421 = STACK[0x1340];
        STACK[0x30C0] = STACK[0x1340];
        v1422 = STACK[0x1098];
        STACK[0x3010] = STACK[0x1098];
        v1423 = STACK[0x1338];
        STACK[0x3B28] = STACK[0x1338];
        v1424 = STACK[0x3BD8];
        STACK[0x3080] = STACK[0x3BD8];
        STACK[0x3078] = v1424;
        v1425 = STACK[0x1318];
        STACK[0x3B18] = STACK[0x1318];
        v1426 = STACK[0x820];
        STACK[0x3B10] = STACK[0x820];
        STACK[0x30B8] = v1421;
        v1427 = STACK[0x3B90];
        STACK[0x3B00] = STACK[0x3B90];
        v1428 = STACK[0x1348];
        STACK[0x3AF8] = STACK[0x1348];
        v1429 = STACK[0x1090];
        STACK[0x3008] = STACK[0x1090];
        v1430 = STACK[0x818];
        STACK[0x3070] = STACK[0x818];
        v1431 = STACK[0x1310];
        STACK[0x30B0] = STACK[0x1310];
        STACK[0x3068] = v1427;
        v1432 = STACK[0x3B98];
        STACK[0x3060] = STACK[0x3B98];
        STACK[0x3AF0] = v1422;
        v1433 = STACK[0x3B88];
        STACK[0x3058] = STACK[0x3B88];
        STACK[0x3000] = v1423;
        STACK[0x30A8] = v1428;
        STACK[0x3050] = v1426;
        v1434 = STACK[0x3360];
        STACK[0x3AE8] = STACK[0x3360];
        v1435 = STACK[0x1328];
        STACK[0x3AE0] = STACK[0x1328];
        STACK[0x3020] = v1435;
        v1436 = STACK[0x3C68];
        STACK[0x3AD8] = STACK[0x3C68];
        STACK[0x3AD0] = v1431;
        STACK[0x3A08] = v1420;
        STACK[0x2FF8] = v1431;
        v1437 = STACK[0xC88];
        STACK[0x3858] = STACK[0xC88];
        v1438 = STACK[0x1320];
        STACK[0x30A0] = STACK[0x1320];
        STACK[0x39F0] = v1433;
        v1439 = STACK[0x3B80];
        STACK[0x3868] = STACK[0x3B80];
        STACK[0x3048] = v1427;
        STACK[0x3A00] = v1424;
        STACK[0x3040] = v1430;
        STACK[0x3098] = v1420;
        STACK[0x3848] = v1421;
        STACK[0x39C8] = v1432;
        STACK[0x3038] = v1433;
        STACK[0x3030] = v1426;
        STACK[0x3028] = v1432;
        STACK[0x34F8] = v1438;
        STACK[0x3840] = v1429;
        STACK[0x39D0] = v1430;
        STACK[0x34A0] = v1437;
        STACK[0x34F0] = v1425;
        v1440 = STACK[0x1070];
        STACK[0x34E8] = STACK[0x1070];
        v1441 = STACK[0x3C60];
        STACK[0x3498] = STACK[0x3C60];
        STACK[0x3430] = v1440;
        STACK[0x3428] = v1423;
        STACK[0x3490] = v1439;
        STACK[0x39D8] = v1441;
        STACK[0x33F8] = v1422;
        STACK[0x33F0] = v1435;
        STACK[0x3420] = v1425;
        STACK[0x34E0] = v1429;
        STACK[0x33E8] = v1428;
        STACK[0x3488] = v1436;
        STACK[0x39E8] = v1440;
        STACK[0x3480] = v1434;
        STACK[0x3478] = v1437;
        STACK[0x3470] = v1436;
        STACK[0x3468] = v1434;
        STACK[0x3460] = v1441;
        STACK[0x39E0] = v1438;
        STACK[0x3458] = v1439;
        STACK[0x33E0] = v1425;
        STACK[0x3BB0] = v1422;
        STACK[0x3398] = v1423;
        STACK[0x33B0] = v1435;
        STACK[0x3390] = v1438;
        STACK[0x33A8] = v1428;
        return ((uint64_t (*)(void))STACK[0x3C78])();
      case 0x6Bu:
        STACK[0x3BF0] = v1331;
        STACK[0x3BC8] = v1313;
        STACK[0x3C00] = v1326;
        STACK[0x3BD0] = v1316;
        STACK[0x3C38] = v1321;
        STACK[0x3358] = 0x55D375369E9D4273;
        STACK[0x3368] = 0x763CBA0D8D3C0DB3;
        STACK[0x3238] = 0x6B6DACDBB1B23A60;
        STACK[0x3350] = 0x2A7C4B840EA88E36;
        STACK[0x3B78] = 0x3A2B4DBF7685AA90;
        STACK[0x3B70] = 0x2D624A8B717E2EF5;
        STACK[0x3370] = 0xE2EE0ABF51901782;
        STACK[0x3B68] = 0x20B24EBF4FF3EC18;
        STACK[0x39B0] = 0x875D7880B77E2434;
        STACK[0x3A18] = 0x8A61F9D599FFA3D5;
        STACK[0x3378] = 0xF7EA950B125152D8;
        v3826 = STACK[0x3710];
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        STACK[0x33C0] = STACK[0x3C50];
        STACK[0x33B8] = STACK[0x3C48];
        v3827 = STACK[0x2790];
        v3828 = STACK[0x2788];
        v3829 = STACK[0x2780];
        v3830 = STACK[0x2778];
        v3831 = STACK[0x3AB8];
        v3832 = STACK[0x3AB0];
        v3833 = STACK[0x3AA8];
        v4113 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70]
                                                                                   + 8 * ((v3826 + 5850) ^ 0x63))
                                                                       - (((v3826 + 1827251089) & 0x931637BF)
                                                                        + ((v3826 + 45857710) & 0xFD441B79 ^ 0xFFFFFFFFFFFFFB03)));
        LODWORD(STACK[0x2174]) = 0;
        STACK[0x3AB8] = v3831;
        STACK[0x3AB0] = v3832;
        STACK[0x3AA8] = v3833;
        return v4113(v3827, v3828, v3829, v3830);
      case 0x6Du:
        v3834 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * SLODWORD(STACK[0x518])) - 12);
        STACK[0x3BB8] = STACK[0x2710];
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        v3835 = STACK[0x2798];
        STACK[0x39B0] = v1313;
        v3836 = STACK[0x3B58];
        STACK[0x33C0] = STACK[0x3C50];
        v3837 = STACK[0x3B60];
        STACK[0x36C0] = STACK[0x3A70];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x36B8] = STACK[0x3A78];
        v3838 = STACK[0x3C78];
        STACK[0x3C50] = STACK[0x2770];
        STACK[0x3350] = v1326;
        v3839 = STACK[0x26F0];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x3238] = STACK[0x3C28];
        v3840 = STACK[0x3C20];
        v3841 = STACK[0x2778];
        STACK[0x33B8] = STACK[0x3C48];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x36B0] = STACK[0x3A80];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x3C40] = STACK[0x2780];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x36A8] = STACK[0x3A88];
        STACK[0x36A0] = STACK[0x39C0];
        STACK[0x3698] = STACK[0x3A90];
        STACK[0x3C48] = STACK[0x2788];
        STACK[0x3690] = STACK[0x3A98];
        return v3834(v3838, v3840, v3837, v3841, v3836, v3835, v3839, v1321);
      default:
        v1502 = v1331 * STACK[0x18E8];
        v1503 = (v1331 * (unsigned __int128)STACK[0x18E8]) >> 64;
        v334 = __CFADD__(15 * v1503, v1502);
        v1504 = 15 * v1503 + v1502;
        v1505 = (v1503 * (unsigned __int128)0xFuLL) >> 64;
        if (v334)
          ++v1505;
        v1506 = 15 * v1505;
        v1507 = v1506 + v1504 > 0xFFFFFFFFFFFFFFF0;
        v334 = __CFADD__(v1506, v1504);
        v1508 = v1506 + v1504;
        if (v334 || v1507)
          v1510 = 15;
        else
          v1510 = 0;
        v1511 = v1510 + v1508;
        v1512 = 0x9FEC52B6396CF0C0 * v1511;
        v1513 = (v1511 * (unsigned __int128)0x9FEC52B6396CF0C0) >> 64;
        v334 = __CFADD__(15 * v1513, v1512);
        v1514 = 15 * v1513 + v1512;
        v1515 = (v1513 * (unsigned __int128)0xFuLL) >> 64;
        if (v334)
          ++v1515;
        v1516 = 15 * v1515;
        v1517 = v1516 + v1514 > 0xFFFFFFFFFFFFFFF0;
        v334 = __CFADD__(v1516, v1514);
        v1518 = v1516 + v1514;
        if (v334 || v1517)
          v1520 = 15;
        else
          v1520 = 0;
        v1521 = v1520 + v1518;
        v1522 = 0x7FF97F97F97F97F2 * v1521;
        v1523 = (v1521 * (unsigned __int128)0x7FF97F97F97F97F2uLL) >> 64;
        v334 = __CFADD__(15 * v1523, v1522);
        v1524 = 15 * v1523 + v1522;
        v1525 = (v1523 * (unsigned __int128)0xFuLL) >> 64;
        if (v334)
          ++v1525;
        v1526 = 15 * v1525;
        v334 = __CFADD__(v1526, v1524);
        v1527 = v1526 + v1524;
        v1528 = v334;
        if (v1527 > 0xFFFFFFFFFFFFFFF0)
          v1528 = 1;
        if (v1528)
          v1529 = 15;
        else
          v1529 = 0;
        v1530 = v1529 + v1527;
        if (v1530 >= 0xFFFFFFFFFFFFFFCBLL)
          v1531 = 53;
        else
          v1531 = 0;
        v1532 = v1531 + v1530;
        v1533 = 5491200 * v1532;
        v1534 = 53 * ((v1532 * (unsigned __int128)0x53CA00uLL) >> 64);
        v334 = __CFADD__(v1534, v1533);
        v1535 = v1534 + v1533;
        if (v334)
          v1536 = 53;
        else
          v1536 = 0;
        v1537 = (unint64_t)(v1536 + v1535) > 0xFFFFFFFFFFFFFFCALL;
        v334 = __CFADD__(v1536, v1535);
        v1538 = v1536 + v1535;
        v1539 = v1326 * STACK[0x18F0];
        v1540 = (v1326 * (unsigned __int128)STACK[0x18F0]) >> 64;
        v1541 = v334 || v1537;
        v334 = __CFADD__(9 * v1540, v1539);
        v1542 = 9 * v1540 + v1539;
        v1543 = (v1540 * (unsigned __int128)9uLL) >> 64;
        if (v334)
          ++v1543;
        v1544 = 9 * v1543;
        v334 = __CFADD__(v1544, v1542);
        v1545 = v1544 + v1542;
        v1546 = v334;
        if (v1545 > 0xFFFFFFFFFFFFFFF6)
          v1546 = 1;
        if (v1546)
          v1547 = 9;
        else
          v1547 = 0;
        v1548 = v1547 + v1545;
        v1549 = 0x1513DAB390DF5A9ELL * v1548;
        v1550 = (__PAIR128__(8, 0x1513DAB390DF5A9ELL) * v1548) >> 64;
        v334 = __CFADD__(v1550, v1549);
        v1551 = v1550 + v1549;
        if (v334)
          v1552 = 9;
        else
          v1552 = 0;
        v1553 = (unint64_t)(v1552 + v1551) > 0xFFFFFFFFFFFFFFF6;
        v334 = __CFADD__(v1552, v1551);
        v1554 = v1552 + v1551;
        if (v334 || v1553)
          v1556 = 9;
        else
          v1556 = 0;
        v1557 = v1556 + v1554;
        v334 = __CFADD__((__PAIR128__(8, 0xD6E38E38E38E38DCLL) * v1557) >> 64, 0xD6E38E38E38E38DCLL * v1557);
        v1558 = (__PAIR128__(v1557, v1557) * __PAIR128__(8, 0xD6E38E38E38E38DCLL)) >> 64;
        v1559 = (((v1557 * (unsigned __int128)0xD6E38E38E38E38DCLL) >> 64) * 9) >> 64;
        if (v334)
          ++v1559;
        v1560 = 9 * v1559;
        v334 = __CFADD__(v1560, v1558);
        v1561 = v1560 + v1558;
        v1562 = v334;
        if (v1561 > 0xFFFFFFFFFFFFFFF6)
          v1562 = 1;
        if (v1562)
          v1563 = 9;
        else
          v1563 = 0;
        v1564 = v1563 + v1561;
        if (v1564 >= 0xFFFFFFFFFFFFFFCBLL)
          v1565 = 53;
        else
          v1565 = 0;
        v1566 = v1565 + v1564;
        v1567 = 4742400 * v1566;
        v1568 = 53 * ((v1566 * (unsigned __int128)0x485D00uLL) >> 64);
        v334 = __CFADD__(v1568, v1567);
        v1569 = v1568 + v1567;
        if (v334)
          v1570 = 53;
        else
          v1570 = 0;
        v1571 = (unint64_t)(v1570 + v1569) > 0xFFFFFFFFFFFFFFCALL;
        v334 = __CFADD__(v1570, v1569);
        v1572 = v1570 + v1569;
        v1573 = v1321 * STACK[0x18E0];
        v1574 = (v1321 * (unsigned __int128)STACK[0x18E0]) >> 64;
        v1575 = v334 || v1571;
        v334 = __CFADD__(5 * v1574, v1573);
        v1576 = 5 * v1574 + v1573;
        v1577 = (v1574 * (unsigned __int128)5uLL) >> 64;
        if (v334)
          ++v1577;
        v1578 = 5 * v1577;
        v1579 = v1578 + v1576 > 0xFFFFFFFFFFFFFFFALL;
        v334 = __CFADD__(v1578, v1576);
        v1580 = v1578 + v1576;
        if (v334 || v1579)
          v1582 = 5;
        else
          v1582 = 0;
        v1583 = v1582 + v1580;
        v334 = __CFADD__((__PAIR128__(4, 0xE7CF05C2128E4523) * v1583) >> 64, 0xE7CF05C2128E4523 * v1583);
        v1584 = (__PAIR128__(v1583, v1583) * __PAIR128__(4, 0xE7CF05C2128E4523)) >> 64;
        v1585 = (((v1583 * (unsigned __int128)0xE7CF05C2128E4523) >> 64) * 5) >> 64;
        if (v334)
          ++v1585;
        v1586 = 5 * v1585;
        v334 = __CFADD__(v1586, v1584);
        v1587 = v1586 + v1584;
        v1588 = v334;
        if (v1587 > 0xFFFFFFFFFFFFFFFALL)
          v1588 = 1;
        if (v1588)
          v1589 = 5;
        else
          v1589 = 0;
        v1590 = v1589 + v1587;
        v334 = __CFADD__((__PAIR128__(4, 0xD73333333333332FLL) * v1590) >> 64, 0xD73333333333332FLL * v1590);
        v1591 = (__PAIR128__(v1590, v1590) * __PAIR128__(4, 0xD73333333333332FLL)) >> 64;
        v1592 = (((v1590 * (unsigned __int128)0xD73333333333332FLL) >> 64) * 5) >> 64;
        if (v334)
          ++v1592;
        v1593 = 5 * v1592;
        v334 = __CFADD__(v1593, v1591);
        v1594 = v1593 + v1591;
        v1595 = v334;
        if (v1594 > 0xFFFFFFFFFFFFFFFALL)
          v1595 = 1;
        if (v1595)
          v1596 = 5;
        else
          v1596 = 0;
        v1597 = v1596 + v1594;
        if (v1597 >= 0xFFFFFFFFFFFFFFCBLL)
          v1598 = 53;
        else
          v1598 = 0;
        v1599 = v1598 + v1597;
        v1600 = 4347200 * v1599;
        v1601 = 53 * ((v1599 * (unsigned __int128)0x425540uLL) >> 64);
        v334 = __CFADD__(v1601, v1600);
        v1602 = v1601 + v1600;
        if (v334)
          v1603 = 53;
        else
          v1603 = 0;
        v1604 = (unint64_t)(v1603 + v1602) > 0xFFFFFFFFFFFFFFCALL;
        v334 = __CFADD__(v1603, v1602);
        v1605 = v1603 + v1602;
        v1606 = v1316 * STACK[0x18F8];
        v1607 = (v1316 * (unsigned __int128)STACK[0x18F8]) >> 64;
        if (v334)
          v1604 = 1;
        v334 = __CFADD__(3 * v1607, v1606);
        v1608 = 3 * v1607 + v1606;
        v1609 = (v1607 * (unsigned __int128)3uLL) >> 64;
        if (v334)
          ++v1609;
        v1610 = 3 * v1609;
        v334 = __CFADD__(v1610, v1608);
        v1611 = v1610 + v1608;
        v1612 = v334;
        if (v1611 > 0xFFFFFFFFFFFFFFFCLL)
          v1612 = 1;
        if (v1612)
          v1613 = 3;
        else
          v1613 = 0;
        v1614 = v1613 + v1611;
        v334 = __CFADD__((__PAIR128__(2, 0x98FDEF4CCE72A7B8) * v1614) >> 64, 0x98FDEF4CCE72A7B8 * v1614);
        v1615 = (__PAIR128__(v1614, v1614) * __PAIR128__(2, 0x98FDEF4CCE72A7B8)) >> 64;
        v1616 = (((v1614 * (unsigned __int128)0x98FDEF4CCE72A7B8) >> 64) * 3) >> 64;
        if (v334)
          ++v1616;
        v1617 = 3 * v1616;
        v334 = __CFADD__(v1617, v1615);
        v1618 = v1617 + v1615;
        v1619 = v334;
        if (v1618 > 0xFFFFFFFFFFFFFFFCLL)
          v1619 = 1;
        if (v1619)
          v1620 = 3;
        else
          v1620 = 0;
        v1621 = v1620 + v1618;
        v334 = __CFADD__((__PAIR128__(2, 0xF638E38E38E38E36) * v1621) >> 64, 0xF638E38E38E38E36 * v1621);
        v1622 = (__PAIR128__(v1621, v1621) * __PAIR128__(2, 0xF638E38E38E38E36)) >> 64;
        v1623 = (((v1621 * (unsigned __int128)0xF638E38E38E38E36) >> 64) * 3) >> 64;
        if (v334)
          ++v1623;
        v1624 = 3 * v1623;
        v1625 = (unint64_t)(v1624 + v1622) > 0xFFFFFFFFFFFFFFFCLL;
        v334 = __CFADD__(v1624, v1622);
        v1626 = v1624 + v1622;
        if (v334 || v1625)
          v1628 = 3;
        else
          v1628 = 0;
        v1629 = v1628 + v1626;
        if (v1629 >= 0xFFFFFFFFFFFFFFCBLL)
          v1630 = 53;
        else
          v1630 = 0;
        v1631 = v1630 + v1629;
        v1632 = 4173312 * v1631;
        v1633 = 53 * ((v1631 * (unsigned __int128)0x3FAE00uLL) >> 64);
        v334 = __CFADD__(v1633, v1632);
        v1634 = v1633 + v1632;
        if (v334)
          v1635 = 53;
        else
          v1635 = 0;
        v1636 = (unint64_t)(v1635 + v1634) > 0xFFFFFFFFFFFFFFCALL;
        v334 = __CFADD__(v1635, v1634);
        v1637 = v1635 + v1634;
        v1638 = v1313 * STACK[0x18D8];
        v1639 = (v1313 * (unsigned __int128)STACK[0x18D8]) >> 64;
        if (v334)
          v1636 = 1;
        v1640 = __CFADD__(__CFADD__(v1639, v1638), v1639 + v1638);
        v1641 = __CFADD__(v1639, v1638) + v1639 + v1638 == -1 || v1640;
        v1642 = v1639 + v1638 + __CFADD__(v1639, v1638) + v1641;
        v1643 = (v1642 * (unsigned __int128)0x5CAECC2F8BD67150uLL) >> 64;
        v1644 = 0x5CAECC2F8BD67150 * v1642;
        v1645 = __CFADD__(__CFADD__(v1643, v1644), v1643 + v1644);
        v1646 = __CFADD__(v1643, v1644) + v1643 + v1644 == -1 || v1645;
        v1647 = v1643 + v1644 + __CFADD__(v1643, v1644) + v1646;
        v1648 = ((unint64_t)v1647 * (unsigned __int128)0xDBB6DB6DB6DB6DB6) >> 64;
        v1649 = 0xDBB6DB6DB6DB6DB6 * v1647;
        v1650 = __CFADD__(__CFADD__(v1648, v1649), v1648 + v1649);
        v1651 = __CFADD__(v1648, v1649) + v1648 + v1649 == -1 || v1650;
        v1652 = v1648 + v1649 + __CFADD__(v1648, v1649) + v1651;
        if (v1652 >= 0xFFFFFFFFFFFFFFCBLL)
          v1653 = 53;
        else
          v1653 = 0;
        v1654 = v1653 + v1652;
        v1655 = 4012800 * v1654;
        v1656 = 53 * ((v1654 * (unsigned __int128)0x3D3B00uLL) >> 64);
        v334 = __CFADD__(v1656, v1655);
        v1657 = v1656 + v1655;
        if (v334)
          v1658 = 53;
        else
          v1658 = 0;
        v334 = __CFADD__(v1658, v1657);
        v1659 = v1658 + v1657;
        v1660 = v334;
        if (v1659 > 0xFFFFFFFFFFFFFFCALL)
          v1660 = 1;
        if (v1660)
          v1661 = 53;
        else
          v1661 = 0;
        v1662 = v1661 + v1659;
        if (v1662 >= 0xFFFFFFFFFFFFFFCBLL)
          v1663 = 53;
        else
          v1663 = 0;
        v1664 = v1663 + v1662;
        v1665 = v1637 + v1664;
        if (v1636)
          v1666 = 53;
        else
          v1666 = 0;
        v1667 = v1665 + v1666;
        if (v1604)
          v1668 = 53;
        else
          v1668 = 0;
        v1669 = v1668 + v1605;
        if (v1667 < v1664 || v1667 > 0xFFFFFFFFFFFFFFCALL)
          v1671 = 53;
        else
          v1671 = 0;
        v1672 = v1671 + v1667;
        v1673 = v1669 + v1672 > 0xFFFFFFFFFFFFFFCALL;
        v334 = __CFADD__(v1669, v1672);
        v1674 = v1669 + v1672;
        if (v334 || v1673)
          v1676 = 53;
        else
          v1676 = 0;
        v1677 = v1676 + v1674;
        if (v1575)
          v1678 = 53;
        else
          v1678 = 0;
        v1679 = v1678 + v1572;
        v1680 = v1679 + v1677 > 0xFFFFFFFFFFFFFFCALL;
        v334 = __CFADD__(v1679, v1677);
        v1681 = v1679 + v1677;
        if (v334)
          v1680 = 1;
        if (v1680)
          v1682 = 53;
        else
          v1682 = 0;
        v1683 = v1682 + v1681;
        if (v1541)
          v1684 = 53;
        else
          v1684 = 0;
        v1685 = v1684 + v1538;
        v1686 = v1685 + v1683 > 0xFFFFFFFFFFFFFFCALL;
        v334 = __CFADD__(v1685, v1683);
        v1687 = v1685 + v1683;
        v1688 = STACK[0x3C78] * STACK[0x1900];
        v1689 = (STACK[0x3C78] * (unsigned __int128)STACK[0x1900]) >> 64;
        if (v334)
          v1686 = 1;
        v334 = __CFADD__(53 * v1689, v1688);
        v1690 = 53 * v1689 + v1688;
        v1691 = (v1689 * (unsigned __int128)0x35uLL) >> 64;
        if (v334)
          ++v1691;
        v1692 = 53 * v1691;
        v334 = __CFADD__(v1692, v1690);
        v1693 = v1692 + v1690;
        v1694 = v334;
        if (v1693 > 0xFFFFFFFFFFFFFFCALL)
          v1694 = 1;
        if (v1694)
          v1695 = 53;
        else
          v1695 = 0;
        v1696 = v1695 + v1693;
        if (v1686)
          v1697 = 53;
        else
          v1697 = 0;
        v1698 = v1697 + v1687;
        v1699 = 0xA64A3E2F1B4DE8E6 * v1698;
        v1700 = (v1698 * (unsigned __int128)0xA64A3E2F1B4DE8E6) >> 64;
        v334 = __CFADD__(53 * v1700, v1699);
        v1701 = 53 * v1700 + v1699;
        v1702 = (v1700 * (unsigned __int128)0x35uLL) >> 64;
        if (v334)
          ++v1702;
        v1703 = 53 * v1702;
        v334 = __CFADD__(v1703, v1701);
        v1704 = v1703 + v1701;
        v1705 = v334;
        if (v1704 > 0xFFFFFFFFFFFFFFCALL)
          v1705 = 1;
        if (v1705)
          v1706 = 53;
        else
          v1706 = 0;
        v1707 = v1706 + v1704;
        v334 = __CFADD__(v1696, v1707);
        v1708 = v1696 + v1707;
        v1709 = v334;
        if (v1708 > 0xFFFFFFFFFFFFFFCALL)
          v1709 = 1;
        if (v1709)
          v1710 = 53;
        else
          v1710 = 0;
        v1711 = v1710 + v1708;
        v1712 = 0x59708602BDC08F49 * v1711;
        v1713 = (v1711 * (unsigned __int128)0x59708602BDC08F49uLL) >> 64;
        v334 = __CFADD__(53 * v1713, v1712);
        v1714 = 53 * v1713 + v1712;
        v1715 = (v1713 * (unsigned __int128)0x35uLL) >> 64;
        if (v334)
          ++v1715;
        v1716 = 53 * v1715;
        v1717 = (unint64_t)(v1716 + v1714) > 0xFFFFFFFFFFFFFFCALL;
        v334 = __CFADD__(v1716, v1714);
        v1718 = v1716 + v1714;
        v1719 = v334 || v1717;
        if (v1530 >= 0xFFFFFFFFFFFFFFD1)
          v1720 = 47;
        else
          v1720 = 0;
        v1721 = v1720 + v1530;
        v1722 = 3230304 * v1721;
        v1723 = 47 * ((v1721 * (unsigned __int128)0x314A60uLL) >> 64);
        v334 = __CFADD__(v1723, v1722);
        v1724 = v1723 + v1722;
        if (v334)
          v1725 = 47;
        else
          v1725 = 0;
        v1726 = (unint64_t)(v1725 + v1724) > 0xFFFFFFFFFFFFFFD0;
        v334 = __CFADD__(v1725, v1724);
        v1727 = v1725 + v1724;
        v1728 = v334 || v1726;
        if (v1597 >= 0xFFFFFFFFFFFFFFD1)
          v1729 = 47;
        else
          v1729 = 0;
        v1730 = v1729 + v1597;
        v1731 = 2461184 * v1730;
        v1732 = 47 * ((v1730 * (unsigned __int128)0x258E00uLL) >> 64);
        v334 = __CFADD__(v1732, v1731);
        v1733 = v1732 + v1731;
        if (v334)
          v1734 = 47;
        else
          v1734 = 0;
        v1735 = (unint64_t)(v1734 + v1733) > 0xFFFFFFFFFFFFFFD0;
        v334 = __CFADD__(v1734, v1733);
        v1736 = v1734 + v1733;
        v1737 = v334 || v1735;
        if (v1629 >= 0xFFFFFFFFFFFFFFD1)
          v1738 = 47;
        else
          v1738 = 0;
        v1739 = v1738 + v1629;
        v1740 = 2349312 * v1739;
        v1741 = 47 * ((v1739 * (unsigned __int128)0x23D900uLL) >> 64);
        v334 = __CFADD__(v1741, v1740);
        v1742 = v1741 + v1740;
        if (v334)
          v1743 = 47;
        else
          v1743 = 0;
        v1744 = (unint64_t)(v1743 + v1742) > 0xFFFFFFFFFFFFFFD0;
        v334 = __CFADD__(v1743, v1742);
        v1745 = v1743 + v1742;
        v1746 = v334 || v1744;
        if (v1652 >= 0xFFFFFFFFFFFFFFD1)
          v1747 = 47;
        else
          v1747 = 0;
        v1748 = v1747 + v1652;
        v1749 = 2247168 * v1748;
        v1750 = 47 * ((v1748 * (unsigned __int128)0x224A00uLL) >> 64);
        v334 = __CFADD__(v1750, v1749);
        v1751 = v1750 + v1749;
        if (v334)
          v1752 = 47;
        else
          v1752 = 0;
        v1753 = (unint64_t)(v1752 + v1751) > 0xFFFFFFFFFFFFFFD0;
        v334 = __CFADD__(v1752, v1751);
        v1754 = v1752 + v1751;
        if (v334 || v1753)
          v1756 = 47;
        else
          v1756 = 0;
        v1757 = v1756 + v1754;
        if (v1746)
          v1758 = 47;
        else
          v1758 = 0;
        if (v1757 >= 0xFFFFFFFFFFFFFFD1)
          v1759 = 47;
        else
          v1759 = 0;
        v1760 = v1759 + v1757;
        v1761 = v1745 + v1760 + v1758;
        if (v1761 <= 0xFFFFFFFFFFFFFFD0 && v1761 >= v1760)
          v1763 = 0;
        else
          v1763 = 47;
        v1764 = v1763 + v1761;
        if (v1737)
          v1765 = 47;
        else
          v1765 = 0;
        v1766 = v1765 + v1736;
        v1767 = v1766 + v1764 > 0xFFFFFFFFFFFFFFD0;
        v334 = __CFADD__(v1766, v1764);
        v1768 = v1766 + v1764;
        if (v334)
          v1767 = 1;
        if (v1564 >= 0xFFFFFFFFFFFFFFD1)
          v1769 = 47;
        else
          v1769 = 0;
        v2767 = !v1767;
        v1770 = v1769 + v1564;
        v1771 = 2720256 * (v1769 + v1564);
        v1772 = 47 * ((v1770 * (unsigned __int128)0x298200uLL) >> 64);
        if (v2767)
          v1773 = 0;
        else
          v1773 = 47;
        v334 = __CFADD__(v1772, v1771);
        v1774 = v1772 + v1771;
        if (v334)
          v1775 = 47;
        else
          v1775 = 0;
        v334 = __CFADD__(v1775, v1774);
        v1776 = v1775 + v1774;
        v1777 = v1773 + v1768;
        v1778 = v334;
        if (v1776 > 0xFFFFFFFFFFFFFFD0)
          v1778 = 1;
        if (v1778)
          v1779 = 47;
        else
          v1779 = 0;
        v1780 = v1779 + v1776;
        v1781 = v1780 + v1777 > 0xFFFFFFFFFFFFFFD0;
        v334 = __CFADD__(v1780, v1777);
        v1782 = v1780 + v1777;
        if (v334 || v1781)
          v1784 = 47;
        else
          v1784 = 0;
        v1785 = v1784 + v1782;
        if (v1728)
          v1786 = 47;
        else
          v1786 = 0;
        v1787 = v1786 + v1727;
        v334 = __CFADD__(v1787, v1785);
        v1788 = v1787 + v1785;
        v1789 = v334;
        if (v1788 > 0xFFFFFFFFFFFFFFD0)
          v1789 = 1;
        if (v1789)
          v1790 = 47;
        else
          v1790 = 0;
        v1791 = v1790 + v1788;
        v1792 = 0xF9CF898C924065FBLL * v1791;
        v1793 = (v1791 * (unsigned __int128)0xF9CF898C924065FBLL) >> 64;
        v334 = __CFADD__(47 * v1793, v1792);
        v1794 = 47 * v1793 + v1792;
        v1795 = (v1793 * (unsigned __int128)0x2FuLL) >> 64;
        if (v334)
          ++v1795;
        v1796 = 47 * v1795;
        v1797 = v1796 + v1794 > 0xFFFFFFFFFFFFFFD0;
        v334 = __CFADD__(v1796, v1794);
        v1798 = v1796 + v1794;
        v1799 = STACK[0x3B58] * STACK[0x1920];
        v1800 = (STACK[0x3B58] * (unsigned __int128)STACK[0x1920]) >> 64;
        if (v334)
          v1797 = 1;
        v334 = __CFADD__(47 * v1800, v1799);
        v1801 = 47 * v1800 + v1799;
        v1802 = (v1800 * (unsigned __int128)0x2FuLL) >> 64;
        if (v334)
          ++v1802;
        v1803 = 47 * v1802;
        v1804 = v1803 + v1801 > 0xFFFFFFFFFFFFFFD0;
        v334 = __CFADD__(v1803, v1801);
        v1805 = v1803 + v1801;
        if (v334 || v1804)
          v1807 = 47;
        else
          v1807 = 0;
        v1808 = v1807 + v1805;
        if (v1797)
          v1809 = 47;
        else
          v1809 = 0;
        v1810 = v1809 + v1798;
        v334 = __CFADD__(v1808, v1810);
        v1811 = v1808 + v1810;
        v1812 = v334;
        if (v1811 > 0xFFFFFFFFFFFFFFD0)
          v1812 = 1;
        if (v1812)
          v1813 = 47;
        else
          v1813 = 0;
        v1814 = v1813 + v1811;
        v1815 = 0x5C1DC82ED83E4DC6 * v1814;
        v1816 = (v1814 * (unsigned __int128)0x5C1DC82ED83E4DC6uLL) >> 64;
        v334 = __CFADD__(47 * v1816, v1815);
        v1817 = 47 * v1816 + v1815;
        v1818 = (v1816 * (unsigned __int128)0x2FuLL) >> 64;
        if (v334)
          ++v1818;
        v1819 = 47 * v1818;
        v334 = __CFADD__(v1819, v1817);
        v1820 = v1819 + v1817;
        v1821 = v334;
        if (v1820 > 0xFFFFFFFFFFFFFFD0)
          v1821 = 1;
        if (v1719)
          v1822 = 53;
        else
          v1822 = 0;
        v1823 = v1822 + v1718;
        v1824 = 0x74605CE0F105902CLL * v1823;
        v1825 = ((unint64_t)v1823 * (unsigned __int128)0x74605CE0F105902CuLL) >> 64;
        v334 = __CFADD__(53 * v1825, v1824);
        v1826 = 53 * v1825 + v1824;
        v1827 = (v1825 * (unsigned __int128)0x35uLL) >> 64;
        if (v334)
          ++v1827;
        v1828 = 53 * v1827;
        v334 = __CFADD__(v1828, v1826);
        v1829 = v1828 + v1826;
        v1830 = v334;
        if (v1829 > 0xFFFFFFFFFFFFFFCALL)
          v1830 = 1;
        if (v1830)
          v1831 = 53;
        else
          v1831 = 0;
        v1832 = v1831 + v1829;
        if (v1821)
          v1833 = 47;
        else
          v1833 = 0;
        v1834 = v1833 + v1820;
        if (v1832 >= 0xFFFFFFFFFFFFFFD1)
          v1835 = 47;
        else
          v1835 = 0;
        v1836 = v1835 + v1832;
        v1837 = 0xF9CF898C924065FBLL * v1836;
        v1838 = (v1836 * (unsigned __int128)0xF9CF898C924065FBLL) >> 64;
        v334 = __CFADD__(47 * v1838, v1837);
        v1839 = 47 * v1838 + v1837;
        v1840 = (v1838 * (unsigned __int128)0x2FuLL) >> 64;
        if (v334)
          ++v1840;
        v1841 = 47 * v1840;
        v334 = __CFADD__(v1841, v1839);
        v1842 = v1841 + v1839;
        v1843 = v334;
        if (v1842 > 0xFFFFFFFFFFFFFFD0)
          v1843 = 1;
        if (v1843)
          v1844 = 47;
        else
          v1844 = 0;
        v1845 = v1844 + v1842;
        v334 = __CFADD__(v1834, v1845);
        v1846 = v1834 + v1845;
        v1847 = v334;
        if (v1846 > 0xFFFFFFFFFFFFFFD0)
          v1847 = 1;
        if (v1847)
          v1848 = 47;
        else
          v1848 = 0;
        v1849 = v1848 + v1846;
        v1850 = 0xD55555555555552ELL * v1849;
        v1851 = (v1849 * (unsigned __int128)0xD55555555555552ELL) >> 64;
        v334 = __CFADD__(47 * v1851, v1850);
        v1852 = 47 * v1851 + v1850;
        v1853 = (v1851 * (unsigned __int128)0x2FuLL) >> 64;
        if (v334)
          ++v1853;
        v1854 = 47 * v1853;
        v1855 = v1854 + v1852 > 0xFFFFFFFFFFFFFFD0;
        v334 = __CFADD__(v1854, v1852);
        v1856 = v1854 + v1852;
        if (v334)
          v1855 = 1;
        if (v1564 >= 0xFFFFFFFFFFFFFFEFLL)
          v1857 = 17;
        else
          v1857 = 0;
        v1858 = v1857 + v1564;
        v1859 = 5376 * v1858;
        v1860 = (__PAIR128__(16, 5376) * v1858) >> 64;
        v334 = __CFADD__(v1860, v1859);
        v1861 = v1860 + v1859;
        if (v334)
          v1862 = 17;
        else
          v1862 = 0;
        v1863 = (unint64_t)(v1862 + v1861) > 0xFFFFFFFFFFFFFFEELL;
        v334 = __CFADD__(v1862, v1861);
        v1864 = v1862 + v1861;
        v1865 = v334 || v1863;
        if (v1597 >= 0xFFFFFFFFFFFFFFEFLL)
          v1866 = 17;
        else
          v1866 = 0;
        v1867 = v1866 + v1597;
        v1868 = 3584 * v1867;
        v1869 = (__PAIR128__(16, 3584) * v1867) >> 64;
        v334 = __CFADD__(v1869, v1868);
        v1870 = v1869 + v1868;
        if (v334)
          v1871 = 17;
        else
          v1871 = 0;
        v1872 = (unint64_t)(v1871 + v1870) > 0xFFFFFFFFFFFFFFEELL;
        v334 = __CFADD__(v1871, v1870);
        v1873 = v1871 + v1870;
        v1874 = v334 || v1872;
        if (v1629 >= 0xFFFFFFFFFFFFFFEFLL)
          v1875 = 17;
        else
          v1875 = 0;
        v1876 = v1875 + v1629;
        v1877 = 3 * v1876;
        v1878 = (__PAIR128__(16, 3072) * v1876) >> 64;
        v334 = __CFADD__(v1878, v1877 << 10);
        v1879 = v1878 + (v1877 << 10);
        if (v334)
          v1880 = 17;
        else
          v1880 = 0;
        v1881 = (unint64_t)(v1880 + v1879) > 0xFFFFFFFFFFFFFFEELL;
        v334 = __CFADD__(v1880, v1879);
        v1882 = v1880 + v1879;
        v1883 = v334 || v1881;
        if (v1652 >= 0xFFFFFFFFFFFFFFEFLL)
          v1884 = 17;
        else
          v1884 = 0;
        v1885 = v1884 + v1652;
        v1886 = 2688 * v1885;
        v1887 = (__PAIR128__(16, 2688) * v1885) >> 64;
        v334 = __CFADD__(v1887, v1886);
        v1888 = v1887 + v1886;
        if (v334)
          v1889 = 17;
        else
          v1889 = 0;
        v334 = __CFADD__(v1889, v1888);
        v1890 = v1889 + v1888;
        v1891 = v334;
        if (v1890 > 0xFFFFFFFFFFFFFFEELL)
          v1891 = 1;
        if (v1891)
          v1892 = 17;
        else
          v1892 = 0;
        v1893 = v1892 + v1890;
        if (v1893 >= 0xFFFFFFFFFFFFFFEFLL)
          v1894 = 17;
        else
          v1894 = 0;
        v1895 = v1894 + v1893;
        v1896 = v1882 + v1895;
        if (v1883)
          v1897 = 17;
        else
          v1897 = 0;
        v1898 = v1896 + v1897;
        if (v1898 > 0xFFFFFFFFFFFFFFEELL || v1895 > v1898)
          v1900 = 17;
        else
          v1900 = 0;
        v1901 = v1900 + v1898;
        if (v1874)
          v1902 = 17;
        else
          v1902 = 0;
        v1903 = v1902 + v1873;
        v334 = __CFADD__(v1903, v1901);
        v1904 = v1903 + v1901;
        v1905 = v334;
        if (v1904 > 0xFFFFFFFFFFFFFFEELL)
          v1905 = 1;
        if (v1905)
          v1906 = 17;
        else
          v1906 = 0;
        v1907 = v1906 + v1904;
        if (v1865)
          v1908 = 17;
        else
          v1908 = 0;
        v1909 = v1908 + v1864;
        v1910 = v1909 + v1907 > 0xFFFFFFFFFFFFFFEELL;
        v334 = __CFADD__(v1909, v1907);
        v1911 = v1909 + v1907;
        if (v334)
          v1910 = 1;
        if (v1530 >= 0xFFFFFFFFFFFFFFEFLL)
          v1912 = 17;
        else
          v1912 = 0;
        v2767 = !v1910;
        v1913 = v1912 + v1530;
        v1914 = 21504 * (v1912 + v1530);
        v1915 = (__PAIR128__(16, 21504) * v1913) >> 64;
        if (v2767)
          v1916 = 0;
        else
          v1916 = 17;
        v334 = __CFADD__(v1915, v1914);
        v1917 = v1915 + v1914;
        v1918 = v1916 + v1911;
        if (v334)
          v1919 = 17;
        else
          v1919 = 0;
        v334 = __CFADD__(v1919, v1917);
        v1920 = v1919 + v1917;
        v1921 = v334;
        if (v1920 > 0xFFFFFFFFFFFFFFEELL)
          v1921 = 1;
        if (v1921)
          v1922 = 17;
        else
          v1922 = 0;
        v1923 = v1922 + v1920;
        v1924 = v1923 + v1918 > 0xFFFFFFFFFFFFFFEELL;
        v334 = __CFADD__(v1923, v1918);
        v1925 = v1923 + v1918;
        if (v334 || v1924)
          v1927 = 17;
        else
          v1927 = 0;
        v1928 = v1927 + v1925;
        v334 = __CFADD__((__PAIR128__(16, 0xBCE0B40AAD3903CALL) * v1928) >> 64, 0xBCE0B40AAD3903CALL * v1928);
        v1929 = (__PAIR128__(v1928, v1928) * __PAIR128__(16, 0xBCE0B40AAD3903CALL)) >> 64;
        v1930 = (((v1928 * (unsigned __int128)0xBCE0B40AAD3903CALL) >> 64) * 0x11) >> 64;
        if (v334)
          ++v1930;
        v1931 = 17 * v1930;
        v1932 = (unint64_t)(v1931 + v1929) > 0xFFFFFFFFFFFFFFEELL;
        v334 = __CFADD__(v1931, v1929);
        v1933 = v1931 + v1929;
        v1934 = STACK[0x3B60] * STACK[0x1910];
        v1935 = (STACK[0x3B60] * (unsigned __int128)STACK[0x1910]) >> 64;
        if (v334)
          v1932 = 1;
        v334 = __CFADD__(17 * v1935, v1934);
        v1936 = 17 * v1935 + v1934;
        v1937 = (v1935 * (unsigned __int128)0x11uLL) >> 64;
        if (v334)
          ++v1937;
        v1938 = 17 * v1937;
        v1939 = v1938 + v1936 > 0xFFFFFFFFFFFFFFEELL;
        v334 = __CFADD__(v1938, v1936);
        v1940 = v1938 + v1936;
        if (v334 || v1939)
          v1942 = 17;
        else
          v1942 = 0;
        v1943 = v1942 + v1940;
        if (v1932)
          v1944 = 17;
        else
          v1944 = 0;
        v1945 = v1944 + v1933;
        v334 = __CFADD__(v1943, v1945);
        v1946 = v1943 + v1945;
        v1947 = v334;
        if (v1946 > 0xFFFFFFFFFFFFFFEELL)
          v1947 = 1;
        if (v1947)
          v1948 = 17;
        else
          v1948 = 0;
        v1949 = v1948 + v1946;
        v334 = __CFADD__((__PAIR128__(16, 0x260186186186185FLL) * v1949) >> 64, 0x260186186186185FLL * v1949);
        v1950 = (__PAIR128__(v1949, v1949) * __PAIR128__(16, 0x260186186186185FLL)) >> 64;
        v1951 = (((v1949 * (unsigned __int128)0x260186186186185FuLL) >> 64) * 0x11) >> 64;
        if (v334)
          ++v1951;
        v1952 = 17 * v1951;
        v334 = __CFADD__(v1952, v1950);
        v1953 = v1952 + v1950;
        v1954 = v334;
        if (v1953 > 0xFFFFFFFFFFFFFFEELL)
          v1954 = 1;
        if (v1954)
          v1955 = 17;
        else
          v1955 = 0;
        v1956 = v1955 + v1953;
        if (v1832 >= 0xFFFFFFFFFFFFFFEFLL)
          v1957 = 17;
        else
          v1957 = 0;
        v1958 = v1957 + v1832;
        v334 = __CFADD__((__PAIR128__(16, 0xBCE0B40AAD3903CALL) * v1958) >> 64, 0xBCE0B40AAD3903CALL * v1958);
        v1959 = (__PAIR128__(v1958, v1958) * __PAIR128__(16, 0xBCE0B40AAD3903CALL)) >> 64;
        v1960 = (((v1958 * (unsigned __int128)0xBCE0B40AAD3903CALL) >> 64) * 0x11) >> 64;
        if (v334)
          ++v1960;
        v1961 = 17 * v1960;
        v334 = __CFADD__(v1961, v1959);
        v1962 = v1961 + v1959;
        v1963 = v334;
        if (v1962 > 0xFFFFFFFFFFFFFFEELL)
          v1963 = 1;
        if (v1963)
          v1964 = 17;
        else
          v1964 = 0;
        v1965 = v1964 + v1962;
        v334 = __CFADD__(v1956, v1965);
        v1966 = v1956 + v1965;
        v1967 = v334;
        if (v1966 > 0xFFFFFFFFFFFFFFEELL)
          v1967 = 1;
        if (v1967)
          v1968 = 17;
        else
          v1968 = 0;
        v1969 = v1968 + v1966;
        v334 = __CFADD__((__PAIR128__(16, 0xF8E38E38E38E38D3) * v1969) >> 64, 0xF8E38E38E38E38D3 * v1969);
        v1970 = (__PAIR128__(v1969, v1969) * __PAIR128__(16, 0xF8E38E38E38E38D3)) >> 64;
        v1971 = (((v1969 * (unsigned __int128)0xF8E38E38E38E38D3) >> 64) * 0x11) >> 64;
        if (v334)
          ++v1971;
        v1972 = 17 * v1971;
        v1973 = (unint64_t)(v1972 + v1970) > 0xFFFFFFFFFFFFFFEELL;
        v334 = __CFADD__(v1972, v1970);
        v1974 = v1972 + v1970;
        if (v334 || v1973)
          v1976 = 17;
        else
          v1976 = 0;
        v1977 = v1976 + v1974;
        if (v1855)
          v1978 = 47;
        else
          v1978 = 0;
        v1979 = v1978 + v1856;
        if (v1977 >= 0xFFFFFFFFFFFFFFD1)
          v1980 = 47;
        else
          v1980 = 0;
        v1981 = v1980 + v1977;
        v334 = v1979 >= v1981;
        v1982 = v1979 - v1981;
        if (v334)
          v1983 = 0;
        else
          v1983 = -47;
        v1984 = v1982 + v1983;
        v1985 = 0x888888888888887 * v1984;
        v1986 = (v1984 * (unsigned __int128)0x888888888888887uLL) >> 64;
        v334 = __CFADD__(47 * v1986, v1985);
        v1987 = 47 * v1986 + v1985;
        v1988 = (v1986 * (unsigned __int128)0x2FuLL) >> 64;
        if (v334)
          ++v1988;
        v1989 = 47 * v1988;
        v1990 = (unint64_t)(v1989 + v1987) > 0xFFFFFFFFFFFFFFD0;
        v1991 = v1989 + v1987;
        if (__CFADD__(v1989, v1987))
          v1990 = 1;
        if (v1832 >= 0xFFFFFFFFFFFFFFD3)
          v1992 = 45;
        else
          v1992 = 0;
        v1993 = v1992 + v1832;
        v1994 = 0xB1035F48A597370CLL * v1993;
        v1995 = (v1993 * (unsigned __int128)0xB1035F48A597370CLL) >> 64;
        v334 = __CFADD__(45 * v1995, v1994);
        v1996 = 45 * v1995 + v1994;
        v1997 = (v1995 * (unsigned __int128)0x2DuLL) >> 64;
        if (v334)
          ++v1997;
        v1998 = 45 * v1997;
        v1999 = v1998 + v1996 > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v1998, v1996);
        v2000 = v1998 + v1996;
        v2001 = v334 || v1999;
        if (v1564 >= 0xFFFFFFFFFFFFFFD3)
          v2002 = 45;
        else
          v2002 = 0;
        v2003 = v2002 + v1564;
        v2004 = 2217600 * v2003;
        v2005 = 45 * ((v2003 * (unsigned __int128)0x21D680uLL) >> 64);
        v334 = __CFADD__(v2005, v2004);
        v2006 = v2005 + v2004;
        if (v334)
          v2007 = 45;
        else
          v2007 = 0;
        v2008 = (unint64_t)(v2007 + v2006) > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v2007, v2006);
        v2009 = v2007 + v2006;
        v2010 = v334 || v2008;
        if (v1652 >= 0xFFFFFFFFFFFFFFD3)
          v2011 = 45;
        else
          v2011 = 0;
        v2012 = v2011 + v1652;
        v2013 = 1814400 * v2012;
        v2014 = 45 * ((v2012 * (unsigned __int128)0x1BAF80uLL) >> 64);
        if (v1629 >= 0xFFFFFFFFFFFFFFD3)
          v2015 = 45;
        else
          v2015 = 0;
        v334 = __CFADD__(v2014, v2013);
        v2016 = v2014 + v2013;
        if (v334)
          v2017 = 45;
        else
          v2017 = 0;
        v334 = __CFADD__(v2017, v2016);
        v2018 = v2017 + v2016;
        v2019 = v334;
        if (v2018 > 0xFFFFFFFFFFFFFFD2)
          v2019 = 1;
        v2767 = v2019 == 0;
        v2020 = v2015 + v1629;
        v2021 = 1900800 * (v2015 + v1629);
        v2022 = 45 * ((v2020 * (unsigned __int128)0x1D0100uLL) >> 64);
        if (v2767)
          v2023 = 0;
        else
          v2023 = 45;
        v334 = __CFADD__(v2022, v2021);
        v2024 = v2022 + v2021;
        v2025 = v2023 + v2018;
        if (v334)
          v2026 = 45;
        else
          v2026 = 0;
        v334 = __CFADD__(v2026, v2024);
        v2027 = v2026 + v2024;
        v2028 = v334;
        if (v2027 > 0xFFFFFFFFFFFFFFD2)
          v2028 = 1;
        if (v2025 >= 0xFFFFFFFFFFFFFFD3)
          v2029 = 45;
        else
          v2029 = 0;
        v2030 = v2029 + v2025;
        v2031 = v2027 + v2030;
        if (v2028)
          v2032 = 45;
        else
          v2032 = 0;
        v2033 = v2031 + v2032;
        if (v2033 <= 0xFFFFFFFFFFFFFFD2 && v2033 >= v2030)
          v2035 = 0;
        else
          v2035 = 45;
        v2036 = v2035 + v2033;
        if (v1597 >= 0xFFFFFFFFFFFFFFD3)
          v2037 = 45;
        else
          v2037 = 0;
        v2038 = v2037 + v1597;
        v2039 = 1995840 * v2038;
        v2040 = 45 * ((v2038 * (unsigned __int128)0x1E7440uLL) >> 64);
        v334 = __CFADD__(v2040, v2039);
        v2041 = v2040 + v2039;
        if (v334)
          v2042 = 45;
        else
          v2042 = 0;
        v334 = __CFADD__(v2042, v2041);
        v2043 = v2042 + v2041;
        v2044 = v334;
        if (v2043 > 0xFFFFFFFFFFFFFFD2)
          v2044 = 1;
        if (v2044)
          v2045 = 45;
        else
          v2045 = 0;
        v2046 = v2045 + v2043;
        v2047 = v2046 + v2036 > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v2046, v2036);
        v2048 = v2046 + v2036;
        v2049 = v334 || v2047;
        if (v1530 >= 0xFFFFFFFFFFFFFFD3)
          v2050 = 45;
        else
          v2050 = 0;
        if (v2049)
          v2051 = 45;
        else
          v2051 = 0;
        v2052 = v2051 + v2048;
        if (v2010)
          v2053 = 45;
        else
          v2053 = 0;
        v2054 = v2053 + v2009;
        v334 = __CFADD__(v2054, v2052);
        v2055 = v2054 + v2052;
        v2056 = 2661120 * (v2050 + v1530);
        v2057 = 45 * (((v2050 + v1530) * (unsigned __int128)0x289B00uLL) >> 64);
        v2058 = v334;
        v334 = __CFADD__(v2057, v2056);
        v2059 = v2057 + v2056;
        if (v334)
          v2060 = 45;
        else
          v2060 = 0;
        v334 = __CFADD__(v2060, v2059);
        v2061 = v2060 + v2059;
        v2062 = v334;
        if (v2055 > 0xFFFFFFFFFFFFFFD2)
          v2058 = 1;
        if (v2061 > 0xFFFFFFFFFFFFFFD2)
          v2062 = 1;
        if (v2062)
          v2063 = 45;
        else
          v2063 = 0;
        if (v2058)
          v2064 = 45;
        else
          v2064 = 0;
        v2065 = v2064 + v2055;
        v2066 = v2063 + v2061;
        v2067 = v2066 + v2065 > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v2066, v2065);
        v2068 = v2066 + v2065;
        v2069 = STACK[0x3C28] * STACK[0x1908];
        v2070 = (STACK[0x3C28] * (unsigned __int128)STACK[0x1908]) >> 64;
        if (v334)
          v2067 = 1;
        v334 = __CFADD__(45 * v2070, v2069);
        v2071 = 45 * v2070 + v2069;
        v2072 = (v2070 * (unsigned __int128)0x2DuLL) >> 64;
        if (v334)
          ++v2072;
        v2073 = 45 * v2072;
        v2074 = v2073 + v2071 > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v2073, v2071);
        v2075 = v2073 + v2071;
        if (v334 || v2074)
          v2077 = 45;
        else
          v2077 = 0;
        v2078 = v2077 + v2075;
        if (v2067)
          v2079 = 45;
        else
          v2079 = 0;
        v2080 = v2079 + v2068;
        v2081 = 0xB1035F48A597370CLL * v2080;
        v2082 = (v2080 * (unsigned __int128)0xB1035F48A597370CLL) >> 64;
        v334 = __CFADD__(45 * v2082, v2081);
        v2083 = 45 * v2082 + v2081;
        v2084 = (v2082 * (unsigned __int128)0x2DuLL) >> 64;
        if (v334)
          ++v2084;
        v2085 = 45 * v2084;
        v334 = __CFADD__(v2085, v2083);
        v2086 = v2085 + v2083;
        v2087 = v334;
        if (v2086 > 0xFFFFFFFFFFFFFFD2)
          v2087 = 1;
        if (v2087)
          v2088 = 45;
        else
          v2088 = 0;
        v2089 = v2088 + v2086;
        v2090 = v2078 + v2089 > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v2078, v2089);
        v2091 = v2078 + v2089;
        if (v334 || v2090)
          v2093 = 45;
        else
          v2093 = 0;
        v2094 = v2093 + v2091;
        v2095 = 0xD122545C17BA3DF4 * v2094;
        v2096 = (v2094 * (unsigned __int128)0xD122545C17BA3DF4) >> 64;
        v334 = __CFADD__(45 * v2096, v2095);
        v2097 = 45 * v2096 + v2095;
        v2098 = (v2096 * (unsigned __int128)0x2DuLL) >> 64;
        if (v334)
          ++v2098;
        v2099 = 45 * v2098;
        v2100 = v2099 + v2097 > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v2099, v2097);
        v2101 = v2099 + v2097;
        if (v334 || v2100)
          v2103 = 45;
        else
          v2103 = 0;
        v2104 = v2103 + v2101;
        if (v2001)
          v2105 = 45;
        else
          v2105 = 0;
        v2106 = v2105 + v2000;
        v334 = __CFADD__(v2104, v2106);
        v2107 = v2104 + v2106;
        v2108 = v334;
        if (v2107 > 0xFFFFFFFFFFFFFFD2)
          v2108 = 1;
        if (v2108)
          v2109 = 45;
        else
          v2109 = 0;
        v2110 = v2109 + v2107;
        v2111 = 0x5FFFFFFFFFFFFFEFLL * v2110;
        v2112 = (v2110 * (unsigned __int128)0x5FFFFFFFFFFFFFEFuLL) >> 64;
        v334 = __CFADD__(45 * v2112, v2111);
        v2113 = 45 * v2112 + v2111;
        v2114 = (v2112 * (unsigned __int128)0x2DuLL) >> 64;
        if (v334)
          ++v2114;
        v2115 = 45 * v2114;
        v2116 = (unint64_t)(v2115 + v2113) > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v2115, v2113);
        v2117 = v2115 + v2113;
        if (v334 || v2116)
          v2119 = 45;
        else
          v2119 = 0;
        v2120 = v2119 + v2117;
        if (v1977 >= 0xFFFFFFFFFFFFFFD3)
          v2121 = 45;
        else
          v2121 = 0;
        v2122 = v2121 + v1977;
        v334 = v2120 >= v2122;
        v2123 = v2120 - v2122;
        if (v334)
          v2124 = 0;
        else
          v2124 = -45;
        v2125 = v2123 + v2124;
        v2126 = 0x924924924924923 * v2125;
        v2127 = (v2125 * (unsigned __int128)0x924924924924923uLL) >> 64;
        v334 = __CFADD__(45 * v2127, v2126);
        v2128 = 45 * v2127 + v2126;
        v2129 = (v2127 * (unsigned __int128)0x2DuLL) >> 64;
        if (v334)
          ++v2129;
        v2130 = 45 * v2129;
        v2131 = (unint64_t)(v2130 + v2128) > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v2130, v2128);
        v2132 = v2130 + v2128;
        if (v334)
          v2131 = 1;
        if (v1530 >= 0xFFFFFFFFFFFFFFDFLL)
          v2133 = 33;
        else
          v2133 = 0;
        v2134 = v2133 + v1530;
        v2135 = 645120 * v2134;
        v2136 = (__PAIR128__(32, 645120) * v2134) >> 64;
        v334 = __CFADD__(v2136, v2135);
        v2137 = v2136 + v2135;
        if (v334)
          v2138 = 33;
        else
          v2138 = 0;
        v2139 = (unint64_t)(v2138 + v2137) > 0xFFFFFFFFFFFFFFDELL;
        v334 = __CFADD__(v2138, v2137);
        v2140 = v2138 + v2137;
        v2141 = v334 || v2139;
        if (v1564 >= 0xFFFFFFFFFFFFFFDFLL)
          v2142 = 33;
        else
          v2142 = 0;
        v2143 = v2142 + v1564;
        v2144 = 483840 * v2143;
        v2145 = (__PAIR128__(32, 483840) * v2143) >> 64;
        v334 = __CFADD__(v2145, v2144);
        v2146 = v2145 + v2144;
        if (v334)
          v2147 = 33;
        else
          v2147 = 0;
        v2148 = (unint64_t)(v2147 + v2146) > 0xFFFFFFFFFFFFFFDELL;
        v334 = __CFADD__(v2147, v2146);
        v2149 = v2147 + v2146;
        v2150 = v334 || v2148;
        if (v1629 >= 0xFFFFFFFFFFFFFFDFLL)
          v2151 = 33;
        else
          v2151 = 0;
        v2152 = v2151 + v1629;
        v2153 = 387072 * v2152;
        v2154 = (__PAIR128__(32, 387072) * v2152) >> 64;
        v334 = __CFADD__(v2154, v2153);
        v2155 = v2154 + v2153;
        if (v334)
          v2156 = 33;
        else
          v2156 = 0;
        v2157 = (unint64_t)(v2156 + v2155) > 0xFFFFFFFFFFFFFFDELL;
        v334 = __CFADD__(v2156, v2155);
        v2158 = v2156 + v2155;
        v2159 = v334 || v2157;
        if (v1652 >= 0xFFFFFFFFFFFFFFDFLL)
          v2160 = 33;
        else
          v2160 = 0;
        v2161 = v2160 + v1652;
        v2162 = 362880 * v2161;
        v2163 = (__PAIR128__(32, 362880) * v2161) >> 64;
        v334 = __CFADD__(v2163, v2162);
        v2164 = v2163 + v2162;
        if (v334)
          v2165 = 33;
        else
          v2165 = 0;
        v2166 = (unint64_t)(v2165 + v2164) > 0xFFFFFFFFFFFFFFDELL;
        v334 = __CFADD__(v2165, v2164);
        v2167 = v2165 + v2164;
        v2168 = v334 || v2166;
        if (v1597 >= 0xFFFFFFFFFFFFFFDFLL)
          v2169 = 33;
        else
          v2169 = 0;
        if (v2168)
          v2170 = 33;
        else
          v2170 = 0;
        v2171 = v2170 + v2167;
        if (v2159)
          v2172 = 33;
        else
          v2172 = 0;
        if (v2171 >= 0xFFFFFFFFFFFFFFDFLL)
          v2173 = 33;
        else
          v2173 = 0;
        v2174 = v2173 + v2171;
        v2175 = v2158 + v2174 + v2172;
        v2176 = v2175 <= 0xFFFFFFFFFFFFFFDELL && v2175 >= v2174;
        v2177 = 414720 * (v2169 + v1597);
        v2178 = 33 * (((v2169 + v1597) * (unsigned __int128)0x65400uLL) >> 64);
        if (v2176)
          v2179 = 0;
        else
          v2179 = 33;
        v334 = __CFADD__(v2178, v2177);
        v2180 = v2178 + v2177;
        if (v334)
          v2181 = 33;
        else
          v2181 = 0;
        v334 = __CFADD__(v2181, v2180);
        v2182 = v2181 + v2180;
        v2183 = v2179 + v2175;
        v2184 = v334;
        if (v2182 > 0xFFFFFFFFFFFFFFDELL)
          v2184 = 1;
        if (v2184)
          v2185 = 33;
        else
          v2185 = 0;
        v2186 = v2185 + v2182;
        v2187 = v2186 + v2183 > 0xFFFFFFFFFFFFFFDELL;
        v334 = __CFADD__(v2186, v2183);
        v2188 = v2186 + v2183;
        v2189 = STACK[0x3C08] * STACK[0x1918];
        v2190 = (STACK[0x3C08] * (unsigned __int128)STACK[0x1918]) >> 64;
        if (v334)
          v2187 = 1;
        v334 = __CFADD__(33 * v2190, v2189);
        v2191 = 33 * v2190 + v2189;
        v2192 = (v2190 * (unsigned __int128)0x21uLL) >> 64;
        if (v334)
          ++v2192;
        v2193 = 33 * v2192;
        v2194 = v2193 + v2191 > 0xFFFFFFFFFFFFFFDELL;
        v334 = __CFADD__(v2193, v2191);
        v2195 = v2193 + v2191;
        if (v334 || v2194)
          v2197 = 33;
        else
          v2197 = 0;
        v2198 = v2197 + v2195;
        if (v2187)
          v2199 = 33;
        else
          v2199 = 0;
        v2200 = v2199 + v2188;
        if (v2150)
          v2201 = 33;
        else
          v2201 = 0;
        v2202 = v2201 + v2149;
        v334 = __CFADD__(v2202, v2200);
        v2203 = v2202 + v2200;
        v2204 = v334;
        if (v2203 > 0xFFFFFFFFFFFFFFDELL)
          v2204 = 1;
        if (v2204)
          v2205 = 33;
        else
          v2205 = 0;
        v2206 = v2205 + v2203;
        if (v2141)
          v2207 = 33;
        else
          v2207 = 0;
        v2208 = v2207 + v2140;
        v334 = __CFADD__(v2208, v2206);
        v2209 = v2208 + v2206;
        v2210 = v334;
        if (v2209 > 0xFFFFFFFFFFFFFFDELL)
          v2210 = 1;
        if (v2210)
          v2211 = 33;
        else
          v2211 = 0;
        v2212 = v2211 + v2209;
        v334 = __CFADD__((__PAIR128__(32, 0xD2087261F2F13621) * v2212) >> 64, 0xD2087261F2F13621 * v2212);
        v2213 = (__PAIR128__(v2212, v2212) * __PAIR128__(32, 0xD2087261F2F13621)) >> 64;
        v2214 = (((v2212 * (unsigned __int128)0xD2087261F2F13621) >> 64) * 0x21) >> 64;
        if (v334)
          ++v2214;
        v2215 = 33 * v2214;
        v334 = __CFADD__(v2215, v2213);
        v2216 = v2215 + v2213;
        v2217 = v334;
        if (v2216 > 0xFFFFFFFFFFFFFFDELL)
          v2217 = 1;
        if (v2217)
          v2218 = 33;
        else
          v2218 = 0;
        v2219 = v2218 + v2216;
        v334 = __CFADD__(v2198, v2219);
        v2220 = v2198 + v2219;
        v2221 = v334;
        if (v2220 > 0xFFFFFFFFFFFFFFDELL)
          v2221 = 1;
        if (v2221)
          v2222 = 33;
        else
          v2222 = 0;
        v2223 = v2222 + v2220;
        v334 = __CFADD__((__PAIR128__(32, 0xBF751FE036E6FC90) * v2223) >> 64, 0xBF751FE036E6FC90 * v2223);
        v2224 = (__PAIR128__(v2223, v2223) * __PAIR128__(32, 0xBF751FE036E6FC90)) >> 64;
        v2225 = (((v2223 * (unsigned __int128)0xBF751FE036E6FC90) >> 64) * 0x21) >> 64;
        if (v334)
          ++v2225;
        v2226 = 33 * v2225;
        v334 = __CFADD__(v2226, v2224);
        v2227 = v2226 + v2224;
        v2228 = v334;
        if (v2227 > 0xFFFFFFFFFFFFFFDELL)
          v2228 = 1;
        if (v2228)
          v2229 = 33;
        else
          v2229 = 0;
        v2230 = v2229 + v2227;
        if (v1832 >= 0xFFFFFFFFFFFFFFDFLL)
          v2231 = 33;
        else
          v2231 = 0;
        v2232 = v2231 + v1832;
        v334 = __CFADD__((__PAIR128__(32, 0xD2087261F2F13621) * v2232) >> 64, 0xD2087261F2F13621 * v2232);
        v2233 = (__PAIR128__(v2232, v2232) * __PAIR128__(32, 0xD2087261F2F13621)) >> 64;
        v2234 = (((v2232 * (unsigned __int128)0xD2087261F2F13621) >> 64) * 0x21) >> 64;
        if (v334)
          ++v2234;
        v2235 = 33 * v2234;
        v334 = __CFADD__(v2235, v2233);
        v2236 = v2235 + v2233;
        v2237 = v334;
        if (v2236 > 0xFFFFFFFFFFFFFFDELL)
          v2237 = 1;
        if (v2237)
          v2238 = 33;
        else
          v2238 = 0;
        v2239 = v2238 + v2236;
        v2240 = v2230 + v2239 > 0xFFFFFFFFFFFFFFDELL;
        v334 = __CFADD__(v2230, v2239);
        v2241 = v2230 + v2239;
        if (v334 || v2240)
          v2243 = 33;
        else
          v2243 = 0;
        v2244 = v2243 + v2241;
        v334 = __CFADD__((__PAIR128__(32, 0x599999999999998ELL) * v2244) >> 64, 0x599999999999998ELL * v2244);
        v2245 = (__PAIR128__(v2244, v2244) * __PAIR128__(32, 0x599999999999998ELL)) >> 64;
        v2246 = (((v2244 * (unsigned __int128)0x599999999999998EuLL) >> 64) * 0x21) >> 64;
        if (v334)
          ++v2246;
        v2247 = 33 * v2246;
        v334 = __CFADD__(v2247, v2245);
        v2248 = v2247 + v2245;
        v2249 = v334;
        if (v2248 > 0xFFFFFFFFFFFFFFDELL)
          v2249 = 1;
        if (v2249)
          v2250 = 33;
        else
          v2250 = 0;
        v2251 = v2250 + v2248;
        if (v1977 >= 0xFFFFFFFFFFFFFFDFLL)
          v2252 = 33;
        else
          v2252 = 0;
        v2253 = v2252 + v1977;
        v334 = v2251 >= v2253;
        v2254 = v2251 - v2253;
        if (v334)
          v2255 = 0;
        else
          v2255 = -33;
        v2256 = v2254 + v2255;
        v334 = __CFADD__((__PAIR128__(32, 0xFFFFFFFFFFFFFFELL) * v2256) >> 64, 0xFFFFFFFFFFFFFFELL * v2256);
        v2257 = (__PAIR128__(v2256, v2256) * __PAIR128__(32, 0xFFFFFFFFFFFFFFELL)) >> 64;
        v2258 = (((v2256 * (unsigned __int128)0xFFFFFFFFFFFFFFEuLL) >> 64) * 0x21) >> 64;
        if (v334)
          ++v2258;
        v2259 = 33 * v2258;
        v2260 = (unint64_t)(v2259 + v2257) > 0xFFFFFFFFFFFFFFDELL;
        v334 = __CFADD__(v2259, v2257);
        v2261 = v2259 + v2257;
        if (v334 || v2260)
          v2263 = 33;
        else
          v2263 = 0;
        v2264 = v2263 + v2261;
        if (v2264 >= 0xFFFFFFFFFFFFFFD3)
          v2265 = 45;
        else
          v2265 = 0;
        if (v2131)
          v2266 = 45;
        else
          v2266 = 0;
        v2267 = v2266 + v2132;
        v334 = v2267 >= v2265 + v2264;
        v2268 = v2267 - (v2265 + v2264);
        if (v334)
          v2269 = 0;
        else
          v2269 = -45;
        v2270 = v2268 + v2269;
        v2271 = 0x6AAAAAAAAAAAAA98 * v2270;
        v2272 = (v2270 * (unsigned __int128)0x6AAAAAAAAAAAAA98uLL) >> 64;
        v334 = __CFADD__(45 * v2272, v2271);
        v2273 = 45 * v2272 + v2271;
        v2274 = (v2272 * (unsigned __int128)0x2DuLL) >> 64;
        if (v334)
          ++v2274;
        v2275 = 45 * v2274;
        v2276 = (unint64_t)(v2275 + v2273) > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v2275, v2273);
        v2277 = v2275 + v2273;
        v2278 = v334 || v2276;
        if (v1832 >= 0xFFFFFFFFFFFFFFD9)
          v2279 = 39;
        else
          v2279 = 0;
        v2280 = v2279 + v1832;
        v2281 = 0x40685A60ABFE0A21 * v2280;
        v2282 = (v2280 * (unsigned __int128)0x40685A60ABFE0A21uLL) >> 64;
        v334 = __CFADD__(39 * v2282, v2281);
        v2283 = 39 * v2282 + v2281;
        v2284 = (v2282 * (unsigned __int128)0x27uLL) >> 64;
        if (v334)
          ++v2284;
        v2285 = 39 * v2284;
        v2286 = (unint64_t)(v2285 + v2283) > 0xFFFFFFFFFFFFFFD8;
        v334 = __CFADD__(v2285, v2283);
        v2287 = v2285 + v2283;
        v2288 = v334 || v2286;
        if (v1597 >= 0xFFFFFFFFFFFFFFD9)
          v2289 = 39;
        else
          v2289 = 0;
        v2290 = v2289 + v1597;
        v2291 = 984960 * v2290;
        v2292 = 39 * ((v2290 * (unsigned __int128)0xF0780uLL) >> 64);
        v334 = __CFADD__(v2292, v2291);
        v2293 = v2292 + v2291;
        if (v334)
          v2294 = 39;
        else
          v2294 = 0;
        v2295 = (unint64_t)(v2294 + v2293) > 0xFFFFFFFFFFFFFFD8;
        v334 = __CFADD__(v2294, v2293);
        v2296 = v2294 + v2293;
        if (v334)
          v2295 = 1;
        if (v1629 >= 0xFFFFFFFFFFFFFFD9)
          v2297 = 39;
        else
          v2297 = 0;
        v2298 = v2297 + v1629;
        v2299 = 930240 * v2298;
        v2300 = 39 * ((v2298 * (unsigned __int128)0xE31C0uLL) >> 64);
        v334 = __CFADD__(v2300, v2299);
        v2301 = v2300 + v2299;
        if (v334)
          v2302 = 39;
        else
          v2302 = 0;
        v2303 = (unint64_t)(v2302 + v2301) > 0xFFFFFFFFFFFFFFD8;
        v334 = __CFADD__(v2302, v2301);
        v2304 = v2302 + v2301;
        v2305 = STACK[0x3C20] * STACK[0x1928];
        v2306 = (STACK[0x3C20] * (unsigned __int128)STACK[0x1928]) >> 64;
        if (v334)
          v2303 = 1;
        v334 = __CFADD__(39 * v2306, v2305);
        v2307 = 39 * v2306 + v2305;
        v2308 = (v2306 * (unsigned __int128)0x27uLL) >> 64;
        if (v334)
          ++v2308;
        v2309 = 39 * v2308;
        v2310 = v2309 + v2307;
        if ((((~((_DWORD)v2309 + (_DWORD)v2307) | v2307) & v2309 | v2307 & ~(v2309 + v2307)) & 0x8000000000000000) != 0
          || v2310 > 0xFFFFFFFFFFFFFFD8)
        {
          v2312 = 39;
        }
        else
        {
          v2312 = 0;
        }
        v2313 = v2312 + v2310;
        if (v1652 >= 0xFFFFFFFFFFFFFFD9)
          v2314 = 39;
        else
          v2314 = 0;
        v2315 = v2314 + v1652;
        v2316 = 881280 * v2315;
        v2317 = 39 * ((v2315 * (unsigned __int128)0xD7280uLL) >> 64);
        v334 = __CFADD__(v2317, v2316);
        v2318 = v2317 + v2316;
        if (v334)
          v2319 = 39;
        else
          v2319 = 0;
        v334 = __CFADD__(v2319, v2318);
        v2320 = v2319 + v2318;
        v2321 = v334;
        if (v2320 > 0xFFFFFFFFFFFFFFD8)
          v2321 = 1;
        if (v2321)
          v2322 = 39;
        else
          v2322 = 0;
        v2323 = v2322 + v2320;
        if (v2323 >= 0xFFFFFFFFFFFFFFD9)
          v2324 = 39;
        else
          v2324 = 0;
        v2325 = v2324 + v2323;
        v2326 = v2304 + v2325;
        if (v2303)
          v2327 = 39;
        else
          v2327 = 0;
        v2328 = v2326 + v2327;
        if (v1564 >= 0xFFFFFFFFFFFFFFD9)
          v2329 = 39;
        else
          v2329 = 0;
        v2330 = v2329 + v1564;
        if (v2328 < v2325 || v2328 > 0xFFFFFFFFFFFFFFD8)
          v2332 = 39;
        else
          v2332 = 0;
        if (v2295)
          v2333 = 39;
        else
          v2333 = 0;
        v2334 = v2333 + v2296;
        v2335 = v2332 + v2328;
        v334 = __CFADD__(v2334, v2335);
        v2336 = v2334 + v2335;
        v2337 = 1116288 * v2330;
        v2338 = 39 * ((v2330 * (unsigned __int128)0x110880uLL) >> 64);
        v2339 = v334;
        v334 = __CFADD__(v2338, v2337);
        v2340 = v2338 + v2337;
        if (v334)
          v2341 = 39;
        else
          v2341 = 0;
        if (v2336 > 0xFFFFFFFFFFFFFFD8)
          v2339 = 1;
        v334 = __CFADD__(v2341, v2340);
        v2342 = v2341 + v2340;
        v2343 = v334;
        if (v2339)
          v2344 = 39;
        else
          v2344 = 0;
        if (v2342 > 0xFFFFFFFFFFFFFFD8)
          v2343 = 1;
        if (v1530 >= 0xFFFFFFFFFFFFFFD9)
          v2345 = 39;
        else
          v2345 = 0;
        v2346 = v2344 + v2336;
        if (v2343)
          v2347 = 39;
        else
          v2347 = 0;
        v2348 = v2347 + v2342;
        v2349 = v2345 + v1530;
        v334 = __CFADD__(v2348, v2346);
        v2350 = v2348 + v2346;
        v2351 = v334;
        if (v2350 > 0xFFFFFFFFFFFFFFD8)
          v2351 = 1;
        v2767 = v2351 == 0;
        v2352 = 1395360 * v2349;
        v2353 = 39 * ((v2349 * (unsigned __int128)0x154AA0uLL) >> 64);
        if (v2767)
          v2354 = 0;
        else
          v2354 = 39;
        v334 = __CFADD__(v2353, v2352);
        v2355 = v2353 + v2352;
        v2356 = v2354 + v2350;
        if (v334)
          v2357 = 39;
        else
          v2357 = 0;
        v334 = __CFADD__(v2357, v2355);
        v2358 = v2357 + v2355;
        v2359 = v334;
        if (v2358 > 0xFFFFFFFFFFFFFFD8)
          v2359 = 1;
        if (v2359)
          v2360 = 39;
        else
          v2360 = 0;
        v2361 = v2360 + v2358;
        v334 = __CFADD__(v2361, v2356);
        v2362 = v2361 + v2356;
        v2363 = v334;
        if (v2362 > 0xFFFFFFFFFFFFFFD8)
          v2363 = 1;
        if (v2363)
          v2364 = 39;
        else
          v2364 = 0;
        v2365 = v2364 + v2362;
        v2366 = 0x40685A60ABFE0A21 * v2365;
        v2367 = (v2365 * (unsigned __int128)0x40685A60ABFE0A21uLL) >> 64;
        v334 = __CFADD__(39 * v2367, v2366);
        v2368 = 39 * v2367 + v2366;
        v2369 = (v2367 * (unsigned __int128)0x27uLL) >> 64;
        if (v334)
          ++v2369;
        v2370 = 39 * v2369;
        v334 = __CFADD__(v2370, v2368);
        v2371 = v2370 + v2368;
        v2372 = v334;
        if (v2371 > 0xFFFFFFFFFFFFFFD8)
          v2372 = 1;
        if (v2372)
          v2373 = 39;
        else
          v2373 = 0;
        v2374 = v2373 + v2371;
        v334 = __CFADD__(v2313, v2374);
        v2375 = v2313 + v2374;
        v2376 = v334;
        if (v2375 > 0xFFFFFFFFFFFFFFD8)
          v2376 = 1;
        if (v2376)
          v2377 = 39;
        else
          v2377 = 0;
        v2378 = v2377 + v2375;
        v2379 = 0x68180B91CEB03F68 * v2378;
        v2380 = (v2378 * (unsigned __int128)0x68180B91CEB03F68uLL) >> 64;
        v334 = __CFADD__(39 * v2380, v2379);
        v2381 = 39 * v2380 + v2379;
        v2382 = (v2380 * (unsigned __int128)0x27uLL) >> 64;
        if (v334)
          ++v2382;
        v2383 = 39 * v2382;
        v334 = __CFADD__(v2383, v2381);
        v2384 = v2383 + v2381;
        v2385 = v334;
        if (v2384 > 0xFFFFFFFFFFFFFFD8)
          v2385 = 1;
        if (v2385)
          v2386 = 39;
        else
          v2386 = 0;
        v2387 = v2386 + v2384;
        if (v2288)
          v2388 = 39;
        else
          v2388 = 0;
        v2389 = v2388 + v2287;
        v2390 = v2387 + v2389 > 0xFFFFFFFFFFFFFFD8;
        v334 = __CFADD__(v2387, v2389);
        v2391 = v2387 + v2389;
        if (v334 || v2390)
          v2393 = 39;
        else
          v2393 = 0;
        v2394 = v2393 + v2391;
        v2395 = 0x36DB6DB6DB6DB6D3 * v2394;
        v2396 = (v2394 * (unsigned __int128)0x36DB6DB6DB6DB6D3uLL) >> 64;
        v334 = __CFADD__(39 * v2396, v2395);
        v2397 = 39 * v2396 + v2395;
        v2398 = (v2396 * (unsigned __int128)0x27uLL) >> 64;
        if (v334)
          ++v2398;
        v2399 = 39 * v2398;
        v2400 = (unint64_t)(v2399 + v2397) > 0xFFFFFFFFFFFFFFD8;
        v334 = __CFADD__(v2399, v2397);
        v2401 = v2399 + v2397;
        if (v334 || v2400)
          v2403 = 39;
        else
          v2403 = 0;
        v2404 = v2403 + v2401;
        if (v1977 >= 0xFFFFFFFFFFFFFFD9)
          v2405 = 39;
        else
          v2405 = 0;
        v2406 = v2405 + v1977;
        v334 = v2404 >= v2406;
        v2407 = v2404 - v2406;
        if (v334)
          v2408 = 0;
        else
          v2408 = -39;
        v2409 = v2407 + v2408;
        v2410 = 0xBA2E8BA2E8BA2E7 * v2409;
        v2411 = (v2409 * (unsigned __int128)0xBA2E8BA2E8BA2E7uLL) >> 64;
        v334 = __CFADD__(39 * v2411, v2410);
        v2412 = 39 * v2411 + v2410;
        v2413 = (v2411 * (unsigned __int128)0x27uLL) >> 64;
        if (v334)
          ++v2413;
        v2414 = 39 * v2413;
        v334 = __CFADD__(v2414, v2412);
        v2415 = v2414 + v2412;
        v2416 = v334;
        if (v2415 > 0xFFFFFFFFFFFFFFD8)
          v2416 = 1;
        if (v2416)
          v2417 = 39;
        else
          v2417 = 0;
        v2418 = v2417 + v2415;
        if (v2264 >= 0xFFFFFFFFFFFFFFD9)
          v2419 = 39;
        else
          v2419 = 0;
        v2420 = v2419 + v2264;
        v334 = v2418 >= v2420;
        v2421 = v2418 - v2420;
        if (v334)
          v2422 = 0;
        else
          v2422 = -39;
        v2423 = v2421 + v2422;
        v2424 = 0xD555555555555535 * v2423;
        v2425 = (v2423 * (unsigned __int128)0xD555555555555535) >> 64;
        v334 = __CFADD__(39 * v2425, v2424);
        v2426 = 39 * v2425 + v2424;
        v2427 = (v2425 * (unsigned __int128)0x27uLL) >> 64;
        if (v334)
          ++v2427;
        v2428 = 39 * v2427;
        v334 = __CFADD__(v2428, v2426);
        v2429 = v2428 + v2426;
        v2430 = v334;
        if (v2429 > 0xFFFFFFFFFFFFFFD8)
          v2430 = 1;
        if (v2430)
          v2431 = 39;
        else
          v2431 = 0;
        v2432 = v2431 + v2429;
        if (v2432 >= 0xFFFFFFFFFFFFFFD3)
          v2433 = 45;
        else
          v2433 = 0;
        if (v2278)
          v2434 = 45;
        else
          v2434 = 0;
        v2435 = v2434 + v2277;
        v2436 = v2433 + v2432;
        v334 = v2435 >= v2436;
        v2437 = v2435 - v2436;
        if (v334)
          v2438 = 0;
        else
          v2438 = -45;
        v2439 = v2437 + v2438;
        v2440 = 0xD555555555555530 * v2439;
        v2441 = (v2439 * (unsigned __int128)0xD555555555555530) >> 64;
        v334 = __CFADD__(45 * v2441, v2440);
        v2442 = 45 * v2441 + v2440;
        v2443 = (v2441 * (unsigned __int128)0x2DuLL) >> 64;
        if (v334)
          ++v2443;
        v2444 = 45 * v2443;
        v2445 = v2444 + v2442 > 0xFFFFFFFFFFFFFFD2;
        v334 = __CFADD__(v2444, v2442);
        v2446 = v2444 + v2442;
        v2447 = v334 || v2445;
        if (v2264 >= 0xFFFFFFFFFFFFFFD1)
          v2448 = 47;
        else
          v2448 = 0;
        if (v1990)
          v2449 = 47;
        else
          v2449 = 0;
        v2450 = v2449 + v1991;
        v2767 = v2447 == 0;
        v2451 = v2448 + v2264;
        if (v2767)
          v2452 = 0;
        else
          v2452 = 45;
        v334 = v2450 >= v2451;
        v2453 = v2450 - v2451;
        v2454 = v2452 + v2446;
        if (v334)
          v2455 = 0;
        else
          v2455 = -47;
        v2456 = v2453 + v2455;
        v2457 = 0x5B6DB6DB6DB6DB5DLL * v2456;
        v2458 = (v2456 * (unsigned __int128)0x5B6DB6DB6DB6DB5DuLL) >> 64;
        v334 = __CFADD__(47 * v2458, v2457);
        v2459 = 47 * v2458 + v2457;
        v2460 = (v2458 * (unsigned __int128)0x2FuLL) >> 64;
        if (v334)
          ++v2460;
        v2461 = 47 * v2460;
        v334 = __CFADD__(v2461, v2459);
        v2462 = v2461 + v2459;
        v2463 = v334;
        if (v2462 > 0xFFFFFFFFFFFFFFD0)
          v2463 = 1;
        if (v2463)
          v2464 = 47;
        else
          v2464 = 0;
        v2465 = v2464 + v2462;
        if (v2432 >= 0xFFFFFFFFFFFFFFD1)
          v2466 = 47;
        else
          v2466 = 0;
        v2467 = v2466 + v2432;
        v334 = v2465 >= v2467;
        v2468 = v2465 - v2467;
        if (v334)
          v2469 = 0;
        else
          v2469 = -47;
        v2470 = v2468 + v2469;
        v2471 = 0xDFFFFFFFFFFFFFD7 * v2470;
        v2472 = (v2470 * (unsigned __int128)0xDFFFFFFFFFFFFFD7) >> 64;
        v334 = __CFADD__(47 * v2472, v2471);
        v2473 = 47 * v2472 + v2471;
        v2474 = (v2472 * (unsigned __int128)0x2FuLL) >> 64;
        if (v334)
          ++v2474;
        v2475 = 47 * v2474;
        v334 = __CFADD__(v2475, v2473);
        v2476 = v2475 + v2473;
        v2477 = v334;
        if (v2476 > 0xFFFFFFFFFFFFFFD0)
          v2477 = 1;
        if (v2454 >= 0xFFFFFFFFFFFFFFD1)
          v2478 = 47;
        else
          v2478 = 0;
        if (v2477)
          v2479 = 47;
        else
          v2479 = 0;
        v2480 = v2479 + v2476;
        v334 = v2480 >= v2478 + v2454;
        v2481 = v2480 - (v2478 + v2454);
        if (v334)
          v2482 = 0;
        else
          v2482 = -47;
        v2483 = v2481 + v2482;
        v2484 = 0x7FFFFFFFFFFFFFE9 * v2483;
        v2485 = (v2483 * (unsigned __int128)0x7FFFFFFFFFFFFFE9uLL) >> 64;
        v334 = __CFADD__(47 * v2485, v2484);
        v2486 = 47 * v2485 + v2484;
        v2487 = (v2485 * (unsigned __int128)0x2FuLL) >> 64;
        if (v334)
          ++v2487;
        v2488 = 47 * v2487;
        v334 = __CFADD__(v2488, v2486);
        v2489 = v2488 + v2486;
        v2490 = v334;
        if (v2489 > 0xFFFFFFFFFFFFFFD0)
          v2490 = 1;
        if (v2490)
          v2491 = 47;
        else
          v2491 = 0;
        v2492 = v2491 + v2489;
        if (v2492 >= 0xFFFFFFFFFFFFFFF1)
          v2493 = 15;
        else
          v2493 = 0;
        v2494 = v2493 + v2492;
        v2495 = -45 * v2494;
        v2496 = (v2494 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64;
        v334 = __CFADD__(15 * v2496, v2495);
        v2497 = 15 * v2496 + v2495;
        v2498 = (v2496 * (unsigned __int128)0xFuLL) >> 64;
        if (v334)
          ++v2498;
        v2499 = 15 * v2498;
        v334 = __CFADD__(v2499, v2497);
        v2500 = v2499 + v2497;
        v2501 = v334;
        if (v2500 > 0xFFFFFFFFFFFFFFF0)
          v2501 = 1;
        if (v2501)
          v2502 = 15;
        else
          v2502 = 0;
        v2503 = v2502 + v2500;
        if (v2454 >= 0xFFFFFFFFFFFFFFF1)
          v2504 = 15;
        else
          v2504 = 0;
        v2505 = v2504 + v2454;
        v334 = __CFADD__(v2505, v2503);
        v2506 = v2505 + v2503;
        v2507 = v334;
        if (v2506 > 0xFFFFFFFFFFFFFFF0)
          v2507 = 1;
        if (v2507)
          v2508 = 15;
        else
          v2508 = 0;
        v2509 = v2508 + v2506;
        v2510 = -39 * v2509;
        v2511 = (v2509 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64;
        v334 = __CFADD__(15 * v2511, v2510);
        v2512 = 15 * v2511 + v2510;
        v2513 = (v2511 * (unsigned __int128)0xFuLL) >> 64;
        if (v334)
          ++v2513;
        v2514 = 15 * v2513;
        v2515 = (unint64_t)(v2514 + v2512) > 0xFFFFFFFFFFFFFFF0;
        v334 = __CFADD__(v2514, v2512);
        v2516 = v2514 + v2512;
        v2517 = v334 || v2515;
        if (v2432 >= 0xFFFFFFFFFFFFFFF1)
          v2518 = 15;
        else
          v2518 = 0;
        if (v2517)
          v2519 = 15;
        else
          v2519 = 0;
        v2520 = v2519 + v2516;
        v2521 = v2518 + v2432;
        v2522 = v2518 + v2432 + v2520 > 0xFFFFFFFFFFFFFFF0;
        v334 = __CFADD__(v2521, v2520);
        v2523 = v2521 + v2520;
        v2524 = v334 || v2522;
        if (v2264 >= 0xFFFFFFFFFFFFFFF1)
          v2525 = 15;
        else
          v2525 = 0;
        if (v2524)
          v2526 = 15;
        else
          v2526 = 0;
        v2527 = v2526 + v2523;
        v2528 = -33 * v2527;
        v2529 = (v2527 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64;
        v334 = __CFADD__(15 * v2529, v2528);
        v2530 = 15 * v2529 + v2528;
        v2531 = (v2529 * (unsigned __int128)0xFuLL) >> 64;
        if (v334)
          ++v2531;
        v2532 = 15 * v2531;
        v334 = __CFADD__(v2532, v2530);
        v2533 = v2532 + v2530;
        v2534 = v334;
        if (v2533 > 0xFFFFFFFFFFFFFFF0)
          v2534 = 1;
        if (v2534)
          v2535 = 15;
        else
          v2535 = 0;
        v2536 = v2535 + v2533;
        v2537 = v2525 + v2264;
        v2538 = v2525 + v2264 + v2536 > 0xFFFFFFFFFFFFFFF0;
        v334 = __CFADD__(v2537, v2536);
        v2539 = v2537 + v2536;
        if (v334 || v2538)
          v2541 = 15;
        else
          v2541 = 0;
        v2542 = v2541 + v2539;
        v2543 = -17 * v2542;
        v2544 = (v2542 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64;
        v334 = __CFADD__(15 * v2544, v2543);
        v2545 = 15 * v2544 + v2543;
        v2546 = (v2544 * (unsigned __int128)0xFuLL) >> 64;
        if (v334)
          ++v2546;
        v2547 = 15 * v2546;
        v2548 = (unint64_t)(v2547 + v2545) > 0xFFFFFFFFFFFFFFF0;
        v334 = __CFADD__(v2547, v2545);
        v2549 = v2547 + v2545;
        v2550 = v334 || v2548;
        if (v2492 >= 0xFFFFFFFFFFFFFFF7)
          v2551 = 9;
        else
          v2551 = 0;
        v2552 = v2551 + v2492;
        v334 = __CFADD__((__PAIR128__(8, -45) * v2552) >> 64, -45 * v2552);
        v2553 = (__PAIR128__(v2552, v2552) * __PAIR128__(8, -45)) >> 64;
        v2554 = (((v2552 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64) * 9) >> 64;
        if (v334)
          ++v2554;
        v2555 = 9 * v2554;
        v2556 = (unint64_t)(v2555 + v2553) > 0xFFFFFFFFFFFFFFF6;
        v334 = __CFADD__(v2555, v2553);
        v2557 = v2555 + v2553;
        v2558 = v334 || v2556;
        if (v2454 >= 0xFFFFFFFFFFFFFFF7)
          v2559 = 9;
        else
          v2559 = 0;
        if (v2558)
          v2560 = 9;
        else
          v2560 = 0;
        v2561 = v2560 + v2557;
        v334 = __CFADD__(v2559 + v2454, v2561);
        v2562 = v2559 + v2454 + v2561;
        v2563 = v334;
        if (v2562 > 0xFFFFFFFFFFFFFFF6)
          v2563 = 1;
        if (v2563)
          v2564 = 9;
        else
          v2564 = 0;
        v2565 = v2564 + v2562;
        v334 = __CFADD__((__PAIR128__(8, -39) * v2565) >> 64, -39 * v2565);
        v2566 = (__PAIR128__(v2565, v2565) * __PAIR128__(8, -39)) >> 64;
        v2567 = (((v2565 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64) * 9) >> 64;
        if (v334)
          ++v2567;
        v2568 = 9 * v2567;
        v2569 = (unint64_t)(v2568 + v2566) > 0xFFFFFFFFFFFFFFF6;
        v334 = __CFADD__(v2568, v2566);
        v2570 = v2568 + v2566;
        v2571 = v334 || v2569;
        if (v2432 >= 0xFFFFFFFFFFFFFFF7)
          v2572 = 9;
        else
          v2572 = 0;
        if (v2571)
          v2573 = 9;
        else
          v2573 = 0;
        v2574 = v2573 + v2570;
        v334 = __CFADD__(v2572 + v2432, v2574);
        v2575 = v2572 + v2432 + v2574;
        v2576 = v334;
        if (v2575 > 0xFFFFFFFFFFFFFFF6)
          v2576 = 1;
        if (v2576)
          v2577 = 9;
        else
          v2577 = 0;
        v2578 = v2577 + v2575;
        v334 = __CFADD__((__PAIR128__(8, -33) * v2578) >> 64, -33 * v2578);
        v2579 = (__PAIR128__(-33, -33) * v2578) >> 64;
        v2580 = (((v2578 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64) * 9) >> 64;
        if (v334)
          ++v2580;
        v2581 = 9 * v2580;
        v2582 = (unint64_t)(v2581 + v2579) > 0xFFFFFFFFFFFFFFF6;
        v334 = __CFADD__(v2581, v2579);
        v2583 = v2581 + v2579;
        v2584 = v334 || v2582;
        if (v2264 >= 0xFFFFFFFFFFFFFFF7)
          v2585 = 9;
        else
          v2585 = 0;
        if (v2584)
          v2586 = 9;
        else
          v2586 = 0;
        v2587 = v2586 + v2583;
        v334 = __CFADD__(v2585 + v2264, v2587);
        v2588 = v2585 + v2264 + v2587;
        v2589 = v334;
        if (v2588 > 0xFFFFFFFFFFFFFFF6)
          v2589 = 1;
        if (v2589)
          v2590 = 9;
        else
          v2590 = 0;
        v2591 = v2590 + v2588;
        v334 = __CFADD__((__PAIR128__(8, -17) * v2591) >> 64, -17 * v2591);
        v2592 = (__PAIR128__(-17, -17) * v2591) >> 64;
        v2593 = (((v2591 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64) * 9) >> 64;
        if (v334)
          ++v2593;
        v2594 = 9 * v2593;
        v2595 = (unint64_t)(v2594 + v2592) > 0xFFFFFFFFFFFFFFF6;
        v334 = __CFADD__(v2594, v2592);
        v2596 = v2594 + v2592;
        v2597 = v334 || v2595;
        if (v1977 >= 0xFFFFFFFFFFFFFFF7)
          v2598 = 9;
        else
          v2598 = 0;
        if (v2597)
          v2599 = 9;
        else
          v2599 = 0;
        v2600 = v2599 + v2596;
        v2601 = v2598 + v1977;
        v2602 = v2598 + v1977 + v2600 > 0xFFFFFFFFFFFFFFF6;
        v334 = __CFADD__(v2601, v2600);
        v2603 = v2601 + v2600;
        v2604 = v334 || v2602;
        if (v2492 >= 0xFFFFFFFFFFFFFFFBLL)
          v2605 = 5;
        else
          v2605 = 0;
        v2606 = v2605 + v2492;
        v334 = __CFADD__((__PAIR128__(4, -45) * v2606) >> 64, -45 * v2606);
        v2607 = (__PAIR128__(v2606, v2606) * __PAIR128__(4, -45)) >> 64;
        v2608 = (((v2606 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64) * 5) >> 64;
        if (v334)
          ++v2608;
        v2609 = 5 * v2608;
        v2610 = (unint64_t)(v2609 + v2607) > 0xFFFFFFFFFFFFFFFALL;
        v334 = __CFADD__(v2609, v2607);
        v2611 = v2609 + v2607;
        v2612 = v334 || v2610;
        if (v2454 >= 0xFFFFFFFFFFFFFFFBLL)
          v2613 = 5;
        else
          v2613 = 0;
        if (v2612)
          v2614 = 5;
        else
          v2614 = 0;
        v2615 = v2614 + v2611;
        v334 = __CFADD__(v2613 + v2454, v2615);
        v2616 = v2613 + v2454 + v2615;
        v2617 = v334;
        if (v2616 > 0xFFFFFFFFFFFFFFFALL)
          v2617 = 1;
        if (v2617)
          v2618 = 5;
        else
          v2618 = 0;
        v2619 = v2618 + v2616;
        v334 = __CFADD__((__PAIR128__(4, -39) * v2619) >> 64, -39 * v2619);
        v2620 = (__PAIR128__(v2619, v2619) * __PAIR128__(4, -39)) >> 64;
        v2621 = (((v2619 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64) * 5) >> 64;
        if (v334)
          ++v2621;
        v2622 = 5 * v2621;
        v334 = __CFADD__(v2622, v2620);
        v2623 = v2622 + v2620;
        v2624 = v334;
        if (v2623 > 0xFFFFFFFFFFFFFFFALL)
          v2624 = 1;
        if (v2432 >= 0xFFFFFFFFFFFFFFFBLL)
          v2625 = 5;
        else
          v2625 = 0;
        if (v2624)
          v2626 = 5;
        else
          v2626 = 0;
        v2627 = v2626 + v2623;
        v334 = __CFADD__(v2625 + v2432, v2627);
        v2628 = v2625 + v2432 + v2627;
        v2629 = v334;
        if (v2628 > 0xFFFFFFFFFFFFFFFALL)
          v2629 = 1;
        if (v2629)
          v2630 = 5;
        else
          v2630 = 0;
        v2631 = v2630 + v2628;
        v334 = __CFADD__((__PAIR128__(4, -33) * v2631) >> 64, -33 * v2631);
        v2632 = (__PAIR128__(-33, -33) * v2631) >> 64;
        v2633 = (((v2631 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64) * 5) >> 64;
        if (v334)
          ++v2633;
        v2634 = 5 * v2633;
        v2635 = (unint64_t)(v2634 + v2632) > 0xFFFFFFFFFFFFFFFALL;
        v334 = __CFADD__(v2634, v2632);
        v2636 = v2634 + v2632;
        v2637 = v334 || v2635;
        if (v2492 >= 0xFFFFFFFFFFFFFFFDLL)
          v2638 = 3;
        else
          v2638 = 0;
        v2639 = v2638 + v2492;
        v2640 = -45 * v2639;
        v2642 = v2639;
        v2641 = (v2639 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64;
        v2643 = (__PAIR128__(2, -45) * v2642) >> 64;
        if (v2454 >= 0xFFFFFFFFFFFFFFFDLL)
          v2644 = 3;
        else
          v2644 = 0;
        v334 = __CFADD__(v2643, v2640);
        v2645 = v2643 + v2640;
        v2646 = (v2641 * (unsigned __int128)3uLL) >> 64;
        if (v334)
          ++v2646;
        v2647 = 3 * v2646;
        v334 = __CFADD__(v2647, v2645);
        v2648 = v2647 + v2645;
        v2649 = v334;
        if (v2648 > 0xFFFFFFFFFFFFFFFCLL)
          v2649 = 1;
        if (v2649)
          v2650 = 3;
        else
          v2650 = 0;
        v2651 = v2650 + v2648;
        v334 = __CFADD__(v2644 + v2454, v2651);
        v2652 = v2644 + v2454 + v2651;
        v2653 = v334;
        if (v2652 > 0xFFFFFFFFFFFFFFFCLL)
          v2653 = 1;
        if (v2653)
          v2654 = 3;
        else
          v2654 = 0;
        v2655 = v2654 + v2652;
        v334 = __CFADD__((__PAIR128__(2, -39) * v2655) >> 64, -39 * v2655);
        v2656 = (__PAIR128__(v2655, v2655) * __PAIR128__(2, -39)) >> 64;
        v2657 = (((v2655 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64) * 3) >> 64;
        if (v334)
          ++v2657;
        v2658 = 3 * v2657;
        if (v2432 >= 0xFFFFFFFFFFFFFFFDLL)
          v2659 = 3;
        else
          v2659 = 0;
        v334 = __CFADD__(v2658, v2656);
        v2660 = v2658 + v2656;
        v2661 = v334;
        if (v2660 > 0xFFFFFFFFFFFFFFFCLL)
          v2661 = 1;
        if (v2661)
          v2662 = 3;
        else
          v2662 = 0;
        v2663 = v2662 + v2660;
        v2664 = v2659 + v2432;
        v2665 = v2659 + v2432 + v2663 > 0xFFFFFFFFFFFFFFFCLL;
        v334 = __CFADD__(v2664, v2663);
        v2666 = v2664 + v2663;
        if (v334 || v2665)
          v2668 = 3;
        else
          v2668 = 0;
        v2669 = v2668 + v2666;
        v334 = __CFADD__((__PAIR128__(2, -33) * v2669) >> 64, -33 * v2669);
        v2670 = (__PAIR128__(-33, -33) * v2669) >> 64;
        v2671 = (((v2669 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64) * 3) >> 64;
        if (v334)
          ++v2671;
        v2672 = 3 * v2671;
        v334 = __CFADD__(v2672, v2670);
        v2673 = v2672 + v2670;
        v2674 = v334;
        if (v2673 > 0xFFFFFFFFFFFFFFFCLL)
          v2674 = 1;
        if (v2674)
          v2675 = 3;
        else
          v2675 = 0;
        v2676 = v2675 + v2673;
        if (v2264 >= 0xFFFFFFFFFFFFFFFDLL)
          v2677 = 3;
        else
          v2677 = 0;
        v2678 = v2677 + v2264;
        v334 = __CFADD__(v2678, v2676);
        v2679 = v2678 + v2676;
        v2680 = v334;
        if (v2679 > 0xFFFFFFFFFFFFFFFCLL)
          v2680 = 1;
        if (v2680)
          v2681 = 3;
        else
          v2681 = 0;
        v2682 = v2681 + v2679;
        v334 = __CFADD__((__PAIR128__(2, -17) * v2682) >> 64, -17 * v2682);
        v2683 = (__PAIR128__(-17, -17) * v2682) >> 64;
        v2684 = (((v2682 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64) * 3) >> 64;
        if (v334)
          ++v2684;
        v2685 = 3 * v2684;
        v2686 = (unint64_t)(v2685 + v2683) > 0xFFFFFFFFFFFFFFFCLL;
        v334 = __CFADD__(v2685, v2683);
        v2687 = v2685 + v2683;
        if (v334)
          v2686 = 1;
        if (v2492 == -1)
          v2688 = 0;
        else
          v2688 = v2492;
        v2689 = -45 * v2688;
        v2690 = (v2688 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64;
        v2691 = __CFADD__(__CFADD__(v2690, v2689), v2690 + v2689);
        v2692 = __CFADD__(v2690, v2689) + v2690 + v2689 == -1 || v2691;
        v2693 = v2690 + v2689 + __CFADD__(v2690, v2689) + v2692;
        if (v2454 == -1)
          v2694 = 0;
        else
          v2694 = v2454;
        v334 = __CFADD__(v2694, v2693);
        v2695 = v2694 + v2693;
        LODWORD(v2696) = v334;
        if (v2695 == -1)
          v2696 = 1;
        else
          v2696 = v2696;
        v2697 = v2696 + v2695;
        v2698 = -39 * v2697;
        v2699 = (v2697 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64;
        v2700 = __CFADD__(__CFADD__(v2699, v2698), v2699 + v2698);
        v2701 = __CFADD__(v2699, v2698) + v2699 + v2698 == -1 || v2700;
        v2702 = v2699 + v2698 + __CFADD__(v2699, v2698) + v2701;
        if (v2432 == -1)
          v2703 = 0;
        else
          v2703 = v2432;
        v334 = __CFADD__(v2703, v2702);
        v2704 = v2703 + v2702;
        LODWORD(v2705) = v334;
        if (v2704 == -1)
          v2705 = 1;
        else
          v2705 = v2705;
        v2706 = v2705 + v2704;
        v2707 = 33 * v2706;
        v2708 = (v2706 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64;
        v2709 = -v2707;
        v2710 = __CFADD__(__CFADD__(v2708, v2709), v2708 + v2709);
        v2711 = __CFADD__(v2708, v2709) + v2708 + v2709 == -1 || v2710;
        v2712 = v2708 + v2709 + __CFADD__(v2708, v2709) + v2711;
        if (v2264 == -1)
          v2713 = 0;
        else
          v2713 = v2264;
        v334 = __CFADD__(v2713, v2712);
        v2714 = v2713 + v2712;
        LODWORD(v2715) = v334;
        if (v2714 == -1)
          v2715 = 1;
        else
          v2715 = v2715;
        v2716 = v2715 + v2714;
        v2717 = 17 * v2716;
        v2718 = (v2716 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64;
        v2719 = -v2717;
        v2720 = __CFADD__(__CFADD__(v2718, v2719), v2718 + v2719);
        v2721 = __CFADD__(v2718, v2719) + v2718 + v2719 == -1 || v2720;
        v2722 = v2718 + v2719 + __CFADD__(v2718, v2719) + v2721;
        if (v1977 == -1)
          v2723 = 0;
        else
          v2723 = v1977;
        v2724 = v2723 + v2722 == -1;
        v334 = __CFADD__(v2723, v2722);
        v2725 = v2723 + v2722;
        v2726 = v334 || v2724;
        v2727 = v2726 + v2725;
        if (v1977 >= 0xFFFFFFFFFFFFFFFDLL)
          v2728 = 3;
        else
          v2728 = 0;
        if (v2686)
          v2729 = 3;
        else
          v2729 = 0;
        v2730 = v2729 + v2687;
        v334 = __CFADD__(v2728 + v1977, v2730);
        v2731 = v2728 + v1977 + v2730;
        v2732 = v334;
        if (v2731 > 0xFFFFFFFFFFFFFFFCLL)
          v2732 = 1;
        if (v2732)
          v2733 = 3;
        else
          v2733 = 0;
        v2734 = v2733 + v2731;
        if (v2637)
          v2735 = 5;
        else
          v2735 = 0;
        v2736 = v2735 + v2636;
        if (v2264 >= 0xFFFFFFFFFFFFFFFBLL)
          v2737 = 5;
        else
          v2737 = 0;
        v2738 = v2737 + v2264;
        v334 = __CFADD__(v2738, v2736);
        v2739 = v2738 + v2736;
        v2740 = v334;
        if (v2739 > 0xFFFFFFFFFFFFFFFALL)
          v2740 = 1;
        if (v2740)
          v2741 = 5;
        else
          v2741 = 0;
        v2742 = v2741 + v2739;
        v334 = __CFADD__((__PAIR128__(4, -17) * v2742) >> 64, -17 * v2742);
        v2743 = (__PAIR128__(-17, -17) * v2742) >> 64;
        v2744 = (((v2742 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64) * 5) >> 64;
        if (v334)
          ++v2744;
        v2745 = 5 * v2744;
        v334 = __CFADD__(v2745, v2743);
        v2746 = v2745 + v2743;
        v2747 = v334;
        if (v1977 >= 0xFFFFFFFFFFFFFFFBLL)
          v2748 = 5;
        else
          v2748 = 0;
        if (v2746 > 0xFFFFFFFFFFFFFFFALL)
          v2747 = 1;
        if (v2747)
          v2749 = 5;
        else
          v2749 = 0;
        v2750 = v2749 + v2746;
        v334 = __CFADD__(v2748 + v1977, v2750);
        v2751 = v2748 + v1977 + v2750;
        v2752 = v334;
        if (v2751 > 0xFFFFFFFFFFFFFFFALL)
          v2752 = 1;
        if (v2752)
          v2753 = 5;
        else
          v2753 = 0;
        v2754 = v2753 + v2751;
        if (v2604)
          v2755 = 9;
        else
          v2755 = 0;
        v2756 = v2755 + v2603;
        if (v1977 >= 0xFFFFFFFFFFFFFFF1)
          v2757 = 15;
        else
          v2757 = 0;
        v334 = v2454 >= 0x888941CDB1E411EELL;
        LODWORD(v2454) = v2454 > 0x888941CDB1E411EELL;
        v2758 = !v334;
        if (v2550)
          v2759 = 15;
        else
          v2759 = 0;
        v334 = v2432 >= 0x1104BC203A2C6C1ELL;
        v2760 = v2432 > 0x1104BC203A2C6C1ELL;
        v2761 = v2759 + v2549;
        v2762 = v2757 + v1977;
        v2763 = !v334;
        v2764 = v2760;
        v334 = __CFADD__(v2762, v2761);
        v2765 = v2762 + v2761;
        v2766 = v334;
        v2767 = v2492 == 0;
        if (v2492)
          v2768 = 0;
        else
          v2768 = v2758;
        v2769 = !v2767;
        v2770 = v2769 - v2768;
        if (v2767)
          v2454 = v2454;
        else
          v2454 = 0;
        if (v2765 > 0xFFFFFFFFFFFFFFF0)
          v2766 = 1;
        v2772 = v2770 + v2454;
        v2771 = v2772 == 0;
        if (v2772)
          v2773 = 0;
        else
          v2773 = v2763;
        v2774 = v2772 - v2773;
        if (v2771)
          v2775 = v2764;
        else
          v2775 = 0;
        if (v2766)
          v2776 = 15;
        else
          v2776 = 0;
        v334 = v1977 >= 0xBCE0B40AAD3903CALL;
        LODWORD(v1977) = v1977 > 0xBCE0B40AAD3903CALL;
        v2777 = !v334;
        v2778 = v2774 + v2775;
        v2779 = v2776 + v2765;
        v2780 = v2778 == 0;
        if (v2778)
          v2781 = 0;
        else
          v2781 = v2264 < 0x71527BE5745B8317;
        v2782 = v2778 - v2781;
        v2783 = v2780 && v2264 > 0x71527BE5745B8317;
        v2785 = v2782 + v2783;
        v2784 = v2785 == 0;
        if (v2785)
          v2786 = 0;
        else
          v2786 = v2777;
        v2787 = v2785 - v2786;
        if (v2784)
          v1977 = v1977;
        else
          v1977 = 0;
        v2788 = v2787 + v1977 == -1;
        v2789 = 0xE57DAA7F4F9C214;
        if (v2788)
          v2789 = 0;
        v2790 = v2727 + v2789;
        v2791 = 0x29DEAB8CCE63CD56;
        if (v2788)
          v2791 = 0;
        v2792 = 0x9057E5706EFB6C51;
        if (v2788)
          v2792 = 0;
        v2793 = 0x1A6EA717DFE5D51DLL;
        if (v2788)
          v2793 = 0;
        v2794 = 0xB49BF27CED4A1D5ELL;
        if (v2788)
          v2794 = 0;
        v2795 = v2754 + v2791;
        v2796 = v2756 + v2793;
        v2797 = -5;
        if (v2795 <= v2754)
          v2797 = 0;
        STACK[0x2088] = v2797 + v2795;
        STACK[0x1F98] = (__PAIR128__(v2790, v2727) - v2790) >> 64;
        v2798 = -9;
        if (v2796 <= v2756)
          v2798 = 0;
        STACK[0x1F90] = v2798 + v2796;
        v2799 = v2779 + v2792;
        v180 = v2779 + v2792 > v2779;
        v2800 = v2734 + v2794;
        v2801 = -15;
        if (!v180)
          v2801 = 0;
        v2802 = -3;
        if (v2734 >= v2800)
          v2802 = 0;
        STACK[0x2090] = v2802 + v2800;
        STACK[0x2080] = v2801 + v2799;
        v2803 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * SLODWORD(STACK[0x524])) - 12);
        STACK[0x3BB8] = STACK[0x2710];
        STACK[0x3828] = STACK[0x2708];
        STACK[0x33D0] = STACK[0x3C58];
        STACK[0x33C8] = STACK[0x3C40];
        STACK[0x3C58] = STACK[0x2798];
        STACK[0x3BA0] = STACK[0x26F8];
        STACK[0x33C0] = STACK[0x3C50];
        STACK[0x36C0] = STACK[0x3A70];
        STACK[0x32C8] = STACK[0x3C68];
        STACK[0x36B8] = STACK[0x3A78];
        STACK[0x3C50] = STACK[0x2770];
        STACK[0x32B8] = STACK[0x3C60];
        STACK[0x32C0] = STACK[0x3360];
        STACK[0x33B8] = STACK[0x3C48];
        STACK[0x32B0] = STACK[0x3B88];
        STACK[0x36B0] = STACK[0x3A80];
        STACK[0x32A8] = STACK[0x3B80];
        STACK[0x3C40] = STACK[0x2780];
        STACK[0x32D8] = STACK[0x3B90];
        STACK[0x32A0] = STACK[0x3BD8];
        STACK[0x3298] = STACK[0x3B98];
        STACK[0x36A8] = STACK[0x3A88];
        STACK[0x36A0] = STACK[0x39C0];
        STACK[0x3698] = STACK[0x3A90];
        STACK[0x3C48] = STACK[0x2788];
        STACK[0x3690] = STACK[0x3A98];
        LODWORD(STACK[0x3BD8]) = 111;
        STACK[0x3B70] = STACK[0x1FC0];
        STACK[0x3378] = STACK[0x3980];
        STACK[0x3B68] = STACK[0x1FA0];
        STACK[0x3B78] = STACK[0x1FC8];
        STACK[0x3370] = STACK[0x3960];
        STACK[0x3368] = STACK[0x3950];
        STACK[0x3210] = STACK[0x1FD0];
        STACK[0x3350] = STACK[0x1FE8];
        STACK[0x3238] = STACK[0x3948];
        STACK[0x3200] = STACK[0x39B0];
        STACK[0x3218] = STACK[0x1FE0];
        STACK[0x3358] = STACK[0x3940];
        STACK[0x3BD0] = STACK[0x3970];
        STACK[0x3230] = STACK[0x1FB8];
        STACK[0x3BC8] = STACK[0x3A18];
        STACK[0x3208] = STACK[0x3968];
        STACK[0x3228] = STACK[0x1FF0];
        STACK[0x3BC0] = STACK[0x3958];
        STACK[0x3250] = STACK[0x1FD8];
        STACK[0x3220] = STACK[0x1FB0];
        STACK[0x3AC8] = STACK[0x3978];
        STACK[0x3248] = STACK[0x1FA8];
        return v2803();
    }
  }
}

uint64_t sub_1006BEDAC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  ++LODWORD(STACK[0x21D4]);
  STACK[0x3C78] = *(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 2079));
  STACK[0x3880] = STACK[0x32F0];
  STACK[0x3BC8] = STACK[0x3150];
  STACK[0x3690] = STACK[0x3A98];
  STACK[0x38B8] = STACK[0x32E8];
  STACK[0x3898] = STACK[0x3308];
  STACK[0x3C30] = STACK[0x37E0];
  STACK[0x3698] = STACK[0x3A90];
  LODWORD(STACK[0x3BB8]) = STACK[0x2008];
  STACK[0x36A0] = STACK[0x39C0];
  STACK[0x38A8] = STACK[0x30E8];
  STACK[0x3BD0] = STACK[0x3170];
  STACK[0x36A8] = STACK[0x3A88];
  STACK[0x3938] = STACK[0x3A58];
  v0 = STACK[0x3B90];
  STACK[0x3890] = STACK[0x3B90];
  STACK[0x32D8] = v0;
  STACK[0x38C0] = STACK[0x3990];
  STACK[0x36B0] = STACK[0x3A80];
  STACK[0x38A0] = STACK[0x3940];
  STACK[0x3C20] = STACK[0x31A0];
  STACK[0x3C28] = STACK[0x3198];
  STACK[0x33B8] = STACK[0x3C48];
  STACK[0x38D8] = STACK[0x3950];
  STACK[0x38E0] = STACK[0x3998];
  STACK[0x38C8] = STACK[0x3948];
  STACK[0x3540] = STACK[0x39A0];
  STACK[0x3C08] = STACK[0x3358];
  v1 = STACK[0x3360];
  STACK[0x38F0] = STACK[0x3360];
  STACK[0x32C0] = v1;
  STACK[0x38D0] = STACK[0x3300];
  v2 = STACK[0x3B88];
  STACK[0x32B0] = STACK[0x3B88];
  STACK[0x39F0] = v2;
  v3 = STACK[0x3B80];
  STACK[0x32A8] = STACK[0x3B80];
  STACK[0x38E8] = v3;
  STACK[0x3C48] = STACK[0x3190];
  STACK[0x3878] = STACK[0x3958];
  STACK[0x3A10] = STACK[0x30E0];
  v4 = STACK[0x3BD8];
  STACK[0x32A0] = STACK[0x3BD8];
  STACK[0x3A00] = v4;
  STACK[0x36B8] = STACK[0x3A78];
  STACK[0x3438] = STACK[0x39A8];
  STACK[0x3BA8] = STACK[0x3368];
  v5 = STACK[0x3B98];
  STACK[0x3298] = STACK[0x3B98];
  STACK[0x39C8] = v5;
  v6 = STACK[0x3C68];
  STACK[0x3920] = STACK[0x3C68];
  STACK[0x32C8] = v6;
  LODWORD(STACK[0x3BD8]) = STACK[0x2010];
  STACK[0x3C68] = STACK[0x3188];
  STACK[0x36C0] = STACK[0x3A70];
  STACK[0x3548] = STACK[0x3180];
  STACK[0x3928] = STACK[0x32E0];
  STACK[0x3910] = STACK[0x3960];
  STACK[0x3930] = STACK[0x32F8];
  STACK[0x33C0] = STACK[0x3C50];
  STACK[0x39F8] = STACK[0x3350];
  v7 = STACK[0x3C60];
  STACK[0x32B8] = STACK[0x3C60];
  STACK[0x39D8] = v7;
  STACK[0x3BC0] = STACK[0x39B0];
  STACK[0x3550] = STACK[0x3148];
  STACK[0x3558] = STACK[0x3140];
  STACK[0x38F8] = STACK[0x3A60];
  STACK[0x3560] = STACK[0x3138];
  STACK[0x3688] = STACK[0x3A68];
  STACK[0x3568] = STACK[0x3130];
  STACK[0x33C8] = STACK[0x3C40];
  STACK[0x33D0] = STACK[0x3C58];
  LODWORD(STACK[0x3BA0]) = STACK[0x2018];
  LODWORD(STACK[0x3C60]) = STACK[0x2020];
  STACK[0x3450] = STACK[0x1338];
  STACK[0x3440] = STACK[0x1318];
  STACK[0x38B0] = STACK[0x820];
  STACK[0x3448] = STACK[0x1348];
  LODWORD(STACK[0x3B98]) = STACK[0x2070];
  STACK[0x3BB0] = STACK[0x1098];
  STACK[0x3900] = STACK[0x1328];
  STACK[0x3570] = STACK[0x1310];
  LODWORD(STACK[0x3AC8]) = STACK[0x2034];
  LODWORD(STACK[0x3A98]) = STACK[0x209C];
  STACK[0x3A08] = STACK[0x1078];
  STACK[0x3918] = STACK[0xC88];
  LODWORD(STACK[0x3B40]) = STACK[0x2074];
  LODWORD(STACK[0x3B90]) = STACK[0x2054];
  STACK[0x3C38] = STACK[0x1340];
  LODWORD(STACK[0x3B88]) = STACK[0x2038];
  LODWORD(STACK[0x39C0]) = STACK[0x2058];
  STACK[0x3908] = STACK[0x1090];
  LODWORD(STACK[0x3B80]) = STACK[0x203C];
  STACK[0x39D0] = STACK[0x818];
  LODWORD(STACK[0x3A90]) = STACK[0x2064];
  LODWORD(STACK[0x3B58]) = STACK[0x202C];
  LODWORD(STACK[0x3B68]) = STACK[0x2068];
  LODWORD(STACK[0x3A80]) = STACK[0x20A4];
  LODWORD(STACK[0x3B60]) = STACK[0x20AC];
  LODWORD(STACK[0x3B50]) = STACK[0x2030];
  LODWORD(STACK[0x3A70]) = STACK[0x20A0];
  LODWORD(STACK[0x3B48]) = STACK[0x20A8];
  LODWORD(STACK[0x3A78]) = STACK[0x2098];
  LODWORD(STACK[0x3820]) = STACK[0x2078];
  STACK[0x39E8] = STACK[0x1070];
  LODWORD(STACK[0x3B78]) = STACK[0x2060];
  LODWORD(STACK[0x3A88]) = STACK[0x2040];
  LODWORD(STACK[0x3828]) = STACK[0x206C];
  LODWORD(STACK[0x3B70]) = STACK[0x2044];
  STACK[0x39E0] = STACK[0x1320];
  return ((uint64_t (*)(void))STACK[0x3C78])();
}

uint64_t sub_1006BF11C@<X0>(unint64_t a1@<X0>, unint64_t a2@<X7>, unint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t (*v9)(void);
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  STACK[0x2C78] = v3;
  v8 = STACK[0x3710];
  v9 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 10112));
  STACK[0x2B98] = STACK[0x3C60];
  STACK[0x36C8] = STACK[0x28D8];
  STACK[0x3810] = STACK[0x28E0];
  STACK[0x2BC8] = STACK[0x3C68];
  STACK[0x2BC0] = STACK[0x3BD8];
  STACK[0x2BB8] = v4;
  STACK[0x3688] = STACK[0x39E0];
  STACK[0x2FE8] = STACK[0x2800];
  STACK[0x2FE0] = STACK[0x2808];
  STACK[0x37F8] = STACK[0x28E8];
  STACK[0x2FC8] = STACK[0x2810];
  STACK[0x2BB0] = STACK[0x3238];
  STACK[0x2FD8] = STACK[0x28B0];
  STACK[0x2FF0] = STACK[0x2AE0];
  STACK[0x2FC0] = STACK[0x2AA8];
  STACK[0x2C70] = STACK[0x3BD0];
  STACK[0x2C68] = STACK[0x30E0];
  STACK[0x2BA8] = STACK[0x3310];
  STACK[0x2FB0] = STACK[0x28F0];
  STACK[0x3808] = STACK[0x2A10];
  STACK[0x2FA8] = STACK[0x28B8];
  STACK[0x2FA0] = STACK[0x2910];
  STACK[0x2FB8] = STACK[0x2AE8];
  STACK[0x2FD0] = STACK[0x28F8];
  STACK[0x2BA0] = STACK[0x3330];
  STACK[0x3680] = STACK[0x39E8];
  STACK[0x2F90] = STACK[0x2918];
  STACK[0x3668] = STACK[0x39D8];
  STACK[0x2C60] = STACK[0x3250];
  STACK[0x2C58] = STACK[0x32E8];
  STACK[0x37F0] = STACK[0x2AF0];
  STACK[0x2F88] = STACK[0x2818];
  STACK[0x3678] = STACK[0x3350];
  STACK[0x2C50] = STACK[0x30D0];
  STACK[0x3670] = STACK[0x32F8];
  STACK[0x2F78] = STACK[0x2820];
  STACK[0x2F98] = STACK[0x2A18];
  STACK[0x2F80] = STACK[0x2920];
  STACK[0x2C48] = STACK[0x37E8];
  STACK[0x3660] = STACK[0x32E0];
  STACK[0x2F70] = STACK[0x2828];
  STACK[0x2F68] = STACK[0x2900];
  STACK[0x30E0] = STACK[0x2A20];
  STACK[0x3658] = STACK[0x39D0];
  STACK[0x3650] = STACK[0x3840];
  STACK[0x2F50] = STACK[0x2928];
  STACK[0x2B90] = STACK[0x3338];
  STACK[0x1458] = a3;
  STACK[0x3108] = a3;
  STACK[0x2C40] = STACK[0x3818];
  STACK[0x2B88] = STACK[0x3320];
  STACK[0x2F48] = STACK[0x2930];
  STACK[0x2C38] = STACK[0x3378];
  STACK[0x2C30] = STACK[0x3370];
  STACK[0x2F40] = STACK[0x28C0];
  STACK[0x2F38] = STACK[0x2830];
  STACK[0x2C28] = STACK[0x30E8];
  STACK[0x3640] = STACK[0x3B98];
  STACK[0x3648] = STACK[0x3BA8];
  STACK[0x3638] = STACK[0x3848];
  v10 = STACK[0x3260];
  STACK[0x3B50] = STACK[0x3260];
  STACK[0x1440] = v10;
  STACK[0x2B80] = v5;
  STACK[0x3630] = STACK[0x3A00];
  STACK[0x2C20] = STACK[0x3340];
  STACK[0x2B78] = STACK[0x3B88];
  STACK[0x2F58] = STACK[0x2A28];
  STACK[0x3628] = STACK[0x3A10];
  STACK[0x3618] = STACK[0x3B80];
  STACK[0x3610] = STACK[0x39F0];
  STACK[0x3620] = STACK[0x3850];
  STACK[0x2B70] = STACK[0x3240];
  v11 = STACK[0x3220];
  STACK[0x3178] = STACK[0x3220];
  STACK[0x1430] = v11;
  STACK[0x2F30] = STACK[0x2AB0];
  STACK[0x3608] = STACK[0x3858];
  STACK[0x3600] = STACK[0x3358];
  LODWORD(STACK[0x764]) = STACK[0x3BB8];
  v12 = STACK[0x3B68];
  STACK[0x1448] = STACK[0x3B68];
  STACK[0x30F8] = v12;
  STACK[0x2F28] = STACK[0x2838];
  STACK[0x35F8] = STACK[0x3A08];
  v13 = STACK[0x3248];
  STACK[0x1438] = STACK[0x3248];
  STACK[0x3100] = v13;
  STACK[0x2F20] = STACK[0x2840];
  STACK[0x2C18] = STACK[0x3368];
  STACK[0x3C60] = STACK[0x2938];
  STACK[0x37E8] = STACK[0x2AF8];
  STACK[0x1450] = v7;
  STACK[0x3118] = v7;
  STACK[0x2C00] = STACK[0x3BC8];
  STACK[0x30D0] = STACK[0x2A30];
  STACK[0x2B60] = STACK[0x3258];
  STACK[0x2B58] = STACK[0x3280];
  STACK[0x2F10] = STACK[0x2AB8];
  STACK[0x2F08] = STACK[0x2848];
  STACK[0x2F18] = STACK[0x2850];
  STACK[0x35F0] = STACK[0x3AD0];
  STACK[0x2F00] = STACK[0x2AC0];
  STACK[0x2EF8] = STACK[0x2858];
  STACK[0x2BE8] = STACK[0x3828];
  STACK[0x35E8] = STACK[0x3AD8];
  STACK[0x35E0] = STACK[0x3AE0];
  STACK[0x35D8] = STACK[0x3AE8];
  STACK[0x2B50] = STACK[0x3360];
  STACK[0x2EE8] = STACK[0x2860];
  STACK[0x2EF0] = STACK[0x2868];
  STACK[0x2ED8] = STACK[0x2940];
  STACK[0x2EE0] = STACK[0x2AC8];
  STACK[0x35D0] = STACK[0x3AF0];
  STACK[0x2ED0] = STACK[0x2A38];
  STACK[0x2B48] = v6;
  v14 = STACK[0x3BA0];
  STACK[0x1418] = STACK[0x3BA0];
  STACK[0x3B48] = v14;
  STACK[0x2EC0] = STACK[0x2870];
  STACK[0x32D8] = STACK[0x3B90];
  STACK[0x2EB8] = STACK[0x2878];
  STACK[0x2EC8] = STACK[0x2908];
  STACK[0x2EB0] = STACK[0x28C8];
  STACK[0x2BE0] = STACK[0x3308];
  STACK[0x1410] = a2;
  STACK[0x3B40] = a2;
  STACK[0x2B40] = STACK[0x3230];
  STACK[0x2EA8] = STACK[0x2948];
  STACK[0x2EA0] = STACK[0x2880];
  STACK[0x2BD8] = STACK[0x3270];
  v15 = STACK[0x3B70];
  STACK[0x3110] = STACK[0x3B70];
  STACK[0x13F0] = v15;
  STACK[0x2B38] = STACK[0x3328];
  STACK[0x2E98] = STACK[0x2B00];
  STACK[0x3B58] = a1;
  STACK[0x13D8] = a1;
  STACK[0x35C8] = STACK[0x3AF8];
  STACK[0x35C0] = STACK[0x3B08];
  v16 = STACK[0x3288];
  STACK[0x30F0] = STACK[0x3288];
  STACK[0x13D0] = v16;
  STACK[0x35B8] = STACK[0x3B00];
  STACK[0x2BD0] = STACK[0x3268];
  STACK[0x30E8] = STACK[0x2B08];
  STACK[0x35B0] = STACK[0x3B10];
  STACK[0x2B30] = STACK[0x3318];
  STACK[0x35A8] = STACK[0x3B18];
  STACK[0x2B28] = STACK[0x3278];
  LODWORD(STACK[0x2F64]) = STACK[0x27FC];
  STACK[0x2E90] = STACK[0x28D0];
  STACK[0x2B20] = STACK[0x3228];
  STACK[0x35A0] = STACK[0x3B20];
  STACK[0x30D8] = STACK[0x2A40];
  STACK[0x2E88] = STACK[0x2AD0];
  STACK[0x2E78] = STACK[0x2888];
  STACK[0x3C68] = STACK[0x2950];
  STACK[0x3598] = STACK[0x3B30];
  STACK[0x2E70] = STACK[0x2890];
  STACK[0x2E68] = STACK[0x2898];
  STACK[0x2B68] = STACK[0x3B78];
  STACK[0x3588] = STACK[0x3B28];
  STACK[0x2C10] = STACK[0x32F0];
  STACK[0x3818] = STACK[0x2A48];
  STACK[0x2E60] = STACK[0x2AD8];
  STACK[0x2C08] = STACK[0x3AC8];
  STACK[0x2BF8] = STACK[0x3300];
  STACK[0x2BF0] = STACK[0x3348];
  STACK[0x2E58] = STACK[0x28A0];
  STACK[0x2E80] = STACK[0x2B10];
  STACK[0x2E50] = STACK[0x2958];
  STACK[0x3580] = STACK[0x3B38];
  STACK[0x2E48] = STACK[0x28A8];
  LODWORD(STACK[0x3C08]) = 42;
  LODWORD(STACK[0x3590]) = v8;
  STACK[0x1408] = STACK[0x3160];
  STACK[0x1400] = STACK[0x31A8];
  STACK[0x13F8] = STACK[0x3158];
  STACK[0x13E8] = STACK[0x3290];
  STACK[0x13E0] = STACK[0x3C20];
  STACK[0x13C8] = STACK[0x3120];
  STACK[0x13C0] = STACK[0x3820];
  STACK[0x13B8] = STACK[0x3168];
  STACK[0x13B0] = STACK[0x3800];
  STACK[0x1428] = STACK[0x3C28];
  STACK[0x1420] = STACK[0x3B60];
  return v9();
}

uint64_t sub_1006C0514(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t);
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  STACK[0x3B58] = v14;
  STACK[0x3B60] = v13;
  STACK[0x3BE0] = v8;
  STACK[0x3B80] = v12;
  STACK[0x3B88] = v11;
  STACK[0x3BB0] = v9;
  STACK[0x3B90] = v15;
  STACK[0x3A80] = v16;
  STACK[0x3A88] = a1;
  STACK[0x3788] = a8;
  STACK[0x3790] = a7;
  STACK[0x3798] = a2;
  STACK[0x37A0] = a5;
  STACK[0x37A8] = a4;
  v21 = (uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)(v10 + 8 * (int)STACK[0x3C58]) - (STACK[0x3C58] ^ 0x139BLL));
  v22 = STACK[0x3370];
  v23 = STACK[0x3368];
  v24 = STACK[0x3350];
  v25 = STACK[0x3BC0];
  v26 = STACK[0x3200];
  STACK[0x2790] = v20;
  STACK[0x2788] = v18;
  STACK[0x2780] = v19;
  STACK[0x2778] = a6;
  STACK[0x2770] = v17;
  return v21(v25, v22, v26, v24, v23);
}

uint64_t sub_1006C05B8()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * v0) - ((v0 - 226) ^ 0x3C45)))();
}

uint64_t sub_1006C05D0@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (a1 - 5429)) - ((2 * a1) ^ 0x789ALL)))();
}

uint64_t sub_1006C05F4()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * v0) - ((v0 - 8474) | 0x1049u) + 15429))();
}

uint64_t sub_1006C0618(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL4 v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  unint64_t v76;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _BOOL4 v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  _BOOL4 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _BOOL4 v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _BOOL4 v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BOOL4 v141;
  unint64_t v142;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BOOL4 v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BOOL4 v179;
  uint64_t v180;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  int v207;
  uint64_t v208;
  unint64_t v209;
  BOOL v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  int v224;
  uint64_t v225;
  unint64_t v226;
  _BOOL4 v227;
  unint64_t v228;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  _BOOL4 v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BOOL4 v243;
  unint64_t v244;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  int v258;
  uint64_t v259;
  unint64_t v260;
  _BOOL4 v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _BOOL4 v272;
  unint64_t v273;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _BOOL4 v284;
  unint64_t v285;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  _BOOL4 v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  _BOOL4 v303;
  unint64_t v304;
  int v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  int v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  int v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  int v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  int v358;
  uint64_t v359;
  unint64_t v360;
  _BOOL4 v361;
  unint64_t v362;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _BOOL4 v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  _BOOL4 v388;
  uint64_t v389;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _BOOL4 v400;
  uint64_t v401;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  int v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  _BOOL4 v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _BOOL4 v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _BOOL4 v438;
  uint64_t v439;
  int v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  _BOOL4 v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  int v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  int v480;
  uint64_t v481;
  unint64_t v482;
  _BOOL4 v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  _BOOL4 v492;
  unint64_t v493;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  int v502;
  uint64_t v503;
  unint64_t v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  int v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  int v516;
  uint64_t v517;
  unint64_t v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  _BOOL4 v525;
  uint64_t v526;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  _BOOL4 v535;
  unint64_t v536;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  unint64_t v543;
  unint64_t v544;
  uint64_t v545;
  _BOOL4 v546;
  unint64_t v547;
  int v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  _BOOL4 v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  _BOOL4 v564;
  uint64_t v565;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  unint64_t v572;
  BOOL v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  BOOL v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  int v596;
  uint64_t v597;
  unint64_t v598;
  unint64_t v599;
  int v600;
  uint64_t v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unint64_t v608;
  int v609;
  unint64_t v610;
  uint64_t v611;
  unint64_t v612;
  unint64_t v613;
  int v614;
  uint64_t v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  _BOOL4 v623;
  uint64_t v624;
  unint64_t v625;
  __int128 v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  _BOOL4 v631;
  uint64_t v632;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  _BOOL4 v638;
  uint64_t v639;
  uint64_t v641;
  unint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  _BOOL4 v649;
  uint64_t v650;
  uint64_t v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  _BOOL4 v660;
  uint64_t v661;
  uint64_t v663;
  unint64_t v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  unint64_t v668;
  unint64_t v669;
  uint64_t v670;
  _BOOL4 v671;
  unint64_t v672;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  unint64_t v679;
  _BOOL4 v680;
  unint64_t v681;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  unint64_t v686;
  _BOOL4 v687;
  unint64_t v688;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t v693;
  _BOOL4 v694;
  unint64_t v695;
  int v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  unint64_t v700;
  unint64_t v701;
  uint64_t v702;
  _BOOL4 v703;
  unint64_t v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  unint64_t v708;
  unint64_t v709;
  uint64_t v710;
  _BOOL4 v711;
  unint64_t v712;
  int v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  _BOOL4 v720;
  unint64_t v721;
  uint64_t v723;
  unint64_t v724;
  uint64_t v725;
  unint64_t v726;
  uint64_t v727;
  unint64_t v728;
  uint64_t v729;
  unint64_t v730;
  unint64_t v731;
  uint64_t v732;
  unint64_t v733;
  int v734;
  uint64_t v735;
  unint64_t v736;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  unint64_t v741;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  unint64_t v748;
  unint64_t v749;
  uint64_t v750;
  unint64_t v751;
  int v752;
  uint64_t v753;
  unint64_t v754;
  _BOOL4 v755;
  unint64_t v756;
  unint64_t v757;
  unint64_t v758;
  uint64_t v759;
  uint64_t v760;
  unint64_t v761;
  uint64_t v762;
  uint64_t v763;
  _BOOL4 v764;
  unint64_t v765;
  uint64_t v767;
  uint64_t v768;
  unint64_t v769;
  uint64_t v770;
  unint64_t v771;
  unint64_t v772;
  int v773;
  uint64_t v774;
  unint64_t v775;
  unint64_t v776;
  unint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t v782;
  unint64_t v783;
  int v784;
  uint64_t v785;
  unint64_t v786;
  unint64_t v787;
  int v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  int v799;
  uint64_t v800;
  unint64_t v801;
  uint64_t v802;
  unint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  unint64_t v809;
  int v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  unint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  unint64_t v818;
  unint64_t v819;
  uint64_t v820;
  unint64_t v821;
  int v822;
  unint64_t v823;
  int v824;
  uint64_t v825;
  unint64_t v826;
  _BOOL4 v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v831;
  unint64_t v832;
  unint64_t v833;
  uint64_t v834;
  _BOOL4 v835;
  unint64_t v836;
  uint64_t v837;
  unint64_t v838;
  uint64_t v839;
  unint64_t v840;
  unint64_t v841;
  uint64_t v842;
  _BOOL4 v843;
  unint64_t v844;
  unint64_t v845;
  unint64_t v846;
  uint64_t v847;
  uint64_t v848;
  unint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  int v853;
  uint64_t v854;
  unint64_t v855;
  uint64_t v856;
  unint64_t v857;
  uint64_t v858;
  unint64_t v859;
  unint64_t v860;
  uint64_t v861;
  unint64_t v862;
  int v863;
  uint64_t v864;
  unint64_t v865;
  uint64_t v866;
  unint64_t v867;
  uint64_t v868;
  unint64_t v869;
  uint64_t v870;
  uint64_t v871;
  unint64_t v872;
  unint64_t v873;
  uint64_t v875;
  unint64_t v876;
  unint64_t v877;
  uint64_t v878;
  unint64_t v879;
  int v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v884;
  unint64_t v885;
  uint64_t v886;
  unint64_t v887;
  unint64_t v888;
  int v889;
  uint64_t v890;
  uint64_t v891;
  unint64_t v892;
  uint64_t v893;
  unint64_t v894;
  unint64_t v895;
  unint64_t v896;
  uint64_t v897;
  unint64_t v898;
  int v899;
  uint64_t v900;
  unint64_t v901;
  unint64_t v902;
  int v903;
  uint64_t v904;
  unint64_t v905;
  unint64_t v906;
  unint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t v913;
  int v914;
  uint64_t v915;
  unint64_t v916;
  unint64_t v917;
  int v918;
  uint64_t v919;
  unint64_t v920;
  uint64_t v921;
  unint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  _BOOL4 v928;
  uint64_t v929;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  unint64_t v934;
  unint64_t v935;
  uint64_t v936;
  unint64_t v937;
  unint64_t v938;
  unint64_t v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unint64_t v945;
  int v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  unint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  _BOOL4 v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  _BOOL4 v966;
  uint64_t v967;
  unint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  _BOOL4 v975;
  unint64_t v976;
  uint64_t v977;
  uint64_t v978;
  _BOOL4 v979;
  uint64_t v980;
  uint64_t v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  _BOOL4 v987;
  uint64_t v988;
  int v989;
  uint64_t v990;
  unint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  _BOOL4 v996;
  uint64_t v997;
  int v998;
  uint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  _BOOL4 v1005;
  uint64_t v1006;
  uint64_t v1008;
  unint64_t v1009;
  uint64_t v1010;
  unint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  int v1015;
  uint64_t v1016;
  unint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  _BOOL4 v1020;
  uint64_t v1021;
  uint64_t v1022;
  unint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  unint64_t v1030;
  int v1031;
  uint64_t v1032;
  unint64_t v1033;
  uint64_t v1034;
  _BOOL4 v1035;
  uint64_t v1036;
  unint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  _BOOL4 v1043;
  uint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  _BOOL4 v1050;
  uint64_t v1051;
  int v1052;
  uint64_t v1053;
  unint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  int v1060;
  uint64_t v1061;
  uint64_t v1062;
  unint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  unint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  unint64_t v1072;
  int v1073;
  uint64_t v1074;
  unint64_t v1075;
  unint64_t v1076;
  int v1077;
  uint64_t v1078;
  unint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  unint64_t v1082;
  int v1083;
  uint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  unint64_t v1092;
  int v1093;
  uint64_t v1094;
  unint64_t v1095;
  unint64_t v1096;
  _BOOL4 v1097;
  uint64_t v1098;
  unint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  _BOOL4 v1105;
  uint64_t v1106;
  unint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  _BOOL4 v1112;
  uint64_t v1113;
  int v1114;
  uint64_t v1115;
  unint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  _BOOL4 v1121;
  uint64_t v1122;
  uint64_t v1124;
  unint64_t v1125;
  uint64_t v1126;
  unint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  _BOOL4 v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  unint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  unint64_t v1140;
  int v1141;
  uint64_t v1142;
  unint64_t v1143;
  uint64_t v1144;
  _BOOL4 v1145;
  uint64_t v1146;
  unint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  _BOOL4 v1153;
  uint64_t v1154;
  unint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  _BOOL4 v1161;
  uint64_t v1162;
  unint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  _BOOL4 v1168;
  uint64_t v1169;
  uint64_t v1170;
  unint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  _BOOL4 v1176;
  uint64_t v1177;
  uint64_t v1178;
  unint64_t v1179;
  uint64_t v1180;
  unint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  unint64_t v1186;
  uint64_t v1187;
  unint64_t v1188;
  int v1189;
  uint64_t v1190;
  unint64_t v1191;
  _BOOL4 v1192;
  unint64_t v1193;
  uint64_t v1195;
  unint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  _BOOL4 v1199;
  uint64_t v1200;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  _BOOL4 v1206;
  uint64_t v1207;
  int v1208;
  unint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  _BOOL4 v1212;
  uint64_t v1213;
  uint64_t v1214;
  unint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  _BOOL4 v1218;
  uint64_t v1219;
  uint64_t v1220;
  unint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  _BOOL4 v1224;
  uint64_t v1225;
  uint64_t v1226;
  unint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  _BOOL4 v1230;
  uint64_t v1231;
  uint64_t v1232;
  unint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  _BOOL4 v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  unint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  unint64_t v1254;
  int v1255;
  uint64_t v1256;
  unint64_t v1257;
  uint64_t v1258;
  unint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  unint64_t v1265;
  int v1266;
  uint64_t v1267;
  uint64_t v1268;
  unint64_t v1269;
  unint64_t v1270;
  int v1271;
  uint64_t v1272;
  unint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  unint64_t v1276;
  int v1277;
  uint64_t v1278;
  unint64_t v1279;
  uint64_t v1280;
  unint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  unint64_t v1284;
  int v1285;
  uint64_t v1286;
  unint64_t v1287;
  uint64_t v1288;
  unint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  unint64_t v1296;
  int v1297;
  uint64_t v1298;
  unint64_t v1299;
  unint64_t v1300;
  int v1301;
  uint64_t v1302;
  unint64_t v1303;
  unint64_t v1304;
  uint64_t v1305;
  unint64_t v1306;
  uint64_t v1307;
  unint64_t v1308;
  unint64_t v1309;
  uint64_t v1310;
  unint64_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  unint64_t v1314;
  uint64_t v1315;
  unint64_t v1316;
  uint64_t v1317;
  unint64_t v1318;
  unint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  unint64_t v1324;
  uint64_t v1325;
  unint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  unint64_t v1331;
  int v1332;
  uint64_t v1333;
  unint64_t v1334;
  unint64_t v1335;
  uint64_t v1336;
  unint64_t v1337;
  uint64_t (*v1338)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v1339;
  unint64_t v1340;
  unint64_t v1341;
  unint64_t v1342;
  uint64_t result;
  int v1344;
  unint64_t v1345;
  _BOOL8 v1346;
  uint64_t v1347;
  unint64_t v1348;
  uint64_t v1349;
  unint64_t v1350;
  uint64_t v1351;
  unint64_t v1352;
  uint64_t v1353;
  unint64_t v1354;
  uint64_t v1355;
  unint64_t v1356;
  uint64_t v1357;
  unint64_t v1358;
  uint64_t v1359;
  unint64_t v1360;
  uint64_t v1361;
  unint64_t v1362;
  uint64_t v1363;
  unint64_t v1364;
  uint64_t v1365;
  uint64_t (*v1366)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v1367;
  unint64_t v1368;
  unint64_t v1369;
  unint64_t v1370;
  unint64_t v1371;
  uint64_t v1372;
  int v1373;
  uint64_t v1374;
  unint64_t v1375;
  _BOOL8 v1376;
  unint64_t v1377;
  uint64_t v1378;
  unint64_t v1379;
  unint64_t v1380;
  uint64_t v1381;
  unint64_t v1382;
  uint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  unint64_t v1386;
  uint64_t v1387;
  unint64_t v1388;
  uint64_t v1389;
  unint64_t v1390;
  uint64_t v1391;
  unint64_t v1392;
  uint64_t v1393;
  uint64_t (*v1394)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v1395;
  unint64_t v1396;
  unint64_t v1397;
  unint64_t v1398;
  unint64_t v1399;
  unint64_t v1400;
  unint64_t v1401;
  uint64_t v1402;
  unint64_t v1403;
  unint64_t v1404;
  _BOOL4 v1405;
  uint64_t v1406;
  unint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  _BOOL4 v1412;
  uint64_t v1413;
  unsigned __int8 v1414;
  char v1415;
  unint64_t v1416;
  unsigned __int8 v1417;
  unint64_t v1418;
  uint64_t v1419;
  unint64_t v1420;
  uint64_t v1421;
  unint64_t v1422;
  uint64_t v1424;
  unint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  _BOOL4 v1430;
  uint64_t v1431;
  unint64_t v1432;
  _BOOL4 v1433;
  unint64_t v1434;
  uint64_t v1435;
  unint64_t v1436;
  uint64_t v1437;
  unint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  unint64_t v1443;
  int v1444;
  uint64_t v1445;
  unint64_t v1446;
  uint64_t v1448;
  unint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  _BOOL4 v1454;
  uint64_t v1455;
  unint64_t v1456;
  unint64_t v1457;
  _BOOL4 v1458;
  uint64_t v1459;
  unint64_t v1460;
  _BOOL4 v1461;
  unint64_t v1462;
  unint64_t v1463;
  uint64_t v1464;
  unint64_t v1465;
  unint64_t v1466;
  uint64_t v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  unint64_t v1473;
  int v1474;
  uint64_t v1475;
  unint64_t v1476;
  uint64_t v1478;
  unint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  _BOOL4 v1484;
  uint64_t v1485;
  unint64_t v1486;
  unint64_t v1487;
  _BOOL4 v1488;
  uint64_t v1489;
  unint64_t v1490;
  _BOOL4 v1491;
  uint64_t v1492;
  uint64_t v1493;
  unint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  unint64_t v1499;
  int v1500;
  unint64_t v1501;
  uint64_t v1502;
  unint64_t v1503;
  uint64_t v1505;
  unint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  _BOOL4 v1511;
  uint64_t v1512;
  unint64_t v1513;
  unint64_t v1514;
  _BOOL4 v1515;
  uint64_t v1516;
  unint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  _BOOL4 v1522;
  uint64_t v1523;
  int v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  unint64_t v1528;
  uint64_t v1530;
  unint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  _BOOL4 v1536;
  uint64_t v1537;
  unint64_t v1538;
  _BOOL4 v1539;
  uint64_t v1540;
  unint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  _BOOL4 v1546;
  unint64_t v1547;
  unint64_t v1548;
  unint64_t v1549;
  unint64_t v1550;
  uint64_t v1551;
  unint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  unint64_t v1558;
  int v1559;
  unint64_t v1560;
  unint64_t v1561;
  uint64_t v1562;
  unint64_t v1563;
  uint64_t v1565;
  unint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  _BOOL4 v1571;
  uint64_t v1572;
  unint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  _BOOL4 v1578;
  unint64_t v1579;
  unint64_t v1580;
  int v1581;
  unint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  unint64_t v1585;
  unint64_t v1586;
  int v1587;
  int v1588;
  uint64_t v1589;
  unint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  unint64_t v1594;
  int v1595;
  uint64_t v1596;
  unint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  _BOOL4 v1601;
  uint64_t v1602;
  uint64_t v1604;
  unint64_t v1605;
  unint64_t v1606;
  uint64_t v1607;
  unint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  _BOOL4 v1613;
  uint64_t v1614;
  unint64_t v1615;
  unint64_t v1616;
  int v1617;
  unint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  unint64_t v1621;
  int v1622;
  uint64_t v1623;
  unint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  _BOOL4 v1628;
  uint64_t v1629;
  uint64_t v1631;
  unint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  unint64_t v1636;
  int v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  unint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  _BOOL4 v1646;
  uint64_t v1647;
  unint64_t v1648;
  unint64_t v1649;
  int v1650;
  unint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  unint64_t v1654;
  int v1655;
  uint64_t v1656;
  unint64_t v1657;
  unint64_t v1658;
  unint64_t v1659;
  unint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  unint64_t v1663;
  int v1664;
  uint64_t v1665;
  unint64_t v1666;
  uint64_t v1667;
  unint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  _BOOL4 v1672;
  uint64_t v1673;
  unint64_t v1674;
  uint64_t v1675;
  int v1676;
  _BOOL4 v1677;
  uint64_t v1678;
  unint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  _BOOL4 v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  unint64_t v1686;
  _BOOL4 v1687;
  uint64_t v1688;
  unint64_t v1689;
  unint64_t v1690;
  unint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  unint64_t v1694;
  int v1695;
  uint64_t v1696;
  unint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  _BOOL4 v1702;
  uint64_t v1703;
  unint64_t v1704;
  unint64_t v1705;
  unint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  _BOOL4 v1709;
  unint64_t v1710;
  uint64_t v1712;
  unint64_t v1713;
  uint64_t v1714;
  unint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  unint64_t v1719;
  int v1720;
  uint64_t v1721;
  uint64_t v1722;
  unint64_t v1723;
  unint64_t v1724;
  uint64_t v1725;
  unint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  unint64_t v1731;
  int v1732;
  uint64_t v1733;
  unint64_t v1734;
  uint64_t v1735;
  unint64_t v1736;
  unint64_t v1737;
  uint64_t v1738;
  unint64_t v1739;
  uint64_t v1741;
  unint64_t v1742;
  uint64_t v1743;
  unint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  BOOL v1747;
  unint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  unint64_t v1754;
  unint64_t v1755;
  int v1756;
  uint64_t v1757;
  unint64_t v1758;
  unint64_t v1759;
  int v1760;
  unint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  unint64_t v1767;
  unint64_t v1768;
  int v1769;
  uint64_t v1770;
  unint64_t v1771;
  unint64_t v1772;
  int v1773;
  uint64_t v1774;
  unint64_t v1775;
  unint64_t v1776;
  unint64_t v1777;
  unint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  unint64_t v1781;
  int v1782;
  uint64_t v1783;
  unint64_t v1784;
  unint64_t v1785;
  int v1786;
  uint64_t v1787;
  unint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  _BOOL4 v1794;
  uint64_t v1795;
  int v1796;
  uint64_t v1797;
  unint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  _BOOL4 v1803;
  uint64_t v1804;
  int v1805;
  uint64_t v1806;
  unint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  _BOOL4 v1812;
  uint64_t v1813;
  int v1814;
  uint64_t v1815;
  unint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  _BOOL4 v1821;
  uint64_t v1822;
  int v1823;
  uint64_t v1824;
  unint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  unint64_t v1830;
  int v1831;
  uint64_t v1832;
  unint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  unint64_t v1837;
  unint64_t v1838;
  unint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  unint64_t v1844;
  int v1845;
  uint64_t v1847;
  unint64_t v1848;
  uint64_t v1849;
  unint64_t v1850;
  uint64_t v1852;
  unint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  _BOOL4 v1856;
  unint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  unint64_t v1861;
  _BOOL4 v1862;
  unint64_t v1863;
  uint64_t v1865;
  unint64_t v1866;
  unint64_t v1867;
  unint64_t v1868;
  unint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  _BOOL4 v1872;
  unint64_t v1873;
  unint64_t v1874;
  unint64_t v1875;
  unint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  unint64_t v1879;
  int v1880;
  uint64_t v1881;
  unint64_t v1882;
  uint64_t v1883;
  unint64_t v1884;
  unint64_t v1885;
  int v1886;
  uint64_t v1887;
  unint64_t v1888;
  uint64_t v1889;
  unint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  unint64_t v1894;
  int v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  unint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  unint64_t v1904;
  unint64_t v1905;
  int v1906;
  uint64_t v1907;
  unint64_t v1908;
  uint64_t v1909;
  unint64_t v1910;
  unint64_t v1911;
  unint64_t v1912;
  unint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  unint64_t v1916;
  int v1917;
  uint64_t v1918;
  unint64_t v1919;
  _BOOL4 v1920;
  unint64_t v1921;
  uint64_t v1923;
  unint64_t v1924;
  unint64_t v1925;
  unint64_t v1926;
  unint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  unint64_t v1930;
  _BOOL4 v1931;
  uint64_t v1932;
  unint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  _BOOL4 v1938;
  uint64_t v1939;
  int v1940;
  uint64_t v1941;
  unint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  _BOOL4 v1947;
  uint64_t v1948;
  int v1949;
  uint64_t v1950;
  unint64_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  _BOOL4 v1956;
  uint64_t v1957;
  int v1958;
  uint64_t v1959;
  unint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  _BOOL4 v1965;
  uint64_t v1966;
  int v1967;
  uint64_t v1968;
  unint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  unint64_t v1975;
  unint64_t v1976;
  int v1977;
  uint64_t v1978;
  uint64_t v1979;
  unint64_t v1980;
  unint64_t v1981;
  uint64_t v1983;
  unint64_t v1984;
  uint64_t v1985;
  unint64_t v1986;
  uint64_t v1988;
  unint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  unint64_t v1992;
  int v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  unint64_t v1997;
  _BOOL4 v1998;
  uint64_t v1999;
  unint64_t v2000;
  unint64_t v2001;
  unint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  _BOOL4 v2005;
  unint64_t v2006;
  uint64_t v2008;
  unint64_t v2009;
  uint64_t v2010;
  unint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  unint64_t v2015;
  int v2016;
  uint64_t v2017;
  unint64_t v2018;
  _BOOL4 v2019;
  unint64_t v2020;
  uint64_t v2022;
  unint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  uint64_t v2026;
  _BOOL4 v2027;
  uint64_t v2028;
  uint64_t v2030;
  uint64_t v2031;
  uint64_t v2032;
  unint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  unint64_t v2037;
  int v2038;
  uint64_t v2039;
  unint64_t v2040;
  unint64_t v2041;
  int v2042;
  uint64_t v2043;
  unint64_t v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  _BOOL4 v2048;
  uint64_t v2049;
  uint64_t v2051;
  unint64_t v2052;
  uint64_t v2053;
  unint64_t v2054;
  uint64_t v2055;
  unint64_t v2056;
  unint64_t v2057;
  uint64_t v2058;
  unint64_t v2059;
  uint64_t v2060;
  unint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  _BOOL4 v2065;
  uint64_t v2066;
  int v2067;
  uint64_t v2068;
  unint64_t v2069;
  unint64_t v2070;
  unint64_t v2071;
  unint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  _BOOL4 v2075;
  unint64_t v2076;
  int v2077;
  uint64_t v2078;
  unint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  uint64_t v2083;
  _BOOL4 v2084;
  uint64_t v2085;
  unint64_t v2086;
  unint64_t v2087;
  unint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  unint64_t v2091;
  int v2092;
  uint64_t v2093;
  unint64_t v2094;
  uint64_t v2095;
  unint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  unint64_t v2102;
  int v2103;
  unint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  unint64_t v2109;
  uint64_t v2110;
  unint64_t v2111;
  int v2112;
  uint64_t v2113;
  unint64_t v2114;
  unint64_t v2115;
  uint64_t v2116;
  unint64_t v2117;
  uint64_t v2119;
  uint64_t v2120;
  unint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  unint64_t v2126;
  uint64_t v2127;
  unint64_t v2128;
  int v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t v2132;
  uint64_t v2133;
  unint64_t v2134;
  uint64_t v2135;
  unint64_t v2136;
  unint64_t v2137;
  int v2138;
  uint64_t v2140;
  unint64_t v2141;
  uint64_t v2142;
  unint64_t v2143;
  unint64_t v2144;
  int v2145;
  uint64_t v2146;
  unint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  unint64_t v2150;
  int v2151;
  uint64_t v2152;
  unint64_t v2153;
  unint64_t v2154;
  unint64_t v2155;
  unint64_t v2156;
  uint64_t v2157;
  uint64_t v2158;
  unint64_t v2159;
  int v2160;
  uint64_t v2161;
  unint64_t v2162;
  _BOOL4 v2163;
  unint64_t v2164;
  uint64_t v2166;
  unint64_t v2167;
  unint64_t v2168;
  unint64_t v2169;
  unint64_t v2170;
  uint64_t v2171;
  uint64_t v2172;
  _BOOL4 v2173;
  unint64_t v2174;
  uint64_t v2176;
  unint64_t v2177;
  uint64_t v2178;
  unint64_t v2179;
  _BOOL4 v2180;
  unint64_t v2181;
  uint64_t v2182;
  unint64_t v2183;
  uint64_t v2184;
  unint64_t v2185;
  uint64_t v2186;
  uint64_t v2187;
  uint64_t v2188;
  unint64_t v2189;
  int v2190;
  uint64_t v2191;
  unint64_t v2192;
  uint64_t v2193;
  unint64_t v2194;
  unint64_t v2195;
  uint64_t v2196;
  unint64_t v2197;
  uint64_t v2198;
  unint64_t v2199;
  uint64_t v2200;
  uint64_t v2201;
  uint64_t v2202;
  _BOOL4 v2203;
  uint64_t v2204;
  uint64_t v2205;
  unint64_t v2206;
  uint64_t v2207;
  uint64_t v2208;
  uint64_t v2209;
  uint64_t v2210;
  _BOOL4 v2211;
  uint64_t v2212;
  int v2213;
  uint64_t v2214;
  unint64_t v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  _BOOL4 v2220;
  uint64_t v2221;
  int v2222;
  uint64_t v2223;
  unint64_t v2224;
  uint64_t v2225;
  uint64_t v2226;
  uint64_t v2227;
  uint64_t v2228;
  unint64_t v2229;
  int v2230;
  uint64_t v2231;
  unint64_t v2232;
  uint64_t v2233;
  unint64_t v2234;
  uint64_t v2235;
  uint64_t v2236;
  uint64_t v2237;
  unint64_t v2238;
  unint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  uint64_t v2244;
  unint64_t v2245;
  int v2246;
  uint64_t v2248;
  unint64_t v2249;
  uint64_t v2250;
  unint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  uint64_t v2254;
  uint64_t v2255;
  unint64_t v2256;
  unint64_t v2257;
  int v2258;
  uint64_t v2260;
  unint64_t v2261;
  uint64_t v2262;
  unint64_t v2263;
  _BOOL4 v2264;
  unint64_t v2265;
  int v2266;
  uint64_t v2267;
  uint64_t v2268;
  uint64_t v2269;
  unint64_t v2270;
  _BOOL4 v2271;
  uint64_t v2272;
  unint64_t v2273;
  unint64_t v2274;
  unint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  unint64_t v2278;
  int v2279;
  uint64_t v2280;
  unint64_t v2281;
  uint64_t v2282;
  unint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  uint64_t v2286;
  unint64_t v2287;
  int v2288;
  uint64_t v2289;
  unint64_t v2290;
  unint64_t v2291;
  int v2292;
  uint64_t v2293;
  unint64_t v2294;
  uint64_t v2295;
  uint64_t v2296;
  uint64_t v2297;
  unint64_t v2298;
  int v2299;
  uint64_t v2300;
  unint64_t v2301;
  uint64_t v2302;
  unint64_t v2303;
  uint64_t v2304;
  uint64_t v2305;
  uint64_t v2306;
  unint64_t v2307;
  int v2308;
  uint64_t v2309;
  unint64_t v2310;
  _BOOL4 v2311;
  unint64_t v2312;
  uint64_t v2314;
  unint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  unint64_t v2319;
  int v2320;
  uint64_t v2321;
  unint64_t v2322;
  uint64_t v2323;
  unint64_t v2324;
  unint64_t v2325;
  uint64_t v2326;
  unint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  unint64_t v2331;
  int v2332;
  uint64_t v2333;
  unint64_t v2334;
  uint64_t v2335;
  uint64_t v2336;
  unint64_t v2337;
  unint64_t v2338;
  unint64_t v2339;
  uint64_t v2340;
  unint64_t v2341;
  uint64_t v2342;
  unint64_t v2343;
  uint64_t v2344;
  uint64_t v2345;
  uint64_t v2346;
  _BOOL4 v2347;
  uint64_t v2348;
  uint64_t v2349;
  unint64_t v2350;
  uint64_t v2351;
  unint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  uint64_t v2355;
  _BOOL4 v2356;
  uint64_t v2357;
  int v2358;
  uint64_t v2359;
  unint64_t v2360;
  uint64_t v2361;
  uint64_t v2362;
  uint64_t v2363;
  uint64_t v2364;
  _BOOL4 v2365;
  uint64_t v2366;
  int v2367;
  uint64_t v2368;
  unint64_t v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  _BOOL4 v2374;
  uint64_t v2375;
  int v2376;
  uint64_t v2377;
  unint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  uint64_t v2382;
  unint64_t v2383;
  uint64_t v2384;
  unint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  int v2388;
  uint64_t v2389;
  uint64_t v2390;
  unint64_t v2391;
  int v2392;
  uint64_t v2393;
  unint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  unint64_t v2397;
  unint64_t v2398;
  uint64_t v2400;
  unint64_t v2401;
  uint64_t v2402;
  unint64_t v2403;
  uint64_t v2404;
  uint64_t v2406;
  unint64_t v2407;
  uint64_t v2408;
  uint64_t v2409;
  unint64_t v2410;
  unint64_t v2411;
  int v2412;
  uint64_t v2413;
  unint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  unint64_t v2419;
  int v2420;
  uint64_t v2421;
  unint64_t v2422;
  _BOOL4 v2423;
  unint64_t v2424;
  unint64_t v2425;
  unint64_t v2426;
  unint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  _BOOL4 v2430;
  unint64_t v2431;
  uint64_t v2433;
  unint64_t v2434;
  uint64_t v2435;
  unint64_t v2436;
  uint64_t v2437;
  unint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t v2441;
  unint64_t v2442;
  int v2443;
  uint64_t v2444;
  unint64_t v2445;
  unint64_t v2446;
  int v2447;
  uint64_t v2448;
  unint64_t v2449;
  uint64_t v2450;
  unint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  uint64_t v2454;
  _BOOL4 v2455;
  uint64_t v2456;
  uint64_t v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  _BOOL4 v2462;
  uint64_t v2463;
  uint64_t v2465;
  unint64_t v2466;
  uint64_t v2467;
  unint64_t v2468;
  uint64_t v2469;
  uint64_t v2470;
  uint64_t v2471;
  unint64_t v2472;
  int v2473;
  uint64_t v2474;
  unint64_t v2475;
  uint64_t v2476;
  unint64_t v2477;
  unint64_t v2478;
  uint64_t v2479;
  unint64_t v2480;
  uint64_t v2481;
  unint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t v2485;
  _BOOL4 v2486;
  uint64_t v2487;
  int v2488;
  uint64_t v2489;
  uint64_t v2490;
  unint64_t v2491;
  unint64_t v2492;
  uint64_t v2493;
  unint64_t v2494;
  unint64_t v2495;
  unint64_t v2496;
  unint64_t v2497;
  uint64_t v2498;
  uint64_t v2499;
  unint64_t v2500;
  int v2501;
  uint64_t v2502;
  unint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  unint64_t v2506;
  unint64_t v2507;
  unint64_t v2508;
  uint64_t v2509;
  unint64_t v2510;
  unint64_t v2511;
  unint64_t v2512;
  unint64_t v2513;
  uint64_t v2514;
  uint64_t v2515;
  _BOOL4 v2516;
  unint64_t v2517;
  int v2518;
  uint64_t v2519;
  uint64_t v2520;
  unint64_t v2521;
  unint64_t v2522;
  unint64_t v2523;
  uint64_t v2524;
  unint64_t v2525;
  uint64_t v2526;
  unint64_t v2527;
  uint64_t v2528;
  uint64_t v2529;
  uint64_t v2530;
  unint64_t v2531;
  uint64_t v2532;
  uint64_t v2533;
  unint64_t v2534;
  int v2535;
  uint64_t v2536;
  uint64_t v2537;
  unint64_t v2538;
  unint64_t v2539;
  uint64_t v2540;
  unint64_t v2541;
  unint64_t v2542;
  unint64_t v2543;
  uint64_t v2544;
  uint64_t v2545;
  unint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  unint64_t v2549;
  int v2550;
  uint64_t v2551;
  unint64_t v2552;
  unint64_t v2553;
  uint64_t v2554;
  unint64_t v2555;
  uint64_t v2556;
  unint64_t v2557;
  uint64_t v2558;
  uint64_t v2559;
  uint64_t v2560;
  unint64_t v2561;
  int v2562;
  uint64_t v2563;
  unint64_t v2564;
  uint64_t v2565;
  unint64_t v2566;
  uint64_t v2567;
  uint64_t v2568;
  uint64_t v2569;
  uint64_t v2570;
  unint64_t v2571;
  int v2572;
  uint64_t v2573;
  unint64_t v2574;
  unint64_t v2575;
  _BOOL4 v2576;
  unint64_t v2577;
  uint64_t v2579;
  unint64_t v2580;
  uint64_t v2581;
  uint64_t v2582;
  uint64_t v2583;
  uint64_t v2584;
  _BOOL4 v2585;
  uint64_t v2586;
  int v2587;
  uint64_t v2588;
  uint64_t v2589;
  uint64_t v2590;
  unint64_t v2591;
  _BOOL4 v2592;
  unint64_t v2593;
  uint64_t v2595;
  unint64_t v2596;
  uint64_t v2597;
  uint64_t v2598;
  uint64_t v2599;
  uint64_t v2600;
  _BOOL4 v2601;
  uint64_t v2602;
  int v2603;
  uint64_t v2604;
  uint64_t v2605;
  uint64_t v2606;
  unint64_t v2607;
  int v2608;
  uint64_t v2609;
  unint64_t v2610;
  uint64_t v2611;
  uint64_t v2612;
  uint64_t v2613;
  uint64_t v2614;
  uint64_t v2615;
  unint64_t v2616;
  int v2617;
  uint64_t v2618;
  unint64_t v2619;
  _BOOL8 v2620;
  unint64_t v2621;
  _BOOL8 v2622;
  unint64_t v2623;
  _BOOL8 v2624;
  int v2625;
  uint64_t v2626;
  unint64_t v2627;
  BOOL v2628;
  _BOOL8 v2629;
  _BOOL8 v2630;
  _BOOL8 v2631;
  _BOOL8 v2632;
  BOOL v2633;
  _BOOL8 v2634;
  _BOOL8 v2635;
  _BOOL8 v2636;
  BOOL v2637;
  _BOOL8 v2638;
  _BOOL8 v2639;
  _BOOL8 v2640;
  _BOOL8 v2641;
  uint64_t v2642;
  BOOL v2643;
  uint64_t v2644;
  unint64_t v2645;
  unint64_t v2646;
  unint64_t v2647;
  unint64_t v2648;
  unint64_t v2649;
  unint64_t v2650;
  unint64_t v2651;
  unint64_t v2652;
  unint64_t v2653;
  unint64_t v2654;
  unint64_t v2655;
  uint64_t v2656;
  unint64_t v2657;
  uint64_t v2658;
  unint64_t v2659;
  uint64_t v2661;
  unint64_t v2662;
  uint64_t v2663;
  uint64_t v2664;
  uint64_t v2665;
  uint64_t v2666;
  unint64_t v2667;
  int v2668;
  unint64_t v2669;
  unint64_t v2670;
  uint64_t v2671;
  unint64_t v2672;
  _BOOL8 v2673;
  uint64_t v2674;
  unint64_t v2675;
  uint64_t v2676;
  uint64_t v2677;
  uint64_t v2678;
  uint64_t v2679;
  _BOOL4 v2680;
  unint64_t v2681;
  uint64_t v2682;
  unint64_t v2683;
  uint64_t v2684;
  uint64_t v2685;
  uint64_t v2686;
  uint64_t v2687;
  unint64_t v2688;
  int v2689;
  unint64_t v2690;
  uint64_t v2691;
  unint64_t v2692;
  uint64_t v2694;
  unint64_t v2695;
  uint64_t v2696;
  uint64_t v2697;
  uint64_t v2698;
  uint64_t v2699;
  _BOOL4 v2700;
  uint64_t v2701;
  unint64_t v2702;
  uint64_t v2703;
  uint64_t v2704;
  uint64_t v2705;
  uint64_t v2706;
  unint64_t v2707;
  int v2708;
  unint64_t v2709;
  uint64_t v2710;
  unint64_t v2711;
  uint64_t v2713;
  unint64_t v2714;
  uint64_t v2715;
  uint64_t v2716;
  uint64_t v2717;
  uint64_t v2718;
  _BOOL4 v2719;
  uint64_t v2720;
  int v2721;
  unint64_t v2722;
  uint64_t v2723;
  unint64_t v2724;
  uint64_t v2725;
  unint64_t v2726;
  uint64_t v2728;
  unint64_t v2729;
  uint64_t v2730;
  uint64_t v2731;
  uint64_t v2732;
  uint64_t v2733;
  _BOOL4 v2734;
  uint64_t v2735;
  unint64_t v2736;
  uint64_t v2737;
  uint64_t v2738;
  uint64_t v2739;
  uint64_t v2740;
  _BOOL4 v2741;
  uint64_t v2742;
  int v2743;
  uint64_t v2744;
  uint64_t v2745;
  unint64_t v2746;
  uint64_t v2748;
  unint64_t v2749;
  uint64_t v2750;
  uint64_t v2751;
  uint64_t v2752;
  uint64_t v2753;
  unint64_t v2754;
  int v2755;
  unint64_t v2756;
  uint64_t v2757;
  unint64_t v2758;
  uint64_t v2760;
  unint64_t v2761;
  uint64_t v2762;
  uint64_t v2763;
  uint64_t v2764;
  uint64_t v2765;
  _BOOL4 v2766;
  uint64_t v2767;
  unint64_t v2768;
  uint64_t v2769;
  uint64_t v2770;
  uint64_t v2771;
  uint64_t v2772;
  _BOOL4 v2773;
  uint64_t v2774;
  unint64_t v2775;
  uint64_t v2776;
  uint64_t v2777;
  uint64_t v2778;
  uint64_t v2779;
  _BOOL4 v2780;
  uint64_t v2781;
  int v2782;
  uint64_t v2783;
  uint64_t v2784;
  unint64_t v2785;
  uint64_t v2787;
  unint64_t v2788;
  uint64_t v2789;
  uint64_t v2790;
  uint64_t v2791;
  uint64_t v2792;
  _BOOL4 v2793;
  uint64_t v2794;
  unint64_t v2795;
  uint64_t v2796;
  uint64_t v2797;
  uint64_t v2798;
  uint64_t v2799;
  uint64_t v2800;
  unint64_t v2801;
  int v2802;
  unint64_t v2803;
  unint64_t v2804;
  uint64_t v2805;
  unint64_t v2806;
  uint64_t v2808;
  unint64_t v2809;
  uint64_t v2810;
  uint64_t v2811;
  uint64_t v2812;
  uint64_t v2813;
  _BOOL4 v2814;
  uint64_t v2815;
  int v2816;
  uint64_t v2817;
  unint64_t v2818;
  uint64_t v2819;
  uint64_t v2820;
  unint64_t v2821;
  uint64_t v2823;
  unint64_t v2824;
  uint64_t v2825;
  uint64_t v2826;
  uint64_t v2827;
  uint64_t v2828;
  _BOOL4 v2829;
  uint64_t v2830;
  unint64_t v2831;
  uint64_t v2832;
  uint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  unint64_t v2836;
  int v2837;
  unint64_t v2838;
  uint64_t v2839;
  unint64_t v2840;
  uint64_t v2842;
  unint64_t v2843;
  uint64_t v2844;
  uint64_t v2845;
  uint64_t v2846;
  uint64_t v2847;
  _BOOL4 v2848;
  uint64_t v2849;
  int v2850;
  uint64_t v2851;
  uint64_t v2852;
  unint64_t v2853;
  uint64_t v2855;
  unint64_t v2856;
  uint64_t v2857;
  uint64_t v2858;
  uint64_t v2859;
  uint64_t v2860;
  _BOOL4 v2861;
  uint64_t v2862;
  unint64_t v2863;
  uint64_t v2864;
  uint64_t v2865;
  uint64_t v2866;
  uint64_t v2867;
  _BOOL4 v2868;
  uint64_t v2869;
  int v2870;
  uint64_t v2871;
  uint64_t v2872;
  unint64_t v2873;
  uint64_t v2875;
  unint64_t v2876;
  uint64_t v2877;
  uint64_t v2878;
  uint64_t v2879;
  uint64_t v2880;
  unint64_t v2881;
  int v2882;
  uint64_t v2883;
  unint64_t v2884;
  unint64_t v2885;
  uint64_t v2886;
  unint64_t v2887;
  uint64_t v2889;
  unint64_t v2890;
  uint64_t v2891;
  uint64_t v2892;
  uint64_t v2893;
  uint64_t v2894;
  _BOOL4 v2895;
  uint64_t v2896;
  unint64_t v2897;
  uint64_t v2898;
  unint64_t v2899;
  uint64_t v2900;
  uint64_t v2901;
  uint64_t v2902;
  _BOOL4 v2903;
  uint64_t v2904;
  int v2905;
  uint64_t v2906;
  uint64_t v2907;
  uint64_t v2908;
  unint64_t v2909;
  int v2910;
  uint64_t v2911;
  unint64_t v2912;
  uint64_t v2913;
  unint64_t v2914;
  uint64_t v2915;
  uint64_t v2916;
  uint64_t v2917;
  _BOOL4 v2918;
  uint64_t v2919;
  int v2920;
  uint64_t v2921;
  uint64_t v2922;
  uint64_t v2923;
  unint64_t v2924;
  _BOOL4 v2925;
  unint64_t v2926;
  uint64_t v2928;
  unint64_t v2929;
  uint64_t v2930;
  unint64_t v2931;
  uint64_t v2932;
  uint64_t v2933;
  uint64_t v2934;
  uint64_t v2935;
  _BOOL4 v2936;
  uint64_t v2937;
  int v2938;
  uint64_t v2939;
  uint64_t v2940;
  uint64_t v2941;
  unint64_t v2942;
  int v2943;
  uint64_t v2944;
  unint64_t v2945;
  uint64_t v2946;
  unint64_t v2947;
  uint64_t v2948;
  uint64_t v2949;
  uint64_t v2950;
  uint64_t v2951;
  _BOOL4 v2952;
  uint64_t v2953;
  int v2954;
  uint64_t v2955;
  uint64_t v2956;
  uint64_t v2957;
  unint64_t v2958;
  _BOOL4 v2959;
  uint64_t v2960;
  int v2961;
  uint64_t v2962;
  unint64_t v2963;
  uint64_t v2964;
  uint64_t v2965;
  uint64_t v2966;
  _BOOL4 v2967;
  uint64_t v2968;
  int v2969;
  uint64_t v2970;
  uint64_t v2971;
  uint64_t v2972;
  unint64_t v2973;
  int v2974;
  uint64_t v2975;
  unint64_t v2976;
  uint64_t v2977;
  uint64_t v2978;
  uint64_t v2979;
  _BOOL4 v2980;
  uint64_t v2981;
  int v2982;
  uint64_t v2983;
  uint64_t v2984;
  uint64_t v2985;
  unint64_t v2986;
  int v2987;
  uint64_t v2988;
  unint64_t v2989;
  uint64_t v2990;
  uint64_t v2991;
  uint64_t v2992;
  unint64_t v2993;
  int v2994;
  uint64_t v2995;
  uint64_t v2996;
  unint64_t v2997;
  unint64_t v2998;
  int v2999;
  uint64_t v3000;
  unint64_t v3001;
  uint64_t v3002;
  uint64_t v3003;
  uint64_t v3004;
  _BOOL4 v3005;
  uint64_t v3006;
  int v3007;
  uint64_t v3008;
  uint64_t v3009;
  uint64_t v3010;
  unint64_t v3011;
  _BOOL4 v3012;
  uint64_t v3013;
  uint64_t v3014;
  unint64_t v3015;
  uint64_t v3016;
  uint64_t v3017;
  uint64_t v3018;
  uint64_t v3019;
  unint64_t v3020;
  int v3021;
  uint64_t v3022;
  unint64_t v3023;
  unint64_t v3024;
  _BOOL4 v3025;
  unint64_t v3026;
  uint64_t v3028;
  unint64_t v3029;
  uint64_t v3030;
  uint64_t v3031;
  uint64_t v3032;
  _BOOL4 v3033;
  uint64_t v3034;
  int v3035;
  uint64_t v3036;
  uint64_t v3037;
  uint64_t v3038;
  unint64_t v3039;
  _BOOL4 v3040;
  uint64_t v3041;
  uint64_t v3043;
  unint64_t v3044;
  uint64_t v3045;
  uint64_t v3046;
  uint64_t v3047;
  _BOOL4 v3048;
  uint64_t v3049;
  uint64_t v3051;
  uint64_t v3052;
  uint64_t v3053;
  unint64_t v3054;
  unint64_t v3055;
  int v3056;
  uint64_t v3057;
  unint64_t v3058;
  uint64_t v3059;
  uint64_t v3060;
  uint64_t v3061;
  _BOOL4 v3062;
  uint64_t v3063;
  uint64_t v3065;
  uint64_t v3066;
  uint64_t v3067;
  unint64_t v3068;
  _BOOL4 v3069;
  uint64_t v3070;
  int v3071;
  uint64_t v3072;
  unint64_t v3073;
  uint64_t v3074;
  uint64_t v3075;
  uint64_t v3076;
  _BOOL4 v3077;
  uint64_t v3078;
  int v3079;
  uint64_t v3080;
  uint64_t v3081;
  uint64_t v3082;
  unint64_t v3083;
  _BOOL4 v3084;
  uint64_t v3085;
  uint64_t v3087;
  unint64_t v3088;
  uint64_t v3089;
  uint64_t v3090;
  uint64_t v3091;
  _BOOL4 v3092;
  uint64_t v3093;
  int v3094;
  uint64_t v3095;
  uint64_t v3096;
  uint64_t v3097;
  unint64_t v3098;
  _BOOL4 v3099;
  uint64_t v3100;
  uint64_t v3102;
  unint64_t v3103;
  uint64_t v3104;
  uint64_t v3105;
  uint64_t v3106;
  _BOOL4 v3107;
  uint64_t v3108;
  int v3109;
  uint64_t v3110;
  uint64_t v3111;
  uint64_t v3112;
  unint64_t v3113;
  int v3114;
  uint64_t v3115;
  unint64_t v3116;
  uint64_t v3117;
  unint64_t v3118;
  __int128 v3119;
  uint64_t v3120;
  uint64_t v3121;
  uint64_t v3122;
  uint64_t v3123;
  uint64_t v3124;
  uint64_t v3125;
  unint64_t v3126;
  int v3127;
  uint64_t v3128;
  unint64_t v3129;
  unint64_t v3130;
  _BOOL4 v3131;
  unint64_t v3132;
  unint64_t v3133;
  uint64_t v3134;
  uint64_t v3135;
  uint64_t v3136;
  uint64_t v3137;
  unint64_t v3138;
  _BOOL4 v3139;
  unint64_t v3140;
  uint64_t v3141;
  unint64_t v3142;
  uint64_t v3143;
  uint64_t v3144;
  _BOOL4 v3145;
  uint64_t v3146;
  uint64_t v3147;
  unint64_t v3148;
  unint64_t v3149;
  uint64_t v3150;
  unint64_t v3151;
  uint64_t v3152;
  uint64_t v3153;
  uint64_t v3154;
  _BOOL4 v3155;
  uint64_t v3156;
  uint64_t v3157;
  unint64_t v3158;
  unint64_t v3159;
  uint64_t v3160;
  unint64_t v3161;
  uint64_t v3162;
  uint64_t v3163;
  uint64_t v3164;
  uint64_t v3165;
  _BOOL4 v3166;
  uint64_t v3167;
  uint64_t v3168;
  unint64_t v3169;
  _BOOL4 v3170;
  unint64_t v3171;
  uint64_t v3172;
  unint64_t v3173;
  uint64_t v3174;
  unint64_t v3175;
  uint64_t v3176;
  unint64_t v3177;
  uint64_t v3178;
  unint64_t v3179;
  uint64_t v3180;
  unint64_t v3181;
  unint64_t v3182;
  unint64_t v3183;
  uint64_t v3184;
  unint64_t v3185;
  uint64_t v3186;
  uint64_t v3187;
  unint64_t v3188;
  unint64_t v3189;
  uint64_t v3190;
  uint64_t v3191;
  unint64_t v3192;
  unint64_t v3193;
  uint64_t v3194;
  unint64_t v3195;
  unint64_t v3196;
  uint64_t v3197;
  unint64_t v3198;
  uint64_t v3199;
  unint64_t v3200;
  char v3201;
  unsigned __int8 v3202;
  unint64_t v3203;
  unint64_t v3204;
  unint64_t v3205;
  unint64_t v3206;
  BOOL v3207;
  unint64_t v3208;
  unint64_t v3209;
  unint64_t v3210;
  unint64_t v3211;
  unint64_t v3212;
  unint64_t v3213;
  unint64_t v3214;
  unint64_t v3215;
  unint64_t v3217;
  uint64_t v3218;
  unint64_t v3219;
  uint64_t v3220;
  unint64_t v3221;
  unint64_t v3223;
  uint64_t v3224;
  uint64_t v3225;
  unint64_t v3226;
  unint64_t v3227;
  unint64_t v3229;
  uint64_t v3230;
  unint64_t v3231;
  uint64_t v3232;
  unint64_t v3233;
  unint64_t v3235;
  uint64_t v3236;
  unint64_t v3237;
  BOOL v3238;
  uint64_t v3239;
  unint64_t v3240;
  uint64_t v3241;
  uint64_t v3242;
  uint64_t v3243;
  uint64_t v3244;
  unint64_t v3245;
  int v3246;
  uint64_t v3247;
  unint64_t v3248;
  unint64_t v3249;
  uint64_t v3250;
  unint64_t v3251;
  uint64_t v3252;
  unint64_t v3253;
  uint64_t v3255;
  unint64_t v3256;
  BOOL v3257;
  uint64_t v3258;
  uint64_t v3259;
  unint64_t v3260;
  uint64_t v3261;
  uint64_t v3262;
  unint64_t v3263;
  int v3264;
  uint64_t v3265;
  unint64_t v3266;
  unint64_t v3267;
  uint64_t v3268;
  unint64_t v3269;
  uint64_t v3271;
  unint64_t v3272;
  uint64_t v3273;
  uint64_t v3274;
  uint64_t v3275;
  uint64_t v3276;
  unint64_t v3277;
  int v3278;
  uint64_t v3279;
  unint64_t v3280;
  unint64_t v3281;
  uint64_t v3282;
  unint64_t v3283;
  unint64_t v3285;
  uint64_t v3286;
  unint64_t v3287;
  unint64_t v3288;
  uint64_t v3289;
  unint64_t v3290;
  unint64_t v3292;
  uint64_t v3293;
  unint64_t v3294;
  unint64_t v3295;
  uint64_t v3296;
  unint64_t v3297;
  unint64_t v3299;
  uint64_t v3300;
  unint64_t v3301;
  uint64_t v3303;
  unint64_t v3304;
  uint64_t v3305;
  uint64_t v3306;
  uint64_t v3307;
  uint64_t v3308;
  unint64_t v3309;
  int v3310;
  uint64_t v3311;
  unint64_t v3312;
  unint64_t v3313;
  uint64_t v3314;
  unint64_t v3315;
  unint64_t v3317;
  uint64_t v3318;
  uint64_t v3319;
  unint64_t v3320;
  unint64_t v3321;
  unint64_t v3323;
  uint64_t v3324;
  uint64_t v3325;
  unint64_t v3326;
  unint64_t v3327;
  uint64_t v3328;
  unint64_t v3329;
  uint64_t v3331;
  unint64_t v3332;
  uint64_t v3333;
  uint64_t v3334;
  uint64_t v3335;
  uint64_t v3336;
  unint64_t v3337;
  unint64_t v3338;
  int v3339;
  unint64_t v3340;
  uint64_t v3341;
  unint64_t v3342;
  BOOL v3343;
  unint64_t v3344;
  unint64_t v3345;
  unint64_t v3346;
  unint64_t v3347;
  BOOL v3348;
  uint64_t v3349;
  unint64_t v3350;
  uint64_t v3351;
  unint64_t v3352;
  unint64_t v3353;
  unint64_t v3354;
  unint64_t v3355;
  unint64_t v3357;
  uint64_t v3358;
  unint64_t v3359;
  uint64_t v3361;
  unint64_t v3362;
  uint64_t v3363;
  uint64_t v3364;
  uint64_t v3365;
  uint64_t v3366;
  unint64_t v3367;
  int v3368;
  uint64_t v3369;
  unint64_t v3370;
  unint64_t v3371;
  uint64_t v3372;
  unint64_t v3373;
  unint64_t v3375;
  uint64_t v3376;
  unint64_t v3377;
  uint64_t v3378;
  unint64_t v3379;
  unint64_t v3381;
  unint64_t v3382;
  _BOOL4 v3383;
  uint64_t v3384;
  uint64_t v3385;
  unint64_t v3386;
  uint64_t v3387;
  uint64_t v3388;
  uint64_t v3389;
  uint64_t v3390;
  unint64_t v3391;
  int v3392;
  uint64_t v3393;
  unint64_t v3394;
  uint64_t v3395;
  unint64_t v3396;
  uint64_t v3398;
  unint64_t v3399;
  uint64_t v3400;
  uint64_t v3401;
  uint64_t v3402;
  uint64_t v3403;
  unint64_t v3404;
  int v3405;
  unint64_t v3406;
  unint64_t v3407;
  uint64_t v3408;
  unint64_t v3409;
  uint64_t v3411;
  unint64_t v3412;
  unint64_t v3413;
  uint64_t v3414;
  unint64_t v3415;
  uint64_t v3417;
  uint64_t v3418;
  unint64_t v3419;
  uint64_t v3420;
  uint64_t v3421;
  uint64_t v3422;
  uint64_t v3423;
  unint64_t v3424;
  int v3425;
  unint64_t v3426;
  uint64_t v3427;
  unint64_t v3428;
  uint64_t v3430;
  unint64_t v3431;
  uint64_t v3432;
  uint64_t v3433;
  uint64_t v3434;
  uint64_t v3435;
  unint64_t v3436;
  int v3437;
  uint64_t v3438;
  unint64_t v3439;
  unint64_t v3440;
  uint64_t v3441;
  unint64_t v3442;
  uint64_t v3444;
  uint64_t v3445;
  unint64_t v3446;
  uint64_t v3447;
  unint64_t v3448;
  uint64_t v3450;
  uint64_t v3451;
  unint64_t v3452;
  uint64_t v3453;
  uint64_t v3454;
  unint64_t v3455;
  uint64_t v3456;
  unint64_t v3457;
  BOOL v3458;
  unint64_t v3459;
  uint64_t v3460;
  unint64_t v3461;
  uint64_t v3463;
  unint64_t v3464;
  uint64_t v3465;
  uint64_t v3466;
  uint64_t v3467;
  uint64_t v3468;
  uint64_t v3469;
  unint64_t v3470;
  int v3471;
  unint64_t v3472;
  unint64_t v3473;
  uint64_t v3474;
  unint64_t v3475;
  uint64_t v3477;
  uint64_t v3478;
  unint64_t v3479;
  uint64_t v3480;
  unint64_t v3481;
  uint64_t v3483;
  uint64_t v3484;
  uint64_t v3485;
  unint64_t v3486;
  unint64_t v3487;
  unint64_t v3488;
  _BOOL4 v3489;
  uint64_t v3490;
  unint64_t v3491;
  BOOL v3492;
  uint64_t v3493;
  uint64_t v3494;
  uint64_t v3495;
  uint64_t v3496;
  uint64_t v3497;
  unint64_t v3498;
  int v3499;
  uint64_t v3500;
  unint64_t v3501;
  unint64_t v3502;
  unint64_t v3503;
  unint64_t v3504;
  unint64_t v3505;
  unint64_t v3506;
  BOOL v3507;
  unint64_t v3508;
  unint64_t v3509;
  unint64_t v3510;
  unint64_t v3511;
  unint64_t v3512;
  uint64_t v3514;
  unint64_t v3515;
  unint64_t v3516;
  unint64_t v3517;
  unint64_t v3518;
  uint64_t v3519;
  uint64_t v3520;
  uint64_t v3521;
  uint64_t v3522;
  unint64_t v3523;
  uint64_t v3524;
  unint64_t v3525;
  int v3526;
  unint64_t v3527;
  uint64_t v3528;
  unint64_t v3529;
  BOOL v3530;
  unint64_t v3531;
  unint64_t v3532;
  unint64_t v3533;
  unint64_t v3534;
  unint64_t v3535;
  unint64_t v3536;
  unint64_t v3537;
  unint64_t v3538;
  unint64_t v3539;
  unint64_t v3540;
  unint64_t v3541;
  unint64_t v3542;
  unint64_t v3543;
  unint64_t v3544;
  uint64_t v3545;
  unint64_t v3546;
  unint64_t v3547;
  unint64_t v3548;
  unint64_t v3549;
  BOOL v3550;
  uint64_t v3551;
  BOOL v3552;
  uint64_t v3553;
  BOOL v3554;
  uint64_t v3555;
  BOOL v3556;
  uint64_t v3557;
  uint64_t v3560;
  uint64_t v3562;
  uint64_t v3564;
  uint64_t v3566;
  uint64_t v3568;
  uint64_t v3570;
  unint64_t v3571;
  uint64_t v3572;
  uint64_t v3573;
  unint64_t v3574;
  uint64_t v3575;
  unint64_t v3576;
  uint64_t v3577;
  unint64_t v3578;
  uint64_t v3579;
  unint64_t v3580;
  uint64_t v3581;
  uint64_t v3582;
  unint64_t v3583;
  unint64_t v3584;
  unint64_t v3585;
  unint64_t v3586;
  unint64_t v3587;
  uint64_t v3588;
  uint64_t v3589;
  uint64_t v3590;
  unint64_t v3591;
  uint64_t v3592;
  uint64_t v3593;
  unint64_t v3594;
  unint64_t v3595;
  unint64_t v3596;
  unint64_t v3597;
  unint64_t v3598;
  uint64_t v3599;
  unint64_t v3600;
  uint64_t v3601;
  unint64_t v3602;
  uint64_t v3603;
  uint64_t v3604;
  unint64_t v3605;
  uint64_t v3606;
  unint64_t v3607;
  uint64_t v3608;
  unint64_t v3609;
  uint64_t v3610;
  uint64_t v3611;
  unint64_t v3612;
  uint64_t v3613;
  uint64_t (*v3614)(_QWORD, _QWORD);
  uint64_t (*v3615)(_QWORD);
  unint64_t v3616;
  unint64_t v3617;
  unint64_t v3618;
  uint64_t v3619;
  uint64_t v3620;
  unint64_t v3621;
  uint64_t v3622;
  _BOOL4 v3623;
  unint64_t v3624;
  uint64_t v3626;
  unint64_t v3627;
  unint64_t v3628;
  unint64_t v3629;
  uint64_t v3630;
  uint64_t v3631;
  unint64_t v3632;
  uint64_t v3633;
  _BOOL4 v3634;
  unint64_t v3635;
  uint64_t v3637;
  unint64_t v3638;
  uint64_t v3639;
  unint64_t v3640;
  uint64_t v3641;
  uint64_t v3642;
  uint64_t v3643;
  uint64_t v3644;
  _BOOL4 v3645;
  uint64_t v3646;
  uint64_t v3648;
  unint64_t v3649;
  uint64_t v3650;
  unint64_t v3651;
  uint64_t v3652;
  uint64_t v3653;
  uint64_t v3654;
  uint64_t v3655;
  _BOOL4 v3656;
  uint64_t v3657;
  unint64_t v3658;
  __int128 v3659;
  uint64_t v3660;
  int v3661;
  uint64_t v3662;
  unint64_t v3663;
  uint64_t v3664;
  _BOOL4 v3665;
  uint64_t v3666;
  uint64_t v3668;
  unint64_t v3669;
  uint64_t v3670;
  uint64_t v3671;
  uint64_t v3672;
  uint64_t v3673;
  unint64_t v3674;
  int v3675;
  uint64_t v3676;
  unint64_t v3677;
  unint64_t v3678;
  uint64_t v3679;
  uint64_t v3680;
  uint64_t v3681;
  uint64_t v3682;
  uint64_t v3683;
  _BOOL4 v3684;
  uint64_t v3685;
  uint64_t v3687;
  unint64_t v3688;
  uint64_t v3689;
  unint64_t v3690;
  uint64_t v3691;
  uint64_t v3692;
  uint64_t v3693;
  uint64_t v3694;
  _BOOL4 v3695;
  uint64_t v3696;
  unint64_t v3697;
  unint64_t v3698;
  int v3699;
  unint64_t v3700;
  uint64_t v3701;
  uint64_t v3702;
  _BOOL4 v3703;
  unint64_t v3704;
  uint64_t v3706;
  unint64_t v3707;
  uint64_t v3708;
  uint64_t v3709;
  uint64_t v3710;
  unint64_t v3711;
  int v3712;
  uint64_t v3713;
  unint64_t v3714;
  uint64_t v3715;
  uint64_t v3716;
  uint64_t v3717;
  _BOOL4 v3718;
  uint64_t v3719;
  uint64_t v3721;
  unint64_t v3722;
  uint64_t v3723;
  unint64_t v3724;
  uint64_t v3725;
  uint64_t v3726;
  uint64_t v3727;
  uint64_t v3728;
  _BOOL4 v3729;
  uint64_t v3730;
  unint64_t v3731;
  uint64_t v3732;
  int v3733;
  _BOOL4 v3734;
  uint64_t v3735;
  unint64_t v3736;
  uint64_t v3737;
  uint64_t v3738;
  _BOOL4 v3739;
  uint64_t v3740;
  uint64_t v3741;
  uint64_t v3742;
  unint64_t v3743;
  _BOOL4 v3744;
  uint64_t v3745;
  unint64_t v3746;
  uint64_t v3747;
  unint64_t v3748;
  uint64_t v3749;
  uint64_t v3750;
  uint64_t v3751;
  uint64_t v3752;
  _BOOL4 v3753;
  uint64_t v3754;
  unint64_t v3755;
  unint64_t v3756;
  unint64_t v3757;
  uint64_t v3758;
  uint64_t v3759;
  _BOOL4 v3760;
  unint64_t v3761;
  uint64_t v3763;
  unint64_t v3764;
  uint64_t v3765;
  uint64_t v3766;
  uint64_t v3767;
  unint64_t v3768;
  uint64_t v3769;
  __int128 v3770;
  unint64_t v3771;
  uint64_t v3772;
  uint64_t v3773;
  uint64_t v3774;
  _BOOL4 v3775;
  uint64_t v3776;
  uint64_t v3778;
  unint64_t v3779;
  uint64_t v3780;
  uint64_t v3781;
  unint64_t v3782;
  unint64_t v3783;
  uint64_t v3784;
  uint64_t v3785;
  uint64_t v3786;
  uint64_t v3787;
  uint64_t v3788;
  unint64_t v3789;
  unint64_t v3790;
  int v3791;
  unint64_t v3792;
  uint64_t v3793;
  unint64_t v3794;
  uint64_t v3796;
  unint64_t v3797;
  uint64_t v3798;
  uint64_t v3799;
  unint64_t v3800;
  int v3801;
  uint64_t v3802;
  unint64_t v3803;
  uint64_t v3804;
  uint64_t v3805;
  _BOOL4 v3806;
  uint64_t v3807;
  unint64_t v3808;
  unint64_t v3809;
  unint64_t v3810;
  uint64_t v3811;
  uint64_t v3812;
  _BOOL4 v3813;
  unint64_t v3814;
  uint64_t v3816;
  unint64_t v3817;
  uint64_t v3818;
  uint64_t v3819;
  uint64_t v3820;
  uint64_t v3821;
  unint64_t v3822;
  int v3823;
  uint64_t v3824;
  unint64_t v3825;
  unint64_t v3826;
  uint64_t v3827;
  uint64_t v3828;
  uint64_t v3829;
  uint64_t v3830;
  uint64_t v3831;
  unint64_t v3832;
  int v3833;
  uint64_t v3834;
  unint64_t v3835;
  _BOOL4 v3836;
  unint64_t v3837;
  uint64_t v3839;
  unint64_t v3840;
  unint64_t v3841;
  uint64_t v3842;
  uint64_t v3843;
  uint64_t v3844;
  uint64_t v3845;
  uint64_t v3846;
  _BOOL4 v3847;
  uint64_t v3848;
  uint64_t v3849;
  unint64_t v3850;
  uint64_t v3851;
  uint64_t v3852;
  uint64_t v3853;
  uint64_t v3854;
  uint64_t v3855;
  _BOOL4 v3856;
  uint64_t v3857;
  unint64_t v3858;
  uint64_t v3859;
  uint64_t v3860;
  uint64_t v3861;
  uint64_t v3862;
  _BOOL4 v3863;
  uint64_t v3864;
  int v3865;
  uint64_t v3866;
  unint64_t v3867;
  uint64_t v3868;
  uint64_t v3869;
  uint64_t v3870;
  uint64_t v3871;
  _BOOL4 v3872;
  uint64_t v3873;
  int v3874;
  uint64_t v3875;
  unint64_t v3876;
  uint64_t v3877;
  uint64_t v3878;
  uint64_t v3879;
  uint64_t v3880;
  _BOOL4 v3881;
  uint64_t v3882;
  uint64_t v3884;
  unint64_t v3885;
  uint64_t v3886;
  uint64_t v3887;
  unint64_t v3888;
  unint64_t v3889;
  uint64_t v3891;
  unint64_t v3892;
  uint64_t v3893;
  uint64_t v3894;
  unint64_t v3895;
  int v3896;
  uint64_t v3897;
  unint64_t v3898;
  uint64_t v3899;
  unint64_t v3900;
  uint64_t v3901;
  uint64_t v3902;
  uint64_t v3903;
  uint64_t v3904;
  unint64_t v3905;
  int v3906;
  uint64_t v3907;
  unint64_t v3908;
  unint64_t v3909;
  int v3910;
  uint64_t v3911;
  unint64_t v3912;
  uint64_t v3913;
  uint64_t v3914;
  unint64_t v3915;
  int v3916;
  uint64_t v3917;
  unint64_t v3918;
  unint64_t v3919;
  unint64_t v3920;
  uint64_t v3921;
  unint64_t v3922;
  uint64_t v3923;
  uint64_t v3924;
  _BOOL4 v3925;
  unint64_t v3926;
  unint64_t v3927;
  unint64_t v3928;
  unint64_t v3929;
  uint64_t v3930;
  uint64_t v3931;
  unint64_t v3932;
  int v3933;
  uint64_t v3934;
  unint64_t v3935;
  uint64_t v3936;
  unint64_t v3937;
  unint64_t v3938;
  int v3939;
  uint64_t v3940;
  unint64_t v3941;
  uint64_t v3942;
  unint64_t v3943;
  uint64_t v3944;
  uint64_t v3945;
  uint64_t v3946;
  uint64_t v3947;
  uint64_t v3948;
  uint64_t v3949;
  unint64_t v3950;
  int v3951;
  uint64_t v3952;
  unint64_t v3953;
  uint64_t v3954;
  unint64_t v3955;
  uint64_t v3956;
  unint64_t v3957;
  uint64_t v3958;
  uint64_t v3959;
  unint64_t v3960;
  int v3961;
  uint64_t v3962;
  unint64_t v3963;
  uint64_t v3964;
  unint64_t v3965;
  unint64_t v3966;
  uint64_t v3967;
  uint64_t v3968;
  uint64_t v3969;
  uint64_t v3970;
  uint64_t v3971;
  unint64_t v3972;
  int v3973;
  uint64_t v3974;
  unint64_t v3975;
  _BOOL4 v3976;
  uint64_t v3977;
  uint64_t v3979;
  unint64_t v3980;
  uint64_t v3981;
  uint64_t v3982;
  uint64_t v3983;
  uint64_t v3984;
  uint64_t v3985;
  uint64_t v3986;
  uint64_t v3987;
  _BOOL4 v3988;
  uint64_t v3989;
  unint64_t v3990;
  unint64_t v3991;
  uint64_t v3992;
  uint64_t v3993;
  uint64_t v3994;
  uint64_t v3995;
  uint64_t v3996;
  _BOOL4 v3997;
  uint64_t v3998;
  int v3999;
  uint64_t v4000;
  unint64_t v4001;
  uint64_t v4002;
  uint64_t v4003;
  uint64_t v4004;
  uint64_t v4005;
  _BOOL4 v4006;
  uint64_t v4007;
  int v4008;
  uint64_t v4009;
  uint64_t v4010;
  unint64_t v4011;
  unint64_t v4012;
  uint64_t v4013;
  uint64_t v4014;
  uint64_t v4015;
  uint64_t v4016;
  uint64_t v4017;
  unint64_t v4018;
  int v4019;
  uint64_t v4020;
  unint64_t v4021;
  unint64_t v4022;
  uint64_t v4023;
  unint64_t v4024;
  uint64_t v4026;
  unint64_t v4027;
  uint64_t v4028;
  uint64_t v4029;
  uint64_t v4030;
  uint64_t v4031;
  uint64_t v4032;
  unint64_t v4033;
  int v4034;
  uint64_t v4035;
  unint64_t v4036;
  unint64_t v4037;
  uint64_t v4038;
  uint64_t v4039;
  int v4040;
  uint64_t v4041;
  uint64_t v4042;
  unint64_t v4043;
  int v4044;
  uint64_t v4045;
  unint64_t v4046;
  uint64_t v4047;
  unint64_t v4048;
  _BOOL4 v4049;
  unint64_t v4050;
  int v4051;
  uint64_t v4052;
  unint64_t v4053;
  uint64_t v4054;
  uint64_t v4055;
  uint64_t v4056;
  uint64_t v4057;
  unint64_t v4058;
  uint64_t v4059;
  unint64_t v4060;
  int v4061;
  uint64_t v4062;
  unint64_t v4063;
  unint64_t v4064;
  int v4065;
  uint64_t v4066;
  unint64_t v4067;
  uint64_t v4068;
  uint64_t v4069;
  uint64_t v4070;
  _BOOL4 v4071;
  uint64_t v4072;
  unint64_t v4073;
  unint64_t v4074;
  unint64_t v4075;
  uint64_t v4076;
  uint64_t v4077;
  _BOOL4 v4078;
  unint64_t v4079;
  uint64_t v4081;
  unint64_t v4082;
  uint64_t v4083;
  uint64_t v4084;
  _BOOL4 v4085;
  uint64_t v4086;
  uint64_t v4088;
  unint64_t v4089;
  uint64_t v4090;
  uint64_t v4091;
  uint64_t v4092;
  _BOOL4 v4093;
  uint64_t v4094;
  uint64_t v4096;
  uint64_t v4097;
  uint64_t v4098;
  uint64_t v4099;
  _BOOL4 v4100;
  uint64_t v4101;
  uint64_t v4102;
  unint64_t v4103;
  unint64_t v4104;
  uint64_t v4105;
  uint64_t v4106;
  uint64_t v4107;
  uint64_t v4108;
  uint64_t v4109;
  _BOOL4 v4110;
  uint64_t v4111;
  uint64_t v4113;
  unint64_t v4114;
  uint64_t v4115;
  unint64_t v4116;
  uint64_t v4117;
  unint64_t v4118;
  unint64_t v4119;
  uint64_t v4120;
  unint64_t v4121;
  uint64_t v4122;
  uint64_t v4123;
  uint64_t v4124;
  uint64_t v4125;
  uint64_t v4126;
  uint64_t v4127;
  _BOOL4 v4128;
  uint64_t v4129;
  uint64_t v4130;
  unint64_t v4131;
  uint64_t v4132;
  uint64_t v4133;
  uint64_t v4134;
  uint64_t v4135;
  _BOOL4 v4136;
  uint64_t v4137;
  int v4138;
  uint64_t v4139;
  unint64_t v4140;
  uint64_t v4141;
  uint64_t v4142;
  uint64_t v4143;
  uint64_t v4144;
  _BOOL4 v4145;
  uint64_t v4146;
  uint64_t v4148;
  unint64_t v4149;
  uint64_t v4150;
  uint64_t v4151;
  unint64_t v4152;
  uint64_t v4153;
  uint64_t v4154;
  uint64_t v4155;
  uint64_t v4156;
  unint64_t v4157;
  unint64_t v4158;
  uint64_t v4159;
  unint64_t v4160;
  int v4161;
  uint64_t v4163;
  unint64_t v4164;
  int v4165;
  uint64_t v4166;
  unint64_t v4167;
  _BOOL4 v4168;
  unint64_t v4169;
  int v4170;
  uint64_t v4171;
  unint64_t v4172;
  uint64_t v4173;
  uint64_t v4174;
  uint64_t v4175;
  uint64_t v4176;
  unint64_t v4177;
  int v4178;
  uint64_t v4179;
  uint64_t v4180;
  unint64_t v4181;
  unint64_t v4182;
  unint64_t v4183;
  int v4184;
  uint64_t v4185;
  unint64_t v4186;
  uint64_t v4187;
  uint64_t v4188;
  uint64_t v4189;
  uint64_t v4190;
  unint64_t v4191;
  int v4192;
  uint64_t v4193;
  unint64_t v4194;
  int v4195;
  uint64_t v4196;
  unint64_t v4197;
  unint64_t v4198;
  int v4199;
  uint64_t v4200;
  unint64_t v4201;
  unint64_t v4202;
  unint64_t v4203;
  uint64_t v4204;
  unint64_t v4205;
  uint64_t v4206;
  uint64_t v4207;
  _BOOL4 v4208;
  unint64_t v4209;
  unint64_t v4210;
  unint64_t v4211;
  unint64_t v4212;
  uint64_t v4213;
  uint64_t v4214;
  _BOOL4 v4215;
  unint64_t v4216;
  uint64_t v4218;
  unint64_t v4219;
  uint64_t v4220;
  unint64_t v4221;
  _BOOL4 v4222;
  unint64_t v4223;
  uint64_t v4225;
  unint64_t v4226;
  uint64_t v4227;
  unint64_t v4228;
  uint64_t v4229;
  unint64_t v4230;
  uint64_t v4231;
  uint64_t v4232;
  unint64_t v4233;
  int v4234;
  uint64_t v4235;
  unint64_t v4236;
  uint64_t v4237;
  unint64_t v4238;
  unint64_t v4239;
  unint64_t v4240;
  uint64_t v4241;
  unint64_t v4242;
  uint64_t v4243;
  uint64_t v4244;
  unint64_t v4245;
  int v4246;
  uint64_t v4247;
  unint64_t v4248;
  unint64_t v4249;
  int v4250;
  uint64_t v4251;
  unint64_t v4252;
  unint64_t v4253;
  unint64_t v4254;
  uint64_t v4255;
  unint64_t v4256;
  uint64_t v4257;
  uint64_t v4258;
  unint64_t v4259;
  int v4260;
  uint64_t v4261;
  unint64_t v4262;
  uint64_t v4263;
  unint64_t v4264;
  uint64_t v4265;
  unint64_t v4266;
  unint64_t v4267;
  uint64_t v4268;
  unint64_t v4269;
  uint64_t v4270;
  unint64_t v4271;
  uint64_t v4272;
  uint64_t v4273;
  uint64_t v4274;
  uint64_t v4275;
  uint64_t v4276;
  uint64_t v4277;
  unint64_t v4278;
  int v4279;
  unint64_t v4280;
  uint64_t v4281;
  unint64_t v4282;
  unint64_t v4283;
  uint64_t v4284;
  unint64_t v4285;
  uint64_t v4286;
  unint64_t v4287;
  uint64_t v4288;
  unint64_t v4289;
  uint64_t v4290;
  uint64_t v4291;
  _BOOL4 v4292;
  unint64_t v4293;
  int v4294;
  uint64_t v4295;
  unint64_t v4296;
  unint64_t v4297;
  unint64_t v4298;
  uint64_t v4299;
  unint64_t v4300;
  uint64_t v4301;
  uint64_t v4302;
  _BOOL4 v4303;
  unint64_t v4304;
  int v4305;
  uint64_t v4306;
  unint64_t v4307;
  uint64_t v4308;
  uint64_t v4309;
  uint64_t v4310;
  uint64_t v4311;
  _BOOL4 v4312;
  uint64_t v4313;
  int v4314;
  uint64_t v4315;
  unint64_t v4316;
  uint64_t v4317;
  uint64_t v4318;
  uint64_t v4319;
  uint64_t v4320;
  uint64_t v4321;
  unint64_t v4322;
  int v4323;
  uint64_t v4324;
  unint64_t v4325;
  unint64_t v4326;
  uint64_t v4327;
  uint64_t v4328;
  uint64_t v4329;
  uint64_t v4330;
  uint64_t v4331;
  uint64_t v4332;
  unint64_t v4333;
  unint64_t v4334;
  int v4335;
  unint64_t v4336;
  uint64_t v4337;
  unint64_t v4338;
  unint64_t v4339;
  uint64_t v4340;
  uint64_t v4341;
  uint64_t v4342;
  uint64_t v4343;
  unint64_t v4344;
  int v4345;
  uint64_t v4347;
  unint64_t v4348;
  int v4349;
  uint64_t v4350;
  unint64_t v4351;
  unint64_t v4352;
  int v4353;
  uint64_t v4354;
  unint64_t v4355;
  uint64_t v4356;
  uint64_t v4357;
  _BOOL4 v4358;
  unint64_t v4359;
  uint64_t v4360;
  unint64_t v4361;
  uint64_t v4362;
  uint64_t v4363;
  uint64_t v4364;
  uint64_t v4365;
  unint64_t v4366;
  int v4367;
  uint64_t v4368;
  uint64_t v4369;
  unint64_t v4370;
  unint64_t v4371;
  _BOOL4 v4372;
  unint64_t v4373;
  uint64_t v4375;
  unint64_t v4376;
  unint64_t v4377;
  unint64_t v4378;
  unint64_t v4379;
  uint64_t v4380;
  uint64_t v4381;
  _BOOL4 v4382;
  unint64_t v4383;
  unint64_t v4384;
  unint64_t v4385;
  unint64_t v4386;
  uint64_t v4387;
  uint64_t v4388;
  unint64_t v4389;
  int v4390;
  uint64_t v4391;
  unint64_t v4392;
  uint64_t v4393;
  unint64_t v4394;
  unint64_t v4395;
  int v4396;
  uint64_t v4397;
  unint64_t v4398;
  unint64_t v4399;
  unint64_t v4400;
  unint64_t v4401;
  uint64_t v4402;
  uint64_t v4403;
  unint64_t v4404;
  int v4405;
  uint64_t v4406;
  unint64_t v4407;
  uint64_t v4408;
  unint64_t v4409;
  unint64_t v4410;
  int v4411;
  uint64_t v4412;
  unint64_t v4413;
  uint64_t v4414;
  unint64_t v4415;
  uint64_t v4416;
  unint64_t v4417;
  uint64_t v4418;
  uint64_t v4419;
  unint64_t v4420;
  int v4421;
  uint64_t v4422;
  unint64_t v4423;
  uint64_t v4424;
  unint64_t v4425;
  unint64_t v4426;
  uint64_t v4427;
  unint64_t v4428;
  uint64_t v4429;
  unint64_t v4430;
  uint64_t v4431;
  unint64_t v4432;
  uint64_t v4433;
  uint64_t v4434;
  _BOOL4 v4435;
  unint64_t v4436;
  uint64_t v4437;
  unint64_t v4438;
  uint64_t v4439;
  unint64_t v4440;
  uint64_t v4441;
  unint64_t v4442;
  uint64_t v4443;
  uint64_t v4444;
  _BOOL4 v4445;
  unint64_t v4446;
  int v4447;
  uint64_t v4448;
  unint64_t v4449;
  uint64_t v4450;
  uint64_t v4451;
  uint64_t v4452;
  uint64_t v4453;
  _BOOL4 v4454;
  uint64_t v4455;
  int v4456;
  uint64_t v4457;
  unint64_t v4458;
  uint64_t v4459;
  uint64_t v4460;
  uint64_t v4461;
  uint64_t v4462;
  _BOOL4 v4463;
  uint64_t v4464;
  int v4465;
  uint64_t v4466;
  unint64_t v4467;
  uint64_t v4468;
  uint64_t v4469;
  uint64_t v4470;
  uint64_t v4471;
  _BOOL4 v4472;
  uint64_t v4473;
  int v4474;
  uint64_t v4475;
  unint64_t v4476;
  uint64_t v4477;
  uint64_t v4478;
  uint64_t v4479;
  uint64_t v4480;
  _BOOL4 v4481;
  uint64_t v4482;
  int v4483;
  uint64_t v4484;
  unint64_t v4485;
  uint64_t v4486;
  uint64_t v4487;
  uint64_t v4488;
  uint64_t v4489;
  unint64_t v4490;
  int v4491;
  uint64_t v4492;
  unint64_t v4493;
  uint64_t v4494;
  uint64_t v4495;
  unint64_t v4496;
  unint64_t v4497;
  uint64_t v4499;
  unint64_t v4500;
  uint64_t v4501;
  uint64_t v4502;
  unint64_t v4503;
  int v4504;
  uint64_t v4505;
  unint64_t v4506;
  uint64_t v4507;
  uint64_t v4508;
  unint64_t v4509;
  int v4510;
  uint64_t v4511;
  uint64_t v4512;
  uint64_t v4513;
  unint64_t v4514;
  _BOOL4 v4515;
  unint64_t v4516;
  uint64_t v4518;
  unint64_t v4519;
  uint64_t v4520;
  unint64_t v4521;
  uint64_t v4522;
  unint64_t v4523;
  uint64_t v4524;
  uint64_t v4525;
  _BOOL4 v4526;
  unint64_t v4527;
  unint64_t v4528;
  unint64_t v4529;
  uint64_t v4530;
  uint64_t v4531;
  unint64_t v4532;
  uint64_t v4533;
  uint64_t v4534;
  unint64_t v4535;
  int v4536;
  uint64_t v4537;
  unint64_t v4538;
  uint64_t v4539;
  unint64_t v4540;
  _BOOL4 v4541;
  unint64_t v4542;
  uint64_t v4544;
  unint64_t v4545;
  uint64_t v4546;
  unint64_t v4547;
  uint64_t v4548;
  unint64_t v4549;
  uint64_t v4550;
  uint64_t v4551;
  unint64_t v4552;
  int v4553;
  uint64_t v4554;
  unint64_t v4555;
  uint64_t v4556;
  unint64_t v4557;
  unint64_t v4558;
  int v4559;
  uint64_t v4560;
  unint64_t v4561;
  uint64_t v4562;
  unint64_t v4563;
  uint64_t v4564;
  unint64_t v4565;
  uint64_t v4566;
  uint64_t v4567;
  _BOOL4 v4568;
  unint64_t v4569;
  uint64_t v4571;
  unint64_t v4572;
  uint64_t v4573;
  unint64_t v4574;
  unint64_t v4575;
  uint64_t v4576;
  unint64_t v4577;
  uint64_t v4578;
  unint64_t v4579;
  uint64_t v4580;
  unint64_t v4581;
  uint64_t v4582;
  uint64_t v4583;
  _BOOL4 v4584;
  unint64_t v4585;
  int v4586;
  uint64_t v4587;
  uint64_t v4588;
  unint64_t v4589;
  unint64_t v4590;
  uint64_t v4591;
  unint64_t v4592;
  unint64_t v4593;
  unint64_t v4594;
  uint64_t v4595;
  unint64_t v4596;
  uint64_t v4597;
  uint64_t v4598;
  _BOOL4 v4599;
  unint64_t v4600;
  uint64_t v4602;
  unint64_t v4603;
  uint64_t v4604;
  uint64_t v4605;
  unint64_t v4606;
  unint64_t v4607;
  unint64_t v4608;
  uint64_t v4609;
  unint64_t v4610;
  uint64_t v4611;
  unint64_t v4612;
  uint64_t v4613;
  uint64_t v4614;
  uint64_t v4615;
  uint64_t v4616;
  uint64_t v4617;
  uint64_t v4618;
  unint64_t v4619;
  int v4620;
  unint64_t v4621;
  uint64_t v4622;
  unint64_t v4623;
  unint64_t v4624;
  uint64_t v4625;
  unint64_t v4626;
  unint64_t v4627;
  unint64_t v4628;
  uint64_t v4629;
  unint64_t v4630;
  uint64_t v4631;
  uint64_t v4632;
  unint64_t v4633;
  int v4634;
  uint64_t v4635;
  unint64_t v4636;
  uint64_t v4637;
  unint64_t v4638;
  uint64_t v4639;
  unint64_t v4640;
  unint64_t v4641;
  uint64_t v4642;
  unint64_t v4643;
  unint64_t v4644;
  unint64_t v4645;
  uint64_t v4646;
  unint64_t v4647;
  uint64_t v4648;
  uint64_t v4649;
  uint64_t v4650;
  unint64_t v4651;
  int v4652;
  unint64_t v4653;
  uint64_t v4654;
  unint64_t v4655;
  unint64_t v4656;
  uint64_t v4657;
  unint64_t v4658;
  uint64_t v4659;
  unint64_t v4660;
  uint64_t v4661;
  unint64_t v4662;
  uint64_t v4663;
  uint64_t v4664;
  _BOOL4 v4665;
  unint64_t v4666;
  uint64_t v4668;
  unint64_t v4669;
  uint64_t v4670;
  unint64_t v4671;
  uint64_t v4672;
  unint64_t v4673;
  uint64_t v4674;
  uint64_t v4675;
  uint64_t v4676;
  uint64_t v4677;
  unint64_t v4678;
  int v4679;
  uint64_t v4680;
  unint64_t v4681;
  uint64_t v4682;
  unint64_t v4683;
  _BOOL4 v4684;
  unint64_t v4685;
  uint64_t v4686;
  unint64_t v4687;
  uint64_t v4688;
  unint64_t v4689;
  uint64_t v4690;
  uint64_t v4691;
  uint64_t v4692;
  uint64_t v4693;
  _BOOL4 v4694;
  uint64_t v4695;
  int v4696;
  uint64_t v4697;
  unint64_t v4698;
  uint64_t v4699;
  uint64_t v4700;
  unint64_t v4701;
  int v4702;
  uint64_t v4703;
  unint64_t v4704;
  uint64_t v4705;
  unint64_t v4706;
  uint64_t v4707;
  uint64_t v4708;
  uint64_t v4709;
  uint64_t v4710;
  _BOOL4 v4711;
  uint64_t v4712;
  int v4713;
  uint64_t v4714;
  unint64_t v4715;
  uint64_t v4716;
  uint64_t v4717;
  _BOOL4 v4718;
  unint64_t v4719;
  uint64_t v4720;
  unint64_t v4721;
  uint64_t v4722;
  unint64_t v4723;
  uint64_t v4724;
  uint64_t v4725;
  uint64_t v4726;
  uint64_t v4727;
  unint64_t v4728;
  int v4729;
  uint64_t v4730;
  uint64_t v4731;
  unint64_t v4732;
  unint64_t v4733;
  _BOOL4 v4734;
  unint64_t v4735;
  int v4736;
  uint64_t v4737;
  unint64_t v4738;
  uint64_t v4739;
  uint64_t v4740;
  uint64_t v4741;
  uint64_t v4742;
  uint64_t v4743;
  uint64_t v4744;
  _BOOL4 v4745;
  uint64_t v4746;
  int v4747;
  uint64_t v4748;
  uint64_t v4749;
  unint64_t v4750;
  uint64_t v4751;
  unint64_t v4752;
  int v4753;
  uint64_t v4754;
  unint64_t v4755;
  uint64_t v4756;
  uint64_t v4757;
  uint64_t v4758;
  uint64_t v4759;
  uint64_t v4760;
  uint64_t v4761;
  _BOOL4 v4762;
  uint64_t v4763;
  int v4764;
  uint64_t v4765;
  unint64_t v4766;
  uint64_t v4767;
  uint64_t v4768;
  unint64_t v4769;
  int v4770;
  uint64_t v4771;
  unint64_t v4772;
  uint64_t v4773;
  uint64_t v4774;
  uint64_t v4775;
  uint64_t v4776;
  uint64_t v4777;
  uint64_t v4778;
  uint64_t v4779;
  _BOOL4 v4780;
  uint64_t v4781;
  int v4782;
  uint64_t v4783;
  unint64_t v4784;
  uint64_t v4785;
  uint64_t v4786;
  _BOOL4 v4787;
  uint64_t v4788;
  uint64_t v4789;
  unint64_t v4790;
  uint64_t v4791;
  uint64_t v4792;
  uint64_t v4793;
  uint64_t v4794;
  uint64_t v4795;
  uint64_t v4796;
  uint64_t v4797;
  _BOOL4 v4798;
  uint64_t v4799;
  uint64_t v4801;
  uint64_t v4802;
  uint64_t v4803;
  unint64_t v4804;
  _BOOL4 v4805;
  uint64_t v4806;
  int v4807;
  uint64_t v4808;
  unint64_t v4809;
  uint64_t v4810;
  uint64_t v4811;
  uint64_t v4812;
  uint64_t v4813;
  uint64_t v4814;
  uint64_t v4815;
  _BOOL4 v4816;
  uint64_t v4817;
  uint64_t v4819;
  uint64_t v4820;
  uint64_t v4821;
  unint64_t v4822;
  int v4823;
  uint64_t v4824;
  unint64_t v4825;
  uint64_t v4826;
  uint64_t v4827;
  uint64_t v4828;
  uint64_t v4829;
  uint64_t v4830;
  uint64_t v4831;
  _BOOL4 v4832;
  uint64_t v4833;
  int v4834;
  uint64_t v4835;
  unint64_t v4836;
  uint64_t v4837;
  uint64_t v4838;
  unint64_t v4839;
  int v4840;
  uint64_t v4841;
  uint64_t v4842;
  unint64_t v4843;
  uint64_t v4844;
  uint64_t v4845;
  uint64_t v4846;
  unint64_t v4847;
  uint64_t v4848;
  uint64_t v4849;
  uint64_t v4850;
  uint64_t v4851;
  unint64_t v4852;
  int v4853;
  uint64_t v4854;
  unint64_t v4855;
  _BOOL4 v4856;
  unint64_t v4857;
  uint64_t v4858;
  unint64_t v4859;
  uint64_t v4860;
  uint64_t v4861;
  uint64_t v4862;
  uint64_t v4863;
  uint64_t v4864;
  uint64_t v4865;
  uint64_t v4866;
  unint64_t v4867;
  int v4868;
  unint64_t v4869;
  uint64_t v4870;
  unint64_t v4871;
  _BOOL4 v4872;
  unint64_t v4873;
  uint64_t v4874;
  unint64_t v4875;
  uint64_t v4876;
  uint64_t v4877;
  uint64_t v4878;
  uint64_t v4879;
  uint64_t v4880;
  uint64_t v4881;
  uint64_t v4882;
  unint64_t v4883;
  int v4884;
  uint64_t v4885;
  unint64_t v4886;
  _BOOL4 v4887;
  unint64_t v4888;
  uint64_t v4889;
  unint64_t v4890;
  uint64_t v4891;
  uint64_t v4892;
  uint64_t v4893;
  uint64_t v4894;
  uint64_t v4895;
  uint64_t v4896;
  uint64_t v4897;
  _BOOL4 v4898;
  uint64_t v4899;
  int v4900;
  uint64_t v4901;
  unint64_t v4902;
  uint64_t v4903;
  uint64_t v4904;
  _BOOL4 v4905;
  uint64_t v4906;
  int v4907;
  unint64_t v4908;
  uint64_t v4909;
  uint64_t v4910;
  _BOOL4 v4911;
  uint64_t v4912;
  uint64_t v4913;
  unint64_t v4914;
  _BOOL4 v4915;
  unint64_t v4916;
  uint64_t v4917;
  unint64_t v4918;
  uint64_t v4919;
  uint64_t v4920;
  _BOOL4 v4921;
  uint64_t v4922;
  uint64_t v4923;
  unint64_t v4924;
  unint64_t v4925;
  uint64_t v4926;
  unint64_t v4927;
  uint64_t v4928;
  uint64_t v4929;
  uint64_t v4930;
  uint64_t v4931;
  unint64_t v4932;
  unint64_t v4933;
  _BOOL4 v4934;
  unint64_t v4935;
  uint64_t v4936;
  unint64_t v4937;
  uint64_t v4938;
  uint64_t v4939;
  uint64_t v4940;
  _BOOL4 v4941;
  uint64_t v4942;
  uint64_t v4943;
  unint64_t v4944;
  _BOOL4 v4945;
  unint64_t v4946;
  uint64_t v4947;
  unint64_t v4948;
  uint64_t v4949;
  unint64_t v4950;
  unint64_t v4951;
  uint64_t v4952;
  int v4953;
  uint64_t v4954;
  uint64_t v4955;
  unint64_t v4956;
  int v4957;
  uint64_t v4958;
  unint64_t v4959;
  uint64_t v4960;
  unint64_t v4961;
  unint64_t v4962;
  int v4963;
  uint64_t v4964;
  unint64_t v4965;
  uint64_t v4966;
  unint64_t v4967;
  uint64_t v4968;
  uint64_t v4969;
  uint64_t v4970;
  uint64_t v4971;
  uint64_t v4972;
  uint64_t v4973;
  uint64_t v4974;
  unint64_t v4975;
  int v4976;
  uint64_t v4977;
  unint64_t v4978;
  uint64_t v4979;
  unint64_t v4980;
  unint64_t v4981;
  int v4982;
  uint64_t v4983;
  unint64_t v4984;
  uint64_t v4985;
  unint64_t v4986;
  uint64_t v4987;
  _BOOL4 v4988;
  unsigned int v4989;
  BOOL v4990;
  _BOOL8 v4991;
  unint64_t v4992;
  uint64_t v4993;
  uint64_t v4994;
  uint64_t v4995;
  _BOOL8 v4996;
  uint64_t v4997;
  uint64_t v4998;
  uint64_t v4999;
  BOOL v5000;
  uint64_t v5001;
  unint64_t v5002;
  unint64_t v5003;
  unint64_t v5004;
  unint64_t v5005;
  uint64_t v5006;
  unint64_t v5007;
  uint64_t v5008;
  unint64_t v5009;
  uint64_t v5010;
  unint64_t v5011;
  unint64_t v5012;
  uint64_t v5013;
  uint64_t v5014;
  uint64_t v5015;
  uint64_t (*v5016)(_QWORD);
  unint64_t v5017;
  unint64_t v5018;
  unint64_t v5019;
  _BOOL4 v5020;
  int v5021;
  unint64_t v5022;
  unint64_t v5023;
  _BOOL4 v5024;
  int v5025;
  unint64_t v5026;
  unint64_t v5027;
  _BOOL4 v5028;
  unint64_t v5029;
  unint64_t v5030;
  _BOOL4 v5031;
  unint64_t v5032;
  unint64_t v5033;
  _BOOL4 v5034;
  unint64_t v5035;
  _BOOL4 v5036;
  unint64_t v5037;
  unint64_t v5038;
  unint64_t v5039;
  _BOOL4 v5040;
  unint64_t v5041;
  int v5042;
  unint64_t v5043;
  unint64_t v5044;
  _BOOL4 v5045;
  unint64_t v5046;
  unint64_t v5047;
  uint64_t v5048;
  unint64_t v5049;
  unint64_t v5050;
  unint64_t v5051;
  int v5052;
  uint64_t v5053;
  uint64_t v5054;
  unint64_t v5055;
  unint64_t v5056;
  _BOOL4 v5057;
  uint64_t v5058;
  int v5059;
  unint64_t v5060;
  _BOOL8 v5061;
  uint64_t v5062;
  uint64_t v5063;
  uint64_t v5064;
  uint64_t v5065;
  uint64_t v5066;
  uint64_t v5067;
  unint64_t v5068;
  uint64_t v5069;
  uint64_t v5070;
  unint64_t v5071;
  uint64_t v5072;
  unint64_t v5073;
  unint64_t v5074;
  uint64_t v5075;
  uint64_t v5076;
  unint64_t v5077;
  uint64_t v5078;
  uint64_t v5079;
  unint64_t v5080;
  unint64_t v5081;
  uint64_t v5082;
  uint64_t v5083;
  uint64_t v5084;
  uint64_t v5085;
  uint64_t (*v5086)(void);
  unint64_t v5087;
  _BOOL4 v5088;
  unint64_t v5089;
  _BOOL4 v5090;
  _BOOL4 v5091;
  unint64_t v5092;
  _BOOL4 v5093;
  unint64_t v5094;
  unint64_t v5095;
  _BOOL4 v5096;
  unint64_t v5097;
  uint64_t v5098;
  unint64_t v5099;
  _BOOL4 v5100;
  unint64_t v5101;
  _BOOL4 v5102;
  unint64_t v5103;
  _BOOL4 v5104;
  unint64_t v5105;
  _BOOL4 v5106;
  unint64_t v5107;
  _BOOL4 v5108;
  uint64_t v5109;
  uint64_t v5110;
  int v5111;
  int v5112;
  int v5113;
  uint64_t v5114;
  uint64_t v5115;
  uint64_t v5116;
  uint64_t v5117;
  uint64_t v5118;
  uint64_t v5119;
  int v5120;
  int v5121;
  uint64_t v5122;
  uint64_t v5123;
  uint64_t (*v5124)(_QWORD);
  unint64_t v5125;
  uint64_t (*v5126)(_QWORD);
  unint64_t v5127;
  unint64_t v5128;
  unint64_t v5129;
  unint64_t v5130;
  unint64_t v5131;
  unint64_t v5132;
  unint64_t v5133;
  unint64_t v5134;
  unint64_t v5135;
  unint64_t v5136;
  unint64_t v5137;
  unint64_t v5138;
  int v5139;
  uint64_t (*v5140)(void);
  unint64_t v5141;
  unint64_t v5142;
  _BOOL4 v5143;
  unint64_t v5144;
  unint64_t v5145;
  _BOOL4 v5146;
  unint64_t v5147;
  unint64_t v5148;
  _BOOL4 v5149;
  unint64_t v5150;
  _BOOL4 v5151;
  unint64_t v5152;
  _BOOL4 v5153;
  unint64_t v5154;
  _BOOL4 v5155;
  unint64_t v5156;
  _BOOL4 v5157;
  _BOOL4 v5158;
  unint64_t v5159;
  unint64_t v5160;
  _BOOL4 v5161;
  _BOOL4 v5162;
  unint64_t v5163;
  unint64_t v5164;
  unint64_t v5165;
  _BOOL4 v5166;
  unint64_t v5167;
  unint64_t v5168;
  unint64_t v5169;
  unint64_t v5170;
  _BOOL4 v5171;
  unint64_t v5172;
  uint64_t v5173;
  unint64_t v5174;
  _BOOL4 v5175;
  unint64_t v5176;
  _BOOL4 v5177;
  uint64_t v5178;
  uint64_t v5179;
  uint64_t v5180;
  unint64_t v5181;
  _BOOL4 v5182;
  uint64_t v5183;
  uint64_t v5184;
  uint64_t v5185;
  uint64_t v5187;
  unint64_t v5188;
  uint64_t v5189;
  uint64_t v5190;
  uint64_t v5191;
  unint64_t v5192;
  _BOOL4 v5193;
  unint64_t v5194;
  _BOOL4 v5195;
  uint64_t v5196;
  int v5197;
  uint64_t v5198;
  uint64_t v5199;
  uint64_t v5200;
  uint64_t v5201;
  uint64_t v5202;
  uint64_t v5203;
  uint64_t v5204;
  uint64_t v5205;
  unint64_t v5206;
  uint64_t v5207;
  BOOL v5208;
  uint64_t v5209;
  unint64_t v5210;
  _BOOL4 v5211;
  unint64_t v5212;
  uint64_t v5213;
  unint64_t v5214;
  int v5215;
  uint64_t v5217;
  unint64_t v5218;
  unint64_t v5219;
  _BOOL4 v5220;
  uint64_t v5221;
  uint64_t v5223;
  unint64_t v5224;
  _BOOL4 v5225;
  unint64_t v5226;
  uint64_t v5227;
  unint64_t v5228;
  BOOL v5229;
  uint64_t v5230;
  unint64_t v5231;
  uint64_t v5232;
  BOOL v5233;
  unint64_t v5234;
  uint64_t v5235;
  uint64_t v5236;
  uint64_t v5237;
  uint64_t v5238;
  unint64_t v5239;
  uint64_t v5240;
  BOOL v5241;
  uint64_t v5242;
  unint64_t v5243;
  uint64_t v5244;
  uint64_t v5246;
  unint64_t v5247;
  unint64_t v5248;
  uint64_t v5249;
  unint64_t v5250;
  BOOL v5251;
  uint64_t v5252;
  unint64_t v5253;
  int v5254;
  uint64_t v5255;
  unint64_t v5256;
  BOOL v5257;
  uint64_t v5258;
  unint64_t v5259;
  int v5260;
  uint64_t v5261;
  unint64_t v5262;
  unint64_t v5263;
  unint64_t v5264;
  unint64_t v5265;
  uint64_t v5266;
  int v5267;
  uint64_t v5268;
  uint64_t v5270;
  unint64_t v5271;
  int v5272;
  unint64_t v5273;
  _BOOL4 v5274;
  int v5275;
  uint64_t v5276;
  unint64_t v5277;
  uint64_t v5278;
  unint64_t v5279;
  _BOOL4 v5280;
  uint64_t v5281;
  unint64_t v5282;
  _BOOL4 v5283;
  int v5284;
  uint64_t v5285;
  unint64_t v5286;
  int v5287;
  uint64_t v5288;
  uint64_t v5289;
  int v5290;
  uint64_t v5291;
  uint64_t v5292;
  uint64_t (*v5293)(_QWORD);
  unint64_t v5294;
  uint64_t (*v5295)(_QWORD);
  unint64_t v5296;
  unint64_t v5297;
  unint64_t v5298;
  _BOOL4 v5299;
  unint64_t v5300;
  unint64_t v5301;
  _BOOL4 v5302;
  unint64_t v5303;
  unint64_t v5304;
  _BOOL4 v5305;
  unint64_t v5306;
  unint64_t v5307;
  _BOOL4 v5308;
  unint64_t v5309;
  unint64_t v5310;
  _BOOL4 v5311;
  unint64_t v5312;
  unint64_t v5313;
  _BOOL4 v5314;
  unint64_t v5315;
  unint64_t v5316;
  _BOOL4 v5317;
  unint64_t v5318;
  unint64_t v5319;
  _BOOL4 v5320;
  unint64_t v5321;
  unint64_t v5322;
  _BOOL4 v5323;
  unint64_t v5324;
  unint64_t v5325;
  _BOOL4 v5326;
  int v5327;
  unint64_t v5328;
  _BOOL4 v5329;
  unint64_t v5330;
  _BOOL4 v5331;
  unint64_t v5332;
  unint64_t v5333;
  _BOOL4 v5334;
  int v5335;
  unint64_t v5336;
  _BOOL4 v5337;
  unint64_t v5338;
  unint64_t v5339;
  unint64_t v5340;
  _BOOL4 v5341;
  _BOOL8 v5342;
  unint64_t v5343;
  unint64_t v5344;
  _BOOL4 v5345;
  unint64_t v5346;
  _BOOL4 v5347;
  unint64_t v5348;
  _BOOL4 v5349;
  unint64_t v5350;
  _BOOL4 v5351;
  int v5352;
  uint64_t v5353;
  unint64_t v5354;
  unint64_t v5355;
  _BOOL4 v5356;
  unint64_t v5357;
  _BOOL4 v5358;
  uint64_t v5359;
  unint64_t v5360;
  int v5361;
  uint64_t v5362;
  unint64_t v5363;
  unint64_t v5364;
  _BOOL4 v5365;
  uint64_t v5366;
  unint64_t v5367;
  uint64_t v5368;
  unint64_t v5369;
  int v5370;
  int v5371;
  uint64_t v5372;
  unint64_t v5373;
  uint64_t v5374;
  unint64_t v5375;
  unint64_t v5376;
  _BOOL4 v5377;
  uint64_t v5378;
  uint64_t v5379;
  uint64_t v5380;
  unint64_t v5381;
  uint64_t v5382;
  unint64_t v5383;
  unint64_t v5384;
  uint64_t v5385;
  uint64_t v5386;
  unint64_t v5387;
  uint64_t v5388;
  unint64_t v5389;
  uint64_t v5390;
  unint64_t v5391;
  uint64_t v5392;
  unint64_t v5393;
  unint64_t v5394;
  unint64_t v5395;
  unint64_t v5396;
  uint64_t v5397;
  unint64_t v5398;
  uint64_t v5399;
  unint64_t v5400;
  uint64_t v5401;
  unint64_t v5402;
  uint64_t v5403;
  unint64_t v5404;
  _BOOL4 v5405;
  unint64_t v5406;
  uint64_t v5407;
  unint64_t v5408;
  uint64_t v5409;
  uint64_t v5410;
  uint64_t v5411;
  uint64_t v5412;
  unint64_t v5413;
  _BOOL4 v5414;
  uint64_t v5415;
  unint64_t v5416;
  _BOOL4 v5417;
  uint64_t v5418;
  int v5419;
  uint64_t v5420;
  unint64_t v5421;
  _BOOL4 v5422;
  uint64_t v5423;
  int v5424;
  uint64_t v5425;
  uint64_t v5426;
  uint64_t v5427;
  uint64_t v5428;
  int v5429;
  uint64_t v5430;
  unint64_t v5431;
  _BOOL4 v5432;
  unint64_t v5433;
  _BOOL4 v5434;
  uint64_t v5435;
  uint64_t v5436;
  int v5437;
  uint64_t v5438;
  uint64_t v5439;
  uint64_t v5440;
  uint64_t v5441;
  uint64_t (*v5442)(_QWORD);
  unint64_t v5443;
  int v5444;
  uint64_t (*v5445)(void);
  int v5446;
  uint64_t (*v5447)(void);
  unint64_t v5448;
  unint64_t v5449;
  unint64_t v5450;
  unint64_t v5451;
  unint64_t v5452;
  unsigned int v5453;
  uint64_t (*v5454)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v5455;
  unint64_t v5456;

  LODWORD(STACK[0x3BD8]) = v14;
  STACK[0x3BD0] = v15;
  STACK[0x3BC8] = v18;
  STACK[0x3BC0] = a1;
  v25 = STACK[0x3248];
  v26 = STACK[0x3230];
  v27 = STACK[0x3228];
  v28 = STACK[0x3220];
  v29 = STACK[0x3250];
  while (2)
  {
    v30 = ((unint64_t)v17 * (unsigned __int128)v12) >> 64;
    v31 = 15 * v30;
    v32 = (v30 * (unsigned __int128)(unint64_t)v21) >> 64;
    v33 = v31 + v17 * v12;
    if (__CFADD__(v31, v17 * v12))
      ++v32;
    v34 = 15 * v32;
    v573 = __CFADD__(v34, v33);
    v35 = v34 + v33;
    v36 = v573;
    if (v35 > 0xFFFFFFFFFFFFFFF0)
      v36 = 1;
    if (v36)
      v37 = v21;
    else
      v37 = 0;
    v38 = v37 + v35;
    v39 = 0x9FEC52B6396CF0C0 * v38;
    v40 = (v38 * (unsigned __int128)0x9FEC52B6396CF0C0) >> 64;
    v41 = 15 * v40;
    v42 = (v40 * (unsigned __int128)(unint64_t)v21) >> 64;
    v573 = __CFADD__(v41, v39);
    v43 = v41 + v39;
    if (v573)
      ++v42;
    v44 = 15 * v42;
    v573 = __CFADD__(v44, v43);
    v45 = v44 + v43;
    v46 = v573;
    if (v45 > 0xFFFFFFFFFFFFFFF0)
      v46 = 1;
    if (v46)
      v47 = v21;
    else
      v47 = 0;
    v48 = v47 + v45;
    v49 = 0x7FF97F97F97F97F2 * v48;
    v50 = (v48 * (unsigned __int128)0x7FF97F97F97F97F2uLL) >> 64;
    v51 = 15 * v50;
    v52 = (v50 * (unsigned __int128)(unint64_t)v21) >> 64;
    v573 = __CFADD__(v51, v49);
    v53 = v51 + v49;
    if (v573)
      ++v52;
    v54 = 15 * v52;
    v573 = __CFADD__(v54, v53);
    v55 = v54 + v53;
    v56 = v573;
    if (v55 > 0xFFFFFFFFFFFFFFF0)
      v56 = 1;
    if (v56)
      v57 = v21;
    else
      v57 = 0;
    v58 = v57 + v55;
    if (v57 + v55 >= 0xFFFFFFFFFFFFFFD3)
      v59 = v23;
    else
      v59 = 0;
    v60 = v59 + v58;
    v61 = 2661120 * v60;
    v62 = ((v60 * (unsigned __int128)0x289B00uLL) >> 64) * (unint64_t)v23;
    v573 = __CFADD__(v62, v61);
    v63 = v62 + v61;
    if (v573)
      v64 = v23;
    else
      v64 = 0;
    v65 = v64 + v63 > 0xFFFFFFFFFFFFFFD2;
    v573 = __CFADD__(v64, v63);
    v66 = v64 + v63;
    v67 = v29 * v13;
    v68 = (v29 * (unsigned __int128)v13) >> 64;
    v69 = (v68 * (unsigned __int128)5uLL) >> 64;
    v70 = 5 * v68;
    v71 = v573 || v65;
    v72 = v70 + v67;
    if (__CFADD__(v70, v67))
      v73 = v69 + 1;
    else
      v73 = v69;
    v74 = 5 * v73;
    v75 = v74 + v72 > 0xFFFFFFFFFFFFFFFALL;
    v573 = __CFADD__(v74, v72);
    v76 = v74 + v72;
    if (v573 || v75)
      v78 = 5;
    else
      v78 = 0;
    v79 = v78 + v76;
    v80 = 0xE7CF05C2128E4523 * v79;
    v81 = (((v79 * (unsigned __int128)0xE7CF05C2128E4523) >> 64) * 5) >> 64;
    v82 = (__PAIR128__(4, 0xE7CF05C2128E4523) * v79) >> 64;
    v573 = __CFADD__(v82, v80);
    v83 = v82 + v80;
    if (v573)
      v84 = v81 + 1;
    else
      v84 = v81;
    v85 = 5 * v84;
    v86 = (unint64_t)(v85 + v83) > 0xFFFFFFFFFFFFFFFALL;
    v573 = __CFADD__(v85, v83);
    v87 = v85 + v83;
    if (v573 || v86)
      v89 = 5;
    else
      v89 = 0;
    v90 = v89 + v87;
    v91 = 0xD73333333333332FLL * v90;
    v92 = (((v90 * (unsigned __int128)0xD73333333333332FLL) >> 64) * 5) >> 64;
    v93 = (__PAIR128__(4, 0xD73333333333332FLL) * v90) >> 64;
    v573 = __CFADD__(v93, v91);
    v94 = v93 + v91;
    if (v573)
      v95 = v92 + 1;
    else
      v95 = v92;
    v96 = 5 * v95;
    v573 = __CFADD__(v96, v94);
    v97 = v96 + v94;
    v98 = v573;
    if (v97 > 0xFFFFFFFFFFFFFFFALL)
      v98 = 1;
    if (v98)
      v99 = 5;
    else
      v99 = 0;
    v100 = v99 + v97;
    if (v99 + v97 >= 0xFFFFFFFFFFFFFFD3)
      v101 = v23;
    else
      v101 = 0;
    v102 = v101 + v100;
    v103 = 1995840 * v102;
    v104 = ((v102 * (unsigned __int128)0x1E7440uLL) >> 64) * (unint64_t)v23;
    v573 = __CFADD__(v104, v103);
    v105 = v104 + v103;
    if (v573)
      v106 = v23;
    else
      v106 = 0;
    v107 = v106 + v105 > 0xFFFFFFFFFFFFFFD2;
    v573 = __CFADD__(v106, v105);
    v108 = v106 + v105;
    v109 = v16 * a3;
    v110 = ((unint64_t)v16 * (unsigned __int128)a3) >> 64;
    v111 = v573 || v107;
    v112 = __CFADD__(__CFADD__(v110, v109), v110 + v109);
    v113 = __CFADD__(v110, v109) + v110 + v109 == -1 || v112;
    v114 = v110 + v109 + __CFADD__(v110, v109) + v113;
    v115 = ((unint64_t)v114 * (unsigned __int128)0x5CAECC2F8BD67150uLL) >> 64;
    v116 = 0x5CAECC2F8BD67150 * v114;
    v117 = __CFADD__(__CFADD__(v115, v116), v115 + v116);
    v118 = __CFADD__(v115, v116) + v115 + v116 == -1 || v117;
    v119 = v115 + v116 + __CFADD__(v115, v116) + v118;
    v120 = ((unint64_t)v119 * (unsigned __int128)0xDBB6DB6DB6DB6DB6) >> 64;
    v121 = 0xDBB6DB6DB6DB6DB6 * v119;
    v122 = __CFADD__(__CFADD__(v120, v121), v120 + v121);
    v123 = __CFADD__(v120, v121) + v120 + v121 == -1 || v122;
    v124 = v120 + v121 + __CFADD__(v120, v121) + v123;
    if (v124 >= 0xFFFFFFFFFFFFFFD3)
      v125 = v23;
    else
      v125 = 0;
    v126 = v125 + v124;
    v127 = 1814400 * v126;
    v128 = ((v126 * (unsigned __int128)0x1BAF80uLL) >> 64) * (unint64_t)v23;
    v573 = __CFADD__(v128, v127);
    v129 = v128 + v127;
    if (v573)
      v130 = v23;
    else
      v130 = 0;
    v131 = v130 + v129 > 0xFFFFFFFFFFFFFFD2;
    v573 = __CFADD__(v130, v129);
    v132 = v130 + v129;
    v133 = v27 * a2;
    v134 = (v27 * (unsigned __int128)a2) >> 64;
    v135 = (v134 * (unsigned __int128)3uLL) >> 64;
    v136 = 3 * v134;
    v137 = v573 || v131;
    v138 = v136 + v133;
    if (__CFADD__(v136, v133))
      v139 = v135 + 1;
    else
      v139 = v135;
    v140 = 3 * v139;
    v141 = v140 + v138 > 0xFFFFFFFFFFFFFFFCLL;
    v573 = __CFADD__(v140, v138);
    v142 = v140 + v138;
    if (v573 || v141)
      v144 = 3;
    else
      v144 = 0;
    v145 = v144 + v142;
    v146 = 0x98FDEF4CCE72A7B8 * v145;
    v147 = (((v145 * (unsigned __int128)0x98FDEF4CCE72A7B8) >> 64) * 3) >> 64;
    v148 = (__PAIR128__(2, 0x98FDEF4CCE72A7B8) * v145) >> 64;
    v573 = __CFADD__(v148, v146);
    v149 = v148 + v146;
    if (v573)
      v150 = v147 + 1;
    else
      v150 = v147;
    v151 = 3 * v150;
    v573 = __CFADD__(v151, v149);
    v152 = v151 + v149;
    v153 = v573;
    if (v152 > 0xFFFFFFFFFFFFFFFCLL)
      v153 = 1;
    if (v153)
      v154 = 3;
    else
      v154 = 0;
    v155 = v154 + v152;
    v156 = 0xF638E38E38E38E36 * v155;
    v157 = (((v155 * (unsigned __int128)0xF638E38E38E38E36) >> 64) * 3) >> 64;
    v158 = (__PAIR128__(2, 0xF638E38E38E38E36) * v155) >> 64;
    v573 = __CFADD__(v158, v156);
    v159 = v158 + v156;
    if (v573)
      v160 = v157 + 1;
    else
      v160 = v157;
    v161 = 3 * v160;
    v162 = (unint64_t)(v161 + v159) > 0xFFFFFFFFFFFFFFFCLL;
    v573 = __CFADD__(v161, v159);
    v163 = v161 + v159;
    v164 = a8 * a4;
    v165 = (a8 * (unsigned __int128)(unint64_t)a4) >> 64;
    v166 = (v165 * (unsigned __int128)9uLL) >> 64;
    v167 = 9 * v165;
    if (v573)
      v162 = 1;
    v573 = __CFADD__(v167, v164);
    v168 = v167 + v164;
    if (v573)
      v169 = v166 + 1;
    else
      v169 = v166;
    v170 = 9 * v169;
    v573 = __CFADD__(v170, v168);
    v171 = v170 + v168;
    v172 = v573;
    if (v171 > 0xFFFFFFFFFFFFFFF6)
      v172 = 1;
    if (v172)
      v173 = 9;
    else
      v173 = 0;
    v174 = v173 + v171;
    v175 = 0x1513DAB390DF5A9ELL * v174;
    v176 = (__PAIR128__(8, 0x1513DAB390DF5A9ELL) * v174) >> 64;
    v573 = __CFADD__(v176, v175);
    v177 = v176 + v175;
    if (v573)
      v178 = 9;
    else
      v178 = 0;
    v179 = (unint64_t)(v178 + v177) > 0xFFFFFFFFFFFFFFF6;
    v573 = __CFADD__(v178, v177);
    v180 = v178 + v177;
    if (v573 || v179)
      v182 = 9;
    else
      v182 = 0;
    v183 = v182 + v180;
    v184 = 0xD6E38E38E38E38DCLL * v183;
    v185 = (v183 * (unsigned __int128)0xD6E38E38E38E38DCLL) >> 64;
    if (v162)
      v186 = 3;
    else
      v186 = 0;
    v187 = v186 + v163;
    v188 = (v185 * (unsigned __int128)9uLL) >> 64;
    v189 = 9 * v185;
    v573 = __CFADD__(v189, v184);
    v190 = v189 + v184;
    if (v573)
      ++v188;
    v191 = 9 * v188;
    v573 = __CFADD__(v191, v190);
    v192 = v191 + v190;
    v193 = v573;
    if (v192 > 0xFFFFFFFFFFFFFFF6)
      v193 = 1;
    if (v193)
      v194 = 9;
    else
      v194 = 0;
    v195 = v194 + v192;
    if (v187 >= 0xFFFFFFFFFFFFFFD3)
      v196 = v23;
    else
      v196 = 0;
    v197 = v196 + v187;
    if (v137)
      v198 = v23;
    else
      v198 = 0;
    v199 = v198 + v132;
    v200 = 1900800 * v197;
    if (v199 >= 0xFFFFFFFFFFFFFFD3)
      v201 = v23;
    else
      v201 = 0;
    v202 = v201 + v199;
    v203 = ((v197 * (unsigned __int128)0x1D0100uLL) >> 64) * (unint64_t)v23;
    v573 = __CFADD__(v203, v200);
    v204 = v203 + v200;
    if (v573)
      v205 = v23;
    else
      v205 = 0;
    v573 = __CFADD__(v205, v204);
    v206 = v205 + v204;
    v207 = v573;
    if (v206 > 0xFFFFFFFFFFFFFFD2)
      v207 = 1;
    if (v207)
      v208 = v23;
    else
      v208 = 0;
    v209 = v206 + v202 + v208;
    v210 = v209 < v202 || v209 > 0xFFFFFFFFFFFFFFD2;
    if (v210)
      v211 = v23;
    else
      v211 = 0;
    v212 = v211 + v209;
    if (v195 >= 0xFFFFFFFFFFFFFFD3)
      v213 = v23;
    else
      v213 = 0;
    v214 = v213 + v195;
    if (v111)
      v215 = v23;
    else
      v215 = 0;
    v216 = v212 + v108 + v215;
    if (v212 > v216 || v216 > 0xFFFFFFFFFFFFFFD2)
      v218 = v23;
    else
      v218 = 0;
    v219 = v218 + v216;
    v220 = ((v214 * (unsigned __int128)0x21D680uLL) >> 64) * (unint64_t)v23;
    v573 = __CFADD__(v220, 2217600 * v214);
    v221 = v220 + 2217600 * v214;
    if (v573)
      v222 = v23;
    else
      v222 = 0;
    v573 = __CFADD__(v222, v221);
    v223 = v222 + v221;
    v224 = v573;
    if (v223 > 0xFFFFFFFFFFFFFFD2)
      v224 = 1;
    if (v224)
      v225 = v23;
    else
      v225 = 0;
    v226 = v225 + v223;
    v227 = v226 + v219 > 0xFFFFFFFFFFFFFFD2;
    v573 = __CFADD__(v226, v219);
    v228 = v226 + v219;
    if (v573 || v227)
      v230 = v23;
    else
      v230 = 0;
    v231 = v230 + v228;
    if (v71)
      v232 = v23;
    else
      v232 = 0;
    v233 = v232 + v66;
    v234 = v233 + v231 > 0xFFFFFFFFFFFFFFD2;
    v573 = __CFADD__(v233, v231);
    v235 = v233 + v231;
    v236 = v28 * a7;
    v237 = (v28 * (unsigned __int128)a7) >> 64;
    v238 = (v237 * (unsigned __int128)(unint64_t)v23) >> 64;
    v239 = v237 * v23;
    if (v573)
      v234 = 1;
    v573 = __CFADD__(v239, v236);
    v240 = v239 + v236;
    if (v573)
      v241 = v238 + 1;
    else
      v241 = v238;
    v242 = v241 * v23;
    v243 = v242 + v240 > 0xFFFFFFFFFFFFFFD2;
    v573 = __CFADD__(v242, v240);
    v244 = v242 + v240;
    if (v573 || v243)
      v246 = v23;
    else
      v246 = 0;
    v247 = v246 + v244;
    if (v234)
      v248 = v23;
    else
      v248 = 0;
    v249 = v248 + v235;
    v250 = 0xB1035F48A597370CLL * v249;
    v251 = (v249 * (unsigned __int128)0xB1035F48A597370CLL) >> 64;
    v252 = (v251 * (unsigned __int128)(unint64_t)v23) >> 64;
    v253 = v251 * v23;
    v573 = __CFADD__(v253, v250);
    v254 = v253 + v250;
    if (v573)
      v255 = v252 + 1;
    else
      v255 = v252;
    v256 = v255 * v23;
    v573 = __CFADD__(v256, v254);
    v257 = v256 + v254;
    v258 = v573;
    if (v257 > 0xFFFFFFFFFFFFFFD2)
      v258 = 1;
    if (v258)
      v259 = v23;
    else
      v259 = 0;
    v260 = v259 + v257;
    v261 = v247 + v260 > 0xFFFFFFFFFFFFFFD2;
    v573 = __CFADD__(v247, v260);
    v262 = v247 + v260;
    if (v573)
      v261 = 1;
    if (v261)
      v263 = v23;
    else
      v263 = 0;
    v264 = v263 + v262;
    v265 = 0xD122545C17BA3DF4 * v264;
    v266 = (v264 * (unsigned __int128)0xD122545C17BA3DF4) >> 64;
    v267 = (v266 * (unsigned __int128)(unint64_t)v23) >> 64;
    v268 = v266 * v23;
    v573 = __CFADD__(v268, v265);
    v269 = v268 + v265;
    if (v573)
      v270 = v267 + 1;
    else
      v270 = v267;
    v271 = v270 * v23;
    v272 = v271 + v269 > 0xFFFFFFFFFFFFFFD2;
    v573 = __CFADD__(v271, v269);
    v273 = v271 + v269;
    if (v573 || v272)
      v275 = v23;
    else
      v275 = 0;
    v276 = v275 + v273;
    v277 = 0xC8D34D34D34D34B0 * (v275 + v273);
    STACK[0x3C28] = v276;
    v278 = (v276 * (unsigned __int128)0xC8D34D34D34D34B0) >> 64;
    v279 = (v278 * (unsigned __int128)(unint64_t)v23) >> 64;
    v280 = v278 * v23;
    v573 = __CFADD__(v280, v277);
    v281 = v280 + v277;
    if (v573)
      v282 = v279 + 1;
    else
      v282 = v279;
    v283 = v282 * v23;
    v284 = v283 + v281 > 0xFFFFFFFFFFFFFFD2;
    v573 = __CFADD__(v283, v281);
    v285 = v283 + v281;
    if (v573 || v284)
      v287 = v23;
    else
      v287 = 0;
    v288 = v287 + v285;
    if (v287 + v285 >= 0xFFFFFFFFFFFFFFCBLL)
      v289 = v19;
    else
      v289 = 0;
    v290 = v289 + v288;
    v291 = 60480 * v290;
    v292 = ((v290 * (unsigned __int128)0xEC40uLL) >> 64) * (unint64_t)v19;
    v573 = __CFADD__(v292, v291);
    v293 = v292 + v291;
    if (v573)
      v294 = v19;
    else
      v294 = 0;
    v295 = v294 + v293;
    v296 = __CFADD__(v294, v293) || v294 + v293 > 0xFFFFFFFFFFFFFFCALL;
    if (v195 >= 0xFFFFFFFFFFFFFFD9)
      v297 = v20;
    else
      v297 = 0;
    v298 = v297 + v195;
    v299 = 1116288 * v298;
    v300 = ((v298 * (unsigned __int128)0x110880uLL) >> 64) * (unint64_t)v20;
    v573 = __CFADD__(v300, v299);
    v301 = v300 + v299;
    if (v573)
      v302 = v20;
    else
      v302 = 0;
    v303 = v302 + v301 > 0xFFFFFFFFFFFFFFD8;
    v573 = __CFADD__(v302, v301);
    v304 = v302 + v301;
    v305 = v573 || v303;
    if (v124 >= 0xFFFFFFFFFFFFFFD9)
      v306 = v20;
    else
      v306 = 0;
    v307 = v306 + v124;
    v308 = 881280 * v307;
    v309 = ((v307 * (unsigned __int128)0xD7280uLL) >> 64) * (unint64_t)v20;
    if (v187 >= 0xFFFFFFFFFFFFFFD9)
      v310 = v20;
    else
      v310 = 0;
    v573 = __CFADD__(v309, v308);
    v311 = v309 + v308;
    v312 = v310 + v187;
    v313 = 930240 * (v310 + v187);
    if (v573)
      v314 = v20;
    else
      v314 = 0;
    v573 = __CFADD__(v314, v311);
    v315 = v314 + v311;
    v316 = v573;
    v317 = (v312 * (unsigned __int128)0xE31C0uLL) >> 64;
    if (v315 > 0xFFFFFFFFFFFFFFD8)
      v316 = 1;
    if (v316)
      v318 = v20;
    else
      v318 = 0;
    v319 = v318 + v315;
    v320 = v317 * (unint64_t)v20;
    if (v319 >= 0xFFFFFFFFFFFFFFD9)
      v321 = v20;
    else
      v321 = 0;
    v573 = __CFADD__(v320, v313);
    v322 = v320 + v313;
    v323 = v321 + v319;
    if (v573)
      v324 = v20;
    else
      v324 = 0;
    v573 = __CFADD__(v324, v322);
    v325 = v324 + v322;
    v326 = v573;
    if (v325 > 0xFFFFFFFFFFFFFFD8)
      v326 = 1;
    if (v326)
      v327 = v20;
    else
      v327 = 0;
    v328 = v325 + v323 + v327;
    if (v328 > 0xFFFFFFFFFFFFFFD8 || v323 > v328)
      v330 = v20;
    else
      v330 = 0;
    if (v100 >= 0xFFFFFFFFFFFFFFD9)
      v331 = v20;
    else
      v331 = 0;
    v332 = v331 + v100;
    v333 = 984960 * v332;
    v334 = ((v332 * (unsigned __int128)0xF0780uLL) >> 64) * (unint64_t)v20;
    v335 = v330 + v328;
    v336 = v334 + v333;
    if (__CFADD__(v334, v333))
      v337 = v20;
    else
      v337 = 0;
    v573 = __CFADD__(v337, v336);
    v338 = v337 + v336;
    v339 = v573;
    if (v338 > 0xFFFFFFFFFFFFFFD8)
      v339 = 1;
    if (v339)
      v340 = v20;
    else
      v340 = 0;
    v341 = v335 + v338 + v340;
    if (v341 < v335 || v341 > 0xFFFFFFFFFFFFFFD8)
      v343 = v20;
    else
      v343 = 0;
    v344 = v343 + v341;
    if (v305)
      v345 = v20;
    else
      v345 = 0;
    v346 = v345 + v304;
    v573 = __CFADD__(v346, v344);
    v347 = v346 + v344;
    v348 = v573;
    if (v347 > 0xFFFFFFFFFFFFFFD8)
      v348 = 1;
    if (v58 >= 0xFFFFFFFFFFFFFFD9)
      v349 = v20;
    else
      v349 = 0;
    v350 = v349 + v58;
    v351 = 1395360 * v350;
    v2628 = v348 == 0;
    v352 = ((v350 * (unsigned __int128)0x154AA0uLL) >> 64) * (unint64_t)v20;
    if (v2628)
      v353 = 0;
    else
      v353 = v20;
    v573 = __CFADD__(v352, v351);
    v354 = v352 + v351;
    v355 = v353 + v347;
    if (v573)
      v356 = v20;
    else
      v356 = 0;
    v573 = __CFADD__(v356, v354);
    v357 = v356 + v354;
    v358 = v573;
    if (v357 > 0xFFFFFFFFFFFFFFD8)
      v358 = 1;
    if (v358)
      v359 = v20;
    else
      v359 = 0;
    v360 = v359 + v357;
    v361 = v360 + v355 > 0xFFFFFFFFFFFFFFD8;
    v573 = __CFADD__(v360, v355);
    v362 = v360 + v355;
    if (v573 || v361)
      v364 = v20;
    else
      v364 = 0;
    v365 = v364 + v362;
    v366 = 0x40685A60ABFE0A21 * v365;
    v367 = (v365 * (unsigned __int128)0x40685A60ABFE0A21uLL) >> 64;
    v368 = (v367 * (unsigned __int128)(unint64_t)v20) >> 64;
    v369 = v367 * v20;
    v573 = __CFADD__(v369, v366);
    v370 = v369 + v366;
    if (v573)
      v371 = v368 + 1;
    else
      v371 = v368;
    v372 = v371 * v20;
    v373 = (unint64_t)(v372 + v370) > 0xFFFFFFFFFFFFFFD8;
    v573 = __CFADD__(v372, v370);
    v374 = v372 + v370;
    v375 = v25 * a5;
    v376 = (v25 * (unsigned __int128)a5) >> 64;
    v377 = (v376 * (unsigned __int128)(unint64_t)v20) >> 64;
    v378 = v376 * v20;
    if (v573)
      v373 = 1;
    v573 = __CFADD__(v378, v375);
    v379 = v378 + v375;
    if (v573)
      v380 = v377 + 1;
    else
      v380 = v377;
    v381 = v380 * v20;
    v573 = __CFADD__(v381, v379);
    v382 = v381 + v379;
    v383 = v573;
    if (v382 > 0xFFFFFFFFFFFFFFD8)
      v383 = 1;
    if (v383)
      v384 = v20;
    else
      v384 = 0;
    if (v373)
      v385 = v20;
    else
      v385 = 0;
    v386 = v385 + v374;
    v387 = v384 + v382;
    v388 = v387 + v386 > 0xFFFFFFFFFFFFFFD8;
    v573 = __CFADD__(v387, v386);
    v389 = v387 + v386;
    if (v573 || v388)
      v391 = v20;
    else
      v391 = 0;
    v392 = v391 + v389;
    v393 = 0x68180B91CEB03F68 * v392;
    v394 = (v392 * (unsigned __int128)0x68180B91CEB03F68uLL) >> 64;
    v395 = (v394 * (unsigned __int128)(unint64_t)v20) >> 64;
    v396 = v394 * v20;
    v573 = __CFADD__(v396, v393);
    v397 = v396 + v393;
    if (v573)
      v398 = v395 + 1;
    else
      v398 = v395;
    v399 = v398 * v20;
    v400 = (unint64_t)(v399 + v397) > 0xFFFFFFFFFFFFFFD8;
    v573 = __CFADD__(v399, v397);
    v401 = v399 + v397;
    if (v573 || v400)
      v403 = v20;
    else
      v403 = 0;
    v404 = v403 + v401;
    STACK[0x3C68] = v403 + v401;
    v405 = ((unint64_t)(v403 + v401) * (unsigned __int128)0x56433B79890CEDD9uLL) >> 64;
    v406 = (v405 * (unsigned __int128)(unint64_t)v20) >> 64;
    v407 = v405 * v20;
    v408 = v407 + 0x56433B79890CEDD9 * v404;
    if (__CFADD__(v407, 0x56433B79890CEDD9 * v404))
      v409 = v406 + 1;
    else
      v409 = v406;
    v410 = v409 * v20;
    v573 = __CFADD__(v410, v408);
    v411 = v410 + v408;
    v412 = v573;
    if (v411 > 0xFFFFFFFFFFFFFFD8)
      v412 = 1;
    if (v412)
      v413 = v20;
    else
      v413 = 0;
    v414 = v413 + v411;
    if (v413 + v411 >= 0xFFFFFFFFFFFFFFCBLL)
      v415 = v19;
    else
      v415 = 0;
    v416 = v415 + v414;
    v417 = 34560 * v416;
    v418 = ((v416 * (unsigned __int128)0x8700uLL) >> 64) * (unint64_t)v19;
    v573 = __CFADD__(v418, v417);
    v419 = v418 + v417;
    if (v573)
      v420 = v19;
    else
      v420 = 0;
    v421 = v420 + v419;
    v422 = __CFADD__(v420, v419) || v420 + v419 > 0xFFFFFFFFFFFFFFCALL;
    if (v58 >= 0xFFFFFFFFFFFFFFDFLL)
      v423 = 33;
    else
      v423 = 0;
    v424 = v423 + v58;
    v425 = 645120 * v424;
    v426 = (__PAIR128__(32, 645120) * v424) >> 64;
    v573 = __CFADD__(v426, v425);
    v427 = v426 + v425;
    if (v573)
      v428 = 33;
    else
      v428 = 0;
    v429 = (unint64_t)(v428 + v427) > 0xFFFFFFFFFFFFFFDELL;
    v573 = __CFADD__(v428, v427);
    v430 = v428 + v427;
    v431 = v573 || v429;
    if (v100 >= 0xFFFFFFFFFFFFFFDFLL)
      v432 = 33;
    else
      v432 = 0;
    v433 = v432 + v100;
    v434 = 414720 * v433;
    v435 = (__PAIR128__(32, 414720) * v433) >> 64;
    v573 = __CFADD__(v435, v434);
    v436 = v435 + v434;
    if (v573)
      v437 = 33;
    else
      v437 = 0;
    v438 = (unint64_t)(v437 + v436) > 0xFFFFFFFFFFFFFFDELL;
    v573 = __CFADD__(v437, v436);
    v439 = v437 + v436;
    v440 = v573 || v438;
    if (v187 >= 0xFFFFFFFFFFFFFFDFLL)
      v441 = 33;
    else
      v441 = 0;
    v442 = v441 + v187;
    v443 = 387072 * v442;
    v444 = (__PAIR128__(32, 387072) * v442) >> 64;
    v573 = __CFADD__(v444, v443);
    v445 = v444 + v443;
    if (v573)
      v446 = 33;
    else
      v446 = 0;
    v447 = (unint64_t)(v446 + v445) > 0xFFFFFFFFFFFFFFDELL;
    v573 = __CFADD__(v446, v445);
    v448 = v446 + v445;
    v449 = v573 || v447;
    if (v124 >= 0xFFFFFFFFFFFFFFDFLL)
      v450 = 33;
    else
      v450 = 0;
    v451 = v450 + v124;
    v452 = 362880 * v451;
    v453 = (__PAIR128__(32, 362880) * v451) >> 64;
    v573 = __CFADD__(v453, v452);
    v454 = v453 + v452;
    if (v573)
      v455 = 33;
    else
      v455 = 0;
    v573 = __CFADD__(v455, v454);
    v456 = v455 + v454;
    v457 = v573;
    if (v456 > 0xFFFFFFFFFFFFFFDELL)
      v457 = 1;
    if (v457)
      v458 = 33;
    else
      v458 = 0;
    v459 = v458 + v456;
    if (v459 >= 0xFFFFFFFFFFFFFFDFLL)
      v460 = 33;
    else
      v460 = 0;
    v461 = v460 + v459;
    if (v449)
      v462 = 33;
    else
      v462 = 0;
    v463 = v448 + v461 + v462;
    if (v461 > v463 || v463 > 0xFFFFFFFFFFFFFFDELL)
      v465 = 33;
    else
      v465 = 0;
    v466 = v465 + v463;
    if (v195 >= 0xFFFFFFFFFFFFFFDFLL)
      v467 = 33;
    else
      v467 = 0;
    v468 = v467 + v195;
    v469 = 483840 * v468;
    v470 = (v468 * (unsigned __int128)0x76200uLL) >> 64;
    if (v440)
      v471 = 33;
    else
      v471 = 0;
    v472 = 33 * v470;
    v473 = v466 + v439 + v471;
    if (v466 > v473 || v473 > 0xFFFFFFFFFFFFFFDELL)
      v475 = 33;
    else
      v475 = 0;
    v476 = v472 + v469;
    v477 = v475 + v473;
    if (__CFADD__(v472, v469))
      v478 = 33;
    else
      v478 = 0;
    v573 = __CFADD__(v478, v476);
    v479 = v478 + v476;
    v480 = v573;
    if (v479 > 0xFFFFFFFFFFFFFFDELL)
      v480 = 1;
    if (v480)
      v481 = 33;
    else
      v481 = 0;
    v482 = v481 + v479;
    v483 = v482 + v477 > 0xFFFFFFFFFFFFFFDELL;
    v573 = __CFADD__(v482, v477);
    v484 = v482 + v477;
    v485 = STACK[0x3BC8] * v26;
    v486 = (STACK[0x3BC8] * (unsigned __int128)v26) >> 64;
    v487 = (v486 * (unsigned __int128)0x21uLL) >> 64;
    v488 = 33 * v486;
    if (v573)
      v483 = 1;
    v573 = __CFADD__(v488, v485);
    v489 = v488 + v485;
    if (v573)
      v490 = v487 + 1;
    else
      v490 = v487;
    v491 = 33 * v490;
    v492 = v491 + v489 > 0xFFFFFFFFFFFFFFDELL;
    v573 = __CFADD__(v491, v489);
    v493 = v491 + v489;
    if (v573 || v492)
      v495 = 33;
    else
      v495 = 0;
    v496 = v495 + v493;
    if (v483)
      v497 = 33;
    else
      v497 = 0;
    v498 = v497 + v484;
    if (v431)
      v499 = 33;
    else
      v499 = 0;
    v500 = v499 + v430;
    v573 = __CFADD__(v500, v498);
    v501 = v500 + v498;
    v502 = v573;
    if (v501 > 0xFFFFFFFFFFFFFFDELL)
      v502 = 1;
    if (v502)
      v503 = 33;
    else
      v503 = 0;
    v504 = v503 + v501;
    v505 = 0xD2087261F2F13621 * v504;
    v506 = (((v504 * (unsigned __int128)0xD2087261F2F13621) >> 64) * 0x21) >> 64;
    v507 = (__PAIR128__(32, 0xD2087261F2F13621) * v504) >> 64;
    v573 = __CFADD__(v507, v505);
    v508 = v507 + v505;
    if (v573)
      v509 = v506 + 1;
    else
      v509 = v506;
    v510 = 33 * v509;
    v573 = __CFADD__(v510, v508);
    v511 = v510 + v508;
    v512 = v573;
    if (v511 > 0xFFFFFFFFFFFFFFDELL)
      v512 = 1;
    if (v512)
      v513 = 33;
    else
      v513 = 0;
    v514 = v513 + v511;
    v573 = __CFADD__(v496, v514);
    v515 = v496 + v514;
    v516 = v573;
    if (v515 > 0xFFFFFFFFFFFFFFDELL)
      v516 = 1;
    if (v516)
      v517 = 33;
    else
      v517 = 0;
    v518 = v517 + v515;
    v519 = 0xBF751FE036E6FC90 * v518;
    v520 = (((v518 * (unsigned __int128)0xBF751FE036E6FC90) >> 64) * 0x21) >> 64;
    v521 = (__PAIR128__(32, 0xBF751FE036E6FC90) * v518) >> 64;
    v573 = __CFADD__(v521, v519);
    v522 = v521 + v519;
    if (v573)
      v523 = v520 + 1;
    else
      v523 = v520;
    v524 = 33 * v523;
    v525 = (unint64_t)(v524 + v522) > 0xFFFFFFFFFFFFFFDELL;
    v573 = __CFADD__(v524, v522);
    v526 = v524 + v522;
    if (v573 || v525)
      v528 = 33;
    else
      v528 = 0;
    v529 = v528 + v526;
    STACK[0x3C20] = v528 + v526;
    v530 = ((unint64_t)(v528 + v526) * (unsigned __int128)0x8696596596596585) >> 64;
    v531 = (v530 * (unsigned __int128)0x21uLL) >> 64;
    v530 *= 33;
    v532 = v530 - 0x7969A69A69A69A7BLL * v529;
    if (__CFADD__(v530, 0x8696596596596585 * v529))
      v533 = v531 + 1;
    else
      v533 = v531;
    v534 = 33 * v533;
    v535 = v534 + v532 > 0xFFFFFFFFFFFFFFDELL;
    v573 = __CFADD__(v534, v532);
    v536 = v534 + v532;
    if (v573 || v535)
      v538 = 33;
    else
      v538 = 0;
    v539 = v538 + v536;
    if (v538 + v536 >= 0xFFFFFFFFFFFFFFCBLL)
      v540 = v19;
    else
      v540 = 0;
    v541 = v540 + v539;
    v542 = 24192 * v541;
    v543 = ((v541 * (unsigned __int128)0x5E80uLL) >> 64) * (unint64_t)v19;
    v573 = __CFADD__(v543, v542);
    v544 = v543 + v542;
    if (v573)
      v545 = v19;
    else
      v545 = 0;
    v546 = v545 + v544 > 0xFFFFFFFFFFFFFFCALL;
    v573 = __CFADD__(v545, v544);
    v547 = v545 + v544;
    v548 = v573 || v546;
    if (v187 >= 0xFFFFFFFFFFFFFFEFLL)
      v549 = v24;
    else
      v549 = 0;
    v550 = v549 + v187;
    v551 = 3 * v550;
    v552 = (__PAIR128__(16, 3072) * v550) >> 64;
    v573 = __CFADD__(v552, v551 << 10);
    v553 = v552 + (v551 << 10);
    if (v573)
      v554 = v24;
    else
      v554 = 0;
    v555 = (unint64_t)(v554 + v553) > 0xFFFFFFFFFFFFFFEELL;
    v573 = __CFADD__(v554, v553);
    v556 = v554 + v553;
    v557 = v573 || v555;
    if (v124 >= 0xFFFFFFFFFFFFFFEFLL)
      v558 = v24;
    else
      v558 = 0;
    v559 = v558 + v124;
    v560 = 2688 * v559;
    v561 = (__PAIR128__(16, 2688) * v559) >> 64;
    v573 = __CFADD__(v561, v560);
    v562 = v561 + v560;
    if (v573)
      v563 = v24;
    else
      v563 = 0;
    v564 = (unint64_t)(v563 + v562) > 0xFFFFFFFFFFFFFFEELL;
    v573 = __CFADD__(v563, v562);
    v565 = v563 + v562;
    if (v573 || v564)
      v567 = v24;
    else
      v567 = 0;
    v568 = v567 + v565;
    if (v568 >= 0xFFFFFFFFFFFFFFEFLL)
      v569 = v24;
    else
      v569 = 0;
    v570 = v569 + v568;
    if (v557)
      v571 = v24;
    else
      v571 = 0;
    v572 = v556 + v570 + v571;
    v573 = v572 <= 0xFFFFFFFFFFFFFFEELL && v572 >= v570;
    if (v573)
      v574 = 0;
    else
      v574 = v24;
    if (v100 >= 0xFFFFFFFFFFFFFFEFLL)
      v575 = v24;
    else
      v575 = 0;
    v576 = v575 + v100;
    v577 = (v576 * (unsigned __int128)0xE00uLL) >> 64;
    v578 = v574 + v572;
    v576 *= 3584;
    v573 = __CFADD__(17 * v577, v576);
    v579 = 17 * v577 + v576;
    if (v573)
      v580 = v24;
    else
      v580 = 0;
    v581 = (v580 ^ v579) + 2 * (v580 & (17 * v577));
    if (v581 <= 0xFFFFFFFFFFFFFFEELL && v581 >= v579)
      v583 = 0;
    else
      v583 = v24;
    v584 = v581 + v583 + v578;
    if (v195 >= 0xFFFFFFFFFFFFFFEFLL)
      v585 = v24;
    else
      v585 = 0;
    v586 = v584 < v578 || v584 > 0xFFFFFFFFFFFFFFEELL;
    v587 = v585 + v195;
    v588 = 5376 * (v585 + v195);
    v589 = (v587 * (unsigned __int128)0x1500uLL) >> 64;
    if (v586)
      v590 = v24;
    else
      v590 = 0;
    v591 = v590 + v584;
    v592 = 17 * v589;
    v573 = __CFADD__(v592, v588);
    v593 = v592 + v588;
    if (v573)
      v594 = v24;
    else
      v594 = 0;
    v573 = __CFADD__(v594, v593);
    v595 = v594 + v593;
    v596 = v573;
    if (v595 > 0xFFFFFFFFFFFFFFEELL)
      v596 = 1;
    if (v596)
      v597 = v24;
    else
      v597 = 0;
    v598 = v597 + v595;
    v573 = __CFADD__(v598, v591);
    v599 = v598 + v591;
    v600 = v573;
    if (v599 > 0xFFFFFFFFFFFFFFEELL)
      v600 = 1;
    if (v58 >= 0xFFFFFFFFFFFFFFEFLL)
      v601 = v24;
    else
      v601 = 0;
    v602 = v601 + v58;
    v2628 = v600 == 0;
    v603 = 21504 * v602;
    v604 = (__PAIR128__(16, 21504) * v602) >> 64;
    if (v2628)
      v605 = 0;
    else
      v605 = v24;
    v573 = __CFADD__(v604, v603);
    v606 = v604 + v603;
    if (v573)
      v607 = v24;
    else
      v607 = 0;
    v573 = __CFADD__(v607, v606);
    v608 = v607 + v606;
    v609 = v573;
    v610 = v605 + v599;
    if (v608 > 0xFFFFFFFFFFFFFFEELL)
      v609 = 1;
    if (v609)
      v611 = v24;
    else
      v611 = 0;
    v612 = v611 + v608;
    v573 = __CFADD__(v612, v610);
    v613 = v612 + v610;
    v614 = v573;
    if (v613 > 0xFFFFFFFFFFFFFFEELL)
      v614 = 1;
    if (v614)
      v615 = v24;
    else
      v615 = 0;
    v616 = v615 + v613;
    v617 = 0xBCE0B40AAD3903CALL * v616;
    v618 = (((v616 * (unsigned __int128)0xBCE0B40AAD3903CALL) >> 64) * (unint64_t)v24) >> 64;
    v619 = (__PAIR128__(16, 0xBCE0B40AAD3903CALL) * v616) >> 64;
    v573 = __CFADD__(v619, v617);
    v620 = v619 + v617;
    if (v573)
      v621 = v618 + 1;
    else
      v621 = v618;
    v622 = 17 * v621;
    v623 = (unint64_t)(v622 + v620) > 0xFFFFFFFFFFFFFFEELL;
    v573 = __CFADD__(v622, v620);
    v624 = v622 + v620;
    v625 = STACK[0x3BD0] * STACK[0x3B70];
    v626 = STACK[0x3BD0];
    v627 = (__PAIR128__(16, STACK[0x3B70]) * v626) >> 64;
    if (v573)
      v623 = 1;
    v573 = __CFADD__(v627, v625);
    v628 = v627 + v625;
    if (v573)
      v629 = ((((v626 * (unsigned __int128)STACK[0x3B70]) >> 64) * (unint64_t)v24) >> 64) + 1;
    else
      v629 = (((v626 * (unsigned __int128)STACK[0x3B70]) >> 64) * (unint64_t)v24) >> 64;
    v630 = 17 * v629;
    v631 = (unint64_t)(v630 + v628) > 0xFFFFFFFFFFFFFFEELL;
    v573 = __CFADD__(v630, v628);
    v632 = v630 + v628;
    if (v573 || v631)
      v634 = v24;
    else
      v634 = 0;
    v635 = v634 + v632;
    if (v623)
      v636 = v24;
    else
      v636 = 0;
    v637 = v636 + v624;
    v638 = (unint64_t)(v635 + v637) > 0xFFFFFFFFFFFFFFEELL;
    v573 = __CFADD__(v635, v637);
    v639 = v635 + v637;
    if (v573 || v638)
      v641 = v24;
    else
      v641 = 0;
    v642 = v641 + v639;
    v643 = 0x260186186186185FLL * v642;
    v644 = (((v642 * (unsigned __int128)0x260186186186185FuLL) >> 64) * (unint64_t)v24) >> 64;
    v645 = (__PAIR128__(16, 0x260186186186185FLL) * v642) >> 64;
    v573 = __CFADD__(v645, v643);
    v646 = v645 + v643;
    if (v573)
      v647 = v644 + 1;
    else
      v647 = v644;
    v648 = 17 * v647;
    v649 = (unint64_t)(v648 + v646) > 0xFFFFFFFFFFFFFFEELL;
    v573 = __CFADD__(v648, v646);
    v650 = v648 + v646;
    if (v573 || v649)
      v652 = v24;
    else
      v652 = 0;
    v653 = v652 + v650;
    v654 = 0x500038BDBA674958 * v653;
    STACK[0x3C78] = v653;
    v655 = (((v653 * (unsigned __int128)0x500038BDBA674958uLL) >> 64) * (unint64_t)v24) >> 64;
    v656 = (__PAIR128__(16, 0x500038BDBA674958) * v653) >> 64;
    v573 = __CFADD__(v656, v654);
    v657 = v656 + v654;
    if (v573)
      v658 = v655 + 1;
    else
      v658 = v655;
    v659 = 17 * v658;
    v660 = (unint64_t)(v659 + v657) > 0xFFFFFFFFFFFFFFEELL;
    v573 = __CFADD__(v659, v657);
    v661 = v659 + v657;
    if (v573 || v660)
      v663 = v24;
    else
      v663 = 0;
    v664 = v663 + v661;
    if ((unint64_t)(v663 + v661) >= 0xFFFFFFFFFFFFFFCBLL)
      v665 = v19;
    else
      v665 = 0;
    v666 = v665 + v664;
    v667 = 13440 * v666;
    v668 = ((v666 * (unsigned __int128)0x3480uLL) >> 64) * (unint64_t)v19;
    v573 = __CFADD__(v668, v667);
    v669 = v668 + v667;
    if (v573)
      v670 = v19;
    else
      v670 = 0;
    v671 = v670 + v669 > 0xFFFFFFFFFFFFFFCALL;
    v573 = __CFADD__(v670, v669);
    v672 = v670 + v669;
    if (v573 || v671)
      v674 = v19;
    else
      v674 = 0;
    v675 = v674 + v672;
    if (v675 >= 0xFFFFFFFFFFFFFFCBLL)
      v676 = v19;
    else
      v676 = 0;
    v677 = v676 + v675;
    if (v548)
      v678 = v19;
    else
      v678 = 0;
    v679 = v678 + v547;
    v680 = v679 + v677 > 0xFFFFFFFFFFFFFFCALL;
    v573 = __CFADD__(v679, v677);
    v681 = v679 + v677;
    if (v573 || v680)
      v683 = v19;
    else
      v683 = 0;
    v684 = v683 + v681;
    if (v422)
      v685 = v19;
    else
      v685 = 0;
    v686 = v685 + v421;
    v687 = v686 + v684 > 0xFFFFFFFFFFFFFFCALL;
    v573 = __CFADD__(v686, v684);
    v688 = v686 + v684;
    if (v573 || v687)
      v690 = v19;
    else
      v690 = 0;
    v691 = v690 + v688;
    if (v296)
      v692 = v19;
    else
      v692 = 0;
    v693 = v692 + v295;
    v694 = v693 + v691 > 0xFFFFFFFFFFFFFFCALL;
    v573 = __CFADD__(v693, v691);
    v695 = v693 + v691;
    v696 = v573 || v694;
    if (v58 >= 0xFFFFFFFFFFFFFFD1)
      v697 = v22;
    else
      v697 = 0;
    v698 = v697 + v58;
    v699 = 3230304 * v698;
    v700 = ((v698 * (unsigned __int128)0x314A60uLL) >> 64) * (unint64_t)v22;
    v573 = __CFADD__(v700, v699);
    v701 = v700 + v699;
    if (v573)
      v702 = v22;
    else
      v702 = 0;
    v703 = v702 + v701 > 0xFFFFFFFFFFFFFFD0;
    v573 = __CFADD__(v702, v701);
    v704 = v702 + v701;
    if (v573)
      v703 = 1;
    if (v100 >= 0xFFFFFFFFFFFFFFD1)
      v705 = v22;
    else
      v705 = 0;
    v706 = v705 + v100;
    v707 = 2461184 * v706;
    v708 = ((v706 * (unsigned __int128)0x258E00uLL) >> 64) * (unint64_t)v22;
    v573 = __CFADD__(v708, v707);
    v709 = v708 + v707;
    if (v573)
      v710 = v22;
    else
      v710 = 0;
    v711 = v710 + v709 > 0xFFFFFFFFFFFFFFD0;
    v573 = __CFADD__(v710, v709);
    v712 = v710 + v709;
    v713 = v573 || v711;
    if (v124 >= 0xFFFFFFFFFFFFFFD1)
      v714 = v22;
    else
      v714 = 0;
    v715 = v714 + v124;
    v716 = 2247168 * v715;
    v717 = ((v715 * (unsigned __int128)0x224A00uLL) >> 64) * (unint64_t)v22;
    v573 = __CFADD__(v717, v716);
    v718 = v717 + v716;
    if (v573)
      v719 = v22;
    else
      v719 = 0;
    v720 = v719 + v718 > 0xFFFFFFFFFFFFFFD0;
    v573 = __CFADD__(v719, v718);
    v721 = v719 + v718;
    if (v573 || v720)
      v723 = v22;
    else
      v723 = 0;
    v724 = v723 + v721;
    if (v187 >= 0xFFFFFFFFFFFFFFD1)
      v725 = v22;
    else
      v725 = 0;
    v726 = v725 + v187;
    v727 = 2349312 * v726;
    v728 = ((v726 * (unsigned __int128)0x23D900uLL) >> 64) * (unint64_t)v22;
    if (v724 >= 0xFFFFFFFFFFFFFFD1)
      v729 = v22;
    else
      v729 = 0;
    v730 = v729 + v724;
    v573 = __CFADD__(v728, v727);
    v731 = v728 + v727;
    if (v573)
      v732 = v22;
    else
      v732 = 0;
    v573 = __CFADD__(v732, v731);
    v733 = v732 + v731;
    v734 = v573;
    if (v733 > 0xFFFFFFFFFFFFFFD0)
      v734 = 1;
    if (v734)
      v735 = v22;
    else
      v735 = 0;
    v736 = v733 + v730 + v735;
    if (v730 > v736 || v736 > 0xFFFFFFFFFFFFFFD0)
      v738 = v22;
    else
      v738 = 0;
    v739 = v738 + v736;
    if (v713)
      v740 = v22;
    else
      v740 = 0;
    v741 = v739 + v712 + v740;
    if (v741 > 0xFFFFFFFFFFFFFFD0 || v739 > v741)
      v743 = v22;
    else
      v743 = 0;
    v744 = v743 + v741;
    if (v195 >= 0xFFFFFFFFFFFFFFD1)
      v745 = v22;
    else
      v745 = 0;
    v746 = v745 + v195;
    v747 = 2720256 * v746;
    v748 = ((v746 * (unsigned __int128)0x298200uLL) >> 64) * (unint64_t)v22;
    v573 = __CFADD__(v748, v747);
    v749 = v748 + v747;
    if (v573)
      v750 = v22;
    else
      v750 = 0;
    v573 = __CFADD__(v750, v749);
    v751 = v750 + v749;
    v752 = v573;
    if (v751 > 0xFFFFFFFFFFFFFFD0)
      v752 = 1;
    if (v752)
      v753 = v22;
    else
      v753 = 0;
    v754 = v753 + v751;
    v755 = v754 + v744 > 0xFFFFFFFFFFFFFFD0;
    v573 = __CFADD__(v754, v744);
    v756 = v754 + v744;
    v757 = STACK[0x3AC8] * STACK[0x3B68];
    v758 = (STACK[0x3AC8] * (unsigned __int128)STACK[0x3B68]) >> 64;
    v759 = (v758 * (unsigned __int128)(unint64_t)v22) >> 64;
    v760 = v758 * v22;
    if (v573)
      v755 = 1;
    v573 = __CFADD__(v760, v757);
    v761 = v760 + v757;
    if (v573)
      v762 = v759 + 1;
    else
      v762 = v759;
    v763 = v762 * v22;
    v764 = v763 + v761 > 0xFFFFFFFFFFFFFFD0;
    v573 = __CFADD__(v763, v761);
    v765 = v763 + v761;
    if (v573 || v764)
      v767 = v22;
    else
      v767 = 0;
    if (v755)
      v768 = v22;
    else
      v768 = 0;
    v769 = v768 + v756;
    if (v703)
      v770 = v22;
    else
      v770 = 0;
    v771 = v770 + v704;
    v573 = __CFADD__(v771, v769);
    v772 = v771 + v769;
    v773 = v573;
    if (v772 > 0xFFFFFFFFFFFFFFD0)
      v773 = 1;
    if (v773)
      v774 = v22;
    else
      v774 = 0;
    v775 = v774 + v772;
    v776 = 0xF9CF898C924065FBLL * v775;
    v777 = (v775 * (unsigned __int128)0xF9CF898C924065FBLL) >> 64;
    v778 = (v777 * (unsigned __int128)(unint64_t)v22) >> 64;
    v779 = v777 * v22;
    v573 = __CFADD__(v779, v776);
    v780 = v779 + v776;
    if (v573)
      v781 = v778 + 1;
    else
      v781 = v778;
    v782 = v781 * v22;
    v573 = __CFADD__(v782, v780);
    v783 = v782 + v780;
    v784 = v573;
    if (v783 > 0xFFFFFFFFFFFFFFD0)
      v784 = 1;
    if (v784)
      v785 = v22;
    else
      v785 = 0;
    v786 = v785 + v783;
    v573 = __CFADD__(v767 + v765, v786);
    v787 = v767 + v765 + v786;
    v788 = v573;
    if (v787 > 0xFFFFFFFFFFFFFFD0)
      v788 = 1;
    if (v788)
      v789 = v22;
    else
      v789 = 0;
    v790 = v789 + v787;
    v791 = 0x5C1DC82ED83E4DC6 * v790;
    v792 = (v790 * (unsigned __int128)0x5C1DC82ED83E4DC6uLL) >> 64;
    v793 = (v792 * (unsigned __int128)(unint64_t)v22) >> 64;
    v794 = v792 * v22;
    v573 = __CFADD__(v794, v791);
    v795 = v794 + v791;
    if (v573)
      v796 = v793 + 1;
    else
      v796 = v793;
    v797 = v796 * v22;
    v573 = __CFADD__(v797, v795);
    v798 = v797 + v795;
    v799 = v573;
    if (v798 > 0xFFFFFFFFFFFFFFD0)
      v799 = 1;
    if (v799)
      v800 = v22;
    else
      v800 = 0;
    v801 = v800 + v798;
    v802 = 0xA52E52E52E52E51 * v801;
    STACK[0x3C08] = v801;
    v803 = (v801 * (unsigned __int128)0xA52E52E52E52E51uLL) >> 64;
    v804 = (v803 * (unsigned __int128)(unint64_t)v22) >> 64;
    v805 = v803 * v22;
    v573 = __CFADD__(v805, v802);
    v806 = v805 + v802;
    if (v573)
      v807 = v804 + 1;
    else
      v807 = v804;
    v808 = v807 * v22;
    v573 = __CFADD__(v808, v806);
    v809 = v808 + v806;
    v810 = v573;
    if (v809 > 0xFFFFFFFFFFFFFFD0)
      v810 = 1;
    if (v810)
      v811 = v22;
    else
      v811 = 0;
    v812 = v811 + v809;
    if (v811 + v809 >= 0xFFFFFFFFFFFFFFCBLL)
      v813 = v19;
    else
      v813 = 0;
    v814 = v813 + v812;
    v815 = 80640 * v814;
    v816 = (v814 * (unsigned __int128)0x13B00uLL) >> 64;
    if (v696)
      v817 = v19;
    else
      v817 = 0;
    v818 = v816 * (unint64_t)v19;
    v573 = __CFADD__(v818, v815);
    v819 = v818 + v815;
    if (v573)
      v820 = v19;
    else
      v820 = 0;
    v573 = __CFADD__(v820, v819);
    v821 = v820 + v819;
    v822 = v573;
    v823 = v817 + v695;
    if (v821 > 0xFFFFFFFFFFFFFFCALL)
      v824 = 1;
    else
      v824 = v822;
    if (v824)
      v825 = v19;
    else
      v825 = 0;
    v826 = v825 + v821;
    v827 = v826 + v823 > 0xFFFFFFFFFFFFFFCALL;
    v573 = __CFADD__(v826, v823);
    v828 = v826 + v823;
    if (v573)
      v827 = 1;
    if (v195 >= 0xFFFFFFFFFFFFFFCBLL)
      v829 = v19;
    else
      v829 = 0;
    v830 = v829 + v195;
    v831 = 4742400 * v830;
    v832 = ((v830 * (unsigned __int128)0x485D00uLL) >> 64) * (unint64_t)v19;
    v573 = __CFADD__(v832, v831);
    v833 = v832 + v831;
    if (v573)
      v834 = v19;
    else
      v834 = 0;
    v835 = v834 + v833 > 0xFFFFFFFFFFFFFFCALL;
    v836 = v834 + v833;
    if (__CFADD__(v834, v833))
      v835 = 1;
    if (v187 >= 0xFFFFFFFFFFFFFFCBLL)
      v837 = v19;
    else
      v837 = 0;
    v838 = v837 + v187;
    v839 = 4173312 * v838;
    v840 = ((v838 * (unsigned __int128)0x3FAE00uLL) >> 64) * (unint64_t)v19;
    v573 = __CFADD__(v840, v839);
    v841 = v840 + v839;
    if (v573)
      v842 = v19;
    else
      v842 = 0;
    v843 = v842 + v841 > 0xFFFFFFFFFFFFFFCALL;
    v573 = __CFADD__(v842, v841);
    v844 = v842 + v841;
    v845 = STACK[0x3BC0] * STACK[0x3B78];
    v846 = (STACK[0x3BC0] * (unsigned __int128)STACK[0x3B78]) >> 64;
    v847 = (v846 * (unsigned __int128)(unint64_t)v19) >> 64;
    v848 = v846 * v19;
    if (v573)
      v843 = 1;
    v573 = __CFADD__(v848, v845);
    v849 = v848 + v845;
    if (v573)
      v850 = v847 + 1;
    else
      v850 = v847;
    v851 = v850 * v19;
    v573 = __CFADD__(v851, v849);
    v852 = v851 + v849;
    v853 = v573;
    if (v852 > 0xFFFFFFFFFFFFFFCALL)
      v853 = 1;
    if (v853)
      v854 = v19;
    else
      v854 = 0;
    v855 = v854 + v852;
    if (v124 >= 0xFFFFFFFFFFFFFFCBLL)
      v856 = v19;
    else
      v856 = 0;
    v857 = v856 + v124;
    v858 = 4012800 * v857;
    v859 = ((v857 * (unsigned __int128)0x3D3B00uLL) >> 64) * (unint64_t)v19;
    v573 = __CFADD__(v859, v858);
    v860 = v859 + v858;
    if (v573)
      v861 = v19;
    else
      v861 = 0;
    v573 = __CFADD__(v861, v860);
    v862 = v861 + v860;
    v863 = v573;
    if (v862 > 0xFFFFFFFFFFFFFFCALL)
      v863 = 1;
    if (v863)
      v864 = v19;
    else
      v864 = 0;
    v865 = v864 + v862;
    if (v865 >= 0xFFFFFFFFFFFFFFCBLL)
      v866 = v19;
    else
      v866 = 0;
    v867 = v866 + v865;
    if (v100 >= 0xFFFFFFFFFFFFFFCBLL)
      v868 = v19;
    else
      v868 = 0;
    v869 = v868 + v100;
    v870 = 4347200 * v869;
    if (v843)
      v871 = v19;
    else
      v871 = 0;
    v872 = v844 + v867 + v871;
    v873 = ((v869 * (unsigned __int128)0x425540uLL) >> 64) * (unint64_t)v19;
    if (v872 > 0xFFFFFFFFFFFFFFCALL || v867 > v872)
      v875 = v19;
    else
      v875 = 0;
    v573 = __CFADD__(v873, v870);
    v876 = v873 + v870;
    v877 = v875 + v872;
    if (v573)
      v878 = v19;
    else
      v878 = 0;
    v573 = __CFADD__(v878, v876);
    v879 = v878 + v876;
    v880 = v573;
    if (v879 > 0xFFFFFFFFFFFFFFCALL)
      v880 = 1;
    if (v880)
      v881 = v19;
    else
      v881 = 0;
    v882 = v877 + v879 + v881;
    if (v882 <= 0xFFFFFFFFFFFFFFCALL && v882 >= v877)
      v884 = 0;
    else
      v884 = v19;
    v885 = v884 + v882;
    if (v835)
      v886 = v19;
    else
      v886 = 0;
    v887 = v886 + v836;
    v573 = __CFADD__(v887, v885);
    v888 = v887 + v885;
    v889 = v573;
    if (v888 > 0xFFFFFFFFFFFFFFCALL)
      v889 = 1;
    if (v889)
      v890 = v19;
    else
      v890 = 0;
    if (v58 >= 0xFFFFFFFFFFFFFFCBLL)
      v891 = v19;
    else
      v891 = 0;
    v892 = v891 + v58;
    v893 = 5491200 * v892;
    v894 = ((v892 * (unsigned __int128)0x53CA00uLL) >> 64) * (unint64_t)v19;
    v895 = v890 + v888;
    v573 = __CFADD__(v894, v893);
    v896 = v894 + v893;
    if (v573)
      v897 = v19;
    else
      v897 = 0;
    v573 = __CFADD__(v897, v896);
    v898 = v897 + v896;
    v899 = v573;
    if (v898 > 0xFFFFFFFFFFFFFFCALL)
      v899 = 1;
    if (v899)
      v900 = v19;
    else
      v900 = 0;
    v901 = v900 + v898;
    v573 = __CFADD__(v901, v895);
    v902 = v901 + v895;
    v903 = v573;
    if (v902 > 0xFFFFFFFFFFFFFFCALL)
      v903 = 1;
    if (v903)
      v904 = v19;
    else
      v904 = 0;
    v905 = v904 + v902;
    v906 = 0xA64A3E2F1B4DE8E6 * v905;
    v907 = (v905 * (unsigned __int128)0xA64A3E2F1B4DE8E6) >> 64;
    v908 = (v907 * (unsigned __int128)(unint64_t)v19) >> 64;
    v909 = v907 * v19;
    v573 = __CFADD__(v909, v906);
    v910 = v909 + v906;
    if (v573)
      v911 = v908 + 1;
    else
      v911 = v908;
    v912 = v911 * v19;
    v573 = __CFADD__(v912, v910);
    v913 = v912 + v910;
    v914 = v573;
    if (v913 > 0xFFFFFFFFFFFFFFCALL)
      v914 = 1;
    if (v914)
      v915 = v19;
    else
      v915 = 0;
    v916 = v915 + v913;
    v573 = __CFADD__(v855, v916);
    v917 = v855 + v916;
    v918 = v573;
    if (v917 > 0xFFFFFFFFFFFFFFCALL)
      v918 = 1;
    if (v918)
      v919 = v19;
    else
      v919 = 0;
    v920 = v919 + v917;
    v921 = 0x59708602BDC08F49 * v920;
    v922 = (v920 * (unsigned __int128)0x59708602BDC08F49uLL) >> 64;
    v923 = (v922 * (unsigned __int128)(unint64_t)v19) >> 64;
    v924 = v922 * v19;
    v573 = __CFADD__(v924, v921);
    v925 = v924 + v921;
    if (v573)
      v926 = v923 + 1;
    else
      v926 = v923;
    v927 = v926 * v19;
    v928 = (unint64_t)(v927 + v925) > 0xFFFFFFFFFFFFFFCALL;
    v573 = __CFADD__(v927, v925);
    v929 = v927 + v925;
    if (v573 || v928)
      v931 = v19;
    else
      v931 = 0;
    v932 = v931 + v929;
    if (v827)
      v933 = v19;
    else
      v933 = 0;
    v934 = v933 + v828;
    STACK[0x3C60] = v932;
    v573 = v934 >= v932;
    v935 = v934 - v932;
    v936 = -53;
    if (v573)
      v936 = 0;
    v937 = v935 + v936;
    v938 = 0xF1A85D307DB285A1 * v937;
    v939 = (v937 * (unsigned __int128)0xF1A85D307DB285A1) >> 64;
    v940 = (v939 * (unsigned __int128)(unint64_t)v19) >> 64;
    v941 = v939 * v19;
    v573 = __CFADD__(v941, v938);
    v942 = v941 + v938;
    if (v573)
      v943 = v940 + 1;
    else
      v943 = v940;
    v944 = v943 * v19;
    v573 = __CFADD__(v944, v942);
    v945 = v944 + v942;
    v946 = v573;
    if (v945 > 0xFFFFFFFFFFFFFFCALL)
      v946 = 1;
    if (v946)
      v947 = v19;
    else
      v947 = 0;
    v948 = v947 + v945;
    if (v947 + v945 >= 0xFFFFFFFFFFFFFFF7)
      v949 = 9;
    else
      v949 = 0;
    v950 = v949 + v948;
    v951 = -7879689 * v950;
    v952 = (((v950 * (unsigned __int128)0xFFFFFFFFFF87C3F7) >> 64) * 9) >> 64;
    v953 = (__PAIR128__(8, -7879689) * v950) >> 64;
    v573 = __CFADD__(v953, v951);
    v954 = v953 + v951;
    if (v573)
      v955 = v952 + 1;
    else
      v955 = v952;
    v956 = 9 * v955;
    STACK[0x3C58] = v956 + v954;
    v957 = __CFADD__(v956, v954) || (unint64_t)(v956 + v954) > 0xFFFFFFFFFFFFFFF6;
    LODWORD(STACK[0x3C50]) = v957;
    if (v948 >= 0xFFFFFFFFFFFFFFFBLL)
      v958 = 5;
    else
      v958 = 0;
    v959 = v958 + v948;
    v960 = -19192325 * v959;
    v961 = (((v959 * (unsigned __int128)0xFFFFFFFFFEDB25FBLL) >> 64) * 5) >> 64;
    v962 = (__PAIR128__(4, -19192325) * v959) >> 64;
    v573 = __CFADD__(v962, v960);
    v963 = v962 + v960;
    if (v573)
      v964 = v961 + 1;
    else
      v964 = v961;
    v965 = 5 * v964;
    STACK[0x3C48] = v965 + v963;
    v966 = __CFADD__(v965, v963) || (unint64_t)(v965 + v963) > 0xFFFFFFFFFFFFFFFALL;
    LODWORD(STACK[0x3C40]) = v966;
    if (v948 >= 0xFFFFFFFFFFFFFFFDLL)
      v967 = 3;
    else
      v967 = 0;
    v968 = v967 + v948;
    v969 = -27941763 * v968;
    v970 = (((v968 * (unsigned __int128)0xFFFFFFFFFE55A47DLL) >> 64) * 3) >> 64;
    v971 = (__PAIR128__(2, -27941763) * v968) >> 64;
    v573 = __CFADD__(v971, v969);
    v972 = v971 + v969;
    if (v573)
      v973 = v970 + 1;
    else
      v973 = v970;
    v974 = 3 * v973;
    STACK[0x3C38] = v974 + v972;
    v975 = __CFADD__(v974, v972) || (unint64_t)(v974 + v972) > 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(STACK[0x3C30]) = v975;
    if (v948 == -1)
      v976 = 0;
    else
      v976 = v948;
    v977 = -39378945 * v976;
    v978 = (v976 * (unsigned __int128)0xFFFFFFFFFDA71FFFLL) >> 64;
    v979 = __CFADD__(__CFADD__(v978, v977), v978 + v977);
    v980 = __CFADD__(v978, v977) + v978 + v977 == -1 || v979;
    STACK[0x3C00] = v978 + v977 + __CFADD__(v978, v977) + v980;
    if (v414 >= 0xFFFFFFFFFFFFFFF1)
      v981 = v21;
    else
      v981 = 0;
    v982 = v981 + v414;
    v983 = 34560 * v982;
    v984 = 15 * ((v982 * (unsigned __int128)0x8700uLL) >> 64);
    v573 = __CFADD__(v984, v983);
    v985 = v984 + v983;
    if (v573)
      v986 = v21;
    else
      v986 = 0;
    v987 = (unint64_t)(v986 + v985) > 0xFFFFFFFFFFFFFFF0;
    v573 = __CFADD__(v986, v985);
    v988 = v986 + v985;
    v989 = v573 || v987;
    if (v539 >= 0xFFFFFFFFFFFFFFF1)
      v990 = v21;
    else
      v990 = 0;
    v991 = v990 + v539;
    v992 = 46080 * v991;
    v993 = 15 * ((v991 * (unsigned __int128)0xB400uLL) >> 64);
    v573 = __CFADD__(v993, v992);
    v994 = v993 + v992;
    if (v573)
      v995 = v21;
    else
      v995 = 0;
    v996 = (unint64_t)(v995 + v994) > 0xFFFFFFFFFFFFFFF0;
    v573 = __CFADD__(v995, v994);
    v997 = v995 + v994;
    v998 = v573 || v996;
    if (v664 >= 0xFFFFFFFFFFFFFFF1)
      v999 = v21;
    else
      v999 = 0;
    v1000 = v999 + v664;
    v1001 = 414720 * v1000;
    v1002 = 15 * ((v1000 * (unsigned __int128)0x65400uLL) >> 64);
    v573 = __CFADD__(v1002, v1001);
    v1003 = v1002 + v1001;
    if (v573)
      v1004 = v21;
    else
      v1004 = 0;
    v1005 = (unint64_t)(v1004 + v1003) > 0xFFFFFFFFFFFFFFF0;
    v573 = __CFADD__(v1004, v1003);
    v1006 = v1004 + v1003;
    if (v573 || v1005)
      v1008 = v21;
    else
      v1008 = 0;
    v1009 = v1008 + v1006;
    if (v1009 >= 0xFFFFFFFFFFFFFFF1)
      v1010 = v21;
    else
      v1010 = 0;
    v1011 = v1010 + v1009;
    if (v998)
      v1012 = v21;
    else
      v1012 = 0;
    v1013 = v1012 + v997;
    v573 = __CFADD__(v1013, v1011);
    v1014 = v1013 + v1011;
    v1015 = v573;
    if (v1014 > 0xFFFFFFFFFFFFFFF0)
      v1015 = 1;
    if (v1015)
      v1016 = v21;
    else
      v1016 = 0;
    v1017 = v1016 + v1014;
    if (v989)
      v1018 = v21;
    else
      v1018 = 0;
    v1019 = v1018 + v988;
    v1020 = v1019 + v1017 > 0xFFFFFFFFFFFFFFF0;
    v573 = __CFADD__(v1019, v1017);
    v1021 = v1019 + v1017;
    if (v573)
      v1020 = 1;
    if (v288 >= 0xFFFFFFFFFFFFFFF1)
      v1022 = v21;
    else
      v1022 = 0;
    v1023 = v1022 + v288;
    v1024 = 27648 * v1023;
    v1025 = (v1023 * (unsigned __int128)0x6C00uLL) >> 64;
    if (v1020)
      v1026 = v21;
    else
      v1026 = 0;
    v1027 = 15 * v1025 + v1024;
    v1028 = v1026 + v1021;
    if (__CFADD__(15 * v1025, v1024))
      v1029 = v21;
    else
      v1029 = 0;
    v573 = __CFADD__(v1029, v1027);
    v1030 = v1029 + v1027;
    v1031 = v573;
    if (v1030 > 0xFFFFFFFFFFFFFFF0)
      v1031 = 1;
    if (v1031)
      v1032 = v21;
    else
      v1032 = 0;
    v1033 = v1032 + v1030;
    v1034 = v1033 + v1028;
    v1035 = __CFADD__(v1033, v1028) || v1033 + v1028 > 0xFFFFFFFFFFFFFFF0;
    if (v812 >= 0xFFFFFFFFFFFFFFF7)
      v1036 = 9;
    else
      v1036 = 0;
    v1037 = v1036 + v812;
    v1038 = 207360 * v1037;
    v1039 = (__PAIR128__(8, 207360) * v1037) >> 64;
    v573 = __CFADD__(v1039, v1038);
    v1040 = v1039 + v1038;
    if (v573)
      v1041 = 9;
    else
      v1041 = 0;
    v1042 = v1041 + v1040;
    v1043 = __CFADD__(v1041, v1040) || (unint64_t)(v1041 + v1040) > 0xFFFFFFFFFFFFFFF6;
    if (v414 >= 0xFFFFFFFFFFFFFFF7)
      v1044 = 9;
    else
      v1044 = 0;
    v1045 = v1044 + v414;
    v1046 = 513 * v1045;
    v1047 = (__PAIR128__(8, 262656) * v1045) >> 64;
    v573 = __CFADD__(v1047, v1046 << 9);
    v1048 = v1047 + (v1046 << 9);
    if (v573)
      v1049 = 9;
    else
      v1049 = 0;
    v1050 = (unint64_t)(v1049 + v1048) > 0xFFFFFFFFFFFFFFF6;
    v573 = __CFADD__(v1049, v1048);
    v1051 = v1049 + v1048;
    v1052 = v573 || v1050;
    if (v664 >= 0xFFFFFFFFFFFFFFF7)
      v1053 = 9;
    else
      v1053 = 0;
    v1054 = v1053 + v664;
    v1055 = 984960 * v1054;
    v1056 = (__PAIR128__(8, 984960) * v1054) >> 64;
    v573 = __CFADD__(v1056, v1055);
    v1057 = v1056 + v1055;
    if (v573)
      v1058 = 9;
    else
      v1058 = 0;
    v573 = __CFADD__(v1058, v1057);
    v1059 = v1058 + v1057;
    v1060 = v573;
    if (v1059 > 0xFFFFFFFFFFFFFFF6)
      v1060 = 1;
    if (v539 >= 0xFFFFFFFFFFFFFFF7)
      v1061 = 9;
    else
      v1061 = 0;
    if (v1060)
      v1062 = 9;
    else
      v1062 = 0;
    v1063 = v1062 + v1059;
    v1064 = v1061 + v539;
    v1065 = 328320 * (v1061 + v539);
    v1066 = (v1064 * (unsigned __int128)0x50280uLL) >> 64;
    if (v1063 >= 0xFFFFFFFFFFFFFFF7)
      v1067 = 9;
    else
      v1067 = 0;
    v1068 = v1067 + v1063;
    v1069 = 9 * v1066;
    v573 = __CFADD__(v1069, v1065);
    v1070 = v1069 + v1065;
    if (v573)
      v1071 = 9;
    else
      v1071 = 0;
    v573 = __CFADD__(v1071, v1070);
    v1072 = v1071 + v1070;
    v1073 = v573;
    if (v1072 > 0xFFFFFFFFFFFFFFF6)
      v1073 = 1;
    if (v1073)
      v1074 = 9;
    else
      v1074 = 0;
    v1075 = v1074 + v1072;
    v573 = __CFADD__(v1075, v1068);
    v1076 = v1075 + v1068;
    v1077 = v573;
    if (v1076 > 0xFFFFFFFFFFFFFFF6)
      v1077 = 1;
    if (v1077)
      v1078 = 9;
    else
      v1078 = 0;
    v1079 = v1078 + v1076;
    if (v1052)
      v1080 = 9;
    else
      v1080 = 0;
    v1081 = v1080 + v1051;
    v573 = __CFADD__(v1081, v1079);
    v1082 = v1081 + v1079;
    v1083 = v573;
    if (v1082 > 0xFFFFFFFFFFFFFFF6)
      v1083 = 1;
    if (v1083)
      v1084 = 9;
    else
      v1084 = 0;
    if (v288 >= 0xFFFFFFFFFFFFFFF7)
      v1085 = 9;
    else
      v1085 = 0;
    v1086 = v1084 + v1082;
    v1087 = v1085 + v288;
    v1088 = 218880 * (v1085 + v288);
    v1089 = (__PAIR128__(8, 218880) * v1087) >> 64;
    v573 = __CFADD__(v1089, v1088);
    v1090 = v1089 + v1088;
    if (v573)
      v1091 = 9;
    else
      v1091 = 0;
    v573 = __CFADD__(v1091, v1090);
    v1092 = v1091 + v1090;
    v1093 = v573;
    if (v1092 > 0xFFFFFFFFFFFFFFF6)
      v1093 = 1;
    if (v1093)
      v1094 = 9;
    else
      v1094 = 0;
    v1095 = v1094 + v1092;
    v1096 = v1095 + v1086;
    v1097 = __CFADD__(v1095, v1086) || v1095 + v1086 > 0xFFFFFFFFFFFFFFF6;
    if (v812 >= 0xFFFFFFFFFFFFFFFBLL)
      v1098 = 5;
    else
      v1098 = 0;
    v1099 = v1098 + v812;
    v1100 = 456960 * v1099;
    v1101 = (__PAIR128__(4, 456960) * v1099) >> 64;
    v573 = __CFADD__(v1101, v1100);
    v1102 = v1101 + v1100;
    if (v573)
      v1103 = 5;
    else
      v1103 = 0;
    v1104 = v1103 + v1102;
    v1105 = __CFADD__(v1103, v1102) || (unint64_t)(v1103 + v1102) > 0xFFFFFFFFFFFFFFFALL;
    if (v539 >= 0xFFFFFFFFFFFFFFFBLL)
      v1106 = 5;
    else
      v1106 = 0;
    v1107 = v1106 + v539;
    v1108 = 685440 * v1107;
    v1109 = (__PAIR128__(4, 685440) * v1107) >> 64;
    v573 = __CFADD__(v1109, v1108);
    v1110 = v1109 + v1108;
    if (v573)
      v1111 = 5;
    else
      v1111 = 0;
    v1112 = (unint64_t)(v1111 + v1110) > 0xFFFFFFFFFFFFFFFALL;
    v573 = __CFADD__(v1111, v1110);
    v1113 = v1111 + v1110;
    v1114 = v573 || v1112;
    if (v664 >= 0xFFFFFFFFFFFFFFFBLL)
      v1115 = 5;
    else
      v1115 = 0;
    v1116 = v1115 + v664;
    v1117 = 1599360 * v1116;
    v1118 = (__PAIR128__(4, 1599360) * v1116) >> 64;
    v573 = __CFADD__(v1118, v1117);
    v1119 = v1118 + v1117;
    if (v573)
      v1120 = 5;
    else
      v1120 = 0;
    v1121 = (unint64_t)(v1120 + v1119) > 0xFFFFFFFFFFFFFFFALL;
    v573 = __CFADD__(v1120, v1119);
    v1122 = v1120 + v1119;
    if (v573 || v1121)
      v1124 = 5;
    else
      v1124 = 0;
    v1125 = v1124 + v1122;
    if (v1125 >= 0xFFFFFFFFFFFFFFFBLL)
      v1126 = 5;
    else
      v1126 = 0;
    v1127 = v1126 + v1125;
    if (v1114)
      v1128 = 5;
    else
      v1128 = 0;
    v1129 = v1128 + v1113;
    v1130 = v1129 + v1127 > 0xFFFFFFFFFFFFFFFALL;
    v573 = __CFADD__(v1129, v1127);
    v1131 = v1129 + v1127;
    if (v573)
      v1130 = 1;
    if (v1130)
      v1132 = 5;
    else
      v1132 = 0;
    v1133 = v1132 + v1131;
    if (v414 >= 0xFFFFFFFFFFFFFFFBLL)
      v1134 = 5;
    else
      v1134 = 0;
    v1135 = v1134 + v414;
    v1136 = 564480 * v1135;
    v1137 = (__PAIR128__(4, 564480) * v1135) >> 64;
    v573 = __CFADD__(v1137, v1136);
    v1138 = v1137 + v1136;
    if (v573)
      v1139 = 5;
    else
      v1139 = 0;
    v573 = __CFADD__(v1139, v1138);
    v1140 = v1139 + v1138;
    v1141 = v573;
    if (v1140 > 0xFFFFFFFFFFFFFFFALL)
      v1141 = 1;
    if (v1141)
      v1142 = 5;
    else
      v1142 = 0;
    v1143 = v1142 + v1140;
    v1144 = v1143 + v1133;
    v1145 = __CFADD__(v1143, v1133) || v1143 + v1133 > 0xFFFFFFFFFFFFFFFALL;
    if (v812 >= 0xFFFFFFFFFFFFFFFDLL)
      v1146 = 3;
    else
      v1146 = 0;
    v1147 = v1146 + v812;
    v1148 = 635040 * v1147;
    v1149 = (__PAIR128__(2, 635040) * v1147) >> 64;
    v573 = __CFADD__(v1149, v1148);
    v1150 = v1149 + v1148;
    if (v573)
      v1151 = 3;
    else
      v1151 = 0;
    v1152 = v1151 + v1150;
    v1153 = __CFADD__(v1151, v1150) || (unint64_t)(v1151 + v1150) > 0xFFFFFFFFFFFFFFFCLL;
    if (v288 >= 0xFFFFFFFFFFFFFFFDLL)
      v1154 = 3;
    else
      v1154 = 0;
    v1155 = v1154 + v288;
    v1156 = 665280 * v1155;
    v1157 = (__PAIR128__(2, 665280) * v1155) >> 64;
    v573 = __CFADD__(v1157, v1156);
    v1158 = v1157 + v1156;
    if (v573)
      v1159 = 3;
    else
      v1159 = 0;
    v1160 = v1159 + v1158;
    v1161 = __CFADD__(v1159, v1158) || (unint64_t)(v1159 + v1158) > 0xFFFFFFFFFFFFFFFCLL;
    if (v414 >= 0xFFFFFFFFFFFFFFFDLL)
      v1162 = 3;
    else
      v1162 = 0;
    v1163 = v1162 + v414;
    v1164 = 776160 * v1163;
    v1165 = (__PAIR128__(2, 776160) * v1163) >> 64;
    v573 = __CFADD__(v1165, v1164);
    v1166 = v1165 + v1164;
    if (v573)
      v1167 = 3;
    else
      v1167 = 0;
    v1168 = (unint64_t)(v1167 + v1166) > 0xFFFFFFFFFFFFFFFCLL;
    v573 = __CFADD__(v1167, v1166);
    v1169 = v1167 + v1166;
    if (v573)
      v1168 = 1;
    if (v664 >= 0xFFFFFFFFFFFFFFFDLL)
      v1170 = 3;
    else
      v1170 = 0;
    v1171 = v1170 + v664;
    v1172 = 1995840 * v1171;
    v1173 = (__PAIR128__(2, 1995840) * v1171) >> 64;
    v573 = __CFADD__(v1173, v1172);
    v1174 = v1173 + v1172;
    if (v573)
      v1175 = 3;
    else
      v1175 = 0;
    v1176 = (unint64_t)(v1175 + v1174) > 0xFFFFFFFFFFFFFFFCLL;
    v573 = __CFADD__(v1175, v1174);
    v1177 = v1175 + v1174;
    if (v573)
      v1176 = 1;
    if (v1176)
      v1178 = 3;
    else
      v1178 = 0;
    v1179 = v1178 + v1177;
    if (v539 >= 0xFFFFFFFFFFFFFFFDLL)
      v1180 = 3;
    else
      v1180 = 0;
    v1181 = v1180 + v539;
    v1182 = 931392 * v1181;
    v1183 = (__PAIR128__(2, 931392) * v1181) >> 64;
    if (v1179 >= 0xFFFFFFFFFFFFFFFDLL)
      v1184 = 3;
    else
      v1184 = 0;
    v573 = __CFADD__(v1183, v1182);
    v1185 = v1183 + v1182;
    v1186 = v1184 + v1179;
    if (v573)
      v1187 = 3;
    else
      v1187 = 0;
    v573 = __CFADD__(v1187, v1185);
    v1188 = v1187 + v1185;
    v1189 = v573;
    if (v1188 > 0xFFFFFFFFFFFFFFFCLL)
      v1189 = 1;
    if (v1189)
      v1190 = 3;
    else
      v1190 = 0;
    v1191 = v1190 + v1188;
    v1192 = v1191 + v1186 > 0xFFFFFFFFFFFFFFFCLL;
    v573 = __CFADD__(v1191, v1186);
    v1193 = v1191 + v1186;
    if (v573 || v1192)
      v1195 = 3;
    else
      v1195 = 0;
    v1196 = v1195 + v1193;
    if (v1168)
      v1197 = 3;
    else
      v1197 = 0;
    v1198 = v1197 + v1169;
    v1199 = v1198 + v1196 > 0xFFFFFFFFFFFFFFFCLL;
    v573 = __CFADD__(v1198, v1196);
    v1200 = v1198 + v1196;
    if (v573 || v1199)
      v1202 = 3;
    else
      v1202 = 0;
    v1203 = v1202 + v1200;
    if (v1161)
      v1204 = 3;
    else
      v1204 = 0;
    v1205 = v1204 + v1160;
    v1206 = (unint64_t)(v1205 + v1203) > 0xFFFFFFFFFFFFFFFCLL;
    v573 = __CFADD__(v1205, v1203);
    v1207 = v1205 + v1203;
    v1208 = v573 || v1206;
    if (v812 == -1)
      v1209 = 0;
    else
      v1209 = v812;
    v1210 = 856064 * v1209;
    v1211 = (v1209 * (unsigned __int128)0xD1000uLL) >> 64;
    v1212 = __CFADD__(__CFADD__(v1211, v1210), v1211 + v1210);
    v1213 = __CFADD__(v1211, v1210) + v1211 + v1210 == -1 || v1212;
    v1214 = v1211 + v1210 + __CFADD__(v1211, v1210) + v1213;
    if (v288 == -1)
      v1215 = 0;
    else
      v1215 = v288;
    v1216 = 894976 * v1215;
    v1217 = (v1215 * (unsigned __int128)0xDA800uLL) >> 64;
    v1218 = __CFADD__(__CFADD__(v1217, v1216), v1217 + v1216);
    v1219 = __CFADD__(v1217, v1216) + v1217 + v1216 == -1 || v1218;
    v1220 = v1217 + v1216 + __CFADD__(v1217, v1216) + v1219;
    if (v414 == -1)
      v1221 = 0;
    else
      v1221 = v414;
    v1222 = 1036288 * v1221;
    v1223 = (v1221 * (unsigned __int128)0xFD000uLL) >> 64;
    v1224 = __CFADD__(__CFADD__(v1223, v1222), v1223 + v1222);
    v1225 = __CFADD__(v1223, v1222) + v1223 + v1222 == -1 || v1224;
    v1226 = v1223 + v1222 + __CFADD__(v1223, v1222) + v1225;
    if (v539 == -1)
      v1227 = 0;
    else
      v1227 = v539;
    v1228 = 1230592 * v1227;
    v1229 = (v1227 * (unsigned __int128)0x12C700uLL) >> 64;
    v1230 = __CFADD__(__CFADD__(v1229, v1228), v1229 + v1228);
    v1231 = __CFADD__(v1229, v1228) + v1229 + v1228 == -1 || v1230;
    v1232 = v1229 + v1228 + __CFADD__(v1229, v1228) + v1231;
    if (v664 == -1)
      v1233 = 0;
    else
      v1233 = v664;
    v1234 = 2461184 * v1233;
    v1235 = (v1233 * (unsigned __int128)0x258E00uLL) >> 64;
    v1236 = __CFADD__(__CFADD__(v1235, v1234), v1235 + v1234);
    v1237 = __CFADD__(v1235, v1234) + v1235 + v1234 == -1 || v1236;
    v1238 = v1235 + v1234 + __CFADD__(v1235, v1234) + v1237;
    if (v1238 == -1)
      v1238 = 0;
    v573 = __CFADD__(v1232, v1238);
    v1239 = v1232 + v1238;
    LODWORD(v1240) = v573;
    if (v1239 == -1)
      v1240 = 1;
    else
      v1240 = v1240;
    v1241 = v1240 + v1239;
    v573 = __CFADD__(v1226, v1241);
    v1242 = v1226 + v1241;
    LODWORD(v1243) = v573;
    if (v1242 == -1)
      v1243 = 1;
    else
      v1243 = v1243;
    v1244 = v1243 + v1242;
    v573 = __CFADD__(v1220, v1244);
    v1245 = v1220 + v1244;
    LODWORD(v1246) = v573;
    if (v1245 == -1)
      v1246 = 1;
    else
      v1246 = v1246;
    v1247 = v1246 + v1245;
    LODWORD(v1246) = v1214 + v1247 == -1;
    v573 = __CFADD__(v1214, v1247);
    v1248 = v1214 + v1247;
    if (v573)
      v1246 = 1;
    else
      v1246 = v1246;
    v1249 = v1246 + v1248;
    if (v1208)
      v1250 = 3;
    else
      v1250 = 0;
    v1251 = v1250 + v1207;
    if (v1153)
      v1252 = 3;
    else
      v1252 = 0;
    v1253 = v1252 + v1152;
    v573 = __CFADD__(v1253, v1251);
    v1254 = v1253 + v1251;
    v1255 = v573;
    if (v1254 > 0xFFFFFFFFFFFFFFFCLL)
      v1255 = 1;
    if (v1255)
      v1256 = 3;
    else
      v1256 = 0;
    v1257 = v1256 + v1254;
    if (v288 >= 0xFFFFFFFFFFFFFFFBLL)
      v1258 = 5;
    else
      v1258 = 0;
    v1259 = v1258 + v288;
    v1260 = 479808 * v1259;
    v1261 = (__PAIR128__(4, 479808) * v1259) >> 64;
    if (v1145)
      v1262 = 5;
    else
      v1262 = 0;
    v573 = __CFADD__(v1261, v1260);
    v1263 = v1261 + v1260;
    if (v573)
      v1264 = 5;
    else
      v1264 = 0;
    v573 = __CFADD__(v1264, v1263);
    v1265 = v1264 + v1263;
    v1266 = v573;
    if (v1265 > 0xFFFFFFFFFFFFFFFALL)
      v1266 = 1;
    v2628 = v1266 == 0;
    v1267 = v1262 + v1144;
    if (v2628)
      v1268 = 0;
    else
      v1268 = 5;
    v1269 = v1268 + v1265;
    v573 = __CFADD__(v1269, v1267);
    v1270 = v1269 + v1267;
    v1271 = v573;
    if (v1270 > 0xFFFFFFFFFFFFFFFALL)
      v1271 = 1;
    if (v1271)
      v1272 = 5;
    else
      v1272 = 0;
    v1273 = v1272 + v1270;
    if (v1105)
      v1274 = 5;
    else
      v1274 = 0;
    v1275 = v1274 + v1104;
    v573 = __CFADD__(v1275, v1273);
    v1276 = v1275 + v1273;
    v1277 = v573;
    if (v1276 > 0xFFFFFFFFFFFFFFFALL)
      v1277 = 1;
    if (v1277)
      v1278 = 5;
    else
      v1278 = 0;
    v1279 = v1278 + v1276;
    if (v1097)
      v1280 = 9;
    else
      v1280 = 0;
    v1281 = v1280 + v1096;
    if (v1043)
      v1282 = 9;
    else
      v1282 = 0;
    v1283 = v1282 + v1042;
    v573 = __CFADD__(v1283, v1281);
    v1284 = v1283 + v1281;
    v1285 = v573;
    if (v1284 > 0xFFFFFFFFFFFFFFF6)
      v1285 = 1;
    if (v1285)
      v1286 = 9;
    else
      v1286 = 0;
    v1287 = v1286 + v1284;
    v1288 = 15;
    if (v812 < 0xFFFFFFFFFFFFFFF1)
      v1288 = 0;
    v1289 = v1288 + v812;
    v1290 = 15;
    if (!v1035)
      v1290 = 0;
    v1291 = v1290 + v1034;
    v21 = 15;
    v1292 = 15 * ((v1289 * (unsigned __int128)0x6540uLL) >> 64);
    v1293 = 25920 * v1289;
    v573 = __CFADD__(v1292, v1293);
    v1294 = v1292 + v1293;
    if (v573)
      v1295 = 15;
    else
      v1295 = 0;
    v573 = __CFADD__(v1295, v1294);
    v1296 = v1295 + v1294;
    v1297 = v573;
    if (v1296 > 0xFFFFFFFFFFFFFFF0)
      v1297 = 1;
    if (v1297)
      v1298 = 15;
    else
      v1298 = 0;
    v1299 = v1298 + v1296;
    v573 = __CFADD__(v1299, v1291);
    v1300 = v1299 + v1291;
    v1301 = v573;
    if (v1300 > 0xFFFFFFFFFFFFFFF0)
      v1301 = 1;
    if (v1301)
      v1302 = 15;
    else
      v1302 = 0;
    v1303 = v1302 + v1300;
    v573 = v1249 >= STACK[0x3C00];
    v1304 = v1249 - STACK[0x3C00];
    v1305 = !v573;
    v1306 = v1304 - v1305;
    if (LODWORD(STACK[0x3C30]))
      v1307 = 3;
    else
      v1307 = 0;
    v1308 = v1307 + STACK[0x3C38];
    v573 = v1257 >= v1308;
    v1309 = v1257 - v1308;
    if (v573)
      v1310 = 0;
    else
      v1310 = -3;
    v1311 = v1310 + v1309;
    if (LODWORD(STACK[0x3C40]))
      v1312 = 5;
    else
      v1312 = 0;
    v1313 = v1312 + STACK[0x3C48];
    v573 = v1279 >= v1313;
    v1314 = v1279 - v1313;
    v1315 = -5;
    if (v573)
      v1315 = 0;
    v1316 = v1315 + v1314;
    if (LODWORD(STACK[0x3C50]))
      v1317 = 9;
    else
      v1317 = 0;
    v1318 = v1317 + STACK[0x3C58];
    v573 = v1287 >= v1318;
    v1319 = v1287 - v1318;
    v1320 = -9;
    if (v573)
      v1321 = 0;
    else
      v1321 = -9;
    v1322 = v1321 + v1319;
    if (v948 >= 0xFFFFFFFFFFFFFFF1)
      v1323 = 15;
    else
      v1323 = 0;
    v1324 = v1323 + v948;
    v1325 = -829455 * v1324;
    v1326 = (v1324 * (unsigned __int128)0xFFFFFFFFFFF357F1) >> 64;
    v1327 = 15 * v1326;
    v1328 = (v1326 * (unsigned __int128)0xFuLL) >> 64;
    v573 = __CFADD__(v1327, v1325);
    v1329 = v1327 + v1325;
    if (v573)
      ++v1328;
    v1330 = 15 * v1328;
    v573 = __CFADD__(v1330, v1329);
    v1331 = v1330 + v1329;
    v1332 = v573;
    if (v1331 > 0xFFFFFFFFFFFFFFF0)
      v1332 = 1;
    if (v1332)
      v1333 = 15;
    else
      v1333 = 0;
    v1334 = v1333 + v1331;
    v573 = v1303 >= v1334;
    v1335 = v1303 - v1334;
    if (v573)
      v1336 = 0;
    else
      v1336 = -15;
    v1337 = v1336 + v1335;
    switch(LODWORD(STACK[0x3BD8]))
    {
      case 4:
        v3615 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523)) - 8);
        STACK[0x3270] = 5;
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x3128] = STACK[0x18B0];
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x26F8] = STACK[0x3BA0];
        v3616 = STACK[0x27F0];
        STACK[0x2DE8] = v1311;
        STACK[0x2DE0] = STACK[0x3C60];
        STACK[0x2DD8] = v1306;
        STACK[0x2DD0] = v1322;
        STACK[0x2DC8] = STACK[0x3C08];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x2DC0] = STACK[0x3C78];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x2DA8] = v1316;
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x2DA0] = STACK[0x3C68];
        STACK[0x2D98] = STACK[0x3C28];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0x2DB8] = v1337;
        STACK[0x2DB0] = STACK[0x3C20];
        STACK[0x3318] = STACK[0x18A8];
        STACK[0x3310] = STACK[0x1CF0];
        STACK[0x3348] = STACK[0x1898];
        STACK[0x32E8] = STACK[0x1CD8];
        STACK[0x32F8] = STACK[0x18C0];
        STACK[0x3330] = STACK[0x1CE0];
        STACK[0x3288] = STACK[0x1CB8];
        STACK[0x3328] = STACK[0x1CB0];
        STACK[0x3340] = STACK[0x18B8];
        STACK[0x32F0] = STACK[0x18A0];
        STACK[0x3338] = STACK[0x1888];
        STACK[0x3268] = STACK[0x1CA8];
        STACK[0x3260] = STACK[0x1CC0];
        STACK[0x32E0] = STACK[0x18D0];
        STACK[0x3278] = STACK[0x1CF8];
        STACK[0x3258] = STACK[0x1CC8];
        STACK[0x3320] = STACK[0x1CD0];
        STACK[0x3280] = STACK[0x18C8];
        result = v3615(v3616);
        break;
      case 0xE:
        v1338 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70]
                                                                                           + 8
                                                                                           * (LODWORD(STACK[0x3710])
                                                                                            - 5429))
                                                                               - ((2
                                                                                               * LODWORD(STACK[0x3710])) ^ 0x789ALL));
        STACK[0xD90] = v1337;
        STACK[0xD88] = v1322;
        STACK[0xCE8] = STACK[0x3C28];
        STACK[0xCF0] = STACK[0x3790];
        STACK[0xCF8] = STACK[0x3788];
        STACK[0xD00] = STACK[0x37C8];
        STACK[0xD08] = STACK[0x3C08];
        STACK[0xD10] = STACK[0x37F8];
        STACK[0xD18] = STACK[0x3C20];
        STACK[0xD20] = v1316;
        STACK[0xD28] = STACK[0x37A0];
        STACK[0xD30] = STACK[0x37C0];
        STACK[0xD38] = v1311;
        STACK[0xD40] = STACK[0x37D8];
        STACK[0xD48] = STACK[0x3C68];
        STACK[0xD50] = STACK[0x3798];
        STACK[0xD58] = STACK[0x3C60];
        STACK[0xD60] = STACK[0x3C78];
        STACK[0xD68] = STACK[0x37A8];
        STACK[0xD70] = STACK[0x37F0];
        STACK[0xD78] = STACK[0x37D0];
        STACK[0xD80] = v1306;
        STACK[0x3B70] = 0x34B9D46858BE76EBLL;
        STACK[0x3B68] = 0x97B89D4EA264A1B3;
        STACK[0x3B78] = 0xF7C854F0B7BCE901;
        v1339 = STACK[0x2E38];
        v1340 = STACK[0x2E40];
        v1341 = STACK[0x2E28];
        STACK[0x3230] = 0x32E284E124F24A81;
        STACK[0x3228] = 0xA299ED451E059C13;
        v1342 = STACK[0x2DF8];
        STACK[0x3250] = 0xD4A6F4CF55C46B4CLL;
        STACK[0x3220] = 0x6EBA58B5908087BFLL;
        STACK[0x3AC8] = STACK[0x2E30];
        STACK[0x3248] = 0xDDB22C380449E0BALL;
        result = v1338(v1342, v1339, v1341, 0x661C765BF4208041, v1340);
        break;
      case 0xF:
        LODWORD(STACK[0x3BD8]) = 16;
        STACK[0x3B70] = 0xDE63DAE4FC78A846;
        v12 = STACK[0x2698];
        STACK[0x2678] = v1306;
        STACK[0x2670] = v1337;
        STACK[0x3B68] = 0x8EA56294FB27789DLL;
        STACK[0x3B78] = 0x77BBC4BB7B718F6ELL;
        STACK[0x26E8] = STACK[0x3C60];
        a2 = STACK[0x26C8];
        a5 = STACK[0x26A8];
        v17 = 0xB597BB10BF49CF5;
        a4 = 0x21BAADC71E2E67AELL;
        a7 = STACK[0x26D0];
        a3 = STACK[0x26B8];
        v16 = 0x1BD1E5A80B860D97;
        STACK[0x2668] = STACK[0x3C28];
        v13 = STACK[0x26D8];
        STACK[0x3BD0] = STACK[0x26C0];
        STACK[0x2660] = STACK[0x3C68];
        v26 = 0x8DB13C47EC9C5060;
        STACK[0x3BC8] = STACK[0x26A0];
        a8 = STACK[0x2690];
        v27 = 0x2EE818AC82F341C6;
        STACK[0x2658] = STACK[0x3C08];
        STACK[0x3BC0] = STACK[0x26B0];
        STACK[0x2650] = v1322;
        STACK[0x2648] = STACK[0x3C20];
        v29 = 0xF435247866A89D6ALL;
        STACK[0x2640] = STACK[0x3C78];
        STACK[0x2638] = v1316;
        STACK[0x2680] = v1311;
        v28 = 0x85D9DC5E933D8215;
        STACK[0x3AC8] = STACK[0x2688];
        v25 = 0x4F32EF6C4CA22D86;
        v20 = 39;
        v24 = 17;
        v19 = 53;
        v22 = 47;
        v23 = 45;
        continue;
      case 0x10:
        v5018 = STACK[0x26E8];
        v5019 = STACK[0xCF8];
        v5020 = STACK[0x26E8] + STACK[0xCF8] > 0xFFFFFFFFFFFFFFCALL;
        STACK[0x3C58] = STACK[0x26E8] + STACK[0xCF8];
        v5021 = __CFADD__(v5018, v5019) || v5020;
        STACK[0x3C50] = v1311;
        v5022 = STACK[0x2658];
        v5023 = STACK[0xCF0];
        v5024 = STACK[0x2658] + STACK[0xCF0] > 0xFFFFFFFFFFFFFFD0;
        STACK[0x3C38] = STACK[0x2658] + STACK[0xCF0];
        v5025 = __CFADD__(v5022, v5023) || v5024;
        STACK[0x3C40] = v1337;
        v5026 = STACK[0x2660];
        v5027 = STACK[0x2660] + STACK[0xD30];
        v5028 = __CFADD__(STACK[0x2660], STACK[0xD30]) || STACK[0x2660] + STACK[0xD30] > 0xFFFFFFFFFFFFFFD8;
        v5029 = STACK[0x2648];
        v5030 = STACK[0x2648] + STACK[0xD00];
        v5031 = __CFADD__(STACK[0x2648], STACK[0xD00]) || STACK[0x2648] + STACK[0xD00] > 0xFFFFFFFFFFFFFFDELL;
        v5032 = STACK[0x2670];
        v5033 = STACK[0x2670] + STACK[0xD78];
        v5034 = __CFADD__(STACK[0x2670], STACK[0xD78]) || STACK[0x2670] + STACK[0xD78] > 0xFFFFFFFFFFFFFFF0;
        v5035 = STACK[0x2638];
        v5036 = STACK[0x2638] + STACK[0xD70] > 0xFFFFFFFFFFFFFFFALL;
        v5037 = STACK[0x2638] + STACK[0xD70];
        if (__CFADD__(STACK[0x2638], STACK[0xD70]))
          v5036 = 1;
        v5038 = STACK[0xD50];
        v5039 = STACK[0x2650];
        v5040 = STACK[0x2650] + STACK[0xD50] > 0xFFFFFFFFFFFFFFF6;
        v5041 = STACK[0x2650] + STACK[0xD50];
        STACK[0x3570] = v1322;
        STACK[0x3C48] = v1306;
        v5042 = __CFADD__(v5039, v5038) || v5040;
        v5043 = STACK[0x2680];
        v5044 = STACK[0x2680] + STACK[0xD40];
        v5045 = __CFADD__(STACK[0x2680], STACK[0xD40]);
        v5046 = STACK[0x2678];
        v5047 = STACK[0x2678] + STACK[0xD10];
        LODWORD(v5048) = __CFADD__(STACK[0x2678], STACK[0xD10]);
        if (v5047 == -1)
          v5048 = 1;
        else
          v5048 = v5048;
        STACK[0x1680] = v5048 + v5047;
        v5049 = STACK[0xD28];
        STACK[0x33D8] = v1316;
        v5050 = STACK[0x2640];
        v573 = __CFADD__(STACK[0x2640], v5049);
        v5051 = STACK[0x2640] + v5049;
        v5052 = v573;
        if (v5044 > 0xFFFFFFFFFFFFFFFCLL)
          v5045 = 1;
        if (v5045)
          v5053 = 3;
        else
          v5053 = 0;
        STACK[0x1670] = v5053 + v5044;
        if (v5036)
          v5054 = 5;
        else
          v5054 = 0;
        STACK[0x1690] = v5054 + v5037;
        v5055 = STACK[0x2668];
        v5056 = STACK[0x2668] + STACK[0xD68];
        v5057 = __CFADD__(STACK[0x2668], STACK[0xD68]);
        if (v5042)
          v5058 = 9;
        else
          v5058 = 0;
        STACK[0x16B0] = v5058 + v5041;
        if (v5051 > 0xFFFFFFFFFFFFFFEELL)
          v5059 = 1;
        else
          v5059 = v5052;
        v5060 = STACK[0x2508] - v5046;
        v5061 = STACK[0x2508] < v5046;
        if (v5031)
          v5062 = 33;
        else
          v5062 = 0;
        if (v5025)
          v5063 = 47;
        else
          v5063 = 0;
        if (v5056 > 0xFFFFFFFFFFFFFFD2)
          v5057 = 1;
        if (v5034)
          v5064 = 15;
        else
          v5064 = 0;
        if (v5028)
          v5065 = 39;
        else
          v5065 = 0;
        v2628 = v5059 == 0;
        v5066 = 17;
        STACK[0x3C00] = 17;
        if (v2628)
          v5066 = 0;
        if (v5057)
          v5067 = 45;
        else
          v5067 = 0;
        v5068 = STACK[0x2510] - v5043;
        if (STACK[0x2510] >= v5043)
          v5069 = 0;
        else
          v5069 = -3;
        STACK[0x1698] = v5062 + v5030;
        STACK[0x16A0] = v5065 + v5027;
        STACK[0x1678] = v5066 + v5051;
        STACK[0x1688] = v5063 + STACK[0x3C38];
        STACK[0x3440] = v5060 - v5061;
        STACK[0x16B8] = v5067 + v5056;
        STACK[0x16C0] = v5064 + v5033;
        v5070 = 53;
        if (!v5021)
          v5070 = 0;
        STACK[0x16A8] = v5070 + STACK[0x3C58];
        v573 = STACK[0x2520] >= v5035;
        v5071 = STACK[0x2520] - v5035;
        v5072 = -5;
        if (v573)
          v5072 = 0;
        v5073 = v5071 + v5072;
        v5074 = STACK[0x2538] - v5029;
        v5075 = -33;
        if (STACK[0x2538] >= v5029)
          v5075 = 0;
        v5076 = -15;
        if (STACK[0x2528] >= v5032)
          v5076 = 0;
        STACK[0x3450] = STACK[0x2528] - v5032 + v5076;
        v5077 = STACK[0x2500] - v5039;
        if (STACK[0x2500] >= v5039)
          v5078 = 0;
        else
          v5078 = -9;
        if (STACK[0x2518] >= v5050)
          v5079 = 0;
        else
          v5079 = -17;
        v5080 = STACK[0x2518] - v5050 + v5079;
        STACK[0x3448] = v5068 + v5069;
        STACK[0x3BF0] = v5074 + v5075;
        v5081 = v5077 + v5078;
        v5082 = -45;
        if (STACK[0x2530] >= v5055)
          v5082 = 0;
        STACK[0x33B0] = STACK[0x2530] - v5055 + v5082;
        v5083 = -39;
        if (STACK[0x24F8] >= v5026)
          v5083 = 0;
        STACK[0x3388] = STACK[0x24F8] - v5026 + v5083;
        v5084 = -47;
        if (STACK[0x24F0] >= v5022)
          v5084 = 0;
        STACK[0x3BB0] = STACK[0x24F0] - v5022 + v5084;
        v5085 = -53;
        if (STACK[0x2540] >= STACK[0x26E8])
          v5085 = 0;
        STACK[0x3C38] = STACK[0x2540] - STACK[0x26E8] + v5085;
        STACK[0x9E0] = STACK[0x3C78];
        STACK[0x968] = STACK[0x3570];
        STACK[0x938] = STACK[0x33D8];
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x3880] = STACK[0x3500];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x960] = STACK[0x3C20];
        STACK[0x38F8] = STACK[0x3460];
        STACK[0x38F0] = STACK[0x3468];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x3920] = STACK[0x3470];
        STACK[0x3568] = STACK[0x3130];
        STACK[0x3918] = STACK[0x3478];
        STACK[0x3938] = STACK[0x3480];
        STACK[0x3560] = STACK[0x3138];
        STACK[0x3930] = STACK[0x3418];
        STACK[0x3878] = STACK[0x3508];
        STACK[0x3928] = STACK[0x3510];
        STACK[0x26F8] = STACK[0x3BA0];
        STACK[0x37D0] = STACK[0x3488];
        STACK[0x3558] = STACK[0x3140];
        STACK[0x37C8] = STACK[0x33E8];
        STACK[0x3908] = STACK[0x34E0];
        STACK[0x37C0] = STACK[0x3420];
        STACK[0x3550] = STACK[0x3148];
        STACK[0x3900] = STACK[0x33F0];
        STACK[0x37B8] = STACK[0x33F8];
        LODWORD(STACK[0x37D8]) = STACK[0x3400];
        STACK[0x38E8] = STACK[0x3490];
        STACK[0x3910] = STACK[0x3518];
        STACK[0x37B0] = STACK[0x3428];
        STACK[0x37A8] = STACK[0x3430];
        STACK[0x950] = STACK[0x3C08];
        STACK[0x37A0] = STACK[0x3498];
        STACK[0x3798] = STACK[0x34E8];
        STACK[0x3548] = STACK[0x3180];
        STACK[0x3790] = STACK[0x34F0];
        STACK[0x948] = STACK[0x3C48];
        STACK[0x3788] = STACK[0x34A0];
        STACK[0x38E0] = STACK[0x34F8];
        STACK[0x3780] = STACK[0x3028];
        STACK[0x38B0] = STACK[0x3030];
        STACK[0x3778] = STACK[0x3038];
        STACK[0x38D0] = STACK[0x3520];
        STACK[0x38D8] = STACK[0x34B0];
        STACK[0x38C8] = STACK[0x34A8];
        STACK[0x3770] = STACK[0x34B8];
        STACK[0x38C0] = STACK[0x3098];
        STACK[0x3768] = STACK[0x3040];
        STACK[0x3760] = STACK[0x3048];
        STACK[0x3758] = STACK[0x3528];
        STACK[0x33D8] = v5073;
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x3748] = STACK[0x30A0];
        STACK[0x3740] = STACK[0x34C0];
        STACK[0x3738] = STACK[0x2FF8];
        STACK[0x918] = STACK[0x3C40];
        STACK[0x38B8] = STACK[0x3530];
        STACK[0x3750] = STACK[0x3538];
        STACK[0x3570] = v5081;
        STACK[0x38A8] = STACK[0x30C8];
        STACK[0x38A0] = STACK[0x3578];
        STACK[0x3C78] = v5080;
        STACK[0x900] = STACK[0x3C28];
        STACK[0x3730] = STACK[0x3020];
        STACK[0x3728] = STACK[0x3050];
        STACK[0x3720] = STACK[0x30A8];
        STACK[0x3718] = STACK[0x34C8];
        STACK[0x3700] = STACK[0x3000];
        STACK[0x36F8] = STACK[0x3058];
        STACK[0x3898] = STACK[0x34D0];
        STACK[0x3708] = STACK[0x34D8];
        STACK[0x36E8] = STACK[0x3060];
        STACK[0x3890] = STACK[0x3068];
        STACK[0x36E0] = STACK[0x30B0];
        STACK[0x36F0] = STACK[0x3088];
        STACK[0x36D8] = STACK[0x3008];
        STACK[0x870] = STACK[0x3C60];
        STACK[0x860] = STACK[0x3C68];
        STACK[0x36D0] = STACK[0x3080];
        STACK[0x908] = STACK[0x3C50];
        v5086 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * SLODWORD(STACK[0x5E4]));
        LODWORD(STACK[0x3AC0]) = STACK[0x3710];
        STACK[0x33E0] = 0x5B8FBBD5E48BD14FLL;
        STACK[0x3438] = 0xDDB22C380449E0BALL;
        STACK[0x3BF8] = 0x32E284E124F24A81;
        STACK[0x3398] = 0x87E85B6E5A109AFALL;
        STACK[0x3540] = 0x661C765BF4208041;
        STACK[0x3BE8] = 0x34B9D46858BE76EBLL;
        STACK[0x3380] = 0x6EBA58B5908087BFLL;
        STACK[0x3BE0] = 0x97B89D4EA264A1B3;
        STACK[0x3390] = 0xD4A6F4CF55C46B4CLL;
        STACK[0x33A8] = 0xA299ED451E059C13;
        STACK[0x3C30] = 0xF7C854F0B7BCE901;
        result = v5086();
        break;
      case 0x12:
        v5087 = STACK[0x3C78] + STACK[0xD60];
        v5088 = __CFADD__(STACK[0x3C78], STACK[0xD60]) || STACK[0x3C78] + STACK[0xD60] > 0xFFFFFFFFFFFFFFEELL;
        v5089 = STACK[0x3C08] + STACK[0xD08];
        v5090 = __CFADD__(STACK[0x3C08], STACK[0xD08]) || STACK[0x3C08] + STACK[0xD08] > 0xFFFFFFFFFFFFFFD0;
        v5091 = STACK[0x3C28] + STACK[0xCE8] > 0xFFFFFFFFFFFFFFD2;
        v5092 = STACK[0x3C28] + STACK[0xCE8];
        if (__CFADD__(STACK[0x3C28], STACK[0xCE8]))
          v5091 = 1;
        v5093 = STACK[0x3C68] + STACK[0xD48] > 0xFFFFFFFFFFFFFFD8;
        v5094 = STACK[0x3C68] + STACK[0xD48];
        if (__CFADD__(STACK[0x3C68], STACK[0xD48]))
          v5093 = 1;
        v5095 = v1316 + STACK[0xD20];
        v5096 = __CFADD__(v1316, STACK[0xD20]);
        v5097 = v1306 + STACK[0xD80];
        LODWORD(v5098) = __CFADD__(v1306, STACK[0xD80]);
        v5099 = v1311 + STACK[0xD38];
        v5100 = __CFADD__(v1311, STACK[0xD38]);
        v5101 = v1322 + STACK[0xD88];
        v5102 = __CFADD__(v1322, STACK[0xD88]);
        if (v5095 > 0xFFFFFFFFFFFFFFFALL)
          v5096 = 1;
        if (v5097 == -1)
          v5098 = 1;
        else
          v5098 = v5098;
        STACK[0x1F10] = v5098 + v5097;
        v5103 = STACK[0x3C60] + STACK[0xD58];
        v5104 = __CFADD__(STACK[0x3C60], STACK[0xD58]);
        if (v5099 > 0xFFFFFFFFFFFFFFFCLL)
          v5100 = 1;
        v5105 = v1337 + STACK[0xD90];
        v5106 = __CFADD__(v1337, STACK[0xD90]);
        v5107 = STACK[0x3C20] + STACK[0xD18];
        v5108 = __CFADD__(STACK[0x3C20], STACK[0xD18]);
        if (v5096)
          v5109 = 5;
        else
          v5109 = 0;
        STACK[0x1B10] = v5109 + v5095;
        if (v5100)
          v5110 = 3;
        else
          v5110 = 0;
        STACK[0x1780] = v5110 + v5099;
        v5111 = v5101 > 0xFFFFFFFFFFFFFFF6 || v5102;
        v5112 = v5105 > 0xFFFFFFFFFFFFFFF0 || v5106;
        v5113 = v5107 > 0xFFFFFFFFFFFFFFDELL || v5108;
        v2628 = !v5093;
        v5114 = 39;
        if (v2628)
          v5114 = 0;
        STACK[0x1F28] = v5114 + v5094;
        if (v5112)
          v5115 = 15;
        else
          v5115 = 0;
        STACK[0x15F0] = v5115 + v5105;
        if (v5111)
          v5116 = 9;
        else
          v5116 = 0;
        STACK[0x1798] = v5116 + v5101;
        v2628 = !v5088;
        v5117 = 17;
        if (v2628)
          v5117 = 0;
        v5118 = 33;
        if (!v5113)
          v5118 = 0;
        v2628 = !v5091;
        STACK[0x1788] = v5118 + v5107;
        v5119 = 45;
        if (v2628)
          v5119 = 0;
        v5120 = v5103 > 0xFFFFFFFFFFFFFFCALL || v5104;
        v2628 = !v5090;
        v5121 = LODWORD(STACK[0x3710]) - 9523;
        STACK[0x1790] = v5117 + v5087;
        v5122 = 47;
        if (v2628)
          v5122 = 0;
        STACK[0x1B08] = v5119 + v5092;
        STACK[0x1B00] = v5122 + v5089;
        v5123 = 53;
        if (!v5120)
          v5123 = 0;
        STACK[0x17A0] = v5123 + v5103;
        v5124 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * v5121) - 8);
        STACK[0x3270] = 19;
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x3128] = STACK[0x868];
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x26F8] = STACK[0x3BA0];
        v5125 = STACK[0x27F0];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0x3318] = STACK[0x890];
        STACK[0x3310] = STACK[0x1A68];
        STACK[0x3348] = STACK[0x9E8];
        STACK[0x32E8] = STACK[0x1A78];
        STACK[0x32F8] = STACK[0x8B8];
        STACK[0x3330] = STACK[0x1A70];
        STACK[0x3288] = STACK[0x1A48];
        STACK[0x3328] = STACK[0x1A38];
        STACK[0x3340] = STACK[0xA00];
        STACK[0x32F0] = STACK[0x850];
        STACK[0x3338] = STACK[0x9D8];
        STACK[0x3268] = STACK[0x1A28];
        STACK[0x3260] = STACK[0x1A98];
        STACK[0x32E0] = STACK[0x9F0];
        STACK[0x3278] = STACK[0x19F8];
        STACK[0x3258] = STACK[0x1A60];
        STACK[0x3320] = STACK[0x19F0];
        STACK[0x3280] = STACK[0x910];
        result = v5124(v5125);
        break;
      case 0x14:
        v1344 = LODWORD(STACK[0x3710]) - 5429;
        v1345 = v1306 - STACK[0x37E8];
        v1346 = v1306 < STACK[0x37E8];
        v1347 = -5;
        if (v1316 >= STACK[0x2798])
          v1347 = 0;
        v1348 = v1322 - STACK[0x2790];
        if (v1322 >= STACK[0x2790])
          v1349 = 0;
        else
          v1349 = -9;
        v1350 = STACK[0x3C78] - STACK[0x2770];
        v1351 = -17;
        if (STACK[0x3C78] >= STACK[0x2770])
          v1351 = 0;
        v1352 = v1311 - STACK[0x3800];
        v1353 = -3;
        if (v1311 >= STACK[0x3800])
          v1353 = 0;
        v1354 = STACK[0x3C08] - STACK[0x3BA0];
        v1355 = -47;
        if (STACK[0x3C08] >= STACK[0x3BA0])
          v1355 = 0;
        v573 = STACK[0x3C28] >= STACK[0x2788];
        v1356 = STACK[0x3C28] - STACK[0x2788];
        STACK[0x17C0] = v1316 - STACK[0x2798] + v1347;
        v1357 = -45;
        if (v573)
          v1357 = 0;
        v1358 = STACK[0x3C68] - STACK[0x3828];
        v1359 = -39;
        if (STACK[0x3C68] >= STACK[0x3828])
          v1359 = 0;
        v1360 = STACK[0x3C20] - STACK[0x2780];
        v1361 = -33;
        if (STACK[0x3C20] >= STACK[0x2780])
          v1361 = 0;
        STACK[0x1F18] = v1345 - v1346;
        v1362 = v1337 - STACK[0x2778];
        if (v1337 >= STACK[0x2778])
          v1363 = 0;
        else
          v1363 = -15;
        v573 = STACK[0x3C60] >= STACK[0x3BB8];
        v1364 = STACK[0x3C60] - STACK[0x3BB8];
        STACK[0x1600] = v1348 + v1349;
        STACK[0x1C90] = v1350 + v1351;
        STACK[0x17B0] = v1352 + v1353;
        STACK[0x1B70] = v1356 + v1357;
        STACK[0x17B8] = v1358 + v1359;
        STACK[0x16C8] = v1354 + v1355;
        v1365 = -53;
        if (v573)
          v1365 = 0;
        STACK[0x1F20] = v1362 + v1363;
        STACK[0x17A8] = v1364 + v1365;
        STACK[0x15F8] = v1360 + v1361;
        v1366 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * v1344)
                                                                               - STACK[0x668]
                                                                               + 19730);
        STACK[0x3B70] = STACK[0x2460];
        STACK[0x3B68] = STACK[0x2450];
        STACK[0x3B78] = STACK[0x2470];
        v1367 = STACK[0x1670];
        v1368 = STACK[0x16A0];
        v1369 = STACK[0x2430];
        v1370 = STACK[0x1680];
        STACK[0x3230] = STACK[0x2420];
        STACK[0x3228] = STACK[0x2458];
        v1371 = STACK[0x16A8];
        STACK[0x3250] = STACK[0x2438];
        STACK[0x3220] = STACK[0x2468];
        STACK[0x3AC8] = STACK[0x1688];
        STACK[0x3248] = STACK[0x2448];
        result = v1366(v1371, v1367, v1370, v1369, v1368);
        break;
      case 0x15:
        STACK[0x3270] = 22;
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x3128] = STACK[0xDA0];
        v8 = STACK[0x1A18];
        STACK[0x3318] = STACK[0xD98];
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x2708] = STACK[0x3828];
        STACK[0xE98] = v1306;
        STACK[0x2700] = STACK[0x3800];
        STACK[0xE68] = v1311;
        STACK[0xE60] = STACK[0x3C78];
        STACK[0xE38] = STACK[0x3C20];
        STACK[0x26F8] = STACK[0x3BA0];
        STACK[0xE30] = STACK[0x3C68];
        v9 = STACK[0x27F0];
        STACK[0xE20] = v1316;
        STACK[0xE18] = STACK[0x3C28];
        v10 = STACK[0x27B0];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0xE10] = STACK[0x3C08];
        STACK[0xE08] = v1322;
        STACK[0x3300] = STACK[0x27C0];
        STACK[0xE00] = v1337;
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0xDB8] = STACK[0x3C60];
        v11 = STACK[0xDC8];
        STACK[0x3310] = STACK[0x1A68];
        STACK[0x3348] = STACK[0xDE8];
        STACK[0x32E8] = STACK[0x1A78];
        STACK[0x32F8] = STACK[0xE48];
        STACK[0x3330] = STACK[0x1A70];
        STACK[0x3288] = STACK[0x1A48];
        STACK[0x3328] = STACK[0x1A38];
        STACK[0x3340] = STACK[0xDB0];
        STACK[0x32F0] = STACK[0xDD0];
        STACK[0x3338] = STACK[0xDE0];
        STACK[0x3268] = STACK[0x1A28];
        STACK[0x3260] = STACK[0x1A98];
        STACK[0x32E0] = STACK[0xDA8];
        STACK[0x3278] = STACK[0x19F8];
        STACK[0x3258] = STACK[0x1A60];
        STACK[0x3320] = STACK[0x19F0];
        STACK[0x3280] = STACK[0xDD8];
        result = sub_10069C158(v9, v1144, v1237, v10, v11, v812, v1306, v8);
        break;
      case 0x19:
        v5126 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523)) - 8);
        STACK[0x3270] = 26;
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x3128] = STACK[0x30C8];
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x1D50] = v1306;
        STACK[0x1D48] = v1316;
        STACK[0x26F8] = STACK[0x3BA0];
        v5127 = STACK[0x27F0];
        STACK[0x1D40] = STACK[0x3C08];
        STACK[0x1D38] = STACK[0x3C28];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x1D30] = STACK[0x3C68];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x1D28] = v1311;
        STACK[0x1D20] = v1337;
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x1D18] = STACK[0x3C20];
        STACK[0x1D10] = STACK[0x3C78];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0x1D08] = v1322;
        STACK[0x1D00] = STACK[0x3C60];
        STACK[0x3318] = STACK[0x34B8];
        STACK[0x3310] = STACK[0x34D8];
        STACK[0x3348] = STACK[0x3090];
        STACK[0x32E8] = STACK[0x3408];
        STACK[0x32F8] = STACK[0x3520];
        STACK[0x3330] = STACK[0x3518];
        STACK[0x3288] = STACK[0x3528];
        STACK[0x3328] = STACK[0x34C8];
        STACK[0x3340] = STACK[0x3530];
        STACK[0x32F0] = STACK[0x3410];
        STACK[0x3338] = STACK[0x3418];
        STACK[0x3268] = STACK[0x3578];
        STACK[0x3260] = STACK[0x3088];
        STACK[0x32E0] = STACK[0x34D0];
        STACK[0x3278] = STACK[0x3538];
        STACK[0x3258] = STACK[0x34B0];
        STACK[0x3320] = STACK[0x34A8];
        STACK[0x3280] = STACK[0x3500];
        result = v5126(v5127);
        break;
      case 0x1E:
        STACK[0x2710] = STACK[0x3BB8];
        v5128 = STACK[0x3458];
        v5129 = STACK[0x3408];
        STACK[0xA38] = STACK[0x3C78];
        STACK[0x3880] = STACK[0x3500];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x38F8] = STACK[0x3460];
        STACK[0x38F0] = STACK[0x3468];
        STACK[0x2700] = STACK[0x3800];
        v5130 = STACK[0x3410];
        STACK[0x3920] = STACK[0x3470];
        STACK[0x3568] = STACK[0x3130];
        STACK[0x3918] = STACK[0x3478];
        STACK[0x3938] = STACK[0x3480];
        STACK[0x3560] = STACK[0x3138];
        STACK[0x3930] = STACK[0x3418];
        STACK[0x3878] = STACK[0x3508];
        STACK[0x3928] = STACK[0x3510];
        STACK[0x26F8] = STACK[0x3BA0];
        STACK[0x37D0] = STACK[0x3488];
        STACK[0x3558] = STACK[0x3140];
        STACK[0x37C8] = STACK[0x33E8];
        STACK[0x3908] = STACK[0x34E0];
        STACK[0x37C0] = STACK[0x3420];
        STACK[0x3550] = STACK[0x3148];
        STACK[0x3900] = STACK[0x33F0];
        STACK[0x37B8] = STACK[0x33F8];
        LODWORD(STACK[0x37D8]) = STACK[0x3400];
        STACK[0x38E8] = STACK[0x3490];
        STACK[0x3910] = STACK[0x3518];
        STACK[0x37B0] = STACK[0x3428];
        STACK[0x37A8] = STACK[0x3430];
        STACK[0x37A0] = STACK[0x3498];
        STACK[0x3798] = STACK[0x34E8];
        STACK[0x3548] = STACK[0x3180];
        STACK[0x990] = v1316;
        STACK[0x3790] = STACK[0x34F0];
        STACK[0x3788] = STACK[0x34A0];
        STACK[0x980] = v1322;
        v5131 = STACK[0x3188];
        STACK[0x38E0] = STACK[0x34F8];
        STACK[0x3780] = STACK[0x3028];
        STACK[0x38B0] = STACK[0x3030];
        STACK[0x3778] = STACK[0x3038];
        STACK[0x38D0] = STACK[0x3520];
        STACK[0x38D8] = STACK[0x34B0];
        STACK[0x38C8] = STACK[0x34A8];
        STACK[0x958] = STACK[0x3C60];
        STACK[0x3770] = STACK[0x34B8];
        STACK[0x38C0] = STACK[0x3098];
        STACK[0x3768] = STACK[0x3040];
        STACK[0x3760] = STACK[0x3048];
        v5132 = STACK[0x3190];
        STACK[0x3758] = STACK[0x3528];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x3748] = STACK[0x30A0];
        STACK[0x3740] = STACK[0x34C0];
        STACK[0x3738] = STACK[0x2FF8];
        STACK[0x940] = STACK[0x3C08];
        STACK[0x38B8] = STACK[0x3530];
        STACK[0x930] = v1337;
        STACK[0x3750] = STACK[0x3538];
        STACK[0x928] = v1306;
        STACK[0x38A8] = STACK[0x30C8];
        STACK[0x38A0] = STACK[0x3578];
        STACK[0x3730] = STACK[0x3020];
        v5133 = STACK[0x3198];
        v5134 = STACK[0x31A0];
        STACK[0x3728] = STACK[0x3050];
        STACK[0x3720] = STACK[0x30A8];
        STACK[0x3718] = STACK[0x34C8];
        STACK[0x3700] = STACK[0x3000];
        STACK[0x36F8] = STACK[0x3058];
        STACK[0x3898] = STACK[0x34D0];
        STACK[0x3708] = STACK[0x34D8];
        STACK[0x8D8] = STACK[0x3C20];
        STACK[0x36E8] = STACK[0x3060];
        STACK[0x3890] = STACK[0x3068];
        STACK[0x36E0] = STACK[0x30B0];
        v5135 = STACK[0x3170];
        STACK[0x8C0] = STACK[0x3C68];
        STACK[0x36F0] = STACK[0x3088];
        STACK[0x36D8] = STACK[0x3008];
        STACK[0x8B0] = v1311;
        v5136 = STACK[0x30B8];
        STACK[0x36D0] = STACK[0x3080];
        v5137 = STACK[0x3018];
        v5138 = STACK[0x3150];
        STACK[0x920] = STACK[0x3C28];
        STACK[0x3C00] = 31;
        LODWORD(STACK[0x3AC0]) = STACK[0x3710];
        STACK[0x33E0] = 0x1BD1E5A80B860D97;
        STACK[0x3450] = STACK[0x1F60];
        STACK[0x3C38] = STACK[0x1F48];
        STACK[0x3448] = STACK[0x1F30];
        STACK[0x3BB0] = STACK[0x1F78];
        STACK[0x3440] = STACK[0x1F80];
        STACK[0x3438] = 0x4F32EF6C4CA22D86;
        STACK[0x3BF8] = 0x8DB13C47EC9C5060;
        STACK[0x3398] = 0xB597BB10BF49CF5;
        STACK[0x33B0] = STACK[0x1F68];
        STACK[0x3388] = STACK[0x1F50];
        STACK[0x3540] = 0x21BAADC71E2E67AELL;
        STACK[0x33D8] = STACK[0x1F70];
        STACK[0x3BE8] = 0xDE63DAE4FC78A846;
        STACK[0x3BF0] = STACK[0x1F38];
        STACK[0x3570] = STACK[0x1F58];
        STACK[0x3C78] = STACK[0x1F40];
        STACK[0x3380] = 0x85D9DC5E933D8215;
        STACK[0x3BE0] = 0x8EA56294FB27789DLL;
        STACK[0x3390] = 0xF435247866A89D6ALL;
        STACK[0x33A8] = 0x2EE818AC82F341C6;
        STACK[0x3C30] = 0x77BBC4BB7B718F6ELL;
        v5453 = 4647 * (((LODWORD(STACK[0x3834]) >> 5) + 111) ^ 0x1C) + 4767822;
        STACK[0x3B70] = v5453 - 6784 * (((1266205 * (unint64_t)v5453) >> 32) >> 1);
        STACK[0x3150] = v5138;
        STACK[0x3A98] = STACK[0x3690];
        STACK[0x3A90] = STACK[0x3698];
        STACK[0x39C0] = STACK[0x36A0];
        STACK[0x3170] = v5135;
        STACK[0x3A88] = STACK[0x36A8];
        STACK[0x3B98] = STACK[0x3298];
        STACK[0x3BD8] = STACK[0x32A0];
        STACK[0x3B90] = STACK[0x32D8];
        STACK[0x3B80] = STACK[0x32A8];
        STACK[0x3A80] = STACK[0x36B0];
        STACK[0x31A0] = v5134;
        STACK[0x3198] = v5133;
        STACK[0x3B88] = STACK[0x32B0];
        STACK[0x3C48] = STACK[0x33B8];
        STACK[0x3360] = STACK[0x32C0];
        STACK[0x3C60] = STACK[0x32B8];
        STACK[0x3190] = v5132;
        STACK[0x3A78] = STACK[0x36B8];
        STACK[0x3C68] = STACK[0x32C8];
        STACK[0x3188] = v5131;
        STACK[0x3A70] = STACK[0x36C0];
        STACK[0x3180] = STACK[0x3548];
        STACK[0x3C50] = STACK[0x33C0];
        STACK[0x3148] = STACK[0x3550];
        STACK[0x3140] = STACK[0x3558];
        STACK[0x3138] = STACK[0x3560];
        STACK[0x3130] = STACK[0x3568];
        STACK[0x3C40] = STACK[0x33C8];
        STACK[0x3C58] = STACK[0x33D0];
        v5454 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3AC0]) - 1986)) - 4);
        STACK[0x3458] = v5128;
        STACK[0x3408] = v5129;
        STACK[0x3500] = STACK[0x3880];
        STACK[0x3460] = STACK[0x38F8];
        STACK[0x3468] = STACK[0x38F0];
        STACK[0x3410] = v5130;
        STACK[0x3470] = STACK[0x3920];
        STACK[0x3478] = STACK[0x3918];
        STACK[0x3480] = STACK[0x3938];
        STACK[0x3418] = STACK[0x3930];
        STACK[0x3508] = STACK[0x3878];
        STACK[0x3510] = STACK[0x3928];
        STACK[0x3488] = STACK[0x37D0];
        STACK[0x33E8] = STACK[0x37C8];
        STACK[0x34E0] = STACK[0x3908];
        STACK[0x3420] = STACK[0x37C0];
        STACK[0x33F0] = STACK[0x3900];
        STACK[0x33F8] = STACK[0x37B8];
        LODWORD(STACK[0x3400]) = STACK[0x37D8];
        STACK[0x3490] = STACK[0x38E8];
        STACK[0x3518] = STACK[0x3910];
        STACK[0x3428] = STACK[0x37B0];
        STACK[0x3430] = STACK[0x37A8];
        STACK[0x3498] = STACK[0x37A0];
        STACK[0x34E8] = STACK[0x3798];
        STACK[0x34F0] = STACK[0x3790];
        STACK[0x34A0] = STACK[0x3788];
        STACK[0x34F8] = STACK[0x38E0];
        STACK[0x3520] = STACK[0x38D0];
        STACK[0x34B0] = STACK[0x38D8];
        STACK[0x34A8] = STACK[0x38C8];
        STACK[0x34B8] = STACK[0x3770];
        v5455 = STACK[0x3768];
        v5456 = STACK[0x3760];
        STACK[0x3528] = STACK[0x3758];
        STACK[0x34C0] = STACK[0x3740];
        STACK[0x3530] = STACK[0x38B8];
        STACK[0x3538] = STACK[0x3750];
        STACK[0x34C8] = STACK[0x3718];
        STACK[0x34D0] = STACK[0x3898];
        STACK[0x34D8] = STACK[0x3708];
        result = v5454(STACK[0x36E0], v5137, STACK[0x3890], v5456, STACK[0x36F0], v5136, v5455, STACK[0x36E8]);
        break;
      case 0x25:
        v5139 = STACK[0x3710];
        v5140 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 10112));
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x36C8] = STACK[0x28D8];
        STACK[0x3810] = STACK[0x28E0];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x3688] = STACK[0x39E0];
        STACK[0x2FE8] = STACK[0x2800];
        STACK[0x11D8] = v1322;
        STACK[0x2FE0] = STACK[0x2808];
        STACK[0x3C58] = STACK[0x33D0];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x3C40] = STACK[0x33C8];
        STACK[0x37F8] = STACK[0x28E8];
        STACK[0x11C8] = STACK[0x3C78];
        STACK[0x2FC8] = STACK[0x2810];
        STACK[0x2FD8] = STACK[0x28B0];
        STACK[0x2FF0] = STACK[0x2AE0];
        STACK[0x2FC0] = STACK[0x2AA8];
        STACK[0x2FB0] = STACK[0x28F0];
        STACK[0x3808] = STACK[0x2A10];
        STACK[0x2FA8] = STACK[0x28B8];
        STACK[0x2FA0] = STACK[0x2910];
        STACK[0x2FB8] = STACK[0x2AE8];
        STACK[0x2FD0] = STACK[0x28F8];
        STACK[0x3680] = STACK[0x39E8];
        STACK[0x26F8] = STACK[0x3BA0];
        STACK[0x11A0] = v1316;
        STACK[0x2F90] = STACK[0x2918];
        STACK[0x3668] = STACK[0x39D8];
        STACK[0x37F0] = STACK[0x2AF0];
        STACK[0x2F88] = STACK[0x2818];
        STACK[0x3678] = STACK[0x39F8];
        STACK[0x3C50] = STACK[0x33C0];
        STACK[0x1190] = STACK[0x3C68];
        STACK[0x3670] = STACK[0x3860];
        STACK[0x2F78] = STACK[0x2820];
        STACK[0x2F98] = STACK[0x2A18];
        STACK[0x2F80] = STACK[0x2920];
        STACK[0x3660] = STACK[0x3838];
        STACK[0x2F70] = STACK[0x2828];
        STACK[0x2F68] = STACK[0x2900];
        STACK[0x3A70] = STACK[0x36C0];
        STACK[0x30E0] = STACK[0x2A20];
        STACK[0x3658] = STACK[0x39D0];
        STACK[0x3650] = STACK[0x3840];
        STACK[0x2F50] = STACK[0x2928];
        STACK[0x2F48] = STACK[0x2930];
        STACK[0x2F40] = STACK[0x28C0];
        STACK[0x2F38] = STACK[0x2830];
        STACK[0x3640] = STACK[0x39C8];
        STACK[0x3648] = STACK[0x3BA8];
        STACK[0x3638] = STACK[0x3848];
        STACK[0x1178] = STACK[0x3C60];
        STACK[0x3A78] = STACK[0x36B8];
        STACK[0x3630] = STACK[0x3A00];
        STACK[0x1160] = v1306;
        STACK[0x2F58] = STACK[0x2A28];
        STACK[0x3628] = STACK[0x3A10];
        STACK[0x3618] = STACK[0x3868];
        STACK[0x3610] = STACK[0x39F0];
        STACK[0x3620] = STACK[0x3850];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x2F30] = STACK[0x2AB0];
        STACK[0x3608] = STACK[0x3858];
        STACK[0x3600] = STACK[0x3870];
        STACK[0x2F28] = STACK[0x2838];
        STACK[0x35F8] = STACK[0x3A08];
        STACK[0x2F20] = STACK[0x2840];
        STACK[0x3C60] = STACK[0x2938];
        STACK[0x37E8] = STACK[0x2AF8];
        STACK[0x1130] = v1337;
        STACK[0x30D0] = STACK[0x2A30];
        STACK[0x2F10] = STACK[0x2AB8];
        STACK[0x2F08] = STACK[0x2848];
        STACK[0x2F18] = STACK[0x2850];
        STACK[0x35F0] = STACK[0x3AD0];
        STACK[0x2F00] = STACK[0x2AC0];
        STACK[0x3C48] = STACK[0x33B8];
        STACK[0x2EF8] = STACK[0x2858];
        STACK[0x35E8] = STACK[0x3AD8];
        STACK[0x35E0] = STACK[0x3AE0];
        STACK[0x35D8] = STACK[0x3AE8];
        STACK[0x1108] = STACK[0x3C20];
        STACK[0x3A80] = STACK[0x36B0];
        STACK[0x2EE8] = STACK[0x2860];
        STACK[0x2EF0] = STACK[0x2868];
        STACK[0x2ED8] = STACK[0x2940];
        STACK[0x1100] = STACK[0x3C28];
        STACK[0x2EE0] = STACK[0x2AC8];
        STACK[0x35D0] = STACK[0x3AF0];
        STACK[0x2ED0] = STACK[0x2A38];
        STACK[0x2EC0] = STACK[0x2870];
        STACK[0x2EB8] = STACK[0x2878];
        STACK[0x10F0] = STACK[0x3C08];
        STACK[0x2EC8] = STACK[0x2908];
        STACK[0x2EB0] = STACK[0x28C8];
        STACK[0x10E8] = v1311;
        STACK[0x2EA8] = STACK[0x2948];
        STACK[0x2EA0] = STACK[0x2880];
        STACK[0x3A88] = STACK[0x36A8];
        STACK[0x2E98] = STACK[0x2B00];
        STACK[0x35C8] = STACK[0x3AF8];
        STACK[0x35C0] = STACK[0x3B08];
        STACK[0x39C0] = STACK[0x36A0];
        STACK[0x35B8] = STACK[0x3B00];
        STACK[0x30E8] = STACK[0x2B08];
        STACK[0x35B0] = STACK[0x3B10];
        STACK[0x35A8] = STACK[0x3B18];
        STACK[0x3A90] = STACK[0x3698];
        LODWORD(STACK[0x2F64]) = STACK[0x27FC];
        STACK[0x2E90] = STACK[0x28D0];
        STACK[0x35A0] = STACK[0x3B20];
        STACK[0x30D8] = STACK[0x2A40];
        STACK[0x2E88] = STACK[0x2AD0];
        STACK[0x2E78] = STACK[0x2888];
        STACK[0x3C68] = STACK[0x2950];
        STACK[0x3598] = STACK[0x3B30];
        STACK[0x2E70] = STACK[0x2890];
        STACK[0x2E68] = STACK[0x2898];
        STACK[0x3588] = STACK[0x3B28];
        STACK[0x3818] = STACK[0x2A48];
        STACK[0x2E60] = STACK[0x2AD8];
        STACK[0x3A98] = STACK[0x3690];
        STACK[0x2E58] = STACK[0x28A0];
        STACK[0x2E80] = STACK[0x2B10];
        STACK[0x2E50] = STACK[0x2958];
        STACK[0x3580] = STACK[0x3B38];
        STACK[0x2E48] = STACK[0x28A8];
        LODWORD(STACK[0x3C08]) = 38;
        LODWORD(STACK[0x3590]) = v5139;
        STACK[0x3B58] = STACK[0x8E0];
        STACK[0x3120] = STACK[0x1AE0];
        STACK[0x3160] = STACK[0x1AA8];
        STACK[0x3820] = STACK[0x1AB0];
        STACK[0x3290] = STACK[0x1AD0];
        STACK[0x3B50] = STACK[0x9C0];
        STACK[0x3108] = STACK[0x828];
        STACK[0x3178] = STACK[0x1610];
        STACK[0x31A8] = STACK[0x1AE8];
        STACK[0x30F8] = STACK[0x880];
        STACK[0x3100] = STACK[0x1628];
        STACK[0x3118] = STACK[0x888];
        STACK[0x3C20] = STACK[0x1AC8];
        STACK[0x3168] = STACK[0x1AF0];
        STACK[0x3C28] = STACK[0x1AA0];
        STACK[0x3B48] = STACK[0x840];
        STACK[0x3B60] = STACK[0x1AC0];
        STACK[0x30F0] = STACK[0x1648];
        STACK[0x3B40] = STACK[0x830];
        STACK[0x3110] = STACK[0x878];
        STACK[0x3800] = STACK[0x1AB8];
        STACK[0x3158] = STACK[0x1AD8];
        result = v5140();
        break;
      case 0x2C:
        v5141 = STACK[0x2B90];
        v5142 = STACK[0x1440];
        v5143 = STACK[0x1440] + STACK[0x2B90] > 0xFFFFFFFFFFFFFFD0;
        STACK[0x3C58] = STACK[0x1440] + STACK[0x2B90];
        if (__CFADD__(v5142, v5141))
          v5143 = 1;
        LODWORD(STACK[0x3C30]) = v5143;
        v5144 = STACK[0x1410];
        v5145 = STACK[0x2B30];
        v5146 = STACK[0x2B30] + STACK[0x1410] > 0xFFFFFFFFFFFFFFCALL;
        STACK[0x3C38] = STACK[0x2B30] + STACK[0x1410];
        if (__CFADD__(v5145, v5144))
          v5146 = 1;
        LODWORD(STACK[0x3C00]) = v5146;
        v5147 = STACK[0x1450];
        v5148 = STACK[0x2B28];
        v5149 = STACK[0x2B28] + STACK[0x1450] > 0xFFFFFFFFFFFFFFD2;
        STACK[0x3BF8] = STACK[0x2B28] + STACK[0x1450];
        if (__CFADD__(v5148, v5147))
          v5149 = 1;
        LODWORD(STACK[0x3BF0]) = v5149;
        v5150 = STACK[0x2B68] + STACK[0x1438];
        v5151 = __CFADD__(STACK[0x2B68], STACK[0x1438]) || STACK[0x2B68] + STACK[0x1438] > 0xFFFFFFFFFFFFFFF0;
        v5152 = STACK[0x2B60] + STACK[0x1448];
        v5153 = __CFADD__(STACK[0x2B60], STACK[0x1448]) || STACK[0x2B60] + STACK[0x1448] > 0xFFFFFFFFFFFFFFF6;
        STACK[0x3570] = v1322;
        STACK[0x3C48] = v1306;
        v5154 = STACK[0x2B88] + STACK[0x1458];
        v5155 = __CFADD__(STACK[0x2B88], STACK[0x1458]) || STACK[0x2B88] + STACK[0x1458] > 0xFFFFFFFFFFFFFFFCLL;
        v5156 = STACK[0x2B50] + STACK[0x13F8];
        v5157 = __CFADD__(STACK[0x2B50], STACK[0x13F8]) || STACK[0x2B50] + STACK[0x13F8] > 0xFFFFFFFFFFFFFFDELL;
        v5158 = STACK[0x2B38] + STACK[0x1408] > 0xFFFFFFFFFFFFFFD2;
        v5159 = STACK[0x2B38] + STACK[0x1408];
        if (__CFADD__(STACK[0x2B38], STACK[0x1408]))
          v5158 = 1;
        v5160 = STACK[0x1428] + STACK[0x2B80];
        v5161 = __CFADD__(STACK[0x1428], STACK[0x2B80]) || STACK[0x1428] + STACK[0x2B80] > 0xFFFFFFFFFFFFFFD8;
        v5162 = STACK[0x2B48] + STACK[0x13E8] > 0xFFFFFFFFFFFFFFFALL;
        v5163 = STACK[0x2B48] + STACK[0x13E8];
        if (__CFADD__(STACK[0x2B48], STACK[0x13E8]))
          v5162 = 1;
        v5164 = STACK[0x2BC0];
        v5165 = STACK[0x1400];
        STACK[0x33D8] = v1316;
        v5166 = v5165 + v5164 > 0xFFFFFFFFFFFFFFFCLL;
        v5167 = v5165 + v5164;
        if (__CFADD__(v5165, v5164))
          v5166 = 1;
        v5168 = STACK[0x2B98];
        v5169 = STACK[0x13C8];
        STACK[0x3C40] = v1337;
        v5170 = v5168 + v5169;
        STACK[0x3C50] = v1311;
        v5171 = __CFADD__(v5168, v5169);
        v5172 = STACK[0x13B8] + STACK[0x2BC8];
        LODWORD(v5173) = __CFADD__(STACK[0x13B8], STACK[0x2BC8]);
        if (v5172 == -1)
          v5173 = 1;
        else
          v5173 = v5173;
        STACK[0x32E8] = v5173 + v5172;
        v5174 = STACK[0x13B0] + STACK[0x2B40];
        v5175 = __CFADD__(STACK[0x13B0], STACK[0x2B40]);
        if (v5170 > 0xFFFFFFFFFFFFFFF6)
          v5171 = 1;
        v5176 = STACK[0x2B20] + STACK[0x13C0];
        v5177 = __CFADD__(STACK[0x2B20], STACK[0x13C0]);
        if (v5174 > 0xFFFFFFFFFFFFFFF0)
          v5175 = 1;
        if (v5171)
          v5178 = 9;
        else
          v5178 = 0;
        STACK[0x3310] = v5178 + v5170;
        if (v5176 > 0xFFFFFFFFFFFFFFEELL)
          v5177 = 1;
        if (v5175)
          v5179 = 15;
        else
          v5179 = 0;
        STACK[0x3260] = v5179 + v5174;
        if (v5166)
          v5180 = 3;
        else
          v5180 = 0;
        STACK[0x3330] = v5180 + v5167;
        v5181 = STACK[0x1420] + STACK[0x2B70];
        v5182 = __CFADD__(STACK[0x1420], STACK[0x2B70]);
        if (v5177)
          v5183 = 17;
        else
          v5183 = 0;
        STACK[0x3278] = v5183 + v5176;
        if (v5162)
          v5184 = 5;
        else
          v5184 = 0;
        STACK[0x3268] = v5184 + v5163;
        if (v5157)
          v5185 = 33;
        else
          v5185 = 0;
        STACK[0x3288] = v5185 + v5156;
        if (v5181 > 0xFFFFFFFFFFFFFFD0 || v5182)
          v5187 = 47;
        else
          v5187 = 0;
        STACK[0x3328] = v5187 + v5181;
        v5188 = STACK[0x1430] + STACK[0x2BB0];
        LODWORD(v5189) = __CFADD__(STACK[0x1430], STACK[0x2BB0]);
        if (v5161)
          v5190 = 39;
        else
          v5190 = 0;
        if (v5158)
          v5191 = 45;
        else
          v5191 = 0;
        STACK[0x3320] = v5191 + v5159;
        v5192 = STACK[0x13F0] + STACK[0x2BA8];
        v5193 = __CFADD__(STACK[0x13F0], STACK[0x2BA8]);
        if (v5192 > 0xFFFFFFFFFFFFFFFALL)
          v5193 = 1;
        if (v5188 == -1)
          v5189 = 1;
        else
          v5189 = v5189;
        v5194 = STACK[0x13D8] + STACK[0x2BB8];
        v5195 = __CFADD__(STACK[0x13D8], STACK[0x2BB8]);
        if (v5193)
          v5196 = 5;
        else
          v5196 = 0;
        STACK[0x3128] = v5196 + v5192;
        STACK[0x3258] = v5190 + v5160;
        STACK[0x32F8] = v5189 + v5188;
        v5197 = v5194 > 0xFFFFFFFFFFFFFFEELL || v5195;
        if (v5155)
          v5198 = 3;
        else
          v5198 = 0;
        STACK[0x32F0] = v5198 + v5154;
        if (v5197)
          v5199 = 17;
        else
          v5199 = 0;
        STACK[0x32E0] = v5199 + v5194;
        if (v5153)
          v5200 = 9;
        else
          v5200 = 0;
        STACK[0x3280] = v5200 + v5152;
        if (v5151)
          v5201 = 15;
        else
          v5201 = 0;
        STACK[0x3318] = v5201 + v5150;
        if (LODWORD(STACK[0x3BF0]))
          v5202 = 45;
        else
          v5202 = 0;
        STACK[0x3348] = v5202 + STACK[0x3BF8];
        if (LODWORD(STACK[0x3C30]))
          v5203 = 47;
        else
          v5203 = 0;
        if (LODWORD(STACK[0x3C00]))
          v5204 = 53;
        else
          v5204 = 0;
        STACK[0x3340] = v5204 + STACK[0x3C38];
        v5205 = *(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523));
        STACK[0x3338] = v5203 + STACK[0x3C58];
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x22D8] = STACK[0x3570];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x22D0] = STACK[0x3C20];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x3270] = 45;
        STACK[0x26F8] = STACK[0x3BA0];
        STACK[0x22C8] = STACK[0x3C08];
        STACK[0x22C0] = STACK[0x3C40];
        v5206 = STACK[0x27F0];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x22B8] = STACK[0x33D8];
        STACK[0x22B0] = STACK[0x3C68];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x22A8] = STACK[0x3C60];
        STACK[0x2298] = STACK[0x3C50];
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0x2290] = STACK[0x3C48];
        STACK[0x2288] = STACK[0x3C28];
        STACK[0x22A0] = STACK[0x3C78];
        result = ((uint64_t (*)(unint64_t))(v5205 - 8))(v5206);
        break;
      case 0x32:
        v5207 = STACK[0x22F0];
        v5208 = 2 * STACK[0x22F0] > 0xFFFFFFFFFFFFFFFALL || v5207 < 0;
        v5209 = 5;
        if (!v5208)
          v5209 = 0;
        v5210 = v5209 + 2 * STACK[0x22F0];
        v5211 = v5210 + v5207 > 0xFFFFFFFFFFFFFFFALL;
        STACK[0x3C50] = v1311;
        v573 = __CFADD__(v5210, v5207);
        v5212 = v5210 + v5207;
        v5213 = STACK[0x2330];
        v5214 = 2 * STACK[0x2330];
        v5215 = v573 || v5211;
        if (v5214 > 0xFFFFFFFFFFFFFFFCLL || v5213 < 0)
          v5217 = 3;
        else
          v5217 = 0;
        v5218 = v5217 + v5214;
        v5219 = v5218 + v5213;
        v5220 = __CFADD__(v5218, v5213) || v5218 + v5213 > 0xFFFFFFFFFFFFFFFCLL;
        v5221 = STACK[0x2310];
        if (2 * STACK[0x2310] > 0xFFFFFFFFFFFFFFF6 || v5221 < 0)
          v5223 = 9;
        else
          v5223 = 0;
        v5224 = v5223 + 2 * STACK[0x2310];
        v5225 = v5224 + v5221 > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v5224, v5221);
        v5226 = v5224 + v5221;
        if (v573)
          v5225 = 1;
        v5227 = STACK[0x2308];
        v5228 = 2 * STACK[0x2308];
        v5229 = v5228 > 0xFFFFFFFFFFFFFFEELL || v5227 < 0;
        v5230 = STACK[0x2320];
        v5231 = 2 * STACK[0x2320];
        if (v5229)
          v5232 = 17;
        else
          v5232 = 0;
        v5233 = v5231 > 0xFFFFFFFFFFFFFFDELL || v5230 < 0;
        v5234 = STACK[0x22E8];
        v5235 = __ROR8__(STACK[0x22E8], 63);
        if (v5233)
          v5236 = 33;
        else
          v5236 = 0;
        v573 = __CFADD__(v5235, v5234);
        v5237 = v5235 + v5234;
        v5238 = STACK[0x22F8];
        v5239 = 2 * STACK[0x22F8];
        LODWORD(v5240) = v573;
        v5241 = v5239 > 0xFFFFFFFFFFFFFFD8 || v5238 < 0;
        v5242 = STACK[0x2318];
        v5243 = 2 * STACK[0x2318];
        STACK[0x3570] = v1322;
        STACK[0x3C48] = v1306;
        if (v5241)
          v5244 = 39;
        else
          v5244 = 0;
        if (v5243 > 0xFFFFFFFFFFFFFFF0 || v5242 < 0)
          v5246 = 15;
        else
          v5246 = 0;
        v5247 = v5246 + v5243;
        v5248 = v5244 + v5239;
        v5249 = STACK[0x2328];
        v5250 = 2 * STACK[0x2328];
        v5251 = v5250 > 0xFFFFFFFFFFFFFFD0 || v5249 < 0;
        STACK[0x33D8] = v1316;
        if (v5251)
          v5252 = 47;
        else
          v5252 = 0;
        v573 = __CFADD__(v5247, v5242);
        v5253 = v5247 + v5242;
        v5254 = v573;
        if (v5237 == -1)
          v5240 = 1;
        else
          v5240 = v5240;
        v5255 = STACK[0x22E0];
        v5256 = 2 * STACK[0x22E0];
        v5257 = v5256 > 0xFFFFFFFFFFFFFFD2 || v5255 < 0;
        STACK[0x3C40] = v1337;
        if (v5257)
          v5258 = 45;
        else
          v5258 = 0;
        v573 = __CFADD__(v5248, v5238);
        v5259 = v5248 + v5238;
        v5260 = v573;
        if (v5225)
          v5261 = 9;
        else
          v5261 = 0;
        v5262 = v5236 + v5231;
        v5263 = v5252 + v5250;
        v5264 = v5232 + v5228;
        v5265 = v5258 + v5256;
        STACK[0x9B8] = v5261 + v5226;
        STACK[0xA18] = v5240 + v5237;
        if (v5220)
          v5266 = 3;
        else
          v5266 = 0;
        STACK[0xA28] = v5266 + v5219;
        if (v5253 > 0xFFFFFFFFFFFFFFF0)
          v5267 = 1;
        else
          v5267 = v5254;
        v5268 = STACK[0x2300];
        if (2 * STACK[0x2300] > 0xFFFFFFFFFFFFFFCALL || v5268 < 0)
          v5270 = 53;
        else
          v5270 = 0;
        v573 = __CFADD__(v5265, v5255);
        v5271 = v5265 + v5255;
        v5272 = v573;
        v5273 = v5262 + v5230;
        v5274 = __CFADD__(v5262, v5230);
        if (v5259 > 0xFFFFFFFFFFFFFFD8)
          v5275 = 1;
        else
          v5275 = v5260;
        if (v5215)
          v5276 = 5;
        else
          v5276 = 0;
        v2628 = v5267 == 0;
        v5277 = v5270 + 2 * STACK[0x2300];
        if (v2628)
          v5278 = 0;
        else
          v5278 = 15;
        v5279 = v5264 + v5227;
        v5280 = __CFADD__(v5264, v5227);
        if (v5273 > 0xFFFFFFFFFFFFFFDELL)
          v5274 = 1;
        if (v5275)
          v5281 = 39;
        else
          v5281 = 0;
        STACK[0x988] = v5281 + v5259;
        STACK[0x998] = v5276 + v5212;
        v5282 = v5263 + v5249;
        v5283 = __CFADD__(v5263, v5249);
        if (v5279 > 0xFFFFFFFFFFFFFFEELL)
          v5280 = 1;
        if (v5271 > 0xFFFFFFFFFFFFFFD2)
          v5284 = 1;
        else
          v5284 = v5272;
        STACK[0x978] = v5278 + v5253;
        if (v5284)
          v5285 = 45;
        else
          v5285 = 0;
        STACK[0x970] = v5285 + v5271;
        v573 = __CFADD__(v5277, v5268);
        v5286 = v5277 + v5268;
        v5287 = v573;
        if (v5282 > 0xFFFFFFFFFFFFFFD0)
          v5283 = 1;
        if (v5280)
          v5288 = 17;
        else
          v5288 = 0;
        if (v5274)
          v5289 = 33;
        else
          v5289 = 0;
        STACK[0xA30] = v5289 + v5273;
        if (v5286 > 0xFFFFFFFFFFFFFFCALL)
          v5290 = 1;
        else
          v5290 = v5287;
        if (v5283)
          v5291 = 47;
        else
          v5291 = 0;
        STACK[0x9F8] = v5291 + v5282;
        STACK[0x9A0] = v5288 + v5279;
        if (v5290)
          v5292 = 53;
        else
          v5292 = 0;
        STACK[0xA10] = v5292 + v5286;
        v5293 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523)) - 8);
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x11C0] = STACK[0x3C60];
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x11A8] = STACK[0x33D8];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x26F8] = STACK[0x3BA0];
        v5294 = STACK[0x27F0];
        STACK[0x1148] = STACK[0x3570];
        STACK[0x1138] = STACK[0x3C28];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0x1128] = STACK[0x3C20];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x1110] = STACK[0x3C08];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x10E0] = STACK[0x3C48];
        STACK[0x10B8] = STACK[0x3C78];
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0x10A0] = STACK[0x3C40];
        STACK[0x10D8] = STACK[0x3C68];
        STACK[0x10D0] = STACK[0x3C50];
        STACK[0x3270] = 51;
        STACK[0x3128] = STACK[0x22B8];
        STACK[0x3318] = STACK[0x22C0];
        STACK[0x3310] = 0x661C765BF4208041;
        STACK[0x3348] = STACK[0x2288];
        STACK[0x32E8] = 0x5B8FBBD5E48BD14FLL;
        STACK[0x32F8] = STACK[0x2290];
        STACK[0x3330] = 0xA299ED451E059C13;
        STACK[0x3288] = 0x32E284E124F24A81;
        STACK[0x3328] = 0x97B89D4EA264A1B3;
        STACK[0x3340] = STACK[0x22A8];
        STACK[0x32F0] = STACK[0x2298];
        STACK[0x3338] = STACK[0x22C8];
        STACK[0x3268] = 0xD4A6F4CF55C46B4CLL;
        STACK[0x3260] = 0x87E85B6E5A109AFALL;
        STACK[0x32E0] = STACK[0x22A0];
        STACK[0x3278] = 0x34B9D46858BE76EBLL;
        STACK[0x3258] = 0xDDB22C380449E0BALL;
        STACK[0x3320] = 0x6EBA58B5908087BFLL;
        STACK[0x3280] = STACK[0x22D8];
        result = v5293(v5294);
        break;
      case 0x37:
        v5295 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523)) - 8);
        STACK[0x3270] = 56;
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x3128] = STACK[0x1630];
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x2700] = STACK[0x3800];
        STACK[0xE90] = v1322;
        STACK[0xE88] = STACK[0x3C20];
        STACK[0x26F8] = STACK[0x3BA0];
        STACK[0xE80] = STACK[0x3C78];
        STACK[0xE78] = v1306;
        STACK[0xE70] = v1337;
        STACK[0xE58] = STACK[0x3C28];
        STACK[0xE50] = STACK[0x3C08];
        v5296 = STACK[0x27F0];
        STACK[0xE40] = v1316;
        STACK[0xE28] = STACK[0x3C68];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0xDF8] = v1311;
        STACK[0xDF0] = STACK[0x3C60];
        STACK[0x3318] = STACK[0x8A8];
        STACK[0x3310] = STACK[0x1840];
        STACK[0x3348] = STACK[0x9C8];
        STACK[0x32E8] = STACK[0x1848];
        STACK[0x32F8] = STACK[0x858];
        STACK[0x3330] = STACK[0x1838];
        STACK[0x3288] = STACK[0x1870];
        STACK[0x3328] = STACK[0x1830];
        STACK[0x3340] = STACK[0x838];
        STACK[0x32F0] = STACK[0x1620];
        STACK[0x3338] = STACK[0xA08];
        STACK[0x3268] = STACK[0x1860];
        STACK[0x3260] = STACK[0x1868];
        STACK[0x32E0] = STACK[0x1640];
        STACK[0x3278] = STACK[0x1828];
        STACK[0x3258] = STACK[0x1858];
        STACK[0x3320] = STACK[0x1878];
        STACK[0x3280] = STACK[0x8A0];
        result = v5295(v5296);
        break;
      case 0x40:
        v1372 = STACK[0x644] & 0x960DFFEB;
        v1373 = LODWORD(STACK[0x3710]) - 10422;
        v1374 = -3;
        if (v1311 >= STACK[0x3818])
          v1374 = 0;
        v1375 = v1306 - STACK[0x3808];
        v1376 = v1306 < STACK[0x3808];
        v1377 = v1316 - STACK[0x37B8];
        v1378 = -5;
        if (v1316 >= STACK[0x37B8])
          v1378 = 0;
        v1379 = v1322 - STACK[0x37B0];
        if (v1322 >= STACK[0x37B0])
          v1320 = 0;
        v1380 = STACK[0x3C78] - STACK[0x38A0];
        v1381 = -17;
        if (STACK[0x3C78] >= STACK[0x38A0])
          v1381 = 0;
        v1382 = v1337 - STACK[0x3878];
        if (v1337 >= STACK[0x3878])
          v1383 = 0;
        else
          v1383 = -15;
        v573 = STACK[0x3C68] >= STACK[0x38B0];
        v1384 = STACK[0x3C68] - STACK[0x38B0];
        STACK[0x1A88] = v1311 - STACK[0x3818] + v1374;
        STACK[0x1A30] = v1379 + v1320;
        v1385 = -39;
        if (v573)
          v1385 = 0;
        v1386 = STACK[0x3C20] - STACK[0x3898];
        v1387 = -33;
        if (STACK[0x3C20] >= STACK[0x3898])
          v1387 = 0;
        v573 = STACK[0x3C28] >= STACK[0x3890];
        v1388 = STACK[0x3C28] - STACK[0x3890];
        STACK[0x1A50] = v1380 + v1381;
        v1389 = -45;
        if (v573)
          v1389 = 0;
        v1390 = STACK[0x3C60] - STACK[0x3880];
        v1391 = -53;
        if (STACK[0x3C60] >= STACK[0x3880])
          v1391 = 0;
        STACK[0x1A58] = v1375 - v1376;
        v573 = STACK[0x3C08] >= STACK[0x38A8];
        v1392 = STACK[0x3C08] - STACK[0x38A8];
        STACK[0x1A10] = v1386 + v1387;
        STACK[0x1A40] = v1388 + v1389;
        STACK[0x1A90] = v1390 + v1391;
        STACK[0x1A08] = v1377 + v1378;
        STACK[0x1A80] = v1382 + v1383;
        v1393 = -47;
        if (v573)
          v1393 = 0;
        STACK[0x1A00] = v1384 + v1385;
        STACK[0x1A20] = v1392 + v1393;
        v1394 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * v1373)
                                                                               - (v1372 ^ 0x3D23));
        STACK[0x3B70] = STACK[0x38E0];
        STACK[0x3B68] = STACK[0x38D8];
        STACK[0x3B78] = STACK[0x3908];
        v1395 = STACK[0x3938];
        v1396 = STACK[0x3B48];
        v1397 = STACK[0x38E8];
        v1398 = STACK[0x3920];
        STACK[0x3230] = STACK[0x38F8];
        STACK[0x3228] = STACK[0x38D0];
        v1399 = STACK[0x3A98];
        STACK[0x3250] = STACK[0x38C8];
        STACK[0x3220] = STACK[0x3910];
        STACK[0x3AC8] = STACK[0x3A90];
        STACK[0x3248] = STACK[0x3900];
        result = v1394(v1399, v1395, v1398, v1397, v1396);
        break;
      case 0x41:
        v5297 = STACK[0x29C0];
        v5298 = STACK[0x1C40];
        v5299 = STACK[0x1C40] + STACK[0x29C0] > 0xFFFFFFFFFFFFFFCALL;
        STACK[0x3C58] = STACK[0x1C40] + STACK[0x29C0];
        if (__CFADD__(v5298, v5297))
          v5299 = 1;
        LODWORD(STACK[0x3C50]) = v5299;
        v5300 = STACK[0x1C18];
        v5301 = STACK[0x2970];
        v5302 = STACK[0x2970] + STACK[0x1C18] > 0xFFFFFFFFFFFFFFD0;
        STACK[0x3C48] = STACK[0x2970] + STACK[0x1C18];
        if (__CFADD__(v5301, v5300))
          v5302 = 1;
        LODWORD(STACK[0x3C40]) = v5302;
        v5303 = STACK[0x1C70];
        v5304 = STACK[0x2990];
        v5305 = STACK[0x2990] + STACK[0x1C70] > 0xFFFFFFFFFFFFFFDELL;
        STACK[0x3C38] = STACK[0x2990] + STACK[0x1C70];
        if (__CFADD__(v5304, v5303))
          v5305 = 1;
        LODWORD(STACK[0x3C30]) = v5305;
        v5306 = STACK[0x1C68];
        v5307 = STACK[0x2978];
        v5308 = STACK[0x2978] + STACK[0x1C68] > 0xFFFFFFFFFFFFFFEELL;
        STACK[0x3C00] = STACK[0x2978] + STACK[0x1C68];
        if (__CFADD__(v5307, v5306))
          v5308 = 1;
        LODWORD(STACK[0x3BF8]) = v5308;
        v5309 = STACK[0x1C50];
        v5310 = STACK[0x2988];
        v5311 = STACK[0x2988] + STACK[0x1C50] > 0xFFFFFFFFFFFFFFF6;
        STACK[0x3BF0] = STACK[0x2988] + STACK[0x1C50];
        if (__CFADD__(v5310, v5309))
          v5311 = 1;
        LODWORD(STACK[0x3BE8]) = v5311;
        v5312 = STACK[0x1C28];
        v5313 = STACK[0x2980];
        v5314 = STACK[0x1C28] + STACK[0x2980] > 0xFFFFFFFFFFFFFFFALL;
        STACK[0x3BD8] = STACK[0x1C28] + STACK[0x2980];
        if (__CFADD__(v5312, v5313))
          v5314 = 1;
        LODWORD(STACK[0x3BD0]) = v5314;
        v5315 = STACK[0x1C80];
        v5316 = STACK[0x2960];
        v5317 = STACK[0x2960] + STACK[0x1C80] > 0xFFFFFFFFFFFFFFFCLL;
        STACK[0x3BC8] = STACK[0x2960] + STACK[0x1C80];
        if (__CFADD__(v5316, v5315))
          v5317 = 1;
        LODWORD(STACK[0x3BC0]) = v5317;
        v5318 = STACK[0x29F8];
        v5319 = STACK[0x1C10];
        v5320 = STACK[0x1C10] + STACK[0x29F8] > 0xFFFFFFFFFFFFFFD8;
        STACK[0x3BB0] = STACK[0x1C10] + STACK[0x29F8];
        if (__CFADD__(v5319, v5318))
          v5320 = 1;
        LODWORD(STACK[0x3B98]) = v5320;
        v5321 = STACK[0x29D0];
        v5322 = STACK[0x1C20];
        v5323 = STACK[0x1C20] + STACK[0x29D0] > 0xFFFFFFFFFFFFFFDELL;
        STACK[0x3B90] = STACK[0x1C20] + STACK[0x29D0];
        if (__CFADD__(v5322, v5321))
          v5323 = 1;
        LODWORD(STACK[0x3B88]) = v5323;
        v5324 = STACK[0x2A00];
        v5325 = STACK[0x1C88];
        v5326 = STACK[0x2A00] + STACK[0x1C88] > 0xFFFFFFFFFFFFFFEELL;
        STACK[0x3B78] = STACK[0x2A00] + STACK[0x1C88];
        v5327 = __CFADD__(v5324, v5325) || v5326;
        LODWORD(STACK[0x3B80]) = v5327;
        v5328 = STACK[0x1C38] + STACK[0x2A08];
        v5329 = __CFADD__(STACK[0x1C38], STACK[0x2A08]) || STACK[0x1C38] + STACK[0x2A08] > 0xFFFFFFFFFFFFFFF6;
        v5330 = STACK[0x29D8] + STACK[0x1C60];
        v5331 = __CFADD__(STACK[0x29D8], STACK[0x1C60]) || STACK[0x29D8] + STACK[0x1C60] > 0xFFFFFFFFFFFFFFFALL;
        v5332 = STACK[0x29C8];
        v5333 = STACK[0x1C00];
        v5334 = STACK[0x1C00] + STACK[0x29C8] > 0xFFFFFFFFFFFFFFFCLL;
        STACK[0x3BE0] = STACK[0x1C00] + STACK[0x29C8];
        v5335 = __CFADD__(v5333, v5332) || v5334;
        v5336 = v1337;
        v5337 = STACK[0x2608] + STACK[0x25C8] > 0xFFFFFFFFFFFFFFD0;
        v5338 = v1306;
        v5339 = STACK[0x2608] + STACK[0x25C8];
        if (__CFADD__(STACK[0x2608], STACK[0x25C8]))
          v5337 = 1;
        v5340 = STACK[0x2590] + STACK[0x2618];
        v5341 = __CFADD__(STACK[0x2590], STACK[0x2618]) || STACK[0x2590] + STACK[0x2618] > 0xFFFFFFFFFFFFFFD2;
        v5342 = __CFADD__(STACK[0x25D0], STACK[0x2630]) || STACK[0x25D0] + STACK[0x2630] == -1;
        v5343 = v5342 + STACK[0x25D0] + STACK[0x2630];
        v5344 = STACK[0x2588] + STACK[0x2610];
        v5345 = __CFADD__(STACK[0x2588], STACK[0x2610]);
        v5346 = STACK[0x25F8] + STACK[0x2598];
        v5347 = __CFADD__(STACK[0x25F8], STACK[0x2598]);
        v5348 = STACK[0x25B8] + STACK[0x2620];
        v5349 = __CFADD__(STACK[0x25B8], STACK[0x2620]);
        v5350 = STACK[0x25E0] + STACK[0x25B0];
        v5351 = __CFADD__(STACK[0x25E0], STACK[0x25B0]);
        v5352 = v5350 > 0xFFFFFFFFFFFFFFFCLL || v5351;
        if (v5344 > 0xFFFFFFFFFFFFFFFALL)
          v5345 = 1;
        if (v5346 > 0xFFFFFFFFFFFFFFF6)
          v5347 = 1;
        if (v5347)
          v5353 = 9;
        else
          v5353 = 0;
        v5354 = v5353 + v5346;
        v5355 = STACK[0x2600] + STACK[0x25A8];
        v5356 = __CFADD__(STACK[0x2600], STACK[0x25A8]);
        v5357 = STACK[0x2628] + STACK[0x25D8];
        v5358 = __CFADD__(STACK[0x2628], STACK[0x25D8]);
        v2628 = v5352 == 0;
        v5359 = 3;
        if (v2628)
          v5359 = 0;
        v5360 = v5359 + v5350;
        v5361 = v5348 > 0xFFFFFFFFFFFFFFF0 || v5349;
        if (v5345)
          v5362 = -5;
        else
          v5362 = 0;
        v5363 = v5362 - v5344;
        if (v5357 > 0xFFFFFFFFFFFFFFEELL)
          v5358 = 1;
        v5364 = STACK[0x25E8] + STACK[0x25A0];
        v5365 = __CFADD__(STACK[0x25E8], STACK[0x25A0]);
        if (v5361)
          v5366 = 15;
        else
          v5366 = 0;
        v5367 = v5366 + v5348;
        v2628 = !v5358;
        v5368 = 17;
        if (v2628)
          v5368 = 0;
        v5369 = v5368 + v5357;
        v5370 = v5355 > 0xFFFFFFFFFFFFFFDELL || v5356;
        v5371 = v5364 > 0xFFFFFFFFFFFFFFD8 || v5365;
        if (v5370)
          v5372 = 33;
        else
          v5372 = 0;
        v5373 = v5372 + v5355;
        if (v5371)
          v5374 = 39;
        else
          v5374 = 0;
        v5375 = v5374 + v5364;
        v5376 = STACK[0x25F0] + STACK[0x25C0];
        v5377 = __CFADD__(STACK[0x25F0], STACK[0x25C0]);
        if (v5341)
          v5378 = 45;
        else
          v5378 = 0;
        if (v5376 > 0xFFFFFFFFFFFFFFCALL)
          v5377 = 1;
        if (v5337)
          v5379 = 47;
        else
          v5379 = 0;
        if (v5377)
          v5380 = 53;
        else
          v5380 = 0;
        v573 = v5338 >= v5343;
        v5381 = v5338 - v5343;
        v5382 = !v573;
        STACK[0x17E8] = v5381 - v5382;
        v573 = v1311 >= v5360;
        v5383 = v1311 - v5360;
        v5384 = v1316 + v5363;
        if (v573)
          v5385 = 0;
        else
          v5385 = -3;
        if (v1316 >= v5384)
          v5386 = 0;
        else
          v5386 = -5;
        v573 = v1322 >= v5354;
        v5387 = v1322 - v5354;
        if (v573)
          v5388 = 0;
        else
          v5388 = -9;
        v573 = STACK[0x3C20] >= v5373;
        v5389 = STACK[0x3C20] - v5373;
        v5390 = -33;
        if (v573)
          v5390 = 0;
        v573 = v5336 >= v5367;
        v5391 = v5336 - v5367;
        v5392 = -15;
        if (v573)
          v5392 = 0;
        v573 = STACK[0x3C78] >= v5369;
        v5393 = STACK[0x3C78] - v5369;
        v5394 = v5378 + v5340;
        v5395 = v5379 + v5339;
        v5396 = v5380 + v5376;
        STACK[0x1800] = v5383 + v5385;
        STACK[0x1818] = v5386 + v5384;
        STACK[0x17E0] = v5389 + v5390;
        v5397 = -17;
        if (v573)
          v5397 = 0;
        v5398 = STACK[0x3C68] - v5375;
        v5399 = -39;
        if (STACK[0x3C68] >= v5375)
          v5399 = 0;
        v5400 = STACK[0x3C08] - v5395;
        v5401 = -47;
        if (STACK[0x3C08] >= v5395)
          v5401 = 0;
        v5402 = STACK[0x29E8] + STACK[0x1C78];
        LODWORD(v5403) = __CFADD__(STACK[0x29E8], STACK[0x1C78]);
        v5404 = STACK[0x1BE8] + STACK[0x29B8];
        v5405 = __CFADD__(STACK[0x1BE8], STACK[0x29B8]);
        if (v5402 == -1)
          v5403 = 1;
        else
          v5403 = v5403;
        v573 = STACK[0x3C28] >= v5394;
        v5406 = STACK[0x3C28] - v5394;
        v5407 = -45;
        if (v573)
          v5407 = 0;
        v573 = STACK[0x3C60] >= v5396;
        v5408 = STACK[0x3C60] - v5396;
        STACK[0x17F0] = v5387 + v5388;
        STACK[0x17D8] = v5391 + v5392;
        STACK[0x1808] = v5393 + v5397;
        STACK[0x1810] = v5398 + v5399;
        STACK[0x17D0] = v5400 + v5401;
        STACK[0x17F8] = v5406 + v5407;
        v5409 = -53;
        if (v573)
          v5409 = 0;
        STACK[0x17C8] = v5408 + v5409;
        STACK[0x32E8] = v5403 + v5402;
        if (v5335)
          v5410 = 3;
        else
          v5410 = 0;
        if (v5331)
          v5411 = 5;
        else
          v5411 = 0;
        STACK[0x3268] = v5411 + v5330;
        if (v5329)
          v5412 = 9;
        else
          v5412 = 0;
        STACK[0x3310] = v5412 + v5328;
        v5413 = STACK[0x1BE0] + STACK[0x29F0];
        v5414 = __CFADD__(STACK[0x1BE0], STACK[0x29F0]);
        if (v5413 > 0xFFFFFFFFFFFFFFF0)
          v5414 = 1;
        if (v5414)
          v5415 = 15;
        else
          v5415 = 0;
        STACK[0x3260] = v5415 + v5413;
        v5416 = STACK[0x29A8] + STACK[0x1C48];
        v5417 = __CFADD__(STACK[0x29A8], STACK[0x1C48]);
        if (LODWORD(STACK[0x3B80]))
          v5418 = 17;
        else
          v5418 = 0;
        STACK[0x3278] = v5418 + STACK[0x3B78];
        v5419 = v5404 > 0xFFFFFFFFFFFFFFD2 || v5405;
        if (LODWORD(STACK[0x3B88]))
          v5420 = 33;
        else
          v5420 = 0;
        STACK[0x3288] = v5420 + STACK[0x3B90];
        STACK[0x3330] = v5410 + STACK[0x3BE0];
        v5421 = STACK[0x2968] + STACK[0x1BF0];
        v5422 = __CFADD__(STACK[0x2968], STACK[0x1BF0]);
        if (v5416 > 0xFFFFFFFFFFFFFFD0)
          v5417 = 1;
        if (v5419)
          v5423 = 45;
        else
          v5423 = 0;
        v5424 = STACK[0x3B98];
        STACK[0x3320] = v5423 + v5404;
        if (v5424)
          v5425 = 39;
        else
          v5425 = 0;
        STACK[0x3258] = v5425 + STACK[0x3BB0];
        if (v5417)
          v5426 = 47;
        else
          v5426 = 0;
        STACK[0x3328] = v5426 + v5416;
        v5427 = v5421 == -1 || v5422;
        if (LODWORD(STACK[0x3BC0]))
          v5428 = 3;
        else
          v5428 = 0;
        STACK[0x32F0] = v5428 + STACK[0x3BC8];
        v5429 = STACK[0x3BD0];
        STACK[0x32F8] = v5427 + v5421;
        if (v5429)
          v5430 = 5;
        else
          v5430 = 0;
        STACK[0x3128] = v5430 + STACK[0x3BD8];
        v5431 = STACK[0x1BF8] + STACK[0x29A0];
        v5432 = __CFADD__(STACK[0x1BF8], STACK[0x29A0]);
        v5433 = STACK[0x1C08] + STACK[0x29B0];
        v5434 = __CFADD__(STACK[0x1C08], STACK[0x29B0]);
        if (LODWORD(STACK[0x3BE8]))
          v5435 = 9;
        else
          v5435 = 0;
        STACK[0x3280] = v5435 + STACK[0x3BF0];
        if (v5431 > 0xFFFFFFFFFFFFFFF0)
          v5432 = 1;
        if (v5432)
          v5436 = 15;
        else
          v5436 = 0;
        STACK[0x3318] = v5436 + v5431;
        v5437 = v5433 > 0xFFFFFFFFFFFFFFD2 || v5434;
        if (LODWORD(STACK[0x3BF8]))
          v5438 = 17;
        else
          v5438 = 0;
        STACK[0x32E0] = v5438 + STACK[0x3C00];
        if (v5437)
          v5439 = 45;
        else
          v5439 = 0;
        STACK[0x3348] = v5439 + v5433;
        if (LODWORD(STACK[0x3C40]))
          v5440 = 47;
        else
          v5440 = 0;
        STACK[0x3338] = v5440 + STACK[0x3C48];
        if (LODWORD(STACK[0x3C50]))
          v5441 = 53;
        else
          v5441 = 0;
        STACK[0x3340] = v5441 + STACK[0x3C58];
        v5442 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9523)) - 8);
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x26F8] = STACK[0x3BA0];
        v5443 = STACK[0x27F0];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0x3270] = 66;
        result = v5442(v5443);
        break;
      case 0x46:
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x36C8] = STACK[0x28D8];
        STACK[0x3810] = STACK[0x28E0];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x3688] = STACK[0x39E0];
        STACK[0x2FE8] = STACK[0x2800];
        STACK[0x2FE0] = STACK[0x2808];
        STACK[0x3C58] = STACK[0x33D0];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x3C40] = STACK[0x33C8];
        STACK[0x37F8] = STACK[0x28E8];
        STACK[0x2FC8] = STACK[0x2810];
        STACK[0x2FD8] = STACK[0x28B0];
        STACK[0x2FF0] = STACK[0x2AE0];
        STACK[0x2FC0] = STACK[0x2AA8];
        STACK[0x11B8] = STACK[0x3C78];
        STACK[0x2FB0] = STACK[0x28F0];
        STACK[0x3808] = STACK[0x2A10];
        STACK[0x11B0] = v1306;
        STACK[0x2FA8] = STACK[0x28B8];
        STACK[0x2FA0] = STACK[0x2910];
        STACK[0x2FB8] = STACK[0x2AE8];
        STACK[0x2FD0] = STACK[0x28F8];
        STACK[0x3680] = STACK[0x39E8];
        STACK[0x26F8] = STACK[0x3BA0];
        STACK[0x2F90] = STACK[0x2918];
        STACK[0x3668] = STACK[0x39D8];
        STACK[0x37F0] = STACK[0x2AF0];
        STACK[0x2F88] = STACK[0x2818];
        STACK[0x3678] = STACK[0x39F8];
        STACK[0x3C50] = STACK[0x33C0];
        STACK[0x3670] = STACK[0x3860];
        STACK[0x2F78] = STACK[0x2820];
        STACK[0x2F98] = STACK[0x2A18];
        STACK[0x2F80] = STACK[0x2920];
        STACK[0x1188] = STACK[0x3C08];
        STACK[0x1EB0] = STACK[0x3C60];
        STACK[0x3660] = STACK[0x3838];
        STACK[0x2F70] = STACK[0x2828];
        STACK[0x2F68] = STACK[0x2900];
        STACK[0x3A70] = STACK[0x36C0];
        STACK[0x30E0] = STACK[0x2A20];
        STACK[0x3658] = STACK[0x39D0];
        STACK[0x3650] = STACK[0x3840];
        STACK[0x2F50] = STACK[0x2928];
        STACK[0x2F48] = STACK[0x2930];
        STACK[0x2F40] = STACK[0x28C0];
        STACK[0x2F38] = STACK[0x2830];
        STACK[0x3640] = STACK[0x39C8];
        STACK[0x3648] = STACK[0x3BA8];
        STACK[0x3638] = STACK[0x3848];
        STACK[0x3A78] = STACK[0x36B8];
        STACK[0x3630] = STACK[0x3A00];
        STACK[0x1170] = v1322;
        STACK[0x2F58] = STACK[0x2A28];
        STACK[0x3628] = STACK[0x3A10];
        STACK[0x1168] = STACK[0x3C28];
        STACK[0x1150] = v1311;
        STACK[0x3618] = STACK[0x3868];
        STACK[0x3610] = STACK[0x39F0];
        STACK[0x3620] = STACK[0x3850];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x2F30] = STACK[0x2AB0];
        STACK[0x3608] = STACK[0x3858];
        STACK[0x3600] = STACK[0x3870];
        STACK[0x2F28] = STACK[0x2838];
        STACK[0x35F8] = STACK[0x3A08];
        STACK[0x2F20] = STACK[0x2840];
        STACK[0x3C60] = STACK[0x2938];
        STACK[0x37E8] = STACK[0x2AF8];
        STACK[0x30D0] = STACK[0x2A30];
        STACK[0x2F10] = STACK[0x2AB8];
        STACK[0x2F08] = STACK[0x2848];
        STACK[0x2F18] = STACK[0x2850];
        STACK[0x35F0] = STACK[0x3AD0];
        STACK[0x2F00] = STACK[0x2AC0];
        STACK[0x3C48] = STACK[0x33B8];
        STACK[0x2EF8] = STACK[0x2858];
        STACK[0x35E8] = STACK[0x3AD8];
        STACK[0x35E0] = STACK[0x3AE0];
        STACK[0x35D8] = STACK[0x3AE8];
        STACK[0x1118] = v1316;
        STACK[0x3A80] = STACK[0x36B0];
        STACK[0x2EE8] = STACK[0x2860];
        STACK[0x2EF0] = STACK[0x2868];
        STACK[0x2ED8] = STACK[0x2940];
        STACK[0x2EE0] = STACK[0x2AC8];
        STACK[0x35D0] = STACK[0x3AF0];
        STACK[0x2ED0] = STACK[0x2A38];
        STACK[0x2EC0] = STACK[0x2870];
        STACK[0x2EB8] = STACK[0x2878];
        STACK[0x10F8] = STACK[0x3C20];
        STACK[0x2EC8] = STACK[0x2908];
        STACK[0x2EB0] = STACK[0x28C8];
        STACK[0x2EA8] = STACK[0x2948];
        STACK[0x2EA0] = STACK[0x2880];
        STACK[0x3A88] = STACK[0x36A8];
        STACK[0x2E98] = STACK[0x2B00];
        STACK[0x35C8] = STACK[0x3AF8];
        STACK[0x35C0] = STACK[0x3B08];
        STACK[0x39C0] = STACK[0x36A0];
        STACK[0x35B8] = STACK[0x3B00];
        STACK[0x10C0] = STACK[0x3C68];
        STACK[0x30E8] = STACK[0x2B08];
        STACK[0x35B0] = STACK[0x3B10];
        STACK[0x35A8] = STACK[0x3B18];
        STACK[0x3A90] = STACK[0x3698];
        LODWORD(STACK[0x2F64]) = STACK[0x27FC];
        STACK[0x2E90] = STACK[0x28D0];
        STACK[0x10A8] = v1337;
        STACK[0x35A0] = STACK[0x3B20];
        STACK[0x30D8] = STACK[0x2A40];
        STACK[0x2E88] = STACK[0x2AD0];
        STACK[0x2E78] = STACK[0x2888];
        STACK[0x3C68] = STACK[0x2950];
        STACK[0x3598] = STACK[0x3B30];
        STACK[0x2E70] = STACK[0x2890];
        STACK[0x2E68] = STACK[0x2898];
        STACK[0x3588] = STACK[0x3B28];
        STACK[0x3818] = STACK[0x2A48];
        STACK[0x2E60] = STACK[0x2AD8];
        STACK[0x3A98] = STACK[0x3690];
        STACK[0x2E58] = STACK[0x28A0];
        STACK[0x2E80] = STACK[0x2B10];
        STACK[0x2E50] = STACK[0x2958];
        STACK[0x3580] = STACK[0x3B38];
        STACK[0x2E48] = STACK[0x28A8];
        LODWORD(STACK[0x3C08]) = 71;
        LODWORD(STACK[0x3590]) = STACK[0x3710];
        STACK[0x3B58] = STACK[0x1808];
        STACK[0x3120] = 0x21BAADC71E2E67AELL;
        STACK[0x3160] = 0x85D9DC5E933D8215;
        STACK[0x3820] = 0xDE63DAE4FC78A846;
        STACK[0x3290] = 0xF435247866A89D6ALL;
        STACK[0x3B50] = STACK[0x17D0];
        STACK[0x3108] = STACK[0x1800];
        STACK[0x3178] = STACK[0x17E8];
        STACK[0x31A8] = 0x2EE818AC82F341C6;
        STACK[0x30F8] = STACK[0x17F0];
        STACK[0x3100] = STACK[0x17D8];
        STACK[0x3118] = STACK[0x17F8];
        STACK[0x3C20] = 0x77BBC4BB7B718F6ELL;
        STACK[0x3168] = 0x1BD1E5A80B860D97;
        STACK[0x3C28] = 0x4F32EF6C4CA22D86;
        STACK[0x3B48] = STACK[0x1810];
        STACK[0x3B60] = 0x8EA56294FB27789DLL;
        STACK[0x30F0] = STACK[0x17E0];
        STACK[0x3B40] = STACK[0x17C8];
        STACK[0x3110] = STACK[0x1818];
        STACK[0x3800] = 0xB597BB10BF49CF5;
        STACK[0x3158] = 0x8DB13C47EC9C5060;
        result = sub_10069FFC8();
        break;
      case 0x4A:
        v5444 = STACK[0x3710];
        v5445 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 10112));
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x11F0] = STACK[0x3C60];
        STACK[0x36C8] = STACK[0x28D8];
        STACK[0x11E8] = v1337;
        STACK[0x3810] = STACK[0x28E0];
        STACK[0x11E0] = STACK[0x3C20];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x3688] = STACK[0x39E0];
        STACK[0x2FE8] = STACK[0x2800];
        STACK[0x11D0] = STACK[0x3C08];
        STACK[0x2FE0] = STACK[0x2808];
        STACK[0x3C58] = STACK[0x33D0];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x3C40] = STACK[0x33C8];
        STACK[0x37F8] = STACK[0x28E8];
        STACK[0x2FC8] = STACK[0x2810];
        STACK[0x2FD8] = STACK[0x28B0];
        STACK[0x2FF0] = STACK[0x2AE0];
        STACK[0x2FC0] = STACK[0x2AA8];
        STACK[0x2FB0] = STACK[0x28F0];
        STACK[0x3808] = STACK[0x2A10];
        STACK[0x2FA8] = STACK[0x28B8];
        STACK[0x2FA0] = STACK[0x2910];
        STACK[0x2FB8] = STACK[0x2AE8];
        STACK[0x2FD0] = STACK[0x28F8];
        STACK[0x3680] = STACK[0x39E8];
        STACK[0x26F8] = STACK[0x3BA0];
        STACK[0x2F90] = STACK[0x2918];
        STACK[0x3668] = STACK[0x39D8];
        STACK[0x37F0] = STACK[0x2AF0];
        STACK[0x2F88] = STACK[0x2818];
        STACK[0x3678] = STACK[0x39F8];
        STACK[0x3C50] = STACK[0x33C0];
        STACK[0x1198] = v1316;
        STACK[0x3670] = STACK[0x3860];
        STACK[0x2F78] = STACK[0x2820];
        STACK[0x2F98] = STACK[0x2A18];
        STACK[0x2F80] = STACK[0x2920];
        STACK[0x3660] = STACK[0x3838];
        STACK[0x2F70] = STACK[0x2828];
        STACK[0x2F68] = STACK[0x2900];
        STACK[0x3A70] = STACK[0x36C0];
        STACK[0x30E0] = STACK[0x2A20];
        STACK[0x3658] = STACK[0x39D0];
        STACK[0x3650] = STACK[0x3840];
        STACK[0x2F50] = STACK[0x2928];
        STACK[0x2F48] = STACK[0x2930];
        STACK[0x2F40] = STACK[0x28C0];
        STACK[0x2F38] = STACK[0x2830];
        STACK[0x1180] = STACK[0x3C78];
        STACK[0x3640] = STACK[0x39C8];
        STACK[0x3648] = STACK[0x3BA8];
        STACK[0x3638] = STACK[0x3848];
        STACK[0x3A78] = STACK[0x36B8];
        STACK[0x3630] = STACK[0x3A00];
        STACK[0x2F58] = STACK[0x2A28];
        STACK[0x3628] = STACK[0x3A10];
        STACK[0x1158] = v1306;
        STACK[0x3618] = STACK[0x3868];
        STACK[0x3610] = STACK[0x39F0];
        STACK[0x3620] = STACK[0x3850];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x2F30] = STACK[0x2AB0];
        STACK[0x3608] = STACK[0x3858];
        STACK[0x1140] = v1322;
        STACK[0x3600] = STACK[0x3870];
        STACK[0x2F28] = STACK[0x2838];
        STACK[0x35F8] = STACK[0x3A08];
        STACK[0x2F20] = STACK[0x2840];
        STACK[0x3C60] = STACK[0x2938];
        STACK[0x37E8] = STACK[0x2AF8];
        STACK[0x30D0] = STACK[0x2A30];
        STACK[0x2F10] = STACK[0x2AB8];
        STACK[0x2F08] = STACK[0x2848];
        STACK[0x2F18] = STACK[0x2850];
        STACK[0x35F0] = STACK[0x3AD0];
        STACK[0x2F00] = STACK[0x2AC0];
        STACK[0x3C48] = STACK[0x33B8];
        STACK[0x2EF8] = STACK[0x2858];
        STACK[0x35E8] = STACK[0x3AD8];
        STACK[0x35E0] = STACK[0x3AE0];
        STACK[0x35D8] = STACK[0x3AE8];
        STACK[0x3A80] = STACK[0x36B0];
        STACK[0x2EE8] = STACK[0x2860];
        STACK[0x2EF0] = STACK[0x2868];
        STACK[0x2ED8] = STACK[0x2940];
        STACK[0x2EE0] = STACK[0x2AC8];
        STACK[0x35D0] = STACK[0x3AF0];
        STACK[0x2ED0] = STACK[0x2A38];
        STACK[0x2EC0] = STACK[0x2870];
        STACK[0x2EB8] = STACK[0x2878];
        STACK[0x2EC8] = STACK[0x2908];
        STACK[0x2EB0] = STACK[0x28C8];
        STACK[0x2EA8] = STACK[0x2948];
        STACK[0x2EA0] = STACK[0x2880];
        STACK[0x3A88] = STACK[0x36A8];
        STACK[0x10C8] = STACK[0x3C68];
        STACK[0x2E98] = STACK[0x2B00];
        STACK[0x35C8] = STACK[0x3AF8];
        STACK[0x35C0] = STACK[0x3B08];
        STACK[0x39C0] = STACK[0x36A0];
        STACK[0x35B8] = STACK[0x3B00];
        STACK[0x30E8] = STACK[0x2B08];
        STACK[0x35B0] = STACK[0x3B10];
        STACK[0x10B0] = STACK[0x3C28];
        STACK[0x35A8] = STACK[0x3B18];
        STACK[0x3A90] = STACK[0x3698];
        LODWORD(STACK[0x2F64]) = STACK[0x27FC];
        STACK[0x2E90] = STACK[0x28D0];
        STACK[0x35A0] = STACK[0x3B20];
        STACK[0x30D8] = STACK[0x2A40];
        STACK[0x2E88] = STACK[0x2AD0];
        STACK[0x2E78] = STACK[0x2888];
        STACK[0x3C68] = STACK[0x2950];
        STACK[0x3598] = STACK[0x3B30];
        STACK[0x2E70] = STACK[0x2890];
        STACK[0x2E68] = STACK[0x2898];
        STACK[0x3588] = STACK[0x3B28];
        STACK[0x3818] = STACK[0x2A48];
        STACK[0x2E60] = STACK[0x2AD8];
        STACK[0x3A98] = STACK[0x3690];
        STACK[0x2E58] = STACK[0x28A0];
        STACK[0x2E80] = STACK[0x2B10];
        STACK[0x1120] = v1311;
        STACK[0x2E50] = STACK[0x2958];
        STACK[0x3580] = STACK[0x3B38];
        STACK[0x2E48] = STACK[0x28A8];
        LODWORD(STACK[0x3C08]) = 75;
        LODWORD(STACK[0x3590]) = v5444;
        STACK[0x3B58] = STACK[0x898];
        STACK[0x3120] = STACK[0x1A30];
        STACK[0x3160] = STACK[0x1A40];
        STACK[0x3820] = STACK[0x1A50];
        STACK[0x3290] = STACK[0x1A08];
        STACK[0x3B50] = STACK[0x8E8];
        STACK[0x3108] = STACK[0x1618];
        STACK[0x3178] = STACK[0x1608];
        STACK[0x31A8] = STACK[0x1A88];
        STACK[0x30F8] = STACK[0x8D0];
        STACK[0x3100] = STACK[0xA20];
        STACK[0x3118] = STACK[0x848];
        STACK[0x3C20] = STACK[0x1A90];
        STACK[0x3168] = STACK[0x1A58];
        STACK[0x3C28] = STACK[0x1A00];
        STACK[0x3B48] = STACK[0x1638];
        STACK[0x3B60] = STACK[0x1A20];
        STACK[0x30F0] = STACK[0x9B0];
        STACK[0x3B40] = STACK[0x9A8];
        STACK[0x3110] = STACK[0x8F0];
        STACK[0x3800] = STACK[0x1A80];
        STACK[0x3158] = STACK[0x1A10];
        result = v5445();
        break;
      case 0x6C:
        v5446 = STACK[0x3710];
        v5447 = *(uint64_t (**)(void))(STACK[0x3C70]
                                    + 8
                                    * ((LODWORD(STACK[0x3710]) - 10456) ^ (10612
                                                                         * (((STACK[0x1F88] >> (63
                                                                                              - LODWORD(STACK[0x207C]))) & 1) == 0))));
        STACK[0x3C00] = 109;
        LODWORD(STACK[0x3AC0]) = v5446;
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x3880] = STACK[0x3500];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x38F8] = STACK[0x3460];
        STACK[0x38F0] = STACK[0x3468];
        STACK[0x33E0] = STACK[0x2180];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x3920] = STACK[0x3470];
        STACK[0x3568] = STACK[0x3130];
        STACK[0x3918] = STACK[0x3478];
        STACK[0x3980] = v1337;
        STACK[0x3938] = STACK[0x3480];
        STACK[0x3560] = STACK[0x3138];
        STACK[0x3930] = STACK[0x3418];
        STACK[0x3878] = STACK[0x3508];
        STACK[0x3450] = v1337;
        v5448 = STACK[0x3C60];
        STACK[0x3C38] = STACK[0x3C60];
        STACK[0x3928] = STACK[0x3510];
        STACK[0x3448] = v1311;
        v5449 = STACK[0x3C08];
        STACK[0x3BB0] = STACK[0x3C08];
        STACK[0x26F8] = STACK[0x3BA0];
        STACK[0x37D0] = STACK[0x3488];
        STACK[0x3558] = STACK[0x3140];
        STACK[0x37C8] = STACK[0x33E8];
        STACK[0x3908] = STACK[0x34E0];
        STACK[0x37C0] = STACK[0x3420];
        STACK[0x3550] = STACK[0x3148];
        STACK[0x3900] = STACK[0x33F0];
        STACK[0x3440] = v1306;
        v5450 = STACK[0x3C20];
        STACK[0x3A18] = STACK[0x3C20];
        STACK[0x39B0] = v1306;
        STACK[0x37B8] = STACK[0x33F8];
        LODWORD(STACK[0x37D8]) = STACK[0x3400];
        STACK[0x3978] = v5449;
        STACK[0x38E8] = STACK[0x3490];
        STACK[0x3910] = STACK[0x3518];
        STACK[0x37B0] = STACK[0x3428];
        STACK[0x37A8] = STACK[0x3430];
        STACK[0x37A0] = STACK[0x3498];
        STACK[0x3438] = STACK[0x2188];
        STACK[0x3960] = v1311;
        STACK[0x3798] = STACK[0x34E8];
        STACK[0x3BF8] = STACK[0x2198];
        STACK[0x3398] = STACK[0x21A8];
        STACK[0x3970] = STACK[0x3C78];
        v5451 = STACK[0x3C28];
        STACK[0x33B0] = STACK[0x3C28];
        STACK[0x3548] = STACK[0x3180];
        STACK[0x3790] = STACK[0x34F0];
        STACK[0x3788] = STACK[0x34A0];
        v5452 = STACK[0x3C68];
        STACK[0x3388] = STACK[0x3C68];
        STACK[0x3540] = STACK[0x21C0];
        STACK[0x38E0] = STACK[0x34F8];
        STACK[0x3780] = STACK[0x3028];
        STACK[0x38B0] = STACK[0x3030];
        STACK[0x3778] = STACK[0x3038];
        STACK[0x38D0] = STACK[0x3520];
        STACK[0x38D8] = STACK[0x34B0];
        STACK[0x38C8] = STACK[0x34A8];
        STACK[0x3770] = STACK[0x34B8];
        STACK[0x38C0] = STACK[0x3098];
        STACK[0x3768] = STACK[0x3040];
        STACK[0x3760] = STACK[0x3048];
        STACK[0x3958] = v5448;
        STACK[0x3758] = STACK[0x3528];
        STACK[0x3570] = v1322;
        STACK[0x3968] = v1322;
        STACK[0x3BE8] = STACK[0x21C8];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x3748] = STACK[0x30A0];
        STACK[0x3BF0] = v5450;
        STACK[0x3740] = STACK[0x34C0];
        STACK[0x3738] = STACK[0x2FF8];
        STACK[0x38B8] = STACK[0x3530];
        STACK[0x3750] = STACK[0x3538];
        STACK[0x3948] = v5451;
        STACK[0x3950] = v5452;
        STACK[0x38A8] = STACK[0x30C8];
        STACK[0x38A0] = STACK[0x3578];
        STACK[0x3730] = STACK[0x3020];
        STACK[0x33D8] = v1316;
        STACK[0x3940] = v1316;
        STACK[0x3728] = STACK[0x3050];
        STACK[0x3720] = STACK[0x30A8];
        STACK[0x3718] = STACK[0x34C8];
        STACK[0x3380] = STACK[0x2190];
        STACK[0x3700] = STACK[0x3000];
        STACK[0x36F8] = STACK[0x3058];
        STACK[0x3898] = STACK[0x34D0];
        STACK[0x3BE0] = STACK[0x21B0];
        STACK[0x3708] = STACK[0x34D8];
        STACK[0x36E8] = STACK[0x3060];
        STACK[0x3890] = STACK[0x3068];
        STACK[0x36E0] = STACK[0x30B0];
        STACK[0x36F0] = STACK[0x3088];
        STACK[0x3390] = STACK[0x21B8];
        STACK[0x36D8] = STACK[0x3008];
        STACK[0x33A8] = STACK[0x2178];
        STACK[0x3C30] = STACK[0x21A0];
        STACK[0x36D0] = STACK[0x3080];
        result = v5447();
        break;
      case 0x6F:
        v1400 = STACK[0x3C18];
        v1401 = (STACK[0x638] | (((STACK[0x5F8] | (((STACK[0x600] | ((unint64_t)(STACK[0x6E0]
                                                                                      + ((*(_BYTE *)(STACK[0x3C18] + STACK[0x708]) ^ 0xC3) + 85)) << 16))
                                                  + STACK[0x620]) << 16))
                                + STACK[0x630]) << 8)) ^ 0xA000A4CC13AA4ALL;
        if (v1401 >= 0xFFFFFFFFFFFFFFD1)
          v1402 = 47;
        else
          v1402 = 0;
        v1403 = v1402 + v1401;
        STACK[0x3738] = v1402 + v1401;
        v1404 = STACK[0x678] + v1402 + v1401;
        v1405 = __CFADD__(STACK[0x678], v1403);
        if (v1404 > 0xFFFFFFFFFFFFFFD0)
          v1405 = 1;
        if (v1405)
          v1406 = 47;
        else
          v1406 = 0;
        v1407 = v1406 + v1404;
        v1408 = 47 * v1407;
        v1409 = 47 * ((v1407 * (unsigned __int128)0x2FuLL) >> 64);
        v573 = __CFADD__(v1409, v1408);
        v1410 = v1409 + v1408;
        if (v573)
          v1411 = 47;
        else
          v1411 = 0;
        v1412 = (unint64_t)(v1411 + v1410) > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v1411, v1410);
        v1413 = v1411 + v1410;
        v1414 = ((*(_BYTE *)(v1400 + STACK[0x710]) ^ 0xE3) >> 3) | (32
                                                                                   * (*(_BYTE *)(v1400 + STACK[0x710]) ^ 0xE3));
        v1415 = *(_BYTE *)(v1400 + STACK[0x700]);
        v1416 = v1400;
        v1417 = ((*(_BYTE *)(v1400 + STACK[0x6F8]) ^ 0xE) >> 3) | (32
                                                                                  * (*(_BYTE *)(v1400 + STACK[0x6F8]) ^ 0xE));
        if (v573)
          v1412 = 1;
        v1418 = (STACK[0x628] | (((STACK[0x5F0] | ((((unint64_t)(STACK[0x660]
                                                                      + (v1414 << 8)
                                                                      + STACK[0x718]) << 16) | ((unint64_t)(((v1415 - 87) ^ 0xFB) + 85) << 8) | v1417) << 16))
                                + STACK[0x618]) << 8)) ^ 0x720000E816BALL;
        if (v1418 <= 0xFFFFFFFFFFFFFFD0)
          v1419 = 0;
        else
          v1419 = 47;
        v1420 = v1419 + v1418;
        STACK[0x3720] = v1419 + v1418;
        if (v1412)
          v1421 = 47;
        else
          v1421 = 0;
        v1422 = v1413 + v1420 + v1421;
        if (v1420 > v1422 || v1422 > 0xFFFFFFFFFFFFFFD0)
          v1424 = 47;
        else
          v1424 = 0;
        v1425 = v1424 + v1422;
        v1426 = 47 * v1425;
        v1427 = 47 * ((v1425 * (unsigned __int128)0x2FuLL) >> 64);
        v573 = __CFADD__(v1427, v1426);
        v1428 = v1427 + v1426;
        if (v573)
          v1429 = 47;
        else
          v1429 = 0;
        STACK[0x3C50] = v1429 + v1428;
        v1430 = __CFADD__(v1429, v1428) || (unint64_t)(v1429 + v1428) > 0xFFFFFFFFFFFFFFD0;
        LODWORD(STACK[0x3C48]) = v1430;
        if (v1401 >= 0xFFFFFFFFFFFFFFD3)
          v1431 = 45;
        else
          v1431 = 0;
        v1432 = v1431 + v1401;
        STACK[0x3730] = v1431 + v1401;
        v1433 = STACK[0x680] + v1431 + v1401 > 0xFFFFFFFFFFFFFFD2;
        v1434 = STACK[0x680] + v1432;
        if (__CFADD__(STACK[0x680], v1432))
          v1433 = 1;
        if (v1418 >= 0xFFFFFFFFFFFFFFD3)
          v1435 = 45;
        else
          v1435 = 0;
        v1436 = v1435 + v1418;
        STACK[0x3AC8] = v1436;
        if (v1433)
          v1437 = 45;
        else
          v1437 = 0;
        v1438 = v1437 + v1434;
        v1439 = 45 * v1438;
        v1440 = 45 * ((v1438 * (unsigned __int128)0x2DuLL) >> 64);
        v573 = __CFADD__(v1440, v1439);
        v1441 = v1440 + v1439;
        if (v573)
          v1442 = 45;
        else
          v1442 = 0;
        v573 = __CFADD__(v1442, v1441);
        v1443 = v1442 + v1441;
        v1444 = v573;
        if (v1443 > 0xFFFFFFFFFFFFFFD2)
          v1444 = 1;
        if (v1444)
          v1445 = 45;
        else
          v1445 = 0;
        v1446 = v1443 + v1436 + v1445;
        if (v1446 > 0xFFFFFFFFFFFFFFD2 || v1436 > v1446)
          v1448 = 45;
        else
          v1448 = 0;
        v1449 = v1448 + v1446;
        v1450 = 45 * v1449;
        v1451 = 45 * ((v1449 * (unsigned __int128)0x2DuLL) >> 64);
        v573 = __CFADD__(v1451, v1450);
        v1452 = v1451 + v1450;
        if (v573)
          v1453 = 45;
        else
          v1453 = 0;
        STACK[0x3C40] = v1453 + v1452;
        v1454 = __CFADD__(v1453, v1452) || (unint64_t)(v1453 + v1452) > 0xFFFFFFFFFFFFFFD2;
        LODWORD(STACK[0x3C38]) = v1454;
        if (v1401 >= 0xFFFFFFFFFFFFFFD9)
          v1455 = 39;
        else
          v1455 = 0;
        v1456 = v1455 + v1401;
        STACK[0x3728] = v1455 + v1401;
        v1457 = STACK[0x688];
        v1458 = STACK[0x688] + v1455 + v1401 > 0xFFFFFFFFFFFFFFD8;
        STACK[0x3C30] = STACK[0x688] + v1456;
        if (__CFADD__(v1457, v1456))
          v1458 = 1;
        LODWORD(STACK[0x3C00]) = v1458;
        if (v1401 >= 0xFFFFFFFFFFFFFFDFLL)
          v1459 = 33;
        else
          v1459 = 0;
        v1460 = v1459 + v1401;
        STACK[0x3748] = v1459 + v1401;
        v1461 = STACK[0x690] + v1459 + v1401 > 0xFFFFFFFFFFFFFFDELL;
        v1462 = STACK[0x690] + v1460;
        if (__CFADD__(STACK[0x690], v1460))
          v1461 = 1;
        v1463 = v1418;
        if (v1418 >= 0xFFFFFFFFFFFFFFDFLL)
          v1464 = 33;
        else
          v1464 = 0;
        v1465 = v1464 + v1463;
        v1466 = v1463;
        if (v1461)
          v1467 = 33;
        else
          v1467 = 0;
        v1468 = v1467 + v1462;
        v1469 = 33 * v1468;
        v1470 = (__PAIR128__(32, 33) * v1468) >> 64;
        v573 = __CFADD__(v1470, v1469);
        v1471 = v1470 + v1469;
        if (v573)
          v1472 = 33;
        else
          v1472 = 0;
        v573 = __CFADD__(v1472, v1471);
        v1473 = v1472 + v1471;
        v1474 = v573;
        if (v1473 > 0xFFFFFFFFFFFFFFDELL)
          v1474 = 1;
        if (v1474)
          v1475 = 33;
        else
          v1475 = 0;
        STACK[0x3740] = v1465;
        v1476 = v1473 + v1465 + v1475;
        if (v1476 <= 0xFFFFFFFFFFFFFFDELL && v1476 >= v1465)
          v1478 = 0;
        else
          v1478 = 33;
        v1479 = v1478 + v1476;
        v1480 = 33 * v1479;
        v1481 = (__PAIR128__(32, 33) * v1479) >> 64;
        v573 = __CFADD__(v1481, v1480);
        v1482 = v1481 + v1480;
        if (v573)
          v1483 = 33;
        else
          v1483 = 0;
        STACK[0x3BD8] = v1483 + v1482;
        v1484 = __CFADD__(v1483, v1482) || (unint64_t)(v1483 + v1482) > 0xFFFFFFFFFFFFFFDELL;
        LODWORD(STACK[0x3BD0]) = v1484;
        if (v1401 <= 0xFFFFFFFFFFFFFFEELL)
          v1485 = 0;
        else
          v1485 = 17;
        v1486 = v1485 + v1401;
        STACK[0x3820] = v1485 + v1401;
        v1487 = STACK[0x698];
        v1488 = STACK[0x698] + v1485 + v1401 > 0xFFFFFFFFFFFFFFEELL;
        STACK[0x3BC8] = STACK[0x698] + v1486;
        if (__CFADD__(v1487, v1486))
          v1488 = 1;
        LODWORD(STACK[0x3BC0]) = v1488;
        if (v1401 >= 0xFFFFFFFFFFFFFFF1)
          v1489 = 15;
        else
          v1489 = 0;
        v1490 = v1489 + v1401;
        STACK[0x3750] = v1489 + v1401;
        v1491 = STACK[0x6A0] + v1489 + v1401 > 0xFFFFFFFFFFFFFFF0;
        if (__CFADD__(STACK[0x6A0], v1490))
          v1491 = 1;
        if (v1466 >= 0xFFFFFFFFFFFFFFF1)
          v1492 = 15;
        else
          v1492 = 0;
        if (v1491)
          v1493 = 15;
        else
          v1493 = 0;
        v1494 = v1493 + STACK[0x6A0] + v1490;
        v1495 = 15 * v1494;
        v1496 = 15 * ((v1494 * (unsigned __int128)0xFuLL) >> 64);
        v573 = __CFADD__(v1496, v1495);
        v1497 = v1496 + v1495;
        if (v573)
          v1498 = 15;
        else
          v1498 = 0;
        v573 = __CFADD__(v1498, v1497);
        v1499 = v1498 + v1497;
        v1500 = v573;
        if (v1499 > 0xFFFFFFFFFFFFFFF0)
          v1500 = 1;
        STACK[0x3778] = v1492 + v1466;
        v1501 = v1499 + v1492 + v1466;
        if (v1500)
          v1502 = 15;
        else
          v1502 = 0;
        v1503 = v1501 + v1502;
        if (v1492 + v1466 > v1503 || v1503 > 0xFFFFFFFFFFFFFFF0)
          v1505 = 15;
        else
          v1505 = 0;
        v1506 = v1505 + v1503;
        v1507 = 15 * v1506;
        v1508 = 15 * ((v1506 * (unsigned __int128)0xFuLL) >> 64);
        v573 = __CFADD__(v1508, v1507);
        v1509 = v1508 + v1507;
        if (v573)
          v1510 = 15;
        else
          v1510 = 0;
        STACK[0x3B70] = v1510 + v1509;
        v1511 = __CFADD__(v1510, v1509) || (unint64_t)(v1510 + v1509) > 0xFFFFFFFFFFFFFFF0;
        LODWORD(STACK[0x3B68]) = v1511;
        if (v1401 >= 0xFFFFFFFFFFFFFFFBLL)
          v1512 = 5;
        else
          v1512 = 0;
        v1513 = v1512 + v1401;
        STACK[0x3760] = v1512 + v1401;
        v1514 = STACK[0x6B0] + v1512 + v1401;
        v1515 = __CFADD__(STACK[0x6B0], v1513);
        if (v1514 > 0xFFFFFFFFFFFFFFFALL)
          v1515 = 1;
        if (v1515)
          v1516 = 5;
        else
          v1516 = 0;
        v1517 = v1516 + v1514;
        v1518 = 5 * v1517;
        v1519 = (__PAIR128__(4, 5) * v1517) >> 64;
        v573 = __CFADD__(v1519, v1518);
        v1520 = v1519 + v1518;
        if (v573)
          v1521 = 5;
        else
          v1521 = 0;
        v1522 = (unint64_t)(v1521 + v1520) > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v1521, v1520);
        v1523 = v1521 + v1520;
        v1524 = v573 || v1522;
        STACK[0x3718] = v1466;
        if (v1466 >= 0xFFFFFFFFFFFFFFFBLL)
          v1525 = 5;
        else
          v1525 = 0;
        STACK[0x3758] = v1525 + v1466;
        v1526 = v1523 + v1525 + v1466;
        if (v1524)
          v1527 = 5;
        else
          v1527 = 0;
        v1528 = v1526 + v1527;
        if (v1528 < v1525 + v1466 || v1528 > 0xFFFFFFFFFFFFFFFALL)
          v1530 = 5;
        else
          v1530 = 0;
        v1531 = v1530 + v1528;
        v1532 = 5 * v1531;
        v1533 = (__PAIR128__(4, 5) * v1531) >> 64;
        v573 = __CFADD__(v1533, v1532);
        v1534 = v1533 + v1532;
        if (v573)
          v1535 = 5;
        else
          v1535 = 0;
        STACK[0x3A70] = v1535 + v1534;
        v1536 = __CFADD__(v1535, v1534) || (unint64_t)(v1535 + v1534) > 0xFFFFFFFFFFFFFFFALL;
        LODWORD(STACK[0x39C0]) = v1536;
        if (v1401 >= 0xFFFFFFFFFFFFFFFDLL)
          v1537 = 3;
        else
          v1537 = 0;
        v1538 = v1537 + v1401;
        STACK[0x3768] = v1537 + v1401;
        v1539 = STACK[0x6B8] + v1537 + v1401 > 0xFFFFFFFFFFFFFFFCLL;
        if (__CFADD__(STACK[0x6B8], v1538))
          v1539 = 1;
        if (v1539)
          v1540 = 3;
        else
          v1540 = 0;
        v1541 = v1540 + STACK[0x6B8] + v1538;
        v1542 = 3 * v1541;
        v1543 = (__PAIR128__(2, 3) * v1541) >> 64;
        v573 = __CFADD__(v1543, v1542);
        v1544 = v1543 + v1542;
        if (v573)
          v1545 = 3;
        else
          v1545 = 0;
        STACK[0x3930] = v1545 + v1544;
        v1546 = __CFADD__(v1545, v1544) || (unint64_t)(v1545 + v1544) > 0xFFFFFFFFFFFFFFFCLL;
        LODWORD(STACK[0x3928]) = v1546;
        if (v1401 == -1)
          v1547 = 0;
        else
          v1547 = v1401;
        v1548 = STACK[0x6C0];
        v1550 = STACK[0x6C0] + v1547;
        STACK[0x3770] = v1547;
        v1549 = ((STACK[0x730] | (((STACK[0x720] | ((unint64_t)((STACK[0x728] | ((STACK[0x738] + (97 * (*(_BYTE *)(v1416 + STACK[0x6E8]) ^ 0x27))) << 16))
                                                                     + STACK[0x750]) << 16))
                                 + STACK[0x748]) << 16))
               + STACK[0x740]) ^ 0x136A89476B15;
        LODWORD(v1550) = v1550 == -1;
        STACK[0x3918] = v1548 + v1547;
        if (__CFADD__(v1548, v1547))
          v1550 = 1;
        else
          v1550 = v1550;
        STACK[0x38B8] = v1550;
        if (v1549 >= 0xFFFFFFFFFFFFFFCBLL)
          v1551 = 53;
        else
          v1551 = 0;
        v1552 = v1551 + v1549;
        v1553 = 53 * v1552;
        v1554 = 53 * ((v1552 * (unsigned __int128)0x35uLL) >> 64);
        if (v1401 >= 0xFFFFFFFFFFFFFFCBLL)
          v1555 = 53;
        else
          v1555 = 0;
        v573 = __CFADD__(v1554, v1553);
        v1556 = v1554 + v1553;
        if (v573)
          v1557 = 53;
        else
          v1557 = 0;
        v573 = __CFADD__(v1557, v1556);
        v1558 = v1557 + v1556;
        v1559 = v573;
        if (v1558 > 0xFFFFFFFFFFFFFFCALL)
          v1559 = 1;
        v1560 = v1555 + v1401;
        STACK[0x3B78] = v1560;
        v1561 = v1558 + v1560;
        if (v1559)
          v1562 = 53;
        else
          v1562 = 0;
        v1563 = v1561 + v1562;
        if (v1563 <= 0xFFFFFFFFFFFFFFCALL && v1563 >= v1560)
          v1565 = 0;
        else
          v1565 = 53;
        v1566 = v1565 + v1563;
        v1567 = 53 * v1566;
        v1568 = 53 * ((v1566 * (unsigned __int128)0x35uLL) >> 64);
        v573 = __CFADD__(v1568, v1567);
        v1569 = v1568 + v1567;
        if (v573)
          v1570 = 53;
        else
          v1570 = 0;
        STACK[0x3810] = v1570 + v1569;
        v1571 = __CFADD__(v1570, v1569) || (unint64_t)(v1570 + v1569) > 0xFFFFFFFFFFFFFFCALL;
        LODWORD(STACK[0x3780]) = v1571;
        STACK[0x3708] = v1549;
        if (v1549 >= 0xFFFFFFFFFFFFFFD1)
          v1572 = 47;
        else
          v1572 = 0;
        v1573 = v1572 + v1549;
        v1574 = 47 * v1573;
        v1575 = 47 * ((v1573 * (unsigned __int128)0x2FuLL) >> 64);
        v573 = __CFADD__(v1575, v1574);
        v1576 = v1575 + v1574;
        if (v573)
          v1577 = 47;
        else
          v1577 = 0;
        v1578 = (unint64_t)(v1577 + v1576) > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v1577, v1576);
        STACK[0x3700] = v1577 + v1576;
        v1579 = v1316 * STACK[0x18E0];
        v1580 = (v1316 * (unsigned __int128)STACK[0x18E0]) >> 64;
        v1581 = v573 || v1578;
        LODWORD(STACK[0x36F8]) = v1581;
        v573 = __CFADD__(5 * v1580, v1579);
        v1582 = 5 * v1580 + v1579;
        v1583 = (v1580 * (unsigned __int128)5uLL) >> 64;
        if (v573)
          ++v1583;
        v1584 = 5 * v1583;
        v573 = __CFADD__(v1584, v1582);
        v1585 = v1584 + v1582;
        v1586 = (LODWORD(STACK[0x3710]) - 10422);
        STACK[0x3C58] = v1586;
        v1587 = v573;
        if (v1585 > v1586 - 5017)
          v1588 = 1;
        else
          v1588 = v1587;
        if (v1588)
          v1589 = 5;
        else
          v1589 = 0;
        v1590 = v1589 + v1585;
        v573 = __CFADD__((__PAIR128__(4, 0xE7CF05C2128E4523) * v1590) >> 64, 0xE7CF05C2128E4523 * v1590);
        v1591 = (__PAIR128__(v1590, v1590) * __PAIR128__(4, 0xE7CF05C2128E4523)) >> 64;
        v1592 = (((v1590 * (unsigned __int128)0xE7CF05C2128E4523) >> 64) * 5) >> 64;
        if (v573)
          ++v1592;
        v1593 = 5 * v1592;
        v573 = __CFADD__(v1593, v1591);
        v1594 = v1593 + v1591;
        v1595 = v573;
        if (v1594 > 0xFFFFFFFFFFFFFFFALL)
          v1595 = 1;
        if (v1595)
          v1596 = 5;
        else
          v1596 = 0;
        v1597 = v1596 + v1594;
        v573 = __CFADD__((__PAIR128__(4, 0xD73333333333332FLL) * v1597) >> 64, 0xD73333333333332FLL * v1597);
        v1598 = (__PAIR128__(v1597, v1597) * __PAIR128__(4, 0xD73333333333332FLL)) >> 64;
        v1599 = (((v1597 * (unsigned __int128)0xD73333333333332FLL) >> 64) * 5) >> 64;
        if (v573)
          ++v1599;
        v1600 = 5 * v1599;
        v1601 = (unint64_t)(v1600 + v1598) > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v1600, v1598);
        v1602 = v1600 + v1598;
        if (v573 || v1601)
          v1604 = 5;
        else
          v1604 = 0;
        v1605 = v1311;
        v1606 = v1604 + v1602;
        if ((unint64_t)(v1604 + v1602) >= 0xFFFFFFFFFFFFFFCBLL)
          v1607 = 53;
        else
          v1607 = 0;
        v1608 = v1607 + v1606;
        v1609 = 4347200 * v1608;
        v1610 = 53 * ((v1608 * (unsigned __int128)0x425540uLL) >> 64);
        v573 = __CFADD__(v1610, v1609);
        v1611 = v1610 + v1609;
        if (v573)
          v1612 = 53;
        else
          v1612 = 0;
        v1613 = (unint64_t)(v1612 + v1611) > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v1612, v1611);
        v1614 = v1612 + v1611;
        v1615 = v1605 * STACK[0x18F8];
        v1616 = (v1605 * (unsigned __int128)STACK[0x18F8]) >> 64;
        v1617 = v573 || v1613;
        v573 = __CFADD__(3 * v1616, v1615);
        v1618 = 3 * v1616 + v1615;
        v1619 = (v1616 * (unsigned __int128)3uLL) >> 64;
        if (v573)
          ++v1619;
        v1620 = 3 * v1619;
        v573 = __CFADD__(v1620, v1618);
        v1621 = v1620 + v1618;
        v1622 = v573;
        if (v1621 > 0xFFFFFFFFFFFFFFFCLL)
          v1622 = 1;
        if (v1622)
          v1623 = 3;
        else
          v1623 = 0;
        v1624 = v1623 + v1621;
        v573 = __CFADD__((__PAIR128__(2, 0x98FDEF4CCE72A7B8) * v1624) >> 64, 0x98FDEF4CCE72A7B8 * v1624);
        v1625 = (__PAIR128__(v1624, v1624) * __PAIR128__(2, 0x98FDEF4CCE72A7B8)) >> 64;
        v1626 = (((v1624 * (unsigned __int128)0x98FDEF4CCE72A7B8) >> 64) * 3) >> 64;
        if (v573)
          ++v1626;
        v1627 = 3 * v1626;
        v1628 = (unint64_t)(v1627 + v1625) > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v1627, v1625);
        v1629 = v1627 + v1625;
        if (v573 || v1628)
          v1631 = 3;
        else
          v1631 = 0;
        v1632 = v1631 + v1629;
        v573 = __CFADD__((__PAIR128__(2, 0xF638E38E38E38E36) * v1632) >> 64, 0xF638E38E38E38E36 * v1632);
        v1633 = (__PAIR128__(v1632, v1632) * __PAIR128__(2, 0xF638E38E38E38E36)) >> 64;
        v1634 = (((v1632 * (unsigned __int128)0xF638E38E38E38E36) >> 64) * 3) >> 64;
        if (v573)
          ++v1634;
        v1635 = 3 * v1634;
        v573 = __CFADD__(v1635, v1633);
        v1636 = v1635 + v1633;
        v1637 = v573;
        if (v1636 > 0xFFFFFFFFFFFFFFFCLL)
          v1637 = 1;
        if (v1637)
          v1638 = 3;
        else
          v1638 = 0;
        v1639 = v1638 + v1636;
        if (v1638 + v1636 >= 0xFFFFFFFFFFFFFFCBLL)
          v1640 = 53;
        else
          v1640 = 0;
        v1641 = v1640 + v1639;
        v1642 = 4173312 * v1641;
        v1643 = 53 * ((v1641 * (unsigned __int128)0x3FAE00uLL) >> 64);
        v573 = __CFADD__(v1643, v1642);
        v1644 = v1643 + v1642;
        if (v573)
          v1645 = 53;
        else
          v1645 = 0;
        v1646 = (unint64_t)(v1645 + v1644) > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v1645, v1644);
        v1647 = v1645 + v1644;
        v1648 = v1337 * STACK[0x18E8];
        v1649 = (v1337 * (unsigned __int128)STACK[0x18E8]) >> 64;
        v1650 = v573 || v1646;
        v573 = __CFADD__(15 * v1649, v1648);
        v1651 = 15 * v1649 + v1648;
        v1652 = (v1649 * (unsigned __int128)0xFuLL) >> 64;
        if (v573)
          ++v1652;
        v1653 = 15 * v1652;
        v573 = __CFADD__(v1653, v1651);
        v1654 = v1653 + v1651;
        v1655 = v573;
        if (v1654 > 0xFFFFFFFFFFFFFFF0)
          v1655 = 1;
        if (v1655)
          v1656 = 15;
        else
          v1656 = 0;
        v1657 = v1656 + v1654;
        v1658 = 0x9FEC52B6396CF0C0 * v1657;
        v1659 = (v1657 * (unsigned __int128)0x9FEC52B6396CF0C0) >> 64;
        v573 = __CFADD__(15 * v1659, v1658);
        v1660 = 15 * v1659 + v1658;
        v1661 = (v1659 * (unsigned __int128)0xFuLL) >> 64;
        if (v573)
          ++v1661;
        v1662 = 15 * v1661;
        v573 = __CFADD__(v1662, v1660);
        v1663 = v1662 + v1660;
        v1664 = v573;
        if (v1663 > 0xFFFFFFFFFFFFFFF0)
          v1664 = 1;
        if (v1664)
          v1665 = 15;
        else
          v1665 = 0;
        v1666 = v1665 + v1663;
        v1667 = 0x7FF97F97F97F97F2 * v1666;
        v1668 = (v1666 * (unsigned __int128)0x7FF97F97F97F97F2uLL) >> 64;
        v573 = __CFADD__(15 * v1668, v1667);
        v1669 = 15 * v1668 + v1667;
        v1670 = (v1668 * (unsigned __int128)0xFuLL) >> 64;
        if (v573)
          ++v1670;
        v1671 = 15 * v1670;
        v1672 = (unint64_t)(v1671 + v1669) > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v1671, v1669);
        v1673 = v1671 + v1669;
        v1674 = v1306 * STACK[0x18D8];
        v1675 = (v1306 * (unsigned __int128)STACK[0x18D8]) >> 64;
        v1676 = v573 || v1672;
        v1677 = __CFADD__(__CFADD__(v1675, v1674), v1675 + v1674);
        v1678 = __CFADD__(v1675, v1674) + v1675 + v1674 == -1 || v1677;
        v1679 = v1675 + v1674 + __CFADD__(v1675, v1674) + v1678;
        v1680 = (v1679 * (unsigned __int128)0x5CAECC2F8BD67150uLL) >> 64;
        v1681 = 0x5CAECC2F8BD67150 * v1679;
        v1682 = __CFADD__(__CFADD__(v1680, v1681), v1680 + v1681);
        v1683 = __CFADD__(v1680, v1681) + v1680 + v1681 == -1 || v1682;
        v1684 = v1680 + v1681 + __CFADD__(v1680, v1681) + v1683;
        v1685 = ((unint64_t)v1684 * (unsigned __int128)0xDBB6DB6DB6DB6DB6) >> 64;
        v1686 = 0xDBB6DB6DB6DB6DB6 * v1684;
        v1687 = __CFADD__(__CFADD__(v1685, v1686), v1685 + v1686);
        v1688 = __CFADD__(v1685, v1686) + v1685 + v1686 == -1 || v1687;
        v1689 = v1685 + v1686 + __CFADD__(v1685, v1686) + v1688;
        v1690 = (v1322 * (unsigned __int128)STACK[0x18F0]) >> 64;
        v573 = __CFADD__(9 * v1690, v1322 * STACK[0x18F0]);
        v1691 = 9 * v1690 + v1322 * STACK[0x18F0];
        v1692 = (v1690 * (unsigned __int128)9uLL) >> 64;
        if (v573)
          ++v1692;
        v1693 = 9 * v1692;
        v573 = __CFADD__(v1693, v1691);
        v1694 = v1693 + v1691;
        v1695 = v573;
        if (v1694 > 0xFFFFFFFFFFFFFFF6)
          v1695 = 1;
        if (v1695)
          v1696 = 9;
        else
          v1696 = 0;
        v1697 = v1696 + v1694;
        v1698 = 0x1513DAB390DF5A9ELL * v1697;
        v1699 = (__PAIR128__(8, 0x1513DAB390DF5A9ELL) * v1697) >> 64;
        v573 = __CFADD__(v1699, v1698);
        v1700 = v1699 + v1698;
        if (v573)
          v1701 = 9;
        else
          v1701 = 0;
        v1702 = (unint64_t)(v1701 + v1700) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v1701, v1700);
        v1703 = v1701 + v1700;
        v1704 = STACK[0x3C60] * STACK[0x1900];
        v1705 = (STACK[0x3C60] * (unsigned __int128)STACK[0x1900]) >> 64;
        if (v573)
          v1702 = 1;
        v573 = __CFADD__(53 * v1705, v1704);
        v1706 = 53 * v1705 + v1704;
        v1707 = (v1705 * (unsigned __int128)0x35uLL) >> 64;
        if (v573)
          ++v1707;
        v1708 = 53 * v1707;
        v1709 = v1708 + v1706 > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v1708, v1706);
        v1710 = v1708 + v1706;
        if (v573 || v1709)
          v1712 = 53;
        else
          v1712 = 0;
        v1713 = v1712 + v1710;
        if (v1702)
          v1714 = 9;
        else
          v1714 = 0;
        v1715 = v1714 + v1703;
        v573 = __CFADD__((__PAIR128__(8, 0xD6E38E38E38E38DCLL) * v1715) >> 64, 0xD6E38E38E38E38DCLL * v1715);
        v1716 = (__PAIR128__(v1715, v1715) * __PAIR128__(8, 0xD6E38E38E38E38DCLL)) >> 64;
        v1717 = (((v1715 * (unsigned __int128)0xD6E38E38E38E38DCLL) >> 64) * 9) >> 64;
        if (v573)
          ++v1717;
        v1718 = 9 * v1717;
        v573 = __CFADD__(v1718, v1716);
        v1719 = v1718 + v1716;
        v1720 = v573;
        if (v1719 > 0xFFFFFFFFFFFFFFF6)
          v1720 = 1;
        if (v1676)
          v1721 = 15;
        else
          v1721 = 0;
        if (v1720)
          v1722 = 9;
        else
          v1722 = 0;
        v1723 = v1722 + v1719;
        v1724 = v1721 + v1673;
        if (v1689 >= 0xFFFFFFFFFFFFFFCBLL)
          v1725 = 53;
        else
          v1725 = 0;
        v1726 = v1725 + v1689;
        v1727 = 4012800 * v1726;
        v1728 = 53 * ((v1726 * (unsigned __int128)0x3D3B00uLL) >> 64);
        v573 = __CFADD__(v1728, v1727);
        v1729 = v1728 + v1727;
        if (v573)
          v1730 = 53;
        else
          v1730 = 0;
        v573 = __CFADD__(v1730, v1729);
        v1731 = v1730 + v1729;
        v1732 = v573;
        if (v1731 > 0xFFFFFFFFFFFFFFCALL)
          v1732 = 1;
        if (v1732)
          v1733 = 53;
        else
          v1733 = 0;
        v1734 = v1733 + v1731;
        if (v1734 >= 0xFFFFFFFFFFFFFFCBLL)
          v1735 = 53;
        else
          v1735 = 0;
        v1736 = v1735 + v1734;
        v1737 = v1647 + v1736;
        if (v1650)
          v1738 = 53;
        else
          v1738 = 0;
        v1739 = v1737 + v1738;
        if (v1736 > v1739 || v1739 > 0xFFFFFFFFFFFFFFCALL)
          v1741 = 53;
        else
          v1741 = 0;
        v1742 = v1741 + v1739;
        if (v1617)
          v1743 = 53;
        else
          v1743 = 0;
        v1744 = v1614 + v1743 + v1742;
        if (v1724 >= 0xFFFFFFFFFFFFFFCBLL)
          v1745 = 53;
        else
          v1745 = 0;
        if (v1723 >= 0xFFFFFFFFFFFFFFCBLL)
          v1746 = 53;
        else
          v1746 = 0;
        v1747 = v1744 <= 0xFFFFFFFFFFFFFFCALL && v1744 >= v1742;
        v1748 = v1746 + v1723;
        v1749 = 4742400 * (v1746 + v1723);
        v1750 = 53 * ((v1748 * (unsigned __int128)0x485D00uLL) >> 64);
        if (v1747)
          v1751 = 0;
        else
          v1751 = 53;
        v573 = __CFADD__(v1750, v1749);
        v1752 = v1750 + v1749;
        if (v573)
          v1753 = 53;
        else
          v1753 = 0;
        v573 = __CFADD__(v1753, v1752);
        v1754 = v1753 + v1752;
        v1755 = v1751 + v1744;
        v1756 = v573;
        if (v1754 > 0xFFFFFFFFFFFFFFCALL)
          v1756 = 1;
        if (v1756)
          v1757 = 53;
        else
          v1757 = 0;
        v1758 = v1757 + v1754;
        v573 = __CFADD__(v1758, v1755);
        v1759 = v1758 + v1755;
        v1760 = v573;
        if (v1759 > 0xFFFFFFFFFFFFFFCALL)
          v1760 = 1;
        v2628 = v1760 == 0;
        v1761 = v1745 + v1724;
        v1762 = 5491200 * (v1745 + v1724);
        v1763 = 53 * ((v1761 * (unsigned __int128)0x53CA00uLL) >> 64);
        if (v2628)
          v1764 = 0;
        else
          v1764 = 53;
        v573 = __CFADD__(v1763, v1762);
        v1765 = v1763 + v1762;
        if (v573)
          v1766 = 53;
        else
          v1766 = 0;
        v573 = __CFADD__(v1766, v1765);
        v1767 = v1766 + v1765;
        v1768 = v1764 + v1759;
        v1769 = v573;
        if (v1767 > 0xFFFFFFFFFFFFFFCALL)
          v1769 = 1;
        if (v1769)
          v1770 = 53;
        else
          v1770 = 0;
        v1771 = v1770 + v1767;
        v573 = __CFADD__(v1771, v1768);
        v1772 = v1771 + v1768;
        v1773 = v573;
        if (v1772 > 0xFFFFFFFFFFFFFFCALL)
          v1773 = 1;
        if (v1773)
          v1774 = 53;
        else
          v1774 = 0;
        v1775 = v1774 + v1772;
        v1776 = 0xA64A3E2F1B4DE8E6 * v1775;
        v1777 = (v1775 * (unsigned __int128)0xA64A3E2F1B4DE8E6) >> 64;
        v573 = __CFADD__(53 * v1777, v1776);
        v1778 = 53 * v1777 + v1776;
        v1779 = (v1777 * (unsigned __int128)0x35uLL) >> 64;
        if (v573)
          ++v1779;
        v1780 = 53 * v1779;
        v573 = __CFADD__(v1780, v1778);
        v1781 = v1780 + v1778;
        v1782 = v573;
        if (v1781 > 0xFFFFFFFFFFFFFFCALL)
          v1782 = 1;
        if (v1782)
          v1783 = 53;
        else
          v1783 = 0;
        v1784 = v1783 + v1781;
        v573 = __CFADD__(v1713, v1784);
        v1785 = v1713 + v1784;
        v1786 = v573;
        if (v1785 > 0xFFFFFFFFFFFFFFCALL)
          v1786 = 1;
        if (v1786)
          v1787 = 53;
        else
          v1787 = 0;
        v1788 = v1787 + v1785;
        v1789 = 0x59708602BDC08F49 * v1788;
        v1790 = (v1788 * (unsigned __int128)0x59708602BDC08F49uLL) >> 64;
        v573 = __CFADD__(53 * v1790, v1789);
        v1791 = 53 * v1790 + v1789;
        v1792 = (v1790 * (unsigned __int128)0x35uLL) >> 64;
        if (v573)
          ++v1792;
        v1793 = 53 * v1792;
        v1794 = (unint64_t)(v1793 + v1791) > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v1793, v1791);
        v1795 = v1793 + v1791;
        v1796 = v573 || v1794;
        if (v1724 >= 0xFFFFFFFFFFFFFFD1)
          v1797 = 47;
        else
          v1797 = 0;
        v1798 = v1797 + v1724;
        v1799 = 3230304 * v1798;
        v1800 = 47 * ((v1798 * (unsigned __int128)0x314A60uLL) >> 64);
        v573 = __CFADD__(v1800, v1799);
        v1801 = v1800 + v1799;
        if (v573)
          v1802 = 47;
        else
          v1802 = 0;
        v1803 = (unint64_t)(v1802 + v1801) > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v1802, v1801);
        v1804 = v1802 + v1801;
        v1805 = v573 || v1803;
        if (v1723 >= 0xFFFFFFFFFFFFFFD1)
          v1806 = 47;
        else
          v1806 = 0;
        v1807 = v1806 + v1723;
        v1808 = 2720256 * v1807;
        v1809 = 47 * ((v1807 * (unsigned __int128)0x298200uLL) >> 64);
        v573 = __CFADD__(v1809, v1808);
        v1810 = v1809 + v1808;
        if (v573)
          v1811 = 47;
        else
          v1811 = 0;
        v1812 = (unint64_t)(v1811 + v1810) > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v1811, v1810);
        v1813 = v1811 + v1810;
        v1814 = v573 || v1812;
        if (v1639 >= 0xFFFFFFFFFFFFFFD1)
          v1815 = 47;
        else
          v1815 = 0;
        v1816 = v1815 + v1639;
        v1817 = 2349312 * v1816;
        v1818 = 47 * ((v1816 * (unsigned __int128)0x23D900uLL) >> 64);
        v573 = __CFADD__(v1818, v1817);
        v1819 = v1818 + v1817;
        if (v573)
          v1820 = 47;
        else
          v1820 = 0;
        v1821 = (unint64_t)(v1820 + v1819) > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v1820, v1819);
        v1822 = v1820 + v1819;
        v1823 = v573 || v1821;
        if (v1689 >= 0xFFFFFFFFFFFFFFD1)
          v1824 = 47;
        else
          v1824 = 0;
        v1825 = v1824 + v1689;
        v1826 = 2247168 * v1825;
        v1827 = 47 * ((v1825 * (unsigned __int128)0x224A00uLL) >> 64);
        v573 = __CFADD__(v1827, v1826);
        v1828 = v1827 + v1826;
        if (v573)
          v1829 = 47;
        else
          v1829 = 0;
        v573 = __CFADD__(v1829, v1828);
        v1830 = v1829 + v1828;
        v1831 = v573;
        if (v1830 > 0xFFFFFFFFFFFFFFD0)
          v1831 = 1;
        if (v1831)
          v1832 = 47;
        else
          v1832 = 0;
        v1833 = v1832 + v1830;
        if (v1606 >= 0xFFFFFFFFFFFFFFD1)
          v1834 = 47;
        else
          v1834 = 0;
        if (v1823)
          v1835 = 47;
        else
          v1835 = 0;
        if (v1833 >= 0xFFFFFFFFFFFFFFD1)
          v1836 = 47;
        else
          v1836 = 0;
        v1837 = v1836 + v1833;
        v1838 = v1822 + v1837 + v1835;
        v1839 = v1834 + v1606;
        v1840 = 2461184 * (v1834 + v1606);
        v1841 = 47 * ((v1839 * (unsigned __int128)0x258E00uLL) >> 64);
        v573 = __CFADD__(v1841, v1840);
        v1842 = v1841 + v1840;
        if (v573)
          v1843 = 47;
        else
          v1843 = 0;
        v573 = __CFADD__(v1843, v1842);
        v1844 = v1843 + v1842;
        v1845 = v573;
        if (v1844 > 0xFFFFFFFFFFFFFFD0)
          v1845 = 1;
        if (v1837 > v1838 || v1838 > 0xFFFFFFFFFFFFFFD0)
          v1847 = 47;
        else
          v1847 = 0;
        v1848 = v1847 + v1838;
        if (v1845)
          v1849 = 47;
        else
          v1849 = 0;
        v1850 = v1844 + v1849 + v1848;
        if (v1850 < v1848 || v1850 > 0xFFFFFFFFFFFFFFD0)
          v1852 = 47;
        else
          v1852 = 0;
        v1853 = v1852 + v1850;
        if (v1814)
          v1854 = 47;
        else
          v1854 = 0;
        v1855 = v1854 + v1813;
        v1856 = v1855 + v1853 > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v1855, v1853);
        v1857 = v1855 + v1853;
        if (v573)
          v1856 = 1;
        if (v1856)
          v1858 = 47;
        else
          v1858 = 0;
        if (v1805)
          v1859 = 47;
        else
          v1859 = 0;
        v1860 = v1859 + v1804;
        v1861 = v1858 + v1857;
        v1862 = v1860 + v1858 + v1857 > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v1860, v1861);
        v1863 = v1860 + v1861;
        if (v573 || v1862)
          v1865 = 47;
        else
          v1865 = 0;
        v1866 = v1865 + v1863;
        v1867 = 0xF9CF898C924065FBLL * v1866;
        v1868 = (v1866 * (unsigned __int128)0xF9CF898C924065FBLL) >> 64;
        v573 = __CFADD__(47 * v1868, v1867);
        v1869 = 47 * v1868 + v1867;
        v1870 = (v1868 * (unsigned __int128)0x2FuLL) >> 64;
        if (v573)
          ++v1870;
        v1871 = 47 * v1870;
        v1872 = v1871 + v1869 > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v1871, v1869);
        v1873 = v1871 + v1869;
        v1874 = STACK[0x3C08] * STACK[0x1920];
        v1875 = (STACK[0x3C08] * (unsigned __int128)STACK[0x1920]) >> 64;
        if (v573)
          v1872 = 1;
        v573 = __CFADD__(47 * v1875, v1874);
        v1876 = 47 * v1875 + v1874;
        v1877 = (v1875 * (unsigned __int128)0x2FuLL) >> 64;
        if (v573)
          ++v1877;
        v1878 = 47 * v1877;
        v573 = __CFADD__(v1878, v1876);
        v1879 = v1878 + v1876;
        v1880 = v573;
        if (v1879 > 0xFFFFFFFFFFFFFFD0)
          v1880 = 1;
        if (v1880)
          v1881 = 47;
        else
          v1881 = 0;
        v1882 = v1881 + v1879;
        if (v1872)
          v1883 = 47;
        else
          v1883 = 0;
        v1884 = v1883 + v1873;
        v573 = __CFADD__(v1882, v1884);
        v1885 = v1882 + v1884;
        v1886 = v573;
        if (v1885 > 0xFFFFFFFFFFFFFFD0)
          v1886 = 1;
        if (v1886)
          v1887 = 47;
        else
          v1887 = 0;
        v1888 = v1887 + v1885;
        v1889 = 0x5C1DC82ED83E4DC6 * v1888;
        v1890 = (v1888 * (unsigned __int128)0x5C1DC82ED83E4DC6uLL) >> 64;
        v573 = __CFADD__(47 * v1890, v1889);
        v1891 = 47 * v1890 + v1889;
        v1892 = (v1890 * (unsigned __int128)0x2FuLL) >> 64;
        if (v573)
          ++v1892;
        v1893 = 47 * v1892;
        v573 = __CFADD__(v1893, v1891);
        v1894 = v1893 + v1891;
        v1895 = v573;
        if (v1894 > 0xFFFFFFFFFFFFFFD0)
          v1895 = 1;
        if (v1895)
          v1896 = 47;
        else
          v1896 = 0;
        if (v1796)
          v1897 = 53;
        else
          v1897 = 0;
        v1898 = v1897 + v1795;
        v1899 = 0x74605CE0F105902CLL * v1898;
        v1900 = ((unint64_t)v1898 * (unsigned __int128)0x74605CE0F105902CuLL) >> 64;
        v573 = __CFADD__(53 * v1900, v1899);
        v1901 = 53 * v1900 + v1899;
        v1902 = (v1900 * (unsigned __int128)0x35uLL) >> 64;
        if (v573)
          ++v1902;
        v1903 = 53 * v1902;
        v573 = __CFADD__(v1903, v1901);
        v1904 = v1903 + v1901;
        v1905 = v1896 + v1894;
        v1906 = v573;
        if (v1904 > 0xFFFFFFFFFFFFFFCALL)
          v1906 = 1;
        if (v1906)
          v1907 = 53;
        else
          v1907 = 0;
        v1908 = v1907 + v1904;
        if (v1907 + v1904 >= 0xFFFFFFFFFFFFFFD1)
          v1909 = 47;
        else
          v1909 = 0;
        v1910 = v1909 + v1908;
        v1911 = 0xF9CF898C924065FBLL * v1910;
        v1912 = (v1910 * (unsigned __int128)0xF9CF898C924065FBLL) >> 64;
        v573 = __CFADD__(47 * v1912, v1911);
        v1913 = 47 * v1912 + v1911;
        v1914 = (v1912 * (unsigned __int128)0x2FuLL) >> 64;
        if (v573)
          ++v1914;
        v1915 = 47 * v1914;
        v573 = __CFADD__(v1915, v1913);
        v1916 = v1915 + v1913;
        v1917 = v573;
        if (v1916 > 0xFFFFFFFFFFFFFFD0)
          v1917 = 1;
        if (v1917)
          v1918 = 47;
        else
          v1918 = 0;
        v1919 = v1918 + v1916;
        v1920 = v1905 + v1919 > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v1905, v1919);
        v1921 = v1905 + v1919;
        if (v573 || v1920)
          v1923 = 47;
        else
          v1923 = 0;
        v1924 = v1923 + v1921;
        v1925 = 0xD55555555555552ELL * v1924;
        v1926 = (v1924 * (unsigned __int128)0xD55555555555552ELL) >> 64;
        v573 = __CFADD__(47 * v1926, v1925);
        v1927 = 47 * v1926 + v1925;
        v1928 = (v1926 * (unsigned __int128)0x2FuLL) >> 64;
        if (v573)
          ++v1928;
        v1929 = 47 * v1928;
        v1930 = v1929 + v1927;
        v1931 = __CFADD__(v1929, v1927) || v1929 + v1927 > 0xFFFFFFFFFFFFFFD0;
        if (v1724 >= 0xFFFFFFFFFFFFFFEFLL)
          v1932 = 17;
        else
          v1932 = 0;
        v1933 = v1932 + v1724;
        v1934 = 21504 * v1933;
        v1935 = (__PAIR128__(16, 21504) * v1933) >> 64;
        v573 = __CFADD__(v1935, v1934);
        v1936 = v1935 + v1934;
        if (v573)
          v1937 = 17;
        else
          v1937 = 0;
        v1938 = (unint64_t)(v1937 + v1936) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v1937, v1936);
        v1939 = v1937 + v1936;
        v1940 = v573 || v1938;
        if (v1723 >= 0xFFFFFFFFFFFFFFEFLL)
          v1941 = 17;
        else
          v1941 = 0;
        v1942 = v1941 + v1723;
        v1943 = 5376 * v1942;
        v1944 = (__PAIR128__(16, 5376) * v1942) >> 64;
        v573 = __CFADD__(v1944, v1943);
        v1945 = v1944 + v1943;
        if (v573)
          v1946 = 17;
        else
          v1946 = 0;
        v1947 = (unint64_t)(v1946 + v1945) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v1946, v1945);
        v1948 = v1946 + v1945;
        v1949 = v573 || v1947;
        if (v1606 >= 0xFFFFFFFFFFFFFFEFLL)
          v1950 = 17;
        else
          v1950 = 0;
        v1951 = v1950 + v1606;
        v1952 = 3584 * v1951;
        v1953 = (__PAIR128__(16, 3584) * v1951) >> 64;
        v573 = __CFADD__(v1953, v1952);
        v1954 = v1953 + v1952;
        if (v573)
          v1955 = 17;
        else
          v1955 = 0;
        v1956 = (unint64_t)(v1955 + v1954) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v1955, v1954);
        v1957 = v1955 + v1954;
        v1958 = v573 || v1956;
        if (v1689 >= 0xFFFFFFFFFFFFFFEFLL)
          v1959 = 17;
        else
          v1959 = 0;
        v1960 = v1959 + v1689;
        v1961 = 2688 * v1960;
        v1962 = (__PAIR128__(16, 2688) * v1960) >> 64;
        v573 = __CFADD__(v1962, v1961);
        v1963 = v1962 + v1961;
        if (v573)
          v1964 = 17;
        else
          v1964 = 0;
        v1965 = (unint64_t)(v1964 + v1963) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v1964, v1963);
        v1966 = v1964 + v1963;
        v1967 = v573 || v1965;
        if (v1639 >= 0xFFFFFFFFFFFFFFEFLL)
          v1968 = 17;
        else
          v1968 = 0;
        v2628 = v1967 == 0;
        v1969 = v1968 + v1639;
        v1970 = 3 * (v1968 + v1639);
        v1971 = (__PAIR128__(16, 3072) * v1969) >> 64;
        if (v2628)
          v1972 = 0;
        else
          v1972 = 17;
        v573 = __CFADD__(v1971, v1970 << 10);
        v1973 = v1971 + (v1970 << 10);
        if (v573)
          v1974 = 17;
        else
          v1974 = 0;
        v573 = __CFADD__(v1974, v1973);
        v1975 = v1974 + v1973;
        v1976 = v1972 + v1966;
        v1977 = v573;
        if (v1975 > 0xFFFFFFFFFFFFFFEELL)
          v1977 = 1;
        if (v1977)
          v1978 = 17;
        else
          v1978 = 0;
        if (v1976 >= 0xFFFFFFFFFFFFFFEFLL)
          v1979 = 17;
        else
          v1979 = 0;
        v1980 = v1979 + v1976;
        v1981 = v1975 + v1980 + v1978;
        if (v1981 > 0xFFFFFFFFFFFFFFEELL || v1980 > v1981)
          v1983 = 17;
        else
          v1983 = 0;
        v1984 = v1983 + v1981;
        if (v1958)
          v1985 = 17;
        else
          v1985 = 0;
        v1986 = v1957 + v1985 + v1984;
        if (v1986 <= 0xFFFFFFFFFFFFFFEELL && v1986 >= v1984)
          v1988 = 0;
        else
          v1988 = 17;
        v1989 = v1988 + v1986;
        if (v1949)
          v1990 = 17;
        else
          v1990 = 0;
        v1991 = v1990 + v1948;
        v573 = __CFADD__(v1991, v1989);
        v1992 = v1991 + v1989;
        v1993 = v573;
        if (v1992 > 0xFFFFFFFFFFFFFFEELL)
          v1993 = 1;
        if (v1940)
          v1994 = 17;
        else
          v1994 = 0;
        v1995 = v1994 + v1939;
        if (v1993)
          v1996 = 17;
        else
          v1996 = 0;
        v1997 = v1996 + v1992;
        v1998 = v1995 + v1997 > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v1995, v1997);
        v1999 = v1995 + v1997;
        v2000 = STACK[0x3C78] * STACK[0x1910];
        v2001 = (STACK[0x3C78] * (unsigned __int128)STACK[0x1910]) >> 64;
        if (v573)
          v1998 = 1;
        v573 = __CFADD__(17 * v2001, v2000);
        v2002 = 17 * v2001 + v2000;
        v2003 = (v2001 * (unsigned __int128)0x11uLL) >> 64;
        if (v573)
          ++v2003;
        v2004 = 17 * v2003;
        v2005 = v2004 + v2002 > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v2004, v2002);
        v2006 = v2004 + v2002;
        if (v573 || v2005)
          v2008 = 17;
        else
          v2008 = 0;
        v2009 = v2008 + v2006;
        if (v1998)
          v2010 = 17;
        else
          v2010 = 0;
        v2011 = v2010 + v1999;
        v573 = __CFADD__((__PAIR128__(16, 0xBCE0B40AAD3903CALL) * v2011) >> 64, 0xBCE0B40AAD3903CALL * v2011);
        v2012 = (__PAIR128__(v2011, v2011) * __PAIR128__(16, 0xBCE0B40AAD3903CALL)) >> 64;
        v2013 = (((v2011 * (unsigned __int128)0xBCE0B40AAD3903CALL) >> 64) * 0x11) >> 64;
        if (v573)
          ++v2013;
        v2014 = 17 * v2013;
        v573 = __CFADD__(v2014, v2012);
        v2015 = v2014 + v2012;
        v2016 = v573;
        if (v2015 > 0xFFFFFFFFFFFFFFEELL)
          v2016 = 1;
        if (v2016)
          v2017 = 17;
        else
          v2017 = 0;
        v2018 = v2017 + v2015;
        v2019 = v2009 + v2018 > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v2009, v2018);
        v2020 = v2009 + v2018;
        if (v573 || v2019)
          v2022 = 17;
        else
          v2022 = 0;
        v2023 = v2022 + v2020;
        v573 = __CFADD__((__PAIR128__(16, 0x260186186186185FLL) * v2023) >> 64, 0x260186186186185FLL * v2023);
        v2024 = (__PAIR128__(v2023, v2023) * __PAIR128__(16, 0x260186186186185FLL)) >> 64;
        v2025 = (((v2023 * (unsigned __int128)0x260186186186185FuLL) >> 64) * 0x11) >> 64;
        if (v573)
          ++v2025;
        v2026 = 17 * v2025;
        v2027 = (unint64_t)(v2026 + v2024) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v2026, v2024);
        v2028 = v2026 + v2024;
        if (v573 || v2027)
          v2030 = 17;
        else
          v2030 = 0;
        v2031 = v2030 + v2028;
        if (v1908 >= 0xFFFFFFFFFFFFFFEFLL)
          v2032 = 17;
        else
          v2032 = 0;
        v2033 = v2032 + v1908;
        v573 = __CFADD__((__PAIR128__(16, 0xBCE0B40AAD3903CALL) * v2033) >> 64, 0xBCE0B40AAD3903CALL * v2033);
        v2034 = (__PAIR128__(v2033, v2033) * __PAIR128__(16, 0xBCE0B40AAD3903CALL)) >> 64;
        v2035 = (((v2033 * (unsigned __int128)0xBCE0B40AAD3903CALL) >> 64) * 0x11) >> 64;
        if (v573)
          ++v2035;
        v2036 = 17 * v2035;
        v573 = __CFADD__(v2036, v2034);
        v2037 = v2036 + v2034;
        v2038 = v573;
        if (v2037 > 0xFFFFFFFFFFFFFFEELL)
          v2038 = 1;
        if (v2038)
          v2039 = 17;
        else
          v2039 = 0;
        v2040 = v2039 + v2037;
        v573 = __CFADD__(v2031, v2040);
        v2041 = v2031 + v2040;
        v2042 = v573;
        if (v2041 > 0xFFFFFFFFFFFFFFEELL)
          v2042 = 1;
        if (v2042)
          v2043 = 17;
        else
          v2043 = 0;
        v2044 = v2043 + v2041;
        v573 = __CFADD__((__PAIR128__(16, 0xF8E38E38E38E38D3) * v2044) >> 64, 0xF8E38E38E38E38D3 * v2044);
        v2045 = (__PAIR128__(v2044, v2044) * __PAIR128__(16, 0xF8E38E38E38E38D3)) >> 64;
        v2046 = (((v2044 * (unsigned __int128)0xF8E38E38E38E38D3) >> 64) * 0x11) >> 64;
        if (v573)
          ++v2046;
        v2047 = 17 * v2046;
        v2048 = (unint64_t)(v2047 + v2045) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v2047, v2045);
        v2049 = v2047 + v2045;
        if (v573 || v2048)
          v2051 = 17;
        else
          v2051 = 0;
        v2052 = v2051 + v2049;
        if (v1931)
          v2053 = 47;
        else
          v2053 = 0;
        v2054 = v2053 + v1930;
        STACK[0x3C78] = v2053 + v1930;
        if (v2052 >= 0xFFFFFFFFFFFFFFD1)
          v2055 = 47;
        else
          v2055 = 0;
        v2056 = v2055 + v2052;
        v573 = v2054 >= v2056;
        v2057 = v2054 - v2056;
        if (v573)
          v2058 = 0;
        else
          v2058 = -47;
        v2059 = v2057 + v2058;
        v2060 = 0x888888888888887 * v2059;
        v2061 = (v2059 * (unsigned __int128)0x888888888888887uLL) >> 64;
        v573 = __CFADD__(47 * v2061, v2060);
        v2062 = 47 * v2061 + v2060;
        v2063 = (v2061 * (unsigned __int128)0x2FuLL) >> 64;
        if (v573)
          ++v2063;
        v2064 = 47 * v2063;
        v2065 = (unint64_t)(v2064 + v2062) > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v2064, v2062);
        v2066 = v2064 + v2062;
        v2067 = v573 || v2065;
        if (v1908 >= 0xFFFFFFFFFFFFFFD3)
          v2068 = 45;
        else
          v2068 = 0;
        v2069 = v2068 + v1908;
        v2070 = 0xB1035F48A597370CLL * v2069;
        v2071 = (v2069 * (unsigned __int128)0xB1035F48A597370CLL) >> 64;
        v573 = __CFADD__(45 * v2071, v2070);
        v2072 = 45 * v2071 + v2070;
        v2073 = (v2071 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v2073;
        v2074 = 45 * v2073;
        v2075 = v2074 + v2072 > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v2074, v2072);
        v2076 = v2074 + v2072;
        v2077 = v573 || v2075;
        if (v1724 >= 0xFFFFFFFFFFFFFFD3)
          v2078 = 45;
        else
          v2078 = 0;
        v2079 = v2078 + v1724;
        v2080 = 2661120 * v2079;
        v2081 = 45 * ((v2079 * (unsigned __int128)0x289B00uLL) >> 64);
        v573 = __CFADD__(v2081, v2080);
        v2082 = v2081 + v2080;
        if (v573)
          v2083 = 45;
        else
          v2083 = 0;
        v2084 = (unint64_t)(v2083 + v2082) > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v2083, v2082);
        v2085 = v2083 + v2082;
        v2086 = STACK[0x3C28] * STACK[0x1908];
        v2087 = (STACK[0x3C28] * (unsigned __int128)STACK[0x1908]) >> 64;
        if (v573)
          v2084 = 1;
        v573 = __CFADD__(45 * v2087, v2086);
        v2088 = 45 * v2087 + v2086;
        v2089 = (v2087 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v2089;
        v2090 = 45 * v2089;
        v573 = __CFADD__(v2090, v2088);
        v2091 = v2090 + v2088;
        v2092 = v573;
        if (v2091 > 0xFFFFFFFFFFFFFFD2)
          v2092 = 1;
        if (v2092)
          v2093 = 45;
        else
          v2093 = 0;
        v2094 = v2093 + v2091;
        if (v1689 >= 0xFFFFFFFFFFFFFFD3)
          v2095 = 45;
        else
          v2095 = 0;
        v2096 = v2095 + v1689;
        v2097 = 1814400 * v2096;
        v2098 = 45 * ((v2096 * (unsigned __int128)0x1BAF80uLL) >> 64);
        if (v1639 >= 0xFFFFFFFFFFFFFFD3)
          v2099 = 45;
        else
          v2099 = 0;
        v573 = __CFADD__(v2098, v2097);
        v2100 = v2098 + v2097;
        if (v573)
          v2101 = 45;
        else
          v2101 = 0;
        v573 = __CFADD__(v2101, v2100);
        v2102 = v2101 + v2100;
        v2103 = v573;
        if (v2102 > 0xFFFFFFFFFFFFFFD2)
          v2103 = 1;
        v2628 = v2103 == 0;
        v2104 = v2099 + v1639;
        v2105 = 1900800 * (v2099 + v1639);
        v2106 = 45 * ((v2104 * (unsigned __int128)0x1D0100uLL) >> 64);
        if (v2628)
          v2107 = 0;
        else
          v2107 = 45;
        v573 = __CFADD__(v2106, v2105);
        v2108 = v2106 + v2105;
        v2109 = v2107 + v2102;
        if (v573)
          v2110 = 45;
        else
          v2110 = 0;
        v573 = __CFADD__(v2110, v2108);
        v2111 = v2110 + v2108;
        v2112 = v573;
        if (v2111 > 0xFFFFFFFFFFFFFFD2)
          v2112 = 1;
        if (v2109 >= 0xFFFFFFFFFFFFFFD3)
          v2113 = 45;
        else
          v2113 = 0;
        v2114 = v2113 + v2109;
        v2115 = v2111 + v2114;
        if (v2112)
          v2116 = 45;
        else
          v2116 = 0;
        v2117 = v2115 + v2116;
        if (v2117 > 0xFFFFFFFFFFFFFFD2 || v2114 > v2117)
          v2119 = 45;
        else
          v2119 = 0;
        if (v1606 >= 0xFFFFFFFFFFFFFFD3)
          v2120 = 45;
        else
          v2120 = 0;
        v2121 = v2120 + v1606;
        v2122 = 1995840 * v2121;
        v2123 = 45 * ((v2121 * (unsigned __int128)0x1E7440uLL) >> 64);
        if (v1723 >= 0xFFFFFFFFFFFFFFD3)
          v2124 = 45;
        else
          v2124 = 0;
        v573 = __CFADD__(v2123, v2122);
        v2125 = v2123 + v2122;
        v2126 = v2119 + v2117;
        if (v573)
          v2127 = 45;
        else
          v2127 = 0;
        v573 = __CFADD__(v2127, v2125);
        v2128 = v2127 + v2125;
        v2129 = v573;
        if (v2128 > 0xFFFFFFFFFFFFFFD2)
          v2129 = 1;
        v2628 = v2129 == 0;
        v2130 = 2217600 * (v2124 + v1723);
        v2131 = 45 * (((v2124 + v1723) * (unsigned __int128)0x21D680uLL) >> 64);
        if (v2628)
          v2132 = 0;
        else
          v2132 = 45;
        v573 = __CFADD__(v2131, v2130);
        v2133 = v2131 + v2130;
        v2134 = v2128 + v2132;
        if (v573)
          v2135 = 45;
        else
          v2135 = 0;
        v573 = __CFADD__(v2135, v2133);
        v2136 = v2135 + v2133;
        v2137 = v2134 + v2126;
        v2138 = v573;
        if (v2136 > 0xFFFFFFFFFFFFFFD2)
          v2138 = 1;
        if (v2126 > v2137 || v2137 > 0xFFFFFFFFFFFFFFD2)
          v2140 = 45;
        else
          v2140 = 0;
        v2141 = v2140 + v2137;
        if (v2138)
          v2142 = 45;
        else
          v2142 = 0;
        v2143 = v2142 + v2136;
        v573 = __CFADD__(v2143, v2141);
        v2144 = v2143 + v2141;
        v2145 = v573;
        if (v2144 > 0xFFFFFFFFFFFFFFD2)
          v2145 = 1;
        if (v2145)
          v2146 = 45;
        else
          v2146 = 0;
        v2147 = v2146 + v2144;
        if (v2084)
          v2148 = 45;
        else
          v2148 = 0;
        v2149 = v2148 + v2085;
        v573 = __CFADD__(v2149, v2147);
        v2150 = v2149 + v2147;
        v2151 = v573;
        if (v2150 > 0xFFFFFFFFFFFFFFD2)
          v2151 = 1;
        if (v2151)
          v2152 = 45;
        else
          v2152 = 0;
        v2153 = v2152 + v2150;
        v2154 = 0xB1035F48A597370CLL * v2153;
        v2155 = (v2153 * (unsigned __int128)0xB1035F48A597370CLL) >> 64;
        v573 = __CFADD__(45 * v2155, v2154);
        v2156 = 45 * v2155 + v2154;
        v2157 = (v2155 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v2157;
        v2158 = 45 * v2157;
        v573 = __CFADD__(v2158, v2156);
        v2159 = v2158 + v2156;
        v2160 = v573;
        if (v2159 > 0xFFFFFFFFFFFFFFD2)
          v2160 = 1;
        if (v2160)
          v2161 = 45;
        else
          v2161 = 0;
        v2162 = v2161 + v2159;
        v2163 = v2094 + v2162 > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v2094, v2162);
        v2164 = v2094 + v2162;
        if (v573 || v2163)
          v2166 = 45;
        else
          v2166 = 0;
        v2167 = v2166 + v2164;
        v2168 = 0xD122545C17BA3DF4 * v2167;
        v2169 = (v2167 * (unsigned __int128)0xD122545C17BA3DF4) >> 64;
        v573 = __CFADD__(45 * v2169, v2168);
        v2170 = 45 * v2169 + v2168;
        v2171 = (v2169 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v2171;
        v2172 = 45 * v2171;
        v2173 = v2172 + v2170 > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v2172, v2170);
        v2174 = v2172 + v2170;
        if (v573 || v2173)
          v2176 = 45;
        else
          v2176 = 0;
        v2177 = v2176 + v2174;
        if (v2077)
          v2178 = 45;
        else
          v2178 = 0;
        v2179 = v2178 + v2076;
        v2180 = v2177 + v2179 > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v2177, v2179);
        v2181 = v2177 + v2179;
        if (v573)
          v2180 = 1;
        if (v2180)
          v2182 = 45;
        else
          v2182 = 0;
        v2183 = v2182 + v2181;
        v2184 = 0x5FFFFFFFFFFFFFEFLL * v2183;
        v2185 = (v2183 * (unsigned __int128)0x5FFFFFFFFFFFFFEFuLL) >> 64;
        v573 = __CFADD__(45 * v2185, v2184);
        v2186 = 45 * v2185 + v2184;
        v2187 = (v2185 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v2187;
        v2188 = 45 * v2187;
        v573 = __CFADD__(v2188, v2186);
        v2189 = v2188 + v2186;
        v2190 = v573;
        if (v2189 > 0xFFFFFFFFFFFFFFD2)
          v2190 = 1;
        if (v2190)
          v2191 = 45;
        else
          v2191 = 0;
        v2192 = v2191 + v2189;
        STACK[0x3C60] = v2191 + v2189;
        if (v2052 >= 0xFFFFFFFFFFFFFFD3)
          v2193 = 45;
        else
          v2193 = 0;
        v2194 = v2193 + v2052;
        v573 = v2192 >= v2194;
        v2195 = v2192 - v2194;
        if (v573)
          v2196 = 0;
        else
          v2196 = -45;
        v2197 = v2195 + v2196;
        v2198 = 0x924924924924923 * v2197;
        v2199 = (v2197 * (unsigned __int128)0x924924924924923uLL) >> 64;
        v573 = __CFADD__(45 * v2199, v2198);
        v2200 = 45 * v2199 + v2198;
        v2201 = (v2199 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v2201;
        v2202 = 45 * v2201;
        v2203 = (unint64_t)(v2202 + v2200) > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v2202, v2200);
        v2204 = v2202 + v2200;
        if (v573)
          v2203 = 1;
        if (v1724 >= 0xFFFFFFFFFFFFFFDFLL)
          v2205 = 33;
        else
          v2205 = 0;
        v2206 = v2205 + v1724;
        v2207 = 645120 * v2206;
        v2208 = (__PAIR128__(32, 645120) * v2206) >> 64;
        v573 = __CFADD__(v2208, v2207);
        v2209 = v2208 + v2207;
        if (v573)
          v2210 = 33;
        else
          v2210 = 0;
        v2211 = (unint64_t)(v2210 + v2209) > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v2210, v2209);
        v2212 = v2210 + v2209;
        v2213 = v573 || v2211;
        if (v1639 >= 0xFFFFFFFFFFFFFFDFLL)
          v2214 = 33;
        else
          v2214 = 0;
        v2215 = v2214 + v1639;
        v2216 = 387072 * v2215;
        v2217 = (__PAIR128__(32, 387072) * v2215) >> 64;
        v573 = __CFADD__(v2217, v2216);
        v2218 = v2217 + v2216;
        if (v573)
          v2219 = 33;
        else
          v2219 = 0;
        v2220 = (unint64_t)(v2219 + v2218) > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v2219, v2218);
        v2221 = v2219 + v2218;
        v2222 = v573 || v2220;
        if (v1689 >= 0xFFFFFFFFFFFFFFDFLL)
          v2223 = 33;
        else
          v2223 = 0;
        v2224 = v2223 + v1689;
        v2225 = 362880 * v2224;
        v2226 = (__PAIR128__(32, 362880) * v2224) >> 64;
        v573 = __CFADD__(v2226, v2225);
        v2227 = v2226 + v2225;
        if (v573)
          v2228 = 33;
        else
          v2228 = 0;
        v573 = __CFADD__(v2228, v2227);
        v2229 = v2228 + v2227;
        v2230 = v573;
        if (v2229 > 0xFFFFFFFFFFFFFFDELL)
          v2230 = 1;
        if (v2230)
          v2231 = 33;
        else
          v2231 = 0;
        v2232 = v2231 + v2229;
        if (v2232 >= 0xFFFFFFFFFFFFFFDFLL)
          v2233 = 33;
        else
          v2233 = 0;
        v2234 = v2233 + v2232;
        if (v1606 >= 0xFFFFFFFFFFFFFFDFLL)
          v2235 = 33;
        else
          v2235 = 0;
        v2236 = v2221 + v2234;
        if (v2222)
          v2237 = 33;
        else
          v2237 = 0;
        v2238 = v2236 + v2237;
        v2239 = v2235 + v1606;
        v2240 = 414720 * (v2235 + v1606);
        v2241 = (__PAIR128__(32, 414720) * v2239) >> 64;
        v573 = __CFADD__(v2241, v2240);
        v2242 = v2241 + v2240;
        if (v573)
          v2243 = 33;
        else
          v2243 = 0;
        if (v1723 >= 0xFFFFFFFFFFFFFFDFLL)
          v2244 = 33;
        else
          v2244 = 0;
        v573 = __CFADD__(v2243, v2242);
        v2245 = v2243 + v2242;
        v2246 = v573;
        if (v2238 > 0xFFFFFFFFFFFFFFDELL || v2234 > v2238)
          v2248 = 33;
        else
          v2248 = 0;
        if (v2245 > 0xFFFFFFFFFFFFFFDELL)
          v2246 = 1;
        v2249 = v2248 + v2238;
        if (v2246)
          v2250 = 33;
        else
          v2250 = 0;
        v2251 = v2245 + v2250;
        v2252 = 483840 * (v2244 + v1723);
        v2253 = 33 * (((v2244 + v1723) * (unsigned __int128)0x76200uLL) >> 64);
        v573 = __CFADD__(v2253, v2252);
        v2254 = v2253 + v2252;
        if (v573)
          v2255 = 33;
        else
          v2255 = 0;
        v573 = __CFADD__(v2255, v2254);
        v2256 = v2255 + v2254;
        v2257 = v2251 + v2249;
        v2258 = v573;
        if (v2256 > 0xFFFFFFFFFFFFFFDELL)
          v2258 = 1;
        if (v2257 < v2249 || v2257 > 0xFFFFFFFFFFFFFFDELL)
          v2260 = 33;
        else
          v2260 = 0;
        v2261 = v2260 + v2257;
        if (v2258)
          v2262 = 33;
        else
          v2262 = 0;
        v2263 = v2262 + v2256;
        v2264 = v2263 + v2261 > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v2263, v2261);
        v2265 = v2263 + v2261;
        v2266 = v573 || v2264;
        if (v2213)
          v2267 = 33;
        else
          v2267 = 0;
        v2268 = v2267 + v2212;
        if (v2266)
          v2269 = 33;
        else
          v2269 = 0;
        v2270 = v2269 + v2265;
        v2271 = v2268 + v2270 > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v2268, v2270);
        v2272 = v2268 + v2270;
        v2273 = STACK[0x3C20] * STACK[0x1918];
        v2274 = (STACK[0x3C20] * (unsigned __int128)STACK[0x1918]) >> 64;
        if (v573)
          v2271 = 1;
        v573 = __CFADD__(33 * v2274, v2273);
        v2275 = 33 * v2274 + v2273;
        v2276 = (v2274 * (unsigned __int128)0x21uLL) >> 64;
        if (v573)
          ++v2276;
        v2277 = 33 * v2276;
        v573 = __CFADD__(v2277, v2275);
        v2278 = v2277 + v2275;
        v2279 = v573;
        if (v2278 > 0xFFFFFFFFFFFFFFDELL)
          v2279 = 1;
        if (v2279)
          v2280 = 33;
        else
          v2280 = 0;
        v2281 = v2280 + v2278;
        if (v2271)
          v2282 = 33;
        else
          v2282 = 0;
        v2283 = v2282 + v2272;
        v573 = __CFADD__((__PAIR128__(32, 0xD2087261F2F13621) * v2283) >> 64, 0xD2087261F2F13621 * v2283);
        v2284 = (__PAIR128__(v2283, v2283) * __PAIR128__(32, 0xD2087261F2F13621)) >> 64;
        v2285 = (((v2283 * (unsigned __int128)0xD2087261F2F13621) >> 64) * 0x21) >> 64;
        if (v573)
          ++v2285;
        v2286 = 33 * v2285;
        v573 = __CFADD__(v2286, v2284);
        v2287 = v2286 + v2284;
        v2288 = v573;
        if (v2287 > 0xFFFFFFFFFFFFFFDELL)
          v2288 = 1;
        if (v2288)
          v2289 = 33;
        else
          v2289 = 0;
        v2290 = v2289 + v2287;
        v573 = __CFADD__(v2281, v2290);
        v2291 = v2281 + v2290;
        v2292 = v573;
        if (v2291 > 0xFFFFFFFFFFFFFFDELL)
          v2292 = 1;
        if (v2292)
          v2293 = 33;
        else
          v2293 = 0;
        v2294 = v2293 + v2291;
        v573 = __CFADD__((__PAIR128__(32, 0xBF751FE036E6FC90) * v2294) >> 64, 0xBF751FE036E6FC90 * v2294);
        v2295 = (__PAIR128__(v2294, v2294) * __PAIR128__(32, 0xBF751FE036E6FC90)) >> 64;
        v2296 = (((v2294 * (unsigned __int128)0xBF751FE036E6FC90) >> 64) * 0x21) >> 64;
        if (v573)
          ++v2296;
        v2297 = 33 * v2296;
        v573 = __CFADD__(v2297, v2295);
        v2298 = v2297 + v2295;
        v2299 = v573;
        if (v2298 > 0xFFFFFFFFFFFFFFDELL)
          v2299 = 1;
        if (v2299)
          v2300 = 33;
        else
          v2300 = 0;
        v2301 = v2300 + v2298;
        if (v1908 >= 0xFFFFFFFFFFFFFFDFLL)
          v2302 = 33;
        else
          v2302 = 0;
        v2303 = v2302 + v1908;
        v573 = __CFADD__((__PAIR128__(32, 0xD2087261F2F13621) * v2303) >> 64, 0xD2087261F2F13621 * v2303);
        v2304 = (__PAIR128__(v2303, v2303) * __PAIR128__(32, 0xD2087261F2F13621)) >> 64;
        v2305 = (((v2303 * (unsigned __int128)0xD2087261F2F13621) >> 64) * 0x21) >> 64;
        if (v573)
          ++v2305;
        v2306 = 33 * v2305;
        v573 = __CFADD__(v2306, v2304);
        v2307 = v2306 + v2304;
        v2308 = v573;
        if (v2307 > 0xFFFFFFFFFFFFFFDELL)
          v2308 = 1;
        if (v2308)
          v2309 = 33;
        else
          v2309 = 0;
        v2310 = v2309 + v2307;
        v2311 = v2301 + v2310 > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v2301, v2310);
        v2312 = v2301 + v2310;
        if (v573 || v2311)
          v2314 = 33;
        else
          v2314 = 0;
        v2315 = v2314 + v2312;
        v573 = __CFADD__((__PAIR128__(32, 0x599999999999998ELL) * v2315) >> 64, 0x599999999999998ELL * v2315);
        v2316 = (__PAIR128__(v2315, v2315) * __PAIR128__(32, 0x599999999999998ELL)) >> 64;
        v2317 = (((v2315 * (unsigned __int128)0x599999999999998EuLL) >> 64) * 0x21) >> 64;
        if (v573)
          ++v2317;
        v2318 = 33 * v2317;
        v573 = __CFADD__(v2318, v2316);
        v2319 = v2318 + v2316;
        v2320 = v573;
        if (v2319 > 0xFFFFFFFFFFFFFFDELL)
          v2320 = 1;
        if (v2320)
          v2321 = 33;
        else
          v2321 = 0;
        v2322 = v2321 + v2319;
        STACK[0x3C28] = v2321 + v2319;
        if (v2052 >= 0xFFFFFFFFFFFFFFDFLL)
          v2323 = 33;
        else
          v2323 = 0;
        v2324 = v2323 + v2052;
        v573 = v2322 >= v2324;
        v2325 = v2322 - v2324;
        if (v573)
          v2326 = 0;
        else
          v2326 = -33;
        v2327 = v2325 + v2326;
        v573 = __CFADD__((__PAIR128__(32, 0xFFFFFFFFFFFFFFELL) * v2327) >> 64, 0xFFFFFFFFFFFFFFELL * v2327);
        v2328 = (__PAIR128__(v2327, v2327) * __PAIR128__(32, 0xFFFFFFFFFFFFFFELL)) >> 64;
        v2329 = (((v2327 * (unsigned __int128)0xFFFFFFFFFFFFFFEuLL) >> 64) * 0x21) >> 64;
        if (v573)
          ++v2329;
        v2330 = 33 * v2329;
        v573 = __CFADD__(v2330, v2328);
        v2331 = v2330 + v2328;
        v2332 = v573;
        if (v2331 > 0xFFFFFFFFFFFFFFDELL)
          v2332 = 1;
        if (v2332)
          v2333 = 33;
        else
          v2333 = 0;
        v2334 = v2333 + v2331;
        if (v2334 >= 0xFFFFFFFFFFFFFFD3)
          v2335 = 45;
        else
          v2335 = 0;
        if (v2203)
          v2336 = 45;
        else
          v2336 = 0;
        v2337 = v2336 + v2204;
        v2338 = v2335 + v2334;
        v573 = v2337 >= v2338;
        v2339 = v2337 - v2338;
        if (v573)
          v2340 = 0;
        else
          v2340 = -45;
        v2341 = v2339 + v2340;
        v2342 = 0x6AAAAAAAAAAAAA98 * v2341;
        v2343 = (v2341 * (unsigned __int128)0x6AAAAAAAAAAAAA98uLL) >> 64;
        v573 = __CFADD__(45 * v2343, v2342);
        v2344 = 45 * v2343 + v2342;
        v2345 = (v2343 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v2345;
        v2346 = 45 * v2345;
        v2347 = (unint64_t)(v2346 + v2344) > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v2346, v2344);
        v2348 = v2346 + v2344;
        if (v573)
          v2347 = 1;
        if (v1908 >= 0xFFFFFFFFFFFFFFD9)
          v2349 = 39;
        else
          v2349 = 0;
        v2350 = v2349 + v1908;
        v2351 = 0x40685A60ABFE0A21 * v2350;
        v2352 = (v2350 * (unsigned __int128)0x40685A60ABFE0A21uLL) >> 64;
        v573 = __CFADD__(39 * v2352, v2351);
        v2353 = 39 * v2352 + v2351;
        v2354 = (v2352 * (unsigned __int128)0x27uLL) >> 64;
        if (v573)
          ++v2354;
        v2355 = 39 * v2354;
        v2356 = (unint64_t)(v2355 + v2353) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v2355, v2353);
        v2357 = v2355 + v2353;
        v2358 = v573 || v2356;
        if (v1723 >= 0xFFFFFFFFFFFFFFD9)
          v2359 = 39;
        else
          v2359 = 0;
        v2360 = v2359 + v1723;
        v573 = v2360 >= 0xF078B496A5ALL;
        v2361 = 1116288 * v2360;
        v2362 = 39 * ((v2360 * (unsigned __int128)0x110880uLL) >> 64);
        if (!v573)
          v2362 = 0;
        v573 = __CFADD__(v2362, v2361);
        v2363 = v2362 + v2361;
        if (v573)
          v2364 = 39;
        else
          v2364 = 0;
        v2365 = (unint64_t)(v2364 + v2363) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v2364, v2363);
        v2366 = v2364 + v2363;
        v2367 = v573 || v2365;
        if (v1606 >= 0xFFFFFFFFFFFFFFD9)
          v2368 = 39;
        else
          v2368 = 0;
        v2369 = v2368 + v1606;
        v2370 = 984960 * v2369;
        v2371 = 39 * ((v2369 * (unsigned __int128)0xF0780uLL) >> 64);
        v573 = __CFADD__(v2371, v2370);
        v2372 = v2371 + v2370;
        if (v573)
          v2373 = 39;
        else
          v2373 = 0;
        v2374 = (unint64_t)(v2373 + v2372) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v2373, v2372);
        v2375 = v2373 + v2372;
        v2376 = v573 || v2374;
        if (v1689 >= 0xFFFFFFFFFFFFFFD9)
          v2377 = 39;
        else
          v2377 = 0;
        v2378 = v2377 + v1689;
        v2379 = 881280 * v2378;
        v2380 = 39 * ((v2378 * (unsigned __int128)0xD7280uLL) >> 64);
        if (v1639 >= 0xFFFFFFFFFFFFFFD9)
          v2381 = 39;
        else
          v2381 = 0;
        v573 = __CFADD__(v2380, v2379);
        v2382 = v2380 + v2379;
        v2383 = v2381 + v1639;
        if (v573)
          v2384 = 39;
        else
          v2384 = 0;
        v573 = __CFADD__(v2384, v2382);
        v2385 = v2384 + v2382;
        v2386 = 930240 * v2383;
        v2387 = 39 * ((v2383 * (unsigned __int128)0xE31C0uLL) >> 64);
        v2388 = v573;
        if (v2385 > 0xFFFFFFFFFFFFFFD8)
          v2388 = 1;
        v573 = __CFADD__(v2387, v2386);
        v2389 = v2387 + v2386;
        if (v573)
          v2390 = 39;
        else
          v2390 = 0;
        v573 = __CFADD__(v2390, v2389);
        v2391 = v2390 + v2389;
        v2392 = v573;
        if (v2391 > 0xFFFFFFFFFFFFFFD8)
          v2392 = 1;
        if (v2388)
          v2393 = 39;
        else
          v2393 = 0;
        v2394 = v2393 + v2385;
        if (v2392)
          v2395 = 39;
        else
          v2395 = 0;
        if (v2394 >= 0xFFFFFFFFFFFFFFD9)
          v2396 = 39;
        else
          v2396 = 0;
        v2397 = v2396 + v2394;
        v2398 = v2391 + v2397 + v2395;
        if (v2398 > 0xFFFFFFFFFFFFFFD8 || v2397 > v2398)
          v2400 = 39;
        else
          v2400 = 0;
        v2401 = v2400 + v2398;
        if (v2376)
          v2402 = 39;
        else
          v2402 = 0;
        v2403 = v2375 + v2402 + v2401;
        if (v1724 >= 0xFFFFFFFFFFFFFFD9)
          v2404 = 39;
        else
          v2404 = 0;
        if (v2401 > v2403 || v2403 > 0xFFFFFFFFFFFFFFD8)
          v2406 = 39;
        else
          v2406 = 0;
        v2407 = v2406 + v2403;
        if (v2367)
          v2408 = 39;
        else
          v2408 = 0;
        v2409 = v2408 + v2366;
        v573 = __CFADD__(v2409, v2407);
        v2410 = v2409 + v2407;
        v2411 = v2404 + v1724;
        v2412 = v573;
        if (v2410 > 0xFFFFFFFFFFFFFFD8)
          v2412 = 1;
        if (v2412)
          v2413 = 39;
        else
          v2413 = 0;
        v2414 = v2413 + v2410;
        v2415 = 1395360 * v2411;
        v2416 = 39 * ((v2411 * (unsigned __int128)0x154AA0uLL) >> 64);
        v573 = __CFADD__(v2416, v2415);
        v2417 = v2416 + v2415;
        if (v573)
          v2418 = 39;
        else
          v2418 = 0;
        v573 = __CFADD__(v2418, v2417);
        v2419 = v2418 + v2417;
        v2420 = v573;
        if (v2419 > 0xFFFFFFFFFFFFFFD8)
          v2420 = 1;
        if (v2420)
          v2421 = 39;
        else
          v2421 = 0;
        v2422 = v2421 + v2419;
        v2423 = v2422 + v2414 > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v2422, v2414);
        v2424 = v2422 + v2414;
        v2425 = STACK[0x3C68] * STACK[0x1928];
        v2426 = (STACK[0x3C68] * (unsigned __int128)STACK[0x1928]) >> 64;
        if (v573)
          v2423 = 1;
        v573 = __CFADD__(39 * v2426, v2425);
        v2427 = 39 * v2426 + v2425;
        v2428 = (v2426 * (unsigned __int128)0x27uLL) >> 64;
        if (v573)
          ++v2428;
        v2429 = 39 * v2428;
        v2430 = v2429 + v2427 > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v2429, v2427);
        v2431 = v2429 + v2427;
        if (v573 || v2430)
          v2433 = 39;
        else
          v2433 = 0;
        v2434 = v2433 + v2431;
        if (v2423)
          v2435 = 39;
        else
          v2435 = 0;
        v2436 = v2435 + v2424;
        v2437 = 0x40685A60ABFE0A21 * v2436;
        v2438 = (v2436 * (unsigned __int128)0x40685A60ABFE0A21uLL) >> 64;
        v573 = __CFADD__(39 * v2438, v2437);
        v2439 = 39 * v2438 + v2437;
        v2440 = (v2438 * (unsigned __int128)0x27uLL) >> 64;
        if (v573)
          ++v2440;
        v2441 = 39 * v2440;
        v573 = __CFADD__(v2441, v2439);
        v2442 = v2441 + v2439;
        v2443 = v573;
        if (v2442 > 0xFFFFFFFFFFFFFFD8)
          v2443 = 1;
        if (v2443)
          v2444 = 39;
        else
          v2444 = 0;
        v2445 = v2444 + v2442;
        v573 = __CFADD__(v2434, v2445);
        v2446 = v2434 + v2445;
        v2447 = v573;
        if (v2446 > 0xFFFFFFFFFFFFFFD8)
          v2447 = 1;
        if (v2447)
          v2448 = 39;
        else
          v2448 = 0;
        v2449 = v2448 + v2446;
        v2450 = 0x68180B91CEB03F68 * v2449;
        v2451 = (v2449 * (unsigned __int128)0x68180B91CEB03F68uLL) >> 64;
        v573 = __CFADD__(39 * v2451, v2450);
        v2452 = 39 * v2451 + v2450;
        v2453 = (v2451 * (unsigned __int128)0x27uLL) >> 64;
        if (v573)
          ++v2453;
        v2454 = 39 * v2453;
        v2455 = (unint64_t)(v2454 + v2452) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v2454, v2452);
        v2456 = v2454 + v2452;
        if (v573 || v2455)
          v2458 = 39;
        else
          v2458 = 0;
        v2459 = v2458 + v2456;
        if (v2358)
          v2460 = 39;
        else
          v2460 = 0;
        v2461 = v2460 + v2357;
        v2462 = (unint64_t)(v2459 + v2461) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v2459, v2461);
        v2463 = v2459 + v2461;
        if (v573 || v2462)
          v2465 = 39;
        else
          v2465 = 0;
        v2466 = v2465 + v2463;
        v2467 = 0x36DB6DB6DB6DB6D3 * v2466;
        v2468 = (v2466 * (unsigned __int128)0x36DB6DB6DB6DB6D3uLL) >> 64;
        v573 = __CFADD__(39 * v2468, v2467);
        v2469 = 39 * v2468 + v2467;
        v2470 = (v2468 * (unsigned __int128)0x27uLL) >> 64;
        if (v573)
          ++v2470;
        v2471 = 39 * v2470;
        v573 = __CFADD__(v2471, v2469);
        v2472 = v2471 + v2469;
        v2473 = v573;
        if (v2472 > 0xFFFFFFFFFFFFFFD8)
          v2473 = 1;
        if (v2473)
          v2474 = 39;
        else
          v2474 = 0;
        v2475 = v2474 + v2472;
        if (v2052 >= 0xFFFFFFFFFFFFFFD9)
          v2476 = 39;
        else
          v2476 = 0;
        v2477 = v2476 + v2052;
        v573 = v2475 >= v2477;
        v2478 = v2475 - v2477;
        if (v573)
          v2479 = 0;
        else
          v2479 = -39;
        v2480 = v2478 + v2479;
        v2481 = 0xBA2E8BA2E8BA2E7 * v2480;
        v2482 = (v2480 * (unsigned __int128)0xBA2E8BA2E8BA2E7uLL) >> 64;
        v573 = __CFADD__(39 * v2482, v2481);
        v2483 = 39 * v2482 + v2481;
        v2484 = (v2482 * (unsigned __int128)0x27uLL) >> 64;
        if (v573)
          ++v2484;
        v2485 = 39 * v2484;
        v2486 = (unint64_t)(v2485 + v2483) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v2485, v2483);
        v2487 = v2485 + v2483;
        v2488 = v573 || v2486;
        if (v2334 >= 0xFFFFFFFFFFFFFFD9)
          v2489 = 39;
        else
          v2489 = 0;
        if (v2488)
          v2490 = 39;
        else
          v2490 = 0;
        v2491 = v2490 + v2487;
        v573 = v2491 >= v2489 + v2334;
        v2492 = v2491 - (v2489 + v2334);
        if (v573)
          v2493 = 0;
        else
          v2493 = -39;
        v2494 = v2492 + v2493;
        v2495 = 0xD555555555555535 * v2494;
        v2496 = (v2494 * (unsigned __int128)0xD555555555555535) >> 64;
        v573 = __CFADD__(39 * v2496, v2495);
        v2497 = 39 * v2496 + v2495;
        v2498 = (v2496 * (unsigned __int128)0x27uLL) >> 64;
        if (v573)
          ++v2498;
        v2499 = 39 * v2498;
        v573 = __CFADD__(v2499, v2497);
        v2500 = v2499 + v2497;
        v2501 = v573;
        if (v2500 > 0xFFFFFFFFFFFFFFD8)
          v2501 = 1;
        if (v2501)
          v2502 = 39;
        else
          v2502 = 0;
        v2503 = v2502 + v2500;
        if (v2502 + v2500 >= 0xFFFFFFFFFFFFFFD3)
          v2504 = 45;
        else
          v2504 = 0;
        if (v2347)
          v2505 = 45;
        else
          v2505 = 0;
        v2506 = v2505 + v2348;
        v2507 = v2504 + v2503;
        v573 = v2506 >= v2507;
        v2508 = v2506 - v2507;
        if (v573)
          v2509 = 0;
        else
          v2509 = -45;
        v2510 = v2508 + v2509;
        v2511 = 0xD555555555555530 * v2510;
        v2512 = (v2510 * (unsigned __int128)0xD555555555555530) >> 64;
        v573 = __CFADD__(45 * v2512, v2511);
        v2513 = 45 * v2512 + v2511;
        v2514 = (v2512 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v2514;
        v2515 = 45 * v2514;
        v2516 = v2515 + v2513 > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v2515, v2513);
        v2517 = v2515 + v2513;
        v2518 = v573 || v2516;
        if (v2334 >= 0xFFFFFFFFFFFFFFD1)
          v2519 = 47;
        else
          v2519 = 0;
        if (v2067)
          v2520 = 47;
        else
          v2520 = 0;
        v2521 = v2520 + v2066;
        v2522 = v2519 + v2334;
        v573 = v2521 >= v2522;
        v2523 = v2521 - v2522;
        if (v573)
          v2524 = 0;
        else
          v2524 = -47;
        v2525 = v2523 + v2524;
        v2628 = v2518 == 0;
        v2526 = 0x5B6DB6DB6DB6DB5DLL * v2525;
        v2527 = (v2525 * (unsigned __int128)0x5B6DB6DB6DB6DB5DuLL) >> 64;
        v2528 = 47 * v2527;
        if (v2628)
          v2529 = 0;
        else
          v2529 = 45;
        v573 = __CFADD__(v2528, v2526);
        v2530 = v2528 + v2526;
        v2531 = v2529 + v2517;
        v2532 = (v2527 * (unsigned __int128)0x2FuLL) >> 64;
        if (v573)
          ++v2532;
        v2533 = 47 * v2532;
        v573 = __CFADD__(v2533, v2530);
        v2534 = v2533 + v2530;
        v2535 = v573;
        if (v2534 > 0xFFFFFFFFFFFFFFD0)
          v2535 = 1;
        if (v2503 >= 0xFFFFFFFFFFFFFFD1)
          v2536 = 47;
        else
          v2536 = 0;
        if (v2535)
          v2537 = 47;
        else
          v2537 = 0;
        v2538 = v2537 + v2534;
        v573 = v2538 >= v2536 + v2503;
        v2539 = v2538 - (v2536 + v2503);
        if (v573)
          v2540 = 0;
        else
          v2540 = -47;
        v2541 = v2539 + v2540;
        v2542 = 0xDFFFFFFFFFFFFFD7 * v2541;
        v2543 = (v2541 * (unsigned __int128)0xDFFFFFFFFFFFFFD7) >> 64;
        v2544 = 47 * v2543;
        if (v2531 >= 0xFFFFFFFFFFFFFFD1)
          v2545 = 47;
        else
          v2545 = 0;
        v573 = __CFADD__(v2544, v2542);
        v2546 = v2544 + v2542;
        v2547 = (v2543 * (unsigned __int128)0x2FuLL) >> 64;
        if (v573)
          ++v2547;
        v2548 = 47 * v2547;
        v573 = __CFADD__(v2548, v2546);
        v2549 = v2548 + v2546;
        v2550 = v573;
        if (v2549 > 0xFFFFFFFFFFFFFFD0)
          v2550 = 1;
        if (v2550)
          v2551 = 47;
        else
          v2551 = 0;
        v2552 = v2551 + v2549;
        v573 = v2552 >= v2545 + v2531;
        v2553 = v2552 - (v2545 + v2531);
        if (v573)
          v2554 = 0;
        else
          v2554 = -47;
        v2555 = v2553 + v2554;
        v2556 = 0x7FFFFFFFFFFFFFE9 * v2555;
        v2557 = (v2555 * (unsigned __int128)0x7FFFFFFFFFFFFFE9uLL) >> 64;
        v573 = __CFADD__(47 * v2557, v2556);
        v2558 = 47 * v2557 + v2556;
        v2559 = (v2557 * (unsigned __int128)0x2FuLL) >> 64;
        if (v573)
          ++v2559;
        v2560 = 47 * v2559;
        v573 = __CFADD__(v2560, v2558);
        v2561 = v2560 + v2558;
        v2562 = v573;
        if (v2561 > 0xFFFFFFFFFFFFFFD0)
          v2562 = 1;
        if (v2562)
          v2563 = 47;
        else
          v2563 = 0;
        v2564 = v2563 + v2561;
        if (v2563 + v2561 >= 0xFFFFFFFFFFFFFFCBLL)
          v2565 = 53;
        else
          v2565 = 0;
        v2566 = v2565 + v2564;
        v2567 = 53 * (v2566 >> 61);
        if (v2531 >= 0xFFFFFFFFFFFFFFCBLL)
          v2568 = 53;
        else
          v2568 = 0;
        v573 = __CFADD__(v2567, 8 * v2566);
        v2569 = v2567 + 8 * v2566;
        if (v573)
          v2570 = 53;
        else
          v2570 = 0;
        v573 = __CFADD__(v2570, v2569);
        v2571 = v2570 + v2569;
        v2572 = v573;
        if (v2571 > 0xFFFFFFFFFFFFFFCALL)
          v2572 = 1;
        if (v2572)
          v2573 = 53;
        else
          v2573 = 0;
        v2574 = v2573 + v2571;
        v2575 = v2568 + v2531;
        v2576 = v2568 + v2531 + v2574 > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v2575, v2574);
        v2577 = v2575 + v2574;
        if (v573 || v2576)
          v2579 = 53;
        else
          v2579 = 0;
        v2580 = v2579 + v2577;
        v2581 = 14 * v2580;
        v2582 = 53 * ((v2580 * (unsigned __int128)0xEuLL) >> 64);
        v573 = __CFADD__(v2582, v2581);
        v2583 = v2582 + v2581;
        if (v573)
          v2584 = 53;
        else
          v2584 = 0;
        v2585 = (unint64_t)(v2584 + v2583) > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v2584, v2583);
        v2586 = v2584 + v2583;
        v2587 = v573 || v2585;
        if (v2503 >= 0xFFFFFFFFFFFFFFCBLL)
          v2588 = 53;
        else
          v2588 = 0;
        if (v2587)
          v2589 = 53;
        else
          v2589 = 0;
        v2590 = v2589 + v2586;
        v2591 = v2588 + v2503;
        v2592 = v2588 + v2503 + v2590 > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v2591, v2590);
        v2593 = v2591 + v2590;
        if (v573 || v2592)
          v2595 = 53;
        else
          v2595 = 0;
        v2596 = v2595 + v2593;
        v2597 = 5 * v2596;
        v2598 = 53 * ((v2596 * (unsigned __int128)0x14uLL) >> 64);
        v573 = __CFADD__(v2598, 4 * v2597);
        v2599 = v2598 + 4 * v2597;
        if (v573)
          v2600 = 53;
        else
          v2600 = 0;
        v2601 = (unint64_t)(v2600 + v2599) > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v2600, v2599);
        v2602 = v2600 + v2599;
        v2603 = v573 || v2601;
        if (v2334 >= 0xFFFFFFFFFFFFFFCBLL)
          v2604 = 53;
        else
          v2604 = 0;
        if (v2603)
          v2605 = 53;
        else
          v2605 = 0;
        v2606 = v2605 + v2602;
        v573 = __CFADD__(v2604 + v2334, v2606);
        v2607 = v2604 + v2334 + v2606;
        v2608 = v573;
        if (v2607 > 0xFFFFFFFFFFFFFFCALL)
          v2608 = 1;
        if (v2608)
          v2609 = 53;
        else
          v2609 = 0;
        v2610 = v2609 + v2607;
        v2611 = 9 * v2610;
        v2612 = 53 * ((v2610 * (unsigned __int128)0x24uLL) >> 64);
        if (v2052 >= 0xFFFFFFFFFFFFFFCBLL)
          v2613 = 53;
        else
          v2613 = 0;
        v573 = __CFADD__(v2612, 4 * v2611);
        v2614 = v2612 + 4 * v2611;
        if (v573)
          v2615 = 53;
        else
          v2615 = 0;
        v573 = __CFADD__(v2615, v2614);
        v2616 = v2615 + v2614;
        v2617 = v573;
        if (v2616 > 0xFFFFFFFFFFFFFFCALL)
          v2617 = 1;
        if (v2617)
          v2618 = 53;
        else
          v2618 = 0;
        v2619 = v2618 + v2616;
        if (v2564)
          v2620 = 0;
        else
          v2620 = v2531 > 0x888941CDB1E411EELL;
        v2621 = v2613 + v2052;
        if (v2564)
          v2622 = 0;
        else
          v2622 = v2531 < 0x888941CDB1E411EELL;
        v573 = __CFADD__(v2621, v2619);
        v2623 = v2621 + v2619;
        v2624 = (v2564 != 0) - v2622 + v2620;
        v2625 = v573;
        if (v2623 > 0xFFFFFFFFFFFFFFCALL)
          v2625 = 1;
        if (v2625)
          v2626 = 53;
        else
          v2626 = 0;
        v2627 = v2626 + v2623;
        v2628 = !v2624;
        v2629 = !v2624 && v2503 < 0x1104BC203A2C6C1ELL;
        v2630 = v2624 - v2629;
        v2631 = v2628 && v2503 > 0x1104BC203A2C6C1ELL;
        v2632 = v2630 + v2631;
        v2633 = !v2632;
        v2634 = !v2632 && v2334 < 0x71527BE5745B8317;
        v2635 = v2632 - v2634;
        v2636 = v2633 && v2334 > 0x71527BE5745B8317;
        v2638 = v2635 + v2636;
        v2637 = !v2638;
        v2639 = !v2638 && v2052 < 0xBCE0B40AAD3903CALL;
        v2640 = v2638 - v2639;
        v2641 = v2637 && v2052 > 0xBCE0B40AAD3903CALL;
        v2642 = v2640 + v2641;
        v2643 = v2642 == -1;
        if (v2642 == -1)
          v2644 = 0;
        else
          v2644 = 0x59B5C1D0E4B2171ALL;
        v2645 = v2627 + v2644;
        v2646 = 0x9057E5706EFB6C51;
        if (v2643)
          v2646 = 0;
        STACK[0x36D0] = v2646;
        v2647 = 0x29DEAB8CCE63CD56;
        if (v2643)
          v2647 = 0;
        STACK[0x3678] = v2647;
        v2648 = 0x63076736DBF9A05;
        if (v2643)
          v2648 = 0;
        STACK[0x36E8] = v2648;
        v2649 = 0xE57DAA7F4F9C214;
        if (v2643)
          v2649 = 0;
        STACK[0x3670] = v2649;
        v2650 = 0x2DF78D9E0D0EC9DFLL;
        if (v2643)
          v2650 = 0;
        STACK[0x36D8] = v2650;
        v2651 = 0x1A6EA717DFE5D51DLL;
        if (v2643)
          v2651 = 0;
        STACK[0x3680] = v2651;
        v2652 = 0xB49BF27CED4A1D5ELL;
        if (v2643)
          v2652 = 0;
        STACK[0x3688] = v2652;
        v2653 = 0x431F4BF552C6FC36;
        if (v2643)
          v2653 = 0;
        STACK[0x36E0] = v2653;
        v2654 = 0x4EFCA0B75A68C8F4;
        if (v2643)
          v2654 = 0;
        STACK[0x36F0] = v2654;
        v2655 = 0xBF97A59F5401F5DFLL;
        if (v2643)
          v2655 = 0;
        STACK[0x36C8] = v2655;
        if (v2627 >= v2645)
          v2656 = 0;
        else
          v2656 = -53;
        v2657 = v2656 + v2645;
        if (LODWORD(STACK[0x36F8]))
          v2658 = 47;
        else
          v2658 = 0;
        v2659 = STACK[0x3700] + STACK[0x3738] + v2658;
        if (STACK[0x3738] > v2659 || v2659 > 0xFFFFFFFFFFFFFFD0)
          v2661 = 47;
        else
          v2661 = 0;
        v2662 = v2661 + v2659;
        v2663 = 47 * v2662;
        v2664 = 47 * ((v2662 * (unsigned __int128)0x2FuLL) >> 64);
        v573 = __CFADD__(v2664, v2663);
        v2665 = v2664 + v2663;
        if (v573)
          v2666 = 47;
        else
          v2666 = 0;
        v573 = __CFADD__(v2666, v2665);
        v2667 = v2666 + v2665;
        v2668 = v573;
        if (v2667 > 0xFFFFFFFFFFFFFFD0)
          v2668 = 1;
        v2669 = STACK[0x3720];
        v2670 = v2667 + STACK[0x3720];
        if (v2668)
          v2671 = 47;
        else
          v2671 = 0;
        v2672 = v2670 + v2671;
        v2673 = v2672 < v2669;
        STACK[0x1FC8] = v2657;
        if (!v2657)
          v2673 = 0;
        v2674 = v2673 ^ (v2672 > 0xFFFFFFFFFFFFFFD0);
        if (v2672 < v2669)
          v2674 = 1;
        v2675 = v2672 - (-v2674 & 0xFFFFFFFFFFFFFFD1);
        v2676 = 47 * v2675;
        v2677 = 47 * ((v2675 * (unsigned __int128)0x2FuLL) >> 64);
        v573 = __CFADD__(v2677, v2676);
        v2678 = v2677 + v2676;
        if (v573)
          v2679 = 47;
        else
          v2679 = 0;
        STACK[0x3C20] = v2679 + v2678;
        v2680 = __CFADD__(v2679, v2678) || (unint64_t)(v2679 + v2678) > 0xFFFFFFFFFFFFFFD0;
        LODWORD(STACK[0x3C08]) = v2680;
        v2681 = STACK[0x3708];
        if (STACK[0x3708] >= 0xFFFFFFFFFFFFFFD3)
          v2682 = 45;
        else
          v2682 = 0;
        v2683 = v2682 + v2681;
        v2684 = 45 * v2683;
        v2685 = 45 * ((v2683 * (unsigned __int128)0x2DuLL) >> 64);
        v573 = __CFADD__(v2685, v2684);
        v2686 = v2685 + v2684;
        if (v573)
          v2687 = 45;
        else
          v2687 = 0;
        v573 = __CFADD__(v2687, v2686);
        v2688 = v2687 + v2686;
        v2689 = v573;
        if (v2688 > 0xFFFFFFFFFFFFFFD2)
          v2689 = 1;
        v2690 = v2688 + STACK[0x3730];
        if (v2689)
          v2691 = 45;
        else
          v2691 = 0;
        v2692 = v2690 + v2691;
        if (STACK[0x3730] > v2692 || v2692 > 0xFFFFFFFFFFFFFFD2)
          v2694 = 45;
        else
          v2694 = 0;
        v2695 = v2694 + v2692;
        v2696 = 45 * v2695;
        v2697 = 45 * ((v2695 * (unsigned __int128)0x2DuLL) >> 64);
        v573 = __CFADD__(v2697, v2696);
        v2698 = v2697 + v2696;
        if (v573)
          v2699 = 45;
        else
          v2699 = 0;
        STACK[0x3738] = v2699 + v2698;
        v2700 = __CFADD__(v2699, v2698) || (unint64_t)(v2699 + v2698) > 0xFFFFFFFFFFFFFFD2;
        LODWORD(STACK[0x3730]) = v2700;
        if (v2681 >= 0xFFFFFFFFFFFFFFD9)
          v2701 = 39;
        else
          v2701 = 0;
        v2702 = v2701 + v2681;
        v2703 = 39 * v2702;
        v2704 = 39 * ((v2702 * (unsigned __int128)0x27uLL) >> 64);
        v573 = __CFADD__(v2704, v2703);
        v2705 = v2704 + v2703;
        if (v573)
          v2706 = 39;
        else
          v2706 = 0;
        v573 = __CFADD__(v2706, v2705);
        v2707 = v2706 + v2705;
        v2708 = v573;
        if (v2707 > 0xFFFFFFFFFFFFFFD8)
          v2708 = 1;
        v2709 = v2707 + STACK[0x3728];
        if (v2708)
          v2710 = 39;
        else
          v2710 = 0;
        v2711 = v2709 + v2710;
        if (v2711 <= 0xFFFFFFFFFFFFFFD8 && v2711 >= STACK[0x3728])
          v2713 = 0;
        else
          v2713 = 39;
        v2714 = v2713 + v2711;
        v2715 = 39 * v2714;
        v2716 = 39 * ((v2714 * (unsigned __int128)0x27uLL) >> 64);
        v573 = __CFADD__(v2716, v2715);
        v2717 = v2716 + v2715;
        if (v573)
          v2718 = 39;
        else
          v2718 = 0;
        v2719 = (unint64_t)(v2718 + v2717) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v2718, v2717);
        v2720 = v2718 + v2717;
        v2721 = v573 || v2719;
        v2722 = STACK[0x3718];
        if (STACK[0x3718] >= 0xFFFFFFFFFFFFFFD9)
          v2723 = 39;
        else
          v2723 = 0;
        STACK[0x3C68] = v2723 + v2722;
        v2724 = v2720 + v2723 + v2722;
        if (v2721)
          v2725 = 39;
        else
          v2725 = 0;
        v2726 = v2724 + v2725;
        if (v2726 > 0xFFFFFFFFFFFFFFD8 || v2723 + v2722 > v2726)
          v2728 = 39;
        else
          v2728 = 0;
        v2729 = v2728 + v2726;
        v2730 = 39 * v2729;
        v2731 = 39 * ((v2729 * (unsigned __int128)0x27uLL) >> 64);
        v573 = __CFADD__(v2731, v2730);
        v2732 = v2731 + v2730;
        if (v573)
          v2733 = 39;
        else
          v2733 = 0;
        STACK[0x3728] = v2733 + v2732;
        v2734 = __CFADD__(v2733, v2732) || (unint64_t)(v2733 + v2732) > 0xFFFFFFFFFFFFFFD8;
        LODWORD(STACK[0x3720]) = v2734;
        if (v2681 >= 0xFFFFFFFFFFFFFFDFLL)
          v2735 = 33;
        else
          v2735 = 0;
        v2736 = v2735 + v2681;
        v2737 = 33 * v2736;
        v2738 = (__PAIR128__(32, 33) * v2736) >> 64;
        v573 = __CFADD__(v2738, v2737);
        v2739 = v2738 + v2737;
        if (v573)
          v2740 = 33;
        else
          v2740 = 0;
        v2741 = (unint64_t)(v2740 + v2739) > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v2740, v2739);
        v2742 = v2740 + v2739;
        v2743 = v573 || v2741;
        v2744 = v2742 + STACK[0x3748];
        if (v2743)
          v2745 = 33;
        else
          v2745 = 0;
        v2746 = v2744 + v2745;
        if (v2746 < STACK[0x3748] || v2746 > 0xFFFFFFFFFFFFFFDELL)
          v2748 = 33;
        else
          v2748 = 0;
        v2749 = v2748 + v2746;
        v2750 = 33 * v2749;
        v2751 = (__PAIR128__(32, 33) * v2749) >> 64;
        v573 = __CFADD__(v2751, v2750);
        v2752 = v2751 + v2750;
        if (v573)
          v2753 = 33;
        else
          v2753 = 0;
        v573 = __CFADD__(v2753, v2752);
        v2754 = v2753 + v2752;
        v2755 = v573;
        if (v2754 > 0xFFFFFFFFFFFFFFDELL)
          v2755 = 1;
        v2756 = v2754 + STACK[0x3740];
        if (v2755)
          v2757 = 33;
        else
          v2757 = 0;
        v2758 = v2756 + v2757;
        if (v2758 < STACK[0x3740] || v2758 > 0xFFFFFFFFFFFFFFDELL)
          v2760 = 33;
        else
          v2760 = 0;
        v2761 = v2760 + v2758;
        v2762 = 33 * v2761;
        v2763 = (__PAIR128__(32, 33) * v2761) >> 64;
        v573 = __CFADD__(v2763, v2762);
        v2764 = v2763 + v2762;
        if (v573)
          v2765 = 33;
        else
          v2765 = 0;
        STACK[0x3740] = v2765 + v2764;
        v2766 = __CFADD__(v2765, v2764) || (unint64_t)(v2765 + v2764) > 0xFFFFFFFFFFFFFFDELL;
        LODWORD(STACK[0x3700]) = v2766;
        if (v2681 >= 0xFFFFFFFFFFFFFFEFLL)
          v2767 = 17;
        else
          v2767 = 0;
        v2768 = v2767 + v2681;
        v2769 = 17 * v2768;
        v2770 = (__PAIR128__(16, 17) * v2768) >> 64;
        v573 = __CFADD__(v2770, v2769);
        v2771 = v2770 + v2769;
        if (v573)
          v2772 = 17;
        else
          v2772 = 0;
        STACK[0x36F8] = v2772 + v2771;
        v2773 = __CFADD__(v2772, v2771) || (unint64_t)(v2772 + v2771) > 0xFFFFFFFFFFFFFFEELL;
        LODWORD(STACK[0x3668]) = v2773;
        if (v2681 >= 0xFFFFFFFFFFFFFFF1)
          v2774 = 15;
        else
          v2774 = 0;
        v2775 = v2774 + v2681;
        v2776 = 15 * v2775;
        v2777 = 15 * ((v2775 * (unsigned __int128)0xFuLL) >> 64);
        v573 = __CFADD__(v2777, v2776);
        v2778 = v2777 + v2776;
        if (v573)
          v2779 = 15;
        else
          v2779 = 0;
        v2780 = (unint64_t)(v2779 + v2778) > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v2779, v2778);
        v2781 = v2779 + v2778;
        v2782 = v573 || v2780;
        v2783 = v2781 + STACK[0x3750];
        if (v2782)
          v2784 = 15;
        else
          v2784 = 0;
        v2785 = v2783 + v2784;
        if (v2785 < STACK[0x3750] || v2785 > 0xFFFFFFFFFFFFFFF0)
          v2787 = 15;
        else
          v2787 = 0;
        v2788 = v2787 + v2785;
        v2789 = 15 * v2788;
        v2790 = 15 * ((v2788 * (unsigned __int128)0xFuLL) >> 64);
        v573 = __CFADD__(v2790, v2789);
        v2791 = v2790 + v2789;
        if (v573)
          v2792 = 15;
        else
          v2792 = 0;
        STACK[0x3660] = v2792 + v2791;
        v2793 = __CFADD__(v2792, v2791) || (unint64_t)(v2792 + v2791) > 0xFFFFFFFFFFFFFFF0;
        LODWORD(STACK[0x3658]) = v2793;
        if (v2681 >= 0xFFFFFFFFFFFFFFF7)
          v2794 = 9;
        else
          v2794 = 0;
        v2795 = v2794 + v2681;
        v2796 = 9 * v2795;
        v2797 = (__PAIR128__(8, 9) * v2795) >> 64;
        if (v1401 <= 0xFFFFFFFFFFFFFFF6)
          v2798 = 0;
        else
          v2798 = 9;
        v573 = __CFADD__(v2797, v2796);
        v2799 = v2797 + v2796;
        if (v573)
          v2800 = 9;
        else
          v2800 = 0;
        v573 = __CFADD__(v2800, v2799);
        v2801 = v2800 + v2799;
        v2802 = v573;
        if (v2801 > 0xFFFFFFFFFFFFFFF6)
          v2802 = 1;
        v2803 = v2798 + v1401;
        STACK[0x3750] = v2803;
        v2804 = v2801 + v2803;
        if (v2802)
          v2805 = 9;
        else
          v2805 = 0;
        v2806 = v2804 + v2805;
        if (v2806 > 0xFFFFFFFFFFFFFFF6 || v2803 > v2806)
          v2808 = 9;
        else
          v2808 = 0;
        v2809 = v2808 + v2806;
        v2810 = 9 * v2809;
        v2811 = (__PAIR128__(8, 9) * v2809) >> 64;
        v573 = __CFADD__(v2811, v2810);
        v2812 = v2811 + v2810;
        if (v573)
          v2813 = 9;
        else
          v2813 = 0;
        v2814 = (unint64_t)(v2813 + v2812) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v2813, v2812);
        v2815 = v2813 + v2812;
        v2816 = v573 || v2814;
        if (v2722 >= 0xFFFFFFFFFFFFFFF7)
          v2817 = 9;
        else
          v2817 = 0;
        v2818 = v2817 + v2722;
        STACK[0x3748] = v2818;
        v2819 = v2815 + v2818;
        if (v2816)
          v2820 = 9;
        else
          v2820 = 0;
        v2821 = v2819 + v2820;
        if (v2821 > 0xFFFFFFFFFFFFFFF6 || v2818 > v2821)
          v2823 = 9;
        else
          v2823 = 0;
        v2824 = v2823 + v2821;
        v2825 = 9 * v2824;
        v2826 = (__PAIR128__(8, 9) * v2824) >> 64;
        v573 = __CFADD__(v2826, v2825);
        v2827 = v2826 + v2825;
        if (v573)
          v2828 = 9;
        else
          v2828 = 0;
        STACK[0x3650] = v2828 + v2827;
        v2829 = __CFADD__(v2828, v2827) || (unint64_t)(v2828 + v2827) > 0xFFFFFFFFFFFFFFF6;
        LODWORD(STACK[0x3648]) = v2829;
        if (v2681 >= 0xFFFFFFFFFFFFFFFBLL)
          v2830 = 5;
        else
          v2830 = 0;
        v2831 = v2830 + v2681;
        v2832 = 5 * v2831;
        v2833 = (__PAIR128__(4, 5) * v2831) >> 64;
        v573 = __CFADD__(v2833, v2832);
        v2834 = v2833 + v2832;
        if (v573)
          v2835 = 5;
        else
          v2835 = 0;
        v573 = __CFADD__(v2835, v2834);
        v2836 = v2835 + v2834;
        v2837 = v573;
        if (v2836 > 0xFFFFFFFFFFFFFFFALL)
          v2837 = 1;
        v2838 = v2836 + STACK[0x3760];
        if (v2837)
          v2839 = 5;
        else
          v2839 = 0;
        v2840 = v2838 + v2839;
        if (v2840 <= 0xFFFFFFFFFFFFFFFALL && v2840 >= STACK[0x3760])
          v2842 = 0;
        else
          v2842 = 5;
        v2843 = v2842 + v2840;
        v2844 = 5 * v2843;
        v2845 = (__PAIR128__(4, 5) * v2843) >> 64;
        v573 = __CFADD__(v2845, v2844);
        v2846 = v2845 + v2844;
        if (v573)
          v2847 = 5;
        else
          v2847 = 0;
        v2848 = (unint64_t)(v2847 + v2846) > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v2847, v2846);
        v2849 = v2847 + v2846;
        v2850 = v573 || v2848;
        v2851 = v2849 + STACK[0x3758];
        if (v2850)
          v2852 = 5;
        else
          v2852 = 0;
        v2853 = v2851 + v2852;
        if (v2853 < STACK[0x3758] || v2853 > 0xFFFFFFFFFFFFFFFALL)
          v2855 = 5;
        else
          v2855 = 0;
        v2856 = v2855 + v2853;
        v2857 = 5 * v2856;
        v2858 = (__PAIR128__(4, 5) * v2856) >> 64;
        v573 = __CFADD__(v2858, v2857);
        v2859 = v2858 + v2857;
        if (v573)
          v2860 = 5;
        else
          v2860 = 0;
        STACK[0x3760] = v2860 + v2859;
        v2861 = __CFADD__(v2860, v2859) || (unint64_t)(v2860 + v2859) > 0xFFFFFFFFFFFFFFFALL;
        LODWORD(STACK[0x3758]) = v2861;
        if (v2681 >= 0xFFFFFFFFFFFFFFFDLL)
          v2862 = 3;
        else
          v2862 = 0;
        v2863 = v2862 + v2681;
        v2864 = 3 * v2863;
        v2865 = (__PAIR128__(2, 3) * v2863) >> 64;
        v573 = __CFADD__(v2865, v2864);
        v2866 = v2865 + v2864;
        if (v573)
          v2867 = 3;
        else
          v2867 = 0;
        v2868 = (unint64_t)(v2867 + v2866) > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v2867, v2866);
        v2869 = v2867 + v2866;
        v2870 = v573 || v2868;
        v2871 = v2869 + STACK[0x3768];
        if (v2870)
          v2872 = 3;
        else
          v2872 = 0;
        v2873 = v2871 + v2872;
        if (STACK[0x3768] > v2873 || v2873 > 0xFFFFFFFFFFFFFFFCLL)
          v2875 = 3;
        else
          v2875 = 0;
        v2876 = v2875 + v2873;
        v2877 = 3 * v2876;
        v2878 = (__PAIR128__(2, 3) * v2876) >> 64;
        v573 = __CFADD__(v2878, v2877);
        v2879 = v2878 + v2877;
        if (v573)
          v2880 = 3;
        else
          v2880 = 0;
        v573 = __CFADD__(v2880, v2879);
        v2881 = v2880 + v2879;
        v2882 = v573;
        if (v2722 >= 0xFFFFFFFFFFFFFFFDLL)
          v2883 = 3;
        else
          v2883 = 0;
        if (v2881 > 0xFFFFFFFFFFFFFFFCLL)
          v2882 = 1;
        v2628 = v2882 == 0;
        v2884 = v2883 + v2722;
        STACK[0x3768] = v2883 + v2722;
        v2885 = v2881 + v2883 + v2722;
        if (v2628)
          v2886 = 0;
        else
          v2886 = 3;
        v2887 = v2885 + v2886;
        if (v2887 > 0xFFFFFFFFFFFFFFFCLL || v2884 > v2887)
          v2889 = 3;
        else
          v2889 = 0;
        v2890 = v2889 + v2887;
        v2891 = 3 * v2890;
        v2892 = (__PAIR128__(2, 3) * v2890) >> 64;
        v573 = __CFADD__(v2892, v2891);
        v2893 = v2892 + v2891;
        if (v573)
          v2894 = 3;
        else
          v2894 = 0;
        STACK[0x3640] = v2894 + v2893;
        v2895 = __CFADD__(v2894, v2893) || (unint64_t)(v2894 + v2893) > 0xFFFFFFFFFFFFFFFCLL;
        if (v2564 >= 0xFFFFFFFFFFFFFFF1)
          v2896 = 15;
        else
          v2896 = 0;
        v2897 = v2896 + v2564;
        v2898 = -45 * v2897;
        v2899 = (v2897 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64;
        v573 = __CFADD__(15 * v2899, v2898);
        v2900 = 15 * v2899 + v2898;
        v2901 = (v2899 * (unsigned __int128)0xFuLL) >> 64;
        if (v573)
          ++v2901;
        v2902 = 15 * v2901;
        v2903 = (unint64_t)(v2902 + v2900) > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v2902, v2900);
        v2904 = v2902 + v2900;
        v2905 = v573 || v2903;
        if (v2531 >= 0xFFFFFFFFFFFFFFF1)
          v2906 = 15;
        else
          v2906 = 0;
        if (v2905)
          v2907 = 15;
        else
          v2907 = 0;
        v2908 = v2907 + v2904;
        v573 = __CFADD__(v2906 + v2531, v2908);
        v2909 = v2906 + v2531 + v2908;
        v2910 = v573;
        if (v2909 > 0xFFFFFFFFFFFFFFF0)
          v2910 = 1;
        if (v2910)
          v2911 = 15;
        else
          v2911 = 0;
        v2912 = v2911 + v2909;
        v2913 = -39 * v2912;
        v2914 = (v2912 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64;
        v573 = __CFADD__(15 * v2914, v2913);
        v2915 = 15 * v2914 + v2913;
        v2916 = (v2914 * (unsigned __int128)0xFuLL) >> 64;
        if (v573)
          ++v2916;
        v2917 = 15 * v2916;
        v2918 = (unint64_t)(v2917 + v2915) > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v2917, v2915);
        v2919 = v2917 + v2915;
        v2920 = v573 || v2918;
        if (v2503 >= 0xFFFFFFFFFFFFFFF1)
          v2921 = 15;
        else
          v2921 = 0;
        if (v2920)
          v2922 = 15;
        else
          v2922 = 0;
        v2923 = v2922 + v2919;
        v2924 = v2921 + v2503;
        v2925 = v2921 + v2503 + v2923 > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v2924, v2923);
        v2926 = v2924 + v2923;
        if (v573 || v2925)
          v2928 = 15;
        else
          v2928 = 0;
        v2929 = v2928 + v2926;
        v2930 = 33 * v2929;
        v2931 = (v2929 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64;
        v2932 = -v2930;
        v573 = __CFADD__(15 * v2931, v2932);
        v2933 = 15 * v2931 + v2932;
        v2934 = (v2931 * (unsigned __int128)0xFuLL) >> 64;
        if (v573)
          ++v2934;
        v2935 = 15 * v2934;
        v2936 = (unint64_t)(v2935 + v2933) > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v2935, v2933);
        v2937 = v2935 + v2933;
        v2938 = v573 || v2936;
        if (v2334 >= 0xFFFFFFFFFFFFFFF1)
          v2939 = 15;
        else
          v2939 = 0;
        if (v2938)
          v2940 = 15;
        else
          v2940 = 0;
        v2941 = v2940 + v2937;
        v573 = __CFADD__(v2939 + v2334, v2941);
        v2942 = v2939 + v2334 + v2941;
        v2943 = v573;
        if (v2942 > 0xFFFFFFFFFFFFFFF0)
          v2943 = 1;
        if (v2943)
          v2944 = 15;
        else
          v2944 = 0;
        v2945 = v2944 + v2942;
        v2946 = 17 * v2945;
        v2947 = (v2945 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64;
        v2948 = -v2946;
        v573 = __CFADD__(15 * v2947, v2948);
        v2949 = 15 * v2947 + v2948;
        v2950 = (v2947 * (unsigned __int128)0xFuLL) >> 64;
        if (v573)
          ++v2950;
        v2951 = 15 * v2950;
        v2952 = (unint64_t)(v2951 + v2949) > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v2951, v2949);
        v2953 = v2951 + v2949;
        v2954 = v573 || v2952;
        if (v2052 >= 0xFFFFFFFFFFFFFFF1)
          v2955 = 15;
        else
          v2955 = 0;
        if (v2954)
          v2956 = 15;
        else
          v2956 = 0;
        v2957 = v2956 + v2953;
        v2958 = v2955 + v2052;
        v2959 = v2955 + v2052 + v2957 > 0xFFFFFFFFFFFFFFF0;
        v2960 = v2958 + v2957;
        v2961 = __CFADD__(v2958, v2957) || v2959;
        if (v2564 >= 0xFFFFFFFFFFFFFFF7)
          v2962 = 9;
        else
          v2962 = 0;
        v2963 = v2962 + v2564;
        v573 = __CFADD__((__PAIR128__(8, -45) * v2963) >> 64, -45 * v2963);
        v2964 = (__PAIR128__(v2963, v2963) * __PAIR128__(8, -45)) >> 64;
        v2965 = (((v2963 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64) * 9) >> 64;
        if (v573)
          ++v2965;
        v2966 = 9 * v2965;
        v2967 = (unint64_t)(v2966 + v2964) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v2966, v2964);
        v2968 = v2966 + v2964;
        v2969 = v573 || v2967;
        if (v2531 >= 0xFFFFFFFFFFFFFFF7)
          v2970 = 9;
        else
          v2970 = 0;
        if (v2969)
          v2971 = 9;
        else
          v2971 = 0;
        v2972 = v2971 + v2968;
        v573 = __CFADD__(v2970 + v2531, v2972);
        v2973 = v2970 + v2531 + v2972;
        v2974 = v573;
        if (v2973 > 0xFFFFFFFFFFFFFFF6)
          v2974 = 1;
        if (v2974)
          v2975 = 9;
        else
          v2975 = 0;
        v2976 = v2975 + v2973;
        v573 = __CFADD__((__PAIR128__(8, -39) * v2976) >> 64, -39 * v2976);
        v2977 = (__PAIR128__(v2976, v2976) * __PAIR128__(8, -39)) >> 64;
        v2978 = (((v2976 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64) * 9) >> 64;
        if (v573)
          ++v2978;
        v2979 = 9 * v2978;
        v2980 = (unint64_t)(v2979 + v2977) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v2979, v2977);
        v2981 = v2979 + v2977;
        v2982 = v573 || v2980;
        if (v2503 >= 0xFFFFFFFFFFFFFFF7)
          v2983 = 9;
        else
          v2983 = 0;
        if (v2982)
          v2984 = 9;
        else
          v2984 = 0;
        v2985 = v2984 + v2981;
        v573 = __CFADD__(v2983 + v2503, v2985);
        v2986 = v2983 + v2503 + v2985;
        v2987 = v573;
        if (v2986 > 0xFFFFFFFFFFFFFFF6)
          v2987 = 1;
        if (v2987)
          v2988 = 9;
        else
          v2988 = 0;
        v2989 = v2988 + v2986;
        v573 = __CFADD__((__PAIR128__(8, -33) * v2989) >> 64, -33 * v2989);
        v2990 = (__PAIR128__(v2989, v2989) * __PAIR128__(8, -33)) >> 64;
        v2991 = (((v2989 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64) * 9) >> 64;
        if (v573)
          ++v2991;
        v2992 = 9 * v2991;
        v573 = __CFADD__(v2992, v2990);
        v2993 = v2992 + v2990;
        v2994 = v573;
        if (v2993 > 0xFFFFFFFFFFFFFFF6)
          v2994 = 1;
        if (v2334 >= 0xFFFFFFFFFFFFFFF7)
          v2995 = 9;
        else
          v2995 = 0;
        if (v2994)
          v2996 = 9;
        else
          v2996 = 0;
        v2997 = v2996 + v2993;
        v573 = __CFADD__(v2995 + v2334, v2997);
        v2998 = v2995 + v2334 + v2997;
        v2999 = v573;
        if (v2998 > 0xFFFFFFFFFFFFFFF6)
          v2999 = 1;
        if (v2999)
          v3000 = 9;
        else
          v3000 = 0;
        v3001 = v3000 + v2998;
        v573 = __CFADD__((__PAIR128__(8, -17) * v3001) >> 64, -17 * v3001);
        v3002 = (__PAIR128__(-17, -17) * v3001) >> 64;
        v3003 = (((v3001 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64) * 9) >> 64;
        if (v573)
          ++v3003;
        v3004 = 9 * v3003;
        v3005 = (unint64_t)(v3004 + v3002) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v3004, v3002);
        v3006 = v3004 + v3002;
        v3007 = v573 || v3005;
        if (v2052 >= 0xFFFFFFFFFFFFFFF7)
          v3008 = 9;
        else
          v3008 = 0;
        if (v3007)
          v3009 = 9;
        else
          v3009 = 0;
        v3010 = v3009 + v3006;
        v3011 = v3008 + v2052;
        v3012 = v3008 + v2052 + v3010 > 0xFFFFFFFFFFFFFFF6;
        v3013 = v3011 + v3010;
        if (__CFADD__(v3011, v3010))
          v3012 = 1;
        if (v2564 >= 0xFFFFFFFFFFFFFFFBLL)
          v3014 = 5;
        else
          v3014 = 0;
        v3015 = v3014 + v2564;
        v573 = __CFADD__((__PAIR128__(4, -45) * v3015) >> 64, -45 * v3015);
        v3016 = (__PAIR128__(v3015, v3015) * __PAIR128__(4, -45)) >> 64;
        v3017 = (((v3015 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64) * 5) >> 64;
        if (v573)
          ++v3017;
        v3018 = 5 * v3017;
        if (v2531 >= 0xFFFFFFFFFFFFFFFBLL)
          v3019 = 5;
        else
          v3019 = 0;
        v573 = __CFADD__(v3018, v3016);
        v3020 = v3018 + v3016;
        v3021 = v573;
        if (v3020 > 0xFFFFFFFFFFFFFFFALL)
          v3021 = 1;
        if (v3021)
          v3022 = 5;
        else
          v3022 = 0;
        v3023 = v3022 + v3020;
        v3024 = v3019 + v2531;
        v3025 = v3019 + v2531 + v3023 > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v3024, v3023);
        v3026 = v3024 + v3023;
        if (v573 || v3025)
          v3028 = 5;
        else
          v3028 = 0;
        v3029 = v3028 + v3026;
        v573 = __CFADD__((__PAIR128__(4, -39) * v3029) >> 64, -39 * v3029);
        v3030 = (__PAIR128__(v3029, v3029) * __PAIR128__(4, -39)) >> 64;
        v3031 = (((v3029 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64) * 5) >> 64;
        if (v573)
          ++v3031;
        v3032 = 5 * v3031;
        v3033 = (unint64_t)(v3032 + v3030) > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v3032, v3030);
        v3034 = v3032 + v3030;
        v3035 = v573 || v3033;
        if (v2503 >= 0xFFFFFFFFFFFFFFFBLL)
          v3036 = 5;
        else
          v3036 = 0;
        if (v3035)
          v3037 = 5;
        else
          v3037 = 0;
        v3038 = v3037 + v3034;
        v3039 = v3036 + v2503;
        v3040 = v3036 + v2503 + v3038 > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v3039, v3038);
        v3041 = v3039 + v3038;
        if (v573 || v3040)
          v3043 = 5;
        else
          v3043 = 0;
        v3044 = v3043 + v3041;
        v573 = __CFADD__((__PAIR128__(4, -33) * v3044) >> 64, -33 * v3044);
        v3045 = (__PAIR128__(-33, -33) * v3044) >> 64;
        v3046 = (((v3044 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64) * 5) >> 64;
        if (v573)
          ++v3046;
        v3047 = 5 * v3046;
        v3048 = (unint64_t)(v3047 + v3045) > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v3047, v3045);
        v3049 = v3047 + v3045;
        if (v573 || v3048)
          v3051 = 5;
        else
          v3051 = 0;
        v3052 = v3051 + v3049;
        if (v2334 >= 0xFFFFFFFFFFFFFFFBLL)
          v3053 = 5;
        else
          v3053 = 0;
        v3054 = v3053 + v2334;
        v573 = __CFADD__(v3054, v3052);
        v3055 = v3054 + v3052;
        v3056 = v573;
        if (v3055 > 0xFFFFFFFFFFFFFFFALL)
          v3056 = 1;
        if (v3056)
          v3057 = 5;
        else
          v3057 = 0;
        v3058 = v3057 + v3055;
        v573 = __CFADD__((__PAIR128__(4, -17) * v3058) >> 64, -17 * v3058);
        v3059 = (__PAIR128__(-17, -17) * v3058) >> 64;
        v3060 = (((v3058 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64) * 5) >> 64;
        if (v573)
          ++v3060;
        v3061 = 5 * v3060;
        v3062 = (unint64_t)(v3061 + v3059) > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v3061, v3059);
        v3063 = v3061 + v3059;
        if (v573 || v3062)
          v3065 = 5;
        else
          v3065 = 0;
        v3066 = v3065 + v3063;
        if (v2052 >= 0xFFFFFFFFFFFFFFFBLL)
          v3067 = 5;
        else
          v3067 = 0;
        v3068 = v3067 + v2052;
        v3069 = v3068 + v3066 > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v3068, v3066);
        v3070 = v3068 + v3066;
        v3071 = v573 || v3069;
        if (v2564 >= 0xFFFFFFFFFFFFFFFDLL)
          v3072 = 3;
        else
          v3072 = 0;
        v3073 = v3072 + v2564;
        v573 = __CFADD__((__PAIR128__(2, -45) * v3073) >> 64, -45 * v3073);
        v3074 = (__PAIR128__(v3073, v3073) * __PAIR128__(2, -45)) >> 64;
        v3075 = (((v3073 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64) * 3) >> 64;
        if (v573)
          ++v3075;
        v3076 = 3 * v3075;
        v3077 = (unint64_t)(v3076 + v3074) > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v3076, v3074);
        v3078 = v3076 + v3074;
        v3079 = v573 || v3077;
        if (v2531 >= 0xFFFFFFFFFFFFFFFDLL)
          v3080 = 3;
        else
          v3080 = 0;
        if (v3079)
          v3081 = 3;
        else
          v3081 = 0;
        v3082 = v3081 + v3078;
        v3083 = v3080 + v2531;
        v3084 = v3080 + v2531 + v3082 > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v3083, v3082);
        v3085 = v3083 + v3082;
        if (v573 || v3084)
          v3087 = 3;
        else
          v3087 = 0;
        v3088 = v3087 + v3085;
        v573 = __CFADD__((__PAIR128__(2, -39) * v3088) >> 64, -39 * v3088);
        v3089 = (__PAIR128__(v3088, v3088) * __PAIR128__(2, -39)) >> 64;
        v3090 = (((v3088 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64) * 3) >> 64;
        if (v573)
          ++v3090;
        v3091 = 3 * v3090;
        v3092 = (unint64_t)(v3091 + v3089) > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v3091, v3089);
        v3093 = v3091 + v3089;
        v3094 = v573 || v3092;
        if (v2503 >= 0xFFFFFFFFFFFFFFFDLL)
          v3095 = 3;
        else
          v3095 = 0;
        if (v3094)
          v3096 = 3;
        else
          v3096 = 0;
        v3097 = v3096 + v3093;
        v3098 = v3095 + v2503;
        v3099 = v3095 + v2503 + v3097 > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v3098, v3097);
        v3100 = v3098 + v3097;
        if (v573 || v3099)
          v3102 = 3;
        else
          v3102 = 0;
        v3103 = v3102 + v3100;
        v573 = __CFADD__((__PAIR128__(2, -33) * v3103) >> 64, -33 * v3103);
        v3104 = (__PAIR128__(v3103, v3103) * __PAIR128__(2, -33)) >> 64;
        v3105 = (((v3103 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64) * 3) >> 64;
        if (v573)
          ++v3105;
        v3106 = 3 * v3105;
        v3107 = (unint64_t)(v3106 + v3104) > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v3106, v3104);
        v3108 = v3106 + v3104;
        v3109 = v573 || v3107;
        if (v2334 >= 0xFFFFFFFFFFFFFFFDLL)
          v3110 = 3;
        else
          v3110 = 0;
        if (v3109)
          v3111 = 3;
        else
          v3111 = 0;
        v3112 = v3111 + v3108;
        v573 = __CFADD__(v3110 + v2334, v3112);
        v3113 = v3110 + v2334 + v3112;
        v3114 = v573;
        if (v3113 > 0xFFFFFFFFFFFFFFFCLL)
          v3114 = 1;
        if (v3114)
          v3115 = 3;
        else
          v3115 = 0;
        v3116 = v3115 + v3113;
        v3117 = 17 * v3116;
        v3119 = v3116;
        v3118 = (v3116 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64;
        v3120 = -v3117;
        v3121 = (__PAIR128__(2, -17) * v3119) >> 64;
        if (v2052 >= 0xFFFFFFFFFFFFFFFDLL)
          v3122 = 3;
        else
          v3122 = 0;
        v573 = __CFADD__(v3121, v3120);
        v3123 = v3121 + v3120;
        v3124 = (v3118 * (unsigned __int128)3uLL) >> 64;
        if (v573)
          ++v3124;
        v3125 = 3 * v3124;
        v573 = __CFADD__(v3125, v3123);
        v3126 = v3125 + v3123;
        v3127 = v573;
        if (v3126 > 0xFFFFFFFFFFFFFFFCLL)
          v3127 = 1;
        if (v3127)
          v3128 = 3;
        else
          v3128 = 0;
        v3129 = v3128 + v3126;
        v3130 = v3122 + v2052;
        v3131 = v3130 + v3129 > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v3130, v3129);
        v3132 = v3130 + v3129;
        if (v573)
          v3131 = 1;
        if (v2564 == -1)
          v3133 = 0;
        else
          v3133 = v2564;
        v3134 = -45 * v3133;
        v3135 = (v3133 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64;
        LODWORD(v3136) = __CFADD__(__CFADD__(v3135, v3134), v3135 + v3134);
        if (__CFADD__(v3135, v3134) + v3135 + v3134 == -1)
          v3136 = 1;
        else
          v3136 = v3136;
        v3137 = v3135 + v3134 + __CFADD__(v3135, v3134) + v3136;
        if (v2531 == -1)
          v3138 = 0;
        else
          v3138 = v2531;
        v3139 = v3138 + v3137 == -1;
        v573 = __CFADD__(v3138, v3137);
        v3140 = v3138 + v3137;
        v3141 = v573 || v3139;
        v3142 = v3141 + v3140;
        v3143 = -39 * v3142;
        v3144 = (v3142 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64;
        v3145 = __CFADD__(__CFADD__(v3144, v3143), v3144 + v3143);
        v3146 = __CFADD__(v3144, v3143) + v3144 + v3143 == -1 || v3145;
        v3147 = v3144 + v3143 + __CFADD__(v3144, v3143) + v3146;
        if (v2503 == -1)
          v3148 = 0;
        else
          v3148 = v2503;
        v573 = __CFADD__(v3148, v3147);
        v3149 = v3148 + v3147;
        LODWORD(v3150) = v573;
        if (v3149 == -1)
          v3150 = 1;
        else
          v3150 = v3150;
        v3151 = v3150 + v3149;
        v3152 = 33 * v3151;
        v3153 = (v3151 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64;
        v3154 = -v3152;
        v3155 = __CFADD__(__CFADD__(v3153, v3154), v3153 + v3154);
        v3156 = __CFADD__(v3153, v3154) + v3153 + v3154 == -1 || v3155;
        v3157 = v3153 + v3154 + __CFADD__(v3153, v3154) + v3156;
        if (v2334 == -1)
          v3158 = 0;
        else
          v3158 = v2334;
        v573 = __CFADD__(v3158, v3157);
        v3159 = v3158 + v3157;
        LODWORD(v3160) = v573;
        if (v3159 == -1)
          v3160 = 1;
        else
          v3160 = v3160;
        v3161 = v3160 + v3159;
        v3162 = 17 * v3161;
        v3163 = -17;
        v3164 = (v3161 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64;
        v3165 = -v3162;
        v3166 = __CFADD__(__CFADD__(v3164, v3165), v3164 + v3165);
        v3167 = __CFADD__(v3164, v3165) + v3164 + v3165 == -1 || v3166;
        v3168 = v3164 + v3165 + __CFADD__(v3164, v3165) + v3167;
        if (v2052 == -1)
          v3169 = 0;
        else
          v3169 = v2052;
        v3170 = v3169 + v3168 == -1;
        v573 = __CFADD__(v3169, v3168);
        v3171 = v3169 + v3168;
        v3172 = v573 || v3170;
        v3173 = v3172 + v3171;
        if (v3131)
          v3174 = 3;
        else
          v3174 = 0;
        v3175 = v3174 + v3132;
        if (v3071)
          v3176 = 5;
        else
          v3176 = 0;
        v3177 = v3176 + v3070;
        if (v3012)
          v3178 = 9;
        else
          v3178 = 0;
        v3179 = v3178 + v3013;
        if (v2961)
          v3180 = 15;
        else
          v3180 = 0;
        v3181 = v3180 + v2960;
        STACK[0x1FE0] = (__PAIR128__(v3173 + STACK[0x3670], v3173) - (v3173 + STACK[0x3670])) >> 64;
        v3182 = v3177 + STACK[0x3678];
        v210 = v3182 > v3177;
        v3183 = v3179 + STACK[0x3680];
        if (v210)
          v3184 = -5;
        else
          v3184 = 0;
        STACK[0x1FD8] = v3184 + v3182;
        v3185 = v3175 + STACK[0x3688];
        if (v3179 >= v3183)
          v3186 = 0;
        else
          v3186 = -9;
        v573 = v3175 >= v3185;
        STACK[0x1FE8] = v3186 + v3183;
        v3187 = -3;
        if (v573)
          v3187 = 0;
        STACK[0x1FF0] = v3187 + v3185;
        v3188 = STACK[0x36C8] + v2475;
        v3189 = v3181 + STACK[0x36D0];
        if (v3188 <= v2475)
          v3190 = 0;
        else
          v3190 = -39;
        if (v3189 <= v3181)
          v3191 = 0;
        else
          v3191 = -15;
        STACK[0x1FD0] = v3191 + v3189;
        v3192 = STACK[0x36D8] + STACK[0x3C28];
        v3193 = STACK[0x36E0] + v2052;
        if (v3192 <= STACK[0x3C28])
          v3194 = 0;
        else
          v3194 = -33;
        v573 = v2052 >= v3193;
        v3195 = STACK[0x3C78];
        v3196 = STACK[0x36E8] + STACK[0x3C78];
        if (v573)
          v3163 = 0;
        STACK[0x1FB8] = v3194 + v3192;
        v3197 = -47;
        if (v3195 >= v3196)
          v3197 = 0;
        STACK[0x1FA0] = v3197 + v3196;
        STACK[0x1FA8] = v3190 + v3188;
        STACK[0x1FC0] = v3163 + v3193;
        v3198 = STACK[0x36F0] + STACK[0x3C60];
        if (v3198 <= STACK[0x3C60])
          v3199 = 0;
        else
          v3199 = -45;
        v3200 = STACK[0x3C18];
        v3201 = *(_BYTE *)(STACK[0x3C18] + STACK[0x6F0]);
        STACK[0x1FB0] = v3199 + v3198;
        v3202 = ((v3201 ^ 0xE3) >> 3) | (32 * (v3201 ^ 0xE3));
        if (v2681 == -1)
          v3203 = 0;
        else
          v3203 = v2681;
        v2628 = v3203 == -1;
        v3204 = v3203 + STACK[0x3770];
        if (v2628)
          v3205 = v3204 + 1;
        else
          v3205 = v3204;
        if (v2722 == -1)
          v3206 = 0;
        else
          v3206 = v2722;
        v3207 = v3205 == -1 || STACK[0x3770] > v3205;
        v3208 = STACK[0x5E8];
        v3209 = STACK[0x650];
        v3210 = STACK[0x608];
        if (v3207)
          ++v3205;
        v3211 = (unint64_t)v3202 << 8;
        v3212 = STACK[0x610];
        v3213 = (v3211 | (((STACK[0x650] | ((unint64_t)((STACK[0x6D0] | ((STACK[0x658]
                                                                                             + (97 * (*(_BYTE *)(v3200 + STACK[0x6D8]) ^ 0xA2))) << 16))
                                                             + STACK[0x5E8]) << 16))
                         + STACK[0x608]) << 16) | STACK[0x610]) ^ 0x56B04A950008;
        v3214 = v3205 + v3206;
        if (v3205 == -1)
          ++v3214;
        if (v3213 == -1)
          v3215 = 0;
        else
          v3215 = (v3211 | (((STACK[0x650] | ((unint64_t)((STACK[0x6D0] | ((STACK[0x658]
                                                                                               + (97 * (*(_BYTE *)(v3200 + STACK[0x6D8]) ^ 0xA2))) << 16))
                                                               + STACK[0x5E8]) << 16))
                           + STACK[0x608]) << 16) | STACK[0x610]) ^ 0x56B04A950008;
        STACK[0x3C28] = v3215;
        if (v3206 > v3214 || v3214 == -1)
          ++v3214;
        v2628 = v3214 == -1;
        v3217 = v3214 + v3215;
        if (v2628)
          ++v3217;
        STACK[0x3770] = v3217;
        if (v3213 >= 0xFFFFFFFFFFFFFFFDLL)
          v3218 = 3;
        else
          v3218 = 0;
        v3219 = v3218 + v3213;
        if (v2895)
          v3220 = 3;
        else
          v3220 = 0;
        v3221 = STACK[0x3640] + v3219 + v3220;
        STACK[0x3C60] = v3221;
        if (v3221 > 0xFFFFFFFFFFFFFFFCLL || v3219 > v3221)
          v3223 = 3;
        else
          v3223 = 0;
        STACK[0x3C78] = v3223;
        if (LODWORD(STACK[0x3758]))
          v3224 = 5;
        else
          v3224 = 0;
        if (v3213 >= 0xFFFFFFFFFFFFFFFBLL)
          v3225 = 5;
        else
          v3225 = 0;
        v3226 = v3225 + v3213;
        v3227 = STACK[0x3760] + v3226 + v3224;
        STACK[0x3758] = v3227;
        if (v3227 <= 0xFFFFFFFFFFFFFFFALL && v3227 >= v3226)
          v3229 = 0;
        else
          v3229 = 5;
        STACK[0x3760] = v3229;
        if (v3213 >= 0xFFFFFFFFFFFFFFF7)
          v3230 = 9;
        else
          v3230 = 0;
        v3231 = v3230 + v3213;
        if (LODWORD(STACK[0x3648]))
          v3232 = 9;
        else
          v3232 = 0;
        v3233 = STACK[0x3650] + v3231 + v3232;
        STACK[0x36F0] = v3233;
        if (v3231 > v3233 || v3233 > 0xFFFFFFFFFFFFFFF6)
          v3235 = 9;
        else
          v3235 = 0;
        STACK[0x3708] = v3235;
        v3236 = 15;
        if (!LODWORD(STACK[0x3658]))
          v3236 = 0;
        v3237 = STACK[0x3660] + STACK[0x3778] + v3236;
        v3238 = STACK[0x3778] > v3237 || v3237 > 0xFFFFFFFFFFFFFFF0;
        v3239 = 15;
        if (!v3238)
          v3239 = 0;
        v3240 = v3239 + v3237;
        v3241 = 15 * v3240;
        v3242 = 15 * ((v3240 * (unsigned __int128)0xFuLL) >> 64);
        v573 = __CFADD__(v3242, v3241);
        v3243 = v3242 + v3241;
        v3244 = 15;
        if (!v573)
          v3244 = 0;
        v573 = __CFADD__(v3244, v3243);
        v3245 = v3244 + v3243;
        v3246 = v573;
        if (v3245 > 0xFFFFFFFFFFFFFFF0)
          v3246 = 1;
        v3247 = 15;
        if (v3213 < 0xFFFFFFFFFFFFFFF1)
          v3247 = 0;
        v2628 = v3246 == 0;
        v3248 = v3247 + v3213;
        v3249 = v3245 + v3247 + v3213;
        v3250 = 15;
        if (v2628)
          v3250 = 0;
        v3251 = v3249 + v3250;
        if (LODWORD(STACK[0x3668]))
          v3252 = 17;
        else
          v3252 = 0;
        v3253 = STACK[0x36F8] + STACK[0x3820] + v3252;
        if (v3253 <= 0xFFFFFFFFFFFFFFEELL && v3253 >= STACK[0x3820])
          v3255 = 0;
        else
          v3255 = 17;
        STACK[0x3778] = v3251;
        v3256 = v3255 + v3253;
        v3257 = v3248 > v3251 || v3251 > 0xFFFFFFFFFFFFFFF0;
        v3258 = 17 * v3256;
        v3259 = (__PAIR128__(16, 17) * v3256) >> 64;
        v3260 = 15;
        if (!v3257)
          v3260 = 0;
        STACK[0x3820] = v3260;
        v573 = __CFADD__(v3259, v3258);
        v3261 = v3259 + v3258;
        if (v573)
          v3262 = 17;
        else
          v3262 = 0;
        v573 = __CFADD__(v3262, v3261);
        v3263 = v3262 + v3261;
        v3264 = v573;
        if (v3263 > 0xFFFFFFFFFFFFFFEELL)
          v3264 = 1;
        if (v2722 >= 0xFFFFFFFFFFFFFFEFLL)
          v3265 = 17;
        else
          v3265 = 0;
        v3266 = v3265 + v2722;
        v3267 = v3263 + v3266;
        if (v3264)
          v3268 = 17;
        else
          v3268 = 0;
        v3269 = v3267 + v3268;
        if (v3269 < v3266 || v3269 > 0xFFFFFFFFFFFFFFEELL)
          v3271 = 17;
        else
          v3271 = 0;
        v3272 = v3271 + v3269;
        v3273 = 17 * v3272;
        v3274 = (__PAIR128__(16, 17) * v3272) >> 64;
        v573 = __CFADD__(v3274, v3273);
        v3275 = v3274 + v3273;
        if (v573)
          v3276 = 17;
        else
          v3276 = 0;
        v573 = __CFADD__(v3276, v3275);
        v3277 = v3276 + v3275;
        v3278 = v573;
        if (v3277 > 0xFFFFFFFFFFFFFFEELL)
          v3278 = 1;
        if (v3213 >= 0xFFFFFFFFFFFFFFEFLL)
          v3279 = 17;
        else
          v3279 = 0;
        v2628 = v3278 == 0;
        v3280 = v3279 + v3213;
        v3281 = v3277 + v3279 + v3213;
        if (v2628)
          v3282 = 0;
        else
          v3282 = 17;
        v3283 = v3281 + v3282;
        STACK[0x36E8] = v3283;
        if (v3283 <= 0xFFFFFFFFFFFFFFEELL && v3283 >= v3280)
          v3285 = 0;
        else
          v3285 = 17;
        STACK[0x36F8] = v3285;
        if (v3213 >= 0xFFFFFFFFFFFFFFDFLL)
          v3286 = 33;
        else
          v3286 = 0;
        v3287 = v3286 + v3213;
        v3288 = STACK[0x3740] + v3287;
        if (LODWORD(STACK[0x3700]))
          v3289 = 33;
        else
          v3289 = 0;
        v3290 = v3288 + v3289;
        if (v3287 > v3288 + v3289 || v3290 > 0xFFFFFFFFFFFFFFDELL)
          v3292 = 33;
        else
          v3292 = 0;
        STACK[0x3700] = v3292;
        if (v3213 >= 0xFFFFFFFFFFFFFFD9)
          v3293 = 39;
        else
          v3293 = 0;
        v3294 = v3293 + v3213;
        v3295 = STACK[0x3728] + v3294;
        if (LODWORD(STACK[0x3720]))
          v3296 = 39;
        else
          v3296 = 0;
        v3297 = v3295 + v3296;
        if (v3295 + v3296 < v3294 || v3297 > 0xFFFFFFFFFFFFFFD8)
          v3299 = 39;
        else
          v3299 = 0;
        STACK[0x3740] = v3299;
        if (LODWORD(STACK[0x3730]))
          v3300 = 45;
        else
          v3300 = 0;
        v3301 = STACK[0x3738] + STACK[0x3AC8] + v3300;
        if (v3301 < STACK[0x3AC8] || v3301 > 0xFFFFFFFFFFFFFFD2)
          v3303 = 45;
        else
          v3303 = 0;
        v3304 = v3303 + v3301;
        v3305 = 45 * v3304;
        v3306 = 45 * ((v3304 * (unsigned __int128)0x2DuLL) >> 64);
        v573 = __CFADD__(v3306, v3305);
        v3307 = v3306 + v3305;
        if (v573)
          v3308 = 45;
        else
          v3308 = 0;
        v573 = __CFADD__(v3308, v3307);
        v3309 = v3308 + v3307;
        v3310 = v573;
        if (v3309 > 0xFFFFFFFFFFFFFFD2)
          v3310 = 1;
        if (v3213 >= 0xFFFFFFFFFFFFFFD3)
          v3311 = 45;
        else
          v3311 = 0;
        v2628 = v3310 == 0;
        v3312 = v3311 + v3213;
        v3313 = v3309 + v3311 + v3213;
        if (v2628)
          v3314 = 0;
        else
          v3314 = 45;
        v3315 = v3313 + v3314;
        if (v3313 + v3314 < v3312 || v3315 > 0xFFFFFFFFFFFFFFD2)
          v3317 = 45;
        else
          v3317 = 0;
        STACK[0x3AC8] = v3317;
        if (LODWORD(STACK[0x3C08]))
          v3318 = 47;
        else
          v3318 = 0;
        if (v3213 >= 0xFFFFFFFFFFFFFFD1)
          v3319 = 47;
        else
          v3319 = 0;
        v3320 = v3319 + v3213;
        v3321 = STACK[0x3C20] + v3320 + v3318;
        if (v3320 > v3321 || v3321 > 0xFFFFFFFFFFFFFFD0)
          v3323 = 47;
        else
          v3323 = 0;
        STACK[0x3C20] = v3323;
        v3324 = 53;
        if (v2722 <= 0xFFFFFFFFFFFFFFCALL)
          v3325 = 0;
        else
          v3325 = 53;
        v3326 = v3325 + v2722;
        v3327 = STACK[0x3810] + v3325 + v2722;
        if (LODWORD(STACK[0x3780]))
          v3328 = 53;
        else
          v3328 = 0;
        v3329 = v3327 + v3328;
        if (v3329 > 0xFFFFFFFFFFFFFFCALL || v3326 > v3329)
          v3331 = 53;
        else
          v3331 = 0;
        v3332 = v3331 + v3329;
        v3333 = 53 * v3332;
        v3334 = 53 * ((v3332 * (unsigned __int128)0x35uLL) >> 64);
        v573 = __CFADD__(v3334, v3333);
        v3335 = v3334 + v3333;
        if (v573)
          v3336 = 53;
        else
          v3336 = 0;
        if (v3213 < 0xFFFFFFFFFFFFFFCBLL)
          v3324 = 0;
        v573 = __CFADD__(v3336, v3335);
        v3337 = v3336 + v3335;
        v3338 = v3324 + v3213;
        v3339 = v573;
        if (v3337 > 0xFFFFFFFFFFFFFFCALL)
          v3339 = 1;
        v3340 = v3337 + v3338;
        if (v3339)
          v3341 = 53;
        else
          v3341 = 0;
        v3342 = v3340 + v3341;
        v3343 = v3340 + v3341 > 0xFFFFFFFFFFFFFFCALL || v3338 > v3342;
        v3344 = v3211 | (((v3209 | ((unint64_t)(STACK[0x648]
                                                     + ((*(_BYTE *)(v3200 + STACK[0x6C8]) ^ 0xC3) + 85)
                                                     + v3208) << 16))
                        + v3210) << 16);
        v3345 = STACK[0x38B8] + STACK[0x3918];
        if (v3343)
          v3346 = 53;
        else
          v3346 = 0;
        STACK[0x3918] = v3346;
        v2628 = v3345 == -1;
        v3347 = v3345 + v3206;
        if (v2628)
          ++v3347;
        v3348 = v3206 > v3347 || v3347 == -1;
        v3349 = v3348;
        v3350 = v3347 - v3349;
        v3351 = 2;
        if (!v3348)
          v3351 = 0;
        v3352 = v3350 + v3351;
        v3353 = (v3344 | v3212) ^ 0x56004A950008;
        if (v3353 == -1)
          v3354 = 0;
        else
          v3354 = (v3344 | v3212) ^ 0x56004A950008;
        v2628 = v3352 == -1;
        v3355 = v3352 + v3354;
        if (v2628)
          ++v3355;
        if (v3354 > v3355 || v3355 == -1)
          v3357 = v3355 + 1;
        else
          v3357 = v3355;
        STACK[0x3C08] = v3357;
        if (LODWORD(STACK[0x3928]))
          v3358 = 3;
        else
          v3358 = 0;
        v3359 = STACK[0x3930] + STACK[0x3768] + v3358;
        if (STACK[0x3768] > v3359 || v3359 > 0xFFFFFFFFFFFFFFFCLL)
          v3361 = 3;
        else
          v3361 = 0;
        v3362 = v3361 + v3359;
        v3363 = 3 * v3362;
        v3364 = (__PAIR128__(2, 3) * v3362) >> 64;
        v573 = __CFADD__(v3364, v3363);
        v3365 = v3364 + v3363;
        if (v573)
          v3366 = 3;
        else
          v3366 = 0;
        v573 = __CFADD__(v3366, v3365);
        v3367 = v3366 + v3365;
        v3368 = v573;
        if (v3367 > 0xFFFFFFFFFFFFFFFCLL)
          v3368 = 1;
        if (v3353 >= 0xFFFFFFFFFFFFFFFDLL)
          v3369 = 3;
        else
          v3369 = 0;
        v2628 = v3368 == 0;
        v3370 = v3369 + v3353;
        v3371 = v3367 + v3369 + v3353;
        if (v2628)
          v3372 = 0;
        else
          v3372 = 3;
        v3373 = v3371 + v3372;
        if (v3371 + v3372 <= 0xFFFFFFFFFFFFFFFCLL && v3373 >= v3370)
          v3375 = 0;
        else
          v3375 = 3;
        STACK[0x3930] = v3375;
        if (v3353 >= 0xFFFFFFFFFFFFFFFBLL)
          v3376 = 5;
        else
          v3376 = 0;
        v3377 = v3376 + v3353;
        if (LODWORD(STACK[0x39C0]))
          v3378 = 5;
        else
          v3378 = 0;
        v3379 = STACK[0x3A70] + v3377 + v3378;
        if (v3379 > 0xFFFFFFFFFFFFFFFALL || v3377 > v3379)
          v3381 = 5;
        else
          v3381 = 0;
        STACK[0x3A70] = v3381;
        v3382 = STACK[0x6A8] + STACK[0x3750];
        v3383 = __CFADD__(STACK[0x6A8], STACK[0x3750]);
        if (v3382 > 0xFFFFFFFFFFFFFFF6)
          v3383 = 1;
        v3384 = 9;
        if (v3383)
          v3385 = 9;
        else
          v3385 = 0;
        v3386 = v3385 + v3382;
        v3387 = 9 * v3386;
        v3388 = (__PAIR128__(8, 9) * v3386) >> 64;
        v573 = __CFADD__(v3388, v3387);
        v3389 = v3388 + v3387;
        if (v573)
          v3390 = 9;
        else
          v3390 = 0;
        v573 = __CFADD__(v3390, v3389);
        v3391 = v3390 + v3389;
        v3392 = v573;
        if (v3391 > 0xFFFFFFFFFFFFFFF6)
          v3392 = 1;
        if (v3353 >= 0xFFFFFFFFFFFFFFF7)
          v3393 = 9;
        else
          v3393 = 0;
        v3394 = v3391 + STACK[0x3748];
        if (v3392)
          v3395 = 9;
        else
          v3395 = 0;
        v3396 = v3394 + v3395;
        if (v3396 > 0xFFFFFFFFFFFFFFF6 || STACK[0x3748] > v3396)
          v3398 = 9;
        else
          v3398 = 0;
        v3399 = v3398 + v3396;
        v3400 = 9 * v3399;
        v3401 = (__PAIR128__(8, 9) * v3399) >> 64;
        v573 = __CFADD__(v3401, v3400);
        v3402 = v3401 + v3400;
        if (v573)
          v3403 = 9;
        else
          v3403 = 0;
        v573 = __CFADD__(v3403, v3402);
        v3404 = v3403 + v3402;
        v3405 = v573;
        if (v3404 > 0xFFFFFFFFFFFFFFF6)
          v3405 = 1;
        v2628 = v3405 == 0;
        v3406 = v3393 + v3353;
        v3407 = v3404 + v3393 + v3353;
        if (v2628)
          v3408 = 0;
        else
          v3408 = 9;
        v3409 = v3407 + v3408;
        if (v3406 <= v3407 + v3408 && v3409 <= 0xFFFFFFFFFFFFFFF6)
          v3384 = 0;
        v3411 = 15;
        if (v3353 < 0xFFFFFFFFFFFFFFF1)
          v3411 = 0;
        v3412 = v3411 + v3353;
        v3413 = STACK[0x3B70] + v3411 + v3353;
        v3414 = 15;
        if (!LODWORD(STACK[0x3B68]))
          v3414 = 0;
        v3415 = v3413 + v3414;
        if (v3415 <= 0xFFFFFFFFFFFFFFF0 && v3415 >= v3412)
          v3417 = 0;
        else
          v3417 = 15;
        if (LODWORD(STACK[0x3BC0]))
          v3418 = 17;
        else
          v3418 = 0;
        v3419 = v3418 + STACK[0x3BC8];
        v3420 = 17 * v3419;
        v3421 = (__PAIR128__(16, 17) * v3419) >> 64;
        v573 = __CFADD__(v3421, v3420);
        v3422 = v3421 + v3420;
        if (v573)
          v3423 = 17;
        else
          v3423 = 0;
        v573 = __CFADD__(v3423, v3422);
        v3424 = v3423 + v3422;
        v3425 = v573;
        if (v3424 > 0xFFFFFFFFFFFFFFEELL)
          v3425 = 1;
        v3426 = v3424 + v3266;
        if (v3425)
          v3427 = 17;
        else
          v3427 = 0;
        v3428 = v3426 + v3427;
        if (v3428 <= 0xFFFFFFFFFFFFFFEELL && v3428 >= v3266)
          v3430 = 0;
        else
          v3430 = 17;
        v3431 = v3430 + v3428;
        v3432 = 17 * v3431;
        v3433 = (__PAIR128__(16, 17) * v3431) >> 64;
        v573 = __CFADD__(v3433, v3432);
        v3434 = v3433 + v3432;
        if (v573)
          v3435 = 17;
        else
          v3435 = 0;
        v573 = __CFADD__(v3435, v3434);
        v3436 = v3435 + v3434;
        v3437 = v573;
        if (v3436 > 0xFFFFFFFFFFFFFFEELL)
          v3437 = 1;
        if (v3353 >= 0xFFFFFFFFFFFFFFEFLL)
          v3438 = 17;
        else
          v3438 = 0;
        v2628 = v3437 == 0;
        v3439 = v3438 + v3353;
        v3440 = v3436 + v3438 + v3353;
        if (v2628)
          v3441 = 0;
        else
          v3441 = 17;
        v3442 = v3440 + v3441;
        if (v3439 > v3442 || v3442 > 0xFFFFFFFFFFFFFFEELL)
          v3444 = 17;
        else
          v3444 = 0;
        if (v3353 >= 0xFFFFFFFFFFFFFFDFLL)
          v3445 = 33;
        else
          v3445 = 0;
        v3446 = v3445 + v3353;
        if (LODWORD(STACK[0x3BD0]))
          v3447 = 33;
        else
          v3447 = 0;
        v3448 = STACK[0x3BD8] + v3446 + v3447;
        if (v3448 <= 0xFFFFFFFFFFFFFFDELL && v3448 >= v3446)
          v3450 = 0;
        else
          v3450 = 33;
        if (LODWORD(STACK[0x3C00]))
          v3451 = 39;
        else
          v3451 = 0;
        v3452 = v3451 + STACK[0x3C30];
        v3453 = 39 * v3452;
        v3454 = 39 * ((v3452 * (unsigned __int128)0x27uLL) >> 64);
        v573 = __CFADD__(v3454, v3453);
        v3455 = v3454 + v3453;
        if (v573)
          v3456 = 39;
        else
          v3456 = 0;
        v3457 = (v3456 ^ v3455) + 2 * (v3456 & v3455);
        v3458 = v3457 > 0xFFFFFFFFFFFFFFD8 || v3455 > v3457;
        v3459 = v3457 + STACK[0x3C68];
        if (v3458)
          v3460 = 39;
        else
          v3460 = 0;
        v3461 = v3459 + v3460;
        if (v3461 > 0xFFFFFFFFFFFFFFD8 || STACK[0x3C68] > v3461)
          v3463 = 39;
        else
          v3463 = 0;
        v3464 = v3463 + v3461;
        v3465 = 39 * v3464;
        v3466 = 39 * ((v3464 * (unsigned __int128)0x27uLL) >> 64);
        if (v3353 >= 0xFFFFFFFFFFFFFFD9)
          v3467 = 39;
        else
          v3467 = 0;
        v573 = __CFADD__(v3466, v3465);
        v3468 = v3466 + v3465;
        if (v573)
          v3469 = 39;
        else
          v3469 = 0;
        v573 = __CFADD__(v3469, v3468);
        v3470 = v3469 + v3468;
        v3471 = v573;
        if (v3470 > 0xFFFFFFFFFFFFFFD8)
          v3471 = 1;
        v2628 = v3471 == 0;
        v3472 = v3467 + v3353;
        v3473 = v3470 + v3467 + v3353;
        if (v2628)
          v3474 = 0;
        else
          v3474 = 39;
        v3475 = v3473 + v3474;
        if (v3475 < v3472 || v3475 > 0xFFFFFFFFFFFFFFD8)
          v3477 = 39;
        else
          v3477 = 0;
        if (v3353 >= 0xFFFFFFFFFFFFFFD3)
          v3478 = 45;
        else
          v3478 = 0;
        v3479 = v3478 + v3353;
        if (LODWORD(STACK[0x3C38]))
          v3480 = 45;
        else
          v3480 = 0;
        v3481 = STACK[0x3C40] + v3479 + v3480;
        if (v3481 <= 0xFFFFFFFFFFFFFFD2 && v3481 >= v3479)
          v3483 = 0;
        else
          v3483 = 45;
        if (LODWORD(STACK[0x3C48]))
          v3484 = 47;
        else
          v3484 = 0;
        if (v3353 >= 0xFFFFFFFFFFFFFFD1)
          v3485 = 47;
        else
          v3485 = 0;
        v3486 = v3485 + v3353;
        v3487 = STACK[0x3C50] + v3486 + v3484;
        v3488 = STACK[0x670] + STACK[0x3B78];
        v3489 = __CFADD__(STACK[0x670], STACK[0x3B78]);
        if (v3488 > 0xFFFFFFFFFFFFFFCALL)
          v3489 = 1;
        if (v3489)
          v3490 = 53;
        else
          v3490 = 0;
        v3491 = v3490 + v3488;
        v3492 = v3486 > v3487 || v3487 > 0xFFFFFFFFFFFFFFD0;
        v3493 = 53 * v3491;
        v3494 = 53 * ((v3491 * (unsigned __int128)0x35uLL) >> 64);
        if (v3492)
          v3495 = 47;
        else
          v3495 = 0;
        v573 = __CFADD__(v3494, v3493);
        v3496 = v3494 + v3493;
        if (v573)
          v3497 = 53;
        else
          v3497 = 0;
        v573 = __CFADD__(v3497, v3496);
        v3498 = v3497 + v3496;
        v3499 = v573;
        if (v3498 > 0xFFFFFFFFFFFFFFCALL)
          v3499 = 1;
        if (v3499)
          v3500 = 53;
        else
          v3500 = 0;
        v3501 = STACK[0x3770];
        v3502 = STACK[0x3C28];
        STACK[0x3C30] = STACK[0x3930] + v3373;
        STACK[0x3C38] = STACK[0x3A70] + v3379;
        STACK[0x3C00] = v3384 + v3409;
        STACK[0x3C28] = v3417 + v3415;
        STACK[0x3C40] = v3444 + v3442;
        STACK[0x3C50] = v3450 + v3448;
        STACK[0x3C68] = v3477 + v3475;
        STACK[0x3BD8] = v3483 + v3481;
        v3503 = STACK[0x3A40];
        v3504 = STACK[0x3758] + STACK[0x3A40];
        STACK[0x3A40] = STACK[0x3A40];
        v3505 = v3504 + STACK[0x3760];
        v3506 = v3498 + v3326 + v3500;
        v3507 = v3501 < v3502 || v3501 == -1;
        v3508 = STACK[0x3A20];
        if (v3507)
          v3509 = v3501 + STACK[0x3A20] + 1;
        else
          v3509 = v3501 + STACK[0x3A20];
        STACK[0x3C48] = v3495 + v3487;
        v3510 = STACK[0x3A60];
        v3511 = STACK[0x36F0] + STACK[0x3A60];
        STACK[0x3A60] = STACK[0x3A60];
        v3512 = v3511 + STACK[0x3708];
        if (v3326 > v3506 || v3506 > 0xFFFFFFFFFFFFFFCALL)
          v3514 = 53;
        else
          v3514 = 0;
        v3515 = v3514 + v3506;
        v3516 = STACK[0x3C60] + STACK[0x3AA0];
        v3517 = STACK[0x3AA0];
        STACK[0x3AA0] = STACK[0x3AA0];
        v3518 = v3516 + STACK[0x3C78];
        v3519 = 53 * v3515;
        v3520 = 53 * ((v3515 * (unsigned __int128)0x35uLL) >> 64);
        if (v3353 >= 0xFFFFFFFFFFFFFFCBLL)
          v3521 = 53;
        else
          v3521 = 0;
        v573 = __CFADD__(v3520, v3519);
        v3522 = v3520 + v3519;
        v3523 = v3521 + v3353;
        if (v573)
          v3524 = 53;
        else
          v3524 = 0;
        v573 = __CFADD__(v3524, v3522);
        v3525 = v3524 + v3522;
        v3526 = v573;
        if (v3525 > 0xFFFFFFFFFFFFFFCALL)
          v3526 = 1;
        v3527 = v3525 + v3523;
        if (v3526)
          v3528 = 53;
        else
          v3528 = 0;
        v3529 = v3527 + v3528;
        v3530 = v3529 <= 0xFFFFFFFFFFFFFFCALL && v3529 >= v3523;
        v3531 = STACK[0x3A58];
        v3532 = STACK[0x3A58];
        STACK[0x3A58] = STACK[0x3A58];
        v3533 = v3290 + v3531 + STACK[0x3700];
        v3534 = STACK[0x3A38];
        v3535 = STACK[0x36E8] + STACK[0x3A38];
        STACK[0x3A38] = STACK[0x3A38];
        v3536 = v3535 + STACK[0x36F8];
        v3537 = STACK[0x3A30];
        v3538 = STACK[0x3778] + STACK[0x3A30];
        STACK[0x3A30] = STACK[0x3A30];
        v3539 = v3538 + STACK[0x3820];
        v3540 = STACK[0x3A28];
        v3541 = v3297 + STACK[0x3A28] + STACK[0x3740];
        v3542 = STACK[0x3A50];
        v3543 = v3315 + STACK[0x3A50];
        STACK[0x3A50] = STACK[0x3A50];
        v3544 = v3543 + STACK[0x3AC8];
        if (v3530)
          v3545 = 0;
        else
          v3545 = 53;
        STACK[0x3C78] = v3545 + v3529;
        v3546 = STACK[0x3A68];
        STACK[0x3A68] = STACK[0x3A68];
        v3547 = v3321 + v3546 + STACK[0x3C20];
        v3548 = STACK[0x3A48];
        STACK[0x3A48] = STACK[0x3A48];
        v3549 = v3342 + v3548 + STACK[0x3918];
        v3550 = v3517 > v3518 || v3518 > 0xFFFFFFFFFFFFFFFCLL;
        v3551 = 3;
        if (!v3550)
          v3551 = 0;
        v3552 = v3505 > 0xFFFFFFFFFFFFFFFALL || v3503 > v3505;
        v3553 = 5;
        if (!v3552)
          v3553 = 0;
        v3554 = v3533 > 0xFFFFFFFFFFFFFFDELL || v3532 > v3533;
        v3555 = 33;
        if (!v3554)
          v3555 = 0;
        STACK[0x3230] = v3555 + v3533;
        STACK[0x19E0] = v3551 + v3518;
        v3556 = v3512 > 0xFFFFFFFFFFFFFFF6 || v3510 > v3512;
        v3557 = 9;
        if (!v3556)
          v3557 = 0;
        if (v3508 > v3509 || v3509 == -1)
          ++v3509;
        STACK[0x3218] = v3509;
        if (v3536 <= 0xFFFFFFFFFFFFFFEELL && v3536 >= v3534)
          v3560 = 0;
        else
          v3560 = 17;
        if (v3541 <= 0xFFFFFFFFFFFFFFD8 && v3541 >= v3540)
          v3562 = 0;
        else
          v3562 = 39;
        if (v3539 <= 0xFFFFFFFFFFFFFFF0 && v3539 >= v3537)
          v3564 = 0;
        else
          v3564 = 15;
        STACK[0x1820] = v3564 + v3539;
        STACK[0x3250] = v3553 + v3505;
        STACK[0x19E8] = v3557 + v3512;
        STACK[0x3248] = v3562 + v3541;
        STACK[0x3B70] = v3560 + v3536;
        if (v3544 > 0xFFFFFFFFFFFFFFD2 || v3542 > v3544)
          v3566 = 45;
        else
          v3566 = 0;
        if (v3549 > 0xFFFFFFFFFFFFFFCALL || v3548 > v3549)
          v3568 = 53;
        else
          v3568 = 0;
        STACK[0x3B78] = v3568 + v3549;
        STACK[0x3220] = v3566 + v3544;
        if (v3547 <= 0xFFFFFFFFFFFFFFD0 && v3547 >= v3546)
          v3570 = 0;
        else
          v3570 = 47;
        STACK[0x3B68] = v3570 + v3547;
        __SET_PAIR__(v3571, v3571, __PAIR128__(STACK[0x3B98] - STACK[0x3C08], STACK[0x3B98]) - STACK[0x3C08]);
        if (STACK[0x3BE0] >= STACK[0x3C00])
          v3572 = 0;
        else
          v3572 = -9;
        if (STACK[0x3BF8] >= STACK[0x3BD8])
          v3573 = 0;
        else
          v3573 = -45;
        v3574 = STACK[0x3B90] - STACK[0x3C30];
        if (STACK[0x3B90] >= STACK[0x3C30])
          v3575 = 0;
        else
          v3575 = -3;
        v3576 = STACK[0x3BB0] - STACK[0x3C28];
        if (STACK[0x3BB0] >= STACK[0x3C28])
          v3577 = 0;
        else
          v3577 = -15;
        v573 = v3571 >= v3508;
        v3578 = v3571 - v3508;
        v3579 = !v573;
        v3580 = STACK[0x3B60] - STACK[0x3C40];
        if (STACK[0x3B60] >= STACK[0x3C40])
          v3581 = 0;
        else
          v3581 = -17;
        if (STACK[0x3B88] >= STACK[0x3C38])
          v3582 = 0;
        else
          v3582 = -5;
        v3583 = v3582 + STACK[0x3B88] - STACK[0x3C38];
        v3584 = v3572 + STACK[0x3BE0] - STACK[0x3C00];
        STACK[0x3C60] = v3573 + STACK[0x3BF8] - STACK[0x3BD8];
        v3585 = v3575 + v3574;
        STACK[0xCE0] = v3578 - v3579;
        v3586 = v3581 + v3580;
        v3587 = STACK[0x3BE8] - STACK[0x3C78];
        if (STACK[0x3BE8] >= STACK[0x3C78])
          v3588 = 0;
        else
          v3588 = -53;
        if (STACK[0x3BF0] >= STACK[0x3C48])
          v3589 = 0;
        else
          v3589 = -47;
        if (STACK[0x3B80] >= STACK[0x3C50])
          v3590 = 0;
        else
          v3590 = -33;
        v573 = v3583 >= STACK[0x3A40];
        v3591 = v3583 - STACK[0x3A40];
        if (v573)
          v3592 = 0;
        else
          v3592 = -5;
        if (STACK[0x3B58] >= STACK[0x3C68])
          v3593 = 0;
        else
          v3593 = -39;
        v3594 = v3593 + STACK[0x3B58] - STACK[0x3C68];
        v3595 = v3577 + v3576;
        v3596 = v3589 + STACK[0x3BF0] - STACK[0x3C48];
        v3597 = v3590 + STACK[0x3B80] - STACK[0x3C50];
        v573 = v3584 >= STACK[0x3A60];
        v3598 = v3584 - STACK[0x3A60];
        v3599 = -9;
        if (v573)
          v3599 = 0;
        v573 = v3594 >= v3540;
        v3600 = v3594 - v3540;
        if (v573)
          v3601 = 0;
        else
          v3601 = -39;
        STACK[0xCB0] = v3600 + v3601;
        v3602 = v3588 + v3587;
        STACK[0xCC0] = v3598 + v3599;
        v3603 = -17;
        if (v3586 >= STACK[0x3A38])
          v3603 = 0;
        STACK[0xCD8] = v3586 - STACK[0x3A38] + v3603;
        v3604 = -3;
        if (v3585 >= STACK[0x3AA0])
          v3604 = 0;
        STACK[0xC90] = v3585 - STACK[0x3AA0] + v3604;
        v573 = v3597 >= STACK[0x3A58];
        v3605 = v3597 - STACK[0x3A58];
        v3606 = -33;
        if (v573)
          v3606 = 0;
        STACK[0xCC8] = v3605 + v3606;
        v3607 = v3596 - STACK[0x3A68];
        v3608 = -47;
        if (v3596 >= STACK[0x3A68])
          v3608 = 0;
        v3609 = v3595 - STACK[0x3A30];
        v3610 = -15;
        if (v3595 >= STACK[0x3A30])
          v3610 = 0;
        v3611 = -45;
        if (STACK[0x3C60] >= STACK[0x3A50])
          v3611 = 0;
        STACK[0xC98] = STACK[0x3C60] - STACK[0x3A50] + v3611;
        STACK[0xCA8] = v3607 + v3608;
        STACK[0xCB8] = v3609 + v3610;
        v573 = v3602 >= STACK[0x3A48];
        v3612 = v3602 - STACK[0x3A48];
        v3613 = -53;
        if (v573)
          v3613 = 0;
        STACK[0xCD0] = v3612 + v3613;
        STACK[0xCA0] = v3591 + v3592;
        v3614 = (uint64_t (*)(_QWORD, _QWORD))(*(_QWORD *)(STACK[0x3C70]
                                                                   + 8 * (LODWORD(STACK[0x3710]) - 5353))
                                                       - 12);
        LODWORD(STACK[0x3BD8]) = 112;
        STACK[0x3378] = STACK[0x3980];
        STACK[0x3370] = STACK[0x3960];
        STACK[0x3368] = STACK[0x3950];
        STACK[0x3210] = STACK[0x1820];
        STACK[0x3350] = STACK[0x19E8];
        STACK[0x3238] = STACK[0x3948];
        STACK[0x3200] = STACK[0x39B0];
        STACK[0x3358] = STACK[0x3940];
        STACK[0x3BD0] = STACK[0x3970];
        STACK[0x3BC8] = STACK[0x3A18];
        STACK[0x3208] = STACK[0x3968];
        STACK[0x3228] = STACK[0x19E0];
        STACK[0x3BC0] = STACK[0x3958];
        STACK[0x1088] = STACK[0x3218];
        STACK[0x1080] = STACK[0x3250];
        STACK[0x3AC8] = STACK[0x3978];
        result = v3614(STACK[0x3A88], STACK[0x3798]);
        break;
      default:
        v3617 = v1337 * STACK[0x18E8];
        v3618 = (v1337 * (unsigned __int128)STACK[0x18E8]) >> 64;
        v3619 = 15 * v3618;
        v3620 = (v3618 * (unsigned __int128)0xFuLL) >> 64;
        v573 = __CFADD__(v3619, v3617);
        v3621 = v3619 + v3617;
        if (v573)
          ++v3620;
        v3622 = 15 * v3620;
        v3623 = v3622 + v3621 > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v3622, v3621);
        v3624 = v3622 + v3621;
        if (v573 || v3623)
          v3626 = 15;
        else
          v3626 = 0;
        v3627 = v3626 + v3624;
        v3628 = 0x9FEC52B6396CF0C0 * v3627;
        v3629 = (v3627 * (unsigned __int128)0x9FEC52B6396CF0C0) >> 64;
        v3630 = 15 * v3629;
        v3631 = (v3629 * (unsigned __int128)0xFuLL) >> 64;
        v573 = __CFADD__(v3630, v3628);
        v3632 = v3630 + v3628;
        if (v573)
          ++v3631;
        v3633 = 15 * v3631;
        v3634 = v3633 + v3632 > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v3633, v3632);
        v3635 = v3633 + v3632;
        if (v573 || v3634)
          v3637 = 15;
        else
          v3637 = 0;
        v3638 = v3637 + v3635;
        v3639 = 0x7FF97F97F97F97F2 * v3638;
        v3640 = (v3638 * (unsigned __int128)0x7FF97F97F97F97F2uLL) >> 64;
        v3641 = 15 * v3640;
        v3642 = (v3640 * (unsigned __int128)0xFuLL) >> 64;
        v573 = __CFADD__(v3641, v3639);
        v3643 = v3641 + v3639;
        if (v573)
          ++v3642;
        v3644 = 15 * v3642;
        v3645 = (unint64_t)(v3644 + v3643) > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v3644, v3643);
        v3646 = v3644 + v3643;
        if (v573 || v3645)
          v3648 = 15;
        else
          v3648 = 0;
        v3649 = v3648 + v3646;
        if ((unint64_t)(v3648 + v3646) >= 0xFFFFFFFFFFFFFFDFLL)
          v3650 = 33;
        else
          v3650 = 0;
        v3651 = v3650 + v3649;
        v3652 = 645120 * v3651;
        v3653 = (__PAIR128__(32, 645120) * v3651) >> 64;
        v573 = __CFADD__(v3653, v3652);
        v3654 = v3653 + v3652;
        if (v573)
          v3655 = 33;
        else
          v3655 = 0;
        v3656 = (unint64_t)(v3655 + v3654) > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v3655, v3654);
        v3657 = v3655 + v3654;
        v3658 = v1322 * STACK[0x18F0];
        v3659 = STACK[0x18F0];
        v3660 = (__PAIR128__(8, v1322) * v3659) >> 64;
        v3661 = v573 || v3656;
        v573 = __CFADD__(v3660, v3658);
        v3662 = v3660 + v3658;
        if (v573)
          v3663 = (((((unsigned __int128)v1322 * v3659) >> 64) * 9) >> 64) + 1;
        else
          v3663 = ((((unsigned __int128)v1322 * v3659) >> 64) * 9) >> 64;
        v3664 = 9 * v3663;
        v3665 = (unint64_t)(v3664 + v3662) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v3664, v3662);
        v3666 = v3664 + v3662;
        if (v573 || v3665)
          v3668 = 9;
        else
          v3668 = 0;
        v3669 = v3668 + v3666;
        v3670 = 0x1513DAB390DF5A9ELL * v3669;
        v3671 = (__PAIR128__(8, 0x1513DAB390DF5A9ELL) * v3669) >> 64;
        v573 = __CFADD__(v3671, v3670);
        v3672 = v3671 + v3670;
        if (v573)
          v3673 = 9;
        else
          v3673 = 0;
        v573 = __CFADD__(v3673, v3672);
        v3674 = v3673 + v3672;
        v3675 = v573;
        if (v3674 > 0xFFFFFFFFFFFFFFF6)
          v3675 = 1;
        if (v3675)
          v3676 = 9;
        else
          v3676 = 0;
        v3677 = v3676 + v3674;
        v3678 = 0xD6E38E38E38E38DCLL * v3677;
        v3679 = (((v3677 * (unsigned __int128)0xD6E38E38E38E38DCLL) >> 64) * 9) >> 64;
        v3680 = (__PAIR128__(8, 0xD6E38E38E38E38DCLL) * v3677) >> 64;
        v573 = __CFADD__(v3680, v3678);
        v3681 = v3680 + v3678;
        if (v573)
          v3682 = v3679 + 1;
        else
          v3682 = v3679;
        v3683 = 9 * v3682;
        v3684 = (unint64_t)(v3683 + v3681) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v3683, v3681);
        v3685 = v3683 + v3681;
        if (v573 || v3684)
          v3687 = 9;
        else
          v3687 = 0;
        v3688 = v3687 + v3685;
        if ((unint64_t)(v3687 + v3685) >= 0xFFFFFFFFFFFFFFDFLL)
          v3689 = 33;
        else
          v3689 = 0;
        v3690 = v3689 + v3688;
        v3691 = 483840 * v3690;
        v3692 = (__PAIR128__(32, 483840) * v3690) >> 64;
        v573 = __CFADD__(v3692, v3691);
        v3693 = v3692 + v3691;
        if (v573)
          v3694 = 33;
        else
          v3694 = 0;
        v3695 = (unint64_t)(v3694 + v3693) > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v3694, v3693);
        v3696 = v3694 + v3693;
        v3697 = v1316 * STACK[0x18E0];
        v3698 = (v1316 * (unsigned __int128)STACK[0x18E0]) >> 64;
        v3699 = v573 || v3695;
        v573 = __CFADD__(5 * v3698, v3697);
        v3700 = 5 * v3698 + v3697;
        v3701 = (v3698 * (unsigned __int128)5uLL) >> 64;
        if (v573)
          ++v3701;
        v3702 = 5 * v3701;
        v3703 = v3702 + v3700 > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v3702, v3700);
        v3704 = v3702 + v3700;
        if (v573 || v3703)
          v3706 = 5;
        else
          v3706 = 0;
        v3707 = v3706 + v3704;
        v573 = __CFADD__((__PAIR128__(4, 0xE7CF05C2128E4523) * v3707) >> 64, 0xE7CF05C2128E4523 * v3707);
        v3708 = (__PAIR128__(v3707, v3707) * __PAIR128__(4, 0xE7CF05C2128E4523)) >> 64;
        v3709 = (((v3707 * (unsigned __int128)0xE7CF05C2128E4523) >> 64) * 5) >> 64;
        if (v573)
          ++v3709;
        v3710 = 5 * v3709;
        v573 = __CFADD__(v3710, v3708);
        v3711 = v3710 + v3708;
        v3712 = v573;
        if (v3711 > 0xFFFFFFFFFFFFFFFALL)
          v3712 = 1;
        if (v3712)
          v3713 = 5;
        else
          v3713 = 0;
        v3714 = v3713 + v3711;
        v573 = __CFADD__((__PAIR128__(4, 0xD73333333333332FLL) * v3714) >> 64, 0xD73333333333332FLL * v3714);
        v3715 = (__PAIR128__(v3714, v3714) * __PAIR128__(4, 0xD73333333333332FLL)) >> 64;
        v3716 = (((v3714 * (unsigned __int128)0xD73333333333332FLL) >> 64) * 5) >> 64;
        if (v573)
          ++v3716;
        v3717 = 5 * v3716;
        v3718 = (unint64_t)(v3717 + v3715) > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v3717, v3715);
        v3719 = v3717 + v3715;
        if (v573 || v3718)
          v3721 = 5;
        else
          v3721 = 0;
        v3722 = v3721 + v3719;
        if (v3722 >= 0xFFFFFFFFFFFFFFDFLL)
          v3723 = 33;
        else
          v3723 = 0;
        v3724 = v3723 + v3722;
        v3725 = 414720 * v3724;
        v3726 = (__PAIR128__(32, 414720) * v3724) >> 64;
        v573 = __CFADD__(v3726, v3725);
        v3727 = v3726 + v3725;
        if (v573)
          v3728 = 33;
        else
          v3728 = 0;
        v3729 = (unint64_t)(v3728 + v3727) > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v3728, v3727);
        v3730 = v3728 + v3727;
        v3731 = v1306 * STACK[0x18D8];
        v3732 = (v1306 * (unsigned __int128)STACK[0x18D8]) >> 64;
        v3733 = v573 || v3729;
        v3734 = __CFADD__(__CFADD__(v3732, v3731), v3732 + v3731);
        v3735 = __CFADD__(v3732, v3731) + v3732 + v3731 == -1 || v3734;
        v3736 = v3732 + v3731 + __CFADD__(v3732, v3731) + v3735;
        v3737 = (v3736 * (unsigned __int128)0x5CAECC2F8BD67150uLL) >> 64;
        v3738 = 0x5CAECC2F8BD67150 * v3736;
        v3739 = __CFADD__(__CFADD__(v3737, v3738), v3737 + v3738);
        v3740 = __CFADD__(v3737, v3738) + v3737 + v3738 == -1 || v3739;
        v3741 = v3737 + v3738 + __CFADD__(v3737, v3738) + v3740;
        v3742 = ((unint64_t)v3741 * (unsigned __int128)0xDBB6DB6DB6DB6DB6) >> 64;
        v3743 = 0xDBB6DB6DB6DB6DB6 * v3741;
        v3744 = __CFADD__(__CFADD__(v3742, v3743), v3742 + v3743);
        v3745 = __CFADD__(v3742, v3743) + v3742 + v3743 == -1 || v3744;
        v3746 = v3742 + v3743 + __CFADD__(v3742, v3743) + v3745;
        if (v3746 >= 0xFFFFFFFFFFFFFFDFLL)
          v3747 = 33;
        else
          v3747 = 0;
        v3748 = v3747 + v3746;
        v3749 = 362880 * v3748;
        v3750 = (__PAIR128__(32, 362880) * v3748) >> 64;
        v573 = __CFADD__(v3750, v3749);
        v3751 = v3750 + v3749;
        if (v573)
          v3752 = 33;
        else
          v3752 = 0;
        v3753 = (unint64_t)(v3752 + v3751) > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v3752, v3751);
        v3754 = v3752 + v3751;
        v3755 = v1311 * STACK[0x18F8];
        v3756 = (v1311 * (unsigned __int128)STACK[0x18F8]) >> 64;
        if (v573)
          v3753 = 1;
        v573 = __CFADD__(3 * v3756, v3755);
        v3757 = 3 * v3756 + v3755;
        v3758 = (v3756 * (unsigned __int128)3uLL) >> 64;
        if (v573)
          ++v3758;
        v3759 = 3 * v3758;
        v3760 = v3759 + v3757 > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v3759, v3757);
        v3761 = v3759 + v3757;
        if (v573 || v3760)
          v3763 = 3;
        else
          v3763 = 0;
        v3764 = v3763 + v3761;
        v573 = __CFADD__((__PAIR128__(2, 0x98FDEF4CCE72A7B8) * v3764) >> 64, 0x98FDEF4CCE72A7B8 * v3764);
        v3765 = (__PAIR128__(v3764, v3764) * __PAIR128__(2, 0x98FDEF4CCE72A7B8)) >> 64;
        v3766 = (((v3764 * (unsigned __int128)0x98FDEF4CCE72A7B8) >> 64) * 3) >> 64;
        if (v573)
          ++v3766;
        v3767 = 3 * v3766;
        v573 = __CFADD__(v3767, v3765);
        v3768 = v3767 + v3765;
        LODWORD(v3769) = v573;
        if (v3768 > 0xFFFFFFFFFFFFFFFCLL)
          v3769 = 1;
        else
          v3769 = v3769;
        *((_QWORD *)&v3770 + 1) = v3769 | (2 * (v3769 << 63 >> 63));
        *(_QWORD *)&v3770 = v3769 << 63 >> 63;
        v3771 = v3768 - (__ROR8__(v3770 >> 47, 18) & 0xFFFFFFFFFFFFFFFDLL);
        v573 = __CFADD__((__PAIR128__(2, 0xF638E38E38E38E36) * v3771) >> 64, 0xF638E38E38E38E36 * v3771);
        v3772 = (__PAIR128__(v3771, v3771) * __PAIR128__(2, 0xF638E38E38E38E36)) >> 64;
        v3773 = (((v3771 * (unsigned __int128)0xF638E38E38E38E36) >> 64) * 3) >> 64;
        if (v573)
          ++v3773;
        v3774 = 3 * v3773;
        v3775 = (unint64_t)(v3774 + v3772) > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v3774, v3772);
        v3776 = v3774 + v3772;
        if (v573 || v3775)
          v3778 = 3;
        else
          v3778 = 0;
        v3779 = v3778 + v3776;
        if (v3779 >= 0xFFFFFFFFFFFFFFDFLL)
          v3780 = 33;
        else
          v3780 = 0;
        if (v3753)
          v3781 = 33;
        else
          v3781 = 0;
        v3782 = v3781 + v3754;
        v3783 = v3780 + v3779;
        v3784 = 387072 * (v3780 + v3779);
        v3785 = (__PAIR128__(32, 387072) * v3783) >> 64;
        if (v3782 >= 0xFFFFFFFFFFFFFFDFLL)
          v3786 = 33;
        else
          v3786 = 0;
        v573 = __CFADD__(v3785, v3784);
        v3787 = v3785 + v3784;
        if (v573)
          v3788 = 33;
        else
          v3788 = 0;
        v573 = __CFADD__(v3788, v3787);
        v3789 = v3788 + v3787;
        v3790 = v3786 + v3782;
        v3791 = v573;
        if (v3789 > 0xFFFFFFFFFFFFFFDELL)
          v3791 = 1;
        v3792 = v3789 + v3790;
        if (v3791)
          v3793 = 33;
        else
          v3793 = 0;
        v3794 = v3792 + v3793;
        if (v3790 > v3794 || v3794 > 0xFFFFFFFFFFFFFFDELL)
          v3796 = 33;
        else
          v3796 = 0;
        v3797 = v3796 + v3794;
        if (v3733)
          v3798 = 33;
        else
          v3798 = 0;
        v3799 = v3798 + v3730;
        v573 = __CFADD__(v3799, v3797);
        v3800 = v3799 + v3797;
        v3801 = v573;
        if (v3800 > 0xFFFFFFFFFFFFFFDELL)
          v3801 = 1;
        if (v3801)
          v3802 = 33;
        else
          v3802 = 0;
        v3803 = v3802 + v3800;
        if (v3699)
          v3804 = 33;
        else
          v3804 = 0;
        v3805 = v3804 + v3696;
        v3806 = v3805 + v3803 > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v3805, v3803);
        v3807 = v3805 + v3803;
        v3808 = STACK[0x3C20] * STACK[0x1918];
        v3809 = (STACK[0x3C20] * (unsigned __int128)STACK[0x1918]) >> 64;
        if (v573)
          v3806 = 1;
        v573 = __CFADD__(33 * v3809, v3808);
        v3810 = 33 * v3809 + v3808;
        v3811 = (v3809 * (unsigned __int128)0x21uLL) >> 64;
        if (v573)
          ++v3811;
        v3812 = 33 * v3811;
        v3813 = v3812 + v3810 > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v3812, v3810);
        v3814 = v3812 + v3810;
        if (v573 || v3813)
          v3816 = 33;
        else
          v3816 = 0;
        v3817 = v3816 + v3814;
        if (v3661)
          v3818 = 33;
        else
          v3818 = 0;
        if (v3806)
          v3819 = 33;
        else
          v3819 = 0;
        v3820 = v3819 + v3807;
        v3821 = v3818 + v3657;
        v573 = __CFADD__(v3821, v3820);
        v3822 = v3821 + v3820;
        v3823 = v573;
        if (v3822 > 0xFFFFFFFFFFFFFFDELL)
          v3823 = 1;
        if (v3823)
          v3824 = 33;
        else
          v3824 = 0;
        v3825 = v3824 + v3822;
        v3826 = 0xD2087261F2F13621 * v3825;
        v3827 = (((v3825 * (unsigned __int128)0xD2087261F2F13621) >> 64) * 0x21) >> 64;
        v3828 = (__PAIR128__(32, 0xD2087261F2F13621) * v3825) >> 64;
        v573 = __CFADD__(v3828, v3826);
        v3829 = v3828 + v3826;
        if (v573)
          v3830 = v3827 + 1;
        else
          v3830 = v3827;
        v3831 = 33 * v3830;
        v573 = __CFADD__(v3831, v3829);
        v3832 = v3831 + v3829;
        v3833 = v573;
        if (v3832 > 0xFFFFFFFFFFFFFFDELL)
          v3833 = 1;
        if (v3833)
          v3834 = 33;
        else
          v3834 = 0;
        v3835 = v3834 + v3832;
        v3836 = v3817 + v3835 > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v3817, v3835);
        v3837 = v3817 + v3835;
        if (v573 || v3836)
          v3839 = 33;
        else
          v3839 = 0;
        v3840 = v3839 + v3837;
        v3841 = 0xBF751FE036E6FC90 * v3840;
        v3842 = (((v3840 * (unsigned __int128)0xBF751FE036E6FC90) >> 64) * 0x21) >> 64;
        v3843 = (__PAIR128__(32, 0xBF751FE036E6FC90) * v3840) >> 64;
        v573 = __CFADD__(v3843, v3841);
        v3844 = v3843 + v3841;
        if (v573)
          v3845 = v3842 + 1;
        else
          v3845 = v3842;
        v3846 = 33 * v3845;
        v3847 = (unint64_t)(v3846 + v3844) > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v3846, v3844);
        v3848 = v3846 + v3844;
        if (v573)
          v3847 = 1;
        if (v3649 >= 0xFFFFFFFFFFFFFFCBLL)
          v3849 = 53;
        else
          v3849 = 0;
        v3850 = v3849 + v3649;
        v3851 = 5491200 * v3850;
        v3852 = 53 * ((v3850 * (unsigned __int128)0x53CA00uLL) >> 64);
        v573 = __CFADD__(v3852, v3851);
        v3853 = v3852 + v3851;
        if (v573)
          v3854 = 53;
        else
          v3854 = 0;
        v3855 = v3854 + v3853;
        v3856 = __CFADD__(v3854, v3853) || (unint64_t)(v3854 + v3853) > 0xFFFFFFFFFFFFFFCALL;
        if (v3722 >= 0xFFFFFFFFFFFFFFCBLL)
          v3857 = 53;
        else
          v3857 = 0;
        v3858 = v3857 + v3722;
        v3859 = 4347200 * v3858;
        v3860 = 53 * ((v3858 * (unsigned __int128)0x425540uLL) >> 64);
        v573 = __CFADD__(v3860, v3859);
        v3861 = v3860 + v3859;
        if (v573)
          v3862 = 53;
        else
          v3862 = 0;
        v3863 = (unint64_t)(v3862 + v3861) > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v3862, v3861);
        v3864 = v3862 + v3861;
        v3865 = v573 || v3863;
        if (v3779 >= 0xFFFFFFFFFFFFFFCBLL)
          v3866 = 53;
        else
          v3866 = 0;
        v3867 = v3866 + v3779;
        v3868 = 4173312 * v3867;
        v3869 = 53 * ((v3867 * (unsigned __int128)0x3FAE00uLL) >> 64);
        v573 = __CFADD__(v3869, v3868);
        v3870 = v3869 + v3868;
        if (v573)
          v3871 = 53;
        else
          v3871 = 0;
        v3872 = (unint64_t)(v3871 + v3870) > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v3871, v3870);
        v3873 = v3871 + v3870;
        v3874 = v573 || v3872;
        if (v3746 >= 0xFFFFFFFFFFFFFFCBLL)
          v3875 = 53;
        else
          v3875 = 0;
        v3876 = v3875 + v3746;
        v3877 = 4012800 * v3876;
        v3878 = 53 * ((v3876 * (unsigned __int128)0x3D3B00uLL) >> 64);
        v573 = __CFADD__(v3878, v3877);
        v3879 = v3878 + v3877;
        if (v573)
          v3880 = 53;
        else
          v3880 = 0;
        v3881 = (unint64_t)(v3880 + v3879) > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v3880, v3879);
        v3882 = v3880 + v3879;
        if (v573 || v3881)
          v3884 = 53;
        else
          v3884 = 0;
        v3885 = v3884 + v3882;
        if (v3874)
          v3886 = 53;
        else
          v3886 = 0;
        if (v3885 >= 0xFFFFFFFFFFFFFFCBLL)
          v3887 = 53;
        else
          v3887 = 0;
        v3888 = v3887 + v3885;
        v3889 = v3873 + v3888 + v3886;
        if (v3889 > 0xFFFFFFFFFFFFFFCALL || v3888 > v3889)
          v3891 = 53;
        else
          v3891 = 0;
        v3892 = v3891 + v3889;
        if (v3865)
          v3893 = 53;
        else
          v3893 = 0;
        v3894 = v3893 + v3864;
        v573 = __CFADD__(v3894, v3892);
        v3895 = v3894 + v3892;
        v3896 = v573;
        if (v3895 > 0xFFFFFFFFFFFFFFCALL)
          v3896 = 1;
        if (v3896)
          v3897 = 53;
        else
          v3897 = 0;
        v3898 = v3897 + v3895;
        if (v3688 >= 0xFFFFFFFFFFFFFFCBLL)
          v3899 = 53;
        else
          v3899 = 0;
        v3900 = v3899 + v3688;
        v3901 = 4742400 * v3900;
        v3902 = 53 * ((v3900 * (unsigned __int128)0x485D00uLL) >> 64);
        v573 = __CFADD__(v3902, v3901);
        v3903 = v3902 + v3901;
        if (v573)
          v3904 = 53;
        else
          v3904 = 0;
        v573 = __CFADD__(v3904, v3903);
        v3905 = v3904 + v3903;
        v3906 = v573;
        if (v3905 > 0xFFFFFFFFFFFFFFCALL)
          v3906 = 1;
        if (v3906)
          v3907 = 53;
        else
          v3907 = 0;
        v3908 = v3907 + v3905;
        v573 = __CFADD__(v3908, v3898);
        v3909 = v3908 + v3898;
        v3910 = v573;
        if (v3909 > 0xFFFFFFFFFFFFFFCALL)
          v3910 = 1;
        if (v3910)
          v3911 = 53;
        else
          v3911 = 0;
        v3912 = v3911 + v3909;
        if (v3856)
          v3913 = 53;
        else
          v3913 = 0;
        v3914 = v3913 + v3855;
        v573 = __CFADD__(v3914, v3912);
        v3915 = v3914 + v3912;
        v3916 = v573;
        if (v3915 > 0xFFFFFFFFFFFFFFCALL)
          v3916 = 1;
        if (v3916)
          v3917 = 53;
        else
          v3917 = 0;
        v3918 = v3917 + v3915;
        v3919 = 0xA64A3E2F1B4DE8E6 * v3918;
        v3920 = (v3918 * (unsigned __int128)0xA64A3E2F1B4DE8E6) >> 64;
        v3921 = (v3920 * (unsigned __int128)0x35uLL) >> 64;
        v3920 *= 53;
        v573 = __CFADD__(v3920, v3919);
        v3922 = v3920 + v3919;
        if (v573)
          v3923 = v3921 + 1;
        else
          v3923 = v3921;
        v3924 = 53 * v3923;
        v3925 = v3924 + v3922 > 0xFFFFFFFFFFFFFFCALL;
        v573 = __CFADD__(v3924, v3922);
        v3926 = v3924 + v3922;
        v3927 = STACK[0x3C60] * STACK[0x1900];
        v3928 = (STACK[0x3C60] * (unsigned __int128)STACK[0x1900]) >> 64;
        if (v573)
          v3925 = 1;
        v573 = __CFADD__(53 * v3928, v3927);
        v3929 = 53 * v3928 + v3927;
        v3930 = (v3928 * (unsigned __int128)0x35uLL) >> 64;
        if (v573)
          ++v3930;
        v3931 = 53 * v3930;
        v573 = __CFADD__(v3931, v3929);
        v3932 = v3931 + v3929;
        v3933 = v573;
        if (v3932 > 0xFFFFFFFFFFFFFFCALL)
          v3933 = 1;
        if (v3933)
          v3934 = 53;
        else
          v3934 = 0;
        v3935 = v3934 + v3932;
        if (v3925)
          v3936 = 53;
        else
          v3936 = 0;
        v3937 = v3936 + v3926;
        v573 = __CFADD__(v3935, v3937);
        v3938 = v3935 + v3937;
        v3939 = v573;
        if (v3938 > 0xFFFFFFFFFFFFFFCALL)
          v3939 = 1;
        if (v3939)
          v3940 = 53;
        else
          v3940 = 0;
        v3941 = v3940 + v3938;
        v3942 = 0x59708602BDC08F49 * v3941;
        v3943 = (v3941 * (unsigned __int128)0x59708602BDC08F49uLL) >> 64;
        if (v3847)
          v3944 = 33;
        else
          v3944 = 0;
        v3945 = v3944 + v3848;
        v3946 = (v3943 * (unsigned __int128)0x35uLL) >> 64;
        v3947 = 53 * v3943;
        v573 = __CFADD__(v3947, v3942);
        v3948 = v3947 + v3942;
        if (v573)
          ++v3946;
        v3949 = 53 * v3946;
        v573 = __CFADD__(v3949, v3948);
        v3950 = v3949 + v3948;
        v3951 = v573;
        if (v3950 > 0xFFFFFFFFFFFFFFCALL)
          v3951 = 1;
        if (v3951)
          v3952 = 53;
        else
          v3952 = 0;
        v3953 = v3952 + v3950;
        v3954 = 0x74605CE0F105902CLL * v3953;
        v3955 = (v3953 * (unsigned __int128)0x74605CE0F105902CuLL) >> 64;
        v3956 = (v3955 * (unsigned __int128)0x35uLL) >> 64;
        v3955 *= 53;
        v573 = __CFADD__(v3955, v3954);
        v3957 = v3955 + v3954;
        if (v573)
          v3958 = v3956 + 1;
        else
          v3958 = v3956;
        v3959 = 53 * v3958;
        v573 = __CFADD__(v3959, v3957);
        v3960 = v3959 + v3957;
        v3961 = v573;
        if (v3960 > 0xFFFFFFFFFFFFFFCALL)
          v3961 = 1;
        if (v3961)
          v3962 = 53;
        else
          v3962 = 0;
        v3963 = v3962 + v3960;
        if (v3962 + v3960 >= 0xFFFFFFFFFFFFFFDFLL)
          v3964 = 33;
        else
          v3964 = 0;
        v3965 = v3964 + v3963;
        v3966 = 0xD2087261F2F13621 * v3965;
        v3967 = (((v3965 * (unsigned __int128)0xD2087261F2F13621) >> 64) * 0x21) >> 64;
        v3968 = (__PAIR128__(32, 0xD2087261F2F13621) * v3965) >> 64;
        v573 = __CFADD__(v3968, v3966);
        v3969 = v3968 + v3966;
        if (v573)
          v3970 = v3967 + 1;
        else
          v3970 = v3967;
        v3971 = 33 * v3970;
        v573 = __CFADD__(v3971, v3969);
        v3972 = v3971 + v3969;
        v3973 = v573;
        if (v3972 > 0xFFFFFFFFFFFFFFDELL)
          v3973 = 1;
        if (v3973)
          v3974 = 33;
        else
          v3974 = 0;
        v3975 = v3974 + v3972;
        v3976 = v3945 + v3975 > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v3945, v3975);
        v3977 = v3945 + v3975;
        if (v573 || v3976)
          v3979 = 33;
        else
          v3979 = 0;
        v3980 = v3979 + v3977;
        v3981 = 0x599999999999998ELL * v3980;
        v3982 = (((v3980 * (unsigned __int128)0x599999999999998EuLL) >> 64) * 0x21) >> 64;
        v3983 = (__PAIR128__(32, 0x599999999999998ELL) * v3980) >> 64;
        v573 = __CFADD__(v3983, v3981);
        v3984 = v3983 + v3981;
        if (v573)
          v3985 = v3982 + 1;
        else
          v3985 = v3982;
        v3986 = 33 * v3985;
        v3987 = v3986 + v3984;
        v3988 = __CFADD__(v3986, v3984) || (unint64_t)(v3986 + v3984) > 0xFFFFFFFFFFFFFFDELL;
        if (v3963 >= 0xFFFFFFFFFFFFFFEFLL)
          v3989 = 17;
        else
          v3989 = 0;
        v3990 = v3989 + v3963;
        v3991 = 0xBCE0B40AAD3903CALL * v3990;
        v3992 = (((v3990 * (unsigned __int128)0xBCE0B40AAD3903CALL) >> 64) * 0x11) >> 64;
        v3993 = (__PAIR128__(16, 0xBCE0B40AAD3903CALL) * v3990) >> 64;
        v573 = __CFADD__(v3993, v3991);
        v3994 = v3993 + v3991;
        if (v573)
          v3995 = v3992 + 1;
        else
          v3995 = v3992;
        v3996 = 17 * v3995;
        v3997 = (unint64_t)(v3996 + v3994) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v3996, v3994);
        v3998 = v3996 + v3994;
        v3999 = v573 || v3997;
        if (v3746 >= 0xFFFFFFFFFFFFFFEFLL)
          v4000 = 17;
        else
          v4000 = 0;
        v4001 = v4000 + v3746;
        v4002 = 2688 * v4001;
        v4003 = (__PAIR128__(16, 2688) * v4001) >> 64;
        v573 = __CFADD__(v4003, v4002);
        v4004 = v4003 + v4002;
        if (v573)
          v4005 = 17;
        else
          v4005 = 0;
        v4006 = (unint64_t)(v4005 + v4004) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v4005, v4004);
        v4007 = v4005 + v4004;
        v4008 = v573 || v4006;
        if (v3779 >= 0xFFFFFFFFFFFFFFEFLL)
          v4009 = 17;
        else
          v4009 = 0;
        if (v4008)
          v4010 = 17;
        else
          v4010 = 0;
        v4011 = v4010 + v4007;
        v4012 = v4009 + v3779;
        v4013 = 3 * (v4009 + v3779);
        v4014 = (__PAIR128__(16, 3072) * v4012) >> 64;
        if (v3722 >= 0xFFFFFFFFFFFFFFEFLL)
          v4015 = 17;
        else
          v4015 = 0;
        v573 = __CFADD__(v4014, v4013 << 10);
        v4016 = v4014 + (v4013 << 10);
        if (v573)
          v4017 = 17;
        else
          v4017 = 0;
        v573 = __CFADD__(v4017, v4016);
        v4018 = v4017 + v4016;
        v4019 = v573;
        if (v4018 > 0xFFFFFFFFFFFFFFEELL)
          v4019 = 1;
        if (v4011 >= 0xFFFFFFFFFFFFFFEFLL)
          v4020 = 17;
        else
          v4020 = 0;
        v4021 = v4020 + v4011;
        v4022 = v4018 + v4021;
        if (v4019)
          v4023 = 17;
        else
          v4023 = 0;
        v4024 = v4022 + v4023;
        if (v4024 > 0xFFFFFFFFFFFFFFEELL || v4021 > v4024)
          v4026 = 17;
        else
          v4026 = 0;
        v4027 = v4026 + v4024;
        v4028 = 3584 * (v4015 + v3722);
        v4029 = (__PAIR128__(16, 3584) * (v4015 + v3722)) >> 64;
        if (v3688 >= 0xFFFFFFFFFFFFFFEFLL)
          v4030 = 17;
        else
          v4030 = 0;
        v573 = __CFADD__(v4029, v4028);
        v4031 = v4029 + v4028;
        if (v573)
          v4032 = 17;
        else
          v4032 = 0;
        v573 = __CFADD__(v4032, v4031);
        v4033 = v4032 + v4031;
        v4034 = v573;
        if (v4033 > 0xFFFFFFFFFFFFFFEELL)
          v4034 = 1;
        if (v4034)
          v4035 = 17;
        else
          v4035 = 0;
        v4036 = v4035 + v4033;
        v573 = __CFADD__(v4036, v4027);
        v4037 = v4036 + v4027;
        v4038 = 5376 * (v4030 + v3688);
        v4039 = (__PAIR128__(16, 5376) * (v4030 + v3688)) >> 64;
        v4040 = v573;
        v573 = __CFADD__(v4039, v4038);
        v4041 = v4039 + v4038;
        if (v573)
          v4042 = 17;
        else
          v4042 = 0;
        v573 = __CFADD__(v4042, v4041);
        v4043 = v4042 + v4041;
        v4044 = v573;
        if (v4037 > 0xFFFFFFFFFFFFFFEELL)
          v4040 = 1;
        if (v4040)
          v4045 = 17;
        else
          v4045 = 0;
        v4046 = v4045 + v4037;
        if (v4043 > 0xFFFFFFFFFFFFFFEELL)
          v4044 = 1;
        if (v4044)
          v4047 = 17;
        else
          v4047 = 0;
        v4048 = v4047 + v4043;
        v4049 = v4048 + v4046 > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v4048, v4046);
        v4050 = v4048 + v4046;
        v4051 = v573 || v4049;
        if (v3649 >= 0xFFFFFFFFFFFFFFEFLL)
          v4052 = 17;
        else
          v4052 = 0;
        v2628 = v4051 == 0;
        v4053 = v4052 + v3649;
        v4054 = 21504 * (v4052 + v3649);
        v4055 = (__PAIR128__(16, 21504) * v4053) >> 64;
        if (v2628)
          v4056 = 0;
        else
          v4056 = 17;
        v573 = __CFADD__(v4055, v4054);
        v4057 = v4055 + v4054;
        v4058 = v4056 + v4050;
        if (v573)
          v4059 = 17;
        else
          v4059 = 0;
        v573 = __CFADD__(v4059, v4057);
        v4060 = v4059 + v4057;
        v4061 = v573;
        if (v4060 > 0xFFFFFFFFFFFFFFEELL)
          v4061 = 1;
        if (v4061)
          v4062 = 17;
        else
          v4062 = 0;
        v4063 = v4062 + v4060;
        v573 = __CFADD__(v4063, v4058);
        v4064 = v4063 + v4058;
        v4065 = v573;
        if (v4064 > 0xFFFFFFFFFFFFFFEELL)
          v4065 = 1;
        if (v4065)
          v4066 = 17;
        else
          v4066 = 0;
        v4067 = v4066 + v4064;
        v573 = __CFADD__((__PAIR128__(16, 0xBCE0B40AAD3903CALL) * v4067) >> 64, 0xBCE0B40AAD3903CALL * v4067);
        v4068 = (__PAIR128__(v4067, v4067) * __PAIR128__(16, 0xBCE0B40AAD3903CALL)) >> 64;
        v4069 = (((v4067 * (unsigned __int128)0xBCE0B40AAD3903CALL) >> 64) * 0x11) >> 64;
        if (v573)
          ++v4069;
        v4070 = 17 * v4069;
        v4071 = (unint64_t)(v4070 + v4068) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v4070, v4068);
        v4072 = v4070 + v4068;
        v4073 = STACK[0x3C78] * STACK[0x1910];
        v4074 = (STACK[0x3C78] * (unsigned __int128)STACK[0x1910]) >> 64;
        if (v573)
          v4071 = 1;
        v573 = __CFADD__(17 * v4074, v4073);
        v4075 = 17 * v4074 + v4073;
        v4076 = (v4074 * (unsigned __int128)0x11uLL) >> 64;
        if (v573)
          ++v4076;
        v4077 = 17 * v4076;
        v4078 = v4077 + v4075 > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v4077, v4075);
        v4079 = v4077 + v4075;
        if (v573 || v4078)
          v4081 = 17;
        else
          v4081 = 0;
        v4082 = v4081 + v4079;
        if (v4071)
          v4083 = 17;
        else
          v4083 = 0;
        v4084 = v4083 + v4072;
        v4085 = v4082 + v4084 > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v4082, v4084);
        v4086 = v4082 + v4084;
        if (v573 || v4085)
          v4088 = 17;
        else
          v4088 = 0;
        v4089 = v4088 + v4086;
        v573 = __CFADD__((__PAIR128__(16, 0x260186186186185FLL) * v4089) >> 64, 0x260186186186185FLL * v4089);
        v4090 = (__PAIR128__(v4089, v4089) * __PAIR128__(16, 0x260186186186185FLL)) >> 64;
        v4091 = (((v4089 * (unsigned __int128)0x260186186186185FuLL) >> 64) * 0x11) >> 64;
        if (v573)
          ++v4091;
        v4092 = 17 * v4091;
        v4093 = (unint64_t)(v4092 + v4090) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v4092, v4090);
        v4094 = v4092 + v4090;
        if (v573 || v4093)
          v4096 = 17;
        else
          v4096 = 0;
        v4097 = v4096 + v4094;
        if (v3999)
          v4098 = 17;
        else
          v4098 = 0;
        v4099 = v4098 + v3998;
        v4100 = (unint64_t)(v4097 + v4099) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v4097, v4099);
        v4101 = v4097 + v4099;
        if (v573)
          v4100 = 1;
        if (v4100)
          v4102 = 17;
        else
          v4102 = 0;
        v4103 = v4102 + v4101;
        v4104 = 0xF8E38E38E38E38D3 * v4103;
        v4105 = (((v4103 * (unsigned __int128)0xF8E38E38E38E38D3) >> 64) * 0x11) >> 64;
        v4106 = (__PAIR128__(16, 0xF8E38E38E38E38D3) * v4103) >> 64;
        v573 = __CFADD__(v4106, v4104);
        v4107 = v4106 + v4104;
        if (v573)
          v4108 = v4105 + 1;
        else
          v4108 = v4105;
        v4109 = 17 * v4108;
        v4110 = (unint64_t)(v4109 + v4107) > 0xFFFFFFFFFFFFFFEELL;
        v573 = __CFADD__(v4109, v4107);
        v4111 = v4109 + v4107;
        if (v573 || v4110)
          v4113 = 17;
        else
          v4113 = 0;
        v4114 = v4113 + v4111;
        if (v3988)
          v4115 = 33;
        else
          v4115 = 0;
        v4116 = v4115 + v3987;
        if (v4114 >= 0xFFFFFFFFFFFFFFDFLL)
          v4117 = 33;
        else
          v4117 = 0;
        v4118 = v4117 + v4114;
        v573 = v4116 >= v4118;
        v4119 = v4116 - v4118;
        v4120 = -33;
        if (v573)
          v4120 = 0;
        v4121 = v4119 + v4120;
        v4122 = 0xFFFFFFFFFFFFFFELL * v4121;
        v4123 = (((v4121 * (unsigned __int128)0xFFFFFFFFFFFFFFEuLL) >> 64) * 0x21) >> 64;
        v4124 = (__PAIR128__(32, 0xFFFFFFFFFFFFFFELL) * v4121) >> 64;
        v573 = __CFADD__(v4124, v4122);
        v4125 = v4124 + v4122;
        if (v573)
          v4126 = v4123 + 1;
        else
          v4126 = v4123;
        v4127 = 33 * v4126;
        v4128 = (unint64_t)(v4127 + v4125) > 0xFFFFFFFFFFFFFFDELL;
        v573 = __CFADD__(v4127, v4125);
        v4129 = v4127 + v4125;
        if (v573)
          v4128 = 1;
        if (v3779 >= 0xFFFFFFFFFFFFFFD1)
          v4130 = 47;
        else
          v4130 = 0;
        v4131 = v4130 + v3779;
        v4132 = 2349312 * v4131;
        v4133 = 47 * ((v4131 * (unsigned __int128)0x23D900uLL) >> 64);
        v573 = __CFADD__(v4133, v4132);
        v4134 = v4133 + v4132;
        if (v573)
          v4135 = 47;
        else
          v4135 = 0;
        v4136 = (unint64_t)(v4135 + v4134) > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v4135, v4134);
        v4137 = v4135 + v4134;
        v4138 = v573 || v4136;
        if (v3746 >= 0xFFFFFFFFFFFFFFD1)
          v4139 = 47;
        else
          v4139 = 0;
        v4140 = v4139 + v3746;
        v4141 = 2247168 * v4140;
        v4142 = 47 * ((v4140 * (unsigned __int128)0x224A00uLL) >> 64);
        v573 = __CFADD__(v4142, v4141);
        v4143 = v4142 + v4141;
        if (v573)
          v4144 = 47;
        else
          v4144 = 0;
        v4145 = (unint64_t)(v4144 + v4143) > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v4144, v4143);
        v4146 = v4144 + v4143;
        if (v573 || v4145)
          v4148 = 47;
        else
          v4148 = 0;
        v4149 = v4148 + v4146;
        if (v3722 >= 0xFFFFFFFFFFFFFFD1)
          v4150 = 47;
        else
          v4150 = 0;
        if (v4149 >= 0xFFFFFFFFFFFFFFD1)
          v4151 = 47;
        else
          v4151 = 0;
        v2628 = v4138 == 0;
        v4152 = v4150 + v3722;
        v4153 = 2461184 * (v4150 + v3722);
        v4154 = 47 * ((v4152 * (unsigned __int128)0x258E00uLL) >> 64);
        if (v2628)
          v4155 = 0;
        else
          v4155 = 47;
        v573 = __CFADD__(v4154, v4153);
        v4156 = v4154 + v4153;
        v4157 = v4151 + v4149;
        v4158 = v4137 + v4157 + v4155;
        if (v573)
          v4159 = 47;
        else
          v4159 = 0;
        v573 = __CFADD__(v4159, v4156);
        v4160 = v4159 + v4156;
        v4161 = v573;
        if (v4157 > v4158 || v4158 > 0xFFFFFFFFFFFFFFD0)
          v4163 = 47;
        else
          v4163 = 0;
        v4164 = v4163 + v4158;
        if (v4160 > 0xFFFFFFFFFFFFFFD0)
          v4165 = 1;
        else
          v4165 = v4161;
        if (v4165)
          v4166 = 47;
        else
          v4166 = 0;
        v4167 = v4166 + v4160;
        v4168 = v4167 + v4164 > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v4167, v4164);
        v4169 = v4167 + v4164;
        v4170 = v573 || v4168;
        if (v3688 >= 0xFFFFFFFFFFFFFFD1)
          v4171 = 47;
        else
          v4171 = 0;
        v4172 = v4171 + v3688;
        v4173 = 2720256 * v4172;
        v4174 = 47 * ((v4172 * (unsigned __int128)0x298200uLL) >> 64);
        v573 = __CFADD__(v4174, v4173);
        v4175 = v4174 + v4173;
        if (v573)
          v4176 = 47;
        else
          v4176 = 0;
        v573 = __CFADD__(v4176, v4175);
        v4177 = v4176 + v4175;
        v4178 = v573;
        if (v4177 > 0xFFFFFFFFFFFFFFD0)
          v4178 = 1;
        if (v4170)
          v4179 = 47;
        else
          v4179 = 0;
        if (v4178)
          v4180 = 47;
        else
          v4180 = 0;
        v4181 = v4180 + v4177;
        v4182 = v4179 + v4169;
        v573 = __CFADD__(v4181, v4182);
        v4183 = v4181 + v4182;
        v4184 = v573;
        if (v3649 >= 0xFFFFFFFFFFFFFFD1)
          v4185 = 47;
        else
          v4185 = 0;
        v4186 = v4185 + v3649;
        v4187 = 3230304 * v4186;
        v4188 = 47 * ((v4186 * (unsigned __int128)0x314A60uLL) >> 64);
        if (v4183 > 0xFFFFFFFFFFFFFFD0)
          v4184 = 1;
        v573 = __CFADD__(v4188, v4187);
        v4189 = v4188 + v4187;
        if (v573)
          v4190 = 47;
        else
          v4190 = 0;
        v573 = __CFADD__(v4190, v4189);
        v4191 = v4190 + v4189;
        v4192 = v573;
        if (v4184)
          v4193 = 47;
        else
          v4193 = 0;
        v4194 = v4193 + v4183;
        if (v4191 > 0xFFFFFFFFFFFFFFD0)
          v4195 = 1;
        else
          v4195 = v4192;
        if (v4195)
          v4196 = 47;
        else
          v4196 = 0;
        v4197 = v4196 + v4191;
        v573 = __CFADD__(v4197, v4194);
        v4198 = v4197 + v4194;
        v4199 = v573;
        if (v4198 > 0xFFFFFFFFFFFFFFD0)
          v4199 = 1;
        if (v4199)
          v4200 = 47;
        else
          v4200 = 0;
        v4201 = v4200 + v4198;
        v4202 = 0xF9CF898C924065FBLL * v4201;
        v4203 = (v4201 * (unsigned __int128)0xF9CF898C924065FBLL) >> 64;
        v4204 = (v4203 * (unsigned __int128)0x2FuLL) >> 64;
        v4203 *= 47;
        v573 = __CFADD__(v4203, v4202);
        v4205 = v4203 + v4202;
        if (v573)
          v4206 = v4204 + 1;
        else
          v4206 = v4204;
        v4207 = 47 * v4206;
        v4208 = v4207 + v4205 > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v4207, v4205);
        v4209 = v4207 + v4205;
        v4210 = STACK[0x3C08] * STACK[0x1920];
        v4211 = (STACK[0x3C08] * (unsigned __int128)STACK[0x1920]) >> 64;
        if (v573)
          v4208 = 1;
        v573 = __CFADD__(47 * v4211, v4210);
        v4212 = 47 * v4211 + v4210;
        v4213 = (v4211 * (unsigned __int128)0x2FuLL) >> 64;
        if (v573)
          ++v4213;
        v4214 = 47 * v4213;
        v4215 = v4214 + v4212 > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v4214, v4212);
        v4216 = v4214 + v4212;
        if (v573 || v4215)
          v4218 = 47;
        else
          v4218 = 0;
        v4219 = v4218 + v4216;
        if (v4208)
          v4220 = 47;
        else
          v4220 = 0;
        v4221 = v4220 + v4209;
        v4222 = v4219 + v4221 > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v4219, v4221);
        v4223 = v4219 + v4221;
        if (v573 || v4222)
          v4225 = 47;
        else
          v4225 = 0;
        v4226 = v4225 + v4223;
        v4227 = 0x5C1DC82ED83E4DC6 * v4226;
        v4228 = (v4226 * (unsigned __int128)0x5C1DC82ED83E4DC6uLL) >> 64;
        v4229 = (v4228 * (unsigned __int128)0x2FuLL) >> 64;
        v4228 *= 47;
        v573 = __CFADD__(v4228, v4227);
        v4230 = v4228 + v4227;
        if (v573)
          v4231 = v4229 + 1;
        else
          v4231 = v4229;
        v4232 = 47 * v4231;
        v573 = __CFADD__(v4232, v4230);
        v4233 = v4232 + v4230;
        v4234 = v573;
        if (v4233 > 0xFFFFFFFFFFFFFFD0)
          v4234 = 1;
        if (v4234)
          v4235 = 47;
        else
          v4235 = 0;
        v4236 = v4235 + v4233;
        if (v3963 >= 0xFFFFFFFFFFFFFFD1)
          v4237 = 47;
        else
          v4237 = 0;
        v4238 = v4237 + v3963;
        v4239 = 0xF9CF898C924065FBLL * v4238;
        v4240 = (v4238 * (unsigned __int128)0xF9CF898C924065FBLL) >> 64;
        v4241 = (v4240 * (unsigned __int128)0x2FuLL) >> 64;
        v4240 *= 47;
        v573 = __CFADD__(v4240, v4239);
        v4242 = v4240 + v4239;
        if (v573)
          v4243 = v4241 + 1;
        else
          v4243 = v4241;
        v4244 = 47 * v4243;
        v573 = __CFADD__(v4244, v4242);
        v4245 = v4244 + v4242;
        v4246 = v573;
        if (v4245 > 0xFFFFFFFFFFFFFFD0)
          v4246 = 1;
        if (v4246)
          v4247 = 47;
        else
          v4247 = 0;
        v4248 = v4247 + v4245;
        v573 = __CFADD__(v4236, v4248);
        v4249 = v4236 + v4248;
        v4250 = v573;
        if (v4249 > 0xFFFFFFFFFFFFFFD0)
          v4250 = 1;
        if (v4250)
          v4251 = 47;
        else
          v4251 = 0;
        v4252 = v4251 + v4249;
        v4253 = 0xD55555555555552ELL * v4252;
        v4254 = (v4252 * (unsigned __int128)0xD55555555555552ELL) >> 64;
        v4255 = (v4254 * (unsigned __int128)0x2FuLL) >> 64;
        v4254 *= 47;
        v573 = __CFADD__(v4254, v4253);
        v4256 = v4254 + v4253;
        if (v573)
          v4257 = v4255 + 1;
        else
          v4257 = v4255;
        v4258 = 47 * v4257;
        v573 = __CFADD__(v4258, v4256);
        v4259 = v4258 + v4256;
        v4260 = v573;
        if (v4259 > 0xFFFFFFFFFFFFFFD0)
          v4260 = 1;
        if (v4260)
          v4261 = 47;
        else
          v4261 = 0;
        v4262 = v4261 + v4259;
        if (v4128)
          v4263 = 33;
        else
          v4263 = 0;
        v4264 = v4263 + v4129;
        if (v4114 >= 0xFFFFFFFFFFFFFFD1)
          v4265 = 47;
        else
          v4265 = 0;
        v4266 = v4265 + v4114;
        v573 = v4262 >= v4266;
        v4267 = v4262 - v4266;
        if (v573)
          v4268 = 0;
        else
          v4268 = -47;
        v4269 = v4267 + v4268;
        v4270 = 0x888888888888887 * v4269;
        v4271 = (v4269 * (unsigned __int128)0x888888888888887uLL) >> 64;
        v4272 = (v4271 * (unsigned __int128)0x2FuLL) >> 64;
        v4273 = 47 * v4271;
        if (v4264 >= 0xFFFFFFFFFFFFFFD1)
          v4274 = 47;
        else
          v4274 = 0;
        v573 = __CFADD__(v4273, v4270);
        v4275 = v4273 + v4270;
        if (v573)
          v4276 = v4272 + 1;
        else
          v4276 = v4272;
        v4277 = 47 * v4276;
        v573 = __CFADD__(v4277, v4275);
        v4278 = v4277 + v4275;
        v4279 = v573;
        v4280 = v4274 + v4264;
        if (v4278 > 0xFFFFFFFFFFFFFFD0)
          v4279 = 1;
        if (v4279)
          v4281 = 47;
        else
          v4281 = 0;
        v4282 = v4281 + v4278;
        v573 = v4282 >= v4280;
        v4283 = v4282 - v4280;
        if (v573)
          v4284 = 0;
        else
          v4284 = -47;
        v4285 = v4283 + v4284;
        v4286 = 0x5B6DB6DB6DB6DB5DLL * v4285;
        v4287 = (v4285 * (unsigned __int128)0x5B6DB6DB6DB6DB5DuLL) >> 64;
        v4288 = (v4287 * (unsigned __int128)0x2FuLL) >> 64;
        v4287 *= 47;
        v573 = __CFADD__(v4287, v4286);
        v4289 = v4287 + v4286;
        if (v573)
          v4290 = v4288 + 1;
        else
          v4290 = v4288;
        v4291 = 47 * v4290;
        v4292 = v4291 + v4289 > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v4291, v4289);
        v4293 = v4291 + v4289;
        v4294 = v573 || v4292;
        if (v3963 >= 0xFFFFFFFFFFFFFFD3)
          v4295 = 45;
        else
          v4295 = 0;
        v4296 = v4295 + v3963;
        v4297 = 0xB1035F48A597370CLL * v4296;
        v4298 = (v4296 * (unsigned __int128)0xB1035F48A597370CLL) >> 64;
        v4299 = (v4298 * (unsigned __int128)0x2DuLL) >> 64;
        v4298 *= 45;
        v573 = __CFADD__(v4298, v4297);
        v4300 = v4298 + v4297;
        if (v573)
          v4301 = v4299 + 1;
        else
          v4301 = v4299;
        v4302 = 45 * v4301;
        v4303 = v4302 + v4300 > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v4302, v4300);
        v4304 = v4302 + v4300;
        v4305 = v573 || v4303;
        if (v3688 >= 0xFFFFFFFFFFFFFFD3)
          v4306 = 45;
        else
          v4306 = 0;
        v4307 = v4306 + v3688;
        v4308 = 2217600 * v4307;
        v4309 = 45 * ((v4307 * (unsigned __int128)0x21D680uLL) >> 64);
        v573 = __CFADD__(v4309, v4308);
        v4310 = v4309 + v4308;
        if (v573)
          v4311 = 45;
        else
          v4311 = 0;
        v4312 = (unint64_t)(v4311 + v4310) > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v4311, v4310);
        v4313 = v4311 + v4310;
        v4314 = v573 || v4312;
        if (v3746 >= 0xFFFFFFFFFFFFFFD3)
          v4315 = 45;
        else
          v4315 = 0;
        v4316 = v4315 + v3746;
        v4317 = 1814400 * v4316;
        v4318 = 45 * ((v4316 * (unsigned __int128)0x1BAF80uLL) >> 64);
        if (v3779 >= 0xFFFFFFFFFFFFFFD3)
          v4319 = 45;
        else
          v4319 = 0;
        v573 = __CFADD__(v4318, v4317);
        v4320 = v4318 + v4317;
        if (v573)
          v4321 = 45;
        else
          v4321 = 0;
        v573 = __CFADD__(v4321, v4320);
        v4322 = v4321 + v4320;
        v4323 = v573;
        if (v4322 > 0xFFFFFFFFFFFFFFD2)
          v4323 = 1;
        if (v4323)
          v4324 = 45;
        else
          v4324 = 0;
        v4325 = v4324 + v4322;
        v4326 = v4319 + v3779;
        v4327 = 1900800 * (v4319 + v3779);
        v4328 = 45 * ((v4326 * (unsigned __int128)0x1D0100uLL) >> 64);
        if (v3722 >= 0xFFFFFFFFFFFFFFD3)
          v4329 = 45;
        else
          v4329 = 0;
        if (v4325 >= 0xFFFFFFFFFFFFFFD3)
          v4330 = 45;
        else
          v4330 = 0;
        v573 = __CFADD__(v4328, v4327);
        v4331 = v4328 + v4327;
        if (v573)
          v4332 = 45;
        else
          v4332 = 0;
        v573 = __CFADD__(v4332, v4331);
        v4333 = v4332 + v4331;
        v4334 = v4330 + v4325;
        v4335 = v573;
        if (v4333 > 0xFFFFFFFFFFFFFFD2)
          v4335 = 1;
        v4336 = v4333 + v4334;
        if (v4335)
          v4337 = 45;
        else
          v4337 = 0;
        v4338 = v4336 + v4337;
        v4339 = v4329 + v3722;
        v4340 = 1995840 * (v4329 + v3722);
        v4341 = 45 * ((v4339 * (unsigned __int128)0x1E7440uLL) >> 64);
        v573 = __CFADD__(v4341, v4340);
        v4342 = v4341 + v4340;
        if (v573)
          v4343 = 45;
        else
          v4343 = 0;
        v573 = __CFADD__(v4343, v4342);
        v4344 = v4343 + v4342;
        v4345 = v573;
        if (v4338 <= 0xFFFFFFFFFFFFFFD2 && v4338 >= v4334)
          v4347 = 0;
        else
          v4347 = 45;
        v4348 = v4347 + v4338;
        if (v4344 > 0xFFFFFFFFFFFFFFD2)
          v4349 = 1;
        else
          v4349 = v4345;
        if (v4349)
          v4350 = 45;
        else
          v4350 = 0;
        v4351 = v4350 + v4344;
        v573 = __CFADD__(v4351, v4348);
        v4352 = v4351 + v4348;
        v4353 = v573;
        if (v4352 > 0xFFFFFFFFFFFFFFD2)
          v4353 = 1;
        if (v4353)
          v4354 = 45;
        else
          v4354 = 0;
        v4355 = v4354 + v4352;
        if (v4314)
          v4356 = 45;
        else
          v4356 = 0;
        v4357 = v4356 + v4313;
        v4358 = v4357 + v4355 > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v4357, v4355);
        v4359 = v4357 + v4355;
        if (v573)
          v4358 = 1;
        if (v3649 >= 0xFFFFFFFFFFFFFFD3)
          v4360 = 45;
        else
          v4360 = 0;
        v4361 = v4360 + v3649;
        v4362 = 2661120 * v4361;
        v4363 = 45 * ((v4361 * (unsigned __int128)0x289B00uLL) >> 64);
        v573 = __CFADD__(v4363, v4362);
        v4364 = v4363 + v4362;
        if (v573)
          v4365 = 45;
        else
          v4365 = 0;
        v573 = __CFADD__(v4365, v4364);
        v4366 = v4365 + v4364;
        v4367 = v573;
        if (v4366 > 0xFFFFFFFFFFFFFFD2)
          v4367 = 1;
        if (v4367)
          v4368 = 45;
        else
          v4368 = 0;
        if (v4358)
          v4369 = 45;
        else
          v4369 = 0;
        v4370 = v4369 + v4359;
        v4371 = v4368 + v4366;
        v4372 = v4368 + v4366 + v4370 > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v4371, v4370);
        v4373 = v4371 + v4370;
        if (v573 || v4372)
          v4375 = 45;
        else
          v4375 = 0;
        v4376 = v4375 + v4373;
        v4377 = 0xB1035F48A597370CLL * v4376;
        v4378 = (v4376 * (unsigned __int128)0xB1035F48A597370CLL) >> 64;
        v573 = __CFADD__(45 * v4378, v4377);
        v4379 = 45 * v4378 + v4377;
        v4380 = (v4378 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v4380;
        v4381 = 45 * v4380;
        v4382 = v4381 + v4379 > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v4381, v4379);
        v4383 = v4381 + v4379;
        v4384 = STACK[0x3C28] * STACK[0x1908];
        v4385 = (STACK[0x3C28] * (unsigned __int128)STACK[0x1908]) >> 64;
        if (v573)
          v4382 = 1;
        v573 = __CFADD__(45 * v4385, v4384);
        v4386 = 45 * v4385 + v4384;
        v4387 = (v4385 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v4387;
        v4388 = 45 * v4387;
        v573 = __CFADD__(v4388, v4386);
        v4389 = v4388 + v4386;
        v4390 = v573;
        if (v4389 > 0xFFFFFFFFFFFFFFD2)
          v4390 = 1;
        if (v4390)
          v4391 = 45;
        else
          v4391 = 0;
        v4392 = v4391 + v4389;
        if (v4382)
          v4393 = 45;
        else
          v4393 = 0;
        v4394 = v4393 + v4383;
        v573 = __CFADD__(v4392, v4394);
        v4395 = v4392 + v4394;
        v4396 = v573;
        if (v4395 > 0xFFFFFFFFFFFFFFD2)
          v4396 = 1;
        if (v4396)
          v4397 = 45;
        else
          v4397 = 0;
        v4398 = v4397 + v4395;
        v4399 = 0xD122545C17BA3DF4 * v4398;
        v4400 = (v4398 * (unsigned __int128)0xD122545C17BA3DF4) >> 64;
        v573 = __CFADD__(45 * v4400, v4399);
        v4401 = 45 * v4400 + v4399;
        v4402 = (v4400 * (unsigned __int128)0x2DuLL) >> 64;
        if (v573)
          ++v4402;
        v4403 = 45 * v4402;
        v573 = __CFADD__(v4403, v4401);
        v4404 = v4403 + v4401;
        v4405 = v573;
        if (v4404 > 0xFFFFFFFFFFFFFFD2)
          v4405 = 1;
        if (v4405)
          v4406 = 45;
        else
          v4406 = 0;
        v4407 = v4406 + v4404;
        if (v4305)
          v4408 = 45;
        else
          v4408 = 0;
        v4409 = v4408 + v4304;
        v573 = __CFADD__(v4407, v4409);
        v4410 = v4407 + v4409;
        v4411 = v573;
        if (v4410 > 0xFFFFFFFFFFFFFFD2)
          v4411 = 1;
        if (v4411)
          v4412 = 45;
        else
          v4412 = 0;
        v4413 = v4412 + v4410;
        v4414 = 0x5FFFFFFFFFFFFFEFLL * v4413;
        v4415 = (v4413 * (unsigned __int128)0x5FFFFFFFFFFFFFEFuLL) >> 64;
        v4416 = (v4415 * (unsigned __int128)0x2DuLL) >> 64;
        v4415 *= 45;
        v573 = __CFADD__(v4415, v4414);
        v4417 = v4415 + v4414;
        if (v573)
          v4418 = v4416 + 1;
        else
          v4418 = v4416;
        v4419 = 45 * v4418;
        v573 = __CFADD__(v4419, v4417);
        v4420 = v4419 + v4417;
        v4421 = v573;
        if (v4420 > 0xFFFFFFFFFFFFFFD2)
          v4421 = 1;
        if (v4421)
          v4422 = 45;
        else
          v4422 = 0;
        v4423 = v4422 + v4420;
        if (v4114 >= 0xFFFFFFFFFFFFFFD3)
          v4424 = 45;
        else
          v4424 = 0;
        v4425 = v4424 + v4114;
        v573 = v4423 >= v4425;
        v4426 = v4423 - v4425;
        if (v573)
          v4427 = 0;
        else
          v4427 = -45;
        v4428 = v4426 + v4427;
        v4429 = 0x924924924924923 * v4428;
        v4430 = (v4428 * (unsigned __int128)0x924924924924923uLL) >> 64;
        v4431 = (v4430 * (unsigned __int128)0x2DuLL) >> 64;
        v4430 *= 45;
        v573 = __CFADD__(v4430, v4429);
        v4432 = v4430 + v4429;
        if (v573)
          v4433 = v4431 + 1;
        else
          v4433 = v4431;
        v4434 = 45 * v4433;
        v4435 = v4434 + v4432 > 0xFFFFFFFFFFFFFFD2;
        v573 = __CFADD__(v4434, v4432);
        v4436 = v4434 + v4432;
        if (v573)
          v4435 = 1;
        if (v3963 >= 0xFFFFFFFFFFFFFFD9)
          v4437 = 39;
        else
          v4437 = 0;
        v4438 = v4437 + v3963;
        v4439 = 0x40685A60ABFE0A21 * v4438;
        v4440 = (v4438 * (unsigned __int128)0x40685A60ABFE0A21uLL) >> 64;
        v4441 = (v4440 * (unsigned __int128)0x27uLL) >> 64;
        v4440 *= 39;
        v573 = __CFADD__(v4440, v4439);
        v4442 = v4440 + v4439;
        if (v573)
          v4443 = v4441 + 1;
        else
          v4443 = v4441;
        v4444 = 39 * v4443;
        v4445 = v4444 + v4442 > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4444, v4442);
        v4446 = v4444 + v4442;
        v4447 = v573 || v4445;
        if (v3649 >= 0xFFFFFFFFFFFFFFD9)
          v4448 = 39;
        else
          v4448 = 0;
        v4449 = v4448 + v3649;
        v4450 = 1395360 * v4449;
        v4451 = 39 * ((v4449 * (unsigned __int128)0x154AA0uLL) >> 64);
        v573 = __CFADD__(v4451, v4450);
        v4452 = v4451 + v4450;
        if (v573)
          v4453 = 39;
        else
          v4453 = 0;
        v4454 = (unint64_t)(v4453 + v4452) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4453, v4452);
        v4455 = v4453 + v4452;
        v4456 = v573 || v4454;
        if (v3688 >= 0xFFFFFFFFFFFFFFD9)
          v4457 = 39;
        else
          v4457 = 0;
        v4458 = v4457 + v3688;
        v4459 = 1116288 * v4458;
        v4460 = 39 * ((v4458 * (unsigned __int128)0x110880uLL) >> 64);
        v573 = __CFADD__(v4460, v4459);
        v4461 = v4460 + v4459;
        if (v573)
          v4462 = 39;
        else
          v4462 = 0;
        v4463 = (unint64_t)(v4462 + v4461) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4462, v4461);
        v4464 = v4462 + v4461;
        v4465 = v573 || v4463;
        if (v3722 >= 0xFFFFFFFFFFFFFFD9)
          v4466 = 39;
        else
          v4466 = 0;
        v4467 = v4466 + v3722;
        v4468 = 984960 * v4467;
        v4469 = 39 * ((v4467 * (unsigned __int128)0xF0780uLL) >> 64);
        v573 = __CFADD__(v4469, v4468);
        v4470 = v4469 + v4468;
        if (v573)
          v4471 = 39;
        else
          v4471 = 0;
        v4472 = (unint64_t)(v4471 + v4470) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4471, v4470);
        v4473 = v4471 + v4470;
        v4474 = v573 || v4472;
        if (v3779 >= 0xFFFFFFFFFFFFFFD9)
          v4475 = 39;
        else
          v4475 = 0;
        v4476 = v4475 + v3779;
        v4477 = 930240 * v4476;
        v4478 = 39 * ((v4476 * (unsigned __int128)0xE31C0uLL) >> 64);
        v573 = __CFADD__(v4478, v4477);
        v4479 = v4478 + v4477;
        if (v573)
          v4480 = 39;
        else
          v4480 = 0;
        v4481 = (unint64_t)(v4480 + v4479) > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4480, v4479);
        v4482 = v4480 + v4479;
        v4483 = v573 || v4481;
        if (v3746 >= 0xFFFFFFFFFFFFFFD9)
          v4484 = 39;
        else
          v4484 = 0;
        v4485 = v4484 + v3746;
        v4486 = 881280 * v4485;
        v4487 = 39 * ((v4485 * (unsigned __int128)0xD7280uLL) >> 64);
        v573 = __CFADD__(v4487, v4486);
        v4488 = v4487 + v4486;
        if (v573)
          v4489 = 39;
        else
          v4489 = 0;
        v573 = __CFADD__(v4489, v4488);
        v4490 = v4489 + v4488;
        v4491 = v573;
        if (v4490 > 0xFFFFFFFFFFFFFFD8)
          v4491 = 1;
        if (v4491)
          v4492 = 39;
        else
          v4492 = 0;
        v4493 = v4492 + v4490;
        if (v4483)
          v4494 = 39;
        else
          v4494 = 0;
        if (v4493 >= 0xFFFFFFFFFFFFFFD9)
          v4495 = 39;
        else
          v4495 = 0;
        v4496 = v4495 + v4493;
        v4497 = v4482 + v4496 + v4494;
        if (v4497 <= 0xFFFFFFFFFFFFFFD8 && v4497 >= v4496)
          v4499 = 0;
        else
          v4499 = 39;
        v4500 = v4499 + v4497;
        if (v4474)
          v4501 = 39;
        else
          v4501 = 0;
        v4502 = v4501 + v4473;
        v573 = __CFADD__(v4502, v4500);
        v4503 = v4502 + v4500;
        v4504 = v573;
        if (v4503 > 0xFFFFFFFFFFFFFFD8)
          v4504 = 1;
        if (v4504)
          v4505 = 39;
        else
          v4505 = 0;
        v4506 = v4505 + v4503;
        if (v4465)
          v4507 = 39;
        else
          v4507 = 0;
        v4508 = v4507 + v4464;
        v573 = __CFADD__(v4508, v4506);
        v4509 = v4508 + v4506;
        v4510 = v573;
        if (v4509 > 0xFFFFFFFFFFFFFFD8)
          v4510 = 1;
        if (v4456)
          v4511 = 39;
        else
          v4511 = 0;
        if (v4510)
          v4512 = 39;
        else
          v4512 = 0;
        v4513 = v4511 + v4455;
        v4514 = v4512 + v4509;
        v4515 = v4513 + v4514 > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4513, v4514);
        v4516 = v4513 + v4514;
        if (v573 || v4515)
          v4518 = 39;
        else
          v4518 = 0;
        v4519 = v4518 + v4516;
        v4520 = 0x40685A60ABFE0A21 * v4519;
        v4521 = (v4519 * (unsigned __int128)0x40685A60ABFE0A21uLL) >> 64;
        v4522 = (v4521 * (unsigned __int128)0x27uLL) >> 64;
        v4521 *= 39;
        v573 = __CFADD__(v4521, v4520);
        v4523 = v4521 + v4520;
        if (v573)
          v4524 = v4522 + 1;
        else
          v4524 = v4522;
        v4525 = 39 * v4524;
        v4526 = v4525 + v4523 > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4525, v4523);
        v4527 = v4525 + v4523;
        v4528 = STACK[0x3C68] * STACK[0x1928];
        v4529 = (STACK[0x3C68] * (unsigned __int128)STACK[0x1928]) >> 64;
        v4530 = (v4529 * (unsigned __int128)0x27uLL) >> 64;
        v4531 = 39 * v4529;
        if (v573)
          v4526 = 1;
        v573 = __CFADD__(v4531, v4528);
        v4532 = v4531 + v4528;
        if (v573)
          v4533 = v4530 + 1;
        else
          v4533 = v4530;
        v4534 = 39 * v4533;
        v573 = __CFADD__(v4534, v4532);
        v4535 = v4534 + v4532;
        v4536 = v573;
        if (v4535 > 0xFFFFFFFFFFFFFFD8)
          v4536 = 1;
        if (v4536)
          v4537 = 39;
        else
          v4537 = 0;
        v4538 = v4537 + v4535;
        if (v4526)
          v4539 = 39;
        else
          v4539 = 0;
        v4540 = v4539 + v4527;
        v4541 = v4538 + v4540 > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4538, v4540);
        v4542 = v4538 + v4540;
        if (v573 || v4541)
          v4544 = 39;
        else
          v4544 = 0;
        v4545 = v4544 + v4542;
        v4546 = 0x68180B91CEB03F68 * v4545;
        v4547 = (v4545 * (unsigned __int128)0x68180B91CEB03F68uLL) >> 64;
        v4548 = (v4547 * (unsigned __int128)0x27uLL) >> 64;
        v4547 *= 39;
        v573 = __CFADD__(v4547, v4546);
        v4549 = v4547 + v4546;
        if (v573)
          v4550 = v4548 + 1;
        else
          v4550 = v4548;
        v4551 = 39 * v4550;
        v573 = __CFADD__(v4551, v4549);
        v4552 = v4551 + v4549;
        v4553 = v573;
        if (v4552 > 0xFFFFFFFFFFFFFFD8)
          v4553 = 1;
        if (v4553)
          v4554 = 39;
        else
          v4554 = 0;
        v4555 = v4554 + v4552;
        if (v4447)
          v4556 = 39;
        else
          v4556 = 0;
        v4557 = v4556 + v4446;
        v573 = __CFADD__(v4555, v4557);
        v4558 = v4555 + v4557;
        v4559 = v573;
        if (v4558 > 0xFFFFFFFFFFFFFFD8)
          v4559 = 1;
        if (v4559)
          v4560 = 39;
        else
          v4560 = 0;
        v4561 = v4560 + v4558;
        v4562 = 0x36DB6DB6DB6DB6D3 * v4561;
        v4563 = (v4561 * (unsigned __int128)0x36DB6DB6DB6DB6D3uLL) >> 64;
        v4564 = (v4563 * (unsigned __int128)0x27uLL) >> 64;
        v4563 *= 39;
        v573 = __CFADD__(v4563, v4562);
        v4565 = v4563 + v4562;
        if (v573)
          v4566 = v4564 + 1;
        else
          v4566 = v4564;
        v4567 = 39 * v4566;
        v4568 = v4567 + v4565 > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4567, v4565);
        v4569 = v4567 + v4565;
        if (v573 || v4568)
          v4571 = 39;
        else
          v4571 = 0;
        v4572 = v4571 + v4569;
        if (v4114 >= 0xFFFFFFFFFFFFFFD9)
          v4573 = 39;
        else
          v4573 = 0;
        v4574 = v4573 + v4114;
        v573 = v4572 >= v4574;
        v4575 = v4572 - v4574;
        if (v573)
          v4576 = 0;
        else
          v4576 = -39;
        v4577 = v4575 + v4576;
        v4578 = 0xBA2E8BA2E8BA2E7 * v4577;
        v4579 = (v4577 * (unsigned __int128)0xBA2E8BA2E8BA2E7uLL) >> 64;
        v4580 = (v4579 * (unsigned __int128)0x27uLL) >> 64;
        v4579 *= 39;
        v573 = __CFADD__(v4579, v4578);
        v4581 = v4579 + v4578;
        if (v573)
          v4582 = v4580 + 1;
        else
          v4582 = v4580;
        v4583 = 39 * v4582;
        v4584 = v4583 + v4581 > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4583, v4581);
        v4585 = v4583 + v4581;
        v4586 = v573 || v4584;
        if (v4264 >= 0xFFFFFFFFFFFFFFD9)
          v4587 = 39;
        else
          v4587 = 0;
        if (v4586)
          v4588 = 39;
        else
          v4588 = 0;
        v4589 = v4588 + v4585;
        v573 = v4589 >= v4587 + v4264;
        v4590 = v4589 - (v4587 + v4264);
        if (v573)
          v4591 = 0;
        else
          v4591 = -39;
        v4592 = v4590 + v4591;
        v4593 = 0xD555555555555535 * v4592;
        v4594 = (v4592 * (unsigned __int128)0xD555555555555535) >> 64;
        v4595 = (v4594 * (unsigned __int128)0x27uLL) >> 64;
        v4594 *= 39;
        v573 = __CFADD__(v4594, v4593);
        v4596 = v4594 + v4593;
        if (v573)
          v4597 = v4595 + 1;
        else
          v4597 = v4595;
        v4598 = 39 * v4597;
        v4599 = v4598 + v4596 > 0xFFFFFFFFFFFFFFD8;
        v573 = __CFADD__(v4598, v4596);
        v4600 = v4598 + v4596;
        if (v573 || v4599)
          v4602 = 39;
        else
          v4602 = 0;
        v4603 = v4602 + v4600;
        if (v4264 >= 0xFFFFFFFFFFFFFFD3)
          v4604 = 45;
        else
          v4604 = 0;
        if (v4435)
          v4605 = 45;
        else
          v4605 = 0;
        v4606 = v4605 + v4436;
        v4607 = v4604 + v4264;
        v573 = v4606 >= v4607;
        v4608 = v4606 - v4607;
        if (v573)
          v4609 = 0;
        else
          v4609 = -45;
        v4610 = v4608 + v4609;
        v4611 = 0x6AAAAAAAAAAAAA98 * v4610;
        v4612 = (v4610 * (unsigned __int128)0x6AAAAAAAAAAAAA98uLL) >> 64;
        v4613 = (v4612 * (unsigned __int128)0x2DuLL) >> 64;
        v4614 = 45 * v4612;
        if (v4603 >= 0xFFFFFFFFFFFFFFD3)
          v4615 = 45;
        else
          v4615 = 0;
        v573 = __CFADD__(v4614, v4611);
        v4616 = v4614 + v4611;
        if (v573)
          v4617 = v4613 + 1;
        else
          v4617 = v4613;
        v4618 = 45 * v4617;
        v573 = __CFADD__(v4618, v4616);
        v4619 = v4618 + v4616;
        v4620 = v573;
        v4621 = v4615 + v4603;
        if (v4619 > 0xFFFFFFFFFFFFFFD2)
          v4620 = 1;
        if (v4620)
          v4622 = 45;
        else
          v4622 = 0;
        v4623 = v4622 + v4619;
        v573 = v4623 >= v4621;
        v4624 = v4623 - v4621;
        if (v573)
          v4625 = 0;
        else
          v4625 = -45;
        v4626 = v4624 + v4625;
        v4627 = 0xD555555555555530 * v4626;
        v4628 = (v4626 * (unsigned __int128)0xD555555555555530) >> 64;
        v4629 = (v4628 * (unsigned __int128)0x2DuLL) >> 64;
        v4628 *= 45;
        v573 = __CFADD__(v4628, v4627);
        v4630 = v4628 + v4627;
        if (v573)
          v4631 = v4629 + 1;
        else
          v4631 = v4629;
        v4632 = 45 * v4631;
        v573 = __CFADD__(v4632, v4630);
        v4633 = v4632 + v4630;
        v4634 = v573;
        if (v4633 > 0xFFFFFFFFFFFFFFD2)
          v4634 = 1;
        if (v4634)
          v4635 = 45;
        else
          v4635 = 0;
        v4636 = v4635 + v4633;
        if (v4603 >= 0xFFFFFFFFFFFFFFD1)
          v4637 = 47;
        else
          v4637 = 0;
        v4638 = v4637 + v4603;
        if (v4294)
          v4639 = 47;
        else
          v4639 = 0;
        v4640 = v4639 + v4293;
        v573 = v4640 >= v4638;
        v4641 = v4640 - v4638;
        if (v573)
          v4642 = 0;
        else
          v4642 = -47;
        v4643 = v4641 + v4642;
        v4644 = 0xDFFFFFFFFFFFFFD7 * v4643;
        v4645 = (v4643 * (unsigned __int128)0xDFFFFFFFFFFFFFD7) >> 64;
        v4646 = (v4645 * (unsigned __int128)0x2FuLL) >> 64;
        v4645 *= 47;
        v573 = __CFADD__(v4645, v4644);
        v4647 = v4645 + v4644;
        if (v573)
          v4648 = v4646 + 1;
        else
          v4648 = v4646;
        if (v4636 >= 0xFFFFFFFFFFFFFFD1)
          v4649 = 47;
        else
          v4649 = 0;
        v4650 = 47 * v4648;
        v573 = __CFADD__(v4650, v4647);
        v4651 = v4650 + v4647;
        v4652 = v573;
        v4653 = v4649 + v4636;
        if (v4651 > 0xFFFFFFFFFFFFFFD0)
          v4652 = 1;
        if (v4652)
          v4654 = 47;
        else
          v4654 = 0;
        v4655 = v4654 + v4651;
        v573 = v4655 >= v4653;
        v4656 = v4655 - v4653;
        if (v573)
          v4657 = 0;
        else
          v4657 = -47;
        v4658 = v4656 + v4657;
        v4659 = 0x7FFFFFFFFFFFFFE9 * v4658;
        v4660 = (v4658 * (unsigned __int128)0x7FFFFFFFFFFFFFE9uLL) >> 64;
        v4661 = (v4660 * (unsigned __int128)0x2FuLL) >> 64;
        v4660 *= 47;
        v573 = __CFADD__(v4660, v4659);
        v4662 = v4660 + v4659;
        if (v573)
          v4663 = v4661 + 1;
        else
          v4663 = v4661;
        v4664 = 47 * v4663;
        v4665 = v4664 + v4662 > 0xFFFFFFFFFFFFFFD0;
        v573 = __CFADD__(v4664, v4662);
        v4666 = v4664 + v4662;
        if (v573 || v4665)
          v4668 = 47;
        else
          v4668 = 0;
        v4669 = v4668 + v4666;
        if (v4669 >= 0xFFFFFFFFFFFFFFF1)
          v4670 = 15;
        else
          v4670 = 0;
        v4671 = v4670 + v4669;
        v4672 = -45 * v4671;
        v4673 = (v4671 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64;
        v4674 = 15 * v4673;
        v4675 = (v4673 * (unsigned __int128)0xFuLL) >> 64;
        v573 = __CFADD__(v4674, v4672);
        v4676 = v4674 + v4672;
        if (v573)
          ++v4675;
        v4677 = 15 * v4675;
        v573 = __CFADD__(v4677, v4676);
        v4678 = v4677 + v4676;
        v4679 = v573;
        if (v4678 > 0xFFFFFFFFFFFFFFF0)
          v4679 = 1;
        if (v4636 >= 0xFFFFFFFFFFFFFFF1)
          v4680 = 15;
        else
          v4680 = 0;
        v4681 = v4680 + v4636;
        if (v4679)
          v4682 = 15;
        else
          v4682 = 0;
        v4683 = v4682 + v4678;
        v4684 = v4681 + v4683 > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v4681, v4683);
        v4685 = v4681 + v4683;
        if (v573)
          v4684 = 1;
        if (v4684)
          v4686 = 15;
        else
          v4686 = 0;
        v4687 = v4686 + v4685;
        v4688 = -39 * v4687;
        v4689 = (v4687 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64;
        v4690 = 15 * v4689;
        v4691 = (v4689 * (unsigned __int128)0xFuLL) >> 64;
        v573 = __CFADD__(v4690, v4688);
        v4692 = v4690 + v4688;
        if (v573)
          ++v4691;
        v4693 = 15 * v4691;
        v4694 = (unint64_t)(v4693 + v4692) > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v4693, v4692);
        v4695 = v4693 + v4692;
        v4696 = v573 || v4694;
        if (v4603 >= 0xFFFFFFFFFFFFFFF1)
          v4697 = 15;
        else
          v4697 = 0;
        v4698 = v4697 + v4603;
        if (v4696)
          v4699 = 15;
        else
          v4699 = 0;
        v4700 = v4699 + v4695;
        v573 = __CFADD__(v4698, v4700);
        v4701 = v4698 + v4700;
        v4702 = v573;
        if (v4701 > 0xFFFFFFFFFFFFFFF0)
          v4702 = 1;
        if (v4702)
          v4703 = 15;
        else
          v4703 = 0;
        v4704 = v4703 + v4701;
        v4705 = -33 * v4704;
        v4706 = (v4704 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64;
        v4707 = 15 * v4706;
        v4708 = (v4706 * (unsigned __int128)0xFuLL) >> 64;
        v573 = __CFADD__(v4707, v4705);
        v4709 = v4707 + v4705;
        if (v573)
          ++v4708;
        v4710 = 15 * v4708;
        v4711 = (unint64_t)(v4710 + v4709) > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v4710, v4709);
        v4712 = v4710 + v4709;
        v4713 = v573 || v4711;
        if (v4264 >= 0xFFFFFFFFFFFFFFF1)
          v4714 = 15;
        else
          v4714 = 0;
        v4715 = v4714 + v4264;
        if (v4713)
          v4716 = 15;
        else
          v4716 = 0;
        v4717 = v4716 + v4712;
        v4718 = v4715 + v4717 > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v4715, v4717);
        v4719 = v4715 + v4717;
        if (v573)
          v4718 = 1;
        if (v4718)
          v4720 = 15;
        else
          v4720 = 0;
        v4721 = v4720 + v4719;
        v4722 = -17 * v4721;
        v4723 = (v4721 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64;
        v4724 = 15 * v4723;
        v4725 = (v4723 * (unsigned __int128)0xFuLL) >> 64;
        v573 = __CFADD__(v4724, v4722);
        v4726 = v4724 + v4722;
        if (v573)
          ++v4725;
        v4727 = 15 * v4725;
        v573 = __CFADD__(v4727, v4726);
        v4728 = v4727 + v4726;
        v4729 = v573;
        if (v4728 > 0xFFFFFFFFFFFFFFF0)
          v4729 = 1;
        if (v4114 >= 0xFFFFFFFFFFFFFFF1)
          v4730 = 15;
        else
          v4730 = 0;
        if (v4729)
          v4731 = 15;
        else
          v4731 = 0;
        v4732 = v4731 + v4728;
        v4733 = v4730 + v4114;
        v4734 = v4730 + v4114 + v4732 > 0xFFFFFFFFFFFFFFF0;
        v573 = __CFADD__(v4733, v4732);
        v4735 = v4733 + v4732;
        v4736 = v573 || v4734;
        if (v4669 >= 0xFFFFFFFFFFFFFFF7)
          v4737 = 9;
        else
          v4737 = 0;
        v4738 = v4737 + v4669;
        v4739 = -45 * v4738;
        v4740 = (((v4738 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64) * 9) >> 64;
        v4741 = (__PAIR128__(8, -45) * v4738) >> 64;
        v573 = __CFADD__(v4741, v4739);
        v4742 = v4741 + v4739;
        if (v573)
          v4743 = v4740 + 1;
        else
          v4743 = v4740;
        v4744 = 9 * v4743;
        v4745 = (unint64_t)(v4744 + v4742) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v4744, v4742);
        v4746 = v4744 + v4742;
        v4747 = v573 || v4745;
        if (v4636 >= 0xFFFFFFFFFFFFFFF7)
          v4748 = 9;
        else
          v4748 = 0;
        if (v4747)
          v4749 = 9;
        else
          v4749 = 0;
        v4750 = v4748 + v4636;
        v4751 = v4749 + v4746;
        v573 = __CFADD__(v4750, v4751);
        v4752 = v4750 + v4751;
        v4753 = v573;
        if (v4752 > 0xFFFFFFFFFFFFFFF6)
          v4753 = 1;
        if (v4753)
          v4754 = 9;
        else
          v4754 = 0;
        v4755 = v4754 + v4752;
        v4756 = -39 * v4755;
        v4757 = (((v4755 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64) * 9) >> 64;
        v4758 = (__PAIR128__(8, -39) * v4755) >> 64;
        v573 = __CFADD__(v4758, v4756);
        v4759 = v4758 + v4756;
        if (v573)
          v4760 = v4757 + 1;
        else
          v4760 = v4757;
        v4761 = 9 * v4760;
        v4762 = (unint64_t)(v4761 + v4759) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v4761, v4759);
        v4763 = v4761 + v4759;
        v4764 = v573 || v4762;
        if (v4603 >= 0xFFFFFFFFFFFFFFF7)
          v4765 = 9;
        else
          v4765 = 0;
        v4766 = v4765 + v4603;
        if (v4764)
          v4767 = 9;
        else
          v4767 = 0;
        v4768 = v4767 + v4763;
        v573 = __CFADD__(v4766, v4768);
        v4769 = v4766 + v4768;
        v4770 = v573;
        if (v4769 > 0xFFFFFFFFFFFFFFF6)
          v4770 = 1;
        if (v4770)
          v4771 = 9;
        else
          v4771 = 0;
        v4772 = v4771 + v4769;
        v4773 = 33 * v4772;
        v4774 = (((v4772 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64) * 9) >> 64;
        v4775 = (__PAIR128__(8, -33) * v4772) >> 64;
        v4776 = -v4773;
        v573 = __CFADD__(v4775, v4776);
        v4777 = v4775 + v4776;
        if (v573)
          v4778 = v4774 + 1;
        else
          v4778 = v4774;
        v4779 = 9 * v4778;
        v4780 = (unint64_t)(v4779 + v4777) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v4779, v4777);
        v4781 = v4779 + v4777;
        v4782 = v573 || v4780;
        if (v4264 >= 0xFFFFFFFFFFFFFFF7)
          v4783 = 9;
        else
          v4783 = 0;
        v4784 = v4783 + v4264;
        if (v4782)
          v4785 = 9;
        else
          v4785 = 0;
        v4786 = v4785 + v4781;
        v4787 = v4784 + v4786 > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v4784, v4786);
        v4788 = v4784 + v4786;
        if (v573)
          v4787 = 1;
        if (v4787)
          v4789 = 9;
        else
          v4789 = 0;
        v4790 = v4789 + v4788;
        v4791 = 17 * v4790;
        v4792 = (((v4790 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64) * 9) >> 64;
        v4793 = (__PAIR128__(8, -17) * v4790) >> 64;
        v4794 = -v4791;
        v573 = __CFADD__(v4793, v4794);
        v4795 = v4793 + v4794;
        if (v573)
          v4796 = v4792 + 1;
        else
          v4796 = v4792;
        v4797 = 9 * v4796;
        v4798 = (unint64_t)(v4797 + v4795) > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v4797, v4795);
        v4799 = v4797 + v4795;
        if (v573 || v4798)
          v4801 = 9;
        else
          v4801 = 0;
        if (v4114 >= 0xFFFFFFFFFFFFFFF7)
          v4802 = 9;
        else
          v4802 = 0;
        v4803 = v4801 + v4799;
        v4804 = v4802 + v4114;
        v4805 = v4802 + v4114 + v4803 > 0xFFFFFFFFFFFFFFF6;
        v573 = __CFADD__(v4804, v4803);
        v4806 = v4804 + v4803;
        v4807 = v573 || v4805;
        if (v4669 >= 0xFFFFFFFFFFFFFFFBLL)
          v4808 = 5;
        else
          v4808 = 0;
        v4809 = v4808 + v4669;
        v4810 = -45 * v4809;
        v4811 = (((v4809 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64) * 5) >> 64;
        v4812 = (__PAIR128__(4, -45) * v4809) >> 64;
        v573 = __CFADD__(v4812, v4810);
        v4813 = v4812 + v4810;
        if (v573)
          v4814 = v4811 + 1;
        else
          v4814 = v4811;
        v4815 = 5 * v4814;
        v4816 = (unint64_t)(v4815 + v4813) > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v4815, v4813);
        v4817 = v4815 + v4813;
        if (v573 || v4816)
          v4819 = 5;
        else
          v4819 = 0;
        if (v4636 >= 0xFFFFFFFFFFFFFFFBLL)
          v4820 = 5;
        else
          v4820 = 0;
        v4821 = v4819 + v4817;
        v573 = __CFADD__(v4820 + v4636, v4821);
        v4822 = v4820 + v4636 + v4821;
        v4823 = v573;
        if (v4822 > 0xFFFFFFFFFFFFFFFALL)
          v4823 = 1;
        if (v4823)
          v4824 = 5;
        else
          v4824 = 0;
        v4825 = v4824 + v4822;
        v4826 = -39 * v4825;
        v4827 = (((v4825 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64) * 5) >> 64;
        v4828 = (__PAIR128__(4, -39) * v4825) >> 64;
        v573 = __CFADD__(v4828, v4826);
        v4829 = v4828 + v4826;
        if (v573)
          v4830 = v4827 + 1;
        else
          v4830 = v4827;
        v4831 = 5 * v4830;
        v4832 = (unint64_t)(v4831 + v4829) > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v4831, v4829);
        v4833 = v4831 + v4829;
        v4834 = v573 || v4832;
        if (v4603 >= 0xFFFFFFFFFFFFFFFBLL)
          v4835 = 5;
        else
          v4835 = 0;
        v4836 = v4835 + v4603;
        if (v4834)
          v4837 = 5;
        else
          v4837 = 0;
        v4838 = v4837 + v4833;
        v573 = __CFADD__(v4836, v4838);
        v4839 = v4836 + v4838;
        v4840 = v573;
        if (v4839 > 0xFFFFFFFFFFFFFFFALL)
          v4840 = 1;
        if (v4264 >= 0xFFFFFFFFFFFFFFFBLL)
          v4841 = 5;
        else
          v4841 = 0;
        if (v4840)
          v4842 = 5;
        else
          v4842 = 0;
        v4843 = v4842 + v4839;
        v4844 = 33 * v4843;
        v4845 = (((v4843 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64) * 5) >> 64;
        v4846 = (__PAIR128__(4, -33) * v4843) >> 64;
        v4847 = v4841 + v4264;
        v4848 = -v4844;
        v573 = __CFADD__(v4846, v4848);
        v4849 = v4846 + v4848;
        if (v573)
          v4850 = v4845 + 1;
        else
          v4850 = v4845;
        v4851 = 5 * v4850;
        v573 = __CFADD__(v4851, v4849);
        v4852 = v4851 + v4849;
        v4853 = v573;
        if (v4852 > 0xFFFFFFFFFFFFFFFALL)
          v4853 = 1;
        if (v4853)
          v4854 = 5;
        else
          v4854 = 0;
        v4855 = v4854 + v4852;
        v4856 = v4847 + v4855 > 0xFFFFFFFFFFFFFFFALL;
        v573 = __CFADD__(v4847, v4855);
        v4857 = v4847 + v4855;
        if (v573)
          v4856 = 1;
        if (v4669 >= 0xFFFFFFFFFFFFFFFDLL)
          v4858 = 3;
        else
          v4858 = 0;
        v4859 = v4858 + v4669;
        v4860 = -45 * v4859;
        v4861 = (((v4859 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64) * 3) >> 64;
        v4862 = (__PAIR128__(2, -45) * v4859) >> 64;
        if (v4636 >= 0xFFFFFFFFFFFFFFFDLL)
          v4863 = 3;
        else
          v4863 = 0;
        v573 = __CFADD__(v4862, v4860);
        v4864 = v4862 + v4860;
        if (v573)
          v4865 = v4861 + 1;
        else
          v4865 = v4861;
        v4866 = 3 * v4865;
        v573 = __CFADD__(v4866, v4864);
        v4867 = v4866 + v4864;
        v4868 = v573;
        v4869 = v4863 + v4636;
        if (v4867 > 0xFFFFFFFFFFFFFFFCLL)
          v4868 = 1;
        if (v4868)
          v4870 = 3;
        else
          v4870 = 0;
        v4871 = v4870 + v4867;
        v4872 = v4869 + v4871 > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v4869, v4871);
        v4873 = v4869 + v4871;
        if (v573)
          v4872 = 1;
        if (v4872)
          v4874 = 3;
        else
          v4874 = 0;
        v4875 = v4874 + v4873;
        v4876 = -39 * v4875;
        v4877 = (((v4875 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64) * 3) >> 64;
        v4878 = (__PAIR128__(2, -39) * v4875) >> 64;
        if (v4603 >= 0xFFFFFFFFFFFFFFFDLL)
          v4879 = 3;
        else
          v4879 = 0;
        v573 = __CFADD__(v4878, v4876);
        v4880 = v4878 + v4876;
        if (v573)
          v4881 = v4877 + 1;
        else
          v4881 = v4877;
        v4882 = 3 * v4881;
        v573 = __CFADD__(v4882, v4880);
        v4883 = v4882 + v4880;
        v4884 = v573;
        if (v4883 > 0xFFFFFFFFFFFFFFFCLL)
          v4884 = 1;
        if (v4884)
          v4885 = 3;
        else
          v4885 = 0;
        v4886 = v4885 + v4883;
        v4887 = v4879 + v4603 + v4886 > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v4879 + v4603, v4886);
        v4888 = v4879 + v4603 + v4886;
        if (v573)
          v4887 = 1;
        if (v4887)
          v4889 = 3;
        else
          v4889 = 0;
        v4890 = v4889 + v4888;
        v4891 = 33 * v4890;
        v4892 = (((v4890 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64) * 3) >> 64;
        v4893 = (__PAIR128__(2, -33) * v4890) >> 64;
        v4894 = -v4891;
        v573 = __CFADD__(v4893, v4894);
        v4895 = v4893 + v4894;
        if (v573)
          v4896 = v4892 + 1;
        else
          v4896 = v4892;
        v4897 = 3 * v4896;
        v4898 = (unint64_t)(v4897 + v4895) > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v4897, v4895);
        v4899 = v4897 + v4895;
        v4900 = v573 || v4898;
        if (v4264 >= 0xFFFFFFFFFFFFFFFDLL)
          v4901 = 3;
        else
          v4901 = 0;
        v4902 = v4901 + v4264;
        if (v4900)
          v4903 = 3;
        else
          v4903 = 0;
        v4904 = v4903 + v4899;
        v4905 = v4902 + v4904 > 0xFFFFFFFFFFFFFFFCLL;
        v573 = __CFADD__(v4902, v4904);
        v4906 = v4902 + v4904;
        v4907 = v573 || v4905;
        if (v4669 == -1)
          v4908 = 0;
        else
          v4908 = v4669;
        v4909 = -45 * v4908;
        v4910 = (v4908 * (unsigned __int128)0xFFFFFFFFFFFFFFD3) >> 64;
        v4911 = __CFADD__(__CFADD__(v4910, v4909), v4910 + v4909);
        v4912 = __CFADD__(v4910, v4909) + v4910 + v4909 == -1 || v4911;
        v4913 = v4910 + v4909 + __CFADD__(v4910, v4909) + v4912;
        if (v4636 == -1)
          v4914 = 0;
        else
          v4914 = v4636;
        v4915 = v4914 + v4913 == -1;
        v573 = __CFADD__(v4914, v4913);
        v4916 = v4914 + v4913;
        v4917 = v573 || v4915;
        v4918 = v4917 + v4916;
        v4919 = -39 * v4918;
        v4920 = (v4918 * (unsigned __int128)0xFFFFFFFFFFFFFFD9) >> 64;
        v4921 = __CFADD__(__CFADD__(v4920, v4919), v4920 + v4919);
        v4922 = __CFADD__(v4920, v4919) + v4920 + v4919 == -1 || v4921;
        v4923 = v4920 + v4919 + __CFADD__(v4920, v4919) + v4922;
        if (v4603 == -1)
          v4924 = 0;
        else
          v4924 = v4603;
        v573 = __CFADD__(v4924, v4923);
        v4925 = v4924 + v4923;
        LODWORD(v4926) = v573;
        if (v4925 == -1)
          v4926 = 1;
        else
          v4926 = v4926;
        v4927 = v4926 + v4925;
        v4928 = 33 * v4927;
        v4929 = (v4927 * (unsigned __int128)0xFFFFFFFFFFFFFFDFLL) >> 64;
        v4930 = -v4928;
        v4931 = 0x6DB42A435F558B3ELL;
        if (!__CFADD__(__CFADD__(v4929, v4930), v4929 + v4930))
          v4931 = 0;
        v4932 = v4929
              + v4930
              + __CFADD__(v4929, v4930)
              + (unint64_t)((v4931 | (__CFADD__(v4929, v4930) + v4929 + v4930 == -1)) != 0);
        if (v4264 == -1)
          v4933 = 0;
        else
          v4933 = v4264;
        v4934 = v4933 + v4932 == -1;
        v573 = __CFADD__(v4933, v4932);
        v4935 = v4933 + v4932;
        v4936 = v573 || v4934;
        v4937 = v4936 + v4935;
        v4938 = 17 * v4937;
        v4939 = (v4937 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64;
        v4940 = -v4938;
        v4941 = __CFADD__(__CFADD__(v4939, v4940), v4939 + v4940);
        v4942 = __CFADD__(v4939, v4940) + v4939 + v4940 == -1 || v4941;
        v4943 = v4939 + v4940 + __CFADD__(v4939, v4940) + v4942;
        if (v4114 == -1)
          v4944 = 0;
        else
          v4944 = v4114;
        v4945 = v4944 + v4943 == -1;
        v573 = __CFADD__(v4944, v4943);
        v4946 = v4944 + v4943;
        v4947 = v573 || v4945;
        v4948 = v4947 + v4946;
        if (v4907)
          v4949 = 3;
        else
          v4949 = 0;
        v4950 = v4949 + v4906;
        v4951 = (v4950 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64;
        v573 = __CFADD__(3 * v4951, -17 * v4950);
        v4952 = 3 * v4951 - 17 * v4950;
        v4953 = LODWORD(STACK[0x3710]) - 9523;
        v4954 = (v4951 * (unsigned __int128)3uLL) >> 64;
        if (v573)
          ++v4954;
        v4955 = 3 * v4954;
        v573 = __CFADD__(v4955, v4952);
        v4956 = v4955 + v4952;
        v4957 = v573;
        if (v4956 > 0xFFFFFFFFFFFFFFFCLL)
          v4957 = 1;
        if (v4957)
          v4958 = 3;
        else
          v4958 = 0;
        v4959 = v4958 + v4956;
        if (v4114 >= 0xFFFFFFFFFFFFFFFDLL)
          v4960 = 3;
        else
          v4960 = 0;
        v4961 = v4960 + v4114;
        v573 = __CFADD__(v4961, v4959);
        v4962 = v4961 + v4959;
        v4963 = v573;
        if (v4962 > 0xFFFFFFFFFFFFFFFCLL)
          v4963 = 1;
        if (v4963)
          v4964 = 3;
        else
          v4964 = 0;
        v4965 = v4964 + v4962;
        if (v4856)
          v4966 = 5;
        else
          v4966 = 0;
        v4967 = v4966 + v4857;
        v4968 = 17 * v4967;
        v4969 = (((v4967 * (unsigned __int128)0xFFFFFFFFFFFFFFEFLL) >> 64) * 5) >> 64;
        v4970 = (__PAIR128__(4, -17) * v4967) >> 64;
        v4971 = -v4968;
        v573 = __CFADD__(v4970, v4971);
        v4972 = v4970 + v4971;
        if (v573)
          v4973 = v4969 + 1;
        else
          v4973 = v4969;
        v4974 = 5 * v4973;
        v573 = __CFADD__(v4974, v4972);
        v4975 = v4974 + v4972;
        v4976 = v573;
        if (v4114 >= 0xFFFFFFFFFFFFFFFBLL)
          v4977 = 5;
        else
          v4977 = 0;
        v4978 = v4977 + v4114;
        if (v4975 > 0xFFFFFFFFFFFFFFFALL)
          v4976 = 1;
        if (v4976)
          v4979 = 5;
        else
          v4979 = 0;
        v4980 = v4979 + v4975;
        v573 = __CFADD__(v4978, v4980);
        v4981 = v4978 + v4980;
        v4982 = v573;
        if (v4981 > 0xFFFFFFFFFFFFFFFALL)
          v4982 = 1;
        if (v4982)
          v4983 = 5;
        else
          v4983 = 0;
        v4984 = v4983 + v4981;
        if (v4807)
          v4985 = 9;
        else
          v4985 = 0;
        v4986 = v4985 + v4806;
        v573 = v4636 >= 0x888941CDB1E411EELL;
        LODWORD(v4636) = v4636 > 0x888941CDB1E411EELL;
        LODWORD(v4987) = !v573;
        v210 = v4264 > 0x71527BE5745B8317;
        v4988 = v4264 < 0x71527BE5745B8317;
        v4989 = v210;
        v4990 = v4669 == 0;
        v4991 = v4669 != 0;
        if (v4990)
          v4636 = v4636;
        else
          v4636 = 0;
        if (v4990)
          v4987 = v4987;
        else
          v4987 = 0;
        v210 = v4603 > 0x1104BC203A2C6C1ELL;
        LODWORD(v4603) = v4603 < 0x1104BC203A2C6C1ELL;
        v4992 = v4991 - v4987 + v4636;
        LODWORD(v4993) = v210;
        if (v4992)
          v4603 = 0;
        else
          v4603 = v4603;
        if (v4992)
          v4993 = 0;
        else
          v4993 = v4993;
        v210 = v4114 > 0xBCE0B40AAD3903CALL;
        LODWORD(v4114) = v4114 < 0xBCE0B40AAD3903CALL;
        v4994 = v4992 - v4603 + v4993;
        LODWORD(v4995) = v210;
        if (v4994)
          v4996 = 0;
        else
          v4996 = v4988;
        if (v4994)
          v4997 = 0;
        else
          v4997 = v4989;
        v4998 = v4994 - v4996 + v4997;
        if (v4736)
          v4999 = 15;
        else
          v4999 = 0;
        if (v4998)
          v4114 = 0;
        else
          v4114 = v4114;
        if (v4998)
          v4995 = 0;
        else
          v4995 = v4995;
        v5000 = v4998 - v4114 + v4995 == -1;
        v5001 = 0x29DEAB8CCE63CD56;
        if (v5000)
          v5001 = 0;
        v5002 = 0xB49BF27CED4A1D5ELL;
        if (v5000)
          v5002 = 0;
        v5003 = v4999 + v4735;
        v5004 = v4984 + v5001;
        v5005 = v4965 + v5002;
        v5006 = 0xE57DAA7F4F9C214;
        if (v5000)
          v5006 = 0;
        v5007 = v4948 + v5006;
        v5008 = 0x1A6EA717DFE5D51DLL;
        if (v5000)
          v5008 = 0;
        v5009 = 0x9057E5706EFB6C51;
        if (v5000)
          v5009 = 0;
        v5010 = -3;
        if (v5005 <= v4965)
          v5010 = 0;
        STACK[0x1088] = (__PAIR128__(v5007, v4948) - v5007) >> 64;
        v5011 = v4986 + v5008;
        v5012 = v5003 + v5009;
        STACK[0x19E0] = v5010 + v5005;
        v5013 = -5;
        if (v4984 >= v5004)
          v5013 = 0;
        STACK[0x1080] = v5013 + v5004;
        v5014 = -9;
        if (v4986 >= v5011)
          v5014 = 0;
        STACK[0x19E8] = v5014 + v5011;
        v5015 = -15;
        if (v5003 >= v5012)
          v5015 = 0;
        STACK[0x1820] = v5015 + v5012;
        v5016 = (uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * v4953) - 8);
        STACK[0x3270] = 113;
        STACK[0x2710] = STACK[0x3BB8];
        STACK[0x3128] = STACK[0x3940];
        STACK[0x3318] = STACK[0x3980];
        STACK[0x3240] = STACK[0x27A0];
        STACK[0x2708] = STACK[0x3828];
        STACK[0x2700] = STACK[0x3800];
        STACK[0x3310] = STACK[0xCC0];
        STACK[0x3348] = STACK[0x3948];
        STACK[0x26F8] = STACK[0x3BA0];
        v5017 = STACK[0x27F0];
        STACK[0x32E8] = STACK[0xCE0];
        STACK[0x32F8] = STACK[0x39B0];
        STACK[0x3308] = STACK[0x27B8];
        STACK[0x3300] = STACK[0x27C0];
        STACK[0x26F0] = STACK[0x37E8];
        STACK[0x3360] = STACK[0x27D0];
        STACK[0x3BB8] = STACK[0x27D8];
        STACK[0x3C58] = STACK[0x27E0];
        STACK[0x3BA0] = STACK[0x27E8];
        STACK[0x3330] = STACK[0xC90];
        STACK[0x3288] = STACK[0xCC8];
        STACK[0x3328] = STACK[0xCA8];
        STACK[0x3340] = STACK[0x3958];
        STACK[0x32F0] = STACK[0x3960];
        STACK[0x3338] = STACK[0x3978];
        STACK[0x3268] = STACK[0xCA0];
        STACK[0x3260] = STACK[0xCB8];
        STACK[0x32E0] = STACK[0x3970];
        STACK[0x3278] = STACK[0xCD8];
        STACK[0x3258] = STACK[0xCB0];
        STACK[0x3320] = STACK[0xC98];
        STACK[0x3280] = STACK[0x3968];
        result = v5016(v5017);
        break;
    }
    break;
  }
  return result;
}

uint64_t sub_1006CD258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t (*v8)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t);
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = (uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t))(*(_QWORD *)(STACK[0x3C70] + 8 * (LODWORD(STACK[0x3710]) - 9391)) - 12);
  v9 = STACK[0x2798];
  STACK[0x39B0] = a8;
  v10 = STACK[0x3C08];
  v11 = STACK[0x3C78];
  v12 = STACK[0x3C60];
  STACK[0x3C50] = STACK[0x2770];
  STACK[0x3350] = STACK[0x3570];
  STACK[0x3238] = STACK[0x3C28];
  v13 = STACK[0x3C68];
  v14 = STACK[0x2778];
  v15 = STACK[0x33D8];
  STACK[0x3C40] = STACK[0x2780];
  STACK[0x3C48] = STACK[0x2788];
  return v8(v12, v13, v11, v14, v10, v9, a7, v15);
}

uint64_t sub_1006CD2F4(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  int v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  LODWORD(STACK[0x207C]) = v11;
  v17 = (uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * (((v11 > 0x3F) * (((v10 + 9629) | v8) + 2945)) ^ v10)) - 12);
  LODWORD(STACK[0x3BD8]) = 108;
  STACK[0x3980] = v12;
  STACK[0x3378] = v12;
  STACK[0x3210] = v12;
  STACK[0x3978] = a5;
  STACK[0x3960] = v15;
  STACK[0x3970] = a3;
  v18 = STACK[0x39B0];
  STACK[0x3200] = STACK[0x39B0];
  STACK[0x3218] = v18;
  STACK[0x3B70] = a3;
  STACK[0x3BD0] = a3;
  STACK[0x3958] = a1;
  v19 = STACK[0x3350];
  STACK[0x3968] = STACK[0x3350];
  STACK[0x3230] = v9;
  STACK[0x3A18] = v9;
  STACK[0x3BC8] = v9;
  STACK[0x3208] = v19;
  v20 = STACK[0x3238];
  STACK[0x3948] = STACK[0x3238];
  STACK[0x3950] = a2;
  STACK[0x3370] = v15;
  STACK[0x3228] = v15;
  STACK[0x3B78] = a1;
  STACK[0x3BC0] = a1;
  STACK[0x3940] = a8;
  STACK[0x3358] = a8;
  STACK[0x3250] = a8;
  STACK[0x3220] = v20;
  STACK[0x3B68] = a5;
  STACK[0x3AC8] = a5;
  STACK[0x3368] = a2;
  STACK[0x3248] = a2;
  STACK[0x3C58] = a6;
  STACK[0x3828] = v13;
  STACK[0x3BA0] = v14;
  return v17();
}

uint64_t sub_1006CD3C0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (v0 + 284)) - 12))();
}

void sub_1006CD3E8()
{
  STACK[0x3B60] = STACK[0x21C8];
  STACK[0x3C00] = STACK[0x21C0];
  STACK[0x3C38] = STACK[0x21B8];
  STACK[0x3B58] = STACK[0x21B0];
  STACK[0x3A70] = STACK[0x36C0];
  STACK[0x3C68] = STACK[0x32C8];
  STACK[0x3A78] = STACK[0x36B8];
  STACK[0x3BF0] = STACK[0x21A8];
  STACK[0x3C78] = STACK[0x21A0];
  STACK[0x3C60] = STACK[0x32B8];
  STACK[0x3360] = STACK[0x32C0];
  STACK[0x3B88] = STACK[0x32B0];
  STACK[0x3A80] = STACK[0x36B0];
  STACK[0x3B80] = STACK[0x32A8];
  STACK[0x3B90] = STACK[0x32D8];
  STACK[0x3BD8] = STACK[0x32A0];
  STACK[0x3C08] = STACK[0x2198];
  STACK[0x3B98] = STACK[0x3298];
  STACK[0x3A88] = STACK[0x36A8];
  STACK[0x3C28] = STACK[0x2190];
  STACK[0x3C20] = STACK[0x2188];
  STACK[0x3BC8] = STACK[0x2180];
  STACK[0x3BD0] = STACK[0x2178];
  STACK[0x3A90] = STACK[0x3698];
  STACK[0x3A98] = STACK[0x3690];
  JUMPOUT(0x1006CD4FCLL);
}

uint64_t sub_1006CD570(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t (*v19)(unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t);

  v17 = 1291
      * (97
                        * (*(_BYTE *)(v14
                                    + (v9 + 4647
                                          * (((((v10 - v12) & 1) << 7) | ((v10 - v12) >> 1)) ^ 0x40))
                                    % (((v8 + 1616969557) & 0x9F9EFFB3) + 989)) ^ 0xA2))
      + 2978337;
  v18 = *(_QWORD *)(STACK[0x3C10] + 8 * (v17 - 3108 * (((5527629 * (unint64_t)v17) >> 32) >> 2)));
  STACK[0x1F88] = v18 ^ ((v18 ^ 0x951AE5391FFE27CCLL) >> 6) ^ ((v18 ^ 0x951AE5391FFE27CCLL) >> 4) ^ 0xD007F72D6340ADEALL;
  v19 = (uint64_t (*)(unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v16 + 8 * v8) - 12);
  STACK[0x3BB8] = a8;
  STACK[0x21C8] = STACK[0x3B60];
  STACK[0x21C0] = STACK[0x3C00];
  STACK[0x21B8] = STACK[0x3C38];
  STACK[0x21B0] = STACK[0x3B58];
  STACK[0x36C0] = STACK[0x3A70];
  STACK[0x32C8] = STACK[0x3C68];
  STACK[0x36B8] = STACK[0x3A78];
  STACK[0x21A8] = STACK[0x3BF0];
  STACK[0x3C50] = v11;
  STACK[0x21A0] = STACK[0x3C78];
  STACK[0x32B8] = STACK[0x3C60];
  STACK[0x32C0] = STACK[0x3360];
  STACK[0x32B0] = STACK[0x3B88];
  STACK[0x36B0] = STACK[0x3A80];
  STACK[0x32A8] = STACK[0x3B80];
  STACK[0x3C40] = a3;
  STACK[0x32D8] = STACK[0x3B90];
  STACK[0x32A0] = STACK[0x3BD8];
  STACK[0x2198] = STACK[0x3C08];
  STACK[0x3298] = STACK[0x3B98];
  STACK[0x36A8] = STACK[0x3A88];
  STACK[0x36A0] = v15;
  STACK[0x2190] = STACK[0x3C28];
  STACK[0x2188] = STACK[0x3C20];
  STACK[0x2180] = STACK[0x3BC8];
  STACK[0x2178] = STACK[0x3BD0];
  STACK[0x3698] = STACK[0x3A90];
  STACK[0x3C48] = a2;
  STACK[0x3690] = STACK[0x3A98];
  return v19(STACK[0x3B78], STACK[0x3368], STACK[0x3B70], a4, STACK[0x3B68], a6, v13, STACK[0x3358]);
}

uint64_t sub_1006CD744(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  unint64_t v35;
  _BOOL4 v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  unint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  unint64_t v43;
  _BOOL4 v44;
  unint64_t v45;
  unint64_t v46;
  _BOOL4 v47;
  unint64_t v48;
  unint64_t v49;
  _BOOL4 v50;
  unint64_t v51;
  unint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  unint64_t v55;
  _BOOL4 v56;
  unint64_t v57;
  _BOOL8 v58;
  unint64_t v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  unint64_t v67;
  _BOOL4 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL4 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  _BOOL4 v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _BOOL4 v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _BOOL4 v137;
  unint64_t v138;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  BOOL v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _BOOL4 v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _BOOL4 v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  _BOOL4 v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _BOOL4 v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _BOOL4 v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  _BOOL4 v202;
  uint64_t v203;
  int v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  _BOOL4 v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  int v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BOOL4 v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _BOOL4 v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  int v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  _BOOL8 v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  _BOOL4 v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  _BOOL4 v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  int v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _BOOL4 v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  int v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _BOOL4 v316;
  unint64_t v317;
  unint64_t v318;
  _BOOL4 v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  _BOOL4 v326;
  unint64_t v327;
  int v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  _BOOL4 v341;
  unint64_t v342;
  unint64_t v343;
  _BOOL4 v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  _BOOL4 v352;
  unint64_t v353;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  _BOOL4 v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  int v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  int v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _BOOL4 v393;
  uint64_t v394;
  unint64_t v395;
  _BOOL4 v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _BOOL4 v405;
  uint64_t v406;
  unint64_t v407;
  _BOOL4 v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  _BOOL4 v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  _BOOL4 v432;
  uint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  int v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  _BOOL4 v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  _BOOL4 v462;
  unint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  _BOOL4 v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unint64_t v474;
  int v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  _BOOL4 v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  _BOOL4 v497;
  uint64_t v498;
  int v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  BOOL v507;
  unint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  int v532;
  uint64_t v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  int v565;
  unint64_t v566;
  unint64_t v567;
  uint64_t v568;
  unint64_t v569;
  unint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  unint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unint64_t v581;
  uint64_t v582;
  unint64_t v583;
  unint64_t v585;
  unint64_t v586;
  unint64_t v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t v590;
  unint64_t v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v598;
  unint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  int v605;
  uint64_t v606;
  unint64_t v607;
  unint64_t v608;
  uint64_t v609;
  unint64_t v610;
  unint64_t v612;
  uint64_t v613;
  unint64_t v614;
  unint64_t v615;
  uint64_t v616;
  unint64_t v617;
  unint64_t v618;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  uint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unint64_t v626;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  int v633;
  unint64_t v634;
  uint64_t v635;
  unint64_t v636;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  unint64_t v642;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  int v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t v658;
  unint64_t v659;
  int v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  int v669;
  unint64_t v670;
  unint64_t v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  int v682;
  unint64_t v683;
  uint64_t v684;
  unint64_t v685;
  uint64_t v687;
  unint64_t v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  unint64_t v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v702;
  uint64_t v703;
  unint64_t v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  int v715;
  unint64_t v716;
  uint64_t v717;
  unint64_t v718;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v725;
  unint64_t v726;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  unint64_t v732;
  uint64_t v734;
  unint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  unint64_t v740;
  _BOOL4 v741;
  unint64_t v742;
  unint64_t v743;
  unint64_t v744;
  unint64_t v745;
  unint64_t v746;
  unint64_t v747;
  unint64_t v748;
  BOOL v749;
  unint64_t v750;
  unint64_t v751;
  uint64_t v753;
  unint64_t v754;
  unint64_t v755;
  unint64_t v756;
  unint64_t v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v762;
  uint64_t v764;
  unint64_t v765;
  unint64_t v766;
  unint64_t v767;
  unint64_t v768;
  unint64_t v769;
  unint64_t v770;
  unint64_t v771;
  unint64_t v772;
  unint64_t v773;
  unint64_t v774;
  uint64_t v776;
  unint64_t v777;
  unint64_t v778;
  unint64_t v779;
  uint64_t v781;
  uint64_t v783;
  uint64_t v785;
  uint64_t v787;
  uint64_t v789;
  BOOL v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t v797;
  unint64_t v798;
  unint64_t v799;
  unint64_t v800;
  _BOOL4 v801;
  unint64_t v802;
  int v803;
  unint64_t v804;
  int v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  unint64_t v809;
  unint64_t v810;
  uint64_t v811;
  unint64_t v812;
  int v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  unint64_t v818;
  unint64_t v819;
  unint64_t v820;
  unint64_t v821;
  unint64_t v822;
  unint64_t v823;
  unint64_t v824;
  uint64_t v825;
  uint64_t v826;
  unint64_t v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t v831;
  unint64_t v832;
  unint64_t v833;
  unint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  unint64_t v838;
  unint64_t v839;
  unint64_t v840;
  uint64_t v841;
  unint64_t v842;
  uint64_t v843;
  unint64_t v844;
  uint64_t v845;
  unint64_t v846;
  uint64_t v847;
  unint64_t v848;
  unint64_t v849;
  unint64_t v850;
  unint64_t v851;
  uint64_t v852;
  unint64_t v853;
  uint64_t v854;
  unint64_t v855;
  unint64_t v856;
  unint64_t v857;
  unint64_t v858;
  unint64_t v859;
  unint64_t v860;
  unint64_t v861;
  unint64_t v862;
  uint64_t v863;
  unint64_t v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t v867;
  unint64_t v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  unint64_t v872;
  uint64_t v873;
  unint64_t v874;
  uint64_t v875;
  unint64_t v876;
  uint64_t v877;
  unint64_t v878;
  uint64_t v879;
  unint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t (*v884)(void);
  unint64_t v885;
  unint64_t v886;
  unint64_t v887;
  unint64_t v888;
  unint64_t v889;
  unint64_t v890;
  unint64_t v891;
  unint64_t v892;
  unint64_t v893;

  v22 = v17;
  STACK[0x26F0] = v16;
  STACK[0x26F8] = v14;
  STACK[0x2700] = v13;
  STACK[0x2708] = v12;
  STACK[0x2710] = a8;
  STACK[0x2798] = a6;
  STACK[0x2770] = v9;
  STACK[0x2778] = a4;
  STACK[0x2780] = a3;
  STACK[0x2788] = a2;
  STACK[0x2790] = a1;
  v23 = STACK[0x2548];
  v24 = STACK[0x2548] + STACK[0x39A8];
  v25 = __CFADD__(STACK[0x2548], STACK[0x39A8]);
  if (v24 > 0xFFFFFFFFFFFFFFD8)
    v25 = 1;
  if (v25)
    v26 = v18;
  else
    v26 = 0;
  v27 = v26 + v24;
  STACK[0x3C58] = v27 + v23;
  v28 = __CFADD__(v27, v23) || v27 + v23 > 0xFFFFFFFFFFFFFFD8;
  LODWORD(STACK[0x3C50]) = v28;
  v29 = STACK[0x2558];
  v30 = STACK[0x2558] + v15;
  v31 = __CFADD__(STACK[0x2558], v15);
  if (v30 > 0xFFFFFFFFFFFFFFD2)
    v31 = 1;
  if (v31)
    v32 = v21;
  else
    v32 = 0;
  v33 = v32 + v30;
  STACK[0x3C48] = v33 + v29;
  v34 = __CFADD__(v33, v29) || v33 + v29 > 0xFFFFFFFFFFFFFFD2;
  LODWORD(STACK[0x3BC0]) = v34;
  v35 = STACK[0x2550];
  v36 = STACK[0x2550] + STACK[0x39B8] > 0xFFFFFFFFFFFFFFD0;
  if (__CFADD__(STACK[0x2550], STACK[0x39B8]))
    v36 = 1;
  if (v36)
    v37 = v11;
  else
    v37 = 0;
  v38 = v37 + STACK[0x2550] + STACK[0x39B8];
  STACK[0x3C40] = v38 + v35;
  v39 = __CFADD__(v38, v35) || v38 + v35 > 0xFFFFFFFFFFFFFFD0;
  LODWORD(STACK[0x3BB8]) = v39;
  v40 = STACK[0x2560];
  v41 = STACK[0x39A0] + STACK[0x2560] > 0xFFFFFFFFFFFFFFF6;
  if (__CFADD__(STACK[0x39A0], STACK[0x2560]))
    v41 = 1;
  v507 = !v41;
  v42 = 9;
  if (v507)
    v42 = 0;
  v43 = v42 + STACK[0x39A0] + STACK[0x2560];
  STACK[0x3BB0] = v43 + v40;
  v44 = __CFADD__(v43, v40) || v43 + v40 > 0xFFFFFFFFFFFFFFF6;
  LODWORD(STACK[0x3BA0]) = v44;
  v45 = STACK[0x2568];
  v46 = STACK[0x3990] + STACK[0x2568];
  v47 = __CFADD__(STACK[0x3990], STACK[0x2568]);
  if (v46 > 0xFFFFFFFFFFFFFFEELL)
    v47 = 1;
  if (v47)
    v48 = v10;
  else
    v48 = 0;
  v49 = v48 + v46;
  STACK[0x3B50] = v49 + v45;
  v50 = __CFADD__(v49, v45) || v49 + v45 > 0xFFFFFFFFFFFFFFEELL;
  LODWORD(STACK[0x3B48]) = v50;
  v51 = STACK[0x31F0];
  v52 = STACK[0x3998] + STACK[0x31F0];
  v53 = __CFADD__(STACK[0x3998], STACK[0x31F0]);
  if (v52 > 0xFFFFFFFFFFFFFFFALL)
    v53 = 1;
  v507 = !v53;
  v54 = 5;
  if (v507)
    v54 = 0;
  v55 = v54 + v52;
  STACK[0x3B40] = v55 + v51;
  v56 = __CFADD__(v55, v51) || v55 + v51 > 0xFFFFFFFFFFFFFFFALL;
  LODWORD(STACK[0x3978]) = v56;
  v57 = STACK[0x2580];
  v58 = __CFADD__(STACK[0x2580], STACK[0x3888]) || STACK[0x2580] + STACK[0x3888] == -1;
  v59 = v58 + STACK[0x2580] + STACK[0x3888];
  STACK[0x3970] = v59 + v57;
  v60 = __CFADD__(v59, v57) || v59 + v57 == -1;
  STACK[0x3968] = v60;
  v61 = STACK[0x2578];
  v62 = a7 + STACK[0x2578];
  v63 = __CFADD__(a7, STACK[0x2578]);
  if (v62 > 0xFFFFFFFFFFFFFFFCLL)
    v63 = 1;
  if (v63)
    v64 = v8;
  else
    v64 = 0;
  v65 = v64 + v62;
  STACK[0x3980] = v65 + v61;
  v66 = __CFADD__(v65, v61) || v65 + v61 > 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(STACK[0x3960]) = v66;
  v67 = STACK[0x26E0];
  v68 = STACK[0x26E0] + a5 > 0xFFFFFFFFFFFFFFDELL;
  STACK[0x3C30] = STACK[0x26E0] + a5;
  if (__CFADD__(v67, a5))
    v68 = 1;
  LODWORD(STACK[0x3958]) = v68;
  v69 = STACK[0x33A0];
  v70 = STACK[0x3988];
  v71 = STACK[0x33A0];
  STACK[0x33A0] = STACK[0x33A0];
  STACK[0x3988] = v70;
  v118 = (v69 + v70 != -16) & __CFADD__(v69 + v70, 16);
  v72 = v19;
  v73 = (unint64_t)(((*(_BYTE *)(v19 + STACK[0x1E98]) ^ 0xE) >> 3) | (32 * (*(_BYTE *)(v19 + STACK[0x1E98]) ^ 0xE))) << 8;
  v74 = (((*(_BYTE *)(v19 + STACK[0x1EA0]) ^ 0xE) >> 3) | (32
                                                                                           * (*(_BYTE *)(v19 + STACK[0x1EA0]) ^ 0xE)));
  v75 = STACK[0x1E00];
  v76 = STACK[0x1DC8];
  v77 = STACK[0x1DC0];
  STACK[0x39C0] = v20;
  v78 = STACK[0x1DE8];
  v79 = ((v77 | ((v73 | ((unint64_t)(v74 + v75) << 16) | v76) << 16)) + STACK[0x1DE8]) ^ 0xF700000A2EDBLL;
  if (v118)
    v80 = 1;
  else
    v80 = 0;
  STACK[0x3950] = v71 + v70;
  if (__CFADD__(v71, v70))
    v80 = 1;
  LODWORD(STACK[0x3948]) = v80;
  if (v79 >= 0xFFFFFFFFFFFFFFCBLL)
    v81 = 53;
  else
    v81 = 0;
  v82 = v81 + v79;
  v83 = STACK[0x1E30];
  v144 = __CFADD__(v82, STACK[0x1E30]);
  v84 = v82 + STACK[0x1E30];
  v85 = v144;
  if (v84 > 0xFFFFFFFFFFFFFFCALL)
    v85 = 1;
  if (v85)
    v86 = 53;
  else
    v86 = 0;
  v87 = v86 + v84;
  v88 = 53 * v87;
  v89 = 53 * ((v87 * (unsigned __int128)0x35uLL) >> 64);
  v144 = __CFADD__(v89, v88);
  v90 = v89 + v88;
  if (v144)
    v91 = 53;
  else
    v91 = 0;
  STACK[0x3BF8] = v91 + v90;
  v92 = __CFADD__(v91, v90) || (unint64_t)(v91 + v90) > 0xFFFFFFFFFFFFFFCALL;
  LODWORD(STACK[0x3BE8]) = v92;
  if (v79 >= 0xFFFFFFFFFFFFFFD1)
    v93 = v11;
  else
    v93 = 0;
  v94 = v93 + v79;
  v95 = STACK[0x1E38];
  v96 = (*(_BYTE *)(v19 + STACK[0x1E28]) - 71) ^ ((*(_BYTE *)(v19 + STACK[0x1E28]) - 71) << 6) ^ (4
                                                                                                * (*(_BYTE *)(v19 + STACK[0x1E28])
                                                                                                 - 71));
  v97 = v94 + STACK[0x1E38] > 0xFFFFFFFFFFFFFFD0;
  v144 = __CFADD__(v94, STACK[0x1E38]);
  v98 = v94 + STACK[0x1E38];
  if (v144)
    v97 = 1;
  if (v97)
    v99 = v11;
  else
    v99 = 0;
  v100 = v99 + v98;
  STACK[0x3AC8] = v22;
  v101 = v22 + 10456;
  v102 = *(_BYTE *)(v19 + STACK[0x1EA8]);
  LODWORD(STACK[0x3AC0]) = v101;
  v103 = (unint64_t)(((v102 + v101 + 96) ^ 0xFB) + 85) << 8;
  v104 = STACK[0x1DB8];
  v105 = STACK[0x1DD0];
  v106 = ((STACK[0x1DB8] | ((v103 | ((unint64_t)(STACK[0x1E80]
                                                      + ((v96 ^ 0xFE) + 26)) << 16) | STACK[0x1DF8]) << 16))
        + STACK[0x1DD0]) ^ 0x74B98A;
  v107 = v100 * v11;
  v108 = ((v100 * (unsigned __int128)v11) >> 64) * (unint64_t)v11;
  if (v106 >= 0xFFFFFFFFFFFFFFD1)
    v109 = v11;
  else
    v109 = 0;
  v144 = __CFADD__(v108, v107);
  v110 = v108 + v107;
  if (v144)
    v111 = v11;
  else
    v111 = 0;
  v144 = __CFADD__(v111, v110);
  v112 = v111 + v110;
  v113 = v144;
  if (v112 > 0xFFFFFFFFFFFFFFD0)
    v113 = 1;
  v507 = v113 == 0;
  v114 = v109 + v106;
  v115 = v112 + v109 + v106;
  if (v507)
    v116 = 0;
  else
    v116 = v11;
  v117 = v115 + v116;
  v118 = v117 < v114 || v117 > 0xFFFFFFFFFFFFFFD0;
  if (v118)
    v119 = v11;
  else
    v119 = 0;
  v120 = v119 + v117;
  v121 = v120 * v11;
  v122 = ((v120 * (unsigned __int128)v11) >> 64) * (unint64_t)v11;
  v144 = __CFADD__(v122, v121);
  v123 = v122 + v121;
  if (v144)
    v124 = v11;
  else
    v124 = 0;
  STACK[0x3BE0] = v124 + v123;
  v125 = __CFADD__(v124, v123) || v124 + v123 > 0xFFFFFFFFFFFFFFD0;
  LODWORD(STACK[0x3940]) = v125;
  if (v79 >= 0xFFFFFFFFFFFFFFD3)
    v126 = v21;
  else
    v126 = 0;
  v127 = v126 + v79;
  v128 = STACK[0x1E40];
  v144 = __CFADD__(v127, STACK[0x1E40]);
  v129 = v127 + STACK[0x1E40];
  v130 = v144;
  if (v129 > 0xFFFFFFFFFFFFFFD2)
    v130 = 1;
  if (v130)
    v131 = v21;
  else
    v131 = 0;
  v132 = v131 + v129;
  v133 = v132 * v21;
  v134 = ((v132 * (unsigned __int128)v21) >> 64) * (unint64_t)v21;
  v144 = __CFADD__(v134, v133);
  v135 = v134 + v133;
  if (v144)
    v136 = v21;
  else
    v136 = 0;
  v137 = v136 + v135 > 0xFFFFFFFFFFFFFFD2;
  v144 = __CFADD__(v136, v135);
  v138 = v136 + v135;
  if (v144 || v137)
    v140 = v21;
  else
    v140 = 0;
  if (v106 >= 0xFFFFFFFFFFFFFFD3)
    v141 = v21;
  else
    v141 = 0;
  v142 = v141 + v106;
  v143 = v138 + v142 + v140;
  v144 = v143 <= 0xFFFFFFFFFFFFFFD2 && v143 >= v142;
  if (v144)
    v145 = 0;
  else
    v145 = v21;
  v146 = v145 + v143;
  v147 = v146 * v21;
  v148 = ((v146 * (unsigned __int128)v21) >> 64) * (unint64_t)v21;
  v144 = __CFADD__(v148, v147);
  v149 = v148 + v147;
  if (v144)
    v150 = v21;
  else
    v150 = 0;
  STACK[0x3938] = v150 + v149;
  v151 = __CFADD__(v150, v149) || v150 + v149 > 0xFFFFFFFFFFFFFFD2;
  LODWORD(STACK[0x3930]) = v151;
  if (v79 >= 0xFFFFFFFFFFFFFFD9)
    v152 = v18;
  else
    v152 = 0;
  v153 = v152 + v79;
  v154 = STACK[0x1E48];
  v144 = __CFADD__(v153, STACK[0x1E48]);
  v155 = v153 + STACK[0x1E48];
  v156 = v144;
  if (v155 > 0xFFFFFFFFFFFFFFD8)
    v156 = 1;
  if (v156)
    v157 = v18;
  else
    v157 = 0;
  v158 = v157 + v155;
  v159 = v158 * v18;
  v160 = ((v158 * (unsigned __int128)v18) >> 64) * (unint64_t)v18;
  v144 = __CFADD__(v160, v159);
  v161 = v160 + v159;
  if (v144)
    v162 = v18;
  else
    v162 = 0;
  STACK[0x3928] = v162 + v161;
  v163 = __CFADD__(v162, v161) || v162 + v161 > 0xFFFFFFFFFFFFFFD8;
  LODWORD(STACK[0x3920]) = v163;
  if (v79 >= 0xFFFFFFFFFFFFFFDFLL)
    v164 = 33;
  else
    v164 = 0;
  v165 = v164 + v79;
  v166 = STACK[0x1E50];
  v167 = v165 + STACK[0x1E50] > 0xFFFFFFFFFFFFFFDELL;
  v144 = __CFADD__(v165, STACK[0x1E50]);
  v168 = v165 + STACK[0x1E50];
  if (v144)
    v167 = 1;
  if (v167)
    v169 = 33;
  else
    v169 = 0;
  v170 = v169 + v168;
  v171 = 33 * v170;
  v172 = (__PAIR128__(32, 33) * v170) >> 64;
  v144 = __CFADD__(v172, v171);
  v173 = v172 + v171;
  if (v144)
    v174 = 33;
  else
    v174 = 0;
  v175 = (unint64_t)(v174 + v173) > 0xFFFFFFFFFFFFFFDELL;
  v144 = __CFADD__(v174, v173);
  v176 = v174 + v173;
  v177 = v144 || v175;
  if (v106 >= 0xFFFFFFFFFFFFFFDFLL)
    v178 = 33;
  else
    v178 = 0;
  v507 = v177 == 0;
  v179 = v178 + v106;
  v180 = v176 + v178 + v106;
  if (v507)
    v181 = 0;
  else
    v181 = 33;
  v182 = v180 + v181;
  if (v182 > 0xFFFFFFFFFFFFFFDELL || v179 > v182)
    v184 = 33;
  else
    v184 = 0;
  v185 = v184 + v182;
  v186 = 33 * v185;
  v187 = (__PAIR128__(32, 33) * v185) >> 64;
  v144 = __CFADD__(v187, v186);
  v188 = v187 + v186;
  if (v144)
    v189 = 33;
  else
    v189 = 0;
  STACK[0x3918] = v189 + v188;
  v190 = __CFADD__(v189, v188) || (unint64_t)(v189 + v188) > 0xFFFFFFFFFFFFFFDELL;
  LODWORD(STACK[0x3910]) = v190;
  if (v79 >= 0xFFFFFFFFFFFFFFEFLL)
    v191 = v10;
  else
    v191 = 0;
  v192 = v191 + v79;
  v193 = STACK[0x1E58];
  v144 = __CFADD__(v192, STACK[0x1E58]);
  v194 = v192 + STACK[0x1E58];
  v195 = v144;
  if (v194 > 0xFFFFFFFFFFFFFFEELL)
    v195 = 1;
  if (v195)
    v196 = v10;
  else
    v196 = 0;
  v197 = v196 + v194;
  v198 = 17 * v197;
  v199 = (__PAIR128__(16, v10) * v197) >> 64;
  v144 = __CFADD__(v199, v198);
  v200 = v199 + v198;
  if (v144)
    v201 = v10;
  else
    v201 = 0;
  v202 = v201 + v200 > 0xFFFFFFFFFFFFFFEELL;
  v144 = __CFADD__(v201, v200);
  v203 = v201 + v200;
  v204 = v144 || v202;
  if (v106 >= 0xFFFFFFFFFFFFFFEFLL)
    v205 = v10;
  else
    v205 = 0;
  v507 = v204 == 0;
  v206 = v205 + v106;
  v207 = v203 + v205 + v106;
  if (v507)
    v208 = 0;
  else
    v208 = v10;
  v209 = v207 + v208;
  if (v209 > 0xFFFFFFFFFFFFFFEELL || v206 > v209)
    v211 = v10;
  else
    v211 = 0;
  v212 = v211 + v209;
  v213 = 17 * v212;
  v214 = (__PAIR128__(16, v10) * v212) >> 64;
  v144 = __CFADD__(v214, v213);
  v215 = v214 + v213;
  if (v144)
    v216 = v10;
  else
    v216 = 0;
  STACK[0x3908] = v216 + v215;
  v217 = __CFADD__(v216, v215) || v216 + v215 > 0xFFFFFFFFFFFFFFEELL;
  LODWORD(STACK[0x3900]) = v217;
  if (v79 >= 0xFFFFFFFFFFFFFFF1)
    v218 = 15;
  else
    v218 = 0;
  v219 = v218 + v79;
  v220 = STACK[0x1E60];
  v144 = __CFADD__(v219, STACK[0x1E60]);
  v221 = v219 + STACK[0x1E60];
  v222 = 2116703164;
  if (!v144)
    v222 = 0;
  if (v222 | (v221 > 0xFFFFFFFFFFFFFFF0))
    v223 = 15;
  else
    v223 = 0;
  v224 = v223 + v221;
  v225 = 15 * v224;
  v226 = 15 * ((v224 * (unsigned __int128)0xFuLL) >> 64);
  v144 = __CFADD__(v226, v225);
  v227 = v226 + v225;
  if (v144)
    v228 = 15;
  else
    v228 = 0;
  v144 = __CFADD__(v228, v227);
  v229 = v228 + v227;
  v230 = v144;
  if (v106 >= 0xFFFFFFFFFFFFFFF1)
    v231 = 15;
  else
    v231 = 0;
  if (v229 > 0xFFFFFFFFFFFFFFF0)
    v230 = 1;
  v507 = v230 == 0;
  v232 = v231 + v106;
  v233 = v229 + v231 + v106;
  if (v507)
    v234 = 0;
  else
    v234 = 15;
  v235 = v233 + v234;
  if (v235 < v232 || v235 > 0xFFFFFFFFFFFFFFF0)
    v237 = 15;
  else
    v237 = 0;
  v238 = v237 + v235;
  v239 = 15 * v238;
  v240 = 15 * ((v238 * (unsigned __int128)0xFuLL) >> 64);
  v144 = __CFADD__(v240, v239);
  v241 = v240 + v239;
  if (v144)
    v242 = 15;
  else
    v242 = 0;
  STACK[0x38F8] = v242 + v241;
  v243 = __CFADD__(v242, v241) || (unint64_t)(v242 + v241) > 0xFFFFFFFFFFFFFFF0;
  LODWORD(STACK[0x38F0]) = v243;
  if (v79 >= 0xFFFFFFFFFFFFFFFBLL)
    v244 = 5;
  else
    v244 = 0;
  v245 = v244 + v79;
  v246 = STACK[0x1E70];
  v144 = __CFADD__(v245, STACK[0x1E70]);
  v247 = v245 + STACK[0x1E70];
  v248 = v144;
  if (v247 > 0xFFFFFFFFFFFFFFFALL)
    v248 = 1;
  if (v248)
    v249 = 5;
  else
    v249 = 0;
  v250 = v249 + v247;
  v251 = 5 * v250;
  v252 = (__PAIR128__(4, 5) * v250) >> 64;
  v144 = __CFADD__(v252, v251);
  v253 = v252 + v251;
  if (v144)
    v254 = 5;
  else
    v254 = 0;
  STACK[0x38E8] = v254 + v253;
  v255 = __CFADD__(v254, v253) || (unint64_t)(v254 + v253) > 0xFFFFFFFFFFFFFFFALL;
  LODWORD(STACK[0x38E0]) = v255;
  if (v79 >= 0xFFFFFFFFFFFFFFFDLL)
    v256 = 3;
  else
    v256 = 0;
  v257 = v256 + v79;
  v144 = __CFADD__(v257, STACK[0x2000]);
  v258 = v257 + STACK[0x2000];
  v259 = v144;
  if (v258 > 0xFFFFFFFFFFFFFFFCLL)
    v259 = 1;
  if (v259)
    v260 = 3;
  else
    v260 = 0;
  v261 = v260 + v258;
  v262 = 3 * v261;
  v263 = (__PAIR128__(2, 3) * v261) >> 64;
  v144 = __CFADD__(v263, v262);
  v264 = v263 + v262;
  if (v144)
    v265 = 3;
  else
    v265 = 0;
  v144 = __CFADD__(v265, v264);
  v266 = v265 + v264;
  v267 = v144;
  if (v266 > 0xFFFFFFFFFFFFFFFCLL)
    v267 = 1;
  if (v267)
    v268 = 3;
  else
    v268 = 0;
  if (v106 >= 0xFFFFFFFFFFFFFFFDLL)
    v269 = 3;
  else
    v269 = 0;
  v270 = v269 + v106;
  v271 = v266 + v270 + v268;
  STACK[0x38D8] = v271;
  v272 = v271 > 0xFFFFFFFFFFFFFFFCLL;
  if (!STACK[0x1FF8])
    v272 = 0;
  v273 = v272 ^ (v270 > v271);
  if (v271 > 0xFFFFFFFFFFFFFFFCLL)
    v273 = 1;
  STACK[0x38D0] = v273;
  if (v79 == -1)
    v274 = 0;
  else
    v274 = v79;
  v275 = STACK[0x1E78];
  v276 = v73 | ((unint64_t)((STACK[0x1E18] | ((STACK[0x1E20]
                                                                  + (97
                                                                                    * (*(_BYTE *)(v72 + STACK[0x1E88]) ^ 0xA2))) << 16))
                                 + v74) << 16);
  v277 = v274 + STACK[0x1E78] == -1;
  STACK[0x38C8] = v274 + STACK[0x1E78];
  v278 = ((v77 | ((v276 | v76) << 16)) + v78) ^ 0xF700000A2EDBLL;
  v279 = __CFADD__(v274, v275) || v277;
  STACK[0x38C0] = v279;
  if (v278 >= 0xFFFFFFFFFFFFFFCBLL)
    v280 = 53;
  else
    v280 = 0;
  v281 = v280 + v278;
  v282 = v281 + v83 > 0xFFFFFFFFFFFFFFCALL;
  v144 = __CFADD__(v281, v83);
  v283 = v281 + v83;
  if (v144)
    v282 = 1;
  if (v282)
    v284 = 53;
  else
    v284 = 0;
  v285 = v284 + v283;
  v286 = ((v104 | ((v103 + STACK[0x1DF0]) << 16)) + v105) ^ 0xBC0074B98ALL;
  v287 = 53 * v285;
  v288 = 53 * ((v285 * (unsigned __int128)0x35uLL) >> 64);
  if (v286 >= 0xFFFFFFFFFFFFFFCBLL)
    v289 = 53;
  else
    v289 = 0;
  v144 = __CFADD__(v288, v287);
  v290 = v288 + v287;
  if (v144)
    v291 = 53;
  else
    v291 = 0;
  v144 = __CFADD__(v291, v290);
  v292 = v291 + v290;
  v293 = v144;
  if (v292 > 0xFFFFFFFFFFFFFFCALL)
    v293 = 1;
  v507 = v293 == 0;
  v294 = v289 + v286;
  v295 = v292 + v289 + v286;
  if (v507)
    v296 = 0;
  else
    v296 = 53;
  v297 = v295 + v296;
  if (v294 > v297 || v297 > 0xFFFFFFFFFFFFFFCALL)
    v299 = 53;
  else
    v299 = 0;
  v300 = v299 + v297;
  v301 = 53 * v300;
  v302 = 53 * ((v300 * (unsigned __int128)0x35uLL) >> 64);
  v144 = __CFADD__(v302, v301);
  v303 = v302 + v301;
  if (v144)
    v304 = 53;
  else
    v304 = 0;
  STACK[0x38B8] = v304 + v303;
  v305 = __CFADD__(v304, v303) || (unint64_t)(v304 + v303) > 0xFFFFFFFFFFFFFFCALL;
  LODWORD(STACK[0x38B0]) = v305;
  if (v278 >= 0xFFFFFFFFFFFFFFD1)
    v306 = 47;
  else
    v306 = 0;
  v307 = v306 + v278;
  v144 = __CFADD__(v307, v95);
  v308 = v307 + v95;
  v309 = v144;
  if (v308 > 0xFFFFFFFFFFFFFFD0)
    v309 = 1;
  if (v309)
    v310 = 47;
  else
    v310 = 0;
  v311 = v310 + v308;
  v312 = 47 * v311;
  v313 = 47 * ((v311 * (unsigned __int128)0x2FuLL) >> 64);
  v144 = __CFADD__(v313, v312);
  v314 = v313 + v312;
  if (v144)
    v315 = 47;
  else
    v315 = 0;
  STACK[0x38A8] = v315 + v314;
  v316 = __CFADD__(v315, v314) || (unint64_t)(v315 + v314) > 0xFFFFFFFFFFFFFFD0;
  LODWORD(STACK[0x38A0]) = v316;
  if (v278 >= 0xFFFFFFFFFFFFFFD3)
    v317 = v21;
  else
    v317 = 0;
  v318 = v317 + v278;
  v319 = v318 + v128 > 0xFFFFFFFFFFFFFFD2;
  v144 = __CFADD__(v318, v128);
  v320 = v318 + v128;
  if (v144)
    v319 = 1;
  if (v319)
    v321 = v21;
  else
    v321 = 0;
  v322 = v321 + v320;
  v323 = v322 * v21;
  LODWORD(v322) = (v322 * (unsigned __int128)v21) >> 64;
  v324 = v323 + v322 * (unint64_t)v21;
  if (v324 >= v322 * (unint64_t)v21)
    v325 = 0;
  else
    v325 = v21;
  v326 = v325 + v324 > 0xFFFFFFFFFFFFFFD2;
  v144 = __CFADD__(v325, v324);
  v327 = v325 + v324;
  v328 = v144 || v326;
  if (v286 >= 0xFFFFFFFFFFFFFFD3)
    v329 = v21;
  else
    v329 = 0;
  v507 = v328 == 0;
  v330 = v329 + v286;
  v331 = v327 + v329 + v286;
  if (v507)
    v332 = 0;
  else
    v332 = v21;
  v333 = v331 + v332;
  if (v333 > 0xFFFFFFFFFFFFFFD2 || v330 > v333)
    v335 = v21;
  else
    v335 = 0;
  v336 = v335 + v333;
  v337 = v336 * v21;
  v338 = ((v336 * (unsigned __int128)v21) >> 64) * (unint64_t)v21;
  v144 = __CFADD__(v338, v337);
  v339 = v338 + v337;
  if (v144)
    v340 = v21;
  else
    v340 = 0;
  STACK[0x3898] = v340 + v339;
  v341 = __CFADD__(v340, v339) || v340 + v339 > 0xFFFFFFFFFFFFFFD2;
  LODWORD(STACK[0x3890]) = v341;
  if (v278 >= 0xFFFFFFFFFFFFFFD9)
    v342 = v18;
  else
    v342 = 0;
  v343 = v342 + v278;
  v344 = v343 + v154 > 0xFFFFFFFFFFFFFFD8;
  v144 = __CFADD__(v343, v154);
  v345 = v343 + v154;
  if (v144)
    v344 = 1;
  if (v344)
    v346 = v18;
  else
    v346 = 0;
  v347 = v346 + v345;
  v348 = v347 * v18;
  v349 = ((v347 * (unsigned __int128)v18) >> 64) * (unint64_t)v18;
  v144 = __CFADD__(v349, v348);
  v350 = v349 + v348;
  if (v144)
    v351 = v18;
  else
    v351 = 0;
  v352 = v351 + v350 > 0xFFFFFFFFFFFFFFD8;
  v144 = __CFADD__(v351, v350);
  v353 = v351 + v350;
  if (v144 || v352)
    v355 = v18;
  else
    v355 = 0;
  if (v286 >= 0xFFFFFFFFFFFFFFD9)
    v356 = v18;
  else
    v356 = 0;
  v357 = v356 + v286;
  v358 = v353 + v357 + v355;
  if (v358 < v357 || v358 > 0xFFFFFFFFFFFFFFD8)
    v360 = v18;
  else
    v360 = 0;
  v361 = v360 + v358;
  v362 = v361 * v18;
  v363 = ((v361 * (unsigned __int128)v18) >> 64) * (unint64_t)v18;
  v144 = __CFADD__(v363, v362);
  v364 = v363 + v362;
  if (v144)
    v365 = v18;
  else
    v365 = 0;
  STACK[0x3828] = v365 + v364;
  v366 = __CFADD__(v365, v364) || v365 + v364 > 0xFFFFFFFFFFFFFFD8;
  if (v278 >= 0xFFFFFFFFFFFFFFDFLL)
    v367 = 33;
  else
    v367 = 0;
  v368 = v367 + v278;
  v144 = __CFADD__(v368, v166);
  v369 = v368 + v166;
  v370 = v144;
  if (v369 > 0xFFFFFFFFFFFFFFDELL)
    v370 = 1;
  if (v370)
    v371 = 33;
  else
    v371 = 0;
  v372 = v371 + v369;
  v373 = 33 * v372;
  v374 = (__PAIR128__(32, 33) * v372) >> 64;
  v144 = __CFADD__(v374, v373);
  v375 = v374 + v373;
  if (v144)
    v376 = 33;
  else
    v376 = 0;
  v144 = __CFADD__(v376, v375);
  v377 = v376 + v375;
  v378 = v144;
  if (v286 >= 0xFFFFFFFFFFFFFFDFLL)
    v379 = 33;
  else
    v379 = 0;
  if (v377 > 0xFFFFFFFFFFFFFFDELL)
    v378 = 1;
  v507 = v378 == 0;
  v380 = v379 + v286;
  v381 = v377 + v379 + v286;
  if (v507)
    v382 = 0;
  else
    v382 = 33;
  v383 = v381 + v382;
  if (v380 > v383 || v383 > 0xFFFFFFFFFFFFFFDELL)
    v385 = 33;
  else
    v385 = 0;
  v386 = v385 + v383;
  v387 = 33 * v386;
  v388 = (__PAIR128__(32, 33) * v386) >> 64;
  v389 = __ROR8__(__ROR8__(v387 ^ 0x7227061925FD4DAALL, 28) ^ 0x5FD4DAA722706192, 36);
  v144 = __CFADD__(v389, v388);
  v390 = v389 + v388;
  if (v144)
    v391 = 33;
  else
    v391 = 0;
  v392 = v391 + v390;
  v393 = __CFADD__(v391, v390) || (unint64_t)(v391 + v390) > 0xFFFFFFFFFFFFFFDELL;
  if (v278 >= 0xFFFFFFFFFFFFFFEFLL)
    v394 = 17;
  else
    v394 = 0;
  v395 = v394 + v278;
  v396 = v395 + v193 > 0xFFFFFFFFFFFFFFEELL;
  v144 = __CFADD__(v395, v193);
  v397 = v395 + v193;
  if (v144)
    v396 = 1;
  if (v396)
    v398 = 17;
  else
    v398 = 0;
  v399 = v398 + v397;
  v400 = 17 * v399;
  v401 = (__PAIR128__(16, 17) * v399) >> 64;
  v144 = __CFADD__(v401, v400);
  v402 = v401 + v400;
  if (v144)
    v403 = 17;
  else
    v403 = 0;
  v404 = v403 + v402;
  v405 = __CFADD__(v403, v402) || (unint64_t)(v403 + v402) > 0xFFFFFFFFFFFFFFEELL;
  if (v278 >= 0xFFFFFFFFFFFFFFF1)
    v406 = 15;
  else
    v406 = 0;
  v407 = v406 + v278;
  v408 = v407 + v220 > 0xFFFFFFFFFFFFFFF0;
  v144 = __CFADD__(v407, v220);
  v409 = v407 + v220;
  if (v144)
    v408 = 1;
  if (v408)
    v410 = 15;
  else
    v410 = 0;
  v411 = v410 + v409;
  v412 = 15 * v411;
  v413 = 15 * ((v411 * (unsigned __int128)0xFuLL) >> 64);
  v144 = __CFADD__(v413, v412);
  v414 = v413 + v412;
  if (v144)
    v415 = 15;
  else
    v415 = 0;
  v416 = (unint64_t)(v415 + v414) > 0xFFFFFFFFFFFFFFF0;
  v144 = __CFADD__(v415, v414);
  v417 = v415 + v414;
  v418 = v144 || v416;
  if (v286 >= 0xFFFFFFFFFFFFFFF1)
    v419 = 15;
  else
    v419 = 0;
  v507 = v418 == 0;
  v420 = v419 + v286;
  v421 = v417 + v419 + v286;
  if (v507)
    v422 = 0;
  else
    v422 = 15;
  v423 = v421 + v422;
  if (v420 > v423 || v423 > 0xFFFFFFFFFFFFFFF0)
    v425 = 15;
  else
    v425 = 0;
  v426 = v425 + v423;
  v427 = 15 * v426;
  v428 = 15 * ((v426 * (unsigned __int128)0xFuLL) >> 64);
  v144 = __CFADD__(v428, v427);
  v429 = v428 + v427;
  if (v144)
    v430 = 15;
  else
    v430 = 0;
  v431 = v430 + v429;
  v432 = __CFADD__(v430, v429) || (unint64_t)(v430 + v429) > 0xFFFFFFFFFFFFFFF0;
  if (v278 >= 0xFFFFFFFFFFFFFFF7)
    v433 = 9;
  else
    v433 = 0;
  v434 = v433 + v278;
  v435 = STACK[0x1E68];
  v144 = __CFADD__(v434, STACK[0x1E68]);
  v436 = v434 + STACK[0x1E68];
  v437 = v144;
  if (v286 >= 0xFFFFFFFFFFFFFFF7)
    v438 = 9;
  else
    v438 = 0;
  if (v436 > 0xFFFFFFFFFFFFFFF6)
    v437 = 1;
  if (v437)
    v439 = 9;
  else
    v439 = 0;
  v440 = v439 + v436;
  v441 = 9 * v440;
  v442 = (__PAIR128__(8, 9) * v440) >> 64;
  v144 = __CFADD__(v442, v441);
  v443 = v442 + v441;
  if (v144)
    v444 = 9;
  else
    v444 = 0;
  v144 = __CFADD__(v444, v443);
  v445 = v444 + v443;
  v446 = v144;
  if (v445 > 0xFFFFFFFFFFFFFFF6)
    v446 = 1;
  v507 = v446 == 0;
  v447 = v438 + v286;
  v448 = v445 + v438 + v286;
  if (v507)
    v449 = 0;
  else
    v449 = 9;
  v450 = v448 + v449;
  if (v450 <= 0xFFFFFFFFFFFFFFF6 && v450 >= v447)
    v452 = 0;
  else
    v452 = 9;
  v453 = v452 + v450;
  v454 = 9 * v453;
  v455 = (__PAIR128__(8, 9) * v453) >> 64;
  v144 = __CFADD__(v455, v454);
  v456 = v455 + v454;
  if (v144)
    v457 = 9;
  else
    v457 = 0;
  v458 = (unint64_t)(v457 + v456) > 0xFFFFFFFFFFFFFFF6;
  v459 = v457 + v456;
  if (__CFADD__(v457, v456))
    v458 = 1;
  if (v278 >= 0xFFFFFFFFFFFFFFFBLL)
    v460 = 5;
  else
    v460 = 0;
  v461 = v460 + v278;
  v462 = v461 + v246 > 0xFFFFFFFFFFFFFFFALL;
  v144 = __CFADD__(v461, v246);
  v463 = v461 + v246;
  if (v144)
    v462 = 1;
  if (v462)
    v464 = 5;
  else
    v464 = 0;
  v465 = v464 + v463;
  v466 = 5 * v465;
  v467 = (__PAIR128__(4, 5) * v465) >> 64;
  v144 = __CFADD__(v467, v466);
  v468 = v467 + v466;
  if (v144)
    v469 = 5;
  else
    v469 = 0;
  v470 = (unint64_t)(v469 + v468) > 0xFFFFFFFFFFFFFFFALL;
  v144 = __CFADD__(v469, v468);
  v471 = v469 + v468;
  if (v144)
    v470 = 1;
  if (v278 >= 0xFFFFFFFFFFFFFFFDLL)
    v472 = 3;
  else
    v472 = 0;
  v473 = v472 + v278;
  v144 = __CFADD__(v473, STACK[0x2000]);
  v474 = v473 + STACK[0x2000];
  v475 = v144;
  if (v474 > 0xFFFFFFFFFFFFFFFCLL)
    v475 = 1;
  if (v475)
    v476 = 3;
  else
    v476 = 0;
  v477 = v476 + v474;
  v478 = 3 * v477;
  v479 = (__PAIR128__(2, 3) * v477) >> 64;
  v144 = __CFADD__(v479, v478);
  v480 = v479 + v478;
  if (v144)
    v481 = 3;
  else
    v481 = 0;
  v482 = (unint64_t)(v481 + v480) > 0xFFFFFFFFFFFFFFFCLL;
  v144 = __CFADD__(v481, v480);
  v483 = v481 + v480;
  v484 = v144 || v482;
  if (v286 >= 0xFFFFFFFFFFFFFFFDLL)
    v485 = 3;
  else
    v485 = 0;
  v507 = v484 == 0;
  v486 = v485 + v286;
  v487 = v483 + v485 + v286;
  if (v507)
    v488 = 0;
  else
    v488 = 3;
  v489 = v487 + v488;
  if (v489 <= 0xFFFFFFFFFFFFFFFCLL && v489 >= v486)
    v491 = 0;
  else
    v491 = 3;
  v492 = v491 + v489;
  v493 = 3 * v492;
  v494 = (__PAIR128__(2, 3) * v492) >> 64;
  v144 = __CFADD__(v494, v493);
  v495 = v494 + v493;
  if (v144)
    v496 = 3;
  else
    v496 = 0;
  v497 = (unint64_t)(v496 + v495) > 0xFFFFFFFFFFFFFFFCLL;
  v144 = __CFADD__(v496, v495);
  v498 = v496 + v495;
  v499 = v144 || v497;
  if (v278 == -1)
    v278 = 0;
  v144 = __CFADD__(v278, v275);
  v500 = v278 + v275;
  LODWORD(v501) = v144;
  if (v500 == -1)
    v501 = 1;
  else
    v501 = v501;
  v502 = v501 + v500;
  if (v286 == -1)
    v503 = 0;
  else
    v503 = v286;
  v507 = v502 == -1;
  v504 = v502 + v503;
  if (v507)
    v505 = v504 + 1;
  else
    v505 = v504;
  v506 = (STACK[0x1DB0] | (((STACK[0x1E08] | (((STACK[0x1E10] | ((unint64_t)(STACK[0x1FF8]
                                                                                  + (((*(_BYTE *)(v72 + STACK[0x1E90]) - 87) ^ 0xFB) + 85)) << 16))
                                             + STACK[0x1DE0]) << 16))
                          + STACK[0x1DD8]) << 8)) ^ 0xF2A1914321;
  v507 = v503 > v505 || v505 == -1;
  if (v507)
    v508 = v505 + 1;
  else
    v508 = v505;
  if (v506 == -1)
    v509 = 0;
  else
    v509 = (STACK[0x1DB0] | (((STACK[0x1E08] | (((STACK[0x1E10] | ((unint64_t)(STACK[0x1FF8]
                                                                                    + (((*(_BYTE *)(v72 + STACK[0x1E90]) - 87) ^ 0xFB) + 85)) << 16))
                                               + STACK[0x1DE0]) << 16))
                            + STACK[0x1DD8]) << 8)) ^ 0xF2A1914321;
  v507 = v508 == -1;
  v510 = v508 + v509;
  if (v507)
    v511 = v510 + 1;
  else
    v511 = v510;
  STACK[0x3820] = v511;
  if (v506 <= 0xFFFFFFFFFFFFFFFCLL)
    v512 = 0;
  else
    v512 = 3;
  v513 = v512 + v506;
  v514 = v498 + v512 + v506;
  if (v499)
    v515 = 3;
  else
    v515 = 0;
  v516 = v514 + v515;
  STACK[0x3878] = v516;
  if (v516 <= 0xFFFFFFFFFFFFFFFCLL && v516 >= v513)
    v518 = 0;
  else
    v518 = 3;
  STACK[0x3880] = v518;
  if (v286 >= 0xFFFFFFFFFFFFFFFBLL)
    v519 = 5;
  else
    v519 = 0;
  v520 = v519 + v286;
  v521 = v471 + v520;
  if (v470)
    v522 = 5;
  else
    v522 = 0;
  v523 = v521 + v522;
  if (v523 > 0xFFFFFFFFFFFFFFFALL || v520 > v523)
    v525 = 5;
  else
    v525 = 0;
  v526 = v525 + v523;
  v527 = 5 * v526;
  v528 = (__PAIR128__(4, 5) * v526) >> 64;
  v144 = __CFADD__(v528, v527);
  v529 = v528 + v527;
  if (v144)
    v530 = 5;
  else
    v530 = 0;
  v144 = __CFADD__(v530, v529);
  v531 = v530 + v529;
  v532 = v144;
  if (v531 > 0xFFFFFFFFFFFFFFFALL)
    v532 = 1;
  if (v506 >= 0xFFFFFFFFFFFFFFFBLL)
    v533 = 5;
  else
    v533 = 0;
  v507 = v532 == 0;
  v534 = v533 + v506;
  v535 = v531 + v533 + v506;
  if (v507)
    v536 = 0;
  else
    v536 = 5;
  STACK[0x3810] = v535 + v536;
  if (v535 + v536 < v534 || v535 + v536 > 0xFFFFFFFFFFFFFFFALL)
    v538 = 5;
  else
    v538 = 0;
  STACK[0x3818] = v538;
  if (v506 >= 0xFFFFFFFFFFFFFFF7)
    v539 = 9;
  else
    v539 = 0;
  v540 = v539 + v506;
  v541 = v459 + v539 + v506;
  if (v458)
    v542 = 9;
  else
    v542 = 0;
  STACK[0x37F8] = v541 + v542;
  if (v541 + v542 < v540 || (unint64_t)(v541 + v542) > 0xFFFFFFFFFFFFFFF6)
    v544 = 9;
  else
    v544 = 0;
  STACK[0x37F0] = v544;
  if (v506 >= 0xFFFFFFFFFFFFFFF1)
    v545 = 15;
  else
    v545 = 0;
  v507 = !v432;
  v546 = v545 + v506;
  v547 = v431 + v545 + v506;
  if (v507)
    v548 = 0;
  else
    v548 = 15;
  v549 = v547 + v548;
  STACK[0x3800] = v549;
  if (v549 <= 0xFFFFFFFFFFFFFFF0 && v549 >= v546)
    v551 = 0;
  else
    v551 = 15;
  STACK[0x3808] = v551;
  if (v286 >= 0xFFFFFFFFFFFFFFEFLL)
    v552 = 17;
  else
    v552 = 0;
  v553 = v552 + v286;
  if (v405)
    v554 = 17;
  else
    v554 = 0;
  v555 = v404 + v553 + v554;
  if (v555 <= 0xFFFFFFFFFFFFFFEELL && v555 >= v553)
    v557 = 0;
  else
    v557 = 17;
  v558 = v557 + v555;
  v559 = 17 * v558;
  v560 = (__PAIR128__(16, 17) * v558) >> 64;
  v144 = __CFADD__(v560, v559);
  v561 = v560 + v559;
  if (v144)
    v562 = 17;
  else
    v562 = 0;
  if (v506 <= 0xFFFFFFFFFFFFFFEELL)
    v563 = 0;
  else
    v563 = 17;
  v144 = __CFADD__(v562, v561);
  v564 = v562 + v561;
  v565 = v144;
  if (v564 > 0xFFFFFFFFFFFFFFEELL)
    v565 = 1;
  v566 = v563 + v506;
  v567 = v564 + v563 + v506;
  if (v565)
    v568 = 17;
  else
    v568 = 0;
  v569 = v567 + v568;
  if (v567 + v568 < v566 || v569 > 0xFFFFFFFFFFFFFFEELL)
    v571 = 17;
  else
    v571 = 0;
  STACK[0x37D0] = v571;
  if (v506 >= 0xFFFFFFFFFFFFFFDFLL)
    v572 = 33;
  else
    v572 = 0;
  v573 = v572 + v506;
  v574 = v392 + v572 + v506;
  if (v393)
    v575 = 33;
  else
    v575 = 0;
  v576 = v574 + v575;
  STACK[0x37D8] = v576;
  if (v576 > 0xFFFFFFFFFFFFFFDELL || v573 > v576)
    v578 = 33;
  else
    v578 = 0;
  STACK[0x37E8] = v578;
  if (v506 <= 0xFFFFFFFFFFFFFFD8)
    v579 = 0;
  else
    v579 = 39;
  v580 = v579 + v506;
  v581 = STACK[0x3828] + v579 + v506;
  if (v366)
    v582 = 39;
  else
    v582 = 0;
  v583 = v581 + v582;
  if (v581 + v582 < v580 || v583 > 0xFFFFFFFFFFFFFFD8)
    v585 = 39;
  else
    v585 = 0;
  STACK[0x3828] = v585;
  if (v506 >= 0xFFFFFFFFFFFFFFD3)
    v586 = v21;
  else
    v586 = 0;
  v587 = v586 + v506;
  v588 = STACK[0x3898] + v586 + v506;
  if (LODWORD(STACK[0x3890]))
    v589 = v21;
  else
    v589 = 0;
  v590 = v588 + v589;
  STACK[0x3890] = v590;
  if (v587 > v590 || v590 > 0xFFFFFFFFFFFFFFD2)
    v592 = v21;
  else
    v592 = 0;
  STACK[0x3898] = v592;
  if (v286 >= 0xFFFFFFFFFFFFFFD1)
    v593 = 47;
  else
    v593 = 0;
  v594 = v593 + v286;
  if (LODWORD(STACK[0x38A0]))
    v595 = 47;
  else
    v595 = 0;
  v596 = STACK[0x38A8] + v594 + v595;
  if (v596 < v594 || v596 > 0xFFFFFFFFFFFFFFD0)
    v598 = 47;
  else
    v598 = 0;
  v599 = v598 + v596;
  v600 = 47 * v599;
  v601 = 47 * ((v599 * (unsigned __int128)0x2FuLL) >> 64);
  v144 = __CFADD__(v601, v600);
  v602 = v601 + v600;
  if (v144)
    v603 = 47;
  else
    v603 = 0;
  v144 = __CFADD__(v603, v602);
  v604 = v603 + v602;
  v605 = v144;
  if (v506 >= 0xFFFFFFFFFFFFFFD1)
    v606 = 47;
  else
    v606 = 0;
  if (v604 > 0xFFFFFFFFFFFFFFD0)
    v605 = 1;
  v607 = v606 + v506;
  v608 = v604 + v606 + v506;
  if (v605)
    v609 = 47;
  else
    v609 = 0;
  v610 = v608 + v609;
  if (v607 > v608 + v609 || v610 > 0xFFFFFFFFFFFFFFD0)
    v612 = 47;
  else
    v612 = 0;
  STACK[0x38A8] = v612;
  if (v506 >= 0xFFFFFFFFFFFFFFCBLL)
    v613 = 53;
  else
    v613 = 0;
  v614 = v613 + v506;
  v615 = STACK[0x38B8] + v613 + v506;
  if (LODWORD(STACK[0x38B0]))
    v616 = 53;
  else
    v616 = 0;
  v617 = v615 + v616;
  v618 = STACK[0x38C0] + STACK[0x38C8];
  STACK[0x38B8] = v617;
  if (v617 > 0xFFFFFFFFFFFFFFCALL || v614 > v617)
    v620 = 53;
  else
    v620 = 0;
  STACK[0x38C8] = v620;
  if (v618 == -1)
    v618 = 0;
  if (v106 == -1)
    v621 = 0;
  else
    v621 = v106;
  v144 = __CFADD__(v618, v621);
  v622 = v618 + v621;
  LODWORD(v623) = v144;
  if (v622 == -1)
    v623 = 1;
  else
    v623 = v623;
  v624 = v623 + v622;
  v625 = STACK[0x38D8] - (-(uint64_t)STACK[0x38D0] & 0xFFFFFFFFFFFFFFFDLL);
  v507 = v624 == -1;
  v626 = v624 + v509;
  if (v507)
    ++v626;
  if (v626 == -1 || v626 < v509)
    ++v626;
  STACK[0x38D8] = v626;
  v628 = 3 * v625;
  v629 = (__PAIR128__(2, 3) * v625) >> 64;
  v144 = __CFADD__(v629, v628);
  v630 = v629 + v628;
  if (v144)
    v631 = 3;
  else
    v631 = 0;
  v144 = __CFADD__(v631, v630);
  v632 = v631 + v630;
  v633 = v144;
  if (v632 > 0xFFFFFFFFFFFFFFFCLL)
    v633 = 1;
  v634 = v632 + v513;
  if (v633)
    v635 = 3;
  else
    v635 = 0;
  v636 = v634 + v635;
  if (v634 + v635 > 0xFFFFFFFFFFFFFFFCLL || v513 > v636)
    v638 = 3;
  else
    v638 = 0;
  STACK[0x38D0] = v638;
  if (LODWORD(STACK[0x38E0]))
    v639 = 5;
  else
    v639 = 0;
  if (v106 >= 0xFFFFFFFFFFFFFFFBLL)
    v640 = 5;
  else
    v640 = 0;
  v641 = v640 + v106;
  v642 = STACK[0x38E8] + v641 + v639;
  if (v642 > 0xFFFFFFFFFFFFFFFALL || v641 > v642)
    v644 = 5;
  else
    v644 = 0;
  v645 = v644 + v642;
  v646 = 5 * v645;
  v647 = (__PAIR128__(4, 5) * v645) >> 64;
  v144 = __CFADD__(v647, v646);
  v648 = v647 + v646;
  if (v144)
    v649 = 5;
  else
    v649 = 0;
  v144 = __CFADD__(v649, v648);
  v650 = v649 + v648;
  v651 = v144;
  if (v650 > 0xFFFFFFFFFFFFFFFALL)
    v651 = 1;
  v652 = v650 + v534;
  if (v651)
    v653 = 5;
  else
    v653 = 0;
  v654 = v652 + v653;
  if (v79 >= 0xFFFFFFFFFFFFFFF7)
    v655 = 9;
  else
    v655 = 0;
  v144 = v654 >= v534;
  v656 = v655 + v79;
  if (!v144 || v654 > 0xFFFFFFFFFFFFFFFALL)
    v658 = 5;
  else
    v658 = 0;
  v144 = __CFADD__(v656, v435);
  v659 = v656 + v435;
  v660 = v144;
  if (v659 > 0xFFFFFFFFFFFFFFF6)
    v660 = 1;
  if (v660)
    v661 = 9;
  else
    v661 = 0;
  v662 = v661 + v659;
  v663 = 9 * v662;
  v664 = (__PAIR128__(8, 9) * v662) >> 64;
  if (v106 >= 0xFFFFFFFFFFFFFFF7)
    v665 = 9;
  else
    v665 = 0;
  v144 = __CFADD__(v664, v663);
  v666 = v664 + v663;
  if (v144)
    v667 = 9;
  else
    v667 = 0;
  v144 = __CFADD__(v667, v666);
  v668 = v667 + v666;
  v669 = v144;
  if (v668 > 0xFFFFFFFFFFFFFFF6)
    v669 = 1;
  v507 = v669 == 0;
  v670 = v665 + v106;
  v671 = v668 + v665 + v106;
  if (v507)
    v672 = 0;
  else
    v672 = 9;
  v673 = v671 + v672;
  if (v670 > v673 || v673 > 0xFFFFFFFFFFFFFFF6)
    v675 = 9;
  else
    v675 = 0;
  v676 = v675 + v673;
  v677 = 9 * v676;
  v678 = (__PAIR128__(8, 9) * v676) >> 64;
  v144 = __CFADD__(v678, v677);
  v679 = v678 + v677;
  if (v144)
    v680 = 9;
  else
    v680 = 0;
  v144 = __CFADD__(v680, v679);
  v681 = v680 + v679;
  v682 = v144;
  if (v681 > 0xFFFFFFFFFFFFFFF6)
    v682 = 1;
  v683 = v681 + v540;
  if (v682)
    v684 = 9;
  else
    v684 = 0;
  v685 = v683 + v684;
  if (v683 + v684 > 0xFFFFFFFFFFFFFFF6 || v540 > v685)
    v687 = 9;
  else
    v687 = 0;
  v688 = STACK[0x38F8] + v546;
  v689 = 15;
  if (LODWORD(STACK[0x38F0]))
    v690 = 15;
  else
    v690 = 0;
  v691 = v688 + v690;
  if (v688 + v690 <= 0xFFFFFFFFFFFFFFF0 && v691 >= v546)
    v689 = 0;
  v693 = STACK[0x3908] + v566;
  if (LODWORD(STACK[0x3900]))
    v694 = 17;
  else
    v694 = 0;
  v695 = v693 + v694;
  if (v693 + v694 <= 0xFFFFFFFFFFFFFFEELL && v695 >= v566)
    v697 = 0;
  else
    v697 = 17;
  v698 = STACK[0x3918] + v573;
  if (LODWORD(STACK[0x3910]))
    v699 = 33;
  else
    v699 = 0;
  v700 = v698 + v699;
  if (v698 + v699 <= 0xFFFFFFFFFFFFFFDELL && v700 >= v573)
    v702 = 0;
  else
    v702 = 33;
  if (v106 >= 0xFFFFFFFFFFFFFFD9)
    v703 = 39;
  else
    v703 = 0;
  v704 = v703 + v106;
  if (LODWORD(STACK[0x3920]))
    v705 = 39;
  else
    v705 = 0;
  v706 = STACK[0x3928] + v704 + v705;
  if (v704 > v706 || v706 > 0xFFFFFFFFFFFFFFD8)
    v708 = 39;
  else
    v708 = 0;
  v709 = v708 + v706;
  v710 = 39 * v709;
  v711 = 39 * ((v709 * (unsigned __int128)0x27uLL) >> 64);
  v144 = __CFADD__(v711, v710);
  v712 = v711 + v710;
  if (v144)
    v713 = 39;
  else
    v713 = 0;
  v144 = __CFADD__(v713, v712);
  v714 = v713 + v712;
  v715 = v144;
  if (v714 > 0xFFFFFFFFFFFFFFD8)
    v715 = 1;
  v716 = v714 + v580;
  if (v715)
    v717 = 39;
  else
    v717 = 0;
  v718 = v716 + v717;
  if (v718 < v580 || v718 > 0xFFFFFFFFFFFFFFD8)
    v720 = 39;
  else
    v720 = 0;
  v721 = 45;
  if (LODWORD(STACK[0x3930]))
    v722 = 45;
  else
    v722 = 0;
  v723 = STACK[0x3938] + v587 + v722;
  if (v723 >= v587 && v723 <= 0xFFFFFFFFFFFFFFD2)
    v721 = 0;
  if (LODWORD(STACK[0x3940]))
    v725 = 47;
  else
    v725 = 0;
  v726 = STACK[0x3BE0] + v607 + v725;
  if (v726 <= 0xFFFFFFFFFFFFFFD0 && v726 >= v607)
    v728 = 0;
  else
    v728 = 47;
  if (LODWORD(STACK[0x3BE8]))
    v729 = 53;
  else
    v729 = 0;
  if (v106 >= 0xFFFFFFFFFFFFFFCBLL)
    v730 = 53;
  else
    v730 = 0;
  v731 = v730 + v106;
  v732 = STACK[0x3BF8] + v731 + v729;
  if (v732 > 0xFFFFFFFFFFFFFFCALL || v731 > v732)
    v734 = 53;
  else
    v734 = 0;
  v735 = v734 + v732;
  v736 = 53 * v735;
  v737 = 53 * ((v735 * (unsigned __int128)0x35uLL) >> 64);
  v144 = __CFADD__(v737, v736);
  v738 = v737 + v736;
  if (v144)
    v739 = 53;
  else
    v739 = 0;
  v740 = v739 + v738;
  v741 = __CFADD__(v739, v738);
  v742 = STACK[0x3820];
  STACK[0x3918] = STACK[0x38D0] + v636;
  v743 = v658 + v654;
  STACK[0x3928] = v687 + v685;
  STACK[0x3920] = v689 + v691;
  STACK[0x3930] = v697 + v695;
  STACK[0x3940] = v702 + v700;
  STACK[0x3938] = v720 + v718;
  v744 = v721 + v723;
  v745 = STACK[0x3878] + STACK[0x3AB8] + STACK[0x3880];
  v746 = v728 + v726;
  v747 = STACK[0x3990];
  v748 = v569 + STACK[0x3990] + STACK[0x37D0];
  v749 = v509 > v742 || v742 == -1;
  v750 = STACK[0x3888];
  v751 = v742 + STACK[0x3888];
  if (v749)
    ++v751;
  if (v740 > 0xFFFFFFFFFFFFFFCALL)
    v741 = 1;
  if (v745 < STACK[0x3AB8] || v745 > 0xFFFFFFFFFFFFFFFCLL)
    v753 = 3;
  else
    v753 = 0;
  v507 = !v741;
  v754 = STACK[0x39A0];
  v755 = STACK[0x37F8] + STACK[0x39A0] + STACK[0x37F0];
  v756 = STACK[0x3998];
  v757 = STACK[0x3810] + STACK[0x3998] + STACK[0x3818];
  if (v507)
    v758 = 0;
  else
    v758 = 53;
  v759 = v740 + v614 + v758;
  if (v751 == -1 || v750 > v751)
    ++v751;
  STACK[0x33E0] = v751;
  if (v755 < v754 || v755 > 0xFFFFFFFFFFFFFFF6)
    v762 = 9;
  else
    v762 = 0;
  if (v748 < v747 || v748 > 0xFFFFFFFFFFFFFFEELL)
    v764 = 17;
  else
    v764 = 0;
  v144 = v759 >= v614;
  v765 = STACK[0x3988];
  v766 = STACK[0x3800] + STACK[0x3988] + STACK[0x3808];
  STACK[0x2090] = v753 + v745;
  v767 = STACK[0x39A8];
  v768 = v583 + STACK[0x39A8] + STACK[0x3828];
  v769 = STACK[0x3AB0];
  v770 = STACK[0x37D8] + STACK[0x3AB0] + STACK[0x37E8];
  v771 = STACK[0x3AA8];
  v772 = STACK[0x3890] + STACK[0x3AA8] + STACK[0x3898];
  v773 = STACK[0x39B8];
  v774 = v610 + STACK[0x39B8] + STACK[0x38A8];
  STACK[0x3BE8] = v764 + v748;
  STACK[0x3540] = v762 + v755;
  if (!v144 || v759 > 0xFFFFFFFFFFFFFFCALL)
    v776 = 53;
  else
    v776 = 0;
  v777 = v776 + v759;
  v778 = STACK[0x37E0];
  v779 = STACK[0x38B8] + STACK[0x37E0] + STACK[0x38C8];
  if (v756 > v757 || v757 > 0xFFFFFFFFFFFFFFFALL)
    v781 = 5;
  else
    v781 = 0;
  STACK[0x2088] = v781 + v757;
  if (v768 < v767 || v768 > 0xFFFFFFFFFFFFFFD8)
    v783 = 39;
  else
    v783 = 0;
  STACK[0x3438] = v783 + v768;
  if (v770 <= 0xFFFFFFFFFFFFFFDELL && v770 >= v769)
    v785 = 0;
  else
    v785 = 33;
  if (v766 > 0xFFFFFFFFFFFFFFF0 || v765 > v766)
    v787 = 15;
  else
    v787 = 0;
  STACK[0x2080] = v787 + v766;
  if (v773 > v774 || v774 > 0xFFFFFFFFFFFFFFD0)
    v789 = 47;
  else
    v789 = 0;
  STACK[0x3BE0] = v789 + v774;
  STACK[0x3BF8] = v785 + v770;
  v790 = v771 > v772 || v772 > 0xFFFFFFFFFFFFFFD2;
  v791 = 45;
  if (v790)
    v792 = 45;
  else
    v792 = 0;
  if (v779 < v778 || v779 > 0xFFFFFFFFFFFFFFCALL)
    v794 = 53;
  else
    v794 = 0;
  if (LODWORD(STACK[0x3948]))
    v795 = 15;
  else
    v795 = 0;
  v796 = v795 + STACK[0x3950];
  STACK[0x3380] = v792 + v772;
  if (LODWORD(STACK[0x3958]))
    v797 = 33;
  else
    v797 = 0;
  v798 = v797 + STACK[0x3C30];
  STACK[0x3C30] = v794 + v779;
  v799 = STACK[0x2570];
  v800 = v778 + STACK[0x2570];
  v801 = __CFADD__(v778, STACK[0x2570]);
  if (v800 > 0xFFFFFFFFFFFFFFCALL)
    v801 = 1;
  v144 = __CFADD__(v798, STACK[0x26E0]);
  v802 = v798 + STACK[0x26E0];
  v803 = v144;
  v144 = __CFADD__(v796, STACK[0x33A0]);
  v804 = v796 + STACK[0x33A0];
  v805 = v144;
  if (v804 > 0xFFFFFFFFFFFFFFF0)
    v805 = 1;
  if (v801)
    v806 = 53;
  else
    v806 = 0;
  if (LODWORD(STACK[0x3960]))
    v807 = 3;
  else
    v807 = 0;
  if (v805)
    v808 = 15;
  else
    v808 = 0;
  v809 = STACK[0x3968] + STACK[0x3970];
  v810 = v806 + v800;
  if (LODWORD(STACK[0x3978]))
    v811 = 5;
  else
    v811 = 0;
  if (v802 > 0xFFFFFFFFFFFFFFDELL)
    v803 = 1;
  v144 = __CFADD__(v810, v799);
  v812 = v810 + v799;
  v813 = v144;
  if (LODWORD(STACK[0x3B48]))
    v814 = 17;
  else
    v814 = 0;
  if (v803)
    v815 = 33;
  else
    v815 = 0;
  if (LODWORD(STACK[0x3BA0]))
    v816 = 9;
  else
    v816 = 0;
  if (LODWORD(STACK[0x3BB8]))
    v817 = 47;
  else
    v817 = 0;
  if (!LODWORD(STACK[0x3BC0]))
    v791 = 0;
  v144 = v809 >= STACK[0x38D8];
  v818 = v809 - STACK[0x38D8];
  v819 = v808 + v804;
  v820 = v811 + STACK[0x3B40];
  v821 = v816 + STACK[0x3BB0];
  v822 = v815 + v802;
  v823 = v814 + STACK[0x3B50];
  v824 = v807 + STACK[0x3980];
  v825 = !v144;
  if (v812 > 0xFFFFFFFFFFFFFFCALL)
    v813 = 1;
  if (LODWORD(STACK[0x3C50]))
    v826 = 39;
  else
    v826 = 0;
  v144 = v820 >= v743;
  v827 = v820 - v743;
  if (v144)
    v828 = 0;
  else
    v828 = -5;
  v144 = v824 >= STACK[0x3918];
  v829 = v824 - STACK[0x3918];
  if (v144)
    v830 = 0;
  else
    v830 = -3;
  if (v813)
    v831 = 53;
  else
    v831 = 0;
  v144 = v819 >= STACK[0x3920];
  v832 = v819 - STACK[0x3920];
  v833 = v791 + STACK[0x3C48];
  v834 = v818 - v825;
  if (v144)
    v835 = 0;
  else
    v835 = -15;
  v144 = v833 >= v744;
  v836 = v833 - v744;
  if (v144)
    v837 = 0;
  else
    v837 = -45;
  v144 = v821 >= STACK[0x3928];
  v838 = v821 - STACK[0x3928];
  v839 = v817 + STACK[0x3C40];
  v840 = v826 + STACK[0x3C58];
  if (v144)
    v841 = 0;
  else
    v841 = -9;
  v144 = v839 >= v746;
  v842 = v839 - v746;
  if (v144)
    v843 = 0;
  else
    v843 = -47;
  v844 = v823 - STACK[0x3930];
  if (v823 >= STACK[0x3930])
    v845 = 0;
  else
    v845 = -17;
  v144 = v834 >= v750;
  v846 = v834 - v750;
  v847 = !v144;
  v848 = v840 - STACK[0x3938];
  v849 = v830 + v829;
  v850 = v828 + v827;
  v851 = v831 + v812;
  if (v840 >= STACK[0x3938])
    v852 = 0;
  else
    v852 = -39;
  v144 = v851 >= v777;
  v853 = v851 - v777;
  if (v144)
    v854 = 0;
  else
    v854 = -53;
  v144 = v822 >= STACK[0x3940];
  v855 = v822 - STACK[0x3940];
  v856 = v835 + v832;
  STACK[0x1FE0] = v846 - v847;
  v857 = v843 + v842;
  v858 = v837 + v836;
  v859 = v841 + v838;
  v860 = v854 + v853;
  v861 = v852 + v848;
  v862 = v845 + v844;
  if (v144)
    v863 = 0;
  else
    v863 = -33;
  v864 = v863 + v855;
  if (v849 >= STACK[0x3AB8])
    v865 = 0;
  else
    v865 = -3;
  STACK[0x1FF0] = v849 - STACK[0x3AB8] + v865;
  v144 = v856 >= STACK[0x3988];
  v866 = v856 - STACK[0x3988];
  if (v144)
    v867 = 0;
  else
    v867 = -15;
  STACK[0x1FD0] = v866 + v867;
  v144 = v850 >= STACK[0x3998];
  v868 = v850 - STACK[0x3998];
  v869 = -5;
  if (v144)
    v869 = 0;
  v144 = v859 >= STACK[0x39A0];
  v870 = v859 - STACK[0x39A0];
  if (v144)
    v871 = 0;
  else
    v871 = -9;
  v144 = v864 >= STACK[0x3AB0];
  v872 = v864 - STACK[0x3AB0];
  if (v144)
    v873 = 0;
  else
    v873 = -33;
  STACK[0x1FB8] = v872 + v873;
  STACK[0x1FD8] = v868 + v869;
  v144 = v861 >= STACK[0x39A8];
  v874 = v861 - STACK[0x39A8];
  if (v144)
    v875 = 0;
  else
    v875 = -39;
  STACK[0x1FA8] = v874 + v875;
  STACK[0x1FE8] = v870 + v871;
  v876 = v862 - STACK[0x3990];
  if (v862 >= STACK[0x3990])
    v877 = 0;
  else
    v877 = -17;
  STACK[0x1FC0] = v876 + v877;
  v878 = v857 - STACK[0x39B8];
  if (v857 >= STACK[0x39B8])
    v879 = 0;
  else
    v879 = -47;
  v144 = v858 >= STACK[0x3AA8];
  v880 = v858 - STACK[0x3AA8];
  v881 = -45;
  if (v144)
    v881 = 0;
  v144 = v860 >= v778;
  v882 = v860 - v778;
  if (v144)
    v883 = 0;
  else
    v883 = -53;
  STACK[0x1FC8] = v882 + v883;
  STACK[0x1FA0] = v878 + v879;
  STACK[0x1FB0] = v880 + v881;
  v884 = *(uint64_t (**)(void))(STACK[0x3C70] + 8 * (int)STACK[0x3AC8]);
  STACK[0x3880] = STACK[0x3500];
  STACK[0x21C8] = STACK[0x3B60];
  STACK[0x38F8] = STACK[0x3460];
  STACK[0x38F0] = STACK[0x3468];
  STACK[0x3920] = STACK[0x3470];
  STACK[0x3568] = STACK[0x3130];
  STACK[0x3918] = STACK[0x3478];
  STACK[0x3938] = STACK[0x3480];
  STACK[0x3560] = STACK[0x3138];
  STACK[0x3930] = STACK[0x3418];
  STACK[0x3878] = STACK[0x3508];
  v885 = STACK[0x3378];
  STACK[0x3980] = STACK[0x3378];
  STACK[0x3450] = v885;
  STACK[0x3928] = STACK[0x3510];
  STACK[0x21C0] = STACK[0x3C00];
  STACK[0x37D0] = STACK[0x3488];
  STACK[0x3558] = STACK[0x3140];
  STACK[0x37C8] = STACK[0x33E8];
  STACK[0x3908] = STACK[0x34E0];
  STACK[0x37C0] = STACK[0x3420];
  STACK[0x3550] = STACK[0x3148];
  STACK[0x3900] = STACK[0x33F0];
  STACK[0x37B8] = STACK[0x33F8];
  LODWORD(STACK[0x37D8]) = STACK[0x3400];
  v886 = STACK[0x3B68];
  STACK[0x3BB0] = STACK[0x3B68];
  STACK[0x3978] = v886;
  STACK[0x38E8] = STACK[0x3490];
  STACK[0x3910] = STACK[0x3518];
  STACK[0x37B0] = STACK[0x3428];
  STACK[0x21B8] = STACK[0x3C38];
  STACK[0x37A8] = STACK[0x3430];
  STACK[0x37A0] = STACK[0x3498];
  v887 = STACK[0x3370];
  STACK[0x3448] = STACK[0x3370];
  STACK[0x3960] = v887;
  STACK[0x3798] = STACK[0x34E8];
  STACK[0x3548] = STACK[0x3180];
  STACK[0x3790] = STACK[0x34F0];
  STACK[0x21B0] = STACK[0x3B58];
  STACK[0x36C0] = STACK[0x3A70];
  STACK[0x3788] = STACK[0x34A0];
  STACK[0x38E0] = STACK[0x34F8];
  STACK[0x3780] = STACK[0x3028];
  STACK[0x38B0] = STACK[0x3030];
  STACK[0x3778] = STACK[0x3038];
  STACK[0x38D0] = STACK[0x3520];
  STACK[0x38D8] = STACK[0x34B0];
  STACK[0x32C8] = STACK[0x3C68];
  STACK[0x38C8] = STACK[0x34A8];
  STACK[0x3770] = STACK[0x34B8];
  STACK[0x38C0] = STACK[0x3098];
  STACK[0x3768] = STACK[0x3040];
  STACK[0x36B8] = STACK[0x3A78];
  STACK[0x3760] = STACK[0x3048];
  v888 = STACK[0x3B78];
  STACK[0x3C38] = STACK[0x3B78];
  STACK[0x3958] = v888;
  STACK[0x21A8] = STACK[0x3BF0];
  STACK[0x3758] = STACK[0x3528];
  STACK[0x21A0] = STACK[0x3C78];
  STACK[0x3748] = STACK[0x30A0];
  STACK[0x32B8] = STACK[0x3C60];
  STACK[0x3740] = STACK[0x34C0];
  STACK[0x3738] = STACK[0x2FF8];
  STACK[0x32C0] = STACK[0x3360];
  STACK[0x38B8] = STACK[0x3530];
  STACK[0x3750] = STACK[0x3538];
  v889 = STACK[0x3238];
  STACK[0x33B0] = STACK[0x3238];
  STACK[0x3948] = v889;
  v890 = STACK[0x3350];
  STACK[0x3968] = STACK[0x3350];
  STACK[0x3570] = v890;
  v891 = STACK[0x3368];
  STACK[0x3388] = STACK[0x3368];
  STACK[0x3950] = v891;
  STACK[0x38A8] = STACK[0x30C8];
  STACK[0x38A0] = STACK[0x3578];
  v892 = STACK[0x3B70];
  STACK[0x3970] = STACK[0x3B70];
  STACK[0x3C78] = v892;
  STACK[0x3730] = STACK[0x3020];
  STACK[0x32B0] = STACK[0x3B88];
  v893 = STACK[0x3358];
  STACK[0x33D8] = STACK[0x3358];
  STACK[0x3940] = v893;
  STACK[0x36B0] = STACK[0x3A80];
  STACK[0x3728] = STACK[0x3050];
  STACK[0x3720] = STACK[0x30A8];
  STACK[0x32A8] = STACK[0x3B80];
  STACK[0x3718] = STACK[0x34C8];
  STACK[0x3700] = STACK[0x3000];
  STACK[0x36F8] = STACK[0x3058];
  STACK[0x3898] = STACK[0x34D0];
  STACK[0x32D8] = STACK[0x3B90];
  STACK[0x32A0] = STACK[0x3BD8];
  STACK[0x3708] = STACK[0x34D8];
  STACK[0x36E8] = STACK[0x3060];
  STACK[0x3890] = STACK[0x3068];
  STACK[0x2198] = STACK[0x3C08];
  STACK[0x3298] = STACK[0x3B98];
  STACK[0x36E0] = STACK[0x30B0];
  STACK[0x36A8] = STACK[0x3A88];
  STACK[0x36F0] = STACK[0x3088];
  STACK[0x36D8] = STACK[0x3008];
  STACK[0x36A0] = STACK[0x39C0];
  STACK[0x2190] = STACK[0x3C28];
  STACK[0x2188] = STACK[0x3C20];
  STACK[0x2180] = STACK[0x3BC8];
  STACK[0x2178] = STACK[0x3BD0];
  STACK[0x3698] = STACK[0x3A90];
  STACK[0x36D0] = STACK[0x3080];
  STACK[0x3690] = STACK[0x3A98];
  STACK[0x3C00] = 110;
  STACK[0x3440] = STACK[0x39B0];
  STACK[0x3398] = STACK[0x2080];
  STACK[0x1F98] = STACK[0x33E0];
  STACK[0x1F90] = STACK[0x3540];
  STACK[0x3BF0] = STACK[0x3A18];
  STACK[0x3390] = STACK[0x2088];
  STACK[0x33A8] = STACK[0x2090];
  return v884();
}

uint64_t sub_1006DF200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,int a63)
{
  unsigned __int8 a64;
  unsigned __int8 a65;
  unsigned __int8 a66;
  unsigned __int8 a67;
  unsigned __int8 a68;
  uint64_t a69;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  __int128 v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  __int128 v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  int v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unsigned int v447;
  unsigned int v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  unint64_t v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  unint64_t v519;
  uint64_t v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  unint64_t v544;
  unint64_t v545;
  uint64_t v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  unint64_t v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  unint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t (*v587)(unint64_t);

  v80 = v75;
  *((_QWORD *)&v81 + 1) = STACK[0x3BC8];
  *(_QWORD *)&v81 = STACK[0x3BD0];
  v82 = STACK[0x3A50] ^ STACK[0x3A78];
  v83 = STACK[0x3A48] ^ STACK[0x3A58];
  STACK[0x3BC8] = v78 ^ v72;
  v84 = (v81 >> 63) ^ STACK[0x3BF0];
  STACK[0x3BF0] = (*(__int128 *)&STACK[0x3B38] >> 63) ^ STACK[0x3BE0];
  v85 = (STACK[0x3C38] + 802374124) & 0xD02CD376;
  STACK[0x3BA0] = v85;
  *((_QWORD *)&v81 + 1) = a6 ^ v76;
  *(_QWORD *)&v81 = a6 ^ v76 ^ 0x1C7F50467F7B472CLL;
  v86 = a6 ^ STACK[0x3A98] ^ (v81 >> 1) ^ ((*((_QWORD *)&v81 + 1) ^ 0x1C7F50467F7B472CuLL) >> 6) ^ ((*((_QWORD *)&v81 + 1) ^ 0x1C7F50467F7B472CLL) << 58) ^ v73;
  v87 = a3 & v86 ^ v74;
  v88 = STACK[0x3A60] ^ 0x1CC9F84E50BF5308;
  v89 = v88 & v79 ^ a1 ^ a4 & a2;
  v90 = v89 ^ 0xA71E412C697AAE33 ^ __ROR8__(v89 ^ 0xA71E412C697AAE33, 7) ^ ((v89 ^ 0xA71E412C697AAE33) >> 41) ^ ((v89 ^ 0xA71E412C697AAE33) << (v85 - 95));
  v91 = STACK[0x3A68] ^ 0x415D7E19BDB6C404 ^ v89;
  v92 = 4647 * (LODWORD(STACK[0x4B8]) ^ 0x9A) + 25186740;
  STACK[0x3B18] = a3;
  v93 = 4647 * ((LODWORD(STACK[0x4BC]) + 111) ^ 0x1C) + 4767822;
  v94 = STACK[0x3C18];
  v95 = *(unsigned __int8 *)(STACK[0x3C18] + v93 - 6784 * (((1266205 * (unint64_t)v93) >> 32) >> 1)) ^ 0xFFFFFFE3;
  v96 = ((STACK[0x4D0] << 8) | (STACK[0x4C8] << 16) | STACK[0x4C0] | ((unint64_t)a66 << 32) | ((unint64_t)a65 << 40) | ((unint64_t)a64 << 48)) ^ v91 ^ (v91 >> 28) ^ __ROR8__(v91, 19) ^ (v91 << 36) ^ ((unint64_t)((*(_BYTE *)(STACK[0x3C18] + v92 - 6784 * (((1266205 * (unint64_t)v92) >> 32) >> 1)) ^ 0xC3) + 85) << 24) ^ ((unint64_t)((v95 >> 3) | (32 * v95)) << 56);
  v97 = STACK[0x3A70] ^ 0x7FD2A315B13225E6;
  v98 = v82 ^ STACK[0x3A90] & v97 ^ STACK[0x3A88] ^ a4 & a5;
  v99 = v98 ^ __ROR8__(v98, 10) ^ (v98 >> 17) ^ (v98 << 47);
  v100 = v83 ^ STACK[0x3A90] & a5 ^ *((_QWORD *)&v81 + 1) ^ a4 & v97;
  v101 = v100 ^ __ROR8__(v100, 10) ^ (v100 >> 17) ^ (v100 << 47);
  v102 = v69 ^ 0xB6E266C5E7231CA9;
  v103 = (v99 ^ 0x561E9BF1AAB02FABLL) & (v69 ^ 0xB6E266C5E7231CA9);
  v104 = v80;
  STACK[0x3BD8] = v101;
  v105 = v96 ^ v90;
  v106 = v96 ^ v90 ^ 0xE33607B1AF40ACF7;
  STACK[0x3BD0] = v106;
  v107 = v87 ^ v106;
  STACK[0x3B20] = v107;
  v108 = v103 ^ v80 ^ (v101 ^ 0xEE047D4949078B48) & v86 ^ v107;
  STACK[0x3BE0] = v108;
  v109 = v108 ^ 0x21EE5D6EFBD6C540;
  LODWORD(v103) = 4647 * (((v108 ^ 0x21EE5D6EFBD6C540) >> 54) & 0x80 | (v108 >> 62)) + 15836976;
  LODWORD(STACK[0x3B38]) = v103 - 6784 * (((1266205 * (unint64_t)v103) >> 32) >> 1);
  v110 = v88 & a2 ^ a5 ^ a4 & v79;
  v111 = v110 ^ 0x65325AEE93D979C9 ^ __ROR8__(v110 ^ 0x65325AEE93D979C9, 7) ^ ((v110 ^ 0x65325AEE93D979C9) >> 41) ^ ((v110 ^ 0x65325AEE93D979C9) << 23);
  v112 = v90 ^ v99;
  STACK[0x3B40] = v90 ^ v99;
  v113 = v111 ^ v101 ^ 0xBEEAEED41E53F149;
  v114 = v113 & (v101 ^ 0xEE047D4949078B48) ^ v70 ^ (v112 ^ 0x802D5CEA4ECDDA19) & (v99 ^ 0xA9E1640E554FD054);
  *((_QWORD *)&v81 + 1) = v114;
  *(_QWORD *)&v81 = v114 ^ 0x576B070D59E7720ALL;
  v115 = (v81 >> 1) ^ v114 ^ 0x576B070D59E7720ALL ^ ((v114 ^ 0x576B070D59E7720ALL) >> 6) ^ ((v114 ^ 0x576B070D59E7720ALL) << 58);
  v116 = v86 & v77 ^ STACK[0x3B18] & v70;
  v117 = 4647 * (((LODWORD(STACK[0x4DC]) >> 1) | (LOBYTE(STACK[0x4DC]) << 7)) ^ 0xD9) + 19140993;
  v118 = v71 ^ 0x1140734999799820 ^ v110 ^ (a67 | (STACK[0x4E0] << 8)) ^ ((v71 ^ 0x1140734999799820 ^ v110) >> 28) ^ __ROR8__(v71 ^ 0x1140734999799820 ^ v110, 19) ^ ((v71 ^ 0x1140734999799820 ^ v110) << 36);
  v119 = (unint64_t)(97
                                           * (*(_BYTE *)(v94
                                                       + v117
                                                       - 6784
                                                       * (((1266205 * (unint64_t)v117) >> 32) >> 1)) ^ 0x27)) << 16;
  v120 = ((STACK[0x4E8] << 32) | (STACK[0x4F0] << 24) | (STACK[0x290] << 48) | ((unint64_t)a68 << 40) | (a69 << 56)) ^ 0x8034F8D210A71E48 ^ v111 ^ ((v118 ^ -(uint64_t)v118 ^ (v119 - (v119 ^ v118))) + v119);
  v121 = v116 ^ v120;
  v122 = STACK[0x3BC8] ^ (v101 ^ 0xEE047D4949078B48) & v102 ^ (v99 ^ 0x561E9BF1AAB02FABLL) & v86 ^ v121;
  v123 = v122 ^ __ROR8__(v122, 61) ^ (v122 >> 39) ^ (v122 << 25);
  *((_QWORD *)&v81 + 1) = (v99 ^ 0xA9E1640E554FD054) & v113 ^ v86 ^ (v112 ^ 0x802D5CEA4ECDDA19) & (v101 ^ 0xEE047D4949078B48);
  *(_QWORD *)&v81 = *((_QWORD *)&v81 + 1) ^ 0x1C7F50467F7B472CLL;
  v124 = (v81 >> 1) ^ *((_QWORD *)&v81 + 1) ^ ((*((_QWORD *)&v81 + 1) ^ 0x1C7F50467F7B472CuLL) >> 6) ^ ((*((_QWORD *)&v81 + 1) ^ 0x1C7F50467F7B472CLL) << 58);
  v125 = STACK[0x3B18];
  v126 = v104 ^ 0x85A90EB2DE612496;
  v127 = v105 ^ 0x1CC9F84E50BF5308;
  v128 = (v105 ^ 0x1CC9F84E50BF5308) & (v104 ^ 0x85A90EB2DE612496) ^ v112 ^ 0x802D5CEA4ECDDA19 ^ v120 & STACK[0x3B18];
  LODWORD(v122) = 4647 * ((STACK[0x3B28] & 0x80 | (STACK[0x3C60] >> 57)) ^ 0xD9) + 19140993;
  LODWORD(v88) = v122 - 6784 * (((1266205 * (unint64_t)v122) >> 32) >> 1);
  v129 = STACK[0x3B20] ^ 0x415D7E19BDB6C404 ^ v128;
  v130 = v128 ^ 0xA71E412C697AAE33 ^ __ROR8__(v128 ^ 0xA71E412C697AAE33, 7) ^ ((v128 ^ 0xA71E412C697AAE33) >> 41) ^ ((v128 ^ 0xA71E412C697AAE33) << 23);
  v131 = v129 ^ (bswap64(STACK[0x3C60] & 0xFFFFFF00FFFFLL) & 0xFFFFFFFFFFFF0000 | ((unint64_t)(97 * (LODWORD(STACK[0x3AB0]) ^ 0x27)) << 8) | ((unint64_t)(((LOBYTE(STACK[0x3AA8]) + 117) ^ 0x12 ^ ((LODWORD(STACK[0x3AA8]) + 117) >> 2) & 0x12) + 26) << 40) | (97 * (*(_BYTE *)(v94 + v88) ^ 0x27))) ^ (v129 >> 28) ^ __ROR8__(v129, 19) ^ (v129 << 36);
  v132 = (97 * (*(_BYTE *)(v94 + LODWORD(STACK[0x3B38])) ^ 0xA2)) ^ (8 * v109) ^ (v109 >> 39) ^ (v109 << 25);
  v133 = v115 ^ v132 ^ v109;
  STACK[0x3C60] = v124 ^ v123;
  v134 = v131 ^ v130;
  v135 = v124 ^ v123 ^ 0xA30B318A6E540273;
  STACK[0x3BC8] = v134 ^ 0xE33607B1AF40ACF7;
  v136 = v132 ^ v109 ^ 0x7A56F14D219EDB69;
  v137 = v133 ^ 0x491D993A18DCE356;
  v138 = v135 & (v123 ^ 0x59FA826EDF7DF197) ^ v134 ^ 0xE33607B1AF40ACF7 ^ (v133 ^ 0x491D993A18DCE356) & v136;
  v139 = v127 & v125 ^ v113 ^ v120 & v126;
  LODWORD(v124) = LODWORD(STACK[0x3AB8]) - 71;
  v140 = v121 ^ 0x1140734999799820 ^ v139;
  v141 = v139 ^ 0x65325AEE93D979C9 ^ __ROR8__(v139 ^ 0x65325AEE93D979C9, 7) ^ ((v139 ^ 0x65325AEE93D979C9) >> 41) ^ ((v139 ^ 0x65325AEE93D979C9) << 23);
  v142 = STACK[0x3BE8];
  v143 = STACK[0x3B40] ^ 0x7FD2A315B13225E6;
  v144 = v114 ^ v99 ^ v120 & v113 ^ STACK[0x3BD0] & v143;
  v145 = v134 ^ 0x1CC9F84E50BF5308;
  v146 = v132 ^ v109 ^ 0x85A90EB2DE612496;
  v147 = (((unint64_t)(97 * (LODWORD(STACK[0x3AC0]) ^ 0xA2)) << 16) | ((unint64_t)(((LODWORD(STACK[0x3AC8]) - 87) ^ 0xFB) + 85) << 48) | ((unint64_t)((v124 ^ ((_BYTE)v124 << 6) ^ (4 * v124) ^ 0xFE) + 26) << 40)) ^ 0x8034F8D210A71E48 ^ HIBYTE(v142) ^ (v142 << 56) ^ (v142 >> 40) & 0xFF00 ^ (v142 >> 8) & 0xFF000000 ^ (v142 << 8) & 0xFF00000000 ^ v140 ^ (v140 >> 28) ^ __ROR8__(v140, 19) ^ (v140 << 36) ^ v141;
  v148 = ((v144 ^ 0xEFA762CC208EBE14) >> 17) ^ __ROR8__(v144 ^ 0xEFA762CC208EBE14, 10) ^ ((v144 ^ 0xEFA762CC208EBE14) << 47);
  v149 = v148 ^ v144 ^ 0xEFA762CC208EBE14;
  v150 = v149 ^ v130;
  v151 = v150 ^ 0x802D5CEA4ECDDA19;
  v152 = v145 & v146 ^ v150 ^ 0x802D5CEA4ECDDA19 ^ v147 & (v123 ^ 0x59FA826EDF7DF197);
  v153 = v152 ^ 0xA71E412C697AAE33 ^ __ROR8__(v152 ^ 0xA71E412C697AAE33, 7) ^ ((v152 ^ 0xA71E412C697AAE33) >> 41) ^ ((v152 ^ 0xA71E412C697AAE33) << 23);
  v154 = v138 ^ 0x415D7E19BDB6C404 ^ v152 ^ (bswap64(STACK[0x3C30] & 0xFFFFFFFFFFFF00FFLL) | ((unint64_t)((LODWORD(STACK[0x3AD0]) ^ 0xC3) + 85) << 48)) ^ ((v138 ^ 0x415D7E19BDB6C404 ^ v152) >> 28) ^ __ROR8__(v138 ^ 0x415D7E19BDB6C404 ^ v152, 19) ^ ((v138 ^ 0x415D7E19BDB6C404 ^ v152) << 36);
  v155 = *((_QWORD *)&v81 + 1) ^ STACK[0x3BD8] ^ v120 & v143 ^ STACK[0x3BD0] & v113;
  STACK[0x3BD8] = v155;
  v156 = v132 ^ STACK[0x3BE0];
  v157 = ((v155 ^ 0x99991ABAC25C5BF6) >> 17) ^ __ROR8__(v155 ^ 0x99991ABAC25C5BF6, 10) ^ ((v155 ^ 0x99991ABAC25C5BF6) << 47);
  v158 = v157 ^ v155 ^ 0x99991ABAC25C5BF6;
  v159 = v158 ^ 0xEE047D4949078B48;
  v160 = v133 ^ 0xB6E266C5E7231CA9;
  v161 = v156 ^ (v158 ^ 0xEE047D4949078B48) & v135 ^ (v149 ^ 0x561E9BF1AAB02FABLL) & (v133 ^ 0xB6E266C5E7231CA9) ^ v138;
  v162 = v161 ^ __ROR8__(v161, 61) ^ (v161 >> 39) ^ (v161 << 25);
  v163 = (v158 ^ 0xEE047D4949078B48) & v160 ^ v123 ^ (v149 ^ 0x561E9BF1AAB02FABLL) & v135;
  v164 = v141 ^ 0xBEEAEED41E53F149 ^ v158;
  v165 = v145 & (v123 ^ 0x59FA826EDF7DF197) ^ v164 ^ v147 & v146;
  v166 = v165 ^ 0x65325AEE93D979C9 ^ __ROR8__(v165 ^ 0x65325AEE93D979C9, 7) ^ ((v165 ^ 0x65325AEE93D979C9uLL) >> 41) ^ ((v165 ^ 0x65325AEE93D979C9) << 23);
  STACK[0x3BD0] = v166;
  v167 = v135 & v136 ^ (v123 ^ 0x59FA826EDF7DF197) & v137 ^ v147;
  v168 = v163 ^ v167;
  STACK[0x3C30] = v163 ^ v167;
  v169 = v167 ^ 0x1140734999799820 ^ v165;
  LODWORD(v163) = 4647 * ((BYTE3(v84) + 111) ^ 0x36) + 17937420;
  v170 = STACK[0x3C18];
  LOBYTE(v163) = *(_BYTE *)(STACK[0x3C18]
                          + v163
                          - 6784 * (((1266205 * (unint64_t)v163) >> 32) >> 1)) ^ 0xE;
  v171 = (v84 << 24) & 0xFF0000000000 ^ 0x8034F8D210A71E48 ^ (v84 << 40) & 0xFF000000000000 ^ (HIBYTE(v84) | ((unint64_t)((v163 >> 3) | (32 * v163)) << 32) | (v84 << 56) | (v84 >> 40) & 0xFF00 | (v84 >> 24) & 0xFF0000 | (v84 >> 8) & 0xFF000000) ^ v169 ^ (v169 >> 28) ^ __ROR8__(v169, 19) ^ (v169 << 36);
  v172 = v149 ^ 0xA9E1640E554FD054;
  v173 = v159 & v164 ^ (v150 ^ 0x802D5CEA4ECDDA19) & (v149 ^ 0xA9E1640E554FD054) ^ v137;
  v174 = v150 ^ 0x7FD2A315B13225E6;
  v175 = STACK[0x3BC8];
  v176 = v148 ^ v144 ^ STACK[0x3BC8] & (v150 ^ 0x7FD2A315B13225E6) ^ v173 ^ v147 & v164;
  v177 = v176 ^ __ROR8__(v176, 10) ^ (v176 >> 17) ^ (v176 << 47);
  v178 = v154 ^ v153;
  v179 = ((v168 ^ 0xF4A2A40CEB3C775) >> 39) ^ __ROR8__(v168 ^ 0xF4A2A40CEB3C775, 61) ^ ((v168 ^ 0xF4A2A40CEB3C775) << 25);
  v180 = v179 ^ v168 ^ 0xF4A2A40CEB3C775;
  v181 = v171 ^ v166;
  STACK[0x3BE8] = v177 ^ v153;
  v182 = v180 ^ 0x59FA826EDF7DF197;
  v183 = v177 ^ v153 ^ 0x802D5CEA4ECDDA19;
  STACK[0x3BE0] = v183;
  v184 = v154 ^ v153 ^ 0x1CC9F84E50BF5308;
  v185 = v184 & (v162 ^ 0x85A90EB2DE612496) ^ v183 ^ (v171 ^ v166) & (v180 ^ 0x59FA826EDF7DF197);
  v186 = v185 ^ 0xA71E412C697AAE33 ^ __ROR8__(v185 ^ 0xA71E412C697AAE33, 7) ^ ((v185 ^ 0xA71E412C697AAE33) >> 41) ^ ((v185 ^ 0xA71E412C697AAE33) << 23);
  v187 = (v173 ^ 0x576B070D59E7720ALL) >> 1;
  v188 = v173 & 0x80;
  if ((v187 & v173 & 0x80) != 0)
    v188 = -v188;
  v189 = (v173 ^ 0x576B070D59E7720ALL) & 0xFFFFFFFFFFFFFF7FLL ^ (v173 << 63) ^ ((v173 ^ 0x576B070D59E7720ALL) >> 6) ^ ((v173 ^ 0x576B070D59E7720ALL) << 58) ^ v162 ^ (v188 + v187);
  v190 = v151 & v159 ^ v172 & v164;
  *((_QWORD *)&v191 + 1) = v190 ^ v135;
  *(_QWORD *)&v191 = v190 ^ v135 ^ 0x1C7F50467F7B472CLL;
  v192 = v190 ^ STACK[0x3C60] ^ (v191 >> 1) ^ ((unint64_t)v191 >> 6) ^ ((_QWORD)v191 << 58) ^ v180;
  v193 = v189 ^ 0x491D993A18DCE356;
  v194 = v192 & v182 ^ (v189 ^ 0x491D993A18DCE356) & (v162 ^ 0x7A56F14D219EDB69) ^ v178;
  v195 = v194 ^ 0xA26B79A812F668F3 ^ v185;
  v196 = STACK[0x3C48];
  v197 = *(_BYTE *)(v170
                  + 4647 * (BYTE3(v196) ^ 0xFE)
                  + 13123128
                  - 6784
                  * (((1266205 * (unint64_t)(4647 * (BYTE3(v196) ^ 0xFE) + 13123128)) >> 32) >> 1))
       - 71;
  v198 = v195 ^ (bswap64(STACK[0x3C48] & 0xFFFF00FF00FF00FFLL) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)(((LOBYTE(STACK[0x3AD8]) ^ 0xE3) >> 3) | (32 * (LOBYTE(STACK[0x3AD8]) ^ 0xE3))) << 48) | ((unint64_t)(((*(_BYTE *)(v170 + 4647 * (BYTE5(v196) ^ 0xB8) + 9544938 - 6784 * (((1266205 * (unint64_t)(4647 * (BYTE5(v196) ^ 0xB8u) + 9544938)) >> 32) >> 1)) - 87) ^ 0xFB) + 85) << 16) | ((unint64_t)((v197 ^ (v197 << 6) ^ (4 * v197) ^ 0xFE) + 26) << 32)) ^ (v195 >> 28) ^ __ROR8__(v195, 19) ^ (v195 << 36);
  v199 = v157 ^ STACK[0x3BD8] ^ v175 & v164 ^ *((_QWORD *)&v191 + 1) ^ v147 & v174;
  v200 = v199 ^ __ROR8__(v199, 10) ^ (v199 >> 17) ^ (v199 << 47);
  v201 = v189 ^ 0xB6E266C5E7231CA9;
  v202 = v162 ^ 0xC2D85ADF549669B7 ^ (v177 ^ 0x561E9BF1AAB02FABLL) & (v189 ^ 0xB6E266C5E7231CA9) ^ (v200 ^ 0xEE047D4949078B48) & v192 ^ v194;
  v203 = v202 ^ __ROR8__(v202, 61) ^ (v202 >> 39) ^ (v202 << 25);
  v204 = v192 & (v162 ^ 0x7A56F14D219EDB69) ^ v182 & v193;
  v205 = v184 & v182;
  v206 = STACK[0x3BD0] ^ v200 ^ 0xBEEAEED41E53F149;
  v207 = v205 ^ v206 ^ v181 & (v162 ^ 0x85A90EB2DE612496);
  v208 = v204 ^ v181;
  v209 = v208 ^ 0x1140734999799820 ^ v207;
  v210 = v207 ^ 0x65325AEE93D979C9 ^ __ROR8__(v207 ^ 0x65325AEE93D979C9, 7) ^ ((v207 ^ 0x65325AEE93D979C9) >> 41) ^ ((v207 ^ 0x65325AEE93D979C9) << 23);
  v211 = STACK[0x3C20];
  v212 = v179 ^ STACK[0x3C30] ^ (v200 ^ 0xEE047D4949078B48) & v201 ^ (v177 ^ 0x561E9BF1AAB02FABLL) & v192 ^ v208;
  v213 = v212 ^ __ROR8__(v212, 61) ^ (v212 >> 39) ^ (v212 << 25);
  v214 = (v200 ^ 0xEE047D4949078B48) & v206 ^ v193;
  v215 = v177 ^ 0xA9E1640E554FD054;
  v216 = STACK[0x3BE0];
  v217 = v214 ^ STACK[0x3BE0] & (v177 ^ 0xA9E1640E554FD054);
  v218 = STACK[0x3BE8] ^ 0x7FD2A315B13225E6;
  v219 = v178 ^ 0xE33607B1AF40ACF7;
  v220 = (v178 ^ 0xE33607B1AF40ACF7) & v218 ^ v177 ^ v181 & v206;
  v221 = v198 ^ v186;
  v222 = (v211 << 24) & 0xFF0000000000 ^ 0x8034F8D210A71E48 ^ (v211 << 40) & 0xFF000000000000 ^ ((v211 >> 40) & 0xFF00 | (v211 >> 24) & 0xFF0000 | (v211 >> 8) & 0xFF000000 | (97 * (LODWORD(STACK[0x3AE0]) ^ 0x27)) | ((unint64_t)(((LODWORD(STACK[0x3AE8]) - 87) ^ 0xFB) + 85) << 32) | ((unint64_t)((LODWORD(STACK[0x3AF0]) ^ 0xFFFFFFC3) + 85) << 56)) ^ v209 ^ (v209 >> 28) ^ __ROR8__(v209, 19) ^ (v209 << 36) ^ v210;
  v223 = v220 ^ v217;
  v224 = v220 ^ v217 ^ 0xEFA762CC208EBE14;
  v225 = (v224 >> 17) ^ __ROR8__(v224, 10) ^ (v224 << 47);
  v226 = v225 ^ v224;
  v227 = v225 ^ v224 ^ v186;
  v228 = v213 ^ 0x59FA826EDF7DF197;
  v229 = v213;
  STACK[0x3C30] = v213;
  v230 = v227 ^ 0x802D5CEA4ECDDA19;
  v231 = v221 ^ 0x1CC9F84E50BF5308;
  v232 = v222 & (v213 ^ 0x59FA826EDF7DF197) ^ v227 ^ 0x802D5CEA4ECDDA19 ^ (v221 ^ 0x1CC9F84E50BF5308) & (v203 ^ 0x85A90EB2DE612496);
  STACK[0x3C60] = v232 ^ 0xA71E412C697AAE33 ^ __ROR8__(v232 ^ 0xA71E412C697AAE33, 7) ^ ((v232 ^ 0xA71E412C697AAE33) >> 41) ^ ((v232 ^ 0xA71E412C697AAE33) << 23);
  v233 = v206 & v215 ^ v192 ^ v216 & (v200 ^ 0xEE047D4949078B48);
  *((_QWORD *)&v191 + 1) = v217;
  *(_QWORD *)&v191 = v217 ^ 0x576B070D59E7720ALL;
  v234 = (v191 >> 1) ^ v217 ^ 0x576B070D59E7720ALL ^ ((v217 ^ 0x576B070D59E7720ALL) >> 6) ^ ((v217 ^ 0x576B070D59E7720ALL) << 58);
  v235 = v181 & v218 ^ v200 ^ v219 & v206 ^ v233;
  v236 = ((v235 ^ 0x99991ABAC25C5BF6) >> 17) ^ __ROR8__(v235 ^ 0x99991ABAC25C5BF6, 10) ^ ((v235 ^ 0x99991ABAC25C5BF6) << 47);
  v237 = v236 ^ v235 ^ 0x99991ABAC25C5BF6;
  v238 = v210 ^ 0xBEEAEED41E53F149 ^ v237;
  v239 = v237 ^ 0xEE047D4949078B48;
  STACK[0x3BE8] = v234 ^ v203;
  v240 = v234 ^ v203 ^ 0x491D993A18DCE356;
  v241 = v238 & (v237 ^ 0xEE047D4949078B48) ^ v240 ^ (v227 ^ 0x802D5CEA4ECDDA19) & (v225 ^ v224 ^ 0xA9E1640E554FD054);
  v242 = v227 ^ 0x7FD2A315B13225E6;
  v243 = v221 ^ 0xE33607B1AF40ACF7;
  v244 = v225 ^ v223 ^ v222 & v238 ^ v242 & (v221 ^ 0xE33607B1AF40ACF7) ^ v241;
  *((_QWORD *)&v191 + 1) = v233;
  *(_QWORD *)&v191 = v233 ^ 0x1C7F50467F7B472CLL;
  STACK[0x3C20] = v244 ^ __ROR8__(v244, 10) ^ (v244 >> 17) ^ (v244 << 47);
  v245 = (v191 >> 1) ^ v233 ^ ((v233 ^ 0x1C7F50467F7B472CLL) >> 6) ^ ((v233 ^ 0x1C7F50467F7B472CLL) << 58) ^ v229;
  STACK[0x3C48] = v245;
  v246 = v245 ^ 0xA30B318A6E540273;
  v247 = v240 & (v203 ^ 0x7A56F14D219EDB69) ^ (v245 ^ 0xA30B318A6E540273) & v228 ^ v221 ^ 0xE33607B1AF40ACF7;
  v248 = v247 ^ 0x415D7E19BDB6C404 ^ v232;
  v249 = STACK[0x3C40];
  LODWORD(v232) = (4647 * (((v249 >> 9) & 0x80 | (v249 >> 17) & 0x7F) ^ 0xD9) + 19140993) & 0x17FFFFF;
  LODWORD(v223) = (97 * (LODWORD(STACK[0x3AF8]) ^ 0xA2)) ^ 0xB8;
  v250 = ((v249 >> 40) & 0xFF00 | HIBYTE(v249) | (v249 >> 24) & 0xFF0000 | (v249 >> 8) & 0xFF000000 | ((unint64_t)BYTE3(v249) << 32) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE1(v249) << 48) | ((unint64_t)(97 * (*(_BYTE *)(STACK[0x3C18] + v232 - 6784 * (((1266205 * (unint64_t)v232) >> 32) >> 1)) ^ 0x27)) << 40)) ^ ((unint64_t)(((*(unsigned __int8 *)(STACK[0x3C18] + 4647 * (_DWORD)v223 + 9544938 - 6784 * (((1266205 * (unint64_t)(4647 * v223 + 9544938)) >> 32) >> 1)) - 87) ^ 0xFFFFFFFB) + 85) << 56) ^ v248 ^ (v248 >> 28) ^ __ROR8__(v248, 19) ^ (v248 << 36);
  v251 = v203 ^ 0x7A56F14D219EDB69 ^ v222;
  if (!STACK[0x3BF8])
    v251 = v203 ^ 0x85A90EB2DE612496;
  v252 = v231 & v228 ^ v238 ^ v251 & v222;
  v253 = v252 ^ 0x65325AEE93D979C9 ^ __ROR8__(v252 ^ 0x65325AEE93D979C9, 7) ^ ((v252 ^ 0x65325AEE93D979C9) >> 41) ^ ((v252 ^ 0x65325AEE93D979C9) << 23);
  v254 = v246 & (v203 ^ 0x7A56F14D219EDB69) ^ v240 & v228 ^ v222;
  v255 = v254 ^ 0x1140734999799820 ^ v252;
  v256 = STACK[0x3C28];
  v257 = ((v256 << 8) & 0xFF00000000 | ((unint64_t)BYTE2(v256) << 40) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)BYTE1(v256) << 48)) ^ bswap64(STACK[0x3C28] & 0xFF000000FFLL ^ 0x481EA710D2F83480) ^ (((LOBYTE(STACK[0x3B00]) ^ 0xE3) >> 3) | (32 * (LOBYTE(STACK[0x3B00]) ^ 0xE3))) ^ ((unint64_t)(((LOBYTE(STACK[0x3B08]) ^ 0xE3) >> 3) | (32 * (LOBYTE(STACK[0x3B08]) ^ 0xE3))) << 8) ^ ((unint64_t)(((LOBYTE(STACK[0x3B10]) - 71) ^ ((LOBYTE(STACK[0x3B10]) - 71) << 6) ^ (4 * (LOBYTE(STACK[0x3B10]) - 71)) ^ 0xFE) + 26) << 16) ^ v255 ^ (v255 >> 28) ^ __ROR8__(v255, 19) ^ (v255 << 36);
  v258 = v230 & v239 ^ (v226 ^ 0xA9E1640E554FD054) & v238;
  v259 = v236 ^ v235 ^ v243 & v238 ^ v242 & v222 ^ v258 ^ v246;
  v260 = v259 ^ __ROR8__(v259, 10) ^ (v259 >> 17) ^ (v259 << 47);
  v261 = STACK[0x3BE8] ^ 0xB6E266C5E7231CA9;
  v262 = v203 ^ 0x21EE5D6EFBD6C540 ^ (v226 ^ 0x561E9BF1AAB02FABLL) & v261 ^ v239 & v246 ^ v247;
  v263 = v262 ^ __ROR8__(v262, 61) ^ (v262 >> 39) ^ (v262 << 25);
  *((_QWORD *)&v264 + 1) = v241;
  *(_QWORD *)&v264 = v241 ^ 0x576B070D59E7720ALL;
  v265 = STACK[0x3C60];
  v266 = v250 ^ STACK[0x3C60];
  v267 = STACK[0x3C20];
  v268 = v257 ^ v253;
  v269 = v253 ^ 0xBEEAEED41E53F149 ^ v260;
  v270 = (v264 >> 1) ^ v241 ^ 0x576B070D59E7720ALL ^ ((v241 ^ 0x576B070D59E7720ALL) >> 6) ^ ((v241 ^ 0x576B070D59E7720ALL) << 58) ^ v263;
  v271 = STACK[0x3C20] ^ STACK[0x3C60] ^ 0x802D5CEA4ECDDA19;
  v272 = v270 ^ 0x491D993A18DCE356;
  v273 = v260 ^ 0xEE047D4949078B48;
  v274 = v271 & (STACK[0x3C20] ^ 0xA9E1640E554FD054) ^ v270 ^ 0x491D993A18DCE356 ^ v269 & (v260 ^ 0xEE047D4949078B48);
  v275 = STACK[0x3C20] ^ STACK[0x3C60] ^ 0x7FD2A315B13225E6;
  v276 = v268 & v269 ^ STACK[0x3C20] ^ v275 & (v266 ^ 0xE33607B1AF40ACF7);
  v277 = v239 & v261 ^ STACK[0x3C30] ^ (v226 ^ 0x561E9BF1AAB02FABLL) & v246 ^ v254;
  STACK[0x3C60] = v277;
  v278 = v277 ^ 0xF4A2A40CEB3C775;
  v279 = ((v277 ^ 0xF4A2A40CEB3C775) >> 39) ^ __ROR8__(v277 ^ 0xF4A2A40CEB3C775, 61) ^ ((v277 ^ 0xF4A2A40CEB3C775) << 25);
  STACK[0x3C40] = v279;
  v280 = v279 ^ v278;
  v281 = v280 ^ 0x59FA826EDF7DF197;
  v282 = (v266 ^ 0x1CC9F84E50BF5308) & (v263 ^ 0x85A90EB2DE612496) ^ v267 ^ v265 ^ v268 & (v280 ^ 0x59FA826EDF7DF197);
  v283 = v282 ^ 0x27331DC627B7742ALL ^ __ROR8__(v282 ^ 0x27331DC627B7742ALL, 7) ^ ((v282 ^ 0x27331DC627B7742ALL) >> 41) ^ ((v282 ^ 0x27331DC627B7742ALL) << 23);
  *((_QWORD *)&v264 + 1) = v258 ^ v246;
  *(_QWORD *)&v264 = v258 ^ v246 ^ 0x1C7F50467F7B472CLL;
  v284 = v258 ^ STACK[0x3C48] ^ (v264 >> 1) ^ ((unint64_t)v264 >> 6) ^ ((_QWORD)v264 << 58) ^ v280;
  v285 = v269 & (v267 ^ 0xA9E1640E554FD054) ^ v284 ^ v271 & (v260 ^ 0xEE047D4949078B48);
  v286 = v268 & v275 ^ v260 ^ v269 & (v266 ^ 0xE33607B1AF40ACF7);
  v287 = v269 ^ v268 & (v263 ^ 0x85A90EB2DE612496) ^ (v266 ^ 0x1CC9F84E50BF5308) & (v280 ^ 0x59FA826EDF7DF197);
  v288 = v287 ^ 0x65325AEE93D979C9 ^ __ROR8__(v287 ^ 0x65325AEE93D979C9, 7) ^ ((v287 ^ 0x65325AEE93D979C9) >> 41) ^ ((v287 ^ 0x65325AEE93D979C9) << 23);
  v289 = v284 & (v280 ^ 0x59FA826EDF7DF197) ^ v266;
  v290 = v263 ^ 0x7A56F14D219EDB69;
  v291 = v289 ^ (v270 ^ 0x491D993A18DCE356) & (v263 ^ 0x7A56F14D219EDB69);
  v292 = v267 ^ 0x561E9BF1AAB02FABLL;
  v293 = v270 ^ 0xB6E266C5E7231CA9;
  v294 = (v267 ^ 0x561E9BF1AAB02FABLL) & (v270 ^ 0xB6E266C5E7231CA9) ^ v263;
  v295 = v276 ^ v274;
  *((_QWORD *)&v264 + 1) = v274;
  *(_QWORD *)&v264 = v274 ^ 0x576B070D59E7720ALL;
  v296 = v294 ^ (v260 ^ 0xEE047D4949078B48) & v284;
  v297 = (v264 >> 1) ^ v274 ^ 0x576B070D59E7720ALL ^ ((v274 ^ 0x576B070D59E7720ALL) >> 6) ^ ((v274 ^ 0x576B070D59E7720ALL) << 58);
  v298 = v276 ^ v274 ^ 0xEFA762CC208EBE14;
  v299 = (v298 >> 17) ^ __ROR8__(v298, 10) ^ (v298 << 47);
  v300 = v299 ^ v298;
  v301 = v286 ^ v285;
  v302 = v286 ^ v285 ^ 0x99991ABAC25C5BF6;
  v303 = (v302 >> 17) ^ __ROR8__(v302, 10) ^ (v302 << 47);
  v304 = v303 ^ v302;
  v305 = v288 ^ 0xBEEAEED41E53F149 ^ v304;
  v306 = v304 ^ 0xEE047D4949078B48;
  STACK[0x3C48] = v296 ^ v291;
  v307 = v296 ^ v291 ^ 0xC2D85ADF549669B7;
  v308 = (v307 >> 39) ^ __ROR8__(v307, 61) ^ (v307 << 25);
  STACK[0x3C28] = v308;
  v309 = v308 ^ v307;
  v310 = v297 ^ v308 ^ v307;
  STACK[0x3C30] = v310;
  v311 = v310 ^ 0x491D993A18DCE356;
  v312 = v300 ^ v283;
  v313 = v300 ^ v283 ^ 0x802D5CEA4ECDDA19;
  v314 = v306 & v305 ^ v310 ^ 0x491D993A18DCE356 ^ v313 & (v300 ^ 0xA9E1640E554FD054);
  v315 = v291 ^ 0x224625425C3BB2EALL ^ v282;
  v316 = v315 ^ (bswap64(STACK[0x3C50] & 0xFFFFFFFF00FFFFFFLL) | ((unint64_t)(((LOBYTE(STACK[0x3B30]) - 71) ^ ((LOBYTE(STACK[0x3B30]) - 71) << 6) ^ (4 * (LOBYTE(STACK[0x3B30]) - 71)) ^ 0xFE) + 26) << 32)) ^ (v315 >> 28) ^ __ROR8__(v315, 19) ^ (v315 << 36) ^ v283;
  v317 = v272 & v281 ^ v284 & v290 ^ v268;
  v318 = v317 ^ 0x1140734999799820 ^ v287;
  LODWORD(v268) = 4647 * ((97 * (LODWORD(STACK[0x3B50]) ^ 0x27) + 111) ^ 0x1C) + 4767822;
  LOBYTE(v268) = *(_BYTE *)(STACK[0x3C18]
                          + v268
                          - 6784 * (((1266205 * (unint64_t)v268) >> 32) >> 1)) ^ 0xE3;
  v319 = STACK[0x3C00];
  v320 = ((v319 >> 40) & 0xFF00 | (v319 << 56) | (v319 >> 24) & 0xFF0000 | ((unint64_t)BYTE3(v319) << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)BYTE2(v319) << 40) | (97 * (LODWORD(STACK[0x3B58]) ^ 0x27)) | ((unint64_t)(((LOBYTE(STACK[0x3B48]) ^ 0xE3) >> 3) | (32 * (LOBYTE(STACK[0x3B48]) ^ 0xE3))) << 24) | ((unint64_t)((v268 >> 3) | (32 * v268)) << 48)) ^ v318 ^ (v318 >> 28) ^ __ROR8__(v318, 19) ^ (v318 << 36) ^ v288;
  v321 = v320 ^ 0x8034F8D210A71E48;
  v322 = v299 ^ v295 ^ (v312 ^ 0x7FD2A315B13225E6) & (v316 ^ 0xE33607B1AF40ACF7) ^ v314 ^ (v320 ^ 0x8034F8D210A71E48) & v305;
  v323 = v322 ^ __ROR8__(v322, 10) ^ (v322 >> 17) ^ (v322 << 47);
  v324 = STACK[0x3C40] ^ STACK[0x3C60] ^ v273 & v293 ^ v292 & v284 ^ v317;
  v325 = v324 ^ __ROR8__(v324, 61) ^ (v324 >> 39) ^ (v324 << 25);
  v326 = v325 ^ 0x59FA826EDF7DF197;
  v327 = (v316 ^ 0x1CC9F84E50BF5308) & (v309 ^ 0x85A90EB2DE612496) ^ v312 ^ ((v325 ^ 0x2631854330251020 ^ v320)
                                                                               + (v320 ^ 0x8034F8D210A71E48 | v325 ^ 0x59FA826EDF7DF197)
                                                                               + 1);
  *((_QWORD *)&v264 + 1) = v285;
  *(_QWORD *)&v264 = v285 ^ 0x1C7F50467F7B472CLL;
  v328 = v327 ^ 0x27331DC627B7742ALL ^ __ROR8__(v327 ^ 0x27331DC627B7742ALL, 7) ^ ((v327 ^ 0x27331DC627B7742ALL) >> 41) ^ ((v327 ^ 0x27331DC627B7742ALL) << 23);
  v329 = (v264 >> 1) ^ v285 ^ ((v285 ^ 0x1C7F50467F7B472CLL) >> 6) ^ ((v285 ^ 0x1C7F50467F7B472CLL) << 58);
  v330 = v313 & v306 ^ v305 & (v300 ^ 0xA9E1640E554FD054);
  v331 = v303 ^ v301 ^ (v316 ^ 0xE33607B1AF40ACF7) & v305;
  v332 = v329 ^ v325;
  v333 = v329 ^ v325 ^ 0xA30B318A6E540273;
  v334 = v330 ^ v333;
  v335 = v331 ^ v330 ^ v333 ^ (v320 ^ 0x8034F8D210A71E48) & (v312 ^ 0x7FD2A315B13225E6);
  v336 = (v335 >> 10) & 0x400000000000;
  if ((v336 & v335) != 0)
    v336 = -v336;
  v337 = ((v335 >> 17) | (v335 << 54)) ^ (v335 << 47) ^ (v335 >> 10) & 0xFFFFBFFFFFFFFFFFLL ^ (v336 + v335);
  v338 = (v316 ^ 0x1CC9F84E50BF5308) & v326 ^ v305 ^ v321 & (v309 ^ 0x85A90EB2DE612496);
  v339 = v338 ^ 0x65325AEE93D979C9 ^ __ROR8__(v338 ^ 0x65325AEE93D979C9, 7) ^ ((v338 ^ 0x65325AEE93D979C9) >> 41) ^ ((v338 ^ 0x65325AEE93D979C9) << 23);
  STACK[0x3C40] = v339;
  v340 = v311 & (v309 ^ 0x7A56F14D219EDB69) ^ v316 ^ v333 & v326;
  v341 = v300 ^ 0x561E9BF1AAB02FABLL;
  v342 = STACK[0x3C30] ^ 0xB6E266C5E7231CA9;
  v343 = STACK[0x3C28] ^ STACK[0x3C48] ^ v306 & v333 ^ v341 & v342 ^ v340;
  v344 = v343 ^ __ROR8__(v343, 61) ^ (v343 >> 39) ^ (v343 << 25);
  *((_QWORD *)&v345 + 1) = v314;
  *(_QWORD *)&v345 = v314 ^ 0x576B070D59E7720ALL;
  STACK[0x3C60] = v337;
  v346 = v339 ^ 0xBEEAEED41E53F149 ^ v337;
  STACK[0x3C20] = v346;
  v347 = (v345 >> 1) ^ v314 ^ 0x576B070D59E7720ALL ^ ((v314 ^ 0x576B070D59E7720ALL) >> 6) ^ ((v314 ^ 0x576B070D59E7720ALL) << 58) ^ v344;
  v348 = v337 ^ 0xEE047D4949078B48;
  v349 = v347 ^ 0x491D993A18DCE356;
  v350 = v347 ^ 0x491D993A18DCE356 ^ v346 & (v337 ^ 0xEE047D4949078B48);
  STACK[0x3C48] = v323 ^ 0xA9E1640E554FD054;
  v351 = v323 ^ v328 ^ 0x802D5CEA4ECDDA19;
  STACK[0x3C50] = v351;
  v352 = v351 & (v323 ^ 0xA9E1640E554FD054) ^ v350;
  v353 = v333 & (v309 ^ 0x7A56F14D219EDB69) ^ v311 & v326 ^ v321;
  v354 = v325 ^ 0xF4A2A40CEB3C775 ^ v341 & v333 ^ v306 & v342 ^ v353;
  v355 = v354 ^ __ROR8__(v354, 61) ^ (v354 >> 39) ^ (v354 << 25);
  *((_QWORD *)&v345 + 1) = v330 ^ v333;
  *(_QWORD *)&v345 = v334 ^ 0x1C7F50467F7B472CLL;
  v356 = v330 ^ v332 ^ (v345 >> 1) ^ ((v334 ^ 0x1C7F50467F7B472CLL) >> 6) ^ ((v334 ^ 0x1C7F50467F7B472CLL) << 58) ^ v355;
  v357 = v344 ^ 0x7A56F14D219EDB69;
  v358 = v355 ^ 0x59FA826EDF7DF197;
  v359 = v340 ^ 0x224625425C3BB2EALL ^ v327 ^ (bswap64(STACK[0x3C68] & 0xFFFF00FFFFFFFFFFLL) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)(((LOBYTE(STACK[0x3B60]) ^ 0xE3) >> 3) | (32 * (LOBYTE(STACK[0x3B60]) ^ 0xE3))) << 16)) ^ ((v340 ^ 0x224625425C3BB2EALL ^ v327) >> 28) ^ __ROR8__(v340 ^ 0x224625425C3BB2EALL ^ v327, 19) ^ ((v340 ^ 0x224625425C3BB2EALL ^ v327) << 36) ^ v328;
  v360 = v347 ^ 0xB6E266C5E7231CA9;
  v361 = v344 ^ 0x85A90EB2DE612496;
  v362 = (v323 ^ 0x561E9BF1AAB02FABLL) & (v347 ^ 0xB6E266C5E7231CA9) ^ v344 ^ 0x85A90EB2DE612496 ^ v348 & v356;
  v363 = (v355 ^ 0x59FA826EDF7DF197) & v356 ^ (v347 ^ 0x491D993A18DCE356) & (v344 ^ 0x7A56F14D219EDB69) ^ v359;
  v364 = v362 ^ v363;
  v365 = v362 ^ v363 ^ 0x4771546D8AF74D21;
  LODWORD(v364) = 4647 * ((v364 >> 54) & 0x80 | (v365 >> 62)) + 15836976;
  v366 = v365 ^ (97
                                * (*(_BYTE *)(STACK[0x3C18]
                                            + v364
                                            - 6784
                                            * (((1266205 * (unint64_t)v364) >> 32) >> 1)) ^ 0xA2)) ^ (8 * v365) ^ (v365 >> 39) ^ (v365 << 25);
  v367 = (v352 ^ 0x576B070D59E7720ALL ^ ((v352 ^ 0x576B070D59E7720ALL) >> 1)) & 0xFFFFFFFFFFFDFFFFLL ^ __ROR8__(v352 ^ 0x576B070D59E7720ALL, 6) ^ ((v352 ^ 0x576B070D59E7720ALL ^ ((v352 ^ 0x576B070D59E7720ALL) >> 1)) & 0x20000 | (v352 << 63));
  v368 = v353 ^ 0x1140734999799820 ^ v338;
  v369 = STACK[0x3BF0];
  v370 = (BYTE3(STACK[0x3BF0]) + 111) ^ 0x1C;
  LOBYTE(v370) = *(_BYTE *)(STACK[0x3C18]
                          + 4647 * v370
                          + 4767822
                          - 6784
                          * (((1266205 * (unint64_t)(4647 * v370 + 4767822)) >> 32) >> 1)) ^ 0xE3;
  v371 = ((v369 << 24) & 0xFF0000000000 | ((unint64_t)BYTE1(v369) << 48)) ^ (HIBYTE(v369) | ((unint64_t)((v370 >> 3) | (32 * v370)) << 32) | (v369 << 56) | (v369 >> 40) & 0xFF00 | (v369 >> 24) & 0xFF0000 | (v369 >> 8) & 0xFF000000) ^ v368 ^ (v368 >> 28) ^ __ROR8__(v368, 19) ^ (v368 << 36) ^ STACK[0x3C40];
  v372 = v371 ^ 0x8034F8D210A71E48;
  v373 = STACK[0x3C20];
  v374 = (v359 ^ 0xE33607B1AF40ACF7) & (v323 ^ v328 ^ 0x7FD2A315B13225E6) ^ v323 ^ STACK[0x3C20] & (v371 ^ 0x8034F8D210A71E48) ^ v352;
  STACK[0x3C30] = v374;
  v375 = v356 & v357 ^ (v355 ^ 0x59FA826EDF7DF197) & v349 ^ v371;
  v376 = v355 ^ (v323 ^ 0x561E9BF1AAB02FABLL) & v356 ^ v348 & v360 ^ v375 ^ 0x8F7ED292DE14D93DLL;
  v377 = v376 ^ __ROR8__(v376, 61) ^ (v376 >> 39) ^ (v376 << 25);
  v378 = STACK[0x3C50];
  *((_QWORD *)&v345 + 1) = v373 & STACK[0x3C48] ^ v356 ^ v348 & STACK[0x3C50];
  *(_QWORD *)&v345 = *((_QWORD *)&v345 + 1) ^ 0x1C7F50467F7B472CLL;
  v379 = *((_QWORD *)&v345 + 1) ^ 0xA30B318A6E540273 ^ (v345 >> 1) ^ ((*((_QWORD *)&v345 + 1) ^ 0x1C7F50467F7B472CuLL) >> 6) ^ ((*((_QWORD *)&v345 + 1) ^ 0x1C7F50467F7B472CLL) << 58);
  v380 = v373;
  v381 = STACK[0x3C60] ^ v372 & (v323 ^ v328 ^ 0x7FD2A315B13225E6) ^ v373 & (v359 ^ 0xE33607B1AF40ACF7) ^ *((_QWORD *)&v345 + 1);
  STACK[0x3C48] = v381;
  v382 = v359 ^ 0x1CC9F84E50BF5308;
  v383 = v372 & (v355 ^ 0x59FA826EDF7DF197) ^ v378 ^ (v359 ^ 0x1CC9F84E50BF5308) & v361;
  v384 = v383 ^ 0xA71E412C697AAE33 ^ __ROR8__(v383 ^ 0xA71E412C697AAE33, 7) ^ ((v383 ^ 0xA71E412C697AAE33) >> 41) ^ ((v383 ^ 0xA71E412C697AAE33) << 23);
  v385 = v363 ^ 0xA26B79A812F668F3 ^ v383;
  v386 = v385 ^ (bswap64(STACK[0x3C58] & 0xFFFF00FFFFFFFFFFLL) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)(((LOBYTE(STACK[0x3B68]) + 117) ^ 0x12 ^ ((LODWORD(STACK[0x3B68]) + 117) >> 2) & 0x12) + 26) << 16)) ^ (v385 >> 28) ^ __ROR8__(v385, 19) ^ (v385 << 36) ^ v384;
  v387 = v377 ^ 0x59FA826EDF7DF197;
  v388 = v386 ^ 0xE33607B1AF40ACF7;
  v389 = v367 ^ v366 ^ 0x491D993A18DCE356;
  v390 = (v377 ^ 0x59FA826EDF7DF197) & (v379 ^ v377) ^ v386 ^ 0xE33607B1AF40ACF7 ^ v389 & (v366 ^ 0x7A56F14D219EDB69);
  v391 = v367 ^ v366 ^ 0xB6E266C5E7231CA9;
  v392 = ((v374 ^ 0xEFA762CC208EBE14) >> 17) ^ __ROR8__(v374 ^ 0xEFA762CC208EBE14, 10) ^ ((v374 ^ 0xEFA762CC208EBE14) << 47);
  STACK[0x3C28] = v392;
  v393 = v392 ^ v374 ^ 0xEFA762CC208EBE14;
  v394 = ((v381 ^ 0x99991ABAC25C5BF6) >> 17) ^ __ROR8__(v381 ^ 0x99991ABAC25C5BF6, 10) ^ ((v381 ^ 0x99991ABAC25C5BF6) << 47);
  STACK[0x3C40] = v394;
  v395 = v394 ^ v381 ^ 0x99991ABAC25C5BF6;
  v396 = v395 ^ 0xEE047D4949078B48;
  v397 = (v395 ^ 0xEE047D4949078B48) & (v379 ^ v377) ^ v366 ^ v391 & (v393 ^ 0x561E9BF1AAB02FABLL) ^ v390;
  STACK[0x3C50] = v397;
  v398 = v397 ^ 0x21EE5D6EFBD6C540;
  LODWORD(v352) = 4647 * ((((v397 ^ 0x21EE5D6EFBD6C540) >> 61) + 111) ^ 0x1C) + 4767822;
  v399 = STACK[0x3C18];
  LODWORD(v352) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + v352
                                     - 6784
                                     * (((1266205 * (unint64_t)v352) >> 32) >> 1)) ^ 0xFFFFFFE3;
  STACK[0x3C58] = (v352 >> 3) | (32 * v352);
  v400 = v382 & v358 ^ v372 & v361 ^ v380;
  v401 = v400 ^ 0x65325AEE93D979C9 ^ __ROR8__(v400 ^ 0x65325AEE93D979C9, 7) ^ ((v400 ^ 0x65325AEE93D979C9) >> 41) ^ ((v400 ^ 0x65325AEE93D979C9) << 23);
  v402 = v401 ^ 0xBEEAEED41E53F149 ^ v395;
  v403 = v393 ^ v384;
  v404 = v393 ^ v384 ^ 0x802D5CEA4ECDDA19;
  v405 = v404 & (v393 ^ 0xA9E1640E554FD054) ^ v402 & (v395 ^ 0xEE047D4949078B48) ^ v389;
  *((_QWORD *)&v345 + 1) = v405;
  *(_QWORD *)&v345 = v405 ^ 0x576B070D59E7720ALL;
  STACK[0x3C00] = (v345 >> 1) ^ v405 ^ 0x576B070D59E7720ALL ^ ((v405 ^ 0x576B070D59E7720ALL) >> 6) ^ ((v405 ^ 0x576B070D59E7720ALL) << 58);
  v406 = v375 ^ 0x91748B9B89DE8668 ^ v400;
  LODWORD(v375) = LODWORD(STACK[0x3B70]) - 71;
  v407 = STACK[0x3C08];
  v408 = (v407 << 8) & 0xFF00000000 ^ 0x8034F8D210A71E48 ^ (v407 << 24) & 0xFF0000000000 ^ (((v375 ^ ((_BYTE)v375 << 6) ^ (4 * v375) ^ 0xFE) + 26) | ((unint64_t)(97 * (LODWORD(STACK[0x3B80]) ^ 0x27)) << 24) | ((unint64_t)(((LODWORD(STACK[0x3B78]) ^ 0xEu) >> 3) | (32 * (LOBYTE(STACK[0x3B78]) ^ 0xE))) << 48) | (v407 << 56) | (v407 >> 40) & 0xFF00 | (v407 >> 24) & 0xFF0000) ^ v406 ^ (v406 >> 28) ^ __ROR8__(v406, 19) ^ (v406 << 36) ^ v401;
  v409 = (v366 ^ 0x7A56F14D219EDB69) & (v379 ^ v377) ^ v408 ^ v389 & (v377 ^ 0x59FA826EDF7DF197);
  v410 = (v393 ^ 0x561E9BF1AAB02FABLL) & (v379 ^ v377) ^ v377 ^ v391 & v396 ^ v409;
  STACK[0x3C60] = v410;
  *((_QWORD *)&v345 + 1) = v402 & (v393 ^ 0xA9E1640E554FD054) ^ v379 ^ v377 ^ v404 & v396;
  *(_QWORD *)&v345 = *((_QWORD *)&v345 + 1) ^ 0x1C7F50467F7B472CLL;
  v411 = v399;
  v412 = (((*(_BYTE *)(v399
                                      + 4647 * (v410 >> 61)
                                      + 10399986
                                      - 6784
                                      * (((1266205
                                                       * (unint64_t)(4647 * (v410 >> 61) + 10399986)) >> 32) >> 1))
                           - 87) ^ 0xFB)
                         + 85) ^ (8 * (v410 ^ 0xF4A2A40CEB3C775)) ^ ((v410 ^ 0xF4A2A40CEB3C775) >> 39) ^ ((v410 ^ 0xF4A2A40CEB3C775) << 25);
  STACK[0x3C68] = v412;
  v413 = v412 ^ v410 ^ 0xF4A2A40CEB3C775;
  v414 = v413 ^ 0x59FA826EDF7DF197;
  STACK[0x3C08] = v413 ^ 0x59FA826EDF7DF197;
  v415 = v413 ^ __ROR8__((((*((_QWORD *)&v345 + 1) ^ 0x1C7F50467F7B472CLL) & 0x3F) << 15) ^ __ROR8__((v345 >> 1) ^ *((_QWORD *)&v345 + 1) ^ 0x1C7F50467F7B472CLL ^ ((*((_QWORD *)&v345 + 1) ^ 0x1C7F50467F7B472CuLL) >> 6), 43) ^ 0x80DEEF14F1EE74FLL, 21) ^ 0x484E198C7E58CF27;
  v416 = v404 ^ v408 & v387;
  v417 = v366 ^ 0x85A90EB2DE612496;
  v418 = v386 ^ 0x1CC9F84E50BF5308;
  v419 = v416 ^ (v366 ^ 0x85A90EB2DE612496) & (v386 ^ 0x1CC9F84E50BF5308);
  v420 = v419 ^ 0xA71E412C697AAE33 ^ __ROR8__(v419 ^ 0xA71E412C697AAE33, 7) ^ ((v419 ^ 0xA71E412C697AAE33) >> 41) ^ ((v419 ^ 0xA71E412C697AAE33) << 23);
  LOBYTE(v396) = LODWORD(STACK[0x3BA8]) ^ 0xA2;
  LODWORD(v366) = LODWORD(STACK[0x3BB0]) ^ 0xE;
  v421 = bswap64(STACK[0x3C78] & 0xFF00FFFF) & 0xFFFFFFFFFFFF0000 | ((unint64_t)(97 * (LODWORD(STACK[0x3B90]) ^ 0x27)) << 8) | (((LOBYTE(STACK[0x3B88]) + 117) ^ 0x12 ^ ((LODWORD(STACK[0x3B88]) + 117) >> 2) & 0x12) + 26);
  LOBYTE(v416) = 97 * (LODWORD(STACK[0x3B98]) ^ 0xA2);
  LODWORD(STACK[0x3C20]) = 97;
  v422 = (v421 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v416 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(97 * v396) << 24) | ((unint64_t)((v366 >> 3) | (32 * v366)) << 40)) ^ v419 ^ 0x415D7E19BDB6C404 ^ v390 ^ ((v419 ^ 0x415D7E19BDB6C404 ^ v390) >> 28) ^ __ROR8__(v419 ^ 0x415D7E19BDB6C404 ^ v390, 19) ^ ((v419 ^ 0x415D7E19BDB6C404 ^ v390) << 36);
  v423 = STACK[0x3C58] ^ (8 * v398) ^ (v398 >> 39) ^ (v398 << 25);
  v424 = v423 ^ v398;
  v425 = v423 ^ v398 ^ 0x7A56F14D219EDB69;
  v426 = STACK[0x3C00] ^ v424;
  v427 = v426 ^ 0x491D993A18DCE356;
  STACK[0x3C58] = v422 ^ v420;
  v428 = v422 ^ v420 ^ 0xE33607B1AF40ACF7;
  v429 = v414 & v415 ^ v428 ^ (v426 ^ 0x491D993A18DCE356) & v425;
  STACK[0x3C78] = v429;
  v430 = STACK[0x3C28] ^ STACK[0x3C30] ^ v408 & v402 ^ (v403 ^ 0x7FD2A315B13225E6) & v388 ^ v405;
  v431 = v430 ^ __ROR8__(v430, 10) ^ (v430 >> 17) ^ (v430 << 47);
  v432 = v426 ^ 0xB6E266C5E7231CA9;
  v433 = STACK[0x3C40] ^ STACK[0x3C48] ^ v388 & v402 ^ (v403 ^ 0x7FD2A315B13225E6) & v408 ^ *((_QWORD *)&v345 + 1);
  v434 = v433 ^ __ROR8__(v433, 10) ^ (v433 >> 17) ^ (v433 << 47);
  STACK[0x3C48] = v424 ^ 0x85A90EB2DE612496;
  v435 = v434 ^ 0xEE047D4949078B48;
  v436 = v431 ^ 0x561E9BF1AAB02FABLL;
  v437 = v423 ^ STACK[0x3C50] ^ v415 & (v434 ^ 0xEE047D4949078B48) ^ (v426 ^ 0xB6E266C5E7231CA9) & (v431 ^ 0x561E9BF1AAB02FABLL) ^ v429;
  LODWORD(v426) = 4647 * ((v437 >> 61) ^ 0x9A) + 25186740;
  v438 = v437 ^ ((*(_BYTE *)(v411
                                            + v426
                                            - 6784
                                            * (((1266205 * (unint64_t)v426) >> 32) >> 1)) ^ 0xC3)
                                + 85) ^ (8 * v437) ^ (v437 >> 39) ^ (v437 << 25);
  v439 = v418 & v387 ^ v402 ^ v417 & v408;
  v440 = v439 ^ 0x65325AEE93D979C9 ^ __ROR8__(v439 ^ 0x65325AEE93D979C9, 7) ^ ((v439 ^ 0x65325AEE93D979C9) >> 41) ^ ((v439 ^ 0x65325AEE93D979C9) << 23);
  v441 = v431 ^ v420;
  v442 = v431 ^ v420 ^ 0x802D5CEA4ECDDA19;
  v443 = v440 ^ v434 ^ 0xBEEAEED41E53F149;
  v444 = v442 & (v431 ^ 0xA9E1640E554FD054) ^ (v434 ^ 0xEE047D4949078B48) & v443 ^ v427;
  *((_QWORD *)&v345 + 1) = v444;
  *(_QWORD *)&v345 = v444 ^ 0x576B070D59E7720ALL;
  v445 = v439 ^ 0x1140734999799820 ^ v409;
  v446 = STACK[0x3C10];
  LODWORD(v439) = 4647 * ((BYTE1(STACK[0x3C10]) + 111) ^ 0x36) + 17937420;
  LOBYTE(v439) = *(_BYTE *)(v411
                          + v439
                          - 6784 * (((1266205 * (unint64_t)v439) >> 32) >> 1)) ^ 0xE;
  LODWORD(v439) = 4647 * (((v439 >> 3) | (32 * v439)) ^ 0x9A) + 25186740;
  v447 = 4647 * ((STACK[0x3C10] + 111) ^ 0x1C) + 4767822;
  v448 = *(unsigned __int8 *)(v411 + v447 - 6784 * (((1266205 * (unint64_t)v447) >> 32) >> 1)) ^ 0xFFFFFFE3;
  LOBYTE(v420) = *(_BYTE *)(v411
                          + v439
                          - 6784 * (((1266205 * (unint64_t)v439) >> 32) >> 1));
  v449 = v411;
  v450 = (((((LOBYTE(STACK[0x3BB8]) + 117) ^ 0x12 ^ ((LODWORD(STACK[0x3BB8]) + 117) >> 2) & 0x12)
                           + 26) << 24) | ((unint64_t)((LODWORD(STACK[0x3BC0]) ^ 0xC3) + 85) << 40) | HIBYTE(v446) | (v446 >> 40) & 0xFF00 | (v446 >> 24) & 0xFF0000 | ((unint64_t)BYTE3(v446) << 32)) ^ 0x8034F8D210A71E48 ^ ((unint64_t)((v420 ^ 0xC3) + 85) << 48) ^ ((unint64_t)((v448 >> 3) | (32 * v448)) << 56) ^ v445 ^ (v445 >> 28) ^ __ROR8__(v445, 19) ^ (v445 << 36) ^ v440;
  v451 = v442 & (v434 ^ 0xEE047D4949078B48) ^ (v431 ^ 0xA9E1640E554FD054) & v443 ^ v415;
  v452 = v434 ^ 0x99991ABAC25C5BF6 ^ v450 & (v441 ^ 0x7FD2A315B13225E6) ^ v428 & v443 ^ v451;
  v453 = v452 ^ __ROR8__(v452, 10) ^ (v452 >> 17) ^ (v452 << 47);
  v454 = v428 & (v441 ^ 0x7FD2A315B13225E6);
  v455 = (v345 >> 1) ^ v444 ^ 0x576B070D59E7720ALL ^ ((v444 ^ 0x576B070D59E7720ALL) >> 6) ^ ((v444 ^ 0x576B070D59E7720ALL) << 58) ^ v438;
  v456 = v431 ^ 0xEFA762CC208EBE14 ^ v450 & v443;
  v457 = v455 ^ 0xB732F9BF6675C3D0;
  v458 = v456 ^ v454 ^ v444 ^ __ROR8__(v456 ^ v454 ^ v444, 10) ^ ((v456 ^ v454 ^ v444) >> 17) ^ ((v456 ^ v454 ^ v444) << 47);
  v459 = v425 & v415 ^ v450 ^ v427 & STACK[0x3C08];
  v460 = STACK[0x3C68] ^ STACK[0x3C60] ^ v415 & v436 ^ v432 & v435 ^ v459;
  v461 = v460 ^ __ROR8__(v460, 61) ^ (v460 >> 39) ^ (v460 << 25);
  *((_QWORD *)&v345 + 1) = v451;
  *(_QWORD *)&v345 = v451 ^ 0x1C7F50467F7B472CLL;
  v462 = v451 ^ (v345 >> 1) ^ ((v451 ^ 0x1C7F50467F7B472CLL) >> 6) ^ ((v451 ^ 0x1C7F50467F7B472CLL) << 58) ^ 0x9216C3C017BC8C32 ^ v461;
  v463 = v461 ^ 0xC8953DD9D34A3B9DLL;
  v464 = v438 ^ 0x2D9B773C563BA8D8;
  v465 = v438;
  v466 = (v438 ^ 0x2D9B773C563BA8D8) & v462;
  v467 = v455 ^ 0x48CD0640998A3C2FLL;
  v468 = (v455 ^ 0x48CD0640998A3C2FLL) & (v461 ^ 0xC8953DD9D34A3B9DLL);
  v469 = STACK[0x3C58] ^ 0x1CC9F84E50BF5308;
  v470 = v469 & STACK[0x3C08] ^ v443 ^ v450 & STACK[0x3C48];
  v471 = v470 ^ 0x65325AEE93D979C9 ^ __ROR8__(v470 ^ 0x65325AEE93D979C9, 7) ^ ((v470 ^ 0x65325AEE93D979C9) >> 41) ^ ((v470 ^ 0x65325AEE93D979C9) << 23);
  v472 = v470 ^ 0x1140734999799820 ^ v459 ^ __ROR8__(v470 ^ 0x1140734999799820 ^ v459, 19) ^ ((v470 ^ 0x1140734999799820 ^ v459) >> 28) ^ ((v470 ^ 0x1140734999799820 ^ v459) << 36) ^ v471;
  v473 = v466 ^ v472 ^ v468;
  v474 = v461 ^ v462 & (v458 ^ 0xEB01B4B52BD414D1) ^ v457 & (v453 ^ 0x232BC87D423F0FB8) ^ v473 ^ 0x272739D98F0660C4;
  v475 = v474 ^ __ROR8__(v474, 61) ^ (v474 >> 39) ^ (v474 << 25);
  v476 = v471 ^ v453 ^ 0xD6FCCA9F9387772;
  v477 = v469 & STACK[0x3C48] ^ v442 ^ v450 & STACK[0x3C08];
  v478 = v477 ^ 0xA71E412C697AAE33 ^ __ROR8__(v477 ^ 0xA71E412C697AAE33, 7) ^ ((v477 ^ 0xA71E412C697AAE33) >> 41) ^ ((v477 ^ 0xA71E412C697AAE33) << 23);
  v479 = v458 ^ v478;
  v480 = v458 ^ v478 ^ 0x2E35698AC82C2943;
  v481 = v462 ^ v476 & (v458 ^ 0x14FE4B4AD42BEB2ELL) ^ v480 & (v453 ^ 0x232BC87D423F0FB8);
  *((_QWORD *)&v345 + 1) = v481;
  *(_QWORD *)&v345 = v481 ^ 0x8F5DAF0413FB0D8ELL;
  v482 = (v345 >> 1) ^ v481 ^ 0x8F5DAF0413FB0D8ELL ^ ((v481 ^ 0x8F5DAF0413FB0D8ELL) >> 6) ^ ((v481 ^ 0x8F5DAF0413FB0D8ELL) << 58) ^ v475;
  v483 = v477 ^ 0x415D7E19BDB6C404 ^ STACK[0x3C78] ^ __ROR8__(v477 ^ 0x415D7E19BDB6C404 ^ STACK[0x3C78], 19) ^ ((v477 ^ 0x415D7E19BDB6C404 ^ STACK[0x3C78]) >> 28) ^ ((v477 ^ 0x415D7E19BDB6C404 ^ STACK[0x3C78]) << 36) ^ v478;
  v484 = v483 ^ 0x17DED220C1C922AFLL;
  v485 = v463 & v462 ^ v483 ^ 0x17DED220C1C922AFLL ^ v467 & v464;
  *((_QWORD *)&v345 + 1) = v465 ^ 0xD26488C3A9C45727 ^ v462 & (v453 ^ 0x232BC87D423F0FB8) ^ v457 & (v458 ^ 0xEB01B4B52BD414D1) ^ v485 ^ 0x11A63DC952867A39;
  *(_QWORD *)&v345 = v465 ^ 0xD26488C3A9C45727 ^ v462 & (v453 ^ 0x232BC87D423F0FB8) ^ v457 & (v458 ^ 0xEB01B4B52BD414D1) ^ v485;
  v486 = (v345 >> 61) ^ *((_QWORD *)&v345 + 1) ^ (*((_QWORD *)&v345 + 1) >> 39) ^ (*((_QWORD *)&v345 + 1) << 25);
  v487 = v480 & (v458 ^ 0x14FE4B4AD42BEB2ELL) ^ (v453 ^ 0x232BC87D423F0FB8) & v476 ^ v467;
  *((_QWORD *)&v345 + 1) = v487;
  *(_QWORD *)&v345 = v487 ^ 0x78A170F3A165253CLL;
  v488 = (v345 >> 1) ^ v487 ^ 0x78A170F3A165253CLL ^ ((v487 ^ 0x78A170F3A165253CuLL) >> 6) ^ ((v487 ^ 0x78A170F3A165253CLL) << 58);
  v489 = v486 ^ v488;
  v490 = v483 ^ 0xE8212DDF3E36DD50;
  v472 ^= 0x681AD95F9F25A6F1uLL;
  v491 = (v483 ^ 0xE8212DDF3E36DD50) & v463 ^ v476 ^ (v465 ^ 0xD26488C3A9C45727) & v472;
  v492 = v491 ^ 0x79AF0A408B7501A9 ^ __ROR8__(v491 ^ 0x79AF0A408B7501A9, 7) ^ ((v491 ^ 0x79AF0A408B7501A9) >> 41) ^ ((v491 ^ 0x79AF0A408B7501A9) << 23);
  v493 = v491 ^ 0x14B1A11FCE0D4BE8 ^ v473 ^ __ROR8__(v491 ^ 0x14B1A11FCE0D4BE8 ^ v473, 19) ^ ((v491 ^ 0x14B1A11FCE0D4BE8 ^ v473) >> 28) ^ ((v491 ^ 0x14B1A11FCE0D4BE8 ^ v473) << 36) ^ v492;
  v494 = v482 & ~v486 ^ v493 ^ (v486 ^ v488) & v475;
  v495 = v453 ^ (v479 ^ 0xD1CA967537D3D6BCLL) & v472 ^ v484 & v476 ^ v481 ^ 0x8AFDC5DCB51CD666;
  v496 = v495 ^ __ROR8__(v495, 10) ^ (v495 >> 17) ^ (v495 << 47);
  v497 = v458 ^ (v479 ^ 0xD1CA967537D3D6BCLL) & v484 ^ v472 & v476 ^ 0x99EF78CFCF2E601CLL ^ v487;
  v498 = v497 ^ __ROR8__(v497, 10) ^ (v497 >> 17) ^ (v497 << 47);
  *((_QWORD *)&v345 + 1) = v496 & ~(v486 ^ v488) ^ v475 ^ v482 & v498 ^ v494 ^ 0xC7F6EDA37D2A594;
  *(_QWORD *)&v345 = v496 & ~(v486 ^ v488) ^ v475 ^ v482 & v498 ^ v494;
  v499 = (v345 >> 61) ^ *((_QWORD *)&v345 + 1) ^ (*((_QWORD *)&v345 + 1) >> 39) ^ (*((_QWORD *)&v345 + 1) << 25);
  v500 = v472 & v463 ^ v479 ^ (v465 ^ 0xD26488C3A9C45727) & v490;
  v501 = v500 ^ 0x5D8414C03E654897 ^ __ROR8__(v500 ^ 0x5D8414C03E654897, 7) ^ ((v500 ^ 0x5D8414C03E654897) >> 41) ^ ((v500 ^ 0x5D8414C03E654897) << 23);
  v502 = v500 ^ 0x4B3402D3F800323BLL ^ v485 ^ __ROR8__(v500 ^ 0x4B3402D3F800323BLL ^ v485, 19) ^ ((v500 ^ 0x4B3402D3F800323BLL ^ v485) >> 28) ^ ((v500 ^ 0x4B3402D3F800323BLL ^ v485) << 36) ^ v501;
  v503 = v498 ^ v501;
  v504 = v475 & v493 ^ v498 ^ v501 ^ v486 & ~v502;
  v505 = v504 ^ 0xB4F904283787185CLL ^ __ROR8__(v504 ^ 0xB4F904283787185CLL, 7) ^ ((v504 ^ 0xB4F904283787185CLL) >> 41) ^ ((v504 ^ 0xB4F904283787185CLL) << 23);
  v506 = v488 & ~v486 ^ v502 ^ v482 & v475;
  v507 = v504 ^ v506 ^ 0x44FDBADA9F7B2967 ^ __ROR8__(v504 ^ v506 ^ 0x44FDBADA9F7B2967, 19) ^ ((v504 ^ v506 ^ 0x44FDBADA9F7B2967) >> 28) ^ ((v504 ^ v506 ^ 0x44FDBADA9F7B2967) << 36) ^ v505;
  v508 = v498 & ~(v486 ^ v488) ^ v486 ^ v482 & v496 ^ v506;
  v509 = v508 ^ 0x512C6D39D4CD43ELL;
  LODWORD(v508) = 4647 * ((v508 >> 61) ^ 0x9A) + 25186740;
  v510 = v509 ^ ((*(_BYTE *)(v449
                                            + v508
                                            - 6784
                                            * (((1266205 * (unint64_t)v508) >> 32) >> 1)) ^ 0xC3)
                                + 85) ^ (8 * v509) ^ (v509 >> 39) ^ (v509 << 25);
  v511 = v496 ^ v492;
  v512 = v493 & v486 ^ v496 ^ v492 ^ v475 & ~v502;
  v513 = v512 ^ 0x8CEFB910FA417091 ^ __ROR8__(v512 ^ 0x8CEFB910FA417091, 7) ^ ((v512 ^ 0x8CEFB910FA417091) >> 41) ^ ((v512 ^ 0x8CEFB910FA417091) << 23);
  v514 = v512 ^ 0xB73A0C297AA0C482 ^ v494 ^ __ROR8__(v512 ^ 0xB73A0C297AA0C482 ^ v494, 19) ^ ((v512 ^ 0xB73A0C297AA0C482 ^ v494) >> 28) ^ ((v512 ^ 0xB73A0C297AA0C482 ^ v494) << 36) ^ v513;
  v515 = (v498 ^ v501) & v496 ^ v511 & ~v498 ^ v482;
  v516 = v496 ^ v493 & ~(v498 ^ v501) ^ v502 & v511 ^ v515 ^ 0x3AB2F61A76A3E15ALL;
  v517 = v516 ^ __ROR8__(v516, 10) ^ (v516 >> 17) ^ (v516 << 47);
  v518 = v517 ^ v513;
  v519 = v499 & ~v507 ^ v517 ^ v513 ^ v510 & v514;
  *((_QWORD *)&v345 + 1) = v515;
  *(_QWORD *)&v345 = v515 ^ 0x110426D4F4E14A16;
  v520 = (v345 >> 1) ^ v515 ^ 0x110426D4F4E14A16 ^ ((v515 ^ 0x110426D4F4E14A16) >> 6) ^ ((v515 ^ 0x110426D4F4E14A16) << 58) ^ v499;
  v521 = v511 & v496 ^ v501 & ~v498 ^ v489;
  v522 = v521 ^ 0x37C7EDF2E9ADE00BLL ^ __ROR8__(v521 ^ 0x37C7EDF2E9ADE00BLL, 1) ^ ((v521 ^ 0x37C7EDF2E9ADE00BLL) >> 6) ^ ((v521 ^ 0x37C7EDF2E9ADE00BLL) << 58);
  v523 = v510 ^ v522;
  v524 = v520 & ~v510 ^ v514 ^ (v510 ^ v522) & v499;
  v525 = v519 ^ 0xA5F4F2AC8DA5A773 ^ v524;
  v526 = v519 ^ 0xD2B93EC063DB0A89 ^ __ROR8__(v519 ^ 0xD2B93EC063DB0A89, 7) ^ ((v519 ^ 0xD2B93EC063DB0A89) >> 41) ^ ((v519 ^ 0xD2B93EC063DB0A89) << 23);
  v527 = v525 ^ __ROR8__(v525, 19) ^ (v525 >> 28) ^ (v525 << 36) ^ v526;
  v528 = v498 ^ v502 & ~v503 ^ v493 & v511 ^ v521 ^ 0x379EB717915A34BDLL;
  v529 = v528 ^ __ROR8__(v528, 10) ^ (v528 >> 17) ^ (v528 << 47);
  v530 = v518 & v517 ^ v505 & ~v529 ^ v510 ^ v522;
  v531 = v529 ^ v507 & ~(v529 ^ v505) ^ v518 & v514 ^ 0x2FB650D83EE67F4ELL ^ v530;
  v532 = v531 ^ __ROR8__(v531, 10) ^ (v531 >> 17) ^ (v531 << 47);
  v533 = v514 & v499 ^ v529 ^ v505 ^ v510 & ~v507;
  v534 = v533 ^ 0xDF3E49CDD519943FLL ^ __ROR8__(v533 ^ 0xDF3E49CDD519943FLL, 7) ^ ((v533 ^ 0xDF3E49CDD519943FLL) >> 41) ^ ((v533 ^ 0xDF3E49CDD519943FLL) << 23);
  v535 = v532 ^ v534;
  v536 = (v529 ^ v505) & v517 ^ v518 & ~v529 ^ v520;
  v537 = v517 ^ v514 & ~(v529 ^ v505) ^ v518 & v507 ^ v536 ^ 0xF4D6B0033DE82F4DLL;
  v538 = v537 ^ __ROR8__(v537, 10) ^ (v537 >> 17) ^ (v537 << 47);
  v539 = v522 & ~v510 ^ v507 ^ v520 & v499;
  v540 = v539 ^ v533 ^ 0x6640C16F213A72DFLL ^ __ROR8__(v539 ^ v533 ^ 0x6640C16F213A72DFLL, 19) ^ ((v539 ^ v533 ^ 0x6640C16F213A72DFLL) >> 28) ^ ((v539 ^ v533 ^ 0x6640C16F213A72DFLL) << 36) ^ v534;
  v541 = v499 ^ v520 & v529 ^ v517 & ~(v510 ^ v522) ^ v524 ^ 0x27350C0477BC0D48;
  v542 = v541 ^ __ROR8__(v541, 61) ^ (v541 >> 39) ^ (v541 << 25);
  *((_QWORD *)&v345 + 1) = v536;
  *(_QWORD *)&v345 = v536 ^ 0xD87D98C84EA4E6A8;
  v543 = (v345 >> 1) ^ v536 ^ 0xD87D98C84EA4E6A8 ^ ((v536 ^ 0xD87D98C84EA4E6A8) >> 6) ^ ((v536 ^ 0xD87D98C84EA4E6A8) << 58) ^ v542;
  v544 = (v532 ^ v534) & v538 ^ (v538 ^ v526) & ~v532 ^ v543;
  v545 = v538 ^ v527 & ~(v532 ^ v534) ^ v540 & (v538 ^ v526) ^ v544 ^ 0xFB0E13F0E0683F79;
  *((_QWORD *)&v345 + 1) = v530;
  *(_QWORD *)&v345 = v530 ^ 0x5F21004FF24C4E14;
  v546 = (((v345 >> 1) ^ v530 ^ 0x5F21004FF24C4E14) & 0xA14515EE7AEEC6FBLL ^ ((v530 ^ 0x5F21004FF24C4E14) >> 6) & 0x14515EE7AEEC6FBLL | ((v345 >> 1) ^ v530 ^ 0x5F21004FF24C4E14) & 0x5EBAEA1185113904 ^ ((v530 ^ 0x5F21004FF24C4E14) >> 6) & 0x2BAEA1185113904) ^ ((v530 ^ 0x5F21004FF24C4E14) << 58);
  v547 = v510 ^ v520 & v517 ^ v529 & ~v523 ^ v539 ^ 0x639134409E96CEA1;
  v548 = v547 ^ __ROR8__(v547, 61) ^ (v547 >> 39) ^ (v547 << 25);
  v549 = v548 ^ v546;
  *((_QWORD *)&v345 + 1) = (v538 ^ v526) & v538 ^ v534 & ~v532 ^ v548 ^ v546;
  *(_QWORD *)&v345 = *((_QWORD *)&v345 + 1) ^ 0x821A8712F4A6CC1ELL;
  v550 = v545 ^ __ROR8__(v545, 10) ^ (v545 >> 17) ^ (v545 << 47);
  v551 = (v345 >> 1) ^ *((_QWORD *)&v345 + 1) ^ 0x821A8712F4A6CC1ELL ^ ((*((_QWORD *)&v345 + 1) ^ 0x821A8712F4A6CC1ELL) >> 6) ^ ((*((_QWORD *)&v345 + 1) ^ 0x821A8712F4A6CC1ELL) << 58);
  v552 = v532 & ~(v548 ^ v546);
  v553 = v546 & ~v548 ^ v540 ^ v543 & v542;
  v554 = v548 ^ v552 ^ v543 & v538 ^ v553 ^ 0x2A0AC7EE13E5A2FALL;
  v555 = v554 ^ __ROR8__(v554, 61) ^ (v554 >> 39) ^ (v554 << 25);
  v556 = v555 ^ v551;
  v557 = v532 ^ v540 & ~(v532 ^ v534) ^ v527 & (v538 ^ v526) ^ *((_QWORD *)&v345 + 1) ^ 0xE2E76AE9CEB63D57;
  v558 = v557 ^ __ROR8__(v557, 10) ^ (v557 >> 17) ^ (v557 << 47);
  v559 = v544 ^ 0xA49448346EECAE84;
  *((_QWORD *)&v345 + 1) = v544;
  *(_QWORD *)&v345 = v544 ^ 0xA49448346EECAE84;
  v560 = v543 & v532;
  v561 = v549 & v542 ^ v527 ^ v543 & ~v548;
  v562 = v542 ^ v538 & ~v549 ^ v560 ^ v561 ^ 0x62E4AEA6395427D0;
  v563 = v562 ^ __ROR8__(v562, 61) ^ (v562 >> 39) ^ (v562 << 25);
  v564 = (v345 >> 1) ^ v559 ^ (v559 >> 6) ^ (v559 << 58) ^ v563;
  v565 = v527 & v548 ^ v538 ^ v526 ^ v542 & ~v540;
  v566 = v565 ^ 0xAF473EC210563643 ^ __ROR8__(v565 ^ 0xAF473EC210563643, 7) ^ ((v565 ^ 0xAF473EC210563643) >> 41) ^ ((v565 ^ 0xAF473EC210563643) << 23);
  v567 = v565 ^ 0x156EE966757E3879 ^ v561 ^ __ROR8__(v565 ^ 0x156EE966757E3879 ^ v561, 19) ^ ((v565 ^ 0x156EE966757E3879 ^ v561) >> 28) ^ ((v565 ^ 0x156EE966757E3879 ^ v561) << 36) ^ v566;
  v568 = v564 & ~v555 ^ v567 ^ (v555 ^ v551) & v563;
  v569 = v563 ^ v550 & ~(v555 ^ v551) ^ v564 & v558 ^ v568 ^ 0x4C605CE60B5C8B58;
  v570 = v569 ^ __ROR8__(v569, 61) ^ (v569 >> 39) ^ (v569 << 25);
  v571 = v550 ^ v566;
  v572 = v542 & v527 ^ v535 ^ v548 & ~v540;
  v573 = v572 ^ 0xAFC8ECC2CBA88F98 ^ __ROR8__(v572 ^ 0xAFC8ECC2CBA88F98, 7) ^ ((v572 ^ 0xAFC8ECC2CBA88F98) >> 41) ^ ((v572 ^ 0xAFC8ECC2CBA88F98) << 23);
  v574 = v558 ^ v573;
  v575 = (v550 ^ v566) & ~v558 ^ (v558 ^ v573) & v550 ^ v564;
  v576 = v572 ^ v553 ^ 0x8820F4FB75AEE279 ^ __ROR8__(v572 ^ v553 ^ 0x8820F4FB75AEE279, 19) ^ ((v572 ^ v553 ^ 0x8820F4FB75AEE279) >> 28) ^ ((v572 ^ v553 ^ 0x8820F4FB75AEE279) << 36) ^ v573;
  v577 = v551 & ~v555 ^ v576 ^ v564 & v563;
  v578 = v555 ^ v558 & ~v556 ^ v564 & v550 ^ v577 ^ 0xF637E25C3989926ALL;
  v579 = v578 ^ __ROR8__(v578, 61) ^ (v578 >> 39) ^ (v578 << 25);
  v580 = (v550 ^ v566) & v550 ^ v573 & ~v558 ^ v556;
  v581 = v563 & ~v576 ^ v571 ^ v567 & v555;
  v582 = v558 ^ v576 & ~(v558 ^ v573) ^ v567 & v571 ^ v580 ^ 0xCFA26E3E5373692;
  v583 = v555 & ~v576 ^ v574 ^ v563 & v567;
  v584 = v583 ^ 0x61EB568C896908DCLL ^ __ROR8__(v583 ^ 0x61EB568C896908DCLL, 7) ^ ((v583 ^ 0x61EB568C896908DCLL) >> 41) ^ ((v583 ^ 0x61EB568C896908DCLL) << 23);
  v585 = v583 ^ v577 ^ 0x9718E4A859964827 ^ __ROR8__(v583 ^ v577 ^ 0x9718E4A859964827, 19) ^ ((v583 ^ v577 ^ 0x9718E4A859964827) >> 28) ^ ((v583 ^ v577 ^ 0x9718E4A859964827) << 36) ^ v584;
  v586 = v579 & ~v585 ^ v582 ^ __ROR8__(v582, 10) ^ (v582 >> 17) ^ (v582 << 47) ^ v584 ^ (v581 ^ v568 ^ 0x3B98C704E9E5B097 ^ __ROR8__(v581 ^ v568 ^ 0x3B98C704E9E5B097, 19) ^ ((v581 ^ v568 ^ 0x3B98C704E9E5B097) >> 28) ^ ((v581 ^ v568 ^ 0x3B98C704E9E5B097) << 36) ^ v581 ^ 0x977DF27AD1E51D84 ^ __ROR8__(v581 ^ 0x977DF27AD1E51D84, 7) ^ ((v581 ^ 0x977DF27AD1E51D84) >> 41) ^ ((v581 ^ 0x977DF27AD1E51D84) << 23)) & v570 ^ (v580 ^ 0x85F23800C38F0C0BLL ^ __ROR8__(v580 ^ 0x85F23800C38F0C0BLL, 1) ^ ((v580 ^ 0x85F23800C38F0C0BLL) >> 6) ^ ((v580 ^ 0x85F23800C38F0C0BLL) << 58)) & ~v579 ^ v585 ^ (v575 ^ 0x30FD42B50153F7C9 ^ __ROR8__(v575 ^ 0x30FD42B50153F7C9, 1) ^ ((v575 ^ 0x30FD42B50153F7C9) >> 6) ^ ((v575 ^ 0x30FD42B50153F7C9) << 58) ^ v570) & v570 ^ 0x21FFF130B22C3110;
  v587 = *(uint64_t (**)(unint64_t))(STACK[0x3C70] + 8 * (int)STACK[0x3C38]);
  LODWORD(STACK[0x3BB0]) = 202;
  LODWORD(STACK[0x3BE8]) = 22;
  LODWORD(STACK[0x3BF8]) = 216;
  LODWORD(STACK[0x3BA8]) = 99;
  STACK[0x3BF0] = 156;
  LODWORD(STACK[0x3BC8]) = 251;
  LODWORD(STACK[0x3BE0]) = 58;
  STACK[0x3BD0] = 145;
  STACK[0x3BD8] = 115;
  STACK[0x3C00] = 210;
  LODWORD(STACK[0x3C08]) = 231;
  LODWORD(STACK[0x3BB8]) = 62;
  STACK[0x3BC0] = 235;
  LODWORD(STACK[0x3C10]) = 129;
  LODWORD(STACK[0x3BA0]) = 173;
  return v587(v586 ^ __ROR8__(v586, 19) ^ (v586 >> 28) ^ (v586 << 36));
}

uint64_t sub_1006E2BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  int v8;

  STACK[0x3C78] = 3 * (v8 ^ 0x47C7u);
  return (*(uint64_t (**)(void))(STACK[0x3C70] + 8 * ((173 * (a8 & 1)) ^ v8)))();
}

uint64_t sub_1006E36C4(unint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t (*v18)(void);

  LODWORD(STACK[0x3C68]) = 0;
  v11 = STACK[0x3C78];
  v12 = STACK[0x3C18];
  v13 = *(unsigned __int8 *)(STACK[0x3C18]
                           + 4647 * (a7 ^ 0xFE)
                           + 13123128
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647 * (a7 ^ 0xFEu) + 13123128)) >> 32) >> 1))
      - 71;
  STACK[0x3C00] = HIWORD(a1);
  STACK[0x3BF0] = HIDWORD(a1);
  v14 = 4647 * ((BYTE1(a1) + 111) ^ 0x1C) + 4767822;
  STACK[0x3BC0] = a1 >> 16;
  v15 = *(unsigned __int8 *)(v12 + v14 - 6784 * (((1266205 * (unint64_t)v14) >> 32) >> 1));
  LODWORD(STACK[0x3C20]) = (v13 ^ (v13 << 6) ^ (4 * v13) ^ 0xFFFFFFFE) + 26;
  v16 = *(unsigned __int8 *)(v12
                           + 4647 * (BYTE2(a7) ^ 0xB8)
                           + 9544938
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * (BYTE2(a7) ^ 0xB8u) + 9544938)) >> 32) >> 1))
      - 87;
  STACK[0x3BD0] = a1 >> 24;
  LODWORD(STACK[0x3BA0]) = ((v15 ^ 0xE3) >> 3) | (32 * (v15 ^ 0xFFFFFFE3));
  LODWORD(STACK[0x3BB8]) = (v16 ^ 0xFFFFFFFB) + 85;
  v17 = *(unsigned __int8 *)(v12
                           + 4647 * (BYTE3(a7) ^ 0x9A)
                           + 25186740
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * (BYTE3(a7) ^ 0x9A) + 25186740)) >> 32) >> 1));
  STACK[0x3BD8] = HIDWORD(a7);
  LODWORD(STACK[0x3C08]) = (*(unsigned __int8 *)(v12
                                               + 4647 * (a5 ^ 0x9A)
                                               + 25186740
                                               - 6784
                                               * (((1266205
                                                                * (unint64_t)(4647 * (a5 ^ 0x9Au) + 25186740)) >> 32) >> 1)) ^ 0xFFFFFFC3)
                         + 85;
  LODWORD(STACK[0x3BC8]) = (v17 ^ 0xFFFFFFC3) + 85;
  v18 = *(uint64_t (**)(void))(v9 + 8 * (int)v11);
  LODWORD(STACK[0x3C10]) = v8;
  LODWORD(STACK[0x3BE0]) = a6;
  LODWORD(STACK[0x3BA8]) = a1;
  LODWORD(STACK[0x3BF8]) = a4;
  LODWORD(STACK[0x3BE8]) = v10;
  LODWORD(STACK[0x3BB0]) = a8;
  return v18();
}

uint64_t sub_1006E39EC(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t (*v36)(void);

  STACK[0x3438] = a8;
  STACK[0x3460] = a6;
  STACK[0x3468] = a5;
  STACK[0x3470] = a4;
  v12 = 4647 * ((a1 >> ((v11 ^ 0x1B) - 57)) ^ 0xFE) + 13123128;
  v13 = STACK[0x3C18];
  v14 = *(unsigned __int8 *)(STACK[0x3C18] + v12 - 6784 * (((1266205 * (unint64_t)v12) >> 32) >> 1))
      - 71;
  v15 = *(unsigned __int8 *)(STACK[0x3C18]
                           + 4647 * (BYTE3(a1) ^ 0xC4)
                           + 14331348
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * (BYTE3(a1) ^ 0xC4) + 14331348)) >> 32) >> 1))
      + 117;
  v16 = 4647 * ((BYTE3(a7) + 111) ^ 0x36) + 17937420;
  v17 = *(unsigned __int8 *)(STACK[0x3C18] + v16 - 6784 * (((1266205 * (unint64_t)v16) >> 32) >> 1)) ^ 0xE;
  LODWORD(STACK[0x3430]) = (v17 >> 3) | (32 * v17);
  v19 = v14 ^ (v14 << 6) ^ (4 * v14);
  v20 = 4647 * ((v10 + 111) ^ 0x1C) + 4767822;
  v21 = 4647 * (((a1 >> 25) & 0x80 | (a1 >> 33) & 0x7F) ^ 0x40) + 15539568;
  v22 = v20 - 6784 * (((1266205 * (unint64_t)v20) >> 32) >> 1);
  v23 = (unsigned __int8 *)STACK[0x3C98];
  v24 = *(unsigned __int8 *)(STACK[0x3C98] + 132);
  v25 = *(unsigned __int8 *)(v13 + v21 - 6784 * (((1266205 * (unint64_t)v21) >> 32) >> 1));
  v26 = *(unsigned __int8 *)(v13 + v22) ^ 0xFFFFFFE3;
  LODWORD(STACK[0x3450]) = (v26 >> 3) | (32 * v26);
  LODWORD(STACK[0x33F0]) = v25;
  LODWORD(STACK[0x3428]) = 97 * (v25 ^ 0xFFFFFFA2);
  v27 = *(unsigned __int8 *)(v13
                           + 4647 * (v24 ^ 0xC4)
                           + 14331348
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * (v24 ^ 0xC4u) + 14331348)) >> 32) >> 1))
      + 117;
  v28 = ((v27 ^ 0x12 ^ (v27 >> 2) & 0x12) + 26) | ((((unint64_t)v23[134] << 8) | ((unint64_t)v23[135] << 16) | v23[133]) << 8);
  v29 = 4647 * ((v23[(v28 + 138)] + 111) ^ 0x36) + 17937420;
  LOBYTE(v29) = *(_BYTE *)(v13 + v29 - 6784 * (((1266205 * (unint64_t)v29) >> 32) >> 1)) ^ 0xE;
  v30 = v23[(v28 + 136)] | (((v23[(v28 + 139)] << 16) | (((v29 >> 3) | (32 * v29)) << 8) | v23[(v28 + 137)]) << 8);
  LODWORD(STACK[0x36C8]) = v30;
  v32 = v28 < 0x400 && v30 < 0x400;
  STACK[0x3480] = (unint64_t)*(&off_1015B46D0 + (v11 ^ 0x29E5));
  v33 = (uint64_t)*(&off_1015B46D0 + (v11 ^ 0x2760));
  LODWORD(STACK[0x3410]) = (v19 ^ 0xFFFFFFFE) + 26;
  LODWORD(STACK[0x3418]) = (v15 ^ 0x12 ^ (v15 >> 2) & 0x12) + 26;
  v34 = *(unsigned __int8 *)(v13
                           + 4647 * (v8 ^ 0x9A)
                           + 25186740
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * (v8 ^ 0x9Au) + 25186740)) >> 32) >> 1));
  v35 = *(unsigned __int8 *)(v13
                           + 4647 * (BYTE6(a1) ^ 0xB8)
                           + 9544938
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * (BYTE6(a1) ^ 0xB8u) + 9544938)) >> 32) >> 1))
      - 87;
  LODWORD(STACK[0x3420]) = (*(unsigned __int8 *)(v13
                                               + 4647 * (BYTE4(a7) ^ 0x9A)
                                               + 25186740
                                               - 6784
                                               * (((1266205
                                                                * (unint64_t)(4647 * (BYTE4(a7) ^ 0x9Au)
                                                                                   + 25186740)) >> 32) >> 1)) ^ 0xFFFFFFC3)
                         + 85;
  LODWORD(STACK[0x3440]) = (v35 ^ 0xFFFFFFFB) + 85;
  LODWORD(STACK[0x3458]) = (v34 ^ 0xFFFFFFC3) + 85;
  v36 = (uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((27535 * v32) ^ v11)) - 12);
  STACK[0x3488] = v33 - 4;
  STACK[0x3448] = a1;
  STACK[0x3400] = a1 >> 8;
  STACK[0x3408] = a7 >> 16;
  STACK[0x33F8] = v28;
  STACK[0x3478] = a7;
  return v36();
}

uint64_t sub_1006E3D20(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((27171
                                          * ((((LODWORD(STACK[0x36C8]) ^ a3) + 2 * (STACK[0x36C8] & a3) + 140 > STACK[0x32D0]) ^ (v4 - 117)) & 1)) ^ v4))
                            - 12))();
}

uint64_t sub_1006E3D78(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = 5713;
  if (!a3)
    v5 = 1066;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((*(_BYTE *)(STACK[0x3C18] + v5) != 104) * (((v4 - 2725) ^ 0x5624) - 4510)) ^ (v4 - 2725)))
                            - 8))();
}

uint64_t sub_1006E3DC0()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * (v0 - 13813)) - 8))(20097);
}

uint64_t sub_1006E3E0C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X3>, unsigned int a4@<W8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v6 + a4) = *(_BYTE *)(v5 + a4 + 136);
  if (a4 + 1 >= a2)
    v13 = v9;
  else
    v13 = v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * (((*(_BYTE *)(a3 + v13) == 104) * v11) ^ v4)) - (v7 & v8) + a1))();
}

uint64_t sub_1006E3E4C()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((((v0 - 646795404) & 0x268D3E4B) + ((v0 - 9729) | 0x142) - 25731)
                                * (LODWORD(STACK[0x36C8]) != 0)) ^ v0)))();
}

uint64_t sub_1006E3E9C@<X0>(uint64_t a1@<X2>, int a2@<W8>)
{
  uint64_t v2;
  unint64_t v3;

  STACK[0x3C68] = 0x3084AC9F19EA61CBLL;
  STACK[0x3C60] = 0xFB08B358A5FF987;
  v3 = STACK[0x3C98] + a1;
  STACK[0x3968] = v3;
  STACK[0x3B58] = v3 + 156;
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(v2 + 8 * a2) - 12))(3752599413, 586, &STACK[0x5130]);
}

uint64_t sub_1006E3F60@<X0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X5>, int a5@<W8>)
{
  unint64_t v5;
  char v6;
  char v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  unsigned __int8 v20;
  unsigned int v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  char v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;

  v20 = *(_BYTE *)(v16
                 + v18
                 + ((*(_BYTE *)(a4 + v5) + v9) ^ 0x1C) * v10
                 - ((((v18 + ((*(_BYTE *)(a4 + v5) + v9) ^ 0x1Cu) * v10)
                                  * (unint64_t)v11) >> 32) >> 1)
                 * v12) ^ 0xE3;
  v21 = 387 * v5 + v14;
  *(_BYTE *)(a3 + v21 - (((v21 * (unint64_t)a1) >> 32) >> 9) * a2) = v7;
  v22 = ((v20 >> 3) | (32 * v20)) ^ v7;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 87075
           - ((((387 * v5 + 87075) * (unint64_t)a1) >> 32) >> 9) * a2) = v22;
  v23 = *(_BYTE *)(a4 + (v5 | 1));
  *(_BYTE *)(a3 + v21 + 387 - ((((v21 + 387) * (unint64_t)a1) >> 32) >> 9) * a2) = v22;
  v24 = v22 ^ v23;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 87462
           - ((((387 * v5 + 87462) * (unint64_t)a1) >> 32) >> 9) * a2) = v24;
  v25 = *(_BYTE *)(a4 + (v5 | 2));
  *(_BYTE *)(a3 + v21 + 774 - ((((v21 + 774) * (unint64_t)a1) >> 32) >> 9) * a2) = v24;
  v26 = v25 ^ v24;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 87849
           - ((((387 * v5 + 87849) * (unint64_t)a1) >> 32) >> 9) * a2) = v26;
  v27 = *(_BYTE *)(a4 + (v5 | 3));
  *(_BYTE *)(a3 + v21 + 1161 - ((((v21 + 1161) * (unint64_t)a1) >> 32) >> 9) * a2) = v26;
  v28 = v27 ^ v26;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 88236
           - ((((387 * v5 + 88236) * (unint64_t)a1) >> 32) >> 9) * a2) = v28;
  v29 = *(_BYTE *)(a4 + (v5 | 4)) ^ v28;
  *(_BYTE *)(a3 + v21 + 1548 - ((((v21 + 1548) * (unint64_t)a1) >> 32) >> 9) * a2) = v28;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 88623
           - ((((387 * v5 + 88623) * (unint64_t)a1) >> 32) >> 9) * a2) = v29;
  v30 = *(_BYTE *)(a4 + (v5 | 5));
  *(_BYTE *)(a3 + v21 + 1935 - ((((v21 + 1935) * (unint64_t)a1) >> 32) >> 9) * a2) = v29;
  v31 = v30 ^ v29;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 89010
           - ((((387 * v5 + 89010) * (unint64_t)a1) >> 32) >> 9) * a2) = v31;
  v32 = *(_BYTE *)(a4 + (v5 | 6));
  *(_BYTE *)(a3 + v21 + 2322 - ((((v21 + 2322) * (unint64_t)a1) >> 32) >> 9) * a2) = v31;
  v33 = v32 ^ v31;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 89397
           - ((((387 * v5 + 89397) * (unint64_t)a1) >> 32) >> 9) * a2) = v33;
  v34 = *(_BYTE *)(a4 + (v5 | 7)) ^ v33;
  *(_BYTE *)(a3 + v21 + 2709 - ((((v21 + 2709) * (unint64_t)a1) >> 32) >> 9) * a2) = v33;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 89784
           - ((((387 * v5 + 89784) * (unint64_t)a1) >> 32) >> 9) * a2) = v34;
  v35 = *(_BYTE *)(a4 + (v5 | 8));
  *(_BYTE *)(a3 + v21 + 3096 - ((((v21 + 3096) * (unint64_t)a1) >> 32) >> 9) * a2) = v34;
  v36 = v35 ^ v34;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 90171
           - ((((387 * v5 + 90171) * (unint64_t)a1) >> 32) >> 9) * a2) = v36;
  v37 = *(_BYTE *)(a4 + (v5 | 9)) ^ v36;
  *(_BYTE *)(a3 + v21 + 3483 - ((((v21 + 3483) * (unint64_t)a1) >> 32) >> 9) * a2) = v36;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 90558
           - ((((387 * v5 + 90558) * (unint64_t)a1) >> 32) >> 9) * a2) = v37;
  v38 = v17 + ((*(_BYTE *)(a4 + (v5 | 0xA)) + 111) ^ v19) * v10;
  LOBYTE(v38) = *(_BYTE *)(v16 + v38 - (((v38 * (unint64_t)v11) >> 32) >> 1) * v12) ^ 0xE;
  v39 = ((v38 >> 3) | (32 * v38)) ^ v37;
  *(_BYTE *)(a3 + v21 + 3870 - ((((v21 + 3870) * (unint64_t)a1) >> 32) >> 9) * a2) = v37;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 90945
           - ((((387 * v5 + 90945) * (unint64_t)a1) >> 32) >> 9) * a2) = v39;
  v40 = (*(unsigned __int8 *)(a4 + (v5 | 0xB)) ^ 0x9A) * v10 + 25186740;
  v41 = (*(_BYTE *)(v16 + v40 - (((v40 * (unint64_t)v11) >> 32) >> 1) * v12) ^ 0xC3) + 85;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 116874
           - ((((387 * v5 + 116874) * (unint64_t)a1) >> 32) >> 9) * a2) = v39;
  v42 = v41 ^ v39;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 91332
           - ((((387 * v5 + 91332) * (unint64_t)a1) >> 32) >> 9) * a2) = v42;
  v43 = v15 + (((*(_BYTE *)(a4 + (v5 | 0xC)) >> 1) | (*(_BYTE *)(a4 + (v5 | 0xC)) << 7)) ^ 0xD9) * v10;
  LOBYTE(v43) = ((*(_BYTE *)(v16 + v43 - (((v43 * (unint64_t)v11) >> 32) >> 1) * v12) ^ 0x27) * v6) ^ v42;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 117261
           - ((((387 * v5 + 117261) * (unint64_t)a1) >> 32) >> 9) * a2) = v42;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 91719
           - ((((387 * v5 + 91719) * (unint64_t)a1) >> 32) >> 9) * a2) = v43;
  v44 = v17 + ((*(_BYTE *)(a4 + (v5 | v13)) + 111) ^ v19) * v10;
  LOBYTE(v44) = *(_BYTE *)(v16 + v44 - (((v44 * (unint64_t)v11) >> 32) >> 1) * v12) ^ 0xE;
  LOBYTE(v44) = ((v44 >> 3) | (32 * v44)) ^ v43;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 117648
           - ((((387 * v5 + 117648) * (unint64_t)a1) >> 32) >> 9) * a2) = v43;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 92106
           - ((((387 * v5 + 92106) * (unint64_t)a1) >> 32) >> 9) * a2) = v44;
  v45 = (*(unsigned __int8 *)(a4 + (v5 | 0xE)) ^ 0xFE) * v10 + 13123128;
  LOBYTE(v45) = *(_BYTE *)(v16 + v45 - (((v45 * (unint64_t)v11) >> 32) >> 1) * v12) - 71;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 118035
           - ((((387 * v5 + 118035) * (unint64_t)a1) >> 32) >> 9) * a2) = v44;
  LOBYTE(v45) = ((v45 ^ ((_BYTE)v45 << 6) ^ (4 * v45) ^ 0xFE) + 26) ^ v44;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 92493
           - ((((387 * v5 + 92493) * (unint64_t)a1) >> 32) >> 9) * a2) = v45;
  LOBYTE(v44) = *(_BYTE *)(a4 + (v5 | 0xF));
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 118422
           - ((((387 * v5 + 118422) * (unint64_t)a1) >> 32) >> 9) * a2) = v45;
  *(_BYTE *)(a3
           + 387 * (_DWORD)v5
           + 92880
           - ((((387 * v5 + 92880) * (unint64_t)a1) >> 32) >> 9) * a2) = v45 ^ v44;
  LODWORD(STACK[0x3C78]) = a5 ^ v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (((v5 > 0x2F) * v8) ^ a5)) - 12))();
}

uint64_t sub_1006E443C()
{
  int v0;
  int v1;
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  unsigned int v31;
  char v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  unint64_t v43;
  uint64_t (*v44)(void);

  v4 = 59 * (LODWORD(STACK[0x3C78]) ^ 0x446F);
  v5 = 387 * (63 - v3);
  v6 = *((unsigned __int8 *)&STACK[0x5130] + (v5 + 87075) % 0x24Au);
  STACK[0x3C50] = v6;
  LOBYTE(v5) = *((_BYTE *)&STACK[0x5130] + (v5 + v1) % 0x24Au);
  LODWORD(STACK[0x3C58]) = v4;
  v7 = v4 + 387 * (63 - v3 - v0 + v6) + 101112;
  LOBYTE(v5) = v5 ^ v6;
  v8 = v5 ^ v0;
  *((_BYTE *)&STACK[0x5130] + v7 % 0x24A) = v5;
  v9 = 387 * (353 - (int)v3) % 0x24Au;
  LOBYTE(v7) = *((_BYTE *)&STACK[0x5130] + v9);
  v10 = *((unsigned __int8 *)&STACK[0x5130] + 387 * (287 - (int)v3) % 0x24Au);
  STACK[0x3C48] = v10;
  v11 = v10 - v8 + (v10 ^ v7);
  LODWORD(v10) = 63 - (v3 | 2);
  *((_BYTE *)&STACK[0x5130] + v9) = v11;
  v12 = *((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v10 + 87075) % 0x24Au);
  STACK[0x3C40] = v12;
  LODWORD(v9) = v11 ^ v8;
  LOBYTE(v11) = *((_BYTE *)&STACK[0x5130] + (387 * (int)v10 + v1) % 0x24Au) ^ v12;
  v13 = 387 * (351 - (int)v3) % 0x24Au;
  *((_BYTE *)&STACK[0x5130] + (v1 + 387 * ((int)v12 + (int)v10 - (int)v9)) % 0x24Au) = v11;
  v14 = *((unsigned __int8 *)&STACK[0x5130] + 387 * (285 - (int)v3) % 0x24Au);
  LOBYTE(v10) = *((_BYTE *)&STACK[0x5130] + v13);
  v15 = *((_BYTE *)&STACK[0x5130] + 387 * (285 - (int)v3) % 0x24Au);
  STACK[0x3C38] = v14;
  v16 = STACK[0x3C18];
  LOBYTE(v10) = (((*(_BYTE *)(STACK[0x3C18]
                            + 4647 * (v14 ^ 0xB8 ^ v10)
                            + 9544938
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647
                                                                * (v14 ^ 0xB8u ^ v10)
                                                                + 9544938)) >> 32) >> 1))
                 - 87) ^ 0xFB)
               + 85) ^ v15;
  LOBYTE(v9) = v9 ^ v11;
  v17 = 63 - (v3 | 4);
  *((_BYTE *)&STACK[0x5130] + v13) = v9 ^ v10;
  v18 = *((unsigned __int8 *)&STACK[0x5130] + (387 * v17 + 87075) % 0x24Au);
  LOBYTE(v9) = *((_BYTE *)&STACK[0x5130] + (387 * v17 + v1) % 0x24Au) ^ v18;
  LODWORD(v13) = 63 - (v3 | 5);
  *((_BYTE *)&STACK[0x5130]
  + (v1 + 387 * (v17 + 1129362051 * (_DWORD)v18 - 1129362051 * v10)) % 0x24A) = v9;
  v19 = *((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v13 + 87075) % 0x24Au);
  LODWORD(v9) = (v9 ^ v10);
  LODWORD(v6) = 4647 * ((v19 + 111) ^ 0x1C) + 4767822;
  LOBYTE(v6) = *(_BYTE *)(v16
                        + v6
                        - 6784 * (((1266205 * (unint64_t)v6) >> 32) >> 1)) ^ 0xE3;
  LOBYTE(v6) = (v6 >> 3) | (32 * v6);
  LOBYTE(v10) = v6 ^ *((_BYTE *)&STACK[0x5130] + (387 * (int)v13 + v1) % 0x24Au);
  LOBYTE(v19) = (*(_BYTE *)(v16
                          + 4647 * (v19 ^ 0x9A)
                          + 25186740
                          - 6784
                          * (((1266205 * (unint64_t)(4647 * (v19 ^ 0x9Au) + 25186740)) >> 32) >> 1)) ^ 0xC3)
              + 85;
  STACK[0x3C30] = v6;
  LODWORD(v10) = v6 - (_DWORD)v9 + v10;
  STACK[0x3C28] = v19;
  v20 = v1 + 387 * (v13 + 1293052909 * v6 - 1293052909 * v19);
  LODWORD(v13) = 63 - (v3 | 6);
  *((_BYTE *)&STACK[0x5130] + v20 % 0x24A) = v10;
  LODWORD(v9) = v10 ^ v9;
  v21 = *((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v13 + 87075) % 0x24Au);
  v22 = 4647 * (*((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v13 + v1) % 0x24Au) ^ 0xC4) + 14331348;
  v23 = *(unsigned __int8 *)(v16 + v22 - 6784 * (((1266205 * (unint64_t)v22) >> 32) >> 1)) + 117;
  LOBYTE(v23) = ((v23 ^ 0x12 ^ (v23 >> 2) & 0x12) + 26) ^ v21;
  *((_BYTE *)&STACK[0x5130] + (v1 + 387 * (v21 ^ v13 ^ v9)) % 0x24A) = v23;
  LODWORD(v9) = v23 ^ v9;
  v24 = 63 - (v3 | 7);
  v25 = *((unsigned __int8 *)&STACK[0x5130] + (387 * v24 + 87075) % 0x24Au);
  LOBYTE(v10) = *((_BYTE *)&STACK[0x5130] + (387 * v24 + v1) % 0x24Au) ^ v25;
  LODWORD(v10) = 4647 * (((v10 >> 1) | ((_BYTE)v10 << 7)) ^ 0x40) + 15539568;
  LODWORD(v13) = v2 + 4647 * (((v25 >> 1) | ((_BYTE)v25 << 7)) ^ 0xD9);
  LODWORD(v10) = v25
               - v9
               + (97
                                 * (*(_BYTE *)(v16
                                             + v10
                                             - 6784
                                             * (((1266205 * (unint64_t)v10) >> 32) >> 1)) ^ 0xA2));
  *((_BYTE *)&STACK[0x5130]
  + (v1
   + 387
   * ((-1320766261 * (_DWORD)v25) ^ v24 ^ (-1320766261
                                         * (97
                                                                         * (*(_BYTE *)(v16
                                                                                     + v13
                                                                                     - 6784
                                                                                     * (((1266205 * (unint64_t)v13) >> 32) >> 1)) ^ 0x27)))))
  % 0x24A) = v10;
  LODWORD(v9) = v10 ^ v9;
  LODWORD(v10) = 63 - (v3 | 8);
  v26 = *((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v10 + 87075) % 0x24Au);
  LODWORD(v13) = 4647 * ((*((_BYTE *)&STACK[0x5130] + (387 * (int)v10 + v1) % 0x24Au) ^ v26) ^ 0xB8)
               + 9544938;
  LOBYTE(v13) = ((*(_BYTE *)(v16
                           + v13
                           - 6784 * (((1266205 * (unint64_t)v13) >> 32) >> 1))
                - 87) ^ 0xFB)
              + 85;
  *((_BYTE *)&STACK[0x5130] + (v1 + 387 * ((int)v26 + (int)v10 - (int)v9)) % 0x24Au) = v13;
  LODWORD(v9) = v13 ^ v9;
  v27 = 387 * (345 - (int)v3) % 0x24Au;
  v28 = *((unsigned __int8 *)&STACK[0x5130] + 387 * (279 - (int)v3) % 0x24Au);
  LODWORD(v10) = v9 - v28 + (*((_BYTE *)&STACK[0x5130] + v27) ^ v28);
  *((_BYTE *)&STACK[0x5130] + v27) = v10;
  LODWORD(v6) = v10 ^ v9;
  LODWORD(v10) = 63 - (v3 | 0xA);
  LODWORD(v9) = *((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v10 + 87075) % 0x24Au);
  v29 = *((_BYTE *)&STACK[0x5130] + (387 * (int)v10 + v1) % 0x24Au) ^ v9;
  *((_BYTE *)&STACK[0x5130]
  + (v1 + 387 * ((-992152895 * (_DWORD)v9) ^ v10 ^ (-992152895 * (_DWORD)v6))) % 0x24A) = v29;
  v30 = 63 - (v3 | 0xB);
  LODWORD(v10) = *((unsigned __int8 *)&STACK[0x5130] + (387 * v30 + 87075) % 0x24Au);
  v31 = 4647 * ((v10 + 111) ^ 0x1C) + 4767822;
  v32 = *(_BYTE *)(v16 + v31 - 6784 * (((1266205 * (unint64_t)v31) >> 32) >> 1));
  LOBYTE(v27) = ((v32 ^ 0xE3) >> 3) | (32 * (v32 ^ 0xE3));
  v33 = v1 + 387 * (v30 - v10 + v27);
  v34 = *((unsigned __int8 *)&STACK[0x5130] + (387 * v30 + v1) % 0x24Au);
  *((_BYTE *)&STACK[0x5130] + v33 % 0x24A) = v6 ^ v29 ^ v34;
  LODWORD(v6) = 63 - (v3 | 0xC);
  v35 = *((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v6 + 87075) % 0x24Au);
  LOBYTE(v33) = *((_BYTE *)&STACK[0x5130] + (387 * (int)v6 + v1) % 0x24Au) ^ v35;
  *((_BYTE *)&STACK[0x5130] + (v1 + 387 * ((1595530859 * v34) ^ v6 ^ (1595530859 * (_DWORD)v35))) % 0x24A) = v33;
  LOBYTE(v33) = v33 ^ v34;
  LODWORD(v6) = 387 * (63 - (v3 | 0xD));
  v36 = ((int)v6 + v1) % 0x24Au;
  v37 = *((unsigned __int8 *)&STACK[0x5130] + ((int)v6 + 87075) % 0x24Au);
  v38 = 4647 * (((*((_BYTE *)&STACK[0x5130] + v36) ^ v37) + 111) ^ 0x36) + 17937420;
  LOBYTE(v14) = *(_BYTE *)(v16 + v38 - 6784 * (((1266205 * (unint64_t)v38) >> 32) >> 1)) ^ 0xE;
  LODWORD(v14) = v33 - (_DWORD)v37 + ((v14 >> 3) | (32 * v14));
  *((_BYTE *)&STACK[0x5130] + v36) = v14;
  LODWORD(v14) = v14 ^ v33;
  v39 = 63 - (v3 | 0xE);
  v40 = *((unsigned __int8 *)&STACK[0x5130] + (387 * v39 + 87075) % 0x24Au);
  LOBYTE(v38) = *((_BYTE *)&STACK[0x5130] + (387 * v39 + v1) % 0x24Au) ^ v40;
  *((_BYTE *)&STACK[0x5130] + (v1 + 387 * ((int)v40 + v39 - (int)v14)) % 0x24Au) = v38;
  v41 = (-387 * (int)v3 + 18576 + v1) % 0x24Au;
  v42 = *((_BYTE *)&STACK[0x5130] + (-387 * (int)v3 + 105651) % 0x24Au);
  *((_BYTE *)&STACK[0x5130] + v41) = (v14 ^ v38) - v42 + (v42 ^ *((_BYTE *)&STACK[0x5130] + v41));
  STACK[0x3C60] ^= (((unint64_t)STACK[0x3C48] << 8) | (STACK[0x3C40] << 16) | (STACK[0x3C38] << 24)) ^ ((STACK[0x3C30] << 40) | (v25 << 56) | (v21 << 48) | (v18 << 32) | STACK[0x3C50]);
  v43 = (v26 & 0xFFFFFFFF000000FFLL | ((unint64_t)v27 << 24) | ((unint64_t)v9 << 16) | (v35 << 32) | ((unint64_t)v28 << 8)) ^ STACK[0x3C68] ^ (v37 << 40);
  v44 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * ((70 * (v3 > 0x2F)) ^ LODWORD(STACK[0x3C78]))) - 12);
  STACK[0x3C68] = ((v40 << 48) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v42 << 56)) ^ v43;
  return v44();
}

uint64_t sub_1006E4D38@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char v22;
  char v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  int v51;
  int v52;
  int v53;
  char v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  _BYTE *v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  unint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t (*v155)(uint64_t, uint64_t, unint64_t, _QWORD, uint64_t, uint64_t, unint64_t *, _QWORD);

  v5 = STACK[0x3C68];
  v6 = STACK[0x3C60] ^ (STACK[0x3C60] << 23) ^ ((STACK[0x3C60] ^ (STACK[0x3C60] << 23)) >> 17) ^ v5 ^ (v5 >> 26);
  v7 = v5 ^ (a1 << 23) ^ ((v5 ^ (a1 << 23)) >> 17) ^ v6 ^ (v6 >> 26);
  v8 = v4 ^ (v4 << 23) ^ ((v4 ^ (unint64_t)(v4 << 23)) >> 17) ^ (v1 >> 26) ^ v3;
  v9 = v3 ^ (v3 << 23) ^ ((v3 ^ (unint64_t)(v3 << 23)) >> 17) ^ v8 ^ (v8 >> 26);
  v10 = ((v6 ^ (v6 << 23)) >> 17) ^ v6 ^ ((_DWORD)v6 << 23) ^ v7 ^ (v7 >> 26);
  v11 = v8 ^ (v8 << 23) ^ ((v8 ^ (v8 << 23)) >> 17) ^ v9 ^ (v9 >> 26);
  v12 = v7 ^ (v7 << 23) ^ ((v7 ^ (v7 << 23)) >> 17) ^ v11 ^ (v11 >> 26);
  v13 = v12 ^ (v12 >> 26) ^ v11 ^ (v11 << 23) ^ ((v11 ^ (v11 << 23)) >> 17);
  v14 = 1884943155 * (v11 - v10)
      + ((v12 ^ (v12 >> 26) ^ v11 ^ ((v11 ^ (v11 << 23)) >> 17) ^ ((v12 ^ (v12 << 23)) >> 17) ^ v12 ^ (v13 >> 26))
                        + v13);
  v15 = -v14 & 7;
  if ((v14 & 7) != 0)
    v16 = 255;
  else
    v16 = 0;
  v17 = 4647 * ((v16 << v15) ^ 0xB8) + 9544938;
  v18 = STACK[0x3C18];
  v19 = (*(unsigned __int8 *)(STACK[0x3C18] + v17
                                            - 6784 * (((1266205 * (unint64_t)v17) >> 32) >> 1))
       - 87) ^ 0xFFFFFFFB;
  LODWORD(STACK[0x3C60]) = v19;
  v20 = 4647 * ((-86 - v19) ^ 0x9A) + 25186740;
  v21 = v20 - 6784 * (((1266205 * (unint64_t)v20) >> 32) >> 1);
  LODWORD(STACK[0x3B90]) = v14 & 7;
  v22 = v7 + v6 + v6 + v2;
  v23 = (v3 ^ ((v3 ^ (unint64_t)(v3 << 23)) >> 17) ^ v8 ^ (v8 >> 26)) + v8 + v8 + v3;
  v24 = (v22 + v10 + v7);
  v25 = ((v12 ^ (v12 >> 26) ^ v11 ^ ((v11 ^ (v11 << 23)) >> 17))
                        + (v7 ^ ((v7 ^ (v7 << 23)) >> 17) ^ v11 ^ (v11 >> 26)));
  v26 = ((v7 ^ ((v7 ^ (v7 << 23)) >> 17) ^ v11 ^ (v11 >> 26)) + v11);
  v27 = (658149827 * v10) ^ (658149827 * v11) ^ (((v13 >> 26) ^ v13 ^ ((v12 ^ (v12 << 23)) >> 17) ^ v12)
                                                                + v13);
  v28 = (v23 + v11 + v9);
  if ((v14 & 7) != 0)
    v29 = v21;
  else
    v29 = 1066;
  LODWORD(STACK[0x3C48]) = v29;
  v30 = v25 + 809977181 * (v7 - v9);
  v31 = (-373016029 * v24) ^ (-373016029 * v28) ^ v26;
  v32 = v30 | v31 ^ 0x19EE866D;
  LODWORD(STACK[0x3C40]) = v27;
  v33 = -v27;
  v34 = v28 - v24;
  v35 = v27 & 7;
  v36 = 5783;
  if ((v27 & 7) == 0)
    v36 = 1066;
  v37 = v34 + v26;
  v38 = v25 + 335101435 * (v9 - v7);
  v39 = v38 | (v34 + v26) ^ 0x19EE866D;
  v40 = 16843009 * ((v34 + v26) & 0xFE);
  LODWORD(STACK[0x3C28]) = ((_BYTE)v34 + (_BYTE)v26) & 0xFE;
  LODWORD(STACK[0x3C38]) = v34 + v26;
  LODWORD(STACK[0x3B88]) = ((v34 + v26) & 0xFFFFFF01) - (v34 + v26) + (((_BYTE)v34 + (_BYTE)v26) & 0xFE);
  v41 = -v14 & 7;
  LODWORD(STACK[0x3B38]) = v35;
  LODWORD(STACK[0x3C68]) = (v39 ^ 0x5CF478D)
                         + 1233145723
                         * (v35
                          - (v14 & 7)
                          + (v15 ^ v33 & 7)
                          + 441169531 * ((v14 & 7) - v35)
                          + (v14 & 7 ^ v35 ^ (4 * (v14 & 7 ^ v35)) ^ 0x34845C1F));
  LODWORD(STACK[0x3C50]) = v32;
  LODWORD(STACK[0x3B78]) = (v39 ^ BYTE1(v39) ^ BYTE2(v39)) ^ HIBYTE(v39);
  v42 = 16843009 * (v31 & 0xFE);
  LODWORD(STACK[0x3C78]) = v31 & 0xFFFFFF01 | (2 * ((v31 & 0xFE) >> 1));
  LODWORD(STACK[0x3B80]) = (-1840505025 * (v37 & 0xFE)) ^ (-1840505025 * (v31 & 0xFE)) ^ v42 ^ v40;
  v43 = ((*(unsigned __int8 *)(v18 + v36) ^ 0xFFFFFFC3) + 85) << (v33 & 7);
  v44 = ~(((*(_BYTE *)(v18 + v36) ^ 0xC3) + 85) << (v33 & 7));
  if ((v27 & 7) == 0)
    v44 = 0;
  LODWORD(STACK[0x3B70]) = v44 & v31;
  LODWORD(STACK[0x3B48]) = (-1977749021 * v31) ^ (2 * v31) ^ (v31 >> 3);
  v45 = v42 + 843646725 * (v31 - v37);
  v46 = (v33 & 7) + LODWORD(STACK[0x3C40]);
  v47 = 4647 * (LODWORD(STACK[0x3BA8]) ^ 0x45)
      + 20344566
      - 6784
      * (((1266205
                       * (unint64_t)(4647 * (LODWORD(STACK[0x3BA8]) ^ 0x45u) + 20344566)) >> 32) >> 1);
  v48 = v43;
  LODWORD(STACK[0x3B40]) = (-1560281088 * v43) & v30;
  LODWORD(STACK[0x3C40]) = v38;
  v49 = (55 * v38) ^ (55 * v30);
  v50 = v46 - v14;
  LOBYTE(v46) = LODWORD(STACK[0x3C20]) ^ 0x8D ^ *(_BYTE *)(v18
                                                         + 4647 * (LODWORD(STACK[0x3C20]) ^ 0x36)
                                                         + 5962101
                                                         - 6784
                                                         * (((1266205
                                                                          * (unint64_t)(4647
                                                                                             * (LODWORD(STACK[0x3C20]) ^ 0x36u)
                                                                                             + 5962101)) >> 32) >> 1));
  v51 = *(unsigned __int8 *)(v18 + v47) + 26;
  v52 = v51 ^ ((v51 & 0xF8) >> 3) ^ 0x40 ^ (((v51 ^ ((v51 & 0xF8) >> 3) ^ 0x40) & ((v31 & 0xFE) + 5 * (v31 - v37)) & 0xFE) >> 1);
  v53 = (v46 ^ ((v46 & ((v31 & 0xFE) + 5 * (v31 - v37)) & 0xFE) >> 1));
  v54 = v14 & 7;
  v55 = 4647 * (((((v53 << (v14 & 7)) & 1) << 7) | ((v53 << (v14 & 7)) >> 1)) ^ 0x40) + 15539568;
  v56 = v55 - 6784 * (((1266205 * (unint64_t)v55) >> 32) >> 1);
  v57 = (LODWORD(STACK[0x3C60]) + 85);
  LOBYTE(v55) = (*(_BYTE *)(v18 + LODWORD(STACK[0x3C48])) ^ 0xC3) + 85;
  LODWORD(STACK[0x3C48]) = v37;
  LODWORD(STACK[0x3B60]) = v57;
  v57 *= 16843009;
  LODWORD(STACK[0x3B50]) = v57;
  v58 = v57 ^ v55 & v37;
  v59 = 4647
      * ((((v53 & v58) >> (-(char)v14 & 7) >> 1) | (((v53 & v58) >> (-(char)v14 & 7)) << 7)) ^ 0xD9)
      + 19140993;
  LOBYTE(v59) = (*(_BYTE *)(v18 + v59 - 6784 * (((1266205 * (unint64_t)v59) >> 32) >> 1)) ^ 0x27)
              + (*(_BYTE *)(v18 + v56) ^ 0xA2);
  v60 = 16843009 * ((v32 ^ BYTE1(v32) ^ BYTE2(v32)) ^ HIBYTE(v32) ^ 0xC7);
  LODWORD(STACK[0x3838]) = v60;
  v61 = v60 ^ 0xC7C7C7C7;
  v62 = 4647
      * (((97 * v59) ^ v32 ^ BYTE1(v32) ^ BYTE2(v32) ^ HIBYTE(v32) ^ (v52 << v54) ^ ((unint64_t)(v52 & (v57 ^ v55 & v37)) >> v50)) ^ 0x9A)
      + 25186740;
  v63 = LODWORD(STACK[0x3BA0]) ^ 0xFD;
  LOBYTE(v62) = *(_BYTE *)(v18 + v62 - 6784 * (((1266205 * (unint64_t)v62) >> 32) >> 1)) ^ 0xC3;
  v64 = (_BYTE *)STACK[0x508];
  *v64 = v62 - ((2 * v62 + 42) & 0x62) - 122;
  v65 = *(unsigned __int8 *)(v18
                           + 4647 * v63
                           + 20344566
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * v63 + 20344566)) >> 32) >> 1))
      + 26;
  v66 = STACK[0x3C28];
  v67 = *(unsigned __int8 *)(v18
                           + 4647 * (LODWORD(STACK[0x3BB0]) ^ 0xCD)
                           + 20344566
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647
                                                               * (LODWORD(STACK[0x3BB0]) ^ 0xCDu)
                                                               + 20344566)) >> 32) >> 1))
      + 26;
  v68 = v67 ^ ((v67 & 0xF8) >> 3) ^ 0xFFFFFF93;
  LODWORD(STACK[0x3B68]) = v40;
  v69 = 4647
      * ((v65 ^ ((v65 & 0xF8) >> 3) ^ ((v66 & (v65 ^ ((v65 & 0xF8) >> 3) ^ 0xFFFFFFBF)) >> 1)) ^ 0x25)
      + 25186740;
  v70 = *(unsigned __int8 *)(v18
                           + 4647 * (((v68 & v40) + 111) ^ 0x36)
                           + 17937420
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647 * (((v68 & v40) + 111) ^ 0x36u)
                                                               + 17937420)) >> 32) >> 1));
  v71 = v68 ^ (((v70 >> 3) & 0xFE | (32 * (v70 ^ 6))) >> 1);
  v72 = v49 ^ LODWORD(STACK[0x3B38]);
  v73 = ((v71 & v58) >> 1) | ((v71 & v58) << 7);
  LODWORD(v71) = 4647 * (((v71 << v72) + 111) ^ 0x36) + 17937420;
  LODWORD(STACK[0x3B38]) = 16843009 * v48;
  v74 = LODWORD(STACK[0x3B70]) ^ (16843009 * v48);
  LOBYTE(v48) = (*(_BYTE *)(v18 + v69 - 6784 * (((1266205 * (unint64_t)v69) >> 32) >> 1)) ^ 0xC3)
              + 85;
  v75 = 4647
      * (((unint64_t)(97
                                            * (*(_BYTE *)(v18
                                                        + 4647 * (v73 ^ 0x40)
                                                        + 15539568
                                                        - 6784
                                                        * (((1266205
                                                                         * (unint64_t)(4647 * (v73 ^ 0x40u)
                                                                                            + 15539568)) >> 32) >> 1)) ^ 0xA2)) >> v50) ^ 0xFE)
      + 13123128;
  LODWORD(v71) = *(unsigned __int8 *)(v18
                                    + v71
                                    - 6784
                                    * (((1266205 * (unint64_t)v71) >> 32) >> 1)) ^ 0xE;
  v76 = *(unsigned __int8 *)(v18 + v75 - 6784 * (((1266205 * (unint64_t)v75) >> 32) >> 1)) - 71;
  v77 = 16843009 * (LODWORD(STACK[0x3B78]) ^ 0x74);
  LODWORD(STACK[0x36B0]) = v77;
  LODWORD(STACK[0x3AD0]) = v77 ^ 0x74747474;
  v78 = (((unint64_t)(v48 & v74) >> v50) + ((unint64_t)v48 << v72)) ^ v77 ^ 0x74747474 ^ ((v76 ^ (v76 << 6) ^ (4 * v76) ^ 0xFFFFFFFE) + 26) ^ ((v71 >> 3) | (32 * v71));
  v79 = STACK[0x3BC0] ^ 0x8C;
  v64[1] = v78 - ((2 * v78) & 0x62) + 49;
  v80 = *(unsigned __int8 *)(v18
                           + 4647 * v79
                           + 9544938
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * v79 + 9544938)) >> 32) >> 1));
  LODWORD(STACK[0x3C60]) = LODWORD(STACK[0x3B80]) ^ (v42 - v40 - 351102658);
  LODWORD(v71) = ((LODWORD(STACK[0x3BB8]) ^ 0xE9) + 111) ^ 0x1C;
  v81 = *(unsigned __int8 *)(v18
                           + 4647 * ((((v80 - 87) ^ 0xFB) + 85) ^ 1)
                           + 5962101
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647
                                                               * ((((v80 - 87) ^ 0xFB) + 85) ^ 1u)
                                                               + 5962101)) >> 32) >> 1)) ^ (((v80 - 87) ^ 0xFFFFFFFB)
                                                                                          + 85) ^ 0xFFFFFF9B;
  v82 = *(unsigned __int8 *)(v18
                           + 4647 * (_DWORD)v71
                           + 4767822
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * v71 + 4767822)) >> 32) >> 1)) ^ 0xFFFFFFE3;
  v83 = v81 ^ ((v81 & v45 & 0xFE) >> 1);
  v84 = ((v82 >> 3) | (32 * v82)) ^ *(unsigned __int8 *)(v18
                                                                        + 4647
                                                                        * (((v82 >> 3) | (32 * v82)) ^ 1)
                                                                        + 5962101
                                                                        - 6784
                                                                        * (((1266205
                                                                                         * (unint64_t)(4647 * (((v82 >> 3) | (32 * v82)) ^ 1u) + 5962101)) >> 32) >> 1));
  v85 = 4647 * ((v84 ^ ((v66 & (v84 ^ 0x1Au)) >> 1)) ^ 0xE5) + 13123128;
  v86 = *(unsigned __int8 *)(v18 + v85 - 6784 * (((1266205 * (unint64_t)v85) >> 32) >> 1)) - 71;
  v87 = (v86 ^ (v86 << 6) ^ (4 * v86) ^ 0xFFFFFFFE) + 26;
  v88 = 4647 * ((((unint64_t)(v87 & v74) >> v50) + (v87 << v54)) ^ 0xFE)
      + 13123128;
  LOBYTE(v88) = *(_BYTE *)(v18 + v88 - 6784 * (((1266205 * (unint64_t)v88) >> 32) >> 1)) - 71;
  LOBYTE(v83) = (((v83 & v74) >> v41) | ((_BYTE)v83 << v54)) ^ v32 ^ BYTE1(v32) ^ BYTE2(v32) ^ HIBYTE(v32) ^ ((v88 ^ ((_BYTE)v88 << 6) ^ (4 * v88) ^ 0xFE) + 26);
  v89 = STACK[0x3BD0];
  v64[2] = v83 - ((2 * v83) & 0x62) + 49;
  LOBYTE(v88) = v89 ^ 0x6A ^ *(_BYTE *)(v18
                                      + 4647 * (v89 ^ 0xB4)
                                      + 5962101
                                      - 6784
                                      * (((1266205
                                                       * (unint64_t)(4647 * (v89 ^ 0xB4u)
                                                                          + 5962101)) >> 32) >> 1));
  v90 = LODWORD(STACK[0x3BC8]) ^ 0xFFFFFFB6 ^ *(unsigned __int8 *)(v18
                                                                 + 4647
                                                                 * (LODWORD(STACK[0x3BC8]) ^ 0xD5)
                                                                 + 5962101
                                                                 - 6784
                                                                 * (((1266205
                                                                                  * (unint64_t)(4647 * (LODWORD(STACK[0x3BC8]) ^ 0xD5u) + 5962101)) >> 32) >> 1));
  v91 = v90 ^ ((v90 & v45 & 0xFE) >> 1);
  v92 = (v88 ^ ((v88 & v45 & 0xFE) >> 1));
  v93 = v41;
  v94 = 4647
      * (((((v92 & v58) >> v41) | (v92 << v72)) ^ v32 ^ BYTE1(v32) ^ BYTE2(v32) ^ HIBYTE(v32) ^ (((unint64_t)(v91 & v74) >> v50) + (v91 << v54))) ^ 0xB8)
      + 9544938;
  v95 = STACK[0x3BD8];
  v96 = STACK[0x3BF0];
  LOBYTE(v94) = (*(_BYTE *)(v18 + v94 - 6784 * (((1266205 * (unint64_t)v94) >> 32) >> 1)) - 87) ^ 0xFB;
  v64[3] = v94 - ((2 * v94 + 42) & 0x62) - 122;
  LODWORD(v71) = v96 ^ 0x69 ^ *(unsigned __int8 *)(v18
                                                 + 4647 * (v96 ^ 0x31)
                                                 + 5962101
                                                 - 6784
                                                 * (((1266205
                                                                  * (unint64_t)(4647
                                                                                     * (v96 ^ 0x31u)
                                                                                     + 5962101)) >> 32) >> 1));
  v97 = 4647
      * ((~(2
          * (*(unsigned __int8 *)(v18
                                + 4647 * (v95 ^ 0xD4)
                                + 5962101
                                - 6784
                                * (((1266205
                                                 * (unint64_t)(4647 * (v95 ^ 0xD4u) + 5962101)) >> 32) >> 1)) ^ v95)) & 0x10)
       + ((*(_BYTE *)(v18
                                     + 4647 * (v95 ^ 0xD4)
                                     + 5962101
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * (v95 ^ 0xD4u)
                                                                         + 5962101)) >> 32) >> 1)) ^ v95) ^ 0xB56));
  LOBYTE(v97) = *(_BYTE *)(v18 + v97 - 6784 * (((1266205 * (unint64_t)v97) >> 32) >> 1)) - 71;
  LOBYTE(v97) = ((v97 ^ ((_BYTE)v97 << 6) ^ (4 * v97) ^ 0xFE) + 26) ^ 0x78;
  LOBYTE(v97) = v97 ^ ((v97 & v45 & 0xFE) >> 1);
  LODWORD(v89) = 4647
               * (((((unint64_t)v97 << v72) >> 1) & 0x7F | ((((unint64_t)v97 << v72) & 1) << 7)) ^ 0x40)
               + 15539568;
  v98 = (v71 ^ ((v66 & v71) >> 1));
  v99 = (((v98 & v58) >> v93) | (v98 << v72)) ^ v61 ^ (((unint64_t)(v97 & v74) >> v50) | (97 * (*(unsigned __int8 *)(v18 + v89 - 6784 * (((1266205 * (unint64_t)v89) >> 32) >> 1)) ^ 0xFFFFFFA2)));
  v64[4] = v99 - ((2 * v99) & 0x62) + 49;
  LOBYTE(v99) = ((LODWORD(STACK[0x3BE8]) >> 1) | (LODWORD(STACK[0x3BE8]) << 7)) ^ 0xBE;
  LODWORD(v98) = LODWORD(STACK[0x3BE0]) ^ 0xFFFFFFB3 ^ *(unsigned __int8 *)(v18
                                                                          + 4647
                                                                          * (LODWORD(STACK[0x3BE0]) ^ 5)
                                                                          + 5962101
                                                                          - 6784
                                                                          * (((1266205
                                                                                           * (unint64_t)(4647 * (LODWORD(STACK[0x3BE0]) ^ 5u) + 5962101)) >> 32) >> 1));
  v100 = 97
       * (*(unsigned __int8 *)(v18
                             + 4647 * v99
                             + 19140993
                             - 6784
                             * (((1266205
                                              * (unint64_t)(4647 * v99 + 19140993)) >> 32) >> 1)) ^ 0x27);
  v101 = *(unsigned __int8 *)(v18
                            + 4647 * (v100 ^ 1)
                            + 5962101
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647 * (v100 ^ 1u) + 5962101)) >> 32) >> 1)) ^ v100 ^ 0x13;
  v102 = v101 ^ ((v101 & v45 & 0xFE) >> 1);
  v103 = STACK[0x3C00];
  LOBYTE(v56) = v54;
  v104 = ((((v98 ^ ((v66 & v98) >> 1)) & v58) >> v93)
        + ((v98 ^ ((v66 & v98) >> 1)) << v54)) ^ v61 ^ (v102 << v54) ^ ((v102 & v74) >> v93);
  v64[5] = v104 - ((2 * v104) & 0x62) + 49;
  LODWORD(v89) = v103 ^ 0xFFFFFFF4 ^ *(unsigned __int8 *)(v18
                                                        + 4647 * (v103 ^ 0x76)
                                                        + 5962101
                                                        - 6784
                                                        * (((1266205
                                                                         * (unint64_t)(4647
                                                                                            * (v103 ^ 0x76u)
                                                                                            + 5962101)) >> 32) >> 1));
  v105 = v89 ^ ((v66 & v89) >> 1);
  LODWORD(v96) = 4647 * (((v105 << v72) + 111) ^ 0x1C) + 4767822;
  LODWORD(v96) = *(unsigned __int8 *)(v18
                                    + v96
                                    - 6784
                                    * (((1266205 * (unint64_t)v96) >> 32) >> 1)) ^ 0xFFFFFFE3;
  v106 = *(unsigned __int8 *)(v18
                            + 4647 * (LODWORD(STACK[0x3BF8]) ^ 0x61)
                            + 20344566
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647
                                                                * (LODWORD(STACK[0x3BF8]) ^ 0x61u)
                                                                + 20344566)) >> 32) >> 1))
       + 26;
  LODWORD(v92) = v106 ^ ((v106 & 0xF8) >> 3) ^ 0x69 ^ (((v106 ^ ((v106 & 0xF8) >> 3) ^ 0x69) & v45 & 0xFE) >> 1);
  LODWORD(v92) = 4647 * (((v92 >> 1) | ((_BYTE)v92 << 7)) ^ 0x40) + 15539568;
  v107 = 97
       * (*(unsigned __int8 *)(v18
                             + v92
                             - 6784 * (((1266205 * (unint64_t)v92) >> 32) >> 1)) ^ 0xFFFFFFA2);
  v108 = LODWORD(STACK[0x3C08]) ^ 0xFC;
  LODWORD(v105) = ((v96 >> 3) | (32 * v96)) ^ v61 ^ ((unint64_t)(v107 & v74) >> v50) ^ (v107 << v72) ^ ((unint64_t)(v105 & v58) >> v50);
  v64[6] = v105 + (~(2 * v105) | 0x9D) + 50;
  LOBYTE(v105) = *(_BYTE *)(v18
                          + 4647 * v108
                          + 20344566
                          - 6784
                          * (((1266205 * (unint64_t)(4647 * v108 + 20344566)) >> 32) >> 1))
               + 26;
  LODWORD(v105) = 4647 * (((v105 ^ ((v105 & 0xF8) >> 3) ^ 0xD0) + 111) ^ 0x1C)
                + 4767822;
  LODWORD(v96) = *(unsigned __int8 *)(v18
                                    + 4647 * (LODWORD(STACK[0x3C10]) ^ 0xB7)
                                    + 20344566
                                    - 6784
                                    * (((1266205
                                                     * (unint64_t)(4647
                                                                        * (LODWORD(STACK[0x3C10]) ^ 0xB7u)
                                                                        + 20344566)) >> 32) >> 1))
               + 26;
  LODWORD(v105) = *(unsigned __int8 *)(v18
                                     + v105
                                     - 6784
                                     * (((1266205 * (unint64_t)v105) >> 32) >> 1)) ^ 0xFFFFFFE3;
  LODWORD(v96) = v96 ^ ((v96 & 0xF8) >> 3) ^ 0x30 ^ (((v96 ^ ((v96 & 0xF8) >> 3) ^ 0x30) & v45 & 0xFE) >> 1);
  v109 = 4647 * (v96 & v58 ^ 0xC4) + 14331348;
  LODWORD(v105) = ((v105 >> 3) | (32 * v105)) ^ ((v66 & ((v105 >> 3) | (32 * v105))) >> 1);
  v110 = *(unsigned __int8 *)(v18 + v109 - 6784 * (((1266205 * (unint64_t)v109) >> 32) >> 1)) + 117;
  v111 = STACK[0x3448];
  LODWORD(v103) = STACK[0x3448] ^ 0x39;
  v112 = STACK[0x3AD0];
  LODWORD(v105) = ((_DWORD)v96 << v56) ^ LODWORD(STACK[0x3AD0]) ^ (((v105 & v58) >> v93)
                                                                 + ((_DWORD)v105 << v56)) ^ (((v110 ^ 0x12 ^ (v110 >> 2) & 0x12) + 26) >> v93);
  v64[7] = v105 - ((2 * v105) & 0x62) + 49;
  LODWORD(v96) = 4647
               * (((v111 ^ 0x4D ^ *(_BYTE *)(v18
                                                            + 4647 * (_DWORD)v103
                                                            + 5962101
                                                            - 6784
                                                            * (((1266205
                                                                             * (unint64_t)(4647 * v103 + 5962101)) >> 32) >> 1)))
                                  + 111) ^ 0x36)
               + 17937420;
  LODWORD(v96) = *(unsigned __int8 *)(v18
                                    + v96
                                    - 6784
                                    * (((1266205 * (unint64_t)v96) >> 32) >> 1)) ^ 0xE;
  v113 = ((v96 >> 3) | (32 * v96)) ^ 0xFFFFFFD4;
  LODWORD(v96) = 4647 * (((v66 & v113) >> 1) ^ 0x40) + 15539568;
  LODWORD(v103) = STACK[0x3478] ^ 0x1B ^ *(unsigned __int8 *)(v18
                                                            + 4647 * STACK[0x3478]
                                                            + 5962101
                                                            - 6784
                                                            * (((1266205
                                                                             * (unint64_t)(4647
                                                                                                * STACK[0x3478]
                                                                                                + 5962101)) >> 32) >> 1));
  LOBYTE(v113) = v113 ^ (((97
                                          * (*(_BYTE *)(v18
                                                      + v96
                                                      - 6784
                                                      * (((1266205 * (unint64_t)v96) >> 32) >> 1)) ^ 0xA2)) & 0xFE) >> 1);
  v114 = STACK[0x3400];
  LODWORD(v98) = STACK[0x3400] ^ 0x76;
  v115 = v66;
  v116 = ((unint64_t)(v113 & v74) >> v50) ^ ((unint64_t)v113 << v72) ^ ((((v103 ^ ((v115 & v103) >> 1)) & v74) >> v50) | ((unint64_t)(v103 ^ ((v115 & v103) >> 1)) << v72)) ^ v112;
  v64[8] = v116 - ((2 * v116) & 0x62) + 49;
  v117 = v114 ^ 0xFFFFFFF4 ^ *(unsigned __int8 *)(v18
                                                + 4647 * (_DWORD)v98
                                                + 5962101
                                                - 6784
                                                * (((1266205
                                                                 * (unint64_t)(4647 * v98 + 5962101)) >> 32) >> 1));
  LODWORD(v98) = 4647 * (((v117 & v45) + 111) ^ 0x1C) + 4767822;
  LOBYTE(v98) = *(_BYTE *)(v18
                         + v98
                         - 6784 * (((1266205 * (unint64_t)v98) >> 32) >> 1)) ^ 0xE3;
  v118 = v117 ^ ((((v98 & 0xF0) >> 3) & 0xFE | (32 * v98)) >> 1);
  LODWORD(v98) = 4647 * (((v118 & v58) + 111) ^ 0x1C) + 4767822;
  LOBYTE(v98) = *(_BYTE *)(v18
                         + v98
                         - 6784 * (((1266205 * (unint64_t)v98) >> 32) >> 1)) ^ 0xE3;
  v119 = 4647
       * ((((v118 << v54) + (((v98 >> 3) | (32 * v98)) >> v93)) ^ v61) ^ 0xFE)
       + 13123128;
  LODWORD(v98) = STACK[0x3438] ^ 0xFFFFFF8E ^ *(unsigned __int8 *)(v18
                                                                 + 4647 * (STACK[0x3438] ^ 0x78)
                                                                 + 5962101
                                                                 - 6784
                                                                 * (((1266205
                                                                                  * (unint64_t)(4647 * (STACK[0x3438] ^ 0x78u) + 5962101)) >> 32) >> 1));
  v120 = *(unsigned __int8 *)(v18 + v119 - 6784 * (((1266205 * (unint64_t)v119) >> 32) >> 1)) - 71;
  v121 = (((unint64_t)((v98 ^ ((v115 & v98) >> 1)) & v58) >> v50) | ((v98 ^ ((v115 & v98) >> 1)) << v54)) ^ ((v120 ^ (v120 << 6) ^ (4 * v120) ^ 0xFFFFFFFE) + 26);
  v64[9] = v121 - ((2 * v121) & 0x62) + 49;
  v122 = 4647
       * ((LODWORD(STACK[0x3410]) ^ *(_BYTE *)(v18
                                                              + 4647 * (LODWORD(STACK[0x3410]) ^ 0x6D)
                                                              + 5962101
                                                              - 6784
                                                              * (((1266205
                                                                               * (unint64_t)(4647 * (LODWORD(STACK[0x3410]) ^ 0x6Du)
                                                                                                  + 5962101)) >> 32) >> 1))) ^ 0xF)
       + 13123128;
  LOBYTE(v122) = *(_BYTE *)(v18 + v122 - 6784 * (((1266205 * (unint64_t)v122) >> 32) >> 1)) - 71;
  LOBYTE(v122) = (v122 ^ ((_BYTE)v122 << 6) ^ (4 * v122) ^ 0xFE) + 26;
  v123 = (v122 ^ ((v122 & v45 & 0xFE) >> 1));
  LODWORD(v123) = 4647
                * ((((((v123 & v74) >> v93) | (v123 << v72)) ^ v61) + 111) ^ 0x36)
                + 17937420;
  LODWORD(v105) = v123 - 6784 * (((1266205 * (unint64_t)v123) >> 32) >> 1);
  LODWORD(v123) = *(unsigned __int8 *)(v18
                                     + 4647 * (STACK[0x3408] ^ 0x4D)
                                     + 20344566
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647
                                                                         * (STACK[0x3408] ^ 0x4Du)
                                                                         + 20344566)) >> 32) >> 1))
                + 26;
  LODWORD(v98) = 4647
               * ((((unint64_t)(((v123 ^ ((v123 & 0xF8) >> 3)) ^ 0xB8u ^ (((v123 ^ ((v123 & 0xF8) >> 3) ^ 0xB8) & v45 & 0xFE) >> 1)) & v74) >> v50)
                                  + ((unint64_t)(v123 ^ ((v123 & 0xF8) >> 3) ^ 0xFFFFFFB8 ^ (((v123 ^ ((v123 & 0xF8) >> 3) ^ 0xB8) & v45 & 0xFE) >> 1)) << v72)) ^ 0xFE)
               + 13123128;
  LOBYTE(v98) = *(_BYTE *)(v18
                         + v98
                         - 6784 * (((1266205 * (unint64_t)v98) >> 32) >> 1))
              - 71;
  LODWORD(v103) = LODWORD(STACK[0x3418]) ^ 0xCB;
  LOBYTE(v105) = ((v98 ^ ((_BYTE)v98 << 6) ^ (4 * v98) ^ 0xFE) + 26) ^ (((*(_BYTE *)(v18 + v105) ^ 0xE) >> 3) | (32 * (*(_BYTE *)(v18 + v105) ^ 0xE)));
  v64[10] = v105 + (~(2 * v105) | 0x9D) + 50;
  LOBYTE(v107) = ((*(_BYTE *)(v18
                            + 4647 * (_DWORD)v103
                            + 25186740
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * v103 + 25186740)) >> 32) >> 1)) ^ 0xC3)
                + 85) ^ 0x86;
  LODWORD(v105) = LODWORD(STACK[0x3430]) ^ 0x5A ^ *(unsigned __int8 *)(v18
                                                                     + 4647
                                                                     * (LODWORD(STACK[0x3430]) ^ 0x26)
                                                                     + 5962101
                                                                     - 6784
                                                                     * (((1266205
                                                                                      * (unint64_t)(4647 * (LODWORD(STACK[0x3430]) ^ 0x26u) + 5962101)) >> 32) >> 1));
  LODWORD(v107) = *(unsigned __int8 *)(v18
                                     + 4647 * v107
                                     + 20344566
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * v107
                                                                         + 20344566)) >> 32) >> 1))
                + 26;
  LODWORD(v107) = v107 ^ ((v107 & 0xF8) >> 3) ^ 0xFFFFFFE2 ^ ((v66 & (v107 ^ ((v107 & 0xF8) >> 3) ^ 0xFFFFFFE2)) >> 1);
  v124 = 4647 * (((v105 & v45) + 111) ^ 0x36) + 17937420;
  v125 = *(unsigned __int8 *)(v18 + v124 - 6784 * (((1266205 * (unint64_t)v124) >> 32) >> 1));
  LOBYTE(v114) = STACK[0x3428];
  LODWORD(v105) = v105 ^ (((v125 >> 3) & 0xFE | (32 * (v125 ^ 6))) >> 1);
  v126 = v54;
  LODWORD(v107) = ((_DWORD)v107 << v56) ^ v61 ^ ((v107 & v58) >> v93) ^ (((unint64_t)(v105 & v58) >> v50)
                                                                                        + ((_DWORD)v105 << v56));
  v64[11] = v107 - ((2 * v107) & 0x62) + 49;
  LODWORD(v105) = 4647
                * (v114 ^ 0x19 ^ *(_BYTE *)(v18
                                                           + 4647 * (v114 ^ 4)
                                                           + 5962101
                                                           - 6784
                                                           * (((1266205
                                                                            * (unint64_t)(4647
                                                                                               * (v114 ^ 4u)
                                                                                               + 5962101)) >> 32) >> 1)))
                + 14331348;
  LODWORD(v105) = *(unsigned __int8 *)(v18
                                     + v105
                                     - 6784
                                     * (((1266205 * (unint64_t)v105) >> 32) >> 1))
                + 117;
  LODWORD(v105) = (v105 ^ 0x12 ^ (v105 >> 2) & 0x12) + 26;
  v127 = 4647
       * ((((v105 & STACK[0x3B68]) << 6) | ((v105 & LOBYTE(STACK[0x3B68])) >> 2)) ^ 0xD9)
       + 19140993;
  LOBYTE(v105) = v105 ^ (97
                       * (*(_BYTE *)(v18 + v127 - 6784 * (((1266205 * (unint64_t)v127) >> 32) >> 1)) ^ 0x27));
  LODWORD(v105) = 4647 * (((v105 >> 1) | ((_BYTE)v105 << 7)) ^ 0xD9) + 19140993;
  v128 = (97
                         * (*(_BYTE *)(v18
                                     + v105
                                     - 6784
                                     * (((1266205 * (unint64_t)v105) >> 32) >> 1)) ^ 0x27));
  LODWORD(v128) = (v128 << v72) ^ v61 ^ ((v128 & v74) >> v93);
  LODWORD(v128) = 4647 * ((((v128 & 1) << 7) | (v128 >> 1)) ^ 0xD9) + 19140993;
  v129 = *(unsigned __int8 *)(v18
                            + 4647 * (LODWORD(STACK[0x3420]) ^ 9)
                            + 14331348
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647 * (LODWORD(STACK[0x3420]) ^ 9u)
                                                                + 14331348)) >> 32) >> 1))
       + 117;
  v130 = (v129 ^ 0x12 ^ (v129 >> 2) & 0x12) + 26;
  v131 = *(unsigned __int8 *)(v18
                            + 4647 * (v130 ^ 1)
                            + 5962101
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647 * (v130 ^ 1u) + 5962101)) >> 32) >> 1)) ^ v130 ^ 0x32;
  v132 = v131 ^ ((v131 & v45 & 0xFE) >> 1);
  v133 = STACK[0x3460];
  LODWORD(v103) = STACK[0x3460] ^ 0x50;
  LODWORD(v128) = (((v132 & v58) >> v93) | (v132 << v54)) ^ (97
                                                                            * (*(unsigned __int8 *)(v18
                                                                                                  + v128
                                                                                                  - 6784 * (((1266205 * (unint64_t)v128) >> 32) >> 1)) ^ 0x27));
  v64[12] = v128 - ((2 * v128) & 0x62) + 49;
  v134 = (1383219683 * v61) ^ (v61 >> 6) ^ (v61 >> 4) ^ (1383219683 * v112) ^ (v112 >> 6) ^ (v112 >> 4) ^ 0xEB12993E;
  LOBYTE(v107) = *(_BYTE *)(v18
                          + 4647 * (_DWORD)v103
                          + 5962101
                          - 6784
                          * (((1266205 * (unint64_t)(4647 * v103 + 5962101)) >> 32) >> 1)) ^ v133;
  LODWORD(v107) = 4647 * (((v107 >> 1) | ((_BYTE)v107 << 7)) ^ 0xCB) + 19140993;
  LODWORD(v98) = *(unsigned __int8 *)(v18
                                    + 4647 * (LODWORD(STACK[0x3450]) ^ 0x36)
                                    + 20344566
                                    - 6784
                                    * (((1266205
                                                     * (unint64_t)(4647
                                                                        * (LODWORD(STACK[0x3450]) ^ 0x36u)
                                                                        + 20344566)) >> 32) >> 1))
               + 26;
  v135 = 4647 * (LODWORD(STACK[0x3440]) ^ 0x57)
       + 20344566
       - 6784
       * (((1266205
                        * (unint64_t)(4647 * (LODWORD(STACK[0x3440]) ^ 0x57u) + 20344566)) >> 32) >> 1);
  v136 = v98 ^ ((v98 & 0xF8) >> 3) ^ 0x74 ^ (((v98 ^ ((v98 & 0xF8) >> 3) ^ 0x74) & v45 & 0xFE) >> 1);
  LODWORD(v107) = 97
                * (*(unsigned __int8 *)(v18
                                      + v107
                                      - 6784
                                      * (((1266205 * (unint64_t)v107) >> 32) >> 1)) ^ 0x27);
  v137 = v107 ^ 0xFFFFFF91;
  v138 = v66 & (v107 ^ 0xFFFFFF91);
  v139 = (v138 >> 1) & 0x40;
  if ((v139 & v107) != 0)
    v140 = -v139;
  else
    v140 = (v138 >> 1) & 0x40;
  v141 = (v140 + v137) ^ (v138 >> 1) & 0x3F;
  LODWORD(v141) = (((unint64_t)(v136 & v74) >> v50) | (v136 << v126)) ^ v61 ^ (((unint64_t)(v141 & v74) >> v50) + (v141 << v72));
  v64[13] = v141 - ((2 * v141) & 0x62) + 49;
  LODWORD(v141) = 4647
                * (((*(_BYTE *)(v18 + v135) + 26) ^ (((*(_BYTE *)(v18 + v135) + 26) & 0xF8) >> 3)) ^ 0x8D)
                + 13123128;
  LODWORD(v141) = *(unsigned __int8 *)(v18
                                     + v141
                                     - 6784
                                     * (((1266205 * (unint64_t)v141) >> 32) >> 1))
                - 71;
  LODWORD(v141) = ((v141 ^ ((_DWORD)v141 << 6) ^ (4 * v141) ^ 0xFFFFFFFE) + 26) ^ 0xFFFFFFBA;
  v142 = v141 ^ ((v66 & v141) >> 1);
  v143 = 4647 * (((v142 & v58) >> v93) ^ 0x9A) + 25186740;
  v144 = 4647 * (((STACK[0x3478] >> 49) & 0x7F | ((STACK[0x3470] & 1) << 7)) ^ 0x60) + 15539568;
  v145 = 97
       * (*(unsigned __int8 *)(v18 + v144 - 6784 * (((1266205 * (unint64_t)v144) >> 32) >> 1)) ^ 0xFFFFFFA2);
  LODWORD(v142) = (*(unsigned __int8 *)(v18
                                      + v143
                                      - 6784 * (((1266205 * (unint64_t)v143) >> 32) >> 1)) ^ 0xFFFFFFC3)
                + (v142 << v72);
  v146 = *(unsigned __int8 *)(v18
                            + 4647 * (v145 ^ 1)
                            + 5962101
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647 * (v145 ^ 1u) + 5962101)) >> 32) >> 1)) ^ v145 ^ 0x4C;
  LODWORD(STACK[0x3AB0]) = v45;
  v147 = v146 ^ ((v146 & v45 & 0xFE) >> 1);
  v148 = STACK[0x3468];
  LODWORD(v142) = (v142 + 85) ^ (((v147 & v74) >> v93) | (v147 << v126)) ^ v112;
  v64[14] = v142 - ((2 * v142) & 0x62) + 49;
  LODWORD(v142) = v148 ^ *(unsigned __int8 *)(v18
                                            + 4647 * (v148 ^ 0x1B)
                                            + 5962101
                                            - 6784
                                            * (((1266205
                                                             * (unint64_t)(4647 * (v148 ^ 0x1B)
                                                                                + 5962101)) >> 32) >> 1)) ^ 0x1E;
  v149 = v142 ^ ((v66 & v142) >> 1);
  STACK[0x3C30] = v58;
  v150 = 4647 * ((v149 & v58) ^ 0xB8) + 9544938;
  LOBYTE(v149) = (v149 << v72)
               + ((unint64_t)(((*(_BYTE *)(v18
                                                                 + v150
                                                                 - 6784
                                                                 * (((1266205 * (unint64_t)v150) >> 32) >> 1))
                                                      - 87) ^ 0xFB)
                                                    + 85) >> v50);
  LODWORD(STACK[0x3A40]) = v61;
  LODWORD(v149) = 4647 * ((v149 ^ v61) ^ 0xFE) + 13123128;
  v151 = LODWORD(STACK[0x3458]) ^ 0xFFFFFFB8 ^ *(unsigned __int8 *)(v18
                                                                  + 4647
                                                                  * (LODWORD(STACK[0x3458]) ^ 0x74)
                                                                  + 5962101
                                                                  - 6784
                                                                  * (((1266205
                                                                                   * (unint64_t)(4647 * (LODWORD(STACK[0x3458]) ^ 0x74u) + 5962101)) >> 32) >> 1));
  v152 = v151 ^ ((v66 & v151) >> 1);
  STACK[0x3AB8] = v72;
  v153 = 4647 * ((v152 << v72) ^ 0x9A) + 25186740;
  LOBYTE(v149) = *(_BYTE *)(v18
                          + v149
                          - 6784 * (((1266205 * (unint64_t)v149) >> 32) >> 1));
  STACK[0x3AC8] = v74;
  LODWORD(STACK[0x3B98]) = v93;
  v154 = STACK[0x3C78];
  LOBYTE(v149) = ((*(_BYTE *)(v18 + v153 - 6784 * (((1266205 * (unint64_t)v153) >> 32) >> 1)) ^ 0xC3)
                + ((v152 & v74) >> v93)
                + 85) ^ (((v149 - 71) ^ (((_BYTE)v149 - 71) << 6) ^ (4 * (v149 - 71)) ^ 0xFE) + 26);
  LODWORD(v152) = STACK[0x3C60];
  LODWORD(STACK[0x3B80]) = v134;
  LODWORD(STACK[0x3B70]) = v134 ^ v152;
  STACK[0x3B78] = v50;
  v64[15] = v149 - ((2 * v149) & 0x62) + 49;
  STACK[0x3C28] = LODWORD(STACK[0x3B48]) ^ (2 * v154) ^ (-1977749021 * v154) ^ (v154 >> 3) ^ LODWORD(STACK[0x3B38]) ^ ~LODWORD(STACK[0x3B40]);
  v155 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, uint64_t, uint64_t, unint64_t *, _QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * SLODWORD(STACK[0x3C58])) - 12);
  LODWORD(STACK[0x3C78]) = (LODWORD(STACK[0x3C58]) + 1611759302) & 0x9FEE776A;
  return v155(413, 318423, STACK[0x3AB8], 0, 4042322161, 1088, &STACK[0x44E0], LODWORD(STACK[0x3AD0]));
}

uint64_t sub_1006E681C(int a1, int a2, char a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, char a8)
{
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;

  v21 = a4 ^ ((a4 & STACK[0x3B68]) >> 1);
  v22 = ((((v21 & STACK[0x3C30]) >> STACK[0x3B78]) + (v21 << a3)) ^ a8) ^ 0xB8;
  v23 = *(_DWORD *)(v19 + 4 * ((667 * (v8 ^ a4) + 170752) % 0x340)) ^ 0x14BAC28C;
  v24 = STACK[0x3AC8];
  v25 = STACK[0x3C28];
  v26 = STACK[0x3B98];
  *(_DWORD *)(a7
            + 4
            * (((*(_BYTE *)(v13
                                           + v22 * v10
                                           + 9544938
                                           - ((((v22 * v10 + 9544938) * (unint64_t)v11) >> 32) >> 1)
                                           * v12)
                                - 87) ^ 0xFB)
                              + 85)) = (((v23 ^ ((v23 & v9) >> 1)) & STACK[0x3AC8]) >> v26) ^ v14 ^ (((v23 ^ ((v23 & v9) >> 1)) & STACK[0x3C28]) << v18);
  v27 = *(unsigned __int16 *)(v20
                            + 2
                            * (a2
                             + (a4 ^ 0xD9) * a1
                             - ((((a2 + (a4 ^ 0xD9) * a1) * (unint64_t)a5) >> 32) >> 10) * a6)) ^ v15;
  v28 = *(unsigned __int8 *)(v13
                           + ((v21 ^ 0xC4) * v10
                                          + 14331348
                                          - (((((v21 ^ 0xC4) * v10 + 14331348) >> 7)
                                            * (unint64_t)v16) >> 32)
                                          * v12))
      + 117;
  v29 = (v28 ^ 0x12 ^ (v28 >> 2) & 0x12) + 26;
  v30 = (((v29 & v24) >> v26) ^ 0x9A) * v10 + 25186740;
  *(_DWORD *)(v17
            + 4
            * (((v29 << a3) | ((*(_BYTE *)(v13
                                                          + v30
                                                          - (((v30 * (unint64_t)v11) >> 32) >> 1)
                                                          * v12) ^ 0xC3)
                                              + 85)) ^ a8)) = ((((v27 ^ ((v27 & v9) >> 1)) & v24) >> v26) | (((v27 ^ ((v27 & v9) >> 1)) & v25) << v18)) ^ LODWORD(STACK[0x3A40]);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70]
                                        + 8 * ((((a4 == 255) << 7) | ((a4 == 255) << 8)) ^ LODWORD(STACK[0x3C58])))
                            - 12))();
}

uint64_t sub_1006E69E8()
{
  uint64_t v0;
  int v1;
  unsigned __int8 *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unsigned int v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unsigned int v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  int v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  int v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  int v332;
  unsigned int v333;
  int v334;
  unint64_t v335;
  unsigned int v336;
  unint64_t v337;
  int v338;
  char v339;
  int v340;
  uint64_t v341;
  unint64_t v342;
  int v343;
  int v344;
  int v345;
  int v346;
  BOOL v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  unsigned int v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  unint64_t v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  BOOL v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  unsigned int v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  char v480;
  int v481;
  unint64_t v482;
  uint64_t v483;
  int v484;
  unint64_t v485;
  int v486;
  uint64_t v487;
  int v488;
  uint64_t v489;
  int v490;
  unint64_t v491;
  int v492;
  int v493;
  int v494;
  char v495;
  unint64_t v496;
  char v497;
  unsigned __int8 v498;
  int v499;
  int v500;
  int v501;
  unint64_t v502;
  unint64_t v503;
  unsigned int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  unint64_t v509;
  int v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  unint64_t v519;
  int v520;
  unint64_t v521;
  int v522;
  unint64_t v523;
  unsigned int v524;
  unint64_t v525;
  int v526;
  int v527;
  int v528;
  int v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t v536;
  int v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  int v549;
  unint64_t v550;
  unint64_t v551;
  int v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  int v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  int v560;
  unint64_t v561;
  unint64_t v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  BOOL v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  BOOL v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  int v645;
  int v646;
  int v647;
  int v648;
  int v649;
  int v650;
  int v651;
  int v652;
  int v653;
  int v654;
  int v655;
  int v656;
  int v657;
  int v658;
  int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  int v666;
  int v667;
  int v668;
  int v669;
  int v670;
  int v671;
  int v672;
  int v673;
  int v674;
  int v675;
  int v676;
  int v677;
  int v678;
  int v679;
  int v680;
  uint64_t (*v681)(void);

  LODWORD(STACK[0x3834]) = v1;
  STACK[0x3C68] = 0;
  STACK[0x39D8] = LODWORD(STACK[0x3C38]) ^ LODWORD(STACK[0x3C48]) ^ (LODWORD(STACK[0x3B88])
                                                                   + (LODWORD(STACK[0x3B50]) ^ ~((1962934272 * LODWORD(STACK[0x3B60])) & STACK[0x3C40])));
  LODWORD(STACK[0x39F8]) = LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x3C60]) ^ LODWORD(STACK[0x3C50]) ^ (LODWORD(STACK[0x3B70]) << 8) ^ 0x38A4F569;
  v2 = (unsigned __int8 *)STACK[0x508];
  v3 = *(unsigned __int8 *)(STACK[0x508] + 2);
  LODWORD(STACK[0x3B60]) = v3;
  v4 = v2[8];
  v5 = v2[10];
  v6 = v2[4] ^ 0x31;
  v7 = v2[7];
  v8 = v2[5] ^ 0x31;
  v9 = *v2;
  v10 = v0;
  v11 = *(_BYTE *)(v0
                 + 4647 * (v3 ^ 0xCF)
                 + 13123128
                 - 6784 * (((1266205 * (unint64_t)(4647 * (v3 ^ 0xCFu) + 13123128)) >> 32) >> 1))
      - 71;
  v12 = v2[9] ^ 0x31;
  v13 = v2[13] ^ 0x31;
  STACK[0x3908] = v13;
  LODWORD(STACK[0x3A18]) = v7 ^ 0x31 | (v6 << 24) | (v8 << 16);
  v14 = (v7 ^ 0x31) & 0xFFFFFF | (v6 << 24);
  v15 = LODWORD(STACK[0x3B68]) >> 1;
  LOBYTE(v6) = v5 ^ 0x31;
  v16 = LODWORD(STACK[0x3AB0]) >> 1;
  v17 = v2[12];
  v18 = v2[6];
  v19 = v2[15];
  v20 = v11 ^ (v11 << 6) ^ (4 * v11);
  v21 = v2[11];
  v22 = v2[14] ^ 0x31;
  STACK[0x39B0] = v22 << 8;
  v23 = v16 & 0x2D57E04 ^ 0x5AAFC09;
  v24 = v19 ^ 0x31;
  STACK[0x39A8] = v19 ^ 0x31;
  v25 = (v22 << 8) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v17 ^ 0x31u) << 24) | v19 ^ 0x31 | (v13 << 16);
  v26 = v21 ^ 0x31 | (v12 << 16);
  LODWORD(v19) = *(unsigned __int8 *)(v0
                                    + 4647 * (v4 ^ 0xCF)
                                    + 13123128
                                    - 6784
                                    * (((1266205 * (unint64_t)(4647 * (v4 ^ 0xCFu) + 13123128)) >> 32) >> 1))
               - 71;
  v27 = v2[3];
  v28 = v4 ^ 0x31;
  v29 = ((v5 ^ 0x31) << 8) | ((v19 ^ ((_DWORD)v19 << 6) ^ (4 * (_DWORD)v19) ^ 0xFE) << 24);
  v30 = v2[1];
  LOBYTE(v19) = (v20 ^ 0xFE) + 26;
  LODWORD(STACK[0x3920]) = v29 | v26;
  v31 = STACK[0x3AC8];
  v32 = STACK[0x3B78];
  v33 = v26 & 0xFFFF00FF | (v6 << 8) | (v28 << 24);
  v34 = STACK[0x3C30] & v23;
  LODWORD(STACK[0x3918]) = v18 ^ 0x31;
  v30 ^= 0x31u;
  v35 = v10;
  v36 = *(unsigned __int8 *)(v10
                           + 4647 * (v9 ^ 0xCF)
                           + 13123128
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * (v9 ^ 0xCFu) + 13123128)) >> 32) >> 1))
      - 71;
  v37 = STACK[0x3C28];
  LODWORD(v2) = v14 | ((v18 ^ 0x31) << 8);
  LODWORD(STACK[0x3910]) = v17;
  LODWORD(STACK[0x3900]) = (v30 << 16) | ((v36 ^ (v36 << 6) ^ (4 * v36) ^ 0xFE) << 24) | v27 ^ 0x31;
  v38 = (v27 ^ 0x31) & 0xFF0000FF | (unsigned __int16)(v19 << 8) | (v30 << 16);
  v39 = v25;
  STACK[0x3998] = v25;
  v40 = *((_DWORD *)&STACK[0x40D0] + BYTE2(v25));
  v41 = STACK[0x39D8];
  v42 = STACK[0x3AB8];
  LODWORD(v25) = v38 | ((v9 ^ 0x31) << 24);
  LODWORD(STACK[0x39C0]) = v25;
  v43 = 4647 * ((((v17 ^ 0xB1) + 79) ^ ((v17 ^ 0xEE) + 18) ^ ((v17 ^ 0x6E) - 110) ^ 0x1C) - 96)
      + 4767822;
  LODWORD(v2) = v2 & 0xFF00FFFF | (v8 << 16);
  LODWORD(STACK[0x39E0]) = (_DWORD)v2;
  LOBYTE(v17) = STACK[0x3B90];
  LOBYTE(v43) = *(_BYTE *)(v10 + v43 - 6784 * (((1266205 * (unint64_t)v43) >> 32) >> 1)) ^ 0xE3;
  v44 = *((_DWORD *)&STACK[0x40D0] + ((v43 >> 3) | (32 * v43)));
  LODWORD(v24) = *((_DWORD *)&STACK[0x40D0] + v24);
  LODWORD(STACK[0x38F8]) = v24;
  v45 = (((unint64_t)(v41 & (v15 & 0x35557E04 ^ 0x6AAAFC09)) << v42) | ((v31 & (v15 & 0x35557E04 ^ 0x6AAAFC09)) >> v32)) ^ (((v37 & v23) << v17) + (v34 >> v32)) ^ __ROR4__(v40, 16);
  HIDWORD(v47) = *((_DWORD *)&STACK[0x40D0] + (v22 & 0xFFFFFFFFFFFFFFLL));
  LODWORD(v47) = HIDWORD(v47);
  v46 = v47 >> 24;
  LODWORD(STACK[0x38F0]) = v46;
  LODWORD(v47) = __ROR4__(v44, 8);
  v48 = v45 ^ v46 ^ v24 ^ v25 ^ v47;
  v49 = STACK[0x39F8];
  v50 = v2 ^ LODWORD(STACK[0x39F8]) ^ v48;
  LODWORD(v22) = v45 ^ v46 ^ v24 ^ v25 ^ v47;
  STACK[0x39E8] = v48;
  LODWORD(v25) = v41;
  LODWORD(STACK[0x39B8]) = v33;
  v51 = v50 ^ v33;
  LODWORD(v24) = v50;
  LODWORD(STACK[0x3960]) = v50;
  LOBYTE(v34) = STACK[0x3B98];
  v52 = ((unint64_t)(v41 & (v16 & 0x44928A34 ^ 0x89251468)) << v42)
      + ((v31 & (v16 & 0x44928A34 ^ 0x89251468)) >> v34);
  v53 = STACK[0x3AD0];
  LODWORD(v48) = v39 ^ LODWORD(STACK[0x3AD0]) ^ v50 ^ v33;
  v54 = ((unint64_t)(v41 & (v15 & 0x63928A34 ^ 0xC7251468)) << v42) ^ ((v31 & (v15 & 0x63928A34 ^ 0xC7251468)) >> v34);
  v55 = v48 ^ v49;
  v56 = v49;
  STACK[0x3A88] = v55 >> 24;
  v57 = 4647 * (((v48 ^ v49) >> 24) ^ 0xB8) + 9544938;
  v58 = 4 * v55;
  STACK[0x3A60] = v58;
  v59 = v54 ^ v52 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v58);
  v60 = 4 * BYTE2(v55);
  STACK[0x3A38] = v60;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v60), 16);
  v61 = 4 * BYTE1(v55);
  STACK[0x3A30] = v61;
  v62 = v59 ^ v47 ^ v22 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v61), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + (((*(_BYTE *)(v10 + v57 - 6784 * (((1266205 * (unint64_t)v57) >> 32) >> 1)) - 87) ^ 0xFB) + 85)), 8);
  LODWORD(v55) = v15 & 0x55B5F437 ^ 0xAB6BE86E;
  LOBYTE(v6) = v17;
  v63 = v56 ^ ((v37 & v55) << v17) ^ (((v37 & (v15 & 0x34B5F437 ^ 0x696BE86E)) << v17) | ((v31 & (v15 & 0x34B5F437 ^ 0x696BE86E)) >> v34));
  v64 = STACK[0x3C30];
  LODWORD(v55) = ((STACK[0x3C30] & v55) >> v32) ^ v63;
  v65 = v51 ^ v56;
  LODWORD(STACK[0x3B80]) = v51 ^ v56;
  LODWORD(v22) = v56;
  v66 = v62;
  v67 = v62 ^ v24;
  LODWORD(v62) = v62 ^ v24 ^ v65;
  LODWORD(STACK[0x3AA8]) = v62;
  v68 = v62 ^ v48;
  v69 = 4 * BYTE2(v68);
  STACK[0x3B08] = v69;
  LODWORD(v48) = v55 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v69), 16);
  v70 = 4 * v68;
  STACK[0x3B00] = v70;
  LODWORD(v55) = v66 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v70);
  STACK[0x3C40] = v66;
  v71 = 4 * BYTE1(v68);
  STACK[0x3AE0] = v71;
  LODWORD(v71) = v48 ^ v55 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v71), 24) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v68 >> 22) & 0x3FC)), 8);
  LODWORD(v48) = v16 & 0x3D738A64 ^ 0x7AE714C9;
  v72 = v31 & v48;
  LOBYTE(v31) = v32;
  LODWORD(v48) = (((unint64_t)(v25 & (v16 & 0x41738A64 ^ 0x82E714C9)) << v42) | ((v64 & (v16 & 0x41738A64 ^ 0x82E714C9)) >> v32)) ^ (((v25 & v48) << v6) | (v72 >> v32));
  v73 = v67 ^ v56;
  STACK[0x39F0] = v73;
  v74 = STACK[0x3A40];
  v75 = v73 ^ LODWORD(STACK[0x3A40]) ^ v71;
  LODWORD(v24) = v71;
  LODWORD(STACK[0x3990]) = v71;
  LODWORD(v72) = v66 ^ v33 ^ v75;
  LODWORD(STACK[0x3C60]) = v56 ^ v74;
  v76 = v72 ^ v68;
  v77 = v72 ^ v68 ^ v56 ^ v74;
  v78 = 4647 * (((v77 >> 17) & 0x80 | (v77 >> 25)) ^ 0xD9) + 19140993;
  v79 = ((*(_BYTE *)(v10
                                    + 4647 * (HIBYTE(*((_DWORD *)&STACK[0x40D0] + BYTE1(v77))) ^ 0x9A)
                                    + 25186740
                                    - 6784
                                    * (((1266205
                                                     * (unint64_t)(4647
                                                                        * (HIBYTE(*((_DWORD *)&STACK[0x40D0] + BYTE1(v77))) ^ 0x9Au)
                                                                        + 25186740)) >> 32) >> 1)) ^ 0xC3)
                        + 85) | (*((_DWORD *)&STACK[0x40D0] + BYTE1(v77)) << 8);
  STACK[0x3C58] = v77;
  v80 = 4 * BYTE2(v77);
  STACK[0x3A78] = v80;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v80), 16);
  LOBYTE(v10) = *(_BYTE *)(v10 + v78 - 6784 * (((1266205 * (unint64_t)v78) >> 32) >> 1));
  v81 = 4 * v77;
  STACK[0x3A80] = v81;
  LODWORD(v81) = v48 ^ v24 ^ v47 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v81) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0]+ (97 * (v10 ^ 0x27))), 8) ^ v79;
  v82 = v15;
  v83 = v22;
  v84 = v75 ^ v22;
  STACK[0x39A0] = v84;
  v85 = v72 ^ v22;
  STACK[0x3B88] = v85;
  LODWORD(v84) = v84 ^ v74 ^ v81;
  LODWORD(v22) = v81;
  LODWORD(STACK[0x39C8]) = v81;
  LODWORD(v72) = v85 ^ v53 ^ v84;
  v86 = v76 ^ v72;
  v87 = 4647
      * ((((v76 ^ v72) >> 1) & 0x7F | (((v76 ^ v72) & 1) << 7)) ^ 0x40)
      + 15539568;
  LODWORD(v10) = 4647 * (((v86 >> 17) & 0x80 | (v86 >> 25)) ^ 0x40) + 15539568;
  LODWORD(STACK[0x3A28]) = v16;
  v88 = STACK[0x3C28];
  v89 = 4 * BYTE1(v86);
  STACK[0x3AC0] = v89;
  LODWORD(v48) = ((unint64_t)(v88 & (v15 & 0x11CFF9C6 ^ 0x239FF38D)) << v42) ^ ((v64 & (v15 & 0x11CFF9C6 ^ 0x239FF38D)) >> v34) ^ (((unint64_t)(v25 & (v15 & 0x724FF9C6 ^ 0xE49FF38D)) << v42) | ((v64 & (v15 & 0x724FF9C6 ^ 0xE49FF38D)) >> v31)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v89), 24);
  STACK[0x3A48] = v86;
  v90 = 4 * BYTE2(v86);
  STACK[0x3A90] = v90;
  LODWORD(v48) = v48 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v90), 16) ^ v22 ^ *((_DWORD *)&STACK[0x40D0]
                                                                                       + (97 * (*(_BYTE *)(v35 + v87 - 6784 * (((1266205 * (unint64_t)v87) >> 32) >> 1)) ^ 0xA2))) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + (97 * (*(_BYTE *)(v35 + v10 - 6784 * (((1266205 * (unint64_t)v10) >> 32) >> 1)) ^ 0xA2))), 8);
  v91 = STACK[0x3AC8];
  LOBYTE(v15) = STACK[0x3B90];
  LODWORD(v89) = (((v25 & (v16 & 0x7704B8BF ^ 0xEE09717F)) << v15) | ((v91 & (v16 & 0x7704B8BF ^ 0xEE09717F)) >> v34)) ^ (((v88 & (v16 & 0x284B8BF ^ 0x509717F)) << v15) | ((v91 & (v16 & 0x284B8BF ^ 0x509717F)) >> v34));
  LODWORD(v90) = v83;
  v92 = v72 ^ v83;
  STACK[0x3A58] = v92;
  v93 = v84 ^ v83;
  STACK[0x3950] = v93;
  LODWORD(STACK[0x3948]) = v48;
  LODWORD(v84) = v93 ^ v53 ^ v48;
  LODWORD(v72) = v92 ^ v74 ^ v84;
  LODWORD(STACK[0x3A00]) = v83 ^ v53;
  LODWORD(v93) = v53;
  v94 = v86 ^ v83 ^ v53 ^ v72;
  v95 = (v94 >> 22) & 0x3FC;
  STACK[0x3A20] = v95;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v95), 8);
  v96 = 4 * BYTE2(v94);
  STACK[0x3A08] = v96;
  v97 = 4 * (v86 ^ v83 ^ v53 ^ v72);
  STACK[0x39D0] = v97;
  LODWORD(v89) = v89 ^ v47 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v97);
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v96), 16);
  v98 = 4 * BYTE1(v94);
  STACK[0x3958] = v98;
  LODWORD(v86) = v89 ^ v47 ^ v48 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v98), 24);
  v99 = v84 ^ v83;
  STACK[0x3AA0] = v99;
  LODWORD(STACK[0x38E8]) = v86;
  v100 = v74;
  v101 = v99 ^ v53 ^ v86 ^ v74;
  v102 = v86 ^ v74 ^ v84;
  LODWORD(STACK[0x3C38]) = v102;
  v103 = STACK[0x3B78];
  LODWORD(STACK[0x3A10]) = v82;
  v104 = v72 ^ v83;
  v105 = v101 ^ v72;
  STACK[0x3C48] = v105;
  LODWORD(v72) = v101 ^ v104;
  LODWORD(v98) = STACK[0x3C60];
  v106 = v94 ^ LODWORD(STACK[0x3C60]) ^ v101 ^ v104;
  LODWORD(v94) = 4647 * ((BYTE1(v106) + 111) ^ 0x36) + 17937420;
  v107 = 4 * v106;
  STACK[0x3B20] = v107;
  LOBYTE(v89) = *(_BYTE *)(v35
                         + v94
                         - 6784 * (((1266205 * (unint64_t)v94) >> 32) >> 1)) ^ 0xE;
  LODWORD(v84) = (((unint64_t)(v88 & (v82 & 0x7D95B678 ^ 0xFB2B6CF1)) << v42)
                + ((v64 & (v82 & 0x7D95B678 ^ 0xFB2B6CF1)) >> v103)) ^ (((v25 & (v82 & 0x6115B678 ^ 0xC22B6CF1)) << v15) | ((v91 & (v82 & 0x6115B678 ^ 0xC22B6CF1)) >> v103)) ^ *(_DWORD *)((char *)&STACK[0x40D0] + v107);
  v108 = (v106 >> 22) & 0x3FC;
  STACK[0x3B18] = v108;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v108), 8);
  LODWORD(v108) = v106;
  STACK[0x3AE8] = v106;
  v109 = 4 * BYTE2(v106);
  STACK[0x3B10] = v109;
  LODWORD(v84) = v84 ^ v47 ^ v86 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v109), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0]+ ((v89 >> 3) | (32 * v89))), 24);
  LODWORD(v89) = v82 & 0x2D48B3A2 ^ 0x5A916744;
  LODWORD(v48) = STACK[0x3A28];
  LODWORD(v94) = STACK[0x3A28] & 0x38C8B3A2 ^ 0x71916744;
  v110 = v64 & v94;
  v111 = v88;
  v112 = (unint64_t)(v88 & v94) << v42;
  LOBYTE(v88) = STACK[0x3B98];
  LODWORD(v112) = v112 + (v110 >> v88);
  v113 = v105 ^ v98 ^ v108;
  LODWORD(v105) = v84 ^ v102;
  v114 = v113 ^ v84 ^ v102;
  v115 = 4647 * (((v114 >> 17) & 0x80 | (v114 >> 25)) ^ 0x40) + 15539568;
  LODWORD(v89) = ((v111 & v89) << v15) ^ v112 ^ ((v64 & v89) >> v103);
  LODWORD(v112) = BYTE2(v114);
  LODWORD(v89) = v89 ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v114)), 16);
  v116 = 4 * BYTE1(v114);
  STACK[0x3B50] = v116;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v116), 24);
  v117 = v84 ^ v90;
  STACK[0x3A68] = v117;
  LODWORD(v84) = v89 ^ v47 ^ v117 ^ __ROR4__(*((_DWORD *)&STACK[0x40D0]+ (97* (*(_BYTE *)(v35+ v115- 6784* (((1266205 * (unint64_t)v115) >> 32) >> 1)) ^ 0xA2))), 8);
  v118 = 4 * v114;
  STACK[0x3B48] = v118;
  v119 = v84 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v118);
  LODWORD(v118) = v48 & 0x6BD1CCEA ^ 0xD7A399D5;
  LODWORD(v117) = v91;
  LODWORD(v108) = ((v25 & (v48 & 0x64D1CCEA ^ 0xC9A399D5)) << v42)
                + ((v91 & (v48 & 0x64D1CCEA ^ 0xC9A399D5)) >> v103);
  LODWORD(v84) = v91 & v118;
  v120 = v25;
  LOBYTE(v91) = v88;
  LODWORD(v118) = ((unint64_t)(v25 & v118) << v42) + (v84 >> v88);
  v121 = v105 ^ v72;
  STACK[0x3AD8] = v121;
  LODWORD(STACK[0x3A70]) = v105 ^ v93;
  LODWORD(v72) = v105 ^ v93 ^ v100;
  STACK[0x3C50] = v119;
  LODWORD(STACK[0x3AF8]) = v119 ^ v72;
  LODWORD(v84) = v121 ^ v93 ^ v119 ^ v72;
  BYTE2(v93) = BYTE2(v114);
  STACK[0x3A98] = v114;
  v122 = v114 ^ v98 ^ v84;
  v123 = 4 * BYTE2(v122);
  STACK[0x3B40] = v123;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v123), 16);
  v124 = 4 * v122;
  STACK[0x3B38] = v124;
  LODWORD(v118) = v118 ^ v108 ^ v47 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v124);
  v125 = (v122 >> 22) & 0x3FC;
  STACK[0x3B30] = v125;
  LODWORD(v118) = v118 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v125), 8);
  v126 = 4 * BYTE1(v122);
  STACK[0x3B28] = v126;
  LODWORD(v85) = v118 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v126), 24);
  LODWORD(STACK[0x3820]) = v85;
  v127 = v84 ^ v90;
  STACK[0x3AF0] = v127;
  LODWORD(v88) = v98;
  LODWORD(v118) = v127 ^ v98 ^ v122;
  LODWORD(v127) = v85 ^ v72;
  v128 = v118 ^ v85 ^ v72;
  STACK[0x3B70] = v128;
  LODWORD(STACK[0x3A50]) = v127;
  STACK[0x3978] = BYTE1(v128);
  LODWORD(STACK[0x3938]) = 4647 * (BYTE1(v128) ^ 0xC4)
                         + 14331348
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE1(v128) ^ 0xC4u) + 14331348)) >> 32) >> 1);
  LODWORD(v118) = BYTE1(STACK[0x3C40]) ^ 0xC4;
  LODWORD(STACK[0x3988]) = 4647 * v118
                         + 14331348
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * v118 + 14331348)) >> 32) >> 1);
  v129 = (LODWORD(STACK[0x3AA8]) ^ LODWORD(STACK[0x3A00]));
  STACK[0x38B8] = v129;
  LODWORD(v72) = *(_DWORD *)((char *)&STACK[0x44E0] + ((v129 >> 22) & 0x3FC));
  LODWORD(v118) = 4647 * (((v68 >> 17) & 0x80 | (v68 >> 25)) ^ 0x40) + 15539568;
  LODWORD(STACK[0x3970]) = v118 - 6784 * (((1266205 * (unint64_t)v118) >> 32) >> 1);
  LODWORD(STACK[0x3818]) = v72;
  LODWORD(v118) = 4647 * (((v72 >> 17) & 0x80 | (v72 >> 25)) ^ 0x40) + 15539568;
  LODWORD(STACK[0x3980]) = v118 - 6784 * (((1266205 * (unint64_t)v118) >> 32) >> 1);
  v130 = LODWORD(STACK[0x3948]) ^ v90;
  STACK[0x37C0] = v130;
  LODWORD(v72) = v90;
  LODWORD(STACK[0x3948]) = 4647 * (BYTE1(v130) ^ 0xC4)
                         + 14331348
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE1(v130) ^ 0xC4u) + 14331348)) >> 32) >> 1);
  STACK[0x3868] = v104;
  LODWORD(v130) = 4647 * ((BYTE1(v104) + 111) ^ 0x1C) + 4767822;
  LODWORD(STACK[0x3940]) = v130 - 6784 * (((1266205 * (unint64_t)v130) >> 32) >> 1);
  LODWORD(v130) = 4647 * ((v104 + 111) ^ 0x1C) + 4767822;
  LODWORD(STACK[0x38C8]) = v130 - 6784 * (((1266205 * (unint64_t)v130) >> 32) >> 1);
  LODWORD(v130) = 4647 * (((v112 >> 1) | (BYTE2(v93) << 7)) ^ 0x40) + 15539568;
  LODWORD(STACK[0x3AA8]) = v130 - 6784 * (((1266205 * (unint64_t)v130) >> 32) >> 1);
  v131 = LODWORD(STACK[0x3960]) ^ v98;
  STACK[0x38A8] = v131;
  LODWORD(v129) = v88;
  LODWORD(v121) = 4647 * (((v131 >> 9) & 0x80 | (v131 >> 17) & 0x7F) ^ 0xD9) + 19140993;
  LODWORD(STACK[0x38C0]) = v121 - 6784 * (((1266205 * (unint64_t)v121) >> 32) >> 1);
  LODWORD(v88) = STACK[0x3B80];
  LODWORD(v121) = 4647 * (((v88 >> 1) & 0x80 | ((unsigned __int16)v88 >> 9)) ^ 0x40) + 15539568;
  LODWORD(STACK[0x3960]) = v121 - 6784 * (((1266205 * (unint64_t)v121) >> 32) >> 1);
  LODWORD(v131) = *((_DWORD *)&STACK[0x44E0] + STACK[0x3A88]);
  LODWORD(v121) = 4647 * (((v88 >> 9) & 0x80 | (v88 >> 17) & 0x7F) ^ 0x40) + 15539568;
  LODWORD(STACK[0x3930]) = v121 - 6784 * (((1266205 * (unint64_t)v121) >> 32) >> 1);
  LODWORD(STACK[0x3810]) = v131;
  LODWORD(v121) = 4647 * (((v131 >> 17) & 0x80 | (v131 >> 25)) ^ 0xD9) + 19140993;
  LODWORD(v131) = *(_DWORD *)((char *)&STACK[0x44E0] + ((v119 >> 22) & 0x3FC));
  LODWORD(STACK[0x3808]) = v131;
  LODWORD(STACK[0x38B0]) = v121 - 6784 * (((1266205 * (unint64_t)v121) >> 32) >> 1);
  LODWORD(v121) = ((v131 >> 17) & 0x80 | (v131 >> 25)) ^ 0xD9;
  LODWORD(STACK[0x38A0]) = 4647 * v121
                         + 19140993
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * v121 + 19140993)) >> 32) >> 1);
  LODWORD(v121) = BYTE1(STACK[0x3C48]) ^ 0x9A;
  LODWORD(STACK[0x3928]) = 4647 * v121
                         + 25186740
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * v121 + 25186740)) >> 32) >> 1);
  v132 = LODWORD(STACK[0x38E8]) ^ v90;
  STACK[0x3788] = v132;
  LODWORD(STACK[0x3878]) = 4647 * (BYTE3(v132) ^ 0x9A)
                         + 25186740
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE3(v132) ^ 0x9A) + 25186740)) >> 32) >> 1);
  v133 = STACK[0x3C38];
  LODWORD(v132) = 4647 * (((v133 >> 1) & 0x80 | ((unsigned __int16)v133 >> 9)) ^ 0xD9) + 19140993;
  LODWORD(STACK[0x3888]) = v132 - 6784 * (((1266205 * (unint64_t)v132) >> 32) >> 1);
  LODWORD(v132) = 4647 * (((v133 >> 17) & 0x80 | (v133 >> 25)) ^ 0xD9) + 19140993;
  LODWORD(STACK[0x3880]) = v132 - 6784 * (((1266205 * (unint64_t)v132) >> 32) >> 1);
  STACK[0x3A88] = v127 ^ v84;
  LODWORD(v132) = 4647 * ((v127 ^ v84) ^ 0xFE) + 13123128;
  LODWORD(STACK[0x3898]) = v132 - 6784 * (((1266205 * (unint64_t)v132) >> 32) >> 1);
  LODWORD(v132) = 4647 * ((((v127 ^ v84) >> 24) + 111) ^ 0x1C) + 4767822;
  LODWORD(STACK[0x3890]) = v132 - 6784 * (((1266205 * (unint64_t)v132) >> 32) >> 1);
  v134 = STACK[0x3B88];
  LODWORD(v132) = 4647 * ((BYTE1(STACK[0x3B88]) + 111) ^ 0x1C) + 4767822;
  LODWORD(STACK[0x3870]) = v132 - 6784 * (((1266205 * (unint64_t)v132) >> 32) >> 1);
  LODWORD(STACK[0x3828]) = 4647 * (v134 ^ 0xC4)
                         + 14331348
                         - 6784
                         * (((1266205
                                          * (unint64_t)(4647 * (v134 ^ 0xC4u) + 14331348)) >> 32) >> 1);
  LODWORD(v132) = 4647
                * ((((LODWORD(STACK[0x3910]) ^ 0xE) - 14) ^ ((LODWORD(STACK[0x3910]) ^ 0xCE) + 50) ^ ((LODWORD(STACK[0x3910]) ^ 0xF1) + 15) ^ 0x1C)
                                  - 96)
                + 4767822;
  v135 = STACK[0x3C18];
  LOBYTE(v132) = *(_BYTE *)(STACK[0x3C18]
                          + v132
                          - 6784 * (((1266205 * (unint64_t)v132) >> 32) >> 1)) ^ 0xE3;
  LODWORD(v104) = STACK[0x3A10];
  LODWORD(v35) = STACK[0x3A28];
  LODWORD(v84) = STACK[0x3A28] & 0x6B7A4CE5 ^ 0xD6F499CA;
  v136 = STACK[0x3908];
  v137 = STACK[0x39B0] & 0xFFFFFFFF0000FFFFLL | ((unint64_t)STACK[0x3908] << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)((v132 >> 3) | (32 * v132)) << 24);
  LODWORD(v132) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + 4647 * (LODWORD(STACK[0x3B60]) ^ 0xF5)
                                     + 14331348
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * (LODWORD(STACK[0x3B60]) ^ 0xF5u)
                                                                         + 14331348)) >> 32) >> 1))
                + 117;
  LODWORD(v134) = STACK[0x3900] & 0xFFFF00FF | (((v132 ^ 0x12 ^ (v132 >> 2) & 0x12) + 26) << 8);
  LODWORD(v127) = STACK[0x3A18] & 0xFFFF00FF | (LODWORD(STACK[0x3918]) << 8);
  LODWORD(STACK[0x3A18]) = v127;
  LODWORD(v25) = LODWORD(STACK[0x3920]) + 436207616;
  LODWORD(STACK[0x3918]) = v25;
  LODWORD(v134) = v134 + 436207616;
  LODWORD(STACK[0x3910]) = v134;
  LODWORD(v112) = v120;
  v138 = (unint64_t)(v120 & v84) << v42;
  LOBYTE(v120) = v91;
  LODWORD(v132) = v138 + ((v117 & v84) >> v91);
  v139 = STACK[0x3C30];
  LODWORD(v122) = v112;
  LOBYTE(v90) = v42;
  LODWORD(v93) = v137 | STACK[0x39A8];
  v140 = v132 ^ (((v112 & (v104 & 0x5CFA4CE5 ^ 0xB9F499CA)) << v42) | ((STACK[0x3C30] & (v104 & 0x5CFA4CE5 ^ 0xB9F499CA)) >> v103)) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + (v136 & 0xFFFFFFFFFFFFLL)), 16) ^ LODWORD(STACK[0x38F0]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v137 >> 22) & 0x3FC)), 8) ^ LODWORD(STACK[0x38F8]) ^ v134;
  v141 = STACK[0x3C28];
  LOBYTE(v64) = STACK[0x3B90];
  LODWORD(v112) = v104;
  LODWORD(v138) = v104 & 0x6C96C7FF ^ 0xD92D8FFE;
  LODWORD(v134) = v127 ^ v72 ^ v140;
  STACK[0x3708] = v140;
  LODWORD(v137) = v93;
  LODWORD(STACK[0x3688]) = v93;
  v142 = v93 ^ v129 ^ v134 ^ v25;
  LODWORD(v104) = v134 ^ v25;
  LODWORD(STACK[0x3B60]) = v134 ^ v25;
  STACK[0x3920] = BYTE1(v142);
  LOBYTE(v129) = v64;
  v143 = (v142 >> 22) & 0x3FC;
  STACK[0x3900] = v143;
  LODWORD(v132) = (((v141 & (v35 & 0x4B96C7FF ^ 0x972D8FFE)) << v64)
                 + ((unint64_t)(v117 & (v35 & 0x4B96C7FF ^ 0x972D8FFE)) >> v120)) ^ ((v117 & v138) >> v120) ^ ((v122 & v138) << v64) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v143), 8);
  v144 = 4 * BYTE2(v142);
  STACK[0x38F8] = v144;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v144), 16);
  LOBYTE(v138) = *(_BYTE *)(v135
                          + 4647 * (BYTE1(v142) ^ 0x9A)
                          + 25186740
                          - 6784
                          * (((1266205 * (unint64_t)(4647 * (BYTE1(v142) ^ 0x9Au) + 25186740)) >> 32) >> 1));
  v145 = 4 * v142;
  STACK[0x38F0] = v145;
  LODWORD(v132) = v132 ^ v47 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v145);
  LODWORD(v47) = __ROR4__(*((_DWORD *)&STACK[0x40D0] + ((v138 ^ 0xC3) + 85)), 24);
  LODWORD(v64) = STACK[0x3AD0];
  LODWORD(v134) = v134 ^ LODWORD(STACK[0x3AD0]);
  LODWORD(STACK[0x3670]) = v134;
  v146 = v132 ^ v47 ^ v140;
  LODWORD(v93) = STACK[0x3A40];
  LODWORD(v132) = v134 ^ LODWORD(STACK[0x3A40]) ^ v146;
  LODWORD(STACK[0x37F8]) = v132;
  LODWORD(v140) = v146;
  STACK[0x36F8] = v146;
  LODWORD(v132) = v132 ^ v64;
  v147 = v137 ^ v72 ^ v132;
  v148 = 4 * BYTE1(v147);
  STACK[0x3860] = v148;
  LODWORD(v138) = (((v122 & (v35 & 0x54CEA091 ^ 0xA99D4123)) << v90)
                 + ((unint64_t)(v117 & (v35 & 0x54CEA091 ^ 0xA99D4123)) >> v120)) ^ (((v141 & (v35 & 0x35CEA091 ^ 0x6B9D4123)) << v90) | ((unint64_t)(v139 & (v35 & 0x35CEA091 ^ 0x6B9D4123)) >> v103)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v148), 24);
  v149 = (v147 >> 22) & 0x3FC;
  STACK[0x3850] = v149;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v149), 8);
  v150 = 4 * BYTE2(v147);
  STACK[0x3840] = v150;
  LODWORD(v138) = v138 ^ v47 ^ v140;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v150), 16);
  v151 = 4 * (v137 ^ v72 ^ v132);
  STACK[0x3730] = v151;
  v152 = v138 ^ v47 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v151);
  STACK[0x36E8] = v152;
  LODWORD(v142) = v112 & 0x78FAA2C ^ 0xF1F5458;
  LOBYTE(v151) = v129;
  LODWORD(v138) = ((v122 & (v35 & 0x7B8FAA2C ^ 0xF71F5458)) << v129)
                + ((unint64_t)(v117 & (v35 & 0x7B8FAA2C ^ 0xF71F5458)) >> v120);
  LODWORD(v84) = v141 & v142;
  v153 = v139 & v142;
  LODWORD(v129) = v139;
  LOBYTE(v139) = v151;
  LODWORD(v138) = v138 ^ (((_DWORD)v84 << v151) + (v153 >> v103));
  v154 = v132 ^ v104;
  STACK[0x36F0] = v154;
  LODWORD(v153) = v152 ^ v132;
  LODWORD(v132) = v147 ^ v64;
  LODWORD(v104) = v64;
  LODWORD(v147) = v153 ^ v93;
  LODWORD(v135) = v153;
  LODWORD(STACK[0x3660]) = v153;
  v155 = v93;
  LODWORD(v153) = v153 ^ v93 ^ v154;
  LODWORD(v132) = v132 ^ v153;
  v156 = v132 ^ v72;
  STACK[0x3800] = v156 >> 24;
  LODWORD(v138) = v138 ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + (v156 >> 24)), 8);
  v157 = 4 * BYTE1(v156);
  STACK[0x3858] = v157;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v157), 24);
  v158 = 4 * BYTE2(v156);
  STACK[0x3718] = v158;
  LODWORD(v138) = v138 ^ v47 ^ v152;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v158), 16);
  v159 = 4 * (v132 ^ v72);
  STACK[0x3848] = v159;
  v160 = v138 ^ v47 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v159);
  LODWORD(v138) = v112 & 0x4FAB659D ^ 0x9F56CB3B;
  LODWORD(v156) = v112 & 0x2C2B659D ^ 0x5856CB3B;
  LODWORD(v64) = v141;
  LOBYTE(v112) = v103;
  LODWORD(v138) = ((unint64_t)(v141 & v138) << v42) | ((v129 & v138) >> v103);
  LOBYTE(v103) = v139;
  LODWORD(v156) = ((v141 & v156) << v139)
                + ((v129 & v156) >> v120);
  LODWORD(v122) = v72;
  v161 = v153 ^ v72;
  STACK[0x3650] = v161;
  LODWORD(v147) = v160 ^ v147;
  LODWORD(STACK[0x3668]) = v147;
  LODWORD(v139) = v160;
  STACK[0x35F8] = v160;
  LODWORD(v147) = v147 ^ v161;
  v162 = v147 ^ v132;
  v163 = 4 * BYTE1(v162);
  STACK[0x3908] = v163;
  LODWORD(v138) = v138 ^ v156 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v163), 24);
  v164 = 4 * BYTE2(v162);
  STACK[0x38D0] = v164;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v164), 16);
  v165 = 4 * v162;
  STACK[0x38E0] = v165;
  LODWORD(v138) = v138 ^ v47 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v165);
  v166 = (v162 >> 22) & 0x3FC;
  STACK[0x38D8] = v166;
  LODWORD(v153) = v138 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v166), 8);
  LODWORD(v156) = v35 & 0xF583E3C ^ 0x1EB07C78;
  LODWORD(v141) = STACK[0x3A00];
  v167 = v147 ^ LODWORD(STACK[0x3A00]);
  STACK[0x39A8] = v167;
  LODWORD(v158) = v153 ^ v135 ^ v104;
  LODWORD(v104) = v153 ^ v135;
  LODWORD(STACK[0x35C0]) = v153 ^ v135;
  LODWORD(v147) = v158 ^ v167;
  LODWORD(v138) = v162 ^ v155 ^ v158 ^ v167;
  v168 = v138 ^ v72;
  LODWORD(v167) = (v138 ^ v72);
  LODWORD(STACK[0x38E8]) = v167;
  v169 = 4647 * (v167 ^ 0xB8)
       + 9544938
       - 6784
       * (((1266205 * (unint64_t)(4647 * (v167 ^ 0xB8) + 9544938)) >> 32) >> 1);
  LOBYTE(v135) = v112;
  STACK[0x3710] = BYTE1(v168);
  LODWORD(v137) = ((v117 & v156) >> v112) ^ (((v64 & (v35 & 0x7AD83E3C ^ 0xF5B07C78)) << v103)
                                                                       + ((unint64_t)(v117 & (v35 & 0x7AD83E3C ^ 0xF5B07C78)) >> v112));
  v170 = STACK[0x39D8];
  v171 = 4 * BYTE2(v168);
  STACK[0x3700] = v171;
  LODWORD(v156) = ((unint64_t)(v170 & v156) << v42) ^ v137 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v171), 16);
  LODWORD(v137) = 4647 * (((BYTE1(v168) >> 1) | (BYTE1(v168) << 7)) ^ 0xD9) + 19140993;
  v172 = STACK[0x3C18];
  LODWORD(v137) = *((_DWORD *)&STACK[0x40D0]
                  + (97
                                    * (*(_BYTE *)(STACK[0x3C18]
                                                + v137
                                                - 6784
                                                * (((1266205 * (unint64_t)v137) >> 32) >> 1)) ^ 0x27)));
  LODWORD(v68) = (((*(_BYTE *)(STACK[0x3C18]
                                              + 4647 * (BYTE3(v137) ^ 0xB8)
                                              + 9544938
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647 * (BYTE3(v137) ^ 0xB8) + 9544938)) >> 32) >> 1))
                                   - 87) ^ 0xFB)
                                 + 85) | ((_DWORD)v137 << 8);
  v173 = (v168 >> 22) & 0x3FC;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v173), 8);
  v174 = v153 ^ v139;
  STACK[0x3638] = v174;
  v175 = v172;
  v176 = v156 ^ v47 ^ v174 ^ *((_DWORD *)&STACK[0x40D0]
                                                                       + (((*(_BYTE *)(v172 + v169) - 87) ^ 0xFB)
                                                                                         + 85)) ^ v68;
  LODWORD(v168) = STACK[0x3A10];
  v177 = STACK[0x3C30];
  v178 = v147 ^ v122;
  STACK[0x3618] = v178;
  LODWORD(STACK[0x3648]) = v176 ^ v158;
  LODWORD(v162) = v176 ^ v158 ^ v178;
  v179 = v162 ^ v138;
  v180 = 4 * BYTE2(v179);
  STACK[0x3680] = v180;
  LODWORD(v180) = (((v170 & (v168 & 0x77A7E511 ^ 0xEF4FCA22)) << v90) | ((v177 & (v168 & 0x77A7E511 ^ 0xEF4FCA22)) >> v120)) ^ (((v64 & (v35 & 0x6B27E511 ^ 0xD64FCA22)) << v103) + ((unint64_t)(v177 & (v35 & 0x6B27E511 ^ 0xD64FCA22)) >> v135)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v180), 16);
  v181 = (v179 >> 22) & 0x3FC;
  STACK[0x37F0] = v181;
  LODWORD(v180) = v180 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v181), 8);
  v182 = 4 * BYTE1(v179);
  STACK[0x3678] = v182;
  LODWORD(v180) = v180 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v182), 24) ^ *((_DWORD *)&STACK[0x40D0]
                                                                                    + v179);
  LODWORD(v147) = v168;
  LODWORD(v182) = (((v170 & (v168 & 0x6DA35A18 ^ 0xDB46B430)) << v90)
                 + ((v117 & (v168 & 0x6DA35A18 ^ 0xDB46B430)) >> v120)) ^ (((v64 & (v35 & 0x78235A18 ^ 0xF046B430)) << v90) | ((unint64_t)(v117 & (v35 & 0x78235A18 ^ 0xF046B430)) >> v135));
  v183 = v162 ^ LODWORD(STACK[0x3C60]);
  STACK[0x3610] = v183;
  LODWORD(v172) = STACK[0x3A40];
  LODWORD(v162) = v180 ^ v104 ^ LODWORD(STACK[0x3A40]);
  LODWORD(v103) = v180 ^ v104;
  LODWORD(STACK[0x3580]) = v180 ^ v104;
  LODWORD(v183) = v183 ^ v162;
  LODWORD(v25) = STACK[0x3AD0];
  LODWORD(v168) = v179 ^ LODWORD(STACK[0x3AD0]) ^ v183;
  v184 = v168 ^ v122;
  LODWORD(v158) = v122;
  v185 = 4 * BYTE1(v184);
  STACK[0x3658] = v185;
  LODWORD(v68) = *(_DWORD *)((char *)&STACK[0x40D0] + v185);
  LOBYTE(v35) = *(_BYTE *)(v175
                         + 4647 * (BYTE3(v68) ^ 0xFE)
                         + 13123128
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE3(v68) ^ 0xFE) + 13123128)) >> 32) >> 1))
              - 71;
  LODWORD(v35) = ((v35 ^ ((_BYTE)v35 << 6) ^ (4 * v35) ^ 0xFE) + 26) | ((_DWORD)v68 << 8);
  v186 = (v184 >> 22) & 0x3FC;
  STACK[0x3628] = v186;
  LODWORD(v182) = v182 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v186), 8);
  v187 = 4 * BYTE2(v184);
  STACK[0x3630] = v187;
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v187), 16);
  v188 = v176 ^ v180;
  v189 = v176;
  STACK[0x35D8] = v176;
  v190 = 4 * (v168 ^ v122);
  STACK[0x3620] = v190;
  v191 = v182 ^ v47 ^ v188 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v190) ^ v35;
  LODWORD(v122) = v170;
  LODWORD(v175) = STACK[0x3B90];
  LODWORD(v190) = (((v170 & (v147 & 0x2A799EC1 ^ 0x54F33D83)) << v175)
                 + ((v177 & (v147 & 0x2A799EC1 ^ 0x54F33D83)) >> v120)) ^ (((v170 & (v147 & 0x25799EC1 ^ 0x4AF33D83)) << v175) | ((v117 & (v147 & 0x25799EC1 ^ 0x4AF33D83)) >> v135));
  LODWORD(v177) = v158;
  v192 = v183 ^ v158;
  STACK[0x3600] = v192;
  LODWORD(v162) = v191 ^ v162;
  LODWORD(STACK[0x3598]) = v162;
  LODWORD(v176) = v191;
  STACK[0x39B0] = v191;
  LODWORD(v162) = v162 ^ v192;
  v193 = v162 ^ v168;
  v194 = 4 * BYTE1(v193);
  STACK[0x36E0] = v194;
  v195 = 4 * BYTE2(v193);
  STACK[0x36D8] = v195;
  LODWORD(v190) = v190 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v194), 24);
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v195), 16);
  v196 = 4 * v193;
  STACK[0x36C0] = v196;
  LODWORD(v190) = v190 ^ v47 ^ *(_DWORD *)((char *)&STACK[0x40D0] + v196);
  v197 = (v193 >> 22) & 0x3FC;
  STACK[0x36B8] = v197;
  LODWORD(v194) = v190 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v197), 8);
  LODWORD(STACK[0x3560]) = v194;
  LODWORD(v190) = (BYTE1(STACK[0x3C58]) + 111) ^ 0x36;
  v198 = v162 ^ v141;
  STACK[0x3608] = v198;
  LODWORD(v198) = v194 ^ v103 ^ v25 ^ v198;
  LODWORD(STACK[0x35E8]) = v194 ^ v103;
  LODWORD(v172) = v193 ^ v172 ^ v198;
  LODWORD(STACK[0x36D0]) = v172;
  v199 = v172 ^ v158;
  STACK[0x3520] = v199;
  v200 = 4 * BYTE1(v199);
  STACK[0x3640] = v200;
  LODWORD(v181) = *(_DWORD *)((char *)&STACK[0x40D0] + v200);
  LODWORD(STACK[0x3548]) = v181;
  LODWORD(v193) = 4647 * v190
                + 17937420
                - 6784
                * (((1266205 * (unint64_t)(4647 * v190 + 17937420)) >> 32) >> 1);
  LODWORD(v190) = 4647 * (((v181 >> 17) & 0x80 | (v181 >> 25)) ^ 0x40) + 15539568;
  LODWORD(STACK[0x35C8]) = v190 - 6784 * (((1266205 * (unint64_t)v190) >> 32) >> 1);
  LODWORD(v181) = *(_DWORD *)((char *)&STACK[0x44E0] + v173);
  LODWORD(STACK[0x3530]) = v181;
  LODWORD(v190) = 4647 * ((BYTE3(v181) + 111) ^ 0x36) + 17937420;
  LODWORD(STACK[0x35B8]) = v190 - 6784 * (((1266205 * (unint64_t)v190) >> 32) >> 1);
  LODWORD(STACK[0x35E0]) = 4647 * (STACK[0x39A8] ^ 0x9A)
                         + 25186740
                         - 6784
                         * (((1266205
                                          * (unint64_t)(4647 * (STACK[0x39A8] ^ 0x9Au) + 25186740)) >> 32) >> 1);
  LODWORD(v181) = STACK[0x37F8];
  v201 = LODWORD(STACK[0x37F8]) ^ v158;
  STACK[0x3568] = v201;
  LODWORD(STACK[0x35A0]) = 4647 * (BYTE1(v201) ^ 0xC4)
                         + 14331348
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE1(v201) ^ 0xC4u) + 14331348)) >> 32) >> 1);
  LODWORD(v190) = 4647 * ((v181 ^ v158) ^ 0x9A) + 25186740;
  LODWORD(STACK[0x35D0]) = v190 - 6784 * (((1266205 * (unint64_t)v190) >> 32) >> 1);
  LODWORD(v190) = (v179 >> 1) | ((v179 & 1) << 7);
  LODWORD(v201) = *(_DWORD *)((char *)&STACK[0x44E0] + ((v189 >> 22) & 0x3FC));
  LODWORD(STACK[0x3510]) = v201;
  LODWORD(STACK[0x3590]) = 4647 * (v190 ^ 0xD9)
                         + 19140993
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (v190 ^ 0xD9) + 19140993)) >> 32) >> 1);
  LODWORD(STACK[0x3578]) = 4647 * (BYTE3(v201) ^ 0xC4)
                         + 14331348
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE3(v201) ^ 0xC4) + 14331348)) >> 32) >> 1);
  LODWORD(v181) = *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x37F0]);
  LODWORD(STACK[0x3500]) = v181;
  LODWORD(STACK[0x3570]) = 4647 * (BYTE3(v181) ^ 0xFE)
                         + 13123128
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE3(v181) ^ 0xFE) + 13123128)) >> 32) >> 1);
  LODWORD(STACK[0x35F0]) = 4647 * (BYTE3(v176) ^ 0x9A)
                         + 25186740
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE3(v176) ^ 0x9A) + 25186740)) >> 32) >> 1);
  STACK[0x3588] = v188;
  LODWORD(STACK[0x3558]) = 4647 * (BYTE2(v188) ^ 0xFE)
                         + 13123128
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE2(v188) ^ 0xFEu) + 13123128)) >> 32) >> 1);
  LODWORD(v181) = *(_DWORD *)((char *)&STACK[0x44E0] + ((v188 >> 22) & 0x3FC));
  LODWORD(STACK[0x34E0]) = v181;
  LODWORD(STACK[0x3550]) = 4647 * (BYTE3(v181) ^ 0xC4)
                         + 14331348
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE3(v181) ^ 0xC4) + 14331348)) >> 32) >> 1);
  v202 = v198 ^ v158;
  STACK[0x35B0] = v202;
  LODWORD(v198) = 4647 * (((v202 >> 17) & 0x80 | (v202 >> 25)) ^ 0xD9) + 19140993;
  LODWORD(STACK[0x3538]) = v198 - 6784 * (((1266205 * (unint64_t)v198) >> 32) >> 1);
  v203 = v194 ^ v103 ^ v158;
  STACK[0x35A8] = v203;
  LODWORD(STACK[0x3528]) = 4647 * (BYTE3(v203) ^ 0xC4)
                         + 14331348
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE3(v203) ^ 0xC4) + 14331348)) >> 32) >> 1);
  v204 = STACK[0x3C18];
  LODWORD(v198) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + 4647 * (STACK[0x3800] ^ 0xC4)
                                     + 14331348
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * (STACK[0x3800] ^ 0xC4)
                                                                         + 14331348)) >> 32) >> 1))
                + 117;
  LODWORD(v203) = *((_DWORD *)&STACK[0x44E0] + ((v198 ^ 0x12 ^ (v198 >> 2) & 0x12) + 26));
  LODWORD(STACK[0x34D0]) = v203;
  LODWORD(STACK[0x3518]) = 4647 * (BYTE3(v203) ^ 0xC4)
                         + 14331348
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE3(v203) ^ 0xC4) + 14331348)) >> 32) >> 1);
  v205 = LODWORD(STACK[0x3B60]) ^ v177;
  STACK[0x34D8] = v205;
  LODWORD(v198) = 4647 * (((v205 >> 1) & 0x80 | ((unsigned __int16)v205 >> 9)) ^ 0xD9) + 19140993;
  LODWORD(STACK[0x3508]) = v198 - 6784 * (((1266205 * (unint64_t)v198) >> 32) >> 1);
  LODWORD(v190) = 4647 * ((((v205 & 1) << 7) | (v205 >> 1)) ^ 0xD9) + 19140993;
  LOBYTE(v198) = *(_BYTE *)(STACK[0x3B58]
                          + (*(_BYTE *)(STACK[0x3B58]
                                                                     + (*(_BYTE *)(STACK[0x3B58] + (0xCEED5BDC % LODWORD(STACK[0x36C8]))) - 83)
                                                                     % LODWORD(STACK[0x36C8]))
                                                          - 6)
                          % LODWORD(STACK[0x36C8]));
  LODWORD(STACK[0x34B0]) = v190 - 6784 * (((1266205 * (unint64_t)v190) >> 32) >> 1);
  LODWORD(v198) = 4647 * ((v198 + 111) ^ 0x36) + 17937420;
  LODWORD(STACK[0x34C8]) = v198 - 6784 * (((1266205 * (unint64_t)v198) >> 32) >> 1);
  LODWORD(v103) = v147;
  v206 = STACK[0x3C28];
  v207 = STACK[0x3C30];
  LOBYTE(v173) = STACK[0x3B98];
  LOBYTE(v190) = (*(_BYTE *)(v204 + LODWORD(STACK[0x3938])) + 117) ^ 0x12 ^ ((*(unsigned __int8 *)(v204 + LODWORD(STACK[0x3938]))
                                                                            + 117) >> 2) & 0x12;
  v208 = STACK[0x3AC8];
  v209 = STACK[0x3B78];
  v210 = STACK[0x3B70];
  v211 = 4 * BYTE2(STACK[0x3B70]);
  LODWORD(v200) = (((v122 & (v147 & 0x174866F3 ^ 0x2E90CDE6)) << v175)
                 + ((STACK[0x3AC8] & (v147 & 0x174866F3 ^ 0x2E90CDE6)) >> STACK[0x3B78])) ^ (((STACK[0x3C28] & (v147 & 0x474866F3 ^ 0x8E90CDE6)) << v175) | ((STACK[0x3C30] & (v147 & 0x474866F3 ^ 0x8E90CDE6)) >> v173)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v211), 16);
  v212 = LODWORD(STACK[0x3820]) ^ STACK[0x3C50];
  STACK[0x3770] = v212;
  v213 = (v210 >> 22) & 0x3FC;
  v214 = 4 * v210;
  LODWORD(STACK[0x3750]) = v200 ^ v212 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v213), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + (v190 + 26)), 24) ^ *(_DWORD *)((char *)&STACK[0x40D0] + v214);
  LOBYTE(v212) = (*(_BYTE *)(v204 + LODWORD(STACK[0x3988])) + 117) ^ 0x12 ^ ((*(unsigned __int8 *)(v204 + LODWORD(STACK[0x3988]))
                                                                            + 117) >> 2) & 0x12;
  LODWORD(STACK[0x37F8]) = (97 * (*(_BYTE *)(v204 + LODWORD(STACK[0x3980])) ^ 0xA2)) | (LODWORD(STACK[0x3818]) << 8);
  LODWORD(STACK[0x3768]) = (*(unsigned __int8 *)(v204 + LODWORD(STACK[0x3948])) + 117) ^ 0x12 ^ ((*(unsigned __int8 *)(v204 + LODWORD(STACK[0x3948]))
                                                                                                + 117) >> 2) & 0x12;
  LODWORD(v190) = *(unsigned __int8 *)(v204 + LODWORD(STACK[0x3940])) ^ 0xFFFFFFE3;
  LODWORD(v210) = *(unsigned __int8 *)(v204 + LODWORD(STACK[0x38C8]));
  STACK[0x3760] = (v190 >> 3) | (32 * v190);
  STACK[0x3748] = ((v210 ^ 0xE3) >> 3) | (32 * (v210 ^ 0xFFFFFFE3));
  LODWORD(v210) = (97 * (*(_BYTE *)(v204 + LODWORD(STACK[0x38B0])) ^ 0x27)) | (LODWORD(STACK[0x3810]) << 8);
  LODWORD(STACK[0x3780]) = (97 * (*(_BYTE *)(v204 + LODWORD(STACK[0x38A0])) ^ 0x27)) | (LODWORD(STACK[0x3808]) << 8);
  STACK[0x3720] = ((*(_BYTE *)(v204 + LODWORD(STACK[0x3890])) ^ 0xE3) >> 3) | (32
                                                                                              * (*(unsigned __int8 *)(v204 + LODWORD(STACK[0x3890])) ^ 0xFFFFFFE3));
  LODWORD(STACK[0x3758]) = (*(unsigned __int8 *)(v204 + LODWORD(STACK[0x3898])) - 71) ^ ((*(unsigned __int8 *)(v204 + LODWORD(STACK[0x3898]))
                                                                                        - 71) << 6) ^ (4 * (*(unsigned __int8 *)(v204 + LODWORD(STACK[0x3898])) - 71));
  LODWORD(v190) = *(unsigned __int8 *)(v204 + LODWORD(STACK[0x3870]));
  LODWORD(v25) = *(unsigned __int8 *)(v204 + LODWORD(STACK[0x3828]));
  STACK[0x3898] = ((v190 ^ 0xE3) >> 3) | (32 * (v190 ^ 0xFFFFFFE3));
  LODWORD(v193) = *(unsigned __int8 *)(v204 + v193);
  LODWORD(STACK[0x3890]) = (v25 + 117) ^ 0x12 ^ ((v25 + 117) >> 2) & 0x12;
  STACK[0x3B60] = ((v193 ^ 0xE) >> 3) | (32 * (v193 ^ 0xE));
  LODWORD(v195) = STACK[0x3A28];
  LODWORD(v190) = STACK[0x3A28] & 0x9090909 | 0x12121212;
  LODWORD(STACK[0x3498]) = v190;
  LODWORD(v193) = v103 & 0x9090909 | 0x12121212;
  v215 = v207 & v190;
  LOBYTE(v201) = v173;
  LODWORD(STACK[0x3490]) = v215 >> v173;
  v216 = v206 & v190;
  STACK[0x33D8] = v216;
  v217 = STACK[0x3AB8];
  v218 = v216 << STACK[0x3AB8];
  LODWORD(STACK[0x3728]) = LODWORD(STACK[0x39C0]) ^ (v218 | (v215 >> v173));
  LODWORD(v216) = v122;
  LOBYTE(v184) = v175;
  LODWORD(v190) = (v122 & v190) << v175;
  LODWORD(STACK[0x33E8]) = v190;
  LODWORD(STACK[0x32C0]) = STACK[0x3998] ^ (v190 + (v215 >> v173));
  v219 = v122 & v193;
  STACK[0x33D0] = v219;
  LODWORD(v25) = (v208 & v193) >> v173;
  LODWORD(STACK[0x33C8]) = v25;
  LODWORD(STACK[0x3740]) = LODWORD(STACK[0x39E0]) ^ (((_DWORD)v219 << v175) + v25);
  v220 = STACK[0x3C40];
  LODWORD(v25) = *(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3C40] >> 22) & 0x3FC));
  LODWORD(v117) = v103;
  LODWORD(v122) = v103 & 0x1C1C1C1C ^ 0x38383838;
  v221 = v207 & v122;
  STACK[0x3828] = v221;
  LOBYTE(v197) = v209;
  v222 = v221 >> v209;
  v223 = v216 & v122;
  STACK[0x34A0] = v223;
  LODWORD(v103) = v216;
  LODWORD(v173) = ((_DWORD)v223 << v175) + v222;
  LODWORD(STACK[0x3998]) = v195 & 0x4ACACACA ^ 0x95959595;
  LODWORD(STACK[0x38B0]) = v117 & 0x4ACACACA ^ 0x95959595;
  LODWORD(v212) = *((_DWORD *)&STACK[0x44E0] + (v212 + 26));
  LODWORD(v175) = v117;
  LODWORD(v209) = v117 & 0xCCCCCCCC ^ 0x99999999;
  v224 = v208 & v209;
  STACK[0x34A8] = v224;
  v225 = v206 & v209;
  STACK[0x37F0] = v225;
  v226 = v225 << v217;
  STACK[0x36A8] = v226;
  LODWORD(v117) = v224 >> v201;
  LODWORD(v25) = (v226 + (v224 >> v201)) ^ __ROR4__(v25, 24) ^ __ROR4__(v212, 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v220), 16) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v220));
  LODWORD(v226) = v175;
  LODWORD(v224) = v175 & 0xE7E7E7E7 ^ 0xCFCFCFCF;
  LODWORD(STACK[0x34F8]) = v224;
  v227 = (unint64_t)(v206 & v224) << v217;
  v228 = v208 & v224;
  LOBYTE(v224) = v197;
  LODWORD(STACK[0x33E0]) = v227 | (v228 >> v197);
  LODWORD(v227) = v195 & 0x6A6A6A6A ^ 0xD4D4D4D4;
  LODWORD(STACK[0x34C0]) = v227;
  LODWORD(STACK[0x3940]) = v175 & 0x6A6A6A6A ^ 0xD4D4D4D4;
  LODWORD(v222) = v207;
  v229 = (unint64_t)(v207 & v227) >> v197;
  v230 = v206 & v227;
  LODWORD(STACK[0x3948]) = ((_DWORD)v230 << v184) | v229;
  LOBYTE(v197) = v217;
  LODWORD(STACK[0x34E8]) = (v230 << v217) | v229;
  LODWORD(STACK[0x3980]) = v226 & 0x72727272 ^ 0xE4E4E4E4;
  LODWORD(STACK[0x3988]) = v195 & 0x72727272 ^ 0xE4E4E4E4;
  LODWORD(v217) = *((_DWORD *)&STACK[0x44E0] + STACK[0x3978]);
  LODWORD(v226) = v195 & 0x1010101 | 0x2020202;
  LODWORD(STACK[0x3978]) = v226;
  v231 = v103 & v226;
  STACK[0x3C40] = v231;
  v232 = v207 & v226;
  STACK[0x3698] = v232;
  v233 = v231 << v197;
  STACK[0x3690] = v233;
  v234 = v232 >> v224;
  STACK[0x3390] = v234;
  v235 = STACK[0x39E8];
  LODWORD(v207) = *((_DWORD *)&STACK[0x44E0] + STACK[0x39E8]);
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + v214), 16);
  LODWORD(v214) = *((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x39E8]));
  LODWORD(v234) = (v233 | v234) ^ __ROR4__(v217, 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + v213), 24) ^ v47 ^ *(_DWORD *)((char *)&STACK[0x44E0] + v211);
  LODWORD(STACK[0x3300]) = v234;
  v236 = v208 & v122;
  STACK[0x33B8] = v236;
  v237 = v206 & v122;
  STACK[0x3818] = v237;
  v238 = v237 << v197;
  STACK[0x38C8] = v238;
  v239 = v236 >> v224;
  STACK[0x39C0] = v239;
  LODWORD(v235) = (v238 + v239) ^ __ROR4__(v207, 16) ^ __ROR4__(v214, 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((v235 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(v235));
  v240 = v215 >> v224;
  STACK[0x3348] = v215 >> v224;
  v241 = v224;
  LODWORD(v240) = LODWORD(STACK[0x39B8]) ^ (v218 | v240);
  LODWORD(v239) = (16843009 * ((v234 ^ v25) + 1)) ^ (((16843009
                                                                      * ((v234 ^ v25) + 1)) & STACK[0x3B68]) >> 1);
  LODWORD(STACK[0x3388]) = v239;
  LODWORD(v188) = 16843009 * ((v234 ^ v25) + 1);
  v242 = v239 & v222;
  STACK[0x32B8] = v242;
  v243 = v239 & v206;
  STACK[0x34F0] = v243;
  LODWORD(STACK[0x3398]) = v242 >> v201;
  LODWORD(v229) = (_DWORD)v243 << v184;
  LODWORD(STACK[0x32A8]) = v240 ^ ((v242 >> v201) + ((_DWORD)v243 << v184));
  v244 = STACK[0x38A8];
  LODWORD(v240) = *((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x38A8]));
  LODWORD(v218) = v195 & 0x1C1C1C1C ^ 0x38383838;
  v245 = v206 & v218;
  STACK[0x3328] = v245;
  v246 = v208 & v218;
  STACK[0x37D8] = v246;
  LODWORD(v246) = v246 >> v201;
  LODWORD(STACK[0x3330]) = v246;
  v247 = v245 << v197;
  STACK[0x3320] = v247;
  v248 = STACK[0x3C18];
  LODWORD(v217) = v247 ^ v246 ^ __ROR4__(v240, 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v244), 16) ^ *((_DWORD *)&STACK[0x44E0] + (97 * (*(_BYTE *)(STACK[0x3C18] + LODWORD(STACK[0x38C0])) ^ 0x27))) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v244 >> 22) & 0x3FC)), 24);
  LODWORD(v240) = STACK[0x3AB0];
  LODWORD(STACK[0x39B8]) = v188;
  LODWORD(v214) = v188 ^ ((v188 & v240) >> 1);
  v249 = v214 & v208;
  STACK[0x3738] = v249;
  v250 = v214 & v103;
  LODWORD(v249) = v249 >> v201;
  LODWORD(STACK[0x39E8]) = v249;
  LODWORD(v249) = ((_DWORD)v250 << v184) | v249;
  LODWORD(STACK[0x39E0]) = (_DWORD)v250 << v184;
  LODWORD(STACK[0x3298]) = v235 ^ v249;
  LODWORD(STACK[0x3290]) = v217 ^ v249;
  LODWORD(v246) = v173 ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + HIBYTE(LODWORD(STACK[0x3B80]))), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + LODWORD(STACK[0x3B80])), 16);
  LODWORD(v173) = *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3A38]);
  LODWORD(v217) = *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3A30]);
  LODWORD(STACK[0x3A30]) = v246 ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ (97 * (*(_BYTE *)(v248 + LODWORD(STACK[0x3960])) ^ 0xA2))), 8) ^ *((_DWORD *)&STACK[0x44E0]+ (97 * (*(_BYTE *)(v248 + LODWORD(STACK[0x3930])) ^ 0xA2)));
  v251 = v103 & v218;
  v252 = v222 & v218;
  STACK[0x37C8] = v252;
  v253 = v252 >> v241;
  STACK[0x32F0] = v253;
  STACK[0x37D0] = v251;
  LODWORD(STACK[0x3280]) = v173 ^ (((_DWORD)v251 << v184) + v253) ^ __ROR4__(v217, 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3A60]), 16) ^ v210;
  LODWORD(v188) = STACK[0x39F8];
  v254 = (LODWORD(STACK[0x3990]) ^ LODWORD(STACK[0x39F8]));
  LODWORD(v253) = *(_DWORD *)((char *)&STACK[0x44E0] + ((v254 >> 22) & 0x3FC));
  LODWORD(v248) = v208;
  LODWORD(v247) = STACK[0x3998];
  v255 = v208 & STACK[0x3998];
  v256 = v103 & STACK[0x3998];
  LOBYTE(v122) = v201;
  LODWORD(STACK[0x38A8]) = v255 >> v201;
  STACK[0x37B8] = v256;
  LODWORD(v173) = (v256 << v197) + (v255 >> v201);
  LODWORD(v195) = STACK[0x3388];
  v257 = STACK[0x3388] & v208;
  STACK[0x3A38] = v257;
  LODWORD(v257) = v257 >> v201;
  LODWORD(STACK[0x3938]) = v229;
  LODWORD(v208) = v229 ^ v257;
  LODWORD(v256) = v257;
  LODWORD(STACK[0x3960]) = v257;
  LODWORD(STACK[0x3B80]) = v229 ^ v257 ^ v173 ^ __ROR4__(v253, 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v254), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v254)), 8) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(v254));
  v258 = v214 & v222;
  LODWORD(STACK[0x3A60]) = ((v258 >> v241) | ((_DWORD)v250 << v184)) ^ v25;
  v259 = STACK[0x39F0];
  LODWORD(v253) = *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x39F0]));
  v260 = v103 & v209;
  STACK[0x3380] = v260;
  LODWORD(v260) = (_DWORD)v260 << v184;
  LODWORD(STACK[0x38A0]) = v260;
  LODWORD(STACK[0x3820]) = v117;
  LODWORD(STACK[0x3278]) = v260 ^ v117 ^ v253 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v259 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v259), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v259)), 8);
  v261 = STACK[0x38B8];
  LODWORD(v253) = *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x38B8]));
  LODWORD(v218) = STACK[0x3A28];
  LODWORD(v201) = STACK[0x3A28] & 0xCCCCCCCC ^ 0x99999999;
  LODWORD(STACK[0x33A8]) = v201;
  v262 = v222 & v201;
  v263 = v206 & v201;
  STACK[0x3808] = v262;
  v264 = v262 >> v241;
  STACK[0x3800] = v263;
  v265 = v263 << v197;
  STACK[0x36A0] = v264;
  STACK[0x3810] = v265;
  LODWORD(STACK[0x3270]) = v253 ^ (v265 + v264) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v261), 16) ^ LODWORD(STACK[0x37F8]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v261)), 8);
  v266 = STACK[0x39A0];
  LODWORD(v253) = *((_DWORD *)&STACK[0x44E0] + STACK[0x39A0]);
  v267 = v206 & v247;
  STACK[0x3378] = v267;
  STACK[0x37A0] = v267 << v197;
  LODWORD(STACK[0x34B8]) = v229 + v256;
  LODWORD(STACK[0x3268]) = (v229 + v256) ^ ((v267 << v197) | (v255 >> v241)) ^ __ROR4__(v253, 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v266)), 8) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v266)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v266 >> 22) & 0x3FC)), 24);
  v268 = STACK[0x3B88];
  LODWORD(v253) = *(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3B88] >> 22) & 0x3FC));
  v269 = v103 & STACK[0x38B0];
  LODWORD(v256) = v222;
  v270 = v222 & STACK[0x38B0];
  LODWORD(v229) = STACK[0x38B0];
  STACK[0x3360] = v270;
  LODWORD(v270) = v270 >> v122;
  LODWORD(STACK[0x3870]) = (_DWORD)v269 << v184;
  LODWORD(v222) = (v258 >> v241) + (v250 << v197);
  LODWORD(v265) = v258 >> v241;
  STACK[0x3930] = v258 >> v241;
  LODWORD(STACK[0x39A0]) = v222;
  LODWORD(v244) = v250 << v197;
  STACK[0x39F0] = v250 << v197;
  LODWORD(STACK[0x3790]) = v270;
  LODWORD(STACK[0x3B88]) = ((_DWORD)v269 << v184) ^ v270 ^ v222 ^ __ROR4__(v253, 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ STACK[0x3898]), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ (LODWORD(STACK[0x3890]) + 26)), 16) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v268));
  LODWORD(v253) = *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3AE0]);
  v271 = v256 & v209;
  STACK[0x32F8] = v271;
  LODWORD(v222) = STACK[0x37F0] << v184;
  LOBYTE(v250) = v184;
  STACK[0x32D0] = v271 >> v241;
  v272 = STACK[0x3C18];
  LODWORD(STACK[0x3B08]) = (v222 | (v271 >> v241)) ^ __ROR4__(v253, 8) ^ *(_DWORD *)((char *)&STACK[0x44E0]
                                                                                   + STACK[0x3B08]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3B00]), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + (97 * (*(_BYTE *)(STACK[0x3C18] + LODWORD(STACK[0x3970])) ^ 0xA2))), 24);
  LODWORD(v253) = *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3A78]);
  v273 = v269 << v197;
  STACK[0x3898] = v273;
  v274 = v248 & v229;
  STACK[0x3778] = v274;
  LODWORD(STACK[0x3540]) = v274 >> v122;
  LODWORD(v253) = (v273 + (v274 >> v122)) ^ v253;
  LODWORD(v273) = *(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3C58] >> 22) & 0x3FC));
  LODWORD(v258) = v258 >> v122;
  LODWORD(STACK[0x3970]) = v258;
  LODWORD(v258) = v244 + v258;
  LODWORD(STACK[0x3990]) = v258;
  LODWORD(STACK[0x3C58]) = v258 ^ v253 ^ __ROR4__(v273, 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ STACK[0x3B60]), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3A80]), 16);
  v275 = LODWORD(STACK[0x39C8]) ^ v188;
  LODWORD(v229) = v188;
  LODWORD(v253) = *((_DWORD *)&STACK[0x44E0] + BYTE1(v275));
  v276 = v206 & ~(_DWORD)v218;
  STACK[0x3370] = v276;
  v277 = v256 & ~(_DWORD)v218;
  LODWORD(v222) = (_DWORD)v276 << v250;
  STACK[0x37F8] = v277 >> v241;
  LODWORD(STACK[0x3B00]) = (((_DWORD)v276 << v250) | (v277 >> v241)) ^ __ROR4__(v253, 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ v275), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v275 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v275));
  v278 = STACK[0x3950];
  LODWORD(v275) = *((_DWORD *)&STACK[0x44E0] + STACK[0x3950]);
  v279 = (unint64_t)(v256 & ~LODWORD(STACK[0x3A10])) >> v241;
  LODWORD(v209) = STACK[0x3A10];
  v280 = (unint64_t)(v103 & ~LODWORD(STACK[0x3A10])) << v197;
  STACK[0x33B0] = v280;
  STACK[0x37F0] = v279;
  LODWORD(v275) = (v280 | v279) ^ __ROR4__(v275, 16) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v278)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v278 >> 22) & 0x3FC)), 24);
  LODWORD(v47) = __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v278)), 8);
  v281 = v214 & v206;
  STACK[0x3AE0] = v281;
  LODWORD(v217) = (_DWORD)v281 << v250;
  LODWORD(STACK[0x3A80]) = v275 ^ v47 ^ (v265 + ((_DWORD)v281 << v250));
  LODWORD(v275) = *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3958]);
  LODWORD(v276) = v218 & 0xE7E7E7E7 ^ 0xCFCFCFCF;
  v282 = v206 & v276;
  STACK[0x33A0] = v282;
  v283 = v282 << v197;
  v284 = v256 & v276;
  LODWORD(STACK[0x33C0]) = v276;
  STACK[0x37B0] = v284;
  v285 = v284 >> v241;
  STACK[0x3890] = v285;
  LODWORD(STACK[0x3A20]) = (v283 + v285) ^ __ROR4__(v275, 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3A20]), 24) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ STACK[0x39D0]), 16) ^ *(_DWORD *)((char *)&STACK[0x44E0]+ STACK[0x3A08]);
  v286 = STACK[0x3A48];
  LODWORD(v285) = *((_DWORD *)&STACK[0x44E0] + STACK[0x3A48]);
  LODWORD(STACK[0x3340]) = v277 >> v122;
  v287 = v103 & ~(_DWORD)v218;
  STACK[0x37E8] = v287;
  LODWORD(v287) = (_DWORD)v287 << v250;
  LODWORD(STACK[0x38C0]) = v287;
  LODWORD(STACK[0x3A90]) = v287 ^ (v277 >> v122) ^ __ROR4__(v285, 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((v286 >> 22) & 0x3FC)), 24) ^ *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3A90]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3AC0]), 8) ^ v208;
  v288 = STACK[0x3A58];
  LODWORD(v285) = *((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x3A58]));
  LODWORD(v208) = v248;
  v289 = v248 & ~(_DWORD)v218;
  LODWORD(v286) = v218;
  STACK[0x37E0] = v289;
  LODWORD(STACK[0x38B8]) = v289 >> v122;
  LODWORD(STACK[0x3A58]) = (v222 + (v289 >> v122)) ^ __ROR4__(v285, 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v288 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(v288)) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v288), 16);
  v290 = v272;
  LODWORD(v285) = *((_DWORD *)&STACK[0x44E0] + ((*(_BYTE *)(v272 + LODWORD(STACK[0x3878])) ^ 0xC3) + 85));
  v291 = v103 & STACK[0x3940];
  v292 = v208 & STACK[0x3940];
  STACK[0x3798] = v292;
  LODWORD(STACK[0x37A8]) = (_DWORD)v291 << v250;
  LODWORD(STACK[0x3288]) = v292 >> v122;
  LODWORD(v285) = (((_DWORD)v291 << v250) | (v292 >> v122)) ^ __ROR4__(v285, 24) ^ *((_DWORD *)&STACK[0x44E0]
                                                                                                 + BYTE2(STACK[0x3788])) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + STACK[0x3788]), 16);
  LODWORD(v47) = __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x3788])), 8);
  v293 = v195 & v103;
  STACK[0x3AC0] = v293;
  LODWORD(v272) = v103;
  v294 = v293 << v197;
  STACK[0x3B60] = v294;
  LODWORD(v214) = STACK[0x3398];
  LODWORD(STACK[0x3A78]) = v285 ^ v47 ^ (v294 + LODWORD(STACK[0x3398]));
  LODWORD(STACK[0x3A08]) = LODWORD(STACK[0x33E0]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((STACK[0x37C0] >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(STACK[0x37C0])) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + (LODWORD(STACK[0x3768]) + 26)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + STACK[0x37C0]), 16);
  v295 = STACK[0x3AA0];
  LODWORD(v285) = *((_DWORD *)&STACK[0x44E0] + STACK[0x3AA0]);
  v296 = v208 & (v218 & 0xE7E7E7E7 ^ 0xCFCFCFCF);
  STACK[0x3768] = v296;
  LODWORD(STACK[0x3338]) = v296 >> v122;
  STACK[0x37C0] = v283;
  LODWORD(v285) = v283 ^ (v296 >> v122) ^ __ROR4__(v285, 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v295)), 8) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(v295));
  LODWORD(v47) = __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v295 >> 22) & 0x3FC)), 24);
  LODWORD(v296) = *((_DWORD *)&STACK[0x44E0] + STACK[0x3760]);
  LODWORD(v295) = LODWORD(STACK[0x39E8]) + v217;
  LODWORD(STACK[0x32B0]) = v217;
  LODWORD(STACK[0x3AA0]) = v285 ^ v47 ^ v295;
  LODWORD(v294) = STACK[0x34F8];
  v297 = v103 & STACK[0x34F8];
  STACK[0x32E0] = v297;
  v298 = v256 & v294;
  STACK[0x3760] = v298;
  STACK[0x32D8] = v298 >> v241;
  LODWORD(STACK[0x3A48]) = ((_DWORD)v297 << v250) ^ (v298 >> v241) ^ __ROR4__(v296, 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ STACK[0x3748]), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3868] >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x3868]));
  v299 = v290;
  LODWORD(STACK[0x3C38]) = *((_DWORD *)&STACK[0x44E0] + BYTE2(LODWORD(STACK[0x3C38]))) ^ LODWORD(STACK[0x3948]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + LODWORD(STACK[0x3C38])), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + (97 * (*(_BYTE *)(v290 + LODWORD(STACK[0x3888])) ^ 0x27))), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + (97 * (*(_BYTE *)(v290 + LODWORD(STACK[0x3880])) ^ 0x27))), 24);
  v300 = STACK[0x3C48];
  LODWORD(v298) = *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x3C48]));
  STACK[0x3888] = v291 << v197;
  LODWORD(STACK[0x3C48]) = v298 ^ ((v291 << v197) + (v292 >> v122)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((v300 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ ((*(_BYTE *)(v290 + LODWORD(STACK[0x3928])) ^ 0xC3) + 85)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v300), 16);
  v301 = STACK[0x3A68];
  LODWORD(v298) = *((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x3A68]));
  LODWORD(STACK[0x34F8]) = v209 & 0x13131313;
  LODWORD(v295) = v209 & 0x13131313 ^ 0x26262626;
  v302 = v208 & v295;
  v303 = v103 & v295;
  LODWORD(STACK[0x3368]) = v295;
  STACK[0x3748] = v302;
  LODWORD(v302) = v302 >> v122;
  LODWORD(STACK[0x3388]) = v302;
  LODWORD(v295) = (((_DWORD)v303 << v250) | v302) ^ __ROR4__(v298, 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((v301 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ v301), 16) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(v301));
  LOBYTE(v188) = v197;
  v304 = STACK[0x34F0] << v197;
  LODWORD(v294) = v214;
  LODWORD(STACK[0x3B20]) = LODWORD(STACK[0x34E8]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x3AE8])), 8) ^ *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3B10]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3B20]), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3B18]), 24) ^ (v304 | v214);
  v305 = v229;
  v306 = LODWORD(STACK[0x3A70]) ^ v229;
  LODWORD(v301) = *((_DWORD *)&STACK[0x44E0] + BYTE2(v306));
  LODWORD(v214) = *((_DWORD *)&STACK[0x44E0] + (LOBYTE(STACK[0x3A70]) ^ v229));
  v307 = v303 << v197;
  STACK[0x3358] = v303 << v197;
  LODWORD(v303) = (v256 & (v209 & 0x13131313 ^ 0x26262626)) >> v122;
  LODWORD(STACK[0x3310]) = v303;
  LODWORD(v214) = v301 ^ (v307 | v303) ^ __ROR4__(v214, 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v306)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v306 >> 22) & 0x3FC)), 24);
  v308 = STACK[0x3C50];
  LODWORD(v306) = *((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x3C50]));
  LODWORD(v197) = STACK[0x3980];
  LODWORD(v229) = v206;
  v309 = v206 & STACK[0x3980];
  v310 = v256 & STACK[0x3980];
  LODWORD(v265) = v256;
  STACK[0x3350] = v310 >> v241;
  LODWORD(v306) = (v310 >> v241) ^ ((_DWORD)v309 << v250) ^ __ROR4__(v306, 8) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v308)) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v308), 16) ^ LODWORD(STACK[0x3780]);
  v311 = STACK[0x3AD8];
  LODWORD(v301) = *((_DWORD *)&STACK[0x44E0] + STACK[0x3AD8]);
  LODWORD(v206) = *((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x3AD8]));
  LODWORD(v256) = v286 & 0x13131313 ^ 0x26262626;
  LODWORD(v209) = (v229 & v256) << v250;
  LODWORD(STACK[0x3868]) = v209;
  v312 = v208 & v256;
  LODWORD(v229) = v256;
  LODWORD(STACK[0x32E8]) = v256;
  STACK[0x34F0] = v312 >> v241;
  LODWORD(v301) = (v209 | (v312 >> v241)) ^ __ROR4__(v301, 16) ^ __ROR4__(v206, 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((v311 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(v311));
  LODWORD(v286) = STACK[0x3960];
  LODWORD(STACK[0x3B18]) = v306 ^ (v304 + LODWORD(STACK[0x3960]));
  LODWORD(STACK[0x3C50]) = v301 ^ (v304 + v286);
  v313 = LODWORD(STACK[0x3AF8]) ^ v305;
  LODWORD(v301) = *((_DWORD *)&STACK[0x44E0] + BYTE1(v313));
  LODWORD(v206) = *((_DWORD *)&STACK[0x44E0] + (LOBYTE(STACK[0x3AF8]) ^ v305));
  v314 = v208;
  v315 = (unint64_t)(v208 & v197) >> v241;
  v316 = v309 << v188;
  STACK[0x34E8] = v315;
  LODWORD(v315) = (v309 << v188) ^ v315;
  LODWORD(STACK[0x3788]) = v315;
  LODWORD(STACK[0x3B10]) = v315 ^ __ROR4__(v301, 8) ^ __ROR4__(v206, 16) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v313)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v313 >> 22) & 0x3FC)), 24) ^ (STACK[0x3B60] | v294);
  LODWORD(v313) = *(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3AF0] >> 22) & 0x3FC));
  LODWORD(v315) = *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x3AF0]));
  v317 = STACK[0x3AF0];
  LODWORD(v309) = *((_DWORD *)&STACK[0x44E0] + STACK[0x3AF0]);
  LODWORD(v301) = STACK[0x3988];
  LODWORD(v206) = v272 & LODWORD(STACK[0x3988]);
  LODWORD(STACK[0x3248]) = (_DWORD)v206 << v250;
  v318 = v265 & v301;
  STACK[0x3240] = v318;
  LODWORD(v318) = v318 >> v122;
  LODWORD(STACK[0x3398]) = v318;
  LODWORD(v318) = ((_DWORD)v206 << v250) + v318;
  LODWORD(STACK[0x3780]) = v318;
  LODWORD(v313) = v318 ^ __ROR4__(v313, 24) ^ v315 ^ __ROR4__(v309, 16);
  LODWORD(v47) = __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v317)), 8);
  v319 = STACK[0x3738] >> v241;
  v320 = STACK[0x39F0];
  v321 = LODWORD(STACK[0x3740]) ^ STACK[0x39F0] ^ v319;
  LODWORD(v318) = STACK[0x39E0];
  LODWORD(STACK[0x3AF8]) = v295 ^ LODWORD(STACK[0x39E0]) ^ v319;
  LODWORD(STACK[0x3AE8]) = LODWORD(STACK[0x3A20]) ^ (v319 | v217);
  LODWORD(STACK[0x3AF0]) = v313 ^ v47 ^ (v319 | v217);
  LODWORD(v294) = *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3B48]);
  LODWORD(v295) = *(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3A98] >> 22) & 0x3FC));
  v322 = (unint64_t)(v272 & v229) << v188;
  STACK[0x3740] = v322;
  LODWORD(v294) = (v322 + (v312 >> v122)) ^ __ROR4__(v294, 16) ^ __ROR4__(v295, 24) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3B50]), 8) ^ *((_DWORD *)&STACK[0x44E0] + (97 * (*(_BYTE *)(v299 + LODWORD(STACK[0x3AA8])) ^ 0xA2)));
  v323 = STACK[0x3930];
  LODWORD(STACK[0x3B50]) = v214 ^ (STACK[0x3930] + v318);
  LODWORD(STACK[0x3B48]) = v294 ^ (v323 + v318);
  LODWORD(v294) = *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3B28]);
  LODWORD(STACK[0x3738]) = v310 >> v122;
  LODWORD(v294) = v316 ^ (v310 >> v122) ^ __ROR4__(v294, 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ STACK[0x3B30]), 24) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ STACK[0x3B38]), 16) ^ *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3B40]);
  v324 = STACK[0x3770];
  LODWORD(v295) = *(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3770] >> 22) & 0x3FC));
  LODWORD(STACK[0x3B38]) = LODWORD(STACK[0x3A08]) ^ (v323 | v320);
  LODWORD(STACK[0x3B40]) = v294 ^ (v323 | v320);
  LODWORD(v197) = STACK[0x3C40] << v250;
  v325 = (unint64_t)(v314 & STACK[0x3978]) >> v241;
  STACK[0x3308] = v325;
  LODWORD(v295) = (v197 | v325) ^ __ROR4__(v295, 24) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v324)) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v324)), 8);
  LODWORD(v197) = *((_DWORD *)&STACK[0x44E0] + v324);
  v326 = STACK[0x3938];
  LODWORD(v317) = v286;
  LODWORD(STACK[0x3318]) = LODWORD(STACK[0x3938]) | v286;
  LODWORD(v316) = v295 ^ (v326 | v286) ^ __ROR4__(v197, 16);
  LODWORD(v319) = STACK[0x3AD0];
  LODWORD(v197) = LODWORD(STACK[0x3A50]) ^ LODWORD(STACK[0x3AD0]);
  v327 = v197 ^ v305;
  LODWORD(v214) = *(_DWORD *)((char *)&STACK[0x44E0] + ((v327 >> 22) & 0x3FC));
  LODWORD(v325) = STACK[0x3698] >> v122;
  LODWORD(STACK[0x3698]) = v325;
  LODWORD(STACK[0x3C40]) = (STACK[0x3690] + v325) ^ __ROR4__(v214, 24) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v327)) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v327)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + (v197 ^ v305)), 16);
  LODWORD(v214) = *((_DWORD *)&STACK[0x44E0] + STACK[0x3720]);
  LODWORD(v312) = STACK[0x3A10];
  LODWORD(v325) = STACK[0x3A10] & 0x1010101 | 0x2020202;
  LODWORD(STACK[0x32C8]) = v325;
  v328 = STACK[0x3C28];
  LODWORD(v229) = (STACK[0x3C28] & v325) << v250;
  v329 = v314 & v325;
  STACK[0x3770] = v329;
  v330 = v329 >> v241;
  STACK[0x3690] = v330;
  LODWORD(v214) = (v229 + v330) ^ __ROR4__(v214, 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ ((LODWORD(STACK[0x3758]) ^ 0xFE) + 26)), 16);
  LODWORD(v47) = __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x3A88])), 8);
  LODWORD(v324) = STACK[0x3A88];
  LODWORD(v299) = *((_DWORD *)&STACK[0x44E0] + BYTE2(v324));
  LOBYTE(v286) = v188;
  v331 = STACK[0x3AE0] << v188;
  STACK[0x3260] = v331;
  LODWORD(STACK[0x3958]) = v323 | v331;
  LODWORD(STACK[0x3B30]) = v214 ^ v47 ^ v299 ^ (v323 | v331);
  LOBYTE(v309) = v250;
  v332 = v317;
  v333 = STACK[0x3AC0] << v250;
  LODWORD(STACK[0x3928]) = v333;
  LODWORD(STACK[0x3B28]) = (v317 + v333) ^ LODWORD(STACK[0x3300]);
  LODWORD(v310) = v312 & 0xF8F8F8F8 ^ 0xF1F1F1F1;
  LODWORD(v299) = v323 ^ v331;
  v334 = LODWORD(STACK[0x3728]) ^ v323 ^ v331;
  v335 = v314 & v310;
  STACK[0x3230] = v335;
  v336 = v335 >> v122;
  v337 = v328 & v310;
  STACK[0x3228] = v337;
  v338 = v328;
  LODWORD(v337) = (_DWORD)v337 << v309;
  v339 = v309;
  LODWORD(STACK[0x3758]) = v337;
  LODWORD(STACK[0x3300]) = v336;
  LODWORD(v197) = v197 ^ LODWORD(STACK[0x3A40]) ^ LODWORD(STACK[0x3750]);
  LODWORD(v188) = LODWORD(STACK[0x3750]) ^ (v337 | v336) ^ v299;
  LODWORD(STACK[0x3AE0]) = v188;
  v340 = v324 ^ v319 ^ v197;
  v341 = v272 & v310;
  LODWORD(v337) = (STACK[0x3C30] & v310) >> v122;
  STACK[0x3880] = v341 << v286;
  LODWORD(STACK[0x3750]) = v337;
  LODWORD(v310) = v337 ^ v305 ^ (v341 << v286);
  LODWORD(v337) = v320 | LODWORD(STACK[0x3970]);
  LODWORD(STACK[0x3258]) = v337;
  LODWORD(STACK[0x3AD8]) = v310 ^ v337 ^ v197;
  LODWORD(v337) = v304 | (STACK[0x32B8] >> v241);
  v342 = STACK[0x32B8] >> v241;
  LODWORD(STACK[0x32B8]) = v337;
  v343 = LODWORD(STACK[0x3A30]) ^ v337;
  LODWORD(STACK[0x39D0]) = v304 | v332;
  STACK[0x33E0] = v304;
  v344 = LODWORD(STACK[0x3280]) ^ (v304 | v332);
  v345 = STACK[0x3B38];
  v346 = v316;
  LODWORD(v337) = ((((v316 - LODWORD(STACK[0x3B38])) ^ (&STACK[0x4000] + 208))
                  - &STACK[0x44E0]) ^ 0xAE1E352B)
                + v188;
  LODWORD(STACK[0x3A98]) = v337;
  v347 = (v337 & 1) == 0;
  if ((v337 & 1) != 0)
    v348 = v344;
  else
    v348 = v343;
  LODWORD(STACK[0x3A70]) = v348;
  v349 = STACK[0x3298];
  if (v347)
    v350 = v344;
  else
    v350 = STACK[0x3298];
  LODWORD(STACK[0x3AC0]) = v350;
  v351 = STACK[0x3290];
  if (!v347)
    v349 = STACK[0x3290];
  LODWORD(STACK[0x3A68]) = v349;
  if (v347)
    v352 = v351;
  else
    v352 = v343;
  LODWORD(STACK[0x3AA8]) = v352;
  v353 = LODWORD(STACK[0x3C60]) ^ (((_DWORD)v341 << v339) + v336) ^ STACK[0x3B70];
  v354 = STACK[0x3A28] & 0xF8F8F8F8 ^ 0xF1F1F1F1;
  LODWORD(STACK[0x3878]) = v354;
  v355 = (unint64_t)(v314 & v354) >> v241;
  v356 = STACK[0x3A38] >> v241;
  v357 = v338 & v354;
  STACK[0x3728] = v357;
  LODWORD(v357) = (_DWORD)v357 << v339;
  LODWORD(STACK[0x3220]) = v357;
  STACK[0x3720] = v355;
  v358 = v357 + v355;
  v359 = v326;
  v360 = v356 | v326;
  LODWORD(STACK[0x3238]) = v360;
  v361 = v356;
  STACK[0x3250] = v356;
  LODWORD(STACK[0x3A50]) = v340 ^ v305 ^ v358 ^ v360;
  v362 = v332 | v333;
  v363 = v353 ^ (v332 | v333) ^ v340;
  STACK[0x32A0] = v342;
  LODWORD(STACK[0x3218]) = v342 + v304;
  v364 = LODWORD(STACK[0x32C0]) ^ (v342 + v304);
  if (v347)
    v365 = LODWORD(STACK[0x32C0]) ^ (v342 + v304);
  else
    v365 = v334;
  LODWORD(STACK[0x3A30]) = v365;
  if (v347)
    v366 = v334;
  else
    v366 = v321;
  LODWORD(STACK[0x3B70]) = v366;
  if (v347)
    v367 = v321;
  else
    v367 = STACK[0x32A8];
  if (v347)
    v364 = STACK[0x32A8];
  LODWORD(STACK[0x3A88]) = v364;
  v368 = LODWORD(STACK[0x3278]) ^ v360;
  v369 = LODWORD(STACK[0x3270]) ^ LODWORD(STACK[0x3990]);
  v370 = LODWORD(STACK[0x3B08]) ^ LODWORD(STACK[0x39A0]);
  if (v347)
    v371 = LODWORD(STACK[0x3278]) ^ v360;
  else
    v371 = LODWORD(STACK[0x3270]) ^ LODWORD(STACK[0x3990]);
  LODWORD(STACK[0x3A38]) = v371;
  v372 = STACK[0x3A60];
  if (v347)
    v368 = STACK[0x3A60];
  LODWORD(STACK[0x3C60]) = v368;
  if (v347)
    v373 = v369;
  else
    v373 = v370;
  LODWORD(STACK[0x3B08]) = v373;
  if (v347)
    v374 = v370;
  else
    v374 = v372;
  LODWORD(STACK[0x3A20]) = v374;
  if (v347)
    v375 = STACK[0x3C58];
  else
    v375 = STACK[0x3B80];
  if (v347)
    v376 = STACK[0x3B80];
  else
    v376 = STACK[0x3268];
  if (v347)
    v377 = STACK[0x3B88];
  else
    v377 = STACK[0x3C58];
  if (v347)
    v378 = STACK[0x3268];
  else
    v378 = STACK[0x3B88];
  LODWORD(STACK[0x3280]) = v361 ^ v359;
  v379 = LODWORD(STACK[0x3B00]) ^ v361 ^ v359;
  v380 = STACK[0x3B60];
  LODWORD(STACK[0x3298]) = STACK[0x3B60] | v332;
  v381 = LODWORD(STACK[0x3A58]) ^ (v380 | v332);
  v382 = STACK[0x3A80];
  if (v347)
    v383 = v379;
  else
    v383 = STACK[0x3A80];
  LODWORD(STACK[0x3B88]) = v383;
  if (v347)
    v384 = STACK[0x3A90];
  else
    v384 = v379;
  if (v347)
    v385 = v382;
  else
    v385 = v381;
  if (v347)
    v386 = v381;
  else
    v386 = STACK[0x3A90];
  LODWORD(STACK[0x3B80]) = v386;
  LODWORD(STACK[0x32C0]) = v342 + v380;
  v387 = LODWORD(STACK[0x3A48]) ^ (v342 + v380);
  v388 = STACK[0x3AA0];
  if (v347)
    v389 = STACK[0x3AA0];
  else
    v389 = LODWORD(STACK[0x3A48]) ^ (v342 + v380);
  LODWORD(STACK[0x3290]) = v389;
  v390 = STACK[0x3AE8];
  if (v347)
    v391 = v387;
  else
    v391 = STACK[0x3AE8];
  if (!v347)
    v390 = v345;
  LODWORD(STACK[0x3AE8]) = v390;
  if (!v347)
    v345 = v388;
  v392 = STACK[0x3AF0];
  v393 = STACK[0x3B40];
  if (v347)
    v394 = STACK[0x3AF0];
  else
    v394 = STACK[0x3B40];
  v395 = STACK[0x3B10];
  if (v347)
    v392 = STACK[0x3B10];
  LODWORD(STACK[0x32A8]) = v392;
  v396 = STACK[0x3B18];
  if (v347)
    v397 = STACK[0x3B18];
  else
    v397 = v395;
  if (v347)
    v396 = v393;
  LODWORD(STACK[0x3278]) = v396;
  v398 = v362;
  LODWORD(STACK[0x3950]) = v362;
  v399 = LODWORD(STACK[0x3C40]) ^ v362;
  if (v347)
    v400 = v346;
  else
    v400 = LODWORD(STACK[0x3C40]) ^ v362;
  v401 = STACK[0x3B28];
  if (v347)
    v402 = STACK[0x3B28];
  else
    v402 = v346;
  LODWORD(STACK[0x3270]) = v402;
  if (v347)
    v403 = STACK[0x3B30];
  else
    v403 = v401;
  if (!v347)
    v399 = STACK[0x3B30];
  LODWORD(STACK[0x3B28]) = v399;
  if (v347)
    v404 = STACK[0x3B50];
  else
    v404 = STACK[0x3C50];
  if (v347)
    v405 = STACK[0x3C50];
  else
    v405 = STACK[0x3B48];
  if (v347)
    v406 = STACK[0x3B48];
  else
    v406 = STACK[0x3AF8];
  if (v347)
    v407 = STACK[0x3AF8];
  else
    v407 = STACK[0x3B50];
  if (v347)
    v408 = STACK[0x3A78];
  else
    v408 = LODWORD(STACK[0x3C38]) ^ v398;
  if (v347)
    v409 = LODWORD(STACK[0x3C38]) ^ v398;
  else
    v409 = LODWORD(STACK[0x3C48]) ^ LODWORD(STACK[0x3958]);
  if (v347)
    v410 = STACK[0x3B20];
  else
    v410 = STACK[0x3A78];
  if (v347)
    v411 = LODWORD(STACK[0x3C48]) ^ LODWORD(STACK[0x3958]);
  else
    v411 = STACK[0x3B20];
  if (v347)
    v412 = STACK[0x3AE0];
  else
    v412 = STACK[0x3AD8];
  if (v347)
    v413 = v363;
  else
    v413 = STACK[0x3AE0];
  if (v347)
    v414 = STACK[0x3AD8];
  else
    v414 = STACK[0x3A50];
  if (v347)
    v363 = STACK[0x3A50];
  v415 = (STACK[0x3A98] & 2) == 0;
  v416 = STACK[0x3A70];
  v417 = STACK[0x3A68];
  if ((STACK[0x3A98] & 2) != 0)
    v418 = STACK[0x3A68];
  else
    v418 = STACK[0x3A70];
  LODWORD(STACK[0x3B48]) = v418;
  if (v415)
    v419 = v417;
  else
    v419 = v416;
  LODWORD(STACK[0x3A08]) = v419;
  v420 = STACK[0x3A30];
  if (v415)
    v421 = v367;
  else
    v421 = STACK[0x3A30];
  LODWORD(STACK[0x3A50]) = v421;
  if (v415)
    v367 = v420;
  LODWORD(STACK[0x3A68]) = v367;
  v422 = STACK[0x3AC0];
  v423 = STACK[0x3AA8];
  if (v415)
    v424 = STACK[0x3AC0];
  else
    v424 = STACK[0x3AA8];
  LODWORD(STACK[0x3B50]) = v424;
  if (v415)
    v425 = v423;
  else
    v425 = v422;
  LODWORD(STACK[0x3A30]) = v425;
  if (v415)
    v426 = v376;
  else
    v426 = v377;
  LODWORD(STACK[0x3A60]) = v426;
  if (!v415)
    v377 = v376;
  LODWORD(STACK[0x3B20]) = v377;
  v427 = STACK[0x3C60];
  v428 = STACK[0x3B08];
  if (v415)
    v429 = STACK[0x3B08];
  else
    v429 = STACK[0x3C60];
  LODWORD(STACK[0x3B38]) = v429;
  if (v415)
    v430 = v427;
  else
    v430 = v428;
  LODWORD(STACK[0x3C60]) = v430;
  if (v415)
    v431 = v378;
  else
    v431 = v375;
  LODWORD(STACK[0x3B18]) = v431;
  if (v415)
    v432 = v375;
  else
    v432 = v378;
  LODWORD(STACK[0x3A58]) = v432;
  if (v415)
    v433 = v384;
  else
    v433 = v385;
  LODWORD(STACK[0x3B00]) = v433;
  if (!v415)
    v385 = v384;
  LODWORD(STACK[0x3B40]) = v385;
  v434 = STACK[0x3A38];
  v435 = STACK[0x3A20];
  if (v415)
    v436 = STACK[0x3A38];
  else
    v436 = STACK[0x3A20];
  LODWORD(STACK[0x3A80]) = v436;
  if (v415)
    v437 = v435;
  else
    v437 = v434;
  LODWORD(STACK[0x3A78]) = v437;
  if (v415)
    v438 = v409;
  else
    v438 = v410;
  LODWORD(STACK[0x3C58]) = v438;
  if (v415)
    v439 = v410;
  else
    v439 = v409;
  LODWORD(STACK[0x3B10]) = v439;
  if (v415)
    v440 = v407;
  else
    v440 = v405;
  LODWORD(STACK[0x3AA0]) = v440;
  if (v415)
    v441 = v405;
  else
    v441 = v407;
  LODWORD(STACK[0x3AF0]) = v441;
  if (v415)
    v442 = v400;
  else
    v442 = v403;
  LODWORD(STACK[0x3C40]) = v442;
  if (v415)
    v443 = v403;
  else
    v443 = v400;
  LODWORD(STACK[0x3B08]) = v443;
  if (v415)
    v444 = v411;
  else
    v444 = v408;
  LODWORD(STACK[0x3A98]) = v444;
  if (v415)
    v445 = v408;
  else
    v445 = v411;
  LODWORD(STACK[0x3A90]) = v445;
  if (v415)
    v446 = v345;
  else
    v446 = v391;
  LODWORD(STACK[0x3AF8]) = v446;
  if (v415)
    v447 = v391;
  else
    v447 = v345;
  LODWORD(STACK[0x3AD8]) = v447;
  if (v415)
    v448 = v406;
  else
    v448 = v404;
  LODWORD(STACK[0x3A48]) = v448;
  if (v415)
    v449 = v404;
  else
    v449 = v406;
  LODWORD(STACK[0x3AA8]) = v449;
  if (v415)
    v450 = v397;
  else
    v450 = v394;
  LODWORD(STACK[0x3C48]) = v450;
  if (v415)
    v451 = v394;
  else
    v451 = v397;
  LODWORD(STACK[0x3B30]) = v451;
  v452 = STACK[0x3B70];
  v453 = STACK[0x3A88];
  if (v415)
    v454 = STACK[0x3A88];
  else
    v454 = STACK[0x3B70];
  LODWORD(STACK[0x3A70]) = v454;
  if (v415)
    v455 = v452;
  else
    v455 = v453;
  LODWORD(STACK[0x39C8]) = v455;
  v456 = STACK[0x3B88];
  v457 = STACK[0x3B80];
  if (v415)
    v458 = STACK[0x3B80];
  else
    v458 = STACK[0x3B88];
  LODWORD(STACK[0x3AE0]) = v458;
  if (v415)
    v459 = v456;
  else
    v459 = v457;
  LODWORD(STACK[0x3A20]) = v459;
  v460 = STACK[0x3290];
  v461 = STACK[0x3AE8];
  if (v415)
    v462 = STACK[0x3AE8];
  else
    v462 = STACK[0x3290];
  LODWORD(STACK[0x3A38]) = v462;
  if (v415)
    v463 = v460;
  else
    v463 = v461;
  LODWORD(STACK[0x3A88]) = v463;
  if (v415)
    v464 = v412;
  else
    v464 = v363;
  LODWORD(STACK[0x3AC0]) = v464;
  if (v415)
    v465 = v363;
  else
    v465 = v412;
  LODWORD(STACK[0x3B88]) = v465;
  v466 = STACK[0x3270];
  v467 = STACK[0x3B28];
  if (v415)
    v468 = STACK[0x3270];
  else
    v468 = STACK[0x3B28];
  LODWORD(STACK[0x3C50]) = v468;
  if (v415)
    v469 = v467;
  else
    v469 = v466;
  LODWORD(STACK[0x3AE8]) = v469;
  v470 = STACK[0x32A8];
  v471 = STACK[0x3278];
  if (v415)
    v472 = STACK[0x32A8];
  else
    v472 = STACK[0x3278];
  LODWORD(STACK[0x3C38]) = v472;
  if (v415)
    v473 = v471;
  else
    v473 = v470;
  LODWORD(STACK[0x3B28]) = v473;
  if (v415)
    v474 = v414;
  else
    v474 = v413;
  LODWORD(STACK[0x3B70]) = v474;
  if (v415)
    v475 = v413;
  else
    v475 = v414;
  LODWORD(STACK[0x3B80]) = v475;
  v476 = STACK[0x3A28] & 0x73ED7EA6 ^ 0xE7DAFD4D;
  v477 = STACK[0x3C28];
  v478 = STACK[0x3AB8];
  v479 = STACK[0x3C30];
  v480 = STACK[0x3B98];
  v481 = STACK[0x3A10] & 0x23ED7EA6 ^ 0x47DAFD4D;
  v482 = STACK[0x3520];
  v483 = 4 * STACK[0x3520];
  STACK[0x32A8] = v483;
  v484 = ((unint64_t)(v477 & v476) << v478) ^ ((v479 & v476) >> v480) ^ (((unint64_t)(v477 & v481) << v478) + ((v479 & v481) >> v480)) ^ *(_DWORD *)((char *)&STACK[0x40D0] + v483);
  v485 = STACK[0x3C18];
  v486 = (97 * (*(_BYTE *)(STACK[0x3C18] + LODWORD(STACK[0x35C8])) ^ 0xA2)) | (LODWORD(STACK[0x3548]) << 8);
  v487 = 4 * BYTE2(v482);
  STACK[0x3548] = v487;
  v488 = v484 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v487), 16);
  v489 = (v482 >> 22) & 0x3FC;
  STACK[0x35C8] = v489;
  v490 = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + v489), 8);
  v491 = STACK[0x39B0] ^ LODWORD(STACK[0x3560]);
  STACK[0x3290] = v491;
  LODWORD(STACK[0x3560]) = v488 ^ v490 ^ v491 ^ v486;
  LODWORD(STACK[0x3530]) = (((*(_BYTE *)(v485 + LODWORD(STACK[0x35B8])) ^ 0xE) >> 3) | (32 * (*(_BYTE *)(v485 + LODWORD(STACK[0x35B8])) ^ 0xE))) | (LODWORD(STACK[0x3530]) << 8);
  LODWORD(STACK[0x3278]) = (*(unsigned __int8 *)(v485 + LODWORD(STACK[0x35A0])) + 117) ^ 0x12 ^ ((*(unsigned __int8 *)(v485 + LODWORD(STACK[0x35A0]))
                                                                                                + 117) >> 2) & 0x12;
  LODWORD(STACK[0x35B8]) = (((*(_BYTE *)(v485 + LODWORD(STACK[0x3578])) + 117) ^ 0x12 ^ ((*(unsigned __int8 *)(v485 + LODWORD(STACK[0x3578])) + 117) >> 2) & 0x12)
                                           + 26) | (LODWORD(STACK[0x3510]) << 8);
  LODWORD(STACK[0x3570]) = (((*(_BYTE *)(v485 + LODWORD(STACK[0x3570])) - 71) ^ ((*(_BYTE *)(v485 + LODWORD(STACK[0x3570]))
                                                                                                 - 71) << 6) ^ (4 * (*(_BYTE *)(v485 + LODWORD(STACK[0x3570])) - 71)) ^ 0xFE)
                                           + 26) | (LODWORD(STACK[0x3500]) << 8);
  v492 = *(unsigned __int8 *)(v485 + LODWORD(STACK[0x3558])) - 71;
  v493 = *(unsigned __int8 *)(v485 + LODWORD(STACK[0x3550]));
  LODWORD(STACK[0x3520]) = v492 ^ (v492 << 6) ^ (4 * v492);
  LODWORD(STACK[0x35A0]) = (((v493 + 117) ^ 0x12 ^ ((v493 + 117) >> 2) & 0x12) + 26) | (LODWORD(STACK[0x34E0]) << 8);
  LODWORD(STACK[0x3578]) = (*(unsigned __int8 *)(v485 + LODWORD(STACK[0x3528])) + 117) ^ 0x12 ^ ((*(unsigned __int8 *)(v485 + LODWORD(STACK[0x3528]))
                                                                                                + 117) >> 2) & 0x12;
  v494 = (((*(_BYTE *)(v485 + LODWORD(STACK[0x3518])) + 117) ^ 0x12 ^ ((*(unsigned __int8 *)(v485 + LODWORD(STACK[0x3518]))
                                                                                       + 117) >> 2) & 0x12)
                         + 26) | (LODWORD(STACK[0x34D0]) << 8);
  LODWORD(v482) = *(unsigned __int8 *)(v485 + LODWORD(STACK[0x3538])) ^ 0x27;
  v495 = *(_BYTE *)(v485 + LODWORD(STACK[0x3508])) ^ 0x27;
  v496 = v485;
  v497 = *(_BYTE *)(v485 + LODWORD(STACK[0x34B0])) ^ 0x27;
  STACK[0x3528] = 97 * (*(unsigned __int8 *)(v485 + LODWORD(STACK[0x3590])) ^ 0x27u);
  STACK[0x3590] = (97 * v482);
  v498 = 97 * v495;
  v499 = STACK[0x3B90];
  v500 = (STACK[0x33D8] << LODWORD(STACK[0x3B90])) + STACK[0x3348];
  v501 = (STACK[0x33D0] << v478) ^ LODWORD(STACK[0x33C8]);
  v502 = STACK[0x3AC8];
  v503 = STACK[0x3B78];
  v504 = LODWORD(STACK[0x33E8]) | ((STACK[0x3AC8] & STACK[0x3498]) >> STACK[0x3B78]);
  v505 = LODWORD(STACK[0x33E8]) ^ LODWORD(STACK[0x3490]);
  v506 = (STACK[0x3328] << LODWORD(STACK[0x3B90])) + STACK[0x32F0];
  v507 = STACK[0x3320] + LODWORD(STACK[0x3330]);
  v508 = STACK[0x3288];
  LODWORD(STACK[0x3510]) = ((v477 & STACK[0x3940]) << LODWORD(STACK[0x3B90])) + LODWORD(STACK[0x3288]);
  LODWORD(STACK[0x3888]) = STACK[0x3888] | v508;
  LODWORD(STACK[0x3550]) = LODWORD(STACK[0x3248]) | (STACK[0x3240] >> v503);
  v509 = v477 & STACK[0x3978];
  STACK[0x3558] = v509;
  LODWORD(STACK[0x3940]) = ((_DWORD)v509 << v499) + STACK[0x3390];
  v510 = STACK[0x39F8];
  v511 = (LODWORD(STACK[0x3670]) ^ LODWORD(STACK[0x39F8]));
  v512 = (LODWORD(STACK[0x3660]) ^ LODWORD(STACK[0x39F8]));
  v513 = (LODWORD(STACK[0x3668]) ^ LODWORD(STACK[0x39F8]));
  v514 = (LODWORD(STACK[0x35C0]) ^ LODWORD(STACK[0x39F8]));
  v515 = (LODWORD(STACK[0x3648]) ^ LODWORD(STACK[0x39F8]));
  v516 = (LODWORD(STACK[0x3580]) ^ LODWORD(STACK[0x39F8]));
  v517 = (LODWORD(STACK[0x3598]) ^ LODWORD(STACK[0x39F8]));
  v518 = (v479 & STACK[0x3878]) >> v503;
  STACK[0x3660] = v518;
  LODWORD(STACK[0x35C0]) = (LODWORD(STACK[0x3220]) + v518) ^ v510;
  LOBYTE(v510) = v503;
  LODWORD(STACK[0x3978]) = (STACK[0x3228] << v478) | (STACK[0x3230] >> v503);
  LODWORD(STACK[0x3A18]) ^= LODWORD(STACK[0x3218]) ^ v500;
  LODWORD(v518) = STACK[0x39E0];
  LODWORD(v477) = STACK[0x3970];
  LODWORD(STACK[0x39F8]) = (LODWORD(STACK[0x39E0]) | LODWORD(STACK[0x3970])) ^ v504 ^ LODWORD(STACK[0x3910]);
  v519 = STACK[0x3260];
  LODWORD(STACK[0x3910]) = (STACK[0x3260] | v477) ^ v506 ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v511), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v511)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((v511 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(v511));
  v520 = *((_DWORD *)&STACK[0x44E0] + v498);
  v521 = STACK[0x34D8];
  v522 = *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x34D8]));
  LODWORD(v511) = STACK[0x3928];
  LODWORD(STACK[0x3518]) = v505 ^ LODWORD(STACK[0x3928]) ^ LODWORD(STACK[0x3688]);
  v523 = STACK[0x34A0] << v478;
  v524 = STACK[0x33B8] >> v480;
  STACK[0x3670] = v523;
  LODWORD(STACK[0x3688]) = v524;
  v525 = STACK[0x3250];
  LODWORD(STACK[0x3598]) = v523 ^ v524 ^ v511 ^ STACK[0x3250] ^ __ROR4__(v520, 8) ^ v522 ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ (97 * v497)), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v521 >> 22) & 0x3FC)), 24);
  v526 = STACK[0x39E8];
  LODWORD(STACK[0x3918]) ^= v501 ^ v518 ^ LODWORD(STACK[0x39E8]);
  LODWORD(STACK[0x3580]) = STACK[0x38C8] ^ STACK[0x39C0] ^ (v519 | v526) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ BYTE1(STACK[0x3708])), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ STACK[0x3708]), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3708] >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(STACK[0x3708]));
  v527 = *((_DWORD *)&STACK[0x44E0] + STACK[0x3920]);
  v528 = v525 + LODWORD(STACK[0x3938]);
  LODWORD(STACK[0x3538]) = v528;
  LODWORD(STACK[0x3938]) = v528 ^ v507 ^ __ROR4__(v527, 8) ^ *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x38F8]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x38F0]), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3900]), 24);
  LODWORD(STACK[0x3920]) = LODWORD(STACK[0x38A0]) ^ STACK[0x32D0] ^ v477 ^ STACK[0x39F0] ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ STACK[0x36F8]), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x36F8])), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x36F8] >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x36F8]));
  v529 = v525 + STACK[0x3B60];
  LODWORD(STACK[0x3900]) = STACK[0x36A8] ^ (STACK[0x32F8] >> v480) ^ v529 ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ ((*(_BYTE *)(v496 + LODWORD(STACK[0x35D0])) ^ 0xC3) + 85)), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + (LODWORD(STACK[0x3278]) + 26)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3568] >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x3568]));
  v530 = STACK[0x3380] << v478;
  v531 = STACK[0x34A8] >> v510;
  STACK[0x3668] = v531;
  STACK[0x3708] = v530;
  v532 = STACK[0x3930];
  LODWORD(v523) = *(_DWORD *)((char *)&STACK[0x44E0] + ((v512 >> 22) & 0x3FC));
  LODWORD(STACK[0x38F8]) = (v519 + STACK[0x3930]) ^ (v530 + v531) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3860]), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ STACK[0x3850]), 24) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ STACK[0x3730]), 16) ^ *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3840]);
  LODWORD(v530) = STACK[0x3378] << v499;
  LODWORD(v509) = STACK[0x3258];
  LODWORD(STACK[0x38F0]) = LODWORD(STACK[0x3258]) ^ (v530 + LODWORD(STACK[0x38A8])) ^ __ROR4__(v523, 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v512), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v512)), 8) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v512));
  v533 = STACK[0x3360] >> v510;
  LODWORD(STACK[0x3860]) = STACK[0x3898] ^ v533 ^ LODWORD(STACK[0x3238]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ STACK[0x3650]), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ BYTE1(STACK[0x3650])), 8) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(STACK[0x3650])) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3650] >> 22) & 0x3FC)), 24);
  v534 = STACK[0x36F0];
  LODWORD(v512) = *((_DWORD *)&STACK[0x44E0] + STACK[0x36F0]);
  v535 = STACK[0x39D8];
  LODWORD(v523) = (STACK[0x39D8] & STACK[0x33A8]) << v499;
  v536 = (unint64_t)(v502 & STACK[0x33A8]) >> v510;
  STACK[0x3730] = v536;
  LODWORD(STACK[0x36F8]) = v523;
  v537 = STACK[0x32B0];
  LODWORD(STACK[0x3850]) = (LODWORD(STACK[0x32B0]) | v477) ^ (v523 + v536) ^ __ROR4__(v512, 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v534)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v534 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v534));
  v538 = STACK[0x36E8];
  LODWORD(v512) = *((_DWORD *)&STACK[0x44E0] + STACK[0x36E8]);
  v539 = v479 & STACK[0x3998];
  STACK[0x3648] = v539;
  LODWORD(v539) = v539 >> v480;
  LODWORD(STACK[0x3650]) = v539;
  LODWORD(STACK[0x3998]) = LODWORD(STACK[0x3950]) ^ (v530 | v539) ^ __ROR4__(v512, 16) ^ *((_DWORD *)&STACK[0x44E0]
                                                                                         + BYTE2(v538)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v538 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v538)), 8);
  LODWORD(v512) = *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3718]);
  STACK[0x3718] = v533;
  LODWORD(STACK[0x3858]) = LODWORD(STACK[0x3870]) ^ v533 ^ v512 ^ v509 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ STACK[0x3858]), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ STACK[0x3848]), 16) ^ v494;
  LODWORD(STACK[0x3848]) = (STACK[0x3370] << v478) ^ LODWORD(STACK[0x38B8]) ^ LODWORD(STACK[0x3280]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x35F8] >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x35F8])), 8) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x35F8])) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + STACK[0x35F8]), 16);
  v540 = STACK[0x3C28];
  v541 = STACK[0x3C28] & ~LODWORD(STACK[0x3A10]);
  v542 = v502 & ~LODWORD(STACK[0x3A10]);
  STACK[0x36E8] = v541;
  v543 = v541 << v478;
  STACK[0x35D0] = v543;
  LODWORD(STACK[0x3970]) = (v519 + v477) ^ (v543 + (v542 >> v510)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((v513 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v513)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ v513), 16) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(v513));
  LODWORD(v479) = STACK[0x3928];
  LODWORD(v509) = (v525 + LODWORD(STACK[0x3928])) ^ (LODWORD(STACK[0x38C0]) + LODWORD(STACK[0x3340])) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x39A8])), 8);
  v544 = v496;
  LODWORD(STACK[0x39A8]) = v509 ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x39A8])) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + ((*(_BYTE *)(v496 + LODWORD(STACK[0x35E0])) ^ 0xC3) + 85)), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x39A8] >> 22) & 0x3FC)), 24);
  v545 = STACK[0x32E0] << v478;
  STACK[0x35F8] = v545;
  LODWORD(STACK[0x3840]) = v545 ^ STACK[0x32D8] ^ LODWORD(STACK[0x3298]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ v514), 16) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(v514)) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v514)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v514 >> 22) & 0x3FC)), 24);
  LODWORD(v545) = *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x38D0]);
  LODWORD(v542) = v542 >> v480;
  LODWORD(STACK[0x35E0]) = v542;
  LODWORD(v542) = STACK[0x33B0] ^ v542;
  LODWORD(STACK[0x36F0]) = v542;
  LODWORD(STACK[0x3908]) = v529 ^ v542 ^ v545 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3908]), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x38E0]), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x38D8]), 24);
  LODWORD(v512) = STACK[0x33A0] << v499;
  v546 = STACK[0x3890];
  LODWORD(STACK[0x38E0]) = v512 ^ STACK[0x3890] ^ (v537 | v477) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ STACK[0x3638]), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((STACK[0x3638] >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(STACK[0x3638])) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x3638])), 8);
  v547 = STACK[0x3618];
  LODWORD(v545) = *((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x3618]));
  LODWORD(STACK[0x3638]) = v512;
  LODWORD(STACK[0x38D8]) = (v532 | v537) ^ (v512 | LODWORD(STACK[0x3338])) ^ __ROR4__(v545, 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v547 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v547)) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v547), 16);
  LODWORD(STACK[0x38E8]) = LODWORD(STACK[0x39D0]) ^ (((unint64_t)(v535 & STACK[0x33C0]) << v478) | v546) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + STACK[0x3710]), 8) ^ LODWORD(STACK[0x3530]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + LODWORD(STACK[0x38E8])), 16) ^ *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3700]);
  LODWORD(STACK[0x3990]) ^= LODWORD(STACK[0x3888]) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v515)) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v515)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + v515), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v515 >> 22) & 0x3FC)), 24);
  LODWORD(v533) = STACK[0x39E0];
  LODWORD(STACK[0x38D0]) = v532 ^ LODWORD(STACK[0x39E0]) ^ LODWORD(STACK[0x3510]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ BYTE1(STACK[0x35D8])), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ STACK[0x35D8]), 16) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x35D8])) ^ LODWORD(STACK[0x35B8]);
  LODWORD(v546) = v519 ^ *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3680]);
  LODWORD(v536) = v535 & LODWORD(STACK[0x34C0]);
  v548 = (unint64_t)(v502 & STACK[0x34C0]) >> v510;
  STACK[0x3618] = v548;
  LODWORD(STACK[0x35D8]) = (_DWORD)v536 << v499;
  LODWORD(v543) = STACK[0x39E8];
  LODWORD(STACK[0x3678]) = LODWORD(STACK[0x39E8]) ^ (((_DWORD)v536 << v499) + v548) ^ v546 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3678]), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + STACK[0x3528]), 16) ^ LODWORD(STACK[0x3570]);
  LODWORD(STACK[0x35B8]) = LODWORD(STACK[0x3538]) ^ LODWORD(STACK[0x3948]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ STACK[0x3610]), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ BYTE1(STACK[0x3610])), 8) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(STACK[0x3610])) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3610] >> 22) & 0x3FC)), 24);
  LODWORD(v546) = *((_DWORD *)&STACK[0x44E0] + BYTE1(v516));
  v549 = *((_DWORD *)&STACK[0x44E0] + v516);
  v550 = STACK[0x3C30];
  v551 = STACK[0x3C30] & STACK[0x32E8];
  STACK[0x3710] = v551;
  LODWORD(v515) = STACK[0x32C0];
  LODWORD(STACK[0x3570]) = LODWORD(STACK[0x3868]) ^ (v551 >> v510) ^ LODWORD(STACK[0x32C0]) ^ __ROR4__(v546, 8) ^ __ROR4__(v549, 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((v516 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(v516));
  v552 = LODWORD(STACK[0x3518]) ^ STACK[0x32A0];
  LODWORD(v546) = STACK[0x32A0] + v479;
  v553 = v540 & STACK[0x3368];
  STACK[0x3700] = v553;
  LODWORD(STACK[0x3928]) = v546 ^ ((v553 << v478) | LODWORD(STACK[0x3310])) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ BYTE1(STACK[0x3588])), 8) ^ *((_DWORD *)&STACK[0x44E0]+ ((LODWORD(STACK[0x3520]) ^ 0xFE) + 26)) ^ LODWORD(STACK[0x35A0]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + STACK[0x3588]), 16);
  LODWORD(v547) = STACK[0x3388];
  LODWORD(STACK[0x3628]) = (v532 | v537) ^ ((v553 << v478) | LODWORD(STACK[0x3388])) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3628]), 24) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3620]), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3658]), 8) ^ *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3630]);
  LODWORD(STACK[0x3620]) = STACK[0x3358] ^ v547 ^ (v537 | v543) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ BYTE1(STACK[0x3600])), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((STACK[0x3600] >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(STACK[0x3600])) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + STACK[0x3600]), 16);
  v554 = v535 & STACK[0x3980];
  STACK[0x3658] = v554;
  LODWORD(v554) = (_DWORD)v554 << v499;
  LODWORD(STACK[0x3630]) = v554;
  LODWORD(v477) = v532 ^ (v554 | STACK[0x3350]) ^ STACK[0x39F0] ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((v517 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ v517), 16);
  v555 = STACK[0x39B0];
  LODWORD(v538) = *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x39B0]));
  LODWORD(STACK[0x39F0]) = v477 ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(v517)), 8) ^ *((_DWORD *)&STACK[0x44E0]
                                                                                           + BYTE2(v517));
  LODWORD(v512) = STACK[0x3960];
  v556 = (STACK[0x3B60] + LODWORD(STACK[0x3960])) ^ LODWORD(STACK[0x3550]) ^ v538 ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ BYTE1(v555)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ v555), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + ((*(_BYTE *)(v544 + LODWORD(STACK[0x35F0])) ^ 0xC3) + 85)), 24);
  v557 = v540 & STACK[0x3988];
  LODWORD(STACK[0x39B0]) = (v557 << v478) ^ ((v502 & STACK[0x3988]) >> v480) ^ LODWORD(STACK[0x34B8]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x3608])), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + STACK[0x3608]), 16) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x3608])) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + ((STACK[0x3608] >> 22) & 0x3FC)), 24);
  LODWORD(v547) = STACK[0x32C8];
  v558 = v535 & STACK[0x32C8];
  LODWORD(v540) = LODWORD(STACK[0x39A0]) ^ (v558 << v478) ^ STACK[0x3690] ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ BYTE1(STACK[0x3290])), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ ((STACK[0x3290] >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x44E0]+ BYTE2(STACK[0x3290])) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + STACK[0x3290]), 16);
  LODWORD(STACK[0x3610]) = (_DWORD)v558 << v499;
  LODWORD(STACK[0x39A0]) = ((_DWORD)v558 << v499) ^ ((v550 & v547) >> v480) ^ LODWORD(STACK[0x32B8]) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + STACK[0x35A8]), 16) ^ *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x35A8])) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + (LODWORD(STACK[0x3578]) + 26)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0] + BYTE1(STACK[0x35A8])), 8);
  v559 = STACK[0x35B0];
  v560 = *((_DWORD *)&STACK[0x44E0] + BYTE2(STACK[0x35B0]));
  v561 = STACK[0x3558] << v478;
  STACK[0x3680] = v561;
  LODWORD(STACK[0x39E8]) = v561 ^ STACK[0x3308] ^ v560 ^ (v543 + v533) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ v559), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ STACK[0x3590]), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x44E0]+ BYTE1(v559)), 8);
  LODWORD(v514) = STACK[0x3300];
  v562 = STACK[0x3880];
  LODWORD(v519) = LODWORD(STACK[0x35E8]) ^ LODWORD(STACK[0x3A40]) ^ LODWORD(STACK[0x3560]);
  v563 = STACK[0x3880] ^ LODWORD(STACK[0x3300]) ^ LODWORD(STACK[0x3958]) ^ LODWORD(STACK[0x3560]);
  v564 = ((_DWORD)v557 << v499) ^ LODWORD(STACK[0x3398]) ^ LODWORD(STACK[0x3318]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0]+ STACK[0x36B8]), 24) ^ *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x36D8]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x36C0]), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x36E0]), 8);
  LODWORD(v479) = v519 ^ v559;
  LODWORD(STACK[0x39E0]) = LODWORD(STACK[0x35C0]) ^ v532 ^ v533 ^ v519;
  v565 = LODWORD(STACK[0x3950]) ^ LODWORD(STACK[0x3940]) ^ HIWORD(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x32A8])) ^ *(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3548]) ^ (*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x32A8]) << 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x3640]), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x44E0] + STACK[0x35C8]), 24);
  v566 = STACK[0x38E0];
  v567 = v540;
  LODWORD(v559) = (((v540 - LODWORD(STACK[0x38E0])) ^ (&STACK[0x4000] + 208))
                 - &STACK[0x44E0]) ^ 0xAE1E352B;
  v568 = LODWORD(STACK[0x3A00]) ^ (v562 | v514) ^ v512 ^ STACK[0x33E0] ^ v479;
  v569 = v515 ^ LODWORD(STACK[0x3978]) ^ LODWORD(STACK[0x36D0]) ^ v479;
  LODWORD(STACK[0x3B60]) = v559 + v563;
  v570 = (((_DWORD)v559 + v563) & 1) == 0;
  v571 = STACK[0x3920];
  v572 = STACK[0x38F8];
  if ((((_DWORD)v559 + v563) & 1) != 0)
    v573 = STACK[0x3920];
  else
    v573 = STACK[0x38F8];
  LODWORD(STACK[0x3980]) = v573;
  v574 = STACK[0x3900];
  if (!v570)
    v571 = STACK[0x3900];
  LODWORD(STACK[0x3A00]) = v571;
  v575 = STACK[0x3850];
  if (v570)
    v576 = STACK[0x3850];
  else
    v576 = v572;
  if (v570)
    v575 = v574;
  LODWORD(STACK[0x3978]) = v575;
  v577 = STACK[0x3918];
  if (v570)
    v578 = STACK[0x3918];
  else
    v578 = v552;
  LODWORD(STACK[0x3988]) = v578;
  if (v570)
    v579 = v552;
  else
    v579 = STACK[0x39F8];
  v580 = STACK[0x3A18];
  if (v570)
    v581 = STACK[0x3A18];
  else
    v581 = v577;
  if (v570)
    v580 = STACK[0x39F8];
  LODWORD(STACK[0x3930]) = v580;
  if (v570)
    v582 = STACK[0x3910];
  else
    v582 = STACK[0x3598];
  if (v570)
    v583 = STACK[0x3580];
  else
    v583 = STACK[0x3910];
  if (v570)
    v584 = STACK[0x3598];
  else
    v584 = STACK[0x3938];
  if (v570)
    v585 = STACK[0x3938];
  else
    v585 = STACK[0x3580];
  v586 = STACK[0x38F0];
  v587 = STACK[0x3998];
  if (v570)
    v588 = STACK[0x3998];
  else
    v588 = STACK[0x38F0];
  LODWORD(STACK[0x3A18]) = v588;
  v589 = STACK[0x3858];
  if (v570)
    v590 = STACK[0x3858];
  else
    v590 = v587;
  v591 = STACK[0x3860];
  if (v570)
    v589 = STACK[0x3860];
  LODWORD(STACK[0x3950]) = v589;
  if (v570)
    v592 = v586;
  else
    v592 = v591;
  if (v570)
    v593 = STACK[0x39A8];
  else
    v593 = STACK[0x3908];
  if (v570)
    v594 = STACK[0x3970];
  else
    v594 = STACK[0x39A8];
  if (v570)
    v595 = STACK[0x3848];
  else
    v595 = STACK[0x3970];
  if (v570)
    v596 = STACK[0x3908];
  else
    v596 = STACK[0x3848];
  v597 = STACK[0x38E8];
  if (v570)
    v598 = STACK[0x38E8];
  else
    v598 = v566;
  v599 = STACK[0x3840];
  if (v570)
    v600 = v566;
  else
    v600 = STACK[0x3840];
  LODWORD(STACK[0x3860]) = v600;
  if (v570)
    v601 = v599;
  else
    v601 = STACK[0x38D8];
  if (v570)
    v602 = STACK[0x38D8];
  else
    v602 = v597;
  v603 = STACK[0x3990];
  v604 = STACK[0x38D0];
  if (v570)
    v605 = STACK[0x38D0];
  else
    v605 = STACK[0x3990];
  LODWORD(STACK[0x3970]) = v605;
  v606 = STACK[0x35B8];
  if (!v570)
    v603 = STACK[0x35B8];
  LODWORD(STACK[0x3920]) = v603;
  v607 = STACK[0x3678];
  if (!v570)
    v606 = STACK[0x3678];
  LODWORD(STACK[0x38F8]) = v606;
  if (!v570)
    v607 = v604;
  LODWORD(STACK[0x38D0]) = v607;
  v608 = STACK[0x3570];
  v609 = STACK[0x3620];
  if (v570)
    v610 = STACK[0x3570];
  else
    v610 = STACK[0x3620];
  v611 = STACK[0x3928];
  if (v570)
    v608 = STACK[0x3928];
  LODWORD(STACK[0x3840]) = v608;
  if (v570)
    v612 = STACK[0x3628];
  else
    v612 = v611;
  if (v570)
    v613 = v609;
  else
    v613 = STACK[0x3628];
  LODWORD(STACK[0x36D8]) = v613;
  v614 = STACK[0x39F0];
  if (v570)
    v615 = v556;
  else
    v615 = STACK[0x39F0];
  v616 = v564;
  if (v570)
  {
    v556 = v564;
    v616 = STACK[0x39B0];
  }
  else
  {
    v614 = STACK[0x39B0];
  }
  v617 = STACK[0x39E0];
  if (v570)
    v618 = STACK[0x39E0];
  else
    v618 = v568;
  LODWORD(STACK[0x36E0]) = v618;
  if (v570)
    v617 = v563;
  LODWORD(STACK[0x36D0]) = v617;
  if (v570)
    v563 = v569;
  else
    v568 = v569;
  if (v570)
    v619 = STACK[0x39E8];
  else
    v619 = v565;
  v620 = v567;
  if (!v570)
    v565 = v567;
  v621 = STACK[0x39A0];
  if (!v570)
  {
    v620 = STACK[0x39A0];
    v621 = STACK[0x39E8];
  }
  v622 = (STACK[0x3B60] & 2) == 0;
  if ((STACK[0x3B60] & 2) != 0)
    v623 = v581;
  else
    v623 = v579;
  LODWORD(STACK[0x39A8]) = v623;
  if (!v622)
    v581 = v579;
  LODWORD(STACK[0x39A0]) = v581;
  if (v622)
    v624 = v583;
  else
    v624 = v584;
  LODWORD(STACK[0x3990]) = v624;
  if (!v622)
    v584 = v583;
  LODWORD(STACK[0x3958]) = v584;
  v625 = STACK[0x3A00];
  if (v622)
    v626 = v576;
  else
    v626 = STACK[0x3A00];
  LODWORD(STACK[0x3998]) = v626;
  if (v622)
    v627 = v625;
  else
    v627 = v576;
  LODWORD(STACK[0x3A00]) = v627;
  v628 = STACK[0x3980];
  v629 = STACK[0x3978];
  if (v622)
    v630 = STACK[0x3980];
  else
    v630 = STACK[0x3978];
  LODWORD(STACK[0x3910]) = v630;
  if (v622)
    v631 = v629;
  else
    v631 = v628;
  LODWORD(STACK[0x3960]) = v631;
  if (v622)
    v632 = v582;
  else
    v632 = v585;
  LODWORD(STACK[0x38E8]) = v632;
  if (v622)
    v633 = v585;
  else
    v633 = v582;
  LODWORD(STACK[0x39F8]) = v633;
  v634 = STACK[0x3988];
  v635 = STACK[0x3930];
  if (v622)
    v636 = STACK[0x3930];
  else
    v636 = STACK[0x3988];
  LODWORD(STACK[0x3940]) = v636;
  if (v622)
    v637 = v634;
  else
    v637 = v635;
  LODWORD(STACK[0x3930]) = v637;
  if (v622)
    v638 = v595;
  else
    v638 = v593;
  LODWORD(STACK[0x38F0]) = v638;
  if (v622)
    v639 = v593;
  else
    v639 = v595;
  LODWORD(STACK[0x3918]) = v639;
  if (v622)
    v640 = v592;
  else
    v640 = v590;
  LODWORD(STACK[0x3908]) = v640;
  if (v622)
    v641 = v590;
  else
    v641 = v592;
  LODWORD(STACK[0x39F0]) = v641;
  if (v622)
    v642 = v601;
  else
    v642 = v598;
  LODWORD(STACK[0x3938]) = v642;
  if (v622)
    v643 = v598;
  else
    v643 = v601;
  LODWORD(STACK[0x3928]) = v643;
  if (v622)
    v644 = v596;
  else
    v644 = v594;
  LODWORD(STACK[0x38E0]) = v644;
  if (v622)
    v645 = v594;
  else
    v645 = v596;
  LODWORD(STACK[0x3900]) = v645;
  v646 = STACK[0x3A18];
  v647 = STACK[0x3950];
  if (v622)
    v648 = STACK[0x3A18];
  else
    v648 = STACK[0x3950];
  LODWORD(STACK[0x3978]) = v648;
  if (v622)
    v649 = v647;
  else
    v649 = v646;
  LODWORD(STACK[0x38D8]) = v649;
  if (v622)
    v650 = v612;
  else
    v650 = v610;
  LODWORD(STACK[0x3620]) = v650;
  if (v622)
    v651 = v610;
  else
    v651 = v612;
  LODWORD(STACK[0x3848]) = v651;
  v652 = STACK[0x3860];
  if (v622)
    v653 = v602;
  else
    v653 = STACK[0x3860];
  LODWORD(STACK[0x3858]) = v653;
  if (v622)
    v654 = v652;
  else
    v654 = v602;
  LODWORD(STACK[0x3850]) = v654;
  if (v622)
    v655 = v616;
  else
    v655 = v615;
  LODWORD(STACK[0x39E8]) = v655;
  if (v622)
    v656 = v615;
  else
    v656 = v616;
  LODWORD(STACK[0x3988]) = v656;
  if (v622)
    v657 = v556;
  else
    v657 = v614;
  LODWORD(STACK[0x39E0]) = v657;
  if (v622)
    v658 = v614;
  else
    v658 = v556;
  LODWORD(STACK[0x3980]) = v658;
  v659 = STACK[0x3970];
  v660 = STACK[0x38F8];
  if (v622)
    v661 = STACK[0x3970];
  else
    v661 = STACK[0x38F8];
  LODWORD(STACK[0x3950]) = v661;
  if (v622)
    v662 = v660;
  else
    v662 = v659;
  LODWORD(STACK[0x3970]) = v662;
  v663 = STACK[0x3920];
  v664 = STACK[0x38D0];
  if (v622)
    v665 = STACK[0x3920];
  else
    v665 = STACK[0x38D0];
  LODWORD(STACK[0x38F8]) = v665;
  if (v622)
    v666 = v664;
  else
    v666 = v663;
  LODWORD(STACK[0x38D0]) = v666;
  v667 = STACK[0x3840];
  v668 = STACK[0x36D8];
  if (v622)
    v669 = STACK[0x3840];
  else
    v669 = STACK[0x36D8];
  LODWORD(STACK[0x3860]) = v669;
  if (v622)
    v670 = v668;
  else
    v670 = v667;
  LODWORD(STACK[0x3840]) = v670;
  if (v622)
    v671 = v619;
  else
    v671 = v620;
  LODWORD(STACK[0x3920]) = v671;
  if (v622)
    v672 = v620;
  else
    v672 = v619;
  LODWORD(STACK[0x3600]) = v672;
  v673 = STACK[0x36E0];
  if (v622)
    v674 = STACK[0x36E0];
  else
    v674 = v563;
  LODWORD(STACK[0x39B0]) = v674;
  if (v622)
    v675 = v563;
  else
    v675 = v673;
  LODWORD(STACK[0x36E0]) = v675;
  v676 = STACK[0x36D0];
  if (v622)
    v677 = STACK[0x36D0];
  else
    v677 = v568;
  LODWORD(STACK[0x35E8]) = v677;
  if (v622)
    v678 = v568;
  else
    v678 = v676;
  LODWORD(STACK[0x35F0]) = v678;
  if (v622)
    v679 = v565;
  else
    v679 = v621;
  LODWORD(STACK[0x3608]) = v679;
  if (v622)
    v680 = v621;
  else
    v680 = v565;
  LODWORD(STACK[0x3A18]) = v680;
  LODWORD(STACK[0x36C0]) = LODWORD(STACK[0x39C8]) ^ LODWORD(STACK[0x3A50]) ^ LODWORD(STACK[0x3A70]) ^ LODWORD(STACK[0x3A68]) ^ LODWORD(STACK[0x3A08]) ^ LODWORD(STACK[0x3A30]) ^ LODWORD(STACK[0x3B48]) ^ LODWORD(STACK[0x3B50]) ^ LODWORD(STACK[0x3C60]) ^ LODWORD(STACK[0x3A80]) ^ LODWORD(STACK[0x3B38]) ^ LODWORD(STACK[0x3A78]) ^ LODWORD(STACK[0x3A20]) ^ LODWORD(STACK[0x3B40]) ^ LODWORD(STACK[0x3AE0]) ^ LODWORD(STACK[0x3B00]) ^ LODWORD(STACK[0x3AF8]) ^ LODWORD(STACK[0x3AD8]) ^ LODWORD(STACK[0x3A88]) ^ LODWORD(STACK[0x3A38]) ^ LODWORD(STACK[0x3A90]) ^ LODWORD(STACK[0x3C58]) ^ LODWORD(STACK[0x3A98]) ^ LODWORD(STACK[0x3B10]) ^ LODWORD(STACK[0x3AA0]) ^ LODWORD(STACK[0x3AA8]) ^ LODWORD(STACK[0x3AF0]) ^ LODWORD(STACK[0x3A48]) ^ LODWORD(STACK[0x3C48]) ^ LODWORD(STACK[0x3C38]) ^ LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3B28]) ^ LODWORD(STACK[0x3C40]) ^ LODWORD(STACK[0x3AE8]) ^ LODWORD(STACK[0x3B08]) ^ LODWORD(STACK[0x3C50]) ^ LODWORD(STACK[0x3AC0]) ^ LODWORD(STACK[0x3B70]) ^ LODWORD(STACK[0x3B88]) ^ LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x3A60]) ^ LODWORD(STACK[0x3B18]) ^ LODWORD(STACK[0x3B20]) ^ LODWORD(STACK[0x3A58]);
  LODWORD(STACK[0x3678]) = LODWORD(STACK[0x36C0]) ^ 0x91A77DF4;
  LODWORD(STACK[0x36D8]) = LODWORD(STACK[0x3998])
                         - (LODWORD(STACK[0x3AE8])
                          + LODWORD(STACK[0x3B38])
                          + LODWORD(STACK[0x3B10])
                          + LODWORD(STACK[0x3600]));
  LODWORD(STACK[0x36D0]) = LODWORD(STACK[0x3B80])
                         + LODWORD(STACK[0x3AF8])
                         + LODWORD(STACK[0x3A20])
                         - LODWORD(STACK[0x3B48])
                         - LODWORD(STACK[0x3608])
                         - LODWORD(STACK[0x3970]);
  v681 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * SLODWORD(STACK[0x3C78])) - 8);
  LODWORD(STACK[0x3640]) = LODWORD(STACK[0x39F8]) + LODWORD(STACK[0x3A78]);
  return v681();
}

uint64_t sub_1006EBB94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;

  v5 = STACK[0x3C68];
  v6 = (_BYTE *)(a1
               + (4647 * ((*(_BYTE *)(v4 + STACK[0x3C68]) - v5 + ((_BYTE)v5 << 6) - 99) ^ 0x36u)
                + 17937420)
               % (LODWORD(STACK[0x3C78]) - 2210));
  *(_BYTE *)(a2 + v5) = ((*v6 ^ 0xE) >> 3) | (32 * (*v6 ^ 0xE));
  STACK[0x3C68] = v5 + 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (((v2 == v5) * v3) ^ LODWORD(STACK[0x3C78]))) - 8))();
}

uint64_t sub_1006EBC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;

  LODWORD(STACK[0x3C78]) = v6 ^ LODWORD(STACK[0x3B50]);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (a6 - 2335)) - 8))();
}

uint64_t sub_1006EBCC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  int v8;
  uint64_t v9;

  *(_BYTE *)(a2 + a5) = *(_BYTE *)(v9 + a5) - a5 + ((_BYTE)a5 << 6) + 46;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (((8 * (a5 + 1 >= a8)) | (16 * (a5 + 1 >= a8))) ^ v8))
                            - 8))();
}

uint64_t sub_1006EBD34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W6>, int a4@<W8>)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  LODWORD(STACK[0x36E0]) = LODWORD(STACK[0x3C48]) ^ LODWORD(STACK[0x3C50]) ^ LODWORD(STACK[0x3C38]) ^ LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3B28]) ^ LODWORD(STACK[0x3C40]) ^ LODWORD(STACK[0x3AE8]) ^ LODWORD(STACK[0x3B08]) ^ LODWORD(STACK[0x3AC0]) ^ LODWORD(STACK[0x3B70]) ^ LODWORD(STACK[0x3B88]) ^ LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x3920]) ^ LODWORD(STACK[0x3988]) ^ LODWORD(STACK[0x3980]) ^ LODWORD(STACK[0x39E8]) ^ LODWORD(STACK[0x39E0]) ^ v9 ^ LODWORD(STACK[0x3A18]) ^ v8 ^ v7 ^ LODWORD(STACK[0x39B0]) ^ a3 ^ v6 ^ v10;
  v11 = a4
      + 159799353
      + ((a4 + 159799353) >> 11)
      + ((a4 + 159799353 + ((a4 + 159799353) >> 11)) >> 6);
  v12 = v11 + 1128188817 + ((v11 + 1128188817) >> 13) + ((v11 + 1128188817 + ((v11 + 1128188817) >> 13)) >> 6);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(STACK[0x3C70] + 8 * v5))(a1, 0, v4 ^ 0x10B50F5C ^ v11 ^ v12 ^ ((v12 ^ 0x7D907BD7)+ ((v12 ^ 0x7D907BD7) >> 10)+ (((v12 ^ 0x7D907BD7) + ((v12 ^ 0x7D907BD7) >> 10)) >> 8)), a2, (v5 - 594620915) & 0x23715FFB ^ 0x6DC5DF6A, 28609);
}

uint64_t sub_1006EBEBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W4>, int a5@<W5>, uint64_t a6@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v9 = *(unsigned __int8 *)(v7 + a2) * a4;
  v10 = (v9 ^ v8)
      + a2
      - (((v9 ^ v8) + (_DWORD)a2 + (((v9 ^ v8) + a2) >> 16)) >> 8)
      + (((v9 ^ v8) + a2) >> 16);
  v11 = (v10 ^ v9) + a2;
  v12 = a6 == a2;
  v13 = a2 + 1;
  v14 = v10 ^ a3 ^ ((_DWORD)v11 - ((v11 + WORD1(v11)) >> 8) + (v11 >> 16));
  v15 = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(STACK[0x3C70] + 8 * ((v15 * a5) ^ v6)))(a1, v13, v14);
}

uint64_t sub_1006EBF20()
{
  unsigned int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * v0) - ((11530 * (v0 ^ 0x5A63)) ^ 0x5A18)))();
}

uint64_t sub_1006EBF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W4>, int a5@<W5>, unsigned int a6@<W8>)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  v11 = *(unsigned __int8 *)(v9 + v6) * a5;
  v12 = v6 + v7 + (v11 ^ a6) - (((v11 ^ a6) + v8 + (((v11 ^ a6) + v8) >> 16)) >> 8) + (((v11 ^ a6) + v8) >> 16);
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(STACK[0x3C70]
                                                                       + 8 * (((v6 + a2 != 14) * v10) ^ a4))
                                                           - 12))(a1, a2 + 1, v12 ^ a3 ^ ((_DWORD)v6+ v7+ (v12 ^ v11)- (((v12 ^ v11) + v8 + (((v12 ^ v11) + v8) >> 16)) >> 8)+ (((v12 ^ v11) + v8) >> 16)));
}

uint64_t sub_1006EC018(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t (*v23)(void);

  v15 = (v7 + v13 - ((v13 + v14 + ((v13 + v14) >> 16)) >> 8) + ((v13 + v14) >> 16) + a2) ^ 0xDC43FA82;
  v16 = v15 + (v15 >> 12) + ((v15 + (v15 >> 12)) >> 1);
  LODWORD(STACK[0x3C68]) = v16;
  v17 = (v16 ^ 0xEEF1EF74) - ((v16 ^ 0xEEF1EF74) >> 14) - (((v16 ^ 0xEEF1EF74) - ((v16 ^ 0xEEF1EF74) >> 14)) >> 2);
  LODWORD(STACK[0x3B58]) = v17;
  v18 = (v17 ^ 0x6D797D25) - ((v17 ^ 0x6D797D25) >> 11);
  LODWORD(STACK[0x36B8]) = v18;
  LODWORD(STACK[0x3628]) = v18 >> 2;
  v19 = STACK[0x3A58];
  v20 = LODWORD(STACK[0x3B00]) ^ LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x39C8]) ^ LODWORD(STACK[0x3A50]) ^ LODWORD(STACK[0x3A70]) ^ LODWORD(STACK[0x3A68]) ^ LODWORD(STACK[0x3A08]) ^ LODWORD(STACK[0x3A30]) ^ LODWORD(STACK[0x3B48]) ^ LODWORD(STACK[0x3B50]) ^ LODWORD(STACK[0x3C60]) ^ LODWORD(STACK[0x3A80]) ^ LODWORD(STACK[0x3B38]) ^ LODWORD(STACK[0x3A78]) ^ LODWORD(STACK[0x3A20]) ^ LODWORD(STACK[0x3B40]) ^ LODWORD(STACK[0x3AE0]) ^ LODWORD(STACK[0x3AF8]) ^ LODWORD(STACK[0x3A88]) ^ LODWORD(STACK[0x3AD8]) ^ LODWORD(STACK[0x3A38]) ^ LODWORD(STACK[0x3A90]) ^ LODWORD(STACK[0x3C58]) ^ LODWORD(STACK[0x3A98]) ^ LODWORD(STACK[0x3B10]) ^ LODWORD(STACK[0x3AA0]) ^ LODWORD(STACK[0x3AA8]) ^ LODWORD(STACK[0x3AF0]) ^ LODWORD(STACK[0x3A48]) ^ LODWORD(STACK[0x3C48]) ^ LODWORD(STACK[0x3C38]) ^ LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3B28]) ^ LODWORD(STACK[0x3C40]) ^ LODWORD(STACK[0x3AE8]) ^ LODWORD(STACK[0x3B08]) ^ LODWORD(STACK[0x3C50]) ^ LODWORD(STACK[0x3AC0]) ^ LODWORD(STACK[0x3B70]) ^ LODWORD(STACK[0x3B88]) ^ LODWORD(STACK[0x3A60]) ^ LODWORD(STACK[0x3B20]) ^ LODWORD(STACK[0x3B18]) ^ LODWORD(STACK[0x3A58]) ^ a7 ^ LODWORD(STACK[0x38E0]) ^ LODWORD(STACK[0x3940]) ^ LODWORD(STACK[0x39A0]) ^ LODWORD(STACK[0x3930]) ^ LODWORD(STACK[0x39A8]) ^ LODWORD(STACK[0x3A00]) ^ LODWORD(STACK[0x3960]) ^ LODWORD(STACK[0x3998]) ^ LODWORD(STACK[0x3910]) ^ LODWORD(STACK[0x38F0]) ^ LODWORD(STACK[0x3900]);
  v21 = STACK[0x3950];
  v22 = STACK[0x39F0];
  LODWORD(STACK[0x3850]) ^= v20 ^ LODWORD(STACK[0x3918]) ^ LODWORD(STACK[0x3938]) ^ LODWORD(STACK[0x3858]) ^ LODWORD(STACK[0x3928]) ^ LODWORD(STACK[0x3950]) ^ LODWORD(STACK[0x38F8]) ^ LODWORD(STACK[0x3970]) ^ LODWORD(STACK[0x38D0]) ^ LODWORD(STACK[0x3860]) ^ LODWORD(STACK[0x3848]) ^ LODWORD(STACK[0x3840]) ^ v9 ^ LODWORD(STACK[0x3988]) ^ LODWORD(STACK[0x3980]) ^ LODWORD(STACK[0x39E8]) ^ LODWORD(STACK[0x39E0]) ^ v12 ^ LODWORD(STACK[0x3A18]) ^ LODWORD(STACK[0x3920]) ^ v11 ^ v10 ^ LODWORD(STACK[0x39B0]) ^ LODWORD(STACK[0x3978]) ^ LODWORD(STACK[0x3908]) ^ LODWORD(STACK[0x38D8]) ^ LODWORD(STACK[0x39F0]) ^ LODWORD(STACK[0x3990]) ^ LODWORD(STACK[0x38E8]) ^ LODWORD(STACK[0x3958]) ^ LODWORD(STACK[0x39F8]);
  LODWORD(STACK[0x3938]) = (((((v8 ^ v22) + LODWORD(STACK[0x36D8]) + 2 * (v8 & v22)) ^ LODWORD(STACK[0x3B60]))
                           + LODWORD(STACK[0x36D0])) ^ v21)
                         - v19;
  v23 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * a1) - 8);
  LODWORD(STACK[0x3858]) = (a1 - 6762) | 0x254;
  return v23();
}

uint64_t sub_1006EC3F0@<X0>(int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W3>, unsigned int a4@<W4>, int a5@<W5>, int a6@<W6>, unsigned int a7@<W7>, int a8@<W8>)
{
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;

  v23 = ((((((((a4 & STACK[0x3B68]) >> v10) ^ a4) & v11) >> STACK[0x3B78]) | ((((a4 & STACK[0x3B68]) >> v10) ^ a4) << v12)) ^ LODWORD(STACK[0x3AD0]))
                        + 111) ^ 0x36;
  v24 = *(_DWORD *)(v9 + 4 * (667 * (a4 ^ 0xC2) % 0x340)) ^ a6;
  LOBYTE(v23) = *(_BYTE *)(STACK[0x3C18]
                         + v23 * v13
                         + 17937420
                         - ((((v23 * v13 + 17937420) * (unint64_t)a3) >> 32) >> 1)
                         * a5) ^ 0xE;
  LOBYTE(v23) = (v23 >> 3) | (32 * v23);
  *(_DWORD *)(v16 + 4 * v23) = (((v24 ^ ((v24 & STACK[0x3B68]) >> 1)) & STACK[0x3C28]) << v12) ^ v21 ^ (((v24 ^ ((v24 & STACK[0x3B68]) >> 1)) & v11) >> LODWORD(STACK[0x3B98]));
  *(_DWORD *)(v22
            + 4
            * (v23 * v17
                           - ((v23 * v17 * (unint64_t)v18) >> 32) * v19)) = *(unsigned __int16 *)(a2 + 2 * ((a4 ^ a7) * v14 - ((((a4 ^ a7) * v14 * (unint64_t)v15) >> 32) >> 10) * v8)) ^ v20;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (((a4 == 255) * a8) ^ a1)) - 8))();
}

uint64_t sub_1006EC510(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  char v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unint64_t v97;
  int v98;
  unsigned __int8 *v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  int v159;
  int v160;
  unint64_t v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  unsigned int v171;
  int v172;
  unint64_t v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  unsigned int v186;
  unint64_t v187;
  int v188;
  int v189;
  int v190;
  uint64_t (*v191)(void);

  LODWORD(STACK[0x36B8]) = LODWORD(STACK[0x3C68]) ^ a3 ^ LODWORD(STACK[0x3B58]) ^ (LODWORD(STACK[0x36B8])
                                                                                 - LODWORD(STACK[0x3628]));
  LODWORD(STACK[0x36D8]) = LODWORD(STACK[0x3630]) + STACK[0x34E8];
  LODWORD(STACK[0x36D0]) = LODWORD(STACK[0x3868]) + STACK[0x34F0];
  LODWORD(STACK[0x3A18]) = 0;
  LODWORD(STACK[0x3840]) = LODWORD(STACK[0x34F8]) | 0x26262626;
  LODWORD(STACK[0x3848]) = STACK[0x35D0] + LODWORD(STACK[0x35E0]);
  LODWORD(STACK[0x3834]) = LODWORD(STACK[0x35D8]) ^ STACK[0x3618];
  LODWORD(STACK[0x3868]) = LODWORD(STACK[0x3870]) ^ LODWORD(STACK[0x3540]);
  v3 = (LODWORD(STACK[0x3858]) - 5459) | 0x4240u;
  STACK[0x39B0] = v3;
  v4 = STACK[0x3640];
  LODWORD(STACK[0x3630]) = LODWORD(STACK[0x3C78]) + LODWORD(STACK[0x3640]);
  v5 = STACK[0x3B50];
  LODWORD(STACK[0x3628]) = (LODWORD(STACK[0x3938]) ^ LODWORD(STACK[0x3B50])) + v4;
  v6 = STACK[0x3AC0];
  v7 = STACK[0x3B80];
  LODWORD(STACK[0x3870]) = v5 ^ LODWORD(STACK[0x3A80]) ^ LODWORD(STACK[0x3B40]) ^ LODWORD(STACK[0x3AE0]) ^ LODWORD(STACK[0x3A88]) ^ LODWORD(STACK[0x3A38]) ^ LODWORD(STACK[0x3C58]) ^ LODWORD(STACK[0x3A90]) ^ LODWORD(STACK[0x3A98]) ^ LODWORD(STACK[0x3B10]) ^ LODWORD(STACK[0x3AA0]) ^ LODWORD(STACK[0x3AF0]) ^ LODWORD(STACK[0x3A48]) ^ LODWORD(STACK[0x3C48]) ^ LODWORD(STACK[0x3C38]) ^ LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3B28]) ^ LODWORD(STACK[0x3C40]) ^ LODWORD(STACK[0x3AE8]) ^ LODWORD(STACK[0x3AC0]) ^ LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x3B18]);
  v8 = STACK[0x3B48];
  v9 = STACK[0x3B38];
  v10 = STACK[0x3A78];
  v11 = STACK[0x3A20];
  v12 = LODWORD(STACK[0x3C60]) ^ LODWORD(STACK[0x3B48]) ^ LODWORD(STACK[0x3B38]) ^ LODWORD(STACK[0x3A78]) ^ LODWORD(STACK[0x3A20]) ^ LODWORD(STACK[0x3B00]) ^ LODWORD(STACK[0x3AF8]) ^ LODWORD(STACK[0x3AD8]) ^ LODWORD(STACK[0x3AA8]) ^ LODWORD(STACK[0x3B08]) ^ LODWORD(STACK[0x3C50]);
  v13 = LODWORD(STACK[0x3A08]) ^ LODWORD(STACK[0x3A30]);
  v14 = STACK[0x3B70];
  v15 = LODWORD(STACK[0x3B70]) ^ LODWORD(STACK[0x3B88]);
  LODWORD(STACK[0x3928]) = v15;
  LODWORD(STACK[0x3640]) = v12 ^ v15 ^ v13 ^ LODWORD(STACK[0x3A60]) ^ LODWORD(STACK[0x3B20]);
  v16 = STACK[0x3AB8];
  v17 = STACK[0x3C28];
  v18 = STACK[0x39C8];
  v19 = STACK[0x3C30];
  v20 = STACK[0x3B98];
  LODWORD(STACK[0x3620]) = STACK[0x3C30] >> v20;
  v21 = ((v18 & (v17 << v16)) >> v16) | ((v18 & (v19 >> v20)) << v20);
  v22 = STACK[0x3AB0];
  v23 = STACK[0x3A28];
  v24 = STACK[0x3A28] & (((v21 ^ ((v21 & v22) >> 1)) & v22) >> 2) ^ v21 ^ ((v21 & v22) >> 1);
  v25 = STACK[0x3B90];
  v26 = STACK[0x39D8];
  v27 = STACK[0x3940];
  v28 = STACK[0x3940] & (STACK[0x39D8] << v25);
  v29 = STACK[0x3AC8];
  v30 = STACK[0x3B78];
  STACK[0x3600] = STACK[0x3AC8] >> STACK[0x3B78];
  v31 = v29;
  LODWORD(v29) = ((unint64_t)(v27 & (v29 >> v30)) << v30) | (v28 >> v25);
  v32 = STACK[0x3B68];
  v33 = ((v23 & v22 & ((v24 & v22) >> 2)) >> (v3 ^ 0x66)) & v23 ^ v24;
  v34 = STACK[0x3A10];
  v35 = STACK[0x3A10] & (((v29 ^ ((v29 & v32) >> 1)) & v32) >> 2) ^ v29 ^ ((v29 & v32) >> 1);
  LOBYTE(v3) = v20;
  LODWORD(v29) = v31 >> v20;
  v36 = v26 << v16;
  v37 = ((STACK[0x3A50] & v36) >> v16) + ((STACK[0x3A50] & (v31 >> v20)) << v20);
  v38 = v14 ^ v6 ^ LODWORD(STACK[0x3B88]) ^ v7;
  v39 = STACK[0x3A40];
  LODWORD(STACK[0x3C78]) = v10 ^ LODWORD(STACK[0x3A40]);
  v40 = STACK[0x3AD0];
  LODWORD(STACK[0x3B58]) = v8 ^ LODWORD(STACK[0x3AD0]);
  LODWORD(STACK[0x3B50]) = v5 ^ v39;
  LODWORD(STACK[0x3B48]) = v9 ^ v40;
  v41 = v38 ^ v13 ^ v10 ^ v39 ^ v9 ^ v40 ^ v8 ^ v40 ^ v5 ^ v39;
  v42 = LODWORD(STACK[0x3A80]) ^ v39;
  LODWORD(STACK[0x3C68]) = v42;
  v43 = LODWORD(STACK[0x3C60]) ^ v39;
  LODWORD(STACK[0x3B38]) = v43;
  v44 = LODWORD(STACK[0x3B40]) ^ v39;
  LODWORD(STACK[0x3C60]) = v44;
  LODWORD(STACK[0x3B40]) = v11 ^ v40;
  v45 = v41 ^ v43 ^ v42 ^ v11 ^ v40 ^ v44;
  v46 = LODWORD(STACK[0x3B00]) ^ v40;
  v47 = LODWORD(STACK[0x3AE0]) ^ v39;
  v48 = LODWORD(STACK[0x3AF8]) ^ v40;
  v49 = LODWORD(STACK[0x3A88]) ^ v39;
  LODWORD(STACK[0x3A20]) = v49;
  LODWORD(STACK[0x3B00]) = v47;
  LODWORD(STACK[0x3AF8]) = v46;
  LODWORD(STACK[0x3AE0]) = v48;
  v50 = v47 ^ v46 ^ v48 ^ v49;
  LODWORD(STACK[0x3920]) = v50;
  v51 = LODWORD(STACK[0x3AD8]) ^ v40;
  LODWORD(STACK[0x3A88]) = v51;
  v52 = v45 ^ v50 ^ v51;
  v53 = LODWORD(STACK[0x3AA0]) ^ v40;
  LODWORD(STACK[0x3940]) = v53;
  v54 = LODWORD(STACK[0x3C58]) ^ v39;
  LODWORD(STACK[0x3C58]) = v54;
  v55 = LODWORD(STACK[0x3B10]) ^ v40;
  LODWORD(STACK[0x3B10]) = v55;
  v56 = LODWORD(STACK[0x3A90]) ^ v39;
  v57 = LODWORD(STACK[0x3A98]) ^ v40;
  LODWORD(STACK[0x39C8]) = v57;
  v58 = LODWORD(STACK[0x3A38]) ^ v40;
  LODWORD(STACK[0x3A90]) = v58;
  v59 = v52 ^ v58 ^ v56 ^ v54 ^ v57 ^ v55 ^ v53;
  v60 = LODWORD(STACK[0x3AA8]) ^ v40;
  LODWORD(STACK[0x3AA8]) = v60;
  v61 = LODWORD(STACK[0x3B28]) ^ v39;
  LODWORD(STACK[0x3938]) = v61;
  v62 = LODWORD(STACK[0x3B30]) ^ v39;
  LODWORD(STACK[0x3AA0]) = v62;
  v63 = LODWORD(STACK[0x3AF0]) ^ v39;
  v64 = LODWORD(STACK[0x3A48]) ^ v39;
  LODWORD(STACK[0x3860]) = v63;
  LODWORD(STACK[0x3A78]) = v64;
  v65 = v60 ^ v63 ^ v64;
  v66 = LODWORD(STACK[0x3C48]) ^ v40;
  LODWORD(STACK[0x3A80]) = v66;
  v67 = LODWORD(STACK[0x3C38]) ^ v40;
  LODWORD(STACK[0x3490]) = v67;
  v68 = v59 ^ v65 ^ v66 ^ v67 ^ v62 ^ v61;
  v69 = LODWORD(STACK[0x3A60]) ^ v39;
  LODWORD(STACK[0x3B30]) = v69;
  v70 = STACK[0x3A58];
  LODWORD(STACK[0x3608]) = LODWORD(STACK[0x3870]) ^ LODWORD(STACK[0x3A58]);
  v71 = LODWORD(STACK[0x3B20]) ^ v40;
  LODWORD(STACK[0x3B28]) = v71;
  v72 = LODWORD(STACK[0x3B18]) ^ v39;
  LODWORD(STACK[0x3B20]) = v72;
  v73 = v70 ^ v39;
  LODWORD(STACK[0x3B18]) = v73;
  v74 = LODWORD(STACK[0x3C50]) ^ v39;
  LODWORD(STACK[0x3C50]) = v74;
  v75 = LODWORD(STACK[0x3AE8]) ^ v40;
  LODWORD(STACK[0x3A98]) = v75;
  v76 = LODWORD(STACK[0x3C40]) ^ v39;
  v77 = LODWORD(STACK[0x3B08]) ^ v39;
  LODWORD(STACK[0x3870]) = v77;
  LODWORD(STACK[0x3618]) = v68 ^ v76 ^ v75 ^ v77 ^ v74 ^ v69 ^ v72 ^ v71 ^ v73;
  LODWORD(STACK[0x3AE8]) = ((v34 & v32) >> 2) & ((v35 & v32) >> 4) & v34 ^ v35;
  v78 = v34 & (((v37 ^ ((v37 & v32) >> 1)) & v32) >> 2) ^ v37 ^ ((v37 & v32) >> 1);
  v79 = ((unint64_t)(STACK[0x39A0] & (v19 >> v30)) << v30) | ((STACK[0x39A0] & ((_DWORD)v17 << v25)) >> v25);
  v80 = (v34 & v32) >> 2;
  v81 = v80 & ((v78 & v32) >> 4) & v34 ^ v78;
  v82 = v23 & (((v79 ^ ((v79 & v22) >> 1)) & v22) >> 2) ^ v79 ^ ((v79 & v22) >> 1);
  v83 = STACK[0x3A70];
  LODWORD(STACK[0x35F0]) = (_DWORD)v17 << v25;
  v84 = ((v83 & v29) << v3) | ((v83 & ((_DWORD)v17 << v25)) >> v25);
  v85 = v23 & (((v84 ^ ((v84 & v22) >> 1)) & v22) >> 2) ^ v84 ^ ((v84 & v22) >> 1);
  v86 = STACK[0x3930];
  v87 = v36;
  STACK[0x35D8] = v36;
  v88 = ((unint64_t)(v86 & (v19 >> v30)) << v30) ^ ((v86 & v36) >> v16);
  v89 = (v23 & v22) >> 2;
  LODWORD(STACK[0x3A70]) = v89 & ((v82 & v22) >> 4) & v23 ^ v82;
  v90 = v34 & (((v88 ^ ((v88 & v32) >> 1)) & v32) >> 2) ^ v88 ^ ((v88 & v32) >> 1);
  LODWORD(STACK[0x35E0]) = v89;
  LODWORD(v36) = v89 & ((v85 & v22) >> 4) & v23 ^ v85;
  v91 = ((unint64_t)(STACK[0x3A68] & (v19 >> v30)) << v30) ^ ((STACK[0x3A68] & ((_DWORD)v17 << v25)) >> v25);
  LODWORD(STACK[0x35E8]) = v80;
  LODWORD(STACK[0x3A60]) = v80 & ((v90 & v32) >> 4) & v34 ^ v90;
  v92 = v23 & (((v91 ^ ((v91 & v22) >> 1)) & v22) >> 2) ^ v91 ^ ((v91 & v22) >> 1);
  v93 = v89 & ((v92 & v22) >> 4) & v23 ^ v92;
  v94 = ((STACK[0x39A8] & v87) >> v16) | ((STACK[0x39A8] & v29) << v3);
  v95 = v34 & (((v94 ^ ((v94 & v32) >> 1)) & v32) >> 2) ^ v94 ^ ((v94 & v32) >> 1);
  LODWORD(STACK[0x3A50]) = v80 & ((v95 & v32) >> 4) & v34 ^ v95;
  LODWORD(STACK[0x3B08]) = v33;
  v96 = v33 ^ ((v33 & v22) >> 1);
  v97 = STACK[0x39D8];
  v98 = v19;
  LODWORD(STACK[0x39A8]) = ((v96 & v19) >> v30) + ((v96 & STACK[0x39D8]) << v25);
  v99 = (unsigned __int8 *)STACK[0x3968];
  v100 = 4647 * (*(unsigned __int8 *)(STACK[0x3968] + 150) ^ 0x5F) + 14331348;
  LODWORD(STACK[0x3C40]) = v81;
  v101 = v81 ^ ((v81 & v22) >> 1);
  v102 = v98;
  v103 = (v101 & v98) >> v30;
  v104 = v17;
  v105 = v103 + ((unint64_t)(v101 & v17) << v16);
  v106 = STACK[0x3C18];
  v107 = *(unsigned __int8 *)(STACK[0x3C18]
                            + v100
                            - 6784 * (((1266205 * (unint64_t)v100) >> 32) >> 1))
       + 117;
  LOBYTE(v88) = v107 ^ 0x12 ^ (v107 >> 2) & 0x12;
  v108 = 4647 * (v99[141] ^ 9) + 23973873;
  v109 = *(unsigned __int8 *)(STACK[0x3C18]
                            + v108
                            - 6784 * (((1266205 * (unint64_t)v108) >> 32) >> 1));
  v110 = 4647 * ((v88 + 26) ^ 0x84) + 23973873;
  LODWORD(v103) = 4647 * (((v99[154] ^ 0xB1) + 111) ^ 0x36) + 17937420;
  v111 = v103 - 6784 * (((1266205 * (unint64_t)v103) >> 32) >> 1);
  LODWORD(v103) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + v110
                                     - 6784 * (((1266205 * (unint64_t)v110) >> 32) >> 1));
  LOBYTE(v110) = *(_BYTE *)(STACK[0x3C18] + v111) ^ 0xE;
  LODWORD(STACK[0x3A68]) = v36;
  v112 = v36 ^ ((v36 & v32) >> 1);
  LODWORD(STACK[0x3A58]) = v93;
  v113 = v93 ^ ((v93 & v32) >> 1);
  v114 = v113 & v104 ^ v112 & v97;
  LODWORD(v36) = LODWORD(STACK[0x3C38]) ^ LODWORD(STACK[0x3C48]) ^ LODWORD(STACK[0x3A48]) ^ LODWORD(STACK[0x3AF0]) ^ LODWORD(STACK[0x3A38]) ^ LODWORD(STACK[0x3AD8]) ^ LODWORD(STACK[0x3AC0]);
  v115 = LODWORD(STACK[0x3A08]) ^ v40;
  v116 = LODWORD(STACK[0x3928]) ^ LODWORD(STACK[0x3B80]);
  LODWORD(STACK[0x3AD8]) = v115;
  v117 = v36 ^ v116 ^ v115;
  LODWORD(v36) = LODWORD(STACK[0x3A30]) ^ v40;
  LODWORD(STACK[0x3C38]) = v36;
  v118 = v117 ^ v36 ^ LODWORD(STACK[0x3B58]) ^ LODWORD(STACK[0x3B50]) ^ LODWORD(STACK[0x3B38]) ^ LODWORD(STACK[0x3C68]) ^ LODWORD(STACK[0x3B48]) ^ LODWORD(STACK[0x3C78]) ^ LODWORD(STACK[0x3B40]) ^ LODWORD(STACK[0x3C60]);
  LODWORD(STACK[0x3AF0]) = v56;
  v119 = v118 ^ LODWORD(STACK[0x3920]) ^ v56 ^ LODWORD(STACK[0x3C58]);
  v120 = LODWORD(STACK[0x39C8]) ^ LODWORD(STACK[0x3B10]) ^ LODWORD(STACK[0x3940]) ^ LODWORD(STACK[0x3AA8]) ^ LODWORD(STACK[0x3AA0]) ^ LODWORD(STACK[0x3938]);
  LODWORD(STACK[0x3C48]) = v76;
  LODWORD(STACK[0x35D0]) = v119 ^ v120 ^ v76 ^ LODWORD(STACK[0x3A98]) ^ LODWORD(STACK[0x3870]) ^ LODWORD(STACK[0x3C50]) ^ LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3B20]) ^ LODWORD(STACK[0x3B28]) ^ LODWORD(STACK[0x3B18]) ^ ((v112 & STACK[0x3AC8]) >> v3) ^ (v114 << v25) ^ ((v113 & v102) >> v30) ^ v105 ^ LODWORD(STACK[0x36B8]) ^ LODWORD(STACK[0x39A8]);
  v121 = 4647 * (((v110 >> 3) | (32 * v110)) ^ 0x84) + 23973873;
  v122 = v121 - 6784 * (((1266205 * (unint64_t)v121) >> 32) >> 1);
  v123 = 4647 * (v99[151] ^ 0x11) + 1189632;
  v124 = 4647 * (v99[152] ^ 0x69) + 9544938;
  v125 = v124 - 6784 * (((1266205 * (unint64_t)v124) >> 32) >> 1);
  LODWORD(STACK[0x3A48]) = ((v109 >> 5) | (8 * v109)) ^ 0x9B;
  LOBYTE(v109) = *(_BYTE *)(v106 + v123 - 6784 * (((1266205 * (unint64_t)v123) >> 32) >> 1));
  v126 = (v109 ^ ((v109 ^ 0x91) >> 5) ^ ((v109 ^ 0x91) >> 1)) ^ 0x80 | ((((v103 >> 5) | (8 * v103)) ^ 0xD0) << 8);
  v127 = 4647 * ((((*(_BYTE *)(v106 + v125) - 87) ^ 0xFB) + 85) ^ 0xC6) + 1189632;
  LOBYTE(v103) = (*(_BYTE *)(v106 + v122) >> 5) | (8 * *(_BYTE *)(v106 + v122));
  v128 = *(unsigned __int8 *)(v106 + v127 - 6784 * (((1266205 * (unint64_t)v127) >> 32) >> 1));
  v129 = v128 ^ ((v128 ^ 0x91) >> 5) ^ ((v128 ^ 0x91) >> 1);
  v130 = 4647 * (v99[149] ^ 0x21) + 1189632;
  v131 = 4647 * ((((v129 ^ 0xB6) >> 1) | ((_BYTE)v129 << 7)) ^ 0x40) + 15539568;
  v132 = 4647 * (((v99[146] >> 1) | (v99[146] << 7)) ^ 0xD9) + 19140993;
  LOBYTE(v130) = *(_BYTE *)(v106 + v130 - 6784 * (((1266205 * (unint64_t)v130) >> 32) >> 1));
  v133 = v126 & 0xFF00FFFF | (((v130 ^ ((v130 ^ 0x91) >> 5) ^ ((v130 ^ 0x91) >> 1)) ^ 0xAC) << 16);
  v134 = 4647
       * ((97
                          * (*(_BYTE *)(v106
                                      + v132
                                      - 6784 * (((1266205 * (unint64_t)v132) >> 32) >> 1)) ^ 0x27)) ^ 3)
       + 23973873;
  v135 = (97
        * (*(unsigned __int8 *)(v106 + v131 - 6784 * (((1266205 * (unint64_t)v131) >> 32) >> 1)) ^ 0xA2)) ^ 0xBA;
  v136 = *(unsigned __int8 *)(v106 + v134 - 6784 * (((1266205 * (unint64_t)v134) >> 32) >> 1));
  v137 = 4647 * (((((v136 >> 5) | (8 * v136)) ^ 0x2D) + 111) ^ 0x1C) + 4767822;
  LOBYTE(v137) = *(_BYTE *)(v106 + v137 - 6784 * (((1266205 * (unint64_t)v137) >> 32) >> 1)) ^ 0xE3;
  v138 = 4647 * (v99[144] ^ 0xCD) + 23973873;
  v139 = ((v103 ^ 0x8D) << 8) | (v135 << 24);
  LODWORD(v103) = *(unsigned __int8 *)(v106
                                     + v138
                                     - 6784 * (((1266205 * (unint64_t)v138) >> 32) >> 1));
  LODWORD(v103) = 4647 * (((v103 >> 5) | (8 * v103)) ^ 0x5D) + 9544938;
  v140 = 4647 * (v99[153] ^ 0x82) + 23973873;
  v141 = *(unsigned __int8 *)(v106 + v140 - 6784 * (((1266205 * (unint64_t)v140) >> 32) >> 1));
  LODWORD(v36) = 4647 * (v99[145] ^ 0xD1) + 23973873;
  LODWORD(v36) = *(unsigned __int8 *)(v106
                                    + v36
                                    - 6784
                                    * (((1266205 * (unint64_t)v36) >> 32) >> 1));
  v142 = 4647 * (((v99[155] >> 1) | (v99[155] << 7)) ^ 0xF3) + 19140993;
  v143 = 4647
       * ((97
                          * (*(_BYTE *)(v106
                                      + v142
                                      - 6784 * (((1266205 * (unint64_t)v142) >> 32) >> 1)) ^ 0x27)) ^ 0xC6)
       + 1189632;
  LODWORD(v97) = (((v137 >> 3) | (32 * v137)) << 8) | (((((*(unsigned __int8 *)(v106 + v103 - 6784 * (((1266205 * (unint64_t)v103) >> 32) >> 1))
                                                                                           - 87) ^ 0xFFFFFFFB)
                                                                                         + 85) ^ 0xAE) << 24);
  v144 = 4647 * (v99[143] ^ 0xC4) + 14331348;
  v145 = *(unsigned __int8 *)(v106 + v144 - 6784 * (((1266205 * (unint64_t)v144) >> 32) >> 1))
       + 117;
  v146 = 4647 * (((v145 ^ 0x12 ^ (v145 >> 2) & 0x12) + 26) ^ 0x1B) + 1189632;
  v147 = v139 & 0xFF00FF00 | ((((v141 >> 5) | (8 * v141)) ^ 0x69) << 16) | *(_BYTE *)(v106 + v143 - 6784 * (((1266205 * (unint64_t)v143) >> 32) >> 1)) ^ 0x91 ^ ((*(_BYTE *)(v106 + v143 - 6784 * (((1266205 * (unint64_t)v143) >> 32) >> 1)) ^ 0x91) >> 5) ^ ((*(_BYTE *)(v106 + v143 - 6784 * (((1266205 * (unint64_t)v143) >> 32) >> 1)) ^ 0x91) >> 1);
  v148 = 4647 * (v99[147] ^ 0x28) + 1189632;
  LOBYTE(v148) = *(_BYTE *)(v106 + v148 - 6784 * (((1266205 * (unint64_t)v148) >> 32) >> 1));
  v149 = 4647
       * ((v148 ^ ((v148 ^ 0x91) >> 5) ^ ((v148 ^ 0x91) >> 1)) ^ 0x72)
       + 14331348;
  LODWORD(v103) = 4647 * (v99[148] ^ 0xE9) + 23973873;
  v150 = *(unsigned __int8 *)(v106 + v149 - 6784 * (((1266205 * (unint64_t)v149) >> 32) >> 1))
       + 117;
  LODWORD(v103) = *(unsigned __int8 *)(v106
                                     + v103
                                     - 6784
                                     * (((1266205 * (unint64_t)v103) >> 32) >> 1));
  v151 = 4647 * (v99[140] ^ 0xB8) + 9544938;
  LODWORD(v103) = 4647 * (((v103 >> 5) | (8 * v103)) ^ 0x5D) + 9544938;
  v152 = 4647
       * ((((*(_BYTE *)(v106
                                       + v151
                                       - 6784 * (((1266205 * (unint64_t)v151) >> 32) >> 1))
                            - 87) ^ 0xFB)
                          + 85) ^ 0x1F)
       + 23973873;
  LOBYTE(v146) = *(_BYTE *)(v106 + v146 - 6784 * (((1266205 * (unint64_t)v146) >> 32) >> 1));
  v153 = (v146 ^ ((v146 ^ 0x91) >> 5) ^ ((v146 ^ 0x91) >> 1)) ^ 0x36 | (LODWORD(STACK[0x3A48]) << 16);
  v154 = *(unsigned __int8 *)(v106 + v152 - 6784 * (((1266205 * (unint64_t)v152) >> 32) >> 1));
  v155 = ((v154 >> 5) | (8 * v154)) ^ 0xD0;
  v156 = 4647 * (v99[142] ^ 0xE7) + 23973873;
  LODWORD(STACK[0x3920]) = v133 | (((((*(unsigned __int8 *)(v106
                                                          + v103
                                                          - 6784
                                                          * (((1266205
                                                                           * (unint64_t)v103) >> 32) >> 1))
                                     - 87) ^ 0xFFFFFFFB)
                                   + 85) ^ 0xFFFFFF87) << 24);
  LODWORD(STACK[0x3930]) = v97 & 0xFF00FF00 | ((((v36 >> 5) | (8 * v36)) ^ 0xB6) << 16) | ((v150 ^ 0x12 ^ (v150 >> 2) & 0x12) + 26) ^ 0x8D;
  v157 = v153 | (v155 << 24);
  v158 = *(unsigned __int8 *)(v106 + v156 - 6784 * (((1266205 * (unint64_t)v156) >> 32) >> 1));
  LODWORD(STACK[0x3928]) = v157 & 0xFFFF00FF | ((((v158 >> 5) | (8 * v158)) ^ 0x16) << 8);
  STACK[0x39A8] = STACK[0x3C88] - 0x564A51AA7E7B85D6;
  v159 = ((unint64_t)(STACK[0x39D8] & STACK[0x3878]) << v16) + STACK[0x3720];
  LODWORD(STACK[0x35C8]) = (STACK[0x3728] << v16) ^ STACK[0x3660];
  LODWORD(STACK[0x3878]) = (STACK[0x3658] << v16) | LODWORD(STACK[0x3738]);
  LOBYTE(v76) = STACK[0x3B98];
  v160 = STACK[0x3740] + (STACK[0x3710] >> v76);
  LODWORD(STACK[0x3748]) = (STACK[0x3700] << v25) ^ (STACK[0x3748] >> v30);
  v161 = STACK[0x3C28];
  LODWORD(STACK[0x3740]) = ((unint64_t)(STACK[0x3C28] & (LODWORD(STACK[0x3840]) ^ v34 & 0x2020202)) << v16) ^ ((STACK[0x3C30] & (LODWORD(STACK[0x3840]) ^ v34 & 0x2020202)) >> v76);
  v162 = STACK[0x3628];
  v163 = STACK[0x3630];
  LODWORD(STACK[0x3660]) = LODWORD(STACK[0x3630]) - LODWORD(STACK[0x3628]);
  LODWORD(v99) = 1976000833 * v163;
  LODWORD(v36) = 1976000833 * v162;
  LODWORD(STACK[0x3760]) = STACK[0x35F8] + (STACK[0x3760] >> v76);
  v164 = STACK[0x3638];
  LODWORD(STACK[0x3768]) = LODWORD(STACK[0x3638]) + (STACK[0x3768] >> v30);
  v165 = v164 + STACK[0x3890];
  v166 = v161 & STACK[0x38B0];
  LODWORD(STACK[0x38B0]) = (v166 << v16) + STACK[0x3718];
  LODWORD(STACK[0x3898]) = STACK[0x3898] ^ (STACK[0x3778] >> v30);
  LODWORD(STACK[0x39A0]) = LODWORD(STACK[0x38E8]) ^ v39;
  LODWORD(STACK[0x3A30]) = LODWORD(STACK[0x3958]) ^ v39;
  LODWORD(STACK[0x3998]) ^= v39;
  LODWORD(STACK[0x3990]) ^= v39;
  LODWORD(STACK[0x3A48]) = LODWORD(STACK[0x38D8]) ^ v39;
  LODWORD(STACK[0x3A38]) = LODWORD(STACK[0x38F0]) ^ v39;
  LODWORD(STACK[0x3958]) = LODWORD(STACK[0x38E0]) ^ v39;
  LODWORD(STACK[0x3728]) = LODWORD(STACK[0x3970]) ^ v39;
  LODWORD(STACK[0x3718]) = LODWORD(STACK[0x38D0]) ^ v39;
  LODWORD(STACK[0x3710]) = LODWORD(STACK[0x3988]) ^ v39;
  LODWORD(STACK[0x3720]) = LODWORD(STACK[0x3980]) ^ v39;
  v167 = ((STACK[0x35D8] & v39) >> v16) + ((unint64_t)(STACK[0x3600] & v39) << v30);
  v168 = STACK[0x3A28] & (((v167 ^ ((v167 & v22) >> 1)) & v22) >> 2) ^ v167 ^ ((v167 & v22) >> 1);
  LODWORD(STACK[0x3658]) = STACK[0x35E0] & ((v168 & v22) >> 4) & STACK[0x3A28] ^ v168;
  v169 = (_DWORD)v166 << v25;
  LODWORD(v166) = STACK[0x3790];
  LODWORD(STACK[0x3A28]) = v169 | LODWORD(STACK[0x3790]);
  LODWORD(STACK[0x38E8]) = v169 + v166;
  v170 = STACK[0x37A0] | (STACK[0x3648] >> v30);
  v171 = STACK[0x37B8] << v25;
  LODWORD(STACK[0x38F0]) = v171 | LODWORD(STACK[0x38A8]);
  LODWORD(v106) = v171 + LODWORD(STACK[0x3650]);
  v172 = STACK[0x3820];
  LODWORD(STACK[0x38E0]) = STACK[0x3708] + LODWORD(STACK[0x3820]);
  LODWORD(v97) = LODWORD(STACK[0x38A0]) + v172;
  v173 = STACK[0x37D0] << v16;
  LODWORD(STACK[0x38D8]) = v173 ^ (STACK[0x37C8] >> v76);
  v174 = v173 ^ (STACK[0x37D8] >> v30);
  LODWORD(STACK[0x3980]) = LODWORD(STACK[0x3A00]) ^ v40;
  LODWORD(STACK[0x3988]) = LODWORD(STACK[0x3910]) ^ v40;
  LODWORD(STACK[0x3A40]) = LODWORD(STACK[0x3978]) ^ v40;
  LODWORD(STACK[0x3970]) = LODWORD(STACK[0x39F8]) ^ v40;
  LODWORD(STACK[0x3978]) = LODWORD(STACK[0x3960]) ^ v40;
  LODWORD(STACK[0x3820]) = LODWORD(STACK[0x39F0]) ^ v40;
  LODWORD(STACK[0x3968]) = LODWORD(STACK[0x3900]) ^ v40;
  LODWORD(STACK[0x3708]) = LODWORD(STACK[0x38F8]) ^ v40;
  LODWORD(STACK[0x3840]) = LODWORD(STACK[0x3908]) ^ v40;
  LODWORD(STACK[0x3960]) = LODWORD(STACK[0x3918]) ^ v40;
  LODWORD(STACK[0x3A08]) = LODWORD(STACK[0x3950]) ^ v40;
  LODWORD(STACK[0x3700]) = LODWORD(STACK[0x39E8]) ^ v40;
  LODWORD(STACK[0x3A00]) = LODWORD(STACK[0x39E0]) ^ v40;
  LODWORD(v173) = ((STACK[0x35F0] & v40) >> v25) ^ ((STACK[0x3620] & v40) << v76);
  LODWORD(v173) = v34 & (((v173 ^ ((v173 & v32) >> 1)) & v32) >> 2) ^ v173 ^ ((v173 & v32) >> 1);
  LODWORD(STACK[0x3650]) = STACK[0x35E8] & ((v173 & v32) >> 4) & v34 ^ v173;
  LODWORD(v166) = STACK[0x3880] + LODWORD(STACK[0x3750]);
  LODWORD(v103) = LODWORD(STACK[0x3758]) ^ LODWORD(STACK[0x3750]);
  v175 = LODWORD(STACK[0x3608]) ^ LODWORD(STACK[0x3640]);
  LODWORD(v161) = STACK[0x39D0];
  v176 = LODWORD(STACK[0x39D0]) ^ LODWORD(STACK[0x36D0]) ^ v175;
  LODWORD(v3) = LODWORD(STACK[0x36E0]) ^ LODWORD(STACK[0x3850]);
  v177 = STACK[0x35D0];
  v178 = STACK[0x36B8];
  LODWORD(STACK[0x3648]) = LODWORD(STACK[0x39D0]) ^ v160 ^ LODWORD(STACK[0x3850]) ^ LODWORD(STACK[0x36E0]) ^ (944955881 * LODWORD(STACK[0x36B8])) ^ (944955881 * (LODWORD(STACK[0x35D0]) ^ LODWORD(STACK[0x36C0])));
  v179 = LODWORD(STACK[0x37A8]) ^ (STACK[0x3798] >> v30);
  LODWORD(STACK[0x3640]) = STACK[0x37C0] ^ (STACK[0x37B0] >> v76) ^ v161 ^ (22280137 * v178) ^ (22280137 * (v3 ^ v178));
  v180 = STACK[0x3618];
  LODWORD(STACK[0x3638]) = v176 ^ LODWORD(STACK[0x3618]);
  v181 = v178 ^ LODWORD(STACK[0x3678]);
  LODWORD(STACK[0x3630]) = v181;
  LODWORD(STACK[0x3628]) = v161 ^ v165 ^ (-2071480443 * v175) ^ (-2071480443 * v180) ^ v99 ^ v36 ^ (1870827051 * v181) ^ (1870827051 * (v177 ^ 0x91A77DF4));
  LODWORD(v36) = STACK[0x37F0] ^ (STACK[0x36E8] << v25);
  LODWORD(v173) = STACK[0x3838];
  LODWORD(STACK[0x3620]) = LODWORD(STACK[0x3838]) ^ 0x4D4D4D4D;
  LODWORD(STACK[0x3618]) = v173 ^ 0xD5D5D5D5;
  LODWORD(STACK[0x3918]) = v147 ^ 0x1B;
  v182 = STACK[0x3770] >> v76;
  v183 = STACK[0x37E8] << v16;
  v184 = v183 | LODWORD(STACK[0x38B8]);
  v185 = STACK[0x37E0] >> v30;
  LODWORD(v16) = STACK[0x3800] << v25;
  v186 = STACK[0x3808] >> v76;
  v187 = STACK[0x36A0];
  LODWORD(v3) = LODWORD(STACK[0x36F8]) + STACK[0x36A0];
  v188 = STACK[0x38C8] | LODWORD(STACK[0x3688]);
  LODWORD(STACK[0x3950]) = STACK[0x3818] << v25;
  v189 = LODWORD(STACK[0x38C0]) ^ STACK[0x37F8];
  LODWORD(v99) = v183 + STACK[0x37F8];
  LODWORD(v187) = STACK[0x3810] | v187;
  v190 = v16 + STACK[0x3730];
  LODWORD(STACK[0x35F8]) = STACK[0x3828] >> v76;
  v191 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * SLODWORD(STACK[0x3858])) - 12);
  LODWORD(STACK[0x35F0]) = v161 ^ v166;
  LODWORD(STACK[0x35E8]) = v103 ^ v161;
  LODWORD(STACK[0x35E0]) = v161 ^ v159;
  LODWORD(STACK[0x35D8]) = v161 ^ LODWORD(STACK[0x35C8]);
  LODWORD(v166) = v161 ^ LODWORD(STACK[0x3610]);
  LODWORD(STACK[0x35D0]) = v166;
  LODWORD(STACK[0x35C8]) = v166 ^ v182;
  LODWORD(STACK[0x35C0]) = v161 ^ (STACK[0x3680] + LODWORD(STACK[0x3698]));
  LODWORD(STACK[0x35B8]) = v161 ^ LODWORD(STACK[0x3788]);
  LODWORD(STACK[0x35B0]) = LODWORD(STACK[0x36D8]) ^ v161;
  LODWORD(STACK[0x35A8]) = v161 ^ LODWORD(STACK[0x3780]);
  LODWORD(STACK[0x35A0]) = v161 ^ LODWORD(STACK[0x3878]);
  LODWORD(STACK[0x3598]) = LODWORD(STACK[0x3748]) ^ v161;
  LODWORD(STACK[0x3590]) = LODWORD(STACK[0x3740]) ^ v161;
  LODWORD(STACK[0x3588]) = LODWORD(STACK[0x3834]) ^ v161;
  LODWORD(STACK[0x3580]) = v161 ^ LODWORD(STACK[0x3888]);
  LODWORD(STACK[0x3578]) = v161 ^ LODWORD(STACK[0x3948]);
  LODWORD(STACK[0x3570]) = v179 ^ v161;
  LODWORD(STACK[0x3568]) = v161 ^ LODWORD(STACK[0x3768]);
  LODWORD(STACK[0x3560]) = v161 ^ LODWORD(STACK[0x3760]);
  LODWORD(STACK[0x3558]) = v161 ^ v99;
  LODWORD(STACK[0x3550]) = v161 ^ LODWORD(STACK[0x3848]);
  LODWORD(STACK[0x3548]) = v189 ^ v161;
  STACK[0x3610] = v183;
  STACK[0x3608] = v185;
  LODWORD(STACK[0x3540]) = v161 ^ (v183 | v185);
  LODWORD(STACK[0x3538]) = v161 ^ LODWORD(STACK[0x38E8]);
  LODWORD(STACK[0x3530]) = LODWORD(STACK[0x3868]) ^ v161;
  LODWORD(STACK[0x3528]) = v161 ^ v170;
  LODWORD(STACK[0x3520]) = v161 ^ v106;
  LODWORD(STACK[0x3518]) = v161 ^ v187;
  LODWORD(STACK[0x3510]) = v161 ^ v97;
  LODWORD(STACK[0x3508]) = v161 ^ v190;
  LODWORD(STACK[0x3500]) = v161 ^ v174;
  LODWORD(STACK[0x34F8]) = v161 ^ LODWORD(STACK[0x36F0]);
  LODWORD(STACK[0x34F0]) = v161 ^ v184;
  LODWORD(STACK[0x34E8]) = v36 ^ v161;
  LODWORD(STACK[0x34E0]) = v161 ^ LODWORD(STACK[0x3A28]);
  LODWORD(STACK[0x34D8]) = v161 ^ LODWORD(STACK[0x38B0]);
  LODWORD(STACK[0x34D0]) = v161 ^ LODWORD(STACK[0x38F0]);
  LODWORD(STACK[0x34C8]) = v161 ^ LODWORD(STACK[0x3898]);
  LODWORD(STACK[0x3600]) = v16;
  LODWORD(STACK[0x34C0]) = v16 ^ v186 ^ v161;
  LODWORD(STACK[0x34B8]) = v161 ^ LODWORD(STACK[0x38E0]);
  LODWORD(STACK[0x34B0]) = v161 ^ v3;
  LODWORD(STACK[0x34A8]) = v161 ^ v188;
  LODWORD(STACK[0x34A0]) = LODWORD(STACK[0x38D8]) ^ v161;
  LODWORD(STACK[0x3498]) = LODWORD(STACK[0x36B0]) ^ 0x66666666;
  LODWORD(v187) = STACK[0x3B60];
  LODWORD(STACK[0x3A28]) = STACK[0x3B60];
  LODWORD(STACK[0x3948]) = v187;
  return v191();
}

uint64_t sub_1006EDBA8(uint64_t a1, int a2, unsigned int a3)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  char v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  char v100;
  int v101;
  int v102;
  char v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  char v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  char v164;
  int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  char v176;
  int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  BOOL v203;
  char v204;
  unsigned int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  int v278;
  char v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  char v286;
  int v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unsigned int v291;
  int v292;
  unsigned __int8 v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  char v297;
  unint64_t v298;
  int v299;
  int v300;
  int v301;
  int v302;
  unint64_t v303;
  unsigned int v304;
  unint64_t v305;
  unint64_t v306;
  unsigned int v307;
  unsigned int v308;
  unsigned __int8 v309;
  unsigned int v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unsigned int v315;
  int v316;
  int v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  int v321;
  unint64_t v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  char v326;
  int v327;
  unint64_t v328;
  unint64_t v329;
  int v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unsigned int v336;
  unsigned int v337;
  int v338;
  int v339;
  BOOL v340;
  char v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  int v346;
  int v347;
  unsigned int v348;
  int v349;
  unsigned int v350;
  unsigned int v351;
  int v352;
  int v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  unint64_t v357;
  int v358;
  unint64_t v359;
  int v360;
  unsigned int v361;
  unsigned int v362;
  int v363;
  int v364;
  unsigned int v365;
  unsigned int v366;
  int v367;
  unint64_t v368;
  int v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  int v374;
  unint64_t v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  unint64_t v379;
  int v380;
  int v381;
  unint64_t v382;
  unint64_t v383;
  unsigned __int8 v384;
  char v385;
  int v386;
  int v387;
  int v388;
  int v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  unsigned __int8 v393;
  unsigned int v394;
  int v395;
  int v396;
  int v397;
  unsigned int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  int v414;
  unsigned int v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  BOOL v419;
  char v420;
  unsigned int v421;
  int v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  int v426;
  unint64_t v427;
  int v428;
  int v429;
  unsigned int v430;
  int v431;
  unsigned int v432;
  int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  char v437;
  unsigned __int8 v438;
  int v439;
  unsigned int v440;
  int v441;
  unint64_t v442;
  int v443;
  unsigned int v444;
  unint64_t v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unint64_t v451;
  char v452;
  unsigned int v453;
  int v454;
  unsigned int v455;
  int v456;
  unint64_t v457;
  int v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unsigned int v462;
  char v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  unsigned int v477;
  int v478;
  unsigned int v479;
  unsigned int v480;
  char v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  int v488;
  char v489;
  unsigned int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  unsigned int v495;
  unsigned int v496;
  int v497;
  unsigned int v498;
  unint64_t v499;
  unsigned int v500;
  unint64_t v501;
  unint64_t v502;
  unsigned int v503;
  int v504;
  unsigned int v505;
  int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  unsigned int v510;
  unsigned int v511;
  unsigned int v512;
  int v513;
  BOOL v514;
  unsigned int v515;
  unsigned int v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int v519;
  unsigned int v520;
  unsigned int v521;
  unsigned int v522;
  int v523;
  int v524;
  int v525;
  unsigned int v526;
  unsigned int v527;
  int v528;
  char v529;
  unsigned int v530;
  int v531;
  int v532;
  unsigned int v533;
  unsigned int v534;
  unsigned int v535;
  unsigned int v536;
  int v537;
  int v538;
  unsigned int v539;
  unsigned int v540;
  unsigned int v541;
  int v542;
  unint64_t v543;
  unsigned int v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int v547;
  unsigned int v548;
  unsigned int v549;
  unsigned int v550;
  unsigned int v551;
  unsigned int v552;
  unint64_t v553;
  int v554;
  unsigned int v555;

  LODWORD(STACK[0x39C8]) = v8;
  STACK[0x39B0] = v3;
  v10 = (v3 + 1931981289) & 0x8CD83EFB;
  v11 = a3 + 3;
  STACK[0x3910] = v11;
  v12 = STACK[0x39A8];
  LODWORD(v11) = 4647 * ((-63 * a3 + *(_BYTE *)(STACK[0x39A8] + v11) + 21) ^ 0xD8) + 1189632;
  LODWORD(STACK[0x3490]) = v10;
  v13 = v11 % (v10 ^ 0x26C9u);
  v14 = a3 + 5;
  STACK[0x3900] = v14;
  LODWORD(v14) = 4647 * ((-63 * a3 + *(_BYTE *)(v12 + v14) - 105) ^ 0x8F) + 23973873;
  v15 = STACK[0x3C18];
  LODWORD(v14) = *(unsigned __int8 *)(STACK[0x3C18]
                                    + v14
                                    - 6784
                                    * (((1266205 * (unint64_t)v14) >> 32) >> 1));
  v16 = a3 + 4;
  STACK[0x3908] = v16;
  LODWORD(v16) = 4647 * (((*(_BYTE *)(v12 + v16) >> 1) | (*(_BYTE *)(v12 + v16) << 7)) ^ 0xD9)
               + 19140993;
  LODWORD(v16) = 4647
               * ((-63 * a3
                                  + 97
                                  * (*(_BYTE *)(v15
                                              + v16
                                              - 6784
                                              * (((1266205 * (unint64_t)v16) >> 32) >> 1)) ^ 0x27)
                                  - 42) ^ 0xBD)
               + 23973873;
  LODWORD(v16) = *(unsigned __int8 *)(v15
                                    + v16
                                    - 6784
                                    * (((1266205 * (unint64_t)v16) >> 32) >> 1));
  v17 = a3 + 11;
  STACK[0x38E0] = v17;
  LODWORD(v17) = v9 + 4647 * (((*(_BYTE *)(v12 + v17) >> 1) | (*(_BYTE *)(v12 + v17) << 7)) ^ 0x40);
  LODWORD(v17) = 4647
               * ((-63 * a3
                                  + 97
                                  * (*(_BYTE *)(v15
                                              + v17
                                              - 6784
                                              * (((1266205 * (unint64_t)v17) >> 32) >> 1)) ^ 0xA2)
                                  - 70) ^ 0x36)
               + 17937420;
  LOBYTE(v17) = *(_BYTE *)(v15
                         + v17
                         - 6784 * (((1266205 * (unint64_t)v17) >> 32) >> 1)) ^ 0xE;
  LODWORD(v17) = 4647 * ((((v17 >> 3) | (32 * v17)) + 65) ^ 0x1C) + 4767822;
  LODWORD(v16) = ((((v14 >> 5) | (8 * v14)) ^ 0x3C) << 16) | ((((v16 >> 5) | (8 * (_DWORD)v16)) ^ 0x5E) << 24);
  LOBYTE(v14) = *(_BYTE *)(v15
                         + v17
                         - 6784 * (((1266205 * (unint64_t)v17) >> 32) >> 1)) ^ 0xE3;
  LODWORD(v14) = 4647 * (((v14 >> 3) | (32 * v14)) ^ 0xC3) + 1189632;
  v18 = a3 + 13;
  STACK[0x38F0] = v18;
  LODWORD(v18) = v6 + 4647 * (*(unsigned __int8 *)(v12 + v18) ^ 0xFE);
  LOBYTE(v18) = *(_BYTE *)(v15
                         + v18
                         - 6784 * (((1266205 * (unint64_t)v18) >> 32) >> 1))
              - 71;
  LODWORD(v18) = 4647 * ((-63 * a3 + (v18 ^ ((_BYTE)v18 << 6) ^ (4 * v18) ^ 0xFE) - 71) ^ 0x62)
               + 1189632;
  STACK[0x38F8] = a3;
  v19 = 4647 * (((*(_BYTE *)(v12 + a3) >> 1) | (*(_BYTE *)(v12 + a3) << 7)) ^ 0xD9) + 19140993;
  LOBYTE(v18) = *(_BYTE *)(v15
                         + v18
                         - 6784 * (((1266205 * (unint64_t)v18) >> 32) >> 1));
  v20 = 4647
      * ((-63 * a3
                         + 97
                         * (*(_BYTE *)(v15 + v19 - 6784 * (((1266205 * (unint64_t)v19) >> 32) >> 1)) ^ 0x27)
                         - 46) ^ 0x8B)
      + 23973873;
  v21 = *(unsigned __int8 *)(v15 + v20 - 6784 * (((1266205 * (unint64_t)v20) >> 32) >> 1));
  v22 = (*(_BYTE *)(v15 + v13) ^ ((*(_BYTE *)(v15 + v13) ^ 0x91) >> 5) ^ ((*(_BYTE *)(v15 + v13) ^ 0x91) >> 1)) ^ 5;
  v23 = a3 + 7;
  STACK[0x38E8] = v23;
  v24 = v22 | ((((v21 >> 5) | (8 * v21)) ^ 0xFE) << 24);
  v25 = 4647 * ((-63 * a3 + *(_BYTE *)(v12 + v23) + 25) ^ 0x42) + 23973873;
  v26 = *(unsigned __int8 *)(v15 + v25 - 6784 * (((1266205 * (unint64_t)v25) >> 32) >> 1));
  v27 = 4647 * (((v26 >> 5) | (8 * v26)) ^ 0x5D) + 9544938;
  v28 = a3 + 8;
  STACK[0x38A8] = v28;
  LODWORD(v28) = v6 + 4647 * ((-63 * a3 + *(_BYTE *)(v12 + v28) + 8) ^ 0xFE);
  LODWORD(v16) = v16 & 0xFFFFFF00 | (((*(_BYTE *)(v15
                                                                 + v27
                                                                 - 6784
                                                                 * (((1266205 * (unint64_t)v27) >> 32) >> 1))
                                                      - 87) ^ 0xFB)
                                                    + 85);
  LOBYTE(v27) = *(_BYTE *)(v15
                         + v28
                         - 6784 * (((1266205 * (unint64_t)v28) >> 32) >> 1))
              - 71;
  v29 = 4647 * (((v27 ^ ((_BYTE)v27 << 6) ^ (4 * v27) ^ 0xFE) - 20) ^ 0x87) + 23973873;
  LOBYTE(v14) = *(_BYTE *)(v15
                         + v14
                         - 6784 * (((1266205 * (unint64_t)v14) >> 32) >> 1));
  v30 = *(unsigned __int8 *)(v15 + v29 - 6784 * (((1266205 * (unint64_t)v29) >> 32) >> 1));
  v31 = (v14 ^ ((v14 ^ 0x91) >> 5) ^ ((v14 ^ 0x91) >> 1)) ^ 0x1B | ((((v30 >> 5) | (8 * v30)) ^ 0xC4) << 24);
  v32 = a3 + 14;
  STACK[0x3898] = v32;
  LODWORD(v32) = 4647 * ((-63 * a3 + *(_BYTE *)(v12 + v32) + 96) ^ 0x9E) + 23973873;
  LODWORD(v32) = *(unsigned __int8 *)(v15
                                    + v32
                                    - 6784
                                    * (((1266205 * (unint64_t)v32) >> 32) >> 1));
  LOBYTE(v30) = (v32 >> 5) | (8 * v32);
  v33 = a3 + 1;
  STACK[0x38A0] = v33;
  LODWORD(v33) = 4647 * ((-63 * a3 + *(_BYTE *)(v12 + v33) - 109) ^ 0xE9) + 1189632;
  LODWORD(v28) = v33 - 6784 * (((1266205 * (unint64_t)v33) >> 32) >> 1);
  LODWORD(v33) = ((v18 ^ ((v18 ^ 0x91) >> 5) ^ ((v18 ^ 0x91) >> 1)) ^ 0xB4) << 16;
  v34 = a3 + 10;
  STACK[0x38D8] = v34;
  LODWORD(v33) = v33 & 0xFFFF00FF | ((v30 ^ 0x94) << 8);
  v35 = 4647 * ((-63 * a3 + *(_BYTE *)(v12 + v34) + 92) ^ 0x98) + 1189632;
  LOBYTE(v34) = *(_BYTE *)(v15 + v28);
  v36 = a3 + 12;
  STACK[0x38B8] = v36;
  LODWORD(v36) = v4 + 4647 * (*(unsigned __int8 *)(v12 + v36) ^ 0x9A);
  v37 = v24 & 0xFF00FFFF | (((v34 ^ ((v34 ^ 0x91) >> 5) ^ ((v34 ^ 0x91) >> 1)) ^ 0x46) << 16);
  LODWORD(v34) = 4647
               * ((-63 * a3
                                  + (*(_BYTE *)(v15
                                              + v36
                                              - 6784
                                              * (((1266205 * (unint64_t)v36) >> 32) >> 1)) ^ 0xC3)
                                  + 51) ^ 0xB)
               + 23973873;
  LOBYTE(v35) = *(_BYTE *)(v15 + v35 - 6784 * (((1266205 * (unint64_t)v35) >> 32) >> 1));
  LODWORD(v34) = *(unsigned __int8 *)(v15
                                    + v34
                                    - 6784
                                    * (((1266205 * (unint64_t)v34) >> 32) >> 1));
  v38 = v31 & 0xFFFF00FF | (((v35 ^ ((v35 ^ 0x91) >> 5) ^ ((v35 ^ 0x91) >> 1)) ^ 0x3C) << 8);
  v39 = v9
      + 4647
      * ((((((v34 >> 5) | (8 * v34)) ^ 0xD5) >> 1) | ((((v34 >> 5) | (8 * v34)) ^ 0xD5) << 7)) ^ 0x40);
  v40 = a3 + 15;
  STACK[0x38C8] = v40;
  LODWORD(v40) = 4647 * ((-63 * a3 + *(_BYTE *)(v12 + v40) + 33) ^ 0x79) + 1189632;
  v41 = a3 + 6;
  STACK[0x38D0] = v41;
  LODWORD(v41) = 4647 * ((-63 * a3 + *(_BYTE *)(v12 + v41) + 88) ^ 5) + 23973873;
  LOBYTE(v40) = *(_BYTE *)(v15
                         + v40
                         - 6784 * (((1266205 * (unint64_t)v40) >> 32) >> 1));
  LODWORD(v41) = *(unsigned __int8 *)(v15
                                    + v41
                                    - 6784
                                    * (((1266205 * (unint64_t)v41) >> 32) >> 1));
  LODWORD(v23) = (1627389952
                * (*(unsigned __int8 *)(v15 + v39
                                            - 6784 * (((1266205 * (unint64_t)v39) >> 32) >> 1)) ^ 0xA2)) | v33 & 0xFFFFFF00 | (v40 ^ ((v40 ^ 0x91) >> 5) ^ ((v40 ^ 0x91) >> 1)) ^ 0xAA;
  LODWORD(STACK[0x38C0]) = a3;
  v42 = a3 + 2;
  STACK[0x3890] = v42;
  LODWORD(v42) = 4647 * ((-63 * a3 + *(_BYTE *)(v12 + v42) + 84) ^ 0x73) + 23973873;
  LODWORD(v16) = v16 & 0xFFFF00FF | ((((v41 >> 5) | (8 * v41)) ^ 0xA1) << 8);
  LODWORD(v42) = *(unsigned __int8 *)(v15
                                    + v42
                                    - 6784
                                    * (((1266205 * (unint64_t)v42) >> 32) >> 1));
  v43 = v37 & 0xFFFF00FF | ((((v42 >> 5) | (8 * v42)) ^ 0x38) << 8);
  v44 = a3 + 9;
  STACK[0x38B0] = v44;
  LODWORD(v44) = v4 + 4647 * (*(unsigned __int8 *)(v12 + v44) ^ 0x9A);
  v45 = v9 + 4647 * (((-63 * a3 - 55) >> 1) ^ 0xC0);
  LOBYTE(v44) = (*(_BYTE *)(v15
                          + v44
                          - 6784 * (((1266205 * (unint64_t)v44) >> 32) >> 1)) ^ 0xC3)
              + 97
              * (*(_BYTE *)(v15 + v45 - 6784 * (((1266205 * (unint64_t)v45) >> 32) >> 1)) ^ 0xA2)
              + 85;
  LODWORD(v44) = 4647 * (((v44 >> 1) | ((_BYTE)v44 << 7)) ^ 0xD9) + 19140993;
  LODWORD(v44) = 4647
               * ((97
                                  * (*(_BYTE *)(v15
                                              + v44
                                              - 6784
                                              * (((1266205 * (unint64_t)v44) >> 32) >> 1)) ^ 0x27)
                                  - 46) ^ 0xC3)
               + 23973873;
  LODWORD(v44) = *(unsigned __int8 *)(v15
                                    + v44
                                    - 6784
                                    * (((1266205 * (unint64_t)v44) >> 32) >> 1));
  LODWORD(v41) = STACK[0x3AB0];
  LODWORD(STACK[0x36F8]) = v43;
  v46 = STACK[0x3AC8];
  v47 = STACK[0x39D8];
  v48 = STACK[0x3B98];
  v49 = STACK[0x3AB8];
  v50 = ((unint64_t)((v43 ^ ((v43 & v41) >> 1)) & STACK[0x39D8]) << STACK[0x3AB8]) | (((v43 ^ ((v43 & v41) >> 1)) & STACK[0x3AC8]) >> LODWORD(STACK[0x3B98]));
  LODWORD(v44) = a2 + 4647 * (((v44 >> 5) | (8 * v44)) ^ 0xFB);
  LODWORD(v44) = *(unsigned __int8 *)(v15
                                    + v44
                                    - 6784
                                    * (((1266205 * (unint64_t)v44) >> 32) >> 1))
               + 117;
  v51 = v38 & 0xFF00FFFF | (((v44 ^ 0x12 ^ (v44 >> 2) & 0x12) + 26) << 16);
  LODWORD(v44) = (v16 ^ 0x9E) & LODWORD(STACK[0x3B68]);
  LODWORD(STACK[0x36E0]) = v16 ^ 0x9E;
  LODWORD(v44) = v16 ^ 0x9E ^ (v44 >> 1);
  v52 = STACK[0x3C28];
  v53 = STACK[0x3C30];
  LODWORD(v49) = ((v44 & STACK[0x3C30]) >> STACK[0x3B78]) ^ ((unint64_t)(v44 & STACK[0x3C28]) << v49);
  LODWORD(STACK[0x37A0]) = v49;
  LODWORD(STACK[0x36E8]) = v23;
  LODWORD(v44) = v23 ^ ((v23 & v41) >> 1);
  v54 = v44 & v52;
  LODWORD(v44) = v44 & v53;
  LOBYTE(v53) = STACK[0x3B90];
  LODWORD(v52) = (v54 << v53) + (v44 >> v48);
  LODWORD(STACK[0x36F0]) = v51;
  LODWORD(v53) = (((v51 ^ ((v51 & v41) >> 1)) & v46) >> v48) | (((v51 ^ ((v51 & v41) >> 1)) & v47) << v53);
  v55 = STACK[0x3990];
  LODWORD(v44) = LODWORD(STACK[0x3990]) - LODWORD(STACK[0x3A08]);
  LODWORD(STACK[0x3798]) = v50;
  LODWORD(v44) = (-1140429665 * (v44 + v50)) ^ ((-1140429665 * (v44 + v50)) >> 16);
  LODWORD(STACK[0x37B8]) = v53;
  LODWORD(v44) = 1927903305 * (v44 - (v44 >> 8) + v53)
               - ((1927903305 * (v44 - (v44 >> 8) + v53)) >> 16);
  LODWORD(STACK[0x3790]) = v52;
  LODWORD(v44) = -2023919871 * (v44 + v52 - (v44 >> 8))
               + ((-2023919871 * ((_DWORD)v44 + (_DWORD)v52 - (v44 >> 8))) >> 16);
  v56 = 409821993 * (v53 ^ (LODWORD(STACK[0x3AE8]) - LODWORD(STACK[0x3A00])));
  v57 = -625365923 * (v56 + HIWORD(v56) + v49 - ((v56 + HIWORD(v56)) >> 8));
  v58 = 1396434765 * (v57 + HIWORD(v57) - v50 + ((v57 + HIWORD(v57)) >> 8));
  v59 = v58 + HIWORD(v58) + v52 + ((v58 + HIWORD(v58)) >> 8);
  LODWORD(v44) = 530553733 * (v44 - v49 - (v44 >> 8))
               + ((530553733 * ((_DWORD)v44 - (_DWORD)v49 - (v44 >> 8))) >> 16);
  LODWORD(v44) = v44 - (v44 >> 8) + &STACK[0x55D0];
  v60 = v44 - LODWORD(STACK[0x3A18]);
  v61 = v44;
  LODWORD(STACK[0x39F0]) = v44;
  v62 = ((-506525145 * v59) ^ ((-506525145 * v59) >> 16))
      - (((-506525145 * v59) ^ ((-506525145 * v59) >> 16)) >> 8);
  LODWORD(v44) = v62 ^ &STACK[0x55D0];
  LODWORD(STACK[0x3A10]) = v44;
  v63 = v44 + v60;
  v64 = STACK[0x3A88];
  if ((((_DWORD)v44 + v60) & 1) != 0)
    v65 = STACK[0x3A88];
  else
    v65 = STACK[0x3A20];
  v66 = STACK[0x3AE0];
  if ((v63 & 1) != 0)
    v67 = STACK[0x3A20];
  else
    v67 = STACK[0x3AE0];
  LODWORD(STACK[0x3768]) = v67;
  if ((v63 & 1) != 0)
  {
    v68 = STACK[0x3A90];
  }
  else
  {
    v66 = STACK[0x3A90];
    v68 = v64;
  }
  LODWORD(STACK[0x3AE0]) = v68;
  v69 = STACK[0x3A30];
  if ((v63 & 1) != 0)
    v70 = STACK[0x3A30];
  else
    v70 = STACK[0x39A0];
  if ((v63 & 1) != 0)
    v71 = STACK[0x39A0];
  else
    v71 = v55;
  LODWORD(STACK[0x37B0]) = v71;
  if ((v63 & 1) != 0)
  {
    v72 = STACK[0x3970];
  }
  else
  {
    v55 = STACK[0x3970];
    v72 = v69;
  }
  LODWORD(STACK[0x3A30]) = v72;
  v73 = STACK[0x3A98];
  if ((v63 & 1) != 0)
    v74 = STACK[0x3A98];
  else
    v74 = STACK[0x3C48];
  LODWORD(STACK[0x3758]) = v74;
  if ((v63 & 1) != 0)
    v75 = STACK[0x3C50];
  else
    v75 = v7;
  LODWORD(STACK[0x3760]) = v75;
  if ((v63 & 2) != 0)
    v76 = v66;
  else
    v76 = v65;
  if ((v63 & 2) != 0)
    v77 = v65;
  else
    v77 = v66;
  if ((v63 & 2) != 0)
    v78 = v55;
  else
    v78 = v70;
  if ((v63 & 2) != 0)
    v79 = v70;
  else
    v79 = v55;
  if ((v63 & 2) != 0)
    v80 = v67;
  else
    v80 = v68;
  v81 = v63 + v60;
  if ((v63 & 2) != 0)
    v82 = v72;
  else
    v82 = v71;
  v83 = STACK[0x3AA0];
  if ((v81 & 1) != 0)
    v84 = STACK[0x3AA0];
  else
    v84 = v5;
  v85 = STACK[0x3A80];
  v86 = STACK[0x3938];
  if ((v81 & 1) != 0)
    v87 = STACK[0x3A80];
  else
    v87 = STACK[0x3938];
  if ((v81 & 2) != 0)
    v88 = v87;
  else
    v88 = v84;
  if ((v81 & 2) != 0)
    v89 = v84;
  else
    v89 = v87;
  LODWORD(STACK[0x3888]) = v89;
  v90 = 8 * v61;
  v91 = -8 * v61;
  v92 = v90 & 0x18;
  v93 = (v89 >> (v91 & 0x18)) ^ (v89 << (v90 & 0x18));
  LODWORD(STACK[0x3880]) = v88;
  v94 = __ROR4__(v88, v91 & 0x18);
  if ((v91 & 0x18) == 0)
    v93 = v89;
  LODWORD(STACK[0x37E0]) = v93;
  if ((v91 & 0x18) == 0)
    v94 = v88;
  LODWORD(STACK[0x37D0]) = v94;
  if ((v63 & 2) != 0)
    v75 = v74;
  LODWORD(STACK[0x3A20]) = v76;
  v95 = (v76 << v92) ^ (v76 >> (v91 & 0x18));
  LODWORD(STACK[0x3A88]) = v80;
  v96 = __ROR4__(v80, v91 & 0x18);
  if ((v91 & 0x18) == 0)
    v96 = v80;
  LODWORD(STACK[0x37F8]) = v96;
  LODWORD(STACK[0x3A90]) = v77;
  v97 = __ROR4__(v77, v91 & 0x18);
  if ((v91 & 0x18) == 0)
    v95 = v76;
  LODWORD(STACK[0x3808]) = v95;
  if ((v91 & 0x18) == 0)
    v97 = v77;
  LODWORD(STACK[0x3800]) = v97;
  v98 = STACK[0x3B10];
  if ((v62 & 1) == 0)
    v98 = v8;
  LODWORD(STACK[0x3788]) = v98;
  v99 = STACK[0x3C58];
  if ((v62 & 1) == 0)
    v99 = STACK[0x3AF0];
  LODWORD(STACK[0x3780]) = v99;
  if ((v62 & 2) != 0)
    v98 = v99;
  LODWORD(STACK[0x39E8]) = v98;
  v100 = v91 & 0x18;
  v101 = v91;
  v102 = (v98 << v92) + (v98 >> (v91 & 0x18));
  if ((v91 & 0x18) == 0)
    v102 = v98;
  LODWORD(STACK[0x37F0]) = v102;
  v103 = v90 & 0x18;
  v104 = (v82 >> v100) + (v82 << (v90 & 0x18));
  v105 = __ROR4__(v78, v100);
  LODWORD(STACK[0x39A0]) = v78;
  if ((v90 & 0x18) != 0)
    v106 = v105;
  else
    v106 = v78;
  LODWORD(STACK[0x3848]) = v106;
  v107 = __ROR4__(v79, v100);
  LODWORD(STACK[0x3990]) = v82;
  if ((v90 & 0x18) == 0)
    v104 = v82;
  LODWORD(STACK[0x3858]) = v104;
  LODWORD(STACK[0x3970]) = v79;
  if ((v90 & 0x18) != 0)
    v108 = v107;
  else
    v108 = v79;
  LODWORD(STACK[0x3850]) = v108;
  if ((v62 & 1) != 0)
    v109 = STACK[0x3988];
  else
    v109 = STACK[0x3998];
  if ((v62 & 1) != 0)
    v110 = STACK[0x3998];
  else
    v110 = STACK[0x3978];
  if ((v62 & 1) != 0)
    v111 = STACK[0x3978];
  else
    v111 = STACK[0x3980];
  if ((v62 & 1) != 0)
    v112 = STACK[0x3980];
  else
    v112 = STACK[0x3988];
  if ((v62 & 1) != 0)
    v113 = STACK[0x3B70];
  else
    v113 = STACK[0x3AC0];
  LODWORD(STACK[0x3730]) = v113;
  v114 = STACK[0x3B88];
  if ((v62 & 1) != 0)
    v114 = STACK[0x3B80];
  LODWORD(STACK[0x3738]) = v114;
  if ((v62 & 2) != 0)
    v115 = v110;
  else
    v115 = v112;
  if ((v62 & 2) != 0)
  {
    v116 = v111;
  }
  else
  {
    v112 = v110;
    v116 = v109;
  }
  if ((v62 & 2) != 0)
    v117 = v109;
  else
    v117 = v111;
  v118 = v81 + v60;
  if ((v62 & 2) != 0)
    v113 = v114;
  v119 = v7;
  v120 = STACK[0x3A78];
  v121 = STACK[0x3860];
  if ((((_BYTE)v81 + (_BYTE)v60) & 1) != 0)
    v122 = STACK[0x3A78];
  else
    v122 = STACK[0x3860];
  v123 = STACK[0x3AA8];
  v124 = STACK[0x3940];
  if ((v118 & 1) != 0)
    v125 = STACK[0x3AA8];
  else
    v125 = STACK[0x3940];
  if ((v118 & 2) != 0)
    v126 = v125;
  else
    v126 = v122;
  LODWORD(STACK[0x3878]) = v126;
  if ((v118 & 2) != 0)
    v127 = v122;
  else
    v127 = v125;
  LODWORD(STACK[0x3870]) = v127;
  v128 = (v126 >> (v101 & 0x18)) ^ (v126 << v103);
  if ((v101 & 0x18) == 0)
    v128 = v126;
  LODWORD(STACK[0x37D8]) = v128;
  if ((v101 & 0x18) != 0)
    v127 = (v127 >> (v101 & 0x18)) + (v127 << v103);
  LODWORD(STACK[0x37E8]) = v127;
  if ((v81 & 1) != 0)
    v129 = v86;
  else
    v129 = v83;
  if ((v81 & 1) != 0)
    v130 = v5;
  else
    v130 = v85;
  if ((v81 & 2) != 0)
    v131 = v129;
  else
    v131 = v130;
  LODWORD(STACK[0x3A80]) = v131;
  v132 = v101 & 0x18;
  LODWORD(STACK[0x3A18]) = v101;
  v133 = (v131 << v103) + (v131 >> (v101 & 0x18));
  LODWORD(STACK[0x39E0]) = v113;
  v134 = __ROR4__(v113, v101 & 0x18);
  if ((v101 & 0x18) != 0)
    v113 = v134;
  LODWORD(STACK[0x37A8]) = v113;
  LODWORD(STACK[0x3868]) = v75;
  v135 = __ROR4__(v75, v132);
  if ((v101 & 0x18) != 0)
    v136 = v135;
  else
    v136 = v75;
  LODWORD(STACK[0x37C0]) = v136;
  if ((v101 & 0x18) != 0)
    v131 = v133;
  LODWORD(STACK[0x37C8]) = v131;
  LODWORD(STACK[0x3980]) = v117;
  if ((v90 & 0x18) != 0)
    v137 = (v117 << (v90 & 0x18)) ^ (v117 >> v132);
  else
    v137 = v117;
  LODWORD(STACK[0x3834]) = v137;
  v138 = __ROR4__(v115, v132);
  LODWORD(STACK[0x3988]) = v115;
  if ((v90 & 0x18) != 0)
    v139 = v138;
  else
    v139 = v115;
  LODWORD(STACK[0x3828]) = v139;
  LODWORD(STACK[0x3998]) = v116;
  if ((v90 & 0x18) != 0)
    v140 = (v116 << (v90 & 0x18)) ^ (v116 >> v132);
  else
    v140 = v116;
  LODWORD(STACK[0x3938]) = v140;
  LODWORD(STACK[0x3978]) = v112;
  if ((v90 & 0x18) != 0)
    v141 = (v112 << (v90 & 0x18)) + (v112 >> v132);
  else
    v141 = v112;
  LODWORD(STACK[0x3838]) = v141;
  v142 = STACK[0x3A48];
  v143 = STACK[0x3840];
  if ((v118 & 1) != 0)
    v144 = STACK[0x3A48];
  else
    v144 = STACK[0x3840];
  v145 = STACK[0x3A40];
  v146 = STACK[0x3820];
  if ((v118 & 1) != 0)
    v147 = STACK[0x3A40];
  else
    v147 = STACK[0x3820];
  if ((v118 & 2) != 0)
    v148 = v144;
  else
    v148 = v147;
  if ((v118 & 2) != 0)
    v149 = v147;
  else
    v149 = v144;
  LODWORD(STACK[0x36D0]) = v149;
  if ((v90 & 0x18) != 0)
    v149 = (v149 << (v90 & 0x18)) ^ (v149 >> v132);
  LODWORD(STACK[0x3818]) = v149;
  LODWORD(STACK[0x36D8]) = v148;
  if ((v90 & 0x18) != 0)
    v148 = (v148 << (v90 & 0x18)) + (v148 >> v132);
  LODWORD(STACK[0x3810]) = v148;
  LODWORD(STACK[0x3740]) = v63;
  if ((v63 & 1) != 0)
    v73 = v119;
  v150 = STACK[0x3C48];
  if ((v63 & 1) == 0)
    v150 = STACK[0x3C50];
  v151 = STACK[0x3960];
  v152 = STACK[0x3958];
  if ((v81 & 1) != 0)
    v153 = STACK[0x3958];
  else
    v153 = STACK[0x3960];
  LODWORD(STACK[0x3748]) = v153;
  v154 = STACK[0x3A38];
  if ((v81 & 1) != 0)
    v155 = STACK[0x3A38];
  else
    v155 = v152;
  LODWORD(STACK[0x3778]) = v155;
  v156 = STACK[0x3968];
  if ((v81 & 1) != 0)
    v157 = v151;
  else
    v157 = STACK[0x3968];
  LODWORD(STACK[0x3770]) = v157;
  if ((v81 & 1) != 0)
    v158 = v156;
  else
    v158 = v154;
  LODWORD(STACK[0x3A38]) = v158;
  v159 = STACK[0x3760];
  if ((v63 & 2) == 0)
    v159 = STACK[0x3758];
  LODWORD(STACK[0x3C48]) = v159;
  if ((v63 & 2) != 0)
    v160 = v73;
  else
    v160 = v150;
  LODWORD(STACK[0x3C50]) = v160;
  if ((v63 & 2) != 0)
    v161 = v150;
  else
    v161 = v73;
  v162 = STACK[0x3AE0];
  if ((v63 & 2) == 0)
    v162 = STACK[0x3768];
  LODWORD(STACK[0x3AE0]) = v162;
  if ((v81 & 2) != 0)
    v163 = v155;
  else
    v163 = v157;
  v164 = v90;
  LODWORD(STACK[0x3AD0]) = v90;
  v165 = (v163 >> v132) ^ (v163 << (v90 & 0x18));
  LODWORD(STACK[0x3968]) = v163;
  if ((v90 & 0x18) == 0)
    v165 = v163;
  LODWORD(STACK[0x3958]) = v165;
  if ((v81 & 2) != 0)
    v166 = v130;
  else
    v166 = v129;
  v167 = LODWORD(STACK[0x3A10]) + LODWORD(STACK[0x3B60]);
  LODWORD(STACK[0x3B60]) = v167;
  if ((v81 & 2) != 0)
    v168 = v158;
  else
    v168 = v153;
  v169 = STACK[0x3790];
  v170 = STACK[0x37B8];
  if ((v167 & 1) != 0)
    v171 = STACK[0x3790];
  else
    v171 = STACK[0x37B8];
  LODWORD(STACK[0x3768]) = v171;
  v172 = STACK[0x37A0];
  if ((v167 & 1) != 0)
    v173 = v170;
  else
    v173 = STACK[0x37A0];
  LODWORD(STACK[0x3760]) = v173;
  v174 = STACK[0x3798];
  if ((v167 & 1) == 0)
    v172 = STACK[0x3798];
  LODWORD(STACK[0x3758]) = v172;
  if ((v167 & 1) == 0)
    v174 = v169;
  LODWORD(STACK[0x3750]) = v174;
  if ((v167 & 2) != 0)
    v175 = v174;
  else
    v175 = v173;
  v176 = v101 & 0x18;
  v177 = __ROR4__(v175, v101 & 0x18);
  if ((v101 & 0x18) != 0)
    v175 = v177;
  LODWORD(STACK[0x3790]) = v175;
  if ((v118 & 1) != 0)
    v178 = v146;
  else
    v178 = v142;
  if ((v118 & 1) != 0)
    v179 = v121;
  else
    v179 = v123;
  if ((v118 & 1) != 0)
    v180 = v124;
  else
    v180 = v120;
  if ((v118 & 1) != 0)
    v181 = v143;
  else
    v181 = v145;
  if ((v118 & 1) != 0)
    v182 = STACK[0x3B28];
  else
    v182 = STACK[0x3B20];
  if ((v118 & 1) != 0)
    v183 = STACK[0x3B20];
  else
    v183 = STACK[0x3B30];
  if ((v118 & 1) != 0)
    v184 = STACK[0x3B30];
  else
    v184 = STACK[0x3B18];
  if ((v118 & 1) != 0)
    v185 = STACK[0x3B18];
  else
    v185 = STACK[0x3B28];
  if ((v118 & 2) != 0)
    v186 = v179;
  else
    v186 = v180;
  if ((v118 & 2) != 0)
    v187 = v180;
  else
    v187 = v179;
  if ((v118 & 2) != 0)
    v188 = v185;
  else
    v188 = v183;
  LODWORD(STACK[0x3B30]) = v188;
  if ((v118 & 2) != 0)
    v189 = v183;
  else
    v189 = v185;
  LODWORD(STACK[0x3B28]) = v189;
  if ((v118 & 2) != 0)
    v190 = v184;
  else
    v190 = v182;
  LODWORD(STACK[0x3B20]) = v190;
  if ((v118 & 2) != 0)
    v191 = v182;
  else
    v191 = v184;
  LODWORD(STACK[0x3B18]) = v191;
  if ((v118 & 2) != 0)
    v192 = v181;
  else
    v192 = v178;
  LODWORD(STACK[0x3A48]) = v192;
  if ((v118 & 2) == 0)
    v178 = v181;
  LODWORD(STACK[0x3A40]) = v178;
  LODWORD(STACK[0x39F8]) = v62;
  v193 = STACK[0x3AC0];
  if ((v62 & 1) == 0)
    v193 = STACK[0x3B80];
  v194 = STACK[0x3AF0];
  if ((v62 & 1) != 0)
  {
    v195 = STACK[0x3B88];
  }
  else
  {
    v194 = STACK[0x3B10];
    v195 = STACK[0x3B70];
  }
  if ((v62 & 1) != 0)
    v196 = STACK[0x39C8];
  else
    v196 = STACK[0x3C58];
  if ((v62 & 2) != 0)
    v197 = STACK[0x3730];
  else
    v197 = STACK[0x3738];
  if ((v62 & 2) != 0)
    v198 = v194;
  else
    v198 = v196;
  LODWORD(STACK[0x3C58]) = v198;
  if ((v62 & 2) != 0)
    v199 = v196;
  else
    v199 = v194;
  if ((v62 & 2) != 0)
    v200 = STACK[0x3788];
  else
    v200 = STACK[0x3780];
  if ((v62 & 2) != 0)
    v201 = v195;
  else
    v201 = v193;
  if ((v62 & 2) != 0)
    v202 = v193;
  else
    v202 = v195;
  v204 = v164 & 0x18;
  v203 = (v164 & 0x18) == 0;
  v205 = v202 << (v164 & 0x18);
  v206 = v202;
  LODWORD(STACK[0x3B70]) = v202;
  v207 = v205 ^ (v202 >> v176);
  LODWORD(STACK[0x3B88]) = v197;
  v208 = (v197 >> v176) ^ (v197 << v204);
  v209 = v161;
  LODWORD(STACK[0x3A98]) = v161;
  v210 = (v161 >> v176) + (v161 << v204);
  v211 = STACK[0x3C50];
  v212 = (LODWORD(STACK[0x3C50]) << v204) ^ (LODWORD(STACK[0x3C50]) >> v176);
  v213 = v166;
  LODWORD(STACK[0x3AA0]) = v166;
  v214 = (v166 >> v176) + (v166 << v204);
  LODWORD(STACK[0x3AA8]) = v187;
  v215 = v186;
  LODWORD(STACK[0x3A78]) = v186;
  v216 = (v186 << v204) ^ (v186 >> v176);
  LODWORD(STACK[0x3AF0]) = v200;
  v217 = v199;
  LODWORD(STACK[0x3B10]) = v199;
  v218 = (v199 << v204) + (v199 >> v176);
  v219 = STACK[0x3AE0];
  LODWORD(STACK[0x3B80]) = v201;
  v220 = __ROR4__(v201, v176);
  if (v203)
    v221 = v201;
  else
    v221 = v220;
  if (v203)
  {
    v207 = v206;
    v208 = v197;
  }
  LODWORD(STACK[0x3788]) = v208;
  if (v203)
    v222 = v209;
  else
    v222 = v210;
  LODWORD(STACK[0x3798]) = v222;
  v223 = __ROR4__(STACK[0x3C48], v176);
  if (v203)
    v223 = STACK[0x3C48];
  LODWORD(STACK[0x37A0]) = v223;
  if (v203)
    v224 = v211;
  else
    v224 = v212;
  if (v203)
    v225 = v213;
  else
    v225 = v214;
  LODWORD(STACK[0x37B8]) = v225;
  if (v203)
    v226 = v187;
  else
    v226 = (v187 >> v176) ^ (v187 << v204);
  LODWORD(STACK[0x3820]) = v226;
  if (v203)
    v227 = v215;
  else
    v227 = v216;
  v228 = STACK[0x3C58];
  v229 = __ROR4__(STACK[0x3C58], v176);
  if (!v203)
    v217 = v218;
  LODWORD(STACK[0x3840]) = v217;
  if (v203)
    v230 = v200;
  else
    v230 = (v200 >> v176) + (v200 << v204);
  LODWORD(STACK[0x3940]) = v230;
  if (v203)
    v231 = v228;
  else
    v231 = v229;
  LODWORD(STACK[0x3860]) = v231;
  if (v203)
    v232 = v219;
  else
    v232 = (v219 << v204) + (v219 >> v176);
  LODWORD(STACK[0x3AC0]) = v232;
  LODWORD(STACK[0x3960]) = v168;
  if (v203)
    v233 = v168;
  else
    v233 = (v168 >> v176) ^ (v168 << v204);
  LODWORD(STACK[0x39C8]) = v233;
  v234 = STACK[0x3740];
  if ((STACK[0x3740] & 1) != 0)
    v235 = STACK[0x3B50];
  else
    v235 = STACK[0x3B58];
  if ((v234 & 1) != 0)
    v236 = STACK[0x3B58];
  else
    v236 = STACK[0x3C38];
  if ((v234 & 1) != 0)
    v237 = STACK[0x3C38];
  else
    v237 = STACK[0x3AD8];
  if ((v234 & 1) != 0)
    v238 = STACK[0x3AD8];
  else
    v238 = STACK[0x3B50];
  v239 = STACK[0x3C60];
  if ((v81 & 1) != 0)
    v240 = STACK[0x3C60];
  else
    v240 = STACK[0x3B40];
  if ((v81 & 1) != 0)
    v241 = STACK[0x3B40];
  else
    v241 = STACK[0x3AF8];
  if ((v81 & 1) != 0)
    v242 = STACK[0x3AF8];
  else
    v242 = STACK[0x3B00];
  if ((v81 & 1) != 0)
    v239 = STACK[0x3B00];
  v243 = STACK[0x3C40];
  if ((v81 & 1) != 0)
    v244 = STACK[0x3A68];
  else
    v244 = STACK[0x3C40];
  if ((v81 & 1) != 0)
    v245 = STACK[0x3A58];
  else
    v245 = STACK[0x3A68];
  if ((v81 & 1) != 0)
    v246 = STACK[0x3B08];
  else
    v246 = STACK[0x3A58];
  if ((v81 & 1) != 0)
  {
    v247 = STACK[0x3A70];
  }
  else
  {
    v243 = STACK[0x3B08];
    v247 = STACK[0x3AE8];
  }
  v248 = STACK[0x3A60];
  if ((v81 & 1) != 0)
    v249 = STACK[0x3A60];
  else
    v249 = STACK[0x3A70];
  v250 = STACK[0x3A50];
  if ((v81 & 1) != 0)
  {
    v248 = STACK[0x3A50];
    v250 = STACK[0x3AE8];
  }
  if ((v81 & 2) != 0)
    v251 = v250;
  else
    v251 = v249;
  LODWORD(STACK[0x3A70]) = v251;
  if ((v234 & 2) != 0)
    v252 = v237;
  else
    v252 = v235;
  LODWORD(STACK[0x3B58]) = v252;
  if ((v234 & 2) == 0)
    v235 = v237;
  LODWORD(STACK[0x3AD8]) = v235;
  if ((v234 & 2) != 0)
    v253 = v238;
  else
    v253 = v236;
  LODWORD(STACK[0x3C38]) = v253;
  if ((v234 & 2) != 0)
    v254 = v236;
  else
    v254 = v238;
  LODWORD(STACK[0x3B50]) = v254;
  v255 = STACK[0x37B0];
  if ((v234 & 2) == 0)
    v255 = STACK[0x3A30];
  LODWORD(STACK[0x3A30]) = v255;
  LODWORD(STACK[0x37B0]) = v81;
  if ((v81 & 2) != 0)
    v256 = v242;
  else
    v256 = v240;
  LODWORD(STACK[0x3B40]) = v256;
  if ((v81 & 2) != 0)
    v257 = v240;
  else
    v257 = v242;
  LODWORD(STACK[0x3B00]) = v257;
  if ((v81 & 2) != 0)
    v258 = STACK[0x3770];
  else
    v258 = STACK[0x3778];
  if ((v81 & 2) != 0)
    v259 = v239;
  else
    v259 = v241;
  LODWORD(STACK[0x3AF8]) = v259;
  if ((v81 & 2) != 0)
    v260 = v241;
  else
    v260 = v239;
  LODWORD(STACK[0x3C60]) = v260;
  v261 = STACK[0x3A38];
  if ((v81 & 2) != 0)
    v261 = STACK[0x3748];
  LODWORD(STACK[0x3A38]) = v261;
  if ((v81 & 2) != 0)
    v262 = v246;
  else
    v262 = v244;
  LODWORD(STACK[0x3C40]) = v262;
  if ((v81 & 2) != 0)
    v263 = v244;
  else
    v263 = v246;
  LODWORD(STACK[0x3A58]) = v263;
  if ((v81 & 2) != 0)
    v264 = v243;
  else
    v264 = v245;
  LODWORD(STACK[0x3A68]) = v264;
  if ((v81 & 2) != 0)
    v265 = v245;
  else
    v265 = v243;
  LODWORD(STACK[0x3B08]) = v265;
  if ((v81 & 2) != 0)
    v266 = v249;
  else
    v266 = v250;
  LODWORD(STACK[0x3A50]) = v266;
  if ((v81 & 2) != 0)
    v267 = v247;
  else
    v267 = v248;
  LODWORD(STACK[0x3A60]) = v267;
  if ((v81 & 2) != 0)
    v268 = v248;
  else
    v268 = v247;
  LODWORD(STACK[0x3AE8]) = v268;
  v269 = STACK[0x39F8];
  v270 = STACK[0x3C78];
  v271 = STACK[0x3B48];
  if ((STACK[0x39F8] & 1) != 0)
    v272 = STACK[0x3C78];
  else
    v272 = STACK[0x3B48];
  v273 = STACK[0x3B38];
  if ((v269 & 1) != 0)
  {
    v270 = STACK[0x3B38];
    v273 = STACK[0x3C68];
  }
  else
  {
    v271 = STACK[0x3C68];
  }
  v274 = STACK[0x3B60];
  v275 = STACK[0x3768];
  if ((STACK[0x3B60] & 2) != 0)
    v276 = STACK[0x3768];
  else
    v276 = STACK[0x3758];
  if ((v274 & 2) != 0)
    v275 = STACK[0x3758];
  v277 = STACK[0x3760];
  if ((v274 & 2) == 0)
    v277 = STACK[0x3750];
  v278 = STACK[0x3A18];
  v279 = STACK[0x3A18] & 0x18;
  v280 = (v276 >> v279) + (v276 << v204);
  if ((STACK[0x3A18] & 0x18) == 0)
    v280 = v276;
  v281 = (v275 >> v279) + (v275 << v204);
  if ((v278 & 0x18) == 0)
    v281 = v275;
  if ((v269 & 2) != 0)
    v282 = v270;
  else
    v282 = v271;
  LODWORD(STACK[0x3C68]) = v282;
  if ((v269 & 2) != 0)
    v270 = v271;
  LODWORD(STACK[0x3C78]) = v270;
  if ((v269 & 2) != 0)
    v283 = v272;
  else
    v283 = v273;
  LODWORD(STACK[0x3B38]) = v283;
  if ((v269 & 2) != 0)
    v272 = v273;
  LODWORD(STACK[0x3B48]) = v272;
  v284 = LODWORD(STACK[0x3A10]) + LODWORD(STACK[0x3A28]);
  v285 = LODWORD(STACK[0x3A10]) + LODWORD(STACK[0x3948]);
  v286 = STACK[0x3AD0] & 0x18;
  v287 = (v277 >> v279) + (v277 << v286);
  if ((STACK[0x3AD0] & 0x18) == 0)
    v287 = v277;
  v288 = LODWORD(STACK[0x35F0]) ^ v221 ^ v287;
  v289 = LODWORD(STACK[0x35E8]) ^ v207 ^ LODWORD(STACK[0x3790]);
  v290 = LODWORD(STACK[0x35E0]) ^ LODWORD(STACK[0x3788]) ^ v281;
  v291 = 4647 * ((v290 + 111) ^ 0x1C) + 4767822;
  v292 = LODWORD(STACK[0x35D8]) ^ LODWORD(STACK[0x37A8]) ^ v280;
  LOBYTE(v291) = *(_BYTE *)(STACK[0x3C18] + v291
                                          - 6784 * (((1266205 * (unint64_t)v291) >> 32) >> 1)) ^ 0xE3;
  v293 = (v291 >> 3) | (32 * v291);
  v294 = 4647 * (((v289 >> 9) & 0x80 | (v289 >> 17) & 0x7F) ^ 0xD9) + 19140993;
  v295 = v294 - 6784 * (((1266205 * (unint64_t)v294) >> 32) >> 1);
  v296 = 4647 * ((HIBYTE(v292) + 111) ^ 0x36) + 17937420;
  LOBYTE(v291) = *(_BYTE *)(STACK[0x3C18]
                          + 4647 * (BYTE1(v292) ^ 0xFE)
                          + 13123128
                          - 6784
                          * (((1266205 * (unint64_t)(4647 * (BYTE1(v292) ^ 0xFEu) + 13123128)) >> 32) >> 1))
               - 71;
  v297 = v291 ^ ((_BYTE)v291 << 6) ^ (4 * v291);
  LOBYTE(v296) = *(_BYTE *)(STACK[0x3C18] + v296
                                          - 6784 * (((1266205 * (unint64_t)v296) >> 32) >> 1)) ^ 0xE;
  HIDWORD(v298) = *((_DWORD *)&STACK[0x55D0] + ((v296 >> 3) | (32 * v296)));
  LODWORD(v298) = HIDWORD(v298);
  v299 = (v298 >> 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v290)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ (LOBYTE(STACK[0x35E8]) ^ v207 ^ LOBYTE(STACK[0x3790]))), 16) ^ *((_DWORD *)&STACK[0x55D0]+ BYTE2(v288));
  v300 = v274
       + (*((_DWORD *)&STACK[0x55D0] + BYTE2(v290)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v289)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v288 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + (LOBYTE(STACK[0x35D8]) ^ LOBYTE(STACK[0x37A8]) ^ v280)), 16))
       - v284;
  v301 = LODWORD(STACK[0x3A10]) + LODWORD(STACK[0x3A28]);
  LODWORD(STACK[0x3A28]) = v284;
  v302 = LODWORD(STACK[0x35C8]) ^ v224;
  v303 = STACK[0x3C18];
  v304 = v302 ^ v300;
  v305 = (LODWORD(STACK[0x35C0]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v293), 16)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v288)), 8) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v292)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v289 >> 22) & 0x3FC)), 24) ^ LODWORD(STACK[0x3798]);
  v306 = LODWORD(STACK[0x35D0]) ^ STACK[0x3690] ^ LODWORD(STACK[0x37A0]) ^ (v274 + v299 - v285);
  LODWORD(v288) = STACK[0x3680] ^ LODWORD(STACK[0x3698]) ^ LODWORD(STACK[0x39D0]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ ((v297 ^ 0xFE) + 26)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ v288), 16) ^ *((_DWORD *)&STACK[0x55D0] + (97 * (*(_BYTE *)(STACK[0x3C18] + v295) ^ 0x27))) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v290 >> 22) & 0x3FC)), 24) ^ LODWORD(STACK[0x37C0]);
  v307 = 4647 * ((BYTE2(v306) + 111) ^ 0x1C) + 4767822;
  v308 = 4647 * ((HIBYTE(v304) + 111) ^ 0x36) + 17937420;
  LOBYTE(v308) = *(_BYTE *)(STACK[0x3C18] + v308
                                          - 6784 * (((1266205 * (unint64_t)v308) >> 32) >> 1)) ^ 0xE;
  v309 = (v308 >> 3) | (32 * v308);
  v310 = 4647 * (((v304 >> 9) & 0x80 | (v304 >> 17) & 0x7F) ^ 0xD9) + 19140993;
  LOBYTE(v307) = *(_BYTE *)(STACK[0x3C18] + v307
                                          - 6784 * (((1266205 * (unint64_t)v307) >> 32) >> 1)) ^ 0xE3;
  v311 = LODWORD(STACK[0x35B8]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v288)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v306 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v305), 16) ^ (*((_DWORD *)&STACK[0x55D0] + (97 * (*(_BYTE *)(STACK[0x3C18] + v310 - 6784 * (((1266205 * (unint64_t)v310) >> 32) >> 1)) ^ 0x27))) ^ LODWORD(STACK[0x37C8]));
  v312 = LODWORD(STACK[0x35B0]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v288), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v305 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x55D0] + ((v307 >> 3) | (32 * v307))) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v304)), 8) ^ LODWORD(STACK[0x37D0]) ^ 0xC4u;
  v313 = (LODWORD(STACK[0x35A8]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v306)), 8)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v304), 16) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v305)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + ((*(_BYTE *)(STACK[0x3C18] + 4647 * (BYTE3(v288) ^ 0x9A) + 25186740 - 6784 * (((1266205 * (unint64_t)(4647 * (BYTE3(v288) ^ 0x9A) + 25186740)) >> 32) >> 1)) ^ 0xC3) + 85)), 24) ^ LODWORD(STACK[0x37B8]);
  v314 = LODWORD(STACK[0x35A0]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ (LOBYTE(STACK[0x35D0]) ^ STACK[0x3690] ^ LOBYTE(STACK[0x37A0]) ^ (v274 + v299 - v285))), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v305)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v309), 24) ^ (*((_DWORD *)&STACK[0x55D0] + BYTE2(v288)) ^ LODWORD(STACK[0x37E0]));
  v315 = 4647 * (((v311 >> 1) | ((v311 & 1) << 7)) ^ 0x40) + 15539568;
  LODWORD(v306) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + 4647 * v312
                                     + 14331348
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * v312
                                                                         + 14331348)) >> 32) >> 1))
                + 117;
  v316 = *((_DWORD *)&STACK[0x55D0] + BYTE2(v311)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v313), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v312 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v314)), 8);
  v317 = *((_DWORD *)&STACK[0x55D0] + ((v306 ^ 0x12 ^ (v306 >> 2) & 0x12) + 26));
  v318 = (LODWORD(STACK[0x3638]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v311)), 8)) ^ LODWORD(STACK[0x37D8]) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v312)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v314), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v313 >> 22) & 0x3FC)), 24);
  v319 = (LODWORD(STACK[0x3598]) ^ LODWORD(STACK[0x37E8])) ^ __ROR4__(v317, 16) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ BYTE1(v313)), 8) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v314)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v311 >> 22) & 0x3FC)), 24);
  v320 = LODWORD(STACK[0x3648]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v312)), 8) ^ v227 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v314 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + (97 * (*(_BYTE *)(STACK[0x3C18] + v315 - 6784 * (((1266205 * (unint64_t)v315) >> 32) >> 1)) ^ 0xA2))), 16) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v313));
  LODWORD(v314) = LODWORD(STACK[0x3660]) + v316;
  v321 = LODWORD(STACK[0x3590]) ^ LODWORD(STACK[0x3820]);
  v322 = v321 ^ v314;
  LODWORD(v314) = 4647
                * ((((v321 ^ v314) >> 1) & 0x7F | (((v321 ^ v314) & 1) << 7)) ^ 0x40)
                + 15539568;
  v323 = v314 - 6784 * (((1266205 * (unint64_t)v314) >> 32) >> 1);
  LODWORD(v314) = *(_DWORD *)((char *)&STACK[0x55D0] + ((v322 >> 22) & 0x3FC));
  v324 = 4647 * (((v314 >> 17) & 0x80 | (v314 >> 25)) ^ 0x40) + 15539568;
  v325 = *(_DWORD *)((char *)&STACK[0x55D0] + ((v320 >> 22) & 0x3FC));
  v326 = *(_BYTE *)(STACK[0x3C18]
                  + 4647 * (HIBYTE(v325) ^ 0xFE)
                  + 13123128
                  - 6784
                  * (((1266205 * (unint64_t)(4647 * (HIBYTE(v325) ^ 0xFE) + 13123128)) >> 32) >> 1))
       - 71;
  v327 = (97
                         * (*(_BYTE *)(STACK[0x3C18]
                                     + v324
                                     - 6784 * (((1266205 * (unint64_t)v324) >> 32) >> 1)) ^ 0xA2)) | ((_DWORD)v314 << 8);
  v328 = LODWORD(STACK[0x3588]) ^ LODWORD(STACK[0x3840]) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v318)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v319), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v322)), 8) ^ (((v326 ^ (v326 << 6) ^ (4 * v326) ^ 0xFE) + 26) | (v325 << 8));
  v329 = LODWORD(STACK[0x3580]) ^ LODWORD(STACK[0x3860]) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v319)) ^ v327 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v318), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v320)), 8);
  v330 = LODWORD(STACK[0x3578]) ^ LODWORD(STACK[0x3940]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ (97* (*(_BYTE *)(STACK[0x3C18] + v323) ^ 0xA2))), 16) ^ (*((_DWORD *)&STACK[0x55D0] + BYTE1(v318)) >> 8) ^ (*((_DWORD *)&STACK[0x55D0] + BYTE1(v318)) << 24) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v319 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v320));
  v331 = (LODWORD(STACK[0x3570]) ^ LODWORD(STACK[0x37F0])) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0]+ ((v318 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ BYTE1(v319)), 8) ^ *((_DWORD *)&STACK[0x55D0]+ BYTE2(v322)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v320), 16);
  v332 = v330 ^ 0x9A00u;
  LODWORD(v319) = 4647 * ((BYTE2(v329) + 111) ^ 0x1C) + 4767822;
  LOBYTE(v319) = *(_BYTE *)(STACK[0x3C18]
                          + v319
                          - 6784 * (((1266205 * (unint64_t)v319) >> 32) >> 1)) ^ 0xE3;
  LOBYTE(v325) = (v319 >> 3) | (32 * v319);
  v333 = (LODWORD(STACK[0x3640]) ^ LODWORD(STACK[0x3AC0])) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v331)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ v329), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v332 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x55D0]+ BYTE2(v328));
  v334 = (LODWORD(STACK[0x3568]) ^ LODWORD(STACK[0x37F8])) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0]+ ((v331 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ ((*(_BYTE *)(STACK[0x3C18] + 4647 * BYTE1(v332) + 25186740 - 6784 * (((1266205 * (unint64_t)(4647 * BYTE1(v332) + 25186740)) >> 32) >> 1)) ^ 0xC3) + 85)), 8) ^ *((_DWORD *)&STACK[0x55D0]+ v325) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v328), 16);
  v335 = (LODWORD(STACK[0x3560]) ^ LODWORD(STACK[0x3800])) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v329)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ v330), 16) ^ *((_DWORD *)&STACK[0x55D0]+ (((*(_BYTE *)(STACK[0x3C18] + 4647 * (BYTE2(v331) ^ 0xB8) + 9544938 - 6784 * (((1266205 * (unint64_t)(4647 * (BYTE2(v331) ^ 0xB8u) + 9544938)) >> 32) >> 1)) - 87) ^ 0xFB) + 85)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v328 >> 22) & 0x3FC)), 24);
  LODWORD(v329) = LODWORD(STACK[0x3628]) ^ LODWORD(STACK[0x3808]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v331), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0]+ ((v329 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ BYTE1(v328)), 8) ^ *((_DWORD *)&STACK[0x55D0]+ BYTE2(v332));
  LODWORD(v328) = 4647 * ((BYTE3(v329) + 111) ^ 0x1C) + 4767822;
  HIDWORD(v298) = *((_DWORD *)&STACK[0x55D0] + BYTE1(v335));
  LODWORD(v298) = HIDWORD(v298);
  LODWORD(v332) = (v298 >> 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v334), 16) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v333));
  HIDWORD(v298) = *(_DWORD *)((char *)&STACK[0x55D0] + ((v334 >> 22) & 0x3FC));
  LODWORD(v298) = HIDWORD(v298);
  LOBYTE(v328) = *(_BYTE *)(STACK[0x3C18]
                          + v328
                          - 6784 * (((1266205 * (unint64_t)v328) >> 32) >> 1)) ^ 0xE3;
  v336 = (v298 >> 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v335), 16) ^ *((_DWORD *)&STACK[0x55D0]
                                                                                            + BYTE2(v329)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v333)), 8);
  LODWORD(v328) = *((_DWORD *)&STACK[0x55D0] + ((v328 >> 3) | (32 * v328)));
  v337 = 4647 * (((v328 >> 17) & 0x80 | (v328 >> 25)) ^ 0x40) + 15539568;
  LODWORD(v328) = v332 ^ ((97
                                          * (*(_BYTE *)(STACK[0x3C18]
                                                      + v337
                                                      - 6784
                                                      * (((1266205 * (unint64_t)v337) >> 32) >> 1)) ^ 0xA2)) | ((_DWORD)v328 << 8));
  LODWORD(v332) = *(_DWORD *)((char *)&STACK[0x55D0] + ((v333 >> 22) & 0x3FC));
  LODWORD(STACK[0x3948]) = v285;
  v338 = v328 - (v285 + v301);
  HIDWORD(v298) = *((_DWORD *)&STACK[0x55D0] + v329);
  LODWORD(v298) = HIDWORD(v298);
  LODWORD(v328) = (v298 >> 16) ^ __ROR4__(v332, 24);
  LODWORD(v332) = *(_DWORD *)((char *)&STACK[0x55D0] + ((v335 >> 22) & 0x3FC));
  LODWORD(v335) = v328 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v334)), 8) ^ *((_DWORD *)&STACK[0x55D0]
                                                                                  + BYTE2(v335));
  v339 = *((_DWORD *)&STACK[0x55D0] + BYTE2(v334)) ^ __ROR4__(v332, 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v329)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ v333), 16);
  v341 = v278 & 0x18;
  v340 = (v278 & 0x18) == 0;
  LODWORD(STACK[0x3A10]) = (LODWORD(STACK[0x3C60]) >> (v278 & 0x18)) + (LODWORD(STACK[0x3C60]) << v286);
  LODWORD(STACK[0x3940]) = (LODWORD(STACK[0x3C78]) >> (v278 & 0x18)) ^ (LODWORD(STACK[0x3C78]) << v286);
  LODWORD(STACK[0x3860]) = (LODWORD(STACK[0x3C68]) << v286) ^ (LODWORD(STACK[0x3C68]) >> (v278 & 0x18));
  LODWORD(STACK[0x3800]) = (LODWORD(STACK[0x3C38]) >> (v278 & 0x18)) ^ (LODWORD(STACK[0x3C38]) << v286);
  LODWORD(STACK[0x37F0]) = (LODWORD(STACK[0x3C40]) >> (v278 & 0x18)) + (LODWORD(STACK[0x3C40]) << v286);
  v342 = STACK[0x3B08];
  LODWORD(STACK[0x37E8]) = (LODWORD(STACK[0x3B08]) << v286) + (LODWORD(STACK[0x3B08]) >> (v278 & 0x18));
  LODWORD(v328) = v338 + 2 * LODWORD(STACK[0x3B60]);
  v343 = v335;
  LODWORD(STACK[0x37F8]) = v335;
  v344 = v328;
  LODWORD(STACK[0x3808]) = v328;
  LODWORD(STACK[0x37D8]) = v336;
  LODWORD(STACK[0x37E0]) = v339;
  v345 = v339 - 400253566 + ((25285382 - v336 + (v328 ^ ((v335 ^ 0x1498C1C2) - 990268656))) ^ 0x4FFDF204);
  v346 = v258;
  v347 = (v258 >> v341) + (v258 << v286);
  v348 = STACK[0x3A48];
  v349 = (v348 << v286) ^ (v348 >> v341);
  v350 = STACK[0x3A40];
  v351 = STACK[0x3A30];
  v352 = (v351 << v286) + (v351 >> v341);
  LODWORD(STACK[0x3AC0]) = v345;
  v353 = __ROR4__(v345 ^ LODWORD(STACK[0x3AE8]), v341);
  if (v340)
    v354 = v345 ^ LODWORD(STACK[0x3AE8]);
  else
    v354 = v353;
  LODWORD(STACK[0x3820]) = v354;
  v355 = v345 ^ LODWORD(STACK[0x3A60]);
  if (v340)
  {
    v356 = v345 ^ LODWORD(STACK[0x3A50]);
  }
  else
  {
    v355 = (v355 >> v341) ^ (v355 << v286);
    v356 = ((v345 ^ LODWORD(STACK[0x3A50])) << v286) ^ ((v345 ^ LODWORD(STACK[0x3A50])) >> v341);
  }
  v357 = LODWORD(STACK[0x3550]) ^ LODWORD(STACK[0x3958]) ^ v344;
  v358 = __ROR4__(STACK[0x3A38], v341);
  if (v340)
    v358 = STACK[0x3A38];
  v359 = LODWORD(STACK[0x3540]) ^ v358 ^ v343;
  v360 = *(_DWORD *)((char *)&STACK[0x55D0] + ((v359 >> 22) & 0x3FC));
  v361 = 4647 * ((HIBYTE(v360) + 111) ^ 0x1C) + 4767822;
  v362 = *(unsigned __int8 *)(v303
                            + 4647 * (BYTE1(v357) ^ 0xC4)
                            + 14331348
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (BYTE1(v357) ^ 0xC4u) + 14331348)) >> 32) >> 1))
       + 117;
  v363 = v362 ^ 0x12 ^ (v362 >> 2) & 0x12;
  LOBYTE(v361) = *(_BYTE *)(v303 + v361 - 6784 * (((1266205 * (unint64_t)v361) >> 32) >> 1)) ^ 0xE3;
  v364 = ((v361 >> 3) | (32 * v361)) | (v360 << 8);
  v365 = *(_DWORD *)((char *)&STACK[0x55D0] + ((v357 >> 22) & 0x3FC));
  v366 = *(unsigned __int8 *)(v303
                            + 4647 * (HIBYTE(v365) ^ 0xC4)
                            + 14331348
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (HIBYTE(v365) ^ 0xC4) + 14331348)) >> 32) >> 1))
       + 117;
  v367 = ((v366 ^ 0x12 ^ (v366 >> 2) & 0x12) + 26) | (v365 << 8);
  LODWORD(STACK[0x3958]) = v346;
  if (v340)
    v347 = v346;
  v368 = LODWORD(STACK[0x3548]) ^ v347 ^ v339;
  if (v340)
    v369 = v350;
  else
    v369 = (v350 << v286) + (v350 >> v341);
  v370 = LODWORD(STACK[0x3558]) ^ LODWORD(STACK[0x39C8]) ^ v336;
  v371 = LODWORD(STACK[0x3538]) ^ v369 ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v368)) ^ v364 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v370)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v357), 16);
  v372 = (LODWORD(STACK[0x3530]) ^ LODWORD(STACK[0x3810])) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0]+ ((v368 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x55D0]+ BYTE2(v370)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v359), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + (v363 + 26)), 8);
  v373 = LODWORD(STACK[0x3528]) ^ LODWORD(STACK[0x3818]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ (LOBYTE(STACK[0x3558]) ^ LOBYTE(STACK[0x39C8]) ^ v336)), 16) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v359)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v368)), 8) ^ v367;
  if (v340)
    v374 = v348;
  else
    v374 = v349;
  v375 = LODWORD(STACK[0x3520]) ^ v374 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v370 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v368), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v359)), 8) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v357));
  v376 = 4647 * ((((v375 & 1) << 7) | (v375 >> 1)) ^ 0x40) + 15539568;
  v377 = v376 - 6784 * (((1266205 * (unint64_t)v376) >> 32) >> 1);
  v378 = *(unsigned __int8 *)(v303
                            + 4647 * (v373 ^ 0xC4)
                            + 14331348
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647 * (v373 ^ 0xC4u) + 14331348)) >> 32) >> 1))
       + 117;
  v379 = STACK[0x36A8] ^ STACK[0x3668] ^ LODWORD(STACK[0x39D0]) ^ LODWORD(STACK[0x3828]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v371), 16) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v375)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v372 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v373)), 8);
  v380 = LODWORD(STACK[0x3518]) ^ LODWORD(STACK[0x3834]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ ((v378 ^ 0x12 ^ (v378 >> 2) & 0x12) + 26)), 16) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v372)) ^ ((((*(_BYTE *)(v303 + 4647 * (HIBYTE(*(_DWORD *)((char *)&STACK[0x55D0] + ((v371 >> 22) & 0x3FC))) ^ 0xB8) + 9544938 - 6784 * (((1266205 * (unint64_t)(4647 * (HIBYTE(*(_DWORD *)((char *)&STACK[0x55D0] + ((v371 >> 22) & 0x3FC))) ^ 0xB8u) + 9544938)) >> 32) >> 1)) - 87) ^ 0xFB) + 85) | (*(_DWORD *)((char *)&STACK[0x55D0] + ((v371 >> 22) & 0x3FC)) << 8)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v375)), 8);
  v381 = LODWORD(STACK[0x3510]) ^ LODWORD(STACK[0x3838]) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v371)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v372)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v373 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + (97 * (*(_BYTE *)(v303 + v377) ^ 0xA2))), 16);
  v382 = (LODWORD(STACK[0x3508]) ^ LODWORD(STACK[0x3938])) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v371)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0]+ ((v375 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x55D0]+ BYTE2(v373)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v372), 16);
  v383 = v381 ^ 0xFE0000u;
  LODWORD(v375) = 4647 * ((HIBYTE(v380) + 111) ^ 0x36) + 17937420;
  LOBYTE(v375) = *(_BYTE *)(v303
                          + v375
                          - 6784 * (((1266205 * (unint64_t)v375) >> 32) >> 1)) ^ 0xE;
  v384 = (v375 >> 3) | (32 * v375);
  LOBYTE(v378) = *(_BYTE *)(v303
                          + 4647 * BYTE2(v383)
                          + 13123128
                          - 6784
                          * (((1266205 * (unint64_t)(4647 * BYTE2(v383) + 13123128)) >> 32) >> 1))
               - 71;
  v385 = v378 ^ ((_BYTE)v378 << 6) ^ (4 * v378);
  v386 = LODWORD(STACK[0x39D0]) ^ LODWORD(STACK[0x35F8]) ^ STACK[0x3670] ^ LODWORD(STACK[0x3848]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v383 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v382), 16) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v380)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v379)), 8);
  v387 = STACK[0x39D0];
  v388 = LODWORD(STACK[0x3950]) ^ LODWORD(STACK[0x35F8]) ^ LODWORD(STACK[0x39D0]) ^ LODWORD(STACK[0x3850]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v383)), 8) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v382)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v379 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v380), 16);
  if (v340)
    v389 = v351;
  else
    v389 = v352;
  v390 = LODWORD(STACK[0x3500]) ^ v389 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v380)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v382 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v379), 16) ^ *((_DWORD *)&STACK[0x55D0] + ((v385 ^ 0xFE) + 26));
  v391 = 4647 * ((HIBYTE(v388) + 111) ^ 0x1C) + 4767822;
  v392 = LODWORD(STACK[0x39D0]) ^ STACK[0x39C0] ^ STACK[0x3670] ^ LODWORD(STACK[0x3858]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ v381), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v384), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v382)), 8) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v379));
  v393 = *(_BYTE *)(v303 + v391 - 6784 * (((1266205 * (unint64_t)v391) >> 32) >> 1)) ^ 0xE3;
  v394 = 465 * ((v393 >> 3) | (32 * v393));
  v395 = LODWORD(STACK[0x3650]) ^ LODWORD(STACK[0x39B8]);
  v396 = LODWORD(STACK[0x3620]) ^ v395;
  v397 = v396 ^ v356 ^ *((_DWORD *)&STACK[0x4900]
                       + (465 * BYTE1(v386)
                                      - 524 * ((8196503 * (unint64_t)(465 * BYTE1(v386))) >> 32))) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (v394 - 524 * ((8196503 * (unint64_t)v394) >> 32))), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (465 * BYTE2(v390) - 524 * ((8196503 * (unint64_t)(465 * BYTE2(v390))) >> 32))), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (465 * v392 - 524 * ((8196503 * (unint64_t)(465 * v392)) >> 32))), 8);
  if (v340)
    v398 = STACK[0x3C60];
  else
    v398 = STACK[0x3A10];
  if (v340)
    v399 = STACK[0x3C78];
  else
    v399 = STACK[0x3940];
  v400 = STACK[0x3860];
  if (v340)
    v400 = STACK[0x3C68];
  LODWORD(STACK[0x37D0]) = v400;
  v401 = STACK[0x3B48];
  v402 = __ROR4__(STACK[0x3B48], v341);
  if (!v340)
    v401 = v402;
  LODWORD(STACK[0x3810]) = v401;
  v403 = STACK[0x3C38];
  if (!v340)
    v403 = STACK[0x3800];
  LODWORD(STACK[0x3818]) = v403;
  v404 = __ROR4__(STACK[0x3B58], v341);
  if (v340)
    v404 = STACK[0x3B58];
  v405 = STACK[0x3B50];
  v406 = __ROR4__(STACK[0x3B50], v341);
  if (!v340)
    v405 = v406;
  LODWORD(STACK[0x3828]) = v405;
  v407 = STACK[0x37E8];
  if (v340)
    v407 = v342;
  LODWORD(STACK[0x3860]) = v407;
  v408 = STACK[0x37F0];
  if (v340)
    v408 = STACK[0x3C40];
  LODWORD(STACK[0x3834]) = v408;
  v409 = STACK[0x3AD0];
  v410 = __ROR4__(v397, STACK[0x3AD0] & 0x18);
  if ((STACK[0x3AD0] & 0x18) != 0)
    v411 = v410;
  else
    v411 = v397;
  LODWORD(STACK[0x3A10]) = v411;
  LODWORD(STACK[0x3848]) = v390;
  LODWORD(STACK[0x3858]) = v392;
  LODWORD(STACK[0x3840]) = v388;
  LODWORD(STACK[0x3938]) = v386;
  v412 = LODWORD(STACK[0x36B0]) ^ 0xFEFEFEFE ^ v395;
  LODWORD(STACK[0x3940]) = v412;
  v413 = v412 ^ v355 ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * HIBYTE(v390)- 524 * ((8196503 * (unint64_t)(465 * HIBYTE(v390))) >> 32))), 16) ^ *((_DWORD *)&STACK[0x4900]+ (465 * BYTE1(v392)- 524* ((8196503 * (unint64_t)(465 * BYTE1(v392))) >> 32))) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (465 * v388 - 524 * ((8196503 * (unint64_t)(465 * v388)) >> 32))), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (465 * BYTE2(v386) - 524 * ((8196503 * (unint64_t)(465 * BYTE2(v386))) >> 32))), 24);
  if ((v409 & 0x18) != 0)
    v414 = (v413 >> (v409 & 0x18)) ^ (v413 << v341);
  else
    v414 = v413;
  LODWORD(STACK[0x39C8]) = v414;
  v415 = 465 * v386
       - 524 * ((8196503 * (unint64_t)(465 * v386)) >> 32);
  v416 = 465 * BYTE2(v388) - 524 * ((8196503 * (unint64_t)(465 * BYTE2(v388))) >> 32);
  v417 = 465 * HIBYTE(v392) - 524 * ((8196503 * (unint64_t)(465 * HIBYTE(v392))) >> 32);
  v418 = 465 * BYTE1(v390) - 524 * ((8196503 * (unint64_t)(465 * BYTE1(v390))) >> 32);
  v420 = v409 & 0x18;
  v419 = (v409 & 0x18) == 0;
  v421 = STACK[0x3B00];
  v422 = (LODWORD(STACK[0x3B40]) << (v409 & 0x18)) ^ (LODWORD(STACK[0x3B40]) >> v341);
  if ((v409 & 0x18) == 0)
    v422 = STACK[0x3B40];
  v423 = LODWORD(STACK[0x34F8]) ^ v422 ^ LODWORD(STACK[0x37F8]);
  if ((v409 & 0x18) != 0)
    v421 = (v421 >> v341) ^ (v421 << (v409 & 0x18));
  v424 = LODWORD(STACK[0x34F0]) ^ v421 ^ LODWORD(STACK[0x37D8]);
  v425 = LODWORD(STACK[0x34E8]) ^ v398 ^ LODWORD(STACK[0x3808]);
  v426 = __ROR4__(STACK[0x3AF8], v341);
  if ((v409 & 0x18) == 0)
    v426 = STACK[0x3AF8];
  v427 = STACK[0x3610] ^ STACK[0x3608] ^ v387 ^ v426 ^ LODWORD(STACK[0x37E0]);
  v428 = STACK[0x3B30];
  v429 = (LODWORD(STACK[0x3B30]) >> v341) ^ (LODWORD(STACK[0x3B30]) << v420);
  v430 = STACK[0x3B38];
  v431 = (v430 >> v341) ^ (v430 << v420);
  v432 = STACK[0x3AD8];
  v433 = (v432 << v420) ^ (v432 >> v341);
  v434 = LODWORD(STACK[0x3AC0]) ^ LODWORD(STACK[0x3A70]);
  if (!v419)
    v434 = (v434 >> v341) ^ (v434 << v420);
  LODWORD(STACK[0x3838]) = v434;
  v435 = v396 ^ LODWORD(STACK[0x3820]) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v415), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ v416), 24) ^ *((_DWORD *)&STACK[0x4900] + v418) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v417), 16);
  v436 = 4647 * ((BYTE2(v425) + 111) ^ 0x1C) + 4767822;
  v437 = *(_BYTE *)(v303 + v436 - 6784 * (((1266205 * (unint64_t)v436) >> 32) >> 1));
  if (!v419)
    v435 = (v435 >> v420) ^ (v435 << v341);
  LODWORD(STACK[0x3850]) = v435;
  v438 = ((v437 ^ 0xE3) >> 3) | (32 * (v437 ^ 0xE3));
  v439 = __ROR4__(STACK[0x3B18], v341);
  if (v419)
    v439 = STACK[0x3B18];
  v440 = LODWORD(STACK[0x34E0]) ^ v439 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v425)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v423), 16) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v424)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v427 >> 22) & 0x3FC)), 24);
  v441 = __ROR4__(STACK[0x3B20], v341);
  if (v419)
    v441 = STACK[0x3B20];
  v442 = LODWORD(STACK[0x34D8]) ^ v441 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v424), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v427)), 8) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v423)) ^ (((*(_BYTE *)(v303 + 4647 * (HIBYTE(*(_DWORD *)((char *)&STACK[0x55D0] + ((v425 >> 22) & 0x3FC))) ^ 0x9A) + 25186740 - 6784 * (((1266205 * (unint64_t)(4647 * (HIBYTE(*(_DWORD *)((char *)&STACK[0x55D0] + ((v425 >> 22) & 0x3FC))) ^ 0x9Au) + 25186740)) >> 32) >> 1)) ^ 0xC3) + 85) | (*(_DWORD *)((char *)&STACK[0x55D0] + ((v425 >> 22) & 0x3FC)) << 8));
  if (v419)
    v429 = v428;
  v443 = LODWORD(STACK[0x34D0]) ^ v429 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v424)), 8) ^ *((_DWORD *)&STACK[0x55D0]
                                                                                                  + BYTE2(v427)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v425), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v423 >> 22) & 0x3FC)), 24);
  v444 = __ROR4__(STACK[0x3B28], v341);
  if (v419)
    v444 = STACK[0x3B28];
  v445 = LODWORD(STACK[0x34C8]) ^ v444 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v427), 16) ^ *((_DWORD *)&STACK[0x55D0] + v438) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v423)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v424 >> 22) & 0x3FC)), 24);
  v446 = 4647 * ((unsigned __int16)(v440 ^ 0xFE00) >> 8) + 13123128;
  v447 = v446 - 6784 * (((1266205 * (unint64_t)v446) >> 32) >> 1);
  v448 = 4647 * ((v440 ^ 0xC4FE00) >> 16) + 14331348;
  v449 = 4647 * (((v442 >> 1) & 0x80 | ((unsigned __int16)v442 >> 9)) ^ 0xD9) + 19140993;
  v450 = v449 - 6784 * (((1266205 * (unint64_t)v449) >> 32) >> 1);
  v451 = v443 ^ 0xC400u;
  v452 = (*(_BYTE *)(v303 + v447) - 71) ^ ((*(_BYTE *)(v303 + v447) - 71) << 6) ^ (4 * (*(_BYTE *)(v303 + v447) - 71));
  v453 = *(unsigned __int8 *)(v303 + v448 - 6784 * (((1266205 * (unint64_t)v448) >> 32) >> 1))
       + 117;
  v454 = v453 ^ 0x12 ^ (v453 >> 2) & 0x12;
  v455 = *(unsigned __int8 *)(v303
                            + 4647 * BYTE1(v451)
                            + 14331348
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * BYTE1(v451) + 14331348)) >> 32) >> 1))
       + 117;
  v456 = v455 ^ 0x12 ^ (v455 >> 2) & 0x12;
  if (v419)
    v431 = v430;
  v457 = LODWORD(STACK[0x34C0]) ^ v431 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v451 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x55D0] + (v454 + 26)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v445)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v442), 16);
  v458 = LODWORD(STACK[0x34B8]) ^ v399 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v443), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + (97 * (*(_BYTE *)(v303 + v450) ^ 0x27))), 8) ^ *((_DWORD *)&STACK[0x55D0] + (((*(_BYTE *)(v303 + 4647 * (BYTE2(v445) ^ 0xB8) + 9544938 - 6784 * (((1266205 * (unint64_t)(4647 * (BYTE2(v445) ^ 0xB8u) + 9544938)) >> 32) >> 1)) - 87) ^ 0xFB) + 85)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + HIBYTE(v440)), 24);
  v459 = LODWORD(STACK[0x3600]) ^ STACK[0x36A0] ^ v387 ^ LODWORD(STACK[0x37D0]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ v445), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v442 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + ((v452 ^ 0xFE) + 26)), 8) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v451));
  v460 = v458 ^ 0x9A0000u;
  v461 = (LODWORD(STACK[0x34B0]) ^ LODWORD(STACK[0x3810])) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v442)) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + (v456 + 26)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v445 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v440), 16);
  v462 = *(_DWORD *)((char *)&STACK[0x55D0] + ((v457 >> 22) & 0x3FC));
  v463 = *(_BYTE *)(v303
                  + 4647 * (HIBYTE(v462) ^ 0xFE)
                  + 13123128
                  - 6784
                  * (((1266205 * (unint64_t)(4647 * (HIBYTE(v462) ^ 0xFE) + 13123128)) >> 32) >> 1))
       - 71;
  v464 = ((v463 ^ (v463 << 6) ^ (4 * v463) ^ 0xFE) + 26) | (v462 << 8);
  v465 = LODWORD(STACK[0x34A8]) ^ v404 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v458), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v461 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v457)), 8) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v459));
  if (v419)
    v433 = v432;
  v466 = LODWORD(STACK[0x34A0]) ^ v433 ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v461)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + v459), 16) ^ v464 ^ *((_DWORD *)&STACK[0x55D0] + ((*(_BYTE *)(v303 + 4647 * BYTE2(v460) + 25186740 - 6784 * (((1266205 * (unint64_t)(4647 * BYTE2(v460) + 25186740)) >> 32) >> 1)) ^ 0xC3) + 85));
  v467 = LODWORD(STACK[0x3950]) ^ STACK[0x39C0] ^ v387 ^ LODWORD(STACK[0x3818]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ BYTE1(v460)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ v461), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v459 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v457));
  v468 = LODWORD(STACK[0x3950]) ^ LODWORD(STACK[0x3688]) ^ v387 ^ LODWORD(STACK[0x3828]) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0]+ v457), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x55D0] + BYTE1(v459)), 8) ^ *((_DWORD *)&STACK[0x55D0] + BYTE2(v461)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x55D0] + ((v460 >> 22) & 0x3FC)), 24);
  v469 = 4647 * (((v466 >> 1) & 0x80 | ((unsigned __int16)v466 >> 9)) ^ 0x40) + 15539568;
  v470 = 465
       * (97
                         * (*(_BYTE *)(v303
                                     + v469
                                     - 6784 * (((1266205 * (unint64_t)v469) >> 32) >> 1)) ^ 0xA2));
  v471 = *((_DWORD *)&STACK[0x4900] + (v470 - 524 * ((8196503 * (unint64_t)v470) >> 32)));
  v472 = STACK[0x3AD0];
  v473 = __ROR4__(STACK[0x3A68], v341);
  if ((STACK[0x3AD0] & 0x18) != 0)
    v474 = v473;
  else
    v474 = STACK[0x3A68];
  v475 = LODWORD(STACK[0x3658]) ^ LODWORD(STACK[0x39B8]);
  v476 = LODWORD(STACK[0x3498]) ^ v475;
  v477 = v476 ^ v474 ^ v471 ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * BYTE2(v467)- 524* ((8196503 * (unint64_t)(465 * BYTE2(v467))) >> 32))), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * v468- 524* ((8196503* (unint64_t)(465 * v468)) >> 32))), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * HIBYTE(v465)- 524* ((8196503 * (unint64_t)(465 * HIBYTE(v465))) >> 32))), 16);
  if ((v472 & 0x18) != 0)
    v478 = (v477 >> (STACK[0x3AD0] & 0x18)) ^ (v477 << v341);
  else
    v478 = v477;
  v479 = v476 ^ LODWORD(STACK[0x3834]) ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * HIBYTE(v467)- 524* ((8196503 * (unint64_t)(465 * HIBYTE(v467))) >> 32))), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * v465- 524* ((8196503* (unint64_t)(465* v465)) >> 32))), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * BYTE2(v466)- 524* ((8196503* (unint64_t)(465* BYTE2(v466))) >> 32))), 24) ^ *((_DWORD *)&STACK[0x4900]
                                                                + (465 * BYTE1(v468)
                                                                               - 524
                                                                               * ((8196503
                                                                                 * (unint64_t)(465 * BYTE1(v468))) >> 32)));
  if ((v472 & 0x18) != 0)
    v479 = (v479 >> (v472 & 0x18)) + (v479 << v341);
  v480 = 4647 * ((v467 + 111) ^ 0x1C) + 4767822;
  LOBYTE(v480) = *(_BYTE *)(v303 + v480 - 6784 * (((1266205 * (unint64_t)v480) >> 32) >> 1)) ^ 0xE3;
  v481 = *(_BYTE *)(v303
                  + 4647 * (BYTE1(v465) ^ 0xFE)
                  + 13123128
                  - 6784
                  * (((1266205 * (unint64_t)(4647 * (BYTE1(v465) ^ 0xFEu) + 13123128)) >> 32) >> 1))
       - 71;
  v482 = *((_DWORD *)&STACK[0x4900]
         + (465 * BYTE2(v468)
                        - 524 * ((8196503 * (unint64_t)(465 * BYTE2(v468))) >> 32)));
  v483 = 465 * ((v480 >> 3) | (32 * v480));
  v484 = v483 - 524 * ((8196503 * (unint64_t)v483) >> 32);
  v485 = 465 * ((v481 ^ (v481 << 6) ^ (4 * v481) ^ 0xFE) + 26);
  v486 = v485 - 524 * ((8196503 * (unint64_t)v485) >> 32);
  v487 = *(unsigned __int8 *)(v303
                            + 4647 * (HIBYTE(v482) ^ 0xC4)
                            + 14331348
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (HIBYTE(v482) ^ 0xC4) + 14331348)) >> 32) >> 1))
       + 117;
  v488 = ((v487 ^ 0x12 ^ (v487 >> 2) & 0x12) + 26) | (v482 << 8);
  v489 = v472 & 0x18;
  v490 = STACK[0x3A58];
  v491 = (v490 << (v472 & 0x18)) ^ (v490 >> v341);
  v492 = LODWORD(STACK[0x3618]) ^ v475;
  v493 = v492 ^ LODWORD(STACK[0x3860]) ^ v488 ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * HIBYTE(v466)- 524* ((8196503 * (unint64_t)(465 * HIBYTE(v466))) >> 32))), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v484), 8) ^ *((_DWORD *)&STACK[0x4900] + v486);
  v494 = __ROR4__(v493, v472 & 0x18);
  if ((v472 & 0x18) != 0)
    v493 = v494;
  v495 = 465 * BYTE1(LODWORD(STACK[0x3840]));
  v496 = 465 * BYTE2(LODWORD(STACK[0x3858]));
  v497 = *((_DWORD *)&STACK[0x4900] + (v496 - 524 * ((8196503 * (unint64_t)v496) >> 32)));
  v498 = 4647 * ((HIBYTE(v497) + 111) ^ 0x36) + 17937420;
  v500 = STACK[0x3AB0];
  LOBYTE(v498) = *(_BYTE *)(v303 + v498 - 6784 * (((1266205 * (unint64_t)v498) >> 32) >> 1)) ^ 0xE;
  v503 = LODWORD(STACK[0x3940]) ^ LODWORD(STACK[0x3838]) ^ *((_DWORD *)&STACK[0x4900]
                                                           + (v495
                                                                          - 524
                                                                          * ((8196503 * (unint64_t)v495) >> 32))) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (465 * LODWORD(STACK[0x3848]) - 524 * ((8196503 * (unint64_t)(465 * LODWORD(STACK[0x3848]))) >> 32))), 8) ^ (((v498 >> 3) | (32 * v498)) | (v497 << 8)) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (465 * HIBYTE(LODWORD(STACK[0x3938])) - 524 * ((8196503 * (unint64_t)(465 * HIBYTE(LODWORD(STACK[0x3938])))) >> 32))), 16);
  if ((v472 & 0x18) == 0)
    v491 = STACK[0x3A58];
  v504 = STACK[0x3A18];
  if ((STACK[0x3A18] & 0x18) != 0)
    v503 = (v503 << (STACK[0x3A18] & 0x18)) + (v503 >> v489);
  v505 = v492 ^ v491 ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * HIBYTE(v468)- 524 * ((8196503 * (unint64_t)(465 * HIBYTE(v468))) >> 32))), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * v466- 524* ((8196503* (unint64_t)(465 * v466)) >> 32))), 8) ^ *((_DWORD *)&STACK[0x4900]+ (465 * BYTE1(v467)- 524* ((8196503 * (unint64_t)(465 * BYTE1(v467))) >> 32))) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (465 * BYTE2(v465) - 524 * ((8196503 * (unint64_t)(465 * BYTE2(v465))) >> 32))), 24);
  if ((v504 & 0x18) != 0)
    v505 = (v505 << (v504 & 0x18)) ^ (v505 >> v489);
  v506 = STACK[0x3A28];
  if ((STACK[0x3A28] & 1) != 0)
    v507 = v493;
  else
    v507 = v479;
  if ((v506 & 1) != 0)
    v508 = v505;
  else
    v508 = v493;
  if ((v506 & 1) != 0)
    v505 = v478;
  else
    v479 = v478;
  if ((v506 & 1) != 0)
    v509 = STACK[0x3A10];
  else
    v509 = STACK[0x3850];
  v510 = STACK[0x39C8];
  if ((v506 & 1) != 0)
    v511 = STACK[0x39C8];
  else
    v511 = STACK[0x3A10];
  if ((v506 & 1) != 0)
    v512 = STACK[0x3850];
  else
    v512 = v503;
  if ((v506 & 1) != 0)
    v510 = v503;
  v513 = v506 + 2 * LODWORD(STACK[0x39F0]);
  v514 = (v513 & 2) == 0;
  if ((v513 & 2) != 0)
    v515 = v505;
  else
    v515 = v507;
  if (v514)
  {
    v516 = v479;
  }
  else
  {
    v505 = v507;
    v516 = v508;
  }
  if (v514)
  {
    v479 = v508;
    v517 = v512;
  }
  else
  {
    v517 = v511;
  }
  if (v514)
  {
    v512 = v511;
    v518 = v509;
  }
  else
  {
    v518 = v510;
  }
  if (v514)
    v519 = v510;
  else
    v519 = v509;
  v520 = v505 ^ LODWORD(STACK[0x3AC0]) ^ v479 ^ 0x98989898 ^ v518;
  v521 = v515 + 86300485 * ((LODWORD(STACK[0x3AC0]) ^ 0x98989898) - (v520 ^ v512));
  v522 = v516 + 457750363 * ((LODWORD(STACK[0x3AC0]) ^ 0x98989898) - (v521 ^ v517));
  v523 = v519 ^ LODWORD(STACK[0x3AC0]);
  v524 = v523 ^ v479 ^ v522;
  v525 = v518 ^ 0x67676767;
  v526 = 1123033561 * ((LODWORD(STACK[0x3AC0]) ^ 0x98989898) + (v518 ^ 0x67676767 ^ v524)) + 1123033561 + v522;
  v527 = (-800568933 * (v520 ^ v512)) ^ (-800568933 * (LODWORD(STACK[0x3AC0]) ^ 0x98989898)) ^ v521;
  v528 = v517 ^ LODWORD(STACK[0x3AC0]) ^ v521 ^ v526;
  v529 = STACK[0x3B90];
  v530 = (v524 ^ 0x98989898) + 647010873 * ((v517 ^ LODWORD(STACK[0x3AC0])) + (v527 ^ 0x67676767)) + 647010873;
  v531 = v520 ^ v523 ^ v528;
  v532 = v512 ^ LODWORD(STACK[0x3AC0]) ^ v528 ^ v531;
  v533 = LODWORD(STACK[0x3C40]) ^ ((STACK[0x3C40] & LODWORD(STACK[0x3B68])) >> 1);
  v534 = LODWORD(STACK[0x3A68]) ^ ((STACK[0x3A68] & v500) >> 1);
  v535 = v490 ^ ((v490 & v500) >> 1);
  v536 = LODWORD(STACK[0x3B08]) ^ ((STACK[0x3B08] & v500) >> 1);
  v537 = STACK[0x36B8];
  v501 = STACK[0x3AC8];
  v502 = STACK[0x3AB8];
  v499 = STACK[0x3C28];
  v538 = LODWORD(STACK[0x39E8]) ^ LODWORD(STACK[0x36B8]) ^ LODWORD(STACK[0x3C58]) ^ LODWORD(STACK[0x3B38]) ^ LODWORD(STACK[0x3C68]) ^ LODWORD(STACK[0x3B48]) ^ LODWORD(STACK[0x3C78]) ^ LODWORD(STACK[0x3AF0]) ^ LODWORD(STACK[0x3B10]) ^ LODWORD(STACK[0x39E0]) ^ LODWORD(STACK[0x3B70]) ^ LODWORD(STACK[0x3B88]) ^ LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x3AD8]) ^ LODWORD(STACK[0x3C38]) ^ LODWORD(STACK[0x3B58]) ^ LODWORD(STACK[0x3B50]) ^ LODWORD(STACK[0x3AE0]) ^ LODWORD(STACK[0x3A20]) ^ LODWORD(STACK[0x3A88]) ^ LODWORD(STACK[0x3A90]) ^ LODWORD(STACK[0x3C48]) ^ LODWORD(STACK[0x3A98]) ^ LODWORD(STACK[0x3868]) ^ LODWORD(STACK[0x3C50]) ^ LODWORD(STACK[0x3B40]) ^ LODWORD(STACK[0x3C60]) ^ LODWORD(STACK[0x3B00]) ^ LODWORD(STACK[0x3AF8]) ^ LODWORD(STACK[0x3A80]) ^ LODWORD(STACK[0x3880]) ^ LODWORD(STACK[0x3AA0]) ^ LODWORD(STACK[0x3888]) ^ LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3B20]) ^ LODWORD(STACK[0x3B28]) ^ LODWORD(STACK[0x3B18]) ^ LODWORD(STACK[0x3870]) ^ LODWORD(STACK[0x3AA8]) ^ LODWORD(STACK[0x3878]) ^ LODWORD(STACK[0x3A78]) ^ ((v536 & v499) << v529) ^ ((v535 & v501 ^ v534 & STACK[0x3C30] ^ v536 & STACK[0x3C30]) >> LODWORD(STACK[0x3B98])) ^ ((unint64_t)(v535 & v499) << v502) ^ ((unint64_t)(v534 & v499) << v502) ^ (((v533 & v501) >> STACK[0x3B78]) + ((v533 & STACK[0x39D8]) << v529));
  LODWORD(v501) = STACK[0x3630];
  v539 = v538 ^ 0x91A77DF4;
  v540 = LODWORD(STACK[0x3630]) ^ LODWORD(STACK[0x3918]) ^ v538 ^ 0x91A77DF4 ^ (v531
                                                                              + 243706073
                                                                              * (v525 + (v530 ^ LODWORD(STACK[0x3AC0])))
                                                                              + 243706073);
  v541 = (v532 + 1385535497 * ((v538 ^ LODWORD(STACK[0x36C0])) - LODWORD(STACK[0x36B8]))) ^ LODWORD(STACK[0x3920]);
  v542 = *(unsigned __int8 *)(v303
                            + 4647 * (BYTE1(v541) ^ 0xC4)
                            + 14331348
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (BYTE1(v541) ^ 0xC4u) + 14331348)) >> 32) >> 1));
  v543 = STACK[0x39A8];
  *(_BYTE *)(v543 + STACK[0x3898]) = *(_BYTE *)(v303
                                              + 4647 * (BYTE1(v540) ^ 0xEA)
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647 * (BYTE1(v540) ^ 0xEAu))) >> 32) >> 1)) ^ BYTE1(v540) ^ 0xEC;
  *(_BYTE *)(v543 + STACK[0x38A8]) = *(_BYTE *)(v303
                                              + 4647 * (HIBYTE(v541) ^ 0xEA)
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647 * (HIBYTE(v541) ^ 0xEA))) >> 32) >> 1)) ^ HIBYTE(v541) ^ 0xEC;
  v544 = (v530 + 1065969775 * (v501 - (v538 ^ 0x91A77DF4))) ^ LODWORD(STACK[0x3928]);
  v545 = 4647 * ((((BYTE1(v544) ^ 0xB3u) >> 1) & 0xFFFFFF7F | (((BYTE1(v544) ^ 0xB3) & 1) << 7)) ^ 0xD9) + 19140993;
  LOBYTE(v545) = 97
               * (*(_BYTE *)(v303 + (v545 - 6784 * ((81037119 * (unint64_t)(v545 >> 7)) >> 32))) ^ 0x27);
  *(_BYTE *)(v543 + STACK[0x3890]) = *(_BYTE *)(v303
                                              + 4647 * (v545 ^ 0x24)
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647
                                                                                  * (v545 ^ 0x24u))) >> 32) >> 1)) ^ v545 ^ 0xE3;
  *(_BYTE *)(v543 + STACK[0x38E0]) = *(_BYTE *)(v303
                                              + 4647 * (v541 ^ 0x66)
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647
                                                                                  * (v541 ^ 0x66u))) >> 32) >> 1)) ^ v541 ^ 0x66;
  v546 = 4647 * (((BYTE2(v544) ^ 0xF1) + 111) ^ 0x1C) + 4767822;
  LOBYTE(v546) = *(_BYTE *)(v303 + v546 - 6784 * (((1266205 * (unint64_t)v546) >> 32) >> 1)) ^ 0xE3;
  *(_BYTE *)(v543 + STACK[0x38A0]) = *(_BYTE *)(v303
                                              + 4647
                                              * (((v546 >> 3) | (32 * v546)) ^ 0xCD)
                                              + 30056796
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647
                                                                                  * (((v546 >> 3) | (32 * v546)) ^ 0xCDu)
                                                                                  + 30056796)) >> 32) >> 1)) ^ ((v546 >> 3) | (32 * v546)) ^ 0x46;
  v547 = ((v523 ^ 0x98989898 ^ v527 ^ v532) + 229187539 * (LODWORD(STACK[0x3678]) - (v539 ^ v537))) ^ LODWORD(STACK[0x3930]);
  v548 = 4647 * (((BYTE2(v547) ^ 0x43) + 111) ^ 0x36) + 17937420;
  LOBYTE(v548) = *(_BYTE *)(v303 + v548 - 6784 * (((1266205 * (unint64_t)v548) >> 32) >> 1)) ^ 0xE;
  *(_BYTE *)(v543 + STACK[0x3900]) = *(_BYTE *)(v303
                                              + 4647
                                              * (((v548 >> 3) | (32 * v548)) ^ 0xCD)
                                              + 30056796
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647
                                                                                  * (((v548 >> 3) | (32 * v548)) ^ 0xCDu)
                                                                                  + 30056796)) >> 32) >> 1)) ^ ((v548 >> 3) | (32 * v548)) ^ 0xB0;
  v549 = 4647 * ((((8 * ((v540 >> 17) & 0x80 | (v540 >> 25))) ^ 0x238) + 26752) >> 3);
  LOBYTE(v549) = 97
               * (*(_BYTE *)(v303 + (v549 - 6784 * ((81037119 * (unint64_t)(v549 >> 7)) >> 32))) ^ 0xA2);
  v550 = 4647
       * ((*(_BYTE *)(v303
                                     + 4647 * (v549 ^ 0x24)
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * (v549 ^ 0x24u))) >> 32) >> 1)) ^ v549) ^ 3)
       + 13123128;
  LOBYTE(v550) = *(_BYTE *)(v303 + v550 - 6784 * (((1266205 * (unint64_t)v550) >> 32) >> 1)) - 71;
  v551 = 4647 * (((v550 ^ ((_BYTE)v550 << 6) ^ (4 * v550) ^ 0xFE) + 26) ^ 0xBB) + 14331348;
  v552 = *(unsigned __int8 *)(v303 + v551 - 6784 * (((1266205 * (unint64_t)v551) >> 32) >> 1))
       + 117;
  *(_BYTE *)(v543 + STACK[0x38B8]) = (v552 ^ 0x12 ^ (v552 >> 2) & 0x12) + 26;
  *(_BYTE *)(v543 + STACK[0x38F0]) = *(_BYTE *)(v303
                                              + 4647 * (BYTE2(v540) ^ 8)
                                              + 30056796
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647 * (BYTE2(v540) ^ 8u) + 30056796)) >> 32) >> 1)) ^ BYTE2(v540) ^ 0xF0;
  *(_BYTE *)(v543 + STACK[0x3908]) = *(_BYTE *)(v303
                                              + 4647 * (HIBYTE(v547) ^ 0xD8)
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647 * (HIBYTE(v547) ^ 0xD8))) >> 32) >> 1)) ^ HIBYTE(v547) ^ 0xF5;
  *(_BYTE *)(v543 + STACK[0x38E8]) = *(_BYTE *)(v303
                                              + 4647 * (v547 ^ 0xD9)
                                              + 30056796
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647
                                                                                  * (v547 ^ 0xD9u)
                                                                                  + 30056796)) >> 32) >> 1)) ^ v547 ^ 0xD;
  *(_BYTE *)(v543 + STACK[0x38F8]) = HIBYTE(v544) ^ 0xC6 ^ *(_BYTE *)(v303
                                                                    + 4647 * (HIBYTE(v544) ^ 0x32)
                                                                    + 30056796
                                                                    - 6784
                                                                    * (((1266205
                                                                                     * (unint64_t)(4647 * (HIBYTE(v544) ^ 0x32) + 30056796)) >> 32) >> 1));
  *(_BYTE *)(v543 + STACK[0x3910]) = v544 ^ *(_BYTE *)(v303
                                                     + 4647 * (v544 ^ 0xD9)
                                                     - 6784
                                                     * (((1266205
                                                                      * (unint64_t)(4647
                                                                                         * (v544 ^ 0xD9u))) >> 32) >> 1)) ^ 0x1C;
  LOBYTE(v544) = ((v542 + 117) ^ 0x12 ^ ((v542 + 117) >> 2) & 0x12) + 26;
  v553 = STACK[0x39B0];
  *(_BYTE *)(v543 + STACK[0x38D8]) = v544 ^ 0x4F ^ *(_BYTE *)(v303
                                                            + 4647 * (v544 ^ 0xF6)
                                                            - 6784
                                                            * (((1266205
                                                                             * (unint64_t)(4647
                                                                                                * (v544 ^ 0xF6u))) >> 32) >> 1));
  *(_BYTE *)(v543 + STACK[0x38C8]) = *(_BYTE *)(v303
                                              + 4647 * (v540 ^ 0x3D)
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647
                                                                                  * (v540 ^ 0x3Du))) >> 32) >> 1)) ^ v540 ^ 0x4F;
  v554 = HIWORD(v541) ^ *(unsigned __int8 *)(v303
                                           + 4647 * (BYTE2(v541) ^ 0x43)
                                           - 6784
                                           * (((1266205 * (unint64_t)(4647 * (BYTE2(v541) ^ 0x43u))) >> 32) >> 1));
  v555 = 4647 * (((v554 >> 1) | ((_BYTE)v554 << 7)) ^ 0xD) + 15539568;
  *(_BYTE *)(v543 + STACK[0x38B0]) = (97
                                    * (*(_BYTE *)(v303
                                                + v555
                                                - 6784 * (((1266205 * (unint64_t)v555) >> 32) >> 1)) ^ 0xA2)) ^ 0x26;
  LOBYTE(v555) = ((*(_BYTE *)(v303
                            + 4647 * (BYTE1(v547) ^ 0x83)
                            + 9544938
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (BYTE1(v547) ^ 0x83u) + 9544938)) >> 32) >> 1))
                 - 87) ^ 0xFB)
               + 85;
  *(_BYTE *)(v543 + STACK[0x38D0]) = *(_BYTE *)(v303
                                              + 4647 * (v555 ^ 0xCD)
                                              + 30056796
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647
                                                                                  * (v555 ^ 0xCDu)
                                                                                  + 30056796)) >> 32) >> 1)) ^ v555 ^ 0x65;
  return (*(uint64_t (**)(void))(STACK[0x3C70]
                              + 8
                              * (int)((25 * ((LODWORD(STACK[0x38C0]) + 16) >= LODWORD(STACK[0x36C8]))) | v553)))();
}

uint64_t sub_1006F15B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t (*v25)(void);

  v8 = STACK[0x37B0];
  v9 = STACK[0x3720];
  v10 = STACK[0x3700];
  if ((STACK[0x37B0] & 1) != 0)
    v11 = STACK[0x3700];
  else
    v11 = STACK[0x3720];
  v12 = STACK[0x3A00];
  if ((v8 & 1) != 0)
  {
    v10 = STACK[0x3A00];
    v12 = STACK[0x3710];
  }
  else
  {
    v9 = STACK[0x3710];
  }
  v13 = v4 - 11501;
  if ((v8 & 2) != 0)
    v14 = v12;
  else
    v14 = v11;
  LODWORD(STACK[0x3720]) = v14;
  if ((v8 & 2) == 0)
    v11 = v12;
  LODWORD(STACK[0x3A00]) = v11;
  if ((v8 & 2) != 0)
    v15 = v9;
  else
    v15 = v10;
  LODWORD(STACK[0x3700]) = v15;
  if ((v8 & 2) != 0)
    v16 = v10;
  else
    v16 = v9;
  LODWORD(STACK[0x3710]) = v16;
  v17 = STACK[0x39F8];
  v18 = STACK[0x3728];
  v19 = STACK[0x3718];
  if ((STACK[0x39F8] & 1) != 0)
    v20 = STACK[0x3718];
  else
    v20 = STACK[0x3728];
  v21 = STACK[0x3A08];
  if ((v17 & 1) != 0)
  {
    v19 = STACK[0x3A08];
    v21 = STACK[0x3708];
  }
  else
  {
    v18 = STACK[0x3708];
  }
  if ((v17 & 2) != 0)
    v22 = v21;
  else
    v22 = v20;
  LODWORD(STACK[0x3728]) = v22;
  if ((v17 & 2) == 0)
    v20 = v21;
  LODWORD(STACK[0x3A08]) = v20;
  if ((v17 & 2) != 0)
    v23 = v18;
  else
    v23 = v19;
  LODWORD(STACK[0x3718]) = v23;
  if ((v17 & 2) != 0)
    v24 = v19;
  else
    v24 = v18;
  LODWORD(STACK[0x3708]) = v24;
  v25 = (uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * v13) - ((4825 * (v13 ^ 0x1E73u)) ^ 0x4B68));
  LODWORD(STACK[0x3920]) = STACK[0x36F0];
  LODWORD(STACK[0x3940]) = v5;
  LODWORD(STACK[0x3A18]) = STACK[0x39F0];
  LODWORD(STACK[0x3840]) = STACK[0x36D0];
  LODWORD(STACK[0x3938]) = v7;
  LODWORD(STACK[0x3928]) = STACK[0x36F8];
  LODWORD(STACK[0x3918]) = STACK[0x36E8];
  LODWORD(STACK[0x3AC0]) = STACK[0x39E0];
  LODWORD(STACK[0x3860]) = a4;
  LODWORD(STACK[0x3930]) = STACK[0x36E0];
  LODWORD(STACK[0x3820]) = STACK[0x36D8];
  return v25();
}

uint64_t sub_1006F16D4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = LODWORD(STACK[0x3490]) - 6391;
  v2 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v0 + 8 * v1) - 12))(v2);
}

uint64_t sub_1006F1700()
{
  uint64_t v0;
  int v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  STACK[0x3C68] = 0x57FE013AB6756943;
  STACK[0x3C60] = 0x2206A0EA0CFD85AALL;
  sub_10009A6DC();
  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 8 * (v1 - 5937))
                                                                                            - 8);
  LODWORD(STACK[0x3C78]) = v1 - 6096;
  return v2(5, 9, 10, 11, 13, 353, 0);
}

uint64_t sub_1006F17C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  char v25;
  char v26;
  char v27;
  unsigned int v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  unsigned int v34;
  char v35;

  v21 = *(_BYTE *)(v17 + v11) ^ a7;
  v22 = v11 * v7 + v19;
  *(_BYTE *)(v10 + (_DWORD)v11 * v7
                 - ((((v11 * v7) * (unint64_t)v8) >> 32) >> 9) * v9) = a7;
  *(_BYTE *)(v10 + v22 - (((v22 * (unint64_t)v8) >> 32) >> 9) * v9) = v21;
  v23 = *(_BYTE *)(v17 + (v11 | 1)) ^ v21;
  *(_BYTE *)(v10
           + (v11 | 1) * v12
           - ((((v11 | 1) * v12 * (unint64_t)v8) >> 32) >> 9) * v9) = v21;
  *(_BYTE *)(v10 + v22 + 387 - ((((v22 + 387) * (unint64_t)v8) >> 32) >> 9) * v9) = v23;
  v24 = ((*(_BYTE *)(v17 + (v11 | 2)) + 111) ^ 0x1C) * v18 + 4767822;
  LOBYTE(v24) = *(_BYTE *)(v20 + v24 - (((v24 * (unint64_t)v13) >> 32) >> 1) * v15) ^ 0xE3;
  *(_BYTE *)(v10
           + (v11 | 2) * v7
           - ((((v11 | 2) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v23;
  LOBYTE(v24) = ((v24 >> 3) | (32 * v24)) ^ v23;
  *(_BYTE *)(v10 + v22 + 774 - ((((v22 + 774) * (unint64_t)v8) >> 32) >> 9) * v9) = v24;
  v25 = v24 ^ *(_BYTE *)(v17 + (v11 | 3));
  *(_BYTE *)(v10
           + (v11 | 3) * v7
           - ((((v11 | 3) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v24;
  *(_BYTE *)(v10 + v22 + 1161 - ((((v22 + 1161) * (unint64_t)v8) >> 32) >> 9) * v9) = v25;
  LOBYTE(v24) = *(_BYTE *)(v17 + (v11 | 4));
  *(_BYTE *)(v10
           + (v11 | 4) * v7
           - ((((v11 | 4) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v25;
  v26 = v24 ^ v25;
  *(_BYTE *)(v10 + v22 + 1548 - ((((v22 + 1548) * (unint64_t)v8) >> 32) >> 9) * v9) = v26;
  v27 = *(_BYTE *)(v17 + (v11 | a1)) ^ v26;
  *(_BYTE *)(v10
           + (v11 | a1) * v7
           - ((((v11 | a1) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v26;
  *(_BYTE *)(v10 + v22 + 1935 - ((((v22 + 1935) * (unint64_t)v8) >> 32) >> 9) * v9) = v27;
  v28 = v16 + (*(unsigned __int8 *)(v17 + (v11 | 6)) ^ 0xFE) * v18;
  LOBYTE(v28) = *(_BYTE *)(v20 + v28 - (((v28 * (unint64_t)v13) >> 32) >> 1) * v15) - 71;
  *(_BYTE *)(v10
           + (v11 | 6) * v7
           - ((((v11 | 6) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v27;
  v29 = ((v28 ^ ((_BYTE)v28 << 6) ^ (4 * v28) ^ 0xFE) + 26) ^ v27;
  *(_BYTE *)(v10 + v22 + 2322 - ((((v22 + 2322) * (unint64_t)v8) >> 32) >> 9) * v9) = v29;
  LOBYTE(v28) = v29 ^ *(_BYTE *)(v17 + (v11 | 7));
  *(_BYTE *)(v10
           + (v11 | 7) * v7
           - ((((v11 | 7) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v29;
  *(_BYTE *)(v10 + v22 + 2709 - ((((v22 + 2709) * (unint64_t)v8) >> 32) >> 9) * v9) = v28;
  v30 = v28 ^ *(_BYTE *)(v17 + (v11 | 8));
  *(_BYTE *)(v10
           + (v11 | 8) * v7
           - ((((v11 | 8) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v28;
  *(_BYTE *)(v10 + v22 + 3096 - ((((v22 + 3096) * (unint64_t)v8) >> 32) >> 9) * v9) = v30;
  LOBYTE(v28) = *(_BYTE *)(v17 + (v11 | a2));
  *(_BYTE *)(v10
           + (v11 | a2) * v7
           - ((((v11 | a2) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v30;
  v31 = v30 ^ v28;
  *(_BYTE *)(v10 + v22 + 3483 - ((((v22 + 3483) * (unint64_t)v8) >> 32) >> 9) * v9) = v31;
  LOBYTE(v28) = *(_BYTE *)(v17 + (v11 | a3));
  *(_BYTE *)(v10
           + (v11 | a3) * v7
           - ((((v11 | a3) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v31;
  LOBYTE(v28) = v28 ^ v31;
  *(_BYTE *)(v10 + v22 + 3870 - ((((v22 + 3870) * (unint64_t)v8) >> 32) >> 9) * v9) = v28;
  v32 = *(_BYTE *)(v17 + (v11 | a4));
  *(_BYTE *)(v10
           + (v11 | a4) * v7
           - ((((v11 | a4) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v28;
  LOBYTE(v22) = v32 ^ v28;
  *(_BYTE *)(v10
           + (_DWORD)v11 * v7
           + 142416
           - ((((v11 * v7 + 142416) * (unint64_t)v8) >> 32) >> 9) * v9) = v32 ^ v28;
  LOBYTE(v28) = *(_BYTE *)(v17 + (v11 | 0xC));
  *(_BYTE *)(v10
           + (v11 | 0xC) * v7
           - ((((v11 | 0xC) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v22;
  *(_BYTE *)(v10
           + (_DWORD)v11 * v7
           + 142803
           - ((((v11 * v7 + 142803) * (unint64_t)v8) >> 32) >> 9) * v9) = v28 ^ v22;
  v33 = *(_BYTE *)(v17 + (v11 | a5)) ^ v28 ^ v22;
  *(_BYTE *)(v10
           + (v11 | a5) * v7
           - ((((v11 | a5) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v28 ^ v22;
  *(_BYTE *)(v10
           + (_DWORD)v11 * v7
           + 143190
           - ((((v11 * v7 + 143190) * (unint64_t)v8) >> 32) >> 9) * v9) = v33;
  v34 = (*(unsigned __int8 *)(v17 + (v11 | 0xE)) ^ 0x9A) * v18 + 25186740;
  LOBYTE(v34) = (*(_BYTE *)(v20 + v34 - (((v34 * (unint64_t)v13) >> 32) >> 1) * v15) ^ 0xC3) + 85;
  *(_BYTE *)(v10
           + (v11 | 0xE) * v7
           - ((((v11 | 0xE) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v33;
  v35 = v34 ^ v33;
  *(_BYTE *)(v10
           + (_DWORD)v11 * v7
           + 143577
           - ((((v11 * v7 + 143577) * (unint64_t)v8) >> 32) >> 9) * v9) = v34 ^ v33;
  LOBYTE(v34) = *(_BYTE *)(v17 + (v11 | 0xF));
  *(_BYTE *)(v10
           + (v11 | 0xF) * v7
           - ((((v11 | 0xF) * v7 * (unint64_t)v8) >> 32) >> 9) * v9) = v35;
  *(_BYTE *)(v10
           + (_DWORD)v11 * v7
           + 143964
           - ((((v11 * v7 + 143964) * (unint64_t)v8) >> 32) >> 9) * v9) = v35 ^ v34;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * (((v11 < 0xD0) * a6) ^ LODWORD(STACK[0x3C78]))) - 8))();
}

uint64_t sub_1006F1BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t (*v58)(void);

  STACK[0x3C28] = v8;
  v10 = 387 * (223 - v7);
  v11 = LODWORD(STACK[0x3C78]) + 5788;
  v12 = *((_BYTE *)&STACK[0x5130] + v10 % 0x24A);
  v13 = *((unsigned __int8 *)&STACK[0x5130] + (v10 + 138159) % 0x24A);
  STACK[0x3C50] = v13;
  v14 = v13 ^ v12;
  LODWORD(STACK[0x3C58]) = v11;
  *((_BYTE *)&STACK[0x5130] + 387 * (223 - (int)v7 - (int)v13 + a7) % 0x24Au) = v14;
  STACK[0x3C48] = *((unsigned __int8 *)&STACK[0x5130] + 387 * (579 - (int)v7) % 0x24Au);
  v15 = (387 * (v11 - (int)v7) - 5767461) % 0x24Au;
  v16 = *((unsigned __int8 *)&STACK[0x5130] + v15);
  v17 = 223 - (v7 | 2);
  *((_BYTE *)&STACK[0x5130] + v15) = v14 ^ a7 ^ v16;
  v18 = *((unsigned __int8 *)&STACK[0x5130] + (387 * v17 + 138159) % 0x24Au);
  LOBYTE(v15) = *((_BYTE *)&STACK[0x5130] + 387 * v17 % 0x24Au) ^ v18;
  v19 = 387 * (220 - (int)v7) % 0x24Au;
  *((_BYTE *)&STACK[0x5130] + 387 * (v17 - v16 + v18) % 0x24A) = v15;
  v20 = *((unsigned __int8 *)&STACK[0x5130] + v19);
  v21 = 223 - (v7 | 4);
  v22 = 387 * v21 + 138159;
  *((_BYTE *)&STACK[0x5130] + v19) = v15 ^ v20 ^ v16;
  v23 = *((unsigned __int8 *)&STACK[0x5130] + v22 % 0x24A);
  v24 = *((unsigned __int8 *)&STACK[0x5130] + v22 % 0x24A);
  STACK[0x3C38] = v23;
  STACK[0x3C40] = *((unsigned __int8 *)&STACK[0x5130] + 387 * (577 - (int)v7) % 0x24Au);
  LODWORD(v15) = *(unsigned __int8 *)(v9
                                    + 4647 * (v23 ^ 0xC4)
                                    + 14331348
                                    - 6784
                                    * (((1266205
                                                     * (unint64_t)(4647 * (v23 ^ 0xC4) + 14331348)) >> 32) >> 1))
               + 117;
  LOBYTE(v15) = (v15 ^ 0x12 ^ (v15 >> 2) & 0x12) + 26;
  LODWORD(v23) = v15;
  LODWORD(v15) = v15 - v24 + (v15 ^ *((_BYTE *)&STACK[0x5130] + 387 * v21 % 0x24Au));
  v25 = v15 ^ v20;
  v26 = (-387 * (int)v7 + 84366) % 0x24Au;
  *((_BYTE *)&STACK[0x5130] + 387 * (v21 - 1160382057 * v20 + 1160382057 * (int)v23) % 0x24Au) = v15;
  v27 = *((unsigned __int8 *)&STACK[0x5130] + (-387 * (int)v7 + 222525) % 0x24Au);
  LODWORD(v15) = (v15 ^ v20) - v27 + (*((_BYTE *)&STACK[0x5130] + v26) ^ v27);
  v28 = 223 - (v7 | 6);
  *((_BYTE *)&STACK[0x5130] + v26) = v15;
  LODWORD(v26) = *((unsigned __int8 *)&STACK[0x5130] + (387 * v28 + 138159) % 0x24Au);
  LOBYTE(v17) = *((_BYTE *)&STACK[0x5130] + 387 * v28 % 0x24Au);
  LODWORD(v15) = v15 ^ v25;
  LOBYTE(v25) = v17 ^ v26;
  v29 = 223 - (v7 | 7);
  *((_BYTE *)&STACK[0x5130] + 387 * (v28 - 2091145345 * (int)v26 + 2091145345 * (int)v15) % 0x24Au) = v17 ^ v26;
  v30 = *((unsigned __int8 *)&STACK[0x5130] + (387 * v29 + 138159) % 0x24Au);
  v31 = 4647 * (((*((_BYTE *)&STACK[0x5130] + 387 * v29 % 0x24Au) ^ v30) + 111) ^ 0x36) + 17937420;
  v32 = 4647 * (((v30 >> 1) | ((_BYTE)v30 << 7)) ^ 0xD9) + 19140993;
  LOBYTE(v31) = *(_BYTE *)(STACK[0x3C18] + v31 - 6784 * (((1266205 * (unint64_t)v31) >> 32) >> 1)) ^ 0xE;
  v33 = 97
      * (*(unsigned __int8 *)(STACK[0x3C18] + v32
                                            - 6784 * (((1266205 * (unint64_t)v32) >> 32) >> 1)) ^ 0x27u);
  STACK[0x3C30] = v33;
  v34 = 387 * ((_DWORD)v30 + v29 - v33) % 0x24A;
  LOBYTE(v29) = ((v31 >> 3) | (32 * v31)) ^ v30;
  *((_BYTE *)&STACK[0x5130] + v34) = v15 ^ v25 ^ v29;
  LODWORD(v15) = 223 - (v7 | 8);
  v35 = *((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v15 + 138159) % 0x24Au);
  v36 = 387 * (v15 - v29 + v35) % 0x24A;
  LOBYTE(v15) = v35 ^ *((_BYTE *)&STACK[0x5130] + 387 * (int)v15 % 0x24Au);
  *((_BYTE *)&STACK[0x5130] + v36) = v15;
  v37 = 223 - (v7 | 9);
  v38 = *((unsigned __int8 *)&STACK[0x5130] + (387 * v37 + 138159) % 0x24Au);
  v39 = 4647 * ((v38 + 111) ^ 0x36) + 17937420;
  LOBYTE(v39) = *(_BYTE *)(STACK[0x3C18] + v39 - 6784 * (((1266205 * (unint64_t)v39) >> 32) >> 1)) ^ 0xE;
  LOBYTE(v39) = (v39 >> 3) | (32 * v39);
  v40 = 4647 * (*((_BYTE *)&STACK[0x5130] + 387 * v37 % 0x24Au) ^ 0xB8 ^ v39) + 9544938;
  v41 = 4647
      * ((((((*(_BYTE *)(STACK[0x3C18]
                                        + v40
                                        - 6784 * (((1266205 * (unint64_t)v40) >> 32) >> 1))
                             - 87) ^ 0xFB)
                           + 85) ^ v39)
                         + 111) ^ 0x36)
      + 17937420;
  LOBYTE(v15) = v15 ^ v29;
  LOBYTE(v29) = *(_BYTE *)(STACK[0x3C18] + v41 - 6784 * (((1266205 * (unint64_t)v41) >> 32) >> 1)) ^ 0xE;
  LOBYTE(v29) = (v29 >> 3) | (32 * v29);
  *((_BYTE *)&STACK[0x5130]
  + 387 * (v37 + 1498283805 * (_DWORD)v38 - 1498283805 * v39) % 0x24A) = v15 ^ v29;
  LODWORD(v15) = 223 - (v7 | 0xA);
  v42 = *((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v15 + 138159) % 0x24Au);
  LOBYTE(v41) = *((_BYTE *)&STACK[0x5130] + 387 * (int)v15 % 0x24Au) ^ v42;
  *((_BYTE *)&STACK[0x5130] + 387 * (v15 - v29 + v42) % 0x24A) = v41;
  LOBYTE(v15) = v41 ^ v29;
  v43 = (-387 * (int)v7 + 82044) % 0x24Au;
  v44 = *((unsigned __int8 *)&STACK[0x5130] + (-387 * (int)v7 + 220203) % 0x24Au);
  v45 = v44 - v15 + (v44 ^ *((_BYTE *)&STACK[0x5130] + v43));
  *((_BYTE *)&STACK[0x5130] + v43) = v45;
  LODWORD(v43) = v45 ^ v15;
  LODWORD(v15) = 223 - (v7 | 0xC);
  v46 = *((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v15 + 138159) % 0x24Au);
  v47 = *((_BYTE *)&STACK[0x5130] + 387 * (int)v15 % 0x24Au) ^ v46;
  *((_BYTE *)&STACK[0x5130] + 387 * ((int)v43 + (int)v15 - v46) % 0x24Au) = v47;
  v48 = 387 * (210 - (int)v7) % 0x24Au;
  v49 = *((unsigned __int8 *)&STACK[0x5130] + 387 * (567 - (int)v7) % 0x24Au);
  LODWORD(v43) = v43 ^ v47;
  v50 = v43 - v49 + (v49 ^ *((_BYTE *)&STACK[0x5130] + v48));
  *((_BYTE *)&STACK[0x5130] + v48) = v50;
  LODWORD(v48) = v50 ^ v43;
  LODWORD(v43) = 223 - (v7 | 0xE);
  v51 = *((unsigned __int8 *)&STACK[0x5130] + (387 * (int)v43 + 138159) % 0x24Au);
  v52 = (-387 * (int)v7 + 80496) % 0x24Au;
  v53 = *((_BYTE *)&STACK[0x5130] + 387 * (int)v43 % 0x24Au) ^ v51;
  *((_BYTE *)&STACK[0x5130] + 387 * ((int)v48 + (int)v43 - (int)v51) % 0x24Au) = v53;
  LOBYTE(v43) = *((_BYTE *)&STACK[0x5130] + (-387 * (int)v7 + 218655) % 0x24Au);
  v54 = 4647 * (((*((_BYTE *)&STACK[0x5130] + v52) ^ v43) + 111) ^ 0x36) + 17937420;
  LOBYTE(v54) = *(_BYTE *)(STACK[0x3C18] + v54 - 6784 * (((1266205 * (unint64_t)v54) >> 32) >> 1)) ^ 0xE;
  *((_BYTE *)&STACK[0x5130] + v52) = v43 - (v48 ^ v53) + ((v54 >> 3) | (32 * v54));
  v55 = ((v35 | (v42 << 16) | (v44 << 24) | (v38 << 8)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v43 << 56)) ^ STACK[0x3C68];
  v56 = ((unint64_t)v18 << 16) | (v27 << 40) | (STACK[0x3C38] << 32);
  v57 = (v49 << 40) | (v51 << 48) | ((unint64_t)v46 << 32);
  STACK[0x3C60] ^= (STACK[0x3C50] | (STACK[0x3C40] << 24)) ^ (STACK[0x3C48] << 8) ^ (v56 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v26 << 48) | (v30 << 56));
  v58 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * ((32239 * (v7 > 0xCF)) ^ LODWORD(STACK[0x3C78]))) - 8);
  STACK[0x3C68] = v57 ^ v55;
  return v58();
}

uint64_t sub_1006F240C()
{
  unint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned __int8 v29;
  int v30;
  char v31;
  unsigned __int8 v32;
  int v33;
  unsigned int v34;
  unsigned __int8 v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  char v66;
  int v67;
  uint64_t v68;
  char v69;
  int v70;
  unint64_t v71;
  _BYTE *v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  int v119;
  unint64_t v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  uint64_t (*v146)(uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = STACK[0x3C60] ^ (STACK[0x3C60] << 23) ^ ((STACK[0x3C60] ^ (STACK[0x3C60] << 23)) >> 17) ^ v0 ^ (v0 >> 26);
  v7 = v0 ^ (v0 << 23) ^ ((v0 ^ (v0 << 23)) >> 17) ^ v6 ^ (v6 >> 26);
  v8 = ((v6 ^ (v6 << 23)) >> 17) ^ v6 ^ ((_DWORD)v6 << 23) ^ v7 ^ (v7 >> 26);
  v9 = 4647 * ((((v6 + v1) >> 1) & 0x7F | ((((_DWORD)v6 + v1) & 1) << 7)) ^ 0x40) + 15539568;
  v10 = (((v6 ^ (v6 << 23)) >> 17) ^ v6 ^ v7 ^ (v7 >> 26))
      + v7
      + v7
      + v6
      + 97 * (*(_BYTE *)(v5 + v9 - 6784 * (((1266205 * (unint64_t)v9) >> 32) >> 1)) ^ 0xA2);
  v11 = STACK[0x3C68];
  v12 = v3 ^ (v3 << 23) ^ ((v3 ^ (unint64_t)(v3 << 23)) >> 17) ^ v11 ^ (v11 >> 26);
  v13 = v11 ^ (v11 << 23) ^ ((v11 ^ (v11 << 23)) >> 17) ^ v12 ^ (v12 >> 26);
  LOBYTE(v6) = v12 + v12 + v2;
  v14 = v12 ^ (v12 << 23) ^ ((v12 ^ (v12 << 23)) >> 17) ^ v13 ^ (v13 >> 26);
  LOBYTE(v12) = v13 + v6 + (v12 ^ ((v12 ^ (v12 << 23)) >> 17) ^ v13 ^ (v13 >> 26)) + v13;
  v15 = v7 ^ (v7 << 23) ^ ((v7 ^ (v7 << 23)) >> 17) ^ v14 ^ (v14 >> 26);
  v16 = v12;
  v17 = ((v7 ^ ((v7 ^ (v7 << 23)) >> 17) ^ v14 ^ (v14 >> 26)) + v14);
  v18 = v17 + 618585495 * (v10 - v12);
  v19 = v17 - v10 + v16;
  v20 = 16843009 * (v19 & 0x7F);
  LODWORD(STACK[0x3B98]) = v18 & 0x7F;
  v21 = 16843009 * (v18 & 0x7F);
  LODWORD(STACK[0x3B90]) = v20;
  LODWORD(STACK[0x3C38]) = v21 - v20 + 239319423 * ((v19 & 0x7F) - (v18 & 0x7F));
  v22 = v14 ^ (v14 << 23) ^ ((v14 ^ (v14 << 23)) >> 17) ^ v15 ^ (v15 >> 26);
  v23 = v14 - v8 + ((((v15 ^ (v15 << 23)) >> 17) ^ v15 ^ v22 ^ (v22 >> 26)) + v22);
  v24 = -v23 & 7;
  if ((v23 & 7) != 0)
    v25 = -1;
  else
    v25 = 0;
  LODWORD(STACK[0x3B68]) = v24;
  v26 = 4647 * ((((v25 << v24) >> 1) | ((v25 << v24) << 7)) ^ 0x40)
      + 15539568;
  v27 = 4647 * (((((v15 ^ (v15 << 23)) >> 17) ^ v15 ^ v22 ^ (v22 >> 26)) + v22 + 111) ^ 0x36)
      + 17937420;
  LOBYTE(v27) = *(_BYTE *)(v5 + v27 - 6784 * (((1266205 * (unint64_t)v27) >> 32) >> 1)) ^ 0xE;
  v28 = (-1610640669 * v14) ^ (-1610640669 * v8) ^ ((v27 >> 3) | (32 * v27));
  v29 = 97 * (*(_BYTE *)(v5 + v26 - 6784 * (((1266205 * (unint64_t)v26) >> 32) >> 1)) ^ 0xA2);
  v30 = -v28 & 7;
  v31 = v23 & 7;
  LODWORD(STACK[0x3B70]) = v23 & 7;
  if ((v23 & 7) != 0)
    v32 = ~v29;
  else
    v32 = 0;
  if ((v28 & 7) != 0)
    v33 = 255;
  else
    v33 = 0;
  v34 = v4 + 4647 * ((v33 << v30) ^ 0xFE);
  LOBYTE(v34) = *(_BYTE *)(v5 + v34 - 6784 * (((1266205 * (unint64_t)v34) >> 32) >> 1)) - 71;
  v35 = v22 + v15;
  v36 = 4647 * ((((v35 & 1) << 7) | (v35 >> 1)) ^ 0x40) + 15539568;
  v37 = v13 ^ v7;
  v38 = (97
                        * (*(_BYTE *)(v5 + v36 - 6784 * (((1266205 * (unint64_t)v36) >> 32) >> 1)) ^ 0xA2)) ^ v37 ^ (v37 >> 2);
  LOBYTE(v34) = v34 ^ ((_BYTE)v34 << 6) ^ (4 * v34) ^ 0xFE;
  v39 = (v34 + 26);
  v40 = 16843009 * v39;
  STACK[0x3C50] = (v18 & 0x7F ^ v18 & 0xFFFFFF80)
                - v18
                + ((16843009 * v39) ^ ~((1929379840 * v39) & v38))
                + 3821605 * (v18 - (v18 & 0x7F ^ v18 & 0xFFFFFF80));
  v41 = v38 ^ v18 ^ 0xE47F7F50;
  v42 = 4647 * ((HIBYTE(v41) + 111) ^ 0x1C) + 4767822;
  v43 = v42 - 6784 * (((1266205 * (unint64_t)v42) >> 32) >> 1);
  v44 = (-27 - v34);
  v45 = v28 & 7;
  if ((v28 & 7) == 0)
    v44 = 0;
  v46 = 4647 * ((((v44 & v18) >> 1) & 0xFFFFFF7F | ((v44 & v18 & 1) << 7)) ^ 0x40) + 15539568;
  v47 = *(_BYTE *)(v5 + (v46 - 6784 * ((81037119 * (unint64_t)(v46 >> 7)) >> 32))) ^ 0xA2;
  v48 = *(unsigned __int8 *)(v5 + v43) ^ 0xFFFFFFE3;
  LODWORD(STACK[0x3B88]) = v41;
  LODWORD(STACK[0x3B78]) = ((v48 >> 3) | (32 * v48)) ^ v41 ^ (v41 >> 8) ^ HIWORD(v41) ^ 0x96;
  v49 = v35 ^ v37 ^ (v37 >> 7);
  v50 = 4647 * (((v32 >> 1) | (v32 << 7)) ^ 0xD9) + 19140993;
  v51 = v19 ^ v49 ^ 0xE47F7F50;
  LODWORD(STACK[0x3840]) = v51;
  v52 = (v51 ^ BYTE1(v51) ^ BYTE2(v51)) ^ ((v19 ^ v49) >> 24) ^ 0xC1;
  v53 = v40 ^ (97 * v47);
  v54 = v24 + v23 - v28;
  v55 = 16843009 * (v19 & 0x7F) + 2014669749 * (v18 - v19);
  v56 = 4647
      * ((((*(_BYTE *)(v5
                                      + 4647 * (LODWORD(STACK[0x3BA8]) ^ 0x64)
                                      + 3568896
                                      - 6784
                                      * (((1266205
                                                       * (unint64_t)(4647
                                                                          * (LODWORD(STACK[0x3BA8]) ^ 0x64u)
                                                                          + 3568896)) >> 32) >> 1))
                           + (LODWORD(STACK[0x3BA8]) ^ 0xEB)) ^ 0x2A)
                         + 111) ^ 0x36)
      + 17937420;
  v57 = *(unsigned __int8 *)(v5 + v56 - 6784 * (((1266205 * (unint64_t)v56) >> 32) >> 1));
  v58 = 4647 * (((v57 >> 4) | (16 * (v57 ^ 0xE))) ^ 0xC0) + 19140993;
  v59 = *(unsigned __int8 *)(v5
                           + 4647 * (LODWORD(STACK[0x3C20]) ^ 0xBF)
                           + 11928849
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647
                                                               * (LODWORD(STACK[0x3C20]) ^ 0xBFu)
                                                               + 11928849)) >> 32) >> 1));
  v60 = 4647
      * ((((v59 ^ (v59 >> 4) & 0xE ^ 0xDF) >> 1) | (((v59 ^ (v59 >> 4) & 0xE) ^ 0xDF) << 7)) ^ 0xD9)
      + 19140993;
  LOBYTE(v58) = 97
              * (*(_BYTE *)(v5 + v58 - 6784 * (((1266205 * (unint64_t)v58) >> 32) >> 1)) ^ 0x27);
  v61 = (97
       * (*(unsigned __int8 *)(v5 + v60 - 6784 * (((1266205 * (unint64_t)v60) >> 32) >> 1)) ^ 0x27)) ^ 0x14;
  v62 = STACK[0x3BA0];
  v63 = LODWORD(STACK[0x3BA0]);
  v64 = v53;
  v65 = ((unint64_t)((v61 ^ (2 * (v61 & v55))) & v53) >> v54) | ((v61 ^ (2 * (v61 & v55))) << v45);
  v66 = 97 * (*(_BYTE *)(v5 + v50 - 6784 * (((1266205 * (unint64_t)v50) >> 32) >> 1)) ^ 0x27);
  LODWORD(STACK[0x3BA8]) = v19;
  LODWORD(STACK[0x3B80]) = 16843009 * v29;
  v67 = (v66 & v19) ^ (16843009 * v29);
  LODWORD(STACK[0x3850]) = 16843009 * v52;
  LODWORD(v53) = (16843009 * v52) ^ 0x25252525;
  v68 = v5;
  v69 = (-119 * v38) ^ (-119 * v49) ^ v31;
  v70 = ((unint64_t)(v58 ^ (2 * (v58 & v21))) << v69) ^ v53 ^ (((v58 ^ (2 * (v58 & v21))) & (v66 & v19 ^ v29)) >> v30) ^ v65;
  v71 = STACK[0x508];
  *(_BYTE *)v71 = v70 - ((2 * v70) & 0x62) + 49;
  v72 = (_BYTE *)v71;
  v73 = *(unsigned __int8 *)(v68
                           + 4647 * v63
                           + 3568896
                           - 6784
                           * (((1266205 * (unint64_t)(4647 * v63 + 3568896)) >> 32) >> 1));
  LODWORD(STACK[0x3C20]) = (2063597568 * v29) & v49;
  v74 = ((v62 ^ v73 ^ 0xFFFFFF8F) + 2 * (v73 & (v62 ^ 0xF))) ^ 0xFFFFFFFA;
  v75 = 4647 * (v74 & v21 ^ 0xB8) + 9544938;
  v76 = (((2 * *(unsigned __int8 *)(v68 + v75 - 6784 * (((1266205 * (unint64_t)v75) >> 32) >> 1))
         + 82) ^ 0xFFFFFFF6)
       - 86) ^ v74;
  v77 = 4647 * (((v76 & (v66 & v19 ^ v29)) + 111) ^ 0x1C) + 4767822;
  LOBYTE(v77) = *(_BYTE *)(v68 + v77 - 6784 * (((1266205 * (unint64_t)v77) >> 32) >> 1)) ^ 0xE3;
  v78 = 4647 * ((((v77 >> 3) | (32 * v77)) >> v30) ^ 0xB8) + 9544938;
  LOBYTE(v76) = (v76 << v69) ^ (((*(_BYTE *)(v68
                                           + v78
                                           - 6784 * (((1266205 * (unint64_t)v78) >> 32) >> 1))
                                - 87) ^ 0xFB)
                              + 85);
  v79 = (*(unsigned __int8 *)(v68
                            + 4647 * (LODWORD(STACK[0x3BB0]) ^ 0xE5)
                            + 3568896
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647
                                                                * (LODWORD(STACK[0x3BB0]) ^ 0xE5u)
                                                                + 3568896)) >> 32) >> 1))
       + (LODWORD(STACK[0x3BB0]) ^ 0x6A)) ^ 0xE;
  v80 = v79 ^ (2 * (v79 & v55));
  LODWORD(v76) = 4647 * ((v76 + 111) ^ 0x1C) + 4767822;
  v81 = v64;
  LODWORD(v71) = v4 + 4647 * (((unint64_t)(v80 & v64) >> v54) ^ 0xFE);
  LODWORD(v76) = *(unsigned __int8 *)(v68
                                    + v76
                                    - 6784
                                    * (((1266205 * (unint64_t)v76) >> 32) >> 1)) ^ 0xFFFFFFE3;
  LODWORD(v71) = *(unsigned __int8 *)(v68
                                    + v71
                                    - 6784
                                    * (((1266205 * (unint64_t)v71) >> 32) >> 1))
               - 71;
  v82 = STACK[0x3BC0];
  LODWORD(v76) = ((v76 >> 3) | (32 * v76)) ^ v53 ^ (((v71 ^ ((_DWORD)v71 << 6) ^ (4 * v71) ^ 0xFFFFFFFE)
                                                                    + 26) | (v80 << v45));
  v83 = v72;
  v72[1] = v76 - ((2 * v76) & 0x62) + 49;
  LOBYTE(v76) = (*(_BYTE *)(v68
                          + 4647 * (v82 ^ 0x1E)
                          + 3568896
                          - 6784
                          * (((1266205
                                           * (unint64_t)(4647 * (v82 ^ 0x1Eu) + 3568896)) >> 32) >> 1))
               + (v82 ^ 0x91)) ^ 0x30;
  LODWORD(v76) = ((unint64_t)(v76 ^ (2 * (v76 & v21))) << v69) ^ v53 ^ (((v76 ^ (2 * (v76 & v21))) & v67) >> v30);
  LODWORD(v76) = 4647 * ((((v76 & 1) << 7) | (v76 >> 1)) ^ 0xD9) + 19140993;
  v84 = (*(unsigned __int8 *)(v68
                            + 4647 * (LODWORD(STACK[0x3BB8]) ^ 0x2D)
                            + 3568896
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647
                                                                * (LODWORD(STACK[0x3BB8]) ^ 0x2Du)
                                                                + 3568896)) >> 32) >> 1))
       + (LODWORD(STACK[0x3BB8]) ^ 0xFFFFFFA2)) ^ 6;
  LODWORD(v76) = (((unint64_t)((v84 ^ (2 * (v84 & v55))) & v64) >> v54) | ((v84 ^ (2 * (v84 & v55))) << v45)) ^ (97 * (*(unsigned __int8 *)(v68 + v76 - 6784 * (((1266205 * (unint64_t)v76) >> 32) >> 1)) ^ 0x27));
  v72[2] = v76 - ((2 * v76) & 0x62) + 49;
  LODWORD(v76) = *(unsigned __int8 *)(v68
                                    + 4647 * (STACK[0x3BD0] ^ 0xA5)
                                    + 11928849
                                    - 6784
                                    * (((1266205
                                                     * (unint64_t)(4647
                                                                        * (STACK[0x3BD0] ^ 0xA5u)
                                                                        + 11928849)) >> 32) >> 1));
  v85 = v76 ^ (v76 >> 4) & 0xE ^ 4 ^ (2
                                                                * ((v76 ^ (v76 >> 4) & 0xE ^ 4) & v21));
  LODWORD(v71) = *(unsigned __int8 *)(v68
                                    + 4647 * (LODWORD(STACK[0x3BC8]) ^ 0x38)
                                    + 11928849
                                    - 6784
                                    * (((1266205
                                                     * (unint64_t)(4647
                                                                        * (LODWORD(STACK[0x3BC8]) ^ 0x38u)
                                                                        + 11928849)) >> 32) >> 1));
  LODWORD(v71) = 4647 * (v71 ^ 0x62 ^ (v71 >> 4) & 0xE) + 9544938;
  v86 = 4647
      * ((((v85 & v67) >> 1) | ((v85 & v67) << 7)) ^ 0xD9)
      + 19140993;
  LODWORD(v71) = ((*(unsigned __int8 *)(v68
                                      + v71
                                      - 6784
                                      * (((1266205 * (unint64_t)v71) >> 32) >> 1))
                 - 87) ^ 0xFFFFFFFB)
               + 85;
  LODWORD(v71) = v71 ^ (2 * (v71 & v55));
  v87 = 4647 * (((_DWORD)v71 << v45) ^ 0xB8) + 9544938;
  LODWORD(v71) = 4647
               * ((((v71 & v64) >> v54) | (((*(_BYTE *)(v68
                                                                                        + v87
                                                                                        - 6784
                                                                                        * (((1266205 * (unint64_t)v87) >> 32) >> 1))
                                                                             - 87) ^ 0xFB)
                                                                           + 85)) ^ 0xB8)
               + 9544938;
  v88 = STACK[0x3BF0];
  LODWORD(v85) = ((97
                                  * (*(_BYTE *)(v68
                                              + v86
                                              - 6784 * (((1266205 * (unint64_t)v86) >> 32) >> 1)) ^ 0x27)) >> v30) ^ v53 ^ (v85 << v69) ^ (((*(unsigned __int8 *)(v68 + v71 - 6784 * (((1266205 * (unint64_t)v71) >> 32) >> 1)) - 87) ^ 0xFFFFFFFB) + 85);
  v72[3] = v85 - ((2 * v85) & 0x62) + 49;
  LOBYTE(v85) = (*(_BYTE *)(v68
                          + 4647 * (v88 ^ 0xB6)
                          + 3568896
                          - 6784
                          * (((1266205
                                           * (unint64_t)(4647 * (v88 ^ 0xB6u) + 3568896)) >> 32) >> 1))
               + (v88 ^ 0x39)) ^ 0xDF;
  LODWORD(v85) = 4647 * (((v85 ^ (2 * (v85 & v21))) + 111) ^ 0x1C) + 4767822;
  LOBYTE(v85) = *(_BYTE *)(v68
                         + v85
                         - 6784 * (((1266205 * (unint64_t)v85) >> 32) >> 1)) ^ 0xE3;
  LODWORD(v71) = *(unsigned __int8 *)(v68
                                    + 4647 * (STACK[0x3BD8] ^ 0xFD)
                                    + 11928849
                                    - 6784
                                    * (((1266205
                                                     * (unint64_t)(4647
                                                                        * (STACK[0x3BD8] ^ 0xFDu)
                                                                        + 11928849)) >> 32) >> 1));
  LOBYTE(v71) = v71 ^ 0x6D ^ (v71 >> 4) & 0xE ^ (2 * ((v71 ^ 0x6D ^ (v71 >> 4) & 0xE) & v55));
  LODWORD(v85) = ((unint64_t)((v85 >> 3) | (32 * v85)) << v69) ^ v53 ^ ((((v85 >> 3) | (32 * v85)) & v67) >> v30) ^ (((v71 & v64) >> v54) | (v71 << v45));
  LODWORD(v85) = 4647 * (((v85 >> 1) | ((v85 & 1) << 7)) ^ 0xD9) + 19140993;
  LOBYTE(v85) = *(_BYTE *)(v68
                         + v85
                         - 6784 * (((1266205 * (unint64_t)v85) >> 32) >> 1)) ^ 0x27;
  v72[4] = 97 * v85 - ((66 * v85) & 0x62) + 49;
  LODWORD(v85) = (*(unsigned __int8 *)(v68
                                     + 4647 * (LODWORD(STACK[0x3BE0]) ^ 0xCF)
                                     + 3568896
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647
                                                                         * (LODWORD(STACK[0x3BE0]) ^ 0xCFu)
                                                                         + 3568896)) >> 32) >> 1))
                + (LODWORD(STACK[0x3BE0]) ^ 0x40)) ^ 0xFFFFFFAC;
  v89 = v85 ^ (2 * (v85 & v21));
  LODWORD(v71) = 4647
               * ((((v89 & v67) >> 1) | ((v89 & v67) << 7)) ^ 0xD9)
               + 19140993;
  v90 = *(unsigned __int8 *)(v68
                           + 4647 * (LODWORD(STACK[0x3BE8]) ^ 0x95)
                           + 11928849
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647
                                                               * (LODWORD(STACK[0x3BE8]) ^ 0x95u)
                                                               + 11928849)) >> 32) >> 1));
  v91 = v90 ^ 0x69 ^ (v90 >> 4) & 0xE ^ (2 * ((v90 ^ 0x69 ^ (v90 >> 4) & 0xE) & v55));
  LODWORD(v82) = 4647 * (((unint64_t)(v91 & v64) >> v54) ^ 0x9A) + 25186740;
  v92 = STACK[0x3C00] ^ 0xBC;
  LODWORD(v89) = ((97
                                  * (*(_BYTE *)(v68
                                              + v71
                                              - 6784
                                              * (((1266205 * (unint64_t)v71) >> 32) >> 1)) ^ 0x27)) >> v30) ^ v53 ^ (v89 << v69) ^ ((v91 << v45) | ((*(unsigned __int8 *)(v68 + v82 - 6784 * (((1266205 * (unint64_t)v82) >> 32) >> 1)) ^ 0xFFFFFFC3) + 85));
  v72[5] = v89 - ((2 * v89) & 0x62) + 49;
  LODWORD(v89) = (*(unsigned __int8 *)(v68
                                     + 4647 * (LODWORD(STACK[0x3BF8]) ^ 0x42)
                                     + 3568896
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647
                                                                         * (LODWORD(STACK[0x3BF8]) ^ 0x42u)
                                                                         + 3568896)) >> 32) >> 1))
                + (LODWORD(STACK[0x3BF8]) ^ 0xFFFFFFCD)) ^ 0x5C;
  LODWORD(v71) = *(unsigned __int8 *)(v68
                                    + 4647 * v92
                                    + 11928849
                                    - 6784
                                    * (((1266205 * (unint64_t)(4647 * v92 + 11928849)) >> 32) >> 1));
  v93 = 4647
      * ((((v89 & v55) >> 1) | ((v89 & v55) << 7)) ^ 0x40)
      + 15539568;
  LODWORD(v89) = (-62
                * (*(unsigned __int8 *)(v68 + v93
                                            - 6784 * (((1266205 * (unint64_t)v93) >> 32) >> 1)) ^ 0x22)) ^ v89;
  v94 = 4647 * ((v89 & v64) ^ 0xB8) + 9544938;
  LODWORD(v88) = STACK[0x3C08];
  v95 = v71 ^ 0x90 ^ (v71 >> 4) & 0xE ^ (2
                                                                                       * ((v71 ^ 0x90 ^ (v71 >> 4) & 0xE) & v21));
  LODWORD(v89) = (v95 << v69) ^ v53 ^ ((v95 & v67) >> v30) ^ (((unint64_t)(((*(_BYTE *)(v68 + v94 - 6784 * (((1266205 * (unint64_t)v94) >> 32) >> 1)) - 87) ^ 0xFB) + 85) >> v54) | ((_DWORD)v89 << v45));
  v72[6] = v89 - ((2 * v89) & 0x62) + 49;
  LOBYTE(v89) = *(_BYTE *)(v68
                         + 4647 * (v88 ^ 2)
                         + 3568896
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (v88 ^ 2u) + 3568896)) >> 32) >> 1))
              + (v88 ^ 0x8D);
  LODWORD(v89) = 4647 * (((v89 >> 1) | ((_BYTE)v89 << 7)) ^ 0xA5) + 19140993;
  v96 = v30 - LODWORD(STACK[0x3B68]);
  LODWORD(v95) = v30 ^ LODWORD(STACK[0x3B68]);
  LODWORD(STACK[0x3C08]) = v95;
  LOBYTE(v89) = *(_BYTE *)(v68
                         + v89
                         - 6784 * (((1266205 * (unint64_t)v89) >> 32) >> 1));
  LODWORD(STACK[0x3C00]) = (v95 >> 2) | (2 * v96);
  LOBYTE(v89) = 97 * (v89 ^ 0x27);
  v97 = 4647 * ((v89 & v21) ^ 0xC4) + 14331348;
  v98 = *(unsigned __int8 *)(v68 + v97 - 6784 * (((1266205 * (unint64_t)v97) >> 32) >> 1)) + 117;
  LODWORD(v89) = v4 + 4647 * ((v89 ^ (((2 * ((v98 >> 2) & 0x12 ^ v98)) ^ 0x24) + 52)) ^ 0xFE);
  LOBYTE(v89) = *(_BYTE *)(v68
                         + v89
                         - 6784 * (((1266205 * (unint64_t)v89) >> 32) >> 1))
              - 71;
  v99 = *(unsigned __int8 *)(v68
                           + 4647 * (LODWORD(STACK[0x3C10]) ^ 0x72)
                           + 11928849
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647
                                                               * (LODWORD(STACK[0x3C10]) ^ 0x72u)
                                                               + 11928849)) >> 32) >> 1));
  v100 = STACK[0x3448];
  v101 = v99 ^ (v99 >> 4) & 0xE ^ 0xFFFFFF9F ^ (2 * ((v99 ^ (v99 >> 4) & 0xE ^ 0xFFFFFF9F) & v55));
  LODWORD(v95) = 4647 * (STACK[0x3448] ^ 0x357);
  v102 = ((v89 ^ ((_BYTE)v89 << 6) ^ (4 * v89) ^ 0xFE) + 26);
  LODWORD(v102) = (v102 << v69) ^ v53 ^ ((v102 & v67) >> v30) ^ (((unint64_t)(v101 & v64) >> v54) | (v101 << v45));
  v72[7] = v102 - ((2 * v102) & 0x62) + 49;
  LODWORD(v102) = (*(unsigned __int8 *)(v68
                                      + v95
                                      - 6784
                                      * (((1266205 * (unint64_t)v95) >> 32) >> 1))
                 + (v100 ^ 0xFFFFFFD8)) ^ 0x2E;
  v103 = v102 ^ (2 * (v102 & v21));
  LODWORD(v95) = 4647
               * ((((STACK[0x3478] ^ 0x99) >> 1) | ((STACK[0x3478] ^ 0x99) << 7)) ^ 0xD9)
               + 19140993;
  LODWORD(v95) = 97
               * (*(unsigned __int8 *)(v68
                                     + v95
                                     - 6784
                                     * (((1266205 * (unint64_t)v95) >> 32) >> 1)) ^ 0x27);
  LODWORD(v95) = ((v95 ^ 0xFFFFFFB0)
                + *(unsigned __int8 *)(v68
                                     + 4647 * (v95 ^ 0x3F)
                                     + 3568896
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * (v95 ^ 0x3Fu)
                                                                         + 3568896)) >> 32) >> 1))) ^ 0xFFFFFFF1;
  v104 = 4647 * ((v95 & v55) ^ 0xB8) + 9544938;
  LODWORD(v95) = (((2
                  * *(unsigned __int8 *)(STACK[0x3C18]
                                       + v104
                                       - 6784 * (((1266205 * (unint64_t)v104) >> 32) >> 1))
                  + 82) ^ 0xFFFFFFF6)
                - 86) ^ v95;
  v105 = v4 + 4647 * (((_DWORD)v95 << v45) ^ 0xFE);
  v106 = 4647
       * (((((v103 & v67) >> v30) >> 1) | ((v103 & v67) >> v30 << 7)) ^ 0x40)
       + 15539568;
  LOBYTE(v105) = *(_BYTE *)(STACK[0x3C18] + v105
                                          - 6784 * (((1266205 * (unint64_t)v105) >> 32) >> 1))
               - 71;
  LODWORD(v95) = (((unint64_t)(v95 & v64) >> v54) | ((v105 ^ ((_BYTE)v105 << 6) ^ (4 * v105) ^ 0xFE)
                                                                                            + 26)) ^ 0xC4;
  LODWORD(v95) = *(unsigned __int8 *)(STACK[0x3C18]
                                    + 4647 * (_DWORD)v95
                                    + 14331348
                                    - 6784
                                    * (((1266205 * (unint64_t)(4647 * v95 + 14331348)) >> 32) >> 1))
               + 117;
  LOBYTE(v105) = STACK[0x3400] ^ 0xED;
  LODWORD(v103) = (97
                 * (*(unsigned __int8 *)(STACK[0x3C18]
                                       + v106
                                       - 6784 * (((1266205 * (unint64_t)v106) >> 32) >> 1)) ^ 0xFFFFFFA2)) ^ v53 ^ (v103 << v69) ^ ((v95 ^ 0x12 ^ (v95 >> 2) & 0x12) + 26);
  v72[8] = v103 - ((2 * v103) & 0x62) + 49;
  LODWORD(v103) = 4647 * ((v105 + 111) ^ 0x36) + 17937420;
  LOBYTE(v103) = *(_BYTE *)(STACK[0x3C18]
                          + v103
                          - 6784 * (((1266205 * (unint64_t)v103) >> 32) >> 1)) ^ 0xE;
  v107 = *(unsigned __int8 *)(STACK[0x3C18]
                            + 4647 * (STACK[0x3438] ^ 0x6A)
                            + 11928849
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647 * (STACK[0x3438] ^ 0x6Au)
                                                                + 11928849)) >> 32) >> 1));
  v108 = 4647 * (((v107 ^ (v107 >> 4) & 0xE ^ 0xDF) + 111) ^ 0x1C) + 4767822;
  LOBYTE(v103) = ((((v103 >> 3) | (32 * v103)) ^ 0xB0)
                + *(_BYTE *)(STACK[0x3C18]
                           + 4647 * (((v103 >> 3) | (32 * v103)) ^ 0x3F)
                           + 3568896
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647
                                                               * (((v103 >> 3) | (32 * v103)) ^ 0x3Fu)
                                                               + 3568896)) >> 32) >> 1))) ^ 0x3D;
  v109 = *(unsigned __int8 *)(STACK[0x3C18]
                            + v108
                            - 6784 * (((1266205 * (unint64_t)v108) >> 32) >> 1)) ^ 0xFFFFFFE3;
  v110 = ((v109 >> 3) | (32 * v109)) ^ 0xFFFFFF8D;
  v111 = 4647 * (((v110 & v55) + 111) ^ 0x1C) + 4767822;
  v112 = *(unsigned __int8 *)(STACK[0x3C18]
                            + v111
                            - 6784 * (((1266205 * (unint64_t)v111) >> 32) >> 1)) ^ 0x37;
  v113 = ((v112 >> 5) | (8 * v112)) ^ 0x5D;
  v114 = ((v113 >> 3) | (32 * v113)) ^ 0x7B;
  v115 = (((v114 & 0xF8) >> 2) | (v114 << 6)) ^ v110;
  v116 = 4647 * ((((unint64_t)(v115 & v64) >> v54) + 111) ^ 0x1C) + 4767822;
  LODWORD(v95) = LODWORD(STACK[0x3410]) ^ 0x3D;
  v117 = *(unsigned __int8 *)(STACK[0x3C18]
                            + v116
                            - 6784 * (((1266205 * (unint64_t)v116) >> 32) >> 1)) ^ 0xFFFFFFE3;
  v118 = (v115 << v45) | (v117 >> 3) | (32 * v117);
  v119 = STACK[0x3408] ^ 0x97;
  LODWORD(v103) = ((unint64_t)(v103 ^ (2 * (v103 & v21))) << v69) ^ v53 ^ (((v103 ^ (2 * (v103 & v21))) & v67) >> v30) ^ v118;
  v72[9] = v103 - ((2 * v103) & 0x62) + 49;
  HIDWORD(v120) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + 4647 * (_DWORD)v95
                                     + 11928849
                                     - 6784
                                     * (((1266205 * (unint64_t)(4647 * v95 + 11928849)) >> 32) >> 1));
  LODWORD(v120) = (((HIDWORD(v120) ^ 0xFFFFFF86 ^ (HIDWORD(v120) >> 4) & 0xE) & v21) << 25) ^ ((HIDWORD(v120) ^ 0xFFFFFF86 ^ (HIDWORD(v120) >> 4) & 0xE) << 24);
  LODWORD(v103) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + 4647 * v119
                                     + 11928849
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * v119 + 11928849)) >> 32) >> 1));
  LODWORD(v103) = 4647 * (((v103 ^ 0x6B ^ (v103 >> 4) & 0xE) + 111) ^ 0x36) + 17937420;
  v121 = 4647 * ((v120 >> 25) ^ 0xD9) + 19140993;
  LODWORD(v103) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + v103
                                     - 6784
                                     * (((1266205 * (unint64_t)v103) >> 32) >> 1)) ^ 0xE;
  LODWORD(v103) = ((v103 >> 3) | (32 * v103)) ^ (2
                                                                * (((v103 >> 3) | (32 * v103)) & v55));
  v122 = STACK[0x3418];
  v123 = (97
                         * (*(_BYTE *)(STACK[0x3C18]
                                     + v121
                                     - 6784 * (((1266205 * (unint64_t)v121) >> 32) >> 1)) ^ 0x27));
  LODWORD(v103) = (v123 << v69) ^ v53 ^ ((v123 & v67) >> v30) ^ (((unint64_t)(v103 & v64) >> v54) | ((_DWORD)v103 << v45));
  v72[10] = v103 - ((2 * v103) & 0x62) + 49;
  LODWORD(v103) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + 4647 * (v122 ^ 0x36)
                                     + 3568896
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * (v122 ^ 0x36u)
                                                                         + 3568896)) >> 32) >> 1))
                + (v122 ^ 0xFFFFFFB9);
  LODWORD(v95) = 4647 * ((v103 ^ 0x90) & v21 ^ 0xC4) + 14331348;
  LODWORD(v95) = *(unsigned __int8 *)(STACK[0x3C18]
                                    + v95
                                    - 6784
                                    * (((1266205 * (unint64_t)v95) >> 32) >> 1))
               + 117;
  LODWORD(v64) = v55;
  HIDWORD(v120) = v103;
  LODWORD(v120) = ((((2 * ((v95 >> 2) & 0x12 ^ v95)) ^ 0x24) + 52) ^ v103 ^ 0xFFFFFF90) << 24;
  LOBYTE(v123) = (*(_BYTE *)(STACK[0x3C18]
                           + 4647 * (LODWORD(STACK[0x3430]) ^ 3)
                           + 3568896
                           - 6784
                           * (((1266205
                                            * (unint64_t)(4647 * (LODWORD(STACK[0x3430]) ^ 3u)
                                                               + 3568896)) >> 32) >> 1))
                + (LODWORD(STACK[0x3430]) ^ 0x8C)) ^ 0xA1;
  LODWORD(v123) = 4647 * (((v123 >> 1) | ((_BYTE)v123 << 7)) ^ 0x40) + 15539568;
  LODWORD(v103) = 4647 * ((v120 >> 25) ^ 0xD9) + 19140993;
  LODWORD(v123) = 97
                * (*(unsigned __int8 *)(STACK[0x3C18]
                                      + v123
                                      - 6784
                                      * (((1266205 * (unint64_t)v123) >> 32) >> 1)) ^ 0xFFFFFFA2);
  HIDWORD(v120) = STACK[0x33F0];
  LODWORD(v120) = LODWORD(STACK[0x3428]) << 24;
  v124 = (97
                         * (*(_BYTE *)(STACK[0x3C18]
                                     + v103
                                     - 6784
                                     * (((1266205 * (unint64_t)v103) >> 32) >> 1)) ^ 0x27));
  LODWORD(v124) = (v124 << v69) ^ v53 ^ ((v124 & v67) >> v30) ^ (((unint64_t)((v123 ^ (2 * (v123 & v55))) & v81) >> v54) | ((v123 ^ (2 * (v123 & v55))) << v45));
  LODWORD(v123) = 4647 * ((v120 >> 25) ^ 0xE0) + 19140993;
  v72[11] = v124 - ((2 * v124) & 0x62) + 49;
  LOBYTE(v124) = 97
               * (*(_BYTE *)(STACK[0x3C18]
                           + v123
                           - 6784 * (((1266205 * (unint64_t)v123) >> 32) >> 1)) ^ 0x27);
  v125 = STACK[0x3C18];
  LOBYTE(v124) = (v124 ^ 0xB0)
               + *(_BYTE *)(STACK[0x3C18]
                          + 4647 * (v124 ^ 0x3F)
                          + 3568896
                          - 6784
                          * (((1266205
                                           * (unint64_t)(4647 * (v124 ^ 0x3Fu) + 3568896)) >> 32) >> 1));
  LODWORD(v124) = 4647 * (((v124 >> 1) | ((_BYTE)v124 << 7)) ^ 0xCC) + 19140993;
  LODWORD(v123) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + v124
                                     - 6784
                                     * (((1266205 * (unint64_t)v124) >> 32) >> 1));
  LODWORD(STACK[0x38E8]) = LODWORD(STACK[0x3C08]) ^ (LODWORD(STACK[0x3C00]) - 1415084476);
  v126 = (97 * (v123 ^ 0x27)) ^ 0xFFFFFFCB ^ (2 * (((97 * (v123 ^ 0x27)) ^ 0xFFFFFFCB) & v21));
  LODWORD(v126) = 4647 * (((v126 & v67) >> v30) ^ (v126 << v69) ^ 0x9A) + 25186740;
  LODWORD(v95) = 4647
               * ((((*(_BYTE *)(v125
                                               + 4647 * (LODWORD(STACK[0x3420]) ^ 0xC8)
                                               + 3568896
                                               - 6784
                                               * (((1266205
                                                                * (unint64_t)(4647
                                                                                   * (LODWORD(STACK[0x3420]) ^ 0xC8u)
                                                                                   + 3568896)) >> 32) >> 1))
                                    + (LODWORD(STACK[0x3420]) ^ 0x47)) ^ 0x2A)
                                  + 111) ^ 0x1C)
               + 4767822;
  LODWORD(v95) = *(unsigned __int8 *)(v125
                                    + v95
                                    - 6784
                                    * (((1266205 * (unint64_t)v95) >> 32) >> 1)) ^ 0xFFFFFFE3;
  LODWORD(v95) = ((v95 >> 3) | (32 * v95)) ^ 0xFFFFFFD8;
  LODWORD(v95) = v95 ^ (2 * (v95 & v55));
  v127 = 4647
       * ((((v95 & v81) >> 1) | ((v95 & v81) << 7)) ^ 0xD9)
       + 19140993;
  LODWORD(v126) = ((*(unsigned __int8 *)(v125
                                       + v126
                                       - 6784
                                       * (((1266205 * (unint64_t)v126) >> 32) >> 1)) ^ 0xFFFFFFC3)
                 + 85) ^ v53 ^ (((_DWORD)v95 << v45) | ((unint64_t)(97
                                                                                          * (*(_BYTE *)(v125 + v127 - 6784 * (((1266205 * (unint64_t)v127) >> 32) >> 1)) ^ 0x27)) >> v54));
  LODWORD(v95) = STACK[0x3460] ^ 0x3F;
  v72[12] = v126 - ((2 * v126) & 0x62) + 49;
  v128 = (9 * LODWORD(STACK[0x3B70])) ^ v45 ^ (8 * v45) ^ 0xABA78644;
  LODWORD(v124) = *(unsigned __int8 *)(v125
                                     + 4647 * (_DWORD)v95
                                     + 14331348
                                     - 6784
                                     * (((1266205 * (unint64_t)(4647 * v95 + 14331348)) >> 32) >> 1))
                + 117;
  LOBYTE(v124) = (v124 ^ 0x12 ^ (v124 >> 2) & 0x12) + 26;
  LODWORD(v124) = 4647
                * (((v124 ^ 0xB0)
                                   + *(_BYTE *)(v125
                                              + 4647 * (v124 ^ 0x3F)
                                              + 3568896
                                              - 6784
                                              * (((1266205
                                                               * (unint64_t)(4647
                                                                                  * (v124 ^ 0x3Fu)
                                                                                  + 3568896)) >> 32) >> 1))) ^ 0xD4)
                + 13123128;
  LODWORD(v124) = *(unsigned __int8 *)(v125
                                     + v124
                                     - 6784
                                     * (((1266205 * (unint64_t)v124) >> 32) >> 1))
                - 71;
  LODWORD(v124) = ((v124 ^ ((_DWORD)v124 << 6) ^ (4 * v124) ^ 0xFFFFFFFE) + 26) ^ 0x3E;
  v129 = v124 ^ (2 * (v124 & v21));
  LODWORD(v126) = 4647 * (((v129 & v67) >> v30) ^ 0xB8) + 9544938;
  v130 = (*(unsigned __int8 *)(v125
                             + 4647 * (LODWORD(STACK[0x3450]) ^ 0x7B)
                             + 3568896
                             - 6784
                             * (((1266205
                                              * (unint64_t)(4647
                                                                 * (LODWORD(STACK[0x3450]) ^ 0x7Bu)
                                                                 + 3568896)) >> 32) >> 1))
        + (LODWORD(STACK[0x3450]) ^ 0xFFFFFFF4)) ^ 0xFFFFFF8B;
  v131 = v130 ^ (2 * (v130 & v64));
  v132 = 4647 * ((v131 << v45) ^ 0xB8) + 9544938;
  LODWORD(v72) = STACK[0x3440];
  LODWORD(v129) = (((*(unsigned __int8 *)(v125
                                        + v126
                                        - 6784
                                        * (((1266205 * (unint64_t)v126) >> 32) >> 1))
                   - 87) ^ 0xFFFFFFFB)
                 + 85) ^ v53 ^ (v129 << v69) ^ (((unint64_t)(v131 & v81) >> v54) | (((*(unsigned __int8 *)(v125 + v132 - 6784 * (((1266205 * (unint64_t)v132) >> 32) >> 1)) - 87) ^ 0xFFFFFFFB) + 85));
  v83[13] = v129 - ((2 * v129) & 0x62) + 49;
  v133 = (*(unsigned __int8 *)(v125
                             + 4647 * (v72 ^ 0xE6)
                             + 3568896
                             - 6784
                             * (((1266205
                                              * (unint64_t)(4647 * (v72 ^ 0xE6u) + 3568896)) >> 32) >> 1))
        + (v72 ^ 0x69)) ^ 0x55;
  v134 = ((unint64_t)(v133 ^ (2 * (v133 & v21))) << v69) ^ (((v133 ^ (2 * (v133 & v21))) & v67) >> v30);
  LODWORD(v129) = (v134 >> 1) & 0xFFFFFF7F | ((v134 & 1) << 7);
  v135 = *(unsigned __int8 *)(v125
                            + 4647 * (STACK[0x3470] ^ 0xF3)
                            + 11928849
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647 * (STACK[0x3470] ^ 0xF3u)
                                                                + 11928849)) >> 32) >> 1));
  v136 = v135 ^ 0xFFFFFF89 ^ (v135 >> 4) & 0xE ^ (2 * ((v135 ^ 0xFFFFFF89 ^ (v135 >> 4) & 0xE) & v64));
  v137 = (97
        * (*(unsigned __int8 *)(v125
                              + (4647 * (v129 ^ 0xD9)
                                             + 19140993
                                             - 6784
                                             * ((81037119
                                               * (unint64_t)((4647 * (v129 ^ 0xD9) + 19140993) >> 7)) >> 32))) ^ 0x27)) ^ v53 ^ (((unint64_t)(v136 & v81) >> v54) | (v136 << v45));
  LODWORD(v129) = ((STACK[0x3468] ^ 0x3C) + 111) ^ 0x36;
  v83[14] = v137 - ((2 * v137) & 0x62) + 49;
  LOBYTE(v137) = *(_BYTE *)(v125
                          + 4647 * (_DWORD)v129
                          + 17937420
                          - 6784
                          * (((1266205 * (unint64_t)(4647 * v129 + 17937420)) >> 32) >> 1)) ^ 0xE;
  v138 = 4647 * (((v137 >> 3) | (32 * v137)) ^ 0x3C) + 11928849;
  v139 = *(unsigned __int8 *)(v125 + v138 - 6784 * (((1266205 * (unint64_t)v138) >> 32) >> 1));
  v140 = 4647 * (v139 ^ 0x21 ^ (v139 >> 4) & 0xE) + 13123128;
  v141 = *(unsigned __int8 *)(v125 + v140 - 6784 * (((1266205 * (unint64_t)v140) >> 32) >> 1)) - 71;
  v142 = ((v141 ^ (v141 << 6) ^ (4 * v141) ^ 0xFFFFFFFE) + 26) ^ 0xFFFFFF8B;
  v143 = v142 ^ (2 * (v142 & v21));
  LODWORD(v129) = 4647 * (((v143 << v69) + 111) ^ 0x36) + 17937420;
  LODWORD(v129) = *(unsigned __int8 *)(v125
                                     + v129
                                     - 6784
                                     * (((1266205 * (unint64_t)v129) >> 32) >> 1)) ^ 0xE;
  LODWORD(v126) = LODWORD(STACK[0x3458]) ^ 0x73;
  LODWORD(v143) = ((v129 >> 3) | (32 * v129)) ^ v53 ^ ((v143 & v67) >> v30);
  LODWORD(v143) = 4647 * (((v143 >> 1) | ((_BYTE)v143 << 7)) ^ 0xD9) + 19140993;
  v144 = 16843009 * LODWORD(STACK[0x3B78]);
  LODWORD(v129) = *(unsigned __int8 *)(v125
                                     + v143
                                     - 6784
                                     * (((1266205 * (unint64_t)v143) >> 32) >> 1)) ^ 0x27;
  LODWORD(STACK[0x3848]) = v144;
  LODWORD(STACK[0x3C08]) = LODWORD(STACK[0x3C38]) + 187947369;
  LODWORD(v95) = *(unsigned __int8 *)(v125
                                    + 4647 * (_DWORD)v126
                                    + 11928849
                                    - 6784
                                    * (((1266205 * (unint64_t)(4647 * v126 + 11928849)) >> 32) >> 1));
  LODWORD(v95) = v95 ^ 0xFFFFFFC6 ^ (v95 >> 4) & 0xE ^ (2
                                                                    * ((v95 ^ 0xFFFFFFC6 ^ (v95 >> 4) & 0xE) & v64));
  LODWORD(v95) = (((unint64_t)(v95 & v81) >> v54) | ((_DWORD)v95 << v45)) ^ (97 * v129);
  LODWORD(STACK[0x3C00]) = (v21 ^ LODWORD(STACK[0x3B90])) >> 6;
  v145 = STACK[0x3C70];
  v83[15] = v95 - ((2 * v95) & 0x62) + 49;
  v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 + 8 * SLODWORD(STACK[0x3C58]))
                                                                    - 12);
  LODWORD(STACK[0x38C0]) = LODWORD(STACK[0x3C58]) - 8618;
  LODWORD(STACK[0x3BF0]) = 32 * (v144 ^ 0x96969696 ^ v53);
  LODWORD(STACK[0x3BF8]) = v53 - (v144 ^ 0x96969696);
  LODWORD(STACK[0x3838]) = v128;
  LODWORD(STACK[0x3834]) = LODWORD(STACK[0x38E8]) ^ v128;
  LODWORD(STACK[0x3C78]) = v64;
  return v146(1088, 58093, v81, 31547);
}

uint64_t sub_1006F413C(int a1, int a2, char a3, int a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  char v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;

  v26 = *(unsigned __int16 *)(v20
                            + 2
                            * (v13
                             + (v15 ^ 0x5D) * v12
                             - ((((v13 + (v15 ^ 0x5Du) * v12) * (unint64_t)v14) >> 32) >> 10) * a1)) ^ a2;
  v27 = v19 + ((2 * (v15 & a7) + 111) ^ 0x36) * v9;
  v28 = *(unsigned __int8 *)(v17 + v27 - 6784 * (((1266205 * (unint64_t)v27) >> 32) >> 1)) ^ 0xE;
  v29 = ((v28 >> 3) | (32 * v28)) ^ v15;
  v30 = ((((unint64_t)(v29 & a3) >> v23) | (v29 << v25)) ^ v22 ^ 0x9A) * v9
      + 25186740;
  *(_DWORD *)(v8
            + 4
            * ((*(_BYTE *)(v17
                                          + v30
                                          - 6784 * (((1266205 * (unint64_t)v30) >> 32) >> 1)) ^ 0xC3)
                              + 85)) = (((unint64_t)((((v26 & v10) << v11) ^ v26) & STACK[0x3C50]) << v18)
                                      + (((((v26 & v10) << v11) ^ v26) & v21) >> v24)) ^ v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * (((v15 == 255) * a4) ^ LODWORD(STACK[0x3C58]))) - 12))();
}

uint64_t sub_1006F4244(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  int v107;
  unint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  unsigned int v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  int v119;
  int v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unsigned int v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  int v202;
  unint64_t v203;
  int v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  int v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  int v235;
  int v236;
  unint64_t v237;
  unint64_t v238;
  int v239;
  unint64_t v240;
  int v241;
  int v242;
  unint64_t v243;
  unint64_t v244;
  int v245;
  int v246;
  int v247;
  int v248;
  BOOL v249;
  int v250;
  int v251;
  int v252;
  int v253;
  unint64_t v254;
  unint64_t v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  BOOL v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  unint64_t v376;
  int v377;
  unint64_t v378;
  unint64_t v379;
  int v380;
  unint64_t v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  unsigned int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  unint64_t v397;
  int v398;
  int v399;
  int v400;
  int v401;
  unsigned int v402;
  int v403;
  unint64_t v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  unint64_t v410;
  unsigned int v411;
  unsigned int v412;
  unint64_t v413;
  int v414;
  unint64_t v415;
  int v416;
  unsigned int v417;
  int v418;
  unsigned int v419;
  int v420;
  int v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  int v425;
  int v426;
  int v427;
  unint64_t v428;
  unint64_t v429;
  unsigned int v430;
  int v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  int v435;
  int v436;
  int v437;
  unint64_t v438;
  unint64_t v439;
  int v440;
  int v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  int v446;
  unint64_t v447;
  int v448;
  unint64_t v449;
  int v450;
  int v451;
  unint64_t v452;
  unint64_t v453;
  int v454;
  int v455;
  int v456;
  unint64_t v457;
  int v458;
  int v459;
  unint64_t v460;
  int v461;
  int v462;
  int v463;
  unsigned int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  BOOL v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  BOOL v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  unint64_t v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  uint64_t (*v620)(uint64_t, _QWORD);

  v16 = 10 * (LODWORD(STACK[0x38C0]) ^ 0x1BE2);
  LODWORD(STACK[0x3808]) = v16;
  v17 = LODWORD(STACK[0x3BF8]) + (LODWORD(STACK[0x3BF0]) ^ 0xB33D969 ^ (v7 >> (v16 - 88)));
  v18 = STACK[0x3B90];
  v19 = LODWORD(STACK[0x3BA8]) ^ LODWORD(STACK[0x3B80]) ^ ((STACK[0x3BA8] & 0xFFFFFF80)
                                                         + LODWORD(STACK[0x3B90]));
  LODWORD(STACK[0x3C58]) = v19;
  v20 = v19 ^ LODWORD(STACK[0x3C20]);
  LODWORD(STACK[0x3C30]) = v8;
  v21 = v8 ^ v18 ^ LODWORD(STACK[0x3B88]) ^ LODWORD(STACK[0x3C00]) ^ LODWORD(STACK[0x3C08]) ^ 0x66917384 ^ v17;
  v22 = 33686018 * LODWORD(STACK[0x3B98]);
  v23 = v22 & 0xD4A11A2A ^ 0x6A508D15;
  v24 = STACK[0x3C50];
  v25 = (unint64_t)(STACK[0x3C50] & v23) << v10;
  v26 = a3;
  v27 = v11;
  v28 = v11 & v23;
  v29 = v12;
  v30 = (((((2 * a7) & 0x11A37D64 ^ 0x88D1BEB2) & ~v20) << v15) | ((((2 * a7) & 0x11A37D64 ^ 0x88D1BEB2) & a3) >> v14)) ^ v12;
  LODWORD(STACK[0x3BF0]) = v30;
  v31 = v13;
  v32 = v25 ^ (v28 >> v13);
  LODWORD(STACK[0x3BE0]) = v32;
  v33 = v20;
  LODWORD(v25) = ((unint64_t)(((2 * a7) & 0x38845C ^ 0x801C422E) & ~v20) << v10) ^ ((((2 * a7) & 0x38845C ^ 0x801C422E) & v27) >> v14);
  v34 = v25 ^ v12;
  v35 = v9;
  v36 = (((v24 & (v22 & 0xEB43735E ^ 0xF5A1B9AF)) << v15)
       + ((a3 & (v22 & 0xEB43735E ^ 0xF5A1B9AF)) >> v13)) ^ v9;
  LODWORD(STACK[0x3BD8]) = v36;
  v37 = v22;
  STACK[0x3BE8] = v34;
  v38 = (((v24 & ((2 * a7) & 0x64245F58 ^ 0x32122FAC)) << v15) | ((((2 * a7) & 0x64245F58 ^ 0x32122FAC) & v27) >> v13)) ^ v30 ^ (((unint64_t)((v37 & 0xD6245F58 ^ 0x6B122FAC) & ~v33) << v10) + ((a3 & (v37 & 0xD6245F58 ^ 0x6B122FAC)) >> v14)) ^ *((_DWORD *)&STACK[0x40D0] + v34) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE1(v34)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v34)), 16);
  v39 = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v34 >> 22) & 0x3FC)), 8);
  v40 = v38 ^ v39 ^ v32;
  v41 = v38 ^ v39;
  LODWORD(STACK[0x3C00]) = v38 ^ v39;
  v42 = v40 ^ v36 ^ v21;
  v43 = v40;
  LODWORD(STACK[0x3BF8]) = v40;
  v44 = v21 ^ v9;
  v45 = v21;
  LODWORD(STACK[0x3A90]) = v21 ^ v9;
  v46 = v21 ^ v9 ^ v25 ^ v42;
  LODWORD(v25) = 4647 * (((v46 >> 1) & 0x80 | ((unsigned __int16)v46 >> 9)) ^ 0xD9) + 19140993;
  v47 = (((v24 & (v37 & 0xDF9AB30A ^ 0xEFCD5985)) << v15) | ((v26 & (v37 & 0xDF9AB30A ^ 0xEFCD5985)) >> v14)) ^ (((unint64_t)(((2 * a7) & 0xDB9AB30A ^ 0xEDCD5985) & ~v33) << v10) | ((((2 * a7) & 0xDB9AB30A ^ 0xEDCD5985) & v27) >> v13)) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v46)), 16) ^ *((_DWORD *)&STACK[0x40D0] + v46);
  STACK[0x3BC8] = v46;
  v48 = STACK[0x3C18];
  v49 = v47 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v46 >> 22) & 0x3FC)), 8) ^ v41 ^ __ROR4__(*((_DWORD *)&STACK[0x40D0]+ (97 * (*(_BYTE *)(STACK[0x3C18] + v25 - 6784 * (((1266205 * (unint64_t)v25) >> 32) >> 1)) ^ 0x27))), 24);
  LODWORD(v25) = v42 ^ v29;
  v50 = v45 ^ v43 ^ v49;
  LODWORD(STACK[0x3BB0]) = v49;
  v51 = v42 ^ v29 ^ v45;
  LODWORD(STACK[0x3BD0]) = v51;
  v52 = v45;
  v53 = v50 ^ v9 ^ v46 ^ v51;
  v54 = v53 ^ v45;
  LOBYTE(v45) = *(_BYTE *)(v48
                         + 4647 * (BYTE3(v54) ^ 0xFE)
                         + 13123128
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE3(v54) ^ 0xFE) + 13123128)) >> 32) >> 1))
              - 71;
  v55 = (((unint64_t)(v24 & (v37 & 0xA6CFE038 ^ 0x5367F01C)) << v10) | ((v27 & (v37 & 0xA6CFE038 ^ 0x5367F01C)) >> v31)) ^ (((((2 * a7) & 0xACCFE038 ^ 0x5667F01C) & ~v33) << v15) + ((((2 * a7) & 0xACCFE038 ^ 0x5667F01C) & v26) >> v14)) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v54)), 16) ^ v49;
  v56 = __ROR4__(*((_DWORD *)&STACK[0x40D0] + ((v45 ^ ((_BYTE)v45 << 6) ^ (4 * v45) ^ 0xFE) + 26)), 8);
  STACK[0x3BC0] = v54;
  LODWORD(v54) = v55 ^ v56 ^ *((_DWORD *)&STACK[0x40D0] + v54) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0]+ BYTE1(v54)), 24);
  v57 = v33;
  v58 = (((v24 & (v37 & 0x77A3F63E ^ 0xBBD1FB1F)) << v15) | ((v26 & (v37 & 0x77A3F63E ^ 0xBBD1FB1F)) >> v31)) ^ (((unint64_t)(((2 * a7) & 0xB1A3F63E ^ 0x58D1FB1F) & ~v33) << v10) + ((((2 * a7) & 0xB1A3F63E ^ 0x58D1FB1F) & v27) >> v14));
  LODWORD(STACK[0x3BA0]) = v25 ^ v50;
  v59 = v50 ^ v29;
  LODWORD(STACK[0x3B40]) = v50 ^ v29;
  v60 = v50 ^ v29 ^ v35 ^ v54;
  LODWORD(STACK[0x3BB8]) = v60;
  LODWORD(v46) = v54;
  LODWORD(STACK[0x3B78]) = v54;
  LODWORD(v54) = v60 ^ v25 ^ v50;
  v61 = v54 ^ v53;
  v62 = v54;
  LODWORD(v25) = v58 ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v61)), 16);
  v63 = 4647 * ((((v54 ^ v53) >> 1) & 0x80 | ((unsigned __int16)(v54 ^ v53) >> 9)) ^ 0x40) + 15539568;
  v64 = *((_DWORD *)&STACK[0x40D0]
        + (97
                          * (*(_BYTE *)(v48 + v63
                                            - 6784 * (((1266205 * (unint64_t)v63) >> 32) >> 1)) ^ 0xA2)));
  v65 = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v61 >> 22) & 0x3FC)), 8);
  v66 = 4647 * ((HIBYTE(v64) + 111) ^ 0x1C) + 4767822;
  STACK[0x3B90] = v61;
  LOBYTE(v66) = *(_BYTE *)(v48 + v66 - 6784 * (((1266205 * (unint64_t)v66) >> 32) >> 1)) ^ 0xE3;
  LODWORD(v25) = v25 ^ v65 ^ *((_DWORD *)&STACK[0x40D0] + v61) ^ (((v66 >> 3) | (32 * v66)) | (v64 << 8));
  LODWORD(STACK[0x3B68]) = v54;
  v67 = v25 ^ v59;
  v68 = v44 ^ v54 ^ v61 ^ v25 ^ v59;
  v69 = v68 ^ v52;
  STACK[0x3BA8] = v69;
  v70 = (((v24 & (v37 & 0x22E94A48 ^ 0x1174A524)) << v15)
       + ((v26 & (v37 & 0x22E94A48 ^ 0x1174A524)) >> v14)) ^ (((unint64_t)(((2 * a7) & 0x7EE94A48 ^ 0x3F74A524) & ~v57) << v10)
                                                                          + ((((2 * a7) & 0x7EE94A48 ^ 0x3F74A524) & v27) >> v31)) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE1(v69)), 24) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v69 >> 22) & 0x3FC)), 8);
  v71 = __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v69)), 16);
  v72 = *((_DWORD *)&STACK[0x40D0] + (v68 ^ v52));
  LODWORD(STACK[0x3B88]) = v25 ^ v46;
  LODWORD(v69) = v70 ^ v71 ^ v72 ^ v25 ^ v46;
  v73 = 2 * a7;
  v74 = v37;
  LODWORD(STACK[0x3C48]) = v35;
  v75 = v25 ^ v59 ^ v35 ^ v69;
  LODWORD(STACK[0x3B80]) = v75;
  LODWORD(v61) = v69;
  LODWORD(STACK[0x3B10]) = v69;
  LODWORD(STACK[0x3B70]) = v25 ^ v59 ^ v62;
  LODWORD(STACK[0x3B08]) = v25 ^ v59;
  v76 = v75 ^ v25 ^ v59 ^ v62;
  v77 = v76 ^ v68;
  LODWORD(v25) = ((v24 & ((2 * a7) & 0x7E3E8266 ^ 0x3F1F4133)) << v15) ^ ((((2 * a7) & 0x7E3E8266 ^ 0x3F1F4133) & v26) >> v14) ^ (((unint64_t)((v37 & 0xF83E8266 ^ 0x7C1F4133) & ~v57) << v10) + ((v27 & (v37 & 0xF83E8266 ^ 0x7C1F4133)) >> v31)) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v77)), 16);
  v78 = __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE1(v77)), 24);
  v79 = *(_DWORD *)((char *)&STACK[0x40D0] + ((v77 >> 22) & 0x3FC));
  STACK[0x3B60] = v77;
  LODWORD(v25) = v25 ^ v78 ^ *((_DWORD *)&STACK[0x40D0] + v77) ^ __ROR4__(v79, 8);
  v80 = v26;
  v81 = v76 ^ v52 ^ v29;
  LODWORD(STACK[0x3B30]) = v81;
  LODWORD(STACK[0x3C10]) = v29;
  v82 = v25 ^ v67 ^ v81;
  v83 = v25 ^ v67;
  LODWORD(STACK[0x3B48]) = v25 ^ v67;
  LODWORD(STACK[0x3B50]) = v82 ^ v35;
  v84 = v77 ^ v29 ^ v82 ^ v35;
  v85 = v84 ^ v52;
  STACK[0x3B58] = v85;
  v86 = (((v24 & (v74 & 0x870D284E ^ 0xC3869427)) << v15) | ((v26 & (v74 & 0x870D284E ^ 0xC3869427)) >> v14)) ^ (((unint64_t)((v73 & 0xCF0D284E ^ 0x67869427) & ~v57) << v10) | (((v73 & 0xCF0D284E ^ 0x67869427) & v27) >> v31)) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v85)), 16);
  v87 = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v85 >> 22) & 0x3FC)), 8);
  LODWORD(STACK[0x3B38]) = v25 ^ v61;
  LODWORD(v85) = v86 ^ v87 ^ v25 ^ v61 ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE1(v85)), 24) ^ *((_DWORD *)&STACK[0x40D0]
                                                                                                  + (v84 ^ v52));
  LODWORD(STACK[0x3B20]) = 2 * a7;
  v88 = v83 ^ v52;
  v89 = v85 ^ v83 ^ v52;
  LODWORD(v61) = v85;
  LODWORD(STACK[0x3AF8]) = v85;
  LODWORD(v25) = v89 ^ v82;
  LODWORD(STACK[0x3AF0]) = v89;
  LODWORD(v85) = v89 ^ v82 ^ v84;
  v90 = 4647 * ((v85 + 111) ^ 0x36) + 17937420;
  LODWORD(STACK[0x3B18]) = v74;
  v91 = v74 & 0x1362344C ^ 0x89B11A26;
  STACK[0x3C28] = v27;
  LODWORD(STACK[0x3C68]) = v14;
  v92 = v26 & v91;
  LODWORD(v26) = v57;
  v93 = (unint64_t)(v91 & ~v57) << v10;
  v94 = v10;
  v95 = v31;
  v96 = STACK[0x3C18];
  LOBYTE(v90) = *(_BYTE *)(STACK[0x3C18] + v90 - 6784 * (((1266205 * (unint64_t)v90) >> 32) >> 1)) ^ 0xE;
  LODWORD(v46) = 4647 * (((v85 >> 9) & 0x80 | (v85 >> 17) & 0x7F) ^ 0xD9) + 19140993;
  v97 = v85;
  LODWORD(STACK[0x3B00]) = v85;
  v98 = (((v24 & (v73 & 0x8D62344C ^ 0xC6B11A26)) << v15)
       + (((v73 & 0x8D62344C ^ 0xC6B11A26) & v27) >> v14)) ^ (v93 | (v92 >> v31)) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE3(v85)), 8) ^ *((_DWORD *)&STACK[0x40D0] + ((v90 >> 3) | (32 * v90)));
  LOBYTE(v93) = *(_BYTE *)(v96
                         + 4647 * (BYTE1(v85) ^ 0xFE)
                         + 13123128
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE1(v85) ^ 0xFEu) + 13123128)) >> 32) >> 1))
              - 71;
  v99 = v98 ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + ((v93 ^ ((_BYTE)v93 << 6) ^ (4 * v93) ^ 0xFE) + 26)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0]+ (97* (*(_BYTE *)(v96+ v46- 6784* (((1266205 * (unint64_t)v46) >> 32) >> 1)) ^ 0x27))), 16);
  v100 = v94;
  LODWORD(v93) = ((unint64_t)(v24 & (v73 & 0xD164765A ^ 0xE8B23B2D)) << v94) | (((v73 & 0xD164765A ^ 0xE8B23B2D) & v27) >> v14);
  LODWORD(v85) = v25 ^ v52 ^ v29;
  LODWORD(STACK[0x3AD8]) = v85;
  v101 = v99 ^ v88;
  LODWORD(STACK[0x3AB8]) = v99 ^ v88;
  LODWORD(v61) = v99 ^ v61;
  LODWORD(v25) = v89 ^ v52 ^ v85 ^ v61;
  v102 = v61;
  LODWORD(STACK[0x3AB0]) = v61;
  LODWORD(STACK[0x3AE0]) = v25 ^ v29;
  v103 = STACK[0x3C48];
  v104 = v97 ^ LODWORD(STACK[0x3C48]) ^ v25 ^ v29;
  v105 = v104 ^ v52;
  v106 = 4647 * ((((v104 ^ v52) >> 1) & 0x80 | ((unsigned __int16)(v104 ^ v52) >> 9)) ^ 0x40) + 15539568;
  LODWORD(v92) = 4647 * (((((v104 ^ v52) & 1) << 7) | ((v104 ^ v52) >> 1)) ^ 0x40) + 15539568;
  LODWORD(v27) = v26;
  STACK[0x3AE8] = v105;
  LODWORD(v85) = (((v74 & 0xFD64765A ^ 0x7EB23B2D) & ~(_DWORD)v26) << v15) ^ v93 ^ ((v80 & (v74 & 0xFD64765A ^ 0x7EB23B2D)) >> v95) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v105)), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v105 >> 22) & 0x3FC)), 8) ^ v102 ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + (97 * (*(_BYTE *)(v96 + v106 - 6784 * (((1266205 * (unint64_t)v106) >> 32) >> 1)) ^ 0xA2))), 24) ^ *((_DWORD *)&STACK[0x40D0] + (97 * (*(_BYTE *)(v96 + v92 - 6784 * (((1266205 * (unint64_t)v92) >> 32) >> 1)) ^ 0xA2)));
  LODWORD(STACK[0x3AC8]) = v85;
  v107 = v52;
  LODWORD(STACK[0x3AC0]) = v101 ^ v52;
  LODWORD(v85) = v101 ^ v52 ^ v103 ^ v85;
  LODWORD(STACK[0x3AA8]) = v85;
  LODWORD(v85) = v85 ^ v25;
  LODWORD(STACK[0x3AD0]) = v85;
  LODWORD(v93) = v52 ^ v29;
  v108 = v104 ^ v52 ^ v29 ^ v85;
  STACK[0x3C08] = v108;
  LODWORD(v108) = *((_DWORD *)&STACK[0x40D0] + BYTE1(v108));
  LODWORD(STACK[0x3A98]) = v108;
  LODWORD(v25) = 4647 * (((v108 >> 17) & 0x80 | (v108 >> 25)) ^ 0xD9) + 19140993;
  LODWORD(STACK[0x3AA0]) = v25 - 6784 * (((1266205 * (unint64_t)v25) >> 32) >> 1);
  v109 = STACK[0x3B18];
  v110 = v24;
  v111 = v95;
  v112 = ((v80 & (v109 & 0x11A37D64 ^ 0x88D1BEB2)) >> v95) ^ v103 ^ ((v24 & (v109 & 0x11A37D64 ^ 0x88D1BEB2)) << v15);
  LODWORD(STACK[0x39D0]) = v112;
  v113 = STACK[0x3B20];
  v114 = STACK[0x3C28];
  LOBYTE(v74) = STACK[0x3C68];
  LODWORD(v85) = ((unint64_t)((v113 & 0xD4A11A2A ^ 0x6A508D15) & ~(_DWORD)v26) << v100) | (((v113 & 0xD4A11A2A ^ 0x6A508D15) & STACK[0x3C28]) >> v74);
  v115 = (((v113 & 0xEB43735E ^ 0xF5A1B9AF) & ~(_DWORD)v26) << v15) | (((v113 & 0xEB43735E ^ 0xF5A1B9AF) & v80) >> v95);
  LODWORD(STACK[0x39C8]) = v115;
  LODWORD(v108) = 131586 * LODWORD(STACK[0x3B98]);
  LODWORD(STACK[0x39A8]) = v108;
  LODWORD(v95) = v109;
  LODWORD(v105) = ((unint64_t)((v113 & 0x55C001E4 ^ 0xAAE000F2) & ~(_DWORD)v26) << v100) ^ (((v113 & 0x55C001E4 ^ 0xAAE000F2) & v114) >> v74);
  v116 = v80;
  v117 = (((v24 & (v108 & 0x38845C ^ 0x801C422E)) << v100) | ((v114 & (v108 & 0x38845C ^ 0x801C422E)) >> v74)) ^ v103;
  LODWORD(v108) = v105 ^ (((v24 & (v109 & 0xE7C001E4 ^ 0xF3E000F2)) << v15)
                        + ((v80 & (v109 & 0xE7C001E4 ^ 0xF3E000F2)) >> v111)) ^ v112 ^ *((_DWORD *)&STACK[0x40D0] + ((((v24 & (v108 & 0x38845C ^ 0x801C422E)) << v100) | ((v114 & (v108 & 0x38845C ^ 0x801C422E)) >> v74)) ^ v103)) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v117)), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE1(v117)), 24);
  STACK[0x39C0] = v117;
  v118 = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v117 >> 22) & 0x3FC)), 8);
  v119 = STACK[0x3C10];
  LODWORD(v85) = v85 ^ LODWORD(STACK[0x3C10]);
  LODWORD(STACK[0x3980]) = v85;
  LODWORD(STACK[0x3A80]) = v107;
  LODWORD(v105) = v107 ^ v85;
  LODWORD(v85) = v107 ^ v85 ^ v103 ^ v108 ^ v118;
  LODWORD(STACK[0x39B0]) = v85;
  v120 = v108 ^ v118;
  LODWORD(STACK[0x3960]) = v108 ^ v118;
  LODWORD(v25) = v85 ^ v115;
  LODWORD(STACK[0x3A40]) = v93;
  v121 = v93 ^ v117 ^ v85 ^ v115;
  STACK[0x39B8] = v121;
  LODWORD(v85) = ((v24 & (v95 & 0x9F96DFF4 ^ 0xCFCB6FFA)) << v100) ^ ((((v113 & 0x9B96DFF4 ^ 0xCDCB6FFA) & ~(_DWORD)v27) << v15)
                                                                                  + (((v113 & 0x9B96DFF4 ^ 0xCDCB6FFA) & v80) >> v74)) ^ ((v114 & (v95 & 0x9F96DFF4 ^ 0xCFCB6FFA)) >> v111) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE1(v121)), 24) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v121 >> 22) & 0x3FC)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v121)), 16) ^ *((_DWORD *)&STACK[0x40D0] + (v93 ^ v117 ^ v85 ^ v115));
  LODWORD(v46) = v85 ^ v105;
  LODWORD(STACK[0x39A0]) = v25 ^ v107;
  LODWORD(v108) = v85 ^ v105 ^ v119;
  v122 = v108 ^ v25;
  LODWORD(STACK[0x3950]) = v108 ^ v25;
  LODWORD(v92) = v25 ^ v107 ^ v103 ^ v121 ^ v108;
  v123 = v92 ^ v107;
  LODWORD(v105) = *(unsigned __int8 *)(v96
                                     + 4647 * (BYTE1(v123) ^ 0xC4)
                                     + 14331348
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * (BYTE1(v123) ^ 0xC4u) + 14331348)) >> 32) >> 1))
                + 117;
  LODWORD(v105) = *((_DWORD *)&STACK[0x40D0] + ((v105 ^ 0x12 ^ (v105 >> 2) & 0x12) + 26));
  LODWORD(v117) = 4647 * (((v105 >> 17) & 0x80 | (v105 >> 25)) ^ 0x40) + 15539568;
  v124 = v96;
  LODWORD(v117) = (97
                                  * (*(_BYTE *)(v96
                                              + v117
                                              - 6784
                                              * (((1266205 * (unint64_t)v117) >> 32) >> 1)) ^ 0xA2)) | ((_DWORD)v105 << 8);
  STACK[0x3C60] = v100;
  STACK[0x3968] = v123;
  v125 = __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v123 >> 22) & 0x3FC)), 8);
  LODWORD(v25) = *((_DWORD *)&STACK[0x40D0] + BYTE2(v123));
  LODWORD(v85) = v85 ^ v120;
  LODWORD(STACK[0x3958]) = v85;
  LODWORD(v123) = ((unint64_t)((v113 & 0xF4CA694E ^ 0x7A6534A7) & ~(_DWORD)v27) << v100) ^ (((v113 & 0xF4CA694E ^ 0x7A6534A7) & v114) >> v74) ^ (((v110 & (v95 & 0xFECA694E ^ 0x7F6534A7)) << v15) + ((v80 & (v95 & 0xFECA694E ^ 0x7F6534A7)) >> v111)) ^ v125 ^ v85 ^ __ROR4__(v25, 16) ^ *((_DWORD *)&STACK[0x40D0] + (v92 ^ v107)) ^ v117;
  LODWORD(STACK[0x3938]) = v46;
  LODWORD(v25) = v46 ^ v103 ^ v123;
  LODWORD(STACK[0x3948]) = v25;
  v126 = v123;
  LODWORD(STACK[0x3918]) = v123;
  LODWORD(v25) = v25 ^ v122;
  v127 = v25 ^ v92;
  LODWORD(v123) = *((_DWORD *)&STACK[0x40D0] + BYTE1(v127));
  LODWORD(v117) = 4647 * ((BYTE3(v123) + 111) ^ 0x1C) + 4767822;
  LOBYTE(v105) = *(_BYTE *)(v96
                          + v117
                          - 6784 * (((1266205 * (unint64_t)v117) >> 32) >> 1)) ^ 0xE3;
  LODWORD(v105) = ((v105 >> 3) | (32 * v105)) | ((_DWORD)v123 << 8);
  LODWORD(v123) = (((v110 & (v95 & 0xCA148BE ^ 0x8650A45F)) << v100) | ((v80 & (v95 & 0xCA148BE ^ 0x8650A45F)) >> v74)) ^ ((((v113 & 0xCAA148BE ^ 0x6550A45F) & ~(_DWORD)v27) << v15) + (((v113 & 0xCAA148BE ^ 0x6550A45F) & v114) >> v111)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v127 >> 22) & 0x3FC)), 8);
  v128 = __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v127)), 16);
  STACK[0x3940] = v127;
  LODWORD(v85) = v123 ^ v128 ^ *((_DWORD *)&STACK[0x40D0] + (v25 ^ v92)) ^ v105;
  LODWORD(v100) = v95;
  LODWORD(v105) = (((v95 & 0x20CE87A0 ^ 0x906743D0) & ~(_DWORD)v27) << v15)
                + ((v80 & (v95 & 0x20CE87A0 ^ 0x906743D0)) >> v111);
  LODWORD(v117) = v25 ^ v93;
  LODWORD(STACK[0x3928]) = v85 ^ v46;
  LODWORD(v123) = v85 ^ v46 ^ v103;
  LODWORD(v25) = v123 ^ v25 ^ v93;
  LODWORD(v92) = v117;
  LODWORD(STACK[0x3900]) = v117;
  LODWORD(STACK[0x3930]) = v25;
  LODWORD(v93) = v123;
  LODWORD(STACK[0x3908]) = v123;
  LODWORD(v123) = v127 ^ v119 ^ v25;
  v129 = v123 ^ LODWORD(STACK[0x3A80]);
  LODWORD(v117) = *((_DWORD *)&STACK[0x40D0] + BYTE1(v129));
  LODWORD(v121) = 4647 * (((v117 >> 17) & 0x80 | (v117 >> 25)) ^ 0x40) + 15539568;
  LODWORD(v121) = (97
                                  * (*(_BYTE *)(v96
                                              + v121
                                              - 6784
                                              * (((1266205 * (unint64_t)v121) >> 32) >> 1)) ^ 0xA2)) | ((_DWORD)v117 << 8);
  v130 = STACK[0x3C60];
  LODWORD(v95) = v114;
  LODWORD(v96) = STACK[0x3C68];
  STACK[0x3920] = v129;
  LODWORD(v105) = v105 ^ (((v113 & 0x7CCE87A0 ^ 0xBE6743D0) & v114) >> v96) ^ ((unint64_t)(v110 & (v113 & 0x7CCE87A0 ^ 0xBE6743D0)) << v130) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v129 >> 22) & 0x3FC)), 8);
  v131 = __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v129)), 16);
  LODWORD(STACK[0x3910]) = v85 ^ v126;
  LODWORD(v117) = v105 ^ v131 ^ *((_DWORD *)&STACK[0x40D0] + v129) ^ v85 ^ v126 ^ v121;
  LODWORD(STACK[0x3858]) = v117;
  LOBYTE(v114) = v130;
  LODWORD(STACK[0x3A38]) = v117 ^ v92;
  LODWORD(v25) = v117 ^ v92 ^ v119;
  LODWORD(STACK[0x38F0]) = v25;
  LODWORD(v25) = v25 ^ v123;
  LODWORD(STACK[0x3810]) = v25;
  LODWORD(v105) = STACK[0x3A90];
  v132 = v25 ^ LODWORD(STACK[0x3A90]);
  STACK[0x38F8] = v132;
  LODWORD(v85) = (((v110 & (v100 & 0x7E0F8C42 ^ 0xBF07C621)) << v15)
                + ((v95 & (v100 & 0x7E0F8C42 ^ 0xBF07C621)) >> v111)) ^ (((unint64_t)((v113 & 0xF80F8C42 ^ 0xFC07C621) & ~(_DWORD)v27) << v130)
                                                                                     + (((v113 & 0xF80F8C42 ^ 0xFC07C621) & v80) >> v96)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v132 >> 22) & 0x3FC)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v132)), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE1(v132)), 24) ^ *((_DWORD *)&STACK[0x40D0] + (v25 ^ v105));
  LODWORD(STACK[0x3800]) = v85;
  LODWORD(v85) = v85 ^ v93;
  LODWORD(STACK[0x3A30]) = v85;
  v133 = v85 ^ v123;
  STACK[0x3A28] = v133;
  LODWORD(STACK[0x37E8]) = 4647 * (BYTE1(v133) ^ 0xB8)
                         + 9544938
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE1(v133) ^ 0xB8u) + 9544938)) >> 32) >> 1);
  LODWORD(v133) = 4647 * (*(unsigned __int8 *)(STACK[0x508] + 12) ^ 0xCF) + 13123128;
  LOBYTE(v133) = *(_BYTE *)(v124
                          + v133
                          - 6784 * (((1266205 * (unint64_t)v133) >> 32) >> 1))
               - 71;
  LOBYTE(v133) = *(_BYTE *)(STACK[0x508] + ((((v133 ^ (4 * v133)) ^ 0xE) + 7) & 0xF));
  LODWORD(v133) = 4647
                * ((((((v133 ^ 7) + 9) ^ -(char)v133) ^ ((v133 ^ 0xF9) + 7)) + 11) & 0xF ^ 0xB8)
                + 9544938;
  LOBYTE(v133) = *(_BYTE *)(STACK[0x508]
                          + (((*(_BYTE *)(v124
                                                         + v133
                                                         - 6784
                                                         * (((1266205
                                                                          * (unint64_t)v133) >> 32) >> 1))
                                              - 87) ^ 0xFB)
                                            + 85));
  LODWORD(v133) = 4647
                * (((((v133 ^ 0xF1) + 15) ^ ((v133 ^ 0x55) - 85) ^ ((v133 ^ 0x95) + 107)) - 81) ^ 0xFE)
                + 13123128;
  LOBYTE(v133) = *(_BYTE *)(v124
                          + v133
                          - 6784 * (((1266205 * (unint64_t)v133) >> 32) >> 1))
               - 71;
  LOBYTE(v133) = *(_BYTE *)(STACK[0x508] + ((((v133 ^ (4 * v133)) ^ 0xE) + 10) & 0xF)) & 0xF;
  LOBYTE(v133) = ((v133 | 0xD6) - (v133 | 0x29) + 41) ^ 0x46;
  LODWORD(v133) = 4647 * ((((((2 * v133) & 0x74) - v133 - 59) ^ 0x54) + 111) ^ 0x36) + 17937420;
  LODWORD(STACK[0x36D0]) = v133 - 6784 * (((1266205 * (unint64_t)v133) >> 32) >> 1);
  STACK[0x3C58] = LODWORD(STACK[0x3C58]) ^ ~LODWORD(STACK[0x3C20]);
  LODWORD(STACK[0x3B98]) = ((v110 & (v100 & 0xDA17287A ^ 0x6D0B943D)) << v15) ^ (((unint64_t)((v113 & 0xE17287A ^ 0x70B943D) & ~(_DWORD)v27) << v130) | (((v113 & 0xE17287A ^ 0x70B943D) & v95) >> v96)) ^ ((v80 & (v100 & 0xDA17287A ^ 0x6D0B943D)) >> v111) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(STACK[0x3C08])), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((STACK[0x3C08] >> 22) & 0x3FC)), 8) ^ *((_DWORD *)&STACK[0x40D0] + STACK[0x3C08]) ^ ((97 * (*(_BYTE *)(v124 + LODWORD(STACK[0x3AA0])) ^ 0x27)) | (LODWORD(STACK[0x3A98]) << 8));
  LODWORD(v25) = v100 & 0x4B4B4B4A ^ 0xA5A5A5A5;
  LODWORD(v133) = v113 & 0x4B4B4B4A ^ 0xA5A5A5A5;
  LOBYTE(v129) = v96;
  v134 = v27;
  v135 = v133 & ~(_DWORD)v27;
  STACK[0x3790] = v135;
  LODWORD(v135) = (_DWORD)v135 << v15;
  LODWORD(STACK[0x3710]) = v135;
  LODWORD(v130) = (v135 | ((v133 & v80) >> v129)) ^ LODWORD(STACK[0x3C48]) ^ LODWORD(STACK[0x3BE0]);
  LODWORD(STACK[0x3A60]) = v130;
  v136 = v80 & v25;
  v137 = v25 & ~(_DWORD)v27;
  STACK[0x3750] = v137;
  STACK[0x3700] = v136;
  LODWORD(STACK[0x3758]) = v136 >> v129;
  LODWORD(STACK[0x3C20]) = LODWORD(STACK[0x3BD8]) ^ (((_DWORD)v137 << v15) + (v136 >> v129));
  v138 = v133 & v95;
  v139 = v110;
  v140 = v110 & v133;
  STACK[0x3720] = v140;
  STACK[0x3708] = v138;
  v141 = v138 >> v111;
  STACK[0x3748] = v141;
  LOBYTE(v80) = v114;
  LODWORD(STACK[0x3BE0]) = ((v140 << v114) + v141) ^ STACK[0x3BE8];
  LODWORD(v141) = v100 & 0xDDDDDDDC ^ 0xEEEEEEEE;
  LODWORD(STACK[0x3A20]) = v141;
  v142 = (unint64_t)(v110 & v141) << v114;
  STACK[0x3738] = v142;
  v143 = v116 & v141;
  STACK[0x3730] = v143;
  v144 = v143 >> v111;
  STACK[0x3828] = v144;
  LODWORD(STACK[0x3A78]) = STACK[0x3BC8] ^ (v142 + v144);
  v145 = v100 & 0x2F2F2F2E ^ 0x97979797;
  LODWORD(v93) = v113 & 0x2F2F2F2E ^ 0x97979797;
  LODWORD(STACK[0x3728]) = v93;
  v146 = v145 & ~(_DWORD)v27;
  LODWORD(STACK[0x37E0]) = v145;
  STACK[0x37D0] = v146 << v114;
  LODWORD(STACK[0x3BE8]) = LODWORD(STACK[0x3BB0]) ^ ((v146 << v114) + ((v116 & v145) >> v129));
  v147 = v110 & v93;
  LODWORD(STACK[0x37C8]) = (_DWORD)v147 << v15;
  LODWORD(v114) = STACK[0x3A80];
  LODWORD(v142) = LODWORD(STACK[0x3A80]) ^ (((_DWORD)v147 << v15) | ((v93 & v95) >> v111)) ^ LODWORD(STACK[0x3B40]);
  LODWORD(STACK[0x3BD8]) = v142;
  v148 = v147 << v80;
  v149 = v93 & v116;
  STACK[0x3760] = v149;
  v150 = v116;
  v151 = v149 >> v111;
  STACK[0x3868] = v151;
  STACK[0x36C0] = v148;
  LODWORD(STACK[0x3BC8]) = STACK[0x3BC0] ^ (v148 + v151);
  LODWORD(v148) = (_DWORD)v146 << v15;
  v152 = v95 & v145;
  STACK[0x3740] = v152;
  LODWORD(v152) = v152 >> v129;
  LODWORD(STACK[0x3860]) = v152;
  LODWORD(STACK[0x36B8]) = v148;
  LODWORD(STACK[0x3BC0]) = LODWORD(STACK[0x3BA0]) ^ (v148 | v152);
  LODWORD(v92) = v100 & 0x39393938 ^ 0x9C9C9C9C;
  LODWORD(v124) = v113 & 0x39393938 ^ 0x9C9C9C9C;
  LODWORD(v132) = v100 & 0x7D7D7D7C ^ 0xBEBEBEBE;
  v153 = v113 & 0x7D7D7D7C ^ 0xBEBEBEBE;
  LODWORD(STACK[0x3BB0]) = v100 & 0x51515150 | 0xA8A8A8A8;
  LODWORD(STACK[0x39D8]) = v113 & 0x51515151 | 0xA8A8A8A8;
  LODWORD(v130) = 16843009 * ((v142 ^ v130) + 17);
  LODWORD(v152) = v100 & 0x60606060 ^ 0x30303030;
  LODWORD(STACK[0x3660]) = v152;
  v154 = (unint64_t)(v152 & ~(_DWORD)v27) << v80;
  v155 = v116 & v152;
  STACK[0x3650] = v155;
  LODWORD(STACK[0x3BA0]) = v154 | (v155 >> v111);
  v156 = v95 & v152;
  STACK[0x36B0] = v156;
  LODWORD(STACK[0x37C0]) = v154 ^ (v156 >> v111);
  v157 = v139 & v25;
  STACK[0x36A8] = v157;
  STACK[0x36F8] = v157 << v80;
  LODWORD(v25) = ((v157 << v80) | ((v95 & v25) >> v111)) ^ LODWORD(STACK[0x3BF0]);
  LODWORD(v154) = v130 ^ (2 * (v130 & LODWORD(STACK[0x3C78])));
  v158 = v154 & v139;
  LODWORD(v156) = v139;
  v159 = v154 & v95;
  STACK[0x3A88] = v159 >> v111;
  v160 = v158 << v80;
  LODWORD(STACK[0x3B40]) = v25 ^ ((v159 >> v111) | (v158 << v80));
  LODWORD(v142) = v113;
  LODWORD(v157) = v113 & 0xDDDDDDDD ^ 0xEEEEEEEE;
  LODWORD(STACK[0x3A10]) = v157;
  LODWORD(v93) = (v157 & ~(_DWORD)v27) << v15;
  LODWORD(STACK[0x36A0]) = v93;
  v161 = v157 & v95;
  v162 = v95;
  STACK[0x3718] = v161;
  LOBYTE(v113) = v129;
  LODWORD(STACK[0x3680]) = v161 >> v129;
  LODWORD(v161) = LODWORD(STACK[0x3BD0]) ^ (v93 + (v161 >> v129));
  LODWORD(v129) = (_DWORD)v158 << v15;
  v163 = v154 & v150;
  v164 = v163 >> v111;
  STACK[0x3A08] = v163 >> v111;
  LODWORD(v27) = v129;
  LODWORD(STACK[0x3670]) = v161 ^ ((v163 >> v111) + v129);
  v165 = v92 & ~v134;
  STACK[0x3698] = v165;
  v166 = v150 & v92;
  STACK[0x3778] = v166;
  LODWORD(v95) = (_DWORD)v165 << v15;
  LODWORD(STACK[0x3878]) = (_DWORD)v165 << v15;
  LODWORD(v159) = v159 >> v113;
  STACK[0x39E8] = v160;
  LODWORD(STACK[0x37D8]) = v160 ^ v159;
  LODWORD(v100) = v159;
  LODWORD(STACK[0x39F8]) = v159;
  LODWORD(STACK[0x3BF0]) = LODWORD(STACK[0x3B78]) ^ (((_DWORD)v165 << v15) | (v166 >> v113)) ^ v160 ^ v159;
  v167 = v156 & v124;
  STACK[0x3690] = v167;
  v168 = v124 & v162;
  STACK[0x3768] = v168;
  v169 = v167 << v80;
  STACK[0x3870] = v169;
  LODWORD(v159) = STACK[0x3C30];
  LODWORD(STACK[0x3A68]) = v130;
  LODWORD(v129) = v130 ^ (2 * (v130 & v159));
  v170 = v129 & ~v134;
  v171 = v129 & v150;
  STACK[0x36F0] = v171;
  LODWORD(STACK[0x39F0]) = (_DWORD)v170 << v15;
  v172 = v171 >> v111;
  STACK[0x3A58] = v172;
  v173 = v172 ^ ((_DWORD)v170 << v15);
  LODWORD(STACK[0x37A0]) = v173;
  LODWORD(STACK[0x3BB8]) ^= v173 ^ (v169 | (v168 >> v111)) ^ v114;
  LODWORD(STACK[0x3780]) = v92;
  v174 = v162 & v92;
  STACK[0x3688] = v174;
  v175 = v174 >> v111;
  STACK[0x35E0] = v175;
  LODWORD(STACK[0x3B78]) = LODWORD(STACK[0x3A40]) ^ (v95 | v175) ^ (v160 | v100) ^ LODWORD(STACK[0x3B68]);
  LODWORD(STACK[0x3770]) = v124;
  v176 = v124 & v150;
  STACK[0x3678] = v176;
  LOBYTE(v160) = v113;
  LODWORD(v176) = v176 >> v113;
  LODWORD(STACK[0x35D0]) = v176;
  LODWORD(STACK[0x3B90]) = STACK[0x3B90] ^ (v169 | v176) ^ v173;
  LODWORD(v169) = v142 & 0xE7E7E7E7 ^ 0xF3F3F3F3;
  LODWORD(STACK[0x3668]) = v169;
  v177 = v169 & ~v134;
  STACK[0x3628] = v177;
  LODWORD(v124) = (v177 << v80) + ((v169 & v162) >> v111);
  v178 = v154 & ~v134;
  v179 = v169 & v150;
  STACK[0x3658] = v179;
  v180 = v179 >> v111;
  STACK[0x3888] = v180;
  v181 = v111;
  LODWORD(STACK[0x3550]) = (_DWORD)v178 << v15;
  LODWORD(v100) = v163 >> v113;
  LODWORD(STACK[0x3AA0]) = v163 >> v113;
  LODWORD(STACK[0x3B88]) ^= (v177 << v80) ^ v180 ^ ((v163 >> v113) | ((_DWORD)v178 << v15));
  LODWORD(v177) = STACK[0x3B18];
  LODWORD(v142) = STACK[0x3B18] & 0xE7E7E7E6 ^ 0xF3F3F3F3;
  LODWORD(STACK[0x3580]) = v142;
  v182 = v150;
  v183 = v156 & v142;
  STACK[0x3620] = v183;
  LODWORD(v130) = (_DWORD)v183 << v15;
  LODWORD(v163) = ((_DWORD)v183 << v15) | ((v150 & v142) >> v160);
  v184 = v162 & v142;
  STACK[0x3600] = v184;
  LODWORD(v184) = v184 >> v160;
  LODWORD(STACK[0x3880]) = v184;
  v185 = v129 & v162;
  v186 = v129 & v156;
  LODWORD(v176) = v156;
  STACK[0x3A48] = v185 >> v111;
  STACK[0x3978] = v186 << v80;
  v187 = (v185 >> v111) + (v186 << v80);
  LODWORD(STACK[0x3B68]) = LODWORD(STACK[0x3B08]) ^ v114 ^ (v130 + v184) ^ v187;
  STACK[0x3A98] = v170 << v80;
  LODWORD(STACK[0x3970]) = v185 >> v160;
  LODWORD(v130) = (v170 << v80) ^ (v185 >> v160);
  LODWORD(STACK[0x3B08]) = LODWORD(STACK[0x3A78]) ^ v130;
  LODWORD(STACK[0x3B70]) ^= v124 ^ v130;
  LODWORD(v130) = v27;
  LODWORD(STACK[0x3A50]) = v27;
  LODWORD(STACK[0x3BA8]) = (v164 | v27) ^ v163 ^ STACK[0x3BA8];
  v188 = v132 & ~v134;
  STACK[0x3618] = v188;
  v189 = v162 & v132;
  LODWORD(STACK[0x3998]) = v189 >> v160;
  LOBYTE(v170) = v160;
  LODWORD(v142) = ((_DWORD)v188 << v15) + (v189 >> v160);
  LODWORD(v160) = (_DWORD)v188 << v15;
  LODWORD(v188) = ((_DWORD)v178 << v15) ^ v100;
  LODWORD(STACK[0x35B0]) = v188;
  LODWORD(STACK[0x3BD0]) = v188 ^ v142 ^ LODWORD(STACK[0x3B10]);
  v190 = v156 & v153;
  STACK[0x35F8] = v190;
  v191 = v153 & v182;
  v192 = v191 >> v111;
  STACK[0x3A78] = v191 >> v111;
  v193 = v190 << v80;
  LODWORD(STACK[0x3B80]) ^= v187 ^ v114 ^ ((v190 << v80) | v192);
  v194 = v182 & v132;
  v195 = v182;
  v196 = v176 & v132;
  STACK[0x3638] = v196;
  LODWORD(v124) = v176;
  v197 = (_DWORD)v186 << v15;
  STACK[0x3A70] = v194 >> v181;
  v198 = v196 << v80;
  STACK[0x38E0] = v198;
  v199 = STACK[0x3A58];
  LODWORD(STACK[0x3B30]) ^= v198 ^ (v194 >> v181) ^ (STACK[0x3A58] + ((_DWORD)v186 << v15));
  v200 = v153 & ~v134;
  STACK[0x3630] = v200;
  v201 = v153 & v162;
  LODWORD(STACK[0x3988]) = v201 >> v170;
  LODWORD(v200) = (_DWORD)v200 << v15;
  LODWORD(STACK[0x38A8]) = v200;
  LODWORD(v198) = v15;
  v202 = STACK[0x39F8];
  v203 = v178 << v80;
  v204 = (v178 << v80) | LODWORD(STACK[0x39F8]);
  LODWORD(STACK[0x3B10]) = v204 ^ (v200 + (v201 >> v170)) ^ STACK[0x3B60];
  LODWORD(v178) = v177 & 0xFEFEFEFE ^ 0x7F7F7F7F;
  v205 = (unint64_t)(v124 & v178) << v80;
  STACK[0x38B8] = v205;
  v206 = v162 & v178;
  STACK[0x3610] = v206;
  v207 = v206 >> v181;
  STACK[0x3798] = v207;
  LODWORD(STACK[0x3648]) = v199 + v197;
  LODWORD(STACK[0x3B60]) = (v199 + v197) ^ (v205 | v207) ^ LODWORD(STACK[0x3B38]);
  LODWORD(v100) = STACK[0x3B20];
  LODWORD(v207) = STACK[0x3B20] & 0xFEFEFEFE ^ 0x7F7F7F7F;
  LODWORD(v163) = (v207 & ~v134) << v198;
  LODWORD(STACK[0x38B0]) = v163;
  v208 = v207 & v195;
  STACK[0x35F0] = v208;
  LODWORD(v208) = v208 >> v170;
  LODWORD(STACK[0x3788]) = v208;
  LODWORD(STACK[0x3A00]) = v203 ^ v202;
  STACK[0x3A18] = v203;
  LODWORD(STACK[0x3B48]) ^= v114 ^ (v163 + v208) ^ v203 ^ v202;
  v209 = v195 & v178;
  STACK[0x35D8] = v209;
  v210 = v178 & ~v134;
  STACK[0x37F8] = v210;
  LODWORD(v210) = (_DWORD)v210 << v198;
  LODWORD(STACK[0x3890]) = v210;
  LODWORD(STACK[0x3B50]) ^= (v199 + v197) ^ v114 ^ (v209 >> v170) ^ v210;
  v211 = v207 & v162;
  STACK[0x35C8] = v211;
  v212 = v124 & v207;
  STACK[0x37F0] = v212;
  v213 = v212 << v80;
  STACK[0x3898] = v213;
  LODWORD(v209) = v204;
  LODWORD(STACK[0x3640]) = v204;
  LODWORD(STACK[0x3B38]) = v204 ^ (v213 + (v211 >> v181)) ^ STACK[0x3B58];
  LODWORD(v207) = STACK[0x39D8];
  LODWORD(v211) = (STACK[0x39D8] & v195) >> v170;
  LODWORD(STACK[0x38A0]) = v211;
  v214 = v207 & ~v134;
  LODWORD(v205) = v207;
  STACK[0x37A8] = v214;
  v215 = v214 << v80;
  STACK[0x38C8] = v215;
  LODWORD(v215) = v215 | v211;
  LODWORD(STACK[0x3540]) = v202 | v130;
  LODWORD(STACK[0x3818]) = v215;
  LODWORD(STACK[0x3B58]) = v215 ^ LODWORD(STACK[0x3C48]) ^ (v202 | v130) ^ LODWORD(STACK[0x3AF0]);
  LODWORD(v207) = STACK[0x3BB0];
  v216 = (v162 & STACK[0x3BB0]) >> v181;
  STACK[0x38D0] = v216;
  v217 = v124 & v207;
  v218 = v207;
  STACK[0x37B0] = v217;
  LODWORD(v217) = (_DWORD)v217 << v198;
  LODWORD(STACK[0x3820]) = v217;
  v219 = STACK[0x3A98];
  LODWORD(STACK[0x3538]) = v199 | STACK[0x3A98];
  LODWORD(STACK[0x3AF8]) ^= v217 ^ v216 ^ (v199 | v219);
  v220 = v189 >> v181;
  LODWORD(v186) = v160;
  LODWORD(v217) = v203 ^ LODWORD(STACK[0x3AA0]);
  LODWORD(STACK[0x3568]) = v217;
  LODWORD(STACK[0x3AF0]) = v217 ^ (v160 + (v189 >> v181)) ^ LODWORD(STACK[0x3AB0]);
  v221 = v195 & v218;
  LODWORD(v160) = v195;
  STACK[0x3B28] = v195;
  STACK[0x3590] = v221;
  v222 = (unint64_t)(v218 & ~v134) << v80;
  STACK[0x35C0] = v222;
  LODWORD(STACK[0x3BB0]) = v222 ^ (v221 >> v170) ^ v209 ^ LODWORD(STACK[0x3AD8]);
  v223 = v205 & v162;
  STACK[0x35A8] = v223;
  LODWORD(v221) = (v124 & v205) << v198;
  LODWORD(STACK[0x35A0]) = v221;
  LODWORD(v80) = v198;
  LODWORD(STACK[0x3558]) = v199 | v197;
  LODWORD(STACK[0x3B00]) ^= (v199 | v197) ^ (v221 + (v223 >> v181));
  v224 = STACK[0x3A48];
  LODWORD(STACK[0x35E8]) = STACK[0x3A48] + v197;
  LODWORD(STACK[0x3AD8]) = v193 ^ (v191 >> v170) ^ (v224 + v197) ^ LODWORD(STACK[0x3AB8]);
  LODWORD(STACK[0x3598]) = v194 >> v170;
  LODWORD(v189) = v186;
  v225 = STACK[0x39E8];
  v226 = STACK[0x3A08];
  LODWORD(STACK[0x3AE0]) ^= v114 ^ (v186 + (v194 >> v170)) ^ (STACK[0x3A08] | STACK[0x39E8]);
  STACK[0x3588] = v201 >> v181;
  STACK[0x3990] = v193;
  LODWORD(v198) = v193 ^ (v201 >> v181);
  LODWORD(v201) = STACK[0x3970];
  v227 = STACK[0x39F0];
  LODWORD(STACK[0x3AB8]) = v198 ^ LODWORD(STACK[0x3970]) ^ LODWORD(STACK[0x39F0]) ^ STACK[0x3AE8];
  LODWORD(v195) = v193 | LODWORD(STACK[0x3988]);
  LODWORD(STACK[0x3578]) = v224 | v219;
  LODWORD(v198) = (v224 | v219) ^ v114;
  LODWORD(v194) = v114;
  LODWORD(STACK[0x35B8]) = v198;
  LODWORD(STACK[0x3AE8]) = v198 ^ v195 ^ LODWORD(STACK[0x3AA8]);
  LODWORD(STACK[0x38D8]) = v191 >> v170;
  v228 = v202;
  v229 = STACK[0x3550];
  v230 = (LODWORD(STACK[0x3550]) | v202) ^ (v193 | (v191 >> v170));
  LODWORD(v195) = v100 & 0x60606060 ^ 0x30303030;
  LODWORD(STACK[0x3510]) = v195;
  v231 = v124;
  LOBYTE(v186) = v80;
  LODWORD(STACK[0x3C40]) = v80;
  LODWORD(v199) = (v124 & v195) << v80;
  v232 = v195 & v160;
  STACK[0x3518] = v232;
  LODWORD(v80) = v199 | (v232 >> v170);
  v233 = v195 & v162;
  STACK[0x3508] = v233;
  LODWORD(v224) = v199 ^ (v233 >> v170);
  v234 = STACK[0x3A70];
  LODWORD(STACK[0x3608]) = v189;
  LODWORD(v234) = v189 | v234;
  v235 = STACK[0x3A50];
  LODWORD(v124) = STACK[0x3AA0];
  LODWORD(STACK[0x37B8]) = v234;
  LODWORD(v199) = (v235 + v124) ^ v234;
  LODWORD(v234) = STACK[0x3AC8];
  LODWORD(v160) = v199 ^ LODWORD(STACK[0x3AC8]);
  LODWORD(STACK[0x3530]) = v197 + v201;
  LODWORD(STACK[0x39E0]) = v197;
  LODWORD(v191) = LODWORD(STACK[0x3B98]) ^ LODWORD(STACK[0x3AC0]);
  LODWORD(v224) = v224 ^ (v197 + v201) ^ v234 ^ LODWORD(STACK[0x3B98]);
  LODWORD(v223) = v194 ^ LODWORD(STACK[0x37C0]) ^ (STACK[0x3A88] + v225);
  LODWORD(v234) = STACK[0x36F0] >> v170;
  LODWORD(STACK[0x39D8]) = v234;
  v236 = (v234 + v227) ^ LODWORD(STACK[0x3A60]);
  LODWORD(v80) = LODWORD(STACK[0x3A90]) ^ v80 ^ (v234 + v227);
  v237 = STACK[0x3A20] & ~v134;
  STACK[0x36F0] = v237;
  LODWORD(v237) = (_DWORD)v237 << v186;
  LODWORD(STACK[0x36E0]) = v237;
  LODWORD(v225) = v237 ^ STACK[0x3828];
  LODWORD(STACK[0x3500]) = v225;
  v238 = STACK[0x3A58];
  LODWORD(v237) = STACK[0x3978] ^ STACK[0x3A58];
  v239 = LODWORD(STACK[0x3BF8]) ^ v225 ^ v237;
  STACK[0x37C0] = v220;
  LODWORD(STACK[0x3828]) = v189 | v220;
  v240 = STACK[0x3C08];
  LODWORD(STACK[0x3BF8]) = v237 ^ (v189 | v220) ^ STACK[0x3C08];
  LODWORD(v237) = STACK[0x3AD0];
  LODWORD(STACK[0x3C08]) = v230 ^ LODWORD(STACK[0x3AD0]);
  LODWORD(v186) = v237 ^ LODWORD(STACK[0x3C10]) ^ v191;
  LODWORD(STACK[0x3B98]) = v186 ^ v223;
  LODWORD(STACK[0x3AD0]) = v80 ^ v240 ^ v186;
  LODWORD(v80) = v194 ^ LODWORD(STACK[0x3BA0]);
  LODWORD(v237) = v226 + STACK[0x3A18];
  LODWORD(STACK[0x3520]) = v237;
  LODWORD(STACK[0x3BA0]) = v80 ^ v237 ^ v191;
  v241 = v124;
  LODWORD(STACK[0x3560]) = v124 | v235;
  v242 = LODWORD(STACK[0x3C20]) ^ (v124 | v235);
  v243 = STACK[0x3A98];
  v244 = STACK[0x3A48];
  LODWORD(STACK[0x34F8]) = STACK[0x3A48] ^ STACK[0x3A98];
  v245 = LODWORD(STACK[0x3BE0]) ^ v244 ^ v243;
  LODWORD(v191) = (&STACK[0x4000] + 208) ^ 0x43DA10C7;
  LODWORD(STACK[0x3570]) = v191;
  v246 = STACK[0x3BD0];
  v247 = v160;
  v248 = v224;
  LODWORD(v191) = v224 + (v191 ^ (v160 - LODWORD(STACK[0x3BD0])));
  LODWORD(STACK[0x3AC8]) = v191;
  v249 = (v191 & 1) == 0;
  if ((v191 & 1) != 0)
    v250 = v242;
  else
    v250 = v236;
  LODWORD(STACK[0x3C20]) = v250;
  if (v249)
    v251 = v242;
  else
    v251 = v245;
  LODWORD(STACK[0x3AC0]) = v251;
  v252 = STACK[0x3B40];
  if (!v249)
    v245 = STACK[0x3B40];
  LODWORD(STACK[0x3BE0]) = v245;
  if (v249)
    v253 = v252;
  else
    v253 = v236;
  LODWORD(STACK[0x3AB0]) = v253;
  v254 = v231 & STACK[0x3A10];
  STACK[0x36E8] = v254;
  v255 = v254 << STACK[0x3C60];
  STACK[0x36D8] = v255;
  v256 = v255 + LODWORD(STACK[0x3680]);
  LODWORD(STACK[0x34F0]) = v256;
  LODWORD(v255) = LODWORD(STACK[0x3C00]) ^ v256;
  LODWORD(STACK[0x3550]) = v229 ^ v228;
  v257 = v255 ^ v229 ^ v228;
  if (v249)
    v258 = v257;
  else
    v258 = v239;
  LODWORD(STACK[0x3A60]) = v258;
  v259 = STACK[0x3670];
  if (v249)
    v260 = v239;
  else
    v260 = STACK[0x3670];
  LODWORD(STACK[0x3AA8]) = v260;
  v261 = STACK[0x3B08];
  if (!v249)
    v259 = STACK[0x3B08];
  LODWORD(STACK[0x34E0]) = v259;
  if (v249)
    v257 = v261;
  LODWORD(STACK[0x3B08]) = v257;
  v262 = STACK[0x3B30];
  v263 = STACK[0x3B10];
  if (v249)
    v264 = STACK[0x3B30];
  else
    v264 = STACK[0x3B10];
  LODWORD(STACK[0x3B40]) = v264;
  v265 = STACK[0x3B80];
  if (v249)
    v262 = STACK[0x3B80];
  LODWORD(STACK[0x3C00]) = v262;
  if (v249)
    v265 = v246;
  LODWORD(STACK[0x3B80]) = v265;
  if (v249)
    v266 = v263;
  else
    v266 = v246;
  LODWORD(STACK[0x3BD0]) = v266;
  v267 = LODWORD(STACK[0x3BE8]) ^ v197 ^ v238;
  v268 = LODWORD(STACK[0x3A00]) ^ LODWORD(STACK[0x3BD8]);
  LODWORD(STACK[0x3548]) = v241 ^ v235;
  v269 = LODWORD(STACK[0x3BC0]) ^ v241 ^ v235;
  LODWORD(STACK[0x3528]) = v243 + v244;
  if (v249)
    v270 = v267;
  else
    v270 = v268;
  if (v249)
  {
    v267 = LODWORD(STACK[0x3BC8]) ^ (v243 + v244);
    v271 = v269;
  }
  else
  {
    v271 = LODWORD(STACK[0x3BC8]) ^ (v243 + v244);
  }
  if (v249)
    v272 = v268;
  else
    v272 = v269;
  if (v249)
    v273 = STACK[0x3B78];
  else
    v273 = STACK[0x3B90];
  if (v249)
    v274 = STACK[0x3B90];
  else
    v274 = STACK[0x3BF0];
  if (v249)
    v275 = STACK[0x3BF0];
  else
    v275 = STACK[0x3BB8];
  if (v249)
    v276 = STACK[0x3BB8];
  else
    v276 = STACK[0x3B78];
  v277 = STACK[0x3B60];
  v278 = STACK[0x3B48];
  if (v249)
    v279 = STACK[0x3B60];
  else
    v279 = STACK[0x3B48];
  LODWORD(STACK[0x3B90]) = v279;
  v280 = STACK[0x3B50];
  if (v249)
    v281 = v278;
  else
    v281 = STACK[0x3B50];
  v282 = STACK[0x3B38];
  if (!v249)
    v280 = STACK[0x3B38];
  LODWORD(STACK[0x34E8]) = v280;
  if (v249)
    v283 = v282;
  else
    v283 = v277;
  v284 = STACK[0x3AF0];
  v285 = STACK[0x3AD8];
  if (v249)
    v286 = STACK[0x3AF0];
  else
    v286 = STACK[0x3AD8];
  LODWORD(STACK[0x3B38]) = v286;
  v287 = STACK[0x3AB8];
  if (v249)
    v284 = STACK[0x3AB8];
  LODWORD(STACK[0x3B48]) = v284;
  v288 = STACK[0x3AE0];
  if (v249)
    v287 = STACK[0x3AE0];
  LODWORD(STACK[0x3B10]) = v287;
  if (v249)
    v288 = v285;
  LODWORD(STACK[0x3AF0]) = v288;
  v289 = STACK[0x3B70];
  v290 = STACK[0x3BA8];
  if (v249)
    v291 = STACK[0x3B70];
  else
    v291 = STACK[0x3BA8];
  v292 = STACK[0x3B88];
  if (!v249)
    v290 = STACK[0x3B88];
  LODWORD(STACK[0x3680]) = v290;
  if (v249)
    v293 = v292;
  else
    v293 = STACK[0x3B68];
  if (v249)
    v294 = STACK[0x3B68];
  else
    v294 = v289;
  LODWORD(STACK[0x3670]) = v294;
  if (v249)
    v295 = STACK[0x3B00];
  else
    v295 = STACK[0x3AF8];
  if (v249)
    v296 = STACK[0x3AF8];
  else
    v296 = STACK[0x3B58];
  if (v249)
    v297 = STACK[0x3B58];
  else
    v297 = STACK[0x3BB0];
  if (v249)
    v298 = STACK[0x3BB0];
  else
    v298 = STACK[0x3B00];
  v299 = STACK[0x3C08];
  if (v249)
    v300 = STACK[0x3AE8];
  else
    v300 = STACK[0x3C08];
  if (v249)
    v301 = v247;
  else
    v301 = STACK[0x3AE8];
  LODWORD(STACK[0x34D8]) = v301;
  if (v249)
    v302 = STACK[0x3BF8];
  else
    v302 = v247;
  if (v249)
    v303 = v299;
  else
    v303 = STACK[0x3BF8];
  LODWORD(STACK[0x3B30]) = v303;
  v304 = STACK[0x3B98];
  v305 = STACK[0x3BA0];
  if (v249)
    v306 = STACK[0x3BA0];
  else
    v306 = STACK[0x3B98];
  v307 = v248;
  if (v249)
  {
    v305 = v248;
    v307 = STACK[0x3AD0];
  }
  else
  {
    v304 = STACK[0x3AD0];
  }
  v308 = (STACK[0x3AC8] & 2) == 0;
  v309 = STACK[0x3AC0];
  v310 = STACK[0x3AB0];
  if ((STACK[0x3AC8] & 2) != 0)
    v311 = STACK[0x3AB0];
  else
    v311 = STACK[0x3AC0];
  LODWORD(STACK[0x3BC8]) = v311;
  if (v308)
    v312 = v310;
  else
    v312 = v309;
  LODWORD(STACK[0x3BC0]) = v312;
  v313 = STACK[0x3A60];
  v314 = STACK[0x34E0];
  if (v308)
    v315 = STACK[0x34E0];
  else
    v315 = STACK[0x3A60];
  LODWORD(STACK[0x3BD8]) = v315;
  if (v308)
    v316 = v313;
  else
    v316 = v314;
  LODWORD(STACK[0x3BA0]) = v316;
  if (v308)
    v317 = v275;
  else
    v317 = v273;
  LODWORD(STACK[0x3BF8]) = v317;
  if (v308)
    v275 = v273;
  LODWORD(STACK[0x3BF0]) = v275;
  v318 = STACK[0x3C20];
  v319 = STACK[0x3BE0];
  if (v308)
    v320 = STACK[0x3C20];
  else
    v320 = STACK[0x3BE0];
  LODWORD(STACK[0x3B68]) = v320;
  if (v308)
    v321 = v319;
  else
    v321 = v318;
  LODWORD(STACK[0x3B78]) = v321;
  v322 = STACK[0x3AA8];
  v323 = STACK[0x3B08];
  if (v308)
    v324 = STACK[0x3B08];
  else
    v324 = STACK[0x3AA8];
  LODWORD(STACK[0x3B88]) = v324;
  if (v308)
    v325 = v322;
  else
    v325 = v323;
  LODWORD(STACK[0x3AD0]) = v325;
  if (v308)
    v326 = v293;
  else
    v326 = v291;
  LODWORD(STACK[0x3B08]) = v326;
  if (v308)
    v327 = v291;
  else
    v327 = v293;
  LODWORD(STACK[0x3BE8]) = v327;
  if (v308)
    v328 = v271;
  else
    v328 = v270;
  LODWORD(STACK[0x3B60]) = v328;
  if (v308)
    v329 = v270;
  else
    v329 = v271;
  LODWORD(STACK[0x3B58]) = v329;
  if (v308)
    v330 = v267;
  else
    v330 = v272;
  LODWORD(STACK[0x3AE8]) = v330;
  if (v308)
    v331 = v272;
  else
    v331 = v267;
  LODWORD(STACK[0x3B50]) = v331;
  if (v308)
    v332 = v276;
  else
    v332 = v274;
  LODWORD(STACK[0x3AC8]) = v332;
  if (v308)
    v333 = v274;
  else
    v333 = v276;
  LODWORD(STACK[0x3AE0]) = v333;
  v334 = STACK[0x3B40];
  v335 = STACK[0x3B80];
  if (v308)
    v336 = STACK[0x3B40];
  else
    v336 = STACK[0x3B80];
  LODWORD(STACK[0x3AF8]) = v336;
  if (v308)
    v337 = v335;
  else
    v337 = v334;
  LODWORD(STACK[0x3BB8]) = v337;
  v338 = STACK[0x3C00];
  v339 = STACK[0x3BD0];
  if (v308)
    v340 = STACK[0x3BD0];
  else
    v340 = STACK[0x3C00];
  LODWORD(STACK[0x3B98]) = v340;
  if (v308)
    v341 = v338;
  else
    v341 = v339;
  LODWORD(STACK[0x3BB0]) = v341;
  if (v308)
    v342 = v283;
  else
    v342 = v281;
  LODWORD(STACK[0x3BE0]) = v342;
  if (v308)
    v343 = v281;
  else
    v343 = v283;
  LODWORD(STACK[0x3B70]) = v343;
  if (v308)
    v344 = v304;
  else
    v344 = v305;
  LODWORD(STACK[0x3A60]) = v344;
  if (v308)
    v345 = v305;
  else
    v345 = v304;
  LODWORD(STACK[0x3AA8]) = v345;
  v346 = STACK[0x3B90];
  v347 = STACK[0x34E8];
  if (v308)
    v348 = STACK[0x3B90];
  else
    v348 = STACK[0x34E8];
  LODWORD(STACK[0x3AC0]) = v348;
  if (v308)
    v349 = v347;
  else
    v349 = v346;
  LODWORD(STACK[0x3B80]) = v349;
  if (v308)
    v350 = v295;
  else
    v350 = v297;
  LODWORD(STACK[0x3C00]) = v350;
  if (v308)
    v351 = v297;
  else
    v351 = v295;
  LODWORD(STACK[0x3B90]) = v351;
  v352 = STACK[0x3B48];
  v353 = STACK[0x3AF0];
  if (v308)
    v354 = STACK[0x3B48];
  else
    v354 = STACK[0x3AF0];
  LODWORD(STACK[0x3C08]) = v354;
  if (v308)
    v355 = v353;
  else
    v355 = v352;
  LODWORD(STACK[0x3AF0]) = v355;
  if (v308)
    v356 = v302;
  else
    v356 = v300;
  LODWORD(STACK[0x3B00]) = v356;
  if (v308)
    v357 = v300;
  else
    v357 = v302;
  LODWORD(STACK[0x3BA8]) = v357;
  if (v308)
    v358 = v298;
  else
    v358 = v296;
  LODWORD(STACK[0x3BD0]) = v358;
  if (v308)
    v359 = v296;
  else
    v359 = v298;
  LODWORD(STACK[0x3C20]) = v359;
  if (v308)
    v360 = v306;
  else
    v360 = v307;
  LODWORD(STACK[0x3AB0]) = v360;
  if (v308)
    v361 = v307;
  else
    v361 = v306;
  LODWORD(STACK[0x3AB8]) = v361;
  v362 = STACK[0x3B38];
  v363 = STACK[0x3B10];
  if (v308)
    v364 = STACK[0x3B38];
  else
    v364 = STACK[0x3B10];
  LODWORD(STACK[0x3B48]) = v364;
  if (v308)
    v365 = v363;
  else
    v365 = v362;
  LODWORD(STACK[0x3B10]) = v365;
  v366 = STACK[0x3B30];
  v367 = STACK[0x34D8];
  if (v308)
    v368 = STACK[0x3B30];
  else
    v368 = STACK[0x34D8];
  LODWORD(STACK[0x3AD8]) = v368;
  if (v308)
    v369 = v367;
  else
    v369 = v366;
  LODWORD(STACK[0x3B40]) = v369;
  v370 = STACK[0x3680];
  v371 = STACK[0x3670];
  if (v308)
    v372 = STACK[0x3670];
  else
    v372 = STACK[0x3680];
  LODWORD(STACK[0x3B30]) = v372;
  if (v308)
    v373 = v370;
  else
    v373 = v371;
  LODWORD(STACK[0x3B38]) = v373;
  v374 = STACK[0x39A8] & 0x9C6374 ^ 0xCE31BA;
  v375 = STACK[0x3B20];
  v376 = STACK[0x3C50];
  v377 = STACK[0x3C40];
  v378 = STACK[0x3C60];
  v379 = STACK[0x3B28];
  v380 = STACK[0x3C68];
  v381 = STACK[0x3A28];
  v382 = __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(STACK[0x3A28])), 16);
  v383 = *((_DWORD *)&STACK[0x40D0] + STACK[0x3A28]);
  v384 = STACK[0x3858];
  v385 = LODWORD(STACK[0x3800]) ^ LODWORD(STACK[0x3858]);
  LODWORD(STACK[0x3800]) = v385;
  v386 = (((v376 & v374) << v377) | ((v162 & v374) >> v181)) ^ (((unint64_t)((v375 & 0x499C6374 ^ 0xA4CE31BA) & ~v134) << v378)
                                                                            + (((v375 & 0x499C6374 ^ 0xA4CE31BA) & v379) >> v380)) ^ v382 ^ v383 ^ v385 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v381 >> 22) & 0x3FC)), 8);
  v387 = __ROR4__(*((_DWORD *)&STACK[0x40D0]+ (((*(_BYTE *)(STACK[0x3C18] + LODWORD(STACK[0x37E8])) - 87) ^ 0xFB) + 85)), 24);
  LODWORD(v381) = STACK[0x3B18];
  v388 = v375;
  v389 = ((v376 & (v375 & 0x4208FA92 ^ 0xA1047D49)) << v377) | (((v375 & 0x4208FA92 ^ 0xA1047D49) & v379) >> v181);
  v390 = STACK[0x3C10];
  v391 = STACK[0x3A30];
  v392 = LODWORD(STACK[0x3A30]) ^ LODWORD(STACK[0x3C10]);
  v393 = STACK[0x3C48];
  v394 = v392 ^ LODWORD(STACK[0x3C48]) ^ v386 ^ v387;
  v395 = v386 ^ v387;
  LODWORD(STACK[0x39A8]) = v386 ^ v387;
  v396 = STACK[0x3810];
  v397 = v394 ^ LODWORD(STACK[0x3810]);
  LODWORD(STACK[0x34E8]) = v394;
  v398 = v389 ^ ((((v381 & 0xDC08FA92 ^ 0xEE047D49) & ~v134) << v378) | ((v162 & (v381 & 0xDC08FA92 ^ 0xEE047D49)) >> v380)) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v397)), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v397 >> 22) & 0x3FC)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE1(v397)), 24) ^ *((_DWORD *)&STACK[0x40D0] + (v394 ^ v396));
  v399 = v381;
  v400 = v391 ^ LODWORD(STACK[0x3A38]) ^ v391 ^ v390 ^ v393 ^ v386 ^ v387;
  LODWORD(STACK[0x3810]) = v400;
  v401 = v398 ^ v391 ^ v400;
  v402 = v397 ^ v393 ^ v401;
  v403 = STACK[0x3A80];
  v404 = v402 ^ LODWORD(STACK[0x3A80]);
  v405 = (((v388 & 0xF51BABE ^ 0x87A8DD5F) & ~v134) << v377) ^ (((v388 & 0xF51BABE ^ 0x87A8DD5F) & v379) >> v181) ^ ((v162 & (v381 & 0x2351BABE ^ 0x11A8DD5F)) >> v380) ^ ((v376 & (v381 & 0x2351BABE ^ 0x11A8DD5F)) << v378) ^ *((_DWORD *)&STACK[0x40D0] + (v402 ^ LODWORD(STACK[0x3A80]))) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v404 >> 22) & 0x3FC)), 8);
  LODWORD(v381) = *((_DWORD *)&STACK[0x40D0] + BYTE1(v404));
  LODWORD(STACK[0x34D0]) = v398 ^ v395;
  v406 = v405 ^ v398 ^ v395 ^ __ROR4__(v381, 24) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v404)), 16);
  LODWORD(STACK[0x34E0]) = v406;
  v407 = v401 ^ v403;
  LODWORD(STACK[0x34C8]) = v407;
  v408 = v406 ^ v398 ^ v391;
  LODWORD(STACK[0x34D8]) = v408;
  v409 = v408 ^ v407;
  v410 = v409 ^ v402;
  LODWORD(STACK[0x3A90]) ^= v409;
  v411 = v376;
  LOBYTE(v393) = v377;
  LODWORD(STACK[0x34C0]) = (((v376 & (v399 & 0xC7B61512 ^ 0x63DB0A89)) << v377) | ((v162 & (v399 & 0xC7B61512 ^ 0x63DB0A89)) >> v380)) ^ (((unint64_t)((v388 & 0x13B61512 ^ 0x9DB0A89) & ~v134) << v378) | (((v388 & 0x13B61512 ^ 0x9DB0A89) & v379) >> v181)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x40D0] + ((v410 >> 22) & 0x3FC)), 8) ^ *((_DWORD *)&STACK[0x40D0] + (v409 ^ v402)) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE1(v410)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x40D0] + BYTE2(v410)), 16);
  v412 = STACK[0x3720] << v377;
  LODWORD(STACK[0x3670]) = v412;
  v413 = STACK[0x3748];
  v414 = LODWORD(STACK[0x39D0]) ^ (v412 | STACK[0x3748]);
  v415 = STACK[0x3750] << v378;
  v416 = STACK[0x3758];
  v417 = (STACK[0x36A8] << v377) | LODWORD(STACK[0x3758]);
  STACK[0x3680] = v415;
  LODWORD(v415) = LODWORD(STACK[0x3980]) ^ (v415 + v416);
  v418 = (STACK[0x3790] << v378) | v413;
  LODWORD(v413) = STACK[0x3738] ^ ((v162 & STACK[0x3A20]) >> v181);
  LODWORD(v376) = LODWORD(STACK[0x36A0]) | ((STACK[0x3A10] & v379) >> v380);
  v419 = (STACK[0x3690] << v377) ^ LODWORD(STACK[0x35D0]);
  v420 = (STACK[0x3698] << v378) ^ STACK[0x35E0];
  v421 = STACK[0x3728] & ~v134;
  v422 = STACK[0x3580] & ~v134;
  v423 = (STACK[0x3510] & ~v134) << v378;
  LODWORD(STACK[0x35E0]) = v423 + (STACK[0x3508] >> v181);
  LODWORD(STACK[0x3980]) = v423 + (STACK[0x3518] >> v181);
  LODWORD(STACK[0x3A20]) = v414 ^ LODWORD(STACK[0x3538]);
  LODWORD(STACK[0x3A10]) = v415 ^ LODWORD(STACK[0x3540]);
  v424 = STACK[0x3A98];
  v425 = STACK[0x39D8];
  LODWORD(STACK[0x39D0]) = STACK[0x39C0] ^ v418 ^ (STACK[0x3A98] + LODWORD(STACK[0x39D8]));
  LODWORD(STACK[0x3790]) = v403 ^ LODWORD(STACK[0x3500]) ^ LODWORD(STACK[0x39B0]);
  v426 = v413 ^ LODWORD(STACK[0x39A0]);
  v427 = LODWORD(STACK[0x39C8]) ^ v390 ^ v417;
  LODWORD(STACK[0x39C8]) = LODWORD(STACK[0x34F8]) ^ LODWORD(STACK[0x34F0]) ^ LODWORD(STACK[0x3960]);
  LODWORD(STACK[0x36A8]) = v421 << v393;
  v428 = STACK[0x39E8];
  LODWORD(STACK[0x39C0]) = (STACK[0x39E8] + LODWORD(STACK[0x3AA0])) ^ ((v421 << v393) | STACK[0x3868]) ^ LODWORD(STACK[0x3950]);
  v429 = STACK[0x3740] >> v181;
  STACK[0x36A0] = v429;
  LODWORD(v429) = STACK[0x37D0] ^ v429 ^ v403 ^ LODWORD(STACK[0x3938]);
  v430 = STACK[0x3760] >> v380;
  LODWORD(STACK[0x3698]) = v430;
  v431 = (LODWORD(STACK[0x37C8]) | v430) ^ LODWORD(STACK[0x3958]);
  v432 = STACK[0x3978];
  v433 = STACK[0x3A48];
  LODWORD(STACK[0x39A0]) = (STACK[0x3978] | STACK[0x3A48]) ^ v426;
  LODWORD(STACK[0x39B0]) = (v432 | v433) ^ v431;
  v434 = (unint64_t)(v411 & STACK[0x37E0]) << v378;
  STACK[0x3690] = v434;
  v435 = STACK[0x39F0];
  LODWORD(STACK[0x3968]) = v434 ^ LODWORD(STACK[0x3860]) ^ STACK[0x3968] ^ (v433 + LODWORD(STACK[0x39F0]));
  LODWORD(v434) = v376 ^ STACK[0x39B8];
  v436 = STACK[0x35B0];
  LODWORD(STACK[0x39B8]) = v429 ^ LODWORD(STACK[0x35B0]);
  LODWORD(STACK[0x3958]) = v436 ^ v434;
  LODWORD(v434) = STACK[0x3688] >> v380;
  LODWORD(STACK[0x3728]) = v434;
  LODWORD(v434) = v403 ^ (LODWORD(STACK[0x3878]) + v434);
  v437 = STACK[0x3A50];
  LODWORD(v429) = STACK[0x3A88] | LODWORD(STACK[0x3A50]);
  LODWORD(STACK[0x3938]) = v427 ^ v429;
  LODWORD(STACK[0x3960]) = v434 ^ v429 ^ LODWORD(STACK[0x3948]);
  v438 = STACK[0x3678] >> v181;
  STACK[0x3720] = v438;
  LODWORD(STACK[0x3950]) = (v424 | v425) ^ (STACK[0x3870] | v438) ^ LODWORD(STACK[0x3918]);
  LODWORD(STACK[0x3948]) = v419 ^ LODWORD(STACK[0x3520]) ^ LODWORD(STACK[0x3900]);
  LODWORD(STACK[0x3940]) = LODWORD(STACK[0x3530]) ^ v420 ^ STACK[0x3940];
  v439 = STACK[0x3600] >> v181;
  LODWORD(v438) = v433 | LODWORD(STACK[0x39E0]);
  STACK[0x3740] = v422;
  STACK[0x3688] = v439;
  STACK[0x3678] = v422 << v378;
  LODWORD(STACK[0x3A48]) = v403 ^ ((v422 << v378) + v439) ^ v438 ^ LODWORD(STACK[0x3928]);
  LODWORD(STACK[0x3930]) ^= v403 ^ ((STACK[0x3620] << v378) + LODWORD(STACK[0x3880])) ^ LODWORD(STACK[0x3558]);
  LODWORD(STACK[0x3A00]) ^= ((STACK[0x3628] << v393) + STACK[0x3888]) ^ STACK[0x3920];
  LODWORD(v413) = STACK[0x35F8] << v393;
  LODWORD(v422) = STACK[0x3988];
  v440 = v403;
  v441 = STACK[0x39F8];
  v442 = STACK[0x3618] << v378;
  v443 = STACK[0x3A58];
  LODWORD(v439) = STACK[0x3A58] | v435;
  LODWORD(v433) = v435;
  v444 = STACK[0x3A70];
  LODWORD(STACK[0x3928]) = v403 ^ (v413 + LODWORD(STACK[0x3988])) ^ (v428 + LODWORD(STACK[0x39F8])) ^ LODWORD(STACK[0x3908]) ^ v384;
  LODWORD(STACK[0x3920]) = v442 ^ v444 ^ v439 ^ v384;
  v445 = v411 & STACK[0x3668];
  LODWORD(v439) = STACK[0x3658] >> v380;
  STACK[0x3738] = v445;
  LODWORD(v445) = (_DWORD)v445 << v393;
  LODWORD(STACK[0x3668]) = v439;
  LODWORD(STACK[0x3658]) = v445;
  LODWORD(STACK[0x3910]) ^= v445 ^ v439 ^ LODWORD(STACK[0x3568]);
  LODWORD(v445) = LODWORD(STACK[0x3608]) + v444;
  v446 = v444;
  LODWORD(STACK[0x3748]) = v445;
  LODWORD(v444) = v443;
  LODWORD(STACK[0x3918]) = v424 ^ v445 ^ v443 ^ LODWORD(STACK[0x38F0]);
  LODWORD(v445) = STACK[0x3990] ^ v422;
  LODWORD(v424) = v441;
  LODWORD(STACK[0x37E8]) = v445;
  LODWORD(STACK[0x3908]) = (v437 + v441) ^ v445 ^ STACK[0x38F8];
  v447 = STACK[0x35D8] >> v181;
  STACK[0x37D0] = v447;
  LODWORD(STACK[0x3900]) = LODWORD(STACK[0x3528]) ^ (STACK[0x38B8] | v447) ^ LODWORD(STACK[0x3800]);
  v448 = v398 ^ v392;
  LODWORD(v447) = STACK[0x35C8] >> v380;
  LODWORD(STACK[0x37C8]) = v447;
  LODWORD(v443) = STACK[0x3560];
  LODWORD(STACK[0x38F8]) = v403 ^ (LODWORD(STACK[0x38B0]) | v447) ^ LODWORD(STACK[0x3560]) ^ v392;
  v449 = STACK[0x35F0] >> v181;
  STACK[0x3760] = v449;
  v450 = LODWORD(STACK[0x3A40]) ^ v449 ^ STACK[0x3898] ^ (LODWORD(STACK[0x3970]) + v433) ^ LODWORD(STACK[0x3A38]) ^ LODWORD(STACK[0x3A30]);
  LODWORD(v449) = STACK[0x3610] >> v380;
  LODWORD(STACK[0x3758]) = v449;
  v451 = LODWORD(STACK[0x3890]) ^ v449 ^ v428 ^ STACK[0x3A08] ^ STACK[0x3A28];
  STACK[0x3C38] = v181;
  v452 = STACK[0x3590] >> v181;
  STACK[0x37E0] = v452;
  v453 = STACK[0x35C0];
  LODWORD(STACK[0x3A40]) = LODWORD(STACK[0x37D8]) ^ (STACK[0x35C0] + v452) ^ LODWORD(STACK[0x39A8]);
  v454 = STACK[0x35A0];
  LODWORD(STACK[0x3A38]) = LODWORD(STACK[0x35A0]) ^ LODWORD(STACK[0x38A0]) ^ (v432 + v444) ^ v397;
  LODWORD(v452) = STACK[0x35A8] >> v380;
  LODWORD(STACK[0x37D8]) = v452;
  v455 = v403 ^ (v454 + v452) ^ LODWORD(STACK[0x37A0]) ^ LODWORD(STACK[0x34E8]);
  LODWORD(STACK[0x3A30]) = LODWORD(STACK[0x3550]) ^ (v453 + STACK[0x38D0]) ^ LODWORD(STACK[0x3810]);
  LODWORD(v433) = STACK[0x3548];
  v456 = LODWORD(STACK[0x3790]) ^ LODWORD(STACK[0x3548]);
  LODWORD(v439) = STACK[0x3998];
  v457 = STACK[0x38E0];
  LODWORD(STACK[0x3750]) = STACK[0x38E0] + LODWORD(STACK[0x3998]);
  LODWORD(STACK[0x3A28]) = v433 ^ (v457 + v439) ^ LODWORD(STACK[0x34D0]);
  STACK[0x3790] = v442;
  v458 = LODWORD(STACK[0x3578]) ^ (v442 + LODWORD(STACK[0x3598])) ^ LODWORD(STACK[0x34C8]);
  LODWORD(STACK[0x37A0]) = v413;
  v459 = v443 ^ (v413 | STACK[0x3588]) ^ v404;
  LODWORD(v404) = STACK[0x3A98] + v444;
  v460 = STACK[0x3630] << v378;
  STACK[0x3810] = v460;
  LODWORD(STACK[0x3A58]) = v440 ^ (v460 + v422) ^ v404 ^ LODWORD(STACK[0x34D8]);
  LODWORD(v460) = STACK[0x3638] << v393;
  LODWORD(STACK[0x3800]) = v460;
  LODWORD(v439) = v457 ^ v439 ^ (LODWORD(STACK[0x39E0]) + LODWORD(STACK[0x39D8]));
  v461 = v460 ^ v446 ^ v424 ^ LODWORD(STACK[0x3A50]) ^ LODWORD(STACK[0x34E0]);
  LODWORD(v378) = LODWORD(STACK[0x35E8]) ^ LODWORD(STACK[0x35E0]) ^ LODWORD(STACK[0x34E0]);
  LODWORD(v460) = LODWORD(STACK[0x38A8]) + STACK[0x3A78];
  LODWORD(STACK[0x3A50]) = LODWORD(STACK[0x35B8]) ^ v460 ^ v448;
  v462 = LODWORD(STACK[0x34C0]) ^ v448;
  v463 = v378 ^ LODWORD(STACK[0x34C0]);
  LODWORD(v457) = STACK[0x3A18] ^ v460 ^ STACK[0x3A88];
  v464 = (STACK[0x3C50] & STACK[0x3660]) << v393;
  LODWORD(v460) = v440 ^ (v464 | (STACK[0x3650] >> v380)) ^ (STACK[0x3A18] | LODWORD(STACK[0x3AA0]));
  LODWORD(v413) = STACK[0x3A90];
  LODWORD(STACK[0x3A88]) = v439 ^ LODWORD(STACK[0x3A90]);
  v465 = v413 ^ LODWORD(STACK[0x3C48]) ^ v462;
  LODWORD(STACK[0x3AA0]) = v460 ^ v462;
  v466 = v457 ^ v410;
  LODWORD(v424) = LODWORD(STACK[0x3C10]) ^ (STACK[0x36B0] >> v380) ^ v464 ^ v440 ^ LODWORD(STACK[0x3648]) ^ v410;
  LODWORD(STACK[0x3A18]) = v465 ^ v440 ^ LODWORD(STACK[0x3980]) ^ LODWORD(STACK[0x3640]);
  LODWORD(STACK[0x3A08]) = v424 ^ v465;
  v467 = STACK[0x3920];
  v468 = LODWORD(STACK[0x3570]) ^ (v461 - LODWORD(STACK[0x3920]));
  LODWORD(STACK[0x3A98]) = v463 + v468;
  v469 = ((v463 + v468) & 1) == 0;
  v470 = STACK[0x3A10];
  v471 = STACK[0x3938];
  if (((v463 + v468) & 1) != 0)
    v472 = STACK[0x3938];
  else
    v472 = STACK[0x3A10];
  LODWORD(STACK[0x3A90]) = v472;
  if (((v463 + v468) & 1) != 0)
    v473 = STACK[0x39D0];
  else
    v473 = v471;
  v474 = STACK[0x3A20];
  if (((v463 + v468) & 1) != 0)
    v475 = v470;
  else
    v475 = STACK[0x3A20];
  if (((v463 + v468) & 1) == 0)
    v474 = STACK[0x39D0];
  LODWORD(STACK[0x3A20]) = v474;
  if (((v463 + v468) & 1) != 0)
    v476 = STACK[0x3958];
  else
    v476 = STACK[0x39A0];
  if (((v463 + v468) & 1) != 0)
    v477 = STACK[0x39A0];
  else
    v477 = v456;
  if (((v463 + v468) & 1) != 0)
  {
    v478 = STACK[0x39C8];
  }
  else
  {
    v456 = STACK[0x39C8];
    v478 = STACK[0x3958];
  }
  v479 = STACK[0x39B0];
  v480 = STACK[0x3968];
  if (((v463 + v468) & 1) != 0)
    v481 = STACK[0x39B0];
  else
    v481 = STACK[0x3968];
  LODWORD(STACK[0x39E0]) = v481;
  v482 = STACK[0x39C0];
  if (((v463 + v468) & 1) == 0)
    v480 = STACK[0x39C0];
  LODWORD(STACK[0x39E8]) = v480;
  if (((v463 + v468) & 1) != 0)
    v483 = v482;
  else
    v483 = STACK[0x39B8];
  if (v469)
    v484 = v479;
  else
    v484 = STACK[0x39B8];
  v485 = STACK[0x3960];
  v486 = STACK[0x3948];
  if (v469)
    v487 = STACK[0x3960];
  else
    v487 = STACK[0x3948];
  LODWORD(STACK[0x39F8]) = v487;
  v488 = STACK[0x3940];
  if (!v469)
    v486 = STACK[0x3940];
  LODWORD(STACK[0x39F0]) = v486;
  if (v469)
    v489 = v488;
  else
    v489 = STACK[0x3950];
  if (v469)
    v490 = STACK[0x3950];
  else
    v490 = v485;
  v491 = STACK[0x3A00];
  v492 = STACK[0x3910];
  if (v469)
    v493 = STACK[0x3A00];
  else
    v493 = STACK[0x3910];
  LODWORD(STACK[0x39C0]) = v493;
  v494 = STACK[0x3930];
  if (v469)
    v491 = STACK[0x3930];
  LODWORD(STACK[0x3960]) = v491;
  v495 = STACK[0x3A48];
  if (!v469)
    v492 = STACK[0x3A48];
  LODWORD(STACK[0x3958]) = v492;
  if (v469)
    v496 = v495;
  else
    v496 = v494;
  v497 = STACK[0x3928];
  if (v469)
    v498 = v467;
  else
    v498 = STACK[0x3928];
  LODWORD(STACK[0x3980]) = v498;
  if (v469)
    v499 = v497;
  else
    v499 = STACK[0x3918];
  if (v469)
    v500 = STACK[0x3908];
  else
    v500 = v467;
  if (v469)
    v501 = STACK[0x3918];
  else
    v501 = STACK[0x3908];
  if (v469)
    v502 = v450;
  else
    v502 = v451;
  LODWORD(STACK[0x3A48]) = v502;
  v503 = STACK[0x38F8];
  if (v469)
    v504 = STACK[0x38F8];
  else
    v504 = v450;
  v505 = STACK[0x3900];
  if (v469)
    v503 = STACK[0x3900];
  LODWORD(STACK[0x3968]) = v503;
  if (v469)
    v506 = v451;
  else
    v506 = v505;
  v507 = STACK[0x3A40];
  v508 = STACK[0x3A38];
  if (v469)
    v509 = STACK[0x3A38];
  else
    v509 = STACK[0x3A40];
  LODWORD(STACK[0x39A0]) = v509;
  if (v469)
    v510 = v507;
  else
    v510 = v455;
  if (v469)
    v508 = STACK[0x3A30];
  else
    v455 = STACK[0x3A30];
  v511 = STACK[0x3A28];
  v512 = STACK[0x3A50];
  if (v469)
    v513 = STACK[0x3A28];
  else
    v513 = STACK[0x3A50];
  LODWORD(STACK[0x3A40]) = v513;
  if (v469)
    v514 = v512;
  else
    v514 = v458;
  LODWORD(STACK[0x3950]) = v514;
  if (!v469)
    v458 = v459;
  LODWORD(STACK[0x3A10]) = v458;
  if (!v469)
    v459 = v511;
  v515 = STACK[0x3A58];
  v516 = STACK[0x3A88];
  if (v469)
    v517 = STACK[0x3A58];
  else
    v517 = STACK[0x3A88];
  LODWORD(STACK[0x3A50]) = v517;
  if (!v469)
  {
    v516 = v466;
    v466 = v461;
  }
  LODWORD(STACK[0x3A28]) = v466;
  if (v469)
  {
    v518 = v463;
  }
  else
  {
    v461 = v515;
    v518 = STACK[0x3AA0];
  }
  if (v469)
    v519 = STACK[0x3AA0];
  else
    v519 = STACK[0x3A18];
  if (v469)
    v520 = STACK[0x3A18];
  else
    v520 = STACK[0x3A08];
  if (v469)
    v463 = STACK[0x3A08];
  v521 = (STACK[0x3A98] & 2) == 0;
  if ((STACK[0x3A98] & 2) != 0)
    v522 = v475;
  else
    v522 = v473;
  LODWORD(STACK[0x39B8]) = v522;
  if (v521)
    v473 = v475;
  LODWORD(STACK[0x3A00]) = v473;
  if (v521)
    v523 = v476;
  else
    v523 = v456;
  LODWORD(STACK[0x39D0]) = v523;
  if (!v521)
    v456 = v476;
  LODWORD(STACK[0x3928]) = v456;
  if (v521)
    v524 = v477;
  else
    v524 = v478;
  LODWORD(STACK[0x3940]) = v524;
  if (!v521)
    v478 = v477;
  LODWORD(STACK[0x3A08]) = v478;
  v525 = STACK[0x3A90];
  v526 = STACK[0x3A20];
  if (v521)
    v527 = STACK[0x3A20];
  else
    v527 = STACK[0x3A90];
  LODWORD(STACK[0x39A8]) = v527;
  if (v521)
    v528 = v525;
  else
    v528 = v526;
  LODWORD(STACK[0x38F8]) = v528;
  v529 = STACK[0x39E0];
  if (v521)
    v530 = v483;
  else
    v530 = STACK[0x39E0];
  LODWORD(STACK[0x38F0]) = v530;
  if (v521)
    v531 = v529;
  else
    v531 = v483;
  LODWORD(STACK[0x3938]) = v531;
  v532 = STACK[0x39E8];
  if (v521)
    v533 = v484;
  else
    v533 = STACK[0x39E8];
  LODWORD(STACK[0x39B0]) = v533;
  if (v521)
    v534 = v532;
  else
    v534 = v484;
  LODWORD(STACK[0x39D8]) = v534;
  v535 = STACK[0x39F8];
  if (v521)
    v536 = STACK[0x39F8];
  else
    v536 = v489;
  LODWORD(STACK[0x3920]) = v536;
  if (v521)
    v537 = v489;
  else
    v537 = v535;
  LODWORD(STACK[0x39C8]) = v537;
  v538 = STACK[0x39F0];
  if (v521)
    v539 = STACK[0x39F0];
  else
    v539 = v490;
  LODWORD(STACK[0x39E0]) = v539;
  if (v521)
    v540 = v490;
  else
    v540 = v538;
  LODWORD(STACK[0x39E8]) = v540;
  v541 = STACK[0x39C0];
  if (v521)
    v542 = v496;
  else
    v542 = STACK[0x39C0];
  LODWORD(STACK[0x3910]) = v542;
  if (v521)
    v543 = v541;
  else
    v543 = v496;
  LODWORD(STACK[0x39C0]) = v543;
  v544 = STACK[0x3960];
  v545 = STACK[0x3958];
  if (v521)
    v546 = STACK[0x3960];
  else
    v546 = STACK[0x3958];
  LODWORD(STACK[0x3918]) = v546;
  if (v521)
    v547 = v545;
  else
    v547 = v544;
  LODWORD(STACK[0x39F0]) = v547;
  if (v521)
    v548 = v499;
  else
    v548 = v500;
  if (v521)
    v549 = v500;
  else
    v549 = v499;
  LODWORD(STACK[0x3930]) = v549;
  v550 = STACK[0x3980];
  if (v521)
    v551 = v501;
  else
    v551 = STACK[0x3980];
  LODWORD(STACK[0x3908]) = v551;
  if (v521)
    v552 = v550;
  else
    v552 = v501;
  LODWORD(STACK[0x3900]) = v552;
  v553 = STACK[0x3C70];
  if (v521)
    v554 = v504;
  else
    v554 = v506;
  LODWORD(STACK[0x39F8]) = v554;
  if (v521)
    v555 = v506;
  else
    v555 = v504;
  LODWORD(STACK[0x3AA0]) = v555;
  v556 = STACK[0x3808];
  if (v521)
    v557 = v508;
  else
    v557 = v510;
  LODWORD(STACK[0x3A30]) = v557;
  if (v521)
    v558 = v510;
  else
    v558 = v508;
  v559 = STACK[0x3A48];
  v560 = STACK[0x3968];
  if (v521)
    v561 = STACK[0x3A48];
  else
    v561 = STACK[0x3968];
  LODWORD(STACK[0x3A58]) = v561;
  if (v521)
    v562 = v560;
  else
    v562 = v559;
  if (v521)
    v563 = STACK[0x39A0];
  else
    v563 = v455;
  if (v521)
    v564 = v455;
  else
    v564 = STACK[0x39A0];
  LODWORD(STACK[0x3A20]) = v564;
  if (v521)
    v565 = v520;
  else
    v565 = v518;
  LODWORD(STACK[0x3A48]) = v565;
  if (v521)
    v566 = v518;
  else
    v566 = v520;
  LODWORD(STACK[0x3A38]) = v566;
  v567 = STACK[0x3950];
  if (v521)
    v568 = STACK[0x3950];
  else
    v568 = v459;
  LODWORD(STACK[0x3A90]) = v568;
  if (v521)
    v569 = v459;
  else
    v569 = v567;
  LODWORD(STACK[0x3A18]) = v569;
  if (v521)
    v570 = v461;
  else
    v570 = v516;
  LODWORD(STACK[0x3A88]) = v570;
  if (v521)
    v571 = v516;
  else
    v571 = v461;
  if (v521)
    v572 = STACK[0x3A40];
  else
    v572 = STACK[0x3A10];
  if (v521)
    v573 = STACK[0x3A10];
  else
    v573 = STACK[0x3A40];
  if (v521)
    v574 = v519;
  else
    v574 = v463;
  LODWORD(STACK[0x3A40]) = v574;
  if (!v521)
    v463 = v519;
  v575 = STACK[0x3A50];
  if (v521)
    v576 = STACK[0x3A28];
  else
    v576 = STACK[0x3A50];
  if (!v521)
    v575 = STACK[0x3A28];
  LODWORD(STACK[0x3A10]) = v575;
  v577 = STACK[0x3AE8];
  v578 = STACK[0x3B08];
  v579 = STACK[0x3AC0];
  v580 = STACK[0x3B90];
  v581 = STACK[0x3AF0];
  v582 = STACK[0x3AD8];
  v583 = STACK[0x3B00];
  v584 = STACK[0x3A60];
  v585 = LODWORD(STACK[0x3BE8]) ^ LODWORD(STACK[0x3B38]) ^ LODWORD(STACK[0x3BC0]) ^ LODWORD(STACK[0x3B68]) ^ LODWORD(STACK[0x3BC8]) ^ LODWORD(STACK[0x3B78]) ^ LODWORD(STACK[0x3BA0]) ^ LODWORD(STACK[0x3AD0]) ^ LODWORD(STACK[0x3BD8]) ^ LODWORD(STACK[0x3B88]) ^ LODWORD(STACK[0x3B58]) ^ LODWORD(STACK[0x3B50]) ^ LODWORD(STACK[0x3B60]) ^ LODWORD(STACK[0x3AE8]) ^ LODWORD(STACK[0x3BF8]) ^ LODWORD(STACK[0x3AC8]) ^ LODWORD(STACK[0x3BF0]) ^ LODWORD(STACK[0x3AE0]) ^ LODWORD(STACK[0x3B08]) ^ LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3BB8]) ^ LODWORD(STACK[0x3BB0]) ^ LODWORD(STACK[0x3AF8]) ^ LODWORD(STACK[0x3B98]) ^ LODWORD(STACK[0x3AC0]) ^ LODWORD(STACK[0x3B70]) ^ LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x3BE0]) ^ LODWORD(STACK[0x3C20]) ^ LODWORD(STACK[0x3B90]) ^ LODWORD(STACK[0x3BD0]) ^ LODWORD(STACK[0x3AF0]) ^ LODWORD(STACK[0x3B48]) ^ LODWORD(STACK[0x3C00]) ^ LODWORD(STACK[0x3B10]) ^ LODWORD(STACK[0x3C08]) ^ LODWORD(STACK[0x3B40]) ^ LODWORD(STACK[0x3BA8]) ^ LODWORD(STACK[0x3AD8]) ^ LODWORD(STACK[0x3B00]) ^ LODWORD(STACK[0x3AA8]) ^ LODWORD(STACK[0x3AB0]) ^ LODWORD(STACK[0x3A60]) ^ LODWORD(STACK[0x3AB8]);
  v586 = LODWORD(STACK[0x3928])
       - LODWORD(STACK[0x3AF8])
       - (LODWORD(STACK[0x3AD0])
        + LODWORD(STACK[0x3AC8])
        + LODWORD(STACK[0x3B10])
        + LODWORD(STACK[0x3AE0]));
  LODWORD(STACK[0x3958]) = v573;
  v587 = v586 + v573 - LODWORD(STACK[0x38F8]);
  LODWORD(STACK[0x3858]) = v548;
  v588 = v583 ^ v582 ^ v581 ^ (v587 + v548 + 2060269820);
  LODWORD(STACK[0x3A50]) = v562;
  v589 = v562 ^ LODWORD(STACK[0x39F0]);
  LODWORD(STACK[0x3968]) = v558;
  v590 = v589 ^ v558 ^ LODWORD(STACK[0x39B0]);
  LODWORD(STACK[0x3950]) = v571;
  LODWORD(STACK[0x3660]) = v588;
  v591 = (v590 ^ v571 ^ v588) + LODWORD(STACK[0x39A8]);
  LODWORD(STACK[0x3A28]) = v563;
  v592 = LODWORD(STACK[0x39C0]) ^ v563 ^ v591;
  v593 = v577 - v579 + LODWORD(STACK[0x3A08]) - LODWORD(STACK[0x3938]);
  LODWORD(STACK[0x3960]) = v572;
  v594 = v572 + LODWORD(STACK[0x3908]);
  LODWORD(STACK[0x3980]) = v463;
  v595 = v593 + v594 + v463;
  LODWORD(STACK[0x3648]) = v595;
  v596 = (v592 + v595) ^ v578;
  v597 = v584 + LODWORD(STACK[0x3B78]) - LODWORD(STACK[0x3B50]);
  v598 = LODWORD(STACK[0x39C8]) + LODWORD(STACK[0x3AA0]);
  LODWORD(STACK[0x3640]) = v597;
  v599 = ((LODWORD(STACK[0x39D8]) ^ LODWORD(STACK[0x3C20]) ^ (v598 + v597 + v596)) + LODWORD(STACK[0x3B48])) ^ v580;
  v600 = LODWORD(STACK[0x3BC8]) + LODWORD(STACK[0x3B58]);
  LODWORD(STACK[0x3638]) = v600;
  v601 = LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3BD8]) ^ (v599 - v600);
  v602 = LODWORD(STACK[0x3900]) - (LODWORD(STACK[0x3BE8]) + LODWORD(STACK[0x3B38]));
  LODWORD(STACK[0x3630]) = v602;
  v603 = (v601 + v602) ^ LODWORD(STACK[0x3A90]);
  LODWORD(STACK[0x3948]) = v576;
  v604 = v576 + LODWORD(STACK[0x3BF8]);
  LODWORD(STACK[0x3628]) = v604;
  v605 = STACK[0x3A98];
  v606 = LODWORD(STACK[0x3BB8]) + LODWORD(STACK[0x3BA0]) + LODWORD(STACK[0x3A00]) + LODWORD(STACK[0x3940]);
  v607 = (LODWORD(STACK[0x3A88])
        + LODWORD(STACK[0x3C00])
        - LODWORD(STACK[0x3920])
        + (LODWORD(STACK[0x39B8]) ^ LODWORD(STACK[0x3AA8]) ^ (v603 + v604))) ^ LODWORD(STACK[0x39D0]);
  v608 = LODWORD(STACK[0x3A58])
       - LODWORD(STACK[0x3A98])
       - LODWORD(STACK[0x3BE0])
       + LODWORD(STACK[0x38F0])
       + LODWORD(STACK[0x3930])
       - LODWORD(STACK[0x3918]);
  LODWORD(STACK[0x3618]) = v608;
  v609 = (v607 + v608) ^ LODWORD(STACK[0x3A18]);
  v610 = v605 - (LODWORD(STACK[0x3BB0]) + LODWORD(STACK[0x3B60]));
  LODWORD(STACK[0x3610]) = v610;
  v611 = (v609 + v610) ^ LODWORD(STACK[0x39E0]);
  LODWORD(STACK[0x3620]) = v606;
  v612 = LODWORD(STACK[0x39E8]) ^ LODWORD(STACK[0x3B98]) ^ (v611 + v606);
  v613 = LODWORD(STACK[0x3AB8])
       - LODWORD(STACK[0x3A68])
       - LODWORD(STACK[0x3BC0])
       - LODWORD(STACK[0x3BA8])
       + LODWORD(STACK[0x39F8]);
  v614 = LODWORD(STACK[0x3A10]) + LODWORD(STACK[0x3A30]) + LODWORD(STACK[0x3A48]);
  LODWORD(STACK[0x3608]) = v613;
  v615 = (v614 + v613 + v612) ^ v605;
  v616 = STACK[0x3B68];
  v617 = LODWORD(STACK[0x3C08]) + LODWORD(STACK[0x3B70]) - LODWORD(STACK[0x3B68]) + v615;
  LODWORD(STACK[0x39A0]) = v585;
  v618 = LODWORD(STACK[0x3A40]) ^ LODWORD(STACK[0x3B88]) ^ ((v585 ^ LODWORD(STACK[0x3A38]) ^ 0x6B8D9D50 ^ v617)
                                                          + LODWORD(STACK[0x3AB0]));
  v619 = LODWORD(STACK[0x3BD0])
       + LODWORD(STACK[0x3B40])
       - LODWORD(STACK[0x3B80])
       + LODWORD(STACK[0x3910])
       - LODWORD(STACK[0x3A20]);
  LODWORD(STACK[0x3650]) = v619;
  LODWORD(STACK[0x36B0]) = v618 + v619;
  v620 = (uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v553 + 8 * SLODWORD(STACK[0x38C0])) - 8);
  LODWORD(STACK[0x3600]) = -v616;
  return v620(49, (v556 + 710566469) & 0xD5A59E7E);
}

uint64_t sub_1006F787C(int a1, char a2, int a3, char a4)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v10 = v8
      + (((*(_BYTE *)(v9 + v8) ^ a4) + 69) ^ ((*(_BYTE *)(v9 + v8) ^ v5) - 119) ^ ((a2 ^ *(_BYTE *)(v9 + v8) ^ 0xE3) + 3))
      + 126;
  *(_BYTE *)(v9 + v8) = v10 - (v6 & (2 * v10)) + 49;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v4 != v8) * a1) ^ a3)) - 8))();
}

uint64_t sub_1006F7920(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v3 = LODWORD(STACK[0x3A68]) ^ 0x6B8D9D50 ^ LODWORD(STACK[0x3C00]) ^ LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3BC0]) ^ LODWORD(STACK[0x3B68]) ^ LODWORD(STACK[0x3BC8]) ^ LODWORD(STACK[0x3B78]) ^ LODWORD(STACK[0x3BA0]) ^ LODWORD(STACK[0x3AD0]) ^ LODWORD(STACK[0x3BD8]) ^ LODWORD(STACK[0x3B88]) ^ LODWORD(STACK[0x3B58]) ^ LODWORD(STACK[0x3B50]) ^ LODWORD(STACK[0x3B60]) ^ LODWORD(STACK[0x3AE8]) ^ LODWORD(STACK[0x3BF8]) ^ LODWORD(STACK[0x3AC8]) ^ LODWORD(STACK[0x3BF0]) ^ LODWORD(STACK[0x3AE0]) ^ LODWORD(STACK[0x3B08]) ^ LODWORD(STACK[0x3BE8]) ^ LODWORD(STACK[0x3B38]) ^ LODWORD(STACK[0x3BB8]) ^ LODWORD(STACK[0x3BB0]) ^ LODWORD(STACK[0x3AF8]) ^ LODWORD(STACK[0x3B98]) ^ LODWORD(STACK[0x3AC0]) ^ LODWORD(STACK[0x3B70]) ^ LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x3BE0]) ^ LODWORD(STACK[0x3C20]) ^ LODWORD(STACK[0x3B90]) ^ LODWORD(STACK[0x3BD0]) ^ LODWORD(STACK[0x3B48]) ^ LODWORD(STACK[0x3AF0]) ^ LODWORD(STACK[0x3B10]) ^ LODWORD(STACK[0x3C08]) ^ LODWORD(STACK[0x3B40]) ^ LODWORD(STACK[0x3BA8]) ^ LODWORD(STACK[0x3AD8]) ^ LODWORD(STACK[0x3B00]) ^ LODWORD(STACK[0x3AB8]) ^ LODWORD(STACK[0x3AA8]) ^ LODWORD(STACK[0x3AB0]) ^ LODWORD(STACK[0x3A60]) ^ LODWORD(STACK[0x3A98]) ^ LODWORD(STACK[0x3A28]) ^ LODWORD(STACK[0x3910]) ^ LODWORD(STACK[0x3A00]) ^ LODWORD(STACK[0x38F8]) ^ LODWORD(STACK[0x39B8]) ^ LODWORD(STACK[0x39A8]) ^ LODWORD(STACK[0x3928]) ^ LODWORD(STACK[0x3940]) ^ LODWORD(STACK[0x39D0]);
  LODWORD(STACK[0x36D0]) = v3 ^ LODWORD(STACK[0x3A08]) ^ LODWORD(STACK[0x39B0]) ^ LODWORD(STACK[0x38F0]) ^ LODWORD(STACK[0x39D8]) ^ LODWORD(STACK[0x3938]) ^ LODWORD(STACK[0x39E8]) ^ LODWORD(STACK[0x3920]) ^ LODWORD(STACK[0x39E0]) ^ LODWORD(STACK[0x39C8]) ^ LODWORD(STACK[0x39F0]) ^ LODWORD(STACK[0x3918]) ^ LODWORD(STACK[0x39C0]) ^ LODWORD(STACK[0x3900]) ^ LODWORD(STACK[0x3858]) ^ LODWORD(STACK[0x3908]) ^ LODWORD(STACK[0x3930]) ^ LODWORD(STACK[0x3A50]) ^ LODWORD(STACK[0x39F8]) ^ LODWORD(STACK[0x3A58]) ^ LODWORD(STACK[0x3AA0]) ^ LODWORD(STACK[0x3968]) ^ LODWORD(STACK[0x3A20]) ^ LODWORD(STACK[0x3A30]) ^ LODWORD(STACK[0x3960]) ^ LODWORD(STACK[0x3A90]) ^ LODWORD(STACK[0x3958]) ^ LODWORD(STACK[0x3A18]) ^ LODWORD(STACK[0x3A88]) ^ LODWORD(STACK[0x3A10]) ^ LODWORD(STACK[0x3950]) ^ LODWORD(STACK[0x3948]) ^ LODWORD(STACK[0x3980]) ^ LODWORD(STACK[0x3A38]) ^ LODWORD(STACK[0x3A40]) ^ LODWORD(STACK[0x3A48]) ^ LODWORD(STACK[0x39A0]);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * a2) - 8))();
}

uint64_t sub_1006F7C90@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X4>, int a4@<W6>, int a5@<W8>)
{
  char v5;
  char v6;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  int v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;

  v17 = v6
      + (((*(_BYTE *)(v16 + v15) ^ v9) + 60) ^ ((*(_BYTE *)(v16 + v15) ^ v10) - 23) ^ ((*(_BYTE *)(v16 + v15) ^ v11) + 30))
      + 55;
  v18 = v7 + (((v17 >> 1) | (v17 << 7)) ^ 0x40) * v12;
  LOBYTE(v18) = v15
              + (*(_BYTE *)(a3 + v18 - (((v18 * (unint64_t)v14) >> 32) >> 1) * a5) ^ v13) * v8;
  *(_BYTE *)(v16 + v15) = v18 - (v5 & (2 * v18)) + 49;
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(STACK[0x3C70] + 8 * (((v15 > 0xE) * a4) ^ a2)) - 8))((a1 + 1));
}

uint64_t sub_1006F7D68(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t (*v33)(_QWORD, _QWORD, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  LODWORD(STACK[0x38C0]) = v11;
  LODWORD(STACK[0x3808]) = LODWORD(STACK[0x38E8]) ^ LODWORD(STACK[0x3838]);
  v12 = (a8 + a1);
  v13 = WORD1(v12);
  v14 = (v12 + WORD1(v12)) >> 8;
  v15 = a8 + v8 + WORD1(v12);
  v16 = v15 - v14;
  v17 = -v14 + (v16 >> 11) + (v12 >> 16);
  v18 = (v15 + (v16 >> 11) - v14) >> 6;
  v19 = a8 + v18;
  STACK[0x3838] = v17 + v8 + v19;
  STACK[0x38E8] = v17
                + a4
                + a8
                + (((_DWORD)v19
                  + (_DWORD)a4
                  + (v16 >> 11)
                  + v13
                  + (((_DWORD)v19 + (_DWORD)a4 + (v16 >> 11) + v13 - v14) >> 13)
                  - v14) >> 6)
                + (((_DWORD)v19 + (_DWORD)a4 + (v16 >> 11) + v13 - v14) >> 13)
                + v18;
  v20 = STACK[0x3968];
  v21 = STACK[0x3A18];
  v22 = STACK[0x3A48];
  v23 = STACK[0x3A10];
  LODWORD(v17) = LODWORD(STACK[0x3B70])
               + LODWORD(STACK[0x3600])
               + LODWORD(STACK[0x3C08])
               + ((LODWORD(STACK[0x3A30])
                 + LODWORD(STACK[0x3A10])
                 + LODWORD(STACK[0x3A48])
                 + LODWORD(STACK[0x3608])
                 + (LODWORD(STACK[0x39E8]) ^ LODWORD(STACK[0x3B98]) ^ (((((((LODWORD(STACK[0x3A88])
                                                                           + LODWORD(STACK[0x3C00])
                                                                           + v10
                                                                           + (LODWORD(STACK[0x39B8]) ^ LODWORD(STACK[0x3AA8]) ^ ((((LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3BD8]) ^ ((((LODWORD(STACK[0x39D8]) ^ LODWORD(STACK[0x3C20]) ^ (LODWORD(STACK[0x3AA0]) + LODWORD(STACK[0x39C8]) + LODWORD(STACK[0x3640]) + (((LODWORD(STACK[0x3A28]) ^ LODWORD(STACK[0x39C0]) ^ ((LODWORD(STACK[0x39F0]) ^ LODWORD(STACK[0x3A50]) ^ LODWORD(STACK[0x3968]) ^ LODWORD(STACK[0x39B0]) ^ LODWORD(STACK[0x3950]) ^ LODWORD(STACK[0x3660])) + LODWORD(STACK[0x39A8]))) + LODWORD(STACK[0x3648])) ^ LODWORD(STACK[0x3B08])))) + LODWORD(STACK[0x3B48])) ^ LODWORD(STACK[0x3B90])) - LODWORD(STACK[0x3638]))) + LODWORD(STACK[0x3630])) ^ LODWORD(STACK[0x3A90])) + LODWORD(STACK[0x3628])))) ^ LODWORD(STACK[0x39D0]))
                                                                         + LODWORD(STACK[0x3618])) ^ LODWORD(STACK[0x3A18]))
                                                                       + LODWORD(STACK[0x3610])) ^ LODWORD(STACK[0x39E0]))
                                                                     + LODWORD(STACK[0x3620])))) ^ LODWORD(STACK[0x3A98]));
  v24 = LODWORD(STACK[0x39A0]) ^ 0x6B8D9D50;
  v25 = STACK[0x3A38];
  v26 = STACK[0x3AB0];
  v27 = STACK[0x3B88];
  v28 = STACK[0x3A40];
  v29 = LODWORD(STACK[0x3B00]) ^ LODWORD(STACK[0x3A68]) ^ LODWORD(STACK[0x3BD0]) ^ LODWORD(STACK[0x3B90]) ^ LODWORD(STACK[0x3B50]) ^ LODWORD(STACK[0x3BC0]) ^ LODWORD(STACK[0x3B68]) ^ LODWORD(STACK[0x3BC8]) ^ LODWORD(STACK[0x3B78]) ^ LODWORD(STACK[0x3BA0]) ^ LODWORD(STACK[0x3AD0]) ^ LODWORD(STACK[0x3BD8]) ^ LODWORD(STACK[0x3B88]) ^ LODWORD(STACK[0x3B58]) ^ LODWORD(STACK[0x3B60]) ^ LODWORD(STACK[0x3AE8]) ^ LODWORD(STACK[0x3BF8]) ^ LODWORD(STACK[0x3AC8]) ^ LODWORD(STACK[0x3BF0]) ^ LODWORD(STACK[0x3AE0]) ^ LODWORD(STACK[0x3B08]) ^ LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3BE8]) ^ LODWORD(STACK[0x3B38]) ^ LODWORD(STACK[0x3BB8]) ^ LODWORD(STACK[0x3BB0]) ^ LODWORD(STACK[0x3AF8]) ^ LODWORD(STACK[0x3B98]) ^ LODWORD(STACK[0x3AC0]) ^ LODWORD(STACK[0x3B70]) ^ LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x3BE0]) ^ LODWORD(STACK[0x3C20]) ^ LODWORD(STACK[0x3B48]) ^ LODWORD(STACK[0x3AF0]) ^ LODWORD(STACK[0x3B10]) ^ LODWORD(STACK[0x3C08]) ^ LODWORD(STACK[0x3B40]) ^ LODWORD(STACK[0x3BA8]) ^ LODWORD(STACK[0x3AD8]) ^ LODWORD(STACK[0x3AA8]) ^ LODWORD(STACK[0x3AB0]) ^ LODWORD(STACK[0x3A60]) ^ LODWORD(STACK[0x3AB8]) ^ LODWORD(STACK[0x3C00]) ^ LODWORD(STACK[0x3A98]);
  LODWORD(v19) = (STACK[0x38E8] ^ 0x7D907BD7) + ((STACK[0x38E8] ^ 0x7D907BD7) >> 10);
  v30 = LODWORD(STACK[0x3950]) ^ LODWORD(STACK[0x3A30]) ^ LODWORD(STACK[0x3A20]) ^ LODWORD(STACK[0x38F0]) ^ LODWORD(STACK[0x3A00]) ^ LODWORD(STACK[0x38F8]) ^ LODWORD(STACK[0x39B8]) ^ LODWORD(STACK[0x39A8]) ^ LODWORD(STACK[0x3928]);
  LODWORD(STACK[0x39B8]) = v19;
  LODWORD(STACK[0x39A8]) = v19 >> 8;
  v31 = v29 ^ v30 ^ LODWORD(STACK[0x3940]) ^ LODWORD(STACK[0x39D0]) ^ LODWORD(STACK[0x3A08]) ^ LODWORD(STACK[0x39B0]) ^ LODWORD(STACK[0x39D8]) ^ LODWORD(STACK[0x3938]) ^ LODWORD(STACK[0x39E8]) ^ LODWORD(STACK[0x3920]) ^ LODWORD(STACK[0x39E0]) ^ LODWORD(STACK[0x39C8]) ^ LODWORD(STACK[0x39F0]) ^ LODWORD(STACK[0x3910]) ^ LODWORD(STACK[0x3918]) ^ LODWORD(STACK[0x39C0]) ^ LODWORD(STACK[0x3900]) ^ LODWORD(STACK[0x3858]) ^ LODWORD(STACK[0x3908]) ^ LODWORD(STACK[0x3930]) ^ LODWORD(STACK[0x3A50]) ^ LODWORD(STACK[0x39F8]) ^ LODWORD(STACK[0x3A58]) ^ LODWORD(STACK[0x3AA0]) ^ v20 ^ LODWORD(STACK[0x3A28]);
  v32 = LODWORD(STACK[0x3960]) ^ LODWORD(STACK[0x3A90]) ^ LODWORD(STACK[0x3958]) ^ v21 ^ LODWORD(STACK[0x3A88]) ^ v23 ^ LODWORD(STACK[0x3948]) ^ v25 ^ v28 ^ v22 ^ LODWORD(STACK[0x3980]);
  LODWORD(STACK[0x39E8]) = v24;
  LODWORD(STACK[0x3660]) = v31 ^ v32 ^ v24;
  LODWORD(STACK[0x39D0]) = (v28 ^ v27 ^ ((v24 ^ v25 ^ v17) + v26)) + LODWORD(STACK[0x3650]);
  v33 = (uint64_t (*)(_QWORD, _QWORD, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x3C70] + 8 * v9) - 12);
  LODWORD(STACK[0x39F0]) = v9 + 4130;
  return v33(LODWORD(STACK[0x3A80]), 0, &STACK[0x3CA0], 9544938, a5, 413, 105728, 184);
}

uint64_t sub_1006F82FC(int a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, unsigned int a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;

  v25 = *(_DWORD *)(v13 + 4 * (((a2 ^ 0x11) * v10 + 344839) % 0x340)) ^ 0x2BF3D46F;
  v26 = ((((v8 & (a2 ^ (2 * (a2 & STACK[0x3C78])))) >> STACK[0x3C38])
                         + ((unint64_t)(a2 ^ (2 * (a2 & STACK[0x3C78]))) << STACK[0x3C60])) ^ LODWORD(STACK[0x3C48]));
  *(_DWORD *)(a3
            + 4
            * ((((v8 & (a2 ^ (2 * (a2 & STACK[0x3C78])))) >> STACK[0x3C38])
                               + ((unint64_t)(a2 ^ (2 * (a2 & STACK[0x3C78]))) << STACK[0x3C60])) ^ LODWORD(STACK[0x3C48]))) = (((v25 ^ (2 * (v25 & STACK[0x3C30]))) & STACK[0x3C58]) << LODWORD(STACK[0x3C40])) ^ a1 ^ (((v25 ^ (2 * (v25 & STACK[0x3C30]))) & STACK[0x3C28]) >> LODWORD(STACK[0x3C68]));
  v27 = (((*(_BYTE *)(a5
                                     + a4
                                     + (v26 ^ a8) * v15
                                     - ((((a4 + (v26 ^ a8) * v15) * (unint64_t)v18) >> 32) >> 1)
                                     * v20)
                          - 87) ^ 0xFB)
                        + 85)
      * v23
      + 123225;
  *(_DWORD *)(v21 + 4 * (v27 - ((v27 * (unint64_t)v24) >> 32) * v19)) = v12 ^ (unsigned __int16)((a2 ^ v22) + (a2 ^ 0xFFCD) + *(_WORD *)(v14 + 2 * (a7 + (a2 ^ 0xA7) * a6 - ((((a7 + (a2 ^ 0xA7) * a6) * (unint64_t)v16) >> 32) >> 10) * v17)) + 2);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (((a2 == 255) * v9) ^ v11)) - 12))();
}

uint64_t sub_1006F8444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  char v67;
  int v68;
  BOOL v69;
  char v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  char v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  char v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  char v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  unsigned int v144;
  unint64_t v145;
  int v146;
  unsigned int v147;
  unint64_t v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  unint64_t v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  char v160;
  unsigned int v161;
  int v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  unint64_t v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  char v187;
  BOOL v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  char v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  int v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  int v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  int v273;
  int v274;
  unsigned int v275;
  BOOL v276;
  int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  char v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  BOOL v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  BOOL v307;
  unsigned int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  BOOL v312;
  char v313;
  char v314;
  unsigned int v315;
  int v316;
  int v317;
  int v318;
  unsigned int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  unsigned int v332;
  unsigned int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  unsigned int v338;
  unsigned int v339;
  int v340;
  unsigned int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  unsigned int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  int v356;
  int v357;
  unint64_t v358;
  char v359;
  char v360;
  char v361;
  unint64_t v362;
  char v363;
  unsigned int v364;
  unint64_t v365;
  unsigned int v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unsigned int v370;
  unsigned int v371;
  unsigned int v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  int v376;
  unint64_t v377;
  unsigned int v378;
  unint64_t v379;
  unint64_t v380;
  unsigned int v381;
  unint64_t v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  unint64_t v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  unint64_t v403;
  unsigned int v404;
  unsigned int v405;
  unint64_t v406;
  int v407;
  int v408;
  unsigned int v409;
  unint64_t v410;
  unint64_t v411;
  int v412;
  unsigned int v413;
  unint64_t v414;
  char v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unsigned int v423;
  int v424;
  unint64_t v425;
  int v426;
  int v427;
  unint64_t v428;
  unsigned int v429;
  unint64_t v430;
  unint64_t v431;
  unsigned int v432;
  int v433;
  int v434;
  int v435;
  BOOL v436;
  char v437;
  int v438;
  int v439;
  int v440;
  unsigned int v441;
  int v442;
  unsigned int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  unsigned int v449;
  unsigned int v450;
  int v451;
  int v452;
  int v453;
  unsigned int v454;
  int v455;
  unint64_t v456;
  unint64_t v457;
  int v458;
  int v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  int v466;
  unint64_t v467;
  int v468;
  unint64_t v469;
  int v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  unsigned int v475;
  int v476;
  int v477;
  int v478;
  unsigned int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  int v483;
  unsigned int v484;
  int v485;
  unsigned int v486;
  unsigned __int8 v487;
  unsigned __int8 v488;
  unsigned int v489;
  unint64_t v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  unsigned int v497;
  unsigned int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  BOOL v514;
  int v515;
  unint64_t v516;
  int v517;
  unint64_t v518;
  unint64_t v519;
  int v520;
  unint64_t v521;
  int v522;
  int v523;
  unsigned int v524;
  int v525;
  int v526;
  int v527;
  unsigned int v528;
  unsigned int v529;
  char v530;
  unsigned int v531;
  unint64_t v532;
  unint64_t v533;
  unsigned int v534;
  unint64_t v535;
  int v536;
  unint64_t v537;
  unint64_t v538;
  int v539;
  unint64_t v540;
  unint64_t v541;
  unsigned int v542;
  unsigned int v543;
  unsigned int v544;
  unsigned int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  unsigned int v557;
  int v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int v563;
  unsigned int v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  unsigned int v570;
  unsigned int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  unsigned int v575;
  unsigned int v576;
  unsigned int v577;
  unsigned int v578;
  unsigned int v579;
  unsigned int v580;
  unsigned int v581;
  unsigned int v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  unsigned int v586;
  unsigned int v587;
  int v588;
  unsigned int v589;
  unsigned int v590;
  int v591;
  unsigned int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  unsigned int v600;
  unsigned int v601;
  unsigned int v602;
  char v603;
  unsigned int v604;
  int v605;
  int v606;
  int v607;
  unsigned int v608;
  int v609;
  int v610;
  unsigned int v611;
  int v612;
  unsigned int v613;
  unsigned int v614;
  unsigned int v615;
  unsigned int v616;
  unsigned int v617;
  unsigned int v618;
  int v619;
  BOOL v620;
  unsigned int v621;
  unsigned int v622;
  int v623;
  unsigned int v624;
  unsigned int v625;
  int v626;
  unsigned int v627;
  unsigned int v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  unsigned int v633;
  unsigned int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  unsigned int v640;
  int v641;
  char v642;
  unsigned int v643;
  int v644;
  int v645;
  unsigned int v646;
  int v647;
  int v648;
  unsigned int v649;
  int v650;
  unsigned int v651;
  unsigned int v652;
  unsigned int v653;
  unsigned int v654;
  unint64_t v655;
  unsigned int v656;
  unsigned int v657;
  unsigned int v658;
  int v659;
  _BYTE *v660;
  char v661;
  int v662;
  char v663;
  int v664;
  int v665;
  char v666;
  char v667;
  unsigned int v668;
  unsigned int v669;
  int v670;
  unsigned int v671;
  int v672;
  unsigned int v673;
  int v674;

  LODWORD(STACK[0x39E0]) = STACK[0x3838] ^ LODWORD(STACK[0x38C0]) ^ STACK[0x38E8] ^ (LODWORD(STACK[0x39A8])
                                                                                   + LODWORD(STACK[0x39B8]));
  LODWORD(STACK[0x34A8]) = STACK[0x3978] | LODWORD(STACK[0x3970]);
  LODWORD(STACK[0x3548]) = STACK[0x3690] | LODWORD(STACK[0x3860]);
  LODWORD(STACK[0x3558]) = LODWORD(STACK[0x36A8]) ^ STACK[0x3868];
  LODWORD(STACK[0x3568]) = LODWORD(STACK[0x36B8]) | STACK[0x36A0];
  LODWORD(STACK[0x3578]) = STACK[0x36C0] ^ LODWORD(STACK[0x3698]);
  LODWORD(STACK[0x35D8]) = STACK[0x3678] | STACK[0x3688];
  LODWORD(STACK[0x35E0]) = LODWORD(STACK[0x3658]) + LODWORD(STACK[0x3668]);
  v5 = *(unsigned __int8 *)(STACK[0x508] + 7);
  HIDWORD(v6) = ~v5;
  LODWORD(v6) = (v5 ^ 0x30) << 24;
  v7 = 4647 * (*(unsigned __int8 *)(STACK[0x508] + 14) ^ 0xF5) + 14331348;
  v8 = 4647 * ((v6 >> 25) ^ 0xD9) + 19140993;
  v9 = v8 - 6784 * (((1266205 * (unint64_t)v8) >> 32) >> 1);
  v10 = 4647
      * (((((*(_BYTE *)(STACK[0x508] + 8) ^ 0x1C) - 28) ^ ((*(_BYTE *)(STACK[0x508] + 8) ^ 0x1D) - 29) ^ ((*(_BYTE *)(STACK[0x508] + 8) ^ 0x30) - 48))
                         + 41) ^ 0xFE)
      + 13123128;
  v11 = v10 - 6784 * (((1266205 * (unint64_t)v10) >> 32) >> 1);
  v12 = *(unsigned __int8 *)(a5 + v7 - 6784 * (((1266205 * (unint64_t)v7) >> 32) >> 1)) + 117;
  v13 = *(unsigned __int8 *)(a5 + v11) - 71;
  v14 = 4647
      * (((((*(_BYTE *)(STACK[0x508] + 9) ^ 0x6C) - 108) ^ ((*(_BYTE *)(STACK[0x508] + 9) ^ 0xBD) + 67) ^ ((*(_BYTE *)(STACK[0x508] + 9) ^ 0xE0) + 32))
                         + 74) ^ 0x36)
      + 17937420;
  v15 = v14 - 6784 * (((1266205 * (unint64_t)v14) >> 32) >> 1);
  v16 = 4647
      * (((((*(_BYTE *)(STACK[0x508] + 10) ^ 0xD5) + 43) ^ ((*(_BYTE *)(STACK[0x508] + 10) ^ 0x60) - 96) ^ ((*(_BYTE *)(STACK[0x508] + 10) ^ 0x84) + 124))
                         - 38) ^ 0xFE)
      + 13123128;
  v17 = 4647 * ((*(_BYTE *)(STACK[0x508] + 2) ^ 0x2D) + 32) + 4767822;
  LOBYTE(v16) = *(_BYTE *)(a5 + v16 - 6784 * (((1266205 * (unint64_t)v16) >> 32) >> 1)) - 71;
  v18 = ((97 * (*(_BYTE *)(a5 + v9) ^ 0x27) - 84) | (((((*(_BYTE *)(STACK[0x508] + 5) ^ 0xEF)
                                                                                        + 17) ^ ((*(_BYTE *)(STACK[0x508] + 5) ^ 0xB3)
                                                                                               + 77) ^ ((*(_BYTE *)(STACK[0x508] + 5) ^ 0x6D) - 109))
                                                                                      - 33) << 16) | (((((*(_BYTE *)(STACK[0x508] + 6) ^ 0x2E) - 46) ^ ((*(_BYTE *)(STACK[0x508] + 6) ^ 0xF1) + 15) ^ ((*(_BYTE *)(STACK[0x508] + 6) ^ 0xEE) + 18)) - 34) << 8) | ((((*(unsigned __int8 *)(STACK[0x508] + 4) ^ 0xFFFFFF9F) + 97) ^ ((*(unsigned __int8 *)(STACK[0x508] + 4) ^ 0xF2) + 14) ^ ((*(unsigned __int8 *)(STACK[0x508] + 4) ^ 0x5C) - 92)) << 24))
      - 0x20000000;
  LOBYTE(v17) = *(_BYTE *)(a5 + v17 - 6784 * (((1266205 * (unint64_t)v17) >> 32) >> 1)) ^ 0xE3;
  v19 = (((((*(_BYTE *)(STACK[0x508] + 11) ^ 0xD6) + 42) ^ ((*(_BYTE *)(STACK[0x508] + 11) ^ 0xE8) + 24) ^ ((*(_BYTE *)(STACK[0x508] + 11) ^ 0xF) - 15))
                         - 39) | ((v13 ^ (v13 << 6) ^ (4 * v13) ^ 0xFE) << 24) | ((((*(_BYTE *)(a5 + v15) ^ 0xE) >> 3) | (32 * (*(_BYTE *)(a5 + v15) ^ 0xE))) << 16) | (((v16 ^ ((_BYTE)v16 << 6) ^ (4 * v16) ^ 0xFE) + 26) << 8))
      - 855638016;
  v20 = ((unsigned __int16)(((v12 ^ 0x12 ^ (v12 >> 2) & 0x12) - 65) << 8) | (((((*(_BYTE *)(STACK[0x508] + 13) ^ 0x9A) + 102) ^ ((*(_BYTE *)(STACK[0x508] + 13) ^ 0x70) - 112) ^ ((*(_BYTE *)(STACK[0x508] + 13) ^ 0xDB) + 37)) - 41) << 16) | ((((*(_BYTE *)(STACK[0x508] + 15) ^ 0x4B) - 75) ^ ((*(_BYTE *)(STACK[0x508] + 15) ^ 0x47) - 71) ^ ((*(_BYTE *)(STACK[0x508] + 15) ^ 0x3D) - 61)) - 43) | ((((*(unsigned __int8 *)(STACK[0x508] + 12) ^ 0x54) - 84) ^ ((*(unsigned __int8 *)(STACK[0x508] + 12) ^ 5) - 5) ^ ((*(unsigned __int8 *)(STACK[0x508] + 12) ^ 0x60) - 96)) << 24))
      - 671088640;
  v21 = (((((*(_BYTE *)(STACK[0x508] + 3) ^ 0x64) - 100) ^ ((*(_BYTE *)(STACK[0x508] + 3) ^ 0x7D) - 125) ^ ((*(_BYTE *)(STACK[0x508] + 3) ^ 0x28) - 40))
                         - 31) | (((((*(_BYTE *)(STACK[0x508] + 1) ^ 0x43) - 67) ^ ((*(_BYTE *)(STACK[0x508] + 1) ^ 0x2D) - 45) ^ ((*(_BYTE *)(STACK[0x508] + 1) ^ 0x5F) - 95))
                                                  - 29) << 16) | (((v17 >> 3) | (32 * v17)) << 8) | ((((*(unsigned __int8 *)STACK[0x508] ^ 0x60) - 96) ^ ((*(unsigned __int8 *)STACK[0x508] ^ 0x6E) - 110) ^ ((*(unsigned __int8 *)STACK[0x508] ^ 0x3F) - 63)) << 24))
      - 469762048;
  v22 = STACK[0x3C10];
  v23 = LODWORD(STACK[0x3A00]) ^ LODWORD(STACK[0x3C10]);
  v24 = STACK[0x3C48];
  v25 = LODWORD(STACK[0x39F8]) ^ LODWORD(STACK[0x3C48]);
  LODWORD(STACK[0x3A00]) = v25;
  v26 = v20;
  v27 = -1639451989 * (v23 ^ v25 ^ v20) - ((-1639451989 * (v23 ^ v25 ^ v20)) >> 16);
  v28 = -305576143 * (v27 + v21 - (v27 >> 8)) + ((-305576143 * (v27 + v21 - (v27 >> 8))) >> 16);
  v29 = -35561601 * ((v28 ^ (v28 >> 8)) + v18) + ((-35561601 * ((v28 ^ (v28 >> 8)) + v18)) >> 16);
  v30 = LODWORD(STACK[0x3A88]) ^ v24;
  v31 = 982117199 * ((LODWORD(STACK[0x3A08]) ^ v22 ^ v30) - v26);
  v32 = -484051103 * (((v31 + HIWORD(v31)) ^ ((v31 + HIWORD(v31)) >> 8)) + v19);
  v33 = 1064629697 * (((v32 ^ HIWORD(v32)) - ((v32 ^ HIWORD(v32)) >> 8)) ^ v18);
  v34 = 129335135 * (v33 + HIWORD(v33) + v21 + ((v33 + HIWORD(v33)) >> 8));
  v35 = (2132780219 * ((v29 ^ (v29 >> 8)) + v19)) ^ ((2132780219 * ((v29 ^ (v29 >> 8)) + v19)) >> 16);
  v36 = (v35 ^ (v35 >> 8)) - &STACK[0x3CA0];
  LODWORD(STACK[0x36C0]) = v36;
  v37 = LODWORD(STACK[0x3B38]) ^ v22;
  LODWORD(STACK[0x39B8]) = v37;
  v38 = LODWORD(STACK[0x3BE8]) ^ v24;
  LODWORD(STACK[0x39B0]) = v38;
  v39 = LODWORD(STACK[0x3B30]) ^ v22;
  LODWORD(STACK[0x39A8]) = v39;
  v40 = LODWORD(STACK[0x3B08]) ^ v24;
  LODWORD(STACK[0x3A08]) = v40;
  if ((((v34 ^ BYTE2(v34)) ^ ((unsigned __int16)(v34 ^ HIWORD(v34)) >> 8)) & 1) != 0)
    v38 = v37;
  LODWORD(STACK[0x39C8]) = v38;
  if ((((v34 ^ BYTE2(v34)) ^ ((unsigned __int16)(v34 ^ HIWORD(v34)) >> 8)) & 1) == 0)
    v39 = v40;
  LODWORD(STACK[0x39C0]) = v39;
  v41 = v34 ^ HIWORD(v34) ^ ((v34 ^ HIWORD(v34)) >> 8) ^ &STACK[0x3CA0];
  v42 = v34 ^ HIWORD(v34) ^ ((v34 ^ HIWORD(v34)) >> 8);
  if ((((v34 ^ BYTE2(v34)) ^ ((unsigned __int16)(v34 ^ HIWORD(v34)) >> 8)) & 2) == 0)
    v38 = v39;
  LODWORD(STACK[0x3808]) = v38;
  v43 = v41 - v36;
  v44 = LODWORD(STACK[0x3BB8]) ^ v22;
  LODWORD(STACK[0x34D8]) = v44;
  v45 = LODWORD(STACK[0x3B98]) ^ v22;
  LODWORD(STACK[0x34E8]) = v45;
  v46 = LODWORD(STACK[0x3BB0]) ^ v24;
  LODWORD(STACK[0x34E0]) = v46;
  v47 = LODWORD(STACK[0x3AF8]) ^ v24;
  LODWORD(STACK[0x34F0]) = v47;
  if (((v41 - v36) & 1) != 0)
    v48 = v46;
  else
    v48 = v44;
  LODWORD(STACK[0x3910]) = v48;
  if ((v43 & 1) != 0)
    v49 = v45;
  else
    v49 = v47;
  LODWORD(STACK[0x3978]) = v49;
  if ((v43 & 1) != 0)
    v45 = v44;
  else
    v47 = v46;
  if ((v43 & 2) != 0)
    v50 = v45;
  else
    v50 = v47;
  LODWORD(STACK[0x3868]) = v50;
  if ((v43 & 2) != 0)
    v51 = v47;
  else
    v51 = v45;
  v52 = v43 - v36;
  if ((v43 & 2) != 0)
    v53 = v48;
  else
    v53 = v49;
  v54 = (((_BYTE)v52 - (_BYTE)v36) & 1) == 0;
  v55 = v52 - v36;
  v56 = LODWORD(STACK[0x3AC8]) ^ v22;
  LODWORD(STACK[0x34B8]) = v56;
  v57 = LODWORD(STACK[0x3AE0]) ^ v22;
  v58 = LODWORD(STACK[0x3BF8]) ^ v24;
  LODWORD(STACK[0x34B0]) = v58;
  v59 = LODWORD(STACK[0x3BF0]) ^ v22;
  LODWORD(STACK[0x34C0]) = v59;
  v60 = 8 * v36;
  v61 = -8 * v36;
  v62 = v57;
  LODWORD(STACK[0x34C8]) = v57;
  if (v54)
    v63 = v59;
  else
    v63 = v57;
  LODWORD(STACK[0x39D8]) = v63;
  if (v54)
    v64 = v56;
  else
    v64 = v59;
  if (v54)
    v65 = v62;
  else
    v65 = v58;
  if (v54)
    v66 = v58;
  else
    v66 = v56;
  LODWORD(STACK[0x39F8]) = v66;
  v67 = v60 & 0x18;
  v68 = v60;
  v70 = v61 & 0x18;
  v69 = (v61 & 0x18) == 0;
  v71 = v61;
  v72 = (v50 >> (v61 & 0x18)) ^ (v50 << v67);
  v73 = __ROR4__(v38, v70);
  if (!v69)
    v38 = v73;
  LODWORD(STACK[0x3598]) = v38;
  if (v69)
    v74 = v50;
  else
    v74 = v72;
  LODWORD(STACK[0x35B8]) = v74;
  LODWORD(STACK[0x3858]) = v53;
  v75 = __ROR4__(v53, v70);
  if (v69)
    v76 = v53;
  else
    v76 = v75;
  LODWORD(STACK[0x35A0]) = v76;
  LODWORD(STACK[0x3840]) = v51;
  v77 = __ROR4__(v51, v70);
  if (v69)
    v78 = v51;
  else
    v78 = v77;
  LODWORD(STACK[0x35B0]) = v78;
  if ((v55 & 2) != 0)
    v79 = v64;
  else
    v79 = v65;
  if ((v55 & 2) != 0)
    v80 = v65;
  else
    v80 = v64;
  if ((v55 & 2) != 0)
    v81 = v66;
  else
    v81 = v63;
  LODWORD(STACK[0x3860]) = v81;
  v82 = v71 & 0x18;
  v83 = (v81 >> (v71 & 0x18)) ^ (v81 << v67);
  if ((v71 & 0x18) == 0)
    v83 = v81;
  LODWORD(STACK[0x3538]) = v83;
  LODWORD(STACK[0x3838]) = v80;
  v84 = __ROR4__(v80, v82);
  if ((v71 & 0x18) == 0)
    v84 = v80;
  LODWORD(STACK[0x3560]) = v84;
  LODWORD(STACK[0x3834]) = v79;
  v85 = __ROR4__(v79, v82);
  if ((v71 & 0x18) == 0)
    v85 = v79;
  LODWORD(STACK[0x3550]) = v85;
  v86 = LODWORD(STACK[0x3948]) ^ v24;
  v87 = LODWORD(STACK[0x3950]) ^ v22;
  v88 = LODWORD(STACK[0x3A10]) ^ v24;
  if ((v43 & 1) != 0)
    v89 = LODWORD(STACK[0x3A10]) ^ v24;
  else
    v89 = v30;
  LODWORD(STACK[0x38E8]) = v89;
  if ((v43 & 1) != 0)
  {
    v90 = v86;
  }
  else
  {
    v30 = v86;
    v90 = v87;
  }
  LODWORD(STACK[0x3908]) = v90;
  if ((v43 & 1) != 0)
    v91 = v87;
  else
    v91 = v88;
  if ((v43 & 2) != 0)
    v92 = v30;
  else
    v92 = v91;
  if ((v43 & 2) != 0)
  {
    v93 = v90;
  }
  else
  {
    v91 = v30;
    v93 = v89;
  }
  v94 = v68 & 0x18;
  v95 = __ROR4__(v92, v82);
  if ((v68 & 0x18) != 0)
    v96 = v95;
  else
    v96 = v92;
  LODWORD(STACK[0x3698]) = v96;
  v97 = __ROR4__(v91, v82);
  if ((v68 & 0x18) != 0)
    v91 = v97;
  LODWORD(STACK[0x36A0]) = v91;
  v98 = (v93 >> v82) + (v93 << v94);
  if ((v68 & 0x18) == 0)
    v98 = v93;
  LODWORD(STACK[0x36A8]) = v98;
  v99 = LODWORD(STACK[0x3958]) ^ v22;
  v100 = LODWORD(STACK[0x3A90]) ^ v22;
  v101 = LODWORD(STACK[0x3960]) ^ v24;
  if ((v42 & 1) != 0)
    v102 = LODWORD(STACK[0x3A90]) ^ v22;
  else
    v102 = LODWORD(STACK[0x3960]) ^ v24;
  if ((v42 & 1) != 0)
    v100 = LODWORD(STACK[0x3958]) ^ v22;
  else
    v101 = LODWORD(STACK[0x3A18]) ^ v24;
  if ((v42 & 1) != 0)
    v99 = LODWORD(STACK[0x3A18]) ^ v24;
  v103 = v41 + LODWORD(STACK[0x3A98]);
  LODWORD(STACK[0x3600]) = v42;
  if ((v42 & 2) != 0)
    v104 = v100;
  else
    v104 = v101;
  if ((v42 & 2) != 0)
    v105 = v101;
  else
    v105 = v100;
  if ((v42 & 2) != 0)
    v106 = v99;
  else
    v106 = v102;
  LODWORD(STACK[0x3658]) = v18;
  LODWORD(STACK[0x3628]) = v19;
  if ((v103 & 1) != 0)
    v107 = v19;
  else
    v107 = v18;
  LODWORD(STACK[0x3420]) = v107;
  LODWORD(STACK[0x3608]) = v26;
  if ((v103 & 1) != 0)
    v108 = v21;
  else
    v108 = v26;
  LODWORD(STACK[0x3470]) = v108;
  if ((v103 & 2) == 0)
    v108 = v107;
  LODWORD(STACK[0x3A88]) = v71;
  v109 = v71 & 0x18;
  v110 = (v108 >> (v71 & 0x18)) ^ (v108 << v94);
  if ((v71 & 0x18) != 0)
    v108 = v110;
  LODWORD(STACK[0x3468]) = v108;
  v111 = __ROR4__(v104, v109);
  if ((v68 & 0x18) != 0)
    v104 = v111;
  LODWORD(STACK[0x35E8]) = v104;
  if ((v68 & 0x18) != 0)
    v112 = (v106 << (v68 & 0x18)) ^ (v106 >> v109);
  else
    v112 = v106;
  LODWORD(STACK[0x3610]) = v112;
  if ((v68 & 0x18) != 0)
    v113 = (v105 << (v68 & 0x18)) + (v105 >> v109);
  else
    v113 = v105;
  LODWORD(STACK[0x35F8]) = v113;
  LODWORD(STACK[0x3A18]) = v103;
  if ((v103 & 1) != 0)
    v114 = v18;
  else
    v114 = v21;
  LODWORD(STACK[0x38F8]) = v114;
  if ((v103 & 1) != 0)
    v115 = v26;
  else
    v115 = v19;
  LODWORD(STACK[0x3900]) = v115;
  LODWORD(STACK[0x38F0]) = v55;
  v116 = LODWORD(STACK[0x3A28]) ^ v24;
  v117 = LODWORD(STACK[0x3968]) ^ v22;
  v118 = LODWORD(STACK[0x3A30]) ^ v22;
  if ((v55 & 1) != 0)
    v119 = LODWORD(STACK[0x3A20]) ^ v22;
  else
    v119 = LODWORD(STACK[0x3968]) ^ v22;
  if ((v55 & 1) != 0)
    v120 = LODWORD(STACK[0x3A30]) ^ v22;
  else
    v120 = LODWORD(STACK[0x3A20]) ^ v22;
  LODWORD(STACK[0x3630]) = v120;
  if ((v55 & 1) != 0)
    v121 = v116;
  else
    v121 = v118;
  if ((v55 & 1) != 0)
    v122 = v117;
  else
    v122 = v116;
  LODWORD(STACK[0x3648]) = v122;
  v123 = LODWORD(STACK[0x3C20]) ^ v24;
  LODWORD(STACK[0x3488]) = v123;
  v124 = LODWORD(STACK[0x3B90]) ^ v24;
  LODWORD(STACK[0x3498]) = v124;
  v125 = LODWORD(STACK[0x3C00]) ^ v24;
  LODWORD(STACK[0x3490]) = v125;
  v126 = LODWORD(STACK[0x3BD0]) ^ v24;
  LODWORD(STACK[0x3970]) = v126;
  if ((v55 & 1) != 0)
    v127 = v126;
  else
    v127 = v124;
  if ((v55 & 1) != 0)
    v128 = v123;
  else
    v128 = v125;
  if ((v55 & 1) != 0)
    v126 = v125;
  else
    v124 = v123;
  if ((v103 & 2) != 0)
    v129 = v115;
  else
    v129 = v114;
  LODWORD(STACK[0x3A80]) = v68;
  v130 = __ROR4__(v129, v109);
  if ((v68 & 0x18) != 0)
    v131 = v130;
  else
    v131 = v129;
  LODWORD(STACK[0x3458]) = v131;
  if ((v55 & 2) != 0)
    v132 = v127;
  else
    v132 = v128;
  LODWORD(STACK[0x3A20]) = v132;
  if ((v55 & 2) != 0)
    v127 = v128;
  LODWORD(STACK[0x3A28]) = v127;
  if ((v55 & 2) != 0)
    v133 = v126;
  else
    v133 = v124;
  LODWORD(STACK[0x3A10]) = v133;
  if ((v55 & 2) != 0)
    v134 = v124;
  else
    v134 = v126;
  LODWORD(STACK[0x3A30]) = v134;
  if ((v55 & 2) != 0)
    v135 = v119;
  else
    v135 = v121;
  LODWORD(STACK[0x3520]) = v135;
  if ((v55 & 2) == 0)
    v121 = v119;
  LODWORD(STACK[0x3528]) = v121;
  if ((v55 & 2) != 0)
    v136 = v120;
  else
    v136 = v122;
  if ((v42 & 2) != 0)
    v137 = v102;
  else
    v137 = v99;
  LODWORD(STACK[0x3A98]) = v137;
  v138 = LODWORD(STACK[0x3B50]) ^ v22;
  LODWORD(STACK[0x3958]) = v138;
  v139 = LODWORD(STACK[0x3AE8]) ^ v22;
  LODWORD(STACK[0x3968]) = v139;
  v140 = LODWORD(STACK[0x3B58]) ^ v24;
  LODWORD(STACK[0x3950]) = v140;
  v141 = LODWORD(STACK[0x3B60]) ^ v22;
  LODWORD(STACK[0x3960]) = v141;
  if ((v52 & 1) != 0)
    v138 = v141;
  LODWORD(STACK[0x3618]) = v138;
  if ((v52 & 1) != 0)
    v139 = v140;
  LODWORD(STACK[0x3640]) = v139;
  if ((v52 & 2) == 0)
    v138 = v139;
  LODWORD(STACK[0x36B8]) = v138;
  LODWORD(STACK[0x3688]) = v71 & 0x18;
  v142 = __ROR4__(v138, v71 & 0x18);
  if ((v71 & 0x18) == 0)
    v142 = v138;
  LODWORD(STACK[0x3500]) = v142;
  if ((v68 & 0x18) != 0)
    v136 = (v136 >> (v71 & 0x18)) + (v136 << (v68 & 0x18));
  LODWORD(STACK[0x35C8]) = v136;
  v143 = STACK[0x3C68];
  v144 = STACK[0x3B28] >> LODWORD(STACK[0x3C68]);
  v145 = STACK[0x3B28];
  LODWORD(STACK[0x3690]) = v144;
  v146 = STACK[0x3C40];
  v147 = STACK[0x3C50] << LODWORD(STACK[0x3C40]);
  v148 = STACK[0x3C50];
  v149 = ((STACK[0x3A38] & (STACK[0x3C50] << v146)) >> v146) | ((STACK[0x3A38] & v144) << v143);
  v150 = STACK[0x3C78];
  v151 = STACK[0x3B20];
  v152 = STACK[0x3B20] & (4 * ((v149 ^ (2 * (v149 & v150))) & v150)) ^ v149 ^ (2 * (v149 & v150));
  v153 = 4 * (STACK[0x3B20] & LODWORD(STACK[0x3C78]));
  v154 = v153 & (16 * (v152 & STACK[0x3C78])) & STACK[0x3B20] ^ v152;
  LODWORD(STACK[0x3A38]) = v154;
  v155 = STACK[0x3C28] >> v143;
  v156 = STACK[0x3C28];
  v157 = STACK[0x3A40];
  v158 = STACK[0x3C60];
  v159 = v148 << STACK[0x3C60];
  STACK[0x3570] = v159;
  v160 = v158;
  v161 = ((v157 & (v148 << v158)) >> v158) + ((v157 & v155) << v143);
  LODWORD(v158) = STACK[0x3C30];
  v162 = STACK[0x3B18];
  v163 = LODWORD(STACK[0x3B18]) & (4 * ((v161 ^ (2 * (v161 & v158))) & v158)) ^ v161 ^ (2 * (v161 & v158));
  v164 = STACK[0x3C38];
  v165 = v145 >> STACK[0x3C38];
  v166 = ((unint64_t)(STACK[0x3A48] & (v145 >> v164)) << v164) | ((STACK[0x3A48] & v147) >> v146);
  v167 = 4 * (STACK[0x3C30] & LODWORD(STACK[0x3B18]));
  v168 = v167 & (16 * (v163 & STACK[0x3C30])) & STACK[0x3B18] ^ v163;
  LODWORD(STACK[0x3928]) = v168;
  v169 = v162 & (4 * ((v166 ^ (2 * (v166 & v158))) & v158)) ^ v166 ^ (2 * (v166 & v158));
  v170 = v167 & (16 * (v169 & v158)) & v162 ^ v169;
  LODWORD(STACK[0x3930]) = v170;
  v171 = STACK[0x3C58];
  v172 = STACK[0x3C58] << v146;
  v173 = STACK[0x3980];
  LODWORD(STACK[0x3668]) = v172;
  v174 = ((unint64_t)(v173 & v165) << v164) ^ ((v173 & v172) >> v146);
  v175 = v162 & (4 * ((v174 ^ (2 * (v174 & v158))) & v158)) ^ v174 ^ (2 * (v174 & v158));
  v176 = v158;
  LODWORD(STACK[0x3580]) = v167;
  v177 = v167 & (16 * (v175 & v158)) & v162 ^ v175;
  LODWORD(STACK[0x3920]) = v177;
  v178 = LODWORD(STACK[0x3AA0]) ^ v22;
  LODWORD(STACK[0x3980]) = v178;
  v179 = v24;
  v180 = LODWORD(STACK[0x3A58]) ^ v24;
  LODWORD(STACK[0x3AA0]) = v180;
  v181 = LODWORD(STACK[0x3A50]) ^ v22;
  LODWORD(STACK[0x35F0]) = v181;
  if ((v52 & 1) != 0)
    v182 = STACK[0x3A00];
  else
    v182 = v181;
  LODWORD(STACK[0x3510]) = v182;
  if ((v52 & 1) != 0)
    v183 = v178;
  else
    v183 = v180;
  LODWORD(STACK[0x34D0]) = v183;
  if ((v52 & 1) != 0)
    v184 = v170;
  else
    v184 = v168;
  LODWORD(STACK[0x3A40]) = v184;
  if ((v52 & 1) != 0)
    v185 = v154;
  else
    v185 = v177;
  LODWORD(STACK[0x3A48]) = v185;
  if ((v52 & 2) != 0)
    v185 = v184;
  LODWORD(STACK[0x35D0]) = v185;
  if ((v52 & 2) != 0)
    v186 = v183;
  else
    v186 = v182;
  LODWORD(STACK[0x3508]) = v186;
  v187 = v43;
  v188 = (v43 & 1) == 0;
  v189 = LODWORD(STACK[0x3B88]) ^ v179;
  v190 = LODWORD(STACK[0x3BA0]) ^ v179;
  v191 = LODWORD(STACK[0x3AD0]) ^ v179;
  LODWORD(STACK[0x3450]) = v191;
  v192 = LODWORD(STACK[0x3BD8]) ^ v179;
  LODWORD(STACK[0x3940]) = v192;
  v193 = v179;
  LODWORD(STACK[0x3938]) = v189;
  if (v188)
    v194 = v192;
  else
    v194 = v189;
  v195 = v190;
  LODWORD(STACK[0x3948]) = v190;
  if (!v188)
  {
    v190 = v191;
    v189 = v195;
  }
  LODWORD(STACK[0x3678]) = v189;
  if (v188)
    v196 = v191;
  else
    v196 = v192;
  LODWORD(STACK[0x35A8]) = v196;
  if ((v187 & 2) != 0)
    v197 = v194;
  else
    v197 = v190;
  LODWORD(STACK[0x3A58]) = v197;
  if ((v187 & 2) != 0)
    v198 = v190;
  else
    v198 = v194;
  LODWORD(STACK[0x3A50]) = v198;
  STACK[0x3588] = v156 >> v164;
  v199 = ((unint64_t)(STACK[0x3AA8] & (v171 << v160)) >> v160) ^ ((unint64_t)(STACK[0x3AA8] & (v156 >> v164)) << v164);
  v200 = v162 & (4 * ((v199 ^ (2 * (v199 & v176))) & v176)) ^ v199 ^ (2 * (v199 & v176));
  v201 = v167 & (16 * (v200 & v176)) & v162 ^ v200;
  v202 = ((unint64_t)(STACK[0x3AB0] & v165) << v164) | ((STACK[0x3AB0] & v172) >> v146);
  v203 = v151 & (4 * ((v202 ^ (2 * (v202 & v150))) & v150)) ^ v202 ^ (2 * (v202 & v150));
  LODWORD(STACK[0x3638]) = v153;
  v204 = v153 & (16 * (v203 & v150)) & v151 ^ v203;
  v205 = ((unint64_t)(STACK[0x3A60] & (v171 << v160)) >> v160)
       + ((STACK[0x3A60] & v155) << LODWORD(STACK[0x3C68]));
  v206 = v151 & (4 * ((v205 ^ (2 * (v205 & v150))) & v150)) ^ v205 ^ (2 * (v205 & v150));
  v207 = v153 & (16 * (v206 & v150)) & v151 ^ v206;
  v208 = ((unint64_t)(STACK[0x3AB8] & v159) >> v160) | ((STACK[0x3AB8] & v155) << LODWORD(STACK[0x3C68]));
  v209 = v151 & (4 * ((v208 ^ (2 * (v208 & v150))) & v150)) ^ v208 ^ (2 * (v208 & v150));
  v210 = v153 & (16 * (v209 & v150)) & v151 ^ v209;
  v211 = STACK[0x3678];
  v212 = STACK[0x35A8];
  if ((v187 & 2) != 0)
    v213 = STACK[0x3678];
  else
    v213 = STACK[0x35A8];
  LODWORD(STACK[0x3A90]) = v213;
  if ((v52 & 1) != 0)
    v214 = STACK[0x3AA0];
  else
    v214 = STACK[0x3A00];
  if ((v52 & 1) != 0)
    v215 = STACK[0x3920];
  else
    v215 = STACK[0x3930];
  LODWORD(STACK[0x3A00]) = v215;
  if ((v52 & 1) != 0)
    v216 = STACK[0x3928];
  else
    v216 = STACK[0x3A38];
  LODWORD(STACK[0x3AA0]) = v216;
  v217 = STACK[0x3B00];
  v218 = (STACK[0x3B00] & v193) << (LODWORD(STACK[0x39F0]) - 104);
  LODWORD(STACK[0x33E0]) = v201;
  LODWORD(STACK[0x33E8]) = v210;
  if ((v52 & 1) != 0)
    v219 = v201;
  else
    v219 = v210;
  LODWORD(STACK[0x3408]) = v207;
  if ((v52 & 1) != 0)
    v220 = v210;
  else
    v220 = v207;
  LODWORD(STACK[0x3410]) = v204;
  if ((v52 & 1) != 0)
    v221 = v207;
  else
    v221 = v204;
  if ((v52 & 1) != 0)
    v222 = v204;
  else
    v222 = v201;
  if ((v52 & 2) != 0)
    v223 = v219;
  else
    v223 = v221;
  LODWORD(STACK[0x3AA8]) = v223;
  if ((v52 & 2) == 0)
    v221 = v219;
  LODWORD(STACK[0x3650]) = v221;
  v224 = STACK[0x3A48];
  if ((v52 & 2) == 0)
    v224 = STACK[0x3A40];
  LODWORD(STACK[0x38C0]) = v224;
  v225 = v217 + v193 - v218;
  LODWORD(STACK[0x3918]) = v225;
  if ((v52 & 2) != 0)
    v226 = v222;
  else
    v226 = v220;
  LODWORD(STACK[0x3620]) = v226;
  if ((v52 & 2) != 0)
    v227 = v215;
  else
    v227 = v216;
  LODWORD(STACK[0x35C0]) = v227;
  v228 = LODWORD(STACK[0x3B40]) ^ v22;
  v229 = LODWORD(STACK[0x3BA8]) ^ v22;
  LODWORD(STACK[0x3928]) = v229;
  v230 = LODWORD(STACK[0x3AD8]) ^ v22;
  LODWORD(STACK[0x3930]) = v230;
  if ((v187 & 1) != 0)
    v231 = v229;
  else
    v231 = v228;
  if ((v187 & 1) != 0)
    v232 = v225;
  else
    v232 = v230;
  if ((v187 & 1) != 0)
  {
    v233 = v228;
  }
  else
  {
    v230 = v229;
    v233 = v225;
  }
  v234 = v228;
  LODWORD(STACK[0x3920]) = v228;
  v235 = STACK[0x3978];
  if ((v187 & 2) == 0)
    v235 = STACK[0x3910];
  LODWORD(STACK[0x3A60]) = v235;
  if ((v187 & 2) != 0)
    v236 = v232;
  else
    v236 = v231;
  LODWORD(STACK[0x3A48]) = v236;
  if ((v187 & 2) == 0)
    v231 = v232;
  LODWORD(STACK[0x3A38]) = v231;
  if ((v187 & 2) != 0)
    v237 = v212;
  else
    v237 = v211;
  if ((v187 & 2) != 0)
    v238 = v230;
  else
    v238 = v233;
  LODWORD(STACK[0x3A40]) = v238;
  if ((v187 & 2) != 0)
    v239 = v233;
  else
    v239 = v230;
  LODWORD(STACK[0x3AB0]) = v239;
  v240 = STACK[0x3908];
  if ((v187 & 2) != 0)
    v240 = STACK[0x38E8];
  LODWORD(STACK[0x3518]) = v240;
  v241 = STACK[0x3A80];
  v242 = STACK[0x3A80] & 0x18;
  v243 = (LODWORD(STACK[0x3A98]) >> LODWORD(STACK[0x3688])) ^ (LODWORD(STACK[0x3A98]) << v242);
  if ((STACK[0x3A80] & 0x18) == 0)
    v243 = STACK[0x3A98];
  LODWORD(STACK[0x35A8]) = v243;
  if ((v52 & 1) != 0)
    v244 = STACK[0x35F0];
  else
    v244 = STACK[0x3980];
  if ((v52 & 1) != 0)
    v245 = STACK[0x3958];
  else
    v245 = STACK[0x3950];
  LODWORD(STACK[0x34A0]) = v245;
  if ((v52 & 1) != 0)
    v246 = STACK[0x3968];
  else
    v246 = STACK[0x3960];
  if ((v52 & 2) != 0)
    v247 = v245;
  else
    v247 = v246;
  v248 = STACK[0x3A88];
  LODWORD(STACK[0x3678]) = v237;
  v249 = (v237 >> (v248 & 0x18)) + (v237 << v242);
  LODWORD(STACK[0x3688]) = v247;
  v250 = (v247 << v242) ^ (v247 >> (v248 & 0x18));
  v251 = 982117199 * ((LODWORD(STACK[0x3938]) ^ v234) - LODWORD(STACK[0x3608]));
  v252 = -484051103 * (((v251 + HIWORD(v251)) ^ ((v251 + HIWORD(v251)) >> 8)) + LODWORD(STACK[0x3628]));
  v253 = 1064629697 * (((v252 ^ HIWORD(v252)) - ((v252 ^ HIWORD(v252)) >> 8)) ^ LODWORD(STACK[0x3658]));
  v254 = LODWORD(STACK[0x3C08]) ^ v193;
  LODWORD(STACK[0x3438]) = v254;
  v255 = v254 - v253 + (v253 | 0x8A1696F5) - ((v253 | 0x8A1696F5) ^ v253);
  if ((v248 & 0x18) == 0)
    v249 = v237;
  LODWORD(STACK[0x3418]) = v249;
  if ((v248 & 0x18) != 0)
    v256 = v250;
  else
    v256 = v247;
  LODWORD(STACK[0x3448]) = v256;
  v257 = STACK[0x3600];
  v258 = LODWORD(STACK[0x3B48]) ^ v22;
  LODWORD(STACK[0x3430]) = v258;
  v259 = LODWORD(STACK[0x3B10]) ^ v193;
  LODWORD(STACK[0x3428]) = v259;
  if ((v257 & 1) != 0)
    v260 = v255;
  else
    v260 = v259;
  if ((v257 & 1) != 0)
    v261 = v258;
  else
    v261 = v255;
  v262 = LODWORD(STACK[0x3B68]) ^ v193;
  LODWORD(STACK[0x3910]) = v262;
  v263 = LODWORD(STACK[0x3B78]) ^ v22;
  v264 = LODWORD(STACK[0x3BC0]) ^ v22;
  LODWORD(STACK[0x3908]) = v264;
  v265 = LODWORD(STACK[0x3BC8]) ^ v193;
  LODWORD(STACK[0x33C0]) = v265;
  v266 = LODWORD(STACK[0x3AF0]) ^ v22;
  LODWORD(STACK[0x3440]) = v266;
  if ((v257 & 1) != 0)
    v267 = v265;
  else
    v267 = v262;
  if ((v257 & 1) != 0)
    v268 = v262;
  else
    v268 = v264;
  LODWORD(STACK[0x33C8]) = v263;
  if ((v257 & 1) != 0)
    v269 = v264;
  else
    v269 = v263;
  if ((v257 & 1) != 0)
  {
    v270 = STACK[0x39B0];
  }
  else
  {
    v263 = v265;
    v270 = STACK[0x39A8];
  }
  if ((v257 & 1) != 0)
    v271 = v266;
  else
    v271 = v258;
  if ((v257 & 1) != 0)
    v272 = STACK[0x3A08];
  else
    v272 = STACK[0x39B8];
  if ((v257 & 1) != 0)
    v273 = v259;
  else
    v273 = v266;
  if ((v257 & 2) != 0)
    v274 = v268;
  else
    v274 = v263;
  if ((v52 & 2) != 0)
    v275 = v244;
  else
    v275 = v214;
  if ((v241 & 0x18) != 0)
    v275 = (v275 >> (v248 & 0x18)) ^ (v275 << (v241 & 0x18));
  LODWORD(STACK[0x3530]) = v275;
  v276 = (STACK[0x38F0] & 2) == 0;
  v277 = STACK[0x39F8];
  if ((STACK[0x38F0] & 2) != 0)
    v277 = STACK[0x39D8];
  LODWORD(STACK[0x3A98]) = v277;
  v278 = STACK[0x3648];
  if (v276)
    v278 = STACK[0x3630];
  v279 = STACK[0x3A18];
  v280 = STACK[0x3900];
  if ((STACK[0x3A18] & 2) != 0)
    v280 = STACK[0x38F8];
  v281 = v248 & 0x18;
  v282 = (v280 >> (v248 & 0x18)) + (v280 << (v241 & 0x18));
  if ((v248 & 0x18) == 0)
    v282 = v280;
  LODWORD(STACK[0x33D8]) = v282;
  LODWORD(STACK[0x3658]) = v274;
  v283 = __ROR4__(v274, v281);
  if ((v248 & 0x18) == 0)
    v283 = v274;
  LODWORD(STACK[0x33D0]) = v283;
  if ((v241 & 0x18) != 0)
    v278 = (v278 << (v241 & 0x18)) ^ (v278 >> v281);
  LODWORD(STACK[0x3540]) = v278;
  v284 = LODWORD(STACK[0x3AC0]) ^ v193;
  v285 = LODWORD(STACK[0x3B70]) ^ v193;
  v286 = LODWORD(STACK[0x3B80]) ^ v22;
  v287 = LODWORD(STACK[0x3BE0]) ^ v22;
  LODWORD(STACK[0x3900]) = v287;
  LODWORD(STACK[0x38F8]) = v286;
  if ((v52 & 1) != 0)
    v288 = v287;
  else
    v288 = v286;
  LODWORD(STACK[0x38F0]) = v284;
  v289 = v285;
  LODWORD(STACK[0x38E8]) = v285;
  if ((v52 & 1) != 0)
  {
    v290 = v284;
  }
  else
  {
    v285 = v284;
    v290 = v287;
  }
  if ((v52 & 1) != 0)
    v291 = v286;
  else
    v291 = v289;
  if ((v52 & 2) != 0)
    v292 = v290;
  else
    v292 = v291;
  LODWORD(STACK[0x3AB8]) = v292;
  if ((v52 & 2) == 0)
    v291 = v290;
  LODWORD(STACK[0x39F8]) = v291;
  if ((v52 & 2) != 0)
    v293 = v214;
  else
    v293 = v244;
  LODWORD(STACK[0x34F8]) = v293;
  v294 = STACK[0x3AA0];
  if ((v52 & 2) == 0)
    v294 = STACK[0x3A00];
  LODWORD(STACK[0x3590]) = v294;
  if ((v52 & 2) != 0)
    v295 = v220;
  else
    v295 = v222;
  LODWORD(STACK[0x3AA0]) = v295;
  if ((v52 & 2) != 0)
    v296 = v288;
  else
    v296 = v285;
  LODWORD(STACK[0x39D8]) = v296;
  v297 = (v257 & 2) == 0;
  if ((v257 & 2) != 0)
    v298 = v269;
  else
    v298 = v267;
  if ((v257 & 2) != 0)
  {
    v299 = STACK[0x39C0];
  }
  else
  {
    v267 = v269;
    v299 = STACK[0x39C8];
  }
  if (v297)
    v300 = v261;
  else
    v300 = v273;
  LODWORD(STACK[0x3980]) = v300;
  if (v297)
    v301 = v273;
  else
    v301 = v261;
  LODWORD(STACK[0x3978]) = v301;
  if (v297)
    v302 = v268;
  else
    v302 = v263;
  if (v297)
    v303 = v270;
  else
    v303 = v272;
  if (v297)
    v304 = v272;
  else
    v304 = v270;
  if (v297)
    v305 = v260;
  else
    v305 = v271;
  LODWORD(STACK[0x39C0]) = v305;
  if (v297)
    v306 = v271;
  else
    v306 = v260;
  LODWORD(STACK[0x3A00]) = v306;
  v307 = (v52 & 2) == 0;
  if ((v52 & 2) != 0)
    v308 = STACK[0x3640];
  else
    v308 = STACK[0x3618];
  if ((v52 & 2) != 0)
    v309 = v246;
  else
    v309 = STACK[0x34A0];
  if (v307)
    v310 = v288;
  else
    v310 = v285;
  LODWORD(STACK[0x39C8]) = v310;
  v311 = STACK[0x3510];
  if (v307)
    v311 = STACK[0x34D0];
  v313 = v241 & 0x18;
  v312 = (v241 & 0x18) == 0;
  v314 = v241;
  v315 = v267;
  LODWORD(STACK[0x3648]) = v267;
  v316 = (v267 >> v281) ^ (v267 << (v241 & 0x18));
  v317 = STACK[0x3A90];
  v318 = (LODWORD(STACK[0x3A90]) >> v281) ^ (LODWORD(STACK[0x3A90]) << v313);
  v319 = STACK[0x3A58];
  v320 = (v319 >> v281) ^ (v319 << v313);
  v321 = v308;
  LODWORD(STACK[0x3640]) = v308;
  v322 = (v308 << v313) ^ (v308 >> v281);
  v323 = STACK[0x3A98];
  v324 = (LODWORD(STACK[0x3A98]) >> v281) + (LODWORD(STACK[0x3A98]) << v313);
  v325 = v299;
  LODWORD(STACK[0x3630]) = v299;
  v326 = (v299 >> v281) + (v299 << v313);
  v327 = v304;
  LODWORD(STACK[0x3628]) = v304;
  v328 = (v304 << v313) + (v304 >> v281);
  v329 = STACK[0x3A60];
  v330 = (LODWORD(STACK[0x3A60]) >> v281) + (LODWORD(STACK[0x3A60]) << v313);
  v331 = (v311 << v313) ^ (v311 >> v281);
  if (!v312)
    v311 = v331;
  LODWORD(STACK[0x3510]) = v311;
  LODWORD(STACK[0x3608]) = v298;
  v332 = __ROR4__(v298, v281);
  if (v312)
    v333 = v298;
  else
    v333 = v332;
  if (v312)
    v334 = v315;
  else
    v334 = v316;
  LODWORD(STACK[0x3600]) = v302;
  v335 = __ROR4__(v302, v281);
  if (v312)
    v336 = v302;
  else
    v336 = v335;
  if (v312)
    v337 = v317;
  else
    v337 = v318;
  v338 = __ROR4__(STACK[0x3A50], v281);
  if (v312)
    v339 = STACK[0x3A50];
  else
    v339 = v338;
  if (v312)
    v340 = v319;
  else
    v340 = v320;
  LODWORD(STACK[0x3618]) = v309;
  v341 = __ROR4__(v309, v281);
  if (v312)
    v341 = v309;
  LODWORD(STACK[0x33F0]) = v341;
  if (v312)
    v342 = v321;
  else
    v342 = v322;
  LODWORD(STACK[0x3400]) = v342;
  if (v312)
    v343 = v323;
  else
    v343 = v324;
  LODWORD(STACK[0x3460]) = v343;
  if (v312)
    v344 = v325;
  else
    v344 = v326;
  LODWORD(STACK[0x3480]) = v344;
  if (v312)
    v345 = v327;
  else
    v345 = v328;
  LODWORD(STACK[0x3478]) = v345;
  LODWORD(STACK[0x35F0]) = v303;
  v346 = __ROR4__(v303, v281);
  if (v312)
    v346 = v303;
  LODWORD(STACK[0x34A0]) = v346;
  if (v312)
    v347 = v329;
  else
    v347 = v330;
  LODWORD(STACK[0x34D0]) = v347;
  v348 = STACK[0x3420];
  if ((v279 & 2) == 0)
    v348 = STACK[0x3470];
  v349 = LODWORD(STACK[0x33C0]) ^ LODWORD(STACK[0x33C8]);
  LODWORD(STACK[0x33C8]) = v349;
  v350 = __ROR4__(v348, v281);
  LODWORD(STACK[0x3470]) = v314 & 0x18;
  if ((v314 & 0x18) != 0)
    v348 = v350;
  v351 = STACK[0x3C78];
  v352 = LODWORD(STACK[0x33E0]) ^ (2 * (STACK[0x33E0] & LODWORD(STACK[0x3C78])));
  v353 = STACK[0x3C50];
  v354 = STACK[0x3C60];
  v355 = STACK[0x3C38];
  LODWORD(STACK[0x3420]) = ((unint64_t)(v352 & STACK[0x3C50]) << STACK[0x3C60]) | ((v352 & STACK[0x3C28]) >> STACK[0x3C38]);
  v356 = LODWORD(STACK[0x3408]) ^ (2 * (STACK[0x3408] & LODWORD(STACK[0x3C30])));
  v357 = LODWORD(STACK[0x3410]) ^ (2 * (STACK[0x3410] & LODWORD(STACK[0x3C30])));
  v358 = STACK[0x3B28];
  v359 = STACK[0x3C68];
  v360 = STACK[0x3C40];
  LODWORD(STACK[0x3410]) = ((v357 & STACK[0x3C58]) << v360)
                         + ((v357 & STACK[0x3B28]) >> v359);
  v361 = v354;
  LODWORD(STACK[0x3408]) = ((unint64_t)(v356 & v353) << v354)
                         + ((v356 & v358) >> v359);
  LODWORD(STACK[0x33E8]) ^= 2 * (STACK[0x33E8] & v351);
  v362 = STACK[0x3700] >> v355;
  v363 = v355;
  v364 = STACK[0x34A8];
  v365 = LODWORD(STACK[0x34A8]) ^ (STACK[0x36F8] | v362) ^ LODWORD(STACK[0x33D0]) ^ LODWORD(STACK[0x33D8]);
  v366 = STACK[0x3708] >> v359;
  LOBYTE(v358) = v359;
  LODWORD(v354) = LODWORD(STACK[0x34A8]) ^ (LODWORD(STACK[0x3710]) | v366) ^ v334 ^ v348;
  v367 = LODWORD(STACK[0x34A8]) ^ (LODWORD(STACK[0x3670]) | v366) ^ v336 ^ LODWORD(STACK[0x3458]);
  v368 = LODWORD(STACK[0x34A8]) ^ STACK[0x3680] ^ v362 ^ v333 ^ LODWORD(STACK[0x3468]);
  v369 = STACK[0x3C18];
  LODWORD(v362) = *(unsigned __int8 *)(STACK[0x3C18]
                                     + 4647 * ((v354 ^ 0xC4000000) >> 24)
                                     + 14331348
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647
                                                                         * ((v354 ^ 0xC4000000) >> 24)
                                                                         + 14331348)) >> 32) >> 1))
                + 117;
  v370 = 4647 * (((v368 >> 1) | ((v368 & 1) << 7)) ^ 0x40) + 15539568;
  v371 = *(_DWORD *)((char *)&STACK[0x3CA0] + ((v368 >> 22) & 0x3FC));
  v372 = *(unsigned __int8 *)(STACK[0x3C18]
                            + 4647 * (HIBYTE(v371) ^ 0xC4)
                            + 14331348
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (HIBYTE(v371) ^ 0xC4) + 14331348)) >> 32) >> 1))
       + 117;
  LODWORD(v353) = ((v372 ^ 0x12 ^ (v372 >> 2) & 0x12) + 26) | (v371 << 8);
  LODWORD(v355) = STACK[0x3730] >> v358;
  v373 = LODWORD(STACK[0x34A8]) ^ (LODWORD(STACK[0x36E0]) + (_DWORD)v355) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v367)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ (97 * (*(_BYTE *)(STACK[0x3C18] + v370 - 6784 * (((1266205 * (unint64_t)v370) >> 32) >> 1)) ^ 0xA2))), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v365 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x3CA0] + ((v354 ^ 0xC4000000) >> 16)) ^ v339;
  LODWORD(v358) = *((_DWORD *)&STACK[0x3CA0] + ((v362 ^ 0x12 ^ (v362 >> 2) & 0x12) + 26));
  v374 = STACK[0x3718] >> v363;
  v375 = STACK[0x36D8] ^ v374 ^ LODWORD(STACK[0x34A8]) ^ __ROR4__(v358, 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v368)), 8) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v367)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v365), 16) ^ LODWORD(STACK[0x3418]);
  v376 = LODWORD(STACK[0x34A8]) ^ ((STACK[0x36E8] << v360) + v374) ^ *((_DWORD *)&STACK[0x3CA0]
                                                                                   + BYTE2(v365)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v354)), 8) ^ v353 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v367), 16) ^ v337;
  v377 = (STACK[0x36F0] << v361) ^ v355 ^ LODWORD(STACK[0x34A8]) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ v354), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v367 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v368)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v365)), 8) ^ v340;
  v378 = 4647 * ((HIBYTE(v376) + 111) ^ 0x36) + 17937420;
  LOBYTE(v378) = *(_BYTE *)(STACK[0x3C18] + v378
                                          - 6784 * (((1266205 * (unint64_t)v378) >> 32) >> 1)) ^ 0xE;
  LODWORD(v374) = 4647 * ((v373 + 111) ^ 0x36) + 17937420;
  LOBYTE(v374) = *(_BYTE *)(STACK[0x3C18]
                          + v374
                          - 6784 * (((1266205 * (unint64_t)v374) >> 32) >> 1)) ^ 0xE;
  v379 = (LODWORD(STACK[0x34A8]) ^ LODWORD(STACK[0x3548])) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v375)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v373 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v376), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v377)), 8) ^ LODWORD(STACK[0x3448]);
  STACK[0x36F0] = v379;
  v380 = LODWORD(STACK[0x3558]) ^ v364 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v373)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v375), 16) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v376)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v377 >> 22) & 0x3FC)), 24) ^ LODWORD(STACK[0x33F0]);
  STACK[0x36F8] = v380;
  LODWORD(v367) = v364 ^ LODWORD(STACK[0x3568]) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v377), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + ((v378 >> 3) | (32 * v378))), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v375)), 8) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v373)) ^ LODWORD(STACK[0x3400]);
  LODWORD(STACK[0x36E0]) = v367;
  v381 = 4647 * ((BYTE3(v367) + 111) ^ 0x36) + 17937420;
  LOBYTE(v381) = *(_BYTE *)(v369 + v381 - 6784 * (((1266205 * (unint64_t)v381) >> 32) >> 1));
  v382 = LODWORD(STACK[0x3578]) ^ v364 ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v377)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ BYTE1(v376)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ ((v374 >> 3) | (32 * v374))), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v375 >> 22) & 0x3FC)), 24) ^ LODWORD(STACK[0x3500]);
  STACK[0x36E8] = v382;
  LODWORD(v375) = STACK[0x36B0];
  LODWORD(v377) = STACK[0x3BF0];
  LODWORD(STACK[0x3710]) = LODWORD(STACK[0x36B0]) ^ LODWORD(STACK[0x3BF0]);
  LODWORD(v367) = STACK[0x39D0];
  LODWORD(STACK[0x3708]) = LODWORD(STACK[0x39D0]) ^ v377;
  LODWORD(v380) = v375 ^ v377 ^ v367 ^ v377 ^ ((v375 ^ v367) >> 6) ^ *((_DWORD *)&STACK[0x3CA0]
                                                                                                 + BYTE2(v379)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + (((v381 ^ 0xE) >> 3) | (32 * (v381 ^ 0xE)))), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v380), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v382)), 8);
  LODWORD(v353) = STACK[0x3450];
  v383 = STACK[0x3938];
  v384 = STACK[0x3950];
  LODWORD(v379) = STACK[0x3960];
  LODWORD(v382) = STACK[0x3958];
  v385 = STACK[0x3968];
  v386 = STACK[0x34B8];
  LODWORD(v355) = STACK[0x34B0];
  v387 = STACK[0x34C8];
  v388 = STACK[0x34C0];
  v389 = STACK[0x39A8];
  LODWORD(v369) = STACK[0x39B0];
  v390 = STACK[0x39B8];
  LODWORD(v374) = LODWORD(STACK[0x3C20]) ^ 0x6B8D9D50 ^ LODWORD(STACK[0x3B90]) ^ LODWORD(STACK[0x3910]) ^ LODWORD(STACK[0x3908]) ^ v349 ^ LODWORD(STACK[0x3948]) ^ LODWORD(STACK[0x3450]) ^ LODWORD(STACK[0x3940]) ^ LODWORD(STACK[0x3938]) ^ LODWORD(STACK[0x3950]) ^ LODWORD(STACK[0x3958]) ^ LODWORD(STACK[0x3960]) ^ LODWORD(STACK[0x3968]) ^ LODWORD(STACK[0x34B8]) ^ LODWORD(STACK[0x34B0]) ^ LODWORD(STACK[0x34C0]) ^ LODWORD(STACK[0x34C8]) ^ LODWORD(STACK[0x3A08]) ^ LODWORD(STACK[0x39A8]) ^ LODWORD(STACK[0x39B0]) ^ LODWORD(STACK[0x39B8]);
  v391 = STACK[0x34E0];
  LODWORD(v354) = STACK[0x34D8];
  v392 = STACK[0x34F0];
  v393 = STACK[0x34E8];
  LODWORD(v377) = STACK[0x3490];
  v394 = STACK[0x3C58];
  LODWORD(v374) = v374 ^ LODWORD(STACK[0x34D8]) ^ LODWORD(STACK[0x34E0]) ^ LODWORD(STACK[0x34F0]) ^ LODWORD(STACK[0x34E8]) ^ LODWORD(STACK[0x38F0]) ^ LODWORD(STACK[0x38E8]) ^ LODWORD(STACK[0x38F8]) ^ LODWORD(STACK[0x3900]) ^ LODWORD(STACK[0x3970]) ^ LODWORD(STACK[0x3430]) ^ LODWORD(STACK[0x3440]) ^ LODWORD(STACK[0x3428]) ^ LODWORD(STACK[0x3438]) ^ LODWORD(STACK[0x3920]) ^ LODWORD(STACK[0x3928]) ^ LODWORD(STACK[0x3930]) ^ LODWORD(STACK[0x3490]) ^ ((STACK[0x33E8] & STACK[0x3C58]) << v360) ^ LODWORD(STACK[0x3410]) ^ ((STACK[0x33E8] & STACK[0x3C28]) >> STACK[0x3C38]) ^ LODWORD(STACK[0x3420]);
  LODWORD(v368) = LODWORD(STACK[0x39E0]) ^ 0x10B50F5C;
  LODWORD(STACK[0x3730]) = v368;
  LODWORD(v375) = v374 ^ LODWORD(STACK[0x3408]) ^ v368 ^ LODWORD(STACK[0x3918]);
  LODWORD(STACK[0x3700]) = v375;
  LODWORD(v374) = v368 ^ LODWORD(STACK[0x39E8]);
  LODWORD(STACK[0x39D0]) = v374;
  LODWORD(STACK[0x36D8]) = v380 + 1605904631 * (v374 - v375);
  LODWORD(v373) = (LODWORD(STACK[0x39F0]) - 9829) | 0x28;
  LODWORD(STACK[0x3718]) = v373;
  LODWORD(v367) = LODWORD(STACK[0x3BC8]) ^ LODWORD(STACK[0x3BC0]) ^ LODWORD(STACK[0x3B78]) ^ LODWORD(STACK[0x3AD0]) ^ LODWORD(STACK[0x3BD8]) ^ LODWORD(STACK[0x3B88]) ^ LODWORD(STACK[0x3B50]) ^ LODWORD(STACK[0x3AE8]) ^ LODWORD(STACK[0x3AC8]) ^ LODWORD(STACK[0x3BF8]) ^ LODWORD(STACK[0x3AE0]) ^ LODWORD(STACK[0x3B08]) ^ LODWORD(STACK[0x3BE8]) ^ LODWORD(STACK[0x3BB8]) ^ LODWORD(STACK[0x3BB0]) ^ LODWORD(STACK[0x3AF8]);
  LODWORD(v380) = LODWORD(STACK[0x3B48]) ^ LODWORD(STACK[0x3AF0]);
  v395 = STACK[0x3B10];
  v396 = STACK[0x3C08];
  LODWORD(STACK[0x3C20]) ^= v380 ^ LODWORD(STACK[0x3B10]) ^ LODWORD(STACK[0x3C08]) ^ LODWORD(STACK[0x3B40]) ^ LODWORD(STACK[0x3BA8]) ^ LODWORD(STACK[0x3B68]) ^ LODWORD(STACK[0x3BA0]) ^ LODWORD(STACK[0x3B58]) ^ LODWORD(STACK[0x3B60]) ^ LODWORD(STACK[0x3BF0]) ^ LODWORD(STACK[0x3B30]) ^ LODWORD(STACK[0x3B38]) ^ LODWORD(STACK[0x3B98]) ^ LODWORD(STACK[0x3AC0]) ^ LODWORD(STACK[0x3B70]) ^ LODWORD(STACK[0x3B80]) ^ LODWORD(STACK[0x3BE0]) ^ LODWORD(STACK[0x3B90]) ^ LODWORD(STACK[0x3AD8]) ^ LODWORD(STACK[0x3C00]);
  v397 = v367 ^ LODWORD(STACK[0x3BD0]) ^ LODWORD(STACK[0x3B00]);
  LODWORD(v374) = LODWORD(STACK[0x3908]) ^ LODWORD(STACK[0x3910]) ^ LODWORD(STACK[0x33C8]) ^ LODWORD(STACK[0x3948]) ^ v353 ^ LODWORD(STACK[0x3940]) ^ v383 ^ v384 ^ v382 ^ v379 ^ v385 ^ v355 ^ v386 ^ v388 ^ v387 ^ LODWORD(STACK[0x3A08]) ^ v389 ^ v369 ^ v390 ^ v354 ^ v391 ^ v392 ^ v393 ^ LODWORD(STACK[0x38F0]) ^ LODWORD(STACK[0x38E8]) ^ LODWORD(STACK[0x38F8]) ^ LODWORD(STACK[0x3900]) ^ LODWORD(STACK[0x3488]);
  v398 = v380 ^ v377;
  v399 = (v374 + LODWORD(STACK[0x3498]) - 2 * (v374 & LODWORD(STACK[0x3498]))) ^ LODWORD(STACK[0x3970]);
  v400 = (v380 ^ v377) & 0x100000;
  v401 = v373 - v400 - 9260;
  if ((v399 & v400) != 0)
    v400 = v401;
  v402 = LODWORD(STACK[0x36E0]) ^ 0xC4;
  v403 = STACK[0x3C18];
  v404 = v396 ^ v395 ^ LODWORD(STACK[0x3920]) ^ LODWORD(STACK[0x3928]) ^ LODWORD(STACK[0x3930]) ^ v398 & 0xFFEFFFFF ^ LODWORD(STACK[0x3918]) ^ (v400 + v399);
  v405 = *(unsigned __int8 *)(STACK[0x3C18]
                            + 4647 * (LODWORD(STACK[0x36E0]) ^ 0xC4)
                            + 14331348
                            - 6784
                            * (((1266205
                                             * (unint64_t)(4647
                                                                * (LODWORD(STACK[0x36E0]) ^ 0xC4u)
                                                                + 14331348)) >> 32) >> 1))
       + 117;
  v406 = v364 ^ STACK[0x3720] ^ ((unint64_t)(v394 & STACK[0x3770]) << STACK[0x3C60]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((STACK[0x36F0] >> 22) & 0x3FC)), 24) ^ LODWORD(STACK[0x3538]) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + ((v405 ^ 0x12 ^ (v405 >> 2) & 0x12) + 26)), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(STACK[0x36F8])), 8) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(STACK[0x36E8]));
  v407 = STACK[0x3C40];
  v408 = STACK[0x3660];
  v409 = STACK[0x36D0];
  v410 = v364 ^ LODWORD(STACK[0x3660]) ^ LODWORD(STACK[0x36D0]) ^ (((STACK[0x3C50] & STACK[0x3780]) << LODWORD(STACK[0x3C40]))
                                                                 + LODWORD(STACK[0x3728])) ^ LODWORD(STACK[0x3460]) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v402)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((STACK[0x36F8] >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(STACK[0x36F0])), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + STACK[0x36E8]), 16);
  v411 = v364 ^ (STACK[0x3870] + (STACK[0x3768] >> LODWORD(STACK[0x3C68]))) ^ (1242990525 * (v397 ^ 0x57B7F3F)) ^ (1242990525 * (LODWORD(STACK[0x3C20]) ^ 0x57B7F3F ^ v404)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((STACK[0x36E8] >> 22) & 0x3FC)), 24) ^ LODWORD(STACK[0x3550]) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + STACK[0x36F0]), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v402)), 8) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(STACK[0x36F8]));
  v412 = v364 ^ (LODWORD(STACK[0x3878]) + (STACK[0x3778] >> STACK[0x3C38])) ^ LODWORD(STACK[0x3560]) ^ LODWORD(STACK[0x36D8]);
  v413 = 4647 * ((((v412 & 1) << 7) | (v412 >> 1)) ^ 0x40) + 15539568;
  v414 = v412 ^ 0xFE0000u;
  LOBYTE(v412) = *(_BYTE *)(STACK[0x3C18]
                          + 4647 * BYTE2(v414)
                          + 13123128
                          - 6784
                          * (((1266205 * (unint64_t)(4647 * BYTE2(v414) + 13123128)) >> 32) >> 1))
               - 71;
  v415 = v412 ^ ((_BYTE)v412 << 6) ^ (4 * v412);
  v416 = v364 ^ ((STACK[0x3740] << LODWORD(STACK[0x3C40])) | LODWORD(STACK[0x3880])) ^ LODWORD(STACK[0x3478]) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v406), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v414)), 8) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v410)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v411 >> 22) & 0x3FC)), 24);
  v417 = STACK[0x3C60];
  v418 = STACK[0x3C18];
  v419 = v364 ^ ((STACK[0x3738] << STACK[0x3C60]) | STACK[0x3888]) ^ LODWORD(STACK[0x3480]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v406 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + (97 * (*(_BYTE *)(STACK[0x3C18] + v413 - 6784 * (((1266205 * (unint64_t)v413) >> 32) >> 1)) ^ 0xA2))), 16) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v411)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v410)), 8);
  v420 = v364 ^ LODWORD(STACK[0x35D8]) ^ LODWORD(STACK[0x34A0]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0]+ ((v414 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v406)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v411)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v410), 16);
  v421 = v364 ^ LODWORD(STACK[0x35E0]) ^ LODWORD(STACK[0x3598]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0]+ ((v410 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x3CA0]+ ((v415 ^ 0xFE) + 26)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v406)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v411), 16);
  LODWORD(v411) = 4647 * (((v419 >> 1) & 0x80 | ((unsigned __int16)v419 >> 9)) ^ 0x40) + 15539568;
  HIDWORD(v422) = *(_DWORD *)((char *)&STACK[0x3CA0] + ((v419 >> 22) & 0x3FC));
  LODWORD(v422) = HIDWORD(v422);
  v423 = LODWORD(STACK[0x3708])
       - LODWORD(STACK[0x3710])
       + ((v422 >> 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v420), 16) ^ *((_DWORD *)&STACK[0x3CA0]
                                                                                             + BYTE2(v416)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v421)), 8));
  LODWORD(v410) = -2071480443 * (LODWORD(STACK[0x3C20]) ^ v397);
  v424 = v364 ^ LODWORD(STACK[0x3748]);
  LODWORD(STACK[0x3C00]) = v424;
  v425 = v424 ^ v408 ^ v409 ^ LODWORD(STACK[0x34D0]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v421 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ (97* (*(_BYTE *)(v403+ v411- 6784* (((1266205 * (unint64_t)v411) >> 32) >> 1)) ^ 0xA2))), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ v416), 16) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v420));
  v426 = STACK[0x3988];
  v427 = v364 ^ (STACK[0x3990] + LODWORD(STACK[0x3988]));
  v428 = v427 ^ LODWORD(STACK[0x35A0]) ^ v423;
  v429 = STACK[0x38A8];
  v430 = v364 ^ (LODWORD(STACK[0x38A8]) | STACK[0x3A78]) ^ v410 ^ (-2071480443 * v404) ^ LODWORD(STACK[0x35B0]) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v421)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v419), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v416 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v420)), 8);
  v431 = v364 ^ LODWORD(STACK[0x3750]) ^ (1870827051 * LODWORD(STACK[0x39D0])) ^ (1870827051 * LODWORD(STACK[0x3700])) ^ LODWORD(STACK[0x35B8]) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v416)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v421), 16) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v419)) ^ HIBYTE(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v420 >> 22) & 0x3FC))) ^ (*(_DWORD *)((char *)&STACK[0x3CA0] + ((v420 >> 22) & 0x3FC)) << 8);
  v432 = 4647
       * ((((v427 ^ LODWORD(STACK[0x35A0]) ^ v423) >> 1) & 0x80 | ((unsigned __int16)(v427 ^ LOWORD(STACK[0x35A0]) ^ v423) >> 9)) ^ 0x40)
       + 15539568;
  HIDWORD(v422) = *((_DWORD *)&STACK[0x3CA0] + BYTE1(v430));
  LODWORD(v422) = HIDWORD(v422);
  LODWORD(v419) = (v422 >> 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v425), 16);
  HIDWORD(v422) = *((_DWORD *)&STACK[0x3CA0] + v430);
  LODWORD(v422) = HIDWORD(v422);
  v433 = v422 >> 16;
  HIDWORD(v422) = *(_DWORD *)((char *)&STACK[0x3CA0] + ((v428 >> 22) & 0x3FC));
  LODWORD(v422) = HIDWORD(v422);
  v434 = v433 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v425 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x3CA0]
                                                                                             + BYTE2(v431)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + (97 * (*(_BYTE *)(v403 + v432 - 6784 * (((1266205 * (unint64_t)v432) >> 32) >> 1)) ^ 0xA2))), 8);
  LODWORD(v420) = (v422 >> 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v431), 16) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v430)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v425)), 8);
  v435 = v419 ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v428)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v431 >> 22) & 0x3FC)), 24);
  LODWORD(v425) = *((_DWORD *)&STACK[0x3CA0] + BYTE2(v425)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0]+ ((v430 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v431)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ v428), 16);
  LOBYTE(v431) = STACK[0x3A88];
  v437 = v431 & 0x18;
  v436 = (STACK[0x3A88] & 0x18) == 0;
  v438 = STACK[0x3470];
  LODWORD(STACK[0x3C08]) = (LODWORD(STACK[0x3AB8]) << LODWORD(STACK[0x3470]))
                         + (LODWORD(STACK[0x3AB8]) >> (v431 & 0x18));
  v439 = STACK[0x3978];
  LODWORD(STACK[0x3BF0]) = (LODWORD(STACK[0x3978]) >> (v431 & 0x18)) ^ (LODWORD(STACK[0x3978]) << v438);
  v440 = STACK[0x3980];
  LODWORD(STACK[0x3BD8]) = (LODWORD(STACK[0x3980]) >> (v431 & 0x18)) ^ (LODWORD(STACK[0x3980]) << v438);
  LODWORD(STACK[0x3BD0]) = (LODWORD(STACK[0x3AB0]) << v438) ^ (LODWORD(STACK[0x3AB0]) >> (v431 & 0x18));
  LODWORD(STACK[0x3BC8]) = (LODWORD(STACK[0x3AA0]) >> (v431 & 0x18)) + (LODWORD(STACK[0x3AA0]) << v438);
  LODWORD(STACK[0x3BB8]) = (LODWORD(STACK[0x3AA8]) << v438) + (LODWORD(STACK[0x3AA8]) >> (v431 & 0x18));
  v441 = v420;
  LODWORD(STACK[0x3B70]) = v420;
  v442 = v425;
  LODWORD(STACK[0x3B80]) = v425;
  v443 = v425 - 400253566 + (((v435 ^ ((v434 ^ 0x1498C1C2) - 990268656)) + 25285382 - v420) ^ 0x4FFDF204);
  v444 = __ROR4__(STACK[0x3508], v431 & 0x18);
  if (v436)
    v445 = STACK[0x3508];
  else
    v445 = v444;
  v446 = (LODWORD(STACK[0x34F8]) << v438) + (LODWORD(STACK[0x34F8]) >> v437);
  v447 = STACK[0x3898] ^ LODWORD(STACK[0x3788]) ^ v364 ^ LODWORD(STACK[0x3510]);
  if (v436)
    v446 = STACK[0x34F8];
  v448 = v364 ^ (LODWORD(STACK[0x3890]) | LODWORD(STACK[0x3758])) ^ v446;
  v449 = (LODWORD(STACK[0x3890]) + STACK[0x3798]) ^ LODWORD(STACK[0x3530]);
  v450 = (STACK[0x3898] | STACK[0x3760]) ^ v445;
  if (v436)
    v451 = STACK[0x3520];
  else
    v451 = (LODWORD(STACK[0x3520]) << v438) ^ (LODWORD(STACK[0x3520]) >> v437);
  v452 = (LODWORD(STACK[0x3528]) << v438) + (LODWORD(STACK[0x3528]) >> v437);
  if (v436)
    v452 = STACK[0x3528];
  v453 = STACK[0x38A0];
  v454 = (STACK[0x37A8] << v407) ^ LODWORD(STACK[0x38A0]) ^ v364 ^ LODWORD(STACK[0x35C8]);
  v455 = v434 ^ v364;
  LODWORD(STACK[0x3B68]) = v455;
  v456 = v442 ^ v448;
  v457 = v455 ^ v450;
  v458 = v454 ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v457)) ^ HIBYTE(*(_DWORD *)((char *)&STACK[0x3CA0]
                                                                             + ((v456 >> 22) & 0x3FC))) ^ (*(_DWORD *)((char *)&STACK[0x3CA0] + ((v456 >> 22) & 0x3FC)) << 8);
  v459 = v435 ^ v364;
  LODWORD(STACK[0x3B78]) = v435 ^ v364;
  v460 = v447 ^ v441;
  v461 = v459 ^ v449;
  v462 = v458 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v461)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ (v447 ^ v441)), 16);
  v463 = STACK[0x37B0] << v417;
  v464 = STACK[0x38D0];
  v465 = v364 ^ (v463 | STACK[0x38D0]) ^ v452 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0]+ ((v457 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x3CA0]+ BYTE2(v461)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v460)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v456), 16);
  v466 = STACK[0x3820];
  v467 = v364 ^ (LODWORD(STACK[0x3820]) | STACK[0x38D0]) ^ LODWORD(STACK[0x3540]) ^ *((_DWORD *)&STACK[0x3CA0]
                                                                                                  + BYTE2(v460)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v457), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v456)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v461 >> 22) & 0x3FC)), 24);
  LODWORD(v461) = v364 ^ (STACK[0x38C8] + v453) ^ v451 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v460 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v461), 16);
  v468 = __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v457)), 8);
  v469 = v461 ^ v468 ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v456));
  v470 = v429 ^ v426;
  v471 = v364 ^ (v429 | LODWORD(STACK[0x38D8])) ^ LODWORD(STACK[0x35E8]) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v465)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + (v461 ^ v468 ^ *((_BYTE *)&STACK[0x3CA0] + 4 * BYTE2(v456)))), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v462 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v467)), 8);
  v472 = v364 ^ LODWORD(STACK[0x37B8]) ^ LODWORD(STACK[0x35F8]) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v469)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v462)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v465), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v467 >> 22) & 0x3FC)), 24);
  v473 = STACK[0x38E0];
  v474 = v364 ^ (STACK[0x38E0] | STACK[0x37C0]) ^ LODWORD(STACK[0x3610]) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v462), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v465 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v467)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v469)), 8);
  v475 = v427 ^ LODWORD(STACK[0x35A8]) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v465)), 8) ^ *((_DWORD *)&STACK[0x3CA0]
                                                                                                  + BYTE2(v462)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v469 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v467), 16);
  if (v436)
    v476 = STACK[0x3518];
  else
    v476 = (LODWORD(STACK[0x3518]) << v438) + (LODWORD(STACK[0x3518]) >> v437);
  LODWORD(STACK[0x3BF8]) = v443;
  v477 = v443 ^ LODWORD(STACK[0x35C0]);
  v478 = __ROR4__(v477, v437);
  if (v436)
  {
    v479 = v443 ^ LODWORD(STACK[0x3590]);
  }
  else
  {
    v477 = v478;
    v479 = ((v443 ^ LODWORD(STACK[0x3590])) << v438) ^ ((v443 ^ LODWORD(STACK[0x3590])) >> v437);
  }
  LODWORD(STACK[0x3C20]) = v479;
  if (v436)
    v480 = v443 ^ LODWORD(STACK[0x35D0]);
  else
    v480 = ((v443 ^ LODWORD(STACK[0x35D0])) >> v437) ^ ((v443 ^ LODWORD(STACK[0x35D0])) << v438);
  LODWORD(STACK[0x3B50]) = v480;
  v481 = 4647 * (((v475 >> 17) & 0x80 | (v475 >> 25)) ^ 0x40) + 15539568;
  v482 = *(unsigned __int8 *)(v418
                            + 4647 * (BYTE1(v475) ^ 0xC4)
                            + 14331348
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (BYTE1(v475) ^ 0xC4u) + 14331348)) >> 32) >> 1))
       + 117;
  v483 = v364 ^ (v473 | STACK[0x3A70]) ^ LODWORD(STACK[0x3698]) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0]+ ((v472 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ v474), 16) ^ *((_DWORD *)&STACK[0x3CA0]+ BYTE2(v475)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v471)), 8);
  LODWORD(STACK[0x3BC0]) = v364 ^ v470;
  v484 = v364 ^ v470 ^ LODWORD(STACK[0x36A0]) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v474)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ BYTE1(v472)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v471 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v475), 16);
  v485 = STACK[0x3790] ^ LODWORD(STACK[0x3998]) ^ v364 ^ v476 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v472), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ (97* (*(_BYTE *)(v418 + v481 - 6784 * (((1266205 * (unint64_t)v481) >> 32) >> 1)) ^ 0xA2))), 24) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v471)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v474)), 8);
  v486 = LODWORD(STACK[0x37A0]) ^ STACK[0x3A78] ^ v364 ^ LODWORD(STACK[0x36A8]) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ v471), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v474 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + ((v482 ^ 0x12 ^ (v482 >> 2) & 0x12) + 26)), 8) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v472));
  LODWORD(STACK[0x3BA8]) = v484;
  v487 = BYTE1(v483);
  LODWORD(STACK[0x3B98]) = v483;
  LODWORD(STACK[0x3B90]) = v485;
  v488 = BYTE2(v486);
  LODWORD(STACK[0x3B88]) = v486;
  v489 = 465 * HIBYTE(v486) + 123225 - 524 * ((8196503 * (unint64_t)(465 * HIBYTE(v486) + 123225)) >> 32);
  v490 = STACK[0x3C60];
  v491 = ((STACK[0x3570] & STACK[0x3C48]) >> STACK[0x3C60]) ^ ((unint64_t)(STACK[0x3C48] & STACK[0x3588]) << STACK[0x3C38]);
  v492 = STACK[0x3B18] & (4 * ((v491 ^ (2 * (v491 & STACK[0x3C30]))) & STACK[0x3C30])) ^ v491 ^ (2
                                                                                               * (v491 & STACK[0x3C30]));
  v493 = *((_DWORD *)&STACK[0x4900]
         + (465 * v484
                        + 123225
                        - 524
                        * ((8196503 * (unint64_t)(465 * v484 + 123225)) >> 32)));
  v494 = STACK[0x3580] & (16 * (v492 & STACK[0x3C30])) & LODWORD(STACK[0x3B18]) ^ v492;
  v495 = STACK[0x3A68];
  v496 = LODWORD(STACK[0x3850]) ^ LODWORD(STACK[0x3A68]);
  LODWORD(STACK[0x3BE0]) = v496;
  v497 = v496 ^ 0x8D8D8D8D ^ v494;
  LODWORD(STACK[0x3BE8]) = v497;
  v498 = v497 ^ v477 ^ __ROR4__(v493, 8) ^ __ROR4__(*((_DWORD *)&STACK[0x4900]+ (465 * BYTE2(v483)+ 123225- 524* ((8196503* (unint64_t)(465 * BYTE2(v483)+ 123225)) >> 32))), 24) ^ *((_DWORD *)&STACK[0x4900]+ (465 * BYTE1(v485)+ 123225- 524* ((8196503* (unint64_t)(465 * BYTE1(v485)+ 123225)) >> 32))) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v489), 16);
  v499 = STACK[0x3C08];
  if (v436)
  {
    v499 = STACK[0x3AB8];
    v500 = v439;
  }
  else
  {
    v500 = STACK[0x3BF0];
  }
  v501 = STACK[0x3BD8];
  if (v436)
    v501 = v440;
  LODWORD(STACK[0x3B58]) = v501;
  v502 = __ROR4__(STACK[0x39C0], v437);
  if (v436)
    v502 = STACK[0x39C0];
  v503 = __ROR4__(STACK[0x3A38], v437);
  if (v436)
    v503 = STACK[0x3A38];
  LODWORD(STACK[0x3B60]) = v503;
  v504 = STACK[0x3AB0];
  if (!v436)
    v504 = STACK[0x3BD0];
  LODWORD(STACK[0x3BA0]) = v504;
  v505 = __ROR4__(STACK[0x3A40], v437);
  if (v436)
    v505 = STACK[0x3A40];
  LODWORD(STACK[0x3BB0]) = v505;
  v506 = STACK[0x3AA8];
  if (!v436)
    v506 = STACK[0x3BB8];
  LODWORD(STACK[0x3C08]) = v506;
  v507 = STACK[0x3AA0];
  if (!v436)
    v507 = STACK[0x3BC8];
  LODWORD(STACK[0x3C48]) = v507;
  v508 = STACK[0x3A80];
  if ((STACK[0x3A80] & 0x18) != 0)
    v498 = (v498 >> (STACK[0x3A80] & 0x18)) ^ (v498 << v437);
  LODWORD(STACK[0x3BF0]) = v498;
  v509 = LODWORD(STACK[0x3848]) ^ v495;
  LODWORD(STACK[0x3BD0]) = v509;
  v510 = *((_DWORD *)&STACK[0x4900]
         + (465 * v488
                        + 123225
                        - 524 * ((8196503 * (unint64_t)(465 * v488 + 123225)) >> 32)));
  v511 = v509 ^ v494 ^ 0x3E3E3E3E;
  LODWORD(STACK[0x3BC8]) = v511;
  v512 = v511 ^ LODWORD(STACK[0x3B50]) ^ __ROR4__(v510, 24) ^ *((_DWORD *)&STACK[0x4900]
                                                              + (465 * v487
                                                                             + 123225
                                                                             - 524
                                                                             * ((8196503
                                                                               * (unint64_t)(465 * v487
                                                                                                  + 123225)) >> 32))) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (465 * HIBYTE(v484) + 123225 - 524 * ((8196503 * (unint64_t)(465 * HIBYTE(v484) + 123225)) >> 32))), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (465 * v485 + 123225 - 524 * ((8196503 * (unint64_t)(465 * v485 + 123225)) >> 32))), 8);
  v513 = __ROR4__(v512, v508 & 0x18);
  if ((v508 & 0x18) != 0)
    v512 = v513;
  LODWORD(STACK[0x3BD8]) = v512;
  v514 = (v508 & 0x18) == 0;
  v515 = (LODWORD(STACK[0x39D8]) >> v437) ^ (LODWORD(STACK[0x39D8]) << (v508 & 0x18));
  if ((v508 & 0x18) == 0)
    v515 = STACK[0x39D8];
  v516 = LODWORD(STACK[0x3B68]) ^ ((STACK[0x37F0] << v407) + LODWORD(STACK[0x37C8])) ^ v515;
  if ((v508 & 0x18) != 0)
    v517 = (LODWORD(STACK[0x39C8]) >> v437) ^ (LODWORD(STACK[0x39C8]) << (v508 & 0x18));
  else
    v517 = STACK[0x39C8];
  v518 = LODWORD(STACK[0x3B70]) ^ v364 ^ ((STACK[0x37F8] << v490) | STACK[0x37D0]) ^ v517;
  v519 = LODWORD(STACK[0x3B78]) ^ (LODWORD(STACK[0x38B0]) + LODWORD(STACK[0x37C8])) ^ v499 ^ 0x9Au;
  v520 = __ROR4__(STACK[0x39F8], v437);
  if ((v508 & 0x18) == 0)
    v520 = STACK[0x39F8];
  v521 = STACK[0x38B8] ^ STACK[0x37D0] ^ v364 ^ v520 ^ LODWORD(STACK[0x3B80]);
  v522 = STACK[0x3A10];
  v523 = (LODWORD(STACK[0x3A10]) >> v437) ^ (LODWORD(STACK[0x3A10]) << (v508 & 0x18));
  v524 = STACK[0x3A00];
  LODWORD(STACK[0x3BB8]) = v508 & 0x18;
  v525 = v524;
  v526 = (v524 >> v437) ^ (v524 << (v508 & 0x18));
  v527 = (LODWORD(STACK[0x3A48]) >> v437) ^ (LODWORD(STACK[0x3A48]) << (v508 & 0x18));
  v528 = 4647 * (((v521 >> 1) & 0x80 | ((unsigned __int16)v521 >> 9)) ^ 0x40) + 15539568;
  v529 = 4647 * v519
       + 25186740
       - 6784
       * (((1266205 * (unint64_t)(4647 * v519 + 25186740)) >> 32) >> 1);
  v530 = *(_BYTE *)(v418 + v528 - 6784 * (((1266205 * (unint64_t)v528) >> 32) >> 1)) ^ 0xA2;
  v531 = __ROR4__(STACK[0x3A20], v437);
  if (v514)
    v531 = STACK[0x3A20];
  v532 = v364 ^ LODWORD(STACK[0x3818]) ^ v531 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v519)), 8) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v521 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v516)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v518), 16);
  if (v514)
    v523 = v522;
  v533 = v364 ^ (STACK[0x38C8] | LODWORD(STACK[0x37D8])) ^ v523 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ BYTE1(v518)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ v521), 16) ^ *((_DWORD *)&STACK[0x3CA0]+ BYTE2(v519)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v516 >> 22) & 0x3FC)), 24);
  v534 = __ROR4__(STACK[0x3A28], v437);
  if (v514)
    v534 = STACK[0x3A28];
  v535 = v364 ^ (v466 + (_DWORD)v464) ^ v534 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v516), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + (97 * v530)), 8) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v518)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v519 >> 22) & 0x3FC)), 24);
  v536 = __ROR4__(STACK[0x3A30], v437);
  if (v514)
    v536 = STACK[0x3A30];
  v537 = v466 ^ STACK[0x37E0] ^ v364 ^ v536 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v516)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + ((*(_BYTE *)(v418 + v529) ^ 0xC3) + 85)), 16) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v521)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v518 >> 22) & 0x3FC)), 24);
  if (v514)
    v526 = v525;
  v538 = v364 ^ LODWORD(STACK[0x37E8]) ^ v526 ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v533 >> 22) & 0x3FC)), 24) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v535)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v537)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v532), 16);
  v539 = v364 ^ LODWORD(STACK[0x3828]) ^ v500 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v533), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v535 >> 22) & 0x3FC)), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v532)), 8) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v537));
  v540 = (LODWORD(STACK[0x3C00]) ^ LODWORD(STACK[0x3B58])) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v535)), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ v537), 16) ^ *((_DWORD *)&STACK[0x3CA0]+ BYTE2(v533)) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v532 >> 22) & 0x3FC)), 24);
  v541 = v539 ^ 0xC400u;
  v542 = v364 ^ (STACK[0x3990] + LODWORD(STACK[0x38D8])) ^ v502 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v533)), 8) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v532)) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + v535), 16) ^ __ROR4__(*(_DWORD *)((char *)&STACK[0x3CA0] + ((v537 >> 22) & 0x3FC)), 24);
  v543 = 4647 * (((v542 >> 17) & 0x80 | (v542 >> 25)) ^ 0xD9) + 19140993;
  v544 = *(unsigned __int8 *)(v418
                            + 4647 * BYTE1(v541)
                            + 14331348
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * BYTE1(v541) + 14331348)) >> 32) >> 1))
       + 117;
  v545 = *((_DWORD *)&STACK[0x3CA0]
         + (97
                           * (*(_BYTE *)(v418
                                       + v543
                                       - 6784 * (((1266205 * (unint64_t)v543) >> 32) >> 1)) ^ 0x27)));
  v546 = *((_DWORD *)&STACK[0x3CA0] + BYTE1(v540));
  v547 = *((_DWORD *)&STACK[0x3CA0] + BYTE1(v538));
  v548 = *((_DWORD *)&STACK[0x3CA0] + ((v544 ^ 0x12 ^ (v544 >> 2) & 0x12) + 26));
  v549 = *((_DWORD *)&STACK[0x3CA0] + BYTE2(v538));
  v550 = (((*(_BYTE *)(v418
                                      + 4647 * (HIBYTE(v545) ^ 0xB8)
                                      + 9544938
                                      - 6784
                                      * (((1266205
                                                       * (unint64_t)(4647 * (HIBYTE(v545) ^ 0xB8) + 9544938)) >> 32) >> 1))
                           - 87) ^ 0xFB)
                         + 85) | (v545 << 8);
  v551 = *(_DWORD *)((char *)&STACK[0x3CA0] + ((v541 >> 22) & 0x3FC));
  v552 = *(_DWORD *)((char *)&STACK[0x3CA0] + ((v538 >> 22) & 0x3FC));
  v553 = *((_DWORD *)&STACK[0x3CA0] + v538);
  v554 = *((_DWORD *)&STACK[0x3CA0] + v540);
  v555 = *((_DWORD *)&STACK[0x3CA0] + BYTE2(v541));
  v556 = *(_DWORD *)((char *)&STACK[0x3CA0] + ((v540 >> 22) & 0x3FC));
  v557 = v364 ^ (LODWORD(STACK[0x3800]) + LODWORD(STACK[0x3998])) ^ LODWORD(STACK[0x3B60]) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ v539), 16) ^ __ROR4__(v547, 8) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v540)) ^ v550;
  v558 = v473 + STACK[0x3A70];
  if (v514)
    v527 = STACK[0x3A48];
  v559 = STACK[0x3810] ^ STACK[0x3A78] ^ v364 ^ v527 ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0] + BYTE1(v542)), 8) ^ __ROR4__(v552, 24) ^ __ROR4__(v554, 16) ^ v555;
  v560 = v364 ^ v558 ^ LODWORD(STACK[0x3BA0]) ^ __ROR4__(v546, 8) ^ __ROR4__(v551, 24) ^ __ROR4__(v553, 16) ^ *((_DWORD *)&STACK[0x3CA0] + BYTE2(v542));
  v561 = LODWORD(STACK[0x3BC0]) ^ LODWORD(STACK[0x3BB0]) ^ v549 ^ __ROR4__(v548, 8) ^ __ROR4__(*((_DWORD *)&STACK[0x3CA0]+ v542), 16) ^ __ROR4__(v556, 24);
  v562 = 4647 * ((LODWORD(STACK[0x3B88]) + 111) ^ 0x36) + 17937420;
  LOBYTE(v562) = *(_BYTE *)(v418 + v562 - 6784 * (((1266205 * (unint64_t)v562) >> 32) >> 1)) ^ 0xE;
  v563 = 465 * BYTE1(LODWORD(STACK[0x3B88])) + 123225;
  v564 = 465 * LODWORD(STACK[0x3B98]) + 123225;
  v565 = 465 * BYTE2(LODWORD(STACK[0x3BA8])) + 123225;
  v566 = 465 * BYTE1(LODWORD(STACK[0x3BA8])) + 123225;
  v567 = 465 * BYTE2(LODWORD(STACK[0x3B90])) + 123225;
  v568 = 465 * ((v562 >> 3) | (32 * v562)) + 123225;
  v569 = 465 * HIBYTE(LODWORD(STACK[0x3B98])) + 123225;
  v570 = 465 * HIBYTE(LODWORD(STACK[0x3B90]))
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * HIBYTE(LODWORD(STACK[0x3B90])) + 123225)) >> 32);
  v571 = v563 - 524 * ((8196503 * (unint64_t)v563) >> 32);
  v572 = v564 - 524 * ((8196503 * (unint64_t)v564) >> 32);
  v573 = v565 - 524 * ((8196503 * (unint64_t)v565) >> 32);
  v574 = 465 * BYTE2(v561)
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * BYTE2(v561) + 123225)) >> 32);
  v575 = 465 * BYTE1(v559)
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * BYTE1(v559) + 123225)) >> 32);
  v576 = 465 * v560
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * v560 + 123225)) >> 32);
  v577 = 465 * HIBYTE(v557) + 123225 - 524 * ((8196503 * (unint64_t)(465 * HIBYTE(v557) + 123225)) >> 32);
  v578 = 465 * v559
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * v559 + 123225)) >> 32);
  v579 = 465 * HIBYTE(v560) + 123225 - 524 * ((8196503 * (unint64_t)(465 * HIBYTE(v560) + 123225)) >> 32);
  v580 = 465 * BYTE2(v557)
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * BYTE2(v557) + 123225)) >> 32);
  v581 = 465 * BYTE1(v561)
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * BYTE1(v561) + 123225)) >> 32);
  LODWORD(STACK[0x3BA8]) = 465 * BYTE2(v560)
                         + 123225
                         - 524 * ((8196503 * (unint64_t)(465 * BYTE2(v560) + 123225)) >> 32);
  LODWORD(STACK[0x3BB0]) = 465 * HIBYTE(v559)
                         + 123225
                         - 524 * ((8196503 * (unint64_t)(465 * HIBYTE(v559) + 123225)) >> 32);
  LODWORD(STACK[0x3BC0]) = 465 * v561
                         + 123225
                         - 524
                         * ((8196503 * (unint64_t)(465 * v561 + 123225)) >> 32);
  v582 = 465 * BYTE1(v557)
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * BYTE1(v557) + 123225)) >> 32);
  LODWORD(STACK[0x3BA0]) = v566 - 524 * ((8196503 * (unint64_t)v566) >> 32);
  LODWORD(STACK[0x3C00]) = v567 - 524 * ((8196503 * (unint64_t)v567) >> 32);
  v583 = v568 - 524 * ((8196503 * (unint64_t)v568) >> 32);
  v584 = 465 * HIBYTE(v561) + 123225 - 524 * ((8196503 * (unint64_t)(465 * HIBYTE(v561) + 123225)) >> 32);
  v585 = 465 * v557
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * v557 + 123225)) >> 32);
  v586 = 465 * BYTE2(v559)
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * BYTE2(v559) + 123225)) >> 32);
  v587 = 465 * BYTE1(v560)
       + 123225
       - 524 * ((8196503 * (unint64_t)(465 * BYTE1(v560) + 123225)) >> 32);
  v588 = STACK[0x3BF8];
  v589 = LODWORD(STACK[0x3BF8]) ^ LODWORD(STACK[0x38C0]);
  if (!v514)
    v589 = (v589 << LODWORD(STACK[0x3BB8])) ^ (v589 >> v437);
  v590 = LODWORD(STACK[0x3BC8]) ^ LODWORD(STACK[0x3C20]) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v570), 16) ^ *((_DWORD *)&STACK[0x4900] + v571) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v572), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v573), 24);
  if (!v514)
    v590 = (v590 << v437) ^ (v590 >> LODWORD(STACK[0x3BB8]));
  v591 = STACK[0x3C68];
  v592 = ((STACK[0x3668] & LODWORD(STACK[0x3C10])) >> LODWORD(STACK[0x3C40]))
       + ((STACK[0x3C10] & LODWORD(STACK[0x3690])) << LODWORD(STACK[0x3C68]));
  v593 = STACK[0x3C78];
  v594 = STACK[0x3B20] & (4 * ((v592 ^ (2 * (v592 & v593))) & v593)) ^ v592 ^ (2 * (v592 & v593));
  v595 = STACK[0x3638] & (16 * (v594 & STACK[0x3C78])) & LODWORD(STACK[0x3B20]) ^ v594;
  v596 = *((_DWORD *)&STACK[0x4900] + v574);
  v597 = *((_DWORD *)&STACK[0x4900] + v575);
  v598 = STACK[0x3A80];
  v599 = __ROR4__(STACK[0x3620], v437);
  if ((STACK[0x3A80] & 0x18) == 0)
    v599 = STACK[0x3620];
  v600 = LODWORD(STACK[0x3BD0]) ^ 0xA6A6A6A6 ^ v595;
  v601 = v600 ^ v599 ^ __ROR4__(v596, 24) ^ v597 ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v576), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v577), 16);
  if ((v598 & 0x18) != 0)
    v601 = (v601 << v437) ^ (v601 >> (STACK[0x3A80] & 0x18));
  v602 = LODWORD(STACK[0x3BE0]) ^ v595 ^ LODWORD(STACK[0x3C08]) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v579), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v578), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v580), 24) ^ *((_DWORD *)&STACK[0x4900] + v581) ^ 0x15151515;
  if ((v598 & 0x18) != 0)
    v602 = (v602 << v437) + (v602 >> (v598 & 0x18));
  v603 = v598 & 0x18;
  v604 = STACK[0x3650];
  v605 = (v604 << (v598 & 0x18)) ^ (v604 >> v437);
  v606 = v600 ^ LODWORD(STACK[0x3C48]) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + LODWORD(STACK[0x3BA8])), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + LODWORD(STACK[0x3BB0])), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + LODWORD(STACK[0x3BC0])), 8) ^ *((_DWORD *)&STACK[0x4900] + v582);
  v607 = __ROR4__(v606, v598 & 0x18);
  if ((v598 & 0x18) != 0)
    v606 = v607;
  v608 = LODWORD(STACK[0x3BE8]) ^ v589 ^ *((_DWORD *)&STACK[0x4900] + LODWORD(STACK[0x3BA0])) ^ (*((_DWORD *)&STACK[0x4900]
                                                                                                 + v583) << 24) ^ (*((_DWORD *)&STACK[0x4900] + v583) >> 8) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + LODWORD(STACK[0x3C00])), 24) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + (v569 - 524 * ((8196503 * (unint64_t)v569) >> 32))), 16);
  if ((STACK[0x3A80] & 0x18) != 0)
    v609 = v605;
  else
    v609 = STACK[0x3650];
  v610 = STACK[0x3A88];
  if ((STACK[0x3A88] & 0x18) != 0)
    v608 = (v608 << (STACK[0x3A88] & 0x18)) + (v608 >> v603);
  v611 = v600 ^ v609 ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v584), 16) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v585), 8) ^ __ROR4__(*((_DWORD *)&STACK[0x4900] + v586), 24) ^ *((_DWORD *)&STACK[0x4900]+ v587);
  if ((v610 & 0x18) != 0)
    v611 = (v611 << (v610 & 0x18)) ^ (v611 >> v603);
  v612 = STACK[0x3A18];
  if ((STACK[0x3A18] & 1) != 0)
    v613 = v606;
  else
    v613 = v602;
  if ((v612 & 1) != 0)
    v614 = v611;
  else
    v614 = v606;
  if ((v612 & 1) != 0)
  {
    v611 = v601;
    v615 = v602;
  }
  else
  {
    v615 = v601;
  }
  v616 = STACK[0x3BF0];
  v617 = STACK[0x3BD8];
  if ((v612 & 1) != 0)
    v618 = STACK[0x3BD8];
  else
    v618 = STACK[0x3BF0];
  if ((v612 & 1) != 0)
    v617 = v590;
  else
    v616 = v608;
  if ((v612 & 1) != 0)
    v590 = v608;
  v619 = v612 - 2 * LODWORD(STACK[0x36C0]);
  v620 = (v619 & 2) == 0;
  if ((v619 & 2) != 0)
    v621 = v611;
  else
    v621 = v613;
  if ((v619 & 2) != 0)
    v622 = v613;
  else
    v622 = v611;
  v623 = v622 ^ v588;
  if (v620)
    v624 = v614;
  else
    v624 = v615;
  if (v620)
    v625 = v618;
  else
    v625 = v590;
  v626 = v623 ^ v624 ^ v625;
  if (v620)
    v627 = v617;
  else
    v627 = v616;
  v628 = v627 ^ 0x98989898 ^ v626;
  v629 = v588 ^ 0x98989898;
  v630 = v621 + 86300485 * ((v588 ^ 0x98989898) - v628);
  if (v620)
    v631 = v615;
  else
    v631 = v614;
  if (v620)
    v632 = v616;
  else
    v632 = v617;
  v633 = v631 + 457750363 * (v629 - (v630 ^ v632));
  if (v620)
    v634 = v590;
  else
    v634 = v618;
  v635 = v634 ^ v588;
  v636 = v635 ^ v624 ^ v633;
  v637 = v632 ^ v588;
  v638 = v637 ^ v630 ^ (1123033561 * (v629 + (v625 ^ 0x67676767 ^ v636)) + 1123033561 + v633);
  v639 = (-800568933 * v628) ^ (-800568933 * v629) ^ v630;
  v640 = (v636 ^ 0x98989898) + 647010873 * (v637 + (v639 ^ 0x67676767)) + 647010873;
  v641 = ((unint64_t)((LODWORD(STACK[0x3AA0]) ^ (2 * (STACK[0x3AA0] & LODWORD(STACK[0x3C30])))) & STACK[0x3C58]) << STACK[0x3C60])
       + (((LODWORD(STACK[0x3AA0]) ^ (2 * (STACK[0x3AA0] & LODWORD(STACK[0x3C30])))) & STACK[0x3C28]) >> STACK[0x3C38]);
  v642 = STACK[0x3C40];
  v643 = (((LODWORD(STACK[0x3620]) ^ (2 * (STACK[0x3620] & v593))) & STACK[0x3B28]) >> v591)
       + (((LODWORD(STACK[0x3620]) ^ (2 * (STACK[0x3620] & v593))) & STACK[0x3C50]) << v642);
  v644 = LODWORD(STACK[0x3600]) ^ LODWORD(STACK[0x3730]) ^ LODWORD(STACK[0x3608]) ^ LODWORD(STACK[0x3658]) ^ LODWORD(STACK[0x3648]) ^ LODWORD(STACK[0x3808]) ^ LODWORD(STACK[0x35F0]) ^ LODWORD(STACK[0x3630]) ^ LODWORD(STACK[0x3628]) ^ LODWORD(STACK[0x3A58]) ^ LODWORD(STACK[0x3A90]) ^ LODWORD(STACK[0x3A50]) ^ LODWORD(STACK[0x3678]) ^ LODWORD(STACK[0x3A60]) ^ LODWORD(STACK[0x3868]) ^ LODWORD(STACK[0x3858]) ^ LODWORD(STACK[0x3840]) ^ LODWORD(STACK[0x3A48]) ^ LODWORD(STACK[0x3AB0]) ^ LODWORD(STACK[0x3A38]) ^ LODWORD(STACK[0x3A40]) ^ LODWORD(STACK[0x3640]) ^ LODWORD(STACK[0x3618]) ^ LODWORD(STACK[0x3688]) ^ LODWORD(STACK[0x36B8]) ^ LODWORD(STACK[0x39D8]) ^ LODWORD(STACK[0x39C8]) ^ LODWORD(STACK[0x3AB8]) ^ LODWORD(STACK[0x39F8]) ^ LODWORD(STACK[0x3A98]) ^ LODWORD(STACK[0x3838]) ^ LODWORD(STACK[0x3860]) ^ LODWORD(STACK[0x3834]) ^ LODWORD(STACK[0x3A10]) ^ LODWORD(STACK[0x3A28]) ^ LODWORD(STACK[0x3A30]) ^ LODWORD(STACK[0x3A20]) ^ v643 ^ ((((LODWORD(STACK[0x3AA8]) ^ (2 * (STACK[0x3AA8] & v593))) & STACK[0x3C50]) << v642) + (((LODWORD(STACK[0x3AA8]) ^ (2 * (STACK[0x3AA8] & v593))) & STACK[0x3B28]) >> v591)) ^ v641 ^ ((unint64_t)((v604 ^ (2 * (v604 & STACK[0x3C30]))) & STACK[0x3C58]) << STACK[0x3C60]) ^ (((v604 ^ (2 * (v604 & STACK[0x3C30]))) & STACK[0x3C28]) >> STACK[0x3C38]) ^ LODWORD(STACK[0x3A00]);
  v645 = v644 ^ LODWORD(STACK[0x3978]) ^ LODWORD(STACK[0x39C0]) ^ LODWORD(STACK[0x3980]);
  v646 = v640 + 1065969775 * (LODWORD(STACK[0x39D0]) - (v645 ^ 0x6B8D9D50));
  v647 = v635 ^ v626 ^ v638;
  v648 = v627 ^ v588 ^ v638 ^ v647;
  v649 = (v647 ^ 0x98989898) + 243706073 * ((v625 ^ 0x67676767) + (v640 ^ v588)) + 243706073;
  v650 = v639 ^ v635 ^ v648;
  v651 = (v648 ^ 0x98989898) + 1385535497 * ((v645 ^ LODWORD(STACK[0x39A0])) - LODWORD(STACK[0x3730]));
  v652 = v650 + 229187539 * (LODWORD(STACK[0x39E8]) + (LODWORD(STACK[0x39E0]) ^ 0x84C76DF3 ^ v645)) + 229187539;
  v653 = LODWORD(STACK[0x39D0]) ^ v645 ^ 0x6B8D9D50 ^ v649;
  v654 = 4647 * ((v651 + 111) ^ 0x36) + 17937420;
  v655 = STACK[0x3C18];
  LOBYTE(v654) = *(_BYTE *)(STACK[0x3C18] + v654
                                          - 6784 * (((1266205 * (unint64_t)v654) >> 32) >> 1)) ^ 0xE;
  v656 = *(unsigned __int8 *)(STACK[0x3C18]
                            + 4647 * (HIBYTE(v652) ^ 0xC4)
                            + 14331348
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (HIBYTE(v652) ^ 0xC4) + 14331348)) >> 32) >> 1))
       + 117;
  v657 = *(unsigned __int8 *)(STACK[0x3C18]
                            + 4647 * (HIBYTE(v651) ^ 0xC4)
                            + 14331348
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (HIBYTE(v651) ^ 0xC4) + 14331348)) >> 32) >> 1))
       + 117;
  v658 = *(unsigned __int8 *)(STACK[0x3C18]
                            + 4647 * (BYTE1(v653) ^ 0xC4)
                            + 22765653
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (BYTE1(v653) ^ 0xC4u) + 22765653)) >> 32) >> 1)) ^ (v653 >> 8) ^ 0xFFFFFFBF;
  v659 = (v656 ^ 0x12 ^ (v656 >> 2) & 0x12) + 26;
  v660 = (_BYTE *)STACK[0x508];
  v660[14] = v658 + (~(2 * v658) | 0x9D) + 50;
  v661 = *(_BYTE *)(v655
                  + 4647 * (((v657 ^ 0x12 ^ (v657 >> 2) & 0x12) + 26) ^ 0x87)
                  + 22765653
                  - 6784
                  * (((1266205
                                   * (unint64_t)(4647
                                                      * (((v657 ^ 0x12 ^ (v657 >> 2) & 0x12) + 26) ^ 0x87u)
                                                      + 22765653)) >> 32) >> 1)) ^ ((v657 ^ 0x12 ^ (v657 >> 2) & 0x12)
                                                                                  + 26) ^ 0xDC;
  v660[8] = v661 - ((2 * v661) & 0x62) + 49;
  v662 = (v646 >> 8) ^ *(unsigned __int8 *)(v655
                                          + 4647 * (BYTE1(v646) ^ 0x36)
                                          + 22765653
                                          - 6784
                                          * (((1266205
                                                           * (unint64_t)(4647 * (BYTE1(v646) ^ 0x36u) + 22765653)) >> 32) >> 1));
  v660[2] = (v662 ^ 0xC2) - ((2 * v662) & 0x62) + 49;
  v663 = ((v654 >> 3) | (32 * v654)) ^ *(_BYTE *)(v655
                                                                 + 4647
                                                                 * (((v654 >> 3) | (32 * v654)) ^ 0x26)
                                                                 + 7151733
                                                                 - 6784
                                                                 * (((1266205
                                                                                  * (unint64_t)(4647 * (((v654 >> 3) | (32 * v654)) ^ 0x26u) + 7151733)) >> 32) >> 1)) ^ 0x7F;
  v660[11] = v663 - ((2 * v663) & 0x62) + 49;
  v660[1] = (*(_BYTE *)(v655
                      + 4647 * (BYTE2(v646) ^ 0xA4)
                      + 7151733
                      - 6784
                      * (((1266205 * (unint64_t)(4647 * (BYTE2(v646) ^ 0xA4u) + 7151733)) >> 32) >> 1)) ^ BYTE2(v646) ^ 0x65)
          + (~(2
             * (*(_BYTE *)(v655
                         + 4647 * (BYTE2(v646) ^ 0xA4)
                         + 7151733
                         - 6784
                         * (((1266205 * (unint64_t)(4647 * (BYTE2(v646) ^ 0xA4u) + 7151733)) >> 32) >> 1)) ^ BYTE2(v646) ^ 0x65)) | 0x9D)
          + 50;
  v664 = HIWORD(v652) ^ *(unsigned __int8 *)(v655
                                           + 4647 * (BYTE2(v652) ^ 0xAA)
                                           + 7151733
                                           - 6784
                                           * (((1266205
                                                            * (unint64_t)(4647 * (BYTE2(v652) ^ 0xAAu) + 7151733)) >> 32) >> 1));
  v660[5] = (v664 ^ 0xC9) - 2 * ((v664 ^ 0xC9) & 0x33 ^ v664 & 2) + 49;
  v665 = HIBYTE(v653) ^ *(unsigned __int8 *)(v655
                                           + 4647 * (HIBYTE(v653) ^ 0x34)
                                           + 7151733
                                           - 6784
                                           * (((1266205
                                                            * (unint64_t)(4647 * (HIBYTE(v653) ^ 0x34) + 7151733)) >> 32) >> 1));
  v660[12] = (v665 ^ 0x84) - ((2 * v665) & 0x62) + 49;
  v666 = *(_BYTE *)(v655
                  + 4647 * (BYTE2(v653) ^ 0xEA)
                  + 7151733
                  - 6784
                  * (((1266205 * (unint64_t)(4647 * (BYTE2(v653) ^ 0xEAu) + 7151733)) >> 32) >> 1)) ^ BYTE2(v653) ^ 0xC7;
  v660[13] = v666 - ((2 * v666) & 0x62) + 49;
  LOBYTE(v659) = *(_BYTE *)(v655
                          + 4647 * (v659 ^ 0xDA)
                          + 22765653
                          - 6784
                          * (((1266205
                                           * (unint64_t)(4647 * (v659 ^ 0xDAu) + 22765653)) >> 32) >> 1)) ^ v659;
  v660[4] = (v659 ^ 0xE8) - 2 * ((v659 ^ 0xE8) & 0x37 ^ v659 & 6) + 49;
  v667 = v652 ^ *(_BYTE *)(v655
                         + 4647 * (v652 ^ 0xF9)
                         + 7151733
                         - 6784
                         * (((1266205
                                          * (unint64_t)(4647 * (v652 ^ 0xF9u) + 7151733)) >> 32) >> 1));
  v660[7] = (v667 ^ 0x51) - 2 * ((v667 ^ 0x51) & 0x35 ^ v667 & 4) + 49;
  v668 = 4647
       * ((*(_BYTE *)(v655
                                     + 4647 * (HIBYTE(v646) ^ 0xE8)
                                     + 22765653
                                     - 6784
                                     * (((1266205
                                                      * (unint64_t)(4647 * (HIBYTE(v646) ^ 0xE8) + 22765653)) >> 32) >> 1)) ^ HIBYTE(v646)) ^ 0x7F)
       + 13123128;
  LOBYTE(v665) = v646 ^ 0x1A;
  LOBYTE(v668) = *(_BYTE *)(v655 + v668 - 6784 * (((1266205 * (unint64_t)v668) >> 32) >> 1)) - 71;
  LOBYTE(v668) = v668 ^ ((_BYTE)v668 << 6) ^ (4 * v668) ^ 0xFE;
  *v660 = v668 - ((2 * v668 + 52) & 0x62) + 75;
  v669 = 4647 * ((v646 ^ 0x1A) - ((2 * v646) & 8) + 4) + 22765653;
  LOBYTE(v669) = *(_BYTE *)(v655 + v669 - 6784 * (((1266205 * (unint64_t)v669) >> 32) >> 1)) ^ v665;
  v660[3] = (v669 ^ 0x8A) - ((2 * v669) & 0x62) + 49;
  v670 = *(unsigned __int8 *)(v655
                            + 4647 * (BYTE1(v651) ^ 0x88)
                            + 22765653
                            - 6784
                            * (((1266205 * (unint64_t)(4647 * (BYTE1(v651) ^ 0x88u) + 22765653)) >> 32) >> 1)) ^ (v651 >> 8) ^ 0x1D;
  v660[10] = v670 - ((2 * v670) & 0x62) + 49;
  LOBYTE(v653) = *(_BYTE *)(v655
                          + 4647 * (v653 ^ 0xD7)
                          + 22765653
                          - 6784
                          * (((1266205
                                           * (unint64_t)(4647 * (v653 ^ 0xD7u) + 22765653)) >> 32) >> 1)) ^ v653 ^ 0xFD;
  v671 = 4647 * (((v653 >> 1) | ((_BYTE)v653 << 7)) ^ 0x40) + 15539568;
  LOBYTE(v671) = 97
               * (*(_BYTE *)(v655 + v671 - 6784 * (((1266205 * (unint64_t)v671) >> 32) >> 1)) ^ 0xA2);
  v660[15] = (v671 ^ 0xD4) - 2 * ((v671 ^ 0xD4) & 0x33 ^ v671 & 2) + 49;
  v672 = HIWORD(v651) ^ *(unsigned __int8 *)(v655
                                           + 4647 * (BYTE2(v651) ^ 0x2C)
                                           + 22765653
                                           - 6784
                                           * (((1266205
                                                            * (unint64_t)(4647 * (BYTE2(v651) ^ 0x2Cu) + 22765653)) >> 32) >> 1));
  v660[9] = (v672 ^ 0xF9) - 2 * ((v672 ^ 0xF9) & 0x35 ^ v672 & 4) + 49;
  LOBYTE(v652) = BYTE1(v652) ^ 0xA9 ^ *(_BYTE *)(v655
                                               + 4647 * (BYTE1(v652) ^ 0x2B)
                                               + 7151733
                                               - 6784
                                               * (((1266205
                                                                * (unint64_t)(4647 * (BYTE1(v652) ^ 0x2Bu)
                                                                                   + 7151733)) >> 32) >> 1));
  v673 = 4647 * (((v652 >> 1) | ((_BYTE)v652 << 7)) ^ 0x40) + 15539568;
  LOBYTE(v673) = (97
                * (*(_BYTE *)(v655 + v673 - 6784 * (((1266205 * (unint64_t)v673) >> 32) >> 1)) ^ 0xA2)) ^ 0x17;
  v674 = STACK[0x39F0];
  v660[6] = v673 + (~(2 * v673) | 0x9D) + 50;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (v674 ^ (202 * (STACK[0x33F8] == 0))))
                            - 8))();
}

uint64_t sub_1006FC368()
{
  int v0;

  sub_10009A6DC();
  return ((uint64_t (*)(unint64_t))(*(_QWORD *)(STACK[0x3C70] + 8 * v0)
                                                   - ((v0 + 424) ^ 0x25D0)))(STACK[0x758]);
}

uint64_t sub_1006FC3A0()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70]
                                        + 8
                                        * (((4 * (*(_QWORD *)(v0 - 0x36DB4DBB0BEDBA94) != 0)) | (32 * (*(_QWORD *)(v0 - 0x36DB4DBB0BEDBA94) != 0))) ^ v1))
                            - ((61 * (v1 ^ 0x2529u) - 4) ^ (v1 + 5749))))();
}

uint64_t sub_1006FC3F8@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  int v2;

  *v1 = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70] + 8 * (a1 - 5749)) - 12))();
}

uint64_t sub_1006FC418()
{
  int v0;
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x3C70]
                              + 8
                              * (int)((((((v0 + 1817273206) & 0x93AE7DF2) + 11256) ^ 0x4847) * (v1 == 0)) ^ (v0 + 2203))))();
}

uint64_t sub_1006FC460()
{
  int v0;

  sub_10009A6DC();
  return ((uint64_t (*)(unint64_t))(*(_QWORD *)(STACK[0x3C70] + 8 * v0)
                                                   - ((23 * (v0 ^ 0x4B35u)) ^ 0x3C45)))(STACK[0x758]);
}

uint64_t sub_1006FC4B0@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70]
                                        + 8 * (((*(_QWORD *)(v1 - 0x36DB4DBB0BEDBAA4) != 0) * (a1 - 6673)) ^ a1))
                            - ((61 * (a1 ^ 0x1D4Fu)) ^ 0x3C45)))();
}

uint64_t sub_1006FC504@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((15
                                          * (((*(_QWORD *)(v1 - 0x36DB4DBB0BEDBAACLL) == 0) ^ (a1 + 95)) & 1)) ^ (a1 + 9311)))
                            - ((a1 - 2076300276) & 0x7BC1FFEB ^ 0x49A2)))();
}

uint64_t sub_1006FC56C()
{
  unsigned int v0;
  _QWORD *v1;
  uint64_t v2;

  *v1 = STACK[0x3C88];
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * v0) - (v0 ^ 0x49A6)))();
}

uint64_t sub_1006FC590@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x3C70]
                                        + 8 * ((23576 * (*(_QWORD *)(v1 - 0x36DB4DBB0BEDBAA4) != 0)) ^ a1))
                            - 4))();
}

uint64_t sub_1006FC5CC@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;

  *v1 = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (a1 - 7831)) - 12))();
}

uint64_t sub_1006FC5E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 12) = v1;
  return result;
}

void sub_1006FC710(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) + 1651633301 * ((2 * (a1 & 0x58274546) - a1 - 1478968647) ^ 0xB7D0FC19);
  __asm { BR              X10 }
}

uint64_t sub_1006FC7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  int v33;
  uint64_t v34;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 8 * ((62 * (*(_QWORD *)(a1 + 40) != 0)) ^ (v33 - 13771))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a1, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33);
}

uint64_t sub_1006FC818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  int v41;
  uint64_t v42;

  return (*(uint64_t (**)(void))(v42 + 8 * ((31053 * (a41 == *(_QWORD *)(a11 + 48))) ^ (v41 - 14461))))();
}

uint64_t sub_1006FC848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_BYTE *a42)
{
  uint64_t v42;

  LOBYTE(STACK[0x720]) = *a42;
  LOBYTE(STACK[0x721]) = a42[1];
  LOBYTE(STACK[0x722]) = a42[2];
  LOBYTE(STACK[0x723]) = a42[3];
  LOBYTE(STACK[0x724]) = a42[4];
  LOBYTE(STACK[0x725]) = a42[5];
  LOBYTE(STACK[0x726]) = a42[6];
  LOBYTE(STACK[0x727]) = a42[7];
  LOBYTE(STACK[0x728]) = a42[8];
  LOBYTE(STACK[0x729]) = a42[9];
  LOBYTE(STACK[0x72A]) = a42[10];
  LOBYTE(STACK[0x72B]) = a42[11];
  LOBYTE(STACK[0x72C]) = a42[12];
  LOBYTE(STACK[0x72D]) = a42[13];
  LOBYTE(STACK[0x72E]) = a42[14];
  LOBYTE(STACK[0x72F]) = a42[15];
  LOBYTE(STACK[0x730]) = a42[16];
  LOBYTE(STACK[0x731]) = a42[17];
  LOBYTE(STACK[0x732]) = a42[18];
  LOBYTE(STACK[0x733]) = a42[19];
  LOBYTE(STACK[0x734]) = a42[20];
  LOBYTE(STACK[0x735]) = a42[21];
  LOBYTE(STACK[0x736]) = a42[22];
  LOBYTE(STACK[0x737]) = a42[23];
  LOBYTE(STACK[0x738]) = a42[24];
  LOBYTE(STACK[0x739]) = a42[25];
  LOBYTE(STACK[0x73A]) = a42[26];
  LOBYTE(STACK[0x73B]) = a42[27];
  LOBYTE(STACK[0x73C]) = a42[28];
  LOBYTE(STACK[0x73D]) = a42[29];
  LOBYTE(STACK[0x73E]) = a42[30];
  LOBYTE(STACK[0x73F]) = a42[31];
  STACK[0x740] = *(_QWORD *)a42;
  STACK[0x748] = *((_QWORD *)a42 + 1);
  STACK[0x750] = *((_QWORD *)a42 + 2);
  STACK[0x758] = *((_QWORD *)a42 + 3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 8 * a9))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34);
}

uint64_t sub_1006FC980()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v5;

  if (v2)
    v4 = *(_QWORD *)(v1 + 24) == 0;
  else
    v4 = 1;
  v5 = !v4;
  return (*(uint64_t (**)(void))(v3 + 8 * ((v5 * (((v0 - 1462809919) & 0x57307F73) + 10143)) ^ (v0 - 13771))))();
}

uint64_t sub_1006FC9CC@<X0>(unsigned int a1@<W8>, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  char v9;
  int v10;
  unsigned int v11;
  _BOOL4 v13;

  v7 = *a4 ^ v4;
  STACK[0x320] = v5;
  v8 = ((v7 ^ 0xF59FE1B2) + 206929076) ^ ((v7 ^ 0x5691835A) - 1352982948) ^ ((v7 ^ 0xA148D3A8) + 1484934826);
  v9 = ((v8 + 119) ^ 0x76) & (2 * ((v8 + 119) & 0x47)) ^ (v8 + 119) & 0x47;
  LODWORD(STACK[0x438]) = (a1 + 1470) | 0x82;
  v10 = ((v8 + 119) ^ (2
                                                       * (((((a1 - 66) | 0x82) - 33) ^ (2 * ((v8 + 119) ^ 0x7E))) & ((v8 + 119) ^ 0x7E) & (4 * v9) ^ v9))) & 0xF ^ 0x2DD3CBCC;
  v11 = ((((2 * v10) | 0x8DCBFCC0) - v10 + 958005664) & 0x2A100E17 ^ 0x2A584403)
      + ((((2 * v10) | 0x8DCBFCC0) - v10 + 958005664) & 0xC12401E8 ^ 0x10009069);
  v13 = v8 != -74699710 && v11 == -781397567;
  return (*(uint64_t (**)(void))(v6 + 8 * ((31715 * v13) ^ a1)))();
}

uint64_t sub_1006FCB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,unsigned __int8 *a41)
{
  int v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);

  LODWORD(STACK[0x498]) = ((2 * a41[19]) & 0xFFEA) + (a41[19] ^ 0xFFFFFFF5);
  LODWORD(STACK[0x508]) = (a41[20] ^ 0xFFFFFFB7) + ((2 * a41[20]) & 0x6E);
  LODWORD(STACK[0x500]) = (a41[17] ^ 0xFFFFFFDC) + ((2 * a41[17]) & 0xFFB8);
  LODWORD(STACK[0x4F8]) = (a41[18] ^ 0xFFFFFFFE) + 4 * (a41[18] >> 1);
  LODWORD(STACK[0x4F0]) = (a41[22] ^ 0xFFFFFFF7) + ((2 * a41[22]) & 0xFFEF);
  LODWORD(STACK[0x4E8]) = (a41[29] ^ 0xFFFFFFDC) + ((2 * a41[29]) & 0xFFB8);
  v43 = a41[27];
  v44 = (a41[31] ^ 0xFFFFFFCF) + ((2 * a41[31]) & 0xFF9F);
  v45 = a41[23];
  v46 = a41[26];
  v47 = a41[21];
  v48 = *a41;
  STACK[0x248] = v48;
  LODWORD(STACK[0x4A0]) = -97 * v48;
  STACK[0x240] = a41[5];
  STACK[0x238] = a41[8];
  LODWORD(STACK[0x224]) = a41[11];
  LODWORD(STACK[0x234]) = a41[10];
  v49 = (LODWORD(STACK[0x508]) + 92);
  LODWORD(STACK[0x45C]) = LODWORD(STACK[0x500]) + 112;
  LODWORD(STACK[0x4B4]) = LODWORD(STACK[0x4F8]) + 84;
  LODWORD(STACK[0x484]) = LODWORD(STACK[0x4F0]) + 111;
  STACK[0x218] = a41[13];
  STACK[0x228] = a41[14];
  LODWORD(STACK[0x458]) = LODWORD(STACK[0x4E8]) + 120;
  LODWORD(STACK[0x4AC]) = (v43 ^ 0x77) + ((2 * v43) & 0xFFFFFFEF) - 4;
  LODWORD(STACK[0x4A8]) = v44 + 114;
  LODWORD(STACK[0x494]) = (v47 ^ 0x7F) + 2 * v47 - 64;
  LODWORD(STACK[0x49C]) = (v45 ^ 0x7E) + 4 * (v45 >> 1) - 66;
  v50 = a41[16] + 98;
  LODWORD(STACK[0x4B0]) = (v46 ^ 0x4D) + ((2 * v46) & 0xFFFFFF9A) - 12;
  LODWORD(STACK[0x420]) = v41;
  LODWORD(STACK[0x428]) = v41 - 611268891;
  LODWORD(v48) = STACK[0x438];
  LODWORD(STACK[0x430]) = LODWORD(STACK[0x438]) ^ 0xD19;
  v51 = a41[6];
  v52 = a41[7];
  LODWORD(STACK[0x48C]) = 37 * a41[3];
  LODWORD(STACK[0x490]) = 25 * v51;
  STACK[0x210] = v52;
  STACK[0x4B8] = v42;
  v53 = *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8 * (int)v48);
  LODWORD(STACK[0x508]) = -685968585;
  return v53(v49, v50);
}

uint64_t sub_1006FCF5C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned __int8 *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,int a32,int a33,int a34,uint64_t a35,uint64_t a36,int a37,int a38,int a39,int a40,uint64_t a41,int a42,int a43,uint64_t a44,int a45,int a46,int a47,int a48,int a49)
{
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unint64_t v110;
  int v111;
  _BOOL4 v112;
  uint64_t v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  int v118;
  unint64_t v119;
  int v120;
  uint64_t (*v121)(uint64_t, _QWORD);
  int v123;
  int v124;

  v124 = v54;
  v123 = v49;
  LODWORD(STACK[0x264]) = v61;
  STACK[0x200] = v53;
  LODWORD(STACK[0x20C]) = v52;
  STACK[0x500] = v50 + 16;
  v62 = LODWORD(STACK[0x430]) ^ a1 & 0xFFFFFFDD ^ 0xFFFFFFB2;
  v63 = a2 + *a8 - 41;
  LODWORD(STACK[0x4F8]) = v63;
  v64 = a8[1];
  v65 = LODWORD(STACK[0x45C]) + v64;
  v66 = v51;
  LODWORD(STACK[0x4F0]) = v58 - 117 * v63 - 8 * v64 - 93 * v64;
  v67 = a8[4];
  v68 = v67 & (a1 ^ (2
                   * ((a1 ^ 0x6C) & (2
                                   * ((a1 ^ 0x6C) & (2
                                                   * ((a1 ^ 0x6C) & (2
                                                                   * ((a1 ^ 0x6C) & (2 * ((a1 ^ 0x6C) & (2 * v62) ^ v62)) ^ v62)) ^ v62)) ^ v62)) ^ v62)) ^ 0xFFFFFFDD);
  v69 = a1 ^ (2
            * ((a1 ^ 0x6C) & (2
                            * ((a1 ^ 0x6C) & (2
                                            * ((a1 ^ 0x6C) & (2
                                                            * ((a1 ^ 0x6C) & (2
                                                                            * ((a1 ^ 0x6C) & (2
                                                                                            * ((a1 ^ 0xCCCCCCCC) & (2 * a1) & 0x5A ^ a1 & 0x6D)) ^ a1 & 0x6D)) ^ a1 & 0x6D)) ^ a1 & 0x6D)) ^ a1 & 0x6D)) ^ a1 & 0x6D)) ^ v67;
  v70 = v65 - 47 * v63;
  LODWORD(STACK[0x4E8]) = v70;
  v71 = a8[2];
  v72 = LODWORD(STACK[0x4B4]) + v71 + 119 * v70;
  LODWORD(STACK[0x4E0]) = v72;
  v73 = a8[3];
  v74 = v72 - 15313;
  v75 = LODWORD(STACK[0x498]) + v73 - (v72 - 15313);
  LODWORD(STACK[0x4D0]) = v75;
  LODWORD(STACK[0x4D8]) = a32 + 51 * (v73 - v74);
  v76 = v75 + 82;
  v77 = a25 + 53 * v67 + 17 * (v75 + 82);
  LODWORD(STACK[0x488]) = v77;
  v78 = (((v69 ^ 0x7B) - 60) ^ ((v69 ^ 2) - 69) ^ ((v69 ^ 0xFFFFFF94) + 45)) - 19 * v76;
  LODWORD(STACK[0x4C8]) = a26 - 65 * v71 + v71 - 25 - 49 * (v71 - 25);
  v79 = a8[5];
  LODWORD(STACK[0x4C0]) = LODWORD(STACK[0x494]) + v79 + 25 * (v77 - 91);
  v80 = a27 + 45 * v79 + 101 * (v77 - 91);
  v81 = a8[6];
  LODWORD(STACK[0x484]) += v81 + 65 * (v80 + 11);
  v82 = a8[7];
  v83 = LODWORD(STACK[0x49C]) + v82;
  LODWORD(STACK[0x49C]) = v56 - 7 * v82;
  v84 = a29 + 55 * v81 - 9 * (v80 + 11);
  v85 = a8[9];
  LODWORD(STACK[0x478]) = v78 + ((2 * (((2 * v68) & 0x2C) + (v68 ^ 0x5F)) + 84) ^ 0x12);
  v86 = a8[8];
  v87 = v83 + 37 * v84;
  LODWORD(STACK[0x470]) = v87;
  v88 = a31 - 73 * v86 + 55 * (v87 - 125);
  LODWORD(STACK[0x454]) = v88;
  v89 = a49 + v86 - 127 * (v87 - 125);
  LODWORD(STACK[0x468]) = v89;
  v90 = a43 + v85 - 33 * v89;
  LODWORD(STACK[0x460]) = v90;
  v91 = a8[10];
  LODWORD(STACK[0x4B0]) = LODWORD(STACK[0x4B0]) + v91 - 29 * (a7 + 3 * v85 + 75 * v88 - 4050);
  v92 = a30 + 103 * v91 - 2 * v91 - 83 * (v90 + 2244);
  LODWORD(STACK[0x448]) = v92;
  v93 = a8[11];
  v94 = a28 + 19 * v93 - 125 * (v92 + 4993);
  v95 = LODWORD(STACK[0x4AC]) + v93 - 47 * (v92 + 4993);
  v96 = a8[12];
  v97 = -7 * v94 + a42 + v96;
  LODWORD(STACK[0x440]) = a33 - 20 * v96 + 71 * (v95 - v96);
  v98 = a8[13];
  LODWORD(STACK[0x458]) = LODWORD(STACK[0x458]) + v98 - 21 * (v97 - 690);
  v99 = v66 - 3 * v98 - (v97 - 690) + ((v97 - 690) << 6);
  v100 = a8[14];
  v101 = v57 + v100 - 111 * (v99 - 128);
  v102 = a34 - 103 * v100 - 82 * v100 + 55 * (v99 - 128);
  v103 = a8[15];
  v104 = LODWORD(STACK[0x4A8]) + v103 - 33 * v101;
  LODWORD(STACK[0x4A0]) += 47 * (v104 - 2508);
  v105 = STACK[0x248] + 59 * (a6 + 67 * v103 + 59 * v102) - 81;
  v106 = v55 - 9 * (a48 + 91 * v105);
  v107 = LODWORD(STACK[0x264]) + 21 * v106;
  LODWORD(STACK[0x264]) = v107;
  v108 = a46 - 33 * v107;
  LODWORD(STACK[0x48C]) += 9 * v106;
  v109 = LODWORD(STACK[0x490]) - 73 * (a45 - v108 + (v108 << 6));
  LODWORD(STACK[0x490]) = v109;
  v110 = STACK[0x210] + 55 * v109;
  v111 = STACK[0x508];
  if (LODWORD(STACK[0x428]) < 0xD71CF327 != LODWORD(STACK[0x508]) < 0xD71CF327)
    v112 = LODWORD(STACK[0x428]) < 0xD71CF327;
  else
    v112 = LODWORD(STACK[0x508]) < LODWORD(STACK[0x428]);
  LODWORD(STACK[0x45C]) = LODWORD(STACK[0x4E8]) + 119;
  LODWORD(STACK[0x4B4]) = LODWORD(STACK[0x4E0]) - 15107;
  LODWORD(STACK[0x498]) = LODWORD(STACK[0x4D0]) - 124;
  LODWORD(STACK[0x494]) = LODWORD(STACK[0x4C0]) + 77;
  --LODWORD(STACK[0x484]);
  v113 = (LODWORD(STACK[0x478]) + 54);
  LODWORD(STACK[0x49C]) = LODWORD(STACK[0x470]) + 79;
  LODWORD(STACK[0x4B0]) -= 1669;
  LODWORD(STACK[0x4AC]) = v95 - 11;
  v114 = STACK[0x20C];
  LODWORD(STACK[0x458]) -= 22;
  LODWORD(STACK[0x4A8]) = v104 - 2470;
  LODWORD(STACK[0x4A0]) += 5643;
  STACK[0x248] = v105;
  STACK[0x240] = STACK[0x240] + 67 * v108;
  v115 = STACK[0x238];
  STACK[0x210] = v110;
  v116 = (v115 - 25 * v110);
  STACK[0x238] = v116;
  v117 = a40 + 35 * (v114 + 43 * v116);
  LODWORD(STACK[0x234]) -= 89 * (v124 + 109 * (a38 - 5 * v110));
  v118 = v59 + 119 * (v60 - 23 * v117);
  LODWORD(v116) = a39 + 87 * v118;
  LODWORD(STACK[0x224]) -= 85 * v117;
  v119 = STACK[0x228] - 91 * ((_DWORD)v116 - 126);
  STACK[0x218] = STACK[0x218] + 125 * v118 + 22;
  STACK[0x228] = v119;
  v120 = LODWORD(STACK[0x4F8])
       - 125 * (v123 - 99 * (a47 + 53 * (v116 - 126)))
       - 8 * (v123 - 99 * (a47 + 53 * (v116 - 126)));
  v121 = *(uint64_t (**)(uint64_t, _QWORD))(STACK[0x4B8] + 8 * ((16485 * !v112) ^ LODWORD(STACK[0x438])));
  LODWORD(STACK[0x508]) = v111 + 16;
  return v121(v113, (v120 + 41));
}

uint64_t sub_1006FD71C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;

  LODWORD(STACK[0x488]) = v9;
  LODWORD(STACK[0x454]) = a1;
  v10 = STACK[0x430];
  v11 = 0xFFFFFFFF00000000;
  if (a5 >= 0x6D07224B)
    v11 = 0;
  STACK[0x258] = v5 - v8 + v11;
  STACK[0x200] = v7;
  LODWORD(STACK[0x20C]) = v6;
  v12 = *(_QWORD *)(STACK[0x4B8] + 8 * v10);
  STACK[0x398] = v12;
  STACK[0x388] = v12;
  STACK[0x3A0] = v12;
  STACK[0x380] = 1;
  STACK[0x390] = 1;
  STACK[0x360] = 1;
  STACK[0x358] = 1;
  STACK[0x350] = 1;
  STACK[0x368] = 1;
  STACK[0x370] = 1;
  STACK[0x328] = 1;
  STACK[0x378] = 1;
  STACK[0x278] = 0xA6681DD9E71B0F5BLL;
  STACK[0x338] = 0xA6681DD9E71B0F5BLL;
  STACK[0x330] = 0xA6681DD9E71B0F5BLL;
  STACK[0x348] = 0xA6681DD9E71B0F5BLL;
  STACK[0x270] = 0xA6681DD9E71B0F5BLL;
  STACK[0x340] = 0xA6681DD9E71B0F5BLL;
  STACK[0x3D8] = 0xA6681DD9E71B0F5BLL;
  return ((uint64_t (*)(unint64_t))(v12 - 12))(0xA6681DD9E71B0F5BLL);
}

#error "1006FE470: call analysis failed (funcsize=571)"

uint64_t sub_1006FE474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t (*v115)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  LODWORD(STACK[0x2D8]) = v32;
  LODWORD(STACK[0x4F8]) = 0;
  v34 = (v31 + 6878) | 0x400u;
  v35 = STACK[0x258];
  v36 = ((v31 - 102) & 0xEB ^ 0xD0) & (8 * LOBYTE(STACK[0x258]));
  v37 = (__ROR8__(STACK[0x258], 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x764EB8E4795C70B2;
  v38 = v37 ^ 0xB872780C2581A1CELL;
  v39 = v31;
  STACK[0x4A0] = v34;
  v40 = v34 ^ v37 ^ 0xF5F840D0109D9FF9;
  v41 = (__ROR8__(v38, 8) + v40) ^ 0x9FEAE3EFA61AD548;
  v43 = __ROR8__(v40, 61);
  v42 = v41 ^ v43;
  v44 = ((v41 ^ v43) + (v41 << 56) + (v41 >> 8)) ^ 0x2210426E04724766;
  v45 = v44 ^ __ROR8__(v42, 61);
  v46 = (__ROR8__(v44, 8) + v45) ^ 0x546F9ABB3434D760;
  v47 = v46 ^ __ROR8__(v45, 61);
  v48 = (v47 + __ROR8__(v46, 8)) ^ 0x6C85D9D5EEAC54DLL;
  v49 = v48 ^ __ROR8__(v47, 61);
  v50 = (v49 + __ROR8__(v48, 8)) ^ 0x602CFECF54BC3BA7;
  v51 = v50 ^ __ROR8__(v49, 61);
  v52 = (__ROR8__(v50, 8) + v51) ^ 0x2EE49A9BDF81F886;
  v53 = v52 ^ __ROR8__(v51, 61);
  v54 = __ROR8__(v52, 8);
  v55 = (((v53 + v54) ^ 0x9B30CAD63CF39C9CLL) >> v36)
      - ((2 * (((v53 + v54) ^ 0x9B30CAD63CF39C9CLL) >> v36)) & 0x7B1946A4419C867ALL)
      + 0x3D8CA35220CE433DLL;
  v56 = (((v35 + 8) & 0xFFFFFFFFFFFFFFF8) << 56)
      - 0x764EB8E4795C70B2
      + (((v35 + 8) & 0xFFFFFFFFFFFFFFF8) >> (v55 & 8 ^ 8) >> (v55 & 8));
  v57 = v56 ^ 0xB872780C2581A1CELL;
  v56 ^= 0xF5F840D0109DDBBALL;
  v58 = (v56 + (v57 >> 8) + (v57 << 56)) ^ 0x9FEAE3EFA61AD548;
  v59 = v58 ^ __ROR8__(v56, 61);
  v60 = (__ROR8__(v58, 8) + v59) ^ 0x2210426E04724766;
  v61 = v60 ^ __ROR8__(v59, 61);
  v62 = (__ROR8__(v60, 8) + v61) ^ 0x546F9ABB3434D760;
  v63 = v62 ^ __ROR8__(v61, 61);
  v64 = v63 + __ROR8__(v62, 8);
  v65 = v64 ^ __ROR8__(v63, 61);
  *((_QWORD *)&v66 + 1) = v65 ^ 0x6C85D9D5EEAC54DLL;
  *(_QWORD *)&v66 = v65;
  v67 = ((v65 ^ 0x6C85D9D5EEAC54DLL) + __ROR8__(v64 ^ 0x6C85D9D5EEAC54DLL, 8)) ^ 0x602CFECF54BC3BA7;
  v68 = v67 ^ (v66 >> 61);
  v69 = (v68 + __ROR8__(v67, 8)) ^ 0x2EE49A9BDF81F886;
  v70 = ((v69 ^ __ROR8__(v68, 61)) + __ROR8__(v69, 8)) ^ 0x9B30CAD63CF39C9CLL;
  v71 = ((2 * (v70 >> v36)) & 0x7FCACFE6FFDFC5FELL) + ((v70 >> v36) ^ 0xBFE567F37FEFE2FFLL);
  LOBYTE(v68) = 58 - v36;
  v72 = (((v70 << (58 - v36) << 6) ^ 0x6D8485494A3E9679) - 0x6C9B8244438E4680) ^ (((v70 << (58 - v36) << 6) ^ 0xD82BF722395BCA1ELL)
                                                                                    + 0x26CB0FD0CF14E519) ^ (((v70 << (58 - v36) << 6) ^ 0xB5AF726B73655C67) + 0x4B4F8A99852A7362);
  v73 = v35 + 16;
  v74 = (((v55 ^ 0x1E596728217F7404) - 0x1E596728217F7404) ^ ((v55 ^ 0xE155CBC9F87C1C3ALL) + 0x1EAA34360783E3C6) ^ ((v55 ^ 0xC2800FB3F9CD2B03) + 0x3D7FF04C0632D4FDLL))
      + 0x6DBBC763FBC96149
      + v72;
  v75 = (v74 ^ 0xD6EFFAFB2C352AE8) & (2 * (v74 & 0xD0EFE2FB2EB5B2EDLL)) ^ v74 & 0xD0EFE2FB2EB5B2EDLL;
  v76 = ((2 * (v74 ^ 0x56FFFF3B31552F22)) ^ 0xC203B803FC13B9ELL) & (v74 ^ 0x56FFFF3B31552F22) ^ (2 * (v74 ^ 0x56FFFF3B31552F22)) & 0x86101DC01FE09DCELL;
  v77 = v76 ^ 0x8210044000208441;
  v78 = (v76 ^ 0x40019801FC0198CLL) & (4 * v75) ^ v75;
  v79 = ((4 * v77) ^ 0x184077007F82773CLL) & v77 ^ (4 * v77) & 0x86101DC01FE09DCCLL;
  v80 = (v79 ^ 0x15001F801500) & (16 * v78) ^ v78;
  v81 = ((16 * (v79 ^ 0x861008C0006088C3)) ^ 0x6101DC01FE09DCF0) & (v79 ^ 0x861008C0006088C3) ^ (16 * (v79 ^ 0x861008C0006088C3)) & 0x86101DC01FE09DC0;
  v82 = (v81 ^ 0x1C001E009C00) & (v80 << 8) ^ v80;
  v83 = (((v81 ^ 0x861001C001E0010FLL) << 8) ^ 0x101DC01FE09DCF00) & (v81 ^ 0x861001C001E0010FLL) ^ ((v81 ^ 0x861001C001E0010FLL) << 8) & 0x86101DC01FE09D00;
  v84 = v82 ^ 0x86101DC01FE09DCFLL ^ (v83 ^ 0x10000000800000) & (v82 << 16);
  v85 = v74 ^ (2
             * ((v84 << 32) & 0x6101DC000000000 ^ v84 ^ ((v84 << 32) ^ 0x1FE09DCF00000000) & (((v83 ^ 0x86001DC01F6010CFLL) << 16) & 0x6101DC000000000 ^ 0x210000000000000 ^ (((v83 ^ 0x86001DC01F6010CFLL) << 16) ^ 0x1DC01FE000000000) & (v83 ^ 0x86001DC01F6010CFLL))));
  v86 = (__ROR8__(v73, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x764EB8E4795C70B2;
  *(_QWORD *)&v66 = __ROR8__(v86 ^ 0xB872780C2581A1CELL, 8);
  v86 ^= 0xF5F840D0109DDBBALL;
  v87 = (v66 + v86) ^ 0x9FEAE3EFA61AD548;
  v88 = v87 ^ __ROR8__(v86, 61);
  v89 = (__ROR8__(v87, 8) + v88) ^ 0x2210426E04724766;
  *(_QWORD *)&v66 = __ROR8__(v88, 61);
  v90 = v89 ^ v66;
  v91 = ((v89 ^ v66) + (v89 << 56) + (v89 >> 8)) ^ 0x546F9ABB3434D760;
  v92 = v91 ^ __ROR8__(v90, 61);
  v93 = __ROR8__(v91, 8) + v92;
  v94 = v93 ^ __ROR8__(v92, 61);
  *((_QWORD *)&v66 + 1) = v94 ^ 0x6C85D9D5EEAC54DLL;
  *(_QWORD *)&v66 = v94;
  v95 = (__ROR8__(v93 ^ 0x6C85D9D5EEAC54DLL, 8) + (v94 ^ 0x6C85D9D5EEAC54DLL)) ^ 0x602CFECF54BC3BA7;
  v96 = v95 ^ (v66 >> 61);
  v97 = v96 + __ROR8__(v95, 8);
  LODWORD(STACK[0x318]) = (v85 >> 8) ^ 0xFFFFFF89;
  v98 = (((v97 ^ __ROR8__(v96, 61) ^ 0x2E49A9BDF81F886)
        + ((v97 ^ 0x2EE49A9BDF81F886) << 56)
        + ((v97 ^ 0x2EE49A9BDF81F886uLL) >> 8)) ^ 0x330CAD63CF39C9CLL) << v68 << 6;
  v99 = v85 >> 16;
  LODWORD(STACK[0x30C]) = (v85 >> 16) ^ 0x74;
  v100 = (((v98 ^ 0xD2D13F30156B4E52) - 0x1BF9A55BAE778E8ALL) ^ ((v98 ^ 0x8032ACBD24FF748BLL) - 0x491A36D69FE3B453) ^ ((v98 ^ 0x52E3938D31943AD9) + 0x6434F619757705FFLL))
       + 0x38CB006D5F68C11ALL
       + v71
       + 0x69FF9EFFFE7DBDFALL;
  v101 = (v100 ^ 0x77705A2ADC341CC5) & (2 * (v100 & 0x6678930ADD465EC5)) ^ v100 & 0x6678930ADD465EC5;
  v102 = ((2 * (v100 ^ 0x73D17C2EECB08C47)) ^ 0x2B53DE4863EDA504) & (v100 ^ 0x73D17C2EECB08C47) ^ (2 * (v100 ^ 0x73D17C2EECB08C47)) & 0x15A9EF2431F6D282;
  v103 = v102 ^ 0x14A8212410125282;
  v104 = (v102 ^ 0x100CC0021208000) & (4 * v101) ^ v101;
  v105 = ((4 * v103) ^ 0x56A7BC90C7DB4A08) & v103 ^ (4 * v103) & 0x15A9EF2431F6D280;
  v106 = (v105 ^ 0x14A1AC0001D24200) & (16 * v104) ^ v104;
  v107 = ((16 * (v105 ^ 0x108432430249082)) ^ 0x5A9EF2431F6D2820) & (v105 ^ 0x108432430249082) ^ (16 * (v105 ^ 0x108432430249082)) & 0x15A9EF2431F6D280;
  v108 = (v107 ^ 0x1088E20011640000) & (v106 << 8) ^ v106;
  v109 = (((v107 ^ 0x5210D242092D282) << 8) ^ 0xA9EF2431F6D28200) & (v107 ^ 0x5210D242092D282) ^ ((v107 ^ 0x5210D242092D282) << 8) & 0x15A9EF2431F6D200;
  v110 = v108 ^ 0x15A9EF2431F6D282 ^ (v109 ^ 0x1A9242030D20000) & (v108 << 16);
  v111 = v100 ^ (2
               * ((v110 << 32) & 0x15A9EF2400000000 ^ v110 ^ ((v110 << 32) ^ 0x31F6D28200000000) & (((v109 ^ 0x1400CB0401245082) << 16) & 0x15A9EF2400000000 ^ 0x1089CE0000000000 ^ (((v109 ^ 0x1400CB0401245082) << 16) ^ 0x6F2431F600000000) & (v109 ^ 0x1400CB0401245082))));
  LODWORD(STACK[0x300]) = (v111 >> 8) ^ 0xFFFFFFFB;
  v112 = HIDWORD(v85);
  LODWORD(STACK[0x2EC]) = HIDWORD(v85) ^ 0xFFFFFFFB;
  LODWORD(STACK[0x310]) = (v85 >> 24) ^ 0x11;
  LODWORD(STACK[0x314]) = v55 ^ 0x3D;
  v113 = HIWORD(v85);
  LODWORD(STACK[0x2F0]) = HIWORD(v85) ^ 0xFFFFFFCF;
  LODWORD(STACK[0x2F8]) = HIBYTE(v85) ^ 0xFFFFFFD0;
  LODWORD(STACK[0x31C]) = HIWORD(v111) ^ 0x6A;
  LODWORD(STACK[0x2E8]) = v71 + 1;
  LODWORD(STACK[0x308]) = (v111 >> 16) ^ 0xFFFFFFAB;
  v114 = v85 >> 40;
  v115 = (uint64_t (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 + 8 * ((31550 * (a31 != 0)) ^ v39)) - 12);
  LODWORD(STACK[0x2FC]) = (v111 >> 24) ^ 0xFFFFFFBE;
  LODWORD(STACK[0x2E0]) = v114 ^ 0xFFFFFFE2;
  LODWORD(STACK[0x304]) = (v111 >> 40) ^ 0xFFFFFFC9;
  LODWORD(STACK[0x2E4]) = HIDWORD(v111) ^ 0x42;
  LODWORD(STACK[0x2F4]) = HIBYTE(v111) ^ 0x6E;
  return v115(HIWORD(v111), v111 >> 40, v99, v111 >> 16, v112, v113, v111 >> 24, HIDWORD(v111), a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

uint64_t sub_1006FEE94(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, int a5, unsigned __int8 a6, unsigned __int8 a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t (*v76)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78;

  HIDWORD(a30) = v59;
  v61 = ((v57 << (STACK[0x4A0] ^ 0x63u)) & 0xFF00000000 | (v53 << 56) | ((unint64_t)v55 << 48) | ((unint64_t)a3 << 40) | (a5 << 24)) ^ 0x3D897411FB000000;
  v62 = ((v58 << 16) ^ 0x6CD9F4C0C60F0A47) & 0x8B42D7ACF0001 ^ 0xAAF04303708DD198 ^ (((2
                                                                                           * (((v58 << 16) ^ 0x6CD9F4C0C60F0A47) & 0x4408B42D7A300007)) | 0x55F1EE06F15BA332)
                                                                                         - (((v58 << 16) ^ 0x6CD9F4C0C60F0A47) & 0x4408B42D7A300007)
                                                                                         + 0x550708FC87522E67);
  v63 = (v52 ^ 0x98B5E17) & (2 * (v52 & 0x81925F07)) ^ v52 & 0x81925F07;
  v64 = ((2 * (v52 ^ 0xB8BE819)) ^ 0x14336E3C) & (v52 ^ 0xB8BE819) ^ (2 * (v52 ^ 0xB8BE819)) & 0x8A19B71E;
  v65 = v64 ^ 0x8A089102;
  v66 = v63 ^ 0x8A19B71E ^ (v64 ^ 0x11241C) & (4 * v63);
  v67 = (v61 - ((2 * v61) & 0xDAA8641A9A58BCD6) - 0x12ABCDF2B2D3A195) & 0x7321A07F565D9D3BLL ^ 0x63008020421D9912 ^ ((v61 - ((2 * v61) & 0xDAA8641A9A58BCD6) - 0x12ABCDF2B2D3A195) ^ 0x12ABCDF2B2D3A194) & ((((2 * v62) | 0x913F48CF10AA2C54) - v62 + 0x37605B9877AAE9D6) ^ 0x494FE7293A74E9);
  v68 = ((2 * v67) & 0x293E9DF8D8E7C124) - v67;
  v69 = ((((unint64_t)((16 * v66) & 0x10 ^ v66 ^ ((16 * v66) ^ 0x60) & (((4 * v65) ^ 0x2866DC70) & v65 ^ (4 * v65) & 0x10)) << 57) ^ (v52 << 56)) & 0xFF000000FFFFFFFFLL | ((unint64_t)v56 << 48) | ((unint64_t)a4 << 40) | ((unint64_t)a7 << 32) | (a8 << 24)) ^ 0x3BFBABBE42000000;
  v70 = (((2 * ((a1 << 8) ^ 0xFE00u)) & 0x12400) - (((unint64_t)a1 << 8) ^ 0xFE00) - 0x85CC327BD9A92EBLL) ^ 0xC7A96C694261FD94;
  v71 = ((2 * v70) | 0xF599DD131B59314CLL) - v70;
  v72 = (((unint64_t)a2 << 16) ^ 0x2E08080003893A74 | 0x27DED760382B6C83)
      - (((unint64_t)a2 << 16) ^ 0x2E08080003893A74 | 0xD821289FC7D4937CLL)
      - 0x27DED760382B6C84;
  v73 = v72 & 0x84546002E312F0 ^ 0x8480742002E20040 ^ ((v69
                                                          - ((2 * v69) & 0xF61439A0BF01D93ALL)
                                                          + 0x7B0A1CD05F80EC9DLL) ^ 0x305997D9E29C019ALL) & (v72 ^ 0xF629209FC494A908);
  LODWORD(a51) = *(unsigned __int8 *)STACK[0x258];
  LODWORD(a50) = *(unsigned __int8 *)(STACK[0x258] + 2);
  LODWORD(a49) = *(unsigned __int8 *)(STACK[0x258] + 3);
  HIDWORD(a47) = *(unsigned __int8 *)(STACK[0x258] + 9);
  LODWORD(a46) = *(unsigned __int8 *)(STACK[0x258] + 10);
  LODWORD(a48) = *(unsigned __int8 *)(STACK[0x258] + 8);
  LODWORD(a45) = *(unsigned __int8 *)(STACK[0x258] + 11);
  v78 = *(unsigned __int8 *)(STACK[0x258] + 12);
  v74 = v54 ^ (v71 + 0x53311767253675ALL) ^ STACK[0x270] ^ 0x375E4990FB53152CLL ^ (((2 * v73) & 0x9A61463C6933125ALL)
                                                                                 - v73
                                                                                 + 0x32CF5CE1CB6676D2);
  v75 = v51 ^ STACK[0x278] ^ ((((unint64_t)a6 << 8) ^ 0x6600)
                            - ((2 * ((a6 << 8) ^ 0x6600u)) & 0x7200)
                            + 0x1CB46D7258DB3948) & 0x18000002500FFF08 ^ 0xFDBE4EAC6C346848 ^ (v68 + 0x6B60B103938C1F6DLL);
  v76 = (uint64_t (*)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 + 8 * (int)STACK[0x4A0]) - 8);
  LODWORD(a31) = 1;
  LODWORD(STACK[0x284]) = 1;
  return v76(v74, LODWORD(STACK[0x45C]), LODWORD(STACK[0x454]), LODWORD(STACK[0x49C]), LODWORD(STACK[0x458]), LODWORD(STACK[0x4AC]), v75, LODWORD(STACK[0x4A8]), a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           v78);
}

uint64_t sub_1006FF838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  int v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 + 8 * v61) - ((v61 - 14118) | 0x92u) + 4814);
  STACK[0x3D8] = a7;
  return v63(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61);
}

uint64_t sub_1006FF86C@<X0>(unint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  LODWORD(STACK[0x3CC]) = 0;
  STACK[0x270] = a1;
  LODWORD(STACK[0x284]) = v2;
  STACK[0x278] = STACK[0x3D8];
  LODWORD(STACK[0x2D8]) = v3;
  v7 = (a2 - 374);
  v8 = *(_QWORD *)(v6 + 8 * a2);
  STACK[0x500] = v7;
  STACK[0x3D8] = 0xA6681DD9E71B0F5BLL;
  STACK[0x3D0] = 0xA6681DD9E71B0F5BLL;
  STACK[0x3B8] = v4;
  STACK[0x3C0] = v5;
  return ((uint64_t (*)(void))(v8 - (v7 ^ 0x1168)))();
}

uint64_t sub_1006FF8E0@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(void);

  v4 = ((v2 ^ 0x1ACE) - 4822) | 0x1160u;
  STACK[0x500] = v4;
  v5 = (v4 + 16925);
  STACK[0x508] = v5;
  v6 = (a1 << (v5 - 97)) ^ STACK[0x4C0];
  v7 = HIDWORD(v1) ^ (STACK[0x470] >> 1) | (STACK[0x4C0] << 63);
  v8 = (STACK[0x470] << 62) ^ (STACK[0x470] << 63) ^ (STACK[0x470] << 57);
  STACK[0x3D0] ^= (STACK[0x4C0] << 62) ^ (STACK[0x4C0] << 57) ^ STACK[0x470] ^ (STACK[0x470] >> 2) ^ (STACK[0x470] >> 7) ^ STACK[0x4C8] ^ v7 ^ 0x62117213;
  STACK[0x3D8] ^= STACK[0x478] ^ (v8 >> 1) ^ (v8 >> 2) ^ (v8 >> 7) ^ v6 ^ (v6 >> 2) ^ (v6 >> 1) ^ (v6 >> 7) ^ v8 ^ 0xB79E05FF86000000;
  v9 = (uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 ^ 0x1ACE ^ (8985 * (STACK[0x3CC] & 1)))) - 12);
  LODWORD(STACK[0x3CC]) = 1;
  return v9();
}

uint64_t sub_1006FF9E4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);

  LODWORD(STACK[0x508]) = 0;
  STACK[0x4C0] = 0;
  STACK[0x470] = 0;
  STACK[0x478] = 0;
  STACK[0x4C8] = 0;
  v5 = STACK[0x500];
  v6 = v2;
  v7 = (v3 >> (STACK[0x500] - 68)) ^ 0xA6681DD941731282;
  v8 = (v0 ^ v6) >> 32;
  STACK[0x438] = v8 ^ 0xA6681DD9E71B0F5BLL;
  v9 = v1 ^ v3;
  STACK[0x430] = HIDWORD(v6) ^ 0xA6681DD941731282;
  STACK[0x428] = HIDWORD(v1) ^ 0xA6681DD941731282;
  STACK[0x460] = v1;
  v10 = v1 ^ 0xA6681DD9 ^ HIDWORD(v1);
  STACK[0x420] = v10;
  STACK[0x3E8] = v10 ^ v3 ^ v7;
  STACK[0x440] = v0;
  STACK[0x3E0] = v0 ^ 0xA6681DD9E71B0F5BLL ^ v6 ^ v8;
  STACK[0x418] = v0 ^ 0xA6681DD9E71B0F5BLL ^ HIDWORD(v0) ^ 0xA6681DD941731282;
  STACK[0x468] = v3;
  STACK[0x410] = v7 ^ v3 ^ 0xA6681DD9E71B0F5BLL;
  STACK[0x408] = v0 ^ v6 ^ 0xA6681DD9E71B0F5BLL;
  STACK[0x448] = v6;
  STACK[0x400] = v6 ^ 0xA6681DD9 ^ HIDWORD(v6);
  STACK[0x3F8] = v9 ^ 0xA6681DD9E71B0F5BLL;
  v11 = (uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (int)v5) - 4);
  STACK[0x3F0] = HIDWORD(v9) ^ 0xA6681DD9E71B0F5BLL;
  return v11();
}

uint64_t sub_1006FFAF0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = HIDWORD(v2) ^ 0x62117213;
  STACK[0x478] = v1 ^ (STACK[0x478] + 0x341C0974BDDEE8DLL - ((2 * STACK[0x478]) & 0x683812E97BBDD1ALL)) ^ v5;
  v6 = STACK[0x4C8] + 0x341C0974BDDEE8DLL - ((STACK[0x4C8] << (a1 - 21)) & 0x683812E97BBDD1ALL);
  v7 = v3 << 32;
  STACK[0x4C0] ^= v7;
  v8 = *(_QWORD *)(v4 + 8 * a1);
  STACK[0x4C8] = v1 ^ v7 ^ v5 ^ v6;
  return ((uint64_t (*)(void))(v8 - 12))();
}

uint64_t sub_1006FFBA4()
{
  int v0;
  int v1;
  uint64_t v2;

  LODWORD(STACK[0x508]) = v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * v0) - (((v0 + 13996) | 0x10C8u) ^ 0x58DCLL)))();
}

uint64_t sub_1006FFBCC()
{
  unsigned int v0;
  unsigned int v1;
  int v2;
  unint64_t v3;
  char v4;
  char v5;

  v3 = (((2 * (v1 ^ 0x1164012A71B869FLL)) | 0x668C112579D2B96ELL) - (v1 ^ 0x1164012A71B869FLL) + 0x4CB9F76D4316A349) ^ 0xB2504880FCE9D573;
  STACK[0x500] = v3 >> (~((v0 ^ 0x17C89099) << ((v2 - 114) & 0xBB ^ 0x27)) & 0x20);
  STACK[0x4E8] = v3 >> ((16 * v0) & 0x20);
  STACK[0x4E0] = v3 >> (~(8 * v0) & 0x20);
  STACK[0x4F8] = v3 >> (~(4 * (v0 ^ 0x99)) & 0x20);
  v4 = (((~(2 * (v0 ^ 0x99)) & 0x20 | 0xC4) ^ 0x3B) + 60) ^ 0x80;
  STACK[0x4F0] = v3 >> (v4 & 0x53 ^ 0x13u) >> (~v4 & 0xA8);
  STACK[0x4D8] = v3 >> (~(v0 >> 2) & 0x20);
  v5 = ((((~((v0 >> 5) & 0x20) & 0x20) + ((v0 >> 5) & 0x20 | 0x84)) | 0x19) - ((v0 >> 5) & 0x20 | 0x84)) ^ 0x62;
  STACK[0x4D0] = v3 >> (v5 & 0x8B ^ 0xBu) >> (v5 & 0x70 ^ 0x50u);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x4B8] + 8 * v2) - 4))();
}

uint64_t sub_10070015C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;

  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5
                                                                               + 8
                                                                               * (((((a5 - 8879) | 0x1100) - 12642)
                                                                                 * (SLODWORD(STACK[0x508]) > 3)) ^ a5))
                                                                   - (((a5 + 5382) | 0x484u) ^ 0x5CA8)))(LODWORD(STACK[0x484]), a2, a3, LODWORD(STACK[0x49C]));
}

uint64_t sub_1007001DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v6
                                                                                       + 8
                                                                                       * ((7
                                                                                         * (((v5 < 6) ^ ((v4 ^ 0x80) + 96)) & 1)) ^ v4))
                                                                           - 8))(a1, LODWORD(STACK[0x45C]), LODWORD(STACK[0x454]), a4, LODWORD(STACK[0x458]));
}

uint64_t sub_100700220()
{
  int v0;
  int v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = v1 >= 3467 * (((v0 - 8384) | 0x2680) ^ 0x26B1) - 6927;
  return (*(uint64_t (**)(void))(v2 + 8 * ((v3 | (4 * v3)) ^ v0)))();
}

uint64_t sub_100700260()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)(((((v0 - 7839) ^ 0xFFFFED2B) + ((v0 - 7839) | 0x1302)) * (v1 == 7)) ^ v0))
                            - 8))();
}

uint64_t sub_100700298()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = (v1 >> (((v0 - 40) & 0x75u) - 68)) ^ 0x62117213;
  STACK[0x4C8] ^= v4;
  STACK[0x4C0] ^= (v2 << 32) ^ v4;
  v5 = *(_QWORD *)(v3 + 8 * v0);
  STACK[0x470] ^= v2 << 32;
  return ((uint64_t (*)(void))(v5 - 12))();
}

uint64_t sub_10070030C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)((((v0 - 10744) ^ 0x6C5B ^ (v0 + 2037916497) & 0x8687DF67) * (v1 < 2)) ^ v0))
                            - 4))();
}

uint64_t sub_10070035C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((11 * (v1 < v0 - 24420)) ^ v0)) - ((v0 - 22351) | 0x1300u) + 6926))();
}

uint64_t sub_10070039C()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = v3 << 32;
  v6 = STACK[0x4C8];
  v7 = (v3 << 32) ^ STACK[0x4C8];
  v8 = HIDWORD(v2) ^ 0x62117213;
  STACK[0x478] ^= v8;
  v9 = STACK[0x4C0] + 0x341C0974BDDEE8DLL - ((2 * STACK[0x4C0]) & 0x683812E97BBDD1ALL);
  STACK[0x4C8] = v8 ^ v0 ^ (v7
                          + 0x341C0974BDDEE8DLL
                          - 2 * (((v1 - 19969) ^ 0x341C0974BDDFFEBLL) & v7 ^ v6 & 2));
  v10 = *(_QWORD *)(v4 + 8 * ((v1 + 173138729) ^ 0xA5245C0 ^ (7256 * ((v1 + 173138729) < 0x3DF0A6CA))));
  STACK[0x4C0] = v5 ^ v9 ^ v0;
  return ((uint64_t (*)(void))(v10 - 12))();
}

uint64_t sub_100700488()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((v1 >= 3467 * (v0 ^ 0x4D51) - 6929) * (((2 * v0) ^ 0x81B0) - 6710)) ^ v0))
                            - 12))();
}

uint64_t sub_1007004CC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  STACK[0x4C0] ^= v3 << (((2 * a1) ^ 0x48u) - 68);
  v5 = *(_QWORD *)(v4 + 8 * a1);
  STACK[0x4C8] ^= v1 ^ ((HIDWORD(v2) ^ 0x62117213)
                      + 0x341C0974BDDEE8DLL
                      - ((2 * (HIDWORD(v2) ^ 0x62117213)) & 0x97BBDD1A));
  return ((uint64_t (*)(void))(v5 - 12))();
}

uint64_t sub_100700548()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((15 * (((v1 < 3) ^ (v0 - 1)) & 1)) ^ v0)) - 4))();
}

uint64_t sub_100700584@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  STACK[0x4C8] ^= v2;
  STACK[0x4C0] = v2 ^ v1 ^ ((a1 ^ STACK[0x4C0])
                          + 0x341C0974BDDEE8DLL
                          - (((a1 ^ STACK[0x4C0]) & 0x341C0974BDDEEAFLL ^ STACK[0x4C0] & 0x22) << (((((v3 + 80) | 0x12) - 41) & 0x76u)
                                                                                                 - 99)));
  v5 = *(_QWORD *)(v4 + 8 * ((v3 - 10928) | 0x1312));
  STACK[0x470] = a1 ^ (STACK[0x470] + 0x341C0974BDDEE8DLL - ((2 * STACK[0x470]) & 0x683812E97BBDD1ALL)) ^ v1;
  return ((uint64_t (*)(void))(v5 - 12))();
}

uint64_t sub_10070064C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;

  STACK[0x4C8] ^= 0x62117213 ^ HIDWORD(v1);
  v5 = (v2 << ((6 * (v3 ^ 0xF0)) ^ 0x44u)) ^ STACK[0x4C0];
  STACK[0x4C0] = (v5 + 0x341C0974BDDEE8DLL - 2 * (v5 & 0x341C0974BDDEEADLL ^ STACK[0x4C0] & 0x20)) ^ v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * v3) - 12))();
}

uint64_t sub_1007006D0()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = HIDWORD(v1) ^ 0x62117213;
  STACK[0x478] ^= v4;
  STACK[0x4C8] ^= (v2 << 32) ^ v4;
  STACK[0x4C0] ^= v2 << 32;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * v0) - ((v0 - 2482) ^ 0x1168)))();
}

uint64_t sub_100700730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  STACK[0x4C8] = v2 ^ v1 ^ (STACK[0x4C8]
                          + 0x341C0974BDDEE8DLL
                          - (((v3 - 8528) + 0x683812E97BBCBB6) & (2 * STACK[0x4C8])));
  STACK[0x4C0] = ((v2 ^ STACK[0x4C0] ^ a1)
                + 0x341C0974BDDEE8DLL
                - 2 * ((v2 ^ STACK[0x4C0] ^ a1) & 0x341C0974BDDEEADLL ^ (v2 ^ STACK[0x4C0]) & 0x20)) ^ v1;
  v5 = *(_QWORD *)(v4 + 8 * (v3 - 6046));
  STACK[0x470] ^= a1;
  return ((uint64_t (*)(void))(v5 - 12))();
}

uint64_t sub_1007007D0()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;

  STACK[0x4F0] = v1;
  STACK[0x500] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)((((482 * (STACK[0x508] ^ 0x53A6) - 12293) ^ (STACK[0x508] - 13455))
                                               * (LODWORD(STACK[0x2D8]) != 0)) ^ STACK[0x508]))
                            - 12))();
}

uint64_t sub_100700824()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * (v0 ^ ((2 * (LODWORD(STACK[0x284]) == 0)) | (16 * (LODWORD(STACK[0x284]) == 0)))))
                                          - ((((v0 - 18132) | 0x1040u) + 20099) ^ 0x6151)))(v1);
}

uint64_t sub_10070087C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30)
{
  int v30;
  uint64_t v31;

  return ((uint64_t (*)(void))(*(_QWORD *)(v31 + 8 * (v30 ^ ((2 * (a30 != 0)) | (32 * (a30 != 0)))))
                            - ((v30 - 1806297022) & 0x6BA9D77E)
                            + 20754))();
}

uint64_t sub_1007008C0()
{
  int v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v2 = *(uint64_t (**)(void))(v1 + 8 * (v0 - 10570));
  LODWORD(STACK[0x290]) = 239;
  LODWORD(STACK[0x288]) = 241;
  LODWORD(STACK[0x28C]) = 74;
  LODWORD(STACK[0x294]) = 79;
  LODWORD(STACK[0x298]) = 161;
  LODWORD(STACK[0x29C]) = 154;
  LODWORD(STACK[0x2A0]) = 42;
  LODWORD(STACK[0x2D0]) = 1749228018;
  LODWORD(STACK[0x2A4]) = 217;
  LODWORD(STACK[0x2A8]) = 57;
  LODWORD(STACK[0x2AC]) = 176;
  LODWORD(STACK[0x2B4]) = 72;
  LODWORD(STACK[0x2B0]) = 229;
  LODWORD(STACK[0x2B8]) = 209;
  LODWORD(STACK[0x2C8]) = -2013489916;
  LODWORD(STACK[0x2BC]) = 55;
  LODWORD(STACK[0x2D4]) = -1035515668;
  LODWORD(STACK[0x2CC]) = -806779838;
  LODWORD(STACK[0x2C0]) = 160;
  LODWORD(STACK[0x2C4]) = 238;
  return v2();
}

uint64_t sub_100700988()
{
  unint64_t v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = HIBYTE(STACK[0x4F0]);
  v4 = (_BYTE *)STACK[0x320];
  v4[1] = BYTE6(v0) ^ 0xF6;
  *v4 = v3 ^ 0x11;
  v4[3] = BYTE4(v0) ^ 0x26;
  v4[4] = BYTE3(v0) ^ 0x61;
  v4[2] = (v0 >> (v1 - 53)) ^ 0x18;
  v4[5] = BYTE2(v0) ^ 0x1B;
  v4[6] = BYTE1(v0) ^ 0xF;
  v4[7] = v0 ^ 0x5B;
  v5 = STACK[0x500];
  v6 = STACK[0x500] >> 40;
  v7 = HIWORD(STACK[0x500]);
  v4[8] = HIBYTE(STACK[0x500]) ^ 0xA6;
  v4[10] = v6 ^ 0x1D;
  v4[9] = v7 ^ 0x68;
  v4[12] = BYTE3(v5) ^ 0x85;
  v4[13] = BYTE2(v5) ^ 0xA;
  v4[11] = BYTE4(v5) ^ 0xD9;
  v4[15] = v5 ^ 0x48;
  v4[14] = BYTE1(v5) ^ 0x7D;
  return (*(uint64_t (**)(void))(v2 + 8 * ((9540 * (v1 != 1965567247)) ^ (v1 - 24269))))();
}

uint64_t sub_100700AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t (*v85)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v37 = (v33 ^ 0x7D94u) - 3480;
  STACK[0x448] = v37;
  v38 = ((v37 - 0x800000000001EF2) & (v35 << 56) & 0xFF00000000000000 | (v35 >> 8)) - 0x764EB8E4795C70B2;
  v39 = __ROR8__(v38 ^ 0xB872780C2581A1CELL, 8);
  v38 ^= 0xF5F840D0109DDBBALL;
  v40 = (v39 + v38) ^ 0x9FEAE3EFA61AD548;
  v41 = v40 ^ __ROR8__(v38, 61);
  LOBYTE(v38) = 8 * (v35 & 7);
  v42 = (__ROR8__(v40, 8) + v41) ^ 0x2210426E04724766;
  v43 = v42 ^ __ROR8__(v41, 61);
  LODWORD(STACK[0x508]) = v34 != 0;
  v44 = (__ROR8__(v42, 8) + v43) ^ 0x546F9ABB3434D760;
  LODWORD(STACK[0x4F8]) = v33 - 1617;
  v45 = v44 ^ __ROR8__(v43, 61);
  v46 = (__ROR8__(v44, 8) + v45) ^ 0x6C85D9D5EEAC54DLL;
  v47 = v46 ^ __ROR8__(v45, 61);
  v48 = (v47 + __ROR8__(v46, 8)) ^ 0x602CFECF54BC3BA7;
  v49 = v48 ^ __ROR8__(v47, 61);
  v50 = (v49 + __ROR8__(v48, 8)) ^ 0x2EE49A9BDF81F886;
  v51 = __ROR8__(v50, 8) + (v50 ^ __ROR8__(v49, 61));
  v52 = ((v35 + 8) >> 8) - 0x764EB8E4795C70B2 + ((v35 + 8) >> 3 << 59);
  v53 = (v51 ^ 0x9B30CAD63CF39C9CLL) >> v38;
  v54 = v52 ^ 0xF5F840D0109DDBBALL;
  v55 = (__ROR8__(v52 ^ 0xB872780C2581A1CELL, 8) + (v52 ^ 0xF5F840D0109DDBBALL)) ^ 0x9FEAE3EFA61AD548;
  v56 = v55 ^ __ROR8__(v54, 61);
  v57 = (__ROR8__(v55, 8) + v56) ^ 0x2210426E04724766;
  v58 = v57 ^ __ROR8__(v56, 61);
  v59 = (__ROR8__(v57, 8) + v58) ^ 0x546F9ABB3434D760;
  v60 = v59 ^ __ROR8__(v58, 61);
  v61 = (v60 + __ROR8__(v59, 8)) ^ 0x6C85D9D5EEAC54DLL;
  v62 = v61 ^ __ROR8__(v60, 61);
  v63 = (v62 + __ROR8__(v61, 8)) ^ 0x602CFECF54BC3BA7;
  v64 = v63 ^ __ROR8__(v62, 61);
  v65 = (v64 + __ROR8__(v63, 8)) ^ 0x2EE49A9BDF81F886;
  v66 = (__ROR8__(v65, 8) + (v65 ^ __ROR8__(v64, 61))) ^ 0x9B30CAD63CF39C9CLL;
  v67 = v66 >> v38;
  LOBYTE(v38) = v38 ^ 0x3B;
  STACK[0x378] = v53;
  v68 = v53 + 32 * (v66 << v38);
  v69 = (__ROR8__(v35 + 16, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x764EB8E4795C70B2;
  v70 = v69 ^ 0xB872780C2581A1CELL;
  v69 ^= 0xF5F840D0109DDBBALL;
  v71 = (__ROR8__(v70, 8) + v69) ^ 0x9FEAE3EFA61AD548;
  v72 = v71 ^ __ROR8__(v69, 61);
  v73 = (__ROR8__(v71, 8) + v72) ^ 0x2210426E04724766;
  v74 = v73 ^ __ROR8__(v72, 61);
  v75 = (__ROR8__(v73, 8) + v74) ^ 0x546F9ABB3434D760;
  v76 = v75 ^ __ROR8__(v74, 61);
  v77 = __ROR8__(v75, 8) + v76;
  v78 = v77 ^ __ROR8__(v76, 61);
  *((_QWORD *)&v79 + 1) = v78 ^ 0x6C85D9D5EEAC54DLL;
  *(_QWORD *)&v79 = v78;
  v80 = (__ROR8__(v77 ^ 0x6C85D9D5EEAC54DLL, 8) + (v78 ^ 0x6C85D9D5EEAC54DLL)) ^ 0x602CFECF54BC3BA7;
  v81 = v80 ^ (v79 >> 61);
  v82 = (__ROR8__(v80, 8) + v81) ^ 0x2EE49A9BDF81F886;
  v83 = v82 ^ __ROR8__(v81, 61);
  *(_QWORD *)&v79 = __ROR8__(v82, 8);
  STACK[0x328] = v68 >> 8;
  STACK[0x3A0] = HIDWORD(v68);
  STACK[0x368] = v68 >> 24;
  STACK[0x390] = v68 >> 40;
  STACK[0x370] = v67;
  v84 = v67
      + 32
      * (((((_QWORD)v79 + v83 + (((_QWORD)v79 + v83) ^ 0x4CF3529C30C6363) + 1) ^ 0x7FFFFFFFFFFFFF8)
        + (_QWORD)v79
        + v83) << v38);
  STACK[0x340] = v68 >> 16;
  STACK[0x358] = v84 >> 8;
  STACK[0x348] = HIBYTE(v68);
  STACK[0x360] = HIWORD(v68);
  STACK[0x398] = HIWORD(v84);
  STACK[0x350] = v84 >> 24;
  STACK[0x388] = HIBYTE(v84);
  LODWORD(v40) = (4 * LODWORD(STACK[0x508])) | (16 * LODWORD(STACK[0x508]));
  STACK[0x380] = HIDWORD(v84);
  LODWORD(v67) = LODWORD(STACK[0x4F8]) ^ v40;
  STACK[0x330] = v84 >> 16;
  v85 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 + 8 * (int)v67) - 12);
  STACK[0x338] = v84 >> 40;
  return v85(a1, 0xF5F840D0109DDBBALL, 0xB872780C2581A1CELL, a4, 0x89B1471B86A38F4ELL, 0x9FEAE3EFA61AD548, a7, 0x546F9ABB3434D760, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33);
}

uint64_t sub_100700E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  BOOL v21;

  STACK[0x258] += 16;
  STACK[0x320] += 16;
  v18 = LODWORD(STACK[0x254]) + 588657714;
  v19 = (a16 < 0xA11C0242) ^ (v18 < 0xA11C0242);
  v20 = v18 < a16;
  if (v19)
    v21 = a16 < 0xA11C0242;
  else
    v21 = v20;
  return ((uint64_t (*)(void))(*(_QWORD *)(v17
                                        + 8
                                        * ((((v21 ^ v16 ^ 0x95) & 1) * ((v16 - 1800) ^ 0x6ACC)) ^ v16))
                            - 12))();
}

uint64_t sub_100700E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t (*v26)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;

  v25 = STACK[0x270] ^ 0xA6681DD9E71B0F5BLL ^ STACK[0x3D8];
  v26 = (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 + 8 * v23) - 8);
  LODWORD(STACK[0x304]) = STACK[0x338];
  LODWORD(STACK[0x31C]) = STACK[0x398];
  LODWORD(STACK[0x2F8]) = STACK[0x348];
  LODWORD(STACK[0x318]) = STACK[0x328];
  LODWORD(STACK[0x254]) = v22;
  LODWORD(STACK[0x2EC]) = STACK[0x3A0];
  LODWORD(STACK[0x2E0]) = STACK[0x390];
  LODWORD(STACK[0x30C]) = STACK[0x340];
  LODWORD(STACK[0x2E8]) = STACK[0x370];
  LODWORD(STACK[0x2E4]) = STACK[0x380];
  LODWORD(STACK[0x2FC]) = STACK[0x350];
  LODWORD(STACK[0x2F0]) = STACK[0x360];
  LODWORD(STACK[0x300]) = STACK[0x358];
  LODWORD(STACK[0x314]) = STACK[0x378];
  LODWORD(STACK[0x308]) = STACK[0x330];
  v27 = STACK[0x278];
  LODWORD(STACK[0x2F4]) = STACK[0x388];
  LODWORD(STACK[0x310]) = STACK[0x368];
  return v26(v25, a2, a3, a4, a5, a6, v27, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
}

#error "10070194C: call analysis failed (funcsize=546)"

uint64_t sub_100701950()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ (231 * (LODWORD(STACK[0x2D8]) != 0))))
                            - (v0 - 634)
                            + 8927))();
}

uint64_t sub_100701984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t a66;
  unint64_t a67;
  int a68;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;

  LODWORD(a16) = v68;
  LODWORD(a39) = v74;
  LODWORD(STACK[0x4A0]) = v72;
  LODWORD(STACK[0x490]) = v73;
  LODWORD(STACK[0x48C]) = v71;
  HIDWORD(a30) = v70;
  v85 = STACK[0x278] >> ((v69 - 127) ^ 0x54u);
  STACK[0x2D8] = (unint64_t)*(&off_1015B46D0 + (v69 ^ 0x21CD)) - 8;
  v76 = ((2 * (BYTE1(a67) ^ 0x3ELL)) | 0x7E13C77BB12F3A4CLL) - (BYTE1(a67) ^ 0x3ELL) - 0x3F09E3BDD8979D26;
  v90 = ((v76 & 0xBE9AB1F4E3F3419 ^ 0xE1080B060C2418)
       + (v76 ^ 0xAF1AE3D4D8B31927)
       - ((v76 ^ 0xAF1AE3D4D8B31927) & 0xBE9AB1F4E3F3419)) ^ 0x9BFAAB764E1BB0D4;
  v77 = ((2 * (a67 ^ 0xF4)) | 0x5B0C4C91AEFA43CALL)
      - (a67 ^ 0xF4)
      - 0x2D862648D77D21E5;
  v89 = ((v77 & 0x597E51A4C10E2646 ^ 0x50745104800A0404)
       + (v77 ^ 0x2D8A26EA53752343)
       - ((v77 ^ 0x2D8A26EA53752343) & 0x597E51A4C10E2646)) ^ 0x59725106450624B2;
  v78 = (((2 * (BYTE6(a66) ^ 0x93u)) & 0x5CLL) - (BYTE6(a66) ^ 0x93) - 0x56C13392AB084D2FLL) ^ 0xAA32FC4F9CFEAB93;
  v88 = (((2 * v78) | 0x52B483D1ACED9E3ALL) - v78 + 0x56A5BE17298930E3) ^ 0xAA5671CA1E7FD659;
  v79 = ((a66 >> 40) & 4 ^ 0x1B9550CC4CDF2D04) - ((a66 >> 40) & 4) + (BYTE5(a66) ^ 0xB0);
  v87 = ((v79 & 0x1A8010884045075FLL ^ 0x8400AF139220005ALL)
       + (v79 ^ 0x7ABC50884D55AFA5)
       - ((v79 ^ 0x7ABC50884D55AFA5) & 0x41000040010A035FLL)) ^ 0xBEA9BF9FD2E585AELL;
  v80 = (0x384C5B991AA9DAADLL
       - (BYTE2(a66) ^ 0x66 | 0x384C5B991AA9DAADLL)
       + (BYTE2(a66) ^ 0x66 | 0xC7B3A466E5562552)) ^ 0x54BB247664562D72;
  v86 = (v80 - ((2 * v80) & 0x4EB5162DF6674724) + 0x275A8B16FB33A392) ^ 0xB4520B067A33AB32;
  v81 = ((a66 ^ 0x59) + (a66 & 0x1B ^ 0x6E8F109F5C57B302) - ((a66 ^ 0x59) & 0x1B)) ^ 0x6FCD20924577F119;
  v82 = v81 - ((2 * v81) & 0x20420000200B060) - 0x265274F5E78A7D0;
  LODWORD(v81) = a68 & 0x72 ^ 0x7C;
  HIDWORD(a47) = 2
               * ((a68 ^ 0x18) & (2
                                * ((a68 ^ 0x18) & (2
                                                 * ((a68 ^ 0x18) & (2
                                                                  * ((a68 ^ 0x18) & (2 * ((a68 ^ 0x18) & (2 * v81) ^ v81)) ^ v81)) ^ v81)) ^ v81)) ^ v81);
  v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v75 + 8 * v69);
  LODWORD(STACK[0x440]) = 1;
  HIDWORD(a42) = (BYTE4(a38) >> 5) | (8 * HIDWORD(a38));
  return v83(a1, a2, a3, a4, a5, a6, a7, (v69 + 1921), a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           v85,
           a41,
           a42,
           HIBYTE(a66) ^ 0x5B,
           a66 ^ 0xA39261757E440405,
           a67 ^ 0x33AA121932436F65,
           v82 ^ 0xFCD8E8BDB8A71ACDLL,
           a47,
           HIBYTE(a67) ^ 0x5B,
           (((a66 >> 8) & 0xA4 ^ 0xFD412E3F433CAFA1) + ((a66 >> 8) & 0x5B) - 1) ^ 0xFD412E3F433CAF52,
           v86,
           ((BYTE3(a66) ^ 0x44101100181404DFLL)
          - ((2 * (BYTE3(a66) ^ 0x44101100181404DFLL)) & 0x8020020030000982)
          + 0x41DA09FBFB4244C1) ^ 0x5CA18FBE3564004,
           (0x1633FBAB8B5AD65CLL
          - (BYTE4(a66) ^ 0x76EDFC14626F8181 | 0x1633FBAB8B5AD65CLL)
          + (BYTE4(a66) ^ 0x76EDFC14626F8181 | 0xE9CC045474A529A3)) ^ 0x9F21F84016CAA806,
           v87,
           v88,
           v89,
           v90,
           BYTE2(a67) ^ 0xE6,
           (0x9E47B661533E23ECLL
          - (BYTE3(a67) ^ 0xA008C000222410A7 | 0x9E47B661533E23ECLL)
          + (BYTE3(a67) ^ 0xA008C000222410A7 | 0x61B8499EACC1DC13)) ^ 0xC1B0899E8EE5CCAELL,
           (0x93507BDE14E42334
          - (BYTE4(a67) ^ 0xD6 | 0x93507BDE14E42334)
          + (BYTE4(a67) ^ 0xD6 | 0x6CAF8421EB1BDCCBLL)) ^ 0x6CAF8421EB1BDC39,
           (((a67 >> 40) & 0x73 ^ 0x862) + ((a67 >> 40) & 0x8C ^ 9) - 1) ^ 0x88A,
           BYTE6(a67) ^ 0x95);
}

uint64_t sub_100702008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a70;
  int a71;
  int a72;
  int a73;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;

  LODWORD(STACK[0x440]) = 0;
  LODWORD(STACK[0x4F8]) = 0;
  LODWORD(STACK[0x430]) = v83;
  STACK[0x428] = (v83 + 1921);
  v85 = STACK[0x2D8];
  v86 = __ROR8__(*(_QWORD *)(STACK[0x2D8] + 8 * a48), 22);
  STACK[0x4C0] = v75;
  v87 = __ROR8__(*(_QWORD *)(v85 + 8 * a61), 22);
  v88 = __ROR8__(*(_QWORD *)(v85 + 8 * a60), 22);
  STACK[0x468] = a6;
  STACK[0x420] = ((v88 >> 4) ^ (v88 >> 1) ^ 0x1D3469D15C2AEE6CLL)
               - 2
               * (((v88 >> 4) ^ (v88 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x7D2C859B1EB1CA73 ^ ((v88 >> 4) ^ (v88 >> 1)) & 0x12);
  v89 = __ROR8__(*(_QWORD *)(v85 + 8 * a59), 22);
  STACK[0x460] = a8;
  v90 = *(_QWORD *)(v85 + 8 * a58);
  STACK[0x478] = v74;
  STACK[0x470] = v76;
  v91 = __ROR8__(v90, 22);
  STACK[0x500] = v77;
  STACK[0x418] = ((v91 >> 4) ^ (v91 >> 1) ^ 0x1D3469D15C2AEE6CLL)
               - 2
               * (((v91 >> 4) ^ (v91 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x73BFDB611F2F7569 ^ ((v91 >> 4) ^ (v91 >> 1)) & 1);
  v92 = *(_QWORD *)(v85 + 8 * a57);
  STACK[0x4D0] = v73;
  v93 = __ROR8__(v92, 22);
  STACK[0x448] = v78;
  v94 = *(_QWORD *)(v85 + 8 * a56);
  STACK[0x4C8] = v79;
  v95 = __ROR8__(v94, 22);
  v96 = *(_QWORD *)(v85 + 8 * a55);
  STACK[0x4D8] = v80;
  v97 = __ROR8__(v96, 22);
  STACK[0x4E8] = v81;
  LODWORD(v96) = HIDWORD(a42) ^ 0xFFFFFFC4 ^ ((STACK[0x328] >> 5) | (8 * STACK[0x328]));
  v98 = __ROR8__(*(_QWORD *)(v85 + 8 * a43), 22);
  v99 = __ROR8__(*(_QWORD *)(v85 + 8 * a54), 22);
  v100 = __ROR8__(*(_QWORD *)(v85 + 8 * a53), 22);
  v101 = (((v89 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v89 >> 1))
        - ((2 * ((v89 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v89 >> 1))) & 0xCE56D82AAD24)
        + 0xE72B6C155692) ^ v89;
  v102 = __ROR8__(*(_QWORD *)(v85 + 8 * a52), 22);
  LODWORD(STACK[0x2D4]) = (((((v87 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v87 >> 1))
                           - ((2 * ((v87 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v87 >> 1))) & 0x25E59F38A39914EELL)
                           + 0x12F2CF9C51CC8A77) ^ v87) >> 32) ^ (((((v86 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v86 >> 1))
                                                                    - ((2
                                                                      * ((v86 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v86 >> 1))) & 0x3E606245C36A2CLL)
                                                                    - 0x2EE0CFCEDD1E4AEALL) ^ v86) >> 24) ^ (((STACK[0x420] + 0x7D2C869B1EB1CA61) ^ v88) >> 8) ^ (v101 >> 16) ^ 0xB524479D;
  v103 = (STACK[0x418] - 0xC40249EE0D08A98) ^ v91;
  v104 = __ROR8__(*(_QWORD *)(v85 + 8 * a51), 22);
  v105 = __ROR8__(*(_QWORD *)(v85 + 8 * a50), 22);
  v106 = (v103 >> 8) ^ (((((v93 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v93 >> 1))
                        - ((2 * ((v93 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v93 >> 1))) & 0x733E11729084)
                        - 0x597B4660F746B7BELL) ^ v93) >> 16) ^ (((((v95 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v95 >> 1))
                                                                 - ((2 * ((v95 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v95 >> 1))) & 0xDB8ED569434DF6)
                                                                 + 0x7EDC76AB4A1A6FBLL) ^ v95) >> 24);
  v107 = (((v97 >> 4) ^ (v97 >> 1) ^ 0x1D3469D15C2AEE6CLL)
        - 2 * (((v97 >> 4) ^ (v97 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x2E94D2885B8F087FLL ^ ((v97 >> 4) ^ (v97 >> 1)) & 1)
        - 0x516B2D77A470F782) ^ v97;
  v108 = __ROR8__(*(_QWORD *)(v85 + 8 * a49), 22);
  LODWORD(STACK[0x2D0]) = v106 ^ HIDWORD(v107) ^ 0x5F00FB0C;
  v109 = __ROR8__(*(_QWORD *)(v85 + 8 * a46), 22);
  v110 = (v109 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v109 >> 1);
  v111 = (((v99 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v99 >> 1))
        - ((2 * ((v99 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v99 >> 1))) & 0x4095A1D8106614)
        + 0x17204AD0EC08330ALL) ^ v99;
  v112 = (2 * v110) & 0xA013CD61E0;
  LODWORD(v98) = (v111 >> 24) ^ (((((v98 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v98 >> 1))
                                 - ((2 * ((v98 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v98 >> 1))) & 0xB6ABD7590D9CLL)
                                 + 0x75A8DB55EBAC86CELL) ^ v98) >> 16);
  v113 = v82;
  v114 = STACK[0x470];
  v115 = (STACK[0x508] - ((2 * STACK[0x508]) & 0x116) + 0x35D063797E83688BLL) ^ (STACK[0x470] << 16);
  v116 = STACK[0x428];
  v117 = ((((v100 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v100 >> 1))
         - ((2 * ((v100 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v100 >> 1))) & 0xDEAFD0C28716C62ALL)
         + 0x6F57E861438B6315) ^ v100) >> 32;
  LODWORD(STACK[0x2CC]) = v98 ^ v117 ^ (((((v102 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v102 >> 1))
                                        - ((2 * ((v102 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v102 >> 1))) & 0x9C69FAD492)
                                        + 0xCE34FD6A49) ^ v102) >> 8) ^ 0x9EAF4AB7;
  v118 = STACK[0x4C8];
  v119 = STACK[0x4D0];
  v120 = STACK[0x4E8];
  v121 = (((v105 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v105 >> 1))
        - ((2 * ((v105 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v105 >> 1))) & 0xDEDC064F9FE3C6)
        + 0x2CEF6E0327CFF1E3) ^ v105;
  v122 = STACK[0x448];
  LODWORD(v98) = (v121 >> 24) ^ (((((v104 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v104 >> 1))
                                 - ((2 * ((v104 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v104 >> 1))) & 0x7B5690B31FD6)
                                 + 0x14F53DAB48598FEBLL) ^ v104) >> 16);
  v123 = (((v108 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v108 >> 1))
        - ((2 * ((v108 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ (v108 >> 1))) & 0x5FA0E76A0E8D6)
        - 0x7FFD02F8C4AF8B95) ^ v108;
  v124 = STACK[0x4D8];
  STACK[0x368] = STACK[0x368] ^ LODWORD(STACK[0x264]);
  LODWORD(STACK[0x2C8]) = v98 ^ HIDWORD(v123) ^ (((v110 - v112 + 0x5009E6B0F0) ^ v109) >> 8) ^ 0xC61D3435;
  STACK[0x378] = STACK[0x378] ^ STACK[0x248];
  STACK[0x340] = STACK[0x340] ^ a70;
  STACK[0x360] = STACK[0x360] ^ a72;
  STACK[0x390] = STACK[0x390] ^ STACK[0x240];
  STACK[0x348] = STACK[0x348] ^ STACK[0x210];
  STACK[0x350] = STACK[0x350] ^ LODWORD(STACK[0x224]);
  STACK[0x370] = STACK[0x370] ^ STACK[0x238];
  STACK[0x330] = STACK[0x330] ^ LODWORD(STACK[0x234]);
  STACK[0x380] = a71 ^ HIDWORD(a47) ^ 0xFFFFFF8B ^ (STACK[0x380]
                                                  - ((2 * STACK[0x380]) & 0xFFFFFFF3)
                                                  - 7);
  STACK[0x3A0] = STACK[0x3A0] ^ STACK[0x200];
  STACK[0x398] = STACK[0x398] ^ STACK[0x228];
  STACK[0x338] = STACK[0x338] ^ STACK[0x218];
  STACK[0x388] = STACK[0x388] ^ a73;
  STACK[0x358] = STACK[0x358] ^ LODWORD(STACK[0x20C]);
  STACK[0x328] = ((v96 >> 3) | (32 * (_DWORD)v96)) ^ 0xFFFFFF98;
  LODWORD(STACK[0x2C4]) = STACK[0x4F0];
  LODWORD(STACK[0x2C0]) = v124;
  LODWORD(STACK[0x2BC]) = STACK[0x438];
  LODWORD(STACK[0x2B8]) = STACK[0x500];
  LODWORD(STACK[0x2B0]) = v122;
  LODWORD(STACK[0x2B4]) = v118;
  LODWORD(STACK[0x2AC]) = STACK[0x4E0];
  LODWORD(STACK[0x2A8]) = v119;
  LODWORD(STACK[0x2A4]) = STACK[0x4C0];
  LODWORD(STACK[0x2A0]) = v113;
  LODWORD(STACK[0x29C]) = STACK[0x508];
  LODWORD(STACK[0x298]) = v114;
  LODWORD(STACK[0x294]) = v120;
  LODWORD(STACK[0x28C]) = STACK[0x460];
  LODWORD(STACK[0x288]) = STACK[0x478];
  LODWORD(STACK[0x290]) = STACK[0x468];
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 8 * SLODWORD(STACK[0x430])))(v115, v110, v112, v117, v100, v113 - ((2 * (int)v113) & 0x172) - 0x5942D6B10ECC547, v102, v116, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59);
}

uint64_t sub_10070288C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  LODWORD(STACK[0x4F8]) = v8;
  LODWORD(STACK[0x430]) = ((a8 + 529019275) & 0xE077EFFD) + 11;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((31827 * (v8 != (((a8 - 117) & 0xFD) + 11))) ^ a8))
                            - 8))();
}

uint64_t sub_1007028D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,unsigned __int8 *a41)
{
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  uint64_t (*v61)(void);

  v42 = STACK[0x278];
  v43 = HIWORD(STACK[0x278]);
  LODWORD(STACK[0x314]) = a40 ^ *a41 ^ 0xFFFFFFAE ^ (LODWORD(STACK[0x314])
                                                   - (((a8 - 1835486829) & 0x6D676FF5 ^ 0xFFFFFFE4) & (2 * LODWORD(STACK[0x314])))
                                                   + 8);
  v44 = v43 ^ a41[1] ^ (LODWORD(STACK[0x318]) - ((2 * LODWORD(STACK[0x318])) & 0x16) - 117);
  v45 = (v42 >> 40) ^ a41[2] ^ (LODWORD(STACK[0x30C]) - ((2 * LODWORD(STACK[0x30C])) & 0xFFFFFFB4) - 38);
  LODWORD(STACK[0x310]) = HIDWORD(v42) ^ (LODWORD(STACK[0x310]) - ((2 * LODWORD(STACK[0x310])) & 0xFFFFFFBF) + 95) ^ a41[3] ^ 0xFFFFFF86;
  v46 = (v42 >> 24) ^ (LODWORD(STACK[0x2EC]) - 2 * (STACK[0x2EC] & 0x1F) + 31) ^ a41[4];
  v47 = v42 ^ a41[7] ^ (LODWORD(STACK[0x2F8]) - ((2 * LODWORD(STACK[0x2F8])) & 0xFFFFFF8C) + 70);
  v48 = STACK[0x270];
  v49 = (v42 >> 16) ^ a41[5] ^ (LODWORD(STACK[0x2E0]) - ((2 * LODWORD(STACK[0x2E0])) & 0xFFFFFF9C) + 78);
  v50 = HIBYTE(STACK[0x270]) ^ a41[8] ^ (LODWORD(STACK[0x2E8]) - ((2 * LODWORD(STACK[0x2E8])) & 0x5E) - 81);
  v51 = (v42 >> 8) ^ a41[6] ^ (LODWORD(STACK[0x2F0]) - ((2 * LODWORD(STACK[0x2F0])) & 0xFFFFFFAC) - 42);
  v52 = STACK[0x270] >> 24;
  v53 = HIWORD(STACK[0x270]) ^ a41[9] ^ (LODWORD(STACK[0x300]) - ((2 * LODWORD(STACK[0x300])) & 0xFFFFFFBC) - 34);
  LODWORD(STACK[0x308]) = (STACK[0x270] >> 40) ^ (LODWORD(STACK[0x308]) - ((2 * LODWORD(STACK[0x308])) & 0xC) + 6) ^ a41[10] ^ 0x1B;
  LODWORD(STACK[0x2FC]) = HIDWORD(v48) ^ (LODWORD(STACK[0x2FC]) - ((2 * LODWORD(STACK[0x2FC])) & 0xFFFFFFFB) - 3) ^ a41[11] ^ 0x24;
  v54 = v52 ^ a41[12] ^ (LODWORD(STACK[0x2E4]) - ((2 * LODWORD(STACK[0x2E4])) & 0xFFFFFF94) - 54);
  v55 = (v48 >> 16) ^ a41[13] ^ (LODWORD(STACK[0x304]) + (~(2 * LODWORD(STACK[0x304])) | 0x7B) - 61);
  v56 = 0xFFFFFFFF00000000;
  if (LODWORD(STACK[0x254]) >= 0x7E05CE20)
    v56 = 0;
  v57 = v56 - LODWORD(STACK[0x254]) + 2114309664;
  STACK[0x320] += v57;
  STACK[0x258] += v57;
  LODWORD(v57) = LODWORD(STACK[0x31C]) - ((2 * LODWORD(STACK[0x31C])) & 0xFFFFFFD8);
  v58 = (v48 >> 8) ^ a41[14];
  LODWORD(STACK[0x318]) = v44 ^ 0xFFFFFFE3;
  LODWORD(STACK[0x30C]) = v45 ^ 0xFFFFFFC7;
  LODWORD(STACK[0x2EC]) = v46 ^ 0xFFFFFFF8;
  LODWORD(STACK[0x2F8]) = v47 ^ 0x1D;
  LODWORD(STACK[0x2E0]) = v49 ^ 0x55;
  LODWORD(STACK[0x2E8]) = v50 ^ 9;
  LODWORD(STACK[0x2F0]) = v51 ^ 0xFFFFFFD9;
  LODWORD(STACK[0x300]) = v53 ^ 0xFFFFFFB6;
  LODWORD(STACK[0x2E4]) = v54 ^ 0x2D;
  LODWORD(STACK[0x304]) = v55 ^ 0xFFFFFFD9;
  v59 = LODWORD(STACK[0x2F4]) - ((2 * LODWORD(STACK[0x2F4])) & 0xFFFFFFA0);
  v60 = a41[15];
  LODWORD(STACK[0x31C]) = v58 ^ (v57 + 108) ^ 0x63;
  LODWORD(STACK[0x2F4]) = v48 ^ v60 ^ (v59 + 80) ^ 0xB;
  v61 = (uint64_t (*)(void))(*(_QWORD *)(v41 + 8 * a8) - 8);
  LODWORD(STACK[0x254]) = 2114309664;
  return v61();
}

uint64_t sub_100702C2C()
{
  int v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t (*v47)(void);

  v10 = (v0 - 19253) | 0x3900;
  LODWORD(STACK[0x3E8]) = v10;
  v11 = (char *)*(&off_1015B46D0 + v0 - 16969) - 8;
  v12 = STACK[0x4E0];
  v13 = (~LOBYTE(STACK[0x4E0]) + (STACK[0x4E0] ^ 0xD6) + 1) ^ ((v5 ^ 0xD5)
                                                                                               + (v5 ^ 0xFC)
                                                                                               + 1) ^ ((v2 ^ 0xD4) + (v2 ^ 0xFD) + v10 - 14783) ^ *(_QWORD *)&v11[8 * ((((v0 + 23) | 0x12) + 80) ^ v2)] ^ *(_QWORD *)&v11[8 * (v5 ^ 0x6F)] ^ *(_QWORD *)&v11[8 * (STACK[0x4E0] ^ 0x6C)];
  v14 = *(_QWORD *)&v11[8 * (v6 ^ 0x16A)] ^ (((2 * v6) & 0xAC ^ 0xA0) + 42);
  v15 = v6;
  v16 = v5;
  v17 = STACK[0x460];
  v18 = STACK[0x460] ^ 0xFFFFFFF8;
  v19 = STACK[0x460] ^ 0xFFFFFFD1;
  LODWORD(STACK[0x410]) = v19;
  v20 = *(_QWORD *)&v11[8 * (v17 ^ 0x6B)] ^ (v19 + v18 + 1);
  v21 = *(_QWORD *)&v11[8 * (v3 ^ 0x68)] ^ ((v3 ^ 0xFFFFFFD2) + (v3 ^ 0xFFFFFFFB) + 1);
  v22 = *(_QWORD *)&v11[8 * (v8 ^ 0x69)] ^ ((v8 ^ 0xFFFFFFD3) + (v8 ^ 0xFFFFFFFA) + 1);
  v23 = *(_QWORD *)&v11[8 * (v1 ^ 0x6F)] ^ ((v1 ^ 0xFFFFFFD5) + (v1 ^ 0xFFFFFFFC) + 1);
  v24 = STACK[0x508];
  STACK[0x500] = v1;
  v25 = v1 ^ v24;
  STACK[0x4D0] = v3;
  v26 = STACK[0x470];
  v27 = STACK[0x478];
  v28 = STACK[0x4C0];
  v29 = v25 ^ v3 ^ STACK[0x470] ^ STACK[0x478] ^ v15 ^ v4 ^ STACK[0x4C0] ^ ((v4 ^ 0xFFFFFFD7) + (v4 ^ 0xFFFFFFFE) + 1);
  v30 = ((STACK[0x4C0] ^ 0xFFFFFFD6) - STACK[0x4C0]) ^ v2;
  STACK[0x4C8] = v16;
  v31 = v29 ^ v30 ^ v16;
  v32 = STACK[0x4F0];
  v33 = STACK[0x468];
  v34 = v31 ^ v12 ^ STACK[0x4F0] ^ STACK[0x468] ^ ((v7 ^ 0xFFFFFFD4) + (v7 ^ 0xFFFFFFFD) + 1) ^ v17;
  STACK[0x448] = v4;
  v35 = *(_QWORD *)&v11[8 * (v4 ^ 0x16DLL)];
  STACK[0x428] = v8;
  v36 = v34 ^ v8 ^ v35 ^ v14 ^ v13 ^ v20 ^ v21 ^ *(_QWORD *)&v11[8 * (v7 ^ 0x16ELL)] ^ v22 ^ *(_QWORD *)&v11[8 * (v28 ^ 0x16CLL)] ^ v23 ^ 0x51;
  v37 = *(_QWORD *)&v11[8 * (v32 ^ 0x6D)] ^ ((v32 ^ 0xFFFFFFD7) + (v32 ^ 0xFFFFFFFE) + 1) ^ 0x51;
  v38 = v36 | v37;
  v39 = v36 & v37;
  v40 = *(_QWORD *)&v11[8 * (v24 ^ 0x69)] ^ ((v24 ^ 0xFFFFFFD3) + (v24 ^ 0xFFFFFFFA) + 1);
  v41 = *(_QWORD *)&v11[8 * (v26 ^ 0x16BLL)];
  v42 = ((v27 ^ 0xFFFFFFD2) + (v27 ^ 0xFFFFFFFB) + 1) ^ ((v26 ^ 0xFFFFFFD1) + (v26 ^ 0xFFFFFFF8) + 1) ^ ((v33 ^ 0xFFFFFFD0) + (v33 ^ 0xFFFFFFF9) + 1) ^ *(_QWORD *)&v11[8 * (v33 ^ 0x16ALL)];
  STACK[0x418] = (unint64_t)v11;
  v43 = v42 ^ v41 ^ *(_QWORD *)&v11[8 * (v27 ^ 0x168)] ^ v40 ^ v38 ^ v39 ^ v7;
  v44 = (v42 ^ v41 ^ *(_QWORD *)&v11[8 * (v27 ^ 0x168)] ^ v40 ^ v38 ^ v39 ^ v7) ^ 0x6ALL;
  v45 = (unint64_t)*(&off_1015B46D0 + v0 - 17849);
  STACK[0x438] = v45;
  v46 = (v43 ^ 0x3D) + (v43 ^ 0xFFFFFFD1) + *(unsigned __int8 *)(v45 + v44);
  v47 = *(uint64_t (**)(void))(v9 + 8 * (v0 ^ (15 * (STACK[0x440] & 1))));
  STACK[0x420] = v43;
  STACK[0x268] = v44;
  STACK[0x4D8] = v15;
  STACK[0x4E8] = v2;
  STACK[0x408] = v46;
  STACK[0x400] = v46 ^ 0x50;
  LODWORD(STACK[0x3F8]) = v26 ^ 0xFFFFFFD1;
  STACK[0x3F0] = v46 ^ 0x50u;
  return v47();
}

uint64_t sub_100703068()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((v0 + 4141) ^ (27
                                                        * (LODWORD(STACK[0x4F8]) == LODWORD(STACK[0x430])))))
                            - 8))();
}

uint64_t sub_10070309C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v5 + 8 * (v4 - 5982)) - 4))(a1, a2, v2 ^ LODWORD(STACK[0x31C]) ^ 0xFFFFFFD5, v3 ^ LODWORD(STACK[0x2E8]) ^ 0xFFFFFFF9, v2 ^ LODWORD(STACK[0x304]) ^ 0xFFFFFFCA, v2 ^ LODWORD(STACK[0x310]) ^ 0xFFFFFFA7, v2 ^ 0x6Eu ^ LODWORD(STACK[0x314]), v2 ^ LODWORD(STACK[0x30C]) ^ (v4 - 3174) ^ 0x76u);
}

uint64_t sub_1007031A8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v4 + 8 * SLODWORD(STACK[0x3E8])) - 4))(a1, a2, v2 ^ LODWORD(STACK[0x31C]) ^ 0xFFFFFFE6, v3 ^ LODWORD(STACK[0x2E8]) ^ 0x20u, v2 ^ LODWORD(STACK[0x304]) ^ 0xFFFFFFF6, v2 ^ LODWORD(STACK[0x310]) ^ 0x3Bu, v2 ^ LODWORD(STACK[0x314]) ^ 0xFFFFFFE3, v2 ^ LODWORD(STACK[0x30C]) ^ (((LODWORD(STACK[0x3E8]) + 930954746) & 0xC882CCFD) + 67));
}

uint64_t sub_1007032B0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v5 + 8 * (v4 - 5982)) - 4))(a1, a2, STACK[0x398] ^ v2 ^ 0x4F, STACK[0x370] ^ v3 ^ 0xFFFFFF84, STACK[0x338] ^ v2 ^ 0xFFFFFFA7, STACK[0x368] ^ v2 ^ 0x53, STACK[0x378] ^ v2 ^ 0xFFFFFF9A, STACK[0x340] ^ v2 ^ 0xFFFFFFA2);
}

uint64_t sub_1007033CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;

  v16 = STACK[0x438];
  LODWORD(STACK[0x3E0]) = (a7 ^ 0x86)
                        + (a7 ^ 0x6A)
                        + *(unsigned __int8 *)(STACK[0x438] + (a7 ^ 0x3DLL));
  LODWORD(STACK[0x3E8]) = (v9 ^ 0xAF) + (v9 ^ 0x43) + *(unsigned __int8 *)(v16 + (v9 ^ 0x14));
  LODWORD(STACK[0x3D8]) = (a8 ^ 0x68) + (a8 ^ 0x84) + *(unsigned __int8 *)(v16 + (a8 ^ 0xD3));
  LODWORD(STACK[0x3D0]) = (a6 ^ 0x25) + (a6 ^ 0xC9) + *(unsigned __int8 *)(v16 + (a6 ^ 0x9ELL));
  LODWORD(STACK[0x3CC]) = (v11 ^ 0xA8)
                        + (v11 ^ 0x44444444)
                        + *(unsigned __int8 *)(v16 + (v11 ^ 0x13));
  LODWORD(STACK[0x3C0]) = (v10 ^ 0x11111111)
                        + (v10 ^ 0xFFFFFFFD)
                        + *(unsigned __int8 *)(v16 + (v10 ^ 0xAALL));
  LODWORD(STACK[0x3B8]) = (a4 ^ 0xD4) + (a4 ^ 0x38) + *(unsigned __int8 *)(v16 + (a4 ^ 0x83));
  LODWORD(STACK[0x3B0]) = (v12 ^ 0xD) + (v12 ^ 0xFFFFFFE1) + *(unsigned __int8 *)(v16 + (v12 ^ 0x5ALL));
  LODWORD(STACK[0x3A8]) = (v8 ^ v14 ^ 0xE5)
                        + (v8 ^ v14 ^ v15)
                        + *(unsigned __int8 *)(v16 + ((v8 ^ v14) ^ 0x5ELL));
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x4B8] + 8 * v13) - 12))();
}

uint64_t sub_10070397C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v11 + 8 * (v7 ^ v8)) = v10 ^ *(_QWORD *)(v6 + 8 * (v9 ^ ((v12 ^ a5) + a3))) ^ ((v9 ^ a6) + (v9 ^ v13) + 1) ^ a4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * (v12 ^ (2 * (v7 == 63)))) - 12))();
}

uint64_t sub_1007039D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  char v296;
  char v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  int v309;
  int v310;
  int v311;
  uint64_t v312;
  int v313;
  unint64_t v314;
  __int128 v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t (*v515)(void);

  LODWORD(STACK[0x4E0]) = v71 + 1537;
  v73 = v63 << ((v71 + 1) ^ 0x37);
  v74 = (a7 | (v69 << 24)) + v67 + v66;
  v75 = (v71 + 637313368) ^ v74;
  v76 = (v73 | v65) ^ 0xFE203F71;
  v77 = *(unsigned __int8 *)(a62 + BYTE1(v64));
  v78 = *(unsigned __int8 *)(a62 + ((v73 | v65) ^ 0x71u));
  v79 = *(unsigned __int8 *)(a62 + v64);
  v80 = *(unsigned __int8 *)(a62 + (v64 >> 24));
  v81 = *(unsigned __int8 *)(a62 + BYTE2(v64));
  v82 = STACK[0x2D8];
  v83 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE1(v62)) ^ v70));
  *((_QWORD *)&v84 + 1) = v83 ^ 0xF74A0;
  *(_QWORD *)&v84 = v83 ^ 0xF6625EA35DC00000;
  LODWORD(v83) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v85 = *(_QWORD *)(STACK[0x2D8] + 8 * (v77 ^ v70));
  *((_QWORD *)&v84 + 1) = v85 ^ 0xF74A0;
  *(_QWORD *)&v84 = v85 ^ 0xF6625EA35DC00000;
  LODWORD(v83) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32) ^ v83;
  v86 = *(_QWORD *)(STACK[0x2D8] + 8 * (v78 ^ v70));
  *((_QWORD *)&v84 + 1) = v86 ^ 0xF74A0;
  *(_QWORD *)&v84 = v86 ^ 0xF6625EA35DC00000;
  v87 = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v88 = *(_QWORD *)(STACK[0x2D8]
                  + 8
                  * (*(unsigned __int8 *)(a62 + ((unsigned __int16)((v71 - 24232) ^ v74) >> 8)) ^ v70));
  *((_QWORD *)&v84 + 1) = v88 ^ 0xF74A0;
  *(_QWORD *)&v84 = v88 ^ 0xF6625EA35DC00000;
  v89 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + ((v71 + 88) ^ v74)) ^ v70));
  LODWORD(v83) = v83 ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  *((_QWORD *)&v84 + 1) = v89 ^ 0xF74A0;
  *(_QWORD *)&v84 = v89 ^ 0xF6625EA35DC00000;
  LODWORD(v89) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v90 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + v62) ^ v70));
  *((_QWORD *)&v84 + 1) = v90 ^ 0xF74A0;
  *(_QWORD *)&v84 = v90 ^ 0xF6625EA35DC00000;
  LODWORD(v90) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v91 = *(_QWORD *)(STACK[0x2D8] + 8 * (v79 ^ v70));
  *((_QWORD *)&v84 + 1) = v91 ^ 0xF74A0;
  *(_QWORD *)&v84 = v91 ^ 0xF6625EA35DC00000;
  v92 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + (v76 >> 24)) ^ v70));
  v93 = v90 ^ ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32) ^ v89;
  *((_QWORD *)&v84 + 1) = v92 ^ 0xF74A0;
  *(_QWORD *)&v84 = v92 ^ 0xF6625EA35DC00000;
  LODWORD(v91) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v94 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE2(v76)) ^ v70));
  *((_QWORD *)&v84 + 1) = v94 ^ 0xF74A0;
  *(_QWORD *)&v84 = v94 ^ 0xF6625EA35DC00000;
  LODWORD(v94) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v95 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + (v75 >> 24)) ^ v70));
  *((_QWORD *)&v84 + 1) = v95 ^ 0xF74A0;
  *(_QWORD *)&v84 = v95 ^ 0xF6625EA35DC00000;
  LODWORD(v95) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v96 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + (v62 >> 24)) ^ v70));
  *((_QWORD *)&v84 + 1) = v96 ^ 0xF74A0;
  *(_QWORD *)&v84 = v96 ^ 0xF6625EA35DC00000;
  LODWORD(v96) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v97 = *(_QWORD *)(STACK[0x2D8] + 8 * (v80 ^ v70));
  *((_QWORD *)&v84 + 1) = v97 ^ 0xF74A0;
  *(_QWORD *)&v84 = v97 ^ 0xF6625EA35DC00000;
  v98 = *(_QWORD *)(STACK[0x2D8] + 8 * (v81 ^ v70));
  LODWORD(v94) = v95 ^ v96 ^ ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32) ^ v94;
  *((_QWORD *)&v84 + 1) = v98 ^ 0xF74A0;
  *(_QWORD *)&v84 = v98 ^ 0xF6625EA35DC00000;
  LODWORD(v98) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v99 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE1(v76)) ^ v70));
  *((_QWORD *)&v84 + 1) = v99 ^ 0xF74A0;
  *(_QWORD *)&v84 = v99 ^ 0xF6625EA35DC00000;
  LODWORD(v99) = ((unint64_t)(v84 >> 22) >> 9) ^ v98 ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v100 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE2(v75)) ^ v70));
  *((_QWORD *)&v84 + 1) = v100 ^ 0xF74A0;
  *(_QWORD *)&v84 = v100 ^ 0xF6625EA35DC00000;
  LODWORD(v100) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v101 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE2(v62)) ^ v70));
  *((_QWORD *)&v84 + 1) = v101 ^ 0xF74A0;
  *(_QWORD *)&v84 = v101 ^ 0xF6625EA35DC00000;
  v102 = v83 ^ 0xF671EFCB ^ v87;
  v103 = *(unsigned __int8 *)(a62 + (v83 ^ 0xCBu ^ v87));
  v104 = v99 ^ v100 ^ ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24) ^ 0x53649E6A;
  v105 = *(unsigned __int8 *)(a62 + BYTE2(v104));
  v106 = v94 ^ 0xE3151AC2;
  v107 = v93 ^ 0xE44874F5 ^ v91;
  v108 = *(unsigned __int8 *)(a62 + BYTE1(v104));
  v109 = *(unsigned __int8 *)(a62 + (v102 >> 24));
  v110 = *(unsigned __int8 *)(a62 + v104);
  v111 = *(unsigned __int8 *)(a62 + BYTE2(v102));
  v112 = *(unsigned __int8 *)(a62 + (v104 >> 24));
  v113 = *(_QWORD *)(STACK[0x2D8] + 8 * (v103 ^ v70));
  v114 = *(unsigned __int8 *)(a62 + BYTE1(v102));
  *((_QWORD *)&v84 + 1) = v113 ^ 0xF74A0;
  *(_QWORD *)&v84 = v113 ^ 0xF6625EA35DC00000;
  v115 = v84 >> 22;
  v116 = *(_QWORD *)(STACK[0x2D8] + 8 * (v105 ^ v70));
  *((_QWORD *)&v84 + 1) = v116 ^ 0xF74A0;
  *(_QWORD *)&v84 = v116 ^ 0xF6625EA35DC00000;
  v117 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + (v94 ^ 0xC2u)) ^ v70));
  LODWORD(v115) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8) ^ (v115 >> 33) ^ (v115 >> 36) ^ HIDWORD(v115);
  *((_QWORD *)&v84 + 1) = v117 ^ 0xF74A0;
  *(_QWORD *)&v84 = v117 ^ 0xF6625EA35DC00000;
  v118 = v115 ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v119 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE2(v107)) ^ v70));
  *((_QWORD *)&v84 + 1) = v119 ^ 0xF74A0;
  *(_QWORD *)&v84 = v119 ^ 0xF6625EA35DC00000;
  LODWORD(v119) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v120 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE1(v107)) ^ v70));
  *((_QWORD *)&v84 + 1) = v120 ^ 0xF74A0;
  *(_QWORD *)&v84 = v120 ^ 0xF6625EA35DC00000;
  LODWORD(v120) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v121 = *(_QWORD *)(STACK[0x2D8] + 8 * (v109 ^ v70));
  *((_QWORD *)&v84 + 1) = v121 ^ 0xF74A0;
  *(_QWORD *)&v84 = v121 ^ 0xF6625EA35DC00000;
  LODWORD(v121) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v122 = *(_QWORD *)(STACK[0x2D8] + 8 * (v108 ^ v70));
  *((_QWORD *)&v84 + 1) = v122 ^ 0xF74A0;
  *(_QWORD *)&v84 = v122 ^ 0xF6625EA35DC00000;
  v123 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + (v106 >> 24)) ^ v70));
  v124 = v121 ^ v120 ^ ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  *((_QWORD *)&v84 + 1) = v123 ^ 0xF74A0;
  *(_QWORD *)&v84 = v123 ^ 0xF6625EA35DC00000;
  v125 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE2(v106)) ^ v70));
  v126 = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  *((_QWORD *)&v84 + 1) = v125 ^ 0xF74A0;
  *(_QWORD *)&v84 = v125 ^ 0xF6625EA35DC00000;
  v127 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + v107) ^ v70));
  LODWORD(v120) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  *((_QWORD *)&v84 + 1) = v127 ^ 0xF74A0;
  *(_QWORD *)&v84 = v127 ^ 0xF6625EA35DC00000;
  v128 = *(_QWORD *)(STACK[0x2D8] + 8 * (v111 ^ v70));
  LODWORD(v127) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  *((_QWORD *)&v84 + 1) = v128 ^ 0xF74A0;
  *(_QWORD *)&v84 = v128 ^ 0xF6625EA35DC00000;
  LODWORD(v128) = v127 ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v129 = *(_QWORD *)(STACK[0x2D8] + 8 * (v110 ^ v70));
  *((_QWORD *)&v84 + 1) = v129 ^ 0xF74A0;
  *(_QWORD *)&v84 = v129 ^ 0xF6625EA35DC00000;
  v130 = v84 >> 22;
  v131 = *(_QWORD *)(STACK[0x2D8] + 8 * (v112 ^ v70));
  *((_QWORD *)&v84 + 1) = v131 ^ 0xF74A0;
  *(_QWORD *)&v84 = v131 ^ 0xF6625EA35DC00000;
  v132 = v84 >> 22;
  v133 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE1(v106)) ^ v70));
  *((_QWORD *)&v84 + 1) = v133 ^ 0xF74A0;
  *(_QWORD *)&v84 = v133 ^ 0xF6625EA35DC00000;
  v134 = v84 >> 22;
  v135 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + (v107 >> 24)) ^ v70));
  *((_QWORD *)&v84 + 1) = v135 ^ 0xF74A0;
  *(_QWORD *)&v84 = v135 ^ 0xF6625EA35DC00000;
  LODWORD(v135) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v136 = *(_QWORD *)(STACK[0x2D8] + 8 * (v114 ^ v70));
  *((_QWORD *)&v84 + 1) = v136 ^ 0xF74A0;
  *(_QWORD *)&v84 = v136 ^ 0xF6625EA35DC00000;
  v137 = (v132 >> 25) ^ (v132 >> 28) ^ (v132 >> 24) ^ HIDWORD(v134) ^ v135 ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16) ^ (((v134 >> 3) + v134 - 2 * ((v134 >> 3) & v134)) >> 33) ^ 0x3BB0A502;
  v138 = v118 ^ v119 ^ 0xB2D667E8;
  v139 = v128 ^ v120 ^ (v130 >> 25) ^ (v130 >> 28) ^ (v130 >> 24) ^ 0x3981182F;
  v140 = *(unsigned __int8 *)(a62 + (v137 >> 24));
  v141 = *(unsigned __int8 *)(a62 + (v138 >> 24));
  v142 = v124 ^ v126 ^ 0x1F16CAA5u;
  v143 = *(unsigned __int8 *)(a62 + BYTE2(v142));
  v144 = *(unsigned __int8 *)(a62 + BYTE2(v138));
  v145 = *(unsigned __int8 *)(a62 + BYTE1(v142));
  v146 = *(unsigned __int8 *)(a62 + (v124 ^ v126 ^ 0xA5));
  v147 = *(unsigned __int8 *)(a62 + BYTE1(v137));
  v148 = *(unsigned __int8 *)(a62 + BYTE2(v137));
  v149 = *(unsigned __int8 *)(a62 + BYTE1(v138));
  v150 = *(unsigned __int8 *)(a62 + v138);
  v151 = *(unsigned __int8 *)(a62 + (v142 >> 24));
  v152 = *(unsigned __int8 *)(a62 + v137);
  v153 = *(_QWORD *)(STACK[0x2D8] + 8 * (v141 ^ v70));
  *((_QWORD *)&v84 + 1) = v153 ^ 0xF74A0;
  *(_QWORD *)&v84 = v153 ^ 0xF6625EA35DC00000;
  LODWORD(v153) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v154 = *(_QWORD *)(STACK[0x2D8] + 8 * (v140 ^ v70));
  *((_QWORD *)&v84 + 1) = v154 ^ 0xF74A0;
  *(_QWORD *)&v84 = v154 ^ 0xF6625EA35DC00000;
  LODWORD(v153) = ((unint64_t)(v84 >> 22) >> 9) ^ v153 ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v155 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE1(v139)) ^ v70));
  *((_QWORD *)&v84 + 1) = v155 ^ 0xF74A0;
  *(_QWORD *)&v84 = v155 ^ 0xF6625EA35DC00000;
  LODWORD(v155) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v156 = *(_QWORD *)(STACK[0x2D8] + 8 * (v143 ^ v70));
  *((_QWORD *)&v84 + 1) = v156 ^ 0xF74A0;
  *(_QWORD *)&v84 = v156 ^ 0xF6625EA35DC00000;
  v157 = *(_QWORD *)(STACK[0x2D8] + 8 * (v145 ^ v70));
  LODWORD(v145) = v155 ^ ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  *((_QWORD *)&v84 + 1) = v157 ^ 0xF74A0;
  *(_QWORD *)&v84 = v157 ^ 0xF6625EA35DC00000;
  LODWORD(v156) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v158 = *(_QWORD *)(STACK[0x2D8] + 8 * (v144 ^ v70));
  *((_QWORD *)&v84 + 1) = v158 ^ 0xF74A0;
  *(_QWORD *)&v84 = v158 ^ 0xF6625EA35DC00000;
  v159 = *(_QWORD *)(STACK[0x2D8] + 8 * (v148 ^ v70));
  LODWORD(v156) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16) ^ v156;
  *((_QWORD *)&v84 + 1) = v159 ^ 0xF74A0;
  *(_QWORD *)&v84 = v159 ^ 0xF6625EA35DC00000;
  v160 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + v139) ^ v70));
  LODWORD(v158) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  *((_QWORD *)&v84 + 1) = v160 ^ 0xF74A0;
  *(_QWORD *)&v84 = v160 ^ 0xF6625EA35DC00000;
  v161 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + (v139 >> 24)) ^ v70));
  LODWORD(v160) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  *((_QWORD *)&v84 + 1) = v161 ^ 0xF74A0;
  *(_QWORD *)&v84 = v161 ^ 0xF6625EA35DC00000;
  v162 = v84 >> 22;
  LODWORD(v161) = v156 ^ v160 ^ v158;
  v163 = *(_QWORD *)(STACK[0x2D8] + 8 * (v146 ^ v70));
  *((_QWORD *)&v84 + 1) = v163 ^ 0xF74A0;
  *(_QWORD *)&v84 = v163 ^ 0xF6625EA35DC00000;
  LODWORD(v163) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32) ^ (v162 >> 25) ^ (v162 >> 28) ^ (v162 >> 24);
  v164 = *(_QWORD *)(STACK[0x2D8] + 8 * (v149 ^ v70));
  *((_QWORD *)&v84 + 1) = v164 ^ 0xF74A0;
  *(_QWORD *)&v84 = v164 ^ 0xF6625EA35DC00000;
  v165 = *(_QWORD *)(STACK[0x2D8] + 8 * (v147 ^ v70));
  LODWORD(v163) = v163 ^ ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  *((_QWORD *)&v84 + 1) = v165 ^ 0xF74A0;
  *(_QWORD *)&v84 = v165 ^ 0xF6625EA35DC00000;
  v166 = *(_QWORD *)(STACK[0x2D8] + 8 * (v152 ^ v70));
  LODWORD(v163) = v163 ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  *((_QWORD *)&v84 + 1) = v166 ^ 0xF74A0;
  *(_QWORD *)&v84 = v166 ^ 0xF6625EA35DC00000;
  LODWORD(v165) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v167 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(a62 + BYTE2(v139)) ^ v70));
  *((_QWORD *)&v84 + 1) = v167 ^ 0xF74A0;
  *(_QWORD *)&v84 = v167 ^ 0xF6625EA35DC00000;
  LODWORD(v167) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v168 = *(_QWORD *)(STACK[0x2D8] + 8 * (v151 ^ v70));
  *((_QWORD *)&v84 + 1) = v168 ^ 0xF74A0;
  *(_QWORD *)&v84 = v168 ^ 0xF6625EA35DC00000;
  v169 = *(_QWORD *)(STACK[0x2D8] + 8 * (v150 ^ v70));
  LODWORD(v168) = v167 ^ ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  *((_QWORD *)&v84 + 1) = v169 ^ 0xF74A0;
  *(_QWORD *)&v84 = v169 ^ 0xF6625EA35DC00000;
  v170 = v153 ^ v145 ^ 0xF982E20B;
  v171 = v161 ^ 0xDB50991F;
  v172 = v168 ^ ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32) ^ v165 ^ 0xC43ACFC;
  v173 = v163 ^ 0xF4DBB9AD;
  v174 = *(unsigned __int8 *)(v68 + BYTE1(v172));
  v175 = *(unsigned __int8 *)(v68 + BYTE2(v171));
  v176 = *(unsigned __int8 *)(v68 + (v171 >> 24));
  v177 = *(unsigned __int8 *)(v68 + BYTE2(v170));
  v178 = *(unsigned __int8 *)(v68 + BYTE1(v171));
  v179 = *(unsigned __int8 *)(v68 + v172);
  v180 = *(unsigned __int8 *)(v68 + BYTE1(v170));
  v181 = *(unsigned __int8 *)(v68 + BYTE2(v172));
  v182 = *(unsigned __int8 *)(v68 + (v172 >> 24));
  v183 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + (v170 >> 24)) ^ v70));
  v184 = *(unsigned __int8 *)(v68 + v170);
  *((_QWORD *)&v84 + 1) = v183 ^ 0xF74A0;
  *(_QWORD *)&v84 = v183 ^ 0xF6625EA35DC00000;
  LODWORD(v170) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v185 = *(_QWORD *)(STACK[0x2D8] + 8 * (v174 ^ v70));
  *((_QWORD *)&v84 + 1) = v185 ^ 0xF74A0;
  *(_QWORD *)&v84 = v185 ^ 0xF6625EA35DC00000;
  LODWORD(v185) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v186 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v173)) ^ v70));
  *((_QWORD *)&v84 + 1) = v186 ^ 0xF74A0;
  *(_QWORD *)&v84 = v186 ^ 0xF6625EA35DC00000;
  v187 = v84 >> 22;
  v188 = *(_QWORD *)(STACK[0x2D8] + 8 * (v176 ^ v70));
  *((_QWORD *)&v84 + 1) = v188 ^ 0xF74A0;
  *(_QWORD *)&v84 = v188 ^ 0xF6625EA35DC00000;
  v189 = *(_QWORD *)(STACK[0x2D8] + 8 * (v175 ^ v70));
  LODWORD(v188) = v185 ^ v170 ^ (v187 >> 9) ^ (v187 >> 12) ^ (v187 >> 8) ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  *((_QWORD *)&v84 + 1) = v189 ^ 0xF74A0;
  *(_QWORD *)&v84 = v189 ^ 0xF6625EA35DC00000;
  LODWORD(v189) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v190 = *(_QWORD *)(STACK[0x2D8] + 8 * (v177 ^ v70));
  *((_QWORD *)&v84 + 1) = v190 ^ 0xF74A0;
  *(_QWORD *)&v84 = v190 ^ 0xF6625EA35DC00000;
  v191 = *(_QWORD *)(STACK[0x2D8] + 8 * (v179 ^ v70));
  LODWORD(v189) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32) ^ v189;
  *((_QWORD *)&v84 + 1) = v191 ^ 0xF74A0;
  *(_QWORD *)&v84 = v191 ^ 0xF6625EA35DC00000;
  LODWORD(v190) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v192 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v173)) ^ v70));
  *((_QWORD *)&v84 + 1) = v192 ^ 0xF74A0;
  *(_QWORD *)&v84 = v192 ^ 0xF6625EA35DC00000;
  LODWORD(v192) = v189 ^ v190 ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v193 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + v173) ^ v70));
  *((_QWORD *)&v84 + 1) = v193 ^ 0xF74A0;
  *(_QWORD *)&v84 = v193 ^ 0xF6625EA35DC00000;
  LODWORD(v193) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v194 = *(_QWORD *)(STACK[0x2D8] + 8 * (v178 ^ v70));
  *((_QWORD *)&v84 + 1) = v194 ^ 0xF74A0;
  *(_QWORD *)&v84 = v194 ^ 0xF6625EA35DC00000;
  LODWORD(v194) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v195 = *(_QWORD *)(STACK[0x2D8] + 8 * (v180 ^ v70));
  *((_QWORD *)&v84 + 1) = v195 ^ 0xF74A0;
  *(_QWORD *)&v84 = v195 ^ 0xF6625EA35DC00000;
  v196 = v84 >> 22;
  v197 = *(_QWORD *)(STACK[0x2D8] + 8 * (v182 ^ v70));
  *((_QWORD *)&v84 + 1) = v197 ^ 0xF74A0;
  *(_QWORD *)&v84 = v197 ^ 0xF6625EA35DC00000;
  LODWORD(v197) = (v196 >> 25) ^ (v196 >> 28) ^ (v196 >> 24) ^ ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v198 = *(_QWORD *)(STACK[0x2D8] + 8 * (v181 ^ v70));
  *((_QWORD *)&v84 + 1) = v198 ^ 0xF74A0;
  *(_QWORD *)&v84 = v198 ^ 0xF6625EA35DC00000;
  LODWORD(v198) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v199 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + (v173 >> 24)) ^ v70));
  *((_QWORD *)&v84 + 1) = v199 ^ 0xF74A0;
  *(_QWORD *)&v84 = v199 ^ 0xF6625EA35DC00000;
  LODWORD(v199) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32) ^ v198;
  v200 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + (v161 ^ 0x1Fu)) ^ v70));
  *((_QWORD *)&v84 + 1) = v200 ^ 0xF74A0;
  *(_QWORD *)&v84 = v200 ^ 0xF6625EA35DC00000;
  v201 = v84 >> 22;
  v202 = *(_QWORD *)(STACK[0x2D8] + 8 * (v184 ^ v70));
  *((_QWORD *)&v84 + 1) = v202 ^ 0xF74A0;
  *(_QWORD *)&v84 = v202 ^ 0xF6625EA35DC00000;
  v203 = v188 ^ 0x8BDD6001;
  v204 = v199 ^ (v201 >> 9) ^ (v201 >> 12) ^ (v201 >> 8) ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16) ^ 0x74C7379F;
  v205 = v194 ^ v193 ^ v197 ^ 0x6CB597C8;
  v206 = v192 ^ 0x770BB6FF;
  v207 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + (v188 ^ 1u)) ^ v70));
  *((_QWORD *)&v84 + 1) = v207 ^ 0xF74A0;
  *(_QWORD *)&v84 = v207 ^ 0xF6625EA35DC00000;
  v208 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + (v204 >> 24)) ^ v70));
  LODWORD(v207) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  *((_QWORD *)&v84 + 1) = v208 ^ 0xF74A0;
  *(_QWORD *)&v84 = v208 ^ 0xF6625EA35DC00000;
  v209 = *(_QWORD *)(STACK[0x2D8]
                   + 8 * (*(unsigned __int8 *)(v68 + ((v194 ^ v193 ^ v197) ^ 0xC8u)) ^ v70));
  LODWORD(v207) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32) ^ v207;
  *((_QWORD *)&v84 + 1) = v209 ^ 0xF74A0;
  *(_QWORD *)&v84 = v209 ^ 0xF6625EA35DC00000;
  LODWORD(v209) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v210 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v206)) ^ v70));
  *((_QWORD *)&v84 + 1) = v210 ^ 0xF74A0;
  *(_QWORD *)&v84 = v210 ^ 0xF6625EA35DC00000;
  v211 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + ~(_BYTE)v192) ^ v70));
  LODWORD(v210) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  *((_QWORD *)&v84 + 1) = v211 ^ 0xF74A0;
  *(_QWORD *)&v84 = v211 ^ 0xF6625EA35DC00000;
  LODWORD(v210) = v207 ^ v209 ^ v210;
  LODWORD(v211) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v212 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + (v203 >> 24)) ^ v70));
  *((_QWORD *)&v84 + 1) = v212 ^ 0xF74A0;
  *(_QWORD *)&v84 = v212 ^ 0xF6625EA35DC00000;
  LODWORD(v212) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v213 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v204)) ^ v70));
  *((_QWORD *)&v84 + 1) = v213 ^ 0xF74A0;
  *(_QWORD *)&v84 = v213 ^ 0xF6625EA35DC00000;
  LODWORD(v211) = v212 ^ v211;
  LODWORD(v212) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v214 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + (v205 >> 24)) ^ v70));
  *((_QWORD *)&v84 + 1) = v214 ^ 0xF74A0;
  *(_QWORD *)&v84 = v214 ^ 0xF6625EA35DC00000;
  v215 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v205)) ^ v70));
  LODWORD(v192) = v211 ^ v212 ^ ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  *((_QWORD *)&v84 + 1) = v215 ^ 0xF74A0;
  *(_QWORD *)&v84 = v215 ^ 0xF6625EA35DC00000;
  v216 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + (v206 >> 24)) ^ v70));
  LODWORD(v211) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  *((_QWORD *)&v84 + 1) = v216 ^ 0xF74A0;
  *(_QWORD *)&v84 = v216 ^ 0xF6625EA35DC00000;
  v217 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v203)) ^ v70));
  LODWORD(v211) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24) ^ v211;
  *((_QWORD *)&v84 + 1) = v217 ^ 0xF74A0;
  *(_QWORD *)&v84 = v217 ^ 0xF6625EA35DC00000;
  LODWORD(v217) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v218 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v204)) ^ v70));
  *((_QWORD *)&v84 + 1) = v218 ^ 0xF74A0;
  *(_QWORD *)&v84 = v218 ^ 0xF6625EA35DC00000;
  LODWORD(v211) = v211 ^ v217 ^ ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v219 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + v204) ^ v70));
  *((_QWORD *)&v84 + 1) = v219 ^ 0xF74A0;
  *(_QWORD *)&v84 = v219 ^ 0xF6625EA35DC00000;
  LODWORD(v219) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v220 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v205)) ^ v70));
  *((_QWORD *)&v84 + 1) = v220 ^ 0xF74A0;
  *(_QWORD *)&v84 = v220 ^ 0xF6625EA35DC00000;
  LODWORD(v220) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24) ^ v219;
  v221 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v206)) ^ v70));
  *((_QWORD *)&v84 + 1) = v221 ^ 0xF74A0;
  *(_QWORD *)&v84 = v221 ^ 0xF6625EA35DC00000;
  LODWORD(v221) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v222 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v203)) ^ v70));
  *((_QWORD *)&v84 + 1) = v222 ^ 0xF74A0;
  *(_QWORD *)&v84 = v222 ^ 0xF6625EA35DC00000;
  LODWORD(v222) = v220 ^ v221 ^ ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v223 = v210 ^ 0x307E1318;
  v224 = *(unsigned __int8 *)(v68 + (v210 ^ 0x18u));
  v225 = v222 ^ 0x4730AD39;
  v226 = v211 ^ 0xBDA2448;
  v227 = *(unsigned __int8 *)(v68 + v225);
  v228 = v192 ^ 0xD2DA6746;
  v229 = *(unsigned __int8 *)(v68 + BYTE1(v228));
  v230 = *(unsigned __int8 *)(v68 + (v226 >> 24));
  v231 = *(unsigned __int8 *)(v68 + BYTE2(v228));
  v232 = *(unsigned __int8 *)(v68 + (v225 >> 24));
  v233 = *(unsigned __int8 *)(v68 + (v192 ^ 0x46u));
  v234 = *(unsigned __int8 *)(v68 + BYTE2(v226));
  v235 = *(unsigned __int8 *)(v68 + BYTE2(v225));
  v236 = *(unsigned __int8 *)(v68 + BYTE1(v226));
  v237 = *(unsigned __int8 *)(v68 + BYTE1(v225));
  v238 = v228 >> 24;
  v239 = *(_QWORD *)(STACK[0x2D8] + 8 * (v224 ^ v70));
  v240 = *(unsigned __int8 *)(v68 + v226);
  *((_QWORD *)&v84 + 1) = v239 ^ 0xF74A0;
  *(_QWORD *)&v84 = v239 ^ 0xF6625EA35DC00000;
  LODWORD(v226) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v241 = *(_QWORD *)(STACK[0x2D8] + 8 * (v227 ^ v70));
  *((_QWORD *)&v84 + 1) = v241 ^ 0xF74A0;
  *(_QWORD *)&v84 = v241 ^ 0xF6625EA35DC00000;
  v242 = *(_QWORD *)(STACK[0x2D8] + 8 * (v230 ^ v70));
  LODWORD(v226) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8) ^ v226;
  *((_QWORD *)&v84 + 1) = v242 ^ 0xF74A0;
  *(_QWORD *)&v84 = v242 ^ 0xF6625EA35DC00000;
  v243 = *(_QWORD *)(STACK[0x2D8] + 8 * (v231 ^ v70));
  LODWORD(v242) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  *((_QWORD *)&v84 + 1) = v243 ^ 0xF74A0;
  *(_QWORD *)&v84 = v243 ^ 0xF6625EA35DC00000;
  LODWORD(v243) = v242 ^ ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v244 = *(_QWORD *)(STACK[0x2D8] + 8 * (v229 ^ v70));
  *((_QWORD *)&v84 + 1) = v244 ^ 0xF74A0;
  *(_QWORD *)&v84 = v244 ^ 0xF6625EA35DC00000;
  v245 = v84 >> 22;
  v246 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + (v223 >> 24)) ^ v70));
  *((_QWORD *)&v84 + 1) = v246 ^ 0xF74A0;
  *(_QWORD *)&v84 = v246 ^ 0xF6625EA35DC00000;
  LODWORD(v245) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32) ^ (v245 >> 25) ^ (v245 >> 28) ^ (v245 >> 24);
  v247 = *(_QWORD *)(STACK[0x2D8] + 8 * (v232 ^ v70));
  *((_QWORD *)&v84 + 1) = v247 ^ 0xF74A0;
  *(_QWORD *)&v84 = v247 ^ 0xF6625EA35DC00000;
  LODWORD(v247) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v248 = *(_QWORD *)(STACK[0x2D8] + 8 * (v234 ^ v70));
  *((_QWORD *)&v84 + 1) = v248 ^ 0xF74A0;
  *(_QWORD *)&v84 = v248 ^ 0xF6625EA35DC00000;
  v249 = v236 ^ v70;
  LODWORD(v236) = v245 ^ v247 ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v250 = *(_QWORD *)(STACK[0x2D8] + 8 * v249);
  *((_QWORD *)&v84 + 1) = v250 ^ 0xF74A0;
  *(_QWORD *)&v84 = v250 ^ 0xF6625EA35DC00000;
  LODWORD(v250) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v251 = *(_QWORD *)(STACK[0x2D8] + 8 * (v233 ^ v70));
  *((_QWORD *)&v84 + 1) = v251 ^ 0xF74A0;
  *(_QWORD *)&v84 = v251 ^ 0xF6625EA35DC00000;
  v252 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v223)) ^ v70));
  LODWORD(v250) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24) ^ v250;
  *((_QWORD *)&v84 + 1) = v252 ^ 0xF74A0;
  *(_QWORD *)&v84 = v252 ^ 0xF6625EA35DC00000;
  v253 = *(_QWORD *)(STACK[0x2D8] + 8 * (v235 ^ v70));
  LODWORD(v252) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  *((_QWORD *)&v84 + 1) = v253 ^ 0xF74A0;
  *(_QWORD *)&v84 = v253 ^ 0xF6625EA35DC00000;
  v254 = *(_QWORD *)(STACK[0x2D8] + 8 * (v237 ^ v70));
  LODWORD(v253) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  *((_QWORD *)&v84 + 1) = v254 ^ 0xF74A0;
  *(_QWORD *)&v84 = v254 ^ 0xF6625EA35DC00000;
  v255 = v84 >> 22;
  v256 = *(_QWORD *)(STACK[0x2D8] + 8 * (v240 ^ v70));
  *((_QWORD *)&v84 + 1) = v256 ^ 0xF74A0;
  *(_QWORD *)&v84 = v256 ^ 0xF6625EA35DC00000;
  v257 = *(_QWORD *)(STACK[0x2D8]
                   + 8
                   * ((((*(unsigned __int8 *)(v68 + v238) ^ 0xFB)
                      - (*(unsigned __int8 *)(v68 + v238) ^ v70)) ^ 0xFFFFFFFC)
                    + (*(unsigned __int8 *)(v68 + v238) ^ 0xFB)));
  LODWORD(v256) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24) ^ (v255 >> 17) ^ (v255 >> 20) ^ (v255 >> 16);
  *((_QWORD *)&v84 + 1) = v257 ^ 0xF74A0;
  *(_QWORD *)&v84 = v257 ^ 0xF6625EA35DC00000;
  LODWORD(v257) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v258 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v223)) ^ v70));
  *((_QWORD *)&v84 + 1) = v258 ^ 0xF74A0;
  *(_QWORD *)&v84 = v258 ^ 0xF6625EA35DC00000;
  LODWORD(v258) = v256 ^ ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v259 = v226 ^ v243 ^ 0xCCFD3641;
  v260 = v258 ^ 0x8C6A6D1C ^ v257;
  v261 = v236 ^ 0x41F1060D;
  v262 = *(unsigned __int8 *)(v68 + v260);
  v263 = v250 ^ v252 ^ v253 ^ 0x533B4825;
  v264 = *(unsigned __int8 *)(v68 + BYTE1(v261));
  v265 = *(unsigned __int8 *)(v68 + BYTE2(v259));
  v266 = *(unsigned __int8 *)(v68 + (v236 ^ 0xDu));
  v267 = *(unsigned __int8 *)(v68 + (v260 >> 24));
  v268 = *(unsigned __int8 *)(v68 + BYTE1(v263));
  LODWORD(v236) = *(unsigned __int8 *)(v68 + (v261 >> 24));
  v269 = *(unsigned __int8 *)(v68 + BYTE1(v260));
  v270 = *(unsigned __int8 *)(v68 + BYTE2(v263));
  v271 = *(unsigned __int8 *)(v68 + BYTE1(v259));
  v272 = *(unsigned __int8 *)(v68 + BYTE2(v260));
  v273 = *(unsigned __int8 *)(v68 + (v259 >> 24)) ^ v70;
  v274 = *(unsigned __int8 *)(v68 + v259);
  v275 = *(unsigned __int8 *)(v68 + v263);
  v276 = *(unsigned __int8 *)(v68 + BYTE2(v261));
  v277 = *(_QWORD *)(STACK[0x2D8] + 8 * v273);
  *((_QWORD *)&v84 + 1) = v277 ^ 0xF74A0;
  *(_QWORD *)&v84 = v277 ^ 0xF6625EA35DC00000;
  LODWORD(v277) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v278 = *(_QWORD *)(STACK[0x2D8] + 8 * (v262 ^ v70));
  *((_QWORD *)&v84 + 1) = v278 ^ 0xF74A0;
  *(_QWORD *)&v84 = v278 ^ 0xF6625EA35DC00000;
  LODWORD(v278) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v279 = *(_QWORD *)(STACK[0x2D8] + 8 * (*(unsigned __int8 *)(v68 + (v263 >> 24)) ^ v70));
  *((_QWORD *)&v84 + 1) = v279 ^ 0xF74A0;
  *(_QWORD *)&v84 = v279 ^ 0xF6625EA35DC00000;
  v280 = *(_QWORD *)(STACK[0x2D8] + 8 * (v264 ^ v70));
  LODWORD(v264) = v278 ^ v277 ^ ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  *((_QWORD *)&v84 + 1) = v280 ^ 0xF74A0;
  *(_QWORD *)&v84 = v280 ^ 0xF6625EA35DC00000;
  v281 = v84 >> 22;
  v282 = *(_QWORD *)(STACK[0x2D8] + 8 * (v266 ^ v70));
  *((_QWORD *)&v84 + 1) = v282 ^ 0xF74A0;
  *(_QWORD *)&v84 = v282 ^ 0xF6625EA35DC00000;
  LODWORD(v282) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v283 = *(_QWORD *)(STACK[0x2D8] + 8 * (v265 ^ v70));
  *((_QWORD *)&v84 + 1) = v283 ^ 0xF74A0;
  *(_QWORD *)&v84 = v283 ^ 0xF6625EA35DC00000;
  LODWORD(v282) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16) ^ v282;
  v284 = *(_QWORD *)(STACK[0x2D8] + 8 * (v267 ^ v70));
  *((_QWORD *)&v84 + 1) = v284 ^ 0xF74A0;
  *(_QWORD *)&v84 = v284 ^ 0xF6625EA35DC00000;
  LODWORD(v267) = v282 ^ ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v285 = *(_QWORD *)(STACK[0x2D8] + 8 * (v270 ^ v70));
  *((_QWORD *)&v84 + 1) = v285 ^ 0xF74A0;
  *(_QWORD *)&v84 = v285 ^ 0xF6625EA35DC00000;
  LODWORD(v270) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v286 = *(_QWORD *)(STACK[0x2D8] + 8 * (v268 ^ v70));
  *((_QWORD *)&v84 + 1) = v286 ^ 0xF74A0;
  *(_QWORD *)&v84 = v286 ^ 0xF6625EA35DC00000;
  LODWORD(v286) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v287 = *(_QWORD *)(STACK[0x2D8]
                   + 8 * (((v236 ^ -(int)v236 ^ (251 - (v236 ^ 0xFB))) + 251) ^ 6));
  *((_QWORD *)&v84 + 1) = v287 ^ 0xF74A0;
  *(_QWORD *)&v84 = v287 ^ 0xF6625EA35DC00000;
  v288 = *(_QWORD *)(STACK[0x2D8] + 8 * (v271 ^ v70));
  LODWORD(v271) = ((unint64_t)(v84 >> 22) >> 33) ^ v286 ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  *((_QWORD *)&v84 + 1) = v288 ^ 0xF74A0;
  *(_QWORD *)&v84 = v288 ^ 0xF6625EA35DC00000;
  v289 = *(_QWORD *)(STACK[0x2D8] + 8 * (v272 ^ v70));
  LODWORD(v286) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  *((_QWORD *)&v84 + 1) = v289 ^ 0xF74A0;
  *(_QWORD *)&v84 = v289 ^ 0xF6625EA35DC00000;
  v290 = *(_QWORD *)(STACK[0x2D8] + 8 * (v269 ^ v70));
  LODWORD(v289) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  *((_QWORD *)&v84 + 1) = v290 ^ 0xF74A0;
  *(_QWORD *)&v84 = v290 ^ 0xF6625EA35DC00000;
  LODWORD(v290) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v291 = *(_QWORD *)(STACK[0x2D8] + 8 * (v275 ^ v70));
  *((_QWORD *)&v84 + 1) = v291 ^ 0xF74A0;
  *(_QWORD *)&v84 = v291 ^ 0xF6625EA35DC00000;
  LODWORD(v291) = ((unint64_t)(v84 >> 22) >> 33) ^ ((unint64_t)(v84 >> 22) >> 36) ^ ((unint64_t)(v84 >> 22) >> 32);
  v292 = *(_QWORD *)(STACK[0x2D8] + 8 * (v276 ^ v70));
  *((_QWORD *)&v84 + 1) = v292 ^ 0xF74A0;
  *(_QWORD *)&v84 = v292 ^ 0xF6625EA35DC00000;
  LODWORD(v292) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v293 = *(_QWORD *)(STACK[0x2D8] + 8 * (v274 ^ v70));
  *((_QWORD *)&v84 + 1) = v293 ^ 0xF74A0;
  *(_QWORD *)&v84 = v293 ^ 0xF6625EA35DC00000;
  v294 = v264 ^ (v281 >> 9) ^ (v281 >> 12) ^ (v281 >> 8) ^ 0x595CE77E;
  LOBYTE(v278) = *(_BYTE *)(v68
                          + ((unsigned __int16)(v264 ^ (v281 >> 9) ^ (v281 >> 12) ^ (v281 >> 8) ^ 0xE77E) >> 8));
  v299 = v291 ^ v292 ^ v290 ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16) ^ 0xB14E41BE;
  LOBYTE(v280) = *(_BYTE *)(v68 + (v299 >> 24));
  v298 = v267 ^ v270 ^ 0x9E3B72EE;
  v295 = v271 ^ v286 ^ v289 ^ 0x151BF71A;
  LOBYTE(v286) = *(_BYTE *)(v68 + (v298 >> 24));
  LOBYTE(v271) = *(_BYTE *)(v68 + (v264 ^ (v281 >> 9) ^ (v281 >> 12) ^ BYTE1(v281) ^ 0x7E));
  v296 = *(_BYTE *)(v68 + (v294 >> 24));
  v297 = *(_BYTE *)(v68 + v299);
  LOBYTE(v298) = *(_BYTE *)(v68 + (v267 ^ v270 ^ 0xEE));
  LOBYTE(v299) = *(_BYTE *)(v68 + BYTE2(v294));
  v300 = *(_QWORD *)(STACK[0x2D8] + 8 * ((LODWORD(STACK[0x294]) ^ v278) ^ 0xFDu));
  *((_QWORD *)&v84 + 1) = v300 ^ 0xF74A0;
  *(_QWORD *)&v84 = v300 ^ 0xF6625EA35DC00000;
  LODWORD(v300) = ((unint64_t)(v84 >> 22) >> 25) ^ ((unint64_t)(v84 >> 22) >> 28) ^ ((unint64_t)(v84 >> 22) >> 24);
  v301 = *(_QWORD *)(STACK[0x2D8] + 8 * ((LODWORD(STACK[0x2B4]) ^ v280) ^ 0xFDu));
  *((_QWORD *)&v84 + 1) = v301 ^ 0xF74A0;
  *(_QWORD *)&v84 = v301 ^ 0xF6625EA35DC00000;
  v302 = v84 >> 22;
  v303 = *(_QWORD *)(STACK[0x2D8]
                   + 8 * ((LODWORD(STACK[0x2AC]) ^ *(_BYTE *)(v68 + BYTE2(v295))) ^ 0xFDu));
  *((_QWORD *)&v84 + 1) = v303 ^ 0xF74A0;
  *(_QWORD *)&v84 = v303 ^ 0xF6625EA35DC00000;
  LODWORD(v303) = ((unint64_t)(v84 >> 22) >> 9) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v304 = *(_QWORD *)(STACK[0x2D8] + 8 * ((LODWORD(STACK[0x2B0]) ^ v286) ^ 0xFDu));
  *((_QWORD *)&v84 + 1) = v304 ^ 0xF74A0;
  *(_QWORD *)&v84 = v304 ^ 0xF6625EA35DC00000;
  v305 = (v302 >> 33) ^ (v302 >> 36) ^ HIDWORD(v302) ^ v300 ^ ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16) ^ v303;
  v306 = *(_QWORD *)(STACK[0x2D8]
                   + 8 * ((LODWORD(STACK[0x2C0]) ^ *(_BYTE *)(v68 + BYTE2(v298))) ^ 0xFDu));
  *((_QWORD *)&v84 + 1) = v306 ^ 0xF74A0;
  *(_QWORD *)&v84 = v306 ^ 0xF6625EA35DC00000;
  LODWORD(v306) = ((unint64_t)(v84 >> 22) >> 9) ^ LODWORD(STACK[0x2D0]) ^ ((unint64_t)(v84 >> 22) >> 12) ^ ((unint64_t)(v84 >> 22) >> 8);
  v307 = v306 ^ 0xF02561EF;
  v308 = *(_QWORD *)(STACK[0x2D8] + 8 * ((LODWORD(STACK[0x28C]) ^ v271) ^ 0xFDu));
  *((_QWORD *)&v84 + 1) = v308 ^ 0xF74A0;
  *(_QWORD *)&v84 = v308 ^ 0xF6625EA35DC00000;
  LODWORD(v308) = ((unint64_t)(v84 >> 22) >> 17) ^ ((unint64_t)(v84 >> 22) >> 20) ^ ((unint64_t)(v84 >> 22) >> 16);
  v309 = v308 & 0x2000000;
  v310 = v308 & 0xFDFFFFFF;
  if ((v309 & v306) != 0)
    v311 = -v309;
  else
    v311 = v309;
  v312 = *(_QWORD *)(v82 + 8 * ((LOBYTE(STACK[0x2A8]) ^ *(_BYTE *)(v68 + BYTE2(v299))) ^ 0xFDu));
  v313 = v311 + v307;
  *((_QWORD *)&v315 + 1) = v312 ^ 0xF74A0;
  *(_QWORD *)&v315 = v312 ^ 0xF6625EA35DC00000;
  v314 = v315 >> 22;
  v316 = *(_QWORD *)(v82 + 8 * ((LODWORD(STACK[0x2A0]) ^ *(_BYTE *)(v68 + BYTE1(v295))) ^ 0xFDu));
  *((_QWORD *)&v315 + 1) = v316 ^ 0xF74A0;
  *(_QWORD *)&v315 = v316 ^ 0xF6625EA35DC00000;
  LODWORD(v316) = (v314 >> 25) ^ (v314 >> 28) ^ (v314 >> 24);
  LODWORD(v312) = ((unint64_t)(v315 >> 22) >> 33) ^ ((unint64_t)(v315 >> 22) >> 36) ^ ((unint64_t)(v315 >> 22) >> 32);
  v317 = *(_QWORD *)(v82
                   + 8 * ((LODWORD(STACK[0x2BC]) ^ *(_BYTE *)(v68 + v295)) ^ 0xFDu));
  *((_QWORD *)&v315 + 1) = v317 ^ 0xF74A0;
  *(_QWORD *)&v315 = v317 ^ 0xF6625EA35DC00000;
  v318 = *(_QWORD *)(v82 + 8 * ((LODWORD(STACK[0x2B8]) ^ *(_BYTE *)(v68 + BYTE1(v298))) ^ 0xFDu));
  LODWORD(v317) = ((unint64_t)(v315 >> 22) >> 17) ^ ((unint64_t)(v315 >> 22) >> 20) ^ ((unint64_t)(v315 >> 22) >> 16);
  *((_QWORD *)&v315 + 1) = v318 ^ 0xF74A0;
  *(_QWORD *)&v315 = v318 ^ 0xF6625EA35DC00000;
  v319 = v315 >> 22;
  v320 = *(_QWORD *)(v82 + 8 * ((LODWORD(STACK[0x2A4]) ^ v296) ^ 0xFDu));
  *((_QWORD *)&v315 + 1) = v320 ^ 0xF74A0;
  *(_QWORD *)&v315 = v320 ^ 0xF6625EA35DC00000;
  LODWORD(v320) = (v319 >> 25) ^ (v319 >> 28) ^ (v319 >> 24) ^ ((unint64_t)(v315 >> 22) >> 33) ^ ((unint64_t)(v315 >> 22) >> 36) ^ ((unint64_t)(v315 >> 22) >> 32);
  v321 = *(_QWORD *)(v82 + 8 * ((LODWORD(STACK[0x2C4]) ^ *(_BYTE *)(v68 + BYTE1(v299))) ^ 0xFDu));
  *((_QWORD *)&v315 + 1) = v321 ^ 0xF74A0;
  *(_QWORD *)&v315 = v321 ^ 0xF6625EA35DC00000;
  v322 = *(_QWORD *)(v82 + 8 * ((LODWORD(STACK[0x290]) ^ v297) ^ 0xFDu));
  LODWORD(v317) = v320 ^ ((unint64_t)(v315 >> 22) >> 9) ^ ((unint64_t)(v315 >> 22) >> 12) ^ ((unint64_t)(v315 >> 22) >> 8) ^ v317;
  *((_QWORD *)&v315 + 1) = v322 ^ 0xF74A0;
  *(_QWORD *)&v315 = v322 ^ 0xF6625EA35DC00000;
  LODWORD(v322) = ((unint64_t)(v315 >> 22) >> 17) ^ ((unint64_t)(v315 >> 22) >> 20) ^ ((unint64_t)(v315 >> 22) >> 16);
  v323 = *(_QWORD *)(v82 + 8 * ((LODWORD(STACK[0x298]) ^ *(_BYTE *)(v68 + (v295 >> 24))) ^ 0xFDu));
  *((_QWORD *)&v315 + 1) = v323 ^ 0xF74A0;
  *(_QWORD *)&v315 = v323 ^ 0xF6625EA35DC00000;
  v324 = v315 >> 22;
  v325 = *(_QWORD *)(v82 + 8 * ((LODWORD(STACK[0x288]) ^ v298) ^ 0xFDu));
  *((_QWORD *)&v315 + 1) = v325 ^ 0xF74A0;
  *(_QWORD *)&v315 = v325 ^ 0xF6625EA35DC00000;
  LODWORD(v325) = ((unint64_t)(v315 >> 22) >> 33) ^ ((unint64_t)(v315 >> 22) >> 36) ^ ((unint64_t)(v315 >> 22) >> 32);
  v326 = *(_QWORD *)(v82 + 8 * ((LODWORD(STACK[0x29C]) ^ v299) ^ 0xFDu));
  *((_QWORD *)&v315 + 1) = v326 ^ 0xF74A0;
  *(_QWORD *)&v315 = v326 ^ 0xF6625EA35DC00000;
  v327 = LODWORD(STACK[0x2D4]) ^ 0x85A441E2 ^ v305;
  v328 = LODWORD(STACK[0x2C8]) ^ v325 ^ ((unint64_t)(v315 >> 22) >> 9) ^ ((unint64_t)(v315 >> 22) >> 12) ^ ((unint64_t)(v315 >> 22) >> 8) ^ (v324 >> 25) ^ v322 ^ (v324 >> 28) ^ (v324 >> 24) ^ 0x2D9B15C4;
  v329 = v316 ^ v310 ^ v312 ^ 0xD44742D6 ^ v313;
  v330 = *(unsigned __int8 *)(v68 + (LOBYTE(STACK[0x2D4]) ^ 0xE2u ^ v305));
  v331 = *(unsigned __int8 *)(v68 + v328);
  v332 = LODWORD(STACK[0x2CC]) ^ 0xDBD4BF1B ^ v317;
  v333 = *(unsigned __int8 *)(v68 + (v329 >> 24));
  v334 = *(unsigned __int8 *)(v68 + BYTE2(v329));
  v335 = *(unsigned __int8 *)(v68 + BYTE1(v329));
  v336 = *(unsigned __int8 *)(v68 + (v328 >> 24));
  v337 = *(unsigned __int8 *)(v68 + BYTE1(v332));
  v338 = *(unsigned __int8 *)(v68 + BYTE2(v332));
  v339 = *(unsigned __int8 *)(v68 + BYTE2(v328));
  v340 = *(unsigned __int8 *)(v68 + BYTE1(v328));
  v341 = *(unsigned __int8 *)(v68 + v329);
  v342 = *(_QWORD *)(v82 + 8 * (v330 ^ v70));
  v343 = *(unsigned __int8 *)(v68 + v332);
  *((_QWORD *)&v315 + 1) = v342 ^ 0xF74A0;
  *(_QWORD *)&v315 = v342 ^ 0xF6625EA35DC00000;
  LODWORD(v342) = ((unint64_t)(v315 >> 22) >> 17) ^ ((unint64_t)(v315 >> 22) >> 20) ^ ((unint64_t)(v315 >> 22) >> 16);
  v344 = *(_QWORD *)(v82 + 8 * (v331 ^ v70));
  *((_QWORD *)&v315 + 1) = v344 ^ 0xF74A0;
  *(_QWORD *)&v315 = v344 ^ 0xF6625EA35DC00000;
  v345 = *(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v332 >> 24)) ^ v70));
  LODWORD(v342) = ((unint64_t)(v315 >> 22) >> 25) ^ ((unint64_t)(v315 >> 22) >> 28) ^ ((unint64_t)(v315 >> 22) >> 24) ^ v342;
  *((_QWORD *)&v315 + 1) = v345 ^ 0xF74A0;
  *(_QWORD *)&v315 = v345 ^ 0xF6625EA35DC00000;
  v346 = *(_QWORD *)(v82 + 8 * (v333 ^ v70));
  LODWORD(v333) = v342 ^ ((unint64_t)(v315 >> 22) >> 33) ^ ((unint64_t)(v315 >> 22) >> 36) ^ ((unint64_t)(v315 >> 22) >> 32);
  *((_QWORD *)&v315 + 1) = v346 ^ 0xF74A0;
  *(_QWORD *)&v315 = v346 ^ 0xF6625EA35DC00000;
  v347 = *(_QWORD *)(v82 + 8 * (v334 ^ v70));
  LODWORD(v342) = ((unint64_t)(v315 >> 22) >> 9) ^ ((unint64_t)(v315 >> 22) >> 12) ^ ((unint64_t)(v315 >> 22) >> 8);
  *((_QWORD *)&v315 + 1) = v347 ^ 0xF74A0;
  *(_QWORD *)&v315 = v347 ^ 0xF6625EA35DC00000;
  v348 = *(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v327 >> 24)) ^ v70));
  LODWORD(v347) = ((unint64_t)(v315 >> 22) >> 9) ^ ((unint64_t)(v315 >> 22) >> 12) ^ ((unint64_t)(v315 >> 22) >> 8);
  *((_QWORD *)&v315 + 1) = v348 ^ 0xF74A0;
  *(_QWORD *)&v315 = v348 ^ 0xF6625EA35DC00000;
  v349 = *(_QWORD *)(v82 + 8 * (v336 ^ v70));
  LODWORD(v344) = ((unint64_t)(v315 >> 22) >> 17) ^ ((unint64_t)(v315 >> 22) >> 20) ^ ((unint64_t)(v315 >> 22) >> 16);
  *((_QWORD *)&v315 + 1) = v349 ^ 0xF74A0;
  *(_QWORD *)&v315 = v349 ^ 0xF6625EA35DC00000;
  v350 = *(_QWORD *)(v82 + 8 * (v338 ^ v70));
  LODWORD(v344) = v344 ^ ((unint64_t)(v315 >> 22) >> 25) ^ ((unint64_t)(v315 >> 22) >> 28) ^ ((unint64_t)(v315 >> 22) >> 24);
  *((_QWORD *)&v315 + 1) = v350 ^ 0xF74A0;
  *(_QWORD *)&v315 = v350 ^ 0xF6625EA35DC00000;
  LODWORD(v350) = v344 ^ v347 ^ ((unint64_t)(v315 >> 22) >> 33) ^ ((unint64_t)(v315 >> 22) >> 36) ^ ((unint64_t)(v315 >> 22) >> 32) ^ 0x71D2CD5B;
  v351 = *(_QWORD *)(v82 + 8 * (v337 ^ v70));
  *((_QWORD *)&v315 + 1) = v351 ^ 0xF74A0;
  *(_QWORD *)&v315 = v351 ^ 0xF6625EA35DC00000;
  LODWORD(v351) = ((unint64_t)(v315 >> 22) >> 25) ^ ((unint64_t)(v315 >> 22) >> 28) ^ ((unint64_t)(v315 >> 22) >> 24);
  v352 = *(_QWORD *)(v82 + 8 * (v335 ^ v70));
  *((_QWORD *)&v315 + 1) = v352 ^ 0xF74A0;
  *(_QWORD *)&v315 = v352 ^ 0xF6625EA35DC00000;
  LODWORD(v352) = ((unint64_t)(v315 >> 22) >> 33) ^ ((unint64_t)(v315 >> 22) >> 36) ^ ((unint64_t)(v315 >> 22) >> 32);
  v353 = *(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v327)) ^ v70));
  *((_QWORD *)&v315 + 1) = v353 ^ 0xF74A0;
  *(_QWORD *)&v315 = v353 ^ 0xF6625EA35DC00000;
  v354 = *(_QWORD *)(v82 + 8 * (v339 ^ v70));
  LODWORD(v351) = v352 ^ v351 ^ ((unint64_t)(v315 >> 22) >> 9) ^ ((unint64_t)(v315 >> 22) >> 12) ^ ((unint64_t)(v315 >> 22) >> 8);
  *((_QWORD *)&v315 + 1) = v354 ^ 0xF74A0;
  *(_QWORD *)&v315 = v354 ^ 0xF6625EA35DC00000;
  v355 = *(_QWORD *)(v82 + 8 * (v340 ^ v70));
  LODWORD(v340) = ((unint64_t)(v315 >> 22) >> 17) ^ ((unint64_t)(v315 >> 22) >> 20) ^ ((unint64_t)(v315 >> 22) >> 16);
  *((_QWORD *)&v315 + 1) = v355 ^ 0xF74A0;
  *(_QWORD *)&v315 = v355 ^ 0xF6625EA35DC00000;
  v356 = *(_QWORD *)(v82 + 8 * (v343 ^ v70));
  LODWORD(v354) = ((unint64_t)(v315 >> 22) >> 17) ^ ((unint64_t)(v315 >> 22) >> 20) ^ ((unint64_t)(v315 >> 22) >> 16);
  *((_QWORD *)&v315 + 1) = v356 ^ 0xF74A0;
  *(_QWORD *)&v315 = v356 ^ 0xF6625EA35DC00000;
  LODWORD(v356) = ((unint64_t)(v315 >> 22) >> 25) ^ ((unint64_t)(v315 >> 22) >> 28) ^ ((unint64_t)(v315 >> 22) >> 24);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v341 ^ v70)), 22);
  v357 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xB941683C8B7E7300)
         - 0x235F4BE1BA40C680) ^ (unint64_t)v315) >> 32;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v327)) ^ v70)), 22);
  v358 = v333 ^ v342 ^ 0xAE156090;
  v359 = v356 ^ v354 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                                                  - ((2
                                                                    * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xAA713D4D36)
                                                                  + 0xD5389EA69BLL) ^ (unint64_t)v315) >> 8) ^ v357 ^ 0x9712A391;
  v360 = v351 ^ v340 ^ 0xDD82D701;
  v361 = v350 - ((2 * (_DWORD)v350) & 0x6502A8E8) - 1300147084;
  v362 = *(unsigned __int8 *)(v68 + (v333 ^ v342 ^ 0x90));
  v363 = *(unsigned __int8 *)(v68 + (v351 ^ v340 ^ 1));
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v358)) ^ v70)), 22);
  v364 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x7142B2C4D646ELL)
         - 0x197C75EA69D94DC9) ^ (unint64_t)v315) >> 24;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + v359) ^ v70)), 22);
  v365 = ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
        + 0x5E294C284A82312DLL
        - 2
        * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x5E294C284A82313FLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x12)) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v360)) ^ v70)), 22);
  LODWORD(v355) = v364 ^ ((((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
                          - 2
                          * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x78222213975DD37DLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x10)
                          + 0x78222313975DD36DLL) ^ (unint64_t)v315) >> 8);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v361 >> 24)) ^ v70)), 22);
  LODWORD(v342) = HIDWORD(v365) ^ v355 ^ ((((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
                                          - 2
                                          * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x78376555B74F7BB7 ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 3)
                                          + 0x6555B74F7BB4) ^ (unint64_t)v315) >> 16);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v361)) ^ v70)), 22);
  v366 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x92358EA780)
         - 0xB9CC0B6E538AC40) ^ (unint64_t)v315) >> 8;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v362 ^ v70)), 22);
  LODWORD(v366) = ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                   - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xB5D4EC7057D4)
                   - 0x73ECA51589C7D416) ^ (unint64_t)v315) >> 16) ^ v366;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v359 >> 24)) ^ v70)), 22);
  v367 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x13BA8998E7F5FELL)
         - 0x557622BB338C0501) ^ (unint64_t)v315) >> 24;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v360)) ^ v70)), 22);
  v368 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x9CE7E450B4AD16BELL)
         - 0x318C0DD7A5A974A1) ^ (unint64_t)v315) >> 32;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v363 ^ v70)), 22);
  LODWORD(v366) = v366 ^ v368 ^ v367;
  v369 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xF2E24F55124988)
        - 0x42868ED85576DB3CLL) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v361)) ^ v70)), 22);
  v370 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xB2547582E756F22)
        + 0x592A3AC173AB791) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v358 >> 24)) ^ v70)), 22);
  LODWORD(v333) = HIDWORD(v370) ^ (v369 >> 24) ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                                  - ((2
                                                    * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x7396B91934)
                                                  + 0x71699339CB5C8C9ALL) ^ (unint64_t)v315) >> 8);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v359)) ^ v70)), 22);
  v371 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x75DAD4D9433ELL)
         + 0xBAED6A6CA19FLL) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v359)) ^ v70)), 22);
  v372 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x7E6FF6E5C6042084)
         - 0x40C8048D1CFDEFBELL) ^ (unint64_t)v315) >> 32;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v360 >> 24)) ^ v70)), 22);
  v373 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xD6ABE5DC28)
         - 0x95CCA94AA0D11ECLL) ^ (unint64_t)v315) >> 8;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82+ 8* (*(unsigned __int8 *)(v68 + (v350 - ((2 * v350) & 0xE8) + 116)) ^ v70)), 22);
  v374 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xA1993EEE4E84)
         - 0x7243AF336088D8BELL) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v358)) ^ v70)), 22);
  v375 = v342 ^ 0xAA9EE6B4;
  v376 = v366 ^ 0xD5EEB833;
  v377 = v373 ^ v374 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                                                  - ((2
                                                                    * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xAC43C5D1AB5CELL)
                                                                  + 0x5621E2E8D5AE7) ^ (unint64_t)v315) >> 24) ^ v372 ^ 0x7E4E3A2E;
  v378 = v333 ^ 0x5CC14C09 ^ v371;
  v379 = *(unsigned __int8 *)(v68 + BYTE2(v377));
  v380 = *(unsigned __int8 *)(v68 + BYTE2(v376));
  v381 = *(unsigned __int8 *)(v68 + (v376 >> 24));
  v382 = *(unsigned __int8 *)(v68 + BYTE1(v377));
  v383 = *(unsigned __int8 *)(v68 + BYTE1(v376));
  v384 = *(unsigned __int8 *)(v68 + v377);
  LODWORD(v373) = *(unsigned __int8 *)(v68 + (v377 >> 24));
  v385 = *(unsigned __int8 *)(v68 + (v366 ^ 0x33u));
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v342 ^ 0xB4u)) ^ v70)), 22);
  v386 = (((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
         + 0x5A75FB310BBC2F4DLL
         - 2
         * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x5A75FB310BBC2F5DLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x10)) ^ (unint64_t)v315) >> 8;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v379 ^ v70)), 22);
  v387 = ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
        - 2
        * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x62E409F9676A1BBELL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x12)
        - 0x1D1BF6069895E454) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v378)) ^ v70)), 22);
  v388 = v381 ^ v70;
  LODWORD(v381) = (v387 >> 16) ^ v386 ^ ((((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
                                         - 2
                                         * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x72EA3E61C527BD7BLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 3)
                                         - 0xC15C19E3AD84288) ^ (unint64_t)v315) >> 24);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * v388), 22);
  v389 = *(_QWORD *)(v82 + 8 * (v380 ^ v70));
  v390 = (((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
         - 2
         * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x68B03F2013FF07EFLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 1)
         - 0x174FC0DFEC00F812) ^ (unint64_t)v315) >> 32;
  *(_QWORD *)&v315 = __ROR8__(v389, 22);
  v391 = ((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1);
  v392 = ((v391 - ((2 * v391) & 0x9FDA8BB0BAB8) - 0x6F68B012BA27A2A4) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v375 >> 24)) ^ v70)), 22);
  LODWORD(v366) = ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                   - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x4402A2C23D2112)
                   + 0x5B220151611E9089) ^ (unint64_t)v315) >> 24) ^ v392;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v382 ^ v70)), 22);
  v393 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x4B2E0C7B839FBA7ELL)
         + 0x2597063DC1CFDD3FLL) ^ (unint64_t)v315) >> 32;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v378)) ^ v70)), 22);
  v394 = ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
        - 2
        * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x3C68382E52FFA53BLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x10)
        + 0x2E52FFA52BLL) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + v378) ^ v70)), 22);
  LODWORD(v363) = v366 ^ v393 ^ (v394 >> 8);
  v395 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - 0x27FB8753BACE1F29
         + (~(2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) | 0x4FF70EA7759C3E53)) ^ (unint64_t)v315) >> 32;
  v396 = (v383 - 2 * (v383 & 0xFFFFFFFFFFFFFFFBLL) + 251) ^ 0x5FA4A315DE3B5F91;
  v397 = v396 & 0x4472035028C72D24 ^ 0x5DFC353BA2C1AC0FLL ^ ((v396 & 0x44720350D738D2DBLL)
                                                             - ((2 * v396) & 0xA00400A871A534)
                                                             + 0x19DC362B74F9FE9ELL);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82+ 8* ((0xAD85B05583CB11C3 - (v397 | 0xAD85B05583CB11C3) + (v397 | 0x127A4FAA7C34EE3CLL)) ^ 0x165A4CBA7437E33ALL)), 22);
  v398 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xF9FE58DFBELL)
         - 0x75A7518300D39021) ^ (unint64_t)v315) >> 8;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v375)) ^ v70)), 22);
  v399 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x671D3C44FBF4)
         - 0x77BBCC7161DD8206) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v384 ^ v70)), 22);
  LODWORD(v399) = v395 ^ v399 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                 - ((2
                                   * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xFB154FC9F5298ELL)
                                 + 0xFD8AA7E4FA94C7) ^ (unint64_t)v315) >> 24);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82+ 8* (((v373 ^ -(int)v373 ^ (251 - (v373 ^ 0xFB))) + 251) ^ 6)), 22);
  v400 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xFDDC0D10211D4126)
         - 0x111F977EF715F6DLL) ^ (unint64_t)v315) >> 32;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v378 >> 24)) ^ v70)), 22);
  v401 = (((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
         - 2
         * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x55CD4D3C8DA7FD9DLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 1)
         - 0x2A32B2C372580264) ^ (unint64_t)v315) >> 8;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v385 ^ v70)), 22);
  LODWORD(v385) = v401 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                          - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xA1C902B8D00ELL)
                          - 0x723D2F1B7EA397F9) ^ (unint64_t)v315) >> 16);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v375)) ^ v70)), 22);
  v402 = v381 ^ v390 ^ 0xFCF101B2;
  v403 = v385 ^ ((((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
                                             - 2
                                             * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x8AFC7BC358C6B8FLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 3)
                                             + 0xAFC7BC358C6B8CLL) ^ (unint64_t)v315) >> 24) ^ 0x46ACBB54 ^ v400;
  v404 = v398 ^ v399 ^ 0xE9694C02;
  v405 = *(unsigned __int8 *)(v68 + BYTE2(v403));
  v406 = *(unsigned __int8 *)(v68 + BYTE1(v404));
  v407 = v363 ^ 0x54E3C980;
  v408 = *(unsigned __int8 *)(v68 + BYTE1(v407));
  LODWORD(v390) = *(unsigned __int8 *)(v68 + BYTE2(v407));
  v409 = *(unsigned __int8 *)(v68 + v404);
  LODWORD(v382) = *(unsigned __int8 *)(v68 + BYTE1(v403));
  v410 = *(unsigned __int8 *)(v68 + (v404 >> 24));
  v411 = *(unsigned __int8 *)(v68 + v403);
  v412 = *(unsigned __int8 *)(v68 + BYTE2(v404));
  v413 = *(unsigned __int8 *)(v68 + v407);
  v414 = v407 >> 24;
  v415 = v403 >> 24;
  v416 = *(unsigned __int8 *)(v68 + (v402 >> 24));
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v402)) ^ v70)), 22);
  v417 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xD94B5CBA989E5354)
        + 0x6CA5AE5D4C4F29AALL) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v405 ^ v70)), 22);
  v418 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x4D098DBE48)
        - 0x3DD77E597B3920DCLL) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v406 ^ v70)), 22);
  v419 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x7192089F5524)
         + 0x201BB8C9044FAA92) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82+ 8* ((((v390 ^ 0xFB) - (v390 ^ v70)) ^ 0xFFFFFFFC)+ (v390 ^ 0xFB))), 22);
  LODWORD(v390) = (v418 >> 8) ^ HIDWORD(v417) ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                                 - ((2
                                                   * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x395A3970E8D132)
                                                 + 0x9CAD1CB8746899) ^ (unint64_t)v315) >> 24);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v408 ^ v70)), 22);
  v420 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xEDC5AB16183ALL)
        + 0x5A7476E2D58B0C1DLL) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v402)) ^ v70)), 22);
  LODWORD(v420) = ((((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
                   + 0x689276DDDF434DEALL
                   - 2
                   * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x689276DDDF434DFALL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x10)) ^ (unint64_t)v315) >> 24) ^ (v420 >> 16);
  LODWORD(v395) = (v382 ^ 0xFB) - ((2 * (v382 ^ 0xFB)) & 0xC) + 6;
  LODWORD(v395) = (v395 ^ 0xBFF77AFF) - 545268388 + ((2 * v395) & 0x7FEEF5FE);
  LODWORD(v417) = (v395 ^ 0x7488B781) & (2 * (v395 & 0x6088A7A5)) ^ v395 & 0x6088A7A5;
  LODWORD(v382) = ((2 * (v395 ^ 0xB498BA83)) ^ 0xA8203A4C) & (v395 ^ 0xB498BA83) ^ (2 * (v395 ^ 0xB498BA83)) & 0xD4101D26;
  LODWORD(v418) = v382 ^ 0x54100522;
  LODWORD(v382) = (v382 ^ 0x80001804) & (4 * v417) ^ v417;
  LODWORD(v417) = ((4 * v418) ^ 0x50407498) & v418 ^ (4 * v418) & 0xD4101D24;
  LODWORD(v382) = (v417 ^ 0x50001400) & (16 * v382) ^ v382;
  LODWORD(v417) = ((16 * (v417 ^ 0x84100926)) ^ 0x4101D260) & (v417 ^ 0x84100926) ^ (16 * (v417 ^ 0x84100926)) & 0xD4101D20;
  v421 = v395 ^ (2
                             * ((((v417 ^ 0x94100D06) << 8) & 0x54100000 ^ (((v417 ^ 0x94100D06) << 8) ^ 0x101D0000) & (v417 ^ 0x94100D06) ^ 0x10101010) & (((v417 ^ 0x40001000) & ((_DWORD)v382 << 8) ^ v382) << 16) ^ (v417 ^ 0x40001000) & ((_DWORD)v382 << 8) ^ v382)) ^ 0x57257261;
  v422 = (v421 - ((2 * v421) & 0x1C40A2ED8) - 0x44C02FB41DFAE894) ^ 0xD736D2CBF3019668;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82+ 8* ((((2 * v422) & 0x1000000FB174C6C4) - v422 - 0x5A964917D8BA6363) ^ 0x960B46801ECC85DLL)), 22);
  v423 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x2A0978CD5865A1CLL)
         + 0x1504BC66AC32D0ELL) ^ (unint64_t)v315) >> 32;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v409 ^ v70)), 22);
  LODWORD(v409) = v420 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                          - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x8A303214ELL)
                          + 0x4518190A7) ^ (unint64_t)v315) >> 8);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v410 ^ v70)), 22);
  v424 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x4D24040474)
         + 0x58CF67A69202023ALL) ^ (unint64_t)v315) >> 8;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v413 ^ v70)), 22);
  v425 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x1487A8E6AEA0)
         - 0x427DF5BC2B8CA8B0) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + v402) ^ v70)), 22);
  LODWORD(v384) = v425 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                          - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x47BE0E62AB63ELL)
                          - 0x5F7DC20F8CEAA4E1) ^ (unint64_t)v315) >> 24);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v411 ^ v70)), 22);
  v426 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x3DDC9BB762F885CELL)
         - 0x6111B2244E83BD19) ^ (unint64_t)v315) >> 32;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + v415) ^ v70)), 22);
  v427 = (((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
         - 2
         * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x78179B64003DD2FDLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 1)
         - 0x7E8649BFFC22D04) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v412 ^ v70)), 22);
  v428 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xA2BBC269B8B1FCLL)
         + 0x4AD15DE134DC58FELL) ^ (unint64_t)v315) >> 24;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + v414) ^ v70)), 22);
  LODWORD(v414) = v427 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                          - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xB0D7FF8CCF199122)
                          - 0x279400399873376FLL) ^ (unint64_t)v315) >> 32);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v416 ^ v70)), 22);
  v429 = v428 ^ v414 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                                                  - ((2
                                                                    * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xA6DBB17B6CLL)
                                                                  + 0xD36DD8BDB6) ^ (unint64_t)v315) >> 8) ^ 0xFB1E0A;
  v430 = v390 ^ 0xC10BB2CA ^ v419;
  v431 = v384 ^ v426 ^ 0x201E24EA ^ v424;
  v432 = v409 ^ 0x9DBA183D ^ v423;
  v433 = *(unsigned __int8 *)(v68 + (v431 >> 24));
  v434 = *(unsigned __int8 *)(v68 + BYTE2(v430));
  v435 = *(unsigned __int8 *)(v68 + BYTE2(v431));
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v430 >> 24)) ^ v70)), 22);
  v436 = ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
        + 0x6A282711127A872FLL
        - 2
        * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x6A282711127A873FLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x10)) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + v429) ^ v70)), 22);
  v437 = *(unsigned __int8 *)(v68 + (v409 ^ 0x3Du ^ v423));
  LODWORD(v436) = ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                   - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xB1BF059AFD82630)
                   - 0x7A7207D32813ECE8) ^ (unint64_t)v315) >> 32) ^ (v436 >> 24);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + v431) ^ v70)), 22);
  v438 = *(unsigned __int8 *)(v68 + BYTE1(v430));
  v439 = *(unsigned __int8 *)(v68 + BYTE1(v431));
  v440 = *(unsigned __int8 *)(v68 + v430);
  LODWORD(v430) = v436 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                          - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xA371936E6ALL)
                          + 0x29997E51B8C9B735) ^ (unint64_t)v315) >> 8);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v432)) ^ v70)), 22);
  v441 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xF4E07639DEDELL)
        + 0xFA703B1CEF6FLL) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v432)) ^ v70)), 22);
  v442 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xA2E8C7E4347E9F66)
        + 0x517463F21A3F4FB3) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v434 ^ v70)), 22);
  v443 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x1884BFFACALL)
        - 0x7FA853F3BDA0029BLL) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + (v429 >> 24)) ^ v70)), 22);
  v444 = *(unsigned __int8 *)(v68 + (v432 >> 24));
  v445 = HIDWORD(v442);
  LODWORD(v443) = (v443 >> 8) ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                 - ((2
                                   * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x93DCBA6AAE16)
                                 - 0x4F493611A2CAA8F5) ^ (unint64_t)v315) >> 16);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v433 ^ v70)), 22);
  v446 = (0x25A3FE699BCC7529
        - (((v315 ^ 0xE3B6F7594013531ELL) - 0x4387516AD5A54BELL) ^ ((v315 ^ 0xDA12FA4E3304199DLL) - 0x3D9C7801DE4D1E3DLL) ^ ((v315 ^ 0x4768ECEFA6DC7F4) + 0x1C07F37EE8DB3FACLL))) ^ ((v315 ^ 0x445305D653E49D83) - 0x7981860FDA9E10F4);
  v447 = ((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ ((v315 ^ 0x8E824FED4907A0 ^ (v446 - ((2 * v446) & 0xB4B8032CC86715AELL) - 0x25A3FE699BCC7529))
                                                                        + 0x7E79F02561EF0BLL);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v435 ^ v70)), 22);
  LODWORD(v435) = v443 ^ (v447 >> 24);
  v448 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x3A099EF20EFALL)
         + 0x23FC1D04CF79077DLL) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v437 ^ v70)), 22);
  v449 = (((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
         + 0x45AF36FEDC13FD3ELL
         - 2
         * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x45AF36FEDC13FD3FLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 1)) ^ (unint64_t)v315) >> 24;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v438 ^ v70)), 22);
  v450 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x7FF8D9BE2BA4A5C2)
         + 0x3FFC6CDF15D252E1) ^ (unint64_t)v315) >> 32;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE2(v429)) ^ v70)), 22);
  LODWORD(v414) = v448 ^ v450;
  v451 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x62AC458D02)
        + 0xB15622C681) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(v68 + BYTE1(v429)) ^ v70)), 22);
  v452 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x3BEAC9B6C8A29F2ELL)
        - 0x620A9B249BAEB069) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v439 ^ v70)), 22);
  v453 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xC6B5FCCBA7BFDE64)
        + 0x635AFE65D3DFEF32) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v444 ^ v70)), 22);
  v454 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x55D4F5EA76CD02A4)
        - 0x5515850AC4997EAELL) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v440 ^ v70)), 22);
  v455 = (v452 >> 8) ^ (v453 >> 16) ^ (v454 >> 24) ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                                      - ((2
                                                        * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xD2471F4DB5F9D108)
                                                      - 0x16DC70592503177CLL) ^ (unint64_t)v315) >> 32) ^ 0xA079F8935951AALL;
  v456 = v430 ^ 0x2E042E10 ^ (v441 >> 16);
  v457 = *(unsigned __int8 *)(a62 + (v430 ^ 0x10u ^ BYTE2(v441)));
  v458 = *(unsigned __int8 *)(a62 + (BYTE1(v455) ^ 0xECLL));
  v459 = v449 ^ v414 ^ (v451 >> 8) ^ 0xF54FCBF1;
  v460 = v435 ^ 0x5A04DEAB ^ v445;
  v461 = *(unsigned __int8 *)(a62 + (v435 ^ 0xABu ^ v445));
  v462 = v455 ^ 0x49EEEC40;
  v463 = *(unsigned __int8 *)(a62 + (v455 ^ 0x40u));
  v464 = *(unsigned __int8 *)(a62 + BYTE1(v459));
  v465 = *(unsigned __int8 *)(a62 + BYTE2(v459));
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v457 ^ v70)), 22);
  v466 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xB3B34FA42DF73ELL)
         - 0x7CA626582DE90461) ^ (unint64_t)v315) >> 24;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v458 ^ v70)), 22);
  HIDWORD(v458) = DWORD1(v315);
  v467 = (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
       - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x9DE9EEAF21D7B5D4)
       - 0x310B08A86F142516;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + (v459 >> 24)) ^ v70)), 22);
  v468 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x3C1B3D47D6)
        + 0x7571421E0D9EA3EBLL) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v461 ^ v70)), 22);
  LODWORD(v466) = v466 ^ (v468 >> 8);
  v469 = *(unsigned __int8 *)(a62 + (v462 >> 24));
  v470 = *(unsigned __int8 *)(a62 + BYTE2(v462));
  LODWORD(v462) = HIDWORD(v467) ^ HIDWORD(v458) ^ v466 ^ ((((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
                                                          - 2
                                                          * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x4B12AE3D119AF151 ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x10)
                                                          + 0xAE3D119AF141) ^ (unint64_t)v315) >> 16);
  v471 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + (v460 >> 24)) ^ v70)), 22);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + (v456 >> 24)) ^ v70)), 22);
  v472 = (((v471 >> 4) ^ (v471 >> 1) ^ 0x1D3469D15C2AEE6CLL)
        - 2
        * (((v471 >> 4) ^ (v471 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x525FD00FEEA3E3BBLL ^ ((v471 >> 4) ^ (v471 >> 1)) & 0x12)
        - 0x2DA02FF0115C1C57) ^ v471;
  v473 = ((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1);
  v474 = v473 ^ 0x1D3469D15C2AEE6CLL;
  v475 = (v473 ^ 0x1D3469D15C2AEE6CLL) & 0x287907DAAA7CA77FLL ^ v473 & 2;
  v476 = *(unsigned __int8 *)(a62 + v459);
  LODWORD(v459) = (((v474 - 2 * v475 - 0x5786F82555835883) ^ (unint64_t)v315) >> 16) ^ (v472 >> 8);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v463 ^ v70)), 22);
  v477 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x31677707263FF0)
        - 0x4DE74C447C6CE008) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v465 ^ v70)), 22);
  v478 = ((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1);
  v479 = v478 ^ 0x1D3469D15C2AEE6CLL;
  v480 = (v478 ^ 0x1D3469D15C2AEE6CLL) & 0x57708DC40B13602BLL ^ v478 & 1;
  v481 = *(unsigned __int8 *)(a62 + BYTE2(v460));
  v482 = *(unsigned __int8 *)(a62 + BYTE1(v460));
  v483 = v477 >> 24;
  v484 = v479 + 0x57708DC40B13602ALL - 2 * v480;
  v485 = *(_QWORD *)(v82 + 8 * (v464 ^ v70));
  LODWORD(v464) = v459 ^ ((v484 ^ (unint64_t)v315) >> 32);
  *(_QWORD *)&v315 = __ROR8__(v485, 22);
  v486 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x85D8260205F2)
         - 0x5F663D13ECFEFD07) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v481 ^ v70)), 22);
  LODWORD(v486) = ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                   - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x737EC5AD78CB82)
                   + 0x6DB9BF62D6BC65C1) ^ (unint64_t)v315) >> 24) ^ v486;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + BYTE2(v456)) ^ v70)), 22);
  LODWORD(v484) = v486 ^ ((((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
                          + 0x10F8774288D3D480
                          - 2
                          * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x10F8774288D3D481 ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 1)) ^ (unint64_t)v315) >> 32);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v469 ^ v70)), 22);
  v487 = v470 ^ v70;
  v488 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x351872D956)
         + 0x9A8C396CABLL) ^ (unint64_t)v315) >> 8;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * v487), 22);
  v489 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x1BE0A03B16)
         - 0x5F4C09720FAFE275) ^ (unint64_t)v315) >> 8;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v476 ^ v70)), 22);
  v490 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xD4C5ED12E60ELL)
         - 0x7D1A959D09768CF9) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v482 ^ v70)), 22);
  LODWORD(v490) = v490 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                          - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xF761911806B60ALL)
                          - 0x16844F3773FCA4FBLL) ^ (unint64_t)v315) >> 24);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + BYTE1(v456)) ^ v70)), 22);
  v491 = v462 ^ 0xB9EA72A3;
  v492 = *(unsigned __int8 *)(a62 + (v462 ^ 0xA3u));
  v493 = v490 ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                               - ((2
                                 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x9BE4870CBF332E2CLL)
                               + 0x4DF243865F999716) ^ (unint64_t)v315) >> 32) ^ 0xF98E7838 ^ v489;
  v494 = v464 ^ 0x930969DC ^ v483;
  v495 = v484 ^ 0x9DC95C9B ^ v488;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v492 ^ v70)), 22);
  v496 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xDED1F3A4F2)
        - 0x1EB26F9097062D87) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + BYTE1(v493)) ^ v70)), 22);
  v497 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x699999884C88)
         - 0x457F4B33333BD9BCLL) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + (v495 >> 24)) ^ v70)), 22);
  LODWORD(v483) = v497 ^ (v496 >> 8) ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                        - ((2
                                          * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x21E96A57AA21C0)
                                        + 0x3E10F4B52BD510E0) ^ (unint64_t)v315) >> 24);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + (v494 >> 24)) ^ v70)), 22);
  v498 = ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
        - 2
        * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x47E4C17D47F0199FLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x10)
        - 0x381B3E82B80FE671) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + BYTE2(v494)) ^ v70)), 22);
  v499 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xDB35703D55D1AALL)
        - 0x4F126547E155172BLL) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + (v491 >> 24)) ^ v70)), 22);
  v500 = *(unsigned __int8 *)(a62 + BYTE2(v493));
  v501 = *(unsigned __int8 *)(a62 + (v493 >> 24));
  v502 = ((unint64_t)v315 ^ 0x2728192449E6FD7ALL ^ ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                                         - ((2
                                                           * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x3909C61BCBFB3E0CLL)
                                                         - 0x637B1CF21A0260FALL)) >> (v391 & 0x20) >> (v391 & 0x20 ^ 0x20);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + v493) ^ v70)), 22);
  v503 = (((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
         - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x972E733482)
         - 0x1E213B3468C665BFLL) ^ (unint64_t)v315) >> 8;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + BYTE2(v495)) ^ v70)), 22);
  LODWORD(v503) = v502 ^ (v499 >> 24) ^ v503;
  v504 = ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
        - 2
        * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x220A8931FA9762B7 ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x10)
        + 0x8931FA9762A7) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + BYTE1(v495)) ^ v70)), 22);
  v505 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xD684C14396)
        - 0x165C8594BD9F5E35) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + BYTE1(v494)) ^ v70)), 22);
  v506 = *(unsigned __int8 *)(a62 + v495);
  LODWORD(v495) = ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                   - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x4624697C422)
                   + 0x17910231234BE211) ^ (unint64_t)v315) >> 16) ^ (v505 >> 8);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + BYTE2(v491)) ^ v70)), 22);
  v507 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xA1FB7926B030E6)
        + 0x4F50FDBC93581873) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v501 ^ v70)), 22);
  LODWORD(v495) = v495 ^ (v507 >> 24) ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                         - ((2
                                           * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xB068BD4039316F6ELL)
                                         - 0x27CBA15FE3674849) ^ (unint64_t)v315) >> 32);
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v500 ^ v70)), 22);
  v508 = ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
        - 2
        * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x6E22215E8E30335FLL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 3)
        - 0x11DDDEA171CFCCA4) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (v506 ^ v70)), 22);
  v509 = (((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL)
         - 2
         * ((((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1) ^ 0x1D3469D15C2AEE6CLL) & 0x113E97534B9C077ELL ^ (((unint64_t)v315 >> 4) ^ ((unint64_t)v315 >> 1)) & 0x10)
         - 0x6EC168ACB463F892) ^ (unint64_t)v315) >> 16;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + v494) ^ v70)), 22);
  v510 = ((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
        - ((2 * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0xC272491EA5E190)
        + 0x1D6139248F52F0C8) ^ v315;
  *(_QWORD *)&v315 = __ROR8__(*(_QWORD *)(v82 + 8 * (*(unsigned __int8 *)(a62 + BYTE1(v491)) ^ v70)), 22);
  LODWORD(v491) = (v510 >> 24) ^ ((((((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))
                                  - ((2
                                    * (((unint64_t)v315 >> 4) ^ 0x1D3469D15C2AEE6CLL ^ ((unint64_t)v315 >> 1))) & 0x9C81143D3D000E3ALL)
                                  - 0x31BF75E1617FF8E3) ^ (unint64_t)v315) >> 32);
  v511 = v483 ^ HIDWORD(v498) ^ 0x39F4C7C9;
  v512 = v503 ^ (v504 >> 16) ^ 0xC62FC65;
  v513 = v509 ^ (v508 >> 8) ^ v491 ^ 0x39C463DD;
  v514 = v495 ^ 0xC0EA7474;
  LODWORD(v508) = *(unsigned __int8 *)(a62 + v512);
  LODWORD(v509) = *(unsigned __int8 *)(a62 + BYTE1(v511));
  LODWORD(STACK[0x4E8]) = (*(unsigned __int8 *)(a62 + BYTE2(v511)) << 24) | (*(unsigned __int8 *)(a62
                                                                                                + (v495 ^ 0x74u)) << 8) | (*(unsigned __int8 *)(a62 + BYTE1(v513)) << 16) | *(unsigned __int8 *)(a62 + BYTE1(v512));
  LODWORD(v508) = ((_DWORD)v508 << 16) | ((_DWORD)v509 << 8) | *(unsigned __int8 *)(a62 + v513);
  LODWORD(v509) = *(unsigned __int8 *)(a62 + (v512 >> 24));
  LODWORD(STACK[0x4F0]) = v508 | (*(unsigned __int8 *)(a62 + (v514 >> 24)) << 24);
  LODWORD(STACK[0x500]) = ((_DWORD)v509 << 8) | (*(unsigned __int8 *)(a62 + (v513 >> 24)) << 24) | (*(unsigned __int8 *)(a62 + BYTE2(v514)) << 16) | *(unsigned __int8 *)(a62 + v511);
  LODWORD(STACK[0x508]) = (*(unsigned __int8 *)(a62 + BYTE1(v514)) << 16) | (*(unsigned __int8 *)(a62 + BYTE2(v512)) << 8) | *(unsigned __int8 *)(a62 + (v511 >> 24)) | (*(unsigned __int8 *)(a62 + BYTE2(v513)) << 24);
  v515 = (uint64_t (*)(void))(*(_QWORD *)(v72 + 8 * (v71 ^ (30 * ((STACK[0x440] & 1) == 0)))) - 8);
  STACK[0x4D8] = STACK[0x320] + 16;
  return v515();
}

uint64_t sub_100707F80()
{
  uint64_t v0;
  int v1;

  v1 = STACK[0x4E0];
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 8 * v1)
                                                                                                 - 12))(STACK[0x268] ^ STACK[0x340], STACK[0x380] ^ STACK[0x420] ^ (v1 + 16239) ^ 0x38, STACK[0x370] ^ STACK[0x420] ^ 0x5E, STACK[0x358] ^ STACK[0x420] ^ 0x53, STACK[0x390] ^ STACK[0x420] ^ 0x41, STACK[0x330] ^ STACK[0x420] ^ 0xFFFFFF96, STACK[0x398] ^ STACK[0x420] ^ 0xFFFFFFF3, STACK[0x350] ^ STACK[0x420] ^ 0xFFFFFFB1);
}

uint64_t sub_10070809C()
{
  int v0;
  unsigned __int8 v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((v0 + 10912) ^ (52 * (v1 == LODWORD(STACK[0x430])))))
                            - 4))();
}

uint64_t sub_1007080DC(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v5 = (__ROR8__(a1, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x764EB8E4795C70B2;
  v6 = __ROR8__(v5 ^ 0xB872780C2581A1CELL, 8);
  v5 ^= 0xF5F840D0109DDBBALL;
  v7 = (v6 + v5) ^ 0x9FEAE3EFA61AD548;
  v8 = v7 ^ __ROR8__(v5, 61);
  v9 = (v8 + __ROR8__(v7, 8)) ^ 0x2210426E04724766;
  v10 = v9 ^ __ROR8__(v8, 61);
  v11 = (__ROR8__(v9, 8) + v10) ^ 0x546F9ABB3434D760;
  v12 = v11 ^ __ROR8__(v10, 61);
  v13 = v12 + __ROR8__(v11, 8);
  v14 = v13 ^ __ROR8__(v12, 61);
  *((_QWORD *)&v15 + 1) = v14 ^ 0x6C85D9D5EEAC54DLL;
  *(_QWORD *)&v15 = v14;
  v16 = (__ROR8__(v13 ^ 0x6C85D9D5EEAC54DLL, 8) + (v14 ^ 0x6C85D9D5EEAC54DLL)) ^ 0x602CFECF54BC3BA7;
  v17 = v16 ^ (v15 >> 61);
  v18 = (__ROR8__(v16, 8) + v17) ^ 0x2EE49A9BDF81F886;
  v19 = ((unint64_t)(a1 + 8) >> 8) - 0x764EB8E4795C70B2 + ((unint64_t)(a1 + 8) >> 3 << 59);
  *(_QWORD *)&v15 = __ROR8__(v19 ^ 0xB872780C2581A1CELL, 8);
  v19 ^= 0xF5F840D0109DDBBALL;
  v20 = (v15 + v19) ^ 0x9FEAE3EFA61AD548;
  v21 = v20 ^ __ROR8__(v19, 61);
  LOBYTE(v19) = 8 * (a1 & 7);
  v22 = (((v18 ^ __ROR8__(v17, 61)) + __ROR8__(v18, 8)) ^ 0x9B30CAD63CF39C9CLL) >> v19;
  v23 = (__ROR8__(v20, 8) + v21) ^ 0x2210426E04724766;
  v24 = v23 ^ __ROR8__(v21, 61);
  v25 = (__ROR8__(v23, 8) + v24) ^ 0x546F9ABB3434D760;
  v26 = v25 ^ __ROR8__(v24, 61);
  v27 = __ROR8__(v25, 8) + v26;
  v28 = __ROR8__(v27 ^ 0x6C85D9D5EEAC54DLL, 8);
  v29 = v27 ^ __ROR8__(v26, 61);
  v30 = (v29 ^ 0x6C85D9D5EEAC54DLL) + v28;
  *((_QWORD *)&v15 + 1) = v29 ^ 0x6C85D9D5EEAC54DLL;
  *(_QWORD *)&v15 = v29;
  v31 = v30 ^ 0x602CFECF54BC3BA7 ^ (v15 >> 61);
  v32 = (v31 + __ROR8__(v30 ^ 0x602CFECF54BC3BA7, 8)) ^ 0x2EE49A9BDF81F886;
  v33 = (__ROR8__(v32, 8) + (v32 ^ __ROR8__(v31, 61))) ^ 0x9B30CAD63CF39C9CLL;
  v34 = (__ROR8__(v3, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x764EB8E4795C70B2;
  v35 = v34 ^ 0xB872780C2581A1CELL;
  v34 ^= 0xF5F840D0109DDBBALL;
  v36 = (v34 + (v35 << 56) + (v35 >> 8)) ^ 0x9FEAE3EFA61AD548;
  v37 = v36 ^ __ROR8__(v34, 61);
  v38 = (v37 + __ROR8__(v36, 8)) ^ 0x2210426E04724766;
  v39 = v22 + 8 * (v33 << (v19 ^ 0x3Du));
  v40 = v38 ^ __ROR8__(v37, 61);
  v41 = (v40 + __ROR8__(v38, 8)) ^ 0x546F9ABB3434D760;
  v42 = v41 ^ __ROR8__(v40, 61);
  v43 = v42 + __ROR8__(v41, 8);
  v44 = v43 ^ __ROR8__(v42, 61);
  v45 = (__ROR8__(v43 ^ 0x6C85D9D5EEAC54DLL, 8) + (v44 ^ 0x6C85D9D5EEAC54DLL)) ^ 0x602CFECF54BC3BA7;
  *((_QWORD *)&v15 + 1) = v44 ^ 0x6C85D9D5EEAC54DLL;
  *(_QWORD *)&v15 = v44;
  v46 = v45 ^ (v15 >> 61);
  v47 = (__ROR8__(v45, 8) + v46) ^ 0x2EE49A9BDF81F886;
  v48 = v33 >> v19;
  v49 = v48
      + 8 * (((__ROR8__(v47, 8) + (v47 ^ __ROR8__(v46, 61))) ^ 0x1B30CAD63CF39C9CLL) << (v19 ^ 0x3Du));
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, unint64_t, _QWORD))(*(_QWORD *)(v4 + 8 * (v1 - 14063)) - 12))(STACK[0x340] ^ STACK[0x420] ^ 0x48 ^ (v39 >> 16), STACK[0x380] ^ STACK[0x420] ^ 0xB ^ HIDWORD(v49), STACK[0x370] ^ v48 ^ STACK[0x420] ^ 0xF, STACK[0x358] ^ STACK[0x420] ^ 0x57 ^ (v49 >> 8), STACK[0x390] ^ STACK[0x420] ^ 0xFFFFFFDE ^ (v39 >> 40), STACK[0x330] ^ STACK[0x420] ^ 0x5A ^ (v49 >> 16), STACK[0x398] ^ STACK[0x420] ^ v2 ^ HIWORD(v49), STACK[0x350] ^ STACK[0x420] ^ 0xFFFFFF95 ^ (v49 >> ((v1 + 0x80) ^ 0x86u)));
}

uint64_t sub_1007084E0()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 8 * (v0 - 14063))
                                                                                                 - 12))(STACK[0x420] ^ LODWORD(STACK[0x30C]) ^ 0x33, LODWORD(STACK[0x2E4]) ^ STACK[0x420] ^ 0x26, LODWORD(STACK[0x2E8]) ^ STACK[0x420] ^ 0xFFFFFFFA, STACK[0x420] ^ LODWORD(STACK[0x300]) ^ 0x11, STACK[0x420] ^ LODWORD(STACK[0x2E0]) ^ 0x57, LODWORD(STACK[0x308]) ^ STACK[0x420] ^ 0x3A, STACK[0x420] ^ LODWORD(STACK[0x31C]) ^ 0x5A, STACK[0x420] ^ LODWORD(STACK[0x2FC]) ^ 0x54 ^ v0 ^ 0x880);
}

uint64_t sub_100708600(unsigned __int8 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  unint64_t v8;
  unsigned __int8 v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  STACK[0x4E0] = v8;
  v13 = LODWORD(STACK[0x500]) ^ 0x325A759C;
  v14 = ((a3 ^ 0x38) + (a3 ^ 0xFFFFFFD4) + *(unsigned __int8 *)(STACK[0x438] + (a3 ^ 0x83))) ^ HIWORD(v13);
  v15 = ((a8 ^ 0xEC) + a8 + *(_BYTE *)(STACK[0x438] + (a8 ^ 0x57))) ^ HIBYTE(v13);
  v16 = (char *)*(&off_1015B46D0 + (int)(STACK[0x4E0] - 21609)) - 4;
  v17 = v16[(((a1 ^ 0x68) + (a1 ^ 0x84) + *(_BYTE *)(STACK[0x438] + (a1 ^ 0xD3))) ^ ((unsigned __int16)(LOWORD(STACK[0x4E8]) ^ 0x5AE4) >> 8)) ^ 0x85];
  v18 = v16[v14 ^ 0x85];
  v19 = v16[v15 ^ 0x85];
  v20 = (uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * (int)(STACK[0x4E0] ^ (54 * (v11 == v10)))) - 4);
  STACK[0x508] = v16[LOBYTE(STACK[0x508]) ^ 0x97 ^ ((v9 ^ 0xAE)
                                                                                    + (v9 ^ 0x42)
                                                                                    + *(_BYTE *)(STACK[0x438]
                                                                                               + (v9 ^ 0xF9))) ^ 0x85] ^ 0xB5;
  STACK[0x4F0] = v19 ^ 0xB5;
  STACK[0x4E0] = v17 ^ 0xB5;
  STACK[0x438] = v18 ^ 0xB5;
  return v20();
}

uint64_t sub_100708A58()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8 * (((((v0 - 11339) | 0x4400) - 17425) * ((STACK[0x440] & 1) == 0)) ^ v0))
                            - 12))();
}

#error "100709380: call analysis failed (funcsize=388)"

uint64_t sub_100709384(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, __int16 a19, char a20,__int16 a21,char a22,__int16 a23,char a24,__int16 a25,char a26,__int16 a27,char a28,__int16 a29,char a30,__int16 a31,char a32,__int16 a33,char a34,__int16 a35,char a36,__int16 a37,char a38,__int16 a39,char a40,__int16 a41,char a42,__int16 a43,char a44,__int16 a45,char a46,__int16 a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int a60,unsigned int a61)
{
  int v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  int v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  _BYTE *v81;
  unsigned int v82;
  int v83;
  _BOOL4 v84;

  v73 = v61 - 4411;
  v74 = v65 ^ a24;
  v75 = a8 ^ a26;
  v76 = v64 ^ a42;
  v77 = STACK[0x438] ^ a48;
  v78 = v63 ^ a38;
  v79 = STACK[0x508] ^ a36;
  v80 = STACK[0x4F0] ^ a44;
  v81 = (_BYTE *)STACK[0x320];
  v81[1] = v67 ^ a30;
  v81[7] = v70 ^ a40;
  v81[4] = v68 ^ a20;
  v81[5] = v75;
  *v81 = v69 ^ a22;
  v81[8] = v77;
  v81[3] = v66 ^ a28;
  v81[2] = a1 ^ a46;
  v81[6] = v71 ^ a34;
  v81[13] = v76;
  v81[15] = v79;
  v81[10] = v78;
  v81[14] = v62 ^ a18;
  v81[9] = v74;
  v81[11] = v80;
  v81[12] = a6 ^ a32;
  v82 = LODWORD(STACK[0x254]) - 450359113;
  v83 = (a13 < 0x632DDEC7) ^ (v82 < 0x632DDEC7);
  v84 = v82 < a13;
  if (v83)
    v84 = a13 < 0x632DDEC7;
  return (*(uint64_t (**)(_QWORD))(v72 + 8 * ((((((v73 + 9417) | 0x1102) - 3291) ^ 0x72DD) * v84) ^ v73)))(a61);
}

uint64_t sub_1007094EC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t a69;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned __int8 *v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v91;
  unsigned int v92;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;

  LODWORD(STACK[0x254]) = v72 + 16;
  STACK[0x258] += 16;
  HIDWORD(v96) = v70;
  LODWORD(a38) = v69;
  v82 = v77[20];
  v95 = __PAIR64__(a1, v73);
  LODWORD(a51) = v77[16];
  v83 = v77[21];
  v84 = v77[23];
  v97 = v77[17];
  v85 = v77[22];
  v86 = v77[30];
  LODWORD(v96) = v74;
  v87 = v77[29];
  LODWORD(a50) = v77[18];
  v88 = v77[28];
  v89 = v77[31];
  LODWORD(a49) = v77[19];
  LODWORD(a48) = v77[24];
  HIDWORD(a47) = v77[25];
  LODWORD(a46) = v77[26];
  LODWORD(a45) = v77[27];
  v90 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 + 8 * v71) - 8);
  STACK[0x320] = STACK[0x4D8];
  LODWORD(a24) = v78;
  STACK[0x398] = LODWORD(STACK[0x31C]);
  STACK[0x388] = LODWORD(STACK[0x2F4]);
  STACK[0x3A0] = LODWORD(STACK[0x2EC]);
  STACK[0x380] = LODWORD(STACK[0x2E4]);
  STACK[0x390] = LODWORD(STACK[0x2E0]);
  STACK[0x360] = LODWORD(STACK[0x2F0]);
  STACK[0x358] = LODWORD(STACK[0x300]);
  STACK[0x350] = LODWORD(STACK[0x2FC]);
  STACK[0x368] = LODWORD(STACK[0x310]);
  v94 = __PAIR64__(v75, v79);
  v91 = STACK[0x48C];
  STACK[0x370] = LODWORD(STACK[0x2E8]);
  STACK[0x328] = LODWORD(STACK[0x318]);
  v92 = STACK[0x4A0];
  STACK[0x378] = LODWORD(STACK[0x314]);
  STACK[0x338] = LODWORD(STACK[0x304]);
  HIDWORD(a16) = a38;
  STACK[0x330] = LODWORD(STACK[0x308]);
  STACK[0x348] = LODWORD(STACK[0x2F8]);
  STACK[0x340] = LODWORD(STACK[0x30C]);
  return v90(a68, LODWORD(STACK[0x45C]), LODWORD(STACK[0x454]), LODWORD(STACK[0x49C]), LODWORD(STACK[0x458]), LODWORD(STACK[0x4AC]), a69, LODWORD(STACK[0x4A8]), a9, a10, a11, a12, a13, a14, a15, a16, __PAIR64__(v92, HIDWORD(v96)), __PAIR64__(v74, v95), __PAIR64__(HIDWORD(a39), v91),
           __PAIR64__(v80, HIDWORD(v95)),
           v94,
           __PAIR64__(v76, a5),
           __PAIR64__(a8, a6),
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           v95,
           v96,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           v88,
           v86,
           v84,
           v83,
           v89,
           v82,
           v85,
           v87,
           v97);
}

uint64_t sub_100709CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  STACK[0x268] = a65 ^ 0x4F28BA70AFD447FCLL;
  STACK[0x3B0] = a66 ^ 0x33AA121932436F65;
  STACK[0x3A8] = a64 ^ (v73 - 1830795088 - 0x5C6D9E8A81BC4569);
  v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 + 8 * (int)(v73 ^ 0x6D201C8F ^ (12078 * (v73 > 0x6301CACE)))) - 8);
  HIDWORD(a39) = v66;
  LODWORD(STACK[0x48C]) = v71;
  LODWORD(STACK[0x490]) = v74;
  LODWORD(STACK[0x4A0]) = v72;
  LODWORD(STACK[0x49C]) = a4;
  LODWORD(STACK[0x498]) = v69;
  LODWORD(STACK[0x494]) = v75;
  LODWORD(STACK[0x4B4]) = v67;
  LODWORD(STACK[0x454]) = a3;
  LODWORD(STACK[0x45C]) = a2;
  LODWORD(STACK[0x4B0]) = v70;
  LODWORD(STACK[0x458]) = a5;
  LODWORD(STACK[0x4AC]) = a6;
  LODWORD(STACK[0x4A8]) = a8;
  LODWORD(STACK[0x488]) = v68;
  return v77(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53);
}

uint64_t sub_100709DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,unsigned __int8 *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  LODWORD(a30) = 0;
  STACK[0x460] = a41[5];
  v62 = STACK[0x448];
  v63 = STACK[0x448] + 1651;
  STACK[0x4E0] = a41[2];
  STACK[0x4C8] = a41[1];
  STACK[0x4D8] = a41[4];
  STACK[0x428] = a41[7];
  STACK[0x4C0] = a41[10];
  STACK[0x4D0] = a41[6];
  STACK[0x478] = a41[14];
  STACK[0x4E8] = *a41;
  STACK[0x470] = a41[13];
  STACK[0x4F0] = a41[11];
  STACK[0x500] = a41[9];
  STACK[0x468] = a41[12];
  STACK[0x508] = a41[15];
  v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 + 8 * (int)v62) - (v63 ^ 0x2569));
  LODWORD(STACK[0x4F8]) = 1;
  return v64(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41 - 16,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61);
}

uint64_t sub_100709E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  uint64_t v12;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v12 + 8 * v11) - 4))(a11);
}

uint64_t sub_100709E9C@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

void sub_100709EDC(uint64_t a1)
{
  __asm { BR              X14 }
}

uint64_t sub_100709F90()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v0 + v2) ^ 0x3311)) - 12))();
}

uint64_t sub_100709FD0()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v0 + v2) ^ 0x3311)) - 12))();
}

uint64_t sub_10070A010@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  v10 = *(_QWORD *)(v6 + 24);
  v12 = *(_QWORD *)(v3 + 8 * v4) - 4;
  v13 = v5;
  v14 = v10;
  v15 = v9;
  v16 = v8;
  *(_QWORD *)(v7 - 32) = &v12;
  *(_DWORD *)(v7 - 40) = v1 - 1705718857 * ((v7 + 2067559831 - 2 * ((v7 - 40) & 0x7B3C75BF)) ^ 0x46AEAAE6) + 2110592435;
  result = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * (v1 ^ a1)) - 12))(v7 - 40);
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(v7 - 36) - 888257747;
  return result;
}

void sub_10070A0D4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  int v8;

  v0 = __chkstk_darwin();
  v1 = *(_DWORD *)v0 + 1132842119 * ((v0 - 503738234 - 2 * (v0 & 0xE1F99086)) ^ 0x186C23C9);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = (uint64_t)*(&off_1015B46D0 + v1 - 3851);
  v4 = v1 ^ 0x5921u;
  v5 = 1872284299
     * ((((2 * (_QWORD)v6) | 0x792763A772C8F8F6) - (_QWORD)v6 + 0x436C4E2C469B8385) ^ 0x253A8A549A15D396);
  v6[0] = *(_QWORD *)(v3 + 8 * v1) - v5 + v4 - 18783;
  v8 = v1 + 1037162758 + v5 - 18;
  v6[1] = v2;
  ((void (*)(_QWORD *))((char *)*(&off_1015B46D0 + v1 - 3125) - 12))(v6);
  __asm { BR              X10 }
}

uint64_t sub_10070A2B0@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  *(_DWORD *)(v3 + 32) = (((v2 - 564) | 0x72) ^ 0xE3F19B4F) + a2;
  *(_QWORD *)(v3 + 24) = *a1;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * v2))();
}

uint64_t sub_10070A2E4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (*(unsigned int *)(v3 + 4) ^ 0x4A867E74F6C5BBDELL)
     + 0x8ACC40E2AB3F45DLL
     + ((2 * *(unsigned int *)(v3 + 4)) & 0x1ED8B77BCLL);
  v5 = (v4 ^ 0x9ED66FE5) & (2 * (v4 & 0xDE864FC8)) ^ v4 & 0xDE864FC8;
  v6 = ((2 * (v4 ^ (1993 * (a3 ^ 0x49D2) - 1361407184))) ^ 0xE0B96F5A) & (v4 ^ (1993 * (a3 ^ 0x49D2) - 1361407184)) ^ (2 * (v4 ^ (1993 * (a3 ^ 0x49D2) - 1361407184))) & 0x705CB7AC;
  v7 = v6 ^ 0x104490A5;
  v8 = (v6 ^ 0x60182700) & (4 * v5) ^ v5;
  v9 = ((4 * v7) ^ 0xC172DEB4) & v7 ^ (4 * v7) & 0x705CB7AC;
  v10 = (v9 ^ 0x405096A0) & (16 * v8) ^ v8;
  v11 = ((16 * (v9 ^ 0x300C2109)) ^ 0x5CB7AD0) & (v9 ^ 0x300C2109) ^ (16 * (v9 ^ 0x300C2109)) & 0x705CB780;
  v12 = (v4 ^ (2
             * ((((v11 ^ 0x7014852D) << 8) & 0x705C0000 ^ 0x501412AC ^ (((v11 ^ 0x7014852D) << 8) ^ 0x5CB70000) & (v11 ^ 0x7014852D)) & (((v11 ^ 0x483200) & (v10 << 8) ^ v10) << 16) ^ (v11 ^ 0x483200) & (v10 << 8) ^ v10))) & 0x1FFFFFFFCLL ^ 0x9109751CLL;
  v13 = (v12 - ((2 * v12) & 0x18EF09840) + 0x5BD099BAC7784C21) ^ 0x5B84DB9A877876B1;
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * ((62
                                * (*(_DWORD *)((v3 ^ 0xFCFDF5EAAF4BEFAFLL)
                                             + ((v3 << (a3 + 34)) & 0xF9FBEBD55E97DF5ELL)
                                             - 0x7BC44439CF2A3288
                                             + ((((((2 * v13) | 0x52180AA51DB883C4) - v13 - 0x290C05528EDC41E2) ^ 0x1E232815B3A798D4)
                                               + 0x49BD21282D2A9BABLL) ^ (((((2 * v13) | 0x52180AA51DB883C4)
                                                                          - v13
                                                                          - 0x290C05528EDC41E2) ^ 0xDC9928339042B6F8)
                                                                        - 0x74F8DEF1F1304A79) ^ (((((2 * v13) | 0x52180AA51DB883C4) - v13 - 0x290C05528EDC41E2) ^ 0xEBE24754A2B66F8ALL)
                                                                                                 - 0x4383B196C3C4930BLL))) == 0)) ^ a3)))();
}

uint64_t sub_10070A5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((*(_DWORD *)(v5 + 4) < ((a5 + 1342445897) & 0xAFFB93B9) - 4632)
                                          * ((a5 - 1433636408) & 0x557379DF ^ 0x50AF)) ^ a5))
                            - 4))();
}

uint64_t sub_10070A640@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  uint64_t v2;

  *(_DWORD *)(v2 + 32) = -309;
  *(_QWORD *)(v2 + 24) = *a1;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * a2))();
}

uint64_t sub_10070A65C@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  uint64_t v2;

  *(_DWORD *)(v2 + 32) = -309;
  *(_QWORD *)(v2 + 24) = *a1;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * a2))();
}

uint64_t sub_10070A6C8(unint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  void (*v13)(uint64_t, unint64_t *, uint64_t);
  unsigned int *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);

  LODWORD(STACK[0x56AC]) = a5;
  LODWORD(STACK[0x59BC]) = a3;
  STACK[0x3468] = a1;
  v10 = (((*(_DWORD *)(v7 + 36) ^ 0xE475D5DC) & 0x87E47B8D)
       + 385520014
       - ((2 * (*(_DWORD *)(v7 + 36) ^ 0xE475D5DC)) & 0xDC02708)
       + 1576) ^ 0x929EC63A ^ (((v6 - 20631) | 0x1030) ^ 0x87E46B04) & (*(_DWORD *)(v7 + 36) ^ 0xE475D5DC);
  v11 = (((2 * v10) | 0x68E55634) - v10 - 879930138) & 0xFEFFFEFF ^ 0xE0823E97;
  v12 = ((v11 | 0x57C57E7E) - (v11 | 0xA83A8181) - 1472560767) ^ 0x7D87745C;
  *(_DWORD *)(v7 + 36) = ((v12 | 0xBF4B0DD) - (v12 | 0xF40B4F22) - 200585438) ^ 0x70227F22;
  STACK[0x3BF8] = v7;
  *(_DWORD *)(v7 + 52) = 0;
  STACK[0x3470] = v8;
  v13 = (void (*)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)(v9 + 8 * (v6 - 19364)) - 8);
  LODWORD(STACK[0x59F8]) = v6;
  v13(v5 + 20, &STACK[0x7014], 32);
  STACK[0xC768] = 160;
  STACK[0xB0E8] = 0;
  STACK[0x3E68] = (unint64_t)v13;
  v13((uint64_t)&STACK[0x7014], &STACK[0x10060], 32);
  ((void (*)(unint64_t *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t *, _QWORD))*(&off_1015B46D0 + LODWORD(STACK[0x59F8]) - 19152))(&STACK[0x10060], 0, 0, 0, 0, 0, &STACK[0xA97C], 0);
  STACK[0x10040] = (SLODWORD(STACK[0xA97C]) ^ 0x7717FF5BFDCFFB9ELL)
                 - 0x7717FF5BFDCFFB9ELL
                 + ((2 * SLODWORD(STACK[0xA97C])) & 0xEE2FFEB7FB9FF73CLL);
  STACK[0x10048] = 0x800000000011FFFBLL;
  STACK[0x10058] = 0;
  v14 = (unsigned int *)*(&off_1015B46D0 + (LODWORD(STACK[0x59F8]) ^ 0x54DCu));
  STACK[0x10050] = 0;
  v15 = ((uint64_t (*)(_QWORD, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))*(&off_1015B46D0
                                                                                              + (LODWORD(STACK[0x59F8]) ^ 0x5676u)))(*v14, &STACK[0x10040], 1, 0, 0, 0);
  v16 = (uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                    + 8
                                                    * ((12819
                                                      * (((v15 ^ 0xDFF7BBF5)
                                                        - 1610071788
                                                        + ((2 * (_DWORD)v15) & 0xBFEF77EA)
                                                        + 759) >> 31)) ^ LODWORD(STACK[0x59F8])))
                                        - 4);
  STACK[0x41D8] = (unint64_t)*(&off_1015B46D0 + (LODWORD(STACK[0x59F8]) ^ 0x54A7u));
  return v16(v15);
}

uint64_t sub_10070A9EC()
{
  uint64_t v0;
  int v1;
  _BOOL4 v2;

  v2 = (((((v1 - 5) ^ 0x40AE) - 1679) ^ 0x49E7) & *(unsigned __int16 *)(v0 + 103)) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v2 | (4 * v2)) ^ (v1 - 5))) - 4))();
}

uint64_t sub_10070AA28()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v1 = ((uint64_t (*)(void))STACK[0x41D8])();
  v2 = (uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v0 + 15616)) - 12);
  STACK[0x6508] = v0;
  return v2(v1);
}

#error "10070AA5C: too big function (funcsize=0)"

uint64_t sub_10071B800()
{
  int v0;

  *(_DWORD *)*(&off_1015B46D0 + (v0 ^ 0xEEC)) = 188046730;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x1AD7)) - 8))();
}

uint64_t sub_10071B858()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  BOOL v3;

  v2 = *(uint64_t (**)(uint64_t))(v1 + 8 * ((int)v0 - 13786));
  STACK[0x5510] = (unint64_t)v2;
  v3 = v2(16) == 0;
  STACK[0x5B60] = v0;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (int)((28158 * ((v3 ^ (v0 - 97)) & 1)) ^ v0)))();
}

uint64_t sub_10071B8F8(uint64_t *a1)
{
  int v1;
  uint64_t v3;

  *a1 = 0;
  a1[1] = 0;
  v3 = ((uint64_t (*)(uint64_t))STACK[0x5510])(4096);
  *a1 = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((124 * (v3 != 0)) ^ v1 & 0x6EC86F77u)) - 8))();
}

uint64_t sub_10071B950()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)(v0 + 8) = 4096;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (v1 + 9882)))();
}

uint64_t sub_10071B97C()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return (*(uint64_t (**)(uint64_t))(STACK[0x6AD8] + 8 * (((v0 - 100) | 0x64) + 9882)))(v1);
}

uint64_t sub_10071B9B8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t (*v3)(void);
  unint64_t v4;
  int v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = *(_BYTE **)((char *)*(&off_1015B46D0 + v5 - 2344) - 4);
  LOBYTE(STACK[0x1D094]) = *v6 - 76;
  LOBYTE(STACK[0x1D095]) = v6[1] - 76;
  LOBYTE(STACK[0x1D096]) = v6[2] - 76;
  LOBYTE(STACK[0x1D097]) = v6[3] - 76;
  LOBYTE(STACK[0x1D098]) = v6[4] - 76;
  LOBYTE(STACK[0x1D099]) = v6[5] - 76;
  LOBYTE(STACK[0x1D09A]) = v6[6] - 76;
  LOBYTE(STACK[0x1D09B]) = v6[7] - 76;
  LOBYTE(STACK[0x1D09C]) = v6[8] - 76;
  LOBYTE(STACK[0x1D09D]) = v6[9] - 76;
  LOBYTE(STACK[0x1D09E]) = v6[10] - 76;
  LOBYTE(STACK[0x1D09F]) = v6[11] - 76;
  LOBYTE(STACK[0x1D0A0]) = v6[12] - 76;
  LOBYTE(STACK[0x1D0A1]) = v6[13] - 76;
  LOBYTE(STACK[0x1D0A2]) = v6[14] - 76;
  LOBYTE(STACK[0x1D0A3]) = v6[15] - 76;
  LOBYTE(STACK[0x1D0A4]) = v6[16] - 76;
  LOBYTE(STACK[0x1D0A5]) = v6[17] - 76;
  LOBYTE(STACK[0x1D0A6]) = v6[18] - 76;
  LOBYTE(v6) = v6[19] - 76;
  STACK[0x4538] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x14C4));
  STACK[0x4350] = (unint64_t)*(&off_1015B46D0 + v5 - 2860);
  STACK[0x42A0] = (unint64_t)*(&off_1015B46D0 + v5 - 4125);
  STACK[0x4268] = (unint64_t)*(&off_1015B46D0 + v5 - 3196);
  STACK[0x4528] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16C6));
  STACK[0x4478] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16A3));
  STACK[0x44E0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1942));
  STACK[0x5A40] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1207));
  STACK[0x49E0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x10BE));
  STACK[0x4850] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1086));
  STACK[0x4670] = (unint64_t)*(&off_1015B46D0 + v5 - 2535);
  STACK[0x44D0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x11AF));
  STACK[0x44D8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x188E));
  STACK[0x5A48] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x116C));
  STACK[0x44E8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1405));
  STACK[0x4808] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1502)) - 4;
  STACK[0x42C8] = (unint64_t)*(&off_1015B46D0 + v5 - 1877) - 8;
  STACK[0x59F0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1650)) - 12;
  STACK[0x42C0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x19BB));
  STACK[0x44B0] = (unint64_t)*(&off_1015B46D0 + v5 - 4093);
  STACK[0x5530] = (unint64_t)*(&off_1015B46D0 + v5 - 3437);
  STACK[0x4918] = (unint64_t)*(&off_1015B46D0 + v5 - 3878) - 8;
  STACK[0x43D8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x19C8));
  STACK[0x5A38] = (unint64_t)*(&off_1015B46D0 + v5 - 2719) - 4;
  STACK[0x4940] = (unint64_t)*(&off_1015B46D0 + v5 - 2108) - 4;
  STACK[0x4D68] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1316));
  v7 = (uint64_t)*(&off_1015B46D0 + v5 - 1721);
  STACK[0x5080] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x14A1));
  STACK[0x4498] = (unint64_t)*(&off_1015B46D0 + v5 - 2267);
  LOBYTE(STACK[0x1D0A7]) = (_BYTE)v6;
  STACK[0x4838] = (unint64_t)*(&off_1015B46D0 + v5 - 3334);
  STACK[0x45E8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x13AE));
  STACK[0x4C60] = v7 - 4;
  STACK[0x4E48] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x131F)) - 8;
  STACK[0x4560] = (unint64_t)*(&off_1015B46D0 + v5 - 3538) - 4;
  STACK[0x5680] = (unint64_t)*(&off_1015B46D0 + v5 - 3734) - 8;
  STACK[0x4578] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x136F)) - 12;
  STACK[0x5668] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1198));
  STACK[0x46D8] = (unint64_t)*(&off_1015B46D0 + v5 - 2838) - 8;
  v8 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x155D));
  STACK[0x5098] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x104A)) - 4;
  STACK[0x4AC0] = v8 - 8;
  STACK[0x4878] = (unint64_t)*(&off_1015B46D0 + v5 - 2804);
  STACK[0x4BC0] = (unint64_t)*(&off_1015B46D0 + v5 - 2894) - 12;
  STACK[0x5538] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x12CE)) - 12;
  STACK[0x5628] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1335)) - 4;
  STACK[0x4D38] = (unint64_t)*(&off_1015B46D0 + v5 - 3803);
  STACK[0x5610] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x100C)) - 8;
  v9 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x18EF));
  STACK[0x60C0] = (unint64_t)*(&off_1015B46D0 + v5 - 2441) - 4;
  STACK[0x5658] = v9 - 4;
  STACK[0x47C8] = (unint64_t)*(&off_1015B46D0 + v5 - 1671);
  v10 = (uint64_t)*(&off_1015B46D0 + v5 - 1810);
  STACK[0x56A0] = v10 - 4;
  STACK[0x4390] = v10 - 11;
  STACK[0x4318] = v10 - 19;
  STACK[0x44C0] = v10 - 3;
  v11 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x17C0));
  STACK[0x49D0] = (unint64_t)*(&off_1015B46D0 + v5 - 3342) - 4;
  STACK[0x4BE0] = v11 - 4;
  STACK[0x4D58] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1AD7)) - 8;
  v12 = (uint64_t)*(&off_1015B46D0 + v5 - 2134);
  STACK[0x4450] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1048)) - 4;
  STACK[0x48A8] = v12 - 4;
  STACK[0x48C0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x17D7)) - 8;
  v13 = (uint64_t)*(&off_1015B46D0 + v5 - 2596);
  STACK[0x45A0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x192C));
  STACK[0x5558] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x150C));
  v14 = (uint64_t)*(&off_1015B46D0 + v5 - 2308);
  STACK[0x4938] = v13 - 12;
  STACK[0x4BF0] = v14 - 4;
  STACK[0x5068] = (unint64_t)*(&off_1015B46D0 + v5 - 3891) - 8;
  v15 = (uint64_t)*(&off_1015B46D0 + v5 - 2492);
  STACK[0x4598] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x17BF)) - 12;
  STACK[0x4468] = v15 - 12;
  STACK[0x4378] = v15 + 3;
  STACK[0x49F0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x11DA));
  v16 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1244));
  STACK[0x4490] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x11D1)) - 12;
  STACK[0x43C8] = v16 - 8;
  STACK[0x47E8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x165F)) - 4;
  v17 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1215));
  STACK[0x4968] = (unint64_t)*(&off_1015B46D0 + v5 - 3330) - 12;
  STACK[0x46C0] = v17 - 4;
  STACK[0x4BB8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16A5)) - 8;
  STACK[0x4718] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1AD3));
  STACK[0x4688] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x157A)) - 8;
  STACK[0x5678] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x11B1)) - 12;
  STACK[0x4C48] = (unint64_t)*(&off_1015B46D0 + v5 - 2676);
  STACK[0x5650] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x19AD)) - 8;
  v18 = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x166C));
  v19 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1272));
  STACK[0x49C8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x155B));
  v20 = (uint64_t)*(&off_1015B46D0 + v5 - 3323);
  STACK[0x59D0] = v19 - 8;
  STACK[0x4E90] = v20 - 4;
  STACK[0x4C08] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1149)) - 4;
  STACK[0x56C8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x157D));
  STACK[0x46B0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x160D)) - 8;
  STACK[0x5560] = (unint64_t)*(&off_1015B46D0 + v5 - 2039) - 12;
  STACK[0x4590] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1338));
  STACK[0x46D0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x15FA)) - 8;
  STACK[0x4798] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x13F9));
  v21 = (uint64_t)*(&off_1015B46D0 + v5 - 2123);
  STACK[0x46E0] = (unint64_t)*(&off_1015B46D0 + v5 - 1815);
  v22 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x11A1));
  STACK[0x47A8] = v21 - 12;
  STACK[0x5060] = v22 - 8;
  STACK[0x49C0] = (unint64_t)*(&off_1015B46D0 + v5 - 3394);
  STACK[0x60B8] = (unint64_t)*(&off_1015B46D0 + v5 - 4074);
  STACK[0x50D0] = (unint64_t)*(&off_1015B46D0 + v5 - 3327) - 12;
  v23 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1016));
  STACK[0x4AB8] = (unint64_t)*(&off_1015B46D0 + v5 - 1601) - 12;
  STACK[0x4D80] = v23 - 4;
  STACK[0x46E8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1A2B));
  STACK[0x46C8] = (unint64_t)*(&off_1015B46D0 + v5 - 2624) - 8;
  v24 = (uint64_t)*(&off_1015B46D0 + v5 - 1886);
  STACK[0x4340] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16DF));
  v25 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1885));
  STACK[0x4570] = v24 - 4;
  STACK[0x4AE0] = v25 - 12;
  STACK[0x4820] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16C2));
  STACK[0x4840] = (unint64_t)*(&off_1015B46D0 + v5 - 3565);
  STACK[0x4910] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x190F)) - 12;
  STACK[0x4448] = (unint64_t)*(&off_1015B46D0 + v5 - 3754);
  STACK[0x4C58] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1273)) - 8;
  STACK[0x5120] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x15C4)) - 12;
  STACK[0x4548] = (unint64_t)*(&off_1015B46D0 + v5 - 3863) - 4;
  v26 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1705));
  STACK[0x43B0] = (unint64_t)*(&off_1015B46D0 + v5 - 2402);
  STACK[0x58C8] = (unint64_t)*(&off_1015B46D0 + v5 - 3995);
  STACK[0x4608] = v26 - 8;
  v27 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x11B4));
  STACK[0x90C8] = v0;
  STACK[0x59C8] = v27 - 4;
  v28 = (uint64_t)*(&off_1015B46D0 + v5 - 2841);
  STACK[0x4470] = v28 - 8;
  STACK[0x4370] = v28 + 7;
  STACK[0x50C8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1714));
  STACK[0x49B0] = (unint64_t)*(&off_1015B46D0 + v5 - 1998) - 4;
  v29 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1310));
  STACK[0x4400] = (unint64_t)*(&off_1015B46D0 + v5 - 4185) - 8;
  STACK[0x4898] = v29 - 4;
  STACK[0x58B0] = (unint64_t)*(&off_1015B46D0 + v5 - 1774) - 4;
  v30 = (uint64_t)*(&off_1015B46D0 + v5 - 3120);
  STACK[0x45B8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x14A9));
  STACK[0x44A8] = v30 - 8;
  STACK[0x47F0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x10BB)) - 4;
  STACK[0x4568] = (unint64_t)*(&off_1015B46D0 + v5 - 3853);
  STACK[0x4930] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1314)) - 4;
  v31 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x10A3));
  STACK[0x5090] = (unint64_t)*(&off_1015B46D0 + v5 - 2115) - 8;
  STACK[0x5640] = v31 - 12;
  STACK[0x4CF8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x15F2)) - 8;
  v32 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1866));
  STACK[0x4F88] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16A0));
  STACK[0x47B0] = v32 - 4;
  STACK[0x4890] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1AB0)) - 8;
  STACK[0x4D18] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x189E));
  STACK[0x5660] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1049)) - 12;
  v33 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1A03));
  STACK[0x4E40] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1545)) - 8;
  STACK[0x4D78] = v33 - 4;
  STACK[0x45C8] = (unint64_t)*(&off_1015B46D0 + v5 - 3286);
  v34 = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1315));
  STACK[0x4868] = (unint64_t)*(&off_1015B46D0 + v5 - 2870) - 12;
  v35 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1717));
  STACK[0x4A70] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1812)) - 8;
  STACK[0x4CD8] = v35 - 4;
  STACK[0x4AF8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16D5)) - 8;
  v36 = (uint64_t)*(&off_1015B46D0 + v5 - 3190);
  STACK[0x4E98] = (unint64_t)*(&off_1015B46D0 + v5 - 1739) - 4;
  STACK[0x4C00] = v36 - 4;
  STACK[0x5600] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1909)) - 12;
  v37 = (uint64_t)*(&off_1015B46D0 + v5 - 1584);
  STACK[0x5078] = (unint64_t)*(&off_1015B46D0 + v5 - 2602) - 8;
  STACK[0x48A0] = v37 - 12;
  STACK[0x59C0] = (unint64_t)*(&off_1015B46D0 + v5 - 2611) - 12;
  v38 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x15C9));
  STACK[0x4E88] = (unint64_t)*(&off_1015B46D0 + v5 - 1728) - 12;
  STACK[0x45C0] = v38 - 4;
  STACK[0x4438] = (unint64_t)*(&off_1015B46D0 + v5 - 1766) - 8;
  v39 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1112));
  STACK[0x59E8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x125C));
  STACK[0x4700] = v39 - 4;
  STACK[0x5088] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1A12)) - 12;
  STACK[0x5670] = (unint64_t)*(&off_1015B46D0 + v5 - 2831) - 8;
  STACK[0x4A10] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x14ED)) - 8;
  STACK[0x5638] = (unint64_t)*(&off_1015B46D0 + v5 - 4141) - 4;
  STACK[0x5518] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x18E5));
  STACK[0x4A28] = (unint64_t)*(&off_1015B46D0 + v5 - 3390) - 8;
  v40 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1692));
  STACK[0x4948] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x128B)) - 12;
  STACK[0x4AB0] = v40 - 12;
  STACK[0x4C50] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x17C7)) - 8;
  v41 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1579));
  STACK[0x4D50] = (unint64_t)*(&off_1015B46D0 + v5 - 1570) - 4;
  STACK[0x4710] = v41 - 12;
  STACK[0x43A8] = (unint64_t)*(&off_1015B46D0 + v5 - 1458) - 4;
  v42 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1024));
  STACK[0x4520] = (unint64_t)*(&off_1015B46D0 + v5 - 3639) - 4;
  STACK[0x4300] = v42 - 4;
  STACK[0x4BD8] = (unint64_t)*(&off_1015B46D0 + v5 - 1954) - 8;
  STACK[0x48D0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x13DC));
  STACK[0x43C0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x14D1)) - 4;
  STACK[0x42E8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16A9)) - 4;
  STACK[0x4BF8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1A00));
  STACK[0x4888] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x17B8));
  STACK[0x4338] = (unint64_t)*(&off_1015B46D0 + v5 - 2909);
  STACK[0x4A08] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16A6)) - 4;
  v43 = (unint64_t)*(&off_1015B46D0 + v5 - 2990);
  STACK[0x50C0] = (unint64_t)*(&off_1015B46D0 + v5 - 2316);
  STACK[0x5770] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1021));
  STACK[0x4A40] = (unint64_t)*(&off_1015B46D0 + v5 - 2740) - 4;
  STACK[0x4AF0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x11CB)) - 8;
  STACK[0x42F8] = (unint64_t)*(&off_1015B46D0 + v5 - 2772);
  STACK[0x4F80] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1954)) - 8;
  STACK[0x49A8] = (unint64_t)*(&off_1015B46D0 + v5 - 2237);
  STACK[0x4430] = (unint64_t)*(&off_1015B46D0 + v5 - 3483) - 8;
  STACK[0x4440] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1326)) - 12;
  STACK[0x4E38] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1643)) - 12;
  STACK[0x4518] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x14AE));
  v44 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x17FC));
  STACK[0x4C38] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x13A9)) - 12;
  STACK[0x4588] = v44 - 8;
  STACK[0x4488] = (unint64_t)*(&off_1015B46D0 + v5 - 3600) - 12;
  v45 = (unint64_t)*(&off_1015B46D0 + v5 - 3491);
  STACK[0x4C68] = (unint64_t)*(&off_1015B46D0 + v5 - 4031) - 8;
  STACK[0x4860] = (unint64_t)*(&off_1015B46D0 + v5 - 3961) - 8;
  STACK[0x47D0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x110B));
  STACK[0x4AA8] = (unint64_t)*(&off_1015B46D0 + v5 - 3985) - 12;
  STACK[0x4600] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x102B));
  v46 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x12F6));
  STACK[0x4A88] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x113A));
  v47 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x19ED));
  STACK[0x5A20] = v46 - 4;
  STACK[0x4458] = v47 - 8;
  STACK[0x4368] = v47 + 7;
  STACK[0x4680] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x14D0)) - 4;
  STACK[0x4428] = (unint64_t)*(&off_1015B46D0 + v5 - 2697) - 12;
  STACK[0x4C20] = (unint64_t)*(&off_1015B46D0 + v5 - 1984) - 4;
  STACK[0x4D70] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x13D4)) - 8;
  STACK[0x4A90] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x19D4)) - 4;
  STACK[0x59E0] = (unint64_t)*(&off_1015B46D0 + v5 - 1773) - 4;
  STACK[0x43A0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x113D)) - 4;
  STACK[0x4A20] = (unint64_t)*(&off_1015B46D0 + v5 - 2133) - 8;
  STACK[0x4830] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1344));
  STACK[0x4BE8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1073)) - 4;
  STACK[0x4260] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x129F));
  v48 = (uint64_t)*(&off_1015B46D0 + v5 - 1662);
  STACK[0x5A30] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x13FF));
  v49 = (uint64_t)*(&off_1015B46D0 + v5 - 3544);
  STACK[0x45E0] = v48 - 8;
  STACK[0x45B0] = v49 - 12;
  STACK[0x4998] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x157B)) - 8;
  v50 = (uint64_t)*(&off_1015B46D0 + v5 - 2766);
  STACK[0x48E0] = (unint64_t)*(&off_1015B46D0 + v5 - 2913) - 4;
  STACK[0x46F8] = v50 - 4;
  STACK[0x4298] = (unint64_t)*(&off_1015B46D0 + v5 - 1665);
  STACK[0x4BA8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1488)) - 4;
  STACK[0x4708] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16BA));
  v51 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x16EF));
  STACK[0x4BB0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1795)) - 12;
  STACK[0x5620] = v51 - 8;
  STACK[0x5608] = (unint64_t)*(&off_1015B46D0 + v5 - 1566) - 8;
  STACK[0x4D60] = (unint64_t)*(&off_1015B46D0 + v5 - 2430);
  STACK[0x47F8] = (unint64_t)*(&off_1015B46D0 + v5 - 4200) - 12;
  STACK[0x4790] = (unint64_t)*(&off_1015B46D0 + v5 - 1511) - 4;
  STACK[0x5070] = (unint64_t)*(&off_1015B46D0 + v5 - 1996) - 4;
  STACK[0x5A28] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x116B));
  STACK[0x45F0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x133F));
  STACK[0x43B8] = (unint64_t)*(&off_1015B46D0 + v5 - 3249) - 8;
  STACK[0x4858] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x189D)) - 12;
  STACK[0x43E8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1357));
  STACK[0x4A38] = (unint64_t)*(&off_1015B46D0 + v5 - 3019);
  STACK[0x4880] = (unint64_t)*(&off_1015B46D0 + v5 - 3385);
  STACK[0x4C30] = (unint64_t)*(&off_1015B46D0 + v5 - 3658) - 12;
  STACK[0x4290] = (unint64_t)*(&off_1015B46D0 + v5 - 3547);
  v52 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1145));
  STACK[0x43F8] = (unint64_t)*(&off_1015B46D0 + v5 - 3702);
  v53 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x19FA));
  STACK[0x4398] = v52 - 8;
  STACK[0x4558] = v53 - 4;
  STACK[0x4A80] = (unint64_t)*(&off_1015B46D0 + v5 - 2139) - 12;
  v54 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x149B));
  STACK[0x45D8] = (unint64_t)*(&off_1015B46D0 + v5 - 3357);
  STACK[0x5A18] = v54 - 12;
  STACK[0x4A60] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1080)) - 4;
  STACK[0x5118] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1067)) - 12;
  STACK[0x5110] = (unint64_t)*(&off_1015B46D0 + v5 - 3435) - 4;
  STACK[0x42F0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x16E1)) - 4;
  STACK[0x4510] = (unint64_t)*(&off_1015B46D0 + v5 - 2657) - 8;
  STACK[0x43F0] = (unint64_t)*(&off_1015B46D0 + v5 - 1612) - 12;
  STACK[0x45A8] = (unint64_t)*(&off_1015B46D0 + v5 - 3569) - 12;
  STACK[0x58D0] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x167F)) - 12;
  STACK[0x5648] = (unint64_t)*(&off_1015B46D0 + v5 - 1592);
  v55 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x16EA));
  STACK[0x4420] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x178E)) - 12;
  STACK[0x5108] = v55 - 8;
  STACK[0x4A58] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1586)) - 12;
  v56 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1053));
  STACK[0x49B8] = (unint64_t)*(&off_1015B46D0 + v5 - 1681) - 8;
  STACK[0x4BD0] = v56 - 8;
  v57 = (uint64_t)*(&off_1015B46D0 + v5 - 4084);
  STACK[0x5698] = v57 - 12;
  STACK[0x4388] = v57 - 19;
  STACK[0x4310] = v57 - 27;
  STACK[0x5768] = (unint64_t)*(&off_1015B46D0 + v5 - 1817) - 4;
  v58 = (uint64_t)*(&off_1015B46D0 + v5 - 3920);
  STACK[0x4B10] = (unint64_t)*(&off_1015B46D0 + v5 - 2218) - 8;
  STACK[0x4A30] = v58 - 4;
  STACK[0x4A78] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1841));
  STACK[0x42B8] = (unint64_t)*(&off_1015B46D0 + v5 - 1723) - 12;
  STACK[0x4788] = (unint64_t)*(&off_1015B46D0 + v5 - 4052);
  v59 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1597));
  STACK[0x45D0] = (unint64_t)*(&off_1015B46D0 + v5 - 2528) - 12;
  STACK[0x4678] = v59 - 12;
  STACK[0x45F8] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x11F6));
  STACK[0x4330] = (unint64_t)*(&off_1015B46D0 + v5 - 2952);
  STACK[0x4C40] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1919)) - 8;
  v60 = (uint64_t)*(&off_1015B46D0 + v5 - 1709);
  STACK[0x5618] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x13F3));
  STACK[0x4C28] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1406));
  v61 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1A52));
  STACK[0x44A0] = v60 - 8;
  STACK[0x4A50] = v61 - 12;
  v62 = (uint64_t)*(&off_1015B46D0 + v5 - 2620);
  v63 = (uint64_t)*(&off_1015B46D0 + v5 - 3170);
  *(int64x2_t *)&STACK[0x60A0] = vdupq_n_s64(0xF8FFFFFFFFFFFFFFLL);
  *(int64x2_t *)&STACK[0x5540] = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
  STACK[0x59D8] = v62 - 4;
  STACK[0x5690] = v63 - 4;
  STACK[0x4380] = v63 - 11;
  STACK[0x4308] = v63 - 19;
  STACK[0x44B8] = v63 - 1;
  STACK[0x4A18] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1537));
  STACK[0x5A08] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x1300)) - 12;
  v64 = (uint64_t)*(&off_1015B46D0 + (v5 ^ 0x1156));
  STACK[0x5A10] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x14D3)) - 12;
  STACK[0x4508] = v64 - 4;
  STACK[0x4418] = (unint64_t)*(&off_1015B46D0 + v5 - 1630);
  STACK[0x4AE8] = (unint64_t)*(&off_1015B46D0 + v5 - 1914) - 4;
  STACK[0x5630] = (unint64_t)*(&off_1015B46D0 + v5 - 2183) - 12;
  STACK[0x4410] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x15FF)) - 12;
  STACK[0x4550] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x12B1)) - 8;
  STACK[0x4D48] = (unint64_t)*(&off_1015B46D0 + v5 - 3823) - 12;
  STACK[0x4A48] = (unint64_t)*(&off_1015B46D0 + v5 - 2335) - 4;
  STACK[0x5568] = (unint64_t)*(&off_1015B46D0 + (v5 ^ 0x10F0)) - 12;
  v65 = (uint64_t)*(&off_1015B46D0 + v5 - 2835);
  STACK[0x4280] = v65 - 12;
  STACK[0x4500] = v65 - 11;
  STACK[0x4638] = (unint64_t)*(&off_1015B46D0 + v5 - 2955);
  STACK[0x5B48] = (unint64_t)*(&off_1015B46D0 + v5 - 2523);
  STACK[0x5B50] = (unint64_t)*(&off_1015B46D0 + v5 - 4083);
  LODWORD(STACK[0x5B6C]) = v5;
  STACK[0x5B58] = (unint64_t)*(&off_1015B46D0 + v5 - 2504);
  *(int64x2_t *)&STACK[0x4D00] = vdupq_n_s64(v1);
  *(int64x2_t *)&STACK[0x4D90] = vdupq_n_s64(v2);
  *(int64x2_t *)&STACK[0x4D20] = vdupq_n_s64(0x9B30CAD63CF39C9CLL);
  *(int64x2_t *)&STACK[0x6090] = vdupq_n_s64(0x19B6066B36F37E40uLL);
  *(int64x2_t *)&STACK[0x56B0] = vdupq_n_s64(0xFDD1F84C6177C9DuLL);
  *(int64x2_t *)&STACK[0x60D0] = vdupq_n_s64(v4);
  STACK[0x4288] = v18;
  STACK[0x44F8] = v18 + 1;
  STACK[0x48D8] = v34 + 40;
  STACK[0x4C70] = v34;
  STACK[0x4648] = v34 + 8;
  STACK[0x43E0] = v43 + 4;
  STACK[0x49E8] = v43;
  STACK[0x4348] = v43 + 84;
  STACK[0x4360] = v45 + 16;
  STACK[0x4460] = v45;
  STACK[0x4358] = v45 + 1;
  LODWORD(STACK[0x4D8C]) = 2 * STACK[0x6508];
  LODWORD(STACK[0x55C4]) = 13;
  LODWORD(STACK[0x55FC]) = 1;
  return v3();
}

uint64_t sub_10071CED4@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((((STACK[0x6508] + 1625481065) & 0x9F1D5F67) - 20197) * a1) ^ (STACK[0x6508] + 3632)))
                            - ((STACK[0x6508] + 33566602) | 0xE1043159)
                            + 3808719189))();
}

uint64_t sub_10071CF40()
{
  int v0;
  unint64_t v1;
  void (*v2)(unint64_t, char *, uint64_t);
  unint64_t v3;
  char *v4;
  _BOOL4 v5;

  v1 = STACK[0x7070];
  v2 = (void (*)(unint64_t, char *, uint64_t))STACK[0x3E68];
  ((void (*)(unint64_t, unint64_t, uint64_t))STACK[0x3E68])(STACK[0x9D08], STACK[0x7070], 32);
  v3 = STACK[0xC768];
  v4 = (char *)&STACK[0x10000] + STACK[0xC768];
  STACK[0x6AC0] = (unint64_t)v4;
  v2(v1, v4 + 32, 32);
  STACK[0xC768] = v3 + 96;
  STACK[0xCEE8] = 0;
  v5 = ((uint64_t (*)(unint64_t, _QWORD, uint64_t, unint64_t))STACK[0x4538])(STACK[0x3A30], *(&off_1015B46D0 + v0 - 18352), 1536, STACK[0x3A28]) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v5 * ((v0 ^ 0x7A51) - 13538)) ^ v0)) - 4))();
}

uint64_t sub_10071D00C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 2778)) - 4))();
}

uint64_t sub_10071D034@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (int)(((((STACK[0x6508] - 1507240575) & 0x59D69BFC) + 15484) * a1) ^ (STACK[0x6508] + 2925))))();
}

uint64_t sub_10071D074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v2);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * (int)(((v2 + 1755822839) & 0x97585B7D ^ 0x9AD) + v2))
                                                                                                - 4))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_10071D0D4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v8 = v2 + v5 + 64;
  v7(v1, v8, 32);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8 * (v0 - 13126)))(v4, v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v9 != 0) * ((v0 + 4023) ^ v3)) ^ v0)) - 8))();
}

uint64_t sub_10071D134(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  _BOOL4 v4;

  v3 = v1 - 5312;
  v4 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t *))*(&off_1015B46D0 + (v3 ^ 0x2AC1)))(a1, v2, &STACK[0xCEE8]) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((v4 * (v3 - 10556 + ((v3 - 740902367) & 0x2C2935FE))) ^ v3))
                            - 12))();
}

uint64_t sub_10071D1B4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((55 * (STACK[0xCEE8] != 0)) ^ v0))
                            - (((v0 - 8190) | 0x2009u) ^ 0x2225)))();
}

uint64_t sub_10071D210()
{
  int v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  _BOOL4 v4;

  v3 = ((uint64_t (*)(void))*(&off_1015B46D0 + (v0 ^ 0x2A61)))();
  v4 = (v3 ^ 0xFB8F3E8F5BFBFF7BLL)
     - v2(v1)
     + ((v0 - 1947232171) & 0x741055F7 ^ 0x770F3BF5AEECC02)
     + ((2 * v3) & 0xF71E7D1EB7F7FEF6) != 0x300324EB6EADBEFLL;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((31381 * v4) ^ v0)) - 12))();
}

uint64_t sub_10071D2CC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v3;

  v2 = ((uint64_t (*)(void))STACK[0x42A0])();
  v3 = (v2 ^ 0x37753DFDBF9FDFD6)
     - ((uint64_t (*)(uint64_t))STACK[0x4350])(v1)
     + ((v2 << (v0 - 40)) & 0x6EEA7BFB7F3FBFACLL) == 0x37753DFDBF9FDFD6;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v3 * ((v0 - 4531) ^ 0x56B0)) ^ v0)) - 12))();
}

uint64_t sub_10071D354()
{
  int v0;
  uint64_t v1;

  ((void (*)(uint64_t, unint64_t, uint64_t, uint64_t))STACK[0x4268])(v1, STACK[0x6AC0], 32, 1536);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 4531)) - 12))();
}

uint64_t sub_10071D38C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = ((uint64_t (*)(uint64_t))STACK[0x4528])(v0);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v1 + 4064)) - 12))(v2);
}

uint64_t sub_10071D3AC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((STACK[0xCEE8] != 0) | (32 * (STACK[0xCEE8] != 0))) ^ (v0 + 16743)))
                            - 12))();
}

uint64_t sub_10071D3E0()
{
  int v0;
  uint64_t v1;

  v1 = ((uint64_t (*)(void))STACK[0x4528])();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12))(v1);
}

uint64_t sub_10071D3F8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  v2 = ((uint64_t (*)(uint64_t))STACK[0x4528])(v1);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 9376)) - 8))(v2);
}

uint64_t sub_10071D41C()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v3 = ((uint64_t (*)(uint64_t))STACK[0x4528])(v1);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8
                                                      * (int)(((v2 == 0) * ((v0 - 100933944) ^ 0xF9FBEF40)) ^ (v0 + 2744)))
                                          - 4))(v3);
}

uint64_t sub_10071D480@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  int v2;

  STACK[0xC768] = a1 - 96;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((v2 + 1879131533) ^ 0x700156C5 ^ (724 * (v2 + 1879131533 < v1))))
                            - 8))();
}

uint64_t sub_10071D4DC()
{
  int v0;
  unsigned int v1;

  v1 = ((2 * (56 - *(unsigned __int8 *)STACK[0x6AC0])) & 0xF3F7DE7C)
     + ((56 - *(unsigned __int8 *)STACK[0x6AC0]) ^ 0xF9FBEF3E);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((32413 * ((((v1 - v0) | (v0 - v1)) & 0x80000000) == 0)) ^ (v0 + 100937502)))
                            - 8))();
}

uint64_t sub_10071D568(uint64_t a1)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((15344
                                          * ((((((v2 ^ (v1 + 548)) + 281274804) | 0x73006A8) ^ 0xE403D0C4) & (2 * (57 - *(unsigned __int8 *)(a1 + 1))))
                                           + ((57 - *(unsigned __int8 *)(a1 + 1)) ^ v1) == v1)) ^ v2 ^ (v1 + 548)))
                            - 8))();
}

uint64_t sub_10071D5D0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((14965
                                          * (((((v1 - 1049386765) & 0x3E8C5EFC) - 201867216) & (2
                                                                                              * (v2
                                                                                               - *(unsigned __int8 *)(a1 + 2))))
                                           + (((v1 + 110355012) | 0x11600E18) ^ (v2 - *(unsigned __int8 *)(a1 + 2)) ^ 0xEE0FE186) == v3)) ^ v1))
                            - 8))();
}

uint64_t sub_10071D650(uint64_t a1)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (v1 ^ (16
                                               * ((v2 & (2 * (48 - *(unsigned __int8 *)(a1 + 3))))
                                                              + ((48 - *(unsigned __int8 *)(a1 + 3)) ^ v3) != ((v1 + 354674124) | LODWORD(STACK[0x16E8])) + ((v1 - 100937486) ^ 0x1BFC0FB8)))))
                            - 8))();
}

uint64_t sub_10071D6B8(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;

  v3 = (v2 & (2 * (54 - *(unsigned __int8 *)(a1 + 4))))
     + ((v1 + 502800250) ^ (54 - *(unsigned __int8 *)(a1 + 4)) ^ 0xEE0FE186);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((18846 * ((((v3 - v1) | (v1 - v3)) & 0x80000000) == 0)) ^ (v1 + 100926082 + v1 + 100937502 + 3648)))
                            - 8))();
}

uint64_t sub_10071D738(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;

  v4 = ((v1 + 401862748) ^ 0x17F40E89) - *(unsigned __int8 *)(a1 + 5);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((18154 * ((v2 & (2 * v4)) + (v4 ^ v3) == v3)) ^ v1))
                            - 8))();
}

uint64_t sub_10071D788(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((22139
                                          * ((v3 & (2 * (52 - *(unsigned __int8 *)(a1 + 6))))
                                           + (v1 ^ (52 - *(unsigned __int8 *)(a1 + 6)) ^ 0xEE0FE186) == v4)) ^ v2))
                            - 8))();
}

uint64_t sub_10071D7D0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((20720
                                          * ((v2 & (2 * (51 - *(unsigned __int8 *)(a1 + 7))))
                                           + (v1 ^ 0x17F410E4 ^ (51 - *(unsigned __int8 *)(a1 + 7)) ^ 0xEE0FE186) == v3)) ^ v1))
                            - 8))();
}

uint64_t sub_10071D828(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v5 = v1 + 401862748 + v2 - *(unsigned __int8 *)(a1 + 8);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((16780 * ((v3 & (2 * v5)) + (v5 ^ v4) == v4)) ^ v1))
                            - 8))();
}

uint64_t sub_10071D870(uint64_t a1)
{
  char v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  v5 = ((v2 + 206999243) & 0xF3A95FFF) - *(unsigned __int8 *)(a1 + 9) - 3367;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((16038 * (((v5 << (v1 ^ 0xB9)) & v3) + (v5 ^ v4) == v4)) ^ v2))
                            - 8))();
}

uint64_t sub_10071D8DC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unint64_t v2;

  STACK[0xC768] = a1 - 96;
  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = (v1 + 18491) - 21870 + *(_QWORD *)(STACK[0x6AD8] + 8 * v1);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (v1 ^ 0x1CF7)) - 8))(5121, 2013256049);
}

uint64_t sub_10071D948@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  int v2;

  STACK[0xC768] = a1 - 96;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((1619 * (v1 >= ((v1 - 1902524730) & 0x59723AF7) - 636674559)) ^ (v2 + v1 + 490)))
                            - 8))();
}

uint64_t sub_10071D9BC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 3679) ^ (20376 * v0)))
                            - ((2 * STACK[0x6508]) ^ 0x3E4A)
                            + 7838))();
}

uint64_t sub_10071D9F8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((LODWORD(STACK[0x79AC]) == -1926392730)
                                               * (((v0 - 486255949) ^ 0xE3047DBC) + 15812)) ^ v0))
                            - 4))();
}

uint64_t sub_10071DA60@<X0>(int a1@<W8>)
{
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1) - 4;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (a1 + 1259))
                                                   - ((a1 + 18557) ^ 0x556ALL)))(5121, 2013256049);
}

uint64_t sub_10071DAB0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 3652) ^ (8708 * v0)))
                            - (STACK[0x6508]
                             - 185352017)
                            + 4109619489))();
}

uint64_t sub_10071DAF4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)(v0 ^ 0xF4F3FFF8 ^ ((v0 == 1401218501) * (v0 + 185377264))))
                            - 12))();
}

uint64_t sub_10071DB64@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x6AD8]
                                                                                                  + 8 * ((((7 * (v1 ^ 0x289F)) ^ 0x2BE5) * (a1 < -30253196)) ^ v1)))(523334293, 2013256049, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_10071DBCC@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((a1 >= ((v1 + 2477) ^ 0x6CC1) - 1118294722) ^ v1)))();
}

uint64_t sub_10071DBFC@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8
                                                      * (((a1 < (int)((557 * (v1 ^ 0x5969)) ^ 0xD0922B1C))
                                                        * ((v1 ^ 0x6496) - 15814)) ^ v1))
                                          - 4))(5121);
}

uint64_t sub_10071DC4C@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (((v1 - 10855 + v1 - 9522 - 11257) * (a1 < -981401777)) ^ v1)))();
}

uint64_t sub_10071DC90@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * (((a1 < (int)(v1 ^ 0xC57D21C4)) * (((v1 - 1191) | 0x10) - 5037)) ^ v1)))();
}

uint64_t sub_10071DCD4@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((20323 * (a1 == ((v1 - 4577) ^ 0xBD5884B2))) ^ v1))
                            - ((v1 + 253585882) & 0xF0E28FBELL ^ 0xDA2)))();
}

uint64_t sub_10071DD30@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  STACK[0x8BF0] = 0;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (a1 & 0xFFFFFFFFF0E28FBELL)) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)(((((a1 & 0xF0E28FBE) - 1578930244) & 0x5E1CD7F7) - 14564) ^ a1 & 0xF0E28FBE))
                            - 8))();
}

uint64_t sub_10071DD98@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (((a1 < (((v2 + (v1 ^ 0x5A3) - 244) | 0x46A0A960) ^ 0x702C7924))
                                * ((v1 ^ 0x16E71B61) - 384249440)) ^ v1 ^ 0x5A3)))();
}

uint64_t sub_10071DDF4@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((((a1 & ~v2 | (v2 ^ ~a1) & (a1 - v2)) >= 0)
                                          * ((73 * (v2 ^ 0x16E7352F)) ^ 0x2A69)) | v2 ^ (v1 + 2041)))
                            - 4))();
}

uint64_t sub_10071DE4C@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((v1 + 23027) | (32 * (a1 < ((v1 + 538985579) | 0xE8C8078) - 4395472))))
                            - 12))();
}

uint64_t sub_10071DEA4@<X0>(int a1@<W0>, int a2@<W8>)
{
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((v2 ^ 0x3A4F ^ ((v2 - 10826) | 0x1005) ^ 0x28) * (a2 >= a1)) ^ v2))
                            - 12))();
}

uint64_t sub_10071DEEC@<X0>(int a1@<W0>, int a2@<W8>)
{
  int v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v2 ^ (39 * (a2 == a1))))
                                          - ((v2 + 1923677082) & 0x8D56FD7F)
                                          - (((v2 - 4613) | 0x24u) ^ 0xFFFFFFFFFFFFF0E9)))(5121);
}

uint64_t sub_10071DF50()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = v0 & 0xFFFFFFFF8D56FD7FLL;
  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)(v1 ^ 0x1CFF)) - (((_DWORD)v1 + 18385) | 0x62u) + 21850))();
}

uint64_t sub_10071DFAC@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8
                                                      * ((100 * (a1 >= (int)(((v1 ^ 0x687C) - 12176) ^ 0xA55B6EA7))) ^ v1))
                                          - 12))(5121);
}

uint64_t sub_10071DFF4@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((947 * (a1 < (int)(v1 ^ 0xAD17CDDC))) ^ v1))
                            - (v1 ^ 0x1BA7u)
                            + 17994))();
}

uint64_t sub_10071E03C@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((59 * (a1 >= (v1 ^ 0x1AFD) - 1464972787)) ^ v1))
                            - ((53 * (v1 ^ 0x1AFDu)) ^ 0x141DLL)))();
}

uint64_t sub_10071E084@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((24074
                                          * ((((v2 | (v1 - a1)) >> ((2 * (v1 ^ 0x74)) ^ 0x2B)) & 1) == 0)) ^ (v1 + 1464977831)))
                            - 12))();
}

uint64_t sub_10071E0E0()
{
  int v0;
  int v1;
  uint64_t v2;
  unint64_t v3;

  v2 = v0 + v1 + 175;
  v3 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v2 | 0xC44))
                + (((v2 | 0xC44) + 449866394) & 0xE52FDD73)
                - 21870;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((v2 | 0xC44) + 1148)) - 8))();
}

uint64_t sub_10071E150@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  v2 = a1 & (v1 ^ a1) | (a1 - v1) & ~(v1 ^ a1);
  return (*(uint64_t (**)(uint64_t))(STACK[0x6AD8]
                                            + 8
                                            * ((2 * ((((v1 - 1185061189) ^ (v2 >> 31)) & 1) == 0)) & 0xFB | (4 * (((v1 - 69) ^ ~(v2 < 0)) & 1)) | (v1 - 1185052501))))(5121);
}

uint64_t sub_10071E1B0@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (v1 | 0x4402 | (4 * (a1 >= 1564659870)) | (8 * (a1 >= 1564659870))))
                            - (((v1 | 0x4402) ^ 0x3482u)
                             - 1447)
                            + 23277))();
}

uint64_t sub_10071E1F8@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((((97 * (v1 ^ 0x6095)) ^ 0x140F) * (a1 < 1696786786)) | v1)))();
}

uint64_t sub_10071E234@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((((19 * (v2 ^ 0x14A6)) ^ 0x3AD6) + v2 - 4577) * (a1 == v1)) ^ v2))
                            - 12))();
}

uint64_t sub_10071E27C()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x1C99)) - ((v0 + 18457) ^ 0x556ALL)))();
}

uint64_t sub_10071E2C4@<X0>(int a1@<W8>)
{
  unsigned int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(((v1 ^ 0x47D1) * (a1 < -437121327)) ^ v1))
                            - (v1 ^ 0x47C1)))();
}

uint64_t sub_10071E308@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v1 ^ (16 * (a1 >= -732540821))))
                            - ((v1 - 19088) | 0x1000u)
                            + 5137))();
}

uint64_t sub_10071E340@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((18203 * (a1 == ((3 * (v2 ^ 0x106F)) ^ (v1 + 3226)))) ^ v2))
                            - 47 * (v2 ^ 0x1419u)
                            + 552))();
}

uint64_t sub_10071E390()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((v0 - 1124242940) & 0x4302DDEF ^ 0x5100) + v0)) - 8))();
}

uint64_t sub_10071E3E4@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  BOOL v3;

  v3 = a1 < ((8031 * (v1 ^ 0x2A7E)) ^ (v2 + 111));
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * ((((v1 + 56) ^ v3) & 1 | (2 * (((v1 + 56) ^ v3) & 1))) ^ v1)))();
}

uint64_t sub_10071E428@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(uint64_t))(STACK[0x6AD8]
                                            + 8
                                            * ((15 * (a1 < (((v1 ^ 0x2DD4) + 346568902) ^ (53 * (v1 ^ 0x2DD4))))) ^ v1)))(5121);
}

uint64_t sub_10071E47C@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((23481 * (a1 == ((83 * ((v1 - 1960707352) & 0x74DDF336 ^ 0x21D)) ^ 0x39E6509))) ^ v1))
                            - 12))();
}

uint64_t sub_10071E4D4()
{
  unsigned int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)v0) - 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(v0 ^ 0x1C9B)) - (v0 ^ 0xD43)))();
}

uint64_t sub_10071E51C@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((28 * (a1 < (int)((v1 - 614338406) & (v2 + 2865) ^ 0x9EEB8ACA))) ^ v1))
                            - ((v1 - 1633115750) & 0xFBF7F7DA)
                            + 2594228182))();
}

uint64_t sub_10071E584@<X0>(unsigned int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((41
                                               * (((a1 & (v1 ^ a1) | (a1 - v1) & ~(v1 ^ a1)) >> ((97 * (v1 ^ 0xEF)) ^ 0xA)) & 1)) ^ (v1 + 1700746564)))
                            - ((v1 + 1491507003) & 0xC78B4FF)
                            + 5137))();
}

uint64_t sub_10071E60C@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((24117 * (a1 == ((v1 + 1604757289) & 0xA05946F5) - 1741697900)) ^ v1))
                            - 12))();
}

uint64_t sub_10071E654()
{
  int v0;
  int v1;
  unint64_t v2;

  v1 = v0 - 1711;
  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)(v1 - 20728 + ((v1 + 426919933) & 0xE68DFFFE))) - 8))();
}

uint64_t sub_10071E6AC@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((a1 < 964707262) ^ (2 * (v1 ^ (v2 + 3)) - 121)) & 1 ^ (2 * (v1 ^ (v2 + 3075)))))
                            - 8))();
}

uint64_t sub_10071E6F0@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((186
                                          * ((v1 ^ (a1 < ((v1 - 1932933514) & 0x7335FD75 ^ 0x456044D1))) & 1)) ^ v1))
                            - 12))();
}

uint64_t sub_10071E744@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((282 * (v1 ^ 0x502B) + 9477) * (a1 == v2 + 3059)) ^ v1 ^ 0x443C))
                            - 12))();
}

uint64_t sub_10071E794()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(v0 - 20730 + ((v0 + 388125202) & 0xE8DDF5E7))) - 8))();
}

uint64_t sub_10071E7E4@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((((v1 + 158) ^ 0x141F) * (a1 < -820992721)) ^ v1))
                            - 12))();
}

uint64_t sub_10071E820@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((11582 * (a1 == ((v1 - 1679767008) & 0x641F23FE) + v2)) ^ v1))
                            - 12))();
}

uint64_t sub_10071E860()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 4579)) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v0 - 651) ^ (v0 - 4579))) - 4))();
}

uint64_t sub_10071E8B0@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((v1 - 783054399) ^ (2
                                                                  * ((a1 & ~v1 | (v1 ^ ~a1) & (a1 - v1)) >> 31))))
                            - (v1 - 783069539)
                            + 5137))();
}

uint64_t sub_10071E8FC@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v1 + 18307) * (a1 == 778679208)) ^ v1))
                                          - ((v1 - 713860295) & 0x2A8C9DBF)
                                          + 3330))(5121);
}

uint64_t sub_10071E958()
{
  unsigned int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 + 1218)) - ((v0 + 18516) ^ 0x556ALL)))();
}

uint64_t sub_10071E998@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((((97 * (v1 ^ 0x4667) - 391542558) & 0x1756771D) - 5102) * (a1 < -1202880211)) ^ v1))
                            - 4))();
}

uint64_t sub_10071E9F0@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((((_DWORD)v2 + 23686) * (a1 == v1 + 1396)) ^ v2))
                            - (v2 ^ 0x1419)))();
}

uint64_t sub_10071EA30()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x19B7)) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (v0 ^ 0x5C5 ^ (12916
                                                                     * ((v0 ^ 0x19B7) - 2076524483 < 0x63E9A7AA))))
                            - ((2 * (v0 ^ 0x3EA4)) ^ 0x556ALL)))();
}

uint64_t sub_10071EAAC@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((((v1 - 18148) ^ 0x15DC) * (a1 < 1486735173)) ^ v1))
                            - ((v1 - 18148) ^ 0x141DLL)))();
}

uint64_t sub_10071EAF4@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((21941 * (a1 == (v2 ^ 0x1621) + v1)) ^ v2))
                            - ((v2 - 1746) ^ 0xD4FLL)))();
}

uint64_t sub_10071EB30()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x49F1 ^ (v0 - 2036936016) & 0x7969756E)) - 8))();
}

uint64_t sub_10071EB84@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((13
                                          * (a1 >= (((((v1 ^ 0xDCA) - 18931) | 0x1401) - 285619015) ^ ((v1 ^ 0xDCA) - 5646)))) ^ v1 ^ 0xDCA))
                            - 4))();
}

uint64_t sub_10071EBD8@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((((v1 ^ 0x27EC) - 3157) * (a1 < -149721299)) ^ v1))
                            - 8))();
}

uint64_t sub_10071EC0C@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((((1726 * (v1 ^ 0x1417) - 2920) | 0x20) ^ 0x5552) * (a1 == -285617353)) ^ v1))
                            - 12))();
}

uint64_t sub_10071EC58()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((v0 ^ 0x581E) - 14518) ^ v0)) - 8))();
}

uint64_t sub_10071EC98@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(uint64_t))(STACK[0x6AD8]
                                            + 8
                                            * (((a1 < (int)((v1 - 18952) ^ 0xFE78BDD4)) * ((v1 ^ 0x4A08) - 5100)) ^ v1)))(5121);
}

uint64_t sub_10071ECE0@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v2 ^ (3902 * (a1 == v1))))
                            - ((2 * v2) ^ 0x254E ^ ((v2 - 5105) | 0x210u) ^ 0xF5CLL)))();
}

uint64_t sub_10071ED28()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((3643 * (v0 ^ 0xD62) - 14510) ^ v0)) - 8))();
}

uint64_t sub_10071ED70@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (((a1 < v1 - 1603923598) * (53 * (v1 ^ 0x1A1E) - 4920)) ^ v1)))();
}

uint64_t sub_10071EDB0@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8
                                                        * ((((v2 + 13067) ^ (v2 - 1747)) * (a1 == v1 + 1515)) ^ v2))
                            - 12))();
}

uint64_t sub_10071EDEC()
{
  unsigned int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = (v0 ^ 0xFFFFFFFFFFFFF2BALL) + *(_QWORD *)(STACK[0x6AD8] + 8 * (int)v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(v0 + 1166)) - 8))();
}

uint64_t sub_10071EE30@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * ((81 * (((a1 < 931360268) ^ ((v1 ^ 0x98) + 102)) & 1)) ^ v1 ^ 0xB98)))();
}

uint64_t sub_10071EE74@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((((((v1 - 18332) ^ 0x1621) + 2560) ^ (v1 - 20084)) * (a1 == v2)) ^ (v1 - 18332)))
                            - 12))();
}

uint64_t sub_10071EEB0()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 + 1171)) - ((2 * v0) ^ 0x4F18u) + 21850))();
}

uint64_t sub_10071EEF8@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((20471 * (a1 == ((v1 - 1677) ^ (v2 + 1891)))) ^ v1))
                            - ((v1 - 4629) | 0x34u)
                            + 552))();
}

uint64_t sub_10071EF40()
{
  unsigned int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)v0) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(v0 + 1096)) - (v0 ^ 0xD80)))();
}

uint64_t sub_10071EF88@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v2 ^ (13499 * (a1 == v1 + 139))))
                            - (v2 - 4577)
                            - (v2 ^ 0x15C2u)
                            + 1023))();
}

uint64_t sub_10071EFCC()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((int)v0 + 4577)) - ((3 * (v0 ^ 0x9F4)) ^ 0x186DLL)))();
}

uint64_t sub_10071F01C@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((a1 == ((v1 - 1675) ^ 0xA55B4D48)) * ((94 * (v1 ^ 0x1413)) ^ 0x2469)) ^ v1))
                            - 12))();
}

uint64_t sub_10071F068()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x1C5A)) - ((v0 + 18392) ^ 0x556ALL)))();
}

uint64_t sub_10071F0B0@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((505 * (((a1 < 1804741177) ^ (53 * (v1 ^ 0x74) - 4)) & 1)) ^ v1 ^ 0x34EB))
                            - 8))();
}

uint64_t sub_10071F100@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((((((v1 | 0x404) - 3022) | 0x508) ^ 0x5D46) * (a1 == v2)) ^ (v1 | 0x404)))
                            - ((v1 | 0x404u) ^ 0x1419)))();
}

uint64_t sub_10071F154()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) + (((_DWORD)v0 - 2137175896) & 0x7F62FF6A) - 21870;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(v0 ^ 0x1C9F)) - 8))();
}

uint64_t sub_10071F1AC@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((30129 * (a1 == ((v1 - 1841006166) & 0x6DBB7FD5 ^ 0xD0926144))) ^ v1))
                            - 12))();
}

uint64_t sub_10071F200()
{
  unsigned int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(v0 + 1083)) - ((v0 + 12939) | 0x1542) + 21850))();
}

uint64_t sub_10071F24C@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((22948 * (a1 == (((v2 ^ 0x1621) + 2688) ^ v1))) ^ v2))
                            - 12))();
}

uint64_t sub_10071F280()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = (v0 + 18606) - 21862 + *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 + 1308)) - 8))();
}

uint64_t sub_10071F2C4@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8
                                                        * (((a1 == ((v1 - 5121) | 0x220) + v2) * (v1 - 1350)) ^ v1))
                            - 12))();
}

uint64_t sub_10071F2FC()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 1705));
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(((v0 + 877808465) & 0xCBADF5FB ^ 0x5106) + v0 - 1705)) - 8))();
}

uint64_t sub_10071F354@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((((v2 - 1722) ^ 0x220B ^ ((v2 - 5109) | 0x214)) * (a1 == v1)) ^ v2))
                            - 12))();
}

uint64_t sub_10071F394()
{
  int v0;
  unint64_t v1;

  LODWORD(STACK[0xACDC]) = -1926392729;
  LODWORD(STACK[0x8E98]) = -1926392729;
  LODWORD(STACK[0x8D44]) = -1926392729;
  LODWORD(STACK[0xB650]) = -1926392729;
  STACK[0xCF18] = 0;
  STACK[0xAA18] = 0;
  STACK[0x7E50] = 0;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 - 20717 + ((v0 + 17413) | 0x402))) - 8))();
}

uint64_t sub_10071F42C@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((16076 * (a1 == ((v1 - 1802704022) & 0x6B7302B4) + v2)) ^ v1))
                            - ((v1 - 1725) ^ 0xD54)))();
}

uint64_t sub_10071F478()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(((v0 + 1773824547) & 0x9645DDE6 ^ 0x511A) + v0)) - 8))();
}

uint64_t sub_10071F4CC@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((4 * (a1 < (v1 ^ 0x2EACF4BC) + 848935115)) | (32
                                                                                        * (a1 < (v1 ^ 0x2EACF4BC)
                                                                                              + 848935115))) ^ v1 ^ 0x2EACF4BC))
                            - (((v1 ^ 0x2EACF4BCu) + 783061940) ^ 0x2EACC570)))();
}

uint64_t sub_10071F528@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8
                                                      * (v1 ^ (v1 - 783071238) ^ 0x2EACDC1F ^ (20414
                                                                                             * (((a1 - v1) | (v1 - a1)) >= 0))))
                                          - 12))(5121);
}

uint64_t sub_10071F588()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x49C0 ^ (v0 + 18416))) - 8))();
}

uint64_t sub_10071F5CC@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((((8 * v1) ^ 0x9E01) * (a1 == v2)) ^ v1)) - 12))();
}

uint64_t sub_10071F604()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0xADD8));
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0xB178)) - 10929 * (v0 ^ 0xA0AAu) + 21850))();
}

uint64_t sub_10071F658@<X0>(int a1@<W8>)
{
  unsigned int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((12594 * (a1 == v1 - 4577 + v2)) ^ v1))
                            - (v1 ^ 0x1419)))();
}

uint64_t sub_10071F6A0()
{
  uint64_t v0;
  unint64_t v1;

  LODWORD(STACK[0x6B3C]) = -1926392729;
  STACK[0x92C0] = 0;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(v0 ^ 0x1CBD)) - (v0 + 18421) + 21850))();
}

uint64_t sub_10071F708@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v2 ^ (22331 * (a1 == v1))))
                            - ((v2 - 4577) ^ 0xFFFFFFFFFFFFF0B8)
                            - ((v2 + 551160203) & 0xDF25EFDF)))();
}

uint64_t sub_10071F760()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v0 & 0xFFFFFFFFDF25EFDFLL)) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)((v0 & 0xDF25EFDF ^ 0x9D0) + (v0 & 0xDF25EFDF))) - 8))();
}

uint64_t sub_10071F7B0@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((((v1 ^ 0x1621) + 2925) ^ 0x53DF) * (a1 == -25646655)) ^ v1))
                            - 12))();
}

uint64_t sub_10071F7EC()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = (((v0 + 12895) | 0x1562u) ^ 0xFFFFFFFFFFFFAA96) + *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x1C71)) - 8))();
}

uint64_t sub_10071F83C@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((22779 * (a1 == 282 * ((v1 - 1642) ^ 0x1417) - 1603917379)) ^ (v1 - 1642)))
                            - 496 * ((v1 - 1642) ^ 0x1412u)
                            + 3460))();
}

uint64_t sub_10071F894()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x1C40)) - ((v0 + 14226) | 0x1040u) + 21850))();
}

uint64_t sub_10071F8E0@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((a1 == (v1 & 0x656395FD) + 915323948)
                                               * ((((v1 & 0x656395FD) + 787666657) & 0xD10D173D) + 23674)) ^ v1 & 0x656395FD))
                            - 12))();
}

uint64_t sub_10071F940()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x1CA6 ^ (12897 * ((v0 ^ 0x1B6897DFu) >= 0x8B7F33B4)))) - 8))();
}

uint64_t sub_10071F9B0@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((((v1 - 1712) ^ 0xF51) + 28178) * (a1 == v2)) ^ v1))
                            - 12))();
}

uint64_t sub_10071F9E4()
{
  int v0;
  unint64_t v1;

  LODWORD(STACK[0x7E24]) = -1926392729;
  LODWORD(STACK[0x6FE0]) = -1926392729;
  LODWORD(STACK[0xBB74]) = -1926392729;
  LODWORD(STACK[0xAF68]) = -1926392729;
  STACK[0x8370] = 0;
  STACK[0xA838] = 0;
  STACK[0x7D58] = 0;
  STACK[0xCE50] = 0;
  STACK[0x8DB8] = 0;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = ((v0 - 3141) | 0x5442u) - 21870 + *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 + 1131)) - 8))();
}

uint64_t sub_10071FA90@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((((v2 - 4577) ^ 0x40EA) * (a1 == v1)) ^ v2))
                            - ((v2 - 1759) ^ 0xD3ALL)))();
}

uint64_t sub_10071FAD0()
{
  int v0;
  unint64_t v1;

  LODWORD(STACK[0x7974]) = -1926392729;
  LODWORD(STACK[0x9B94]) = -1926392729;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((4886 * (v0 != -61448604)) ^ (v0 - 2672))) - 8))();
}

uint64_t sub_10071FB50@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8
                                                      * ((19015
                                                        * (a1 == ((v1 + 1739778400) & 0x984D0FBF)
                                                               + (v1 ^ 0x1621 ^ (v2 + 2292)))) ^ v1))
                                          - 12))(5121);
}

uint64_t sub_10071FBAC()
{
  uint64_t v0;
  unint64_t v1;

  STACK[0xBAF0] = 0;
  LODWORD(STACK[0xCA8C]) = -1926392729;
  STACK[0xD040] = 0;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = (v0 + 18477) - 21870 + *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(v0 ^ 0x1CE5)) - 8))();
}

uint64_t sub_10071FC20()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x12DD ^ (849 * ((v0 ^ 0xD4050104) > 0xBEE95BE0)))) - 4))();
}

uint64_t sub_10071FC88()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] + 2925) ^ (24381 * v0))))();
}

uint64_t sub_10071FCB0()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 8786)) - 12))();
}

uint64_t sub_10071FCD8@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  _BOOL4 v2;

  v2 = a2 < (int)(((STACK[0x6508] + 818933225) & 0xCF3013BC) - 1926397366);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                               + 8
                                                               * (int)(((4 * v2) | (8 * v2)) ^ (STACK[0x6508] + 9517)))
                                                   - 8))(a1, 2013256049);
}

uint64_t sub_10071FD38@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (((a1 >= (int)(((v1 - 4372) | 0x634) ^ 0x8D2D9358)) * ((v1 - 1273) ^ 0x5C3A)) ^ v1)))();
}

uint64_t sub_10071FD80()
{
  unsigned int v0;
  unint64_t v1;
  uint64_t v2;

  STACK[0xB190] = 0;
  LODWORD(STACK[0xA4C4]) = -1926392729;
  STACK[0xB3F0] = 0;
  STACK[0xBD10] = 0;
  LODWORD(STACK[0x9E8C]) = -1926392729;
  STACK[0x6EB0] = 0;
  LODWORD(STACK[0x853C]) = -1926392729;
  v1 = STACK[0x6AD8];
  v2 = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)v0);
  LODWORD(STACK[0xCD6C]) = -1926392729;
  STACK[0x9EB8] = v2 - 12;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * (int)((5819 * (v0 != -667859262)) ^ (v0 - 1464)))
                                          - (v0 ^ 0xD2BLL)))(5121);
}

uint64_t sub_10071FE44@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * ((a1 == (((v1 - 1527) | 0x108) ^ 0x8D2D8007) + ((v1 - 3588) | 0x324)) | v1)))();
}

uint64_t sub_10071FE8C()
{
  uint64_t v0;
  unint64_t v1;

  STACK[0x7C40] = 0;
  LODWORD(STACK[0x97C0]) = -1926392729;
  STACK[0x9C78] = 0;
  LODWORD(STACK[0x6DF4]) = -1926392729;
  STACK[0xB760] = 0;
  LODWORD(STACK[0xB600]) = -1926392729;
  STACK[0x8730] = 0;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * (int)(v0 ^ 0x1CFD))
                                          - ((7286 * (v0 ^ 0xD2E)) ^ 0x556ALL)))(5121);
}

uint64_t sub_10071FF30@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((24426
                                          * ((((a1 ^ 0xA9C2485C ^ (43 * (v1 ^ 0x75E))) + 1446881238) ^ ((a1 ^ 0x145220B9) - 340926649) ^ ((a1 ^ 0x30BDE1C5 ^ (307 * (v1 ^ 0x737))) - 817753332))
                                           - 1926392733 < 0xFFFFFFFC)) ^ v1))
                            - 4))();
}

uint64_t sub_10071FFF0()
{
  int v0;
  unint64_t v1;

  STACK[0xCEC0] = 0;
  LODWORD(STACK[0xB3C0]) = -1926392729;
  STACK[0xCDC0] = 0;
  STACK[0xC4D0] = 0;
  LODWORD(STACK[0x860C]) = -1926392729;
  STACK[0x6BF0] = 0;
  LODWORD(STACK[0x86A8]) = -1926392729;
  STACK[0x9D50] = 0;
  LODWORD(STACK[0xC8E4]) = -1926392729;
  LODWORD(STACK[0x73B4]) = -1926392729;
  LODWORD(STACK[0x88C4]) = -1926392729;
  STACK[0x6E70] = 0;
  LODWORD(STACK[0xCE5C]) = -1926392729;
  LODWORD(STACK[0x9FE8]) = -1926392729;
  STACK[0x95F8] = 0;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x1CE1)) - 10929 * (v0 ^ 0xD33u) + 21850))(5121);
}

uint64_t sub_1007200F4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 3697) ^ (6595 * v0)))
                            - ((STACK[0x6508] - 4182) | 0xCD1)
                            + 3305))();
}

uint64_t sub_100720138()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v0 + 4287) ^ v0)) - 4))();
}

uint64_t sub_100720180()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 3679) ^ (10616 * v0)))
                            - (LODWORD(STACK[0x4B08]) ^ 0x107ELL)))();
}

uint64_t sub_1007201C8()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = (v0 + 18513) - 21866 + *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * ((int)v0 + 1215)) - 8))(5121, 2013256049);
}

uint64_t sub_10072021C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 2362) ^ (16285 * v0)))
                            - ((STACK[0x6508] - 900) ^ 0xCF6)))();
}

uint64_t sub_100720254()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x1DB3)) - (v0 ^ 0x1210u) + 7902))();
}

uint64_t sub_1007202A4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 3704) ^ (12793 * v0)))
                            - ((STACK[0x6508] + 916933829) & 0xC958AFE5 ^ 0xD2DLL)))();
}

uint64_t sub_1007202F8@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = (a1 & 0xC958AFE5 ^ 0x5843) - 21866 + *(_QWORD *)(STACK[0x6AD8] + 8 * (a1 & 0xFFFFFFFFC958AFE5));
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (int)(a1 & 0xC958AFE5 ^ 0x1CF1)) - 8))(5121, 2013256049);
}

uint64_t sub_10072035C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((((STACK[0x6508] - 92295319) & 0x5807BF7 ^ 0x5FC1) * v0) ^ (STACK[0x6508] - 3688)))
                            - 4))();
}

uint64_t sub_1007203A4@<X0>(unsigned int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((27051
                                          * ((((LODWORD(STACK[0xB600]) ^ 0xF3FD3794) + 201508972) ^ ((LODWORD(STACK[0xB600]) ^ 0xC51CA0EE) + 987979538) ^ (((a1 - 538068576) & 0xAD3F9EEF ^ 0xC91E6884) + (LODWORD(STACK[0xB600]) ^ 0xBBCC031D)))
                                           - 1926392858 > 0xFFFFFF7E)) ^ a1))
                            - 12))();
}

uint64_t sub_100720458@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  v2 = a1 - 3113;
  v3 = ((uint64_t (*)(_QWORD))STACK[0x5510])((((a1 - 15265) | 0x1040) + 884359462) ^ (4 * v1));
  STACK[0xB760] = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((5241 * (v3 == 0)) ^ v2)) - 12))();
}

uint64_t sub_1007204D8@<X0>(unsigned int a1@<W8>)
{
  int v1;
  int v2;
  unsigned int v3;
  _BOOL4 v4;
  _BOOL4 v5;

  LODWORD(STACK[0xD0BC]) = a1;
  v3 = (((LODWORD(STACK[0xB600]) ^ 0x6892934C) - 1754436428) ^ (v1 + 1494513499 + (LODWORD(STACK[0xB600]) ^ 0xA6EB782F)) ^ ((LODWORD(STACK[0xB600]) ^ (((v1 - 276968191) & 0x9DAFB6EF) - 1238963555)) - 1129611012))
     + 187145348;
  v4 = v3 < 0x7DFA081D;
  v5 = a1 + 2113538077 < v3;
  if (a1 > 0x8205F7E2 != v4)
    v5 = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((29667 * (v2 & v5)) ^ (v1 + 11105))) - 12))();
}

uint64_t sub_1007205E0()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x1D27))
                                                   - ((v0 + 18539) ^ 0x556ALL)))(5121, 2013256049);
}

uint64_t sub_100720640()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(v1 ^ 0x8D2D85D3 ^ (v1 + 152086551) & 0x69C1D3F7 ^ ((((v0 - v1) | (v1 - v0)) >= 0)
                                                                                                 * (((v1 - 1248286376) & 0xBD39C3FD)
                                                                                                  + 10709))))
                            - 12))();
}

uint64_t sub_1007206C0()
{
  uint64_t v0;
  unint64_t v1;

  STACK[0x8118] = 0x9FC31EB5F570521ELL;
  v1 = STACK[0x6AD8];
  STACK[0xCD70] = (((_DWORD)v0 - 1928042942) & 0x72EB9F4E) + *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 1878;
  return (*(uint64_t (**)(void))(v1 + 8 * (int)(v0 ^ 0x5DCB)))();
}

uint64_t sub_10072074C()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 7992)) - 12))();
}

uint64_t sub_10072077C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((((STACK[0x6508] - 3190) | 0x891) ^ 0xC9A) * (v0 != -1926392729)) | LODWORD(STACK[0x3454])))
                            - 12))();
}

uint64_t sub_1007207C4()
{
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 2719)))();
}

uint64_t sub_1007207E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = STACK[0x7070];
  *(_DWORD *)(v2 + 32) = -1926392729;
  v2 += 32;
  STACK[0x8A78] = v2;
  *(_QWORD *)(v2 + 8) = v1;
  *(_DWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = -1926392729;
  *(_DWORD *)(v2 + 36) = -1926392729;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = -1926392729;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = v1;
  *(_QWORD *)(v2 + 80) = 0;
  *(_DWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 104) = -1926392729;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = v1;
  *(_DWORD *)(v2 + 136) = -1926392729;
  *(_QWORD *)(v2 + 144) = v1;
  *(_QWORD *)(v2 + 128) = 0;
  v3 = STACK[0x6AD8];
  STACK[0xD1B0] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1);
  return (*(uint64_t (**)(void))(v3 + 8 * (int)((7 * (a1 ^ 0xECB) + 3581) ^ a1)))();
}

uint64_t sub_100720894()
{
  int v0;
  int v1;
  unint64_t v2;
  unint64_t v3;

  v0 = STACK[0x6508] + 1626;
  v1 = STACK[0x6508] - 2492;
  v2 = STACK[0x8A78];
  *(_DWORD *)(v2 + 168) = -1926392729;
  *(_QWORD *)(v2 + 192) = 0;
  *(_DWORD *)(v2 + 200) = -1926392729;
  *(_QWORD *)(v2 + 208) = 0;
  *(_DWORD *)(v2 + 216) = -1926392729;
  *(_DWORD *)v2 = STACK[0x8860];
  *(_QWORD *)(v2 + 8) = STACK[0x8118];
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 36) = -1926392729;
  *(_QWORD *)(v2 + 40) = STACK[0x9C78];
  *(_DWORD *)(v2 + 48) = STACK[0x6DF4];
  *(_QWORD *)(v2 + 176) = STACK[0xB760];
  *(_DWORD *)(v2 + 184) = STACK[0xB600];
  v3 = STACK[0x6AD8];
  STACK[0xA6C8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 12;
  return (*(uint64_t (**)(void))(v3 + 8 * ((v0 ^ 0xD36) + v1)))();
}

uint64_t sub_100720954(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;

  v2 = STACK[0x6508] + 2719;
  v3 = STACK[0x8A78];
  STACK[0x8730] = *(_QWORD *)(STACK[0x8A78] + 96);
  STACK[0x7C08] = *(_QWORD *)(v3 + 112);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x6AD8]
                                                                                                  + 8 * v2))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_1007209A4()
{
  int v0;
  unint64_t v1;
  int v2;
  int v3;
  int v4;
  unint64_t v5;

  v3 = STACK[0x6508] ^ 0x81F;
  v4 = STACK[0x6508] - 3734;
  LODWORD(STACK[0xC37C]) = v2;
  STACK[0x9B40] = v1;
  LODWORD(STACK[0x8D50]) = v0;
  v5 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v4) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (v3 ^ v4 ^ 0xA31)) - 4))();
}

uint64_t sub_100720A10()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((9979
                                               * ((((v0 - (STACK[0x6508] - 1926396943)) | (STACK[0x6508]
                                                                                         - 1926396943
                                                                                         - v0)) & 0x80000000) == 0)) ^ (STACK[0x6508] - 3717)))
                            - ((STACK[0x6508] + 422181249) & 0xE6D5F7F9 ^ 0x1FDLL)))();
}

uint64_t sub_100720A84@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((14766 * (LODWORD(STACK[0xC37C]) == -1926392729)) ^ a1))
                            - ((a1 + 1151) | 0x80u)
                            - ((a1 - 1812761850) & 0x6C0C9B7E ^ 0xFFFFFFFFFFFFE96ALL)))();
}

uint64_t sub_100720AF8()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x7D40] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(v0 ^ 0x1457)) - ((v0 - 1781) ^ 0xFFFFFFFFLL)))();
}

uint64_t sub_100720B44()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((STACK[0x6508] - 3717) ^ (18396 * (v0 == -1926392729))))
                            - 7 * (STACK[0x6508] ^ 0x1031)
                            + 485))();
}

uint64_t sub_100720B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(STACK[0x6AD8] + 8 * (a3 ^ 0x1249));
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a3) - 12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3
                                                                                                - ((a3 + 5752) ^ 0x186DLL)))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_100720C1C()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((1746 * (STACK[0x8730] != 0)) ^ (v0 + 19333))))();
}

uint64_t sub_100720C4C()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return (*(uint64_t (**)(uint64_t))(STACK[0x6AD8] + 8 * v0))(v1);
}

uint64_t sub_100720C5C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((22748 * (STACK[0xB760] != 0)) ^ (v0 - 3764))) - 12))();
}

uint64_t sub_100720C90()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 3696)) - 4))(v1);
}

uint64_t sub_100720CA8()
{
  unsigned __int8 v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((STACK[0x6508] + 4810) | (16
                                                                        * ((v0 ^ (STACK[0x6508] - 1)) & 1))))
                            - 12))();
}

uint64_t sub_100720CE0()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((31056
                                               * (LODWORD(STACK[0x9E8C]) == (((STACK[0x6508] - 3182) | 0x8B6) ^ 0x8D2D98D1))) ^ (STACK[0x6508] + 4826)))
                            - (((STACK[0x6508] - 4096) | 0x1000) ^ 0x107ALL)))();
}

uint64_t sub_100720D5C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v0 + 4417) ^ v0)) - 4))();
}

uint64_t sub_100720DA0()
{
  int v0;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8 * (int)((STACK[0x6508] + 4826) ^ (31376 * v0)))
                                          - ((STACK[0x6508] + 1518480585) & 0xA57DC7DBLL)
                                          + 1295))(5121);
}

uint64_t sub_100720DF4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(v0 & 0xA57DC7DB ^ 0x16D6))
                            - (((v0 & 0xA57DC7DB) - 844465772) & 0x32559FF9 ^ 0x1EA5)))();
}

uint64_t sub_100720E64@<X0>(int a1@<W8>)
{
  STACK[0x7838] = 0x603CE14A0A8FADE1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (a1 + 9047)) - 8))();
}

uint64_t sub_100720E90(uint64_t a1)
{
  unint64_t v1;
  int v2;
  int v3;
  unint64_t v4;

  v2 = (STACK[0x6508] + 654888321) & 0xD8F7776A;
  v3 = STACK[0x6508] - 879;
  STACK[0x77D8] = v1;
  v4 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v3) - 12;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * ((v2 - 14475) ^ v3)) - 8))(a1, 2013256049);
}

uint64_t sub_100720F00()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6508];
  STACK[0x7838] = STACK[0x77D8];
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((v1 + 9047) ^ (2012 * v0)))
                            - (((_DWORD)v1 - 1905119616) & 0x718DCDFD ^ 0xCFCLL)))();
}

uint64_t sub_100720F54()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x1DB5u)) - 4))();
}

uint64_t sub_100720FB0()
{
  int v0;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8
                                                      * (int)(((((STACK[0x6508] - 2129) | 0x512) ^ 0x6F3D) * v0) ^ (STACK[0x6508] + 9047)))
                                          - 8))(5121);
}

uint64_t sub_100721000(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * ((int)v1 - 20681 + (int)v1 + 18475)) - 8))(a1, 2013256049);
}

uint64_t sub_100721048()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] + 9047) ^ (31634 * v0)))
                            - (((STACK[0x6508] - 2960) | 0x808) ^ 0xCE6)))();
}

uint64_t sub_100721090()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x34D ^ (v0 + 4596))) - 4))();
}

uint64_t sub_1007210DC@<X0>(int a1@<W8>)
{
  int v1;

  STACK[0xDC00] = 0;
  LODWORD(STACK[0xBCE0]) = v1;
  LOBYTE(STACK[0xBC27]) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (a1 + 3939)) - (a1 - 3729) + 481))();
}

uint64_t sub_100721128()
{
  int v0;
  int v1;

  if (LODWORD(STACK[0xCB64]) == (((STACK[0x6508] - 886) | 0x12D9) ^ 0x8D2D8BBD))
    v1 = v0;
  else
    v1 = 0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((31 * v1) ^ (STACK[0x6508] + 6608)))
                                          - ((STACK[0x6508] + 54284038) & 0xFCC3ADA3 ^ 0xD2C)))(5121);
}

uint64_t sub_1007211B4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v1 & 0xFFFFFFFFFCC3ADA3));
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2
                                                               + 8
                                                               * (int)((((v1 & 0xFCC3ADA3) + 18498) ^ 0x51D2)
                                                                     + (v1 & 0xFCC3ADA3)))
                                                   - 8))(a1, 2013256049);
}

uint64_t sub_100721208()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] + 6608) ^ (4617 * v0)))
                            - (((STACK[0x6508] - 2734) | 0x1A11) ^ 0x1FD5)))();
}

uint64_t sub_10072124C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - ((v0 - 2669) ^ 0x1FD5)))();
}

uint64_t sub_100721304@<X0>(unint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;

  v3 = (v1 + 1889636364) & 0x8F5E51FF;
  STACK[0xDC00] = a1;
  LODWORD(STACK[0xBCE0]) = v2;
  v4 = v2 == ((v1 + 1373511424) & 0xAE21CDAF) - 1926395938;
  v5 = *(_QWORD *)(STACK[0x6AD8] + 8 * ((41 * v4) ^ v1));
  LOBYTE(STACK[0xBC27]) = v4;
  return ((uint64_t (*)(void))(v5 - (v3 ^ 0x1E1)))();
}

uint64_t sub_1007213A8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = STACK[0x7070];
  STACK[0x9F28] = STACK[0x7070] + 256;
  *(_DWORD *)(v1 + 256) = -1926392729;
  *(_QWORD *)(v1 + 264) = 0x603CE14A0A8FADE1;
  *(_DWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 288) = -1926392729;
  *(_DWORD *)(v1 + 292) = -1926392729;
  *(_QWORD *)(v1 + 296) = 0;
  *(_DWORD *)(v1 + 304) = -1926392729;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 328) = 0x603CE14A0A8FADE1;
  *(_QWORD *)(v1 + 336) = 0;
  *(_DWORD *)(v1 + 344) = 0;
  *(_QWORD *)(v1 + 352) = 0;
  *(_DWORD *)(v1 + 360) = -1926392729;
  *(_QWORD *)(v1 + 368) = 0;
  *(_QWORD *)(v1 + 376) = 0x603CE14A0A8FADE1;
  *(_DWORD *)(v1 + 392) = -1926392729;
  *(_QWORD *)(v1 + 400) = 0x603CE14A0A8FADE1;
  *(_QWORD *)(v1 + 384) = 0;
  v2 = STACK[0x6AD8];
  STACK[0xD1B0] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12;
  return (*(uint64_t (**)(void))(v2 + 8 * (int)((v0 ^ 0xAD0) + v0)))();
}

uint64_t sub_100721488()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  unint64_t v3;

  v0 = STACK[0x6508] + 1626;
  v1 = STACK[0x6508] - 2441;
  v2 = STACK[0x9F28];
  *(_DWORD *)(v2 + 168) = -1926392729;
  *(_QWORD *)(v2 + 176) = 0;
  *(_DWORD *)(v2 + 184) = -1926392729;
  *(_QWORD *)(v2 + 192) = 0;
  *(_DWORD *)(v2 + 200) = -1926392729;
  *(_QWORD *)(v2 + 208) = 0;
  *(_DWORD *)(v2 + 216) = -1926392729;
  *(_DWORD *)v2 = STACK[0x8860];
  *(_QWORD *)(v2 + 8) = STACK[0x7838];
  *(_DWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = STACK[0x6EB0];
  *(_DWORD *)(v2 + 32) = STACK[0x853C];
  *(_DWORD *)(v2 + 36) = -1926392729;
  *(_QWORD *)(v2 + 40) = STACK[0xB190];
  *(_DWORD *)(v2 + 48) = STACK[0xA4C4];
  *(_QWORD *)(v2 + 56) = STACK[0xDC00];
  v3 = STACK[0x6AD8];
  STACK[0xA6C8] = v0 - 5848 + *(_QWORD *)(STACK[0x6AD8] + 8 * v1);
  return (*(uint64_t (**)(void))(v3 + 8 * (v1 ^ 0x244D)))();
}

uint64_t sub_100721558()
{
  unint64_t v0;
  uint64_t v1;

  v0 = STACK[0x6508];
  v1 = STACK[0x6508] - 3729;
  STACK[0xB3F0] = *(_QWORD *)(STACK[0x9F28] + 96);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v0 + 3939)) - v1 + 481))();
}

uint64_t sub_10072159C@<X0>(int a1@<W8>)
{
  unint64_t v1;
  int v2;
  int v3;

  STACK[0x70F8] = v1;
  LODWORD(STACK[0x81BC]) = v3;
  LODWORD(STACK[0x771C]) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((19433 * LOBYTE(STACK[0xBC27])) ^ v2))
                            - ((((v2 - 155424780) & 0x94397FF) + 3749) ^ ((v2 - 405) | 0x1026u))))();
}

uint64_t sub_100721614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v2) - 4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * ((13369 * ((((_DWORD)v2 - 364488800) & 0x15B9BEEF ^ 0x72D085D4) + (_DWORD)v2 == 885067789)) ^ (v2 + 4575)))
                                                                                                - 4))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_1007216A4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((6138
                                               * (v0 == ((STACK[0x6508] - 509584511) & 0x1E5F95ED ^ 0x8D2D9582))) ^ (STACK[0x6508] - 3729)))
                            - 8))();
}

uint64_t sub_1007216FC@<X0>(unsigned int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((4719 * (LODWORD(STACK[0x81BC]) == ((43 * (a1 ^ 0x187)) ^ 0x8D2D8411))) ^ a1))
                            - 8))();
}

uint64_t sub_100721760()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x7D40] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x158F)) - (v0 ^ 0x72CLL)))();
}

uint64_t sub_1007217B8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((STACK[0x6508] - 3729) ^ (16413 * (v0 == -1926392729))))
                            - ((STACK[0x6508] - 3729) ^ 0x1EDLL)))();
}

uint64_t sub_1007217F8(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;

  v3 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v2) - 8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * (v2 + 4563))
                                                                                                - 4))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_100721880()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((23356 * (STACK[0xB3F0] != 0)) ^ (v0 - 3764))) - 12))();
}

uint64_t sub_1007218B4()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 3652)) - 4))(v1);
}

uint64_t sub_1007218CC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((((STACK[0x6508] - 4142) | 0x3081) ^ 0x30E7) * v0) ^ (STACK[0x6508] + 8275)))
                            - 12))();
}

uint64_t sub_100721914()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((LODWORD(STACK[0x86A8]) == -1926392721) * (98 * (v0 ^ 0x30E2) + 24289)) ^ v0))
                            - ((v0 + 295652869) & 0xEE608DFDLL)
                            + 3264))();
}

uint64_t sub_100721990()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((v0 & 0xEE608DFD) + 1141))
                            - (((v0 & 0xEE608DFD) + 3062) | 0x620)
                            + 7902))();
}

uint64_t sub_1007219D4()
{
  int v0;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8
                                                      * (int)((((STACK[0x6508] - 2912) ^ 0x53ED) * v0) ^ (STACK[0x6508] + 8275)))
                                          - 12))(5121);
}

uint64_t sub_100721A10()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v0 + 6547) ^ 0x101E) + v0)) - 12))();
}

uint64_t sub_100721A5C()
{
  int v0;

  STACK[0x9230] = 0x603CE14A0A8FADE1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 4462)) - 4))();
}

uint64_t sub_100721A9C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = STACK[0x6508];
  v3 = STACK[0x6508] + 17644;
  STACK[0xB328] = v1;
  v4 = STACK[0x6AD8];
  STACK[0x9EB8] = v3 - 21862 + *(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v2 - 887));
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * ((int)v2 + 346)) - 8))(a1, 2013256049);
}

uint64_t sub_100721B04()
{
  int v0;
  unint64_t v1;
  uint64_t v2;

  v1 = STACK[0x6508];
  v2 = STACK[0x6508] - 926;
  STACK[0x9230] = STACK[0xB328];
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((v1 + 4462) ^ (762 * v0))) - v2 + 3284))();
}

uint64_t sub_100721B54()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 1129)) - 4))();
}

uint64_t sub_100721BA4()
{
  int v0;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8
                                                      * (int)((((STACK[0x6508] - 828) ^ 0xEE7) * v0) ^ (STACK[0x6508] + 4462)))
                                          - 4))(5121);
}

uint64_t sub_100721BEC(uint64_t a1)
{
  int v1;
  unint64_t v2;

  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 12;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (v1 - 20684 + 6 * (v1 ^ 0x301))) - 8))(a1, 2013256049);
}

uint64_t sub_100721C40()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)(((STACK[0x6508] - 3200) * v0) ^ (STACK[0x6508] + 4462)))
                            - 4))();
}

uint64_t sub_100721C70(uint64_t a1)
{
  int v1;
  unint64_t v2;

  v1 = STACK[0x6508] - 855;
  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (v1 ^ 0x1CCF))
                                                   - ((v1 + 18499) ^ 0x556ALL)))(a1, 2013256049);
}

uint64_t sub_100721CC4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] + 4462) ^ (30697 * v0)))
                            - 31 * (STACK[0x6508] ^ 0x101D)
                            + 3313))();
}

uint64_t sub_100721D08()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 1100)) - ((v0 - 1475054855) & 0x57EB9EF3) + 7902))();
}

uint64_t sub_100721D64()
{
  int v0;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8
                                                      * (int)(((((STACK[0x6508] - 4070) | 0xC4A) + 25831) * v0) ^ (STACK[0x6508] + 4462)))
                                          - 4))(5121);
}

uint64_t sub_100721DB8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (int)(v1 ^ 0x1D0A))
                                                   - ((3643 * (v1 ^ 0xCDC)) ^ 0x556ALL)))(a1, 2013256049);
}

uint64_t sub_100721E0C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] + 4462) ^ (18405 * v0)))
                            - ((STACK[0x6508] + 4074) | 0x184)
                            + 8672))();
}

uint64_t sub_100721E50()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4))();
}

uint64_t sub_100721F0C@<X0>(unint64_t a1@<X8>)
{
  int v1;

  STACK[0xB378] = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((21381
                                          * ((((LODWORD(STACK[0xCB64]) ^ (((v1 + 2023004041) & 0x876B7F35) - 2077966574))
                                             + 2077956537) ^ ((LODWORD(STACK[0xCB64]) ^ 0xCF0566F9) + 821729543) ^ ((LODWORD(STACK[0xCB64]) ^ 0xC60C14D9) + 972286759))
                                           - 1926392734 < 0xFFFFFFFB)) ^ (v1 + 9496)))
                            - 12))();
}

uint64_t sub_100721FD8(uint64_t a1)
{
  int v1;
  int v2;
  unint64_t v3;

  v2 = v1 - 840;
  v3 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v2) - 4;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * (v2 ^ 0x1CFE))
                                                   - (((v2 + 14034) | 0x1162u) ^ 0x556ALL)))(a1, 2013256049);
}

uint64_t sub_100722038()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] + 9496) ^ ((2 * v0) | (16 * v0))))
                            - ((STACK[0x6508] + 17643 - 11816) ^ STACK[0x6508] ^ 0x3743)))();
}

uint64_t sub_100722080()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((4 * (LODWORD(STACK[0xCE5C]) != -1926392729)) | (8
                                                                                          * (LODWORD(STACK[0xCE5C]) != -1926392729)) | v0))
                            - (((v0 ^ 0x7254u) + 3673) ^ 0x358ALL)))();
}

uint64_t sub_1007220D4@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((25899
                                          * ((((a1 ^ 0x3F724D05) - 1064455429) ^ ((a1 ^ 0x9CD5B5F3) + 1663715853) ^ ((a1 ^ 0x2E8A5C0D ^ (v1 - 1416871152) & 0x5473B7FD) - 780823697))
                                           - 1926392858 >= ((v1 - 1416871152) ^ 0x547387E1u))) ^ v1))
                            - 12))();
}

uint64_t sub_100722194@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;

  v2 = ((uint64_t (*)(_QWORD))STACK[0x5510])((4 * a1) ^ 0x34B641EA ^ (v1 + 1624362083) & 0x9F2E1376);
  STACK[0x6E70] = v2;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((1298 * (v2 == 0)) ^ v1)) - 12))(5121);
}

uint64_t sub_100722210@<X0>(unsigned int a1@<W8>)
{
  int v1;
  int v2;
  unsigned int v3;
  _BOOL4 v4;
  _BOOL4 v5;

  LODWORD(STACK[0x9410]) = a1;
  v3 = (((LODWORD(STACK[0xCE5C]) ^ 0x7541B6E9) - 1967240937) ^ ((LODWORD(STACK[0xCE5C]) ^ 0x1120AC37) - 287353911) ^ (((v2 + 1476775685) & 0xA7FA2DB7 ^ LODWORD(STACK[0xCE5C]) ^ 0xE94C838A) + 380858695))
     + 1950357579;
  v4 = v3 < 0xE71283E4;
  v5 = a1 - 418216988 < v3;
  if (a1 > 0x18ED7C1B != v4)
    v5 = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((31750 * (v1 & v5)) ^ (v2 + 9496))) - 12))();
}

uint64_t sub_100722314(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 4;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8
                                                                    * (int)(((10929 * (v1 ^ 0xD31)) ^ 0x51FF) + v1))
                                                   - 8))(a1, 2013256049);
}

uint64_t sub_100722368()
{
  int v0;
  int v1;
  _BOOL4 v3;

  v3 = v0 == -1926392729
    && (((LODWORD(STACK[0xCB64]) ^ 0x91C0AC20) + ((v1 - 5823) ^ 0x6E3F4396)) ^ ((v1 ^ 0x2A0A)
                                                                              - 742530366
                                                                              + (LODWORD(STACK[0xCB64]) ^ 0x2C420FFF)) ^ ((LODWORD(STACK[0xCB64]) ^ 0x30AF37B8) - 816789432))
     - 1926392735 < 0xFFFFFFFA;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((4292 * v3) ^ v1)) - 8))();
}

uint64_t sub_10072241C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1
                                                               + 8
                                                               * (int)(v0 ^ 0x162 ^ (7565 * ((_DWORD)v0 != 613451848))))
                                                   - 8))(5121, 2013256049);
}

uint64_t sub_100722488()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 8230)) - 12))();
}

uint64_t sub_1007224B8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)(((STACK[0x6508] ^ 0x71E1) * v0) ^ (STACK[0x6508] + 5823)))
                            - 8))();
}

uint64_t sub_1007224F4()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((4 * (LODWORD(STACK[0x9FE8]) == -1926392729)) | (16
                                                                                               * (LODWORD(STACK[0x9FE8]) == -1926392729)) | STACK[0x6508] ^ 0x3757))
                            - (((STACK[0x6508] ^ 0x3757) - 197088547) & 0xBBF3E77)
                            + 4206))();
}

uint64_t sub_100722560()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v0 - 6723) ^ 0x37D ^ (v0 - 2111))) - 4))();
}

uint64_t sub_10072259C()
{
  int v0;
  _BOOL4 v2;

  v2 = (((LODWORD(STACK[0xCB64]) ^ 0x8BE72F57) + 1947783337) ^ ((LODWORD(STACK[0xCB64]) ^ 0x11F5A67A) - 301311610) ^ ((LODWORD(STACK[0xCB64]) ^ ((v0 ^ 0x17F) + 390007873)) - 390012234))
     - 1926392736 < 0xFFFFFFF9
    && LODWORD(STACK[0x73B4]) == -1926392728;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((8774 * v2) ^ (v0 - 907))) - 4))();
}

uint64_t sub_100722654@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((a1 ^ 0x2D0D) * (v1 == -1926392729)) ^ a1))
                            - ((a1 - 964) ^ 0xD4DLL)))();
}

uint64_t sub_1007226A0()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (v0 + 1163))
                                                   - ((10929 * (v0 ^ 0xD47u)) ^ 0x556ALL)))(5121, 2013256049);
}

uint64_t sub_1007226F8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] + 133) ^ (498 * (v0 ^ 1))))
                            - (((STACK[0x6508] + 4490) | 0x815) ^ 0x2A1DLL)))();
}

uint64_t sub_10072273C()
{
  int v0;
  int v1;

  LODWORD(STACK[0x6CFC]) = v0;
  LOBYTE(STACK[0xC1C3]) = 0;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (v1 + 2703)))();
}

uint64_t sub_100722778()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((LODWORD(STACK[0x860C]) == -1926392729) * ((v0 - 6559) ^ 0x1023)) ^ v0))
                            - 12))();
}

uint64_t sub_1007227C8()
{
  int v0;

  LODWORD(STACK[0x6CFC]) = -1926392729;
  LOBYTE(STACK[0xC1C3]) = 1;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (v0 + 13676)))();
}

uint64_t sub_100722800()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 6796 + (v0 ^ 0x1209))) - 4))();
}

uint64_t sub_100722840()
{
  int v0;
  int v1;
  _BOOL4 v2;

  LODWORD(STACK[0x6CFC]) = v0;
  v2 = v0 == -1926392729;
  LOBYTE(STACK[0xC1C3]) = v2;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((24295 * v2) ^ (v1 + 2703))))();
}

uint64_t sub_1007228A4()
{
  int v0;
  unint64_t v1;
  unint64_t v2;

  v1 = STACK[0x7070];
  STACK[0x7CD0] = STACK[0x7070] + 480;
  *(_DWORD *)(v1 + 480) = -1926392729;
  *(_QWORD *)(v1 + 488) = 0x603CE14A0A8FADE1;
  *(_DWORD *)(v1 + 496) = 0;
  *(_QWORD *)(v1 + 504) = 0;
  *(_DWORD *)(v1 + 512) = -1926392729;
  *(_DWORD *)(v1 + 516) = -1926392729;
  *(_QWORD *)(v1 + 520) = 0;
  *(_DWORD *)(v1 + 528) = -1926392729;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_QWORD *)(v1 + 552) = 0x603CE14A0A8FADE1;
  *(_QWORD *)(v1 + 560) = 0;
  *(_DWORD *)(v1 + 568) = 0;
  *(_QWORD *)(v1 + 576) = 0;
  *(_DWORD *)(v1 + 584) = -1926392729;
  *(_QWORD *)(v1 + 592) = 0;
  *(_QWORD *)(v1 + 600) = 0x603CE14A0A8FADE1;
  *(_DWORD *)(v1 + 616) = -1926392729;
  *(_QWORD *)(v1 + 624) = 0x603CE14A0A8FADE1;
  *(_QWORD *)(v1 + 608) = 0;
  v2 = STACK[0x6AD8];
  STACK[0xD1B0] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 990)) - 4;
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((v0 - 990) ^ 0x1E7A)))(5121);
}

uint64_t sub_100722988()
{
  int v0;
  int v1;
  unint64_t v2;
  int v3;
  unint64_t v4;

  v0 = STACK[0x6508] + 1626;
  v1 = STACK[0x6508] - 2457;
  v2 = STACK[0x7CD0];
  *(_DWORD *)(v2 + 168) = -1926392729;
  *(_DWORD *)v2 = STACK[0x8860];
  *(_QWORD *)(v2 + 8) = STACK[0x9230];
  *(_DWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = STACK[0x9D50];
  v3 = STACK[0x73B4];
  *(_DWORD *)(v2 + 32) = STACK[0xC8E4];
  *(_DWORD *)(v2 + 36) = v3;
  *(_QWORD *)(v2 + 40) = STACK[0xCEC0];
  *(_DWORD *)(v2 + 48) = STACK[0xB3C0];
  *(_QWORD *)(v2 + 56) = STACK[0xB378];
  *(_QWORD *)(v2 + 176) = STACK[0x6E70];
  *(_DWORD *)(v2 + 184) = STACK[0xCE5C];
  *(_QWORD *)(v2 + 192) = STACK[0x95F8];
  *(_DWORD *)(v2 + 200) = STACK[0x9FE8];
  *(_QWORD *)(v2 + 208) = STACK[0xC4D0];
  *(_DWORD *)(v2 + 216) = STACK[0x860C];
  v4 = STACK[0x6AD8];
  STACK[0xA6C8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 12;
  return (*(uint64_t (**)(void))(v4 + 8 * (v0 + v1 + 1267)))();
}

uint64_t sub_100722AA4()
{
  int v0;

  v0 = STACK[0x6508] + 2703;
  STACK[0xCDC0] = *(_QWORD *)(STACK[0x7CD0] + 96);
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * v0))();
}

uint64_t sub_100722AD4@<X0>(unint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  LODWORD(STACK[0xB988]) = v3;
  LODWORD(STACK[0x6FA0]) = v1;
  STACK[0xA468] = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((LOBYTE(STACK[0xC1C3]) * ((v2 + 99573129) & 0xFA1093FF ^ 0x1A84)) ^ (v2 - 3706)))
                            - 12))();
}

uint64_t sub_100722B54(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;

  v3 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v2) - 4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * (v2 ^ 0x1247))
                                                                                                - (((v2 + 1546) | 0x1060u) ^ 0x186DLL)))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_100722BB4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((((STACK[0x6508] - 3706) ^ 0x4D64) * (v0 == -1926392729)) ^ (STACK[0x6508] - 3706)))
                            - 12))();
}

uint64_t sub_100722BF0@<X0>(unsigned int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((LODWORD(STACK[0xB988]) == -1926392729) * ((a1 + 3706) ^ 0x4824)) ^ a1))
                            - (a1 ^ 0x1F0)))();
}

uint64_t sub_100722C54()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x7D40] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((int)v0 + (int)v0 - 1841 + 2944)) - 4))();
}

uint64_t sub_100722CA0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((STACK[0x6508] - 3706) ^ (13661 * (v0 == -1926392729))))
                            - (STACK[0x6508]
                             - 3706)
                            + 496))();
}

uint64_t sub_100722CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(STACK[0x6AD8] + 8 * (a3 ^ 0x1244));
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a3) - 12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3
                                                                                                - ((a3 + 5677) | 0x40u)
                                                                                                + 6245))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_100722D6C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((44 * (STACK[0xCDC0] == 0)) ^ (v0 + 8422))) - 12))();
}

uint64_t sub_100722DA4()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 8442)) - 12))(v1);
}

uint64_t sub_100722DC0()
{
  int v0;

  return (*(uint64_t (**)(unint64_t))(STACK[0x6AD8]
                                                     + 8 * ((32659 * (STACK[0x6E70] != 0)) ^ (v0 + 2925))))(STACK[0x6E70]);
}

uint64_t sub_100722DE8()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 3686)) - 12))(v1);
}

uint64_t sub_100722E00()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((((STACK[0x6508] - 2362) ^ 0x57BE) * v0) ^ (STACK[0x6508] - 3704)))
                            - 12))();
}

uint64_t sub_100722E34()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((LODWORD(STACK[0xCB64]) == -1926392730) * (((v0 + 1533) ^ 0x1D4F) + 5497)) ^ v0))
                            - 4))();
}

uint64_t sub_100722E90@<X0>(int a1@<W8>)
{
  unint64_t v1;

  LODWORD(STACK[0x8100]) = -1926392729;
  STACK[0x8880] = 0;
  STACK[0xBC18] = STACK[0x9D08];
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (a1 + 1175))
                                                   - ((a1 + 18473) ^ 0x556ALL)))(5121, 2013256049);
}

uint64_t sub_100722F10()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] + 7671) ^ (19762 * v0)))
                            - ((STACK[0x6508] - 925) ^ 0xCD5)))();
}

uint64_t sub_100722F58()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v0 ^ 0x8B1) + v0)) - 4))();
}

uint64_t sub_100722FA0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((((STACK[0x6508] - 630481707) & 0x25945FFE) + 25993) * v0) ^ (STACK[0x6508] + 7671)))
                            - 12))();
}

uint64_t sub_100723004()
{
  unsigned int v0;
  unint64_t v1;

  STACK[0x6CB0] = 0;
  LODWORD(STACK[0x8FCC]) = -1926392729;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x49F8 ^ (v0 + 18456))) - 8))(5121, 2013256049);
}

uint64_t sub_10072306C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] + 12697) ^ ((4 * v0) | (16 * v0))))
                            - ((STACK[0x6508] + 128363688) & 0xF8594FFD)
                            + 3344))();
}

uint64_t sub_1007230B4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((LODWORD(STACK[0x8FCC]) == -1926392721) * (((v0 - 16878) | 0xC9A) + 3909)) | v0))
                            - 1678 * (v0 ^ 0x420Du)
                            + 3344))();
}

uint64_t sub_100723120()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (v0 ^ 0x1DFA ^ (13270 * ((v0 ^ 0x400D695 ^ v0 ^ 0x1259u) >= 0xBF00E5C5))))
                            - 4))();
}

uint64_t sub_100723188()
{
  int v0;
  int v1;

  LODWORD(STACK[0xDC08]) = v1;
  LOBYTE(STACK[0xDC0F]) = 0;
  STACK[0xBBA0] = 0x603CE14A0A8FADE1;
  LODWORD(STACK[0x88E4]) = -1926392729;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - (v0 + 858) + 4206))();
}

uint64_t sub_1007231E4()
{
  int v0;
  int v1;
  int v2;
  int v3;

  v2 = (STACK[0x6508] + 464776457) & 0xE44C07BE;
  v3 = STACK[0x6508] + 11036;
  LODWORD(STACK[0xDC08]) = v1;
  LOBYTE(STACK[0xDC0F]) = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v2 - 1258) * v0) ^ v3)) - 4))();
}

uint64_t sub_100723238()
{
  int v0;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x16F3))
                                          - 167 * (v0 ^ 0x511u)
                                          + 7837))(5121);
}

uint64_t sub_100723294()
{
  unint64_t v0;

  v0 = STACK[0x6508];
  STACK[0xBBA0] = 0x603CE14A0A8FADE1;
  LODWORD(STACK[0x88E4]) = -1926392729;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v0 - 858)) - 8))();
}

uint64_t sub_1007232E4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  int v3;

  v1 = STACK[0x4B08] ^ 0x1D6A;
  v2 = STACK[0x6508];
  v3 = LOBYTE(STACK[0xDC0F]);
  STACK[0xBBA0] = v0;
  LODWORD(STACK[0x88E4]) = -1926392729;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((v3 * (v1 + 13053)) ^ (v2 - 858))) - 8))();
}

uint64_t sub_100723354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a2) - 8;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (int)(a2 ^ 0x1CCC))
                                                   - (a2 + 18502)
                                                   + 21850))(a1, 2013256049);
}

uint64_t sub_1007233A4()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((v1 == -1926392729) * (((v0 + 1299098934) & 0xB2914F53) + 6958)) ^ (v0 - 886)))
                            - 4))();
}

uint64_t sub_100723400()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((LODWORD(STACK[0x88E4]) == -1926392761) * ((v0 ^ 0x1D76) + 22548)) ^ v0))
                            - 4))();
}

uint64_t sub_100723454()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x1C41)) - (((v0 + 4066) | 0x200u) ^ 0x1EE6)))();
}

uint64_t sub_100723494()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 7671)) - 12))();
}

uint64_t sub_1007234BC()
{
  int v0;
  unint64_t v1;
  int v2;

  STACK[0x9B88] = v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((7479 * (v2 == -1926392729)) ^ (v0 - 3652)))
                            - (v0 ^ 0x264Eu)
                            + 13876))();
}

uint64_t sub_100723518()
{
  unint64_t v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  BOOL v5;
  int v6;

  v2 = STACK[0x8880];
  STACK[0xCBE8] = STACK[0x8880];
  LODWORD(STACK[0xBD3C]) = STACK[0x8100];
  STACK[0x8B60] = STACK[0xBC18];
  v3 = STACK[0xC768];
  v4 = (char *)&STACK[0x10000] + STACK[0xC768];
  STACK[0xC9A8] = (unint64_t)(v4 + 0x3A8834BBB3077A40);
  STACK[0x9D00] = (unint64_t)(v4 + 16);
  STACK[0xA9D8] = (unint64_t)(v4 + 32);
  STACK[0xC768] = v3 + 432;
  STACK[0x84F0] = 0x55058F428EADAA34;
  LOWORD(STACK[0xB85E]) = -16107;
  STACK[0x9118] = v0;
  STACK[0x7DC0] = 0;
  LODWORD(STACK[0xB1B4]) = 0;
  STACK[0x8E80] = 0;
  LODWORD(STACK[0xB8E4]) = -1926392729;
  if (v2)
    v5 = v0 == 0x603CE14A0A8FADE1;
  else
    v5 = 1;
  v6 = !v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v6 * ((v1 - 9666) ^ 0x180C)) ^ v1))
                            - (v1 ^ 0x3F7Au)
                            + 2366))();
}

uint64_t sub_100723664()
{
  uint64_t v0;
  unint64_t v1;

  LODWORD(STACK[0xA78C]) = -1926392729;
  v1 = STACK[0x6AD8];
  STACK[0xA700] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((int)v0 + 3655))
                            - (((_DWORD)v0 - 2051479507) & 0x7A476FBF ^ 0x612BLL)))();
}

uint64_t sub_1007236D0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((((STACK[0x6508] - 557) ^ 0x385B) * v0) ^ (STACK[0x6508] - 256)))
                            - 4))();
}

uint64_t sub_100723708()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((17288
                                          * ((unsigned __int16)((((LOWORD(STACK[0xB85E]) ^ 0x4420) - 17440) ^ ((LOWORD(STACK[0xB85E]) ^ 0x421C) - 16924) ^ (((v0 + 557) ^ 0x28A1) + (LOWORD(STACK[0xB85E]) ^ 0xC729)))
                                                              + ((v0 - 2361) ^ 0xC400)) < 0xFFFBu)) ^ v0))
                            - 12))();
}

uint64_t sub_100723798()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0xA188] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * ((((v0 + 2416) | 0x1020) - 2782) ^ v0)) - 4))(5121);
}

uint64_t sub_100723800()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  unint64_t v3;
  uint64_t v4;

  v2 = STACK[0x2740];
  v3 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (LODWORD(STACK[0x2740]) + 25521275)) - 4;
  LODWORD(STACK[0xEE20]) = v2 + 1668;
  LODWORD(STACK[0xEE50]) = v2;
  STACK[0xEE30] = v1;
  STACK[0xEE58] = 2368574567;
  LODWORD(STACK[0xEE60]) = v2 ^ 0x47;
  LODWORD(STACK[0xEE64]) = 0;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857
                          * (((((v0 - 240) | 0x4827D540) ^ 0xFFFFFFFE) - (~(v0 - 240) | 0xB7D82ABF)) ^ 0x8A4AF5E6)
                          + STACK[0x6508];
  v4 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v0 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * SLODWORD(STACK[0x1D354])) - 8))(v4);
}

uint64_t sub_1007238E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  unint64_t v6;

  v4 = (STACK[0x6508] - 1258) | 0x41;
  v5 = STACK[0x6508] - 2520;
  v6 = STACK[0x6AD8];
  STACK[0xC458] = *(_QWORD *)(STACK[0x6AD8] + 8 * v5) - 4;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8 * ((15100 * (v5 == -13737935)) ^ ((v4 ^ 0x47E) + v5))) - 12))(STACK[0x47E8], a2, a3, a4, 92, 146, 93, 74);
}

uint64_t sub_100723984()
{
  uint64_t v0;
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = STACK[0x6508];
  v3 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 40)) - 4;
  LODWORD(STACK[0xEE20]) = v2 + 10348388;
  LODWORD(STACK[0xEE50]) = v2 + 10348923;
  STACK[0xEE30] = v1;
  STACK[0xEE58] = 2368574567;
  LODWORD(STACK[0xEE60]) = v2 + 10348829;
  LODWORD(STACK[0xEE64]) = 0;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((((2 * (v0 - 240)) | 0xE066E260) - (v0 - 240) - 1882419504) ^ 0x4DA1AE69)
                          + v2;
  v4 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v0 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * SLODWORD(STACK[0x1D354])) - 12))(v4);
}

uint64_t sub_100723A70()
{
  int v0;
  uint64_t v1;

  v0 = STACK[0x6508] - 1518;
  v1 = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 10549));
  STACK[0xCA98] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 1519));
  return ((uint64_t (*)(void))(v1 - ((v0 | 0x1024u) ^ 0x1AA8)))();
}

uint64_t sub_100723AEC()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = STACK[0x6AD8];
  v4 = STACK[0x2DB0];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * STACK[0x2DA8]) - 4;
  LODWORD(STACK[0xEE20]) = STACK[0x2D84];
  LODWORD(STACK[0xEE50]) = v4;
  STACK[0xEE30] = 2368574567;
  STACK[0xEE58] = v0;
  LODWORD(STACK[0xEE60]) = v4 ^ 0x7C;
  LODWORD(STACK[0xEE64]) = 0;
  *(_QWORD *)(v1 + 792) = &STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857
                          * ((((v2 - 240) | 0xDB290F22) - (v2 - 240) + ((v2 - 240) & 0x24D6F0D8)) ^ 0xE6BBD07B)
                          + STACK[0x6508];
  v5 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v2 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * SLODWORD(STACK[0x1D354])) - 12))(v5);
}

uint64_t sub_100723BCC()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((19808 * (LODWORD(STACK[0xB1B4]) == 16)) ^ (STACK[0x6508] - 256)))
                            - 4))();
}

uint64_t sub_100723C1C()
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                                                          + 8
                                                                                          * SLODWORD(STACK[0x1EDC]))
                                                                              - 8))(1082145801, 1777000756, 1877930486, 4093107836, 4194037566);
}

uint64_t sub_100723C74()
{
  int v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;

  v2 = STACK[0x6508];
  v3 = STACK[0x6AD8];
  v4 = STACK[0x6508] - 1442831507;
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 1442829407) ^ 0xAA002C89)) - 4;
  LODWORD(STACK[0xEE20]) = v4;
  LODWORD(STACK[0xEE50]) = v2 - 1442829407;
  STACK[0xEE30] = 0;
  STACK[0xEE58] = v0 == -1911187014;
  LODWORD(STACK[0xEE60]) = (v2 - 1442829407) ^ 0x82;
  LODWORD(STACK[0xEE64]) = 0;
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857
                          * ((-1070814480 - ((v1 - 240) | 0xC02CAAF0) + ((v1 - 240) | 0x3FD3550F)) ^ 0x2418A56)
                          + v2;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v5 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v1 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * SLODWORD(STACK[0x1D354])) - 4))(v5);
}

uint64_t sub_100723D78()
{
  unint64_t v0;

  v0 = STACK[0x6AD8];
  STACK[0x7F28] = ((STACK[0x6508] + 59) | 0xA00)
                - 6837
                + *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 2656));
  return (*(uint64_t (**)(void))(v0 + 8 * SLODWORD(STACK[0x19E0])))();
}

uint64_t sub_100723DE4()
{
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * SLODWORD(STACK[0x2CEC])))();
}

uint64_t sub_100723DF4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((7 * LODWORD(STACK[0x2CE4]) - 7718) * (v0 < 1926417619)) ^ LODWORD(STACK[0x2CE8])))
                            - ((1237 * (STACK[0x6508] ^ 0x1066)) ^ 0x4D54)))();
}

uint64_t sub_100723E64()
{
  int v0;
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 | (2 * (v3 >= v2 - 92))))
                            - ((v0 + 897626796) & (v1 - 62))
                            + 16340))();
}

uint64_t sub_100723EAC@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((((((a1 ^ 0x3FBE) * v2 - 102) | 0x66) - 4165) * (v3 == v1)) ^ a1)))();
}

uint64_t sub_100723EE8()
{
  int v0;

  LODWORD(STACK[0xA78C]) = -1926392733;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 256)) - 4))();
}

uint64_t sub_100723F20@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((125 * (v1 >= ((a1 - 8521) | 0x1016) + 1926413406)) ^ a1))
                            - 8))();
}

uint64_t sub_100723F64@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * ((((2 * (a1 + 7731)) ^ 0x6FCE ^ (a1 + 16545)) * (v1 == 1926417620)) ^ (a1 + 7731))))();
}

uint64_t sub_100723FA8()
{
  int v0;

  LODWORD(STACK[0xA78C]) = -1926392732;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 12390)) - 4))();
}

uint64_t sub_100723FE4()
{
  int v0;
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (int)((v0 + 808) ^ 0x8D2DABBB ^ (24907
                                                               * ((((v0 + 1926397751) ^ (((v1 - (v0 + 808)) | (v0 + 808 - v1)) >> 31)) & 1) == 0)))))();
}

uint64_t sub_100724034()
{
  int v0;

  LODWORD(STACK[0xA78C]) = -1926392730;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 557)) - 12))();
}

uint64_t sub_10072406C()
{
  int v0;

  LODWORD(STACK[0xA78C]) = -1926392729;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 557)) - 12))();
}

uint64_t sub_100724098()
{
  int v0;

  LODWORD(STACK[0xA78C]) = -1926392731;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 557)) - 12))();
}

uint64_t sub_1007240CC@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  if (v2 != v1 - 1926396943)
    a1 = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((21352 * a1) ^ (v1 - 675))) - 8))();
}

uint64_t sub_100724108()
{
  int v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0xA188] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * (v0 ^ 0xD77 ^ ((v0 - 1157) | 0x1E20))) - 4))(5121);
}

uint64_t sub_100724170()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((STACK[0x6508] + 4051) * (v0 == -1926392729)) ^ (STACK[0x6508] - 2547)))
                            - 8))();
}

uint64_t sub_1007241A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v5;

  v5 = STACK[0x6AD8];
  STACK[0xC458] = 53 * (v4 ^ 0x6BAu) + *(_QWORD *)(STACK[0x6AD8] + 8 * v4) - 3029;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 8 * (v4 + 4046)) - 12))(STACK[0x47E8], a2, a3, a4, 92, 146, 93, 74);
}

uint64_t sub_100724220()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  LODWORD(STACK[0xCB3C]) = v1;
  v2 = *(unsigned __int8 *)(STACK[0x84F0] - 0x55058F428EADA764);
  v3 = STACK[0x2700];
  v4 = STACK[0x6508];
  v5 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 40)) - 4;
  LODWORD(STACK[0xEE20]) = v3 + 276;
  LODWORD(STACK[0xEE50]) = v3;
  STACK[0xEE30] = v2;
  STACK[0xEE58] = 0;
  LODWORD(STACK[0xEE60]) = v3 - 5;
  LODWORD(STACK[0xEE64]) = 0;
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((((v0 - 240) | 0xF5425F34) - ((v0 - 240) & 0xF5425F34)) ^ 0xC8D0806D)
                          + v4;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v6 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v0 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5 + 8 * SLODWORD(STACK[0x1D354])) - 8))(v6);
}

uint64_t sub_100724304()
{
  unint64_t v0;
  int v1;
  unint64_t v2;

  v0 = STACK[0x6508];
  v1 = STACK[0x6508] - 2166;
  v2 = STACK[0x6AD8];
  STACK[0xB058] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 3801)) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((v1 | 0x120) ^ 0x1C4B) + (int)v0 - 3801)) - 12))();
}

uint64_t sub_100724378()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = STACK[0x2B70];
  v3 = STACK[0x6508];
  v4 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 6)) - 4;
  LODWORD(STACK[0xEE20]) = v2 ^ 0xD7;
  LODWORD(STACK[0xEE50]) = STACK[0x2B6C];
  LODWORD(STACK[0xEE60]) = 0;
  LODWORD(STACK[0xEE64]) = v2;
  STACK[0xEE30] = 2368574567;
  STACK[0xEE58] = v1;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((((v0 - 240) | 0xDA6717D6) - ((v0 - 240) & 0xDA6717D6)) ^ 0xE7F5C88F)
                          + v3;
  v5 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v0 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * SLODWORD(STACK[0x1D354])) - 8))(v5);
}

uint64_t sub_100724444()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((STACK[0x6508] - 322) ^ ((LODWORD(STACK[0xB8E4]) != -1926392713) << 6)))
                            - 8))();
}

uint64_t sub_100724480()
{
  int v0;

  v0 = STACK[0x6508] - 675;
  LODWORD(STACK[0xA78C]) = -1926392734;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8))();
}

uint64_t sub_1007244C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = STACK[0x6508];
  v3 = LODWORD(STACK[0xCB3C]);
  v4 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * ((int)(STACK[0x6508] - 267363057) ^ 0x1FFFFFFFF0107D1BLL)) - 4;
  LODWORD(STACK[0xEE20]) = (v2 - 267363057) ^ 0xDAF;
  LODWORD(STACK[0xEE50]) = v2 - 267363057;
  STACK[0xEE30] = 2368574567;
  STACK[0xEE58] = v3;
  LODWORD(STACK[0xEE60]) = (v2 - 267363057) ^ 0xF;
  LODWORD(STACK[0xEE64]) = 0;
  *(_QWORD *)(v0 + 792) = &STACK[0xEE18];
  *(_DWORD *)(v0 + 784) = -299994601
                        - 1705718857 * ((v1 - 1022693659 - 2 * ((v1 - 240) & 0xC30AEFD5)) ^ 0xFE98308C)
                        + v2;
  v5 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v1 - 240);
  return (*(uint64_t (**)(uint64_t))(v4 + 8 * *(int *)(v0 + 788)))(v5);
}

uint64_t sub_1007245A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;

  v2 = STACK[0x6508] + 18492;
  v3 = STACK[0x6508] - 3747;
  v4 = STACK[0x6AD8];
  STACK[0xACF8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v3);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * (v3 ^ 0x2630)) - (v2 ^ 0x58BE)))(1930690922, a2, 205);
}

uint64_t sub_100724634()
{
  int v0;
  int v1;
  unint64_t v2;

  v0 = STACK[0x6508] + 8087;
  v1 = STACK[0x6508] - 1560;
  v2 = STACK[0x6AD8];
  STACK[0xCDD0] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (v0 + v1 - 5606)) - 8))(7845, 3613388764, 0x3032385379A144E6, 4294959566, 26130, 1152, 11940, 26);
}

uint64_t sub_1007246D4()
{
  unint64_t v0;
  unint64_t v1;

  v0 = STACK[0x6508];
  v1 = STACK[0xA9D8];
  *(_QWORD *)v1 = STACK[0xCBE8];
  *(_DWORD *)(v1 + 8) = STACK[0xBD3C];
  *(_QWORD *)(v1 + 16) = STACK[0xC9A8];
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((28403 * ((((_DWORD)v0 - 1000) ^ 0x4029C597) == 1927962778)) ^ LODWORD(STACK[0x2F2C])))
                            - 8))();
}

uint64_t sub_100724770()
{
  unsigned int v0;
  uint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = STACK[0x6508];
  LODWORD(STACK[0xA1E4]) = v2;
  v4 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)((v3 + 1258827106) ^ 0x4B082D46)) - 4;
  LODWORD(STACK[0xEE20]) = v3 + 1258824525;
  LODWORD(STACK[0xEE50]) = v3 + 1258827106;
  STACK[0xEE30] = 2368574567;
  STACK[0xEE58] = v2;
  STACK[0xEE60] = ((_DWORD)v3 + 1258827106) ^ v0;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857
                          * (((((v1 - 240) | 0xB6570AD0) ^ 0xFFFFFFFE) - (~(v1 - 240) | 0x49A8F52F)) ^ 0x743A2A76)
                          + v3;
  v5 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v1 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * SLODWORD(STACK[0x1D354])) - 8))(v5);
}

uint64_t sub_100724870()
{
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 3018)) - 12))(37814272);
}

uint64_t sub_1007248B8()
{
  int v0;
  int v1;
  int v2;

  v1 = STACK[0x6508] - 675;
  if (v0 == -1926392729)
    v2 = -1926392735;
  else
    v2 = -1926392736;
  LODWORD(STACK[0xA78C]) = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 8))();
}

uint64_t sub_100724908()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((19223 * (STACK[0x7DC0] != 0)) ^ (v0 + 6399))))();
}

uint64_t sub_100724950()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return (*(uint64_t (**)(uint64_t))(STACK[0x6AD8] + 8 * v0))(v1);
}

uint64_t sub_100724968()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((28738 * (STACK[0x8E80] != 0)) ^ (v0 + 9666))) - 4))();
}

uint64_t sub_10072499C()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4))(v1);
}

uint64_t sub_1007249B8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unint64_t v4;

  LODWORD(STACK[0xCE7C]) = v3;
  STACK[0xC768] -= 432;
  v4 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(v2 - 3719)) - 8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * (int)((v2 - 3719) ^ 0x5EC ^ (6075 * (((v2 - 3719) ^ 0x27AC7DBD) < 0x48638CFD))))
                                                                                                - (v2 ^ 0x1072)))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_100724A6C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((12312
                                               * (v0 == ((STACK[0x6508] - 1993544901) & 0x76D3065E)
                                                      - 1926393257)) | (STACK[0x6508] - 3696)))
                            - 4))();
}

uint64_t sub_100724AC4@<X0>(unsigned int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((8072 * (LODWORD(STACK[0xCE7C]) == 301 * (a1 ^ 0x21E) - 1926396943)) ^ a1))
                            - (((a1 ^ 0x21E) + 436) ^ 0x1CELL)))();
}

uint64_t sub_100724B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(STACK[0x6AD8] + 8 * (a3 + 4598));
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a3) - 12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3
                                                                                                - (a3 ^ 0x19ABu)
                                                                                                + 6245))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_100724B98()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 3704) ^ (22064 * v0)))
                            - ((STACK[0x6508] - 331527815) & 0x13C2A612)
                            - 10))();
}

uint64_t sub_100724BE0()
{
  unsigned int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((8001
                                          * (((((LODWORD(STACK[0xCB64]) + 1926392731) ^ v0) & v0) >> ~__clz((LODWORD(STACK[0xCB64]) + 1926392731) ^ v0 | (((v0 + 321) | 0xC04) - 3398))) & 1)) ^ (v0 + 508)))
                            - (((v0 + 4116) | 0x60) ^ 0x107ALL)))();
}

uint64_t sub_100724C6C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  LODWORD(STACK[0x9B20]) = -1926392729;
  STACK[0xADA8] = 0;
  STACK[0xA030] = STACK[0x9D08];
  LODWORD(STACK[0xB3E4]) = -1926392729;
  STACK[0x8D28] = 0;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (a1 + 1161))
                                                   - (a1 + 18459)
                                                   + 21850))(5121, 2013256049);
}

uint64_t sub_100724D04()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] + 8954) ^ (v0 | (8 * v0))))
                            - ((STACK[0x6508] - 272905083) & 0x10442FC5)
                            + 3261))();
}

uint64_t sub_100724D44()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 1152))
                            - ((59 * (v0 ^ 0xC47u)) ^ 0x1EE6)))();
}

uint64_t sub_100724D98()
{
  unint64_t v0;

  v0 = STACK[0x6508];
  STACK[0xB7B8] = 0x603CE14A0A8FADE1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v0 - 3711)) - 8))();
}

uint64_t sub_100724DD4()
{
  int v0;
  int v1;

  if (LODWORD(STACK[0xCB64]) == (LODWORD(STACK[0x4B08]) ^ 0x8D2D8413))
    v1 = v0;
  else
    v1 = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((4182 * v1) ^ (STACK[0x6508] + 6670))) - 4))();
}

uint64_t sub_100724E3C()
{
  uint64_t v0;
  unint64_t v1;

  STACK[0xAA88] = 0;
  LODWORD(STACK[0xA434]) = -1926392729;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = (v0 + 18471) - 21862 + *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * ((int)v0 + 1173)) - 8))(5121, 2013256049);
}

uint64_t sub_100724EB8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((STACK[0x6508] + 4510 + STACK[0x6508] + 19313 - 31272) * (v0 ^ 1)) ^ (STACK[0x6508] + 4433)))
                            - 4))();
}

uint64_t sub_100724EFC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((1276 * (LODWORD(STACK[0xA434]) == v0 - 1926401445)) ^ v0))
                            - ((v0 + 14803) ^ 0x5BE3)))();
}

uint64_t sub_100724F5C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (v0 ^ 0xC5 ^ (7538 * ((v0 - 281198197) > 0x685A095B))))
                            - (v0 + 4588)
                            + 7902))();
}

uint64_t sub_100724FD8@<X0>(int a1@<W8>)
{
  int v1;

  LODWORD(STACK[0xDC10]) = v1;
  LOBYTE(STACK[0xDC17]) = 0;
  STACK[0x9028] = 0x603CE14A0A8FADE1;
  LODWORD(STACK[0x6C60]) = -1926392729;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * a1))();
}

uint64_t sub_10072503C()
{
  int v0;
  int v1;
  unint64_t v2;
  uint64_t v3;

  v2 = STACK[0x6508];
  v3 = STACK[0x6508] - 2875;
  LODWORD(STACK[0xDC10]) = v1;
  LOBYTE(STACK[0xDC17]) = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((v2 + 8436) ^ (219 * v0))) - (v3 ^ 0x537)))();
}

uint64_t sub_100725080()
{
  int v0;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 3730)) - 47 * (v0 ^ 0x59Cu) + 7837))(5121);
}

uint64_t sub_1007250E0()
{
  int v0;

  v0 = STACK[0x6508] + 19313;
  STACK[0x9028] = 0x603CE14A0A8FADE1;
  LODWORD(STACK[0x6C60]) = -1926392729;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * v0))();
}

uint64_t sub_100725130()
{
  unint64_t v0;
  unint64_t v1;
  int v2;

  v1 = STACK[0x6508];
  v2 = LOBYTE(STACK[0xDC17]);
  STACK[0x9028] = v0;
  LODWORD(STACK[0x6C60]) = -1926392729;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (int)((v2 * (v1 - 2551)) ^ (v1 + 19313))))();
}

uint64_t sub_100725190(uint64_t a1)
{
  int v1;
  int v2;
  unint64_t v3;

  v1 = STACK[0x6508] - 834;
  v2 = STACK[0x6508] + 17644;
  v3 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * (v1 ^ 0x4986 ^ v2)) - 8))(a1, 2013256049);
}

uint64_t sub_1007251E0()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((23046 * (v1 == ((v0 - 1118835357) & 0x42B00EF7 ^ 0x8D2D98B6))) ^ (v0 - 933)))
                            - 12))();
}

uint64_t sub_100725240()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((LODWORD(STACK[0x6C60]) == -1926392761) * ((v0 + 933) ^ 0x2163)) ^ v0))
                            - 12))();
}

uint64_t sub_100725290()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 1136)) - 4))();
}

uint64_t sub_1007252D4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 6670)) - 4))();
}

uint64_t sub_1007252F8()
{
  unint64_t v0;
  int v1;
  int v2;

  STACK[0xB7B8] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((v2 == -1926392729) * (353 * (v1 ^ 0x1050) + 6461)) ^ (v1 - 3711)))
                            - 8))();
}

uint64_t sub_100725350()
{
  unint64_t v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  BOOL v5;
  int v6;

  STACK[0xB1C8] = 0;
  v2 = STACK[0xADA8];
  STACK[0x85A0] = STACK[0xADA8];
  LODWORD(STACK[0x8234]) = STACK[0x9B20];
  STACK[0xCF40] = STACK[0xA030];
  LODWORD(STACK[0x99B4]) = STACK[0x8860];
  v3 = STACK[0xC768];
  v4 = (char *)&STACK[0x10000] + STACK[0xC768];
  STACK[0x9598] = (unint64_t)(v4 + 0x3A8834BBB3077A40);
  STACK[0x8738] = (unint64_t)(v4 + 16);
  STACK[0x6CC0] = (unint64_t)(v4 + 32);
  STACK[0xC768] = v3 + 432;
  STACK[0x7DD8] = 0x55058F428EADAA34;
  LOWORD(STACK[0x8DF6]) = -16107;
  LODWORD(STACK[0xAB24]) = -1926392729;
  STACK[0xB078] = v0;
  STACK[0x8990] = 0;
  LODWORD(STACK[0x8104]) = 0;
  if (v2)
    v5 = v0 == 0x603CE14A0A8FADE1;
  else
    v5 = 1;
  v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((((((v1 - 13284) ^ v6) & 1) == 0) * (((v1 - 13284) ^ 0x9BE) + 29826)) ^ v1))
                            - 12))();
}

uint64_t sub_1007254D4()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0xA700] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(((v0 ^ 0x6813) - 17018) ^ v0)) - 4))();
}

uint64_t sub_10072551C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)(((STACK[0x2C38] ^ 0x20DC) * v0) ^ (STACK[0x6508] - 338)))
                            - 12))();
}

uint64_t sub_100725550()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((15287
                                               * ((unsigned __int16)((((LOWORD(STACK[0x8DF6]) ^ 0xB6BD) + 18755) ^ ((LOWORD(STACK[0x8DF6]) ^ 0xADE8) + 21016) ^ ((STACK[0x2C38] ^ 0x23D7) + (LOWORD(STACK[0x8DF6]) ^ 0xDA40)))
                                                                   - 16112) < (((unsigned __int16)STACK[0x2C38] - 26272) & 0x70FE ^ 0xEF8Du))) ^ STACK[0x2C38]))
                            - 4))();
}

uint64_t sub_100725600()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0xA188] = ((v0 + 6582) ^ 0xFFFFFFFFFFFFE15CLL) + *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * ((int)v0 + 4584)) - 4))(5121);
}

uint64_t sub_100725670()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = STACK[0x6508];
  STACK[0x6AC0] = v1;
  v3 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)((v2 + 709159157) ^ 0x2A44E9F5)) - 4;
  LODWORD(STACK[0xEE20]) = (v2 + 709159157) ^ 0xDFB;
  LODWORD(STACK[0xEE50]) = v2 + 709159157;
  STACK[0xEE30] = 2368574567;
  STACK[0xEE58] = v1;
  LODWORD(STACK[0xEE60]) = (v2 + 709159157) ^ 0x7F;
  LODWORD(STACK[0xEE64]) = 0;
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((((v0 - 240) | 0x7FB3959D) + (~(v0 - 240) | 0x804C6A62)) ^ 0x42214AC5)
                          + v2;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v4 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v0 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * SLODWORD(STACK[0x1D354])) - 12))(v4);
}

uint64_t sub_10072574C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = STACK[0x6508];
  v5 = STACK[0x6508] ^ 0x1BBB;
  v6 = STACK[0x6AD8];
  STACK[0xC458] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 2654)) - 4;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8 * (int)((v4 - 2654) ^ 0x1049)) - v5 + 3009))(STACK[0x47E8], a2, a3, a4, 92, 146, 93, 74);
}

uint64_t sub_1007257CC()
{
  unint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6508];
  STACK[0x6AC0] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v1 - 754)) - 12))();
}

uint64_t sub_100725824()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v10 = v1;
  v11 = STACK[0x6508];
  v12 = STACK[0x6AD8];
  *(_QWORD *)(v3 + 952) = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 1107081345) ^ 0xBE03476B)) - 4;
  *(_DWORD *)(v3 + 960) = v11 - 1107081130;
  *(_DWORD *)(v3 + 1008) = v11 - 1107081345;
  *(_QWORD *)(v3 + 976) = v10;
  *(_QWORD *)(v3 + 1016) = v6;
  *(_QWORD *)(v3 + 1024) = ((_DWORD)v11 - 1107081345) ^ 0x1Du;
  *(_QWORD *)(v2 + 792) = v8;
  *(_DWORD *)(v2 + 784) = v4 - (((v7 | 0x10A12339) - v7 + (v7 & 0xEF5EDCC0)) ^ 0x2D33FC60) * v5 + v11;
  v13 = v0(v9 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v12 + 8 * *(int *)(v2 + 788)) - 12))(v13);
}

uint64_t sub_1007258D4()
{
  unint64_t v0;
  unint64_t v1;

  v0 = STACK[0x6508];
  v1 = STACK[0x6AD8];
  STACK[0xCA98] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 1550)) - 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8 * ((19184 * (LODWORD(STACK[0x1ECC]) > 0xE193E41E)) ^ ((int)v0 + 10549)))
                            - 4))();
}

uint64_t sub_100725960()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * STACK[0x2D98]) - 4;
  LODWORD(STACK[0xEE20]) = STACK[0x2D88];
  LODWORD(STACK[0xEE50]) = STACK[0x2DA0];
  STACK[0xEE30] = v0;
  STACK[0xEE58] = 2368574567;
  LODWORD(STACK[0xEE60]) = STACK[0x2D8C];
  LODWORD(STACK[0xEE64]) = 0;
  *(_QWORD *)(v1 + 792) = &STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((~((v2 - 240) | 0xE878238E) + ((v2 - 240) & 0xE878238E)) ^ 0x2A150328)
                          + STACK[0x6508];
  v4 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v2 - 240);
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * SLODWORD(STACK[0x1D354])))(v4);
}

uint64_t sub_100725A38()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((25478 * (LODWORD(STACK[0x8104]) == 16)) ^ (STACK[0x6508] - 2655)))
                            - 4))();
}

uint64_t sub_100725A88()
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                                                          + 8
                                                                                          * (int)(STACK[0x6508] + 17516))
                                                                              - 8))(1082145801, 1777000756, 1877930486, 4093107836, 4194037566);
}

uint64_t sub_100725AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v5 = STACK[0x6508];
  v6 = STACK[0x6AD8];
  v7 = (unint64_t *)((char *)&STACK[0x10000] + STACK[0xC768]);
  STACK[0xC768] += 16;
  *v7 = 0;
  v7[1] = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8 * SLODWORD(STACK[0x2704]))
                                                                                       - ((((_DWORD)v5 - 3776) | 0x5249u) ^ 0x53F7)))(a1, a2, a3, a4, a5, 1);
}

uint64_t sub_100725B4C(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v11;

  v11 = ((*(unsigned __int8 *)(v9 + v7) - *(unsigned __int8 *)(v8 + v7)) ^ a5)
      + a3
      + (a4 & (2 * (*(unsigned __int8 *)(v9 + v7) - *(unsigned __int8 *)(v8 + v7)))) != a2
     || v7 == 15;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((1984 * (a6 & ~((v6 + 1) ^ v11))) ^ v6)) - 8))();
}

uint64_t sub_100725BA0@<X0>(uint64_t (*a1)(void)@<X8>)
{
  unint64_t v1;

  STACK[0xC768] = v1;
  return a1();
}

uint64_t sub_100725C88()
{
  int v0;
  uint64_t v1;
  int v2;
  unint64_t v3;
  uint64_t v4;

  v2 = STACK[0x1EE8];
  v3 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * SLODWORD(STACK[0x1EE0])) - 4;
  LODWORD(STACK[0xEE20]) = STACK[0x1EE4];
  LODWORD(STACK[0xEE50]) = v2;
  STACK[0xEE30] = v0 == -1911187014;
  STACK[0xEE58] = 0;
  LODWORD(STACK[0xEE60]) = v2 ^ 0x3E9;
  LODWORD(STACK[0xEE64]) = 0;
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * (((v1 - 240) & 0x73017CF1 | ~((v1 - 240) | 0x73017CF1)) ^ 0xB16C5C57)
                          + STACK[0x6508];
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v4 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v1 - 240);
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * SLODWORD(STACK[0x1D354])))(v4);
}

uint64_t sub_100725D6C()
{
  int v0;
  unint64_t v1;

  v0 = STACK[0x6508] - 2655;
  v1 = STACK[0x6AD8];
  STACK[0x7F28] = ((STACK[0x6508] + 2090) | 0x211) - 6837 + *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return (*(uint64_t (**)(void))(v1 + 8 * (v0 ^ 0x36AF)))();
}

uint64_t sub_100725DE0@<X0>(char a1@<W8>)
{
  int v1;
  int v2;

  LOBYTE(STACK[0xCF5F]) = a1;
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * ((58 * (v2 == (v1 ^ 0x17EC) - 1926401754 + (v1 ^ 0x6AE) + 1231)) ^ (v1 + 1117))))();
}

uint64_t sub_100725E3C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v0 + 2793) ^ v0)) - 12))();
}

uint64_t sub_100725E70()
{
  __int16 v0;
  uint64_t v1;
  int v2;
  unint64_t v3;

  v1 = (STACK[0x6508] + 1418) | 0x8A0;
  v2 = STACK[0x6508] - 2920;
  LOWORD(STACK[0x8DF6]) = v0;
  v3 = STACK[0x6AD8];
  STACK[0xA188] = *(_QWORD *)(STACK[0x6AD8] + 8 * v2) - 8;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * (v2 ^ 0x13DC)) - v1 + 7836))(5121);
}

uint64_t sub_100725EF4()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * ((((LODWORD(STACK[0x4B08]) ^ 0x16DF) - 1689) * (v0 == -1926392729)) | LODWORD(STACK[0x2764]))))();
}

uint64_t sub_100725F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;

  v5 = STACK[0x6AD8];
  STACK[0xC458] = *(_QWORD *)(STACK[0x6AD8] + 8 * v4);
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 8 * ((84 * ((v4 ^ 0x470BAE29) < 0x8DECF993)) ^ ((int)v4 + 3932))) - 12))(STACK[0x47E8], a2, a3, a4, 92, 146, 93, 74);
}

uint64_t sub_100725FC0()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = STACK[0x6508];
  LODWORD(STACK[0xA70C]) = v1;
  v3 = *(unsigned __int8 *)(STACK[0x7DD8] - 0x55058F428EADA764);
  v4 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)((v2 - 731536066) ^ 0xD465A52A)) - 4;
  LODWORD(STACK[0xEE20]) = (v2 - 731536066) ^ 0x100F;
  LODWORD(STACK[0xEE50]) = v2 - 731536066;
  STACK[0xEE30] = 0;
  STACK[0xEE58] = v3;
  LODWORD(STACK[0xEE60]) = (v2 - 731536066) ^ 0x25;
  LODWORD(STACK[0xEE64]) = 0;
  LODWORD(STACK[0x1D350]) = -299994601 - 1705718857 * ((v0 - 240) ^ 0x3D92DF59) + v2;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v5 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v0 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * SLODWORD(STACK[0x1D354])) - 4))(v5);
}

uint64_t sub_1007260B0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 103) ^ (441 * (v0 == 0))))
                            - ((STACK[0x6508] - 3803) ^ 0x19FLL)))();
}

uint64_t sub_1007260EC()
{
  int v0;
  unint64_t v1;

  STACK[0x9EC8] = 0;
  LODWORD(STACK[0x7E3C]) = -1926392729;
  v1 = STACK[0x6AD8];
  STACK[0xB058] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 + v0 + 1925 + 3149)) - 12))();
}

uint64_t sub_100726168()
{
  uint64_t v0;
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = STACK[0x6508];
  v3 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 70026596) ^ 0xFBD39B6E)) - 4;
  LODWORD(STACK[0xEE20]) = v2 - 70026551;
  LODWORD(STACK[0xEE50]) = (v2 - 70026596) ^ 0xE23;
  LODWORD(STACK[0xEE60]) = 0;
  LODWORD(STACK[0xEE64]) = v2 - 70026596;
  STACK[0xEE30] = v1;
  STACK[0xEE58] = 2368574567;
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857
                          * ((((v0 - 240) | 0x848A3081) - (v0 - 240) + ((v0 - 240) & 0x7B75CF78)) ^ 0xB918EFD8)
                          + v2;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v4 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v0 - 240);
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * SLODWORD(STACK[0x1D354])))(v4);
}

uint64_t sub_100726244()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((24988
                                          * (LODWORD(STACK[0x7E3C]) != (STACK[0x6508] ^ 0x4324)
                                                                     - 1926414043)) ^ LODWORD(STACK[0x2270])))
                            - 12))();
}

uint64_t sub_1007262A4()
{
  uint64_t v0;
  int v1;
  unint64_t v2;

  v0 = STACK[0x6508] ^ 0x59F6;
  v1 = STACK[0x6508] - 751;
  STACK[0xA380] = STACK[0x9598];
  STACK[0xC9F8] = 0;
  LODWORD(STACK[0xC75C]) = -1926392729;
  v2 = STACK[0x6AD8];
  STACK[0x99F0] = v0 - 18820 + *(_QWORD *)(STACK[0x6AD8] + 8 * v1);
  return (*(uint64_t (**)(void))(v2 + 8 * (v1 ^ 0x14A7)))();
}

uint64_t sub_100726324()
{
  int v0;
  unint64_t v1;

  v0 = STACK[0x6508] - 755;
  v1 = STACK[0x6AD8];
  STACK[0x99F0] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return (*(uint64_t (**)(void))(v1 + 8 * (v0 ^ 0x14A3 ^ (11117 * ((v0 ^ 0xBD8DEC9u) > 0x70545848)))))();
}

uint64_t sub_100726398()
{
  unint64_t v0;
  unint64_t v1;

  v0 = STACK[0x6508];
  v1 = STACK[0x6AD8];
  STACK[0xACB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 1360));
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)((((v0 - 4214) | 0x915) + 3793) ^ (v0 - 1360))) - 4))();
}

uint64_t sub_100726408()
{
  int v0;
  int v1;
  int v2;
  int v3;
  _BOOL4 v4;

  v1 = STACK[0x3204];
  v2 = 2 * LODWORD(STACK[0x3204]);
  v3 = STACK[0x6508] + 8792;
  v4 = v0 == -1926392729;
  LOBYTE(STACK[0x7ABF]) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((((v1 + 2031) ^ v2) * v4) ^ v3)) - 12))();
}

uint64_t sub_100726460()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((28852
                                          * ((((LODWORD(STACK[0xC75C]) ^ 0xB369FD44) + 1284899516) ^ ((LODWORD(STACK[0xC75C]) ^ 0x34295596) - 875124118) ^ (((LODWORD(STACK[0x3204]) - 723) ^ LODWORD(STACK[0xC75C]) ^ 0xA6D398A) + ((2066 * ((LODWORD(STACK[0x3204]) + 10940) ^ 0x32CC)) ^ 0xF592D36F)))
                                           - 1926392745 < 0xFFFFFFF0)) ^ (LODWORD(STACK[0x3204]) + 10940)))
                            - 12))();
}

uint64_t sub_100726520()
{
  int v0;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x16F2)) - 12))(5121);
}

uint64_t sub_100726580()
{
  unsigned int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)v0) - (v0 ^ 0x1EA5)))();
}

uint64_t sub_1007265A0()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_1007267C0@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  int v2;

  v1 = STACK[0x6508];
  v2 = STACK[0x6508] - 2877;
  STACK[0xAF78] = 0x577A204D2088BF93
                * (0x28EA51E36198F7E1
                 * (((a1 ^ 0x716979B5EC1410F0) - 0x22C5790173E1CEELL) ^ ((a1 ^ 0x3501F38242339718)
                                                                         - 0x4644DDA7B9199B06) ^ ((a1 ^ 0x571145585F822617)
                                                                                                  - 0x24546B7DA4A82A09))
                 - 0x61413A837716C965
                 * (*(_QWORD *)(*(_QWORD *)STACK[0x60C0] + (int)(*(_DWORD *)STACK[0x60B8] & 0xDD482EF8)) & 0x7FFFFFFFFFFFFFFFLL ^ 0x6CA39350EB6354B3))
                - 0x72509BAFE2F1C72DLL;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((9162 * (v2 == 1211472694)) ^ ((int)v1 + 3635))) - 12))();
}

uint64_t sub_100726938()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6508];
  *(_QWORD *)STACK[0xA650] = v0 ^ 0x188A0F2F185AB331 ^ *(_QWORD *)(*(_QWORD *)STACK[0x60C0]
                                                                   + (*(_DWORD *)STACK[0x60B8] & 0x6EDDF9D0)) & 0x7FFFFFFFFFFFFFFFLL;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((int)v1 + 4204)))();
}

uint64_t sub_10072699C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;

  v2 = STACK[0x6508];
  v3 = STACK[0x6508] - 612221266;
  v4 = (unint64_t)(*(_QWORD *)(STACK[0x8D18] + 152) - 0x13503ABD638F1238) < 0x984AA6F8;
  v5 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 6)) - 4;
  LODWORD(STACK[0xEE20]) = v3 + 428;
  LODWORD(STACK[0xEE50]) = v3 | 0x1009;
  LODWORD(STACK[0xEE60]) = 0;
  LODWORD(STACK[0xEE64]) = v3;
  STACK[0xEE30] = ((((a1 ^ 0xB476E53FF8277CFFLL) + 0x38CC34E5FCF28F1FLL) ^ ((a1 ^ 0x6C8F2582281A847BLL)
                                                                          - 0x1FCA0BA7D3308865) ^ ((a1 ^ 0xCB800FD22198597BLL) + 0x473ADE08254DAA9BLL))
                 + 0x603CE14AA2DA54D9 < 0x984AA6F8) ^ v4;
  STACK[0xEE58] = 0;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((((v1 - 240) | 0xF5BFA541) - ((v1 - 240) & 0xF5BFA541)) ^ 0xC82D7A18)
                          + v2;
  v6 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v1 - 240);
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * SLODWORD(STACK[0x1D354])))(v6);
}

uint64_t sub_100726B30()
{
  unint64_t v0;
  unint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 598) ^ (5768 * (v1 < v0)))) - 8))();
}

uint64_t sub_100726B70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;

  v2 = STACK[0x6508];
  v3 = STACK[0x6508] - 892364771;
  v4 = (unint64_t)(*(_QWORD *)(STACK[0x8D00] + 152) - 0x13503ABD680DFB0DLL) < 0x93CBBE23;
  v5 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v3 ^ 0x1FFFFFFFCACFB8EFLL)) - 4;
  LODWORD(STACK[0xEE20]) = v3 + 37;
  LODWORD(STACK[0xEE50]) = v2 - 892365041;
  LODWORD(STACK[0xEE60]) = 0;
  LODWORD(STACK[0xEE64]) = v3;
  STACK[0xEE30] = 0;
  STACK[0xEE58] = ((((a1 ^ 0x592ADC1084E9418CLL) - 0x2A6FF2357FC34D92) ^ ((a1 ^ 0x25B7B924E88A7AE3)
                                                                          - 0x56F2970113A076FDLL) ^ ((a1 ^ 0x6FE4AA5B9DC69A90uLL) - 0x1CA1847E66EC968ELL))
                 + 0x603CE14A9E5B6C04 < 0x93CBBE23) ^ v4;
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((((v1 - 240) | 0xA655A3D7) - ((v1 - 240) & 0xA655A3D7)) ^ 0x9BC77C8E)
                          + v2;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v6 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v1 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5 + 8 * SLODWORD(STACK[0x1D354])) - 4))(v6);
}

uint64_t sub_100726D1C()
{
  unint64_t v0;
  unint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 91) ^ (2898 * (v1 < v0)))) - 4))();
}

uint64_t sub_100726D60()
{
  unint64_t v0;
  unint64_t v1;
  int v2;
  int v3;

  v1 = STACK[0x6508];
  v2 = STACK[0x6508] - 814;
  v3 = LOBYTE(STACK[0xDCBF]);
  STACK[0x91D8] = v0;
  LODWORD(STACK[0xCA6C]) = -1926392729;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((v3 * (v1 + 14365)) ^ v2)) - 4))();
}

uint64_t sub_100726DC0@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  unint64_t v2;

  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a2) - 4;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (a2 ^ 0x1C98))
                                                   - ((a2 + 18456) | 2u)
                                                   + 21850))(a1, 2013256049);
}

uint64_t sub_100726E14()
{
  unint64_t v0;
  unint64_t v1;
  int v2;

  v1 = STACK[0x6508];
  v2 = LOBYTE(STACK[0xDD33]);
  STACK[0x8D10] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)(((((v1 + 839126241) & 0xCDFBEFF9) + 20876) * v2) ^ (v1 + 2710)))
                            - 4))();
}

uint64_t sub_100726E74()
{
  uint64_t v0;
  unint64_t v1;

  LODWORD(STACK[0x6EEC]) = -1926392729;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1
                                                               + 8
                                                               * (int)(v0 ^ 0x1C81 ^ (((v0 ^ 0x14780A09) >= 0xEE1513A2)
                                                                                    * ((v0 - 409275883) & 0x186555FB ^ 0x671B))))
                                                   - 8))(5121, 2013256049);
}

uint64_t sub_100726F20@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  v1 = STACK[0x6508];
  STACK[0x6DB8] = 0x964BFA24A4E1F25
                * (0x6EB7D87146621F0FLL
                 * (((a1 ^ 0x883D0AB2D8BE01BBLL) + 0x487DB68DC6BF25BLL) ^ ((a1 ^ 0xB02386E4C14DB656)
                                                                         + 0x3C99573EC59845B8) ^ ((a1 ^ 0x2B674339E8561612)
                                                                                                  - 0x58226D1C137C1A0CLL))
                 + 0x6C2CA5B10218E4ADLL
                 * (*(_QWORD *)(*(_QWORD *)STACK[0x60C0]
                              + ((STACK[0x6508] + 654543210) & *(_DWORD *)STACK[0x60B8])) & 0x7FFFFFFFFFFFFFFFLL ^ 0x22A1C03AACCCB4EFLL))
                - 0x31643CBEDEC03D35;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v1 + 8792)) - 12))();
}

uint64_t sub_10072704C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((194 * ((((v0 + 82) ^ (STACK[0xC9F8] == 0)) & 1) == 0)) | v0))
                            - ((v0 + 48) | 0x22u)
                            + 4210))();
}

uint64_t sub_1007270A0()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 82)) - 4))(v1);
}

uint64_t sub_1007270C4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = 0x75C7218F3ED0083
     * (STACK[0x6DB8]
      + (*(_QWORD *)(*(_QWORD *)STACK[0x60C0] + (*(_DWORD *)STACK[0x60B8] & 0x270399E0)) & 0x7FFFFFFFFFFFFFFFLL ^ 0x22A1C03AACCCB4EFLL)
      + 2 * (*(_QWORD *)(*(_QWORD *)STACK[0x60C0] + (*(_DWORD *)STACK[0x60B8] & 0x270399E0)) ^ 0xDD5E3FC553334B10)
      - 0x2FEC697B1562DABDLL)
     + 0x7F6DAC357E76FB0;
  v4 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * ((a1 + 511542799) ^ 0x1E7D86F9)) - 4;
  LODWORD(STACK[0xEE20]) = a1 + 511542843;
  LODWORD(STACK[0xEE50]) = (a1 + 511542799) ^ 0xFD5;
  LODWORD(STACK[0xEE60]) = 0;
  LODWORD(STACK[0xEE64]) = a1 + 511542799;
  STACK[0xEE30] = 0x296BAEB7967E7FF3;
  STACK[0xEE58] = v3;
  *(_QWORD *)(v1 + 792) = &STACK[0xEE18];
  *(_DWORD *)(v1 + 784) = -299994601
                        - 1705718857 * ((~((v2 - 240) | 0x6AF338DD) + ((v2 - 240) & 0x6AF338DD)) ^ 0xA89E187B)
                        + a1;
  v5 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v2 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * *(int *)(v1 + 788)) - 8))(v5);
}

uint64_t sub_10072723C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  STACK[0xDC18] = STACK[0xAF78];
  v0 = 0x75C7218F3ED0083
     * (STACK[0x6DB8]
      + 0x74F22C5D38159667
      + (*(_QWORD *)(*(_QWORD *)STACK[0x60C0] + (*(_DWORD *)STACK[0x60B8] & 0x270399E0)) & 0x7FFFFFFFFFFFFFFFLL ^ 0xDD5E3FC553334B10));
  v1 = ((v0 & 0xE3E25CFD3E8609CELL) << (STACK[0x2C30] - 61)) & (v0 ^ 0xCBFB1EF9BEB40DEELL) ^ v0 & 0xE3E25CFD3E8609CELL;
  v2 = ((2 * (v0 ^ 0xCBFFAF2B8EBC1CFELL)) ^ 0x503BE7AD60742A60) & (v0 ^ 0xCBFFAF2B8EBC1CFELL) ^ (2
                                                                                                 * (v0 ^ 0xCBFFAF2B8EBC1CFELL)) & 0x281DF3D6B03A1530;
  v3 = v2 ^ 0x28041052900A1510;
  v4 = (v2 ^ 0x201DE38620321020) & (4 * v1) ^ v1;
  v5 = ((4 * v3) ^ 0xA077CF5AC0E854C0) & v3 ^ (4 * v3) & 0x281DF3D6B03A1530;
  v6 = (v5 ^ 0x2015C35280281410) & (16 * v4) ^ v4;
  v7 = ((16 * (v5 ^ 0x808308430120130)) ^ 0x81DF3D6B03A15300) & (v5 ^ 0x808308430120130) ^ (16
                                                                                                * (v5 ^ 0x808308430120130)) & 0x281DF3D6B03A1530;
  v8 = (v7 ^ 0x1D314200201100) & (v6 << 8) ^ v6;
  v9 = (((v7 ^ 0x2800C294B01A0430) << 8) ^ 0x1DF3D6B03A153000) & (v7 ^ 0x2800C294B01A0430) ^ ((v7 ^ 0x2800C294B01A0430) << 8) & 0x281DF3D6B03A1500;
  v10 = v8 ^ 0x281DF3D6B03A1530 ^ (v9 ^ 0x811D29030100000) & (v8 << 16);
  v11 = v0 ^ (2
            * ((v10 << 32) & 0x281DF3D600000000 ^ v10 ^ ((v10 << 32) ^ 0x303A153000000000) & (((v9 ^ 0x200C2146802A0530) << 16) & 0x281DF3D600000000 ^ 0x80943C400000000 ^ (((v9 ^ 0x200C2146802A0530) << 16) ^ 0x73D6B03A00000000) & (v9 ^ 0x200C2146802A0530))));
  STACK[0xB860] = (((v11 ^ 0xFFC1965328BFE5A4) + 0x63D00794B06E09C3) ^ ((v11 ^ 0x13EDC90E3F1D1203)
                                                                          - 0x7003A7365833019ALL) ^ ((v11 ^ 0x1FC5C62D4950D409) - 0x7C2BA8152E7EC790))
                - 0x30677187808066FCLL;
  STACK[0x7640] = 0xC27AFEAA03E150FLL;
  LODWORD(STACK[0x95CC]) = 0;
  v12 = ((uint64_t (*)(uint64_t))STACK[0x5510])(20);
  STACK[0x96A8] = v12 + 0xC27AFEAA03E150FLL;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((509 * (v12 == 0)) ^ LODWORD(STACK[0x2844]))) - 4))();
}

uint64_t sub_1007275DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *))(STACK[0x6AD8]
                                                                                           + 8
                                                                                           * (int)(((5 * (STACK[0x2C30] ^ 0x340)) ^ 0x269F)
                                                                                                 + STACK[0x2C30])))(a1, 13084672, 259613445, a4, &STACK[0xDEA4]);
}

uint64_t sub_100727630()
{
  unint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6508];
  STACK[0x8438] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v1 + 2948)) - 4))();
}

uint64_t sub_100727664()
{
  unint64_t v0;
  uint64_t v1;
  int v2;

  v1 = STACK[0x6508] ^ 0x16B0;
  v2 = STACK[0x6508] + 1444597;
  STACK[0x7B98] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((11405 * ((v2 + 1117) < 0x62A298B8)) ^ (v2 - 1448758)))
                            - v1
                            + 1730))();
}

uint64_t sub_1007276D8()
{
  unint64_t v0;
  unint64_t v1;
  int v2;
  int v3;

  v1 = STACK[0x6508];
  v2 = (STACK[0x6508] - 1128) | 0x150;
  v3 = LOBYTE(STACK[0xDD6F]);
  STACK[0xC8A0] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v2 + 18338) * v3) ^ ((int)v1 - 885))) - 12))();
}

uint64_t sub_100727730()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) + (((_DWORD)v0 - 3356) | 0x5520u) - 21862;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (int)(v0 ^ 0x1C8E)) - 8))(5121, 2013256049);
}

uint64_t sub_100727794@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  v1 = STACK[0x6508];
  *(_QWORD *)STACK[0xC7E8] = 0x3B2B85D6199E010FLL
                           * (((a1 ^ 0xFF3588DC50B3182CLL) + 0x738F59065466EBCELL) ^ ((a1 ^ 0x3A024618604C5AE5)
                                                                                    - 0x4947683D9B6656FBLL) ^ (((STACK[0x6508] - 2583) ^ 0x5AF4D071C58F1687) + (a1 ^ 0xD64E01ABC15AE336)))
                           + 0x185C603A903CBECELL;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v1 + 789)) - 4))();
}

uint64_t sub_100727880()
{
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * (int)((LOBYTE(STACK[0xDDA3]) * (STACK[0x6508] - 4199)) ^ (STACK[0x6508] + 734))))();
}

uint64_t sub_1007278B8()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((*(_QWORD *)STACK[0x49B0] == 0)
                                               * ((STACK[0x6508] - 501413516) & 0x1DE2F697 ^ 0x10E1)) ^ (STACK[0x6508] + 10035)))
                            - 12))();
}

uint64_t sub_10072791C@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = STACK[0x6AD8];
  v4 = 2142736129 * ((((v2 - 240) | 0x66DF89CB92DD36DBLL) - ((v2 - 240) & 0x66DF89CB92DD36DBLL)) ^ 0x1BC481C7F185A2D2);
  STACK[0x1D360] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1) ^ v4;
  LODWORD(STACK[0x1D358]) = (v1 + 427180620) ^ v4;
  STACK[0x1D350] = a1;
  v5 = ((uint64_t (*)(uint64_t))STACK[0x5530])(v2 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3
                                                      + 8
                                                      * (v1 ^ 0x2748 ^ (22623
                                                                                    * ((v1 - 1523043647) < 0x47B6DED6))))
                                          - 12))(v5);
}

uint64_t sub_1007279D8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x2C86)) - 12))();
}

uint64_t sub_100727A10()
{
  unint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = (STACK[0x6508] + 28487109) & 0xFE4D77F7;
  v2 = STACK[0x6508] + 3154;
  STACK[0xBE70] = v0;
  LODWORD(STACK[0xB478]) = 0;
  v3 = *(_QWORD *)(STACK[0x6AD8] + 8 * (v2 ^ (476 * (v0 != 0x603CE14A0A8FADE1))));
  STACK[0xCEE0] = 0;
  return ((uint64_t (*)(void))(v3 - (v1 ^ 0x3637)))();
}

uint64_t sub_100727A9C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((*(_QWORD *)STACK[0x4D18] == 0) * (v0 + 12836 + ((v0 - 9779) | 0x90))) ^ v0))
                            - 4))();
}

uint64_t sub_100727AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  int v7;

  v3 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4;
  v4 = (_QWORD *)STACK[0x4D18];
  STACK[0xEE28] = STACK[0x4D18];
  *(_QWORD *)(v1 + 792) = &STACK[0xEE18];
  *(_DWORD *)(v1 + 784) = -299994601
                        - 1705718857
                        * ((((v2 - 240) | 0x2326431E) - (v2 - 240) + ((v2 - 240) & 0xDCD9BCE0)) ^ 0x1EB49C47)
                        + v0
                        - 26;
  v5 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v2 - 240);
  if (*(_DWORD *)(v1 + 788))
    v6 = 1;
  else
    v6 = *v4 == 0;
  v7 = v6;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3
                                                      + 8
                                                      * (int)(v0 ^ 0x2579 ^ ((((((v0 ^ 0x18D1) + 2113) ^ v7) & 1) == 0)
                                                                           * ((2 * (v0 ^ 0x18D1)) ^ 0x1358))))
                                          - 4))(v5);
}

uint64_t sub_100727BD0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = STACK[0x6AD8];
  v5 = *(_QWORD *)(STACK[0x6AD8] + 8 * v1);
  v6 = 2142736129 * ((v3 - 240) ^ 0x7D1B080C63589409);
  *(_QWORD *)(v2 + 784) = a1;
  *(_QWORD *)(v2 + 800) = v5 ^ v6;
  *(_DWORD *)(v2 + 792) = (v1 + 427180620) ^ v6;
  v7 = ((uint64_t (*)(uint64_t))STACK[0x5530])(v3 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * (v1 ^ 0x256B)) - 4))(v7);
}

uint64_t sub_100727C40()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v7;

  v3 = STACK[0x6AD8];
  v4 = 2142736129 * ((((v2 - 240) | 0x4F55C1E8D3D593CALL) - ((v2 - 240) & 0x4F55C1E8D3D593CALL)) ^ 0x324EC9E4B08D07C3);
  *(_QWORD *)(v1 + 800) = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) ^ v4;
  *(_QWORD *)(v1 + 784) = 0;
  *(_DWORD *)(v1 + 792) = (v0 + 427180620) ^ v4;
  v5 = ((uint64_t (*)(uint64_t))STACK[0x5530])(v2 - 240);
  v7 = *(_DWORD *)STACK[0x4D38] == ((v0 - 12) ^ 0xFFFFFFFC) + (v0 ^ 0xF4) && *(_QWORD *)STACK[0x4CD8] != 0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * ((503 * v7) ^ (v0 | 0x275))) - 8))(v5);
}

uint64_t sub_100727D04()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  int32x4_t v41;
  int8x16_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  int32x4_t v45;
  uint16x8_t v46;
  int8x16x4_t v48;

  v2 = *(_DWORD *)(*(_QWORD *)STACK[0x60C0] + (*(_DWORD *)STACK[0x60B8] & 0xBC968BC)) ^ 0xBC968BCu;
  v3 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v2 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v2;
  v4 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v3 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v3;
  v5 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v4 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v4;
  v6 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v5 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v5;
  v7 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v6 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v6;
  v8 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v7 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v7;
  v9 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v8 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v8;
  v10 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v9 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v9;
  STACK[0xF038] = 0;
  LODWORD(v9) = 197748924 * v10;
  v11 = 16777619 * ((197748924 * v10 + 7) ^ (197748924 * v10)) % 7;
  v12 = *(_BYTE *)((unint64_t)&STACK[0xF038] | v11);
  *(_BYTE *)((unint64_t)&STACK[0xF038] | v11) = 0;
  LOBYTE(STACK[0xF03F]) = v12;
  v13 = 16777619 * ((197748924 * v10 + 6) ^ (197748924 * v10)) % 6;
  v14 = *(_BYTE *)((unint64_t)&STACK[0xF038] | v13);
  *(_BYTE *)((unint64_t)&STACK[0xF038] | v13) = STACK[0xF03E];
  LOBYTE(STACK[0xF03E]) = v14;
  v15 = 16777619 * ((197748924 * v10 + 5) ^ (197748924 * v10)) % 5;
  v16 = *(_BYTE *)((unint64_t)&STACK[0xF038] | v15);
  *(_BYTE *)((unint64_t)&STACK[0xF038] | v15) = STACK[0xF03D];
  LOBYTE(STACK[0xF03D]) = v16;
  v17 = STACK[0xF038];
  LOBYTE(STACK[0xF038]) = STACK[0xF03C];
  LOBYTE(STACK[0xF03C]) = v17;
  v18 = 16777619 * ((197748924 * v10 + 3) ^ (197748924 * v10)) % 3;
  v19 = *(_BYTE *)((unint64_t)&STACK[0xF038] | v18);
  *(_BYTE *)((unint64_t)&STACK[0xF038] | v18) = STACK[0xF03B];
  LOBYTE(STACK[0xF03B]) = v19;
  v20 = STACK[0xF039];
  LOBYTE(STACK[0xF03A]) = STACK[0xF038];
  LOWORD(STACK[0xF038]) = v20;
  v21 = (v9 * v9) ^ v9;
  v22 = STACK[0xF03C];
  LODWORD(v9) = (v9 + v9 * v9) ^ v9;
  LODWORD(STACK[0xF038]) = v21 + 16777619 * LODWORD(STACK[0xF038]);
  LODWORD(STACK[0xF03C]) = v9 + 16777619 * v22;
  v23 = STACK[0xF038] ^ v0;
  v24 = 899433627 * (v23 - v21);
  LODWORD(v23) = 899433627 * (HIDWORD(v23) - v9);
  LODWORD(STACK[0xF040]) = v24;
  LODWORD(STACK[0xF044]) = v23;
  LOBYTE(STACK[0xF041]) = v24;
  LOBYTE(STACK[0xF040]) = BYTE2(v24);
  LOBYTE(STACK[0xF042]) = BYTE1(v24);
  v25 = (_BYTE *)((unint64_t)&STACK[0xF040] | v18);
  LOBYTE(v21) = *v25;
  *v25 = HIBYTE(v24);
  LOBYTE(STACK[0xF043]) = v21;
  LOBYTE(v9) = STACK[0xF040];
  LOBYTE(STACK[0xF040]) = v23;
  LOBYTE(STACK[0xF044]) = v9;
  v26 = (_BYTE *)((unint64_t)&STACK[0xF040] | v15);
  LOBYTE(v15) = *(_BYTE *)((unint64_t)&STACK[0xF040] | v15);
  *v26 = BYTE1(v23);
  LOBYTE(STACK[0xF045]) = v15;
  v27 = (_BYTE *)((unint64_t)&STACK[0xF040] | v13);
  LOBYTE(v26) = *v27;
  *v27 = BYTE2(v23);
  LOBYTE(STACK[0xF046]) = (_BYTE)v26;
  v28 = (_BYTE *)((unint64_t)&STACK[0xF040] | v11);
  LOBYTE(v11) = *(_BYTE *)((unint64_t)&STACK[0xF040] | v11);
  *v28 = BYTE3(v23);
  LOBYTE(STACK[0xF047]) = v11;
  v29 = STACK[0xF040];
  v30 = (197748924 * STACK[0xF040]) ^ v10;
  for (i = 1; i != 4; ++i)
  {
    v32 = 8 * i;
    v33 = 8 * (16777619 * ((v30 + (_DWORD)i) ^ v30) % i);
    v34 = *(_QWORD *)(v29 + v33) ^ *(_QWORD *)(v29 + 8 * i);
    *(_QWORD *)(v29 + v32) = v34;
    v35 = *(_QWORD *)(v29 + v33) ^ v34;
    *(_QWORD *)(v29 + v33) = v35;
    *(_QWORD *)(v29 + v32) = *(_QWORD *)(v29 + 8 * i) ^ v35;
  }
  v36 = 0;
  v37 = (__n128)xmmword_1015070D0;
  v38 = (__n128)xmmword_1015070E0;
  v39 = (__n128)xmmword_1015070F0;
  v40 = (__n128)xmmword_101507100;
  v41 = vdupq_n_s32(v30);
  v42 = *(int8x16_t *)&STACK[0x4950];
  do
  {
    v43 = *(uint8x16_t *)(v29 + v36);
    v44 = vmovl_high_u8(v43);
    v45 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v43.i8);
    v46.i64[0] = 0x9B009B009B009BLL;
    v46.i64[1] = 0x9B009B009B009BLL;
    v48.val[1] = veorq_s8(veorq_s8((int8x16_t)vmulq_s32(vaddq_s32((int32x4_t)v39, v41), vsubq_s32((int32x4_t)v39, v41)), (int8x16_t)v41), (int8x16_t)vmull_high_u16((uint16x8_t)v45, v46));
    v48.val[2] = veorq_s8(veorq_s8((int8x16_t)vmulq_s32(vaddq_s32((int32x4_t)v38, v41), vsubq_s32((int32x4_t)v38, v41)), (int8x16_t)v41), (int8x16_t)vmull_u16(*(uint16x4_t *)v44.i8, (uint16x4_t)0x9B009B009B009BLL));
    v48.val[0] = veorq_s8(veorq_s8((int8x16_t)vmulq_s32(vaddq_s32((int32x4_t)v40, v41), vsubq_s32((int32x4_t)v40, v41)), (int8x16_t)v41), (int8x16_t)vmull_u16(*(uint16x4_t *)v45.i8, (uint16x4_t)0x9B009B009B009BLL));
    v48.val[3] = veorq_s8(veorq_s8((int8x16_t)vmulq_s32(vaddq_s32((int32x4_t)v37, v41), vsubq_s32((int32x4_t)v37, v41)), (int8x16_t)v41), (int8x16_t)vmull_high_u16(v44, v46));
    *(int8x16_t *)(v29 + v36) = vqtbl4q_s8(v48, v42);
    v36 += 16;
    v45.i64[0] = 0x1000000010;
    v45.i64[1] = 0x1000000010;
    v40 = (__n128)vaddq_s32((int32x4_t)v40, v45);
    v39 = (__n128)vaddq_s32((int32x4_t)v39, v45);
    v38 = (__n128)vaddq_s32((int32x4_t)v38, v45);
    v37 = (__n128)vaddq_s32((int32x4_t)v37, v45);
  }
  while (v36 != 32);
  *(_QWORD *)STACK[0x4CD8] = v29;
  return ((uint64_t (*)(__n128, __n128, __n128, __n128))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v1 + 641)) - 8))(v37, v38, v39, v40);
}

uint64_t sub_1007280F4()
{
  _DWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  ++*v0;
  v4 = STACK[0x6AD8];
  v5 = *(_QWORD *)(STACK[0x6AD8] + 8 * ((v2 - 2767) ^ 0x1524));
  v6 = 2142736129 * ((v1 - 2 * (v1 & 0x3BB5061F1BBE71A4) + 0x3BB5061F1BBE71A4) ^ 0x46AE0E1378E6E5ADLL);
  LODWORD(STACK[0x1D358]) = (v2 + 427180632) ^ v6;
  STACK[0x1D350] = 0;
  STACK[0x1D360] = v5 ^ v6;
  ((void (*)(uint64_t))STACK[0x5530])(v3 - 240);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8 * (v2 + 2230)))(1111563582, 0x603CE14A0A8FADE1, 8343, 12941, 4294959371, 3183399564, 4961, 13299);
}

uint64_t sub_1007281F8()
{
  unint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6508];
  STACK[0x7240] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v1 + 5345)) - 8))();
}

uint64_t sub_10072821C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((23 * (STACK[0x87F8] == 0)) ^ (v0 + 12504))) - 12))();
}

uint64_t sub_100728250()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 12515)) - 12))(v1);
}

uint64_t sub_10072826C()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (v0 + 1713)))();
}

uint64_t sub_10072828C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((LODWORD(STACK[0xB580]) == -1926392729) * (3 * (v0 ^ 0x10D1) + 12113)) ^ (v0 - 3713)))
                            - 12))();
}

uint64_t sub_1007282D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  unint64_t v3;

  v3 = STACK[0x6AD8];
  STACK[0x6CA8] = (a3 + 5748) - 6261 + *(_QWORD *)(STACK[0x6AD8] + 8 * a3);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * (a3 + 4547))
                                                                                                - 4))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_100728338()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;

  v1 = STACK[0x6508];
  v2 = STACK[0x6508] - 803;
  v3 = LOBYTE(STACK[0xDD3B]);
  STACK[0xC5A0] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((15889 * v3) ^ ((int)v1 - 894))) - v2 + 3407))();
}

uint64_t sub_100728380@<X0>(int a1@<W8>)
{
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1) - 8;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (a1 ^ 0x1C83))
                                                   - (a1 + 18447)
                                                   + 21850))(5121, 2013256049);
}

uint64_t sub_1007283DC()
{
  unint64_t v0;
  int v1;
  int v2;
  uint64_t v3;

  v1 = STACK[0x6508] - 3393;
  v2 = STACK[0x6508] + 3250;
  STACK[0x8CC0] = v0;
  v3 = ((uint64_t (*)(uint64_t))STACK[0x5510])(37);
  STACK[0xA278] = v3;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (((v3 == 0) * (v1 ^ 0x32B)) ^ v2)))();
}

uint64_t sub_100728438()
{
  int v0;
  uint64_t v1;

  v1 = *(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x13EE));
  STACK[0x8CA0] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4;
  return ((uint64_t (*)(void))(v1 - (((v0 + 1231) | 0x31B8u) ^ 0x39B4)))();
}

uint64_t sub_10072847C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = STACK[0x6508];
  STACK[0x7318] = v1;
  v3 = STACK[0x6AD8];
  STACK[0x9EB8] = (((_DWORD)v2 + 1162) | 0x4062u) - 21862 + *(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v2 - 804));
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * ((int)v2 + 346)) - 8))(a1, 2013256049);
}

uint64_t sub_1007284E0()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6508];
  *(_QWORD *)STACK[0xE470] = v0;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((int)v1 + 14602)))();
}

uint64_t sub_100728524(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;

  v2 = (STACK[0x6508] - 2052339967) & 0x7A547DEA;
  v3 = STACK[0x6508] - 721;
  v4 = STACK[0x6AD8];
  v5 = *(_QWORD *)(STACK[0x6AD8] + 8 * v3);
  STACK[0x8A10] = v1;
  STACK[0x9EB8] = v5;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * (v3 ^ 0x1C75)) - v2 + 21850))(a1, 2013256049);
}

uint64_t sub_100728598(uint64_t a1)
{
  unint64_t v1;
  int v2;
  int v3;
  unint64_t v4;

  v2 = STACK[0x6508] - 3958;
  v3 = STACK[0x6508] - 773;
  STACK[0xCAB0] = v1;
  v4 = STACK[0x6AD8];
  STACK[0x9EB8] = ((v2 | 0x5462u) ^ 0xFFFFFFFFFFFFAA9ALL) + *(_QWORD *)(STACK[0x6AD8] + 8 * v3);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * (v3 ^ 0x1CA1)) - 8))(a1, 2013256049);
}

uint64_t sub_100728608(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = STACK[0x6508];
  v3 = STACK[0x6508] + 17644;
  v4 = STACK[0x6AD8];
  v5 = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 730));
  STACK[0x7E98] = v1;
  STACK[0x9EB8] = v5 - 4;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * ((int)v2 + 346)) - v3 + 21850))(a1, 2013256049);
}

uint64_t sub_100728668()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6508];
  *(_QWORD *)STACK[0x94B8] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v1 + 12135)) - 12))();
}

uint64_t sub_10072869C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((27784 * (STACK[0xAE38] != 0)) ^ (v0 + 9548))) - 12))();
}

uint64_t sub_1007286D4()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12))(v1);
}

uint64_t sub_1007286EC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((LODWORD(STACK[0xE2CC]) == -1926392729) * (9 * (v0 ^ 0x1075) - 6)) ^ (v0 + 21132)))
                            - 4))();
}

uint64_t sub_100728738@<X0>(int a1@<W8>)
{
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x81A0] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1);
  return (*(uint64_t (**)(void))(v1 + 8 * (((15 * (a1 ^ 0xD7)) ^ 0x10A3) + a1)))();
}

uint64_t sub_1007287A8@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  v1 = STACK[0x6508];
  *(_QWORD *)STACK[0x9370] = a1 ^ 0x1379CF6FF1A5A1FFLL;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v1 - 3486)) - 4))();
}

uint64_t sub_1007287FC()
{
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 12283)))();
}

uint64_t sub_100728828()
{
  unint64_t v0;
  unint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 598) ^ (5768 * (v0 > v1)))) - 8))();
}

uint64_t sub_100728868()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 598)) - 8))();
}

uint64_t sub_100728890()
{
  unint64_t v0;
  unint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 91) ^ (2898 * (v0 > v1)))) - 4))();
}

uint64_t sub_1007288D4()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 91)) - 4))();
}

uint64_t sub_1007288FC()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 989) ^ 0x2797)) - 8))();
}

uint64_t sub_100728BC0()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 2275)) - 8))();
}

uint64_t sub_100728C24(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v3) - ((v3 - 7649) ^ a3)))();
}

uint64_t sub_100728C54@<X0>(char a1@<W3>, char a2@<W4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v8 = v6 + v7 - 0x3100F0D935DE8D21;
  v9 = 1772489163 * ((1772489163 * (_DWORD)v8) ^ ((1772489163 * v8) >> 16));
  v10 = STACK[0x5120];
  *(_BYTE *)(v8 - 0xC27AFEAA03E150FLL) = HIBYTE(a5) ^ *(_BYTE *)(a3 + (v9 >> 24)) ^ *(_BYTE *)(STACK[0x5120] + (v9 >> 24)) ^ *(_BYTE *)((v9 >> 24) + a4 + 1) ^ (-53 * ((-53 * v8) ^ ((1772489163 * v8) >> 16))) ^ (55 * ((1772489163 * ((1772489163 * (_DWORD)v8) ^ ((1772489163 * v8) >> 16))) >> 24)) ^ 0xCC;
  v11 = 1772489163 * ((1772489163 * (_DWORD)v8 + 1772489163) ^ ((1772489163 * v8 + 1772489163) >> 16));
  *(_BYTE *)(v8 - 0xC27AFEAA03E150ELL) = BYTE6(a5) ^ *(_BYTE *)(a3 + (v11 >> 24)) ^ *(_BYTE *)(v10 + (v11 >> 24)) ^ *(_BYTE *)((v11 >> 24) + a4 + 1) ^ (-53 * ((-53 * v8 - 53) ^ ((1772489163 * v8 + 1772489163) >> 16))) ^ (55 * ((1772489163 * ((1772489163 * (_DWORD)v8 + 1772489163) ^ ((1772489163 * v8 + 1772489163) >> 16))) >> 24)) ^ 0xD3;
  v12 = 1772489163 * ((1772489163 * ((_DWORD)v8 + 2)) ^ ((1772489163 * (v8 + 2)) >> 16));
  *(_BYTE *)(v8 - 0xC27AFEAA03E150DLL) = BYTE5(a5) ^ (-53
                                                    * ((-53 * (v8 + 2)) ^ ((1772489163 * (v8 + 2)) >> 16))) ^ (55 * ((1772489163 * ((1772489163 * ((_DWORD)v8 + 2)) ^ ((1772489163 * (v8 + 2)) >> 16))) >> 24)) ^ *(_BYTE *)(a3 + (v12 >> 24)) ^ *(_BYTE *)(v10 + (v12 >> 24)) ^ *(_BYTE *)((v12 >> 24) + a4 + 1) ^ 0xF5;
  v13 = 1772489163 * ((1772489163 * ((_DWORD)v8 + 3)) ^ ((1772489163 * (v8 + 3)) >> 16));
  *(_BYTE *)(v8 - 0xC27AFEAA03E150CLL) = BYTE4(a5) ^ (-53
                                                    * ((-53 * (v8 + 3)) ^ ((1772489163 * (v8 + 3)) >> 16))) ^ (55 * ((1772489163 * ((1772489163 * ((_DWORD)v8 + 3)) ^ ((1772489163 * (v8 + 3)) >> 16))) >> 24)) ^ *(_BYTE *)(a3 + (v13 >> 24)) ^ *(_BYTE *)(v10 + (v13 >> 24)) ^ *(_BYTE *)((v13 >> 24) + a4 + 1) ^ 0x8A;
  v14 = 1772489163 * ((1772489163 * ((_DWORD)v8 + 4)) ^ ((1772489163 * (v8 + 4)) >> 16));
  *(_BYTE *)(v8 - 0xC27AFEAA03E150BLL) = BYTE3(a5) ^ (-53
                                                    * ((-53 * (v8 + 4)) ^ ((1772489163 * (v8 + 4)) >> 16))) ^ (55 * ((1772489163 * ((1772489163 * ((_DWORD)v8 + 4)) ^ ((1772489163 * (v8 + 4)) >> 16))) >> 24)) ^ *(_BYTE *)(a3 + (v14 >> 24)) ^ *(_BYTE *)(v10 + (v14 >> 24)) ^ *(_BYTE *)((v14 >> 24) + a4 + 1) ^ a2;
  v15 = 1772489163 * ((1772489163 * ((_DWORD)v8 + 5)) ^ ((1772489163 * (v8 + 5)) >> 16));
  *(_BYTE *)(v8 - 0xC27AFEAA03E150ALL) = BYTE2(a5) ^ (-53
                                                    * ((-53 * (v8 + 5)) ^ ((1772489163 * (v8 + 5)) >> 16))) ^ (55 * ((1772489163 * ((1772489163 * ((_DWORD)v8 + 5)) ^ ((1772489163 * (v8 + 5)) >> 16))) >> 24)) ^ *(_BYTE *)(a3 + (v15 >> 24)) ^ *(_BYTE *)(v10 + (v15 >> 24)) ^ *(_BYTE *)((v15 >> 24) + a4 + 1) ^ 0xD0;
  v16 = 1772489163 * ((1772489163 * ((_DWORD)v8 + 6)) ^ ((1772489163 * (v8 + 6)) >> 16));
  *(_BYTE *)(v8 - 0xC27AFEAA03E1509) = ((BYTE1(a5) ^ 0x50) - 2 * ((BYTE1(a5) ^ 0x50) & 0x54 ^ BYTE1(a5) & 4) + 80) ^ (-53 * ((-53 * (v8 + 6)) ^ ((1772489163 * (v8 + 6)) >> 16))) ^ (55 * ((1772489163 * ((1772489163 * ((_DWORD)v8 + 6)) ^ ((1772489163 * (v8 + 6)) >> 16))) >> 24)) ^ *(_BYTE *)(a3 + (v16 >> 24)) ^ *(_BYTE *)(v10 + (v16 >> 24)) ^ *(_BYTE *)((v16 >> 24) + a4 + 1) ^ 0x50;
  v17 = 1772489163 * ((1772489163 * ((_DWORD)v8 + 7)) ^ ((1772489163 * (v8 + 7)) >> 16));
  *(_BYTE *)(v8 - 0xC27AFEAA03E1508) = a5 ^ v17 ^ (55
                                                   * ((1772489163
                                                     * ((1772489163 * ((_DWORD)v8 + 7)) ^ ((1772489163 * (v8 + 7)) >> 16))) >> 24)) ^ *(_BYTE *)(a3 + (v17 >> 24)) ^ *(_BYTE *)(v10 + (v17 >> 24)) ^ *(_BYTE *)((v17 >> 24) + a4 + 1) ^ a1;
  return v5();
}

uint64_t sub_100728F64(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((STACK[0x6508] - 1009) ^ a2 ^ (103
                                                                             * (STACK[0x6508] != -1967646138))))
                            - 8))();
}

uint64_t sub_1007291EC()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * SLODWORD(STACK[0x3184])) - 4);
  STACK[0x7DB0] = (STACK[0x31B4] & 0x79151BFF ^ 0xFFFFFFFFFFFFE651)
                + *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 1056));
  return v0();
}

uint64_t sub_100729254()
{
  uint64_t v0;
  int v1;
  unint64_t v2;

  v0 = (STACK[0x6508] + 194) | 0x2884;
  v1 = STACK[0x6508] - 3359;
  v2 = STACK[0x6AD8];
  STACK[0x8CA0] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v1 ^ 0x138C)) - (v0 ^ 0x39B4)))();
}

uint64_t sub_1007292BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  int v8;
  int v9;
  int v10;

  v8 = STACK[0x6508] + 2042681789;
  v9 = STACK[0x6508] - 1449;
  v10 = STACK[0x6508] + 2287;
  LODWORD(STACK[0x7D08]) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x6AD8] + 8 * ((((v8 - 2042671679) ^ v9) * (v7 == -1926392729)) ^ v10)))(a1, a2, a3, 577628422, 606767441, 1104152011, a7, 3190810030);
}

uint64_t sub_100729340@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (a1 ^ 0x1713)) - 12))();
}

uint64_t sub_10072937C()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * v0))();
}

uint64_t sub_100729388()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (LODWORD(STACK[0x4530]) | (4 * (v0 == -1405852393))))
                            - ((STACK[0x6508] + 2083) | 0x40)
                            + 6349))();
}

uint64_t sub_1007293C8()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 20828))
                            - (STACK[0x6508] ^ 0x1072)))();
}

uint64_t sub_100729404()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (v0 + 5949)))();
}

uint64_t sub_100729420()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_100729624(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((126
                                               * (((v8 - LODWORD(STACK[0x4534])) | (LODWORD(STACK[0x4534]) - v8)) >= 0)) ^ (((1385 * (STACK[0x6508] ^ 0x1074)) ^ a4) + LODWORD(STACK[0x4534]))))
                            - ((STACK[0x6508] - a8) ^ 0x41D02ACCLL)))();
}

uint64_t sub_100729688()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x7B76 ^ (v0 - 1552931036) & 0x5C8FDE7F)) - 4))();
}

uint64_t sub_1007296C8()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (int)((184
                                     * (v0 == (STACK[0x6508] ^ 0x4B7AFE55 ^ STACK[0x2308] & 0xFBF0EF77))) ^ (STACK[0x6508] + 2287))))();
}

uint64_t sub_100729728@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * ((((v1 - 10599) ^ 0x1B90 ^ ((v1 - 9260) | 0x32)) * (a1 == v2)) ^ v1)))();
}

uint64_t sub_100729768()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x6A5A)) - 12))();
}

uint64_t sub_1007297B4()
{
  unsigned int v0;
  int v1;
  int v2;

  LODWORD(STACK[0xDC28]) = v1;
  LODWORD(STACK[0xDC24]) = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)(v0 ^ 0x79C0C5BB ^ (28830 * (v0 >= v0 + 1947341532))))
                            - 8))();
}

uint64_t sub_100729810()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  v2 = (STACK[0x6508] + 2613) | 0x44;
  v3 = STACK[0x6508] + 7810;
  LODWORD(STACK[0xDC28]) = v0;
  LODWORD(STACK[0xDC24]) = v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v3) - v2 + 6887))();
}

uint64_t sub_10072987C()
{
  int v0;
  int v1;
  int v2;
  int v3;

  v3 = STACK[0x6508] + 7954;
  LODWORD(STACK[0xDC28]) = v0;
  LODWORD(STACK[0xDC24]) = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((4 * ((v1 + 346036393) <= LODWORD(STACK[0x95CC]))) | (16 * ((v1 + 346036393) <= LODWORD(STACK[0x95CC]))) | v3))
                            - 8))();
}

uint64_t sub_1007298E8()
{
  uint64_t v0;
  int v1;
  int v2;

  v2 = (STACK[0x6508] + 1115680573) & 0xBD800E5E;
  *(_DWORD *)(v0 + 3756) = v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((17398 * (v1 == (v2 ^ 0xFA7) - 1926393166)) ^ v2))
                            - 12))();
}

uint64_t sub_100729948@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (a1 ^ 0x3740)) - 12))();
}

uint64_t sub_1007299C4()
{
  int v0;
  unint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;

  LODWORD(STACK[0xDC28]) = v0;
  LODWORD(STACK[0xDC24]) = v2;
  v4 = STACK[0x6508];
  v5 = STACK[0x6AD8];
  v6 = (STACK[0x6508] + 952123711) ^ 0xDE4;
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 6)) - 4;
  LODWORD(STACK[0xEE20]) = v4 + 952122361;
  LODWORD(STACK[0xEE50]) = v6;
  LODWORD(STACK[0xEE60]) = 0;
  LODWORD(STACK[0xEE64]) = v4 + 952123711;
  STACK[0xEE30] = 3754749983;
  STACK[0xEE58] = v1;
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((~((v3 - 240) | 0x731F287E) + ((v3 - 240) & 0x731F287E)) ^ 0xB17208D8)
                          + v4;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v7 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v3 - 240);
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * SLODWORD(STACK[0x1D354])))(v7);
}

uint64_t sub_100729AC4(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(((((STACK[0x9078] - 0xC27AFEAA03E150BLL > STACK[0xA2F0] - 0x59251BE96394D035) ^ (STACK[0x6508] - 1)) & 1) * LODWORD(STACK[0x1E58])) ^ (STACK[0x6508] + 3074)))
                                                                                               - 8))(a1, a2, 1772493245, 1772489163, LODWORD(STACK[0x1E60]), 1350237190, 9813);
}

uint64_t sub_100729B98@<X0>(int a1@<W3>, int a2@<W4>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v16 = v5 + v4;
  v17 = v5 - 4215 + 301 * (a2 ^ v7);
  v18 = ((((_DWORD)v5 + (_DWORD)v4 + 3) * a1) ^ (((v5 + v4 + 3) * a1) >> 16)) * a1;
  v19 = ((((_DWORD)a4 + (_DWORD)v17) * a1) ^ (((a4 + v17) * a1) >> 16)) * a1;
  *(_BYTE *)(a4 + v17 + a3) = *(_BYTE *)(v13 + (v18 >> 24)) ^ *(_BYTE *)(v16 - 0xC27AFEAA03E150CLL) ^ *(_BYTE *)(v12 + (v18 >> 24)) ^ *(_BYTE *)((v18 >> 24) + v14 + 1) ^ *(_BYTE *)(v11 + (v19 >> 24)) ^ *(_BYTE *)((v19 >> 24) + v15 + 1) ^ *(_BYTE *)(v10 + (v19 >> 24)) ^ v18 ^ (BYTE3(v18) * v9) ^ v19 ^ (((((((_DWORD)a4 + (_DWORD)v17) * a1) ^ (((a4 + v17) * a1) >> 16)) * a1) >> 24) * v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v17 == 0) * v6) ^ a2)) - 8))();
}

uint64_t sub_100729C64@<X0>(int a1@<W2>, int a2@<W3>, int a3@<W5>, int a4@<W6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;

  v17 = (v8 + a3) & 0xAF84F7F7;
  v18 = ((((_DWORD)v7 + (_DWORD)v6 + 4) * a2) ^ (((v7 + v6 + 4) * a2) >> 16)) * (v17 ^ a1);
  v19 = ((((_DWORD)a6 + (_DWORD)v7) * a2) ^ (((a6 + v7) * a2) >> 16)) * a2;
  *(_BYTE *)(a6 + v7 + a5) = *(_BYTE *)(v14 + (v18 >> 24)) ^ *(_BYTE *)(v7 + v6 - 0xC27AFEAA03E150BLL) ^ *(_BYTE *)(v13 + (v18 >> 24)) ^ *(_BYTE *)((v18 >> 24) + v15 + 1) ^ *(_BYTE *)(v12 + (v19 >> 24)) ^ *(_BYTE *)((v19 >> 24) + v16 + 1) ^ *(_BYTE *)(v11 + (v19 >> 24)) ^ v19 ^ v18 ^ (((((((_DWORD)a6 + (_DWORD)v7) * a2) ^ (((a6 + v7) * a2) >> 16)) * a2) >> 24) * v9) ^ (((((((_DWORD)v7 + (_DWORD)v6 + 4) * a2) ^ (((v7 + v6 + 4) * a2) >> 16)) * (v17 ^ a1)) >> 24) * v10);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v7 == 15) * a4) ^ v8)) - 8))();
}

uint64_t sub_100729D30()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 6082)) - 12))();
}

uint64_t sub_100729D58()
{
  int v0;
  int v1;
  int v2;
  int v3;

  v3 = STACK[0x6508] + 10305;
  LODWORD(STACK[0xDC28]) = v0;
  LODWORD(STACK[0xDC24]) = v2;
  LODWORD(STACK[0xC8B0]) = v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(v3 ^ 0xD03080A9 ^ LODWORD(STACK[0x2304]) ^ (4822
                                                                                          * (LODWORD(STACK[0x2304]) > 0xA371A7DB))))
                            - 12))();
}

uint64_t sub_100729DD4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;

  v3 = (STACK[0x6508] - 2164) | 0x10C8;
  v4 = STACK[0x6508] + 2147;
  LODWORD(STACK[0xDC28]) = v0;
  LODWORD(STACK[0xDC24]) = v2;
  *(_DWORD *)STACK[0x6DF8] = v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v3 + 2062) * (v1 != 1930690922)) ^ v4)) - 12))();
}

uint64_t sub_100729E3C()
{
  int v0;
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;

  v2 = ((((v1 + 17515) ^ 0x4D43) - 389288882) ^ v0) & (2 * (v0 & 0x8CEBFE96)) ^ v0 & 0x8CEBFE96;
  v3 = ((2 * (v0 ^ 0xF0D9F0CC)) ^ 0xF8641CB4) & (v0 ^ 0xF0D9F0CC) ^ (2 * (v0 ^ 0xF0D9F0CC)) & 0x7C320E5A;
  v4 = v3 ^ 0x412024A;
  v5 = (v3 ^ 0x70200C12) & (4 * v2) ^ v2;
  v6 = ((4 * v4) ^ LODWORD(STACK[0x1E5C])) & v4 ^ (4 * v4) & 0x7C320E58;
  v7 = (v6 ^ 0x70000852) & (16 * v5) ^ v5;
  v8 = ((16 * (v6 ^ 0xC320612)) ^ 0xC320E5A0) & (v6 ^ 0xC320612) ^ (16 * (v6 ^ 0xC320612)) & 0x7C320E50;
  v9 = v7 ^ 0x7C320E5A ^ (v8 ^ 0x4020045A) & (v7 << 8);
  v10 = ((uint64_t (*)(_QWORD))STACK[0x5510])(v0 ^ 0x6CABE222 ^ (2
                                                                         * ((v9 << 16) & 0x7C320000 ^ v9 ^ ((v9 << 16) ^ 0xE5A0000) & (((v8 ^ 0x3C120A5A) << 8) & 0x7C320000 ^ 0x4C300000 ^ (((v8 ^ 0x3C120A5A) << 8) ^ 0x320E0000) & (v8 ^ 0x3C120A5A)))));
  *(_QWORD *)STACK[0x8770] = v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((19 * (v10 == 0)) ^ v1)) - 12))();
}

uint64_t sub_100729FE8(unint64_t a1)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((90 * (STACK[0xCD18] - 0xC27AFEAA03E1507 <= a1)) ^ v1)))();
}

uint64_t sub_10072A178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((504 * ((v7 ^ 0x5D84B7BE) == 4214)) ^ (v6 + 1895))) - 4))(a1, a2, a3, a4, a5, a6, 1772489163, STACK[0x4D48]);
}

uint64_t sub_10072A1F8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 12568)) - 8))();
}

uint64_t sub_10072A214@<X0>(uint64_t a1@<X0>, int a2@<W6>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;

  v16 = v4 - 1;
  v17 = (((v16 + (_DWORD)a4 + 8) * a2) ^ (((v16 + a4 + 8) * a2) >> 16)) * a2;
  v18 = ((*(_DWORD *)(*v9 + (*v11 & 0x1A3E29B8)) ^ (a1 + v16)) & 0x7FFFFFFF) * a2;
  v19 = (v18 ^ HIWORD(v18)) * a2;
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(v13 + (v17 >> 24)) ^ *(_BYTE *)(v16 + a4 + v7) ^ *(_BYTE *)(v12 + (v17 >> 24)) ^ *(_BYTE *)((v17 >> 24) + v15 + 1) ^ *(_BYTE *)(v10 + (v19 >> 24)) ^ *(_BYTE *)((v19 >> 24) + v14 + 4) ^ *(_BYTE *)((v19 >> 24) + a3 + 1) ^ v17 ^ ((((((v16 + (_DWORD)a4 + 8) * a2) ^ (((v16 + a4 + 8) * a2) >> 16)) * a2) >> 24) * v8) ^ v19 ^ (BYTE3(v19) * v6);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((2075 * (v16 == 0)) ^ v5)) - 8))();
}

uint64_t sub_10072A2E4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v3 = STACK[0x6508] ^ 0x909;
  v4 = STACK[0x6508] + 1992;
  LODWORD(STACK[0xDC28]) = v0;
  LODWORD(STACK[0xDC24]) = v2;
  v5 = STACK[0x8CFC];
  if (v1 != -2064188242)
    v5 = 1926417666;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((9725 * (v5 == v3 - 1926399256)) ^ v4))
                            - (STACK[0x2B88] ^ 0x1836)))();
}

uint64_t sub_10072A36C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  __int16 v4;

  v0 = STACK[0x2B88];
  v1 = STACK[0xC220];
  v2 = 1772489163
     * ((((_DWORD)v1 + 4) * (v0 ^ 0x69A611F5)) ^ ((((_DWORD)v1 + 4) * (v0 ^ 0x69A611F5)) >> 16));
  v3 = 1772489163 * ((1772489163 * ((_DWORD)v1 + 5)) ^ ((1772489163 * (v1 + 5)) >> 16));
  LOBYTE(v3) = *(_BYTE *)(STACK[0x4F88] + (v3 >> 24)) ^ *(_BYTE *)(v1 - 0xC27AFEAA03E150ALL) ^ *(_BYTE *)(STACK[0x5120] + (v3 >> 24)) ^ *(_BYTE *)((v3 >> 24) + STACK[0x4F80] + 1) ^ v3 ^ (55 * ((1772489163 * ((1772489163 * ((_DWORD)v1 + 5)) ^ ((1772489163 * (v1 + 5)) >> 16))) >> 24));
  v4 = v3 & 0xA;
  LODWORD(v3) = v3 | ((*(unsigned __int8 *)(STACK[0x4F88] + (v2 >> 24)) ^ *(unsigned __int8 *)(v1 - 0xC27AFEAA03E150BLL) ^ *(unsigned __int8 *)(STACK[0x5120] + (v2 >> 24)) ^ *(unsigned __int8 *)((v2 >> 24) + STACK[0x4F80] + 1) ^ v2 ^ (55 * ((1772489163 * ((((_DWORD)v1 + 4) * (v0 ^ 0x69A611F5)) ^ ((((_DWORD)v1 + 4) * (v0 ^ 0x69A611F5)) >> 16))) >> 24))) << 8);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((16594 * ((unsigned __int16)(v3 - 2 * (v3 & 0x1DFF ^ v4)) == 42655)) ^ STACK[0x2B88]))
                            - 8))();
}

uint64_t sub_10072A4A0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  unsigned __int16 v5;
  unint64_t v6;
  int v7;

  v2 = STACK[0x2B88];
  v3 = ((STACK[0x2B88] + 1970038713) & 0x8A93C71E) - 11671;
  v4 = (v3 ^ v1) * ((1772489163 * ((_DWORD)a1 + 6)) ^ ((1772489163 * (a1 + 6)) >> 16));
  v5 = *(unsigned __int8 *)(STACK[0x4F88] + (v4 >> 24)) ^ *(unsigned __int8 *)(a1 - 0xC27AFEAA03E1509) ^ *(unsigned __int8 *)(STACK[0x5120] + (v4 >> 24)) ^ *(unsigned __int8 *)((v4 >> 24) + STACK[0x4F80] + 1);
  LODWORD(v4) = v4 ^ (55
                    * (((v3 ^ v1) * ((1772489163 * ((_DWORD)a1 + 6)) ^ ((1772489163 * (a1 + 6)) >> 16))) >> 24));
  v6 = 1772489163 * ((1772489163 * ((_DWORD)a1 + 7)) ^ ((1772489163 * (a1 + 7)) >> 16));
  v7 = (55 * (v6 >> 24)) ^ v6 ^ *(unsigned __int8 *)(a1 - 0xC27AFEAA03E1508) ^ *(unsigned __int8 *)(STACK[0x4F88] + (v6 >> 24)) ^ *(unsigned __int8 *)(STACK[0x5120] + (v6 >> 24)) ^ *(unsigned __int8 *)((v6 >> 24) + STACK[0x4F80] + 1);
  LOWORD(v4) = (v7 | (unsigned __int16)((v5 ^ (unsigned __int16)v4) << 8))
             - 2 * ((v7 | ((v5 ^ (unsigned __int16)v4) << 8) & 0x1DFF) ^ v7 & 0xA);
  LOWORD(STACK[0xC162]) = v4 - 25099;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((17800 * ((unsigned __int16)v4 != 0)) ^ v2))
                            - 8))();
}

uint64_t sub_10072A5D8@<X0>(__int16 a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((7932
                                          * (LODWORD(STACK[0xB98C]) - 8 >= (unsigned __int16)((((v1 + 21225) & 0x7F7F) - 31626) ^ a1))) ^ v1))
                            - 12))();
}

uint64_t sub_10072A640@<X0>(unsigned __int16 a1@<W8>)
{
  int v1;
  uint64_t v2;

  v2 = ((uint64_t (*)(_QWORD))STACK[0x5510])(a1);
  STACK[0x7390] = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((((v2 == 0) ^ (v1 - 31)) & 1) * (v1 - 15479)) ^ v1))
                            - 12))();
}

uint64_t sub_10072A6A8(unint64_t a1)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (((STACK[0xC220] - 0xC27AFEAA03E1507 > a1)
                                * (((v1 & 0x270A7D2F) + 1690889897) ^ 0x64C91FCB)) ^ v1 & 0x270A7D2F)))();
}

uint64_t sub_10072A738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  unsigned int v6;

  v6 = (((v4 ^ 0x4EA850D7) + (v5 ^ 0x64C907EE) + 1671261906) ^ ((v4 ^ 0x6E022AAB) + 1127742836) ^ ((((v5 - 1690898307) | 0x932) ^ 0xC4464877)
                                                                                                 + (v4 ^ 0xE97386DF)))
     + 2145186900;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                                                          + 8
                                                                                          * (int)(v5 ^ 0x64C907EE ^ (124 * (((v6 - v5) | (v5 - v6)) >> 31))))
                                                                              - 8))(a1, a2, a3, a4, 1690902475);
}

uint64_t sub_10072A800@<X0>(uint64_t a1@<X0>, int a2@<W4>, uint64_t a3@<X8>)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  _BOOL4 v10;

  v8 = v5 + a3;
  v9 = 1772489163
     * ((((_DWORD)v8 + 8) * ((v3 - 490821823) & 0x1D4159FF ^ v7)) ^ ((((_DWORD)v8 + 8)
                                                                    * ((v3 - 490821823) & 0x1D4159FF ^ v7)) >> 16));
  *(_BYTE *)(a1 + v5) = *(_BYTE *)(STACK[0x4F88] + (v9 >> 24)) ^ *(_BYTE *)(v8 - 0xC27AFEAA03E1507) ^ *(_BYTE *)(STACK[0x5120] + (v9 >> 24)) ^ *(_BYTE *)((v9 >> 24) + STACK[0x4F80] + 1) ^ v9 ^ (55 * BYTE3(v9));
  v10 = a2 + v5 + 6 < v4;
  if (v4 < v6 != v5 + 1 > 0x9B36E02F)
    v10 = v4 < v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((124 * v10) ^ v3)) - 8))();
}

uint64_t sub_10072A8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v8;
  unsigned int v9;
  int v10;

  LODWORD(STACK[0xDC28]) = v8;
  LODWORD(STACK[0xDC24]) = v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((v9 > 0xFAE665CB) * (v9 ^ (a6 + 3252) ^ 0x1DCC)) ^ (a8 + v9 + 3165)))
                            - 12))();
}

uint64_t sub_10072A950()
{
  int v0;
  int v1;
  int v2;

  LODWORD(STACK[0xDC28]) = v0;
  LODWORD(STACK[0xDC24]) = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v1) - (((v1 - 2197) | 0x32u) ^ 0x107ALL)))();
}

uint64_t sub_10072A994(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                                                          + 8
                                                                                          * ((51
                                                                                            * ((((v3 ^ 0x5FDA8CB9)
                                                                                               + 709909962) ^ ((v3 ^ 0xFC47124C) - 1983003843) ^ ((v3 ^ 0xFE19393D) + ((v2 - 415141399) & 0x18BE54F7) - 1953245224)) != 672036537)) ^ v2))
                                                                              - 8))(a1, a2, 1772489163, 3992336719, 23011);
}

uint64_t sub_10072AA88@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, unsigned int a4@<W4>, unsigned int a5@<W5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  _BOOL4 v25;

  v20 = (_BYTE *)(a1 + v9);
  v21 = (((v9 + (_DWORD)a8 + 8) * a2) ^ (((v9 + a8 + 8) * a2) >> 16)) * a2;
  v22 = ((*(_DWORD *)(*v12 + (*v14 & ((v8 ^ a4) + 440277314))) ^ v20) & 0x7FFFFFFF) * a2;
  v23 = (v22 ^ HIWORD(v22)) * a2;
  *v20 = *(_BYTE *)(v16 + (v21 >> 24)) ^ *(_BYTE *)(v9 + a8 + a7) ^ *(_BYTE *)(v15 + (v21 >> 24)) ^ *(_BYTE *)((v21 >> 24) + v18 + 1) ^ *(_BYTE *)(v13 + (v23 >> 24)) ^ *(_BYTE *)((v23 >> 24) + v17 + 4) ^ v21 ^ *(_BYTE *)((v23 >> 24) + v19 + 1) ^ (BYTE3(v21) * v11) ^ v23 ^ (BYTE3(v23) * a6);
  v24 = v9 + 1;
  if (v10 < a5 != v24 > a3 + 2320)
    v25 = v10 < a5;
  else
    v25 = v24 + a5 < v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((51 * v25) ^ v8)) - 8))();
}

uint64_t sub_10072AB88()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 2147)) - 12))();
}

uint64_t sub_10072ABA8@<X0>(int a1@<W8>)
{
  int v1;

  LODWORD(STACK[0xDC28]) = 4;
  LODWORD(STACK[0xDC24]) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v1 + 7954)) - 8))();
}

uint64_t sub_10072ABD4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;

  *(_DWORD *)(v1 + 3756) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v2 - 612)) - 12))();
}

uint64_t sub_10072ABF0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((25829 * (STACK[0x96A8] != 0xC27AFEAA03E150FLL)) ^ (v0 + 5475)))
                            - 4))();
}

uint64_t sub_10072AC38()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4))(v1);
}

uint64_t sub_10072AC60()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((6219 * (STACK[0x7640] != 0xC27AFEAA03E150FLL)) ^ (v0 - 149)))
                            - 8))();
}

uint64_t sub_10072AC9C()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8))(v1);
}

uint64_t sub_10072ACC4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 4435)) - 12))();
}

uint64_t sub_10072AD2C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((39 * (STACK[0x9EC8] != 0)) ^ v0)) - 12))();
}

uint64_t sub_10072AD7C()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 - 103)) - 4))(v1);
}

uint64_t sub_10072ADA0@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (a1 + 40)) - 4;
  LODWORD(STACK[0xEE20]) = a1 - 455775086;
  LODWORD(STACK[0xEE50]) = a1 - 455777569;
  STACK[0xEE30] = v1;
  STACK[0xEE58] = 2368574567;
  LODWORD(STACK[0xEE60]) = a1 - 455777544;
  LODWORD(STACK[0xEE64]) = 0;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((2 * ((v2 - 240) & 0x2263C6E0) - (v2 - 240) + 1570519320) ^ 0x600EE641)
                          + a1;
  v4 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v2 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * SLODWORD(STACK[0x1D354])) - 4))(v4);
}

uint64_t sub_10072AE8C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((LODWORD(STACK[0x4B08]) ^ 0x7F75) * (v0 == 0)) ^ (STACK[0x6508] - 528)))
                            - 4))();
}

uint64_t sub_10072AEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (v2 + 22231);
  v4 = *(_QWORD *)(STACK[0x6AD8] + 8 * v2) - 4;
  v5 = *(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v2 + 9736));
  STACK[0xACF8] = v4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(v5 - (v3 ^ 0x58BE)))(1930690922, a2, 205);
}

uint64_t sub_10072AF50()
{
  int v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((982
                                          * (((v1 + 65) ^ ((v0 ^ v2) == ((v1 + 127346497) ^ 0x7972F09)
                                                                                       - 4214)) & 1)) ^ v1))
                            - 8))();
}

uint64_t sub_10072AFB0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 13913)) - 12))();
}

uint64_t sub_10072AFC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  int v3;
  int v4;
  unsigned int v5;
  unint64_t v6;

  v5 = v3 - 1;
  v6 = 1772489163
     * (((1772489163 * (v5 + a2 + 8)) >> ((v2 + 9) ^ 0x6F)) ^ (1772489163 * (v5 + (_DWORD)a2 + 8)));
  *(_BYTE *)(a1 + v5) = *(_BYTE *)(STACK[0x4F88] + (v6 >> 24)) ^ *(_BYTE *)(v5 + a2 - 0xC27AFEAA03E1507) ^ *(_BYTE *)(STACK[0x5120] + (v6 >> 24)) ^ *(_BYTE *)((v6 >> 24) + STACK[0x4F80] + 1) ^ v6 ^ (55 * ((1772489163 * (((1772489163 * (v5 + a2 + 8)) >> ((v2 + 9) ^ 0x6F)) ^ (1772489163 * (v5 + (_DWORD)a2 + 8)))) >> 24));
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((473 * (v5 == 0)) ^ v4)) - 12))();
}

uint64_t sub_10072B078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v5 = v1 + v0 - 0x23FAD3BBAA53F419;
  LODWORD(STACK[0x6A70]) = *(unsigned __int8 *)(v5 - 0xC27AFEAA03E150FLL);
  v6 = 1772489163
     * ((1772489163 * ((_DWORD)v1 + (_DWORD)v0 + 1437338599)) ^ ((1772489163 * (v1 + v0 + 1437338599)) >> 16));
  STACK[0x6A90] = v6;
  v7 = v6 >> 24;
  LODWORD(STACK[0x6A50]) = *(unsigned __int8 *)(v5 - 0xC27AFEAA03E150ELL);
  LODWORD(STACK[0x6A40]) = *(unsigned __int8 *)((v6 >> 24) + v3 + 1);
  v8 = 1772489163 * ((1772489163 * (_DWORD)v5 + 1772489163) ^ ((1772489163 * v5 + 1772489163) >> 16));
  STACK[0x6A80] = v8;
  v9 = v8 >> 24;
  LODWORD(STACK[0x6A30]) = *(unsigned __int8 *)((v8 >> 24) + v3 + 1);
  LODWORD(STACK[0x6A20]) = *(unsigned __int8 *)(v5 - 0xC27AFEAA03E150DLL);
  v10 = 1772489163 * ((1772489163 * ((_DWORD)v5 + 2)) ^ ((1772489163 * (v5 + 2)) >> 16));
  STACK[0x6A10] = v10;
  v11 = v10 >> 24;
  LODWORD(STACK[0x6A00]) = *(unsigned __int8 *)((v10 >> 24) + v3 + 1);
  LODWORD(STACK[0x69F0]) = *(unsigned __int8 *)(v5 - 0xC27AFEAA03E150CLL);
  v12 = 1772489163 * ((1772489163 * ((_DWORD)v5 + 3)) ^ ((1772489163 * (v5 + 3)) >> 16));
  STACK[0x69E0] = v12;
  v13 = v12 >> 24;
  LODWORD(STACK[0x69D0]) = *(unsigned __int8 *)((v12 >> 24) + v3 + 1);
  LODWORD(STACK[0x69A0]) = *(unsigned __int8 *)(v5 - 0xC27AFEAA03E150BLL);
  v14 = 1772489163 * ((1772489163 * ((_DWORD)v5 + 4)) ^ ((1772489163 * (v5 + 4)) >> 16));
  STACK[0x6990] = v14;
  v15 = v14 >> 24;
  LODWORD(STACK[0x6980]) = *(unsigned __int8 *)((v14 >> 24) + v3 + 1);
  LODWORD(STACK[0x6960]) = *(unsigned __int8 *)(v5 - 0xC27AFEAA03E150ALL);
  v16 = 1772489163 * ((1772489163 * ((_DWORD)v5 + 5)) ^ ((1772489163 * (v5 + 5)) >> 16));
  STACK[0x6950] = v16;
  v17 = v16 >> 24;
  LODWORD(STACK[0x6930]) = *(unsigned __int8 *)((v16 >> 24) + v3 + 1);
  LODWORD(STACK[0x6920]) = *(unsigned __int8 *)(v5 - 0xC27AFEAA03E1509);
  v18 = 1772489163 * ((1772489163 * ((_DWORD)v5 + 6)) ^ ((1772489163 * (v5 + 6)) >> 16));
  STACK[0x6910] = v18;
  v19 = v18 >> 24;
  LODWORD(STACK[0x68F0]) = *(unsigned __int8 *)((v18 >> 24) + v3 + 1);
  STACK[0x6AA0] = *(_QWORD *)(*(_QWORD *)STACK[0x60C0] + (*(_DWORD *)STACK[0x60B8] & 0x48EA1C10));
  v20 = 1772489163 * ((1772489163 * ((_DWORD)v5 + 7)) ^ ((1772489163 * (v5 + 7)) >> 16));
  STACK[0x68C0] = v20;
  v21 = v20 >> 24;
  LODWORD(STACK[0x6A60]) = *(unsigned __int8 *)((v20 >> 24) + v3 + 1);
  LODWORD(STACK[0x68B0]) = *(unsigned __int8 *)(v5 - 0xC27AFEAA03E1508);
  v22 = STACK[0x6508];
  v23 = STACK[0x6AD8];
  v24 = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 1419982524) ^ 0xAB5CC9C6));
  LODWORD(STACK[0x68A0]) = *(unsigned __int8 *)(v2 + (v6 >> 24));
  v25 = STACK[0x5120];
  STACK[0x6AC0] = v7;
  LODWORD(STACK[0x6880]) = *(unsigned __int8 *)(v25 + v7);
  LODWORD(STACK[0x6890]) = *(unsigned __int8 *)(v2 + v9);
  STACK[0x6AB0] = v9;
  LODWORD(STACK[0x6870]) = *(unsigned __int8 *)(v25 + v9);
  LODWORD(STACK[0x68D0]) = *(unsigned __int8 *)(v2 + v11);
  LODWORD(STACK[0x6860]) = *(unsigned __int8 *)(v25 + v11);
  LODWORD(STACK[0x68E0]) = *(unsigned __int8 *)(v2 + v13);
  LODWORD(STACK[0x6850]) = *(unsigned __int8 *)(v25 + v13);
  LODWORD(STACK[0x6900]) = *(unsigned __int8 *)(v2 + v15);
  LODWORD(STACK[0x6840]) = *(unsigned __int8 *)(v25 + v15);
  LODWORD(STACK[0x6940]) = *(unsigned __int8 *)(v2 + v17);
  LODWORD(STACK[0x6830]) = *(unsigned __int8 *)(v25 + v17);
  LODWORD(STACK[0x6970]) = *(unsigned __int8 *)(v2 + v19);
  LODWORD(STACK[0x6820]) = *(unsigned __int8 *)(v25 + v19);
  LODWORD(STACK[0x69C0]) = *(unsigned __int8 *)(v2 + v21);
  LODWORD(STACK[0x69B0]) = *(unsigned __int8 *)(v25 + v21);
  STACK[0xEE18] = v24 - 4;
  LODWORD(STACK[0xEE20]) = v22 - 1419982482;
  LODWORD(STACK[0xEE50]) = (v22 - 1419982524) ^ 0xE4C;
  LODWORD(STACK[0xEE64]) = v22 - 1419982524;
  STACK[0xEE30] = STACK[0xB860];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((v4 + 1604568520 - 2 * ((v4 - 240) & 0x5FA3C6B8)) ^ 0x623119E1)
                          + v22;
  LODWORD(STACK[0xEE60]) = 0;
  STACK[0xEE58] = 0x3F90973045A368CDLL;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v26 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v4 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23 + 8 * SLODWORD(STACK[0x1D354])) - 12))(v26);
}

uint64_t sub_10072B51C()
{
  char v0;
  int v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v7 = ((unint64_t)((55 * v5) ^ STACK[0x6950] ^ LOBYTE(STACK[0x6960]) ^ LODWORD(STACK[0x6940]) ^ LOBYTE(STACK[0x6830]) ^ LOBYTE(STACK[0x6930])) << 16) | ((unint64_t)((55 * v0) ^ STACK[0x6910] ^ LOBYTE(STACK[0x6920]) ^ LODWORD(STACK[0x6970]) ^ LOBYTE(STACK[0x6820]) ^ LOBYTE(STACK[0x68F0])) << 8) | ((unint64_t)(LODWORD(STACK[0x68A0]) ^ LODWORD(STACK[0x6A70]) ^ LODWORD(STACK[0x6880]) ^ LODWORD(STACK[0x6A40]) ^ STACK[0x6A90] ^ (55 * STACK[0x6AC0])) << 56) | ((unint64_t)(LODWORD(STACK[0x6890]) ^ LODWORD(STACK[0x6A50]) ^ LODWORD(STACK[0x6870]) ^ LODWORD(STACK[0x6A30]) ^ STACK[0x6A80] ^ (55 * STACK[0x6AB0])) << 48) | ((unint64_t)(LODWORD(STACK[0x6A20]) ^ STACK[0x6A10] ^ (55 * v2) ^ LODWORD(STACK[0x68D0]) ^ LODWORD(STACK[0x6860]) ^ LODWORD(STACK[0x6A00])) << 40) | ((unint64_t)((55 * v3) ^ STACK[0x69E0] ^ LODWORD(STACK[0x69F0]) ^ LODWORD(STACK[0x68E0]) ^ LODWORD(STACK[0x6850]) ^ LODWORD(STACK[0x69D0])) << 32) | ((unint64_t)((55 * v4) ^ STACK[0x6990] ^ LODWORD(STACK[0x69A0]) ^ LODWORD(STACK[0x6900]) ^ LOBYTE(STACK[0x6840]) ^ LOBYTE(STACK[0x6980])) << 24);
  v8 = (55 * v1) ^ STACK[0x68C0] ^ LODWORD(STACK[0x68B0]) ^ LODWORD(STACK[0x69C0]) ^ LODWORD(STACK[0x69B0]);
  v9 = (((v7 - ((2 * v7) & 0x13507B14B701D37ELL) + 0x9A83D8A5B80E9BDLL) ^ 0x66FD9E1B3F643701) & (v8 ^ ~LODWORD(STACK[0x6A60]) | 0xFFFFFFFFFFFFFF00) | (v8 ^ LODWORD(STACK[0x6A60])) & 0x43) ^ 0xAA50261A112142;
  v10 = *(_QWORD *)(*(_QWORD *)STACK[0x60C0] + (*(_DWORD *)STACK[0x60B8] & 0x48EA1C10));
  v11 = v10 & 0x7FFFFFFFFFFFFFFFLL;
  v12 = v10 & 0x32AF42562E80103 ^ 0x8108C02140480103;
  v13 = v12 ^ v11 ^ 0x4AA33DD4B3A668CDLL;
  v14 = 2 * ((v12 ^ v11) & 1);
  v11 ^= 0xB55CC22B4C599733;
  LODWORD(v9) = (uint64_t)((STACK[0x6AA0] & 0x7FFFFFFFFFFFFFFFLL ^ 0x4AA33DD4B3A668CCLL)
                        + (((((v9 | 0x2014374C49D00FBLL) - (v9 | 0xFDFEBC8B3B62FF04) - 0x2014374C49D00FCLL) ^ 0x56EBACB4AAF70F5FLL)
                          + 0x4EBE08F5D9267BE9) ^ ((((v9 | 0x2014374C49D00FBLL)
                                                     - (v9 | 0xFDFEBC8B3B62FF04)
                                                     - 0x2014374C49D00FCLL) ^ 0x275D83E024DCC15BLL)
                                                   + 0x3F0827A1570DB5EDLL) ^ ((((v9 | 0x2014374C49D00FBLL)
                                                                              - (v9 | 0xFDFEBC8B3B62FF04)
                                                                              - 0x2014374C49D00FCLL) ^ 0x1C489F9734433101)
                                                                            + 0x41D3BD6479245B7))
                        + v11
                        - 0x75AB1482218C3A20) < (uint64_t)0x80000000A82D5192;
  v15 = (uint64_t)(v11 - v12 + v13 + v14 + 2821542291) < (uint64_t)0x80000000A82D5192;
  v16 = STACK[0x1644];
  v17 = STACK[0x6508];
  v18 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 6)) - 4;
  LODWORD(STACK[0xEE20]) = v16 ^ 0x25;
  LODWORD(STACK[0xEE50]) = v16 ^ 0xE97;
  LODWORD(STACK[0xEE60]) = 0;
  LODWORD(STACK[0xEE64]) = v16;
  STACK[0xEE30] = 0;
  STACK[0xEE58] = v9 ^ v15;
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857
                          * ((((v6 - 240) | 0x22A058FE) - (v6 - 240) + ((v6 - 240) & 0xDD5FA700)) ^ 0x1F3287A7)
                          + v17;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v19 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v6 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * SLODWORD(STACK[0x1D354])) - 12))(v19);
}

uint64_t sub_10072BA7C()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 479)) - 12))();
}

uint64_t sub_10072BA9C()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 612)) - 12))();
}

uint64_t sub_10072BACC()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (int)(((((STACK[0x6508] - 3702) | 0x14D8) + 15772) * (v0 == -1926392729)) ^ (STACK[0x6508] + 1117))))();
}

uint64_t sub_10072BB0C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((203
                                          * ((unsigned __int16)((((LOWORD(STACK[0x8DF6]) ^ 0xC84D) + 14259) ^ ((LOWORD(STACK[0x8DF6]) ^ 0xA3A1) + 23647) ^ ((LOWORD(STACK[0x8DF6]) ^ 0xAAF9) + 21767))
                                                              - 16107) < (unsigned __int16)(((v0 + 9851) ^ 0x3DFF) - 167))) ^ (v0 + 9851)))
                            - 8))();
}

uint64_t sub_10072BB98@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(void);

  STACK[0xA9A8] = 0;
  LODWORD(STACK[0xCEDC]) = -1926392729;
  v1 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)a1 + 7011)) - ((a1 + 8469) ^ 0x21C5));
  STACK[0x6BC8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1) - 8;
  return v1();
}

uint64_t sub_10072BC3C()
{
  unint64_t v0;
  unint64_t v1;
  int v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;

  LODWORD(STACK[0x9D1C]) = v4;
  LODWORD(STACK[0xA6C4]) = v7;
  STACK[0x7220] = v0;
  LODWORD(STACK[0xB59C]) = v8;
  STACK[0x9C80] = v5;
  STACK[0x6BB0] = v6;
  STACK[0xCB20] = v3;
  STACK[0x6EC0] = v1;
  STACK[0xA668] = 0xAD7DC3C140BF010;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v3 == 0) * (v2 - 8614)) ^ v2))
                            - (((v2 - 8377) | 0x20D2u) ^ 0x21D2)))();
}

uint64_t sub_10072BCE8(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v6;

  v6 = v4 != 0x3A8834BBB3077A40 && v3 != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((((a1 ^ 0x21DD) + 3016) ^ 0x7969) * v6) ^ a1))
                            - ((602 * (a1 ^ 0x21DDu)) ^ a3)))();
}

uint64_t sub_10072BD44()
{
  int v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (v0 - 1984);
  v2 = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  v3 = *(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 9289));
  STACK[0xCF88] = v2;
  return ((uint64_t (*)(void))(v3 - (v1 ^ 0x40B)))();
}

uint64_t sub_10072BD98@<X0>(int a1@<W8>)
{
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0xCDD0] = *(_QWORD *)(STACK[0x6AD8] + 8 * (a1 + 2417));
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (a1 - 3124 + ((a1 + 8025) | 0x1008))) - 8))(7845, 3613388764, 0x3032385379A144E6, 4294959566, 26130, 1152, 11940, 26);
}

uint64_t sub_10072BE30()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((3318 * (v0 == ((3 * LODWORD(STACK[0x2FA8])) ^ 0x8D2DCA84))) ^ (STACK[0x6508] - 105)))
                            - 12))();
}

uint64_t sub_10072BE74()
{
  int v0;
  uint64_t v1;

  v1 = ((uint64_t (*)(_QWORD))STACK[0x5510])(LODWORD(STACK[0xCEDC]) ^ 0x8D2D968D ^ (373 * (v0 ^ 0x5EE1)));
  STACK[0x8D28] = v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((14 * (v1 == 0)) ^ v0))
                            - ((301 * (v0 ^ 0x5EEDu)) ^ 0x107ELL)))();
}

uint64_t sub_10072BF00(uint64_t a1)
{
  int v1;

  LODWORD(STACK[0x73B8]) = -1926392729;
  LODWORD(STACK[0xB3E4]) = -1926392729;
  return ((uint64_t (*)(uint64_t, unint64_t, unint64_t *))(*(_QWORD *)(STACK[0x6AD8]
                                                                                            + 8 * (v1 ^ 0x4685))
                                                                                - 12))(a1, STACK[0x20A8], &STACK[0xA9A8]);
}

uint64_t sub_10072BF90()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((STACK[0x6508] - 105) ^ (3825 * (v0 == -1926392729))))
                            - 12))();
}

uint64_t sub_10072BFC4()
{
  uint64_t v0;
  unint64_t v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = LODWORD(STACK[0xB3E4]);
  v2 = STACK[0x1EF0];
  v3 = STACK[0x6508];
  v4 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 40)) - 4;
  LODWORD(STACK[0xEE20]) = v2 ^ 0xE65;
  LODWORD(STACK[0xEE50]) = v2;
  STACK[0xEE30] = v1;
  STACK[0xEE58] = 2368574567;
  LODWORD(STACK[0xEE60]) = v2 - 13;
  LODWORD(STACK[0xEE64]) = 0;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((v0 + 2089298012 - 2 * ((v0 - 240) & 0x7C88294C)) ^ 0x411AF615)
                          + v3;
  v5 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v0 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * SLODWORD(STACK[0x1D354])) - 4))(v5);
}

uint64_t sub_10072C098()
{
  int v0;
  uint64_t v1;

  v0 = STACK[0x6508] - 2451;
  v1 = sub_10009A6DC();
  STACK[0x8D28] = 0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8))(v1);
}

uint64_t sub_10072C0CC()
{
  unint64_t v0;
  unint64_t v1;

  v0 = STACK[0x6508];
  v1 = STACK[0x6AD8];
  STACK[0xB940] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 2451)) - 8;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((20225 * ((((_DWORD)v0 + 207640671) ^ ((_DWORD)v0 - 2451)) == -1963857678)) ^ LODWORD(STACK[0x19E4]))))();
}

uint64_t sub_10072C174()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = STACK[0x391C];
  v3 = STACK[0x6508];
  v4 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 40)) - 4;
  LODWORD(STACK[0xEE20]) = STACK[0x3918];
  LODWORD(STACK[0xEE50]) = v2;
  STACK[0xEE30] = 2368574567;
  STACK[0xEE58] = v1;
  LODWORD(STACK[0xEE60]) = v2 + 77;
  LODWORD(STACK[0xEE64]) = 0;
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((((v0 - 240) | 0x2896CD41) + (~(v0 - 240) | 0xD76932BE)) ^ 0x15041219)
                          + v3;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  v5 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v0 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * SLODWORD(STACK[0x1D354])) - 12))(v5);
}

uint64_t sub_10072C244()
{
  int v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v0 = STACK[0x6508] - 105;
  v1 = ((unint64_t)LOBYTE(STACK[0xFEAE]) << 56) | ((unint64_t)LOBYTE(STACK[0xFEAF]) << 48) | ((unint64_t)LOBYTE(STACK[0xFEB0]) << 40) | ((unint64_t)LOBYTE(STACK[0xFEB1]) << 32) | ((unint64_t)LOBYTE(STACK[0xFEB2]) << 24) | ((unint64_t)LOBYTE(STACK[0xFEB3]) << 16);
  v2 = ((((LOBYTE(STACK[0xFEB4]) - ((2 * LOBYTE(STACK[0xFEB4])) & 0x1B4)) << 8) + 0x57B7498C2D07DA00) ^ 0x3268AA2CC50F085ELL) & (v1 ^ 0xFFFFFFFFFFFFFF5FLL) ^ v1 & 0x9A201C5F17F70000;
  v3 = LOBYTE(STACK[0xFEB5]) - ((2 * LOBYTE(STACK[0xFEB5])) & 0x11ELL) + 0x286D59DD7EB6028FLL;
  v4 = (((v2 & 0x920D0D972BAED856 ^ 0x100D0D83298CD0D6) + (v2 & 0x6DF2F268D4512708 ^ 0x800012101) - 1) ^ 0x782D359826ECD209) & (v3 ^ 0xD792A6228149FD70) ^ v3 & 0x200000440816027ELL;
  STACK[0xB1C8] = (((v4 ^ 0xC330BF25E915B5E1) - 0x577623DB1F5CEFB5) ^ ((v4 ^ 0x9CA071EB6D4F754BLL)
                                                                         - 0x8E6ED159B062F1FLL) ^ ((v4 ^ 0x726F15396B253325)
                                                                                                 + 0x19D676386293968FLL))
                - 0x4646B8F6E6C95625;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12))();
}

uint64_t sub_10072C450()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * ((19960 * (((STACK[0xA9A8] == 0) ^ (((v0 + 71) ^ 0x65) + 1)) & 1)) ^ (v0 + 1117))))();
}

uint64_t sub_10072C4A4()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return (*(uint64_t (**)(uint64_t))(STACK[0x6AD8]
                                            + 8
                                            * (((((v0 - 645727933) | 0x16D8) ^ 0x2BB7) * (v0 == 1300182176)) ^ (v0 - 645722602))))(v1);
}

uint64_t sub_10072C500(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = STACK[0x6508] + 1515;
  v4 = STACK[0x6508] - 2948;
  v5 = STACK[0x6CC0];
  *(_QWORD *)v5 = STACK[0x85A0];
  *(_DWORD *)(v5 + 8) = STACK[0x8234];
  *(_QWORD *)(v5 + 16) = STACK[0x9598];
  *(_DWORD *)(v5 + 24) = -1926392713;
  *(_QWORD *)(v5 + 32) = STACK[0x8738];
  *(_DWORD *)(v5 + 40) = 16;
  v6 = STACK[0x7DD8];
  *(_QWORD *)(v5 + 352) = STACK[0xB7B8];
  *(_QWORD *)(v5 + 360) = v6;
  *(_DWORD *)(v5 + 368) = STACK[0x99B4];
  STACK[0xC368] = a3;
  LODWORD(STACK[0x6B64]) = 0;
  *(_QWORD *)(v5 + 56) = 0x67F3171B1845AD9FLL;
  v7 = STACK[0x6AD8];
  STACK[0x95A8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v4);
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (v3 + v4 + 29)) - 12))();
}

uint64_t sub_10072C5F8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((7168 * (v0 == (STACK[0x6508] ^ 0x8D2D8411))) ^ (STACK[0x6508] - 1963)))
                            - 12))();
}

uint64_t sub_10072C64C()
{
  int v0;

  return ((uint64_t (*)(unint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, unint64_t *, unint64_t *))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x30AC ^ (v0 + 2754))) - 12))(STACK[0x6CC0] + 72, *(unsigned int *)(STACK[0x6CC0] + 40), STACK[0x6CC0] + 64, *(unsigned int *)(STACK[0x6CC0] + 368), *(_QWORD *)(STACK[0x6CC0] + 360), *(_QWORD *)(STACK[0x6CC0] + 352), &STACK[0xC368], &STACK[0x6B64]);
}

uint64_t sub_10072C6B4()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((4289 * (STACK[0xC368] != 0x3032385379A144E6)) ^ LODWORD(STACK[0x3A3C])))
                            - 8))();
}

uint64_t sub_10072C6F8()
{
  int v0;
  uint64_t v1;

  v0 = STACK[0x6508] + 6467;
  v1 = sub_10009A6DC();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8))(v1);
}

uint64_t sub_10072C734()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (int)((21694 * (v0 == ((STACK[0x6508] - 3678) | 0x1042) - 1926397427)) ^ (STACK[0x6508] + 1117))))();
}

uint64_t sub_10072C77C()
{
  int v0;
  int v1;

  v1 = *(_DWORD *)(STACK[0x6CC0] + 72);
  STACK[0x6ED8] = STACK[0x6CC0] + 72;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((21128 * (v1 != v0 - 1926397427)) ^ v0)) - 8))();
}

uint64_t sub_10072C7C4@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((194 * (((a1 ^ (*(_QWORD *)(v2 + 64) == 0)) & 1) == 0)) ^ v1))
                            - a1
                            + 4206))();
}

uint64_t sub_10072C804@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (a1 + 484)) - 8))();
}

uint64_t sub_10072C82C@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * ((a1 + 2102310130) ^ 0x7D4ED514)) - 4;
  LODWORD(STACK[0xEE20]) = (a1 + 2102310130) ^ 0x19;
  LODWORD(STACK[0xEE50]) = (a1 + 2102310130) ^ 0xEEE;
  LODWORD(STACK[0xEE60]) = 0;
  LODWORD(STACK[0xEE64]) = a1 + 2102310130;
  STACK[0xEE30] = v1;
  STACK[0xEE58] = 0;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601
                          - 1705718857 * ((~((v2 - 240) | 0x9761D966) + ((v2 - 240) & 0x9761D966)) ^ 0x550CF9C0)
                          + a1;
  v4 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v2 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * SLODWORD(STACK[0x1D354])) - 8))(v4);
}

uint64_t sub_10072C914()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = STACK[0x6508];
  STACK[0x8600] = v0 + 64;
  v2 = STACK[0x6AD8];
  STACK[0xB940] = *(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v1 - 2429)) - 8;
  return (*(uint64_t (**)(void))(v2 + 8 * (int)(((551 * (v1 ^ 0x106B)) ^ 0xD85) + v1 - 2429)))();
}

uint64_t sub_10072C9AC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((STACK[0x6508] - 383) ^ (23123 * (v0 == -1926392729))))
                            - (STACK[0x6508]
                             - 383)
                            + 3823))();
}

uint64_t sub_10072C9E8()
{
  int v0;

  STACK[0x8D28] = *(_QWORD *)STACK[0x8600];
  LODWORD(STACK[0xB3E4]) = *(_DWORD *)STACK[0x6ED8];
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - (v0 + 383) + 4206))();
}

uint64_t sub_10072CA34@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * ((16854 * (v1 == (((a1 ^ 0x4A5) + 517) ^ 0x8D2D82BF))) ^ (a1 + 1117))))();
}

uint64_t sub_10072CA74()
{
  int v0;

  STACK[0xB1C8] = (((v0 + 1220772620) & 0xB73C7EF8) - 0x8E7EF8B80E348E9) * *(_QWORD *)(STACK[0x6CC0] + 56)
                + 0x4836E677AC86958FLL;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * v0))();
}

uint64_t sub_10072CAE0()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * (((((STACK[0x8990] == 0) ^ (v0 - 1)) & 1) * (v0 ^ 0x16F9)) | v0)))();
}

uint64_t sub_10072CB1C()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return (*(uint64_t (**)(uint64_t))(STACK[0x6AD8] + 8 * ((v0 ^ 0x6AE) + 1634)))(v1);
}

uint64_t sub_10072CB40()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((((v0 ^ (v1 == -1926392729)) ^ (v0 + 42)) & 1) == 0) ^ (v0 + 9200)))
                            - 12))();
}

uint64_t sub_10072CB90()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x2410)) - 12))();
}

uint64_t sub_10072CC2C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unint64_t v4;

  LODWORD(STACK[0xA0F8]) = v3;
  STACK[0xC768] -= 432;
  v4 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v2);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * (((v2 + 5751) ^ 0x9AF) + v2))
                                                                                                - 4))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_10072CCAC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((((STACK[0x6508] - 3798) | 0x57) ^ 0x4BB0) * (v0 == -1926392729)) ^ (STACK[0x6508] - 3711)))
                            - 8))();
}

uint64_t sub_10072CCF4@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((LODWORD(STACK[0xA0F8]) == -1926392729) * (((a1 - 254) | 0x100) ^ 0x27D8)) ^ a1))
                            - ((a1 - 419) | 0x1022u)
                            + 4206))();
}

uint64_t sub_10072CD5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v2) - 12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * ((int)v2 + (int)v2 + 5744 - 1706))
                                                                                                - 4))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_10072CDDC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((21918
                                               * (v0 == (((STACK[0x6508] + 4572) | 0x1420) ^ 0x8D2DA215))) ^ (STACK[0x6508] - 3711)))
                            - 8))();
}

uint64_t sub_10072CE24()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((21331
                                          * (((LODWORD(STACK[0xB3E4]) == -1926392729) ^ (v0 - 111)) & 1)) ^ v0))
                            - 8))();
}

uint64_t sub_10072CE74()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((STACK[0x8D28] != 0) * ((v0 - 13435) ^ 0x116)) ^ v0))
                            - 8))();
}

uint64_t sub_10072CEB4()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x7D40] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((int)v0 + (int)v0 - 1822 + 2963)) - 4))();
}

uint64_t sub_10072CEE4(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;

  v3 = STACK[0x6AD8];
  STACK[0x6CA8] = (v2 + 5746) - 6257 + *(_QWORD *)(STACK[0x6AD8] + 8 * v2);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * (v2 + 4545))
                                                                                                - 4))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_10072CF48()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((17883 * (STACK[0x8D28] != 0)) ^ (v0 - 3697))) - 8))();
}

uint64_t sub_10072CF78()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return (*(uint64_t (**)(uint64_t))(STACK[0x6AD8] + 8 * (v0 + 2925)))(v1);
}

uint64_t sub_10072CF8C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)(((STACK[0x6508] + 13959) * v0) ^ (STACK[0x6508] - 3704)))
                            - 12))();
}

uint64_t sub_10072CFBC()
{
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (int)(((LODWORD(STACK[0xCB64]) == STACK[0x6508] - 1926396944)
                                     * (((STACK[0x6508] - 2089628408) & 0x7C8D32F7) + 5188)) ^ (STACK[0x6508] + 2925))))();
}

uint64_t sub_10072D034()
{
  int v0;
  unint64_t v1;

  LODWORD(STACK[0x9498]) = -1926392729;
  STACK[0xB7F0] = 0;
  STACK[0xAFC0] = STACK[0x9D08];
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x4997 ^ (v0 + 18493))) - 8))(5121, 2013256049);
}

uint64_t sub_10072D0BC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 912) ^ (12384 * v0)))
                            - (LODWORD(STACK[0x4B08]) ^ 0x107ALL)))();
}

uint64_t sub_10072D104()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 1109)) - (v0 + 4598) + 7902))();
}

uint64_t sub_10072D148()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 912) ^ (21183 * v0)))
                            - ((3 * (STACK[0x6508] ^ 0x141A)) ^ 0xD48)))();
}

uint64_t sub_10072D180@<X0>(int a1@<W8>)
{
  unint64_t v1;

  STACK[0x72F0] = 0;
  LODWORD(STACK[0x8E00]) = -1926392729;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1) - 8;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (a1 ^ 0x1C94))
                                                   - ((a1 + 657256618) & 0xD8D35773)
                                                   + 21850))(5121, 2013256049);
}

uint64_t sub_10072D204()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((((STACK[0x6508] - 3667) | 0x2440) ^ 0x4B51) * v0) ^ (STACK[0x6508] + 5680)))
                            - ((STACK[0x6508] + 742958986) | 0x43010442)
                            + 1867103294))();
}

uint64_t sub_10072D268()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((197 * (LODWORD(STACK[0x8E00]) != -1926392721)) ^ v2))
                            - ((v2 - 6662) ^ (v0 + 1003) ^ (unint64_t)(v1 + 8))))();
}

uint64_t sub_10072D2C4()
{
  int v0;
  unsigned int v1;
  int v2;

  LODWORD(STACK[0xDC30]) = v2;
  LOBYTE(STACK[0xDC37]) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((v0 + (v1 ^ v0) + 309) ^ v1 ^ (1206 * (v1 < 0xE771893C))))
                            - 4))();
}

uint64_t sub_10072D310()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x1D1C)) - ((v0 + 4741) ^ 0x1EE6)))();
}

uint64_t sub_10072D354()
{
  int v0;
  int v1;
  unint64_t v2;
  int v3;

  v2 = STACK[0x6508];
  v3 = (STACK[0x6508] - 731734843) & 0x2B9D57EF;
  LODWORD(STACK[0xDC30]) = v1;
  LOBYTE(STACK[0xDC37]) = v0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v3 + 25011) * v0) ^ ((int)v2 - 2891)))
                                          - 4))(5121);
}

uint64_t sub_10072D3B0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 3746))
                            - ((v0 + 246) | 0x1888u)
                            + 7837))();
}

uint64_t sub_10072D3FC()
{
  int v0;

  LODWORD(STACK[0xA7C4]) = -1926392729;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((22439 * LOBYTE(STACK[0xDC37])) ^ (v0 - 830)))
                            - (((v0 - 1878) | 0x418u) ^ 0xD3CLL)))();
}

uint64_t sub_10072D464(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v2 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 4;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2
                                                               + 8
                                                               * (int)((((v1 ^ 0x4E60C7D6) < 0xA42CB2BA)
                                                                      * ((v1 + 18474) ^ 0x43F5)) ^ (v1 - 1521)))
                                                   - 8))(a1, 2013256049);
}

uint64_t sub_10072D4D4()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((v1 == -1926392729) * ((v0 ^ 0x1C90) + 6329)) ^ (v0 - 912)))
                            - 12))();
}

uint64_t sub_10072D524()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((LODWORD(STACK[0xA7C4]) == -1926392761) * (v0 + 11670)) ^ v0))
                            - 12))();
}

uint64_t sub_10072D574()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x1DA7)) - 4))();
}

uint64_t sub_10072D5B8()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((v1 - 1926396943) ^ 0x8D2D95A5 ^ (8997
                                                                                * (((v0 - (v1 - 1926396943)) | (v1 - 1926396943 - v0)) >= 0))))
                            - 12))();
}

uint64_t sub_10072D60C()
{
  int v0;
  int v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  int v8;

  v1 = v0 ^ 0x3B21;
  v2 = ((v0 ^ 0x3B21) - 6935) | 0x36;
  v3 = STACK[0xB7F0];
  STACK[0xDC38] = STACK[0xB7F0];
  LODWORD(STACK[0xDC44]) = STACK[0x9498];
  v4 = STACK[0xC9E8];
  STACK[0xC338] = STACK[0xC9E8];
  v5 = STACK[0x8680];
  STACK[0xAB40] = STACK[0x8680];
  STACK[0xBCB8] = 0;
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  v8 = v6 || v5 == 0;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((v8 * (v2 - 4006)) ^ v1)))();
}

uint64_t sub_10072D6BC@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (a1 - 5694)) - ((a1 + 5014) ^ 0x3EE1)))();
}

uint64_t sub_10072D6F8()
{
  __int16 v0;
  unint64_t v1;

  v1 = STACK[0x6508];
  LOWORD(STACK[0xD7CE]) = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v1 + 2770)) - 4))();
}

uint64_t sub_10072D73C()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (v0 + 11895)))();
}

uint64_t sub_10072D754@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_10072D788()
{
  unsigned __int16 v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (LODWORD(STACK[0x47DC]) ^ (32053 * (v0 == 44524))))
                            - STACK[0x47E0]
                            + 1977))();
}

uint64_t sub_10072D7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v5 + 4999))
                                                                                                  - 4))(145258917, 4111417161, a3, 3613388764, a5, &STACK[0xDEA4]);
}

uint64_t sub_10072D828()
{
  __int16 v0;
  int v1;

  v1 = STACK[0x6508] - 2227;
  LOWORD(STACK[0xD53E]) = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v1 ^ 0x1C8B)) - 4))();
}

uint64_t sub_10072D868()
{
  __int16 v0;
  int v1;

  v1 = STACK[0x6508] - 2209;
  LOWORD(STACK[0xD266]) = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v1 ^ 0x1C9D)) - 4))();
}

uint64_t sub_10072D8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v7 = STACK[0x6508] + 17233;
  v8 = STACK[0x6508] + 2955;
  v9 = *(_DWORD *)(a6 + 428) + 3;
  v10 = v6 ^ 0xC115;
  LODWORD(STACK[0xD564]) = v9 + v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((((v9 + v10) <= LODWORD(STACK[0x6DA0])) * (v7 ^ 0x53C1)) | v8))
                            - 4))();
}

uint64_t sub_10072D924()
{
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * SLODWORD(STACK[0x2158])))();
}

uint64_t sub_10072D940@<X0>(int a1@<W8>)
{
  _BOOL4 v1;

  v1 = a1 < (char)(LODWORD(STACK[0x2168]) ^ 0xA5);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                      + 8 * ((2 * v1) | (32 * v1) | LODWORD(STACK[0x215C])))
                                          - STACK[0x2160]
                                          + 17377))(5121);
}

uint64_t sub_10072D988@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (((a1 < (char)((v1 + 73) ^ 0x34)) * v2) ^ v1)))();
}

uint64_t sub_10072D9B4@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (v1 ^ 0x20AF | (4
                                                        * (((a1 == 1) ^ ((v1 ^ 0xAF)
                                                                                        - 99
                                                                                        + (v1 ^ 0xAF)
                                                                                        - 35
                                                                                        + 1)) & 1))))
                            - 4))();
}

uint64_t sub_10072D9F8()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v2 = v0 | 0x6400;
  v3 = ((uint64_t (*)(uint64_t))STACK[0x5510])(v1);
  STACK[0xD190] = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((119 * (v3 != 0)) ^ v2))
                            - ((v2 - 21440) ^ (151 * (v2 ^ 0x6433u)) ^ 0x1289)))();
}

uint64_t sub_10072DA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;

  LODWORD(STACK[0xB4C4]) = v7;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v6 + 5618)) - 12))(a1, a2, 571663220, a4, a5, a6, 3723304075, 29261);
}

uint64_t sub_10072DB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  _BOOL4 v13;

  v7 = *(_DWORD *)(a6 + 368);
  v8 = (v7 ^ 0xE2B574A0) + LODWORD(STACK[0x29EC]);
  v9 = STACK[0x6508] + 8864;
  v10 = v6 ^ 0xC115;
  LODWORD(STACK[0x6DA0]) = v10;
  v11 = (((v7 ^ 0x5105F10B) - 1359343883) ^ v8 ^ ((v7 ^ 0x3E9D11CC) - 1050481100)) - 1616717463;
  v13 = v11 < 0x12754502 || v10 + 309675266 < v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((1979 * v13) ^ v9)) - 4))();
}

uint64_t sub_10072DC10()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = STACK[0x29B8];
  v2 = ((uint64_t (*)(uint64_t))STACK[0x5510])(v0);
  STACK[0xBEE8] = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((((v1 - 8964) | 0x64) + 26955) * (v2 != 0)) ^ v1))
                            - 4))();
}

uint64_t sub_10072DC80()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v0 - 2927) ^ 0x2255)) - 4))();
}

uint64_t sub_10072DCB4()
{
  __int16 v0;
  unsigned __int16 v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = 60
     * (((((v0 & 6 ^ 0xF4EB) - 7209) ^ 0xB811) - 3233) ^ ((((v0 & 6 ^ 0xF4EB) - 7209) ^ 0x9739) - 9097) ^ ((((v0 & 6 ^ 0xF4EB) - 7209) ^ 0xF7EE) + ((STACK[0x6508] - 849) | 0x1090) - 24851))
     - 5655;
  v2 = v1 | ((unint64_t)(v1 < 0x7E41u) << 16);
  v3 = 33881 - v2;
  v4 = v2 - 30761;
  if ((__int16)((((v0 ^ 0x5CFA) - 23802) ^ ((v0 ^ 0x3986) - 14726) ^ ((v0 ^ 0xA469) + 23447)) - 16107) < 0)
    v4 = v3;
  STACK[0x88D8] = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((26515 * (*(_QWORD *)(STACK[0xC048] - 0x28623712C9340CD6) > v4)) ^ LODWORD(STACK[0x29E8])))
                            - 12))();
}

uint64_t sub_10072DDE0@<X0>(unint64_t a1@<X8>)
{
  int v1;
  int v2;

  v1 = STACK[0x6508] + 2912;
  v2 = STACK[0x6508] - 4198;
  STACK[0x7F38] = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((54 * (((v2 ^ (*(_QWORD *)STACK[0x4D18] == 0)) & 1) == 0)) ^ v1))
                            - 12))();
}

uint64_t sub_10072DE4C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BOOL4 v8;

  v3 = v0 | 0x1080;
  v4 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * v3) - 4;
  v5 = (_QWORD *)STACK[0x4D18];
  STACK[0xEE28] = STACK[0x4D18];
  *(_DWORD *)(v1 + 784) = -299994601
                        - 1705718857 * ((((2 * (v2 - 240)) | 0xC801CCE6) - (v2 - 240) - 1677780595) ^ 0x5992392A)
                        + v3
                        - 26;
  *(_QWORD *)(v1 + 792) = &STACK[0xEE18];
  v6 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v2 - 240);
  v8 = *(_DWORD *)(v1 + 788) != (v3 ^ 0x12) - 4226 || *v5 == 0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4
                                                      + 8
                                                      * (int)(v3 ^ 0xB70 ^ (v8 * ((2113 * (v3 ^ 0x1092)) ^ 0x225F))))
                                          - 12))(v6);
}

uint64_t sub_10072DF34@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = STACK[0x6AD8];
  v5 = *(_QWORD *)(STACK[0x6AD8] + 8 * v1);
  v6 = STACK[0x1EC0];
  *(_DWORD *)(v2 + 792) = (v1 + 427180620) ^ STACK[0x1EC0];
  *(_QWORD *)(v2 + 800) = v5 ^ v6;
  *(_QWORD *)(v2 + 784) = a1;
  v7 = ((uint64_t (*)(uint64_t))STACK[0x5530])(v3 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * (v1 + 6331)) - 12))(v7);
}

uint64_t sub_10072DF84()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;

  v3 = STACK[0x6AD8];
  v4 = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  *(_QWORD *)(v1 + 784) = 0;
  v5 = STACK[0x2148];
  *(_QWORD *)(v1 + 800) = v4 ^ STACK[0x2148];
  *(_DWORD *)(v1 + 792) = (v0 + 427180620) ^ v5;
  v6 = ((uint64_t (*)(uint64_t))STACK[0x5530])(v2 - 240);
  if (*(_DWORD *)STACK[0x4D38])
    v7 = 1;
  else
    v7 = *(_QWORD *)STACK[0x4CD8] == 0;
  v8 = !v7;
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * ((v8 * ((v0 - 12) ^ 0x530E)) ^ (v0 + 5919))))(v6);
}

uint64_t sub_10072DFFC()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  int32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  uint16x8_t v47;
  uint8x16_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  int8x16x4_t v52;

  v2 = *(_DWORD *)(*(_QWORD *)STACK[0x60C0] + (*(_DWORD *)STACK[0x60B8] & 0xBC968BC));
  v3 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL)
                 + ((v2 ^ 0xBC968BCu) & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v2 ^ 0xBC968BCu;
  v4 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v3 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v3;
  v5 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v4 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v4;
  v6 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v5 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v5;
  v7 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v6 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v6;
  v8 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v7 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v7;
  v9 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v8 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v8;
  v10 = *(_DWORD *)((qword_1015FB2C8 ^ 0xB51DBFDD563EF1CALL) + (v9 & (qword_1015FA6A8 ^ 0xDCF8BB15C9174D56))) ^ v9;
  STACK[0xEFE8] = 0;
  v11 = 197748924 * v10;
  v12 = 16777619 * ((197748924 * v10 + 7) ^ (197748924 * v10)) % 7;
  v13 = *(_BYTE *)((unint64_t)&STACK[0xEFE8] | v12);
  *(_BYTE *)((unint64_t)&STACK[0xEFE8] | v12) = 0;
  LOBYTE(STACK[0xEFEF]) = v13;
  v14 = 16777619 * ((197748924 * v10 + 6) ^ (197748924 * v10)) % 6;
  v15 = *(_BYTE *)((unint64_t)&STACK[0xEFE8] | v14);
  *(_BYTE *)((unint64_t)&STACK[0xEFE8] | v14) = STACK[0xEFEE];
  LOBYTE(STACK[0xEFEE]) = v15;
  v16 = 16777619 * ((197748924 * v10 + 5) ^ (197748924 * v10)) % 5;
  v17 = *(_BYTE *)((unint64_t)&STACK[0xEFE8] | v16);
  *(_BYTE *)((unint64_t)&STACK[0xEFE8] | v16) = STACK[0xEFED];
  LOBYTE(STACK[0xEFED]) = v17;
  v18 = STACK[0xEFE8];
  LOBYTE(STACK[0xEFE8]) = STACK[0xEFEC];
  LOBYTE(STACK[0xEFEC]) = v18;
  v19 = 16777619 * ((197748924 * v10 + 3) ^ (197748924 * v10)) % 3;
  v20 = *(_BYTE *)((unint64_t)&STACK[0xEFE8] | v19);
  *(_BYTE *)((unint64_t)&STACK[0xEFE8] | v19) = STACK[0xEFEB];
  LOBYTE(STACK[0xEFEB]) = v20;
  v21 = STACK[0xEFE9];
  LOBYTE(STACK[0xEFEA]) = STACK[0xEFE8];
  LOWORD(STACK[0xEFE8]) = v21;
  v22 = (v11 * v11) ^ v11;
  v23 = (v11 + v11 * v11) ^ v11;
  v24 = v23 + 16777619 * LODWORD(STACK[0xEFEC]);
  LODWORD(STACK[0xEFE8]) = v22 + 16777619 * LODWORD(STACK[0xEFE8]);
  LODWORD(STACK[0xEFEC]) = v24;
  v25 = STACK[0xEFE8] ^ v0;
  v26 = 899433627 * (v25 - v22);
  LODWORD(v25) = 899433627 * (HIDWORD(v25) - v23);
  LODWORD(STACK[0xEFF0]) = v26;
  LODWORD(STACK[0xEFF4]) = v25;
  LOBYTE(STACK[0xEFF1]) = v26;
  LOBYTE(STACK[0xEFF0]) = BYTE2(v26);
  LOBYTE(STACK[0xEFF2]) = BYTE1(v26);
  v27 = HIBYTE(v26);
  v28 = (_BYTE *)((unint64_t)&STACK[0xEFF0] | v19);
  LOBYTE(v26) = *v28;
  *v28 = v27;
  LOBYTE(STACK[0xEFF3]) = v26;
  LOBYTE(v27) = STACK[0xEFF0];
  LOBYTE(STACK[0xEFF0]) = v25;
  LOBYTE(STACK[0xEFF4]) = v27;
  v29 = (_BYTE *)((unint64_t)&STACK[0xEFF0] | v16);
  LOBYTE(v28) = *v29;
  *v29 = BYTE1(v25);
  LOBYTE(STACK[0xEFF5]) = (_BYTE)v28;
  v30 = (_BYTE *)((unint64_t)&STACK[0xEFF0] | v14);
  LOBYTE(v29) = *v30;
  *v30 = BYTE2(v25);
  LOBYTE(STACK[0xEFF6]) = (_BYTE)v29;
  v31 = (_BYTE *)((unint64_t)&STACK[0xEFF0] | v12);
  LOBYTE(v30) = *v31;
  *v31 = BYTE3(v25);
  LOBYTE(STACK[0xEFF7]) = (_BYTE)v30;
  v32 = STACK[0xEFF0];
  v33 = (197748924 * STACK[0xEFF0]) ^ v10;
  for (i = 1; i != 4; ++i)
  {
    v35 = 8 * i;
    v36 = 8 * (16777619 * ((v33 + (_DWORD)i) ^ v33) % i);
    v37 = *(_QWORD *)(v32 + v36) ^ *(_QWORD *)(v32 + 8 * i);
    *(_QWORD *)(v32 + v35) = v37;
    v38 = *(_QWORD *)(v32 + v36) ^ v37;
    *(_QWORD *)(v32 + v36) = v38;
    *(_QWORD *)(v32 + v35) = *(_QWORD *)(v32 + 8 * i) ^ v38;
  }
  v39 = 0;
  v40 = (__n128)xmmword_1015070D0;
  v41 = (__n128)xmmword_1015070E0;
  v42 = (__n128)xmmword_1015070F0;
  v43 = (__n128)xmmword_101507100;
  v44 = vdupq_n_s32(v33);
  v45 = *(int8x16_t *)&STACK[0x4950];
  v46.i64[0] = 0x1000000010;
  v46.i64[1] = 0x1000000010;
  v47.i64[0] = 0x9B009B009B009BLL;
  v47.i64[1] = 0x9B009B009B009BLL;
  do
  {
    v48 = *(uint8x16_t *)(v32 + v39);
    v49 = vmovl_high_u8(v48);
    v50 = vmovl_u8(*(uint8x8_t *)v48.i8);
    v52.val[1] = veorq_s8(veorq_s8((int8x16_t)vmulq_s32(vaddq_s32((int32x4_t)v42, v44), vsubq_s32((int32x4_t)v42, v44)), (int8x16_t)v44), (int8x16_t)vmull_high_u16(v50, v47));
    v52.val[2] = veorq_s8(veorq_s8((int8x16_t)vmulq_s32(vaddq_s32((int32x4_t)v41, v44), vsubq_s32((int32x4_t)v41, v44)), (int8x16_t)v44), (int8x16_t)vmull_u16(*(uint16x4_t *)v49.i8, (uint16x4_t)0x9B009B009B009BLL));
    v52.val[0] = veorq_s8(veorq_s8((int8x16_t)vmulq_s32(vaddq_s32((int32x4_t)v43, v44), vsubq_s32((int32x4_t)v43, v44)), (int8x16_t)v44), (int8x16_t)vmull_u16(*(uint16x4_t *)v50.i8, (uint16x4_t)0x9B009B009B009BLL));
    v52.val[3] = veorq_s8(veorq_s8((int8x16_t)vmulq_s32(vaddq_s32((int32x4_t)v40, v44), vsubq_s32((int32x4_t)v40, v44)), (int8x16_t)v44), (int8x16_t)vmull_high_u16(v49, v47));
    *(int8x16_t *)(v32 + v39) = vqtbl4q_s8(v52, v45);
    v39 += 16;
    v43 = (__n128)vaddq_s32((int32x4_t)v43, v46);
    v42 = (__n128)vaddq_s32((int32x4_t)v42, v46);
    v41 = (__n128)vaddq_s32((int32x4_t)v41, v46);
    v40 = (__n128)vaddq_s32((int32x4_t)v40, v46);
  }
  while (v39 != 32);
  *(_QWORD *)STACK[0x4CD8] = v32;
  return (*(uint64_t (**)(__n128, __n128, __n128, __n128))(STACK[0x6AD8] + 8 * (v1 + 5931)))(v40, v41, v42, v43);
}

uint64_t sub_10072E3EC()
{
  int v0;
  _DWORD *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  *v1 = v0 + ((2 * v2) ^ 0x306E) - 4225;
  v4 = STACK[0x6AD8];
  v5 = STACK[0x2140];
  STACK[0x1D360] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v2 + 13)) ^ STACK[0x2140];
  STACK[0x1D350] = 0;
  LODWORD(STACK[0x1D358]) = (v2 + 427180632) ^ v5;
  ((void (*)(uint64_t))STACK[0x5530])(v3 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4
                                                      + 8
                                                      * ((v2 + 13) ^ 0x2143 ^ (30857
                                                                             * (*(_QWORD *)(STACK[0x56C8] + 8) != 0))))
                                          - 8))(5121);
}

uint64_t sub_10072E48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  unsigned __int16 v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  _BOOL4 v14;

  v8 = STACK[0x6508] + 3053;
  LODWORD(STACK[0xD540]) = v7 ^ 0x8D2D5572;
  v9 = (v7 ^ 0xC115) + v6 + 4;
  LODWORD(STACK[0xD544]) = v9;
  v10 = v9 + 1018065343;
  v11 = (((*(_DWORD *)(a6 + 208) ^ 0x7141CF39) - 1900138297) ^ ((*(_DWORD *)(a6 + 208) ^ 0x7F3E552) - 133424466) ^ ((*(_DWORD *)(a6 + 208) ^ 0xFB9FBE0C) + 73417204))
      - 908327386;
  v12 = v9 > 0xC3518E40;
  v13 = v12 ^ (v11 < 0x3CAE71BF);
  v14 = v10 > v11;
  if (!v13)
    v12 = v14;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((29 * !v12) ^ v8)) - 8))();
}

uint64_t sub_10072E598()
{
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * SLODWORD(STACK[0x2150])))();
}

uint64_t sub_10072E5B8()
{
  __int16 v0;
  BOOL v1;

  v1 = v0 < (__int16)(((STACK[0x6508] - 3846) | 0x5201) ^ 0x466A);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((2 * (((STACK[0x6508] + 83) ^ v1) & 1)) & 0xFB | (4 * (((STACK[0x6508] + 83) ^ v1) & 1))) ^ LODWORD(STACK[0x2154])))
                            - 12))();
}

uint64_t sub_10072E60C()
{
  unsigned int v0;
  __int16 v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(v0 ^ ((v1 > 20701) * v2)))
                            - (v0
                             - 15423)
                            - (v0 ^ 0xFFFFFFFFFFFFBBA7)))();
}

uint64_t sub_10072E64C()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((v1 ^ 0x429A ^ (19 * (v1 ^ 0x1635))) * (v0 == 20702)) ^ v1))
                            - 8))();
}

uint64_t sub_10072E694()
{
  int v0;
  __int16 v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((15806
                                          * ((unsigned __int16)((((v1 ^ 0x771) - 1905) ^ ((v1 ^ 0xF086) + 3962) ^ ((v1 ^ 0x36E2) - 14050))
                                                              + (v0 ^ 0x3B1D)
                                                              - 26692) > 0xFF3Eu)) ^ v0))
                            - 8))();
}

uint64_t sub_10072E720@<X0>(int a1@<W8>)
{
  unsigned int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (((8 * (STACK[0xDFA8] == 0)) | (32 * (STACK[0xDFA8] == 0))) ^ a1))
                            - (v1 ^ 0x1072)))();
}

uint64_t sub_10072E76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v6 ^ 0x1BEC)) - 12))(a1, a2, 571663220, a4, a5, a6, 3723304075, 29261);
}

uint64_t sub_10072EA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned __int16 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;

  LODWORD(STACK[0xD268]) = v4 ^ (((STACK[0x6508] - 3182) | 0x1804) + 12861) ^ 0x8D2D1B3B;
  v5 = (v4 ^ 0xC115) + v3 + 4;
  LODWORD(STACK[0xD26C]) = v5;
  v6 = v5 + 645216230;
  v7 = (((LODWORD(STACK[0xC25C]) ^ 0xC9C64F55) + 909750443) ^ ((LODWORD(STACK[0xC25C]) ^ 0x9B70DCE3) + 1687102237) ^ ((LODWORD(STACK[0xC25C]) ^ 0xDF9B07D1) + 543488047))
     - 1281176499;
  v8 = v5 > 0xD98AC819;
  v9 = v8 ^ (v7 < 0x267537E6);
  v10 = v6 > v7;
  if (!v9)
    v8 = v10;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                                                 + 8
                                                                                 * ((504 * v8) ^ LODWORD(STACK[0x29C0])))
                                                                     - 4))(a1, a2, a3, 1926417666);
}

uint64_t sub_10072EB8C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((((v0 + 1192035254) & 0xB8F2BE76) - 4208)
                                               * (LOWORD(STACK[0xD266]) == 20702)) ^ v0))
                            - 8))();
}

uint64_t sub_10072EBDC()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((227
                                          * ((((v1 ^ 0xB1EB23F6) - 1019639428) ^ ((v1 ^ 0x3A688C5E) + 1220159188) ^ ((v1 ^ 0x8B836EBD) - 112081871))
                                           - 1926392922 >= (((14 * ((v0 - 11993) ^ 0x1E5D) - 3558) | 0x40) ^ 0xFFFFFDEF))) ^ (v0 - 11993)))
                            - 8))();
}

uint64_t sub_10072EC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v6 ^ 0x1A35)) - 12))(a1, a2, 571663220, a4, a5, a6, 3723304075, 29261);
}

uint64_t sub_10072EFA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;

  v7 = STACK[0x6508];
  v8 = STACK[0x6508] + 1407;
  v9 = LODWORD(STACK[0xDD60]) + 10;
  LODWORD(STACK[0xD2F4]) = v9;
  v10 = v6 ^ 0xC115;
  LODWORD(STACK[0xD2F8]) = v10;
  v11 = v9 + v10;
  v12 = v11 - 1565182871;
  v13 = ((v7 - 1025083875 + (LODWORD(STACK[0xDD4C]) ^ 0x3D19796D)) ^ ((LODWORD(STACK[0xDD4C]) ^ 0xD4FB43C8) + 721730616) ^ ((LODWORD(STACK[0xDD4C]) ^ 0x64CFAEC2) - 1691332290))
      + 803391696;
  v14 = v11 > 0x5D4ACB96;
  v15 = v14 ^ (v13 < 0xA2B53469);
  v16 = v12 > v13;
  if (!v15)
    v14 = v16;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x6AD8]
                                                                                                  + 8 * ((30272 * v14) ^ v8)))(a1, a2, a3, a4, a5, a6, 103284736);
}

uint64_t sub_10072F0AC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - (v0 + 13845) + 19039))();
}

uint64_t sub_10072F0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v6;
  __int16 v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;

  v7 = STACK[0x6508] ^ 0x1076;
  v8 = STACK[0x6508] + 2626;
  v9 = LODWORD(STACK[0xDD98]) + 10;
  LODWORD(STACK[0xD310]) = v9;
  v10 = (unsigned __int16)((v7 - 16107) ^ v6);
  LODWORD(STACK[0xD314]) = v10;
  v11 = v10 + v9;
  v12 = v11 - 658085804;
  v13 = (((LODWORD(STACK[0xDD84]) ^ 0xD820961A) + 668953062) ^ ((LODWORD(STACK[0xDD84]) ^ 0x54F16D5D) - 1425108317) ^ ((LODWORD(STACK[0xDD84]) ^ 0x1FC6F20) - 33320736))
      + 1710488763;
  v14 = v11 > 0x273997AB;
  v15 = v14 ^ (v13 < 0xD8C66854);
  v16 = v12 > v13;
  if (!v15)
    v14 = v16;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x6AD8]
                                                                                                  + 8 * ((444 * !v14) ^ v8)))(a1, a2, a3, a4, a5, a6, 103284736);
}

uint64_t sub_10072F214()
{
  int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (v0 ^ 0x4209 ^ (3195
                                              * ((((43 * (v0 ^ 0x62)) ^ (v0 - 1) ^ (((LODWORD(STACK[0xC8CC]) - v0) | (v0 - LODWORD(STACK[0xC8CC]))) >> 31)) & 1) == 0)))))();
}

uint64_t sub_10072F290()
{
  unsigned __int16 v0;
  int v1;
  uint64_t v2;

  v1 = STACK[0x6508] - 3673;
  LODWORD(STACK[0x6F24]) = v0 ^ 0xC115;
  v2 = ((uint64_t (*)(_QWORD))STACK[0x5510])((v1 | 0x402) ^ 0x8D2D9278 ^ LODWORD(STACK[0xDC44]));
  STACK[0xBCB8] = v2;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((5550 * (v2 != 0)) ^ LODWORD(STACK[0x29BC]))))();
}

uint64_t sub_10072F31C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ 0x5459)) - 8))();
}

uint64_t sub_10072F35C()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((55
                                          * ((unsigned __int16)((LOWORD(STACK[0x29DC]) | 6)
                                                              - 24707
                                                              + (((LOWORD(STACK[0xD7CE]) ^ 0x6065) - 24677) ^ ((LOWORD(STACK[0xD7CE]) ^ 0x3536) - 13622) ^ ((LOWORD(STACK[0xD7CE]) ^ 0x9446) + (STACK[0x29E4] & 0x7EFE) + 17702))) > 0xFFFDu)) ^ LODWORD(STACK[0x29E0])))
                            - 12))();
}

uint64_t sub_10072F3F8@<X0>(unsigned int a1@<W8>)
{
  LODWORD(STACK[0x6B4C]) = 1926417665;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(a1 ^ 0x113933E9 ^ (14740 * (a1 < 0x58C6E225))))
                            - (a1
                             - 288949502)
                            + 8586))();
}

uint64_t sub_10072F45C()
{
  int v0;
  unsigned __int16 v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * ((31243
                                * (((((v0 + 1179205731) & 0xB9B6BF57) - 12743) ^ ((v0 - 8502) | 0x1016u))
                                 + (LODWORD(STACK[0x9748]) - 1930690922) == (v1 ^ 0xC115))) ^ v0)))();
}

uint64_t sub_10072F4D8(__int16 a1, __int16 a2)
{
  int v2;
  char v3;
  __int16 v4;

  v4 = ((v3 & 0xF ^ (a2 + v2 + 725) ^ (v2 + a1) & 0x757F ^ 0x7317)
      - 2 * ((v3 & 0xF ^ (a2 + v2 + 725) ^ (v2 + a1) & 0x757F ^ 0x7317) & 3)
      - 21437) ^ 0xBD58;
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * ((199 * ((unsigned __int16)(v4 - ((2 * v4) & 0x20BA)) != 61680)) ^ v2)))();
}

uint64_t sub_10072F54C@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x6B4C]) = 1926417665;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (a1 + 3356)))();
}

uint64_t sub_10072F578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 v6;
  unsigned int v7;
  BOOL v8;
  int v9;

  v7 = v6 ^ 0xC115;
  LODWORD(STACK[0xD5E4]) = v7;
  v8 = (((LODWORD(STACK[0xA908]) ^ LODWORD(STACK[0x29D8])) - 785344977) ^ ((LODWORD(STACK[0xA908]) ^ 0x89FE14A4)
                                                                         + 1979837276) ^ ((LODWORD(STACK[0xA908]) ^ 0x2A1CE912)
                                                                                        - 706537746))
     - 1926392733 >= v7;
  if (v8)
    v9 = -1926392729;
  else
    v9 = 1926417665;
  *(_DWORD *)(a6 + 548) = v9;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((159 * v8) ^ LODWORD(STACK[0x29D0]))))();
}

uint64_t sub_10072F62C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, unsigned __int16 a5@<W8>)
{
  int v5;
  unint64_t v6;

  v5 = STACK[0x6508] - 3836;
  STACK[0xD5E8] = STACK[0x7208];
  STACK[0xD5F0] = a5;
  v6 = STACK[0x6AD8];
  STACK[0xD270] = *(_QWORD *)(STACK[0x6AD8] + 8 * v5) - 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                                                  + 8 * (v5 ^ 0x1D1E)))(83, a1, 4169, a2, a3, a4, 14990);
}

uint64_t sub_10072F6F4()
{
  __int16 v0;

  *(_WORD *)STACK[0xE0B0] = v0;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * SLODWORD(STACK[0x29D4])))();
}

uint64_t sub_10072F724()
{
  unsigned __int16 v0;
  int v1;
  int v2;

  v1 = 192 * (STACK[0x6508] ^ 0x1070);
  v2 = v0 ^ 0xC115;
  LODWORD(STACK[0xACEC]) = v2;
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * ((((v2 + 10) > LODWORD(STACK[0xBA1C])) * (v1 ^ 0x483)) ^ LODWORD(STACK[0x29C8]))))();
}

uint64_t sub_10072F78C@<X0>(int a1@<W8>)
{
  unint64_t v1;

  STACK[0x77A0] = STACK[0x74A8] + 10;
  v1 = STACK[0x6AD8];
  STACK[0x86A0] = ((a1 + 16513) | 0xA80u) - 20361 + *(_QWORD *)(STACK[0x6AD8] + 8 * a1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (a1 ^ 0x23F2)) - 8))();
}

uint64_t sub_10072F7EC()
{
  unsigned __int16 v0;
  unint64_t v1;
  int v2;
  unsigned int v3;
  _BOOL4 v5;

  v1 = STACK[0x6508];
  v2 = v0 ^ 0xC115;
  LODWORD(STACK[0xC084]) = v2;
  v3 = (((v1 ^ 0x60CDB55E ^ LODWORD(STACK[0xE014])) - 1624089896) ^ ((LODWORD(STACK[0xE014]) ^ 0xD9E630CE) + 639225650) ^ ((LODWORD(STACK[0xE014]) ^ 0x34060181) - 872808833))
     + 906702812;
  v5 = v3 < 0xA8DD9B75 || v2 - 1461871755 < v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((242 * v5) ^ LODWORD(STACK[0x29CC]))) - 4))();
}

uint64_t sub_10072F8C8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  v2 = ((uint64_t (*)(uint64_t))STACK[0x5510])(v1);
  STACK[0xBEB0] = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v2 != 0) * ((v0 + 2995) ^ 0x5B5D)) ^ v0)) - 12))();
}

uint64_t sub_10072F92C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((9235 * ((v0 ^ 0xC8184D41) > LODWORD(STACK[0x1D08]))) ^ (((v0 - 1872096709) & 0x6F95F977 ^ 0xFFFFEE08) + v0)))
                            - 4))();
}

uint64_t sub_10072F98C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;

  v8 = STACK[0x6AD8];
  STACK[0x7B48] = *(_QWORD *)(STACK[0x6AD8] + 8 * v4) + a1;
  v9 = v6 & (27 * (v2 ^ v1) + 64737);
  v10 = STACK[0xC768];
  STACK[0xC768] += 16;
  v11 = (unint64_t *)((char *)&STACK[0x10000] + v10);
  *v11 = 0x25552F58AE41DDEBLL;
  v11[1] = 0x210A236918970B00;
  v12 = 192761461 * ((2046310690 - ((v7 - 240) | 0x79F83922) + ((v7 - 240) | 0x8607C6DD)) ^ 0xF9A2A77);
  STACK[0x1D370] = (unint64_t)v11;
  LODWORD(STACK[0x1D354]) = v12
                          + 2093863384
                          + ((((v9 - ((2 * v6) & 0xA240) + 751522080) ^ 0x9E77BA59) + 1636320679) ^ (((v9 - ((2 * v6) & 0xA240) + 751522080) ^ 0x10458B31) - 272993073) ^ (((v9 - ((2 * v6) & 0xA240) + 751522080) ^ 0xA2F96048) + 1560715192))
                          + 514;
  LODWORD(STACK[0x1D350]) = v2 - v12 + 3012;
  STACK[0x1D358] = v3 + 3;
  STACK[0x1D368] = v5;
  v13 = ((uint64_t (*)(uint64_t))((char *)*(&off_1015B46D0 + v2 - 2806) - 12))(v7 - 240);
  v14 = LODWORD(STACK[0x1D360]) == 1775811675;
  if (LODWORD(STACK[0x1D360]) == 1775811675)
    v15 = 0;
  else
    v15 = -20;
  LODWORD(STACK[0xE3B0]) = v15;
  STACK[0xC768] -= 16;
  if (v9 == v6)
    v14 = 0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v8 + 8 * ((477 * v14) ^ (v2 + 9326))) - 4))(v13);
}

uint64_t sub_10072FB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v6 + 5590)) - 12))(a1, a2, 571663220, a4, a5, a6, 3723304075, 29261);
}

uint64_t sub_10072FE64()
{
  __int16 v0;
  int v1;
  int v2;

  v1 = STACK[0x6508] - 3180;
  v2 = (unsigned __int16)(v0 ^ (v1 | 0x60) ^ 0xC57F);
  LODWORD(STACK[0xC934]) = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((((v2 + 10) <= LODWORD(STACK[0x89B4])) * ((v1 ^ 0x1058) - 5126)) ^ LODWORD(STACK[0x29C4])))
                            - 4))();
}

uint64_t sub_10072FEE0@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  STACK[0xAC98] = STACK[0x8248] + 10;
  v1 = STACK[0x6AD8];
  STACK[0x86A0] = (((_DWORD)a1 + 1462819699) & 0xA8CF6FA3) - 20357 + *(_QWORD *)(STACK[0x6AD8] + 8 * a1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)(a1 ^ 0x2318)) - 8))();
}

uint64_t sub_10072FF54@<X0>(int a1@<W8>)
{
  int v1;
  _BOOL4 v2;

  v2 = a1 < (char)(((v1 - 9) ^ 0x67) + 10);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((4 * v2) | (8 * v2)) ^ v1)) - 4))();
}

uint64_t sub_10072FF8C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  v2 = ((uint64_t (*)(uint64_t))STACK[0x5510])(v1);
  STACK[0xAEB0] = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((16136 * (v2 != 0)) ^ v0)) - 4))();
}

uint64_t sub_10072FFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  unint64_t v8;

  LODWORD(STACK[0x7864]) = v7;
  v8 = STACK[0x6AD8];
  STACK[0xD270] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v6 - 3841)) - 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8
                                                                                                  + 8 * (v6 + 3054)))(83, a2, 4169, a4, a5, a6, 14990);
}

uint64_t sub_1007300C4()
{
  __int16 v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((((v1 | 0x3610) - 1931173731) & 0x731B3FBB ^ 0x1719) * (v0 > -22848)) ^ (v1 | 0x3610)))
                            - 2969 * ((v1 | 0x3610) ^ 0x36DBu)
                            + 5934))();
}

uint64_t sub_10073012C()
{
  int v0;
  unsigned int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((18922 * (v0 == ((v1 - 1077617716) & 0x1D77 ^ 0xB6B7))) ^ v1))
                            - ((v1 + 12403) ^ 0x47ADLL)))();
}

uint64_t sub_100730188()
{
  int v0;
  __int16 v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((70
                                          * ((unsigned __int16)((((v1 ^ 0x3FCA) - 16330) ^ ((v1 ^ 0xBA25) + 17883) ^ ((v1 ^ 0x44FA) + v0 - 3648 + (v0 ^ 0x57D3) + 28971))
                                                              - 18668) < 0xF5FFu)) ^ v0))
                            - 4))();
}

uint64_t sub_10073021C@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((((STACK[0xDF78] == 0) ^ (a1 - 32)) & 1 | ((((STACK[0xDF78] == 0) ^ (a1 - 32)) & 1) << 7)) ^ a1))
                            - ((49 * (a1 ^ 0x396Au)) ^ 0x2D7)))();
}

uint64_t sub_100730280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v6 + 5638)) - 12))(a1, a2, 571663220, a4, a5, a6, 3723304075, 29261);
}

uint64_t sub_10073034C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 3834)) - 8))();
}

uint64_t sub_100730364()
{
  unsigned int v0;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * (int)(v0 ^ 0xF50F7882 ^ (1663 * (v0 > ((v0 + 183540897) | 0x1066) + 616943694)))))();
}

uint64_t sub_1007303C0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((6115 * ((v0 - 280534822) > 0x864E81D)) ^ (v0 - 264)))
                            - 12))();
}

uint64_t sub_10073046C@<X0>(unsigned __int8 a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((5600
                                          * (a1 == (((v1 + 99) | 5) ^ ((v1 ^ 0xEB) - 117)))) ^ v1))
                            - 4))();
}

uint64_t sub_1007304B4()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((v0 - 27952 + ((v0 - 1068064270) & 0x3FA9117E)) * (STACK[0xE038] == 0)) ^ v0))
                            - 12))();
}

uint64_t sub_10073050C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, int a5@<W8>)
{
  unint64_t v5;

  v5 = STACK[0x6AD8];
  STACK[0xD270] = *(_QWORD *)(STACK[0x6AD8] + 8 * a5) - 8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                                                  + 8 * (a5 ^ 0x1D08)))(83, a1, 4169, a2, a3, a4, 14990);
}

uint64_t sub_1007307F8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 2948)) - 4))();
}

uint64_t sub_100730818()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((117 * (v0 == ((unsigned __int16)(49 * (v1 ^ 0x1764)) ^ 0x56D))) ^ v1))
                            - 8))();
}

uint64_t sub_100730860()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(v0 ^ 0xD24D ^ (((((v1 - v0) | (v0 - v1)) >> 15) & 1)
                                                             * (v0 - 49208))))
                            - 8))();
}

uint64_t sub_1007308C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(((((v6 + 1090467320) & 0xBF003D6E) - 13409) * (STACK[0xDF88] == 0)) ^ (v6 - 27348))) - 4))(a1, a2, 3613384550, a4, 1772489163, a6, STACK[0x4A80], 19791);
}

uint64_t sub_100730970()
{
  uint64_t v0;
  unint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((v2 - 2122) | (16
                                                        * (v3
                                                         + ((((v2 - 20652) | 0x4872u) - 15745) ^ 0xA4506C180091477)
                                                         + ((2 * (_DWORD)v0) & 0xFFEDF7FE)
                                                         + (v0 ^ 0xF5BAF93E7FF6FBFFLL) <= v1))))
                            - 8))();
}

uint64_t sub_1007309F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unsigned int v22;
  unint64_t v23;

  v19 = v10 + v13 + (v9 ^ v12);
  v20 = v19 + v7;
  v21 = (_BYTE *)(v8 + v19);
  v22 = ((v21 ^ *(_DWORD *)(*v16 + (*v18 & a4))) & 0x7FFFFFFF) * a5;
  v23 = (v22 ^ HIWORD(v22)) * a5;
  *v21 = *(_BYTE *)(a7 + (v23 >> 24)) ^ *(_BYTE *)(v11 + v20) ^ *(_BYTE *)((v23 >> 24) + v17 + 2) ^ *(_BYTE *)(v15 + (v23 >> 24)) ^ v23 ^ (BYTE3(v23) * v14);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((11968 * (v10 + v13 + (v9 ^ v12) == 0)) ^ v9)) - 8))();
}

uint64_t sub_100730A80()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((((v1 - 941) ^ (v1 - 1724) ^ 0x3817) * (v0 == 34964)) ^ v1))
                            - 8))();
}

uint64_t sub_100730AB8()
{
  int v0;
  unsigned __int16 v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((v1 == ((unsigned __int16)(v0 - 783) ^ 0xD16B)) * ((v0 + 16057) ^ 0x138B)) ^ v0))
                            - 8))();
}

uint64_t sub_100730B10()
{
  int v0;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x6AD8]
                                                                       + 8
                                                                       * ((((v0 - 909893259) & 0x363BBFEF ^ ((v0 - 3312) | 0x11) ^ 0x76AB)
                                                                         * (STACK[0xDF98] == 0x1F14118568BA84B7)) ^ v0)))(30420, 25364, 17755, 14946);
}

uint64_t sub_100730B8C()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((25404
                                          * (v3
                                           + (v0 ^ 0x7F9FFBBFE27EEFFFLL)
                                           - 0x7F9FFBBFE27EEFFFLL
                                           + ((v0 << ((v2 - 8) & 0xEF ^ 0x8A)) & 0x1C4FDDFFEuLL) <= v1 - 0x1F14118568BA84B7)) ^ v2))
                            - ((v2 + 434539544) & 0xE61973CF ^ 0x338FLL)))();
}

uint64_t sub_100730C50(unsigned int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v8 = v6 - 1;
  *(_BYTE *)(v4 + v8) = *(_BYTE *)(v7 + v8 + v3);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v8 != 0) * a2) ^ v5)) - (v5 ^ a1) + a3))();
}

uint64_t sub_100730C88()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 783)) - 8))();
}

uint64_t sub_100730CA8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;

  *(_BYTE *)(v5 + v6) = *(_BYTE *)(v9 + v6 + v4);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v6 + 1 < 8) * (7 * (v7 ^ a4) + v8)) ^ v7)) - 4))();
}

uint64_t sub_100730CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (((((v6 ^ 0x5529) + 10114) ^ (v6 - 13545)) * ((*(_BYTE *)(a6 + 283) & 1) == 0)) ^ v6)))();
}

uint64_t sub_100730D28@<X0>(int a1@<W8>)
{
  int v1;

  *(_DWORD *)(STACK[0xDFA0] - 0x7D97521535866009) = a1;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (v1 + 13545)))();
}

uint64_t sub_100730D60()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 783)) - 8))();
}

uint64_t sub_100730D88()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 7682)) - 8))();
}

uint64_t sub_100730DB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned int v25;
  unint64_t v26;

  v22 = ((2 * (_DWORD)v8) & v14) + (v8 ^ v13);
  v23 = v12 + v22;
  v24 = (_BYTE *)(v22 + v9 + v15);
  v25 = ((v24 ^ *(_DWORD *)(*v19 + (*v21 & ((v10 + 9206) ^ (a3 - 950))))) & 0x7FFFFFFF) * a5;
  v26 = (v25 ^ HIWORD(v25)) * a5;
  *v24 = *(_BYTE *)(a7 + (v26 >> 24)) ^ *(_BYTE *)(v16 + v23) ^ *(_BYTE *)((v26 >> 24) + v20 + 2) ^ *(_BYTE *)(v18 + (v26 >> 24)) ^ v26 ^ (BYTE3(v26) * v17);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v8 == 15) * a8) ^ v11)) - 8))();
}

uint64_t sub_100730E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * ((233 * ((((v6 - 9206) ^ *(unsigned __int8 *)(a6 + 282)) & 1) == 0)) ^ v6)))();
}

uint64_t sub_100730E98@<X0>(int a1@<W8>)
{
  int v1;

  *(_DWORD *)(STACK[0xDF90] - 0x26B57DE6AC93201) = a1;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (v1 + 9206)))();
}

uint64_t sub_100730ECC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((v0 - 414043545) ^ 0xE7524168 ^ (4144 * (v0 != -2110427641))))
                            - 8))();
}

uint64_t sub_100730F20()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((STACK[0x6508] + 650296858) ^ 0x26C2986F ^ (63715
                                                                                          * (STACK[0x6508]
                                                                                           + 650296858 == ((5849 * (STACK[0x6508] ^ 0x1075)) ^ 0xD0D40415)))))
                            - 4))();
}

uint64_t sub_100730F84()
{
  int v0;
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (((v1 < (v0 ^ 0x72D28988)) * ((v0 ^ 0x5AF) - 16590)) ^ v0)))();
}

uint64_t sub_100730FD8@<X0>(int a1@<W8>)
{
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (((((a1 - 15423) | 0x410C) ^ 0x4369) * (v1 < 1926417543)) ^ a1)))();
}

uint64_t sub_100731018()
{
  int v0;
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((v3 == (((v2 + v0 - 8731 + 3841) | 0x31263000) ^ 0xBE8B2520)) * v1) ^ v0))
                            - 8))();
}

uint64_t sub_100731064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(STACK[0x6AD8]
                                                                                         + 8
                                                                                         * ((15
                                                                                           * (((LODWORD(STACK[0x6F24]) == 0) ^ v4 ^ 0xF3) & 1)) ^ v4))
                                                                             - (v4 ^ 0x5CCu)
                                                                             + 9348))(a1, a2, a3, a4, 0);
}

uint64_t sub_1007310BC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))(*(_QWORD *)(STACK[0x6AD8] + 8 * v2)
                                                                            - 14 * (v2 ^ 0x1A06u)
                                                                            + v3))(0, a2, STACK[0xD200], 0);
}

uint64_t sub_100731134()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ (126 * (v1 < 1926417715))))
                            - ((14 * (v0 ^ 0x43B8) + 7121) | 0x922u)
                            + 18799))();
}

uint64_t sub_10073118C()
{
  int v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((26583 * (((v2 == v1 + 2) ^ v0 ^ 0xCF) & 1)) ^ v0))
                            - ((v0 - 5144) | 6u)
                            + 4206))();
}

uint64_t sub_1007311E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (a4 + 15899)) - 12))();
}

uint64_t sub_100731200(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int v5;
  unsigned int v6;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((a4 + 2113) ^ (10587 * (v6 >= v5))))
                                          - ((a4 + 4302) ^ 0x4EAu)
                                          + 9634))(a5);
}

uint64_t sub_100731248(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;

  v8 = ((2 * (a4 + ((a6 + 150425009) & 0xF708CFFF ^ (a6 - 66201921) & 0x3F21BF7 ^ 0x5B3B))) & 0xE4DC8EFE)
     + ((a4 + ((a6 + 150425009) & 0xF708CFFF ^ (a6 - 66201921) & 0x3F21BF7 ^ 0x5B3B)) ^ 0xF26E477F)
     + 227653761;
  v9 = 1772489163 * ((1772489163 * ((_DWORD)v7 + (_DWORD)v8)) ^ ((1772489163 * (v7 + v8)) >> 16));
  LODWORD(v9) = *((unsigned __int8 *)*(&off_1015B46D0 + a6 - 9085) + (v9 >> 24)) ^ *(unsigned __int8 *)(v7 + v8) ^ *((unsigned __int8 *)*(&off_1015B46D0 + (a6 & STACK[0x1F20])) + (v9 >> 24) - 2) ^ *((unsigned __int8 *)*(&off_1015B46D0 + (a6 ^ 0x2234)) + (v9 >> 24) - 4) ^ v9 ^ (119 * ((1772489163 * ((1772489163 * ((_DWORD)v7 + (_DWORD)v8)) ^ ((1772489163 * (v7 + v8)) >> 16))) >> 24));
  v10 = (_BYTE *)(v7 + (v8 + 1));
  v11 = 1772489163 * ((1772489163 * (_DWORD)v10) ^ ((1772489163 * (_DWORD)v10) >> 16));
  LOBYTE(v10) = *(_BYTE *)(STACK[0x42F0] + (v11 >> 24)) ^ *v10 ^ *(_BYTE *)((v11 >> 24) + STACK[0x42F8] + 2) ^ *(_BYTE *)(STACK[0x4300] + (v11 >> 24)) ^ v11 ^ (-17 * BYTE3(v11));
  LOWORD(v9) = (v10 | (unsigned __int16)((_WORD)v9 << 8))
             - 2 * ((v10 & 0x4E | ((_WORD)v9 << 8) & 0x604E) ^ v10 & 6)
             - 8120;
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * ((69
                                * (a4
                                 + 57419
                                 + ((((unsigned __int16)v9 ^ 0x6E3B8B8D) - 1849396109) ^ (((unsigned __int16)v9 ^ 0xA6FB9921)
                                                                                        + 1493460703) ^ (((unsigned __int16)v9 ^ 0xC8C0F2E4) + 926879004)) > v6)) ^ a6)))();
}

uint64_t sub_100731428(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unint64_t v10;
  int v11;

  v8 = (unsigned __int8 *)(v5 + a4);
  v9 = *v8;
  v10 = 1772489163 * (((1772489163 * (_DWORD)v8) >> ((a5 + 62) ^ 0xB3)) ^ (1772489163 * (_DWORD)v8));
  v11 = *(unsigned __int8 *)(v6 + (v10 >> 24)) ^ v9 ^ *(unsigned __int8 *)((v10 >> 24) + v7 + 2) ^ *(unsigned __int8 *)(a2 + (v10 >> 24)) ^ v10 ^ (119 * (v10 >> 24));
  LODWORD(v10) = ((a5 - 122 + (v11 ^ 0x38) + 85) ^ ((v11 ^ 0x8A) - 114) ^ ((v11 ^ 0xB2) - 74)) != 13;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((2 * (_DWORD)v10) | (16 * (_DWORD)v10) | a5)) - 4))();
}

uint64_t sub_1007314E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  char v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((12324
                                          * ((((v7 ^ 0xFE) + 74) ^ ((v7 ^ 0x33) - 123) ^ ((v7 ^ 0xCD) + ((a7 - 109) | 0x40) + 5)) == 190)) ^ a7))
                            - 12))();
}

uint64_t sub_100731540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned __int16 a8)
{
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (((a8 == ((unsigned __int16)a7 ^ 0xECFB)) * (((a7 + 6472) ^ 0x66B4) + 12957)) ^ (a7 + 6472))))();
}

uint64_t sub_100731588(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (a4 + 8866)) - 8))();
}

uint64_t sub_1007315F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8)
{
  int v8;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8 * ((((((v8 | 0x2000) - 8619) | 0x88A) + 26507) * (a8 == 57432)) ^ (v8 | 0x2000))))();
}

uint64_t sub_10073163C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (a4 ^ 0x238F)) - 8))();
}

uint64_t sub_1007316B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(STACK[0x6AD8]
                                                               + 8
                                                               * (((v6 + a6 - 0x275AFDA9095FA769 > v7)
                                                                 * ((a3 + 3) ^ 0x3B39)) ^ a3))
                                                   - 12))(a1, a2);
}

uint64_t sub_100731714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  char v13;
  char *v14;
  char v15;
  unint64_t v16;

  v14 = (char *)(v6 + a4 + a6);
  v15 = *v14;
  v16 = (((_DWORD)v14 * (v10 + a5 + 1119)) ^ (((_DWORD)v14 * (v10 + a5 + 1119)) >> 16)) * v11;
  *(_BYTE *)(v7 + a4) = *(_BYTE *)(v8 + (v16 >> 24)) ^ v15 ^ *(_BYTE *)((v16 >> 24) + v9 + 2) ^ *(_BYTE *)(a2 + (v16 >> 24)) ^ v16 ^ (BYTE3(v16) * v13);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((a4 == 15) * v12) ^ a5)) - 12))();
}

uint64_t sub_100731788(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;

  v13 = a8 - 1;
  v14 = ((((_DWORD)a7 + (_DWORD)v13) * v11) ^ (((a7 + v13) * v11) >> 16))
      * (((a3 - 10963) | 0x10) + 1772484949);
  *(_BYTE *)(v8 + v13) = *(_BYTE *)(v9 + (v14 >> 24)) ^ *(_BYTE *)(a7 + v13) ^ *(_BYTE *)((v14 >> 24) + v10 + 2) ^ *(_BYTE *)(a2 + (v14 >> 24)) ^ v14 ^ (BYTE3(v14) * v12);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((23005 * (v13 == 0)) ^ a3)) - 12))();
}

uint64_t sub_100731808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t);

  return v3(a1, a2, v2, STACK[0x6508], 1);
}

uint64_t sub_10073181C@<X0>(int a1@<W8>)
{
  int v1;
  _BOOL4 v2;

  v2 = v1 < a1 + 1926386049 + ((a1 - 15475) | 0x4140) - 1723;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (((2 * v2) | (32 * v2)) ^ (a1 + 5562))))();
}

uint64_t sub_100731874@<X0>(int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * ((4420 * (v1 == ((a1 + 2059031191) & 0x85457A7F ^ 0x72D2DCF1))) ^ a1))
                            - (a1 ^ 0x33A6F218u)
                            + 866562367))();
}

uint64_t sub_1007318DC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 5138)) - 8))();
}

uint64_t sub_100731900@<X0>(int a1@<W8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((4676 * (a1 ^ 0x4979) - 9128) * (v2 < v1 + 650)) ^ a1))
                            - 8))();
}

uint64_t sub_100731940()
{
  int v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((v2 != (((v1 + v0 + 2905) | 0x21868145) ^ 0x41747C74))
                                          * ((v0 - 5138) ^ 0x77A1)) ^ v0))
                            - 8))();
}

uint64_t sub_100731990()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ (26583 * (v1 != 1926417591))))
                            - ((v0 + 822242495) | 0x2A42000u)
                            - (((v0 - 9330) | 0x1060u) ^ 0xFFFFFFFFCC595EB7)))();
}

uint64_t sub_1007319F8()
{
  int v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((26583
                                          * (v1 != (((v0 ^ 0x248F) + 866562368) ^ 0x41740E52) + 602 * (v0 ^ 0x248F))) ^ v0))
                            - 8))();
}

uint64_t sub_100731A48(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v7;
  unint64_t v8;

  STACK[0xD1F0] = v7;
  STACK[0xD1F8] = v8;
  STACK[0xD200] = a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * a7) - (a7 + 866545128) + 866562367))();
}

uint64_t sub_100731A94@<X0>(unsigned int a1@<W8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(a1 ^ 0x33A695CF ^ (28064 * (a1 > (((a1 ^ 0x33A6B125) * v1) ^ 0xE1ECC8B4)))))
                            - 8))();
}

uint64_t sub_100731AEC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((4 * (STACK[0xBCB8] != 0)) | (16 * (STACK[0xBCB8] != 0))) ^ (v0 + 21142)))
                            - 8))();
}

uint64_t sub_100731B24()
{
  int v0;
  uint64_t v1;

  v1 = sub_10009A6DC();
  return (*(uint64_t (**)(uint64_t))(STACK[0x6AD8] + 8 * (v0 + 6929)))(v1);
}

uint64_t sub_100731B3C(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;

  v3 = STACK[0x6AD8];
  STACK[0x6CA8] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v2 - 3715)) - 4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * (((v2 + 2035) ^ 0x9AC) + v2 - 3715))
                                                                                                - 4))(a1, a2, 1620702590, 4294967291, 23987, 4844, 2674262670);
}

uint64_t sub_100731B98(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;

  STACK[0xD1F0] = v3;
  STACK[0xD1F8] = v4;
  STACK[0xD200] = a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v5) - ((v5 + 1336165785) & 0xB05BBDAA) + 9348))();
}

uint64_t sub_100731BEC()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8))();
}

uint64_t sub_100731C2C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((STACK[0x6508] - 3684) ^ (23325 * (v0 == -1926392729))))
                            - ((STACK[0x6508] - 1586465151) & 0x5E8F7FDF)
                            + 1743))();
}

uint64_t sub_100731C80@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x7D40] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1) - 4;
  return ((uint64_t (*)(void))(4294967287
                            - (((_DWORD)a1 + 2045582260) | 0x8612DD70)
                            + *(_QWORD *)(v1 + 8 * (a1 ^ 0x1470))))();
}

uint64_t sub_100731CE8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((11966
                                               * (v0 == ((2 * STACK[0x6508]) ^ 0x27D0) - 1926394581)) ^ (STACK[0x6508] - 3652)))
                            - 4))();
}

uint64_t sub_100731D30@<X0>(int a1@<W8>)
{
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x7D40] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)((((a1 + 225668485) | 0xF28C8B3A) + 5536) ^ a1)) - 4))();
}

uint64_t sub_100731D90()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((((STACK[0x6508] - 3697) | 0x12) + 9965) * v0) ^ (STACK[0x6508] - 3704)))
                            - 12))();
}

uint64_t sub_100731DCC@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((((LODWORD(STACK[0xCB64]) + 1926392731) < 2)
                                          * (a1 + 2853 + (a1 ^ 0x1261) + 3750)) ^ a1))
                            - 8))();
}

uint64_t sub_100731E2C()
{
  int v0;
  unint64_t v1;

  LODWORD(STACK[0x837C]) = -1926392729;
  LODWORD(STACK[0x80CC]) = -1926392729;
  STACK[0xB560] = 0;
  LODWORD(STACK[0x93B4]) = -1926392729;
  STACK[0x6F58] = 0;
  STACK[0xCEF0] = STACK[0x9D08];
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x498E ^ ((v0 - 2300) | 0x5122))) - 8))(5121, 2013256049);
}

uint64_t sub_100731ED0()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((((LODWORD(STACK[0x4B08]) ^ 0x1D5E) + 11612) * v0) ^ (STACK[0x6508] - 2357)))
                            - 4))();
}

uint64_t sub_100731F0C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * ((int)a1 + 1192))
                                                   - ((a1 + 18490) ^ 0x556ALL)))(5121, 2013256049);
}

uint64_t sub_100731F58()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((STACK[0x6508] - 2357) ^ (23312 * v0)))
                            - ((STACK[0x6508] - 884) ^ 0xD06)))();
}

uint64_t sub_100731F90()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((((v0 - 1728) | 0x18A0) - 671) ^ v0)) - 4))();
}

uint64_t sub_100731FD8()
{
  int v0;
  int v1;

  v1 = v0 ^ 1;
  if (LODWORD(STACK[0xCB64]) != -1926392731)
    v1 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((v1 * ((STACK[0x6508] - 868) ^ 0xD54)) | (STACK[0x6508] + 18098)))
                            - 8))();
}

uint64_t sub_10073202C()
{
  int v0;
  unint64_t v1;

  LODWORD(STACK[0x80F4]) = -1926392729;
  v1 = STACK[0x6AD8];
  STACK[0x9EB8] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 12;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1
                                                               + 8
                                                               * (v0 ^ 0x1D0B ^ (457
                                                                               * (((((v0 + 1008) | 0x4460) + 875406367) ^ v0) != -2054194002))))
                                                   - 8))(5121, 2013256049);
}

uint64_t sub_1007320C8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)((((STACK[0x6508] - 2357) ^ 0x6A08) * v0) ^ (STACK[0x6508] + 12019)))
                            - 8))();
}

uint64_t sub_100732100()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (((LODWORD(STACK[0x80F4]) == -1926392761) * ((v0 ^ 0x1737) + 12471)) ^ v0))
                            - ((v0 + 1100323002) & 0xBE6A6CFE ^ 0xCFELL)))();
}

uint64_t sub_10073217C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)((v0 & 0xBE6A6CFE) + 1095))
                            - (((v0 & 0xBE6A6CFE) + 2982) | 0x642)
                            + 7902))();
}

uint64_t sub_1007321C8()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((((STACK[0x6508] ^ 0x21B8) + 877) * v0) ^ (STACK[0x6508] - 2357)))
                            - 4))();
}

uint64_t sub_1007321F8()
{
  int v0;
  unint64_t v1;
  unint64_t v2;
  char *v3;

  v1 = STACK[0xB560];
  STACK[0x6B98] = STACK[0xB560];
  LODWORD(STACK[0xA6D4]) = STACK[0x80CC];
  STACK[0x6D68] = STACK[0xCEF0];
  v2 = STACK[0xC768];
  v3 = (char *)&STACK[0x10000] + STACK[0xC768];
  STACK[0xA718] = (unint64_t)v3;
  STACK[0xCAB8] = (unint64_t)(v3 + 2560);
  STACK[0x9D28] = (unint64_t)(v3 + 2576);
  STACK[0xB1E8] = (unint64_t)(v3 + 0x3A8834BBB30784F0);
  STACK[0xC768] = v2 + 2752;
  STACK[0xBCC8] = 0x28623712C9340FB6;
  STACK[0x7FC8] = 0x55058F428EADAA34;
  STACK[0xCDB8] = 0x603CE14A0A8FADE1;
  STACK[0x8460] = 0;
  LODWORD(STACK[0xAED4]) = -1926392729;
  LODWORD(STACK[0x7C64]) = -1926392729;
  LODWORD(STACK[0x99A0]) = -1926392729;
  LODWORD(STACK[0x93DC]) = 833853329;
  LOBYTE(STACK[0xCDEF]) = 0;
  STACK[0x84D0] = 0;
  STACK[0xA288] = 0;
  LODWORD(STACK[0xCE8C]) = 0;
  STACK[0x9020] = 0;
  LODWORD(STACK[0xA068]) = -1926392729;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((((v1 == 0) ^ (v0 + 1)) & 1)
                                               * ((v0 + 810589489) & 0xCFAF37CD ^ 0x7D5D)) ^ v0))
                            - 12))();
}

_QWORD *sub_1007323D8@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0xC1E8] = *(_QWORD *)(STACK[0x6AD8] + 8 * a1) - 12;
  return ((_QWORD *(*)(unint64_t *__return_ptr))(*(_QWORD *)(v1 + 8 * (int)(a1 ^ 0x2604)) - 12))(&STACK[0x7FC8]);
}

uint64_t sub_1007324C4()
{
  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * (int)(((STACK[0xBCC8] != 0x28623712C9340FB6)
                                     * ((LODWORD(STACK[0x4B08]) ^ 0x739) - 5925)) ^ (STACK[0x6508] + 19796))))();
}

uint64_t sub_100732530@<X0>(int a1@<W8>)
{
  int v1;

  STACK[0x6F58] = 0;
  LODWORD(STACK[0x93B4]) = -1926392729;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (a1 ^ (15880 * (v1 == -1926392729))))
                            - ((a1 ^ 0x1CE0u)
                             + 1223)
                            + 4202))();
}

uint64_t sub_100732580()
{
  uint64_t v0;
  uint64_t (*v1)(unint64_t *, unint64_t *);

  v1 = (uint64_t (*)(unint64_t *, unint64_t *))(*(_QWORD *)(STACK[0x6AD8]
                                                                                  + 8
                                                                                  * (int)(v0 + (v0 ^ 0x169D) + 3421))
                                                                      - 12);
  STACK[0x8478] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 8;
  return v1(&STACK[0xA134], &STACK[0x8460]);
}

uint64_t sub_10073261C()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8 * (int)((STACK[0x6508] + 1753) ^ (3516 * (v0 == -1926392729))))
                            - (STACK[0x31E8] ^ 0x3F94)))();
}

uint64_t sub_10073265C()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * (int)(((*(_BYTE *)(STACK[0xBCC8] - 0x28623712C9340CE6) != 1)
                                               * (((STACK[0x31E8] + 141819955) & 0xF78BD7F7) - 6081)) | STACK[0x31E8]))
                            - 12))();
}

uint64_t sub_1007326C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v5;

  STACK[0xC798] = STACK[0xCDB8];
  v5 = STACK[0xA288];
  STACK[0x7A10] = STACK[0xA288];
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x6AD8] + 8 * (((v5 != 0) * (((v4 - 1818619726) & 0x6C65FFDB) + 6123)) ^ v4)))(STACK[0x47E8], a2, a3, a4, 92, 146, 93, 74);
}

uint64_t sub_10073274C()
{
  int v0;
  int v1;

  v1 = STACK[0xCE8C];
  LODWORD(STACK[0x93C0]) = STACK[0xCE8C];
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (((((v0 + 12737) | 0x126A) ^ 0x5BC2) * (v1 != 0)) ^ v0)))();
}

uint64_t sub_1007327A8@<X0>(unint64_t a1@<X8>)
{
  int v1;
  unsigned int v2;
  unint64_t v3;
  char *v4;
  _BOOL4 v6;

  STACK[0xCE38] = a1;
  v3 = STACK[0xC768];
  v4 = (char *)&STACK[0x10000] + STACK[0xC768];
  STACK[0xC848] = (unint64_t)v4;
  STACK[0xB998] = (unint64_t)(v4 + 67);
  STACK[0xC768] = v3 + 96;
  STACK[0x8898] = 0x55058F428EADAA34;
  v6 = a1 == 0x28623712C9340FB6 || v2 > 0x800;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((2014 * v6) ^ v1)) - 4))();
}

uint64_t sub_100732860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v8;
  int v9;
  unint64_t v10;

  v9 = 2 * (v8 ^ 0x14AC);
  LODWORD(STACK[0x90A0]) = *(_DWORD *)(a8 - 0x28623712C9340CDELL);
  v10 = STACK[0x6AD8];
  STACK[0xAF18] = *(_QWORD *)(STACK[0x6AD8] + 8 * v9) - 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8 * (v9 ^ 0x1C47)))(a1, a2, a3, a4, a5, a6, a7, 153);
}

uint64_t sub_100732908()
{
  int v0;
  int v1;
  int v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;

  v1 = v0 + 17229;
  v2 = 86 * ((v0 + 17229) ^ 0x5B21);
  v3 = (uint64_t (*)(uint64_t))STACK[0x5510];
  v4 = ((uint64_t (*)(uint64_t))STACK[0x5510])(256);
  STACK[0x8E38] = v4;
  v5 = v3(256);
  STACK[0xAF40] = v5;
  if (v5)
    v6 = v4 == 0;
  else
    v6 = 1;
  v7 = !v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v7 * (v2 ^ 0x172D)) ^ v1)) - 12))();
}

uint64_t sub_10073298C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = STACK[0x6AD8];
  STACK[0x8CA0] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) + (v0 ^ 0x3AF3) - 14788;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((int)v0 + 3468)) - 8))();
}

uint64_t sub_1007329C4()
{
  int v0;
  unint64_t v1;

  v0 = STACK[0x6508] - 3457;
  v1 = STACK[0x6AD8];
  STACK[0x8CA0] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0) - 4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x1A66)) - 12))();
}

uint64_t sub_100732A08()
{
  int v0;

  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 10566)) - 8))();
}

uint64_t sub_100732A20@<X0>(unsigned __int16 a1@<W8>)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  int v4;
  uint64_t (*v5)(void);

  STACK[0x6A70] = v2;
  if (v2)
    v3 = a1 > 1u;
  else
    v3 = 0;
  v4 = v3;
  LODWORD(STACK[0x6970]) = v4;
  v5 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((14834 * v4) ^ (v1 - 330))) - 8);
  LODWORD(STACK[0x6980]) = -64;
  return v5();
}

uint64_t sub_100732A84@<X0>(unsigned __int16 a1@<W8>)
{
  int v1;
  int v2;
  uint64_t (*v3)(void);

  STACK[0x6A80] = a1;
  v3 = (uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v1 + 2062)) - 8);
  LODWORD(STACK[0x6A60]) = v2;
  return v3();
}

uint64_t sub_100732AB8()
{
  unsigned int v0;
  int v1;

  v1 = STACK[0x6508] + 2062;
  *(_BYTE *)(STACK[0x6A70] + STACK[0x6AC0]) = *((_BYTE *)&STACK[0xC4E8] + v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v1) - 8))();
}

uint64_t sub_100732AF8()
{
  int v0;
  unsigned int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v5 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 51)) - 4;
  LODWORD(STACK[0xEE20]) = (v0 + 446628898) ^ 0xF42;
  STACK[0x6AC0] = v1;
  STACK[0xEE30] = v1;
  LODWORD(STACK[0xEE50]) = 0;
  STACK[0xEE58] = STACK[0x6A80];
  LODWORD(STACK[0xEE60]) = (v0 + 446628898) ^ v2;
  LODWORD(STACK[0xEE64]) = v0 + 446628898;
  *(_QWORD *)(v3 + 792) = &STACK[0xEE18];
  *(_DWORD *)(v3 + 784) = -299994601
                        - 1705718857 * ((~((v4 - 240) | 0x545AE0D1) + ((v4 - 240) & 0x545AE0D1)) ^ 0x9637C077)
                        + v0;
  v6 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v4 - 240);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5 + 8 * *(int *)(v3 + 788)) - 8))(v6);
}

uint64_t sub_100732BD0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;

  v9 = STACK[0x6508];
  v10 = STACK[0x6AD8];
  v11 = STACK[0x56E0];
  *(_QWORD *)(v1 + 952) = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 40)) - 4;
  *(_DWORD *)(v1 + 960) = STACK[0x56DC];
  *(_DWORD *)(v1 + 1008) = v11;
  *(_QWORD *)(v1 + 976) = 0;
  *(_QWORD *)(v1 + 1016) = v7 & 7;
  *(_QWORD *)(v1 + 1024) = (v11 + 29);
  *(_QWORD *)(v0 + 792) = v5;
  *(_DWORD *)(v0 + 784) = v2 - (((v4 | 0x78266784) - v4 + (v4 & 0x87D99878)) ^ 0x45B4B8DD) * v3 + v9;
  v12 = v6(v8 - 240);
  return (*(uint64_t (**)(uint64_t))(v10 + 8 * *(int *)(v0 + 788)))(v12);
}

uint64_t sub_100732C70()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unsigned __int8 *v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  unint64_t v115;
  unsigned __int8 v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unsigned __int8 *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  BOOL v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  __int128 v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unsigned __int8 v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unsigned __int8 *v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  int v292;
  char v293;
  unint64_t v294;
  unint64_t v295;
  char v296;
  unsigned int v297;
  int v298;
  char v299;
  unint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  unint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  unsigned __int8 *v313;
  unsigned __int8 *v314;
  uint64_t v315;
  uint64_t v316;
  __int16 v317;
  __int16 v318;
  __int16 v319;
  __int16 v320;
  unsigned int v321;
  unint64_t v322;
  uint64_t v323;
  char v324;
  uint64_t v325;
  unsigned __int8 *v326;
  char v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned __int8 *v334;
  char v335;
  char v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  char v348;
  unint64_t v349;
  _BYTE *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned __int8 *v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  int v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unsigned __int8 *v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  __int128 v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  char v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  __int128 v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  __int128 v541;
  uint64_t v542;
  unint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  uint64_t v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  unint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  _BYTE *v584;
  uint64_t v585;
  unint64_t v586;
  unint64_t v587;
  unint64_t v588;
  unint64_t v589;
  _BYTE *v590;
  _BYTE *v591;
  unint64_t v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unint64_t v600;
  __int128 v601;
  unint64_t v602;
  unint64_t v603;
  char v604;
  unint64_t v605;
  char v606;
  unint64_t v607;

  LODWORD(STACK[0x6A50]) = 0;
  v0 = STACK[0x6508];
  v1 = (unint64_t)*(&off_1015B46D0 + (int)(STACK[0x6508] - 3094));
  STACK[0x6A90] = v1;
  v2 = *(_QWORD *)(v1 - 4);
  LODWORD(STACK[0x69B0]) = (*(_DWORD *)(v2 + 16) ^ 0xF3EE9FFF) + 2125950580 + ((2 * *(_DWORD *)(v2 + 16)) & 0xE7DD3FFE);
  v3 = v0;
  v4 = (unsigned __int8 *)*(&off_1015B46D0 + (int)v0 - 2085);
  LODWORD(v1) = v4[18];
  v5 = (unint64_t)*(&off_1015B46D0 + SLODWORD(STACK[0x55D4]));
  STACK[0x6A40] = v5;
  v6 = (unint64_t)*(&off_1015B46D0 + SLODWORD(STACK[0x55F8]));
  STACK[0x6AB0] = v6;
  v7 = *(unsigned __int8 **)(v5 - 4);
  v8 = v7[67] - ((2 * v7[67]) & 0x1B4) - 0x2AF0CDA767C58B26;
  v9 = *(unsigned __int8 **)v6;
  v10 = v4[7];
  v11 = (v1 ^ 0xDE) & 0x71 ^ 0xEC ^ (((2 * (v1 ^ 0xDE)) & 0x88) - ((v1 ^ 0xDE) & 0x74) - 72);
  v12 = ((2 * v11) | 0x50) - v11 + 88;
  v13 = *(_BYTE *)(*(_QWORD *)v6 + 70);
  v14 = (unsigned __int8 *)*(&off_1015B46D0 + v3 - 2988);
  STACK[0x6A30] = (unint64_t)v14;
  v15 = *v14;
  v16 = (((8 * v1) ^ 0xCD39F458) + 851839955) ^ (((8 * v1) ^ 0x4B3DB671) - 1262335492) ^ (((8 * v1) ^ 0x86044229) + 2046541220);
  v17 = v7[4];
  v18 = v1 >> ((v12 ^ 1) & 3 ^ 1) >> (v12 & 4) >> ((v12 ^ 0xFD) & 0x97);
  v19 = v3;
  v20 = (unsigned __int8 *)*(&off_1015B46D0 + v3 - 4036);
  STACK[0x6AA0] = (unint64_t)v20;
  v21 = (((v18 ^ 0x3CC3A863) - 1019455714) ^ ((v18 ^ 0xE62BED1D) + 433328740) ^ ((v18 ^ 0xDAE8457E) + 622311937))
      + 951869060;
  v22 = (v21 ^ 0xE60335F8) & (2 * (v21 & 0xC743A1FD)) ^ v21 & 0xC743A1FD;
  v23 = ((2 * (v21 ^ 0x6E8574FA)) ^ 0x538DAA0E) & (v21 ^ 0x6E8574FA) ^ (2 * (v21 ^ 0x6E8574FA)) & 0xA9C6D506;
  v24 = v23 ^ 0xA8425501;
  v25 = (v23 ^ 0x8144D004) & (4 * v22) ^ v22;
  v26 = ((4 * v24) ^ 0xA71B541C) & v24 ^ (4 * v24) & 0xA9C6D504;
  v27 = (v26 ^ 0xA1025403) & (16 * v25) ^ v25;
  v28 = ((16 * (v26 ^ 0x8C48103)) ^ 0x9C6D5070) & (v26 ^ 0x8C48103) ^ (16 * (v26 ^ 0x8C48103)) & 0xA9C6D500;
  v29 = v27 ^ 0xA9C6D507 ^ (v28 ^ 0x88445007) & (v27 << 8);
  v30 = (v29 << 16) & 0x29C60000 ^ v29 ^ ((v29 << 16) ^ 0x55070000) & (((v28 ^ 0x21828507) << 8) & 0x29C60000 ^ 0x29020000 ^ (((v28 ^ 0x21828507) << 8) ^ 0x46D50000) & (v28 ^ 0x21828507));
  v31 = ((v16 + 728579732) ^ 0x869AC9D9) & (2 * ((v16 + 728579732) & 0xD492C1E1)) ^ (v16 + 728579732) & 0xD492C1E1;
  v32 = ((2 * ((v16 + 728579732) ^ 0x87BA4ADB)) ^ 0xA6511674) & ((v16 + 728579732) ^ 0x87BA4ADB) ^ (2
                                                                                                  * ((v16 + 728579732) ^ 0x87BA4ADB)) & 0x53288B3A;
  v33 = v32 ^ 0x5128890A;
  v34 = (v32 ^ 0x2000200) & (4 * v31) ^ v31;
  v35 = ((4 * v33) ^ 0x4CA22CE8) & v33 ^ (4 * v33) & 0x53288B38;
  v36 = (v35 ^ 0x40200822) & (16 * v34) ^ v34;
  v37 = ((16 * (v35 ^ 0x13088312)) ^ 0x3288B3A0) & (v35 ^ 0x13088312) ^ (16 * (v35 ^ 0x13088312)) & 0x53288B30;
  v38 = v36 ^ 0x53288B3A ^ (v37 ^ 0x1208831A) & (v36 << 8);
  v39 = (v16 + 728579732) ^ (2
                           * ((v38 << 16) & 0x53280000 ^ v38 ^ ((v38 << 16) ^ 0xB3A0000) & (((v37 ^ 0x4120081A) << 8) & 0x53280000 ^ 0x53200000 ^ (((v37 ^ 0x4120081A) << 8) ^ 0x288B0000) & (v37 ^ 0x4120081A))));
  v40 = (v21 ^ (2 * v30) ^ 0x7545AC7B) & (v39 ^ 0x7493D795) ^ v39 & 0x6387A788;
  v41 = ((v15 - ((2 * (int)v15) & 0x1CALL)) << 24) + 0x70E39481E5000000;
  LODWORD(v15) = v9[85];
  v42 = v16 - 951868931 + v21 + ((2 * v40) ^ 0x3EF8F0FF) + 118;
  LOBYTE(v1) = (v1 ^ 0xEB) & 0x18 ^ 0x35 ^ (((2 * (v1 ^ 0xEB)) & 0x40) - ((v1 ^ 0xEB) & 0x38) + 29);
  v43 = ((v17 - ((2 * (int)v17) & 0xBELL)) << 16) + 0x68C9310E535F0000;
  v13 -= 67;
  LOBYTE(v16) = v13 & 0xE3 ^ 0x25;
  v44 = (uint64_t)*(&off_1015B46D0 + SLODWORD(STACK[0x55D8]));
  v45 = v10 - ((2 * (int)v10) & 0x122) + 0x39C0365B74DB1291;
  v46 = ((((v7[33] - ((2 * v7[33]) & 0x13CLL)) << 8) + 0x1CFC580E458E9E00) ^ 0x383299D3112C95A2) & (v45 ^ 0xC63FC9A48B24ED32) ^ v45 & 0x110020020049105DLL;
  v47 = v43 & 0x60400102710A0000 ^ 0x44030190024810 ^ (((v46 & 0xA688893631751E26 ^ 0xA488811631710E27)
                                                          + (v46 & 0x597776C9CE8AE1D9)
                                                          - 1) ^ 0x8EED10356B6F227CLL) & (v43 ^ 0x9736CEF1ACA0FFFFLL);
  v48 = ((((2 * v47) | 0x98ED694C8D8A238ALL) - v47 + 0x33894B59B93AEE3BLL) ^ 0xA167ADF4562763B5) & (v41 ^ 0x8F1C6B7E1AFFFFFFLL);
  v49 = v41 & 0x6041945220000000;
  LODWORD(v41) = *(unsigned __int8 *)(v44
                                    + 13
                                    + (v13 ^ (2
                                                             * ((v13 ^ 0x18) & (2
                                                                              * ((v13 ^ 0x18) & (2
                                                                                               * ((v13 ^ 0x18) & (2 * ((v13 ^ 0x18) & (2 * ((v13 ^ 0x18) & (2 * (((2 * v13) & 0x32 ^ 0x7A) & v13 ^ v16)) ^ v16)) ^ v16)) ^ v16)) ^ v16)) ^ v16))));
  v50 = ((v41 >> 5) | (8 * v41)) - ((2 * ((v41 >> 5) | (8 * v41))) & 0xFF8) - 4;
  v51 = ((unint64_t)(v7[25] - ((2 * v7[25]) & 0x80u) + 85) << 56) - 0x1500000000000000;
  v52 = ((v51 ^ 0xE7427E33D18C2D5CLL) + 0x167CEF52CEFADCB9) ^ ((v51 ^ 0x30BC99F3EACD2CA6) - 0x3E7DF76D0A4422BDLL) ^ ((v51 ^ 0x97FEE7C03B4101FALL) + 0x66C076A12437F01FLL);
  v53 = (((unint64_t)(*v20 - ((2 * *v20) & 0x15Cu) + 62444) << 48) - 0x3E000000000000) ^ v49 ^ (((unint64_t)(v9[86] - 2 * (v9[86] & 0x7Fu) + 15843713) << 40) - 0x20000000000) ^ v48 ^ ((unint64_t)((*(_BYTE *)(v44 + 269 + (v42 ^ 0x26)) ^ (v42 - ((2 * v42) & 0xDA) + 109) ^ 0x8D) - 3) << (~((((2 * v1) | 0xD4) - v1 + 22) ^ 0x7F) & 0x18) << (((((2 * v1) | 0xD4) - v1 + 22) ^ 0x7F) & 0x27 ^ 5) << ((((2 * v1) | 0xD4) - v1 + 22) ^ 0xC2));
  v54 = ((v52 + 0x6C5E5FBEC4A21AD4) ^ 0xF97A4ED513F6E207) & (2
                                                               * ((v52 + 0x6C5E5FBEC4A21AD4) & 0xE2630EE01BE6F347)) ^ (v52 + 0x6C5E5FBEC4A21AD4) & 0xE2630EE01BE6F347;
  v55 = ((2 * ((v52 + 0x6C5E5FBEC4A21AD4) ^ 0x3DBA53D5013B4085)) ^ 0xBFB2BA6A35BB6784) & ((v52
                                                                                               + 0x6C5E5FBEC4A21AD4) ^ 0x3DBA53D5013B4085) ^ (2 * ((v52 + 0x6C5E5FBEC4A21AD4) ^ 0x3DBA53D5013B4085)) & 0xDFD95D351ADDB3C2;
  v56 = v55 ^ 0x404945150A449042;
  v57 = (v55 ^ 0x9B90180010990300) & (4 * v54) ^ v54;
  v58 = ((4 * v56) ^ 0x7F6574D46B76CF08) & v56 ^ (4 * v56) & 0xDFD95D351ADDB3C0;
  v59 = (v58 ^ 0x5F4154140A548300) & (16 * v57) ^ v57;
  v60 = ((16 * (v58 ^ 0x80980921108930C2)) ^ 0xFD95D351ADDB3C20) & (v58 ^ 0x80980921108930C2) ^ (16 * (v58 ^ 0x80980921108930C2)) & 0xDFD95D351ADDB3C0;
  v61 = (v60 ^ 0xDD91511108D93000) & (v59 << 8) ^ v59;
  v62 = (((v60 ^ 0x2480C24120483C2) << 8) ^ 0xD95D351ADDB3C200) & (v60 ^ 0x2480C24120483C2) ^ ((v60 ^ 0x2480C24120483C2) << 8) & 0xDFD95D351ADDB300;
  v63 = v61 ^ 0xDFD95D351ADDB3C2 ^ (v62 ^ 0xD959151018910000) & (v61 << 16);
  v64 = (v52 + 0x6C5E5FBEC4A21AD4) ^ (2
                                      * ((v63 << 32) & 0x5FD95D3500000000 ^ v63 ^ ((v63 << 32) ^ 0x1ADDB3C200000000) & (((v62 ^ 0x6804825024C31C2) << 16) & 0x5FD95D3500000000 ^ 0x2C8452000000000 ^ (((v62 ^ 0x6804825024C31C2) << 16) ^ 0x5D351ADD00000000) & (v62 ^ 0x6804825024C31C2))));
  v65 = v64 & 0x7F4A649B4A92CB6 ^ 0x6B4200934A02430 ^ (v53 ^ 0x776426E44BB6213FLL) & (v64 ^ 0x6863968A2E5D94C3);
  LODWORD(v47) = ((v15 >> 5) | (8 * v15)) - ((2 * ((v15 >> 5) | (8 * v15))) & 0x76) + 59;
  LODWORD(v42) = ((v50 | 7) + (v50 & 0xFFFFFFF3 ^ 6) + 9) ^ ~v50 & 0xFFFFFFA4;
  LOBYTE(v47) = (v47 >> 3) | (32 * v47);
  LOBYTE(v62) = v15 & 0x56;
  LOBYTE(v15) = 2 * ((v47 ^ 0x3E) & v15 & 0x56 ^ v15 & 6) - 110;
  v66 = v15 & 0xEF;
  v67 = v47 ^ v62;
  LOBYTE(v15) = (v15 & 0xEF ^ 2) & (v47 ^ v62 ^ 0x28) ^ v15 & 8;
  v68 = (2 * (((2 * v65) | 0x7BFA7B47A034BBC0) - v65) + 0x40584B85FCB4440) ^ 0x9ACC8BA7E99055BLL;
  LODWORD(v63) = *(v4 - 5);
  LODWORD(v42) = -19 * (v50 ^ 0xFFFFFFC9 ^ (((16 * v42) ^ 0xFFFFFFA0) + ((32 * v42) ^ 0xFFFFFFBF) - 3));
  v69 = ((v42 - ((2 * (int)v42) & 0x18ALL)) << 8) - 0x4DF91F7384DE3B00;
  v70 = ((unint64_t)(*(unsigned __int8 *)(v2 + 39) - ((2 * *(unsigned __int8 *)(v2 + 39)) & 0xD2u) + 1924223381) << 32)
      - 0x2C00000000;
  v71 = ((v53 ^ 0x481FD22BE4F8671DLL) - 0x218185E2EC0F3434) ^ ((v53 ^ 0x5FA129BF1B9A95D3) - 0x363F7E76136DC6FALL) ^ ((v53 ^ 0x672E7B39007DFF47) - 0xEB02CF0088AAC6ELL);
  v72 = ((v4[39] - ((2 * v4[39]) & 0x1A0)) << 24) - 0x734C9D9C30000000;
  v73 = (v69 ^ 0x2DE4E669CA5BBE84) & (v8 ^ 0x2AF0CDA767C58B35) ^ v8 & 0x400110080800047BLL;
  v74 = (v73 & 0x766AC67F923C5955 ^ 0x766AC67D92385944) + (v73 & 0x899539806DC3A6AALL ^ 0x10090000010021) - 1;
  v75 = v74 & 0x3DC4FDB5F214CFE5 ^ 0x8904C9D3A55F047FLL ^ (v74 ^ 0x5666266FD4BC1000) & ((((v9[51]
                                                                                             - ((2 * v9[51]) & 0x1F0)) << 16)
                                                                                           + 0x5D43C1F189F80000) ^ 0x9F78C3BB8413301ALL);
  v76 = 0x29F01B0EB99C4342 - (v75 | 0x29F01B0EB99C4342) + (v75 | 0xD60FE4F14663BCBDLL);
  LOBYTE(v15) = (((v62 ^ 0x3B) - 73) ^ ((v62 ^ 0xDC) + 82) ^ ((v62 ^ 0xE7) + 107))
              + (v66 ^ v67 ^ ((v66 ^ v67 ^ 0x9F) + 108) ^ ((v66 ^ v67 ^ 0xA7) + 84) ^ 0xB)
              + ((((2 * v15) ^ 0x54) + 28) ^ (((2 * v15) ^ 0x4B) + 5) ^ (((2 * v15) ^ 0x1F) + 81))
              + 63;
  LOBYTE(v75) = v15 & 0x25 ^ 0x45;
  LOBYTE(v53) = 2 * ((((2 * v15) & 0x36 ^ 0xBE) & 0x1A | v75) ^ ((2 * v15) & 0x36 ^ 0xBE) & v15);
  LOBYTE(v53) = 2 * ((v53 & 0x1A | v75) ^ v53 & v15);
  LOBYTE(v53) = 2 * ((v53 & 0x1A | v75) ^ v53 & v15);
  LOBYTE(v53) = 2 * ((v53 & 0x1A | v75) ^ v53 & v15);
  LOBYTE(v53) = 2 * ((v53 & 0x1A | v75) ^ v53 & v15);
  v77 = (unsigned __int8 *)*(&off_1015B46D0 + v3 - 3790);
  STACK[0x6A20] = (unint64_t)v77;
  LOBYTE(v62) = (v53 & 0x1A | v75) ^ v53 & v15;
  LODWORD(v53) = v9[92];
  LODWORD(v75) = (*v77 >> 5) | (8 * *v77);
  LOBYTE(v75) = v75 - ((2 * v75) & 0x3A) - 99;
  v78 = (v76 ^ 0x280579EB5B4ACDCCLL) & (v72 ^ 0x734C9D9C2FFFFFFFLL) ^ v72 & 0x2606C68000000;
  STACK[0x69D0] = v44 + 13;
  LODWORD(v76) = *(unsigned __int8 *)(v44 + 13 + ((v15 ^ (2 * v62)) ^ 0xC6u));
  v79 = (unsigned __int8 *)*(&off_1015B46D0 + SLODWORD(STACK[0x55F4]));
  STACK[0x6A10] = (unint64_t)v79;
  LODWORD(STACK[0x6990]) = v63 - ((2 * v63) & 0x94);
  v80 = *v79;
  v81 = v70 & 0x12802E3600000000 ^ 0x14C6AE364C4C8080 ^ (((v78 & 0xC18C0B3A592CD3E4 ^ 0xC18C0B1A110CC3E5)
                                                            + (v78 & 0x3E73F4C5A6D32C1BLL)
                                                            - 1) ^ 0xB402B5A04583A637) & (v70 ^ 0x8D4EAE96FFFFFFFFLL);
  v82 = ((2 * v81) | 0x780BFD9E9A4BF4CLL) - v81 + 0x7C3FA0130B2DA05ALL;
  LODWORD(v70) = ((v76 >> 5) | (8 * v76)) - ((2 * ((v76 >> 5) | (8 * v76))) & 0x12) + 9;
  STACK[0x69A0] = v52 + v71 - 0x4A95DF8916099302 + v68;
  v83 = ((v82 & 0x3A40FB2199148E49 ^ 0x40580108048C40)
       - ((2 * (v82 & 0x3A40FB2199148E49 ^ 0x40580108048C40)) & 0x1001920022290C00)
       - 0x376D32FBAA2B586CLL) ^ 0xC082D50474D6C391;
  LODWORD(v71) = (v75 ^ 0xB7C8B1BC)
               - 1211584249
               - ((2 * (v75 ^ 0xB7C8B1BC)) & 0x6F91620E);
  v84 = (unint64_t)*(&off_1015B46D0 + SLODWORD(STACK[0x55DC]));
  STACK[0x6A00] = v84;
  LOBYTE(v15) = *(_BYTE *)v84;
  LOBYTE(v84) = v15 - 75;
  LOBYTE(v62) = (v15 - 75) & 0xE5 ^ 0x22;
  LOBYTE(v15) = ((v15 - 75) ^ 0x20) & (2
                                     * (((v15 - 75) ^ 0x20) & (2
                                                             * (((v15 - 75) ^ 0x20) & (2
                                                                                     * (((v15 - 75) ^ 0x20) & (2 * (((v15 - 75) ^ 0x20) & (2 * ((v15 + 53) & (2 * v62) ^ v62)) ^ v62)) ^ v62)) ^ v62)) ^ v62)) ^ v62;
  LOBYTE(v69) = (2 * v75) & 0x18;
  v85 = (unint64_t)(-19 * (v70 ^ 0x89 ^ (((16 * v70) ^ 0x9E) - 5))) << 40;
  LOBYTE(v75) = (((v75 ^ 0x85) + 78) ^ ((v75 ^ 0xB3) + 124) ^ ((v75 ^ 0x47) - 112)) + 82;
  v86 = *(unsigned __int8 *)(v2 + 52)
      - ((2 * *(unsigned __int8 *)(v2 + 52)) & 0x13ALL)
      - 0x3CD8FF59885FEE63;
  v87 = v75 - v69 - 2 * ((v75 - v69) & 0x5C ^ v75 & 4) - 40;
  v88 = v86 & 0x2000001001470 ^ 0x2000401088528040 ^ (v86 ^ 0x3CD8FF59885FEE02) & ((((v80
                                                                                          - ((2 * (int)v80) & 0x17ALL)) << 8)
                                                                                        + 0x35FFA35067C7BD00) ^ 0x785E223F716BF68FLL);
  v89 = v53 - ((2 * v53) & 0xFFFFFFC3);
  v90 = v85 & 0xFFFFFBFFFFFFFFFFLL ^ 0x8063AAB9635B321BLL ^ (((2 * v83) & 0x34816A41584D5880)
                                                           - v83
                                                           - 0x5FCCB566ACA6ADE1);
  LOBYTE(v71) = v87 ^ *(_BYTE *)(v44 + 269 + v71);
  LODWORD(v84) = *(unsigned __int8 *)(v44 + 13 + ((v84 ^ (2 * v15)) ^ 6u));
  LOBYTE(v80) = (((v84 ^ 0xD1) & 0x20 | 0x5B) - ((v84 ^ 0xD1) & 0x11 | 0xA4) - 92) ^ ((v84 ^ 0xD1) & 0x34 | 0x4A);
  LODWORD(v53) = (*(unsigned __int8 *)(v2 + 47) >> 5) | (8 * *(unsigned __int8 *)(v2 + 47));
  v91 = v7[21];
  v92 = v85 & 0x40000000000 ^ 0xDA09149D47510142 ^ ((v82 & 0x5BF04DE66EB71B6 ^ 0xDEB6148F65D97043) - 1);
  v93 = ((v91 - ((2 * (int)v91) & 0xF0)) << 24) + 0x3BF5CCEC78000000;
  v94 = ((2 * v88) & 0x101CCAD536A1A35CLL) - v88 + 0x77F19A9564AF2E51;
  v95 = (unint64_t)((((v71 ^ 0xF4) - 66) ^ ((v71 ^ 0xC5) - 115) ^ ((v71 ^ 0xE9) - 95)) + 107) << 16;
  v96 = v95 & 0x260000 | (v94 ^ 0x3D2662093A8820B4) & ~v95;
  LOBYTE(v71) = v53 - ((2 * v53) & 0x58) + 44;
  v97 = (v96 & 0x1F1E4BAE1005FB71 ^ 0xF1E0BA20005D971) + (v96 & 0xE0E1B451EFFA048ELL ^ 0x400004102E020005) - 1;
  v98 = v90 | v92;
  LODWORD(v96) = ((((8 * v84) ^ 0xFFFFFFE6) - 87) ^ (((8 * v84) ^ 0x4D) + 4) ^ (((8 * v84) ^ 0xFFFFFFAB) - 26))
               + (v84 >> ((((v80 | 0x23) - (v80 | 0xDC) - 36) ^ 2) & 6) >> ((((v80 | 0x23)
                                                                                          - (v80 | 0xDC)
                                                                                          - 36) & 1) == 0) >> (((v80 | 0x23) - (v80 | 0xDC) - 36) ^ 0x36));
  v99 = *(unsigned __int8 *)(v2 + 62) - ((2 * *(unsigned __int8 *)(v2 + 62)) & 0xBC);
  v100 = v93 & 0x1310CC810B000000 ^ 0x131A3C100A014004 ^ (v97 ^ 0xC48F343F1B2498B5) & (v93 ^ 0xC40A331387FFFFFFLL);
  v101 = ((2 * v100) | 0x93372D3925CE4B9ALL) - v100;
  v102 = v4[42] - ((2 * v4[42]) & 0x1A8);
  v103 = ((v9[87] - ((2 * v9[87]) & 0x54)) << 8) - 0xC3D74D39FE6D600;
  LOBYTE(v100) = *(_BYTE *)(v44 + 269 + (v71 ^ 0xALL)) ^ v71;
  v104 = v7[50];
  v105 = *(unsigned __int8 *)(v2 + 34) - ((2 * *(unsigned __int8 *)(v2 + 34)) & 0x144);
  STACK[0x69C0] = v104;
  v106 = v104 - ((2 * (int)v104) & 0x7ALL) - 0x6867FF5A41740CC3;
  v107 = (v106 ^ 0x6867FF5A41740CC0) & (v103 ^ 0x4C1686BC2C7278E5) ^ v106 & 0x4B0002D1ALL;
  v108 = ((v102 << 24) + 0x11EFEC35D4000000) & 0x14C2C277F000000 ^ 0xC844192B034A0680 ^ (((v105 << 16)
                                                                                              - 0x3EE17C6E7F5E0000) ^ 0xF3AD410100133122) & (((v102 << 24) + 0x11EFEC35D4000000) ^ 0xEE1013CA2BFF37A2);
  v109 = (unsigned __int8 *)*(&off_1015B46D0 + v19 - 2781);
  STACK[0x69F0] = (unint64_t)v109;
  v110 = (v107 & 0xBD5F5CAAEFF622FBLL ^ 0xBD5E5CA2EFF602FBLL) + (v107 & 0x42A0A3551009DD04 ^ 0x4000204000000501) - 1;
  v111 = *v109 - ((2 * *v109) & 0x4E);
  v112 = (unint64_t)(-19 * ((v96 - 79) ^ (16 * (v96 - 79)) ^ 0x89)) << 32;
  v113 = (((v101 - 0x499B969C92E725CDLL) ^ 0xB2CA6360F04ED957) & ~v112 | v112 & 0xFFFFFFFDFFFFFFFFLL) ^ ((unint64_t)((((v100 ^ 0x39) + 58) ^ ((v100 ^ 0xE6) - 25) ^ ((v100 ^ 0x13) + 20)) + 48) << 40);
  v114 = (unsigned __int8 *)*(&off_1015B46D0 + SLODWORD(STACK[0x55F0]));
  STACK[0x69E0] = (unint64_t)v114;
  v115 = ((unint64_t)(*v114 - ((2 * *v114) & 0xE0u) + 30884) << 48) - 0x34000000000000;
  LOBYTE(v101) = v4[8];
  LOBYTE(v107) = v101 + 61;
  LOBYTE(v101) = ((v101 - 67) & 0xA6 | 0x41) ^ (v101 + 61) & 0x8E;
  v116 = v107 ^ (2
               * ((v107 ^ 0x26) & (2
                                 * ((v107 ^ 0x26) & (2
                                                   * ((v107 ^ 0x26) & (2
                                                                     * ((v107 ^ 0x26) & (2
                                                                                       * ((v107 ^ 0x26) & (2 * (((2 * v101) ^ 0xC) & (v107 ^ 0x26) ^ v101)) ^ v101)) ^ v101)) ^ v101)) ^ v101)) ^ v101));
  v117 = *(unsigned __int8 *)(v2 + 65) - ((2 * *(unsigned __int8 *)(v2 + 65)) & 0xAE);
  LODWORD(v107) = *v7 - ((2 * *v7) & 0x1111);
  v118 = (((v115 ^ 0x87292BE4203515E2) + 0x5C2D9FEEC3E70950) ^ ((v115 ^ 0xB42D36284C16922FLL) + 0x6F298222AFC48E83) ^ ((v115 ^ 0x4B741DCC6C2387CDLL) - 0x6F8F5639700E649FLL))
       - 0x24A9728A3760CC3FLL
       + (v113 ^ 0x57BE070294522864);
  v119 = (v118 ^ 0xF1A43D7F53AEAF08) & (2 * (v118 & 0x8134BE7F538EAF91)) ^ v118 & 0x8134BE7F538EAF91;
  v120 = ((2 * (v118 ^ 0xF3856DFBD5A7BC28)) ^ 0xE563A7090C522772) & (v118 ^ 0xF3856DFBD5A7BC28) ^ (2 * (v118 ^ 0xF3856DFBD5A7BC28)) & 0x72B1D384862913B8;
  v121 = (v120 ^ 0x21830004000200) & (4 * v119) ^ v119;
  v122 = ((4 * (v120 ^ 0x1290508482291089)) ^ 0xCAC74E1218A44EE4) & (v120 ^ 0x1290508482291089) ^ (4 * (v120 ^ 0x1290508482291089)) & 0x72B1D384862913B8;
  v123 = (v122 ^ 0x42814200002002A0) & (16 * v121) ^ v121;
  v124 = ((16 * (v122 ^ 0x3030918486091119)) ^ 0x2B1D384862913B90) & (v122 ^ 0x3030918486091119) ^ (16 * (v122 ^ 0x3030918486091119)) & 0x72B1D384862913B0;
  v125 = (v124 ^ 0x2211100002011300) & (v123 << 8) ^ v123;
  v126 = (((v124 ^ 0x50A0C38484280029) << 8) ^ 0xB1D384862913B900) & (v124 ^ 0x50A0C38484280029) ^ ((v124 ^ 0x50A0C38484280029) << 8) & 0x72B1D38486291300;
  v127 = v125 ^ 0x72B1D384862913B9 ^ (v126 ^ 0x3091808400010000) & (v125 << 16);
  v128 = (v127 << 32) & 0x72B1D38400000000 ^ v127 ^ ((v127 << 32) ^ 0x62913B900000000) & (((v126 ^ 0x42205300862802B9) << 16) & 0x72B1D38400000000 ^ 0x2031518400000000 ^ (((v126 ^ 0x42205300862802B9) << 16) ^ 0x5384862900000000) & (v126 ^ 0x42205300862802B9));
  v129 = ((unint64_t)(*(unsigned __int8 *)(v2 + 51) - 2 * (*(_BYTE *)(v2 + 51) & 0x1Fu) - 246724800) << 32)
       - 0x2100000000;
  v130 = v129 & 0x4100FCBB00000000 ^ 0x26EDCEF3E8AF943CLL ^ (v110 & 0x4D19B8CE6CC26452 ^ 0x4E857433A7400279 ^ ((v108 - ((2 * v108) & 0x1BEB4E7E93CCB36) - 0x7F20A58C0B619A65) ^ 0xC982EADCB058C994) & (v110 ^ 0xBD758E89EC628BF9)) & (v129 ^ 0xEB4B8E0FFFFFFFFLL);
  v131 = ((unint64_t)(v111 + 2577968) << 40) - 0x90000000000;
  v132 = v130 & (v131 ^ 0xD8A9D8FFFFFFFFFFLL);
  LODWORD(v101) = STACK[0x69B0];
  LODWORD(v130) = (v101 ^ 0xCC55E10C) & (2 * (v101 & 0x8D59F18D)) ^ v101 & 0x8D59F18D;
  LODWORD(v129) = ((2 * (v101 ^ 0xDC44E30E)) ^ 0xA23A2506) & (v101 ^ 0xDC44E30E) ^ (2 * (v101 ^ 0xDC44E30E)) & 0x511D1282;
  LODWORD(v130) = (v129 ^ 0x81081) & (4 * v130) ^ v130;
  LODWORD(v129) = ((4 * (v129 ^ 0x51051281)) ^ 0x44744A0C) & (v129 ^ 0x51051281) ^ (4 * (v129 ^ 0x51051281)) & 0x511D1280;
  LODWORD(v130) = (v129 ^ 0x40140203) & (16 * v130) ^ v130;
  LODWORD(v129) = ((16 * (v129 ^ 0x11091083)) ^ 0x11D12830) & (v129 ^ 0x11091083) ^ (16 * (v129 ^ 0x11091083)) & 0x511D1280;
  LODWORD(v130) = v130 ^ 0x511D1283 ^ (v129 ^ 0x11110083) & ((_DWORD)v130 << 8);
  LODWORD(STACK[0xC89C]) = STACK[0x69B0];
  v133 = v98 ^ ((((unint64_t)(v89 + 144) << 56) - 0x2F00000000000000) ^ (((unint64_t)(LODWORD(STACK[0x6990]) + 25693) << 48)
                                                                                              - 0x13000000000000) | v101 ^ (2 * (((_DWORD)v130 << 16) & 0x511D0000 ^ v130 ^ (((_DWORD)v130 << 16) ^ 0x12830000) & (((v129 ^ 0x400C1283) << 8) & 0x511D0000 ^ 0x400D0000 ^ (((v129 ^ 0x400C1283) << 8) ^ 0x1D120000) & (v129 ^ 0x400C1283)))));
  LOBYTE(v129) = (v104 - ((2 * v104) & 0x7A) + 61) & 8;
  v134 = (((unint64_t)(v117 + 114) << 56) - 0x1B00000000000000) ^ v131 & 0x2451760000000000 ^ (((unint64_t)(v107 + 53176) << 48) - 0x30000000000000) ^ v132;
  LODWORD(v130) = ((v106 & 8 ^ 0xC0040C) & 0xFFFFFFEF | (16 * (((v106 & 8) >> 3) & 1))) + 1528609385;
  v135 = v4;
  LOBYTE(v101) = (((v130 ^ 0xCA) + 126) ^ ((v130 ^ 0x6E) - 38) ^ ((v130 ^ 0x2E) - 102)) + (v129 ^ 0x2D) + 96;
  LODWORD(v130) = v4[45] - ((2 * v4[45]) & 0xFF0F);
  v136 = ((*(v4 - 1) - 0x49C02619CA181C17 - ((2 * *(v4 - 1)) & 0x1D2)) ^ 0xB63FD9E635E7E3E9) << (v129 ^ 8u);
  v137 = v44 + 535;
  LOBYTE(v132) = *(_BYTE *)(v44 + 535 + (v116 ^ 0x9ALL));
  LOBYTE(v106) = v101 - ((2 * v101 + 6) & 0xF8);
  LOBYTE(v101) = ((v106 + 1) ^ 0xC4) & (v129 ^ 0xCD) ^ 0x92;
  v138 = v136 << (((2 * (((2 * v101) & 0xBC) - v101) + 2) ^ 0xAE)
                + (v129 ^ 0x8D ^ (v106 - ((2 * (v106 + 1)) & 0x80) + 65)));
  v139 = v118 ^ (((unint64_t)(v99 + 112) << 56) - 0x1200000000000000) ^ ((v133 ^ 0x54A00000F61D48BLL)
                                                                                              + 0x68864EFB6C144DE7
                                                                                              - 2
                                                                                              * ((v133 ^ 0x54A00000F61D48BLL) & 0x68864EFB6C144DF7 ^ v133 & 0x10)) ^ (2 * v128);
  v140 = ((v132 - ((2 * v132) & 0xD8) - 20) ^ v116 ^ 0x61);
  v141 = ((((v140 >> 1) & 3) << 41) | 0x2D00009340080044) ^ ((((unint64_t)(*(unsigned __int8 *)(v2 + 20)
                                                                                  - ((2 * *(unsigned __int8 *)(v2 + 20)) & 0xFFDFu)
                                                                                  + 60443) << 48)
                                                              - 0x2C000000000000) ^ 0xB93AF9209FD3E3B8) & ~(v140 << 40);
  v142 = v9[58];
  v143 = (((*(unsigned __int8 *)(v2 + 10) - ((2 * *(unsigned __int8 *)(v2 + 10)) & 0x138)) << 16)
        + 0xE4849EC2B9C0000) ^ (*(v135 - 4) + 0x6CBBA4A18F1B73FELL - ((2 * *(v135 - 4)) & 0x1FCLL)) ^ (((v142 - ((2 * (int)v142) & 0x68)) << 24) + 0x5D004ED434000000) ^ (((unint64_t)(v130 + 1226069161) << 32) - 0x2200000000) ^ (((unint64_t)(*(unsigned __int8 *)(v2 + 68) - ((2 * *(unsigned __int8 *)(v2 + 68)) & 0xB8u) + 128) << 56) - 0x2400000000000000) ^ (v138 + 0x6CBBA4A18F1B73FELL + (~(2 * v138) | 0x2688B6BCE1C91803) + 1) ^ 0x78F7FBFA1F9B26A2 ^ (((2 * v141) | 0x6BE3F34F1DFB3248) - v141 + 0x4A0E0658710266DCLL);
  v144 = v143 ^ v134;
  v145 = v139 ^ 0x25171960D51E15B6;
  v146 = v143 ^ (STACK[0x69A0]
               - ((2 * STACK[0x69A0] + 0x64CC4B19DCF5FF7CLL) & 0xE91F50A2A242B8F4)
               - 0x590A3221C063A3C8);
  v147 = v144 ^ (v146 ^ 0xEAEC8E9752DA4748) & (v133 ^ 0xECE3E112BAEF4C28);
  v146 ^= 0x15137168AD25B8B7uLL;
  v148 = v146 ^ (v139 ^ 0x25171960D51E15B6) & (v133 ^ 0x131C1EED4510B3D7);
  v149 = v133 ^ 0xF4CA3AC62BA6E045 ^ (v139 ^ 0xDAE8E69F2AE1EA49) & (v134 ^ 0x2C32EB35EEBE03EFLL);
  v150 = (v144 ^ 0x139E8E0F3CBACB8FLL) & v146;
  v151 = v147 ^ 0xC8E52B29A530B657;
  v152 = (v148 ^ -v148 ^ (v149 - (v148 ^ v149))) + v149;
  v153 = v147 ^ 0x8F4BA7982356F3A0 ^ v148;
  v154 = v145 ^ (v144 ^ 0xEC6171F0C3453470) & (v134 ^ 0xD3CD14CA1141FC10);
  v155 = ((v150 ^ -v150 ^ ((v134 ^ 0x2C32EB35EEBE03EFLL) - (v150 ^ v134 ^ 0x2C32EB35EEBE03EFLL)))
        + (v134 ^ 0x2C32EB35EEBE03EFLL)) ^ 0x468584D5EEC58272 ^ v154;
  v156 = v155 & 0x20;
  v157 = v154 ^ 0x6E807D10291F7139;
  v158 = v147 ^ 0x6B76AE1260F4D782;
  if (((v155 >> 10) & v156) != 0)
    v156 = -(uint64_t)v156;
  v159 = v152 ^ __ROR8__(v152, 61) ^ (v152 >> 39) ^ (v152 << 25);
  v160 = (v157 ^ (v157 >> 1)) + (v157 << 63);
  v161 = v155 & 0xFFFFFFFFFFFFFFDFLL ^ (v155 << 54) ^ (v155 >> 17) ^ (v155 << 47) ^ (v156 + (v155 >> 10));
  v162 = __ROR8__(v157, 6);
  v163 = v159 ^ v160 ^ v162;
  v164 = v161 & ~v163;
  v165 = (v160 ^ v162) & ~v159;
  v166 = __ROR8__(v158, 7);
  v167 = (v151 ^ (v151 >> 41) ^ v166 ^ 0xA393853BC595A817) & 0x1F4AD5836BBC0A57 ^ (v158 << 23) & 0x1F4AD5836B800000 | (v151 ^ (v151 >> 41) ^ v166 ^ 0xA393853BC595A817) & 0xE0B52A7C9443F5A8 ^ (v158 << 23) & 0xE0B52A7C94000000;
  v168 = v161 ^ v167;
  v169 = v153 ^ v167 ^ __ROR8__(v153, 28) ^ __ROR8__(v153, 19);
  v170 = v165 ^ v169;
  v171 = v163 ^ v167 & ~v161;
  v172 = v171 + 0x644855FFB8A9A768;
  v173 = 0x9BB7AA0047565898;
  if (v171 < 0x9BB7AA0047565898)
  {
    v172 = v171;
    v173 = 0;
  }
  v174 = v169 & ~v168 ^ v161;
  if (v172)
    v175 = v171;
  else
    v175 = v173;
  v176 = v159 & ~v169 ^ v168;
  v177 = v174 & 0x400000000;
  v178 = v159 ^ 0xE6CB410EAF9D375FLL ^ v164;
  v179 = v170 ^ 0x56AAE6BF024184FFLL ^ v176;
  v180 = v178 ^ v170;
  v181 = v174 & 0xFFFFFFFBFFFFFFFFLL;
  if ((v171 & v177) != 0)
    v177 = -v177;
  v182 = v181 ^ 0x3378C4AC0693E070 ^ (v177 + v171);
  v183 = v179 ^ __ROR8__(v179, 19) ^ (v179 >> 28);
  v184 = (v175 ^ 0x15C7857573502C40) >> (v91 & 2) >> (v91 & 4) >> (v91 & 6 ^ 6);
  v185 = __ROR8__(v180, 61);
  v186 = v182 ^ (v182 << 47) ^ (v182 >> 10) ^ ((v182 >> 17) | (v182 << 54));
  v187 = ((v180 << 25) ^ (-33554432 * v180) ^ ((v180 ^ v185 ^ (v180 >> 39))
                                               - (v180 ^ v185 ^ (v180 >> 39) ^ (v180 << 25))))
       + (v180 ^ v185 ^ (v180 >> 39));
  v188 = v183 & 0x411BE32BB52E780ALL ^ (v179 << 36) & 0x411BE32000000000 | v183 & 0xBEE41CD44AD187F5 ^ (v179 << 36) & 0xBEE41CD000000000;
  v189 = v176 ^ 0x62C1F2A9E89E4C79 ^ ((v176 ^ 0x62C1F2A9E89E4C79) << 23) ^ (((v176 ^ 0x62C1F2A9E89E4C79) >> 7) ^ ((v176 ^ 0x62C1F2A9E89E4C79) >> 41) | ((v176 ^ 0x62C1F2A9E89E4C79) << 57));
  v190 = v188 ^ v189;
  v191 = v187 | ~(v188 ^ v189);
  v192 = __ROR8__(v175, 1);
  v193 = v175 ^ 0x192031B6E632AD31 ^ (((v175 << 58) ^ v192 ^ 0xAE3C2BAB9A81620 ^ v184)
                                      - ((2 * ((v175 << 58) ^ v192 ^ 0xAE3C2BAB9A81620 ^ v184)) & 0x19CF69872AC502E2)
                                      + 0xCE7B4C395628171);
  v194 = v193 ^ v187;
  v195 = v193 & ~v187;
  v196 = v186 & ~v194 ^ v187;
  v197 = v188 ^ v189 ^ ~v187;
  v198 = (v197 & 0x2000000000000000 & v191) == 0;
  v199 = v197 & 0x2000000000000000 ^ v191;
  v200 = v191 - (v197 & 0x2000000000000000);
  if (v198)
    v200 = v199;
  v201 = v186 ^ v189;
  v202 = v197 & 0xDFFFFFFFFFFFFFFFLL ^ v186 ^ v189 ^ v200;
  v203 = v194 ^ v189 & ~v186;
  v204 = v195 ^ v190;
  v205 = (v186 ^ ~v189) + (v188 ^ ~v189) - 2 * ((v186 ^ ~v189) & ~v190);
  v206 = v204 & 0x1000000000000000;
  if ((v204 & 0x1000000000000000 & v196) != 0)
    v206 = -v206;
  v207 = v204 ^ v202 ^ 0x7D752DD7DCC251B6;
  v208 = v204 & 0xEFFFFFFFFFFFFFFFLL ^ 0xEEAFC2D3EC65C482 ^ (v206 + v196);
  if ((~v50 & 0xA4) == 0)
    v205 = v190;
  v209 = __ROR8__(v208, 61);
  v210 = (v205 & ~v201 ^ v186 ^ v203)
       - 0x278FF5B34B90AE50
       - ((2 * (v205 & ~v201 ^ v186 ^ v203)) & 0xB0E0149968DEA360);
  v211 = ((v208 ^ v209 ^ -(uint64_t)(v208 ^ v209) ^ ((v208 >> 39) - (v208 ^ v209 ^ (v208 >> 39)))) + (v208 >> 39)) ^ (v208 << 25);
  v212 = v210 ^ __ROR8__(v210, 10) ^ (v210 >> 17) ^ (v210 << 47);
  v213 = v202 ^ 0x66173F92B629299ALL ^ __ROR8__(v202 ^ 0x66173F92B629299ALL, 7) ^ ((v202 ^ 0x66173F92B629299ALL) >> 41) ^ ((v202 ^ 0x66173F92B629299ALL) << 23);
  v214 = v203 ^ 0xE7E200F443AAFCDFLL ^ ((v203 ^ 0xE7E200F443AAFCDFLL) >> 1) ^ ((v203 ^ 0xE7E200F443AAFCDFLL) >> 6) ^ ((v203 ^ 0xE7E200F443AAFCDFLL) << 58) ^ ((v203 ^ 0xE7E200F443AAFCDFLL) << 63);
  v215 = v211 ^ v214;
  v216 = v207 ^ __ROR8__(v207, 19) ^ (v207 >> 28) ^ (v207 << 36) ^ v213;
  v217 = v212 & ~(v211 ^ v214);
  v218 = v214 & ~v211 ^ v216;
  v219 = (v153 >> 19) & 0x2D;
  v220 = __ROR8__(__ROR8__(v213, 14) ^ __ROR8__(v212, 14) ^ 0x136729FDC24787B1, 50);
  v221 = v211 & ~v216 ^ v220;
  v222 = (v220 ^ 0x35808F6E1E13BB26) & v216;
  v198 = v161 == 0;
  v223 = v220 ^ 0xCA7F7091E1EC44D9;
  v224 = __ROR8__(__ROR8__(v218, 37) ^ 0x1446041100294020, 27) ^ 0x528040288C08220;
  if (v198)
    v224 = v218;
  v225 = v224 ^ v221 ^ 0xCA7F7091E1EC44D9;
  v226 = v215 ^ v223 & ~v212;
  v227 = v217 ^ v211;
  v228 = (v225 & 0x677D845A8ED0AA31 | (v221 ^ 0xCA7F7091E1EC44D9 ^ v218) & 0x98827BA5712F55CELL) ^ 0xC5AB08FD33C1B5A7;
  v229 = v227 ^ v218;
  *((_QWORD *)&v230 + 1) = v229 ^ 0x318CC080266427A2;
  *(_QWORD *)&v230 = v229;
  v231 = v212 ^ 0xCC98C5A695FE0D08 ^ v222 ^ v226;
  v232 = v226 ^ 0x32237A0B9C0468F5 ^ __ROR8__(v226 ^ 0x32237A0B9C0468F5, 1);
  v233 = __ROR8__(__ROR8__(v223, 6) ^ __ROR8__(v229 ^ 0x318CC080266427A2 ^ v223 ^ (v230 >> 61) ^ ((v229 ^ 0x318CC080266427A2) >> 39) ^ ((v229 ^ 0x318CC080266427A2) << 25), 6) ^ 0x2E5FA58AAC9E45B3, 58);
  v234 = v231 ^ __ROR8__(v231, 10) ^ (v231 >> 17) ^ (v231 << 47);
  v235 = __ROR8__(__ROR8__(v226 ^ 0x32237A0B9C0468F5, 30) & 0xFFFFFF03FFFFFFFFLL ^ __ROR8__(v232, 24) ^ 0x81BE8AA049AA57A0, 40) ^ ((v226 ^ 0x32237A0B9C0468F5) << 58) ^ v233 ^ 0x97E962AB27916CCALL;
  v236 = v221 ^ 0x6AC71656799A833DLL ^ ((v221 ^ 0x6AC71656799A833DLL) << 23) ^ (((v221 ^ 0x6AC71656799A833DLL) >> 41) | ((v221 ^ 0x6AC71656799A833DLL) << 57)) ^ ((v221 ^ 0x6AC71656799A833DLL) >> (v232 & 7) >> (v232 & 7 ^ 7));
  v237 = v236 ^ __ROR8__(v228, 28) ^ __ROR8__(__ROR8__((v228 << v219 << (v219 ^ 0x2Du)) ^ (v228 >> 19), 19) ^ __ROR8__(v228, 19), 45);
  v238 = v236 ^ v234;
  v239 = v235 ^ 0xA049AA57A081BE8ALL ^ v236 & ~v234;
  v240 = v237 ^ (v235 ^ 0xA049AA57A081BE8ALL) & (v233 ^ 0x68169D54D86E9335);
  v241 = v233 ^ (v235 ^ 0x5FB655A85F7E4175) & v234 ^ 0xFF42884E54EA1A59 ^ v240;
  v242 = (__ROR8__(__ROR8__(v237, 46) ^ 0xC1BF5D692091EA92, 18) ^ 0x855B4F9028A5B7DBLL) & (v233 ^ 0x97E962AB27916CCALL) ^ v238;
  v243 = v237 & ~v238 ^ v234;
  v244 = v242 ^ v240;
  v245 = v243 & 0x400;
  v246 = v241 << 25;
  v247 = v243 & 0xFFFFFFFFFFFFFBFFLL;
  if ((v245 & v239) != 0)
    v245 = -(uint64_t)v245;
  v248 = __ROR8__(__ROR8__(v244, 37) ^ 0x26FFCBE2DF27AE0DLL, 27) ^ 0x37F4E2BF9107770;
  v249 = v247 ^ 0x1DE76D00F7B2971ELL ^ (v245 + v239);
  v250 = v242 ^ 0xF14770720A54D309;
  v251 = v241 ^ __ROR8__(v241, 61) ^ (v241 >> 39) ^ v246;
  *((_QWORD *)&v252 + 1) = v239;
  *(_QWORD *)&v252 = v239 ^ 0xA2A16E7D4060C2ACLL;
  v253 = ((v250 >> 41) | (v250 << 57)) ^ (v250 << 23) ^ ((v250 >> 7) + v250 - 2 * ((v250 >> 7) & v250));
  v254 = (v252 >> 1) ^ v239 ^ 0xA2A16E7D4060C2ACLL ^ ((v239 ^ 0xA2A16E7D4060C2ACLL) >> 6) ^ ((v239 ^ 0xA2A16E7D4060C2ACLL) << 58);
  v255 = v251 ^ v254;
  v256 = v248 ^ __ROR8__(v248, 19) ^ (v248 >> 28) ^ (v248 << 36) ^ v253;
  v257 = v256 ^ v254 & ~v251;
  v258 = __ROR8__(v257, 20);
  v260 = v249 ^ __ROR8__(v249, 10) ^ (v249 >> 17) ^ (v249 << 47);
  if (v9[58])
    v261 = (-2 - ((v256 | 0x40000000000) + (v256 ^ 0xFFFFFBFFFFFFFFFFLL))) ^ v256 & 0xFFFFFBFFFFFFFFFFLL;
  else
    v261 = 0;
  v259 = (-2 - ((v256 | 0x40000000000) + (v256 ^ 0xFFFFFBFFFFFFFFFFLL))) ^ v256 & 0xFFFFFBFFFFFFFFFFLL;
  v262 = ((v259 | v251) - ((v261 ^ v251 | v259) ^ v259 & v251)) ^ v253 ^ v260;
  v263 = v258 ^ __ROR8__(v262, 20) ^ 0xE6EF1801C720FFF8;
  v264 = v256 & ~(v253 ^ v260);
  v265 = v260 & ~v255;
  v266 = __ROR8__(__ROR8__(v263, 43) ^ 0x38E41FFF1CDDE3, 1);
  v267 = v253 & ~v260 ^ v255;
  v268 = v251 ^ v265 ^ 0x571B3575A2341BFALL ^ v257;
  v269 = v266 ^ __ROR8__(v266 ^ 0xB6B768613EBB9D27, 19) ^ ((v266 ^ 0xB6B768613EBB9D27) << 36);
  v270 = v269 ^ ((v266 ^ 0xB6B768613EBB9D27) >> 28);
  v271 = v262 ^ 0xC82025ADB5EE3DBDLL;
  v272 = v260 ^ v267 ^ 0xDC2F246663682B79 ^ v264;
  LOBYTE(v264) = *(_BYTE *)(v137 + (((v268 >> 61) + 227) ^ 0xB2));
  v135[7] = v270 ^ 0x27;
  v273 = v272 >> 17;
  *(_BYTE *)STACK[0x6A30] = ((((v269 ^ ((v266 ^ 0xB6B768613EBB9D27) >> 28)) >> 24) ^ 0x3E)
                           - ((2
                             * (((v269 ^ ((v266 ^ 0xB6B768613EBB9D27) >> 28)) >> 24) ^ 0x3E)) & 0xD0)
                           - 24) ^ 0xE8;
  v274 = v267 ^ __ROR8__(v267 ^ 0xBFACA330503123F3, 1) ^ ((v267 ^ 0xBFACA330503123F3) >> 6);
  v275 = v274 ^ ((v267 ^ 0xBFACA330503123F3) << 58);
  v276 = v264 ^ ((v268 >> 61) - 29 + ((2 * (((v268 >> 61) - 29) & 3)) ^ 0x7F) - 44) ^ 0xD3;
  if (v246)
    v277 = v272 ^ (v272 << 54);
  else
    v277 = 0;
  v278 = v262 ^ (v271 << 57) ^ (((v262 ^ 0xC82025ADB5EE3DBDLL) >> 7)
                              + ((v262 ^ 0xC82025ADB5EE3DBDLL) >> 41)
                              - 2 * (((v262 ^ 0xC82025ADB5EE3DBDLL) >> 7) & ((v262 ^ 0xC82025ADB5EE3DBDLL) >> 41)));
  v279 = (v278 & 0xDA550FC2678A2870 ^ 0xDA550C02210A0851) + (v278 & 0x25AAF03C9875D78FLL) - 1;
  v280 = (v279 & 0xA8C2821AD7C92FA1 ^ 0x2802801043080380)
       + (v279 ^ 0xD6FD3FEBBCE73C67)
       - ((v279 ^ 0xD6FD3FEBBCE73C67) & 0xA8C2821AD7C92FA1);
  v281 = (v277 ^ (v272 >> 10) | v272 ^ (v272 << 54)) ^ (v272 >> 10) & v272;
  v282 = v281 + v273;
  v283 = v281 & v273;
  v7[33] = BYTE1(v270) ^ 0x9D;
  v284 = (unint64_t)&_mh_execute_header & ~v278;
  if ((v284 & (v271 << 23)) != 0)
    v284 = -(uint64_t)v284;
  v285 = v9;
  v9[86] = BYTE5(v269) ^ 0x68;
  v286 = v280 ^ (v284 + (v271 << 23));
  v287 = v268 ^ (v268 >> 39) ^ (8 * v268);
  v288 = v287 ^ (v268 << 25);
  v289 = v288 ^ v276;
  v290 = v282 - 2 * v283;
  v7[4] = BYTE2(v270) ^ 0xBB;
  v135[18] = BYTE4(v270) ^ 0x61;
  v291 = STACK[0x69D0];
  LODWORD(v269) = *(unsigned __int8 *)(STACK[0x69D0] + (((BYTE6(v269) ^ 0xB7) + 86) ^ 0xE3));
  v292 = (STACK[0x69C0] ^ 0x72) & 0xFFFFFF83 ^ 0x6B ^ (((STACK[0x69C0] ^ 0x72) & 0x9B ^ 0xFFFFFF8C)
                                                     + ((STACK[0x69C0] ^ 0x72) & 0x91 ^ 0x71)
                                                     - (((STACK[0x69C0] ^ 0x72) & 0x9B ^ 0xFFFFFF8C) & 0xFFFFFF95));
  LODWORD(v269) = ((v269 >> 5) | (8 * v269))
                + (~(2 * ((v269 >> 5) | (8 * v269))) | 0x59)
                + 84;
  LODWORD(v269) = (((16 * v269) ^ 0x30) - ((2 * ((16 * v269) ^ 0x30)) & 0xFFFFFFBF) + 83) ^ v269;
  LODWORD(v269) = LODWORD(STACK[0x55FC])
                - 19 * (((v269 ^ 0xFFFFFFFB) + 21) ^ ((v269 ^ 0xFFFFFFE3) + 13) ^ ((v269 ^ 0xFFFFFF91) + 127));
  v293 = v269 & 0x4E ^ 0x55;
  v294 = v286 ^ 0x6C4A945FFFCA262BLL;
  v295 = v290 ^ (v272 << 47);
  v296 = ((2 * v292) | 0xBA) - v292 - 93;
  *(_BYTE *)STACK[0x6AA0] = v269 ^ (2
                                  * ((v269 ^ 0x24) & (2
                                                    * ((v269 ^ 0x24) & (2
                                                                      * ((v269 ^ 0x24) & (2
                                                                                        * ((v269 ^ 0x24) & (2 * ((v293 | 0x20) ^ v269 & 0x2A)) ^ v293)) ^ v293)) ^ v293)) ^ v293)) ^ 0x4E;
  v297 = *(unsigned __int8 *)(v291 + (((HIBYTE(v269) ^ 0xB6) + 86) ^ 0xE3));
  v285[70] = BYTE1(v287);
  v298 = ((v297 >> 5) | (8 * v297)) - ((2 * ((v297 >> 5) | (8 * v297))) & 0xFF8) - 4;
  v299 = v298 ^ (16 * v298);
  v300 = v289 ^ 0xBD86E5AA6988F52BLL;
  if (!v215)
    v300 = 0x42791AAA6988F58ELL;
  v301 = -2
       - ((~((v300 ^ 0xBD86E5AA90276FDCLL) & (v289 ^ 0x1FE56452367174B5) ^ v300 & 0xE01A9BADC98E8BEFLL) | 0x1A6EFDC254372D98)
        + ((v300 ^ 0xBD86E5AA90276FDCLL) & (v289 ^ 0x1FE56452367174B5) ^ v300 & 0xE01A9BADC98E8BEFLL | 0xE591023DABC8D267));
  *(_BYTE *)(v2 + 52) = v274 ^ 0xF3;
  *(_BYTE *)STACK[0x6A10] = ((BYTE1(v274) ^ 0x23) - ((2 * (BYTE1(v274) ^ 0x23)) & 0x52) + 41) ^ 0x29;
  *(_BYTE *)(v2 + 62) = HIBYTE(v275) ^ 0xBF;
  v7[25] = -19 * (((v299 ^ 0x66) - 78) ^ ((v299 ^ 0xFD) + 43) ^ ((v299 ^ 0x2E) - 6)) + 89;
  v285[51] = BYTE2(v287);
  *(_BYTE *)STACK[0x6A00] = ((BYTE4(v274) ^ 0x30) - 2 * ((BYTE4(v274) ^ 0x30) & 0x66 ^ BYTE4(v274) & 6) + 96) ^ 0x60;
  v135[39] = BYTE3(v288);
  v285[92] = HIBYTE(v288);
  v302 = v285;
  v7[67] = v289 ^ 0xA5;
  v7[21] = (v275 ^ 0xBFACA330503123F3) >> (~(v296 ^ 0xF4) & 0x29) >> ((v296 ^ 0xF4) & 0x16 ^ 2u) >> (v296 & 0x3F ^ 7u);
  v285[85] = BYTE5(v288);
  *(_BYTE *)(v2 + 39) = ((v289 ^ 0xF9AF9AF7)
                       + 0xD27636EC47
                       + (((v301 ^ 0xE7554B5CFELL) + 0x5FF74C96EDLL) ^ ((v301 ^ 0xC86304D61) + 0xB424378774) ^ ((v301 ^ 0x7EF8B5C834) + 0xC65AB20227))) >> 32;
  *(v135 - 5) = BYTE6(v288);
  *(_BYTE *)STACK[0x6A20] = ((BYTE2(v274) ^ 0x31) - ((2 * (BYTE2(v274) ^ 0x31)) & 0x9A) - 51) ^ 0xCD;
  LODWORD(v301) = ((v290 + 86) >> 7) & 1 | (2 * ((v290 + 86) & 0x7F));
  *(_BYTE *)(v2 + 47) = BYTE5(v274) ^ 0xA3;
  *(_BYTE *)STACK[0x69E0] = ((BYTE6(v274) ^ 0xAC) - 2 * ((BYTE6(v274) ^ 0xAC) & 0x72 ^ BYTE6(v274) & 2) - 16) ^ 0xF0;
  LODWORD(v301) = v301 ^ -(int)v301 ^ ((v301 ^ 0xB1) + 79);
  LODWORD(v301) = *(unsigned __int8 *)(v291 + ((((v301 & 1) << 7) | ((v301 + 78) >> 1)) ^ 0xC4));
  LODWORD(v301) = (v301 >> 5) | (8 * v301);
  v303 = (2 * v301) & 0xFFC;
  LODWORD(v301) = v301 + 126;
  v304 = v301 - v303;
  *(_BYTE *)(v2 + 34) = BYTE2(v290);
  LODWORD(v301) = (((_DWORD)v301 << 6) | (v304 >> 2) & 3) ^ 0xFFFFFF8C;
  v135[42] = BYTE3(v290);
  v285[87] = BYTE1(v290);
  *(_BYTE *)(v2 + 65) = HIBYTE(v295);
  LOBYTE(v301) = (((_BYTE)v301 << 6) | ((v301 & 0xFC) >> 2)) ^ v304;
  *(v135 - 4) = v278 ^ 0xBD;
  *(_BYTE *)(v2 + 51) = BYTE4(v290);
  *(v135 - 1) = BYTE1(v294);
  *(_BYTE *)STACK[0x69F0] = BYTE5(v295);
  v7[50] = LODWORD(STACK[0x6980]) - 19 * (((v301 ^ 0x36) + 62) ^ ((v301 ^ 0x35) + 63) ^ ((v301 ^ 0x37) + 61));
  *v7 = BYTE6(v295);
  v305 = *(unsigned __int8 *)(v291
                            + ((((v294 >> 15) & 0xAC) + (BYTE2(v294) ^ 0x56)) ^ 0xE3));
  v306 = ((v305 >> 5) | (8 * v305)) - ((2 * ((v305 >> 5) | (8 * v305))) & 0x42) + 33;
  LOBYTE(v306) = (((16 * v306) ^ 0x10) - ((32 * v306) & 0x40) + 33) ^ v306;
  v135[45] = BYTE4(v294);
  v135[8] = BYTE5(v294);
  v302[58] = ~BYTE3(v286);
  *(_BYTE *)(v2 + 10) = -19 * (((v306 ^ 0xDA) - 111) ^ (v306 + 75) ^ ((v306 ^ 0xD3) - 102)) - 116;
  v307 = *(unsigned __int8 *)(v291 + ((((v294 >> 47) & 0xAC) + (BYTE6(v294) ^ 0x56)) ^ 0xE3));
  *(_BYTE *)(v2 + 68) = HIBYTE(v286) ^ 0x6C;
  v308 = ((v307 >> 5) | (8 * v307)) - ((2 * ((v307 >> 5) | (8 * v307))) & 0xFFFFFFC7) + 99;
  LOBYTE(v308) = (((16 * v308) ^ 0x30) + (~(2 * ((16 * v308) ^ 0x30)) | 0x3F) + 100) ^ v308;
  *(_BYTE *)(v2 + 20) = LODWORD(STACK[0x6A60])
                      - 19 * (((v308 ^ 0xE6) - 104) ^ ((v308 ^ 0xCC) - 66) ^ ((v308 ^ 0xA3) - 45));
  v309 = STACK[0x6A90];
  v310 = *(_QWORD *)(STACK[0x6A90] - 4);
  v311 = STACK[0xC89C];
  LODWORD(STACK[0x6A30]) = -1923485298;
  *(_DWORD *)(v310 + 16) = v311 - 1923485298;
  v312 = *(_QWORD *)STACK[0x6AB0];
  LODWORD(STACK[0x6AA0]) = (*(_DWORD *)(v312 + 24) ^ 0x7FFE4FF3)
                         - 223887744
                         + ((2 * *(_DWORD *)(v312 + 24)) & 0xFFFC9FE6);
  v313 = *(unsigned __int8 **)(v309 - 4);
  v314 = *(unsigned __int8 **)(STACK[0x6A40] - 4);
  v315 = v314[63] - ((2 * v314[63]) & 0x8ALL);
  v316 = v313[9];
  LODWORD(v310) = (((v313[40] >> 4) | (16 * v313[40])) - ((32 * v313[40]) & 0x40) - 96);
  LODWORD(v310) = ((v310 ^ 0x75301175) - 1966084469) ^ ((v310 ^ 0x97253C6) - 158487494) ^ ((v310 ^ 0x7C424213)
                                                                                         - 2084717075);
  v317 = ((v310 - 28536) ^ 0x66D3) & (2 * ((v310 - 28536) & 0x7018)) ^ (v310 - 28536) & 0x7018;
  v318 = ((2 * ((v310 - 28536) ^ 0xA6D3)) ^ 0xAD96) & ((v310 - 28536) ^ 0xA6D3) ^ (2 * ((v310 - 28536) ^ 0xA6D3)) & 0xD6CA;
  v319 = v318 ^ 0x5249;
  v320 = v317 ^ 0xD6CB ^ (v318 ^ 0x8080) & (4 * v317);
  LOWORD(v301) = (4
                * ((16 * v320) & 0xD6C0 ^ v320 ^ ((16 * v320) ^ 0x6CB0) & ((4 * v319) & 0xD6C8 ^ 0x84C3 ^ ((4 * v319) ^ 0x5B2C) & v319))) ^ (2 * (v310 - 28536));
  LOWORD(v301) = (v301 & 0x134 ^ 0x2113 | v301 & 0x40) - 1;
  v321 = v310 + (((v301 & 0x70 ^ 0xA5051031) + (v301 & 0x104 ^ 0x6A0E8D) - 2) ^ 0x5A90E147) + 347;
  LODWORD(v310) = *(unsigned __int8 *)(v312 + 94);
  v322 = (unint64_t)*(&off_1015B46D0 + SLODWORD(STACK[0x55EC]));
  STACK[0x6A90] = v322;
  v323 = *(unsigned __int8 *)(v322 + 533 + v321);
  STACK[0x6A00] = v322 + 533;
  v324 = v323 ^ 0xE1;
  v325 = (v323 ^ 0xE1) - ((2 * (v323 ^ 0xE1)) & 0x72) + 0x1A5D0559C695B839;
  v326 = (unsigned __int8 *)*(&off_1015B46D0 + SLODWORD(STACK[0x55E0]));
  STACK[0x6A40] = (unint64_t)v326;
  v327 = *(_BYTE *)(v312 + 3);
  v328 = ((unint64_t)(*v326 - ((2 * *v326) & 0x40u) - 682820827) << 32) - 0x500000000;
  v329 = (v325 ^ 0xE5A2FAA6396A47C0) & ((((v316 - ((2 * (int)v316) & 0x1C0)) << 8) + 0x12D71E42A581E000) ^ 0xBB34B987EFDDD6D9) ^ v325 & 0x120C000000018926;
  v330 = (v329 & 0x9A56BAC21226F845 ^ 0x9A56B2C01204F841) + (v329 & 0x65A9453DEDD907BALL ^ 0x4400402021000101) - 1;
  v331 = ((v135[69] - ((2 * v135[69]) & 0x186)) << 24) + 0x47CAF11FC3000000;
  LOBYTE(v329) = (((2 * v327) & 0x10 ^ 0x33) - ((2 * v327) & 0x10) + ((2 * v327) & 0x90) + 0x80) ^ 0xB0;
  v332 = (v315 << 16) - 0xB52498BD7BB0000;
  LOBYTE(v329) = (((v327 ^ 0xEF) - 61) ^ ((v327 ^ 0x9F) - 77) ^ ((v327 ^ 0x38) + 22))
               + (((((v329 | 0x9D) - (v329 | 0x62) + 98) ^ 0xDF) + 46) ^ ((((v329 | 0x9D) - (v329 | 0x62) + 98) ^ 0xD8)
                                                                        + 43) ^ ((((v329 | 0x9D) - (v329 | 0x62) + 98) ^ 0x99)
                                                                               + 108))
               + 79;
  LOBYTE(v315) = v329 & 0x78 ^ 0xD5;
  LOBYTE(v329) = (v329 ^ (2
                        * ((v329 ^ 0x5C) & (2
                                          * ((v329 ^ 0x5E) & (2
                                                            * ((v329 ^ 0x5E) & (2
                                                                              * ((v329 ^ 0x5E) & (2
                                                                                                * (((2 * (v315 ^ v329 & 0x26)) ^ 0xC) & (v329 ^ 0x5E) ^ v315)) ^ v315)) ^ v315)) ^ v315)) ^ v315))) & 0xFB;
  v333 = v314[12];
  v334 = v314;
  v335 = (((2 * ((v327 ^ 0x89) & 5)) | 0xC) - ((v327 ^ 0x89) & 5) - 6) ^ (v327 ^ 0x89) & 1;
  v336 = (v335 & 0xB9 ^ 0xB8) + (v335 ^ 7) - ((v335 ^ 7) & 0xB9);
  LOBYTE(v329) = v336 & 0xC4 ^ (v329 ^ 0x43) & (v336 ^ 0x47) ^ 4;
  v337 = ((unint64_t)(v313[3] - ((2 * v313[3]) & 0x9Au) + 216) << 56) - 0xB00000000000000;
  v338 = ((unint64_t)(v310 - ((2 * (_DWORD)v310) & 0x1E0) + 9132567) << 40) - 0x270000000000;
  v339 = v330 ^ (32 * (v324 & 7) - ((unint64_t)(v324 & 3) << 6) - 0x772146FAB5FA1597);
  LOBYTE(v330) = *(_BYTE *)(v312 + 2) - 71;
  LOBYTE(v310) = v330 & 0x61 ^ 0xF9;
  LOBYTE(v329) = *(_BYTE *)(v322 + 273 + ((((2 * v329) & 0x5A) - v329 + 82) ^ 0x16)) + 19;
  v340 = *(unsigned __int8 *)(v312 + 34)
       - ((2 * *(unsigned __int8 *)(v312 + 34)) & 0x9CLL)
       - 0x1535372AB097FCB2;
  v341 = v340 & 0xC05005074DB9 ^ 0x112800070C39 ^ ((((*(unsigned __int8 *)(v312 + 57)
                                                        - ((2 * *(unsigned __int8 *)(v312 + 57)) & 0x64)) << 8)
                                                      - 0x74168F279493CE00) ^ 0x6495565813948046) & (v340 ^ 0x1535372AB097FC39);
  v342 = ((2 * v341) & 0xBAB8CC81CE708D0ALL) - v341 - 0x5D5C6640E7384686;
  v343 = ((unint64_t)(v313[8] - ((2 * v313[8]) & 0x16Cu) + 21198) << 48) - 0x18000000000000;
  v344 = ((v135[14] - ((2 * v135[14]) & 0x13ALL)) << 24) - 0x415CC10863000000;
  v345 = ((v344 ^ 0x3B71324A407EA5A8) - 0x51E9B647EBE51058) ^ ((v344 ^ 0x237134B614DBE69FLL) - 0x49E9B0BBBF40536FLL) ^ ((v344 ^ 0xA6A3380BC9A54337) + 0x33C443F99DC10939);
  v346 = (unint64_t)*(&off_1015B46D0 + SLODWORD(STACK[0x55E4]));
  STACK[0x6A20] = v346;
  v347 = *(unsigned __int8 *)v346;
  v348 = *(_BYTE *)(v322
                  + 273
                  + ((v330 ^ (2
                                             * ((v330 ^ 0xE) & (2
                                                              * ((v330 ^ 0xE) & (2
                                                                               * ((v330 ^ 0xE) & (2
                                                                                                * ((v330 ^ 0xE) & (2 * ((v330 ^ 0xE) & (2 * (((2 * (v330 & 0xF)) ^ 0x6E) & (v330 ^ 0xE) ^ v310)) ^ v310)) ^ v310)) ^ v310)) ^ v310)) ^ v310))) ^ 0x9Au));
  v349 = (v331 & 0x3423D8021000000 ^ 0xE7F4B4B088EC67F5 ^ (v331 ^ 0xB8350EE03CFFF12FLL) & (v332 ^ 0x815740BF6E5F12FLL)) & (v339 ^ 0x129813DFCCA3522ELL) ^ v339 & 0xE7F1B830A8B36925;
  v350 = *(&off_1015B46D0 + SLODWORD(STACK[0x55E8]));
  STACK[0x6A10] = (unint64_t)v350;
  v351 = v347 - ((2 * (int)v347) & 0xE4);
  v352 = (v342 ^ 0xA7A0E68B0AB0F0F8) & ~((unint64_t)(-105 * (v329 ^ 0x48)) << 16) | ((unint64_t)(-105 * (v329 ^ 0x48)) << 16) & 0x7777777777777777;
  v353 = ((v345 + 0x203B078B0D7CDCFELL) ^ 0x30A4324F2CDCD4F2) & (2
                                                                 * ((v345 + 0x203B078B0D7CDCFELL) & 0xB400B36F291ED8F2)) ^ (v345 + 0x203B078B0D7CDCFELL) & 0xB400B36F291ED8F2;
  v354 = ((2 * ((v345 + 0x203B078B0D7CDCFELL) ^ 0x30A532172CE4D592)) ^ 0x94B02F00BF41AC0) & ((v345
                                                                                                + 0x203B078B0D7CDCFELL) ^ 0x30A532172CE4D592) ^ (2 * ((v345 + 0x203B078B0D7CDCFELL) ^ 0x30A532172CE4D592)) & 0x84A5817805FA0D60;
  v355 = v354 ^ 0x84A48108040A0520;
  v356 = (v354 ^ 0x1007000F00040) & (4 * v353) ^ v353;
  v357 = ((4 * v355) ^ 0x129605E017E83580) & v355 ^ (4 * v355) & 0x84A5817805FA0D60;
  v358 = (v357 ^ 0x84016005E80500) & (16 * v356) ^ v356;
  v359 = ((16 * (v357 ^ 0x8421801800120860)) ^ 0x4A5817805FA0D600) & (v357 ^ 0x8421801800120860) ^ (16 * (v357 ^ 0x8421801800120860)) & 0x84A5817805FA0D60;
  v360 = (v359 ^ 0x10005A00400) & (v358 << 8) ^ v358;
  v361 = (((v359 ^ 0x84A58078005A0960) << 8) ^ 0xA5817805FA0D6000) & (v359 ^ 0x84A58078005A0960) ^ ((v359 ^ 0x84A58078005A0960) << 8) & 0x84A5817805FA0D00;
  v362 = v360 ^ 0x84A5817805FA0D60 ^ (v361 ^ 0x8481000000080000) & (v360 << 16);
  v363 = v352 & 0x21BA6EA5B1310F1DLL ^ 0x180662190310908 ^ ((v345 + 0x203B078B0D7CDCFELL) ^ (2
                                                                                             * ((v362 << 32) & 0x4A5817800000000 ^ v362 ^ ((v362 << 32) ^ 0x5FA0D6000000000) & (((v361 ^ 0x24817805F20D60) << 16) & 0x4A5817800000000 ^ 0x485800000000000 ^ (((v361 ^ 0x24817805F20D60) << 16) ^ 0x17805FA00000000) & (v361 ^ 0x24817805F20D60)))) ^ 0x6A4E22056C2432D0) & (v352 ^ 0x158077339077090ALL);
  LOBYTE(v361) = *v350 - 99;
  LOBYTE(v355) = v361 & 0x85 ^ 0x3D;
  v364 = *(unsigned __int8 *)(v312 + 55);
  v365 = *(unsigned __int8 *)(v312 + 91)
       - ((2 * *(unsigned __int8 *)(v312 + 91)) & 0x120)
       - 0x2544949149F80C70;
  v345 -= 0x2BC44505C9644A10;
  v366 = v338 & 0x8842C70000000000 ^ 0x5C228328802301CALL ^ (v328 ^ 0xD451C3F527989615) & (v338 ^ 0x74A60FFFA7BB97DFLL);
  v367 = ((2 * v366) | 0xAAC8F3A3FCDBE91ELL) - v366 - 0x556479D1FE6DF48FLL;
  LODWORD(v366) = *(v135 - 8);
  v368 = v343 & 0x1FD5000000000000 ^ 0xD40206010093020 ^ (v367 ^ 0xE23185A67BE22C8ELL) & (v343 ^ 0xAD49FFFFFFFFFFFFLL);
  v369 = v368 - ((2 * v368) & 0xDF8B99ED3AECD794) + 0x6FC5CCF69D766BCALL;
  v370 = (unint64_t)(-105 * ((v348 + 19) ^ 0x48)) << 32;
  v371 = (v365 ^ 0x2544949149F80C28) & (((v351 << 8) - 0x2B1A2BA2971D8E00) ^ 0x33B15923FA62B238) ^ v365 & 0xA2220004023FC7;
  v372 = (v345 + v363 + 1) ^ (0xE2ED56459F5B254FLL
                            - (((v352 ^ 0x9C8DB6D35AA82782) - 0x6BE097A555840BC6) ^ ((v352 ^ 0xD1AA3C0FD8E03773)
                                                                                       - 0x26C71D79D7CC1B37) ^ ((v352 ^ 0xA7580210EDC0E604) - 0x50352366E2ECCA40)));
  v373 = v352 ^ 0xF76D21760F2C2C44 ^ (v372 - ((2 * v372) & 0x3A255374C149B562) + 0x1D12A9BA60A4DAB1);
  LOBYTE(v368) = *(_BYTE *)(v322
                          + 273
                          + ((v361 ^ (2
                                                     * ((v361 ^ 0x2A) & (2
                                                                       * ((v361 ^ 0x2A) & (2
                                                                                         * ((v361 ^ 0x2A) & (2 * ((v361 ^ 0x2A) & (2 * ((v361 ^ 0x2A) & (2 * (((2 * v361) & 0x56 ^ 0x2E) & (v361 ^ 0x2A) ^ v355)) ^ v355)) ^ v355)) ^ v355)) ^ v355)) ^ v355))) ^ 0x7Eu));
  v374 = (v337 & 0xBE00000000000000 ^ 0x869A029036F18694 ^ (v369 ^ 0x51406B64C0DA786ALL) & (v337 ^ 0x32FFFFFFFFFFFFFFLL)) & (v349 ^ 0x290101088A34024) ^ v349 & 0xB41EFD17A69F1535;
  v375 = (v374 & 0xDA391092D13BEE4FLL ^ 0x4A211090D13BEA4ELL) + (v374 & 0x25C6EF6D2EC411B0 ^ 0x2400C90000040011);
  LODWORD(v352) = v334[2];
  v376 = v345 + v373;
  LODWORD(v373) = v313[45];
  LODWORD(v365) = v313[14];
  v377 = *(unsigned __int8 *)(v312 + 43);
  v378 = v313[55];
  STACK[0x69D0] = (unint64_t)v313;
  v379 = v135;
  LODWORD(v351) = v135[41];
  v380 = v370 | ((unint64_t)(v364 - 2 * (v364 & 0x3Fu) + 16237) << 48);
  v381 = v135[16];
  LOBYTE(v301) = *(_BYTE *)(v312 + 29);
  v382 = ((v333 - 2 * (v333 & 7)) << 16) - 0x342EF71FD0E10000;
  v383 = ((unint64_t)(v352 - ((2 * (_DWORD)v352) & 0x6C) + 4276065) << 40) - 0x2B0000000000;
  v384 = ((unint64_t)(v365 - ((2 * (_DWORD)v365) & 0x96) - 1056583805) << 32) - 0x3800000000;
  v385 = ((unint64_t)(v366 - ((2 * (_DWORD)v366) & 0xFFFFFFE7) + 60207) << 48) - 0x3C000000000000;
  v386 = (v371 ^ 0x18095081697D0C41) & ((v382 - 1572864) ^ 0x40C34099CA67BF51) ^ v371 & 0x74EDB7861A9F40AELL;
  v387 = (v386 & 0xEB0B091B37DC939DLL ^ 0x8B0B091B2558939DLL) + (v386 & 0x14F4F6E4C8236C62 ^ 0x4E0808008020003) - 1;
  v388 = v383 & 0x7CF9CB0000000000 ^ 0xC90CA4A16848043 ^ (v384 & 0x8101273300000000 ^ 0xF429EB6EB212D1EELL ^ ((((v377 - ((2 * (int)v377) & 0xD2)) << 24) + 0x43D8B9C669000000) ^ 0x35F6610A1249C4DELL) & (v384 ^ 0x3EFA30B4FFDFDFDFLL)) & (v383 ^ 0xBEC0C9FFFFFFFFFFLL);
  v389 = v387 & 0x48EBA24D5F5DCDA1 ^ 0xF71D7FF6FABA7E7ELL ^ ((v388
                                                              - ((2 * v388) & 0xB26F7050B455051ALL)
                                                              + 0x5937B8285A2A828DLL) ^ 0xA18C1971255725A0) & (v387 ^ 0x9FE2991B25479399);
  LODWORD(v371) = v135[61];
  v390 = ((v378 - ((2 * (int)v378) & 0x132)) << 8) + 0x1A31A96892489900;
  v391 = ((2 * (v382 & 0x20000 ^ 0xE394A1265230180)) | 0xD30FFB784CD26CC8)
       - (v382 & 0x20000 ^ 0xE394A1265230180)
       - 0x6987FDBC26693664;
  LOBYTE(v373) = *(_BYTE *)(v322
                          + 533
                          + ((((v373 >> 4) | (16 * v373))
                                             - ((2 * ((v373 >> 4) | (16 * v373))) & 0xA8)
                                             - 44) ^ 0x6ELL));
  LODWORD(v384) = *(unsigned __int8 *)(v312 + 6);
  LOWORD(v378) = *(unsigned __int8 *)(v312 + 23);
  STACK[0x69E0] = (unint64_t)v334;
  LOWORD(v388) = v334[61];
  v392 = v381 - ((2 * (int)v381) & 0x1EALL) + 0x3EE66AAE55CC0CF5;
  v393 = (v390 ^ 0x857EA5EE719D56D6) & (v392 ^ 0xC1199551AA33F30ALL) ^ v392 & 0x2000422814080029;
  v394 = (v393 & 0xB608D04CA118AF30 ^ 0xB608500CA1188F30)
       + (v393 ^ 0x804100003008)
       - ((v393 ^ 0x804100003008) & 0xB608D04CA118AF30);
  v395 = ((unint64_t)(v351 - ((2 * (_DWORD)v351) & 0x68) + 6302786) << 40) - 0xE0000000000;
  v396 = ((v391 & 0x4084028A417A25A4 ^ 0x86A069E705607B3FLL ^ (v385 ^ 0x5D817D6406049A5ALL) & (v391 ^ 0x9841CAD854C6AC1ELL))
        - 1) ^ 0x71561609422CC4C0;
  v397 = ((v313[59] - ((2 * v313[59]) & 0x1D2)) << 24) + 0x14203C10E9000000;
  v398 = v135[70];
  v399 = (unint64_t)(v373 ^ 0x72u ^ (((32 * v373) ^ 0x20)
                                                                            - ((2 * ((32 * v373) ^ 0x20)) & 0x40)
                                                                            + 43)) << 32;
  v400 = (unint64_t)(v384 + (~(2 * (_DWORD)v384) | 0xBD) + 162) << 56;
  v401 = v397 & 0x102000F46B000000 ^ 0x358E9E495BA7442BLL ^ (v394 & 0x4080461C9A93BCBBLL ^ 0x1B3B00E8E380B43CLL ^ ((((v135[75] - ((2 * v135[75]) & 0xBCLL)) << 16) - 0x49C9A17B09A20000) ^ 0x949E76793324344) & (v394 ^ 0xF6B8E15CA93A8710)) & (v397 ^ 0xEBDFC3EF16FFFFFFLL);
  LODWORD(v397) = v334[62];
  v402 = v401 & ~v399 ^ (v399 & 0xAD00000000 | 0x78149C0059244001);
  LODWORD(v374) = *(unsigned __int8 *)(v312 + 9);
  v403 = v395 & 0xF70000000000;
  v404 = (0xA90554789C302DE1 - (v402 | 0xA90554789C302DE1) + (v402 | 0x56FAAB8763CFD21ELL)) ^ 0xAF0416D59C2131C7 | (((2 * (((v395 | 0xFFFFF7FFFFFFFFFFLL) - 0x23A075209F600C17) ^ 0xD94F8ACB685B67F8)) | 0x734A6E940A18B17CLL) - (((v395 | 0xFFFFF7FFFFFFFFFFLL) - 0x23A075209F600C17) ^ 0xD94F8ACB685B67F8) + 0x465AC8B5FAF3A742) ^ 0xBCB53F5E0DC8CCAELL;
  v405 = STACK[0x6A90] + 2;
  STACK[0x69F0] = v405;
  LODWORD(v395) = *(unsigned __int8 *)(v405 + ~(_BYTE)v301);
  v406 = (((v389 & 0xFFFFFFFDFFFFLL | v396)
         - ((2 * (v389 & 0xFFFFFFFDFFFFLL | v396)) & 0x73086961FC7DD866)
         + 0x798434B0FE3EEC33) ^ 0x3C57CBCE5CEEA6D1) & (v400 ^ 0x5EFFFFFFFFFFFFFFLL) ^ v400 & 0xBA00000000000000;
  LOWORD(v346) = (((_WORD)v388 - ((2 * (_WORD)v388) & 0x56)) << 8) + 11008;
  LODWORD(v401) = v371 - ((2 * v371) & 0xA8);
  LODWORD(v388) = (((2 * ((8 * (v395 >> 2)) ^ 0xFFFFFFD8)) | 0x7C)
                 - ((8 * (v395 >> 2)) ^ 0xFFFFFFD8)
                 + 66) ^ 0x2F;
  LODWORD(v394) = ((2 * v388) & 0x48) - v388;
  LODWORD(v400) = v374 - ((2 * v374) & 0x17A);
  LOWORD(v371) = (v346 ^ 0x7593) & ((v378 - ((2 * v378) & 0xA4) - 26030) ^ 0x65A1) ^ (v378 - ((2 * v378) & 0xA4) - 26030) & 0x16C;
  v407 = v403 | ((unint64_t)(v397 - ((2 * (_DWORD)v397) & 0x42) + 223) << 56);
  LODWORD(v382) = STACK[0x6AA0];
  LODWORD(v346) = (v382 ^ 0x4951ED48) & (2 * (v382 & 0x8D59F18D)) ^ v382 & 0x8D59F18D;
  LODWORD(v374) = ((2 * (v382 ^ 0x4143EF48)) ^ 0x98343D8A) & (v382 ^ 0x4143EF48) ^ (2 * (v382 ^ 0x4143EF48)) & 0xCC1A1EC4;
  LODWORD(v378) = v374 ^ 0x440A0245;
  LODWORD(v374) = (v374 ^ 0x8000C01) & (4 * v346) ^ v346;
  LODWORD(v346) = ((4 * v378) ^ 0x30687B14) & v378 ^ (4 * v378) & 0xCC1A1EC4;
  LODWORD(v374) = (v346 ^ 0x81A01) & (16 * v374) ^ v374;
  LODWORD(v346) = ((16 * (v346 ^ 0xCC1204C1)) ^ 0xC1A1EC50) & (v346 ^ 0xCC1204C1) ^ (16 * (v346 ^ 0xCC1204C1)) & 0xCC1A1EC0;
  LODWORD(v374) = v374 ^ 0xCC1A1EC5 ^ (v346 ^ 0xC0000C85) & ((_DWORD)v374 << 8);
  v408 = *(unsigned __int8 *)(v312 + 89);
  LOBYTE(v397) = (v368 + 19) ^ 0x48;
  v409 = v375 - 1;
  v410 = (-105 * v397);
  LODWORD(v397) = ((_DWORD)v401 << 16) - 11272192;
  v411 = ((v398 - ((2 * (int)v398) & 0x13CLL)) << 24) + 0x273977469E000000;
  v412 = v376 ^ (((v380 | (v410 << 40)) - 0x2E000000000000) ^ (((unint64_t)(v408 - ((2 * v408) & 0xE8u) + 154) << 56)
                                                               - 0x2600000000000000) | LODWORD(STACK[0x6AA0]) ^ (2 * (((_DWORD)v374 << 16) & 0x4C1A0000 ^ v374 ^ (((_DWORD)v374 << 16) ^ 0x1EC50000) & (((v346 ^ 0xC1A1285) << 8) & 0x4C1A0000 ^ 0x44000000 ^ (((v346 ^ 0xC1A1285) << 8) ^ 0x1A1E0000) & (v346 ^ 0xC1A1285)))));
  v413 = v406 ^ v412;
  HIDWORD(v414) = v395 + 4;
  LODWORD(v414) = (((_DWORD)v395 + (((_DWORD)v394 + 91) ^ 0xED)) << 24) - 50331648;
  v415 = (v371 & 0x5181 ^ 0x194441FAE013904ALL)
       - ((2 * (v371 & 0x5181 ^ 0x194441FAE013904ALL)) & 0x2288825080032004)
       + 0x1177E72C53899012;
  v416 = v379;
  v417 = ((v397 & 0x450000) - ((2 * (int)v397) & 0x820000) - 0x659382A2C31451F5) ^ 0xBEAC79D93E2FCB48;
  v418 = (((2 * (v397 & 0xBA0000 ^ 0xB20000)) | 0x99EB6CAC2B37D554)
        - (v397 & 0xBA0000 ^ 0xB20000)
        + 0x330A49A9EA641556) ^ 0xCCE5B3741CBBABE2;
  v419 = ((unint64_t)(v379[47] - ((2 * v379[47]) & 0x178u) + 3019254) << 40) - 0x3A0000000000;
  v420 = ((((2 * (v371 & 0xAE7E ^ 0x2C34)) & 0x15064) - (v371 & 0xAE7E ^ 0x2C34) + 1513037) & 0x1FFFFE ^ 0xBAD62281D67A0E48) & ((((2 * v418) | 0x86BABE84CA9D4E3ALL) - v418 - 0x435D5F42654EA71DLL) ^ 0xF8B3A4CFB33319AALL) ^ (((2 * v418) | 0x86BABE84CA9D4E3ALL) - v418 - 0x435D5F42654EA71DLL) & 0x4529DD7E2992C59DLL;
  v421 = v404 ^ (v407 - 0x3E00000000000000) ^ ((unint64_t)(v414 >> 27) << 48);
  v422 = v413 ^ 0x3117A016522F79FBLL;
  v423 = ((v420 & 0xFB9B3E7FE87555C7 ^ 0xBB9A3A31C8751547) + (v420 & 0x464C180178AAA38 ^ 0x20800001000019) - 1) ^ 0x4065C0D03798EB28 | (v417 - ((2 * v417) & 0x8000808029E0086) + 0x1D23665D094F90C7) & 0x303B02981B5DA158 ^ 0xFFE7FFFFEFEFFFA6 ^ (v415 ^ 0xC7F75BB157380E7FLL) & ((v417 - ((2 * v417) & 0x8000808029E0086) + 0x1D23665D094F90C7) ^ 0xD62C9D26F7300A3BLL);
  v424 = (v423 & 0x475580DFA09B382FLL | (v411 ^ 0x9F930866C164C7D0) & ~v423) ^ 0x4301009AA0912822;
  v425 = (v413 ^ 0x3117A016522F79FBLL) & (v412 ^ 0x9A3BF678B2851A24);
  v426 = v419 & 0x922430000000000 ^ 0x800000541322100 ^ ((((2 * v424) & 0x8AD48E22E5D08182)
                                                            - v424
                                                            + 0x3A95B8EE8D17BF3ELL) & 0x71CA2D37F914CB93 ^ 0x79E26B14C8AE3EDFLL ^ ((((2 * v424) & 0x8AD48E22E5D08182) - v424 + 0x3A95B8EE8D17BF3ELL) ^ 0x3EC138AB04092420) & ((((unint64_t)(v400 - 1196932621) << 32) - 0x3600000000) ^ 0x369D937506EB346CLL)) & (v419 ^ 0xD1EE43FFFFFFFFFFLL);
  v427 = (v426 - ((2 * v426) & 0x7A9C5CF7B436ECAALL) + 0x3D4E2E7BDA1B7655) ^ 0x8B9392B6256C1D66;
  v428 = (((unint64_t)(v379[62] - ((2 * v379[62]) & 0x54u) + 13400) << 48) - 0x2E000000000000) ^ 0xC2E0F262F517FF3ELL ^ (v427 - ((2 * v427) & 0x6D95E4C5EA2FFE7CLL) - 0x9350D9D0AE800C2);
  v429 = (((unint64_t)(*(v379 - 3) - ((2 * *(v379 - 3)) & 0xC0u) + 133) << 56) - 0x2500000000000000) ^ 0xBF63BB5447E1C5F2 ^ (v428 - ((2 * v428) & 0x3EC776A88FC38BE4) - 0x209C44ABB81E3A0ELL);
  v430 = v421 ^ 0xEE7D377FD4F9C301;
  LODWORD(v420) = ~(v421 ^ 0xD4F9C301);
  v431 = (v413 ^ 0xCEE85FE9ADD08604) & (v421 ^ 0xEE7D377FD4F9C301);
  v432 = (v429 - ((2 * v429) & 0x8C53217DF54426A4) - 0x39D66F41055DECAELL) ^ v421;
  v433 = v429 ^ v409;
  v434 = v433 ^ 0x9C4080C2B1F4021;
  v412 ^= 0x65C409874D7AE5DBuLL;
  v435 = v412 >> 1;
  v436 = v432 ^ (v433 ^ 0xF63BF7F3D4E0BFDELL) & v412;
  v437 = (v412 >> 5) & 0x49343FD115B6647 ^ __ROR8__(v431 & 0x92687FA22B6CC8E6, 5);
  v438 = (v431 ^ v412) & 0x6D97805DD4933719;
  v439 = (v432 ^ 0x2F0110DB2087E8DBLL) & v434;
  v440 = __ROR8__(v425, 47) ^ __ROR8__(v434, 47) ^ 0x2680D9F368646E54;
  v441 = __ROR8__(v437 & 0x348303FD01080207 ^ (((v435 & 3) << 60) | 0xA0B815F04008018), 59) | (32
                                                                                                 * (v437 & 0x10400010536440));
  v442 = __ROR8__(v440, 17);
  v443 = (v432 ^ 0xD0FEEF24DF781724) & (__ROR8__((((unint64_t)(v420 | 0x3FE) << 54) | 0x3FFFFFFFFFFFFFLL) ^ __ROR8__(v430, 10) & 0xFFBFFFFFFFFFFFFFLL ^ 0x4DC4CD5B59737D3FLL, 54) ^ 0x13356D65CDF4FD37) ^ v422;
  v444 = v439 + v430 - 2 * (v439 & v430);
  v445 = v436 ^ 0x84FE2A0C539264C6 ^ v442;
  if (v443 >= 0xBC1CB28E0598DDBBLL)
    v446 = 0xBC1CB28E0598DDBBLL;
  else
    v446 = 0;
  v447 = v438 ^ v442 ^ 0x6E73E3747DA01B5ELL ^ v441;
  v448 = v443 + 0x43E34D71FA672245;
  if (v443 < 0xBC1CB28E0598DDBBLL)
    v448 = v443;
  if (v448)
    v449 = v443;
  else
    v449 = v446;
  v450 = (v449 ^ 0x6E807D10291F7139) >> 1;
  v451 = v450 & 0x80000;
  v452 = ((v445 >> 19) ^ -(uint64_t)(v445 >> 19) ^ (v445 - ((v445 >> 19) ^ v445))) + v445;
  v453 = v443 ^ v444 ^ 0x468584D5EEC58272;
  v454 = v436 ^ 0x57E930C67CC9F4D6;
  if ((v450 & 0x80000 & (v449 ^ 0x6E807D10291F7139)) != 0)
    v451 = -v451;
  v455 = ((v451 + (v449 ^ 0x6E807D10291F7139)) ^ ((v450 ^ 0x80000) + (v450 | 0xFFFFFFFFFFF7FFFFLL) + 1))
       + ((v449 ^ 0x6E807D10291F7139) << 63);
  v456 = v447 ^ __ROR8__(v447, 61) ^ (v447 >> 39) ^ (v447 << 25);
  v457 = v454 ^ __ROR8__(v454, 7);
  v458 = v457 ^ __ROR8__(v454, 41);
  v459 = v453 ^ __ROR8__(v453, 10) ^ (v453 >> 17) ^ (v453 << 47);
  v460 = v459 ^ v458;
  *((_QWORD *)&v461 + 1) = v449;
  *(_QWORD *)&v461 = v449 ^ 0x6E807D10291F7139;
  v462 = (v461 >> 6) ^ v455 ^ v456;
  v463 = v462 ^ 0xE400000000000000;
  v464 = ((v445 >> 28) | (v445 << 45)) ^ (v445 << 36) ^ v458 ^ v452;
  v465 = v462 ^ 0xE400000000000000 ^ v458 & ~v459;
  v466 = (v462 ^ 0x1BFFFFFFFFFFFFFFLL) & v459;
  v467 = (v463 & ~v456) + v464 + 2 * (v463 & ~v456 & v464) - 4 * (v463 & ~v456 & v464);
  v468 = v456 & ~v464 ^ v460;
  v469 = v467 ^ v468;
  v470 = v467 ^ v468 ^ 0x56AAE6BF024184FFLL;
  v471 = v456 ^ 0xE6CB410EAF9D375FLL ^ v466 ^ v467;
  v472 = v464 & ~v460;
  LOBYTE(v467) = ((v408 & 0xA) + ((v408 ^ 0x60) & 0x2A ^ 0x3B) - (((v408 ^ 0x60) & 0x2A ^ 0x3B) & 0x1F) + 64) ^ (v408 ^ 0x60) & 0x2B;
  LOBYTE(v467) = (v467 & 0xC1 ^ 0x7E) - (v467 | 0xC1) - 63;
  v473 = (((2 * (v465 & 0xFFFFFFFFFFFFFFFELL ^ 0x5F81B7F2A1649C3CLL)) | 0x3D2828D94146A08ALL)
        - (v465 & 0xFFFFFFFFFFFFFFFELL ^ 0x5F81B7F2A1649C3CLL)
        + 0x616BEB935F5CAFBBLL) ^ 0x96962668F0A3E065;
  v474 = (v465 ^ 0x15C7857573502C40) << ((v467 ^ 0xE0) & 0xC7 ^ 0xC6) << (~(v467 ^ 0xE0) & 0x38) << ((v467 ^ 0xE9) & 0x15 ^ 0x14) << ((v467 ^ 0xE9) & 0x2A ^ 0x22);
  v475 = v470 ^ (v470 >> 19);
  *(_QWORD *)&v461 = __ROR8__(((v470 << 45) - (v475 ^ (v470 << 45))) ^ 0x3AB35329683B1832, 50);
  v476 = (((2 * v473) | 0xCE61BFBC6B09EA92) - v473 - 0x6730DFDE3584F549) ^ ((v474 ^ (v465 >> 63))
                                                                              + 2 * (v474 & (v465 >> 63)));
  v477 = v459 ^ 0x3378C4AC0693E070 ^ v472;
  v478 = v476 ^ 0x2574DF5DB7B0F515;
  v479 = (v476 ^ 0xD47F4EEED566C15ALL) + 0xEF46E4C9D29CBB1;
  v480 = v479 | v478;
  v481 = v475 ^ -(uint64_t)v475 ^ __ROR8__(((v461 & 0x93505E001424010 | 0xD4C05006060C808CLL) ^ v461 & 0xD4C05006060C808CLL | v461 & 0x220AAA19F8B13F63) ^ 0xA0A08C0000E20, 14);
  v482 = v479 & v478;
  v483 = v478 ^ -v478 ^ (v482 - (v482 ^ -v478));
  *(_QWORD *)&v461 = __ROR8__(v471, 61);
  v484 = v477 ^ v465;
  v485 = v481 + (v470 << 45);
  v468 ^= 0x62C1F2A9E89E4C79uLL;
  v486 = ((v471 ^ v461) & 0x10000000 | (v471 >> 39)) ^ (v471 ^ v461) & 0xFFFFFFFFEFFFFFFFLL;
  *((_QWORD *)&v461 + 1) = (v483 + v482) ^ v480;
  *(_QWORD *)&v461 = *((_QWORD *)&v461 + 1) + 0xEF46E4C9D29CBB0;
  v487 = v461 >> 1;
  *(_QWORD *)&v461 = __ROR8__(__ROR8__(v468, 58) ^ (v468 >> 7 << 6) ^ 0xF07EAD7EEBBF1BAFLL, 6);
  v488 = ((v468 << 57) ^ (0xFE00000000000000 * v468) ^ (((v468 << 57) ^ 0x403E054A04510391 ^ v461)
                                                        + (v461 ^ 0xBFC1FAB5FBAEFC6ELL)
                                                        + 1))
       + (v461 ^ 0xBFC1FAB5FBAEFC6ELL);
  v489 = ((v465 << 63) | 0x571E15D5CD40B1) ^ (v465 >> 6) ^ v487;
  v490 = (v468 << 23) & 0xFFFF7FFFFFFFFFFFLL;
  v491 = v452 & 0x2F;
  v492 = (v468 << 23) & 0x800000000000;
  v493 = v488 ^ (v468 >> 41);
  if ((v488 & v492) != 0)
    v492 = -v492;
  v494 = (v492 + v493) ^ v490;
  v495 = v484 << v491 << (v491 ^ 0x2Fu);
  v496 = v489 & 0x10000;
  v497 = v486 ^ (v471 << 25);
  v498 = v484 ^ __ROR8__(v484, 10) ^ (v484 >> 17) ^ v495;
  v499 = v489 & 0xFFFFFFFFFFFEFFFFLL ^ (v465 << 58);
  *((_QWORD *)&v500 + 1) = v469;
  *(_QWORD *)&v500 = v470;
  v501 = v494 ^ (v500 >> 28) ^ v485;
  v502 = v501 ^ 0x24184FF000000000;
  v503 = v494 ^ v498;
  if ((v496 & v486) != 0)
    v496 = -v496;
  v504 = v499 ^ (v496 + v497);
  v505 = v504 ^ 0x77A37264E94E5D8 ^ v494 & ~v498;
  v506 = v498 ^ 0xD8700A4CB46F51B0 ^ v502 & ~v503 ^ v505;
  v507 = v506 << 47;
  v198 = v389 == 0;
  v508 = 0x47E000000000000;
  if (!v198)
    v508 = (v506 << 47) ^ 0xFB81800000000000;
  v198 = (v463 & ~v456) == 0;
  v509 = (v504 ^ 0xF885C8D9B16B1A27) & v498;
  v510 = (v504 ^ 0x77A37264E94E5D8) & ~v497 ^ v502;
  v511 = (v501 ^ 0xDBE7B00FFFFFFFFFLL) & v497 ^ v503;
  v512 = (v510 ^ v511) + 0x7D752DD7DCC251B6;
  v513 = (2 * (v510 ^ v511)) & 0xFAEA5BAFB984A36CLL;
  v514 = v505 ^ 0xE7E200F443AAFCDFLL;
  v515 = v505 ^ 0xE7E200F443AAFCDFLL ^ __ROR8__(v505 ^ 0xE7E200F443AAFCDFLL, 1) ^ ((v505 ^ 0xE7E200F443AAFCDFLL) << 58) ^ ((v505 ^ 0xE7E200F443AAFCDFLL) >> 6);
  v516 = v506 ^ __ROR8__(v506, 10) ^ (v506 >> 17);
  v517 = __ROR8__(__ROR8__(v497 ^ 0xEEAFC2D3EC65C482 ^ v509 ^ v510, 38) & 0xFFFFFFFFFC000001 ^ __ROR8__(v497 ^ 0xEEAFC2D3EC65C482 ^ v509 ^ v510 ^ __ROR8__(v497 ^ 0xEEAFC2D3EC65C482 ^ v509 ^ v510, 61) ^ ((v497 ^ 0xEEAFC2D3EC65C482 ^ v509 ^ v510) >> 39), 63), 1);
  v518 = v517 ^ v515;
  v519 = v516 & 0xFB819209DC40304FLL ^ v507 & 0xFB81800000000000 ^ v508 & v507 ^ ((~v516 & 0xD7E6DF727FFFFB4)
                                                                                  - 0xD7E6DF727FFFFB4
                                                                                  + ((2 * v516) & 0x1AFCDBEE4FFFFF68)) & 0xA47F7DF6E3BFCFF0;
  v520 = v511 ^ 0x66173F92B629299ALL ^ ((v511 ^ 0x66173F92B629299ALL) >> 7) ^ ((v511 ^ 0x66173F92B629299ALL) >> 41) ^ ((v511 ^ 0x66173F92B629299ALL) << 23) ^ ((v511 ^ 0x66173F92B629299ALL) << 57);
  v521 = v520 & ~v519 ^ v517 ^ v515;
  v522 = v521 ^ 0x32237A0B9C0468F5;
  v523 = v521 ^ 0x32237A0B9C0468F5 ^ ((v521 ^ 0x32237A0B9C0468F5) >> 1);
  v524 = (v523 + (v523 ^ 0x2AA8735F4E9BD88CLL) + 1) ^ 0x3FFFFFFFFFFFFFFELL;
  if (v198)
    v524 = 0;
  v525 = v512 - v513;
  v526 = __ROR8__(v525, 19);
  v527 = -(uint64_t)(v525 ^ v526) ^ __ROR8__(__ROR8__(v525 ^ v526, 31) ^ __ROR8__((v525 >> 28) - (v525 ^ v526 ^ (v525 >> 28)), 31) ^ 0x14F49E375042D47ELL, 33) ^ 0xA8216A3F0A7A4F1BLL;
  v528 = v519 ^ v520;
  v529 = v520 ^ (v525 << 36) ^ (v527 + (v525 >> 28));
  v530 = v529 ^ v515 & ~v517;
  v531 = v517 & ~v529 ^ v528;
  v532 = v529 & ~v528;
  v533 = v519 & ~v518 ^ v517 ^ v530;
  v534 = v530 ^ 0xC5AB08FD33C1B5A7 ^ v531;
  v535 = v534 << 36;
  v536 = (v533 ^ 0xCE733F7FD99BA7A2) + ((v533 ^ 0x318CC080266427A2) >> 15 << 16);
  v537 = v534 ^ __ROR8__(v534, 19) ^ (v534 >> 28);
  if ((v533 & 0x8000) == 0)
    v536 = (v533 ^ 0x318CC080266427A2) + 0x8000;
  v538 = v537 - (v537 ^ v535);
  v539 = v519 ^ 0xCC98C5A695FE0D08 ^ v521 ^ v532;
  v540 = (v538 & 0x4000000 | ((unint64_t)v534 << 36)) ^ v538 & 0xFFFFFFFFFBFFFFFELL;
  *((_QWORD *)&v541 + 1) = v536 ^ 0x8000;
  *(_QWORD *)&v541 = v533;
  v542 = v533 ^ 0x318CC080266427A2 ^ (v536 >> 39) ^ (v541 >> 61) ^ ((v536 ^ 0x8000) << 25);
  v543 = (v524 + v523) & 0x2AA8735F4E9BD88CLL ^ (v522 >> 6) & 0x2A8735F4E9BD88CLL | v523 & 0xD5578CA0B1642773 ^ (v522 >> 6) & 0x1578CA0B1642773;
  v544 = v531 ^ 0xA0B866C79876C7E4 ^ ((v531 ^ 0xA0B866C79876C7E4) << 23) ^ ((v531 ^ 0xA0B866C79876C7E4) >> 7) ^ (((v531 ^ 0xA0B866C79876C7E4) >> 41) | ((v531 ^ 0xA0B866C79876C7E4) << 57));
  v545 = (v522 << 63) ^ (v522 << 58) ^ v543 ^ v542 ^ 1;
  v546 = v539 ^ (v539 << 47) ^ (v539 << 54) ^ (((v539 >> 17) ^ (v539 >> 10))
                                             - 2 * ((v539 >> 10) & (v539 >> 17))
                                             + 2 * ((v539 >> 17) ^ (v539 >> 10) ^ ((v539 >> 10) | (v539 >> 17))));
  v547 = ((v540 ^ ((v538 & 1) - v535)) + v537) ^ v544;
  v548 = v546 ^ v544;
  v549 = v545 & (v542 ^ 0xFFFFFFFFFFFFFFFELL) ^ v547;
  v550 = (v542 ^ 1) & ~v547 ^ v548;
  v551 = v547 & (~(2 * v548) + v548);
  v552 = (~(2 * v546) + v546) & v548;
  v553 = v545 & v552;
  v554 = v542 ^ v546 & ~v545 ^ v549 ^ 0x68ABEAE5737B7692;
  v555 = v545 + v552;
  v556 = v555 - 2 * v553;
  v557 = (v556 ^ 0xA2A16E7D4060C2ACLL) >> (v457 & 1) >> !(v457 & 1);
  v558 = v546 ^ 0x1DE76D00F7B2971ELL ^ v551 ^ v556;
  v559 = __ROR8__((v554 >> 5) & 0x7FFFFFC00000000 ^ __ROR8__(v554 ^ __ROR8__(v554, 61), 30) ^ 0x4DA6A7FB415BCA19, 34) ^ (v554 << 25);
  v560 = v559 ^ 0xD056F2865369A9FELL;
  v561 = (v556 ^ 0xA2A16E7D4060C2ACLL) << 58;
  v562 = v557 ^ v556 ^ 0xA2A16E7D4060C2ACLL ^ (((v556 ^ 0xA2A16E7D4060C2ACLL) >> 6) | (v555 << 63));
  v563 = v558 << 47;
  v564 = v558 ^ __ROR8__(v558, 10) ^ (v558 >> 17);
  v565 = (v561 ^ -(uint64_t)v561 ^ (v562 - (v562 ^ v561))) + v562;
  v566 = v550 ^ 0xF14770720A54D309 ^ __ROR8__(v550 ^ 0xF14770720A54D309, 7) ^ __ROR8__(v550 ^ 0xF14770720A54D309, 41);
  v567 = (v563 ^ -(uint64_t)v563 ^ (v564 - (v564 ^ v563))) + v564;
  v568 = v565
       + (v559 ^ 0xD056F2865369A9FELL ^ -(uint64_t)(v559 ^ 0xD056F2865369A9FELL))
       + v565
       - (v565 ^ v559 ^ 0xD056F2865369A9FELL)
       - 2
       * ((v565 - (v565 ^ v559 ^ 0xD056F2865369A9FELL)) & (v559 ^ 0xD056F2865369A9FELL ^ -(uint64_t)(v559 ^ 0xD056F2865369A9FELL)));
  v569 = v568 ^ v566 & ~v567;
  *((_QWORD *)&v541 + 1) = ~(_DWORD)v569;
  *(_QWORD *)&v541 = v569 ^ 0x60319059DF71CA54;
  v570 = v569 ^ __ROR8__(v569, 6) ^ (v541 >> 1);
  v571 = (v549 ^ v550) - ((2 * (v549 ^ v550)) & 0xCF151F1E4DD21656) - 0x18757070D916F4D5;
  v572 = v559 & 0x20000000000000;
  v573 = ~(2 * (v559 ^ 0xD056F2865369A9FELL)) + (v559 ^ 0xD056F2865369A9FELL);
  v574 = v568 ^ ~v573;
  if (v514 < 0x40)
    v574 = v568;
  v575 = v566 ^ v571 ^ __ROR8__(v571, 19) ^ __ROR8__(v571, 28);
  v576 = v574 & v573;
  v577 = v567 & ~v568;
  v578 = v567 ^ v566;
  v579 = v560 & ~v575;
  if (v527)
    v568 = v576;
  v580 = v578 ^ v579;
  v581 = v568 & v573 ^ v575;
  v582 = v581 ^ v578 ^ v579;
  v583 = v582 ^ (v582 << 36) ^ (v582 >> 19) ^ ((v582 >> 28) | (v582 << 45));
  v584 = (_BYTE *)STACK[0x69D0];
  *(_BYTE *)(STACK[0x69D0] + 40) = v582 ^ (v582 >> 19) ^ (v582 >> 28) ^ 0xDA;
  if ((v577 & v572) != 0)
    v585 = -v572;
  else
    v585 = v572;
  v586 = (v585 + v577) ^ v560 & 0xFFDFFFFFFFFFFFFFLL ^ v581;
  v587 = (v586 ^ 0x9503C0FF64ECBF78) & 0xFFFFFFFFBFFFFFFFLL ^ (v586 >> 39) ^ (8 * (v586 ^ 0x9503C0FF64ECBF78));
  v588 = v587 ^ ((v586 ^ 0x9503C0FF64ECBF78) & 0x40000000 | ((v586 ^ 0x9503C0FF64ECBF78) >> 61));
  v589 = v588 ^ ((v586 ^ 0x9503C0FF64ECBF78) << 25);
  v379[69] = BYTE3(v583) ^ 0x1D;
  v584[8] = BYTE6(v583) ^ 0xC5;
  *(_BYTE *)(v312 + 3) = BYTE2(v587) ^ 0x2A;
  v590 = (_BYTE *)STACK[0x69E0];
  v590[63] = BYTE2(v583) ^ 0x41;
  v584[9] = BYTE1(v583) ^ 0x7D;
  v584[3] = HIBYTE(v583) ^ 0x6F;
  v591 = v584;
  *(_BYTE *)(v312 + 94) = BYTE5(v583) ^ 0x79;
  *(_BYTE *)(v312 + 2) = ((((v589 ^ 0x12A0781) >> (v560 & 0x20))
                         - 0x615E3E541F05F8ACLL
                         + (~(2 * ((v589 ^ 0x12A0781) >> (v560 & 0x20))) | 0xC2BC7CA83E0BF157)
                         + 1) ^ 0x9EA1C1ABE0FA0754) >> (v560 & 0x20 ^ 0x20);
  *(_BYTE *)STACK[0x6A20] = BYTE1(v570) ^ 0xD;
  v584[14] = BYTE4(v570) ^ 0x18;
  *(_BYTE *)STACK[0x6A40] = BYTE4(v583) ^ 0xA6;
  *(_BYTE *)(v312 + 55) = BYTE6(v589);
  *(_BYTE *)(v312 + 43) = BYTE3(v570) ^ 0xB8;
  *(_BYTE *)(v312 + 34) = v586 ^ 0x78 ^ (v586 >> 39) ^ (8 * (v586 ^ 0x78)) ^ ((v586 ^ 0x9503C0FF64ECBF78) >> 61) ^ 0x81;
  v416[14] = ((v588 ^ ((v586 ^ 0x64ECBF78) << 25)) >> 24) ^ 1;
  v590[12] = BYTE2(v570) ^ 0xC;
  *(_BYTE *)STACK[0x6A10] = BYTE5(v589);
  v592 = ((v570 >> 45) & 0xF8 ^ 0xAB7B0379C43D14C6)
       - ((2 * ((v570 >> 45) & 0xF8 ^ 0xAB7B0379C43D14C6)) & 0xA200520052219CLL)
       - 0x6F2EDB54DDD6CF31;
  *(_BYTE *)(v312 + 57) = ((unsigned __int16)(v586 ^ 0xBF78 ^ (v586 >> 39) ^ (8 * (v586 ^ 0xBF78))) >> 8) ^ 7;
  *(_BYTE *)(v312 + 91) = v570 ^ 0x7C;
  *(_BYTE *)(v312 + 89) = HIBYTE(v589);
  v590[2] = BYTE5(v570) ^ 0x56;
  v593 = STACK[0x6A90]
       + ((((v592 & 0x22A20410E0142180 ^ 0x80841418D01984)
          + (v592 ^ 0xF32E2B82E7272401)
          - ((v592 ^ 0xF32E2B82E7272401) & 0x42A60C1400712184)) ^ 0xAA228044F9C63904 | (((v570 >> 53) & 1)
                                                                                            + ((v570 >> 53) & 6 ^ 0x5AFE692607542CC5)
                                                                                            - 1) ^ 0x5AFE692607542CC1) ^ 0x31);
  v594 = __ROR8__(v575 & ~v578 ^ v567, 11);
  v595 = ((v580 | 0xA39DBBE78CD033FCLL) - (v580 & 0x4000000000)) ^ v580 & 0xA39DBBA78CD033FCLL;
  v596 = __ROR8__(v594 ^ __ROR8__(v569, 11) ^ 0xAAD0A96ADDC8BACDLL, 53);
  v597 = v596 ^ 0xD0787A270AB4160;
  v598 = v596 ^ __ROR8__(v596 ^ 0xD0787A270AB4160, 10) ^ 0x5AFC0824BB28331ALL;
  v599 = __ROR8__(v597, 17);
  v600 = v599 - ((2 * v599) & 0xAF97A1C8760F92A8) - 0x28342F1BC4F836ACLL;
  *((_QWORD *)&v601 + 1) = ((int)v599 - ((2 * (int)v599) & 0x760F92A8) + 990366036) ^ (v580 | 0x8CD033FC) ^ v580 & 0x8CD033FC ^ 0x107C954;
  *(_QWORD *)&v601 = v600 ^ v595 ^ 0xD7CBD0E43A000000;
  v602 = v600 ^ v598;
  *(_QWORD *)&v601 = __ROR8__(((v601 >> 25) - ((2 * (v601 >> 25)) & 0x7F9D16694A3B4C0ELL) + 0x3FCE8B34A51DA607) ^ __ROR8__(v598, 25) ^ 0xBA9EEF815746AF03, 39);
  v603 = v602 ^ 0x4724A90B35F47298 ^ (v601 - ((2 * v601) & 0xF6179FFA0FF2360ALL) - 0x4F43002F806E4FBLL);
  LOBYTE(v593) = *(_BYTE *)(v593 + 805) + 63;
  v604 = v593 & 0xDD ^ 0x13;
  v605 = ((v603 >> 41) | (v603 << 57)) ^ __ROR8__(__ROR8__(v603, 54) & 0xFFFFFFFFFFFE03FFLL ^ __ROR8__(v603, 47) ^ 0xB3FC90915D88B853, 17);
  *(v416 - 8) = v593 ^ (2
                      * ((v593 ^ 0x3E) & (2
                                        * ((v593 ^ 0x3E) & (2
                                                          * ((v593 ^ 0x3E) & (2
                                                                            * ((v593 ^ 0x3E) & (2
                                                                                              * ((v593 ^ 0x3E) & (2 * (((2 * v593) ^ 0x62) & (v593 ^ 0x3E) ^ v604)) ^ v604)) ^ v604)) ^ v604)) ^ v604)) ^ v604)) ^ 0x6B;
  v606 = *(_BYTE *)(STACK[0x69F0] + (HIBYTE(v570) ^ 0xCA));
  v416[75] = BYTE2(v602) ^ 0x84;
  v591[45] = BYTE4(v602) ^ 0x62;
  v591[59] = BYTE3(v602) ^ 0xF0;
  v416[16] = v602 ^ 0x2E;
  v591[55] = BYTE1(v602) ^ 0xBB;
  LOBYTE(v593) = (((HIBYTE(v602) & 0x44) + (HIBYTE(v602) & 0x5C ^ 0x67) + (HIBYTE(v602) & 0x44 | 0x99)) | 1) ^ 0x5F;
  *(_BYTE *)(v312 + 6) = (((v606 ^ 0x23) >> 3) | (32 * (v606 ^ 0x23))) ^ 0xFB;
  v416[41] = BYTE5(v602) ^ 0x5F;
  v590[61] = BYTE1(v605) ^ 0xAE;
  v590[62] = ((((2 * v593) | 0x98) - v593 + 52) ^ 0x31) & (HIBYTE(v602) & 0xA3 ^ 0x56) ^ (((2 * v593) | 0x98) - v593 + 52) & 0x8A;
  *(_BYTE *)(v312 + 23) = v605 ^ 0xC4;
  *(_BYTE *)(v312 + 29) = BYTE6(v602) ^ 0x30;
  v607 = v605 ^ (v595 << 23);
  v416[61] = BYTE2(v607) ^ 0x48;
  LOBYTE(v593) = *(_BYTE *)(STACK[0x6A00] + (((v607 >> 20) & 0xF0 | (v607 >> 28)) ^ 0x3ELL));
  v416[47] = BYTE5(v607) ^ 0xD9;
  *(_BYTE *)(v312 + 9) = BYTE4(v607) ^ 0xFE;
  v416[62] = BYTE6(v607) ^ 0x29;
  v416[70] = v593 ^ (32 * v593) ^ 0x79;
  *(v416 - 3) = HIBYTE(v607) ^ 0x5C;
  LODWORD(v593) = STACK[0x6AA0];
  LODWORD(STACK[0xC89C]) = STACK[0x6AA0];
  *(_DWORD *)(*(_QWORD *)STACK[0x6AB0] + 24) = v593 + LODWORD(STACK[0x6A30]);
  STACK[0xC4E8] = v583 ^ 0x17B64CC4C3C1778BLL;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 2563)) - 8))();
}

uint64_t sub_1007393FC()
{
  return ((uint64_t (*)(void))STACK[0x8CA0])();
}

uint64_t sub_10073947C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = STACK[0x6508] + 13532;
  v4 = STACK[0x8E38];
  v5 = 1772489163 * ((1772489163 * (_DWORD)v4) ^ ((1772489163 * v4) >> 16));
  *(_BYTE *)v4 = *(_BYTE *)(v1 + (v5 >> 24)) ^ *(_BYTE *)((v5 >> 24) + v2 + 6) ^ *(_BYTE *)(a1 + (v5 >> 24)) ^ (-45 * (STACK[0x6508] ^ 0x50) - 84) & 0x95 ^ (-53 * ((-53 * v4) ^ ((1772489163 * v4) >> 16))) ^ (125 * ((1772489163 * ((1772489163 * (_DWORD)v4) ^ ((1772489163 * v4) >> 16))) >> 24)) ^ 0x91;
  v6 = 1772489163 * ((1772489163 * ((_DWORD)v4 + 1)) ^ ((1772489163 * (v4 + 1)) >> 16));
  *(_BYTE *)(v4 + 1) = *(_BYTE *)((v6 >> 24) + v2 + 6) ^ *(_BYTE *)(v1 + (v6 >> 24)) ^ *(_BYTE *)(a1 + (v6 >> 24)) ^ v6 ^ (125 * ((1772489163 * ((1772489163 * ((_DWORD)v4 + 1)) ^ ((1772489163 * (v4 + 1)) >> 16))) >> 24));
  v7 = 1772489163 * ((1772489163 * ((_DWORD)v4 + 2)) ^ ((1772489163 * (v4 + 2)) >> 16));
  *(_BYTE *)(v4 + 2) = v7 ^ *(_BYTE *)(v1 + (v7 >> 24)) ^ *(_BYTE *)((v7 >> 24) + v2 + 6) ^ (125 * BYTE3(v7)) ^ *(_BYTE *)(a1 + (v7 >> 24)) ^ 0x10;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((198 * (STACK[0x8460] > v4 + 3)) ^ v3))
                                          - 12))(16);
}

uint64_t sub_1007395EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;

  v16 = (((v6 + 796174311) & 0xD08B3BFE ^ 0xDD7DDA16) & (2 * v5)) + (v5 ^ 0xFFBFFFFEEEBEF9B6) + v11;
  v17 = v7 + v16;
  v18 = *(_BYTE *)(v7 + v16);
  v19 = v16 + v1;
  v20 = ((v17 ^ *(_DWORD *)(*v12 + (*v13 & v10))) & 0x7FFFFFFF) * v9;
  v21 = (v20 ^ HIWORD(v20)) * v9;
  v22 = ((((_DWORD)v19 + 3) * v9) ^ (((v19 + 3) * v9) >> 16)) * v9;
  *(_BYTE *)(v19 + 3) = *(_BYTE *)(v14 + (v21 >> 24)) ^ v18 ^ *(_BYTE *)((v21 >> 24) + v15 + 1) ^ *(_BYTE *)((v21 >> 24) + v8 + 2) ^ *(_BYTE *)(v3 + (v22 >> 24)) ^ *(_BYTE *)((v22 >> 24) + v4 + 6) ^ *(_BYTE *)(a1 + (v22 >> 24)) ^ v22 ^ (((((((_DWORD)v19 + 3) * v9) ^ (((v19 + 3) * v9) >> 16)) * v9) >> 24) * v2) ^ v21 ^ (-63 * BYTE3(v21));
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((2312 * (v5 == 15)) ^ v6)) - 12))();
}

uint64_t sub_1007396F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;

  v15 = a1 + v2;
  v16 = a1 - 10619 + (v7 ^ 0x6C28u);
  v17 = (((v6 + v16) ^ *(_DWORD *)(*v11 + (*v12 & v10))) & 0x7FFFFFFF) * v9;
  v18 = (v17 ^ HIWORD(v17)) * v9;
  v19 = ((((_DWORD)v15 + 2) * v9) ^ (((v15 + 2) * v9) >> 16)) * v9;
  *(_BYTE *)(v15 + 2) = *(_BYTE *)(v13 + (v18 >> 24)) ^ *(_BYTE *)(v6 + v16) ^ *(_BYTE *)((v18 >> 24) + v14 + 1) ^ *(_BYTE *)((v18 >> 24) + v8 + 2) ^ *(_BYTE *)(v4 + (v19 >> 24)) ^ *(_BYTE *)((v19 >> 24) + v5 + 6) ^ v19 ^ *(_BYTE *)(a2 + (v19 >> 24)) ^ (((((((_DWORD)v15 + 2) * v9) ^ (((v15 + 2) * v9) >> 16)) * v9) >> 24) * v3) ^ v18 ^ (-63 * BYTE3(v18));
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((2510 * (v16 == 0)) ^ v7)) - 12))();
}

uint64_t sub_1007397CC@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v6 = (((((_DWORD)v1 + 19) * v5) >> ((5 * (v4 ^ 0x31)) ^ 0x67)) ^ (((_DWORD)v1 + 19) * v5)) * v5;
  v1[19] = *(_BYTE *)(v2 + (v6 >> (v4 ^ 0x62u))) ^ *(_BYTE *)((v6 >> (v4 ^ 0x62u)) + v3 + 6) ^ *(_BYTE *)(a1 + (v6 >> (v4 ^ 0x62u))) ^ ((((((_DWORD)v1 + 19) * v5) >> ((5 * (v4 ^ 0x31)) ^ 0x67)) ^ (((_BYTE)v1 + 19) * v5)) * v5) ^ (125 * (v6 >> (v4 ^ 0x62u))) ^ 6;
  v7 = ((((_DWORD)v1 + 20) * v5) ^ ((((_DWORD)v1 + 20) * v5) >> 16)) * v5;
  v1[20] = (125 * ((((((_DWORD)v1 + 20) * v5) ^ ((((_DWORD)v1 + 20) * v5) >> 16)) * v5) >> 24)) ^ (((((_BYTE)v1 + 20) * v5) ^ ((((_DWORD)v1 + 20) * v5) >> 16)) * v5) ^ *(_BYTE *)(v2 + (v7 >> 24)) ^ *(_BYTE *)((v7 >> 24) + v3 + 6) ^ *(_BYTE *)(a1 + (v7 >> 24));
  v8 = (unint64_t)(((((_DWORD)v1 + 21) * v5) ^ ((((_DWORD)v1 + 21) * v5) >> 16)) * v5) >> 24;
  v1[21] = (((((_BYTE)v1 + 21) * v5) ^ ((((_DWORD)v1 + 21) * v5) >> 16)) * v5) ^ (125
                                                                                              * ((((((_DWORD)v1 + 21)
                                                                                                  * v5) ^ ((((_DWORD)v1 + 21) * v5) >> 16))
                                                                                                * v5) >> 24)) ^ *(_BYTE *)(v2 + v8) ^ *(_BYTE *)(v8 + v3 + 6) ^ *(_BYTE *)(a1 + v8) ^ 0x10;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8]
                                        + 8
                                        * ((4920 * (STACK[0xBCC8] - 0x28623712C9340D0ALL > (unint64_t)(v1 + 22))) ^ v4))
                            - 8))();
}

uint64_t sub_100739924@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;

  v8 = ((((_DWORD)v4 + (_DWORD)v3 + 22) * v7) ^ (((v4 + v3 + 22) * v7) >> 16)) * v7;
  *(_BYTE *)(v4 + v3 + 22) = *(_BYTE *)(v5 + (v8 >> 24)) ^ *(_BYTE *)(a1 + v4) ^ *(_BYTE *)((v8 >> 24) + v6 + 6) ^ *(_BYTE *)(a3 + (v8 >> 24)) ^ v8 ^ (((((((_DWORD)v4 + (_DWORD)v3 + 22) * v7) ^ (((v4 + v3 + 22) * v7) >> 16)) * v7) >> 24) * ((a2 + 75) ^ 0xBF));
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((4917 * (v4 != 15)) ^ a2)) - 8))();
}

uint64_t sub_1007399A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v10 = v6 + v2;
  v11 = ((v7 - 1335192449) & 0x4F954BCB ^ 0xFFFFFFFFFFFFF63DLL) + v6;
  v12 = ((((_DWORD)v10 + 21) * v9) ^ (((v10 + 21) * v9) >> 16)) * v9;
  *(_BYTE *)(v10 + 21) = *(_BYTE *)(v3 + (v12 >> 24)) ^ *(_BYTE *)(a1 + v11) ^ *(_BYTE *)((v12 >> 24) + v4 + 6) ^ *(_BYTE *)(a2 + (v12 >> 24)) ^ v12 ^ (((((((_DWORD)v10 + 21) * v9) ^ (((v10 + 21) * v9) >> 16)) * v9) >> 24) * v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (((v11 != 0) * v5) ^ v7)) - 8))();
}

uint64_t sub_100739A28()
{
  int v0;

  *(_DWORD *)STACK[0xAF40] = 637598060;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((v0 + 12782) ^ v0)))();
}

uint64_t sub_100739A78()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = STACK[0x6508];
  v1 = STACK[0x9930];
  *(_DWORD *)v1 = -1926392729;
  *(_DWORD *)(v1 + 52) = -1926392729;
  *(_DWORD *)(v1 + 112) = 1784467771;
  *(_QWORD *)(v1 + 104) = 0x214487444AB0E08;
  v2 = STACK[0x6AD8];
  STACK[0x8CA0] = *(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v0 - 3339));
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((int)v0 + 2077)) - 12))();
}

uint64_t sub_100739AF4()
{
  unint64_t v0;
  unint64_t v1;

  v0 = STACK[0x6508];
  v1 = STACK[0x6AD8];
  STACK[0x8CA0] = *(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] - 3433));
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (int)((v0 - 3433) ^ 0x1B9E)) - 12))();
}

uint64_t sub_100739B38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v3 = STACK[0x6508];
  v4 = 0xA238A92A4FA9CEC7
     * (STACK[0xB508]
      + 0x72BFC922D295BFE3
      + (*(_QWORD *)(*(_QWORD *)STACK[0x60C0] + (int)(*(_DWORD *)STACK[0x60B8] & 0xF64EB798)) & 0x7FFFFFFFFFFFFFFFLL ^ (((STACK[0x6508] - 3924) | 0x2490) - 0x4012572C7FE46B83)));
  v5 = (v4 ^ 0x4A693A0B68FDF243) & (2 * (v4 & 0x8C69B85362FDFB52)) ^ v4 & 0x8C69B85362FDFB52;
  v6 = ((2 * (v4 ^ 0x4A292A0F684794E3)) ^ 0x8C8124B81574DF62) & (v4 ^ 0x4A292A0F684794E3) ^ (2
                                                                                                 * (v4 ^ 0x4A292A0F684794E3)) & 0xC640925C0ABA6FB0;
  v7 = v6 ^ 0x424092440A8A2091;
  v8 = (v6 ^ 0x1800304F00) & (4 * v5) ^ v5;
  v9 = ((4 * v7) ^ 0x190249702AE9BEC4) & v7 ^ (4 * v7) & 0xC640925C0ABA6FB0;
  v10 = (v9 ^ 0x500AA82E80) & (16 * v8) ^ v8;
  v11 = ((16 * (v9 ^ 0xC640920C00124131)) ^ 0x640925C0ABA6FB10) & (v9 ^ 0xC640920C00124131) ^ (16 * (v9 ^ 0xC640920C00124131)) & 0xC640925C0ABA6FB0;
  v12 = (v11 ^ 0x440000400AA26B00) & (v10 << 8) ^ v10;
  v13 = (((v11 ^ 0x8240921C001804A1) << 8) ^ 0x40925C0ABA6FB100) & (v11 ^ 0x8240921C001804A1) ^ ((v11 ^ 0x8240921C001804A1) << 8) & 0xC640925C0ABA6F00;
  v14 = v12 ^ 0xC640925C0ABA6FB1 ^ (v13 ^ 0x400010080A2A0000) & (v12 << 16);
  v15 = v4 ^ (2
            * ((v14 << 32) & 0x4640925C00000000 ^ v14 ^ ((v14 << 32) ^ 0xABA6FB100000000) & (((v13 ^ 0x8640825400904EB1) << 16) & 0x4640925C00000000 ^ 0x4400904400000000 ^ (((v13 ^ 0x8640825400904EB1) << 16) ^ 0x125C0ABA00000000) & (v13 ^ 0x8640825400904EB1))));
  v16 = STACK[0xAF28];
  v17 = 1772489163 * ((1772489163 * (_DWORD)v16) ^ ((1772489163 * v16) >> 16));
  *(_BYTE *)v16 = *(_BYTE *)(v1 + (v17 >> 24)) ^ *(_BYTE *)((v17 >> 24) + v2 + 6) ^ *(_BYTE *)(a1 + (v17 >> 24)) ^ v17 ^ (125 * ((1772489163 * ((1772489163 * (_DWORD)v16) ^ ((1772489163 * v16) >> 16))) >> 24)) ^ HIBYTE(v15) ^ 4;
  v18 = 1772489163 * ((1772489163 * ((_DWORD)v16 + 1)) ^ ((1772489163 * (v16 + 1)) >> 16));
  *(_BYTE *)(v16 + 1) = v18 ^ *(_BYTE *)(v1 + (v18 >> 24)) ^ *(_BYTE *)((v18 >> 24) + v2 + 6) ^ (125
                                                                                               * ((1772489163
                                                                                                 * ((1772489163 * ((_DWORD)v16 + 1)) ^ ((1772489163 * (v16 + 1)) >> 16))) >> 24)) ^ *(_BYTE *)(a1 + (v18 >> 24)) ^ 0xE8 ^ BYTE6(v15);
  v19 = 1772489163 * ((1772489163 * ((_DWORD)v16 + 2)) ^ ((1772489163 * (v16 + 2)) >> 16));
  *(_BYTE *)(v16 + 2) = (-53 * ((-53 * (v16 + 2)) ^ ((1772489163 * (v16 + 2)) >> 16))) ^ (125 * ((1772489163 * ((1772489163 * ((_DWORD)v16 + 2)) ^ ((1772489163 * (v16 + 2)) >> 16))) >> 24)) ^ *(_BYTE *)(v1 + (v19 >> 24)) ^ *(_BYTE *)((v19 >> 24) + v2 + 6) ^ *(_BYTE *)(a1 + (v19 >> 24)) ^ 0x98 ^ BYTE5(v15);
  v20 = 1772489163 * ((1772489163 * ((_DWORD)v16 + 3)) ^ ((1772489163 * (v16 + 3)) >> 16));
  *(_BYTE *)(v16 + 3) = (-53 * ((-53 * (v16 + 3)) ^ ((1772489163 * (v16 + 3)) >> 16))) ^ (125 * ((1772489163 * ((1772489163 * ((_DWORD)v16 + 3)) ^ ((1772489163 * (v16 + 3)) >> 16))) >> 24)) ^ *(_BYTE *)(v1 + (v20 >> 24)) ^ *(_BYTE *)((v20 >> 24) + v2 + 6) ^ *(_BYTE *)(a1 + (v20 >> 24)) ^ 0xCB ^ BYTE4(v15);
  v21 = 1772489163 * ((1772489163 * ((_DWORD)v16 + 4)) ^ ((1772489163 * (v16 + 4)) >> 16));
  *(_BYTE *)(v16 + 4) = (-53 * ((-53 * (v16 + 4)) ^ ((1772489163 * (v16 + 4)) >> 16))) ^ (125 * ((1772489163 * ((1772489163 * ((_DWORD)v16 + 4)) ^ ((1772489163 * (v16 + 4)) >> 16))) >> 24)) ^ *(_BYTE *)(v1 + (v21 >> 24)) ^ *(_BYTE *)((v21 >> 24) + v2 + 6) ^ *(_BYTE *)(a1 + (v21 >> 24)) ^ BYTE3(v15) ^ 0x77;
  v22 = 1772489163 * ((1772489163 * ((_DWORD)v16 + 5)) ^ ((1772489163 * (v16 + 5)) >> 16));
  v23 = (char *)*(&off_1015B46D0 + (int)v3 - 3123) - 4;
  v24 = (char *)*(&off_1015B46D0 + (int)v3 - 1982) - 8;
  v25 = (uint64_t)*(&off_1015B46D0 + (int)(v3 ^ 0x1606));
  *(_BYTE *)(v16 + 5) = (-53 * ((-53 * (v16 + 5)) ^ ((1772489163 * (v16 + 5)) >> 16))) ^ (-99 * ((1772489163 * ((1772489163 * ((_DWORD)v16 + 5)) ^ ((1772489163 * (v16 + 5)) >> 16))) >> 24)) ^ v23[v22 >> 24] ^ v24[v22 >> 24] ^ *(_BYTE *)((v22 >> 24) + v25 + 1) ^ BYTE2(v15) ^ 0x89;
  v26 = 1772489163 * ((1772489163 * ((_DWORD)v16 + 6)) ^ ((1772489163 * (v16 + 6)) >> 16));
  *(_BYTE *)(v16 + 6) = (-53 * ((-53 * (v16 + 6)) ^ ((1772489163 * (v16 + 6)) >> 16))) ^ (-99 * ((1772489163 * ((1772489163 * ((_DWORD)v16 + 6)) ^ ((1772489163 * (v16 + 6)) >> 16))) >> 24)) ^ v23[v26 >> 24] ^ v24[v26 >> 24] ^ *(_BYTE *)((v26 >> 24) + v25 + 1) ^ ((BYTE1(v15) ^ 0x24) - 2 * ((BYTE1(v15) ^ 0x24) & 0xF ^ BYTE1(v15) & 1) + 14) ^ 0xE;
  v27 = 1772489163 * ((1772489163 * ((_DWORD)v16 + 7)) ^ ((1772489163 * (v16 + 7)) >> 16));
  *(_BYTE *)(v16 + 7) = (-53 * ((-53 * (v16 + 7)) ^ ((1772489163 * (v16 + 7)) >> 16))) ^ (-99 * ((1772489163 * ((1772489163 * ((_DWORD)v16 + 7)) ^ ((1772489163 * (v16 + 7)) >> 16))) >> 24)) ^ v23[v27 >> 24] ^ v24[v27 >> 24] ^ *(_BYTE *)((v27 >> 24) + v25 + 1) ^ v15 ^ 0x30;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * ((int)v3 + 8700)))();
}

uint64_t sub_10073A0B4@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int8x16_t *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v7 = STACK[0x6AD8];
  v8 = *(_QWORD *)(STACK[0x6AD8] + 8 * v4) + a2;
  v9 = STACK[0xC768];
  v10 = (int8x16_t *)((char *)&STACK[0x10000] + STACK[0xC768]);
  v10->i64[0] = 0xB92DD1E8EAE74BFLL;
  v10->i64[1] = 0x27C51F316326AFE4;
  STACK[0xC768] = v9 + 32;
  v11 = (((a1 + 3323) ^ (2 * (((v2 + 10830) | 0x324) ^ v3 & 0x90 ^ 0xD25D53AC))) & (v3 ^ 0x7738F418) | ((v2 + 10830) | 0x324) ^ v3 & 0x90 ^ 0xD25D53AC) ^ 0x2D22DB00;
  LODWORD(v9) = ((2 * (v3 ^ 0x7738F418)) ^ 0xC8880A00) & (v3 ^ 0x80052488) ^ 0xBF2FDB80;
  v12 = (4 * v11) & 0xD2590080 ^ v11 ^ ((4 * v11) ^ 0x49340200) & v9;
  LODWORD(v9) = ((4 * v9) ^ 0x49340200) & v9 ^ (4 * v9) & 0xD25D0080;
  v13 = v12 ^ v9 & 0x6D72DB08 ^ ((16 * v12) ^ 0x4DA2D308) & (v9 ^ 0x40540000);
  LODWORD(v9) = ((16 * v9) ^ 0x6832DB08) & (v9 ^ 0x40540000) ^ v9 & 0x6D72DB08;
  v14 = v13 ^ v9 & 0x6D72DB08 ^ ((v13 << 8) ^ 0x30725B08) & (v9 ^ v6);
  LODWORD(v9) = (((_DWORD)v9 << 8) ^ 0x3D72DB08) & (v9 ^ v6) ^ v9 & 0x6D72DB08;
  v10[1] = veorq_s8(*v10, (int8x16_t)xmmword_101507210);
  STACK[0xC708] = v8;
  v15 = v3 ^ (2
            * (v14 ^ v9 & 0x6D72DB08 ^ ((v14 << 16) ^ 0x6DF2DB08) & (v9 ^ 0x120D0000) ^ ((v14 << 16) ^ 0x6DF2DB08) & 0x525D0000));
  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((122
                                          * ((((v15 ^ 0x6C8560E7) + 174561812) ^ ((v15 ^ 0x2E0FC4AD) + 1223507546) ^ ((v15 ^ 0x435551D2) + 632793895))
                                           - 1426426840 != v5)) ^ v2))
                            - 4))();
}

uint64_t sub_10073A320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _BOOL4 v16;
  _BYTE *v17;
  unsigned int v18;

  v16 = v11 < v14;
  v17 = (_BYTE *)(v7 + v10);
  *(_BYTE *)(v9 + v10) = *(_BYTE *)(*(_QWORD *)(v13 + 8 * (v8 - 7090))
                                  + (v10 & 0xF | (16
                                                * (((((_DWORD)v17 * a7) ^ (((_DWORD)v17 * a7) >> 16))
                                                  * (((v8 + 11090) | 0x220) ^ v15)) >> 24)))
                                  - 4) ^ *v17 ^ (-53 * (((_BYTE)v17 * a7) ^ (((_DWORD)v17 * a7) >> 16)));
  v18 = v10 + 1;
  if (v16 == v18 > 0xEDC87C6A)
    v16 = v18 + v14 < v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v16 * v12) ^ v8)) - 4))();
}

uint64_t sub_10073A3CC()
{
  unint64_t v0;
  int v1;
  uint64_t v2;

  STACK[0xD1A8] += 32;
  LODWORD(STACK[0xD6BC]) = 0;
  STACK[0xD6F0] = v0;
  STACK[0xD6C0] = v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v1 | (8 * (v2 != v0)))) - 8))();
}

uint64_t sub_10073A42C()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * (v0 ^ (3406 * (v1 == 0))))
                                          - (((v0 ^ 0x2079u) - 21738) ^ 0x1072)))(4160223095);
}

uint64_t sub_10073A47C()
{
  int v0;
  int v1;
  int v2;
  _QWORD *v3;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  int v8;

  v0 = 199 * (STACK[0x6508] ^ 0x1023);
  v1 = STACK[0x6508] + 1832;
  v2 = STACK[0x6508] + 1801;
  v3 = (_QWORD *)STACK[0x9120];
  *v3 = 0;
  v3[1] = 0;
  v4 = sub_10009ABD4((_BYTE *)STACK[0xACF0], 0, 0x40uLL);
  v5 = STACK[0xC6E8];
  v6 = STACK[0xC3F8];
  STACK[0xDA40] = STACK[0xC3F8];
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 1;
  v8 = v7;
  return ((uint64_t (*)(_BYTE *))(*(_QWORD *)(STACK[0x6AD8] + 8 * ((v8 * (v1 - 22736 + v0)) ^ v2)) - 12))(v4);
}

uint64_t sub_10073A518()
{
  int v0;
  unsigned __int8 *v1;
  int v2;
  char *v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  int v14;
  int v15;
  char v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned __int8 v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  char v53;
  unsigned int v54;
  int v55;
  unsigned __int8 v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  char *v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  char *v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unsigned __int8 v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  unsigned int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  unsigned int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  char *v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned __int8 v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  char v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  int v298;
  unsigned int v299;
  int v300;
  int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  __int16 v315;
  unsigned int v316;
  unint64_t v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  char v338;
  int v339;
  unsigned int v340;
  int v341;
  int v342;
  BOOL v343;
  int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  int v354;
  int v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unint64_t v361;
  int v362;
  int v363;
  unsigned int v364;
  int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  int v401;
  unsigned int v402;
  unint64_t v403;
  unsigned int v404;
  int v405;
  int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  unsigned int v415;
  int v416;
  char v417;
  int v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  int v427;
  int v428;
  unint64_t v429;
  int v430;
  unsigned int v431;
  BOOL v432;
  unsigned int v433;
  unsigned int v434;
  int v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  int v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  char v450;
  unsigned int v451;
  int v452;
  char *v453;
  int v454;
  unint64_t v455;
  int v456;
  char v457;
  unsigned int v458;
  unsigned int v459;
  int v460;
  unsigned int v461;
  int v462;
  char *v463;
  int v464;
  int v465;
  unsigned int v466;
  char *v467;
  unsigned int v468;
  char *v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  int v475;
  int v476;
  int v477;
  unsigned int v478;
  int v479;
  int v480;
  int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  int v485;
  unsigned int v486;
  unsigned int v487;
  int v488;
  unsigned int v489;
  char *v490;
  unint64_t v491;
  _BYTE *v492;
  char *v493;
  int v494;
  int v495;
  unint64_t v496;
  char *v497;
  int v498;
  int v499;
  char *v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;

  LODWORD(STACK[0x6AC0]) = v0 ^ 0x558D;
  v2 = __ROR4__(v1[1], 5);
  v3 = (char *)*(&off_1015B46D0 + (v0 ^ 0x1468)) - 12;
  v4 = v3[__ROR4__(((v0 ^ 0x558D) - (v2 ^ 0xFED7FFF7 | 0xD617BFB2) + (v2 ^ 0xFED7FFF7 | 0x29E8404D)- 703103585) ^ 0xA3E2DF6A, 27) ^ 0x9BAC1AF9]- 107;
  v5 = (v4 & 0x18 | 0xFFFFFFC5) ^ v4 & 0xFFFFFFBA;
  LODWORD(STACK[0x6A60]) = v4 ^ (2
                               * ((v4 ^ 0x18) & (2
                                               * ((v4 ^ 0x18) & (2
                                                               * ((v4 ^ 0x18) & (2
                                                                               * ((v4 ^ 0x18) & (2
                                                                                               * ((v4 ^ 0x18) & (2 * (((2 * v5) ^ 0x30) & (v4 ^ 0x18) ^ v5)) ^ v5)) ^ v5)) ^ v5)) ^ v5)) ^ v5));
  v6 = v1[10];
  STACK[0x6A90] = v6;
  v7 = (uint64_t)*(&off_1015B46D0 + (v0 ^ 0x1479));
  LOBYTE(v4) = *(_BYTE *)(v7 + (v6 ^ 0x7D));
  v8 = ((2 * v4) & 8) - (v4 & 0x6E) - 22;
  v9 = 4 * (v4 ^ 0xA2);
  v10 = 62 - (((v4 ^ 0x50) - 80) ^ ((v4 ^ 0x63) - 99) ^ ((v4 ^ 0xDE) + 34));
  v11 = (107 - (v4 | 0x6E)) & 0x91;
  v12 = (((v9 ^ 0xF1) - 54) ^ ((v9 ^ 0xCA) - 13) ^ ((v9 ^ 0x87) - 64))
      - (((v9 ^ v4 ^ 0xA2 ^ 0x7C) + 69) ^ ((v9 ^ v4 ^ 0xA2 ^ 0x69) + 82) ^ ((v9 ^ v4 ^ 0xA2 ^ 6) + 63))
      - 84;
  v13 = v12 & 0x1B ^ 0x90;
  LOBYTE(v4) = v10 ^ v4 ^ v12 ^ (2
                               * (v13 ^ (v10 & 0xD5 | 0x28) ^ (v10 ^ 0x54) & (2
                                                                            * ((v10 ^ 0x54) & (2
                                                                                             * ((v10 ^ 0x54) & (2 * (v10 & 0xD5 | 0x28)) ^ (v10 & 0xD5 | 0x28))) ^ (v10 & 0xD5 | 0x28))) ^ (v12 ^ 0x7A) & (2 * ((v12 ^ 0x7A) & (2 * ((v12 ^ 0x7A) & (2 * v13) ^ v13)) ^ v13))));
  LOBYTE(v4) = (((v9 ^ 0xD5) - 18) ^ ((v9 ^ 0x62) + 91) ^ ((v9 ^ 0xB) + 52))
             + (((v4 ^ 0xF6) + 110) ^ ((v4 ^ 0x75) - 17) ^ ((v4 ^ 0x50) - 52))
             + 60;
  v14 = v3[v1[5] ^ 0x38];
  LOBYTE(v4) = ((v8 & 0xEF ^ 0xE7) - (v8 | 0xEF) - 2) ^ v11 ^ (8 * v4) ^ (16
                                                                        * ((((4 * v4) & 8 ^ 0xC) & ((2 * v4) ^ 0xC) ^ 0xAA) & (v4 ^ 6)));
  v15 = v14 - 107;
  v16 = ~(v14 - 107);
  v17 = ((10 - (_BYTE)v14) & 0x18 | 0xFFFFFFE6) ^ (v14 - 107) & 0xFFFFFFEC;
  v18 = v15 ^ (2
             * ((v15 ^ 0x18) & (2
                              * ((v15 ^ 0x18) & (2
                                               * ((v15 ^ 0x18) & (2
                                                                * ((v15 ^ 0x18) & (2 * ((v15 ^ 0x18) & (2 * v17) ^ v17)) ^ v17)) ^ v17)) ^ v17)) ^ v17));
  LODWORD(STACK[0x6A70]) = v18;
  v19 = v1[9];
  LODWORD(STACK[0x69D0]) = (((((v18 ^ ((v18 & 0xFE) >> 1) ^ 0x3B) & (v16 | 0xFE) ^ 0xF7)
                                                           + ((2 * (v18 ^ ((v18 & 0xFE) >> 1) ^ 0x3B)) | 0xDE)
                                                           - 110) ^ 0xD2) >> (v18 & 2 ^ 2)) >> (v18 & 2);
  v20 = v3[v19 ^ 0xB1];
  v21 = v20 - 107;
  v22 = (10 - (_BYTE)v20) & 0x18 | 1;
  LODWORD(v19) = v22 ^ v21 & 0x12;
  LODWORD(STACK[0x69E0]) = v21 ^ (2
                                * ((v21 ^ 0x18) & (2
                                                 * ((v21 ^ 0x18) & (2
                                                                  * ((v21 ^ 0x18) & (2
                                                                                   * ((v21 ^ 0x18) & (2 * ((v21 ^ 0x18) & (2 * (((2 * v22) ^ 0x20) & v21 ^ v19)) ^ v19)) ^ v19)) ^ v19)) ^ v19)) ^ v19));
  v23 = *(unsigned __int8 *)(v7 + (v1[2] ^ 0x6ALL));
  LODWORD(STACK[0x6A10]) = v23 ^ (32 * v23) ^ (8 * v23);
  v24 = (char *)*(&off_1015B46D0 + (v0 ^ 0x1EAC)) - 8;
  v25 = ((v4 << 8) & 0x1700 ^ 0x1348)
      + ((v4 << 8) ^ 0xDBB8C4B7)
      - (((v4 << 8) ^ 0xDBB8C4B7) & 0x1A81797);
  v26 = v24[v1[7] ^ 0xE3] + 92;
  LODWORD(STACK[0x6A30]) = v26;
  v27 = v26 & 4 ^ 0xFFFFFF9E;
  LODWORD(v19) = v0;
  v28 = (uint64_t)*(&off_1015B46D0 + (v0 ^ 0x1620));
  v29 = *(unsigned __int8 *)(v28 + (v1[8] ^ 0x7ALL));
  LODWORD(STACK[0x6A80]) = (v26 ^ 0x68) & (2
                                         * ((v26 ^ 0x68) & (2
                                                          * ((v26 ^ 0x68) & (2
                                                                           * ((v26 ^ 0x68) & (2
                                                                                            * ((v26 ^ 0x68) & (2 * v27) ^ v27)) ^ v27)) ^ v27)) ^ v27)) ^ v27;
  v30 = ((4 * (v29 & (2 * (v29 & 0x4C ^ 0xEA)) ^ v29 & 0x4C ^ 0xEA)) ^ (2 * v29)) & 0x1E ^ 0xE;
  v31 = (((2 * v30) | 0xFFFFFFE4) - v30 + 14) ^ 0xFFFFFFF2;
  LODWORD(v6) = v29 & 0xB2 ^ 0x6D;
  LODWORD(v6) = v29 ^ (2
                     * ((v29 ^ 0x78) & (2
                                      * ((v29 ^ 0x78) & (2
                                                       * ((v29 ^ 0x78) & (2
                                                                        * ((v29 ^ 0x78) & (2
                                                                                         * (((2 * (v6 ^ v29 & 0x4A)) ^ 0x10) & (v29 ^ 0x78) ^ v6)) ^ v6)) ^ v6)) ^ v6)) ^ v6));
  v32 = ((((v31 - ((2 * v31) & 0xFFFFFFA8) + 84) ^ 0x5E) + 72) ^ (((v31 - ((2 * v31) & 0xFFFFFFA8) + 84) ^ 0xFFFFFFCA)
                                                                - 44) ^ (((v31 - ((2 * v31) & 0xFFFFFFA8) + 84) ^ 0xFFFFFFD6)
                                                                       - 48))
      + (((v6 ^ 0x3F) + 119) ^ ((v6 ^ 0x5E) + 24) ^ ((v6 ^ 0x5C) + 22))
      + 115;
  LODWORD(v6) = v32 & 0xFFFFFFBA ^ 7;
  LODWORD(STACK[0x6A00]) = v32 ^ (2
                                * ((v32 ^ 0x3C) & (2
                                                 * ((v32 ^ 0x3C) & (2
                                                                  * ((v32 ^ 0x3C) & (2
                                                                                   * ((v32 ^ 0x3C) & (2 * ((v32 ^ 0x3C) & (2 * ((v32 ^ 0x3C) & 6 ^ v6)) ^ v6)) ^ v6)) ^ v6)) ^ v6)) ^ v6));
  v33 = *(unsigned __int8 *)(v7 + (v1[14] ^ 0x76));
  v34 = (~(v33 >> 1) & 0xF | 0xFFFFFF90) - (~(v33 >> 1) & 0x10 | 0x6F);
  v35 = v34 + 111 + (((~(v33 >> 1) & 0x10 | 0x6F) - (~(v33 >> 1) & 0xF | 0xFFFFFF90)) & 0xD) - ((v34 + 111) & 0xD);
  LODWORD(STACK[0x6AB0]) = v33;
  v36 = ((v35 & 0x53 ^ 0x10) + ((v33 << 7) ^ 0xFFFFFF89 ^ (v35 ^ 0x7FE0) & ((v33 << 7) | 0x2C)) - 1) ^ ((v33 >> 3) | (32 * v33));
  LODWORD(v6) = *(unsigned __int8 *)(v7 + (v1[6] ^ 0xFELL));
  v37 = ((((v6 >> 3) | (32 * v6)) ^ 0x6A) >> 5) | (8
                                                                                * (((v6 >> 3) | (32 * v6)) ^ 0x6A));
  v38 = 8 * (v37 ^ 0xFFFFFFF9);
  LODWORD(v7) = v38 ^ (32 * (v37 ^ 0xFFFFFFF9));
  v39 = (v38 & 8 ^ 0xFFFFFF88 ^ v7 & 0xFFFFFF8F) - 75;
  v40 = v33 ^ 0x5B ^ (((v36 & 0xE0) >> 2) | ((_BYTE)v36 << 6));
  LODWORD(v7) = -2 - ((v7 | 0xFFFFFFCE) + (v7 | 0xFFFFFFB3));
  v41 = (((v37 ^ 0x15) + 62) ^ ((v37 ^ 0xFFFFFFDD) - 10) ^ ((v37 ^ 0xFFFFFF96) - 65))
      + (((v39 ^ 0x62) + 94) ^ ((v39 ^ 0xFFFFFFC6) - 6) ^ ((v39 ^ 0x19) + 39))
      + 39;
  v42 = v41 & 0xFFFFFFB3 ^ 0xFFFFFFFA;
  v43 = v41 ^ (2
             * ((v41 ^ 0x5E) & (2
                              * ((v41 ^ 0x5E) & (2
                                               * ((v41 ^ 0x5E) & (2
                                                                * ((v41 ^ 0x5E) & (2
                                                                                 * ((v41 ^ 0x5E) & (2
                                                                                                  * (((2 * (v41 & 0x1F)) ^ 0x6C) & (v41 ^ 0x5E) ^ v42)) ^ v42)) ^ v42)) ^ v42)) ^ v42)) ^ v42));
  v44 = v7 ^ 0xFFFFFFEE;
  v45 = (((v43 ^ 0x75) - 122) ^ ((v43 ^ 0x12) - 29) ^ ((v43 ^ 0xFFFFFFD4) + 37))
      - (((v43 ^ v7 ^ 0xFFFFFFEE ^ 0xFFFFFFF3) + 4) ^ ((v43 ^ v7 ^ 0xFFFFFFEE ^ 0x35) - 58) ^ ((v43 ^ v7 ^ 0xFFFFFFEE ^ 0xFFFFFFBE)
                                                                                             + 79))
      - 77;
  v46 = v45 & 0xFFFFFFEE ^ 0x2E;
  LODWORD(v6) = (v7 ^ ((v7 ^ 0xFFFFFF88) - 102) ^ ((v7 ^ 0xFFFFFFBD) - 83) ^ 0xFFFFFFED) + 86;
  LODWORD(v7) = (v6 & 0xFFFFFFE0 | 0xE) ^ v6 & 0x1C;
  LODWORD(v7) = v6 ^ v44 ^ v45 ^ (2
                                * ((v6 ^ 0x60) & (2
                                                * ((v6 ^ 0x60) & (2
                                                                * ((v6 ^ 0x60) & (2
                                                                                * ((v6 ^ 0x60) & (2
                                                                                                * ((v6 ^ 0x60) & (2 * v7) ^ v7)) ^ v7)) ^ v7)) ^ v7)) ^ v7 ^ v46 ^ (v45 ^ 0x10) & (2 * ((v45 ^ 0x10) & (2 * ((v45 ^ 0x10) & (2 * (((2 * (((2 * (_BYTE)v45) & 0x24 | 0x12) & v45)) ^ 0x7C) & (v45 ^ 0x10) ^ v46)) ^ v46)) ^ v46))));
  v47 = (((v43 ^ 0x27) - 40) ^ ((v43 ^ 0xFFFFFFDD) + 46) ^ ((v43 ^ 0x49) - 70))
      + (((v7 ^ 0xFFFFFFCF) - 51) ^ ((v7 ^ 0x39) + 59) ^ ((v7 ^ 0x2F) + 45))
      - 25;
  v48 = v47 & 0xFFFFFFFA | 1;
  LODWORD(v7) = v48 ^ v47 & 6;
  LODWORD(STACK[0x6A20]) = v47 ^ (2
                                * ((v47 ^ 0x7A) & (2
                                                 * ((v47 ^ 0x7A) & (2
                                                                  * ((v47 ^ 0x7A) & (2
                                                                                   * ((v47 ^ 0x7A) & (2 * ((v47 ^ 0x7A) & (2 * ((2 * v48) & 0x72 ^ v7 ^ ((2 * v48) ^ 4) & v47)) ^ v7)) ^ v7)) ^ v7)) ^ v7)) ^ v7));
  LODWORD(v7) = v24[v1[11] ^ 0x1ALL] + 92;
  LODWORD(STACK[0x6A40]) = v7;
  v49 = v7 & 0xFFFFFFD0 ^ 0xFFFFFFB4;
  LODWORD(STACK[0x6A50]) = (v7 ^ 0x68) & (2
                                        * ((v7 ^ 0x68) & (2 * ((v7 ^ 0x68) & (2 * ((v7 ^ 0x68) & (2 * v49) ^ v49)) ^ v49)) ^ v49)) ^ v49;
  v50 = v24[v1[3] ^ 4] + 92;
  v51 = v50 & 0x3E ^ 0xFFFFFFAB;
  LODWORD(STACK[0x69F0]) = (v50 ^ 0x68) & (2
                                         * ((v50 ^ 0x68) & (2
                                                          * ((v50 ^ 0x68) & (2
                                                                           * ((v50 ^ 0x68) & (2
                                                                                            * ((v50 ^ 0x68) & (2 * (v51 ^ v50 & 0x16)) ^ v51)) ^ v51)) ^ v51)) ^ v51)) ^ v51;
  v52 = ((v25 & 0xA1FFF68 ^ 0x84001291) & 0x80124928 ^ 0x624108)
      + ((v25 & 0xA1FFF68 ^ 0x84001291) & 0xA0DB650 ^ 0x4009A005);
  LOBYTE(v51) = v3[v1[13] ^ 0x6ELL];
  LOBYTE(v48) = (10 - v51) & 0x18 | 0x46;
  LOBYTE(v51) = v51 - 107;
  LOBYTE(v48) = v48 ^ v51 & 0xAC;
  LOBYTE(v51) = v51 ^ (2
                     * ((v51 ^ 0x18) & (2
                                      * ((v51 ^ 0x18) & (2
                                                       * ((v51 ^ 0x18) & (2
                                                                        * ((v51 ^ 0x18) & (2
                                                                                         * ((v51 ^ 0x18) & (2 * v48) ^ v48)) ^ v48)) ^ v48)) ^ v48)) ^ v48));
  LOBYTE(v47) = (((2 * (v51 & 0x69 ^ 0xB8)) & 0xD0) - (v51 & 0x69 ^ 0xB8) + 21) ^ 0xC9;
  LODWORD(v3) = *(unsigned __int8 *)(v28 + (*v1 ^ 0x48)) - 105;
  LODWORD(v6) = v3 & 0x22 ^ 0x39;
  LODWORD(v6) = v3 ^ (2
                                  * ((v3 ^ 0x70) & (2
                                                                * ((v3 ^ 0x70) & (2
                                                                                              * ((v3 ^ 0x70) & (2 * ((v3 ^ 0x70) & (2 * (((2 * (v6 ^ v3 & 0x52)) ^ 0x20) & (v3 ^ 0x70) ^ v6)) ^ v6)) ^ v6)) ^ v6)) ^ v6));
  LODWORD(v3) = (((v6 >> 2) & 0x30 ^ 0x23) - 1) ^ 0x32;
  v53 = (((2 * (_BYTE)v3) | 0xD2) - (_BYTE)v3 + 23) ^ v6;
  v54 = (((((v51 >> 3) ^ (v51 >> 2) ^ (126
                                                                                        - (((v51 & 0x96 ^ 0x6F)
                                                                                          + ((2 * (v51 & 0x96)) | 0xB6)
                                                                                          + 38) ^ 0xE9)) ^ ((v47 | 0xA7) - (v47 | 0x58) + 88)) << 16) ^ 0x800B9BDA) & ((v40 << 8) ^ 0xFAFF3BDB) | (v40 << 8) & 0x6400) ^ 0x7A002001;
  v55 = 190536781 - (v54 | 0xB5B5C4D) + (v54 | 0x34A4A3B2);
  v56 = 66 - (v53 & 0x10 ^ ((v53 & 0x10) + 50) ^ (v53 & 0x10 | 0x2E) ^ 0xD2);
  LOBYTE(v54) = *(_BYTE *)(v28 + (v1[4] ^ 0x5ALL));
  LOBYTE(v6) = v54 - 105;
  LOBYTE(v54) = ((v54 + 23) & 0xF0 | 0xC) ^ (v54 - 105) & 0xF8;
  LOBYTE(v54) = v6 ^ (2
                    * ((v6 ^ 0x70) & (2
                                    * ((v6 ^ 0x70) & (2
                                                    * ((v6 ^ 0x70) & (2
                                                                    * ((v6 ^ 0x70) & (2 * ((v6 ^ 0x70) & (2 * v54) ^ v54)) ^ v54)) ^ v54)) ^ v54)) ^ v54));
  LOBYTE(v3) = *(_BYTE *)(v28 + (v1[12] ^ 0x51));
  v57 = ((v54 >> 2) & 0x10)
      + ((v54 >> 2) & 0x30 ^ 0xDF)
      + ((v54 >> 2) & 0x10 | 0xA4);
  LOBYTE(v6) = (v57 + 1) ^ 0x2A;
  v58 = (v54 ^ 0x64) + 13;
  LOBYTE(v46) = (((v54 ^ 0x60) + 9) ^ ((v54 ^ 0xC) + 101) ^ v58)
              - (((v6 ^ v54 ^ 0x3D) + 86) ^ ((v6 ^ v54 ^ 0xCB) - 92) ^ ((v6 ^ v54 ^ 0x50) + 57));
  LOBYTE(v44) = v46 - 35;
  LOBYTE(v46) = (34 - v46) & 0x91 | 0x2E;
  v59 = v46 ^ v44 & 0x5E;
  v60 = 119 - ((((v57 + 1) ^ 0x1A) - 48) ^ (v57 - 21) ^ (((v57 + 1) ^ 0x94) + 66));
  v61 = v60 & 0x1F ^ 0xA2;
  LOBYTE(v6) = v60 ^ v6 ^ v44 ^ (2
                               * (v59 ^ v61 ^ (v60 ^ 0x5A) & (2
                                                            * ((v60 ^ 0x5A) & (2
                                                                             * ((v60 ^ 0x5A) & (2
                                                                                              * ((v60 ^ 0x5A) & (2 * ((v60 ^ 0x5A) & (2 * (((2 * v60) & 0x36 ^ 0x44) & (v60 ^ 0x52) ^ v61)) ^ v61)) ^ v61)) ^ v61)) ^ v61)) ^ (v44 ^ 0x10) & (2 * ((v44 ^ 0x10) & (2 * ((v44 ^ 0x10) & (2 * ((v44 ^ 0x10) & (2 * ((v44 ^ 0x10) & (2 * (((2 * v46) ^ 0x20) & v44 ^ v59)) ^ v59)) ^ v59)) ^ v59)) ^ v59))));
  v62 = (((v54 ^ 0xD7) - 64) ^ ((v54 ^ 0xBB) - 44) ^ v58)
      + (((v6 ^ 0x8F) - 20) ^ ((v6 ^ 0x51) + 54) ^ ((v6 ^ 0xA0) - 59))
      - 112;
  LOBYTE(v54) = v62 & 0x22 ^ 0x3F;
  LOBYTE(v6) = (v62 ^ 0x74) & (2
                             * ((v62 ^ 0x74) & (2
                                              * ((v62 ^ 0x74) & (2
                                                               * ((v62 ^ 0x74) & (2
                                                                                * ((v62 ^ 0x74) & (2
                                                                                                 * ((v62 ^ 0x74) & 0x16 ^ v54)) ^ v54)) ^ v54)) ^ v54)) ^ v54)) ^ v54;
  LOBYTE(v51) = (((_BYTE)v3 + 23) & 0xF0 | 0xE) ^ ((_BYTE)v3 - 105) & 0xFC;
  LOBYTE(v33) = ((_BYTE)v3 - 105) ^ (2
                                   * ((((_BYTE)v3 - 105) ^ 0x70) & (2
                                                                  * ((((_BYTE)v3 - 105) ^ 0x70) & (2
                                                                                                 * ((((_BYTE)v3 - 105) ^ 0x70) & (2 * ((((_BYTE)v3 - 105) ^ 0x70) & (2 * ((((_BYTE)v3 - 105) ^ 0x70) & (2 * v51) ^ v51)) ^ v51)) ^ v51)) ^ v51)) ^ v51));
  LODWORD(STACK[0x6A10]) = ((((LODWORD(STACK[0x6A10]) << 8) & 0x2D00)
                           + ((LODWORD(STACK[0x6A10]) << 8) ^ 0x47BEDF7)) | 8)
                         - (((LODWORD(STACK[0x6A10]) << 8) ^ 0x47BEDF7) & 0x2D11);
  v63 = ((2 * (v55 & 0x24FFFFFF ^ 0x20B02796)) & 0xB9A12E) - (v55 & 0x24FFFFFF ^ 0x20B02796) - 1130156184;
  LOBYTE(v54) = v24[v1[15] ^ 0x36] + 127;
  LOBYTE(v51) = v54 & 0xE5 | 0x10;
  LOBYTE(v54) = v54 ^ (2
                     * ((v54 ^ 0x44) & (2
                                      * ((v54 ^ 0x44) & (2
                                                       * ((v54 ^ 0x44) & (2
                                                                        * ((v54 ^ 0x44) & (2
                                                                                         * ((v54 ^ 0x44) & (2 * ((v54 ^ 0x40) & (2 * v51) ^ v51)) ^ v51)) ^ v51)) ^ v51)) ^ v51)) ^ v51));
  v64 = (v63 ^ 0xBE) & (v54 ^ 0x1A);
  LODWORD(v28) = v54 & 0xD6;
  v65 = *((_DWORD *)*(&off_1015B46D0 + (int)(v19 ^ 0x1D85))
        + (v53 & 0xEF ^ v56 ^ (2
                                              * ((v56 ^ 0x74) & (2
                                                               * ((v56 ^ 0x74) & (2 * ((v56 ^ 0x74) & (2 * v56) ^ v56)) ^ v56)) ^ v56)) ^ 0x62u)
        - 3)
      - 1945910225;
  v66 = (v65 ^ 0x24354FF1) & (2 * (v65 & 0x86B84E00)) ^ v65 & 0x86B84E00;
  v67 = ((2 * (v65 ^ 0x20254FF1)) ^ 0x4D3A03E2) & (v65 ^ 0x20254FF1) ^ (2 * (v65 ^ 0x20254FF1)) & 0xA69D01F0;
  v68 = (v67 ^ 0x84040011) & (4 * v66) ^ v66;
  v69 = ((4 * (v67 ^ 0xA2850011)) ^ 0x9A7407C4) & (v67 ^ 0xA2850011) ^ (4 * (v67 ^ 0xA2850011)) & 0xA69D01F0;
  v70 = (v69 ^ 0x821401D1) & (16 * v68) ^ v68;
  v71 = ((16 * (v69 ^ 0x24890031)) ^ 0x69D01F10) & (v69 ^ 0x24890031) ^ (16 * (v69 ^ 0x24890031)) & 0xA69D01F0;
  v72 = v70 ^ 0xA69D01F1 ^ (v71 ^ 0x209001E1) & (v70 << 8);
  v73 = v65 ^ (2
             * ((v72 << 16) & 0x269D0000 ^ v72 ^ ((v72 << 16) ^ 0x1F10000) & (((v71 ^ 0x860D00E1) << 8) & 0xA69D0000 ^ 0x229C0000 ^ (((v71 ^ 0x860D00E1) << 8) ^ 0x1D010000) & (v71 ^ 0x860D00E1))));
  LOBYTE(v65) = LODWORD(STACK[0x6A70]) ^ 0xC5 ^ LODWORD(STACK[0x69D0]);
  v74 = (v52 - 1) >> 8;
  v75 = (v74 & 0x5C)
      + 403702369
      + (((unsigned __int16)(v52 - 1) >> 8) ^ 0xC1A6327E)
      - ((((unsigned __int16)(v52 - 1) >> 8) ^ 0xC1A6327E) & 0x180305C)
      + 671;
  v76 = (char *)*(&off_1015B46D0 + (int)(v19 ^ 0x1D85)) - 12;
  LODWORD(v7) = *(_DWORD *)&v76[4 * ((v62 ^ (2 * v6)) ^ 0xA9)] - 1945910225;
  v77 = (v7 ^ 0x36B14F5E) & (2 * (v7 & 0x86B84E00)) ^ v7 & 0x86B84E00;
  v78 = ((2 * (v7 ^ 0x3AE1CF5E)) ^ 0x78B302BC) & (v7 ^ 0x3AE1CF5E) ^ (2 * (v7 ^ 0x3AE1CF5E)) & 0xBC59815E;
  v79 = (v78 ^ 0xB8098140) & (4 * v77) ^ v77;
  v80 = ((4 * (v78 ^ 0x84488142)) ^ 0xF1660578) & (v78 ^ 0x84488142) ^ (4 * (v78 ^ 0x84488142)) & 0xBC59815C;
  v81 = v79 ^ 0xBC59815E ^ (v80 ^ 0xB0400146) & (16 * v79);
  v82 = (16 * (v80 ^ 0xC198006)) & 0xBC598150 ^ 0x3841801E ^ ((16 * (v80 ^ 0xC198006)) ^ 0xC59815E0) & (v80 ^ 0xC198006);
  v83 = (v81 << 8) & 0xBC598100 ^ v81 ^ ((v81 << 8) ^ 0x59815E00) & v82;
  v84 = v7 ^ (2
            * ((v83 << 16) & 0x3C590000 ^ v83 ^ ((v83 << 16) ^ 0x15E0000) & ((v82 << 8) & 0xBC590000 ^ 0x24580000 ^ ((v82 << 8) ^ 0x59810000) & v82)));
  v85 = (v75 & 0x19773 ^ 0x14099050) + (v75 & 0x2688C ^ 0x3064809) - 1;
  v86 = v19;
  v87 = (uint64_t)*(&off_1015B46D0 + (int)v19 - 3806);
  v88 = *(_DWORD *)(v87 + 4 * (((v74 & 0xA9 ^ 0xFF2CDA09) + (v74 & 0x56 ^ 0x45) - 1) ^ 0xFF2CDADB))
      - 498855529
      + (((v85 ^ 0x222A8E7B) - 1103020215) ^ ((v85 ^ 0xC7247215) + 1531953959) ^ ((v85 ^ 0x678C6E5A) - 68690070))
      + 2470;
  LODWORD(v7) = (v88 ^ 0xA1390A90) & (2 * (v88 & 0xB5BD52C5)) ^ v88 & 0xB5BD52C5;
  v89 = ((2 * (v88 ^ 0x8A792F92)) ^ 0x7F88FAAE) & (v88 ^ 0x8A792F92) ^ (2 * (v88 ^ 0x8A792F92)) & 0x3FC47D56;
  LODWORD(v7) = (v89 ^ 0x3F805804) & (4 * v7) ^ v7;
  v90 = ((4 * (v89 ^ 0x440551)) ^ 0xFF11F55C) & (v89 ^ 0x440551) ^ (4 * (v89 ^ 0x440551)) & 0x3FC47D54;
  LODWORD(v7) = (v90 ^ 0x3F007550) & (16 * v7) ^ v7;
  v91 = ((16 * (v90 ^ 0xC40803)) ^ 0xFC47D570) & (v90 ^ 0xC40803) ^ (16 * (v90 ^ 0xC40803)) & 0x3FC47D50;
  LODWORD(v7) = v7 ^ 0x3FC47D57 ^ (v91 ^ 0x3C445500) & ((_DWORD)v7 << 8);
  v92 = ((_DWORD)v7 << 16) & 0x3FC40000 ^ v7 ^ (((_DWORD)v7 << 16) ^ 0x7D570000) & (((v91 ^ 0x3802807) << 8) & 0x3FC40000 ^ 0x3B800000 ^ (((v91 ^ 0x3802807) << 8) ^ 0x447D0000) & (v91 ^ 0x3802807));
  LODWORD(v19) = (1396769439 - (v28 ^ 0x72 ^ v64 | 0x5341029F) + (v28 ^ 0x72 ^ v64 | 0xACBEFD60)) ^ 0xACBEFDFE;
  LODWORD(STACK[0x6A70]) = v19;
  LODWORD(v7) = (BYTE1(v63) ^ 0xF8) + ((v63 >> 8) & 0xEE ^ 0x4D7B3006) - ((BYTE1(v63) ^ 0xF8) & 0xEEEEEEEE);
  v93 = (v7 & 0x1E99 ^ 0x87964819) + (v7 & 0x166 ^ 0x20080147);
  LODWORD(v7) = (v84 & 0xD24520A5 ^ 0xC2410025 | 0xCFB95F76) - (v84 & 0xD24520A5 ^ 0xC2410025 | 0x3046A089) + 809934985;
  LOBYTE(v64) = LODWORD(STACK[0x69E0]) ^ (LODWORD(STACK[0x69E0]) >> 3) ^ (LODWORD(STACK[0x69E0]) >> 2);
  LODWORD(v7) = ((v7 & 0x21337079 ^ 0x20122058) + (v7 & 0xDECC8F86 ^ 0xCEC00587) - 1) ^ (((v84 >> 1) & 0x50452081 ^ 0x40C4318B)
                                                                                       - ((2
                                                                                         * ((v84 >> 1) & 0x50452081 ^ 0x40C4318B)) & 0x210A4010)
                                                                                       + 444932140);
  v94 = ((2 * (v84 & 0x2DBADF5A ^ 0x488C4841)) & 0x4B78AE24) - (v84 & 0x2DBADF5A ^ 0x488C4841) + 1212328009;
  LODWORD(STACK[0x6AA0]) = v86;
  v95 = (char *)*(&off_1015B46D0 + v86 - 4936) - 4;
  v96 = (uint64_t)*(&off_1015B46D0 + (v86 ^ 0x1104));
  v97 = *(_DWORD *)&v95[4 * v65] ^ *(_DWORD *)(v96 + 4 * v19) ^ v73 ^ v88 ^ (-938777696 - ((v73 >> 1) & 0x7065B199 ^ 0x60443081 | 0xC80B63A0) + ((v73 >> 1) & 0x7065B199 ^ 0x60443081 | 0x37F49C5F)) ^ (2 * v92) ^ 0xAB242F3C;
  v98 = (((v84 >> 1) & 0x20201010) + ((v84 >> 1) & 0x20209118 ^ 0xFFFFFEFF) + ((v84 >> 1) & 0x20201010 | 0x530187AA) + 1) ^ 0x131307F4;
  LODWORD(v28) = (v7 ^ 0xC4D1B471) & ((((2 * v98) & 0x2BD735AC) - v98 - 367762135) ^ 0x6E5FF651);
  v99 = v7 & 0x1BA66DC1;
  v100 = ((2 * (BYTE1(v63) ^ 0xA9)) & 0xA) - (BYTE1(v63) ^ 0xA9) - 1824651526;
  v101 = (((v100 ^ 0x9714382F) - 1215064044) ^ ((v100 ^ 0x39E8E53C) + 426722561) ^ ((v100 ^ 0xC23D24E2) - 491092769))
       - 280121796;
  LODWORD(v6) = (v101 ^ 0xA56BF605) & (2 * (v101 & 0xC46BF896)) ^ v101 & 0xC46BF896;
  v102 = ((2 * (v101 ^ 0x2D2BF725)) ^ 0xD2801F66) & (v101 ^ 0x2D2BF725) ^ (2 * (v101 ^ 0x2D2BF725)) & 0x69400FB2;
  LODWORD(v6) = (v102 ^ 0x8000621) & (4 * v6) ^ v6;
  v103 = ((4 * (v102 ^ 0x29400091)) ^ 0xA5003ECC) & (v102 ^ 0x29400091) ^ (4 * (v102 ^ 0x29400091)) & 0x69400FB0;
  LODWORD(v6) = (v103 ^ 0xA1000E93) & (16 * v6) ^ v6;
  v104 = ((16 * (v103 ^ 0x48400133)) ^ 0x9400FB30) & (v103 ^ 0x48400133) ^ (16 * (v103 ^ 0x48400133)) & 0xE9400FB0;
  LODWORD(v6) = v6 ^ 0xE9400FB3 ^ (v104 ^ 0x80000B83) & ((_DWORD)v6 << 8);
  LODWORD(v6) = ((_DWORD)v6 << 16) & 0x69400000 ^ v6 ^ (((_DWORD)v6 << 16) ^ 0xFB30000) & (((v104 ^ 0x69400483) << 8) & 0xE9400000 ^ 0x29400000 ^ (((v104 ^ 0x69400483) << 8) ^ 0x400F0000) & (v104 ^ 0x69400483));
  v105 = v93 - 1;
  v106 = 1255298196
       - ((((v93 - 1) ^ 0x5856D4C5) + 780561667) ^ (((v93 - 1) ^ 0xC48F9321) - 1302385945) ^ (((v93 - 1) ^ 0x3B471E6F)
                                                                                            + 1301784489));
  LODWORD(v7) = (v106 ^ 0x6782331) & (2 * (v106 & 0x867C8BB9)) ^ v106 & 0x867C8BB9;
  v107 = ((2 * (v106 ^ 0xA283023)) ^ 0x18A97734) & (v106 ^ 0xA283023) ^ (2 * (v106 ^ 0xA283023)) & 0x8C54BB9A;
  LODWORD(v7) = (v107 ^ 0x8C00B302) & (4 * v7) ^ v7;
  v108 = ((4 * (v107 ^ 0x8454888A)) ^ 0x3152EE68) & (v107 ^ 0x8454888A) ^ (4 * (v107 ^ 0x8454888A)) & 0x8C54BB98;
  LODWORD(v7) = (v108 ^ 0x50AA02) & (16 * v7) ^ v7;
  v109 = ((16 * (v108 ^ 0x8C041192)) ^ 0xC54BB9A0) & (v108 ^ 0x8C041192) ^ (16 * (v108 ^ 0x8C041192)) & 0x8C54BB90;
  LODWORD(v7) = v7 ^ 0x8C54BB9A ^ (v109 ^ 0x8440B900) & ((_DWORD)v7 << 8);
  v110 = v106 ^ (2
               * (((_DWORD)v7 << 16) & 0xC540000 ^ v7 ^ (((_DWORD)v7 << 16) ^ 0x3B9A0000) & (((v109 ^ 0x814021A) << 8) & 0x8C540000 ^ 0x8440000 ^ (((v109 ^ 0x814021A) << 8) ^ 0x54BB0000) & (v109 ^ 0x814021A))));
  v111 = v101 ^ v105 ^ (2 * v6);
  LODWORD(v6) = v111 ^ 0x4264789B;
  v112 = -2094948827
       - (((v111 ^ 0xF4F5975E) + 1231949883) ^ ((v111 ^ 0x603C5536) - 576204205) ^ ((v111 ^ 0x37BC7C13) - 1977091208));
  v113 = (v112 ^ 0x93CC9AF2) & (2 * (v112 & 0x9BCC9AFB)) ^ v112 & 0x9BCC9AFB;
  v114 = ((2 * (v112 ^ 0x8244BE84)) ^ 0x331048FE) & (v112 ^ 0x8244BE84) ^ (2 * (v112 ^ 0x8244BE84)) & 0x1988247E;
  v115 = (v114 ^ 0x1188007D) & (4 * v113) ^ v113;
  v116 = ((4 * (v114 ^ 0x8882401)) ^ 0x662091FC) & (v114 ^ 0x8882401) ^ (4 * (v114 ^ 0x8882401)) & 0x1988247C;
  v117 = (v116 ^ 0x70) & (16 * v115) ^ v115;
  v118 = ((16 * (v116 ^ 0x19882403)) ^ 0x988247F0) & (v116 ^ 0x19882403) ^ (16 * (v116 ^ 0x19882403)) & 0x19882470;
  v119 = v117 ^ 0x1988247F ^ (v118 ^ 0x18800400) & (v117 << 8);
  v120 = (((v110 ^ 0x3E874958) - 1109615676) ^ ((v110 ^ 0xB49054C7) + 936085085) ^ ((v110 ^ 0x4E2E112) - 2017905782))
       - (((v110 ^ v6 ^ 0x61B085C9) - 487893165) ^ ((v110 ^ v6 ^ 0x1B7CC500) - 1742268516) ^ ((v110 ^ v6 ^ 0x15287AA4)
                                                                                            - 1770805184))
       + 289371000;
  LODWORD(v7) = (v120 ^ 0xC98B174F) & (2 * (v120 & 0xCDD24768)) ^ v120 & 0xCDD24768;
  v121 = ((2 * (v120 ^ 0x482B155F)) ^ 0xBF2A46E) & (v120 ^ 0x482B155F) ^ (2 * (v120 ^ 0x482B155F)) & 0x85F95236;
  LODWORD(v7) = (v121 ^ 0x81D04030) & (4 * v7) ^ v7;
  v122 = ((4 * (v121 ^ 0x84095211)) ^ 0x17E548DC) & (v121 ^ 0x84095211) ^ (4 * (v121 ^ 0x84095211)) & 0x85F95234;
  LODWORD(v7) = (v122 ^ 0x5E14000) & (16 * v7) ^ v7;
  v123 = ((16 * (v122 ^ 0x80181223)) ^ 0x5F952370) & (v122 ^ 0x80181223) ^ (16 * (v122 ^ 0x80181223)) & 0x85F95230;
  LODWORD(v7) = v7 ^ 0x85F95237 ^ (v123 ^ 0x5910207) & ((_DWORD)v7 << 8);
  v124 = v112 ^ v6 ^ v120 ^ (2
                           * ((v119 << 16) & 0x19880000 ^ v119 ^ ((v119 << 16) ^ 0x247F0000) & (((v118 ^ 0x108200F) << 8) & 0x19880000 ^ 0x11880000 ^ (((v118 ^ 0x108200F) << 8) ^ 0x88240000) & (v118 ^ 0x108200F)) ^ v7 ^ ((_DWORD)v7 << 16) & 0x5F90000 ^ (((_DWORD)v7 << 16) ^ 0x52370000) & (((v123 ^ 0x80685007) << 8) & 0x85F90000 ^ 0x4A90000 ^ (((v123 ^ 0x80685007) << 8) ^ 0x79520000) & (v123 ^ 0x80685007))));
  v125 = v50 ^ (2 * LOBYTE(STACK[0x69F0])) ^ 0x65;
  v126 = *(_DWORD *)(v87
                   + 4
                   * ((((v124 ^ 0xF2C4EE18) - 1068677673) ^ ((v124 ^ 0xB4291C60) - 2036287569) ^ ((v124 ^ 0xC972059B)
                                                                                                - 67391914))
                    - (((v105 ^ 0xA9AFCC7F) - 545294919) ^ ((v105 ^ 0xFCD6AE2A) - 1979312146) ^ ((v105 ^ 0xF2E73BDE)
                                                                                               - 2076736998))
                    + 339248318))
       + (((v105 ^ 0xFF6C9B16) + 1745617949) ^ ((v105 ^ 0xDE884B75) + 1239995520) ^ ((v105 ^ 0x13F5C4AF) - 2070586458))
       + 1767433256;
  v127 = (v126 ^ 0x80B10052) & (2 * (v126 & 0xA820211B)) ^ v126 & 0xA820211B;
  LODWORD(v6) = ((2 * (v126 ^ 0xD0F14270)) ^ 0xF1A2C6D6) & (v126 ^ 0xD0F14270) ^ (2 * (v126 ^ 0xD0F14270)) & 0x78D1636A;
  v128 = (v6 ^ 0x60800040) & (4 * v127) ^ v127;
  LODWORD(v6) = ((4 * (v6 ^ 0x8512129)) ^ 0xE3458DAC) & (v6 ^ 0x8512129) ^ (4 * (v6 ^ 0x8512129)) & 0x78D16368;
  v129 = (v6 ^ 0x60410123) & (16 * v128) ^ v128;
  LODWORD(v6) = ((16 * (v6 ^ 0x18906243)) ^ 0x8D1636B0) & (v6 ^ 0x18906243) ^ (16 * (v6 ^ 0x18906243)) & 0x78D16360;
  v130 = v129 ^ 0x78D1636B ^ (v6 ^ 0x810224B) & (v129 << 8);
  LODWORD(v7) = (v130 << 16) & 0x78D10000 ^ v130 ^ ((v130 << 16) ^ 0x636B0000) & (((v6 ^ 0x70C1414B) << 8) & 0x78D10000 ^ 0x28900000 ^ (((v6 ^ 0x70C1414B) << 8) ^ 0x51630000) & (v6 ^ 0x70C1414B));
  v131 = BYTE2(v63);
  v132 = (BYTE2(v63) ^ 0x82C410A1 | 0xB1107225) - (BYTE2(v63) ^ 0x82C410A1 | 0x4EEF8DDA) + 1324322266;
  v133 = 626916103
       - (((v132 ^ 0x929FA522) + 1453271279) ^ ((v132 ^ 0xE1AF09A6) + 632259691) ^ ((v132 ^ 0x40E4CEA3) - 2065415312));
  LODWORD(v6) = (v133 ^ 0xCA64F0C4) & (2 * (v133 & 0xD276F4E5)) ^ v133 & 0xD276F4E5;
  v134 = ((2 * (v133 ^ 0x4E887184)) ^ 0x39FD0AC2) & (v133 ^ 0x4E887184) ^ (2 * (v133 ^ 0x4E887184)) & 0x9CFE8560;
  LODWORD(v6) = (v134 ^ 0x18FC0000) & (4 * v6) ^ v6;
  v135 = ((4 * (v134 ^ 0x84028521)) ^ 0x73FA1584) & (v134 ^ 0x84028521) ^ (4 * (v134 ^ 0x84028521)) & 0x9CFE8560;
  LODWORD(v6) = (v135 ^ 0x10FA0501) & (16 * v6) ^ v6;
  v136 = ((16 * (v135 ^ 0x8C048061)) ^ 0xCFE85610) & (v135 ^ 0x8C048061) ^ (16 * (v135 ^ 0x8C048061)) & 0x9CFE8560;
  v137 = v136 ^ 0x10168161;
  v138 = v6 ^ 0x9CFE8561 ^ (v136 ^ 0x8CE80400) & ((_DWORD)v6 << 8);
  LODWORD(v6) = (v137 << 8) & 0x9CFE0000 ^ 0x7A0000 ^ ((v137 << 8) ^ 0xFE850000) & v137;
  v139 = *(_DWORD *)&v76[4 * ((LODWORD(STACK[0x6A00]) ^ (LODWORD(STACK[0x6A00]) >> 2) & 0x30) ^ 0x87)]
       - 1945910225;
  v140 = (v139 ^ 0xC4312E8F) & (2 * (v139 & 0x86B84E00)) ^ v139 & 0x86B84E00;
  v141 = ((2 * (v139 ^ 0xC8612E8F)) ^ 0x9DB2C11E) & (v139 ^ 0xC8612E8F) ^ (2 * (v139 ^ 0xC8612E8F)) & 0x4ED9608E;
  v142 = (v141 ^ 0x4C884081) & (4 * v140) ^ v140;
  v143 = ((4 * (v141 ^ 0x42492081)) ^ 0x3B65823C) & (v141 ^ 0x42492081) ^ (4 * (v141 ^ 0x42492081)) & 0x4ED9608C;
  v144 = v142 ^ 0x4ED9608F ^ (v143 ^ 0xA410000) & (16 * v142);
  v145 = (16 * (v143 ^ 0x44986083)) & 0x4ED96080 ^ 0x249600F ^ ((16 * (v143 ^ 0x44986083)) ^ 0xED9608F0) & (v143 ^ 0x44986083);
  v146 = (v144 << 8) & 0x4ED96000 ^ v144 ^ ((v144 << 8) ^ 0xD9608F00) & v145;
  v147 = v139 ^ (2
               * ((v146 << 16) & 0x4ED90000 ^ v146 ^ ((v146 << 16) ^ 0x608F0000) & ((v145 << 8) & 0x4ED90000 ^ 0x6990000 ^ ((v145 << 8) ^ 0x59600000) & v145)));
  v148 = (v131 ^ 0xC2 | 0x98F17D50) - (v131 ^ 0xC2 | 0x670E82AF) + 1729004207;
  v149 = (((v148 ^ 0xE67EA438) + 60684743) ^ ((v148 ^ 0x7B9E34D) - 497369420) ^ ((v148 ^ 0x86C9C567) + 1663735962))
       - 1377444212;
  v150 = (v149 ^ 0xCE897251) & (2 * (v149 & 0xCF2C4264)) ^ v149 & 0xCF2C4264;
  v151 = ((2 * (v149 ^ 0xC2C17219)) ^ 0x1BDA60FA) & (v149 ^ 0xC2C17219) ^ (2 * (v149 ^ 0xC2C17219)) & 0xDED307C;
  v152 = (v151 ^ 0x9C40035) & (4 * v150) ^ v150;
  v153 = ((4 * (v151 ^ 0x4251005)) ^ 0x37B4C1F4) & (v151 ^ 0x4251005) ^ (4 * (v151 ^ 0x4251005)) & 0xDED307C;
  v154 = (v153 ^ 0x5A40069) & (16 * v152) ^ v152;
  v155 = ((16 * (v153 ^ 0x8493009)) ^ 0xDED307D0) & (v153 ^ 0x8493009) ^ (16 * (v153 ^ 0x8493009)) & 0xDED3070;
  v156 = v154 ^ 0xDED307D ^ (v155 ^ 0xCC1002D) & (v154 << 8);
  v157 = v133 ^ v132 ^ v149 ^ (2
                             * (v138 ^ v156 ^ (v156 << 16) & 0xDED0000 ^ (v138 << 16) & 0x1CFE0000 ^ ((v138 << 16) ^ 0x5610000) & v6 ^ ((v156 << 16) ^ 0x307D0000) & (((v155 ^ 0x12C302D) << 8) & 0xDED0000 ^ 0xCD0000 ^ (((v155 ^ 0x12C302D) << 8) ^ 0x6D300000) & (v155 ^ 0x12C302D))));
  v158 = (((v157 ^ 0x2DA2863E) + 474086824) ^ ((v157 ^ 0x90AFD321) - 1588811591) ^ ((v157 ^ 0xB9BEEB81) - 2007134183))
       - 894485548;
  LODWORD(v7) = *(_DWORD *)(v96 + 4 * v125) ^ *(_DWORD *)&v95[4 * (v64 ^ 0x3B)] ^ v94 ^ v99 ^ v28 ^ v126 ^ (2 * v7);
  v159 = (-2037987623
        - ((v147 >> 1) & 0x7065B199 ^ 0x3060B091)
        + ((2 * ((v147 >> 1) & 0x7065B199 ^ 0x3060B091)) & 0xE0C26032)
        + 203) ^ 0xB426F7DC;
  LODWORD(v6) = v159 - ((2 * v159) & 0x43F2474E) + 637086631;
  v160 = *(_DWORD *)&v76[4
                       * (v33 ^ 0xE8 ^ (((((v33 >> 2) & 0x20)
                                                                          + ((v33 >> 2) & 0x30 ^ 0x20)) | 0x80)
                                                                        - (((v33 >> 2) & 0x30 ^ 0x20) & 0x20)))]
       - 1945910225;
  v161 = (v160 ^ 0xC4370D16) & (2 * (v160 & 0x86B84E00)) ^ v160 & 0x86B84E00;
  v162 = ((2 * (v160 ^ 0xCC579916)) ^ 0x95DFAE2C) & (v160 ^ 0xCC579916) ^ (2 * (v160 ^ 0xCC579916)) & 0x4AEFD716;
  v163 = (v162 ^ 0x40C30110) & (4 * v161) ^ v161;
  v164 = ((4 * (v162 ^ 0x4A205112)) ^ 0x2BBF5C58) & (v162 ^ 0x4A205112) ^ (4 * (v162 ^ 0x4A205112)) & 0x4AEFD714;
  v165 = (v164 ^ 0xAAF5406) & (16 * v163) ^ v163;
  v166 = ((16 * (v164 ^ 0x40408306)) ^ 0xAEFD7160) & (v164 ^ 0x40408306) ^ (16 * (v164 ^ 0x40408306)) & 0x4AEFD710;
  v167 = v165 ^ 0x4AEFD716 ^ (v166 ^ 0xAED5100) & (v165 << 8);
  v168 = v160 ^ (2
               * ((v167 << 16) & 0x4AEF0000 ^ v167 ^ ((v167 << 16) ^ 0x57160000) & (((v166 ^ 0x40028616) << 8) & 0x4AEF0000 ^ 0x280000 ^ (((v166 ^ 0x40028616) << 8) ^ 0x6FD70000) & (v166 ^ 0x40028616))));
  v169 = BYTE1(LODWORD(STACK[0x6A10]));
  v170 = (((2 * (v169 ^ 0x33)) | 0xC4227864) - (v169 ^ 0x33) - 1645296690) ^ 0x62293D72;
  v171 = v170 - ((2 * v170) & 0x7C4DB49A) + 1042733645;
  v172 = (-1283240529
        - ((v168 >> 1) & 0x7065B199 ^ 0x40211119 | 0xB3834DAF)
        + ((v168 >> 1) & 0x7065B199 ^ 0x40211119 | 0x4C7CB250)) ^ 0x4C789251;
  v173 = -1343991509 - v172 + ((2 * v172) & 0xA0375DA8);
  v174 = *(_DWORD *)(v87 + 4 * (v169 ^ 0xE6u))
       - (((v171 ^ 0x13F2FE67) - 2142844452) ^ ((v171 ^ 0x64493C1A) - 134411353) ^ ((v171 ^ 0x23D5AB82) - 1335780289))
       - 160372220;
  v175 = ((2 * (v174 & 0x88540549)) & 0xA80812 | v174 & 0x88540549) ^ (2 * (v174 & 0x88540549)) & (v174 ^ 0xE3BE993F);
  v176 = ((2 * (v174 ^ 0xE3BE993F)) ^ 0xD7D538EC) & (v174 ^ 0xE3BE993F) ^ (2 * (v174 ^ 0xE3BE993F)) & 0x6BEA9C76;
  v177 = (v176 ^ 0x4BCA9876) & (4 * v175) ^ v175;
  v178 = ((4 * (v176 ^ 0x282A8412)) ^ 0xAFAA71D8) & (v176 ^ 0x282A8412) ^ (4 * (v176 ^ 0x282A8412)) & 0x6BEA9C74;
  v179 = (v178 ^ 0x2BAA1050) & (16 * v177) ^ v177;
  v180 = ((16 * (v178 ^ 0x40408C26)) ^ 0xBEA9C760) & (v178 ^ 0x40408C26) ^ (16 * (v178 ^ 0x40408C26)) & 0x6BEA9C70;
  v181 = v179 ^ 0x6BEA9C76 ^ (v180 ^ 0x2AA88400) & (v179 << 8);
  v182 = *(_DWORD *)&v95[4 * v158] ^ *(_DWORD *)(v96
                                               + 4
                                               * ((LODWORD(STACK[0x6A30]) ^ (2 * LOBYTE(STACK[0x6A80]))) ^ 0x57u)) ^ v174 ^ v147 ^ (2 * ((v181 << 16) & 0x6BEA0000 ^ v181 ^ ((v181 << 16) ^ 0x1C760000) & (((v180 ^ 0x41421816) << 8) & 0x6BEA0000 ^ 0x1620000 ^ (((v180 ^ 0x41421816) << 8) ^ 0x6A9C0000) & (v180 ^ 0x41421816)))) ^ v6 ^ 0x8B68AE80;
  LOBYTE(v174) = ((-(~(_BYTE)v7 & 8) - 65) & 0xE6 ^ 0x40)
               + ((-(~(_BYTE)v7 & 8) - 65) ^ 0xB7)
               - (((-(~(_BYTE)v7 & 8) - 65) ^ 0xB7) & 0xE0);
  v183 = *(_DWORD *)(v87 + 4 * (LODWORD(STACK[0x6A20]) ^ 0x64u))
       + (((LODWORD(STACK[0x6A20]) ^ 0x38328CF3) - 844330454) ^ ((LODWORD(STACK[0x6A20]) ^ 0xAC840A3)
                                                                                - 11123078) ^ ((LODWORD(STACK[0x6A20]) ^ 0xA77581EC)
                                                                                             + 1391167287))
       + 527037072;
  v184 = (v183 ^ 0x266F5B0A) & (2 * (v183 & 0x376F5313)) ^ v183 & 0x376F5313;
  v185 = ((2 * (v183 ^ 0x2EBB592E)) ^ 0x33A8147A) & (v183 ^ 0x2EBB592E) ^ (2 * (v183 ^ 0x2EBB592E)) & 0x19D40A3C;
  v186 = (v185 ^ 0x11800219) & (4 * v184) ^ v184;
  v187 = ((4 * (v185 ^ 0x8540A05)) ^ 0x675028F4) & (v185 ^ 0x8540A05) ^ (4 * (v185 ^ 0x8540A05)) & 0x19D40A3C;
  v188 = (v187 ^ 0x1500839) & (16 * v186) ^ v186;
  v189 = ((16 * (v187 ^ 0x18840209)) ^ 0x9D40A3D0) & (v187 ^ 0x18840209) ^ (16 * (v187 ^ 0x18840209)) & 0x19D40A30;
  v190 = v188 ^ 0x19D40A3D ^ (v189 ^ 0x19400200) & (v188 << 8);
  LODWORD(v3) = (v190 << 16) & 0x19D40000 ^ v190 ^ ((v190 << 16) ^ 0xA3D0000) & (((v189 ^ 0x94082D) << 8) & 0x19D40000 ^ 0x9D40000 ^ (((v189 ^ 0x94082D) << 8) ^ 0x540A0000) & (v189 ^ 0x94082D));
  LODWORD(v192) = __ROR4__(v97, 13) ^ 0xCBE579D1;
  HIDWORD(v192) = v192;
  v191 = v192 >> 19;
  LOBYTE(v97) = v171 & 0x10;
  v193 = (v7 ^ 0x7EAE6FC1) >> (v171 & 0x10 ^ 0x10);
  v194 = ((BYTE3(v7) ^ 0xA0C6DE5C) - 582448612) ^ ((BYTE3(v7) ^ 0x7BDF8BCA) + 106028942) ^ ((BYTE3(v7) ^ 0xDB1955E8)
                                                                                          - 1500053072);
  v195 = v193 >> v97;
  v196 = *(_DWORD *)(v96 + 4 * ((LODWORD(STACK[0x6A40]) ^ (2 * LOBYTE(STACK[0x6A50]))) ^ 0xBEu)) ^ *(_DWORD *)&v95[4 * ((LODWORD(STACK[0x6A60]) ^ (LODWORD(STACK[0x6A60]) >> 3) ^ (LODWORD(STACK[0x6A60]) >> 2)) ^ 0xD0)] ^ v168 ^ v173 ^ v183 ^ (2 * (_DWORD)v3);
  v197 = (((v196 ^ 0xDF1790B8) - 11831539) ^ ((v196 ^ 0xDAA081D4) - 84122015) ^ ((v196 ^ 0x19E0AE0E) + 968640955))
       - 755891080;
  v198 = (v197 ^ 0x37E00F4D) & (2 * (v197 & 0xB7C80E51)) ^ v197 & 0xB7C80E51;
  LODWORD(v19) = ((2 * (v197 ^ 0x7860074F)) ^ 0x9F50123C) & (v197 ^ 0x7860074F) ^ (2 * (v197 ^ 0x7860074F)) & 0xCFA8091E;
  v199 = (v19 ^ 0x8F00000C) & (4 * v198) ^ v198;
  LODWORD(v19) = ((4 * (v19 ^ 0x40A80902)) ^ 0x3EA02478) & (v19 ^ 0x40A80902) ^ (4 * (v19 ^ 0x40A80902)) & 0xCFA8091C;
  v200 = (v19 ^ 0xEA00016) & (16 * v199) ^ v199;
  LODWORD(v19) = ((16 * (v19 ^ 0xC1080906)) ^ 0xFA8091E0) & (v19 ^ 0xC1080906) ^ (16 * (v19 ^ 0xC1080906)) & 0xCFA80910;
  v201 = v19 ^ 0x528081E;
  LODWORD(v19) = v200 ^ 0xCFA8091E ^ (v19 ^ 0xCA80011E) & (v200 << 8);
  LODWORD(v3) = 899349627
              - (((v196 ^ 0xDC8FDD23) - 282282566) ^ ((v196 ^ 0x74F57F42) + 1196824537) ^ ((v196 ^ 0x8D178963)
                                                                                         - 1095441926));
  v202 = (v3 ^ 0xF433669C) & (2 * (v3 & 0xE133471E)) ^ v3 & 0xE133471E;
  v203 = ((2 * (v3 ^ 0xB411EEB8)) ^ 0xAA45534C) & (v3 ^ 0xB411EEB8) ^ (2
                                                                                                 * (v3 ^ 0xB411EEB8)) & 0x5522A9A6;
  v204 = (v203 ^ 0x50208000) & (4 * v202) ^ v202;
  v205 = ((4 * (v203 ^ 0x5522A8A2)) ^ 0x548AA698) & (v203 ^ 0x5522A8A2) ^ (4 * (v203 ^ 0x5522A8A2)) & 0x5522A9A4;
  v206 = (v205 ^ 0x5402A086) & (16 * v204) ^ v204;
  v207 = ((16 * (v205 ^ 0x1200926)) ^ 0x522A9A60) & (v205 ^ 0x1200926) ^ (16 * (v205 ^ 0x1200926)) & 0x5522A9A0;
  v208 = v206 ^ 0x5522A9A6 ^ (v207 ^ 0x50228886) & (v206 << 8);
  v209 = v3 ^ v196 ^ v197 ^ (2
                                         * (v208 ^ v19 ^ ((_DWORD)v19 << 16) & 0x4FA80000 ^ (v208 << 16) & 0x55220000 ^ ((v208 << 16) ^ 0x29A60000) & (((v207 ^ 0x5002186) << 8) & 0x55220000 ^ 0x55020000 ^ (((v207 ^ 0x5002186) << 8) ^ 0x22A90000) & (v207 ^ 0x5002186)) ^ (((_DWORD)v19 << 16) ^ 0x91E0000) & ((v201 << 8) & 0xCFA80000 ^ 0x47A00000 ^ ((v201 << 8) ^ 0x28090000) & v201)));
  v210 = (((v209 ^ 0x4B998669) - 553546860) ^ ((v209 ^ 0xCF6B4395) + 1542671984) ^ ((v209 ^ 0xD225E6C1) + 1186851644))
       + 1076012972;
  v211 = (v210 ^ 0xB0035402) & (2 * (v210 & 0xC453952B)) ^ v210 & 0xC453952B;
  v212 = ((2 * (v210 ^ 0x30035456)) ^ 0xE8A182FA) & (v210 ^ 0x30035456) ^ (2 * (v210 ^ 0x30035456)) & 0xF450C17C;
  v213 = (v212 ^ 0x24008079) & (4 * v211) ^ v211;
  v214 = ((4 * (v212 ^ 0x14504105)) ^ 0xD14305F4) & (v212 ^ 0x14504105) ^ (4 * (v212 ^ 0x14504105)) & 0xF450C17C;
  v215 = (v214 ^ 0xD0400179) & (16 * v213) ^ v213;
  v216 = ((16 * (v214 ^ 0x2410C009)) ^ 0x450C17D0) & (v214 ^ 0x2410C009) ^ (16 * (v214 ^ 0x2410C009)) & 0xF450C170;
  v217 = v215 ^ 0xF450C17D ^ (v216 ^ 0x4400012D) & (v215 << 8);
  LODWORD(v19) = v210 ^ (2
                       * ((v217 << 16) & 0x74500000 ^ v217 ^ ((v217 << 16) ^ 0x417D0000) & (((v216 ^ 0xB050C02D) << 8) & 0x74500000 ^ 0x24100000 ^ (((v216 ^ 0xB050C02D) << 8) ^ 0x50C10000) & (v216 ^ 0xB050C02D))));
  LODWORD(v192) = __ROR4__(v182, 26) ^ 0x217818DD;
  HIDWORD(v192) = v192;
  v218 = v192 >> 6;
  v219 = (BYTE1(v218) ^ 0xCC) - 2 * ((BYTE1(v218) ^ 0xCC) & 0xF) - 274623985;
  v220 = (v219 & 0x8820014D ^ 0x540040) + (v219 ^ 0xEF20819F) - ((v219 ^ 0xEF20819F) & 0x81114D);
  v221 = *(_DWORD *)&v76[4 * (HIBYTE(v191) ^ 9)] - 1945910225;
  v222 = (v221 ^ 0x66370EC8) & (2 * (v221 & 0x86B84E00)) ^ v221 & 0x86B84E00;
  LODWORD(v3) = ((2 * (v221 ^ 0x62470EC8)) ^ 0xC9FE8190) & (v221 ^ 0x62470EC8) ^ (2 * (v221 ^ 0x62470EC8)) & 0xE4FF40C8;
  v223 = (v3 ^ 0xE20048) & (4 * v222) ^ v222;
  LODWORD(v3) = ((4 * (v3 ^ 0x24014048)) ^ 0x93FD0320) & (v3 ^ 0x24014048) ^ (4 * (v3 ^ 0x24014048)) & 0xE4FF40C8;
  v224 = (v3 ^ 0x80FD0000) & (16 * v223) ^ v223;
  LODWORD(v3) = ((16 * (v3 ^ 0x640240C8)) ^ 0x4FF40C80) & (v3 ^ 0x640240C8) ^ (16 * (v3 ^ 0x640240C8)) & 0xE4FF40C0;
  v225 = v224 ^ 0xE4FF40C8 ^ (v3 ^ 0x44F40000) & (v224 << 8);
  v226 = v221 ^ (2
               * ((v225 << 16) & 0x64FF0000 ^ v225 ^ ((v225 << 16) ^ 0x40C80000) & (((v3 ^ 0xA00B4048) << 8) & 0xE4FF0000 ^ 0xBF0000 ^ (((v3 ^ 0xA00B4048) << 8) ^ 0xFF400000) & (v3 ^ 0xA00B4048))));
  v227 = (((v220 ^ 0x2D61C6A0) + 610129289) ^ ((v220 ^ 0x8E053D96) - 2026295617) ^ ((v220 ^ 0xBE9FB417) - 1214011584))
       + *(_DWORD *)(v87
                   + 4
                   * (((BYTE1(v218) ^ 0x44201125) + 1240567976 - ((2 * (BYTE1(v218) ^ 0x44201125)) & 0x80402150)) ^ 0xDD18165));
  v228 = *(_DWORD *)&v95[4
                       * (((v195 ^ 0x78)
                         + (v195 & 0x4C ^ 0xB04)
                         - ((v195 ^ 0x78) & 0x4C)) ^ 0xBE8)] ^ (v226 >> 1) & 0x7065B199 ^ (v227 - 2 * ((v227 + 572732672) & 0x70024F7F ^ v227 & 1) - 1843035010) ^ 0xD24DABB5;
  v229 = v194
       - 2106483605
       + ((2 * (_BYTE)v194 + 64) & 0x1E ^ (4
                                         * ((7 - v194) & (2 * v194 + 64) & 4 ^ v194 & 6)) ^ 0xFFFFFFF3);
  v230 = (HIWORD(v218) & 0xF8 ^ 0xB39) + (HIWORD(v218) & 7) - 1;
  v231 = (v228 - 518388681 - ((2 * v228) & 0xC234086E)) ^ *(_DWORD *)(v96 + 4 * (v19 ^ 0x6Fu));
  v232 = (v231 - ((2 * v231) & 0x65DDDB76) - 1292964421) ^ v226;
  v233 = (v230 ^ 0xBA9) + (v230 ^ 0xAA3996B9) - 2 * ((v230 ^ 0xBA9) & (v230 ^ 0xAA3996B9));
  v234 = ((BYTE1(v19) ^ 0xC0) + ((v19 >> 8) & 0x78 ^ 0x31D33338) - ((BYTE1(v19) ^ 0xC0) & 0x78)) ^ 0x3B077979;
  v235 = ((2 * (BYTE1(v19) ^ 0x37)) | 0xBE53A624) - (BYTE1(v19) ^ 0x37) - 1596576530;
  HIDWORD(v192) = v233;
  LODWORD(v192) = v233;
  v236 = ((v235 & 0xD0627B34 ^ 0x80427804) + (v235 ^ 0x5C298732) - ((v235 ^ 0x5C298732) & 0xD0627B34)) ^ 0xD3622FAB;
  v237 = v76;
  v238 = *(_DWORD *)&v76[4 * v229 + 15788] + 314315311;
  v239 = (v238 >> 1) & 0x7065B199 ^ __ROR4__(((v192 >> 5) - ((2 * (v192 >> 5)) & 0x44F9B38A) - 1568876091) ^ __ROR4__(*(_DWORD *)&v95[4 * ((((2 * (BYTE2(v218) ^ 0x25282097)) & 0x42504038) - (BYTE2(v218) ^ 0x25282097) + 1455642851) ^ 0x73EB7839)], 5) ^ 0x71D7352D, 27) ^ (*(_DWORD *)(v87 + 4 * v236)+ ((v234 - 707854960 - ((2 * v234) & 0x188BB20)) ^ 0x4A95FA01)- 1226141430);
  v240 = ((v191 ^ 0xD9) + (v191 & 0xD5 ^ 0xEE8E4904) - ((v191 ^ 0xD9) & 0xD5)) ^ 0xEE9650D1;
  v241 = (915633800 - v240 + ((2 * v240) | 0x92D90AE4) + 1030) ^ 0xC9749CE9;
  LODWORD(v3) = *(_DWORD *)&v76[4 * (HIBYTE(v218) ^ 0x3E)];
  v242 = ((2 * (v3 ^ 0xCD3D3AC)) ^ 0x9F1FE958) & (v3 ^ 0xCD3D3AC) ^ (2
                                                                                               * (v3 ^ 0xCD3D3AC)) & 0xCF8FF4AC;
  v243 = v242 ^ 0x408014A4;
  v244 = 2 * (v3 & 0xC35C2700);
  v245 = (v242 ^ 0x4F01A0A4) & (4 * (v244 & (v3 ^ 0x8A5B97AC) ^ v3 & 0xC35C2700)) ^ v244 & (v3 ^ 0x8A5B97AC) ^ v3 & 0xC35C2700;
  v246 = ((4 * v243) ^ 0x3E3FD2B0) & v243 ^ (4 * v243) & 0xCF8FF4AC;
  v247 = (v246 ^ 0xE0FD0A0) & (16 * v245) ^ v245;
  v248 = ((16 * (v246 ^ 0xC180240C)) ^ 0xF8FF4AC0) & (v246 ^ 0xC180240C) ^ (16 * (v246 ^ 0xC180240C)) & 0xCF8FF4A0;
  v249 = v247 ^ 0xCF8FF4AC ^ (v248 ^ 0xC88F4000) & (v247 << 8);
  v250 = v3 ^ (2
                           * ((v249 << 16) & 0x4F8F0000 ^ v249 ^ ((v249 << 16) ^ 0x74AC0000) & (((v248 ^ 0x700B42C) << 8) & 0x4F8F0000 ^ 0x400B0000 ^ (((v248 ^ 0x700B42C) << 8) ^ 0xFF40000) & (v248 ^ 0x700B42C)))) ^ 0x9A042577;
  LODWORD(v24) = ((2 * (v3 ^ 0x12CEDC0B)) ^ 0xA325F616) & (v3 ^ 0x12CEDC0B) ^ (2 * (v3 ^ 0x12CEDC0B)) & 0xD192FB0A;
  v251 = (v24 ^ 0x4102B109) & (4 * (v244 & (v3 ^ 0x925E960B) ^ v3 & 0xC35C2700)) ^ v244 & (v3 ^ 0x925E960B) ^ v3 & 0xC35C2700;
  LODWORD(v24) = ((4 * (v24 ^ 0x50920909)) ^ 0x464BEC2C) & (v24 ^ 0x50920909) ^ (4 * (v24 ^ 0x50920909)) & 0xD192FB08;
  v252 = (v24 ^ 0x4002E800) & (16 * v251) ^ v251;
  LODWORD(v24) = ((16 * (v24 ^ 0x91901303)) ^ 0x192FB0B0) & (v24 ^ 0x91901303) ^ (16 * (v24 ^ 0x91901303)) & 0xD192FB00;
  v253 = v252 ^ 0xD192FB0B ^ (v24 ^ 0x1102B000) & (v252 << 8);
  v254 = v239 - 518388681 - ((2 * v239) & 0xC234086E);
  v255 = *(_DWORD *)(v96 + 4 * v241) ^ v238;
  LODWORD(v3) = (((4
                 * ((v253 << 16) & 0x1820000 ^ v253 ^ ((v253 << 16) ^ 0x3B0B0000) & (((v24 ^ 0xC0904B0B) << 8) & 0x11920000 ^ (((v24 ^ 0xC0904B0B) << 8) ^ 0x12FB0000) & (v24 ^ 0xC0904B0B) ^ 0x1000000))) ^ (2 * (_DWORD)v3)) & 0x9EBFD65E ^ 0x84BB820C)
              + v250;
  v256 = ((v191 ^ 0x672C8F8) >> ((v174 ^ 0x1C) & 0x10 ^ 0x10) >> ((v174 ^ 0x1C) & 0xEF ^ 0xEA) >> ((v174 ^ 0x28) & 0xD2 ^ 0xC2) >> ((v174 ^ 0x28) & 0x2D ^ 4));
  v257 = (202008990 - (v7 ^ 0xA2C80097 | 0xC0A699E) + (v7 ^ 0xA2C80097 | 0xF3F59661)) ^ 0x513D9689;
  v258 = (1110361411 - (v3 & 0x80490202) + ((v3 >> 1) & 0x7065B199)) ^ (*(_DWORD *)(v87 + 4 * (v256 ^ 0x9Fu))
                                                                                                  - 1226141430
                                                                                                  + ((((2 * (v256 ^ 0x820302B)) | 0x1B345416) - (v256 ^ 0x820302B) - 228207115) ^ 0x90355767)) ^ *(_DWORD *)&v95[4 * (BYTE2(v19) ^ 0x8E)];
  LODWORD(v7) = BYTE1(v7);
  v259 = (v7 ^ 0x12C5492E) - ((2 * (v7 ^ 0x12C5492E)) & 0x248A12E8) + 2138016116;
  LODWORD(v7) = ((v7 ^ 0xBB) + 206508592 - ((2 * (v7 ^ 0xBB)) & 0xAC) + 1318) ^ 0x6D4F1756;
  v260 = (-1230714799 - v7 + ((2 * v7) & 0x82002F5C)) ^ 0xD7A4C81A;
  v261 = v3 ^ *(_DWORD *)(v96 + 4 * v257) ^ (v258 - 518388681 - ((2 * v258) & 0xC234086E));
  v262 = *(_DWORD *)&v76[4 * (BYTE3(v19) ^ 0xA3)] + 314315311;
  v263 = (v232 ^ 0x4484FE19) >> (STACK[0x6A90] & 0x10) >> (STACK[0x6A90] & 0x10 ^ 0x10);
  if ((v261 & 0x400000) != 0)
    v265 = -4194304;
  else
    v265 = 0x400000;
  v266 = (v265 + (v261 ^ 0xAA399D10)) ^ 0x2ABE9F05;
  v264 = (1110361411 - (v262 & 0x80490202) + ((v262 >> 1) & 0x7065B199)) ^ *(_DWORD *)&v95[4 * (BYTE2(v191) ^ 0xAE)] ^ (*(_DWORD *)(v87 + 4 * v260) + (v259 ^ 0xF8258D72) - 1226141430);
  v267 = *(_DWORD *)(v96 + 4 * (v218 ^ 0xA4u)) ^ v262 ^ (v264 - 518388681 - ((2 * v264) & 0xC234086E));
  v268 = v255 ^ v254;
  v269 = v255 ^ v254 ^ 0xF07DE889;
  v270 = *(_DWORD *)&v76[4 * (HIBYTE(v232) ^ 0x4B)] + 314315311;
  v271 = v255 ^ ~v254;
  v272 = BYTE2(v269) ^ 0xDC;
  if (((BYTE2(v269) - 1) & ~BYTE2(v269) & 0x80) != 0)
    v272 = 220;
  v273 = (1110361411 - (v270 & 0x80490202) + ((v270 >> 1) & 0x7065B199)) ^ (*(_DWORD *)(v87 + 4
                                                                                            * (BYTE1(v266) ^ 0x9Fu))
                                                                          + (BYTE1(v266) ^ 0x958F4D47)
                                                                          - 1226141430) ^ *(_DWORD *)&v95[4 * v272];
  v274 = *(_DWORD *)(v96 + 4 * v267) ^ v270 ^ (v273 - 518388681 - ((2 * v273) & 0xC234086E));
  v275 = *(_DWORD *)&v76[4 * HIBYTE(v271)] + 314315311;
  v276 = HIBYTE(v266);
  if (!((BYTE2(v266) + 8) | BYTE2(v266)))
    v276 = STACK[0x6A70];
  v277 = (1110361411 - (v275 & 0x80490202) + ((v275 >> 1) & 0x7065B199)) ^ *(_DWORD *)&v95[4 * (BYTE2(v266) ^ 0xDC)] ^ (*(_DWORD *)(v87 + 4 * (BYTE1(v267) ^ 0xA4u)) + (BYTE1(v267) ^ 0x958F4D7C) - 1226141430);
  v278 = *(_DWORD *)(v96 + 4 * (v232 ^ 0xA7u)) ^ v275 ^ (v277 - 518388681 - ((2 * v277) & 0xC234086E));
  v279 = *(_DWORD *)&v76[4 * (v276 ^ 0xF)] + 314315311;
  v280 = (1110361411 - (v279 & 0x80490202) + ((v279 >> 1) & 0x7065B199)) ^ *(_DWORD *)&v95[4 * (BYTE2(v267) ^ 0xDF)] ^ (*(_DWORD *)(v87 + 4 * (((unsigned __int16)(((v232 ^ 0xFE19) & 0x3C) + (v232 ^ 0xFE25)) >> 8) ^ 0x9Fu)) + (((unsigned __int16)(((v232 ^ 0xFE19) & 0x3C) + (v232 ^ 0xFE25)) >> 8) ^ 0x958F4D47) - 1226141430);
  v281 = *(_DWORD *)(v96 + 4 * (v268 ^ 0x37u)) ^ v279 ^ (v280 - 518388681 - ((2 * v280) & 0xC234086E));
  v282 = *(_DWORD *)(v87 + 4 * (BYTE1(v269) ^ 0x9Fu)) + (BYTE1(v269) ^ 0x958F4D47) - 1226141430;
  v283 = ((v232 ^ 0x4484FE19) >> (STACK[0x6A90] & 0x10) >> (STACK[0x6A90] & 0x10 ^ 0x10));
  if (v283 >= 0xA6)
    v283 = ((v232 ^ 0x4484FE19) >> (STACK[0x6A90] & 0x10) >> (STACK[0x6A90] & 0x10 ^ 0x10)) - 166;
  LOBYTE(v284) = v263 + 90;
  if (((v232 ^ 0x4484FE19) >> (STACK[0x6A90] & 0x10) >> (STACK[0x6A90] & 0x10 ^ 0x10)) < 0xA6u)
    v284 = (v232 ^ 0x4484FE19) >> (STACK[0x6A90] & 0x10) >> (STACK[0x6A90] & 0x10 ^ 0x10);
  if (v283)
    v285 = 0;
  else
    v285 = v284;
  v286 = *(_DWORD *)&v76[4
                       * (((HIBYTE(v267) ^ 0xE ^ -(HIBYTE(v267) ^ 0xE) ^ ((HIBYTE(v267) ^ 0xEE63061C) + 295500270))
                         + 295500269) ^ 0x119CF9E2)]
       + 314315311;
  v287 = (1110361411 - (v286 & 0x80490202) + ((v286 >> 1) & 0x7065B199)) ^ *(_DWORD *)&v95[4
                                                                                         * ((v263 - v285) ^ 0xDC)] ^ v282;
  v288 = *(_DWORD *)(v96 + 4 * (v261 ^ 0xABu)) ^ v286 ^ (v287 - 518388681 - ((2 * v287) & 0xC234086E));
  v289 = *(_DWORD *)&v76[4 * (HIBYTE(v274) ^ 0x89)] + 314315311;
  v290 = (1110361411 - (v289 & 0x80490202) + ((v289 >> 1) & 0x7065B199)) ^ *(_DWORD *)&v95[4 * (BYTE2(v278) ^ 0xEA)] ^ (*(_DWORD *)(v87 + 4 * (((unsigned __int16)(v281 ^ 0xD24A) >> 8) ^ 0x9Fu)) + (((unsigned __int16)(v281 ^ 0xD24A) >> 8) ^ 0x958F4D47) - 1226141430);
  v291 = *(_DWORD *)(v96 + 4 * (v288 ^ 0x6Eu)) ^ v289 ^ (v290 - 518388681 - ((2 * v290) & 0xC234086E));
  v292 = ((v281 ^ 0x6BC9D24A) >> 16);
  v293 = (v292 ^ 0xAA399D10) + v292 - 2 * ((v292 ^ 0xAA399D10) & v292);
  v294 = *(_DWORD *)&v76[4 * (HIBYTE(v278) ^ 6)] + 314315311;
  v295 = (v294 >> 1) & 0x7065B199 ^ *(_DWORD *)&v95[4 * (v292 ^ 0xDC)] ^ (v293
                                                                        + 1110361411
                                                                        + ((2 * v293) & 0xA86 ^ 0xFBAEFFFF)
                                                                        + 1) ^ (*(_DWORD *)(v87
                                                                                          + 4
                                                                                          * (((unsigned __int16)(v288 ^ 0x266E) >> 8) ^ 0x9Fu))
                                                                              + (((unsigned __int16)(v288 ^ 0x266E) >> 8) ^ 0x958F4D47)
                                                                              - 1226141430);
  v296 = *(_DWORD *)(v96 + 4 * (v274 ^ 0x21u)) ^ v294 ^ (v295 - 518388681 - ((2 * v295) & 0xC234086E));
  v297 = (v288 ^ 0x87F2266E) >> 24;
  v298 = BYTE1(v274) ^ 0x6A70B245;
  LODWORD(STACK[0x6A90]) = v298;
  v299 = *(_DWORD *)&v76[4 * (((v281 ^ 0x6BC9D24A) >> 24) - (((v281 ^ 0x6BC9D24A) >> 23) & 0x1E)) + 60] + 314315311;
  v300 = *(_DWORD *)(v87 + 4 * (BYTE1(v274) ^ 0x62u));
  v301 = *(_DWORD *)&v95[4 * (BYTE2(v288) ^ 0x2E)];
  LODWORD(STACK[0x6A80]) = -1226141431;
  v302 = (1110361411 - (v299 & 0x80490202) + ((v299 >> 1) & 0x7065B199)) ^ v301 ^ (v300 - 1226141431 - v298);
  v303 = BYTE2(v274) ^ 0xC5;
  v304 = *(_DWORD *)(v96 + 4 * (v278 ^ 0xC5u)) ^ v299 ^ (v302 - 518388681 - ((2 * v302) & 0xC234086E));
  v305 = v281 ^ 0xF4;
  v306 = *(_DWORD *)&v76[4 * ((v297 + (__ROR4__(__ROR4__(v297, 7) ^ 0x5F2FD0EF, 25) ^ 0x6817885F) + 1) ^ 0xFFFFFFFE)
                       + 4 * v297]
       + 314315311;
  v307 = (((unsigned __int16)(v278 ^ 0x1F7B) >> 8) ^ 0x958F4D47)
       + *(_DWORD *)(v87
                   + 4
                   * ((((unsigned __int16)(v278 ^ 0x1F7B) >> 8) ^ -((unsigned __int16)(v278 ^ 0x1F7B) >> 8) ^ ((((unsigned __int16)(v278 ^ 0x1F7B) >> 8) ^ 0xFFFFFF60) + 160))
                    + 159));
  v308 = *(_DWORD *)&v95[4 * v303] ^ 0xAA399D10 ^ v306 ^ (1110361411 - (v306 & 0x80490202) + ((v306 >> 1) & 0x7065B199));
  v309 = (v296 & 0x8000 | 0x91F57E92) ^ v296 & 0xFFFF7FFF;
  v310 = *(_DWORD *)(v96 + 4 * v305) ^ 0xBBE55592 ^ (v307 - 1744533242 - ((2 * v307 + 1842684436) & 0xC234086E) + 3131);
  v311 = (v310 & 0x27A2CB48) - (v310 & 0x27A2CB48 ^ v308 & 0x27A2CB48);
  v312 = (((v311 & 0xF7AC678 ^ v308 & 0x722C248 | v311 & 0xF0853980 ^ v308 & 0x20800900) ^ -(v308 & 0x27A2CB48))
        + (v310 & 0x27A2CB48)) ^ (v310 ^ v308) & 0xD85D34B7;
  v313 = v291 ^ 0x6B27664F;
  v314 = *(_DWORD *)&v237[4 * (HIBYTE(v313) - ((v313 >> 23) & 0x1E)) + 60] + 314315311;
  v315 = v309 ^ 0x552C;
  v316 = v314 ^ *(_DWORD *)&v95[4 * ((v309 ^ 0xBB39552C) >> 16)] ^ (1110361411
                                                                                   - (v314 & 0x80490202)
                                                                                   + ((v314 >> 1) & 0x7065B199));
  HIDWORD(v317) = v304;
  LODWORD(v317) = v304 ^ 0x9D8AB7E;
  v318 = *(_DWORD *)&v237[4 * (HIBYTE(v309) ^ 0xB4)] + 314315311;
  v319 = v318 ^ *(_DWORD *)&v95[4 * (__ROR4__((v317 >> 19) & 0xE000001F ^ 0x6A526516, 29) ^ 0x5293286F)] ^ (1110361411 - (v318 & 0x80490202) + ((v318 >> 1) & 0x7065B199));
  v320 = *(_DWORD *)(v87 + 4 * (((unsigned __int16)(v312 ^ 0x8A08) >> 8) ^ 0x9Fu))
       + (((unsigned __int16)(v312 ^ 0x8A08) >> 8) ^ 0x958F4D47)
       - 1226141430;
  v321 = (v319 ^ 0xAA399D10 ^ -(v319 ^ 0xAA399D10) ^ (v320 + (v319 ^ 0x55C662EF ^ v320) + 1)) + v320;
  v322 = (v321 - 518388681 - ((2 * v321) & 0xC234086E)) ^ *(_DWORD *)(v96 + 4 * (v291 ^ 0xF1u));
  if ((v316 & 0x2000000) != 0)
    v323 = -33554432;
  else
    v323 = 0x2000000;
  v324 = v322 ^ 0x29E86253;
  v325 = (*(_DWORD *)(v87 + 4 * (BYTE1(v304) ^ 0x34u)) + (BYTE1(v304) ^ 0x958F4DEC) - 1226141430) ^ (v323 + v316);
  v326 = (v325 - 518388681 - ((2 * v325) & 0xC234086E)) ^ *(_DWORD *)(v96 + 4 * (v312 ^ 0xB6u));
  v327 = *(_DWORD *)&v237[4 * (HIBYTE(v304) ^ 6)] + 314315311;
  v328 = (1110361411 - (v327 & 0x80490202) + ((v327 >> 1) & 0x7065B199)) ^ (*(_DWORD *)(v87 + 4
                                                                                            * (BYTE1(v313) ^ 0x9Fu))
                                                                          + (BYTE1(v313) ^ 0x958F4D47)
                                                                          - 1226141430) ^ *(_DWORD *)&v95[4 * (BYTE2(v312) ^ 0x12)];
  v329 = *(_DWORD *)(v96 + 4 * v315) ^ v327 ^ (v328 - 518388681 - ((2 * v328) & 0xC234086E));
  v330 = *(_DWORD *)&v237[4 * (HIBYTE(v312) ^ 0x72)] + 314315311;
  v331 = (1110361411 - (v330 & 0x80490202) + ((v330 >> 1) & 0x7065B199)) ^ *(_DWORD *)&v95[4 * (BYTE2(v291) ^ 0xFB)] ^ (*(_DWORD *)(v87 + 4 * (HIBYTE(v315) ^ 0x9Fu)) + (HIBYTE(v315) ^ 0x958F4D47) - 1226141430);
  v332 = (((v329 ^ 0x1B44BA8D) + (v329 ^ 0x97CE64E6) + 1) ^ 0xFFFFFFF8) + (v329 ^ 0x1B44BA8D);
  v333 = *(_DWORD *)(v96 + 4 * (v304 ^ 0xC0u)) ^ v330 ^ (v331 - 518388681 - ((2 * v331) & 0xC234086E));
  v334 = *(_DWORD *)&v237[4 * (HIBYTE(v326) ^ 0xEC)] + 314315311;
  v335 = (v334 >> 1) & 0x7065B199 ^ v334;
  v336 = (BYTE1(v332) ^ 0x958F4D47) + *(_DWORD *)(v87 + 4 * (BYTE1(v332) ^ 0x9Fu));
  v337 = *(_DWORD *)&v95[4 * (BYTE2(v322) ^ 0x34)] ^ 0xAA399D10 ^ (v336
                                                                 - 115780019
                                                                 - ((2 * v336 + 1842684436) & 0x845D8A86));
  if ((v322 ^ 0xD6179DA4) + 1 + (v322 ^ 0x29E86253 | 8))
    v338 = -8;
  else
    v338 = 8;
  v339 = (*(_WORD *)&v95[4 * (BYTE2(v322) ^ 0x34)] ^ 0x9D10 ^ (unsigned __int16)(v336
                                                                               + 22093
                                                                               - ((2 * v336 + 8724) & 0x8A86))) & 0x100;
  if ((v337 & 0x100 & (unsigned __int16)v335) != 0)
    v339 = -v339;
  v340 = (v339 + v335) ^ v337 & 0xFFFFFEFF;
  v341 = *(_DWORD *)(v96 + 4 * (v333 ^ 9u));
  v342 = v340 & 4;
  v343 = (v342 & ~v341) == 0;
  v344 = v341 ^ 0x5AFF51A5;
  if (!v343)
    v342 = -v342;
  v345 = (v342 + v344) ^ v340 & 0xFFFFFFFB;
  v346 = *(_DWORD *)&v237[4 * (HIBYTE(v322) ^ 0x26)] + 314315311;
  v347 = v333 ^ 0xE61B16B7;
  v348 = *(_DWORD *)&v95[4 * (BYTE2(v332) ^ 0xDC)] ^ 0xAA399D10 ^ v346 ^ (*(_DWORD *)(v87
                                                                                    + 4
                                                                                    * (((unsigned __int16)(v333 ^ 0x16B7) >> 8) ^ 0x9Fu))
                                                                        + (((unsigned __int16)(v333 ^ 0x16B7) >> 8) ^ 0x958F4D47)
                                                                        - 1226141430) ^ (1110361411
                                                                                       - (v346 & 0x80490202)
                                                                                       + ((v346 >> 1) & 0x7065B199));
  v349 = (v348 - 518388681 - ((2 * v348) & 0xC234086E)) ^ *(_DWORD *)(v96 + 4 * (v326 ^ 0xC9u));
  v350 = BYTE2(v333) ^ 0xC7;
  v351 = *(_DWORD *)&v237[4 * (HIBYTE(v332) ^ 0xF)] + 314315311;
  v352 = (((v351 ^ 0x1F349CCD) + (v351 | 0xE0CB6332) + 1) >> 1)
       + 1110361411
       - (((v351 ^ 0x1F349CCD) + (v351 | 0xE0CB6332) + 1) & 0x845D8A86);
  v353 = v351 ^ *(_DWORD *)&v95[4 * v350] ^ (*(_DWORD *)(v87 + 4 * (BYTE1(v326) ^ 0x19u))
                                           + (BYTE1(v326) ^ 0x958F4DC1)
                                           - 1226141430);
  v354 = *(_DWORD *)(v96 + 4 * ((v338 + v324) ^ 0xB6u));
  v355 = v353 ^ v352;
  v356 = (((unsigned __int16)v354 | 0x1FFF) + 15161) & 0x2000;
  v343 = (v355 & v356) == 0;
  v357 = v355 ^ 0xAA399D10;
  if (!v343)
    v356 = -v356;
  v358 = ((2 * (v354 & 0xFFFFDFFF ^ 0xFCAFDBB9)) | 0x52369A14) - (v354 & 0xFFFFDFFF ^ 0xFCAFDBB9) - 689655050;
  v359 = ((v358 & 0x407DB785 ^ 0x40413485) + (v358 & 0xBF82487A ^ 0x31824801) - 1) ^ (v356 + v357) ^ 0x456DEE01;
  v360 = *(_DWORD *)&v237[4 * (HIBYTE(v347) - ((v347 >> 23) & 0x1E)) + 60] + 314315311;
  HIDWORD(v361) = *(_DWORD *)&v95[4 * (BYTE2(v326) ^ 0x1C)] ^ 0xE8175853;
  LODWORD(v361) = HIDWORD(v361);
  v362 = STACK[0x6A80];
  v363 = (*(_DWORD *)(v87 + 4 * (BYTE1(v324) ^ 0x9Fu))
        + LODWORD(STACK[0x6A80])
        - (((v324 >> 8) & 0x47 | 0x6A70B2B8) ^ (v324 >> 8) & 0xB8)) ^ __ROR4__((v361 >> 17) ^ __ROR4__((v360 >> 1) & 0x7065B199 ^ v360, 17) ^ 0x64EF4030, 15);
  v364 = (v363 - 518388681 - ((2 * v363) & 0xC234086E)) ^ *(_DWORD *)(v96 + 4 * (v332 ^ 0xBEu));
  v365 = v359 - ((2 * v359) & 0x45C54258) - 1562205908;
  v366 = ((v363 + 55 - ((2 * v363) & 0x6E)) ^ *(_BYTE *)(v96 + 4 * (v332 ^ 0xBEu))) ^ 0xDF;
  v367 = *(_DWORD *)&v237[4 * (HIBYTE(v345) ^ 0xFD)] + 314315311;
  v368 = (1110361411 - (v367 & 0x80490202) + ((v367 >> 1) & 0x7065B199)) ^ *(_DWORD *)&v95[4 * (BYTE2(v349) ^ 0x37)] ^ (*(_DWORD *)(v87 + 4 * (BYTE1(v365) ^ 0x9Fu)) + (BYTE1(v365) ^ 0x958F4D47) - 1226141430);
  v369 = *(_DWORD *)&v237[4 * (HIBYTE(v349) ^ 0x27)] + 314315311;
  v370 = *(_DWORD *)(v96 + 4 * v366) ^ v367 ^ (v368 - 518388681 - ((2 * v368) & 0xC234086E));
  v371 = ((((v369 ^ 0x1F349CCD) + (v369 | 0xE0CB6332) + 1) >> 1)
        + 1110361411
        - (((v369 ^ 0x1F349CCD) + (v369 | 0xE0CB6332) + 1) & 0x845D8A86)) ^ (*(_DWORD *)(v87
                                                                                       + 4 * (BYTE1(v364) ^ 0x2Eu))
                                                                           + (BYTE1(v364) ^ 0x958F4DF6)
                                                                           - 1226141430) ^ *(_DWORD *)&v95[4 * ((v365 ^ 0xFDC0000u) >> 16)];
  v372 = *(_DWORD *)&v237[4 * ((v365 ^ 0xFDC0000u) >> 24)];
  v373 = ((2 * (v372 ^ 0x3CD63406)) ^ 0xFF14260C) & (v372 ^ 0x3CD63406) ^ (2 * (v372 ^ 0x3CD63406)) & 0xFF8A1306;
  v374 = 2 * (v372 & 0xC35C2700);
  v375 = (v373 ^ 0x1F0A0102) & (4 * (v374 & (v372 ^ 0xBA5E3606) ^ v372 & 0xC35C2700)) ^ v374 & (v372 ^ 0xBA5E3606) ^ v372 & 0xC35C2700;
  v376 = ((4 * (v373 ^ 0x8A1102)) ^ 0xFE284C18) & (v373 ^ 0x8A1102) ^ (4 * (v373 ^ 0x8A1102)) & 0xFF8A1304;
  v377 = (v376 ^ 0xFE080000) & (16 * v375) ^ v375;
  v378 = ((16 * (v376 ^ 0x1821306)) ^ 0xF8A13060) & (v376 ^ 0x1821306) ^ (16 * (v376 ^ 0x1821306)) & 0xFF8A1300;
  v379 = v377 ^ 0xFF8A1306 ^ (v378 ^ 0xF8801006) & (v377 << 8);
  v380 = v372 ^ (2
               * ((v379 << 16) & 0x7F8A0000 ^ v379 ^ ((v379 << 16) ^ 0x13060000) & (((v378 ^ 0x70A0306) << 8) & 0xFF8A0000 ^ 0x75880000 ^ (((v378 ^ 0x70A0306) << 8) ^ 0x8A130000) & (v378 ^ 0x70A0306)))) ^ 0x5513EA23;
  v381 = (2 * (v372 ^ 0x937AA139)) & 0x50268638 ^ 0x50228209 ^ ((2 * (v372 ^ 0x937AA139)) ^ 0xA04D0C72) & (v372 ^ 0x937AA139);
  v382 = (4 * (v374 & (v372 ^ 0x935AA739) ^ v372 & 0xC35C2700)) & v381 ^ v374 & (v372 ^ 0x935AA739) ^ v372 & 0xC35C2700 ^ ((4 * (v374 & (v372 ^ 0x935AA739) ^ v372 & 0xC35C2700)) & 0x10208400 | 0x40020020);
  v383 = (4 * v381) & 0x50268638 ^ 0x10248619 ^ ((4 * v381) ^ 0x409A18E4) & v381;
  v384 = v382 ^ 0x10048409 ^ ((16 * v382) ^ 0x200200) & v383 ^ ((16 * v382) & 0x50268620 | 0x10);
  v385 = (16 * v383) & 0x50268630 ^ 0x50068429 ^ ((16 * v383) ^ 0x2686390) & v383;
  v386 = (v384 << 8) & 0x50268600 ^ v384 ^ ((v384 << 8) ^ 0x26863900) & v385;
  v387 = (((4
          * ((v386 << 16) & 0x260000 ^ v386 ^ ((v386 << 16) ^ 0x6390000) & ((v385 << 8) & 0x10260000 ^ 0x10200000 ^ ((v385 << 8) ^ 0x26860000) & v385))) ^ (2 * v372)) & 0x9EBFD65E ^ 0x86BA5644)
       + v380;
  v388 = *(_DWORD *)(v96 + 4 * (v345 ^ 0x5Au)) ^ v369 ^ (v371 - 518388681 - ((2 * v371) & 0xC234086E));
  v389 = *(_DWORD *)&v95[4 * (BYTE2(v364) ^ 0x7D)] ^ 0xE8175853;
  v390 = (*(_DWORD *)(v87 + 4 * (BYTE1(v345) ^ 0xFu)) + (BYTE1(v345) ^ 0x958F4DD7) - 1226141430) ^ (((v387 >> 1) & 0x7065B199 ^ v387) + v389 - 2 * (((v387 >> 1) & 0x7065B199 ^ v387) & v389));
  v391 = *(_DWORD *)&v237[4 * (HIBYTE(v364) ^ 0x29)];
  v392 = (v390 - 518388681 - ((2 * v390) & 0xC234086E)) ^ *(_DWORD *)(v96 + 4 * (v349 ^ 0xAFu));
  v393 = v391 + 314315311;
  v394 = ((v391 + 314315311) >> 1) & 0x70653199;
  v395 = (v393 >> 1) & 0x8000;
  if ((v395 & v393) != 0)
    v395 = -v395;
  v396 = v395 + v393;
  if ((v370 & 8) != 0)
    v397 = -8;
  else
    v397 = 8;
  v398 = v397 + (v370 ^ 0x11DCC882);
  v399 = (BYTE1(v349) ^ 0x958F4DB2) + *(_DWORD *)(v87 + 4 * (BYTE1(v349) ^ 0x6Au));
  v400 = v394 ^ *(_DWORD *)&v95[4 * (BYTE2(v345) ^ 0x3B)] ^ (v399 - 115780019 - ((2 * v399 + 1842684436) & 0x845D8A86)) ^ v396;
  v401 = *(_DWORD *)(v96 + 4 * (v365 ^ 0xBEu));
  v402 = v401 ^ 0xEE23377D ^ (v400 - 518388681 - ((2 * v400) & 0xC234086E));
  v401 ^= 0x5AFF51A5u;
  HIDWORD(v403) = -v401;
  LODWORD(v403) = -v401;
  v404 = (__ROR4__((v403 >> 6) ^ __ROR4__(((v400 ^ 0xAA399D10) + v402 + 1) ^ v401, 6) ^ 0xBF854971, 26) ^ 0xE1525C6F)
       + (v400 ^ 0xAA399D10);
  v405 = ((v388 ^ 0xD1F161E8) >> 16);
  v406 = v405 ^ -v405 ^ ((v405 ^ 0x55C662EF) - 1439064815);
  v407 = *(_DWORD *)&v237[4 * ((v398 ^ 0xAFC70E47) >> 24)] + 314315311;
  v408 = (v407 >> 1) & 0x7065B199 ^ *(_DWORD *)&v95[4 * (v405 ^ 0xDC)] ^ (v406
                                                                        - ((2 * v406 + 1416837664) & 0x845D8A86)
                                                                        - 328703405) ^ (*(_DWORD *)(v87
                                                                                                  + 4 * (BYTE1(v392) ^ 0x90u))
                                                                                      + v362
                                                                                      + (BYTE1(v392) ^ 0x6A70B2B7)
                                                                                      - 2 * (BYTE1(v392) ^ 0x6A70B2B7));
  v409 = *(_DWORD *)(v96 + 4 * (v404 ^ 0x47u)) ^ v407 ^ v405 ^ (v408
                                                                                 - 518388681
                                                                                 - ((2 * v408) & 0xC234086E));
  v410 = *(_DWORD *)&v237[4 * (HIBYTE(v388) ^ 0xDE)] + 314315311;
  v411 = (1110361411 - (v410 & 0x80490202) + ((v410 >> 1) & 0x7065B199)) ^ (*(_DWORD *)(v87 + 4
                                                                                            * (BYTE1(v404) ^ 0xEFu))
                                                                          - (BYTE1(v404) ^ 0x70 ^ -(BYTE1(v404) ^ 0x70) ^ ((BYTE1(v404) ^ 0x958F4D37) + 1785770681))
                                                                          + 1283055185) ^ *(_DWORD *)&v95[4 * (BYTE2(v392) ^ 0xF7)];
  v412 = *(_DWORD *)(v96 + 4 * (v398 ^ 0xF9u)) ^ v410 ^ (v411 - 518388681 - ((2 * v411) & 0xC234086E));
  v413 = *(_DWORD *)&v237[4 * (HIBYTE(v392) ^ 0x9E)] + 314315311;
  v414 = (1110361411 - (v413 & 0x80490202) + ((v413 >> 1) & 0x7065B199)) ^ *(_DWORD *)&v95[4 * (BYTE2(v404) ^ 0xD2)] ^ (*(_DWORD *)(v87 + 4 * (((unsigned __int16)(v398 ^ 0xE47) >> 8) ^ 0x9Fu)) + v362 - ((((v398 ^ 0xAFC70E47) >> 8) & 0x47 | 0x6A70B2B8) ^ ((v398 ^ 0xAFC70E47) >> 8) & 0xB8));
  v415 = *(_DWORD *)(v96 + 4 * (v388 ^ 0x56u)) ^ v413 ^ (v414 - 518388681 - ((2 * v414) & 0xC234086E));
  v416 = *(_DWORD *)&v237[4 * (HIBYTE(v404) ^ 0xCB)] + 314315311;
  v417 = (BYTE1(v404) ^ 0x70 ^ -(BYTE1(v404) ^ 0x70) ^ ((BYTE1(v404) ^ 0x37) - 71)) & 1;
  v418 = *(_DWORD *)&v95[4 * (BYTE2(v398) ^ 0x1B)];
  HIDWORD(v403) = v418 ^ 0x143;
  LODWORD(v403) = v418 ^ 0x422EC400;
  v419 = (*(_DWORD *)(v87 + 4 * (((unsigned __int16)(v388 ^ 0x61E8) >> 8) ^ 0x9Fu))
        + (((unsigned __int16)(v388 ^ 0x61E8) >> 8) ^ 0x958F4D47)
        - 1226141430) ^ __ROR4__((v403 >> 10) ^ 0xA76F9E6, 22) ^ 0x71DE0539 ^ (((v416 ^ 0x1F349CCD)
                                                                              + (v416 | 0xE0CB6332)
                                                                              + 1) >> v417 >> ((((BYTE1(v404) ^ 0x70 ^ -(BYTE1(v404) ^ 0x70) ^ ((BYTE1(v404) ^ 0x37) - 71) | 0xFE)
                                                                                               + v417
                                                                                               + 1) ^ 0xFE)
                                                                                             + v417));
  v420 = *(_DWORD *)(v96 + 4 * (v392 ^ 0x5Eu)) ^ v416 ^ (v419 - 518388681 - ((2 * v419) & 0xC234086E));
  v421 = v409 ^ 0xA522075A;
  v422 = (v409 ^ 0xA522075A) >> 24;
  v423 = 31 * ((138547333 * (unint64_t)v422) >> 32);
  if (-1108378657 * v422 >= 0x8421085)
    v423 = (v409 ^ 0xA522075A) >> 24;
  v424 = v415 ^ 0xE5F86952;
  v425 = *(_DWORD *)(v87 + 4 * (BYTE1(v424) ^ 0x9Fu)) + (BYTE1(v424) ^ 0x958F4D47) - 1226141430;
  v426 = *(_DWORD *)&v237[4 * (v423 ^ 0xF)] + 314315311;
  v427 = *(_DWORD *)(v96 + 4 * (v420 ^ 0xA3u));
  LODWORD(v429) = __ROR4__(*(_DWORD *)&v95[4 * (BYTE2(v412) ^ 0xE)] ^ 0xAA399D10 ^ v426 ^ (1110361411- (v426 & 0x80490202)+ ((v426 >> 1) & 0x7065B199)), 12) ^ 0x1168656E ^ (v425 >> 12) ^ (v425 << 20);
  HIDWORD(v429) = v429;
  v428 = v429 >> 20;
  v430 = (7 - (v427 | 0x1F)) & 0x20;
  HIDWORD(v429) = 1736263375 * ((v415 ^ 0xE5F86952) >> 24);
  LODWORD(v429) = HIDWORD(v429);
  v431 = v429 >> 1;
  if ((v428 & v430) != 0)
    v430 = -v430;
  v432 = v431 >= 0x2B93106;
  v433 = *(_DWORD *)&v237[4 * (HIBYTE(v412) ^ 0x33)] + 314315311;
  v434 = (v430 + (v428 ^ 0x8656E116)) ^ ((v427 & 0x95E2F47 ^ 0x42942) + (v427 & 0xF6A1D098 ^ 0xC4209001) - 1);
  v435 = __ROR4__((v433 >> 1) & 0x7065B199 ^ v433, 18);
  v436 = (((v435 ^ 0x8DA740CC) >> 14) & 0x20 | 0xA90BAB8D) ^ ((v435 ^ 0x8DA740CC) >> 14) & 0x3FFDF;
  v437 = 94 * (v424 / 0x5E000000);
  v438 = v420 ^ 0x782B831D;
  v439 = (v436 ^ ((v435 ^ 0x8DA740CC) << 18))
       + 1110361411
       - 2 * ((v436 ^ ((v435 ^ 0x8DA740CC) << 18)) & 0x422EC55F ^ v436 & 0x1C);
  if (v432)
    v437 = (v415 ^ 0xE5F86952) >> 24;
  v440 = v439 ^ *(_DWORD *)&v95[4 * (BYTE2(v415) ^ 0x24)] ^ (*(_DWORD *)(v87 + 4 * (BYTE1(v438) ^ 0x9Fu))
                                                           + (BYTE1(v438) ^ 0x958F4D47)
                                                           - 1226141430);
  v441 = (v440 - 518388681 - ((2 * v440) & 0xC234086E)) ^ *(_DWORD *)(v96 + 4 * (v409 ^ 0xE4u));
  v442 = *(_DWORD *)&v237[4 * (v437 - 2 * (v437 & 0xF)) + 60] + 314315311;
  v443 = (BYTE1(v421) ^ 0x958F4D47) + *(_DWORD *)(v87 + 4 * (BYTE1(v421) ^ 0x9Fu));
  v445 = (((v442 >> 1) & 0x7065B199 ^ -((v442 >> 1) & 0x7065B199) ^ (v442 - ((v442 >> 1) & 0x7065B199 ^ v442))) + v442) ^ *(_DWORD *)&v95[4 * (HIWORD(v438) & 0xA1 ^ 0xDC ^ ((BYTE2(v438) ^ 0x790E7CA1) + (BYTE2(v438) | 0x86F1835E) + 1))] ^ (v443 - 115780019 - ((2 * v443 + 1842684436) & 0x845D8A86));
  v446 = (v445 - 518388681 - ((2 * v445) & 0xC234086E)) ^ *(_DWORD *)(v96 + 4 * (v412 ^ 0x38u));
  v449 = v434 ^ 0x8880377C;
  if (((v434 ^ 0x8880377C) & 0x20) != 0)
    v450 = -32;
  else
    v450 = 32;
  v444 = *(_DWORD *)&v237[4 * (HIBYTE(v420) ^ 0x77)];
  v447 = ((-314315312 - v444) >> 1) & 0x7065B199 ^ (v444 + 314315311);
  v448 = (v447 + 1110361411 - ((2 * v447) & 0x845D8A86)) ^ (*(_DWORD *)(v87 + 4 * (BYTE1(v412) ^ 0xABu))
                                                          + (BYTE1(v412) ^ 0x958F4D73)
                                                          - 1226141430) ^ *(_DWORD *)&v95[4
                                                                                        * (BYTE2(v421) ^ -BYTE2(v421) ^ ((BYTE2(v421) ^ 0xFFFFFF23) + 221))
                                                                                        + 880];
  v451 = (v448 - 518388681 - ((2 * v448) & 0xC234086E)) ^ *(_DWORD *)(v96 + 4 * (v415 ^ 0xECu));
  v452 = STACK[0x6AA0];
  v453 = (char *)*(&off_1015B46D0 + LODWORD(STACK[0x6AA0]) - 4716) - 8;
  v454 = *(_DWORD *)&v453[4 * (((v441 ^ 0x18A83F20) >> 16) ^ 0xC3)];
  HIDWORD(v455) = v454 ^ 0x23C;
  LODWORD(v455) = v454 ^ 0x14CE6800;
  v456 = (v455 >> 10) ^ ((v441 ^ 0x18A83F20) << 6) & 0x3FC00000 ^ 0xEDF91546;
  v457 = (STACK[0x6AB0] & 0x16 ^ 3) + (STACK[0x6AB0] & 4 ^ 0xC) - ((STACK[0x6AB0] & 0x16 ^ 3) & 5);
  v458 = v456 - ((2 * v456) & 0x25669072) + 313739321;
  v459 = v458 >> ((v457 ^ 0x1C) & 0xFE) >> ((v457 ^ 0xA) & 0xFE);
  v460 = v459 + (v458 << 10) - 132172152 - 2 * ((v459 + (v458 << 10)) & 0x781F368C ^ v459 & 4);
  v461 = v451 ^ 0xF51E64F6;
  v462 = (v451 ^ 0xF6) + (v451 ^ 0x1E3EBEB3) + 1;
  v463 = (char *)*(&off_1015B46D0 + LODWORD(STACK[0x6AA0]) - 3924) - 12;
  v464 = *(_DWORD *)&v463[4 * (v451 ^ 0xE7)];
  v465 = (2
        * ((v462 & (v464 ^ 0x142EADDC) & 0x1E2AFE02 ^ 0x5EEBEA02)
         + (v462 & (v464 ^ 0x142EADDC) ^ 0x21001414)
         - ((v462 & (v464 ^ 0x142EADDC) ^ 0x21001414) & 0x3E2AFE02))) ^ 0x6C382BD3;
  v466 = (v464 ^ 0xE2A7ADDC) + v462;
  v467 = (char *)*(&off_1015B46D0 + (LODWORD(STACK[0x6AA0]) ^ 0x1FE8)) - 4;
  v468 = v466 + v465;
  v469 = (char *)*(&off_1015B46D0 + LODWORD(STACK[0x6AA0]) - 4677) - 12;
  v470 = *(_DWORD *)&v469[4 * (HIBYTE(v449) ^ 0x1F)] ^ *(_DWORD *)&v467[4 * (BYTE1(v446) ^ 0xAB)] ^ HIBYTE(v449) ^ (v468 + 1) ^ 0xAC06682F ^ v460;
  v471 = (v450 + v449);
  v472 = v446 ^ 0xB5510446;
  v473 = BYTE1(v451) ^ 0xCB;
  v474 = *(_DWORD *)&v453[4 * (BYTE2(v472) ^ 0xC3)] ^ *(_DWORD *)&v469[4 * (((v441 ^ 0x18A83F20) >> 24) ^ 0x74)] ^ (BYTE2(v472) + 349071932 - ((v472 >> 15) & 0x78)) ^ (((v441 ^ 0x18A83F20) >> 24) - 132172152 - (((v441 ^ 0x18A83F20) >> 23) & 0x110));
  v475 = v474 + 401127626 - ((2 * v474) & 0x2FD17194);
  LODWORD(STACK[0x6AB0]) = (v471 ^ 0x1E3EBECE)
                         + (v471 ^ 0x8B)
                         - 492327459
                         + ((2 * ((v471 ^ 0x1E3EBECE) + (v471 ^ 0x8B) + 1)) & 0x5BB8 ^ 0xFBB2FFFF);
  v476 = (BYTE2(v461) + 349071932 - ((v461 >> 15) & 0x78)) ^ *(_DWORD *)&v453[4 * (BYTE2(v461) ^ 0xC3)];
  v477 = *(_DWORD *)&v463[4 * (v471 ^ 0x9A)] ^ *(_DWORD *)&v467[4 * v473];
  HIDWORD(v455) = (v434 >> 8) ^ 0x79;
  LODWORD(v455) = BYTE4(v455) & 0xC0;
  v478 = (v441 ^ 0xE1C1419A)
       + (v441 ^ 0x20)
       - 2 * (v441 ^ 0xE1C1419A);
  v479 = *(_DWORD *)&v453[4 * (BYTE2(v449) ^ 0x3F)];
  v480 = (v478 - 492327460 - ((2 * v478) & 0x44D5BB8)) ^ *(_DWORD *)&v463[4 * (v441 ^ 0x31)];
  v481 = *(_DWORD *)&v467[4 * (__ROR4__((v455 >> 6) ^ 0x73C67C56, 26) ^ 0xF19F1533)];
  v482 = (((2 * (v481 & 0x80000 ^ 0xFB0926EF)) | 0x1A18F42) - (v481 & 0x80000 ^ 0xFB0926EF) - 13682593) ^ 0xFBD1E14E;
  v483 = *(_DWORD *)&v469[4 * (HIBYTE(v472) ^ 0x74)] ^ HIBYTE(v472) ^ (v476 - 132172152 - ((2 * v476) & 0xF03E6D10)) ^ 0x929B2F73;
  if ((v483 & v482) != 0)
    v482 = -v482;
  v484 = (v483
        + ((((2 * (v481 & 0xFFF7FFFF ^ 0x67E1BB8A)) | 0xABF35518) - (v481 & 0xFFF7FFFF ^ 0x67E1BB8A) + 705058164) ^ 0x5A075633 ^ (v482 + v483))
        + 1) ^ (-401127626
              - (((v481 ^ 0x2CC6EFD2) - 751235026) ^ ((v481 ^ 0x4D1EB28) - 80866088) ^ ((v481 ^ 0x3FFFBC30) - 1073724464)));
  v485 = (BYTE2(v449) + 349071932 - ((v449 >> 15) & 0x78)) ^ v479;
  v486 = v480 ^ (((v484 + 401127626 - ((2 * v484) & 0x2FD17194)) ^ v481) + v483);
  v487 = (v485 - 132172152 - ((2 * v485) & 0xF03E6D10)) ^ *(_DWORD *)&v469[4 * (HIBYTE(v461) ^ 0x74)];
  v488 = (v487 + 401127626 - ((2 * v487) & 0x2FD17194)) ^ *(_DWORD *)&v467[4 * (BYTE1(v441) ^ 0x90)];
  v489 = ((v446 ^ 0x46) + (v446 ^ 0x1E3EBE03) + 1) ^ *(_DWORD *)&v463[4 * (v446 ^ 0x57)] ^ (v488 - 492327460 - ((2 * v488) & 0xC54F5BB8));
  v490 = (char *)*(&off_1015B46D0 + (v452 ^ 0x1381)) - 8;
  v491 = STACK[0xDA40];
  v492 = (_BYTE *)STACK[0xDA40];
  *(_BYTE *)(v491 + 8) = v490[HIBYTE(v486) ^ 0xD8] ^ (HIBYTE(v486) - ((v486 >> 23) & 0xB8) + 92) ^ 0x6E;
  *(_BYTE *)(v491 + 12) = v490[HIBYTE(v489) ^ 0x27] ^ (HIBYTE(v489) - ((v489 >> 23) & 0xB8) + 92) ^ 0x8D;
  v493 = (char *)*(&off_1015B46D0 + v452 - 5336) - 8;
  v494 = v493[BYTE2(v470) ^ 0x60];
  v495 = v477 ^ v475;
  HIDWORD(v496) = ~v494;
  LODWORD(v496) = (v494 ^ 0xD8) << 24;
  *(_BYTE *)(v491 + 1) = (v496 >> 25) ^ ((v496 >> 25) >> 5) ^ ((v496 >> 25) >> 3) ^ 0xBE;
  v497 = (char *)*(&off_1015B46D0 + v452 - 4840) - 4;
  *(_BYTE *)(v491 + 11) = v497[v486 ^ 0xFDLL] ^ 0x9F;
  v498 = v493[BYTE2(v489) ^ 0xDBLL];
  HIDWORD(v496) = ~v498;
  LODWORD(v496) = (v498 ^ 0xD8) << 24;
  v499 = LODWORD(STACK[0x6AB0]) + 1;
  *(_BYTE *)(v491 + 13) = (v496 >> 25) ^ ((v496 >> 25) >> 5) ^ ((v496 >> 25) >> 3) ^ 0x98;
  v500 = (char *)*(&off_1015B46D0 + v452 - 5726) - 4;
  v501 = v495 ^ v499;
  *(_BYTE *)(v491 + 14) = (v500[BYTE1(v489) ^ 0x51] - 89) ^ 0x8E;
  *(_BYTE *)(v491 + 6) = (v500[BYTE1(v501) ^ 0x37] - 89) ^ 0xA7;
  *(_BYTE *)(v491 + 2) = (v500[BYTE1(v470) ^ 0x4DLL] - 89) ^ 0x3F;
  v502 = v493[BYTE2(v486) ^ 0x8FLL];
  HIDWORD(v496) = ~v502;
  LODWORD(v496) = (v502 ^ 0xD8) << 24;
  v503 = v496 >> 25;
  *(_BYTE *)(v491 + 9) = STACK[0x6A90];
  LOBYTE(v491) = (v503 >> 5) ^ ((v496 >> 25) >> 3) ^ 0xAC;
  v492[9] = v491 & 0xFB ^ v503 & 0xFB | (v491 ^ v503) & 4;
  v492[7] = v497[v501 ^ 0xC9] ^ 0xBF;
  v504 = v493[BYTE2(v501) ^ 0x21];
  HIDWORD(v496) = ~v504;
  LODWORD(v496) = (v504 ^ 0xD8) << 24;
  v492[5] = (v496 >> 25) ^ ((v496 >> 25) >> 5) ^ ((v496 >> 25) >> 3) ^ 0xAB;
  *v492 = v490[HIBYTE(v470) ^ 0x1FLL] ^ (HIBYTE(v470) - ((v470 >> 23) & 0xB8) + 92) ^ 0x5A;
  v492[3] = v497[v470 ^ 0xE9] ^ 0x27;
  v492[10] = (v500[BYTE1(v486) ^ 0xAALL] - 89) ^ 0x35;
  v492[4] = v490[((v501 ^ 0x2065ACD9u) >> 24) ^ 0x1ELL] ^ (((v501 ^ 0x2065ACD9u) >> 24)
                                                         - (((v501 ^ 0x2065ACD9u) >> 23) & 0xB8)
                                                         + 92) ^ 0xA8;
  v505 = v497[v489 ^ HIBYTE(v461) ^ 0x24];
  HIDWORD(v496) = v505 ^ 0x35;
  LODWORD(v496) = (v505 ^ 0x80) << 24;
  v492[15] = ((((v496 >> 30) ^ 0xF3) >> 2) | (((v496 >> 30) ^ 0xF3) << 6)) ^ 0x41;
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * v452) - 12))();
}

uint64_t sub_100740784()
{
  int v0;
  int v1;

  return (*(uint64_t (**)(void))(STACK[0x6AD8]
                              + 8
                              * ((((v0 ^ 0xFFD77FBC) + 1551883260 + ((2 * v0) & 0xFFAEB058) == ((v1 - 16865) | 0x1044)
                                                                                             + 1549224770)
                                * ((v1 - 12701) ^ 0x1055)) ^ v1)))();
}

uint64_t sub_100740800()
{
  int v0;
  uint64_t v1;
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;

  STACK[0x9F88] = 4;
  v2 = ((uint64_t (*)(unint64_t *, unint64_t *, unint64_t *, _QWORD, _QWORD))STACK[0x49E0])(&STACK[0x1D094], &STACK[0xB1E0], &STACK[0x9F88], 0, 0);
  v3 = STACK[0x6AD8];
  STACK[0xEE18] = *(_QWORD *)(STACK[0x6AD8] + 8 * (v0 + 40)) - 4;
  LODWORD(STACK[0xEE20]) = v0 - 1640886411;
  LODWORD(STACK[0xEE50]) = v0 - 1640890162;
  STACK[0xEE30] = 0;
  STACK[0xEE58] = v2;
  LODWORD(STACK[0xEE60]) = (v0 - 1640890162) ^ 0x7B;
  LODWORD(STACK[0xEE64]) = 0;
  STACK[0x1D358] = (unint64_t)&STACK[0xEE18];
  LODWORD(STACK[0x1D350]) = -299994601 - 1705718857 * ((v1 - 240) ^ 0x3D92DF59) + v0;
  v4 = ((uint64_t (*)(uint64_t))STACK[0x59F0])(v1 - 240);
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * SLODWORD(STACK[0x1D354])))(v4);
}

uint64_t sub_1007408FC()
{
  return ((uint64_t (*)(void))(*(_QWORD *)(STACK[0x6AD8] + 8 * (int)(STACK[0x6508] + 7983)) - 8))();
}

uint64_t sub_100740934()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = STACK[0x6508];
  v1 = STACK[0xCEB8];
  *(_QWORD *)(v1 + 24) = 0x67F3171B1845AD9FLL;
  *(_DWORD *)v1 = 0;
  v2 = STACK[0x6AD8];
  STACK[0x8CA0] = *(_QWORD *)(STACK[0x6AD8] + 8 * ((int)v0 - 3310)) - 12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)((v0 - 3310) ^ 0x1B1B)) - 12))();
}

uint64_t sub_1007409A0()
{
  int v0;
  unint64_t v1;

  v0 = STACK[0x6508] - 3398;
  v1 = STACK[0x6AD8];
  STACK[0x8CA0] = *(_QWORD *)(STACK[0x6AD8] + 8 * v0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ 0x1BA3)) - 12))();
}

uint64_t sub_1007409EC()
{
  int v0;
  _BYTE *v1;
  uint64_t v2;
  char *v3;

  v3 = (char *)&STACK[0x1D0C0] + v2;
  *v3 = *v1;
  v3[1] = v1[1];
  v3[2] = v1[2];
  v3[3] = v1[3];
  v3[4] = v1[4];
  v3[5] = v1[5];
  v3[6] = v1[6];
  v3[7] = v1[7];
  v3[8] = v1[8];
  v3[9] = v1[9];
  v3[10] = v1[10];
  v3[11] = v1[11];
  v3[12] = v1[12];
  v3[13] = v1[13];
  v3[14] = v1[14];
  v3[15] = v1[15];
  *((_QWORD *)v3 + 2) = *(_QWORD *)v1;
  *((_QWORD *)v3 + 3) = *((_QWORD *)v1 + 1);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(STACK[0x6AD8] + 8 * v0) - (v0 + 8263) + 25948))(4160223095);
}

uint64_t sub_100740AB8()
{
  int v0;
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v8;

  v3 = ((v1 ^ 0x982C9706) - 20025869) ^ ((v1 ^ 0xA4D2CDFC) - 1037027575) ^ ((v1 ^ 0x3D21AF62) + 1539510398 + v0);
  v4 = (((v2 - 160484349) & (v3 - 1571596496)) << (109 * (v2 ^ 0x63) - 70)) & ((v3 - 1571596496) ^ 0xF56F9853) ^ (v2 - 160484349) & (v3 - 1571596496);
  v5 = (((2 * v3) | 0xFFFFFFFD)
      - ((v3 ^ (2
                                                * ((((2 * ((v3 + 48) ^ 0x97)) ^ 0xE8) & ((v3 + 48) ^ 0x97) ^ (2 * ((v3 + 48) ^ 0x97)) & 0xF4) & (4 * v4) ^ v4))) & 0xF)
      - 1918811199) ^ 0xE96141A1;
  v6 = ((2 * v5) & 0x498004D4) - v5;
  v8 = v3 != 1732054893 && v6 == -457178636;
  return (*(uint64_t (**)(void))(STACK[0x6AD8] + 8 * (((8 * v8) | (16 * v8)) ^ v2)))();
}

