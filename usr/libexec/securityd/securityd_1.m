void sub_100136A80(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  uint32_t v5;
  CFTypeRef v6;
  NSObject *v7;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v10;

  cf = 0;
  if (sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS genpagrp; DROP INDEX IF EXISTS genpsync;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS inetagrp; DROP INDEX IF EXISTS inetsync;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS certagrp; DROP INDEX IF EXISTS certsync;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS keysagrp; DROP INDEX IF EXISTS keyssync;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS genpsync0;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS inetsync0;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS certsync0;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS keyssync0;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS genpmusr;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS inetmusr;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS certmusr;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS keysmusr;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS item_backupmusr;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS backup_keybagmusr;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS backup_keyarchivemusr;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS archived_key_backupmusr;"), &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS agrp_musr_tomb_svce ON genp(agrp, musr, tomb, svce);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS agrp_musr_tomb_srvr ON inet(agrp, musr, tomb, srvr);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS agrp_musr_tomb_subj ON cert(agrp, musr, tomb, subj);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS agrp_musr_tomb_atag ON keys(agrp, musr, tomb, atag);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS synckeys_contextID_ckzone_keyclass_state ON synckeys(contextID, ckzone, keyclass, state);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS incomingqueue_contextID_ckzone_UUID ON incomingqueue(contextID, ckzone, UUID);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS incomingqueue_contextID_ckzone_state ON incomingqueue(contextID, ckzone, state);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS incomingqueue_contextID_ckzone_parentkeyUUID ON incomingqueue(contextID, ckzone, parentKeyUUID);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS outgoingqueue_contextID_ckzone_UUID ON outgoingqueue(contextID, ckzone, UUID);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS outgoingqueue_contextID_ckzone_state ON outgoingqueue(contextID, ckzone, state);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS outgoingqueue_contextID_ckzone_parentkeyUUID ON outgoingqueue(contextID, ckzone, parentKeyUUID);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS ckmirror_contextID_ckzone_UUID ON ckmirror(contextID, ckzone, UUID);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("CREATE INDEX IF NOT EXISTS ckmirror_contextID_ckzone_parentkeyUUID ON ckmirror(contextID, ckzone, parentKeyUUID);"),
                       &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS tlksharecontextID;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS currentitemscontextID;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS ckdevicestatecontextID;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS outgoingqueuecontextID;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS incomingqueuecontextID;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS synckeyscontextID;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS ckmirrorcontextID;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS currentkeyscontextID;"), &cf)
    && sub_10001B41C(a1, CFSTR("DROP INDEX IF EXISTS ckstatecontextID;"), &cf))
  {
    v2 = sub_10000EF14("upgr");
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_42;
    *(_WORD *)buf = 0;
    v3 = "processed custom indexes (now or in the past)";
    v4 = v2;
    v5 = 2;
    goto LABEL_41;
  }
  v7 = sub_10000EF14("SecError");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v10 = cf;
    v3 = "upgr: failed to process custom indexes: %@";
    v4 = v7;
    v5 = 12;
LABEL_41:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v3, buf, v5);
  }
LABEL_42:
  v6 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v6);
  }
}

uint64_t sub_100136F08(uint64_t a1)
{
  const void *v2;
  __CFString **v3;
  int v4;
  __CFString ***v5;
  CFDictionaryRef *v6;
  const void **v7;
  CFTypeRef *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  __CFString **v12;
  _QWORD v14[4];
  uint64_t v15;
  _QWORD v16[6];
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  if (qword_100341178 != -1)
    dispatch_once(&qword_100341178, &stru_1002DECC8);
  v2 = (const void *)qword_100341180;
  v3 = &off_1002E2190;
  v4 = 1;
  v5 = off_1002E4320;
  do
  {
    if (*((_BYTE *)v3 + 8))
    {
      v6 = (CFDictionaryRef *)sub_1000114E8((uint64_t)v3, v2, 0, *(_QWORD *)(a1 + 32), *(__CFString ***)(a1 + 40));
      if (v6)
      {
        v7 = (const void **)v6;
        v8 = *(CFTypeRef **)(a1 + 40);
        v15 = *(_QWORD *)(a1 + 48);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 0x40000000;
        v16[2] = sub_1001373C8;
        v16[3] = &unk_1002E86E8;
        v16[4] = v2;
        v16[5] = v8;
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 0x40000000;
        v14[2] = sub_1001373DC;
        v14[3] = &unk_1002E8748;
        v4 &= sub_10001E280(v6, v15, v8, &stru_1002E8648, &stru_1002E8688, (uint64_t)&stru_1002E86C8, (uint64_t)v16, (uint64_t)v14);
        sub_100011108(v7, 0);
      }
      else
      {
        v9 = sub_10000EF14("transcrypt");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = (uint64_t)**(v5 - 1);
          v11 = **(_QWORD **)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          v18 = v10;
          v19 = 2112;
          v20 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "could not create query for class %@: %@", buf, 0x16u);
        }
      }
    }
    v12 = *v5++;
    v3 = v12;
  }
  while (v12);
  return v4 & 1;
}

void sub_1001370F8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  if (byte_100341208 == 1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[OTManager manager](OTManager, "manager"));
    objc_msgSend(v2, "initializeOctagon");
    objc_msgSend(v2, "setupAnalytics");

  }
  if (sub_10000BD64())
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = objc_autoreleasePoolPush();
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](CKKSViewManager, "manager"));
    objc_msgSend(v5, "setupAnalytics");
    sub_100030A78(v3, &stru_1002DCC40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "completedSecCKKSInitialize"));
    objc_msgSend(v6, "fulfill");

    if (qword_100341058 != -1)
      dispatch_once(&qword_100341058, &stru_1002DCC60);

    objc_autoreleasePoolPop(v4);
  }
}

void sub_1001371E4(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (objc_opt_class(CKDatabase))
  {
    v2 = atomic_load((unsigned int *)&unk_100340ED0);
    if (v2 <= 1)
      sub_100030A78(v1, &stru_1002E8F08);
  }
  if (objc_opt_class(CKDatabase) && (v3 = atomic_load((unsigned int *)&unk_100340ED0), v3 < 2))
  {
    v4 = KCSharingLogObject(CFSTR("KCSharingPreflight"));
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Initializing sync controller", v8, 2u);
    }

    v6 = objc_claimAutoreleasedReturnValue(+[KCSharingSyncController sharedInstance](KCSharingSyncController, "sharedInstance"));
    -[NSObject preflightWithCompletion:](v6, "preflightWithCompletion:", &stru_1002E8F28);
  }
  else
  {
    v7 = KCSharingLogObject(CFSTR("KCSharingPreflight"));
    v6 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Change tracking is disabled, KCSharing won't preflight", buf, 2u);
    }
  }

}

void sub_100137318(id a1)
{
  const void *v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  v1 = sub_10000EF14("escrowrequest");
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "performing EscrowRequestServerInitialize", v6, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[EscrowRequestServer server](EscrowRequestServer, "server"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "controller"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stateMachine"));
  objc_msgSend(v5, "startOperation");

}

uint64_t sub_1001373C8(uint64_t a1, sqlite3_stmt *a2, uint64_t a3)
{
  return sub_100013544(a2, a3, *(const __CFString **)(a1 + 32), *(CFTypeRef **)(a1 + 40));
}

void sub_1001373DC(uint64_t a1, __CFString ***a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  CFTypeRef v7;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v10;

  v4 = sub_10000EF14("transcrypt");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "handling item: %{private}@", buf, 0xCu);
  }
  cf = 0;
  if (!sub_100115F58((uint64_t)a2, -6, (__CFString **)&cf))
  {
    v5 = sub_10000EF14("transcrypt");
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    *(_DWORD *)buf = 138412290;
    v10 = cf;
    v6 = "failed to set keybag, but continuing. Error: %@";
    goto LABEL_9;
  }
  if (sub_100007BB0(a2, (CFStringRef **)a2, *(_QWORD *)(a1 + 32), &cf, (uint64_t)&stru_1002E8728))
    return;
  v5 = sub_10000EF14("transcrypt");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v10 = cf;
    v6 = "failed to update item, but continuing. Error: %@";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, buf, 0xCu);
  }
LABEL_10:
  v7 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v7);
  }
}

BOOL sub_100137568(id a1, __CFString *a2, BOOL *a3)
{
  sub_100013190(a2, a3);
  CFStringAppendFormat(a2, 0, CFSTR("musr = ?"));
  return 1;
}

BOOL sub_1001375A8(id a1, const SecDbAttr *a2)
{
  return 0;
}

BOOL sub_1001375B0(id a1, const SecDbAttr *a2)
{
  return (LOBYTE(a2->var2) >> 1) & 1;
}

BOOL sub_1001375BC(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

void sub_1001375CC(uint64_t a1, const void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *value;

  value = (void *)0xAAAAAAAAAAAAAAAALL;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), a2, (const void **)&value))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a3 + 8);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (int)value + 8);
    if (CFEqual(*(CFTypeRef *)v6, *(CFTypeRef *)v7) && *(unsigned __int8 *)(v6 + 8) == *(unsigned __int8 *)(v7 + 8))
    {
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v6 + 16);
      if (v9)
        v10 = v8 == 0;
      else
        v10 = 1;
      if (v10)
      {
LABEL_9:
        if (!(v9 | v8))
          return;
      }
      else
      {
        v11 = (uint64_t *)(v7 + 24);
        v12 = (uint64_t *)(v6 + 24);
        while (CFEqual(*(CFTypeRef *)v9, *(CFTypeRef *)v8)
             && *(_DWORD *)(v9 + 8) == *(_DWORD *)(v8 + 8)
             && *(_QWORD *)(v9 + 16) == *(_QWORD *)(v8 + 16)
             && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v8 + 24)
             && *(_QWORD *)(v9 + 32) == *(_QWORD *)(v8 + 32))
        {
          v13 = *v11++;
          v8 = v13;
          v14 = *v12++;
          v9 = v14;
          if (!v14 || !v8)
            goto LABEL_9;
        }
      }
    }
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 56), a2);
  }
}

uint64_t sub_1001376F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_10013770C(uint64_t a1, const void *a2)
{
  _QWORD *v4;
  const void *Value;

  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * (int)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2) + 8);
  Value = (const void *)(int)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), a2);
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 64), 0, CFSTR("ALTER TABLE %@ RENAME TO %@_old;"),
    **(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * (_QWORD)Value + 8),
    *v4);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), Value);
}

void sub_100137794(uint64_t a1, const void *a2, int a3)
{
  if (!CFSetContainsValue(*(CFSetRef *)(a1 + 32), a2) && !CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 40), a2))
    CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 56), 0, CFSTR("DROP TABLE IF EXISTS %@;"),
      **(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * a3 + 8));
}

void sub_10013780C(uint64_t a1, const void *a2, int a3)
{
  if (!CFSetContainsValue(*(CFSetRef *)(a1 + 32), a2) && !CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 40), a2))
  {
    CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 56), 0, CFSTR("DROP TABLE IF EXISTS %@;"),
      **(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * a3 + 8));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 64), (const void *)a3);
  }
}

void sub_1001378A4(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
}

void sub_1001378AC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void *v6;
  const void *v7;
  BOOL v8;
  BOOL v10;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  char v18;
  const __CFString *v19;
  BOOL v20;
  uint64_t v22;
  NSObject *v23;
  int OSStatus;
  int v25;
  NSObject *v26;
  uint64_t v27;
  char v28;
  NSObject *v29;
  CFTypeRef v30;
  _QWORD *v31;
  BOOL v32;
  CFTypeRef cf;
  _BYTE buf[24];
  void *v35;
  uint64_t v36;
  __int16 v37;

  cf = 0;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 48);
  v6 = sub_10000C1D0((_QWORD *)a2, kSecAttrAccessible);
  v7 = v6;
  if (v6)
    v8 = kSecAttrAccessibleAlwaysPrivate == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (v6 == (const void *)kSecAttrAccessibleAlwaysPrivate)
      goto LABEL_17;
  }
  else if (CFEqual(v6, kSecAttrAccessibleAlwaysPrivate))
  {
    goto LABEL_17;
  }
  if (v7)
    v10 = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (CFEqual(v7, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate))
      goto LABEL_17;
LABEL_15:
    *(_DWORD *)(a2 + 40) = 5;
    goto LABEL_25;
  }
  if (v7 != (const void *)kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate)
    goto LABEL_15;
LABEL_17:
  v12 = sub_1000192F4(a2, 1, (__CFString **)&cf);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v13 + 24))
    v14 = v12;
  else
    v14 = 0;
  *(_BYTE *)(v13 + 24) = v14;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    goto LABEL_38;
  v15 = (_QWORD *)sub_10001E6A8(*(_QWORD **)(a2 + 16), 7, *(__CFString ***)(a1 + 56));
  v16 = sub_10001A56C(a2, v15, kCFNull, *(__CFString ***)(a1 + 56));
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v18 = *(_BYTE *)(v17 + 24) ? v16 : 0;
  *(_BYTE *)(v17 + 24) = v18;
  if ((v18 & 1) == 0)
    goto LABEL_38;
LABEL_25:
  v19 = (const __CFString *)sub_10000C1D0((_QWORD *)a2, kSecAttrAccessGroup);
  if (v19)
    v20 = kSecAttrAccessGroupToken == 0;
  else
    v20 = 1;
  if (v20)
  {
    if (v19 != kSecAttrAccessGroupToken)
      goto LABEL_34;
  }
  else if (!CFEqual(v19, kSecAttrAccessGroupToken))
  {
LABEL_34:
    v22 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_100117088;
    v35 = &unk_1002DE728;
    v36 = a2;
    v37 = 0;
    if ((sub_10001DADC(a2, v22, (__CFString **)&cf, (uint64_t)buf) & 1) == 0)
    {
      v23 = sub_10000EF14("SecError");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138478083;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = cf;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "item: %{private}@ insert during upgrade: %@", buf, 0x16u);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    }
    goto LABEL_38;
  }
  if (sub_10000C1D0((_QWORD *)a2, kSecAttrTokenID))
    goto LABEL_34;
  v26 = sub_10000EF14("upgr");
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "dropping item during schema upgrade due to agrp=com.apple.token: %{private}@", buf, 0xCu);
  }
LABEL_38:
  if (!cf)
    goto LABEL_67;
  OSStatus = SecErrorGetOSStatus(cf);
  if (OSStatus <= -25331)
  {
    if (OSStatus != -536870186 && OSStatus != -536870184)
    {
      v25 = -26275;
      goto LABEL_50;
    }
LABEL_52:
    v29 = sub_10000EF14("upgr");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = cf;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Bailing in phase 1 because AKS is unavailable: %@", buf, 0xCu);
    }
    goto LABEL_54;
  }
  if (OSStatus > -25300)
  {
    if (OSStatus != -25291)
    {
      v25 = -25299;
LABEL_50:
      if (OSStatus == v25)
        goto LABEL_51;
LABEL_54:
      v30 = cf;
      if (cf)
      {
        CFRetain(cf);
        v31 = *(_QWORD **)(a1 + 56);
        if (v31 && !*v31)
          *v31 = v30;
        else
          CFRelease(v30);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (v30)
        v32 = 1;
      else
        v32 = *(_BYTE *)(v27 + 24) == 0;
      v28 = !v32;
      goto LABEL_65;
    }
    goto LABEL_52;
  }
  if (OSStatus != -25330)
  {
    v25 = -25308;
    goto LABEL_50;
  }
LABEL_51:
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v28 = 1;
LABEL_65:
  *(_BYTE *)(v27 + 24) = v28;
  if (cf)
    CFRelease(cf);
LABEL_67:
  *a3 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) ^ 1;
}

void sub_100137CD8(uint64_t a1, const void *a2)
{
  signed int Value;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 48), 0, CFSTR("DROP TABLE %@_old;"),
    **(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * Value + 8));
}

uint64_t sub_100137D2C(uint64_t a1, __CFString *a2, _BYTE *a3)
{
  sub_100013190(a2, a3);
  CFStringAppendFormat(a2, 0, CFSTR("NOT %@ IN (?,?)"), **(_QWORD **)(a1 + 32));
  return 1;
}

uint64_t sub_100137D84(uint64_t a1, sqlite3_stmt *a2, uint64_t a3)
{
  int v3;
  uint64_t result;

  v3 = a3;
  result = sub_100013544(a2, a3, kSecAttrAccessibleAlwaysPrivate, *(CFTypeRef **)(a1 + 32));
  if ((_DWORD)result)
    return sub_100013544(a2, (v3 + 1), kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, *(CFTypeRef **)(a1 + 32));
  return result;
}

void sub_100137DF8(uint64_t a1, uint64_t a2, BOOL *a3)
{
  _QWORD *v6;
  int v7;
  const __CFString *v8;
  BOOL v9;
  uint64_t *v11;
  unsigned __int8 v12;
  CFIndex Code;
  NSObject *v14;
  const char *v15;
  CFErrorDomain Domain;
  NSObject *v17;
  CFErrorRef v18;
  CFErrorRef *v19;
  NSObject *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  const void *v24;
  BOOL v25;
  NSObject *v26;
  CFErrorRef err;
  _BYTE buf[12];
  __int16 v29;
  CFErrorRef v30;

  err = 0;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (sub_1000192F4(a2, 1, (__CFString **)&err))
  {
    v6 = (_QWORD *)sub_10001E6A8(*(_QWORD **)(a2 + 16), 7, *(__CFString ***)(a1 + 48));
    v7 = sub_10001A56C(a2, v6, kCFNull, (__CFString **)&err);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v7;
    if (!v7)
      goto LABEL_50;
    v8 = (const __CFString *)sub_10000C1D0((_QWORD *)a2, kSecAttrAccessGroup);
    if (v8)
      v9 = kSecAttrAccessGroupToken == 0;
    else
      v9 = 1;
    if (v9)
    {
      if (v8 != kSecAttrAccessGroupToken)
        goto LABEL_12;
    }
    else if (!CFEqual(v8, kSecAttrAccessGroupToken))
    {
      goto LABEL_12;
    }
    if (!sub_10000C1D0((_QWORD *)a2, kSecAttrTokenID))
    {
      v20 = sub_10000EF14("upgr");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138477827;
        *(_QWORD *)&buf[4] = a2;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "dropping item during item upgrade due to agrp=com.apple.token: %{private}@", buf, 0xCu);
      }
      off_100340C18();
      v12 = sub_10001E4C0((CFStringRef **)a2, *v21, kCFBooleanFalse, 0, (CFTypeRef *)&err);
      goto LABEL_13;
    }
LABEL_12:
    off_100340C18();
    v12 = sub_10000517C((_QWORD **)a2, (_QWORD **)a2, *v11, 0, *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 154), (__CFString **)&err);
LABEL_13:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v12;
  }
  if (!err)
    goto LABEL_52;
  Code = CFErrorGetCode(err);
  if (Code <= -25309)
  {
    if (Code <= -26276)
    {
      if (Code != -536870186 && Code != -536870184)
        goto LABEL_36;
LABEL_34:
      **(_BYTE **)(a1 + 64) = 1;
      v17 = sub_10000EF14("upgr");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = err;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Bailing in phase 2 because AKS is unavailable: %@", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (Code == -26275)
    {
      *(_QWORD *)buf = 0;
      off_100340C18();
      sub_10001E4C0((CFStringRef **)a2, *v23, kCFBooleanFalse, 0, (CFTypeRef *)buf);
      v24 = *(const void **)buf;
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)buf = 0;
        CFRelease(v24);
      }
    }
    else if (Code != -25330)
    {
      goto LABEL_36;
    }
    goto LABEL_46;
  }
  if (Code > -25292)
  {
    if (Code == -25291)
      goto LABEL_34;
    if (Code == 19)
    {
      Domain = CFErrorGetDomain(err);
      if (!CFEqual(CFSTR("com.apple.utilities.sqlite3"), Domain))
      {
        v26 = sub_10000EF14("SecError");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138478083;
          *(_QWORD *)&buf[4] = a2;
          v29 = 2112;
          v30 = err;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Received SQLITE_CONSTRAINT with wrong error domain. Huh? Item: %{private}@, error: %@", buf, 0x16u);
        }
        goto LABEL_50;
      }
      v14 = sub_10000EF14("upgr");
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        goto LABEL_46;
      *(_DWORD *)buf = 138477827;
      *(_QWORD *)&buf[4] = a2;
      v15 = "Received SQLITE_CONSTRAINT -- ignoring: %{private}@";
      goto LABEL_33;
    }
LABEL_36:
    v18 = err;
    if (err)
    {
      CFRetain(err);
      v19 = *(CFErrorRef **)(a1 + 48);
      if (v19 && !*v19)
        *v19 = v18;
      else
        CFRelease(v18);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v18 == 0;
    goto LABEL_50;
  }
  if (Code != -25308)
  {
    if (Code == -25299)
    {
      v14 = sub_10000EF14("upgr");
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
LABEL_46:
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        goto LABEL_47;
      }
      *(_DWORD *)buf = 138477827;
      *(_QWORD *)&buf[4] = a2;
      v15 = "Ignoring duplicate item: %{private}@";
LABEL_33:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  LKAReportKeychainUpgradeOutcomeWithError(*(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76), 2, 0);
  **(_BYTE **)(a1 + 64) = 1;
  *a3 = 1;
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
LABEL_47:
  *(_BYTE *)(v22 + 24) = 1;
LABEL_50:
  if (err)
    CFRelease(err);
LABEL_52:
  v25 = *a3 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 0;
  *a3 = v25;
}

BOOL sub_1001382E4(id a1, const SecDbAttr *a2)
{
  return 0;
}

BOOL sub_1001382EC(id a1, const SecDbAttr *a2)
{
  return 0;
}

BOOL sub_1001382F4(id a1, const SecDbAttr *a2)
{
  return (LOBYTE(a2->var2) >> 1) & 1;
}

BOOL sub_100138300(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[2] = sub_1001383FC;
  v5[3] = &unk_1002E7BF0;
  v5[1] = 0x40000000;
  v5[4] = v2;
  v5[5] = a2;
  v6 = *(_OWORD *)(a1 + 48);
  return sub_10001AC0C(a2, 2, (CFTypeRef *)(v3 + 24), (uint64_t)v5);
}

uint64_t sub_10013836C(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1001383A0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1001383D4(id a1)
{
  qword_100341330 = (uint64_t)dispatch_queue_create("sec_kc_dbhandle", 0);
}

uint64_t sub_1001383FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __CFString ***v3;
  __CFString **v4;
  const char *CStringPtr;
  char *v6;
  char *v7;
  CFStringRef v8;
  CFStringRef v9;
  const __CFArray *v10;
  const void *v11;
  CFTypeRef v12;
  __CFString **v13;
  uint64_t v14;
  NSObject *v15;
  CFTypeRef v16;
  _QWORD *v17;
  NSObject *v18;
  CFTypeRef v19;
  CFTypeRef cf;
  _QWORD v23[3];
  char v24;
  _QWORD v25[8];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  CFMutableArrayRef Mutable;
  uint64_t v30;
  CFTypeRef *v31;
  uint64_t v32;
  uint64_t v33;
  timeval v34;
  __int128 context;
  void (*v36)(uint64_t, uint64_t);
  void *v37;
  _QWORD *v38;
  __CFString ***v39;
  uint64_t v40;
  CFTypeRef *p_cf;
  uint64_t v42;
  CFRange v43;

  cf = 0;
  v1 = a1[5];
  v2 = a1[6];
  v34.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v34.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v34, 0);
  v3 = off_1002E4318;
  v4 = &off_1002E2190;
  do
  {
    if (*((_BYTE *)v4 + 8))
    {
      CStringPtr = CFStringGetCStringPtr(*v4, 0x8000100u);
      v6 = sqlite3_mprintf("%q", CStringPtr);
      if (v6)
      {
        v7 = v6;
        v8 = CFStringCreateWithCString(kCFAllocatorDefault, v6, 0x8000100u);
        sqlite3_free(v7);
        v9 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("SELECT * FROM %@ WHERE persistref IS ''"), v8);
        v30 = 0;
        v31 = (CFTypeRef *)&v30;
        v32 = 0x2000000000;
        v33 = 0;
        v26 = 0;
        v27 = &v26;
        v28 = 0x2000000000;
        Mutable = (CFMutableArrayRef)0xAAAAAAAAAAAAAAAALL;
        Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 0x40000000;
        v25[2] = sub_100133BB0;
        v25[3] = &unk_1002E7A70;
        v25[4] = &v30;
        v25[5] = &v26;
        v25[6] = v1;
        v25[7] = v2;
        sub_10001E3C4(v1, (uint64_t)v9, v31 + 3, (uint64_t)v25);
        if (v9)
          CFRelease(v9);
        v23[0] = 0;
        v23[1] = v23;
        v23[2] = 0x2000000000;
        v24 = 0;
        v10 = (const __CFArray *)v27[3];
        *(_QWORD *)&context = _NSConcreteStackBlock;
        *((_QWORD *)&context + 1) = 0x40000000;
        v36 = sub_100133C18;
        v37 = &unk_1002E7B60;
        v38 = v23;
        v39 = v3;
        v40 = v1;
        p_cf = &cf;
        v42 = v2;
        v43.length = CFArrayGetCount(v10);
        v43.location = 0;
        CFArrayApplyFunction(v10, v43, (CFArrayApplierFunction)sub_100133D68, &context);
        if (v8)
          CFRelease(v8);
        v11 = (const void *)v27[3];
        if (v11)
        {
          v27[3] = 0;
          CFRelease(v11);
        }
        v12 = v31[3];
        if (v12)
        {
          v31[3] = 0;
          CFRelease(v12);
        }
        _Block_object_dispose(v23, 8);
        _Block_object_dispose(&v26, 8);
        _Block_object_dispose(&v30, 8);
      }
    }
    v13 = v3[1];
    ++v3;
    v4 = v13;
  }
  while (v13);
  v14 = sub_100133AEC((uint64_t)&v34);
  SecCoreAnalyticsSendValue(CFSTR("com.apple.keychain.phase3.add-uuid-persistentref-to-items"), 0);
  SecCoreAnalyticsSendValue(CFSTR("com.apple.keychain.phase3.migrated-time"), v14);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  if (cf)
  {
    v15 = sub_10000EF14("SecError");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(context) = 138412290;
      *(_QWORD *)((char *)&context + 4) = cf;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "upgr-phase3: failed to perform persistent ref upgrade for keychain item(s): %@", (uint8_t *)&context, 0xCu);
    }
    v16 = cf;
    if (cf)
    {
      CFRetain(cf);
      v17 = (_QWORD *)a1[7];
      if (v17 && !*v17)
        *v17 = v16;
      else
        CFRelease(v16);
      v19 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v19);
      }
    }
  }
  else
  {
    v18 = sub_10000EF14("upgr-phase3");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(context) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "finished upgrading keychain items' persistent refs", (uint8_t *)&context, 2u);
    }
  }
  return 1;
}

void sub_1001387A0(id a1)
{
  NSObject *v1;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  qword_100341340 = (uint64_t)dispatch_queue_create("sec_async_db", v1);
}

uint64_t sub_1001387D4(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const __CFArray *a5, int a6)
{
  uint64_t v6;
  const __CFDictionary *v12;
  const __CFDictionary *v14;
  const void **v15;
  NSObject *v16;
  CFArrayRef v17;
  CFIndex Count;
  CFIndex v19;
  uint64_t v20;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  BOOL v23;
  __CFString *v24;
  CFArrayRef theArray;
  uint8_t buf[4];
  __CFString *v27;
  void *values[3];
  void *keys[3];
  CFRange v30;

  LODWORD(v6) = a6;
  theArray = 0;
  v30.length = CFArrayGetCount(a5);
  v30.location = 0;
  if (CFArrayContainsValue(a5, v30, a4))
    return 1;
  keys[0] = (void *)kSecClass;
  keys[1] = (void *)kSecReturnRef;
  keys[2] = (void *)kSecAttrSubject;
  values[0] = (void *)kSecClassCertificate;
  values[1] = kCFBooleanTrue;
  values[2] = (void *)a4;
  v14 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 3, 0, 0);
  v12 = v14;
  if (!v14)
    return (uint64_t)v12;
  v24 = 0;
  v15 = (const void **)sub_1000112B0(v14, a3, -1, 0, &v24);
  CFRelease(v12);
  if (v15)
  {
    sub_100012060(a1, v15, &theArray, a2, &v24);
    sub_100011108(v15, (CFErrorRef *)&v24);
  }
  if (v24)
  {
    v16 = sub_10000EF14("SecError");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v27 = v24;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "items matching issuer parent: %@", buf, 0xCu);
    }
    v17 = (CFArrayRef)v24;
    if (!v24)
      return 0;
    v12 = 0;
    v24 = 0;
LABEL_24:
    CFRelease(v17);
    return (uint64_t)v12;
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    v12 = 0;
  }
  else
  {
    v19 = Count;
    v20 = 1;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v20 - 1);
      Value = CFDictionaryGetValue(ValueAtIndex, kSecAttrIssuer);
      if (CFEqual(Value, a4) || (v23 = __OFSUB__((_DWORD)v6, 1), v6 = (v6 - 1), ((int)v6 < 0) ^ v23))
        v12 = 0;
      else
        v12 = (const __CFDictionary *)sub_1001387D4(a1, a2, a3, Value, a5, v6);
      if (v20 >= v19)
        break;
      ++v20;
    }
    while (!(_DWORD)v12);
  }
  v17 = theArray;
  if (theArray)
    goto LABEL_24;
  return (uint64_t)v12;
}

SecCertificateRef sub_100138A64(__CFString **a1, CFDictionaryRef theDict)
{
  SecCertificateRef v3;
  const __CFData *Value;
  CFStringRef v5;
  const void *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const __CFData *v9;
  NSObject *v11;
  NSObject *v12;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v15;

  if (a1 == &off_1002E3A00)
  {
    Value = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("certdata"));
    v5 = CFSTR("certtkid");
  }
  else
  {
    if ((__CFString **)sub_1000119B8((uint64_t)CFSTR("cert"), &qword_100341260, (uint64_t)&unk_100341258) != a1)
      return 0;
    Value = (const __CFData *)CFDictionaryGetValue(theDict, kSecValueData);
    v5 = kSecAttrTokenID;
  }
  v6 = CFDictionaryGetValue(theDict, v5);
  if (!Value)
    return 0;
  if (v6)
  {
    cf = 0;
    v7 = (const __CFDictionary *)SecTokenItemValueCopy(Value, &cf);
    if (v7)
    {
      v8 = v7;
      v9 = (const __CFData *)CFDictionaryGetValue(v7, CFSTR("data"));
      if (v9)
      {
        v3 = SecCertificateCreateWithData(kCFAllocatorDefault, v9);
      }
      else
      {
        v12 = sub_10000EF14("SecError");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "token item doesn't contain token value data", buf, 2u);
        }
        v3 = 0;
      }
      CFRelease(v8);
      return v3;
    }
    v11 = sub_10000EF14("SecError");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v15 = cf;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "function SecTokenItemValueCopy failed with: %@", buf, 0xCu);
    }
    if (cf)
      CFRelease(cf);
    return 0;
  }
  return SecCertificateCreateWithData(kCFAllocatorDefault, Value);
}

void sub_100138C7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[7];
  _QWORD v5[3];
  uint64_t v6;

  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2000000000;
  v6 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_100138D24;
  v4[3] = &unk_1002E7D38;
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v4[5] = *(_QWORD *)(a1 + 40);
  v4[6] = v2;
  v4[4] = v5;
  sub_100011A30(1, 1, v3, (uint64_t)&v6, (uint64_t)v4);
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  _Block_object_dispose(v5, 8);
}

uint64_t sub_100138D24(_QWORD *a1, uint64_t a2)
{
  CFStringRef v4;
  uint64_t v5;
  CFTypeRef *v6;
  int v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  const void *v17;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[7];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;

  v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("DELETE FROM %@ WHERE rowid=%lli"), a1[5], a1[6]);
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 1;
  v5 = a1[4];
  v6 = (CFTypeRef *)(*(_QWORD *)(v5 + 8) + 24);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 0x40000000;
  v22[2] = sub_100138F4C;
  v22[3] = &unk_1002E7D10;
  v22[5] = v5;
  v22[6] = a2;
  v22[4] = &v23;
  v7 = sub_10001E3C4(a2, (uint64_t)v4, v6, (uint64_t)v22);
  if (*((_BYTE *)v24 + 24))
    v8 = v7;
  else
    v8 = 0;
  *((_BYTE *)v24 + 24) = v8;
  if (v8 != 1 || *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v9 = sub_10000EF14("SecError");
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
    v11 = a1[5];
    v10 = a1[6];
    v12 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    *(_DWORD *)buf = 138412802;
    v28 = v11;
    v29 = 2048;
    v30 = v10;
    v31 = 2112;
    v32 = v12;
    v13 = "Failed to delete corrupt item, %@ row %lli: %@";
    v14 = v9;
    v15 = 32;
    goto LABEL_8;
  }
  v19 = sub_10000EF14("item");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v21 = a1[5];
    v20 = a1[6];
    *(_DWORD *)buf = 134218242;
    v28 = v20;
    v29 = 2112;
    v30 = v21;
    v13 = "Deleted corrupt rowid %lli from table %@";
    v14 = v19;
    v15 = 22;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
  }
LABEL_9:
  v16 = *(_QWORD *)(a1[4] + 8);
  v17 = *(const void **)(v16 + 24);
  if (v17)
  {
    *(_QWORD *)(v16 + 24) = 0;
    CFRelease(v17);
  }
  if (v4)
    CFRelease(v4);
  _Block_object_dispose(&v23, 8);
  return 1;
}

uint64_t sub_100138F4C(_QWORD *a1, sqlite3_stmt *a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = sub_100019C40(a1[6], a2, (CFTypeRef *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v4 = *(_QWORD *)(a1[4] + 8);
  if (*(_BYTE *)(v4 + 24))
    v5 = result;
  else
    v5 = 0;
  *(_BYTE *)(v4 + 24) = v5;
  return result;
}

BOOL sub_100138F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const CFStringRef *v6;
  const __CFString *v7;
  uint64_t v8;
  __int128 v9;
  CFTypeRef *v10;
  int v11;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1 + 48;
  v5 = CFEqual(*(CFTypeRef *)(a1 + 48), kSecClassIdentity);
  v6 = &kSecClassCertificate;
  if (!v5)
    v6 = (const CFStringRef *)v4;
  v7 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT agrp FROM %@ WHERE persistref = ?"), *v6);
  v13[0] = _NSConcreteStackBlock;
  v8 = *(_QWORD *)(v4 + 8);
  v9 = *(_OWORD *)(v4 - 16);
  v10 = (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(v4 - 16) + 8) + 24);
  v13[1] = 0x40000000;
  v13[2] = sub_1001393D0;
  v13[3] = &unk_1002E8878;
  v15 = v8;
  v16 = a2;
  v14 = v9;
  v11 = sub_1000129F0(a2, v7, v10, (uint64_t)v13);
  if (v7)
    CFRelease(v7);
  return v11 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != 0;
}

BOOL sub_100139098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const CFStringRef *v6;
  const __CFString *v7;
  __int128 v8;
  CFTypeRef *v9;
  int v10;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;

  v4 = a1 + 48;
  v5 = CFEqual(*(CFTypeRef *)(a1 + 48), kSecClassIdentity);
  v6 = &kSecClassCertificate;
  if (!v5)
    v6 = (const CFStringRef *)v4;
  v7 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT agrp FROM %@ WHERE rowid == %u"), *v6, *(_QWORD *)(v4 + 8));
  v12[0] = _NSConcreteStackBlock;
  v8 = *(_OWORD *)(v4 - 16);
  v9 = (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(v4 - 16) + 8) + 24);
  v12[1] = 0x40000000;
  v12[2] = sub_1001392D8;
  v12[3] = &unk_1002E88F0;
  v14 = a2;
  v13 = v8;
  v10 = sub_1000129F0(a2, v7, v9, (uint64_t)v12);
  if (v7)
    CFRelease(v7);
  return v10 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != 0;
}

uint64_t sub_100139198(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  const void *v4;
  const void *ValueAtIndex;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t result;
  CFIndex FirstIndexOfValue;
  const void *v10;
  const void *v11;
  uint8_t v12[16];
  CFRange v13;

  if (!a1 || !*(_QWORD *)(a1 + 48) || (v2 = *(const __CFArray **)(a1 + 8)) == 0)
  {
    v6 = sub_10000EF14("SecError");
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v7)
      return result;
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "item: no app clip client or attributes not set, cannot verify restrictions", v12, 2u);
    return 0;
  }
  Count = CFArrayGetCount(v2);
  if (Count != 2)
  {
    if (Count == 1)
    {
      v4 = *(const void **)(a1 + 48);
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), 0);
      if (v4 && ValueAtIndex)
        return CFEqual(v4, ValueAtIndex) != 0;
      if (v4 == ValueAtIndex)
        return 1;
    }
    return 0;
  }
  v13.location = 0;
  v13.length = 2;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 8), v13, kSecAttrAccessGroupToken);
  if (FirstIndexOfValue == -1)
    return 0;
  v10 = *(const void **)(a1 + 48);
  v11 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), FirstIndexOfValue == 0);
  if (v10 && v11)
    return CFEqual(v10, v11) != 0;
  else
    return v10 == v11;
}

uint64_t sub_1001392D8(_QWORD *a1, sqlite3_stmt *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[6];

  v3 = a1[5];
  v4 = *(_QWORD *)(a1[4] + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_10013935C;
  v7[3] = &unk_1002E88C8;
  v5 = a1[6];
  v7[1] = 0x40000000;
  v7[4] = v3;
  v7[5] = a2;
  result = sub_100013DC0(v5, a2, (CFTypeRef *)(v4 + 24), (uint64_t)v7);
  if ((_DWORD)result)
    return *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) != 0;
  return result;
}

BOOL sub_10013935C(uint64_t a1)
{
  const UInt8 *v2;
  int v3;

  v2 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 40), 0);
  v3 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 40), 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFStringCreateWithBytes(0, v2, v3, 0x8000100u, 0);
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

BOOL sub_1001393D0(uint64_t a1, sqlite3_stmt *a2)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD v12[6];

  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 48));
  Length = CFDataGetLength(*(CFDataRef *)(a1 + 48));
  v6 = sub_100013BA4(a2, 1, BytePtr, Length, (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_1001394AC;
  v12[3] = &unk_1002E8850;
  v9 = *(_QWORD *)(a1 + 56);
  v12[1] = 0x40000000;
  v12[4] = v7;
  v12[5] = a2;
  if (sub_100013DC0(v9, a2, (CFTypeRef *)(v8 + 24), (uint64_t)v12))
    v10 = !v6;
  else
    v10 = 1;
  return !v10 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != 0;
}

BOOL sub_1001394AC(uint64_t a1)
{
  const UInt8 *v2;
  int v3;

  v2 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 40), 0);
  v3 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 40), 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFStringCreateWithBytes(0, v2, v3, 0x8000100u, 0);
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

BOOL sub_100139520(const __CFDictionary *a1)
{
  const void *Value;
  uint64_t v2;
  CFTypeID v3;
  BOOL v4;
  CFTypeID v5;
  CFTypeID v7;
  SInt32 IntValue;
  CFStringRef v9;
  int v10;
  BOOL v11;
  int valuePtr;

  Value = CFDictionaryGetValue(a1, kSecAttrSynchronizable);
  v2 = (uint64_t)Value;
  if (Value)
  {
    v3 = CFGetTypeID(Value);
    if (v3 == CFBooleanGetTypeID())
    {
      v4 = CFBooleanGetValue((CFBooleanRef)v2) == 0;
      return !v4;
    }
    v5 = CFGetTypeID((CFTypeRef)v2);
    if (v5 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)v2, kCFNumberSInt32Type, &valuePtr);
      v4 = valuePtr == 0;
      return !v4;
    }
    v7 = CFGetTypeID((CFTypeRef)v2);
    if (v7 == CFStringGetTypeID())
    {
      IntValue = CFStringGetIntValue((CFStringRef)v2);
      v9 = CFStringCreateWithFormat(0, 0, CFSTR("%ld"), IntValue);
      v10 = CFEqual(v9, (CFTypeRef)v2);
      if (IntValue)
        v11 = v10 == 0;
      else
        v11 = 1;
      v2 = !v11;
      CFRelease(v9);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFNullRef sub_100139630(const __CFDictionary *a1, CFTypeRef cf1, uint64_t a3, __CFString **a4)
{
  const __CFBoolean *v8;
  const __CFString *v9;
  int v10;
  CFNullRef v11;
  CFArrayRef *v13;
  const __CFArray *v14;
  const __CFString *Value;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  const void *v29;
  char v30;
  const void *ValueAtIndex;
  const __CFNull *Copy;
  const void *v33;
  const void *v34;
  const void *v35;
  const __CFString *v36;
  uint64_t v37;
  _QWORD v38[11];
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  CFRange v52;

  if (cf1)
  {
    v8 = (const __CFBoolean *)kSecAttrSharingGroupNone;
    if (!kSecAttrSharingGroupNone || !CFEqual(cf1, kSecAttrSharingGroupNone))
    {
      if (*(_BYTE *)(a3 + 57))
      {
        if (!sub_10001120C(a1, 1, a4))
          return 0;
        if (CFDictionaryContainsKey(a1, kSecAttrTombstone))
        {
          v9 = CFSTR("Tombstones can't be shared");
          goto LABEL_5;
        }
        if (*(_BYTE *)(a3 + 36))
        {
          sub_100019F20(-909, a4, CFSTR("This client can't share items"));
          return 0;
        }
        v13 = sub_10001CBCC((CFArrayRef *)a3);
        if (v13)
        {
          v14 = (const __CFArray *)v13;
          if (CFArrayGetCount((CFArrayRef)v13))
          {
            v52.length = CFArrayGetCount(v14);
            v52.location = 0;
            if (CFArrayContainsValue(v14, v52, CFSTR("*")))
            {
              CFRelease(v14);
              v14 = 0;
            }
            Value = (const __CFString *)CFDictionaryGetValue(a1, kSecAttrAccessGroup);
            if (!Value)
            {
LABEL_26:
              v24 = sub_1000112B0(a1, *(const void **)(a3 + 24), -1, a3, a4);
              if (v24)
              {
                v25 = v24;
                sub_100012018(v24, v14);
                if ((sub_10001CB70(*(CFTypeRef *)(v25 + 128))
                   || sub_100019F20(-909, a4, CFSTR("Items from a multi-user view can't be shared")))
                  && (!*(_DWORD *)(v25 + 192) || sub_100019F20(-909, a4, CFSTR("System keychain items can't be shared"))))
                {
                  if (*(_DWORD *)(v25 + 196))
                    v26 = sub_100019F20(-909, a4, CFSTR("Items in a sync bubble can't be shared"));
                  else
                    v26 = 1;
                }
                else
                {
                  v26 = 0;
                }
                v27 = *(_DWORD *)(v25 + 48);
                *(_DWORD *)(v25 + 48) = 3;
                v28 = *(_QWORD *)(v25 + 104);
                v29 = (const void *)kSecAttrSharingGroup;
                if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v25 + 8), kSecAttrSharingGroup))
                  sub_100012178(v29, v8, v25);
                if (v26 && (!*(_QWORD *)(v25 + 40) || (sub_100011460(v25, (CFErrorRef *)a4) & 1) != 0))
                {
                  v48 = 0;
                  v49 = &v48;
                  v50 = 0x2000000000;
                  v51 = 1;
                  v44 = 0;
                  v45 = &v44;
                  v46 = 0x2000000000;
                  v47 = 0;
                  v40 = 0;
                  v41 = &v40;
                  v42 = 0x2000000000;
                  v43 = 0;
                  v38[0] = _NSConcreteStackBlock;
                  v38[1] = 0x40000000;
                  v38[2] = sub_100139B98;
                  v38[3] = &unk_1002E7E58;
                  v38[8] = v25;
                  v38[9] = v14;
                  v38[4] = &v48;
                  v38[5] = &v44;
                  v38[6] = &v40;
                  v38[7] = a4;
                  v38[10] = cf1;
                  v39 = v27;
                  v30 = sub_100011A30(1, 1, 0, (uint64_t)a4, (uint64_t)v38);
                  sub_100011108((const void **)v25, (CFErrorRef *)a4);
                  if (v14)
                    CFRelease(v14);
                  if (*((_BYTE *)v49 + 24))
                  {
                    if ((v30 & 1) != 0)
                    {
                      sub_100133374();
                      sub_100133324();
                      if (!v27)
                      {
                        v11 = kCFNull;
                        goto LABEL_66;
                      }
                      if (v28 == 1)
                      {
                        if (CFArrayGetCount((CFArrayRef)v41[3]) != 1)
                        {
                          v11 = 0;
LABEL_66:
                          v35 = (const void *)v41[3];
                          if (v35)
                          {
                            v41[3] = 0;
                            CFRelease(v35);
                          }
                          goto LABEL_68;
                        }
                        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v41[3], 0);
                        Copy = (const __CFNull *)CFRetain(ValueAtIndex);
                      }
                      else
                      {
                        Copy = CFArrayCreateCopy(kCFAllocatorDefault, (CFArrayRef)v41[3]);
                      }
                      v11 = Copy;
                      goto LABEL_66;
                    }
                    v34 = (const void *)v41[3];
                    if (v34)
                    {
                      v41[3] = 0;
                      CFRelease(v34);
                    }
                  }
                  else
                  {
                    v33 = (const void *)v41[3];
                    if (v33)
                    {
                      v41[3] = 0;
                      CFRelease(v33);
                    }
                    sub_100139C18((void *)v45[3], (CFErrorRef *)a4);
                  }
                  v11 = 0;
LABEL_68:
                  _Block_object_dispose(&v40, 8);
                  _Block_object_dispose(&v44, 8);
                  _Block_object_dispose(&v48, 8);
                  return v11;
                }
                sub_100011108((const void **)v25, 0);
              }
              if (v14)
                CFRelease(v14);
              return 0;
            }
            v16 = (uint64_t)Value;
            if ((sub_100014DCC(v14, Value, a3) & 1) != 0)
            {
              if (v14)
                CFRelease(v14);
              v14 = sub_100139AC4(kCFAllocatorDefault, v17, v18, v19, v20, v21, v22, v23, v16);
              goto LABEL_26;
            }
            if (v14)
              CFRelease(v14);
            v36 = (const __CFString *)v16;
            v37 = 0;
            v9 = CFSTR("Client explicitly specifies access group %@ but is only entitled for %@");
LABEL_14:
            v10 = -34018;
            goto LABEL_6;
          }
          CFRelease(v14);
        }
        v36 = CFSTR("application-identifier nor keychain-access-groups");
        v9 = CFSTR("Client has neither %@ entitlements");
        goto LABEL_14;
      }
      v9 = CFSTR("Client doesn't have Keychain Sharing client entitlement");
      goto LABEL_14;
    }
  }
  v9 = CFSTR("A group must be specified to share the item");
LABEL_5:
  v10 = -50;
LABEL_6:
  sub_100019F20(v10, a4, v9, v36, v37);
  return 0;
}

CFArrayRef sub_100139AC4(CFAllocatorRef allocator, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFIndex v10;
  uint64_t *v11;
  CFMutableArrayRef Mutable;
  __CFArray *i;
  const __CFNull **v14;
  const __CFNull *v15;
  CFNullRef v16;
  CFArrayRef Copy;
  uint64_t *v19;
  const __CFNull **v20;

  v19 = &a9;
  v10 = -1;
  do
  {
    v11 = v19++;
    ++v10;
  }
  while (*v11);
  v20 = (const __CFNull **)&a9;
  Mutable = CFArrayCreateMutable(allocator, v10, &kCFTypeArrayCallBacks);
  if (!Mutable)
    return 0;
  for (i = Mutable; v10; --v10)
  {
    v14 = v20++;
    v15 = *v14;
    if (v15)
      v16 = v15;
    else
      v16 = kCFNull;
    CFArrayAppendValue(i, v16);
  }
  Copy = CFArrayCreateCopy(allocator, i);
  CFRelease(i);
  return Copy;
}

BOOL sub_100139B98(uint64_t a1, uint64_t a2)
{
  CFTypeRef *v2;
  uint64_t v3;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  CFTypeRef *v10;
  uint64_t v11;
  int v12;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_100139C90;
  v5[3] = &unk_1002E7E30;
  v8 = *(_OWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v2 = *(CFTypeRef **)(a1 + 56);
  v9 = a2;
  v10 = v2;
  v7 = v3;
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_DWORD *)(a1 + 88);
  return sub_10001AC0C(a2, 2, v2, (uint64_t)v5);
}

void sub_100139C18(void *cf, CFErrorRef *a2)
{
  CFErrorRef v4;

  if (cf && a2)
  {
    if (!*a2)
      goto LABEL_11;
    if (CFErrorGetCode(*a2) == -25330)
    {
      v4 = *a2;
      if (!*a2)
        goto LABEL_11;
      *a2 = 0;
      CFRelease(v4);
    }
  }
  else
  {
    if (!cf)
      return;
    if (!a2)
      goto LABEL_10;
  }
  if (*a2)
  {
LABEL_10:
    CFRelease(cf);
    return;
  }
LABEL_11:
  *a2 = (CFErrorRef)cf;
}

BOOL sub_100139C90(uint64_t a1)
{
  CFMutableArrayRef Mutable;
  uint64_t v3;
  const __CFArray *v4;
  uint64_t v5;
  __CFString **v6;
  CFIndex Count;
  CFIndex v8;
  const void *v9;
  _QWORD *ValueAtIndex;
  __CFString **v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  const __CFData *v21;
  int v22;
  CFDataRef v23;
  CFDataRef v24;
  unsigned int v25;
  __CFString *v26;
  __CFString *v27;
  uint64_t v29;
  uint64_t v30;
  __CFArray *v31;
  const __CFData *v32;
  CFIndex v33;
  CFTypeRef cf2;
  _QWORD v35[5];
  CFTypeRef cf;
  _QWORD v37[5];
  __int16 v38;

  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(const __CFArray **)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = (__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 0x40000000;
  v35[2] = sub_10013A15C;
  v35[3] = &unk_1002E7E08;
  v35[4] = Mutable;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1000043D4(v3, v4, v5, v6, (uint64_t)v35);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    if (!Mutable)
      return 0;
LABEL_59:
    CFRelease(Mutable);
    return 0;
  }
  if (!CFArrayGetCount(Mutable))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_100019F20(-25300, *(__CFString ***)(a1 + 80), CFSTR("No items matched the query"));
    if (!Mutable)
      return 0;
    goto LABEL_59;
  }
  Count = CFArrayGetCount(Mutable);
  v8 = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = CFArrayCreateMutable(kCFAllocatorDefault, Count, &kCFTypeArrayCallBacks);
  v9 = (const void *)kSecAttrUUID;
  cf2 = (CFTypeRef)kSecAttrSharingGroup;
  v31 = Mutable;
  while (2)
  {
    if (v8 >= CFArrayGetCount(Mutable))
      goto LABEL_64;
    ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v8);
    v11 = (__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v12 = (_QWORD *)ValueAtIndex[2];
    v13 = v12[2];
    if (!v13)
    {
LABEL_38:
      LOBYTE(v20) = sub_100019F20(-50, v11, CFSTR("Items of class '%@' can't be shared"), *v12);
      goto LABEL_41;
    }
    v33 = v8;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v30 = *(_QWORD *)(a1 + 72);
    v32 = *(const __CFData **)(a1 + 88);
    v18 = v12 + 3;
    do
    {
      if (CFEqual(*(CFTypeRef *)v13, v9))
      {
        v14 = (_QWORD *)v13;
        if (!v13)
          goto LABEL_22;
      }
      else if (CFEqual(*(CFTypeRef *)v13, cf2))
      {
        v17 = (_QWORD *)v13;
        if (!v14)
          goto LABEL_22;
      }
      else if (CFEqual(*(CFTypeRef *)v13, kSecAttrSynchronizable))
      {
        v16 = (_QWORD *)v13;
        if (!v14)
          goto LABEL_22;
      }
      else
      {
        if (*(_DWORD *)(v13 + 8) == 16)
          v15 = (_QWORD *)v13;
        if (!v14)
          goto LABEL_22;
      }
      if (v17 && v16 && v15)
      {
        sub_100116454((uint64_t)ValueAtIndex, v11);
        goto LABEL_27;
      }
LABEL_22:
      v19 = *v18++;
      v13 = v19;
    }
    while (v19);
    if (!v17)
    {
      v12 = (_QWORD *)ValueAtIndex[2];
      Mutable = v31;
      v8 = v33;
      goto LABEL_38;
    }
    sub_100116454((uint64_t)ValueAtIndex, v11);
    if (v14)
    {
LABEL_27:
      v20 = sub_10001A56C((uint64_t)ValueAtIndex, v14, 0, v11);
      if (v20)
        goto LABEL_28;
      goto LABEL_40;
    }
LABEL_28:
    if (v15)
    {
      v21 = sub_10001CDC8();
      v22 = sub_10001A56C((uint64_t)ValueAtIndex, v15, v21, v11);
      if (v21)
        CFRelease(v21);
      if (!v22)
      {
        LOBYTE(v20) = 0;
        goto LABEL_40;
      }
    }
    v20 = sub_10001A56C((uint64_t)ValueAtIndex, v17, v32, v11);
    if (!v20)
      goto LABEL_40;
    if (v16)
    {
      v20 = sub_10001A56C((uint64_t)ValueAtIndex, v16, kCFBooleanFalse, v11);
      if (!v20)
        goto LABEL_40;
    }
    cf = 0;
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 0x40000000;
    v37[2] = sub_100117088;
    v37[3] = &unk_1002DE728;
    v37[4] = ValueAtIndex;
    v38 = 0;
    if ((sub_10001DADC((uint64_t)ValueAtIndex, v30, (__CFString **)&cf, (uint64_t)v37) & 1) != 0)
      goto LABEL_36;
    v25 = sub_1001165A4((__CFError *)cf);
    v26 = (__CFString *)cf;
    if (!v25)
    {
      if (cf)
      {
        Mutable = v31;
        v8 = v33;
        if (*v11)
        {
          if (CFErrorGetCode((CFErrorRef)*v11) != -25330)
            goto LABEL_55;
          v27 = *v11;
          if (*v11)
          {
            *v11 = 0;
            CFRelease(v27);
LABEL_55:
            if (*v11)
            {
              CFRelease(v26);
              LOBYTE(v20) = 0;
              goto LABEL_41;
            }
          }
        }
        LOBYTE(v20) = 0;
        *v11 = v26;
        goto LABEL_41;
      }
LABEL_36:
      LOBYTE(v20) = 1;
LABEL_40:
      Mutable = v31;
      v8 = v33;
      goto LABEL_41;
    }
    Mutable = v31;
    v8 = v33;
    if (cf)
    {
      cf = 0;
      CFRelease(v26);
    }
    LOBYTE(v20) = sub_100019F20(-25299, v11, CFSTR("Item is already shared with this group"), v29);
LABEL_41:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v20;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      goto LABEL_64;
    v23 = sub_1000235AC((uint64_t)ValueAtIndex, *(_DWORD *)(a1 + 96), (__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    if (v23)
    {
      v24 = v23;
      if (!CFEqual(v23, kCFNull))
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v24);
      CFRelease(v24);
      ++v8;
      continue;
    }
    break;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
LABEL_64:
  if (Mutable)
    CFRelease(Mutable);
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

void sub_10013A15C(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
}

uint64_t sub_10013A164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10013A1E0;
  v4[3] = &unk_1002E7EE0;
  v4[4] = a2;
  v4[5] = a1;
  v2 = sub_100011A30(1, 1, 0, a2, (uint64_t)v4);
  if ((_DWORD)v2)
  {
    sub_100133374();
    sub_100133324();
  }
  return v2;
}

BOOL sub_10013A1E0(int8x16_t *a1, uint64_t a2)
{
  int8x16_t v2;
  _QWORD v4[4];
  int8x16_t v5;
  uint64_t v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10013A248;
  v4[3] = &unk_1002E7EC0;
  v2 = a1[2];
  v5 = vextq_s8(v2, v2, 8uLL);
  v6 = a2;
  return sub_10001AC0C(a2, 2, (CFTypeRef *)v2.i64[0], (uint64_t)v4);
}

uint64_t sub_10013A248(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  uint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  BOOL v14;
  uint64_t *v15;
  CFDictionaryRef *v16;
  CFDictionaryRef *v17;
  CFIndex i;
  const __CFData *ValueAtIndex;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  const void *v27;
  _QWORD v28[6];
  CFTypeRef *v29;
  Block_layout v30;
  CFDictionaryRef *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  const void *v39;
  _QWORD v40[4];

  v32 = 0;
  v33 = &v32;
  v34 = 0x2000000000;
  v35 = 1;
  v2 = *(const void **)(*(_QWORD *)(a1 + 32) + 24);
  if (!v2)
  {
    if (qword_100341188 != -1)
      dispatch_once(&qword_100341188, &stru_1002DED08);
    v2 = (const void *)qword_100341190;
  }
  v40[0] = sub_1000119B8((uint64_t)CFSTR("inet"), &qword_100341250, (uint64_t)&unk_100341248);
  v40[1] = sub_1000119B8((uint64_t)CFSTR("genp"), &qword_100341240, (uint64_t)&unk_100341238);
  v40[2] = sub_1000119B8((uint64_t)CFSTR("cert"), &qword_100341260, (uint64_t)&unk_100341258);
  v40[3] = sub_1000119B8((uint64_t)CFSTR("keys"), &qword_100341270, (uint64_t)&unk_100341268);
  v10 = sub_100139AC4(0, v3, v4, v5, v6, v7, v8, v9, (uint64_t)CFSTR("com.apple.safari.credit-cards"));
  v11 = v33;
  if (*((_BYTE *)v33 + 24))
  {
    v12 = 0;
    v27 = (const void *)kSecAttrMultiUser;
    while (1)
    {
      v13 = sub_10000EF14("SecDeleteItemsOnSignOut");
      v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
      v15 = (uint64_t *)v40[v12];
      if (v14)
      {
        v24 = *v15;
        *(_DWORD *)buf = 138412546;
        v37 = v24;
        v38 = 2112;
        v39 = v2;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Deleting items from class=%@ with multi-user view=%@", buf, 0x16u);
      }
      v16 = (CFDictionaryRef *)sub_1000114E8((uint64_t)v15, v2, 0, *(_QWORD *)(a1 + 32), *(__CFString ***)(a1 + 40));
      if (!v16)
        break;
      v17 = v16;
      sub_100012178(v27, (const __CFBoolean *)v2, (uint64_t)v16);
      sub_100012178(kSecAttrSynchronizable, kCFBooleanTrue, (uint64_t)v17);
      for (i = 0; i < CFArrayGetCount(v10); ++i)
      {
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v10, i);
        sub_100120910(kSecAttrAccessGroup, ValueAtIndex, (uint64_t)v17);
      }
      v20 = *(_QWORD *)(a1 + 48);
      v29 = *(CFTypeRef **)(a1 + 40);
      v30.isa = _NSConcreteStackBlock;
      *(_QWORD *)&v30.flags = 0x40000000;
      v30.invoke = (void (*)(void *, ...))sub_10013A628;
      v30.descriptor = (Block_descriptor_1 *)&unk_1002E7E78;
      v31 = v17;
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 0x40000000;
      v28[2] = sub_10013A650;
      v28[3] = &unk_1002E7EA0;
      v28[4] = &v32;
      v28[5] = v20;
      v21 = sub_10001E280(v17, v20, v29, 0, &v30, 0, 0, (uint64_t)v28);
      if (*((_BYTE *)v33 + 24))
        v22 = v21;
      else
        v22 = 0;
      *((_BYTE *)v33 + 24) = v22;
      sub_100011108((const void **)v17, 0);
      v11 = v33;
      if (*((_BYTE *)v33 + 24))
      {
        if (v12++ < 3)
          continue;
      }
      goto LABEL_21;
    }
    v11 = v33;
    *((_BYTE *)v33 + 24) = 0;
  }
LABEL_21:
  if (v10)
  {
    CFRelease(v10);
    v11 = v33;
  }
  v25 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v32, 8);
  return v25;
}

BOOL sub_10013A628(uint64_t a1, const void **a2)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 8), *a2) != 0;
}

CFStringRef **sub_10013A650(uint64_t a1, CFStringRef **a2, _BYTE *a3)
{
  CFStringRef **result;
  uint64_t v6;
  char v7;

  result = sub_10001E4C0(a2, *(_QWORD *)(a1 + 40), kCFBooleanFalse, 0, *(CFTypeRef **)(a1 + 48));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v6 + 24))
    v7 = (char)result;
  else
    v7 = 0;
  *(_BYTE *)(v6 + 24) = v7;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *a3 = 1;
  return result;
}

uint64_t sub_10013A6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFString **a5)
{
  _QWORD v6[9];

  if (*(_BYTE *)(a4 + 44))
    return sub_100019F20(-34020, a5, CFSTR("App Clips may not call this API"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_10013A750;
  v6[3] = &unk_1002E7FA0;
  v6[4] = a5;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a4;
  v6[8] = a3;
  return sub_100011A30(1, 1, 0, (uint64_t)a5, (uint64_t)v6);
}

BOOL sub_10013A750(uint64_t a1, uint64_t a2)
{
  CFTypeRef *v2;
  uint64_t v3;
  _QWORD v5[5];
  __int128 v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;

  v2 = *(CFTypeRef **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_10013A7C0;
  v5[3] = &unk_1002E7F80;
  v5[4] = a2;
  v6 = *(_OWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v2;
  v9 = v3;
  return sub_10001AC0C(a2, 2, v2, (uint64_t)v5);
}

uint64_t sub_10013A7C0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  const __CFDictionary *v13;
  uint64_t v14;
  _BOOL4 v15;
  CFIndex Code;
  CFErrorRef v17;
  const __CFArray *v18;
  CFIndex v19;
  uint64_t v20;
  const __CFDictionary *ValueAtIndex;
  CFIndex v22;
  const __CFArray *v23;
  uint64_t v24;
  __CFString **v25;
  uint64_t result;
  uint64_t *v27;
  const __CFBoolean *v28;
  int v29;
  CFErrorRef *v30;
  CFIndex v31;
  CFErrorRef err;
  _QWORD v33[4];

  v9 = 0;
  err = 0;
  v33[0] = kSecClassGenericPassword;
  v33[1] = kSecClassInternetPassword;
  v33[2] = kSecClassCertificate;
  v33[3] = kSecClassKey;
  do
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(const void **)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = sub_10012E96C(kCFAllocatorDefault, a2, a3, a4, a5, a6, a7, a8, (uint64_t)kSecClass, v33[v9]);
    v14 = sub_1000112B0(v13, *(const void **)(v12 + 24), -1, v12, (__CFString **)&err);
    CFRelease(v13);
    if (!v14
      || (sub_100012018(v14, v11),
          v15 = sub_10001B508(v10, v14, (uint64_t)v11, (CFTypeRef *)&err),
          (sub_10001CAF8(v14, v15, &err) & 1) == 0))
    {
      Code = CFErrorGetCode(err);
      v17 = err;
      if (Code != -25300)
      {
        if (err)
        {
          v30 = *(CFErrorRef **)(a1 + 64);
          if (v30 && !*v30)
          {
            result = 0;
            *v30 = err;
            return result;
          }
          CFRelease(err);
        }
        return 0;
      }
      if (err)
      {
        err = 0;
        CFRelease(v17);
      }
    }
    ++v9;
  }
  while (v9 != 4);
  v18 = *(const __CFArray **)(a1 + 72);
  if (v18)
  {
    v19 = 0;
    while (v19 < CFArrayGetCount(v18))
    {
      v20 = *(_QWORD *)(a1 + 32);
      v31 = v19;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v19);
      v22 = 0;
      v23 = *(const __CFArray **)(a1 + 48);
      v24 = *(_QWORD *)(a1 + 56);
      v25 = *(__CFString ***)(a1 + 64);
      while (v22 < CFArrayGetCount(v23))
      {
        result = sub_1000112B0(ValueAtIndex, *(const void **)(v24 + 24), 0, v24, v25);
        if (!result)
          return result;
        v27 = (uint64_t *)result;
        v28 = (const __CFBoolean *)CFArrayGetValueAtIndex(v23, v22);
        sub_100012178(kSecAttrAccessGroup, v28, (uint64_t)v27);
        sub_10001C690(v27, v28);
        if (v27[5])
        {
          v29 = 0;
        }
        else
        {
          sub_10001BC70((CFDictionaryRef *)v27);
          v29 = sub_10001B6D8(v20, (uint64_t)v27, 0, v25);
        }
        ++v22;
        if ((sub_10001CAF8((uint64_t)v27, v29, (CFErrorRef *)v25) & 1) == 0)
          return 0;
      }
      v19 = v31 + 1;
      v18 = *(const __CFArray **)(a1 + 72);
    }
  }
  return 1;
}

uint64_t sub_10013AA78(uint64_t a1)
{
  NSObject *v2;
  _QWORD v4[6];

  v2 = sub_10000EF14("SecError");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SecItemServerDeleteAll", (uint8_t *)v4, 2u);
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10013AB28;
  v4[3] = &unk_1002E8958;
  v4[4] = a1;
  return sub_100011A30(1, 1, 0, a1, (uint64_t)v4);
}

uint64_t sub_10013AB28(uint64_t a1, uint64_t a2)
{
  CFTypeRef *v4;
  uint64_t result;
  _QWORD v6[6];

  v4 = *(CFTypeRef **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_10013ABAC;
  v6[3] = &unk_1002E8938;
  v6[4] = a2;
  v6[5] = v4;
  result = sub_10001AC0C(a2, 2, v4, (uint64_t)v6);
  if ((_DWORD)result)
    return sub_10001B41C(a2, CFSTR("VACUUM;"), *(CFTypeRef **)(a1 + 32));
  return result;
}

uint64_t sub_10013ABAC(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = sub_10001B41C(*(_QWORD *)(a1 + 32), CFSTR("DELETE FROM genp WHERE sync=1;"), *(CFTypeRef **)(a1 + 40));
  v3 = v2 & sub_10001B41C(*(_QWORD *)(a1 + 32), CFSTR("DELETE FROM inet WHERE sync=1;"), *(CFTypeRef **)(a1 + 40));
  v4 = sub_10001B41C(*(_QWORD *)(a1 + 32), CFSTR("DELETE FROM cert WHERE sync=1;"), *(CFTypeRef **)(a1 + 40));
  v5 = v3 & v4 & sub_10001B41C(*(_QWORD *)(a1 + 32), CFSTR("DELETE FROM keys WHERE sync=1;"), *(CFTypeRef **)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = sub_1000119B8((uint64_t)CFSTR("genp"), &qword_100341240, (uint64_t)&unk_100341238);
  LODWORD(v6) = sub_10013ACFC(v6, v7, *(const void ***)(a1 + 40));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = sub_1000119B8((uint64_t)CFSTR("inet"), &qword_100341250, (uint64_t)&unk_100341248);
  LODWORD(v8) = v6 & sub_10013ACFC(v8, v9, *(const void ***)(a1 + 40));
  v10 = *(_QWORD *)(a1 + 32);
  v11 = sub_1000119B8((uint64_t)CFSTR("cert"), &qword_100341260, (uint64_t)&unk_100341258);
  LODWORD(v8) = v5 & v8 & sub_10013ACFC(v10, v11, *(const void ***)(a1 + 40));
  v12 = *(_QWORD *)(a1 + 32);
  v13 = sub_1000119B8((uint64_t)CFSTR("keys"), &qword_100341270, (uint64_t)&unk_100341268);
  return v8 & sub_10013ACFC(v12, v13, *(const void ***)(a1 + 40));
}

BOOL sub_10013ACFC(uint64_t a1, uint64_t a2, const void **a3)
{
  __CFDictionary *Mutable;
  CFDictionaryRef *v7;
  const void **v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  NSObject *v13;
  CFTypeRef v14;
  _QWORD v15[7];
  uint64_t v16;
  CFTypeRef *v17;
  uint64_t v18;
  __CFString *v19;
  uint8_t buf[4];
  CFTypeRef v21;

  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, kSecMatchLimit, kSecMatchLimitAll);
  v16 = 0;
  v17 = (CFTypeRef *)&v16;
  v18 = 0x2000000000;
  v19 = 0;
  v7 = (CFDictionaryRef *)sub_1000114E8(a2, 0, Mutable, 0, &v19);
  if (!v7)
  {
    v13 = sub_10000EF14("SecError");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = v17[3];
      *(_DWORD *)buf = 138412290;
      v21 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SecItemServerDeleteAll: aborting because failed to initialize Query: %@", buf, 0xCu);
    }
    abort();
  }
  v8 = (const void **)v7;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 0x40000000;
  v15[2] = sub_10013AEF8;
  v15[3] = &unk_1002E89C0;
  v15[5] = a2;
  v15[6] = a1;
  v15[4] = &v16;
  sub_10001E280(v7, a1, v17 + 3, &stru_1002E8998, 0, 0, 0, (uint64_t)v15);
  sub_100011108(v8, (CFErrorRef *)v17 + 3);
  v9 = v17[3];
  if (v9)
  {
    if (a3)
    {
      v10 = *a3;
      v11 = v17[3];
      if (*a3)
      {
        *a3 = 0;
        CFRelease(v10);
        v11 = v17[3];
      }
      *a3 = v11;
    }
    else
    {
      v17[3] = 0;
      CFRelease(v9);
    }
  }
  _Block_object_dispose(&v16, 8);
  return v9 == 0;
}

uint64_t sub_10013AEF8(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  const void *Value;

  result = sub_10012EA5C(*(const __CFDictionary **)(a2 + 48), a1[5], 0);
  if ((result & 1) == 0)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 48), kSecAttrAccessGroup);
    result = CFEqual(Value, CFSTR("com.apple.bluetooth"));
    if (!(_DWORD)result)
      return (uint64_t)sub_10001E4C0((CFStringRef **)a2, a1[6], kCFBooleanFalse, 0, (CFTypeRef *)(*(_QWORD *)(a1[4] + 8) + 24));
  }
  return result;
}

BOOL sub_10013AF80(id a1, const SecDbAttr *a2)
{
  return (a2->var2 & 2) != 0 && CFEqual(a2->var0, CFSTR("data")) == 0;
}

uint64_t sub_10013AFB8(const void *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v6;
  CFTypeID v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v13[8];
  _QWORD context[7];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  CFRange v20;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 1;
  if (qword_100341318 != -1)
    dispatch_once(&qword_100341318, &stru_1002E7FE0);
  v19[0] = sub_1000119B8((uint64_t)CFSTR("inet"), &qword_100341250, (uint64_t)&unk_100341248);
  v19[1] = sub_1000119B8((uint64_t)CFSTR("genp"), &qword_100341240, (uint64_t)&unk_100341238);
  v19[2] = sub_1000119B8((uint64_t)CFSTR("keys"), &qword_100341270, (uint64_t)&unk_100341268);
  v19[3] = sub_1000119B8((uint64_t)CFSTR("cert"), &qword_100341260, (uint64_t)&unk_100341258);
  if (a1)
  {
    v7 = CFGetTypeID(a1);
    if (v7 == CFArrayGetTypeID())
    {
      if (CFArrayGetCount((CFArrayRef)a1))
      {
        context[0] = _NSConcreteStackBlock;
        context[1] = 0x40000000;
        context[2] = sub_10013B248;
        context[3] = &unk_1002E8028;
        context[4] = &v15;
        context[5] = a3;
        context[6] = a1;
        v20.length = CFArrayGetCount((CFArrayRef)a1);
        v20.location = 0;
        CFArrayApplyFunction((CFArrayRef)a1, v20, (CFArrayApplierFunction)sub_100133D68, context);
        if (*((_BYTE *)v16 + 24))
        {
          v13[0] = _NSConcreteStackBlock;
          v13[1] = 0x40000000;
          v13[2] = sub_10013B310;
          v13[3] = &unk_1002E8068;
          v13[4] = a3;
          v13[5] = v19;
          v13[6] = a2;
          v13[7] = a1;
          v10 = sub_100011A30(1, 1, 0, (uint64_t)a3, (uint64_t)v13);
          *((_BYTE *)v16 + 24) = v10;
        }
      }
      else
      {
        *((_BYTE *)v16 + 24) = 0;
        sub_100032660(1, CFSTR("com.apple.security.xpc"), 0, a3, v9, CFSTR("accessGroups e empty"));
      }
    }
    else
    {
      *((_BYTE *)v16 + 24) = 0;
      sub_100032660(1, CFSTR("com.apple.security.xpc"), 0, a3, v8, CFSTR("accessGroups not CFArray, got %@"), a1);
    }
  }
  else
  {
    *((_BYTE *)v16 + 24) = 0;
    sub_100032660(1, CFSTR("com.apple.security.xpc"), 0, a3, v6, CFSTR("accessGroups not CFArray, got %@"), 0);
  }
  v11 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v15, 8);
  return v11;
}

void sub_10013B248(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeID v7;
  uint64_t v8;
  uint64_t v9;

  if (cf)
  {
    v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      if (!CFSetContainsValue((CFSetRef)qword_100341320, cf))
        return;
      sub_100032660(1, CFSTR("com.apple.security.xpc"), 0, *(CFTypeRef **)(a1 + 40), v9, CFSTR("illegal access group: %@"), *(_QWORD *)(a1 + 48));
    }
    else
    {
      sub_100032660(1, CFSTR("com.apple.security.xpc"), 0, *(CFTypeRef **)(a1 + 40), v8, CFSTR("access not a string: %@"), cf);
    }
  }
  else
  {
    sub_100032660(1, CFSTR("com.apple.security.xpc"), 0, *(CFTypeRef **)(a1 + 40), a5, CFSTR("access not a string: %@"), 0);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
}

uint64_t sub_10013B310(uint64_t a1, uint64_t a2)
{
  CFTypeRef *v4;
  uint64_t result;
  _QWORD v6[4];
  __int128 v7;
  CFTypeRef *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(CFTypeRef **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_10013B3A4;
  v6[3] = &unk_1002E8048;
  v7 = *(_OWORD *)(a1 + 40);
  v8 = v4;
  v9 = a2;
  v10 = *(_QWORD *)(a1 + 56);
  result = sub_10001AC0C(a2, 2, v4, (uint64_t)v6);
  if ((_DWORD)result)
    return sub_10001B41C(a2, CFSTR("VACUUM"), *(CFTypeRef **)(a1 + 32));
  return result;
}

uint64_t sub_10013B3A4(uint64_t a1)
{
  uint64_t v2;
  const void **v3;
  const void **v4;
  CFErrorRef *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v2 = 0;
  cf = 0;
  do
  {
    v3 = (const void **)sub_1000114E8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v2), *(const void **)(*(_QWORD *)(a1 + 40) + 24), 0, *(_QWORD *)(a1 + 40), *(__CFString ***)(a1 + 48));
    if (v3)
    {
      v4 = v3;
      sub_10001B508(*(_QWORD *)(a1 + 56), (uint64_t)v3, *(_QWORD *)(a1 + 64), &cf);
      v5 = *(CFErrorRef **)(a1 + 48);
      v3 = v4;
    }
    else
    {
      v5 = *(CFErrorRef **)(a1 + 48);
    }
    sub_100011108(v3, v5);
    v6 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v6);
    }
    v2 += 8;
  }
  while (v2 != 32);
  return 1;
}

void sub_10013B440(id a1)
{
  _OWORD v1[2];

  v1[0] = *(_OWORD *)off_1002E8000;
  v1[1] = *(_OWORD *)off_1002E8010;
  qword_100341320 = (uint64_t)CFSetCreate(0, (const void **)v1, 4, &kCFTypeSetCallBacks);
}

BOOL sub_10013B4B4(const __CFDictionary *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t *a6, __CFString **a7)
{
  void *v13;
  void *v14;
  const __CFString *v15;
  xpc_object_t v16;
  void *v17;
  xpc_object_t v18;
  void *v19;
  BOOL v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *i;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  unsigned __int8 v40;
  CFStringRef v41;
  CFTypeRef v42;
  _BOOL8 v43;
  void *v45;
  const void *v46;
  NSObject *v47;
  id v48;
  void *v49;
  id v50;
  NSObject *v51;
  NSObject *v52;
  unsigned int v53;
  char v54;
  unsigned int v55;
  char v56;
  char v57;
  const void *v58;
  int v59;
  __CFDictionary *Mutable;
  __CFDictionary *v61;
  _BOOL4 v62;
  const void *v63;
  __CFString *v64;
  CFNumberRef v65;
  _BOOL4 v66;
  __CFDictionary *v67;
  CFDataRef ExternalRepresentation;
  BOOL v69;
  const void *v70;
  __CFString *v71;
  CFStringRef v72;
  CFStringRef v73;
  CFDataRef v74;
  CFNumberRef v75;
  CFNumberRef v76;
  const void *v77;
  __CFString *v78;
  uint64_t v79;
  uint64_t *v80;
  void *context;
  __CFString **v82;
  const void *v83;
  uint64_t v84;
  const __CFString *v85;
  unsigned int v87;
  void *value;
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  void *values;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE buf[12];
  __int16 v102;
  void *v103;

  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v13 = (void *)CFDictionaryGetValue(a1, kSecAttrServer);
  v14 = v13;
  if (v13)
    CFRetain(v13);
  value = (void *)CFDictionaryGetValue(a1, kSecAttrAccount);
  v15 = (const __CFString *)CFDictionaryGetValue(a1, kSecSharedPassword);
  values = CFSTR("*");
  *(_QWORD *)buf = 0;
  v16 = sub_1001C1EAC(7u, (CFTypeRef *)buf);
  v85 = v15;
  if (v16)
  {
    v17 = v16;
    xpc_dictionary_set_data(v16, "client", a3, 0x20uLL);
    v18 = sub_1001C1C74(v17, (CFTypeRef *)buf);
    if (v18)
    {
      v19 = v18;
      v20 = sub_1001C1F28(v18, (__CFString **)buf) > 0;
      xpc_release(v19);
    }
    else
    {
      v20 = 0;
    }
    xpc_release(v17);
  }
  else
  {
    v20 = 0;
  }
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  if (!v20)
  {
    sub_100019F20(-909, a7, CFSTR("Password AutoFill for iCloud Keychain must be enabled in Settings > Passwords to save passwords"));
    goto LABEL_41;
  }
  if (!v14)
  {
    if (value)
    {
LABEL_39:
      sub_100019F20(-50, a7, CFSTR("No domain provided"));
      v43 = 0;
      v14 = 0;
      goto LABEL_42;
    }
    v14 = 0;
LABEL_40:
    sub_100019F20(-50, a7, CFSTR("No account provided"));
    goto LABEL_41;
  }
  v83 = a3;
  v84 = a4;
  v21 = objc_autoreleasePoolPush();
  *(_QWORD *)buf = v14;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", buf, 1));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[_SWCServiceSpecifier serviceSpecifiersWithEntitlementValue:error:](_SWCServiceSpecifier, "serviceSpecifiersWithEntitlementValue:error:", v22, 0));
  v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "firstObject"));

  if (v24
    || (v24 = objc_msgSend(objc_alloc((Class)_SWCServiceSpecifier), "initWithServiceType:applicationIdentifier:domain:", 0, 0, v14)) != 0)
  {
    v25 = v24;

    objc_autoreleasePoolPop(v21);
    CFRelease(v14);
    v26 = v25;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "domainHost"));

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "domainPort"));
    v28 = v27;
    v29 = v84;
    if (v27)
      v87 = objc_msgSend(v27, "unsignedShortValue");
    else
      v87 = -1;

    if (v14)
      CFRetain(v14);
    CFRelease(v26);
  }
  else
  {
    objc_autoreleasePoolPop(v21);
    v87 = -1;
    v29 = v84;
  }
  if (!value)
    goto LABEL_40;
  if (!v14)
    goto LABEL_39;
  if (!v29)
  {
    sub_100019F20(-34018, a7, CFSTR("Missing application-identifier entitlement"));
    goto LABEL_41;
  }
  v80 = a6;
  v82 = a7;
  context = objc_autoreleasePoolPush();
  v79 = _SWCServiceTypeWebCredentials;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v30 = (id)objc_claimAutoreleasedReturnValue(+[_SWCServiceSpecifier serviceSpecifiersWithEntitlementValue:serviceType:error:](_SWCServiceSpecifier, "serviceSpecifiersWithEntitlementValue:serviceType:error:", a5));
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v97, buf, 16);
  v32 = v87;
  if (!v31)
    goto LABEL_37;
  v33 = v31;
  v34 = *(_QWORD *)v98;
  while (2)
  {
    for (i = 0; i != v33; i = (char *)i + 1)
    {
      if (*(_QWORD *)v98 != v34)
        objc_enumerationMutation(v30);
      v36 = *(void **)(*((_QWORD *)&v97 + 1) + 8 * (_QWORD)i);
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "domainHost"));
      if (!objc_msgSend(v37, "caseInsensitiveCompare:", v14))
      {
        if ((v32 & 0x80000000) != 0
          || (v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "domainPort")),
              v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v32)),
              v40 = objc_msgSend(v38, "isEqualToNumber:", v39),
              v39,
              v32 = v87,
              v38,
              (v40 & 1) != 0))
        {

          objc_autoreleasePoolPop(context);
          v45 = objc_autoreleasePoolPush();
          v46 = sub_10000EF14("swc");
          v47 = objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v84;
            v102 = 2112;
            v103 = v14;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Application %@ is requesting approval for %@", buf, 0x16u);
          }

          v48 = objc_msgSend(objc_alloc((Class)_SWCServiceSpecifier), "initWithServiceType:applicationIdentifier:domain:", v79, v84, v14);
          *(_QWORD *)&v97 = 0;
          v49 = (void *)objc_claimAutoreleasedReturnValue(+[_SWCServiceDetails serviceDetailsWithServiceSpecifier:error:](_SWCServiceDetails, "serviceDetailsWithServiceSpecifier:error:", v48, &v97));
          v50 = (id)v97;
          if (v49)
          {
            v51 = objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "firstObject"));
            v52 = v51;
            if (v51)
            {
              v53 = -[NSObject userApprovalState](v51, "userApprovalState");
              if (v53 == 1)
                v54 = 1;
              else
                v54 = 2 * (v53 == 2);
              v55 = -[NSObject siteApprovalState](v52, "siteApprovalState");
              v56 = v54 | 4;
              if (v55 != 1)
                v56 = v54;
              if (v55 == 2)
                v57 = v54 | 8;
              else
                v57 = v56;
LABEL_64:

              objc_autoreleasePoolPop(v45);
              v59 = v57 & 4;
              if (v82)
              {
                if ((v57 & 4) != 0)
                {
                  if ((v57 & 2) == 0)
                    goto LABEL_70;
                  v59 = 1;
                  sub_100019F20(-25293, v82, CFSTR("User denied access to \"%@\" by \"%@\""), v14, v84);
                }
                else
                {
                  sub_100019F20(-25293, v82, CFSTR("\"%@\" failed to approve \"%@\""), v14, v84);
                }
              }
              if (!v59)
                goto LABEL_41;
LABEL_70:
              *(_QWORD *)&v93 = 0;
              *((_QWORD *)&v93 + 1) = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
              *((_QWORD *)&v94 + 1) = *(_QWORD *)(a2 + 24);
              LOWORD(v94) = 0;
              BYTE2(v94) = 0;
              Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              if (!Mutable)
              {
                sub_100019F20(-108, v82, CFSTR("Unable to create query dictionary"));
                goto LABEL_41;
              }
              v61 = Mutable;
              CFDictionaryAddValue(Mutable, kSecClass, kSecClassInternetPassword);
              CFDictionaryAddValue(v61, kSecAttrAccessGroup, CFSTR("com.apple.cfnetwork"));
              CFDictionaryAddValue(v61, kSecAttrAuthenticationType, kSecAttrAuthenticationTypeHTMLForm);
              CFDictionaryAddValue(v61, kSecAttrServer, v14);
              CFDictionaryAddValue(v61, kSecAttrSynchronizable, kCFBooleanTrue);
              CFDictionarySetValue(v61, kSecAttrAccount, CFSTR("Passwords not saved"));
              v62 = sub_1000109C4(v61, (uint64_t)&v93, v80, v82);
              if (v80)
              {
                v63 = (const void *)*v80;
                if (*v80)
                {
                  *v80 = 0;
                  CFRelease(v63);
                }
              }
              if (v82)
              {
                v64 = *v82;
                if (*v82)
                {
                  *v82 = 0;
                  CFRelease(v64);
                }
              }
              if (v62)
              {
                sub_100019F20(-25299, v82, CFSTR("Item already exists for this server"));
              }
              else
              {
                CFDictionarySetValue(v61, kSecAttrAccount, value);
                if (v87 - 1 <= 0xFFFFFFFD)
                {
                  *(_WORD *)buf = v87;
                  v65 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
                  CFDictionaryAddValue(v61, kSecAttrPort, v65);
                  if (v65)
                    CFRelease(v65);
                }
                CFDictionaryAddValue(v61, kSecReturnData, kCFBooleanTrue);
                v66 = sub_1000109C4(v61, (uint64_t)&v93, v80, v82);
                CFDictionaryRemoveValue(v61, kSecReturnData);
                if (v66)
                {
                  if (v85)
                  {
                    v67 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                    ExternalRepresentation = CFStringCreateExternalRepresentation(kCFAllocatorDefault, v85, 0x8000100u, 0);
                    CFDictionaryAddValue(v67, kSecValueData, ExternalRepresentation);
                    v69 = v80 && *v80 && CFEqual((CFTypeRef)*v80, ExternalRepresentation) != 0;
                    if (ExternalRepresentation)
                      CFRelease(ExternalRepresentation);
                    CFDictionaryAddValue(v67, kSecAttrComment, CFSTR("default"));
                    v43 = (v69
                        || (v91[0] = _NSConcreteStackBlock,
                            v91[1] = 0x40000000,
                            v91[2] = sub_10013C140,
                            v91[3] = &unk_1002E8090,
                            v91[4] = a2,
                            v91[5] = v84,
                            sub_1001C2174(1u, v83, v61, (CFTypeRef *)v82, (uint64_t)v91)))
                       && sub_100005B80(v61, v67, (uint64_t)&v93, v82);
                  }
                  else
                  {
                    v90[0] = _NSConcreteStackBlock;
                    v90[1] = 0x40000000;
                    v90[2] = sub_10013C15C;
                    v90[3] = &unk_1002E80B0;
                    v90[4] = a2;
                    v90[5] = v84;
                    v43 = sub_1001C2174(2u, v83, v61, (CFTypeRef *)v82, (uint64_t)v90)
                       && sub_10001C730(v61, (uint64_t)&v93, v82);
                    v67 = 0;
                  }
                  if (v80)
                  {
                    v77 = (const void *)*v80;
                    if (*v80)
                    {
                      *v80 = 0;
                      CFRelease(v77);
                    }
                  }
                  if (v82)
                  {
                    v78 = *v82;
                    if (*v82)
                    {
                      *v82 = 0;
                      CFRelease(v78);
                    }
                  }
                  if (v67)
                    CFRelease(v67);
                  goto LABEL_127;
                }
                if (v80)
                {
                  v70 = (const void *)*v80;
                  if (*v80)
                  {
                    *v80 = 0;
                    CFRelease(v70);
                  }
                }
                if (v82)
                {
                  v71 = *v82;
                  if (*v82)
                  {
                    *v82 = 0;
                    CFRelease(v71);
                  }
                }
                if (v85)
                {
                  v72 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@ (%@)"), v14, value);
                  if (v72)
                  {
                    v73 = v72;
                    CFDictionaryAddValue(v61, kSecAttrLabel, v72);
                    CFRelease(v73);
                  }
                  CFDictionaryAddValue(v61, kSecAttrProtocol, kSecAttrProtocolHTTPS);
                  v74 = CFStringCreateExternalRepresentation(kCFAllocatorDefault, v85, 0x8000100u, 0);
                  CFDictionarySetValue(v61, kSecValueData, v74);
                  if (v74)
                    CFRelease(v74);
                  CFDictionarySetValue(v61, kSecAttrComment, CFSTR("default"));
                  if (*((_QWORD *)&v93 + 1))
                    CFRelease(*((CFTypeRef *)&v93 + 1));
                  *((_QWORD *)&v93 + 1) = CFArrayCreate(kCFAllocatorDefault, (const void **)&off_1002E8088, 1, &kCFTypeArrayCallBacks);
                  *(_DWORD *)buf = 1937204065;
                  v75 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, buf);
                  if (v75)
                  {
                    v76 = v75;
                    CFDictionarySetValue(v61, kSecAttrCreator, v75);
                    CFRelease(v76);
                  }
                  v89[0] = _NSConcreteStackBlock;
                  v89[1] = 0x40000000;
                  v89[2] = sub_10013C178;
                  v89[3] = &unk_1002E80D0;
                  v89[4] = a2;
                  v89[5] = v84;
                  v43 = 0;
                  if (sub_1001C2174(0, v83, v61, (CFTypeRef *)v82, (uint64_t)v89))
                    v43 = sub_10001C1F0(v61, (uint64_t)&v93, (uint64_t)v80, v82);
                  goto LABEL_127;
                }
              }
              v43 = 1;
LABEL_127:
              CFRelease(v61);
              goto LABEL_42;
            }
          }
          else
          {
            v58 = sub_10000EF14("SecError");
            v52 = objc_claimAutoreleasedReturnValue(v58);
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v50;
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "+[_SWCServiceDetails serviceDetailsWithServiceSpecifier:error:] failed with %@", buf, 0xCu);
            }
          }
          v57 = 0;
          goto LABEL_64;
        }
      }

    }
    v33 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v97, buf, 16);
    if (v33)
      continue;
    break;
  }
LABEL_37:

  objc_autoreleasePoolPop(context);
  v41 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@ not found in %@ entitlement"), v14, CFSTR("com.apple.developer.associated-domains"));
  if (v41)
  {
    v42 = v41;
    sub_100019F20(-34018, v82, CFSTR("%@"), v41);
    goto LABEL_82;
  }
  v42 = CFRetain(CFSTR("Requested domain not found in entitlement"));
  sub_100019F20(-34018, v82, CFSTR("%@"), v42);
  if (v42)
LABEL_82:
    CFRelease(v42);
LABEL_41:
  v43 = 0;
LABEL_42:
  if (*((_QWORD *)&v93 + 1))
    CFRelease(*((CFTypeRef *)&v93 + 1));
  if (v14)
    CFRelease(v14);
  return v43;
}

void sub_10013C140(uint64_t a1, uint64_t a2)
{
  if (a2)
    sub_100125900(*(_QWORD *)(a1 + 40), a2, kCFBooleanFalse);
}

void sub_10013C15C(uint64_t a1, uint64_t a2)
{
  if (a2)
    sub_100125900(*(_QWORD *)(a1 + 40), a2, kCFBooleanFalse);
}

void sub_10013C178(uint64_t a1, uint64_t a2)
{
  if (a2)
    sub_100125900(*(_QWORD *)(a1 + 40), a2, kCFBooleanFalse);
}

uint64_t sub_10013C194(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[9];
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 0x40000000;
  v12[2] = sub_10013C318;
  v12[3] = &unk_1002E8120;
  v13 = a4;
  v12[6] = a3;
  v12[7] = a5;
  v12[4] = &v14;
  v12[5] = a2;
  v12[8] = a1;
  sub_100011A30(0, 1, 0, (uint64_t)a5, (uint64_t)v12);
  v6 = sub_10000EF14("SecServerKeychainCreateBackup");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (v15[3])
      v7 = "success";
    else
      v7 = "fail";
    if (a5)
      v8 = *a5;
    else
      v8 = 0;
    *(_DWORD *)buf = 136315394;
    v19 = v7;
    v20 = 2112;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Backup result: %s (%@)", buf, 0x16u);
  }
  if (a5)
    v9 = *a5;
  else
    v9 = 0;
  LKABackupReportEnd(v15[3] != 0, v9);
  v10 = v15[3];
  _Block_object_dispose(&v14, 8);
  return v10;
}

BOOL sub_10013C318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef *v5;
  _QWORD v7[4];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  char v12;

  LKABackupReportStart(*(_QWORD *)(a1 + 40) != 0, *(_QWORD *)(a1 + 48) != 0, *(unsigned __int8 *)(a1 + 72));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_10013C3C0;
  v7[3] = &unk_1002E80F8;
  v12 = *(_BYTE *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = v4;
  v10 = a2;
  v5 = *(CFTypeRef **)(a1 + 56);
  v11 = vextq_s8(*(int8x16_t *)(a1 + 56), *(int8x16_t *)(a1 + 56), 8uLL);
  return sub_10001AC0C(a2, 3, v5, (uint64_t)v7);
}

BOOL sub_10013C3C0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFDataRef v9;
  int v10;
  CFTypeRef *v11;
  uint64_t v12;
  const void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint8_t v19[16];
  _BYTE buf[12];
  __int16 v21;
  const char *v22;

  v2 = sub_10000EF14("SecServerKeychainCreateBackup");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_QWORD *)(a1 + 40))
      v3 = "provided";
    else
      v3 = "device";
    v4 = ", EMCS mode";
    if (!*(_BYTE *)(a1 + 80))
      v4 = "";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v3;
    v21 = 2080;
    v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Performing backup from %s keybag%s", buf, 0x16u);
  }
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  if (*(_OWORD *)(a1 + 40) == 0)
  {
    v9 = sub_10013C6A4(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0, *(__CFString ***)(a1 + 72));
    goto LABEL_24;
  }
  v10 = *(unsigned __int8 *)(a1 + 80);
  v11 = *(CFTypeRef **)(a1 + 72);
  v18 = -1431655766;
  kdebug_trace(726794272, 0, 0, 0, 0);
  *(_QWORD *)buf = 0;
  v12 = MKBKeyBagCreateWithData(v6, buf);
  if (!(_DWORD)v12)
  {
    if (v10)
    {
      v14 = sub_10000EF14("keychainbackup");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "skipping keybag unlock for EMCS", v19, 2u);
      }
    }
    else
    {
      v15 = MKBKeyBagUnlock(*(_QWORD *)buf, v5);
      if ((_DWORD)v15)
      {
        v16 = v15;
        CFRelease(*(CFTypeRef *)buf);
        if (sub_10003252C(v16, v11, CFSTR("failed to unlock bag: %d"), v16))
          goto LABEL_12;
LABEL_18:
        kdebug_trace(726794276, 0, 0, 0, 0);
        v9 = 0;
        goto LABEL_24;
      }
    }
    v13 = *(const void **)buf;
    goto LABEL_20;
  }
  if (!sub_10003252C(v12, v11, CFSTR("MKBKeyBagCreateWithData failed: %d"), v12))
    goto LABEL_18;
LABEL_12:
  v13 = 0;
LABEL_20:
  if (MKBKeyBagGetAKSHandle(v13, &v18))
  {
    v9 = 0;
  }
  else
  {
    kdebug_trace(726794276, 0, 0, 0, 0);
    kdebug_trace(726794264, 0, 0, 0, 0);
    v9 = sub_10013C6A4(v7, v8, &v18, (__CFString **)v11);
  }
  kdebug_trace(726794276, 0, 0, 0, 0);
  if (v13)
    CFRelease(v13);
LABEL_24:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v9;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

CFDataRef sub_10013C6A4(uint64_t a1, uint64_t a2, int *a3, __CFString **a4)
{
  __CFDictionary *v8;
  __CFDictionary *v9;
  CFDataRef Data;

  kdebug_trace(726794296, 0, 0, 0, 0);
  v8 = sub_10012FE48(a1, a2, a3, 2u, a4);
  if (v8)
  {
    v9 = v8;
    Data = CFPropertyListCreateData(kCFAllocatorDefault, v8, kCFPropertyListBinaryFormat_v1_0, 0, (CFErrorRef *)a4);
    CFRelease(v9);
  }
  else
  {
    Data = 0;
  }
  kdebug_trace(726794300, 0, 0, 0, 0);
  return Data;
}

uint64_t sub_10013C770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFString **a5)
{
  uint64_t result;
  _QWORD v6[9];

  if (!a1 || !a3)
    return sub_100019F20(-50, a5, CFSTR("backup or keybag missing"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_10013C808;
  v6[3] = &unk_1002E8140;
  v6[4] = a2;
  v6[5] = a1;
  v6[6] = a3;
  v6[7] = a4;
  v6[8] = a5;
  result = sub_100011A30(1, 1, 0, (uint64_t)a5, (uint64_t)v6);
  if ((_DWORD)result)
  {
    sub_100133374();
    sub_100133324();
    return 1;
  }
  return result;
}

uint64_t sub_10013C808(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const __CFData *v5;
  const __CFData *v6;
  CFTypeRef *v7;
  __int128 v8;
  NSObject *v9;
  const UInt8 *BytePtr;
  CFIndex Length;
  const UInt8 *v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _OWORD *v18;
  _BOOL4 v19;
  NSObject *v20;
  uint64_t result;
  NSObject *v22;
  _BOOL4 v23;
  CFTypeRef v24;
  int v25;
  _OWORD v26[4];
  __int128 buf;
  BOOL (*v28)(uint64_t);
  void *v29;
  uint64_t v30;
  CFTypeRef *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  int v35;
  int v36;

  v3 = a1[4];
  v4 = a1[5];
  v6 = (const __CFData *)a1[6];
  v5 = (const __CFData *)a1[7];
  v7 = (CFTypeRef *)a1[8];
  v25 = -1;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[2] = v8;
  v26[3] = v8;
  v26[0] = v8;
  v26[1] = v8;
  v9 = sub_10000EF14("SecServerKeychainRestore");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Restoring keychain backup", (uint8_t *)&buf, 2u);
  }
  kdebug_trace(726794248, 0, 0, 0, 0);
  BytePtr = CFDataGetBytePtr(v6);
  Length = CFDataGetLength(v6);
  if (v5)
  {
    v12 = CFDataGetBytePtr(v5);
    v13 = CFDataGetLength(v5);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = sub_1000265C4(BytePtr, Length, (uint64_t)v12, v13, &v25, v26);
  if ((_DWORD)v14)
  {
    v15 = v14;
    v16 = sub_10000EF14("SecWarning");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "SecServerKeychainRestore: aks_kc_backup_open_keybag failed: %d", (uint8_t *)&buf, 8u);
    }
    if (v7)
      sub_10003252C(v15, v7, CFSTR("aks_kc_backup_open_keybag failed: %d"), v15);
    kdebug_trace(726794244, 0, 0, 0, 0);
LABEL_20:
    v22 = sub_10000EF14("SecWarning");
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v23)
    {
      if (v7)
        v24 = *v7;
      else
        v24 = 0;
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "SecServerKeychainRestore: Restore failed with: %@", (uint8_t *)&buf, 0xCu);
      return 0;
    }
    return result;
  }
  v17 = sub_10000EF14("SecServerKeychainRestore");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v25;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "aks_kc_backup_open_keybag got backup_keybag:%d", (uint8_t *)&buf, 8u);
  }
  kdebug_trace(726794252, 0, 0, 0, 0);
  kdebug_trace(726794240, 0, 0, 0, 0);
  v18 = v26;
  if (v25 != -1)
    v18 = 0;
  *(_QWORD *)&buf = _NSConcreteStackBlock;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v28 = sub_10013CBB4;
  v29 = &unk_1002E89E0;
  v30 = v4;
  v31 = v7;
  v32 = a2;
  v33 = v3;
  v34 = v18;
  v35 = v25;
  v36 = dword_1003414E0;
  v19 = sub_10001AC0C(a2, 2, v7, (uint64_t)&buf);
  kdebug_trace(726794244, 0, 0, 0, 0);
  if (!v19)
    goto LABEL_20;
  v20 = sub_10000EF14("SecServerKeychainRestore");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Restore completed successfully", (uint8_t *)&buf, 2u);
  }
  return 1;
}

BOOL sub_10013CBB4(uint64_t a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  CFTypeID v4;
  _BOOL8 v5;
  _BOOL8 v6;

  kdebug_trace(726794304, 0, 0, 0, 0);
  v2 = (const __CFDictionary *)CFPropertyListCreateWithData(kCFAllocatorDefault, *(CFDataRef *)(a1 + 32), 0, 0, *(CFErrorRef **)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFDictionaryGetTypeID())
      v5 = sub_100130CBC(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 72), *(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 76), v3, 2, 0, *(__CFString ***)(a1 + 40));
    else
      v5 = sub_100019F20(-50, *(__CFString ***)(a1 + 40), CFSTR("import: keychain is not a dictionary"));
    v6 = v5;
    CFRelease(v3);
  }
  else
  {
    v6 = 0;
  }
  kdebug_trace(726794308, 0, 0, 0, 0);
  return v6;
}

const void *sub_10013CCA4(CFDataRef data, CFErrorRef *error)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CFTypeID v5;
  const void *Value;
  const void *v7;
  CFTypeID v8;

  v3 = (const __CFDictionary *)CFPropertyListCreateWithData(kCFAllocatorDefault, data, 0, 0, error);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFDictionaryGetTypeID())
    {
      Value = CFDictionaryGetValue(v4, CFSTR("keybag-uuid"));
      if (Value)
      {
        v7 = Value;
        v8 = CFGetTypeID(Value);
        if (v8 == CFStringGetTypeID())
        {
          CFRetain(v7);
LABEL_9:
          CFRelease(v4);
          return v7;
        }
      }
      sub_100019F20(-26275, (__CFString **)error, CFSTR("Missing or invalid %@ in backup dictionary"), CFSTR("keybag-uuid"));
    }
    v7 = 0;
    goto LABEL_9;
  }
  return 0;
}

CFMutableArrayRef sub_10013CD80(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  CFMutableArrayRef updated;
  CFMutableArrayRef v17;
  unint64_t Nanoseconds;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v26;
  os_signpost_id_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  _BOOL4 v31;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    LOWORD(v26) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCHandleUpdateMessage", " enableTelemetry=YES ", (uint8_t *)&v26, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v26 = 134217984;
    v27 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCHandleUpdateMessage  enableTelemetry=YES ", (uint8_t *)&v26, 0xCu);
  }

  v14 = sub_1002025E0();
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (v15)
    updated = (CFMutableArrayRef)SOSCloudKeychainHandleUpdateMessage(a1);
  else
    updated = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v17 = updated;
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v19 = _OctagonSignpostLogSystem(Nanoseconds);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  v21 = v20;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    v26 = 67240192;
    LODWORD(v27) = v17 != 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCHandleUpdateMessage", " SOSSignpostNameSOSCCHandleUpdateMessage=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCHandleUpdateMessage}d ", (uint8_t *)&v26, 8u);
  }

  v23 = _OctagonSignpostLogSystem(v22);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v26 = 134218496;
    v27 = v4;
    v28 = 2048;
    v29 = (double)Nanoseconds / 1000000000.0;
    v30 = 1026;
    v31 = v17 != 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCHandleUpdateMessage  SOSSignpostNameSOSCCHandleUpdateMessage=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCHandleUpdateMessage}d ", (uint8_t *)&v26, 0x1Cu);
  }

  return v17;
}

uint64_t sub_10013CFE8(const void *a1, CFTypeRef cf, const void *a3, __CFString **a4)
{
  CFTypeID v8;
  CFTypeID v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *v16;
  CFMutableDictionaryRef Mutable;
  const void *v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t V0ViewSet;
  CFTypeRef v23;
  const void *v24;
  NSObject *v25;
  __CFString *v26;
  const __CFArray *v27;
  const void *v28;
  int v29;
  const void *v30;
  const void *v31;
  BOOL v32;
  uint64_t *v33;
  const void *v34;
  uint64_t v35;
  CFTypeRef v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  const __CFArray *v43;
  uint64_t v44;
  __CFString **v45;
  int v46;
  _QWORD v47[5];
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  CFTypeRef cfa;
  CFTypeRef v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char v58;
  __int128 buf;
  void *v60;
  void *v61;
  void ***v62;
  uint64_t v63;
  uint64_t v64;
  const __CFArray *v65;
  __CFString **v66;

  if (!cf)
  {
    v37 = 0;
LABEL_57:
    sub_100019F20(-50, a4, CFSTR("keybag %@ not a data"), v37);
    return 0;
  }
  v8 = CFGetTypeID(cf);
  if (v8 != CFDataGetTypeID())
  {
    v37 = cf;
    goto LABEL_57;
  }
  if (a1)
  {
    v9 = CFGetTypeID(a1);
    if (v9 != CFDictionaryGetTypeID())
    {
      sub_100019F20(-50, a4, CFSTR("backup %@ not a dictionary"), a1);
      return 0;
    }
  }
  if (a3)
  {
    v10 = CFGetTypeID(a3);
    if (v10 != CFDataGetTypeID())
    {
      sub_100019F20(-50, a4, CFSTR("password %@ not a data"), a3);
      return 0;
    }
  }
  cfa = 0;
  v54 = 0;
  v49 = 0;
  v50 = &v49;
  v51 = 0x2000000000;
  v52 = 0;
  v48 = -1431655766;
  if (!sub_100146FEC((const __CFData *)cf, (const __CFData *)a3, &v48, (CFTypeRef *)a4))
    goto LABEL_53;
  v11 = sub_100011C40(0);
  v12 = sub_10001A338(v11);
  sub_10003268C(v12 != 0, (CFTypeRef *)a4, CFSTR("No datasource"));
  if (v12)
  {
    v13 = (*(uint64_t (**)(uint64_t, const CFStringRef, __CFString **))(v12 + 8))(v12, kSecAttrAccessibleWhenUnlocked, a4);
    if (v13)
    {
      v14 = v13;
      if (a1)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, (CFDictionaryRef)a1);
        v50[3] = (uint64_t)MutableCopy;
        v16 = (const __CFDictionary *)a1;
      }
      else
      {
        Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        v50[3] = (uint64_t)Mutable;
        v16 = 0;
      }
      v18 = (const void *)sub_10012ACB4(v16, (CFTypeRef *)a4);
      v19 = *(_QWORD *)v14;
      if (-[OTSOSActualAdapter sosEnabled]_0())
      {
        v38 = 0;
        v39 = (uint64_t)&v38;
        v40 = 0x2020000000;
        v41 = 0;
        *(_QWORD *)&buf = _NSConcreteStackBlock;
        *((_QWORD *)&buf + 1) = 3221225472;
        v60 = sub_10010424C;
        v61 = &unk_1002DE048;
        v62 = &v38;
        v63 = v19;
        v64 = 0;
        sub_10010428C(v19, 0, &buf);
        v20 = *(const void **)(v39 + 24);
        _Block_object_dispose(&v38, 8);
        if (v20)
          goto LABEL_18;
      }
      else
      {
        v21 = SOSCCSetSOSDisabledError(0);
      }
      V0ViewSet = SOSViewsGetV0ViewSet(v21);
      v20 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t, __CFString **))(v14 + 24))(v14, V0ViewSet, a4);
      if (!v20)
      {
        v24 = (const void *)v50[3];
        if (v24)
        {
          v50[3] = 0;
          CFRelease(v24);
        }
        v25 = sub_10000EF14("SecError");
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          if (a4)
            v26 = *a4;
          else
            v26 = 0;
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "failed to obtain manifest for keychain: %@", (uint8_t *)&buf, 0xCu);
        }
        v23 = 0;
        v20 = 0;
LABEL_27:
        v47[0] = _NSConcreteStackBlock;
        v47[1] = 0x40000000;
        v47[2] = sub_10013D548;
        v47[3] = &unk_1002E8A08;
        v47[4] = &v49;
        sub_1001E8388((uint64_t)v23, (uint64_t)v47);
        v27 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        v38 = _NSConcreteStackBlock;
        v39 = 0x40000000;
        v40 = (uint64_t)sub_10013D604;
        v41 = &unk_1002E8A30;
        v46 = v48;
        v44 = v14;
        v45 = a4;
        v42 = &v49;
        v43 = v27;
        if (((*(uint64_t (**)(uint64_t, _QWORD, CFTypeRef, __CFString **, void ***))(v14 + 32))(v14, 0, cfa, a4, &v38) & 1) == 0)
        {
          v28 = (const void *)v50[3];
          if (v28)
          {
            v50[3] = 0;
            CFRelease(v28);
          }
        }
        if (!CFArrayGetCount(v27))
          goto LABEL_37;
        if (-[OTSOSActualAdapter sosEnabled]_0())
        {
          v55 = 0;
          v56 = &v55;
          v57 = 0x2020000000;
          v58 = 1;
          *(_QWORD *)&buf = _NSConcreteStackBlock;
          *((_QWORD *)&buf + 1) = 3221225472;
          v60 = sub_10010439C;
          v61 = &unk_1002DDFF8;
          v62 = (void ***)&v55;
          v63 = v19;
          v64 = 0;
          v65 = v27;
          v66 = a4;
          dispatch_sync(*(dispatch_queue_t *)(v19 + 112), &buf);
          v29 = *((unsigned __int8 *)v56 + 24);
          _Block_object_dispose(&v55, 8);
          if (v29)
          {
LABEL_37:
            if (v27)
              CFRelease(v27);
            if (((*(uint64_t (**)(uint64_t, __CFString **))(v14 + 72))(v14, a4) & 1) == 0)
            {
              v31 = (const void *)v50[3];
              if (v31)
              {
                v50[3] = 0;
                CFRelease(v31);
              }
            }
            if (v18)
              CFRelease(v18);
            if (v20)
              CFRelease(v20);
            goto LABEL_46;
          }
        }
        else
        {
          SOSCCSetSOSDisabledError(a4);
        }
        v30 = (const void *)v50[3];
        if (v30)
        {
          v50[3] = 0;
          CFRelease(v30);
        }
        goto LABEL_37;
      }
LABEL_18:
      sub_1001E8590((uint64_t)v18, (uint64_t)v20, (uint64_t *)&v54, &cfa, (CFTypeRef *)a4);
      v23 = v54;
      goto LABEL_27;
    }
  }
LABEL_46:
  if (cfa)
    CFRelease(cfa);
  if (v54)
    CFRelease(v54);
  v32 = sub_100147114(v48, (CFTypeRef *)a4);
  v33 = v50;
  if (v32)
    goto LABEL_54;
  v34 = (const void *)v50[3];
  if (!v34)
    goto LABEL_54;
  v50[3] = 0;
  CFRelease(v34);
LABEL_53:
  v33 = v50;
LABEL_54:
  v35 = v33[3];
  _Block_object_dispose(&v49, 8);
  return v35;
}

void sub_10013D530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10013D548(uint64_t a1, CFDataRef theData)
{
  CFIndex Length;
  __CFString *Mutable;
  const UInt8 *BytePtr;
  CFIndex v7;
  CFIndex v8;
  unsigned int v9;

  Length = CFDataGetLength(theData);
  Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2 * Length);
  BytePtr = CFDataGetBytePtr(theData);
  v7 = CFDataGetLength(theData);
  if (v7 >= 1)
  {
    v8 = v7;
    do
    {
      v9 = *BytePtr++;
      CFStringAppendFormat(Mutable, 0, CFSTR("%02X"), v9);
      --v8;
    }
    while (v8);
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), Mutable);
  CFRelease(Mutable);
}

void sub_10013D604(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  const __CFData *v8;
  uint64_t v9;
  const void *v10;
  CFIndex Length;
  __CFString *Mutable;
  const UInt8 *BytePtr;
  CFIndex v14;
  CFIndex v15;
  unsigned int v16;
  __CFArray *v17;
  CFArrayRef v18;
  CFArrayRef v19;
  __CFArray *v20;
  CFArrayRef v21;
  CFArrayRef v22;
  uint64_t v23;
  CFTypeRef cf;
  void *values;

  cf = 0;
  if (!a3)
  {
    v20 = *(__CFArray **)(a1 + 40);
    values = a2;
    v21 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v20, v21);
    if (!v21)
      return;
    v22 = v21;
    goto LABEL_22;
  }
  v8 = (const __CFData *)(*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(a1 + 48) + 112))(a3, &cf);
  if (!v8
    || (v9 = (*(uint64_t (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(a1 + 48) + 144))(a3, *(int *)(a1 + 64), &cf)) == 0)
  {
    if (SecErrorGetOSStatus(cf) == -26275)
    {
      CFRelease(cf);
      v17 = *(__CFArray **)(a1 + 40);
      values = a2;
      v18 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
      CFArrayAppendValue(v17, v18);
      if (v18)
      {
        v19 = v18;
LABEL_16:
        CFRelease(v19);
      }
    }
    else
    {
      *a4 = 1;
      **(_QWORD **)(a1 + 56) = cf;
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v19 = *(CFArrayRef *)(v23 + 24);
      if (v19)
      {
        *(_QWORD *)(v23 + 24) = 0;
        goto LABEL_16;
      }
    }
    v10 = 0;
    goto LABEL_18;
  }
  v10 = (const void *)v9;
  Length = CFDataGetLength(v8);
  Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2 * Length);
  BytePtr = CFDataGetBytePtr(v8);
  v14 = CFDataGetLength(v8);
  if (v14 >= 1)
  {
    v15 = v14;
    do
    {
      v16 = *BytePtr++;
      CFStringAppendFormat(Mutable, 0, CFSTR("%02X"), v16);
      --v15;
    }
    while (v15);
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), Mutable, v10);
  if (Mutable)
    CFRelease(Mutable);
LABEL_18:
  if (v8)
    CFRelease(v8);
  if (v10)
  {
    v22 = (CFArrayRef)v10;
LABEL_22:
    CFRelease(v22);
  }
}

BOOL sub_10013D83C(const void *a1, CFTypeRef cf, const void *a3, __CFString **a4)
{
  CFTypeID v8;
  CFTypeID v9;
  CFTypeID v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  _BOOL4 v17;
  CFTypeRef v19;
  const void *v20;
  _QWORD v21[9];
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;

  if (!cf)
  {
    v19 = 0;
    return sub_100019F20(-50, a4, CFSTR("keybag %@ not a data"), v19);
  }
  v8 = CFGetTypeID(cf);
  if (v8 != CFDataGetTypeID())
  {
    v19 = cf;
    return sub_100019F20(-50, a4, CFSTR("keybag %@ not a data"), v19);
  }
  if (!a1)
  {
    v20 = 0;
    return sub_100019F20(-50, a4, CFSTR("backup %@ not a dictionary"), v20);
  }
  v9 = CFGetTypeID(a1);
  if (v9 != CFDictionaryGetTypeID())
  {
    v20 = a1;
    return sub_100019F20(-50, a4, CFSTR("backup %@ not a dictionary"), v20);
  }
  if (a3)
  {
    v10 = CFGetTypeID(a3);
    if (v10 != CFDataGetTypeID())
      return sub_100019F20(-50, a4, CFSTR("password not a data"));
  }
  v24 = 0;
  v25 = &v24;
  v26 = 0x2000000000;
  v27 = 1;
  v23 = -1431655766;
  if (sub_100146FEC((const __CFData *)cf, (const __CFData *)a3, &v23, (CFTypeRef *)a4))
  {
    v11 = sub_10012ACB4((const __CFDictionary *)a1, (CFTypeRef *)a4);
    if (v11)
    {
      v12 = (const void *)v11;
      v13 = sub_100011C40(0);
      v14 = sub_10001A338(v13);
      sub_10003268C(v14 != 0, (CFTypeRef *)a4, CFSTR("No datasource"));
      if (v14)
      {
        v15 = (*(uint64_t (**)(uint64_t, const CFStringRef, __CFString **))(v14 + 8))(v14, kSecAttrAccessibleWhenUnlocked, a4);
        if (v15)
        {
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 0x40000000;
          v21[2] = sub_10013DA84;
          v21[3] = &unk_1002E8A80;
          v21[6] = a4;
          v21[7] = v12;
          v21[8] = a1;
          v22 = v23;
          v21[4] = &v24;
          v21[5] = v15;
          LOBYTE(v15) = (*(uint64_t (**)(uint64_t, __CFString **, _QWORD, _QWORD, _QWORD *))(v15 + 64))(v15, a4, 0, 0, v21);
        }
      }
      else
      {
        LOBYTE(v15) = 0;
      }
      *((_BYTE *)v25 + 24) &= v15;
      CFRelease(v12);
    }
    v17 = sub_100147114(v23, (CFTypeRef *)a4);
    if (*((_BYTE *)v25 + 24))
      v16 = v17;
    else
      v16 = 0;
    *((_BYTE *)v25 + 24) = v16;
  }
  else
  {
    v16 = 0;
  }
  _Block_object_dispose(&v24, 8);
  return v16;
}

void sub_10013DA84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t V0BackupViewSet;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  const void *v13;
  const void *v14;
  _QWORD v15[9];
  int v16;
  uint64_t v17;
  const void *v18;

  v4 = *(_QWORD *)(a1 + 40);
  V0BackupViewSet = SOSViewsGetV0BackupViewSet();
  v6 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v4 + 24))(v4, V0BackupViewSet, *(_QWORD *)(a1 + 48));
  v17 = 0;
  v18 = 0;
  sub_1001E8590((uint64_t)v6, *(_QWORD *)(a1 + 56), (uint64_t *)&v18, (const void **)&v17, *(CFTypeRef **)(a1 + 48));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 0x40000000;
  v15[2] = sub_10013DBA0;
  v15[3] = &unk_1002E8A58;
  v7 = *(_QWORD *)(a1 + 32);
  v15[6] = *(_QWORD *)(a1 + 40);
  v15[7] = a2;
  v16 = *(_DWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 64);
  v15[4] = v7;
  v15[5] = v8;
  v15[8] = *(_QWORD *)(a1 + 48);
  sub_1001E8388(v17, (uint64_t)v15);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = (*(uint64_t (**)(uint64_t, _QWORD))(v9 + 72))(v9, *(_QWORD *)(a1 + 48));
  else
    v10 = 1;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v11 + 24))
    v12 = v10;
  else
    v12 = 0;
  *(_BYTE *)(v11 + 24) = v12;
  v13 = v18;
  if (v18)
  {
    v18 = 0;
    CFRelease(v13);
  }
  v14 = (const void *)v17;
  if (v17)
  {
    v17 = 0;
    CFRelease(v14);
  }
  if (v6)
    CFRelease(v6);
}

void sub_10013DBA0(uint64_t a1, CFDataRef theData, _BYTE *a3)
{
  CFIndex Length;
  __CFString *Mutable;
  const UInt8 *BytePtr;
  CFIndex v9;
  CFIndex v10;
  unsigned int v11;
  const void *Value;
  int OSStatus;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  NSObject *v18;
  NSObject *v19;
  CFTypeRef *v20;
  CFTypeRef cf;
  uint8_t buf[4];
  const void *v23;
  __int16 v24;
  CFTypeRef v25;

  Length = CFDataGetLength(theData);
  Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2 * Length);
  BytePtr = CFDataGetBytePtr(theData);
  v9 = CFDataGetLength(theData);
  if (v9 >= 1)
  {
    v10 = v9;
    do
    {
      v11 = *BytePtr++;
      CFStringAppendFormat(Mutable, 0, CFSTR("%02X"), v11);
      --v10;
    }
    while (v10);
  }
  if (Mutable)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), Mutable);
    CFRelease(Mutable);
    if (Value)
    {
      cf = 0;
      if (((*(uint64_t (**)(_QWORD, _QWORD, const void *, CFTypeRef *))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 56), *(int *)(a1 + 72), Value, &cf) & 1) == 0)
      {
        OSStatus = SecErrorGetOSStatus(cf);
        if (OSStatus != -26275)
        {
          if (OSStatus == -25308)
          {
            *a3 = 1;
          }
          else if (OSStatus == -25299)
          {
            v14 = sub_10000EF14("titc");
            if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              goto LABEL_20;
            *(_DWORD *)buf = 138477827;
            v23 = Value;
            v15 = "restore %{private}@ not replacing existing item";
            v16 = v14;
            v17 = 12;
            goto LABEL_14;
          }
          v19 = sub_10000EF14("SecError");
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138478083;
            v23 = Value;
            v24 = 2112;
            v25 = cf;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "restore %{private}@ failed %@", buf, 0x16u);
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
          v20 = *(CFTypeRef **)(a1 + 64);
          if (v20 && !*v20)
          {
            *v20 = cf;
            return;
          }
          goto LABEL_20;
        }
        v18 = sub_10000EF14("titc");
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          goto LABEL_20;
        *(_DWORD *)buf = 138478083;
        v23 = Value;
        v24 = 2112;
        v25 = cf;
        v15 = "restore %{private}@ skipping corrupted item %@";
        v16 = v18;
        v17 = 22;
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
LABEL_20:
        if (cf)
          CFRelease(cf);
      }
    }
  }
}

uint64_t sub_10013DE30(char a1, uint64_t a2)
{
  return sub_10013DE3C(a1, 0, a2);
}

uint64_t sub_10013DE3C(char a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  _QWORD v8[6];
  int v9;
  char v10;
  int v11;

  v11 = 0;
  v6 = sub_1000269AC(dword_1003414E0, 0, &v11);
  result = 0;
  if (!v6)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 0x40000000;
    v8[2] = sub_10013DEEC;
    v8[3] = &unk_1002E8160;
    v9 = v11 & 1;
    v10 = a1;
    v8[4] = a2;
    v8[5] = a3;
    return sub_100011A30(1, 1, 0, a3, (uint64_t)v8);
  }
  return result;
}

BOOL sub_10013DEEC(uint64_t a1, const void *a2)
{
  _BOOL8 result;
  CFTypeRef *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  _BOOL4 v9;
  _QWORD v10[8];

  result = sub_1001320A8(a2, *(_DWORD *)(a1 + 48));
  if (*(_BYTE *)(a1 + 52) && !result)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v5 = *(CFTypeRef **)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 0x40000000;
    v10[2] = sub_100132378;
    v10[3] = &unk_1002DFAE0;
    v10[4] = v5;
    v10[5] = a2;
    v10[6] = v6;
    if (!sub_10001AC94((uint64_t)a2, 2, v5, (uint64_t)v10))
      goto LABEL_8;
    v7 = sub_10000EF14("SecError");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Completed roll keys.", (uint8_t *)v10, 2u);
    }
    if (sub_1001320A8(a2, *(_DWORD *)(a1 + 48)))
    {
      return 1;
    }
    else
    {
LABEL_8:
      v8 = sub_10000EF14("SecError");
      v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v9)
      {
        LOWORD(v10[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to roll keys.", (uint8_t *)v10, 2u);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10013E02C(uint64_t a1, char a2, const __CFBoolean *a3, const __CFBoolean *a4, uint64_t a5, __CFString **a6)
{
  const void **v11;
  const void **v12;
  uint64_t v13;
  _QWORD v15[7];
  char v16;

  v11 = (const void **)sub_1000114E8(a5, 0, 0, 0, a6);
  if (!v11)
    return 0;
  v12 = v11;
  *((_DWORD *)v11 + 12) = 3;
  v11[13] = (const void *)-1;
  *((_DWORD *)v11 + 30) = dword_1003414E0;
  sub_100012178(kSecAttrAccessGroup, a3, (uint64_t)v11);
  sub_100012178(kSecAttrSynchronizable, kCFBooleanTrue, (uint64_t)v12);
  sub_100012178(kSecAttrTombstone, kCFBooleanFalse, (uint64_t)v12);
  if (a4)
    sub_100012178(kSecAttrService, a4, (uint64_t)v12);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 0x40000000;
  v15[2] = sub_10013E18C;
  v15[3] = &unk_1002E8B00;
  v15[4] = a6;
  v15[5] = v12;
  v16 = a2;
  v15[6] = a1;
  v13 = sub_100011A30(0, 1, 0, (uint64_t)a6, (uint64_t)v15);
  sub_100011108(v12, 0);
  return v13;
}

BOOL sub_10013E18C(uint64_t a1, uint64_t a2)
{
  CFTypeRef *v2;
  _QWORD v4[7];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10013E1F8;
  v4[3] = &unk_1002E8AE0;
  v2 = *(CFTypeRef **)(a1 + 32);
  v4[4] = *(_QWORD *)(a1 + 40);
  v4[5] = a2;
  v5 = *(_BYTE *)(a1 + 56);
  v4[6] = *(_QWORD *)(a1 + 48);
  return sub_10001AC0C(a2, 2, v2, (uint64_t)v4);
}

uint64_t sub_10013E1F8(uint64_t a1)
{
  uint64_t v1;
  CFDictionaryRef *v2;
  CFTypeRef v3;
  _QWORD v5[5];
  char v6;
  Block_layout v7;
  CFDictionaryRef *v8;
  CFTypeRef v9;

  v9 = 0;
  v2 = *(CFDictionaryRef **)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v7.isa = _NSConcreteStackBlock;
  *(_QWORD *)&v7.flags = 0x40000000;
  v7.invoke = (void (*)(void *, ...))sub_10013E2A8;
  v7.descriptor = (Block_descriptor_1 *)&unk_1002E8AA0;
  v8 = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_10013E2D0;
  v5[3] = &unk_1002E8AC0;
  v6 = *(_BYTE *)(a1 + 56);
  v5[4] = *(_QWORD *)(a1 + 48);
  sub_10001E280(v2, v1, &v9, 0, &v7, 0, 0, (uint64_t)v5);
  v3 = v9;
  if (v9)
  {
    v9 = 0;
    CFRelease(v3);
  }
  return 1;
}

BOOL sub_10013E2A8(uint64_t a1, const void **a2)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 8), *a2) != 0;
}

void sub_10013E2D0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  __CFDictionary *v5;
  const __CFDictionary *v6;
  const void *Value;
  const void *v8;
  CFTypeID v9;
  int v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  CFTypeID v13;
  CFTypeRef v14;
  int valuePtr;
  uint8_t buf[8];
  CFTypeRef cf;

  cf = 0;
  v4 = sub_10000EF14("InitialSyncItems");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Copy item", buf, 2u);
  }
  v5 = sub_10001904C((_QWORD *)a2, 0x10000, 0, (__CFString **)&cf);
  if (v5)
  {
    v6 = v5;
    Value = CFDictionaryGetValue(v5, kSecAttrSyncViewHint);
    if (Value && (v8 = Value, v9 = CFGetTypeID(Value), v9 == CFStringGetTypeID()))
      v10 = SOSViewInSOSSystem(v8);
    else
      v10 = 1;
    if (*(_BYTE *)(a1 + 40))
    {
      valuePtr = -1431655766;
      v11 = (const __CFNumber *)CFDictionaryGetValue(v6, kSecAttrType);
      if (v11)
      {
        v12 = v11;
        v13 = CFGetTypeID(v11);
        if (v13 == CFNumberGetTypeID())
        {
          if (!CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr))
          {
LABEL_15:
            CFRelease(v6);
            goto LABEL_16;
          }
          v10 = (BYTE2(valuePtr) & v10);
        }
      }
    }
    if (v10)
    {
      CFDictionaryAddValue(v6, kSecClass, **(const void ***)(a2 + 16));
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v6);
    }
    goto LABEL_15;
  }
LABEL_16:
  v14 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v14);
  }
}

BOOL sub_10013E45C(uint64_t a1, uint64_t a2)
{
  CFTypeRef *v2;
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10013E4B8;
  v4[3] = &unk_1002E8180;
  v2 = *(CFTypeRef **)(a1 + 32);
  v4[4] = *(_QWORD *)(a1 + 40);
  v4[5] = a2;
  return sub_10001AC0C(a2, 2, v2, (uint64_t)v4);
}

uint64_t sub_10013E4B8(uint64_t a1)
{
  CFIndex Count;
  NSObject *v3;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v6;
  CFTypeID v7;
  const void *Value;
  const void *v9;
  __CFString **v10;
  _QWORD **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  uint32_t v21;
  NSObject *v22;
  NSObject *v23;
  CFTypeRef v24;
  NSObject *v25;
  CFTypeRef v26;
  CFTypeRef cf;
  _BYTE buf[24];
  void *v30;
  uint64_t v31;
  __int16 v32;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  v3 = sub_10000EF14("ImportInitialSyncItems");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = Count;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Importing %d items", buf, 8u);
  }
  if (Count >= 1)
  {
    for (i = 0; Count != i; ++i)
    {
      cf = 0;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
      if (!ValueAtIndex)
        continue;
      v6 = ValueAtIndex;
      v7 = CFGetTypeID(ValueAtIndex);
      if (v7 != CFDictionaryGetTypeID())
        continue;
      Value = CFDictionaryGetValue(v6, kSecClass);
      if (Value)
      {
        v9 = Value;
        v10 = sub_100011884(Value);
        if (v10)
        {
          v11 = (_QWORD **)sub_10001E9E8((uint64_t)v10, v6, dword_1003414E0, (__CFString **)&cf);
          if (v11)
          {
            v12 = (uint64_t)v11;
            v13 = (_QWORD *)sub_10001E6A8(v11[2], 11, (__CFString **)&cf);
            if ((sub_10001A56C(v12, v13, kCFBooleanTrue, (__CFString **)&cf) & 1) != 0)
            {
              v14 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)buf = _NSConcreteStackBlock;
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = sub_100117088;
              v30 = &unk_1002DE728;
              v31 = v12;
              v32 = 0;
              if ((sub_10001DADC(v12, v14, (__CFString **)&cf, (uint64_t)buf) & 1) == 0)
              {
                v15 = sub_10000EF14("ImportInitialSyncItems");
                if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138412547;
                  *(_QWORD *)&buf[4] = cf;
                  *(_WORD *)&buf[12] = 2113;
                  *(_QWORD *)&buf[14] = v12;
                  v16 = v15;
                  v17 = "Item store failed with: %@: %{private}@";
                  goto LABEL_31;
                }
                goto LABEL_24;
              }
            }
            else
            {
              v25 = sub_10000EF14("ImportInitialSyncItems");
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412547;
                *(_QWORD *)&buf[4] = cf;
                *(_WORD *)&buf[12] = 2113;
                *(_QWORD *)&buf[14] = v12;
                v16 = v25;
                v17 = "Failed to set sync=1: %@ for item %{private}@";
LABEL_31:
                _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v17, buf, 0x16u);
              }
LABEL_24:
              v26 = cf;
              if (cf)
              {
                cf = 0;
                CFRelease(v26);
              }
            }
            v24 = (CFTypeRef)v12;
          }
          else
          {
            v23 = sub_10000EF14("ImportInitialSyncItems");
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = cf;
              _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Item creation failed with: %@", buf, 0xCu);
            }
            v24 = cf;
            if (!cf)
              continue;
            cf = 0;
          }
          CFRelease(v24);
          continue;
        }
        v22 = sub_10000EF14("ImportInitialSyncItems");
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v9;
          v19 = v22;
          v20 = "Item with unknown class: %@";
          v21 = 12;
          goto LABEL_18;
        }
      }
      else
      {
        v18 = sub_10000EF14("ImportInitialSyncItems");
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          v19 = v18;
          v20 = "Item w/o class";
          v21 = 2;
LABEL_18:
          _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, v20, buf, v21);
        }
      }
    }
  }
  return 1;
}

uint64_t sub_10013E874(const __CFArray *a1, unsigned int a2, uint64_t a3, __CFString **a4)
{
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v24;
  unsigned int v25;
  __int16 v26;
  const __CFArray *v27;
  CFRange v28;
  CFRange v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;

  if (!*(_BYTE *)(a3 + 36))
    return 0;
  kdebug_trace(726794352, 0, 0, 0, 0);
  v8 = sub_10000EF14("syncbubble");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v24 = 67109378;
    v25 = a2;
    v26 = 2112;
    v27 = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "migration for uid %d for services %@", (uint8_t *)&v24, 0x12u);
  }
  v9 = *(_DWORD *)(a3 + 40);
  v28.length = CFArrayGetCount(a1);
  v28.location = 0;
  v10 = 1;
  if (!CFArrayContainsValue(a1, v28, CFSTR("com.apple.bird.usermanager.sync")))
  {
    v29.length = CFArrayGetCount(a1);
    v29.location = 0;
    if (!CFArrayContainsValue(a1, v29, CFSTR("com.apple.cloudphotod.sync")))
    {
      v30.length = CFArrayGetCount(a1);
      v30.location = 0;
      if (!CFArrayContainsValue(a1, v30, CFSTR("com.apple.cloudphotod.syncstakeholder")))
      {
        v31.length = CFArrayGetCount(a1);
        v31.location = 0;
        if (!CFArrayContainsValue(a1, v31, CFSTR("com.apple.cloudd.usermanager.sync")))
          v10 = 0;
      }
    }
  }
  v32.length = CFArrayGetCount(a1);
  v32.location = 0;
  v11 = CFArrayContainsValue(a1, v32, CFSTR("com.apple.nsurlsessiond.usermanager.sync"));
  v33.length = CFArrayGetCount(a1);
  v33.location = 0;
  v12 = CFArrayContainsValue(a1, v33, CFSTR("com.apple.syncdefaultsd.usermanager.sync"));
  v34.length = CFArrayGetCount(a1);
  v34.location = 0;
  if (CFArrayContainsValue(a1, v34, CFSTR("com.apple.mailq.sync"))
    || (v11 ? (v13 = 1) : (v13 = v10),
        v12 ? (v14 = 1) : (v14 = v13),
        v35.length = CFArrayGetCount(a1),
        v35.location = 0,
        CFArrayContainsValue(a1, v35, CFSTR("com.apple.mailq.sync.xpc"))))
  {
    v14 = 1;
    v15 = 1;
    v10 = 1;
  }
  else
  {
    v15 = 0;
  }
  v16 = sub_1000119B8((uint64_t)CFSTR("inet"), &qword_100341250, (uint64_t)&unk_100341248);
  if (sub_10013ECE0(a3, a2, v9 != a2, v10, v16, (uint64_t)&off_10033FE88, 1, a4)
    && (v17 = sub_1000119B8((uint64_t)CFSTR("genp"), &qword_100341240, (uint64_t)&unk_100341238),
        sub_10013ECE0(a3, a2, v9 != a2, v10, v17, (uint64_t)&off_10033FE88, 1, a4))
    && (v18 = sub_1000119B8((uint64_t)CFSTR("genp"), &qword_100341240, (uint64_t)&unk_100341238),
        sub_10013ECE0(a3, a2, v9 != a2, v15, v18, (uint64_t)&off_10033FE98, 16, a4))
    && (v19 = sub_1000119B8((uint64_t)CFSTR("genp"), &qword_100341240, (uint64_t)&unk_100341238),
        sub_10013ECE0(a3, a2, v9 != a2, v14, v19, (uint64_t)&off_10033FF98, 6, a4)))
  {
    v20 = sub_1000119B8((uint64_t)CFSTR("inet"), &qword_100341250, (uint64_t)&unk_100341248);
    v21 = sub_10013ECE0(a3, a2, v9 != a2, v11 != 0, v20, (uint64_t)&off_10033FFF8, 1, a4);
  }
  else
  {
    v21 = 0;
  }
  v22 = sub_10000EF14("syncbubble");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v24 = 67109120;
    v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "migration for uid %d complete", (uint8_t *)&v24, 8u);
  }
  kdebug_trace(726794356, 0, 0, 0, 0);
  return v21;
}

uint64_t sub_10013ECE0(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, __CFString **a8)
{
  unsigned int v15;
  CFDataRef v16;
  CFDataRef v17;
  CFDataRef v18;
  const __CFData *v19;
  NSObject *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFBoolean **v26;
  uint64_t v27;
  CFTypeRef v28;
  NSObject *v29;
  _BOOL4 v30;
  _QWORD *v31;
  const __CFData **v32;
  __CFDictionary *Mutable;
  __CFDictionary *v34;
  uint64_t v35;
  const __CFData *v37;
  CFDataRef cf;
  _QWORD v39[7];
  _QWORD v40[6];
  UInt8 bytes[8];
  int v42;
  unsigned int v43;

  *(_QWORD *)bytes = 0x114EC8A39FAB1A82;
  v15 = bswap32(a2);
  v42 = -397635414;
  v43 = v15;
  v16 = CFDataCreate(0, bytes, 16);
  if (!v16)
    return 0;
  v17 = v16;
  *(_QWORD *)bytes = 0x104B57A5353A5AA7;
  v42 = -1803342146;
  v43 = v15;
  v18 = CFDataCreate(0, bytes, 16);
  if (!v18)
  {
    CFRelease(v17);
    return 0;
  }
  v19 = v18;
  if (!a3 || (a4 & 1) == 0)
  {
    cf = v17;
    v20 = sub_10000EF14("syncbubble");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)bytes = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "cleaning out old items", bytes, 2u);
    }
    v21 = sub_1000114E8(a5, 0, 0, a1, a8);
    v22 = (uint64_t)v21;
    if (!v21)
    {
      v34 = 0;
      v35 = 0;
      goto LABEL_24;
    }
    v37 = v19;
    v23 = a1;
    v24 = a5;
    v21[13] = -1;
    *((_DWORD *)v21 + 30) = dword_1003414E0;
    v25 = a6;
    v26 = (const __CFBoolean **)(a6 + 8);
    v27 = a7;
    do
    {
      sub_100012178(*(v26 - 1), *v26, v22);
      v26 += 2;
      --v27;
    }
    while (v27);
    v28 = CFRetain(cf);
    *(_QWORD *)(v22 + 128) = v28;
    if (!v28)
    {
      v34 = 0;
      v35 = 0;
      v19 = v37;
      v17 = cf;
      goto LABEL_24;
    }
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 0x40000000;
    v40[2] = sub_10013F0F0;
    v40[3] = &unk_1002E8B40;
    v40[4] = a8;
    v40[5] = v22;
    sub_100011A30(1, 1, 0, (uint64_t)a8, (uint64_t)v40);
    sub_100011108((const void **)v22, 0);
    a6 = v25;
    a5 = v24;
    a1 = v23;
    v19 = v37;
    v17 = cf;
  }
  v29 = sub_10000EF14("syncbubble");
  v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
  if (!a4 || a3)
  {
    if (v30)
    {
      *(_WORD *)bytes = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "skip migration of items", bytes, 2u);
    }
    v34 = 0;
    v22 = 0;
    v35 = 1;
    goto LABEL_24;
  }
  if (v30)
  {
    *(_WORD *)bytes = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "migrating sync bubble items", bytes, 2u);
  }
  v31 = sub_1000114E8(a5, 0, 0, a1, a8);
  v22 = (uint64_t)v31;
  if (!v31)
  {
    v34 = 0;
LABEL_34:
    v35 = 0;
    goto LABEL_24;
  }
  *((_DWORD *)v31 + 12) = 3;
  v31[13] = -1;
  *((_DWORD *)v31 + 30) = dword_1003414E0;
  v32 = (const __CFData **)(a6 + 8);
  do
  {
    sub_100120910(*(v32 - 1), *v32, v22);
    v32 += 2;
    --a7;
  }
  while (a7);
  sub_100120910(CFSTR("musr"), v19, v22);
  *(_QWORD *)(v22 + 128) = CFRetain(v19);
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v34 = Mutable;
  if (!Mutable)
    goto LABEL_34;
  CFDictionarySetValue(Mutable, CFSTR("musr"), v17);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 0x40000000;
  v39[2] = sub_10013F158;
  v39[3] = &unk_1002E8BC0;
  v39[4] = a8;
  v39[5] = v22;
  v39[6] = v34;
  v35 = 1;
  sub_100011A30(1, 1, 0, (uint64_t)a8, (uint64_t)v39);
LABEL_24:
  CFRelease(v17);
  CFRelease(v19);
  if (v34)
    CFRelease(v34);
  if (v22)
    sub_100011108((const void **)v22, 0);
  return v35;
}

BOOL sub_10013F0F0(int8x16_t *a1, uint64_t a2)
{
  int8x16_t v2;
  _QWORD v4[5];
  int8x16_t v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10013F494;
  v4[3] = &unk_1002E8B20;
  v4[4] = a2;
  v2 = a1[2];
  v5 = vextq_s8(v2, v2, 8uLL);
  return sub_10001AC0C(a2, 2, (CFTypeRef *)v2.i64[0], (uint64_t)v4);
}

BOOL sub_10013F158(_QWORD *a1, uint64_t a2)
{
  CFTypeRef *v2;
  _QWORD v4[7];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10013F1BC;
  v4[3] = &unk_1002E8BA0;
  v2 = (CFTypeRef *)a1[4];
  v4[4] = a1[5];
  v4[5] = a2;
  v4[6] = a1[6];
  return sub_10001AC0C(a2, 2, v2, (uint64_t)v4);
}

uint64_t sub_10013F1BC(uint64_t a1)
{
  CFDictionaryRef *v1;
  int8x16_t v2;
  CFTypeRef v3;
  _QWORD v5[4];
  int8x16_t v6;
  Block_layout v7;
  CFDictionaryRef *v8;
  CFTypeRef v9;

  v9 = 0;
  v1 = *(CFDictionaryRef **)(a1 + 32);
  v7.isa = _NSConcreteStackBlock;
  *(_QWORD *)&v7.flags = 0x40000000;
  v7.invoke = (void (*)(void *, ...))sub_10013F26C;
  v7.descriptor = (Block_descriptor_1 *)&unk_1002E8B60;
  v8 = v1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_10013F294;
  v5[3] = &unk_1002E8B80;
  v2 = *(int8x16_t *)(a1 + 40);
  v6 = vextq_s8(v2, v2, 8uLL);
  sub_10001E280(v1, v2.i64[0], &v9, 0, &v7, 0, 0, (uint64_t)v5);
  v3 = v9;
  if (v9)
  {
    v9 = 0;
    CFRelease(v3);
  }
  return 1;
}

BOOL sub_10013F26C(uint64_t a1, const void **a2)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 8), *a2) != 0;
}

void sub_10013F294(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  __CFString *v5;
  __CFString *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  __CFString *v10;
  _BYTE buf[24];
  void *v12;
  __CFString *v13;
  __int16 v14;

  v10 = 0;
  v4 = sub_10000EF14("syncbubble");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "migrating item", buf, 2u);
  }
  v5 = (__CFString *)sub_1000070C4(a2, *(const __CFDictionary **)(a1 + 32), &v10);
  if (v5)
  {
    v6 = v5;
    sub_100116454((uint64_t)v5, 0);
    if (!sub_100115F58((uint64_t)v6, dword_1003414E0, 0))
      goto LABEL_13;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_100117088;
    v12 = &unk_1002DE728;
    v13 = v6;
    v14 = 0;
    if ((sub_10001DADC((uint64_t)v6, v7, &v10, (uint64_t)buf) & 1) == 0)
    {
      v8 = sub_10000EF14("syncbubble");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412547;
        *(_QWORD *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 2113;
        *(_QWORD *)&buf[14] = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "migration failed with %@ for item %{private}@", buf, 0x16u);
      }
    }
    CFRelease(v6);
  }
  else
  {
    v9 = sub_10000EF14("syncbubble");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "migration failed, no new_item %@", buf, 0xCu);
    }
  }
  v6 = v10;
  if (!v10)
    return;
  v10 = 0;
LABEL_13:
  CFRelease(v6);
}

BOOL sub_10013F494(uint64_t a1)
{
  return sub_10001B508(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, *(CFTypeRef **)(a1 + 48));
}

uint64_t sub_10013F4A8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[7];
  _QWORD v9[7];
  uint8_t buf[16];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 1;
  kdebug_trace(726794360, 0, 0, 0, 0);
  v4 = sub_10000EF14("transmogrify");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "begin", buf, 2u);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  v9[2] = sub_10013F6A8;
  v9[3] = &unk_1002E8338;
  v9[5] = a2;
  v9[6] = a1;
  v9[4] = &v11;
  sub_100011A30(1, 1, 0, a2, (uint64_t)v9);
  if (sub_100033B04())
  {
    if (qword_100340E20 != -1)
      dispatch_once(&qword_100340E20, &stru_1002DB938);
    if (!byte_100340E18)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 0x40000000;
      v8[2] = sub_10013F718;
      v8[3] = &unk_1002E8388;
      v8[4] = &v11;
      v8[5] = a2;
      v8[6] = a1;
      sub_100011A30(1, 1, 0, a2, (uint64_t)v8);
    }
  }
  v5 = sub_10000EF14("transmogrify");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "end", buf, 2u);
  }
  kdebug_trace(726794364, 0, 0, 0, 0);
  v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

BOOL sub_10013F6A8(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  _QWORD v4[5];
  int8x16_t v5;
  uint64_t v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10013F960;
  v4[3] = &unk_1002E8310;
  v2 = *(int8x16_t *)(a1 + 40);
  v5 = vextq_s8(v2, v2, 8uLL);
  v4[4] = *(_QWORD *)(a1 + 32);
  v6 = a2;
  return sub_10001AC0C(a2, 2, (CFTypeRef *)v2.i64[0], (uint64_t)v4);
}

uint64_t sub_10013F718(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int8x16_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD v9[6];
  int8x16_t v10;
  uint8_t buf[16];

  if (sub_1001353A8(a2))
  {
    v4 = sub_10000EF14("transmogrify");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unexpectedly already transcrypted??", buf, 2u);
    }
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 0x40000000;
    v9[2] = sub_10013F888;
    v9[3] = &unk_1002E8360;
    v9[4] = *(_QWORD *)(a1 + 32);
    v9[5] = a2;
    v5 = *(int8x16_t *)(a1 + 40);
    v10 = vextq_s8(v5, v5, 8uLL);
    sub_10001AC0C(a2, 2, (CFTypeRef *)v5.i64[0], (uint64_t)v9);
    v6 = sub_10000EF14("transmogrify");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "transcrypted, setting flag to remember we've already done so", buf, 2u);
    }
    sub_10013545C(a2);
    v7 = sub_10000EF14("transmogrify");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "transcrypted, using system keychain handle", buf, 2u);
    }
    dword_1003414E0 = -6;
  }
  return 1;
}

uint64_t sub_10013F888(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef *v5;
  _BOOL4 v6;
  uint64_t v7;
  BOOL v8;
  _QWORD v10[8];

  v2 = sub_10000EF14("transmogrify");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "must transcrypt, using default keybag", (uint8_t *)v10, 2u);
  }
  v3 = a1[5];
  v4 = a1[6];
  v5 = (CFTypeRef *)a1[7];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  v10[2] = sub_100136F08;
  v10[3] = &unk_1002E8768;
  v10[4] = v4;
  v10[5] = v5;
  v10[6] = v3;
  v6 = sub_10001AC0C(v3, 2, v5, (uint64_t)v10);
  v7 = *(_QWORD *)(a1[4] + 8);
  v8 = v6 && *(_BYTE *)(v7 + 24) != 0;
  *(_BYTE *)(v7 + 24) = v8;
  return 1;
}

uint64_t sub_10013F960(uint64_t a1)
{
  uint64_t v2;
  __CFString **v3;
  __CFString ***v4;
  CFDictionaryRef *v5;
  const void **v6;
  uint64_t v7;
  CFTypeRef *v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  __CFString **v12;
  _QWORD v14[8];
  _QWORD v15[5];

  if (qword_100341178 != -1)
    dispatch_once(&qword_100341178, &stru_1002DECC8);
  v2 = qword_100341180;
  v3 = &off_1002E2190;
  v4 = off_1002E4320;
  do
  {
    if (*((_BYTE *)v3 + 8))
    {
      if (qword_100341188 != -1)
        dispatch_once(&qword_100341188, &stru_1002DED08);
      v5 = (CFDictionaryRef *)sub_1000114E8((uint64_t)v3, (const void *)qword_100341190, 0, *(_QWORD *)(a1 + 40), *(__CFString ***)(a1 + 48));
      if (v5)
      {
        v6 = (const void **)v5;
        v8 = *(CFTypeRef **)(a1 + 48);
        v7 = *(_QWORD *)(a1 + 56);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 0x40000000;
        v15[2] = sub_10013FAFC;
        v15[3] = &unk_1002E8280;
        v15[4] = v8;
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 0x40000000;
        v14[2] = sub_10013FB64;
        v14[3] = &unk_1002E82E8;
        v14[4] = *(_QWORD *)(a1 + 32);
        v14[5] = v2;
        v14[6] = v7;
        v14[7] = v8;
        v9 = sub_10001E280(v5, v7, v8, &stru_1002E81E0, &stru_1002E8220, (uint64_t)&stru_1002E8260, (uint64_t)v15, (uint64_t)v14);
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        if (*(_BYTE *)(v10 + 24))
          v11 = v9;
        else
          v11 = 0;
        *(_BYTE *)(v10 + 24) = v11;
        sub_100011108(v6, 0);
      }
    }
    v12 = *v4++;
    v3 = v12;
  }
  while (v12);
  return 1;
}

uint64_t sub_10013FAFC(uint64_t a1, sqlite3_stmt *a2, uint64_t a3)
{
  if (qword_100341188 != -1)
    dispatch_once(&qword_100341188, &stru_1002DED08);
  return sub_100013544(a2, a3, (const __CFString *)qword_100341190, *(CFTypeRef **)(a1 + 32));
}

void sub_10013FB64(uint64_t a1, __CFString ***a2)
{
  NSObject *v4;
  const char *v5;
  void *v6;
  CFErrorRef *v7;
  CFErrorRef v8;
  CFTypeRef cf;
  uint8_t buf[4];
  __CFString ***v11;
  __int16 v12;
  CFTypeRef v13;

  cf = 0;
  if ((sub_10001BA44((uint64_t)a2, kSecAttrMultiUser, *(const __CFData **)(a1 + 40), (__CFString **)&cf) & 1) == 0)
  {
    v4 = sub_10000EF14("SecError");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138478083;
      v11 = a2;
      v12 = 2112;
      v13 = cf;
      v5 = "item: %{private}@ update musr to system failed: %@";
      goto LABEL_7;
    }
LABEL_8:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    goto LABEL_9;
  }
  if (!sub_100007BB0(a2, (CFStringRef **)a2, *(_QWORD *)(a1 + 48), &cf, (uint64_t)&stru_1002E82C0))
  {
    v4 = sub_10000EF14("SecError");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138478083;
      v11 = a2;
      v12 = 2112;
      v13 = cf;
      v5 = "item: %{private}@ insert during UPDATE: %@";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, buf, 0x16u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:
  v6 = (void *)cf;
  v7 = *(CFErrorRef **)(a1 + 56);
  if (cf && v7)
  {
    if (!*v7)
      goto LABEL_19;
    if (CFErrorGetCode(*v7) == -25330)
    {
      v8 = *v7;
      if (!*v7)
        goto LABEL_19;
      *v7 = 0;
      CFRelease(v8);
    }
  }
  else
  {
    if (!cf)
      return;
    if (!v7)
      goto LABEL_18;
  }
  if (*v7)
  {
LABEL_18:
    CFRelease(v6);
    return;
  }
LABEL_19:
  *v7 = (CFErrorRef)v6;
}

BOOL sub_10013FD1C(id a1, __CFString *a2, BOOL *a3)
{
  sub_100013190(a2, a3);
  CFStringAppendFormat(a2, 0, CFSTR("musr = ?"));
  return 1;
}

BOOL sub_10013FD5C(id a1, const SecDbAttr *a2)
{
  return 0;
}

BOOL sub_10013FD64(id a1, const SecDbAttr *a2)
{
  return (LOBYTE(a2->var2) >> 1) & 1;
}

BOOL sub_10013FD70(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

uint64_t sub_10013FD80(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[7];
  uint8_t buf[16];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  kdebug_trace(726794368, 0, 0, 0, 0);
  v4 = sub_10000EF14("transcrypt");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "begin", buf, 2u);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_10013FEF8;
  v8[3] = &unk_1002E83B0;
  v8[4] = &v10;
  v8[5] = a1;
  v8[6] = a2;
  sub_100011A30(1, 1, 0, a2, (uint64_t)v8);
  v5 = sub_10000EF14("transcrypt");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "end", buf, 2u);
  }
  kdebug_trace(726794372, 0, 0, 0, 0);
  v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t sub_10013FEF8(_QWORD *a1, uint64_t a2)
{
  CFTypeRef *v3;
  uint64_t v4;
  _QWORD v6[7];

  v4 = a1[5];
  v3 = (CFTypeRef *)a1[6];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_100136F08;
  v6[3] = &unk_1002E8768;
  v6[4] = v4;
  v6[5] = v3;
  v6[6] = a2;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = sub_10001AC0C(a2, 2, v3, (uint64_t)v6);
  return *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
}

uint64_t sub_10013FF7C(int a1, uint64_t a2)
{
  _QWORD v3[5];
  int v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_10013FFE0;
  v3[3] = &unk_1002E83D0;
  v4 = a1;
  v3[4] = a2;
  return sub_100011A30(1, 1, 0, a2, (uint64_t)v3);
}

BOOL sub_10013FFE0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  CFDataRef v5;
  CFDataRef v6;
  unsigned int v7;
  CFDataRef v8;
  CFDataRef v9;
  _BOOL8 v10;
  UInt8 bytes[8];
  int v13;
  unsigned int v14;

  v4 = *(_DWORD *)(a1 + 40);
  *(_QWORD *)bytes = 0x114EC8A39FAB1A82;
  v13 = -397635414;
  v14 = bswap32(v4);
  v5 = CFDataCreate(0, bytes, 16);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(_DWORD *)(a1 + 40);
  *(_QWORD *)bytes = 0x104B57A5353A5AA7;
  v13 = -1803342146;
  v14 = bswap32(v7);
  v8 = CFDataCreate(0, bytes, 16);
  if (v8)
  {
    v9 = v8;
    v10 = sub_10012F100(a2, (uint64_t)v6, 0, *(CFTypeRef **)(a1 + 32))
       && sub_10012F100(a2, (uint64_t)v9, 0, *(CFTypeRef **)(a1 + 32));
    CFRelease(v6);
  }
  else
  {
    v10 = 0;
    v9 = v6;
  }
  CFRelease(v9);
  return v10;
}

BOOL sub_100140114(void *a1, void *a2, uint64_t a3, __CFString **a4)
{
  const __CFDictionary *v5;
  _BOOL8 v6;
  CFTypeRef cf;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *values[5];
  void *keys[5];

  keys[0] = (void *)kSecClass;
  keys[1] = (void *)kSecMatchLimit;
  keys[2] = (void *)kSecAttrIssuer;
  keys[3] = (void *)kSecAttrSerialNumber;
  keys[4] = (void *)kSecAttrSynchronizable;
  values[0] = (void *)kSecClassCertificate;
  values[1] = (void *)kSecMatchLimitOne;
  values[2] = a1;
  values[3] = a2;
  values[4] = (void *)kSecAttrSynchronizableAny;
  v9[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9[1] = a3;
  LOBYTE(v10) = 1;
  v5 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  cf = 0;
  v6 = sub_1000109C4(v5, (uint64_t)v9, (uint64_t *)&cf, a4);
  if (v5)
    CFRelease(v5);
  if (cf)
    CFRelease(cf);
  return v6;
}

void sub_100140A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100140CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100140E4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  const void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  const void *v16;
  NSObject *v17;
  NSObject *v18;
  const void *v19;
  void *v20;
  int v21;
  id v22;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (!v6)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ckks"));
    objc_msgSend(v14, "receiveTLKUploadRecords:", v5);

    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "intendedState"));
LABEL_7:
    v15 = (void *)v12;
    objc_msgSend(v8, "setNextState:", v12);

    goto LABEL_15;
  }
  if (objc_msgSend(v6, "isCuttlefishError:", 1033))
  {
    v9 = sub_10000EF14("octagon-ckks");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ckksConflictState"));
      v21 = 138412290;
      v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "A CKKS key hierarchy is out of date; moving to '%@'",
        (uint8_t *)&v21,
        0xCu);

    }
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ckksConflictState"));
    goto LABEL_7;
  }
  if (objc_msgSend(v6, "isCuttlefishError:", 1037))
  {
    v16 = sub_10000EF14("octagon-ckks");
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Cuttlefish reports we no longer exist.", (uint8_t *)&v21, 2u);
    }

    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "peerMissingState"));
    objc_msgSend(v8, "setNextState:", v18);
  }
  else
  {
    v19 = sub_10000EF14("SecError");
    v18 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 138412290;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "octagon: Error calling tlk upload: %@", (uint8_t *)&v21, 0xCu);
    }
  }

  objc_msgSend(v8, "setError:", v6);
LABEL_15:
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "finishedOp"));
  objc_msgSend(v8, "runBeforeGroupFinished:", v20);

}

void sub_1001410B8(uint64_t a1)
{
  id WeakRetained;
  const void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = sub_10000EF14("octagon");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "error"));
    v5 = (void *)v4;
    v6 = CFSTR("no error");
    if (v4)
      v6 = (const __CFString *)v4;
    v7 = 138412290;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finishing an update TLKs operation with %@", (uint8_t *)&v7, 0xCu);

  }
}

void sub_100141198(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewKeySets"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingTLKShares"));
  objc_msgSend(WeakRetained, "proceedWithKeys:pendingTLKShares:", v2, v3);

}

void sub_100141928(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001419EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100141CF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100142388(id a1)
{
  SecMetrics *v1;
  void *v2;

  v1 = objc_alloc_init(SecMetrics);
  v2 = (void *)qword_100341350;
  qword_100341350 = (uint64_t)v1;

}

void sub_1001423B0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = 138412290;
    v4 = v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "metrics URL is: %@", (uint8_t *)&v3, 0xCu);
  }
}

void sub_100142688(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014280C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100142D74(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100142D90(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dependencies", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(WeakRetained, "removeDependency:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

BOOL sub_100142E8C(id a1, id a2, unint64_t a3, BOOL *a4)
{
  return objc_msgSend(a2, "isFinished", a3, a4) ^ 1;
}

void sub_1001443E8(id a1)
{
  sub_1000341DC((uint64_t)CFSTR("ckks_analytics_v2.db"), (uint64_t)&stru_1002E8CB8);
  sub_1000341DC((uint64_t)CFSTR("ckks_analytics_v2.db-wal"), (uint64_t)&stru_1002E8CD8);
  sub_1000341DC((uint64_t)CFSTR("ckks_analytics_v2.db-shm"), (uint64_t)&stru_1002E8CF8);
}

void sub_100144430(id a1, const char *a2)
{
  remove((const std::__fs::filesystem::path *)a2, (std::error_code *)a2);
}

void sub_100144438(id a1, const char *a2)
{
  remove((const std::__fs::filesystem::path *)a2, (std::error_code *)a2);
}

void sub_100144440(id a1, const char *a2)
{
  remove((const std::__fs::filesystem::path *)a2, (std::error_code *)a2);
}

void sub_100144630(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_100144780(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id obj;
  os_log_t log;
  uint64_t v40;
  _QWORD v41[4];
  id v42;
  id v43;
  _QWORD v44[4];
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t v50[128];
  uint8_t buf[4];
  id v52;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isCancelled");
  v40 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "zoneName"));
  v6 = sub_10000BDF4(CFSTR("ckkscurrent"), v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);

  log = v7;
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v8)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CKKSDeleteCurrentItemPointersOperation cancelled, quitting", buf, 2u);
    }
    v9 = 0;
  }
  else
  {
    if (v8)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "identifiers"));
      *(_DWORD *)buf = 134217984;
      v52 = objc_msgSend(v10, "count");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Deleting current item pointers (%lu)", buf, 0xCu);

    }
    log = (os_log_t)objc_alloc_init((Class)NSMutableArray);
    v49 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "identifiers"));
    v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v47 != v12)
            objc_enumerationMutation(obj);
          v14 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "accessGroup"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), v15, v14));

          v17 = objc_alloc((Class)CKRecordID);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "viewState"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "zoneID"));
          v20 = objc_msgSend(v17, "initWithRecordName:zoneID:", v16, v19);

          -[NSObject addObject:](log, "addObject:", v20);
        }
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
      }
      while (v11);
    }

    v21 = objc_alloc_init((Class)NSBlockOperation);
    objc_msgSend(v21, "setName:", CFSTR("deleteCurrentItemPointers-modifyRecordsComplete"));
    objc_msgSend(*(id *)(v40 + 32), "dependOnBeforeGroupFinished:", v21);
    v22 = objc_msgSend(objc_alloc((Class)CKModifyRecordsOperation), "initWithRecordsToSave:recordIDsToDelete:", 0, log);
    objc_msgSend(*(id *)(v40 + 32), "setModifyRecordsOperation:", v22);

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "modifyRecordsOperation"));
    objc_msgSend(v23, "setAtomic:", 1);

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "modifyRecordsOperation"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "configuration"));
    objc_msgSend(v25, "setIsCloudKitSupportOperation:", 1);

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "modifyRecordsOperation"));
    objc_msgSend(v26, "setQualityOfService:", 25);

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "ckoperationGroup"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "modifyRecordsOperation"));
    objc_msgSend(v28, "setGroup:", v27);

    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_100144CC0;
    v44[3] = &unk_1002E8D20;
    objc_copyWeak(&v45, (id *)(v40 + 40));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "modifyRecordsOperation"));
    objc_msgSend(v29, "setPerRecordDeleteBlock:", v44);

    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_100144E4C;
    v41[3] = &unk_1002E8D70;
    objc_copyWeak(&v43, (id *)(v40 + 40));
    v30 = v21;
    v42 = v30;
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "modifyRecordsOperation"));
    objc_msgSend(v31, "setModifyRecordsCompletionBlock:", v41);

    v32 = *(void **)(v40 + 32);
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "modifyRecordsOperation"));
    objc_msgSend(v32, "dependOnBeforeGroupFinished:", v33);

    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "deps"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "ckdatabase"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v40 + 32), "modifyRecordsOperation"));
    objc_msgSend(v35, "addOperation:", v36);

    objc_destroyWeak(&v43);
    objc_destroyWeak(&v45);

    v9 = 1;
  }

  return v9;
}

void sub_100144C90(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100144CC0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  int v14;
  id v15;
  __int16 v16;
  id v17;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewState"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneName"));
  v11 = sub_10000BDF4(CFSTR("ckkscurrent"), v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);

  if (v6)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v14 = 138412546;
      v15 = v6;
      v16 = 2112;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "error on row: %@ %@", (uint8_t *)&v14, 0x16u);
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordName"));
    v14 = 138412290;
    v15 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Current pointer delete successful for %@", (uint8_t *)&v14, 0xCu);

  }
}

void sub_100144E4C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "databaseProvider"));

  if (v9)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewState"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "zoneID"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneName"));
    v16 = sub_10000BDF4(CFSTR("ckkscurrent"), v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);

    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CloudKit returned an error: %@", (uint8_t *)&buf, 0xCu);
    }

    objc_msgSend(WeakRetained, "setError:", v9);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v18, "addOperation:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v25 = 0x3032000000;
    v26 = sub_1001450B4;
    v27 = sub_1001450C4;
    v28 = 0;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1001450CC;
    v20[3] = &unk_1002E8D48;
    v21 = v8;
    v22 = WeakRetained;
    p_buf = &buf;
    objc_msgSend(v12, "dispatchSyncWithSQLTransaction:", v20);
    objc_msgSend(WeakRetained, "setError:", *(_QWORD *)(*((_QWORD *)&buf + 1) + 40));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v19, "addOperation:", *(_QWORD *)(a1 + 32));

    _Block_object_dispose(&buf, 8);
  }

}

void sub_100145094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001450B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001450C4(uint64_t a1)
{

}

uint64_t sub_1001450CC(uint64_t a1)
{
  id v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  __int128 v23;
  id obj;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  uint64_t v32;
  _BYTE v33[128];

  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v26;
    *(_QWORD *)&v4 = 138412546;
    v23 = v4;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v26 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps", v23));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "contextID"));
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        obj = *(id *)(v11 + 40);
        v12 = +[CKKSCurrentItemPointer intransactionRecordDeleted:contextID:resync:error:](CKKSCurrentItemPointer, "intransactionRecordDeleted:contextID:resync:error:", v8, v10, 0, &obj);
        objc_storeStrong((id *)(v11 + 40), obj);

        if ((v12 & 1) == 0)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewState"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "zoneID"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneName"));
          v16 = sub_10000BDF4(CFSTR("ckkscurrent"), v15);
          v17 = objc_claimAutoreleasedReturnValue(v16);

          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "recordName"));
            v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
            *(_DWORD *)buf = v23;
            v30 = v18;
            v31 = 2112;
            v32 = v19;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Couldn't delete current item pointer for %@ from database: %@", buf, 0x16u);

          }
          objc_msgSend(*(id *)(a1 + 40), "setError:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
        }
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewState"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "notifyViewChangedScheduler"));
        objc_msgSend(v21, "trigger");

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    }
    while (v5);
  }

  return 1;
}

uint64_t sub_100145AA8(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  uint64_t String;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  SECC2MPError *v23;
  _QWORD v24[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 24;
        goto LABEL_29;
      case 2u:
        v16 = 0;
        v17 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v18 |= (unint64_t)(v20 & 0x7F) << v16;
            if (v20 < 0)
            {
              v16 += 7;
              v9 = v17++ >= 9;
              if (v9)
              {
                v18 = 0;
                goto LABEL_36;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v18 = 0;
LABEL_36:
        *(_QWORD *)(a1 + 8) = v18;
        goto LABEL_37;
      case 3u:
        v21 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v21);
        v14 = 16;
LABEL_29:
        v22 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        goto LABEL_37;
      case 4u:
        v23 = objc_alloc_init(SECC2MPError);
        objc_storeStrong((id *)(a1 + 32), v23);
        v24[0] = 0xAAAAAAAAAAAAAAAALL;
        v24[1] = 0xAAAAAAAAAAAAAAAALL;
        if (PBReaderPlaceMark(a2, v24) && (sub_100145AA8(v23, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v24);

LABEL_37:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_37;
    }
  }
}

uint64_t sub_100145D80(const void *a1, uint64_t a2, const void *a3, unsigned int a4, const UInt8 *a5, _DWORD *a6, __CFData *a7, uint64_t a8, uint64_t a9, __CFString **a10)
{
  void **v17;
  void **v18;
  uint64_t v19;
  int v20;
  const void *v21;
  uint64_t v22;
  const UInt8 *v23;
  __CFString **v24;
  CFIndex v26;
  void **v27;
  void *v28;
  uint64_t v29;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v32;
  const __CFData *v33;
  CFTypeID v34;
  const UInt8 *v35;
  CFIndex v36;
  uint64_t v37;
  const __CFString *v38;
  BOOL v39;
  const char *v40;
  int v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  CFTypeRef cf;
  int v48[2];
  rsize_t __n;
  uint64_t v50;
  void *v51;
  CFDataRef theData;
  void **v53;
  void **v54;

  v17 = (void **)sub_100023D74(0, 0);
  v54 = v17;
  theData = 0;
  v53 = 0;
  v50 = 0;
  v51 = 0;
  if (!v17)
    return sub_100019F20(-108, a10, CFSTR("ks_crypt_diversify: failed to create aks_params"));
  v18 = v17;
  sub_100023F74(v17, 15, a8, a9);
  sub_10002406C(v18, &v51, (size_t *)&v50);
  *(_QWORD *)v48 = 0;
  __n = 0;
  if (CFEqual(a1, CFSTR("oe")))
  {
    v19 = a2;
    v20 = a2;
    v21 = a3;
    v22 = sub_1000240CC(v20, (int)a3, 0, (uint64_t)v51, v50, &v53);
    if (!(_DWORD)v22)
    {
      v22 = sub_100024FF8((uint64_t)v53, (uint64_t)v51, v50, (uint64_t)a5, a4, v48, &__n);
      if (!(_DWORD)v22)
      {
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        v23 = (const UInt8 *)sub_1000252F8((uint64_t *)v53, &cf);
        v24 = a10;
        if (v23)
        {
          if (!sub_100146214(*(UInt8 **)v48, __n, v23, (CFIndex)cf, a7))
          {
            if (v51)
              free(v51);
            sub_100024070(&v54);
            v43 = a3;
            v44 = v19;
            v42 = (uint64_t)"encrypt";
            v38 = CFSTR("ks_crypt_diversify: failed to '%s' item (class %d, bag: %d) Item can't be encrypted due to merge failed, so drop the item.");
            goto LABEL_54;
          }
          *a6 = (_DWORD)a3;
        }
        goto LABEL_17;
      }
    }
    v37 = v22;
    v24 = a10;
  }
  else
  {
    v19 = a2;
    if (CFEqual(a1, CFSTR("od")) || CFEqual(a1, CFSTR("odel")))
    {
      v26 = a4;
      v24 = a10;
      if ((sub_100146360(a2, a5, v26, (uint64_t *)&v53, (CFTypeRef *)&theData, a10) & 1) == 0)
      {
        if (v51)
          free(v51);
        sub_100024070(&v54);
        v42 = a2;
        v38 = CFSTR("ks_crypt_diversify: failed to create ref key with blob because bad data (bag: %d)");
        goto LABEL_54;
      }
      v21 = a3;
      v27 = v53;
      v29 = v50;
      v28 = v51;
      BytePtr = CFDataGetBytePtr(theData);
      Length = CFDataGetLength(theData);
      v32 = sub_100025178((uint64_t)v27, (uint64_t)v28, v29, (uint64_t)BytePtr, Length, v48, &__n);
      if (!(_DWORD)v32)
      {
        cf = 0;
        sub_100020974(0, (CFBooleanRef *)&cf, (CFTypeRef *)a10, *(const UInt8 **)v48, *(_QWORD *)v48 + __n);
        v33 = (const __CFData *)cf;
        v34 = CFGetTypeID(cf);
        if (v34 == CFDataGetTypeID())
        {
          CFDataSetLength(a7, 0);
          v35 = CFDataGetBytePtr(v33);
          v36 = CFDataGetLength(v33);
          CFDataAppendBytes(a7, v35, v36);
        }
        if (v33)
          CFRelease(v33);
LABEL_17:
        v37 = 0;
        goto LABEL_18;
      }
      v37 = v32;
    }
    else
    {
      v37 = 3758097090;
      v24 = a10;
      v21 = a3;
    }
  }
LABEL_18:
  if (v51)
    free(v51);
  if (v54)
    sub_100024070(&v54);
  if (*(_QWORD *)v48)
    sub_100025338(*(void **)v48, __n);
  if (v53)
    sub_100024478((uint64_t *)&v53);
  if (theData)
    CFRelease(theData);
  if ((int)v37 > -536870161)
  {
    if ((int)v37 > -536362975)
    {
      if ((_DWORD)v37 != -536362974)
      {
        if (!(_DWORD)v37)
          return 1;
        goto LABEL_56;
      }
      v44 = (uint64_t)v21;
      v45 = v19;
      v42 = 3758604322;
      v43 = a1;
      v38 = CFSTR("ks_crypt_diversify: %x failed to '%@' item (class %d, bag: %d) Persona doesn't exist, so drop the item.");
LABEL_54:
      v41 = -26275;
      return sub_100019F20(v41, v24, v38, v42, v43, v44, v45);
    }
    if ((_DWORD)v37 == -536870160)
    {
      v44 = (uint64_t)v21;
      v45 = v19;
      v42 = 3758097136;
      v43 = a1;
      v38 = CFSTR("ks_crypt_diversify: %x failed to '%@' item (class %d, bag: %d) No key available for class.");
LABEL_57:
      v41 = -25291;
      return sub_100019F20(v41, v24, v38, v42, v43, v44, v45);
    }
    if ((_DWORD)v37 != -536362989)
    {
LABEL_56:
      v44 = (uint64_t)v21;
      v45 = v19;
      v42 = v37;
      v43 = a1;
      v38 = CFSTR("ks_crypt_diversify: %x failed to '%@' item (class %d, bag: %d)");
      goto LABEL_57;
    }
LABEL_51:
    v44 = (uint64_t)v21;
    v45 = v19;
    v42 = v37;
    v43 = a1;
    v38 = CFSTR("ks_crypt_diversify: %x failed to '%@' item (class %d, bag: %d) Item can't be decrypted on this device, ever, so drop the item.");
    goto LABEL_54;
  }
  if ((_DWORD)v37 == -536870212)
    goto LABEL_51;
  if ((_DWORD)v37 != -536870207 && (_DWORD)v37 != -536870174)
    goto LABEL_56;
  v39 = (_DWORD)v21 == 10 || (_DWORD)v21 == 7;
  v40 = "";
  if (v39)
    v40 = " (hibernation?)";
  return sub_100019F20(-25308, v24, CFSTR("ks_crypt_diversify: %x failed to '%@' item (class %d, bag: %d) Access to item attempted while keychain is locked%s."), v37, a1, v21, v19, v40);
}

BOOL sub_100146214(UInt8 *bytes, CFIndex length, const UInt8 *a3, CFIndex a4, __CFData *a5)
{
  CFDataRef v8;
  CFDataRef v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  CFDataRef v17;
  BOOL v18;
  _BOOL8 v19;
  _BOOL8 v20;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFData *v26;
  const UInt8 *BytePtr;
  CFIndex v28;

  v8 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, bytes, length, kCFAllocatorNull);
  v9 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a3, a4, kCFAllocatorNull);
  v17 = v9;
  if (v8)
    v18 = v9 == 0;
  else
    v18 = 1;
  if (!v18)
  {
    v22 = (const __CFString *)sub_10012E96C(kCFAllocatorDefault, v10, v11, v12, v13, v14, v15, v16, (uint64_t)CFSTR("d1"), (uint64_t)v8);
    CFDataSetLength(a5, 0);
    v26 = sub_10001A474(v22, 0, v23, v24, v25);
    v19 = (_BOOL8)v26;
    if (v26)
    {
      BytePtr = CFDataGetBytePtr(v26);
      v28 = CFDataGetLength((CFDataRef)v19);
      CFDataAppendBytes(a5, BytePtr, v28);
      CFRelease((CFTypeRef)v19);
      v19 = CFDataGetLength(a5) > 0;
    }
    CFRelease(v22);
LABEL_13:
    CFRelease(v8);
    v20 = v19;
    if (!v17)
      return v20;
    goto LABEL_8;
  }
  v19 = 0;
  v20 = 0;
  if (v8)
    goto LABEL_13;
  if (v9)
LABEL_8:
    CFRelease(v17);
  return v20;
}

uint64_t sub_100146360(uint64_t a1, const UInt8 *a2, CFIndex a3, uint64_t *a4, CFTypeRef *a5, __CFString **a6)
{
  const UInt8 *v11;
  unsigned __int8 *v12;
  CFTypeRef v13;
  CFTypeID v14;
  CFDataRef v15;
  uint64_t v16;
  CFTypeID v18;
  CFStringRef v19;
  __CFString *v20;
  const __CFData *v21;
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t v24;
  const __CFData *v25;
  CFTypeRef v26;
  CFTypeRef cf;

  v26 = 0;
  cf = 0;
  v25 = 0;
  v11 = &a2[a3];
  v12 = sub_100020974(0, (CFBooleanRef *)&cf, 0, a2, (uint64_t)&a2[a3]);
  if (!v12 || v12 != v11)
  {
    sub_100019F20(-26275, a6, CFSTR("encrypted_data_from_blob: NULL 'blob data'"));
    v15 = 0;
    v16 = 0;
    v13 = cf;
    if (!cf)
      goto LABEL_8;
    goto LABEL_7;
  }
  v13 = cf;
  v14 = CFGetTypeID(cf);
  if (v14 != CFDictionaryGetTypeID())
  {
    v18 = CFGetTypeID(v13);
    v19 = CFCopyTypeIDDescription(v18);
    v20 = (__CFString *)CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("encrypted_data_from_blob: Bad object type %@ for 'blob data'"), v19);
    sub_100019F20(-26276, a6, CFSTR("%@"), v20);
    sub_10003429C(v20, 0x53C00002u);
    if (v19)
      CFRelease(v19);
    if (v20)
      CFRelease(v20);
    v15 = 0;
LABEL_18:
    v16 = 0;
    if (!v13)
      goto LABEL_8;
LABEL_7:
    CFRelease(v13);
    goto LABEL_8;
  }
  if ((sub_10014658C((const __CFDictionary *)v13, (CFTypeRef *)&v25, &v26) & 1) != 0)
  {
    v15 = v25;
  }
  else
  {
    v15 = CFDataCreate(kCFAllocatorDefault, v11, a3);
    v26 = CFRetain(v15);
  }
  if (!v15)
  {
    sub_100019F20(-26275, a6, CFSTR("encrypted_data_from_blob: failed to decode 'encrypted data'"));
    goto LABEL_18;
  }
  v21 = (const __CFData *)v26;
  if (!v26)
  {
    sub_100019F20(-26275, a6, CFSTR("encrypted_data_from_blob: failed to decode 'key data'"));
    goto LABEL_18;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)v26);
  Length = CFDataGetLength(v21);
  v24 = sub_100024528(a1, BytePtr, Length, a4);
  if ((_DWORD)v24)
  {
    sub_100019F20(-26275, a6, CFSTR("aks_ref_key: failed to create ref key with blob: %x (bag: %d)"), v24, a1);
    goto LABEL_18;
  }
  if (a5)
    *a5 = CFRetain(v15);
  v16 = 1;
  if (v13)
    goto LABEL_7;
LABEL_8:
  if (v26)
    CFRelease(v26);
  if (v15)
    CFRelease(v15);
  return v16;
}

uint64_t sub_10014658C(const __CFDictionary *a1, CFTypeRef *a2, CFTypeRef *a3)
{
  const void *Value;
  const void *v7;
  BOOL v8;
  const void *v9;
  CFTypeID TypeID;
  CFTypeID v11;

  Value = CFDictionaryGetValue(a1, CFSTR("d1"));
  v7 = CFDictionaryGetValue(a1, CFSTR("d2"));
  if (Value)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  v9 = v7;
  TypeID = CFDataGetTypeID();
  if (TypeID != CFGetTypeID(Value))
    return 0;
  v11 = CFDataGetTypeID();
  if (v11 != CFGetTypeID(v9))
    return 0;
  *a2 = CFRetain(Value);
  *a3 = CFRetain(v9);
  return 1;
}

void sub_100146644(CFErrorRef *a1, uint64_t a2)
{
  __CFError *v4;
  const __CFDictionary *v5;
  const __CFDictionary *MutableCopy;
  CFErrorRef v7;
  CFNumberRef v8;
  const __CFArray *Value;
  CFMutableArrayRef Mutable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  const __CFDictionary *v19;
  __CFArray *v20;
  CFArrayRef v21;
  uint64_t valuePtr;

  if (a1)
  {
    v4 = *a1;
    if (!v4)
      goto LABEL_10;
    if (CFErrorGetCode(v4) != -25330)
      return;
    if (*a1)
    {
      v5 = CFErrorCopyUserInfo(*a1);
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5);
      CFRelease(v5);
      v7 = *a1;
      if (*a1)
      {
        *a1 = 0;
        CFRelease(v7);
      }
      if (a2)
        goto LABEL_8;
    }
    else
    {
LABEL_10:
      MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (a2)
      {
LABEL_8:
        valuePtr = -25330;
        v8 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
        Value = (const __CFArray *)CFDictionaryGetValue(MutableCopy, v8);
        if (Value)
          Mutable = CFArrayCreateMutableCopy(0, 0, Value);
        else
          Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
        v20 = Mutable;
        v21 = sub_1001467E0((uint64_t)Mutable, v11, v12, v13, v14, v15, v16, v17, a2);
        CFArrayAppendValue(v20, v21);
        CFRelease(v21);
        CFDictionarySetValue(MutableCopy, v8, v20);
        CFRelease(v8);
        CFRelease(v20);
        v18 = kCFErrorDomainOSStatus;
        v19 = MutableCopy;
        goto LABEL_14;
      }
    }
    v18 = kCFErrorDomainOSStatus;
    v19 = 0;
LABEL_14:
    *a1 = CFErrorCreate(0, v18, -25330, v19);
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
}

CFArrayRef sub_1001467E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFIndex v9;
  uint64_t *v10;
  CFMutableArrayRef Mutable;
  __CFArray *i;
  const __CFNull **v13;
  const __CFNull *v14;
  CFNullRef v15;
  CFArrayRef Copy;
  uint64_t *v18;
  const __CFNull **v19;

  v18 = &a9;
  v9 = -1;
  do
  {
    v10 = v18++;
    ++v9;
  }
  while (*v10);
  v19 = (const __CFNull **)&a9;
  Mutable = CFArrayCreateMutable(0, v9, &kCFTypeArrayCallBacks);
  if (!Mutable)
    return 0;
  for (i = Mutable; v9; --v9)
  {
    v13 = v19++;
    v14 = *v13;
    if (v14)
      v15 = v14;
    else
      v15 = kCFNull;
    CFArrayAppendValue(i, v15);
  }
  Copy = CFArrayCreateCopy(0, i);
  CFRelease(i);
  return Copy;
}

void sub_1001468B0(uint64_t a1, CFTypeRef cf1, uint64_t a3, uint64_t a4, uint64_t a5, const __CFData *a6, __CFString **a7)
{
  const char *v14;
  int v15;
  const char *v16;
  UInt8 *BytePtr;
  CFIndex Length;
  _DWORD *v19;
  _DWORD *v20;

  if (CFEqual(cf1, CFSTR("od")))
  {
    v14 = "decrypt";
  }
  else if (CFEqual(cf1, CFSTR("oe")))
  {
    v14 = "encrypt";
  }
  else
  {
    v14 = "";
  }
  v15 = CFEqual(cf1, CFSTR("odel"));
  v16 = "delete";
  if (!v15)
    v16 = v14;
  if ((int)a1 <= -536870161)
  {
    switch((_DWORD)a1)
    {
      case 0xE00002BC:
LABEL_19:
        sub_100019F20(-26275, a7, CFSTR("aks_ref_key: %x failed to '%s' item (class %d, bag: %d) Item can't be decrypted on this device, ever, so drop the item."), a1, v16, a4, a3);
        return;
      case 0xE00002CE:
        goto LABEL_20;
      case 0xE00002E2:
        sub_100019F20(-25308, a7, CFSTR("aks_ref_key: %x failed to '%s' item (class %d, bag: %d) Access to item attempted while keychain is locked."), 3758097122, v16, a4, a3);
        return;
    }
LABEL_26:
    sub_100019F20(-25291, a7, CFSTR("aks_ref_key: %x failed to '%s' item (class %d, bag: %d)"), a1, v16, a4, a3);
    return;
  }
  if ((int)a1 > -536363000)
  {
    if ((_DWORD)a1 == -536362999 || (_DWORD)a1 == -536362989)
      goto LABEL_19;
    goto LABEL_26;
  }
  if ((_DWORD)a1 == -536870160)
  {
    sub_100019F20(-25291, a7, CFSTR("ks_crypt: %x failed to '%@' item (class %d, bag: %d) No key available for class."), 3758097136, cf1, a4, a3);
    return;
  }
  if ((_DWORD)a1 != -536363000)
    goto LABEL_26;
LABEL_20:
  if ((_DWORD)a1 == -536870194 && a6)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(a6);
    Length = CFDataGetLength(a6);
    v19 = ACMContextCreateWithExternalForm(BytePtr, Length);
    if (v19)
    {
      v20 = v19;
      ACMContextRemovePassphraseCredentialsByPurposeAndScope(v19, 0, 1);
      ACMContextDelete(v20, 0);
    }
  }
  sub_100146644((CFErrorRef *)a7, a5);
}

uint64_t sub_100146B00(uint64_t a1, const __CFData *a2, __CFData *a3, const __CFData *a4, CFDataRef theData, uint64_t a6, __CFString **a7)
{
  const __CFData *Length;
  const UInt8 *BytePtr;
  const void *v15;
  const UInt8 *v16;
  int v17;
  void *v18;
  uint64_t v19;
  UInt8 *v20;
  size_t v21;
  uint64_t v22;
  const __CFData *v23;
  CFTypeID v24;
  const UInt8 *v25;
  CFIndex v26;
  uint64_t v27;
  CFTypeRef cf;
  size_t v30;
  uint64_t v31;
  void *v32;
  void *v33;

  Length = theData;
  v32 = 0;
  v33 = 0;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    Length = (const __CFData *)CFDataGetLength(Length);
  }
  else
  {
    BytePtr = 0;
  }
  v30 = 0;
  v31 = 0;
  v15 = (const void *)SecAccessControlCopyData(a6);
  if (a4)
  {
    v16 = CFDataGetBytePtr(a4);
    v17 = CFDataGetLength(a4);
    sub_100023C38((uint64_t)BytePtr, (uint64_t)Length, 0, 0, (uint64_t)v16, v17, &v33, &v31);
    v18 = v33;
    v19 = v31;
    v20 = (UInt8 *)CFDataGetBytePtr(a2);
    v21 = CFDataGetLength(a2);
    v22 = sub_1000245EC(a1, (uint64_t)v18, v19, v20, v21, &v32, &v30);
    if ((_DWORD)v22)
    {
      sub_1001468B0(v22, CFSTR("od"), 0, 0, (uint64_t)v15, a4, a7);
    }
    else if (v32)
    {
      cf = 0;
      sub_100020974(kCFAllocatorDefault, (CFBooleanRef *)&cf, 0, (const UInt8 *)v32, (uint64_t)v32 + v30);
      v23 = (const __CFData *)cf;
      if (cf)
      {
        v24 = CFGetTypeID(cf);
        if (v24 == CFDataGetTypeID())
        {
          CFDataSetLength(a3, 0);
          v25 = CFDataGetBytePtr(v23);
          v26 = CFDataGetLength(v23);
          CFDataAppendBytes(a3, v25, v26);
          CFRelease(v23);
          v27 = 1;
          goto LABEL_13;
        }
        CFRelease(v23);
        sub_100019F20(-26275, a7, CFSTR("ks_crypt_acl: %x failed to '%s' item, Item can't be decrypted due to wrong data, so drop the item."), 0, "decrypt");
      }
      else
      {
        sub_100019F20(-26275, a7, CFSTR("ks_crypt_acl: %x failed to '%s' item, Item can't be decrypted due to failed decode der, so drop the item."), 0, "decrypt");
      }
    }
    else
    {
      sub_100019F20(-26275, a7, CFSTR("ks_crypt_acl: %x failed to '%s' item, Item can't be decrypted due to invalid der data, so drop the item."), 0, "decrypt");
    }
  }
  else
  {
    sub_100146644((CFErrorRef *)a7, 0);
  }
  v27 = 0;
LABEL_13:
  if (v33)
    free(v33);
  if (v32)
    free(v32);
  if (v15)
    CFRelease(v15);
  return v27;
}

uint64_t sub_100146D5C(uint64_t a1, const __CFData *a2, const __CFData *Length, uint64_t a4, CFErrorRef *a5)
{
  const __CFBoolean *Constraint;
  BOOL v11;
  const void *v12;
  const UInt8 *BytePtr;
  uint64_t v15;
  const UInt8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;

  v21 = 0;
  Constraint = (const __CFBoolean *)SecAccessControlGetConstraint(a4, CFSTR("odel"));
  if (Constraint)
    v11 = kCFBooleanTrue == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (Constraint != kCFBooleanTrue)
      goto LABEL_9;
LABEL_7:
    v12 = 0;
LABEL_15:
    v15 = 1;
    goto LABEL_16;
  }
  if (CFEqual(Constraint, kCFBooleanTrue))
    goto LABEL_7;
LABEL_9:
  if (!a2)
  {
    sub_100146644(a5, 0);
    v15 = 0;
    v12 = 0;
    goto LABEL_16;
  }
  v12 = (const void *)SecAccessControlCopyData(a4);
  if (Length)
  {
    BytePtr = CFDataGetBytePtr(Length);
    Length = (const __CFData *)CFDataGetLength(Length);
  }
  else
  {
    BytePtr = 0;
  }
  v20 = 0;
  v16 = CFDataGetBytePtr(a2);
  v17 = CFDataGetLength(a2);
  sub_100023C38((uint64_t)BytePtr, (uint64_t)Length, 0, 0, (uint64_t)v16, v17, &v21, &v20);
  v18 = sub_10002487C(a1, (uint64_t)v21, v20);
  if (!(_DWORD)v18)
    goto LABEL_15;
  sub_1001468B0(v18, CFSTR("odel"), 0, 0, (uint64_t)v12, a2, (__CFString **)a5);
  v15 = 0;
LABEL_16:
  if (v21)
    free(v21);
  if (v12)
    CFRelease(v12);
  return v15;
}

void sub_100146ED4(id a1)
{
  int v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  uint8_t buf[4];
  int v6;

  v4 = -1;
  if (sub_100026048(0, &v4))
  {
    v1 = MKBGetDeviceLockState(0);
    v2 = sub_10000EF14("aks");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v6 = v1;
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "AppleKeyStore lock state: %d", buf, 8u);
    }
  }
  byte_100341368 = 1;
  v3 = sub_10000EF14("aks");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "using hwaes key", buf, 2u);
  }
}

BOOL sub_100146FEC(const __CFData *cf, const __CFData *a2, int *a3, CFTypeRef *a4)
{
  CFTypeID v8;
  const UInt8 *BytePtr;
  int Length;
  int v11;
  int v13;
  const UInt8 *v14;
  int v15;
  int v16;
  int v17;

  if (cf && (v8 = CFGetTypeID(cf), v8 == CFDataGetTypeID()))
  {
    BytePtr = CFDataGetBytePtr(cf);
    Length = CFDataGetLength(cf);
    v11 = sub_100025C10(BytePtr, Length, a3);
    if (v11)
    {
      return sub_10003252C(v11, a4, CFSTR("aks_load_bag failed: %@"), cf);
    }
    else if (a2
           && (v13 = *a3,
               v14 = CFDataGetBytePtr(a2),
               v15 = CFDataGetLength(a2),
               (v16 = sub_100025B14(v13, (uint64_t)v14, v15)) != 0))
    {
      v17 = v16;
      sub_100025D28(*a3);
      return sub_10003252C(v17, a4, CFSTR("aks_unlock_bag failed"));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (a4)
      sub_100019F20(-50, (__CFString **)a4, CFSTR("object %@ is not a data"), cf);
    return 0;
  }
}

BOOL sub_100147114(int a1, CFTypeRef *a2)
{
  int v3;

  v3 = sub_100025D28(a1);
  return !v3 || sub_10003252C(v3, a2, CFSTR("aks_unload_bag failed"));
}

CFMutableArrayRef sub_100147154()
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v1;
  _QWORD block[5];

  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v1 = Mutable;
  if (qword_100340D18)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_10002F2B8;
    block[3] = &unk_1002DAFF8;
    block[4] = Mutable;
    if (qword_100340D38 != -1)
      dispatch_once(&qword_100340D38, &stru_1002DB078);
    dispatch_sync((dispatch_queue_t)qword_100340D30, block);
  }
  return v1;
}

BOOL sub_10014720C(const __CFString *a1, __CFString **a2)
{
  CFTypeID v4;
  CFTypeID v5;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      sub_10002FBD8(a1, 3);
      return 1;
    }
    v5 = CFGetTypeID(a1);
    if (v5 == CFDictionaryGetTypeID())
    {
      sub_10002F594((const __CFDictionary *)a1, 3);
      return 1;
    }
  }
  return sub_100019F20(-50, a2, CFSTR("Unsupported CFType"));
}

id sub_1001472A4(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v4 = sub_1002025E0();
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "circle_transport"));

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "circle_transport"));
      v10 = objc_msgSend(v9, "kvssendDebugInfo:debug:err:", CFSTR("Scope"), a1, a2);

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_100147348(id a1, NSError *a2)
{
  const void *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_10000EF14("keychainitemupgrade");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "kicking off keychain item upgrade", v4, 2u);
  }

}

void sub_100147494(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  const __CFDictionary *v5;
  int v6;
  __CFUserNotification *v7;
  const void *v8;
  NSObject *v9;
  _BOOL4 v10;
  const void *v11;
  NSObject *v12;
  CFOptionFlags responseFlags;
  SInt32 error;
  uint8_t buf[4];
  _BYTE v17[10];
  SInt32 v18;
  _QWORD v19[3];
  _QWORD v20[3];

  v19[0] = kCFUserNotificationAlertMessageKey;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 32)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 40)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("AppleInternal only:\nYour account has %@ keychain devices, over the recommended performance limit of %@. Please see:\nhttps://at.apple.com/keychain-help"), v2, v3));
  v20[0] = v4;
  v20[1] = CFSTR("UserSecrets: Keychain");
  v19[1] = kCFUserNotificationAlertHeaderKey;
  v19[2] = kCFUserNotificationAlertTopMostKey;
  v20[2] = &__kCFBooleanTrue;
  v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 3));

  v6 = -250;
  while (1)
  {
    error = 0;
    v7 = CFUserNotificationCreate(0, 0.0, 3uLL, &error, v5);
    v8 = sub_10000EF14("octagon");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (!v7)
      break;
    if (v10)
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v17 = v7;
      *(_WORD *)&v17[8] = 1024;
      v18 = error;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "popdialog: CFNotification %p %d", buf, 0x12u);
    }

    responseFlags = 0;
    error = CFUserNotificationReceiveResponse(v7, 0.0, &responseFlags);
    v11 = sub_10000EF14("octagon");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v17 = error;
      *(_WORD *)&v17[4] = 1024;
      *(_DWORD *)&v17[6] = responseFlags;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "popdialog: user responded %d %d", buf, 0xEu);
    }

    CFRelease(v7);
    if (error || (responseFlags & 3) != 0)
    {
      sleep(5u);
      if (!__CFADD__(v6++, 1))
        continue;
    }
    goto LABEL_15;
  }
  if (v10)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v17 = error;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "popdialog: Failed to create notification %d\n", buf, 8u);
  }

LABEL_15:
}

void sub_100147760(id a1)
{
  const void *v1;
  NSObject *v2;
  const __CFString *v3;
  int v4;
  const __CFString *v5;

  byte_1003400C8 = _os_feature_enabled_impl("Security", "WarnTooManyPeers");
  v1 = sub_10000EF14("octagon");
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1003400C8)
      v3 = CFSTR("enabled");
    else
      v3 = CFSTR("disabled");
    v4 = 138412290;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "popdialog: WarnTooManyPeers is %@ (via feature flags)", (uint8_t *)&v4, 0xCu);
  }

}

uint64_t sub_10014783C(uint64_t a1, void *a2, _QWORD *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  const void *v10;
  _QWORD v12[4];
  id v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  void *v26;

  v7 = a2;
  v26 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = sub_1001479DC;
  v24 = sub_1001479EC;
  v25 = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 1;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001479F4;
  v12[3] = &unk_1002E8E18;
  v14 = &v16;
  v8 = a4;
  v13 = v8;
  v15 = &v20;
  if ((sub_10001E3C4(a1, (uint64_t)v7, (CFTypeRef *)&v26, (uint64_t)v12) & 1) == 0)
  {
    v10 = v26;
    if (a3)
    {
      v9 = 0;
      *a3 = v26;
      v26 = 0;
      goto LABEL_11;
    }
    if (v26)
    {
      v26 = 0;
      CFRelease(v10);
    }
LABEL_10:
    v9 = 0;
    goto LABEL_11;
  }
  if (!*((_BYTE *)v17 + 24))
  {
    if (a3)
    {
      v9 = 0;
      *a3 = objc_retainAutorelease((id)v21[5]);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v9 = 1;
LABEL_11:

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);

  return v9;
}

void sub_1001479B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001479DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001479EC(uint64_t a1)
{

}

void sub_1001479F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  id obj;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v3 + 40);
  v4 = (*(uint64_t (**)(void))(v2 + 16))();
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v4;
}

uint64_t sub_100147A5C(sqlite3_stmt *a1, uint64_t a2, const __CFString *a3, _QWORD *a4)
{
  uint64_t v5;
  id v6;
  id v8;

  v8 = 0;
  v5 = sub_100013544(a1, a2, a3, (CFTypeRef *)&v8);
  if ((v5 & 1) == 0)
  {
    v6 = v8;
    if (a4)
    {
      *a4 = v8;
    }
    else if (v8)
    {
      v8 = 0;
      CFRelease(v6);
    }
  }
  return v5;
}

uint64_t sub_100147AB8(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3, void *a4)
{
  id v7;
  uint64_t v8;
  const void *v9;
  _QWORD v11[4];
  id v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  void *v25;

  v25 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = sub_1001479DC;
  v23 = sub_1001479EC;
  v24 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 1;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100147C4C;
  v11[3] = &unk_1002E8E40;
  v13 = &v15;
  v7 = a4;
  v12 = v7;
  v14 = &v19;
  if ((sub_100019C40(a1, a2, (CFTypeRef *)&v25, (uint64_t)v11) & 1) == 0)
  {
    v9 = v25;
    if (a3)
    {
      v8 = 0;
      *a3 = v25;
      v25 = 0;
      goto LABEL_11;
    }
    if (v25)
    {
      v25 = 0;
      CFRelease(v9);
    }
LABEL_10:
    v8 = 0;
    goto LABEL_11;
  }
  if (!*((_BYTE *)v16 + 24))
  {
    if (a3)
    {
      v8 = 0;
      *a3 = objc_retainAutorelease((id)v20[5]);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v8 = 1;
LABEL_11:

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);

  return v8;
}

void sub_100147C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100147C4C(_QWORD *a1, _BYTE *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id obj;

  v4 = objc_autoreleasePoolPush();
  v5 = a1[4];
  v6 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v6 + 40);
  v7 = (*(uint64_t (**)(void))(v5 + 16))();
  objc_storeStrong((id *)(v6 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v7;
  if (!*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    *a2 = 1;
  objc_autoreleasePoolPop(v4);
}

uint64_t sub_100147CEC(uint64_t a1, _QWORD *a2, void *a3)
{
  id v5;
  BOOL v6;
  uint64_t v7;
  const void *v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  void *v24;

  v24 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = sub_1001479DC;
  v22 = sub_1001479EC;
  v23 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 1;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100147E74;
  v10[3] = &unk_1002E8E68;
  v12 = &v14;
  v5 = a3;
  v11 = v5;
  v13 = &v18;
  v6 = sub_10001AC0C(a1, 6, (CFTypeRef *)&v24, (uint64_t)v10);
  if (!*((_BYTE *)v15 + 24))
  {
    if (a2)
    {
      v7 = 0;
      *a2 = objc_retainAutorelease((id)v19[5]);
      goto LABEL_11;
    }
LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  if (!v6)
  {
    v8 = v24;
    if (a2)
    {
      v7 = 0;
      *a2 = v24;
      v24 = 0;
      goto LABEL_11;
    }
    if (v24)
    {
      v24 = 0;
      CFRelease(v8);
    }
    goto LABEL_10;
  }
  v7 = 1;
LABEL_11:

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);

  return v7;
}

void sub_100147E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100147E74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  id obj;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v3 + 40);
  v4 = (*(uint64_t (**)(void))(v2 + 16))();
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v4;
  return *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24);
}

void sub_10014D78C(id a1)
{
  +[NSError setUserInfoValueProviderForDomain:provider:](NSError, "setUserInfoValueProviderForDomain:provider:", CFSTR("KCSharingErrorDomain"), &stru_1002E8EC8);
}

void sub_10014D7A8(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = KCSharingLogObject(CFSTR("KCSharingPreflight"));
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138543362;
      v6 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to preflight sync controller with error=%{public}@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_10014D860(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v2 = a2;
  v3 = KCSharingLogObject(CFSTR("KCSharingPerformMaintenance"));
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 138543362;
      v7 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to stage missed outgoing changes with error=%{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Maintenance complete", (uint8_t *)&v6, 2u);
  }

}

void sub_10014D94C(id a1, BOOL a2, NSError *a3)
{
  _BOOL4 v3;
  NSError *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  NSError *v9;

  v3 = a2;
  v4 = a3;
  v5 = KCSharingLogObject(CFSTR("KCSharingPerformResync"));
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Scheduled resync complete 🎉", (uint8_t *)&v8, 2u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v8 = 138412290;
    v9 = v4;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unable to complete scheduled resync: %@", (uint8_t *)&v8, 0xCu);
  }

}

uint64_t sub_10014E210(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t String;
  void *v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((int)(v6 >> 3) > 100)
    {
      if ((_DWORD)v12 == 101)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (1)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
          v25 |= (unint64_t)(v27 & 0x7F) << v23;
          if ((v27 & 0x80) == 0)
            goto LABEL_46;
          v23 += 7;
          v9 = v24++ >= 9;
          if (v9)
          {
            v25 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v25 = 0;
LABEL_48:
        *(_BYTE *)(a1 + 32) = v25 != 0;
      }
      else
      {
        if ((_DWORD)v12 != 201)
        {
LABEL_39:
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v16 = 0;
        v17 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (1)
        {
          v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
          v18 |= (unint64_t)(v20 & 0x7F) << v16;
          if ((v20 & 0x80) == 0)
            goto LABEL_42;
          v16 += 7;
          v9 = v17++ >= 9;
          if (v9)
          {
            LODWORD(v18) = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v18) = 0;
LABEL_44:
        *(_DWORD *)(a1 + 8) = v18;
      }
    }
    else
    {
      if ((_DWORD)v12 == 1)
      {
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = 16;
      }
      else
      {
        if ((_DWORD)v12 != 2)
          goto LABEL_39;
        v13 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        v15 = 24;
      }
      v22 = *(void **)(a1 + v15);
      *(_QWORD *)(a1 + v15) = v14;

    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10014E9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10014EC84(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_10014EF38(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  id v17;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v11 = WeakRetained;
  if (v9)
  {
    v12 = sub_10000EF14("SecError");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 138412290;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "octagon: Error preparing voucher: %@", (uint8_t *)&v16, 0xCu);
    }

    objc_msgSend(v11, "setError:", v9);
  }
  else
  {
    objc_msgSend(WeakRetained, "setVoucher:", v7);
    objc_msgSend(v11, "setVoucherSig:", v8);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "intendedState"));
    objc_msgSend(v11, "setNextState:", v14);

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "finishedOp"));
  objc_msgSend(v11, "runBeforeGroupFinished:", v15);

}

void sub_10014F098(uint64_t a1)
{
  void *v2;
  _BOOL8 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  v3 = v2 == 0;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", v4, v3, v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewKeySets"));
  objc_msgSend(WeakRetained, "proceedWithKeys:", v6);

}

uint64_t sub_10014F548(uint64_t a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void *v33;
  id v34;
  id obj;
  NSObject *v36;
  _QWORD v38[5];
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  id v45;
  _BYTE buf[12];
  __int16 v47;
  void *v48;
  _BYTE v49[128];

  v1 = (id *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "contextID"));
  v45 = 0;
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentItemPointer allInZone:contextID:error:](CKKSCurrentItemPointer, "allInZone:contextID:error:", v2, v3, &v45));
  v34 = v45;

  if (v34)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID", v33));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "zoneName"));
    v6 = sub_10000BDF4(CFSTR("ckksfixup"), v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);

    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v34;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Couldn't fetch current item pointers: %@", buf, 0xCu);
    }
    v8 = 0;
  }
  else
  {
    v36 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    obj = v33;
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v42 != v10)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "storedCKRecord", v33));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "recordID"));

          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "zoneName"));
          v17 = sub_10000BDF4(CFSTR("ckksfixup"), v16);
          v18 = objc_claimAutoreleasedReturnValue(v17);

          if (v14)
          {
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)&buf[4] = v14;
              v47 = 2112;
              v48 = v12;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Re-fetching %@ for %@", buf, 0x16u);
            }

            -[NSObject addObject:](v36, "addObject:", v14);
          }
          else
          {
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v12;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "No record ID for stored %@", buf, 0xCu);
            }

          }
        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
      }
      while (v9);
    }

    if (!-[NSObject count](v36, "count"))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "zoneName"));
      v21 = sub_10000BDF4(CFSTR("ckksfixup"), v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);

      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "No existing CIPs; fixup complete", buf, 2u);
      }

    }
    *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
    objc_initWeak((id *)buf, *(id *)(a1 + 40));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation named:withBlock:](NSBlockOperation, "named:withBlock:", CFSTR("fetch-records-operation-complete"), &stru_1002E8FB0));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "cloudKitClassDependencies"));
    v26 = objc_msgSend(objc_msgSend(v25, "fetchRecordsOperationClass"), "alloc");
    v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject allObjects](v36, "allObjects"));
    v28 = objc_msgSend(v26, "initWithRecordIDs:", v27);

    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_10014FAD0;
    v38[3] = &unk_1002E91C8;
    objc_copyWeak(&v40, (id *)buf);
    v38[4] = *(_QWORD *)(a1 + 32);
    v29 = v23;
    v39 = v29;
    objc_msgSend(v28, "setFetchRecordsCompletionBlock:", v38);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "ckdatabase"));
    objc_msgSend(v31, "addOperation:", v28);

    objc_msgSend(*(id *)(a1 + 40), "dependOnBeforeGroupFinished:", v28);
    objc_msgSend(*(id *)(a1 + 40), "dependOnBeforeGroupFinished:", v29);

    objc_destroyWeak(&v40);
    objc_destroyWeak((id *)buf);
    v8 = 1;
    v7 = v36;
  }

  return v8;
}

void sub_10014FA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id location)
{
  id *v35;

  objc_destroyWeak(v35);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10014FAD0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "databaseProvider"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10014FBC4;
  v14[3] = &unk_1002E8FD8;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  v15 = v6;
  v16 = v10;
  v17 = WeakRetained;
  v18 = v5;
  v19 = v11;
  v12 = v5;
  v13 = v6;
  objc_msgSend(v9, "dispatchSyncWithSQLTransaction:", v14);

}

uint64_t sub_10014FBC4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  __int128 v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  void *j;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  NSObject *v52;
  __int128 v54;
  id obj;
  id v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint8_t v66[128];
  uint8_t buf[4];
  void *v68;
  __int16 v69;
  id v70;
  _BYTE v71[128];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
  v5 = sub_10000BDF4(CFSTR("ckksfixup"), v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);

  if (v2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v68 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Finished record fetch with error: %@", buf, 0xCu);
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "domain"));
    if (objc_msgSend(v9, "isEqualToString:") && objc_msgSend(*(id *)(a1 + 32), "code") == (id)2)
    {

      if (v6)
      {
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        obj = (id)objc_claimAutoreleasedReturnValue(-[NSObject keyEnumerator](v6, "keyEnumerator"));
        v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v71, 16);
        if (!v10)
          goto LABEL_24;
        v12 = v10;
        v13 = *(_QWORD *)v63;
        *(_QWORD *)&v11 = 138412290;
        v54 = v11;
        while (1)
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(_QWORD *)v63 != v13)
              objc_enumerationMutation(obj);
            v15 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)i);
            v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", v15, v54));
            v17 = v16;
            if (v16)
            {
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "domain"));
              if ((objc_msgSend(v18, "isEqualToString:", CKErrorDomain) & 1) != 0)
              {
                v19 = objc_msgSend(v17, "code");

                if (v19 == (id)11)
                {
                  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
                  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneName"));
                  v22 = sub_10000BDF4(CFSTR("ckksfixup"), v21);
                  v23 = objc_claimAutoreleasedReturnValue(v22);

                  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v54;
                    v68 = v15;
                    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CloudKit believes %@ no longer exists", buf, 0xCu);
                  }

                  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
                  objc_msgSend(v24, "intransactionCKRecordDeleted:recordType:resync:", v15, CFSTR("currentitem"), 1);

                  goto LABEL_22;
                }
              }
              else
              {

              }
            }
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "zoneName"));
            v27 = sub_10000BDF4(CFSTR("ckksfixup"), v26);
            v28 = objc_claimAutoreleasedReturnValue(v27);

            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              v29 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138412546;
              v68 = v15;
              v69 = 2112;
              v70 = v29;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Unknown error for %@: %@", buf, 0x16u);
            }

            objc_msgSend(*(id *)(a1 + 48), "setError:", *(_QWORD *)(a1 + 32));
LABEL_22:

          }
          v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v71, 16);
          if (!v12)
          {
LABEL_24:

            goto LABEL_29;
          }
        }
      }
    }
    else
    {

    }
    objc_msgSend(*(id *)(a1 + 48), "setError:", *(_QWORD *)(a1 + 32));
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Finished record fetch successfully", buf, 2u);
  }
LABEL_29:

  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v30 = *(id *)(a1 + 56);
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v58, v66, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v59;
    do
    {
      for (j = 0; j != v32; j = (char *)j + 1)
      {
        if (*(_QWORD *)v59 != v33)
          objc_enumerationMutation(v30);
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)j)));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "zoneName"));
        v38 = sub_10000BDF4(CFSTR("ckksfixup"), v37);
        v39 = objc_claimAutoreleasedReturnValue(v38);

        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v68 = v35;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Recieved record %@", buf, 0xCu);
        }

        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
        objc_msgSend(v40, "intransactionCKRecordChanged:resync:", v35, 1);

      }
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v58, v66, 16);
    }
    while (v32);
  }

  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
  if (!v41)
  {
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "contextID"));
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "zoneName"));
    v57 = 0;
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry fromDatabase:zoneName:error:](CKKSZoneStateEntry, "fromDatabase:zoneName:error:", v43, v45, &v57));
    v47 = v57;

    objc_msgSend(v46, "setLastFixup:", 1);
    v56 = v47;
    objc_msgSend(v46, "saveToDatabase:", &v56);
    v48 = v56;

    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "zoneName"));
    v51 = sub_10000BDF4(CFSTR("ckksfixup"), v50);
    v52 = objc_claimAutoreleasedReturnValue(v51);

    if (v48)
    {
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v68 = v46;
        v69 = 2112;
        v70 = v48;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "Couldn't save CKKSZoneStateEntry(%@): %@", buf, 0x16u);
      }
    }
    else
    {
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Updated zone fixup state to CKKSFixupRefetchCurrentItemPointers", buf, 2u);
      }

      v52 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "intendedState"));
      objc_msgSend(*(id *)(a1 + 48), "setNextState:", v52);
    }

  }
  objc_msgSend(*(id *)(a1 + 48), "runBeforeGroupFinished:", *(_QWORD *)(a1 + 64));
  return 1;
}

uint64_t sub_10015066C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t, void *, void *);
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  _QWORD v20[5];
  id v21;
  id location;

  location = (id)0xAAAAAAAAAAAAAAAALL;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation named:withBlock:](NSBlockOperation, "named:withBlock:", CFSTR("fetch-records-operation-complete"), &stru_1002E8FF8));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithValue:](NSPredicate, "predicateWithValue:", 1));
  v4 = objc_msgSend(objc_alloc((Class)CKQuery), "initWithRecordType:predicate:", CFSTR("tlkshare"), v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cloudKitClassDependencies"));
  v7 = objc_msgSend(objc_msgSend(objc_msgSend(v6, "queryOperationClass"), "alloc"), "initWithQuery:", v4);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  objc_msgSend(v7, "setZoneID:", v8);

  objc_msgSend(v7, "setDesiredKeys:", 0);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1001508EC;
  v20[3] = &unk_1002E9020;
  objc_copyWeak(&v21, &location);
  v20[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v7, "setRecordFetchedBlock:", v20);
  v13 = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_1001509B0;
  v16 = &unk_1002E9070;
  objc_copyWeak(&v19, &location);
  v17 = *(_QWORD *)(a1 + 40);
  v9 = v2;
  v18 = v9;
  objc_msgSend(v7, "setQueryCompletionBlock:", &v13);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps", v13, v14, v15, v16, v17));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ckdatabase"));
  objc_msgSend(v11, "addOperation:", v7);

  objc_msgSend(*(id *)(a1 + 32), "dependOnBeforeGroupFinished:", v7);
  objc_msgSend(*(id *)(a1 + 32), "dependOnBeforeGroupFinished:", v9);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);

  objc_destroyWeak(&location);
  return 1;
}

void sub_1001508A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001508EC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "databaseProvider"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100150D90;
  v8[3] = &unk_1002E9150;
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v3;
  v10 = WeakRetained;
  v7 = v3;
  objc_msgSend(v6, "dispatchSyncWithSQLTransaction:", v8);

}

void sub_1001509B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  void **v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "databaseProvider"));
  v13 = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_100150AA0;
  v16 = &unk_1002E9048;
  v10 = *(_QWORD *)(a1 + 32);
  v17 = v6;
  v18 = v10;
  v19 = WeakRetained;
  v20 = v5;
  v11 = v5;
  v12 = v6;
  objc_msgSend(v9, "dispatchSyncWithSQLTransaction:", &v13);

  objc_msgSend(WeakRetained, "runBeforeGroupFinished:", *(_QWORD *)(a1 + 40), v13, v14, v15, v16);
}

uint64_t sub_100150AA0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  id v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
  v5 = sub_10000BDF4(CFSTR("ckksfixup"), v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);

  if (v2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Couldn't fetch all TLKShare records: %@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 48), "setError:", *(_QWORD *)(a1 + 32));
    return 0;
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully fetched TLKShare records (%@)", buf, 0xCu);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contextID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneName"));
    v22 = 0;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry fromDatabase:zoneName:error:](CKKSZoneStateEntry, "fromDatabase:zoneName:error:", v11, v13, &v22));
    v15 = v22;

    objc_msgSend(v14, "setLastFixup:", 2);
    v21 = v15;
    objc_msgSend(v14, "saveToDatabase:", &v21);
    v16 = v21;

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "zoneName"));
    v19 = sub_10000BDF4(CFSTR("ckksfixup"), v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);

    if (v16)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v24 = v14;
        v25 = 2112;
        v26 = v16;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Couldn't save CKKSZoneStateEntry(%@): %@", buf, 0x16u);
      }
    }
    else
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Updated zone fixup state to CKKSFixupFetchTLKShares", buf, 2u);
      }

      v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "intendedState"));
      objc_msgSend(*(id *)(a1 + 48), "setNextState:", v20);
    }

    return 1;
  }
}

uint64_t sub_100150D90(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  int v9;
  uint64_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "zoneName"));
  v4 = sub_10000BDF4(CFSTR("ckksfixup"), v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v9 = 138412290;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Recieved tlk share record from query: %@", (uint8_t *)&v9, 0xCu);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "deps"));
  objc_msgSend(v7, "intransactionCKRecordChanged:resync:", *(_QWORD *)(a1 + 40), 1);

  return 1;
}

void sub_100151134(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100151248(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  uint8_t buf[4];
  void *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    v4 = sub_10000BDF4(CFSTR("ckksfixup"), 0);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      *(_DWORD *)buf = 138412290;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Couldn't perform a reload: %@", buf, 0xCu);

    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    objc_msgSend(WeakRetained, "setError:", v7);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "databaseProvider"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001513B4;
    v9[3] = &unk_1002EA880;
    v9[4] = WeakRetained;
    objc_msgSend(v8, "dispatchSyncWithSQLTransaction:", v9);

  }
}

uint64_t sub_1001513B4(uint64_t a1)
{
  void *v1;
  void *v2;
  __int128 v3;
  void *i;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  __int128 v23;
  id obj;
  uint64_t v25;
  id v26;
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  id v37;
  _BYTE v38[128];

  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "activeManagedViews"));

  obj = v2;
  v26 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
  if (v26)
  {
    v25 = *(_QWORD *)v31;
    *(_QWORD *)&v3 = 138412546;
    v23 = v3;
    do
    {
      for (i = 0; i != v26; i = (char *)i + 1)
      {
        if (*(_QWORD *)v31 != v25)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "zoneID", v23));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "zoneName"));
        v8 = sub_10000BDF4(CFSTR("ckksfixup"), v7);
        v9 = objc_claimAutoreleasedReturnValue(v8);

        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = objc_msgSend(*(id *)(a1 + 32), "fixupNumber");
          *(_DWORD *)buf = 67109120;
          LODWORD(v35) = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Successfully performed a reload fixup. New fixup number is %d", buf, 8u);
        }

        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "contextID"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "zoneID"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "zoneName"));
        v29 = 0;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry fromDatabase:zoneName:error:](CKKSZoneStateEntry, "fromDatabase:zoneName:error:", v12, v14, &v29));
        v16 = v29;

        objc_msgSend(v15, "setLastFixup:", objc_msgSend(*(id *)(a1 + 32), "fixupNumber"));
        v28 = v16;
        objc_msgSend(v15, "saveToDatabase:", &v28);
        v17 = v28;

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "zoneID"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "zoneName"));
        v20 = sub_10000BDF4(CFSTR("ckksfixup"), v19);
        v21 = objc_claimAutoreleasedReturnValue(v20);

        if (v17)
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v23;
            v35 = v15;
            v36 = 2112;
            v37 = v17;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Couldn't save CKKSZoneStateEntry(%@): %@", buf, 0x16u);
          }
        }
        else
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Updated zone fixup state to CKKSFixupLocalReload", buf, 2u);
          }

          v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "intendedState"));
          objc_msgSend(*(id *)(a1 + 32), "setNextState:", v21);
        }

      }
      v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    }
    while (v26);
  }

  return 1;
}

uint64_t sub_100151A58(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  NSObject *v35;
  void *v36;
  void *v37;
  id v38;
  NSObject *v39;
  void *v41;
  void *v43;
  id v44;
  id v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  id v51;
  uint8_t buf[4];
  id v53;
  __int16 v54;
  id v55;
  _BYTE v56[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
  v51 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSDeviceStateEntry allInZone:error:](CKKSDeviceStateEntry, "allInZone:error:", v2, &v51));
  v4 = v51;

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "zoneName"));
    v7 = sub_10000BDF4(CFSTR("ckksfixup"), v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);

    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v53 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Unable to fetch all CDSEs: %@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 40), "setError:", v4);
    v9 = 0;
  }
  else
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v43 = v3;
    v10 = v3;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v48;
      while (2)
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v48 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "storedCKRecord"));
          if (v16)
          {
            objc_msgSend(v15, "setFromCKRecord:", v16);
            v46 = 0;
            objc_msgSend(v15, "saveToDatabase:", &v46);
            v17 = v46;
            if (v17)
            {
              v4 = v17;
              v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
              v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "zoneName"));
              v38 = sub_10000BDF4(CFSTR("ckksfixup"), v37);
              v39 = objc_claimAutoreleasedReturnValue(v38);

              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v53 = v4;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Unable to save CDSE: %@", buf, 0xCu);
              }

              objc_msgSend(*(id *)(a1 + 40), "setError:", v4);
              v9 = 0;
              v3 = v43;
              goto LABEL_31;
            }
          }
          else
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "zoneName"));
            v20 = sub_10000BDF4(CFSTR("ckksfixup"), v19);
            v21 = objc_claimAutoreleasedReturnValue(v20);

            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v53 = v15;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Saved CDSE has no stored record: %@", buf, 0xCu);
            }

          }
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
        if (v12)
          continue;
        break;
      }
    }

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "zoneName"));
    v24 = sub_10000BDF4(CFSTR("ckksfixup"), v23);
    v25 = objc_claimAutoreleasedReturnValue(v24);

    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Successfully performed a ResaveDeviceState fixup", buf, 2u);
    }

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "contextID"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "zoneName"));
    v45 = 0;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry fromDatabase:zoneName:error:](CKKSZoneStateEntry, "fromDatabase:zoneName:error:", v27, v29, &v45));
    v31 = v45;

    objc_msgSend(v30, "setLastFixup:", 4);
    v44 = v31;
    objc_msgSend(v30, "saveToDatabase:", &v44);
    v4 = v44;

    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "zoneName"));
    v34 = sub_10000BDF4(CFSTR("ckksfixup"), v33);
    v35 = objc_claimAutoreleasedReturnValue(v34);

    if (v4)
    {
      v3 = v43;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v53 = v30;
        v54 = 2112;
        v55 = v4;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Couldn't save CKKSZoneStateEntry(%@): %@", buf, 0x16u);
      }

      objc_msgSend(*(id *)(a1 + 40), "setError:", v4);
      v9 = 0;
    }
    else
    {
      v3 = v43;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Updated zone fixup state to CKKSFixupResaveDeviceStateEntries", buf, 2u);
      }

      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "intendedState"));
      objc_msgSend(*(id *)(a1 + 40), "setNextState:", v41);

      v9 = 1;
    }

  }
LABEL_31:

  return v9;
}

void sub_1001536B8(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  objc_msgSend(v1, "addObject:", CFSTR("idms_level"));
  objc_msgSend(v1, "addObject:", CFSTR("preapproved"));
  objc_msgSend(v1, "addObject:", CFSTR("tlk_upload_needed"));
  objc_msgSend(v1, "addObject:", CFSTR("policy_check_needed"));
  objc_msgSend(v1, "addObject:", CFSTR("ckks_views_changed"));
  objc_msgSend(v1, "addObject:", CFSTR("recd_push"));
  objc_msgSend(v1, "addObject:", CFSTR("account_available"));
  objc_msgSend(v1, "addObject:", CFSTR("cdp_enabled"));
  objc_msgSend(v1, "addObject:", CFSTR("attempt_sos_upgrade"));
  objc_msgSend(v1, "addObject:", CFSTR("attempt_machine_id_list"));
  objc_msgSend(v1, "addObject:", CFSTR("unlocked"));
  objc_msgSend(v1, "addObject:", CFSTR("attempt_sos_update_preapprovals"));
  objc_msgSend(v1, "addObject:", CFSTR("attempt_sos_consistency"));
  objc_msgSend(v1, "addObject:", CFSTR("se_id_changed"));
  objc_msgSend(v1, "addObject:", CFSTR("attempt_ucv_upgrade"));
  objc_msgSend(v1, "addObject:", CFSTR("check_on_rtc_metrics"));
  objc_msgSend(v1, "addObject:", CFSTR("pending_network_availablility"));
  objc_msgSend(v1, "addObject:", CFSTR("check_trust_state"));
  objc_msgSend(v1, "addObject:", CFSTR("apple_account_signed_out"));
  v2 = (void *)qword_1003413F8;
  qword_1003413F8 = (uint64_t)v1;

}

void sub_10015381C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "OctagonStateMap"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allKeys"));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1));
  v3 = (void *)qword_1003413E8;
  qword_1003413E8 = v2;

}

void sub_100153888(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  objc_msgSend(v1, "addObject:", CFSTR("Ready"));
  objc_msgSend(v1, "addObject:", CFSTR("ReadyUpdated"));
  v2 = (void *)qword_1003413D8;
  qword_1003413D8 = (uint64_t)v1;

}

void sub_1001538DC(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  objc_msgSend(v1, "addObject:", CFSTR("NoAccount"));
  objc_msgSend(v1, "addObject:", CFSTR("NoAccountDoReset"));
  objc_msgSend(v1, "addObject:", CFSTR("Initializing"));
  objc_msgSend(v1, "addObject:", CFSTR("DetermineiCloudAccountState"));
  objc_msgSend(v1, "addObject:", CFSTR("WaitingForCloudKitAccount"));
  objc_msgSend(v1, "addObject:", CFSTR("CloudKitNewlyAvailable"));
  objc_msgSend(v1, "addObject:", CFSTR("WaitForCDPCapableSecurityLevel"));
  objc_msgSend(v1, "addObject:", CFSTR("WaitForCDP"));
  objc_msgSend(v1, "addObject:", CFSTR("Untrusted"));
  v2 = (void *)qword_1003413C8;
  qword_1003413C8 = (uint64_t)v1;

}

void sub_1001539A0(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  objc_msgSend(v1, "addObject:", CFSTR("Ready"));
  objc_msgSend(v1, "addObject:", CFSTR("Error"));
  objc_msgSend(v1, "addObject:", CFSTR("Untrusted"));
  objc_msgSend(v1, "addObject:", CFSTR("WaitForCDPCapableSecurityLevel"));
  objc_msgSend(v1, "addObject:", CFSTR("WaitForUnlock"));
  objc_msgSend(v1, "addObject:", CFSTR("WaitForCDP"));
  v2 = (void *)qword_1003413B8;
  qword_1003413B8 = (uint64_t)v1;

}

void sub_100153A34(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "OctagonStateMap"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allKeys"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v2));

  objc_msgSend(v3, "removeObject:", CFSTR("NoAccount"));
  objc_msgSend(v3, "removeObject:", CFSTR("NoAccountDoReset"));
  objc_msgSend(v3, "removeObject:", CFSTR("Initializing"));
  objc_msgSend(v3, "removeObject:", CFSTR("DetermineiCloudAccountState"));
  objc_msgSend(v3, "removeObject:", CFSTR("WaitingForCloudKitAccount"));
  objc_msgSend(v3, "removeObject:", CFSTR("CloudKitNewlyAvailable"));
  objc_msgSend(v3, "removeObject:", CFSTR("WaitForCDPCapableSecurityLevel"));
  objc_msgSend(v3, "removeObject:", CFSTR("LocalReset"));
  objc_msgSend(v3, "removeObject:", CFSTR("LocalResetClearLocalContextState"));
  objc_msgSend(v3, "removeObject:", CFSTR("WaitForClassCUnlock"));
  v4 = (void *)qword_1003413A8;
  qword_1003413A8 = (uint64_t)v3;

}

void sub_100153B40(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v16 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateInit"));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", 0));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", 1));
        v11 = objc_opt_class(NSString);
        if ((objc_opt_isKindOfClass(v9, v11) & 1) == 0)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
          objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(v16 + 40), *(_QWORD *)(v16 + 32), CFSTR("OTStates.m"), 321, CFSTR("stateName should be string"));

        }
        v12 = objc_opt_class(NSNumber);
        if ((objc_opt_isKindOfClass(v10, v12) & 1) == 0)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
          objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(v16 + 40), *(_QWORD *)(v16 + 32), CFSTR("OTStates.m"), 322, CFSTR("stateNum should be number"));

        }
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, v10);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v5);
  }
  v15 = (void *)qword_100341398;
  qword_100341398 = (uint64_t)v2;

}

void sub_100153D54(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v16 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateInit"));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", 0));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", 1));
        v11 = objc_opt_class(NSString);
        if ((objc_opt_isKindOfClass(v9, v11) & 1) == 0)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
          objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(v16 + 40), *(_QWORD *)(v16 + 32), CFSTR("OTStates.m"), 302, CFSTR("stateName should be string"));

        }
        v12 = objc_opt_class(NSNumber);
        if ((objc_opt_isKindOfClass(v10, v12) & 1) == 0)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
          objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(v16 + 40), *(_QWORD *)(v16 + 32), CFSTR("OTStates.m"), 303, CFSTR("stateNum should be number"));

        }
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, v9);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v5);
  }
  v15 = (void *)qword_100341388;
  qword_100341388 = (uint64_t)v2;

}

void sub_100154258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100154380(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  const void *v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  id v18;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = sub_10000EF14("octagon");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "containerName"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contextID"));
      v13 = 138412802;
      v14 = v9;
      v15 = 2112;
      v16 = v11;
      v17 = 2112;
      v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unable to remove peers for (%@,%@): %@", (uint8_t *)&v13, 0x20u);

    }
    objc_msgSend(WeakRetained, "setError:", v3);
  }
  else
  {
    if (v7)
    {
      LOWORD(v13) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully removed peers", (uint8_t *)&v13, 2u);
    }

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishedOp"));
  objc_msgSend(WeakRetained, "runBeforeGroupFinished:", v12);

}

CFMutableDataRef sub_10015451C(const __CFData *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  CFStringRef v12;
  CFStringRef v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  const void *v19;
  CFMutableDataRef Mutable;

  v4 = sub_100011C40(0);
  v5 = sub_10001A338(v4);
  v6 = 0;
  if (!a1 || !v5)
    goto LABEL_20;
  v7 = sub_1002025E0();
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (!v8)
  {
    v6 = 0;
    goto LABEL_20;
  }
  v6 = v8;
  if (!objc_msgSend(v6, "peerPublicKey"))
  {
    SOSErrorCreate(1032, a2, 0, CFSTR("No identity to get key from"));

    goto LABEL_20;
  }
  v9 = (const void *)SecKeyCopyMatchingPrivateKey(objc_msgSend(v6, "peerPublicKey"), a2);

  if (!v9)
  {
LABEL_20:

    return 0;
  }
  v10 = SecOTRFullIdentityCreateFromSecKeyRefSOS(kCFAllocatorDefault, v9, a2);
  if (!v10)
  {

    CFRelease(v9);
    return 0;
  }
  v11 = (const void *)v10;
  CFRelease(v9);
  v12 = CFStringCreateFromExternalRepresentation(kCFAllocatorDefault, a1, 0x8000100u);
  if (v12)
  {
    v13 = v12;
    v14 = sub_1002025E0();
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = v15;
    if (v15)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "trust"));
      v18 = objc_msgSend(v17, "copyPublicKeyForPeer:err:", v13, a2);

      v19 = (const void *)SecOTRPublicIdentityCreateFromSecKeyRef(kCFAllocatorDefault, v18, a2);
      if (v19)
      {
        if (v18)
          CFRelease(v18);
        v18 = (id)SecOTRSessionCreateFromID(kCFAllocatorDefault, v11, v19);
        Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
        SecOTRSAppendSerialization(v18, Mutable);
        if (v18)
        {
          CFRelease(v18);
          v18 = 0;
        }
        goto LABEL_14;
      }
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    Mutable = 0;
LABEL_14:
    CFRelease(v13);

    if (v18)
      CFRelease(v18);
    if (v19)
      CFRelease(v19);
    goto LABEL_18;
  }

  Mutable = 0;
LABEL_18:
  CFRelease(v11);
  return Mutable;
}

BOOL sub_100154714(uint64_t a1, uint64_t a2, CFMutableDataRef *a3, CFMutableDataRef *a4, _BYTE *a5)
{
  const void *v9;
  CFMutableDataRef Mutable;
  CFMutableDataRef v11;

  v9 = (const void *)SecOTRSessionCreateFromData(kCFAllocatorDefault, a1);
  if (v9)
  {
    Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
    if (a2)
      SecOTRSProcessPacket(v9, a2, Mutable);
    else
      SecOTRSAppendStartPacket(v9, Mutable);
    v11 = CFDataCreateMutable(kCFAllocatorDefault, 0);
    SecOTRSAppendSerialization(v9, v11);
    *a3 = v11;
    *a4 = Mutable;
    *a5 = SecOTRSGetIsReadyForMessages(v9);
    CFRelease(v9);
  }
  return v9 != 0;
}

uint64_t sub_10015720C(_BYTE *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  SECC2MPCloudKitOperationInfo *v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  uint64_t String;
  void *v42;
  uint64_t result;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((int)(v6 >> 3) <= 300)
    {
      if ((int)v12 <= 200)
      {
        if ((_DWORD)v12 == 102)
        {
          String = PBReaderReadString(a2);
          v28 = objc_claimAutoreleasedReturnValue(String);
          v29 = 56;
        }
        else
        {
          if ((_DWORD)v12 != 103)
          {
LABEL_77:
            result = PBReaderSkipValueWithTag(a2);
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v27 = PBReaderReadString(a2);
          v28 = objc_claimAutoreleasedReturnValue(v27);
          v29 = 40;
        }
        goto LABEL_76;
      }
      if ((_DWORD)v12 == 201)
      {
        v35 = PBReaderReadString(a2);
        v28 = objc_claimAutoreleasedReturnValue(v35);
        v29 = 64;
LABEL_76:
        v42 = *(void **)&a1[v29];
        *(_QWORD *)&a1[v29] = v28;

        continue;
      }
      if ((_DWORD)v12 == 202)
      {
        v36 = PBReaderReadString(a2);
        v28 = objc_claimAutoreleasedReturnValue(v36);
        v29 = 72;
        goto LABEL_76;
      }
      if ((_DWORD)v12 != 203)
        goto LABEL_77;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      a1[92] |= 0x10u;
      while (1)
      {
        v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0)
          goto LABEL_84;
        v18 += 7;
        v9 = v19++ >= 9;
        if (v9)
        {
          v20 = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v20 = 0;
LABEL_86:
      a1[88] = v20 != 0;
    }
    else
    {
      if ((int)v12 > 400)
      {
        if ((_DWORD)v12 != 401)
        {
          if ((_DWORD)v12 == 402)
          {
            v37 = 0;
            v38 = 0;
            v15 = 0;
            a1[92] |= 1u;
            while (1)
            {
              v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v39 == -1 || v39 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                break;
              v40 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
              v15 |= (unint64_t)(v40 & 0x7F) << v37;
              if ((v40 & 0x80) == 0)
                goto LABEL_96;
              v37 += 7;
              v9 = v38++ >= 9;
              if (v9)
              {
                v15 = 0;
                goto LABEL_98;
              }
            }
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_96:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              v15 = 0;
LABEL_98:
            v44 = 8;
          }
          else
          {
            if ((_DWORD)v12 != 403)
              goto LABEL_77;
            v23 = 0;
            v24 = 0;
            v15 = 0;
            a1[92] |= 2u;
            while (1)
            {
              v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                break;
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
              v15 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                goto LABEL_88;
              v23 += 7;
              v9 = v24++ >= 9;
              if (v9)
              {
                v15 = 0;
                goto LABEL_90;
              }
            }
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_88:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              v15 = 0;
LABEL_90:
            v44 = 16;
          }
          goto LABEL_99;
        }
        v30 = objc_alloc_init(SECC2MPCloudKitOperationInfo);
        objc_msgSend(a1, "addClientOperation:", v30);
        v45 = 0xAAAAAAAAAAAAAAAALL;
        v46 = 0xAAAAAAAAAAAAAAAALL;
        if (!PBReaderPlaceMark(a2, &v45) || (sub_10014E210((uint64_t)v30, a2) & 1) == 0)
        {
LABEL_102:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v12 != 301)
        {
          if ((_DWORD)v12 == 302)
          {
            v31 = 0;
            v32 = 0;
            v15 = 0;
            a1[92] |= 4u;
            while (1)
            {
              v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v33 == -1 || v33 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                break;
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
              v15 |= (unint64_t)(v34 & 0x7F) << v31;
              if ((v34 & 0x80) == 0)
                goto LABEL_92;
              v31 += 7;
              v9 = v32++ >= 9;
              if (v9)
              {
                v15 = 0;
                goto LABEL_94;
              }
            }
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_92:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              v15 = 0;
LABEL_94:
            v44 = 24;
          }
          else
          {
            if ((_DWORD)v12 != 303)
              goto LABEL_77;
            v13 = 0;
            v14 = 0;
            v15 = 0;
            a1[92] |= 8u;
            while (1)
            {
              v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                break;
              v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
              v15 |= (unint64_t)(v17 & 0x7F) << v13;
              if ((v17 & 0x80) == 0)
                goto LABEL_80;
              v13 += 7;
              v9 = v14++ >= 9;
              if (v9)
              {
                v15 = 0;
                goto LABEL_82;
              }
            }
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_80:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              v15 = 0;
LABEL_82:
            v44 = 32;
          }
LABEL_99:
          *(_QWORD *)&a1[v44] = v15;
          continue;
        }
        v30 = objc_alloc_init(SECC2MPCloudKitOperationGroupInfo);
        objc_msgSend(a1, "addOperationGroup:", v30);
        v45 = 0xAAAAAAAAAAAAAAAALL;
        v46 = 0xAAAAAAAAAAAAAAAALL;
        if (!PBReaderPlaceMark(a2, &v45) || (sub_1001B720C((uint64_t)v30, a2) & 1) == 0)
          goto LABEL_102;
      }
      PBReaderRecallMark(a2, &v45);

    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100157B68(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100157E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001583EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100158684(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100158694(uint64_t a1)
{

}

uint64_t sub_10015869C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  const __CFString *v12;
  const void **v13;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD v28[5];
  __CFString *v29;
  uint8_t buf[4];
  __CFString *v31;

  v29 = 0;
  v4 = sub_1000112B0(*(const __CFDictionary **)(a1 + 32), 0, 1, 0, &v29);
  if (v29)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewState"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "zoneID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneName"));
    v9 = sub_10000BDF4(CFSTR("ckkscurrent"), v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v31 = v29;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "couldn't create query for item persistentRef: %@", buf, 0xCu);
    }

    v11 = v29;
    v12 = CFSTR("couldn't create query for new item pref");
  }
  else
  {
    v13 = (const void **)v4;
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_1001589F0;
    v28[3] = &unk_1002E91F0;
    v28[4] = *(_QWORD *)(a1 + 56);
    if (sub_1000043D4(v4, 0, a2, &v29, (uint64_t)v28))
    {
      if ((sub_100011108(v13, (CFErrorRef *)&v29) & 1) != 0)
        return 1;
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewState"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneID"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "zoneName"));
      v23 = sub_10000BDF4(CFSTR("ckkscurrent"), v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);

      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v31 = v29;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "couldn't destroy query for item pref: %@", buf, 0xCu);
      }

      v11 = v29;
      v12 = CFSTR("couldn't destroy query for item pref");
    }
    else
    {
      sub_100011108(v13, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewState"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "zoneID"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "zoneName"));
      v18 = sub_10000BDF4(CFSTR("ckkscurrent"), v17);
      v19 = objc_claimAutoreleasedReturnValue(v18);

      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v31 = v29;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "couldn't run query for item pref: %@", buf, 0xCu);
      }

      v11 = v29;
      v12 = CFSTR("couldn't run query for new item pref");
    }
  }
  v25 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:underlying:](NSError, "errorWithDomain:code:description:underlying:", CFSTR("CKKSErrorDomain"), -50, v12, v11));
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v27 = *(void **)(v26 + 40);
  *(_QWORD *)(v26 + 40) = v25;

  return 0;
}

CFTypeRef sub_1001589F0(CFTypeRef result, CFTypeRef cf)
{
  uint64_t v3;

  v3 = (uint64_t)result;
  if (cf)
    result = CFRetain(cf);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = cf;
  return result;
}

void sub_100158A28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint8_t buf[4];
  id v22;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "databaseProvider"));

  if (v6)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewState"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "zoneName"));
    v13 = sub_10000BDF4(CFSTR("ckkscurrent"), v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);

    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "fetch returned an error: %@", buf, 0xCu);
    }

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v15, "addOperation:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100158C10;
    v17[3] = &unk_1002E9150;
    v18 = v5;
    v19 = *(id *)(a1 + 40);
    v20 = WeakRetained;
    objc_msgSend(v9, "dispatchSyncWithSQLTransaction:", v17);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v16, "addOperation:", *(_QWORD *)(a1 + 32));

    v15 = v18;
  }

}

uint64_t sub_100158C10(id *a1)
{
  id v2;
  __int128 v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  unsigned int v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  __int128 v23;
  id v24;
  id obj;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  NSObject *v34;
  _BYTE v35[128];

  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = a1[4];
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v2)
  {
    v4 = v2;
    v5 = *(_QWORD *)v28;
    *(_QWORD *)&v3 = 138412546;
    v23 = v3;
    do
    {
      v6 = 0;
      v24 = v4;
      do
      {
        if (*(_QWORD *)v28 != v5)
          objc_enumerationMutation(obj);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v6), v23));
        if (objc_msgSend(a1[5], "matchesCKRecord:checkServerFields:", v7, 0))
        {
          v8 = v5;
          objc_msgSend(a1[5], "setFromCKRecord:", v7);
          v9 = a1[5];
          v26 = 0;
          v10 = objc_msgSend(v9, "saveToDatabase:", &v26);
          v11 = v26;
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "viewState"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneID"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "zoneName"));
          v15 = sub_10000BDF4(CFSTR("ckkscurrent"), v14);
          v16 = objc_claimAutoreleasedReturnValue(v15);

          if (!v10 || v11)
          {
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v23;
              v32 = v7;
              v33 = 2112;
              v34 = v11;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "couldn't save updated CKRecord to database: %@ %@", buf, 0x16u);
            }

          }
          else
          {
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              v21 = a1[5];
              *(_DWORD *)buf = 138412290;
              v32 = v21;
              _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CKKSMirrorEntry updated: %@", buf, 0xCu);
            }
            v11 = v16;
          }
          v5 = v8;
          v4 = v24;
        }
        else
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "viewState"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "zoneID"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "zoneName"));
          v20 = sub_10000BDF4(CFSTR("ckkscurrent"), v19);
          v11 = objc_claimAutoreleasedReturnValue(v20);

          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v32 = v7;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "fetched non-matching record %@", buf, 0xCu);
          }
        }

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v4);
  }

  return 1;
}

uint64_t sub_100158F18(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  _QWORD **v13;
  uint64_t v14;
  __CFString *v15;
  __CFString *v16;
  void *v17;
  unsigned __int8 v18;
  __CFString *v19;
  __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  unsigned __int8 v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  NSObject *v35;
  __CFString *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  NSObject *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  NSObject *v47;
  __CFString *v48;
  void *v49;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  NSObject *v55;
  __CFString *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  NSObject *v61;
  __CFString *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  __CFString *v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  NSObject *v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  NSObject *v84;
  __CFString *v85;
  __CFString *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  unsigned __int8 v93;
  void *v94;
  void *v95;
  void *v96;
  id v97;
  NSObject *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  id v103;
  NSObject *v104;
  __CFString *v105;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  void *v110;
  void *v111;
  void *v112;
  id v113;
  NSObject *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  id v124;
  NSObject *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  NSObject *v134;
  void *v135;
  uint64_t v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  id v142;
  NSObject *v143;
  __CFString *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  BOOL v150;
  int v151;
  void *v152;
  void *v153;
  void *v154;
  id v155;
  NSObject *v156;
  void *v157;
  void *v158;
  id v159;
  void *v160;
  void *v161;
  void *v162;
  id v163;
  void *v164;
  id v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  id v174;
  id v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  id v182;
  void *v183;
  void *v184;
  NSObject *v185;
  __CFString *v186;
  void *v187;
  void *v188;
  NSObject *v189;
  id v190;
  void *v191;
  __CFString *v192;
  NSObject *oslog;
  CKKSCurrentItemPointer *osloga;
  __CFString *cf;
  _QWORD v196[4];
  id v197;
  id v198;
  NSObject *v199;
  __CFString *v200;
  id v201;
  _QWORD v202[4];
  id v203;
  id v204;
  NSObject *v205;
  NSObject *v206;
  NSObject *v207;
  id v208;
  id v209;
  id v210;
  __CFString *v211;
  uint8_t buf[4];
  __CFString *v213;
  __int16 v214;
  __CFString *v215;
  __int16 v216;
  __CFString *v217;

  if (!objc_msgSend(*(id *)(a1 + 32), "isCancelled"))
  {
    v211 = 0;
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "newerItemPersistentRef"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroup"));
    v210 = 0;
    v10 = objc_msgSend(v7, "_onqueueFindSecDbItem:accessGroup:error:", v8, v9, &v210);
    v6 = v210;
    objc_msgSend(*(id *)(a1 + 32), "setNewItem:", v10);

    v11 = objc_msgSend(*(id *)(a1 + 32), "newItem");
    v12 = *(void **)(a1 + 32);
    if (!v11 || v6)
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "viewState"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "zoneID"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "zoneName"));
      v40 = sub_10000BDF4(CFSTR("ckkscurrent"), v39);
      v41 = objc_claimAutoreleasedReturnValue(v40);

      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v213 = (__CFString *)v6;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Couldn't fetch new item, quitting: %@", buf, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
      goto LABEL_25;
    }
    v13 = (_QWORD **)objc_msgSend(v12, "newItem");
    v14 = sub_10001E6A8(v13[2], 7, &v211);
    v15 = (__CFString *)sub_100019204(v13, v14, &v211);
    v16 = v15;
    if (!v15
      || (CFRetain(v15), v211)
      || (v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "newerItemSHA1")),
          v18 = -[__CFString isEqual:](v16, "isEqual:", v17),
          v17,
          (v18 & 1) == 0))
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "zoneID"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "zoneName"));
      v46 = sub_10000BDF4(CFSTR("ckkscurrent"), v45);
      v47 = objc_claimAutoreleasedReturnValue(v46);

      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        v48 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "newerItemSHA1"));
        *(_DWORD *)buf = 138412546;
        v213 = v16;
        v214 = 2112;
        v215 = v48;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Hash mismatch for new item: %@ vs %@", buf, 0x16u);

      }
      v20 = v211;
      v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:underlying:](NSError, "errorWithDomain:code:description:underlying:", CFSTR("CKKSErrorDomain"), 14, CFSTR("New item has changed; hashes mismatch. Refetch and try again."),
                        v211));
      objc_msgSend(*(id *)(a1 + 32), "setError:", v49);

      goto LABEL_29;
    }
    v19 = (__CFString *)sub_100019204(objc_msgSend(*(id *)(a1 + 32), "newItem"), (uint64_t)&off_1002E9538, &v211);
    v20 = v19;
    if (v19)
    {
      CFRetain(v19);
      v21 = *(void **)(a1 + 32);
      if (!v211)
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "oldItemPersistentRef"));

        if (v22)
        {
          v23 = *(void **)(a1 + 32);
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "oldItemPersistentRef"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroup"));
          v209 = 0;
          v26 = objc_msgSend(v23, "_onqueueFindSecDbItem:accessGroup:error:", v24, v25, &v209);
          v6 = v209;
          objc_msgSend(*(id *)(a1 + 32), "setOldItem:", v26);

          v27 = objc_msgSend(*(id *)(a1 + 32), "oldItem");
          v28 = *(void **)(a1 + 32);
          if (!v27 || v6)
          {
            v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "viewState"));
            v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "zoneID"));
            v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "zoneName"));
            v78 = sub_10000BDF4(CFSTR("ckkscurrent"), v77);
            v79 = objc_claimAutoreleasedReturnValue(v78);

            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v213 = (__CFString *)v6;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Couldn't fetch old item, quitting: %@", buf, 0xCu);
            }

            objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
            goto LABEL_30;
          }
          cf = (__CFString *)sub_100116568((_QWORD **)objc_msgSend(v28, "oldItem"), &v211);
          if (!cf
            || (CFRetain(cf), v211)
            || (v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "oldItemSHA1")),
                v30 = -[__CFString isEqual:](cf, "isEqual:", v29),
                v29,
                (v30 & 1) == 0))
          {
            v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
            v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "zoneID"));
            v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "zoneName"));
            v83 = sub_10000BDF4(CFSTR("ckkscurrent"), v82);
            v84 = objc_claimAutoreleasedReturnValue(v83);

            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
            {
              v85 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "oldItemSHA1"));
              *(_DWORD *)buf = 138412546;
              v213 = cf;
              v214 = 2112;
              v215 = v85;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Hash mismatch for old item: %@ vs %@", buf, 0x16u);

            }
            v86 = v211;
            v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:underlying:](NSError, "errorWithDomain:code:description:underlying:", CFSTR("CKKSErrorDomain"), 14, CFSTR("Old item has changed; hashes mismatch. Refetch and try again."),
                              v211));
            objc_msgSend(*(id *)(a1 + 32), "setError:", v87);

            goto LABEL_29;
          }
          v192 = (__CFString *)sub_100019204(objc_msgSend(*(id *)(a1 + 32), "oldItem"), (uint64_t)&off_1002E9538, &v211);
          if (!v192 || (CFRetain(v192), v211))
          {
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "zoneID"));
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "zoneName"));
            v34 = sub_10000BDF4(CFSTR("ckkscurrent"), v33);
            v35 = objc_claimAutoreleasedReturnValue(v34);

            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v213 = v211;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Error fetching UUID for old item: %@", buf, 0xCu);
            }

            v36 = v211;
            objc_msgSend(*(id *)(a1 + 32), "setError:", v211);

LABEL_29:
            v6 = 0;
LABEL_30:
            v42 = 0;
LABEL_31:

            goto LABEL_32;
          }
        }
        else
        {
          v192 = 0;
          cf = 0;
        }
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
        v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "zoneID"));
        v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "zoneName"));
        v60 = sub_10000BDF4(CFSTR("ckkscurrent"), v59);
        v61 = objc_claimAutoreleasedReturnValue(v60);

        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          v62 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPointerIdentifier"));
          *(_DWORD *)buf = 138412802;
          v213 = v62;
          v214 = 2112;
          v215 = v20;
          v216 = 2112;
          v217 = v192;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Setting current pointer for %@ to %@ (from %@)", buf, 0x20u);

        }
        v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPointerIdentifier"));
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
        v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "contextID"));
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "zoneID"));
        v208 = 0;
        v191 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentItemPointer tryFromDatabase:contextID:state:zoneID:error:](CKKSCurrentItemPointer, "tryFromDatabase:contextID:state:zoneID:error:", v63, v65, CFSTR("remote"), v67, &v208));
        v6 = v208;

        if (v191)
        {
          v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Update to current item pointer is pending.")));
          v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 12, v68));
          objc_msgSend(*(id *)(a1 + 32), "setError:", v69);

          v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
          v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "zoneID"));
          v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "zoneName"));
          v73 = sub_10000BDF4(CFSTR("ckkscurrent"), v72);
          oslog = objc_claimAutoreleasedReturnValue(v73);

          if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
          {
            v74 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
            *(_DWORD *)buf = 138412290;
            v213 = v74;
            _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_ERROR, "Attempt to set a new current item pointer when one exists: %@", buf, 0xCu);

          }
          v42 = 0;
          goto LABEL_97;
        }
        v187 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPointerIdentifier"));
        v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "contextID"));
        v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
        v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "zoneID"));
        v207 = v6;
        oslog = objc_claimAutoreleasedReturnValue(+[CKKSCurrentItemPointer tryFromDatabase:contextID:state:zoneID:error:](CKKSCurrentItemPointer, "tryFromDatabase:contextID:state:zoneID:error:", v187, v89, CFSTR("local"), v91, &v207));
        v189 = v207;

        if (oslog)
        {
          if (v192)
          {
            v92 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject currentItemUUID](oslog, "currentItemUUID"));
            v93 = objc_msgSend(v92, "isEqualToString:", v192);

            if ((v93 & 1) == 0)
            {
              v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
              v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "zoneID"));
              v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "zoneName"));
              v97 = sub_10000BDF4(CFSTR("ckkscurrent"), v96);
              v98 = objc_claimAutoreleasedReturnValue(v97);

              if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                v213 = (__CFString *)oslog;
                v214 = 2112;
                v215 = v192;
                _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "current item pointer(%@) doesn't match user-supplied UUID (%@); rejecting change of current",
                  buf,
                  0x16u);
              }

              v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Current pointer(%@) does not match user-supplied %@, aborting"), oslog, v192));
              v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 14, v188));
              objc_msgSend(*(id *)(a1 + 32), "setError:", v99);

LABEL_64:
              v42 = 0;
LABEL_96:

              v6 = v189;
LABEL_97:

              goto LABEL_31;
            }
          }
          else
          {
            v106 = *(void **)(a1 + 32);
            v107 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject currentItemUUID](oslog, "currentItemUUID"));
            v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroup"));
            v109 = objc_msgSend(v106, "_onqueueFindSecDbItemWithUUID:accessGroup:error:", v107, v108, 0);

            if (v109)
            {
              CFRelease(v109);
              v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
              v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "zoneID"));
              v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "zoneName"));
              v113 = sub_10000BDF4(CFSTR("ckkscurrent"), v112);
              v114 = objc_claimAutoreleasedReturnValue(v113);

              if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v213 = (__CFString *)oslog;
                _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "no user-supplied UUID and current item pointer(%@) is not dangling; rejecting change of current",
                  buf,
                  0xCu);
              }

              v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("No user-supplied UUID and current pointer(%@) is not dangling, aborting"), oslog));
              v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 14, v188));
              objc_msgSend(*(id *)(a1 + 32), "setError:", v115);

              goto LABEL_64;
            }
          }
          -[NSObject setCurrentItemUUID:](oslog, "setCurrentItemUUID:", v20);
        }
        else
        {
          if (v192)
          {
            v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
            v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "zoneID"));
            v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "zoneName"));
            v103 = sub_10000BDF4(CFSTR("ckkscurrent"), v102);
            v104 = objc_claimAutoreleasedReturnValue(v103);

            if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
            {
              v105 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPointerIdentifier"));
              *(_DWORD *)buf = 138412290;
              v213 = v105;
              _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "Requested to update a current item pointer but one doesn't exist at %@; rejecting change of current",
                buf,
                0xCu);

            }
            oslog = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Current pointer(%@) does not match given value of '%@', aborting"), 0, v192));
            v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 14, oslog));
            objc_msgSend(*(id *)(a1 + 32), "setError:", v188);
            goto LABEL_64;
          }
          osloga = [CKKSCurrentItemPointer alloc];
          v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPointerIdentifier"));
          v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
          v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "contextID"));
          v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
          v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "zoneID"));
          oslog = -[CKKSCurrentItemPointer initForIdentifier:contextID:currentItemUUID:state:zoneID:encodedCKRecord:](osloga, "initForIdentifier:contextID:currentItemUUID:state:zoneID:encodedCKRecord:", v116, v118, v20, CFSTR("local"), v120, 0);

          v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
          v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "zoneID"));
          v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "zoneName"));
          v124 = sub_10000BDF4(CFSTR("ckkscurrent"), v123);
          v125 = objc_claimAutoreleasedReturnValue(v124);

          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v213 = (__CFString *)oslog;
            _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "Creating a new current item pointer: %@", buf, 0xCu);
          }

        }
        v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
        v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "contextID"));
        v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
        v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v128, "zoneID"));
        v206 = v189;
        v188 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSSQLDatabaseObject allUUIDsWithContextID:zoneID:error:](CKKSOutgoingQueueEntry, "allUUIDsWithContextID:zoneID:error:", v127, v129, &v206));
        v185 = v206;

        v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
        v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "contextID"));
        v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
        v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "zoneID"));
        v205 = v185;
        v184 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSSQLDatabaseObject allUUIDsWithContextID:zoneID:error:](CKKSIncomingQueueEntry, "allUUIDsWithContextID:zoneID:error:", v131, v133, &v205));
        v134 = v205;

        if ((objc_msgSend(v188, "containsObject:", v20) & 1) != 0
          || objc_msgSend(v184, "containsObject:", v20))
        {
          v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("New item(%@) is being synced; can't set current pointer."),
                             v20));
          v136 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 13, v135));

        }
        else
        {
          v136 = (uint64_t)v134;
        }
        if (v192)
        {
          v137 = (void *)v136;
          if ((objc_msgSend(v188, "containsObject:") & 1) != 0
            || objc_msgSend(v184, "containsObject:", v192))
          {
            v138 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Old item(%@) is being synced; can't set current pointer."),
                               v192));
            v136 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 13, v138));

          }
        }
        if (v136)
        {
          v189 = v136;
          v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
          v140 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "zoneID"));
          v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v140, "zoneName"));
          v142 = sub_10000BDF4(CFSTR("ckkscurrent"), v141);
          v143 = objc_claimAutoreleasedReturnValue(v142);

          if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
          {
            v144 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPointerIdentifier"));
            *(_DWORD *)buf = 138412546;
            v213 = v144;
            v214 = 2112;
            v215 = (__CFString *)v189;
            _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_ERROR, "Error attempting to update current item pointer %@: %@", buf, 0x16u);

          }
          objc_msgSend(*(id *)(a1 + 32), "setError:", v189);
          v42 = 0;
        }
        else
        {
          v145 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject currentItemUUID](oslog, "currentItemUUID"));
          v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
          v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v146, "contextID"));
          v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
          v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "zoneID"));
          v204 = 0;
          v186 = (__CFString *)objc_claimAutoreleasedReturnValue(+[CKKSMirrorEntry fromDatabase:contextID:zoneID:error:](CKKSMirrorEntry, "fromDatabase:contextID:zoneID:error:", v145, v147, v149, &v204));
          v182 = v204;

          if (v186)
            v150 = v182 == 0;
          else
            v150 = 0;
          v151 = !v150;
          v152 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
          v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v152, "zoneID"));
          v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v153, "zoneName"));
          v155 = sub_10000BDF4(CFSTR("ckkscurrent"), v154);
          v156 = objc_claimAutoreleasedReturnValue(v155);

          if (v151)
          {
            if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v213 = (__CFString *)oslog;
              v214 = 2112;
              v215 = v186;
              _os_log_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_ERROR, "Error attempting to set a current item pointer to an item that isn't synced: %@ %@", buf, 0x16u);
            }

            v157 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject currentItemUUID](oslog, "currentItemUUID"));
            v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("No synced item matching (%@); can't set current pointer."),
                               v157));
            v189 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:underlying:](NSError, "errorWithDomain:code:description:underlying:", CFSTR("CKKSErrorDomain"), -25300, v158, v182));

            objc_msgSend(*(id *)(a1 + 32), "setError:", v189);
            v42 = 0;
          }
          else
          {
            if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v213 = (__CFString *)oslog;
              _os_log_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_DEFAULT, "Saving new current item pointer %@", buf, 0xCu);
            }

            v159 = objc_alloc_init((Class)NSMutableDictionary);
            v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
            v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "zoneID"));
            v183 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject CKRecordWithZoneID:](oslog, "CKRecordWithZoneID:", v161));

            v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v183, "recordID"));
            objc_msgSend(v159, "setObject:forKeyedSubscript:", v183, v162);

            v190 = objc_alloc_init((Class)NSBlockOperation);
            objc_msgSend(v190, "setName:", CFSTR("updateCurrentItemPointer-modifyRecordsComplete"));
            objc_msgSend(*(id *)(a1 + 32), "dependOnBeforeGroupFinished:", v190);
            v163 = objc_alloc((Class)CKModifyRecordsOperation);
            v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v159, "allValues"));
            v165 = objc_msgSend(v163, "initWithRecordsToSave:recordIDsToDelete:", v164, 0);
            objc_msgSend(*(id *)(a1 + 32), "setModifyRecordsOperation:", v165);

            v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyRecordsOperation"));
            objc_msgSend(v166, "setAtomic:", 1);

            v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyRecordsOperation"));
            v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v167, "configuration"));
            objc_msgSend(v168, "setIsCloudKitSupportOperation:", 1);

            v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyRecordsOperation"));
            objc_msgSend(v169, "setQualityOfService:", 25);

            v170 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyRecordsOperation"));
            objc_msgSend(v170, "setSavePolicy:", 0);

            v171 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckoperationGroup"));
            v172 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyRecordsOperation"));
            objc_msgSend(v172, "setGroup:", v171);

            v202[0] = _NSConcreteStackBlock;
            v202[1] = 3221225472;
            v202[2] = sub_10015A7B4;
            v202[3] = &unk_1002E9128;
            objc_copyWeak(&v203, (id *)(a1 + 40));
            v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyRecordsOperation"));
            objc_msgSend(v173, "setPerRecordSaveBlock:", v202);

            v196[0] = _NSConcreteStackBlock;
            v196[1] = 3221225472;
            v196[2] = sub_10015A95C;
            v196[3] = &unk_1002EA9A8;
            objc_copyWeak(&v201, (id *)(a1 + 40));
            v174 = v159;
            v197 = v174;
            v175 = v190;
            v198 = v175;
            v199 = oslog;
            v200 = v186;
            v176 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyRecordsOperation"));
            objc_msgSend(v176, "setModifyRecordsCompletionBlock:", v196);

            v177 = *(void **)(a1 + 32);
            v178 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v177, "modifyRecordsOperation"));
            objc_msgSend(v177, "dependOnBeforeGroupFinished:", v178);

            v179 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
            v180 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v179, "ckdatabase"));
            v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifyRecordsOperation"));
            objc_msgSend(v180, "addOperation:", v181);

            objc_destroyWeak(&v201);
            objc_destroyWeak(&v203);

            v189 = 0;
            v42 = 1;
          }

        }
        goto LABEL_96;
      }
    }
    else
    {
      v21 = *(void **)(a1 + 32);
    }
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "viewState"));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "zoneID"));
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "zoneName"));
    v54 = sub_10000BDF4(CFSTR("ckkscurrent"), v53);
    v55 = objc_claimAutoreleasedReturnValue(v54);

    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v213 = v211;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "Error fetching UUID for new item: %@", buf, 0xCu);
    }

    v56 = v211;
    objc_msgSend(*(id *)(a1 + 32), "setError:", v211);

    goto LABEL_29;
  }
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewState"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "zoneID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
  v5 = sub_10000BDF4(CFSTR("ckkscurrent"), v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CKKSUpdateCurrentItemPointerOperation cancelled, quitting", buf, 2u);
  }
LABEL_25:
  v42 = 0;
LABEL_32:

  return v42;
}

void sub_10015A784(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10015A7B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  int v17;
  id v18;
  __int16 v19;
  id v20;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewState"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "zoneID"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneName"));
  v14 = sub_10000BDF4(CFSTR("ckkscurrent"), v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);

  if (v9)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v17 = 138412546;
      v18 = v9;
      v19 = 2112;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "error on row: %@ %@", (uint8_t *)&v17, 0x16u);
    }
  }
  else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "recordName"));
    v17 = 138412546;
    v18 = v16;
    v19 = 2112;
    v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Current pointer upload successful for %@: %@", (uint8_t *)&v17, 0x16u);

  }
}

void sub_10015A95C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  __int128 *p_buf;
  _QWORD v27[5];
  id v28;
  id v29;
  __int128 buf;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "databaseProvider"));

  if (v9)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewState"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "zoneID"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneName"));
    v16 = sub_10000BDF4(CFSTR("ckkscurrent"), v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);

    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CloudKit returned an error: %@", (uint8_t *)&buf, 0xCu);
    }

    objc_msgSend(WeakRetained, "setError:", v9);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10015AC5C;
    v27[3] = &unk_1002E9150;
    v27[4] = WeakRetained;
    v28 = v9;
    v29 = *(id *)(a1 + 32);
    objc_msgSend(v12, "dispatchSyncWithSQLTransaction:", v27);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v18, "addOperation:", *(_QWORD *)(a1 + 40));

  }
  else
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v31 = 0x3032000000;
    v32 = sub_100158684;
    v33 = sub_100158694;
    v34 = 0;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10015AC9C;
    v22[3] = &unk_1002E9178;
    v23 = v7;
    v19 = *(id *)(a1 + 48);
    v25 = WeakRetained;
    p_buf = &buf;
    v24 = v19;
    objc_msgSend(v12, "dispatchSyncWithSQLTransaction:", v22);
    v20 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
    if (!v20)
    {
      objc_msgSend(WeakRetained, "_fetchAndUpdateMirrorEntry:", *(_QWORD *)(a1 + 56));
      v20 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
    }
    objc_msgSend(WeakRetained, "setError:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    objc_msgSend(v21, "addOperation:", *(_QWORD *)(a1 + 40));

    _Block_object_dispose(&buf, 8);
  }

}

void sub_10015AC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10015AC5C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v3 = objc_msgSend(v2, "intransactionCKWriteFailed:attemptedRecordsChanged:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  return v3;
}

uint64_t sub_10015AC9C(uint64_t a1)
{
  id v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint32_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  __int128 v30;
  id obj;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  uint64_t v39;
  _BYTE v40[128];

  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v33;
    *(_QWORD *)&v4 = 138412290;
    v30 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v33 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "recordType", v30));
        v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("currentitem"));

        if (v10)
        {
          if (objc_msgSend(*(id *)(a1 + 40), "matchesCKRecord:", v8))
          {
            objc_msgSend(*(id *)(a1 + 40), "setStoredCKRecord:", v8);
            v11 = *(void **)(a1 + 40);
            v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            obj = *(id *)(v12 + 40);
            objc_msgSend(v11, "saveToDatabase:", &obj);
            objc_storeStrong((id *)(v12 + 40), obj);
            if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
              goto LABEL_15;
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "viewState"));
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "zoneID"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneName"));
            v16 = sub_10000BDF4(CFSTR("ckkscurrent"), v15);
            v17 = objc_claimAutoreleasedReturnValue(v16);

            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              v18 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
              *(_DWORD *)buf = v30;
              v37 = v18;
              v19 = v17;
              v20 = "Couldn't save new current pointer to database: %@";
              v21 = 12;
              goto LABEL_13;
            }
          }
          else
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "viewState"));
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "zoneID"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "zoneName"));
            v25 = sub_10000BDF4(CFSTR("ckkscurrent"), v24);
            v17 = objc_claimAutoreleasedReturnValue(v25);

            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              v26 = *(_QWORD *)(a1 + 40);
              *(_DWORD *)buf = 138412546;
              v37 = v8;
              v38 = 2112;
              v39 = v26;
              v19 = v17;
              v20 = "CloudKit record does not match saved record, ignoring: %@ %@";
              v21 = 22;
LABEL_13:
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, v20, buf, v21);
            }
          }

        }
LABEL_15:
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "viewState"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "notifyViewChangedScheduler"));
        objc_msgSend(v28, "trigger");

      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    }
    while (v5);
  }

  return 1;
}

void sub_10015B520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_10015B6A0(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  __int128 v26;
  id obj;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  _BYTE v35[128];

  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "activeManagedViews"));

  obj = v2;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v30;
    *(_QWORD *)&v4 = 138412290;
    v26 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v30 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneID", v26));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "contextID"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeySet loadForZone:contextID:](CKKSCurrentKeySet, "loadForZone:contextID:", v9, v10));

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "currentTLKPointer"));
        if (v12)
        {
          v13 = *(void **)(a1 + 40);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneID"));
          objc_msgSend(v13, "setObject:forKeyedSubscript:", v11, v14);
        }
        else
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "previousPendingKeySets"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneID"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v16));

          if (v14
            && (v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneID")),
                v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneID")),
                v19 = objc_msgSend(v17, "isEqual:", v18),
                v18,
                v17,
                v19))
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneID"));
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneName"));
            v22 = sub_10000BDF4(CFSTR("ckkstlk"), v21);
            v23 = objc_claimAutoreleasedReturnValue(v22);

            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v26;
              v34 = v14;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Using prevously-generated proposed keyset: %@", buf, 0xCu);
            }

            v24 = *(void **)(a1 + 40);
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneID"));
            objc_msgSend(v24, "setObject:forKeyedSubscript:", v14, v25);

          }
          else
          {
            objc_msgSend(*(id *)(a1 + 48), "addObject:", v8);
          }
        }

      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
    }
    while (v5);
  }

}

uint64_t sub_10015B998(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  CKKSCurrentKeySet *v8;
  CKKSCurrentKeySet *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  CKKSCurrentKeySet *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  CKKSCurrentKeySet *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  id v27;
  NSObject *v28;
  _BOOL4 v29;
  CKKSCurrentKeySet *v30;
  void *v31;
  id v32;
  CKKSKey *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  CKKSCurrentKeySet *v38;
  CKKSCurrentKeySet *v39;
  void *v40;
  id v41;
  void *v42;
  CKKSCurrentKeySet *v43;
  CKKSCurrentKeySet *v44;
  void *v45;
  void *v46;
  id v47;
  NSObject *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  NSObject *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  CKKSCurrentKeySet *v69;
  void *v70;
  void *v71;
  id v72;
  NSObject *v73;
  id v74;
  void *v75;
  id v76;
  CKKSCurrentKeySet *v77;
  void *v78;
  void *v79;
  void *v80;
  unsigned int v81;
  void *v82;
  void *v83;
  id v84;
  NSObject *v85;
  _BOOL4 v86;
  CKKSCurrentKeySet *v87;
  void *v88;
  void *v89;
  void *v90;
  id v91;
  NSObject *v92;
  void *v93;
  void *v94;
  CKKSCurrentKeySet *v96;
  void *v97;
  void *v98;
  CKKSCurrentKeySet *v99;
  void *v100;
  void *v101;
  id v102;
  NSObject *v103;
  id v104;
  id v105;
  CKKSCurrentKeySet *v106;
  void *v107;
  void *v108;
  unsigned int v109;
  void *v110;
  void *v111;
  id v112;
  NSObject *v113;
  _BOOL4 v114;
  void *v115;
  id v116;
  CKKSCurrentKeySet *v117;
  CKKSCurrentKeySet *v118;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  id v123;
  id v124;
  uint64_t v125;
  void *i;
  CKKSCurrentKeySet *v127;
  void *v128;
  void *v129;
  void *v130;
  id v131;
  NSObject *v132;
  _BOOL4 v133;
  void *v134;
  void *v135;
  void *v136;
  CKKSCurrentKeySet *v137;
  char *v138;
  NSObject *v139;
  CKKSCurrentKeySet *v140;
  unsigned int v141;
  void *v142;
  void *v143;
  id v144;
  NSObject *v145;
  NSObject *v146;
  _BOOL4 v147;
  id v148;
  void *v149;
  void *v150;
  void *v151;
  CKKSCurrentKeySet *v152;
  void *v153;
  void *v154;
  CKKSCurrentKeySet *v155;
  id obj;
  CKKSCurrentKeySet *v157;
  uint64_t v158;
  id v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  char *v166;
  CKKSCurrentKeySet *v167;
  CKKSCurrentKeySet *v168;
  NSObject *v169;
  CKKSCurrentKeySet *v170;
  void *v171;
  uint64_t v172;
  void *v173;
  CKKSCurrentKeySet *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  _BYTE v197[128];
  uint8_t v198[128];
  uint8_t buf[4];
  CKKSCurrentKeySet *v200;
  __int16 v201;
  CKKSCurrentKeySet *v202;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "zoneName"));
  v4 = sub_10000BDF4(CFSTR("ckkstlk"), v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Generating new TLK", buf, 2u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contextID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
  v196 = 0;
  v8 = (CKKSCurrentKeySet *)objc_claimAutoreleasedReturnValue(+[CKKSKey currentKeyForClass:contextID:zoneID:error:](CKKSKey, "currentKeyForClass:contextID:zoneID:error:", CFSTR("tlk"), v6, v7, &v196));
  v9 = (CKKSCurrentKeySet *)v196;

  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneName"));
    v12 = sub_10000BDF4(CFSTR("ckkstlk"), v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);

    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v200 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "couldn't load the current TLK: %@", buf, 0xCu);
    }

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contextID"));
  v195 = 0;
  v15 = -[CKKSCurrentKeySet ensureKeyLoadedForContextID:error:](v8, "ensureKeyLoadedForContextID:error:", v14, &v195);
  v16 = (CKKSCurrentKeySet *)v195;

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "zoneName"));
  v19 = sub_10000BDF4(CFSTR("ckkstlk"), v18);
  v20 = objc_claimAutoreleasedReturnValue(v19);

  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v200 = v8;
    v201 = 2112;
    v202 = v16;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Old TLK is: %@ %@", buf, 0x16u);
  }

  if (!v16)
  {
    v194 = 0;
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAESSIVKey randomKey:](CKKSAESSIVKey, "randomKey:", &v194));
    v32 = v194;
    v33 = [CKKSKey alloc];
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contextID"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "UUIDString"));
    v172 = a1;
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v38 = -[CKKSKey initSelfWrappedWithAESKey:contextID:uuid:keyclass:state:zoneID:encodedCKRecord:currentkey:](v33, "initSelfWrappedWithAESKey:contextID:uuid:keyclass:state:zoneID:encodedCKRecord:currentkey:", v31, v34, v36, CFSTR("tlk"), CFSTR("local"), v37, 0, 1);

    v39 = v38;
    v193 = v32;
    v173 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet getKeychainBackedKey:](v38, "getKeychainBackedKey:", &v193));
    v30 = (CKKSCurrentKeySet *)v193;

    if (!v38 || !v31 || !v173 || v30)
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "zoneID"));
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "zoneName"));
      v52 = sub_10000BDF4(CFSTR("ckkstlk"), v51);
      v53 = objc_claimAutoreleasedReturnValue(v52);

      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v200 = v30;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "Couldn't create new TLK: %@", buf, 0xCu);
      }

      objc_msgSend(*(id *)(v172 + 40), "setNextState:", CFSTR("error"));
      objc_msgSend(*(id *)(v172 + 40), "setError:", v30);
      v49 = 0;
      goto LABEL_50;
    }
    v167 = v9;
    v192 = 0;
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSKey randomKeyWrappedByParent:keyclass:error:](CKKSKey, "randomKeyWrappedByParent:keyclass:error:", v38, CFSTR("classA"), &v192));
    v41 = v192;
    v191 = v41;
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSKey randomKeyWrappedByParent:keyclass:error:](CKKSKey, "randomKeyWrappedByParent:keyclass:error:", v38, CFSTR("classC"), &v191));
    v43 = (CKKSCurrentKeySet *)v191;

    if (v43)
    {
      v44 = v43;
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "zoneID"));
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "zoneName"));
      v47 = sub_10000BDF4(CFSTR("ckkstlk"), v46);
      v48 = objc_claimAutoreleasedReturnValue(v47);

      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v200 = v44;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "couldn't make new key hierarchy: %@", buf, 0xCu);
      }

      objc_msgSend(*(id *)(v172 + 40), "setError:", v44);
      objc_msgSend(*(id *)(v172 + 40), "setNextState:", CFSTR("error"));

      v30 = v44;
      v49 = 0;
      v9 = v167;
      goto LABEL_50;
    }
    v160 = v31;
    v54 = v40;
    v55 = v42;
    v56 = v172;
    v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "contextID"));
    v168 = v39;
    v58 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet uuid](v39, "uuid"));
    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "zoneID"));
    v190 = 0;
    v163 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeyPointer forKeyClass:contextID:withKeyUUID:zoneID:error:](CKKSCurrentKeyPointer, "forKeyClass:contextID:withKeyUUID:zoneID:error:", CFSTR("tlk"), v57, v58, v59, &v190));
    v60 = v190;

    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "contextID"));
    v165 = v54;
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "uuid"));
    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "zoneID"));
    v189 = v60;
    v162 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeyPointer forKeyClass:contextID:withKeyUUID:zoneID:error:](CKKSCurrentKeyPointer, "forKeyClass:contextID:withKeyUUID:zoneID:error:", CFSTR("classA"), v61, v62, v63, &v189));
    v64 = v189;

    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "contextID"));
    v164 = v55;
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "uuid"));
    v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "zoneID"));
    v188 = v64;
    v68 = objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeyPointer forKeyClass:contextID:withKeyUUID:zoneID:error:](CKKSCurrentKeyPointer, "forKeyClass:contextID:withKeyUUID:zoneID:error:", CFSTR("classC"), v65, v66, v67, &v188));
    v69 = (CKKSCurrentKeySet *)v188;

    v30 = v69;
    v161 = (void *)v68;
    if (v69)
    {
      v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "zoneID"));
      v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "zoneName"));
      v72 = sub_10000BDF4(CFSTR("ckkstlk"), v71);
      v73 = objc_claimAutoreleasedReturnValue(v72);

      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v200 = v30;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "couldn't make current key records: %@", buf, 0xCu);
      }

      objc_msgSend(*(id *)(v172 + 40), "setNextState:", CFSTR("error"));
      objc_msgSend(*(id *)(v172 + 40), "setError:", v30);
      v49 = 0;
      v31 = v160;
      v39 = v168;
      goto LABEL_48;
    }
    v74 = -[CKKSCurrentKeySet copy](v8, "copy");
    v39 = v168;
    if (v74)
    {
      v75 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet contextID](v8, "contextID"));
      v187 = 0;
      v76 = objc_msgSend(v74, "ensureKeyLoadedForContextID:error:", v75, &v187);
      v77 = (CKKSCurrentKeySet *)v187;

      if (v77)
      {
        v78 = v74;
        v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 40), "deps"));
        v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "lockStateTracker"));
        v81 = objc_msgSend(v80, "isLockedError:", v77);

        v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "zoneID"));
        v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "zoneName"));
        v84 = sub_10000BDF4(CFSTR("ckkstlk"), v83);
        v85 = objc_claimAutoreleasedReturnValue(v84);

        v86 = os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
        v30 = v77;
        if (v81)
        {
          if (v86)
          {
            *(_DWORD *)buf = 138412290;
            v200 = v77;
            _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "Couldn't unwrap TLK due to lock state. Entering a waiting state; %@",
              buf,
              0xCu);
          }

          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v172 + 64) + 8) + 24) = 1;
        }
        else
        {
          if (v86)
          {
            *(_DWORD *)buf = 138412290;
            v200 = v77;
            _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "couldn't unwrap TLK, aborting new TLK operation: %@", buf, 0xCu);
          }

          objc_msgSend(*(id *)(v172 + 40), "setNextState:", CFSTR("error"));
        }
        objc_msgSend(*(id *)(v172 + 40), "setError:", v77);

LABEL_47:
        v49 = 0;
        v31 = v160;
LABEL_48:
        v94 = v164;
        v93 = v165;
LABEL_49:

LABEL_50:
        goto LABEL_51;
      }
      v186 = 0;
      objc_msgSend(v74, "wrapUnder:error:", v168, &v186);
      v87 = (CKKSCurrentKeySet *)v186;
      if (v87)
      {
        v30 = v87;
        v88 = v74;
        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "zoneID"));
        v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "zoneName"));
        v91 = sub_10000BDF4(CFSTR("ckkstlk"), v90);
        v92 = objc_claimAutoreleasedReturnValue(v91);

        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v200 = v30;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "couldn't wrap oldTLK, aborting new TLK operation: %@", buf, 0xCu);
        }

        objc_msgSend(*(id *)(v172 + 40), "setNextState:", CFSTR("error"));
        objc_msgSend(*(id *)(v172 + 40), "setError:", v30);

        goto LABEL_47;
      }
      objc_msgSend(v74, "setCurrentkey:", 0);
      v68 = (uint64_t)v161;
    }
    v154 = v74;
    v96 = [CKKSCurrentKeySet alloc];
    v97 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet zoneID](v168, "zoneID"));
    v98 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet contextID](v168, "contextID"));
    v99 = -[CKKSCurrentKeySet initWithZoneID:contextID:](v96, "initWithZoneID:contextID:", v97, v98);

    -[CKKSCurrentKeySet setTlk:](v99, "setTlk:", v168);
    -[CKKSCurrentKeySet setClassA:](v99, "setClassA:", v54);
    -[CKKSCurrentKeySet setClassC:](v99, "setClassC:", v164);
    -[CKKSCurrentKeySet setCurrentTLKPointer:](v99, "setCurrentTLKPointer:", v163);
    -[CKKSCurrentKeySet setCurrentClassAPointer:](v99, "setCurrentClassAPointer:", v162);
    -[CKKSCurrentKeySet setCurrentClassCPointer:](v99, "setCurrentClassCPointer:", v68);
    -[CKKSCurrentKeySet setProposed:](v99, "setProposed:", 1);
    v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "zoneID"));
    v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "zoneName"));
    v102 = sub_10000BDF4(CFSTR("ckkstlk"), v101);
    v103 = objc_claimAutoreleasedReturnValue(v102);

    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v200 = v99;
      _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "Saving new keys %@ to keychain", buf, 0xCu);
    }

    v185 = 0;
    -[CKKSCurrentKeySet saveKeyMaterialToKeychain:](v168, "saveKeyMaterialToKeychain:", &v185);
    v104 = v185;
    v184 = v104;
    objc_msgSend(v54, "saveKeyMaterialToKeychain:", &v184);
    v105 = v184;

    v183 = v105;
    objc_msgSend(v164, "saveKeyMaterialToKeychain:", &v183);
    v106 = (CKKSCurrentKeySet *)v183;

    v155 = v99;
    if (v106)
    {
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 40), "deps"));
      v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "lockStateTracker"));
      v109 = objc_msgSend(v108, "isLockedError:", v106);

      v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v172 + 32), "zoneID"));
      v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "zoneName"));
      v112 = sub_10000BDF4(CFSTR("ckkstlk"), v111);
      v113 = objc_claimAutoreleasedReturnValue(v112);

      v114 = os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
      v30 = v106;
      if (v109)
      {
        if (v114)
        {
          *(_DWORD *)buf = 138412290;
          v200 = v106;
          _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "Couldn't save new key material to keychain due to lock state. Entering a waiting state; %@",
            buf,
            0xCu);
        }

        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v172 + 64) + 8) + 24) = 1;
      }
      else
      {
        if (v114)
        {
          *(_DWORD *)buf = 138412290;
          v200 = v106;
          _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "couldn't save new key material to keychain; aborting new TLK operation: %@",
            buf,
            0xCu);
        }

        objc_msgSend(*(id *)(v172 + 40), "setNextState:", CFSTR("error"));
      }
      objc_msgSend(*(id *)(v172 + 40), "setError:", v106);
      v49 = 0;
LABEL_100:
      v31 = v160;
      v94 = v164;
      v93 = v165;

      goto LABEL_49;
    }
    v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v179 = 0u;
    v180 = 0u;
    v181 = 0u;
    v182 = 0u;
    obj = *(id *)(v172 + 48);
    v159 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v179, v198, 16);
    v30 = 0;
    if (!v159)
    {
LABEL_91:

      v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "allObjects"));
      -[CKKSCurrentKeySet setPendingTLKShares:](v155, "setPendingTLKShares:", v149);

      v150 = *(void **)(v56 + 56);
      v151 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet zoneID](v39, "zoneID"));
      objc_msgSend(v150, "setObject:forKeyedSubscript:", v155, v151);
      v49 = 1;
LABEL_99:

      goto LABEL_100;
    }
    v158 = *(_QWORD *)v180;
    v157 = v8;
    v171 = v115;
LABEL_62:
    v116 = 0;
    while (1)
    {
      if (*(_QWORD *)v180 != v158)
        objc_enumerationMutation(obj);
      v117 = v30;
      v166 = (char *)v116;
      v118 = *(CKKSCurrentKeySet **)(*((_QWORD *)&v179 + 1) + 8 * (_QWORD)v116);
      v119 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet currentSelfPeers](v118, "currentSelfPeers"));
      v120 = objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "currentSelf"));
      if (!v120)
        break;
      v121 = (void *)v120;
      v122 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet currentSelfPeersError](v118, "currentSelfPeersError"));

      if (v122)
        goto LABEL_82;
      v177 = 0u;
      v178 = 0u;
      v175 = 0u;
      v176 = 0u;
      v170 = v118;
      v169 = objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet currentTrustedPeers](v118, "currentTrustedPeers"));
      v123 = -[NSObject countByEnumeratingWithState:objects:count:](v169, "countByEnumeratingWithState:objects:count:", &v175, v197, 16);
      if (v123)
      {
        v124 = v123;
        v125 = *(_QWORD *)v176;
        do
        {
          for (i = 0; i != v124; i = (char *)i + 1)
          {
            if (*(_QWORD *)v176 != v125)
              objc_enumerationMutation(v169);
            v127 = *(CKKSCurrentKeySet **)(*((_QWORD *)&v175 + 1) + 8 * (_QWORD)i);
            v128 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet publicEncryptionKey](v127, "publicEncryptionKey"));

            v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v56 + 32), "zoneID"));
            v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "zoneName"));
            v131 = sub_10000BDF4(CFSTR("ckkstlk"), v130);
            v132 = objc_claimAutoreleasedReturnValue(v131);

            v133 = os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT);
            if (v128)
            {
              if (v133)
              {
                *(_DWORD *)buf = 138412546;
                v200 = v168;
                v201 = 2112;
                v202 = v127;
                _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "Generating TLK(%@) share for %@", buf, 0x16u);
              }

              v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v56 + 32), "contextID"));
              v135 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet currentSelfPeers](v170, "currentSelfPeers"));
              v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v135, "currentSelf"));
              v174 = v117;
              v132 = objc_claimAutoreleasedReturnValue(+[CKKSTLKShareRecord share:contextID:as:to:epoch:poisoned:error:](CKKSTLKShareRecord, "share:contextID:as:to:epoch:poisoned:error:", v173, v134, v136, v127, -1, 0, &v174));
              v137 = v174;

              v56 = v172;
              objc_msgSend(v171, "addObject:", v132);
              v117 = v137;
            }
            else if (v133)
            {
              *(_DWORD *)buf = 138412290;
              v200 = v127;
              _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "No need to make TLK for %@; they don't have any encryption keys",
                buf,
                0xCu);
            }

          }
          v124 = -[NSObject countByEnumeratingWithState:objects:count:](v169, "countByEnumeratingWithState:objects:count:", &v175, v197, 16);
        }
        while (v124);
        v8 = v157;
        v138 = v166;
        v9 = v167;
        v30 = v117;
        v115 = v171;
        v39 = v168;
        v139 = v169;
        goto LABEL_87;
      }
      v30 = v117;
      v115 = v171;
      v138 = v166;
      v139 = v169;
LABEL_86:
      v8 = v157;
LABEL_87:

      v116 = v138 + 1;
      if (v116 == v159)
      {
        v148 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v179, v198, 16);
        v159 = v148;
        if (v148)
          goto LABEL_62;
        goto LABEL_91;
      }
    }

LABEL_82:
    v140 = v118;
    v141 = -[CKKSCurrentKeySet essential](v118, "essential");
    v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v56 + 32), "zoneID"));
    v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "zoneName"));
    v144 = sub_10000BDF4(CFSTR("ckkstlk"), v143);
    v145 = objc_claimAutoreleasedReturnValue(v144);

    v146 = v145;
    v147 = os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT);
    v138 = v166;
    if (v141)
    {
      v39 = v168;
      v30 = v117;
      v115 = v171;
      if (v147)
      {
        v152 = (CKKSCurrentKeySet *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet currentSelfPeersError](v140, "currentSelfPeersError"));
        *(_DWORD *)buf = 138412546;
        v200 = v168;
        v201 = 2112;
        v202 = v152;
        _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEFAULT, "Fatal error: unable to generate TLK shares for (%@): %@", buf, 0x16u);

      }
      v153 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSCurrentKeySet currentSelfPeersError](v140, "currentSelfPeersError"));
      objc_msgSend(*(id *)(v56 + 40), "setError:", v153);

      objc_msgSend(*(id *)(v56 + 40), "setNextState:", CFSTR("error"));
      v49 = 0;
      v151 = obj;
      v8 = v157;
      goto LABEL_99;
    }
    v39 = v168;
    v30 = v117;
    v115 = v171;
    if (v147)
    {
      *(_DWORD *)buf = 138412546;
      v200 = v168;
      v201 = 2112;
      v202 = v140;
      v139 = v146;
      _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEFAULT, "Unable to generate TLK shares for (%@): %@", buf, 0x16u);
    }
    else
    {
      v139 = v146;
    }
    goto LABEL_86;
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deps"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "lockStateTracker"));
  v23 = v16;
  v24 = objc_msgSend(v22, "isLockedError:", v16);

  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "zoneName"));
  v27 = sub_10000BDF4(CFSTR("ckkstlk"), v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);

  v29 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
  v30 = v23;
  if (v24)
  {
    if (v29)
    {
      *(_DWORD *)buf = 138412290;
      v200 = v23;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Couldn't fetch and unwrap old TLK due to lock state. Entering a waiting state; %@",
        buf,
        0xCu);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
  else
  {
    if (v29)
    {
      *(_DWORD *)buf = 138412290;
      v200 = v23;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Couldn't fetch and unwrap old TLK: %@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 40), "setNextState:", CFSTR("error"));
  }
  objc_msgSend(*(id *)(a1 + 40), "setError:", v23);
  v39 = 0;
  v49 = 0;
LABEL_51:

  return v49;
}

id sub_10015D5D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)(a1 + 40))
    v5 = 2;
  else
    v5 = 1;
  objc_msgSend(v3, "setIcloudAccountState:", v5);
  objc_msgSend(v4, "setAltDSID:", *(_QWORD *)(a1 + 32));
  return v4;
}

OTAccountMetadataClassC *__cdecl sub_10015D620(id a1, OTAccountMetadataClassC *a2)
{
  OTAccountMetadataClassC *v2;

  v2 = a2;
  -[OTAccountMetadataClassC setIcloudAccountState:](v2, "setIcloudAccountState:", 1);
  -[OTAccountMetadataClassC setAltDSID:](v2, "setAltDSID:", 0);
  return v2;
}

void sub_10015D858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10015E524(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  objc_msgSend(v3, "setTrustState:", objc_msgSend(*(id *)(a1 + 32), "trustState"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerID"));
  objc_msgSend(v3, "setPeerID:", v4);

  return v3;
}

void sub_10015E580(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  const void *v12;
  NSObject *v13;
  void *v14;
  int v15;
  id v16;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v11 = WeakRetained;
  if (v8 && v7 && !v9)
  {
    objc_msgSend(WeakRetained, "afterTPHTrustState:trustedPeers:", v7, v8);
  }
  else
  {
    v12 = sub_10000EF14("SecError");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 138412290;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "octagon: TPH was unable to determine current peer state: %@", (uint8_t *)&v15, 0xCu);
    }

    objc_msgSend(v11, "setError:", v9);
    objc_msgSend(v11, "setNextState:", CFSTR("Error"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "finishedOp"));
    objc_msgSend(v11, "runBeforeGroupFinished:", v14);

  }
}

uint64_t sub_1001600AC(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t String;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t Data;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    v12 = v6 & 7;
    if (v11 || (_DWORD)v12 == 4)
      break;
    v14 = v6 >> 3;
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(String);
        v17 = 32;
        goto LABEL_53;
      case 2u:
        *(_BYTE *)(a1 + 184) |= 2u;
        v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v23 = 0;
        }
        v49 = 24;
        goto LABEL_64;
      case 3u:
        *(_BYTE *)(a1 + 184) |= 1u;
        v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v23 = 0;
        }
        v49 = 16;
LABEL_64:
        *(_QWORD *)(a1 + v49) = v23;
        continue;
      case 4u:
        v25 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v25);
        v17 = 48;
        goto LABEL_53;
      case 5u:
        v26 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v26);
        v17 = 152;
        goto LABEL_53;
      case 6u:
        v27 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v27);
        v17 = 168;
        goto LABEL_53;
      case 7u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 184) |= 4u;
        break;
      case 8u:
        v34 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v34);
        v17 = 56;
        goto LABEL_53;
      case 9u:
        Data = PBReaderReadData(a2);
        v16 = objc_claimAutoreleasedReturnValue(Data);
        v17 = 104;
        goto LABEL_53;
      case 0xAu:
        v36 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v36);
        v17 = 136;
        goto LABEL_53;
      case 0xBu:
        v37 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v37);
        v17 = 96;
        goto LABEL_53;
      case 0xCu:
        v38 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v38);
        v17 = 120;
        goto LABEL_53;
      case 0xDu:
        v39 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v39);
        v17 = 40;
        goto LABEL_53;
      case 0xEu:
        v40 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v40);
        v17 = 176;
        goto LABEL_53;
      case 0xFu:
        v41 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v41);
        v17 = 160;
        goto LABEL_53;
      case 0x10u:
        v42 = PBReaderReadData(a2);
        v16 = objc_claimAutoreleasedReturnValue(v42);
        v17 = 128;
        goto LABEL_53;
      case 0x11u:
        v43 = PBReaderReadData(a2);
        v16 = objc_claimAutoreleasedReturnValue(v43);
        v17 = 112;
        goto LABEL_53;
      case 0x12u:
        v44 = PBReaderReadData(a2);
        v16 = objc_claimAutoreleasedReturnValue(v44);
        v17 = 64;
        goto LABEL_53;
      case 0x13u:
        v45 = PBReaderReadData(a2);
        v16 = objc_claimAutoreleasedReturnValue(v45);
        v17 = 72;
        goto LABEL_53;
      case 0x14u:
        v46 = PBReaderReadData(a2);
        v16 = objc_claimAutoreleasedReturnValue(v46);
        v17 = 80;
        goto LABEL_53;
      case 0x15u:
        v47 = PBReaderReadData(a2);
        v16 = objc_claimAutoreleasedReturnValue(v47);
        v17 = 88;
LABEL_53:
        v48 = *(void **)(a1 + v17);
        *(_QWORD *)(a1 + v17) = v16;

        continue;
      default:
        v18 = *(_QWORD *)(a1 + 8);
        if (!v18)
        {
          v19 = objc_alloc_init((Class)PBUnknownFields);
          v20 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v19;

          v18 = *(_QWORD *)(a1 + 8);
        }
        result = PBUnknownFieldAdd(v18, v14, v12, a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
      v30 |= (unint64_t)(v33 & 0x7F) << v28;
      if ((v33 & 0x80) == 0)
        goto LABEL_57;
      v28 += 7;
      v10 = v29++ >= 9;
      if (v10)
      {
        LODWORD(v30) = 0;
        goto LABEL_59;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_57:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v30) = 0;
LABEL_59:
    *(_DWORD *)(a1 + 144) = v30;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100161FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100162168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001628E8(uint64_t a1)
{
  char v2;
  dispatch_queue_global_t global_queue;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  char v7;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "addObject:", *(_QWORD *)(a1 + 40));
  v2 = objc_msgSend(*(id *)(a1 + 32), "queueIsLocked") ^ 1;
  global_queue = dispatch_get_global_queue(21, 0);
  v4 = objc_claimAutoreleasedReturnValue(global_queue);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100162994;
  v5[3] = &unk_1002E9358;
  v6 = *(id *)(a1 + 40);
  v7 = v2;
  dispatch_async(v4, v5);

}

id sub_100162994(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "lockStateChangeNotification:", *(unsigned __int8 *)(a1 + 40));
}

id sub_1001629A4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "queueIsLocked");
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "_onqueueRecheck");
  return result;
}

id sub_1001629DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onqueueRecheck");
}

id sub_1001629E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "lockStateChangeNotification:", *(unsigned __int8 *)(a1 + 40));
}

void sub_1001629F4(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = sub_10000BDF4(CFSTR("ckks"), 0);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v3 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Keybag unlocked", v3, 2u);
  }

}

uint64_t sub_100162A68(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100162A78(uint64_t a1)
{

}

void sub_100162A80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (objc_msgSend(*(id *)(a1 + 32), "queueIsLocked"))
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastUnlockedTime"));
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;

  }
  else
  {
    v5 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    objc_msgSend(*(id *)(a1 + 32), "setLastUnlockedTime:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
}

uint64_t sub_100162B00(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 8);
  return result;
}

void sub_100162B14(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_onqueueRecheck");

}

void sub_100162B40(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_onqueueRecheck");

}

void sub_100162BAC(id a1)
{
  CKKSLockStateTracker *v1;
  CKKSLockStateTracker *v2;
  void *v3;
  CKKSActualLockStateProvider *v4;

  v1 = [CKKSLockStateTracker alloc];
  v4 = objc_alloc_init(CKKSActualLockStateProvider);
  v2 = -[CKKSLockStateTracker initWithProvider:](v1, "initWithProvider:", v4);
  v3 = (void *)qword_100341410;
  qword_100341410 = (uint64_t)v2;

}

void sub_100162E44(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
  v2 = (void *)qword_100341438;
  qword_100341438 = v1;

}

id sub_100162E8C()
{
  if (qword_100341430 != -1)
    dispatch_once(&qword_100341430, &stru_1002E9398);
  return (id)qword_100341428;
}

void sub_100162ECC(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "infoDictionary"));
  v2 = (void *)qword_100341428;
  qword_100341428 = v1;

}

id sub_100162F14(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_100341448;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_100341448, &stru_1002E93D8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100341420, "objectForKeyedSubscript:", v2));

  return v3;
}

void sub_100162F7C(id a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t v14[128];
  __int128 buf;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;

  v1 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 0);
  v2 = (void *)qword_100341420;
  qword_100341420 = (uint64_t)v1;

  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  *(_QWORD *)&buf = CFSTR("UniqueDeviceID");
  *((_QWORD *)&buf + 1) = CFSTR("BuildVersion");
  v16 = CFSTR("ProductName");
  v17 = CFSTR("ProductType");
  v18 = CFSTR("ProductVersion");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &buf, 5));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        v9 = (void *)MGCopyAnswer(v8, 0);
        if (v9)
        {
          objc_msgSend((id)qword_100341420, "setObject:forKeyedSubscript:", v9, v8);
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v8;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Error getting %@ from MobileGestalt", (uint8_t *)&buf, 0xCu);
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

void sub_100165DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id *location)
{
  id *v27;
  uint64_t v28;

  objc_destroyWeak(v27);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v28 - 128));
  _Unwind_Resume(a1);
}

void sub_1001660BC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100166420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

void sub_10016690C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_10016961C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_100169784(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100169884(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10016A1D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10016BEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_10016CF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016D168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016D2CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016D5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016E2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10016E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016E864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016E98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10016F0E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1001703E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_100170860(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_100170C84(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1001710DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100171860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100171F48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001725E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100172AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100172D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100174040(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "description"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_100174084(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "description"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1001740C8(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  void *v21;
  unsigned int v22;
  const __CFString *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  const __CFString *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  _QWORD v114[5];
  id v115;
  id v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _QWORD v122[21];
  _QWORD v123[21];
  _BYTE v124[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v4 = (void *)v3;
  if (!*(_BYTE *)(a1 + 56))
  {
    v113 = (void *)v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountTracker"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ckdeviceIDInitialized"));
    objc_msgSend(v6, "wait:", 1000000000);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountTracker"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ckdeviceID"));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountTracker"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ckdeviceIDError"));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](CKKSAnalytics, "logger"));
    v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "datePropertyForKey:", CFSTR("lastCKKSPush")));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "operations"));
    v15 = objc_msgSend(v14, "copy");

    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v16 = v15;
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v118, v124, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v119;
      do
      {
        for (i = 0; i != v18; i = (char *)i + 1)
        {
          if (*(_QWORD *)v119 != v19)
            objc_enumerationMutation(v16);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v118 + 1) + 8 * (_QWORD)i), "description"));
          objc_msgSend(v12, "addObject:", v21);

        }
        v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v118, v124, 16);
      }
      while (v18);
    }

    v123[0] = CFSTR("global");
    v122[0] = CFSTR("view");
    v122[1] = CFSTR("reachability");
    v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "reachabilityTracker"));
    v22 = objc_msgSend(v112, "currentReachability");
    v23 = CFSTR("no-network");
    if (v22)
      v23 = CFSTR("network");
    v123[1] = v23;
    v122[2] = CFSTR("activeAccount");
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "activeAccount"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "description"));

    if (v26)
      v27 = v26;
    else
      v27 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v28 = v27;

    v123[2] = v28;
    v122[3] = CFSTR("ckdeviceID");
    v29 = v8;
    v30 = v29;
    if (v29)
      v31 = v29;
    else
      v31 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v32 = v31;

    v123[3] = v32;
    v122[4] = CFSTR("ckdeviceIDError");
    v33 = v10;
    v34 = v33;
    v111 = v30;
    if (v33)
      v35 = v33;
    else
      v35 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v36 = v35;
    v109 = v34;

    v107 = v36;
    v123[4] = v36;
    v122[5] = CFSTR("lockstatetracker");
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lockStateTracker"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "description"));

    v108 = v32;
    if (v38)
      v39 = v38;
    else
      v39 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v40 = v39;

    v106 = v40;
    v123[5] = v40;
    v122[6] = CFSTR("cloudkitRetryAfter");
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "cloudkitRetryAfter"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "description"));

    if (v43)
      v44 = v43;
    else
      v44 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v45 = v44;

    v123[6] = v45;
    v122[7] = CFSTR("lastCKKSPush");
    v46 = v104;
    v47 = v46;
    v110 = v28;
    if (v46)
      v48 = v46;
    else
      v48 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v49 = v48;
    v105 = v47;

    v102 = v49;
    v123[7] = v49;
    v122[8] = CFSTR("policy");
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "syncingPolicy"));
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "description"));

    if (v51)
      v52 = v51;
    else
      v52 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v53 = v52;

    v123[8] = v53;
    v123[9] = CFSTR("yes");
    v122[9] = CFSTR("viewsFromPolicy");
    v122[10] = CFSTR("ckaccountstatus");
    v101 = v53;
    if (objc_msgSend(WeakRetained, "accountStatus"))
    {
      if (objc_msgSend(WeakRetained, "accountStatus") == (id)1)
      {
        v54 = CFSTR("logged in");
      }
      else if (objc_msgSend(WeakRetained, "accountStatus") == (id)2)
      {
        v54 = CFSTR("restricted");
      }
      else
      {
        v55 = objc_msgSend(WeakRetained, "accountStatus");
        v54 = CFSTR("unknown");
        if (v55 == (id)3)
          v54 = CFSTR("logged out");
      }
    }
    else
    {
      v54 = CFSTR("could not determine");
    }
    v123[10] = v54;
    v122[11] = CFSTR("accounttracker");
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountTracker"));
    v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "description"));

    if (v57)
      v58 = v57;
    else
      v58 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v59 = v58;

    v100 = v59;
    v123[11] = v59;
    v122[12] = CFSTR("fetcher");
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "zoneChangeFetcher"));
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "description"));

    if (v61)
      v62 = v61;
    else
      v62 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v63 = v62;

    v99 = v63;
    v123[12] = v63;
    v122[13] = CFSTR("ckksstate");
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateMachine"));
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "currentState"));

    if (v65)
      v66 = v65;
    else
      v66 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v67 = v66;

    v98 = v67;
    v123[13] = v67;
    v122[14] = CFSTR("lastIncomingQueueOperation");
    v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lastIncomingQueueOperation"));
    v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "description"));

    if (v69)
      v70 = v69;
    else
      v70 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v71 = v70;

    v97 = v71;
    v123[14] = v71;
    v122[15] = CFSTR("lastNewTLKOperation");
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lastNewTLKOperation"));
    v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "description"));

    if (v73)
      v74 = v73;
    else
      v74 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v75 = v74;

    v96 = v75;
    v123[15] = v75;
    v122[16] = CFSTR("lastOutgoingQueueOperation");
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lastOutgoingQueueOperation"));
    v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "description"));

    if (v77)
      v78 = v77;
    else
      v78 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v79 = v78;

    v123[16] = v79;
    v122[17] = CFSTR("lastProcessReceivedKeysOperation");
    v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lastProcessReceivedKeysOperation"));
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "description"));

    v103 = v45;
    if (v81)
      v82 = v81;
    else
      v82 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v83 = v82;

    v123[17] = v83;
    v122[18] = CFSTR("lastReencryptOutgoingItemsOperation");
    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lastReencryptOutgoingItemsOperation"));
    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "description"));

    if (v85)
      v86 = v85;
    else
      v86 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v87 = v86;

    v123[18] = v87;
    v122[19] = CFSTR("launchSequence");
    v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
    v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "overallLaunch"));
    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "eventsByTime"));

    if (v90)
      v91 = v90;
    else
      v91 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v92 = v91;

    v122[20] = CFSTR("operationQueue");
    v123[19] = v92;
    v123[20] = v12;
    v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v123, v122, 21));

    v4 = v113;
    objc_msgSend(v113, "addObject:", v93);

  }
  v114[0] = _NSConcreteStackBlock;
  v114[1] = 3221225472;
  v114[2] = sub_100174A84;
  v114[3] = &unk_1002E9858;
  v114[4] = WeakRetained;
  v94 = *(id *)(a1 + 32);
  v117 = *(_BYTE *)(a1 + 56);
  v115 = v94;
  v116 = v4;
  v95 = v4;
  objc_msgSend(WeakRetained, "dispatchSyncWithReadOnlySQLTransaction:", v114);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100174A84(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  void *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *j;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  id obj;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  void *v46;
  _BYTE v47[128];
  void *v48;
  _BYTE v49[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allViews"));

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v42;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v42 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
        v10 = *(void **)(a1 + 40);
        if (v10)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i), "zoneName"));
          v12 = objc_msgSend(v10, "isEqualToString:", v11);

          if (!v12)
            continue;
        }
        objc_msgSend(v2, "addObject:", v9);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
    }
    while (v6);
  }

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("zoneName"), 1));
  v48 = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v48, 1));
  v34 = v2;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "sortedArrayUsingDescriptors:", v14));

  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = v15;
  v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v47, 16);
  if (v16)
  {
    v17 = v16;
    v36 = *(_QWORD *)v38;
    do
    {
      for (j = 0; j != v17; j = (char *)j + 1)
      {
        if (*(_QWORD *)v38 != v36)
          objc_enumerationMutation(obj);
        v19 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)j);
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "zoneID"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneName"));
        v22 = sub_10000BDF4(CFSTR("ckks"), v21);
        v23 = objc_claimAutoreleasedReturnValue(v22);

        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v46 = v19;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Building status for %@", buf, 0xCu);
        }

        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "contextID"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "zoneName"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry contextID:zoneName:](CKKSZoneStateEntry, "contextID:zoneName:", v25, v26));

        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fastStatus:zoneStateEntry:", v19, v27));
        if (!*(_BYTE *)(a1 + 56))
        {
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "intransactionSlowStatus:", v19));
          v30 = objc_msgSend(v28, "mutableCopy");
          objc_msgSend(v30, "addEntriesFromDictionary:", v29);

          v28 = v30;
        }
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "zoneName"));
        v32 = sub_10000BDF4(CFSTR("ckks"), v31);
        v33 = objc_claimAutoreleasedReturnValue(v32);

        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v46 = v28;
          _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Status is %@", buf, 0xCu);
        }

        if (v28)
          objc_msgSend(*(id *)(a1 + 48), "addObject:", v28);

      }
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v47, 16);
    }
    while (v17);
  }

}

uint64_t sub_100174EB0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100174EC0(uint64_t a1)
{

}

void sub_100174EC8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  void **p_cache;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id obj;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  void *v43;
  _BYTE v44[128];

  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allViews"));

  v4 = a1;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v39;
    p_cache = OTAccountsActualAdapter.cache;
    v34 = *(_QWORD *)v39;
    v35 = v3;
    do
    {
      v9 = 0;
      v36 = v6;
      do
      {
        if (*(_QWORD *)v39 != v7)
          objc_enumerationMutation(v3);
        v10 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contextID"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(p_cache + 458, "loadForZone:contextID:", v11, v12));

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "error"));
        if (v14)
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "zoneName"));
          v17 = sub_10000BDF4(CFSTR("ckks"), v16);
          v18 = objc_claimAutoreleasedReturnValue(v17);

          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "error"));
            *(_DWORD *)buf = 138412290;
            v43 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "error loading keyset: %@", buf, 0xCu);

          }
          v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "error"));
          v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8);
          v22 = *(void **)(v21 + 40);
          *(_QWORD *)(v21 + 40) = v20;
        }
        else
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "currentTLKPointer"));
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "currentKeyUUID"));

          if (!v24)
            goto LABEL_17;
          v25 = *(_QWORD *)(v4 + 40);
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contextID"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "currentTLKPointer"));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "currentKeyUUID"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
          v30 = v4;
          v31 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8);
          obj = *(id *)(v31 + 40);
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSTLKShareRecord allFor:contextID:keyUUID:zoneID:error:](CKKSTLKShareRecord, "allFor:contextID:keyUUID:zoneID:error:", v25, v26, v28, v29, &obj));
          objc_storeStrong((id *)(v31 + 40), obj);

          if (v22)
          {
            v4 = v30;
            if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 48) + 8) + 40))
            {
              v32 = *(void **)(*(_QWORD *)(*(_QWORD *)(v30 + 56) + 8) + 40);
              v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneName"));
              objc_msgSend(v32, "addObject:", v33);

              v4 = v30;
            }
          }
          else
          {
            v4 = v30;
          }
          v7 = v34;
          v3 = v35;
          p_cache = (void **)(OTAccountsActualAdapter + 16);
          v6 = v36;
        }

LABEL_17:
        v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
    }
    while (v6);
  }

}

void sub_100175234(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allCKKSManagedViews"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneID"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneName"));
        v11 = objc_msgSend(v10, "isEqualToString:", *(_QWORD *)(a1 + 40));

        if (v11)
        {
          objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v8);
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

}

id sub_100175390(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setHalted:", 1);
}

void sub_10017539C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  char v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSSQLDatabaseObject all:](CKKSOutgoingQueueEntry, "all:", *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v5 = v2;
    v3 = objc_msgSend(v2, "count") == 0;
    v2 = v5;
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;

}

uint64_t sub_100175400(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  const char *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *j;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *k;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  id v38;
  NSObject *v39;
  _BOOL4 v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  NSObject *v52;
  void *v53;
  unsigned int v54;
  void *v55;
  id v56;
  NSObject *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  id v62;
  NSObject *v63;
  NSObject *v64;
  const char *v65;
  uint32_t v66;
  void *v67;
  id v68;
  _BOOL4 v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  id v81;
  NSObject *v82;
  void *v83;
  id v84;
  NSObject *v85;
  NSObject *v86;
  NSObject *v87;
  void *v88;
  id v89;
  NSObject *v90;
  NSObject *v91;
  id v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  void *v97;
  id v98;
  NSObject *v99;
  void *v100;
  uint64_t v101;
  id v102;
  id v103;
  id v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  id v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint8_t buf[4];
  NSObject *v123;
  __int16 v124;
  id v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  int v129;
  __int16 v130;
  uint64_t v131;
  _BYTE v132[128];
  _BYTE v133[128];
  _BYTE v134[128];
  _BYTE v135[128];

  if ((objc_msgSend(*(id *)(a1 + 32), "_onQueueZoneIsReadyForFetching:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
    v7 = sub_10000BDF4(CFSTR("ckksfetch"), v6);
    v4 = objc_claimAutoreleasedReturnValue(v7);

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v5 = "Zone is inactive; cancelling fetch";
      goto LABEL_7;
    }
LABEL_8:
    v8 = 0;
    goto LABEL_78;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "halted"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
    v3 = sub_10000BDF4(CFSTR("ckksfetch"), v2);
    v4 = objc_claimAutoreleasedReturnValue(v3);

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v5 = "Dropping fetch due to halted operation";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, buf, 2u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v120 = 0u;
  v121 = 0u;
  v118 = 0u;
  v119 = 0u;
  v9 = *(id *)(a1 + 48);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v118, v135, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v119;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v119 != v12)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v118 + 1) + 8 * (_QWORD)i);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
        objc_msgSend(v15, "intransactionCKRecordChanged:resync:", v14, *(unsigned __int8 *)(a1 + 72));

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v118, v135, 16);
    }
    while (v11);
  }

  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  v16 = *(id *)(a1 + 56);
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v114, v134, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v115;
    do
    {
      for (j = 0; j != v18; j = (char *)j + 1)
      {
        if (*(_QWORD *)v115 != v19)
          objc_enumerationMutation(v16);
        v21 = *(void **)(*((_QWORD *)&v114 + 1) + 8 * (_QWORD)j);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "recordID"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "recordType"));
        objc_msgSend(v22, "intransactionCKRecordDeleted:recordType:resync:", v23, v24, *(unsigned __int8 *)(a1 + 72));

      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v114, v134, 16);
    }
    while (v18);
  }

  if (!*(_BYTE *)(a1 + 72))
  {
    v41 = 0;
    goto LABEL_64;
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resyncRecordsSeen"));

  if (!v25)
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(*(id *)(a1 + 32), "setResyncRecordsSeen:", v26);

  }
  v112 = 0u;
  v113 = 0u;
  v110 = 0u;
  v111 = 0u;
  v27 = *(id *)(a1 + 48);
  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v110, v133, 16);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)v111;
    do
    {
      for (k = 0; k != v29; k = (char *)k + 1)
      {
        if (*(_QWORD *)v111 != v30)
          objc_enumerationMutation(v27);
        v32 = *(void **)(*((_QWORD *)&v110 + 1) + 8 * (_QWORD)k);
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resyncRecordsSeen"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "recordID"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "recordName"));
        objc_msgSend(v33, "addObject:", v35);

      }
      v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v110, v133, 16);
    }
    while (v29);
  }

  v36 = *(unsigned __int8 *)(a1 + 73);
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
  v38 = sub_10000BDF4(CFSTR("ckksresync"), v37);
  v39 = objc_claimAutoreleasedReturnValue(v38);

  v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
  if (v36)
  {
    if (v40)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "In a resync, but there's More Coming. Waiting to scan for extra items.", buf, 2u);
    }
    v41 = 0;
    goto LABEL_63;
  }
  if (v40)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Comparing local UUIDs against the CloudKit list", buf, 2u);
  }

  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "contextID"));
  v44 = *(_QWORD *)(a1 + 40);
  v109 = 0;
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSSQLDatabaseObject allUUIDsWithContextID:zoneID:error:](CKKSMirrorEntry, "allUUIDsWithContextID:zoneID:error:", v43, v44, &v109));
  v41 = v109;
  v46 = objc_msgSend(v45, "mutableCopy");

  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v39 = v46;
  v47 = -[NSObject countByEnumeratingWithState:objects:count:](v39, "countByEnumeratingWithState:objects:count:", &v105, v132, 16);
  if (v47)
  {
    v48 = v47;
    v49 = *(_QWORD *)v106;
    v99 = v39;
    v101 = *(_QWORD *)v106;
    do
    {
      v50 = 0;
      v102 = v48;
      do
      {
        v51 = v41;
        if (*(_QWORD *)v106 != v49)
          objc_enumerationMutation(v39);
        v52 = *(NSObject **)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)v50);
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resyncRecordsSeen"));
        v54 = objc_msgSend(v53, "containsObject:", v52);

        if (!v54)
        {
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "contextID"));
          v60 = *(_QWORD *)(a1 + 40);
          v104 = v51;
          v57 = objc_claimAutoreleasedReturnValue(+[CKKSMirrorEntry tryFromDatabase:contextID:zoneID:error:](CKKSMirrorEntry, "tryFromDatabase:contextID:zoneID:error:", v52, v59, v60, &v104));
          v41 = v104;

          if (v41)
          {
            v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
            v62 = sub_10000BDF4(CFSTR("ckksresync"), v61);
            v63 = objc_claimAutoreleasedReturnValue(v62);

            if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v123 = v52;
              v124 = 2112;
              v125 = v41;
              v64 = v63;
              v65 = "Couldn't read an item from the database, but it used to be there: %@ %@";
              v66 = 22;
              goto LABEL_52;
            }
          }
          else
          {
            v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
            v68 = sub_10000BDF4(CFSTR("ckksresync"), v67);
            v63 = objc_claimAutoreleasedReturnValue(v68);

            v69 = os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
            if (v57)
            {
              if (v69)
              {
                *(_DWORD *)buf = 138412290;
                v123 = v52;
                _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "BUG: Local item %@ not found in CloudKit, deleting", buf, 0xCu);
              }

              v63 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
              v100 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject item](v57, "item"));
              v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "storedCKRecord"));
              v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "recordID"));
              v72 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject item](v57, "item"));
              v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "storedCKRecord"));
              v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "recordType"));
              -[NSObject intransactionCKRecordDeleted:recordType:resync:](v63, "intransactionCKRecordDeleted:recordType:resync:", v71, v74, *(unsigned __int8 *)(a1 + 72));

              v39 = v99;
            }
            else if (v69)
            {
              *(_DWORD *)buf = 138412290;
              v123 = v52;
              v64 = v63;
              v65 = "Couldn't read ckme(%@) from database; continuing";
              v66 = 12;
LABEL_52:
              _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, v65, buf, v66);
            }
          }
          v49 = v101;

          v48 = v102;
          goto LABEL_60;
        }
        v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
        v56 = sub_10000BDF4(CFSTR("ckksresync"), v55);
        v57 = objc_claimAutoreleasedReturnValue(v56);

        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v123 = v52;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "UUID %@ is still in CloudKit; carry on.",
            buf,
            0xCu);
        }
        v41 = v51;
LABEL_60:

        v50 = (char *)v50 + 1;
      }
      while (v48 != v50);
      v48 = -[NSObject countByEnumeratingWithState:objects:count:](v39, "countByEnumeratingWithState:objects:count:", &v105, v132, 16);
    }
    while (v48);
  }

  objc_msgSend(*(id *)(a1 + 32), "setResyncRecordsSeen:", 0);
LABEL_63:

LABEL_64:
  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "contextID"));
  v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
  v78 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry contextID:zoneName:](CKKSZoneStateEntry, "contextID:zoneName:", v76, v77));

  v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v78, "setLastFetchTime:", v79);

  objc_msgSend(v78, "setChangeToken:", *(_QWORD *)(a1 + 64));
  objc_msgSend(v78, "setMoreRecordsInCloudKit:", *(unsigned __int8 *)(a1 + 73));
  v103 = v41;
  objc_msgSend(v78, "saveToDatabase:", &v103);
  v4 = v103;

  if (v4)
  {
    v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
    v81 = sub_10000BDF4(CFSTR("ckksfetch"), v80);
    v82 = objc_claimAutoreleasedReturnValue(v81);

    if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v123 = v4;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "Couldn't save new server change token: %@", buf, 0xCu);
    }

  }
  if (!objc_msgSend(*(id *)(a1 + 48), "count") && !objc_msgSend(*(id *)(a1 + 56), "count"))
  {
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_75;
    if (!*(_BYTE *)(a1 + 72))
    {
      v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
      v98 = sub_10000BDF4(CFSTR("ckksfetch"), v97);
      v87 = objc_claimAutoreleasedReturnValue(v98);

      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "No record changes in this fetch", buf, 2u);
      }
      goto LABEL_74;
    }
LABEL_71:
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneName"));
    v84 = sub_10000BDF4(CFSTR("ckksfetch"), v83);
    v85 = objc_claimAutoreleasedReturnValue(v84);

    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
    {
      v86 = *(NSObject **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v123 = v86;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "Beginning incoming processing for %@", buf, 0xCu);
    }

    v87 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
    -[NSObject _onqueueHandleFlag:](v87, "_onqueueHandleFlag:", CFSTR("process_incoming_queue"));
LABEL_74:

    goto LABEL_75;
  }
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_71;
LABEL_75:
  v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
  v89 = sub_10000BDF4(CFSTR("ckksfetch"), v88);
  v90 = objc_claimAutoreleasedReturnValue(v89);

  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
  {
    v91 = objc_msgSend(*(id *)(a1 + 48), "count");
    v92 = objc_msgSend(*(id *)(a1 + 56), "count");
    v93 = *(unsigned __int8 *)(a1 + 73);
    v94 = *(unsigned __int8 *)(a1 + 72);
    v95 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 134219010;
    v123 = v91;
    v124 = 2048;
    v125 = v92;
    v126 = 2048;
    v127 = v93;
    v128 = 1024;
    v129 = v94;
    v130 = 2112;
    v131 = v95;
    _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "Finished processing changes: changed=%lu deleted=%lu moreComing=%lu resync=%u changeToken=%@", buf, 0x30u);
  }

  v8 = 1;
LABEL_78:

  return v8;
}

void sub_100175FB4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;

  if ((objc_msgSend(*(id *)(a1 + 32), "_onQueueZoneIsReadyForFetching:", *(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setParticipateInFetch:", 1);
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contextID"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
    v5 = objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry contextID:zoneName:](CKKSZoneStateEntry, "contextID:zoneName:", v3, v4));

    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject getChangeToken](v5, "getChangeToken"));
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setChangeToken:", v6);

    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneName"));
      v11 = sub_10000BDF4(CFSTR("ckksfetch"), v10);
      v12 = objc_claimAutoreleasedReturnValue(v11);

      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
        v14 = 138412290;
        v15 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "couldn't fetch zone change token for %@", (uint8_t *)&v14, 0xCu);

      }
      v5 = 0;
    }
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneName"));
    v8 = sub_10000BDF4(CFSTR("ckksfetch"), v7);
    v5 = objc_claimAutoreleasedReturnValue(v8);

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(void **)(a1 + 40);
      v14 = 138412290;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "skipping fetch for %@; zone is not ready",
        (uint8_t *)&v14,
        0xCu);
    }
  }

}

id sub_1001761C8(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_onQueueZoneIsReadyForFetching:", *(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1001761FC(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitClassDependencies"));
  v3 = objc_msgSend(v2, "notifierClass");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.security.view-change.%@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v3, "post:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitClassDependencies"));
  v6 = objc_msgSend(v5, "notifierClass");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.security.keychainchanged"));
  objc_msgSend(v6, "post:", v7);

  if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("Manatee")) & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("Engram")) & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("ApplePay")) & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("Home")) & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("LimitedPeersAllowed")))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitClassDependencies"));
    objc_msgSend(objc_msgSend(v8, "notifierClass"), "post:", CFSTR("com.apple.security.view-change.PCS"));

  }
}

void sub_100176358(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  const __CFString *v10;
  const __CFString *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitClassDependencies"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(objc_msgSend(v3, "nsdistributednotificationCenterClass"), "defaultCenter"));

  v5 = CFSTR("unknown");
  if (*(_QWORD *)(a1 + 32))
    v5 = *(const __CFString **)(a1 + 32);
  v10 = CFSTR("view");
  v11 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
  objc_msgSend(v4, "postNotificationName:object:userInfo:options:", CFSTR("com.apple.security.view-become-ready"), 0, v6, 0);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cloudKitClassDependencies"));
  v8 = objc_msgSend(v7, "notifierClass");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.security.view-ready.%@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v8, "post:", v9);

}

void sub_10017649C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  const __CFString *v29;
  const __CFString *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *j;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned __int8 v50;
  __CFString *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  NSObject *v64;
  const __CFString *v65;
  const __CFString *v66;
  int v67;
  void *v68;
  void *v69;
  id v70;
  NSObject *v71;
  void *v72;
  void *v73;
  id v74;
  NSObject *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  const __CFString *v80;
  void *v81;
  void *v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  void *k;
  void *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  char v93;
  void *v94;
  id v95;
  uint64_t v96;
  id v97;
  id obj;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[128];
  _BYTE v117[128];
  uint8_t v118[128];
  uint8_t buf[4];
  uint64_t v120;
  __int16 v121;
  const __CFString *v122;
  __int16 v123;
  const __CFString *v124;
  __int16 v125;
  uint64_t v126;
  _BYTE v127[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "syncingPolicy"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allViews"));
  v5 = objc_msgSend(v4, "mutableCopy");

  v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  obj = v5;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v112, v127, 16);
  v99 = v1;
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v113;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v113 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * (_QWORD)i);
        v11 = *(void **)(v1 + 40);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneName"));
        LODWORD(v11) = objc_msgSend(v11, "containsObject:", v13);

        if ((_DWORD)v11)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneName"));
          v16 = objc_msgSend(v94, "isSyncingEnabledForView:", v15);

          v17 = *(void **)(v1 + 48);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "zoneName"));
          v20 = objc_msgSend(v17, "isSyncingEnabledForView:", v19);

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "zoneName"));
          v23 = sub_10000BDF4(CFSTR("ckks"), v22);
          v24 = objc_claimAutoreleasedReturnValue(v23);

          v1 = v99;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
            v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "zoneName"));
            v27 = (void *)v26;
            v28 = *(_QWORD *)(v99 + 48);
            v29 = CFSTR("paused");
            if (v20)
              v30 = CFSTR("enabled");
            else
              v30 = CFSTR("paused");
            *(_DWORD *)buf = 138413058;
            if (v16)
              v29 = CFSTR("enabled");
            v120 = v26;
            v121 = 2112;
            v122 = v30;
            v123 = 2112;
            v124 = v29;
            v125 = 2112;
            v126 = v28;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Syncing for %@ is now %@ (used to be %@) (policy: %@)", buf, 0x2Au);

          }
        }
        else
        {
          v31 = *(void **)(v1 + 56);
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "zoneName"));
          LOBYTE(v31) = objc_msgSend(v31, "containsObject:", v33);

          if ((v31 & 1) == 0)
          {
            v34 = sub_10000BDF4(CFSTR("ckks-policy"), 0);
            v35 = objc_claimAutoreleasedReturnValue(v34);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneID"));
              v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "zoneName"));
              *(_DWORD *)buf = 138412290;
              v120 = (uint64_t)v37;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Stopping old view %@", buf, 0xCu);

            }
            objc_msgSend(v92, "addObject:", v10);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 24) = 1;
          }
        }
      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v112, v127, 16);
    }
    while (v7);
  }
  v38 = obj;

  objc_msgSend(obj, "minusSet:", v92);
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 40), "setByAddingObjectsFromSet:", *(_QWORD *)(v1 + 56)));
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v95 = v39;
  v97 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v108, v118, 16);
  if (!v97)
  {
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
    objc_msgSend(v81, "applyNewSyncingPolicy:viewStates:", *(_QWORD *)(v1 + 48), obj);

    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "stateMachine"));
    v79 = v78;
    v80 = CFSTR("check_queues");
    goto LABEL_61;
  }
  v93 = 0;
  v96 = *(_QWORD *)v109;
  do
  {
    for (j = 0; j != v97; j = (char *)j + 1)
    {
      if (*(_QWORD *)v109 != v96)
        objc_enumerationMutation(v95);
      v41 = *(_QWORD *)(*((_QWORD *)&v108 + 1) + 8 * (_QWORD)j);
      v104 = 0u;
      v105 = 0u;
      v106 = 0u;
      v107 = 0u;
      v42 = v38;
      v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v104, v117, 16);
      if (v43)
      {
        v44 = v43;
        v45 = *(_QWORD *)v105;
LABEL_28:
        v46 = 0;
        while (1)
        {
          if (*(_QWORD *)v105 != v45)
            objc_enumerationMutation(v42);
          v47 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * v46);
          v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "zoneID"));
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "zoneName"));
          v50 = objc_msgSend(v49, "isEqualToString:", v41);

          if ((v50 & 1) != 0)
            break;
          if (v44 == (id)++v46)
          {
            v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v104, v117, 16);
            if (v44)
              goto LABEL_28;
            goto LABEL_34;
          }
        }
        v51 = v47;

        if (!v51)
          goto LABEL_37;
        v38 = obj;
        v1 = v99;
      }
      else
      {
LABEL_34:

LABEL_37:
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v99 + 32), "operationDependencies"));
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "contextID"));
        v54 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry contextID:zoneName:](CKKSZoneStateEntry, "contextID:zoneName:", v53, v41));

        v55 = objc_msgSend(*(id *)(v99 + 40), "containsObject:", v41);
        v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "getChangeToken"));

        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v99 + 48), "priorityViews"));
        v58 = objc_msgSend(v57, "containsObject:", v41);

        v59 = *(void **)(v99 + 32);
        v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "contextID"));
        v51 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "createViewState:contextID:zoneIsNew:priorityView:ckksManagedView:", v41, v60, v56 == 0, v58, v55));

        objc_msgSend(v42, "addObject:", v51);
        v61 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString zoneID](v51, "zoneID"));
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "zoneName"));
        v63 = sub_10000BDF4(CFSTR("ckks"), v62);
        v64 = objc_claimAutoreleasedReturnValue(v63);

        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          v65 = CFSTR("normal");
          if ((_DWORD)v58)
            v65 = CFSTR("priority");
          *(_DWORD *)buf = 138412802;
          v120 = (uint64_t)v65;
          v66 = CFSTR("externally-managed");
          if ((_DWORD)v55)
            v66 = CFSTR("CKKS");
          v121 = 2112;
          v122 = v66;
          v123 = 2112;
          v124 = v51;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Created %@ %@ view %@", buf, 0x20u);
        }

        if (v56)
          v67 = 0;
        else
          v67 = (int)v58;
        v38 = obj;
        v1 = v99;
        if (v67 == 1)
        {
          v68 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString zoneID](v51, "zoneID"));
          v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "zoneName"));
          v70 = sub_10000BDF4(CFSTR("ckks"), v69);
          v71 = objc_claimAutoreleasedReturnValue(v70);

          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Initializing a priority view for the first time", buf, 2u);
          }

          v93 = 1;
        }
        if ((_DWORD)v58 && objc_msgSend(v54, "moreRecordsInCloudKit"))
        {
          v72 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString zoneID](v51, "zoneID"));
          v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "zoneName"));
          v74 = sub_10000BDF4(CFSTR("ckks"), v73);
          v75 = objc_claimAutoreleasedReturnValue(v74);

          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "A priority view has more records in CloudKit; treating as new",
              buf,
              2u);
          }

          v93 = 1;
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v99 + 72) + 8) + 24) = 1;

      }
    }
    v97 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v108, v118, 16);
  }
  while (v97);
  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
  objc_msgSend(v76, "applyNewSyncingPolicy:viewStates:", *(_QWORD *)(v1 + 48), v38);

  v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "stateMachine"));
  objc_msgSend(v77, "_onqueueHandleFlag:", CFSTR("check_queues"));

  if ((v93 & 1) != 0)
  {
    objc_msgSend(*(id *)(v1 + 32), "onqueueCreatePriorityViewsProcessedWatcher");
    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "stateMachine"));
    v79 = v78;
    v80 = CFSTR("new_priority_views");
LABEL_61:
    objc_msgSend(v78, "_onqueueHandleFlag:", v80);

  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 8) + 24) && *(_BYTE *)(v1 + 80))
  {
    v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "stateMachine"));
    objc_msgSend(v82, "_onqueueHandleFlag:", CFSTR("key_process_requested"));

  }
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v83 = v38;
  v84 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v100, v116, 16);
  if (v84)
  {
    v85 = v84;
    v86 = *(_QWORD *)v101;
    do
    {
      for (k = 0; k != v85; k = (char *)k + 1)
      {
        if (*(_QWORD *)v101 != v86)
          objc_enumerationMutation(v83);
        v88 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * (_QWORD)k);
        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "zoneChangeFetcher"));
        v90 = *(_QWORD *)(v1 + 32);
        v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "zoneID"));
        objc_msgSend(v89, "registerClient:zoneID:", v90, v91);

      }
      v85 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v100, v116, 16);
    }
    while (v85);
  }

}

void sub_100176EA8(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint8_t v10[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneName"));
  v3 = sub_10000BDF4(CFSTR("ckkstrust"), v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ending trusted operation", v10, 2u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  objc_msgSend(v5, "setPeerProviders:", &__NSArray0__struct);

  objc_msgSend(*(id *)(a1 + 32), "setSuggestTLKUpload:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setTrustStatus:", 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustStatusKnown"));
  objc_msgSend(v6, "fulfill");

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v7, "_onqueueHandleFlag:", CFSTR("trusted_operation_end"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "overallLaunch"));
  objc_msgSend(v9, "addEvent:", CFSTR("trust-loss"));

}

void sub_100176FDC(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[8];
  _BYTE v32[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneName"));
  v3 = sub_10000BDF4(CFSTR("ckkstrust"), v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Beginning trusted operation", buf, 2u);
  }

  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  objc_msgSend(v6, "setPeerProviders:", v5);

  v7 = *(_QWORD *)(a1 + 48);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  objc_msgSend(v8, "setRequestPolicyCheck:", v7);

  v9 = objc_msgSend(*(id *)(a1 + 32), "trustStatus");
  objc_msgSend(*(id *)(a1 + 32), "setSuggestTLKUpload:", *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "setTrustStatus:", 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trustStatusKnown"));
  objc_msgSend(v10, "fulfill");

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v11, "_onqueueHandleFlag:", CFSTR("trusted_operation_begin"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v12, "_onqueueHandleFlag:", CFSTR("key_process_requested"));

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies", 0));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allCKKSManagedViews"));

  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v28;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v28 != v17)
          objc_enumerationMutation(v14);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v18), "launch"));
        objc_msgSend(v19, "addEvent:", CFSTR("trust"));

        v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v16);
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "overallLaunch"));
  objc_msgSend(v21, "addEvent:", CFSTR("trust"));

  if (v9 == (id)3)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneName"));
    v23 = sub_10000BDF4(CFSTR("ckkstrust"), v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);

    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Moving from an untrusted status; we need to process incoming queue and scan for any new items",
        buf,
        2u);
    }

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
    objc_msgSend(v25, "_onqueueHandleFlag:", CFSTR("process_incoming_queue"));

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
    objc_msgSend(v26, "_onqueueHandleFlag:", CFSTR("dropped_items"));

    objc_msgSend(*(id *)(a1 + 32), "onqueueCreatePriorityViewsProcessedWatcher");
  }
}

void sub_100177314(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  CKKSCondition *v5;
  void *v6;
  id v7;
  void *v8;
  uint8_t v9[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneName"));
  v3 = sub_10000BDF4(CFSTR("ckkszone"), v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v9 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "received a notification of CK logout", v9, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setAccountStatus:", 3);
  v5 = [CKKSCondition alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loggedIn"));
  v7 = -[CKKSCondition initToChain:](v5, "initToChain:", v6);
  objc_msgSend(*(id *)(a1 + 32), "setLoggedIn:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loggedOut"));
  objc_msgSend(v8, "fulfill");

}

void sub_100177414(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  CKKSCondition *v5;
  void *v6;
  id v7;
  void *v8;
  uint8_t v9[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneName"));
  v3 = sub_10000BDF4(CFSTR("ckkszone"), v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v9 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "received a notification of CK login", v9, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setAccountStatus:", 1);
  v5 = [CKKSCondition alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loggedOut"));
  v7 = -[CKKSCondition initToChain:](v5, "initToChain:", v6);
  objc_msgSend(*(id *)(a1 + 32), "setLoggedOut:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loggedIn"));
  objc_msgSend(v8, "fulfill");

}

void sub_100177514(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "zoneName"));
  v4 = sub_10000BDF4(CFSTR("ckkszone"), v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v7, 0xCu);
  }

}

void sub_1001775F0(id *a1)
{
  id WeakRetained;
  _QWORD v3[4];
  id v4;
  id v5;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100177684;
  v3[3] = &unk_1002EB078;
  v4 = a1[4];
  v5 = a1[5];
  objc_msgSend(WeakRetained, "dispatchSyncWithReadOnlySQLTransaction:", v3);

}

void sub_100177684(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  id obj;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  id v23;
  _BYTE v24[128];

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = *(id *)(a1 + 32);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v17;
    while (2)
    {
      v7 = 0;
      v8 = v5;
      do
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(obj);
        v9 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v7);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v9));
        v15 = v8;
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSMirrorEntry pcsMirrorKeysForService:matchingKeys:error:](CKKSMirrorEntry, "pcsMirrorKeysForService:matchingKeys:error:", v9, v10, &v15));
        v5 = v15;

        if (!v11)
        {
          v12 = sub_10000BDF4(CFSTR("ckks"), 0);
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            v21 = v9;
            v22 = 2112;
            v23 = v5;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Error getting PCS key hash for service %@: %@", buf, 0x16u);
          }

          v2 = 0;
          goto LABEL_14;
        }
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, v9);

        v7 = (char *)v7 + 1;
        v8 = v5;
      }
      while (v4 != v7);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
      if (v4)
        continue;
      break;
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_14:

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10017789C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  unsigned int v4;
  const __CFString *v5;
  int v6;
  const __CFString *v7;

  objc_msgSend(*(id *)(a1 + 32), "setHavoc:", objc_msgSend(*(id *)(a1 + 32), "havoc") ^ 1);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "havoc");
  v2 = sub_10000BDF4(CFSTR("havoc"), 0);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "havoc");
    v5 = CFSTR("OFF");
    if (v4)
      v5 = CFSTR("ON");
    v6 = 138412290;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Havoc is now %@", (uint8_t *)&v6, 0xCu);
  }

}

void sub_100177990(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  _BOOL4 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  uint8_t buf[4];
  void *v33;

  v2 = objc_msgSend(*(id *)(a1 + 32), "accountStatus");
  v3 = *(void **)(a1 + 32);
  if (v2 == (id)1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "operationDependencies"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "syncingPolicy"));

    if (v5)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "trustStatus") == (id)1)
        goto LABEL_11;
      v6 = CFSTR("No iCloud Keychain Trust");
      v7 = 52;
    }
    else
    {
      v6 = CFSTR("Syncing policy not yet loaded");
      v7 = 56;
    }
  }
  else if (objc_msgSend(v3, "accountStatus"))
  {
    v6 = CFSTR("User is not signed into iCloud.");
    v7 = 10;
  }
  else
  {
    v6 = CFSTR("iCloud account status unknown.");
    v7 = 64;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), v7, v6));
  if (v8)
  {
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100177D1C;
    v30[3] = &unk_1002E9468;
    v31 = v8;
    v9 = v8;
    v10 = objc_claimAutoreleasedReturnValue(+[CKKSResultOperation named:withBlockTakingSelf:](CKKSResultOperation, "named:withBlockTakingSelf:", CFSTR("rpcWaitForPriorityViewProcessing-fail"), v30));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
    objc_msgSend(v13, "addOperation:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

    goto LABEL_21;
  }
LABEL_11:
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "priorityViewsProcessed"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "result"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "error"));

  if (v16)
  {
    v17 = sub_10000BDF4(CFSTR("ckksrpc"), 0);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "priorityViewsProcessed already ran and hit an error, re-setting up priority views watcher", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "onqueueCreatePriorityViewsProcessedWatcher");
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "priorityViewsProcessed"));
  v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "result"));
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v22 = *(void **)(v21 + 40);
  *(_QWORD *)(v21 + 40) = v20;

  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v24 = sub_10000BDF4(CFSTR("ckksrpc"), 0);
  v9 = objc_claimAutoreleasedReturnValue(v24);
  v25 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v23)
  {
    if (v25)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "priorityViewsProcessed"));
      *(_DWORD *)buf = 138412290;
      v33 = v26;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "waitForPriorityViews pending on %@", buf, 0xCu);

    }
  }
  else
  {
    if (v25)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Returning success for waitForPriorityViews", buf, 2u);
    }

    v27 = objc_claimAutoreleasedReturnValue(+[CKKSResultOperation named:withBlock:](CKKSResultOperation, "named:withBlock:", CFSTR("waitForPriority-succeed"), &stru_1002E9790));
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v29 = *(void **)(v28 + 40);
    *(_QWORD *)(v28 + 40) = v27;

    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
    -[NSObject addOperation:](v9, "addOperation:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
LABEL_21:

}

void sub_100177D1C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_10000BDF4(CFSTR("ckksrpc"), 0);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Returning failure for waitForPriorityViews: %@", (uint8_t *)&v7, 0xCu);
  }

  objc_msgSend(v3, "setError:", *(_QWORD *)(a1 + 32));
}

id sub_100177DF0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setError:", *(_QWORD *)(a1 + 32));
}

void sub_100177DFC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "currentFetchReasons"));
  objc_msgSend(v3, "addObject:", *(_QWORD *)(a1 + 40));

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v4, "_onqueueHandleFlag:", CFSTR("fetch_requested"));

}

void sub_100177E74(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  uint8_t buf[4];
  void *v14;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "result"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "error"));

  if (v6)
  {
    v7 = sub_10000BDF4(CFSTR("ckksrpc"), 0);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "rpcFetchAndProcess failed: %@", buf, 0xCu);
    }

    objc_msgSend(v3, "setError:", v6);
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100177FE0;
    v9[3] = &unk_1002E94C8;
    v10 = a1[5];
    v11 = WeakRetained;
    v12 = v3;
    objc_msgSend(WeakRetained, "dispatchSyncWithReadOnlySQLTransaction:", v9);

  }
}

void sub_100177FE0(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  void *v24;
  _BYTE v25[128];

  v2 = *(void **)(a1 + 32);
  if (v2)
    v3 = v2;
  else
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewList"));
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewStateForName:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i)));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneID"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "contextID"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeySet loadForZone:contextID:](CKKSCurrentKeySet, "loadForZone:contextID:", v10, v11));

        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "tlk"));
        if (!v13)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneName"));
          v15 = sub_10000BDF4(CFSTR("ckks"), v14);
          v16 = objc_claimAutoreleasedReturnValue(v15);

          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v24 = v9;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "No local TLKs for %@; failing a fetch rpc",
              buf,
              0xCu);
          }

          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("No local keys for %@; processing queue will fail"),
                            v9));
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 53, v17));
          objc_msgSend(*(id *)(a1 + 48), "setError:", v18);

          goto LABEL_16;
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_16:

}

id sub_100178244(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setError:", *(_QWORD *)(a1 + 32));
}

void sub_100178250(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "currentFetchReasons"));
  objc_msgSend(v3, "addObject:", *(_QWORD *)(a1 + 40));

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v4, "_onqueueHandleFlag:", CFSTR("fetch_requested"));

}

void sub_1001782C8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  int v9;
  void *v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "error"));

  v6 = sub_10000BDF4(CFSTR("ckksrpc"), 0);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v8)
    {
      v9 = 138412290;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "rpcFetch failed: %@", (uint8_t *)&v9, 0xCu);
    }

    objc_msgSend(v3, "setError:", v5);
  }
  else
  {
    if (v8)
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "rpcFetch succeeded", (uint8_t *)&v9, 2u);
    }

  }
}

void sub_1001783F4(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  id v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  Block_layout *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "currentState"));
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("loggedout"));

  if (v4)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[CKKSResultOperation named:withBlockTakingSelf:](CKKSResultOperation, "named:withBlockTakingSelf:", CFSTR("fail"), &stru_1002E96C0));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
  v8 = *(void **)(a1 + 40);
  if (v8)
    v9 = v8;
  else
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewList"));
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v10 = v9;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (!v11)
    goto LABEL_22;
  v12 = v11;
  v13 = *(_QWORD *)v30;
  while (2)
  {
    for (i = 0; i != v12; i = (char *)i + 1)
    {
      if (*(_QWORD *)v30 != v13)
        objc_enumerationMutation(v10);
      v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewStateForName:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i)));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "viewKeyHierarchyState"));
      v17 = objc_msgSend(v16, "isEqualToString:", CFSTR("waitfortlk"));

      if (v17)
      {
        v20 = &stru_1002E96E0;
LABEL_19:
        v21 = objc_claimAutoreleasedReturnValue(+[CKKSResultOperation named:withBlockTakingSelf:](CKKSResultOperation, "named:withBlockTakingSelf:", CFSTR("fail"), v20));
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v23 = *(void **)(v22 + 40);
        *(_QWORD *)(v22 + 40) = v21;
LABEL_21:

        goto LABEL_22;
      }
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "viewKeyHierarchyState"));
      v19 = objc_msgSend(v18, "isEqualToString:", CFSTR("waitfortrust"));

      if (v19)
      {
        v20 = &stru_1002E9700;
        goto LABEL_19;
      }
      if ((objc_msgSend(v15, "ckksManagedView") & 1) == 0)
      {
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_1001786C4;
        v27[3] = &unk_1002E9468;
        v15 = v15;
        v28 = v15;
        v24 = objc_claimAutoreleasedReturnValue(+[CKKSResultOperation named:withBlockTakingSelf:](CKKSResultOperation, "named:withBlockTakingSelf:", CFSTR("fail"), v27));
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v26 = *(void **)(v25 + 40);
        *(_QWORD *)(v25 + 40) = v24;

        v23 = v28;
        goto LABEL_21;
      }

    }
    v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v12)
      continue;
    break;
  }
LABEL_22:

}

id sub_1001786B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onqueueProcessOutgoingQueue:priorityRush:", *(_QWORD *)(a1 + 40), 0);
}

void sub_1001786C4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "zoneName"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Cannot push view %@; is externally managed"),
                   v6));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 63, v4));
  objc_msgSend(v3, "setError:", v5);

}

void sub_10017876C(id a1, CKKSResultOperation *a2)
{
  CKKSResultOperation *v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 52, CFSTR("No trust; push will not succeed.")));
  -[CKKSResultOperation setError:](v2, "setError:", v3);

}

void sub_1001787D4(id a1, CKKSResultOperation *a2)
{
  CKKSResultOperation *v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 53, CFSTR("No TLKs for this view; push will not succeed.")));
  -[CKKSResultOperation setError:](v2, "setError:", v3);

}

void sub_10017883C(id a1, CKKSResultOperation *a2)
{
  CKKSResultOperation *v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 10, CFSTR("No CloudKit account; push will not succeed.")));
  -[CKKSResultOperation setError:](v2, "setError:", v3);

}

void sub_1001788A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "viewsInState:", CFSTR("waitfortlkcreation")));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_100178900(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationDependencies", (_QWORD)v11));
        objc_msgSend(v8, "intransactionCKRecordChanged:resync:", v7, 0);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "stateMachine"));
  objc_msgSend(v9, "_onqueueHandleFlag:", CFSTR("key_process_requested"));

  return 1;
}

void sub_100178A34(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "currentFetchReasons"));
  objc_msgSend(v3, "addObject:", CFSTR("keyset"));

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateMachine"));
  objc_msgSend(v4, "_onqueueHandleFlag:", CFSTR("fetch_requested"));

}

void sub_100178AB0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  CKKSProvideKeySetOperation *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  NSObject *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  unsigned __int8 v52;
  id obj;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  void *v66;
  _BYTE v67[128];
  _BYTE v68[128];

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "operationDependencies"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "keysetProviderOperations"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "findFirstPendingOperation:", v4));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allCKKSManagedViews"));

    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v60;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v60 != v13)
            objc_enumerationMutation(v10);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)i), "zoneID"));
          objc_msgSend(v8, "addObject:", v15);

        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
      }
      while (v12);
    }

    v16 = -[CKKSProvideKeySetOperation initWithIntendedZoneIDs:]([CKKSProvideKeySetOperation alloc], "initWithIntendedZoneIDs:", v8);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "keysetProviderOperations"));
    objc_msgSend(v20, "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

    objc_msgSend(*(id *)(a1 + 32), "scheduleOperationWithoutDependencies:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v51 = a1;
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "allCKKSManagedViews"));

  obj = v23;
  v54 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v55, v67, 16);
  if (v54)
  {
    v24 = *(_QWORD *)v56;
LABEL_12:
    v25 = 0;
    while (1)
    {
      if (*(_QWORD *)v56 != v24)
        objc_enumerationMutation(obj);
      v26 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "zoneID"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "contextID"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeySet loadForZone:contextID:](CKKSCurrentKeySet, "loadForZone:contextID:", v27, v28));

      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "currentTLKPointer"));
      v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "currentKeyUUID"));
      if (!v31)
      {

LABEL_29:
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "zoneID"));
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "zoneName"));
        v47 = sub_10000BDF4(CFSTR("ckks"), v46);
        v48 = objc_claimAutoreleasedReturnValue(v47);

        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "zoneID"));
          *(_DWORD *)buf = 138412546;
          v64 = v49;
          v65 = 2112;
          v66 = v29;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "No current keyset for %@ (%@)", buf, 0x16u);

        }
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v51 + 32), "stateMachine"));
        objc_msgSend(v50, "_onqueueHandleFlag:", CFSTR("key_set"));

        goto LABEL_32;
      }
      v32 = (void *)v31;
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "tlk"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "uuid"));
      if (!v34)
      {
        v35 = v24;
        v36 = v21;
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "viewKeyHierarchyState"));
        if ((objc_msgSend(v37, "isEqualToString:", CFSTR("waitfortrust")) & 1) == 0)
        {
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "viewKeyHierarchyState"));
          v52 = objc_msgSend(v43, "isEqualToString:", CFSTR("waitfortlk"));

          v21 = v36;
          v24 = v35;
          if ((v52 & 1) == 0)
            goto LABEL_29;
          goto LABEL_20;
        }

        v21 = v36;
        v24 = v35;
      }

LABEL_20:
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "zoneID"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "zoneName"));
      v40 = sub_10000BDF4(CFSTR("ckks"), v39);
      v41 = objc_claimAutoreleasedReturnValue(v40);

      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v64 = v29;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Already have keyset %@", buf, 0xCu);
      }

      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "zoneID"));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v29, v42);

      if (v54 == (id)++v25)
      {
        v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v67, 16);
        v54 = v44;
        if (v44)
          goto LABEL_12;
        break;
      }
    }
  }

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v51 + 40) + 8) + 40), "provideKeySets:", v21);
LABEL_32:

}

void sub_10017904C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  CKKSMemoryKeyCache *v12;
  CKKSMemoryKeyCache *v13;
  CKKSMemoryKeyCache *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  CKKSMemoryKeyCache *v18;
  uint64_t *v19;
  __int128 *p_buf;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  _QWORD v27[5];
  CKKSMemoryKeyCache *v28;
  __int128 buf;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = sub_10000BDF4(CFSTR("ckks"), 0);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "error getting pcs identities: %@", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v12 = objc_alloc_init(CKKSMemoryKeyCache);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1001792E0;
    v27[3] = &unk_1002E9608;
    v27[4] = *(_QWORD *)(a1 + 32);
    v13 = v12;
    v28 = v13;
    objc_msgSend(v8, "enumerateObjectsUsingBlock:", v27);
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v30 = 0x3032000000;
    v31 = sub_100174EB0;
    v32 = sub_100174EC0;
    v33 = 0;
    v21 = 0;
    v22 = &v21;
    v23 = 0x3032000000;
    v24 = sub_100174EB0;
    v25 = sub_100174EC0;
    v26 = (id)0xAAAAAAAAAAAAAAAALL;
    v26 = objc_alloc_init((Class)NSMutableArray);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100179398;
    v17[3] = &unk_1002E9680;
    v17[4] = *(_QWORD *)(a1 + 32);
    v14 = v13;
    v18 = v14;
    v19 = &v21;
    p_buf = &buf;
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", v17);
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v22[5], *(_QWORD *)(*((_QWORD *)&buf + 1) + 40), v15, v16);

    _Block_object_dispose(&v21, 8);
    _Block_object_dispose(&buf, 8);

  }
}

void sub_1001792AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1001792E0(uint64_t a1, void *a2)
{
  id v3;
  CKKSKey *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  CKKSKey *v9;

  v3 = a2;
  v4 = [CKKSKey alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contextID"));
  v9 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v4, "initWithCKRecord:contextID:", v3, v6);

  v7 = *(void **)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey uuid](v9, "uuid"));
  objc_msgSend(v7, "addKeyToCache:key:", v8, v9);

}

void sub_100179398(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  CKKSItem *v8;
  void *v9;
  void *v10;
  void *v11;
  CKKSItem *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  uint8_t buf[4];
  CKKSItem *v36;
  __int16 v37;
  id v38;

  v6 = a2;
  v7 = objc_autoreleasePoolPush();
  v8 = [CKKSItem alloc];
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "item"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contextID"));
  v12 = -[CKKSItem initWithCKRecord:contextID:](v8, "initWithCKRecord:contextID:", v9, v11);

  v13 = *(_QWORD *)(a1 + 40);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v34 = 0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSIncomingQueueOperation decryptCKKSItemToAttributes:keyCache:ckksOperationalDependencies:error:](CKKSIncomingQueueOperation, "decryptCKKSItemToAttributes:keyCache:ckksOperationalDependencies:error:", v12, v13, v14, &v34));
  v16 = v34;
  v17 = v34;

  if (v17)
  {
    v18 = sub_10000BDF4(CFSTR("ckks"), 0);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v36 = v12;
      v37 = 2112;
      v38 = v17;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "error decrypting pcs item record(%@): %@", buf, 0x16u);
    }

    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = 0;

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v16);
    *a4 = 1;
  }
  else
  {
    v31 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v30 = objc_alloc((Class)CKKSPCSIdentityQueryResult);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "service"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "PCSServiceID"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "service"));
    v33 = v7;
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "PCSPublicKey"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "base64EncodedStringWithOptions:", 0));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "service"));
    v26 = v15;
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "zoneID"));
    v28 = objc_msgSend(v30, "initWithServiceNumber:publicKey:zoneID:decryptedRecord:", v29, v24, v27, v26);
    objc_msgSend(v31, "addObject:", v28);

    v15 = v26;
    v7 = v33;

  }
  objc_autoreleasePoolPop(v7);

}

void sub_100179664(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  CKKSMemoryKeyCache *v12;
  CKKSMemoryKeyCache *v13;
  CKKSMemoryKeyCache *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  CKKSMemoryKeyCache *v18;
  uint64_t *v19;
  __int128 *p_buf;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  _QWORD v27[5];
  CKKSMemoryKeyCache *v28;
  __int128 buf;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = sub_10000BDF4(CFSTR("ckks"), 0);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "error getting current items: %@", (uint8_t *)&buf, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v12 = objc_alloc_init(CKKSMemoryKeyCache);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1001798F8;
    v27[3] = &unk_1002E9608;
    v27[4] = *(_QWORD *)(a1 + 32);
    v13 = v12;
    v28 = v13;
    objc_msgSend(v8, "enumerateObjectsUsingBlock:", v27);
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v30 = 0x3032000000;
    v31 = sub_100174EB0;
    v32 = sub_100174EC0;
    v33 = 0;
    v21 = 0;
    v22 = &v21;
    v23 = 0x3032000000;
    v24 = sub_100174EB0;
    v25 = sub_100174EC0;
    v26 = (id)0xAAAAAAAAAAAAAAAALL;
    v26 = objc_alloc_init((Class)NSMutableArray);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1001799B0;
    v17[3] = &unk_1002E9630;
    v17[4] = *(_QWORD *)(a1 + 32);
    v14 = v13;
    v18 = v14;
    v19 = &v21;
    p_buf = &buf;
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", v17);
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v22[5], *(_QWORD *)(*((_QWORD *)&buf + 1) + 40), v15, v16);

    _Block_object_dispose(&v21, 8);
    _Block_object_dispose(&buf, 8);

  }
}

void sub_1001798C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1001798F8(uint64_t a1, void *a2)
{
  id v3;
  CKKSKey *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  CKKSKey *v9;

  v3 = a2;
  v4 = [CKKSKey alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contextID"));
  v9 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v4, "initWithCKRecord:contextID:", v3, v6);

  v7 = *(void **)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSKey uuid](v9, "uuid"));
  objc_msgSend(v7, "addKeyToCache:key:", v8, v9);

}

void sub_1001799B0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  CKKSItem *v8;
  void *v9;
  void *v10;
  void *v11;
  CKKSItem *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  void *v34;
  unsigned __int8 v35;
  id v36;
  NSObject *v37;
  void *v38;
  CKKSItem *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  uint8_t buf[4];
  CKKSItem *v54;
  __int16 v55;
  id v56;

  v6 = a2;
  v7 = objc_autoreleasePoolPush();
  v8 = [CKKSItem alloc];
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "item"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contextID"));
  v12 = -[CKKSItem initWithCKRecord:contextID:](v8, "initWithCKRecord:contextID:", v9, v11);

  v13 = *(_QWORD *)(a1 + 40);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v52 = 0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSIncomingQueueOperation decryptCKKSItemToAttributes:keyCache:ckksOperationalDependencies:error:](CKKSIncomingQueueOperation, "decryptCKKSItemToAttributes:keyCache:ckksOperationalDependencies:error:", v12, v13, v14, &v52));
  v16 = v52;
  v17 = v52;

  if (v17)
  {
    v18 = sub_10000BDF4(CFSTR("ckks"), 0);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v54 = v12;
      v55 = 2112;
      v56 = v17;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "error decrypting item record(%@): %@", buf, 0x16u);
    }

    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = 0;

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v16);
    *a4 = 1;
  }
  else
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "itemPtr"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "itemPtrName"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "componentsSeparatedByString:", CFSTR("-")));

    v50 = v24;
    v51 = v7;
    if (objc_msgSend(v24, "count") == (id)2)
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectAtIndexedSubscript:", 0));
      v26 = v15;
      v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectAtIndexedSubscript:", 1));
      v48 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v28 = objc_alloc((Class)CKKSCurrentItemQueryResult);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "itemPtr"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "zoneID"));
      v49 = (void *)v27;
      v31 = v27;
      v15 = v26;
      v32 = objc_msgSend(v28, "initWithIdentifier:accessGroup:zoneID:decryptedRecord:", v31, v25, v30, v26);
      objc_msgSend(v48, "addObject:", v32);

      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "itemPtr"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "zoneID"));
      if (objc_msgSend(v34, "isEqualToString:", kSecAttrViewHintManatee))
      {
        v35 = objc_msgSend(*(id *)(a1 + 32), "firstManateeKeyFetched");

        if ((v35 & 1) == 0)
        {
          objc_msgSend(*(id *)(a1 + 32), "setFirstManateeKeyFetched:", 1);
          objc_msgSend(*(id *)(a1 + 32), "sendMetricForFirstManateeAccess");
        }
      }
      else
      {

      }
    }
    else
    {
      v36 = sub_10000BDF4(CFSTR("ckks"), 0);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "itemPtr"));
        v39 = (CKKSItem *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "itemPtrName"));
        *(_DWORD *)buf = 138412290;
        v54 = v39;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "unexpected item pointer name format: %@", buf, 0xCu);

      }
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v41 = *(void **)(v40 + 40);
      *(_QWORD *)(v40 + 40) = 0;

      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "itemPtr"));
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "itemPtrName"));
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Item pointer name %@ does not match expected format"), v43));
      v45 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 20, v44));
      v46 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v47 = *(void **)(v46 + 40);
      *(_QWORD *)(v46 + 40) = v45;

      *a4 = 1;
    }

    v7 = v51;
  }

  objc_autoreleasePoolPop(v7);
}

void sub_100179E2C(id *a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void (**v7)(id, _QWORD, id);
  id WeakRetained;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v18;
  char v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "error"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "zoneName"));
    v4 = sub_10000BDF4(CFSTR("ckkscurrent"), v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "error"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Rejecting current item pointer get since fetch failed: %@", (uint8_t *)&buf, 0xCu);

    }
    v7 = (void (**)(id, _QWORD, id))a1[10];
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "error"));
    v7[2](v7, 0, WeakRetained);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained(a1 + 11);
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v18 = 0x2020000000;
    v19 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10017A088;
    v9[3] = &unk_1002E95E0;
    v10 = a1[6];
    v11 = a1[7];
    v12 = WeakRetained;
    v13 = a1[8];
    v14 = a1[9];
    v15 = a1[10];
    p_buf = &buf;
    objc_msgSend(WeakRetained, "dispatchSyncWithReadOnlySQLTransaction:", v9);
    if (*(_BYTE *)(*((_QWORD *)&buf + 1) + 24)
      && (objc_msgSend(WeakRetained, "firstManateeKeyFetched") & 1) == 0
      && objc_msgSend(a1[8], "isEqualToString:", kSecAttrViewHintManatee))
    {
      objc_msgSend(WeakRetained, "setFirstManateeKeyFetched:", 1);
      objc_msgSend(WeakRetained, "sendMetricForFirstManateeAccess");
    }

    _Block_object_dispose(&buf, 8);
  }

}

void sub_10017A068(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10017A088(uint64_t a1)
{
  void *v2;
  const void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  CKKSCurrentItemData *v20;
  void *v21;
  CKKSCurrentItemData *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  uint64_t v43;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  if (qword_1003412C8 != -1)
    dispatch_once(&qword_1003412C8, &stru_1002E7860);
  if (byte_1003412C0)
  {
    v3 = sub_10000EF14("ckkspersona");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "personaAdapter"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentThreadPersonaUniqueString"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "operationDependencies"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "activeAccount"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "personaUniqueString"));
      v10 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138413058;
      v37 = v6;
      v38 = 2112;
      v39 = v9;
      v40 = 2112;
      v41 = v2;
      v42 = 2112;
      v43 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "getCurrentItemForAccessGroup: thread persona [%@/%@] this currentIdentifier [%@] viewhint [%@]", buf, 0x2Au);

    }
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "operationDependencies"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "contextID"));
  v13 = *(_QWORD *)(a1 + 64);
  v35 = 0;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentItemPointer fromDatabase:contextID:state:zoneID:error:](CKKSCurrentItemPointer, "fromDatabase:contextID:state:zoneID:error:", v2, v12, CFSTR("local"), v13, &v35));
  v15 = v35;

  if (!v14 || v15)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "domain"));
    if (objc_msgSend(v25, "isEqualToString:", CFSTR("securityd")))
    {
      v26 = objc_msgSend(v15, "code");

      if (v26 == (id)-25300)
      {
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "zoneName"));
        v28 = sub_10000BDF4(CFSTR("ckkscurrent"), v27);
        v29 = objc_claimAutoreleasedReturnValue(v28);

        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v37 = v2;
          _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "No current item pointer for %@", buf, 0xCu);
        }

        v30 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("No current item pointer found for %@"), v2));
        v31 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("securityd"), -25300, v30));

        v15 = (id)v31;
LABEL_21:

        (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
        goto LABEL_26;
      }
    }
    else
    {

    }
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "zoneName"));
    v33 = sub_10000BDF4(CFSTR("ckkscurrent"), v32);
    v30 = objc_claimAutoreleasedReturnValue(v33);

    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v37 = v2;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "No current item pointer for %@", buf, 0xCu);
    }
    goto LABEL_21;
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "currentItemUUID"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "zoneName"));
  v18 = sub_10000BDF4(CFSTR("ckkscurrent"), v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);

  if (v16)
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v37 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Retrieved current item pointer: %@", buf, 0xCu);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
    v20 = [CKKSCurrentItemData alloc];
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "currentItemUUID"));
    v22 = -[CKKSCurrentItemData initWithUUID:](v20, "initWithUUID:", v21);

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "storedCKRecord"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "modificationDate"));
    -[CKKSCurrentItemData setModificationDate:](v22, "setModificationDate:", v24);

    (*(void (**)(_QWORD, CKKSCurrentItemData *, _QWORD))(*(_QWORD *)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), v22, 0);
  }
  else
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v37 = v14;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Current item pointer is empty %@", buf, 0xCu);
    }

    v34 = *(_QWORD *)(a1 + 72);
    v22 = (CKKSCurrentItemData *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), -67671, CFSTR("Current item pointer is empty")));
    (*(void (**)(uint64_t, _QWORD, CKKSCurrentItemData *))(v34 + 16))(v34, 0, v22);
  }

  v15 = 0;
LABEL_26:

}

void sub_10017A5D4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
  v5 = sub_10000BDF4(CFSTR("ckkscurrent"), v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);

  if (v2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      v10 = 138412290;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed deleting current item pointers: %@", (uint8_t *)&v10, 0xCu);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Finished deleting current item pointers", (uint8_t *)&v10, 2u);
  }

  v8 = *(_QWORD *)(a1 + 48);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

}

void sub_10017A744(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
  v5 = sub_10000BDF4(CFSTR("ckkscurrent"), v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);

  if (v2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPointerIdentifier"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      v11 = 138412546;
      v12 = v7;
      v13 = 2112;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed setting a current item pointer for %@ with %@", (uint8_t *)&v11, 0x16u);

LABEL_6:
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentPointerIdentifier"));
    v11 = 138412290;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Finished setting a current item pointer for %@", (uint8_t *)&v11, 0xCu);
    goto LABEL_6;
  }

  v9 = *(_QWORD *)(a1 + 48);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);

}

void sub_10017A8F0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "syncingPolicy"));

  if (v3)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    v4 = sub_10000BDF4(CFSTR("ckks"), 0);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 48);
      v7 = 138477827;
      v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "No policy configured. Skipping item: %{private}@", (uint8_t *)&v7, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "setItemModificationsBeforePolicyLoaded:", 1);
  }
}

uint64_t sub_10017A9F0(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  const void *v7;
  const void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  CKKSMemoryKeyCache *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  CKKSMemoryKeyCache *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  CKKSMemoryKeyCache *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned __int8 v29;
  void *v30;
  void *v31;
  void (**v32)(_QWORD, _QWORD, _QWORD);
  void *v33;
  uint64_t v34;
  const __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  void *v43;
  NSObject *v44;
  _BOOL4 v45;
  NSObject *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  void *v50;
  signed int v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  NSObject *v68;
  void *v70;
  void *v71;
  id v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;
  NSObject *v85;
  void *v86;
  void *v87;
  id v88;
  uint64_t v89;
  void *i;
  void *v91;
  id v92;
  void *v93;
  void *v94;
  id v95;
  NSObject *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  id v103;
  void *v104;
  void *v105;
  id v106;
  NSObject *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  id v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  id v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  id v123;
  void *v124;
  void *v125;
  void *v126;
  id v127;
  NSObject *v128;
  CKKSMemoryKeyCache *v129;
  id v130[2];
  id v131[2];
  id v132[2];
  NSObject *v133;
  id v135;
  id v136;
  id v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  id v142;
  id obj;
  id v144;
  _QWORD v145[4];
  int8x16_t v146;
  CKKSMemoryKeyCache *v147;
  uint8_t *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD v151[4];
  int8x16_t v152;
  CKKSMemoryKeyCache *v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[4];
  int8x16_t v158;
  CKKSMemoryKeyCache *v159;
  uint8_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint8_t buf[8];
  uint8_t *v164;
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t);
  void (*v167)(uint64_t);
  id v168;
  uint8_t v169[4];
  void *v170;
  __int16 v171;
  void *v172;
  __int16 v173;
  id v174;
  _BYTE v175[128];
  _QWORD v176[2];
  _QWORD v177[2];
  _QWORD v178[2];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notifyViewChangedScheduler"));
  objc_msgSend(v1, "trigger");

  if (objc_msgSend(*(id *)(a1 + 40), "accountStatus") != (id)3)
  {
    v129 = objc_alloc_init(CKKSMemoryKeyCache);
    *(_QWORD *)buf = 0;
    v164 = buf;
    v165 = 0x3032000000;
    v166 = sub_100174EB0;
    v167 = sub_100174EC0;
    v168 = 0;
    if (*(_BYTE *)(a1 + 96))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "personaAdapter"));
      v157[0] = _NSConcreteStackBlock;
      v157[1] = 3221225472;
      v157[2] = sub_10017BAA0;
      v157[3] = &unk_1002E9568;
      v12 = *(_QWORD *)(a1 + 64);
      v160 = buf;
      v162 = v12;
      v13 = v157;
      *(_OWORD *)v130 = *(_OWORD *)(a1 + 32);
      v14 = v130[0];
      v158 = vextq_s8(*(int8x16_t *)v130, *(int8x16_t *)v130, 8uLL);
      v15 = v129;
      v16 = *(_QWORD *)(a1 + 56);
      v159 = v15;
      v161 = v16;
      objc_msgSend(v11, "performBlockWithPersonaIdentifier:block:", 0, v157);
    }
    else if (*(_BYTE *)(a1 + 97))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "personaAdapter"));
      v151[0] = _NSConcreteStackBlock;
      v151[1] = 3221225472;
      v151[2] = sub_10017BB7C;
      v151[3] = &unk_1002E9568;
      v17 = *(_QWORD *)(a1 + 72);
      v154 = buf;
      v156 = v17;
      v13 = v151;
      *(_OWORD *)v131 = *(_OWORD *)(a1 + 32);
      v18 = v131[0];
      v152 = vextq_s8(*(int8x16_t *)v131, *(int8x16_t *)v131, 8uLL);
      v19 = v129;
      v20 = *(_QWORD *)(a1 + 56);
      v153 = v19;
      v155 = v20;
      objc_msgSend(v11, "performBlockWithPersonaIdentifier:block:", 0, v151);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 98))
      {
        v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
        v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "zoneName"));
        v112 = sub_10000BDF4(CFSTR("ckks"), v111);
        v68 = objc_claimAutoreleasedReturnValue(v112);

        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          v113 = *(void **)(a1 + 64);
          v114 = *(void **)(a1 + 72);
          *(_DWORD *)v169 = 138478083;
          v170 = v113;
          v171 = 2113;
          v172 = v114;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "processKeychainEventItemAdded given garbage: %{private}@ %{private}@", v169, 0x16u);
        }
        goto LABEL_43;
      }
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "personaAdapter"));
      v145[0] = _NSConcreteStackBlock;
      v145[1] = 3221225472;
      v145[2] = sub_10017BC58;
      v145[3] = &unk_1002E9568;
      v21 = *(_QWORD *)(a1 + 64);
      v148 = buf;
      v150 = v21;
      v13 = v145;
      *(_OWORD *)v132 = *(_OWORD *)(a1 + 32);
      v22 = v132[0];
      v146 = vextq_s8(*(int8x16_t *)v132, *(int8x16_t *)v132, 8uLL);
      v23 = v129;
      v24 = *(_QWORD *)(a1 + 56);
      v147 = v23;
      v149 = v24;
      objc_msgSend(v11, "performBlockWithPersonaIdentifier:block:", 0, v145);
    }

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationDependencies"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "syncingPolicy"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "zoneName"));
    v29 = objc_msgSend(v26, "isSyncingEnabledForView:", v28);

    if ((v29 & 1) == 0)
    {
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](CKKSViewManager, "manager"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v164 + 5), "uuid"));
      v32 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "claimCallbackForUUID:", v31));

      if (v32)
      {
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 55, CFSTR("View is paused; item is not expected to sync")));
        ((void (**)(_QWORD, _QWORD, void *))v32)[2](v32, 0, v33);

      }
    }
    v34 = a1;
    if (*(_QWORD *)(a1 + 80))
      v35 = CFSTR("keychain-api-use");
    else
      v35 = CFSTR("sos-incoming-item");
    v36 = objc_claimAutoreleasedReturnValue(+[CKOperationGroup CKKSGroupWithName:](CKOperationGroup, "CKKSGroupWithName:", v35));
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v128 = v36;
    if (*(_QWORD *)(v37 + 40))
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "zoneName"));
      v40 = sub_10000BDF4(CFSTR("ckks"), v39);
      v41 = objc_claimAutoreleasedReturnValue(v40);

      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        v42 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        *(_DWORD *)v169 = 138412290;
        v170 = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Couldn't create outgoing queue entry: %@", v169, 0xCu);
      }

      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "stateMachine"));
      objc_msgSend(v43, "_onqueueHandleFlag:", CFSTR("dropped_items"));

      v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                             + 40), "domain"));
      if (-[NSObject isEqualToString:](v44, "isEqualToString:", CFSTR("CKKSErrorDomain")))
      {
        v45 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "code") == (id)-25300;

        if (!v45)
        {
LABEL_42:
          v68 = v128;
LABEL_43:

          _Block_object_dispose(buf, 8);
          goto LABEL_44;
        }
        v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "stateMachine"));
        -[NSObject _onqueueHandleFlag:](v46, "_onqueueHandleFlag:", CFSTR("key_process_requested"));
        v47 = v46;
LABEL_41:

        goto LABEL_42;
      }
LABEL_40:
      v47 = v44;
      goto LABEL_41;
    }
    v48 = (void *)*((_QWORD *)v164 + 5);
    if (!v48)
    {
      v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "zoneName"));
      v59 = sub_10000BDF4(CFSTR("ckks"), v58);
      v44 = objc_claimAutoreleasedReturnValue(v59);

      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        goto LABEL_40;
      v60 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)v169 = 138412290;
      v170 = v60;
      v61 = "Decided that no operation needs to occur for %@";
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, v61, v169, 0xCu);
      goto LABEL_40;
    }
    v49 = *(void **)(a1 + 48);
    if (v49)
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      v144 = 0;
      v51 = objc_msgSend(v49, "judge:at:limitTime:", v48, v50, &v144);
      v52 = v144;

      if (v52)
      {
        objc_msgSend(*((id *)v164 + 5), "setWaitUntil:", v52);
        v177[0] = CFSTR("ratelimit");
        v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v51));
        v177[1] = CFSTR("accessgroup");
        v178[0] = v53;
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v164 + 5), "accessgroup"));
        v178[1] = v54;
        v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v178, v177, 2));
        sub_10001CD10(CFSTR("CKKSSyncing"), v55);

      }
      v48 = (void *)*((_QWORD *)v164 + 5);
      v34 = a1;
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v56 = *(void **)(v37 + 40);
    }
    else
    {
      v56 = 0;
    }
    v62 = *(_QWORD *)(v34 + 88);
    obj = v56;
    objc_msgSend(v48, "saveToDatabaseWithConnection:error:", v62, &obj, v128);
    objc_storeStrong((id *)(v37 + 40), obj);
    v63 = *(void **)(a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "zoneID"));
      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "zoneName"));
      v66 = sub_10000BDF4(CFSTR("ckks"), v65);
      v44 = objc_claimAutoreleasedReturnValue(v66);

      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        goto LABEL_40;
      v67 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)v169 = 138412290;
      v170 = v67;
      v61 = "Couldn't save outgoing queue entry to database: %@";
      goto LABEL_39;
    }
    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "zoneID"));
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "zoneName"));
    v72 = sub_10000BDF4(CFSTR("ckks"), v71);
    v73 = objc_claimAutoreleasedReturnValue(v72);

    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      v74 = (void *)*((_QWORD *)v164 + 5);
      *(_DWORD *)v169 = 138412290;
      v170 = v74;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Saved %@ to outgoing queue", v169, 0xCu);
    }

    v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v164 + 5), "uuid"));
    v176[0] = CFSTR("reencrypt");
    v176[1] = CFSTR("error");
    v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v176, 2));
    v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationDependencies"));
    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "contextID"));
    v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v80 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v142 = *(id *)(v80 + 40);
    v81 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSOutgoingQueueEntry allWithUUID:states:contextID:zoneID:error:](CKKSOutgoingQueueEntry, "allWithUUID:states:contextID:zoneID:error:", v75, v76, v78, v79, &v142));
    objc_storeStrong((id *)(v80 + 40), v142);

    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
      v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "zoneName"));
      v84 = sub_10000BDF4(CFSTR("ckks"), v83);
      v85 = objc_claimAutoreleasedReturnValue(v84);

      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        v86 = (void *)*((_QWORD *)v164 + 5);
        v87 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        *(_DWORD *)v169 = 138412546;
        v170 = v86;
        v171 = 2112;
        v172 = v87;
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "Couldn't load OQE siblings for %@: %@", v169, 0x16u);
      }

    }
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v133 = v81;
    v88 = -[NSObject countByEnumeratingWithState:objects:count:](v133, "countByEnumeratingWithState:objects:count:", &v138, v175, 16);
    if (v88)
    {
      v89 = *(_QWORD *)v139;
      do
      {
        for (i = 0; i != v88; i = (char *)i + 1)
        {
          if (*(_QWORD *)v139 != v89)
            objc_enumerationMutation(v133);
          v91 = *(void **)(*((_QWORD *)&v138 + 1) + 8 * (_QWORD)i);
          v137 = 0;
          objc_msgSend(v91, "deleteFromDatabase:", &v137);
          v92 = v137;
          if (v92)
          {
            v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
            v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "zoneName"));
            v95 = sub_10000BDF4(CFSTR("ckks"), v94);
            v96 = objc_claimAutoreleasedReturnValue(v95);

            if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
            {
              v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v164 + 5), "uuid"));
              *(_DWORD *)v169 = 138412802;
              v170 = v91;
              v171 = 2112;
              v172 = v97;
              v173 = 2112;
              v174 = v92;
              _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "Couldn't delete OQE sibling(%@) for %@: %@", v169, 0x20u);

            }
          }

        }
        v88 = -[NSObject countByEnumeratingWithState:objects:count:](v133, "countByEnumeratingWithState:objects:count:", &v138, v175, 16);
      }
      while (v88);
    }

    v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v164 + 5), "uuid"));
    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "operationDependencies"));
    v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "contextID"));
    v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v136 = 0;
    v102 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSIncomingQueueEntry tryFromDatabase:contextID:zoneID:error:](CKKSIncomingQueueEntry, "tryFromDatabase:contextID:zoneID:error:", v98, v100, v101, &v136));
    v103 = v136;

    if (v103)
    {
      v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
      v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "zoneName"));
      v106 = sub_10000BDF4(CFSTR("ckks"), v105);
      v107 = objc_claimAutoreleasedReturnValue(v106);

      if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
      {
        v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v164 + 5), "uuid"));
        v109 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        *(_DWORD *)v169 = 138412546;
        v170 = v108;
        v171 = 2112;
        v172 = v109;
        _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "Couldn't find IQE matching %@: %@", v169, 0x16u);

      }
    }
    else
    {
      if (!v102)
      {
        v103 = 0;
LABEL_76:
        v125 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](CKKSViewManager, "manager"));
        v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v164 + 5), "uuid"));
        v127 = objc_msgSend(v125, "peekCallbackForUUID:", v126);

        objc_msgSend(*(id *)(a1 + 40), "_onqueueProcessOutgoingQueue:priorityRush:", v128, v127);
        v47 = v133;
        goto LABEL_41;
      }
      v135 = 0;
      objc_msgSend(v102, "deleteFromDatabase:", &v135);
      v103 = v135;
      v115 = *(void **)(a1 + 32);
      if (v103)
      {
        v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "zoneID"));
        v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v116, "zoneName"));
        v118 = sub_10000BDF4(CFSTR("ckks"), v117);
        v107 = objc_claimAutoreleasedReturnValue(v118);

        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
        {
          v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v164 + 5), "uuid"));
          v120 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
          *(_DWORD *)v169 = 138412546;
          v170 = v119;
          v171 = 2112;
          v172 = v120;
          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "Couldn't delete IQE matching %@: %@", v169, 0x16u);

        }
      }
      else
      {
        v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "zoneID"));
        v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "zoneName"));
        v123 = sub_10000BDF4(CFSTR("ckks"), v122);
        v107 = objc_claimAutoreleasedReturnValue(v123);

        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
        {
          v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v164 + 5), "uuid"));
          *(_DWORD *)v169 = 138412290;
          v170 = v124;
          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "Deleted IQE matching changed item %@", v169, 0xCu);

        }
        v103 = 0;
      }
    }

    goto LABEL_76;
  }
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "stateMachine"));
  objc_msgSend(v2, "_onqueueHandleFlag:", CFSTR("dropped_items"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
  v5 = sub_10000BDF4(CFSTR("ckks"), v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dropping sync item modification due to CK account state; will scan to find changes later",
      buf,
      2u);
  }

  v7 = *(const void **)(a1 + 64);
  if (!v7)
    v7 = *(const void **)(a1 + 72);
  v8 = sub_100019204(v7, (uint64_t)&off_1002E9538, 0);
  v129 = (CKKSMemoryKeyCache *)objc_claimAutoreleasedReturnValue(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](CKKSViewManager, "manager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "claimCallbackForUUID:", v129));

  if (v10)
    +[CKKSViewManager callSyncCallbackWithErrorNoAccount:](CKKSViewManager, "callSyncCallbackWithErrorNoAccount:", v10);

LABEL_44:
  return 1;
}

void sub_10017BA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

void sub_10017BAA0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id obj;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contextID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  obj = *(id *)(v7 + 40);
  v8 = objc_claimAutoreleasedReturnValue(+[CKKSOutgoingQueueEntry withItem:action:contextID:zoneID:keyCache:error:](CKKSOutgoingQueueEntry, "withItem:action:contextID:zoneID:keyCache:error:", v2, CFSTR("add"), v4, v5, v6, &obj));
  objc_storeStrong((id *)(v7 + 40), obj);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

}

void sub_10017BB7C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id obj;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contextID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  obj = *(id *)(v7 + 40);
  v8 = objc_claimAutoreleasedReturnValue(+[CKKSOutgoingQueueEntry withItem:action:contextID:zoneID:keyCache:error:](CKKSOutgoingQueueEntry, "withItem:action:contextID:zoneID:keyCache:error:", v2, CFSTR("delete"), v4, v5, v6, &obj));
  objc_storeStrong((id *)(v7 + 40), obj);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

}

void sub_10017BC58(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id obj;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contextID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  obj = *(id *)(v7 + 40);
  v8 = objc_claimAutoreleasedReturnValue(+[CKKSOutgoingQueueEntry withItem:action:contextID:zoneID:keyCache:error:](CKKSOutgoingQueueEntry, "withItem:action:contextID:zoneID:keyCache:error:", v2, CFSTR("modify"), v4, v5, v6, &obj));
  objc_storeStrong((id *)(v7 + 40), obj);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

}

void sub_10017BD34(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  __CFString **v15;
  _QWORD v16[5];
  id v17;
  id v18;
  uint8_t buf[4];
  id v20;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentTrustStates"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "databaseProvider"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10017BF18;
  v16[3] = &unk_1002E94C8;
  v16[4] = WeakRetained;
  v10 = v6;
  v17 = v10;
  v11 = v7;
  v18 = v11;
  objc_msgSend(v9, "dispatchSyncWithReadOnlySQLTransaction:", v16);

  if (objc_msgSend(v11, "count"))
  {
    v12 = sub_10000BDF4(CFSTR("ckkskey"), 0);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Resetting zones due to missing TLKs: %@", buf, 0xCu);
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
    objc_msgSend(v14, "operateOnSelectViews:", v11);

    v15 = off_1002E9488;
  }
  else
  {
    v15 = (__CFString **)(a1 + 32);
  }
  objc_msgSend(v3, "setNextState:", *v15);

}

void sub_10017BF18(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  const __CFString *v19;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  id v29;
  NSObject *v30;
  id v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  _BYTE v39[128];

  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "activeManagedViews"));

  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v34;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v34 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "viewKeyHierarchyState"));
        v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("tlkmissing"));

        if (v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneID"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "contextID"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeySet loadForZone:contextID:](CKKSCurrentKeySet, "loadForZone:contextID:", v10, v11));

          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "error"));
          if (v13)
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneID"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneName"));
            v16 = sub_10000BDF4(CFSTR("ckkskey"), v15);
            v17 = objc_claimAutoreleasedReturnValue(v16);

            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "error"));
              *(_DWORD *)buf = 138412290;
              v38 = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Unable to load keyset: %@", buf, 0xCu);

            }
            v19 = CFSTR("error");
          }
          else
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "currentTLKPointer"));
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "currentKeyUUID"));

            if (v21)
            {
              if (objc_msgSend(*(id *)(a1 + 32), "trustStatus") == (id)1)
              {
                v22 = objc_msgSend(*(id *)(a1 + 32), "_onqueueOtherDevicesReportHavingTLKs:trustStates:", v12, *(_QWORD *)(a1 + 40));
                v19 = CFSTR("waitfortlk");
                if ((v22 & 1) == 0)
                {
                  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneID", CFSTR("waitfortlk")));
                  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "zoneName"));
                  v25 = sub_10000BDF4(CFSTR("ckkskey"), v24);
                  v26 = objc_claimAutoreleasedReturnValue(v25);

                  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "No other devices claim to have the TLK. Resetting zone...", buf, 2u);
                  }

                  objc_msgSend(*(id *)(a1 + 48), "addObject:", v7);
                  v19 = CFSTR("resetzone");
                }
              }
              else
              {
                v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneID"));
                v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "zoneName"));
                v29 = sub_10000BDF4(CFSTR("ckkskey"), v28);
                v30 = objc_claimAutoreleasedReturnValue(v29);

                if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "TLK is missing, but no trust is present.", buf, 2u);
                }

                v19 = CFSTR("waitfortrust");
              }
            }
            else
            {
              v19 = CFSTR("waitfortlkcreation");
            }
          }
          objc_msgSend(v7, "setViewKeyHierarchyState:", v19);

        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v31 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
      v4 = v31;
    }
    while (v31);
  }

}

void sub_10017C2E4(uint64_t a1, void *a2)
{
  id WeakRetained;
  CKKSCondition *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  uint64_t v16;
  id v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v17 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (objc_msgSend(WeakRetained, "trustStatus") == (id)1)
  {
    objc_msgSend(WeakRetained, "setTrustStatus:", 0);
    v3 = objc_alloc_init(CKKSCondition);
    objc_msgSend(WeakRetained, "setTrustStatusKnown:", v3);

  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies", a1, v17, 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "views"));

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "viewKeyHierarchyState"));
        v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("ready"));

        if (v12)
          objc_msgSend(v10, "setViewKeyHierarchyState:", CFSTR("waitfortrust"));
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v7);
  }

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "priorityViewsProcessed"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 52, CFSTR("Trust not present")));
  objc_msgSend(v13, "completeWithErrorIfPending:", v14);

  objc_msgSend(v18, "setNextState:", *(_QWORD *)(v16 + 32));
}

void sub_10017C4E4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  unsigned int v13;
  const void *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  id v20;
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint8_t buf[4];
  id v26;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10017C738;
  v22[3] = &unk_1002E94C8;
  v22[4] = WeakRetained;
  v5 = v3;
  v23 = v5;
  v24 = *(id *)(a1 + 32);
  objc_msgSend(WeakRetained, "dispatchSyncWithReadOnlySQLTransaction:", v22);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
  if (objc_msgSend(v6, "sendMetric"))
  {

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[OTManager manager](OTManager, "manager"));
    v8 = objc_alloc((Class)OTControlArguments);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "activeAccount"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "altDSID"));
    v12 = objc_msgSend(v8, "initWithAltDSID:", v11);
    v21 = 0;
    v13 = objc_msgSend(v7, "persistSendingMetricsPermitted:sendingMetricsPermitted:error:", v12, 0, &v21);
    v6 = v21;

    if (!v13 || v6)
    {
      v20 = sub_10000BDF4(CFSTR("ckks"), 0);
      v15 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v26 = v6;
        v16 = "Error persisting sendingMetricsPermitted value: %@";
        v17 = v15;
        v18 = OS_LOG_TYPE_ERROR;
        v19 = 12;
        goto LABEL_8;
      }
    }
    else
    {
      v14 = sub_10000EF14("ckks");
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v16 = "Successfully persisted state to disable metrics";
        v17 = v15;
        v18 = OS_LOG_TYPE_DEFAULT;
        v19 = 2;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, buf, v19);
      }
    }

  }
}

void sub_10017C738(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  id v15;
  id v16;
  void **p_cache;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  void *j;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  __CFString *v38;
  BOOL v39;
  void *v40;
  void *v41;
  id v42;
  OctagonPendingFlag *v43;
  void *v44;
  void *v45;
  unsigned int v46;
  void *v47;
  void *v48;
  id v49;
  NSObject *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  NSObject *v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  NSObject *v67;
  void *v68;
  void *v69;
  id v70;
  NSObject *v71;
  void *v72;
  AAFAnalyticsEventSecurity *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  AAFAnalyticsEventSecurity *v78;
  id v79;
  uint64_t v80;
  void **v81;
  void *k;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  void *v89;
  void *v90;
  id v91;
  NSObject *v92;
  void *v93;
  unsigned __int8 v94;
  void **v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  unsigned __int8 v101;
  void *v102;
  void *v103;
  id v104;
  NSObject *v105;
  void *v106;
  void *v107;
  id v108;
  uint64_t v109;
  id v110;
  void *v111;
  void *v112;
  void *v113;
  id v114;
  id v115;
  void *v116;
  void *m;
  void *v118;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  void *v123;
  __CFString *v124;
  uint64_t v125;
  void *v126;
  void *v127;
  unsigned int v128;
  void *v129;
  id v130;
  uint64_t v131;
  __CFString *v132;
  void *v133;
  AAFAnalyticsEventSecurity *v134;
  void *v135;
  id v136;
  NSObject *v137;
  id v138;
  id v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  AAFAnalyticsEventSecurity *v147;
  uint64_t v148;
  void *v149;
  void *v150;
  id v151;
  void *v152;
  id v153;
  uint64_t v154;
  __CFString *v155;
  void *v156;
  void *v157;
  id v158;
  NSObject *v159;
  void *v160;
  __CFString **v161;
  uint64_t v162;
  void *v163;
  unsigned int v164;
  void *v165;
  void *v166;
  __CFString **v167;
  void *v168;
  void *v169;
  id v170;
  NSObject *v171;
  void *v172;
  unsigned int v173;
  const __CFString *v174;
  void *v175;
  void *v176;
  id v177;
  NSObject *v178;
  id v179;
  NSObject *v180;
  id v181;
  id v182;
  id v183;
  uint64_t v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  uint64_t v190;
  id v191;
  void *v192;
  void *v193;
  id v194;
  NSObject *v195;
  OctagonPendingFlag *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  id v201;
  id v202;
  void *v203;
  void *v204;
  int64_t v205;
  void *n;
  void *v207;
  void *v208;
  unsigned __int8 v209;
  void *v210;
  void *v211;
  id v212;
  void *v213;
  void *v214;
  id v215;
  NSObject *v216;
  void *v217;
  id v218;
  id v219;
  uint64_t v220;
  void *ii;
  void *v222;
  void *v223;
  void *v224;
  int64_t v225;
  uint64_t v226;
  unint64_t v227;
  BOOL v228;
  void *v229;
  void *v230;
  void *v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  void *v235;
  void *v236;
  uint64_t v237;
  unint64_t v238;
  void *v239;
  AAFAnalyticsEventSecurity *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  id v248;
  AAFAnalyticsEventSecurity *v249;
  __CFString *v250;
  uint64_t v251;
  __CFString *v252;
  id v253;
  id v254;
  void *v255;
  uint64_t v256;
  void *v257;
  id v258;
  void *v259;
  void *v260;
  void *v261;
  uint64_t v262;
  id v263;
  id v264;
  id v265;
  void *obj;
  id obja;
  uint64_t objb;
  id objc;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  id v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  id v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  id v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  id v298;
  id v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  id v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  _BYTE v313[128];
  _BYTE v314[128];
  _BYTE v315[128];
  _BYTE v316[128];
  _BYTE v317[128];
  _BYTE v318[128];
  _BYTE v319[128];
  uint8_t v320[128];
  uint8_t buf[4];
  id v322;
  __int16 v323;
  const __CFString *v324;
  _BYTE v325[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v261 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "readyAndSyncingViews"));

  v311 = 0u;
  v312 = 0u;
  v309 = 0u;
  v310 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "views"));

  obj = v4;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v309, v325, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v310;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v310 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v309 + 1) + 8 * (_QWORD)i);
        v10 = v1;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "contextID"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneName"));
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry contextID:zoneName:](CKKSZoneStateEntry, "contextID:zoneName:", v12, v13));

        if (!-[__CFString ckzonecreated](v14, "ckzonecreated")
          || (-[__CFString ckzonesubscribed](v14, "ckzonesubscribed") & 1) == 0)
        {
          v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneID"));
          v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "zoneName"));
          v70 = sub_10000BDF4(CFSTR("ckkszone"), v69);
          v71 = objc_claimAutoreleasedReturnValue(v70);

          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            v322 = v9;
            v323 = 2112;
            v324 = v14;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Zone does not yet exist: %@ %@", buf, 0x16u);
          }

          objc_msgSend(*(id *)(v10 + 40), "setNextState:", CFSTR("initializing"));
          goto LABEL_54;
        }

        v1 = v10;
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v309, v325, 16);
    }
    while (v6);
  }

  v307 = 0u;
  v308 = 0u;
  v305 = 0u;
  v306 = 0u;
  v15 = v261;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v305, v320, 16);
  v270 = v1;
  if (v16)
  {
    p_cache = OTAccountsActualAdapter.cache;
    v18 = *(_QWORD *)v306;
    obj = v15;
    v251 = *(_QWORD *)v306;
    do
    {
      v19 = 0;
      v253 = v16;
      do
      {
        if (*(_QWORD *)v306 != v18)
          objc_enumerationMutation(v15);
        v256 = v19;
        v20 = *(void **)(*((_QWORD *)&v305 + 1) + 8 * v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "contextID"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneID"));
        v304 = 0;
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(p_cache + 333, "countNewEntriesByKeyWithContextID:zoneID:error:", v22, v23, &v304));
        v258 = v304;

        if (objc_msgSend(v24, "count"))
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneID"));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "zoneName"));
          v27 = sub_10000BDF4(CFSTR("ckksincoming"), v26);
          v28 = objc_claimAutoreleasedReturnValue(v27);

          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v322 = v24;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Incoming Queue item counts: %@", buf, 0xCu);
          }

        }
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        v29 = v24;
        v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v300, v319, 16);
        if (v30)
        {
          v31 = v30;
          v32 = *(_QWORD *)v301;
          v263 = v29;
          do
          {
            for (j = 0; j != v31; j = (char *)j + 1)
            {
              if (*(_QWORD *)v301 != v32)
                objc_enumerationMutation(v263);
              v34 = *(void **)(*((_QWORD *)&v300 + 1) + 8 * (_QWORD)j);
              v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "contextID"));
              v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneID"));
              v299 = 0;
              v37 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSKey fromDatabase:contextID:zoneID:error:](CKKSKey, "fromDatabase:contextID:zoneID:error:", v34, v35, v36, &v299));
              v38 = (__CFString *)v299;

              if (v37)
                v39 = v38 == 0;
              else
                v39 = 0;
              if (v39)
              {
                v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "keyclass"));
                if ((objc_msgSend(v44, "isEqualToString:", CFSTR("classA")) & 1) == 0)
                {

LABEL_52:
                  objc_msgSend(*(id *)(v270 + 40), "setNextState:", CFSTR("process_incoming_queue"));

                  v29 = v263;
                  v55 = v263;
                  v72 = v258;
LABEL_53:

LABEL_54:
                  v63 = obj;
                  goto LABEL_55;
                }
                v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v270 + 32), "lockStateTracker"));
                v46 = objc_msgSend(v45, "isLocked");

                if (!v46)
                  goto LABEL_52;
                v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneID"));
                v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "zoneName"));
                v49 = sub_10000BDF4(CFSTR("ckksincoming"), v48);
                v50 = objc_claimAutoreleasedReturnValue(v49);

                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Have pending classA items for view, but device is locked", buf, 2u);
                }

                v43 = -[OctagonPendingFlag initWithFlag:conditions:]([OctagonPendingFlag alloc], "initWithFlag:conditions:", CFSTR("check_queues"), 1);
                v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v270 + 32), "stateMachine"));
                objc_msgSend(v51, "_onqueueHandlePendingFlagLater:", v43);

              }
              else
              {
                v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneID"));
                v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "zoneName"));
                v42 = sub_10000BDF4(CFSTR("ckksincoming"), v41);
                v43 = (OctagonPendingFlag *)objc_claimAutoreleasedReturnValue(v42);

                if (os_log_type_enabled(&v43->super, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412546;
                  v322 = v34;
                  v323 = 2112;
                  v324 = v38;
                  _os_log_impl((void *)&_mh_execute_header, &v43->super, OS_LOG_TYPE_ERROR, "Unable to load key for %@: %@", buf, 0x16u);
                }
              }

            }
            v29 = v263;
            v31 = objc_msgSend(v263, "countByEnumeratingWithState:objects:count:", &v300, v319, 16);
          }
          while (v31);
        }

        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "contextID"));
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneID"));
        v298 = 0;
        v54 = +[CKKSCurrentItemPointer countByState:contextID:zone:error:](CKKSCurrentItemPointer, "countByState:contextID:zone:error:", CFSTR("new"), v52, v53, &v298);
        v55 = v298;

        if (v54 >= 1)
        {
          v175 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneID"));
          v176 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v175, "zoneName"));
          v177 = sub_10000BDF4(CFSTR("ckksincoming"), v176);
          v178 = objc_claimAutoreleasedReturnValue(v177);

          v72 = v258;
          if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v322) = v54;
            _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_DEFAULT, "Incoming Queue CIP count: %d", buf, 8u);
          }

          objc_msgSend(*(id *)(v270 + 40), "setNextState:", CFSTR("process_incoming_queue"));
          goto LABEL_53;
        }
        v1 = v270;
        v15 = obj;
        if (v55)
        {
          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "zoneID"));
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "zoneName"));
          v58 = sub_10000BDF4(CFSTR("ckksincoming"), v57);
          v59 = objc_claimAutoreleasedReturnValue(v58);

          if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v322 = v55;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Unable to count CIPs: %@", buf, 0xCu);
          }

        }
        v19 = v256 + 1;
        v18 = v251;
        p_cache = (void **)(OTAccountsActualAdapter + 16);
      }
      while ((id)(v256 + 1) != v253);
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v305, v320, 16);
    }
    while (v16);
  }

  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
  v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "allViews"));
  v62 = v15;
  v63 = objc_msgSend(v61, "mutableCopy");

  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "views"));
  objc_msgSend(v63, "minusSet:", v65);

  if (objc_msgSend(v63, "count"))
  {
    v66 = sub_10000BDF4(CFSTR("ckkszone"), 0);
    v67 = objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v322 = v63;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "Beginning again to include these views: %@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(v1 + 40), "setNextState:", CFSTR("handle_all_views"));
    goto LABEL_55;
  }
  v248 = v63;
  v73 = [AAFAnalyticsEventSecurity alloc];
  v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "activeAccount"));
  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "altDSID"));
  v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
  v78 = -[AAFAnalyticsEventSecurity initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:](v73, "initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:", &__NSDictionary0__struct, v76, CFSTR("com.apple.security.ckks.localSyncFinish"), 0, &off_10030AF70, objc_msgSend(v77, "sendMetric"));

  v249 = v78;
  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", v78, 1, 0);
  v296 = 0u;
  v297 = 0u;
  v294 = 0u;
  v295 = 0u;
  v79 = v62;
  v259 = v79;
  obja = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v294, v318, 16);
  if (obja)
  {
    v80 = *(_QWORD *)v295;
    v81 = OTAccountsActualAdapter.cache;
    do
    {
      for (k = 0; k != obja; k = (char *)k + 1)
      {
        if (*(_QWORD *)v295 != v80)
          objc_enumerationMutation(v79);
        v83 = *(void **)(*((_QWORD *)&v294 + 1) + 8 * (_QWORD)k);
        v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v270 + 32), "operationDependencies"));
        v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "contextID"));
        v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "zoneID"));
        v293 = 0;
        v87 = objc_msgSend(v81 + 488, "countByState:contextID:zoneID:error:", CFSTR("reencrypt"), v85, v86, &v293);
        v88 = v293;

        if (v88)
        {
          v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "zoneID"));
          v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "zoneName"));
          v91 = sub_10000BDF4(CFSTR("ckks"), v90);
          v92 = objc_claimAutoreleasedReturnValue(v91);

          if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v322 = v88;
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "Couldn't count reencrypt OQEs, bad behavior ahead: %@", buf, 0xCu);
          }

        }
        v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "viewKeyHierarchyState"));
        v94 = objc_msgSend(v93, "isEqualToString:", CFSTR("ready"));

        if ((v94 & 1) == 0)
        {
          v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "zoneID"));
          v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "zoneName"));
          v104 = sub_10000BDF4(CFSTR("ckksincoming"), v103);
          v105 = objc_claimAutoreleasedReturnValue(v104);

          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v322 = v83;
            _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "Zone not ready (%@): skipping reencryption", buf, 0xCu);
          }
          v1 = v270;
          goto LABEL_75;
        }
        v264 = v88;
        v95 = v81;
        v96 = v80;
        v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v270 + 32), "operationDependencies"));
        v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "syncingPolicy"));
        v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "zoneID"));
        v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "zoneName"));
        v101 = objc_msgSend(v98, "isSyncingEnabledForView:", v100);

        if ((v101 & 1) == 0)
        {
          v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "zoneID"));
          v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "zoneName"));
          v108 = sub_10000BDF4(CFSTR("ckksincoming"), v107);
          v105 = objc_claimAutoreleasedReturnValue(v108);

          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v322 = v83;
            _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "Syncing disabled for (%@): skipping incoming queue processing", buf, 0xCu);
          }
          v1 = v270;
          v79 = v259;
          v80 = v96;
          v81 = v95;
          v88 = v264;
LABEL_75:

          goto LABEL_76;
        }
        v1 = v270;
        v79 = v259;
        v80 = v96;
        v81 = v95;
        v88 = v264;
        if ((uint64_t)v87 > 0)
        {
          objc_msgSend(*(id *)(v270 + 40), "setNextState:", CFSTR("reencrypt_outgoing_items"));
          v133 = v259;
          v135 = v248;
          v134 = v249;
          goto LABEL_187;
        }
LABEL_76:

      }
      obja = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v294, v318, 16);
    }
    while (obja);
  }

  v109 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v110 = objc_alloc_init((Class)NSDateComponents);
  objc_msgSend(v110, "setHour:", -24);
  v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
  v265 = v110;
  v247 = (void *)v109;
  v255 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "dateByAddingComponents:toDate:options:", v110, v109, 0));

  v291 = 0u;
  v292 = 0u;
  v289 = 0u;
  v290 = 0u;
  v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
  v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "views"));

  v114 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v289, v317, 16);
  if (v114)
  {
    v115 = v114;
    v116 = 0;
    v252 = 0;
    v254 = v113;
    objb = *(_QWORD *)v290;
    do
    {
      for (m = 0; m != v115; m = (char *)m + 1)
      {
        v118 = v116;
        if (*(_QWORD *)v290 != objb)
          objc_enumerationMutation(v254);
        v119 = *(void **)(*((_QWORD *)&v289 + 1) + 8 * (_QWORD)m);
        v120 = v1;
        v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "operationDependencies"));
        v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "contextID"));
        v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "zoneName"));
        v124 = (__CFString *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry contextID:zoneName:](CKKSZoneStateEntry, "contextID:zoneName:", v122, v123));

        v125 = objc_claimAutoreleasedReturnValue(-[__CFString lastFetchTime](v124, "lastFetchTime"));
        if (!v125)
          goto LABEL_113;
        v126 = (void *)v125;
        v127 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString lastFetchTime](v124, "lastFetchTime"));
        if (objc_msgSend(v127, "compare:", v255) == (id)-1)
        {

LABEL_113:
          v163 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString lastFetchTime](v124, "lastFetchTime"));

          v250 = v124;
          if (v163)
          {
            v164 = -[__CFString moreRecordsInCloudKit](v124, "moreRecordsInCloudKit");
            v165 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v120 + 32), "operationDependencies"));
            v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v165, "currentFetchReasons"));
            v167 = &off_1002EAC38;
            if (v164)
              v167 = off_1002EAC30;
          }
          else
          {
            v165 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v120 + 32), "operationDependencies"));
            v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v165, "currentFetchReasons"));
            v167 = off_1002EAC28;
          }
          v135 = v248;
          v88 = v265;
          objc_msgSend(v166, "addObject:", *v167);

          v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "zoneID"));
          v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v168, "zoneName"));
          v170 = sub_10000BDF4(CFSTR("ckksfetch"), v169);
          v171 = objc_claimAutoreleasedReturnValue(v170);

          if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
          {
            v172 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString lastFetchTime](v250, "lastFetchTime"));
            v173 = -[__CFString moreRecordsInCloudKit](v250, "moreRecordsInCloudKit");
            v174 = CFSTR("complete");
            if (v173)
              v174 = CFSTR("more coming");
            *(_DWORD *)buf = 138412546;
            v322 = v172;
            v323 = 2112;
            v324 = v174;
            _os_log_impl((void *)&_mh_execute_header, v171, OS_LOG_TYPE_DEFAULT, "Fetch last occurred at %@ (%@); beginning a new one",
              buf,
              0x16u);

          }
          objc_msgSend(*(id *)(v120 + 40), "setNextState:", CFSTR("begin_fetch"));
          v134 = v249;
          goto LABEL_186;
        }
        v128 = -[__CFString moreRecordsInCloudKit](v124, "moreRecordsInCloudKit");

        if (v128)
          goto LABEL_113;
        v116 = v118;
        if (!v118
          || (v129 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString lastFetchTime](v124, "lastFetchTime")),
              v130 = objc_msgSend(v118, "compare:", v129),
              v129,
              v39 = v130 == (id)1,
              v116 = v118,
              v39))
        {
          v131 = objc_claimAutoreleasedReturnValue(-[__CFString lastFetchTime](v124, "lastFetchTime"));

          v132 = v119;
          v116 = (void *)v131;
          v252 = v132;
        }
        v1 = v120;

      }
      v113 = v254;
      v115 = objc_msgSend(v254, "countByEnumeratingWithState:objects:count:", &v289, v317, 16);
    }
    while (v115);
  }
  else
  {
    v116 = 0;
    v252 = 0;
  }

  v136 = sub_10000BDF4(CFSTR("ckksfetch"), 0);
  v137 = objc_claimAutoreleasedReturnValue(v136);
  if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v322 = v116;
    v323 = 2112;
    v324 = v252;
    _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEFAULT, "Fetch last occurred at %@ (for %@)", buf, 0x16u);
  }
  v245 = v116;

  v287 = 0u;
  v288 = 0u;
  v285 = 0u;
  v286 = 0u;
  v138 = v259;
  v139 = objc_msgSend(v138, "countByEnumeratingWithState:objects:count:", &v285, v316, 16);
  if (!v139)
  {
    v254 = 0;
    v250 = 0;
    goto LABEL_127;
  }
  v140 = v139;
  v254 = 0;
  v250 = 0;
  v141 = *(_QWORD *)v286;
LABEL_98:
  v142 = 0;
  while (1)
  {
    if (*(_QWORD *)v286 != v141)
      objc_enumerationMutation(v138);
    v143 = *(void **)(*((_QWORD *)&v285 + 1) + 8 * v142);
    v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v270 + 32), "operationDependencies", v245));
    v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "contextID"));
    v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v143, "zoneName"));
    v147 = (AAFAnalyticsEventSecurity *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry contextID:zoneName:](CKKSZoneStateEntry, "contextID:zoneName:", v145, v146));

    v148 = objc_claimAutoreleasedReturnValue(-[AAFAnalyticsEventSecurity lastLocalKeychainScanTime](v147, "lastLocalKeychainScanTime"));
    if (!v148)
      break;
    v149 = (void *)v148;
    v150 = (void *)objc_claimAutoreleasedReturnValue(-[AAFAnalyticsEventSecurity lastLocalKeychainScanTime](v147, "lastLocalKeychainScanTime"));
    v151 = objc_msgSend(v150, "compare:", v255);

    if (v151 == (id)-1)
      break;
    if (!v254
      || (v152 = (void *)objc_claimAutoreleasedReturnValue(-[AAFAnalyticsEventSecurity lastLocalKeychainScanTime](v147, "lastLocalKeychainScanTime")),
          v153 = objc_msgSend(v254, "compare:", v152),
          v152,
          v153 == (id)1))
    {
      v154 = objc_claimAutoreleasedReturnValue(-[AAFAnalyticsEventSecurity lastLocalKeychainScanTime](v147, "lastLocalKeychainScanTime"));

      v155 = v143;
      v254 = (id)v154;
      v250 = v155;
    }

    if (v140 == (id)++v142)
    {
      v140 = objc_msgSend(v138, "countByEnumeratingWithState:objects:count:", &v285, v316, 16);
      if (!v140)
      {
LABEL_127:

        v179 = sub_10000BDF4(CFSTR("ckksscan"), 0);
        v180 = objc_claimAutoreleasedReturnValue(v179);
        if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v322 = v254;
          v323 = 2112;
          v324 = v250;
          _os_log_impl((void *)&_mh_execute_header, v180, OS_LOG_TYPE_DEFAULT, "CKKS scan last occurred at %@ (for %@)", buf, 0x16u);
        }

        v283 = 0u;
        v284 = 0u;
        v281 = 0u;
        v282 = 0u;
        v181 = v138;
        v182 = objc_msgSend(v181, "countByEnumeratingWithState:objects:count:", &v281, v315, 16);
        v162 = v270;
        if (v182)
        {
          v183 = v182;
          v184 = *(_QWORD *)v282;
          do
          {
            v185 = 0;
            do
            {
              if (*(_QWORD *)v282 != v184)
                objc_enumerationMutation(v181);
              v186 = *(void **)(*((_QWORD *)&v281 + 1) + 8 * (_QWORD)v185);
              v187 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v162 + 32), "operationDependencies", v245));
              v188 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v187, "contextID"));
              v189 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v186, "zoneID"));
              v280 = 0;
              v190 = +[CKKSOutgoingQueueEntry countByState:contextID:zoneID:error:](CKKSOutgoingQueueEntry, "countByState:contextID:zoneID:error:", CFSTR("new"), v188, v189, &v280);
              v191 = v280;

              if (v190 >= 1)
              {
                v192 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v186, "zoneID"));
                v193 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v192, "zoneName"));
                v194 = sub_10000BDF4(CFSTR("ckksoutgoing"), v193);
                v195 = objc_claimAutoreleasedReturnValue(v194);

                if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v322) = v190;
                  _os_log_impl((void *)&_mh_execute_header, v195, OS_LOG_TYPE_DEFAULT, "Have %d outgoing items; scheduling upload",
                    buf,
                    8u);
                }

                v196 = -[OctagonPendingFlag initWithFlag:conditions:]([OctagonPendingFlag alloc], "initWithFlag:conditions:", CFSTR("process_outgoing_queue"), 2);
                v197 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v270 + 32), "stateMachine"));
                objc_msgSend(v197, "_onqueueHandlePendingFlagLater:", v196);

                v198 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v270 + 32), "outgoingQueueOperationScheduler"));
                objc_msgSend(v198, "trigger");

LABEL_138:
                goto LABEL_139;
              }
              if (v191)
              {
                v199 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v186, "zoneID"));
                v200 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v199, "zoneName"));
                v201 = sub_10000BDF4(CFSTR("ckksoutgoing"), v200);
                v196 = (OctagonPendingFlag *)objc_claimAutoreleasedReturnValue(v201);

                if (os_log_type_enabled(&v196->super, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  v322 = v191;
                  _os_log_impl((void *)&_mh_execute_header, &v196->super, OS_LOG_TYPE_DEFAULT, "Error checking outgoing queue: %@", buf, 0xCu);
                }
                goto LABEL_138;
              }
LABEL_139:

              v185 = (char *)v185 + 1;
              v162 = v270;
            }
            while (v183 != v185);
            v202 = objc_msgSend(v181, "countByEnumeratingWithState:objects:count:", &v281, v315, 16);
            v183 = v202;
          }
          while (v202);
        }

        v278 = 0u;
        v279 = 0u;
        v276 = 0u;
        v277 = 0u;
        v203 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v162 + 32), "operationDependencies"));
        v204 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v203, "allCKKSManagedViews"));

        objc = objc_msgSend(v204, "countByEnumeratingWithState:objects:count:", &v276, v314, 16);
        v138 = 0;
        if (objc)
        {
          v205 = 0;
          v262 = *(_QWORD *)v277;
          v257 = v204;
          do
          {
            for (n = 0; n != objc; n = (char *)n + 1)
            {
              if (*(_QWORD *)v277 != v262)
                objc_enumerationMutation(v204);
              v207 = *(void **)(*((_QWORD *)&v276 + 1) + 8 * (_QWORD)n);
              v208 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v207, "launch", v245));
              v209 = objc_msgSend(v208, "launched");

              if ((v209 & 1) == 0)
              {
                if (!v138)
                {
                  v210 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v162 + 32), "operationDependencies"));
                  v211 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v210, "contextID"));
                  v275 = 0;
                  v138 = (id)objc_claimAutoreleasedReturnValue(+[CKKSMirrorEntry countsByZoneNameWithContextID:error:](CKKSMirrorEntry, "countsByZoneNameWithContextID:error:", v211, &v275));
                  v212 = v275;

                  if (v212)
                  {
                    v213 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v207, "zoneID"));
                    v214 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v213, "zoneName"));
                    v215 = sub_10000BDF4(CFSTR("launch"), v214);
                    v216 = objc_claimAutoreleasedReturnValue(v215);

                    if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      v322 = v212;
                      _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_ERROR, "Unable to count mirror entries: %@", buf, 0xCu);
                    }

                  }
                  v260 = v212;
                  v273 = 0u;
                  v274 = 0u;
                  v271 = 0u;
                  v272 = 0u;
                  v217 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "allKeys"));
                  v218 = objc_msgSend(v217, "countByEnumeratingWithState:objects:count:", &v271, v313, 16);
                  if (v218)
                  {
                    v219 = v218;
                    v220 = *(_QWORD *)v272;
                    do
                    {
                      for (ii = 0; ii != v219; ii = (char *)ii + 1)
                      {
                        if (*(_QWORD *)v272 != v220)
                          objc_enumerationMutation(v217);
                        v222 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v271 + 1) + 8 * (_QWORD)ii)));
                        v205 += (int64_t)objc_msgSend(v222, "longValue");

                      }
                      v219 = objc_msgSend(v217, "countByEnumeratingWithState:objects:count:", &v271, v313, 16);
                    }
                    while (v219);
                  }

                  v162 = v270;
                  v204 = v257;
                }
                v223 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v207, "zoneName"));
                v224 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "objectForKeyedSubscript:", v223));

                if (v224)
                {
                  v225 = (int64_t)objc_msgSend(v224, "longValue");
                  v226 = 1;
                  if (v225 >= 11)
                  {
                    v227 = v225;
                    do
                    {
                      v225 = v227 / 0xA;
                      v226 *= 10;
                      v228 = v227 > 0x6D;
                      v227 /= 0xAuLL;
                    }
                    while (v228);
                  }
                  v229 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v226 * v225));

                  v230 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v207, "launch"));
                  objc_msgSend(v230, "addAttribute:value:", CFSTR("zonesize"), v229);

                  v231 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v207, "launch"));
                  if (v205 < 11)
                  {
                    v234 = v205;
                    v232 = 1;
                  }
                  else
                  {
                    v232 = 1;
                    v233 = v205;
                    do
                    {
                      v234 = v233 / 0xA;
                      v232 *= 10;
                      v228 = v233 > 0x6D;
                      v233 /= 0xAuLL;
                    }
                    while (v228);
                  }
                  v235 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v232 * v234));
                  objc_msgSend(v231, "addAttribute:value:", CFSTR("totalsize"), v235);

                }
              }
            }
            objc = objc_msgSend(v204, "countByEnumeratingWithState:objects:count:", &v276, v314, 16);
          }
          while (objc);

          if (v138)
          {
            v204 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v162 + 32), "operationDependencies"));
            v236 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v204, "overallLaunch"));
            v88 = v265;
            v237 = 1;
            if (v205 >= 11)
            {
              v238 = v205;
              do
              {
                v205 = v238 / 0xA;
                v237 *= 10;
                v228 = v238 > 0x6D;
                v238 /= 0xAuLL;
              }
              while (v228);
            }
            v239 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v237 * v205));
            objc_msgSend(v236, "addAttribute:value:", CFSTR("totalsize"), v239);

LABEL_182:
          }
          else
          {
            v88 = v265;
          }
          v240 = [AAFAnalyticsEventSecurity alloc];
          v241 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v162 + 32), "operationDependencies"));
          v242 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v241, "activeAccount"));
          v243 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v242, "altDSID"));
          v244 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v162 + 32), "operationDependencies"));
          v147 = -[AAFAnalyticsEventSecurity initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:](v240, "initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:", &__NSDictionary0__struct, v243, CFSTR("com.apple.security.ckks.contentSyncFinish"), 0, &off_10030AF70, objc_msgSend(v244, "sendMetric"));

          +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", v147, 1, 0);
          v161 = (__CFString **)(v162 + 48);
          goto LABEL_185;
        }
        v88 = v265;
        goto LABEL_182;
      }
      goto LABEL_98;
    }
  }
  v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v143, "zoneID"));
  v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v156, "zoneName"));
  v158 = sub_10000BDF4(CFSTR("ckksscan"), v157);
  v159 = objc_claimAutoreleasedReturnValue(v158);

  if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
  {
    v160 = (void *)objc_claimAutoreleasedReturnValue(-[AAFAnalyticsEventSecurity lastLocalKeychainScanTime](v147, "lastLocalKeychainScanTime"));
    *(_DWORD *)buf = 138412290;
    v322 = v160;
    _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEFAULT, "CKKS scan last occurred at %@; beginning a new one",
      buf,
      0xCu);

  }
  v161 = &off_1002E94B8;
  v162 = v270;
  v88 = v265;
LABEL_185:
  objc_msgSend(*(id *)(v162 + 40), "setNextState:", *v161, v245);

  v135 = v248;
  v134 = v249;
  v118 = v246;
LABEL_186:

  v133 = v247;
LABEL_187:

  v63 = v135;
LABEL_55:

}

void sub_10017E3B4(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[128];
  uint8_t buf[4];
  void *v22;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
  objc_msgSend(v2, "operateOnAllViews");

  v3 = sub_10000BDF4(CFSTR("ckksview"), 0);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "views"));
    *(_DWORD *)buf = 138412290;
    v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Now operating on these views: %@", buf, 0xCu);

  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies", 0));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allViews"));

  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v12), "launch"));
        objc_msgSend(v13, "addEvent:", CFSTR("priority-complete"));

        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "overallLaunch"));
  objc_msgSend(v15, "addEvent:", CFSTR("priority-complete"));

}

void sub_10017E5AC(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateMachine"));
  objc_msgSend(v1, "handleFlag:", CFSTR("fetch_complete"));

}

void sub_10017E5F8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
  objc_msgSend(v5, "operateOnAllViews");

  v6 = sub_10000BDF4(CFSTR("ckksview"), 0);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "views"));
    v11 = 138412290;
    v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "After trust failure, operating on these views: %@", (uint8_t *)&v11, 0xCu);

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "intendedState"));
  objc_msgSend(v3, "setNextState:", v10);

}

id sub_10017E728(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setError:", *(_QWORD *)(a1 + 32));
}

void sub_10017E734(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v6 = WeakRetained;
  if (*(_QWORD *)(a1 + 32))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "zoneName"));
    v8 = sub_10000BDF4(CFSTR("ckksreset"), v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(void **)(a1 + 32);
      v23 = 138412290;
      v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Restricting cloudkit zone reset to a view subset %@", (uint8_t *)&v23, 0xCu);
    }

    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "operationDependencies"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject viewStatesByNames:](v11, "viewStatesByNames:", *(_QWORD *)(a1 + 32)));
  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "activeManagedViews"));

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "zoneName"));
    v15 = sub_10000BDF4(CFSTR("ckksreset"), v14);
    v11 = objc_claimAutoreleasedReturnValue(v15);

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v23 = 138412290;
      v24 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Restricting cloudkit zone reset to active CKKS-managed subset %@", (uint8_t *)&v23, 0xCu);
    }
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "operationDependencies"));
  objc_msgSend(v16, "operateOnSelectViews:", v12);

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "zoneName"));
  v18 = sub_10000BDF4(CFSTR("ckksreset"), v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);

  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "operationDependencies"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "views"));
    v23 = 138412290;
    v24 = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Beginning cloudkit zone reset for %@", (uint8_t *)&v23, 0xCu);

  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "intendedState"));
  objc_msgSend(v4, "setNextState:", v22);

}

void sub_10017E9C4(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v6 = WeakRetained;
  if (*(_QWORD *)(a1 + 32))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "zoneName"));
    v8 = sub_10000BDF4(CFSTR("ckksreset"), v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(void **)(a1 + 32);
      v20 = 138412290;
      v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Restricting local data reset to a view subset %@", (uint8_t *)&v20, 0xCu);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "operationDependencies"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "viewStatesByNames:", *(_QWORD *)(a1 + 32)));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "operationDependencies"));
    objc_msgSend(v13, "operateOnSelectViews:", v12);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "zoneName"));
  v15 = sub_10000BDF4(CFSTR("ckksreset"), v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "operationDependencies"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "views"));
    v20 = 138412290;
    v21 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Beginning local data reset for %@", (uint8_t *)&v20, 0xCu);

  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "intendedState"));
  objc_msgSend(v4, "setNextState:", v19);

}

void sub_10017EBC0(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10017EC4C;
  v6[3] = &unk_1002E9418;
  v6[4] = WeakRetained;
  v7 = v3;
  v5 = v3;
  objc_msgSend(WeakRetained, "dispatchSyncWithSQLTransaction:", v6);

}

uint64_t sub_10017EC4C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  char v18;
  uint64_t v19;
  void *j;
  void *v21;
  void *v22;
  BOOL v23;
  id v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  NSObject *v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  void *k;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  NSObject *v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  NSObject *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  void *m;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  id v75;
  void *v76;
  id v77;
  NSObject *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  NSObject *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  __CFString **v97;
  id v99;
  id v100;
  int v101;
  id v102;
  id obj;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  id v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[128];
  uint8_t v123[128];
  uint8_t buf[4];
  id v125;
  _BYTE v126[128];
  _BYTE v127[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v104 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationDependencies"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "views"));

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v118, v127, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v119;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v119 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v118 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "operationDependencies"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contextID"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneID"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneName"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry contextID:zoneName:](CKKSZoneStateEntry, "contextID:zoneName:", v11, v13));

        objc_msgSend(v2, "addObject:", v14);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v118, v127, 16);
    }
    while (v6);
  }

  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  v15 = v2;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v114, v126, 16);
  if (v16)
  {
    v17 = v16;
    v18 = 0;
    v101 = 0;
    v19 = *(_QWORD *)v115;
    do
    {
      for (j = 0; j != v17; j = (char *)j + 1)
      {
        if (*(_QWORD *)v115 != v19)
          objc_enumerationMutation(v15);
        v21 = *(void **)(*((_QWORD *)&v114 + 1) + 8 * (_QWORD)j);
        if ((objc_msgSend(v21, "ckzonecreated") & 1) == 0)
        {
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "zoneName"));
          v36 = sub_10000BDF4(CFSTR("ckks"), v35);
          v37 = objc_claimAutoreleasedReturnValue(v36);

          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v125 = v21;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Zone does not exist(%@); going to restart operation",
              buf,
              0xCu);
          }

          objc_msgSend(*(id *)(v104 + 40), "setNextState:", CFSTR("initializing"));
          goto LABEL_83;
        }
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "getChangeToken"));
        v23 = v22 == 0;

        if (objc_msgSend(v21, "moreRecordsInCloudKit"))
        {
          v24 = v15;
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "zoneName"));
          v26 = sub_10000BDF4(CFSTR("ckks"), v25);
          v27 = objc_claimAutoreleasedReturnValue(v26);

          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "CloudKit reports there's more records to fetch!", buf, 2u);
          }

          v101 = 1;
          v15 = v24;
        }
        v18 |= v23;
      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v114, v126, 16);
    }
    while (v17);

    if ((v18 & 1) != 0)
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[CKOperationGroup CKKSGroupWithName:](CKOperationGroup, "CKKSGroupWithName:", CFSTR("initial-setup")));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "operationDependencies"));
      objc_msgSend(v29, "setCkoperationGroup:", v28);

      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "zoneName"));
      v31 = sub_10000BDF4(CFSTR("ckks"), v30);
      v32 = objc_claimAutoreleasedReturnValue(v31);

      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "No existing change token; going to try to match local items with CloudKit ones.",
          buf,
          2u);
      }

      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "operationDependencies"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "currentFetchReasons"));
      objc_msgSend(v34, "addObject:", CFSTR("initialfetch"));

      objc_msgSend(*(id *)(v104 + 40), "setNextState:", CFSTR("begin_fetch"));
      goto LABEL_83;
    }
  }
  else
  {

    v101 = 0;
  }
  v112 = 0u;
  v113 = 0u;
  v110 = 0u;
  v111 = 0u;
  v38 = v15;
  v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v110, v123, 16);
  if (v39)
  {
    v40 = v39;
    v41 = *(_QWORD *)v111;
    v42 = 5;
    do
    {
      for (k = 0; k != v40; k = (char *)k + 1)
      {
        if (*(_QWORD *)v111 != v41)
          objc_enumerationMutation(v38);
        v44 = *(void **)(*((_QWORD *)&v110 + 1) + 8 * (_QWORD)k);
        if ((unint64_t)objc_msgSend(v44, "lastFixup") < v42)
          v42 = (unint64_t)objc_msgSend(v44, "lastFixup");
      }
      v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v110, v123, 16);
    }
    while (v40);
  }
  else
  {
    v42 = 5;
  }

  v45 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSFixups fixupOperation:](CKKSFixups, "fixupOperation:", v42));
  v46 = *(void **)(v104 + 32);
  if (v45)
  {
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "zoneName"));
    v48 = sub_10000BDF4(CFSTR("ckksfixup"), v47);
    v49 = objc_claimAutoreleasedReturnValue(v48);

    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "lastFixupOperation"));
      *(_DWORD *)buf = 138412290;
      v125 = v50;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "We have a fixup to perform: %@", buf, 0xCu);

    }
    objc_msgSend(*(id *)(v104 + 40), "setNextState:", v45);
    goto LABEL_82;
  }
  v109 = 0;
  objc_msgSend(v46, "_onqueueResetAllInflightOQE:", &v109);
  v51 = v109;
  if (v51)
  {
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "zoneName"));
    v53 = sub_10000BDF4(CFSTR("ckks"), v52);
    v54 = objc_claimAutoreleasedReturnValue(v53);

    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v125 = v51;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Couldn't reset in-flight OQEs, bad behavior ahead: %@", buf, 0xCu);
    }

  }
  v99 = v51;
  v100 = v15;
  v55 = (void *)objc_claimAutoreleasedReturnValue(+[CKOperationGroup CKKSGroupWithName:](CKOperationGroup, "CKKSGroupWithName:", CFSTR("restart-setup")));
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "operationDependencies"));
  objc_msgSend(v56, "setCkoperationGroup:", v55);

  v57 = (void *)objc_claimAutoreleasedReturnValue(+[CKOperationGroup CKKSGroupWithName:](CKOperationGroup, "CKKSGroupWithName:", CFSTR("restart-setup")));
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "operationDependencies"));
  objc_msgSend(v58, "setCurrentOutgoingQueueOperationGroup:", v57);

  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "operationDependencies"));
  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "activeManagedViews"));

  v102 = v60;
  v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v105, v122, 16);
  if (!v61)
  {
    LODWORD(v63) = 0;
    goto LABEL_74;
  }
  v62 = v61;
  v63 = 0;
  obj = *(id *)v106;
  do
  {
    for (m = 0; m != v62; m = (char *)m + 1)
    {
      if (*(id *)v106 != obj)
        objc_enumerationMutation(v102);
      v65 = *(void **)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)m);
      v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "zoneID"));
      v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "contextID"));
      v68 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeySet loadForZone:contextID:](CKKSCurrentKeySet, "loadForZone:contextID:", v66, v67));

      v69 = objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "error"));
      if (v69)
      {
        v70 = (void *)v69;
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "error"));
        v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "domain"));
        if ((objc_msgSend(v72, "isEqual:", CFSTR("securityd")) & 1) != 0)
        {
          v73 = v63;
          v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "error"));
          v75 = objc_msgSend(v74, "code");

          v63 = v73;
          if (v75 == (id)-25300)
            goto LABEL_60;
        }
        else
        {

        }
        v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "zoneName"));
        v77 = sub_10000BDF4(CFSTR("ckkskey"), v76);
        v78 = objc_claimAutoreleasedReturnValue(v77);

        if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        {
          v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "error"));
          *(_DWORD *)buf = 138412290;
          v125 = v79;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "Error examining existing key hierarchy: %@", buf, 0xCu);

        }
      }
LABEL_60:
      v80 = objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "tlk"));
      if (v80)
      {
        v81 = (void *)v80;
        v82 = objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "classA"));
        if (v82)
        {
          v83 = (void *)v82;
          v84 = objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "classC"));
          if (v84)
          {
            v85 = (void *)v84;
            v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "error"));

            if (!v86)
              goto LABEL_70;
            goto LABEL_67;
          }

        }
      }
LABEL_67:
      v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "zoneID"));
      v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "zoneName"));
      v89 = sub_10000BDF4(CFSTR("ckkskey"), v88);
      v90 = objc_claimAutoreleasedReturnValue(v89);

      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "zoneID"));
        *(_DWORD *)buf = 138412290;
        v125 = v91;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "No existing key hierarchy for %@. Check if there's one in CloudKit...", buf, 0xCu);

      }
      v63 = 1;
LABEL_70:

    }
    v62 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v105, v122, 16);
  }
  while (v62);
LABEL_74:

  if (((v63 | v101) & 1) != 0)
  {
    v45 = 0;
    v15 = v100;
    v92 = v99;
    if ((v101 & 1) != 0)
    {
      v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "operationDependencies"));
      v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "currentFetchReasons"));
      objc_msgSend(v94, "addObject:", CFSTR("more-coming"));

    }
    if ((v63 & 1) != 0)
    {
      v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 32), "operationDependencies"));
      v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "currentFetchReasons"));
      objc_msgSend(v96, "addObject:", CFSTR("periodic"));

    }
    v97 = off_1002E9400;
  }
  else
  {
    v97 = &off_1002E9408;
    v45 = 0;
    v15 = v100;
    v92 = v99;
  }
  objc_msgSend(*(id *)(v104 + 40), "setNextState:", *v97);

LABEL_82:
LABEL_83:

  return 1;
}

void sub_10017F74C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateMachine"));
  objc_msgSend(v1, "handleFlag:", CFSTR("oqo_token"));

}

void sub_10017F798(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateMachine"));
  objc_msgSend(v1, "handleFlag:", CFSTR("oqo_token"));

}

void sub_10017FC88(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  v4[0] = CFSTR("payload");
  v4[1] = CFSTR("type");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 2));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1));
  v3 = (void *)qword_100341450;
  qword_100341450 = v2;

}

void sub_10017FD8C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[11];

  v4[0] = kSecAttrUUID;
  v4[1] = CFSTR("zone");
  v4[2] = CFSTR("ownr");
  v4[3] = CFSTR("type");
  v4[4] = CFSTR("deln");
  v4[5] = kSecAttrModificationDate;
  v4[6] = kSecValueData;
  v4[7] = CFSTR("pkkp");
  v4[8] = CFSTR("pkvp");
  v4[9] = CFSTR("ipkp");
  v4[10] = CFSTR("ipvp");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 11));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1));
  v3 = (void *)qword_100341460;
  qword_100341460 = v2;

}

void sub_10017FF9C(void *a1, const char *a2, CFDataRef theData, __CFString **a4)
{
  const UInt8 *BytePtr;
  size_t Length;

  if (theData)
  {
    if (CFDataGetLength(theData) < 0)
    {
      sub_100019F20(-50, a4, CFSTR("no data for key %s"), a2);
    }
    else
    {
      BytePtr = CFDataGetBytePtr(theData);
      Length = CFDataGetLength(theData);
      xpc_dictionary_set_data(a1, a2, BytePtr, Length);
    }
  }
  else
  {
    sub_100019F20(-50, a4, CFSTR("data for key %s is NULL"), a2);
  }
}

void sub_100180044(uint64_t a1, const __CFString *a2, __CFString **a3)
{
  _QWORD v3[8];
  _QWORD v4[3];
  char v5;
  _QWORD v6[5];

  if (a2)
  {
    v4[0] = 0;
    v4[1] = v4;
    v4[2] = 0x2000000000;
    v5 = 1;
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 0x40000000;
    v3[2] = sub_100180120;
    v3[3] = &unk_1002E9920;
    v3[4] = v4;
    v3[5] = a1;
    v3[6] = "status";
    v3[7] = a3;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    v6[2] = sub_1000104A0;
    v6[3] = &unk_1002DB170;
    v6[4] = v3;
    sub_1000137F8(a2, (uint64_t)v6);
    _Block_object_dispose(v4, 8);
  }
  else
  {
    sub_100019F20(-50, a3, CFSTR("string for key %s is NULL"), "status");
  }
}

void sub_100180120(uint64_t a1, char *string)
{
  if (string)
    xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 40), *(const char **)(a1 + 48), string);
  else
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_100019F20(-50, *(__CFString ***)(a1 + 56), CFSTR("failed to convert string for key %s to utf8"), *(_QWORD *)(a1 + 48));
}

uint64_t sub_10018018C(void *a1)
{
  uint64_t v1;

  v1 = xpc_dictionary_dup_fd(a1, "fileDescriptor");
  if ((v1 & 0x80000000) != 0)
    sub_100019F20(-50, 0, CFSTR("missing fd for key %s"), "fileDescriptor");
  return v1;
}

const void *sub_1001801E0(void *a1, const char *a2, __CFString **a3)
{
  CFTypeRef v5;
  const void *v6;
  CFTypeID v7;
  const void *v8;
  CFTypeID v9;
  CFStringRef v10;

  v5 = sub_10000FF08(a1, a2, a3);
  v6 = v5;
  if (v5 && (v7 = CFGetTypeID(v5), v7 == CFSetGetTypeID()))
  {
    CFRetain(v6);
    v8 = v6;
  }
  else
  {
    if (a3)
      sub_100019F20(-50, a3, CFSTR("object %@ is not a set"), v6);
    if (!v6)
      return 0;
    v9 = CFGetTypeID(v6);
    v10 = CFCopyTypeIDDescription(v9);
    sub_100019F20(-50, a3, CFSTR("object for key %s not set but %@"), a2, v10);
    if (v10)
      CFRelease(v10);
    v8 = 0;
  }
  CFRelease(v6);
  return v8;
}

BOOL sub_1001802B0(void *a1, const char *a2, _QWORD *a3, __CFString **a4)
{
  void *data;
  _BOOL8 v9;
  size_t length;

  length = 0;
  data = (void *)xpc_dictionary_get_data(a1, a2, &length);
  if (data)
  {
    data = sub_1000048FC(a1, a2, a4);
    v9 = data != 0;
  }
  else
  {
    v9 = 1;
  }
  *a3 = data;
  return v9;
}

BOOL sub_100180320(void *a1, _QWORD *a2, __CFString **a3)
{
  void *value;
  _BOOL8 v7;

  value = xpc_dictionary_get_value(a1, "backup");
  if (value)
  {
    value = (void *)sub_10000FE74(a1, "backup", a3);
    v7 = value != 0;
  }
  else
  {
    v7 = 1;
  }
  *a2 = value;
  return v7;
}

CFStringRef sub_100180388(void *a1, const char *a2, __CFString **a3)
{
  const char *string;
  const char *v6;
  CFStringRef result;

  string = xpc_dictionary_get_string(a1, a2);
  if (string)
  {
    v6 = string;
    result = CFStringCreateWithCString(kCFAllocatorDefault, string, 0x8000100u);
    if (result)
      return result;
    sub_100019F20(-108, a3, CFSTR("object for key %s failed to convert %s to CFString"), a2, v6);
  }
  else
  {
    sub_100019F20(-50, a3, CFSTR("object for key %s not string"), a2);
  }
  return 0;
}

BOOL sub_100180414(void *a1, const char *a2, _QWORD *a3, __CFString **a4)
{
  void *value;
  _BOOL8 v9;

  value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    value = (void *)sub_100180388(a1, a2, a4);
    v9 = value != 0;
  }
  else
  {
    v9 = 1;
  }
  *a3 = value;
  return v9;
}

void sub_100180AE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100180BB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001813E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100183738(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100183748(uint64_t a1)
{

}

uint64_t sub_100183750(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  BOOL v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  unsigned __int8 v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  NSObject *v36;
  const char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint32_t v40;
  unsigned int v41;
  void *v42;
  void *v43;
  id v44;
  _BOOL4 v45;
  void *v46;
  void *v47;
  uint64_t v48;
  __CFString *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  id v59;
  id obj;
  id v61;
  const __CFString *v62;
  void *v63;
  uint8_t buf[4];
  id v65;
  __int16 v66;
  uint64_t v67;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contextID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v61 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSKey remoteKeysForContextID:zoneID:error:](CKKSKey, "remoteKeysForContextID:zoneID:error:", v3, v4, &v61));
  v6 = v61;

  if (v5)
    v7 = v6 == 0;
  else
    v7 = 0;
  if (v7)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += objc_msgSend(v5, "count");
    if (objc_msgSend(v5, "count"))
    {
      v15 = *(void **)(a1 + 32);
      v16 = *(_QWORD *)(a1 + 40);
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      obj = *(id *)(v18 + 40);
      v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "processRemoteKeys:viewState:currentTrustStates:error:", v5, v16, v17, &obj));
      objc_storeStrong((id *)(v18 + 40), obj);
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v21 = *(void **)(v20 + 40);
      *(_QWORD *)(v20 + 40) = v19;

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "zoneName"));
      v24 = sub_10000BDF4(CFSTR("ckkskey"), v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);

      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        v26 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
        *(_DWORD *)buf = 138412546;
        v65 = v26;
        v66 = 2112;
        v67 = v27;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "After remote key processing, Key hierarchy is '%@' (error: %@)", buf, 0x16u);
      }

      if (!objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "isEqualToString:", CFSTR("ready")))
      {
        v14 = 1;
        goto LABEL_29;
      }
    }
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "contextID"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v59 = 0;
    v31 = +[CKKSIncomingQueueEntry allIQEsHaveValidUnwrappingKeysInContextID:zoneID:error:](CKKSIncomingQueueEntry, "allIQEsHaveValidUnwrappingKeysInContextID:zoneID:error:", v29, v30, &v59);
    v32 = v59;

    if (v32)
    {
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "zoneName"));
      v35 = sub_10000BDF4(CFSTR("ckkskey"), v34);
      v36 = objc_claimAutoreleasedReturnValue(v35);

      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v65 = v32;
        v37 = "Unable to determine if all IQEs have parent keys: %@";
        v38 = v36;
        v39 = OS_LOG_TYPE_ERROR;
        v40 = 12;
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v38, v39, v37, buf, v40);
      }
    }
    else
    {
      if ((v31 & 1) != 0)
      {
LABEL_25:
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deps"));
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "contextID"));
        v53 = objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeySet loadForZone:contextID:](CKKSCurrentKeySet, "loadForZone:contextID:", v50, v52));
        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v55 = *(void **)(v54 + 40);
        *(_QWORD *)(v54 + 40) = v53;

        if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "isEqualToString:", CFSTR("error")))
        {
          v56 = *(void **)(a1 + 48);
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
          objc_msgSend(v56, "populateUnderlyingErrorsStartingWithRootError:", v57);

          v14 = 0;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
        }
        else
        {
          v14 = 1;
        }

        goto LABEL_29;
      }
      v41 = objc_msgSend(*(id *)(a1 + 32), "allowFullRefetchResult");
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "zoneName"));
      v44 = sub_10000BDF4(CFSTR("ckkskey"), v43);
      v36 = objc_claimAutoreleasedReturnValue(v44);

      v45 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
      if (v41)
      {
        if (v45)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "We have some item that encrypts to a non-existent key. This is exceptional; requesting full refetch",
            buf,
            2u);
        }

        v46 = *(void **)(a1 + 48);
        v62 = CFSTR("fullRefetchNeeded");
        v63 = &__kCFBooleanTrue;
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1));
        objc_msgSend(v46, "addMetrics:", v47);

        v48 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        v49 = CFSTR("needrefetch");
        v36 = *(NSObject **)(v48 + 40);
        *(_QWORD *)(v48 + 40) = CFSTR("needrefetch");
        goto LABEL_24;
      }
      if (v45)
      {
        *(_WORD *)buf = 0;
        v37 = "We have some item that encrypts to a non-existent key, but we cannot request a refetch! Possible inifinite-loop ahead";
        v38 = v36;
        v39 = OS_LOG_TYPE_DEFAULT;
        v40 = 2;
        goto LABEL_15;
      }
    }
LABEL_24:

    goto LABEL_25;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneName"));
  v10 = sub_10000BDF4(CFSTR("ckkskey"), v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);

  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v65 = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "couldn't fetch list of remote keys: %@", buf, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
  v12 = *(void **)(a1 + 48);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  objc_msgSend(v12, "populateUnderlyingErrorsStartingWithRootError:", v13);

  objc_msgSend(*(id *)(a1 + 40), "setViewKeyHierarchyState:", CFSTR("error"));
  v14 = 0;
LABEL_29:

  return v14;
}

void sub_100187030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100187054(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100187064(uint64_t a1)
{

}

void sub_10018706C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("count(rowid)")));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "asNSNumberInteger"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1001877D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100187A50(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setReadyNotificationArmed:", 1);
}

void sub_100187A5C(uint64_t a1)
{
  id v2;

  if (objc_msgSend(*(id *)(a1 + 32), "readyNotificationArmed"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setReadyNotificationArmed:", 0);
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notifyViewReadyScheduler"));
    objc_msgSend(v2, "trigger");

  }
}

uint64_t sub_100187AC0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100187AD0(uint64_t a1)
{

}

void sub_100187AD8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mutableStateConditions"));
  v2 = objc_msgSend(v5, "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100187B28(uint64_t a1)
{
  _QWORD *v2;
  CKKSCondition *v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint8_t buf[4];
  uint64_t v21;

  if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16)) & 1) == 0)
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2[2])
    {
      v3 = objc_alloc_init(CKKSCondition);
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mutableStateConditions"));
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));

      v2 = *(_QWORD **)(a1 + 40);
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allowableStates"));
    v6 = objc_msgSend(v5, "containsObject:", *(_QWORD *)(a1 + 32));

    if ((v6 & 1) == 0)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), CFSTR("CKKSKeychainViewState.m"), 123, CFSTR("state machine tried to enter unknown state %@"), *(_QWORD *)(a1 + 32));

    }
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 16), *(id *)(a1 + 32));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneName"));
    v9 = sub_10000BDF4(CFSTR("ckks-view-state"), v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Zone is entering %@", buf, 0xCu);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "launch"));
    objc_msgSend(v12, "addEvent:", *(_QWORD *)(a1 + 32));

    if (*(_QWORD *)(a1 + 32))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mutableStateConditions"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
      objc_msgSend(v14, "fulfill");

      if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("ready")))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](CKKSAnalytics, "logger"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "zoneName"));
        objc_msgSend(v15, "setDateProperty:forKey:zoneName:", v16, CFSTR("lastKSR"), v18);

      }
    }
  }
}

void sub_100187DA0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  CKKSCondition *v5;

  v3 = a2;
  v5 = objc_alloc_init(CKKSCondition);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mutableStateConditions"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, v3);

}

void sub_10018809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10018885C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10018A028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_10018A318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_10018B274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018B440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_10018B704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018B9EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10018C7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_10018CC6C(id a1, SecDbItem *a2, id *a3)
{
  KCSharingOutgoingEntry *v5;
  id v6;
  void *v7;
  KCSharingOutgoingDeletion *v8;
  KCSharingOutgoingDeletion *v9;
  id v11;

  v11 = 0;
  v5 = -[KCSharingOutgoingRow initWithOutgoingDatabaseItem:error:]([KCSharingOutgoingEntry alloc], "initWithOutgoingDatabaseItem:error:", a2, &v11);
  v6 = v11;
  v7 = v6;
  if (v5)
  {
    v8 = v5;
LABEL_5:
    v9 = v8;
    goto LABEL_6;
  }
  if (sub_10004D530(v6))
  {
    v8 = -[KCSharingOutgoingRow initWithOutgoingDatabaseItem:error:]([KCSharingOutgoingDeletion alloc], "initWithOutgoingDatabaseItem:error:", a2, a3);
    goto LABEL_5;
  }
  v9 = 0;
  if (a3)
    *a3 = objc_retainAutorelease(v7);
LABEL_6:

  return v9;
}

id sub_10018CD28(id a1, SecDbItem *a2, id *a3)
{
  KCSharingIncomingEntry *v5;
  id v6;
  void *v7;
  KCSharingIncomingDeletion *v8;
  KCSharingIncomingDeletion *v9;
  id v11;

  v11 = 0;
  v5 = -[KCSharingIncomingRow initWithIncomingDatabaseItem:error:]([KCSharingIncomingEntry alloc], "initWithIncomingDatabaseItem:error:", a2, &v11);
  v6 = v11;
  v7 = v6;
  if (v5)
  {
    v8 = v5;
LABEL_5:
    v9 = v8;
    goto LABEL_6;
  }
  if (sub_10004D530(v6))
  {
    v8 = -[KCSharingIncomingRow initWithIncomingDatabaseItem:error:]([KCSharingIncomingDeletion alloc], "initWithIncomingDatabaseItem:error:", a2, a3);
    goto LABEL_5;
  }
  v9 = 0;
  if (a3)
    *a3 = objc_retainAutorelease(v7);
LABEL_6:

  return v9;
}

id sub_10018CDE4(id a1, SecDbItem *a2, id *a3)
{
  return -[KCSharingMirrorEntry initWithMirrorDatabaseItem:error:]([KCSharingMirrorEntry alloc], "initWithMirrorDatabaseItem:error:", a2, a3);
}

uint64_t sub_10018CE1C(id *a1, uint64_t a2, _QWORD *a3)
{
  KCSharingRowMapper *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  const __CFString *v10;
  void *v11;
  id v12;
  KCSharingRowMapper *v13;
  uint64_t v14;
  _QWORD v16[4];
  id v17;
  KCSharingRowMapper *v18;
  id v19;
  uint64_t v20;

  v6 = -[KCSharingRowMapper initWithModel:]([KCSharingRowMapper alloc], "initWithModel:", a1[6]);
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingRowMapper columnNamesWithTableName:](v6, "columnNamesWithTableName:", 0));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", CFSTR(", ")));
  v9 = objc_msgSend(a1[6], "databaseItemClass");
  if (a1[4])
    v10 = CFSTR("AND zone = ?2");
  else
    v10 = &stru_1002EE888;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT %1$@ FROM %2$@ WHERE uuid = ?1 %3$@"), v8, *v9, v10));

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10018CF80;
  v16[3] = &unk_1002EA088;
  v12 = a1[4];
  v20 = a2;
  v17 = v12;
  v18 = v6;
  v19 = a1[5];
  v13 = v6;
  v14 = sub_10014783C(a2, v11, a3, v16);

  return v14;
}

uint64_t sub_10018CF80(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  uint64_t v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;
  sqlite3_stmt *v15;

  if (!sub_100147A5C(a2, 1, (const __CFString *)CKRecordNameZoneWideShare, a3))
    return 0;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), CFSTR("group-"), v6));
    v8 = sub_100147A5C(a2, 2, v7, a3);

    if (!v8)
      return 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10018D0AC;
  v12[3] = &unk_1002EA060;
  v13 = *(id *)(a1 + 40);
  v15 = a2;
  v14 = *(id *)(a1 + 48);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_10018D0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  KCSharingMirrorEntry *v6;
  KCSharingMirrorEntry *v7;
  void *v8;
  uint64_t v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  uint64_t v13;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapResultRow:startingAt:error:", *(_QWORD *)(a1 + 48), 0, a3));
  if (v5)
  {
    v6 = -[KCSharingMirrorEntry initWithMirrorDatabaseItem:error:]([KCSharingMirrorEntry alloc], "initWithMirrorDatabaseItem:error:", v5, a3);
    v7 = v6;
    if (v6
      && (v8 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingMirrorEntry record](v6, "record")),
          v9 = objc_opt_class(CKShare),
          isKindOfClass = objc_opt_isKindOfClass(v8, v9),
          v8,
          (isKindOfClass & 1) != 0))
    {
      v11 = *(void **)(a1 + 40);
      v12 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingMirrorEntry record](v7, "record"));
      objc_msgSend(v11, "addObject:", v12);

      v13 = 1;
    }
    else
    {
      v13 = 0;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

uint64_t sub_10018D194(id *a1, uint64_t a2, _QWORD *a3)
{
  KCSharingRowMapper *v6;
  void *v7;
  void *v8;
  void *v9;
  KCSharingRowMapper *v10;
  uint64_t v11;
  _QWORD v13[4];
  KCSharingRowMapper *v14;
  id v15;
  id v16;
  uint64_t v17;

  v6 = -[KCSharingRowMapper initWithModel:]([KCSharingRowMapper alloc], "initWithModel:", a1[6]);
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingRowMapper columnNamesWithTableName:](v6, "columnNamesWithTableName:", 0));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", CFSTR(", ")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT %@ FROM %@"), v8, *(_QWORD *)objc_msgSend(a1[6], "databaseItemClass")));

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10018D2DC;
  v13[3] = &unk_1002EA660;
  v17 = a2;
  v14 = v6;
  v16 = a1[5];
  v15 = a1[4];
  v10 = v6;
  v11 = sub_10014783C(a2, v9, a3, v13);

  return v11;
}

uint64_t sub_10018D2DC(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  sqlite3_stmt *v13;

  v6 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10018D39C;
  v9[3] = &unk_1002EA638;
  v10 = *(id *)(a1 + 32);
  v13 = a2;
  v12 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 40);
  v7 = sub_100147AB8(v6, a2, a3, v9);

  return v7;
}

BOOL sub_10018D39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  _BOOL8 v7;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapResultRow:startingAt:error:", *(_QWORD *)(a1 + 56), 0, a3));
  if (v4)
  {
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = v6 != 0;
    if (v6)
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

BOOL sub_10018D42C(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 16) & 2) != 0
      && CFDictionaryContainsKey(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 8), *(const void **)a2) != 0;
}

BOOL sub_10018D464(_QWORD *a1, CFStringRef **a2, _BYTE *a3)
{
  _BOOL8 result;

  result = sub_10000C25C(a2, a1[6], (CFTypeRef *)(*(_QWORD *)(a1[4] + 8) + 24), (uint64_t)&stru_1002EA5E8);
  if (!result)
  {
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
    *a3 = 1;
  }
  return result;
}

BOOL sub_10018D4C0(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

BOOL sub_10018D4D0(id a1, const SecDbAttr *a2)
{
  return a2->var1 == 8;
}

uint64_t sub_10018D4E0(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  int v8;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  v8 = sub_100147A5C(a2, 1, v7, a3);

  if (v8)
    return sub_100147AB8(*(_QWORD *)(a1 + 40), a2, a3, &stru_1002EA568);
  else
    return 0;
}

BOOL sub_10018D580(id a1, BOOL *a2, id *a3)
{
  return 1;
}

uint64_t sub_10018D588(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  return sub_100147AB8(*(_QWORD *)(a1 + 32), a2, a3, &stru_1002EA548);
}

BOOL sub_10018D598(id a1, BOOL *a2, id *a3)
{
  return 1;
}

uint64_t sub_10018D5A0(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  return sub_100147AB8(*(_QWORD *)(a1 + 32), a2, a3, &stru_1002EA508);
}

BOOL sub_10018D5B0(id a1, BOOL *a2, id *a3)
{
  return 1;
}

uint64_t sub_10018D5B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10018D5C8(uint64_t a1)
{

}

void sub_10018D5D0(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  id obj;
  _QWORD v6[5];

  v2 = (void *)a1[4];
  v6[1] = 3221225472;
  v6[2] = sub_10018D664;
  v6[3] = &unk_1002E9F10;
  v6[4] = v2;
  v3 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v3 + 40);
  v6[0] = _NSConcreteStackBlock;
  v4 = objc_msgSend(v2, "withConnection:error:", v6, &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v4;
}

uint64_t sub_10018D664(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD v5[6];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10018D6DC;
  v5[3] = &unk_1002E9EE8;
  v5[4] = *(_QWORD *)(a1 + 32);
  v5[5] = a2;
  v3 = sub_100147CEC(a2, a3, v5);
  if ((_DWORD)v3)
    sub_100133324();
  return v3;
}

uint64_t sub_10018D6DC(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unsigned __int8 v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void *v23;
  uint64_t v24;
  unsigned __int8 v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __CFString *v32;
  id v34;
  id v35;
  id v36;
  id v37;

  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v37 = 0;
  v6 = objc_msgSend(v4, "wipeLocalPrivateKeysInTransaction:error:", v5, &v37);
  v11 = v37;
  if ((v6 & 1) == 0)
  {
    v32 = CFSTR("Wiping private keys");
LABEL_7:
    sub_10004D598(a2, 32, v11, v32, v7, v8, v9, v10, (uint64_t)v34);
    v31 = 0;
    goto LABEL_12;
  }
  v12 = *(void **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v36 = v11;
  v14 = objc_msgSend(v12, "wipeLocalPasswordsInTransaction:error:", v13, &v36);
  v15 = v36;

  if ((v14 & 1) == 0)
  {
    sub_10004D598(a2, 32, v15, CFSTR("Wiping passwords"), v16, v17, v18, v19, (uint64_t)v34);
    v31 = 0;
    v11 = v15;
    goto LABEL_12;
  }
  v20 = *(void **)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  v35 = v15;
  v22 = objc_msgSend(v20, "resetSyncTablesInTransaction:error:", v21, &v35);
  v11 = v35;

  if ((v22 & 1) == 0)
  {
    v32 = CFSTR("Resetting sync tables");
    goto LABEL_7;
  }
  v23 = *(void **)(a1 + 32);
  v24 = *(_QWORD *)(a1 + 40);
  v34 = v11;
  v25 = objc_msgSend(v23, "resetMetadataInTransaction:error:", v24, &v34);
  v26 = v34;

  if ((v25 & 1) != 0)
  {
    v31 = 1;
  }
  else
  {
    sub_10004D598(a2, 32, v26, CFSTR("Resetting metadata"), v27, v28, v29, v30, (uint64_t)v34);
    v31 = 0;
  }
  v11 = v26;
LABEL_12:

  return v31;
}

void sub_10018D834(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  id obj;
  _QWORD v6[5];

  v2 = (void *)a1[4];
  v6[1] = 3221225472;
  v6[2] = sub_10018D8C8;
  v6[3] = &unk_1002E9F10;
  v6[4] = v2;
  v3 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v3 + 40);
  v6[0] = _NSConcreteStackBlock;
  v4 = objc_msgSend(v2, "withConnection:error:", v6, &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v4;
}

uint64_t sub_10018D8C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10018D928;
  v4[3] = &unk_1002E9EE8;
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a2;
  return sub_100147CEC(a2, a3, v4);
}

uint64_t sub_10018D928(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unsigned __int8 v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v22;
  id v23;

  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v23 = 0;
  v6 = objc_msgSend(v4, "resetSyncTablesInTransaction:error:", v5, &v23);
  v11 = v23;
  if ((v6 & 1) != 0)
  {
    v12 = *(void **)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v22 = v11;
    v14 = objc_msgSend(v12, "resetMetadataInTransaction:error:", v13, &v22);
    v15 = v22;

    if ((v14 & 1) != 0)
    {
      v20 = 1;
    }
    else
    {
      sub_10004D598(a2, 31, v15, CFSTR("Resetting metadata"), v16, v17, v18, v19, (uint64_t)v22);
      v20 = 0;
    }
    v11 = v15;
  }
  else
  {
    sub_10004D598(a2, 31, v11, CFSTR("Resetting sync tables"), v7, v8, v9, v10, (uint64_t)v22);
    v20 = 0;
  }

  return v20;
}

uint64_t sub_10018D9F8(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  void *v8;
  __CFString *v9;
  void *v10;
  __CFString *v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  _QWORD v17[4];
  id v18;
  sqlite3_stmt *v19;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if ((sub_100147A5C(a2, 1, v7, a3) & 1) == 0)
    goto LABEL_8;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ownerName"));
  if (!sub_100147A5C(a2, 2, v9, a3))
  {
LABEL_7:

LABEL_8:
    return 0;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v11 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneName"));
  if (!sub_100147A5C(a2, 3, v11, a3))
  {

    goto LABEL_7;
  }
  v12 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordName"));
  v16 = sub_100147A5C(a2, 4, v12, a3);

  if (!v16)
    return 0;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10018DBAC;
  v17[3] = &unk_1002EA308;
  v19 = a2;
  v13 = *(_QWORD *)(a1 + 56);
  v18 = *(id *)(a1 + 48);
  v14 = sub_100147AB8(v13, a2, a3, v17);

  return v14;
}

BOOL sub_10018DBAC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sqlite3_int64 v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;

  v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v6 = (void *)objc_opt_class(KCSharingOutgoingRow);
  v7 = sub_10018DC34(v6, v5, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
    objc_msgSend(v9, "addObject:", v8);

  }
  return v8 != 0;
}

id sub_10018DC34(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  _QWORD **v6;
  void *v7;
  id v8;
  id v9;
  id v11;

  v11 = 0;
  v5 = objc_msgSend(a1, "databaseItemClass");
  v6 = (_QWORD **)sub_10001E9E8((uint64_t)v5, (const __CFDictionary *)&__NSDictionary0__struct, dword_1003414E0, (__CFString **)&v11);
  v7 = v6;
  if (v6 && (sub_10001D87C(v6, a2, (__CFString **)&v11) & 1) != 0)
  {
    v8 = v7;
  }
  else
  {
    v9 = v11;
    if (a3)
    {
      v8 = 0;
      *a3 = v11;
      v11 = 0;
    }
    else
    {
      if (v11)
      {
        v11 = 0;
        CFRelease(v9);
      }
      v8 = 0;
    }
  }

  return v8;
}

uint64_t sub_10018DCE0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10018DD64;
  v8[3] = &unk_1002EA128;
  v5 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = a2;
  v6 = sub_100147CEC(a2, a3, v8);

  return v6;
}

id sub_10018DD64(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "dropOutgoingChangeForRecordID:inTransaction:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2);
}

void sub_10018DD78(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
  objc_msgSend(v3, "addObject:", a2);

}

void sub_10018DDB8(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
  objc_msgSend(v3, "addObject:", a2);

}

void sub_10018DDF8(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
  objc_msgSend(v3, "addObject:", a2);

}

void sub_10018DE38(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
  objc_msgSend(v3, "addObject:", a2);

}

uint64_t sub_10018DE78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10018DEFC;
  v8[3] = &unk_1002EA128;
  v5 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = a2;
  v6 = sub_100147CEC(a2, a3, v8);

  return v6;
}

id sub_10018DEFC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateMirrorWithDeletedZoneIDs:inTransaction:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2);
}

uint64_t sub_10018DF10(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  id v10;
  id v11;
  uint64_t v12;

  v9[0] = _NSConcreteStackBlock;
  v9[2] = sub_10018DFB8;
  v9[3] = &unk_1002EA178;
  v6 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v9[1] = 3221225472;
  v10 = v6;
  v12 = a2;
  v11 = *(id *)(a1 + 48);
  v7 = sub_100147CEC(a2, a3, v9);

  return v7;
}

id sub_10018DFB8(uint64_t a1, _QWORD *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  int v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFString *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  unsigned __int8 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v43;
  void *v45;
  id v46;
  id v47;
  id v48;
  _QWORD v49[2];
  BOOL (*v50)(uint64_t, uint64_t);
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  id v60;
  _BYTE v61[128];

  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "plan"));
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v3 = *(id *)(a1 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v56, v61, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v57;
    while (2)
    {
      v8 = 0;
      v9 = v6;
      do
      {
        if (*(_QWORD *)v57 != v7)
          objc_enumerationMutation(v3);
        v10 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)v8);
        v49[0] = _NSConcreteStackBlock;
        v49[1] = 3221225472;
        v50 = sub_10018E2B8;
        v51 = &unk_1002EA178;
        v52 = *(_QWORD *)(a1 + 32);
        v53 = v10;
        v55 = *(_QWORD *)(a1 + 56);
        v54 = v45;
        v11 = v49;
        v12 = objc_autoreleasePoolPush();
        v60 = 0;
        v13 = ((uint64_t (*)(_QWORD *, id *))v50)(v11, &v60);
        v14 = v60;
        objc_autoreleasePoolPop(v12);
        v15 = v9;
        if ((v13 & 1) == 0)
          v15 = objc_retainAutorelease(v14);

        v6 = v15;
        if (!v13)
        {

          v20 = CFSTR("Moving saved records to mirror");
          goto LABEL_20;
        }
        v8 = (char *)v8 + 1;
        v9 = v6;
      }
      while (v5 != v8);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v56, v61, 16);
      if (v5)
        continue;
      break;
    }
  }
  else
  {
    v6 = 0;
  }
  v21 = v6;

  v22 = *(_QWORD *)(a1 + 56);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v48 = v21;
  v24 = objc_msgSend(v45, "applyInTransaction:withAccessGroups:error:", v22, v23, &v48);
  v6 = v48;

  if ((v24 & 1) != 0)
  {
    v25 = *(void **)(a1 + 32);
    v26 = *(_QWORD *)(a1 + 48);
    v27 = *(_QWORD *)(a1 + 56);
    v47 = 0;
    v28 = objc_msgSend(v25, "dropDeletionsForRecordIDs:inTransaction:error:", v26, v27, &v47);
    v33 = v47;
    if ((v28 & 1) != 0)
    {
      v34 = *(void **)(a1 + 32);
      v35 = *(_QWORD *)(a1 + 56);
      v46 = 0;
      v36 = objc_msgSend(v34, "resolveConflictingPrimaryKeysInTransaction:error:", v35, &v46);
      v41 = v46;
      if ((v36 & 1) == 0)
        sub_10004D598(a2, 30, v41, CFSTR("Resolving primary key conflicts"), v37, v38, v39, v40, v43);

    }
    else
    {
      sub_10004D598(a2, 30, v33, CFSTR("Dropping entries for deleted records from mirror"), v29, v30, v31, v32, v43);
      v36 = 0;
    }

  }
  else
  {
    v20 = CFSTR("Moving entries for saved records to mirror");
LABEL_20:
    sub_10004D598(a2, 30, v6, v20, v16, v17, v18, v19, v43);
    v36 = 0;
  }

  return v36;
}

BOOL sub_10018E2B8(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  KCSharingOutgoingEntry *v7;
  KCSharingOutgoingEntry *v8;
  _BOOL8 v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  KCSharingMirrorEntry *v15;
  void *v16;
  void *v17;

  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fetchOutgoingDatabaseItemWithRecordID:inTransaction:error:", v5, *(_QWORD *)(a1 + 56), a2));

  if (v6)
  {
    v7 = -[KCSharingOutgoingRow initWithOutgoingDatabaseItem:error:]([KCSharingOutgoingEntry alloc], "initWithOutgoingDatabaseItem:error:", v6, a2);
    v8 = v7;
    v9 = v7 != 0;
    if (!v7)
    {
LABEL_16:

      goto LABEL_17;
    }
    v10 = -[KCSharingOutgoingEntry type](v7, "type");
    if ((unint64_t)(v10 - 1) >= 2)
    {
      if (v10)
      {
        if (v10 == (char *)3)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
          v12 = objc_claimAutoreleasedReturnValue(-[KCSharingOutgoingEntry shareWithAccessGroups:error:](v8, "shareWithAccessGroups:error:", v11, 0));
LABEL_9:
          v13 = (void *)v12;

          if (objc_msgSend(v13, "isFullyDecoded"))
            v14 = 0;
          else
            v14 = 2;

          goto LABEL_15;
        }
        v14 = 0;
      }
      else
      {
        v14 = 2;
      }
LABEL_15:
      v15 = -[KCSharingMirrorEntry initWithSavedRecord:forOutgoingEntry:flags:]([KCSharingMirrorEntry alloc], "initWithSavedRecord:forOutgoingEntry:flags:", *(_QWORD *)(a1 + 40), v8, v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "insertIntoMirror"));
      objc_msgSend(v16, "addObject:", v15);

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "itemsToDelete"));
      objc_msgSend(v17, "addObject:", v6);

      goto LABEL_16;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
    v12 = objc_claimAutoreleasedReturnValue(-[KCSharingOutgoingEntry remoteItemWithAccessGroups:error:](v8, "remoteItemWithAccessGroups:error:", v11, 0));
    goto LABEL_9;
  }
  v9 = 0;
LABEL_17:

  return v9;
}

uint64_t sub_10018E450(uint64_t a1, sqlite3_stmt *a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  void *v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  id obj;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = a3;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v6)
  {
    v7 = v6;
    v19 = *(_QWORD *)v22;
    v8 = 1;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        v10 = v8;
        if (*(_QWORD *)v22 != v19)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyset"));
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v11));

        v14 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ownerName"));
        if (!sub_100147A5C(a2, v10, v14, a4))
          goto LABEL_14;
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "zoneName"));
        if ((sub_100147A5C(a2, (v10 + 1), v15, a4) & 1) == 0)
        {

LABEL_14:
LABEL_15:

          v8 = 0xFFFFFFFFLL;
          goto LABEL_16;
        }
        v16 = sub_100147A5C(a2, (v10 + 2), v13, a4);

        if ((v16 & 1) == 0)
          goto LABEL_15;

        v8 = (v10 + 3);
      }
      v8 = (v10 + 3);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (v7)
        continue;
      break;
    }
  }
  else
  {
    v8 = 1;
  }
LABEL_16:

  return v8;
}

BOOL sub_10018E638(uint64_t a1, uint64_t a2, _BYTE *a3, _QWORD *a4)
{
  void *v7;
  KCSharingOutgoingEntry *v8;
  id v9;
  void *v10;
  void *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  _BOOL8 v16;
  KCSharingOutgoingDeletion *v17;
  KCSharingOutgoingDeletion *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v36;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapResultRow:startingAt:error:", a2, 0, a4));
  if (v7)
  {
    v36 = 0;
    v8 = -[KCSharingOutgoingRow initWithOutgoingDatabaseItem:error:]([KCSharingOutgoingEntry alloc], "initWithOutgoingDatabaseItem:error:", v7, &v36);
    v9 = v36;
    v10 = v9;
    if (v8)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingOutgoingEntry record](v8, "record"));
      v12 = (char *)objc_msgSend(v11, "size");

      v13 = *(_QWORD *)(a1 + 72);
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v15 = &v12[*(_QWORD *)(v14 + 24)];
      if ((v13 & 0x8000000000000000) != 0 || (unint64_t)v15 <= v13)
      {
        *(_QWORD *)(v14 + 24) = v15;
        v26 = *(void **)(a1 + 56);
        v27 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingOutgoingEntry record](v8, "record"));
        objc_msgSend(v26, "addObject:", v27);

        v28 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingOutgoingEntry record](v8, "record"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "recordID"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "recordName"));
        v31 = *(void **)(a1 + 48);
        v32 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingOutgoingEntry record](v8, "record"));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "recordID"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "zoneID"));
        objc_msgSend(v31, "setObject:forKeyedSubscript:", v30, v34);

        v16 = 1;
      }
      else
      {
        v16 = 1;
        *a3 = 1;
      }
    }
    else if (sub_10004D530(v9))
    {
      v17 = -[KCSharingOutgoingRow initWithOutgoingDatabaseItem:error:]([KCSharingOutgoingDeletion alloc], "initWithOutgoingDatabaseItem:error:", v7, a4);
      v18 = v17;
      v16 = v17 != 0;
      if (v17)
      {
        v19 = *(void **)(a1 + 40);
        v20 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingOutgoingDeletion recordID](v17, "recordID"));
        objc_msgSend(v19, "addObject:", v20);

        v21 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingOutgoingDeletion recordID](v18, "recordID"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "recordName"));
        v23 = *(void **)(a1 + 48);
        v24 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingOutgoingDeletion recordID](v18, "recordID"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "zoneID"));
        objc_msgSend(v23, "setObject:forKeyedSubscript:", v22, v25);

      }
    }
    else
    {
      v16 = 0;
      if (a4)
        *a4 = objc_retainAutorelease(v10);
    }

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

uint64_t sub_10018E8B4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id *v45;
  void *v46;
  char v47;
  void *v48;
  void *v49;
  void *v50;
  id *v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _QWORD v61[2];
  void (*v62)(uint64_t, void *, char *);
  void *v63;
  id v64;
  id v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  void (*v75)(uint64_t, void *, char *);
  void *v76;
  id v77;
  id v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[5];
  id v88;
  uint64_t v89;
  id v90;
  _QWORD v91[5];
  id v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  id *v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t);
  void (*v99)(uint64_t);
  id v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  char v104;
  char v105;

  v101 = 0;
  v102 = &v101;
  v103 = 0x2020000000;
  v104 = 1;
  v95 = 0;
  v96 = (id *)&v95;
  v97 = 0x3032000000;
  v98 = sub_10018D5B8;
  v99 = sub_10018D5C8;
  v100 = 0;
  v6 = objc_msgSend(*(id *)(a1 + 32), "fetchBehavior");
  if (v6 == (id)1)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyset"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "allKeys"));

    v24 = objc_msgSend(v22, "count");
    v25 = *(void **)(a1 + 32);
    if (v24)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "keyset"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "allKeys"));
      v28 = sqlite3_limit(*(sqlite3 **)(a2 + 64), 9, -1);
      v74[0] = _NSConcreteStackBlock;
      v74[1] = 3221225472;
      v75 = sub_10018F114;
      v76 = &unk_1002EA4C0;
      v77 = *(id *)(a1 + 32);
      v78 = *(id *)(a1 + 40);
      v82 = &v101;
      v29 = *(void **)(a1 + 64);
      v84 = *(_QWORD *)(a1 + 72);
      v85 = a2;
      v83 = &v95;
      v30 = v29;
      v31 = *(void **)(a1 + 56);
      v79 = *(_QWORD *)(a1 + 48);
      v80 = v30;
      v32 = v31;
      v33 = *(_QWORD *)(a1 + 80);
      v81 = v32;
      v86 = v33;
      v34 = v27;
      v35 = v74;
      v36 = objc_msgSend(v34, "count");
      v37 = (v28 & ~(v28 >> 31)) - 2;
      if (v37 >= 3 && v36)
      {
        v105 = 0;
        v38 = (unint64_t)objc_msgSend(v34, "count");
        if (v38 >= v37 / 3)
          v39 = v37 / 3;
        else
          v39 = v38;
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "subarrayWithRange:", 0, v39));
        v75((uint64_t)v35, v40, &v105);

      }
      v41 = v77;
    }
    else
    {
      v42 = objc_msgSend(v25, "databaseScope");
      if (v42 == (id)2)
      {
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "columnNamesWithTableName:", CFSTR("o")));
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "componentsJoinedByString:", CFSTR(", ")));
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT %1$@                                   FROM sharingOutgoingQueue o                                   WHERE (o.agrp, o.ownr) = (?1, ?2)                                   ORDER BY o.zone, o.uuid                                   LIMIT %2$ld"), v50, *(_QWORD *)(a1 + 72)));

        v51 = v96;
        v94 = v96[5];
        v91[0] = _NSConcreteStackBlock;
        v91[1] = 3221225472;
        v91[2] = sub_10018EF04;
        v91[3] = &unk_1002EA100;
        v52 = *(void **)(a1 + 56);
        v91[4] = *(_QWORD *)(a1 + 48);
        v93 = a2;
        v92 = v52;
        v53 = sub_10014783C(a2, v41, &v94, v91);
        objc_storeStrong(v51 + 5, v94);
        *((_BYTE *)v102 + 24) = v53;
        v48 = v92;
      }
      else
      {
        if (v42 != (id)3)
        {
          v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
          v57 = *(_QWORD *)(a1 + 80);
          v58 = *(_QWORD *)(a1 + 48);
          v59 = CKDatabaseScopeString(objc_msgSend(*(id *)(a1 + 32), "databaseScope"));
          v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
          objc_msgSend(v56, "handleFailureInMethod:object:file:lineNumber:description:", v57, v58, CFSTR("KCSharingStore.m"), 2361, CFSTR("Can't fetch initial batch of outgoing changes in all zones for database with %@ scope"), v60);

          goto LABEL_26;
        }
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "columnNamesWithTableName:", CFSTR("o")));
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "componentsJoinedByString:", CFSTR(", ")));
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT %1$@                                   FROM sharingOutgoingQueue o                                   WHERE o.agrp = ?1 AND                                         o.ownr <> ?2                                   ORDER BY o.ownr, o.zone, o.uuid                                   LIMIT %2$ld"), v44, *(_QWORD *)(a1 + 72)));

        v45 = v96;
        v90 = v96[5];
        v87[0] = _NSConcreteStackBlock;
        v87[1] = 3221225472;
        v87[2] = sub_10018F00C;
        v87[3] = &unk_1002EA100;
        v46 = *(void **)(a1 + 56);
        v87[4] = *(_QWORD *)(a1 + 48);
        v89 = a2;
        v88 = v46;
        v47 = sub_10014783C(a2, v41, &v90, v87);
        objc_storeStrong(v45 + 5, v90);
        *((_BYTE *)v102 + 24) = v47;
        v48 = v88;
      }

    }
  }
  else
  {
    if (v6 != (id)2)
      goto LABEL_25;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyset"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allKeys"));
    v9 = sqlite3_limit(*(sqlite3 **)(a2 + 64), 9, -1);
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472;
    v62 = sub_10018F510;
    v63 = &unk_1002EA4C0;
    v64 = *(id *)(a1 + 32);
    v65 = *(id *)(a1 + 40);
    v69 = &v101;
    v10 = *(void **)(a1 + 64);
    v71 = *(_QWORD *)(a1 + 72);
    v72 = a2;
    v70 = &v95;
    v11 = v10;
    v12 = *(void **)(a1 + 56);
    v66 = *(_QWORD *)(a1 + 48);
    v67 = v11;
    v13 = v12;
    v14 = *(_QWORD *)(a1 + 80);
    v68 = v13;
    v73 = v14;
    v15 = v8;
    v16 = v61;
    v17 = objc_msgSend(v15, "count");
    v18 = (v9 & ~(v9 >> 31)) - 2;
    if (v18 >= 3 && v17)
    {
      v105 = 0;
      v19 = (unint64_t)objc_msgSend(v15, "count");
      if (v19 >= v18 / 3)
        v20 = v18 / 3;
      else
        v20 = v19;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "subarrayWithRange:", 0, v20));
      v62((uint64_t)v16, v21, &v105);

    }
    v22 = v64;
  }

LABEL_25:
  if (*((_BYTE *)v102 + 24))
  {
LABEL_26:
    v54 = 1;
    goto LABEL_29;
  }
  v54 = 0;
  if (a3)
    *a3 = objc_retainAutorelease(v96[5]);
LABEL_29:
  _Block_object_dispose(&v95, 8);

  _Block_object_dispose(&v101, 8);
  return v54;
}

void sub_10018EECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10018EF04(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  sqlite3_stmt *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 2, (const __CFString *)CKCurrentUserDefaultName, a3);

  if ((v8 & 1) == 0)
    return 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10018FE14;
  v12[3] = &unk_1002EA0D8;
  v9 = *(_QWORD *)(a1 + 48);
  v13 = *(id *)(a1 + 40);
  v14 = a2;
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_10018F00C(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  sqlite3_stmt *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 2, (const __CFString *)CKCurrentUserDefaultName, a3);

  if ((v8 & 1) == 0)
    return 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10018FDFC;
  v12[3] = &unk_1002EA0D8;
  v9 = *(_QWORD *)(a1 + 48);
  v13 = *(id *)(a1 + 40);
  v14 = a2;
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

void sub_10018F114(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  id v6;
  char *v7;
  void *j;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void *v17;
  id *v18;
  id *v19;
  id v20;
  uint64_t v21;
  id *v22;
  char v23;
  void *v24;
  char *v25;
  void *i;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD v43[4];
  _QWORD v44[2];
  id v45;
  _QWORD v46[2];
  void *v47;
  _QWORD v48[4];
  _QWORD v49[2];
  id v50;
  _QWORD v51[2];
  void *v52;

  v5 = a2;
  v6 = objc_msgSend(*(id *)(a1 + 32), "databaseScope");
  if (v6 == (id)3)
  {
    v25 = (char *)objc_msgSend(v5, "count");
    for (i = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v25));
          v25;
          --v25)
    {
      objc_msgSend(i, "addObject:", CFSTR("(?, ?, ?)"));
    }
    v27 = objc_msgSend(i, "copy");

    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "componentsJoinedByString:", CFSTR(", ")));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "columnNamesWithTableName:", CFSTR("o")));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "componentsJoinedByString:", CFSTR(", ")));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("WITH keyset(ownr, zone, uuid) AS (VALUES %1$@)                                   SELECT %2$@                                   FROM sharingOutgoingQueue o                                   LEFT JOIN keyset k ON (k.ownr, k.zone) = (o.ownr, o.zone)                                   WHERE o.agrp = ? AND                                         o.ownr <> ? AND                                         (k.uuid IS NULL OR o.uuid > k.uuid)                                   ORDER BY o.ownr, o.zone, o.uuid                                   LIMIT %3$ld"), v28, v30, *(_QWORD *)(a1 + 88)));

    v31 = *(_QWORD *)(a1 + 96);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v33 = *(void **)(v32 + 40);
    v16 = (void **)(v32 + 40);
    v47 = v33;
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_10018FCA8;
    v43[3] = &unk_1002EA498;
    v18 = &v45;
    v45 = *(id *)(a1 + 56);
    v19 = (id *)v44;
    v34 = v5;
    v35 = *(_QWORD *)(a1 + 48);
    v44[0] = v34;
    v44[1] = v35;
    v46[1] = *(_QWORD *)(a1 + 96);
    v22 = (id *)v46;
    v46[0] = *(id *)(a1 + 64);
    v23 = sub_10014783C(v31, v13, &v47, v43);
    v24 = v47;
  }
  else
  {
    if (v6 != (id)2)
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      v39 = *(_QWORD *)(a1 + 104);
      v40 = *(_QWORD *)(a1 + 48);
      v41 = CKDatabaseScopeString(objc_msgSend(*(id *)(a1 + 32), "databaseScope"));
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      objc_msgSend(v38, "handleFailureInMethod:object:file:lineNumber:description:", v39, v40, CFSTR("KCSharingStore.m"), 2445, CFSTR("Can't fetch next batch of outgoing changes in all zones for database with %@ scope"), v42);

LABEL_12:
      *a3 = 1;
      goto LABEL_13;
    }
    v7 = (char *)objc_msgSend(v5, "count");
    for (j = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v7));
          v7;
          --v7)
    {
      objc_msgSend(j, "addObject:", CFSTR("(?, ?, ?)"));
    }
    v9 = objc_msgSend(j, "copy");

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "componentsJoinedByString:", CFSTR(", ")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "columnNamesWithTableName:", CFSTR("o")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "componentsJoinedByString:", CFSTR(", ")));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("WITH keyset(ownr, zone, uuid) AS (VALUES %1$@)                                   SELECT %2$@                                   FROM sharingOutgoingQueue o                                   LEFT JOIN keyset k ON (k.ownr, k.zone) = (o.ownr, o.zone)                                   WHERE (o.agrp, o.ownr) = (?, ?) AND                                         (k.uuid IS NULL OR o.uuid > k.uuid)                                   ORDER BY o.zone, o.uuid                                   LIMIT %3$ld"), v10, v12, *(_QWORD *)(a1 + 88)));

    v14 = *(_QWORD *)(a1 + 96);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v17 = *(void **)(v15 + 40);
    v16 = (void **)(v15 + 40);
    v52 = v17;
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_10018FB84;
    v48[3] = &unk_1002EA498;
    v18 = &v50;
    v50 = *(id *)(a1 + 56);
    v19 = (id *)v49;
    v20 = v5;
    v21 = *(_QWORD *)(a1 + 48);
    v49[0] = v20;
    v49[1] = v21;
    v51[1] = *(_QWORD *)(a1 + 96);
    v22 = (id *)v51;
    v51[0] = *(id *)(a1 + 64);
    v23 = sub_10014783C(v14, v13, &v52, v48);
    v24 = v52;
  }
  v36 = v24;
  v37 = *v16;
  *v16 = v36;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v23;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
    goto LABEL_12;
LABEL_13:

}

void sub_10018F510(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  id v6;
  char *v7;
  void *j;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void *v17;
  id *v18;
  id *v19;
  id v20;
  uint64_t v21;
  id *v22;
  char v23;
  void *v24;
  char *v25;
  void *i;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD v43[4];
  _QWORD v44[2];
  id v45;
  _QWORD v46[2];
  void *v47;
  _QWORD v48[4];
  _QWORD v49[2];
  id v50;
  _QWORD v51[2];
  void *v52;

  v5 = a2;
  v6 = objc_msgSend(*(id *)(a1 + 32), "databaseScope");
  if (v6 == (id)3)
  {
    v25 = (char *)objc_msgSend(v5, "count");
    for (i = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v25));
          v25;
          --v25)
    {
      objc_msgSend(i, "addObject:", CFSTR("(?, ?, ?)"));
    }
    v27 = objc_msgSend(i, "copy");

    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "componentsJoinedByString:", CFSTR(", ")));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "columnNamesWithTableName:", CFSTR("o")));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "componentsJoinedByString:", CFSTR(", ")));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("WITH keyset(ownr, zone, uuid) AS (VALUES %1$@)                                   SELECT %2$@                                   FROM sharingOutgoingQueue o                                   JOIN keyset k ON (k.ownr, k.zone) = (o.ownr, o.zone) AND                                                    o.uuid > k.uuid                                   WHERE o.agrp = ? AND                                         o.ownr <> ?                                   ORDER BY o.ownr, o.zone, o.uuid                                   LIMIT %3$ld"), v28, v30, *(_QWORD *)(a1 + 88)));

    v31 = *(_QWORD *)(a1 + 96);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v33 = *(void **)(v32 + 40);
    v16 = (void **)(v32 + 40);
    v47 = v33;
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_10018FA30;
    v43[3] = &unk_1002EA498;
    v18 = &v45;
    v45 = *(id *)(a1 + 56);
    v19 = (id *)v44;
    v34 = v5;
    v35 = *(_QWORD *)(a1 + 48);
    v44[0] = v34;
    v44[1] = v35;
    v46[1] = *(_QWORD *)(a1 + 96);
    v22 = (id *)v46;
    v46[0] = *(id *)(a1 + 64);
    v23 = sub_10014783C(v31, v13, &v47, v43);
    v24 = v47;
  }
  else
  {
    if (v6 != (id)2)
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
      v39 = *(_QWORD *)(a1 + 104);
      v40 = *(_QWORD *)(a1 + 48);
      v41 = CKDatabaseScopeString(objc_msgSend(*(id *)(a1 + 32), "databaseScope"));
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      objc_msgSend(v38, "handleFailureInMethod:object:file:lineNumber:description:", v39, v40, CFSTR("KCSharingStore.m"), 2525, CFSTR("Can't fetch batch of outgoing changes in desired zones for database with %@ scope"), v42);

LABEL_12:
      *a3 = 1;
      goto LABEL_13;
    }
    v7 = (char *)objc_msgSend(v5, "count");
    for (j = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v7));
          v7;
          --v7)
    {
      objc_msgSend(j, "addObject:", CFSTR("(?, ?, ?)"));
    }
    v9 = objc_msgSend(j, "copy");

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "componentsJoinedByString:", CFSTR(", ")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "columnNamesWithTableName:", CFSTR("o")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "componentsJoinedByString:", CFSTR(", ")));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("WITH keyset(ownr, zone, uuid) AS (VALUES %1$@)                                   SELECT %2$@                                   FROM sharingOutgoingQueue o                                   JOIN keyset k ON (k.ownr, k.zone) = (o.ownr, o.zone) AND                                                    o.uuid > k.uuid                                   WHERE (o.agrp, o.ownr) = (?, ?)                                   ORDER BY o.zone, o.uuid                                   LIMIT %3$ld"), v10, v12, *(_QWORD *)(a1 + 88)));

    v14 = *(_QWORD *)(a1 + 96);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v17 = *(void **)(v15 + 40);
    v16 = (void **)(v15 + 40);
    v52 = v17;
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_10018F90C;
    v48[3] = &unk_1002EA498;
    v18 = &v50;
    v50 = *(id *)(a1 + 56);
    v19 = (id *)v49;
    v20 = v5;
    v21 = *(_QWORD *)(a1 + 48);
    v49[0] = v20;
    v49[1] = v21;
    v51[1] = *(_QWORD *)(a1 + 96);
    v22 = (id *)v51;
    v51[0] = *(id *)(a1 + 64);
    v23 = sub_10014783C(v14, v13, &v52, v48);
    v24 = v52;
  }
  v36 = v24;
  v37 = *v16;
  *v16 = v36;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v23;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
    goto LABEL_12;
LABEL_13:

}

uint64_t sub_10018F90C(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  id v15;
  sqlite3_stmt *v16;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  if ((v6 & 0x80000000) != 0)
    return 0;
  v7 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessGroups"));
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "entryAccessGroup"));
  if (!sub_100147A5C(a2, v7, v9, a3))
  {

    return 0;
  }
  v10 = sub_100147A5C(a2, (v7 + 1), (const __CFString *)CKCurrentUserDefaultName, a3);

  if ((v10 & 1) == 0)
    return 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10018FB6C;
  v14[3] = &unk_1002EA0D8;
  v11 = *(_QWORD *)(a1 + 64);
  v15 = *(id *)(a1 + 56);
  v16 = a2;
  v12 = sub_100147AB8(v11, a2, a3, v14);

  return v12;
}

uint64_t sub_10018FA30(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  id v15;
  sqlite3_stmt *v16;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  if ((v6 & 0x80000000) != 0)
    return 0;
  v7 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessGroups"));
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "entryAccessGroup"));
  if (!sub_100147A5C(a2, v7, v9, a3))
  {

    return 0;
  }
  v10 = sub_100147A5C(a2, (v7 + 1), (const __CFString *)CKCurrentUserDefaultName, a3);

  if ((v10 & 1) == 0)
    return 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10018FB54;
  v14[3] = &unk_1002EA0D8;
  v11 = *(_QWORD *)(a1 + 64);
  v15 = *(id *)(a1 + 56);
  v16 = a2;
  v12 = sub_100147AB8(v11, a2, a3, v14);

  return v12;
}

uint64_t sub_10018FB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3);
}

uint64_t sub_10018FB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3);
}

uint64_t sub_10018FB84(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  id v15;
  sqlite3_stmt *v16;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  if ((v6 & 0x80000000) != 0)
    return 0;
  v7 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessGroups"));
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "entryAccessGroup"));
  if (!sub_100147A5C(a2, v7, v9, a3))
  {

    return 0;
  }
  v10 = sub_100147A5C(a2, (v7 + 1), (const __CFString *)CKCurrentUserDefaultName, a3);

  if ((v10 & 1) == 0)
    return 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10018FDE4;
  v14[3] = &unk_1002EA0D8;
  v11 = *(_QWORD *)(a1 + 64);
  v15 = *(id *)(a1 + 56);
  v16 = a2;
  v12 = sub_100147AB8(v11, a2, a3, v14);

  return v12;
}

uint64_t sub_10018FCA8(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  id v15;
  sqlite3_stmt *v16;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  if ((v6 & 0x80000000) != 0)
    return 0;
  v7 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessGroups"));
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "entryAccessGroup"));
  if (!sub_100147A5C(a2, v7, v9, a3))
  {

    return 0;
  }
  v10 = sub_100147A5C(a2, (v7 + 1), (const __CFString *)CKCurrentUserDefaultName, a3);

  if ((v10 & 1) == 0)
    return 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10018FDCC;
  v14[3] = &unk_1002EA0D8;
  v11 = *(_QWORD *)(a1 + 64);
  v15 = *(id *)(a1 + 56);
  v16 = a2;
  v12 = sub_100147AB8(v11, a2, a3, v14);

  return v12;
}

uint64_t sub_10018FDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3);
}

uint64_t sub_10018FDE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3);
}

uint64_t sub_10018FDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3);
}

uint64_t sub_10018FE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3);
}

BOOL sub_10018FE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  KCSharingOutgoingEntry *v6;
  KCSharingOutgoingEntry *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchOutgoingDatabaseItemWithRecordID:inTransaction:error:", *(_QWORD *)(a1 + 40), a2, a3));
  if (v5)
  {
    v6 = -[KCSharingOutgoingRow initWithOutgoingDatabaseItem:error:]([KCSharingOutgoingEntry alloc], "initWithOutgoingDatabaseItem:error:", v5, a3);
    v7 = v6;
    v8 = v6 != 0;
    if (v6)
    {
      v9 = objc_claimAutoreleasedReturnValue(-[KCSharingOutgoingEntry record](v6, "record"));
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t sub_10018FED0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10018FF68;
  v8[3] = &unk_1002E9F60;
  v5 = *(void **)(a1 + 32);
  v8[4] = *(_QWORD *)(a1 + 40);
  v10 = a2;
  v9 = *(id *)(a1 + 48);
  v6 = sub_10014783C(a2, v5, a3, v8);

  return v6;
}

uint64_t sub_10018FF68(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  sqlite3_stmt *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3)
    || !sub_100147A5C(a2, 2, (const __CFString *)CKCurrentUserDefaultName, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 3, (const __CFString *)CKRecordNameZoneWideShare, a3);

  if ((v8 & 1) == 0)
    return 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100190094;
  v12[3] = &unk_1002EA308;
  v14 = a2;
  v9 = *(_QWORD *)(a1 + 48);
  v13 = *(id *)(a1 + 40);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_100190094(uint64_t a1)
{
  NSString *v2;
  void *v3;
  id v4;

  v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 40), 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_msgSend(objc_alloc((Class)CKRecordZoneID), "initWithZoneName:ownerName:", v3, CKCurrentUserDefaultName);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

  return 1;
}

uint64_t sub_10019011C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001901B4;
  v8[3] = &unk_1002E9F60;
  v5 = *(void **)(a1 + 32);
  v8[4] = *(_QWORD *)(a1 + 40);
  v10 = a2;
  v9 = *(id *)(a1 + 48);
  v6 = sub_10014783C(a2, v5, a3, v8);

  return v6;
}

uint64_t sub_1001901B4(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  sqlite3_stmt *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3)
    || !sub_100147A5C(a2, 2, (const __CFString *)CKCurrentUserDefaultName, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 3, (const __CFString *)CKRecordNameZoneWideShare, a3);

  if ((v8 & 1) == 0)
    return 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001902E0;
  v12[3] = &unk_1002EA308;
  v14 = a2;
  v9 = *(_QWORD *)(a1 + 48);
  v13 = *(id *)(a1 + 40);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_1001902E0(uint64_t a1)
{
  NSString *v2;
  void *v3;
  id v4;
  id v5;

  v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 40), 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_msgSend(objc_alloc((Class)CKRecordZoneID), "initWithZoneName:ownerName:", v3, CKCurrentUserDefaultName);
  v5 = objc_msgSend(objc_alloc((Class)CKRecordZone), "initWithZoneID:", v4);
  objc_msgSend(v5, "setCapabilities:", 8);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

  return 1;
}

void sub_10019038C(_QWORD *a1, void *a2, _BYTE *a3)
{
  char *v4;
  void *i;
  id v6;
  void *v7;
  uint64_t v8;
  char *v9;
  void *j;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v25;
  id v26;
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  uint64_t v30;
  id obj;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[2];
  _BYTE v37[128];

  v26 = a2;
  v4 = (char *)objc_msgSend(v26, "count");
  for (i = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v4));
        v4;
        --v4)
  {
    objc_msgSend(i, "addObject:", CFSTR("(?, ?, ?)"));
  }
  v6 = objc_msgSend(i, "copy");

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "componentsJoinedByString:", CFSTR(", ")));
  v8 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("WITH recordIDs(ownr, zone, uuid) AS (VALUES %1$@)               DELETE FROM sharingOutgoingQueue               WHERE rowid IN(                  SELECT o.rowid FROM sharingOutgoingQueue o                   JOIN recordIDs d ON (d.ownr, d.zone, d.uuid) = (o.ownr, o.zone, o.uuid)                   WHERE o.agrp = ?              )"), v7));

  v9 = (char *)objc_msgSend(v26, "count");
  for (j = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v9));
        v9;
        --v9)
  {
    objc_msgSend(j, "addObject:", CFSTR("(?, ?, ?)"));
  }
  v11 = objc_msgSend(j, "copy");

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "componentsJoinedByString:", CFSTR(", ")));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("WITH recordIDs(ownr, zone, uuid) AS (VALUES %1$@)               DELETE FROM sharingMirror               WHERE rowid IN(                  SELECT m.rowid FROM sharingMirror m                   JOIN recordIDs d ON (d.ownr, d.zone, d.uuid) = (m.ownr, m.zone, m.uuid)                   WHERE m.agrp = ?              )"), v12));

  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v25 = (void *)v8;
  v36[0] = v8;
  v36[1] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v36, 2));
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v33;
LABEL_7:
    v18 = 0;
    while (1)
    {
      if (*(_QWORD *)v33 != v17)
        objc_enumerationMutation(v14);
      v19 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v18);
      v20 = a1[7];
      v21 = *(_QWORD *)(a1[6] + 8);
      obj = *(id *)(v21 + 40);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_1001906A4;
      v27[3] = &unk_1002E9F60;
      v22 = v26;
      v23 = a1[4];
      v28 = v22;
      v29 = v23;
      v30 = a1[7];
      LOBYTE(v19) = sub_10014783C(v20, v19, &obj, v27);
      objc_storeStrong((id *)(v21 + 40), obj);
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = (_BYTE)v19;
      LODWORD(v19) = *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24);

      if (!(_DWORD)v19)
        break;
      if (v16 == (id)++v18)
      {
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
        if (v16)
          goto LABEL_7;
        break;
      }
    }
  }

  if (!*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    *a3 = 1;

}

uint64_t sub_1001906A4(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  __CFString *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  __CFString *v17;
  int v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  _QWORD *v21;
  int v22;
  void *v23;
  __CFString *v24;
  _QWORD *v25;
  int v26;
  uint64_t v28;
  id obj;
  int v30;
  id v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];

  v5 = a1;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = *(id *)(a1 + 32);
  v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (v31)
  {
    v32 = *(_QWORD *)v34;
    v6 = 1;
    v28 = v5;
    while (2)
    {
      v7 = 0;
      do
      {
        v8 = v6;
        if (*(_QWORD *)v34 != v32)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v7);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneID"));
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ownerName"));
        if (!sub_100147A5C(a2, v8, v11, a3))
          goto LABEL_16;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneID"));
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneName"));
        v14 = v8 + 1;
        if (!sub_100147A5C(a2, (v8 + 1), v13, a3))
        {

LABEL_16:
LABEL_17:

          return 0;
        }
        v30 = v8;
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordName"));
        v16 = a3;
        v17 = (__CFString *)v15;
        v18 = v8 + 2;
        v19 = a2;
        v20 = a2;
        v21 = v16;
        v22 = sub_100147A5C(v20, (v14 + 1), v17, v16);

        if (!v22)
          goto LABEL_17;
        v7 = (char *)v7 + 1;
        v6 = (v18 + 1);
        a3 = v21;
        a2 = v19;
      }
      while (v31 != v7);
      v6 = (v30 + 3);
      v5 = v28;
      v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      if (v31)
        continue;
      break;
    }
  }
  else
  {
    v6 = 1;
  }

  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v5 + 40), "accessGroups"));
  v24 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "entryAccessGroup"));
  v25 = a3;
  v26 = sub_100147A5C(a2, v6, v24, a3);

  if (v26)
    return sub_100147AB8(*(_QWORD *)(v5 + 48), a2, v25, &stru_1002EA3D0);
  else
    return 0;
}

BOOL sub_100190918(id a1, BOOL *a2, id *a3)
{
  return 1;
}

uint64_t sub_100190920(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  void *v8;
  __CFString *v9;
  void *v10;
  __CFString *v11;
  __CFString *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  int v17;
  __int128 v18;
  _QWORD v19[4];
  __int128 v20;
  sqlite3_stmt *v21;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if ((sub_100147A5C(a2, 1, v7, a3) & 1) == 0)
    goto LABEL_8;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ownerName"));
  if (!sub_100147A5C(a2, 2, v9, a3))
  {
LABEL_7:

LABEL_8:
    return 0;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v11 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneName"));
  if (!sub_100147A5C(a2, 3, v11, a3))
  {

    goto LABEL_7;
  }
  v12 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordName"));
  v17 = sub_100147A5C(a2, 4, v12, a3);

  if (!v17)
    return 0;
  v13 = *(_QWORD *)(a1 + 64);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100190AE4;
  v19[3] = &unk_1002EA388;
  v18 = *(_OWORD *)(a1 + 48);
  v14 = (id)v18;
  v20 = v18;
  v21 = a2;
  v15 = sub_100147AB8(v13, a2, a3, v19);

  return v15;
}

BOOL sub_100190AE4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapResultRow:startingAt:error:", *(_QWORD *)(a1 + 48), 0, a3));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v8)
    *a2 = 1;
  return v8 != 0;
}

uint64_t sub_100190B50(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  _QWORD v11[7];

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  v8 = sub_100147A5C(a2, 1, v7, a3);

  if (!v8)
    return 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100190C20;
  v11[3] = &unk_1002EA338;
  v9 = *(_QWORD *)(a1 + 40);
  v11[4] = *(_QWORD *)(a1 + 48);
  v11[5] = a2;
  v11[6] = *(_QWORD *)(a1 + 56);
  return sub_100147AB8(v9, a2, a3, v11);
}

uint64_t sub_100190C20(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32))
    **(_BYTE **)(a1 + 32) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 40), 0) == 1;
  if (*(_QWORD *)(a1 + 48))
    **(_BYTE **)(a1 + 48) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 40), 1) == 1;
  return 1;
}

uint64_t sub_100190C88(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100190D10;
  v8[3] = &unk_1002EA128;
  v5 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v10 = a2;
  v9 = v5;
  v6 = sub_100147CEC(a2, a3, v8);

  return v6;
}

uint64_t sub_100190D10(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned __int8 v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unsigned __int8 v41;
  __CFString *v42;
  uint64_t v44;
  __int128 v45;
  _QWORD v46[5];
  __int128 v47;
  id v48;
  id v49;
  id v50;
  id v51;
  __int16 v52;
  id v53;

  v4 = (void *)a1[4];
  v5 = a1[6];
  v53 = 0;
  v6 = objc_msgSend(v4, "restageUnappliedMirrorEntriesInTransaction:error:", v5, &v53);
  v11 = v53;
  if ((v6 & 1) != 0)
  {
    v52 = 0;
    v12 = (void *)a1[4];
    v13 = a1[6];
    v51 = 0;
    v14 = objc_msgSend(v12, "hasIncomingEntries:deletions:inTransaction:error:", (char *)&v52 + 1, &v52, v13, &v51);
    v19 = v51;
    if ((v14 & 1) == 0)
    {
      sub_10004D598(a2, 28, v19, CFSTR("Checking for incoming rows"), v15, v16, v17, v18, v44);
      v20 = 0;
      goto LABEL_18;
    }
    if (!v52)
    {
      v20 = 1;
LABEL_18:

      goto LABEL_19;
    }
    v21 = (void *)a1[4];
    if ((_BYTE)v52)
    {
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472;
      v46[2] = sub_100190F60;
      v46[3] = &unk_1002EA128;
      v46[4] = v21;
      v45 = *(_OWORD *)(a1 + 5);
      v22 = (id)v45;
      v47 = v45;
      v20 = (uint64_t)objc_msgSend(v21, "withLocalFingerprintsTable:inTransaction:error:", v46, a1[6], a2);

      goto LABEL_18;
    }
    v23 = a1[6];
    v50 = 0;
    v24 = objc_msgSend(v21, "resolveMergeConflictsInTransaction:error:", v23, &v50);
    v29 = v50;
    if ((v24 & 1) != 0)
    {
      v31 = a1[5];
      v30 = a1[6];
      v32 = (void *)a1[4];
      v49 = v29;
      v33 = objc_msgSend(v32, "applyIncomingEntriesInTransaction:updateInfos:error:", v30, v31, &v49);
      v34 = v49;

      if ((v33 & 1) == 0)
      {
        sub_10004D598(a2, 28, v34, CFSTR("Applying incoming entries"), v35, v36, v37, v38, v44);
        v20 = 0;
        v29 = v34;
        goto LABEL_17;
      }
      v39 = (void *)a1[4];
      v40 = a1[6];
      v48 = v34;
      v41 = objc_msgSend(v39, "resolveConflictingPrimaryKeysInTransaction:error:", v40, &v48);
      v29 = v48;

      if ((v41 & 1) != 0)
      {
        v20 = 1;
LABEL_17:

        goto LABEL_18;
      }
      v42 = CFSTR("Resolving primary key conflicts");
    }
    else
    {
      v42 = CFSTR("Resolving merge conflicts");
    }
    sub_10004D598(a2, 28, v29, v42, v25, v26, v27, v28, v44);
    v20 = 0;
    goto LABEL_17;
  }
  sub_10004D598(a2, 28, v11, CFSTR("Restaging unapplied mirror entries"), v7, v8, v9, v10, v44);
  v20 = 0;
LABEL_19:

  return v20;
}

uint64_t sub_100190F60(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned __int8 v27;
  void *v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  __CFString *v32;
  __CFString *v33;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;

  v4 = a1[6];
  v5 = (void *)a1[4];
  v6 = a1[5];
  v40 = 0;
  v7 = objc_msgSend(v5, "applyIncomingShareDeletionsInTransaction:updateInfos:error:", v4, v6, &v40);
  v12 = v40;
  if ((v7 & 1) == 0)
  {
    v32 = CFSTR("Applying incoming share deletions");
LABEL_8:
    sub_10004D598(a2, 28, v12, v32, v8, v9, v10, v11, v35);
    v31 = 0;
    goto LABEL_11;
  }
  v13 = (void *)a1[4];
  v14 = a1[6];
  v39 = v12;
  v15 = objc_msgSend(v13, "resolveMergeConflictsInTransaction:error:", v14, &v39);
  v16 = v39;

  if ((v15 & 1) == 0)
  {
    v33 = CFSTR("Resolving merge conflicts");
LABEL_10:
    sub_10004D598(a2, 28, v16, v33, v17, v18, v19, v20, v35);
    v31 = 0;
    v12 = v16;
    goto LABEL_11;
  }
  v21 = (void *)a1[4];
  v22 = a1[6];
  v38 = v16;
  v23 = objc_msgSend(v21, "applyIncomingDeletionsInTransaction:error:", v22, &v38);
  v12 = v38;

  if ((v23 & 1) == 0)
  {
    v32 = CFSTR("Applying incoming deletions");
    goto LABEL_8;
  }
  v25 = a1[5];
  v24 = a1[6];
  v26 = (void *)a1[4];
  v37 = v12;
  v27 = objc_msgSend(v26, "applyIncomingEntriesInTransaction:updateInfos:error:", v24, v25, &v37);
  v16 = v37;

  if ((v27 & 1) == 0)
  {
    v33 = CFSTR("Applying incoming entries");
    goto LABEL_10;
  }
  v28 = (void *)a1[4];
  v29 = a1[6];
  v36 = v16;
  v30 = objc_msgSend(v28, "resolveConflictingPrimaryKeysInTransaction:error:", v29, &v36);
  v12 = v36;

  if ((v30 & 1) == 0)
  {
    v32 = CFSTR("Resolving primary key conflicts");
    goto LABEL_8;
  }
  v31 = 1;
LABEL_11:

  return v31;
}

uint64_t sub_1001910E8(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;
  sqlite3_stmt *v15;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  v8 = sub_100147A5C(a2, 1, v7, a3);

  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001911E4;
  v12[3] = &unk_1002EA060;
  v13 = *(id *)(a1 + 40);
  v15 = a2;
  v14 = *(id *)(a1 + 48);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

BOOL sub_1001911E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  KCSharingMirrorEntry *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  void *v20;
  id v22;
  id v23;

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v23 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapResultRow:startingAt:error:", v6, 0, &v23));
  v12 = v23;
  if (v7)
  {
    v22 = v12;
    v13 = -[KCSharingMirrorEntry initWithMirrorDatabaseItem:error:]([KCSharingMirrorEntry alloc], "initWithMirrorDatabaseItem:error:", v7, &v22);
    v14 = v22;

    v19 = v13 != 0;
    if (v13)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "reinsertIntoLocal"));
      objc_msgSend(v20, "addObject:", v13);

    }
    else
    {
      sub_10004D598(a3, 26, v14, CFSTR("Creating unapplied mirror entry"), v15, v16, v17, v18, (uint64_t)v22);
    }

  }
  else
  {
    sub_10004D598(a3, 25, v12, CFSTR("Creating database item for unapplied mirror entry"), v8, v9, v10, v11, (uint64_t)v22);
    v19 = 0;
    v14 = v12;
  }

  return v19;
}

uint64_t sub_1001912FC(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;
  sqlite3_stmt *v15;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  v8 = sub_100147A5C(a2, 1, v7, a3);

  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001915B8;
  v12[3] = &unk_1002EA060;
  v13 = *(id *)(a1 + 40);
  v15 = a2;
  v14 = *(id *)(a1 + 48);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_1001913F8(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;
  sqlite3_stmt *v15;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  v8 = sub_100147A5C(a2, 1, v7, a3);

  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001914F4;
  v12[3] = &unk_1002EA060;
  v13 = *(id *)(a1 + 40);
  v15 = a2;
  v14 = *(id *)(a1 + 48);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

BOOL sub_1001914F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  KCSharingMirrorEntry *v6;
  _BOOL8 v7;
  KCSharingMirrorEntry *v8;
  void *v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapResultRow:startingAt:error:", *(_QWORD *)(a1 + 48), 0, a3));
  if (v5)
  {
    v6 = -[KCSharingMirrorEntry initWithMirrorDatabaseItem:error:]([KCSharingMirrorEntry alloc], "initWithMirrorDatabaseItem:error:", v5, a3);
    v7 = v6 != 0;
    if (v6)
    {
      v8 = -[KCSharingMirrorEntry initWithMirrorEntry:flags:]([KCSharingMirrorEntry alloc], "initWithMirrorEntry:flags:", v6, 4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "insertIntoMirror"));
      objc_msgSend(v9, "addObject:", v8);

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

BOOL sub_1001915B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  KCSharingMirrorEntry *v6;
  _BOOL8 v7;
  void *v8;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapResultRow:startingAt:error:", *(_QWORD *)(a1 + 48), 0, a3));
  if (v5)
  {
    v6 = -[KCSharingMirrorEntry initWithMirrorDatabaseItem:error:]([KCSharingMirrorEntry alloc], "initWithMirrorDatabaseItem:error:", v5, a3);
    v7 = v6 != 0;
    if (v6)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "reinsertIntoLocal"));
      objc_msgSend(v8, "addObject:", v6);

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t sub_100191658(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  sqlite3_stmt *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 2, (const __CFString *)CKRecordNameZoneWideShare, a3);

  if ((v8 & 1) == 0)
    return 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001918D4;
  v12[3] = &unk_1002EA308;
  v14 = a2;
  v9 = *(_QWORD *)(a1 + 48);
  v13 = *(id *)(a1 + 40);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_100191764(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  sqlite3_stmt *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  v8 = sub_100147A5C(a2, 1, v7, a3);

  if (!v8)
    return 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100191848;
  v12[3] = &unk_1002EA308;
  v14 = a2;
  v9 = *(_QWORD *)(a1 + 48);
  v13 = *(id *)(a1 + 40);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

BOOL sub_100191848(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  sqlite3_int64 v6;
  id v7;
  void *v8;
  void *v9;

  v5 = (void *)objc_opt_class(KCSharingIncomingRow);
  v6 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v7 = sub_10018DC34(v5, v6, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
    objc_msgSend(v9, "addObject:", v8);

  }
  return v8 != 0;
}

uint64_t sub_1001918D4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  sqlite3_int64 v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  sqlite3_int64 v11;
  id v12;
  void *v13;
  void *v14;
  sqlite3_int64 v15;
  sqlite3_int64 v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  sqlite3_int64 v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v32;
  sqlite3_int64 v33;

  v5 = (void *)objc_opt_class(KCSharingIncomingRow);
  v6 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v7 = sub_10018DC34(v5, v6, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
    objc_msgSend(v9, "addObject:", v8);

    v10 = (void *)objc_opt_class(KCSharingMirrorEntry);
    v11 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 1);
    v12 = sub_10018DC34(v10, v11, a3);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
      objc_msgSend(v14, "addObject:", v13);

      v15 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 2);
      if (v15 == 2)
      {
        v25 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 4);
        v26 = (void *)objc_opt_class(KCSharingInternetPasswordCredential);
        v27 = sub_10018DC34(v26, v25, a3);
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (v28)
        {
          v20 = (void *)v28;
          v29 = KCSharingLogObject(CFSTR("KCSharingStore"));
          v22 = objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            v32 = 134217984;
            v33 = v25;
            v23 = "Preparing to delete inet rowid=%lli because of an incoming item deletion";
            goto LABEL_12;
          }
LABEL_13:

          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
          objc_msgSend(v30, "addObject:", v20);

          goto LABEL_14;
        }
      }
      else
      {
        if (v15 != 1)
        {
LABEL_14:
          v24 = 1;
LABEL_16:

          goto LABEL_17;
        }
        v16 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 3);
        v17 = (void *)objc_opt_class(KCSharingPrivateKeyCredential);
        v18 = sub_10018DC34(v17, v16, a3);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        if (v19)
        {
          v20 = (void *)v19;
          v21 = KCSharingLogObject(CFSTR("KCSharingStore"));
          v22 = objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            v32 = 134217984;
            v33 = v16;
            v23 = "Preparing to delete keys rowid=%lli because of an incoming item deletion";
LABEL_12:
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v32, 0xCu);
            goto LABEL_13;
          }
          goto LABEL_13;
        }
      }
    }
    v24 = 0;
    goto LABEL_16;
  }
  v24 = 0;
LABEL_17:

  return v24;
}

uint64_t sub_100191B40(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;
  sqlite3_stmt *v15;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 2, (const __CFString *)CKRecordNameZoneWideShare, a3);

  if ((v8 & 1) == 0)
    return 0;
  v9 = *(_QWORD *)(a1 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100191C64;
  v12[3] = &unk_1002EA060;
  v13 = *(id *)(a1 + 40);
  v15 = a2;
  v14 = *(id *)(a1 + 48);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

BOOL sub_100191C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  KCSharingIncomingEntry *v6;
  _BOOL8 v7;
  void *v8;
  void *v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapResultRow:startingAt:error:", *(_QWORD *)(a1 + 48), 0, a3));
  if (v5)
  {
    v6 = -[KCSharingIncomingRow initWithIncomingDatabaseItem:error:]([KCSharingIncomingEntry alloc], "initWithIncomingDatabaseItem:error:", v5, a3);
    v7 = v6 != 0;
    if (v6)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "insertIntoLocalAndMirror"));
      objc_msgSend(v8, "addObject:", v6);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "itemsToDelete"));
      objc_msgSend(v9, "addObject:", v5);

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t sub_100191D28(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  _QWORD v11[7];

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  v8 = sub_100147A5C(a2, 1, v7, a3);

  if (!v8)
    return 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100192638;
  v11[3] = &unk_1002EA2B8;
  v9 = *(_QWORD *)(a1 + 40);
  v11[4] = *(_QWORD *)(a1 + 32);
  v11[5] = a2;
  v11[6] = v9;
  return sub_100147AB8(v9, a2, a3, v11);
}

uint64_t sub_100191DF4(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  sqlite3_stmt *v18;
  uint64_t v19;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 2, (const __CFString *)CKRecordNameZoneWideShare, a3);

  if ((v8 & 1) == 0)
    return 0;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001923F0;
  v15[3] = &unk_1002E9F38;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(id *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v16 = v10;
  v17 = v11;
  v12 = *(_QWORD *)(a1 + 48);
  v18 = a2;
  v19 = v12;
  v13 = sub_100147AB8(v9, a2, a3, v15);

  return v13;
}

uint64_t sub_100191F08(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  _QWORD v11[7];

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (sub_100147A5C(a2, 1, v7, a3))
  {
    v8 = sub_100147A5C(a2, 2, (const __CFString *)CKRecordNameZoneWideShare, a3);

    if ((v8 & 1) != 0)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100192258;
      v11[3] = &unk_1002EA2B8;
      v9 = *(_QWORD *)(a1 + 40);
      v11[4] = *(_QWORD *)(a1 + 32);
      v11[5] = a2;
      v11[6] = v9;
      return sub_100147AB8(v9, a2, a3, v11);
    }
  }
  else
  {

  }
  return 0;
}

uint64_t sub_100191FFC(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  sqlite3_stmt *v18;
  uint64_t v19;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 2, (const __CFString *)CKRecordNameZoneWideShare, a3);

  if ((v8 & 1) == 0)
    return 0;
  v9 = *(_QWORD *)(a1 + 56);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10019212C;
  v14[3] = &unk_1002EA2E0;
  v15 = *(id *)(a1 + 40);
  v18 = a2;
  v10 = *(id *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 32);
  v16 = v10;
  v17 = v11;
  v19 = *(_QWORD *)(a1 + 56);
  v12 = sub_100147AB8(v9, a2, a3, v14);

  return v12;
}

id sub_10019212C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  KCSharingMergeConflict *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapResultRow:startingAt:error:", *(_QWORD *)(a1 + 56), 0, a3));
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mapResultRow:startingAt:error:", *(_QWORD *)(a1 + 56), objc_msgSend(*(id *)(a1 + 32), "columnCount"), a3));
    if (v6)
    {
      v7 = -[KCSharingMergeConflict initWithRemotelyChangedIncomingDatabaseItem:locallyChangedOutgoingDatabaseItem:]([KCSharingMergeConflict alloc], "initWithRemotelyChangedIncomingDatabaseItem:locallyChangedOutgoingDatabaseItem:", v5, v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "accessGroups"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingMergeConflict resolveWithAccessGroups:error:](v7, "resolveWithAccessGroups:error:", v8, a3));

      if (v9)
      {
        v10 = *(_QWORD *)(a1 + 64);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "accessGroups"));
        v12 = objc_msgSend(v9, "applyInTransaction:withAccessGroups:error:", v10, v11, a3);

      }
      else
      {
        v12 = 0;
      }

    }
    else
    {
      v12 = 0;
    }

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

id sub_100192258(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  sqlite3_int64 v6;
  id v7;
  void *v8;
  void *v9;
  sqlite3_int64 v10;
  id v11;
  void *v12;
  void *v13;
  sqlite3_int64 v14;
  id v15;
  void *v16;
  KCSharingMergeConflict *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;

  v5 = (void *)objc_opt_class(KCSharingIncomingRow);
  v6 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v7 = sub_10018DC34(v5, v6, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
  {
    v9 = (void *)objc_opt_class(KCSharingOutgoingRow);
    v10 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 1);
    v11 = sub_10018DC34(v9, v10, a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if (v12)
    {
      v13 = (void *)objc_opt_class(KCSharingMirrorEntry);
      v14 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 2);
      v15 = sub_10018DC34(v13, v14, a3);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      if (v16)
      {
        v17 = -[KCSharingMergeConflict initWithRemotelyDeletedIncomingDatabaseItem:locallyChangedOutgoingDatabaseItem:mirrorDatabaseItem:]([KCSharingMergeConflict alloc], "initWithRemotelyDeletedIncomingDatabaseItem:locallyChangedOutgoingDatabaseItem:mirrorDatabaseItem:", v8, v12, v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingMergeConflict resolveWithAccessGroups:error:](v17, "resolveWithAccessGroups:error:", v18, a3));

        if (v19)
        {
          v20 = *(_QWORD *)(a1 + 48);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
          v22 = objc_msgSend(v19, "applyInTransaction:withAccessGroups:error:", v20, v21, a3);

        }
        else
        {
          v22 = 0;
        }

      }
      else
      {
        v22 = 0;
      }

    }
    else
    {
      v22 = 0;
    }

  }
  else
  {
    v22 = 0;
  }

  return v22;
}

id sub_1001923F0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  const void *v6;
  NSData *v7;
  void *v8;
  void *v9;
  sqlite3_int64 v10;
  const __CFData *v11;
  id v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  KCSharingMergeConflict *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v25;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapResultRow:startingAt:error:", *(_QWORD *)(a1 + 48), 0, a3));
  if (v5)
  {
    v6 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 48), objc_msgSend(*(id *)(a1 + 32), "columnCount") + 1);
    v7 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v6, sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 48), objc_msgSend(*(id *)(a1 + 32), "columnCount") + 1));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = (void *)objc_opt_class(KCSharingOutgoingRow);
    v10 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 48), (int)objc_msgSend(*(id *)(a1 + 32), "columnCount"));
    v11 = v8;
    v25 = 0;
    v12 = objc_msgSend(v9, "databaseItemClass");
    v13 = (_QWORD **)sub_10001E9E8((uint64_t)v12, (const __CFDictionary *)&__NSDictionary0__struct, dword_1003414E0, (__CFString **)&v25);
    v14 = v13;
    if (v13
      && (sub_10001D87C(v13, v10, (__CFString **)&v25) & 1) != 0
      && (v15 = (_QWORD *)sub_10001E6A8(objc_msgSend(v9, "databaseItemClass"), 9, (__CFString **)&v25)) != 0
      && (sub_10001A56C((uint64_t)v14, v15, v11, (__CFString **)&v25) & 1) != 0)
    {
      v16 = v14;
    }
    else
    {
      v17 = v25;
      if (a3)
      {
        v16 = 0;
        *a3 = v25;
        v25 = 0;
      }
      else
      {
        if (v25)
        {
          v25 = 0;
          CFRelease(v17);
        }
        v16 = 0;
      }
    }

    if (v16)
    {
      v19 = -[KCSharingMergeConflict initWithRemotelyChangedIncomingDatabaseItem:locallyDeletedOutgoingDatabaseItem:]([KCSharingMergeConflict alloc], "initWithRemotelyChangedIncomingDatabaseItem:locallyDeletedOutgoingDatabaseItem:", v5, v16);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessGroups"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingMergeConflict resolveWithAccessGroups:error:](v19, "resolveWithAccessGroups:error:", v20, a3));

      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 56);
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessGroups"));
        v18 = objc_msgSend(v21, "applyInTransaction:withAccessGroups:error:", v22, v23, a3);

      }
      else
      {
        v18 = 0;
      }

    }
    else
    {
      v18 = 0;
    }

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

id sub_100192638(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  sqlite3_int64 v6;
  id v7;
  void *v8;
  void *v9;
  sqlite3_int64 v10;
  id v11;
  void *v12;
  void *v13;
  sqlite3_int64 v14;
  id v15;
  void *v16;
  KCSharingMergeConflict *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;

  v5 = (void *)objc_opt_class(KCSharingIncomingRow);
  v6 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v7 = sub_10018DC34(v5, v6, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
  {
    v9 = (void *)objc_opt_class(KCSharingOutgoingRow);
    v10 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 1);
    v11 = sub_10018DC34(v9, v10, a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if (v12)
    {
      v13 = (void *)objc_opt_class(KCSharingMirrorEntry);
      v14 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 2);
      v15 = sub_10018DC34(v13, v14, a3);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      if (v16)
      {
        v17 = -[KCSharingMergeConflict initWithRemotelyDeletedIncomingDatabaseItem:locallyDeletedOutgoingDatabaseItem:mirrorDatabaseItem:]([KCSharingMergeConflict alloc], "initWithRemotelyDeletedIncomingDatabaseItem:locallyDeletedOutgoingDatabaseItem:mirrorDatabaseItem:", v8, v12, v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(-[KCSharingMergeConflict resolveWithAccessGroups:error:](v17, "resolveWithAccessGroups:error:", v18, a3));

        if (v19)
        {
          v20 = *(_QWORD *)(a1 + 48);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
          v22 = objc_msgSend(v19, "applyInTransaction:withAccessGroups:error:", v20, v21, a3);

        }
        else
        {
          v22 = 0;
        }

      }
      else
      {
        v22 = 0;
      }

    }
    else
    {
      v22 = 0;
    }

  }
  else
  {
    v22 = 0;
  }

  return v22;
}

void sub_1001927D0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v4;
  char *v5;
  void *i;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  char *v14;
  void *j;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD v24[4];
  id v25;
  id v26;
  uint64_t v27;
  id obj;
  _QWORD v29[4];
  id v30;
  id v31;
  uint64_t v32;
  id v33[2];

  v4 = a2;
  v5 = (char *)objc_msgSend(v4, "count");
  for (i = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v5));
        v5;
        --v5)
  {
    objc_msgSend(i, "addObject:", CFSTR("?"));
  }
  v7 = objc_msgSend(i, "copy");

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", CFSTR(", ")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT lpk.rowid               FROM keys lpk               WHERE lpk.ggrp IN (%1$@)"), v8));

  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v33[0] = *(id *)(v11 + 40);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100192AB0;
  v29[3] = &unk_1002EA100;
  v12 = v4;
  v13 = *(_QWORD *)(a1 + 56);
  v30 = v12;
  v32 = v13;
  v31 = *(id *)(a1 + 32);
  LOBYTE(v10) = sub_10014783C(v10, v9, v33, v29);
  objc_storeStrong((id *)(v11 + 40), v33[0]);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v10;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v14 = (char *)objc_msgSend(v12, "count");
    for (j = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v14));
          v14;
          --v14)
    {
      objc_msgSend(j, "addObject:", CFSTR("?"));
    }
    v16 = objc_msgSend(j, "copy");

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "componentsJoinedByString:", CFSTR(", ")));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT lip.rowid               FROM inet lip               WHERE lip.ggrp IN (%1$@)"), v17));

    v19 = *(_QWORD *)(a1 + 56);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    obj = *(id *)(v20 + 40);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100192C34;
    v24[3] = &unk_1002EA100;
    v21 = v12;
    v22 = *(_QWORD *)(a1 + 56);
    v25 = v21;
    v27 = v22;
    v26 = *(id *)(a1 + 32);
    LOBYTE(v19) = sub_10014783C(v19, v18, &obj, v24);
    objc_storeStrong((id *)(v20 + 40), obj);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v19;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      *a3 = 1;

  }
  else
  {
    *a3 = 1;
  }

}

uint64_t sub_100192AB0(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  id v16;
  sqlite3_stmt *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = *(id *)(a1 + 32);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v19;
    v10 = 1;
    while (2)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(v6);
        if (!sub_100147A5C(a2, (uint64_t)v11 + v10, *(const __CFString **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v11), a3))
        {
          v13 = 0;
          goto LABEL_11;
        }
        v11 = (char *)v11 + 1;
      }
      while (v8 != v11);
      v10 = (v10 + (_DWORD)v11);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v8)
        continue;
      break;
    }
  }

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100192EC0;
  v15[3] = &unk_1002EA0D8;
  v17 = a2;
  v12 = *(_QWORD *)(a1 + 48);
  v16 = *(id *)(a1 + 40);
  v13 = sub_100147AB8(v12, a2, a3, v15);
  v6 = v16;
LABEL_11:

  return v13;
}

uint64_t sub_100192C34(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  id v16;
  sqlite3_stmt *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = *(id *)(a1 + 32);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v19;
    v10 = 1;
    while (2)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(v6);
        if (!sub_100147A5C(a2, (uint64_t)v11 + v10, *(const __CFString **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v11), a3))
        {
          v13 = 0;
          goto LABEL_11;
        }
        v11 = (char *)v11 + 1;
      }
      while (v8 != v11);
      v10 = (v10 + (_DWORD)v11);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v8)
        continue;
      break;
    }
  }

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100192DB8;
  v15[3] = &unk_1002EA0D8;
  v17 = a2;
  v12 = *(_QWORD *)(a1 + 48);
  v16 = *(id *)(a1 + 40);
  v13 = sub_100147AB8(v12, a2, a3, v15);
  v6 = v16;
LABEL_11:

  return v13;
}

BOOL sub_100192DB8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sqlite3_int64 v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  int v12;
  sqlite3_int64 v13;

  v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v6 = (void *)objc_opt_class(KCSharingInternetPasswordCredential);
  v7 = sub_10018DC34(v6, v5, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
  {
    v9 = KCSharingLogObject(CFSTR("KCSharingStore"));
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 134217984;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Preparing to delete inet rowid=%lli because we deleted its ggrp", (uint8_t *)&v12, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

  return v8 != 0;
}

BOOL sub_100192EC0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sqlite3_int64 v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  int v12;
  sqlite3_int64 v13;

  v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v6 = (void *)objc_opt_class(KCSharingPrivateKeyCredential);
  v7 = sub_10018DC34(v6, v5, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
  {
    v9 = KCSharingLogObject(CFSTR("KCSharingStore"));
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 134217984;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Preparing to delete keys rowid=%lli because we deleted its ggrp", (uint8_t *)&v12, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

  return v8 != 0;
}

void sub_100192FC8(uint64_t a1, void *a2, _BYTE *a3)
{
  char *v5;
  void *i;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  id v18;
  int8x16_t v19;
  id v20;

  v5 = (char *)objc_msgSend(a2, "count");
  for (i = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v5));
        v5;
        --v5)
  {
    objc_msgSend(i, "addObject:", CFSTR("(?, ?)"));
  }
  v7 = objc_msgSend(i, "copy");

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", CFSTR(", ")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("WITH zoneIDs(ownr, zone) AS (VALUES %1$@)               SELECT r.rowid               FROM %2$@ r               JOIN zoneIDs d ON (d.ownr, d.zone) = (r.ownr, r.zone)               WHERE r.agrp = ?"), v8, *(_QWORD *)objc_msgSend(*(id *)(a1 + 72), "databaseItemClass")));

  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v20 = *(id *)(v11 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100193164;
  v15[3] = &unk_1002EA240;
  v12 = *(id *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(void **)(a1 + 48);
  v16 = v12;
  v17 = v13;
  v19 = vextq_s8(*(int8x16_t *)(a1 + 72), *(int8x16_t *)(a1 + 72), 8uLL);
  v18 = v14;
  LOBYTE(v10) = sub_10014783C(v10, v9, &v20, v15);
  objc_storeStrong((id *)(v11 + 40), v20);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v10;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    *a3 = 1;

}

uint64_t sub_100193164(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *i;
  uint64_t v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  int v15;
  void *v16;
  __CFString *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  id obj;
  _QWORD v25[4];
  id v26;
  sqlite3_stmt *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];

  v5 = a1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  obj = *(id *)(a1 + 32);
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v30;
    v9 = 1;
    v23 = v5;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        v11 = v9;
        if (*(_QWORD *)v30 != v8)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ownerName"));
        if ((sub_100147A5C(a2, v11, v13, a3) & 1) == 0)
        {

LABEL_15:
          v21 = 0;

          return v21;
        }
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneName"));
        v15 = sub_100147A5C(a2, (v11 + 1), v14, a3);

        if (!v15)
          goto LABEL_15;
        v9 = (v11 + 2);
      }
      v9 = (v11 + 2);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      v5 = v23;
      if (v7)
        continue;
      break;
    }
  }
  else
  {
    v9 = 1;
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v5 + 40), "accessGroups"));
  v17 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "entryAccessGroup"));
  v18 = sub_100147A5C(a2, v9, v17, a3);

  if (!v18)
    return 0;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1001933A8;
  v25[3] = &unk_1002EA1F0;
  v20 = *(_QWORD *)(v5 + 56);
  v19 = *(_QWORD *)(v5 + 64);
  v27 = a2;
  v28 = v19;
  v26 = *(id *)(v5 + 48);
  v21 = sub_100147AB8(v20, a2, a3, v25);

  return v21;
}

BOOL sub_1001933A8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sqlite3_int64 v5;
  id v6;
  void *v7;

  v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v6 = sub_10018DC34(*(void **)(a1 + 48), v5, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  return v7 != 0;
}

uint64_t sub_100193410(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  sqlite3_stmt *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3)
    || !sub_100147A5C(a2, 2, (const __CFString *)CKRecordNameZoneWideShare, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 3, CFSTR("group-"), a3);

  if ((v8 & 1) == 0)
    return 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001936DC;
  v12[3] = &unk_1002EA0D8;
  v14 = a2;
  v9 = *(_QWORD *)(a1 + 48);
  v13 = *(id *)(a1 + 40);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_100193538(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  sqlite3_stmt *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3)
    || !sub_100147A5C(a2, 2, (const __CFString *)CKRecordNameZoneWideShare, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 3, CFSTR("group-"), a3);

  if ((v8 & 1) == 0)
    return 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100193660;
  v12[3] = &unk_1002EA0D8;
  v14 = a2;
  v9 = *(_QWORD *)(a1 + 48);
  v13 = *(id *)(a1 + 40);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

BOOL sub_100193660(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sqlite3_int64 v5;
  void *v6;
  id v7;
  void *v8;

  v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v6 = (void *)objc_opt_class(KCSharingInternetPasswordCredential);
  v7 = sub_10018DC34(v6, v5, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  return v8 != 0;
}

BOOL sub_1001936DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sqlite3_int64 v5;
  void *v6;
  id v7;
  void *v8;

  v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v6 = (void *)objc_opt_class(KCSharingPrivateKeyCredential);
  v7 = sub_10018DC34(v6, v5, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  return v8 != 0;
}

uint64_t sub_100193758(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;
  sqlite3_stmt *v15;
  uint64_t v16;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 2, (const __CFString *)CKRecordNameZoneWideShare, a3);

  if ((v8 & 1) == 0)
    return 0;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100193868;
  v13[3] = &unk_1002EA1F0;
  v10 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v15 = a2;
  v16 = v9;
  v14 = *(id *)(a1 + 40);
  v11 = sub_100147AB8(v10, a2, a3, v13);

  return v11;
}

uint64_t sub_100193868(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sqlite3_int64 v5;
  NSString *v6;
  const __CFData *v7;
  NSString *v8;
  const __CFData *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v16;

  v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 40), 0);
  v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 40), 1));
  v7 = (const __CFData *)objc_claimAutoreleasedReturnValue(v6);
  v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 40), 2));
  v9 = (const __CFData *)objc_claimAutoreleasedReturnValue(v8);
  v10 = sub_10018DC34(*(void **)(a1 + 48), v5, a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if (!v11)
    goto LABEL_13;
  v12 = objc_msgSend(*(id *)(a1 + 48), "databaseItemClass");
  if (v12 == (id)sub_1000119B8((uint64_t)CFSTR("sharingIncomingQueue"), &qword_100341280, (uint64_t)&unk_100341278))
  {
    v16 = 0;
    if ((sub_10001BA44((uint64_t)v11, CFSTR("zone"), v7, (__CFString **)&v16) & 1) != 0)
    {
      if ((sub_10001BA44((uint64_t)v11, kSecAttrUUID, v9, (__CFString **)&v16) & 1) != 0
        && (sub_10001BA44((uint64_t)v11, CFSTR("deln"), (const __CFData *)&off_10030AF40, (__CFString **)&v16) & 1) != 0)
      {
        goto LABEL_3;
      }
      v14 = v16;
      if (a3)
      {
        *a3 = v16;
LABEL_13:
        v13 = 0;
        goto LABEL_14;
      }
    }
    else
    {
      v14 = v16;
      if (a3)
      {
        *a3 = v16;
        v16 = 0;
        goto LABEL_13;
      }
    }
    if (v14)
    {
      v16 = 0;
      CFRelease(v14);
    }
    goto LABEL_13;
  }
LABEL_3:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v13 = 1;
LABEL_14:

  return v13;
}

void sub_100193A0C(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
  objc_msgSend(v3, "addObject:", a2);

}

void sub_100193A4C(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
  objc_msgSend(v3, "addObject:", a2);

}

void sub_100193A8C(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "itemsToDelete"));
  objc_msgSend(v3, "addObject:", a2);

}

uint64_t sub_100193ACC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  id v10;
  id v11;
  uint64_t v12;

  v9[0] = _NSConcreteStackBlock;
  v9[2] = sub_100193B70;
  v9[3] = &unk_1002EA178;
  v6 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v9[1] = 3221225472;
  v10 = v6;
  v11 = *(id *)(a1 + 48);
  v12 = a2;
  v7 = sub_100147CEC(a2, a3, v9);

  return v7;
}

id sub_100193B70(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  KCSharingOutgoingEntry *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  KCSharingOutgoingDeletion *v18;
  KCSharingOutgoingDeletion *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "plan"));
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v5 = *(id *)(a1 + 40);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v30;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v30 != v8)
          objc_enumerationMutation(v5);
        v10 = -[KCSharingOutgoingEntry initWithShare:]([KCSharingOutgoingEntry alloc], "initWithShare:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v9));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "insertIntoOutgoing"));
        objc_msgSend(v11, "addObject:", v10);

        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    }
    while (v7);
  }

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v12 = *(id *)(a1 + 48);
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v26;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v26 != v15)
          objc_enumerationMutation(v12);
        v17 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v16);
        v18 = [KCSharingOutgoingDeletion alloc];
        v19 = -[KCSharingOutgoingDeletion initWithDeletedRecord:](v18, "initWithDeletedRecord:", v17, (_QWORD)v25);
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "insertIntoOutgoing"));
        objc_msgSend(v20, "addObject:", v19);

        v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    }
    while (v14);
  }

  v21 = *(_QWORD *)(a1 + 56);
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v23 = objc_msgSend(v4, "applyInTransaction:withAccessGroups:error:", v21, v22, a2);

  return v23;
}

uint64_t sub_100193DAC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100193E30;
  v8[3] = &unk_1002EA128;
  v5 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = a2;
  v6 = sub_100147CEC(a2, a3, v8);

  return v6;
}

id sub_100193E30(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "plan"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "insertIntoIncoming"));
  objc_msgSend(v5, "addObject:", *(_QWORD *)(a1 + 40));

  v6 = *(_QWORD *)(a1 + 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v8 = objc_msgSend(v4, "applyInTransaction:withAccessGroups:error:", v6, v7, a2);

  return v8;
}

BOOL sub_100193EB8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  KCSharingMirrorEntry *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  KCSharingOutgoingDeletion *v19;
  void *v20;
  id v22;
  id v23;

  v5 = *(void **)(a1 + 32);
  v23 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapResultRow:startingAt:error:", a2, 0, &v23));
  v11 = v23;
  if (v6)
  {
    v22 = v11;
    v12 = -[KCSharingMirrorEntry initWithMirrorDatabaseItem:error:]([KCSharingMirrorEntry alloc], "initWithMirrorDatabaseItem:error:", v6, &v22);
    v13 = v22;

    v18 = v12 != 0;
    if (v12)
    {
      v19 = -[KCSharingOutgoingDeletion initWithDeletedLocalItemForMirrorEntry:]([KCSharingOutgoingDeletion alloc], "initWithDeletedLocalItemForMirrorEntry:", v12);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "insertIntoOutgoing"));
      objc_msgSend(v20, "addObject:", v19);

    }
    else
    {
      sub_10004D598(a3, 26, v13, CFSTR("Creating mirror entry for outgoing deletion"), v14, v15, v16, v17, (uint64_t)v22);
    }

  }
  else
  {
    sub_10004D598(a3, 25, v11, CFSTR("Creating mirror database item for outgoing deletion"), v7, v8, v9, v10, (uint64_t)v22);
    v18 = 0;
    v13 = v11;
  }

  return v18;
}

uint64_t sub_100193FEC(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  sqlite3_stmt *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  v8 = sub_100147A5C(a2, 1, v7, a3);

  if (!v8)
    return 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001940CC;
  v12[3] = &unk_1002EA0D8;
  v9 = *(_QWORD *)(a1 + 48);
  v13 = *(id *)(a1 + 40);
  v14 = a2;
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_1001940CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1001940DC(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;
  sqlite3_stmt *v15;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3)
    || !sub_100147A5C(a2, 2, (const __CFString *)CKRecordNameZoneWideShare, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 3, CFSTR("group-"), a3);

  if ((v8 & 1) == 0)
    return 0;
  v9 = *(_QWORD *)(a1 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10019421C;
  v12[3] = &unk_1002EA060;
  v15 = a2;
  v13 = *(id *)(a1 + 40);
  v14 = *(id *)(a1 + 48);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_10019421C(uint64_t a1)
{
  NSString *v2;
  void *v3;
  NSString *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  KCSharingOutgoingEntry *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v18;
  id v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  id v23;

  v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 48), 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 48), 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_msgSend(objc_alloc((Class)CKRecordZoneID), "initWithZoneName:ownerName:", v5, v3);
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  v19 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mapResultRow:startingAt:error:", v8, 2, &v19));
  v10 = v19;
  if (v9)
  {
    v18 = v10;
    v11 = -[KCSharingLocalItem initPasswordWithInternetPasswordDatabaseItem:error:]([KCSharingLocalItem alloc], "initPasswordWithInternetPasswordDatabaseItem:error:", v9, &v18);
    v12 = v18;

    if (v11)
    {
      v13 = -[KCSharingOutgoingEntry initWithNewLocalItem:zoneID:]([KCSharingOutgoingEntry alloc], "initWithNewLocalItem:zoneID:", v11, v6);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "insertIntoOutgoing"));
      objc_msgSend(v14, "addObject:", v13);

    }
    else
    {
      v16 = KCSharingLogObject(CFSTR("KCSharingStore"));
      v13 = (KCSharingOutgoingEntry *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(&v13->super.super, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138478083;
        v21 = v9;
        v22 = 2112;
        v23 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, &v13->super.super, OS_LOG_TYPE_ERROR, "Failed to create local item from databaseItem=%{private}@ for outgoing new password with error=%@", buf, 0x16u);
      }
    }

  }
  else
  {
    v15 = KCSharingLogObject(CFSTR("KCSharingStore"));
    v11 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to create password database item for outgoing new password with error=%@", buf, 0xCu);
    }
    v12 = v10;
  }

  return 1;
}

uint64_t sub_100194470(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  sqlite3_stmt *v16;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  v8 = sub_100147A5C(a2, 1, v7, a3);

  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 64);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100194580;
  v12[3] = &unk_1002EA010;
  v13 = *(id *)(a1 + 40);
  v16 = a2;
  v14 = *(id *)(a1 + 48);
  v15 = *(id *)(a1 + 56);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_100194580(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  KCSharingMirrorEntry *v6;
  KCSharingMirrorEntry *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *p_super;
  NSObject *v13;
  KCSharingMirrorEntry *v14;
  KCSharingOutgoingEntry *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  KCSharingMirrorEntry *v23;
  NSObject *v24;
  KCSharingMirrorEntry *v25;
  NSObject *v26;
  id v27;
  uint8_t buf[4];
  NSObject *v29;
  __int16 v30;
  KCSharingMirrorEntry *v31;
  __int16 v32;
  NSObject *v33;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v27 = 0;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapResultRow:startingAt:error:", v3, 0, &v27));
  v5 = v27;
  if (v4)
  {
    v26 = v5;
    v6 = -[KCSharingMirrorEntry initWithMirrorDatabaseItem:error:]([KCSharingMirrorEntry alloc], "initWithMirrorDatabaseItem:error:", v4, &v26);
    v7 = v26;

    if (v6)
    {
      v8 = *(_QWORD *)(a1 + 56);
      v9 = *(void **)(a1 + 40);
      v10 = objc_msgSend(*(id *)(a1 + 32), "columnCount");
      v25 = v7;
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapResultRow:startingAt:error:", v8, v10, &v25));
      p_super = v25;

      if (v11)
      {
        v24 = p_super;
        v13 = -[KCSharingLocalItem initPasswordWithInternetPasswordDatabaseItem:error:]([KCSharingLocalItem alloc], "initPasswordWithInternetPasswordDatabaseItem:error:", v11, &v24);
        v14 = v24;

        if (v13)
        {
          v23 = v14;
          v15 = -[KCSharingOutgoingEntry initWithUpdatedLocalItem:forMirrorEntry:error:]([KCSharingOutgoingEntry alloc], "initWithUpdatedLocalItem:forMirrorEntry:error:", v13, v6, &v23);
          p_super = v23;

          if (v15)
          {
            v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "insertIntoOutgoing"));
            -[NSObject addObject:](v16, "addObject:", v15);
          }
          else
          {
            v21 = KCSharingLogObject(CFSTR("KCSharingStore"));
            v16 = objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412802;
              v29 = v13;
              v30 = 2112;
              v31 = v6;
              v32 = 2112;
              v33 = p_super;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to create outgoing entry with localItem=%@ and mirrorEntry=%@ for outgoing changed password with error=%@", buf, 0x20u);
            }
          }

        }
        else
        {
          v20 = KCSharingLogObject(CFSTR("KCSharingStore"));
          v15 = (KCSharingOutgoingEntry *)objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(&v15->super.super, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138478083;
            v29 = v11;
            v30 = 2112;
            v31 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, &v15->super.super, OS_LOG_TYPE_ERROR, "Failed to create local item from databaseItem=%{private}@ for outgoing changed password with error=%@", buf, 0x16u);
          }
          p_super = &v14->super;
        }

      }
      else
      {
        v19 = KCSharingLogObject(CFSTR("KCSharingStore"));
        v13 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v29 = p_super;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to create password database item for outgoing changed password with error=%@", buf, 0xCu);
        }
      }

      v7 = (KCSharingMirrorEntry *)p_super;
    }
    else
    {
      v18 = KCSharingLogObject(CFSTR("KCSharingStore"));
      v11 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138478083;
        v29 = v4;
        v30 = 2112;
        v31 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to create mirror entry from databaseItem=%{private}@ for outgoing changed password with error=%@", buf, 0x16u);
      }
    }

    v5 = &v7->super;
  }
  else
  {
    v17 = KCSharingLogObject(CFSTR("KCSharingStore"));
    v6 = (KCSharingMirrorEntry *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(&v6->super, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, &v6->super, OS_LOG_TYPE_ERROR, "Failed to create mirror database item for outgoing changed password with error=%@", buf, 0xCu);
    }
  }

  return 1;
}

uint64_t sub_100194928(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;
  sqlite3_stmt *v15;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (!sub_100147A5C(a2, 1, v7, a3)
    || !sub_100147A5C(a2, 2, (const __CFString *)CKRecordNameZoneWideShare, a3))
  {

    return 0;
  }
  v8 = sub_100147A5C(a2, 3, CFSTR("group-"), a3);

  if ((v8 & 1) == 0)
    return 0;
  v9 = *(_QWORD *)(a1 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100194A68;
  v12[3] = &unk_1002EA060;
  v15 = a2;
  v13 = *(id *)(a1 + 40);
  v14 = *(id *)(a1 + 48);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_100194A68(uint64_t a1)
{
  NSString *v2;
  void *v3;
  NSString *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  KCSharingOutgoingEntry *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v18;
  id v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  id v23;

  v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 48), 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 48), 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_msgSend(objc_alloc((Class)CKRecordZoneID), "initWithZoneName:ownerName:", v5, v3);
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  v19 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mapResultRow:startingAt:error:", v8, 2, &v19));
  v10 = v19;
  if (v9)
  {
    v18 = v10;
    v11 = -[KCSharingLocalItem initPasskeyWithPrivateKeyDatabaseItem:error:]([KCSharingLocalItem alloc], "initPasskeyWithPrivateKeyDatabaseItem:error:", v9, &v18);
    v12 = v18;

    if (v11)
    {
      v13 = -[KCSharingOutgoingEntry initWithNewLocalItem:zoneID:]([KCSharingOutgoingEntry alloc], "initWithNewLocalItem:zoneID:", v11, v6);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "insertIntoOutgoing"));
      objc_msgSend(v14, "addObject:", v13);

    }
    else
    {
      v16 = KCSharingLogObject(CFSTR("KCSharingStore"));
      v13 = (KCSharingOutgoingEntry *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(&v13->super.super, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138478083;
        v21 = v9;
        v22 = 2112;
        v23 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, &v13->super.super, OS_LOG_TYPE_ERROR, "Failed to create local item from databaseItem=%{private}@ for outgoing new passkey with error=%@", buf, 0x16u);
      }
    }

  }
  else
  {
    v15 = KCSharingLogObject(CFSTR("KCSharingStore"));
    v11 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to create private key database item for outgoing new passkey with error=%@", buf, 0xCu);
    }
    v12 = v10;
  }

  return 1;
}

uint64_t sub_100194CBC(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  sqlite3_stmt *v16;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  v8 = sub_100147A5C(a2, 1, v7, a3);

  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 64);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100194DCC;
  v12[3] = &unk_1002EA010;
  v13 = *(id *)(a1 + 40);
  v16 = a2;
  v14 = *(id *)(a1 + 48);
  v15 = *(id *)(a1 + 56);
  v10 = sub_100147AB8(v9, a2, a3, v12);

  return v10;
}

uint64_t sub_100194DCC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  KCSharingMirrorEntry *v6;
  KCSharingMirrorEntry *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *p_super;
  NSObject *v13;
  KCSharingMirrorEntry *v14;
  KCSharingOutgoingEntry *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  KCSharingMirrorEntry *v23;
  NSObject *v24;
  KCSharingMirrorEntry *v25;
  NSObject *v26;
  id v27;
  uint8_t buf[4];
  NSObject *v29;
  __int16 v30;
  KCSharingMirrorEntry *v31;
  __int16 v32;
  NSObject *v33;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v27 = 0;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapResultRow:startingAt:error:", v3, 0, &v27));
  v5 = v27;
  if (v4)
  {
    v26 = v5;
    v6 = -[KCSharingMirrorEntry initWithMirrorDatabaseItem:error:]([KCSharingMirrorEntry alloc], "initWithMirrorDatabaseItem:error:", v4, &v26);
    v7 = v26;

    if (v6)
    {
      v8 = *(_QWORD *)(a1 + 56);
      v9 = *(void **)(a1 + 40);
      v10 = objc_msgSend(*(id *)(a1 + 32), "columnCount");
      v25 = v7;
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapResultRow:startingAt:error:", v8, v10, &v25));
      p_super = v25;

      if (v11)
      {
        v24 = p_super;
        v13 = -[KCSharingLocalItem initPasskeyWithPrivateKeyDatabaseItem:error:]([KCSharingLocalItem alloc], "initPasskeyWithPrivateKeyDatabaseItem:error:", v11, &v24);
        v14 = v24;

        if (v13)
        {
          v23 = v14;
          v15 = -[KCSharingOutgoingEntry initWithUpdatedLocalItem:forMirrorEntry:error:]([KCSharingOutgoingEntry alloc], "initWithUpdatedLocalItem:forMirrorEntry:error:", v13, v6, &v23);
          p_super = v23;

          if (v15)
          {
            v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "insertIntoOutgoing"));
            -[NSObject addObject:](v16, "addObject:", v15);
          }
          else
          {
            v21 = KCSharingLogObject(CFSTR("KCSharingStore"));
            v16 = objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412802;
              v29 = v13;
              v30 = 2112;
              v31 = v6;
              v32 = 2112;
              v33 = p_super;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to create outgoing entry with localItem=%@ and mirrorEntry=%@ for outgoing changed passkey with error=%@", buf, 0x20u);
            }
          }

        }
        else
        {
          v20 = KCSharingLogObject(CFSTR("KCSharingStore"));
          v15 = (KCSharingOutgoingEntry *)objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(&v15->super.super, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138478083;
            v29 = v11;
            v30 = 2112;
            v31 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, &v15->super.super, OS_LOG_TYPE_ERROR, "Failed to create local item from databaseItem=%{private}@ for outgoing changed passkey with error=%@", buf, 0x16u);
          }
          p_super = &v14->super;
        }

      }
      else
      {
        v19 = KCSharingLogObject(CFSTR("KCSharingStore"));
        v13 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v29 = p_super;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to create private key database item for outgoing changed passkey with error=%@", buf, 0xCu);
        }
      }

      v7 = (KCSharingMirrorEntry *)p_super;
    }
    else
    {
      v18 = KCSharingLogObject(CFSTR("KCSharingStore"));
      v11 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138478083;
        v29 = v4;
        v30 = 2112;
        v31 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to create mirror entry from databaseItem=%{private}@ for outgoing changed passkey with error=%@", buf, 0x16u);
      }
    }

    v5 = &v7->super;
  }
  else
  {
    v17 = KCSharingLogObject(CFSTR("KCSharingStore"));
    v6 = (KCSharingMirrorEntry *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(&v6->super, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, &v6->super, OS_LOG_TYPE_ERROR, "Failed to create mirror database item for outgoing changed passkey with error=%@", buf, 0xCu);
    }
  }

  return 1;
}

uint64_t sub_100195174(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  void *v5;
  char v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  void *v15;
  char v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  void *v25;
  char v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  void *v35;
  char v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t *v44;
  void *v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v55[2];
  id (*v56)(uint64_t, uint64_t);
  void *v57;
  __int128 v58;
  _QWORD v59[2];
  id (*v60)(uint64_t, uint64_t);
  void *v61;
  __int128 v62;
  _QWORD v63[2];
  id (*v64)(uint64_t, uint64_t);
  void *v65;
  __int128 v66;
  _QWORD v67[2];
  id (*v68)(uint64_t, uint64_t);
  void *v69;
  __int128 v70;
  _QWORD v71[2];
  id (*v72)(uint64_t, uint64_t);
  void *v73;
  __int128 v74;
  id v75[2];

  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472;
  v72 = sub_100195528;
  v73 = &unk_1002E9EE8;
  v74 = *(_OWORD *)(a1 + 32);
  v4 = v71;
  v5 = objc_autoreleasePoolPush();
  v75[0] = 0;
  v6 = (uint64_t)v72((uint64_t)v4, (uint64_t)v75);
  v7 = v75[0];
  objc_autoreleasePoolPop(v5);
  v8 = 0;
  if ((v6 & 1) == 0)
    v8 = objc_retainAutorelease(v7);

  v13 = v8;
  if ((v6 & 1) != 0)
  {
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v68 = sub_1001955A8;
    v69 = &unk_1002E9EE8;
    v70 = *(_OWORD *)(a1 + 32);
    v14 = v67;
    v15 = objc_autoreleasePoolPush();
    v75[0] = 0;
    v16 = (uint64_t)v68((uint64_t)v14, (uint64_t)v75);
    v17 = v75[0];
    objc_autoreleasePoolPop(v15);
    v18 = 0;
    if ((v16 & 1) == 0)
      v18 = objc_retainAutorelease(v17);

    v23 = v18;
    if ((v16 & 1) != 0)
    {
      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3221225472;
      v64 = sub_100195628;
      v65 = &unk_1002E9EE8;
      v66 = *(_OWORD *)(a1 + 32);
      v24 = v63;
      v25 = objc_autoreleasePoolPush();
      v75[0] = 0;
      v26 = (uint64_t)v64((uint64_t)v24, (uint64_t)v75);
      v27 = v75[0];
      objc_autoreleasePoolPop(v25);
      v28 = 0;
      if ((v26 & 1) == 0)
        v28 = objc_retainAutorelease(v27);

      v33 = v28;
      if ((v26 & 1) != 0)
      {
        v59[0] = _NSConcreteStackBlock;
        v59[1] = 3221225472;
        v60 = sub_1001956A8;
        v61 = &unk_1002E9EE8;
        v62 = *(_OWORD *)(a1 + 32);
        v34 = v59;
        v35 = objc_autoreleasePoolPush();
        v75[0] = 0;
        v36 = (uint64_t)v60((uint64_t)v34, (uint64_t)v75);
        v37 = v75[0];
        objc_autoreleasePoolPop(v35);
        v38 = 0;
        if ((v36 & 1) == 0)
          v38 = objc_retainAutorelease(v37);

        v43 = v38;
        if ((v36 & 1) != 0)
        {
          v55[0] = (uint64_t)_NSConcreteStackBlock;
          v55[1] = 3221225472;
          v56 = sub_100195728;
          v57 = &unk_1002E9EE8;
          v58 = *(_OWORD *)(a1 + 32);
          v44 = v55;
          v45 = objc_autoreleasePoolPush();
          v75[0] = 0;
          v46 = (uint64_t)v56((uint64_t)v44, (uint64_t)v75);
          v47 = v75[0];
          objc_autoreleasePoolPop(v45);
          v48 = 0;
          if ((v46 & 1) == 0)
            v48 = objc_retainAutorelease(v47);

          v53 = v48;
          if ((v46 & 1) == 0)
            sub_10004D598(a2, 29, v53, CFSTR("Staging outgoing deletions"), v49, v50, v51, v52, v55[0]);

        }
        else
        {
          sub_10004D598(a2, 29, v43, CFSTR("Staging outgoing entries for all new passwords"), v39, v40, v41, v42, v55[0]);
          v46 = 0;
        }

      }
      else
      {
        sub_10004D598(a2, 29, v33, CFSTR("Staging outgoing entries for all changed passwords"), v29, v30, v31, v32, v55[0]);
        v46 = 0;
      }

    }
    else
    {
      sub_10004D598(a2, 29, v23, CFSTR("Staging outgoing entries for all new passkeys"), v19, v20, v21, v22, v55[0]);
      v46 = 0;
    }

  }
  else
  {
    sub_10004D598(a2, 29, v13, CFSTR("Staging outgoing entries for all changed passkeys"), v9, v10, v11, v12, v55[0]);
    v46 = 0;
  }

  return v46;
}

id sub_100195528(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stageAllOutgoingChangedPrivateKeysInTransaction:error:", *(_QWORD *)(a1 + 40), a2));
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
    v7 = objc_msgSend(v4, "applyInTransaction:withAccessGroups:error:", v5, v6, a2);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id sub_1001955A8(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stageAllOutgoingNewPrivateKeysInTransaction:error:", *(_QWORD *)(a1 + 40), a2));
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
    v7 = objc_msgSend(v4, "applyInTransaction:withAccessGroups:error:", v5, v6, a2);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id sub_100195628(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stageAllOutgoingChangedPasswordsInTransaction:error:", *(_QWORD *)(a1 + 40), a2));
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
    v7 = objc_msgSend(v4, "applyInTransaction:withAccessGroups:error:", v5, v6, a2);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id sub_1001956A8(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stageAllOutgoingNewPasswordsInTransaction:error:", *(_QWORD *)(a1 + 40), a2));
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
    v7 = objc_msgSend(v4, "applyInTransaction:withAccessGroups:error:", v5, v6, a2);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id sub_100195728(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stageAllOutgoingDeletionsInTransaction:error:", *(_QWORD *)(a1 + 40), a2));
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
    v7 = objc_msgSend(v4, "applyInTransaction:withAccessGroups:error:", v5, v6, a2);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t sub_1001957A8(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  __CFString *v6;
  __CFString *v7;
  int v8;

  v6 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyprint"));
  if ((sub_100147A5C(a2, 1, v6, a3) & 1) != 0)
  {
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueprint"));
    v8 = sub_100147A5C(a2, 2, v7, a3);

    if (v8)
      return sub_100147AB8(*(_QWORD *)(a1 + 40), a2, a3, &stru_1002E9FE8);
  }
  else
  {

  }
  return 0;
}

BOOL sub_100195868(id a1, BOOL *a2, id *a3)
{
  return 1;
}

uint64_t sub_100195870(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  sqlite3_stmt *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 + 48);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10019590C;
  v12[3] = &unk_1002E9F38;
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v13 = v7;
  v14 = v8;
  v15 = a2;
  v16 = v9;
  v10 = sub_100147AB8(v6, a2, a3, v12);

  return v10;
}

uint64_t sub_10019590C(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v23;
  id v24;

  v5 = (void *)a1[4];
  v6 = a1[6];
  v24 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapResultRow:startingAt:error:", v6, 0, &v24));
  v12 = v24;
  if (v7)
  {
    v13 = (void *)a1[5];
    v14 = a1[7];
    v23 = v12;
    v15 = objc_msgSend(v13, "fingerprintPasswordDatabaseItem:inTransaction:error:", v7, v14, &v23);
    v16 = v23;

    if ((v15 & 1) != 0)
    {
      v21 = 1;
    }
    else
    {
      sub_10004D598(a3, 25, v16, CFSTR("Fingerprinting password"), v17, v18, v19, v20, (uint64_t)v23);
      v21 = 0;
    }
    v12 = v16;
  }
  else
  {
    sub_10004D598(a3, 25, v12, CFSTR("Creating password database item for fingerprinting"), v8, v9, v10, v11, (uint64_t)v23);
    v21 = 0;
  }

  return v21;
}

uint64_t sub_1001959F8(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  __CFString *v6;
  __CFString *v7;
  int v8;

  v6 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "keyprint"));
  if ((sub_100147A5C(a2, 1, v6, a3) & 1) != 0)
  {
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueprint"));
    v8 = sub_100147A5C(a2, 2, v7, a3);

    if (v8)
      return sub_100147AB8(*(_QWORD *)(a1 + 40), a2, a3, &stru_1002E9FA0);
  }
  else
  {

  }
  return 0;
}

BOOL sub_100195AB8(id a1, BOOL *a2, id *a3)
{
  return 1;
}

uint64_t sub_100195AC0(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  sqlite3_stmt *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 + 48);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100195B5C;
  v12[3] = &unk_1002E9F38;
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v13 = v7;
  v14 = v8;
  v15 = a2;
  v16 = v9;
  v10 = sub_100147AB8(v6, a2, a3, v12);

  return v10;
}

uint64_t sub_100195B5C(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v23;
  id v24;

  v5 = (void *)a1[4];
  v6 = a1[6];
  v24 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapResultRow:startingAt:error:", v6, 0, &v24));
  v12 = v24;
  if (v7)
  {
    v13 = (void *)a1[5];
    v14 = a1[7];
    v23 = v12;
    v15 = objc_msgSend(v13, "fingerprintPrivateKeyDatabaseItem:inTransaction:error:", v7, v14, &v23);
    v16 = v23;

    if ((v15 & 1) != 0)
    {
      v21 = 1;
    }
    else
    {
      sub_10004D598(a3, 27, v16, CFSTR("Fingerprinting private key"), v17, v18, v19, v20, (uint64_t)v23);
      v21 = 0;
    }
    v12 = v16;
  }
  else
  {
    sub_10004D598(a3, 25, v12, CFSTR("Creating private key database item for fingerprinting"), v8, v9, v10, v11, (uint64_t)v23);
    v21 = 0;
  }

  return v21;
}

uint64_t sub_100195C48(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100195CA8;
  v4[3] = &unk_1002E9EE8;
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a2;
  return sub_100147CEC(a2, a3, v4);
}

id sub_100195CA8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "stageAllOutgoingChangesInTransaction:error:", *(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_100195CB8(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  __CFString *v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;

  v4 = a1[6];
  if (v4 == 2)
  {
    v5 = CFSTR("SELECT EXISTS(                            SELECT 1 FROM sharingOutgoingQueue o                             WHERE (o.agrp, o.ownr) = (?1, ?2)                        )");
    goto LABEL_5;
  }
  if (v4 == 3)
  {
    v5 = CFSTR("SELECT EXISTS(                            SELECT 1 FROM sharingOutgoingQueue o                             WHERE o.agrp = ?1 AND                                   o.ownr <> ?2                        )");
LABEL_5:
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100195DC0;
    v12[3] = &unk_1002E9E98;
    v14 = a2;
    v13 = *((_OWORD *)a1 + 2);
    return sub_10014783C(a2, v5, a3, v12);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v8 = a1[4];
  v9 = a1[7];
  v10 = CKDatabaseScopeString(a1[6]);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", v9, v8, CFSTR("KCSharingStore.m"), 302, CFSTR("Can't determine outgoing changes in database with %@ (%li) scope"), v11, a1[6]);

  return 1;
}

uint64_t sub_100195DC0(uint64_t a1, sqlite3_stmt *a2, _QWORD *a3)
{
  void *v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroups"));
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entryAccessGroup"));
  if (sub_100147A5C(a2, 1, v7, a3))
  {
    v8 = sub_100147A5C(a2, 2, (const __CFString *)CKCurrentUserDefaultName, a3);

    if ((v8 & 1) != 0)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100195EB0;
      v11[3] = &unk_1002E9E70;
      v9 = *(_QWORD *)(a1 + 48);
      v11[4] = *(_QWORD *)(a1 + 40);
      v11[5] = a2;
      return sub_100147AB8(v9, a2, a3, v11);
    }
  }
  else
  {

  }
  return 0;
}

uint64_t sub_100195EB0(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 40), 0) != 0;
  return 1;
}

uint64_t sub_100195EF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  id obj;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v3 + 40);
  v4 = (*(uint64_t (**)(void))(v2 + 16))();
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = v4;
  return 1;
}

void sub_100196578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a30);
  _Unwind_Resume(a1);
}

void sub_100197774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id *location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&STACK[0x3B0], 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100197CB4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100197CC4(uint64_t a1)
{

}

void sub_100197CCC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contextID"));
  v3 = objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeySet loadForZone:contextID:](CKKSCurrentKeySet, "loadForZone:contextID:", v6, v2));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

char *sub_100197D50(uint64_t a1)
{
  char *result;

  result = (char *)objc_msgSend(*(id *)(a1 + 32), "count");
  if ((unint64_t)&result[-*(_QWORD *)(a1 + 56)] <= 0x3E8)
    return (char *)+[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), 0);
  return result;
}

void sub_100197DA8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  int v13;
  id v14;
  __int16 v15;
  id v16;

  v6 = a2;
  v7 = a4;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneName"));
  v10 = sub_10000BDF4(CFSTR("ckksshare"), v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);

  if (v7)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = 138412546;
      v14 = v6;
      v15 = 2112;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "error on row: %@ %@", (uint8_t *)&v13, 0x16u);
    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "recordName"));
    v13 = 138412290;
    v14 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successfully completed upload for record %@", (uint8_t *)&v13, 0xCu);

  }
}

void sub_100197F10(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void **v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  __int128 v24;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "databaseProvider"));
  v14 = _NSConcreteStackBlock;
  v15 = 3221225472;
  v16 = sub_100198050;
  v17 = &unk_1002EA7E0;
  v18 = v7;
  v19 = *(id *)(a1 + 32);
  v20 = v6;
  v21 = WeakRetained;
  v24 = *(_OWORD *)(a1 + 64);
  v22 = *(id *)(a1 + 40);
  v23 = *(id *)(a1 + 48);
  v11 = v6;
  v12 = v7;
  objc_msgSend(v10, "dispatchSyncWithSQLTransaction:", &v14);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationQueue", v14, v15, v16, v17));
  objc_msgSend(v13, "addOperation:", *(_QWORD *)(a1 + 56));

}

uint64_t sub_100198050(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  CKKSTLKShareRecord *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  uint64_t v13;
  CKKSTLKShareRecord *v14;
  void *v15;
  void *v16;
  CKKSTLKShareRecord *v17;
  CKKSTLKShareRecord *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  BOOL v23;
  id obj;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  CKKSTLKShareRecord *v33;
  _BYTE v34[128];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
  v5 = sub_10000BDF4(CFSTR("ckksshare"), v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);

  if (v2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *(CKKSTLKShareRecord **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v33 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Completed TLK Share heal operation with error: %@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 64), "populateUnderlyingErrorsStartingWithRootError:", *(_QWORD *)(a1 + 32));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "deps"));
    objc_msgSend(v8, "intransactionCKWriteFailed:attemptedRecordsChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 72));

    objc_msgSend(*(id *)(a1 + 56), "setCloudkitWriteFailures:", 1);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completed TLK Share heal operation with success", buf, 2u);
    }

    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) += objc_msgSend(*(id *)(a1 + 48), "count");
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    obj = *(id *)(a1 + 48);
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v29;
      while (2)
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v29 != v11)
            objc_enumerationMutation(obj);
          v13 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
          v14 = [CKKSTLKShareRecord alloc];
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "deps"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "contextID"));
          v17 = -[CKKSCKRecordHolder initWithCKRecord:contextID:](v14, "initWithCKRecord:contextID:", v13, v16);

          v27 = 0;
          LODWORD(v16) = -[CKKSSQLDatabaseObject saveToDatabase:](v17, "saveToDatabase:", &v27);
          v18 = (CKKSTLKShareRecord *)v27;
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "zoneName"));
          v21 = sub_10000BDF4(CFSTR("ckksshare"), v20);
          v22 = objc_claimAutoreleasedReturnValue(v21);

          if ((_DWORD)v16)
            v23 = v18 == 0;
          else
            v23 = 0;
          if (!v23)
          {
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v33 = v18;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Couldn't save new TLKShare record to database: %@", buf, 0xCu);
            }

            objc_msgSend(*(id *)(a1 + 40), "setViewKeyHierarchyState:", CFSTR("error"));
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 0;
            objc_msgSend(*(id *)(a1 + 64), "populateUnderlyingErrorsStartingWithRootError:", v18);

            goto LABEL_25;
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v33 = v17;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Successfully completed upload for %@", buf, 0xCu);
          }

        }
        v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
        if (v10)
          continue;
        break;
      }
    }
    v18 = 0;
LABEL_25:

  }
  return 1;
}

void sub_1001983E8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  const __CFString *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint8_t v13[8];
  const __CFString *v14;
  void *v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "overallLaunch"));
  objc_msgSend(v4, "addEvent:", CFSTR("heal-tlk-shares-complete"));

  if (objc_msgSend(WeakRetained, "failedDueToEssentialTrustState"))
  {
    v5 = CFSTR("lose_trust");
LABEL_7:
    objc_msgSend(WeakRetained, "setNextState:", v5);
    goto LABEL_8;
  }
  if (objc_msgSend(WeakRetained, "cloudkitWriteFailures"))
  {
    v6 = sub_10000BDF4(CFSTR("ckksheal"), 0);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Due to write failures, we'll retry later", v13, 2u);
    }

    v5 = CFSTR("healtlksharesfailed");
    goto LABEL_7;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "intendedState"));
  objc_msgSend(WeakRetained, "setNextState:", v10);

  if (!objc_msgSend(WeakRetained, "failedDueToLockState"))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = 1;
    goto LABEL_9;
  }
  v11 = *(void **)(a1 + 32);
  v14 = CFSTR("isLocked");
  v15 = &__kCFBooleanFalse;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
  objc_msgSend(v11, "addMetrics:", v12);

LABEL_8:
  v8 = *(_QWORD *)(a1 + 32);
  v9 = 0;
LABEL_9:
  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", v8, v9, 0);

}

void sub_10019A150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Unwind_Resume(a1);
}

void sub_10019A1C4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *context;
  id obj;

  context = objc_autoreleasePoolPush();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "tlk"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contextID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "tlk"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "tlk"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneID"));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v9 + 40);
  v10 = objc_claimAutoreleasedReturnValue(+[CKKSTLKShareRecord allFor:contextID:keyUUID:zoneID:error:](CKKSTLKShareRecord, "allFor:contextID:keyUUID:zoneID:error:", v2, v4, v6, v8, &obj));
  objc_storeStrong((id *)(v9 + 40), obj);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  objc_autoreleasePoolPop(context);
}

void sub_10019A5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019A638(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10019A960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019A980(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10019B4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10019B4E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10019B4F4(uint64_t a1)
{

}

void sub_10019B4FC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  id obj;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "userInfo"));
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("CKRetryAfter")));

  v5 = obj;
  if (obj)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (!*(_QWORD *)(v6 + 40))
    {
LABEL_5:
      objc_storeStrong((id *)(v6 + 40), obj);
      v5 = obj;
      goto LABEL_6;
    }
    objc_msgSend(obj, "doubleValue");
    v8 = v7;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "doubleValue");
    v5 = obj;
    if (v8 < v9)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      goto LABEL_5;
    }
  }
LABEL_6:

}

uint64_t sub_10019B820(uint64_t a1)
{
  uint64_t v1;
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  CKKSOutgoingQueueEntry *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  CKKSOutgoingQueueEntry *v21;
  CKKSOutgoingQueueEntry *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  CKKSOutgoingQueueEntry *v28;
  CKKSOutgoingQueueEntry *v29;
  void *v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  id v36;
  NSObject *v37;
  _BOOL4 v38;
  CKKSOutgoingQueueEntry *v39;
  void *v40;
  void *v41;
  id v42;
  NSObject *v43;
  void *v44;
  CKKSOutgoingQueueEntry *v45;
  void *v46;
  CKKSOutgoingQueueEntry *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  NSObject *v52;
  void *v53;
  void *v54;
  CKKSOutgoingQueueEntry *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  CKKSOutgoingQueueEntry *v60;
  CKKSOutgoingQueueEntry *v61;
  void *v62;
  void *v63;
  id v64;
  NSObject *v65;
  void *v66;
  CKKSOutgoingQueueEntry *v67;
  void *v68;
  void *v69;
  id v70;
  NSObject *v71;
  void *v72;
  void *v73;
  void *v74;
  CKKSOutgoingQueueEntry *v75;
  id v76;
  void *v77;
  id v78;
  CKKSOutgoingQueueEntry *v79;
  void *v80;
  void *v81;
  id v82;
  NSObject *v83;
  CKKSOutgoingQueueEntry *v84;
  CKKSOutgoingQueueEntry *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  CKKSOutgoingQueueEntry *v91;
  void *v92;
  void *v93;
  id v94;
  NSObject *v95;
  void *v96;
  CKKSOutgoingQueueEntry *v97;
  CKKSOutgoingQueueEntry *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  CKKSOutgoingQueueEntry *v102;
  CKKSOutgoingQueueEntry *v103;
  void *v104;
  void *v105;
  id v106;
  NSObject *v107;
  CKKSOutgoingQueueEntry *v108;
  CKKSOutgoingQueueEntry *v109;
  void *v110;
  void *v111;
  CKKSOutgoingQueueEntry *v112;
  id v113;
  CKKSOutgoingQueueEntry *v114;
  void *v115;
  void *v116;
  id v117;
  NSObject *v118;
  id v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  void *v129;
  void *v130;
  id v131;
  NSObject *v132;
  char v134;
  id obj;
  uint64_t v136;
  id v137;
  CKKSOutgoingQueueEntry *v138;
  uint64_t v139;
  CKKSOutgoingQueueEntry *v140;
  void *v141;
  CKKSOutgoingQueueEntry *v142;
  CKKSOutgoingQueueEntry *v143;
  void *v144;
  CKKSOutgoingQueueEntry *v145;
  CKKSMemoryKeyCache *v146;
  id v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  id v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  id v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint8_t buf[4];
  CKKSOutgoingQueueEntry *v171;
  __int16 v172;
  CKKSOutgoingQueueEntry *v173;
  __int16 v174;
  CKKSOutgoingQueueEntry *v175;
  _BYTE v176[128];
  _BYTE v177[128];

  v1 = a1;
  if (objc_msgSend(*(id *)(a1 + 32), "isCancelled"))
  {
    v2 = sub_10000BDF4(CFSTR("ckksreencrypt"), 0);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CKKSReencryptOutgoingItemsOperation cancelled, quitting", buf, 2u);
    }
LABEL_87:
    v128 = 0;
    goto LABEL_88;
  }
  v168 = 0u;
  v169 = 0u;
  v166 = 0u;
  v167 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "deps"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "activeManagedViews"));

  obj = v5;
  v137 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v166, v177, 16);
  if (!v137)
    goto LABEL_82;
  v134 = 0;
  v136 = *(_QWORD *)v167;
  v150 = v1;
  do
  {
    v6 = 0;
    do
    {
      if (*(_QWORD *)v167 != v136)
        objc_enumerationMutation(obj);
      v7 = *(CKKSOutgoingQueueEntry **)(*((_QWORD *)&v166 + 1) + 8 * v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry viewKeyHierarchyState](v7, "viewKeyHierarchyState"));
      v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("ready"));

      if ((v9 & 1) == 0)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v7, "zoneID"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneName"));
        v12 = sub_10000BDF4(CFSTR("ckksreencrypt"), v11);
        v13 = objc_claimAutoreleasedReturnValue(v12);

        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v171 = v7;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "View is %@; reencryption will likely fail",
            buf,
            0xCu);
        }

      }
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "deps"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "contextID"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v7, "zoneID"));
      v165 = 0;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSOutgoingQueueEntry allInState:contextID:zoneID:error:](CKKSOutgoingQueueEntry, "allInState:contextID:zoneID:error:", CFSTR("reencrypt"), v15, v16, &v165));
      v3 = v165;

      if (v3)
      {
        v129 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v7, "zoneID"));
        v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "zoneName"));
        v131 = sub_10000BDF4(CFSTR("ckksreencrypt"), v130);
        v132 = objc_claimAutoreleasedReturnValue(v131);

        if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v171 = (CKKSOutgoingQueueEntry *)v3;
          _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "Error fetching oqes from database: %@", buf, 0xCu);
        }

        objc_msgSend(*(id *)(v1 + 32), "setError:", v3);
        goto LABEL_87;
      }
      v139 = v6;
      v18 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v7, "zoneID"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "zoneName"));
      +[CKKSPowerCollection CKKSPowerEvent:zone:count:](CKKSPowerCollection, "CKKSPowerEvent:zone:count:", CFSTR("reencryptOutgoing"), v19, objc_msgSend(v17, "count"));

      v146 = objc_alloc_init(CKKSMemoryKeyCache);
      v161 = 0u;
      v162 = 0u;
      v163 = 0u;
      v164 = 0u;
      v147 = v17;
      v149 = objc_msgSend(v147, "countByEnumeratingWithState:objects:count:", &v161, v176, 16);
      if (v149)
      {
        v148 = *(_QWORD *)v162;
        v143 = v7;
        do
        {
          v20 = 0;
          do
          {
            v21 = v7;
            if (*(_QWORD *)v162 != v148)
              objc_enumerationMutation(v147);
            v22 = *(CKKSOutgoingQueueEntry **)(*((_QWORD *)&v161 + 1) + 8 * (_QWORD)v20);
            v23 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry uuid](v22, "uuid"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "deps"));
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "contextID"));
            v26 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry item](v22, "item"));
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "zoneID"));
            v160 = 0;
            v28 = (CKKSOutgoingQueueEntry *)objc_claimAutoreleasedReturnValue(+[CKKSOutgoingQueueEntry tryFromDatabase:state:contextID:zoneID:error:](CKKSOutgoingQueueEntry, "tryFromDatabase:state:contextID:zoneID:error:", v23, CFSTR("new"), v25, v27, &v160));
            v29 = (CKKSOutgoingQueueEntry *)v160;

            v7 = v21;
            if (v29)
            {
              v30 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v21, "zoneID"));
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "zoneName"));
              v32 = sub_10000BDF4(CFSTR("ckksreencrypt"), v31);
              v33 = objc_claimAutoreleasedReturnValue(v32);

              if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v171 = v29;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Couldn't load 'new' OQE to determine status: %@", buf, 0xCu);
              }

              v1 = v150;
              goto LABEL_23;
            }
            v34 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v21, "zoneID"));
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "zoneName"));
            v36 = sub_10000BDF4(CFSTR("ckksreencrypt"), v35);
            v37 = objc_claimAutoreleasedReturnValue(v36);

            v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
            if (!v28)
            {
              if (v38)
              {
                *(_DWORD *)buf = 138412290;
                v171 = v22;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Reencrypting item %@", buf, 0xCu);
              }

              v44 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry item](v22, "item"));
              v158 = 0;
              v29 = (CKKSOutgoingQueueEntry *)objc_claimAutoreleasedReturnValue(+[CKKSItemEncrypter decryptItemToDictionary:keyCache:error:](CKKSItemEncrypter, "decryptItemToDictionary:keyCache:error:", v44, v146, &v158));
              v45 = (CKKSOutgoingQueueEntry *)v158;

              if (v45)
              {
                v46 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry domain](v45, "domain"));
                if (objc_msgSend(v46, "isEqualToString:", CFSTR("securityd")))
                {
                  v47 = v45;
                  v48 = -[CKKSOutgoingQueueEntry code](v45, "code");

                  v7 = v21;
                  if (v48 == (id)-25300)
                  {
                    v49 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v21, "zoneID"));
                    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "zoneName"));
                    v51 = sub_10000BDF4(CFSTR("ckksreencrypt"), v50);
                    v52 = objc_claimAutoreleasedReturnValue(v51);

                    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      v171 = v47;
                      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "Couldn't find key in keychain; asking for reset: %@",
                        buf,
                        0xCu);
                    }

                    v1 = v150;
                    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v150 + 32), "deps"));
                    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "flagHandler"));
                    objc_msgSend(v54, "_onqueueHandleFlag:", CFSTR("key_process_requested"));

                    objc_msgSend(*(id *)(v150 + 32), "setNextState:", CFSTR("unhealthy"));
                    v28 = 0;
                    v55 = v47;
                    goto LABEL_50;
                  }
                }
                else
                {
                  v47 = v45;

                  v7 = v21;
                }
                v68 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v7, "zoneID"));
                v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "zoneName"));
                v70 = sub_10000BDF4(CFSTR("ckksreencrypt"), v69);
                v71 = objc_claimAutoreleasedReturnValue(v70);

                v55 = v47;
                if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412546;
                  v171 = v22;
                  v172 = 2112;
                  v173 = v47;
                  _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "Couldn't decrypt item %@: %@", buf, 0x16u);
                }

                v1 = v150;
                v28 = 0;
LABEL_50:
                objc_msgSend(*(id *)(v1 + 32), "setError:", v55);
              }
              else
              {
                v144 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry item](v22, "item"));
                v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "parentKeyUUID"));
                v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v150 + 32), "deps"));
                v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "contextID"));
                v59 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v21, "zoneID"));
                v157 = 0;
                v60 = (CKKSOutgoingQueueEntry *)objc_claimAutoreleasedReturnValue(-[CKKSMemoryKeyCache loadKeyForUUID:contextID:zoneID:error:](v146, "loadKeyForUUID:contextID:zoneID:error:", v56, v58, v59, &v157));
                v61 = (CKKSOutgoingQueueEntry *)v157;

                if (v61)
                {
                  v55 = v60;
                  v7 = v143;
                  v62 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v143, "zoneID"));
                  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "zoneName"));
                  v64 = sub_10000BDF4(CFSTR("ckksreencrypt"), v63);
                  v65 = objc_claimAutoreleasedReturnValue(v64);

                  if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
                  {
                    v66 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry item](v22, "item"));
                    v67 = (CKKSOutgoingQueueEntry *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "parentKeyUUID"));
                    *(_DWORD *)buf = 138412802;
                    v171 = v67;
                    v172 = 2112;
                    v173 = v22;
                    v174 = 2112;
                    v175 = v61;
                    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "Couldn't fetch key (%@) for item %@: %@", buf, 0x20u);

                  }
                  v1 = v150;
                  objc_msgSend(*(id *)(v150 + 32), "setError:", v61);
                  v28 = 0;
                }
                else
                {
                  v145 = v60;
                  v141 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry keyclass](v60, "keyclass"));
                  v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v150 + 32), "deps"));
                  v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "contextID"));
                  v74 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v143, "zoneID"));
                  v156 = 0;
                  v75 = (CKKSOutgoingQueueEntry *)objc_claimAutoreleasedReturnValue(-[CKKSMemoryKeyCache currentKeyForClass:contextID:zoneID:error:](v146, "currentKeyForClass:contextID:zoneID:error:", v141, v73, v74, &v156));
                  v76 = v156;

                  v61 = v75;
                  v77 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry contextID](v143, "contextID"));
                  v155 = v76;
                  v78 = -[CKKSOutgoingQueueEntry ensureKeyLoadedForContextID:error:](v75, "ensureKeyLoadedForContextID:error:", v77, &v155);
                  v79 = (CKKSOutgoingQueueEntry *)v155;

                  if (v79)
                  {
                    v7 = v143;
                    v80 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v143, "zoneID"));
                    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "zoneName"));
                    v82 = sub_10000BDF4(CFSTR("ckksreencrypt"), v81);
                    v83 = objc_claimAutoreleasedReturnValue(v82);

                    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
                    {
                      v84 = (CKKSOutgoingQueueEntry *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry keyclass](v145, "keyclass"));
                      *(_DWORD *)buf = 138412546;
                      v171 = v84;
                      v172 = 2112;
                      v173 = v79;
                      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "Couldn't fetch the current key for class %@: %@", buf, 0x16u);

                    }
                    v1 = v150;
                    objc_msgSend(*(id *)(v150 + 32), "setError:", v79);
                    v85 = v79;
                    v28 = 0;
                    v55 = v145;
                  }
                  else
                  {
                    v140 = v61;
                    v86 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry item](v22, "item"));
                    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "uuid"));
                    v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v150 + 32), "deps"));
                    v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "contextID"));
                    v90 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v143, "zoneID"));
                    v154 = 0;
                    v142 = (CKKSOutgoingQueueEntry *)objc_claimAutoreleasedReturnValue(+[CKKSMirrorEntry tryFromDatabase:contextID:zoneID:error:](CKKSMirrorEntry, "tryFromDatabase:contextID:zoneID:error:", v87, v89, v90, &v154));
                    v91 = (CKKSOutgoingQueueEntry *)v154;

                    if (v91)
                    {
                      v7 = v143;
                      v92 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v143, "zoneID"));
                      v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "zoneName"));
                      v94 = sub_10000BDF4(CFSTR("ckksreencrypt"), v93);
                      v95 = objc_claimAutoreleasedReturnValue(v94);

                      if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
                      {
                        v96 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry item](v22, "item"));
                        v97 = (CKKSOutgoingQueueEntry *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "parentKeyUUID"));
                        *(_DWORD *)buf = 138412802;
                        v171 = v97;
                        v172 = 2112;
                        v173 = v22;
                        v174 = 2112;
                        v175 = v91;
                        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "Couldn't fetch ckme (%@) for item %@: %@", buf, 0x20u);

                      }
                      v1 = v150;
                      v98 = v91;
                      objc_msgSend(*(id *)(v150 + 32), "setError:", v91);
                      v28 = 0;
                      v55 = v145;
                      v61 = v140;
                    }
                    else
                    {
                      v99 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry item](v22, "item"));
                      v100 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry item](v142, "item"));
                      v153 = 0;
                      v101 = objc_claimAutoreleasedReturnValue(+[CKKSItemEncrypter encryptCKKSItem:dataDictionary:updatingCKKSItem:parentkey:keyCache:error:](CKKSItemEncrypter, "encryptCKKSItem:dataDictionary:updatingCKKSItem:parentkey:keyCache:error:", v99, v29, v100, v140, v146, &v153));
                      v102 = (CKKSOutgoingQueueEntry *)v153;

                      if (v102)
                      {
                        v103 = (CKKSOutgoingQueueEntry *)v101;
                        v7 = v21;
                        v104 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v21, "zoneID"));
                        v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "zoneName"));
                        v106 = sub_10000BDF4(CFSTR("ckksreencrypt"), v105);
                        v107 = objc_claimAutoreleasedReturnValue(v106);

                        v61 = v140;
                        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 138412546;
                          v171 = v140;
                          v172 = 2112;
                          v173 = v102;
                          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "Couldn't encrypt under the new key %@: %@", buf, 0x16u);
                        }

                        v1 = v150;
                        objc_msgSend(*(id *)(v150 + 32), "setError:", v102);
                        v108 = v102;
                        v28 = 0;
                        v55 = v145;
                        v98 = v103;
                      }
                      else
                      {
                        v109 = [CKKSOutgoingQueueEntry alloc];
                        v110 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry action](v22, "action"));
                        v111 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry accessgroup](v22, "accessgroup"));
                        v138 = (CKKSOutgoingQueueEntry *)v101;
                        v112 = -[CKKSOutgoingQueueEntry initWithCKKSItem:action:state:waitUntil:accessGroup:](v109, "initWithCKKSItem:action:state:waitUntil:accessGroup:", v101, v110, CFSTR("new"), 0, v111);

                        v152 = 0;
                        -[CKKSSQLDatabaseObject deleteFromDatabase:](v22, "deleteFromDatabase:", &v152);
                        v113 = v152;
                        v151 = v113;
                        -[CKKSSQLDatabaseObject saveToDatabase:](v112, "saveToDatabase:", &v151);
                        v114 = (CKKSOutgoingQueueEntry *)v151;

                        v7 = v21;
                        if (v114)
                        {
                          v115 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v21, "zoneID"));
                          v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "zoneName"));
                          v117 = sub_10000BDF4(CFSTR("ckksreencrypt"), v116);
                          v118 = objc_claimAutoreleasedReturnValue(v117);

                          v61 = v140;
                          if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 138412546;
                            v171 = v112;
                            v172 = 2112;
                            v173 = v114;
                            _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_ERROR, "Couldn't save newly-encrypted oqe %@: %@", buf, 0x16u);
                          }

                          v1 = v150;
                          objc_msgSend(*(id *)(v150 + 32), "setError:", v114);

                          v108 = v112;
                          v28 = 0;
                          v55 = v145;
                        }
                        else
                        {
                          v134 = 1;
                          v1 = v150;
                          v108 = v112;
                          v28 = 0;
                          v55 = v145;
                          v61 = v140;
                        }
                        v98 = v138;
                      }

                    }
                    v85 = v142;
                  }

                }
              }

              goto LABEL_24;
            }
            v1 = v150;
            if (v38)
            {
              *(_DWORD *)buf = 138412546;
              v171 = v22;
              v172 = 2112;
              v173 = v28;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Have a new OQE superceding %@ (%@), skipping", buf, 0x16u);
            }

            v159 = 0;
            -[CKKSSQLDatabaseObject deleteFromDatabase:](v22, "deleteFromDatabase:", &v159);
            v39 = (CKKSOutgoingQueueEntry *)v159;
            if (v39)
            {
              v29 = v39;
              v40 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v21, "zoneID"));
              v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "zoneName"));
              v42 = sub_10000BDF4(CFSTR("ckksreencrypt"), v41);
              v43 = objc_claimAutoreleasedReturnValue(v42);

              if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v171 = v22;
                v172 = 2112;
                v173 = v29;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Couldn't delete reencrypting OQE(%@) from database: %@", buf, 0x16u);
              }

LABEL_23:
              objc_msgSend(*(id *)(v1 + 32), "setError:", v29);
LABEL_24:

            }
            v20 = (char *)v20 + 1;
          }
          while (v149 != v20);
          v119 = objc_msgSend(v147, "countByEnumeratingWithState:objects:count:", &v161, v176, 16);
          v149 = v119;
        }
        while (v119);
      }

      v120 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](CKKSAnalytics, "logger"));
      v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "error"));

      v122 = (void *)objc_claimAutoreleasedReturnValue(-[CKKSOutgoingQueueEntry zoneID](v7, "zoneID"));
      v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "zoneName"));
      if (v121)
        objc_msgSend(v120, "logRecoverableError:forEvent:zoneName:withAttributes:", 0, CFSTR("CKKSEventProcessReencryption"), v123, 0);
      else
        objc_msgSend(v120, "logSuccessForEvent:zoneName:", CFSTR("CKKSEventProcessReencryption"), v123);

      v6 = v139 + 1;
    }
    while ((id)(v139 + 1) != v137);
    v137 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v166, v177, 16);
  }
  while (v137);

  if ((v134 & 1) != 0)
  {
    v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "deps"));
    v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "ckoperationGroup"));
    v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "deps"));
    objc_msgSend(v126, "setCurrentOutgoingQueueOperationGroup:", v125);

    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "deps"));
    v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obj, "flagHandler"));
    objc_msgSend(v127, "_onqueueHandleFlag:", CFSTR("process_outgoing_queue"));

LABEL_82:
  }
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "intendedState"));
  objc_msgSend(*(id *)(v1 + 32), "setNextState:", v3);
  v128 = 1;
LABEL_88:

  return v128;
}

uint64_t sub_1001A1158(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  unint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t String;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  uint64_t v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  int *v114;
  int *v115;
  int *v116;
  SECC2MPError *v117;
  char v118;
  unsigned int v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  char v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  char v143;
  unsigned int v144;
  unint64_t v145;
  char v146;
  char v147;
  unsigned int v148;
  unint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  v4 = &OBJC_IVAR___SecBackupKeybagEntry__publickeyHash;
  v5 = &OBJC_IVAR___SecBackupKeybagEntry__publickeyHash;
  v6 = &OBJC_IVAR___SecBackupKeybagEntry__publickeyHash;
  while (1)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v10 == -1 || v10 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v11 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v10);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v10 + 1;
      v9 |= (unint64_t)(v11 & 0x7F) << v7;
      if ((v11 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      v12 = v8++ >= 9;
      if (v12)
      {
        v9 = 0;
        v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v9 = 0;
LABEL_14:
    if (v13 || (v9 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v15 = v9 >> 3;
    if ((int)(v9 >> 3) > 100)
      break;
    switch((_DWORD)v15)
    {
      case 1:
        v29 = 0;
        v30 = 0;
        v18 = 0;
        *(_DWORD *)(a1 + v4[2]) |= 0x20000u;
        while (1)
        {
          v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v32 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
          v18 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_63;
          v29 += 7;
          v12 = v30++ >= 9;
          if (v12)
          {
            v18 = 0;
            goto LABEL_65;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_63:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v18 = 0;
LABEL_65:
        v38 = v5[3];
        break;
      case 2:
        v33 = 0;
        v34 = 0;
        v18 = 0;
        *(_DWORD *)(a1 + v4[2]) |= 8u;
        while (1)
        {
          v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
          v18 |= (unint64_t)(v36 & 0x7F) << v33;
          if ((v36 & 0x80) == 0)
            goto LABEL_67;
          v33 += 7;
          v12 = v34++ >= 9;
          if (v12)
          {
            v18 = 0;
            goto LABEL_69;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_67:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v18 = 0;
LABEL_69:
        v38 = v6[4];
        break;
      case 3:
        v21 = 0;
        v22 = 0;
        v18 = 0;
        *(_DWORD *)(a1 + v4[2]) |= 0x10u;
        while (1)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v18 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_59;
          v21 += 7;
          v12 = v22++ >= 9;
          if (v12)
          {
            v18 = 0;
            goto LABEL_61;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v18 = 0;
LABEL_61:
        v38 = 40;
        break;
      default:
LABEL_56:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_71;
    }
LABEL_70:
    *(_QWORD *)(a1 + v38) = v18;
LABEL_71:
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  switch((int)v15)
  {
    case 'e':
      String = PBReaderReadString(a2);
      v26 = objc_claimAutoreleasedReturnValue(String);
      v27 = 232;
      goto LABEL_252;
    case 'f':
      v83 = PBReaderReadString(a2);
      v26 = objc_claimAutoreleasedReturnValue(v83);
      v27 = 168;
      goto LABEL_252;
    case 'g':
      v84 = PBReaderReadString(a2);
      v26 = objc_claimAutoreleasedReturnValue(v84);
      v27 = 200;
      goto LABEL_252;
    case 'h':
      v85 = PBReaderReadString(a2);
      v26 = objc_claimAutoreleasedReturnValue(v85);
      v27 = 152;
      goto LABEL_252;
    case 'i':
      v86 = 0;
      v87 = 0;
      v88 = 0;
      *(_DWORD *)(a1 + v4[2]) |= 0x800000u;
      while (2)
      {
        v89 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v89 == -1 || v89 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        else
        {
          v90 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v89);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v89 + 1;
          v88 |= (unint64_t)(v90 & 0x7F) << v86;
          if (v90 < 0)
          {
            v86 += 7;
            v12 = v87++ >= 9;
            if (v12)
            {
              v88 = 0;
              goto LABEL_318;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v88 = 0;
LABEL_318:
      v164 = v88 != 0;
      v165 = 272;
      goto LABEL_376;
    case 'j':
      v91 = PBReaderReadString(a2);
      v26 = objc_claimAutoreleasedReturnValue(v91);
      v27 = 176;
      goto LABEL_252;
    case 'k':
      v92 = PBReaderReadString(a2);
      v26 = objc_claimAutoreleasedReturnValue(v92);
      v27 = 192;
      goto LABEL_252;
    case 'l':
      v93 = 0;
      v94 = 0;
      v95 = 0;
      *(_DWORD *)(a1 + v4[2]) |= 0x80000u;
      while (2)
      {
        v96 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v96 == -1 || v96 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        else
        {
          v97 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v96);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v96 + 1;
          v95 |= (unint64_t)(v97 & 0x7F) << v93;
          if (v97 < 0)
          {
            v93 += 7;
            v12 = v94++ >= 9;
            if (v12)
            {
              LODWORD(v95) = 0;
              goto LABEL_322;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v95) = 0;
LABEL_322:
      v166 = 208;
      goto LABEL_367;
    case 'm':
      v98 = 0;
      v99 = 0;
      v18 = 0;
      *(_DWORD *)(a1 + v4[2]) |= 1u;
      while (2)
      {
        v100 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v100 == -1 || v100 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        else
        {
          v101 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v100);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v100 + 1;
          v18 |= (unint64_t)(v101 & 0x7F) << v98;
          if (v101 < 0)
          {
            v98 += 7;
            v12 = v99++ >= 9;
            if (v12)
            {
              v18 = 0;
              goto LABEL_326;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v18 = 0;
LABEL_326:
      v38 = 8;
      goto LABEL_70;
    case 'n':
      v102 = 0;
      v103 = 0;
      v95 = 0;
      *(_DWORD *)(a1 + v4[2]) |= 0x100000u;
      while (2)
      {
        v104 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v104 == -1 || v104 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        else
        {
          v105 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v104);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v104 + 1;
          v95 |= (unint64_t)(v105 & 0x7F) << v102;
          if (v105 < 0)
          {
            v102 += 7;
            v12 = v103++ >= 9;
            if (v12)
            {
              LODWORD(v95) = 0;
              goto LABEL_330;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v95) = 0;
LABEL_330:
      v166 = 224;
      goto LABEL_367;
    case 'o':
      v106 = 0;
      v107 = 0;
      v18 = 0;
      *(_DWORD *)(a1 + v4[2]) |= 2u;
      while (2)
      {
        v108 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v108 == -1 || v108 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        else
        {
          v109 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v108);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v108 + 1;
          v18 |= (unint64_t)(v109 & 0x7F) << v106;
          if (v109 < 0)
          {
            v106 += 7;
            v12 = v107++ >= 9;
            if (v12)
            {
              v18 = 0;
              goto LABEL_334;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v18 = 0;
LABEL_334:
      v38 = 16;
      goto LABEL_70;
    case 'p':
      v110 = 0;
      v111 = 0;
      v95 = 0;
      *(_DWORD *)(a1 + v4[2]) |= 0x40000u;
      while (2)
      {
        v112 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v112 == -1 || v112 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        else
        {
          v113 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v112);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v112 + 1;
          v95 |= (unint64_t)(v113 & 0x7F) << v110;
          if (v113 < 0)
          {
            v110 += 7;
            v12 = v111++ >= 9;
            if (v12)
            {
              LODWORD(v95) = 0;
              goto LABEL_338;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v95) = 0;
LABEL_338:
      v166 = 184;
      goto LABEL_367;
    case 'q':
      v114 = v4;
      v115 = v6;
      v116 = v5;
      v117 = objc_alloc_init(SECC2MPError);
      objc_storeStrong((id *)(a1 + 160), v117);
      v167[0] = 0xAAAAAAAAAAAAAAAALL;
      v167[1] = 0xAAAAAAAAAAAAAAAALL;
      if (PBReaderPlaceMark(a2, v167) && (sub_100145AA8((uint64_t)v117, a2) & 1) != 0)
      {
        PBReaderRecallMark(a2, v167);

        v5 = v116;
        v6 = v115;
        v4 = v114;
        goto LABEL_71;
      }

      return 0;
    case 'r':
      v118 = 0;
      v119 = 0;
      v18 = 0;
      *(_DWORD *)(a1 + v4[2]) |= 4u;
      while (2)
      {
        v120 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v120 == -1 || v120 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        else
        {
          v121 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v120);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v120 + 1;
          v18 |= (unint64_t)(v121 & 0x7F) << v118;
          if (v121 < 0)
          {
            v118 += 7;
            v12 = v119++ >= 9;
            if (v12)
            {
              v18 = 0;
              goto LABEL_342;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v18 = 0;
LABEL_342:
      v38 = 24;
      goto LABEL_70;
    case 's':
      v122 = PBReaderReadString(a2);
      v26 = objc_claimAutoreleasedReturnValue(v122);
      v27 = 216;
LABEL_252:
      v153 = *(void **)(a1 + v27);
      *(_QWORD *)(a1 + v27) = v26;

      goto LABEL_71;
    default:
      switch((int)v15)
      {
        case 201:
          v16 = 0;
          v17 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x20u;
          while (2)
          {
            v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v19 == -1 || v19 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
              v18 |= (unint64_t)(v20 & 0x7F) << v16;
              if (v20 < 0)
              {
                v16 += 7;
                v12 = v17++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_270;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_270:
          v38 = 48;
          goto LABEL_70;
        case 202:
          v39 = 0;
          v40 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x80u;
          while (2)
          {
            v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v41 == -1 || v41 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
              v18 |= (unint64_t)(v42 & 0x7F) << v39;
              if (v42 < 0)
              {
                v39 += 7;
                v12 = v40++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_274;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_274:
          v38 = 64;
          goto LABEL_70;
        case 203:
          v43 = 0;
          v44 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x40u;
          while (2)
          {
            v45 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v45 == -1 || v45 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
              v18 |= (unint64_t)(v46 & 0x7F) << v43;
              if (v46 < 0)
              {
                v43 += 7;
                v12 = v44++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_278;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_278:
          v38 = 56;
          goto LABEL_70;
        case 204:
          v47 = 0;
          v48 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x200u;
          while (2)
          {
            v49 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 1;
              v18 |= (unint64_t)(v50 & 0x7F) << v47;
              if (v50 < 0)
              {
                v47 += 7;
                v12 = v48++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_282;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_282:
          v38 = 80;
          goto LABEL_70;
        case 205:
          v51 = 0;
          v52 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x100u;
          while (2)
          {
            v53 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v53 == -1 || v53 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v54 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 1;
              v18 |= (unint64_t)(v54 & 0x7F) << v51;
              if (v54 < 0)
              {
                v51 += 7;
                v12 = v52++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_286;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_286:
          v38 = 72;
          goto LABEL_70;
        case 206:
          v55 = 0;
          v56 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x10000u;
          while (2)
          {
            v57 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v57 + 1;
              v18 |= (unint64_t)(v58 & 0x7F) << v55;
              if (v58 < 0)
              {
                v55 += 7;
                v12 = v56++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_290;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_290:
          v38 = 136;
          goto LABEL_70;
        case 207:
          v59 = 0;
          v60 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x8000u;
          while (2)
          {
            v61 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v61 == -1 || v61 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61 + 1;
              v18 |= (unint64_t)(v62 & 0x7F) << v59;
              if (v62 < 0)
              {
                v59 += 7;
                v12 = v60++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_294;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_294:
          v38 = 128;
          goto LABEL_70;
        case 208:
          v63 = 0;
          v64 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x4000u;
          while (2)
          {
            v65 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v65 == -1 || v65 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v66 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v65 + 1;
              v18 |= (unint64_t)(v66 & 0x7F) << v63;
              if (v66 < 0)
              {
                v63 += 7;
                v12 = v64++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_298;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_298:
          v38 = 120;
          goto LABEL_70;
        case 209:
          v67 = 0;
          v68 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x800u;
          while (2)
          {
            v69 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v69 == -1 || v69 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v69);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69 + 1;
              v18 |= (unint64_t)(v70 & 0x7F) << v67;
              if (v70 < 0)
              {
                v67 += 7;
                v12 = v68++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_302;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_302:
          v38 = 96;
          goto LABEL_70;
        case 210:
          v71 = 0;
          v72 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x400u;
          while (2)
          {
            v73 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v73 == -1 || v73 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v74 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v73);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v73 + 1;
              v18 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                v12 = v72++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_306;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_306:
          v38 = 88;
          goto LABEL_70;
        case 211:
          v75 = 0;
          v76 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x2000u;
          while (2)
          {
            v77 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v77 == -1 || v77 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v78 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v77);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v77 + 1;
              v18 |= (unint64_t)(v78 & 0x7F) << v75;
              if (v78 < 0)
              {
                v75 += 7;
                v12 = v76++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_310;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_310:
          v38 = 112;
          goto LABEL_70;
        case 212:
          v79 = 0;
          v80 = 0;
          v18 = 0;
          *(_DWORD *)(a1 + v4[2]) |= 0x1000u;
          while (2)
          {
            v81 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v81 == -1 || v81 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v82 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v81);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v81 + 1;
              v18 |= (unint64_t)(v82 & 0x7F) << v79;
              if (v82 < 0)
              {
                v79 += 7;
                v12 = v80++ >= 9;
                if (v12)
                {
                  v18 = 0;
                  goto LABEL_314;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v18 = 0;
LABEL_314:
          v38 = 104;
          goto LABEL_70;
        default:
          switch((int)v15)
          {
            case 301:
              v28 = PBReaderReadString(a2);
              v26 = objc_claimAutoreleasedReturnValue(v28);
              v27 = 240;
              goto LABEL_252;
            case 302:
              v123 = 0;
              v124 = 0;
              v125 = 0;
              *(_DWORD *)(a1 + v4[2]) |= 0x8000000u;
              while (2)
              {
                v126 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v126 == -1 || v126 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v127 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v126);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v126 + 1;
                  v125 |= (unint64_t)(v127 & 0x7F) << v123;
                  if (v127 < 0)
                  {
                    v123 += 7;
                    v12 = v124++ >= 9;
                    if (v12)
                    {
                      v125 = 0;
                      goto LABEL_346;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v125 = 0;
LABEL_346:
              v164 = v125 != 0;
              v165 = 276;
              goto LABEL_376;
            case 303:
              v128 = 0;
              v129 = 0;
              v130 = 0;
              *(_DWORD *)(a1 + v4[2]) |= 0x10000000u;
              while (2)
              {
                v131 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v131 == -1 || v131 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v132 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v131);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v131 + 1;
                  v130 |= (unint64_t)(v132 & 0x7F) << v128;
                  if (v132 < 0)
                  {
                    v128 += 7;
                    v12 = v129++ >= 9;
                    if (v12)
                    {
                      v130 = 0;
                      goto LABEL_350;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v130 = 0;
LABEL_350:
              v164 = v130 != 0;
              v165 = 277;
              goto LABEL_376;
            case 304:
              v133 = 0;
              v134 = 0;
              v135 = 0;
              *(_DWORD *)(a1 + v4[2]) |= 0x1000000u;
              while (2)
              {
                v136 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v136 == -1 || v136 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v137 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v136);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v136 + 1;
                  v135 |= (unint64_t)(v137 & 0x7F) << v133;
                  if (v137 < 0)
                  {
                    v133 += 7;
                    v12 = v134++ >= 9;
                    if (v12)
                    {
                      v135 = 0;
                      goto LABEL_354;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v135 = 0;
LABEL_354:
              v164 = v135 != 0;
              v165 = 273;
              goto LABEL_376;
            case 305:
              v138 = 0;
              v139 = 0;
              v140 = 0;
              *(_DWORD *)(a1 + v4[2]) |= 0x2000000u;
              while (2)
              {
                v141 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v141 == -1 || v141 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v142 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v141);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v141 + 1;
                  v140 |= (unint64_t)(v142 & 0x7F) << v138;
                  if (v142 < 0)
                  {
                    v138 += 7;
                    v12 = v139++ >= 9;
                    if (v12)
                    {
                      v140 = 0;
                      goto LABEL_358;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v140 = 0;
LABEL_358:
              v164 = v140 != 0;
              v165 = 274;
              goto LABEL_376;
            case 306:
              v143 = 0;
              v144 = 0;
              v95 = 0;
              *(_DWORD *)(a1 + v4[2]) |= 0x200000u;
              while (2)
              {
                v145 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v145 == -1 || v145 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v146 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v145);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v145 + 1;
                  v95 |= (unint64_t)(v146 & 0x7F) << v143;
                  if (v146 < 0)
                  {
                    v143 += 7;
                    v12 = v144++ >= 9;
                    if (v12)
                    {
                      LODWORD(v95) = 0;
                      goto LABEL_362;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v95) = 0;
LABEL_362:
              v166 = 264;
              goto LABEL_367;
            case 307:
              v147 = 0;
              v148 = 0;
              v95 = 0;
              *(_DWORD *)(a1 + v4[2]) |= 0x400000u;
              while (2)
              {
                v149 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v149 == -1 || v149 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v150 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v149);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v149 + 1;
                  v95 |= (unint64_t)(v150 & 0x7F) << v147;
                  if (v150 < 0)
                  {
                    v147 += 7;
                    v12 = v148++ >= 9;
                    if (v12)
                    {
                      LODWORD(v95) = 0;
                      goto LABEL_366;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v95) = 0;
LABEL_366:
              v166 = 268;
LABEL_367:
              *(_DWORD *)(a1 + v166) = v95;
              goto LABEL_71;
            case 308:
              v151 = PBReaderReadString(a2);
              v26 = objc_claimAutoreleasedReturnValue(v151);
              v27 = 248;
              goto LABEL_252;
            case 309:
              v152 = PBReaderReadString(a2);
              v26 = objc_claimAutoreleasedReturnValue(v152);
              v27 = 256;
              goto LABEL_252;
            case 310:
              v154 = 0;
              v155 = 0;
              v156 = 0;
              *(_DWORD *)(a1 + v4[2]) |= 0x4000000u;
              while (2)
              {
                v157 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v157 == -1 || v157 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v158 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v157);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v157 + 1;
                  v156 |= (unint64_t)(v158 & 0x7F) << v154;
                  if (v158 < 0)
                  {
                    v154 += 7;
                    v12 = v155++ >= 9;
                    if (v12)
                    {
                      v156 = 0;
                      goto LABEL_371;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v156 = 0;
LABEL_371:
              v164 = v156 != 0;
              v165 = 275;
              goto LABEL_376;
            case 311:
              v159 = 0;
              v160 = 0;
              v161 = 0;
              *(_DWORD *)(a1 + v4[2]) |= 0x20000000u;
              break;
            default:
              goto LABEL_56;
          }
          break;
      }
      while (2)
      {
        v162 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v162 == -1 || v162 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        else
        {
          v163 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v162);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v162 + 1;
          v161 |= (unint64_t)(v163 & 0x7F) << v159;
          if (v163 < 0)
          {
            v159 += 7;
            v12 = v160++ >= 9;
            if (v12)
            {
              v161 = 0;
              goto LABEL_375;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v161 = 0;
LABEL_375:
      v164 = v161 != 0;
      v165 = 278;
LABEL_376:
      *(_BYTE *)(a1 + v165) = v164;
      goto LABEL_71;
  }
}

void sub_1001A2BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001A2CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001A2F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001A303C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1001A33F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1001A3568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001A3E58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A3FC0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "octagonContainerMap"));
    objc_msgSend(v4, "setObject:forKey:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "undeliveredCuttlefishUpdates"));
    v6 = objc_msgSend(v5, "containsObject:", *(_QWORD *)(a1 + 40));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "undeliveredCuttlefishUpdates"));
      objc_msgSend(v7, "removeObject:", *(_QWORD *)(a1 + 40));

      v8 = sub_10000BDF4(CFSTR("octagonpush"), 0);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v11 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(a1 + 48);
        v12 = *(_QWORD *)(a1 + 32);
        v15 = 138412802;
        v16 = v10;
        v17 = 2112;
        v18 = v11;
        v19 = 2112;
        v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "sending fake push to newly-registered cuttlefish receiver(%@-%@): %@", (uint8_t *)&v15, 0x20u);
      }

      objc_msgSend(*(id *)(a1 + 32), "notifyContainerChange:", 0);
    }
    objc_msgSend(*(id *)(a1 + 56), "fulfill");
  }
  else
  {
    v13 = sub_10000BDF4(CFSTR("octagonpush"), 0);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "received registration for released OctagonAPSReceiver", (uint8_t *)&v15, 2u);
    }

  }
}

void sub_1001A4168(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  uint64_t v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  _BYTE v31[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = sub_10000BDF4(CFSTR("octagonpush"), 0);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Registering new CKKS push receiver: %@", buf, 0xCu);
    }

    v7 = *(_QWORD *)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "zoneUpdateReceiverDictionary"));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, *(_QWORD *)(a1 + 40));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "undeliveredUpdates"));
    v10 = objc_msgSend(v9, "copy");

    v22 = WeakRetained;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "undeliveredUpdates"));
    objc_msgSend(v11, "removeAllObjects");

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject allObjects](v10, "allObjects"));
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v15)
            objc_enumerationMutation(v12);
          v17 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          v18 = sub_10000BDF4(CFSTR("octagonpush"), 0);
          v19 = objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            v20 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 138412546;
            v28 = v17;
            v29 = 2112;
            v30 = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "sending stored push(%@) to newly-registered receiver: %@", buf, 0x16u);
          }

          objc_msgSend(*(id *)(a1 + 32), "notifyZoneChange:", v17);
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
      }
      while (v14);
    }

    objc_msgSend(*(id *)(a1 + 48), "fulfill");
    v5 = v21;
    WeakRetained = v22;
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "received registration for released OctagonAPSReceiver", buf, 2u);
  }

}

void sub_1001A440C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v13 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "environmentMap"));
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));

    if (!v4)
    {
      v5 = objc_msgSend(objc_msgSend(v13, "apsConnectionClass"), "alloc");
      v6 = *(_QWORD *)(a1 + 32);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "namedDelegatePort"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[OctagonAPSReceiver apsDeliveryQueue](OctagonAPSReceiver, "apsDeliveryQueue"));
      v4 = objc_msgSend(v5, "initWithEnvironmentName:namedDelegatePort:queue:", v6, v7, v8);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "environmentMap"));
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v4, *(_QWORD *)(a1 + 32));

      objc_msgSend(v4, "setDelegate:", v13);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("com.apple.icloud-container."), "stringByAppendingString:", CFSTR("com.apple.securityd")));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "cuttlefishPushTopics"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "arrayByAddingObject:", v10));
      objc_msgSend(v4, "setEnabledTopics:", v12);

    }
    WeakRetained = v13;
  }

}

void sub_1001A4554(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[4];
  id v4;

  v2 = objc_claimAutoreleasedReturnValue(+[OctagonAPSReceiver apsDeliveryQueue](OctagonAPSReceiver, "apsDeliveryQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001A45EC;
  block[3] = &unk_1002EB598;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  dispatch_async(v2, block);

  objc_destroyWeak(&v4);
}

void sub_1001A45EC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "undeliveredUpdates"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    objc_msgSend(v5, "setUndeliveredUpdates:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "undeliveredCuttlefishUpdates"));
    objc_msgSend(v4, "removeAllObjects");

    objc_msgSend(v5, "reportDroppedPushes:", v2);
    WeakRetained = v5;
  }

}

void sub_1001A4678(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "undeliveredUpdates"));
  if (objc_msgSend(v3, "count"))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "undeliveredCuttlefishUpdates"));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "count") != 0;

  }
}

uint64_t sub_1001A46F8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001A4708(uint64_t a1)
{

}

void sub_1001A4710(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "environmentMap"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allKeys"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1001A4818(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A487C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1001A4920(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("aps-callback-queue", v4);
  v3 = (void *)qword_100341478;
  qword_100341478 = (uint64_t)v2;

}

void sub_1001A5088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001A5350(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1001A569C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001A56C4(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "databaseProvider"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001A57E4;
  v7[3] = &unk_1002EAAB0;
  v8 = a1[4];
  v6 = v3;
  v9 = v6;
  v10 = a1[5];
  v11 = a1[6];
  objc_copyWeak(&v13, a1 + 7);
  v12 = WeakRetained;
  objc_msgSend(v5, "dispatchSyncWithReadOnlySQLTransaction:", v7);

  objc_destroyWeak(&v13);
}

void sub_1001A57D0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001A57E4(id *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  BOOL v5;
  int v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  BOOL v37;
  char v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  NSObject *v47;
  unsigned int v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  NSObject *v53;
  unsigned int v54;
  unsigned int v55;
  id v56;
  id v57;
  uint64_t v58;
  void *j;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  id v64;
  NSObject *v65;
  void *v66;
  id v67;
  uint64_t v68;
  void *k;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  NSObject *v74;
  void *v75;
  id v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  NSObject *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  NSObject *v88;
  void *v89;
  void *v90;
  id v91;
  NSObject *v92;
  uint64_t v93;
  id v94;
  id v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  void *v101;
  id obj;
  _QWORD v103[4];
  id v104;
  id v105;
  id v106;
  id v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  id v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  id v125;
  _BYTE v126[128];
  _BYTE v127[128];
  uint8_t v128[128];
  uint8_t buf[4];
  _BYTE v130[18];
  _BYTE v131[128];

  v1 = a1 + 4;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "contextID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "zoneID"));
  v125 = 0;
  v99 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeyPointer tryFromDatabase:contextID:zoneID:error:](CKKSCurrentKeyPointer, "tryFromDatabase:contextID:zoneID:error:", CFSTR("tlk"), v2, v3, &v125));
  v95 = v125;

  if (v99
    && ((v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "currentKeyUUID"))) != 0
      ? (v5 = v95 == 0)
      : (v5 = 0),
        v5 ? (v6 = 0) : (v6 = 1),
        v4,
        !v6))
  {
    v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    obj = a1[6];
    v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v121, v131, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v122;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v122 != v12)
            objc_enumerationMutation(obj);
          v14 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * (_QWORD)i);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "zoneID"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "contextID"));
          v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "makeTLKShareRecord:contextID:", v15, v16));

          v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject tlkUUID](v17, "tlkUUID"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "currentKeyUUID"));
          v20 = objc_msgSend(v18, "isEqualToString:", v19);

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "zoneID"));
          v22 = v21;
          if ((v20 & 1) == 0)
          {
            v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "zoneName"));
            v80 = sub_10000BDF4(CFSTR("ckks-se"), v79);
            v81 = objc_claimAutoreleasedReturnValue(v80);

            if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
            {
              v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "currentKeyUUID"));
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)v130 = v82;
              *(_WORD *)&v130[8] = 2112;
              *(_QWORD *)&v130[10] = v14;
              _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "TLKShare is not for the current TLK(%@): %@", buf, 0x16u);

            }
            v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "currentKeyUUID"));
            v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("TLKShare is not for current TLK %@"), v83));
            v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 61, v84));
            objc_msgSend(a1[5], "setError:", v85);

            goto LABEL_66;
          }
          v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject CKRecordWithZoneID:](v17, "CKRecordWithZoneID:", v21));
          objc_msgSend(v98, "addObject:", v23);

        }
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v121, v131, 16);
        if (v11)
          continue;
        break;
      }
    }

    obj = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v92 = a1[7];
    v94 = -[NSObject countByEnumeratingWithState:objects:count:](v92, "countByEnumeratingWithState:objects:count:", &v117, v128, 16);
    if (v94)
    {
      v93 = *(_QWORD *)v118;
      while (2)
      {
        v24 = 0;
        do
        {
          if (*(_QWORD *)v118 != v93)
          {
            v25 = v24;
            objc_enumerationMutation(v92);
            v24 = v25;
          }
          v96 = v24;
          v97 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * v24);
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "zoneID"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "contextID"));
          v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "makeTLKShareRecord:contextID:", v26, v27));

          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "tlkUUID"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "contextID"));
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "share"));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "receiverPeerID"));
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "share"));
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "senderPeerID"));
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "zoneID"));
          v116 = 0;
          v35 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSTLKShareRecord fromDatabase:contextID:receiverPeerID:senderPeerID:zoneID:error:](CKKSTLKShareRecord, "fromDatabase:contextID:receiverPeerID:senderPeerID:zoneID:error:", v28, v29, v31, v33, v34, &v116));
          v36 = v116;

          if (v35)
            v37 = v36 == 0;
          else
            v37 = 0;
          v38 = v37;
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "zoneID"));
          v40 = v39;
          if ((v38 & 1) == 0)
          {
            v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "zoneName"));
            v87 = sub_10000BDF4(CFSTR("ckks-se"), v86);
            v88 = objc_claimAutoreleasedReturnValue(v87);

            if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)v130 = v97;
              *(_WORD *)&v130[8] = 2112;
              *(_QWORD *)&v130[10] = v36;
              _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "Unable to load TLKShare (to delete): %@ %@", buf, 0x16u);
            }

            objc_msgSend(a1[5], "setError:", v36);
            goto LABEL_65;
          }
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "CKRecordWithZoneID:", v39));

          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "recordID"));
          objc_msgSend(obj, "addObject:", v42);

          v24 = v96 + 1;
        }
        while (v94 != (id)(v96 + 1));
        v94 = -[NSObject countByEnumeratingWithState:objects:count:](v92, "countByEnumeratingWithState:objects:count:", &v117, v128, 16);
        if (v94)
          continue;
        break;
      }
    }

    if (objc_msgSend(v98, "count") || objc_msgSend(obj, "count"))
    {
      v92 = objc_msgSend(objc_alloc((Class)CKModifyRecordsOperation), "initWithRecordsToSave:recordIDsToDelete:", v98, obj);
      -[NSObject setAtomic:](v92, "setAtomic:", 1);
      v43 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject configuration](v92, "configuration"));
      objc_msgSend(v43, "setIsCloudKitSupportOperation:", 1);

      -[NSObject setSavePolicy:](v92, "setSavePolicy:", 0);
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "zoneID"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "zoneName"));
      v46 = sub_10000BDF4(CFSTR("ckks-se"), v45);
      v47 = objc_claimAutoreleasedReturnValue(v46);

      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        v48 = -[NSObject qualityOfService](v92, "qualityOfService");
        v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject group](v92, "group"));
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v130 = v48;
        *(_WORD *)&v130[4] = 2112;
        *(_QWORD *)&v130[6] = v49;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "QoS: %d; operation group is %@",
          buf,
          0x12u);

      }
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "zoneID"));
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "zoneName"));
      v52 = sub_10000BDF4(CFSTR("ckks-se"), v51);
      v53 = objc_claimAutoreleasedReturnValue(v52);

      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        v54 = objc_msgSend(v98, "count");
        v55 = objc_msgSend(obj, "count");
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v130 = v54;
        *(_WORD *)&v130[4] = 1024;
        *(_DWORD *)&v130[6] = v55;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Beginning upload for %d records, deleting %d records", buf, 0xEu);
      }

      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v56 = v98;
      v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v112, v127, 16);
      if (v57)
      {
        v58 = *(_QWORD *)v113;
        do
        {
          for (j = 0; j != v57; j = (char *)j + 1)
          {
            if (*(_QWORD *)v113 != v58)
              objc_enumerationMutation(v56);
            v60 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * (_QWORD)j);
            v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "recordID"));
            v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "zoneID"));
            v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "zoneName"));
            v64 = sub_10000BDF4(CFSTR("ckks-se"), v63);
            v65 = objc_claimAutoreleasedReturnValue(v64);

            if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
            {
              v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "recordID"));
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v130 = v66;
              _os_log_debug_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "Record to save: %@", buf, 0xCu);

            }
          }
          v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v112, v127, 16);
        }
        while (v57);
      }

      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      obj = obj;
      v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v108, v126, 16);
      if (v67)
      {
        v68 = *(_QWORD *)v109;
        do
        {
          for (k = 0; k != v67; k = (char *)k + 1)
          {
            if (*(_QWORD *)v109 != v68)
              objc_enumerationMutation(obj);
            v70 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * (_QWORD)k);
            v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "zoneID"));
            v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "zoneName"));
            v73 = sub_10000BDF4(CFSTR("ckks-se"), v72);
            v74 = objc_claimAutoreleasedReturnValue(v73);

            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v130 = v70;
              _os_log_debug_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "Record to delete: %@", buf, 0xCu);
            }

          }
          v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v108, v126, 16);
        }
        while (v67);
      }

      -[NSObject setPerRecordSaveBlock:](v92, "setPerRecordSaveBlock:", &stru_1002EAA40);
      v75 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSResultOperation named:withBlock:](CKKSResultOperation, "named:withBlock:", CFSTR("wait-until-write-finished"), &stru_1002EAA60));
      objc_msgSend(a1[5], "dependOnBeforeGroupFinished:", v75);
      v103[0] = _NSConcreteStackBlock;
      v103[1] = 3221225472;
      v103[2] = sub_1001A6500;
      v103[3] = &unk_1002EAA88;
      objc_copyWeak(&v107, a1 + 9);
      v104 = a1[4];
      v105 = a1[5];
      v76 = v75;
      v106 = v76;
      -[NSObject setModifyRecordsCompletionBlock:](v92, "setModifyRecordsCompletionBlock:", v103);
      v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[8], "operationDependencies"));
      v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "ckdatabase"));
      objc_msgSend(v78, "addOperation:", v92);

      objc_destroyWeak(&v107);
LABEL_65:
      v17 = v92;
    }
    else
    {
      v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "zoneID"));
      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "zoneName"));
      v91 = sub_10000BDF4(CFSTR("ckks-se"), v90);
      v17 = objc_claimAutoreleasedReturnValue(v91);

      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Requested modifications are a no-op; claiming success",
          buf,
          2u);
      }
    }
LABEL_66:

  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "zoneID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneName"));
    v9 = sub_10000BDF4(CFSTR("ckks-se"), v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v130 = v95;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to load currentTLK: %@", buf, 0xCu);
    }

    objc_msgSend(a1[5], "setError:", v95);
  }

}

void sub_1001A64E0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001A6500(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "databaseProvider"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001A662C;
  v15[3] = &unk_1002EA980;
  v16 = v9;
  v17 = a1[4];
  v18 = a1[5];
  v19 = a1[6];
  v20 = v7;
  v21 = WeakRetained;
  v22 = v8;
  v12 = v8;
  v13 = v7;
  v14 = v9;
  objc_msgSend(v11, "dispatchSyncWithSQLTransaction:", v15);

}

uint64_t sub_1001A662C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *j;
  uint64_t v20;
  void *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint8_t v32[128];
  uint8_t buf[4];
  uint64_t v34;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
  v5 = sub_10000BDF4(CFSTR("ckks-se"), v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);

  if (v2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v34 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "error proposing new TLK: %@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 48), "setError:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completed modifying TLK share records!", buf, 2u);
    }

    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v8 = *(id *)(a1 + 64);
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v28 != v11)
            objc_enumerationMutation(v8);
          v13 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "operationDependencies"));
          objc_msgSend(v14, "intransactionCKRecordChanged:resync:", v13, 0);

        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      }
      while (v10);
    }

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v15 = *(id *)(a1 + 80);
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v24;
      do
      {
        for (j = 0; j != v17; j = (char *)j + 1)
        {
          if (*(_QWORD *)v24 != v18)
            objc_enumerationMutation(v15);
          v20 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)j);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "operationDependencies", (_QWORD)v23));
          objc_msgSend(v21, "intransactionCKRecordDeleted:recordType:resync:", v20, CFSTR("tlkshare"), 0);

        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
      }
      while (v17);
    }

  }
  objc_msgSend(*(id *)(a1 + 48), "runBeforeGroupFinished:", *(_QWORD *)(a1 + 56), (_QWORD)v23);
  return 1;
}

void sub_1001A68DC(id a1, CKRecordID *a2, CKRecord *a3, NSError *a4)
{
  CKRecordID *v6;
  CKRecord *v7;
  NSError *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSError *v13;
  CKRecord *v14;
  int v15;
  NSError *v16;
  __int16 v17;
  CKRecord *v18;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordID zoneID](v6, "zoneID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneName"));
  v11 = sub_10000BDF4(CFSTR("ckks-se"), v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);

  if (v8)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = 138412546;
      v16 = v8;
      v17 = 2112;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "error on row: %@ %@", (uint8_t *)&v15, 0x16u);
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (NSError *)objc_claimAutoreleasedReturnValue(-[CKRecordID recordName](v6, "recordName"));
    v14 = (CKRecord *)objc_claimAutoreleasedReturnValue(-[CKRecord recordChangeTag](v7, "recordChangeTag"));
    v15 = 138412546;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Record upload successful for %@ (%@)", (uint8_t *)&v15, 0x16u);

  }
}

void sub_1001A6A70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *i;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  NSObject *v45;
  void *v46;
  void *v47;
  id v48;
  NSObject *v49;
  void *v50;
  void *v51;
  id v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  id obj;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  id v64;
  id v65;
  id v66;
  uint8_t v67[128];
  uint8_t buf[4];
  id v69;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contextID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneName"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSZoneStateEntry contextID:zoneName:](CKKSZoneStateEntry, "contextID:zoneName:", v2, v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "getChangeToken"));
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contextID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v66 = 0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeyPointer tryFromDatabase:contextID:zoneID:error:](CKKSCurrentKeyPointer, "tryFromDatabase:contextID:zoneID:error:", CFSTR("tlk"), v6, v7, &v66));
    v9 = v66;

    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneName"));
      v12 = sub_10000BDF4(CFSTR("ckks-se"), v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);

      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v69 = v9;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Error loading TLK pointer for this zone: %@", buf, 0xCu);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
    else if (v8)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentKeyUUID"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contextID"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
      v65 = 0;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSKey fromDatabaseAnyState:contextID:zoneID:error:](CKKSKey, "fromDatabaseAnyState:contextID:zoneID:error:", v18, v19, v20, &v65));
      v9 = v65;

      if (!v21 || v9)
      {
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "zoneName"));
        v48 = sub_10000BDF4(CFSTR("ckks-se"), v47);
        v49 = objc_claimAutoreleasedReturnValue(v48);

        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "No TLK for this zone", buf, 2u);
        }

        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      }
      else
      {
        v22 = objc_alloc((Class)CKKSExternalKey);
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "zoneName"));
        v58 = objc_msgSend(v22, "initWithViewName:tlk:", v24, v21);

        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentKeyUUID"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contextID"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
        v64 = 0;
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSTLKShareRecord allForUUID:contextID:zoneID:error:](CKKSTLKShareRecord, "allForUUID:contextID:zoneID:error:", v25, v26, v27, &v64));
        v9 = v64;

        if (!v28 || v9)
        {
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "zoneName"));
          v52 = sub_10000BDF4(CFSTR("ckks-se"), v51);
          v53 = objc_claimAutoreleasedReturnValue(v52);

          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v69 = v9;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "Unable to load TLKShares for zone: %@", buf, 0xCu);
          }

          (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
          v41 = v58;
        }
        else
        {
          v55 = v21;
          v56 = v8;
          v57 = v4;
          v29 = a1;
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
          v60 = 0u;
          v61 = 0u;
          v62 = 0u;
          v63 = 0u;
          v54 = v28;
          obj = v28;
          v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
          if (v31)
          {
            v32 = v31;
            v33 = *(_QWORD *)v61;
            do
            {
              for (i = 0; i != v32; i = (char *)i + 1)
              {
                if (*(_QWORD *)v61 != v33)
                  objc_enumerationMutation(obj);
                v35 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)i);
                v36 = objc_alloc((Class)CKKSExternalTLKShare);
                v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v29 + 32), "zoneID"));
                v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "zoneName"));
                v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "share"));
                v40 = objc_msgSend(v36, "initWithViewName:tlkShare:", v38, v39);

                objc_msgSend(v30, "addObject:", v40);
              }
              v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
            }
            while (v32);
          }

          v41 = v58;
          (*(void (**)(void))(*(_QWORD *)(v29 + 40) + 16))();

          v8 = v56;
          v4 = v57;
          v21 = v55;
          v9 = 0;
          v28 = v54;
        }

      }
    }
    else
    {
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "zoneName"));
      v44 = sub_10000BDF4(CFSTR("ckks-se"), v43);
      v45 = objc_claimAutoreleasedReturnValue(v44);

      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "No TLK pointer for this zone", buf, 2u);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      v9 = 0;
    }

  }
  else
  {
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", CFSTR("CKKSErrorDomain"), 66, CFSTR("Initial fetch results not present; cannot provide accurate answer about TLK state")));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneID"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "zoneName"));
    v16 = sub_10000BDF4(CFSTR("ckks-se"), v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);

    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v69 = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Haven't successfully completed a fetch for this zone; returning %@",
        buf,
        0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1001A71A4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "zoneName"));
    v6 = sub_10000BDF4(CFSTR("ckks-se"), v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);

    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      v11 = 138412290;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error loading TLK pointer for this zone: %@", (uint8_t *)&v11, 0xCu);

    }
    v9 = *(_QWORD *)(a1 + 48);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(v9 + 16))(v9, 0, 0, 0, v10);

  }
  else
  {
    objc_msgSend(WeakRetained, "loadKeys:reply:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }

}

void sub_1001A730C(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 9);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "databaseProvider"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001A7454;
  v7[3] = &unk_1002EA9D0;
  v8 = a1[4];
  v9 = a1[5];
  v6 = v3;
  v10 = v6;
  v11 = a1[6];
  v14 = a1[8];
  v12 = a1[7];
  objc_copyWeak(&v15, a1 + 9);
  v13 = WeakRetained;
  objc_msgSend(v5, "dispatchSyncWithReadOnlySQLTransaction:", v7);

  objc_destroyWeak(&v15);
}

void sub_1001A7440(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001A7454(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  id v30;
  id v31;
  uint64_t v32;
  void *i;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  void *v43;
  id v44;
  NSObject *v45;
  void *v46;
  void *v47;
  id v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  uint64_t v77;
  void *j;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  id v83;
  uint64_t v84;
  void *k;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  id v91;
  NSObject *v92;
  unsigned int v93;
  void *v94;
  void *v95;
  void *v96;
  id v97;
  NSObject *v98;
  unsigned int v99;
  id v100;
  uint64_t v101;
  void *m;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  id v107;
  NSObject *v108;
  void *v109;
  void *v110;
  id v111;
  id v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  id v117;
  NSObject *v118;
  void *v119;
  void *v120;
  id v121;
  NSObject *v122;
  void *v123;
  void *v124;
  id v125;
  NSObject *v126;
  void *v127;
  void *v128;
  id v129;
  NSObject *v130;
  void *v131;
  void *v132;
  id v133;
  void *v134;
  id v135;
  id v136;
  void *v137;
  void *v138;
  void *v139;
  id v140;
  id obj;
  void *v142;
  void *v143;
  _QWORD v144[4];
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  id v162;
  id v163;
  id v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  id v169;
  id v170;
  id v171;
  id v172;
  id v173;
  uint8_t v174[128];
  uint8_t buf[4];
  _BYTE v176[14];
  _BYTE v177[128];
  _BYTE v178[128];
  _BYTE v179[128];

  v2 = (id *)(a1 + 40);
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "contextID"));
  v173 = 0;
  v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "makeCKKSKey:contextID:error:", v4, v5, &v173));
  v140 = v173;

  if (v139 && !v140)
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v172 = 0;
    v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "makeFakeCKKSClassKey:contextID:zoneiD:error:", CFSTR("classA"), v7, v8, &v172));
    v9 = v172;

    v10 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v171 = v9;
    v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "makeFakeCKKSClassKey:contextID:zoneiD:error:", CFSTR("classC"), v11, v12, &v171));
    v140 = v171;

    if (!v138 || !v137)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "zoneName"));
      v28 = sub_10000BDF4(CFSTR("ckks-se"), v27);
      v29 = objc_claimAutoreleasedReturnValue(v28);

      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v176 = v140;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Unable to make fake class keys: %@", buf, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 48), "setError:", v140);
      goto LABEL_80;
    }
    v13 = *(void **)(a1 + 56);
    if (v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uuid"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextID"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
      v170 = 0;
      v143 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSKey fromDatabase:contextID:zoneID:error:](CKKSKey, "fromDatabase:contextID:zoneID:error:", v14, v15, v16, &v170));
      v136 = v170;

      if (!v143 || v136)
      {
        v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "zoneName"));
        v117 = sub_10000BDF4(CFSTR("ckks-se"), v116);
        v118 = objc_claimAutoreleasedReturnValue(v117);

        if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)v176 = v136;
          _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_ERROR, "Unable to load old TLK: %@", buf, 0xCu);
        }

        (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
        goto LABEL_79;
      }
      v17 = *(void **)(a1 + 56);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextID"));
      v169 = 0;
      v136 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "makeCKKSKey:contextID:error:", v18, v19, &v169));
      v20 = v169;

      if (!v136 || v20)
      {
        v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "zoneName"));
        v125 = sub_10000BDF4(CFSTR("ckks-se"), v124);
        v126 = objc_claimAutoreleasedReturnValue(v125);

        if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)v176 = v20;
          _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_ERROR, "Unable to convert old TLK: %@", buf, 0xCu);
        }

        objc_msgSend(*(id *)(a1 + 48), "setError:", v20);
        goto LABEL_79;
      }
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v143, "storedCKRecord"));
      objc_msgSend(v136, "setStoredCKRecord:", v21);

    }
    else
    {
      v136 = 0;
    }
    v143 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v167 = 0u;
    v168 = 0u;
    v165 = 0u;
    v166 = 0u;
    v30 = *(id *)(a1 + 64);
    v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v165, v179, 16);
    if (v31)
    {
      v32 = *(_QWORD *)v166;
      do
      {
        for (i = 0; i != v31; i = (char *)i + 1)
        {
          if (*(_QWORD *)v166 != v32)
            objc_enumerationMutation(v30);
          v34 = *(void **)(*((_QWORD *)&v165 + 1) + 8 * (_QWORD)i);
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextID"));
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "makeTLKShareRecord:contextID:", v35, v36));

          objc_msgSend(v143, "addObject:", v37);
        }
        v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v165, v179, 16);
      }
      while (v31);
    }

    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "zoneName"));
    v40 = sub_10000BDF4(CFSTR("ckks-se"), v39);
    v41 = objc_claimAutoreleasedReturnValue(v40);

    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v176 = v139;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Trying to set TLK %@", buf, 0xCu);
    }

    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "zoneName"));
    v44 = sub_10000BDF4(CFSTR("ckks-se"), v43);
    v45 = objc_claimAutoreleasedReturnValue(v44);

    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v176 = v136;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Wrapped old TLK: %@", buf, 0xCu);
    }

    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "zoneName"));
    v48 = sub_10000BDF4(CFSTR("ckks-se"), v47);
    v49 = objc_claimAutoreleasedReturnValue(v48);

    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v176 = v143;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "TLKShares: %@", buf, 0xCu);
    }

    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextID"));
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "uuid"));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
    v164 = 0;
    v134 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeyPointer forKeyClass:contextID:withKeyUUID:zoneID:error:](CKKSCurrentKeyPointer, "forKeyClass:contextID:withKeyUUID:zoneID:error:", CFSTR("tlk"), v50, v51, v52, &v164));
    v135 = v164;

    if (!v134 || v135)
    {
      v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
      v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "zoneName"));
      v121 = sub_10000BDF4(CFSTR("ckks-se"), v120);
      v122 = objc_claimAutoreleasedReturnValue(v121);

      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v176 = v135;
        _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_ERROR, "Unable to create CKP: %@", buf, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 48), "setError:", v135);
    }
    else
    {
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextID"));
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "uuid"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
      v163 = 0;
      v132 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeyPointer forKeyClass:contextID:withKeyUUID:zoneID:error:](CKKSCurrentKeyPointer, "forKeyClass:contextID:withKeyUUID:zoneID:error:", CFSTR("classA"), v53, v54, v55, &v163));
      v56 = v163;

      v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextID"));
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "uuid"));
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
      v162 = v56;
      v131 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSCurrentKeyPointer forKeyClass:contextID:withKeyUUID:zoneID:error:](CKKSCurrentKeyPointer, "forKeyClass:contextID:withKeyUUID:zoneID:error:", CFSTR("classC"), v57, v58, v59, &v162));
      v135 = v162;

      if (v132 && v131)
      {
        v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "CKRecordWithZoneID:", v61));
        objc_msgSend(v60, "addObject:", v62);

        v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "CKRecordWithZoneID:", v63));
        objc_msgSend(v60, "addObject:", v64);

        v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "CKRecordWithZoneID:", v65));
        objc_msgSend(v60, "addObject:", v66);

        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "CKRecordWithZoneID:", v67));
        objc_msgSend(v60, "addObject:", v68);

        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "CKRecordWithZoneID:", v69));
        objc_msgSend(v60, "addObject:", v70);

        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "CKRecordWithZoneID:", v71));
        objc_msgSend(v60, "addObject:", v72);

        if (v136)
        {
          v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
          v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "CKRecordWithZoneID:", v73));
          objc_msgSend(v60, "addObject:", v74);

        }
        v160 = 0u;
        v161 = 0u;
        v158 = 0u;
        v159 = 0u;
        v75 = v143;
        v76 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v158, v178, 16);
        if (v76)
        {
          v77 = *(_QWORD *)v159;
          do
          {
            for (j = 0; j != v76; j = (char *)j + 1)
            {
              if (*(_QWORD *)v159 != v77)
                objc_enumerationMutation(v75);
              v79 = *(void **)(*((_QWORD *)&v158 + 1) + 8 * (_QWORD)j);
              v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID", v131));
              v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "CKRecordWithZoneID:", v80));
              objc_msgSend(v60, "addObject:", v81);

            }
            v76 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v158, v178, 16);
          }
          while (v76);
        }

        v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v82 = v60;
        v83 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v154, v177, 16);
        if (v83)
        {
          v84 = *(_QWORD *)v155;
          do
          {
            for (k = 0; k != v83; k = (char *)k + 1)
            {
              if (*(_QWORD *)v155 != v84)
                objc_enumerationMutation(v82);
              v86 = *(void **)(*((_QWORD *)&v154 + 1) + 8 * (_QWORD)k);
              v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "recordID", v131));
              objc_msgSend(v142, "setObject:forKeyedSubscript:", v86, v87);

            }
            v83 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v154, v177, 16);
          }
          while (v83);
        }

        v133 = objc_msgSend(objc_alloc((Class)CKModifyRecordsOperation), "initWithRecordsToSave:recordIDsToDelete:", v82, &__NSArray0__struct);
        objc_msgSend(v133, "setAtomic:", 1);
        v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "configuration"));
        objc_msgSend(v88, "setIsCloudKitSupportOperation:", 1);

        objc_msgSend(v133, "setSavePolicy:", 0);
        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "zoneName"));
        v91 = sub_10000BDF4(CFSTR("ckks-se"), v90);
        v92 = objc_claimAutoreleasedReturnValue(v91);

        if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
        {
          v93 = objc_msgSend(v133, "qualityOfService");
          v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "group"));
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v176 = v93;
          *(_WORD *)&v176[4] = 2112;
          *(_QWORD *)&v176[6] = v94;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "QoS: %d; operation group is %@",
            buf,
            0x12u);

        }
        v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
        v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "zoneName"));
        v97 = sub_10000BDF4(CFSTR("ckks-se"), v96);
        v98 = objc_claimAutoreleasedReturnValue(v97);

        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
        {
          v99 = objc_msgSend(v82, "count");
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v176 = v99;
          _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "Beginning upload for %d records", buf, 8u);
        }

        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        obj = v82;
        v100 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v150, v174, 16);
        if (v100)
        {
          v101 = *(_QWORD *)v151;
          do
          {
            for (m = 0; m != v100; m = (char *)m + 1)
            {
              if (*(_QWORD *)v151 != v101)
                objc_enumerationMutation(obj);
              v103 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * (_QWORD)m);
              v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "recordID", v131));
              v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "zoneID"));
              v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "zoneName"));
              v107 = sub_10000BDF4(CFSTR("ckks-se"), v106);
              v108 = objc_claimAutoreleasedReturnValue(v107);

              if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
              {
                v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "recordID"));
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)v176 = v109;
                _os_log_debug_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "Record to save: %@", buf, 0xCu);

              }
            }
            v100 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v150, v174, 16);
          }
          while (v100);
        }

        objc_msgSend(v133, "setPerRecordSaveBlock:", &stru_1002EA938);
        v110 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSResultOperation named:withBlock:](CKKSResultOperation, "named:withBlock:", CFSTR("wait-until-write-finished"), &stru_1002EA958));
        objc_msgSend(*(id *)(a1 + 48), "dependOnBeforeGroupFinished:", v110);
        v144[0] = _NSConcreteStackBlock;
        v144[1] = 3221225472;
        v144[2] = sub_1001A86A8;
        v144[3] = &unk_1002EA9A8;
        objc_copyWeak(&v149, (id *)(a1 + 88));
        v145 = *(id *)(a1 + 40);
        v111 = v142;
        v146 = v111;
        v147 = *(id *)(a1 + 48);
        v112 = v110;
        v148 = v112;
        objc_msgSend(v133, "setModifyRecordsCompletionBlock:", v144);
        v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "operationDependencies"));
        v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "ckdatabase"));
        objc_msgSend(v114, "addOperation:", v133);

        objc_destroyWeak(&v149);
      }
      else
      {
        v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID", v131));
        v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "zoneName"));
        v129 = sub_10000BDF4(CFSTR("ckks-se"), v128);
        v130 = objc_claimAutoreleasedReturnValue(v129);

        if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)v176 = v135;
          _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_ERROR, "Unable to create class CKP: %@", buf, 0xCu);
        }

        objc_msgSend(*(id *)(a1 + 48), "setError:", v135);
      }

    }
LABEL_79:

LABEL_80:
    goto LABEL_81;
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "zoneName"));
  v24 = sub_10000BDF4(CFSTR("ckks-se"), v23);
  v25 = objc_claimAutoreleasedReturnValue(v24);

  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v176 = v140;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Unable to make TLK: %@", buf, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 48), "setError:", v140);
LABEL_81:

}

void sub_1001A8688(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001A86A8(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained(a1 + 8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "databaseProvider"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001A87C4;
  v12[3] = &unk_1002EA980;
  v13 = v7;
  v14 = a1[4];
  v15 = WeakRetained;
  v16 = a1[5];
  v17 = a1[6];
  v18 = a1[7];
  v19 = v6;
  v10 = v6;
  v11 = v7;
  objc_msgSend(v9, "dispatchSyncWithSQLTransaction:", v12);

}

uint64_t sub_1001A87C4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t v21[128];
  uint8_t buf[4];
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "zoneID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
  v5 = sub_10000BDF4(CFSTR("ckks-se"), v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);

  if (v2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "error proposing new TLK: %@", buf, 0xCu);
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "operationDependencies"));
    objc_msgSend(v8, "intransactionCKWriteFailed:attemptedRecordsChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));

    objc_msgSend(*(id *)(a1 + 64), "setError:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completed uploading new TLK!", buf, 2u);
    }

    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v9 = *(id *)(a1 + 80);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v12)
            objc_enumerationMutation(v9);
          v14 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "operationDependencies", (_QWORD)v17));
          objc_msgSend(v15, "intransactionCKRecordChanged:resync:", v14, 0);

        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v11);
    }

  }
  objc_msgSend(*(id *)(a1 + 64), "runBeforeGroupFinished:", *(_QWORD *)(a1 + 72), (_QWORD)v17);
  return 1;
}

void sub_1001A89D8(id a1, CKRecordID *a2, CKRecord *a3, NSError *a4)
{
  CKRecordID *v6;
  CKRecord *v7;
  NSError *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSError *v13;
  CKRecordID *v14;
  int v15;
  NSError *v16;
  __int16 v17;
  CKRecordID *v18;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordID zoneID](v6, "zoneID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneName"));
  v11 = sub_10000BDF4(CFSTR("ckks-se"), v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);

  if (v8)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = 138412546;
      v16 = v8;
      v17 = 2112;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "error on row: %@ %@", (uint8_t *)&v15, 0x16u);
    }
  }
  else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (NSError *)objc_claimAutoreleasedReturnValue(-[CKRecordID recordName](v6, "recordName"));
    v14 = (CKRecordID *)objc_claimAutoreleasedReturnValue(-[CKRecord recordChangeTag](v7, "recordChangeTag"));
    v15 = 138412546;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Record upload successful for %@ (%@)", (uint8_t *)&v15, 0x16u);

  }
}

void sub_1001AF388(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[22];

  v4[0] = kSecAttrAccessGroup;
  v4[1] = kSecAttrSharingGroup;
  v4[2] = kSecAttrAccount;
  v4[3] = kSecAttrProtocol;
  v4[4] = kSecAttrServer;
  v4[5] = kSecAttrPort;
  v4[6] = kSecAttrPath;
  v4[7] = kSecAttrAuthenticationType;
  v4[8] = kSecValueData;
  v4[9] = kSecAttrCreationDate;
  v4[10] = kSecAttrModificationDate;
  v4[11] = kSecAttrComment;
  v4[12] = kSecAttrLabel;
  v4[13] = kSecAttrAccessible;
  v4[14] = kSecAttrSyncViewHint;
  v4[15] = kSecAttrSecurityDomain;
  v4[16] = kSecDataInetExtraNotes;
  v4[17] = kSecDataInetExtraHistory;
  v4[18] = kSecDataInetExtraClientDefined0;
  v4[19] = kSecDataInetExtraClientDefined1;
  v4[20] = kSecDataInetExtraClientDefined2;
  v4[21] = kSecDataInetExtraClientDefined3;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 22));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1));
  v3 = (void *)qword_100341488;
  qword_100341488 = v2;

}

void sub_1001AF550(id a1)
{
  const void *v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  const void *v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v1 = sub_10000EF14("engine");
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Performing keychain backup after unlock because backing up while locked failed", buf, 2u);
  }

  v3 = sub_1002025E0();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "performTransaction:", &stru_1002EAB60);
  }
  else
  {
    v6 = sub_10000EF14("ckks");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to get account object", v8, 2u);
    }

  }
}

void sub_1001AF630(id a1, SOSAccountTransaction *a2)
{
  CFMutableSetRef v2;
  const void *v3;
  NSObject *v4;
  const char *v5;
  const void *v6;
  CFTypeRef v7;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v10;

  cf = 0;
  v2 = sub_1001D5B58(a2, (uint64_t)&cf);
  if (v2)
  {
    v3 = sub_10000EF14("engine");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    *(_DWORD *)buf = 138412290;
    v10 = v2;
    v5 = "SOSEnsureBackup: SOS made a backup of views: %@";
  }
  else
  {
    v6 = sub_10000EF14("SecError");
    v4 = objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    *(_DWORD *)buf = 138412290;
    v10 = cf;
    v5 = "engine: SOSEnsureBackup: encountered an error while making backup (%@)";
  }
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, buf, 0xCu);
LABEL_7:

  v7 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v7);
  }

}

void sub_1001AF748(id a1)
{
  NSOperationQueue *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = objc_opt_new(NSOperationQueue);
  v2 = (void *)qword_1003414A0;
  qword_1003414A0 = (uint64_t)v1;

  v3 = objc_claimAutoreleasedReturnValue(+[CKKSLockStateTracker globalTracker](CKKSLockStateTracker, "globalTracker"));
  v4 = (void *)qword_1003414A8;
  qword_1003414A8 = v3;

}

void sub_1001AFE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,id a23)
{
  id *v23;
  id *v24;
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_1001B01F0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t v16[128];
  uint8_t buf[4];
  void *v18;

  v2 = KCSharingLogObject(CFSTR("KCSharingXPCListenerDelegate"));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientConnections"));
    *(_DWORD *)buf = 138543362;
    v18 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "calling accountChanged to connections %{public}@", buf, 0xCu);

  }
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientConnections", 0));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v8), "connection"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "remoteObjectProxy"));
        objc_msgSend(v10, "accountChanged");

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

void sub_1001B0378(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t v16[128];
  uint8_t buf[4];
  void *v18;

  v2 = KCSharingLogObject(CFSTR("KCSharingXPCListenerDelegate"));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientConnections"));
    *(_DWORD *)buf = 138412290;
    v18 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "calling groupsUpdated to connections %@", buf, 0xCu);

  }
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientConnections", 0));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v8), "connection"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "remoteObjectProxy"));
        objc_msgSend(v10, "groupsUpdated");

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

id sub_1001B0500(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "isEqual:", a2);
}

void sub_1001B050C(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "connectionWasInterrupted:", v2);

}

void sub_1001B055C(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "connectionWasInvalidated:", v2);

}

id sub_1001B05AC(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "valueForEntitlement:", a2));
  if (v2 && (v3 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v2, v3) & 1) != 0))
    v4 = objc_msgSend(v2, "BOOLValue");
  else
    v4 = 0;

  return v4;
}

void sub_1001B0650(id a1)
{
  void *v1;
  KCSharingXPCListenerDelegate *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[16];

  v1 = objc_autoreleasePoolPush();
  if (objc_opt_class(CKDatabase))
  {
    v2 = objc_alloc_init(KCSharingXPCListenerDelegate);
    v3 = (void *)qword_1003414B8;
    qword_1003414B8 = (uint64_t)v2;

    v4 = qword_1003414B8;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[KCSharingSyncController sharedInstance](KCSharingSyncController, "sharedInstance"));
    objc_msgSend(v5, "setXpcListenerDelegate:", v4);

    v6 = qword_1003414B8;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[KCSharingDaemonGroupManager sharedInstance](KCSharingDaemonGroupManager, "sharedInstance"));
    objc_msgSend(v7, "setXpcListenerDelegate:", v6);

  }
  else
  {
    v8 = KCSharingLogObject(CFSTR("KCSharingXPCListenerDelegate"));
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "KCSharing is unavailable, you don't get an xpc delegate", v10, 2u);
    }

  }
  objc_autoreleasePoolPop(v1);
}

void sub_1001B2BAC(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v1 = CKAcceptableValueClasses(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](NSMutableSet, "setWithSet:", v2));
  v4 = (void *)qword_1003414C0;
  qword_1003414C0 = v3;

  v5 = (void *)qword_1003414C0;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[SecXPCHelper safeErrorClasses](SecXPCHelper, "safeErrorClasses"));
  objc_msgSend(v5, "unionSet:", v6);

}

uint64_t sub_1001B650C(_BYTE *a1, uint64_t a2)
{
  int *v4;
  int *v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  unint64_t v15;
  uint64_t String;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int *v21;
  SECC2MPInternalTestConfig *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t result;
  _QWORD v37[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v4 = &OBJC_IVAR___SecBackupKeybagEntry__publickeyHash;
    v5 = &OBJC_IVAR___SecBackupKeybagEntry__publickeyHash;
    v6 = &OBJC_IVAR___SecBackupKeybagEntry__publickeyHash;
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v10 == -1 || v10 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v11 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v10);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v10 + 1;
        v9 |= (unint64_t)(v11 & 0x7F) << v7;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        v12 = v8++ >= 9;
        if (v12)
        {
          v9 = 0;
          v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v9 = 0;
LABEL_14:
      if (v13 || (v9 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v15 = v9 >> 3;
      if ((int)(v9 >> 3) <= 200)
      {
        switch((int)v15)
        {
          case 'e':
            String = PBReaderReadString(a2);
            v17 = objc_claimAutoreleasedReturnValue(String);
            v18 = v4[161];
            goto LABEL_44;
          case 'f':
            v24 = PBReaderReadString(a2);
            v17 = objc_claimAutoreleasedReturnValue(v24);
            v18 = v5[162];
            goto LABEL_44;
          case 'g':
            v25 = PBReaderReadString(a2);
            v17 = objc_claimAutoreleasedReturnValue(v25);
            v18 = v6[163];
            goto LABEL_44;
          case 'h':
            v26 = PBReaderReadString(a2);
            v17 = objc_claimAutoreleasedReturnValue(v26);
            v18 = 40;
            goto LABEL_44;
          case 'i':
            v27 = 0;
            v28 = 0;
            v29 = 0;
            a1[84] |= 1u;
            break;
          default:
            goto LABEL_47;
        }
        while (1)
        {
          v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
          v29 |= (unint64_t)(v31 & 0x7F) << v27;
          if ((v31 & 0x80) == 0)
            goto LABEL_50;
          v27 += 7;
          v12 = v28++ >= 9;
          if (v12)
          {
            v29 = 0;
            goto LABEL_52;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v29 = 0;
LABEL_52:
        a1[80] = v29 != 0;
        goto LABEL_45;
      }
      if ((int)v15 <= 202)
        break;
      if ((_DWORD)v15 == 203)
      {
        v32 = PBReaderReadString(a2);
        v17 = objc_claimAutoreleasedReturnValue(v32);
        v18 = 24;
        goto LABEL_44;
      }
      if ((_DWORD)v15 == 301)
      {
        v33 = PBReaderReadString(a2);
        v17 = objc_claimAutoreleasedReturnValue(v33);
        v18 = 72;
        goto LABEL_44;
      }
      if ((_DWORD)v15 != 302)
        goto LABEL_47;
      v19 = v6;
      v20 = v5;
      v21 = v4;
      v22 = objc_alloc_init(SECC2MPInternalTestConfig);
      objc_msgSend(a1, "addInternalTestConfig:", v22);
      v37[0] = 0xAAAAAAAAAAAAAAAALL;
      v37[1] = 0xAAAAAAAAAAAAAAAALL;
      if (!PBReaderPlaceMark(a2, v37) || !sub_1000F80EC((uint64_t)v22, a2))
      {

        return 0;
      }
      PBReaderRecallMark(a2, v37);

      v4 = v21;
      v5 = v20;
      v6 = v19;
LABEL_45:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    if ((_DWORD)v15 == 201)
    {
      v34 = PBReaderReadString(a2);
      v17 = objc_claimAutoreleasedReturnValue(v34);
      v18 = 16;
      goto LABEL_44;
    }
    if ((_DWORD)v15 == 202)
    {
      v23 = PBReaderReadString(a2);
      v17 = objc_claimAutoreleasedReturnValue(v23);
      v18 = 32;
LABEL_44:
      v35 = *(void **)&a1[v18];
      *(_QWORD *)&a1[v18] = v17;

      goto LABEL_45;
    }
LABEL_47:
    result = PBReaderSkipValueWithTag(a2);
    if (!(_DWORD)result)
      return result;
    goto LABEL_45;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001B6A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001B6A64(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  const void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ckks"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneChangeFetcher"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "inflightFetch"));
  objc_msgSend(WeakRetained, "addNullableSuccessDependency:", v5);

  v6 = sub_10000EF14("octagon-ckks");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ckks"));
    v13 = 138412290;
    v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Waiting for CKKS Priority view download for %@", (uint8_t *)&v13, 0xCu);

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "operationDependencies"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ckks"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "rpcProcessIncomingQueue:errorOnClassAFailure:", 0, 0));
  objc_msgSend(WeakRetained, "addSuccessDependency:", v12);

}

uint64_t sub_1001B720C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t String;
  void *v22;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 101)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      *(_BYTE *)(a1 + 28) |= 1u;
      while (1)
      {
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 == -1 || v19 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          goto LABEL_33;
        v16 += 7;
        v9 = v17++ >= 9;
        if (v9)
        {
          v18 = 0;
          goto LABEL_35;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v18 = 0;
LABEL_35:
      *(_BYTE *)(a1 + 24) = v18 != 0;
    }
    else
    {
      if ((_DWORD)v12 == 2)
      {
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = 16;
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v13 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        v15 = 8;
      }
      v22 = *(void **)(a1 + v15);
      *(_QWORD *)(a1 + v15) = v14;

    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001B782C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001B79DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001B7B74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001B7F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1001B805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001B813C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001B8898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1001B8D14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setHalted:", 1);
}

void sub_1001B8D20(id *a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  char v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  char v19;
  NSObject *v20;
  id v21;
  _QWORD block[5];
  id v23;
  id v24;
  id v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t v31[128];
  uint8_t buf[4];
  void *v33;

  WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "error"));

    if (v3)
    {
      v4 = sub_10000BDF4(CFSTR("ckksfetcher"), 0);
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "error"));
        *(_DWORD *)buf = 138412290;
        v33 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Interrogating clients about fetch error: %@", buf, 0xCu);

      }
      v21 = WeakRetained;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "strongClientMap"));
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "fetchedZoneIDs"));
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      if (v9)
      {
        v10 = v9;
        v11 = 0;
        v12 = *(_QWORD *)v28;
        do
        {
          for (i = 0; i != v10; i = (char *)i + 1)
          {
            if (*(_QWORD *)v28 != v12)
              objc_enumerationMutation(v8);
            v14 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v14));
            if (v15)
            {
              v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "error"));
              v11 = v11 & 1 | objc_msgSend(v15, "shouldRetryAfterFetchError:zoneID:", v16, v14);

            }
          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
        }
        while (v10);
      }
      else
      {
        v11 = 0;
      }

      v19 = v11 & 1;
      WeakRetained = v21;
    }
    else
    {
      v19 = 0;
    }
    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001B9018;
    block[3] = &unk_1002EAC70;
    block[4] = WeakRetained;
    v23 = a1[4];
    v26 = v19;
    v24 = a1[5];
    v25 = a1[6];
    dispatch_sync(v20, block);

  }
  else
  {
    v17 = sub_10000BDF4(CFSTR("ckksfetcher"), 0);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Received a null self pointer; strange.",
        buf,
        2u);
    }

  }
}

void sub_1001B9018(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unsigned int v26;
  void *v27;
  void *v28;
  const __CFString *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  void *v37;
  _BYTE v38[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setLastCKFetchError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    if (!*(_BYTE *)(a1 + 64))
    {
      v18 = sub_10000BDF4(CFSTR("ckksfetcher"), 0);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
        *(_DWORD *)buf = 138412290;
        v35 = *(double *)&v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "All clients thought %@ is a fatal error. Not restarting fetch.", buf, 0xCu);

      }
      goto LABEL_25;
    }
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
    v5 = CKRetryAfterSecondsForError();

    v6 = sub_10000BDF4(CFSTR("ckksfetcher"), 0);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5 == 0.0)
    {
      if (v8)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
        *(_DWORD *)buf = 138412290;
        v35 = *(double *)&v21;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fetch failed with error, restarting soon: %@", buf, 0xCu);

      }
    }
    else
    {
      if (v8)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
        *(_DWORD *)buf = 134218242;
        v35 = v5;
        v36 = 2112;
        v37 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fetch failed with rate-limiting error, restarting in %.1f seconds: %@", buf, 0x16u);

      }
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchScheduler"));
      -[NSObject waitUntil:](v7, "waitUntil:", (unint64_t)(v5 * 1000000000.0));
    }

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentFetchReasons"));
    objc_msgSend(v22, "unionSet:", *(_QWORD *)(a1 + 48));

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "apnsPushes"));
    objc_msgSend(v23, "unionSet:", *(_QWORD *)(a1 + 56));

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reachabilityTracker"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
    v26 = objc_msgSend(v24, "isNetworkError:", v25);

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentFetchReasons"));
    v28 = v27;
    if (v26)
      v29 = CFSTR("network");
    else
      v29 = CFSTR("fetchfailed");
    objc_msgSend(v27, "addObject:", v29);

    objc_msgSend(*(id *)(a1 + 32), "setNewRequests:", 1);
LABEL_24:
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchScheduler"));
    -[NSObject trigger](v19, "trigger");
LABEL_25:

    return;
  }
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inflightFetchDependencies", 0));
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v31 != v13)
          objc_enumerationMutation(v10);
        v15 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
        objc_msgSend(v16, "addOperation:", v15);

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    }
    while (v12);
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inflightFetchDependencies"));
  objc_msgSend(v17, "removeAllObjects");

  objc_msgSend(*(id *)(a1 + 32), "setCurrentFetch:", 0);
  if (objc_msgSend(*(id *)(a1 + 32), "newRequests"))
    goto LABEL_24;
}

id sub_1001B93F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "maybeCreateNewFetchOnQueue");
}

uint64_t sub_1001B93F8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001B9408(uint64_t a1)
{

}

void sub_1001B9410(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if ((objc_msgSend(*(id *)(a1 + 32), "newRequests") & 1) != 0
    || (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inflightFetchDependency")),
        v2,
        !v2))
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "successfulFetchDependency"));
  }
  else
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inflightFetchDependency"));
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1001B947C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "successfulFetchDependency"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  objc_msgSend(*(id *)(a1 + 32), "setNewRequests:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentFetchReasons"));
  objc_msgSend(v5, "unionSet:", *(_QWORD *)(a1 + 40));

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchScheduler"));
  objc_msgSend(v6, "trigger");

}

void sub_1001B9500(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  SecEventMetric *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  int v16;
  uint64_t v17;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "apnsPushes"));
    objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 32));

    if (objc_msgSend(*(id *)(a1 + 32), "ckksPushTracingEnabled"))
    {
      v3 = sub_10000BDF4(CFSTR("ckksfetch"), 0);
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v16 = 138412290;
        v17 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Submitting initial CKEventMetric due to notification %@", (uint8_t *)&v16, 0xCu);
      }

      v6 = objc_msgSend(objc_alloc((Class)CKEventMetric), "initWithEventName:", CFSTR("APNSPushMetrics"));
      objc_msgSend(v6, "setIsPushTriggerFired:", 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckksPushTracingUUID"));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("push_token_uuid"));

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckksPushReceivedDate"));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("push_received_date"));

      objc_msgSend(v6, "setObject:forKeyedSubscript:", CFSTR("CKKS APNS Push Received"), CFSTR("push_event_name"));
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
        v9 = CFSTR("not-ready");
      else
        v9 = CFSTR("ready");
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, CFSTR("zones_status"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "container"));
      objc_msgSend(v10, "submitEventMetric:", v6);

      v11 = -[SecEventMetric initWithEventName:]([SecEventMetric alloc], "initWithEventName:", CFSTR("APNSPushMetrics"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckksPushTracingUUID"));
      -[SecEventMetric setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v12, CFSTR("push_token_uuid"));

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckksPushReceivedDate"));
      -[SecEventMetric setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v13, CFSTR("push_received_date"));

      -[SecEventMetric setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", CFSTR("CKKS APNS Push Received-webtunnel"), CFSTR("push_event_name"));
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
        v14 = CFSTR("not-ready");
      else
        v14 = CFSTR("ready");
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v14, CFSTR("zones_status"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[SecMetrics managerObject](SecMetrics, "managerObject"));
      objc_msgSend(v15, "submitEvent:", v11);

    }
  }
}

void sub_1001B97AC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "maybeCreateNewFetch");

}

void sub_1001B9A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001BA2B0(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  id WeakRetained;
  OctagonPendingFlag *v5;
  void *v6;
  uint8_t v7[16];

  v2 = sub_10000EF14("upgr-phase3");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CKKSNFS triggered!", v7, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = -[OctagonPendingFlag initWithFlag:conditions:]([OctagonPendingFlag alloc], "initWithFlag:conditions:", CFSTR("schedule_pref_upgrade"), 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateMachine"));
  objc_msgSend(v6, "handlePendingFlag:", v5);

}

void sub_1001BA73C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1001BA864(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  id v17;
  unsigned int v18;
  BOOL v19;
  void *v20;
  const void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  const __CFString *v25;
  const __CFString *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  unsigned int v35;
  void *v36;
  void *v37;
  const void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  id v42;
  const __CFString *v43;
  unsigned int v44;
  const __CFString *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  unsigned int v52;
  void *v53;
  uint8_t buf[4];
  const __CFString *v55;
  __int16 v56;
  const __CFString *v57;
  __int16 v58;
  id v59;

  v6 = a4;
  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "walrus"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "webAccess"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "settings"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "walrus"));
  if (!v12)
  {

    goto LABEL_6;
  }
  v13 = v12;
  if (v9)
  {
    v14 = objc_msgSend(v9, "value");
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "settings"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "walrus"));
    v17 = v6;
    v18 = objc_msgSend(v16, "enabled");

    v19 = v14 == v18;
    v6 = v17;
    if (!v19)
      goto LABEL_8;
LABEL_6:
    v20 = 0;
    goto LABEL_19;
  }

LABEL_8:
  v21 = sub_10000EF14("SecError");
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "settings"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "walrus"));
    if (objc_msgSend(v24, "enabled"))
      v25 = CFSTR("ON");
    else
      v25 = CFSTR("OFF");
    if (v9)
    {
      if (objc_msgSend(v9, "value"))
        v26 = CFSTR("ON");
      else
        v26 = CFSTR("OFF");
    }
    else
    {
      v26 = CFSTR("none");
    }
    *(_DWORD *)buf = 138412802;
    v55 = v25;
    v56 = 2112;
    v57 = v26;
    v58 = 2112;
    v59 = v6;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "octagon: error setting walrus: Intended value: %@, final value: %@, error: %@", buf, 0x20u);

  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:underlying:](NSError, "errorWithDomain:code:description:underlying:", CFSTR("com.apple.security.octagon"), 51, CFSTR("Failed to set walrus setting"), v6));
LABEL_19:
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "settings"));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "webAccess"));
  if (!v28)
  {

    if (v20)
    {
LABEL_25:
      v36 = 0;
LABEL_40:
      objc_msgSend(WeakRetained, "setError:", v20);
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishOp"));
      objc_msgSend(WeakRetained, "runBeforeGroupFinished:", v49);

      goto LABEL_44;
    }
LABEL_43:
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "intendedState"));
    objc_msgSend(WeakRetained, "setNextState:", v51);

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishOp"));
    objc_msgSend(WeakRetained, "runBeforeGroupFinished:", v20);
    goto LABEL_44;
  }
  v29 = v28;
  if (v10)
  {
    v52 = objc_msgSend(v10, "value");
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "settings"));
    v31 = v9;
    v32 = v10;
    v33 = v6;
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "webAccess"));
    v35 = objc_msgSend(v34, "enabled");

    v6 = v33;
    v10 = v32;
    v9 = v31;

    if (v52 == v35)
    {
      if (!v20)
        goto LABEL_43;
      goto LABEL_25;
    }
  }
  else
  {

  }
  v53 = v9;
  v37 = v10;
  v38 = sub_10000EF14("SecError");
  v39 = objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "settings"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "webAccess"));
    v42 = v6;
    if (objc_msgSend(v41, "enabled"))
      v43 = CFSTR("ON");
    else
      v43 = CFSTR("OFF");
    v44 = objc_msgSend(v37, "value");
    *(_DWORD *)buf = 138412802;
    if (v44)
      v45 = CFSTR("ON");
    else
      v45 = CFSTR("OFF");
    v55 = v43;
    v6 = v42;
    v56 = 2112;
    v57 = v45;
    v58 = 2112;
    v59 = v42;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "octagon: Error setting web access: Intended value: %@, final value: %@, error: %@", buf, 0x20u);

  }
  v46 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:underlying:](NSError, "errorWithDomain:code:description:underlying:", CFSTR("com.apple.security.octagon"), 52, CFSTR("Failed to set web access setting"), v6));
  v36 = (void *)v46;
  if (!v20 || !v46)
  {
    v10 = v37;
    if (v20)
    {
      v9 = v53;
      goto LABEL_40;
    }
    v9 = v53;
    if (v46)
    {
      objc_msgSend(WeakRetained, "setError:", v46);
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishOp"));
      objc_msgSend(WeakRetained, "runBeforeGroupFinished:", v50);

      v20 = v36;
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  v47 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:underlying:](NSError, "errorWithDomain:code:description:underlying:", CFSTR("com.apple.security.octagon"), 51, CFSTR("Failed to set walrus setting"), v46));

  objc_msgSend(WeakRetained, "setError:", v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishOp"));
  objc_msgSend(WeakRetained, "runBeforeGroupFinished:", v48);

  v20 = (void *)v47;
  v10 = v37;
  v9 = v53;
LABEL_44:

}

void sub_1001BAEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001BB804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1001BB9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BBCB4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001BBCC4(uint64_t a1)
{

}

BOOL sub_1001BBCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  const void *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  NSObject *v35;
  uint64_t v36;
  const void *v37;
  NSObject *v38;
  uint64_t v39;
  const void *v41;
  NSObject *v42;
  int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  _QWORD block[5];
  id obj;
  NSErrorUserInfoKey v52;
  const __CFString *v53;
  uint8_t buf[4];
  _QWORD v55[2];

  v4 = *(unsigned int *)(a1 + 64);
  v5 = *(unsigned int *)(a1 + 68);
  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(unsigned __int8 *)(a1 + 72);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v9 + 40);
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "fetchKeyForClass:fromDb:keybag:specifier:allowWrites:error:", v4, a2, v5, v7, v8, &obj));
  objc_storeStrong((id *)(v9 + 40), obj);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "domain"));
    if ((objc_msgSend(v13, "isEqualToString:", kCFErrorDomainOSStatus) & 1) != 0)
    {
      v14 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "code");

      if (v14 == (id)-25308)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1001BC1CC;
        block[3] = &unk_1002EBE60;
        block[4] = *(_QWORD *)(a1 + 56);
        if (qword_1003414F0 != -1)
          dispatch_once(&qword_1003414F0, block);
        dispatch_source_merge_data((dispatch_source_t)qword_1003414E8, 1uLL);
        return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) != 0;
      }
    }
    else
    {

    }
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
LABEL_9:
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (v15)
    {
      if (*(_BYTE *)(a1 + 73))
      {
        v16 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
        objc_msgSend(v16, "setObject:forKeyedSubscript:", v15, v17);

      }
    }
    else
    {
      v37 = sub_10000EF14("SecError");
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v55[0] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "SecDbMetadataKeyStore: scary error encountered: %@", buf, 0xCu);
      }

    }
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) != 0;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v18 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    if (v18)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "domain"));
      if ((objc_msgSend(v19, "isEqualToString:", NSOSStatusErrorDomain) & 1) == 0)
      {

        goto LABEL_9;
      }
      v20 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "code");

      if (v20 != (id)-26275)
        goto LABEL_9;
    }
    v21 = sub_10000EF14("SecWarning");
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "code");
      *(_DWORD *)buf = 134217984;
      v55[0] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "SecDbMetadataKeyStore: unable to use key (%ld), will attempt to create new one", buf, 0xCu);
    }

    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v25 = *(void **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = 0;

    v26 = *(unsigned int *)(a1 + 64);
    v27 = *(unsigned int *)(a1 + 68);
    v28 = *(void **)(a1 + 32);
    v29 = *(_QWORD *)(a1 + 40);
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v49 = *(id *)(v30 + 40);
    v31 = objc_msgSend(v28, "newKeyForKeyclass:withKeybag:keySpecifier:database:error:", v26, v27, v29, a2, &v49);
    objc_storeStrong((id *)(v30 + 40), v49);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v33 = *(void **)(v32 + 40);
    *(_QWORD *)(v32 + 40) = v31;

    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) != 0;
    v34 = sub_10000EF14("SecError");
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v55[0] = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "SecDbMetadataKeyStore: unable to create or save new key: %@", buf, 0xCu);
    }

  }
  else
  {
    v41 = sub_10000EF14("SecWarning");
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v43 = *(_DWORD *)(a1 + 64);
      v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 67109378;
      LODWORD(v55[0]) = v43;
      WORD2(v55[0]) = 2112;
      *(_QWORD *)((char *)v55 + 6) = v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "SecDbMetadataKeyStore: Unable to load metadatakey for class %d from disk (%@) and not allowed to create new one", buf, 0x12u);
    }

    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      v52 = NSLocalizedDescriptionKey;
      v53 = CFSTR("Unable to find a suitable metadata key and not permitted to create one");
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1));
      v46 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCFErrorDomainOSStatus, -26275, v45));
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v48 = *(void **)(v47 + 40);
      *(_QWORD *)(v47 + 40) = v46;

    }
  }
  return 0;
}

void sub_1001BC1CC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  _QWORD *context;
  _QWORD aBlock[5];

  v2 = sub_1000327DC("keychainlockedlogmessage", 1);
  v3 = (void *)qword_1003414E8;
  qword_1003414E8 = (uint64_t)v2;

  v4 = qword_1003414E8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1001BC268;
  aBlock[3] = &unk_1002EBE60;
  aBlock[4] = *(_QWORD *)(a1 + 32);
  context = dispatch_get_context((dispatch_object_t)qword_1003414E8);
  context[2] = _Block_copy(aBlock);
  dispatch_activate(v4);
}

void sub_1001BC268(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  id v4;
  int v5;
  id v6;

  v2 = sub_10000EF14("SecError");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "code");
    v5 = 134217984;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SecDbKeychainItemV7: cannot decrypt metadata key because the keychain is locked (%ld)", (uint8_t *)&v5, 0xCu);
  }

}

uint64_t sub_1001BC320(uint64_t a1, sqlite3_stmt *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  CFTypeRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  _QWORD v13[4];
  __int128 v14;
  sqlite3_stmt *v15;
  uint64_t v16;

  v4 = sub_100013544(a2, 1, (const __CFString *)+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)), (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v5 + 24))
    v6 = v4;
  else
    v6 = 0;
  *(_BYTE *)(v5 + 24) = v6;
  v7 = (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001BC3F8;
  v13[3] = &unk_1002EAD80;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v15 = a2;
  v16 = v9;
  v14 = *(_OWORD *)(a1 + 48);
  result = sub_100019C40(v8, a2, v7, (uint64_t)v13);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v11 + 24))
    v12 = result;
  else
    v12 = 0;
  *(_BYTE *)(v11 + 24) = v12;
  return result;
}

uint64_t sub_1001BC3F8(uint64_t a1)
{
  id v2;
  const void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t result;

  v2 = objc_alloc((Class)NSData);
  v3 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 48), 0);
  v4 = objc_msgSend(v2, "initWithBytes:length:", v3, sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 48), 0));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  result = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 48), 1);
  **(_DWORD **)(a1 + 56) = result;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

uint64_t sub_1001BC490(uint64_t a1, sqlite3_stmt *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  char v15;

  v4 = sub_100013544(a2, 1, (const __CFString *)+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)), (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v5 + 24))
    v6 = v4;
  else
    v6 = 0;
  *(_BYTE *)(v5 + 24) = v6;
  v7 = sub_100013544(a2, 2, (const __CFString *)+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68)), (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v8 + 24))
    v9 = v7;
  else
    v9 = 0;
  *(_BYTE *)(v8 + 24) = v9;
  v10 = sub_100013BA4(a2, 3, objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes"), (unint64_t)objc_msgSend(*(id *)(a1 + 32), "length"), (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v11 + 24))
    v12 = v10;
  else
    v12 = 0;
  *(_BYTE *)(v11 + 24) = v12;
  result = sub_100019C40(*(_QWORD *)(a1 + 56), a2, (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), 0);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v14 + 24))
    v15 = result;
  else
    v15 = 0;
  *(_BYTE *)(v14 + 24) = v15;
  return result;
}

id sub_1001BC5BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueueDropAllKeys");
}

id sub_1001BC5C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueueDropClassAKeys");
}

void sub_1001BC5CC(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  NSObject *v4;
  CFTypeRef v5;
  id WeakRetained;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v9;

  cf = 0;
  *(_DWORD *)buf = -1431655766;
  v2 = sub_100025F30(dword_1003414E0, buf);
  if (sub_10003252C(v2, &cf, CFSTR("aks_get_lock_state failed: %x"), v2))
  {
    if ((buf[0] & 1) == 0)
      return;
  }
  else
  {
    v3 = sub_10000EF14("SecError");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v9 = cf;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SecDbKeychainMetadataKeyStore: error getting lock state: %@", buf, 0xCu);
    }

    v5 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v5);
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_onQueueDropClassAKeys");

}

void sub_1001BC724(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("metadata_store", 0);
  v2 = (void *)qword_1003414D8;
  qword_1003414D8 = (uint64_t)v1;

}

void sub_1001BC750(id a1)
{
  void *v1;

  v1 = (void *)qword_1003414D0;
  if (qword_1003414D0)
  {
    objc_msgSend((id)qword_1003414D0, "dropAllKeys");
    v1 = (void *)qword_1003414D0;
  }
  qword_1003414D0 = 0;

}

void sub_1001BCD38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001BCFEC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  SECC2MPGenericEventMetric *v6;
  SECC2MPGenericEventMetricValue *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  void *v18;
  id v19;

  v19 = a3;
  v5 = a2;
  v6 = objc_alloc_init(SECC2MPGenericEventMetric);
  -[SECC2MPGenericEventMetric setKey:](v6, "setKey:", v5);

  v7 = objc_alloc_init(SECC2MPGenericEventMetricValue);
  -[SECC2MPGenericEventMetric setValue:](v6, "setValue:", v7);

  v8 = objc_opt_class(NSError);
  if ((objc_opt_isKindOfClass(v19, v8) & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "generateError:", v19));
    v10 = (void *)objc_claimAutoreleasedReturnValue(-[SECC2MPGenericEventMetric value](v6, "value"));
    objc_msgSend(v10, "setErrorValue:", v9);

  }
  else
  {
    v11 = objc_opt_class(NSDate);
    if ((objc_opt_isKindOfClass(v19, v11) & 1) != 0)
    {
      v12 = *(void **)(a1 + 32);
      objc_msgSend(v19, "timeIntervalSinceReferenceDate");
      v13 = objc_msgSend(v12, "convertTimeIntervalToServerTime:");
      v9 = (void *)objc_claimAutoreleasedReturnValue(-[SECC2MPGenericEventMetric value](v6, "value"));
      objc_msgSend(v9, "setDateValue:", v13);
    }
    else
    {
      v14 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v19, v14) & 1) != 0)
      {
        objc_msgSend(v19, "doubleValue");
        v16 = v15;
        v9 = (void *)objc_claimAutoreleasedReturnValue(-[SECC2MPGenericEventMetric value](v6, "value"));
        objc_msgSend(v9, "setDoubleValue:", v16);
      }
      else
      {
        v17 = objc_opt_class(NSString);
        if ((objc_opt_isKindOfClass(v19, v17) & 1) == 0)
          goto LABEL_11;
        v9 = (void *)objc_claimAutoreleasedReturnValue(-[SECC2MPGenericEventMetric value](v6, "value"));
        objc_msgSend(v9, "setStringValue:", v19);
      }
    }
  }

  v18 = (void *)objc_claimAutoreleasedReturnValue(-[SECC2MPGenericEventMetric value](v6, "value"));
  if (v18)
    objc_msgSend(*(id *)(a1 + 40), "addMetric:", v6);
LABEL_11:

}

void sub_1001BD204(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[4];

  v4[0] = objc_opt_class(NSString);
  v4[1] = objc_opt_class(NSNumber);
  v4[2] = objc_opt_class(NSDate);
  v4[3] = objc_opt_class(NSError);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 4));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1));
  v3 = (void *)qword_100341500;
  qword_100341500 = v2;

}

void sub_1001BF69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  id v9;
  uint64_t v10;
  NSObject *v11;

  if (a2 == 1)
  {
    v9 = objc_begin_catch(exception_object);
    v10 = KCSharingLogObject(CFSTR("KCSharingGroupNotificationConnection"));
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 138412290;
      *(_QWORD *)((char *)&a9 + 4) = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Error performing selector on remote object: %@", (uint8_t *)&a9, 0xCu);
    }

    objc_end_catch();
    JUMPOUT(0x1001BF668);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BF91C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1001BF960(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = KCSharingLogObject(CFSTR("KCSharingGroupNotificationConnection"));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = WeakRetained[1];
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Connection was interrupted: %@", (uint8_t *)&v5, 0xCu);
  }

  *((_BYTE *)WeakRetained + 16) = 0;
}

void sub_1001BFA1C(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = KCSharingLogObject(CFSTR("KCSharingGroupNotificationConnection"));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = WeakRetained[1];
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Connection was invalidated: %@", (uint8_t *)&v5, 0xCu);
  }

  *((_BYTE *)WeakRetained + 16) = 0;
}

void sub_1001BFAD8(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = KCSharingLogObject(CFSTR("KCSharingGroupNotificationConnection"));
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error talking to AuthenticationServices: %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1001BFBCC(id a1)
{
  KCSharingGroupNotificationConnection *v1;
  void *v2;

  v1 = objc_alloc_init(KCSharingGroupNotificationConnection);
  v2 = (void *)qword_100341518;
  qword_100341518 = (uint64_t)v1;

}

void sub_1001BFE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001C0478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1001C091C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1001C0A28(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "monitors", 0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7), "accountStateUpdated:from:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

}

id sub_1001C0B30(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "setSendingMetricsPermitted:", *(unsigned int *)(a1 + 32));
  return v3;
}

id sub_1001C0B60(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "setAttemptedJoin:", *(unsigned int *)(a1 + 32));
  return v3;
}

id sub_1001C0B90(uint64_t a1, void *a2)
{
  id v3;
  double v4;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSince1970");
  objc_msgSend(v3, "setLastHealthCheckup:", (unint64_t)(v4 * 1000.0));
  return v3;
}

uint64_t sub_1001C0BD8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001C0BE8(uint64_t a1)
{

}

void sub_1001C0BF0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id obj;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v3 + 40);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_onqueueLoadOrCreateAccountMetadata:", &obj));
  objc_storeStrong((id *)(v3 + 40), obj);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = objc_msgSend(v7, "copy");
    v10 = (*(uint64_t (**)(uint64_t, id))(v8 + 16))(v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

    v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerName"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contextID"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personaAdapter"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeAccount"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "personaUniqueString"));
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v25 = *(id *)(v20 + 40);
      v21 = objc_msgSend(v14, "saveToKeychainForContainer:contextID:personaAdapter:personaUniqueString:error:", v15, v16, v17, v19, &v25);
      objc_storeStrong((id *)(v20 + 40), v25);

      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      if (!v21)
      {
        *(_BYTE *)(v22 + 24) = 0;
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v24 = *(void **)(v23 + 40);
        *(_QWORD *)(v23 + 40) = 0;

        return;
      }
    }
    else
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    }
    *(_BYTE *)(v22 + 24) = 1;
  }
}

id sub_1001C0D9C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "setTrustState:", *(unsigned int *)(a1 + 32));
  return v3;
}

id sub_1001C0DCC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "setPeerID:", *(_QWORD *)(a1 + 32));
  return v3;
}

void sub_1001C0DFC(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id obj;

  v2 = (void *)a1[4];
  v3 = *(_QWORD *)(a1[6] + 8);
  obj = *(id *)(v3 + 40);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_onqueueLoadOrCreateAccountMetadata:", &obj));
  objc_storeStrong((id *)(v3 + 40), obj);
  v5 = *(_QWORD *)(a1[5] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

BOOL sub_1001C1A80(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      switch((v6 >> 3))
      {
        case 'f':
          String = PBReaderReadString(a2);
          v13 = objc_claimAutoreleasedReturnValue(String);
          v14 = 32;
          goto LABEL_24;
        case 'g':
          v15 = PBReaderReadString(a2);
          v13 = objc_claimAutoreleasedReturnValue(v15);
          v14 = 8;
          goto LABEL_24;
        case 'h':
          v16 = PBReaderReadString(a2);
          v13 = objc_claimAutoreleasedReturnValue(v16);
          v14 = 16;
          goto LABEL_24;
        case 'i':
          v17 = PBReaderReadString(a2);
          v13 = objc_claimAutoreleasedReturnValue(v17);
          v14 = 24;
LABEL_24:
          v18 = *(void **)(a1 + v14);
          *(_QWORD *)(a1 + v14) = v13;

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
            return 0;
LABEL_25:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

xpc_object_t sub_1001C1C74(xpc_object_t message, CFTypeRef *a2)
{
  void *v4;
  _xpc_connection_s *v5;
  char v6;
  int v7;
  xpc_object_t v8;
  BOOL v9;
  CFIndex v11;
  char *v12;
  const char *string;
  uint64_t v14;

  if (qword_100341520 != -1)
    dispatch_once(&qword_100341520, &stru_1002EAF98);
  v4 = 0;
  v5 = (_xpc_connection_s *)qword_100341528;
  v6 = 1;
  v7 = -3;
  do
  {
    if ((v6 & 1) == 0)
      xpc_release(v4);
    v8 = xpc_connection_send_message_with_reply_sync(v5, message);
    v6 = 0;
    v9 = v8 != &_xpc_error_connection_interrupted || v7++ == 0;
    v4 = &_xpc_error_connection_interrupted;
  }
  while (!v9);
  if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_error)
  {
    if (v8 == &_xpc_error_connection_invalid || v8 == &_xpc_error_connection_interrupted)
      v11 = 3;
    else
      v11 = 4;
    v12 = xpc_copy_description(v5);
    string = xpc_dictionary_get_string(v8, _xpc_error_key_description);
    sub_100032660(v11, CFSTR("com.apple.security.swcagent"), 0, a2, v14, CFSTR("%s: %s"), v12, string);
    free(v12);
    xpc_release(v8);
    return 0;
  }
  return v8;
}

void sub_1001C1DAC(id a1)
{
  _xpc_connection_s *mach_service;

  mach_service = xpc_connection_create_mach_service("com.apple.security.swcagent", 0, 0);
  xpc_connection_set_event_handler(mach_service, &stru_1002EAFD8);
  xpc_connection_resume(mach_service);
  qword_100341528 = (uint64_t)mach_service;
}

void sub_1001C1DF8(id a1, void *a2)
{
  const char *string;
  NSObject *v3;
  int v4;
  const char *v5;

  string = xpc_dictionary_get_string(a2, _xpc_error_key_description);
  v3 = sub_10000EF14("xpc");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315138;
    v5 = string;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "got event: %s", (uint8_t *)&v4, 0xCu);
  }
}

xpc_object_t sub_1001C1EAC(unsigned int a1, CFTypeRef *a2)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;

  v4 = xpc_dictionary_create(0, 0, 0);
  v6 = v4;
  if (v4)
    xpc_dictionary_set_uint64(v4, "operation", a1);
  else
    sub_100032660(3, CFSTR("com.apple.security.swcagent"), 0, a2, v5, CFSTR("xpc_dictionary_create returned NULL"));
  return v6;
}

uint64_t sub_1001C1F28(void *a1, __CFString **a2)
{
  xpc_object_t value;
  void *v5;
  uint64_t v6;
  size_t v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeID v10;
  int v11;
  const char *string;
  const __CFString *v13;
  int64_t int64;
  const UInt8 *data;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  CFTypeRef v18;
  int valuePtr;
  size_t v21;
  CFTypeRef cf;
  size_t length;

  valuePtr = -1;
  value = xpc_dictionary_get_value(a1, "error");
  v5 = value;
  if (a2 && value)
  {
    length = 0;
    if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_dictionary)
    {
      sub_100032660(1, CFSTR("com.apple.security.xpc"), 0, (CFTypeRef *)&length, v6, CFSTR("Remote error not dictionary!: %@"), v5);
      v7 = length;
LABEL_21:
      *a2 = (__CFString *)v7;
      return valuePtr;
    }
    string = xpc_dictionary_get_string(v5, "domain");
    if (string)
    {
      v13 = CFStringCreateWithCString(kCFAllocatorDefault, string, 0x8000100u);
    }
    else
    {
      v13 = CFSTR("com.apple.security.xpc");
      CFRetain(CFSTR("com.apple.security.xpc"));
    }
    int64 = xpc_dictionary_get_int64(v5, "code");
    v21 = 0;
    cf = 0;
    data = (const UInt8 *)xpc_dictionary_get_data(v5, "userinfo", &v21);
    if (data)
    {
      v16 = (unsigned __int8 *)&data[v21];
      v17 = sub_100020974(kCFAllocatorDefault, (CFBooleanRef *)&cf, 0, data, (uint64_t)&data[v21]);
      v18 = cf;
      if (v17 == v16)
      {
        v7 = (size_t)CFErrorCreate(0, v13, int64, (CFDictionaryRef)cf);
        if (v18)
          CFRelease(v18);
        goto LABEL_19;
      }
      if (cf)
        CFRelease(cf);
    }
    v7 = (size_t)CFErrorCreate(0, v13, int64, 0);
LABEL_19:
    if (v13)
      CFRelease(v13);
    goto LABEL_21;
  }
  if (!value)
  {
    length = 0;
    if (xpc_dictionary_get_data(a1, "status", &length))
    {
      v8 = sub_10000FF08(a1, "status", a2);
      if (v8)
      {
        v9 = v8;
        v10 = CFGetTypeID(v8);
        if (v10 == CFBooleanGetTypeID())
        {
          v11 = CFEqual(v9, kCFBooleanTrue) != 0;
        }
        else
        {
          if (v10 != CFNumberGetTypeID() || CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt32Type, &valuePtr))
            goto LABEL_27;
          v11 = -1;
        }
        valuePtr = v11;
LABEL_27:
        CFRelease(v9);
      }
    }
  }
  return valuePtr;
}

BOOL sub_1001C2174(unsigned int a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4, uint64_t a5)
{
  xpc_object_t v9;
  void *v10;
  _BOOL8 v11;
  xpc_object_t v12;
  void *v13;
  uint64_t v14;
  const void *Value;

  v9 = sub_1001C1EAC(a1, a4);
  if (!v9)
    return 0;
  v10 = v9;
  xpc_dictionary_set_data(v9, "client", a2, 0x20uLL);
  v11 = 0;
  if (sub_100010098(v10, "query", (const __CFString *)a3, 0, (__CFString **)a4))
  {
    v12 = sub_1001C1C74(v10, a4);
    if (v12)
    {
      v13 = v12;
      v14 = sub_1001C1F28(v12, (__CFString **)a4);
      v11 = v14 == 1;
      if (a5 && !v14)
      {
        Value = CFDictionaryGetValue(a3, CFSTR("srvr"));
        (*(void (**)(uint64_t, const void *))(a5 + 16))(a5, Value);
      }
      xpc_release(v13);
    }
    else
    {
      v11 = 0;
    }
  }
  xpc_release(v10);
  return v11;
}

void sub_1001C24E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001C25DC(uint64_t a1)
{
  id WeakRetained;
  const void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = sub_10000EF14("octagon-ckks");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "error"));
    v5 = (void *)v4;
    v6 = CFSTR("no error");
    if (v4)
      v6 = (const __CFString *)v4;
    v7 = 138412290;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finishing a ckks-local-reset operation with %@", (uint8_t *)&v7, 0xCu);

  }
}

void sub_1001C26BC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  const void *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  int v12;
  const __CFString *v13;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = sub_10000EF14("octagon-ckks");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "error"));
    v8 = (void *)v7;
    v9 = CFSTR("no error");
    if (v7)
      v9 = (const __CFString *)v7;
    v12 = 138412290;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Finished ckks-local-reset with %@", (uint8_t *)&v12, 0xCu);

  }
  if (v3)
  {
    objc_msgSend(WeakRetained, "setError:", v3);
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "intendedState"));
    objc_msgSend(WeakRetained, "setNextState:", v10);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishedOp"));
  objc_msgSend(WeakRetained, "runBeforeGroupFinished:", v11);

}

void sub_1001C3730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001C395C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  const void *v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  const void *v14;
  NSObject *v15;
  _BOOL4 v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  void *v20;
  void *v21;
  id v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSAnalytics logger](CKKSAnalytics, "logger"));
  objc_msgSend(v5, "logResultForEvent:hardFailure:result:", CFSTR("OctagonEventReset"), 1, v3);

  v6 = sub_10000EF14("octagon");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (v8)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully reset Octagon", buf, 2u);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deps"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stateHolder"));
    v22 = 0;
    objc_msgSend(v12, "persistAccountChanges:error:", &stru_1002EB028, &v22);
    v13 = v22;

    v14 = sub_10000EF14("octagon");
    v15 = objc_claimAutoreleasedReturnValue(v14);
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      if (v16)
      {
        *(_DWORD *)buf = 138412290;
        v24 = v13;
        v17 = "Error resetting local account metadata state: %@";
        v18 = v15;
        v19 = 12;
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
      }
    }
    else if (v16)
    {
      *(_WORD *)buf = 0;
      v17 = "Successfully reset local account metadata state";
      v18 = v15;
      v19 = 2;
      goto LABEL_12;
    }

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "intendedState"));
    objc_msgSend(WeakRetained, "setNextState:", v20);

    goto LABEL_14;
  }
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "containerName"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contextID"));
    *(_DWORD *)buf = 138412802;
    v24 = v9;
    v25 = 2112;
    v26 = v10;
    v27 = 2112;
    v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unable to reset for (%@,%@): %@", buf, 0x20u);

  }
  objc_msgSend(WeakRetained, "setError:", v3);
LABEL_14:
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "finishedOp"));
  objc_msgSend(WeakRetained, "runBeforeGroupFinished:", v21);

}

OTAccountMetadataClassC *__cdecl sub_1001C3BEC(id a1, OTAccountMetadataClassC *a2)
{
  OTAccountMetadataClassC *v2;

  v2 = a2;
  -[OTAccountMetadataClassC setTrustState:](v2, "setTrustState:", 0);
  -[OTAccountMetadataClassC setPeerID:](v2, "setPeerID:", 0);
  -[OTAccountMetadataClassC setSyncingPolicy:](v2, "setSyncingPolicy:", 0);
  -[OTAccountMetadataClassC setVoucher:](v2, "setVoucher:", 0);
  -[OTAccountMetadataClassC setVoucherSignature:](v2, "setVoucherSignature:", 0);
  -[OTAccountMetadataClassC setTlkSharesForVouchedIdentitys:](v2, "setTlkSharesForVouchedIdentitys:", 0);
  -[OTAccountMetadataClassC setIsInheritedAccount:](v2, "setIsInheritedAccount:", 0);
  -[OTAccountMetadataClassC setWarmedEscrowCache:](v2, "setWarmedEscrowCache:", 0);
  -[OTAccountMetadataClassC setWarnedTooManyPeers:](v2, "setWarnedTooManyPeers:", 0);
  return v2;
}

void sub_1001C52D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001C53D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C56B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1001C6594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1001C69B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1001C71C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001C8628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C89F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1001C8C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1001C8EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1001C8FBC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1001C9094(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1001C96B0(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  uint64_t *v8;
  const __CFSet *v9;
  CFIndex Count;
  const __CFSet *v11;
  const void *v12;
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD context[6];
  _QWORD v16[5];
  _QWORD v17[8];
  _QWORD v18[3];
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2020000000;
  v19 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountConfiguration"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "storage"));

  objc_msgSend(v6, "setRingUpdateFlag:", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountConfiguration"));
  objc_msgSend(v7, "setStorage:", v6);

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1001C9948;
  v17[3] = &unk_1002EB610;
  v17[4] = WeakRetained;
  v17[5] = &v24;
  v17[6] = v18;
  v17[7] = &v20;
  objc_msgSend(WeakRetained, "performTransaction:", v17);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1001C9BB4;
  v16[3] = &unk_1002ED920;
  v16[4] = WeakRetained;
  objc_msgSend(WeakRetained, "performTransaction:", v16);
  v8 = v21;
  if (*((_BYTE *)v25 + 24))
  {
    v9 = (const __CFSet *)v21[3];
    if (v9)
    {
      Count = CFSetGetCount(v9);
      v8 = v21;
      if (Count)
      {
        v11 = (const __CFSet *)v21[3];
        context[0] = _NSConcreteStackBlock;
        context[1] = 3221225472;
        context[2] = sub_1001C9BC0;
        context[3] = &unk_1002EB660;
        context[4] = WeakRetained;
        context[5] = v18;
        CFSetApplyFunction(v11, (CFSetApplierFunction)sub_1001C9C54, context);
        v8 = v21;
      }
    }
  }
  v12 = (const void *)v8[3];
  if (v12)
  {
    v8[3] = 0;
    CFRelease(v12);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001C9C68;
  v14[3] = &unk_1002ED920;
  v14[4] = WeakRetained;
  objc_msgSend(WeakRetained, "performTransaction:", v14);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001C9C74;
  v13[3] = &unk_1002ED920;
  v13[4] = WeakRetained;
  objc_msgSend(WeakRetained, "performTransaction:", v13);
  if (objc_msgSend(WeakRetained, "forceSyncForRecoveryRing"))
  {
    objc_msgSend(WeakRetained, "performTransaction:", &stru_1002EB680);
    objc_msgSend(WeakRetained, "setForceSyncForRecoveryRing:", 0);
  }
  objc_msgSend(v3, "setNextState:", CFSTR("ready"));

  _Block_object_dispose(v18, 8);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);

}

void sub_1001C9914(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001C9948(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  const void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const __CFDictionary *v18;
  uint64_t v19;
  int v20;
  const void *v21;
  NSObject *v22;
  CFTypeRef v23;
  const __CFSet *PermittedViews;
  CFTypeRef cf;
  uint64_t v26;
  uint8_t buf[4];
  CFTypeRef v28;

  if (!objc_msgSend(*(id *)(a1 + 32), "accountKeyIsTrusted")
    || !objc_msgSend(*(id *)(a1 + 32), "isInCircle:", 0))
  {
    return;
  }
  objc_msgSend(*(id *)(a1 + 32), "_onQueueRecordRetiredPeersInCircle");
  sub_1001EA20C(*(void **)(a1 + 32));
  v26 = 0;
  v2 = *(id *)(a1 + 32);
  if (!objc_msgSend(v2, "isInCircle:", 0)
    || (v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "backup_key"))) == 0)
  {
    LOBYTE(v6) = 0;
    goto LABEL_10;
  }
  v4 = (void *)v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "backup_key"));
  v6 = SOSBSKBIsGoodBackupPublic(v5, &v26);

  if (!v6)
    goto LABEL_10;
  v7 = (const void *)SOSPeerInfoCopyBackupKey(objc_msgSend(v2, "peerInfo"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "backup_key"));
  v9 = v8;
  if (v7 && v8)
  {
    LOBYTE(v6) = CFEqual(v7, v8) != 0;

  }
  else
  {
    LOBYTE(v6) = v7 == v8;

    if (!v7)
      goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v6;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    cf = 0;
    v18 = sub_1001D2200(v10, v11, v12, v13, v14, v15, v16, v17);
    v19 = SecItemDelete(v18);
    if (v18)
      CFRelease(v18);
    if ((_DWORD)v19 == -25300)
      v20 = 0;
    else
      v20 = v19;
    if (sub_100019F20(v20, (__CFString **)&cf, CFSTR("Deleting V0 Keybag failed - %d"), v19))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
    else
    {
      v21 = sub_10000EF14("SecError");
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v28 = cf;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Failed to delete v0 keybag: %@", buf, 0xCu);
      }

    }
    v23 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v23);
    }
    if (objc_msgSend(*(id *)(a1 + 32), "peerInfo"))
    {
      PermittedViews = (const __CFSet *)SOSPeerInfoGetPermittedViews(objc_msgSend(*(id *)(a1 + 32), "peerInfo"));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = CFSetCreateMutableCopy(kCFAllocatorDefault, 0, PermittedViews);
    }
  }
}

id sub_1001C9BB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setConsolidateKeyInterest:", 1);
}

id sub_1001C9BC0(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;
  CFTypeID v4;
  _QWORD v6[7];

  if (!cf || (v3 = cf, v4 = CFGetTypeID(cf), v4 != CFStringGetTypeID()))
    v3 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001C9F98;
  v6[3] = &unk_1002EB638;
  v6[6] = v3;
  return objc_msgSend(*(id *)(a1 + 32), "performTransaction:", v6);
}

uint64_t sub_1001C9C54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

id sub_1001C9C68(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setConsolidateKeyInterest:", 0);
}

void sub_1001C9C74(uint64_t a1, void *a2)
{
  id v3;
  const void *v4;
  NSObject *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  NSObject *v14;
  const void *v15;
  CFTypeRef v16;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v19;

  v3 = a2;
  cf = 0;
  v4 = sub_10000EF14("rings");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Flushing Rings to KVS", buf, 2u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "circle_transport"));
  v7 = objc_msgSend(v6, "flushChanges:", &cf);

  if ((v7 & 1) == 0)
  {
    v15 = sub_10000EF14("circleOps");
    v14 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v19 = cf;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "flush circles/rings failed %@", buf, 0xCu);
    }
    goto LABEL_10;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  objc_msgSend(v8, "setNeed_backup_peers_created_after_backup_key_set:", 1);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v10 = objc_msgSend(v9, "getPublicKeyStatusForKey:error:", 2, 0);

  if (v10 >= 1)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    objc_msgSend(v11, "setPublicKeyStatus:forKey:", 3, 2);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v13 = objc_msgSend(v12, "getPublicKeyStatusForKey:error:", 1, 0);

  if (v13 >= 1)
  {
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    -[NSObject setPublicKeyStatus:forKey:](v14, "setPublicKeyStatus:forKey:", 3, 1);
LABEL_10:

  }
  v16 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v16);
  }
  sub_1001DD750(*(void **)(a1 + 32));

}

void sub_1001C9E74(id a1, SOSAccountTransaction *a2)
{
  CFMutableSetRef v2;
  const void *v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;

  v7 = 0;
  v2 = sub_1001D5B58(a2, (uint64_t)&v7);
  if (v7)
  {
    v3 = sub_10000EF14("SecError");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sos-register-recovery-public-key: Couldn't process sync with backup peers: %@", buf, 0xCu);
    }

  }
  else
  {
    v5 = sub_10000EF14("sos-register-recovery-public-key");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "telling CloudServices about recovery key change", buf, 2u);
    }

    notify_post("com.apple.security.itembackup");
  }

}

id sub_1001C9F98(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_onQueueEnsureInBackupRings:", *(_QWORD *)(a1 + 48));
  if ((_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

void sub_1001C9FD4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  const void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  __int128 v14;
  void (*v15)(uint64_t);
  void *v16;
  void *v17;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountConfiguration"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "storage"));

  v7 = sub_10000EF14("sos-sm");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "pendingBackupPeers"));
    LODWORD(v14) = 138412290;
    *(_QWORD *)((char *)&v14 + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "performing backup for %@", (uint8_t *)&v14, 0xCu);

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "pendingBackupPeers"));
  v11 = objc_msgSend(v10, "count");

  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "pendingBackupPeers"));
    *(_QWORD *)&v14 = _NSConcreteStackBlock;
    *((_QWORD *)&v14 + 1) = 3221225472;
    v15 = sub_10020D4FC;
    v16 = &unk_1002ED1A0;
    v17 = v12;
    _os_activity_initiate((void *)&_mh_execute_header, "CloudCircle SOSCCRequestSyncWithBackupPeerList", OS_ACTIVITY_FLAG_DEFAULT, &v14);

    objc_msgSend(v6, "clearPendingBackupPeers");
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountConfiguration"));
  objc_msgSend(v13, "setStorage:", v6);

  objc_msgSend(v3, "setNextState:", CFSTR("ready"));
}

void sub_1001CA190(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  const void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountConfiguration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "storage"));

  objc_msgSend(v3, "setRingUpdateFlag:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountConfiguration"));
  objc_msgSend(v4, "setStorage:", v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "performRingUpdates"));
  objc_msgSend(v5, "trigger");

  v6 = sub_10000EF14("sos-sm");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "performRingUpdates"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nextFireTime"));
    v10 = 138412290;
    v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "trigger ring update at %@", (uint8_t *)&v10, 0xCu);

  }
}

void sub_1001CA2D8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  const void *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  void *v20;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountConfiguration"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "storage"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pendingBackupPeers"));
  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pendingBackupPeers"));
    objc_msgSend(v6, "addObjectsFromArray:", v7);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v9 = objc_msgSend(v8, "mutableCopy");
  objc_msgSend(v4, "setPendingBackupPeers:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountConfiguration"));
  objc_msgSend(v10, "setStorage:", v4);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "performBackups"));
  objc_msgSend(v11, "trigger");

  v12 = sub_10000EF14("sos-sm");
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(a1 + 40);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "performBackups"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "nextFireTime"));
    v17 = 138412546;
    v18 = v14;
    v19 = 2112;
    v20 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "trigger backup for peers: %@ at %@", (uint8_t *)&v17, 0x16u);

  }
}

void sub_1001CA490(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "addBackupFlag");

}

void sub_1001CA4BC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "addRingUpdateFlag");

}

void sub_1001CA4E8(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  v4[0] = CFSTR("trigger_backup");
  v4[1] = CFSTR("trigger_ring_update");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 2));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1));
  v3 = (void *)qword_100341550;
  qword_100341550 = v2;

}

void sub_1001CA590(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("ready");
  v3[1] = CFSTR("error");
  v4[0] = &off_10030B060;
  v4[1] = &off_10030B078;
  v3[2] = CFSTR("perform_backup");
  v3[3] = CFSTR("perform_ring_update");
  v4[2] = &off_10030B090;
  v4[3] = &off_10030B0A8;
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4));
  v2 = (void *)qword_100341540;
  qword_100341540 = v1;

}

uint64_t sub_1001CA650(uint64_t a1, uint64_t a2)
{
  const __CFSet *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[8];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v4 = (const __CFSet *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retirees"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001CA724;
  v8[3] = &unk_1002EB428;
  v5 = *(_QWORD *)(a1 + 48);
  v8[4] = *(_QWORD *)(a1 + 40);
  v8[5] = &v9;
  v8[6] = v5;
  v8[7] = a2;
  CFSetApplyFunction(v4, (CFSetApplierFunction)sub_1001C9C54, v8);

  v6 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1001CA70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001CA724(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  NSObject *v6;
  const void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  const void *v12;
  NSObject *v13;
  CFTypeRef cfa;
  uint8_t buf[4];
  CFTypeRef v16;
  __int16 v17;
  CFTypeRef v18;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == SOSPeerInfoGetTypeID())
    {
      if (SOSCircleUpdatePeerInfo(*(_QWORD *)(a1 + 56), cf))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        v5 = sub_10000EF14("retirement");
        v6 = objc_claimAutoreleasedReturnValue(v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          v7 = *(const void **)(a1 + 56);
          *(_DWORD *)buf = 138412546;
          v16 = cf;
          v17 = 2112;
          v18 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Updated retired peer %@ in %@", buf, 0x16u);
        }

        cfa = 0;
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trust"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "kvs_message_transport"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "circle_transport"));
        v11 = objc_msgSend(v8, "cleanupAfterPeer:circleTransport:seconds:circle:cleanupPeer:err:", v9, v10, 86400, *(_QWORD *)(a1 + 56), cf, &cfa);

        if ((v11 & 1) == 0)
        {
          v12 = sub_10000EF14("SecError");
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            v16 = cf;
            v17 = 2112;
            v18 = cfa;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Error cleanup up after peer (%@): %@", buf, 0x16u);
          }

        }
        if (cfa)
          CFRelease(cfa);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      }
    }
  }
}

id sub_1001CA91C(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "trust"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expansion"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expansion"));
    v6 = objc_msgSend(v5, "objectForKey:", a2);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

_QWORD *sub_1001CA990(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  _QWORD *v4;
  const void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  __int16 v12;
  const char *v13;

  v4 = sub_1001D2A54(*(void **)(a1 + 32), *(const void **)(a1 + 40), a3);
  v5 = sub_10000EF14("backup");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "success";
    v8 = *(_QWORD *)(a1 + 40);
    if (!v4)
      v7 = "failed";
    v10 = 138412546;
    v11 = v8;
    v12 = 2080;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reset backup ring %@ %s", (uint8_t *)&v10, 0x16u);
  }

  return v4;
}

void sub_1001CAA7C(uint64_t a1, void *a2)
{
  id v3;
  const __CFArray *v4;
  const __CFArray *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  cf = 0;
  v4 = sub_1001D974C(v3, (uint64_t)&cf, &stru_1002EBB18);
  v5 = v4;
  v6 = cf;
  if (cf)
    cf = 0;
  if (v4)
  {
    if (CFArrayGetCount(v4))
    {
      sub_1001CF31C(v3, v5, (uint64_t)&cf);
      v7 = cf;
      if (cf)
      {
        cf = 0;
        if (!v6 || (CFRelease(v6), (v8 = cf) == 0))
        {
          v6 = v7;
          goto LABEL_14;
        }
        cf = 0;
        v6 = v7;
        goto LABEL_12;
      }
    }
    else
    {
      v8 = cf;
      if (cf)
      {
        cf = 0;
LABEL_12:
        CFRelease(v8);
      }
    }
LABEL_14:
    CFRelease(v5);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v6)
    CFRelease(v6);
}

void sub_1001CAB94(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  __int128 v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001CAC0C;
  v3[3] = &unk_1002EB2F8;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(_OWORD *)(a1 + 48);
  objc_msgSend(v2, "performTransaction:", v3);

}

void sub_1001CAC0C(uint64_t a1, void *a2)
{
  const __CFSet *v3;
  const __CFSet *v4;
  const __CFSet *v5;
  id Count;
  id v7;

  v7 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v3 = (const __CFSet *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", *(_QWORD *)(a1 + 32)));
    v4 = sub_1001D57C8(v7, v3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (v4)
    {
      v5 = v4;
      Count = (id)CFSetGetCount(v4);
      if (Count == -[__CFSet count](v3, "count"))
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      CFRelease(v5);
    }

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = sub_1001D5C2C(v7, *(_QWORD *)(*(_QWORD *)(a1 + 40)+ 8)+ 24);
  }

}

void sub_1001CACE0()
{
  void (*v0)(void);
  void *v1;
  void *v2;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void (*)(void))off_100341530;
  v7 = off_100341530;
  if (!off_100341530)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1001CADFC;
    v3[3] = &unk_1002EBE60;
    v3[4] = &v4;
    sub_1001CADFC(v3);
    v0 = (void (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
  {
    v0();
  }
  else
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL soft_MetricsOverrideTestsAreEnabled(void)"));
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("SOSAccount.m"), 94, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1001CADE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1001CADFC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *result;
  void *v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  if (!qword_100341538)
  {
    v6 = off_1002EB6A0;
    v7 = 0;
    qword_100341538 = _sl_dlopen(&v6, &v5);
  }
  v2 = (void *)qword_100341538;
  if (!qword_100341538)
  {
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *KeychainCircleLibrary(void)"));
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("SOSAccount.m"), 91, CFSTR("%s"), v5);

    __break(1u);
    goto LABEL_7;
  }
  v3 = v5;
  if (v5)
LABEL_7:
    free(v3);
  result = dlsym(v2, "MetricsOverrideTestsAreEnabled");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  off_100341530 = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void sub_1001CAF30(uint64_t a1, void *a2)
{
  id v3;
  AAFAnalyticsEventSecurity *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  AAFAnalyticsEventSecurity *v11;

  v3 = a2;
  v4 = [AAFAnalyticsEventSecurity alloc];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  sub_1001CACE0();
  LOBYTE(v10) = *(_BYTE *)(a1 + 84);
  v11 = -[AAFAnalyticsEventSecurity initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:](v4, "initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:", 0, v5, v6, v7, CFSTR("com.apple.security.initiatorJoinSOS"), v8, v10, &off_10030AF70);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = sub_1001CB034(v9, *(const void **)(a1 + 56), *(unsigned int *)(a1 + 80), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)+ 24));
  +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", v11, *(_QWORD *)(a1 + 56) != 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24));

}

id sub_1001CB034(void *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  void *v8;
  const void *v9;
  NSObject *v10;
  CFTypeID v11;
  id v12;
  int v13;
  const void *v14;
  NSObject *v15;
  _BOOL4 v16;
  const void *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  void *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  _QWORD v31[4];
  NSObject *v32;
  id v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  _QWORD *v37;
  unsigned __int8 v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v43;

  v7 = a1;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trust"));
  v40 = 0;
  cf = 0;
  v39 = 0;
  v38 = 0;
  v9 = sub_10000EF14("circleOps");
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Joining circles through piggyback (SOSAccountCopyCircleJoiningBlob)", buf, 2u);
  }

  if (!a2 || (v11 = CFGetTypeID(a2), v11 != CFDataGetTypeID()))
  {
    v17 = sub_10000EF14("circleOps");
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v19 = "Bad data blob: piggyback (SOSAccountCopyCircleJoiningBlob)";
      v20 = v18;
      v21 = 2;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  v12 = sub_1001D6CD8(v7, (uint64_t)a4);
  if (!v12)
  {
    v22 = sub_10000EF14("circleOps");
    v18 = objc_claimAutoreleasedReturnValue(v22);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    v23 = *a4;
    *(_DWORD *)buf = 138412290;
    v43 = v23;
    v19 = "Failed - no private credential %@: piggyback (SOSAccountCopyCircleJoiningBlob)";
    goto LABEL_17;
  }
  if ((SOSPiggyBackBlobCreateFromData(&cf, &v39, &v40, a2, a3, &v38, a4) & 1) == 0)
  {
    v24 = sub_10000EF14("circleOps");
    v18 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *a4;
      *(_DWORD *)buf = 138412290;
      v43 = v25;
      v19 = "Failed - decoding blob %@: piggyback (SOSAccountCopyCircleJoiningBlob)";
LABEL_17:
      v20 = v18;
      v21 = 12;
      goto LABEL_18;
    }
LABEL_19:
    v12 = 0;
    goto LABEL_20;
  }
  v13 = v38;
  v14 = sub_10000EF14("circleOps");
  v15 = objc_claimAutoreleasedReturnValue(v14);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v16)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "setting flag in account for piggyback v0", buf, 2u);
    }

    sub_1001E6A88(v7, (uint64_t)CFSTR("initialsynctimeout"), (uint64_t)kCFBooleanTrue, 0);
  }
  else
  {
    if (v16)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "clearing flag in account for piggyback v0", buf, 2u);
    }

    sub_1001E6948(v7, (uint64_t)CFSTR("initialsynctimeout"), 0);
  }
  sub_1001DED04(v7);
  sub_1001CB3E8((uint64_t)CFSTR("Joining"), v7, (uint64_t)cf, (uint64_t)v39, (uint64_t)v40, a3);
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "circle_transport"));
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_1001CB5E0;
  v31[3] = &unk_1002EB4E0;
  v33 = v12;
  v34 = cf;
  v35 = v39;
  v36 = v40;
  v32 = v8;
  v37 = a4;
  v12 = -[NSObject modifyCircle:err:action:](v32, "modifyCircle:err:action:", v27, a4, v31);

  v28 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v28);
  }
  v29 = v39;
  if (v39)
  {
    v39 = 0;
    CFRelease(v29);
  }
  v30 = v40;
  if (v40)
  {
    v40 = 0;
    CFRelease(v30);
  }
  v18 = v32;
LABEL_20:

  return v12;
}

void sub_1001CB3E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  CFStringRef Copy;
  CFStringRef v13;
  const __CFString *v14;
  void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  NSObject *v19;
  const __CFString *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  const __CFString *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  const void *v28;
  __int16 v29;
  CFStringRef v30;
  __int16 v31;
  CFStringRef v32;
  __int16 v33;
  const void *v34;

  v11 = a2;
  Copy = (CFStringRef)SOSCopyIDOfKey(a4, 0);
  if (!Copy)
    Copy = CFStringCreateCopy(kCFAllocatorDefault, CFSTR("Unknown"));
  v13 = (CFStringRef)SOSCopyIDOfDataBuffer(a5, 0);
  if (!v13)
    v13 = CFStringCreateCopy(kCFAllocatorDefault, CFSTR("No Signature"));
  v14 = (const __CFString *)sub_1001CA91C(v11, (uint64_t)CFSTR("AccountName"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "trust"));

  v16 = (const void *)SOSCircleCopyHashString(objc_msgSend(v15, "trustedCircle"));
  v17 = (const void *)SOSGenerationCountCopyDescription(a3);
  v18 = sub_10000EF14("circleOps");
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = CFSTR("Unavailable");
    v21 = 138413826;
    if (v14)
      v20 = v14;
    v22 = a1;
    v23 = 2112;
    v24 = v20;
    v25 = 1024;
    v26 = a6;
    v27 = 2112;
    v28 = v17;
    v29 = 2112;
    v30 = Copy;
    v31 = 2112;
    v32 = v13;
    v33 = 2112;
    v34 = v16;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%@: Joining blob for account: %@ for piggyback (V%d) gencount: %@  pubkey: %@ signatureID: %@  starting circle hash: %@", (uint8_t *)&v21, 0x44u);
  }

  if (Copy)
    CFRelease(Copy);
  if (v13)
    CFRelease(v13);
  if (v16)
    CFRelease(v16);
  if (v17)
    CFRelease(v17);
}

uint64_t sub_1001CB5E0(uint64_t a1, uint64_t a2)
{
  return SOSCircleAcceptPeerFromHSA2(a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), objc_msgSend(*(id *)(a1 + 32), "fullPeerInfo"), *(_QWORD *)(a1 + 72));
}

uint64_t sub_1001CB63C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001CB64C(uint64_t a1)
{

}

void sub_1001CB654(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001CB704;
  v3[3] = &unk_1002EB280;
  v7 = *(_QWORD *)(a1 + 64);
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 88);
  v8 = *(_OWORD *)(a1 + 72);
  objc_msgSend(v2, "performTransaction:", v3);

}

void sub_1001CB704(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v3 = sub_1001CB76C(v6, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(_BYTE *)(a1 + 80), *(_QWORD *)(a1 + 72), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

uint64_t sub_1001CB76C(void *a1, void *a2, void *a3, void *a4, char a5, uint64_t a6, uint64_t *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  const void *v17;
  NSObject *v18;
  id v19;
  id v20;
  const void *v21;
  NSObject *v22;
  uint64_t v23;
  AAFAnalyticsEventSecurity *v24;
  uint64_t v25;
  id v27;
  id v28;
  AAFAnalyticsEventSecurity *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  const void *v36;
  uint64_t Generation;
  const void *v38;
  const void *GenSignatureWithPeerAdded;
  uint64_t v40;
  const void *v41;
  NSObject *v42;
  id v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint8_t buf[4];
  uint64_t v51;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = sub_10000EF14("circleOps");
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Making circle joining piggyback blob as sponsor (SOSAccountCopyCircleJoiningBlob)", buf, 2u);
  }

  v19 = objc_msgSend(v13, "getCircleStatus:", a7);
  if (!(_DWORD)v19)
  {
    v27 = sub_1001D7408(v13, (uint64_t)a7);
    if (v27)
    {
      if (a6)
      {
        v28 = v27;
        v29 = [AAFAnalyticsEventSecurity alloc];
        sub_1001CACE0();
        LOBYTE(v47) = a5;
        v24 = -[AAFAnalyticsEventSecurity initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:](v29, "initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:", 0, v14, v15, v16, CFSTR("com.apple.security.verifySOSApplication"), v30, v47, &off_10030AF70);
        if ((SOSPeerInfoApplicationVerify(a6, v28, a7) & 1) == 0)
        {
          v49 = v14;
          v41 = sub_10000EF14("circleOps");
          v42 = objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Peer application wasn't signed with the correct userKey", buf, 2u);
          }

          v32 = 0;
          GenSignatureWithPeerAdded = 0;
          v38 = 0;
          v36 = 0;
          v25 = 0;
          if (!a7)
            goto LABEL_27;
          goto LABEL_18;
        }
        +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", v24, 1, 0);
        v31 = SOSFullPeerInfoCopyDeviceKey(objc_msgSend(v13, "fullPeerInfo"), a7);
        if (v31)
        {
          v32 = (const void *)v31;
          v49 = v14;
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "trust"));
          v34 = objc_msgSend(v33, "getCircle:", a7);

          if (!v34 || (v35 = SOSCircleCopyCircle(0, v34, a7)) == 0)
          {
            v25 = 0;
            v14 = v49;
            goto LABEL_34;
          }
          v36 = (const void *)v35;
          if (!SOSCirclePreGenerationSign(v35, v28, a7))
          {
            v25 = 0;
            v38 = 0;
            GenSignatureWithPeerAdded = 0;
            goto LABEL_28;
          }
          Generation = SOSCircleGetGeneration(v36);
          v38 = (const void *)SOSGenerationIncrementAndCreate(Generation);
          GenSignatureWithPeerAdded = (const void *)SOSCircleCopyNextGenSignatureWithPeerAdded(v36, a6, v32, a7);
          if (!GenSignatureWithPeerAdded)
          {
            v25 = 0;
            goto LABEL_28;
          }
          sub_1001CB3E8((uint64_t)CFSTR("Accepting"), v13, (uint64_t)v38, (uint64_t)v32, (uint64_t)GenSignatureWithPeerAdded, 1);
          v25 = SOSPiggyBackBlobCopyEncodedData(v38, v32, GenSignatureWithPeerAdded, a7);
          if (!a7)
          {
LABEL_27:
            v48 = v16;
            v43 = v15;
            v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", kSOSErrorDomain, 12, CFSTR("Peer application wasn't signed with the correct userKey")));
            +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", v24, 0, v44);

            v15 = v43;
            v16 = v48;
            if (!v36)
              goto LABEL_29;
            goto LABEL_28;
          }
LABEL_18:
          if (*a7)
          {
            +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", v24, 0);
            if (!v36)
            {
LABEL_29:
              if (v38)
                CFRelease(v38);
              v14 = v49;
              if (GenSignatureWithPeerAdded)
                CFRelease(GenSignatureWithPeerAdded);
              if (!v32)
              {
LABEL_35:
                if (!a7)
                  goto LABEL_8;
LABEL_43:
                if (v25)
                  goto LABEL_8;
                v45 = sub_10000EF14("circleOps");
                v22 = objc_claimAutoreleasedReturnValue(v45);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  v46 = *a7;
                  *(_DWORD *)buf = 138412290;
                  v51 = v46;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Failed to make circle joining piggyback blob as sponsor %@", buf, 0xCu);
                }
                goto LABEL_7;
              }
LABEL_34:
              CFRelease(v32);
              goto LABEL_35;
            }
LABEL_28:
            CFRelease(v36);
            goto LABEL_29;
          }
          goto LABEL_27;
        }
LABEL_42:
        v25 = 0;
        if (!a7)
          goto LABEL_8;
        goto LABEL_43;
      }
      if (a7)
        v40 = *a7;
      else
        v40 = 0;
      SOSCreateError(1028, CFSTR("No applicant provided"), v40, a7);
    }
    v24 = 0;
    goto LABEL_42;
  }
  v20 = v19;
  v21 = sub_10000EF14("circleOps");
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = SOSCCGetStatusDescription(v20);
    *(_DWORD *)buf = 138412290;
    v51 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Invalid circle status: %@ to accept piggyback as sponsor (SOSAccountCopyCircleJoiningBlob)", buf, 0xCu);
  }
  v24 = 0;
LABEL_7:

  v25 = 0;
LABEL_8:

  return v25;
}

CFStringRef sub_1001CBC24(void *a1)
{
  id v1;
  id v2;
  unsigned int v3;
  id v4;
  unsigned int v5;
  CFStringRef Copy;
  const __CFAllocator *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  CFStringRef v17;
  int v19;

  v1 = a1;
  v2 = objc_msgSend(v1, "accountKey");
  v3 = objc_msgSend(v1, "accountKeyIsTrusted");
  v4 = objc_msgSend(v1, "accountPrivateKey");
  v19 = SOSVisibleKeychainNotAllowed();
  v5 = objc_msgSend(v1, "getCircleStatus:", 0);
  if (objc_msgSend(v1, "accountKey"))
  {
    Copy = (CFStringRef)SOSCopyIDOfKeyWithLength(objc_msgSend(v1, "accountKey"), 8, 0);
    v7 = kCFAllocatorDefault;
  }
  else
  {
    v7 = kCFAllocatorDefault;
    Copy = CFStringCreateCopy(kCFAllocatorDefault, CFSTR("*No Key*"));
  }
  if (v2)
    v8 = 85;
  else
    v8 = 117;
  if (v3)
    v9 = 84;
  else
    v9 = 116;
  if (v4)
    v10 = 73;
  else
    v10 = 105;
  if (v5 + 1 > 4)
    v11 = CFSTR("kSOSCCError");
  else
    v11 = off_1002EB7C0[v5 + 1];
  v12 = getuid();
  v13 = geteuid();
  v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "SOSMonitorModeSOSIsActiveDescription"));
  v15 = (void *)v14;
  v16 = "Unrestricted User Visible Views";
  if (v19)
    v16 = "User Visible Keychain Disallowed by Profile";
  v17 = CFStringCreateWithFormat(v7, 0, CFSTR("ACCOUNT: [keyStatus: %c%c%c hpub %@] [SOSCCStatus: %@] [UID: %d  EUID: %d] %@ %s"), v8, v9, v10, Copy, v11, v12, v13, v14, v16);

  if (Copy)
    CFRelease(Copy);

  return v17;
}

void sub_1001CBDCC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)SOSCirclePeerInfoCopyStateString(*(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 40), "accountKey"), *(_QWORD *)(a1 + 56), a2);
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1001CBE30(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)SOSCirclePeerInfoCopyStateString(*(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 40), "accountKey"), *(_QWORD *)(a1 + 56), a2);
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1001CBE94(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)SOSCirclePeerInfoCopyStateString(*(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 40), "accountKey"), *(_QWORD *)(a1 + 56), a2);
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1001CBEF8(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)SOSPeerInfoCopyStateString(a2, objc_msgSend(*(id *)(a1 + 40), "accountKey"), *(_QWORD *)(a1 + 48), 118);
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1001CBF58(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)SOSPeerInfoCopyStateString(a2, objc_msgSend(*(id *)(a1 + 40), "accountKey"), *(_QWORD *)(a1 + 48), 118);
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1001CBFB8(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  id v8;
  uint8_t buf[4];
  void *v10;

  v8 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", a2, 3, &v8));
  v4 = v8;
  if (!v3)
  {
    v5 = sub_10000EF14("iCloudIdentity");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedDescription"));
      *(_DWORD *)buf = 138412290;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error during iCloudIdentityStatus JSONification: %@", buf, 0xCu);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1001CC0D4(uint64_t a1, uint64_t a2)
{
  const __CFString *PeerID;
  __CFString *Copy;
  __CFString *v5;

  PeerID = (const __CFString *)SOSPeerInfoGetPeerID(a2);
  Copy = (__CFString *)CFStringCreateCopy(kCFAllocatorDefault, PeerID);
  if (Copy)
  {
    v5 = Copy;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", Copy);
    Copy = v5;
  }

}

void sub_1001CC134(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  CFTypeRef v6;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v9;

  cf = 0;
  v3 = SOSCopyIDOfKey(a2, &cf);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  }
  else
  {
    v5 = sub_10000EF14("iCloudIdentity");
    v4 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v9 = cf;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "couldn't make ID from key (%@)", buf, 0xCu);
    }
  }

  v6 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v6);
  }
}

void sub_1001CC21C(uint64_t a1, void *a2)
{
  id v3;
  SOSAuthKitHelpers *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  _QWORD v9[5];
  SOSAuthKitHelpers *v10;
  uint64_t v11;
  int v12;

  v3 = a2;
  v4 = -[SOSAuthKitHelpers initWithActiveMIDS:]([SOSAuthKitHelpers alloc], "initWithActiveMIDS:", v3);

  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001CC300;
    v9[3] = &unk_1002EB190;
    v9[4] = *(_QWORD *)(a1 + 32);
    v11 = v7;
    v10 = v4;
    v12 = *(_DWORD *)(a1 + 64);
    sub_100033998(0, v8, (uint64_t)v9);

  }
  (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), 0, v5, v6);

}

void sub_1001CC300(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001CC384;
  v5[3] = &unk_1002EB168;
  v8 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "performTransaction:", v5);

}

id sub_1001CC384(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  int v5;
  id v6;
  id v7;
  NSMutableDictionary *v8;
  void *v9;
  int v10;
  const void *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  void *v20;
  const void *v21;
  NSObject *v22;
  const __CFString *v23;
  CFTypeRef v24;
  uint64_t *v25;
  void *v26;
  char v27;
  void **v29;
  uint64_t v30;
  void *v31;
  void *v32;
  _BYTE *v33;
  id v34;
  NSMutableDictionary *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  CFTypeRef cf;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  _BYTE buf[24];
  uint64_t v55;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v4 = *(void **)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 56);
  v6 = v3;
  v7 = v4;
  v50 = 0;
  v51 = &v50;
  v52 = 0x2020000000;
  v53 = 0;
  v46 = 0;
  v47 = &v46;
  v48 = 0x2020000000;
  v49 = 0;
  v41 = 0;
  v42 = &v41;
  v43 = 0x2020000000;
  v44 = 9999;
  cf = 0;
  v8 = objc_opt_new(NSMutableDictionary);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trust"));
  v10 = SOSCircleCountPeers(objc_msgSend(v9, "trustedCircle"));

  if ((v5 & 0x10) != 0 && objc_msgSend(v6, "isInCircle:", 0))
  {
    v11 = sub_10000EF14("ghostBust");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Callout to cleanup icloud identities", (uint8_t *)&v29, 2u);
    }

    v13 = v6;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v55 = 0;
    v29 = _NSConcreteStackBlock;
    v30 = 3221225472;
    v31 = sub_1001F0980;
    v32 = &unk_1002EC770;
    v33 = buf;
    objc_msgSend(v13, "iCloudIdentityStatus_internal:", &v29);
    v14 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);

    v42[3] = v14;
    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v14));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v15, CFSTR("iCloudPrivKeysBusted"));

      v16 = (void *)objc_claimAutoreleasedReturnValue(+[SOSAnalytics logger](SOSAnalytics, "logger"));
      objc_msgSend(v16, "logSoftFailureForEventNamed:withAttributes:", CFSTR("GhostBust"), v8);

      *((_BYTE *)v51 + 24) = 1;
    }
    *((_BYTE *)v47 + 24) = 1;
  }
  if ((v5 & 0xFFFFFFEF) != 0 && objc_msgSend(v7, "isUseful"))
  {
    v17 = objc_msgSend(v6, "isInCircle:", 0);
    v18 = v10 > 1 ? v17 : 0;
    if (v18 == 1)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trust"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "circle_transport"));
      v29 = _NSConcreteStackBlock;
      v30 = 3221225472;
      v31 = sub_1001F0E28;
      v32 = &unk_1002EC6B0;
      v39 = v5;
      v36 = &v41;
      v33 = v6;
      v34 = v7;
      v35 = v8;
      v37 = &v46;
      v40 = v10;
      v38 = &v50;
      objc_msgSend(v19, "modifyCircle:err:action:", v20, &cf, &v29);

      v21 = sub_10000EF14("circleOps");
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v23 = CFSTR("Performed");
        if (!*((_BYTE *)v51 + 24))
          v23 = CFSTR("Not Performed");
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = cf;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Ghostbusting %@ (%@)", buf, 0x16u);
      }

      v24 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v24);
      }
    }
  }
  v25 = v51;
  if (*((_BYTE *)v47 + 24))
  {
    if (*((_BYTE *)v51 + 24))
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[SOSAnalytics logger](SOSAnalytics, "logger"));
      objc_msgSend(v26, "logSoftFailureForEventNamed:withAttributes:", CFSTR("GhostBust"), v8);
    }
    else if (v42[3])
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[SOSAnalytics logger](SOSAnalytics, "logger"));
      objc_msgSend(v26, "logHardFailureForEventNamed:withAttributes:", CFSTR("GhostBust"), 0);
    }
    else
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[SOSAnalytics logger](SOSAnalytics, "logger"));
      objc_msgSend(v26, "logSuccessForEventNamed:", CFSTR("GhostBust"));
    }

    v25 = v51;
  }
  v27 = *((_BYTE *)v25 + 24);

  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v50, 8);

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v27;
  return objc_msgSend(*(id *)(a1 + 40), "ghostBustFollowup");
}

void sub_1001CC830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

id sub_1001CC884(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001CC8DC;
  v3[3] = &unk_1002ED638;
  v1 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v1, "performTransaction:", v3);
}

void sub_1001CC8DC(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trust"));
  v4 = SOSCircleCopyHashString(objc_msgSend(v3, "trustedCircle"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1001CC940(uint64_t a1, void *a2)
{
  void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v4 = (const void *)sub_1001CC9D8(v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);

  if (v4)
  {
    v5 = SOSPeerInfoCopyEncodedData(v4, kCFAllocatorDefault, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    CFRelease(v4);
  }
}

uint64_t sub_1001CC9D8(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t Copy;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
  v5 = sub_1001D6CD8(v3, a2);
  if (v5
    && (v6 = v5, objc_msgSend(v4, "ensureFullPeerAvailable:err:", v3, a2))
    && SOSFullPeerInfoPromoteToApplication(objc_msgSend(v4, "fullPeerInfo"), v6, a2))
  {
    Copy = SOSPeerInfoCreateCopy(kCFAllocatorDefault, objc_msgSend(v4, "peerInfo"), a2);
  }
  else
  {
    Copy = 0;
  }

  return Copy;
}

uint64_t sub_1001CCA8C(uint64_t a1)
{
  void *v2;
  id v3;
  const void *v4;
  NSObject *v5;
  CFTypeRef v6;
  const void *v7;
  CFTypeRef cf;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  const void *v19;
  uint8_t buf[4];
  CFTypeRef v21;

  v19 = 0;
  if ((objc_msgSend(*(id *)(a1 + 32), "syncWaitAndFlush:flowID:deviceSessionID:canSendMetrics:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 80), &v19) & 1) != 0)
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = 0;
    sleep(1u);
    v2 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001CCC78;
    v10[3] = &unk_1002EB0F0;
    v11 = *(id *)(a1 + 64);
    v3 = *(id *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = v3;
    v14 = &v15;
    objc_msgSend(v2, "performTransaction:", v10);
    if (*((_BYTE *)v16 + 24))
    {
      cf = 0;
      if (!sub_1001CCFE8((uint64_t)&cf))
      {
        v4 = sub_10000EF14("pairing");
        v5 = objc_claimAutoreleasedReturnValue(v4);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v21 = cf;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "failed final flush: %@", buf, 0xCu);
        }

      }
      v6 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v6);
      }
    }

    _Block_object_dispose(&v15, 8);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    v7 = v19;
    if (v19)
    {
      v19 = 0;
      CFRelease(v7);
    }
  }
  return 1;
}

void sub_1001CCC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001CCC78(uint64_t a1)
{
  const __CFDictionary *v2;
  SecKeyRef v3;
  SecKeyRef v4;
  id v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;
  const char *v14;
  const void *v15;
  NSObject *v16;
  const void *v17;
  CFErrorRef v18;
  CFErrorRef error;
  uint8_t buf[4];
  CFErrorRef v21;
  _QWORD v22[2];
  _QWORD v23[2];

  error = 0;
  v22[0] = kSecAttrKeyClass;
  v22[1] = kSecAttrKeyType;
  v23[0] = kSecAttrKeyClassPrivate;
  v23[1] = kSecAttrKeyTypeEC;
  v2 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 2));
  v3 = SecKeyCreateWithData(*(CFDataRef *)(a1 + 32), v2, &error);
  if (!v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    v12 = sub_10000EF14("pairing");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_17;
    *(_DWORD *)buf = 138412290;
    v21 = error;
    v14 = "SecKeyCreateWithData failed: %@";
    goto LABEL_16;
  }
  v4 = v3;
  v5 = *(id *)(a1 + 40);
  if ((sub_1001D7474(v5, (uint64_t)v4, (CFTypeRef *)&error) & 1) != 0)
  {
    sub_1001D7730(v5, 0, (uint64_t)v4, (int)objc_msgSend(v5, "accountKeyIsTrusted"));
    sub_1001D6F60(v5);
    v6 = sub_10000EF14("circleop");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting account.key_interests_need_updating to true in SOSAccountTryUserPrivateKey", buf, 2u);
    }

    objc_msgSend(v5, "setKey_interests_need_updating:", 1);
    v8 = sub_10000EF14("circleOps");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Accepted provided user_private as credential", buf, 2u);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    v10 = sub_10000EF14("pairing");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "SOSAccountTryUserPrivateKey succeeded", buf, 2u);
    }

    CFRelease(v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_19;
  }
  v15 = sub_10000EF14("circleOps");
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Failed to accept provided user_private as credential", buf, 2u);
  }

  CFRelease(v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v17 = sub_10000EF14("pairing");
  v13 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v21 = error;
    v14 = "SOSAccountTryUserPrivateKey failed: %@";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 0xCu);
  }
LABEL_17:

  v18 = error;
  if (error)
  {
    error = 0;
    CFRelease(v18);
  }
LABEL_19:

}

BOOL sub_1001CCFE8(uint64_t a1)
{
  dispatch_semaphore_t v2;
  const void *v3;
  NSObject *v4;
  dispatch_queue_global_t global_queue;
  void *v6;
  NSObject *v7;
  const void *v8;
  NSObject *v9;
  const char *v10;
  _BOOL8 v11;
  _QWORD v13[4];
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint8_t buf[4];
  const char *v22;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v2 = dispatch_semaphore_create(0);
  v3 = sub_10000EF14("flush");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Starting", buf, 2u);
  }

  global_queue = dispatch_get_global_queue(-2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001CD1E4;
  v13[3] = &unk_1002ED5C0;
  v15 = &v17;
  v16 = a1;
  v7 = v2;
  v14 = v7;
  SOSCloudKeychainFlush(v6, v13);

  dispatch_semaphore_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
  v8 = sub_10000EF14("flush");
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)v18 + 24))
      v10 = "Success";
    else
      v10 = "Failure";
    *(_DWORD *)buf = 136315138;
    v22 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Returned %s", buf, 0xCu);
  }

  v11 = *((_BYTE *)v18 + 24) != 0;
  _Block_object_dispose(&v17, 8);
  return v11;
}

void sub_1001CD1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1001CD1E4(uint64_t a1, int a2, CFTypeRef cf)
{
  CFTypeRef *v4;
  CFTypeRef v6;

  v4 = *(CFTypeRef **)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = cf == 0;
  if (v4)
  {
    v6 = *v4;
    if (*v4 != cf)
    {
      if (!cf || (CFRetain(cf), (v6 = *v4) != 0))
        CFRelease(v6);
      *v4 = cf;
    }
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001CD250(uint64_t a1)
{
  AAFAnalyticsEventSecurity *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  AAFAnalyticsEventSecurity *v7;
  __SecKey *v8;
  __SecKey *v9;
  SecKeyRef v10;
  SecKeyRef v11;
  const void *v12;
  NSObject *v13;
  CFDataRef v14;
  CFErrorRef v15;
  void *v16;
  const void *v17;
  NSObject *v18;
  void *v19;
  CFErrorRef v20;
  uint64_t v21;
  CFErrorRef error;
  const __CFString *v23;
  _UNKNOWN **v24;
  uint8_t buf[4];
  SecKeyRef v26;
  const __CFString *v27;
  _UNKNOWN **v28;

  v2 = [AAFAnalyticsEventSecurity alloc];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  sub_1001CACE0();
  LOBYTE(v21) = *(_BYTE *)(a1 + 72);
  v7 = -[AAFAnalyticsEventSecurity initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:](v2, "initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:", 0, v3, v4, v5, CFSTR("com.apple.security.validatedStashedAccountCredential"), v6, v21, &off_10030AF70);
  error = 0;
  v8 = sub_1001D725C((__CFString **)&error);
  if (v8)
  {
    v9 = v8;
    v10 = SecKeyCopyPublicKey(v8);
    if (v10)
    {
      v11 = v10;
      v12 = sub_10000EF14("pairing");
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v26 = v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "returning stash credential: %@", buf, 0xCu);
      }

      CFRelease(v11);
    }
    v14 = SecKeyCopyExternalRepresentation(v9, &error);
    CFRelease(v9);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    v15 = error;
    if (error)
    {
      error = 0;
      CFRelease(v15);
    }
    v23 = CFSTR("numberOfKeychainItemsCollected");
    v24 = &off_10030B048;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    -[AAFAnalyticsEventSecurity addMetrics:](v7, "addMetrics:", v16);

    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", v7, 1, 0);
  }
  else
  {
    v17 = sub_10000EF14("pairing");
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "no stashed credential", buf, 2u);
    }

    v27 = CFSTR("numberOfKeychainItemsCollected");
    v28 = &off_10030B030;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
    -[AAFAnalyticsEventSecurity addMetrics:](v7, "addMetrics:", v19);

    +[SecurityAnalyticsReporterRTC sendMetricWithEvent:success:error:](SecurityAnalyticsReporterRTC, "sendMetricWithEvent:success:error:", v7, 0, error);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    v20 = error;
    if (error)
    {
      error = 0;
      CFRelease(v20);
    }
  }

}

void sub_1001CD4FC(uint64_t a1)
{
  dispatch_queue_global_t global_queue;
  void *v3;
  id v4;
  const void *v5;
  NSObject *v6;
  _QWORD *v7;
  const char *v8;
  __int128 v9;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  _QWORD *v16;

  global_queue = dispatch_get_global_queue(-2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001CD660;
  v10[3] = &unk_1002ED5C0;
  v12 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 32);
  v4 = (id)v9;
  v11 = v9;
  SOSCloudKeychainSynchronizeAndWait(v3, v10);

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  v5 = sub_10000EF14("fresh");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD **)(a1 + 48);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      v8 = "success";
    else
      v8 = "failure";
    if (v7)
      v7 = (_QWORD *)*v7;
    *(_DWORD *)buf = 136315394;
    v14 = v8;
    v15 = 2112;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EFP complete: %s %@", buf, 0x16u);
  }

}

intptr_t sub_1001CD660(uint64_t a1, uint64_t a2, const void *a3)
{
  const void *v5;
  NSObject *v6;
  const void **v7;
  const void *v8;
  int v10;
  const void *v11;

  v5 = sub_10000EF14("fresh");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138412290;
    v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EFP returned, callback error: %@", (uint8_t *)&v10, 0xCu);
  }

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3 == 0;
  v7 = *(const void ***)(a1 + 48);
  if (v7)
  {
    v8 = *v7;
    if (*v7 != a3)
    {
      if (!a3 || (CFRetain(a3), (v8 = *v7) != 0))
        CFRelease(v8);
      *v7 = a3;
    }
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001CD760(uint64_t a1)
{
  CFTypeRef v2;
  CFTypeRef cf;

  cf = 0;
  sub_1001D7620(*(void **)(a1 + 32), (__CFString **)&cf);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v2 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v2);
  }
}

void sub_1001CD7B8(uint64_t a1)
{
  SecKeyRef v2;
  SecKeyRef v3;
  void *v4;
  CFTypeRef v5;
  CFTypeRef cf;

  cf = 0;
  v2 = sub_1001D725C((__CFString **)&cf);
  if (v2)
  {
    v3 = v2;
    v4 = (void *)SecKeyCopySubjectPublicKeyInfo(v2);
    CFRelease(v3);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v5 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v5);
    }
  }
}

uint64_t sub_1001CD848(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAccountInBypassMode:", *(unsigned __int8 *)(a1 + 48));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1001CD880(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1001CD88C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  CFStringRef v11;
  const __CFString *v12;
  CFStringRef v13;
  const __CFString *v14;

  if (objc_msgSend(*(id *)(a1 + 32), "accountKeyIsTrusted")
    && objc_msgSend(*(id *)(a1 + 32), "accountKey"))
  {
    v2 = SecKeyCopySubjectPublicKeyInfo(objc_msgSend(*(id *)(a1 + 32), "accountKey"));
    if (v2)
    {
      v3 = (void *)v2;
      (*(void (**)(_QWORD, id, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "accountKeyIsTrusted"), v2, 0);
    }
    else
    {
      v11 = kCFErrorDescriptionKey;
      v12 = CFSTR("User public not available");
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
      v8 = *(_QWORD *)(a1 + 40);
      v9 = objc_msgSend(*(id *)(a1 + 32), "accountKeyIsTrusted");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kSOSErrorDomain, 2, v7));
      (*(void (**)(uint64_t, id, _QWORD, void *))(v8 + 16))(v8, v9, 0, v10);

      v3 = 0;
    }
  }
  else
  {
    v13 = kCFErrorDescriptionKey;
    v14 = CFSTR("User public key not trusted");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
    v4 = *(_QWORD *)(a1 + 40);
    v5 = objc_msgSend(*(id *)(a1 + 32), "accountKeyIsTrusted");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kSOSErrorDomain, 2, v3));
    (*(void (**)(uint64_t, id, _QWORD, void *))(v4 + 16))(v4, v5, 0, v6);

  }
}

const __CFString *sub_1001CDAF8(void *a1)
{
  const __CFString *result;
  const __CFString *v2;
  CFTypeID v3;

  result = (const __CFString *)sub_1001CA91C(a1, kSOSDSIDKey);
  if (result)
  {
    v2 = result;
    v3 = CFGetTypeID(result);
    if (v3 == CFStringGetTypeID() && !CFEqual(v2, kCFNull))
    {
      if (CFStringCompare(v2, &stru_1002EE888, 0))
        return v2;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001CDB78(void *a1, uint64_t a2)
{
  id v3;
  const __CFString *v4;
  const __CFString *v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  NSObject *v9;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v3 = a1;
  v4 = sub_1001CDAF8(v3);
  if (!v4)
  {
    v8 = sub_10000EF14("updates");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412290;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting dsid, current dsid is empty for this account: %@", (uint8_t *)&v11, 0xCu);
    }

    sub_1001CDD00(v3, a2);
    goto LABEL_10;
  }
  if (!a2)
    goto LABEL_11;
  v5 = v4;
  if (CFStringCompare((CFStringRef)a2, v4, 0) == kCFCompareEqualTo)
  {
LABEL_10:
    a2 = 0;
    goto LABEL_11;
  }
  v6 = sub_10000EF14("updates");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 138412546;
    v12 = (uint64_t)v5;
    v13 = 2112;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Changing DSID from: %@ to %@", (uint8_t *)&v11, 0x16u);
  }

  sub_10003429C(CFSTR("DSID Change is unexpected"), 0x53C00011u);
  sub_1001CDD78(v3);
  sub_1001CDD00(v3, a2);
  a2 = 1;
LABEL_11:

  return a2;
}

void sub_1001CDD00(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = kSOSDSIDKey;
  v4 = a1;
  sub_1001E6A88(v4, v3, a2, 0);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "circle_transport"));

  objc_msgSend(v5, "kvsSendOfficialDSID:err:", a2, 0);
}

void sub_1001CDD78(void *a1)
{
  id v1;
  const void *v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const __CFDictionary *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const __CFDictionary *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const __CFDictionary *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  const __CFDictionary *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  SOSAccountTrustClassic *v41;
  void *v42;
  void *v43;
  SOSAccountTrustClassic *v44;
  CFStringRef v45;
  const void *v46;
  NSObject *v47;
  uint8_t v48[16];
  uint8_t buf[16];

  v1 = a1;
  v2 = sub_10000EF14("accountChange");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting Account to New", buf, 2u);
  }

  v11 = sub_10012E96C(kCFAllocatorDefault, v4, v5, v6, v7, v8, v9, v10, (uint64_t)kSecClass, (uint64_t)kSecClassGenericPassword);
  sub_1001CE250(v11);
  if (v11)
    CFRelease(v11);
  v19 = sub_10012E96C(kCFAllocatorDefault, v12, v13, v14, v15, v16, v17, v18, (uint64_t)kSecClass, (uint64_t)kSecClassKey);
  sub_1001CE250(v19);
  if (v19)
    CFRelease(v19);
  v27 = sub_10012E96C(kCFAllocatorDefault, v20, v21, v22, v23, v24, v25, v26, (uint64_t)kSecClass, (uint64_t)kSecClassGenericPassword);
  sub_1001CE250(v27);
  if (v27)
    CFRelease(v27);
  v35 = sub_10012E96C(kCFAllocatorDefault, v28, v29, v30, v31, v32, v33, v34, (uint64_t)kSecClass, (uint64_t)kSecClassGenericPassword);
  sub_1001CE250(v35);
  if (v35)
    CFRelease(v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "user_private_timer"));

  if (v36)
  {
    v37 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "user_private_timer"));
    dispatch_source_cancel(v37);

    objc_msgSend(v1, "setUser_private_timer:", 0);
    xpc_transaction_end();
  }
  if (objc_msgSend(v1, "lock_notification_token") != -1)
  {
    notify_cancel((int)objc_msgSend(v1, "lock_notification_token"));
    objc_msgSend(v1, "setLock_notification_token:", 0xFFFFFFFFLL);
  }
  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "key_transport"));
  sub_1001F3460(v38);

  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "kvs_message_transport"));
  sub_1001F3320(v39);

  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "circle_transport"));
  sub_1001F33D8(v40);

  objc_msgSend(v1, "setCircle_transport:", 0);
  objc_msgSend(v1, "setKvs_message_transport:", 0);
  objc_msgSend(v1, "set_password_tmp:", 0);
  objc_msgSend(v1, "setCircle_rings_retirements_need_attention:", 1);
  objc_msgSend(v1, "setEngine_peer_state_needs_repair:", 1);
  objc_msgSend(v1, "setKey_interests_need_updating:", 1);
  objc_msgSend(v1, "setNeed_backup_peers_created_after_backup_key_set:", 1);
  objc_msgSend(v1, "setAccountKeyIsTrusted:", 0);
  objc_msgSend(v1, "setAccountKeyDerivationParameters:", 0);
  objc_msgSend(v1, "setAccountPrivateKey:", 0);
  objc_msgSend(v1, "setAccountKey:", 0);
  objc_msgSend(v1, "setPreviousAccountKey:", 0);
  objc_msgSend(v1, "setPeerPublicKey:", 0);
  objc_msgSend(v1, "setBackup_key:", 0);
  objc_msgSend(v1, "setNotifyCircleChangeOnExit:", 1);
  objc_msgSend(v1, "setNotifyViewChangeOnExit:", 1);
  objc_msgSend(v1, "setNotifyBackupOnExit:", 1);
  objc_msgSend(v1, "setOctagonSigningFullKeyRef:", 0);
  objc_msgSend(v1, "setOctagonEncryptionFullKeyRef:", 0);
  objc_msgSend(v1, "setTrust:", 0);
  v41 = [SOSAccountTrustClassic alloc];
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v44 = -[SOSAccountTrustClassic initWithRetirees:fpi:circle:departureCode:peerExpansion:](v41, "initWithRetirees:fpi:circle:departureCode:peerExpansion:", v42, 0, 0, 0, v43);
  objc_msgSend(v1, "setTrust:", v44);

  objc_msgSend(v1, "ensureFactoryCircles");
  v45 = sub_1001E6B2C(v1);
  if (v45)
    CFRelease(v45);
  v46 = sub_10000EF14("circleop");
  v47 = objc_claimAutoreleasedReturnValue(v46);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Setting account.key_interests_need_updating to true in SOSAccountSetToNew", v48, 2u);
  }

  objc_msgSend(v1, "setKey_interests_need_updating:", 1);
}

void sub_1001CE250(const __CFDictionary *a1)
{
  OSStatus v1;
  OSStatus v2;
  const void *v3;
  NSObject *v4;
  _DWORD v5[2];

  v1 = SecItemDelete(a1);
  if (v1)
  {
    v2 = v1;
    v3 = sub_10000EF14("SecError");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109120;
      v5[1] = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SecItemDelete: %d", (uint8_t *)v5, 8u);
    }

  }
}

SOSAccount *sub_1001CE300(uint64_t a1, uint64_t a2)
{
  SOSAccount *v2;
  NSObject *v3;
  SOSAccount *v4;
  _QWORD block[4];
  SOSAccount *v7;

  v2 = -[SOSAccount initWithGestalt:factory:]([SOSAccount alloc], "initWithGestalt:factory:", a1, a2);
  v3 = objc_claimAutoreleasedReturnValue(-[SOSAccount queue](v2, "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001CE3A4;
  block[3] = &unk_1002EC350;
  v4 = v2;
  v7 = v4;
  dispatch_sync(v3, block);

  return v4;
}

id sub_1001CE3A4(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = sub_10000EF14("circleop");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting account.key_interests_need_updating to true in SOSAccountCreate", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "setKey_interests_need_updating:", 1);
}

void sub_1001CE420(uint64_t a1, const void *a2)
{
  const void *v2;
  void *v4;
  void *v5;
  void *v6;
  const void *v7;
  NSObject *v8;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v11;

  v2 = a2;
  CFSetSetValue(*(CFMutableSetRef *)(a1 + 32), a2);
  cf = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "trust"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "kvs_message_transport"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "circle_transport"));
  LOBYTE(v2) = objc_msgSend(v4, "cleanupAfterPeer:circleTransport:seconds:circle:cleanupPeer:err:", v5, v6, 86400, *(_QWORD *)(a1 + 48), v2, &cf);

  if ((v2 & 1) == 0)
  {
    v7 = sub_10000EF14("retirement");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v11 = cf;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error cleaning up after peer, probably orphaned some stuff in KVS: (%@) – moving on", buf, 0xCu);
    }

  }
  if (cf)
    CFRelease(cf);
}

uint64_t sub_1001CE560(uint64_t result, CFTypeRef cf)
{
  uint64_t v3;
  CFTypeID v4;

  if (cf)
  {
    v3 = result;
    v4 = CFGetTypeID(cf);
    result = SOSPeerInfoGetTypeID();
    if (v4 == result)
    {
      result = SOSCircleUpdatePeerInfo(*(_QWORD *)(v3 + 40), cf);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = 1;
    }
  }
  return result;
}

void sub_1001CE5C0(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v3 = a1;
  v6 = objc_retainBlock(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "change_blocks"));

  v5 = objc_retainBlock(v6);
  objc_msgSend(v4, "addObject:", v5);

}

BOOL sub_1001CE630(void *a1, uint64_t a2, CFTypeRef *a3)
{
  id v5;
  void *v6;
  id v7;
  __CFSet *v8;
  const void *v9;
  const void *v10;
  NSObject *v11;
  CFTypeRef v12;
  const void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  const void *v19;
  NSObject *v20;
  void *v21;
  unsigned __int8 v22;
  const void *v23;
  NSObject *v24;
  void *v25;
  unsigned __int8 v26;
  const void *v27;
  NSObject *v28;
  CFTypeRef v29;
  void *v30;
  CFTypeRef v32;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v35;
  __int16 v36;
  CFTypeRef v37;

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
  v7 = objc_msgSend(v6, "fullPeerInfo");
  v8 = (__CFSet *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "retirees"));
  if (v7)
  {
    cf = 0;
    v9 = (const void *)SOSFullPeerInfoPromoteToRetiredAndCopy(v7, &cf);
    if (cf)
    {
      v10 = sub_10000EF14("SecError");
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v35 = cf;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "SOSFullPeerInfoPromoteToRetiredAndCopy error: %@", buf, 0xCu);
      }

      v12 = cf;
      if (a3)
      {
        *a3 = cf;
      }
      else if (cf)
      {
        cf = 0;
        CFRelease(v12);
      }
    }
    if (v9)
    {
      if (SOSCircleHasApplicant(a2, v9, 0))
      {
        SOSCircleWithdrawRequest(a2, v9, 0);
      }
      else if (SOSCircleHasPeer(a2, v9, 0) && SOSCircleUpdatePeerInfo(a2, v9))
      {
        v32 = 0;
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "kvs_message_transport"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "circle_transport"));
        v18 = objc_msgSend(v15, "cleanupAfterPeer:circleTransport:seconds:circle:cleanupPeer:err:", v16, v17, 86400, a2, v9, &v32);

        if ((v18 & 1) == 0)
        {
          v19 = sub_10000EF14("SecError");
          v20 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            v35 = v9;
            v36 = 2112;
            v37 = v32;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Error cleanup up after peer (%@): %@", buf, 0x16u);
          }

        }
        if (v32)
          CFRelease(v32);
      }
      CFSetAddValue(v8, v9);
      objc_msgSend(v6, "setRetirees:", v8);
      v32 = 0;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "circle_transport"));
      v22 = objc_msgSend(v21, "postRetirement:peer:err:", SOSCircleGetName(a2), v9, &v32);

      if ((v22 & 1) == 0)
      {
        v23 = sub_10000EF14("SecWarning");
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v35 = v32;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Couldn't post retirement (%@)", buf, 0xCu);
        }

      }
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "circle_transport"));
      v26 = objc_msgSend(v25, "flushChanges:", &v32);

      if ((v26 & 1) == 0)
      {
        v27 = sub_10000EF14("SecWarning");
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v35 = v32;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Couldn't flush retirement data (%@)", buf, 0xCu);
        }

      }
      v29 = v32;
      if (v32)
      {
        v32 = 0;
        CFRelease(v29);
      }
    }
    else
    {
      v13 = sub_10000EF14("SecError");
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v35 = v7;
        v36 = 2112;
        v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Create ticket failed for peer %@: %@", buf, 0x16u);
      }

    }
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
    objc_msgSend(v30, "purgeIdentity");

    if (v9)
      CFRelease(v9);
  }

  return v7 != 0;
}

void sub_1001CEA7C(uint64_t a1, const void *a2)
{
  const void *CloudIdentity;

  if (SOSPeerInfoIsCloudIdentity(a2))
  {
    CloudIdentity = (const void *)SOSFullPeerInfoCreateCloudIdentity(kCFAllocatorDefault, a2, 0);
    if (CloudIdentity)
      CFRelease(CloudIdentity);
    else
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), a2);
  }
}

uint64_t sub_1001CEAE4(void *a1, int a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  const void *v12;
  NSObject *v13;
  const void *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  id v18;
  const void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  const void *v27;
  NSObject *v28;
  void *v29;
  unsigned __int8 v30;
  const void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const __CFSet *AllCurrent;
  const void *v36;
  BOOL v37;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  _BYTE buf[24];
  void *v50;
  id v51;
  id v52;
  uint64_t *v53;
  uint64_t *v54;
  id v55;
  uint64_t v56;
  id v57;

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trust"));
  v8 = sub_1001D6CD8(v6, a3);
  if (!v8)
    goto LABEL_45;
  v9 = v8;
  if (objc_msgSend(v7, "trustedCircle") && SOSCircleCountPeers(objc_msgSend(v7, "trustedCircle")))
  {
    if ((objc_msgSend(v6, "accountInScriptBypassMode") & 1) == 0)
    {
      v10 = objc_msgSend(v7, "trustedCircle");
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "peerID"));
      LODWORD(v10) = SOSCircleHasPeerWithID(v10, v11, 0);

      if ((_DWORD)v10)
      {
        v12 = sub_10000EF14("circleops");
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "attempt to join a circle we're in - continuing.", buf, 2u);
        }

        goto LABEL_43;
      }
    }
    if ((SOSCircleVerify(objc_msgSend(v7, "trustedCircle"), objc_msgSend(v6, "accountKey"), 0) & 1) != 0)
    {
      if ((objc_msgSend(v6, "accountInScriptBypassMode") & 1) == 0 && objc_msgSend(v7, "fullPeerInfo"))
      {
        v18 = objc_msgSend(v7, "peerInfo");
        if ((SOSCircleHasPeer(objc_msgSend(v7, "trustedCircle"), v18, 0) & 1) != 0)
        {
LABEL_43:
          v17 = 1;
          goto LABEL_44;
        }
        SOSCircleRemoveRejectedPeer(objc_msgSend(v7, "trustedCircle"), v18, 0);
        if ((SOSCircleHasApplicant(objc_msgSend(v7, "trustedCircle"), v18, 0) & 1) == 0)
        {
          v19 = sub_10000EF14("SecError");
          v20 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = SOSPeerInfoGetPeerID(v18);
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = SOSCircleGetName(objc_msgSend(v7, "trustedCircle"));
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Resetting my peer (ID: %@) for circle '%@' during application", buf, 0x16u);
          }

          objc_msgSend(v7, "setFullPeerInfo:", 0);
        }
      }
      v40 = v5;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "account"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "trust"));
      v45 = 0;
      v46 = &v45;
      v47 = 0x2020000000;
      v48 = 0;
      v41 = 0;
      v42 = &v41;
      v43 = 0x2020000000;
      v44 = 0;
      if (objc_msgSend(v22, "trustedCircle"))
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "trust"));
        v24 = objc_msgSend(v23, "ensureFullPeerAvailable:err:", v21, a3);

        if (v24)
        {
          if (objc_msgSend(v21, "accountInScriptBypassMode"))
          {
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "trust"));
            objc_msgSend(v25, "setFullPeerInfo:", 0);

            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "trust"));
            objc_msgSend(v26, "ensureFullPeerAvailable:err:", v21, a3);

          }
          v39 = objc_msgSend(v22, "fullPeerInfo");
          if (SOSCircleCountPeers(objc_msgSend(v22, "trustedCircle"))
            && ((objc_msgSend(v21, "accountInScriptBypassMode") & 1) != 0
             || !sub_1001F045C(v21)))
          {
            sub_1001DED04(v21);
            if (a2)
            {
              v32 = SOSCircleCopyiCloudFullPeerInfoRef(objc_msgSend(v22, "trustedCircle"), 0);
              v42[3] = v32;
            }
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "trust"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "circle_transport"));
            *(_QWORD *)buf = _NSConcreteStackBlock;
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = sub_1001CF154;
            v50 = &unk_1002EB6C0;
            v53 = &v45;
            v51 = v21;
            v55 = v39;
            v56 = a3;
            v57 = v9;
            v52 = v22;
            v54 = &v41;
            objc_msgSend(v33, "modifyCircle:err:action:", v34, a3, buf);

            if (a2)
            {
              AllCurrent = (const __CFSet *)SOSViewsGetAllCurrent();
              sub_1001DF388(v40, AllCurrent);
            }

            v29 = v51;
          }
          else
          {
            v27 = sub_10000EF14("resetToOffering");
            v28 = objc_claimAutoreleasedReturnValue(v27);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Resetting circle to offering since there are no peers", buf, 2u);
            }

            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "trust"));
            v30 = objc_msgSend(v29, "resetCircleToOffering:userKey:err:", v40, v9, a3);
            *((_BYTE *)v46 + 24) = v30;
          }

        }
      }
      else
      {
        SOSCreateErrorWithFormat(1032, 0, a3, 0, CFSTR("Don't have circle when joining???"));
      }
      v36 = (const void *)v42[3];
      if (v36)
      {
        v42[3] = 0;
        CFRelease(v36);
      }
      v37 = *((_BYTE *)v46 + 24) == 0;
      _Block_object_dispose(&v41, 8);
      _Block_object_dispose(&v45, 8);

      if (!v37)
      {
        objc_msgSend(v7, "setDepartureCode:", 1);
        goto LABEL_43;
      }
LABEL_45:
      v17 = 0;
      goto LABEL_44;
    }
    v31 = sub_10000EF14("resetToOffering");
    v15 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Resetting circle to offering since we are new and it doesn't verify with current userKey", buf, 2u);
    }
  }
  else
  {
    v14 = sub_10000EF14("resetToOffering");
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Resetting circle to offering because it's empty and we're joining", buf, 2u);
    }
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trust"));
  v17 = (uint64_t)objc_msgSend(v16, "resetCircleToOffering:userKey:err:", v5, v9, a3);

LABEL_44:
  return v17;
}

void sub_1001CF124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001CF154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t PeerInfo;
  uint64_t PeerID;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  NSObject *v17;
  CFTypeRef v18;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v22;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = sub_1001CA91C(*(void **)(a1 + 32), (uint64_t)CFSTR("EscrowRecord"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = SOSFullPeerInfoReplaceEscrowRecords(v4, v6, v5);
  v7 = SOSCircleRequestAdmission(a2, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (*(_BYTE *)(v8 + 24))
    v9 = v7;
  else
    v9 = 0;
  *(_BYTE *)(v8 + 24) = v9;
  objc_msgSend(*(id *)(a1 + 40), "setDepartureCode:", 1);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    return 0;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  if (!v10)
    return 1;
  cf = 0;
  PeerInfo = SOSFullPeerInfoGetPeerInfo(v10);
  PeerID = SOSPeerInfoGetPeerID(PeerInfo);
  if (PeerID)
  {
    if (SOSCircleHasActivePeerWithID(a2, PeerID, &cf))
    {
      v13 = *(_QWORD *)(a1 + 80);
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      v15 = SOSFullPeerInfoGetPeerInfo(*(_QWORD *)(a1 + 64));
      SOSCircleAcceptRequest(a2, v13, v14, v15, &cf);
    }
    if (cf)
    {
      v16 = sub_10000EF14("SecError");
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v22 = cf;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Failed to join with cloud identity: %@", buf, 0xCu);
      }

      v18 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v18);
      }
    }
  }
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) != 0;
}

uint64_t sub_1001CF31C(void *a1, const __CFArray *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  const void *v10;
  const __CFSet *MutableForSOSPeerInfosByIDWithArray;
  __CFSet *v12;
  BOOL v13;
  void *v14;
  void *v15;
  uint64_t v16;
  const void *v17;
  NSObject *v18;
  const void *v19;
  NSObject *v20;
  const void *v22;
  NSObject *v23;
  _QWORD v24[4];
  id v25;
  __CFSet *v26;
  id v27;
  id v28;
  uint64_t v29;
  BOOL v30;
  uint8_t buf[16];

  v5 = a1;
  sub_10002FCF4(a2, CFSTR("["), CFSTR("]"), (uint64_t)&stru_1002EB340);
  v6 = sub_1001D6CD8(v5, a3);
  if (!v6)
  {
    v17 = sub_10000EF14("circleOps");
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Can't remove without userKey", buf, 2u);
    }

    goto LABEL_14;
  }
  v7 = v6;
  v8 = objc_msgSend(v5, "fullPeerInfo");
  v9 = objc_msgSend(v5, "peerInfo");
  if (!v8 || (v10 = v9) == 0)
  {
    v19 = sub_10000EF14("circleOps");
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Can't remove without being active peer", buf, 2u);
    }

    SOSErrorCreate(1032, a3, 0, CFSTR("Can't remove without being active peer"));
LABEL_14:
    v16 = 0;
    goto LABEL_15;
  }
  MutableForSOSPeerInfosByIDWithArray = (const __CFSet *)CFSetCreateMutableForSOSPeerInfosByIDWithArray(kCFAllocatorDefault, a2);
  if (MutableForSOSPeerInfosByIDWithArray)
  {
    v12 = MutableForSOSPeerInfosByIDWithArray;
    v13 = CFSetContainsValue(MutableForSOSPeerInfosByIDWithArray, v10) != 0;
    CFSetRemoveValue(v12, v10);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "circle_transport"));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1001CF5AC;
    v24[3] = &unk_1002EB368;
    v26 = v12;
    v27 = v7;
    v28 = v8;
    v29 = a3;
    v25 = v5;
    v30 = v13;
    v16 = (uint64_t)objc_msgSend(v14, "modifyCircle:err:action:", v15, a3, v24);

    if ((_DWORD)v16)
      sub_10002FEC4(v12, (uint64_t)&stru_1002EB388);
    CFRelease(v12);

  }
  else
  {
    v22 = sub_10000EF14("circleOps");
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "No peerSet to remove", buf, 2u);
    }

    v16 = 1;
  }
LABEL_15:

  return v16;
}

uint64_t sub_1001CF5AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const void *v5;
  NSObject *v6;
  uint8_t v7[16];

  if (!CFSetGetCount(*(CFSetRef *)(a1 + 40))
    || (result = SOSCircleRemovePeers(a2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64)), (_DWORD)result)&& (result = sub_1001D6C6C(*(void **)(a1 + 32), *(_QWORD *)(a1 + 64)), (_DWORD)result))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v5 = sub_10000EF14("circleOps");
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Leaving circle by client request (SOSAccountRemovePeersFromCircle)", v7, 2u);
      }

      return sub_1001CE630(*(void **)(a1 + 32), a2, *(CFTypeRef **)(a1 + 64));
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1001CF678(id a1, __CFString *a2)
{
  const void *v3;
  NSObject *v4;
  int v5;
  __CFString *v6;

  v3 = sub_10000EF14("circleOps");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removed Peers from circle %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1001CF720(id a1, __CFString *a2)
{
  const void *v3;
  NSObject *v4;
  int v5;
  __CFString *v6;

  v3 = sub_10000EF14("circleOps");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempting to remove peer set %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1001CF7C8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "circle_transport"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001CF860;
  v7[3] = &unk_1002ECAE8;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = v5;
  v9 = v6;
  objc_msgSend(v2, "modifyCircle:err:action:", v3, v4, v7);

}

BOOL sub_1001CF860(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = sub_10000EF14("circleOps");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Leaving circle by client request (Bail)", v7, 2u);
  }

  return sub_1001CE630(*(void **)(a1 + 32), a2, *(CFTypeRef **)(a1 + 40));
}

uint64_t sub_1001CF8E8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = SOSCircleAcceptRequest(a2, a1[5], a3, a4, a1[6]);
  if ((_DWORD)result)
    ++*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

void sub_1001CF92C(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  const void *v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint64_t v16;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v19;

  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
  v8 = objc_msgSend(v7, "peerInfo");
  cf = 0;
  if (objc_msgSend(v7, "trustedCircle") && v8)
  {
    if (SOSCircleHasPeer(objc_msgSend(v7, "trustedCircle"), v8, &cf))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "circle_transport"));
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1001CFAEC;
      v13[3] = &unk_1002EB710;
      v16 = a2;
      v15 = v6;
      v14 = v7;
      objc_msgSend(v9, "modifyCircle:err:action:", v10, 0, v13);

    }
    if (cf)
    {
      v11 = sub_10000EF14("SecError");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v19 = cf;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Got error in SOSCircleHasPeer: %@", buf, 0xCu);
      }

      if (cf)
        CFRelease(cf);
    }
  }

}

uint64_t sub_1001CFAEC(uint64_t a1, uint64_t a2)
{
  const __CFArray *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  CFRange v16;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001CFBF0;
  v7[3] = &unk_1002EB6E8;
  v11 = a2;
  v3 = *(const __CFArray **)(a1 + 48);
  v9 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 32);
  v10 = &v12;
  v4 = v7;
  v16.length = CFArrayGetCount(v3);
  v16.location = 0;
  CFArrayApplyFunction(v3, v16, (CFArrayApplierFunction)sub_1001C9C54, v4);

  v5 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1001CFBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CFBF0(uint64_t result, CFTypeRef cf)
{
  uint64_t v3;
  CFTypeID v4;

  if (cf)
  {
    v3 = result;
    v4 = CFGetTypeID(cf);
    result = SOSPeerInfoGetTypeID();
    if (v4 == result)
    {
      result = SOSCircleHasApplicant(*(_QWORD *)(v3 + 56), cf, 0);
      if ((_DWORD)result)
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD, id, CFTypeRef))(*(_QWORD *)(v3 + 40) + 16))(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 56), objc_msgSend(*(id *)(v3 + 32), "fullPeerInfo"), cf);
        if ((_DWORD)result)
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8) + 24) = 1;
      }
    }
  }
  return result;
}

uint64_t sub_1001CFC80(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = SOSCircleRejectRequest(a2, a3, a4, a1[6]);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v8 = (int)SOSCircleCountPeers(a2);
    if (v7 > v8)
      v8 = v7;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v8;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
  }
  return v6;
}

void sub_1001CFD08(void *a1)
{
  id v1;
  void *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  id v7;
  uint64_t PeerInfo;
  int HasActivePeer;
  uint64_t PeerID;
  id v11;
  id v12;
  const void *v13;
  _QWORD v14[4];
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint8_t buf[16];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "trust"));
  v3 = sub_10000EF14("updates");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ensuring peer registration.", buf, 2u);
  }

  if (!v2)
  {
    v13 = sub_10000EF14("updates");
    v5 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to get trust object in Ensuring peer registration.", buf, 2u);
    }
    goto LABEL_11;
  }
  if (!objc_msgSend(v1, "getCircleStatus:", 0))
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "trust"));
    v6 = -[NSObject fullPeerInfo](v5, "fullPeerInfo");
    v7 = -[NSObject trustedCircle](v5, "trustedCircle");
    PeerInfo = SOSFullPeerInfoGetPeerInfo(v6);
    if (!PeerInfo)
    {
LABEL_11:

      goto LABEL_12;
    }
    HasActivePeer = SOSCircleHasActivePeer(v7, PeerInfo, 0);

    if (HasActivePeer && objc_msgSend(v1, "SOSMonitorModeSOSIsActive"))
    {
      PeerID = SOSPeerInfoGetPeerID(objc_msgSend(v2, "peerInfo"));
      v11 = objc_msgSend(v2, "trustedCircle");
      v12 = objc_msgSend(v1, "accountKey");
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1001CFEE0;
      v14[3] = &unk_1002EB258;
      v17 = PeerID;
      v15 = v1;
      v16 = v2;
      SOSCircleForEachValidSyncingPeer(v11, v12, v14);

      v5 = v15;
      goto LABEL_11;
    }
  }
LABEL_12:

}

void sub_1001CFEE0(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t PeerID;
  char v8;
  char v9;
  const void *v10;
  NSObject *v11;
  id v12;
  CFTypeRef v13;
  CFTypeRef cf;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  _BYTE buf[24];
  CFTypeRef v20;
  uint64_t *v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  CFTypeRef *p_cf;

  if ((SOSPeerInfoPeerIDEqual(a2, *(_QWORD *)(a1 + 48)) & 1) == 0)
  {
    cf = 0;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "kvs_message_transport"));
    v5 = objc_msgSend(v4, "SOSTransportMessageGetEngine");
    v6 = objc_msgSend(*(id *)(a1 + 40), "fullPeerInfo");
    if (-[OTSOSActualAdapter sosEnabled]_0())
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 1;
      PeerID = SOSPeerInfoGetPeerID(a2);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1000FBD80;
      v20 = &unk_1002DDEB8;
      v21 = &v15;
      v22 = v5;
      v23 = PeerID;
      v24 = v6;
      v25 = a2;
      p_cf = &cf;
      v8 = sub_1000FC2C0((uint64_t)v5, PeerID, (uint64_t)&cf, buf);
      v9 = *((_BYTE *)v16 + 24) ? v8 : 0;
      *((_BYTE *)v16 + 24) = v9;
      _Block_object_dispose(&v15, 8);
    }
    else
    {
      SOSCCSetSOSDisabledError(&cf);
    }

    if (cf)
    {
      v10 = sub_10000EF14("updates");
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = objc_msgSend(*(id *)(a1 + 40), "fullPeerInfo");
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2112;
        v20 = cf;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "can't initialize transport for peer %@ with %@ (%@)", buf, 0x20u);
      }

      v13 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v13);
      }
    }
  }
}

void sub_1001D00B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1001D00D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  NSObject *v6;
  int v8;
  uint64_t v9;

  if (a3)
  {
    v5 = sub_10000EF14("SecError");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SOSCloudKeychainPutObjectsInCloud returned error: %@", (uint8_t *)&v8, 0xCu);
    }

  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D0198(void *a1, uint64_t *a2)
{
  dispatch_queue_global_t global_queue;
  id v4;
  dispatch_semaphore_t v5;
  dispatch_time_t v6;
  NSObject *v7;
  _BYTE *v8;
  uint64_t *v9;
  const void *v10;
  const __CFDictionary *v11;
  id v12;
  CFMutableSetRef Mutable;
  void *v14;
  id v15;
  id v16;
  id v17;
  CFMutableSetRef v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  const void *v23;
  NSObject *v24;
  const void *v25;
  NSObject *v26;
  uint64_t v27;
  const void *v28;
  NSObject *v29;
  CFIndex Count;
  id v31;
  const void *v32;
  NSObject *v33;
  id v34;
  CFStringRef v35;
  dispatch_semaphore_t v36;
  dispatch_time_t v37;
  NSObject *v38;
  _BYTE *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  CFMutableStringRef MutableCopy;
  double Current;
  dispatch_semaphore_t v46;
  dispatch_time_t v47;
  NSObject *v48;
  void ***v49;
  id v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  dispatch_semaphore_t v59;
  _BYTE context[24];
  void *v61;
  id v62;
  _QWORD *v63;
  void ***v64;

  v50 = a1;
  global_queue = dispatch_get_global_queue(-2, 0);
  v4 = (id)objc_claimAutoreleasedReturnValue(global_queue);
  v55 = 0;
  v56 = (uint64_t)&v55;
  v57 = 0x2020000000;
  v58 = 0;
  v5 = dispatch_semaphore_create(0);
  v6 = dispatch_time(0, 30000000000);
  v51 = 0;
  v52 = &v51;
  v53 = 0x2020000000;
  v54 = 0;
  *(_QWORD *)context = _NSConcreteStackBlock;
  *(_QWORD *)&context[8] = 3221225472;
  *(_QWORD *)&context[16] = sub_1001D08DC;
  v61 = &unk_1002EB738;
  v63 = &v51;
  v64 = &v55;
  v7 = v5;
  v62 = v7;
  v8 = objc_retainBlock(context);
  SOSCloudKeychainGetAllObjectsFromCloud(v4, v8);
  dispatch_semaphore_wait(v7, v6);
  v9 = v52;
  v10 = (const void *)v52[3];
  if (v10)
  {
    if (!a2 || (CFRetain((CFTypeRef)v52[3]), *a2 = (uint64_t)v10, v9 = v52, (v10 = (const void *)v52[3]) != 0))
    {
      v9[3] = 0;
      CFRelease(v10);
    }
  }
  v11 = *(const __CFDictionary **)(v56 + 24);

  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);

  if (v11)
  {
    v12 = v50;
    Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "trust"));
    v15 = objc_msgSend(v14, "trustedCircle");
    v16 = sub_1001D7408(v12, 0);

    *(_QWORD *)context = _NSConcreteStackBlock;
    *(_QWORD *)&context[8] = 3221225472;
    *(_QWORD *)&context[16] = sub_1001D0A14;
    v61 = &unk_1002EC3A0;
    v62 = Mutable;
    SOSCircleForEachActiveValidPeer(v15, v16, context);

    v17 = v12;
    v18 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "trust"));

    v20 = objc_msgSend(v19, "trustedCircle");
    *(_QWORD *)context = _NSConcreteStackBlock;
    *(_QWORD *)&context[8] = 3221225472;
    *(_QWORD *)&context[16] = sub_1001D0A40;
    v61 = &unk_1002EC3A0;
    v62 = v18;
    SOSCircleForEachRetiredPeer(v20, context);

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v22 = v21;
    if (Mutable && v18)
    {
      *(_QWORD *)context = _NSConcreteStackBlock;
      *(_QWORD *)&context[8] = 3221225472;
      *(_QWORD *)&context[16] = sub_1001D0BF4;
      v61 = &unk_1002EB478;
      v63 = v18;
      v64 = (void ***)Mutable;
      v62 = v21;
      CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)sub_1001D0D38, context);

    }
    else if (!Mutable)
    {
LABEL_16:
      if (v18)
        CFRelease(v18);
      v28 = sub_10000EF14("key-cleanup");
      v29 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        Count = CFDictionaryGetCount(v11);
        v31 = objc_msgSend(v22, "count");
        *(_DWORD *)context = 134218240;
        *(_QWORD *)&context[4] = Count;
        *(_WORD *)&context[12] = 2048;
        *(_QWORD *)&context[14] = v31;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "total keys: %lu, cleaning up %lu", context, 0x16u);
      }

      v32 = sub_10000EF14("key-cleanup");
      v33 = objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)context = 138412290;
        *(_QWORD *)&context[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "message keys that we should remove! %@", context, 0xCu);
      }

      v26 = v22;
      v34 = v4;
      v35 = sub_1001E6B2C(v17);
      v36 = dispatch_semaphore_create(0);
      v37 = dispatch_time(0, 30000000000);
      *(_QWORD *)context = _NSConcreteStackBlock;
      *(_QWORD *)&context[8] = 3221225472;
      *(_QWORD *)&context[16] = sub_1001D0A6C;
      v61 = &unk_1002EC920;
      v38 = v36;
      v62 = v38;
      v39 = objc_retainBlock(context);
      SOSCloudKeychainRemoveKeys(v26, v35, v34, v39);

      dispatch_semaphore_wait(v38, v37);
      if (v35)
        CFRelease(v35);

      v40 = v17;
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "settings"));

      objc_msgSend(v42, "setObject:forKey:", v41, CFSTR("lastKVSCleanup"));
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, CFSTR("["));
      Current = CFAbsoluteTimeGetCurrent();
      *(_QWORD *)context = _NSConcreteStackBlock;
      *(_QWORD *)&context[8] = 3221225472;
      *(_QWORD *)&context[16] = sub_1001D0B2C;
      v61 = &unk_1002ECDD0;
      v62 = MutableCopy;
      sub_100030404((uint64_t)context, Current);
      CFStringAppend(MutableCopy, CFSTR("]"));
      objc_msgSend(v43, "setObject:forKey:", MutableCopy, kSOSKVSLastCleanupTimestampKey);
      if (MutableCopy)
        CFRelease(MutableCopy);
      v46 = dispatch_semaphore_create(0);
      v47 = dispatch_time(0, 30000000000);
      v55 = _NSConcreteStackBlock;
      v56 = 3221225472;
      v57 = (uint64_t)sub_1001D0B34;
      v58 = &unk_1002EC920;
      v59 = v46;
      v48 = v46;
      v49 = objc_retainBlock(&v55);
      SOSCloudKeychainPutObjectsInCloud(v43, v34, v49);
      dispatch_semaphore_wait(v48, v47);

      CFRelease(v11);
LABEL_27:

      goto LABEL_28;
    }
    CFRelease(Mutable);
    goto LABEL_16;
  }
  v23 = sub_10000EF14("key-cleanup");
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)context = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "KVS data returned is nil, cleanup complete", context, 2u);
  }

  if (a2)
  {
    v25 = sub_10000EF14("SecError");
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *a2;
      *(_DWORD *)context = 138412290;
      *(_QWORD *)&context[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "key-cleanup: SOSAccountCopyObjectsFromCloud hit an error: %@", context, 0xCu);
    }
    goto LABEL_27;
  }
LABEL_28:

}

void sub_1001D08A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1001D08DC(uint64_t a1, CFTypeRef cf, const void *a3)
{
  const void *v6;
  NSObject *v7;
  CFTypeID v8;
  uint64_t v9;
  const void *v10;
  int v12;
  const void *v13;

  if (a3)
  {
    v6 = sub_10000EF14("SecError");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 138412290;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SOSCloudKeychainGetObjectsFromCloud returned error: %@", (uint8_t *)&v12, 0xCu);
    }

    CFRetain(a3);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
  }
  if (!cf)
    goto LABEL_8;
  v8 = CFGetTypeID(cf);
  if (v8 == CFNullGetTypeID())
  {
    CFRelease(cf);
LABEL_8:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (*(CFTypeRef *)(v9 + 24) != cf)
  {
    CFRetain(cf);
    v10 = *(const void **)(v9 + 24);
    if (v10)
      CFRelease(v10);
    *(_QWORD *)(v9 + 24) = cf;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D0A14(uint64_t a1, uint64_t a2)
{
  const void *PeerID;

  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), PeerID);
}

void sub_1001D0A40(uint64_t a1, uint64_t a2)
{
  const void *PeerID;

  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), PeerID);
}

intptr_t sub_1001D0A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  NSObject *v6;
  int v8;
  uint64_t v9;

  if (a3)
  {
    v5 = sub_10000EF14("SecError");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SOSCloudKeychainRemoveKeys returned error: %@", (uint8_t *)&v8, 0xCu);
    }

  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D0B2C(uint64_t a1, const __CFString *a2)
{
  CFStringAppend(*(CFMutableStringRef *)(a1 + 32), a2);
}

intptr_t sub_1001D0B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  NSObject *v6;
  int v8;
  uint64_t v9;

  if (a3)
  {
    v5 = sub_10000EF14("SecError");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SOSCloudKeychainPutObjectsInCloud returned error: %@", (uint8_t *)&v8, 0xCu);
    }

  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001D0BF4(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t KeyType;
  const void *v6;
  void *v7;
  CFTypeRef cfa;
  void *value;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      KeyType = SOSKVSKeyGetKeyType(cf);
      if ((_DWORD)KeyType == 1)
      {
        cfa = 0;
        value = 0;
        SOSKVSKeyParse(KeyType, cf, 0, 0, 0, 0, &value, &cfa);
        if (!value
          || !CFSetContainsValue(*(CFSetRef *)(a1 + 48), value)
          || !cfa
          || !CFSetContainsValue(*(CFSetRef *)(a1 + 48), cfa))
        {
          objc_msgSend(*(id *)(a1 + 32), "addObject:", cf);
        }
        v7 = value;
        if (value)
        {
          value = 0;
          CFRelease(v7);
        }
        v6 = cfa;
        if (cfa)
        {
          cfa = 0;
          goto LABEL_21;
        }
      }
      else if ((_DWORD)KeyType == 4)
      {
        value = 0;
        SOSKVSKeyParse(KeyType, cf, 0, 0, 0, 0, &value, 0);
        if (!value
          || !CFSetContainsValue(*(CFSetRef *)(a1 + 40), value)
          && (!value || !CFSetContainsValue(*(CFSetRef *)(a1 + 48), value)))
        {
          objc_msgSend(*(id *)(a1 + 32), "addObject:", cf);
        }
        v6 = value;
        if (value)
        {
          value = 0;
LABEL_21:
          CFRelease(v6);
        }
      }
    }
  }
}

uint64_t sub_1001D0D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_1001D0D50(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  const void *v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  BOOL v22;
  const void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  const char *v28;
  void *v29;
  void *v30;
  const void *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id obj;
  id v43;
  id v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[3];
  _QWORD v51[3];
  uint8_t v52[4];
  void *v53;
  __int16 v54;
  void *v55;
  uint8_t buf[4];
  id v57;

  v5 = a1;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CKKSViewManager manager](CKKSViewManager, "manager"));
  v44 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "currentTLKsFilteredByPolicy:error:", a3, &v44));
  v9 = v44;

  if (v9)
  {
    v10 = sub_10000EF14("piggy");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v57 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "unable to fetch TLKs: %@", buf, 0xCu);
    }

  }
  else
  {
    v34 = 0;
    v37 = v5;
    v40 = v5;
    v35 = v8;
    v12 = v8;
    v36 = v6;
    v39 = v6;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    obj = v12;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v46, buf, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v47;
      v16 = "piggy";
      v38 = *(_QWORD *)v47;
      do
      {
        v17 = 0;
        v41 = v14;
        do
        {
          if (*(_QWORD *)v47 != v15)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)v17);
          v45 = 0;
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "ensureKeyLoadedFromKeychain:", &v45, v34));
          v20 = v45;
          v21 = v20;
          if (v19)
            v22 = v20 == 0;
          else
            v22 = 0;
          if (v22)
          {
            v43 = v20;
            v50[0] = kSecValueData;
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "keyMaterial"));
            v51[0] = v25;
            v50[1] = kSecAttrServer;
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "zoneID"));
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "zoneName"));
            v51[1] = v27;
            v50[2] = kSecAttrAccount;
            v28 = v16;
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "uuid"));
            v51[2] = v29;
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 3));
            v24 = objc_msgSend(v30, "mutableCopy");

            v16 = v28;
            -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("auth"));
            v31 = sub_10000EF14(v28);
            v32 = objc_claimAutoreleasedReturnValue(v31);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v52 = 138412290;
              v53 = v18;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "sending TLK %@", v52, 0xCu);
            }

            objc_msgSend(v40, "addObject:", v24);
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "uuid"));
            objc_msgSend(v39, "addObject:", v33);

            v15 = v38;
            v14 = v41;
            v21 = v43;
          }
          else
          {
            v23 = sub_10000EF14(v16);
            v24 = objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v52 = 138412546;
              v53 = v18;
              v54 = 2112;
              v55 = v21;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Failed to load TLK %@: %@", v52, 0x16u);
            }
          }

          v17 = (char *)v17 + 1;
        }
        while (v14 != v17);
        v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, buf, 16);
      }
      while (v14);
    }

    v6 = v36;
    v5 = v37;
    v9 = v34;
    v8 = v35;
  }

}

void sub_1001D118C(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  char v11;

  v5 = a1;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001D1234;
  v8[3] = &unk_1002EB760;
  v11 = 0;
  v9 = a3;
  v10 = v5;
  v6 = v5;
  v7 = v9;
  objc_msgSend(a2, "enumerateObjectsUsingBlock:", v8);

}

void sub_1001D1234(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  BOOL v8;
  BOOL v9;
  void *v10;
  id v11;
  void *v12;
  const void *v13;
  NSObject *v14;
  void *v15;
  id v16;
  void *v17;
  _QWORD v18[3];
  _QWORD v19[3];
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", kSecAttrPath));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", kSecAttrAccount));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kSecAttrServer));
  v7 = (void *)v6;
  if (v4)
    v8 = v5 == 0;
  else
    v8 = 1;
  v9 = v8 || v6 == 0;
  if (!v9
    && ((objc_msgSend(v4, "isEqualToString:", v5) & 1) != 0 || *(_BYTE *)(a1 + 48))
    && (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v5) & 1) == 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kSecValueData));
    v11 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedData:options:", v10, 0);
    if (v11)
    {
      v12 = v11;
      v17 = v10;
      v13 = sub_10000EF14("piggy");
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v21 = v7;
        v22 = 2112;
        v23 = v5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "fetched TLK %@ with name %@", buf, 0x16u);
      }

      v18[0] = kSecValueData;
      v18[1] = kSecAttrServer;
      v19[0] = v12;
      v19[1] = v7;
      v18[2] = kSecAttrAccount;
      v19[2] = v5;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 3));
      v16 = objc_msgSend(v15, "mutableCopy");

      if (*(_BYTE *)(a1 + 48))
        objc_msgSend(v16, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("auth"));
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v16);
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

    }
    else
    {

    }
  }

}

int64_t sub_1001D1480(id a1, NSDictionary *a2, NSDictionary *a3)
{
  NSDictionary *v4;
  NSDictionary *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;
  BOOL v13;
  int64_t v14;

  v4 = a3;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", kSecAttrServer));
  v7 = sub_1001D1574(v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("auth")));
  if (v8)
    v7 |= 0x3E8u;
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", kSecAttrServer));
  v10 = sub_1001D1574(v9);

  v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", CFSTR("auth")));
  v12 = v10 | 0x3E8;
  if (!v11)
    v12 = v10;
  v13 = v7 > v12;
  v14 = v7 < v12;
  if (v13)
    return -1;
  else
    return v14;
}

uint64_t sub_1001D1574(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Manatee")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Engram")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AutoUnlock")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Health")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t sub_1001D1608(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Manatee")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Engram")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AutoUnlock")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Health")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t sub_1001D169C(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;

  v5 = a1;
  v6 = objc_msgSend(v5, "length");
  v7 = objc_msgSend(v5, "length");
  v8 = objc_retainAutorelease(v5);
  v9 = objc_msgSend(v8, "bytes");

  v10 = ccder_encode_body(v7, v9, a2, a3);
  return ccder_encode_tl(4, v6, a2, v10);
}

uint64_t sub_1001D1724(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = a1;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  v7 = a3;
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v15;
    v7 = a3;
    while (2)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v5);
        v11 = ccder_encode_body(objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v10), "length", (_QWORD)v14), objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v10)), "bytes"), a2, v7);
        if (!v11)
        {

          v12 = 0;
          goto LABEL_11;
        }
        v7 = v11;
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v8)
        continue;
      break;
    }
  }

  v12 = ccder_encode_constructed_tl(0x2000000000000010, a3, a2, v7);
LABEL_11:

  return v12;
}

void sub_1001D188C(uint64_t a1, const void *a2)
{
  if (SOSPeerInfoIsCloudIdentity(a2))
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
}

void sub_1001D18CC(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  int v6;
  BOOL v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;

  v4 = sub_10000EF14("accountLogState");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 32))
      v6 = 73;
    else
      v6 = 105;
    v7 = *(_BYTE *)(a1 + 33) == 0;
    v9[0] = 67109634;
    if (v7)
      v8 = 98;
    else
      v8 = 66;
    v9[1] = v6;
    v10 = 1024;
    v11 = v8;
    v12 = 2112;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sync: %c%c PeerViews: %@", (uint8_t *)v9, 0x18u);
  }

}

void sub_1001D19C0(id a1, __CFString *a2)
{
  const void *v3;
  NSObject *v4;
  int v5;
  __CFString *v6;

  v3 = sub_10000EF14("accountLogState");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "outstanding views: %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1001D1A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int IsSessionInAwaitingState;
  const void *v7;
  NSObject *v8;
  _BOOL4 v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  const void *v30;
  NSObject *v31;
  unsigned int v32;
  void *v33;
  id v34;
  id v35;
  __CFDictionary *v36;
  __CFDictionary *v37;
  CFTypeID v38;
  const void *v39;
  NSObject *v40;
  const char *v41;
  NSObject *v42;
  uint32_t v43;
  const void *v44;
  CFTypeRef v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  const void *v54;
  const void *v55;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v58;

  IsSessionInAwaitingState = SecOTRSessionIsSessionInAwaitingState(*(_QWORD *)(a3 + 24));
  v7 = sub_10000EF14("otrtimer");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (IsSessionInAwaitingState)
  {
    if (v9)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "coder is in awaiting state, restarting coder", buf, 2u);
    }

    v55 = 0;
    sub_1001E73D8(a3);
    if (sub_1001E7150(a3, &v55) == 3)
    {
      v10 = sub_10000EF14("SecError");
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v58 = v55;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Attempt to recover coder failed to restart: %@", buf, 0xCu);
      }

    }
    else
    {
      v12 = sub_10000EF14("otrtimer");
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "coder restarted!", buf, 2u);
      }

      v14 = *(_QWORD *)(a1 + 40);
      if (-[OTSOSActualAdapter sosEnabled]_0())
        *(_BYTE *)(v14 + 105) = 1;
      *(_BYTE *)(a2 + 48) = 1;
      sub_10020D45C(*(_QWORD *)(a2 + 16), v15, v16, v17, v18, v19, v20, v21);
    }
    v22 = *(void **)(a1 + 32);
    v23 = *(id *)(a2 + 16);
    v24 = v22;
    v25 = sub_1001CA91C(v24, (uint64_t)CFSTR("NegotiationRetryCount"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    if (!v26)
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKey:", v23, v55));
    v28 = objc_alloc((Class)NSNumber);
    if (v27)
    {
      v29 = objc_msgSend(v28, "initWithInt:", objc_msgSend(v27, "intValue") + 1);
      objc_msgSend(v26, "setObject:forKey:", v29, v23);
      v30 = sub_10000EF14("otr");
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v32 = objc_msgSend(v29, "intValue");
        *(_DWORD *)buf = 67109120;
        LODWORD(v58) = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "OTR negotiation retry count: %d", buf, 8u);
      }

    }
    else
    {
      v27 = objc_msgSend(v28, "initWithInt:", 1);
      objc_msgSend(v26, "setObject:forKey:", v27, v23);
    }
    sub_1001E6A88(v24, (uint64_t)CFSTR("NegotiationRetryCount"), (uint64_t)v26, 0);

    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 104), *(const void **)(a2 + 16));
    v33 = *(void **)(a2 + 16);
    v34 = *(id *)(a1 + 32);
    v35 = v33;
    cf = 0;
    v36 = (__CFDictionary *)sub_1001CA91C(v34, (uint64_t)CFSTR("PeerNegotiationTimeouts"));
    if (!v36 || (v37 = v36, v38 = CFGetTypeID(v36), v38 != CFDictionaryGetTypeID()))
    {
      v44 = sub_10000EF14("otrtimer");
      v40 = objc_claimAutoreleasedReturnValue(v44);
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        goto LABEL_33;
      *(_WORD *)buf = 0;
      v41 = "timeout dictionary doesn't exist";
      v42 = v40;
      v43 = 2;
      goto LABEL_32;
    }
    if (CFDictionaryGetValue(v37, v35))
    {
      CFDictionaryRemoveValue(v37, v35);
      sub_1001E6A88(v34, (uint64_t)CFSTR("PeerNegotiationTimeouts"), (uint64_t)v37, &cf);
      if (!cf)
      {
LABEL_35:

        v46 = *(void **)(a1 + 32);
        v47 = *(void **)(a2 + 16);
        v48 = v46;
        v49 = v47;
        v50 = sub_1001CA91C(v48, (uint64_t)CFSTR("kSOSAccountPeerLastSentTimestamp"));
        v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        v52 = v51;
        if (v51)
        {
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKey:", v49));
          if (v53)
          {
            objc_msgSend(v52, "removeObjectForKey:", v49);
            sub_1001E6A88(v48, (uint64_t)CFSTR("kSOSAccountPeerLastSentTimestamp"), (uint64_t)v52, 0);
          }

        }
        return;
      }
      v39 = sub_10000EF14("otrtimer");
      v40 = objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v58 = cf;
        v41 = "SOSAccountSetValue threw an error for key kSOSAccountPeerNegotiationTimeouts: %@";
LABEL_29:
        v42 = v40;
        v43 = 12;
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, v41, buf, v43);
      }
    }
    else
    {
      v54 = sub_10000EF14("otrtimer");
      v40 = objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v58 = v35;
        v41 = "timeout for peerid: %@, doesn't exist";
        goto LABEL_29;
      }
    }
LABEL_33:

    v45 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v45);
    }
    goto LABEL_35;
  }
  if (v9)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "time fired but out of negotiation! Not restarting coder", buf, 2u);
  }

}

void sub_1001D1FAC(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  const void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  BOOL v13;
  const void *v14;
  NSObject *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;

  v4 = *(id *)(a2 + 16);
  v5 = *(id *)(a2 + 96);
  v20 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accessGroupToNextMessageToSend"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", *(_QWORD *)(a1 + 32)));

  if (v7)
  {
    v8 = sub_10000EF14("ratelimit");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v22 = v7;
      v23 = 2112;
      v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "SOSPeerRateLimiter timer went off! sending:%@ \n to peer:%@", buf, 0x16u);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "kvs_message_transport"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "kvs_message_transport"));
    v12 = objc_msgSend(v10, "SOSTransportMessageSendMessage:id:messageToSend:err:", v11, v4, v7, &v20);

    if (v12)
      v13 = v20 == 0;
    else
      v13 = 0;
    if (!v13)
    {
      v14 = sub_10000EF14("ratelimit");
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v22 = v20;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "could not send message: %@", buf, 0xCu);
      }

    }
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accessGroupRateLimitState"));
  v17 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithLong:", 1);
  objc_msgSend(v16, "setObject:forKey:", v17, *(_QWORD *)(a1 + 32));

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accessGroupToTimer"));
  objc_msgSend(v18, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accessGroupToNextMessageToSend"));
  objc_msgSend(v19, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

}

CFDictionaryRef sub_1001D2200(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  return sub_10012E96C(kCFAllocatorDefault, a2, a3, a4, a5, a6, a7, a8, (uint64_t)kSecClass, (uint64_t)kSecClassGenericPassword);
}

uint64_t sub_1001D22C8(void *a1, uint64_t a2, const void **a3, void *a4)
{
  id v7;
  id v8;
  CFStringRef v9;
  id v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;

  v7 = a1;
  v8 = a4;
  v9 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@-tomb"), a2);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001D23AC;
  v13[3] = &unk_1002EC3F0;
  v10 = v7;
  v14 = v10;
  v11 = sub_1001DAF90(v10, (uint64_t)v9, a3, v13, v8);

  if (v9)
    CFRelease(v9);

  return v11;
}

uint64_t sub_1001D23AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerID"));
  v6 = sub_1001E91F8(a2, (uint64_t)v5, 1u, a3);

  return v6;
}

uint64_t sub_1001D2404(void *a1, uint64_t a2)
{
  id v3;
  uint64_t MutableForSOSPeerInfosByID;
  void *v5;
  id v6;
  _QWORD v8[6];

  v3 = a1;
  MutableForSOSPeerInfosByID = CFSetCreateMutableForSOSPeerInfosByID(kCFAllocatorDefault);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
  v6 = objc_msgSend(v5, "getCircle:", 0);

  if (v6)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001D24C8;
    v8[3] = &unk_1002ECBC8;
    v8[4] = a2;
    v8[5] = MutableForSOSPeerInfosByID;
    SOSCircleForEachValidPeer(v6, objc_msgSend(v3, "accountKey"), v8);
  }

  return MutableForSOSPeerInfosByID;
}

void sub_1001D24C8(uint64_t a1, const void *a2)
{
  if (sub_1001D250C((uint64_t)a2, *(CFTypeRef *)(a1 + 32)))
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), a2);
}

uint64_t sub_1001D250C(uint64_t a1, CFTypeRef cf2)
{
  if (cf2 && kSOSViewKeychainV0)
  {
    if (CFEqual(kSOSViewKeychainV0, cf2))
      return 0;
  }
  else if ((CFTypeRef)kSOSViewKeychainV0 == cf2)
  {
    return 0;
  }
  if (SOSPeerInfoHasBackupKey(a1))
    return SOSPeerInfoIsViewPermitted(a1, cf2);
  return 0;
}

uint64_t sub_1001D257C(void *a1, const void *a2, uint64_t a3, const void **a4)
{
  id v7;
  __CFSet *Mutable;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  NSObject *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  NSObject *v16;
  const __CFString *v17;
  const void *v18;
  NSObject *v19;
  const __CFString *v20;
  _QWORD v22[4];
  NSObject *v23;
  const void *v24;
  __CFSet *v25;
  uint64_t v26;
  uint8_t buf[4];
  const void *v28;
  __int16 v29;
  const __CFString *v30;

  v7 = a1;
  Mutable = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  if (sub_1000326EC((uint64_t)Mutable, a4, CFSTR("No backup view set created")))
  {
    CFSetAddValue(Mutable, a2);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1001D2800;
    v22[3] = &unk_1002EB930;
    v23 = v7;
    v24 = a2;
    v25 = Mutable;
    v26 = a3;
    v9 = sub_1001D22C8(v23, (uint64_t)a2, a4, v22);
    v10 = v9;
    if (a4 && (_DWORD)v9 && *a4)
    {
      v11 = sub_10000EF14("SecError");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *a4;
        *(_DWORD *)buf = 138412290;
        v28 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Got Success and Error (dropping error): %@", buf, 0xCu);
      }

      v14 = *a4;
      if (*a4)
      {
        *a4 = 0;
        CFRelease(v14);
      }
    }
    if ((v10 & 1) == 0)
    {
      v15 = sub_10000EF14("backupring");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        if (a4)
          v17 = (const __CFString *)*a4;
        else
          v17 = CFSTR("No error space.");
        *(_DWORD *)buf = 138412546;
        v28 = a2;
        v29 = 2112;
        v30 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Got error setting keybag for backup view '%@': %@", buf, 0x16u);
      }

    }
    if (Mutable)
      CFRelease(Mutable);
    v19 = v23;
  }
  else
  {
    v18 = sub_10000EF14("backupring");
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (a4)
        v20 = (const __CFString *)*a4;
      else
        v20 = CFSTR("No error space.");
      *(_DWORD *)buf = 138412546;
      v28 = a2;
      v29 = 2112;
      v30 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Got error setting keybag for backup view '%@': %@", buf, 0x16u);
    }
    v10 = 0;
  }

  return v10;
}

_QWORD *sub_1001D2800(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  const __CFSet *v7;
  CFMutableSetRef Mutable;
  int v9;
  _QWORD *v10;
  _QWORD context[5];

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trust"));
  v7 = (const __CFSet *)objc_msgSend(v6, "copyPeerSetForView:", *(_QWORD *)(a1 + 40));

  Mutable = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  sub_100214928((uint64_t)a2, Mutable);
  context[0] = _NSConcreteStackBlock;
  context[1] = 0x40000000;
  context[2] = sub_100214A40;
  context[3] = &unk_1002ED838;
  context[4] = a2;
  CFSetApplyFunction(v7, (CFSetApplierFunction)sub_1002146DC, context);
  v9 = sub_1001E952C(a2, (uint64_t)objc_msgSend(*(id *)(a1 + 32), "fullPeerInfo"), *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), a3);
  v10 = 0;
  if (a2 && v9)
  {
    CFRetain(a2);
    v10 = a2;
  }
  if (v7)
    CFRelease(v7);
  if (Mutable)
    CFRelease(Mutable);
  return v10;
}

uint64_t sub_1001D2914(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1001D2928(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  CFStringRef v5;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      v5 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@-tomb"), cf);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      if (v5)
        CFRelease(v5);
    }
  }
}

void sub_1001D29C4(void *a1, void *a2)
{
  id v3;
  const __CFSet *PermittedViews;
  __CFSet *MutableCopy;
  id context;

  context = a2;
  v3 = objc_msgSend(a1, "peerInfo");
  if (v3)
  {
    PermittedViews = (const __CFSet *)SOSPeerInfoGetPermittedViews(v3);
    MutableCopy = CFSetCreateMutableCopy(kCFAllocatorDefault, 0, PermittedViews);
    CFSetRemoveValue(MutableCopy, kSOSViewKeychainV0);
    CFSetApplyFunction(MutableCopy, (CFSetApplierFunction)sub_1001D2914, context);
    if (MutableCopy)
      CFRelease(MutableCopy);
  }

}

_QWORD *sub_1001D2A54(void *a1, const void *a2, CFTypeRef *a3)
{
  id v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  CFStringRef v9;
  CFStringRef v10;
  void *v11;
  CFMutableSetRef Mutable;
  const void *MutableForSOSPeerInfosByID;
  void *v14;
  __CFSet *v15;
  const __CFData *v16;
  __CFDictionary *v17;
  const void *v18;
  _QWORD v20[6];

  v5 = a1;
  v6 = v5;
  v7 = 0;
  if (v5)
  {
    if (a2)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
      v7 = objc_msgSend(v8, "peerInfo");

      if (v7)
      {
        if (SOSPeerInfoHasBackupKey(v7)
          && SOSPeerInfoIsEnabledView(v7, a2)
          && (v9 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@-tomb"), a2)) != 0)
        {
          v10 = v9;
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "peerID"));
          v7 = (_QWORD *)sub_1001E91F8((uint64_t)v10, (uint64_t)v11, 1u, (uint64_t)a3);

          CFRelease(v10);
          Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
          MutableForSOSPeerInfosByID = (const void *)CFSetCreateMutableForSOSPeerInfosByID(kCFAllocatorDefault);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trust"));
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472;
          v20[2] = sub_1001D2D2C;
          v20[3] = &unk_1002ECBC8;
          v20[4] = Mutable;
          v20[5] = MutableForSOSPeerInfosByID;
          SOSCircleForEachBackupCapablePeerForView(objc_msgSend(v14, "trustedCircle"), objc_msgSend(v6, "accountKey"), a2, v20);

          v15 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
          CFSetAddValue(v15, a2);
          v16 = sub_1001E97E4(kCFAllocatorDefault, v6, 0);
          if (v16)
          {
            v17 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            CFDictionaryAddValue(v17, bskbRkbgPrefix, v16);
            v18 = (const void *)SOSBackupSliceKeyBagCreateWithAdditionalKeys(kCFAllocatorDefault, MutableForSOSPeerInfosByID, v17, a3);
            if (v17)
              CFRelease(v17);
          }
          else
          {
            v18 = (const void *)SOSBackupSliceKeyBagCreate(kCFAllocatorDefault, MutableForSOSPeerInfosByID, a3);
          }
          if (v18)
          {
            sub_100214928((uint64_t)v7, Mutable);
            sub_1001E952C(v7, (uint64_t)objc_msgSend(v6, "fullPeerInfo"), v15, (uint64_t)v18, (uint64_t)a3);
            sub_1001D4834((uint64_t)v7, (uint64_t)objc_msgSend(v6, "fullPeerInfo"), v15, a3);
          }
          else if (v7)
          {
            CFRelease(v7);
            v7 = 0;
          }
          if (v15)
            CFRelease(v15);
          if (Mutable)
            CFRelease(Mutable);
          if (MutableForSOSPeerInfosByID)
            CFRelease(MutableForSOSPeerInfosByID);
          if (v18)
            CFRelease(v18);
          if (v16)
            CFRelease(v16);
        }
        else
        {
          v7 = 0;
        }
      }
    }
  }

  return v7;
}

void sub_1001D2D2C(uint64_t a1, const void *a2)
{
  __CFSet *v4;
  const void *PeerID;

  v4 = *(__CFSet **)(a1 + 32);
  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  CFSetAddValue(v4, PeerID);
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), a2);
}

void sub_1001D2D74(void *a1)
{
  id v1;
  const void *v2;
  NSObject *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  uint8_t buf[16];

  v1 = a1;
  v2 = sub_10000EF14("backup");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating Backup Rings", buf, 2u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001D2E50;
  v5[3] = &unk_1002EB868;
  v6 = v1;
  v4 = v1;
  sub_1001D29C4(v4, v5);
  objc_msgSend(v4, "setPublicKeyStatus:forKey:", 2, 1);
  objc_msgSend(v4, "setCircle_rings_retirements_need_attention:", 1);

}

void sub_1001D2E50(uint64_t a1, uint64_t a2)
{
  void *v3;
  const void *v4;
  NSObject *v5;
  CFTypeRef v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v12;

  cf = 0;
  v3 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001D2F68;
  v7[3] = &unk_1002EB840;
  v8 = v3;
  v9 = a2;
  sub_1001D22C8(v8, a2, &cf, v7);
  if (cf)
  {
    v4 = sub_10000EF14("ring");
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v12 = cf;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error during SOSAccountProcessBackupRings (%@)", buf, 0xCu);
    }

    v6 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v6);
    }
  }

}

_QWORD *sub_1001D2F68(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return sub_1001D2A54(*(void **)(a1 + 32), *(const void **)(a1 + 40), a3);
}

void sub_1001D2F74(uint64_t a1, const void *a2)
{
  __CFSet *v4;
  const void *PeerID;

  v4 = *(__CFSet **)(a1 + 32);
  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  CFSetAddValue(v4, PeerID);
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), a2);
}

uint64_t sub_1001D2FBC(void *a1, const __CFData *a2, uint64_t a3)
{
  id v5;
  CFDataRef Copy;
  void *v7;
  uint64_t v8;
  const void *v9;
  NSObject *v10;
  uint8_t v12[16];
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v5 = a1;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = sub_1001D3170;
  v18 = sub_1001D3180;
  v19 = (id)0xAAAAAAAAAAAAAAAALL;
  v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  if (a2)
  {
    Copy = CFDataCreateCopy(kCFAllocatorDefault, a2);
    objc_msgSend((id)v15[5], "setBackup_key:", Copy);

  }
  else
  {
    objc_msgSend((id)v15[5], "setBackup_key:", 0);
  }
  v7 = (void *)v15[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001D3188;
  v13[3] = &unk_1002EB890;
  v13[4] = &v14;
  v13[5] = a2;
  v8 = sub_1001D9488(v7, (uint64_t)CFSTR("Backup public key"), a3, v13);
  if ((_DWORD)v8)
  {
    objc_msgSend((id)v15[5], "setPublicKeyStatus:forKey:", 1, 1);
    v9 = sub_10000EF14("devRecovery");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Processing backup rings since we got a BackupKey", v12, 2u);
    }

    sub_1001D2D74((void *)v15[5]);
  }
  _Block_object_dispose(&v14, 8);

  return v8;
}

void sub_1001D3154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D3170(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001D3180(uint64_t a1)
{

}

uint64_t sub_1001D3188(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  int v13;
  const void *v14;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "backup_key"));

  if (v4)
  {
    v5 = (const void *)SOSCopyIDOfDataBufferWithLength(*(_QWORD *)(a1 + 40), 8, 0);
    v6 = sub_10000EF14("backup");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 138412290;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting peerInfo backupKey to %@", (uint8_t *)&v13, 0xCu);
    }

    if (v5)
      CFRelease(v5);
    SOSPeerInfoV2DictionarySetValue(a2, sBackupKeyKey, *(_QWORD *)(a1 + 40));
  }
  else
  {
    v8 = sub_10000EF14("backup");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting peerInfo backupKey to NULL", (uint8_t *)&v13, 2u);
    }

    SOSPeerInfoV2DictionaryRemoveValue(a2, sBackupKeyKey);
  }
  v10 = sub_10000EF14("backup");
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Changed BackupKey for PeerInfo", (uint8_t *)&v13, 2u);
  }

  return 1;
}

void sub_1001D3348(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
}

uint64_t sub_1001D3350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t sub_1001D3368(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = sub_1001D257C(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 48), *(const void ***)(a1 + 56));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v4 + 24))
    v5 = result;
  else
    v5 = 0;
  *(_BYTE *)(v4 + 24) = v5;
  return result;
}

void sub_1001D33A8(uint64_t a1, const void *a2)
{
  const __CFSet *v4;
  uint64_t *v5;
  CFMutableArrayRef Mutable;
  void *v7;
  const void **v8;
  id v9;
  _QWORD *v10;
  void ***v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t, const void **);
  void *v17;
  id v18;
  const void *v19;
  void **context;
  uint64_t v21;
  void (*v22)(void ***, const void *);
  void *v23;
  uint64_t *v24;
  CFMutableArrayRef v25;
  const void **v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  if (sub_1001D250C(*(_QWORD *)(a1 + 48), a2))
  {
    v4 = (const __CFSet *)sub_1001D2404(*(void **)(a1 + 32), (uint64_t)a2);
    v5 = *(uint64_t **)(a1 + 56);
    Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    context = _NSConcreteStackBlock;
    v21 = 3221225472;
    v22 = (void (*)(void ***, const void *))sub_1001D35C4;
    v23 = &unk_1002ECBA8;
    v24 = v5;
    v25 = Mutable;
    CFSetApplyFunction(v4, (CFSetApplierFunction)sub_1001D2914, &context);
    v7 = *(void **)(a1 + 32);
    v8 = *(const void ***)(a1 + 64);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v16 = sub_1001D363C;
    v17 = &unk_1002EB7F0;
    v18 = v7;
    v19 = a2;
    v9 = v18;
    v10 = v15;
    v27 = 0;
    v28 = &v27;
    v29 = 0x2020000000;
    v30 = 0;
    context = _NSConcreteStackBlock;
    v21 = 3221225472;
    v22 = (void (*)(void ***, const void *))sub_1001D3650;
    v23 = &unk_1002EB908;
    v24 = &v27;
    v25 = Mutable;
    v26 = v8;
    v11 = &context;
    v12 = (const void *)sub_1001D2404(v9, (uint64_t)a2);
    v22(v11, v12);

    if (v12)
      CFRelease(v12);
    v13 = v28[3];
    if (v13)
    {
      v16((uint64_t)v10, v28[3], v8);
      v14 = (const void *)v28[3];
      if (v14)
      {
        v28[3] = 0;
        CFRelease(v14);
      }
    }
    _Block_object_dispose(&v27, 8);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v13 != 0;
    if (Mutable)
      CFRelease(Mutable);
    if (v4)
      CFRelease(v4);

  }
}

void sub_1001D35A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001D35C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const __CFArray *v3;
  _QWORD v4[6];
  CFRange v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001D3868;
  v4[3] = &unk_1002ECBA8;
  v3 = *(const __CFArray **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4[4] = a2;
  v4[5] = v2;
  v5.length = CFArrayGetCount(v3);
  v5.location = 0;
  CFArrayApplyFunction(v3, v5, (CFArrayApplierFunction)sub_1001D2914, v4);
}

uint64_t sub_1001D363C(uint64_t a1, uint64_t a2, const void **a3)
{
  return sub_1001D257C(*(void **)(a1 + 32), *(const void **)(a1 + 40), a2, a3);
}

void sub_1001D3650(_QWORD *a1, CFSetRef theSet)
{
  CFIndex Count;
  CFMutableSetRef MutableCopy;
  const __CFArray *v6;
  _QWORD context[5];
  CFRange v8;

  Count = CFSetGetCount(theSet);
  MutableCopy = CFSetCreateMutableCopy(kCFAllocatorDefault, Count, theSet);
  v6 = (const __CFArray *)a1[5];
  context[0] = _NSConcreteStackBlock;
  context[1] = 3221225472;
  context[2] = sub_1001D3728;
  context[3] = &unk_1002EDB28;
  context[4] = MutableCopy;
  v8.length = CFArrayGetCount(v6);
  v8.location = 0;
  CFArrayApplyFunction(v6, v8, (CFArrayApplierFunction)sub_1001D2914, context);
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = SOSBackupSliceKeyBagCreate(kCFAllocatorDefault, MutableCopy, a1[6]);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_1001D3728(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t PeerID;
  const __CFSet *v6;
  const void *v7;
  NSObject *v8;
  _QWORD v9[6];
  uint8_t buf[16];

  if (cf && (v4 = CFGetTypeID(cf), v4 == SOSPeerInfoGetTypeID()))
  {
    PeerID = SOSPeerInfoGetPeerID(cf);
    v6 = *(const __CFSet **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001D3814;
    v9[3] = &unk_1002ECBA8;
    v9[4] = PeerID;
    v9[5] = v6;
    CFSetApplyFunction(v6, (CFSetApplierFunction)sub_1001D2914, v9);
  }
  else
  {
    v7 = sub_10000EF14("SecError");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Peer list contains a non-peerInfo element", buf, 2u);
    }

  }
}

void sub_1001D3814(uint64_t a1, const void *a2)
{
  const __CFString *PeerID;
  const __CFString *v5;

  PeerID = (const __CFString *)SOSPeerInfoGetPeerID(a2);
  if (PeerID)
  {
    v5 = *(const __CFString **)(a1 + 32);
    if (v5)
    {
      if (CFStringCompare(PeerID, v5, 0) == kCFCompareEqualTo)
        CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 40), a2);
    }
  }
}

void sub_1001D3868(uint64_t a1, uint64_t a2)
{
  const __CFString *PeerID;
  const __CFString *v4;

  PeerID = (const __CFString *)SOSPeerInfoGetPeerID(a2);
  v4 = (const __CFString *)SOSPeerInfoGetPeerID(*(_QWORD *)(a1 + 32));
  if (PeerID && v4 && CFStringCompare(v4, PeerID, 0) == kCFCompareEqualTo)
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), *(const void **)(a1 + 32));
}

void sub_1001D38C0(void *a1)
{
  id v1;
  void *v2;
  const void *v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  int v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;
  const __CFData *v14;
  char v15;
  const void *v16;
  NSObject *v17;
  const void *v18;
  NSObject *v19;
  uint8_t v20[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "account"));
  if ((objc_msgSend(v2, "isInCircle:", 0) & 1) == 0)
  {
    v18 = sub_10000EF14("backup");
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Not currently in circle", v20, 2u);
    }

    goto LABEL_22;
  }
  v3 = (const void *)SOSPeerInfoCopyBackupKey(objc_msgSend(v2, "peerInfo"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "backup_key"));

  if (!v4)
  {
    if (!v3)
      goto LABEL_22;
    sub_1001D2FBC(v1, 0, 0);
    goto LABEL_21;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "backup_key"));
  v6 = SOSBSKBIsGoodBackupPublic(v5, 0);

  if ((v6 & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "backup_key"));
    v8 = v7;
    if (!v3 || !v7)
    {

      if (v3 == v8)
        goto LABEL_20;
      goto LABEL_14;
    }
    v9 = CFEqual(v3, v7);

    if (!v9)
    {
LABEL_14:
      v12 = sub_10000EF14("backupkey");
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Account backup key and peerinforef backup key don't match.  Using account backup key.", v20, 2u);
      }

      v14 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "backup_key"));
      v15 = sub_1001D2FBC(v1, v14, 0);

      if ((v15 & 1) == 0)
      {
        v16 = sub_10000EF14("backupkey");
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v20 = 138412290;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Failed to setup backup public key in peerInfo from account: %@", v20, 0xCu);
        }

      }
      goto LABEL_20;
    }
LABEL_21:
    CFRelease(v3);
    goto LABEL_22;
  }
  v10 = sub_10000EF14("backupkey");
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v20 = 138412290;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "account backup key isn't valid: %@", v20, 0xCu);
  }

  sub_1001D2FBC(v1, 0, 0);
LABEL_20:
  if (v3)
    goto LABEL_21;
LABEL_22:

}

void sub_1001D3B78(uint64_t a1, CFDataRef theData)
{
  const __CFData *v2;
  const UInt8 *BytePtr;
  CFIndex Length;
  const UInt8 *v6;
  _BYTE *v7;
  const __CFData *v8;
  _BYTE *v9;
  void *v10;
  CFIndex v11;
  __CFString *Mutable;
  const UInt8 *v13;
  CFIndex v14;
  unsigned int v15;
  const void *v16;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  const UInt8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE buf[24];
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v2 = theData;
  if (theData)
  {
    v23 = 0;
    v24 = &v23;
    v25 = 0x2020000000;
    v26 = 0;
    v21 = 0;
    v22 = 0;
    v19 = 0;
    v20 = 0;
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(v2);
    if ((const UInt8 *)sub_1001D3E60(&v22, (uint64_t *)&v21, &v20, &v19, (uint64_t)BytePtr, (uint64_t)&BytePtr[Length]) == &BytePtr[Length])
    {
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1001D3FA0;
      v28 = &unk_1002EB958;
      v6 = v21;
      v29 = &v23;
      v30 = v20;
      v31 = v19;
      v7 = buf;
      v8 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v6, 4, kCFAllocatorNull);
      v9 = v7;
      v10 = v9;
      if (v8)
      {
        v11 = CFDataGetLength(v8);
        Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2 * v11);
        v13 = CFDataGetBytePtr(v8);
        v14 = CFDataGetLength(v8);
        if (v14 >= 1)
        {
          do
          {
            v15 = *v13++;
            CFStringAppendFormat(Mutable, 0, CFSTR("%02X"), v15);
            --v14;
          }
          while (v14);
        }
        (*(void (**)(void *, __CFString *))&buf[16])(v10, Mutable);
        CFRelease(Mutable);

        CFRelease(v8);
      }
      else
      {
        (*(void (**)(_BYTE *, const __CFString *))&buf[16])(v9, CFSTR("(null)"));
        CFRelease(CFSTR("(null)"));

      }
      v2 = (const __CFData *)v24[3];
    }
    else
    {
      v2 = 0;
    }
    _Block_object_dispose(&v23, 8);
  }
  v16 = sub_10000EF14("circleOps");
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v18)
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%@ %@]", buf, 0x16u);
    }

    CFRelease(v2);
  }
  else
  {
    if (v18)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "failed to decode pbkdf2 params", buf, 2u);
    }

  }
}

void sub_1001D3E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

size_t sub_1001D3E60(_QWORD *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  size_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v11 = ccder_decode_constructed_tl(0x2000000000000010, &v24, a5, a6);
  if (v24 == a6)
    v12 = v11;
  else
    v12 = 0;
  v23 = 0;
  v13 = ccder_decode_tl(4, &v23, v12, v24);
  v21 = 0;
  v22 = 0;
  v14 = ccder_decode_uint64(&v22, v13 + v23, v24);
  if (HIDWORD(v22))
    v15 = 0;
  else
    v15 = v14;
  v16 = ccder_decode_uint64(&v21, v15, v24);
  if (HIDWORD(v21))
    v17 = 0;
  else
    v17 = v16;
  v25 = 0;
  v18 = (const void *)ccder_decode_tl(6, &v25, v17, v24);
  if (CSSMOID_PKCS5_HMAC_SHA1.Length != v25)
    return 0;
  v19 = v18;
  if (memcmp(CSSMOID_PKCS5_HMAC_SHA1.Data, v18, CSSMOID_PKCS5_HMAC_SHA1.Length) || !v19)
    return 0;
  if (a2)
    *a2 = v13;
  if (a1)
    *a1 = v23;
  result = (size_t)v19 + CSSMOID_PKCS5_HMAC_SHA1.Length;
  if (a3)
    *a3 = v22;
  if (a4)
    *a4 = v21;
  return result;
}

CFStringRef sub_1001D3FA0(_QWORD *a1, uint64_t a2)
{
  CFStringRef result;

  result = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("<Params: iter: %zd, size: %zd, salt: %@>"), a1[5], a1[6], a2);
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t sub_1001D3FF8(const __CFData *a1, CFDataRef theData, uint64_t a3)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  unint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  const UInt8 *v12;
  CFIndex v13;
  uint64_t cp;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int key_deterministic;
  __int128 v25;
  _BYTE v26[4];
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v30 = 0;
  v31 = 0xAAAAAAAAAAAAAAAALL;
  v28 = 0;
  v29 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  if (!sub_1001D3E60(&v31, &v30, &v29, &v28, (uint64_t)BytePtr, (uint64_t)&BytePtr[Length]))
  {
    v9 = CFSTR("Bad paramter encoding, got: %@");
    *(_QWORD *)&v25 = theData;
    v10 = 1029;
LABEL_8:
    SOSCreateErrorWithFormat(v10, 0, a3, 0, v9);
    return 0;
  }
  v8 = v28;
  if (v28 != 256)
  {
    v9 = CFSTR("Key size not supported, requested %zd.");
    goto LABEL_7;
  }
  v8 = v31;
  if (v31 <= 3)
  {
    v9 = CFSTR("Salt length not supported, requested %zd.");
LABEL_7:
    *(_QWORD *)&v25 = v8;
    v10 = 1041;
    goto LABEL_8;
  }
  v8 = v29;
  if (v29 >> 4 <= 0xC34)
  {
    v9 = CFSTR("Too few iterations, params suggested %zd.");
    goto LABEL_7;
  }
  v12 = CFDataGetBytePtr(a1);
  v13 = CFDataGetLength(a1);
  cp = ccec_get_cp(v28);
  __chkstk_darwin(cp);
  v16 = &v26[-v15];
  v17 = 0;
  do
  {
    v18 = &v16[v17 / 8];
    *v18 = 0xAAAAAAAAAAAAAAAALL;
    v18[1] = 0xAAAAAAAAAAAAAAAALL;
    v17 += 16;
  }
  while (v15 != v17);
  sub_1001D3B78((uint64_t)CFSTR("SOSUserKeygen generating key for:"), theData);
  v20 = __chkstk_darwin(v19);
  *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v26[-32] = v21;
  v25 = v21;
  *(_OWORD *)&v26[-64] = v21;
  *(_OWORD *)&v26[-48] = v21;
  *(_OWORD *)&v26[-96] = v21;
  *(_OWORD *)&v26[-80] = v21;
  *(_OWORD *)&v26[-128] = v21;
  *(_OWORD *)&v26[-112] = v21;
  v22 = ccsha256_di(v20);
  ccpbkdf2_hmac(v22, v13, v12, v31, v30, v29, 128, &v26[-128]);
  v27 = 0;
  v23 = ccrng(&v27);
  if (v23)
  {
    key_deterministic = ccec_generate_key_deterministic(cp, 128, &v26[-128], v23, 4, v16);
    cc_clear(128, &v26[-128]);
    if (!key_deterministic)
      return sub_1001D426C(v16);
  }
  SOSCreateError(1028, CFSTR("Keygen failed"), 0, a3);
  return 0;
}

uint64_t sub_1001D426C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  const UInt8 *v5;
  CFDataRef v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  CFDictionaryRef v14;
  uint64_t v15;
  uint64_t v17;

  v2 = cczp_bitlen(*a1);
  v3 = 3 * ((unint64_t)(v2 + 7) >> 3) + 1;
  __chkstk_darwin(v2);
  v5 = (const UInt8 *)&v17 - v4;
  memset((char *)&v17 - v4, 170, v3);
  ccec_x963_export(1, v5, a1);
  v6 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v5, v3, kCFAllocatorNull);
  v14 = sub_10012E96C(kCFAllocatorDefault, v7, v8, v9, v10, v11, v12, v13, (uint64_t)kSecValueData, (uint64_t)v6);
  v15 = SecKeyCreateFromAttributeDictionary();
  CFRelease(v14);
  CFRelease(v6);
  cc_clear(v3, v5);
  return v15;
}

uint64_t sub_1001D43E0(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100214BE0(a1, 1, a3);
  v5 = v4;
  if (v4 && a2)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v4 + 16), CFSTR("LastModifier"), a2);
  return v5;
}

uint64_t sub_1001D4428(uint64_t a1, const __CFSet *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t PeerInfo;
  const void *PeerID;
  const __CFSet *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  int v21;
  const void *v22;
  int v23;
  void **context;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t *v29;
  uint64_t PermittedViews;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;

  if (a6)
  {
    if (sub_100214774(*(const __CFDictionary **)(a4 + 24), a3))
    {
      SOSCreateError(1039, CFSTR("Bad generation"), 0, a8);
      return 1;
    }
    else if (sub_100215024(a4))
    {
      return 0;
    }
    else
    {
      if (a1)
      {
        PeerInfo = SOSFullPeerInfoGetPeerInfo(a1);
        PeerID = (const void *)SOSPeerInfoGetPeerID(PeerInfo);
        v17 = (const __CFSet *)sub_100214890(a4);
        v34 = 0;
        v35 = &v34;
        v36 = 0x2020000000;
        LOBYTE(v37) = 1;
        context = _NSConcreteStackBlock;
        v26 = 3221225472;
        v27 = sub_1001D472C;
        v28 = &unk_1002EC5E8;
        v29 = &v34;
        PermittedViews = SOSPeerInfoGetPermittedViews(PeerInfo);
        CFSetApplyFunction(v17, (CFSetApplierFunction)sub_1001D4760, &context);
        v18 = *((_BYTE *)v35 + 24) != 0;
        _Block_object_dispose(&v34, 8);
        v19 = sub_10021496C(a4, PeerID);
      }
      else
      {
        v19 = 0;
        v18 = 0;
      }
      if (v18 || !v19)
        v20 = 0;
      else
        v20 = 11;
      if (!v18 || v19)
        v21 = v20;
      else
        v21 = 10;
      if (v21 == 11)
      {
        SOSCreateError(1039, CFSTR("Improper inclusion of this peer"), 0, a8);
        return 11;
      }
      else if (v21 == 10)
      {
        SOSCreateError(1039, CFSTR("Improper exclusion of this peer"), 0, a8);
        return 10;
      }
      else
      {
        v22 = sub_100214890(a4);
        if (!v22)
          return 9;
        v34 = 0;
        v35 = &v34;
        v36 = 0x2020000000;
        LOBYTE(v37) = 1;
        context = _NSConcreteStackBlock;
        v26 = 3221225472;
        v27 = sub_1001D4774;
        v28 = &unk_1002EB958;
        PermittedViews = (uint64_t)a2;
        v31 = v22;
        v29 = &v34;
        sub_100214B28(a4, (uint64_t)&context);
        v23 = *((unsigned __int8 *)v35 + 24);
        _Block_object_dispose(&v34, 8);
        if (v23)
        {
          v34 = 0;
          v35 = &v34;
          v36 = 0x2000000000;
          v37 = 4;
          context = _NSConcreteStackBlock;
          v26 = 0x40000000;
          v27 = sub_1001F1B24;
          v28 = &unk_1002EC808;
          v31 = a6;
          v32 = a8;
          v33 = a7;
          v29 = &v34;
          PermittedViews = a4;
          CFSetApplyFunction(a2, (CFSetApplierFunction)sub_1001F1C88, &context);
          v14 = *((unsigned int *)v35 + 6);
          _Block_object_dispose(&v34, 8);
        }
        else
        {
          return 9;
        }
      }
    }
  }
  else
  {
    SOSCreateError(2, CFSTR("Concordance with no public key - need to validate application"), 0, a8);
    return 3;
  }
  return v14;
}

void sub_1001D4714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D472C(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = CFSetContainsValue(*(CFSetRef *)(a1 + 40), a2);
  if (!(_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

uint64_t sub_1001D4760(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1001D4774(_QWORD *a1)
{
  uint64_t v2;
  const __CFSet *v3;
  _QWORD v4[6];

  v2 = SOSPeerInfoSetFindByID(a1[5]);
  if (v2)
  {
    v3 = (const __CFSet *)a1[6];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1001D4800;
    v4[3] = &unk_1002EC5E8;
    v4[4] = a1[4];
    v4[5] = v2;
    CFSetApplyFunction(v3, (CFSetApplierFunction)sub_1001D4760, v4);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
  }
}

uint64_t sub_1001D4800(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = SOSPeerInfoIsViewPermitted(*(_QWORD *)(a1 + 40), a2);
  if ((result & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

void sub_1001D4834(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  uint64_t PeerInfo;
  const void *PeerID;
  uint64_t v10;
  __SecKey *v11;

  PeerInfo = SOSFullPeerInfoGetPeerInfo(a2);
  PeerID = (const void *)SOSPeerInfoGetPeerID(PeerInfo);
  v10 = SOSFullPeerInfoCopyDeviceKey(a2, a4);
  v11 = (__SecKey *)v10;
  if (v10 && PeerID)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), CFSTR("LastModifier"), PeerID);
    if (sub_1002148E4(a1, a3))
      sub_10021540C(a1, v11, a4);
  }
  else if (!v10)
  {
    return;
  }
  CFRelease(v11);
}

void sub_1001D48E8(void *a1, uint64_t a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CFTypeID v5;
  void *Value;
  const void *v7;
  NSObject *v8;
  _BOOL4 v9;
  int64_t v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  NSObject *v14;
  NSObject *v15;
  dispatch_time_t v16;
  NSObject *v17;
  id v18;
  id v19;
  _QWORD v20[5];
  _QWORD handler[5];
  uint8_t buf[4];
  uint64_t v23;

  v3 = (const __CFDictionary *)sub_1001CA91C(a1, (uint64_t)CFSTR("PeerNegotiationTimeouts"));
  if (!v3 || (v4 = v3, v5 = CFGetTypeID(v3), v5 != CFDictionaryGetTypeID()))
  {
    v11 = sub_10000EF14("otrtimer");
    v8 = objc_claimAutoreleasedReturnValue(v11);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_10:

      v10 = 0;
      goto LABEL_11;
    }
    *(_WORD *)buf = 0;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "deadline value not available yet", buf, 2u);
    goto LABEL_10;
  }
  Value = (void *)CFDictionaryGetValue(v4, *(const void **)(a2 + 16));
  v7 = sub_10000EF14("otrtimer");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!Value)
  {
    if (!v9)
      goto LABEL_10;
    *(_WORD *)buf = 0;
    goto LABEL_9;
  }
  if (v9)
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v23) = objc_msgSend(Value, "intValue");
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "decided to wait %d before restarting negotiation", buf, 8u);
  }

  v10 = 1000000000 * (int)objc_msgSend(Value, "intValue");
LABEL_11:
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
    CFRetain(*(CFTypeRef *)(a2 + 16));
  v13 = sub_10000EF14("otrtimer");
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "setting timer for peer: %@", buf, 0xCu);
  }

  v15 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)&_dispatch_main_q);
  v16 = dispatch_time(0, v10);
  dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1001D4BC4;
  handler[3] = &unk_1002ED1A0;
  handler[4] = v12;
  dispatch_source_set_event_handler(v15, handler);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1001D4D04;
  v20[3] = &unk_1002ED1A0;
  v20[4] = v12;
  dispatch_source_set_cancel_handler(v15, v20);
  dispatch_resume(v15);
  v17 = v15;
  v18 = *(id *)(a2 + 104);
  if (!v18)
    v18 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v18, "setObject:forKey:", v17, *(_QWORD *)(a2 + 16));
  v19 = v18;
  *(_QWORD *)(a2 + 104) = v19;

}

void sub_1001D4BC4(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;
  NSObject *v5;
  _QWORD v6[5];
  CFTypeRef v7;
  uint8_t buf[4];
  CFTypeRef v9;

  v2 = sub_10000EF14("otrtimer");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "otrTimerFired fired", (uint8_t *)v6, 2u);
  }

  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100212140;
  v6[3] = &unk_1002ECF50;
  sub_100205C98(&v7, v6);
  if (v7)
  {
    v4 = sub_10000EF14("SecError");
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "error resetting otr negotation: %@", buf, 0xCu);
    }

  }
}

void sub_1001D4D04(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_1001D4D14(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex v8;
  __CFData *Mutable;
  id v10;
  void *v11;
  UInt8 *MutableBytePtr;
  UInt8 *v13;
  UInt8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;

  v3 = a1;
  v4 = objc_msgSend(v3, "accountKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accountKeyDerivationParameters"));
  v6 = sub_1001D5E2C(v4, a2);
  v7 = der_sizeof_data_or_null(v5, a2);
  v8 = ccder_sizeof(0x2000000000000010, v7 + v6);

  Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
  CFDataSetLength(Mutable, v8);
  v10 = objc_msgSend(v3, "accountKey");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accountKeyDerivationParameters"));
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  v13 = CFDataGetMutableBytePtr(Mutable);
  v14 = &v13[CFDataGetLength(Mutable)];
  v15 = der_encode_data_or_null(v11, a2, MutableBytePtr, v14);
  v16 = sub_1001D5E84(v10, a2, (uint64_t)MutableBytePtr, v15);
  v17 = ccder_encode_constructed_tl(0x2000000000000010, v14, MutableBytePtr, v16);

  if (v17)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "key_transport"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "key_transport"));
    v20 = objc_msgSend(v18, "SOSTransportKeyParameterPublishCloudParameters:data:err:", v19, Mutable, a2);

    if ((v20 & 1) != 0)
    {
      v21 = 1;
      if (!Mutable)
        goto LABEL_9;
      goto LABEL_8;
    }
    SOSCreateErrorWithFormat(1027, 0, a2, 0, CFSTR("update parameters key failed [%@]"));
  }
  else
  {
    SOSCreateError(1025, CFSTR("Encoding parameters failed"), 0, a2);
  }
  v21 = 0;
  if (Mutable)
LABEL_8:
    CFRelease(Mutable);
LABEL_9:

  return v21;
}

BOOL sub_1001D4EF4(_QWORD *a1, CFDataRef theData, uint64_t a3)
{
  const UInt8 *BytePtr;
  const UInt8 *v7;
  CFIndex Length;
  uint64_t v9;
  const UInt8 *v10;
  unint64_t v12;

  BytePtr = CFDataGetBytePtr(theData);
  v7 = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v12 = 0xAAAAAAAAAAAAAAAALL;
  ccder_decode_sequence_tl(&v12, BytePtr, &v7[Length]);
  sub_1001D5EF4((uint64_t)kCFAllocatorDefault, a1);
  v9 = der_decode_data_or_null(kCFAllocatorDefault, a3);
  v10 = CFDataGetBytePtr(theData);
  return v9 == (_QWORD)&v10[CFDataGetLength(theData)];
}

void sub_1001D4FD4(void *a1)
{
  void *v1;
  id v2;
  const void *v3;
  NSObject *v4;
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  const void *v15;
  id v16;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v19;

  if (dword_100341560 > 0)
  {
    --dword_100341560;
    return;
  }
  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  if (sub_1001D523C(v16, 0))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "kvs_message_transport"));
    v2 = objc_msgSend(v1, "SOSTransportMessageGetEngine");

    if (!-[OTSOSActualAdapter sosEnabled]_0())
    {
LABEL_17:
      dword_100341560 = 20;
      goto LABEL_18;
    }
    cf = 0;
    v3 = sub_10000EF14("engineLogState");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Start", buf, 2u);
    }

    if (v2)
    {
      v5 = sub_100104B3C((uint64_t)v2, (uint64_t)&cf);
      if (v5)
      {
        v6 = (const void *)v5;
        SOSCCForEachEngineStateAsStringFromArray(v5, &stru_1002DE108);
LABEL_10:
        v7 = cf;
        if (cf)
        {
          cf = 0;
          CFRelease(v7);
        }
        if (v6)
          CFRelease(v6);
        v8 = sub_10000EF14("engineLogState");
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Finish", buf, 2u);
        }

        goto LABEL_17;
      }
      v15 = sub_10000EF14("engineLogState");
      v11 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v19 = cf;
        v12 = "No engine peers: %@\n";
        v13 = v11;
        v14 = 12;
        goto LABEL_23;
      }
    }
    else
    {
      v10 = sub_10000EF14("engineLogState");
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v12 = "No Engine Available";
        v13 = v11;
        v14 = 2;
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
      }
    }

    v6 = 0;
    goto LABEL_10;
  }
LABEL_18:

}

id sub_1001D523C(void *a1, uint64_t a2)
{
  id v2;
  const void *v3;
  NSObject *v4;
  uint8_t v6[16];

  v2 = objc_msgSend(a1, "isInCircle:", a2);
  if ((v2 & 1) == 0)
  {
    v3 = sub_10000EF14("account-sync");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Not performing requested sync operation: not in circle yet", v6, 2u);
    }

  }
  return v2;
}

CFMutableSetRef sub_1001D52BC(void *a1, const __CFSet *a2)
{
  id v3;
  CFMutableSetRef Mutable;
  void *v5;
  unsigned int v6;
  _QWORD v8[4];
  id v9;
  CFMutableSetRef v10;

  v3 = a1;
  Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v6 = sub_1001D523C(v5, 0);

  if (v6)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001D5394;
    v8[3] = &unk_1002EBD90;
    v9 = v3;
    v10 = Mutable;
    CFSetApplyFunction(a2, (CFSetApplierFunction)sub_1001D57B4, v8);

  }
  return Mutable;
}

void sub_1001D5394(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v2;
  CFTypeID v4;
  id v5;
  void *v6;
  const void *v7;
  NSObject *v8;
  __CFSet *Mutable;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  __CFError *v14;
  const void *v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  CFTypeRef v20;
  CFErrorDomain Domain;
  const void *v22;
  NSObject *v23;
  const void *v24;
  NSObject *v25;
  const char *v26;
  const void *v27;
  CFTypeRef cfa;
  CFTypeRef v29;
  uint8_t v30[16];
  _BYTE buf[12];
  __int16 v32;
  CFTypeRef v33;

  if (!cf || (v2 = cf, v4 = CFGetTypeID(cf), v4 != CFStringGetTypeID()))
  {
    v2 = 0;
    cfa = 0;
    goto LABEL_10;
  }
  cfa = 0;
  v5 = *(id *)(a1 + 32);
  v29 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  if ((sub_1001D523C(v6, (uint64_t)&cfa) & 1) == 0)
  {

    goto LABEL_10;
  }
  v7 = sub_10000EF14("account-sync");
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Syncing with KVS capable peer: %@", buf, 0xCu);
  }

  Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  CFSetAddValue(Mutable, v2);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  *(_QWORD *)buf = 0;
  if (!sub_1001D523C(v10, (uint64_t)&v29))
    goto LABEL_30;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "kvs_message_transport"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "kvs_message_transport"));
  v13 = objc_msgSend(v11, "SOSTransportMessageSyncWithPeers:p:err:", v12, Mutable, buf);

  if ((v13 & 1) != 0)
  {
    LODWORD(v14) = 1;
    goto LABEL_31;
  }
  v14 = *(__CFError **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_31;
  if (CFErrorGetCode(*(CFErrorRef *)buf) == 1032)
  {
    Domain = CFErrorGetDomain(v14);
    if (Domain && kSOSErrorDomain)
    {
      if (!CFEqual(Domain, kSOSErrorDomain))
        goto LABEL_27;
LABEL_24:
      v22 = sub_10000EF14("account-sync");
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Arming account to update SOSEngine with current trusted peers", v30, 2u);
      }

      objc_msgSend(v10, "setEngine_peer_state_needs_repair:", 1);
      goto LABEL_27;
    }
    if (Domain == (CFErrorDomain)kSOSErrorDomain)
      goto LABEL_24;
  }
LABEL_27:
  if (!*(_QWORD *)buf)
  {
LABEL_30:
    LODWORD(v14) = 0;
    goto LABEL_31;
  }
  if (v29)
  {
    CFRelease(*(CFTypeRef *)buf);
    goto LABEL_30;
  }
  LODWORD(v14) = 0;
  v29 = *(CFTypeRef *)buf;
LABEL_31:

  v24 = sub_10000EF14("account-sync");
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = "failed";
    if ((_DWORD)v14)
      v26 = "succeeded";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v26;
    v32 = 2112;
    v33 = v29;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "KVS sync %s. (%@)", buf, 0x16u);
  }

  if (Mutable)
    CFRelease(Mutable);
  if (!v29)
  {

    if ((_DWORD)v14)
      goto LABEL_44;
LABEL_10:
    v15 = sub_10000EF14("account-sync");
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v2;
    v32 = 2112;
    v33 = cfa;
    v17 = "failed to sync with peer: %@ error: %@";
    v18 = v16;
    v19 = 22;
    goto LABEL_12;
  }
  if (cfa)
    CFRelease(v29);
  else
    cfa = v29;

  if ((v14 & 1) == 0)
    goto LABEL_10;
LABEL_44:
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), v2);
  v27 = sub_10000EF14("account-sync");
  v16 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v2;
    v17 = "synced with peer: %@";
    v18 = v16;
    v19 = 12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
  }
LABEL_13:

  v20 = cfa;
  if (cfa)
  {
    cfa = 0;
    CFRelease(v20);
  }
}

uint64_t sub_1001D57B4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

CFMutableSetRef sub_1001D57C8(void *a1, const __CFSet *a2, uint64_t a3)
{
  id v5;
  void *v6;
  CFMutableSetRef Mutable;
  const __CFSet *v8;
  id v9;
  const void *PeerID;
  __CFSet *MutableCopy;
  const __CFSet *v12;
  _QWORD v14[4];
  id v15;
  const __CFSet *v16;
  CFMutableSetRef v17;
  _QWORD context[5];

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  if ((sub_1001D523C(v6, a3) & 1) != 0)
  {
    Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
    v8 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
    v9 = objc_msgSend(v6, "peerInfo");
    if (v9)
    {
      PeerID = (const void *)SOSPeerInfoGetPeerID(v9);
      MutableCopy = CFSetCreateMutableCopy(kCFAllocatorDefault, 0, a2);
      CFSetRemoveValue(MutableCopy, PeerID);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1001D5990;
      v14[3] = &unk_1002EDAA0;
      v15 = v6;
      v16 = v8;
      v17 = Mutable;
      CFSetApplyFunction(MutableCopy, (CFSetApplierFunction)sub_1001D57B4, v14);
      v12 = sub_1001D52BC(v5, v8);
      context[0] = _NSConcreteStackBlock;
      context[1] = 3221225472;
      context[2] = sub_1001D5B50;
      context[3] = &unk_1002EDB28;
      context[4] = Mutable;
      CFSetApplyFunction(v12, (CFSetApplierFunction)sub_1001D57B4, context);
      if (v12)
        CFRelease(v12);
      sub_1001D4FD4(v5);
      if (MutableCopy)
        CFRelease(MutableCopy);
      if (v8)
        CFRelease(v8);

    }
    else if (v8)
    {
      CFRelease(v8);
    }
  }
  else
  {
    Mutable = CFSetCreateMutableCopy(kCFAllocatorDefault, 0, a2);
  }

  return Mutable;
}

void sub_1001D5990(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v2;
  CFTypeID v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  const void *v9;
  int HasValidSyncingPeer;
  uint64_t v11;
  const void *v12;
  NSObject *v13;
  CFTypeRef v14;
  CFTypeRef cfa;
  uint8_t buf[4];
  CFTypeRef v17;
  __int16 v18;
  CFTypeRef v19;

  v2 = cf;
  cfa = 0;
  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 != CFStringGetTypeID())
    {
      sub_100019F20(-50, (__CFString **)&cfa, CFSTR("object %@ is not a string"), v2);
      v2 = 0;
    }
  }
  else
  {
    sub_100019F20(-50, (__CFString **)&cfa, CFSTR("object %@ is not a string"), 0);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trust"));
  v6 = objc_msgSend(v5, "trustedCircle");
  if (v2)
  {
    v7 = v6;
    v8 = SOSCircleCopyPeerWithID(v6, v2, 0);
    if (v8)
    {
      v9 = (const void *)v8;
      HasValidSyncingPeer = SOSCircleHasValidSyncingPeer(v7, v8, objc_msgSend(*(id *)(a1 + 32), "accountKey"), 0);
      v11 = 48;
      if (HasValidSyncingPeer)
        v11 = 40;
      CFSetAddValue(*(CFMutableSetRef *)(a1 + v11), v2);
      CFRelease(v9);
    }
    else
    {
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 48), v2);
    }
  }
  if (cfa)
  {
    v12 = sub_10000EF14("account-sync");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v17 = v2;
      v18 = 2112;
      v19 = cfa;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Skipped peer ID: %@ due to %@", buf, 0x16u);
    }

    v14 = cfa;
    if (cfa)
    {
      cfa = 0;
      CFRelease(v14);
    }
  }

}

void sub_1001D5B50(uint64_t a1, const void *a2)
{
  CFSetSetValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

CFMutableSetRef sub_1001D5B58(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  CFMutableSetRef v10;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  if (sub_1001D523C(v4, a2))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "kvs_message_transport"));
    v7 = objc_msgSend(v6, "SOSTransportMessageGetEngine");

    v8 = (void *)sub_1001047F4((uint64_t)v7, a2);
    v9 = objc_msgSend(objc_alloc((Class)NSSet), "initWithArray:", v8);
    v10 = sub_100102A80((uint64_t)v7, (uint64_t)v9, 1, a2);

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id sub_1001D5C2C(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[4];
  id v13;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "trust"));
  v6 = sub_1001D523C(v4, a2);
  if ((_DWORD)v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v8 = objc_msgSend(v5, "trustedCircle");
    v9 = objc_msgSend(v4, "accountKey");
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001D5D38;
    v12[3] = &unk_1002EC140;
    v13 = v7;
    v10 = v7;
    SOSCircleForEachValidSyncingPeer(v8, v9, v12);
    objc_msgSend(v3, "requestSyncWithPeers:", v10);

  }
  return v6;
}

id sub_1001D5D38(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", SOSPeerInfoGetPeerID(a2));
}

uint64_t sub_1001D5D64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  v12 = a3;
  v8 = ccder_decode_tag(&v11, a3, a4);
  result = 0;
  if (v8 && a1)
  {
    if (v11 == 5)
    {
      if (a3)
      {
        v13 = 0;
        result = ccder_decode_tl(5, &v13, a3, a4);
        if (v13)
          v10 = 1;
        else
          v10 = result == 0;
        if (v10)
          return 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      *a1 = SOSFullPeerInfoCreateFromDER(kCFAllocatorDefault, a2, &v12, a4);
      return v12;
    }
  }
  return result;
}

uint64_t sub_1001D5E2C(CFTypeRef a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    SecKeyCopyPublicBytes(a1, &cf);
    a1 = cf;
  }
  v3 = der_sizeof_data_or_null(a1, a2);
  v4 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v4);
  }
  return v3;
}

uint64_t sub_1001D5E84(CFTypeRef a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    SecKeyCopyPublicBytes(a1, &cf);
    a1 = cf;
  }
  v7 = der_encode_data_or_null(a1, a2, a3, a4);
  v8 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v8);
  }
  return v7;
}

uint64_t sub_1001D5EF4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef cf;

  cf = 0;
  v4 = der_decode_data_or_null(a1, &cf);
  v5 = v4;
  v6 = cf;
  if (a2 && v4 && cf)
  {
    *a2 = SecKeyCreateFromPublicData(a1, 3, cf);
    v6 = cf;
  }
  if (v6)
  {
    cf = 0;
    CFRelease(v6);
  }
  return v5;
}

uint64_t sub_1001D69CC(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100214BE0(a1, 5, a3);
  v5 = v4;
  if (v4 && a2)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v4 + 16), CFSTR("LastModifier"), a2);
  return v5;
}

uint64_t sub_1001D6A14(_QWORD *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  __CFData *v8;
  __CFData *v9;
  uint64_t v10;

  sub_1001D6A98(a1);
  if (!sub_1001D6C1C(a1, (uint64_t)a4))
    return 0;
  v8 = sub_1001F59B4(a3, a4);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = sub_1001E9300(a1, (uint64_t)v8, a2, (uint64_t)a4);
  CFRelease(v9);
  return v10;
}

void sub_1001D6A98(_QWORD *a1)
{
  const void *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  if (!a1)
  {
    v1 = sub_10000EF14("SecError");
    v2 = objc_claimAutoreleasedReturnValue(v1);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    v13 = 0;
    v3 = "no ring passed in";
    v4 = (uint8_t *)&v13;
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
    goto LABEL_18;
  }
  if (!a1[2])
  {
    v5 = sub_10000EF14("SecError");
    v2 = objc_claimAutoreleasedReturnValue(v5);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    v12 = 0;
    v3 = "ring has no unSignedInformation";
    v4 = (uint8_t *)&v12;
    goto LABEL_17;
  }
  if (!a1[3])
  {
    v6 = sub_10000EF14("SecError");
    v2 = objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    v11 = 0;
    v3 = "ring has no signedInformation";
    v4 = (uint8_t *)&v11;
    goto LABEL_17;
  }
  if (!a1[4])
  {
    v7 = sub_10000EF14("SecError");
    v2 = objc_claimAutoreleasedReturnValue(v7);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    v10 = 0;
    v3 = "ring has no signatures";
    v4 = (uint8_t *)&v10;
    goto LABEL_17;
  }
  if (!a1[5])
  {
    v8 = sub_10000EF14("SecError");
    v2 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 0;
      v3 = "ring has no data";
      v4 = (uint8_t *)&v9;
      goto LABEL_17;
    }
LABEL_18:

  }
}

BOOL sub_1001D6C1C(_QWORD *a1, uint64_t a2)
{
  int v3;

  v3 = sub_1002146F0(a1);
  if (v3 != 5)
    SOSCreateError(1040, CFSTR("Not recovery ring type"), 0, a2);
  return v3 == 5;
}

BOOL sub_1001D6C6C(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = a1;
  v4 = sub_1001D6CD8(v3, a2);
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
    objc_msgSend(v5, "generationSignatureUpdateWith:key:", v3, v4);

  }
  return v4 != 0;
}

id sub_1001D6CD8(void *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = a1;
  if (!objc_msgSend(v3, "accountPrivateKey"))
    SOSCreateError(1, CFSTR("Private Key not available - failed to prompt user recently"), 0, a2);
  v4 = objc_msgSend(v3, "accountPrivateKey");

  return v4;
}

void sub_1001D6D30(void *a1)
{
  id v1;
  const void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint8_t v7[16];

  v1 = a1;
  v2 = sub_10000EF14("circleOps");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Purging private account credential", v7, 2u);
  }

  if (objc_msgSend(v1, "accountPrivateKey"))
    objc_msgSend(v1, "setAccountPrivateKey:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "_password_tmp"));

  if (v4)
    objc_msgSend(v1, "set_password_tmp:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "user_private_timer"));

  if (v5)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "user_private_timer"));
    dispatch_source_cancel(v6);

    objc_msgSend(v1, "setUser_private_timer:", 0);
    xpc_transaction_end();
  }
  if (objc_msgSend(v1, "lock_notification_token") != -1)
  {
    notify_cancel((int)objc_msgSend(v1, "lock_notification_token"));
    objc_msgSend(v1, "setLock_notification_token:", 0xFFFFFFFFLL);
  }

}

void sub_1001D6E4C(void *a1)
{
  id v1;
  void *v2;
  dispatch_time_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  uint64_t v8;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "user_private_timer"));

  if (v2)
  {
    v3 = dispatch_time(0, 600000000000);
    v4 = sub_10000EF14("keygen");
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 134217984;
      v8 = 10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting private credential purge time to %lld minutes", (uint8_t *)&v7, 0xCu);
    }

    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "user_private_timer"));
    dispatch_source_set_timer(v6, v3, 0xFFFFFFFFFFFFFFFFLL, 0x12A05F200uLL);

  }
}

void sub_1001D6F60(void *a1)
{
  CFDataRef v1;
  CFDataRef v2;
  uint64_t v3;
  const __CFDictionary *v4;
  OSStatus v5;
  OSStatus v6;
  const __CFDictionary *v7;
  OSStatus v8;
  OSStatus v9;
  const void *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  const void *v15;
  const void *v16;
  int v17;
  OSStatus v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[7];
  _QWORD v24[7];

  v1 = SecKeyCopyExternalRepresentation((SecKeyRef)objc_msgSend(a1, "accountPrivateKey"), 0);
  v2 = v1;
  if (v1)
  {
    v23[0] = kSecClass;
    v23[1] = kSecAttrAccount;
    v24[0] = kSecClassInternetPassword;
    v24[1] = CFSTR("SOSUserCredential");
    v23[2] = kSecAttrIsInvisible;
    v23[3] = kSecAttrAccessible;
    v24[2] = &__kCFBooleanTrue;
    v24[3] = kSecAttrAccessibleWhenUnlocked;
    v3 = kSecAttrSysBound;
    v23[4] = kSecAttrAccessGroup;
    v23[5] = kSecAttrSysBound;
    v24[4] = CFSTR("com.apple.security.sos-usercredential");
    v24[5] = &off_10030B0C0;
    v23[6] = kSecValueData;
    v24[6] = v1;
    v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 7));
    v5 = SecItemAdd(v4, 0);
    if (v5)
    {
      v6 = v5;
      if (v5 != -25299)
      {
        v16 = sub_10000EF14("circleOps");
        v11 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v17 = 67109120;
          v18 = v6;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failed to add user private key to keychain: %d", (uint8_t *)&v17, 8u);
        }
        v7 = v4;
        goto LABEL_14;
      }
      v21[0] = kSecClass;
      v21[1] = kSecAttrAccount;
      v22[0] = kSecClassInternetPassword;
      v22[1] = CFSTR("SOSUserCredential");
      v21[2] = kSecAttrAccessGroup;
      v21[3] = kSecUseDataProtectionKeychain;
      v22[2] = CFSTR("com.apple.security.sos-usercredential");
      v22[3] = &__kCFBooleanTrue;
      v7 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 4));

      v19[0] = kSecValueData;
      v19[1] = v3;
      v20[0] = v2;
      v20[1] = &off_10030B0C0;
      v8 = SecItemUpdate(v7, (CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 2));
      if (v8)
      {
        v9 = v8;
        v10 = sub_10000EF14("circleOps");
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v17 = 67109120;
          v18 = v9;
          v12 = "Failed to update user private key to keychain: %d";
          v13 = v11;
          v14 = 8;
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v17, v14);
          goto LABEL_14;
        }
        goto LABEL_14;
      }
    }
    else
    {
      v7 = v4;
    }
    v15 = sub_10000EF14("circleOps");
    v11 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      v12 = "Stored user private key stashed local keychain";
      v13 = v11;
      v14 = 2;
      goto LABEL_10;
    }
LABEL_14:

  }
}

SecKeyRef sub_1001D725C(__CFString **a1)
{
  const __CFDictionary *v2;
  uint64_t v3;
  SecKeyRef v4;
  const __CFDictionary *v5;
  CFTypeRef v6;
  CFTypeRef result;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[5];
  _QWORD v12[5];

  result = 0;
  v11[0] = kSecClass;
  v11[1] = kSecAttrAccount;
  v12[0] = kSecClassInternetPassword;
  v12[1] = CFSTR("SOSUserCredential");
  v11[2] = kSecAttrAccessGroup;
  v11[3] = kSecReturnData;
  v12[2] = CFSTR("com.apple.security.sos-usercredential");
  v12[3] = &__kCFBooleanTrue;
  v11[4] = kSecMatchLimit;
  v12[4] = kSecMatchLimitOne;
  v2 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 5));
  v3 = SecItemCopyMatching(v2, &result);
  if ((_DWORD)v3)
  {
    sub_100019F20(v3, a1, CFSTR("Failed fetching account credential: %d"), v3);
    v4 = 0;
  }
  else
  {
    v9[0] = kSecAttrKeyClass;
    v9[1] = kSecAttrKeyType;
    v10[0] = kSecAttrKeyClassPrivate;
    v10[1] = kSecAttrKeyTypeEC;
    v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 2));
    v4 = SecKeyCreateWithData((CFDataRef)result, v5, (CFErrorRef *)a1);
    v6 = result;
    if (result)
    {
      result = 0;
      CFRelease(v6);
    }

  }
  return v4;
}

id sub_1001D7408(void *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = a1;
  if (objc_msgSend(v3, "accountKey") && (objc_msgSend(v3, "accountKeyIsTrusted") & 1) != 0)
  {
    v4 = objc_msgSend(v3, "accountKey");
  }
  else
  {
    SOSCreateError(2, CFSTR("Public Key isn't available. The iCloud Password must be provided to the syncing subsystem to repair this."), 0, a2);
    v4 = 0;
  }

  return v4;
}

uint64_t sub_1001D7474(void *a1, uint64_t a2, CFTypeRef *a3)
{
  id v5;
  id PublicFromPrivate;
  id v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;
  CFTypeRef v13;
  CFTypeRef cf;
  uint8_t buf[4];
  const void *v17;
  __int16 v18;
  const void *v19;

  v5 = a1;
  PublicFromPrivate = (id)SecKeyCreatePublicFromPrivate(a2);
  v7 = objc_msgSend(v5, "accountKey");
  if (PublicFromPrivate && v7)
  {
    if (CFEqual(v7, PublicFromPrivate))
    {
      v8 = 1;
LABEL_19:
      CFRelease(PublicFromPrivate);
      goto LABEL_20;
    }
  }
  else if (v7 == PublicFromPrivate)
  {
    v8 = 1;
    if (!PublicFromPrivate)
      goto LABEL_20;
    goto LABEL_19;
  }
  cf = 0;
  v9 = (const void *)SOSCopyIDOfKey(objc_msgSend(v5, "accountKey"), 0);
  v10 = (const void *)SOSCopyIDOfKey(PublicFromPrivate, 0);
  SOSCreateErrorWithFormat(3, 0, &cf, 0, CFSTR("Password generated pubkey doesn't match - candidate: %@  known: %@"));
  v11 = sub_10000EF14("circleop");
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v17 = v10;
    v18 = 2112;
    v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Password generated pubkey doesn't match - candidate: %@  known: %@", buf, 0x16u);
  }

  v13 = cf;
  if (a3)
  {
    *a3 = cf;
    cf = 0;
  }
  else if (cf)
  {
    cf = 0;
    CFRelease(v13);
  }
  if (v9)
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  v8 = 0;
  if (PublicFromPrivate)
    goto LABEL_19;
LABEL_20:

  return v8;
}

uint64_t sub_1001D7620(void *a1, __CFString **a2)
{
  id v3;
  SecKeyRef v4;
  SecKeyRef v5;
  uint64_t v6;
  const __CFString *v8;
  const void *v9;
  NSObject *v10;
  uint8_t v11[16];

  v3 = a1;
  if (!objc_msgSend(v3, "accountKey"))
  {
    v8 = CFSTR("account public key missing, can't check stashed copy");
LABEL_10:
    SOSCreateError(3, v8, 0, a2);
LABEL_14:
    v6 = 0;
    goto LABEL_7;
  }
  if ((objc_msgSend(v3, "accountKeyIsTrusted") & 1) == 0)
  {
    v8 = CFSTR("public key no not valid, can't check stashed copy");
    goto LABEL_10;
  }
  v4 = sub_1001D725C(a2);
  if (!v4)
  {
    v9 = sub_10000EF14("circleOps");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Looked for a stashed private key, didn't find one", v11, 2u);
    }

    goto LABEL_14;
  }
  v5 = v4;
  v6 = sub_1001D7474(v3, (uint64_t)v4, (CFTypeRef *)a2);
  if ((_DWORD)v6)
    sub_1001D7730(v3, 0, (uint64_t)v5, 1);
  CFRelease(v5);
LABEL_7:

  return v6;
}

void sub_1001D7730(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7;
  void *v8;
  id v9;
  id v10;
  const void *PublicFromPrivate;
  const void *v12;
  const void *v13;
  NSObject *v14;
  int v15;
  const void *v16;

  v7 = a1;
  if ((sub_1001D91F0(v7, a3) & 1) == 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trust"));
    v9 = objc_msgSend(v8, "fullPeerInfo");
    if (v9)
      SOSFullPeerInfoUpgradeSignatures(v9, a3, 0);

  }
  v10 = v7;
  PublicFromPrivate = (const void *)SecKeyCreatePublicFromPrivate(a3);
  if (objc_msgSend(v10, "accountKey")
    && objc_msgSend(v10, "accountKeyIsTrusted")
    && CFEqual(PublicFromPrivate, objc_msgSend(v10, "accountKey")))
  {
    if (PublicFromPrivate)
      CFRelease(PublicFromPrivate);
  }
  else
  {
    if (a4 && objc_msgSend(v10, "accountKey"))
      objc_msgSend(v10, "setPreviousAccountKey:", objc_msgSend(v10, "accountKey"));
    objc_msgSend(v10, "setAccountKey:", PublicFromPrivate);
    objc_msgSend(v10, "setAccountKeyIsTrusted:", 1);
    if (!objc_msgSend(v10, "previousAccountKey"))
      objc_msgSend(v10, "setPreviousAccountKey:", objc_msgSend(v10, "accountKey"));
    if (PublicFromPrivate)
      CFRelease(PublicFromPrivate);
    v12 = (const void *)SOSCopyIDOfKeyWithLength(objc_msgSend(v10, "accountKey"), 8, 0);
    v13 = sub_10000EF14("circleOps");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 138412290;
      v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "trusting new public key: %@", (uint8_t *)&v15, 0xCu);
    }

    if (v12)
      CFRelease(v12);
    notify_post("com.apple.security.publickeyavailable");
  }

  sub_1001D7938(v10, a3, a2);
  sub_1001DFE54(v10);

}

void sub_1001D7938(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;
  id v14;
  void *v15;
  NSObject *v16;
  dispatch_source_t v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  id v21;
  NSObject *v22;
  const void *v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  _QWORD handler[4];
  id v28;

  v5 = a1;
  if (a2)
  {
    v6 = sub_10000EF14("circleOps");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setting new private userKey", buf, 2u);
    }

    objc_msgSend(v5, "setAccountPrivateKey:", a2);
    if (!a3)
    {
      v8 = sub_10000EF14("circleOps");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "no userKey password to save", buf, 2u);
      }

      objc_msgSend(v5, "set_password_tmp:", 0);
      goto LABEL_14;
    }
  }
  else
  {
    v10 = sub_10000EF14("circleOps");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Purging private entities for userKey", buf, 2u);
    }

    sub_1001D6D30(v5);
    if (!a3)
    {
      v23 = sub_10000EF14("circleOps");
      v22 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "SOSAccountSetPrivateCredential nothing to save", buf, 2u);
      }
      goto LABEL_17;
    }
  }
  v12 = sub_10000EF14("circleOps");
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "temporarily caching userKey password", buf, 2u);
  }

  v14 = objc_msgSend(objc_alloc((Class)NSData), "initWithData:", a3);
  objc_msgSend(v5, "set_password_tmp:", v14);

LABEL_14:
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "user_private_timer"));

  if (!v15)
  {
    xpc_transaction_begin();
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "queue"));
    v17 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v16);
    objc_msgSend(v5, "setUser_private_timer:", v17);

    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "user_private_timer"));
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1001D7CA0;
    handler[3] = &unk_1002EC350;
    v19 = v5;
    v28 = v19;
    dispatch_source_set_event_handler(v18, handler);

    *(_DWORD *)buf = -1431655766;
    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "queue"));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1001D7D18;
    v24[3] = &unk_1002EB980;
    v21 = v19;
    v25 = v21;
    notify_register_dispatch("com.apple.mobile.keybagd.lock_status", (int *)buf, v20, v24);

    objc_msgSend(v21, "setLock_notification_token:", *(unsigned int *)buf);
    sub_1001D6E4C(v21);
    v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "user_private_timer"));
    dispatch_resume(v22);
LABEL_17:

    goto LABEL_18;
  }
  sub_1001D6E4C(v5);
LABEL_18:

}

void sub_1001D7CA0(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_10000EF14("keygen");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Timing out, purging private account credential", v4, 2u);
  }

  sub_1001D6D30(*(void **)(a1 + 32));
}

void sub_1001D7D18(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  NSObject *v4;
  CFTypeRef v5;
  uint8_t buf[4];
  CFTypeRef v7;

  v5 = 0;
  *(_DWORD *)buf = -1431655766;
  v2 = sub_100025F30(0, buf);
  if (sub_10003252C(v2, &v5, CFSTR("aks_get_lock_state failed: %x"), v2))
  {
    if ((buf[0] & 1) != 0)
      sub_1001D6D30(*(void **)(a1 + 32));
  }
  else
  {
    v3 = sub_10000EF14("SecError");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Checking for locked after change failed: %@", buf, 0xCu);
    }

  }
}

uint64_t sub_1001D7E08(void *a1, const __CFData *a2, CFTypeRef *a3)
{
  id v5;
  void *v6;
  const __CFData *v7;
  const void *v8;
  uint64_t v9;
  void *v10;
  const __CFData *v11;
  _BOOL4 v12;
  const void *v13;
  NSObject *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  const void *v17;
  NSObject *v18;
  CFTypeRef v20;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v23;

  v5 = a1;
  if (objc_msgSend(v5, "accountKey"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountKeyDerivationParameters"));

    if (v6)
    {
      v7 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountKeyDerivationParameters"));
      v8 = (const void *)sub_1001D3FF8(a2, v7, (uint64_t)a3);

      if (v8)
      {
        if ((sub_1001D7474(v5, (uint64_t)v8, a3) & 1) != 0)
        {

          sub_1001D7730(v5, (uint64_t)a2, (uint64_t)v8, (int)objc_msgSend(v5, "accountKeyIsTrusted"));
          CFRelease(v8);
          v9 = 1;
          goto LABEL_23;
        }
        CFRelease(v8);
      }
    }
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountKeyDerivationParameters"));
  if (v10)
  {
    v20 = 0;
    cf = 0;
    v11 = (const __CFData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountKeyDerivationParameters"));
    v12 = sub_1001D4EF4(&cf, v11, (uint64_t)&v20);

    if (v12)
    {
      sub_1001D3B78((uint64_t)CFSTR("sosAccountValidatePasswordOrFail"), (CFDataRef)v20);
    }
    else
    {
      v13 = sub_10000EF14("circleOps");
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Failed to retrieve cloud parameters - %@", buf, 0xCu);
      }

      if (a3)
      {
        if (*a3)
          CFRelease(*a3);
        *a3 = 0;
      }
    }
    v15 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v15);
    }
    v16 = v20;
    if (v20)
    {
      v20 = 0;
      CFRelease(v16);
    }
  }
  SOSCreateError(3, CFSTR("Could not create correct key with password."), 0, a3);
  v17 = sub_10000EF14("circleOps");
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Failed to create correct key with password.  Caching for use with KeyParam refreshes", buf, 2u);
  }

  sub_1001D7938(v5, 0, (uint64_t)a2);
  v9 = 0;
LABEL_23:

  return v9;
}

uint64_t sub_1001D8090(void *a1, uint64_t a2, const __CFData *a3, CFTypeRef *a4)
{
  id v7;
  uint64_t v8;
  const void *v9;
  NSObject *v10;
  uint8_t v12[16];

  v7 = a1;
  v8 = sub_1001D7E08(v7, a3, a4);
  if ((_DWORD)v8)
  {
    sub_1001D6F60(v7);
    sub_1001E6A88(v7, (uint64_t)CFSTR("AccountName"), a2, 0);
  }
  v9 = sub_10000EF14("circleop");
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting account.key_interests_need_updating to true in SOSAccountTryUserCredentials", v12, 2u);
  }

  objc_msgSend(v7, "setKey_interests_need_updating:", 1);
  return v8;
}

uint64_t sub_1001D8160(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100214BE0(a1, 0, a3);
  v5 = v4;
  if (v4 && a2)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v4 + 16), CFSTR("LastModifier"), a2);
  return v5;
}

BOOL sub_1001D81A8(uint64_t a1, const void *a2)
{
  sub_100215084(a1);
  if (a2)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), CFSTR("LastModifier"), a2);
  return a2 != 0;
}

uint64_t sub_1001D81EC(uint64_t a1, __SecKey *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t PeerInfo;
  const void *PeerID;
  __SecKey *v10;
  uint64_t v11;

  PeerInfo = SOSFullPeerInfoGetPeerInfo(a3);
  PeerID = (const void *)SOSPeerInfoGetPeerID(PeerInfo);
  v10 = (__SecKey *)SOSFullPeerInfoCopyDeviceKey(a3, a4);
  v11 = 0;
  if (v10 && PeerID)
  {
    sub_100215084(a1);
    sub_100214AC4(a1, PeerID);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), CFSTR("LastModifier"), PeerID);
    v11 = sub_10021540C(a1, v10, a4);
  }
  if (a2 && a1)
    sub_1002154F0(a1, a2, a4);
  if (v10)
    CFRelease(v10);
  return v11;
}

uint64_t sub_1001D82B4(uint64_t a1, const void *a2)
{
  if (sub_10021496C(a1, a2))
    return 0;
  if (sub_1002147C0(a1, a2))
    return 2;
  if (sub_10021480C(a1, a2))
    return 3;
  return 1;
}

uint64_t sub_1001D8314(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t PeerInfo;
  const void *PeerID;
  __SecKey *v9;
  uint64_t v10;
  const void *v11;
  NSObject *v12;
  uint64_t result;
  uint8_t v14[16];

  PeerInfo = SOSFullPeerInfoGetPeerInfo(a3);
  PeerID = (const void *)SOSPeerInfoGetPeerID(PeerInfo);
  v9 = (__SecKey *)SOSFullPeerInfoCopyDeviceKey(a3, a4);
  if (sub_1001D82B4(a1, PeerID) != 1)
  {
    v11 = sub_10000EF14("ring");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Already associated with ring", v14, 2u);
    }

LABEL_8:
    v10 = 0;
    result = 0;
    if (!v9)
      return result;
    goto LABEL_9;
  }
  if (!v9 || !PeerID)
    goto LABEL_8;
  sub_100214AC4(a1, PeerID);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), CFSTR("LastModifier"), PeerID);
  v10 = sub_10021540C(a1, v9, a4);
LABEL_9:
  CFRelease(v9);
  return v10;
}

uint64_t sub_1001D8420(uint64_t a1, __SecKey *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t PeerInfo;
  const void *PeerID;
  __CFSet *Value;
  __CFSet *v11;
  CFTypeID v12;
  __CFSet *v13;
  __SecKey *v14;

  PeerInfo = SOSFullPeerInfoGetPeerInfo(a3);
  PeerID = (const void *)SOSPeerInfoGetPeerID(PeerInfo);
  if (sub_10021496C(a1, PeerID))
  {
    sub_100214174((_QWORD *)a1);
    Value = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("PeerIDs"));
    if (!Value || (v11 = Value, v12 = CFGetTypeID(Value), v12 != CFSetGetTypeID()))
      v11 = 0;
    v13 = v11;
LABEL_8:
    CFSetRemoveValue(v13, PeerID);
    if (!PeerID)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (sub_1002147C0(a1, PeerID))
  {
    sub_100214174((_QWORD *)a1);
    v13 = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("Applicants"));
    goto LABEL_8;
  }
  if (!sub_10021480C(a1, PeerID))
  {
    SOSCreateError(1032, CFSTR("Not associated with Ring"), 0, a4);
    return 0;
  }
  sub_100214858(a1, PeerID);
  if (PeerID)
LABEL_9:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), CFSTR("LastModifier"), PeerID);
LABEL_10:
  v14 = (__SecKey *)SOSFullPeerInfoCopyDeviceKey(a3, a4);
  sub_10021540C(a1, v14, a4);
  if (a2 && a1)
    sub_1002154F0(a1, a2, a4);
  if (v14)
    CFRelease(v14);
  return 1;
}

uint64_t sub_1001D8594(uint64_t a1, __SecKey *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t PeerInfo;
  const void *PeerID;
  __SecKey *v10;
  uint64_t v11;

  PeerInfo = SOSFullPeerInfoGetPeerInfo(a3);
  PeerID = (const void *)SOSPeerInfoGetPeerID(PeerInfo);
  v10 = (__SecKey *)SOSFullPeerInfoCopyDeviceKey(a3, a4);
  v11 = 0;
  if (v10 && PeerID)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), CFSTR("LastModifier"), PeerID);
    v11 = sub_10021540C(a1, v10, a4);
  }
  if (a2 && a1)
    sub_1002154F0(a1, a2, a4);
  if (v10)
    CFRelease(v10);
  return v11;
}

uint64_t sub_1001D8648(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t PeerInfo;
  const void *PeerID;
  uint64_t v8;
  __SecKey *v9;
  BOOL v10;
  uint64_t v11;

  PeerInfo = SOSFullPeerInfoGetPeerInfo(a2);
  PeerID = (const void *)SOSPeerInfoGetPeerID(PeerInfo);
  v8 = SOSFullPeerInfoCopyDeviceKey(a2, a3);
  v9 = (__SecKey *)v8;
  if (v8)
    v10 = PeerID == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v8)
      return 0;
  }
  else
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), CFSTR("LastModifier"), PeerID);
    sub_1002154F0(a1, v9, a3);
  }
  CFRelease(v9);
  return v11;
}

uint64_t sub_1001D86EC(uint64_t a1, __SecKey *a2, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t PeerInfo;
  const void *PeerID;
  __SecKey *v12;
  uint64_t v13;

  PeerInfo = SOSFullPeerInfoGetPeerInfo(a4);
  PeerID = (const void *)SOSPeerInfoGetPeerID(PeerInfo);
  v12 = (__SecKey *)SOSFullPeerInfoCopyDeviceKey(a4, a5);
  v13 = 0;
  if (v12 && PeerID)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), CFSTR("LastModifier"), PeerID);
    sub_100214174((_QWORD *)a1);
    if (!a3)
    {
      v13 = 0;
      if (!a2)
        goto LABEL_8;
      goto LABEL_6;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Payload"), a3);
    v13 = sub_10021540C(a1, v12, a5);
  }
  if (!a2)
    goto LABEL_8;
LABEL_6:
  if (a1)
    sub_1002154F0(a1, a2, a5);
LABEL_8:
  if (v12)
    CFRelease(v12);
  return v13;
}

const void *sub_1001D87D8(uint64_t a1)
{
  sub_100214174((_QWORD *)a1);
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("Payload"));
}

void sub_1001D8C80(uint64_t a1, const void *a2)
{
  if (a2
    && (!SOSPeerInfoIsRetirementTicket(a2)
     || SOSPeerInfoRetireRetirementTicket(*(_QWORD *)(a1 + 32), a2)
     && (SOSCircleHasActivePeer(*(_QWORD *)(a1 + 40), a2, 0) & 1) == 0))
  {
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 48), a2);
  }
}

uint64_t sub_1001D8CE8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1001D8CFC(uint64_t a1, const void *a2)
{
  __CFSet *v4;

  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), a2);
  v4 = (__CFSet *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retirees"));
  CFSetRemoveValue(v4, a2);

}

SecKeyRef sub_1001D8D48(int a1, uint64_t a2, uint64_t a3, uint64_t a4, CFErrorRef *a5)
{
  CFNumberRef v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  CFDictionaryRef v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  const __CFDictionary *v22;
  OSStatus v23;
  const void *v24;
  NSObject *v25;
  SecKeyRef privateKey;
  int valuePtr;
  uint8_t buf[4];
  uint64_t v30;

  valuePtr = a1;
  privateKey = 0;
  v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  v14 = sub_10012E96C(kCFAllocatorDefault, v7, v8, v9, v10, v11, v12, v13, (uint64_t)kSecAttrIsPermanent, (uint64_t)kCFBooleanTrue);
  v22 = sub_10012E96C(kCFAllocatorDefault, v15, v16, v17, v18, v19, v20, v21, (uint64_t)kSecAttrKeyType, (uint64_t)kSecAttrKeyTypeEC);
  if (v14)
    CFRelease(v14);
  if (v6)
    CFRelease(v6);
  v23 = SecKeyGeneratePair(v22, 0, &privateKey);
  if (v22)
    CFRelease(v22);
  if (v23)
  {
    v24 = sub_10000EF14("SecError");
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v30 = v23;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "status: %ld", buf, 0xCu);
    }

    if (a5 && !*a5)
      *a5 = CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainOSStatus, v23, 0);
  }
  return privateKey;
}

void sub_1001D8F88(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  const __CFDictionary *v10;
  OSStatus v11;
  OSStatus v12;
  const void *v13;
  NSObject *v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef result;
  uint8_t buf[4];
  _QWORD v19[2];

  Value = (const __CFString *)CFDictionaryGetValue(theDict, kSecAttrLabel);
  if (Value)
  {
    v4 = Value;
    if (CFStringHasPrefix(Value, CFSTR("Cloud Identity")))
    {
      result = 0;
      v10 = sub_10012E96C(kCFAllocatorDefault, (int)kSecReturnRef, (int)kCFBooleanTrue, v5, v6, v7, v8, v9, (uint64_t)kSecMatchLimit, (uint64_t)kSecMatchLimitOne);
      v11 = SecItemCopyMatching(v10, &result);
      if (v11)
      {
        v12 = v11;
        v13 = sub_10000EF14("iCloudIdentity");
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109378;
          LODWORD(v19[0]) = v12;
          WORD2(v19[0]) = 2112;
          *(_QWORD *)((char *)v19 + 6) = v4;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Failed query(%d) for %@", buf, 0x12u);
        }
        v15 = 0;
      }
      else
      {
        v15 = result;
        v16 = sub_10000EF14("iCloudIdentity");
        v14 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v19[0] = v4;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Got key for label (%@)", buf, 0xCu);
        }
      }

      if (v10)
        CFRelease(v10);
      if (v15)
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        CFRelease(v15);
      }
    }
  }
}

uint64_t sub_1001D91DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_1001D91F0(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  id v5;
  const void *PublicFromPrivate;
  uint64_t PeerInfo;
  uint64_t v8;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "trust"));
  v4 = objc_msgSend(v3, "fullPeerInfo");
  if (v4)
  {
    v5 = v4;
    PublicFromPrivate = (const void *)SecKeyCreatePublicFromPrivate(a2);
    PeerInfo = SOSFullPeerInfoGetPeerInfo(v5);
    v8 = SOSPeerInfoApplicationVerify(PeerInfo, PublicFromPrivate, 0);
    if (PublicFromPrivate)
      CFRelease(PublicFromPrivate);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t sub_1001D926C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  unsigned int (**v8)(id, id, _QWORD);
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[4];
  id v15;
  uint64_t v16;

  v7 = a1;
  v8 = a4;
  if (!objc_msgSend(v7, "hasPeerInfo"))
    goto LABEL_7;
  if (!v8[2](v8, objc_msgSend(v7, "fullPeerInfo"), a3))
  {
    v12 = 0;
    goto LABEL_8;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trust"));
  if (!objc_msgSend(v9, "trustedCircle"))
  {
    SOSCreateErrorWithFormat(1037, 0, 0, 0, CFSTR("No trusted circle"));

LABEL_7:
    v12 = 1;
    goto LABEL_8;
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trust"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "circle_transport"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001D93BC;
  v14[3] = &unk_1002ECAE8;
  v16 = a2;
  v15 = v7;
  v12 = (uint64_t)objc_msgSend(v10, "modifyCircle:err:action:", v11, a3, v14);

LABEL_8:
  return v12;
}

uint64_t sub_1001D93BC(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  v4 = sub_10000EF14("circleChange");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138412290;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling SOSCircleUpdatePeerInfo for %@", (uint8_t *)&v8, 0xCu);
  }

  return SOSCircleUpdatePeerInfo(a2, objc_msgSend(*(id *)(a1 + 32), "peerInfo"));
}

uint64_t sub_1001D9488(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  uint64_t v12;

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001D9520;
  v10[3] = &unk_1002EBA18;
  v11 = a4;
  v12 = a3;
  v7 = v11;
  v8 = sub_1001D926C(a1, a2, a3, v10);

  return v8;
}

uint64_t sub_1001D9520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  uint64_t v12;

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001D95B0;
  v10[3] = &unk_1002EB9F0;
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v11 = v6;
  v12 = v7;
  v8 = SOSFullPeerInfoUpdate(a2, a3, v10);

  return v8;
}

const void *sub_1001D95B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *Copy;
  int v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  uint8_t v14[16];
  uint8_t buf[16];

  Copy = (const void *)SOSPeerInfoCreateCopy(kCFAllocatorDefault, a2, a4);
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (a3 && v8 && SOSPeerInfoSign(a3, Copy, a4))
  {
    v9 = sub_10000EF14("circleOp");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Signed Peerinfo to update", buf, 2u);
    }

  }
  else
  {
    v11 = sub_10000EF14("circleOp");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Failed updating PeerInfo", v14, 2u);
    }

    if (Copy)
    {
      CFRelease(Copy);
      return 0;
    }
  }
  return Copy;
}

void sub_1001D96D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001D97FC;
  v5[3] = &unk_1002EBA40;
  v6 = *(id *)(a1 + 32);
  v7 = a3;
  SOSCircleForEachPeer(a2, v5);

}

CFMutableArrayRef sub_1001D974C(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void (**v6)(id, id, CFMutableArrayRef);
  CFMutableArrayRef Mutable;
  void *v8;

  v5 = a1;
  v6 = a3;
  if (sub_1001D7408(v5, a2))
  {
    Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
    v6[2](v6, objc_msgSend(v8, "trustedCircle"), Mutable);
    CFArrayOfSOSPeerInfosSortByID(Mutable);

  }
  else
  {
    Mutable = 0;
  }

  return Mutable;
}

void sub_1001D97FC(uint64_t a1, uint64_t a2)
{
  if ((SOSPeerInfoApplicationVerify(a2, objc_msgSend(*(id *)(a1 + 32), "accountKey"), 0) & 1) == 0)
    sub_1001D984C(*(__CFArray **)(a1 + 40), a2);
}

void sub_1001D984C(__CFArray *a1, uint64_t a2)
{
  const void *Copy;

  Copy = (const void *)SOSPeerInfoCreateCopy(kCFAllocatorDefault, a2, 0);
  CFArrayAppendValue(a1, Copy);
  CFRelease(Copy);
}

void sub_1001D9890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001D9904;
  v5[3] = &unk_1002EBA40;
  v6 = *(id *)(a1 + 32);
  v7 = a3;
  SOSCircleForEachPeer(a2, v5);

}

void sub_1001D9904(uint64_t a1, uint64_t a2)
{
  if (SOSPeerInfoApplicationVerify(a2, objc_msgSend(*(id *)(a1 + 32), "accountKey"), 0))
    sub_1001D984C(*(__CFArray **)(a1 + 40), a2);
}

void sub_1001D9954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  __int128 v6;
  _QWORD v7[4];
  __int128 v8;
  uint64_t v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001D99D8;
  v7[3] = &unk_1002EBA90;
  v6 = *(_OWORD *)(a1 + 32);
  v5 = (id)v6;
  v8 = v6;
  v9 = a3;
  SOSCircleForEachPeer(a2, v7);

}

void sub_1001D99D8(uint64_t a1, const void *a2)
{
  const void *v4;
  const void *PeerID;
  BOOL v6;

  v4 = *(const void **)(a1 + 40);
  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  if (v4)
    v6 = PeerID == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v4 == PeerID)
      return;
  }
  else if (CFEqual(v4, PeerID))
  {
    return;
  }
  if (SOSPeerInfoApplicationVerify(a2, objc_msgSend(*(id *)(a1 + 32), "accountKey"), 0))
  {
    if ((SOSPeerInfoIsRetirementTicket(a2) & 1) == 0)
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), a2);
  }
}

void sub_1001D9A74(id a1, __OpaqueSOSCircle *a2, __CFArray *a3)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001D9AC8;
  v3[3] = &unk_1002EC3A0;
  v3[4] = a3;
  SOSCircleForEachRetiredPeer(a2, v3);
}

void sub_1001D9AC8(uint64_t a1, uint64_t a2)
{
  sub_1001D984C(*(__CFArray **)(a1 + 32), a2);
}

void sub_1001D9AD0(id a1, __OpaqueSOSCircle *a2, __CFArray *a3)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001D9B24;
  v3[3] = &unk_1002EC3A0;
  v3[4] = a3;
  SOSCircleForEachPeer(a2, v3);
}

void sub_1001D9B24(uint64_t a1, uint64_t a2)
{
  if ((SOSPeerInfoVersionHasV2Data(a2) & 1) == 0)
    sub_1001D984C(*(__CFArray **)(a1 + 32), a2);
}

void sub_1001D9B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001D9BD8;
  v5[3] = &unk_1002EBA40;
  v6 = *(id *)(a1 + 32);
  v7 = a3;
  SOSCircleForEachPeer(a2, v5);

}

void sub_1001D9BD8(uint64_t a1, uint64_t a2)
{
  if ((SOSPeerInfoVersionHasV2Data(a2) & 1) == 0)
  {
    if (SOSPeerInfoApplicationVerify(a2, objc_msgSend(*(id *)(a1 + 32), "accountKey"), 0))
      sub_1001D984C(*(__CFArray **)(a1 + 40), a2);
  }
}

void sub_1001D9C34(id a1, __OpaqueSOSCircle *a2, __CFArray *a3)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001D9C88;
  v3[3] = &unk_1002EC3A0;
  v3[4] = a3;
  SOSCircleForEachApplicant(a2, v3);
}

void sub_1001D9C88(uint64_t a1, uint64_t a2)
{
  sub_1001D984C(*(__CFArray **)(a1 + 32), a2);
}

void sub_1001D9C90(id a1, __OpaqueSOSCircle *a2, __CFArray *a3)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001D9CE4;
  v3[3] = &unk_1002EC3A0;
  v3[4] = a3;
  SOSCircleForEachPeer(a2, v3);
}

void sub_1001D9CE4(uint64_t a1, uint64_t a2)
{
  sub_1001D984C(*(__CFArray **)(a1 + 32), a2);
}

void sub_1001D9CEC(id a1, __OpaqueSOSCircle *a2, __CFArray *a3)
{
  SOSCircleAppendConcurringPeers(a2, a3, 0);
}

void sub_1001D9CFC(uint64_t a1, uint64_t a2)
{
  const __CFSet *v4;
  uint64_t v5;
  _QWORD context[5];

  if (SOSPeerInfoApplicationVerify(a2, objc_msgSend(*(id *)(a1 + 32), "accountKey"), 0))
  {
    v4 = (const __CFSet *)SOSPeerInfoCopyEnabledViews(a2);
    v5 = *(_QWORD *)(a1 + 40);
    context[0] = _NSConcreteStackBlock;
    context[1] = 3221225472;
    context[2] = sub_1001D9D9C;
    context[3] = &unk_1002EDB28;
    context[4] = v5;
    CFSetApplyFunction(v4, (CFSetApplierFunction)sub_1001D9DA4, context);
    if (v4)
      CFRelease(v4);
  }
}

void sub_1001D9D9C(uint64_t a1, const void *a2)
{
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

uint64_t sub_1001D9DA4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

id sub_1001D9E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trust"));
  v7 = objc_msgSend(v6, "encodeToDER:err:start:end:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a3, a3 + a2);

  return v7;
}

void sub_1001DAB88(uint64_t a1, int a2, CFTypeRef cf)
{
  CFTypeID v5;
  const void *v6;

  if (cf)
  {
    v5 = CFGetTypeID(cf);
    if (v5 == CFDataGetTypeID())
    {
      v6 = (const void *)SOSPeerInfoCreateFromData(kCFAllocatorDefault, 0, cf);
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v6);
      if (v6)
        CFRelease(v6);
    }
  }
}

uint64_t sub_1001DAC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_1001DAC24(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  CFTypeRef ValueAtIndex;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *Name;
  CFTypeID v11;
  CFTypeID v12;
  CFTypeID v13;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFDataGetTypeID())
    {
      v5 = 0;
      ValueAtIndex = cf;
    }
    else
    {
      v11 = CFGetTypeID(cf);
      if (v11 != CFArrayGetTypeID())
        return;
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
      v5 = CFArrayGetValueAtIndex((CFArrayRef)cf, 1);
      if (CFArrayGetCount((CFArrayRef)cf) != 2)
        return;
      if (!ValueAtIndex)
        return;
      v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != CFDataGetTypeID())
        return;
      if (!v5)
        return;
      v13 = CFGetTypeID(v5);
      if (v13 != CFDataGetTypeID())
        return;
    }
    v7 = SOSCircleCreateFromData(kCFAllocatorDefault, ValueAtIndex, *(_QWORD *)(a1 + 40));
    if (!v7)
      return;
    v8 = (const void *)v7;
    v9 = *(const void **)(a1 + 48);
    Name = (const void *)SOSCircleGetName(v7);
    if (v9 && Name)
    {
      if (!CFEqual(v9, Name))
        goto LABEL_19;
    }
    else if (v9 != Name)
    {
LABEL_19:
      CFRelease(v8);
      return;
    }
    objc_msgSend(*(id *)(a1 + 32), "setTrustedCircle:", v8);
    CFRelease(v8);
    if (v5)
    {
      v8 = (const void *)SOSFullPeerInfoCreateFromData(kCFAllocatorDefault, v5, 0);
      objc_msgSend(*(id *)(a1 + 32), "setFullPeerInfo:", v8);
      if (v8)
        goto LABEL_19;
    }
  }
}

uint64_t sub_1001DADA0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

id sub_1001DADB4(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  uint8_t v5[16];

  sub_1001EA20C(*(void **)(a1 + 32));
  v2 = sub_10000EF14("circleop");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting account.key_interests_need_updating to true in SOSAccountCreateFromDER", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "setKey_interests_need_updating:", 1);
}

id sub_1001DAE38(void *a1, const void *a2)
{
  id v3;
  id v4;
  void *v5;
  CFTypeID v6;
  const void *v7;
  NSObject *v8;
  void *v9;
  __CFDictionary *v10;
  int v12;
  id v13;

  v3 = a1;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
    v4 = objc_msgSend(v5, "copyRing:err:", a2, 0);

    if (v4)
    {
      v6 = CFGetTypeID(v4);
      if (v6 != sub_100213B84())
      {
        v7 = sub_10000EF14("SecError");
        v8 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v12 = 138412290;
          v13 = v4;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Non ring in ring table: %@, purging!", (uint8_t *)&v12, 0xCu);
        }

        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
        v10 = (__CFDictionary *)objc_msgSend(v9, "getRings:", 0);

        if (v10)
          CFDictionaryRemoveValue(v10, a2);
        CFRelease(v4);
        v4 = 0;
      }
    }
  }

  return v4;
}

uint64_t sub_1001DAF90(void *a1, uint64_t a2, const void **a3, void *a4, void *a5)
{
  id v9;
  uint64_t (**v10)(id, _QWORD, const void **);
  uint64_t (**v11)(id, id, const void **);
  void *v12;
  id v13;
  uint64_t v14;
  const void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  const void *v19;

  v9 = a1;
  v10 = a4;
  v11 = a5;
  if ((objc_msgSend(v9, "isInCircle:", 0) & 1) == 0)
  {
    SOSErrorCreate(1037, a3, 0, CFSTR("Not in circle, won't update ring"));
LABEL_12:
    v18 = 0;
    goto LABEL_13;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "trust"));
  v13 = objc_msgSend(v12, "copyRing:err:", a2, a3);

  if (!v13)
  {
    v13 = (id)v10[2](v10, a2, a3);
    if (!v13)
      goto LABEL_12;
  }
  v14 = v11[2](v11, v13, a3);
  if (!v14)
  {
    CFRelease(v13);
    goto LABEL_12;
  }
  v15 = (const void *)v14;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "trust"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "circle_transport"));
  v18 = (uint64_t)objc_msgSend(v16, "handleUpdateRing:prospectiveRing:transport:userPublicKey:writeUpdate:err:", v9, v15, v17, objc_msgSend(v9, "accountKey"), 1, a3);

  CFRelease(v13);
  CFRelease(v15);
  if (a3 && (_DWORD)v18)
  {
    v19 = *a3;
    if (*a3)
    {
      *a3 = 0;
      CFRelease(v19);
    }
    v18 = 1;
  }
LABEL_13:

  return v18;
}

void sub_1001DCC54(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uid_t v6;
  const char *v7;
  void *v8;
  void *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;

  v4 = sub_10000EF14("acct-txn");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = getuid();
    if (objc_msgSend(*(id *)(a1 + 32), "initialInCircle"))
      v7 = "member";
    else
      v7 = "non-member";
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "SOSMonitorModeSOSIsActiveDescription"));
    v10[0] = 67109890;
    v10[1] = v6;
    v11 = 2080;
    v12 = v7;
    v13 = 2112;
    v14 = v9;
    v15 = 2112;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "UID: %d - Finished as:%s %@ v:%@", (uint8_t *)v10, 0x26u);

  }
}

void sub_1001DCD7C(void *a1)
{
  id v1;
  void *v2;
  const __CFSet *v3;
  CFMutableSetRef MutableCopy;
  uint64_t v5;
  const __CFSet *v6;
  const __CFSet *v7;
  CFTypeID v8;
  const __CFSet *v9;
  const __CFSet *v10;
  CFTypeID v11;
  _QWORD v12[4];
  id v13;
  void ***v14;
  void **context;
  uint64_t p_context;
  uint64_t v17;
  void *v18;
  CFMutableSetRef v19;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "peerInfo"))
  {
    v3 = (const __CFSet *)SOSPeerInfoCopyEnabledViews(objc_msgSend(v2, "peerInfo"));
    if (sub_1001DF090(v2, 2))
    {
      MutableCopy = v3;
    }
    else
    {
      v6 = (const __CFSet *)sub_1001CA91C(v2, (uint64_t)CFSTR("pendingEnableViews"));
      if (!v6 || (v7 = v6, v8 = CFGetTypeID(v6), v8 != CFSetGetTypeID()))
        v7 = 0;
      v9 = (const __CFSet *)sub_1001CA91C(v2, (uint64_t)CFSTR("pendingDisableViews"));
      if (!v9 || (v10 = v9, v11 = CFGetTypeID(v9), v11 != CFSetGetTypeID()))
        v10 = 0;
      MutableCopy = CFSetCreateMutableCopy(kCFAllocatorDefault, 0, v3);
      context = _NSConcreteStackBlock;
      p_context = 3221225472;
      v17 = (uint64_t)sub_1001DF0EC;
      v18 = &unk_1002EDB28;
      v19 = MutableCopy;
      CFSetApplyFunction(v7, (CFSetApplierFunction)sub_1001DF040, &context);
      context = _NSConcreteStackBlock;
      p_context = 3221225472;
      v17 = (uint64_t)sub_1001DF0F4;
      v18 = &unk_1002EDB28;
      v19 = MutableCopy;
      CFSetApplyFunction(v10, (CFSetApplierFunction)sub_1001DF040, &context);
      if (v3)
        CFRelease(v3);
      if (v7)
        CFRelease(v7);
      if (v10)
        CFRelease(v10);
    }
  }
  else
  {
    MutableCopy = 0;
  }

  context = 0;
  p_context = (uint64_t)&context;
  v17 = 0x2020000000;
  v18 = (void *)0xAAAAAAAAAAAAAAAALL;
  if (objc_msgSend(v2, "getCircleStatus:", 0) || !MutableCopy)
  {
    v18 = 0;
    if (!MutableCopy)
      goto LABEL_11;
  }
  else
  {
    v18 = (void *)SOSViewBitmaskFromSet(MutableCopy);
  }
  CFRelease(MutableCopy);
LABEL_11:
  if (*(_QWORD *)(p_context + 24) != qword_100341580)
  {
    qword_100341580 = *(_QWORD *)(p_context + 24);
    objc_msgSend(v2, "setNotifyViewChangeOnExit:", 1);
  }
  if (objc_msgSend(v2, "notifyViewChangeOnExit"))
  {
    v5 = kSOSCCViewMembershipChangedNotification;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001DD028;
    v12[3] = &unk_1002EBCA0;
    v14 = &context;
    v13 = v2;
    SOSCachedNotificationOperation(v5, v12);

  }
  _Block_object_dispose(&context, 8);

}

void sub_1001DD00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001DD028(uint64_t a1, int token, uint64_t a3)
{
  if ((_DWORD)a3 && !notify_set_state(token, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)))
  {
    notify_post(kSOSCCViewMembershipChangedNotification);
    objc_msgSend(*(id *)(a1 + 32), "setNotifyViewChangeOnExit:", 0);
  }
  return a3;
}

void sub_1001DD088(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uid_t v6;
  const char *v7;
  void *v8;
  void *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;

  v4 = sub_10000EF14("acct-txn");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = getuid();
    if (objc_msgSend(*(id *)(a1 + 32), "initialInCircle"))
      v7 = "member";
    else
      v7 = "non-member";
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "SOSMonitorModeSOSIsActiveDescription"));
    v10[0] = 67109890;
    v10[1] = v6;
    v11 = 2080;
    v12 = v7;
    v13 = 2112;
    v14 = v9;
    v15 = 2112;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "UID: %d - Starting as:%s %@ v:%@", (uint8_t *)v10, 0x26u);

  }
}

uint64_t sub_1001DD1B0(uint64_t a1, int token, uint64_t a3)
{
  const void *v5;
  NSObject *v6;
  uint8_t v8[16];

  if ((_DWORD)a3 && !notify_set_state(token, *(_QWORD *)(a1 + 40)))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setNotifyCircleChangeOnExit:", 0);
    v5 = sub_10000EF14("sosnotify");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "posting kSOSCCCircleChangedNotification", v8, 2u);
    }

    notify_post(kSOSCCCircleChangedNotification);
  }
  return a3;
}

void sub_1001DD260(id a1)
{
  const void *v1;
  NSObject *v2;
  _DWORD v3[2];

  SOSCachedNotificationOperation(kSOSCCCircleChangedNotification, &stru_1002EBC00);
  v1 = sub_10000EF14("sosnotify");
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = qword_100341568;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "initial last circle status is: %d", (uint8_t *)v3, 8u);
  }

}

BOOL sub_1001DD324(id a1, int a2, BOOL a3)
{
  uint64_t state64;

  state64 = 0xAAAAAAAAAAAAAAAALL;
  if (!notify_get_state(a2, &state64) && (state64 & 0x8000000000000000) != 0)
    qword_100341568 = state64;
  return 1;
}

id sub_1001DD4D8()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  id result;

  off_100340C60();
  v1 = v0;
  *v0 = 1;
  result = objc_msgSend(*(id *)(v2 + 32), "performTransaction_Locked:action:", *(unsigned __int8 *)(v2 + 48), *(_QWORD *)(v2 + 40));
  *v1 = 0;
  return result;
}

uint64_t sub_1001DD650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1001DD65C(void *a1)
{
  id v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v1 = a1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001DD708;
  v4[3] = &unk_1002EBCC8;
  v4[4] = &v5;
  sub_1001F93BC(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1001DD6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001DD708(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = SOSPeerInfoIsEnabledView(a2, kSOSViewKeychainV0);
  if ((_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

void sub_1001DD750(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t PeerInfo;
  uint64_t PeerID;
  const __CFDictionary *v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef Mutable;
  CFDictionaryRef v11;
  uint64_t (**v12)(id, uint64_t, _QWORD);
  uint64_t Name;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  const void *v18;
  NSObject *v19;
  uint64_t v20;
  const void *v21;
  const __CFSet *v22;
  int v23;
  const void *v24;
  NSObject *v25;
  const __CFString *v26;
  id v27;
  id v28;
  id v29;
  const __CFDictionary *v30;
  NSObject *v31;
  NSObject *v32;
  const void *v33;
  const char *v34;
  const void *v35;
  _QWORD v36[5];
  _QWORD v37[4];
  id v38;
  uint64_t *v39;
  CFMutableArrayRef v40;
  CFMutableArrayRef v41;
  const __CFSet *v42;
  char v43;
  void **context;
  uint64_t v45;
  void *v46;
  void *v47;
  NSObject *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char v62;
  uint8_t buf[4];
  uint64_t v64;
  _BYTE block[24];
  void *v66;
  NSObject *v67;
  uint64_t v68;
  CFDictionaryRef v69;
  CFMutableArrayRef v70;
  CFMutableArrayRef v71;

  v1 = a1;
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "queue"));
  dispatch_assert_queue_V2(v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "trust"));
  v4 = objc_msgSend(v3, "fullPeerInfo");
  v5 = objc_msgSend(v3, "trustedCircle");
  PeerInfo = SOSFullPeerInfoGetPeerInfo(v4);
  PeerID = SOSPeerInfoGetPeerID(PeerInfo);
  if (!PeerID)
    goto LABEL_4;
  v8 = (const __CFDictionary *)PeerID;
  v9 = 0;
  Mutable = 0;
  v11 = 0;
  if (SOSPeerInfoApplicationVerify(PeerInfo, objc_msgSend(v1, "accountKey"), 0))
  {
    if ((SOSPeerInfoIsRetirementTicket(PeerInfo) & 1) != 0)
    {
LABEL_4:
      v9 = 0;
      Mutable = 0;
      v11 = 0;
      goto LABEL_5;
    }
    v9 = 0;
    Mutable = 0;
    v11 = 0;
    if (!SOSCircleHasPeer(v5, PeerInfo, 0))
      goto LABEL_5;
    v22 = (const __CFSet *)SOSPeerInfoCopyEnabledViews(PeerInfo);
    v59 = 0;
    v60 = &v59;
    v61 = 0x2020000000;
    v62 = -86;
    v62 = sub_1001DD65C(v1);
    v23 = SOSPeerInfoSupportsCKKSForAll(PeerInfo);
    v24 = sub_10000EF14("engine-notify");
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v26 = CFSTR("doesn't support");
      if (v23)
        v26 = CFSTR("supports");
      *(_DWORD *)block = 138412546;
      *(_QWORD *)&block[4] = v8;
      *(_WORD *)&block[12] = 2112;
      *(_QWORD *)&block[14] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Self peer(%@) %@ CKKS For All", block, 0x16u);
    }

    Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    v9 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_1001DDE08;
    v37[3] = &unk_1002EBCF0;
    v27 = v1;
    v40 = Mutable;
    v41 = v9;
    v42 = v22;
    v38 = v27;
    v39 = &v59;
    v43 = v23;
    sub_1001F93BC(v27, v37);
    v28 = v27;
    if (objc_msgSend(v28, "getCircleStatus:", 0))
      goto LABEL_42;
    if (sub_1001DF090(v28, 2))
    {
      v29 = objc_msgSend(v28, "peerInfo");
      if ((SOSPeerInfoV2DictionaryHasData(v29, sBackupKeyKey) & 1) != 0)
      {
        v30 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        *(_QWORD *)block = _NSConcreteStackBlock;
        *(_QWORD *)&block[8] = 3221225472;
        *(_QWORD *)&block[16] = sub_1001DE09C;
        v66 = &unk_1002EBD90;
        v31 = v28;
        v67 = v31;
        v68 = (uint64_t)v30;
        CFSetApplyFunction(v22, (CFSetApplierFunction)sub_1001DE2AC, block);
        context = _NSConcreteStackBlock;
        v45 = 3221225472;
        v46 = sub_1001DE2C0;
        v47 = &unk_1002EDA28;
        v48 = v31;
        v49 = Mutable;
        CFDictionaryApplyFunction(v30, (CFDictionaryApplierFunction)sub_1001DE4BC, &context);
        if (v30)
          CFRelease(v30);

        v32 = v67;
        goto LABEL_41;
      }
      v35 = sub_10000EF14("backup");
      v32 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)block = 0;
        v34 = "No key to backup to, we don't enable individual view backups";
        goto LABEL_40;
      }
    }
    else
    {
      v33 = sub_10000EF14("backup");
      v32 = objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)block = 0;
        v34 = "Haven't finished initial backup syncing, not registering backup metas with engine";
LABEL_40:
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v34, block, 2u);
      }
    }
LABEL_41:

LABEL_42:
    if (*((_BYTE *)v60 + 24))
      CFSetAddValue(v22, kSOSViewKeychainV0);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_1001DE4D4;
    v36[3] = &unk_1002ECDD0;
    v36[4] = v8;
    sub_10002FEC4(v22, (uint64_t)v36);
    v11 = sub_1001EB4E0(v8, (uint64_t)v22, 0);
    if (v22)
      CFRelease(v22);

    _Block_object_dispose(&v59, 8);
  }
LABEL_5:
  v12 = (uint64_t (**)(id, uint64_t, _QWORD))objc_msgSend(v1, "factory");
  Name = SOSCircleGetName(v5);
  if (v12)
  {
    v14 = v12[1](v12, Name, 0);
    if (v14)
    {
      v15 = *(_QWORD *)v14;
      (*(void (**)(uint64_t, _QWORD))(v14 + 72))(v14, 0);
      if (v15)
      {
        if (-[OTSOSActualAdapter sosEnabled]_0())
        {
          v59 = 0;
          v60 = &v59;
          v61 = 0x2020000000;
          v62 = 0;
          *(_QWORD *)block = _NSConcreteStackBlock;
          *(_QWORD *)&block[8] = 3221225472;
          *(_QWORD *)&block[16] = sub_100104148;
          v66 = &unk_1002DDFF8;
          v67 = &v59;
          v68 = v15;
          v69 = v11;
          v70 = Mutable;
          v71 = v9;
          dispatch_sync(*(dispatch_queue_t *)(v15 + 112), block);
          v55 = 0;
          v56 = &v55;
          v57 = 0x2020000000;
          v58 = 1;
          v51 = 0;
          v52 = &v51;
          v53 = 0x2020000000;
          v54 = 0;
          context = _NSConcreteStackBlock;
          v45 = 3221225472;
          v46 = sub_100104208;
          v47 = &unk_1002DE020;
          v49 = &v51;
          v50 = v15;
          v48 = &v55;
          v16 = sub_1000FC6A8(v15, (uint64_t)&v54, &context);
          if (*((_BYTE *)v56 + 24))
            v17 = v16;
          else
            v17 = 0;
          *((_BYTE *)v56 + 24) = v17;
          if ((v17 & 1) == 0)
          {
            v18 = sub_10000EF14("SecError");
            v19 = objc_claimAutoreleasedReturnValue(v18);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              v20 = v52[3];
              *(_DWORD *)buf = 138412290;
              v64 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "failed to save engine state: %@", buf, 0xCu);
            }

            v21 = (const void *)v52[3];
            if (v21)
              CFRelease(v21);
          }
          _Block_object_dispose(&v51, 8);
          _Block_object_dispose(&v55, 8);
          _Block_object_dispose(&v59, 8);
        }
      }
    }
  }
  if (v11)
    CFRelease(v11);
  if (Mutable)
    CFRelease(Mutable);
  if (v9)
    CFRelease(v9);

}

void sub_1001DDDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1001DDE08(uint64_t a1, uint64_t a2)
{
  int IsRetirementTicket;
  uint64_t v5;
  __CFArray **v6;
  __CFArray *v7;
  const __CFSet *v8;
  uint64_t v9;
  __CFSet *v10;
  const void *v11;
  NSObject *v12;
  uint64_t PeerID;
  const __CFDictionary *v14;
  CFDictionaryRef v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  CFMutableSetRef Mutable;
  __int128 context;
  void (*v22)(uint64_t, const void *);
  void *v23;
  uint64_t *v24;
  uint64_t v25;

  if ((SOSPeerInfoApplicationVerify(a2, objc_msgSend(*(id *)(a1 + 32), "accountKey"), 0) & 1) != 0)
  {
    IsRetirementTicket = SOSPeerInfoIsRetirementTicket(a2);
    v5 = 48;
    if (IsRetirementTicket)
      v5 = 56;
    v6 = (__CFArray **)(a1 + v5);
  }
  else
  {
    v6 = (__CFArray **)(a1 + 56);
  }
  v7 = *v6;
  v8 = (const __CFSet *)SOSPeerInfoCopyEnabledViews(a2);
  v9 = *(_QWORD *)(a1 + 64);
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  Mutable = (CFMutableSetRef)0xAAAAAAAAAAAAAAAALL;
  Mutable = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  if (v8 && v9)
  {
    *(_QWORD *)&context = _NSConcreteStackBlock;
    *((_QWORD *)&context + 1) = 3221225472;
    v22 = sub_1001DE808;
    v23 = &unk_1002EC5E8;
    v24 = &v17;
    v25 = v9;
    CFSetApplyFunction(v8, (CFSetApplierFunction)sub_1001DE2AC, &context);
  }
  v10 = (__CFSet *)v18[3];
  _Block_object_dispose(&v17, 8);
  if (v8)
    CFRelease(v8);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    CFSetAddValue(v10, kSOSViewKeychainV0);
  if (*(_BYTE *)(a1 + 72) && SOSPeerInfoSupportsCKKSForAll(a2))
  {
    v11 = sub_10000EF14("engine-notify");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      PeerID = SOSPeerInfoGetPeerID(a2);
      LODWORD(context) = 138412290;
      *(_QWORD *)((char *)&context + 4) = PeerID;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Peer %@ supports CKKS For All; ignoring in SOS syncing",
        (uint8_t *)&context,
        0xCu);
    }

    CFSetRemoveAllValues(v10);
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1001DE850;
  v16[3] = &unk_1002ECDD0;
  v16[4] = a2;
  sub_10002FEC4(v10, (uint64_t)v16);
  v14 = (const __CFDictionary *)SOSPeerInfoGetPeerID(a2);
  v15 = sub_1001EB4E0(v14, (uint64_t)v10, 0);
  if (v10)
    CFRelease(v10);
  CFArrayAppendValue(v7, v15);
  if (v15)
    CFRelease(v15);
}

void sub_1001DE07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001DE09C(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  CFStringRef v5;
  void *v6;
  _QWORD *v7;
  CFTypeID v8;
  __CFSet *Value;
  __CFSet *v10;
  CFTypeID v11;
  const void *v12;
  NSObject *v13;
  __CFSet *Mutable;
  uint8_t buf[4];
  CFStringRef v16;
  __int16 v17;
  CFStringRef v18;
  __int16 v19;
  _QWORD *v20;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID() && (!kSOSViewKeychainV0 || !CFEqual(cf, kSOSViewKeychainV0)))
    {
      v5 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@-tomb"), cf);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trust"));
      v7 = objc_msgSend(v6, "copyRing:err:", v5, 0);

      if (v7 && (v8 = CFGetTypeID(v7), v8 == sub_100213B84()) && sub_1002146F0(v7) == 1)
      {
        Value = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v7);
        if (Value && (v10 = Value, v11 = CFGetTypeID(Value), v11 == CFSetGetTypeID()))
        {
          CFSetAddValue(v10, v5);
        }
        else
        {
          Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
          CFSetAddValue(Mutable, v5);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v7, Mutable);
          if (Mutable)
            CFRelease(Mutable);
        }
      }
      else
      {
        v12 = sub_10000EF14("SecWarning");
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          v16 = v5;
          v17 = 2112;
          v18 = v5;
          v19 = 2112;
          v20 = v7;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "View '%@' not being backed up – ring %@:%@ not backup ring.", buf, 0x20u);
        }

      }
      if (v5)
        CFRelease(v5);
      if (v7)
        CFRelease(v7);
    }
  }
}

uint64_t sub_1001DE2AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1001DE2C0(uint64_t a1, const __CFDictionary **a2, const __CFSet *cf)
{
  const __CFSet *v5;
  CFTypeID v6;
  CFTypeID v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  CFTypeID v11;
  const void *v12;
  const __CFDictionary *v13;
  CFDictionaryRef v14;
  _QWORD *v15;
  CFTypeRef v16;
  _QWORD v17[6];
  _QWORD v18[6];
  CFTypeRef v19;
  _QWORD v20[5];

  if (!cf || (v5 = cf, v6 = CFGetTypeID(cf), v6 != CFSetGetTypeID()))
    v5 = 0;
  if (a2)
  {
    v7 = CFGetTypeID(a2);
    v8 = sub_100213B84();
    if (v5)
    {
      if (v7 == v8)
      {
        if (sub_1001DF054(*(void **)(a1 + 32), v5))
        {
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472;
          v20[2] = sub_1001DE598;
          v20[3] = &unk_1002ECDD0;
          v20[4] = a2;
          sub_10002FEC4(v5, (uint64_t)v20);
          return;
        }
        v19 = 0;
        v9 = (const void *)sub_1001E93A8(a2, 0);
        if (v9 && (v10 = (uint64_t)v9, v11 = CFGetTypeID(v9), v11 == CFDataGetTypeID()))
        {
          v12 = (const void *)SOSBackupSliceKeyBagCreateFromData(kCFAllocatorDefault, v10, &v19);
          if (v12)
          {
            v13 = (const __CFDictionary *)sub_100214310(a2[3]);
            v14 = sub_1001EB4E0(v13, (uint64_t)v5, v10);
            if (sub_1000326EC((uint64_t)v14, &v19, CFSTR("Didn't make peer meta for: %@"), a2))
            {
              CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v14);
              v18[0] = _NSConcreteStackBlock;
              v18[1] = 3221225472;
              v18[2] = sub_1001DE664;
              v18[3] = &unk_1002EBDB0;
              v18[4] = a2;
              v18[5] = v10;
              v15 = v18;
LABEL_14:
              sub_10002FEC4(v5, (uint64_t)v15);
              if (v14)
                CFRelease(v14);
              if (v12)
                CFRelease(v12);
              v16 = v19;
              if (v19)
              {
                v19 = 0;
                CFRelease(v16);
              }
              return;
            }
LABEL_23:
            v17[0] = _NSConcreteStackBlock;
            v17[1] = 3221225472;
            v17[2] = sub_1001DE73C;
            v17[3] = &unk_1002EBDB0;
            v17[4] = a2;
            v17[5] = v19;
            v15 = v17;
            goto LABEL_14;
          }
        }
        else
        {
          v12 = 0;
        }
        v14 = 0;
        goto LABEL_23;
      }
    }
  }
}

uint64_t sub_1001DE4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_1001DE4D4(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v4 = sub_10000EF14("engine-notify");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "My Meta: %@: %@", (uint8_t *)&v7, 0x16u);
  }

}

void sub_1001DE598(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  const void *v6;
  int v7;
  const void *v8;
  __int16 v9;
  uint64_t v10;

  v4 = sub_10000EF14("engine-notify");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_100214310(*(const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 24));
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not ready, no peer meta: R: %@ Vs: %@", (uint8_t *)&v7, 0x16u);
  }

}

void sub_1001DE664(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  const void *v6;
  uint64_t v7;
  int v8;
  const void *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  v4 = sub_10000EF14("engine-notify");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_100214310(*(const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 24));
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138412802;
    v9 = v6;
    v10 = 2112;
    v11 = a2;
    v12 = 2112;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Backup peer meta: R: %@ Vs: %@ VD: %@", (uint8_t *)&v8, 0x20u);
  }

}

void sub_1001DE73C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  v4 = sub_10000EF14("SecError");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138412802;
    v9 = v6;
    v10 = 2112;
    v11 = a2;
    v12 = 2112;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to register backup meta from %@ for views %@. Error (%@)", (uint8_t *)&v8, 0x20u);
  }

}

void sub_1001DE808(uint64_t a1, const void *a2)
{
  if (CFSetContainsValue(*(CFSetRef *)(a1 + 40), a2))
    CFSetAddValue(*(CFMutableSetRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2);
}

void sub_1001DE850(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint64_t PeerID;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v4 = sub_10000EF14("engine-notify");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    PeerID = SOSPeerInfoGetPeerID(*(_QWORD *)(a1 + 32));
    v7 = 138412546;
    v8 = PeerID;
    v9 = 2112;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Meta: %@: %@", (uint8_t *)&v7, 0x16u);
  }

}

void sub_1001DE918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFSet *v6;
  const __CFSet *v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(const __CFSet **)(a1 + 40);
  v6 = *(const __CFSet **)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001DEAE4;
  v10[3] = &unk_1002EBD40;
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v11 = v8;
  v12 = v9;
  v13 = a2;
  v14 = a3;
  sub_1001DE9B0(v7, v6, v10);

}

void sub_1001DE9B0(const __CFSet *a1, const __CFSet *a2, void *a3)
{
  void (**v5)(id, CFMutableSetRef, CFMutableSetRef);
  CFMutableSetRef MutableCopy;
  CFMutableSetRef v7;
  _QWORD v8[5];
  _QWORD context[5];

  v5 = a3;
  MutableCopy = CFSetCreateMutableCopy(kCFAllocatorDefault, 0, a2);
  v7 = CFSetCreateMutableCopy(kCFAllocatorDefault, 0, a1);
  context[0] = _NSConcreteStackBlock;
  context[1] = 3221225472;
  context[2] = sub_1001DEAD4;
  context[3] = &unk_1002EDB28;
  context[4] = MutableCopy;
  CFSetApplyFunction(a1, (CFSetApplierFunction)sub_1001DE2AC, context);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001DEADC;
  v8[3] = &unk_1002EDB28;
  v8[4] = v7;
  CFSetApplyFunction(a2, (CFSetApplierFunction)sub_1001DE2AC, v8);
  v5[2](v5, MutableCopy, v7);

  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v7)
    CFRelease(v7);
}

void sub_1001DEAD4(uint64_t a1, const void *a2)
{
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

void sub_1001DEADC(uint64_t a1, const void *a2)
{
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

void sub_1001DEAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v6;
  _QWORD v7[4];
  id v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFRange v13;

  v6 = (const __CFArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "change_blocks"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001DEBA4;
  v7[3] = &unk_1002EBD18;
  v8 = *(id *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = a2;
  v12 = a3;
  v13.length = CFArrayGetCount(v6);
  v13.location = 0;
  CFArrayApplyFunction(v6, v13, (CFArrayApplierFunction)sub_1001DE2AC, v7);

}

uint64_t sub_1001DEBA4(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = sub_10000EF14("updates");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "calling change block", v7, 2u);
  }

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a2 + 16))(a2, a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
}

void sub_1001DEC38(uint64_t a1, const void *a2, CFTypeRef cf)
{
  CFTypeID v6;
  uint64_t v7;
  const void *v8;
  const void *PeerID;
  void *v10;

  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (v6 == CFDataGetTypeID())
    {
      v7 = SOSPeerInfoCreateFromData(0, *(_QWORD *)(a1 + 48), cf);
      if (v7)
      {
        v8 = (const void *)v7;
        PeerID = (const void *)SOSPeerInfoGetPeerID(v7);
        if (CFEqual(a2, PeerID))
        {
          if (SOSPeerInfoInspectRetirementTicket(v8, *(_QWORD *)(a1 + 48)))
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retirees"));
            objc_msgSend(v10, "addObject:", v8);

            objc_msgSend(*(id *)(a1 + 40), "setCircle_rings_retirements_need_attention:", 1);
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), a2);
          }
        }
        CFRelease(v8);
      }
    }
  }
}

void sub_1001DED04(void *a1)
{
  id v1;
  int v2;
  uint64_t *v3;
  _QWORD block[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v1 = a1;
  if (v1)
  {
    v5 = 0;
    v6 = &v5;
    v7 = 0x2020000000;
    v8 = 1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001DEDE8;
    block[3] = &unk_1002EBE60;
    block[4] = &v5;
    if (qword_100341588 != -1)
      dispatch_once(&qword_100341588, block);
    v2 = *((unsigned __int8 *)v6 + 24);
    _Block_object_dispose(&v5, 8);
    v3 = (uint64_t *)&kCFBooleanFalse;
    if (v2)
      v3 = (uint64_t *)&kCFBooleanTrue;
    sub_1001E6A88(v1, (uint64_t)CFSTR("unsynced"), *v3, 0);
  }

}

void sub_1001DEDE8(uint64_t a1)
{
  const __CFSet *v2;

  v2 = (const __CFSet *)SOSViewCopyViewSet(2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFSetGetCount(v2) > 0;
  if (v2)
    CFRelease(v2);
}

CFMutableSetRef sub_1001DEE3C(void *a1)
{
  id v1;
  const __CFSet *v2;
  CFMutableSetRef v3;

  v1 = a1;
  v2 = (const __CFSet *)SOSViewCopyViewSet(0);
  v3 = sub_1001DEE94(v1, v2);

  if (v2)
    CFRelease(v2);
  return v3;
}

CFMutableSetRef sub_1001DEE94(void *a1, const __CFSet *a2)
{
  id v3;
  id v4;
  unsigned int v5;
  CFTypeID v6;
  const __CFAllocator *v7;
  CFTypeID v8;
  __CFSet *MutableCopy;
  _QWORD v11[6];

  v3 = a1;
  v4 = sub_1001CA91C(v3, (uint64_t)CFSTR("unsynced"));
  v5 = objc_msgSend(v3, "getCircleStatus:", 0);

  if (v5)
  {
    v7 = kCFAllocatorDefault;
    return CFSetCreateMutableCopy(v7, 0, a2);
  }
  if (v4)
  {
    v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
    {
      v7 = kCFAllocatorDefault;
      if (CFBooleanGetValue((CFBooleanRef)v4))
        return CFSetCreateMutableCopy(v7, 0, a2);
      goto LABEL_10;
    }
    v8 = CFGetTypeID(v4);
    if (v8 == CFSetGetTypeID())
    {
      v7 = kCFAllocatorDefault;
      MutableCopy = CFSetCreateMutableCopy(kCFAllocatorDefault, 0, (CFSetRef)v4);
      CFSetRemoveAllValues(MutableCopy);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1001DF000;
      v11[3] = &unk_1002ECBA8;
      v11[4] = a2;
      v11[5] = MutableCopy;
      CFSetApplyFunction((CFSetRef)v4, (CFSetApplierFunction)sub_1001DF040, v11);
      if (!MutableCopy)
        return CFSetCreateMutableCopy(v7, 0, a2);
      return MutableCopy;
    }
  }
  v7 = kCFAllocatorDefault;
LABEL_10:
  MutableCopy = CFSetCreateMutable(v7, 0, &kCFTypeSetCallBacks);
  if (!MutableCopy)
    return CFSetCreateMutableCopy(v7, 0, a2);
  return MutableCopy;
}

void sub_1001DF000(uint64_t a1, const void *a2)
{
  if (CFSetContainsValue(*(CFSetRef *)(a1 + 32), a2))
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), a2);
}

uint64_t sub_1001DF040(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

BOOL sub_1001DF054(void *a1, const __CFSet *a2)
{
  const __CFSet *v2;
  CFIndex Count;

  v2 = sub_1001DEE94(a1, a2);
  Count = CFSetGetCount(v2);
  if (v2)
    CFRelease(v2);
  return Count != 0;
}

BOOL sub_1001DF090(void *a1, uint64_t a2)
{
  id v3;
  const __CFSet *v4;
  _BOOL4 v5;

  v3 = a1;
  v4 = (const __CFSet *)SOSViewCopyViewSet(a2);
  v5 = sub_1001DF054(v3, v4);

  if (v4)
    CFRelease(v4);
  return !v5;
}

void sub_1001DF0EC(uint64_t a1, const void *a2)
{
  CFSetSetValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

void sub_1001DF0F4(uint64_t a1, const void *a2)
{
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

BOOL sub_1001DF0FC(uint64_t a1, _BOOL8 a2, _BOOL8 a3)
{
  const __CFSet *v5;
  const __CFSet *v6;
  int v7;
  void **v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const void *);
  void *v12;
  uint64_t *v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v5 = (const __CFSet *)SOSViewCopyViewSet(a1);
  v6 = v5;
  if (!a2)
  {
    if (!v5)
      return a2;
    goto LABEL_10;
  }
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 1;
  if (v5)
  {
    v9 = _NSConcreteStackBlock;
    v10 = 3221225472;
    v11 = sub_1001DF348;
    v12 = &unk_1002EC5E8;
    v13 = &v15;
    v14 = a2;
    CFSetApplyFunction(v5, (CFSetApplierFunction)sub_1001DF040, &v9);
    v7 = *((unsigned __int8 *)v16 + 24);
    _Block_object_dispose(&v15, 8);
    if (v7)
    {
      a2 = 0;
    }
    else
    {
      a2 = 1;
      if (a3)
      {
        v15 = 0;
        v16 = &v15;
        v17 = 0x2020000000;
        v18 = 1;
        v9 = _NSConcreteStackBlock;
        v10 = 3221225472;
        v11 = sub_1001DF348;
        v12 = &unk_1002EC5E8;
        v13 = &v15;
        v14 = a3;
        CFSetApplyFunction(v6, (CFSetApplierFunction)sub_1001DF040, &v9);
        a2 = *((_BYTE *)v16 + 24) != 0;
        _Block_object_dispose(&v15, 8);
      }
    }
LABEL_10:
    CFRelease(v6);
    return a2;
  }
  _Block_object_dispose(&v15, 8);
  return 0;
}

void sub_1001DF24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001DF268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  NSObject *v7;
  int v9;
  uint64_t v10;

  v6 = sub_10000EF14("updates");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138412290;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "calling in sync block [%@]", (uint8_t *)&v9, 0xCu);
  }

  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1001DF330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t sub_1001DF348(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  char v6;

  result = CFSetContainsValue(*(CFSetRef *)(a1 + 40), a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if ((_DWORD)result)
    v5 = 1;
  else
    v5 = *(_BYTE *)(v4 + 24) == 0;
  v6 = !v5;
  *(_BYTE *)(v4 + 24) = v6;
  return result;
}

void sub_1001DF388(void *a1, const __CFSet *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  const __CFSet *v6;
  CFSetRef v7;
  const __CFSet *v8;
  const __CFSet *MutableCopy;
  CFTypeID v10;
  const __CFAllocator *v11;
  const void *v12;
  NSObject *v13;
  CFSetRef Copy;
  const void *v15;
  NSObject *v16;
  id v17;
  CFTypeRef *v18;
  const __CFSet *v19;
  CFTypeID v20;
  const void *v21;
  NSObject *v22;
  CFTypeRef v23;
  const void *v24;
  CFTypeRef cf;
  CFTypeRef *p_cf;
  uint64_t v27;
  CFMutableSetRef Mutable;
  _BYTE buf[24];
  void *v30;
  CFTypeRef *v31;
  const __CFSet *v32;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v5 = objc_msgSend(v4, "getCircleStatus:", 0);
  v6 = (const __CFSet *)sub_1001CA91C(v4, (uint64_t)CFSTR("unsynced"));
  v7 = v6;
  if (v6)
    CFRetain(v6);
  sub_1001DF8A0(a2, &stru_1002EBDD0);
  if (!v5)
  {
    if (v7 == kCFBooleanTrue)
    {
      v8 = (const __CFSet *)SOSViewCopyViewSet(0);
      v11 = kCFAllocatorDefault;
      Copy = CFSetCreateCopy(kCFAllocatorDefault, v8);
      if (v7)
        CFRelease(v7);
      v15 = sub_10000EF14("initial-sync");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Pending views setting to all we can expect.", buf, 2u);
      }

      if (!v8)
      {
        MutableCopy = 0;
        v7 = Copy;
        goto LABEL_35;
      }
      v7 = Copy;
    }
    else
    {
      if (!v7 || (v10 = CFGetTypeID(v7), v10 != CFSetGetTypeID()))
      {
        v8 = 0;
        MutableCopy = 0;
LABEL_35:
        sub_1001DF8A0(MutableCopy, &stru_1002EBDF0);
        goto LABEL_36;
      }
      CFRetain(v7);
      v11 = kCFAllocatorDefault;
      v8 = v7;
    }
    v17 = v4;
    cf = 0;
    p_cf = &cf;
    v27 = 0x2020000000;
    Mutable = (CFMutableSetRef)0xAAAAAAAAAAAAAAAALL;
    Mutable = CFSetCreateMutable(v11, 0, &kCFTypeSetCallBacks);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_1001DF93C;
    v30 = &unk_1002EC168;
    v31 = &cf;
    sub_1001F93BC(v17, buf);
    v18 = (CFTypeRef *)p_cf[3];
    _Block_object_dispose(&cf, 8);

    MutableCopy = CFSetCreateMutableCopy(v11, 0, v8);
    CFSetRemoveAllValues(MutableCopy);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_1001DF000;
    v30 = &unk_1002ECBA8;
    v31 = v18;
    v32 = MutableCopy;
    CFSetApplyFunction(v8, (CFSetApplierFunction)sub_1001DF040, buf);
    if (a2)
    {
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1001DF0F4;
      v30 = &unk_1002EDB28;
      v31 = (CFTypeRef *)MutableCopy;
      CFSetApplyFunction(a2, (CFSetApplierFunction)sub_1001DF040, buf);
    }
    if (v7 == MutableCopy)
    {
      v19 = v7;
    }
    else
    {
      if (!MutableCopy)
      {
        CFRelease(v7);
        v19 = 0;
        if (!v18)
          goto LABEL_33;
        goto LABEL_32;
      }
      CFRetain(MutableCopy);
      v19 = MutableCopy;
      if (v7)
      {
        CFRelease(v7);
        v19 = MutableCopy;
        if (!v18)
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    if (!v18)
    {
LABEL_33:
      v7 = v19;
      goto LABEL_35;
    }
LABEL_32:
    CFRelease(v18);
    goto LABEL_33;
  }
  if (v5 != 2)
  {
    if (!v7)
    {
      v8 = 0;
      MutableCopy = 0;
      goto LABEL_39;
    }
    v12 = sub_10000EF14("initial-sync");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "not in circle nor applying: clearing pending", buf, 2u);
    }
    v8 = 0;
    MutableCopy = 0;
LABEL_14:

    CFRelease(v7);
    v7 = 0;
    goto LABEL_39;
  }
  v8 = 0;
  MutableCopy = 0;
LABEL_36:
  if (v7)
  {
    v20 = CFGetTypeID(v7);
    if (v20 == CFSetGetTypeID() && !CFSetGetCount(v7))
    {
      v24 = sub_10000EF14("initial-sync");
      v13 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Empty set, using NULL instead", buf, 2u);
      }
      goto LABEL_14;
    }
  }
LABEL_39:
  cf = 0;
  if (!sub_1001E6A88(v4, (uint64_t)CFSTR("unsynced"), (uint64_t)v7, &cf))
  {
    v21 = sub_10000EF14("initial-sync");
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = cf;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Failure saving new unsynced value: %@ value: %@", buf, 0x16u);
    }

  }
  v23 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v23);
  }
  if (v7)
    CFRelease(v7);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v8)
    CFRelease(v8);

}

void sub_1001DF880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1001DF8A0(const __CFSet *a1, void *a2)
{
  CFTypeID v3;
  CFStringRef v4;
  void (**v5)(id, CFStringRef);

  v5 = a2;
  if (a1 && (v3 = CFGetTypeID(a1), v3 == CFSetGetTypeID()))
  {
    sub_10002FEC4(a1, (uint64_t)v5);
  }
  else
  {
    v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@"), a1);
    v5[2](v5, v4);
    if (v4)
      CFRelease(v4);
  }

}

uint64_t sub_1001DF93C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001DFA40;
  v3[3] = &unk_1002EBEB0;
  v3[4] = *(_QWORD *)(a1 + 32);
  return SOSPeerInfoWithEnabledViewSet(a2, v3);
}

void sub_1001DF998(id a1, __CFString *a2)
{
  const void *v3;
  NSObject *v4;
  int v5;
  __CFString *v6;

  v3 = sub_10000EF14("initial-sync");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unsynced: %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1001DFA40(uint64_t a1, CFSetRef theSet)
{
  uint64_t v2;
  _QWORD context[5];

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  context[0] = _NSConcreteStackBlock;
  context[1] = 3221225472;
  context[2] = sub_1001DF0EC;
  context[3] = &unk_1002EDB28;
  context[4] = v2;
  CFSetApplyFunction(theSet, (CFSetApplierFunction)sub_1001DF040, context);
}

void sub_1001DFAAC(id a1, __CFString *a2)
{
  const void *v3;
  NSObject *v4;
  int v5;
  __CFString *v6;

  v3 = sub_10000EF14("initial-sync");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Views in sync: %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1001DFB54(void *a1)
{
  id v1;
  void *v2;
  id v3;
  const void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  _QWORD v10[4];
  NSObject *v11;
  uint8_t buf[16];

  v1 = a1;
  if ((objc_msgSend(v1, "isListeningForSync") & 1) == 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "trust"));
    v3 = objc_msgSend(v2, "getDataSourceEngine:", objc_msgSend(v1, "factory"));

    if (v3)
    {
      v4 = sub_10000EF14("initial-sync");
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting up notifications to monitor in-sync", buf, 2u);
      }

      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "queue"));
      sub_100101D94((uint64_t)v3, v6);

      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1001DFCD0;
      v10[3] = &unk_1002EBE38;
      v7 = v1;
      v11 = v7;
      sub_100101CDC((uint64_t)v3, v10);
      -[NSObject setIsListeningForSync:](v7, "setIsListeningForSync:", 1);
      v8 = v11;
    }
    else
    {
      v9 = sub_10000EF14("SecError");
      v8 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Couldn't find engine to setup notifications!!!", buf, 2u);
      }
    }

  }
}

id sub_1001DFCD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD v5[6];

  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001DFD24;
  v5[3] = &unk_1002EBE10;
  v5[4] = a2;
  v5[5] = a3;
  return objc_msgSend(v3, "performTransaction_Locked:", v5);
}

void sub_1001DFD24(uint64_t a1, void *a2)
{
  const __CFSet *v2;
  uint64_t v3;
  id v4;
  void *v5;
  const void *v6;
  NSObject *v7;
  void *v8;
  id v9;
  id v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  const __CFSet *v14;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(const __CFSet **)(a1 + 40);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "account"));
  v6 = sub_10000EF14("initial-sync");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 138412546;
    v12 = v3;
    v13 = 2112;
    v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Peer %@ synced views: %@", (uint8_t *)&v11, 0x16u);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
  v9 = objc_msgSend(v8, "trustedCircle");
  if (v9)
  {
    v10 = v9;
    if (objc_msgSend(v5, "isInCircle:", 0))
    {
      if (SOSCircleHasActivePeerWithID(v10, v3, 0))
        sub_1001DF388(v4, v2);
    }
  }

}

void sub_1001DFE54(void *a1)
{
  id v1;
  id v2;
  id v3;
  const void *v4;
  const __CFSet *v5;
  void *v6;
  _QWORD context[5];

  v1 = a1;
  v2 = objc_msgSend(v1, "peerInfo");
  if (v2)
  {
    v3 = v2;
    if (objc_msgSend(v1, "isInCircle:", 0))
    {
      if (sub_1001DF090(v1, 2))
      {
        v4 = (const void *)SOSViewCopyViewSet(3);
        if ((SOSPeerInfoVersionIsCurrent(v3) & 1) == 0)
        {
          v5 = (const __CFSet *)SOSViewCopyViewSet(4);
          context[0] = _NSConcreteStackBlock;
          context[1] = 3221225472;
          context[2] = sub_1001DF0EC;
          context[3] = &unk_1002EDB28;
          context[4] = v4;
          CFSetApplyFunction(v5, (CFSetApplierFunction)sub_1001DF040, context);
          if (v5)
            CFRelease(v5);
        }
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "trust"));
        objc_msgSend(v6, "updateFullPeerInfo:minimum:excluded:", v1, v4, SOSViewsGetV0ViewSet());

        if (v4)
          CFRelease(v4);
      }
    }
  }

}

void sub_1001E06E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Block_object_dispose((const void *)(v29 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1001E0890(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001E0B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001E0CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001E24CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1001E2768(uint64_t a1, const void *a2)
{
  __CFSet *v4;
  const void *PeerID;

  v4 = *(__CFSet **)(a1 + 32);
  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  CFSetAddValue(v4, PeerID);
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), a2);
}

void sub_1001E27B0(uint64_t a1, const void *a2)
{
  __CFSet *v4;
  const void *PeerID;

  v4 = *(__CFSet **)(a1 + 32);
  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  CFSetAddValue(v4, PeerID);
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), a2);
}

uint64_t sub_1001E27F8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  const void *v5;
  NSObject *v6;
  int v8;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v3 + 24) && (!a3 || !a3[2] || !a3[3] || !a3[4] || !a3[5]))
  {
    *(_BYTE *)(v3 + 24) = 0;
    v5 = sub_10000EF14("ring");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ring %@ not stable", (uint8_t *)&v8, 0xCu);
    }

  }
  return 0;
}

uint64_t sub_1001E28DC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = SOSCircleResetToEmpty(a2, *(_QWORD *)(a1 + 40));
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t sub_1001E2920(uint64_t a1, const void *a2)
{
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), a2);
  return 0;
}

id sub_1001E293C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (*(_BYTE *)(v2 + 24))
  {
    result = objc_msgSend(*(id *)(a1 + 32), "resetRing:ringName:err:", *(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 56));
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  }
  else
  {
    result = 0;
  }
  *(_BYTE *)(v2 + 24) = (_BYTE)result;
  return result;
}

uint64_t sub_1001E2990(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1001E29A4(uint64_t a1, const void *a2, CFDataRef theData)
{
  const __CFDictionary **v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  const void *v13;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = CFDataCreateCopy(kCFAllocatorDefault, theData);
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 88), a2, *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = sub_1001E66E4(0, *(CFDataRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)+ 24));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v5 = *(const __CFDictionary ***)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  if (v5)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = sub_1001E6424(v5, 0);
    CFDictionaryReplaceValue(*(CFMutableDictionaryRef *)(a1 + 88), a2, *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v7 = *(const void **)(v6 + 24);
    if (v7)
    {
      *(_QWORD *)(v6 + 24) = 0;
      CFRelease(v7);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v9 = *(const void **)(v8 + 24);
  if (v9)
  {
    *(_QWORD *)(v8 + 24) = 0;
    CFRelease(v9);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v11 = *(const void **)(v10 + 24);
  if (v11)
  {
    *(_QWORD *)(v10 + 24) = 0;
    CFRelease(v11);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v13 = *(const void **)(v12 + 24);
  if (v13)
  {
    *(_QWORD *)(v12 + 24) = 0;
    CFRelease(v13);
  }
}

uint64_t sub_1001E2B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t sub_1001E2B20(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = sub_10000EF14("circleChange");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling SOSCircleUpdatePeerInfo for gestalt change", v7, 2u);
  }

  return SOSCircleUpdatePeerInfo(a2, objc_msgSend(*(id *)(a1 + 32), "peerInfo"));
}

void sub_1001E2BB0(uint64_t a1, const void *a2)
{
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

void sub_1001E2BB8(uint64_t a1, const void *a2)
{
  CFSetSetValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

uint64_t sub_1001E2BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFData *v5;
  uint64_t v6;
  CFIndex Length;
  const UInt8 *BytePtr;

  v5 = *(const __CFData **)(a1 + 32);
  v6 = a3;
  if (v5)
  {
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 32));
    BytePtr = CFDataGetBytePtr(v5);
    v6 = ccder_encode_raw_octet_string(Length, BytePtr, a2, a3);
  }
  return ccder_encode_constructed_tl(0x2000000000000010, a3, a2, v6);
}

BOOL sub_1001E2C30(FILE *a1, __CFString **a2, size_t capacity, uint64_t a4)
{
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  char v19;

  Mutable = CFDataCreateMutable(kCFAllocatorDefault, capacity);
  CFDataSetLength(Mutable, capacity);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  v10 = (*(uint64_t (**)(uint64_t, UInt8 *, UInt8 *))(a4 + 16))(a4, MutableBytePtr, &MutableBytePtr[capacity]);
  if (!v10)
  {
LABEL_7:
    v17 = 0;
    if (!Mutable)
      return v17;
    goto LABEL_4;
  }
  if (MutableBytePtr != (UInt8 *)v10)
  {
    sub_100019F20(-1, a2, CFSTR("size mismatch der_end - der: %td"), v10 - (_QWORD)MutableBytePtr);
    goto LABEL_7;
  }
  v11 = fwrite(MutableBytePtr, capacity, 1uLL, a1) != 1;
  v17 = sub_100032590(v11, (CFTypeRef *)a2, CFSTR("fwrite SOSBackupEventWrite"), v12, v13, v14, v15, v16, v19);
  if (Mutable)
LABEL_4:
    CFRelease(Mutable);
  return v17;
}

BOOL sub_1001E2D24(FILE *a1, CFDataRef theData, __CFString **a3)
{
  CFIndex Length;
  size_t v7;
  _QWORD v9[6];

  Length = CFDataGetLength(theData);
  v7 = ccder_sizeof_raw_octet_string(Length);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  v9[2] = sub_1001E2DA8;
  v9[3] = &unk_1002EBFE0;
  v9[4] = theData;
  v9[5] = a3;
  return sub_1001E2C30(a1, a3, v7, (uint64_t)v9);
}

uint64_t sub_1001E2DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFData *v5;
  CFIndex Length;
  const UInt8 *BytePtr;

  v5 = *(const __CFData **)(a1 + 32);
  Length = CFDataGetLength(v5);
  BytePtr = CFDataGetBytePtr(v5);
  return ccder_encode_raw_octet_string(Length, BytePtr, a2, a3);
}

BOOL sub_1001E2DF8(FILE *a1, const __CFDictionary *a2, __CFString **a3)
{
  size_t v6;
  _QWORD v8[6];

  v6 = sub_10001017C(a2, 0);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1001E2E7C;
  v8[3] = &unk_1002EC000;
  v8[4] = a2;
  v8[5] = a3;
  return sub_1001E2C30(a1, a3, v6, (uint64_t)v8);
}

uint64_t sub_1001E2E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000101DC(*(const __CFDictionary **)(a1 + 32), *(CFTypeRef **)(a1 + 40), 0, a2, a3);
}

BOOL sub_1001E2E94(FILE *a1, uint64_t a2, __CFString **a3)
{
  size_t v6;
  _BOOL8 v7;
  _QWORD v9[6];

  v6 = ccder_sizeof_uint64(a2);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  v9[2] = sub_1001E2F24;
  v9[3] = &unk_1002EC020;
  v9[4] = a2;
  v9[5] = a3;
  v7 = sub_1001E2C30(a1, a3, v6, (uint64_t)v9);
  fflush(a1);
  return v7;
}

uint64_t sub_1001E2F24(uint64_t a1)
{
  return ccder_encode_uint64(*(_QWORD *)(a1 + 32));
}

void sub_1001E397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1001E50DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E5524(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = sub_10000EF14("circleChange");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling SOSCircleUpdatePeerInfo for gestalt change", v7, 2u);
  }

  return SOSCircleUpdatePeerInfo(a2, objc_msgSend(*(id *)(a1 + 32), "peerInfo"));
}

void sub_1001E55B4(uint64_t a1, const void *a2)
{
  const void *CloudIdentity;

  if (SOSPeerInfoIsCloudIdentity(a2))
  {
    CloudIdentity = (const void *)SOSFullPeerInfoCreateCloudIdentity(kCFAllocatorDefault, a2, 0);
    if (CloudIdentity)
      CFRelease(CloudIdentity);
    else
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), a2);
  }
}

uint64_t sub_1001E561C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = SOSPeerInfoIsEnabledView(a2, kSOSViewKeychainV0);
  if ((_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

id sub_1001E5664(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", SOSPeerInfoGetPeerID(a2));
}

void sub_1001E5690(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t v5;
  const void *v6;
  int HasValidSyncingPeer;
  uint64_t v8;
  const void *v9;
  NSObject *v10;
  CFTypeRef v11;
  CFTypeRef cfa;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  CFTypeRef v16;

  cfa = 0;
  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      v5 = SOSCircleCopyPeerWithID(objc_msgSend(*(id *)(a1 + 32), "trustedCircle"), cf, 0);
      if (v5)
      {
        v6 = (const void *)v5;
        HasValidSyncingPeer = SOSCircleHasValidSyncingPeer(objc_msgSend(*(id *)(a1 + 32), "trustedCircle"), v5, objc_msgSend(*(id *)(a1 + 40), "accountKey"), 0);
        v8 = 56;
        if (HasValidSyncingPeer)
          v8 = 48;
        CFSetAddValue(*(CFMutableSetRef *)(a1 + v8), cf);
        CFRelease(v6);
      }
      else
      {
        CFSetAddValue(*(CFMutableSetRef *)(a1 + 56), cf);
      }
      return;
    }
    sub_100019F20(-50, (__CFString **)&cfa, CFSTR("object %@ is not a string"), cf);
  }
  else
  {
    sub_100019F20(-50, (__CFString **)&cfa, CFSTR("object %@ is not a string"), 0);
  }
  if (cfa)
  {
    v9 = sub_10000EF14("sync-with-peers");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v14 = 0;
      v15 = 2112;
      v16 = cfa;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Skipped peer ID: %@ due to %@", buf, 0x16u);
    }

    v11 = cfa;
    if (cfa)
    {
      cfa = 0;
      CFRelease(v11);
    }
  }
}

uint64_t sub_1001E5870(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1001E5884(uint64_t a1, const void *a2)
{
  CFSetSetValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

void sub_1001E588C(uint64_t a1, const void *a2)
{
  if ((SOSPeerInfoApplicationVerify(a2, *(_QWORD *)(a1 + 32), 0) & 1) == 0)
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), a2);
}

uint64_t sub_1001E58D4(uint64_t a1, uint64_t a2)
{
  return SOSCircleWithdrawRequest(*(_QWORD *)(a1 + 32), a2, 0);
}

uint64_t sub_1001E58E0(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  v4 = sub_10000EF14("circleChange");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138412290;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling SOSCircleUpdatePeerInfo for %@", (uint8_t *)&v8, 0xCu);
  }

  return SOSCircleUpdatePeerInfo(a2, objc_msgSend(*(id *)(a1 + 32), "peerInfo"));
}

uint64_t sub_1001E59AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];
  __int128 v5;
  uint64_t v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001E5A0C;
  v4[3] = &unk_1002EC0D0;
  v5 = *(_OWORD *)(a1 + 32);
  v6 = a3;
  return SOSCircleForEachPeer(a2, v4);
}

void sub_1001E5A0C(uint64_t a1, const void *a2)
{
  const void *v4;
  const void *PeerID;
  BOOL v6;

  v4 = *(const void **)(a1 + 32);
  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  if (v4)
    v6 = PeerID == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v4 == PeerID)
      return;
  }
  else if (CFEqual(v4, PeerID))
  {
    return;
  }
  if (SOSPeerInfoApplicationVerify(a2, *(_QWORD *)(a1 + 40), 0))
  {
    if ((SOSPeerInfoIsRetirementTicket(a2) & 1) == 0)
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), a2);
  }
}

void sub_1001E5AA0(uint64_t a1, const void *a2)
{
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), a2);
}

void sub_1001E5AE4(uint64_t a1, const void *a2)
{
  const __CFSet *PermittedViews;

  PermittedViews = (const __CFSet *)SOSPeerInfoGetPermittedViews(a2);
  if (CFSetContainsValue(PermittedViews, *(const void **)(a1 + 32)))
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 40), a2);
}

void sub_1001E5B2C(uint64_t a1, uint64_t a2, uint64_t a3, const __CFSet *a4, const __CFSet *a5)
{
  const void *Name;
  const void *v10;
  id v11;
  const void *v12;
  uint64_t PeerID;
  const __CFArray *Mutable;
  CFMutableArrayRef v15;
  CFMutableArrayRef v16;
  _QWORD v17[6];
  _QWORD context[6];
  _QWORD v19[7];

  Name = (const void *)SOSCircleGetName(a3);
  v10 = *(const void **)(a1 + 48);
  if (Name && v10)
  {
    if (!CFEqual(Name, v10))
      return;
  }
  else if (Name != v10)
  {
    return;
  }
  v11 = objc_msgSend(*(id *)(a1 + 32), "peerInfo");
  v12 = v11;
  if (v11)
    PeerID = SOSPeerInfoGetPeerID(v11);
  else
    PeerID = 0;
  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v15 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v16 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (SOSCircleHasPeer(a3, v12, 0))
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1001E5D34;
    v19[3] = &unk_1002ECBC8;
    v19[4] = Mutable;
    v19[5] = PeerID;
    SOSCircleForEachPeer(a3, v19);
    context[0] = _NSConcreteStackBlock;
    context[1] = 3221225472;
    context[2] = sub_1001E5DA0;
    context[3] = &unk_1002ECBA8;
    context[4] = v15;
    context[5] = PeerID;
    CFSetApplyFunction(a4, (CFSetApplierFunction)sub_1001E5870, context);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1001E5E0C;
    v17[3] = &unk_1002ECBA8;
    v17[4] = v16;
    v17[5] = PeerID;
    CFSetApplyFunction(a5, (CFSetApplierFunction)sub_1001E5870, v17);
  }
  if (CFArrayGetCount(Mutable) || CFSetContainsValue(a5, v12))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (Mutable)
    CFRelease(Mutable);
  if (v15)
    CFRelease(v15);
  if (v16)
    CFRelease(v16);
}

void sub_1001E5D34(uint64_t a1, uint64_t a2)
{
  __CFArray *v3;
  const void *PeerID;
  const void *v5;
  const void *v6;

  v3 = *(__CFArray **)(a1 + 32);
  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  v5 = PeerID;
  v6 = *(const void **)(a1 + 40);
  if (PeerID && v6)
  {
    if (CFEqual(PeerID, v6))
      return;
LABEL_6:
    CFArrayAppendValue(v3, v5);
    return;
  }
  if (PeerID != v6)
    goto LABEL_6;
}

void sub_1001E5DA0(uint64_t a1, uint64_t a2)
{
  __CFArray *v3;
  const void *PeerID;
  const void *v5;
  const void *v6;

  v3 = *(__CFArray **)(a1 + 32);
  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  v5 = PeerID;
  v6 = *(const void **)(a1 + 40);
  if (PeerID && v6)
  {
    if (CFEqual(PeerID, v6))
      return;
LABEL_6:
    CFArrayAppendValue(v3, v5);
    return;
  }
  if (PeerID != v6)
    goto LABEL_6;
}

void sub_1001E5E0C(uint64_t a1, uint64_t a2)
{
  __CFArray *v3;
  const void *PeerID;
  const void *v5;
  const void *v6;

  v3 = *(__CFArray **)(a1 + 32);
  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  v5 = PeerID;
  v6 = *(const void **)(a1 + 40);
  if (PeerID && v6)
  {
    if (CFEqual(PeerID, v6))
      return;
LABEL_6:
    CFArrayAppendValue(v3, v5);
    return;
  }
  if (PeerID != v6)
    goto LABEL_6;
}

void sub_1001E5E78(uint64_t a1, const __CFSet *a2)
{
  const void *v3;
  NSObject *v4;
  _QWORD v5[5];
  uint8_t buf[4];
  uint64_t v7;

  if (a2)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1001E61D8;
    v5[3] = &unk_1002ECDD0;
    v5[4] = a1;
    sub_10002FEC4(a2, (uint64_t)v5);
  }
  else
  {
    v3 = sub_10000EF14("circleChange");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No %@ list provided.", buf, 0xCu);
    }

  }
}

BOOL sub_1001E5F68(void *a1, __CFSet *a2, int a3)
{
  id v5;
  const void *v6;
  _BOOL8 v7;
  int v8;

  v5 = a1;
  if (a2)
  {
    v6 = (const void *)kSOSViewKeychainV0;
    v7 = 1;
    if (CFSetContainsValue(a2, kSOSViewKeychainV0))
    {
      if (sub_1001DD65C(v5))
        v8 = 2;
      else
        v8 = 1;
      v7 = v8 == a3;
      CFSetRemoveValue(a2, v6);
    }
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

uint64_t sub_1001E5FF8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = sub_10000EF14("circleChange");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling SOSCircleUpdatePeerInfo for views or peerInfo change", v7, 2u);
  }

  return SOSCircleUpdatePeerInfo(a2, objc_msgSend(*(id *)(a1 + 32), "peerInfo"));
}

void sub_1001E6088(id a1, __CFString *a2)
{
  const void *v3;
  NSObject *v4;
  int v5;
  __CFString *v6;

  v3 = sub_10000EF14("viewChange");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Disabling %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1001E6130(id a1, __CFString *a2)
{
  const void *v3;
  NSObject *v4;
  int v5;
  __CFString *v6;

  v3 = sub_10000EF14("viewChange");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Enabling %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1001E61D8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v4 = sub_10000EF14("circleChange");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@ list: %@", (uint8_t *)&v7, 0x16u);
  }

}

uint64_t sub_1001E629C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = SOSPeerInfoViewStatus(objc_msgSend(*(id *)(a1 + 32), "peerInfo"), a2, *(_QWORD *)(a1 + 56));
  v4 = 40;
  if ((_DWORD)result == 1)
    v4 = 48;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + v4) + 8) + 24) = 1;
  return result;
}

uint64_t sub_1001E62F0(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = sub_10000EF14("circleChange");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling SOSCircleUpdatePeerInfo for views change", v7, 2u);
  }

  return SOSCircleUpdatePeerInfo(a2, objc_msgSend(*(id *)(a1 + 32), "peerInfo"));
}

uint64_t sub_1001E6380(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = sub_10000EF14("circleChange");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling SOSCircleUpdatePeerInfo for gestalt change", v7, 2u);
  }

  return SOSCircleUpdatePeerInfo(a2, objc_msgSend(*(id *)(a1 + 32), "peerInfo"));
}

uint64_t sub_1001E6424(const __CFDictionary **a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v14;
  const char *v15;
  _QWORD v16[6];
  uint8_t buf[16];

  if (!a1[2])
  {
    v14 = sub_10000EF14("SecError");
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_5;
    *(_WORD *)buf = 0;
    v15 = "ring has no unSignedInformation";
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
    goto LABEL_5;
  }
  if (!a1[3])
  {
    v14 = sub_10000EF14("SecError");
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_5;
    *(_WORD *)buf = 0;
    v15 = "ring has no signedInformation";
    goto LABEL_20;
  }
  if (!a1[4])
  {
    v14 = sub_10000EF14("SecError");
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_5;
    *(_WORD *)buf = 0;
    v15 = "ring has no signatures";
    goto LABEL_20;
  }
  if (!a1[5])
  {
    v14 = sub_10000EF14("SecError");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v15 = "ring has no data";
      goto LABEL_20;
    }
  }
LABEL_5:
  v4 = sub_10001017C(a1[2], (uint64_t)a2);
  if (v4
    && (v6 = v4, (v7 = sub_10001017C(a1[3], (uint64_t)a2)) != 0)
    && (v8 = v7, (v9 = sub_10001017C(a1[4], (uint64_t)a2)) != 0)
    && (v10 = v9, (v11 = sub_10001017C(a1[5], (uint64_t)a2)) != 0))
  {
    v12 = ccder_sizeof(0x2000000000000010, v8 + v6 + v10 + v11);
  }
  else
  {
    sub_100032660(-1, CFSTR("com.apple.security.cfder.error"), 0, a2, v5, CFSTR("don't know how to encode"));
    v12 = 0;
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 0x40000000;
  v16[2] = sub_1001E6638;
  v16[3] = &unk_1002EC188;
  v16[4] = a1;
  v16[5] = a2;
  return CFDataCreateWithDER(kCFAllocatorDefault, v12, v16);
}

uint64_t sub_1001E6638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFDictionary **v4;
  CFTypeRef *v5;
  uint64_t v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(const __CFDictionary ***)(a1 + 32);
  v5 = *(CFTypeRef **)(a1 + 40);
  v6 = a3 + a2;
  v7 = v4[2];
  v8 = v4[3];
  v9 = v4[4];
  v10 = sub_1000101DC(v4[5], v5, 0, a3, a3 + a2);
  v11 = sub_1000101DC(v9, v5, 0, a3, v10);
  v12 = sub_1000101DC(v8, v5, 0, a3, v11);
  v13 = sub_1000101DC(v7, v5, 0, a3, v12);
  return ccder_encode_constructed_tl(0x2000000000000010, v6, a3, v13);
}

_QWORD *sub_1001E66E4(CFTypeRef *a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v6;
  uint64_t Instance;
  _QWORD *v8;
  const UInt8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  NSObject *v17;
  NSObject *v18;
  uint8_t v19[8];
  CFDictionaryRef v20;
  CFDictionaryRef v21;
  CFDictionaryRef v22;
  CFDictionaryRef theDict;
  uint64_t v24;

  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v6 = sub_100213B84();
  Instance = _CFRuntimeCreateInstance(0, v6, 32, 0);
  theDict = 0;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  if (!Instance)
  {
    v17 = sub_10000EF14("ring");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Unable to allocate ring", v19, 2u);
    }
    v15 = 0;
    goto LABEL_25;
  }
  v8 = (_QWORD *)Instance;
  v9 = &BytePtr[Length];
  v10 = ccder_decode_constructed_tl(0x2000000000000010, &v24, BytePtr, v9);
  v11 = sub_10002074C(0, &theDict, a1, v10, v24);
  v12 = sub_10002074C(0, &v22, a1, v11, v24);
  v13 = sub_10002074C(0, &v21, a1, v12, v24);
  v14 = sub_10002074C(0, &v20, a1, v13, v24);
  if (v14)
  {
    if ((const UInt8 *)v14 == v9)
    {
      v8[2] = CFDictionaryCreateMutableCopy(0, 0, theDict);
      v8[3] = CFDictionaryCreateMutableCopy(0, 0, v22);
      v8[4] = CFDictionaryCreateMutableCopy(0, 0, v21);
      v15 = 0;
      v8[5] = CFDictionaryCreateMutableCopy(0, 0, v20);
      goto LABEL_5;
    }
    v18 = sub_10000EF14("ring");
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_24;
    *(_WORD *)v19 = 0;
    goto LABEL_23;
  }
  v18 = sub_10000EF14("ring");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v19 = 0;
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Unable to decode DER", v19, 2u);
  }
LABEL_24:
  v15 = v8;
LABEL_25:
  v8 = 0;
LABEL_5:
  if (theDict)
    CFRelease(theDict);
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v15)
    CFRelease(v15);
  return v8;
}

BOOL sub_1001E6948(void *a1, uint64_t a2, CFTypeRef *a3)
{
  id v5;
  _BOOL8 v6;
  void *v7;
  void *v8;

  v5 = a1;
  v6 = sub_1001E69C4(v5, a3);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "expansion"));
    objc_msgSend(v8, "removeObjectForKey:", a2);

  }
  return v6;
}

BOOL sub_1001E69C4(void *a1, CFTypeRef *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _BOOL8 v10;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "expansion"));

  if (!v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
    objc_msgSend(v7, "setExpansion:", v6);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "expansion"));
  v10 = sub_1000326EC((uint64_t)v9, a2, CFSTR("Can't Alloc Account Expansion dictionary"));

  return v10;
}

BOOL sub_1001E6A88(void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _BOOL8 v11;

  v7 = a1;
  v8 = v7;
  if (a3)
  {
    if (sub_1001E69C4(v7, a4))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "trust"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "expansion"));
      objc_msgSend(v10, "setObject:forKey:", a3, a2);

      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = sub_1001E6948(v7, a2, a4);
  }

  return v11;
}

CFStringRef sub_1001E6B2C(void *a1)
{
  id v1;
  const __CFString *v2;
  CFStringRef v3;
  CFTypeID v4;
  const __CFUUID *v5;
  const void *v6;
  NSObject *v7;
  CFTypeRef v8;
  CFTypeRef cf;
  uint8_t buf[4];
  CFStringRef v12;
  __int16 v13;
  CFTypeRef v14;

  v1 = a1;
  v2 = (const __CFString *)sub_1001CA91C(v1, (uint64_t)CFSTR("UUID"));
  if (v2 && (v3 = v2, v4 = CFGetTypeID(v2), v4 == CFStringGetTypeID()))
  {
    CFRetain(v3);
  }
  else
  {
    v5 = CFUUIDCreate(kCFAllocatorDefault);
    v3 = CFUUIDCreateString(kCFAllocatorDefault, v5);
    cf = 0;
    if (!sub_1001E6A88(v1, (uint64_t)CFSTR("UUID"), (uint64_t)v3, &cf))
    {
      v6 = sub_10000EF14("SecError");
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v12 = v3;
        v13 = 2112;
        v14 = cf;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to set UUID: %@ (%@)", buf, 0x16u);
      }

    }
    v8 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v8);
    }
    if (v5)
      CFRelease(v5);
  }

  return v3;
}

uint64_t sub_1001E6D80()
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1001E6DFC;
  block[3] = &unk_1002EC208;
  block[4] = &qword_1003415A0;
  if (qword_100341598 != -1)
    dispatch_once(&qword_100341598, block);
  return qword_1003415A0;
}

uint64_t sub_1001E6DFC(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_1002EC1A8);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

void sub_1001E6E2C(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = (const void *)a1[3];
    if (v2)
    {
      a1[3] = 0;
      CFRelease(v2);
    }
    v3 = (const void *)a1[5];
    if (v3)
    {
      a1[5] = 0;
      CFRelease(v3);
    }
    v4 = (const void *)a1[6];
    if (v4)
    {
      a1[6] = 0;
      CFRelease(v4);
    }
  }
}

BOOL sub_1001E6E84(uint64_t a1, uint64_t a2)
{
  return CFStringCompare(*(CFStringRef *)(a1 + 16), *(CFStringRef *)(a2 + 16), 0) == kCFCompareEqualTo;
}

const __CFString *sub_1001E6EAC(uint64_t a1)
{
  const __CFData *v1;
  CFIndex Length;
  __CFString *Mutable;
  const UInt8 *BytePtr;
  CFIndex v5;
  CFIndex v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    return CFSTR("NULL");
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v1 = *(const __CFData **)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  v10[2] = sub_1001E6FFC;
  v10[3] = &unk_1002EC230;
  v10[4] = &v11;
  v10[5] = a1;
  if (v1)
  {
    Length = CFDataGetLength(v1);
    Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2 * Length);
    BytePtr = CFDataGetBytePtr(v1);
    v5 = CFDataGetLength(v1);
    if (v5 >= 1)
    {
      v6 = v5;
      do
      {
        v7 = *BytePtr++;
        CFStringAppendFormat(Mutable, 0, CFSTR("%02X"), v7);
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    Mutable = CFSTR("(null)");
  }
  sub_1001E6FFC((uint64_t)v10, (uint64_t)Mutable);
  CFRelease(Mutable);
  v8 = v12[3];
  _Block_object_dispose(&v11, 8);
  return (const __CFString *)v8;
}

const __CFString *sub_1001E6FD8(uint64_t a1)
{
  sub_100005100();
  return sub_1001E6EAC(a1);
}

CFStringRef sub_1001E6FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  CFStringRef result;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = "W";
  if (!*(_BYTE *)(v3 + 32))
    v5 = "w";
  if (*(_BYTE *)(v3 + 56))
    v6 = "O";
  else
    v6 = "o";
  result = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("<Coder %@ %@ %s%s>"), v4, a2, v5, v6);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFMutableDataRef sub_1001E7090(uint64_t a1, uint64_t a2)
{
  CFMutableDataRef Mutable;

  if (!*(_QWORD *)(a1 + 24))
  {
    SOSCreateErrorWithFormat(1040, 0, a2, 0, CFSTR("No session reference."));
    return 0;
  }
  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
  {
    SOSCreateErrorWithFormat(1024, 0, a2, 0, CFSTR("Mutable Data allocation failed."));
    return Mutable;
  }
  if (SecOTRSAppendSerialization(*(_QWORD *)(a1 + 24), Mutable))
  {
    SOSCreateErrorWithFormat(1025, 0, a2, 0, CFSTR("Append Serialization failed."));
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t sub_1001E7150(uint64_t a1, _QWORD *a2)
{
  __CFString *Mutable;
  const void *v5;
  CFStringRef v6;
  CFMutableDataRef v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const __CFString *v16;
  uint8_t buf[4];
  CFStringRef v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  __CFString *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  char *v26;

  Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  v5 = *(const void **)(a1 + 24);
  if (!v5)
  {
    CFStringAppend(Mutable, CFSTR("*** no otr session ***"));
    v7 = 0;
    v6 = 0;
    goto LABEL_16;
  }
  v6 = CFCopyDescription(v5);
  if (*(_BYTE *)(a1 + 32))
  {
    v16 = CFSTR("waiting for peer to send first data packet");
LABEL_32:
    CFStringAppend(Mutable, v16);
    v7 = 0;
    goto LABEL_13;
  }
  if (SecOTRSGetIsReadyForMessages(*(_QWORD *)(a1 + 24)))
  {
    CFStringAppend(Mutable, CFSTR("otr session ready"));
    v10 = 0;
    v7 = 0;
    goto LABEL_20;
  }
  if ((SecOTRSGetIsIdle(*(_QWORD *)(a1 + 24)) & 1) == 0)
  {
    v16 = CFSTR("otr negotiating already");
    goto LABEL_32;
  }
  v7 = CFDataCreateMutable(kCFAllocatorDefault, 0);
  if (v7)
  {
    if (SecOTRSAppendStartPacket(*(_QWORD *)(a1 + 24), v7))
    {
      if (a2)
        v8 = *a2;
      else
        v8 = 0;
      SOSCreateErrorWithFormat(1025, v8, a2, 0, CFSTR("append start packet returned: %d"));
      goto LABEL_16;
    }
    if (*(CFMutableDataRef *)(a1 + 40) != v7)
    {
      CFRetain(v7);
      v9 = *(const void **)(a1 + 40);
      if (v9)
        CFRelease(v9);
      *(_QWORD *)(a1 + 40) = v7;
    }
LABEL_13:
    v10 = 1;
    goto LABEL_20;
  }
  SOSCreateError(1024, CFSTR("alloc failed"), 0, a2);
LABEL_16:
  if (a2 && *a2)
    CFStringAppendFormat(Mutable, 0, CFSTR(" %@"), *a2);
  v10 = 3;
LABEL_20:
  v11 = sub_10000EF14("coder");
  if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    if (!v7)
      goto LABEL_23;
    goto LABEL_22;
  }
  v13 = SecOTRPacketTypeString(v7);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = off_1002EC280[v10];
  *(_DWORD *)buf = 138413314;
  v18 = v6;
  v19 = 2080;
  v20 = v13;
  v21 = 2112;
  v22 = Mutable;
  v23 = 2112;
  v24 = v14;
  v25 = 2080;
  v26 = v15;
  _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%@ %s %@ %@ returned %s", buf, 0x34u);
  if (v7)
LABEL_22:
    CFRelease(v7);
LABEL_23:
  if (v6)
    CFRelease(v6);
  CFRelease(Mutable);
  return v10;
}

void sub_1001E73D8(uint64_t a1)
{
  const void *v2;
  const void *v3;
  CFIndex v4;
  __CFData *Mutable;

  SecOTRSessionReset(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 32) = 0;
  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = 0;
    CFRelease(v2);
  }
  *(_BYTE *)(a1 + 56) = 0;
  v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = 0;
    CFRelease(v3);
  }
  v4 = *(_QWORD *)ccsha1_di();
  Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
  CFDataSetLength(Mutable, v4);
  *(_QWORD *)(a1 + 48) = Mutable;
}

uint64_t sub_1001E745C(uint64_t a1)
{
  CFMutableDataRef Mutable;
  NSObject *v3;
  CFMutableDataRef v4;
  uint64_t v5;
  int v7;
  CFMutableDataRef v8;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
  if (SecOTRSAppendRestartPacket(*(_QWORD *)(a1 + 24), Mutable))
  {
    v5 = 3;
    if (!Mutable)
      return v5;
    goto LABEL_11;
  }
  v3 = sub_10000EF14("coder");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412290;
    v8 = Mutable;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Resending OTR Start %@", (uint8_t *)&v7, 0xCu);
  }
  v4 = *(CFMutableDataRef *)(a1 + 40);
  if (v4 != Mutable)
  {
    if (!Mutable || (CFRetain(Mutable), (v4 = *(CFMutableDataRef *)(a1 + 40)) != 0))
      CFRelease(v4);
    *(_QWORD *)(a1 + 40) = Mutable;
  }
  v5 = 1;
  if (Mutable)
LABEL_11:
    CFRelease(Mutable);
  return v5;
}

void sub_1001E7584(char **a1, __int128 *a2)
{
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  __int128 v14;
  int v15;
  unint64_t v16;

  if (a2)
  {
    v4 = a1[1];
    v5 = (unint64_t *)(a1 + 1);
    v6 = (unint64_t)(v4 + 1);
    if (a1[2] >= v4 + 1)
    {
      v9 = *a1;
    }
    else
    {
      if (v6 > 0x100000)
      {
        v7 = sub_10000EF14("manifest");
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          return;
        v15 = 134217984;
        v16 = v6;
        v8 = "Requesting too much space for digest vectors: %ld";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v15, 0xCu);
        return;
      }
      v10 = 1048476;
      if (v6 < 0xFFF9C)
        v10 = v6;
      v11 = v10 + 100;
      v12 = 20 * (v10 + 100);
      v9 = (char *)reallocf(*a1, v12);
      *a1 = v9;
      if (!v9)
      {
        *v5 = 0;
        v5[1] = 0;
        v7 = sub_10000EF14("manifest");
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          return;
        v15 = 134217984;
        v16 = v12;
        v8 = "reallocf failed requesting space for digest vectors: %ld (bytes)";
        goto LABEL_14;
      }
      a1[2] = (char *)v11;
      v4 = a1[1];
      v6 = (unint64_t)(v4 + 1);
    }
    *v5 = v6;
    v13 = &v9[20 * (_QWORD)v4];
    v14 = *a2;
    *((_DWORD *)v13 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v13 = v14;
  }
}

void sub_1001E7700(char **a1)
{
  void *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (v2)
    {
      qsort(v2, (size_t)a1[1], 0x14uLL, (int (__cdecl *)(const void *, const void *))sub_1001E78B4);
      *((_BYTE *)a1 + 24) = 0;
      v3 = (uint64_t)a1[1];
      if ((unint64_t)v3 >= 2)
      {
        v4 = *a1;
        if (*a1)
        {
          v5 = v4 + 20;
          v6 = (unint64_t)&v4[20 * v3];
          if (v3 >= 2)
          {
            v7 = v4 + 20;
            v8 = v4 + 20;
            while (1)
            {
              if (v4)
              {
                v9 = bswap64(*(_QWORD *)v4);
                v10 = bswap64(*(_QWORD *)v5);
                if (v9 == v10)
                {
                  v9 = bswap64(*((_QWORD *)v4 + 1));
                  v10 = bswap64(*((_QWORD *)v5 + 1));
                  if (v9 == v10)
                  {
                    v9 = bswap32(*((_DWORD *)v4 + 4));
                    v10 = bswap32(*((_DWORD *)v5 + 4));
                    if (v9 == v10)
                    {
                      v11 = 0;
LABEL_17:
                      if (!v11)
                      {
                        v12 = v4 + 20;
                        v13 = v4 + 20 - v7;
                        if (v8 != v7)
                          memmove(v8, v7, v4 + 20 - v7);
                        v8 += v13;
                        v14 = v5 + 20;
                        do
                        {
                          v7 = (char *)v14;
                          if ((unint64_t)v14 >= v6)
                            break;
                          v15 = *(_QWORD *)v12 == *v14 && *((_QWORD *)v12 + 1) == v14[1];
                          v16 = v15 && *((_DWORD *)v12 + 4) == (unint64_t)*((unsigned int *)v14 + 4);
                          v14 = (_QWORD *)((char *)v14 + 20);
                        }
                        while (v16);
                        v5 = v7;
                        v4 = v7;
                      }
                      goto LABEL_30;
                    }
                  }
                }
                if (v9 < v10)
                  v11 = -1;
                else
                  v11 = 1;
                if ((v11 & 0x80000000) == 0)
                  goto LABEL_17;
                v4 = v5;
              }
LABEL_30:
              v5 += 20;
              if ((unint64_t)v5 >= v6)
                goto LABEL_33;
            }
          }
          v8 = v4 + 20;
          v7 = v4 + 20;
LABEL_33:
          if ((unint64_t)v7 < v6)
          {
            v17 = v4 - v7;
            v18 = v17 + 20;
            if (v8 != v7)
              memmove(v8, v7, v17 + 20);
            v8 += v18;
          }
          a1[1] = (char *)((v8 - *a1) / 0x14uLL);
        }
      }
    }
  }
}

uint64_t sub_1001E78B4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (a1 && a2)
  {
    v2 = bswap64(*(_QWORD *)a1);
    v3 = bswap64(*(_QWORD *)a2);
    if (v2 == v3
      && (v2 = bswap64(*(_QWORD *)(a1 + 8)), v3 = bswap64(*(_QWORD *)(a2 + 8)), v2 == v3)
      && (v2 = bswap32(*(_DWORD *)(a1 + 16)), v3 = bswap32(*(_DWORD *)(a2 + 16)), v2 == v3))
    {
      return 0;
    }
    else if (v2 < v3)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  else if (a1)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return a2 != 0;
  }
}

unint64_t sub_1001E7930(unint64_t result, unint64_t a2, uint64_t a3)
{
  char **v5;
  unint64_t v6;
  __int128 *i;

  if (a2)
  {
    v5 = (char **)result;
    v6 = 0;
    for (i = (__int128 *)a3; ; i = (__int128 *)(a3 + 20 * result))
    {
      sub_1001E7584(v5, i);
      result = sub_1001E79A0(a3, a2, v6);
      if (result >= a2)
        break;
      v6 = result;
    }
  }
  return result;
}

unint64_t sub_1001E79A0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v6;

  if (a1 && a3 < a2)
  {
    v3 = a1 + 20 * a3;
    v4 = v3 + 20;
    while (a2 - 1 != a3)
    {
      ++a3;
      v6 = *(_QWORD *)v3 == *(_QWORD *)v4
        && *(_QWORD *)(v3 + 8) == *(_QWORD *)(v4 + 8)
        && *(_DWORD *)(v3 + 16) == (unint64_t)*(unsigned int *)(v4 + 16);
      v4 += 20;
      if (!v6)
        return a3;
    }
    return a2;
  }
  return a3;
}

unint64_t sub_1001E79FC(uint64_t *a1, uint64_t a2, char **a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  unint64_t v15;

  v6 = a1[1];
  if (v6 && *(_QWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *a1 + 20 * v7;
      v10 = *(_QWORD *)a2;
      v11 = *(_QWORD *)a2 + 20 * v8;
      if (*a1)
        v12 = v10 == 0;
      else
        v12 = 1;
      if (v12)
      {
        v13 = v10 != 0;
        if (*a1)
          goto LABEL_21;
      }
      else
      {
        v14 = bswap64(*(_QWORD *)v9);
        v15 = bswap64(*(_QWORD *)v11);
        if (v14 == v15
          && (v14 = bswap64(*(_QWORD *)(v9 + 8)), v15 = bswap64(*(_QWORD *)(v11 + 8)), v14 == v15)
          && (v14 = bswap32(*(_DWORD *)(v9 + 16)), v15 = bswap32(*(_DWORD *)(v11 + 16)), v14 == v15))
        {
          v13 = 0;
        }
        else if (v14 < v15)
        {
          v13 = -1;
        }
        else
        {
          v13 = 1;
        }
      }
      if (v13)
      {
        if ((v13 & 0x80000000) == 0)
        {
          sub_1001E7584(a3, (__int128 *)(*(_QWORD *)a2 + 20 * v8));
          v8 = sub_1001E79A0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v8);
          v6 = a1[1];
          goto LABEL_23;
        }
LABEL_21:
        sub_1001E7584(a3, (__int128 *)v9);
        v6 = a1[1];
        v7 = sub_1001E79A0(*a1, v6, v7);
        goto LABEL_23;
      }
      sub_1001E7584(a3, (__int128 *)v9);
      v6 = a1[1];
      v7 = sub_1001E79A0(*a1, v6, v7);
      v8 = sub_1001E79A0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v8);
LABEL_23:
      if (v7 >= v6 || v8 >= *(_QWORD *)(a2 + 8))
        goto LABEL_27;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_27:
  sub_1001E7930((unint64_t)a3, v6 - v7, *a1 + 20 * v7);
  return sub_1001E7930((unint64_t)a3, *(_QWORD *)(a2 + 8) - v8, *(_QWORD *)a2 + 20 * v8);
}

unint64_t sub_1001E7B9C(unint64_t result, unint64_t *a2, unint64_t a3, uint64_t *a4, char **a5)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  v8 = a2[1];
  if (v8 > result)
  {
    v10 = result;
    v11 = a4[1];
    do
    {
      if (a3 >= v11)
        break;
      result = *a2;
      if (!*a2)
        break;
      v12 = *a4;
      if (!*a4)
        return result;
      v13 = result + 20 * v10;
      v14 = v12 + 20 * a3;
      v15 = bswap64(*(_QWORD *)v13);
      v16 = bswap64(*(_QWORD *)v14);
      if (v15 != v16)
        goto LABEL_10;
      v15 = bswap64(*(_QWORD *)(v13 + 8));
      v16 = bswap64(*(_QWORD *)(v14 + 8));
      if (v15 == v16 && (v15 = bswap32(*(_DWORD *)(v13 + 16)), v16 = bswap32(*(_DWORD *)(v14 + 16)), v15 == v16))
      {
        v10 = sub_1001E79A0(result, v8, v10);
        result = sub_1001E79A0(v12, v11, a3);
        a3 = result;
      }
      else
      {
LABEL_10:
        v17 = v15 < v16 ? -1 : 1;
        if (v17 < 0)
        {
          result = sub_1001E79A0(result, v8, v10);
          v10 = result;
        }
        else
        {
          sub_1001E7584(a5, (__int128 *)v14);
          v11 = a4[1];
          result = sub_1001E79A0(*a4, v11, a3);
          a3 = result;
          v8 = a2[1];
        }
      }
    }
    while (v10 < v8);
  }
  if (*a4)
    return sub_1001E7930((unint64_t)a5, a4[1] - a3, *a4 + 20 * a3);
  return result;
}

unint64_t sub_1001E7D1C(uint64_t *a1, unint64_t *a2, uint64_t a3, char **a4)
{
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v30;

  v5 = a2;
  v6 = a1;
  if (!a1[1])
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
    goto LABEL_52;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    if (v8 >= *(_QWORD *)(a3 + 8))
      break;
    v10 = *v6 + 20 * v9;
    v11 = *(_QWORD *)a3;
    v12 = *(_QWORD *)a3 + 20 * v8;
    if (*v6)
      v13 = v11 == 0;
    else
      v13 = 1;
    if (v13)
    {
      v14 = v11 != 0;
      if (!*v6)
        goto LABEL_20;
      v14 = -1;
    }
    else
    {
      v15 = bswap64(*(_QWORD *)v10);
      v16 = bswap64(*(_QWORD *)v12);
      if (v15 == v16)
      {
        v15 = bswap64(*(_QWORD *)(v10 + 8));
        v16 = bswap64(*(_QWORD *)(v12 + 8));
        if (v15 == v16)
        {
          v15 = bswap32(*(_DWORD *)(v10 + 16));
          v16 = bswap32(*(_DWORD *)(v12 + 16));
          if (v15 == v16)
          {
            v14 = 0;
LABEL_20:
            v30 = 0;
            goto LABEL_21;
          }
        }
      }
      if (v15 < v16)
        v14 = -1;
      else
        v14 = 1;
      if ((v14 & 0x80000000) == 0)
        goto LABEL_20;
    }
    v30 = 1;
    v12 = *v6 + 20 * v9;
LABEL_21:
    v17 = v5[1];
    if (v7 >= v17)
      goto LABEL_42;
    v18 = *v5;
    if (v12)
      v19 = v18 == 0;
    else
      v19 = 1;
    v20 = !v19;
    while ((v20 & 1) != 0)
    {
      v21 = v18 + 20 * v7;
      v22 = bswap64(*(_QWORD *)v21);
      v23 = bswap64(*(_QWORD *)v12);
      if (v22 == v23)
      {
        v22 = bswap64(*(_QWORD *)(v21 + 8));
        v23 = bswap64(*(_QWORD *)(v12 + 8));
        if (v22 == v23)
        {
          v22 = bswap32(*(_DWORD *)(v21 + 16));
          v23 = bswap32(*(_DWORD *)(v12 + 16));
          if (v22 == v23)
          {
            v24 = 0;
            goto LABEL_41;
          }
        }
      }
      if (v22 < v23)
        v24 = -1;
      else
        v24 = 1;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_41;
LABEL_39:
      v7 = sub_1001E79A0(v18, v17, v7);
      if (v7 >= v17)
        goto LABEL_43;
    }
    if (v18)
      goto LABEL_39;
    v24 = v12 != 0;
LABEL_41:
    if (!v24)
    {
      v7 = sub_1001E79A0(v18, v17, v7);
      if (v14)
        goto LABEL_44;
LABEL_48:
      v6 = a1;
      v25 = a1[1];
      v9 = sub_1001E79A0(*a1, v25, v9);
      v8 = sub_1001E79A0(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), v8);
      v5 = a2;
      continue;
    }
LABEL_42:
    sub_1001E7584(a4, (__int128 *)v12);
LABEL_43:
    if (!v14)
      goto LABEL_48;
LABEL_44:
    v5 = a2;
    if (v30)
    {
      v6 = a1;
      v25 = a1[1];
      v9 = sub_1001E79A0(*a1, v25, v9);
    }
    else
    {
      v8 = sub_1001E79A0(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), v8);
      v6 = a1;
      v25 = a1[1];
    }
  }
  while (v9 < v25);
LABEL_52:
  sub_1001E7B9C(v7, v5, v9, v6, a4);
  return sub_1001E7B9C(v7, v5, v8, (uint64_t *)a3, a4);
}

uint64_t sub_1001E7FD8()
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1001E8054;
  block[3] = &unk_1002EC300;
  block[4] = &qword_1003415B0;
  if (qword_1003415A8 != -1)
    dispatch_once(&qword_1003415A8, block);
  return qword_1003415B0;
}

uint64_t sub_1001E8054(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_1002EC2A0);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

void sub_1001E8084(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
}

BOOL sub_1001E80C0(__CFData *a1, __CFData *a2)
{
  __CFData *v3;
  __CFData *v4;

  v3 = sub_1001E8288(a1);
  v4 = sub_1001E8288(a2);
  if (v3 && v4)
    return CFEqual(v3, v4) != 0;
  else
    return v3 == v4;
}

__CFString *sub_1001E8114(CFDataRef *a1)
{
  __CFString *Mutable;
  __CFData *v3;
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v6;
  _QWORD v8[6];
  _QWORD v9[4];

  Mutable = CFStringCreateMutable(0, 0);
  if (!a1)
  {
    v6 = 0;
LABEL_6:
    CFStringAppendFormat(Mutable, 0, CFSTR("<[%zu]"), v6);
    goto LABEL_7;
  }
  if ((unint64_t)CFDataGetLength(a1[3]) < 0xA0)
  {
    v6 = CFDataGetLength(a1[3]) / 0x14uLL;
    goto LABEL_6;
  }
  v3 = sub_1001E8288((__CFData *)a1);
  BytePtr = CFDataGetBytePtr(v3);
  Length = CFDataGetLength(a1[3]);
  CFStringAppendFormat(Mutable, 0, CFSTR("<[%zu:%02X%02X%02X%02X]"), Length / 0x14, *BytePtr, BytePtr[1], BytePtr[2], BytePtr[3]);
LABEL_7:
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = 8;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1001E82F8;
  v8[3] = &unk_1002EC328;
  v8[4] = v9;
  v8[5] = Mutable;
  sub_1001E8388((uint64_t)a1, (uint64_t)v8);
  CFStringAppend(Mutable, CFSTR(">"));
  _Block_object_dispose(v9, 8);
  return Mutable;
}

__CFString *sub_1001E8264(CFDataRef *a1)
{
  sub_100005100();
  return sub_1001E8114(a1);
}

__CFData *sub_1001E8288(__CFData *result)
{
  __CFData *v1;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFIndex *v4;

  if (result)
  {
    v1 = result;
    result = (__CFData *)*((_QWORD *)result + 2);
    if (!result)
    {
      Length = CFDataGetLength(*((CFDataRef *)v1 + 3));
      BytePtr = CFDataGetBytePtr(*((CFDataRef *)v1 + 3));
      v4 = (CFIndex *)ccsha1_di();
      result = sub_100019B00(kCFAllocatorDefault, v4, Length, (uint64_t)BytePtr);
      *((_QWORD *)v1 + 2) = result;
    }
  }
  return result;
}

void sub_1001E82F8(uint64_t a1, CFDataRef theData, _BYTE *a3)
{
  const UInt8 *BytePtr;
  uint64_t v6;
  uint64_t v7;

  BytePtr = CFDataGetBytePtr(theData);
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 40), 0, CFSTR(" %02X%02X%02X%02X"), *BytePtr, BytePtr[1], BytePtr[2], BytePtr[3]);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(_QWORD *)(v6 + 24) - 1;
  *(_QWORD *)(v6 + 24) = v7;
  if (!v7)
  {
    CFStringAppend(*(CFMutableStringRef *)(a1 + 40), CFSTR("..."));
    *a3 = 1;
  }
}

void sub_1001E8388(uint64_t a1, uint64_t a2)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  const UInt8 *v6;
  CFDataRef v7;
  CFDataRef v8;
  const UInt8 *v9;
  BOOL v10;
  char v11;

  v11 = 0;
  if (a1)
  {
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 24));
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 24));
    if (Length >= 20)
    {
      v6 = &BytePtr[Length];
      do
      {
        v7 = CFDataCreate(kCFAllocatorDefault, BytePtr, 20);
        if (v7)
        {
          v8 = v7;
          (*(void (**)(uint64_t, CFDataRef, char *))(a2 + 16))(a2, v7, &v11);
          CFRelease(v8);
        }
        v9 = BytePtr + 40;
        BytePtr += 20;
        if (v11)
          v10 = 1;
        else
          v10 = v9 > v6;
      }
      while (!v10);
    }
  }
}

uint64_t sub_1001E8440(const __CFData *a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Instance;
  CFDataRef Copy;

  v4 = sub_1001E7FD8();
  Instance = _CFRuntimeCreateInstance(kCFAllocatorDefault, v4, 48, 0);
  if (Instance)
  {
    if (a1)
      Copy = CFDataCreateCopy(kCFAllocatorDefault, a1);
    else
      Copy = CFDataCreate(kCFAllocatorDefault, 0, 0);
    *(_QWORD *)(Instance + 24) = Copy;
  }
  else
  {
    sub_100032660(2, CFSTR("com.apple.security.sos.manifest.error"), 0, a2, v5, CFSTR("Failed to create manifest"));
  }
  return Instance;
}

uint64_t sub_1001E84E0(UInt8 *bytes, CFIndex length, CFTypeRef *a3)
{
  const __CFData *v4;
  uint64_t v5;

  v4 = CFDataCreate(kCFAllocatorDefault, bytes, length);
  v5 = sub_1001E8440(v4, a3);
  if (v4)
    CFRelease(v4);
  return v5;
}

void *sub_1001E8534(uint64_t a1)
{
  unint64_t Length;
  uint64_t v3;

  if (!a1)
    return &unk_1003415B8;
  Length = CFDataGetLength(*(CFDataRef *)(a1 + 24));
  *(_QWORD *)(a1 + 40) = Length / 0x14;
  *(_QWORD *)(a1 + 48) = Length / 0x14;
  *(_QWORD *)(a1 + 32) = CFDataGetBytePtr(*(CFDataRef *)(a1 + 24));
  v3 = a1 + 32;
  *(_BYTE *)(v3 + 24) = 0;
  return (void *)v3;
}

uint64_t sub_1001E8590(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, CFTypeRef *a5)
{
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  const void *v15;
  unint64_t Length;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  __int128 v33;
  void *v34[2];
  __int128 v35;

  if (a1 && (unint64_t)CFDataGetLength(*(CFDataRef *)(a1 + 24)) > 0x13)
  {
    if (!a2 || (unint64_t)CFDataGetLength(*(CFDataRef *)(a2 + 24)) <= 0x13)
    {
      v10 = (const void *)sub_1001E84E0(0, 0, a5);
      if (a3)
      {
        CFRetain((CFTypeRef)a1);
        *a3 = a1;
      }
      if (a4)
      {
        v15 = *a4;
        if (*a4 != v10)
        {
          if (!v10 || (CFRetain(v10), (v15 = *a4) != 0))
            CFRelease(v15);
          *a4 = v10;
        }
      }
      goto LABEL_16;
    }
    *(_OWORD *)v34 = 0u;
    v35 = 0u;
    *(_OWORD *)v32 = 0u;
    v33 = 0u;
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 24));
    *(_QWORD *)(a1 + 40) = Length / 0x14;
    *(_QWORD *)(a1 + 48) = Length / 0x14;
    *(_QWORD *)(a1 + 32) = CFDataGetBytePtr(*(CFDataRef *)(a1 + 24));
    *(_BYTE *)(a1 + 56) = 0;
    v17 = CFDataGetLength(*(CFDataRef *)(a2 + 24));
    *(_QWORD *)(a2 + 40) = v17 / 0x14;
    *(_QWORD *)(a2 + 48) = v17 / 0x14;
    *(_QWORD *)(a2 + 32) = CFDataGetBytePtr(*(CFDataRef *)(a2 + 24));
    *(_BYTE *)(a2 + 56) = 0;
    v18 = *(_QWORD *)(a1 + 40);
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      while (1)
      {
        v21 = *(_QWORD *)(a2 + 40);
        if (v19 >= v21)
          goto LABEL_55;
        v22 = *(_QWORD *)(a1 + 32);
        v23 = v22 + 20 * v20;
        v24 = *(_QWORD *)(a2 + 32);
        v25 = v24 + 20 * v19;
        if (v22)
          v26 = v24 == 0;
        else
          v26 = 1;
        if (v26)
        {
          v27 = v24 != 0;
          if (v22)
            goto LABEL_50;
        }
        else
        {
          v28 = bswap64(*(_QWORD *)v23);
          v29 = bswap64(*(_QWORD *)v25);
          if (v28 == v29
            && (v28 = bswap64(*(_QWORD *)(v23 + 8)), v29 = bswap64(*(_QWORD *)(v25 + 8)), v28 == v29)
            && (v28 = bswap32(*(_DWORD *)(v23 + 16)), v29 = bswap32(*(_DWORD *)(v25 + 16)), v28 == v29))
          {
            v27 = 0;
          }
          else if (v28 < v29)
          {
            v27 = -1;
          }
          else
          {
            v27 = 1;
          }
        }
        if (!v27)
        {
          v20 = sub_1001E79A0(v22, v18, v20);
          v19 = sub_1001E79A0(v24, v21, v19);
          goto LABEL_52;
        }
        if (v27 < 0)
        {
LABEL_50:
          sub_1001E7584((char **)v34, (__int128 *)v23);
          v18 = *(_QWORD *)(a1 + 40);
          v20 = sub_1001E79A0(*(_QWORD *)(a1 + 32), v18, v20);
          goto LABEL_52;
        }
        sub_1001E7584((char **)v32, (__int128 *)(v24 + 20 * v19));
        v19 = sub_1001E79A0(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), v19);
        v18 = *(_QWORD *)(a1 + 40);
LABEL_52:
        if (v20 >= v18)
          goto LABEL_55;
      }
    }
    v20 = 0;
    v19 = 0;
LABEL_55:
    sub_1001E7930((unint64_t)v34, v18 - v20, *(_QWORD *)(a1 + 32) + 20 * v20);
    sub_1001E7930((unint64_t)v32, *(_QWORD *)(a2 + 40) - v19, *(_QWORD *)(a2 + 32) + 20 * v19);
    if (a3)
    {
      v30 = sub_1001E88E8((uint64_t)v34, a5);
      *a3 = v30;
      v13 = v30 != 0;
      if (a4)
        goto LABEL_57;
    }
    else
    {
      v13 = 1;
      if (a4)
      {
LABEL_57:
        v31 = sub_1001E88E8((uint64_t)v32, a5);
        *a4 = (const void *)v31;
        if (v31)
          v13 = v13;
        else
          v13 = 0;
      }
    }
    free(v34[0]);
    v34[0] = 0;
    v34[1] = 0;
    BYTE8(v35) = 0;
    *(_QWORD *)&v35 = 0;
    free(v32[0]);
    return v13;
  }
  v10 = (const void *)sub_1001E84E0(0, 0, a5);
  if (a3)
  {
    v11 = (const void *)*a3;
    if ((const void *)*a3 != v10)
    {
      if (!v10 || (CFRetain(v10), (v11 = (const void *)*a3) != 0))
        CFRelease(v11);
      *a3 = (uint64_t)v10;
    }
  }
  if (a4)
  {
    if (a2)
      v12 = (const void *)a2;
    else
      v12 = v10;
    if (v12)
      CFRetain(v12);
    *a4 = v12;
  }
LABEL_16:
  if (v10)
    CFRelease(v10);
  return 1;
}

uint64_t sub_1001E88E8(uint64_t result, CFTypeRef *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    if (*(_BYTE *)(result + 24))
      sub_1001E7700((char **)result);
    return sub_1001E84E0(*(UInt8 **)v3, 20 * *(_QWORD *)(v3 + 8), a2);
  }
  return result;
}

uint64_t sub_1001E8930(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t *v7;
  unint64_t *v8;
  void *v9;
  uint64_t v10;
  void *v12[2];
  __int128 v13;

  *(_OWORD *)v12 = 0u;
  v13 = 0u;
  v7 = (uint64_t *)sub_1001E8534(a1);
  v8 = (unint64_t *)sub_1001E8534(a2);
  v9 = sub_1001E8534(a3);
  sub_1001E7D1C(v7, v8, (uint64_t)v9, (char **)v12);
  v10 = sub_1001E88E8((uint64_t)v12, a4);
  free(v12[0]);
  return v10;
}

CFTypeRef sub_1001E89B8(uint64_t a1, CFTypeRef cf, CFTypeRef *a3)
{
  unint64_t Length;
  uint64_t v7;
  uint64_t *v8;
  void *v10[2];
  __int128 v11;

  if (a1 && (unint64_t)CFDataGetLength(*(CFDataRef *)(a1 + 24)) > 0x13)
  {
    *(_OWORD *)v10 = 0u;
    v11 = 0u;
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 24));
    *(_QWORD *)(a1 + 40) = Length / 0x14;
    *(_QWORD *)(a1 + 48) = Length / 0x14;
    *(_QWORD *)(a1 + 32) = CFDataGetBytePtr(*(CFDataRef *)(a1 + 24));
    v7 = a1 + 32;
    *(_BYTE *)(v7 + 24) = 0;
    v8 = (uint64_t *)sub_1001E8534((uint64_t)cf);
    sub_1001E7B9C(0, (unint64_t *)v7, 0, v8, (char **)v10);
    cf = (CFTypeRef)sub_1001E88E8((uint64_t)v10, a3);
    free(v10[0]);
    return cf;
  }
  if (cf)
  {
    CFRetain(cf);
    return cf;
  }
  return (CFTypeRef)sub_1001E84E0(0, 0, a3);
}

uint64_t sub_1001E8AA0(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v23[2];
  __int128 v24;

  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  v5 = (uint64_t *)sub_1001E8534(a1);
  v6 = (uint64_t *)sub_1001E8534(a2);
  v7 = v5[1];
  if (v7)
  {
    v8 = v6;
    v9 = 0;
    v10 = 0;
    v11 = v6[1];
    do
    {
      if (v9 >= v11)
        break;
      v12 = *v5;
      v13 = *v5 + 20 * v10;
      v14 = *v8;
      if (*v5)
        v15 = v14 == 0;
      else
        v15 = 1;
      if (v15)
      {
        v16 = v14 != 0;
        if (v12)
          goto LABEL_21;
      }
      else
      {
        v17 = v14 + 20 * v9;
        v18 = bswap64(*(_QWORD *)v13);
        v19 = bswap64(*(_QWORD *)v17);
        if (v18 == v19
          && (v18 = bswap64(*(_QWORD *)(v13 + 8)), v19 = bswap64(*(_QWORD *)(v17 + 8)), v18 == v19)
          && (v18 = bswap32(*(_DWORD *)(v13 + 16)), v19 = bswap32(*(_DWORD *)(v17 + 16)), v18 == v19))
        {
          v16 = 0;
        }
        else if (v18 < v19)
        {
          v16 = -1;
        }
        else
        {
          v16 = 1;
        }
      }
      if (!v16)
      {
        sub_1001E7584((char **)v23, (__int128 *)v13);
        v7 = v5[1];
        v10 = sub_1001E79A0(*v5, v7, v10);
        v20 = *v8;
        v11 = v8[1];
        goto LABEL_23;
      }
      if ((v16 & 0x80000000) == 0)
      {
        v20 = *v8;
LABEL_23:
        v9 = sub_1001E79A0(v20, v11, v9);
        continue;
      }
LABEL_21:
      v10 = sub_1001E79A0(v12, v7, v10);
    }
    while (v10 < v7);
  }
  v21 = sub_1001E88E8((uint64_t)v23, a3);
  free(v23[0]);
  return v21;
}

CFDataRef *sub_1001E8C24(uint64_t a1, CFDataRef *cf, CFTypeRef *a3)
{
  uint64_t v5;
  unint64_t Length;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  void *v11[2];
  __int128 v12;

  if (a1 && (v5 = a1, (unint64_t)CFDataGetLength(*(CFDataRef *)(a1 + 24)) > 0x13))
  {
    if (cf && (unint64_t)CFDataGetLength(cf[3]) > 0x13)
    {
      *(_OWORD *)v11 = 0u;
      v12 = 0u;
      Length = CFDataGetLength(*(CFDataRef *)(v5 + 24));
      *(_QWORD *)(v5 + 40) = Length / 0x14;
      *(_QWORD *)(v5 + 48) = Length / 0x14;
      *(_QWORD *)(v5 + 32) = CFDataGetBytePtr(*(CFDataRef *)(v5 + 24));
      v8 = v5 + 32;
      *(_BYTE *)(v8 + 24) = 0;
      v9 = CFDataGetLength(cf[3]);
      cf[5] = (CFDataRef)(v9 / 0x14);
      cf[6] = (CFDataRef)(v9 / 0x14);
      cf[4] = (CFDataRef)CFDataGetBytePtr(cf[3]);
      v10 = (char *)(cf + 4);
      v10[24] = 0;
      sub_1001E79FC((uint64_t *)v8, (uint64_t)v10, (char **)v11);
      v5 = sub_1001E88E8((uint64_t)v11, a3);
      free(v11[0]);
    }
    else
    {
      CFRetain((CFTypeRef)v5);
    }
  }
  else
  {
    if (!cf)
      return (CFDataRef *)sub_1001E84E0(0, 0, a3);
    CFRetain(cf);
    return cf;
  }
  return (CFDataRef *)v5;
}

void sub_1001E8EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001E8F8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onqueueFreeHashBuff");
}

unsigned __int8 *sub_1001E8F94(const __CFDictionary *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  size_t v3;
  char *v4;
  const void *v5;
  NSObject *v6;
  CFTypeRef v7;
  const void *v8;
  NSObject *v9;
  CFTypeRef v10;
  uint64_t v12;
  CFTypeRef v13;
  uint8_t buf[4];
  CFTypeRef v15;

  v1 = (unsigned __int8 *)a1;
  if (a1)
  {
    v13 = 0;
    v2 = sub_10001017C(a1, (uint64_t)&v13);
    if (v2)
    {
      v3 = v2;
      v4 = (char *)&v12 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0);
      memset(v4, 170, v3);
      if (sub_1000101DC((const __CFDictionary *)v1, &v13, 0, (uint64_t)v4, (uint64_t)&v4[v3]))
      {
        v1 = (unsigned __int8 *)malloc_type_malloc(0x20uLL, 0x504AE331uLL);
        CC_SHA256(v4, v3, v1);
      }
      else
      {
        v8 = sub_10000EF14("key-interests");
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v15 = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Failed to DER encode dictionary - %@", buf, 0xCu);
        }

        v10 = v13;
        if (v13)
        {
          v13 = 0;
          CFRelease(v10);
        }
        return 0;
      }
    }
    else
    {
      v5 = sub_10000EF14("key-interests");
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v13;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to get size of dictionary - %@", buf, 0xCu);
      }

      v7 = v13;
      if (v13)
      {
        v13 = 0;
        CFRelease(v7);
      }
      return 0;
    }
  }
  return v1;
}

void sub_1001E9170(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (uint64_t *)v2[1];
  v4 = *(_QWORD **)(a1 + 48);
  if (v3)
  {
    if (!v4)
      goto LABEL_16;
    v5 = *v3;
    v6 = v3[1];
    v8 = v3[2];
    v7 = v3[3];
    v9 = *v4 == v5 && v4[1] == v6;
    v10 = v9 && v4[2] == v8;
    if (!v10 || v4[3] != v7)
      goto LABEL_16;
    free(*(void **)(a1 + 48));
    LOBYTE(v4) = 0;
  }
  else if (v4)
  {
LABEL_16:
    objc_msgSend(v2, "onqueueFreeHashBuff");
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = *(_QWORD *)(a1 + 48);
    LOBYTE(v4) = 1;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)v4;
}

uint64_t sub_1001E91F8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  char *v4;

  if (a3 <= 5 && (unint64_t)a3 - 5 < 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = off_1002EC370[a3][2];
    if (v4)
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v4)(a1, a2, a4);
  }
  SOSCreateError(1040, CFSTR("Not valid ring type"), 0, a4);
  return 0;
}

uint64_t sub_1001E9258(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  char *v7;

  sub_1001D6A98(a1);
  v6 = sub_1002146F0(a1);
  if (v6 > 5 || (unint64_t)v6 - 5 >= 0xFFFFFFFFFFFFFFFDLL)
  {
    SOSCreateError(1040, CFSTR("Not valid ring type"), 0, a3);
    return 0;
  }
  else
  {
    v7 = off_1002EC370[v6][8];
    if (v7)
      return ((uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v7)(a1, 0, a2, a3);
    else
      return 1;
  }
}

uint64_t sub_1001E9300(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  char *v9;

  sub_1001D6A98(a1);
  v8 = sub_1002146F0(a1);
  if (v8 <= 5 && (unint64_t)v8 - 5 < 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = off_1002EC370[v8][13];
    if (v9)
      return ((uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t))v9)(a1, 0, a2, a3, a4);
  }
  SOSCreateError(1040, CFSTR("Not valid ring type"), 0, a4);
  return 0;
}

uint64_t sub_1001E93A8(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  char *v5;

  sub_1001D6A98(a1);
  v4 = sub_1002146F0(a1);
  if (v4 <= 5 && (unint64_t)v4 - 5 < 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = off_1002EC370[v4][14];
    if (v5)
      return ((uint64_t (*)(_QWORD *, uint64_t))v5)(a1, a2);
  }
  SOSCreateError(1040, CFSTR("Not valid ring type"), 0, a2);
  return 0;
}

const void *sub_1001E9440(_QWORD *a1)
{
  sub_1001D6A98(a1);
  if (sub_1002146F0(a1) == 1)
    return sub_100214890((uint64_t)a1);
  SOSCreateError(1040, CFSTR("Not backup ring type"), 0, 0);
  return 0;
}

uint64_t sub_1001E949C(uint64_t result, CFTypeRef cf)
{
  CFTypeRef v2;
  uint64_t v3;
  __CFString **v4;
  CFTypeID v5;

  v2 = cf;
  v3 = result;
  v4 = *(__CFString ***)(result + 40);
  if (!cf || (v5 = CFGetTypeID(cf), result = CFStringGetTypeID(), v5 != result))
  {
    if (v4)
      result = sub_100019F20(-50, v4, CFSTR("object %@ is not a string"), v2);
    v2 = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = v2;
  return result;
}

uint64_t sub_1001E9518(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_1001E952C(_QWORD *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  const void *v11;
  uint64_t v12;

  sub_1001D6A98(a1);
  if (!sub_1001E95D4(a1, a5))
    return 0;
  v10 = SOSBSKBCopyEncoded(a4, a5);
  if (!v10)
    return 0;
  v11 = (const void *)v10;
  if (sub_1002148E4((uint64_t)a1, a3))
    v12 = sub_1001E9300(a1, (uint64_t)v11, a2, a5);
  else
    v12 = 0;
  CFRelease(v11);
  return v12;
}

BOOL sub_1001E95D4(_QWORD *a1, uint64_t a2)
{
  int v3;

  v3 = sub_1002146F0(a1);
  if (v3 != 1)
    SOSCreateError(1040, CFSTR("Not backup ring type"), 0, a2);
  return v3 == 1;
}

uint64_t sub_1001E9620(_QWORD *a1)
{
  uint64_t v2;

  sub_1001D6A98(a1);
  if (sub_1001E95D4(a1, 0) && (v2 = sub_1001E93A8(a1, 0)) != 0)
    return SOSBackupSliceKeyBagCreateFromData(kCFAllocatorDefault, v2, 0);
  else
    return 0;
}

void sub_1001E9684(void *a1, uint64_t a2, CFTypeRef *a3)
{
  const void *v5;
  const void *v6;
  BOOL v7;
  __CFData *v8;
  void *v9;
  id v11;

  v11 = a1;
  if (!a2)
    goto LABEL_11;
  v5 = *(const void **)(a2 + 40);
  v6 = (const void *)SOSRKNullKey();
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5 == v6)
    {
LABEL_11:
      sub_1001E6948(v11, (uint64_t)CFSTR("recoveryKeyBag"), a3);
      goto LABEL_12;
    }
  }
  else if (CFEqual(v5, v6))
  {
    goto LABEL_11;
  }
  v8 = sub_1001F59B4(a2, a3);
  v9 = v11;
  if (v8)
  {
    sub_1001E6A88(v11, (uint64_t)CFSTR("recoveryKeyBag"), (uint64_t)v8, a3);
    CFRelease(v8);
LABEL_12:
    v9 = v11;
  }

}

uint64_t sub_1001E9740(const __CFAllocator *a1, void *a2, CFTypeRef *a3)
{
  const __CFData *v5;
  const __CFData *v6;
  CFTypeID v7;

  v5 = (const __CFData *)sub_1001CA91C(a2, (uint64_t)CFSTR("recoveryKeyBag"));
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    if (v7 == CFDataGetTypeID())
      return sub_1001F5B30(a1, v6, a3);
  }
  if (a3)
    sub_100019F20(-50, (__CFString **)a3, CFSTR("object %@ is not a data"), v6);
  return 0;
}

const __CFData *sub_1001E97E4(const __CFAllocator *a1, void *a2, CFTypeRef *a3)
{
  uint64_t v4;
  const void *v5;
  const __CFData *Copy;
  const void *v7;

  v4 = sub_1001E9740(a1, a2, a3);
  if (!v4)
  {
    Copy = 0;
    if (!a3)
      return Copy;
    goto LABEL_7;
  }
  v5 = (const void *)v4;
  Copy = *(const __CFData **)(v4 + 40);
  if (Copy)
  {
    v7 = (const void *)SOSRKNullKey();
    if (v7 && CFEqual(Copy, v7))
      Copy = 0;
    else
      Copy = CFDataCreateCopy(kCFAllocatorDefault, Copy);
  }
  CFRelease(v5);
  if (a3)
  {
LABEL_7:
    if (!Copy && !*a3)
      SOSErrorCreate(1033, a3, 0, CFSTR("No recovery key available"));
  }
  return Copy;
}

BOOL sub_1001E9894(void *a1, const __CFData *a2, _QWORD *a3)
{
  id v5;
  const __CFData *v6;
  const void *v7;
  id v8;
  id v9;
  _BOOL8 v10;
  uint64_t *v11;
  const void *v12;
  void *v13;
  int HasBackupKey;
  const void *v15;
  NSObject *v16;
  uint64_t v17;
  const void *v18;
  void **v20;
  uint64_t v21;
  _QWORD *(*v22)(uint64_t, _QWORD *);
  void *v23;
  id v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  __int128 buf;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  void *v40;
  id v41;

  v5 = a1;
  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  if ((objc_msgSend(v5, "isInCircle:", a3) & 1) != 0)
  {
    v6 = sub_1001E97E4(kCFAllocatorDefault, v5, 0);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1001E9C08;
    v29[3] = &unk_1002ECDD0;
    v29[4] = v6;
    sub_1001E9C5C(a2, v29);
    if (v6)
      CFRelease(v6);
    v7 = (const void *)sub_1001F5778(kCFAllocatorDefault, v5, a2, 0);
    sub_1001E9684(v5, (uint64_t)v7, 0);
    v28 = 0;
    v20 = _NSConcreteStackBlock;
    v21 = 3221225472;
    v22 = sub_1001E9D28;
    v23 = &unk_1002EC3C8;
    v24 = v5;
    v25 = &v30;
    v26 = &v34;
    v27 = v7;
    v8 = v24;
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v39 = sub_1001EA0C4;
    v40 = &unk_1002EC3F0;
    v9 = v8;
    v41 = v9;
    if (sub_1001DAF90(v9, (uint64_t)CFSTR("RecoveryRing"), (const void **)&v28, &buf, &v20))
    {
      objc_msgSend(v9, "setPublicKeyStatus:forKey:", 2, 2, v20, v21, v22, v23, v24, v25, v26, v27);

    }
    else
    {

      v11 = v31;
      v12 = (const void *)v31[3];
      if (v12)
      {
        v31[3] = 0;
        CFRelease(v12);
        v11 = v31;
      }
      v11[3] = v28;
      *((_BYTE *)v35 + 24) = 0;
    }

    if (v7)
      CFRelease(v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "trust", v20, v21, v22, v23));
    HasBackupKey = SOSPeerInfoHasBackupKey(objc_msgSend(v13, "peerInfo"));

    if (HasBackupKey)
      sub_1001D2D74(v9);
    if (!*((_BYTE *)v35 + 24))
    {
      if (!v31[3])
        SOSErrorCreate(1028, v31 + 3, 0, CFSTR("Failed to set Recovery Key"));
      v15 = sub_10000EF14("recovery");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = v31[3];
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "SetRecoveryPublic Failed: %@", (uint8_t *)&buf, 0xCu);
      }

      v18 = (const void *)v31[3];
      if (a3)
      {
        *a3 = v18;
      }
      else if (v18)
      {
        v31[3] = 0;
        CFRelease(v18);
      }
    }
    v10 = *((_BYTE *)v35 + 24) != 0;
  }
  else
  {
    v10 = 0;
  }
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);

  return v10;
}

void sub_1001E9BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1001E9C08(uint64_t a1, uint64_t a2)
{
  const __CFData *v2;
  _QWORD v3[5];

  v2 = *(const __CFData **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001EA148;
  v3[3] = &unk_1002ECDD0;
  v3[4] = a2;
  sub_1001E9C5C(v2, v3);
}

void sub_1001E9C5C(const __CFData *a1, void *a2)
{
  CFIndex Length;
  __CFString *Mutable;
  const UInt8 *BytePtr;
  CFIndex v6;
  CFIndex v7;
  unsigned int v8;
  void (**v9)(id, __CFString *);

  v9 = a2;
  if (a1)
  {
    Length = CFDataGetLength(a1);
    Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2 * Length);
    BytePtr = CFDataGetBytePtr(a1);
    v6 = CFDataGetLength(a1);
    if (v6 >= 1)
    {
      v7 = v6;
      do
      {
        v8 = *BytePtr++;
        CFStringAppendFormat(Mutable, 0, CFSTR("%02X"), v8);
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    Mutable = CFSTR("(null)");
  }
  v9[2](v9, Mutable);
  CFRelease(Mutable);

}

_QWORD *sub_1001E9D28(uint64_t a1, _QWORD *a2)
{
  CFMutableSetRef Mutable;
  void *v5;
  id v6;
  id v7;
  _BOOL8 v8;
  void *v9;
  const __CFData *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  const void *v17;
  uint64_t v18;
  const void *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char v23;
  const void *v24;
  NSObject *v25;
  uint64_t v26;
  _QWORD v28[5];
  uint8_t buf[4];
  uint64_t v30;

  Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trust"));
  v6 = objc_msgSend(v5, "trustedCircle");
  v7 = objc_msgSend(*(id *)(a1 + 32), "accountKey");
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_1001EA11C;
  v28[3] = &unk_1002EC3A0;
  v28[4] = Mutable;
  SOSCircleForEachValidSyncingPeer(v6, v7, v28);

  v8 = sub_100214928((uint64_t)a2, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  v9 = *(void **)(a1 + 32);
  if (*(_QWORD *)(a1 + 56))
  {
    if (sub_1001D6A14(a2, (uint64_t)objc_msgSend(*(id *)(a1 + 32), "fullPeerInfo"), *(_QWORD *)(a1 + 56), (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      goto LABEL_19;
    }
    v13 = sub_10000EF14("SecError");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      *(_DWORD *)buf = 138412290;
      v30 = v15;
      v16 = "SetRecoveryKey failed at SOSRingSetRecoveryKeyBag #1: %@";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  v10 = (const __CFData *)SOSRKNullKey(v8);
  v11 = sub_1001F5778(kCFAllocatorDefault, v9, v10, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  if (!v11)
  {
    v17 = sub_10000EF14("SecError");
    v14 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      *(_DWORD *)buf = 138412290;
      v30 = v18;
      v16 = "SetRecoveryKey failed at SOSRecoveryKeyBagCreateForAccount: %@";
      goto LABEL_13;
    }
LABEL_14:

    goto LABEL_19;
  }
  v12 = (const void *)v11;
  if (sub_1001D6A14(a2, (uint64_t)objc_msgSend(*(id *)(a1 + 32), "fullPeerInfo"), v11, (CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    v19 = sub_10000EF14("SecError");
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      *(_DWORD *)buf = 138412290;
      v30 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "SetRecoveryKey failed at SOSRingSetRecoveryKeyBag #2: %@", buf, 0xCu);
    }

  }
  CFRelease(v12);
LABEL_19:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trust"));
    v23 = sub_1001E9258(a2, (uint64_t)objc_msgSend(v22, "fullPeerInfo"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

    if ((v23 & 1) == 0)
    {
      v24 = sub_10000EF14("SecError");
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
        *(_DWORD *)buf = 138412290;
        v30 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "SetRecoveryKey failed at SOSRingGenerationSign: %@", buf, 0xCu);
      }

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    }
  }
  if (a2)
    CFRetain(a2);
  return a2;
}

uint64_t sub_1001EA0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerID"));
  v6 = sub_1001E91F8(a2, (uint64_t)v5, 5u, a3);

  return v6;
}

void sub_1001EA11C(uint64_t a1, uint64_t a2)
{
  __CFSet *v2;
  const void *PeerID;

  v2 = *(__CFSet **)(a1 + 32);
  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  CFSetAddValue(v2, PeerID);
}

void sub_1001EA148(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v4 = sub_10000EF14("recovery");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SetRecoveryPublic: %@ from %@", (uint8_t *)&v7, 0x16u);
  }

}

void sub_1001EA20C(void *a1)
{
  id v1;
  NSObject *v2;
  const void *v3;
  uint64_t v4;
  BOOL v5;
  const void *v7;
  NSObject *v8;
  const void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const void *v13;

  v1 = a1;
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "queue"));
  dispatch_assert_queue_V2(v2);

  v3 = (const void *)sub_1001E9740(kCFAllocatorDefault, v1, 0);
  v4 = qword_1003415D8;
  if (v3)
    v5 = qword_1003415D8 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v3 == (const void *)qword_1003415D8)
      goto LABEL_17;
    goto LABEL_10;
  }
  if (!CFEqual(v3, (CFTypeRef)qword_1003415D8))
  {
    v4 = qword_1003415D8;
LABEL_10:
    v7 = sub_10000EF14("recovery");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 138412546;
      v11 = v4;
      v12 = 2112;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Recovery Key changed: old %@ new %@", (uint8_t *)&v10, 0x16u);
    }

    notify_post(kSOSCCRecoveryKeyChanged);
    v9 = (const void *)qword_1003415D8;
    if ((const void *)qword_1003415D8 != v3)
    {
      if (!v3 || (CFRetain(v3), (v9 = (const void *)qword_1003415D8) != 0))
        CFRelease(v9);
      qword_1003415D8 = (uint64_t)v3;
    }
LABEL_17:
    if (!v3)
      return;
  }
  CFRelease(v3);
}

uint64_t sub_1001EA378()
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1001EA3F4;
  block[3] = &unk_1002EC470;
  block[4] = &qword_1003415E8;
  if (qword_1003415E0 != -1)
    dispatch_once(&qword_1003415E0, block);
  return qword_1003415E8;
}

uint64_t sub_1001EA3F4(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_1002EC410);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

void sub_1001EA424(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v2 = (const void *)a1[2];
  if (v2)
  {
    a1[2] = 0;
    CFRelease(v2);
  }
  v3 = (const void *)a1[5];
  if (v3)
  {
    a1[5] = 0;
    CFRelease(v3);
  }
  v4 = (const void *)a1[6];
  if (v4)
  {
    a1[6] = 0;
    CFRelease(v4);
  }
  v5 = (const void *)a1[7];
  if (v5)
  {
    a1[7] = 0;
    CFRelease(v5);
  }
  v6 = (const void *)a1[9];
  if (v6)
  {
    a1[9] = 0;
    CFRelease(v6);
  }
  v7 = (const void *)a1[8];
  if (v7)
  {
    a1[8] = 0;
    CFRelease(v7);
  }
  v8 = (const void *)a1[10];
  if (v8)
  {
    a1[10] = 0;
    CFRelease(v8);
  }
}

uint64_t sub_1001EA4B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  if (*(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88)
    || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96)
    || *(double *)(a1 + 104) != *(double *)(a2 + 104))
  {
    return 0;
  }
  v5 = *(const void **)(a1 + 40);
  v6 = *(const void **)(a2 + 40);
  if (v5 && v6)
  {
    result = CFEqual(v5, v6);
    if (!(_DWORD)result)
      return result;
  }
  else if (v5 != v6)
  {
    return 0;
  }
  v7 = *(const void **)(a1 + 48);
  v8 = *(const void **)(a2 + 48);
  if (v7 && v8)
  {
    result = CFEqual(v7, v8);
    if (!(_DWORD)result)
      return result;
  }
  else if (v7 != v8)
  {
    return 0;
  }
  v9 = *(const void **)(a1 + 56);
  v10 = *(const void **)(a2 + 56);
  if (v9 && v10)
  {
    result = CFEqual(v9, v10);
    if (!(_DWORD)result)
      return result;
  }
  else if (v9 != v10)
  {
    return 0;
  }
  v11 = *(const void **)(a1 + 64);
  v12 = *(const void **)(a2 + 64);
  if (v11 && v12)
  {
    result = CFEqual(v11, v12);
    if (!(_DWORD)result)
      return result;
    goto LABEL_25;
  }
  if (v11 != v12)
    return 0;
LABEL_25:
  v13 = *(const void **)(a1 + 72);
  v14 = *(const void **)(a2 + 72);
  if (v13 && v14)
    return CFEqual(v13, v14) != 0;
  else
    return v13 == v14;
}

CFStringRef sub_1001EA5C8(uint64_t a1)
{
  const __CFData *v2;
  const UInt8 *BytePtr;
  const __CFData *v4;
  const UInt8 *v5;
  const __CFData *v6;
  const UInt8 *v7;
  const __CFAllocator *v8;
  CFDateRef v9;
  __CFString *Mutable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  const __CFAllocator *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  const char *v38;
  CFStringRef v39;
  char *v41;
  _QWORD v42[7];
  _QWORD v43[4];
  _QWORD v44[7];

  v2 = *(const __CFData **)(a1 + 40);
  if (v2)
    BytePtr = CFDataGetBytePtr(v2);
  else
    BytePtr = (const UInt8 *)&byte_1002495A9;
  v4 = *(const __CFData **)(a1 + 48);
  if (v4)
    v5 = CFDataGetBytePtr(v4);
  else
    v5 = (const UInt8 *)&byte_1002495A9;
  v6 = *(const __CFData **)(a1 + 56);
  if (v6)
    v7 = CFDataGetBytePtr(v6);
  else
    v7 = (const UInt8 *)&byte_1002495A9;
  v8 = CFGetAllocator((CFTypeRef)a1);
  v9 = CFDateCreate(v8, *(CFAbsoluteTime *)(a1 + 104));
  Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  v11 = sub_100011C40(0);
  v12 = sub_10001A338(v11);
  if (v12
    && (v13 = (*(uint64_t (**)(uint64_t, const CFStringRef, _QWORD))(v12 + 8))(v12, kSecAttrAccessibleWhenUnlocked, 0)) != 0)
  {
    v14 = v13;
    v43[0] = 0;
    v43[1] = v43;
    v43[2] = 0x2000000000;
    v43[3] = 16;
    v15 = sub_1001EA9C8(a1);
    CFStringAppendFormat(Mutable, 0, CFSTR("{[%zu]"), v15);
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 0x40000000;
    v42[2] = sub_1001EAA9C;
    v42[3] = &unk_1002EC4E8;
    v42[5] = v14;
    v42[6] = Mutable;
    v42[4] = v43;
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 0x40000000;
    v44[2] = sub_1001EAB54;
    v44[3] = &unk_1002EC4C0;
    v44[5] = 0;
    v44[6] = v14;
    v44[4] = v42;
    sub_1001EAC18(a1, 0, (uint64_t)v44);
    CFStringAppend(Mutable, CFSTR("}"));
    _Block_object_dispose(v43, 8);
  }
  else
  {
    CFStringAppend(Mutable, CFSTR("{NO DATASOURCE}"));
  }
  if (!*(_QWORD *)(a1 + 112))
  {
    v41 = (char *)sub_1001EA8F8 + 4 * byte_100249446[sub_1001EACE0((_QWORD *)a1)];
    __asm { BR              X9 }
  }
  v16 = CFGetAllocator((CFTypeRef)a1);
  v17 = "J";
  v19 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 96);
  v20 = *BytePtr;
  v21 = BytePtr[1];
  v22 = "P";
  if ((v19 & 1) == 0)
    v17 = "j";
  v23 = BytePtr[2];
  v24 = BytePtr[3];
  v25 = "D";
  v26 = *v5;
  v27 = v5[1];
  if ((v19 & 2) == 0)
    v22 = "p";
  v28 = v5[2];
  v29 = v5[3];
  v30 = *v7;
  v31 = v7[1];
  v32 = v7[2];
  v33 = v7[3];
  v35 = *(_QWORD *)(a1 + 64);
  v34 = *(_QWORD *)(a1 + 72);
  if ((v19 & 3) == 0)
    v25 = "d";
  v36 = "k";
  if ((v19 & 4) != 0)
    v36 = "K";
  v37 = "z";
  if ((v19 & 5) != 0)
    v37 = "Z";
  if ((v19 & 6) != 0)
    v38 = "H";
  else
    v38 = "h";
  v39 = CFStringCreateWithFormat(v16, 0, CFSTR("<MSG %llu %@ %02X%02X%02X%02X %02X%02X%02X%02X %02X%02X%02X%02X %@ %@ %@ %s%s%s%s%s%s%s>"), v18, v9, v20, v21, v23, v24, v26, v27, v28, v29, v30, v31, v32, v33, v35, v34,
          Mutable,
          "g",
          v17,
          v22,
          v25,
          v36,
          v37,
          v38);
  if (v9)
    CFRelease(v9);
  if (Mutable)
    CFRelease(Mutable);
  return v39;
}

void sub_1001EA8F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;

  CFGetAllocator(v9);
  JUMPOUT(0x1001EA890);
}

void sub_1001EA914(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  const void *v13;

  CFGetAllocator(v13);
  JUMPOUT(0x1001EA890);
}

void sub_1001EA948(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  CFGetAllocator(v10);
  JUMPOUT(0x1001EA890);
}

void sub_1001EA968(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  const void *v16;

  CFGetAllocator(v16);
  JUMPOUT(0x1001EA890);
}

CFStringRef sub_1001EA9A4(uint64_t a1)
{
  sub_100005100();
  return sub_1001EA5C8(a1);
}

CFIndex sub_1001EA9C8(uint64_t a1)
{
  const __CFArray *v2;
  const UInt8 *BytePtr;
  const UInt8 *v5;
  uint64_t v6;
  const UInt8 *v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(const __CFArray **)(a1 + 80);
  if (v2)
    return CFArrayGetCount(v2);
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
  v5 = &BytePtr[CFDataGetLength(*(CFDataRef *)(a1 + 16))];
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v7 = *(const UInt8 **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  v9[2] = sub_1001EAF98;
  v9[3] = &unk_1002EC498;
  v9[4] = &v10;
  sub_1001EAD70(v6, v7, v5, 0, (uint64_t)v9);
  v8 = v11[3];
  _Block_object_dispose(&v10, 8);
  return v8;
}

void sub_1001EAA9C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFData *v5;
  const UInt8 *BytePtr;
  uint64_t v7;
  uint64_t v8;

  v5 = (const __CFData *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 112))(a2, 0);
  BytePtr = CFDataGetBytePtr(v5);
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 48), 0, CFSTR(" %02X%02X%02X%02X"), *BytePtr, BytePtr[1], BytePtr[2], BytePtr[3]);
  if (v5)
    CFRelease(v5);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(_QWORD *)(v7 + 24) - 1;
  *(_QWORD *)(v7 + 24) = v8;
  if (!v8)
  {
    CFStringAppend(*(CFMutableStringRef *)(a1 + 48), CFSTR("..."));
    *a3 = 1;
  }
}

void sub_1001EAB54(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  unint64_t v6;
  CFTypeRef v7;
  const void *v8;
  CFTypeRef cf;

  cf = 0;
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v6 = sub_10002074C(kCFAllocatorDefault, (CFMutableDictionaryRef *)&cf, *(CFTypeRef **)(a1 + 40), (uint64_t)BytePtr, (uint64_t)&BytePtr[Length]);
  v7 = cf;
  if (v6)
  {
    v8 = (const void *)(*(uint64_t (**)(CFTypeRef, _QWORD))(*(_QWORD *)(a1 + 48) + 128))(cf, *(_QWORD *)(a1 + 40));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    if (v8)
      CFRelease(v8);
  }
  if (v7)
    CFRelease(v7);
}

BOOL sub_1001EAC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  BOOL v10;
  const UInt8 *BytePtr;
  CFIndex Length;
  char v15;

  v5 = *(const __CFArray **)(a1 + 80);
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    v7 = Count - 1;
    if (Count >= 1)
    {
      v8 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v8);
        v15 = 0;
        (*(void (**)(uint64_t, const void *, char *))(a3 + 16))(a3, ValueAtIndex, &v15);
        if (v15)
          v10 = 1;
        else
          v10 = v7 == v8;
        ++v8;
      }
      while (!v10);
    }
  }
  else if (*(_QWORD *)(a1 + 24))
  {
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 16));
    return sub_1001EAD70(*(_QWORD *)(a1 + 32), *(const UInt8 **)(a1 + 24), &BytePtr[Length], a2, a3) != 0;
  }
  return 1;
}

uint64_t sub_1001EACE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1[6])
  {
    v2 = a1[8];
    if (v2 && (unint64_t)CFDataGetLength(*(CFDataRef *)(v2 + 24)) > 0x13)
      return 3;
    v3 = a1[9];
    if (v3 && (unint64_t)CFDataGetLength(*(CFDataRef *)(v3 + 24)) > 0x13)
    {
      return 3;
    }
    else if (sub_1001EA9C8((uint64_t)a1))
    {
      return 3;
    }
    else
    {
      return 1;
    }
  }
  else if (a1[9])
  {
    return 2;
  }
  else
  {
    return a1[5] != 0;
  }
}

const UInt8 *sub_1001EAD70(uint64_t a1, const UInt8 *a2, const UInt8 *a3, uint64_t a4, uint64_t a5)
{
  CFDataRef v10;
  NSObject *v11;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint8_t buf[24];

  v16 = 0;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  do
  {
    if (!ccder_decode_tag(&v15, a2, a3) || !v15)
      break;
    *(_QWORD *)buf = 0;
    if (!ccder_decode_constructed_tl(v15, buf, a2, a3))
    {
      SOSErrorCreate(1029, a4, 0, CFSTR("failed to decode object header"));
      return 0;
    }
    if (a5)
    {
      v10 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a2, *(_QWORD *)buf - (_QWORD)a2, kCFAllocatorNull);
      (*(void (**)(uint64_t, CFDataRef, char *))(a5 + 16))(a5, v10, &v16);
      if (v10)
        CFRelease(v10);
    }
    a2 = *(const UInt8 **)buf;
  }
  while (!v16);
  if (a1 == -1)
  {
    v14 = 0;
    a2 = (const UInt8 *)ccder_decode_tl(0, &v14, a2, a3);
    if (v14)
    {
      v13 = sub_10000EF14("SecWarning");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a3 - a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%td length ", buf, 0xCu);
      }
    }
  }
  if (!v16 && a2 != a3)
  {
    v11 = sub_10000EF14("SecWarning");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3 - a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%td trailing bytes after objects DER", buf, 0xCu);
    }
  }
  return a2;
}

uint64_t sub_1001EAF98(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

const __CFArray *sub_1001EAFB0(uint64_t a1)
{
  const __CFArray *result;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  const __CFData *ValueAtIndex;

  result = *(const __CFArray **)(a1 + 80);
  if (result)
  {
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      v6 = 0;
    }
    else
    {
      v4 = Count;
      v5 = 0;
      v6 = 0;
      do
      {
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v5);
        v6 += CFDataGetLength(ValueAtIndex);
        ++v5;
      }
      while (v4 != v5);
    }
  }
  else
  {
    v6 = 0;
    if (*(_QWORD *)(a1 + 112))
      return result;
  }
  if (*(_BYTE *)(a1 + 120))
    return (const __CFArray *)(v6 + 4);
  else
    return (const __CFArray *)ccder_sizeof(0xA000000000000002, v6);
}

uint64_t sub_1001EB054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v6;
  uint64_t v7;
  CFIndex Count;
  CFIndex v10;
  const __CFData *ValueAtIndex;
  CFIndex Length;
  const UInt8 *BytePtr;
  uint64_t v14;
  unint64_t v15;

  v6 = *(const __CFArray **)(a1 + 80);
  if (!v6 && *(_QWORD *)(a1 + 112))
    return a3;
  if (!*(_BYTE *)(a1 + 120))
  {
    v7 = a3;
    if (!v6)
      goto LABEL_10;
LABEL_8:
    Count = CFArrayGetCount(v6);
    v10 = Count - 1;
    if (Count >= 1)
    {
      do
      {
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v10);
        Length = CFDataGetLength(ValueAtIndex);
        BytePtr = CFDataGetBytePtr(ValueAtIndex);
        v7 = ccder_encode_body(Length, BytePtr, a2, v7);
        --v10;
      }
      while (v10 != -1);
    }
    goto LABEL_10;
  }
  v7 = ccder_encode_tl(0, 0, a2, a3);
  v6 = *(const __CFArray **)(a1 + 80);
  if (v6)
    goto LABEL_8;
LABEL_10:
  if (*(_BYTE *)(a1 + 120))
  {
    v14 = ccder_encode_len(0, a2, v7);
    return ccder_encode_tag(0xA000000000000002, a2, v14);
  }
  else
  {
    if (*(_QWORD *)(a1 + 112))
      v15 = 0xA000000000000002;
    else
      v15 = 0x2000000000000010;
    return ccder_encode_constructed_tl(v15, a3, a2, v7);
  }
}

uint64_t sub_1001EB1A8(uint64_t a1, CFDataRef theData, uint64_t a3, uint64_t a4)
{
  CFIndex Length;
  const UInt8 *BytePtr;

  if (!theData)
    return a4;
  Length = CFDataGetLength(theData);
  BytePtr = CFDataGetBytePtr(theData);
  return ccder_encode_implicit_raw_octet_string(a1, Length, BytePtr, a3, a4);
}

const UInt8 *sub_1001EB224(uint64_t a1, CFDataRef *a2, uint64_t a3, uint64_t a4)
{
  const UInt8 *v5;
  const UInt8 *v6;
  CFDataRef v7;
  CFIndex length;

  length = 0;
  v5 = (const UInt8 *)ccder_decode_tl(a1, &length, a3, a4);
  v6 = v5;
  if (a2 && v5)
  {
    v7 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v5, length, kCFAllocatorNull);
    *a2 = v7;
    if (v7)
      v6 += length;
    else
      return 0;
  }
  return v6;
}

const UInt8 *sub_1001EB2A0(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4)
{
  const UInt8 *v7;
  const UInt8 *v8;
  const void *v9;
  const void *v10;
  CFTypeRef v12;
  CFTypeRef cf;

  v12 = 0;
  cf = 0;
  v7 = sub_1001EB224(4, (CFDataRef *)&cf, a3, a4);
  v8 = sub_1001EB224(4, (CFDataRef *)&v12, (uint64_t)v7, a4);
  if (v8)
  {
    *(_QWORD *)(a1 + 64) = sub_1001E8440((const __CFData *)cf, a2);
    v9 = (const void *)sub_1001E8440((const __CFData *)v12, a2);
    *(_QWORD *)(a1 + 72) = v9;
    v10 = *(const void **)(a1 + 64);
    if (!v10 || !v9)
    {
      if (v10)
      {
        *(_QWORD *)(a1 + 64) = 0;
        CFRelease(v10);
        v9 = *(const void **)(a1 + 72);
      }
      if (v9)
      {
        *(_QWORD *)(a1 + 72) = 0;
        CFRelease(v9);
      }
      v8 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return v8;
}

CFDictionaryRef sub_1001EB4E0(CFDictionaryRef result, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef v5;
  CFTypeID v6;
  const __CFAllocator *v7;
  CFIndex v8;
  void *values;
  uint64_t v10;
  uint64_t v11;
  void *keys[3];

  if (result)
  {
    v5 = result;
    v6 = CFGetTypeID(result);
    if (v6 == CFStringGetTypeID())
    {
      if (a2)
      {
        keys[0] = CFSTR("peer-id");
        keys[1] = CFSTR("views");
        if (a3)
        {
          keys[2] = CFSTR("keybag");
          values = v5;
          v10 = a2;
          v11 = a3;
          v7 = kCFAllocatorDefault;
          v8 = 3;
        }
        else
        {
          values = v5;
          v10 = a2;
          v7 = kCFAllocatorDefault;
          v8 = 2;
        }
        return CFDictionaryCreate(v7, (const void **)keys, (const void **)&values, v8, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      }
      else
      {
        return (CFDictionaryRef)CFRetain(v5);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef sub_1001EB620(CFTypeRef cf, _QWORD *a2, _QWORD *a3, __CFString **a4)
{
  CFTypeID v8;
  const void *Value;
  const void *v10;
  CFTypeID v11;
  const void *v12;
  const void *v13;
  CFTypeID v14;
  const void *v15;
  const void *v16;
  CFTypeID v17;
  CFTypeID v18;

  if (!cf || (v8 = CFGetTypeID(cf), v8 != CFDictionaryGetTypeID()))
  {
    if (a2)
      *a2 = SOSViewsGetV0ViewSet();
    if (cf)
    {
      v18 = CFGetTypeID(cf);
      if (v18 == CFStringGetTypeID())
        return cf;
    }
    if (a4)
      sub_100019F20(-50, a4, CFSTR("object %@ is not a string"), cf);
    return 0;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("peer-id"));
  v10 = Value;
  if (!Value || (v11 = CFGetTypeID(Value), v11 != CFStringGetTypeID()))
  {
    if (a4)
      sub_100019F20(-50, a4, CFSTR("object %@ is not a string"), v10);
    v10 = 0;
  }
  v12 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("views"));
  v13 = v12;
  if (!v12 || (v14 = CFGetTypeID(v12), v14 != CFSetGetTypeID()))
  {
    if (a4)
      sub_100019F20(-50, a4, CFSTR("object %@ is not a set"), v13);
    return 0;
  }
  v15 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("keybag"));
  v16 = v15;
  if (v15)
  {
    v17 = CFGetTypeID(v15);
    if (v17 != CFDataGetTypeID())
    {
      if (a4)
        sub_100019F20(-50, a4, CFSTR("object %@ is not an data"), v16);
      return 0;
    }
  }
  if (a3)
    *a3 = v16;
  if (a2)
    *a2 = v13;
  return v10;
}

CFDictionaryRef sub_1001EB7C4(__CFDictionary *cf, const void *a2, const void *a3, int a4, int a5, int a6, int a7, int a8)
{
  CFMutableDictionaryRef MutableCopy;
  CFTypeID v11;
  CFTypeID v12;

  MutableCopy = cf;
  if (a2)
  {
    if (!cf)
      return sub_10012E96C(kCFAllocatorDefault, (int)a2, (int)a3, a4, a5, a6, a7, a8, (uint64_t)CFSTR("views"), (uint64_t)a2);
  }
  else
  {
    sub_10003429C(CFSTR("Execution has encountered an unexpected state"), 0x53C0000Eu);
    if (!MutableCopy)
      return sub_10012E96C(kCFAllocatorDefault, (int)a2, (int)a3, a4, a5, a6, a7, a8, (uint64_t)CFSTR("views"), (uint64_t)a2);
  }
  v11 = CFGetTypeID(MutableCopy);
  if (v11 != sub_1001EB8FC())
  {
    v12 = CFGetTypeID(MutableCopy);
    if (v12 == CFDictionaryGetTypeID())
    {
      MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, MutableCopy);
      CFDictionarySetValue(MutableCopy, CFSTR("views"), a2);
      if (a3)
        CFDictionarySetValue(MutableCopy, CFSTR("keybag"), a3);
      else
        CFDictionaryRemoveValue(MutableCopy, CFSTR("keybag"));
      return MutableCopy;
    }
    return sub_10012E96C(kCFAllocatorDefault, (int)a2, (int)a3, a4, a5, a6, a7, a8, (uint64_t)CFSTR("views"), (uint64_t)a2);
  }
  sub_1001EB978((uint64_t)MutableCopy, (CFSetRef)a2);
  sub_1001EBA6C((uint64_t)MutableCopy, a3);
  CFRetain(MutableCopy);
  return MutableCopy;
}

uint64_t sub_1001EB8FC()
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001EC474;
  block[3] = &unk_1002ED1A0;
  block[4] = &qword_1003415F8;
  if (qword_1003415F0 != -1)
    dispatch_once(&qword_1003415F0, block);
  return qword_1003415F8;
}

void sub_1001EB978(uint64_t a1, CFSetRef theSet)
{
  uint64_t v4;
  int v5;
  CFSetRef v6;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x2020000000;
    v11 = 1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1001EC42C;
    v7[3] = &unk_1002EC5E8;
    v7[4] = &v8;
    v7[5] = v4;
    CFSetApplyFunction(theSet, (CFSetApplierFunction)sub_1001EC460, v7);
    v5 = *((unsigned __int8 *)v9 + 24);
    _Block_object_dispose(&v8, 8);
    if (!v5)
      *(_BYTE *)(a1 + 50) = 0;
  }
  v6 = *(CFSetRef *)(a1 + 24);
  if (v6 != theSet)
  {
    if (!theSet || (CFRetain(theSet), (v6 = *(CFSetRef *)(a1 + 24)) != 0))
      CFRelease(v6);
    *(_QWORD *)(a1 + 24) = theSet;
  }
}

void sub_1001EBA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001EBA6C(uint64_t a1, CFTypeRef cf1)
{
  CFTypeRef v4;
  BOOL v5;
  const void *v6;
  NSObject *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  NSObject *v11;
  uint64_t v12;
  const void *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  CFTypeRef v17;

  v4 = *(CFTypeRef *)(a1 + 112);
  v5 = v4 == 0;
  if (cf1 && v4)
  {
    if (CFEqual(cf1, v4))
      return;
    v5 = *(_QWORD *)(a1 + 112) == 0;
LABEL_7:
    v6 = sub_10000EF14("backup");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 16);
      v14 = 138412546;
      v15 = v8;
      v16 = 2112;
      v17 = cf1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@ backup bag: %@", (uint8_t *)&v14, 0x16u);
    }

    if (*(CFTypeRef *)(a1 + 112) != cf1)
    {
      CFRetain(cf1);
      v9 = *(const void **)(a1 + 112);
      if (v9)
        CFRelease(v9);
      *(_QWORD *)(a1 + 112) = cf1;
    }
    goto LABEL_13;
  }
  if (v4 == cf1)
    return;
  if (cf1)
    goto LABEL_7;
  v10 = sub_10000EF14("SecWarning");
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 16);
    v14 = 138412290;
    v15 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@ keybag for backup unset", (uint8_t *)&v14, 0xCu);
  }

  v13 = *(const void **)(a1 + 112);
  if (!v13)
  {
LABEL_13:
    if (v5)
      return;
    goto LABEL_14;
  }
  CFRelease(v13);
  *(_QWORD *)(a1 + 112) = 0;
  if (!v4)
    return;
LABEL_14:
  sub_1001EBC14(a1);
}

void sub_1001EBC14(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  NSObject *v4;
  id v5;
  void *v6;
  void *v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  __int128 buf;
  BOOL (*v15)(uint64_t, const char *);
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)(a1 + 49) = 0;
  if (*(_QWORD *)(a1 + 112))
  {
    sub_1001EBFEC(a1, 0);
    v2 = *(_QWORD *)(a1 + 16);
    v3 = sub_10000EF14("syncwith");
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SOSCCAccountTriggerSyncWithBackupPeer_server: %@", (uint8_t *)&buf, 0xCu);
    }

    if (v2)
    {
      v5 = sub_10020053C(1);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      if (objc_msgSend(v6, "SOSMonitorModeSOSIsActive"))
      {
        *(_QWORD *)&buf = v2;
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &buf, 1));
        objc_msgSend(v6, "triggerBackupForPeers:", v7);

      }
    }
  }
  else
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 1;
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v15 = sub_1001EBDCC;
    v16 = &unk_1002EC610;
    v17 = &v10;
    v18 = a1;
    v19 = 0;
    v8 = sub_1001EBEC4(a1, 0, &buf);
    if (*((_BYTE *)v11 + 24))
      v9 = v8;
    else
      v9 = 0;
    *((_BYTE *)v11 + 24) = v9;
    _Block_object_dispose(&v10, 8);
  }
}

void sub_1001EBDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001EBDCC(uint64_t a1, const char *a2)
{
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  BOOL v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  const char *v19;

  v4 = sub_10000EF14("backup");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v17 = v6;
    v18 = 2080;
    v19 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@ unlinking journal file %s", buf, 0x16u);
  }

  v7 = unlink(a2);
  result = sub_100032590(v7, *(CFTypeRef **)(a1 + 48), CFSTR("unlink %s"), v8, v9, v10, v11, v12, (char)a2);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v14 + 24))
    v15 = result;
  else
    v15 = 0;
  *(_BYTE *)(v14 + 24) = v15;
  return result;
}

BOOL sub_1001EBEC4(uint64_t a1, CFTypeRef *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  _BOOL8 v12;
  char v14;
  _QWORD v15[5];
  char __b[1025];

  v5 = a3;
  memset(__b, 170, sizeof(__b));
  if (confstr(65537, __b, 0x401uLL))
  {
    v11 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%s/SOSBackup-%@"), __b, *(_QWORD *)(a1 + 16));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 0x40000000;
    v15[2] = sub_1000104A0;
    v15[3] = &unk_1002DB170;
    v15[4] = v5;
    sub_1000137F8(v11, (uint64_t)v15);
    if (v11)
      CFRelease(v11);
    v12 = 1;
  }
  else
  {
    v12 = sub_100032590(-1, a2, CFSTR("confstr on _CS_DARWIN_USER_TEMP_DIR returned an error."), v6, v7, v8, v9, v10, v14);
  }

  return v12;
}

uint64_t sub_1001EBFEC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  BOOL v7;
  const void *v8;
  NSObject *v9;
  uint64_t v10;
  const void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  CFTypeRef v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  _BYTE buf[24];
  void *v31;
  id v32;
  CFTypeRef *v33;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 1;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1001EC294;
  v21[3] = &unk_1002EC638;
  v21[5] = &v22;
  v21[6] = a1;
  v21[4] = &v26;
  v4 = v21;
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_1001EC38C;
  v31 = &unk_1002EC660;
  v32 = v4;
  v33 = &v25;
  v5 = v4;
  v6 = sub_1001EBEC4(a1, &v25, buf);

  if (*((_BYTE *)v27 + 24))
    v7 = v6;
  else
    v7 = 0;
  *((_BYTE *)v27 + 24) = v7;
  if (v7)
  {
    v8 = sub_10000EF14("backup-peer");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@ Wrote reset.", buf, 0xCu);
    }

  }
  else
  {
    v11 = sub_10000EF14("SecWarning");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 16);
      v14 = v23[3];
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%@ failed to write reset to backup journal: %@", buf, 0x16u);
    }

    v15 = (const void *)v23[3];
    if (v15)
    {
      if (a2 && !*a2)
        *a2 = v15;
      else
        CFRelease(v15);
    }
  }
  v16 = *(const void **)(a1 + 72);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v17 = *(const void **)(a1 + 80);
  if (v17)
  {
    *(_QWORD *)(a1 + 80) = 0;
    CFRelease(v17);
  }
  v18 = v27;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)v27 + 24) ^ 1;
  v19 = *((unsigned __int8 *)v18 + 24);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
  return v19;
}

void sub_1001EC268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001EC294(_QWORD *a1, FILE *a2)
{
  uint64_t v4;
  __CFString **v5;
  CFIndex Length;
  uint64_t v7;
  size_t v8;
  _BOOL8 result;
  _QWORD v10[6];

  v4 = *(_QWORD *)(a1[6] + 112);
  v5 = (__CFString **)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v4)
  {
    Length = CFDataGetLength(*(CFDataRef *)(a1[6] + 112));
    v7 = ccder_sizeof_raw_octet_string(Length);
  }
  else
  {
    v7 = 0;
  }
  v8 = ccder_sizeof(0x2000000000000010, v7);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  v10[2] = sub_1001E2BC0;
  v10[3] = &unk_1002EBFC0;
  v10[4] = v4;
  v10[5] = v5;
  result = sub_1001E2C30(a2, v5, v8, (uint64_t)v10);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    if (!*(_QWORD *)(a1[6] + 112))
    {
      result = sub_1001E2E94(a2, 999, (__CFString **)(*(_QWORD *)(a1[5] + 8) + 24));
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t sub_1001EC38C(uint64_t a1, char *__filename)
{
  char v2;
  CFTypeRef *v4;
  FILE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = (char)__filename;
  v4 = *(CFTypeRef **)(a1 + 40);
  v5 = fopen(__filename, "w");
  result = sub_100032590(v5 == 0, v4, CFSTR("fopen %s,%s"), v6, v7, v8, v9, v10, v2);
  if (v5)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    return fclose(v5);
  }
  return result;
}

uint64_t sub_1001EC42C(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = CFSetContainsValue(*(CFSetRef *)(a1 + 40), a2);
  if (!(_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

uint64_t sub_1001EC460(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_1001EC474(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_1002EC508);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

void sub_1001EC4A4(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  v2 = (const void *)a1[2];
  if (v2)
  {
    a1[2] = 0;
    CFRelease(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    a1[3] = 0;
    CFRelease(v3);
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    a1[7] = 0;
    CFRelease(v4);
  }
  v5 = (const void *)a1[8];
  if (v5)
  {
    a1[8] = 0;
    CFRelease(v5);
  }
  v6 = (const void *)a1[9];
  if (v6)
  {
    a1[9] = 0;
    CFRelease(v6);
  }
  v7 = (const void *)a1[10];
  if (v7)
  {
    a1[10] = 0;
    CFRelease(v7);
  }
  v8 = (const void *)a1[11];
  if (v8)
  {
    a1[11] = 0;
    CFRelease(v8);
  }
  v9 = (const void *)a1[13];
  if (v9)
  {
    a1[13] = 0;
    CFRelease(v9);
  }
  v10 = (const void *)a1[12];
  if (v10)
  {
    a1[12] = 0;
    CFRelease(v10);
  }
  v11 = (const void *)a1[14];
  if (v11)
  {
    a1[14] = 0;
    CFRelease(v11);
  }
}

BOOL sub_1001EC568(uint64_t a1, uint64_t a2)
{
  return CFStringCompare(*(CFStringRef *)(a1 + 16), *(CFStringRef *)(a2 + 16), 0) == kCFCompareEqualTo;
}

const __CFString *sub_1001EC590(uint64_t a1)
{
  uint64_t v2;
  CFStringRef v3;
  CFStringRef v4;
  uint64_t v5;
  CFStringRef v6;
  uint64_t v7;
  CFStringRef v8;
  CFStringRef v9;
  CFStringRef v10;
  CFStringRef v11;
  const char *v12;
  const char *v13;
  const char *v14;

  if (!a1)
    return CFSTR("NULL");
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
    v3 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR(" %@%@"), CFSTR("O"), v2);
  else
    v3 = CFSTR(" -  ");
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    v6 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR(" %@%@"), CFSTR("U"), v5);
  else
    v6 = CFSTR(" -  ");
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
    v8 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR(" %@%@"), CFSTR("C"), v7);
  else
    v8 = CFSTR(" -  ");
  v9 = sub_1001EC7A0(*(const __CFArray **)(a1 + 80), (uint64_t)CFSTR("P"));
  v10 = sub_1001EC7A0(*(const __CFArray **)(a1 + 88), (uint64_t)CFSTR("L"));
  v11 = v10;
  if (*(_BYTE *)(a1 + 48))
    v12 = "F";
  else
    v12 = "f";
  v13 = "S";
  if (!*(_BYTE *)(a1 + 49))
    v13 = "s";
  if (*(_BYTE *)(a1 + 50))
    v14 = "K";
  else
    v14 = "k";
  v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("<%@ %s%s%s%@%@%@%@%@>"), *(_QWORD *)(a1 + 16), v12, v13, v14, v3, v6, v8, v9, v10);
  if (v11)
    CFRelease(v11);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
  if (v3)
    CFRelease(v3);
  return v4;
}

const __CFString *sub_1001EC77C(uint64_t a1)
{
  sub_100005100();
  return sub_1001EC590(a1);
}

CFStringRef sub_1001EC7A0(const __CFArray *a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  const void *ValueAtIndex;

  if (!a1)
    return CFSTR(" -  ");
  Count = CFArrayGetCount(a1);
  if (!Count)
    return CFSTR(" -  ");
  v5 = Count;
  ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR(" %@[%ld]%@"), a2, v5, ValueAtIndex);
}

__CFDictionary *sub_1001EC820(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFNumberRef v3;
  CFNumberRef v4;
  CFBooleanRef v5;
  CFBooleanRef v6;
  CFBooleanRef v7;
  const void *v8;
  const void *v9;
  uint64_t valuePtr;

  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  valuePtr = *(_QWORD *)(a1 + 40);
  v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
  CFDictionarySetValue(Mutable, CFSTR("sequence-number"), v3);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)(a1 + 32))
  {
    valuePtr = *(_QWORD *)(a1 + 32);
    v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("vers"), v4);
    if (v4)
      CFRelease(v4);
  }
  if (*(_BYTE *)(a1 + 48))
    v5 = kCFBooleanTrue;
  else
    v5 = kCFBooleanFalse;
  CFDictionarySetValue(Mutable, CFSTR("must-send"), v5);
  if (*(_BYTE *)(a1 + 49))
    v6 = kCFBooleanTrue;
  else
    v6 = kCFBooleanFalse;
  CFDictionarySetValue(Mutable, CFSTR("send-objects"), v6);
  if (*(_BYTE *)(a1 + 50))
    v7 = kCFBooleanTrue;
  else
    v7 = kCFBooleanFalse;
  CFDictionarySetValue(Mutable, CFSTR("has-been-in-sync"), v7);
  v8 = *(const void **)(a1 + 24);
  if (v8)
    CFDictionarySetValue(Mutable, CFSTR("views"), v8);
  v9 = *(const void **)(a1 + 112);
  if (v9 && !CFEqual(*(CFTypeRef *)(a1 + 16), kSOSViewKeychainV0_tomb))
    CFDictionarySetValue(Mutable, CFSTR("keybag"), v9);
  if (!sub_1001ECA38(Mutable, CFSTR("pending-objects"), *(__CFData **)(a1 + 56))
    || !sub_1001ECA38(Mutable, CFSTR("unwanted-manifest"), *(__CFData **)(a1 + 64))
    || !sub_1001ECA38(Mutable, CFSTR("confirmed-manifest"), *(__CFData **)(a1 + 72))
    || !sub_1001ECA84(Mutable, CFSTR("pending-manifest"), *(const __CFArray **)(a1 + 80))
    || !sub_1001ECA84(Mutable, CFSTR("local-manifest"), *(const __CFArray **)(a1 + 88)))
  {
    if (Mutable)
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

uint64_t sub_1001ECA38(__CFDictionary *a1, const void *a2, __CFData *a3)
{
  uint64_t result;

  if (!a3)
    return 1;
  result = (uint64_t)sub_1001E8288(a3);
  if (result)
  {
    CFDictionarySetValue(a1, a2, (const void *)result);
    return 1;
  }
  return result;
}

BOOL sub_1001ECA84(__CFDictionary *a1, const void *a2, const __CFArray *a3)
{
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  __CFData *ValueAtIndex;
  __CFData *v11;

  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (a3)
  {
    Count = CFArrayGetCount(a3);
    if (Count >= 1)
    {
      v8 = Count;
      for (i = 0; i != v8; ++i)
      {
        ValueAtIndex = (__CFData *)CFArrayGetValueAtIndex(a3, i);
        v11 = sub_1001E8288(ValueAtIndex);
        if (v11)
        {
          if (Mutable)
            CFArrayAppendValue(Mutable, v11);
        }
        else if (Mutable)
        {
          CFRelease(Mutable);
          Mutable = 0;
        }
      }
    }
  }
  if (Mutable)
  {
    CFDictionarySetValue(a1, a2, Mutable);
    CFRelease(Mutable);
  }
  return Mutable != 0;
}

const __CFDictionary *sub_1001ECB5C(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  CFTypeID v2;
  BOOL v3;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == sub_1001EB8FC())
      v3 = *((_QWORD *)v1 + 14) == 0;
    else
      v3 = CFDictionaryContainsKey(v1, CFSTR("keybag")) == 0;
    return (const __CFDictionary *)!v3;
  }
  return result;
}

void sub_1001ECBB4(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  NSObject *v16;
  int v17;
  timespec v18;
  const char *v19;
  const void *v20;
  _QWORD *v21;
  const void *v22;
  _QWORD *v23;
  stat v24;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = open(a2, 0x1000000);
  if (sub_100032590(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) >> 31, *(CFTypeRef **)(a1 + 40), CFSTR("open %s"), v4, v5, v6, v7, v8, (char)a2))
  {
    v9 = unlink(a2);
    if (sub_100032590(v9, *(CFTypeRef **)(a1 + 40), CFSTR("unlink %s"), v10, v11, v12, v13, v14, (char)a2))
    {
      v15 = sub_10000EF14("backup");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&v24.st_blksize = v18;
        *(timespec *)v24.st_qspare = v18;
        v24.st_birthtimespec = v18;
        *(timespec *)&v24.st_size = v18;
        v24.st_mtimespec = v18;
        v24.st_ctimespec = v18;
        *(timespec *)&v24.st_uid = v18;
        v24.st_atimespec = v18;
        *(timespec *)&v24.st_dev = v18;
        fstat(v17, &v24);
        v24.st_dev = 136315394;
        *(_QWORD *)&v24.st_mode = a2;
        WORD2(v24.st_ino) = 2048;
        *(__darwin_ino64_t *)((char *)&v24.st_ino + 6) = v24.st_size;
        v19 = "Handing off file %s of size %llu";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v24, 0x16u);
      }
    }
    else
    {
      close(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -1;
      v22 = sub_10000EF14("backup");
      v16 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(_QWORD **)(a1 + 40);
        if (v23)
          v23 = (_QWORD *)*v23;
        v24.st_dev = 136315394;
        *(_QWORD *)&v24.st_mode = a2;
        WORD2(v24.st_ino) = 2112;
        *(__darwin_ino64_t *)((char *)&v24.st_ino + 6) = (__darwin_ino64_t)v23;
        v19 = "Unable to unlink file %s: %@";
        goto LABEL_13;
      }
    }
  }
  else
  {
    v20 = sub_10000EF14("backup");
    v16 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD **)(a1 + 40);
      if (v21)
        v21 = (_QWORD *)*v21;
      v24.st_dev = 136315394;
      *(_QWORD *)&v24.st_mode = a2;
      WORD2(v24.st_ino) = 2112;
      *(__darwin_ino64_t *)((char *)&v24.st_ino + 6) = (__darwin_ino64_t)v21;
      v19 = "Handing off file %s failed, %@";
      goto LABEL_13;
    }
  }

}

BOOL sub_1001ECDD8(uint64_t a1, CFTypeRef *a2, void *a3)
{
  id v3;
  _BOOL4 v4;
  _BOOL8 v5;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  CFTypeRef *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001ECEC0;
  v7[3] = &unk_1002EC598;
  v10 = a2;
  v11 = a1;
  v9 = &v12;
  v3 = a3;
  v8 = v3;
  v4 = sub_1001EBEC4(v11, v10, v7);
  if (*((_BYTE *)v13 + 24))
    v5 = v4;
  else
    v5 = 0;
  *((_BYTE *)v13 + 24) = v5;

  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1001ECEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001ECEC0(uint64_t a1, char *__filename)
{
  char v2;
  CFTypeRef *v4;
  FILE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  const __CFData *v14;
  uint64_t v15;
  const void *v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  int v21;

  v2 = (char)__filename;
  v4 = *(CFTypeRef **)(a1 + 48);
  v5 = fopen(__filename, "a");
  result = sub_100032590(v5 == 0, v4, CFSTR("fopen %s,%s"), v6, v7, v8, v9, v10, v2);
  if (v5)
  {
    v21 = -1;
    v12 = *(_QWORD *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 56);
    if (CFEqual(*(CFTypeRef *)(v13 + 16), kSOSViewKeychainV0_tomb))
    {
      v14 = *(const __CFData **)(v13 + 112);
      if (v14)
        CFRetain(*(CFTypeRef *)(v13 + 112));
    }
    else
    {
      v15 = SOSBackupSliceKeyBagCreateFromData(kCFAllocatorDefault, *(_QWORD *)(v13 + 112), v12);
      if (v15)
      {
        v16 = (const void *)v15;
        v14 = (const __CFData *)SOSBSKBCopyAKSBag(v15, v12);
        CFRelease(v16);
      }
      else
      {
        v14 = 0;
      }
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v14 != 0;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      v17 = sub_100146FEC(v14, 0, &v21, *(CFTypeRef **)(a1 + 48));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v17;
      if (v17)
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        if (v21 != -1)
        {
          v18 = sub_100147114(v21, *(CFTypeRef **)(a1 + 48));
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          if (*(_BYTE *)(v19 + 24))
            v20 = v18;
          else
            v20 = 0;
          *(_BYTE *)(v19 + 24) = v20;
        }
      }
    }
    if (v14)
      CFRelease(v14);
    return fclose(v5);
  }
  return result;
}

BOOL sub_1001ED044(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, __CFArray *a4)
{
  const __CFNumber *Value;
  const __CFNumber *v9;
  uint64_t v10;
  const void *V0ViewSet;
  const void *v13;
  NSObject *v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  const void *v18;
  CFTypeID v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  CFMutableArrayRef v26;
  const void *v27;
  CFMutableArrayRef v28;
  const void *v29;
  BOOL v30;
  _BYTE v31[12];
  __int16 v32;
  const void *v33;

  if (!theDict)
    return 1;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("vers"));
  if (Value)
    CFNumberGetValue(Value, kCFNumberCFIndexType, (void *)(a1 + 32));
  *(_QWORD *)v31 = 0;
  v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("sequence-number"));
  if (v9)
  {
    CFNumberGetValue(v9, kCFNumberSInt64Type, v31);
    v10 = *(_QWORD *)v31;
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = sub_1001ED314(theDict, CFSTR("must-send"));
  *(_BYTE *)(a1 + 49) = sub_1001ED314(theDict, CFSTR("send-objects"));
  *(_BYTE *)(a1 + 50) = sub_1001ED314(theDict, CFSTR("has-been-in-sync"));
  V0ViewSet = CFDictionaryGetValue(theDict, CFSTR("views"));
  if (!V0ViewSet)
  {
    V0ViewSet = (const void *)SOSViewsGetV0ViewSet();
    v13 = sub_10000EF14("peer");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)v31 = 138412546;
      *(_QWORD *)&v31[4] = v15;
      v32 = 2112;
      v33 = V0ViewSet;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%@ had no views, inferring: %@", v31, 0x16u);
    }

  }
  v16 = *(const void **)(a1 + 24);
  if (v16 != V0ViewSet)
  {
    if (!V0ViewSet || (CFRetain(V0ViewSet), (v16 = *(const void **)(a1 + 24)) != 0))
      CFRelease(v16);
    *(_QWORD *)(a1 + 24) = V0ViewSet;
  }
  v17 = CFDictionaryGetValue(theDict, CFSTR("keybag"));
  if (!v17 || (v18 = v17, v19 = CFGetTypeID(v17), v19 != CFDataGetTypeID()))
    v18 = 0;
  sub_1001EBA6C(a1, v18);
  v20 = sub_1000FBBB8(a2, theDict, CFSTR("pending-objects"));
  v21 = *(const void **)(a1 + 56);
  if (v21)
    CFRelease(v21);
  *(_QWORD *)(a1 + 56) = v20;
  v22 = sub_1000FBBB8(a2, theDict, CFSTR("unwanted-manifest"));
  v23 = *(const void **)(a1 + 64);
  if (v23)
    CFRelease(v23);
  *(_QWORD *)(a1 + 64) = v22;
  v24 = sub_1000FBBB8(a2, theDict, CFSTR("confirmed-manifest"));
  v25 = *(const void **)(a1 + 72);
  if (v25)
    CFRelease(v25);
  *(_QWORD *)(a1 + 72) = v24;
  v26 = sub_1000FBC40(a2, theDict, CFSTR("pending-manifest"), a4);
  v27 = *(const void **)(a1 + 80);
  if (v27)
    CFRelease(v27);
  *(_QWORD *)(a1 + 80) = v26;
  v28 = sub_1000FBC40(a2, theDict, CFSTR("local-manifest"), a4);
  v29 = *(const void **)(a1 + 88);
  if (v29)
    CFRelease(v29);
  *(_QWORD *)(a1 + 88) = v28;
  if (v26)
    v30 = v28 == 0;
  else
    v30 = 1;
  return !v30;
}

const __CFBoolean *sub_1001ED314(const __CFDictionary *a1, const void *a2)
{
  const __CFBoolean *result;

  result = (const __CFBoolean *)CFDictionaryGetValue(a1, a2);
  if (result)
    return (const __CFBoolean *)(CFBooleanGetValue(result) != 0);
  return result;
}

_QWORD *sub_1001ED338(uint64_t a1, const void *a2, const __CFDictionary *a3, __CFArray *a4)
{
  uint64_t v8;
  _QWORD *Instance;
  CFDictionaryRef v10;

  v8 = sub_1001EB8FC();
  Instance = (_QWORD *)_CFRuntimeCreateInstance(kCFAllocatorDefault, v8, 112, 0);
  if (a2)
    CFRetain(a2);
  Instance[2] = a2;
  Instance[4] = 0;
  v10 = 0;
  Instance[13] = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!a3)
  {
    v10 = CFDictionaryCreate(kCFAllocatorDefault, 0, 0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    a3 = v10;
  }
  if (!sub_1001ED044((uint64_t)Instance, a1, a3, a4))
  {
    CFRelease(Instance);
    Instance = 0;
  }
  if (v10)
    CFRelease(v10);
  return Instance;
}

void sub_1001ED434(__CFArray **a1, const void *a2)
{
  __CFArray *v3;
  __CFArray *Mutable;

  v3 = *a1;
  if (a2)
  {
    if (v3)
    {
      CFArrayRemoveAllValues(v3);
      Mutable = *a1;
    }
    else
    {
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      *a1 = Mutable;
    }
    CFArrayAppendValue(Mutable, a2);
  }
  else if (v3)
  {
    *a1 = 0;
    CFRelease(v3);
  }
}

const void *sub_1001ED4B0(uint64_t a1)
{
  const __CFArray *v2;

  v2 = *(const __CFArray **)(a1 + 80);
  if (v2 && CFArrayGetCount(v2))
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), 0);
  else
    return 0;
}

void sub_1001ED4F4(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = *(CFTypeRef *)(a1 + 72);
  if (v3 != cf)
  {
    if (!cf || (CFRetain(cf), (v3 = *(CFTypeRef *)(a1 + 72)) != 0))
      CFRelease(v3);
    *(_QWORD *)(a1 + 72) = cf;
  }
}

void sub_1001ED53C(CFArrayRef *a1, const void *a2)
{
  const __CFArray *v3;
  uint64_t Count;
  CFIndex FirstIndexOfValue;
  unint64_t v6;
  CFRange v7;

  v3 = *a1;
  if (*a1)
  {
    if (a2)
    {
      Count = CFArrayGetCount(*a1);
      v7.location = 0;
      v7.length = Count;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v3, v7, a2);
      if (FirstIndexOfValue)
      {
        if (FirstIndexOfValue == -1)
        {
          if (Count >= 4)
          {
            v6 = Count + 1;
            do
            {
              CFArrayRemoveValueAtIndex(v3, v6 - 2);
              --v6;
            }
            while (v6 > 4);
          }
        }
        else
        {
          CFArrayRemoveValueAtIndex(v3, FirstIndexOfValue);
        }
        CFArrayInsertValueAtIndex(v3, 0, a2);
      }
    }
    else
    {
      CFArrayRemoveAllValues(*a1);
    }
  }
  else
  {
    sub_1001ED434(a1, a2);
  }
}

BOOL sub_1001ED610(void *key, CFDictionaryRef theDict)
{
  const void *Value;
  void *v3;
  _BOOL8 v4;

  Value = CFDictionaryGetValue(theDict, key);
  v3 = (void *)objc_claimAutoreleasedReturnValue(Value);
  v4 = v3 != 0;

  return v4;
}

__CFData *sub_1001ED64C(__CFData **a1, const void *a2)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  __CFData *ValueAtIndex;
  __CFData *v9;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  __CFData *v14;
  __CFData *v15;
  __CFData *v16;

  if (!a2)
    return 0;
  v4 = a1[10];
  if (v4)
  {
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      do
      {
        ValueAtIndex = (__CFData *)CFArrayGetValueAtIndex(a1[10], v7);
        v9 = sub_1001E8288(ValueAtIndex);
        if (CFEqual(a2, v9))
          goto LABEL_15;
      }
      while (v6 != ++v7);
    }
  }
  v10 = a1[11];
  if (v10)
  {
    v11 = CFArrayGetCount(v10);
    if (v11 >= 1)
    {
      v12 = v11;
      v13 = 0;
      do
      {
        ValueAtIndex = (__CFData *)CFArrayGetValueAtIndex(a1[11], v13);
        v14 = sub_1001E8288(ValueAtIndex);
        if (CFEqual(a2, v14))
          goto LABEL_15;
      }
      while (v12 != ++v13);
    }
  }
  v15 = a1[9];
  if (!v15)
    return 0;
  v16 = sub_1001E8288(v15);
  if (!CFEqual(a2, v16))
    return 0;
  ValueAtIndex = a1[9];
LABEL_15:
  if (ValueAtIndex)
    CFRetain(ValueAtIndex);
  return ValueAtIndex;
}

void sub_1001ED750(__CFDictionary *a1, __CFData *a2)
{
  __CFData *v4;
  const void *v5;

  v4 = sub_1001E8288(a2);
  if (a2 && v4)
  {
    v5 = (const void *)*((_QWORD *)a2 + 3);
    if (v5)
      CFDictionarySetValue(a1, v4, v5);
  }
}

void sub_1001ED79C(__CFDictionary *a1, CFTypeRef cf)
{
  CFTypeID v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  __CFData *ValueAtIndex;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount((CFArrayRef)cf);
      if (Count >= 1)
      {
        v6 = Count;
        for (i = 0; i != v6; ++i)
        {
          ValueAtIndex = (__CFData *)CFArrayGetValueAtIndex((CFArrayRef)cf, i);
          sub_1001ED750(a1, ValueAtIndex);
        }
      }
    }
  }
}

void sub_1001ED81C(_QWORD *a1, uint64_t a2, uint64_t a3, CFDataRef *a4, CFTypeRef *a5)
{
  CFDataRef *v10;
  uint64_t v11;
  const void *v12;
  NSObject *v13;
  const void *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  CFDataRef *v18;
  unint64_t Length;
  const __CFString *v20;
  const char *v21;
  const __CFString *v22;
  const char *v23;
  CFTypeRef v24;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  CFDataRef *v31;
  __int16 v32;
  CFDataRef *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const __CFString *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const __CFString *v43;

  if ((a2 | 2) == 3 && a4 && (unint64_t)CFDataGetLength(a4[3]) >= 0x14)
  {
    v10 = (CFDataRef *)sub_1001E89B8(a1[9], a4, a5);
    if (!a3)
      goto LABEL_8;
LABEL_7:
    if ((unint64_t)CFDataGetLength(*(CFDataRef *)(a3 + 24)) > 0x13)
      goto LABEL_10;
    goto LABEL_8;
  }
  v10 = 0;
  if (a3)
    goto LABEL_7;
LABEL_8:
  if (!v10)
    return;
  if ((unint64_t)CFDataGetLength(v10[3]) < 0x14)
    goto LABEL_18;
LABEL_10:
  v11 = sub_1001E8930(a1[7], a3, (uint64_t)v10, a5);
  v24 = 0;
  cf = 0;
  sub_1001E8590(a1[7], v11, (uint64_t *)&cf, &v24, a5);
  v12 = sub_10000EF14("peer");
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    goto LABEL_11;
  v15 = a1[2];
  v16 = "sos";
  if (a2 == 3)
    v16 = "ckks";
  if (a2 == 1)
    v16 = "api";
  v23 = v16;
  if (cf && (unint64_t)CFDataGetLength(*((CFDataRef *)cf + 3)) > 0x13)
    v17 = "-";
  else
    v17 = "";
  v18 = (CFDataRef *)cf;
  if (!cf
    || (Length = CFDataGetLength(*((CFDataRef *)cf + 3)),
        v18 = (CFDataRef *)cf,
        v20 = (const __CFString *)cf,
        Length <= 0x13))
  {
    v20 = &stru_1002EE888;
  }
  if (!v24)
    goto LABEL_34;
  if ((unint64_t)CFDataGetLength(*((CFDataRef *)v24 + 3)) <= 0x13)
  {
    v18 = (CFDataRef *)cf;
LABEL_34:
    v21 = "=";
    if (v18 && (unint64_t)CFDataGetLength(v18[3]) >= 0x14)
      v21 = "";
    goto LABEL_39;
  }
  v21 = "+";
LABEL_39:
  if (v24 && (unint64_t)CFDataGetLength(*((CFDataRef *)v24 + 3)) > 0x13)
    v22 = (const __CFString *)v24;
  else
    v22 = &stru_1002EE888;
  *(_DWORD *)buf = 138414338;
  v27 = v15;
  v28 = 2112;
  v29 = a3;
  v30 = 2112;
  v31 = a4;
  v32 = 2112;
  v33 = v10;
  v34 = 2080;
  v35 = v23;
  v36 = 2080;
  v37 = v17;
  v38 = 2112;
  v39 = v20;
  v40 = 2080;
  v41 = v21;
  v42 = 2112;
  v43 = v22;
  _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%@: willCommit R:%@ A:%@ UA:%@ %s O%s%@%s%@", buf, 0x5Cu);
LABEL_11:

  if (cf)
    CFRelease(cf);
  if (v24)
    CFRelease(v24);
  v14 = (const void *)a1[7];
  if (v14)
    CFRelease(v14);
  a1[7] = v11;
  if (v10)
LABEL_18:
    CFRelease(v10);
}

void sub_1001EDB0C(uint64_t a1, FILE *a2, int a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFArray *ValueAtIndex;
  const __CFArray *v10;
  uint64_t v11;
  CFTypeID v12;
  const void *v13;
  int v14;
  CFTypeID v15;
  const __CFData *v16;
  _BOOL4 v17;
  BOOL v18;
  void **v19;
  CFIndex v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  __int128 *BytePtr;
  const void *v24;
  NSObject *v25;
  const void *v26;
  uint64_t *v27;
  const void *v28;
  uint64_t v29;
  CFTypeRef cf;
  void *v31[2];
  __int128 v32;
  void *v33[2];
  __int128 v34;
  uint8_t buf[32];

  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  if (Count >= 1)
  {
    v7 = Count;
    v8 = 0;
    v29 = a3;
    do
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v8);
      v10 = ValueAtIndex;
      cf = 0;
      v11 = *(_QWORD *)(a1 + 48);
      if (ValueAtIndex)
      {
        v12 = CFGetTypeID(ValueAtIndex);
        if (v12 == CFArrayGetTypeID())
        {
          if (CFArrayGetCount(v10) != 1)
          {
            v20 = CFArrayGetCount(v10);
            sub_100019F20(-26275, (__CFString **)&cf, CFSTR("change array count: %ld"), v20);
            v17 = 0;
            v16 = 0;
            v13 = 0;
            goto LABEL_16;
          }
          v13 = CFArrayGetValueAtIndex(v10, 0);
          v14 = 1;
          if (!v13)
            goto LABEL_12;
        }
        else
        {
          v14 = 0;
          v13 = v10;
        }
        v15 = CFGetTypeID(v13);
        if (v15 == CFDataGetTypeID())
        {
          v16 = (const __CFData *)CFRetain(v13);
          v13 = 0;
          goto LABEL_13;
        }
      }
      else
      {
        v14 = 0;
        v13 = 0;
      }
LABEL_12:
      v16 = (const __CFData *)(*(uint64_t (**)(const void *, CFTypeRef *))(v11 + 112))(v13, &cf);
LABEL_13:
      v17 = v16 != 0;
      if (v14)
      {
        v18 = sub_1001E2D24(a2, v16, (__CFString **)&cf);
        v19 = v33;
        goto LABEL_20;
      }
LABEL_16:
      v21 = (const __CFDictionary *)(*(uint64_t (**)(const void *, uint64_t, CFTypeRef *))(*(_QWORD *)(a1 + 48)
                                                                                                  + 144))(v13, v29, &cf);
      if (v21)
      {
        v22 = v21;
        v18 = sub_1001E2DF8(a2, v21, (__CFString **)&cf);
        CFRelease(v22);
      }
      else
      {
        v18 = 0;
      }
      v19 = v31;
LABEL_20:
      BytePtr = (__int128 *)CFDataGetBytePtr(v16);
      sub_1001E7584((char **)v19, BytePtr);
      *((_BYTE *)v19 + 24) = 1;
      if (v17 && v18)
        goto LABEL_25;
      v24 = sub_10000EF14("SecError");
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = cf;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "bad change %@: %@", buf, 0x16u);
      }

      if (v17)
LABEL_25:
        CFRelease(v16);
      if (cf)
        CFRelease(cf);
      ++v8;
    }
    while (v7 != v8);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    memset(buf, 0, sizeof(buf));
    sub_1001E7700((char **)v33);
    sub_1001E7700((char **)v31);
    v26 = sub_1001ED4B0(*(_QWORD *)(a1 + 56));
    v27 = (uint64_t *)sub_1001E8534((uint64_t)v26);
    sub_1001E7D1C(v27, (unint64_t *)v33, (uint64_t)v31, (char **)buf);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    v28 = (const void *)sub_1001E88E8((uint64_t)buf, *(CFTypeRef **)(a1 + 64));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v28 != 0;
    sub_1001ED434((__CFArray **)(*(_QWORD *)(a1 + 56) + 80), v28);
    if (v28)
      CFRelease(v28);
    free(*(void **)buf);
  }
  free(v33[0]);
  free(v31[0]);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 49))
    sub_1001E2E94(a2, 799, *(__CFString ***)(a1 + 64));
}

uint64_t sub_1001EDE80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6, void *a7, const void *a8, SOSEnginePeerMessageCallBackInfo **a9, CFTypeRef *a10)
{
  id v15;
  const void *v16;
  NSObject *v17;
  uint64_t v18;
  const __CFData *v19;
  CFDataRef Copy;
  void *v21;
  const void *v22;
  NSObject *v23;
  CFTypeRef v24;
  const void *v25;
  NSObject *v26;
  SOSEnginePeerMessageCallBackInfo *v27;
  SOSEnginePeerMessageCallBackInfo *v28;
  _QWORD *v29;
  _BOOL4 v30;
  SOSEnginePeerMessageCallBackInfo *v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  BOOL v40;
  id v41;
  const __CFDictionary *v42;
  const __CFDictionary *v43;
  CFTypeID v44;
  const void *v45;
  NSObject *v46;
  const void *v47;
  NSObject *v48;
  CFDataRef *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t Instance;
  uint64_t v53;
  void *v54;
  CFDataRef *v55;
  const void *v56;
  NSObject *v57;
  CFTypeRef v58;
  CFTypeRef v59;
  const void *v60;
  NSObject *v61;
  const void *v62;
  NSObject *v63;
  const void *v64;
  const __CFString *v66;
  const void *v67;
  NSObject *v68;
  CFTypeRef v69;
  CFTypeRef v70;
  CFTypeRef v71;
  CFTypeRef v72;
  CFTypeRef v73;
  CFTypeRef v74;
  const void *v75;
  NSObject *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  CFDataRef *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  CFDataRef *v91;
  unint64_t v92;
  uint64_t v93;
  CFDataRef *v94;
  CFDataRef *v95;
  CFMutableArrayRef v96;
  uint64_t v97;
  uint64_t v98;
  const void *v99;
  uint64_t v100;
  const void *v101;
  NSObject *v102;
  uint64_t v103;
  const void *v104;
  CFTypeRef v105;
  CFTypeRef v106;
  CFDataRef v107;
  const void *v108;
  NSObject *v109;
  uint64_t v110;
  const void *v111;
  CFDataRef *v112;
  uint64_t v113;
  CFDataRef *v114;
  uint64_t v115;
  const void *v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  __CFData *v121;
  __CFData *v122;
  NSObject *v123;
  __CFData *v124;
  __CFData *v125;
  NSObject *v126;
  __CFData *v127;
  __CFData *v128;
  NSObject *v129;
  char v130;
  const void *v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  const void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const __CFData *v143;
  CFIndex Length;
  char *v145;
  const __CFData *v146;
  CFIndex v147;
  char *v148;
  const __CFData *v149;
  CFIndex v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  CFIndex v157;
  uint64_t v158;
  CFIndex v159;
  char *v160;
  CFIndex v161;
  __CFData *Mutable;
  __CFData *v163;
  UInt8 *MutableBytePtr;
  UInt8 *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const __CFData *v171;
  const void *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  const __CFData *v181;
  uint64_t v182;
  uint64_t v183;
  const __CFData *v184;
  double v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  NSObject *v199;
  SOSEnginePeerMessageCallBackInfo *v200;
  SOSEnginePeerMessageCallBackInfo *v201;
  id v202;
  SOSEnginePeerMessageCallBackInfo *v203;
  CFTypeRef v204;
  CFTypeRef v205;
  const void *v206;
  const void *v207;
  NSObject *v208;
  uint64_t v209;
  uint64_t v210;
  const char *v211;
  const void *v212;
  CFStringRef v213;
  CFMutableDataRef v214;
  CFMutableDataRef MutableCopy;
  uint64_t v216;
  const __CFData *v217;
  NSObject *v218;
  const void *v219;
  NSObject *v220;
  CFTypeRef v221;
  const void *v222;
  NSObject *v223;
  CFTypeRef v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  CFIndex v228;
  const __CFString *v229;
  CFTypeRef v230;
  const void *v231;
  void *v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  const char *v237;
  const char *v238;
  CFDataRef v239;
  const __CFData *v240;
  const char *v241;
  uint64_t v242;
  CFDataRef theData;
  CFDataRef theDataa;
  const char *v245;
  UInt8 *v246;
  dispatch_queue_t queue;
  NSObject *queuec;
  dispatch_queue_t queuea;
  dispatch_queue_t queueb;
  CFDataRef *v251;
  CFDataRef *v252;
  uint64_t v253;
  CFDataRef *v254;
  CFMutableDataRef v255;
  CFDataRef *cf1;
  __CFString *cf1a;
  uint64_t v258;
  void *v260;
  _QWORD v261[4];
  id v262;
  _QWORD v263[4];
  id v264;
  CFTypeRef v265[14];
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD v270[4];
  CFTypeRef v271;
  CFTypeRef v272;
  CFTypeRef v273;
  CFTypeRef v274;
  CFTypeRef cf;
  CFTypeRef v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  unint64_t v280;
  uint8_t v281[4];
  CFMutableArrayRef v282;
  __int16 v283;
  CFTypeRef v284;
  _BYTE buf[24];
  const char *v286;
  _OWORD v287[2];
  const char *v288;
  __int16 v289;
  unint64_t v290;
  __int16 v291;
  unint64_t v292;
  __int16 v293;
  unint64_t v294;
  __int16 v295;
  unint64_t v296;
  __int16 v297;
  unint64_t v298;
  __int16 v299;
  unint64_t v300;

  v15 = a1;
  if (a5)
  {
    v258 = a2;
    v260 = v15;
    v16 = sub_10000EF14("transport");
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "coder state: %@", buf, 0xCu);
    }

    v18 = *(_QWORD *)(a5 + 24);
    if (!v18 || !SecOTRSGetIsReadyForMessages(v18) || *(_BYTE *)(a5 + 32))
    {
      v19 = *(const __CFData **)(a5 + 40);
      if (v19)
        Copy = CFDataCreateCopy(kCFAllocatorDefault, v19);
      else
        Copy = 0;
      *a6 = Copy;
      if (-[OTSOSActualAdapter sosEnabled]_0())
        *(_BYTE *)(a2 + 105) = 1;
      v25 = sub_10000EF14("transport");
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        v66 = CFSTR("sending negotiation message.");
        if (!*a6)
          v66 = CFSTR("waiting for negotiation message.");
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a7;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v66;
        _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%@ negotiating, %@", buf, 0x16u);
      }

      v27 = objc_opt_new(SOSEnginePeerMessageCallBackInfo);
      -[SOSEnginePeerMessageCallBackInfo setCallbackBlock:](v27, "setCallbackBlock:", 0);
      -[SOSEnginePeerMessageCallBackInfo setCoder:](v27, "setCoder:", a5);
      *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
      objc_initWeak((id *)buf, v27);
      v261[0] = _NSConcreteStackBlock;
      v261[1] = 3221225472;
      v261[2] = sub_1001F0368;
      v261[3] = &unk_1002EC688;
      objc_copyWeak(&v262, (id *)buf);
      v28 = v27;
      v29 = v261;
      v30 = !-[OTSOSActualAdapter sosEnabled]_0();
      if (!v28)
        LOBYTE(v30) = 1;
      if (!v30)
        -[SOSEnginePeerMessageCallBackInfo setCallbackBlock:](v28, "setCallbackBlock:", v29);

      v31 = objc_retainAutorelease(v28);
      *a9 = v31;
      objc_destroyWeak(&v262);
      objc_destroyWeak((id *)buf);

      v32 = 1;
      goto LABEL_21;
    }
    v47 = sub_10000EF14("transport");
    v48 = objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a7;
      _os_log_debug_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "%@ Coder can wrap, getting message from engine", buf, 0xCu);
    }

    if (!-[OTSOSActualAdapter sosEnabled]_0())
    {
      SOSCCSetSOSDisabledError(a10);
      goto LABEL_341;
    }
    v49 = (CFDataRef *)sub_1000FFD34(a2, a4, (uint64_t)a10);
    v277 = 0;
    v278 = &v277;
    v279 = 0x2020000000;
    v280 = 0xAAAAAAAAAAAAAAAALL;
    v50 = *(_QWORD *)(a4 + 32);
    v51 = sub_1001EA378();
    Instance = _CFRuntimeCreateInstance(kCFAllocatorDefault, v51, 112, 0);
    *(_QWORD *)(Instance + 112) = v50;
    v280 = Instance;
    v54 = *(void **)(a4 + 64);
    v53 = *(_QWORD *)(a4 + 72);
    cf = 0;
    v276 = 0;
    v273 = 0;
    v274 = 0;
    v271 = 0;
    v272 = 0;
    v55 = *(CFDataRef **)(a4 + 56);
    v254 = v49;
    cf1 = (CFDataRef *)v53;
    sub_1001E8590(v53, (uint64_t)v49, (uint64_t *)&v276, &cf, a10);
    sub_1001E8590((uint64_t)cf, (uint64_t)v55, (uint64_t *)&v274, &v273, a10);
    if (v273 && (unint64_t)CFDataGetLength(*((CFDataRef *)v273 + 3)) >= 0x14)
    {
      v56 = sub_10000EF14("SecError");
      v57 = objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a4;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v273;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "%@ ASSERTION FAILURE purging excess pendingObjects: %@", buf, 0x16u);
      }

      v58 = sub_1001E89B8((uint64_t)v273, v55, a10);
      v59 = *(CFTypeRef *)(a4 + 56);
      if (v59 != v58)
      {
        if (!v58 || (CFRetain(v58), (v59 = *(CFTypeRef *)(a4 + 56)) != 0))
          CFRelease(v59);
        *(_QWORD *)(a4 + 56) = v58;
      }
      if (v58)
      {
        CFRelease(v58);
        v55 = *(CFDataRef **)(a4 + 56);
      }
      else
      {
        v55 = 0;
      }
    }
    v251 = v55;
    sub_1001E8590((uint64_t)v276, (uint64_t)v54, (uint64_t *)&v272, &v271, a10);
    if (v271 && (unint64_t)CFDataGetLength(*((CFDataRef *)v271 + 3)) >= 0x14)
    {
      v67 = sub_10000EF14("SecError");
      v68 = objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a4;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v271;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "%@ ASSERTION FAILURE purging excess unwanted: %@", buf, 0x16u);
      }

      v69 = sub_1001E89B8((uint64_t)v271, v54, a10);
      v70 = *(CFTypeRef *)(a4 + 64);
      if (v70 != v69)
      {
        if (!v69 || (CFRetain(v69), (v70 = *(CFTypeRef *)(a4 + 64)) != 0))
          CFRelease(v70);
        *(_QWORD *)(a4 + 64) = v69;
      }
      if (v69)
      {
        CFRelease(v69);
        v54 = *(void **)(a4 + 64);
      }
      else
      {
        v54 = 0;
      }
    }
    v71 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v71);
    }
    v72 = v273;
    if (v273)
    {
      v273 = 0;
      CFRelease(v72);
    }
    v73 = v276;
    if (v276)
    {
      v276 = 0;
      CFRelease(v73);
    }
    v74 = v271;
    if (v271)
    {
      v271 = 0;
      CFRelease(v74);
    }
    v75 = sub_10000EF14("engine");
    v76 = objc_claimAutoreleasedReturnValue(v75);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      queue = *(dispatch_queue_t *)(a4 + 16);
      v77 = "L";
      if (!v49)
        v77 = "l";
      theData = *(CFDataRef *)(v258 + 24);
      v245 = v77;
      if (cf1)
        v78 = "C";
      else
        v78 = "0";
      v79 = "P";
      if (!v55)
        v79 = "0";
      v239 = (CFDataRef)v79;
      v241 = v78;
      if (*(_BYTE *)(a4 + 49))
        v80 = "O";
      else
        v80 = "o";
      if (*(_BYTE *)(a4 + 48))
        v81 = "S";
      else
        v81 = "s";
      v237 = v81;
      v238 = v80;
      if (v49)
        v236 = CFDataGetLength(v49[3]) / 0x14uLL;
      else
        v236 = 0;
      if (cf1)
        v235 = CFDataGetLength(cf1[3]) / 0x14uLL;
      else
        v235 = 0;
      if (v55)
        v234 = CFDataGetLength(v55[3]) / 0x14uLL;
      else
        v234 = 0;
      v82 = (CFDataRef *)v54;
      if (v274)
        v83 = CFDataGetLength(*((CFDataRef *)v274 + 3)) / 0x14uLL;
      else
        v83 = 0;
      if (v272)
        v84 = CFDataGetLength(*((CFDataRef *)v272 + 3)) / 0x14uLL;
      else
        v84 = 0;
      if (v82)
        v85 = CFDataGetLength(v82[3]) / 0x14uLL;
      else
        v85 = 0;
      *(_DWORD *)buf = 138415362;
      *(_QWORD *)&buf[4] = theData;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = queue;
      *(_WORD *)&buf[22] = 2080;
      v286 = v245;
      LOWORD(v287[0]) = 2080;
      *(_QWORD *)((char *)v287 + 2) = v241;
      WORD5(v287[0]) = 2080;
      *(_QWORD *)((char *)v287 + 12) = v239;
      WORD2(v287[1]) = 2080;
      *(_QWORD *)((char *)&v287[1] + 6) = v238;
      HIWORD(v287[1]) = 2080;
      v288 = v237;
      v289 = 2048;
      v290 = v236;
      v291 = 2048;
      v292 = v235;
      v293 = 2048;
      v294 = v234;
      v295 = 2048;
      v296 = v83;
      v297 = 2048;
      v298 = v84;
      v299 = 2048;
      v300 = v85;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "%@:%@: send state for peer [%s%s%s][%s%s] local:%zu confirmed:%zu pending:%zu, extra:%zu, missing:%zu unwanted:%zu", buf, 0x84u);
      v49 = v254;
    }

    if (!cf1)
    {
      if (v251)
        CFRetain(v251);
      if (v272 && (unint64_t)CFDataGetLength(*((CFDataRef *)v272 + 3)) > 0x13)
      {
        queuea = 0;
      }
      else
      {
        v92 = (unint64_t)v274;
        if (v274)
          v92 = CFDataGetLength(*((CFDataRef *)v274 + 3)) / 0x14uLL;
        queuea = 0;
        if (!v92)
        {
          v93 = 0;
          v94 = 0;
          v95 = v251;
          if (!v251)
          {
LABEL_206:
            v252 = (CFDataRef *)v93;
            v113 = *(_QWORD *)(a4 + 56);
            if (!v113 || (v114 = v49, (unint64_t)CFDataGetLength(*(CFDataRef *)(v113 + 24)) <= 0x13))
            {
              if (!v274 || (v114 = v49, (unint64_t)CFDataGetLength(*((CFDataRef *)v274 + 3)) <= 0x13))
              {
                if (!v272 || (v114 = v49, (unint64_t)CFDataGetLength(*((CFDataRef *)v272 + 3)) <= 0x13))
                {
                  v115 = *(_QWORD *)(a4 + 64);
                  v114 = v49;
                  if (v115)
                  {
                    v114 = v49;
                    if ((unint64_t)CFDataGetLength(*(CFDataRef *)(v115 + 24)) >= 0x14)
                    {
                      v116 = sub_10000EF14("engine");
                      v117 = objc_claimAutoreleasedReturnValue(v116);
                      if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
                      {
                        v118 = *(_QWORD *)(a4 + 16);
                        v119 = *(_QWORD *)(v258 + 24);
                        *(_DWORD *)buf = 138412546;
                        *(_QWORD *)&buf[4] = v119;
                        *(_WORD *)&buf[12] = 2112;
                        *(_QWORD *)&buf[14] = v118;
                        _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "%@:%@: only have differences in unwanted set; lying to peer to stop sync",
                          buf,
                          0x16u);
                      }

                      v114 = cf1;
                    }
                  }
                }
              }
            }
            v120 = (_QWORD *)v278[3];
            if (v120)
            {
              v121 = sub_1001E8288((__CFData *)cf1);
              v122 = v121;
              if (v121)
                CFRetain(v121);
              v120[6] = v122;
              v123 = sub_10000EF14("engine");
              if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
              {
                v174 = v120[6];
                v175 = (unint64_t)cf1;
                if (cf1)
                  v175 = CFDataGetLength(cf1[3]) / 0x14uLL;
                *(_DWORD *)buf = 138412546;
                *(_QWORD *)&buf[4] = v174;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v175;
                _os_log_debug_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEBUG, "SOSMessageSetManifests: setting base digest to %@ %zu", buf, 0x16u);
              }
              v124 = sub_1001E8288((__CFData *)v252);
              v125 = v124;
              if (v124)
                CFRetain(v124);
              v120[7] = v125;
              v126 = sub_10000EF14("engine");
              if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
              {
                v176 = v120[7];
                v177 = (unint64_t)v252;
                if (v252)
                  v177 = CFDataGetLength(v252[3]) / 0x14uLL;
                *(_DWORD *)buf = 138412546;
                *(_QWORD *)&buf[4] = v176;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v177;
                _os_log_debug_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEBUG, "SOSMessageSetManifests: setting proposed digest to %@ %zu", buf, 0x16u);
              }
              v127 = sub_1001E8288((__CFData *)v114);
              v128 = v127;
              if (v127)
                CFRetain(v127);
              v120[5] = v128;
              v129 = sub_10000EF14("engine");
              if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
              {
                v178 = v120[5];
                if (v114)
                  v179 = CFDataGetLength(v114[3]) / 0x14uLL;
                else
                  v179 = 0;
                *(_DWORD *)buf = 138412546;
                *(_QWORD *)&buf[4] = v178;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v179;
                _os_log_debug_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEBUG, "SOSMessageSetManifests: setting sender digest to %@ %zu", buf, 0x16u);
              }
              if (v252)
              {
                *(_QWORD *)buf = 0;
                v130 = sub_1001E8590((uint64_t)cf1, (uint64_t)v252, v120 + 8, (const void **)buf, a10);
                if (v120[14])
                {
                  v120[9] = sub_1001E89B8((uint64_t)queuea, *(CFTypeRef *)buf, a10);
                  if (*(_QWORD *)buf)
                    CFRelease(*(CFTypeRef *)buf);
                }
                else
                {
                  v120[9] = *(_QWORD *)buf;
                }
                if ((v130 & 1) == 0)
                {
                  v131 = sub_10000EF14("engine");
                  v132 = objc_claimAutoreleasedReturnValue(v131);
                  if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
                  {
                    v133 = *(_QWORD *)(a4 + 16);
                    v134 = *(_QWORD *)(v258 + 24);
                    *(_DWORD *)buf = 138412546;
                    *(_QWORD *)&buf[4] = v134;
                    *(_WORD *)&buf[12] = 2112;
                    *(_QWORD *)&buf[14] = v133;
                    _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "%@:%@: failed to set message manifests", buf, 0x16u);
                  }

                  v135 = (const void *)v278[3];
                  if (v135)
                  {
                    v278[3] = 0;
                    CFRelease(v135);
                  }
                }
              }
            }
            if (v94)
              CFRelease(v94);
            v136 = v278[3];
            if (!v136)
              goto LABEL_270;
            v137 = *(_QWORD *)(a4 + 40) + 1;
            *(_QWORD *)(a4 + 40) = v137;
            *(_QWORD *)(v136 + 96) = v137;
            if (!*(_QWORD *)(v136 + 112))
            {
              *(_BYTE *)(v136 + 120) = 0;
              v152 = (char *)&loc_1001EF328 + 4 * word_10024944A[sub_1001EACE0((_QWORD *)v136)];
              __asm { BR              X9 }
            }
            *(double *)(v136 + 104) = floor(CFAbsoluteTimeGetCurrent());
            if (*(_QWORD *)(v136 + 40))
            {
              *(_QWORD *)buf = *(_QWORD *)(v136 + 88);
              v138 = sub_100021644();
              v139 = ccder_sizeof(24, v138);
              v140 = ccder_sizeof_uint64(*(_QWORD *)(v136 + 96));
              v141 = ccn_bitlen(1, buf);
              v142 = v140 + v139 + ccder_sizeof(3, ((unint64_t)(v141 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8 | 1);
              v143 = *(const __CFData **)(v136 + 40);
              if (v143)
              {
                Length = CFDataGetLength(v143);
                v143 = (const __CFData *)ccder_sizeof_implicit_raw_octet_string(4, Length);
              }
              v145 = (char *)v143 + v142;
              v146 = *(const __CFData **)(v136 + 48);
              if (v146)
              {
                v147 = CFDataGetLength(v146);
                v146 = (const __CFData *)ccder_sizeof_implicit_raw_octet_string(0x8000000000000000, v147);
              }
              v148 = (char *)v146 + (_QWORD)v145;
              v149 = *(const __CFData **)(v136 + 56);
              if (v149)
              {
                v150 = CFDataGetLength(v149);
                v149 = (const __CFData *)ccder_sizeof_implicit_raw_octet_string(0x8000000000000001, v150);
              }
              v151 = ccder_sizeof(0x2000000000000010, (char *)v149 + (_QWORD)v148);
            }
            else
            {
              v151 = 0;
            }
            v153 = *(_QWORD *)(v136 + 64);
            v154 = *(_QWORD *)(v136 + 72);
            if (*(_OWORD *)(v136 + 64) == 0)
            {
              v155 = 0;
            }
            else
            {
              v156 = *(_QWORD *)(v136 + 112);
              if (v153)
              {
                v157 = CFDataGetLength(*(CFDataRef *)(v153 + 24));
                v154 = *(_QWORD *)(v136 + 72);
              }
              else
              {
                v157 = 0;
              }
              v158 = ccder_sizeof(4, v157);
              if (v154)
                v159 = CFDataGetLength(*(CFDataRef *)(v154 + 24));
              else
                v159 = 0;
              v155 = ccder_sizeof(4, v159) + v158;
              if (v156)
                v155 = ccder_sizeof(0xA000000000000000, v155);
            }
            v160 = (char *)sub_1001EAFB0(v136) + v155 + v151;
            v161 = *(_BYTE *)(v136 + 120) ? (CFIndex)(v160 + 4) : ccder_sizeof(0x2000000000000010, v160);
            Mutable = CFDataCreateMutable(0, v161);
            if (Mutable)
            {
              v163 = Mutable;
              CFDataSetLength(Mutable, v161);
              queueb = (dispatch_queue_t)v163;
              MutableBytePtr = CFDataGetMutableBytePtr(v163);
              v165 = &MutableBytePtr[v161];
              v166 = (uint64_t)MutableBytePtr;
              v167 = (uint64_t)v165;
              if (*(_BYTE *)(v136 + 120))
                v167 = ccder_encode_tl(0, 0, MutableBytePtr, v165);
              v168 = sub_1001EB054(v136, v166, v167);
              v170 = *(_QWORD *)(v136 + 64);
              v169 = *(_QWORD *)(v136 + 72);
              v246 = v165;
              if (*(_OWORD *)(v136 + 64) != 0)
              {
                if (v170)
                  v171 = *(const __CFData **)(v170 + 24);
                else
                  v171 = 0;
                v180 = *(_QWORD *)(v136 + 112);
                if (v169)
                  v181 = *(const __CFData **)(v169 + 24);
                else
                  v181 = 0;
                v182 = sub_1001EB1A8(4, v181, v166, v168);
                v183 = sub_1001EB1A8(4, v171, v166, v182);
                if (v180)
                  v168 = ccder_encode_constructed_tl(0xA000000000000000, v168, v166, v183);
                else
                  v168 = v183;
              }
              v184 = *(const __CFData **)(v136 + 40);
              if (v184)
              {
                v242 = v168;
                theDataa = *(CFDataRef *)(v136 + 96);
                *(_QWORD *)buf = *(_QWORD *)(v136 + 88);
                v185 = *(double *)(v136 + 104);
                v240 = *(const __CFData **)(v136 + 48);
                v186 = sub_1001EB1A8(0x8000000000000001, *(CFDataRef *)(v136 + 56), v166, v168);
                v187 = sub_1001EB1A8(0x8000000000000000, v240, v166, v186);
                v188 = sub_1001EB1A8(4, v184, v166, v187);
                v189 = ((unint64_t)(ccn_bitlen(1, buf) + 63) >> 3) & 0x1FFFFFFFFFFFFFF8 | 1;
                v190 = ccder_encode_body_nocopy(v189, v166, v188);
                if (v190)
                  ccn_write_uint_padded(1, buf, v189, v190);
                ccder_encode_tl(3, v189, v166, v190);
                v191 = ccder_encode_uint64(theDataa);
                v192 = sub_100022108(a10, 0, v166, v191, v185);
                v194 = ccder_encode_constructed_tl(24, v191, v166, v192);
                if (!v194)
                  sub_100032660(-7, CFSTR("com.apple.security.cfder.error"), 0, a10, v193, CFSTR("ccder failed to encode"));
                v195 = ccder_encode_constructed_tl(0x2000000000000010, v242, v166, v194);
              }
              else
              {
                v195 = 0;
              }
              if (*(_BYTE *)(v136 + 120))
              {
                v196 = ccder_encode_len(0, v166, v195);
                v197 = ccder_encode_tag(0x2000000000000010, v166, v196);
              }
              else
              {
                v197 = ccder_encode_constructed_tl(0x2000000000000010, v246, v166, v195);
              }
              v198 = v197;
              if (v166 != v197)
              {
                v199 = sub_10000EF14("SecWarning");
                if (os_log_type_enabled(v199, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = v198 - v166;
                  _os_log_impl((void *)&_mh_execute_header, v199, OS_LOG_TYPE_DEFAULT, "internal error %td bytes unused in der buffer", buf, 0xCu);
                }
              }
              v200 = [SOSEnginePeerMessageCallBackInfo alloc];
              v201 = -[SOSEnginePeerMessageCallBackInfo initWithEngine:peer:localManifest:proposedManifest:confirmedManifest:andMessage:](v200, "initWithEngine:peer:localManifest:proposedManifest:confirmedManifest:andMessage:", v258, a4, v49, v252, cf1, v278[3]);
              v107 = (CFDataRef)queueb;
              v263[0] = _NSConcreteStackBlock;
              v263[1] = 3221225472;
              v263[2] = sub_100102790;
              v263[3] = &unk_1002DDF80;
              v202 = -[SOSEnginePeerMessageCallBackInfo copy](v201, "copy");
              v264 = v202;
              -[SOSEnginePeerMessageCallBackInfo setCallbackBlock:](v201, "setCallbackBlock:", v263);
              v203 = objc_retainAutorelease(v201);
              *a9 = v203;

            }
            else
            {
LABEL_270:
              v107 = 0;
            }
            if (v49)
              CFRelease(v49);
            v204 = v274;
            if (v274)
            {
              v274 = 0;
              CFRelease(v204);
            }
            v205 = v272;
            if (v272)
            {
              v272 = 0;
              CFRelease(v205);
            }
            v206 = (const void *)v278[3];
            if (v206)
            {
              v278[3] = 0;
              CFRelease(v206);
            }
            if (v252)
              CFRelease(v252);
            if (a10 && *a10)
            {
              v207 = sub_10000EF14("SecError");
              v208 = objc_claimAutoreleasedReturnValue(v207);
              if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
              {
                v209 = *(_QWORD *)(a4 + 16);
                v210 = *(_QWORD *)(v258 + 24);
                v211 = (const char *)*a10;
                *(_DWORD *)buf = 138412802;
                *(_QWORD *)&buf[4] = v210;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v209;
                *(_WORD *)&buf[22] = 2112;
                v286 = v211;
                _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_DEFAULT, "%@:%@ error in send: %@", buf, 0x20u);
              }

            }
            goto LABEL_323;
          }
LABEL_202:
          v112 = sub_1001E8C24((uint64_t)v274, v95, a10);
          v93 = sub_1001E8930((uint64_t)cf1, (uint64_t)v272, (uint64_t)v112, a10);
          if (v112)
            CFRelease(v112);
          v94 = v95;
          goto LABEL_206;
        }
      }
      v95 = v251;
      goto LABEL_202;
    }
    if ((!v251 || (unint64_t)CFDataGetLength(v251[3]) <= 0x13)
      && (!v274 || (unint64_t)CFDataGetLength(*((CFDataRef *)v274 + 3)) <= 0x13))
    {
      *(_BYTE *)(a4 + 49) = 0;
    }
    if (v272 && (unint64_t)CFDataGetLength(*((CFDataRef *)v272 + 3)) <= 0x13)
    {
      v86 = objc_retainBlock(*(id *)(v258 + 136));
      if (v86 && *(_QWORD *)(v258 + 128))
      {
        v87 = *(_QWORD *)(a4 + 16);
        if (v87)
          CFRetain(*(CFTypeRef *)(a4 + 16));
        v88 = *(_QWORD *)(a4 + 24);
        if (v88)
          CFRetain(*(CFTypeRef *)(a4 + 24));
        v89 = objc_msgSend(v86, "copy");
        queuec = *(NSObject **)(v258 + 128);
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_100101E28;
        v286 = (const char *)&unk_1002DE2B0;
        *(_QWORD *)&v287[0] = v89;
        *((_QWORD *)&v287[0] + 1) = v87;
        *(_QWORD *)&v287[1] = v88;
        v90 = v89;
        dispatch_async(queuec, buf);

      }
      *(_BYTE *)(a4 + 50) = 1;

    }
    v91 = (CFDataRef *)sub_1001ED4B0(a4);
    if (v49 && v91)
    {
      if (!CFEqual(v49, v91))
        goto LABEL_162;
    }
    else if (v49 != v91)
    {
      goto LABEL_162;
    }
    if (*(_BYTE *)(a4 + 48))
      goto LABEL_162;
    if (CFEqual(cf1, v49))
    {
      v101 = sub_10000EF14("engine");
      v102 = objc_claimAutoreleasedReturnValue(v101);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        v103 = *(_QWORD *)(v258 + 24);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v103;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = a4;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "synced <No MSG> %@:%@", buf, 0x16u);
      }
      v49 = v254;
    }
    else
    {
      v95 = v251;
      v49 = v254;
      if (v251 && (unint64_t)CFDataGetLength(v251[3]) > 0x13)
        goto LABEL_163;
      if (v272 && (unint64_t)CFDataGetLength(*((CFDataRef *)v272 + 3)) > 0x13)
      {
LABEL_162:
        v95 = v251;
        if (!v251)
        {
LABEL_165:
          queuea = 0;
          goto LABEL_202;
        }
LABEL_163:
        if ((unint64_t)CFDataGetLength(v95[3]) >= 0x14)
        {
          v270[0] = 0;
          v270[1] = v270;
          v270[2] = 0x2020000000;
          v270[3] = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x4010000000;
          v286 = "";
          memset(v287, 0, sizeof(v287));
          v96 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
          v266 = 0;
          v267 = &v266;
          v268 = 0x2020000000;
          v269 = 0;
          v97 = v258;
          v98 = *(_QWORD *)(v258 + 16);
          v265[1] = _NSConcreteStackBlock;
          v265[2] = (CFTypeRef)3221225472;
          v265[3] = sub_100101E74;
          v265[4] = &unk_1002DDF58;
          v265[9] = (CFTypeRef)v258;
          v265[10] = (CFTypeRef)a4;
          v265[11] = v96;
          v265[12] = a10;
          v265[5] = &v266;
          v265[6] = &v277;
          v265[13] = a8;
          v265[7] = buf;
          v265[8] = v270;
          if (((*(uint64_t (**)(void))(v98 + 32))() & 1) == 0)
          {
            v99 = (const void *)v278[3];
            if (v99)
            {
              v278[3] = 0;
              CFRelease(v99);
            }
          }
          if (*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
            v100 = sub_1001E88E8(*(_QWORD *)&buf[8] + 32, a10);
          else
            v100 = 0;
          if (CFArrayGetCount(v96))
          {
            v265[0] = 0;
            if ((sub_10010000C(v258, 0, 2, 0, v96, v265) & 1) == 0)
            {
              v108 = sub_10000EF14("SecError");
              v109 = objc_claimAutoreleasedReturnValue(v108);
              if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v281 = 138412546;
                v282 = v96;
                v283 = 2112;
                v284 = v265[0];
                _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "SOSEngineUpdateChanges_locked: %@ failed: %@", v281, 0x16u);
              }

              v97 = v258;
            }
            if (v265[0])
              CFRelease(v265[0]);
            v49 = (CFDataRef *)sub_1000FFD34(v97, a4, (uint64_t)a10);
            if (v254)
              CFRelease(v254);
          }
          else
          {
            v49 = v254;
          }
          v95 = (CFDataRef *)v100;
          if (v96)
            CFRelease(v96);
          v110 = *(_QWORD *)&buf[8];
          free(*(void **)(*(_QWORD *)&buf[8] + 32));
          *(_QWORD *)(v110 + 32) = 0;
          *(_QWORD *)(v110 + 40) = 0;
          *(_BYTE *)(v110 + 56) = 0;
          *(_QWORD *)(v110 + 48) = 0;
          v111 = (const void *)v267[3];
          if (v111)
          {
            v267[3] = 0;
            CFRelease(v111);
          }
          _Block_object_dispose(&v266, 8);
          _Block_object_dispose(buf, 8);
          _Block_object_dispose(v270, 8);
          queuea = (dispatch_queue_t)v95;
          goto LABEL_202;
        }
        v95 = 0;
        goto LABEL_165;
      }
      v172 = sub_10000EF14("engine");
      v102 = objc_claimAutoreleasedReturnValue(v172);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        v173 = *(_QWORD *)(v258 + 24);
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v173;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = a4;
        *(_WORD *)&buf[22] = 2112;
        v286 = (const char *)v274;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "waiting <MSG not resent> %@:%@ extra: %@", buf, 0x20u);
      }
    }

    if (v49)
      CFRelease(v49);
    v104 = (const void *)v278[3];
    if (v104)
    {
      v278[3] = 0;
      CFRelease(v104);
    }
    v105 = v274;
    if (v274)
    {
      v274 = 0;
      CFRelease(v105);
    }
    v106 = v272;
    if (v272)
    {
      v272 = 0;
      CFRelease(v106);
    }
    v107 = CFDataCreate(kCFAllocatorDefault, 0, 0);
LABEL_323:
    _Block_object_dispose(&v277, 8);
    if (v107)
    {
      if (!CFDataGetLength(v107) && !*(_BYTE *)(a4 + 48))
      {
        v32 = 1;
LABEL_354:
        CFRelease(v107);
        goto LABEL_21;
      }
      cf1a = CFStringCreateMutable(kCFAllocatorDefault, 0);
      v212 = *(const void **)(a5 + 24);
      if (!v212)
      {
        CFStringAppend(cf1a, CFSTR("*** using null coder ***"));
        v228 = CFDataGetLength(v107);
        v217 = v107;
        MutableCopy = CFDataCreateMutableCopy(0, v228, v107);
        v253 = 0;
        v255 = 0;
        v213 = 0;
        goto LABEL_332;
      }
      v213 = CFCopyDescription(v212);
      if ((SecOTRSGetIsReadyForMessages(*(_QWORD *)(a5 + 24)) & 1) != 0)
      {
        if (!*(_BYTE *)(a5 + 32))
        {
          v214 = CFDataCreateMutable(kCFAllocatorDefault, 0);
          if (v214)
          {
            MutableCopy = v214;
            v216 = SecOTRSSignAndProtectMessage(*(_QWORD *)(a5 + 24), v107, v214);
            v217 = v107;
            if (!(_DWORD)v216)
            {
              v253 = 0;
              v255 = MutableCopy;
LABEL_332:
              v32 = 1;
              goto LABEL_333;
            }
            if (a10)
              v230 = *a10;
            else
              v230 = 0;
            v232 = a7;
            v233 = v216;
            SOSCreateErrorWithFormat(1025, v230, a10, 0, CFSTR("%@ cannot protect message: %d"));
            CFRelease(MutableCopy);
          }
          else
          {
            v217 = v107;
            v232 = a7;
            SOSCreateErrorWithFormat(1024, 0, a10, 0, CFSTR("%@ alloc failed"));
          }
          if (a10 && *a10)
            CFStringAppendFormat(cf1a, 0, CFSTR(" %@"), *a10);
          MutableCopy = 0;
          v32 = 0;
          v253 = 3;
          v255 = 0;
LABEL_333:
          v218 = sub_10000EF14("coder");
          if (os_log_type_enabled(v218, OS_LOG_TYPE_DEBUG))
          {
            v225 = SecOTRPacketTypeString(v255);
            v226 = *(_QWORD *)(a5 + 24);
            v227 = off_1002EC280[v253];
            *(_DWORD *)buf = 138413570;
            *(_QWORD *)&buf[4] = a7;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v213;
            *(_WORD *)&buf[22] = 2080;
            v286 = (const char *)v225;
            LOWORD(v287[0]) = 2112;
            *(_QWORD *)((char *)v287 + 2) = cf1a;
            WORD5(v287[0]) = 2112;
            *(_QWORD *)((char *)v287 + 12) = v226;
            WORD2(v287[1]) = 2080;
            *(_QWORD *)((char *)&v287[1] + 6) = v227;
            _os_log_debug_impl((void *)&_mh_execute_header, v218, OS_LOG_TYPE_DEBUG, "%@ %@ %s %@ %@ returned %s", buf, 0x3Eu);
            if (!v213)
              goto LABEL_336;
          }
          else if (!v213)
          {
LABEL_336:
            CFRelease(cf1a);
            v107 = v217;
            if ((v32 & 1) != 0)
            {
              if (*a6 != MutableCopy)
              {
                if (!MutableCopy || (CFRetain(MutableCopy), *a6))
                  CFRelease(*a6);
                *a6 = MutableCopy;
              }
              if (-[OTSOSActualAdapter sosEnabled]_0())
                *(_BYTE *)(v258 + 105) = 1;
            }
            else
            {
              v222 = sub_10000EF14("transport");
              v223 = objc_claimAutoreleasedReturnValue(v222);
              if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
              {
                v224 = *a10;
                *(_DWORD *)buf = 138412546;
                *(_QWORD *)&buf[4] = a7;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v224;
                _os_log_impl((void *)&_mh_execute_header, v223, OS_LOG_TYPE_DEFAULT, "%@ SOSCoderWrap failed: %@", buf, 0x16u);
              }

            }
            if (MutableCopy)
              CFRelease(MutableCopy);
            goto LABEL_354;
          }
          CFRelease(v213);
          goto LABEL_336;
        }
        v217 = v107;
        v229 = CFSTR("waiting for peer to send data packet first");
      }
      else
      {
        v217 = v107;
        v229 = CFSTR("not ready");
      }
      CFStringAppend(cf1a, v229);
      MutableCopy = 0;
      v32 = 0;
      v253 = 1;
      v255 = 0;
      goto LABEL_333;
    }
LABEL_341:
    v219 = sub_10000EF14("transport");
    v220 = objc_claimAutoreleasedReturnValue(v219);
    if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
    {
      v221 = *a10;
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a7;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v221;
      _os_log_impl((void *)&_mh_execute_header, v220, OS_LOG_TYPE_DEFAULT, "%@ SOSEngineCreateMessage_locked failed: %@", buf, 0x16u);
    }

    v32 = 0;
LABEL_21:
    v33 = sub_1001DF090(v260, 2);
    if (*a6)
      v34 = v33;
    else
      v34 = 1;
    if ((v34 & 1) != 0)
      goto LABEL_65;
    v35 = a7;
    v36 = sub_1001CA91C(v260, (uint64_t)CFSTR("NegotiationRetryCount"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    if (!v37)
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKey:", v35, v232, v233));
    v39 = v38;
    if (v38)
    {
      v40 = (int)objc_msgSend(v38, "intValue") > 6;

      if (v40)
        goto LABEL_65;
    }
    else
    {

    }
    if (!SecOTRSessionIsSessionInAwaitingState(*(_QWORD *)(a5 + 24))
      || sub_1001ED610(*(void **)(a4 + 16), *(CFDictionaryRef *)(a4 + 104)))
    {
LABEL_57:
      if ((SecOTRSessionIsSessionInAwaitingState(*(_QWORD *)(a5 + 24)) & 1) != 0)
      {
        if (!sub_1001ED610(*(void **)(a4 + 16), *(CFDictionaryRef *)(a4 + 104)))
        {
LABEL_65:
          v21 = v260;
          goto LABEL_66;
        }
        v62 = sub_10000EF14("otrtimer");
        v63 = objc_claimAutoreleasedReturnValue(v62);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = a5;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "timer for coder already set: %@", buf, 0xCu);
        }
      }
      else
      {
        v64 = sub_10000EF14("otrtimer");
        v63 = objc_claimAutoreleasedReturnValue(v64);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = a5;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "coder not in awaiting state: %@", buf, 0xCu);
        }
      }

      goto LABEL_65;
    }
    v41 = v35;
    v42 = (const __CFDictionary *)sub_1001CA91C(v260, (uint64_t)CFSTR("PeerNegotiationTimeouts"));
    v43 = v42;
    if (v42 && (v44 = CFGetTypeID(v42), v44 == CFDictionaryGetTypeID()))
    {
      if (CFDictionaryGetValue(v43, v41))
      {

        v45 = sub_10000EF14("otrtimer");
        v46 = objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "coder is in awaiting state", buf, 2u);
        }

        sub_1001D48E8(v260, a4);
        goto LABEL_65;
      }
      v231 = sub_10000EF14("otrtimer");
      v61 = objc_claimAutoreleasedReturnValue(v231);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      *(_WORD *)buf = 0;
    }
    else
    {
      v60 = sub_10000EF14("otrtimer");
      v61 = objc_claimAutoreleasedReturnValue(v60);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
LABEL_56:

        goto LABEL_57;
      }
      *(_WORD *)buf = 0;
    }
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "do not have an rtt yet", buf, 2u);
    goto LABEL_56;
  }
  v21 = v15;
  objc_msgSend(v15, "setEngine_peer_state_needs_repair:", 1);
  v22 = sub_10000EF14("transport");
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (a10)
      v24 = *a10;
    else
      v24 = 0;
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = a7;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%@ getCoder: %@", buf, 0x16u);
  }

  v32 = 0;
LABEL_66:

  return v32;
}

void sub_1001F0284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  _Block_object_dispose(&a53, 8);
  _Block_object_dispose((const void *)(v67 - 256), 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1001F0368(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (a2)
  {
    v8 = WeakRetained;
    v5 = objc_msgSend(WeakRetained, "coder");
    v4 = v8;
    v6 = v5;
    v7 = (const void *)v5[5];
    if (v7)
    {
      v6[5] = 0;
      CFRelease(v7);
      v4 = v8;
    }
  }

}

void sub_1001F03C4(uint64_t a1, uint64_t a2)
{
  const void *PeerID;
  const void *v5;
  const void *v6;

  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  if (!CFEqual(*(CFTypeRef *)(a1 + 32), PeerID))
  {
    v5 = (const void *)SOSPeerInfoCopySerialNumber(a2);
    v6 = *(const void **)(a1 + 40);
    if (v5 && v6)
    {
      if (!CFEqual(v6, v5))
        goto LABEL_10;
    }
    else if (v6 != v5)
    {
      goto LABEL_9;
    }
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 48), PeerID);
LABEL_9:
    if (!v5)
      return;
LABEL_10:
    CFRelease(v5);
  }
}

uint64_t sub_1001F045C(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  unsigned int Class;
  uint64_t v9;
  void *v10;
  void (*PeerID)(uint64_t);
  CFMutableSetRef Mutable;
  const __CFSet *v13;
  const __CFSet *v14;
  void (*v15)(uint64_t);
  void (*v16)(uint64_t);
  void (*v17)(uint64_t);
  void (*v18)(uint64_t);
  id v19;
  void *v20;
  id v21;
  int v22;
  _QWORD v24[4];
  id v25;
  void ***v26;
  _QWORD v27[5];
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;
  CFMutableSetRef v34;

  v1 = a1;
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "peerID"));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "trust"));
    v4 = objc_msgSend(v3, "trustedCircle");

    if (v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "trust"));
      v2 = SOSCircleCopyCircle(kCFAllocatorDefault, objc_msgSend(v5, "trustedCircle"), 0);

      if (v2)
      {
        v6 = objc_msgSend(v1, "peerInfo");
        if (v6)
        {
          v7 = v6;
          Class = SOSPeerInfoGetClass();
          if (Class <= 5 && ((1 << Class) & 0x34) != 0)
          {
            if (SOSPeerInfoSerialNumberIsSet(v7))
            {
              v9 = SOSPeerInfoCopySerialNumber(v7);
              if (v9)
              {
                v10 = (void *)v9;
                PeerID = (void (*)(uint64_t))SOSPeerInfoGetPeerID(v7);
                Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
                if (Mutable)
                {
                  v13 = Mutable;
                  v28 = _NSConcreteStackBlock;
                  v29 = 3221225472;
                  v30 = (uint64_t)sub_1001F03C4;
                  v31 = (uint64_t (*)(uint64_t, uint64_t))&unk_1002EC6D0;
                  v32 = PeerID;
                  v33 = v10;
                  v34 = Mutable;
                  SOSCircleForEachPeer(v2, &v28);
                  CFRelease(v10);
                  if (CFSetGetCount(v13))
                    SOSCircleRemovePeersByIDUnsigned(v2, v13);
                  v14 = v13;
                }
                else
                {
                  v14 = (const __CFSet *)v10;
                }
                CFRelease(v14);
              }
            }
          }
        }
        SOSCircleRemoveRetired(v2, 0);
        v15 = (void (*)(uint64_t))objc_alloc_init((Class)NSMutableSet);
        v28 = _NSConcreteStackBlock;
        v29 = 3221225472;
        v30 = (uint64_t)sub_1001F07E0;
        v31 = (uint64_t (*)(uint64_t, uint64_t))&unk_1002EC6F8;
        v32 = v15;
        v16 = v15;
        SOSCircleForEachiCloudIdentityPeer(v2, &v28);
        SOSCircleRemovePeersByIDUnsigned(v2, v16);

        v17 = (void (*)(uint64_t))objc_alloc_init((Class)NSMutableSet);
        v28 = _NSConcreteStackBlock;
        v29 = 3221225472;
        v30 = (uint64_t)sub_1001F0824;
        v31 = (uint64_t (*)(uint64_t, uint64_t))&unk_1002EC6F8;
        v32 = v17;
        v18 = v17;
        SOSCircleForEachActivePeer(v2, &v28);
        SOSCircleRemovePeersByIDUnsigned(v2, v18);

        v28 = 0;
        v29 = (uint64_t)&v28;
        v30 = 0x3032000000;
        v31 = sub_1001F0890;
        v32 = sub_1001F08A0;
        v33 = 0;
        if (+[SOSAuthKitHelpers accountIsCDPCapable](SOSAuthKitHelpers, "accountIsCDPCapable"))
        {
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472;
          v27[2] = sub_1001F08A8;
          v27[3] = &unk_1002EC720;
          v27[4] = &v28;
          +[SOSAuthKitHelpers activeMIDs:](SOSAuthKitHelpers, "activeMIDs:", v27);
        }
        v19 = objc_alloc_init((Class)NSMutableSet);
        v20 = v19;
        if (*(_QWORD *)(v29 + 40))
        {
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          v24[2] = sub_1001F0904;
          v24[3] = &unk_1002EC748;
          v26 = &v28;
          v21 = v19;
          v25 = v21;
          SOSCircleForEachActivePeer(v2, v24);
          SOSCircleRemovePeersByIDUnsigned(v2, v21);

        }
        _Block_object_dispose(&v28, 8);

        v22 = SOSCircleCountPeers(v2);
        CFRelease((CFTypeRef)v2);
        v2 = v22 == 0;
      }
    }
    else
    {
      v2 = 0;
    }
  }

  return v2;
}

void sub_1001F07C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001F07E0(uint64_t a1, uint64_t a2)
{
  uint64_t PeerID;
  id v4;

  PeerID = SOSPeerInfoGetPeerID(a2);
  v4 = (id)objc_claimAutoreleasedReturnValue(PeerID);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

}

void sub_1001F0824(uint64_t a1, uint64_t a2)
{
  uint64_t PeerDeviceType;
  uint64_t PeerID;
  void *v6;
  id v7;

  PeerDeviceType = SOSPeerInfoGetPeerDeviceType(a2);
  v7 = (id)objc_claimAutoreleasedReturnValue(PeerDeviceType);
  if (objc_msgSend(v7, "hasPrefix:", CFSTR("Windows")))
  {
    PeerID = SOSPeerInfoGetPeerID(a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(PeerID);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);

  }
}

uint64_t sub_1001F0890(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001F08A0(uint64_t a1)
{

}

void sub_1001F08A8(uint64_t a1, void *a2)
{
  id v3;
  SOSAuthKitHelpers *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  v4 = -[SOSAuthKitHelpers initWithActiveMIDS:]([SOSAuthKitHelpers alloc], "initWithActiveMIDS:", v3);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1001F0904(uint64_t a1, uint64_t a2)
{
  uint64_t PeerID;
  void *v5;
  id v6;

  v6 = (id)SOSPeerInfoV2DictionaryCopyString(a2, sMachineIDKey);
  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "midIsValidInList:") & 1) == 0)
  {
    PeerID = SOSPeerInfoGetPeerID(a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue(PeerID);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

  }
}

void sub_1001F0980(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const void *v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  CFStringRef v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  CFStringRef v25;
  const __CFDictionary *v26;
  OSStatus v27;
  OSStatus v28;
  const void *v29;
  NSObject *v30;
  const void *v31;
  NSObject *v32;
  id v33;
  const void *v34;
  NSObject *v35;
  void *v36;
  const void *v37;
  id v38;
  id v39;
  id v40;
  id obj;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  id v48;
  __int16 v49;
  id v50;
  _BYTE v51[128];

  v4 = a2;
  v5 = a3;
  if (!v4)
  {
    v6 = sub_10000EF14("ghostBust");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v48 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Couldn't work on iCloud Identities (%@)", buf, 0xCu);
    }

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("keyOnly")));
  v9 = objc_msgSend(v8, "count");

  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("completeIdentity")));
    v11 = objc_msgSend(v10, "count");

    if (v11)
    {
      v38 = v9;
      v39 = v5;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v40 = v4;
      obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("keyOnly")));
      v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
      if (!v12)
        goto LABEL_26;
      v13 = v12;
      v14 = *(_QWORD *)v44;
      while (1)
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v44 != v14)
            objc_enumerationMutation(obj);
          v16 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v15);
          v17 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("Cloud Identity - '%@'"), v16);
          if (v17)
          {
            v25 = v17;
            v26 = sub_10012E96C(kCFAllocatorDefault, v18, v19, v20, v21, v22, v23, v24, (uint64_t)kSecClass, (uint64_t)kSecClassKey);
            v27 = SecItemDelete(v26);
            if (v27)
            {
              v28 = v27;
              v29 = sub_10000EF14("ghostbust");
              v30 = objc_claimAutoreleasedReturnValue(v29);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                v48 = v16;
                v49 = 1024;
                LODWORD(v50) = v28;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Delete for %@ returned %d", buf, 0x12u);
              }

              if (v26)
                goto LABEL_17;
            }
            else
            {
              v31 = sub_10000EF14("ghostBust");
              v32 = objc_claimAutoreleasedReturnValue(v31);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v48 = v16;
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "removed %@", buf, 0xCu);
              }

              ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
              if (v26)
LABEL_17:
                CFRelease(v26);
            }
            CFRelease(v25);
          }
          v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
        v13 = v33;
        if (!v33)
        {
LABEL_26:

          v34 = sub_10000EF14("ghostBust");
          v35 = objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            v36 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
            *(_DWORD *)buf = 134218240;
            v48 = v36;
            v49 = 2048;
            v50 = v38;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Removed %zu of %zu deserted icloud private keys", buf, 0x16u);
          }
          v5 = v39;
          v4 = v40;
          goto LABEL_31;
        }
      }
    }
    v37 = sub_10000EF14("ghostBust");
    v35 = objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "No iCloud Identity FPI, can't remove iCloudIdentity extra keys", buf, 2u);
    }
LABEL_31:

  }
}

uint64_t sub_1001F0E28(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  __CFArray *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  const void *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  CFMutableArrayRef Mutable;
  id v23;
  id v24;
  CFIndex Count;
  __int128 v26;
  unint64_t v27;
  const void *ValueAtIndex;
  uint64_t PeerID;
  void *v30;
  unsigned __int8 v31;
  char v32;
  unsigned int Class;
  void *v34;
  void *v35;
  BOOL v36;
  const void *v37;
  NSObject *v38;
  uint64_t SPID;
  const void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  id v53;
  __int128 v55;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  __int128 buf;
  void *v62;
  void *v63;
  CFMutableArrayRef v64;
  id v65;
  id v66;
  __int128 *v67;
  uint64_t *v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  CFRange v73;

  v3 = *(_DWORD *)(a1 + 80);
  if ((v3 & 3) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerID"));
    v5 = *(_DWORD *)(a1 + 80);
    v6 = *(void **)(a1 + 40);
    v7 = *(void **)(a1 + 48);
    v8 = v4;
    v9 = v6;
    v10 = v7;
    *(_QWORD *)&v70 = 0;
    *((_QWORD *)&v70 + 1) = &v70;
    v71 = 0x2020000000;
    v72 = 0;
    v57 = 0;
    v58 = &v57;
    v59 = 0x2020000000;
    v60 = 0;
    v11 = objc_alloc_init((Class)NSMutableSet);
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v62 = sub_1001F154C;
    v63 = &unk_1002EC798;
    v12 = (__CFArray *)v8;
    v64 = v12;
    v69 = v5;
    v13 = v9;
    v65 = v13;
    v14 = v11;
    v66 = v14;
    v67 = &v70;
    v68 = &v57;
    SOSCircleForEachPeer(a2, &buf);
    SOSCircleRemovePeersByIDUnsigned(a2, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((_QWORD *)&v70 + 1) + 24)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v15, CFSTR("byMID"));

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v58 + 6)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v16, CFSTR("bySerial"));

    v17 = objc_msgSend(v14, "count");
    _Block_object_dispose(&v57, 8);
    _Block_object_dispose(&v70, 8);

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v17;
    v18 = sub_10000EF14("ghostbust");
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Removed %lu ghosts from circle by midlist && serialNumber", (uint8_t *)&buf, 0xCu);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    v3 = *(_DWORD *)(a1 + 80);
  }
  if ((v3 & 4) != 0)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerID"));
    Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v62 = sub_1001F172C;
    v63 = &unk_1002EC7B8;
    v64 = Mutable;
    SOSCircleForEachPeer(a2, &buf);
    v73.length = CFArrayGetCount(Mutable);
    v73.location = 0;
    CFArraySortValues(Mutable, v73, (CFComparatorFunction)&SOSPeerInfoCompareByApplicationDate, 0);
    v23 = objc_alloc_init((Class)NSMutableDictionary);
    v24 = objc_alloc_init((Class)NSMutableSet);
    Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      v27 = Count + 1;
      *(_QWORD *)&v26 = 138412290;
      v55 = v26;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v27 - 2);
        PeerID = SOSPeerInfoGetPeerID(ValueAtIndex);
        v30 = (void *)objc_claimAutoreleasedReturnValue(PeerID);
        v31 = objc_msgSend(v30, "isEqualToString:", v21);
        if (ValueAtIndex)
          v32 = v31;
        else
          v32 = 1;
        if ((v32 & 1) != 0)
          goto LABEL_24;
        Class = SOSPeerInfoGetClass(ValueAtIndex);
        if (Class > 5 || ((1 << Class) & 0x34) == 0)
          goto LABEL_24;
        v34 = (void *)SOSPeerInfoV2DictionaryCopyString(ValueAtIndex, sSerialNumberKey);
        if (v34)
        {
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKey:", v34));
          v36 = v35 == 0;

          if (v36)
          {
            objc_msgSend(v23, "setObject:forKey:", v30, v34);
            goto LABEL_23;
          }
          v37 = sub_10000EF14("ghostBust");
          v38 = objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            SPID = SOSPeerInfoGetSPID(ValueAtIndex);
            LODWORD(v70) = v55;
            *(_QWORD *)((char *)&v70 + 4) = SPID;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "There is a more recent peer than %@ for this serial number", (uint8_t *)&v70, 0xCu);
          }
        }
        else
        {
          v40 = sub_10000EF14("ghostBust");
          v38 = objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            v41 = SOSPeerInfoGetSPID(ValueAtIndex);
            LODWORD(v70) = v55;
            *(_QWORD *)((char *)&v70 + 4) = v41;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Removing peerID (%@) with no serial number", (uint8_t *)&v70, 0xCu);
          }
        }

        objc_msgSend(v24, "addObject:", v30);
LABEL_23:

LABEL_24:
        --v27;
      }
      while (v27 > 1);
    }
    v42 = objc_msgSend(v24, "count", v55);
    if (v42)
      SOSCircleRemovePeersByIDUnsigned(a2, v24);
    if (Mutable)
      CFRelease(Mutable);

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) += v42;
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v42));
    objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v43, CFSTR("byAge"));

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
  v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v45 = 1;
  if (v44 >= 11)
  {
    v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    do
    {
      v44 = v46 / 0xA;
      v45 *= 10;
      v47 = v46 > 0x6D;
      v46 /= 0xAuLL;
    }
    while (v47);
  }
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v45 * v44));
  objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v48, CFSTR("total"));

  v49 = *(int *)(a1 + 84);
  v50 = 1;
  if ((int)v49 >= 11)
  {
    v51 = *(int *)(a1 + 84);
    do
    {
      v49 = v51 / 0xA;
      v50 *= 10;
      v47 = v51 > 0x6D;
      v51 /= 0xAuLL;
    }
    while (v47);
  }
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v50 * v49));
  objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v52, CFSTR("startCircleSize"));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) != 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    sub_1001D6E4C(*(void **)(a1 + 32));
    if (sub_1001D6CD8(*(void **)(a1 + 32), 0) || sub_1001D7620(*(void **)(a1 + 32), 0))
    {
      v53 = sub_1001D6CD8(*(void **)(a1 + 32), 0);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = SOSCircleGenerationSign(a2, v53, objc_msgSend(*(id *)(a1 + 32), "fullPeerInfo"), 0);
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
    }
  }
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
}

void sub_1001F1520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v5 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1001F154C(uint64_t a1, uint64_t a2)
{
  uint64_t PeerID;
  void *v5;
  int v6;
  void *v7;
  const void *v8;
  NSObject *v9;
  uint64_t v10;
  const void *v11;
  NSObject *v12;
  int v13;
  uint64_t SPID;

  PeerID = SOSPeerInfoGetPeerID(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(PeerID);
  if ((objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32)) & 1) == 0)
  {
    v6 = *(_DWORD *)(a1 + 72);
    if ((v6 & 2) != 0)
    {
      v7 = (void *)SOSPeerInfoV2DictionaryCopyString(a2, sMachineIDKey);
      if ((objc_msgSend(*(id *)(a1 + 40), "midIsValidInList:", v7) & 1) == 0)
      {
        v11 = sub_10000EF14("ghostBust");
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = 138412290;
          SPID = SOSPeerInfoGetSPID(a2);
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Removing peerInfo %@ - mid is not in list", (uint8_t *)&v13, 0xCu);
        }

        objc_msgSend(*(id *)(a1 + 48), "addObject:", v5);
        v10 = *(_QWORD *)(a1 + 56);
        goto LABEL_13;
      }

      v6 = *(_DWORD *)(a1 + 72);
    }
    if ((v6 & 1) != 0)
    {
      v7 = (void *)SOSPeerInfoV2DictionaryCopyString(a2, sSerialNumberKey);
      if ((objc_msgSend(*(id *)(a1 + 40), "serialIsValidInList:", v7) & 1) != 0)
      {
LABEL_14:

        goto LABEL_15;
      }
      v8 = sub_10000EF14("ghostBust");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v13 = 138412290;
        SPID = SOSPeerInfoGetSPID(a2);
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Removing peerInfo %@ - serial# is not in list", (uint8_t *)&v13, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 48), "addObject:", v5);
      v10 = *(_QWORD *)(a1 + 64);
LABEL_13:
      ++*(_DWORD *)(*(_QWORD *)(v10 + 8) + 24);
      goto LABEL_14;
    }
  }
LABEL_15:

}

void sub_1001F172C(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
}

uint64_t sub_1001F1734(const __CFSet *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFDictionaryRef v11;
  uint64_t v12;
  _QWORD v14[10];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v11 = sub_1001F1804(a1);
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 4;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 0x40000000;
  v14[2] = sub_1001F1934;
  v14[3] = &unk_1002EC7E0;
  v14[6] = a3;
  v14[7] = a4;
  v14[8] = a6;
  v14[9] = a5;
  v14[4] = &v15;
  v14[5] = v11;
  sub_100214B28(a2, (uint64_t)v14);
  if (v11)
    CFRelease(v11);
  v12 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v12;
}

CFDictionaryRef sub_1001F1804(const __CFSet *a1)
{
  CFIndex Count;
  size_t v3;
  unint64_t v4;
  const void **v5;
  void *v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[8];

  Count = CFSetGetCount(a1);
  v3 = 8 * Count;
  v4 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (const void **)&v10[-v4];
  if (((uint64_t (*)(void))__chkstk_darwin)())
  {
    v6 = memset(&v10[-v4], 170, v3);
    __chkstk_darwin(v6);
    v7 = &v10[-v4];
    memset(v7, 170, v3);
    CFSetGetValues(a1, v5);
    v8 = 0;
    do
    {
      *(_QWORD *)&v7[8 * v8] = SOSPeerInfoGetPeerID(v5[v8]);
      ++v8;
    }
    while (Count != v8);
  }
  else
  {
    CFSetGetValues(a1, (const void **)&v10[-v4]);
    v7 = v10;
  }
  return CFDictionaryCreate(0, (const void **)v7, v5, Count, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

void sub_1001F1934(uint64_t a1, const void *a2)
{
  const void *Value;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  __SecKey *v10;
  int v11;
  NSObject *v12;
  const void *PeerID;
  const void *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v19;
  int v20;
  const void *v21;
  __int16 v22;
  int v23;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  v5 = Value;
  if (Value
    && (v6 = *(_QWORD *)(a1 + 48),
        v7 = *(_QWORD *)(a1 + 56),
        v8 = *(CFTypeRef **)(a1 + 64),
        (v9 = SOSPeerInfoCopyPubKey(Value, v8)) != 0))
  {
    v10 = (__SecKey *)v9;
    if (sub_10021496C(v6, a2) && SOSPeerInfoApplicationVerify(v5, v7, 0))
    {
      if (sub_100215158(v6, (uint64_t)v10, (uint64_t)v8))
      {
        if (sub_1002151EC(v6, v10, v8))
          v11 = 0;
        else
          v11 = 6;
      }
      else
      {
        v11 = 7;
      }
    }
    else
    {
      v11 = 4;
    }
    CFRelease(v10);
  }
  else
  {
    v11 = 4;
  }
  v12 = sub_10000EF14("ring");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 138412546;
    v21 = a2;
    v22 = 1024;
    v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "concordance-signer-status: %@ -> %d", (uint8_t *)&v20, 0x12u);
  }
  if (v11 == 7)
  {
    PeerID = (const void *)SOSPeerInfoGetPeerID(v5);
    v14 = *(const void **)(a1 + 72);
    if (PeerID && v14)
    {
      if (!CFEqual(PeerID, v14))
      {
LABEL_18:
        if (!SOSPeerInfoIsCloudIdentity(v5))
        {
          v11 = 7;
          goto LABEL_21;
        }
      }
    }
    else if (PeerID != v14)
    {
      goto LABEL_18;
    }
    v11 = 4;
  }
LABEL_21:
  v15 = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v11)
  {
    v17 = *(_DWORD *)(v16 + 24);
    if (v17)
    {
      v15 = 6;
      if (v11 != 6)
      {
        if (v17 == 7 || v11 == 7)
          v19 = 7;
        else
          v19 = *(_DWORD *)(v16 + 24);
        if (v17 == 6)
          v15 = 6;
        else
          v15 = v19;
      }
    }
  }
  *(_DWORD *)(v16 + 24) = v15;
}

void sub_1001F1B24(_QWORD *a1, uint64_t a2)
{
  const void *PeerID;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef *v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v15;
  const void *v16;
  const void *v17;

  PeerID = (const void *)SOSPeerInfoGetPeerID(a2);
  if (!sub_10021496C(a1[5], PeerID))
    return;
  if (!a2)
    goto LABEL_32;
  v5 = a1[5];
  v6 = a1[6];
  v7 = (CFTypeRef *)a1[7];
  v8 = SOSPeerInfoCopyPubKey(a2, v7);
  if (!v8)
    goto LABEL_32;
  v9 = (void *)v8;
  if (!sub_10021496C(v5, PeerID) || !SOSPeerInfoApplicationVerify(a2, v6, 0))
  {
    v10 = 4;
LABEL_10:
    CFRelease(v9);
    goto LABEL_11;
  }
  if (sub_100215158(v5, (uint64_t)v9, (uint64_t)v7))
  {
    if (sub_1002151EC(v5, (__SecKey *)v9, v7))
      v10 = 0;
    else
      v10 = 6;
    goto LABEL_10;
  }
  CFRelease(v9);
  v16 = (const void *)SOSPeerInfoGetPeerID(a2);
  v17 = (const void *)a1[8];
  if (!v16 || !v17)
  {
    if (v16 != v17)
      goto LABEL_31;
LABEL_32:
    v10 = 4;
    goto LABEL_11;
  }
  if (CFEqual(v16, v17))
    goto LABEL_32;
LABEL_31:
  if (SOSPeerInfoIsCloudIdentity(a2))
    goto LABEL_32;
  v10 = 7;
LABEL_11:
  v11 = 0;
  v12 = *(_QWORD *)(a1[4] + 8);
  if (v10)
  {
    v13 = *(_DWORD *)(v12 + 24);
    if (v13)
    {
      v11 = 6;
      if (v10 != 6)
      {
        if (v13 == 7 || v10 == 7)
          v15 = 7;
        else
          v15 = *(_DWORD *)(v12 + 24);
        if (v13 == 6)
          v11 = 6;
        else
          v11 = v15;
      }
    }
  }
  *(_DWORD *)(v12 + 24) = v11;
}

uint64_t sub_1001F1C88(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_1001F1C9C(uint64_t a1, const __CFSet *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v14;
  _BOOL4 v15;
  uint64_t result;
  const __CFSet *Value;
  const __CFSet *v18;
  CFTypeID v19;
  const __CFSet *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t v25[16];

  if (a6)
  {
    if (!sub_100215024(a4))
    {
      if (sub_100215024(a3))
        goto LABEL_12;
      sub_100214174((_QWORD *)a4);
      sub_100214174((_QWORD *)a4);
      Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a4 + 24), CFSTR("PeerIDs"));
      if (!Value || (v18 = Value, v19 = CFGetTypeID(Value), v19 != CFSetGetTypeID()))
        v18 = 0;
      if (CFSetGetCount(v18) == 1)
      {
LABEL_12:
        v20 = a2;
        v21 = a4;
        v22 = a4;
        v23 = a6;
        v24 = 0;
      }
      else
      {
        if (sub_100214774(*(const __CFDictionary **)(a4 + 24), a3))
        {
          SOSCreateError(1039, CFSTR("Bad generation"), 0, a8);
          return 1;
        }
        v20 = a2;
        v21 = a3;
        v22 = a4;
        v23 = a6;
        v24 = a7;
      }
      return sub_1001F1734(v20, v21, v22, v23, v24, a8);
    }
    v14 = sub_10000EF14("ring");
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v15)
    {
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "ring empty -> trusted", v25, 2u);
      return 0;
    }
  }
  else
  {
    SOSCreateError(2, CFSTR("Concordance with no public key - need to validate application"), 0, a8);
    return 3;
  }
  return result;
}

id sub_1001F2CB0()
{
  NSObject *v0;
  NSObject *v1;
  void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  uint8_t v7[16];
  uint8_t buf[16];

  if (!objc_opt_class(ACAccount) || !objc_opt_class(ACAccountStore))
  {
    v3 = sub_10000EF14("sosauthkit");
    v1 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "ACAccount not available", buf, 2u);
    }
    goto LABEL_10;
  }
  v0 = objc_claimAutoreleasedReturnValue(+[ACAccountStore defaultStore](ACAccountStore, "defaultStore"));
  if (!v0)
  {
    v4 = sub_10000EF14("sosauthkit");
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "can't get store", v7, 2u);
    }

    v1 = 0;
LABEL_10:
    v2 = 0;
    goto LABEL_11;
  }
  v1 = v0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject aa_primaryAppleAccount](v0, "aa_primaryAppleAccount"));
LABEL_11:

  return v2;
}

uint64_t sub_1001F2DBC(uint64_t a1, uint64_t a2)
{
  int HasString;
  const void *v5;
  NSObject *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;

  HasString = SOSPeerInfoV2DictionaryHasString(a2, sMachineIDKey);
  if ((HasString & 1) == 0)
  {
    v5 = sub_10000EF14("sosauthkit");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v9 = 138412290;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting PeerInfo MID to %@", (uint8_t *)&v9, 0xCu);
    }

    SOSPeerInfoV2DictionarySetValue(a2, sMachineIDKey, *(_QWORD *)(a1 + 32));
  }
  return HasString ^ 1u;
}

void sub_1001F2EAC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  NSMutableSet *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  SOSTrustedDeviceAttributes *v12;
  void *v13;
  void *v14;
  const void *v15;
  NSObject *v16;
  uint8_t v17[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  if (a3)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0);
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "deviceList"));
    v5 = objc_opt_new(NSMutableSet);
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v19;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v19 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v10);
          v12 = objc_opt_new(SOSTrustedDeviceAttributes);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "machineId"));
          -[SOSTrustedDeviceAttributes setMachineID:](v12, "setMachineID:", v13);

          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "serialNumber"));
          -[SOSTrustedDeviceAttributes setSerialNumber:](v12, "setSerialNumber:", v14);

          -[NSMutableSet addObject:](v5, "addObject:", v12);
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v8);
    }

    if (!-[NSMutableSet count](v5, "count"))
    {
      v15 = sub_10000EF14("sosauthkit");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "found no devices in account", v17, 2u);
      }

      v5 = 0;
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

uint64_t sub_1001F30E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_1001F30F8()
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F3174;
  block[3] = &unk_1002ED1A0;
  block[4] = &qword_100341608;
  if (qword_100341600 != -1)
    dispatch_once(&qword_100341600, block);
  return qword_100341608;
}

CFMutableArrayRef sub_1001F3174(uint64_t a1)
{
  CFMutableArrayRef result;

  result = CFArrayCreateMutable(kCFAllocatorDefault, 0, 0);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1001F31B0()
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F322C;
  block[3] = &unk_1002ED1A0;
  block[4] = &qword_100341618;
  if (qword_100341610 != -1)
    dispatch_once(&qword_100341610, block);
  return qword_100341618;
}

CFMutableArrayRef sub_1001F322C(uint64_t a1)
{
  CFMutableArrayRef result;

  result = CFArrayCreateMutable(kCFAllocatorDefault, 0, 0);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1001F3268()
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F32E4;
  block[3] = &unk_1002ED1A0;
  block[4] = &qword_100341628;
  if (qword_100341620 != -1)
    dispatch_once(&qword_100341620, block);
  return qword_100341628;
}

CFMutableArrayRef sub_1001F32E4(uint64_t a1)
{
  CFMutableArrayRef result;

  result = CFArrayCreateMutable(kCFAllocatorDefault, 0, 0);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

void sub_1001F3320(void *a1)
{
  const __CFArray *v1;
  CFIndex FirstIndexOfValue;
  CFIndex i;
  id value;
  CFRange v5;
  CFRange v6;

  value = a1;
  v1 = (const __CFArray *)sub_1001F30F8();
  v5.length = CFArrayGetCount(v1);
  v5.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v1, v5, value);
  if (FirstIndexOfValue != -1)
  {
    for (i = FirstIndexOfValue; i != -1; i = CFArrayGetFirstIndexOfValue(v1, v6, value))
    {
      CFArrayRemoveValueAtIndex(v1, i);
      v6.length = CFArrayGetCount(v1);
      v6.location = 0;
    }
  }

}

void sub_1001F33A8(void *a1)
{
  __CFArray *v1;
  id value;

  value = a1;
  v1 = (__CFArray *)sub_1001F3268();
  CFArrayAppendValue(v1, value);

}

void sub_1001F33D8(void *a1)
{
  const __CFArray *v1;
  CFIndex FirstIndexOfValue;
  CFIndex i;
  id value;
  CFRange v5;
  CFRange v6;

  value = a1;
  v1 = (const __CFArray *)sub_1001F3268();
  v5.length = CFArrayGetCount(v1);
  v5.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v1, v5, value);
  if (FirstIndexOfValue != -1)
  {
    for (i = FirstIndexOfValue; i != -1; i = CFArrayGetFirstIndexOfValue(v1, v6, value))
    {
      CFArrayRemoveValueAtIndex(v1, i);
      v6.length = CFArrayGetCount(v1);
      v6.location = 0;
    }
  }

}

void sub_1001F3460(void *a1)
{
  const __CFArray *v1;
  CFIndex FirstIndexOfValue;
  CFIndex i;
  id value;
  CFRange v5;
  CFRange v6;

  value = a1;
  v1 = (const __CFArray *)sub_1001F31B0();
  v5.length = CFArrayGetCount(v1);
  v5.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v1, v5, value);
  if (FirstIndexOfValue != -1)
  {
    for (i = FirstIndexOfValue; i != -1; i = CFArrayGetFirstIndexOfValue(v1, v6, value))
    {
      CFArrayRemoveValueAtIndex(v1, i);
      v6.length = CFArrayGetCount(v1);
      v6.location = 0;
    }
  }

}

void sub_1001F34E8(void *a1)
{
  id v1;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v3;
  CFMutableArrayRef v4;
  __CFDictionary *v5;
  uint64_t v6;
  void *v7;
  id v8;
  __CFDictionary *v9;
  CFMutableArrayRef v10;
  CFMutableArrayRef v11;
  CFMutableArrayRef v12;
  const __CFArray *v13;
  id v14;
  __CFDictionary *v15;
  CFMutableArrayRef v16;
  CFMutableArrayRef v17;
  CFMutableArrayRef v18;
  const __CFArray *v19;
  __CFDictionary *v20;
  unsigned int v21;
  const void *v22;
  NSObject *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  const void *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *i;
  uint64_t v39;
  const void *v40;
  NSObject *v41;
  const void *v42;
  NSObject *v43;
  void *v44;
  CFStringRef v45;
  dispatch_queue_global_t global_queue;
  void *v47;
  __CFDictionary *v48;
  CFMutableArrayRef cf;
  CFMutableArrayRef v50;
  CFMutableArrayRef v51;
  id v52;
  __CFDictionary *v53;
  void *v54;
  id obj;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  __CFDictionary *v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  const char *v65;
  _QWORD v66[4];
  id v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[4];
  id v81;
  CFMutableArrayRef v82;
  CFMutableArrayRef v83;
  CFMutableArrayRef v84;
  _QWORD context[4];
  id v86;
  CFMutableArrayRef v87;
  CFMutableArrayRef v88;
  CFMutableArrayRef v89;
  _QWORD v90[4];
  id v91;
  CFMutableArrayRef v92;
  CFMutableArrayRef v93;
  CFMutableArrayRef v94;
  uint8_t buf[4];
  const char *v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  _BYTE v101[128];
  _QWORD v102[3];
  _BYTE v103[128];
  _QWORD v104[3];
  _BYTE v105[128];
  CFRange v106;
  CFRange v107;

  v1 = a1;
  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v3 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v4 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v5 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (qword_100341638 != -1)
    dispatch_once(&qword_100341638, &stru_1002EC8A8);
  v6 = sub_1001F31B0();
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v90[0] = _NSConcreteStackBlock;
  v90[1] = 3221225472;
  v90[2] = sub_1001F3EA0;
  v90[3] = &unk_1002EC8D0;
  v8 = v1;
  v91 = v8;
  v92 = Mutable;
  v93 = v3;
  v94 = v4;
  v54 = v7;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v90);
  v9 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(v9, CFSTR("AlwaysKeys"), Mutable);
  CFDictionarySetValue(v9, CFSTR("FirstUnlockKeys"), v3);
  CFDictionarySetValue(v9, CFSTR("UnlockedKeys"), v4);
  v53 = v9;
  CFDictionarySetValue(v5, CFSTR("KeyParameter"), v9);
  if (Mutable)
    CFRelease(Mutable);
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  v10 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v11 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v12 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v13 = (const __CFArray *)sub_1001F3268();
  context[0] = _NSConcreteStackBlock;
  context[1] = 3221225472;
  context[2] = sub_1001F3FDC;
  context[3] = &unk_1002EC8F8;
  v14 = v8;
  v86 = v14;
  v87 = v10;
  v88 = v11;
  v89 = v12;
  v106.length = CFArrayGetCount(v13);
  v106.location = 0;
  CFArrayApplyFunction(v13, v106, (CFArrayApplierFunction)sub_1001F30E4, context);
  v15 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(v15, CFSTR("AlwaysKeys"), v10);
  CFDictionarySetValue(v15, CFSTR("FirstUnlockKeys"), v11);
  CFDictionarySetValue(v15, CFSTR("UnlockedKeys"), v12);
  CFDictionarySetValue(v5, CFSTR("Circle"), v15);
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  v16 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v17 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v18 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v19 = (const __CFArray *)sub_1001F30F8();
  v80[0] = _NSConcreteStackBlock;
  v80[1] = 3221225472;
  v80[2] = sub_1001F41D8;
  v80[3] = &unk_1002EC8F8;
  v52 = v14;
  v81 = v52;
  v82 = v16;
  v83 = v17;
  v84 = v18;
  v107.length = CFArrayGetCount(v19);
  v107.location = 0;
  CFArrayApplyFunction(v19, v107, (CFArrayApplierFunction)sub_1001F30E4, v80);
  v20 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  cf = v16;
  CFDictionarySetValue(v20, CFSTR("AlwaysKeys"), v16);
  v50 = v17;
  CFDictionarySetValue(v20, CFSTR("FirstUnlockKeys"), v17);
  v51 = v18;
  CFDictionarySetValue(v20, CFSTR("UnlockedKeys"), v18);
  v48 = v20;
  CFDictionarySetValue(v5, CFSTR("Message"), v20);
  v21 = objc_msgSend((id)qword_100341630, "hasChanged:", v5);
  v22 = sub_10000EF14("key-interests");
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v24 = "No Change, Ignoring";
    if (v21)
      v24 = "Registering with CKP";
    *(_DWORD *)buf = 136315138;
    v96 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Calculating interests done: %s", buf, 0xCu);
  }

  if (v21)
  {
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v104[0] = CFSTR("Message");
    v104[1] = CFSTR("Circle");
    v104[2] = CFSTR("KeyParameter");
    obj = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v104, 3));
    v60 = v5;
    v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v76, v105, 16);
    v25 = 0;
    if (v57)
    {
      v56 = *(_QWORD *)v77;
      do
      {
        v26 = 0;
        do
        {
          if (*(_QWORD *)v77 != v56)
            objc_enumerationMutation(obj);
          v58 = v26;
          v27 = *(const char **)(*((_QWORD *)&v76 + 1) + 8 * v26);
          v28 = sub_10000EF14("key-interests");
          v29 = objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v96 = v27;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Updating interests: %@", buf, 0xCu);
          }

          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v102[0] = CFSTR("AlwaysKeys");
          v102[1] = CFSTR("FirstUnlockKeys");
          v102[2] = CFSTR("UnlockedKeys");
          v59 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v102, 3));
          v62 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v72, v103, 16);
          if (v62)
          {
            v61 = *(_QWORD *)v73;
            do
            {
              v30 = 0;
              do
              {
                v65 = v25;
                if (*(_QWORD *)v73 != v61)
                  objc_enumerationMutation(v59);
                v64 = v30;
                v31 = *(_QWORD *)(*((_QWORD *)&v72 + 1) + 8 * v30);
                v32 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v27));
                v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v31));

                v63 = objc_msgSend(v33, "count");
                v68 = 0u;
                v69 = 0u;
                v70 = 0u;
                v71 = 0u;
                v34 = v33;
                v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v68, v101, 16);
                if (v35)
                {
                  v36 = v35;
                  v37 = *(_QWORD *)v69;
                  do
                  {
                    for (i = 0; i != v36; i = (char *)i + 1)
                    {
                      if (*(_QWORD *)v69 != v37)
                        objc_enumerationMutation(v34);
                      v39 = *(_QWORD *)(*((_QWORD *)&v68 + 1) + 8 * (_QWORD)i);
                      v40 = sub_10000EF14("key-interests");
                      v41 = objc_claimAutoreleasedReturnValue(v40);
                      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412802;
                        v96 = v27;
                        v97 = 2112;
                        v98 = v31;
                        v99 = 2112;
                        v100 = v39;
                        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, " key-intrest: %@->%@: %@", buf, 0x20u);
                      }

                    }
                    v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v68, v101, 16);
                  }
                  while (v36);
                }
                v25 = &v65[(_QWORD)v63];

                v30 = v64 + 1;
                v5 = v60;
              }
              while ((id)(v64 + 1) != v62);
              v62 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v72, v103, 16);
            }
            while (v62);
          }

          v26 = v58 + 1;
        }
        while ((id)(v58 + 1) != v57);
        v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v76, v105, 16);
      }
      while (v57);
    }

    v42 = sub_10000EF14("key-interests");
    v43 = objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v96 = v25;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Pushing %lu interests to CKP", buf, 0xCu);
    }

    v44 = v52;
    v45 = sub_1001E6B2C(v52);
    global_queue = dispatch_get_global_queue(-2, 0);
    v47 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    v66[0] = _NSConcreteStackBlock;
    v66[1] = 3221225472;
    v66[2] = sub_1001F4300;
    v66[3] = &unk_1002EC920;
    v67 = v52;
    SOSCloudKeychainUpdateKeys(v60, v45, v47, v66);

    if (v45)
      CFRelease(v45);

    v5 = v60;
  }
  else
  {
    v44 = v52;
    objc_msgSend(v52, "setKey_interests_need_updating:", 0);
  }
  if (cf)
    CFRelease(cf);
  if (v50)
    CFRelease(v50);
  if (v51)
    CFRelease(v51);
  if (v53)
    CFRelease(v53);
  if (v15)
    CFRelease(v15);
  if (v48)
    CFRelease(v48);
  if (v5)
    CFRelease(v5);

}

void sub_1001F3EA0(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  const void *v7;
  NSObject *v8;
  CFTypeRef v9;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "SOSTransportKeyParameterGetAccount:", v3));
  v5 = v4;
  if (v4 == (void *)a1[4])
  {
    v6 = objc_msgSend(v3, "SOSTransportKeyParameterGetTransportType:err:", v3, 0);

    if (v6 == (id)1)
    {
      cf = 0;
      if ((objc_msgSend(v3, "SOSTransportKeyParameterKVSAppendKeyInterests:ak:firstUnLock:unlocked:err:", v3, a1[5], a1[6], a1[7], &cf) & 1) == 0)
      {
        v7 = sub_10000EF14("key-interests");
        v8 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v12 = cf;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error getting key parameters interests %@", buf, 0xCu);
        }

      }
      v9 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v9);
      }
    }
  }
  else
  {

  }
}

void sub_1001F3FDC(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  const void *v7;
  NSObject *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  CFTypeRef v13;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v16;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "getAccount"));
  v5 = objc_msgSend(v4, "isEqual:", a1[4]);

  if (v5)
  {
    v6 = v3;
    cf = 0;
    if ((objc_msgSend(v6, "kvsAppendKeyInterest:firstUnlock:unlocked:err:", a1[5], a1[6], a1[7], &cf) & 1) == 0)
    {
      v7 = sub_10000EF14("key-interests");
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v16 = cf;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error getting circle interests %@", buf, 0xCu);
      }

    }
    if ((objc_msgSend(v6, "kvsAppendRingKeyInterest:firstUnlock:unlocked:err:", a1[5], a1[6], a1[7], &cf) & 1) == 0)
    {
      v9 = sub_10000EF14("key-interests");
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v16 = cf;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Error getting ring interests %@", buf, 0xCu);
      }

    }
    if ((objc_msgSend(v6, "kvsAppendDebugKeyInterest:firstUnlock:unlocked:err:", a1[5], a1[6], a1[7], &cf) & 1) == 0)
    {
      v11 = sub_10000EF14("key-interests");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v16 = cf;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Error getting debug key interests %@", buf, 0xCu);
      }

    }
    v13 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v13);
    }

  }
}

void sub_1001F41D8(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  const void *v7;
  NSObject *v8;
  CFTypeRef v9;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "SOSTransportMessageGetAccount"));
  v5 = v4;
  if (v4 == (void *)a1[4])
  {
    v6 = objc_msgSend(v3, "SOSTransportMessageGetTransportType");

    if (v6 == (id)1)
    {
      cf = 0;
      if ((objc_msgSend(v3, "SOSTransportMessageKVSAppendKeyInterest:ak:firstUnlock:unlocked:err:", v3, a1[5], a1[6], a1[7], &cf) & 1) == 0)
      {
        v7 = sub_10000EF14("key-interests");
        v8 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v12 = cf;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error getting message interests %@", buf, 0xCu);
        }

      }
      v9 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v9);
      }
    }
  }
  else
  {

  }
}

id sub_1001F4300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  NSObject *v6;
  int v8;
  uint64_t v9;

  if (!a3)
    return objc_msgSend(*(id *)(a1 + 32), "setKey_interests_need_updating:", 0);
  v5 = sub_10000EF14("key-interests");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412290;
    v9 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error updating keys: %@", (uint8_t *)&v8, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "setKey_interests_need_updating:", 1);
  return objc_msgSend((id)qword_100341630, "reset");
}

void sub_1001F4404(id a1)
{
  SOSDictionaryUpdate *v1;
  void *v2;

  v1 = objc_opt_new(SOSDictionaryUpdate);
  v2 = (void *)qword_100341630;
  qword_100341630 = (uint64_t)v1;

}

uint64_t sub_1001F442C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001F443C(uint64_t a1)
{

}

void sub_1001F4444(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFTypeID v6;
  const void *v7;
  NSObject *v8;
  __CFDictionary *v9;
  const void *v10;
  const __CFDictionary *v11;
  CFTypeID v12;
  void *v13;
  __CFDictionary *Value;
  CFMutableDictionaryRef Mutable;
  CFTypeID v16;
  CFTypeID v17;
  void *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  _QWORD *v24;
  const void *v25;
  NSObject *v26;
  uint64_t v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef cfa;
  void *key;
  uint8_t buf[4];
  CFTypeRef v35;
  __int16 v36;
  const void *v37;
  __int16 v38;
  uint64_t v39;

  cfa = 0;
  key = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  v29 = 0;
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (v6 == CFStringGetTypeID())
    {
      switch(SOSKVSKeyGetKeyTypeAndParse(cf, &key, &v31, &cfa, &v28, &v30, &v29))
      {
        case 0u:
          v9 = *(__CFDictionary **)(a1 + 48);
          v10 = key;
          break;
        case 1u:
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_30;
          v11 = *(const __CFDictionary **)(a1 + 56);
          goto LABEL_17;
        case 2u:
          if (a3)
          {
            v12 = CFGetTypeID(a3);
            if (v12 == CFDataGetTypeID())
            {
              CFRetain(a3);
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
            }
          }
          goto LABEL_30;
        case 3u:
          if (*(_BYTE *)(a1 + 96))
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
          goto LABEL_30;
        case 4u:
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_30;
          v11 = *(const __CFDictionary **)(a1 + 64);
LABEL_17:
          v13 = key;
          Value = (__CFDictionary *)CFDictionaryGetValue(v11, key);
          if (!Value || (Mutable = Value, v16 = CFGetTypeID(Value), v16 != CFDictionaryGetTypeID()))
          {
            Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            CFDictionarySetValue(v11, v13, Mutable);
            if (Mutable)
              CFRelease(Mutable);
          }
          v10 = v30;
          v9 = Mutable;
          break;
        case 5u:
        case 8u:
        case 9u:
        case 0xAu:
          v7 = sub_10000EF14("updates");
          v8 = objc_claimAutoreleasedReturnValue(v7);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v35 = cf;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Unknown key '%@', ignoring", buf, 0xCu);
          }

          goto LABEL_30;
        case 6u:
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_30;
          v9 = *(__CFDictionary **)(a1 + 80);
          v10 = v31;
          break;
        case 7u:
          if (!cfa)
            goto LABEL_30;
          v17 = CFGetTypeID(cfa);
          if (v17 != CFStringGetTypeID() || !*(_BYTE *)(a1 + 96) && !sub_1001F54AC(cfa))
            goto LABEL_30;
          v9 = *(__CFDictionary **)(a1 + 72);
          v10 = cfa;
          break;
        default:
          goto LABEL_30;
      }
      CFDictionarySetValue(v9, v10, a3);
    }
  }
LABEL_30:
  v18 = key;
  if (key)
  {
    key = 0;
    CFRelease(v18);
  }
  v19 = v30;
  if (v30)
  {
    v30 = 0;
    CFRelease(v19);
  }
  v20 = v29;
  if (v29)
  {
    v29 = 0;
    CFRelease(v20);
  }
  v21 = cfa;
  if (cfa)
  {
    cfa = 0;
    CFRelease(v21);
  }
  v22 = v31;
  if (v31)
  {
    v31 = 0;
    CFRelease(v22);
  }
  v23 = v28;
  if (v28)
  {
    v28 = 0;
    CFRelease(v23);
  }
  v24 = *(_QWORD **)(a1 + 88);
  if (v24 && *v24)
  {
    v25 = sub_10000EF14("SecError");
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = **(_QWORD **)(a1 + 88);
      *(_DWORD *)buf = 138412802;
      v35 = cf;
      v36 = 2112;
      v37 = a3;
      v38 = 2112;
      v39 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Peer message processing error for: %@ -> %@ (%@)", buf, 0x20u);
    }

  }
}

uint64_t sub_1001F47A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_1001F47C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  const void *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "SOSTransportKeyParameterGetAccount:", v3));
  v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

  if (v5
    && (objc_msgSend(v3, "SOSTransportKeyParameterHandleKeyParameterChanges:data:err:", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0) & 1) == 0)
  {
    v6 = sub_10000EF14("SecError");
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Transport failed to handle new key parameters: %@", (uint8_t *)&v8, 0xCu);
    }

  }
}

void sub_1001F48C8(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const void *v8;
  NSObject *v9;
  _QWORD context[5];
  uint8_t buf[4];
  uint64_t v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "getAccount"));
  v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40));

  if (v5)
  {
    v6 = (const __CFDictionary *)objc_msgSend(v3, "handleRetirementMessages:err:", a1[5], a1[6]);
    if (v6)
    {
      v7 = v6;
      context[0] = _NSConcreteStackBlock;
      context[1] = 3221225472;
      context[2] = sub_1001F53E8;
      context[3] = &unk_1002ECD08;
      context[4] = a1[7];
      CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)sub_1001F47A8, context);
      CFRelease(v7);
    }
    else
    {
      v8 = sub_10000EF14("SecError");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Transport failed to handle retirement messages: %@", buf, 0xCu);
      }

    }
  }

}

void sub_1001F4A10(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFArray *Value;
  const __CFArray *v9;
  CFTypeID v10;
  id v11;
  uint64_t v12;
  const void *v13;
  NSObject *v14;
  CFTypeRef v15;
  const void *v16;
  NSObject *v17;
  CFTypeRef v18;
  _QWORD context[4];
  id v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef cf;
  CFTypeRef v24;
  uint8_t buf[4];
  CFTypeRef v26;
  CFRange v27;

  v3 = a2;
  cf = 0;
  v24 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "SOSTransportMessageGetAccount"));
  v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40));

  if (v5)
  {
    v6 = (const __CFDictionary *)objc_msgSend(v3, "SOSTransportMessageHandlePeerMessageReturnsHandledCopy:peerMessages:err:", v3, a1[5], &v24);
    if (v6)
    {
      v7 = v6;
      Value = (const __CFArray *)CFDictionaryGetValue(v6, objc_msgSend(v3, "SOSTransportMessageGetCircleName"));
      if (Value)
      {
        v9 = Value;
        v10 = CFGetTypeID(Value);
        if (v10 == CFArrayGetTypeID())
        {
          context[0] = _NSConcreteStackBlock;
          context[1] = 3221225472;
          context[2] = sub_1001F5350;
          context[3] = &unk_1002EDA50;
          v11 = v3;
          v12 = a1[4];
          v20 = v11;
          v21 = v12;
          v22 = a1[6];
          v27.length = CFArrayGetCount(v9);
          v27.location = 0;
          CFArrayApplyFunction(v9, v27, (CFArrayApplierFunction)sub_1001F30E4, context);

        }
      }
      if ((objc_msgSend(v3, "SOSTransportMessageFlushChanges:err:", v3, &cf) & 1) == 0)
      {
        v13 = sub_10000EF14("msg");
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v26 = cf;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Flush failed: %@", buf, 0xCu);
        }

      }
      v15 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v15);
      }
      CFRelease(v7);
    }
    else
    {
      v16 = sub_10000EF14("msg");
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v26 = v24;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No messages handled: %@", buf, 0xCu);
      }

    }
    v18 = v24;
    if (v24)
    {
      v24 = 0;
      CFRelease(v18);
    }
  }

}

void sub_1001F4C58(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  CFIndex Count;
  CFIndex v13;
  const void *v14;
  NSObject *v15;
  _QWORD v16[4];
  __int128 v17;
  uint8_t buf[4];
  CFIndex v19;
  __int16 v20;
  CFIndex v21;
  __int16 v22;
  uint64_t v23;
  CFRange v24;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "getAccount"));
  v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

  if (v5)
  {
    v6 = (const __CFArray *)objc_msgSend(v3, "handleCircleMessagesAndReturnHandledCopy:err:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    if (v6)
    {
      v7 = v6;
      if (CFArrayGetCount(v6))
      {
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_1001F5300;
        v16[3] = &unk_1002ECBA8;
        v17 = *(_OWORD *)(a1 + 48);
        v24.length = CFArrayGetCount(v7);
        v24.location = 0;
        CFArrayApplyFunction(v7, v24, (CFArrayApplierFunction)sub_1001F30E4, v16);
      }
      else if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40)))
      {
        v10 = sub_10000EF14("SecError");
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          Count = CFArrayGetCount(v7);
          v13 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
          *(_DWORD *)buf = 134218498;
          v19 = Count;
          v20 = 2048;
          v21 = v13;
          v22 = 2112;
          v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Transport failed to process all circle messages: (%ld/%ld) %@", buf, 0x20u);
        }

      }
      else
      {
        v14 = sub_10000EF14("circle");
        v15 = objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Transport handled no circle messages", buf, 2u);
        }

      }
      CFRelease(v7);
    }
    else
    {
      v8 = sub_10000EF14("SecError");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Transport failed to handle circle messages: %@", buf, 0xCu);
      }

    }
  }

}

void sub_1001F4EA8(_QWORD *a1, void *a2)
{
  void *v3;
  unsigned int v4;
  const __CFArray *Mutable;
  const __CFDictionary *v6;
  uint64_t v7;
  const void *v8;
  NSObject *v9;
  _QWORD v10[5];
  _QWORD context[7];
  uint8_t buf[4];
  uint64_t v13;
  CFRange v14;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "getAccount"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40));

  if (v4)
  {
    Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    context[0] = _NSConcreteStackBlock;
    context[1] = 3221225472;
    context[2] = sub_1001F5128;
    context[3] = &unk_1002EC9E8;
    v6 = (const __CFDictionary *)a1[5];
    v7 = a1[6];
    context[4] = a1[4];
    context[5] = v7;
    context[6] = Mutable;
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)sub_1001F47A8, context);
    if (CFArrayGetCount(Mutable))
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1001F52B8;
      v10[3] = &unk_1002EDB28;
      v10[4] = a1[7];
      v14.length = CFArrayGetCount(Mutable);
      v14.location = 0;
      CFArrayApplyFunction(Mutable, v14, (CFArrayApplierFunction)sub_1001F30E4, v10);
      if (!Mutable)
        return;
      goto LABEL_4;
    }
    v8 = sub_10000EF14("SecError");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Transport failed to handle ring messages: %@", buf, 0xCu);
    }

    if (Mutable)
LABEL_4:
      CFRelease(Mutable);
  }
}

void sub_1001F5060(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
      CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR("%@ "), cf);
  }
}

void sub_1001F50C4(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
      CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR("%@ "), cf);
  }
}

void sub_1001F5128(uint64_t a1, const void *a2, const __CFData *cf)
{
  const __CFData *v5;
  CFTypeID v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  void *v10;
  const void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  uint8_t v16[16];

  if (!cf || (v5 = cf, v6 = CFGetTypeID(cf), v6 != CFDataGetTypeID()))
    v5 = 0;
  v7 = sub_1001E66E4(*(CFTypeRef **)(a1 + 40), v5);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v10 = v9;
  if (v9)
  {
    if ((objc_msgSend(v9, "accountIsChanging") & 1) != 0)
    {
      v11 = sub_10000EF14("circleOps");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SOSAccountUpdateRingFromRemote called before signing in to new account", v16, 2u);
      }

LABEL_12:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), a2);
LABEL_13:
      if (!v7)
        return;
      goto LABEL_14;
    }
    v9 = v10;
  }
  if (sub_1001D7408(v9, v8))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "trust"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "circle_transport"));
    v15 = objc_msgSend(v13, "handleUpdateRing:prospectiveRing:transport:userPublicKey:writeUpdate:err:", v10, v7, v14, objc_msgSend(v10, "accountKey"), 0, v8);

    if (!v15)
      goto LABEL_13;
    goto LABEL_12;
  }

  if (v7)
LABEL_14:
    CFRelease(v7);
}

void sub_1001F52B8(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = (const void *)SOSRingKeyCreateWithRingName(a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v3);
  if (v3)
    CFRelease(v3);
}

void sub_1001F5300(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = (const void *)SOSCircleKeyCreateWithName(a2, *(_QWORD *)(a1 + 32));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v3);
  if (v3)
    CFRelease(v3);
}

void sub_1001F5350(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t v5;
  void *v6;
  const void *v7;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "peerID"));
      v7 = (const void *)SOSMessageKeyCreateFromPeerToTransport(v5, v6, cf);

      if (v7)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), v7);
        CFRelease(v7);
      }
    }
  }
}

void sub_1001F53E8(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  uint64_t v4;
  _QWORD v5[6];
  CFRange v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001F5464;
  v5[3] = &unk_1002ECBA8;
  v4 = *(_QWORD *)(a1 + 32);
  v5[4] = a2;
  v5[5] = v4;
  v6.length = CFArrayGetCount(theArray);
  v6.location = 0;
  CFArrayApplyFunction(theArray, v6, (CFArrayApplierFunction)sub_1001F30E4, v5);
}

void sub_1001F5464(uint64_t a1)
{
  const void *v2;

  v2 = (const void *)SOSRetirementKeyCreateWithCircleNameAndPeer(*(_QWORD *)(a1 + 32));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v2);
  if (v2)
    CFRelease(v2);
}

uint64_t sub_1001F54AC(const void *a1)
{
  uint64_t result;

  if (CFEqual(a1, CFSTR("iCloudIdentity-tomb")))
    return 1;
  if (CFEqual(a1, CFSTR("PCS-MasterKey-tomb")))
    return 1;
  result = CFEqual(a1, CFSTR("RecoveryRing"));
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_1001F5504()
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F5580;
  block[3] = &unk_1002ED1A0;
  block[4] = &qword_100341648;
  if (qword_100341640 != -1)
    dispatch_once(&qword_100341640, block);
  return qword_100341648;
}

uint64_t sub_1001F5580(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_1002ECA08);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

void sub_1001F55B0(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[2];
  if (v2)
  {
    a1[2] = 0;
    CFRelease(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    a1[3] = 0;
    CFRelease(v3);
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    a1[5] = 0;
    CFRelease(v4);
  }
}

__CFString *sub_1001F5604(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  __CFString *Mutable;

  v2 = (const void *)SOSGenerationCountCopyDescription(a1[3]);
  v3 = (const void *)SOSCopyIDOfDataBufferWithLength(a1[5], 8, 0);
  Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<SOSRecoveryKeyBag@%p DSID: %@ version: %d  gencount: %@  RecoveryKeyID: %@ "), a1, a1[2], a1[4], v2, v3);
  CFStringAppend(Mutable, CFSTR(">"));
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  return Mutable;
}

__CFString *sub_1001F56B8(_QWORD *a1)
{
  sub_100005100();
  return sub_1001F5604(a1);
}

BOOL sub_1001F56DC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;

  v4 = a1[5];
  v5 = v4 != 0;
  if (!v4)
    SOSCreateError(1025, CFSTR("RecoveryKeyBag has no public key"), 0, a2);
  if (!a1[2])
  {
    SOSCreateError(1025, CFSTR("RecoveryKeyBag has no DSID"), 0, a2);
    v5 = 0;
  }
  if (!a1[3])
  {
    SOSCreateError(1025, CFSTR("RecoveryKeyBag has no generation"), 0, a2);
    return 0;
  }
  return v5;
}

uint64_t sub_1001F5778(const __CFAllocator *a1, void *a2, const __CFData *a3, uint64_t *a4)
{
  void *v5;
  __CFString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Instance;
  uint64_t v14;
  const void *v15;
  const void *v16;
  NSObject *v17;
  uint64_t v18;
  const __CFString *v20;
  int v21;
  uint64_t v22;

  v5 = a2;
  if (!a2)
  {
    v20 = CFSTR("Null Account Object");
LABEL_22:
    SOSCreateError(1025, v20, 0, a4);
LABEL_24:
    v14 = 0;
    goto LABEL_12;
  }
  v8 = (__CFString *)sub_1001CDAF8(a2);
  if (!v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore defaultStore](ACAccountStore, "defaultStore"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "aa_primaryAppleAccount"));
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "aa_personID"));

    sub_1001E6A88(v5, kSOSDSIDKey, (uint64_t)v8, 0);
    if (!v8)
    {
      SOSCreateError(1025, CFSTR("Couldn't get dsid for recovery keybag components"), 0, a4);
      v5 = 0;
      goto LABEL_24;
    }
  }
  v11 = SOSGenerationCreate();
  v5 = (void *)v11;
  if (!a3 || !v11)
  {
    v20 = CFSTR("Couldn't get recovery keybag components");
    goto LABEL_22;
  }
  v12 = sub_1001F5504();
  Instance = _CFRuntimeCreateInstance(a1, v12, 32, 0);
  v14 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 32) = 1;
    *(_QWORD *)(Instance + 16) = CFStringCreateCopy(a1, v8);
    if (*(void **)(v14 + 24) != v5)
    {
      CFRetain(v5);
      v15 = *(const void **)(v14 + 24);
      if (v15)
        CFRelease(v15);
      *(_QWORD *)(v14 + 24) = v5;
    }
    *(_QWORD *)(v14 + 40) = CFDataCreateCopy(a1, a3);
  }
  else
  {
    SOSCreateError(1025, CFSTR("Couldn't get memory for recoveryKeyBag"), 0, a4);
  }
LABEL_12:
  if (a4 && *a4)
  {
    v16 = sub_10000EF14("recovery");
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *a4;
      v21 = 138412290;
      v22 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Error in SOSRecoveryKeyBagCreateForAccount - %@", (uint8_t *)&v21, 0xCu);
    }

  }
  if (v5)
    CFRelease(v5);
  return v14;
}

__CFData *sub_1001F59B4(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFIndex Length;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  CFIndex v13;
  CFIndex v14;
  uint64_t v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1)
    return 0;
  if (!sub_1001F56DC((_QWORD *)a1, (uint64_t)a2))
    return 0;
  v4 = sub_100020F24(*(const __CFString **)(a1 + 16));
  v5 = SOSGenCountGetDEREncodedSize(*(_QWORD *)(a1 + 24), 0) + v4;
  v6 = v5 + ccder_sizeof_uint64(*(_QWORD *)(a1 + 32));
  Length = CFDataGetLength(*(CFDataRef *)(a1 + 40));
  v8 = ccder_sizeof_raw_octet_string(Length);
  v9 = ccder_sizeof(0x2000000000000010, v6 + v8);
  if (!v9)
    return 0;
  v10 = v9;
  Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
  CFDataSetLength(Mutable, v10);
  if (!sub_1000326EC((uint64_t)Mutable, a2, CFSTR("Failed to create scratch")))
    goto LABEL_8;
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  v13 = CFDataGetLength(Mutable);
  if (MutableBytePtr)
  {
    v14 = v13;
    if (!sub_1001F56DC((_QWORD *)a1, (uint64_t)a2))
      goto LABEL_8;
    v15 = (uint64_t)&MutableBytePtr[v14];
    v16 = *(const __CFString **)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(a1 + 32);
    sub_1000206B0(*(const __CFData **)(a1 + 40), a2, (uint64_t)MutableBytePtr, v15);
    v19 = ccder_encode_uint64(v18);
    v20 = SOSGenCountEncodeToDER(v17, a2, MutableBytePtr, v19);
    v22 = sub_1000205A8(v16, a2, MutableBytePtr, v20, v21);
    if ((UInt8 *)ccder_encode_constructed_tl(0x2000000000000010, v15, MutableBytePtr, v22) != MutableBytePtr)
    {
LABEL_8:
      if (Mutable)
      {
        CFRelease(Mutable);
        return 0;
      }
    }
  }
  return Mutable;
}

uint64_t sub_1001F5B30(const __CFAllocator *a1, CFDataRef theData, CFTypeRef *a3)
{
  const UInt8 *BytePtr;
  uint64_t v7;
  uint64_t v8;
  uint64_t Instance;
  const UInt8 *v10;
  const UInt8 *v11;
  const UInt8 *v12;
  uint64_t v14;
  const UInt8 *v15;

  BytePtr = CFDataGetBytePtr(theData);
  v7 = (uint64_t)&BytePtr[CFDataGetLength(theData)];
  v15 = BytePtr;
  if (!BytePtr)
    goto LABEL_8;
  v8 = sub_1001F5504();
  Instance = _CFRuntimeCreateInstance(a1, v8, 32, 0);
  if (!sub_1000326EC(Instance, a3, CFSTR("Recovery bag allocation failed"))
    || (v14 = 0, v10 = (const UInt8 *)ccder_decode_sequence_tl(&v14, BytePtr, v7), v15 = v10, v14 != v7))
  {
    if (!Instance)
    {
LABEL_9:
      v12 = 0;
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  v15 = sub_100020DA8(kCFAllocatorDefault, (CFStringRef *)(Instance + 16), a3, (uint64_t)v10, v7);
  *(_QWORD *)(Instance + 24) = SOSGenCountCreateFromDER(kCFAllocatorDefault, a3, &v15, v14);
  v15 = (const UInt8 *)ccder_decode_uint64(Instance + 32, v15, v14);
  v11 = sub_100021480(a1, (CFDataRef *)(Instance + 40), a3, (uint64_t)v15, v14);
  v15 = v11;
  sub_10003268C(v11 == (const UInt8 *)v7, a3, CFSTR("Extra space in sequence"));
  if (v11 != (const UInt8 *)v7)
  {
LABEL_7:
    CFRelease((CFTypeRef)Instance);
LABEL_8:
    Instance = 0;
    goto LABEL_9;
  }
  v12 = v15;
LABEL_10:
  sub_10003268C(v12 == (const UInt8 *)v7, a3, CFSTR("Didn't consume all data supplied"));
  if (v12 != (const UInt8 *)v7 && Instance)
  {
    CFRelease((CFTypeRef)Instance);
    return 0;
  }
  return Instance;
}

void sub_1001F7C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001F8940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F897C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001F898C(uint64_t a1)
{

}

BOOL sub_1001F8994(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t PeerInfo;
  uint64_t PeerID;
  const void *v14;
  NSObject *v15;
  CFTypeRef v16;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v20;

  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v5 = objc_msgSend(*(id *)(a1 + 32), "fullPeerInfo");
  v6 = *(_QWORD *)(a1 + 64);
  v7 = sub_1001CA91C(v4, (uint64_t)CFSTR("EscrowRecord"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = SOSFullPeerInfoReplaceEscrowRecords(v5, v7, v6);
  v8 = SOSCircleRequestAdmission(a2, *(_QWORD *)(a1 + 72), objc_msgSend(*(id *)(a1 + 32), "fullPeerInfo"), *(_QWORD *)(a1 + 64));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v9 + 24))
    v10 = v8;
  else
    v10 = 0;
  *(_BYTE *)(v9 + 24) = v10;
  objc_msgSend(*(id *)(a1 + 32), "setDepartureCode:", 1);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    return 0;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  if (!v11)
    return 1;
  cf = 0;
  PeerInfo = SOSFullPeerInfoGetPeerInfo(v11);
  PeerID = SOSPeerInfoGetPeerID(PeerInfo);
  if (PeerID)
  {
    if (SOSCircleHasActivePeerWithID(a2, PeerID, &cf))
      SOSCircleAcceptRequest(a2, *(_QWORD *)(a1 + 72), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), objc_msgSend(*(id *)(a1 + 32), "peerInfo"), &cf);
    if (cf)
    {
      v14 = sub_10000EF14("SecError");
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v20 = cf;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Failed to join with cloud identity: %@", buf, 0xCu);
      }

      v16 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v16);
      }
    }
  }
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != 0;
}

uint64_t sub_1001F8B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef *v6;
  const void *v8;
  NSObject *v9;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  CFTypeRef v14;

  cf = 0;
  if (SOSCircleResetToOffering(a2, *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 32), "fullPeerInfo"), &cf)&& (objc_msgSend(*(id *)(a1 + 32), "setDepartureCode:", 1), objc_msgSend(*(id *)(a1 + 32), "addEscrowToPeerInfo:err:", objc_msgSend(*(id *)(a1 + 32), "fullPeerInfo"), *(_QWORD *)(a1 + 56)))&& objc_msgSend(*(id *)(a1 + 32), "addiCloudIdentity:key:err:", a2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)))
  {
    sub_1001D4D14(*(void **)(a1 + 40), 0);
    v4 = 1;
    objc_msgSend(*(id *)(a1 + 40), "setNotifyBackupOnExit:", 1);
  }
  else
  {
    v8 = sub_10000EF14("SecError");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v12 = a2;
      v13 = 2112;
      v14 = cf;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "error resetting circle (%@) to offering: %@", buf, 0x16u);
    }

    v4 = 0;
  }
  v5 = cf;
  if (cf)
  {
    v6 = *(CFTypeRef **)(a1 + 56);
    if (v6 && !*v6)
    {
      *v6 = cf;
    }
    else
    {
      cf = 0;
      CFRelease(v5);
    }
  }
  return v4;
}

BOOL sub_1001F8D0C(uint64_t a1, uint64_t a2)
{
  return sub_1001CE630(*(void **)(a1 + 32), a2, *(CFTypeRef **)(a1 + 40));
}

BOOL sub_1001F8D18(uint64_t a1, uint64_t a2)
{
  return sub_1001CE630(*(void **)(a1 + 32), a2, *(CFTypeRef **)(a1 + 40));
}

uint64_t sub_1001F8D24(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = SOSPeerInfoGetPeerID(a2);
  if (result)
  {
    result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", result);
    if ((result & 1) == 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  return result;
}

uint64_t sub_1001F8D78(uint64_t a1, uint64_t a2)
{
  id v4;
  int HasPeer;
  uint64_t updated;
  char v7;
  void *v8;
  unsigned int v9;
  const void *v10;
  NSObject *v11;
  void *v12;
  _DWORD v14[2];

  v4 = objc_msgSend(*(id *)(a1 + 32), "peerInfo");
  HasPeer = SOSCircleHasPeer(a2, v4, 0);
  updated = SOSCircleUpdatePeerInfo(a2, v4);
  if (HasPeer)
  {
    v7 = SOSCircleVerify(a2, objc_msgSend(*(id *)(a1 + 32), "accountKey"), 0);
    v8 = *(void **)(a1 + 40);
    if ((v7 & 1) != 0)
    {
      updated = updated | objc_msgSend(v8, "fixICloudIdentities:circle:", *(_QWORD *)(a1 + 32), a2);
    }
    else
    {
      v9 = objc_msgSend(v8, "upgradeiCloudIdentity:privKey:", a2, *(_QWORD *)(a1 + 48));
      objc_msgSend(*(id *)(a1 + 40), "removeInvalidApplications:userPublic:", a2, objc_msgSend(*(id *)(a1 + 32), "accountKey"));
      updated = updated | v9 | SOSCircleGenerationSign(a2, *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 40), "fullPeerInfo"), 0);
      objc_msgSend(*(id *)(a1 + 40), "setDepartureCode:", 1);
    }
  }
  v10 = sub_10000EF14("updatingGenSignature");
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 67109120;
    v14[1] = updated;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "we changed the circle? %{BOOL}d", (uint8_t *)v14, 8u);
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "iCloudCheckEventHandle:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v12, "followup");

  return updated;
}

void sub_1001F8F14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t PeerID;
  const void *v6;

  v4 = *(_QWORD *)(a1 + 40);
  PeerID = SOSPeerInfoGetPeerID(a2);
  v6 = (const void *)SOSCircleCopyPeerWithID(v4, PeerID, 0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= sub_1001F9010(a2, (uint64_t)v6);
  if (v6)
    CFRelease(v6);
}

void sub_1001F8F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t PeerID;
  const void *v6;

  v4 = *(_QWORD *)(a1 + 40);
  PeerID = SOSPeerInfoGetPeerID(a2);
  v6 = (const void *)SOSCircleCopyPeerWithID(v4, PeerID, 0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= sub_1001F9010((uint64_t)v6, a2);
  if (v6)
    CFRelease(v6);
}

BOOL sub_1001F9010(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  _BOOL8 v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  const void *v13;
  NSObject *v14;
  const void *v15;
  NSObject *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  CFTypeRef v31;

  if (!a1)
    return a2 != 0;
  cf = 0;
  v4 = (const void *)SOSPeerInfoCopyOctagonSigningPublicKey(a1, &cf);
  v26 = 0;
  v5 = (const void *)SOSPeerInfoCopyOctagonEncryptionPublicKey(a1, &v26);
  v25 = 0;
  if (a2)
  {
    v6 = (const void *)SOSPeerInfoCopyOctagonSigningPublicKey(a2, &v25);
    v24 = 0;
    v7 = (const void *)SOSPeerInfoCopyOctagonEncryptionPublicKey(a2, &v24);
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v24 = 0;
  }
  if (cf)
  {
    v9 = sub_10000EF14("SecError");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v29 = a1;
      v30 = 2112;
      v31 = cf;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "circleOps: Cannot fetch signing key for old %@: %@", buf, 0x16u);
    }

  }
  if (v26)
  {
    v11 = sub_10000EF14("SecError");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v29 = a1;
      v30 = 2112;
      v31 = v26;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "circleOps: Cannot fetch encryption key for old %@: %@", buf, 0x16u);
    }

  }
  if (a2 && v25)
  {
    v13 = sub_10000EF14("SecError");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v29 = a2;
      v30 = 2112;
      v31 = v25;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "circleOps: Cannot fetch signing key for new %@: %@", buf, 0x16u);
    }

  }
  if (a2 && v24)
  {
    v15 = sub_10000EF14("SecError");
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v29 = a2;
      v30 = 2112;
      v31 = v24;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "circleOps: Cannot fetch encryption key for new %@: %@", buf, 0x16u);
    }

  }
  v17 = sub_1001F9350((uint64_t)v4, (uint64_t)v6);
  v18 = sub_1001F9350((uint64_t)v5, (uint64_t)v7);
  v19 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v19);
  }
  if (v4)
    CFRelease(v4);
  v20 = v26;
  if (v26)
  {
    v26 = 0;
    CFRelease(v20);
  }
  if (v5)
    CFRelease(v5);
  v21 = v25;
  if (v25)
  {
    v25 = 0;
    CFRelease(v21);
  }
  if (v6)
    CFRelease(v6);
  v22 = v24;
  if (v24)
  {
    v24 = 0;
    CFRelease(v22);
  }
  v8 = !v17 || !v18;
  if (v7)
    CFRelease(v7);
  return v8;
}

BOOL sub_1001F9350(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  if (!a1 || !a2)
    return (a1 | a2) == 0;
  v3 = (void *)SecKeyCopySubjectPublicKeyInfo(a1);
  v4 = (void *)SecKeyCopySubjectPublicKeyInfo(a2);
  v5 = objc_msgSend(v3, "isEqual:", v4);

  return (BOOL)v5;
}

void sub_1001F93BC(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t PeerID;

  v3 = a2;
  v4 = a1;
  v5 = objc_msgSend(v4, "peerInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "trust"));

  v7 = objc_msgSend(v6, "trustedCircle");
  if (v7 && v5)
  {
    v8 = v7;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001F9484;
    v9[3] = &unk_1002ECB38;
    PeerID = SOSPeerInfoGetPeerID(v5);
    v10 = v3;
    SOSCircleForEachPeer(v8, v9);

  }
}

uint64_t sub_1001F9484(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = SOSPeerInfoGetPeerID(a2);
  if (result)
  {
    result = CFEqual((CFTypeRef)result, *(CFTypeRef *)(a1 + 40));
    if (!(_DWORD)result)
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  return result;
}

void sub_1001FA174(uint64_t a1)
{
  dispatch_queue_global_t global_queue;
  id v3;

  global_queue = dispatch_get_global_queue(-2, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue(global_queue);
  SOSCloudKeychainPutObjectsInCloud(a1, v3, &stru_1002ECBE8);

}

void sub_1001FA1C4(id a1, __CFDictionary *a2, __CFError *a3)
{
  const void *v4;
  NSObject *v5;
  int v6;
  __CFError *v7;

  if (a3)
  {
    v4 = sub_10000EF14("SecError");
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error putting: %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_1001FA270(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = (const void *)SOSRingKeyCreateWithRingName(a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v3);
  if (v3)
    CFRelease(v3);
}

void sub_1001FA2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(a1 + 32);
  SOSPeerInfoGetPeerID(a2);
  v4 = (const void *)SOSRetirementKeyCreateWithCircleNameAndPeer(v3);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v4);
  if (v4)
    CFRelease(v4);
}

void sub_1001FA310(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFTypeID v6;
  CFTypeID TypeID;
  CFTypeID v8;
  const void *v9;
  NSObject *v10;
  id v11;
  void *v12;
  const void *v13;
  NSObject *v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  const void *v18;
  NSObject *v19;
  uint64_t v20;
  const __CFString *v21;
  CFTypeRef Name;
  CFTypeRef v23;
  void *v24;
  void *v25;
  unsigned __int8 v26;
  CFErrorRef v27;
  CFErrorDomain Domain;
  const void *v29;
  NSObject *v30;
  CFTypeID v31;
  CFStringRef v32;
  CFStringRef v33;
  const void *v34;
  NSObject *v35;
  const void *v36;
  NSObject *v37;
  const void *v38;
  NSObject *v39;
  const void *v40;
  NSObject *v41;
  const void *v42;
  NSObject *v43;
  CFErrorRef err;
  uint8_t buf[4];
  CFTypeRef v46;
  __int16 v47;
  const void *v48;
  __int16 v49;
  CFErrorRef v50;

  if (!cf
    || (v6 = CFGetTypeID(cf), TypeID = CFStringGetTypeID(), !a3)
    || v6 != TypeID
    || (v8 = CFGetTypeID(a3), v8 != CFDataGetTypeID()))
  {
    v9 = sub_10000EF14("SecError");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Error, Key-Value for CircleMessage was not CFString/CFData", buf, 2u);
    }

  }
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
  v12 = v11;
  err = 0;
  if (v11 && objc_msgSend(v11, "accountIsChanging"))
  {
    v13 = sub_10000EF14("circleOps");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "SOSAccountHandleCircleMessage called before signing in to new account", buf, 2u);
    }

LABEL_48:
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), cf);
    return;
  }
  if (!a3)
    goto LABEL_17;
  v15 = CFGetTypeID(a3);
  if (v15 != CFDataGetTypeID())
  {
    v16 = CFGetTypeID(a3);
    if (v16 != CFNullGetTypeID())
    {
      v29 = sub_10000EF14("circleOps");
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Value provided not appropriate for a circle", buf, 2u);
      }

      v31 = CFGetTypeID(a3);
      v32 = CFCopyTypeIDDescription(v31);
      SOSCreateErrorWithFormat(1040, 0, &err, 0, CFSTR("Expected data or NULL got %@"));
      if (!v32)
        goto LABEL_43;
      v33 = v32;
      goto LABEL_42;
    }
  }
  v17 = CFGetTypeID(a3);
  if (v17 == CFNullGetTypeID())
  {
LABEL_17:
    v18 = sub_10000EF14("circleOps");
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v46 = a3;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "No circle found in data: %@", buf, 0xCu);
    }

    goto LABEL_43;
  }
  v20 = SOSCircleCreateFromData(0, a3, &err);
  if (!v20)
  {
    v34 = sub_10000EF14("circleOps");
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "SOSCircleCreateFromData returned NULL.", buf, 2u);
    }

    goto LABEL_43;
  }
  v21 = (const __CFString *)v20;
  Name = (CFTypeRef)SOSCircleGetName(v20);
  v23 = Name;
  if (cf && Name)
  {
    if (CFEqual(Name, cf))
      goto LABEL_24;
    goto LABEL_39;
  }
  if (Name != cf)
  {
LABEL_39:
    v36 = sub_10000EF14("circleOps");
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v46 = cf;
      v47 = 2112;
      v48 = v23;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Expected circle named %@, got %@", buf, 0x16u);
    }

    SOSCreateErrorWithFormat(1026, 0, &err, 0, CFSTR("Expected circle named %@, got %@"));
    v33 = v21;
LABEL_42:
    CFRelease(v33);
LABEL_43:
    v38 = sub_10000EF14("SecError");
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "NULL circle found, ignoring ...", buf, 2u);
    }

    v27 = err;
    goto LABEL_46;
  }
LABEL_24:
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "trust"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "circle_transport"));
  v26 = objc_msgSend(v24, "updateCircleFromRemote:newCircle:err:", v25, v21, &err);

  CFRelease(v21);
  v27 = err;
  if ((v26 & 1) != 0)
  {
LABEL_46:
    if (v27)
    {
      err = 0;
      CFRelease(v27);
    }
    goto LABEL_48;
  }
  if (err)
  {
    if (CFErrorGetCode(err) == 5)
    {
      Domain = CFErrorGetDomain(v27);
      if (Domain && kSOSErrorDomain)
      {
        if (!CFEqual(Domain, kSOSErrorDomain))
          goto LABEL_54;
LABEL_51:
        v40 = sub_10000EF14("SecError");
        v41 = objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v46 = cf;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Incompatible circle found, abandoning membership: %@", buf, 0xCu);
        }

        goto LABEL_54;
      }
      if (Domain == (CFErrorDomain)kSOSErrorDomain)
        goto LABEL_51;
    }
LABEL_54:
    v27 = err;
  }

  v42 = sub_10000EF14("SecError");
  v43 = objc_claimAutoreleasedReturnValue(v42);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v46 = cf;
    v47 = 2112;
    v48 = a3;
    v49 = 2112;
    v50 = v27;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Error handling circle message %@ (%@): %@", buf, 0x20u);
  }

  if (v27)
    CFRelease(v27);
}

uint64_t sub_1001FA8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_1001FA8C8(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFTypeID v6;
  CFTypeID TypeID;
  CFTypeID v8;
  uint64_t v9;
  _QWORD v10[6];
  CFRange v11;

  if (cf)
  {
    v6 = CFGetTypeID(cf);
    TypeID = CFStringGetTypeID();
    if (a3)
    {
      if (v6 == TypeID)
      {
        v8 = CFGetTypeID(a3);
        if (v8 == CFArrayGetTypeID())
        {
          v10[0] = _NSConcreteStackBlock;
          v10[1] = 3221225472;
          v10[2] = sub_1001FA98C;
          v10[3] = &unk_1002ECBA8;
          v9 = *(_QWORD *)(a1 + 32);
          v10[4] = cf;
          v10[5] = v9;
          v11.length = CFArrayGetCount((CFArrayRef)a3);
          v11.location = 0;
          CFArrayApplyFunction((CFArrayRef)a3, v11, (CFArrayApplierFunction)sub_1001FAA10, v10);
        }
      }
    }
  }
}

void sub_1001FA98C(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v3;
  const void *v4;

  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 == CFStringGetTypeID())
    {
      v4 = (const void *)SOSRetirementKeyCreateWithCircleNameAndPeer(*(_QWORD *)(a1 + 32));
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 40), v4, kCFNull);
      if (v4)
        CFRelease(v4);
    }
  }
}

uint64_t sub_1001FAA10(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1001FB394(uint64_t a1, const __CFString *a2)
{
  CFStringAppend(*(CFMutableStringRef *)(a1 + 32), a2);
}

void sub_1001FB39C(id a1, __CFDictionary *a2, __CFError *a3)
{
  const void *v4;
  NSObject *v5;
  int v6;
  __CFError *v7;

  if (a3)
  {
    v4 = sub_10000EF14("SecError");
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error putting: %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_1001FC14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001FC358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001FC3DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id *v10;
  void *v11;
  id v12;
  SOSEnginePeerMessageCallBackInfo *v13;
  const void *v14;
  NSObject *v15;
  int v16;
  const void *v17;
  NSObject *v18;
  CFTypeRef v19;
  const void *v20;
  NSObject *v21;
  const __CFArray *v22;
  id v23;
  void *v24;
  PeerRateLimiter *v25;
  void *v26;
  const void *v27;
  NSObject *v28;
  CFIndex Count;
  id v30;
  const void *v31;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  _BOOL4 v38;
  CFIndex v39;
  const void *v40;
  NSObject *v41;
  CFArrayRef v42;
  id v43;
  PeerRateLimiter *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  unsigned __int8 v49;
  const void *v50;
  NSObject *v51;
  uint64_t v52;
  int v53;
  SOSEnginePeerMessageCallBackInfo *v54;
  CFArrayRef v55;
  SOSEnginePeerMessageCallBackInfo *v57;
  CFArrayRef theArray;
  CFTypeRef v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  void (*v64)(uint64_t);
  id v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  _QWORD v70[3];
  _QWORD v71[3];
  __int128 buf;
  void (*v73)(uint64_t, void *);
  void *v74;
  id v75;
  id v76;
  id v77;
  uint64_t *v78;
  uint64_t *v79;
  void *v80;
  CFTypeRef v81;
  CFRange v82;
  CFRange v83;
  CFRange v84;

  theArray = 0;
  v59 = 0;
  v10 = (id *)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "SOSTransportMessageGetAccount"));
  v12 = objc_msgSend(*v10, "engine");
  v57 = 0;
  LOBYTE(v10) = sub_1001EDE80(v11, (uint64_t)v12, a5, (uint64_t)a2, a3, &v59, *(void **)(a1 + 56), &theArray, &v57, *(CFTypeRef **)(a1 + 64));
  v13 = v57;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)v10;

  v14 = sub_10000EF14("ratelimit");
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = theArray;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "attribute list: %@", (uint8_t *)&buf, 0xCu);
  }

  if (!theArray)
  {
    theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(theArray, CFSTR("NoAttribute"));
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v16 = 1;
  }
  else
  {
    v17 = sub_10000EF14("ratelimit");
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "not going to rate limit, currently in initial sync", (uint8_t *)&buf, 2u);
    }

    v16 = *(unsigned __int8 *)(a1 + 72);
  }
  v19 = v59;
  if (v16 && v59)
  {
    v20 = sub_10000EF14("ratelimit");
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "not in initial sync!", (uint8_t *)&buf, 2u);
    }

    v22 = theArray;
    v23 = *(id *)(a1 + 32);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v66 = 0;
    v67 = &v66;
    v68 = 0x2020000000;
    v69 = 0;
    v25 = sub_1001FCB9C((uint64_t)a2);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v60 = 0;
    v61 = &v60;
    v62 = 0x3032000000;
    v63 = sub_1001FCBF4;
    v64 = sub_1001FCC04;
    v65 = 0;
    if (qword_100341658 == -1)
    {
      if (v22)
      {
LABEL_16:
        v27 = sub_10000EF14("ratelimit");
        v28 = objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          Count = CFArrayGetCount(v22);
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = Count;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "number of attributes to review: %lu", (uint8_t *)&buf, 0xCu);
        }

        *(_QWORD *)&buf = _NSConcreteStackBlock;
        *((_QWORD *)&buf + 1) = 3221225472;
        v73 = sub_1001FCC0C;
        v74 = &unk_1002ECCA0;
        v75 = v26;
        v76 = v24;
        v78 = &v60;
        v30 = v23;
        v80 = a2;
        v81 = v19;
        v77 = v30;
        v79 = &v66;
        -[__CFArray enumerateObjectsUsingBlock:](v22, "enumerateObjectsUsingBlock:", &buf);

LABEL_25:
        if (objc_msgSend((id)v61[5], "count"))
        {
          v70[0] = CFSTR("timestamp");
          objc_msgSend(v24, "timeIntervalSince1970");
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
          v71[0] = v34;
          v70[1] = CFSTR("peerShouldSend");
          v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v67 + 24)));
          v70[2] = CFSTR("attributeBadness");
          v36 = v61[5];
          v71[1] = v35;
          v71[2] = v36;
          v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v71, v70, 3));
          sub_10001CD10(CFSTR("SOSKVSRateLimitingEvent"), v37);

        }
        v38 = *((_BYTE *)v67 + 24) != 0;
        _Block_object_dispose(&v60, 8);

        _Block_object_dispose(&v66, 8);
        v39 = CFArrayGetCount(theArray);
        v82.location = 0;
        v82.length = v39;
        if (CFArrayContainsValue(theArray, v82, CFSTR("com.apple.security.ckks"))
          || (v83.location = 0, v83.length = v39, CFArrayContainsValue(theArray, v83, CFSTR("com.apple.sbd")))
          || (v84.location = 0, v84.length = v39,
                                  CFArrayContainsValue(theArray, v84, CFSTR("com.apple.securebackupd"))))
        {
          v38 = 1;
        }
        v40 = sub_10000EF14("ratelimit");
        v41 = objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v38;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "should send? : %{BOOL}d", (uint8_t *)&buf, 8u);
        }

        if (!v38)
        {
          v50 = sub_10000EF14("ratelimit");
          v51 = objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            v52 = *(_QWORD *)(a1 + 56);
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v52;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "peer is rate limited: %@", (uint8_t *)&buf, 0xCu);
          }

          goto LABEL_43;
        }
LABEL_34:
        v42 = theArray;
        v43 = *(id *)(a1 + 32);
        v44 = sub_1001FCB9C((uint64_t)a2);
        v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
        *(_QWORD *)&buf = _NSConcreteStackBlock;
        *((_QWORD *)&buf + 1) = 3221225472;
        v73 = sub_1001FD1F4;
        v74 = &unk_1002ECCE8;
        v75 = v45;
        v76 = v43;
        v77 = a2;
        v46 = v45;
        v47 = v43;
        -[__CFArray enumerateObjectsUsingBlock:](v42, "enumerateObjectsUsingBlock:", &buf);

        v48 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        if (*(_BYTE *)(v48 + 24))
        {
          v49 = objc_msgSend(*(id *)(a1 + 32), "SOSTransportMessageSendMessage:id:messageToSend:err:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), v19, *(_QWORD *)(a1 + 64));
          v48 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        }
        else
        {
          v49 = 0;
        }
        *(_BYTE *)(v48 + 24) = v49;
        v53 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        v54 = v13;
        if (-[OTSOSActualAdapter sosEnabled]_0())
          -[SOSEnginePeerMessageCallBackInfo callCallback:](v54, "callCallback:", v53 != 0);

        objc_msgSend(*(id *)(a1 + 32), "SOSTransportMessageUpdateLastMessageSentTimetstamp:peer:", *(_QWORD *)(a1 + 40), a2);
LABEL_43:

        CFRelease(v19);
        goto LABEL_44;
      }
    }
    else
    {
      dispatch_once(&qword_100341658, &stru_1002ECC78);
      if (v22)
        goto LABEL_16;
    }
    *((_BYTE *)v67 + 24) = 1;
    goto LABEL_25;
  }
  if (v59)
    goto LABEL_34;
  v31 = sub_10000EF14("transport");
  v32 = objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    v33 = *(_QWORD *)(a1 + 56);
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v33;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "no message to send to peer: %@", (uint8_t *)&buf, 0xCu);
  }

LABEL_44:
  v55 = theArray;
  if (theArray)
  {
    theArray = 0;
    CFRelease(v55);
  }
  *a6 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
}

void sub_1001FCB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

PeerRateLimiter *sub_1001FCB9C(uint64_t a1)
{
  PeerRateLimiter *v2;
  PeerRateLimiter *v3;

  v2 = (PeerRateLimiter *)*(id *)(a1 + 96);
  if (!v2)
  {
    v3 = -[PeerRateLimiter initWithPeer:]([PeerRateLimiter alloc], "initWithPeer:", a1);
    v2 = v3;
    if (v3)
      CFRetain(v3);
    *(_QWORD *)(a1 + 96) = v2;
  }
  return v2;
}

uint64_t sub_1001FCBF4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001FCC04(uint64_t a1)
{

}

void sub_1001FCC0C(uint64_t a1, void *a2)
{
  id v3;
  unsigned int v4;
  KeychainItem *v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  const void *v27;
  NSObject *v28;
  uint64_t v29;
  id v30;
  id v31;
  const void *v32;
  NSObject *v33;
  NSObject *v34;
  dispatch_time_t v35;
  const void *v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  const void *v43;
  const char *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  KeychainItem *v49;
  id v50;
  _QWORD handler[6];
  _BYTE buf[24];
  void *v53;
  uint64_t v54;
  id v55;

  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "stateForAccessGroup:", v3);
  if (v4 == 2)
  {
    v43 = sub_10000EF14("ratelimit");
    v9 = objc_claimAutoreleasedReturnValue(v43);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      goto LABEL_30;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v3;
    v44 = "access group: %@ is being rate limited";
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v44, buf, 0xCu);
    goto LABEL_30;
  }
  if (v4 != 1)
  {
    v45 = sub_10000EF14("ratelimit");
    v9 = objc_claimAutoreleasedReturnValue(v45);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      goto LABEL_30;
    v46 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v46;
    v44 = "no state for limiter for peer: %@";
    goto LABEL_27;
  }
  v5 = -[KeychainItem initWithAccessGroup:]([KeychainItem alloc], "initWithAccessGroup:", v3);
  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v50 = 0;
  v8 = objc_msgSend(v6, "judge:at:limitTime:", v5, v7, &v50);
  v9 = v50;
  v10 = sub_10000EF14("ratelimit");
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "accessGroup: %@, judged: %lu", buf, 0x16u);
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100341650, "objectForKeyedSubscript:", v3));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v8));
  if ((objc_msgSend(v12, "isEqual:", v13) & 1) == 0)
  {
    objc_msgSend((id)qword_100341650, "setObject:forKeyedSubscript:", v13, v3);
    v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    if (!v14)
    {
      v15 = objc_alloc_init((Class)NSMutableDictionary);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v17 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v15;

      v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    }
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, v3);
  }
  -[NSObject timeIntervalSinceDate:](v9, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 40));
  if (v18 <= 0.0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
  else
  {
    v19 = v18;
    v49 = v5;
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "SOSTransportMessageGetAccount"));
    v21 = *(void **)(a1 + 32);
    *(_QWORD *)buf = 0;
    v22 = v3;
    v23 = v21;
    v24 = sub_1001CA91C(v20, (uint64_t)CFSTR("RateLimitCounters"));
    v25 = (id)objc_claimAutoreleasedReturnValue(v24);
    if (!v25)
      v25 = objc_alloc_init((Class)NSMutableDictionary);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "diagnostics"));
    objc_msgSend(v25, "setObject:forKey:", v26, v22);

    sub_1001E6A88(v20, (uint64_t)CFSTR("RateLimitCounters"), (uint64_t)v25, (CFTypeRef *)buf);
    v27 = sub_10000EF14("ratelimit");
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "setting a timer for next sync: %@", buf, 0xCu);
    }
    v48 = v12;

    v29 = *(_QWORD *)(a1 + 80);
    v47 = *(_QWORD *)(a1 + 72);
    v30 = *(id *)(a1 + 32);
    v31 = v22;
    v32 = sub_10000EF14("ratelimit");
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = (int)v19;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "SOSPeerSetNextTimeToSend next time: %d", buf, 8u);
    }

    v34 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)&_dispatch_main_q);
    v35 = dispatch_time(0, 1000000000 * (int)v19);
    dispatch_source_set_timer(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 0);
    v36 = sub_10000EF14("ratelimit");
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 1000000000 * (int)v19;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "SOSPeerSetNextTimeToSend next time to sync: %llu", buf, 0xCu);
    }

    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "accessGroupToNextMessageToSend"));
    objc_msgSend(v38, "setObject:forKey:", v29, v31);

    v39 = *(_QWORD *)(v47 + 16);
    if (v39)
      CFRetain(*(CFTypeRef *)(v47 + 16));
    if (v31)
      CFRetain(v31);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_1001FD408;
    v53 = &unk_1002ECCC0;
    v54 = v39;
    v55 = v31;
    dispatch_source_set_event_handler(v34, buf);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1001FD4FC;
    handler[3] = &unk_1002ECCC0;
    handler[4] = v39;
    handler[5] = v31;
    dispatch_source_set_cancel_handler(v34, handler);
    dispatch_resume(v34);
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "accessGroupToTimer"));
    objc_msgSend(v40, "setObject:forKey:", v34, v31);

    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroupRateLimitState"));
    v42 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithLong:", 2);
    objc_msgSend(v41, "setObject:forKey:", v42, v31);

    v12 = v48;
    v5 = v49;
  }

LABEL_30:
}

void sub_1001FD1F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  const void *v8;
  NSObject *v9;
  _BOOL4 v10;
  BOOL v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  id v25;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroupToNextMessageToSend"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v3));

  if (!v5)
    goto LABEL_14;
  v21 = 0;
  v6 = objc_msgSend(*(id *)(a1 + 40), "SOSTransportMessageSendMessage:id:messageToSend:err:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), v5, &v21);
  v7 = v21;
  v8 = sub_10000EF14("ratelimit");
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v6)
    v11 = v7 == 0;
  else
    v11 = 0;
  if (v11)
  {
    if (v10)
    {
      *(_DWORD *)buf = 138412546;
      v23 = v5;
      v24 = 2112;
      v25 = v3;
      v12 = "SOSTransportSendPendingMessage: sent pending message: %@ for access group: %@";
      v13 = v9;
      v14 = 22;
      goto LABEL_10;
    }
  }
  else if (v10)
  {
    *(_DWORD *)buf = 138412290;
    v23 = v21;
    v12 = "SOSTransportSendPendingMessage: could not send message: %@";
    v13 = v9;
    v14 = 12;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroupToNextMessageToSend"));
  objc_msgSend(v15, "removeObjectForKey:", v3);

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroupToTimer"));
  v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKey:", v3));

  if (v17)
    dispatch_source_cancel(v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroupToTimer"));
  objc_msgSend(v18, "removeObjectForKey:", v3);

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessGroupRateLimitState"));
  v20 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithLong:", 1);
  objc_msgSend(v19, "setObject:forKey:", v20, v3);

LABEL_14:
}

void sub_1001FD408(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  _QWORD v3[4];
  __int128 v4;
  CFTypeRef v5;
  uint8_t buf[4];
  CFTypeRef v7;

  v5 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100212370;
  v3[3] = &unk_1002ECDF0;
  v4 = *(_OWORD *)(a1 + 32);
  sub_100205C98(&v5, v3);
  if (v5)
  {
    v1 = sub_10000EF14("SecError");
    v2 = objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "error sending next message: %@", buf, 0xCu);
    }

  }
}

void sub_1001FD4FC(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void sub_1001FD538(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableDictionary);
  v2 = (void *)qword_100341650;
  qword_100341650 = (uint64_t)v1;

}

void sub_1001FD560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v7;
  __CFString **v8;
  const __CFData *v10;
  __CFString *Mutable;
  int v12;
  CFMutableDataRef v13;
  CFMutableDataRef v14;
  int v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  CFMutableDataRef MutableCopy;
  CFIndex v20;
  uint64_t v21;
  const void *v22;
  CFIndex *v23;
  const UInt8 *BytePtr;
  unsigned __int8 Length;
  CFIndex v26;
  unsigned __int8 v27;
  __CFData *v28;
  UInt8 *MutableBytePtr;
  NSObject *v30;
  __CFString *v31;
  __CFString *v32;
  int v33;
  const void *v34;
  __CFString *v35;
  const void *v36;
  NSObject *v37;
  __CFString *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  const void *Value;
  NSObject *v44;
  const void *v45;
  NSObject *v46;
  int v47;
  const void *v48;
  NSObject *v49;
  const void *v50;
  const void *v51;
  NSObject *v52;
  const void *v53;
  const void *v54;
  NSObject *v55;
  uint64_t v56;
  const void *v57;
  NSObject *v58;
  const void *v59;
  NSObject *v60;
  const void *v61;
  CFDataRef v62;
  id v63;
  uint64_t v64;
  void *v65;
  void *v66;
  BOOL v67;
  const void *v68;
  NSObject *v69;
  void *v70;
  id v71;
  id v72;
  const void *v73;
  NSObject *v74;
  id v75;
  void *v76;
  CFTypeRef *p_isa;
  uint64_t v78;
  uint64_t Instance;
  uint64_t v80;
  const UInt8 *v81;
  CFIndex v82;
  const UInt8 *v83;
  const UInt8 *v84;
  const UInt8 *v85;
  const UInt8 *v86;
  const UInt8 *v87;
  const UInt8 *v88;
  uint64_t v89;
  NSObject *v90;
  const void *v91;
  NSObject *v92;
  const void *v93;
  NSObject *v94;
  _QWORD *v95;
  unsigned int v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  const UInt8 *v102;
  uint64_t v103;
  uint64_t v104;
  const __CFData *v105;
  NSObject *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const UInt8 *v116;
  NSObject *v117;
  const UInt8 *v118;
  uint64_t v119;
  NSObject *v120;
  const UInt8 *v121;
  NSObject *v122;
  uint64_t v123;
  const UInt8 *v124;
  uint64_t v125;
  uint64_t v126;
  const UInt8 *v127;
  unsigned __int8 *v128;
  const UInt8 *v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  _BOOL4 v133;
  NSObject *v134;
  uint64_t v135;
  const void *v136;
  uint64_t v137;
  __CFArray *v138;
  _QWORD *v139;
  const __CFArray *v140;
  char v141;
  Class isa;
  _BOOL4 v143;
  _BOOL4 v144;
  uint64_t *v145;
  CFDataRef *v146;
  uint64_t *v147;
  const void *v148;
  NSObject *v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  const void *v153;
  NSObject *v154;
  Class v155;
  char v156;
  char v157;
  uint64_t v158;
  unint64_t v159;
  CFDataRef *v160;
  const void *v161;
  NSObject *v162;
  _QWORD *v163;
  BOOL v164;
  uint64_t v165;
  const void *v166;
  NSObject *v167;
  Class v168;
  CFDataRef *v169;
  CFDataRef *v170;
  uint64_t v171;
  const void *v172;
  CFTypeRef v173;
  const void *v174;
  BOOL v175;
  const void *v176;
  NSObject *v177;
  uint64_t v178;
  uint64_t v179;
  const void *v180;
  const void *v181;
  const void *v182;
  NSObject *v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  BOOL v187;
  CFDataRef *v188;
  CFDataRef *v189;
  const void *v190;
  NSObject *v191;
  _BOOL4 v192;
  uint64_t v193;
  unint64_t v194;
  __CFData *v195;
  unint64_t v196;
  __CFData *v197;
  const char *v198;
  NSObject *v199;
  uint32_t v200;
  const void *v201;
  NSObject *v202;
  Class v203;
  const void *v204;
  uint64_t v205;
  unint64_t v206;
  __CFData *v207;
  const void *v208;
  NSObject *v209;
  uint64_t v210;
  Class v211;
  const void *v212;
  NSObject *v213;
  const void *v214;
  NSObject *v215;
  uint64_t v216;
  _QWORD *v217;
  const void *v218;
  NSObject *v219;
  uint64_t v220;
  unint64_t v221;
  const UInt8 *v222;
  NSObject *v223;
  const void *v224;
  NSObject *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  __CFData *v230;
  unint64_t v231;
  unint64_t v232;
  CFDataRef *v233;
  const UInt8 *v234;
  NSObject *v235;
  const UInt8 *v236;
  uint64_t v237;
  CFDataRef v238;
  const UInt8 *v239;
  uint64_t v240;
  uint64_t v241;
  __CFData *v242;
  unint64_t v243;
  uint64_t v244;
  __CFData *v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  CFStringRef v249;
  CFDataRef *v250;
  CFDataRef *v251;
  __CFString *theString;
  CFDataRef *theStringa;
  __CFString **v254;
  unsigned __int8 *v255;
  CFTypeRef v256;
  CFStringRef cf;
  _QWORD *cfa;
  CFDataRef *v260;
  os_log_t loga;
  os_log_t logb;
  NSObject *logc;
  char v266;
  void *v267[2];
  __int128 v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  char v272;
  char *v273;
  uint64_t *v274;
  uint64_t v275;
  const char *v276;
  __int128 v277;
  __int128 v278;
  CFDataRef v279;
  CFDataRef *v280;
  uint64_t v281;
  const char *v282;
  __int128 v283;
  __int128 v284;
  CFDataRef *v285;
  CFDataRef *v286;
  uint64_t buf[3];
  void *v288;
  _QWORD v289[10];
  char v290;
  _QWORD v291[3];
  void *v292;
  _QWORD v293[3];

  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(__CFString ***)(a1 + 72);
  if (a3)
  {
    v10 = *(const __CFData **)(a1 + 64);
    v279 = 0;
    if (v10)
    {
      if (*(_QWORD *)(a3 + 24))
      {
        Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
        cf = CFCopyDescription(*(CFTypeRef *)(a3 + 24));
        v12 = SecOTRSGetMessageKind(*(_QWORD *)(a3 + 24), v10);
        if (v12 != 1)
        {
          if (v12)
          {
            v30 = sub_10000EF14("SecError");
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 138412546;
              *(uint64_t *)((char *)buf + 4) = v7;
              WORD2(buf[1]) = 2112;
              *(uint64_t *)((char *)&buf[1] + 6) = (uint64_t)v10;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%@ Unknown packet type: %@", (uint8_t *)buf, 0x16u);
            }
            if (v8)
              v31 = *v8;
            else
              v31 = 0;
            SOSCreateError(1029, CFSTR("Unknown packet type"), v31, v8);
          }
          else
          {
            v13 = CFDataCreateMutable(kCFAllocatorDefault, 0);
            if (v13)
            {
              v14 = v13;
              v15 = SecOTRSProcessPacket(*(_QWORD *)(a3 + 24), v10, v13);
              if (v15 == -26275)
              {
                CFStringAppend(Mutable, CFSTR("resending dh"));
                LODWORD(v18) = sub_1001E745C(a3);
              }
              else if (v15)
              {
                if (v8)
                  v35 = *v8;
                else
                  v35 = 0;
                v246 = v7;
                v247 = v15;
                SOSCreateErrorWithFormat(1025, v35, v8, 0, CFSTR("%@ Cannot negotiate session (%ld)"));
                LODWORD(v18) = 3;
              }
              else if (CFDataGetLength(v14) < 2)
              {
                if ((SecOTRSGetIsReadyForMessages(*(_QWORD *)(a3 + 24)) & 1) != 0)
                {
                  CFStringAppend(Mutable, CFSTR("completed negotiation"));
                  *(_BYTE *)(a3 + 32) = 0;
                  LODWORD(v18) = 2;
                }
                else
                {
                  CFStringAppend(Mutable, CFSTR("stuck?"));
                  LODWORD(v18) = 1;
                }
              }
              else
              {
                v16 = SecOTRPacketTypeString(v14);
                CFStringAppendFormat(Mutable, 0, CFSTR("Sending OTR Response %s"), v16);
                if (*(CFMutableDataRef *)(a3 + 40) != v14)
                {
                  CFRetain(v14);
                  v17 = *(const void **)(a3 + 40);
                  if (v17)
                    CFRelease(v17);
                  *(_QWORD *)(a3 + 40) = v14;
                }
                LODWORD(v18) = 1;
                if (SecOTRSGetIsReadyForMessages(*(_QWORD *)(a3 + 24)))
                {
                  CFStringAppend(Mutable, CFSTR(" begin waiting for data packet"));
                  *(_BYTE *)(a3 + 32) = 1;
                }
              }
              CFRelease(v14);
              MutableCopy = 0;
              goto LABEL_70;
            }
            if (v8)
              v32 = *v8;
            else
              v32 = 0;
            v246 = v7;
            SOSCreateErrorWithFormat(1024, v32, v8, 0, CFSTR("%@ Cannot allocate CFData"));
          }
          MutableCopy = 0;
          LODWORD(v18) = 3;
LABEL_70:
          if (v8 && (_DWORD)v18 == 3 && *v8)
            CFStringAppendFormat(Mutable, 0, CFSTR(" %@"), *v8);
          v39 = sub_10000EF14("coder");
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            v40 = SecOTRPacketTypeString(v10);
            v41 = *(_QWORD *)(a3 + 24);
            if (v18 > 5)
              v42 = "StatusUnknown";
            else
              v42 = off_1002EC250[v18];
            LODWORD(buf[0]) = 138413570;
            *(uint64_t *)((char *)buf + 4) = v7;
            WORD2(buf[1]) = 2112;
            *(uint64_t *)((char *)&buf[1] + 6) = (uint64_t)cf;
            HIWORD(buf[2]) = 2080;
            v288 = (void *)v40;
            LOWORD(v289[0]) = 2112;
            *(_QWORD *)((char *)v289 + 2) = Mutable;
            WORD1(v289[1]) = 2112;
            *(_QWORD *)((char *)&v289[1] + 4) = v41;
            WORD2(v289[2]) = 2080;
            *(_QWORD *)((char *)&v289[2] + 6) = v42;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%@ %@ %s %@ %@ returned %s", (uint8_t *)buf, 0x3Eu);
          }
          if (cf)
            CFRelease(cf);
          CFRelease(Mutable);
          goto LABEL_82;
        }
        theString = Mutable;
        v254 = v8;
        v21 = v7;
        v22 = *(const void **)(a3 + 48);
        v23 = (CFIndex *)ccsha1_di();
        BytePtr = CFDataGetBytePtr(v10);
        Length = CFDataGetLength(v10);
        v26 = *v23;
        if (*v23 < 0)
        {
          v28 = 0;
        }
        else
        {
          v27 = Length;
          v28 = CFDataCreateMutable(kCFAllocatorDefault, 0);
          CFDataSetLength(v28, v26);
          MutableBytePtr = CFDataGetMutableBytePtr(v28);
          ccdigest(v23, v27, BytePtr, MutableBytePtr);
        }
        *(_QWORD *)(a3 + 48) = v28;
        v33 = *(unsigned __int8 *)(a3 + 56);
        *(_BYTE *)(a3 + 56) = 0;
        v7 = v21;
        v34 = v22;
        if ((SecOTRSGetIsReadyForMessages(*(_QWORD *)(a3 + 24)) & 1) == 0)
        {
          Mutable = theString;
          CFStringAppend(theString, CFSTR("not ready for data; resending DH packet"));
          LODWORD(v18) = sub_1001E745C(a3);
          MutableCopy = 0;
          v8 = v254;
          goto LABEL_68;
        }
        Mutable = theString;
        if (*(_BYTE *)(a3 + 32))
        {
          CFStringAppend(theString, CFSTR("got data packet we were waiting for "));
          *(_BYTE *)(a3 + 32) = 0;
        }
        MutableCopy = CFDataCreateMutable(0, 0);
        v18 = SecOTRSVerifyAndExposeMessage(*(_QWORD *)(a3 + 24), v10, MutableCopy);
        CFStringAppend(theString, CFSTR("verify and expose message"));
        v8 = v254;
        if ((_DWORD)v18 == -25329)
        {
          CFStringAppend(theString, CFSTR(" too new"));
          LODWORD(v18) = 5;
          goto LABEL_66;
        }
        if ((_DWORD)v18 != -25328)
        {
          if (!(_DWORD)v18)
          {
            CFStringAppend(theString, CFSTR("decoded OTR protected packet"));
            goto LABEL_68;
          }
          sub_100019F20(v18, v254, CFSTR("%@ Cannot expose message: %d"), v7, v18);
          v37 = sub_10000EF14("SecError");
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            if (v254)
              v38 = *v254;
            else
              v38 = 0;
            LODWORD(buf[0]) = 138412546;
            *(uint64_t *)((char *)buf + 4) = v7;
            WORD2(buf[1]) = 2112;
            *(uint64_t *)((char *)&buf[1] + 6) = (uint64_t)v38;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%@ Decode OTR Protected Packet: %@", (uint8_t *)buf, 0x16u);
          }
          LODWORD(v18) = 3;
          if (!MutableCopy)
            goto LABEL_68;
LABEL_67:
          CFRelease(MutableCopy);
          MutableCopy = 0;
LABEL_68:
          if (v34)
            CFRelease(v34);
          goto LABEL_70;
        }
        v36 = *(const void **)(a3 + 48);
        if (v34 && v36)
        {
          if (CFEqual(v34, v36))
          {
LABEL_48:
            CFStringAppend(theString, CFSTR(" repeated"));
            LODWORD(v18) = 4;
            goto LABEL_66;
          }
        }
        else if (v34 == v36)
        {
          goto LABEL_48;
        }
        *(_BYTE *)(a3 + 56) = 1;
        if (v33)
        {
          CFStringAppend(theString, CFSTR(" too old, repeated renegotiating"));
          LODWORD(v18) = 3;
        }
        else
        {
          CFStringAppend(theString, CFSTR(" too old, forcing message"));
          LODWORD(v18) = 6;
        }
LABEL_66:
        if (!MutableCopy)
          goto LABEL_68;
        goto LABEL_67;
      }
      v20 = CFDataGetLength(v10);
      MutableCopy = CFDataCreateMutableCopy(0, v20, v10);
    }
    else
    {
      MutableCopy = 0;
    }
    LODWORD(v18) = 0;
LABEL_82:
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 104), *(const void **)(a2 + 16));
    v44 = objc_claimAutoreleasedReturnValue(Value);
    if (v44)
    {
      v45 = sub_10000EF14("otrtimer");
      v46 = objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 138412290;
        *(uint64_t *)((char *)buf + 4) = a2;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "removing timer for peer: %@", (uint8_t *)buf, 0xCu);
      }

      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 104), *(const void **)(a2 + 16));
      dispatch_source_cancel(v44);
    }
    v47 = 1;
    switch((int)v18)
    {
      case 0:
        goto LABEL_110;
      case 1:
        v48 = sub_10000EF14("engine");
        v49 = objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 138412290;
          *(uint64_t *)((char *)buf + 4) = v7;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "%@ engine negotiating", (uint8_t *)buf, 0xCu);
        }
        goto LABEL_98;
      case 2:
        *(_BYTE *)(a2 + 48) = 1;
        sub_1001ED434((__CFArray **)(a2 + 80), *(const void **)(a2 + 72));
        *a6 = 1;
        v53 = sub_10000EF14("engine");
        v49 = objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 138412290;
          *(uint64_t *)((char *)buf + 4) = v7;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "%@ engine negotiation complete", (uint8_t *)buf, 0xCu);
        }
        goto LABEL_98;
      case 3:
        v54 = sub_10000EF14("engine");
        v55 = objc_claimAutoreleasedReturnValue(v54);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          if (v8)
            v56 = (uint64_t)*v8;
          else
            v56 = 0;
          LODWORD(buf[0]) = 138412546;
          *(uint64_t *)((char *)buf + 4) = v7;
          WORD2(buf[1]) = 2112;
          *(uint64_t *)((char *)&buf[1] + 6) = v56;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%@ engine failed handling message %@", (uint8_t *)buf, 0x16u);
        }

        sub_1001E73D8(a3);
        if (sub_1001E7150(a3, &v279) != 3)
          goto LABEL_118;
        v61 = sub_10000EF14("SecError");
        v60 = objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 138412290;
          *(uint64_t *)((char *)buf + 4) = (uint64_t)v279;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Attempt to recover coder failed to restart: %@", (uint8_t *)buf, 0xCu);
        }
        goto LABEL_117;
      case 4:
        v50 = sub_10000EF14("engine");
        v49 = objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0]) = 138412290;
          *(uint64_t *)((char *)buf + 4) = v7;
          _os_log_debug_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "%@ engine stale event ignored", (uint8_t *)buf, 0xCu);
        }
LABEL_98:

        goto LABEL_109;
      case 5:
        v57 = sub_10000EF14("engine");
        v58 = objc_claimAutoreleasedReturnValue(v57);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 138412290;
          *(uint64_t *)((char *)buf + 4) = v7;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "%@ engine received a message too soon, time to restart", (uint8_t *)buf, 0xCu);
        }

        sub_1001E73D8(a3);
        if (sub_1001E7150(a3, &v279) != 3)
          goto LABEL_118;
        v59 = sub_10000EF14("SecError");
        v60 = objc_claimAutoreleasedReturnValue(v59);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 138412290;
          *(uint64_t *)((char *)buf + 4) = (uint64_t)v279;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Attempt to recover coder failed to restart: %@", (uint8_t *)buf, 0xCu);
        }
LABEL_117:

        goto LABEL_118;
      case 6:
        *(_BYTE *)(a2 + 48) = 1;
LABEL_109:
        v47 = 2;
LABEL_110:
        if (!MutableCopy)
          goto LABEL_120;
        goto LABEL_119;
      default:
        v51 = sub_10000EF14("engine");
        v52 = objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 138412546;
          *(uint64_t *)((char *)buf + 4) = v7;
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = v18;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "%@ engine unknown coder state: %d", (uint8_t *)buf, 0x12u);
        }

        sub_10003429C(CFSTR("Execution has encountered an unexpected state"), 0x53C0000Eu);
LABEL_118:
        v47 = 0;
        if (MutableCopy)
        {
LABEL_119:
          CFRetain(MutableCopy);
          CFRelease(MutableCopy);
        }
LABEL_120:

        v62 = v279;
        if (v279)
        {
          v279 = 0;
          CFRelease(v62);
        }
        break;
    }
    goto LABEL_122;
  }
  v224 = sub_10000EF14("SecError");
  v225 = objc_claimAutoreleasedReturnValue(v224);
  if (os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
      v226 = (uint64_t)*v8;
    else
      v226 = 0;
    LODWORD(buf[0]) = 138412546;
    *(uint64_t *)((char *)buf + 4) = v7;
    WORD2(buf[1]) = 2112;
    *(uint64_t *)((char *)&buf[1] + 6) = v226;
    _os_log_impl((void *)&_mh_execute_header, v225, OS_LOG_TYPE_DEFAULT, "%@ getCoder: %@", (uint8_t *)buf, 0x16u);
  }

  MutableCopy = 0;
  v47 = 0;
LABEL_122:
  v63 = sub_1001CA91C(*(void **)(a1 + 32), (uint64_t)CFSTR("NegotiationRetryCount"));
  v64 = objc_claimAutoreleasedReturnValue(v63);
  v65 = (void *)v64;
  if (a3)
  {
    if (v64)
    {
      if ((SecOTRSessionIsSessionInAwaitingState(*(_QWORD *)(a3 + 24)) & 1) == 0)
      {
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKey:", *(_QWORD *)(a1 + 56)));
        v67 = v66 == 0;

        if (!v67)
        {
          v68 = sub_10000EF14("otrtimer");
          v69 = objc_claimAutoreleasedReturnValue(v68);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "otr negotiation completed! clearing max retry counter", (uint8_t *)buf, 2u);
          }

          v70 = *(void **)(a1 + 56);
          v71 = *(id *)(a1 + 32);
          v72 = v70;
          v73 = sub_10000EF14("otrtimer");
          v74 = objc_claimAutoreleasedReturnValue(v73);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "negotiation finished! clearing max retry counter", (uint8_t *)buf, 2u);
          }

          v75 = sub_1001CA91C(v71, (uint64_t)CFSTR("NegotiationRetryCount"));
          v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
          if (!v76)
            v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
          objc_msgSend(v76, "removeObjectForKey:", v72, v246, v247);
          sub_1001E6A88(v71, (uint64_t)CFSTR("NegotiationRetryCount"), (uint64_t)v76, 0);

        }
      }
    }
  }
  if (v47 == 2)
  {
    v91 = sub_10000EF14("engine");
    v92 = objc_claimAutoreleasedReturnValue(v91);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "coder handled a negotiation message", (uint8_t *)buf, 2u);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    if (MutableCopy)
      goto LABEL_274;
    goto LABEL_275;
  }
  if (v47 != 1)
  {
    v93 = sub_10000EF14("engine");
    v94 = objc_claimAutoreleasedReturnValue(v93);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
    {
      v95 = *(_QWORD **)(a1 + 72);
      if (v95)
        v95 = (_QWORD *)*v95;
      LODWORD(buf[0]) = 67109378;
      HIDWORD(buf[0]) = v47;
      LOWORD(buf[1]) = 2112;
      *(uint64_t *)((char *)&buf[1] + 2) = (uint64_t)v95;
      _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "coder handled a error message: %d (error: %@)", (uint8_t *)buf, 0x12u);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    if (MutableCopy)
      goto LABEL_274;
    goto LABEL_275;
  }
  if (MutableCopy && CFDataGetLength(MutableCopy))
  {
    p_isa = *(CFTypeRef **)(a1 + 72);
    v78 = sub_1001EA378();
    Instance = _CFRuntimeCreateInstance(kCFAllocatorDefault, v78, 112, 0);
    if (!Instance)
    {
      v96 = SOSErrorCreate(1024, p_isa, 0, CFSTR("failed to alloc SOSMessage"));
      if ((v96 & 1) != 0)
      {
        v80 = v96;
        goto LABEL_238;
      }
      goto LABEL_269;
    }
    v80 = Instance;
    CFRetain(MutableCopy);
    *(_QWORD *)(v80 + 16) = MutableCopy;
    v81 = CFDataGetBytePtr(MutableCopy);
    v82 = CFDataGetLength(MutableCopy);
    v83 = &v81[v82];
    v269 = 0;
    v267[0] = 0;
    v84 = (const UInt8 *)ccder_decode_tag(&v269, v81, &v81[v82]);
    v85 = 0;
    if (v269 != 0x2000000000000010)
      goto LABEL_236;
    v86 = v84;
    if (v84 && v84 < v83)
    {
      if (*v84 == 128)
      {
        v86 = v84 + 1;
        v267[0] = (void *)-1;
      }
      else
      {
        v101 = ccder_decode_len(v267, v84, v83);
        v86 = (const UInt8 *)v101;
        if (v101 && v267[0] && v267[0] != (void *)-1)
        {
          v102 = &v83[-v101];
          if (&v83[-v101] == v267[0])
          {
            v87 = v83;
          }
          else
          {
            v134 = sub_10000EF14("SecWarning");
            if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 134217984;
              *(uint64_t *)((char *)buf + 4) = (char *)v102 - (char *)v267[0];
              _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "%td trailing bytes after SOSMessage DER", (uint8_t *)buf, 0xCu);
            }
            v87 = &v86[(unint64_t)v267[0]];
          }
LABEL_144:
          if (!ccder_decode_tag(&v269, v86, v87))
            goto LABEL_167;
          if (v269 != 0x2000000000000010)
          {
            if (v269 == 2)
            {
              if (v267[0] != (void *)-1)
              {
                v291[0] = 0;
                v88 = v86;
                v89 = (uint64_t)v87;
                v85 = (const UInt8 *)ccder_decode_uint64(v291, v88, v87);
                if (!v85)
                  goto LABEL_236;
                if (v291[0] != 3)
                {
                  if (v291[0] == 2)
                  {
                    v279 = 0;
                    v222 = sub_1001EB224(4, &v279, (uint64_t)v85, v89);
                    v85 = v222;
                    if (v222)
                    {
                      if (v222 != (const UInt8 *)v89)
                      {
                        logc = sub_10000EF14("SecWarning");
                        if (os_log_type_enabled(logc, OS_LOG_TYPE_DEFAULT))
                        {
                          LODWORD(buf[0]) = 134217984;
                          *(uint64_t *)((char *)buf + 4) = v89 - (_QWORD)v85;
                          _os_log_impl((void *)&_mh_execute_header, logc, OS_LOG_TYPE_DEFAULT, "%td trailing bytes after deltas DER", (uint8_t *)buf, 0xCu);
                        }
                      }
                      *(_QWORD *)(v80 + 72) = sub_1001E8440(v279, p_isa);
                      v223 = sub_10000EF14("engine");
                      if (os_log_type_enabled(v223, OS_LOG_TYPE_DEBUG))
                      {
                        v241 = *(_QWORD *)(v80 + 72);
                        if (v241)
                        {
                          v243 = CFDataGetLength(*(CFDataRef *)(v241 + 24)) / 0x14uLL;
                          v242 = *(__CFData **)(v80 + 72);
                        }
                        else
                        {
                          v242 = 0;
                          v243 = 0;
                        }
                        v245 = sub_1001E8288(v242);
                        LODWORD(buf[0]) = 134218242;
                        *(uint64_t *)((char *)buf + 4) = v243;
                        WORD2(buf[1]) = 2112;
                        *(uint64_t *)((char *)&buf[1] + 6) = (uint64_t)v245;
                        _os_log_debug_impl((void *)&_mh_execute_header, v223, OS_LOG_TYPE_DEBUG, "der_decode_v0_message_body: received a ManifestMessage with (%zu, %@)", (uint8_t *)buf, 0x16u);
                      }
                      if (v279)
                        CFRelease(v279);
                    }
                  }
                  else if (v291[0] == 1)
                  {
                    v85 = sub_1001EB224(4, (CFDataRef *)(v80 + 40), (uint64_t)v85, v89);
                    v90 = sub_10000EF14("engine");
                    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
                    {
                      v240 = *(_QWORD *)(v80 + 40);
                      LODWORD(buf[0]) = 138412290;
                      *(uint64_t *)((char *)buf + 4) = v240;
                      _os_log_debug_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "der_decode_v0_message_body: received a DigestMessage with sender digest: %@", (uint8_t *)buf, 0xCu);
                    }
                  }
                  else
                  {
                    SOSErrorCreate(1042, p_isa, 0, CFSTR("Invalid message type %llu"));
                  }
                  goto LABEL_236;
                }
                v279 = 0;
                v273 = (char *)0xAAAAAAAAAAAAAAAALL;
                v135 = ccder_decode_sequence_tl(&v273, v85, v89);
                if (v273 == (char *)v89)
                {
                  v234 = sub_1001EB224(4, (CFDataRef *)(v80 + 48), v135, v89);
                  v235 = sub_10000EF14("engine");
                  if (os_log_type_enabled(v235, OS_LOG_TYPE_DEBUG))
                  {
                    v244 = *(_QWORD *)(v80 + 48);
                    LODWORD(buf[0]) = 138412290;
                    *(uint64_t *)((char *)buf + 4) = v244;
                    _os_log_debug_impl((void *)&_mh_execute_header, v235, OS_LOG_TYPE_DEBUG, "der_decode_manifest_and_objects_message: decoded base digest as %@", (uint8_t *)buf, 0xCu);
                  }
                  v236 = sub_1001EB2A0(v80, p_isa, (uint64_t)v234, (uint64_t)v273);
                  v237 = ccder_decode_tl(0x2000000000000010, &v279, v236, v273);
                  v238 = v279;
                  *(_QWORD *)(v80 + 24) = v237;
                  *(_QWORD *)(v80 + 32) = v238;
                  v239 = (const UInt8 *)v238 + v237;
                  if (v237)
                    v85 = v239;
                  else
                    v85 = 0;
                  goto LABEL_236;
                }
                SOSErrorCreate(1042, p_isa, 0, CFSTR("Trailing garbage at end of message"));
              }
              v85 = 0;
LABEL_236:
              if (v81 && v85 == v83)
              {
LABEL_238:
                v266 = 1;
                v136 = *(const void **)(a1 + 56);
                v137 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
                v138 = *(__CFArray **)(a1 + 72);
                logb = *(os_log_t *)(a1 + 80);
                if (-[OTSOSActualAdapter sosEnabled]_0())
                {
                  v139 = sub_1000FC7D8((uint64_t)logb, v136, v138);
                  if (v139)
                  {
                    cfa = (_QWORD *)v80;
                    v285 = 0;
                    v286 = 0;
                    v279 = 0;
                    v280 = &v279;
                    v281 = 0x4010000000;
                    v282 = "";
                    v283 = 0u;
                    v284 = 0u;
                    v273 = 0;
                    v274 = (uint64_t *)&v273;
                    v275 = 0x4010000000;
                    v276 = "";
                    v277 = 0u;
                    v278 = 0u;
                    v269 = 0;
                    v270 = &v269;
                    v271 = 0x2020000000;
                    v272 = 1;
                    v140 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                    v249 = CFCopyDescription(v139);
                    if (*((_BYTE *)v270 + 24))
                    {
                      v141 = *((_BYTE *)v139 + 50);
                      isa = logb[2].isa;
                      buf[0] = (uint64_t)_NSConcreteStackBlock;
                      buf[1] = 3221225472;
                      buf[2] = (uint64_t)sub_100101998;
                      v288 = &unk_1002DDF08;
                      v289[4] = v138;
                      v289[5] = &v266;
                      v289[6] = v139;
                      v289[7] = a5;
                      v289[0] = &v279;
                      v289[1] = &v269;
                      v289[2] = &v273;
                      v289[3] = logb;
                      v289[8] = v137 + 24;
                      v289[9] = v140;
                      v290 = v141;
                      v291[0] = _NSConcreteStackBlock;
                      v291[1] = 0x40000000;
                      v291[2] = sub_1001EAB54;
                      v292 = &unk_1002EC4C0;
                      v293[1] = v138;
                      v293[2] = isa;
                      v293[0] = buf;
                      v143 = sub_1001EAC18(v80, (uint64_t)v138, (uint64_t)v291);
                      if (*((_BYTE *)v270 + 24))
                        v144 = v143;
                      else
                        v144 = 0;
                      *((_BYTE *)v270 + 24) = v144;
                      if (!v144)
                      {
                        v251 = 0;
                        theStringa = 0;
                        v189 = 0;
                        v250 = 0;
                        v256 = 0;
LABEL_333:
                        v208 = sub_10000EF14("engine");
                        v209 = objc_claimAutoreleasedReturnValue(v208);
                        if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
                        {
                          v210 = v139[2];
                          v211 = logb[3].isa;
                          LODWORD(v291[0]) = 138412802;
                          *(_QWORD *)((char *)v291 + 4) = v211;
                          WORD2(v291[1]) = 2112;
                          *(_QWORD *)((char *)&v291[1] + 6) = v210;
                          HIWORD(v291[2]) = 2112;
                          v292 = (void *)v80;
                          _os_log_impl((void *)&_mh_execute_header, v209, OS_LOG_TYPE_DEFAULT, "recv %@:%@ %@", (uint8_t *)v291, 0x20u);
                        }

                        v212 = sub_10000EF14("peer");
                        v213 = objc_claimAutoreleasedReturnValue(v212);
                        if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
                        {
                          LODWORD(v291[0]) = 138412546;
                          *(_QWORD *)((char *)v291 + 4) = v249;
                          WORD2(v291[1]) = 2112;
                          *(_QWORD *)((char *)&v291[1] + 6) = v139;
                          _os_log_impl((void *)&_mh_execute_header, v213, OS_LOG_TYPE_DEFAULT, "recv %@ -> %@", (uint8_t *)v291, 0x16u);
                        }

                        if (v251)
                          CFRelease(v251);
                        if (v189)
                          CFRelease(v189);
                        if (v256)
                          CFRelease(v256);
                        if (v249)
                          CFRelease(v249);
                        if (v250)
                          CFRelease(v250);
                        if (theStringa)
                          CFRelease(theStringa);
                        if (v286)
                          CFRelease(v286);
                        if (v285)
                          CFRelease(v285);
                        CFRelease(v139);
                        v164 = *((_BYTE *)v270 + 24) != 0;
                        _Block_object_dispose(&v269, 8);
                        _Block_object_dispose(&v273, 8);
                        _Block_object_dispose(&v279, 8);
                        goto LABEL_354;
                      }
                      *(_OWORD *)v267 = 0u;
                      v268 = 0u;
                      sub_1001E7700((char **)v280 + 4);
                      v145 = (uint64_t *)sub_1001E8534(*(_QWORD *)(v80 + 72));
                      sub_1001E79FC(v145, (uint64_t)(v280 + 4), (char **)v267);
                      v250 = (CFDataRef *)sub_1001E88E8((uint64_t)v267, (CFTypeRef *)v138);
                      v146 = v280;
                      free(v280[4]);
                      v146[4] = 0;
                      v146[5] = 0;
                      *((_BYTE *)v146 + 56) = 0;
                      v146[6] = 0;
                      free(v267[0]);
                      v267[0] = 0;
                      v267[1] = 0;
                      BYTE8(v268) = 0;
                      *(_QWORD *)&v268 = 0;
                      theStringa = (CFDataRef *)sub_1001E88E8((uint64_t)(v274 + 4), (CFTypeRef *)v138);
                      v147 = v274;
                      free((void *)v274[4]);
                      v147[4] = 0;
                      v147[5] = 0;
                      *((_BYTE *)v147 + 56) = 0;
                      v147[6] = 0;
                      if (CFArrayGetCount(v140))
                        sub_10010000C((uint64_t)logb, a5, 2, 0, v140, (CFTypeRef *)v138);
                      if (v140)
                        CFRelease(v140);
                      v256 = sub_1000FFD34((uint64_t)logb, (uint64_t)v139, (uint64_t)v138);
                      *((_BYTE *)v270 + 24) = v256 != 0;
                      if (v256)
                      {
                        *(_QWORD *)&v248 = *(_QWORD *)(v80 + 56);
                        *((_QWORD *)&v248 + 1) = *(_QWORD *)(v80 + 48);
                        v251 = (CFDataRef *)sub_1001ED64C((__CFData **)v139, *((const void **)&v248 + 1));
                        v260 = (CFDataRef *)sub_1001ED64C((__CFData **)v139, *(const void **)(v80 + 40));
                        if (v260)
                        {
                          v148 = sub_10000EF14("engine");
                          v149 = objc_claimAutoreleasedReturnValue(v148);
                          if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
                          {
                            v150 = v139[2];
                            v151 = CFDataGetLength(v260[3]);
                            v152 = *(void **)(v80 + 40);
                            LODWORD(v291[0]) = 138412802;
                            *(_QWORD *)((char *)v291 + 4) = v150;
                            WORD2(v291[1]) = 2048;
                            *(_QWORD *)((char *)&v291[1] + 6) = v151 / 0x14;
                            HIWORD(v291[2]) = 2112;
                            v292 = v152;
                            _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEFAULT, "SOSEngineHandleMessage_locked (%@): got a confirmed manifest by digest: (%zu, %@)", (uint8_t *)v291, 0x20u);
                          }

                        }
                        else
                        {
                          v165 = *(_QWORD *)(v80 + 64);
                          if (v165 && (unint64_t)CFDataGetLength(*(CFDataRef *)(v165 + 24)) > 0x13
                            || v250 && (unint64_t)CFDataGetLength(v250[3]) >= 0x14)
                          {
                            if (!v251 && *((_QWORD *)&v248 + 1))
                              goto LABEL_387;
                            v218 = sub_10000EF14("engine");
                            v219 = objc_claimAutoreleasedReturnValue(v218);
                            if (os_log_type_enabled(v219, OS_LOG_TYPE_DEFAULT))
                            {
                              v220 = v139[2];
                              if (v251)
                                v221 = CFDataGetLength(v251[3]) / 0x14uLL;
                              else
                                v221 = 0;
                              v230 = sub_1001E8288((__CFData *)v251);
                              if (v250)
                                v231 = CFDataGetLength(v250[3]) / 0x14uLL;
                              else
                                v231 = 0;
                              v232 = cfa[8];
                              if (v232)
                                v232 = CFDataGetLength(*(CFDataRef *)(v232 + 24)) / 0x14uLL;
                              LODWORD(v291[0]) = 138413314;
                              *(_QWORD *)((char *)v291 + 4) = v220;
                              WORD2(v291[1]) = 2048;
                              *(_QWORD *)((char *)&v291[1] + 6) = v221;
                              HIWORD(v291[2]) = 2112;
                              v292 = v230;
                              LOWORD(v293[0]) = 2048;
                              *(_QWORD *)((char *)v293 + 2) = v231;
                              WORD1(v293[1]) = 2048;
                              *(_QWORD *)((char *)&v293[1] + 4) = v232;
                              _os_log_impl((void *)&_mh_execute_header, v219, OS_LOG_TYPE_DEFAULT, "SOSEngineHandleMessage_locked (%@): creating a confirmed manifest via a patch (base %zu %@, +%zu, -%zu)", (uint8_t *)v291, 0x34u);
                              v80 = (uint64_t)cfa;
                            }

                            v260 = (CFDataRef *)sub_1001E8930((uint64_t)v251, *(_QWORD *)(v80 + 64), (uint64_t)v250, (CFTypeRef *)v138);
                            if (!v260)
                            {
LABEL_387:
                              v233 = *(CFDataRef **)(v80 + 64);
                              if (v233)
                                CFRetain(*(CFTypeRef *)(v80 + 64));
                              v286 = v233;
                              if (v250)
                                CFRetain(v250);
                              v260 = 0;
                              v285 = v250;
                            }
                          }
                          else if (*((_QWORD *)&v248 + 1))
                          {
                            if (v251)
                              CFRetain(v251);
                            v166 = sub_10000EF14("SecError");
                            v167 = objc_claimAutoreleasedReturnValue(v166);
                            if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
                            {
                              v168 = logb[3].isa;
                              LODWORD(v291[0]) = 138412802;
                              *(_QWORD *)((char *)v291 + 4) = v168;
                              WORD2(v291[1]) = 2112;
                              *(_QWORD *)((char *)&v291[1] + 6) = v136;
                              HIWORD(v291[2]) = 2112;
                              v292 = v251;
                              _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEFAULT, "%@:%@ Protocol error send L00 - figure out later base: %@", (uint8_t *)v291, 0x20u);
                            }

                            v260 = v251;
                          }
                          else
                          {
                            v260 = 0;
                          }
                        }
                        v153 = sub_10000EF14("engine");
                        v154 = objc_claimAutoreleasedReturnValue(v153);
                        if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
                        {
                          v155 = logb[3].isa;
                          LODWORD(v291[0]) = 138413058;
                          *(_QWORD *)((char *)v291 + 4) = v155;
                          WORD2(v291[1]) = 2112;
                          *(_QWORD *)((char *)&v291[1] + 6) = v136;
                          HIWORD(v291[2]) = 2112;
                          v292 = v260;
                          LOWORD(v293[0]) = 2112;
                          *(_QWORD *)((char *)v293 + 2) = v251;
                          _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEFAULT, "%@:%@ confirmed: %@ base: %@", (uint8_t *)v291, 0x2Au);
                        }

                        if (v260
                          && ((v156 = sub_1001E8590(v139[9], (uint64_t)v260, (uint64_t *)&v286, (const void **)&v285, (CFTypeRef *)v138), *((_BYTE *)v270 + 24))? (v157 = v156): (v157 = 0), *((_BYTE *)v270 + 24) = v157, (v158 = *(_QWORD *)(v80 + 64)) != 0))
                        {
                          v159 = CFDataGetLength(*(CFDataRef *)(v158 + 24));
                          v160 = v286;
                          if (v159 >= 0x14)
                          {
                            v160 = sub_1001E8C24((uint64_t)v286, *(CFDataRef **)(v80 + 64), (CFTypeRef *)v138);
                            if (v286)
                              CFRelease(v286);
                            v286 = v160;
                          }
                        }
                        else
                        {
                          v160 = v286;
                        }
                        if ((!v160 || (unint64_t)CFDataGetLength(v160[3]) <= 0x13)
                          && (!v285 || (unint64_t)CFDataGetLength(v285[3]) <= 0x13)
                          && (!theStringa || (unint64_t)CFDataGetLength(theStringa[3]) < 0x14))
                        {
LABEL_318:
                          v188 = (CFDataRef *)v139[9];
                          v189 = v260;
                          if (!v260)
                          {
                            if (v188)
                            {
                              v201 = sub_10000EF14("engine");
                              v202 = objc_claimAutoreleasedReturnValue(v201);
                              if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
                              {
                                v203 = logb[3].isa;
                                LODWORD(v291[0]) = 138412802;
                                *(_QWORD *)((char *)v291 + 4) = v203;
                                WORD2(v291[1]) = 2112;
                                *(_QWORD *)((char *)&v291[1] + 6) = v139;
                                HIWORD(v291[2]) = 2112;
                                v292 = (void *)v80;
                                _os_log_impl((void *)&_mh_execute_header, v202, OS_LOG_TYPE_DEFAULT, "%@:%@ unable to find confirmed in %@, sync protocol reset", (uint8_t *)v291, 0x20u);
                              }

                              v204 = (const void *)v139[9];
                              v189 = 0;
                              if (v204)
                              {
                                CFRelease(v204);
                                v139[9] = 0;
                                v80 = (uint64_t)cfa;
                                v189 = 0;
                              }
                            }
                            goto LABEL_331;
                          }
                          v190 = sub_10000EF14("engine");
                          v191 = objc_claimAutoreleasedReturnValue(v190);
                          v192 = os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT);
                          if (v188)
                          {
                            if (v192)
                            {
                              v193 = v139[2];
                              v194 = CFDataGetLength(v260[3]) / 0x14uLL;
                              v195 = sub_1001E8288((__CFData *)v260);
                              v196 = CFDataGetLength(v188[3]) / 0x14uLL;
                              v197 = sub_1001E8288((__CFData *)v188);
                              LODWORD(v291[0]) = 138413314;
                              *(_QWORD *)((char *)v291 + 4) = v193;
                              v80 = (uint64_t)cfa;
                              WORD2(v291[1]) = 2048;
                              *(_QWORD *)((char *)&v291[1] + 6) = v194;
                              HIWORD(v291[2]) = 2112;
                              v292 = v195;
                              LOWORD(v293[0]) = 2048;
                              *(_QWORD *)((char *)v293 + 2) = v196;
                              WORD1(v293[1]) = 2112;
                              *(_QWORD *)((char *)&v293[1] + 4) = v197;
                              v198 = "SOSEngineHandleMessage_locked (%@): new confirmed manifest (%zu, %@) will replace e"
                                     "xisting confirmed manifest (%zu, %@)";
                              v199 = v191;
                              v200 = 52;
LABEL_329:
                              _os_log_impl((void *)&_mh_execute_header, v199, OS_LOG_TYPE_DEFAULT, v198, (uint8_t *)v291, v200);
                            }
                          }
                          else if (v192)
                          {
                            v205 = v139[2];
                            v206 = CFDataGetLength(v260[3]) / 0x14uLL;
                            v207 = sub_1001E8288((__CFData *)v260);
                            LODWORD(v291[0]) = 138412802;
                            *(_QWORD *)((char *)v291 + 4) = v205;
                            WORD2(v291[1]) = 2048;
                            *(_QWORD *)((char *)&v291[1] + 6) = v206;
                            v80 = (uint64_t)cfa;
                            HIWORD(v291[2]) = 2112;
                            v292 = v207;
                            v198 = "SOSEngineHandleMessage_locked (%@): new confirmed manifest (%zu, %@) is first manifest for peer";
                            v199 = v191;
                            v200 = 32;
                            goto LABEL_329;
                          }

                          v189 = v260;
                          sub_1001ED4F4((uint64_t)v139, v260);
LABEL_331:
                          if (v248 == 0)
                            *((_BYTE *)v139 + 49) = 1;
                          goto LABEL_333;
                        }
                        v170 = v285;
                        v169 = v286;
                        v171 = sub_1001E8AA0((uint64_t)v286, (uint64_t)v256, (CFTypeRef *)v138);
                        v172 = (const void *)v171;
                        if (v171)
                        {
                          v173 = sub_1001E89B8(v171, v169, (CFTypeRef *)v138);
                          if (v173)
                          {
                            v174 = (const void *)sub_1001E8AA0((uint64_t)v170, (uint64_t)v256, (CFTypeRef *)v138);
                            v175 = v174 != 0;
LABEL_300:
                            v176 = sub_10000EF14("peer");
                            v177 = objc_claimAutoreleasedReturnValue(v176);
                            if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
                            {
                              LODWORD(v291[0]) = 138413314;
                              *(_QWORD *)((char *)v291 + 4) = v139;
                              WORD2(v291[1]) = 2112;
                              *(_QWORD *)((char *)&v291[1] + 6) = v172;
                              HIWORD(v291[2]) = 2112;
                              v292 = (void *)v173;
                              LOWORD(v293[0]) = 2112;
                              *(_QWORD *)((char *)v293 + 2) = v174;
                              WORD1(v293[1]) = 2112;
                              *(_QWORD *)((char *)&v293[1] + 4) = theStringa;
                              _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_DEFAULT, "%@ RM:%@ SR:%@ SA:%@ UR:%@", (uint8_t *)v291, 0x34u);
                            }

                            v178 = sub_1001E8930(v139[7], (uint64_t)v174, (uint64_t)v172, (CFTypeRef *)v138);
                            v179 = sub_1001E8930(v139[8], (uint64_t)v173, (uint64_t)theStringa, (CFTypeRef *)v138);
                            v180 = (const void *)v139[7];
                            if (v180)
                              CFRelease(v180);
                            v139[7] = v178;
                            v181 = (const void *)v139[8];
                            if (v181)
                              CFRelease(v181);
                            v139[8] = v179;
                            if (v172)
                              CFRelease(v172);
                            if (v173)
                              CFRelease(v173);
                            if (v174)
                              CFRelease(v174);
                            v182 = sub_10000EF14("peer");
                            v183 = objc_claimAutoreleasedReturnValue(v182);
                            if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
                            {
                              v185 = (void *)v139[8];
                              v184 = v139[9];
                              v186 = v139[7];
                              LODWORD(v291[0]) = 138413058;
                              *(_QWORD *)((char *)v291 + 4) = v139;
                              WORD2(v291[1]) = 2112;
                              *(_QWORD *)((char *)&v291[1] + 6) = v184;
                              HIWORD(v291[2]) = 2112;
                              v292 = v185;
                              LOWORD(v293[0]) = 2112;
                              *(_QWORD *)((char *)v293 + 2) = v186;
                              _os_log_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_DEFAULT, "%@ C:%@ U:%@ O:%@", (uint8_t *)v291, 0x2Au);
                            }

                            v80 = (uint64_t)cfa;
                            if (*((_BYTE *)v270 + 24))
                              v187 = v175;
                            else
                              v187 = 0;
                            *((_BYTE *)v270 + 24) = v187;
                            goto LABEL_318;
                          }
                        }
                        else
                        {
                          v173 = 0;
                        }
                        v174 = 0;
                        v175 = 0;
                        goto LABEL_300;
                      }
                      v251 = 0;
                      v189 = 0;
                    }
                    else
                    {
                      v251 = 0;
                      theStringa = 0;
                      v189 = 0;
                      v250 = 0;
                    }
                    v256 = 0;
                    goto LABEL_333;
                  }
                }
                else
                {
                  SOSCCSetSOSDisabledError(v138);
                }
                v164 = 0;
LABEL_354:
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v164;
                CFRelease((CFTypeRef)v80);
                if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
                {
                  v214 = sub_10000EF14("engine");
                  v215 = objc_claimAutoreleasedReturnValue(v214);
                  if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
                  {
                    v216 = *(_QWORD *)(a1 + 56);
                    v217 = *(_QWORD **)(a1 + 72);
                    if (v217)
                      v217 = (_QWORD *)*v217;
                    LODWORD(buf[0]) = 138412546;
                    *(uint64_t *)((char *)buf + 4) = v216;
                    WORD2(buf[1]) = 2112;
                    *(uint64_t *)((char *)&buf[1] + 6) = (uint64_t)v217;
                    _os_log_impl((void *)&_mh_execute_header, v215, OS_LOG_TYPE_DEFAULT, "Failed to handle message from peer %@: %@", (uint8_t *)buf, 0x16u);
                  }

                }
LABEL_274:
                CFRelease(MutableCopy);
                goto LABEL_275;
              }
              if (p_isa && !*p_isa)
                SOSErrorCreate(1029, p_isa, 0, CFSTR("SOSMessage DER decoding failure %td bytes left"));
              CFRelease((CFTypeRef)v80);
              goto LABEL_269;
            }
LABEL_167:
            v85 = v86;
            goto LABEL_236;
          }
          loga = (os_log_t)p_isa;
          v273 = (char *)v87;
          v291[0] = 0;
          v255 = (unsigned __int8 *)v87;
          v97 = ccder_decode_constructed_tl(0x2000000000000010, &v273, v86, v87);
          *(_QWORD *)(v80 + 112) = 2;
          buf[0] = 0xAAAAAAAAAAAAAAAALL;
          v98 = (char *)ccder_decode_tl(0x8000000000000000, buf, v97, v273);
          v99 = 0;
          if (v98 && buf[0])
          {
            v100 = v98;
            if (*v98 < 0 || (ccn_read_uint(1, v80 + 112, buf[0]) & 0x80000000) != 0)
              v99 = 0;
            else
              v99 = (uint64_t)&v100[buf[0]];
          }
          if (v99)
            v97 = v99;
          v279 = 0;
          v103 = ccder_decode_constructed_tl(24, &v279, v97, v273);
          v105 = (const __CFData *)sub_100021B14((double *)(v80 + 104), (CFTypeRef *)&loga->isa, v103, (unint64_t)v279, v104);
          if (v279 != v105)
          {
            v106 = sub_10000EF14("SecWarning");
            if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 134217984;
              *(uint64_t *)((char *)buf + 4) = v279 - v105;
              _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "internal error %td bytes unused in generalizedtime DER buffer", (uint8_t *)buf, 0xCu);
            }
          }
          if (v105)
            v107 = (uint64_t)v105;
          else
            v107 = v97;
          v108 = ccder_decode_uint64(v80 + 96, v107, v273);
          if (v108)
            v107 = v108;
          buf[0] = 0xAAAAAAAAAAAAAAAALL;
          v109 = ccder_decode_sequence_tl(buf, v107, v273);
          v110 = buf[0];
          if (!v109)
            v110 = 0;
          if (v110)
            v111 = v110;
          else
            v111 = v107;
          buf[0] = 0xAAAAAAAAAAAAAAAALL;
          v112 = ccder_decode_tl(3, buf, v111, v273);
          v113 = 0;
          if (v112)
          {
            v114 = 0;
            if (buf[0])
            {
              v115 = v112;
              ccn_read_uint(1, v291, buf[0] - 1);
              v114 = v115 + buf[0];
              v113 = v291[0];
            }
          }
          else
          {
            v114 = 0;
          }
          *(_QWORD *)(v80 + 88) = v113;
          v116 = sub_1001EB224(4, (CFDataRef *)(v80 + 40), v114, (uint64_t)v273);
          v117 = sub_10000EF14("engine");
          if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
          {
            v227 = *(_QWORD *)(v80 + 40);
            LODWORD(buf[0]) = 138412290;
            *(uint64_t *)((char *)buf + 4) = v227;
            _os_log_debug_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "der_decode_message_header: decoded sender digest as %@", (uint8_t *)buf, 0xCu);
          }
          v118 = sub_1001EB224(0x8000000000000000, (CFDataRef *)(v80 + 48), (uint64_t)v116, (uint64_t)v273);
          if (v118)
            v119 = (uint64_t)v118;
          else
            v119 = (uint64_t)v116;
          v120 = sub_10000EF14("engine");
          if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
          {
            v228 = *(_QWORD *)(v80 + 48);
            LODWORD(buf[0]) = 138412290;
            *(uint64_t *)((char *)buf + 4) = v228;
            _os_log_debug_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "der_decode_message_header: decoded base digest as %@", (uint8_t *)buf, 0xCu);
          }
          v121 = sub_1001EB224(0x8000000000000001, (CFDataRef *)(v80 + 56), v119, (uint64_t)v273);
          v122 = sub_10000EF14("engine");
          if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
          {
            v229 = *(_QWORD *)(v80 + 56);
            LODWORD(buf[0]) = 138412290;
            *(uint64_t *)((char *)buf + 4) = v229;
            _os_log_debug_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "der_decode_message_header: decoded proposed digest as %@", (uint8_t *)buf, 0xCu);
          }
          if (v121)
            v119 = (uint64_t)v121;
          buf[0] = 0;
          v123 = ccder_decode_constructed_tl(0xA000000000000000, buf, v119, v255);
          v124 = sub_1001EB2A0(v80, 0, v123, buf[0]);
          if (v124)
            v119 = (uint64_t)v124;
          buf[0] = 0xAAAAAAAAAAAAAAAALL;
          v125 = ccder_decode_constructed_tl(0xA000000000000001, buf, v119, v255);
          v126 = buf[0];
          if (!v125)
            v126 = 0;
          if (v126)
            v127 = (const UInt8 *)v126;
          else
            v127 = (const UInt8 *)v119;
          v279 = 0;
          v273 = 0;
          v128 = (unsigned __int8 *)ccder_decode_tag(&v279, v127, v255);
          v129 = 0;
          p_isa = (CFTypeRef *)&loga->isa;
          if (v279 != (CFDataRef)0xA000000000000002)
          {
LABEL_227:
            if (v129)
              v85 = v129;
            else
              v85 = v127;
            goto LABEL_236;
          }
          v130 = (uint64_t)v128;
          if (v128 && v128 < v255)
          {
            if (*v128 == 128)
            {
              v130 = (uint64_t)(v128 + 1);
              v131 = -1;
LABEL_226:
              *(_QWORD *)(v80 + 24) = v130;
              *(_QWORD *)(v80 + 32) = v131;
              v129 = (const UInt8 *)(v130 + v131);
              goto LABEL_227;
            }
            v130 = ccder_decode_len(&v273, v128, v255);
            v131 = (uint64_t)v273;
            if (v273 == (char *)-1)
              goto LABEL_226;
          }
          else
          {
            v131 = 0;
          }
          if (&v255[-v130] != (unsigned __int8 *)v131)
          {
            v132 = sub_10000EF14("SecWarning");
            v133 = os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT);
            v131 = (uint64_t)v273;
            if (v133)
            {
              LODWORD(buf[0]) = 134217984;
              *(uint64_t *)((char *)buf + 4) = &v255[-v130] - (unsigned __int8 *)v273;
              _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "%td trailing bytes after SOSMessage DER", (uint8_t *)buf, 0xCu);
              v131 = (uint64_t)v273;
            }
            p_isa = (CFTypeRef *)&loga->isa;
          }
          goto LABEL_226;
        }
      }
    }
    v87 = v83;
    goto LABEL_144;
  }
LABEL_269:
  v161 = sub_10000EF14("engine");
  v162 = objc_claimAutoreleasedReturnValue(v161);
  if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
  {
    v163 = *(_QWORD **)(a1 + 72);
    if (v163)
      v163 = (_QWORD *)*v163;
    LODWORD(buf[0]) = 138412290;
    *(uint64_t *)((char *)buf + 4) = (uint64_t)v163;
    _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEFAULT, "Failed to turn a data gram into an SOSMessage: %@", (uint8_t *)buf, 0xCu);
  }

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = SOSErrorCreate(8, *(_QWORD *)(a1 + 72), 0, CFSTR("Failed to parse SOSMessage"));
  if (MutableCopy)
    goto LABEL_274;
LABEL_275:

}

void sub_1001FFBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

os_state_data_s *__cdecl sub_1001FFC68(id a1, os_state_hints_s *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const __CFData *v8;
  const __CFData *v9;
  size_t Length;
  os_state_data_s *v11;
  os_state_data_s *v12;
  const UInt8 *BytePtr;

  if (a2->var2 != 3)
    return 0;
  v8 = (const __CFData *)sub_1001FFD18((uint64_t)a1, (int)a2, v2, v3, v4, v5, v6, v7);
  if (!v8)
    return 0;
  v9 = v8;
  Length = CFDataGetLength(v8);
  v11 = (os_state_data_s *)malloc_type_calloc(1uLL, Length + 200, 0xDFB1CB89uLL);
  v12 = v11;
  if (v11)
  {
    v11->var0 = 2;
    BytePtr = CFDataGetBytePtr(v9);
    memcpy(v12->var4, BytePtr, Length);
    v12->var1.var1 = Length;
    __strlcpy_chk(v12->var3, "CloudCircle Account Object", 64, 64);
  }
  CFRelease(v9);
  return v12;
}

uint64_t sub_1001FFD18(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  const __CFDictionary *v8;
  OSStatus v9;
  CFTypeID v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  NSObject *v14;
  const void *v15;
  NSObject *v16;
  CFTypeRef v17;
  CFTypeRef cf;
  _BYTE result[24];

  cf = 0;
  v8 = sub_1001FFEE4(1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)result = 0;
  v9 = SecItemCopyMatching(v8, (CFTypeRef *)result);
  if (v8)
    CFRelease(v8);
  if (v9)
  {
    sub_100019F20(v9, (__CFString **)&cf, CFSTR("Error %@ reading for service '%@'"), *(_QWORD *)result, CFSTR("iCloud Keychain Account Meta-data"));
  }
  else
  {
    if (*(_QWORD *)result)
    {
      v10 = CFGetTypeID(*(CFTypeRef *)result);
      if (v10 == CFDataGetTypeID())
      {
        v11 = *(_QWORD *)result;
        if (*(_QWORD *)result)
          goto LABEL_17;
        goto LABEL_12;
      }
    }
    SOSCreateErrorWithFormat(1028, 0, &cf, 0, CFSTR("SecItemCopyMatching returned non-data in '%@'"));
  }
  v12 = *(const void **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    CFRelease(v12);
  }
LABEL_12:
  v13 = sub_10000EF14("account");
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)result = 138412290;
    *(_QWORD *)&result[4] = cf;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Failed to load account: %@", result, 0xCu);
  }

  v15 = sub_10000EF14("SecError");
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)result = 138412290;
    *(_QWORD *)&result[4] = cf;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Failed to load account: %@", result, 0xCu);
  }

  v11 = 0;
LABEL_17:
  v17 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v17);
  }
  return v11;
}

CFDictionaryRef sub_1001FFEE4(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  return sub_10012E96C(kCFAllocatorDefault, a2, a3, a4, a5, a6, a7, a8, (uint64_t)kSecClass, (uint64_t)kSecClassGenericPassword);
}

void sub_1001FFF90(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
}

uint64_t sub_1001FFF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_1001FFFB0(id a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  const void *Value;
  const void *v4;
  CFTypeID v5;

  if (!qword_100341660)
  {
    v1 = (const __CFDictionary *)_CFCopySystemVersionDictionary(a1);
    if (v1)
    {
      v2 = v1;
      Value = CFDictionaryGetValue(v1, _kCFSystemVersionBuildVersionKey);
      if (Value)
      {
        v4 = Value;
        v5 = CFGetTypeID(Value);
        if (v5 == CFStringGetTypeID())
        {
          CFRetain(v4);
          qword_100341660 = (uint64_t)v4;
        }
      }
      CFRelease(v2);
    }
    if (!qword_100341660)
      qword_100341660 = (uint64_t)CFSTR("Unknown model");
  }
}

id sub_10020053C(int a1)
{
  id v2;

  if (qword_1003412B8 != -1)
    dispatch_once(&qword_1003412B8, &stru_1002E7840);
  if (byte_10033FE20)
  {
    if (a1)
    {
      objc_msgSend((id)qword_100341690, "setSosCompatibilityMode:", -[OTSOSActualAdapter sosEnabled]_0());
    }
    else if (qword_100341698 != -1)
    {
      dispatch_once(&qword_100341698, &stru_1002ED3D0);
    }
    v2 = (id)qword_100341690;
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_1002005E0(id a1)
{
  dispatch_queue_global_t global_queue;
  NSObject *v2;
  const __SCDynamicStore *v3;
  void *ComputerName;
  const __CFArray *v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  const __CFArray *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  id v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  NSObject *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  id v28;
  uint64_t v29;
  void *v30;
  dispatch_queue_global_t v31;
  void *v32;
  void *values;
  SCDynamicStoreContext context;

  global_queue = dispatch_get_global_queue(-2, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue(global_queue);
  if (qword_1003412B8 != -1)
    dispatch_once(&qword_1003412B8, &stru_1002E7840);
  if (!byte_10033FE20)
  {

    goto LABEL_16;
  }
  memset(&context, 0, sizeof(context));
  v3 = SCDynamicStoreCreate(0, CFSTR("com.apple.securityd.cloudcircleserver"), (SCDynamicStoreCallBack)sub_100200880, &context);
  ComputerName = (void *)SCDynamicStoreKeyCreateComputerName(0);
  values = ComputerName;
  if (v3 && ComputerName)
  {
    v5 = CFArrayCreate(0, (const void **)&values, 1, &kCFTypeArrayCallBacks);
    if (v5)
    {
      v6 = sub_1002008D4(v3);
      SCDynamicStoreSetNotificationKeys(v3, v5, 0);
      SCDynamicStoreSetDispatchQueue(v3, v2);
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v7 = 0;
    v8 = 0;
    if (!v3)
    {
      if (!ComputerName)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  CFRelease(v3);
  ComputerName = values;
  v7 = v6;
  v8 = v5;
  if (values)
LABEL_11:
    CFRelease(ComputerName);
LABEL_12:
  if (v8)
    CFRelease(v8);

  if (v7)
  {
    v16 = sub_100200A40((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    v18 = (void *)qword_1003416A0;
    qword_1003416A0 = v17;

    sub_1001CE5C0((void *)qword_1003416A0, &stru_1002ED410);
    SOSCloudKeychainSetItemsChangedBlock(&stru_1002ED450);
    CFRelease(v7);
    goto LABEL_19;
  }
LABEL_16:
  v19 = sub_10000EF14("SecError");
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(context.version) = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Didn't get machine gestalt! This is going to be ugly.", (uint8_t *)&context, 2u);
  }

  v28 = sub_100200A40(0, v21, v22, v23, v24, v25, v26, v27);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  v30 = (void *)qword_1003416A0;
  qword_1003416A0 = v29;

  sub_1001CE5C0((void *)qword_1003416A0, &stru_1002ED410);
  SOSCloudKeychainSetItemsChangedBlock(&stru_1002ED450);
LABEL_19:
  objc_msgSend((id)qword_1003416A0, "setSaveBlock:", &stru_1002ED4B8);
  SOSCloudKeychainRequestEnsurePeerRegistration(v2, 0);

  v31 = dispatch_get_global_queue(0, 0);
  v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  os_state_add_handler(v32, &stru_1002ECD68);

  objc_msgSend((id)qword_1003416A0, "ghostBustSchedule");
  objc_msgSend((id)qword_1003416A0, "setSosCompatibilityMode:", -[OTSOSActualAdapter sosEnabled]_0());
  objc_storeStrong((id *)&qword_100341690, (id)qword_1003416A0);
}

void sub_100200880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[7];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002024D8;
  v3[3] = &unk_1002ED4D8;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_10020199C(v3);
}

CFDictionaryRef sub_1002008D4(const __SCDynamicStore *a1)
{
  CFStringRef Copy;
  CFStringRef v3;
  const __CFString *v4;
  const void *v5;
  CFNumberRef v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  CFDictionaryRef v14;
  int valuePtr;

  if (qword_1003416A8 != -1)
    dispatch_once(&qword_1003416A8, &stru_1002ED4F8);
  Copy = CFStringCreateCopy(kCFAllocatorDefault, (CFStringRef)qword_100341668);
  v3 = SCDynamicStoreCopyComputerName(a1, 0);
  if (v3)
    v4 = v3;
  else
    v4 = CFSTR("Unknown name");
  if (qword_100341670 != -1)
    dispatch_once(&qword_100341670, &stru_1002ECD28);
  v5 = (const void *)qword_100341660;
  if (qword_100341660)
    CFRetain((CFTypeRef)qword_100341660);
  valuePtr = 0;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v14 = sub_10012E96C(kCFAllocatorDefault, v7, v8, v9, v10, v11, v12, v13, kPIUserDefinedDeviceNameKey, (uint64_t)v4);
  if (v5)
    CFRelease(v5);
  if (Copy)
    CFRelease(Copy);
  CFRelease(v4);
  if (v6)
    CFRelease(v6);
  return v14;
}

id sub_100200A40(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  const void *v16;
  NSObject *v17;
  SOSAccount *v18;
  const void *v19;
  NSObject *v20;
  id v22;
  uint8_t buf[4];
  id v24;

  v9 = (const void *)sub_1001FFD18(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = sub_100011C40(0);
  v11 = sub_10001A338(v10);
  if (v11)
  {
    v12 = v11;
    if (v9)
    {
      v22 = 0;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[SOSAccount accountFromData:factory:error:](SOSAccount, "accountFromData:factory:error:", v9, v11, &v22));
      v14 = v22;
      if (v13)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "trust"));
        objc_msgSend(v15, "updateGestalt:newGestalt:", v13, a1);

        CFRelease(v9);
LABEL_12:
        objc_msgSend(v13, "sosEvaluateIfNeeded");
        objc_msgSend(v13, "startStateMachine");
        return v13;
      }
      v16 = sub_10000EF14("account");
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v24 = v14;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Got error inflating account: %@", buf, 0xCu);
      }

      CFRelease(v9);
    }
    v18 = sub_1001CE300(a1, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if (!v13)
    {
      v19 = sub_10000EF14("account");
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Got NULL creating account", buf, 2u);
      }

      v13 = 0;
    }
    goto LABEL_12;
  }
  if (v9)
    CFRelease(v9);
  return 0;
}

void sub_100200C18(id a1, __CFData *a2, __CFError *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  const __CFDictionary *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const __CFDictionary *v18;
  OSStatus v19;
  const __CFDictionary *MutableCopy;
  const void *v22;
  NSObject *v23;
  const void *v24;
  NSObject *v25;
  CFTypeRef v26;
  uint64_t v27;
  CFTypeRef cf;
  __int128 context;
  void (*v30)(uint64_t, const void *, const void *);
  void *v31;
  const __CFDictionary *v32;

  if (a2)
  {
    cf = 0;
    if (!qword_1003416B0 || !CFEqual((CFTypeRef)qword_1003416B0, a2))
    {
      v9 = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
      v10 = sub_1001FFEE4(0, (int)a2, (int)a3, v3, v4, v5, v6, v7);
      v27 = v9;
      v18 = sub_10012E96C(kCFAllocatorDefault, v11, v12, v13, v14, v15, v16, v17, (uint64_t)kSecValueData, (uint64_t)a2);
      v19 = SecItemUpdate(v10, v18);
      if (v19 == -25300)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v10);
        *(_QWORD *)&context = _NSConcreteStackBlock;
        *((_QWORD *)&context + 1) = 3221225472;
        v30 = sub_1001FFF90;
        v31 = &unk_1002ECD08;
        v32 = MutableCopy;
        CFDictionaryApplyFunction(v18, (CFDictionaryApplierFunction)sub_1001FFF98, &context);
        v19 = SecItemAdd(MutableCopy, 0);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
      if (v10)
        CFRelease(v10);
      if (v18)
        CFRelease(v18);
      if (sub_100019F20(v19, (__CFString **)&cf, CFSTR("Error saving %@ to service '%@'"), a2, CFSTR("iCloud Keychain Account Meta-data"), kSecAttrAccessible, v27, 0))
      {
        CFRetain(a2);
        if (qword_1003416B0)
          CFRelease((CFTypeRef)qword_1003416B0);
        qword_1003416B0 = (uint64_t)a2;
      }
      else
      {
        v24 = sub_10000EF14("SecError");
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(context) = 138412290;
          *(_QWORD *)((char *)&context + 4) = cf;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Can't save account: %@", (uint8_t *)&context, 0xCu);
        }

      }
    }
    v26 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v26);
    }
  }
  else
  {
    v22 = sub_10000EF14("SecError");
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(context) = 138412290;
      *(_QWORD *)((char *)&context + 4) = a3;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Failed to transform account into data, error: %@", (uint8_t *)&context, 0xCu);
    }

  }
}

__CFArray *__cdecl sub_100200EA0(id a1, __CFDictionary *a2)
{
  __CFArray *v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
    CFRetain(a2);
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100200F60;
  v5[3] = &unk_1002ED478;
  v5[4] = &v6;
  v5[5] = a2;
  sub_10020199C(v5);
  if (a2)
    CFRelease(a2);
  v3 = (__CFArray *)v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_100200F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100200F60(uint64_t a1, void *a2)
{
  id v3;
  const void *v4;
  __CFArray *Mutable;
  const void *v6;
  const void *v7;
  NSObject *v8;
  CFTypeID v9;
  void *v10;
  void *v11;
  void *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  unsigned __int8 v18;
  const __CFArray *v19;
  _QWORD *v20;
  const void *v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFString *v27;
  CFTypeID v28;
  const void *v29;
  NSObject *v30;
  CFTypeID v31;
  const void *v32;
  const __CFArray *v33;
  _QWORD *v34;
  const __CFArray *v35;
  _QWORD *v36;
  const __CFArray *v37;
  _QWORD *v38;
  const __CFArray *v39;
  _QWORD *v40;
  CFMutableStringRef v41;
  CFMutableStringRef v42;
  const void *v43;
  NSObject *v44;
  const void *v45;
  NSObject *v46;
  const void *v47;
  NSObject *v48;
  CFTypeRef v49;
  CFIndex Count;
  CFIndex v51;
  CFMutableDictionaryRef cf;
  const __CFDictionary *theDict;
  id v54;
  CFTypeRef v55;
  _QWORD v56[8];
  _QWORD v57[8];
  _QWORD v58[7];
  _QWORD v59[8];
  _QWORD v60[6];
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  void *value;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  void (*v74)(uint64_t);
  id v75;
  _QWORD v76[5];
  _QWORD context[5];
  __int128 buf;
  void (*v79)(uint64_t, CFTypeRef, const void *);
  void *v80;
  uint64_t *v81;
  uint64_t *v82;
  const __CFDictionary *v83;
  const __CFDictionary *v84;
  const __CFDictionary *v85;
  const __CFDictionary *v86;
  const __CFDictionary *v87;
  CFTypeRef *v88;
  unsigned __int8 v89;
  uint8_t v90[4];
  CFIndex v91;
  __int16 v92;
  CFMutableStringRef v93;
  CFRange v94;
  CFRange v95;
  CFRange v96;
  CFRange v97;
  CFRange v98;
  CFRange v99;

  v3 = a2;
  v4 = (const void *)SOSItemsChangedCopyDescription(*(_QWORD *)(a1 + 40), 0);
  if (v4)
    CFRelease(v4);
  v55 = 0;
  theDict = *(const __CFDictionary **)(a1 + 40);
  v70 = 0;
  v71 = &v70;
  v72 = 0x3032000000;
  v73 = sub_1001F442C;
  v74 = sub_1001F443C;
  v75 = (id)0xAAAAAAAAAAAAAAAALL;
  v54 = v3;
  v75 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "account"));
  if (-[OTSOSActualAdapter sosEnabled]_0())
  {
    Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    value = 0;
    v6 = (const void *)kSOSKVSAccountChangedKey;
    if (CFDictionaryGetValueIfPresent(theDict, kSOSKVSAccountChangedKey, (const void **)&value))
    {
      v7 = sub_10000EF14("accountChange");
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SOSTransportDispatchMessages received kSOSKVSAccountChangedKey", (uint8_t *)&buf, 2u);
      }

      if (value)
      {
        v9 = CFGetTypeID(value);
        if (v9 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue((CFBooleanRef)value))
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "account"));
            sub_1001CDD78(v10);

            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "account"));
            objc_msgSend(v11, "setAccountIsChanging:", 1);

            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "account"));
            objc_msgSend(v12, "setKey_interests_need_updating:", 1);

          }
        }
      }
      CFArrayAppendValue(Mutable, v6);
    }
    v13 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v14 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v15 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v16 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v17 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    cf = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v65 = 0;
    v66 = &v65;
    v67 = 0x2020000000;
    v68 = 0;
    v61 = 0;
    v62 = &v61;
    v63 = 0x2020000000;
    v64 = 0;
    v18 = objc_msgSend((id)v71[5], "SOSMonitorModeSOSIsActive");
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v79 = sub_1001F4444;
    v80 = &unk_1002EC948;
    v89 = v18;
    v81 = &v61;
    v82 = &v65;
    v83 = v14;
    v84 = v13;
    v85 = v15;
    v86 = v16;
    v87 = v17;
    v88 = &v55;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_1001F47A8, &buf);
    if (v66[3])
    {
      v19 = (const __CFArray *)sub_1001F31B0();
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472;
      v60[2] = sub_1001F47C0;
      v60[3] = &unk_1002EC970;
      v60[4] = &v70;
      v60[5] = &v65;
      v20 = v60;
      v94.length = CFArrayGetCount(v19);
      v94.location = 0;
      CFArrayApplyFunction(v19, v94, (CFArrayApplierFunction)sub_1001F30E4, v20);

      CFArrayAppendValue(Mutable, kSOSKVSKeyParametersKey);
      v21 = (const void *)v66[3];
      if (v21)
      {
        v66[3] = 0;
        CFRelease(v21);
      }
    }
    if (*((_BYTE *)v62 + 24))
      CFArrayAppendValue(Mutable, kSOSKVSInitialSyncKey);
    if (CFDictionaryGetCount(v17))
    {
      v22 = (const __CFString *)CFDictionaryGetValue(v17, CFSTR("Scope"));
      v27 = v22;
      if (v22)
      {
        v28 = CFGetTypeID(v22);
        if (v28 == CFStringGetTypeID())
        {
          sub_10002FBD8(v27, 4);
        }
        else
        {
          v31 = CFGetTypeID(v27);
          if (v31 == CFDictionaryGetTypeID())
            sub_10002F594((const __CFDictionary *)v27, 4);
        }
      }
      v32 = (const void *)SOSDebugInfoKeyCreateWithTypeName(CFSTR("Scope"), v23, v24, v25, v26);
      CFArrayAppendValue(Mutable, v32);
      if (v32)
        CFRelease(v32);
    }
    if (CFDictionaryGetCount(v15))
    {
      v33 = (const __CFArray *)sub_1001F3268();
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472;
      v59[2] = sub_1001F48C8;
      v59[3] = &unk_1002EC998;
      v59[4] = &v70;
      v59[5] = v15;
      v59[6] = &v55;
      v59[7] = Mutable;
      v34 = v59;
      v95.length = CFArrayGetCount(v33);
      v95.location = 0;
      CFArrayApplyFunction(v33, v95, (CFArrayApplierFunction)sub_1001F30E4, v34);

    }
    if (CFDictionaryGetCount(v13))
    {
      v35 = (const __CFArray *)sub_1001F30F8();
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472;
      v58[2] = sub_1001F4A10;
      v58[3] = &unk_1002EC9C0;
      v58[4] = &v70;
      v58[5] = v13;
      v58[6] = Mutable;
      v36 = v58;
      v96.length = CFArrayGetCount(v35);
      v96.location = 0;
      CFArrayApplyFunction(v35, v96, (CFArrayApplierFunction)sub_1001F30E4, v36);

    }
    if (CFDictionaryGetCount(v14))
    {
      v37 = (const __CFArray *)sub_1001F3268();
      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472;
      v57[2] = sub_1001F4C58;
      v57[3] = &unk_1002EC998;
      v57[4] = &v70;
      v57[5] = v14;
      v57[6] = &v55;
      v57[7] = Mutable;
      v38 = v57;
      v97.length = CFArrayGetCount(v37);
      v97.location = 0;
      CFArrayApplyFunction(v37, v97, (CFArrayApplierFunction)sub_1001F30E4, v38);

    }
    if (CFDictionaryGetCount(v16))
    {
      v39 = (const __CFArray *)sub_1001F3268();
      v56[0] = _NSConcreteStackBlock;
      v56[1] = 3221225472;
      v56[2] = sub_1001F4EA8;
      v56[3] = &unk_1002EC998;
      v56[4] = &v70;
      v56[5] = v16;
      v56[6] = &v55;
      v56[7] = Mutable;
      v40 = v56;
      v98.length = CFArrayGetCount(v39);
      v98.location = 0;
      CFArrayApplyFunction(v39, v98, (CFArrayApplierFunction)sub_1001F30E4, v40);

    }
    if (v15)
      CFRelease(v15);
    if (v14)
      CFRelease(v14);
    if (v13)
      CFRelease(v13);
    if (v17)
      CFRelease(v17);
    if (v16)
      CFRelease(v16);
    if (cf)
      CFRelease(cf);
    v41 = CFStringCreateMutable(kCFAllocatorDefault, 0);
    v42 = CFStringCreateMutable(kCFAllocatorDefault, 0);
    context[0] = _NSConcreteStackBlock;
    context[1] = 3221225472;
    context[2] = sub_1001F5060;
    context[3] = &unk_1002ECD08;
    context[4] = v41;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_1001F47A8, context);
    v76[0] = _NSConcreteStackBlock;
    v76[1] = 3221225472;
    v76[2] = sub_1001F50C4;
    v76[3] = &unk_1002EDB28;
    v76[4] = v42;
    v99.length = CFArrayGetCount(Mutable);
    v99.location = 0;
    CFArrayApplyFunction(Mutable, v99, (CFArrayApplierFunction)sub_1001F30E4, v76);
    v43 = sub_10000EF14("updates");
    v44 = objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      Count = CFDictionaryGetCount(theDict);
      *(_DWORD *)v90 = 134218242;
      v91 = Count;
      v92 = 2112;
      v93 = v41;
      _os_log_debug_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "Updates [%ld]: %@", v90, 0x16u);
    }

    v45 = sub_10000EF14("updates");
    v46 = objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      v51 = CFArrayGetCount(Mutable);
      *(_DWORD *)v90 = 134218242;
      v91 = v51;
      v92 = 2112;
      v93 = v42;
      _os_log_debug_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "Handled [%ld]: %@", v90, 0x16u);
    }

    if (v41)
      CFRelease(v41);
    if (v42)
      CFRelease(v42);
    _Block_object_dispose(&v61, 8);
    _Block_object_dispose(&v65, 8);
  }
  else
  {
    v29 = sub_10000EF14("nosos");
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "transport received a message for sos but the system is off", (uint8_t *)&buf, 2u);
    }

    Mutable = 0;
  }
  _Block_object_dispose(&v70, 8);

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Mutable;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) || v55)
  {
    v47 = sub_10000EF14("SecError");
    v48 = objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v55;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Error handling updates: %@", (uint8_t *)&buf, 0xCu);
    }

    v49 = v55;
    if (v55)
    {
      v55 = 0;
      CFRelease(v49);
    }
  }

}

void sub_100201910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a54, 8);
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

void sub_10020199C(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v2 = objc_autoreleasePoolPush();
  v3 = sub_10020053C(0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100201A40;
    v5[3] = &unk_1002ED598;
    v6 = v1;
    objc_msgSend(v4, "performTransaction:", v5);

  }
  objc_autoreleasePoolPop(v2);

}

uint64_t sub_100201A40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100201A4C(id a1, SOSAccount *a2, __OpaqueSOSCircle *a3, __CFSet *a4, __CFSet *a5, __CFSet *a6, __CFSet *a7)
{
  SOSAccount *v12;
  __OpaqueSOSPeerInfo *v13;
  __OpaqueSOSPeerInfo *v14;
  CFIndex Count;
  const void *v16;
  NSObject *v17;
  NSObject *v18;
  dispatch_queue_global_t global_queue;
  const void *v20;
  NSObject *v21;
  const void *v22;
  __CFSet *v23;
  CFMutableArrayRef Mutable;
  SOSAccount *v25;
  uint64_t PeerInfo;
  const __CFSet *PermittedViews;
  SOSAccount *v28;
  const void *v29;
  NSObject *v30;
  CFTypeRef v31;
  const void *v32;
  NSObject *v33;
  _QWORD v34[5];
  CFTypeRef cf;
  _QWORD v36[3];
  char v37;
  _BYTE buf[24];
  void *v39;
  SOSAccount *v40;
  _QWORD *v41;
  uint64_t v42;
  CFMutableArrayRef v43;
  CFTypeRef *p_cf;

  v12 = a2;
  v13 = -[SOSAccount peerInfo](v12, "peerInfo");
  if (!v13)
  {
    v20 = sub_10000EF14("circleOps");
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Change block called with no peerInfo", buf, 2u);
    }
    goto LABEL_9;
  }
  v14 = v13;
  if ((SOSCircleHasPeer(a3, v13, 0) & 1) == 0)
  {
    v22 = sub_10000EF14("circleOps");
    v21 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Change block called while not in circle", buf, 2u);
    }
LABEL_9:

    goto LABEL_35;
  }
  Count = CFSetGetCount(a4);
  v16 = sub_10000EF14("updates");
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = v17;
  if (Count)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Requesting Ensure Peer Registration.", buf, 2u);
    }

    global_queue = dispatch_get_global_queue(-2, 0);
    v18 = objc_claimAutoreleasedReturnValue(global_queue);
    SOSCloudKeychainRequestEnsurePeerRegistration(v18, 0);
  }
  else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Not requesting Ensure Peer Registration, since it's not needed", buf, 2u);
  }

  if (CFSetContainsValue(a4, v14))
  {
    v23 = (__CFSet *)SOSCircleCopyPeers(a3, kCFAllocatorDefault);
    CFSetRemoveValue(v23, v14);
    if (CFSetGetCount(v23))
      sub_100201EF4(v23);
    if (v23)
      CFRelease(v23);
  }
  if (CFSetGetCount(a4) || CFSetGetCount(a5) || CFSetGetCount(a6) || CFSetGetCount(a7))
  {
    if (CFSetGetCount(a5))
    {
      cf = 0;
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_100201FD4;
      v34[3] = &unk_1002EDB28;
      v34[4] = Mutable;
      CFSetApplyFunction(a5, (CFSetApplierFunction)sub_100201FDC, v34);
      v25 = v12;
      v36[0] = 0;
      v36[1] = v36;
      v36[2] = 0x2020000000;
      v37 = 1;
      PeerInfo = SOSFullPeerInfoGetPeerInfo(-[SOSAccount fullPeerInfo](v25, "fullPeerInfo"));
      PermittedViews = (const __CFSet *)SOSPeerInfoGetPermittedViews(PeerInfo);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1001D33A8;
      v39 = &unk_1002EB8E0;
      v42 = PeerInfo;
      v28 = v25;
      v40 = v28;
      v41 = v36;
      v43 = Mutable;
      p_cf = &cf;
      CFSetApplyFunction(PermittedViews, (CFSetApplierFunction)sub_1001D2914, buf);

      _Block_object_dispose(v36, 8);
      if (cf)
      {
        v29 = sub_10000EF14("SecError");
        v30 = objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = Mutable;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = cf;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Had trouble removing: %@, error: %@", buf, 0x16u);
        }

        v31 = cf;
        if (cf)
        {
          cf = 0;
          CFRelease(v31);
        }
      }
      if (Mutable)
        CFRelease(Mutable);
    }
    v32 = sub_10000EF14("circleOps");
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "peer counts changed, posting kSOSCCCircleChangedNotification", buf, 2u);
    }

    -[SOSAccount setNotifyCircleChangeOnExit:](v12, "setNotifyCircleChangeOnExit:", 1);
  }
LABEL_35:

}

void sub_100201ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100201EF4(const __CFSet *a1)
{
  CFMutableArrayRef Mutable;
  _QWORD v3[5];
  _QWORD activity_block[5];

  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100201FF0;
  v3[3] = &unk_1002EDB28;
  v3[4] = Mutable;
  CFSetApplyFunction(a1, (CFSetApplierFunction)sub_100201FDC, v3);
  activity_block[0] = _NSConcreteStackBlock;
  activity_block[1] = 3221225472;
  activity_block[2] = sub_100202158;
  activity_block[3] = &unk_1002ED1A0;
  activity_block[4] = Mutable;
  _os_activity_initiate((void *)&_mh_execute_header, "CloudCircle RequestSyncWithPeersList", OS_ACTIVITY_FLAG_DEFAULT, activity_block);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_100201FD4(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
}

uint64_t sub_100201FDC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_100201FF0(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  __CFArray *v5;
  CFTypeRef PeerID;
  CFTypeID v7;
  CFTypeID v8;
  CFTypeRef v9;
  __CFArray *v10;
  const void *v11;
  NSObject *v12;
  int v13;
  CFTypeRef v14;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      v5 = *(__CFArray **)(a1 + 32);
      PeerID = cf;
LABEL_9:
      CFArrayAppendValue(v5, PeerID);
      return;
    }
    v7 = CFGetTypeID(cf);
    if (v7 == SOSPeerInfoGetTypeID())
    {
      v8 = CFGetTypeID(cf);
      if (v8 == SOSPeerInfoGetTypeID())
        v9 = cf;
      else
        v9 = 0;
      v10 = *(__CFArray **)(a1 + 32);
      PeerID = (CFTypeRef)SOSPeerInfoGetPeerID(v9);
      v5 = v10;
      goto LABEL_9;
    }
  }
  v11 = sub_10000EF14("SecError");
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 138412290;
    v14 = cf;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Bad element, skipping: %@", (uint8_t *)&v13, 0xCu);
  }

}

void sub_100202158(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFArrayRef v21;
  uint64_t v22;
  dispatch_queue_global_t global_queue;
  void *v24;
  unint64_t Nanoseconds;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint8_t buf[4];
  os_signpost_id_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCRequestSyncWithPeersList", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v33 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCRequestSyncWithPeersList  enableTelemetry=YES ", buf, 0xCu);
  }

  v21 = sub_100139AC4(kCFAllocatorDefault, v14, v15, v16, v17, v18, v19, v20, 0);
  sub_10002FCF4(*(const __CFArray **)(a1 + 32), CFSTR("["), CFSTR("]"), (uint64_t)&stru_1002ED180);
  v22 = *(_QWORD *)(a1 + 32);
  global_queue = dispatch_get_global_queue(-32768, 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  SOSCloudKeychainRequestSyncWithPeers(v22, v21, v24, 0);

  if (v21)
    CFRelease(v21);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v26 = _OctagonSignpostLogSystem(Nanoseconds);
  v27 = objc_claimAutoreleasedReturnValue(v26);
  v28 = v27;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v27))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v33) = 1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCRequestSyncWithPeersList", " SOSSignpostNameSOSCCRequestSyncWithPeersList=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRequestSyncWithPeersList}d ", buf, 8u);
  }

  v30 = _OctagonSignpostLogSystem(v29);
  v31 = objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v33 = v4;
    v34 = 2048;
    v35 = (double)Nanoseconds / 1000000000.0;
    v36 = 1026;
    v37 = 1;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCRequestSyncWithPeersList  SOSSignpostNameSOSCCRequestSyncWithPeersList=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRequestSyncWithPeersList}d ", buf, 0x1Cu);
  }

}

void sub_1002023E8(id a1, __CFString *a2)
{
  const void *v3;
  NSObject *v4;
  int v5;
  __CFString *v6;

  v3 = sub_10000EF14("syncwith");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request Sync With: %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_100202490(id a1)
{
  uint64_t v1;
  const __CFString *v2;

  if (!qword_100341668)
  {
    v1 = MGCopyAnswer(CFSTR("DeviceName"), 0);
    v2 = CFSTR("Unknown model");
    if (v1)
      v2 = (const __CFString *)v1;
    qword_100341668 = (uint64_t)v2;
  }
}

void sub_1002024D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  CFDictionaryRef v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  const void *v10;
  NSObject *v11;
  uint8_t v12[16];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));

  if (v4)
  {
    v5 = sub_1002008D4(*(const __SCDynamicStore **)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trust"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v9 = objc_msgSend(v7, "updateGestalt:newGestalt:", v8, v5);

    if (v9)
    {
      v10 = sub_10000EF14("circleOps");
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Changed our peer's gestalt information.  This is not a circle change.", v12, 2u);
      }

    }
    if (v5)
      CFRelease(v5);
  }

}

void *sub_1002025E0()
{
  id v0;
  void *v1;
  const void *v2;
  NSObject *v3;
  uint8_t v5[16];

  v0 = sub_10020053C(1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  if (!v1)
  {
    v2 = sub_10000EF14("secAccount");
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed request for account object", v5, 2u);
    }

  }
  return v1;
}

uint64_t sub_100202668()
{
  const void *v0;
  NSObject *v1;
  void *v2;
  dispatch_semaphore_t v3;
  id v4;
  NSObject *v5;
  dispatch_time_t v6;
  const void *v7;
  NSObject *v8;
  int v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;
  uint64_t v14;
  const void *v15;
  _QWORD v17[4];
  int v18;
  uint8_t v19[16];
  uint8_t buf[8];
  uint64_t v21;
  void (*v22)(uint64_t, int, void *);
  void *v23;
  NSObject *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;

  v0 = sub_10000EF14("SOSMonitorMode");
  v1 = objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Checking OT View Handling to match", buf, 2u);
  }

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[OTManager manager](OTManager, "manager"));
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = -1;
  if (v2)
  {
    v3 = dispatch_semaphore_create(0);
    v4 = objc_alloc_init((Class)OTControlArguments);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    v21 = 3221225472;
    v22 = sub_100202984;
    v23 = &unk_1002ED520;
    v25 = &v26;
    v5 = v3;
    v24 = v5;
    objc_msgSend(v2, "fetchUserControllableViewsSyncStatus:reply:", v4, buf);

    v6 = dispatch_time(0, 10000000000);
    if (dispatch_semaphore_wait(v5, v6))
    {
      v7 = sub_10000EF14("SOSMonitorMode");
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Timed out waiting for OTM", v19, 2u);
      }

      *((_DWORD *)v27 + 6) = -1;
    }

    v9 = *((_DWORD *)v27 + 6);
  }
  else
  {
    v10 = sub_10000EF14("SOSMonitorMode");
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Can't get OTManager to check view status", buf, 2u);
    }

    v9 = -1;
    *((_DWORD *)v27 + 6) = -1;
  }
  _Block_object_dispose(&v26, 8);

  if (v9 == -1)
  {
    v15 = sub_10000EF14("SOSMonitorMode");
    v13 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Failed to get OT view status", buf, 2u);
    }
    v14 = 0;
  }
  else
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100202AB8;
    v17[3] = &unk_1002ECD88;
    v18 = v9;
    if (!sub_100202B4C(0, v17))
      return 1;
    v12 = sub_10000EF14("SOSMonitorMode");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Changed User Visible View status", buf, 2u);
    }
    v14 = 1;
  }

  return v14;
}

void sub_10020296C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100202984(uint64_t a1, int a2, void *a3)
{
  __CFString *v5;
  const void *v6;
  NSObject *v7;
  _BOOL4 v8;
  const __CFString *v9;
  int v10;
  const __CFString *v11;

  v5 = a3;
  v6 = sub_10000EF14("SOSMonitorMode");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v8)
    {
      v10 = 138412290;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "fetching user-controllable-sync status errored: %@", (uint8_t *)&v10, 0xCu);
    }

    a2 = -1;
  }
  else
  {
    if (v8)
    {
      v9 = CFSTR("paused");
      if (a2)
        v9 = CFSTR("enabled");
      v10 = 138412290;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "fetched OT user-controllable-sync status as : %@", (uint8_t *)&v10, 0xCu);
    }

  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_100202AB8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trust"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));

  v9 = objc_msgSend(v7, "matchOTUserViewSettings:userViewsEnabled:err:", v8, *(_DWORD *)(a1 + 32) != 0, a3);
  return v9;
}

BOOL sub_100202B4C(CFTypeRef *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  _QWORD v8[2];
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  uint64_t *v12;
  CFTypeRef *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  int v18;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v9 = sub_100202C94;
  v10 = &unk_1002ED570;
  v12 = &v14;
  v3 = a2;
  v11 = v3;
  v13 = a1;
  v4 = v8;
  v18 = -1431655766;
  v5 = sub_100025F30(0, &v18);
  if (sub_10003252C(v5, a1, CFSTR("aks_get_lock_state failed: %x"), v5))
  {
    if ((v18 & 4) != 0)
    {
      v9((uint64_t)v4);

      v6 = *((_BYTE *)v15 + 24) != 0;
      goto LABEL_5;
    }
    SOSCreateErrorWithFormat(4, 0, a1, 0, CFSTR("Keybag never unlocked, ask after first unlock"));
  }

  v6 = 0;
LABEL_5:

  _Block_object_dispose(&v14, 8);
  return v6;
}

void sub_100202C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100202C94(uint64_t a1)
{
  id v2;
  __int128 v3;
  _QWORD v4[4];
  __int128 v5;
  uint64_t v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100202D14;
  v4[3] = &unk_1002ED548;
  v3 = *(_OWORD *)(a1 + 32);
  v2 = (id)v3;
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 48);
  sub_10020199C(v4);

}

uint64_t sub_100202D14(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_100202D4C(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t v6;
  _QWORD v8[7];
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  sub_100202668();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100202E10;
  v8[3] = &unk_1002ECDB0;
  v9 = a2;
  v8[4] = &v10;
  v8[5] = a1;
  v8[6] = a3;
  sub_100202B4C(a3, v8);
  v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_100202DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100202E10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  const void *v12;
  NSObject *v13;
  int v14;
  _DWORD v16[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v5 = objc_msgSend(v4, "SOSMonitorModeSOSIsActive");

  if (!v5)
  {
LABEL_11:
    v11 = 0;
    goto LABEL_12;
  }
  v6 = *(_DWORD *)(a1 + 56);
  if (v6 == 1 || v6 == 2)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trust"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v10 = objc_msgSend(v8, "updateView:name:code:err:", v9, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
    goto LABEL_7;
  }
  if (v6 != 3)
  {
    v12 = sub_10000EF14("views");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_DWORD *)(a1 + 56);
      v16[0] = 67109120;
      v16[1] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Bad SOSViewActionCode - %d", (uint8_t *)v16, 8u);
    }

    goto LABEL_11;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trust"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v10 = objc_msgSend(v8, "viewStatus:name:err:", v9, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
LABEL_7:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v10;

  v11 = 1;
LABEL_12:

  return v11;
}

BOOL sub_100202FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL8 v16;
  unint64_t Nanoseconds;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD v25[6];
  uint8_t buf[4];
  os_signpost_id_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  _BOOL4 v31;

  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCViewSet", " enableTelemetry=YES ", buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCViewSet  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100203214;
  v25[3] = &unk_1002ECDF0;
  v25[4] = a1;
  v25[5] = a2;
  v16 = sub_100202B4C(0, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
  v18 = _OctagonSignpostLogSystem(Nanoseconds);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  v20 = v19;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v27) = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCViewSet", " SOSSignpostNameSOSCCViewSet=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCViewSet}d ", buf, 8u);
  }

  v22 = _OctagonSignpostLogSystem(v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v27 = v6;
    v28 = 2048;
    v29 = (double)Nanoseconds / 1000000000.0;
    v30 = 1026;
    v31 = v16;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCViewSet  SOSSignpostNameSOSCCViewSet=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCViewSet}d ", buf, 0x1Cu);
  }

  return v16;
}

id sub_100203214(uint64_t a1, void *a2)
{
  id v3;
  const __CFSet *v4;
  const void *v5;
  NSObject *v6;
  id v7;
  const __CFSet *v8;
  void *v9;
  void *v10;
  _QWORD v12[5];
  uint8_t buf[16];

  v3 = a2;
  if (SOSVisibleKeychainNotAllowed()
    && (v4 = *(const __CFSet **)(a1 + 32)) != 0
    && CFSetGetCount(v4)
    && SOSViewSetIntersectsV0(*(_QWORD *)(a1 + 32)))
  {
    v5 = sub_10000EF14("views");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cannot enable visible keychain views due to profile restrictions", buf, 2u);
    }
    v7 = 0;
  }
  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100203354;
    v12[3] = &unk_1002ECDD0;
    v8 = *(const __CFSet **)(a1 + 32);
    v12[4] = *(_QWORD *)(a1 + 40);
    sub_10002FEC4(v8, (uint64_t)v12);
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject trust](v6, "trust"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v7 = objc_msgSend(v9, "updateViewSets:enabled:disabled:", v10, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  }
  return v7;
}

void sub_100203354(uint64_t a1, uint64_t a2)
{
  const __CFSet *v2;
  _QWORD v3[5];

  v2 = *(const __CFSet **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002033A8;
  v3[3] = &unk_1002ECDD0;
  v3[4] = a2;
  sub_10002FEC4(v2, (uint64_t)v3);
}

void sub_1002033A8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v4 = sub_10000EF14("viewChange");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling updateViewSets to enable %@ and disable %@", (uint8_t *)&v7, 0x16u);
  }

}

void sub_10020346C(uint64_t a1)
{
  char v1;
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  dispatch_semaphore_t v14;
  const void *v15;
  NSObject *v16;
  dispatch_queue_global_t global_queue;
  void *v18;
  NSObject *v19;
  dispatch_time_t v20;
  uint64_t v21;
  unint64_t Nanoseconds;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _QWORD v29[4];
  NSObject *v30;
  __int128 *p_buf;
  uint8_t v32[4];
  os_signpost_id_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  _BOOL4 v37;
  __int128 buf;
  uint64_t v39;
  uint64_t v40;

  v1 = a1;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SyncTheLastDataToKVS", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SyncTheLastDataToKVS  enableTelemetry=YES ", (uint8_t *)&buf, 0xCu);
  }

  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v39 = 0x2020000000;
  v40 = 0;
  v14 = dispatch_semaphore_create(0);
  v15 = sub_10000EF14("force-push");
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "calling SOSCloudKeychainSynchronizeAndWait", v32, 2u);
  }

  global_queue = dispatch_get_global_queue(-2, 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_1002037DC;
  v29[3] = &unk_1002ECE18;
  p_buf = &buf;
  v19 = v14;
  v30 = v19;
  SOSCloudKeychainSynchronizeAndWait(v18, v29);

  if ((v1 & 1) != 0)
    v20 = -1;
  else
    v20 = dispatch_time(0, 60000000000);
  dispatch_semaphore_wait(v19, v20);

  v21 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 24);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v23 = _OctagonSignpostLogSystem(Nanoseconds);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  v25 = v24;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
  {
    *(_DWORD *)v32 = 67240192;
    LODWORD(v33) = v21 == 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_INTERVAL_END, v4, "SyncTheLastDataToKVS", " SOSSignpostNameSyncTheLastDataToKVS=%{public,signpost.telemetry:number1,name=SOSSignpostNameSyncTheLastDataToKVS}d ", v32, 8u);
  }

  v27 = _OctagonSignpostLogSystem(v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v32 = 134218496;
    v33 = v4;
    v34 = 2048;
    v35 = (double)Nanoseconds / 1000000000.0;
    v36 = 1026;
    v37 = v21 == 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SyncTheLastDataToKVS  SOSSignpostNameSyncTheLastDataToKVS=%{public,signpost.telemetry:number1,name=SOSSignpostNameSyncTheLastDataToKVS}d ", v32, 0x1Cu);
  }

  _Block_object_dispose(&buf, 8);
}

void sub_1002037B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1002037DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  NSObject *v6;
  const void *v8;
  NSObject *v9;
  int v11;
  uint64_t v12;

  if (a3)
  {
    v5 = sub_10000EF14("SecError");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412290;
      v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SOSCloudKeychainSynchronizeAndWait: %@", (uint8_t *)&v11, 0xCu);
    }

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
  }
  else
  {
    v8 = sub_10000EF14("force-push");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412290;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "returned from call; in callback to SOSCloudKeychainSynchronizeAndWait: results: %@",
        (uint8_t *)&v11,
        0xCu);
    }

  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100203908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  NSObject *v9;
  _QWORD v11[7];
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v8 = sub_10000EF14("updates");
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v13 = a3;
    v14 = 2112;
    v15 = a1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Trying credentials and dsid (%@) for %@", buf, 0x16u);
  }

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100203A18;
  v11[3] = &unk_1002ECE60;
  v11[4] = a3;
  v11[5] = a1;
  v11[6] = a2;
  return SOSDoWithCredentialsWhileUnlocked(a4, v11);
}

uint64_t sub_100203A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const void *v16;
  NSObject *v17;
  unint64_t Nanoseconds;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  _QWORD v29[5];
  __int128 v30;
  uint64_t v31;
  _QWORD v32[5];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint8_t buf[4];
  os_signpost_id_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  int v44;

  v35 = 0;
  v36 = &v35;
  v37 = 0x2020000000;
  v38 = 0;
  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCTryUserCredentials", " enableTelemetry=YES ", buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v40 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCTryUserCredentials  enableTelemetry=YES ", buf, 0xCu);
  }

  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_100203DC0;
  v32[3] = &unk_1002ECE40;
  v32[4] = &v35;
  v33 = *(_OWORD *)(a1 + 32);
  v34 = *(_QWORD *)(a1 + 48);
  sub_10020199C(v32);
  if (!*((_BYTE *)v36 + 24))
  {
    v16 = sub_10000EF14("updates");
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "SOSCCTryUserCredentials_Server: Trying again with EFRESH", buf, 2u);
    }

    if (sub_100203F8C(a2) && sub_1002042D0(a2))
    {
      sleep(1u);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_1002046B0;
      v29[3] = &unk_1002ECE40;
      v29[4] = &v35;
      v30 = *(_OWORD *)(a1 + 40);
      v31 = a2;
      sub_10020199C(v29);
    }
  }
  sub_1002042D0(0);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
  v19 = _OctagonSignpostLogSystem(Nanoseconds);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  v21 = v20;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    v22 = *((unsigned __int8 *)v36 + 24);
    *(_DWORD *)buf = 67240192;
    LODWORD(v40) = v22;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCTryUserCredentials", " SOSSignpostNameSOSCCTryUserCredentials=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCTryUserCredentials}d ", buf, 8u);
  }

  v24 = _OctagonSignpostLogSystem(v23);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v26 = *((unsigned __int8 *)v36 + 24);
    v40 = v6;
    v41 = 2048;
    v42 = (double)Nanoseconds / 1000000000.0;
    v43 = 1026;
    v44 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCTryUserCredentials  SOSSignpostNameSOSCCTryUserCredentials=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCTryUserCredentials}d ", buf, 0x1Cu);
  }

  v27 = *((unsigned __int8 *)v36 + 24);
  _Block_object_dispose(&v35, 8);
  return v27;
}

void sub_100203D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100203DC0(uint64_t a1, void *a2)
{
  id v3;
  const __CFString *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  CFTypeRef v9;
  BOOL v10;
  const void *v11;
  NSObject *v12;
  const void *v13;
  NSObject *v14;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v17;

  v3 = a2;
  v4 = *(const __CFString **)(a1 + 40);
  if (v4 && CFStringCompare(v4, &stru_1002EE888, 0))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    sub_1001CDB78(v5, *(_QWORD *)(a1 + 40));

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "accountKeyDerivationParameters"));

  if (v7)
  {
    cf = 0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001D8090(v8, *(_QWORD *)(a1 + 48), *(const __CFData **)(a1 + 56), &cf);

    v9 = cf;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      v10 = 1;
    else
      v10 = cf == 0;
    if (!v10)
    {
      v11 = sub_10000EF14("updates");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v17 = cf;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Failed with SOSAccountTryUserCredentials() with initial known parameters %@", buf, 0xCu);
      }

      v9 = cf;
    }
    if (v9)
    {
      cf = 0;
      CFRelease(v9);
    }
  }
  else
  {
    v13 = sub_10000EF14("updates");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "SOSCCTryUserCredentials_Server: No known parameters", buf, 2u);
    }

  }
}

BOOL sub_100203F8C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  dispatch_semaphore_t v14;
  const void *v15;
  NSObject *v16;
  NSObject *v17;
  unint64_t Nanoseconds;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  _BOOL8 v27;
  _QWORD activity_block[4];
  NSObject *v30;
  __int128 *p_buf;
  uint64_t v32;
  uint8_t v33[4];
  os_signpost_id_t v34;
  __int16 v35;
  double v36;
  __int16 v37;
  int v38;
  __int128 buf;
  uint64_t v40;
  char v41;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SyncKVSAndWait", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SyncKVSAndWait  enableTelemetry=YES ", (uint8_t *)&buf, 0xCu);
  }

  v14 = dispatch_semaphore_create(0);
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v40 = 0x2020000000;
  v41 = 0;
  v15 = sub_10000EF14("fresh");
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "EFP calling SOSCloudKeychainSynchronizeAndWait", v33, 2u);
  }

  activity_block[0] = _NSConcreteStackBlock;
  activity_block[1] = 3221225472;
  activity_block[2] = sub_10020481C;
  activity_block[3] = &unk_1002ED5E8;
  p_buf = &buf;
  v32 = a1;
  v17 = v14;
  v30 = v17;
  _os_activity_initiate((void *)&_mh_execute_header, "CloudCircle EFRESH", OS_ACTIVITY_FLAG_DEFAULT, activity_block);

  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v19 = _OctagonSignpostLogSystem(Nanoseconds);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  v21 = v20;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    v22 = *(unsigned __int8 *)(*((_QWORD *)&buf + 1) + 24);
    *(_DWORD *)v33 = 67240192;
    LODWORD(v34) = v22;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v4, "SyncKVSAndWait", " SOSSignpostNameSyncKVSAndWait=%{public,signpost.telemetry:number1,name=SOSSignpostNameSyncKVSAndWait}d ", v33, 8u);
  }

  v24 = _OctagonSignpostLogSystem(v23);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v33 = 134218496;
    v26 = *(unsigned __int8 *)(*((_QWORD *)&buf + 1) + 24);
    v34 = v4;
    v35 = 2048;
    v36 = (double)Nanoseconds / 1000000000.0;
    v37 = 1026;
    v38 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SyncKVSAndWait  SOSSignpostNameSyncKVSAndWait=%{public,signpost.telemetry:number1,name=SOSSignpostNameSyncKVSAndWait}d ", v33, 0x1Cu);
  }

  v27 = *(_BYTE *)(*((_QWORD *)&buf + 1) + 24) != 0;
  _Block_object_dispose(&buf, 8);

  return v27;
}

void sub_1002042A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002042D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  dispatch_semaphore_t v14;
  const void *v15;
  NSObject *v16;
  dispatch_queue_global_t global_queue;
  void *v18;
  NSObject *v19;
  const void *v20;
  NSObject *v21;
  const char *v22;
  unint64_t Nanoseconds;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  _BOOL8 v32;
  _QWORD v34[4];
  NSObject *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint8_t buf[4];
  os_signpost_id_t v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;

  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v41 = 0;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Flush", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v43 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: Flush  enableTelemetry=YES ", buf, 0xCu);
  }

  v14 = dispatch_semaphore_create(0);
  v15 = sub_10000EF14("flush");
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Starting", buf, 2u);
  }

  global_queue = dispatch_get_global_queue(-2, 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1002047B0;
  v34[3] = &unk_1002ED5C0;
  v36 = &v38;
  v37 = a1;
  v19 = v14;
  v35 = v19;
  SOSCloudKeychainFlush(v18, v34);

  dispatch_semaphore_wait(v19, 0xFFFFFFFFFFFFFFFFLL);
  v20 = sub_10000EF14("flush");
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)v39 + 24))
      v22 = "Success";
    else
      v22 = "Failure";
    *(_DWORD *)buf = 136315138;
    v43 = (os_signpost_id_t)v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Returned %s", buf, 0xCu);
  }

  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v24 = _OctagonSignpostLogSystem(Nanoseconds);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  v26 = v25;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
  {
    v27 = *((unsigned __int8 *)v39 + 24);
    *(_DWORD *)buf = 67240192;
    LODWORD(v43) = v27;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_INTERVAL_END, v4, "Flush", " SOSSignpostNameFlush=%{public,signpost.telemetry:number1,name=SOSSignpostNameFlush}d ", buf, 8u);
  }

  v29 = _OctagonSignpostLogSystem(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v31 = *((unsigned __int8 *)v39 + 24);
    v43 = v4;
    v44 = 2048;
    v45 = (double)Nanoseconds / 1000000000.0;
    v46 = 1026;
    v47 = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: Flush  SOSSignpostNameFlush=%{public,signpost.telemetry:number1,name=SOSSignpostNameFlush}d ", buf, 0x1Cu);
  }

  v32 = *((_BYTE *)v39 + 24) != 0;
  _Block_object_dispose(&v38, 8);
  return v32;
}

void sub_100204678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002046B0(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD *v4;
  const void *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001D8090(v3, *(_QWORD *)(a1 + 40), *(const __CFData **)(a1 + 48), *(CFTypeRef **)(a1 + 56));

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v4 = *(_QWORD **)(a1 + 56);
    if (v4)
    {
      if (*v4)
      {
        v5 = sub_10000EF14("updates");
        v6 = objc_claimAutoreleasedReturnValue(v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          v7 = **(_QWORD **)(a1 + 56);
          v8 = 138412290;
          v9 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed with SOSAccountTryUserCredentials() %@", (uint8_t *)&v8, 0xCu);
        }

      }
    }
  }
}

intptr_t sub_1002047B0(uint64_t a1, int a2, CFTypeRef cf)
{
  CFTypeRef *v4;
  CFTypeRef v6;

  v4 = *(CFTypeRef **)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = cf == 0;
  if (v4)
  {
    v6 = *v4;
    if (*v4 != cf)
    {
      if (!cf || (CFRetain(cf), (v6 = *v4) != 0))
        CFRelease(v6);
      *v4 = cf;
    }
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10020481C(uint64_t a1)
{
  dispatch_queue_global_t global_queue;
  void *v3;
  id v4;
  const void *v5;
  NSObject *v6;
  _QWORD *v7;
  const char *v8;
  __int128 v9;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  _QWORD *v16;

  global_queue = dispatch_get_global_queue(-2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100204980;
  v10[3] = &unk_1002ED5C0;
  v12 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 32);
  v4 = (id)v9;
  v11 = v9;
  SOSCloudKeychainSynchronizeAndWait(v3, v10);

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  v5 = sub_10000EF14("fresh");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD **)(a1 + 48);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      v8 = "success";
    else
      v8 = "failure";
    if (v7)
      v7 = (_QWORD *)*v7;
    *(_DWORD *)buf = 136315394;
    v14 = v8;
    v15 = 2112;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EFP complete: %s %@", buf, 0x16u);
  }

}

intptr_t sub_100204980(uint64_t a1, uint64_t a2, const void *a3)
{
  const void *v5;
  NSObject *v6;
  const void **v7;
  const void *v8;
  int v10;
  const void *v11;

  v5 = sub_10000EF14("fresh");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138412290;
    v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EFP returned, callback error: %@", (uint8_t *)&v10, 0xCu);
  }

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3 == 0;
  v7 = *(const void ***)(a1 + 48);
  if (v7)
  {
    v8 = *v7;
    if (*v7 != a3)
    {
      if (!a3 || (CFRetain(a3), (v8 = *v7) != 0))
        CFRelease(v8);
      *v7 = a3;
    }
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100204A84(uint64_t a1, uint64_t a2, os_signpost_id_t a3, uint64_t *a4)
{
  const void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  os_signpost_id_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  const void *v24;
  NSObject *v25;
  uint64_t v26;
  unint64_t Nanoseconds;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  _QWORD v35[7];
  uint8_t buf[4];
  os_signpost_id_t v37;
  __int16 v38;
  double v39;
  __int16 v40;
  uid_t v41;
  __int16 v42;
  uint64_t v43;

  v8 = sub_10000EF14("updates");
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v37 = a3;
    v38 = 2112;
    v39 = *(double *)&a1;
    v40 = 1024;
    v41 = getuid();
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting credentials and dsid (%@) for %@.  UID is %d", buf, 0x1Cu);
  }

  v11 = _OctagonSignpostLogSystem(v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = _OctagonSignpostCreate();
  v15 = v14;

  v17 = _OctagonSignpostLogSystem(v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  v19 = v18;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_BEGIN, v13, "AssertUserCredentialsAndOptionalDSID", " enableTelemetry=YES ", buf, 2u);
  }

  v21 = _OctagonSignpostLogSystem(v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v37 = v13;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: AssertUserCredentialsAndOptionalDSID  enableTelemetry=YES ", buf, 0xCu);
  }

  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_100204DF0;
  v35[3] = &unk_1002ECE60;
  v35[4] = a3;
  v35[5] = a1;
  v35[6] = a2;
  v23 = SOSDoWithCredentialsWhileUnlocked(a4, v35);
  v24 = sub_10000EF14("updates");
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    if (a4)
      v26 = *a4;
    else
      v26 = 0;
    *(_DWORD *)buf = 138413058;
    v37 = a3;
    v38 = 2112;
    v39 = *(double *)&a1;
    v40 = 1024;
    v41 = v23;
    v42 = 2112;
    v43 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Complete credentials and dsid (%@) for %@: %d %@", buf, 0x26u);
  }

  Nanoseconds = _OctagonSignpostGetNanoseconds(v13, v15);
  v28 = _OctagonSignpostLogSystem(Nanoseconds);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  v30 = v29;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v29))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v37) = v23;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_INTERVAL_END, v13, "AssertUserCredentialsAndOptionalDSID", " SOSSignpostNameAssertUserCredentialsAndOptionalDSID=%{public,signpost.telemetry:number1,name=SOSSignpostNameAssertUserCredentialsAndOptionalDSID}d ", buf, 8u);
  }

  v32 = _OctagonSignpostLogSystem(v31);
  v33 = objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v37 = v13;
    v38 = 2048;
    v39 = (double)Nanoseconds / 1000000000.0;
    v40 = 1026;
    v41 = v23;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: AssertUserCredentialsAndOptionalDSID  SOSSignpostNameAssertUserCredentialsAndOptionalDSID=%{public,signpost.telemetry:number1,name=SOSSignpostNameAssertUserCredentialsAndOptionalDSID}d ", buf, 0x1Cu);
  }

  return v23;
}

BOOL sub_100204DF0(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  _QWORD v6[5];
  _QWORD v7[5];
  __int128 v8;
  uint64_t v9;
  _QWORD v10[6];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  _QWORD v18[3];
  char v19;

  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2020000000;
  v19 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100204F98;
  v10[3] = &unk_1002ED610;
  v10[4] = v18;
  v10[5] = &v14;
  v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = a2;
  sub_10020199C(v10);
  if (*((_BYTE *)v15 + 24))
  {
    v4 = 1;
  }
  else
  {
    if (sub_100203F8C(0) && sub_1002042D0(0))
    {
      sleep(1u);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100205080;
      v7[3] = &unk_1002ECE40;
      v7[4] = &v14;
      v8 = *(_OWORD *)(a1 + 40);
      v9 = a2;
      sub_10020199C(v7);
    }
    if (*((_BYTE *)v15 + 24) && sub_1002042D0(0))
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_100205474;
      v6[3] = &unk_1002ED638;
      v6[4] = &v14;
      sub_10020199C(v6);
    }
    v4 = *((_BYTE *)v15 + 24) != 0;
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(v18, 8);
  return v4;
}

void sub_100204F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100204F98(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "account"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001CDB78(v3, *(_QWORD *)(a1 + 48));

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "account"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "accountKeyDerivationParameters"));
    if (!v5)
    {
LABEL_5:

      goto LABEL_6;
    }
    v6 = (void *)v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "account"));
    v8 = objc_msgSend(v7, "accountKeyIsTrusted");

    if (v8)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "account"));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sub_1001D8090(v4, *(_QWORD *)(a1 + 56), *(const __CFData **)(a1 + 64), *(CFTypeRef **)(a1 + 72));
      goto LABEL_5;
    }
  }
LABEL_6:

}

void sub_100205080(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  const __CFData *v5;
  CFTypeRef *v6;
  int v7;
  const void *v8;
  NSObject *v9;
  __CFData *Mutable;
  const void *v11;
  const void *v12;
  NSObject *v13;
  CFTypeRef v14;
  const void *v15;
  NSObject *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  const UInt8 *BytePtr;
  UInt8 *MutableBytePtr;
  UInt8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  CFTypeRef cf;
  uint8_t buf[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v4 = a1[5];
  v5 = (const __CFData *)a1[6];
  v6 = (CFTypeRef *)a1[7];
  v29 = v3;
  v7 = objc_msgSend(v29, "accountKeyIsTrusted");
  objc_msgSend(v29, "setAccountKeyIsTrusted:", 0);
  if ((sub_1001D7E08(v29, v5, v6) & 1) != 0)
  {
    v11 = 0;
    Mutable = 0;
    goto LABEL_16;
  }
  if (CFDataGetLength(v5) >= 21)
  {
    v8 = sub_10000EF14("SecWarning");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Long password (>20 byte utf8) being used to derive account key – this may be a PET by mistake!!", buf, 2u);
    }

  }
  memset(buf, 170, 16);
  if (SecRandomCopyBytes(0, 0x10uLL, buf))
  {
    SOSCreateError(1028, CFSTR("SecRandomCopyBytes failed"), 0, v6);
LABEL_8:
    Mutable = 0;
    goto LABEL_9;
  }
  Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0);
  v18 = ccder_sizeof_raw_octet_string(16);
  v19 = ccder_sizeof_uint64(50000) + v18;
  v20 = v19 + ccder_sizeof_uint64(256);
  v21 = ccder_sizeof(6, CSSMOID_PKCS5_HMAC_SHA1.Length);
  v22 = ccder_sizeof(0x2000000000000010, v20 + v21);
  CFDataSetLength(Mutable, v22);
  BytePtr = CFDataGetBytePtr(Mutable);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  v25 = &MutableBytePtr[CFDataGetLength(Mutable)];
  v26 = ccder_encode_body(CSSMOID_PKCS5_HMAC_SHA1.Length, CSSMOID_PKCS5_HMAC_SHA1.Data, BytePtr, v25);
  ccder_encode_tl(6, CSSMOID_PKCS5_HMAC_SHA1.Length, BytePtr, v26);
  ccder_encode_uint64(256);
  v27 = ccder_encode_uint64(50000);
  v28 = ccder_encode_raw_octet_string(16, buf, BytePtr, v27);
  if (ccder_encode_constructed_tl(0x2000000000000010, v25, BytePtr, v28))
  {
    if (Mutable)
      sub_1001D3B78((uint64_t)CFSTR("SOSUserKeyCreateGenerateParameters created new parameters:"), Mutable);
    goto LABEL_9;
  }
  if (Mutable)
  {
    CFRelease(Mutable);
    goto LABEL_8;
  }
LABEL_9:
  v11 = (const void *)sub_1001D3FF8(v5, Mutable, (uint64_t)v6);
  if (!v11)
    goto LABEL_17;
  objc_msgSend(v29, "setAccountKeyDerivationParameters:", Mutable);
  sub_1001D7730(v29, (uint64_t)v5, (uint64_t)v11, v7);
  cf = 0;
  if ((sub_1001D4D14(v29, (uint64_t)&cf) & 1) == 0)
  {
    v12 = sub_10000EF14("SecError");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = cf;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Failed to publish new cloud parameters: %@", buf, 0xCu);
    }

  }
  v14 = cf;
  if (cf)
  {
    cf = 0;
    CFRelease(v14);
  }
LABEL_16:
  sub_1001D6F60(v29);
  sub_1001E6A88(v29, (uint64_t)CFSTR("AccountName"), v4, 0);
LABEL_17:
  if (Mutable)
    CFRelease(Mutable);
  if (v11)
    CFRelease(v11);
  v15 = sub_10000EF14("circleop");
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Setting account.key_interests_need_updating to true in SOSAccountAssertUserCredentials", buf, 2u);
  }

  objc_msgSend(v29, "setKey_interests_need_updating:", 1);
  v17 = objc_msgSend(v29, "accountKeyIsTrusted");

  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v17;
}

void sub_100205474(uint64_t a1, void *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001D6C6C(v3, 0);

}

uint64_t sub_1002054C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100204A84(a1, a2, 0, a3);
}

BOOL sub_1002054CC(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  _BOOL8 v15;
  CFTypeRef v16;
  unint64_t Nanoseconds;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  int v25;
  os_signpost_id_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  _BOOL4 v30;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    LOWORD(v25) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCCanAuthenticate", " enableTelemetry=YES ", (uint8_t *)&v25, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v25 = 134217984;
    v26 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCCanAuthenticate  enableTelemetry=YES ", (uint8_t *)&v25, 0xCu);
  }

  v14 = sub_100202B4C(a1, &stru_1002ECEA0);
  v15 = v14;
  if (a1)
  {
    if (!v14)
    {
      if (*a1)
      {
        if (CFErrorGetDomain((CFErrorRef)*a1) == (CFErrorDomain)kSOSErrorDomain
          && (unint64_t)(CFErrorGetCode((CFErrorRef)*a1) - 1) <= 1)
        {
          v16 = *a1;
          if (*a1)
          {
            *a1 = 0;
            CFRelease(v16);
          }
        }
      }
    }
  }
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v18 = _OctagonSignpostLogSystem(Nanoseconds);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  v20 = v19;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    v25 = 67240192;
    LODWORD(v26) = v15;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCCanAuthenticate", " SOSSignpostNameSOSCCCanAuthenticate=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCanAuthenticate}d ", (uint8_t *)&v25, 8u);
  }

  v22 = _OctagonSignpostLogSystem(v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v25 = 134218496;
    v26 = v4;
    v27 = 2048;
    v28 = (double)Nanoseconds / 1000000000.0;
    v29 = 1026;
    v30 = v15;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCCanAuthenticate  SOSSignpostNameSOSCCCanAuthenticate=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCanAuthenticate}d ", (uint8_t *)&v25, 0x1Cu);
  }

  return v15;
}

BOOL sub_100205744(id a1, SOSAccountTransaction *a2, __CFError **a3)
{
  SOSAccountTransaction *v4;
  void *v5;
  void *v6;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v4, "account"));
  sub_1001D6E4C(v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v4, "account"));
  LOBYTE(a3) = sub_1001D6CD8(v6, (uint64_t)a3) != 0;

  return (char)a3;
}

BOOL sub_1002057B4(CFTypeRef *a1)
{
  return sub_100202B4C(a1, &stru_1002ECEC0);
}

BOOL sub_1002057C0(id a1, SOSAccountTransaction *a2, __CFError **a3)
{
  void *v3;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](a2, "account", a3));
  sub_1001D6D30(v3);

  return 1;
}

uint64_t sub_1002057F4(CFTypeRef *a1)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = -1;
  if ((byte_10034167C & 1) == 0 && sub_100202668())
    byte_10034167C = 1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002058D4;
  v4[3] = &unk_1002ECEE8;
  v4[4] = &v5;
  if (sub_100202B4C(a1, v4))
    v2 = *((unsigned int *)v6 + 6);
  else
    v2 = 0xFFFFFFFFLL;
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1002058B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002058D4(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v5, "getCircleStatus:", a3);

  return 1;
}

BOOL sub_100205928(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  unint64_t Nanoseconds;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD v23[5];
  _QWORD v24[3];
  char v25;
  uint8_t buf[4];
  os_signpost_id_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  _BOOL4 v31;

  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2020000000;
  v25 = 1;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCRequestToJoinCircle", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v27 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCRequestToJoinCircle  enableTelemetry=YES ", buf, 0xCu);
  }

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100205BE4;
  v23[3] = &unk_1002ECEE8;
  v23[4] = v24;
  v14 = sub_100205C98(a1, v23);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v16 = _OctagonSignpostLogSystem(Nanoseconds);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = v17;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v27) = v14;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCRequestToJoinCircle", " SOSSignpostNameSOSCCRequestToJoinCircle=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRequestToJoinCircle}d ", buf, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v27 = v4;
    v28 = 2048;
    v29 = (double)Nanoseconds / 1000000000.0;
    v30 = 1026;
    v31 = v14;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCRequestToJoinCircle  SOSSignpostNameSOSCCRequestToJoinCircle=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRequestToJoinCircle}d ", buf, 0x1Cu);
  }

  _Block_object_dispose(v24, 8);
  return v14;
}

void sub_100205BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100205BE4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const void *v6;
  NSObject *v7;
  char v8;
  uint8_t v10[16];

  v5 = a2;
  v6 = sub_10000EF14("circleOps");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Normal path circle join (SOSAccountJoinCircles)", v10, 2u);
  }

  v8 = sub_1001CEAE4(v5, 0, a3);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

BOOL sub_100205C98(CFTypeRef *a1, void *a2)
{
  id v3;
  _BOOL4 v4;
  __CFError *v5;
  const __CFString *Domain;
  const void *v7;
  const void *v8;
  CFTypeRef v9;
  const void *v10;
  const void *v11;
  CFTypeRef v12;
  _BOOL8 v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  NSObject *v17;
  const void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  const void *v22;
  const void *v23;
  CFTypeRef v24;
  const void *v25;
  NSObject *v26;
  const void *v27;
  const void *v28;
  _QWORD v30[4];
  id v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD v34[4];
  id v35;
  uint64_t *v36;
  uint64_t *v37;
  CFTypeRef *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  CFTypeRef v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  CFTypeRef v51;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  uint64_t v55;

  v51 = 0;
  v47 = 0;
  v48 = &v47;
  v49 = 0x2020000000;
  v50 = 0;
  v43 = 0;
  v44 = &v43;
  v45 = 0x2020000000;
  v46 = 0;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2020000000;
  v42 = 0;
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1002061D0;
  v34[3] = &unk_1002ED728;
  v36 = &v43;
  v37 = &v47;
  v3 = a2;
  v35 = v3;
  v38 = a1;
  v4 = sub_100033998(0, &v42, (uint64_t)v34);
  if (v4)
    goto LABEL_18;
  v5 = (__CFError *)v40[3];
  if (CFErrorGetCode(v5) != -536870174)
    goto LABEL_18;
  Domain = CFErrorGetDomain(v5);
  if (!Domain || !kCFErrorDomainMach)
  {
    if (Domain == kCFErrorDomainMach)
      goto LABEL_6;
LABEL_18:
    if (a1)
    {
      if (!*a1)
      {
        v10 = (const void *)v40[3];
        if (v10)
        {
          v40[3] = 0;
          if (*a1)
            CFRelease(*a1);
          *a1 = v10;
        }
      }
    }
    v11 = (const void *)v40[3];
    if (v11)
    {
      v40[3] = 0;
      CFRelease(v11);
    }
    v12 = v51;
    if (v51)
    {
      v51 = 0;
      CFRelease(v12);
    }
    if (!v4)
      goto LABEL_64;
    v13 = *((_BYTE *)v48 + 24) != 0;
    goto LABEL_65;
  }
  if (!CFEqual(Domain, kCFErrorDomainMach))
    goto LABEL_18;
LABEL_6:
  if (*((_BYTE *)v44 + 24))
  {
    if (a1)
    {
      if (!*a1)
      {
        v7 = (const void *)v40[3];
        if (v7)
        {
          v40[3] = 0;
          if (*a1)
            CFRelease(*a1);
          *a1 = v7;
        }
      }
    }
    v8 = (const void *)v40[3];
    if (v8)
    {
      v40[3] = 0;
      CFRelease(v8);
    }
    v9 = v51;
    if (!v51)
      goto LABEL_64;
    goto LABEL_63;
  }
  *(_DWORD *)buf = -1431655766;
  v14 = sub_100025F30(0, buf);
  if (!sub_10003252C(v14, &v51, CFSTR("aks_get_lock_state failed: %x"), v14) || (buf[0] & 1) != 0)
  {
    v25 = sub_10000EF14("while-unlocked-hack");
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v53 = (const char *)v51;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Not trying action, aks bag locked (%@)", buf, 0xCu);
    }

    if (a1)
    {
      if (!*a1)
      {
        v27 = (const void *)v40[3];
        if (v27)
        {
          v40[3] = 0;
          if (*a1)
            CFRelease(*a1);
          *a1 = v27;
        }
      }
    }
    v28 = (const void *)v40[3];
    if (v28)
    {
      v40[3] = 0;
      CFRelease(v28);
    }
    v9 = v51;
    if (!v51)
      goto LABEL_64;
LABEL_63:
    v51 = 0;
    CFRelease(v9);
LABEL_64:
    v13 = 0;
    goto LABEL_65;
  }
  v15 = (const void *)v40[3];
  if (v15)
  {
    v40[3] = 0;
    CFRelease(v15);
  }
  v16 = sub_10000EF14("while-unlocked-hack");
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Trying action while unlocked without assertion", buf, 2u);
  }

  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100206344;
  v30[3] = &unk_1002ED750;
  v32 = &v47;
  v31 = v3;
  v33 = &v39;
  sub_10020199C(v30);
  v18 = sub_10000EF14("while-unlocked-hack");
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)v48 + 24))
      v20 = "succeeded";
    else
      v20 = "failed";
    v21 = v40[3];
    *(_DWORD *)buf = 136315394;
    v53 = v20;
    v54 = 2112;
    v55 = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Action %s (%@)", buf, 0x16u);
  }

  if (a1)
  {
    if (!*a1)
    {
      v22 = (const void *)v40[3];
      if (v22)
      {
        v40[3] = 0;
        if (*a1)
          CFRelease(*a1);
        *a1 = v22;
      }
    }
  }
  v23 = (const void *)v40[3];
  if (v23)
  {
    v40[3] = 0;
    CFRelease(v23);
  }
  v24 = v51;
  if (v51)
  {
    v51 = 0;
    CFRelease(v24);
  }
  v13 = *((_BYTE *)v48 + 24) != 0;

LABEL_65:
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);

  return v13;
}

void sub_100206160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1002061D0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  if (!SOSCCThisDeviceIsInCircle(0))
  {
    v2 = sub_10020053C(1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settings"));

    if (v4)
    {
      v5 = objc_msgSend(v3, "ghostBustCheckDate");
      *((_BYTE *)v20 + 24) = v5;
      if (!v5)
        goto LABEL_7;
    }
    else if (!*((_BYTE *)v20 + 24))
    {
LABEL_7:

      goto LABEL_8;
    }
    v6 = +[SOSAccount ghostBustGetRampSettings](SOSAccount, "ghostBustGetRampSettings");
    *((_DWORD *)v16 + 6) = v6 + 16;
    goto LABEL_7;
  }
LABEL_8:
  sub_10020199C(&stru_1002ED678);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100206384;
  v9[3] = &unk_1002ED700;
  v11 = &v19;
  v12 = &v15;
  v13 = *(_OWORD *)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 56);
  v10 = v7;
  v14 = v8;
  sub_10020199C(v9);

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
}

void sub_10020631C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100206344(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100206384(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "account"));
  if (objc_msgSend(v3, "isInCircle:", 0)
    && +[SOSAuthKitHelpers accountIsCDPCapable](SOSAuthKitHelpers, "accountIsCDPCapable")
    && !+[SOSAuthKitHelpers peerinfoHasMID:](SOSAuthKitHelpers, "peerinfoHasMID:", v3))
  {
    +[SOSAuthKitHelpers updateMIDInPeerInfo:](SOSAuthKitHelpers, "updateMIDInPeerInfo:", v3);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    objc_msgSend(v3, "ghostBustPeriodic:complete:", *(unsigned int *)(*(_QWORD *)(a1[6] + 8) + 24), &stru_1002ED6B8);
    objc_msgSend(v3, "removeV0Peers:", &stru_1002ED6D8);
  }
  *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = (*(uint64_t (**)(void))(a1[4] + 16))();

}

void sub_100206470(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  const void *v5;
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  int v11;
  NSError *v12;

  v4 = a3;
  v5 = sub_10000EF14("removeV0Peers");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4 || !a2)
  {
    if (v7)
    {
      v11 = 138412290;
      v12 = v4;
      v8 = "Did not remove any v0 peers, error: %@";
      v9 = v6;
      v10 = 12;
      goto LABEL_7;
    }
  }
  else if (v7)
  {
    LOWORD(v11) = 0;
    v8 = "Removed v0 Peers";
    v9 = v6;
    v10 = 2;
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v11, v10);
  }

}

void sub_100206560(id a1, BOOL a2, NSError *a3)
{
  _BOOL4 v3;
  const void *v4;
  NSObject *v5;
  _DWORD v6[2];

  v3 = a2;
  v4 = sub_10000EF14("ghostbust");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GhostBusting: %{BOOL}d", (uint8_t *)v6, 8u);
  }

}

void sub_100206608(id a1, SOSAccountTransaction *a2)
{
  SOSAccountTransaction *v2;
  void *v3;
  void *v4;
  int HasUserVisibleViewsEnabled;
  const void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint8_t v11[16];

  v2 = a2;
  if (SOSVisibleKeychainNotAllowed())
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v2, "account"));
    if (objc_msgSend(v3, "isInCircle:", 0))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v2, "account"));
      HasUserVisibleViewsEnabled = SOSPeerInfoHasUserVisibleViewsEnabled(objc_msgSend(v4, "peerInfo"));

      if (HasUserVisibleViewsEnabled)
      {
        v6 = sub_10000EF14("views");
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Cannot have visible keychain views due to profile restrictions", v11, 2u);
        }

        v8 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v2, "account"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "trust"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v2, "account"));
        objc_msgSend(v9, "updateViewSets:enabled:disabled:", v10, 0, SOSViewsGetV0ViewSet(v10));

      }
    }

  }
}

BOOL sub_10020672C(CFTypeRef *a1)
{
  _BOOL8 v2;
  const void *v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  char v11;

  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v11 = 1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10020680C;
  v5[3] = &unk_1002ECF10;
  v5[4] = v10;
  v5[5] = &v6;
  v2 = sub_100205C98(a1, v5);
  if (a1)
  {
    v3 = (const void *)v7[3];
    if (v3)
      *a1 = v3;
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(v10, 8);
  return v2;
}

void sub_1002067E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10020680C(uint64_t a1, void *a2)
{
  void *v3;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001D7408(v3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != 0;

  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

BOOL sub_10020686C(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  unint64_t Nanoseconds;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint8_t buf[4];
  os_signpost_id_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  int v35;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 1;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCRequestToJoinCircleAfterRestore", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v31 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCRequestToJoinCircleAfterRestore  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100206B38;
  v25[3] = &unk_1002ECEE8;
  v25[4] = &v26;
  v14 = sub_100205C98(a1, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v16 = _OctagonSignpostLogSystem(Nanoseconds);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = v17;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    v19 = *((unsigned __int8 *)v27 + 24);
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v19;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCRequestToJoinCircleAfterRestore", " SOSSignpostNameSOSCCRequestToJoinCircleAfterRestore=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRequestToJoinCircleAfterRestore}d ", buf, 8u);
  }

  v21 = _OctagonSignpostLogSystem(v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v23 = *((unsigned __int8 *)v27 + 24);
    v31 = v4;
    v32 = 2048;
    v33 = (double)Nanoseconds / 1000000000.0;
    v34 = 1026;
    v35 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCRequestToJoinCircleAfterRestore  SOSSignpostNameSOSCCRequestToJoinCircleAfterRestore=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRequestToJoinCircleAfterRestore}d ", buf, 0x1Cu);
  }

  _Block_object_dispose(&v26, 8);
  return v14;
}

void sub_100206B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100206B38(uint64_t a1, void *a2, id *a3)
{
  id v5;
  void *v6;
  id v7;
  const void *v8;
  NSObject *v9;
  id v10;
  const void *v11;
  NSObject *v12;
  char v13;
  void *v14;
  const void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  id v20;
  void *v21;
  uint64_t v22;
  _BOOL4 v23;
  const __CFString *v24;
  const __CFString *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  int IsLegacy;
  const __CFString *v31;
  void *v32;
  const __CFString *v33;
  const __CFString *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  int v39;
  const __CFString *v40;
  id v41;
  uint64_t v42;
  uint8_t v44[16];
  _QWORD v45[4];
  _QWORD v46[4];
  _BYTE buf[24];

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  sub_1001CFD08(v6);

  if (a3 && *a3)
  {
    v7 = *a3;
    v8 = sub_10000EF14("SecError");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ensure peer registration error: %@", buf, 0xCu);
    }

  }
  *(_QWORD *)buf = 0;
  v10 = v5;
  v11 = sub_10000EF14("circleOps");
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Joining after restore (SOSAccountJoinCirclesAfterRestore)", v44, 2u);
  }

  v13 = sub_1001CEAE4(v10, 1, (uint64_t)buf);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v13;
  if (a3)
  {
    v14 = *(void **)buf;
    if (*(_QWORD *)buf)
    {
      CFRetain(*(CFTypeRef *)buf);
      *a3 = v14;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    if (qword_1003412D8 != -1)
      dispatch_once(&qword_1003412D8, &stru_1002E7880);
    if (byte_1003412D0)
    {
      v15 = sub_10000EF14("join-after-restore");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "posting kSOSCCCircleOctagonKeysChangedNotification", v44, 2u);
      }

      notify_post(kSOSCCCircleOctagonKeysChangedNotification);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "account"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "trust"));
      v19 = objc_msgSend(v18, "isInCircleOnly:", 0);

      if (*(_QWORD *)buf)
      {
        v20 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        v22 = *(_QWORD *)buf;
        v45[0] = CFSTR("SOSEnabled");
        v23 = -[OTSOSActualAdapter sosEnabled]_0();
        v24 = CFSTR("compat_disabled");
        if (v23)
          v24 = CFSTR("compat_enabled");
        v46[0] = v24;
        v46[1] = CFSTR("Restore");
        v45[1] = CFSTR("SOSJoinMethod");
        v45[2] = CFSTR("JoiningSOSResult");
        v25 = CFSTR("not_in_circle");
        if (v19)
          v25 = CFSTR("in_circle");
        v46[2] = v25;
        v45[3] = CFSTR("CircleContainsLegacy");
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "account"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "trust"));
        v28 = objc_msgSend(v27, "trustedCircle");
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "account"));
        IsLegacy = SOSCircleIsLegacy(v28, objc_msgSend(v29, "accountKey"));
        v31 = CFSTR("does_not_contain_legacy");
        if (IsLegacy)
          v31 = CFSTR("contains_legacy");
        v46[3] = v31;
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v46, v45, 4));
        objc_msgSend(v21, "logResultForEvent:hardFailure:result:withAttributes:", CFSTR("SOSDeferralEventJoinCircleAfterRestore"), 0, v22, v32);

      }
      else
      {
        if (-[OTSOSActualAdapter sosEnabled]_0())
          v33 = CFSTR("compat_enabled");
        else
          v33 = CFSTR("compat_disabled");
        if (v19)
          v34 = CFSTR("in_circle");
        else
          v34 = CFSTR("not_in_circle");
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "account"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "trust"));
        v37 = objc_msgSend(v36, "trustedCircle");
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "account"));
        v39 = SOSCircleIsLegacy(v37, objc_msgSend(v38, "accountKey"));
        v40 = CFSTR("does_not_contain_legacy");
        if (v39)
          v40 = CFSTR("contains_legacy");
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@-%@-%@"), v33, CFSTR("Restore"), v34, v40));

        v41 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
        v26 = (void *)objc_claimAutoreleasedReturnValue(v41);
        objc_msgSend(v26, "logSuccessForEventNamed:", v21);
      }

    }
  }
  v42 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);

  return v42;
}

BOOL sub_100206FE4(CFTypeRef *a1)
{
  return sub_100202B4C(a1, &stru_1002ECF30);
}

BOOL sub_100206FF0(id a1, SOSAccountTransaction *a2, __CFError **a3)
{
  void *v3;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](a2, "account", a3));
  sub_1001CDD78(v3);

  return 1;
}

BOOL sub_100207024(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  unint64_t Nanoseconds;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD v23[5];
  uint8_t buf[4];
  os_signpost_id_t v25;
  __int16 v26;
  double v27;
  __int16 v28;
  _BOOL4 v29;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCResetToOffering", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v25 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCResetToOffering  enableTelemetry=YES ", buf, 0xCu);
  }

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10020727C;
  v23[3] = &unk_1002ECF50;
  v23[4] = a1;
  v14 = sub_100205C98(a1, v23);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v16 = _OctagonSignpostLogSystem(Nanoseconds);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = v17;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v25) = v14;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCResetToOffering", " SOSSignpostNameSOSCCResetToOffering=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCResetToOffering}d ", buf, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v25 = v4;
    v26 = 2048;
    v27 = (double)Nanoseconds / 1000000000.0;
    v28 = 1026;
    v29 = v14;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCResetToOffering  SOSSignpostNameSOSCCResetToOffering=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCResetToOffering}d ", buf, 0x1Cu);
  }

  return v14;
}

id sub_10020727C(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  int IsLegacy;
  void *v13;
  void *v14;
  CFTypeRef v15;
  const void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  id v21;
  void *v22;
  CFTypeRef v23;
  _BOOL4 v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  void *v28;
  _BOOL4 v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  id v33;
  uint8_t buf[16];
  CFTypeRef cf;
  _QWORD v37[4];
  _QWORD v38[4];

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v7 = sub_1001D6CD8(v6, *(_QWORD *)(a1 + 32));

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "trust"));
    v10 = objc_msgSend(v9, "trustedCircle");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    IsLegacy = SOSCircleIsLegacy(v10, objc_msgSend(v11, "accountKey"));

    cf = 0;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "trust"));
    v7 = objc_msgSend(v14, "resetToOffering:key:err:", v5, v7, &cf);

    if (a3)
    {
      v15 = cf;
      if (cf)
      {
        CFRetain(cf);
        *a3 = v15;
      }
    }
    if ((_DWORD)v7)
    {
      if (qword_1003412D8 != -1)
        dispatch_once(&qword_1003412D8, &stru_1002E7880);
      if (byte_1003412D0)
      {
        v16 = sub_10000EF14("reset-to-offering");
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "posting kSOSCCCircleOctagonKeysChangedNotification", buf, 2u);
        }

        notify_post(kSOSCCCircleOctagonKeysChangedNotification);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "trust"));
        v20 = objc_msgSend(v19, "isInCircleOnly:", 0);

        if (cf)
        {
          v21 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
          v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          v23 = cf;
          v37[0] = CFSTR("SOSEnabled");
          v24 = -[OTSOSActualAdapter sosEnabled]_0();
          v25 = CFSTR("compat_disabled");
          if (v24)
            v25 = CFSTR("compat_enabled");
          v38[0] = v25;
          v38[1] = CFSTR("ResetToOffering");
          v37[1] = CFSTR("SOSJoinMethod");
          v37[2] = CFSTR("JoiningSOSResult");
          v26 = CFSTR("in_circle");
          if (!v20)
            v26 = CFSTR("not_in_circle");
          v37[3] = CFSTR("CircleContainsLegacy");
          v27 = CFSTR("does_not_contain_legacy");
          if (IsLegacy)
            v27 = CFSTR("contains_legacy");
          v38[2] = v26;
          v38[3] = v27;
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v38, v37, 4));
          objc_msgSend(v22, "logResultForEvent:hardFailure:result:withAttributes:", CFSTR("SOSDeferralEventResetToOffering"), 0, v23, v28);
        }
        else
        {
          v29 = -[OTSOSActualAdapter sosEnabled]_0();
          v30 = CFSTR("compat_disabled");
          if (v29)
            v30 = CFSTR("compat_enabled");
          v31 = CFSTR("not_in_circle");
          if (v20)
            v31 = CFSTR("in_circle");
          v32 = CFSTR("does_not_contain_legacy");
          if (IsLegacy)
            v32 = CFSTR("contains_legacy");
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@-%@-%@"), v30, CFSTR("ResetToOffering"), v31, v32));
          v33 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
          v28 = (void *)objc_claimAutoreleasedReturnValue(v33);
          objc_msgSend(v28, "logSuccessForEventNamed:", v22);
        }

      }
    }
  }

  return v7;
}

BOOL sub_100207614(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  unint64_t Nanoseconds;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD v23[5];
  uint8_t buf[4];
  os_signpost_id_t v25;
  __int16 v26;
  double v27;
  __int16 v28;
  _BOOL4 v29;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCResetToEmpty", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v25 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCResetToEmpty  enableTelemetry=YES ", buf, 0xCu);
  }

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10020786C;
  v23[3] = &unk_1002ECF50;
  v23[4] = a1;
  v14 = sub_100205C98(a1, v23);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v16 = _OctagonSignpostLogSystem(Nanoseconds);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = v17;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v25) = v14;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCResetToEmpty", " SOSSignpostNameSOSCCResetToEmpty=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCResetToEmpty}d ", buf, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v25 = v4;
    v26 = 2048;
    v27 = (double)Nanoseconds / 1000000000.0;
    v28 = 1026;
    v29 = v14;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCResetToEmpty  SOSSignpostNameSOSCCResetToEmpty=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCResetToEmpty}d ", buf, 0x1Cu);
  }

  return v14;
}

id sub_10020786C(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  int IsLegacy;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  CFTypeRef v18;
  id v19;
  void *v20;
  CFTypeRef v21;
  _BOOL4 v22;
  const __CFString *v23;
  const __CFString *v24;
  void *v25;
  _BOOL4 v26;
  const __CFString *v27;
  const __CFString *v28;
  id v29;
  CFTypeRef cf;
  _QWORD v32[3];
  _QWORD v33[3];

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v7 = sub_1001D7408(v6, *(_QWORD *)(a1 + 32));

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "trust"));
    v10 = objc_msgSend(v9, "trustedCircle");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    IsLegacy = SOSCircleIsLegacy(v10, objc_msgSend(v11, "accountKey"));

    cf = 0;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "trust"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "circle_transport"));
    v7 = objc_msgSend(v14, "resetAccountToEmpty:transport:err:", v15, v17, &cf);

    v18 = cf;
    if (a3 && cf)
    {
      CFRetain(cf);
      *a3 = v18;
      v18 = cf;
    }
    if (v18)
    {
      v19 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v21 = cf;
      v32[0] = CFSTR("SOSEnabled");
      v22 = -[OTSOSActualAdapter sosEnabled]_0();
      v23 = CFSTR("compat_disabled");
      if (v22)
        v23 = CFSTR("compat_enabled");
      v33[0] = v23;
      v33[1] = CFSTR("Reset");
      v24 = CFSTR("does_not_contain_legacy");
      v32[1] = CFSTR("SOSJoinMethod");
      v32[2] = CFSTR("CircleContainsLegacy");
      if (IsLegacy)
        v24 = CFSTR("contains_legacy");
      v33[2] = v24;
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 3));
      objc_msgSend(v20, "logResultForEvent:hardFailure:result:withAttributes:", CFSTR("SOSDeferralEventReset"), 0, v21, v25);
    }
    else
    {
      v26 = -[OTSOSActualAdapter sosEnabled]_0();
      v27 = CFSTR("compat_disabled");
      if (v26)
        v27 = CFSTR("compat_enabled");
      if (IsLegacy)
        v28 = CFSTR("contains_legacy");
      else
        v28 = CFSTR("does_not_contain_legacy");
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@-%@"), v27, CFSTR("Reset"), v28));
      v29 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
      v25 = (void *)objc_claimAutoreleasedReturnValue(v29);
      objc_msgSend(v25, "logSuccessForEventNamed:", v20);
    }

  }
  return v7;
}

BOOL sub_100207B48(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  unint64_t Nanoseconds;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  int v23;
  os_signpost_id_t v24;
  __int16 v25;
  double v26;
  __int16 v27;
  _BOOL4 v28;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    LOWORD(v23) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCRemoveThisDeviceFromCircle", " enableTelemetry=YES ", (uint8_t *)&v23, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 134217984;
    v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCRemoveThisDeviceFromCircle  enableTelemetry=YES ", (uint8_t *)&v23, 0xCu);
  }

  v14 = sub_100205C98(a1, &stru_1002ECF70);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v16 = _OctagonSignpostLogSystem(Nanoseconds);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = v17;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    v23 = 67240192;
    LODWORD(v24) = v14;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCRemoveThisDeviceFromCircle", " SOSSignpostNameSOSCCRemoveThisDeviceFromCircle=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRemoveThisDeviceFromCircle}d ", (uint8_t *)&v23, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 134218496;
    v24 = v4;
    v25 = 2048;
    v26 = (double)Nanoseconds / 1000000000.0;
    v27 = 1026;
    v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCRemoveThisDeviceFromCircle  SOSSignpostNameSOSCCRemoveThisDeviceFromCircle=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRemoveThisDeviceFromCircle}d ", (uint8_t *)&v23, 0x1Cu);
  }

  return v14;
}

BOOL sub_100207D74(id a1, SOSAccountTransaction *a2, __CFError **a3)
{
  SOSAccountTransaction *v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v4, "account"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v4, "account"));

  LOBYTE(a3) = objc_msgSend(v6, "leaveCircle:err:", v7, a3);
  return (char)a3;
}

BOOL sub_100207DF8(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL8 v16;
  unint64_t Nanoseconds;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD v25[5];
  uint8_t buf[4];
  os_signpost_id_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  _BOOL4 v31;

  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCRemovePeersFromCircle", " enableTelemetry=YES ", buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCRemovePeersFromCircle  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100208054;
  v25[3] = &unk_1002ECF50;
  v25[4] = a1;
  v16 = sub_100205C98(a2, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
  v18 = _OctagonSignpostLogSystem(Nanoseconds);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  v20 = v19;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v27) = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCRemovePeersFromCircle", " SOSSignpostNameSOSCCRemovePeersFromCircle=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRemovePeersFromCircle}d ", buf, 8u);
  }

  v22 = _OctagonSignpostLogSystem(v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v27 = v6;
    v28 = 2048;
    v29 = (double)Nanoseconds / 1000000000.0;
    v30 = 1026;
    v31 = v16;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCRemovePeersFromCircle  SOSSignpostNameSOSCCRemovePeersFromCircle=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRemovePeersFromCircle}d ", buf, 0x1Cu);
  }

  return v16;
}

uint64_t sub_100208054(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v6 = sub_1001CF31C(v5, *(const __CFArray **)(a1 + 32), a3);

  return v6;
}

void sub_1002080A4()
{
  uint64_t v0;
  NSObject *v1;

  v0 = SOSCCCredentialQueue();
  v1 = objc_claimAutoreleasedReturnValue(v0);
  dispatch_async(v1, &stru_1002ECF90);

}

void sub_1002080D8(id a1)
{
  const void *v2;
  NSObject *v3;
  CFTypeRef v4;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v7;

  cf = 0;
  if (!sub_100205C98(&cf, &stru_1002ECFB0) || cf != 0)
  {
    v2 = sub_10000EF14("SecError");
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v7 = cf;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "circleOps: error delivering account-sign-in notification: %@", buf, 0xCu);
    }

    v4 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v4);
    }
  }
}

BOOL sub_1002081B4(id a1, SOSAccountTransaction *a2, __CFError **a3)
{
  SOSAccountTransaction *v3;
  const void *v4;
  NSObject *v5;
  void *v6;
  uint8_t v8[16];

  v3 = a2;
  v4 = sub_10000EF14("circleOps");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Signed into account!", v8, 2u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v3, "account"));
  objc_msgSend(v6, "setAccountIsChanging:", 0);

  return 1;
}

BOOL sub_100208254(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  unint64_t Nanoseconds;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  int v23;
  os_signpost_id_t v24;
  __int16 v25;
  double v26;
  __int16 v27;
  _BOOL4 v28;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    LOWORD(v23) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCLoggedOutOfAccount", " enableTelemetry=YES ", (uint8_t *)&v23, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 134217984;
    v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCLoggedOutOfAccount  enableTelemetry=YES ", (uint8_t *)&v23, 0xCu);
  }

  v14 = sub_100205C98(a1, &stru_1002ECFD0);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v16 = _OctagonSignpostLogSystem(Nanoseconds);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = v17;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    v23 = 67240192;
    LODWORD(v24) = v14;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCLoggedOutOfAccount", " SOSSignpostNameSOSCCLoggedOutOfAccount=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCLoggedOutOfAccount}d ", (uint8_t *)&v23, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 134218496;
    v24 = v4;
    v25 = 2048;
    v26 = (double)Nanoseconds / 1000000000.0;
    v27 = 1026;
    v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCLoggedOutOfAccount  SOSSignpostNameSOSCCLoggedOutOfAccount=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCLoggedOutOfAccount}d ", (uint8_t *)&v23, 0x1Cu);
  }

  return v14;
}

BOOL sub_100208480(id a1, SOSAccountTransaction *a2, __CFError **a3)
{
  SOSAccountTransaction *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;
  void *v13;
  uint8_t v15[16];

  v4 = a2;
  v5 = sub_10000EF14("circleOps");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Signed out of account!", v15, 2u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v4, "account"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trust"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v4, "account"));
  v10 = objc_msgSend(v8, "leaveCircle:err:", v9, a3);

  -[SOSAccountTransaction restart](v4, "restart");
  v11 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v4, "account"));
  sub_10020346C(1);

  v12 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v4, "account"));
  sub_1001CDD78(v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v4, "account"));
  objc_msgSend(v13, "setAccountIsChanging:", 1);

  return v10;
}

BOOL sub_1002085B8(uint64_t a1, CFTypeRef *a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100208610;
  v3[3] = &unk_1002ECF50;
  v3[4] = a1;
  return sub_100205C98(a2, v3);
}

uint64_t sub_100208610(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  dispatch_queue_global_t global_queue;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  const void *v13;
  NSObject *v14;
  id v15;
  id v16;
  dispatch_time_t v17;
  void *v18;
  __int128 v20;
  void (*v21)(uint64_t);
  void *v22;
  id v23;
  id v24;
  uint64_t v25;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v7 = *(_QWORD *)(a1 + 32);
  v8 = v6;
  global_queue = dispatch_get_global_queue(-2, 0);
  v10 = objc_claimAutoreleasedReturnValue(global_queue);
  v11 = dispatch_group_create();
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "trust"));
  v13 = sub_10000EF14("circle");
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v20) = 134217984;
    *(_QWORD *)((char *)&v20 + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Attempting to leave circle - best effort - in %llu seconds\n", (uint8_t *)&v20, 0xCu);
  }

  *(_QWORD *)&v20 = _NSConcreteStackBlock;
  *((_QWORD *)&v20 + 1) = 3221225472;
  v21 = sub_1001CF7C8;
  v22 = &unk_1002EB3B0;
  v23 = v12;
  v24 = v8;
  v25 = a3;
  v15 = v8;
  v16 = v12;
  dispatch_group_async(v11, v10, &v20);
  v17 = dispatch_time(0, 1000000000 * v7);
  dispatch_group_wait(v11, v17);
  objc_msgSend(v16, "setDepartureCode:", 2);

  objc_msgSend(v5, "restart");
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));

  sub_10020346C(0);
  return 0;
}

uint64_t sub_1002087EC(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t Nanoseconds;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  os_signpost_id_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  _BOOL4 v35;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCCopyApplicantPeerInfo", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v31 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCCopyApplicantPeerInfo  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100208AC8;
  v25[3] = &unk_1002ECEE8;
  v25[4] = &v26;
  sub_100202B4C(a1, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v15 = _OctagonSignpostLogSystem(Nanoseconds);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    v18 = v27[3] != 0;
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCCopyApplicantPeerInfo", " SOSSignpostNameSOSCCCopyApplicantPeerInfo=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyApplicantPeerInfo}d ", buf, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = v27[3];
    *(_DWORD *)buf = 134218496;
    v31 = v4;
    v32 = 2048;
    v33 = (double)Nanoseconds / 1000000000.0;
    v34 = 1026;
    v35 = v22 != 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCCopyApplicantPeerInfo  SOSSignpostNameSOSCCCopyApplicantPeerInfo=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyApplicantPeerInfo}d ", buf, 0x1Cu);
  }

  v23 = v27[3];
  _Block_object_dispose(&v26, 8);
  return v23;
}

void sub_100208A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100208AC8(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001D974C(v5, a3, &stru_1002EBB38);

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_100208B34(CFTypeRef *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100208BD4;
  v3[3] = &unk_1002ECEE8;
  v3[4] = &v4;
  sub_100202B4C(a1, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100208BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100208BD4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t Generation;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFArrayRef v16;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
  v7 = sub_1001D7408(v5, a3);

  if (!v7)
    goto LABEL_6;
  if (!objc_msgSend(v6, "trustedCircle"))
  {
    SOSErrorCreate(1037, a3, 0, CFSTR("No circle"));
LABEL_6:
    v16 = 0;
    goto LABEL_4;
  }
  Generation = SOSCircleGetGeneration(objc_msgSend(v6, "trustedCircle"));
  v16 = sub_100139AC4(kCFAllocatorDefault, v9, v10, v11, v12, v13, v14, v15, Generation);
LABEL_4:

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v16;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_100208CC0(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  unint64_t Nanoseconds;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t buf[4];
  os_signpost_id_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  _BOOL4 v36;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 0;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCCopyValidPeerPeerInfo", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v32 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCCopyValidPeerPeerInfo  enableTelemetry=YES ", buf, 0xCu);
  }

  v14 = objc_autoreleasePoolPush();
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100208FAC;
  v26[3] = &unk_1002ECEE8;
  v26[4] = &v27;
  sub_100202B4C(a1, v26);
  objc_autoreleasePoolPop(v14);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v16 = _OctagonSignpostLogSystem(Nanoseconds);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = v17;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    v19 = v28[3] != 0;
    *(_DWORD *)buf = 67240192;
    LODWORD(v32) = v19;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCCopyValidPeerPeerInfo", " SOSSignpostNameSOSCCCopyValidPeerPeerInfo=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyValidPeerPeerInfo}d ", buf, 8u);
  }

  v21 = _OctagonSignpostLogSystem(v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = v28[3];
    *(_DWORD *)buf = 134218496;
    v32 = v4;
    v33 = 2048;
    v34 = (double)Nanoseconds / 1000000000.0;
    v35 = 1026;
    v36 = v23 != 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCCopyValidPeerPeerInfo  SOSSignpostNameSOSCCCopyValidPeerPeerInfo=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyValidPeerPeerInfo}d ", buf, 0x1Cu);
  }

  v24 = v28[3];
  _Block_object_dispose(&v27, 8);
  return v24;
}

void sub_100208F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100208FAC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  CFMutableArrayRef v8;
  _BOOL8 v9;
  _QWORD v11[4];
  id v12;

  v5 = a2;
  v6 = objc_autoreleasePoolPush();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001D9890;
  v11[3] = &unk_1002EBA68;
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v7 = v12;
  v8 = sub_1001D974C(v7, a3, v11);

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
  objc_autoreleasePoolPop(v6);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;

  return v9;
}

uint64_t sub_10020908C(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t Nanoseconds;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint8_t buf[4];
  os_signpost_id_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  int v35;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCValidateUserPublic", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v31 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCValidateUserPublic  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100209358;
  v25[3] = &unk_1002ECEE8;
  v25[4] = &v26;
  sub_100202B4C(a1, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v15 = _OctagonSignpostLogSystem(Nanoseconds);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    v18 = *((unsigned __int8 *)v27 + 24);
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCValidateUserPublic", " SOSSignpostNameSOSCCValidateUserPublic=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCValidateUserPublic}d ", buf, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v22 = *((unsigned __int8 *)v27 + 24);
    v31 = v4;
    v32 = 2048;
    v33 = (double)Nanoseconds / 1000000000.0;
    v34 = 1026;
    v35 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCValidateUserPublic  SOSSignpostNameSOSCCValidateUserPublic=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCValidateUserPublic}d ", buf, 0x1Cu);
  }

  v23 = *((unsigned __int8 *)v27 + 24);
  _Block_object_dispose(&v26, 8);
  return v23;
}

void sub_100209320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100209358(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  unsigned __int8 v6;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  if (sub_1001D7408(v5, a3))
    v6 = objc_msgSend(v5, "accountKeyIsTrusted");
  else
    v6 = 0;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t sub_1002093D4(CFTypeRef *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100209474;
  v3[3] = &unk_1002ECEE8;
  v3[4] = &v4;
  sub_100202B4C(a1, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10020945C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100209474(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  CFMutableArrayRef v6;
  _QWORD v8[4];
  id v9;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001D96D8;
  v8[3] = &unk_1002EBA68;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v5 = v9;
  v6 = sub_1001D974C(v5, a3, v8);

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_10020952C(CFTypeRef *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002095CC;
  v3[3] = &unk_1002ECEE8;
  v3[4] = &v4;
  sub_100202B4C(a1, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1002095B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002095CC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001D974C(v5, a3, &stru_1002EBAF8);

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_100209638(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t Nanoseconds;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  os_signpost_id_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  _BOOL4 v35;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCCopyViewUnawarePeerInfo", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v31 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCCopyViewUnawarePeerInfo  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100209914;
  v25[3] = &unk_1002ECEE8;
  v25[4] = &v26;
  sub_100202B4C(a1, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v15 = _OctagonSignpostLogSystem(Nanoseconds);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    v18 = v27[3] != 0;
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCCopyViewUnawarePeerInfo", " SOSSignpostNameSOSCCCopyViewUnawarePeerInfo=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyViewUnawarePeerInfo}d ", buf, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = v27[3];
    *(_DWORD *)buf = 134218496;
    v31 = v4;
    v32 = 2048;
    v33 = (double)Nanoseconds / 1000000000.0;
    v34 = 1026;
    v35 = v22 != 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCCopyViewUnawarePeerInfo  SOSSignpostNameSOSCCCopyViewUnawarePeerInfo=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyViewUnawarePeerInfo}d ", buf, 0x1Cu);
  }

  v23 = v27[3];
  _Block_object_dispose(&v26, 8);
  return v23;
}

void sub_1002098DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100209914(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  CFMutableArrayRef v6;
  _QWORD v8[4];
  id v9;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001D9B64;
  v8[3] = &unk_1002EBA68;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v5 = v9;
  v6 = sub_1001D974C(v5, a3, v8);

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_1002099CC(CFTypeRef *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = sub_100011C40(0);
  v3 = sub_10001A338(v2);
  sub_10003268C(v3 != 0, a1, CFSTR("No datasource"));
  if (!v3)
    return 0;
  v4 = (uint64_t *)(*(uint64_t (**)(uint64_t, const CFStringRef, CFTypeRef *))(v3 + 8))(v3, kSecAttrAccessibleWhenUnlocked, a1);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = sub_100104B3C(*v4, (uint64_t)a1);
  ((void (*)(uint64_t *, CFTypeRef *))v5[9])(v5, a1);
  return v6;
}

BOOL sub_100209A6C(CFTypeRef *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_signpost_id_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const void *v15;
  NSObject *v16;
  _BOOL8 v17;
  const void *v18;
  NSObject *v19;
  NSObject *v20;
  int64_t v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  CFTypeID v24;
  uint64_t v25;
  const void *v26;
  NSObject *v27;
  dispatch_time_t v28;
  uint64_t v29;
  time_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  void *v35;
  void *v36;
  const void *v37;
  NSObject *v38;
  const void *v39;
  unint64_t Nanoseconds;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  _QWORD v48[6];
  _QWORD v49[11];
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  _QWORD v54[4];
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  char v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  void (*v69)(uint64_t);
  id v70;
  _BYTE buf[12];
  __int16 v72;
  double v73;
  __int16 v74;
  _BOOL4 v75;
  uint64_t v76;
  void *v77;

  v65 = 0;
  v66 = &v65;
  v67 = 0x3032000000;
  v68 = sub_10020A1AC;
  v69 = sub_10020A1BC;
  v70 = 0;
  v63[0] = 0;
  v63[1] = v63;
  v63[2] = 0x2020000000;
  v64 = 0;
  v59 = 0;
  v60 = &v59;
  v61 = 0x2020000000;
  v62 = 0;
  v55 = 0;
  v56 = &v55;
  v57 = 0x2020000000;
  v58 = 0xAAAAAAAAAAAAAAAALL;
  v54[0] = 0;
  v54[1] = v54;
  v54[2] = 0x2020000000;
  v54[3] = kCFBooleanFalse;
  v50 = 0;
  v51 = &v50;
  v52 = 0x2020000000;
  v53 = 0;
  v2 = sub_10020A1C4();
  if ((v2 & 1) != 0)
  {
    v3 = _OctagonSignpostLogSystem(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = _OctagonSignpostCreate();
    v7 = v6;

    v9 = _OctagonSignpostLogSystem(v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = v10;
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_BEGIN, v5, "SOSCCWaitForInitialSync", " enableTelemetry=YES ", buf, 2u);
    }

    v13 = _OctagonSignpostLogSystem(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCWaitForInitialSync  enableTelemetry=YES ", buf, 0xCu);
    }

    v15 = sub_10000EF14("initial sync");
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wait for initial sync start!", buf, 2u);
    }

    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_10020A264;
    v49[3] = &unk_1002ED020;
    v49[4] = v54;
    v49[5] = &v50;
    v49[6] = &v55;
    v49[7] = &v65;
    v49[8] = &v59;
    v49[9] = v63;
    v49[10] = a1;
    v17 = sub_100202B4C(a1, v49);
    if (v17)
    {
      if (v66[5])
      {
        if (*((_BYTE *)v51 + 24))
        {
          v18 = sub_10000EF14("piggy");
          v19 = objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "setting initial sync timeout to 5 minutes", buf, 2u);
          }

          v20 = v66[5];
          v21 = 300000000000;
        }
        else
        {
          *(_QWORD *)buf = 10;
          v22 = (const __CFNumber *)CFPreferencesCopyValue(CFSTR("InitialSync.WaitPeriod"), CFSTR("com.apple.security"), kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
          v23 = v22;
          if (v22)
          {
            v24 = CFGetTypeID(v22);
            if (v24 == CFNumberGetTypeID())
              CFNumberGetValue(v23, kCFNumberSInt64Type, buf);
            CFRelease(v23);
            v25 = *(_QWORD *)buf;
          }
          else
          {
            v25 = 10;
          }
          v26 = sub_10000EF14("piggy");
          v27 = objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v25;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "setting initial sync timeout to %llu seconds", buf, 0xCu);
          }

          v20 = v66[5];
          v21 = 1000000000 * v25;
        }
        v28 = dispatch_time(0, v21);
        if (dispatch_semaphore_wait(v20, v28) && *((_BYTE *)v51 + 24))
        {
          v48[0] = _NSConcreteStackBlock;
          v48[1] = 3221225472;
          v48[2] = sub_10020A53C;
          v48[3] = &unk_1002ED048;
          v48[4] = &v59;
          v48[5] = &v65;
          sub_10020199C(v48);
        }
      }
      v76 = SecCoreAnalyticsValue;
      v29 = v56[3];
      v30 = time(0);
      v31 = v30 - v29;
      v32 = 1;
      if (v30 - v29 >= 11)
      {
        v33 = v30 - v29;
        do
        {
          v31 = v33 / 0xA;
          v32 *= 10;
          v34 = v33 > 0x6D;
          v33 /= 0xAuLL;
        }
        while (v34);
      }
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v32 * v31));
      v77 = v35;
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v77, &v76, 1));
      +[SecCoreAnalytics sendEvent:event:](SecCoreAnalytics, "sendEvent:event:", CFSTR("com.apple.security.sos.synccompletion"), v36);

      v37 = sub_10000EF14("initial sync");
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 1;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Finished!: %d", buf, 8u);
      }

    }
    v39 = (const void *)v60[3];
    if (v39)
    {
      v60[3] = 0;
      CFRelease(v39);
    }
    Nanoseconds = _OctagonSignpostGetNanoseconds(v5, v7);
    v41 = _OctagonSignpostLogSystem(Nanoseconds);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    v43 = v42;
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v42))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, OS_SIGNPOST_INTERVAL_END, v5, "SOSCCWaitForInitialSync", " SOSSignpostNameSOSCCWaitForInitialSync=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCWaitForInitialSync}d ", buf, 8u);
    }

    v45 = _OctagonSignpostLogSystem(v44);
    v46 = objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v5;
      v72 = 2048;
      v73 = (double)Nanoseconds / 1000000000.0;
      v74 = 1026;
      v75 = v17;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCWaitForInitialSync  SOSSignpostNameSOSCCWaitForInitialSync=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCWaitForInitialSync}d ", buf, 0x1Cu);
    }

  }
  else
  {
    v17 = 1;
  }
  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(v54, 8);
  _Block_object_dispose(&v55, 8);
  _Block_object_dispose(&v59, 8);
  _Block_object_dispose(v63, 8);
  _Block_object_dispose(&v65, 8);

  return v17;
}

void sub_10020A12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 240), 8);
  _Block_object_dispose((const void *)(v39 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10020A1AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10020A1BC(uint64_t a1)
{

}

uint64_t sub_10020A1C4()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10020A638;
  v2[3] = &unk_1002ED638;
  v2[4] = &v3;
  sub_10020199C(v2);
  v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10020A24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10020A264(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  const __CFBoolean *v5;
  void *v6;
  BOOL v7;
  dispatch_semaphore_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void ***v14;
  const __CFUUID *v15;
  CFStringRef v16;
  const void *v17;
  NSObject *v18;
  void ***v19;
  void *v20;
  void *v21;
  void *v22;
  void ***v23;
  void **v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t buf[4];
  CFStringRef v32;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = sub_1001CA91C(v4, (uint64_t)CFSTR("initialsynctimeout"));

  v5 = *(const __CFBoolean **)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v5)
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = CFBooleanGetValue(v5) != 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v7 = sub_1001DF090(v6, 2);

  if (v7)
  {
    *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = 1;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = time(0);
    v8 = dispatch_semaphore_create(0);
    v9 = *(_QWORD *)(a1[7] + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v25 = _NSConcreteStackBlock;
    v26 = 3221225472;
    v27 = sub_10020A600;
    v28 = &unk_1002ECFF8;
    v12 = a1[7];
    v29 = a1[9];
    v30 = v12;
    v13 = v11;
    v14 = &v25;
    if (sub_1001CA91C(v13, (uint64_t)CFSTR("unsynced")))
    {
      v15 = CFUUIDCreate(kCFAllocatorDefault);
      v16 = CFUUIDCreateString(kCFAllocatorDefault, v15);
      if (v15)
        CFRelease(v15);
      v17 = sub_10000EF14("initial-sync");
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v32 = v16;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "adding sync block [%@] to array!", buf, 0xCu);
      }

      v19 = objc_retainBlock(v14);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "waitForInitialSync_blocks", v25, v26));

      if (!v20)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
        objc_msgSend(v13, "setWaitForInitialSync_blocks:", v21);

      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "waitForInitialSync_blocks"));
      v23 = objc_retainBlock(v19);
      objc_msgSend(v22, "setObject:forKey:", v23, v16);

    }
    else
    {
      ((void (*)(void ***, id))v27)(v14, v13);
      v16 = 0;
    }

    *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = v16;
  }

  return 1;
}

void sub_10020A53C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v9 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "waitForInitialSync_blocks"));

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "waitForInitialSync_blocks"));
    objc_msgSend(v6, "removeObjectForKey:", v4);

    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(void **)(v7 + 40);
    if (!v8)
      return;
    *(_QWORD *)(v7 + 40) = 0;
  }
  else
  {

    v8 = v9;
  }

}

uint64_t sub_10020A600(uint64_t a1)
{
  NSObject *v1;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v1 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v1)
    dispatch_semaphore_signal(v1);
  return 1;
}

void sub_10020A638(uint64_t a1, void *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v3, "SOSMonitorModeSOSIsActive");

}

BOOL sub_10020A680(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL8 v16;
  unint64_t Nanoseconds;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD v25[5];
  uint8_t buf[4];
  os_signpost_id_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  _BOOL4 v31;

  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCAcceptApplicants", " enableTelemetry=YES ", buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCAcceptApplicants  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10020A8DC;
  v25[3] = &unk_1002ECF50;
  v25[4] = a1;
  v16 = sub_100205C98(a2, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
  v18 = _OctagonSignpostLogSystem(Nanoseconds);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  v20 = v19;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v27) = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCAcceptApplicants", " SOSSignpostNameSOSCCAcceptApplicants=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCAcceptApplicants}d ", buf, 8u);
  }

  v22 = _OctagonSignpostLogSystem(v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v27 = v6;
    v28 = 2048;
    v29 = (double)Nanoseconds / 1000000000.0;
    v30 = 1026;
    v31 = v16;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCAcceptApplicants  SOSSignpostNameSOSCCAcceptApplicants=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCAcceptApplicants}d ", buf, 0x1Cu);
  }

  return v16;
}

BOOL sub_10020A8DC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  const __CFArray *v6;
  id v7;
  id v8;
  uint64_t v9;
  _BOOL8 v10;
  _QWORD v12[7];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v6 = *(const __CFArray **)(a1 + 32);
  v7 = v5;
  v8 = sub_1001D6CD8(v7, a3);
  if (v8)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x2020000000;
    v16 = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001CF8E8;
    v12[3] = &unk_1002EB3D8;
    v12[5] = v8;
    v12[6] = a3;
    v12[4] = &v13;
    sub_1001CF92C(v7, (uint64_t)v6, v12);
    v9 = v14[3];
    v10 = v9 == CFArrayGetCount(v6);
    _Block_object_dispose(&v13, 8);
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_10020A9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020A9DC(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL8 v16;
  unint64_t Nanoseconds;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD v25[5];
  uint8_t buf[4];
  os_signpost_id_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  _BOOL4 v31;

  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCAcceptApplicants", " enableTelemetry=YES ", buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCAcceptApplicants  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10020AC38;
  v25[3] = &unk_1002ECF50;
  v25[4] = a1;
  v16 = sub_100205C98(a2, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
  v18 = _OctagonSignpostLogSystem(Nanoseconds);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  v20 = v19;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v27) = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCAcceptApplicants", " SOSSignpostNameSOSCCAcceptApplicants=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCAcceptApplicants}d ", buf, 8u);
  }

  v22 = _OctagonSignpostLogSystem(v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v27 = v6;
    v28 = 2048;
    v29 = (double)Nanoseconds / 1000000000.0;
    v30 = 1026;
    v31 = v16;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCAcceptApplicants  SOSSignpostNameSOSCCAcceptApplicants=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCAcceptApplicants}d ", buf, 0x1Cu);
  }

  return v16;
}

uint64_t sub_10020AC38(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v10[7];
  _QWORD v11[4];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v5;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 1;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v11[3] = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001CFC80;
  v10[3] = &unk_1002EB400;
  v10[5] = v11;
  v10[6] = a3;
  v10[4] = &v12;
  sub_1001CF92C(v7, v6, v10);
  v8 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v12, 8);

  return v8;
}

void sub_10020AD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10020AD3C(CFTypeRef *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10020ADDC;
  v3[3] = &unk_1002ECEE8;
  v3[4] = &v4;
  sub_100202B4C(a1, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10020ADC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020ADDC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001D974C(v5, a3, &stru_1002EBB58);

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_10020AE48(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t Nanoseconds;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  os_signpost_id_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  _BOOL4 v35;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCCopyConcurringPeerPeerInfo", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v31 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCCopyConcurringPeerPeerInfo  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10020B124;
  v25[3] = &unk_1002ECEE8;
  v25[4] = &v26;
  sub_100202B4C(a1, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v15 = _OctagonSignpostLogSystem(Nanoseconds);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    v18 = v27[3] != 0;
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCCopyConcurringPeerPeerInfo", " SOSSignpostNameSOSCCCopyConcurringPeerPeerInfo=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyConcurringPeerPeerInfo}d ", buf, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = v27[3];
    *(_DWORD *)buf = 134218496;
    v31 = v4;
    v32 = 2048;
    v33 = (double)Nanoseconds / 1000000000.0;
    v34 = 1026;
    v35 = v22 != 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCCopyConcurringPeerPeerInfo  SOSSignpostNameSOSCCCopyConcurringPeerPeerInfo=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyConcurringPeerPeerInfo}d ", buf, 0x1Cu);
  }

  v23 = v27[3];
  _Block_object_dispose(&v26, 8);
  return v23;
}

void sub_10020B0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020B124(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001D974C(v5, a3, &stru_1002EBB78);

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_10020B190(CFTypeRef *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10020B230;
  v3[3] = &unk_1002ECEE8;
  v3[4] = &v4;
  sub_100202B4C(a1, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10020B218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020B230(uint64_t a1, void *a2)
{
  void *v3;
  const __CFString *PeerID;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  PeerID = (const __CFString *)SOSPeerInfoGetPeerID(objc_msgSend(v3, "peerInfo"));

  if (PeerID)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFStringCreateCopy(kCFAllocatorDefault, PeerID);
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_10020B2AC(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t Nanoseconds;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  os_signpost_id_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  _BOOL4 v35;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCCopyMyPeerInfo", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v31 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCCopyMyPeerInfo  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10020B588;
  v25[3] = &unk_1002ECEE8;
  v25[4] = &v26;
  sub_100202B4C(a1, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v15 = _OctagonSignpostLogSystem(Nanoseconds);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    v18 = v27[3] != 0;
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCCopyMyPeerInfo", " SOSSignpostNameSOSCCCopyMyPeerInfo=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyMyPeerInfo}d ", buf, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = v27[3];
    *(_DWORD *)buf = 134218496;
    v31 = v4;
    v32 = 2048;
    v33 = (double)Nanoseconds / 1000000000.0;
    v34 = 1026;
    v35 = v22 != 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCCopyMyPeerInfo  SOSSignpostNameSOSCCCopyMyPeerInfo=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyMyPeerInfo}d ", buf, 0x1Cu);
  }

  v23 = v27[3];
  _Block_object_dispose(&v26, 8);
  return v23;
}

void sub_10020B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020B588(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = SOSPeerInfoCreateCopy(kCFAllocatorDefault, objc_msgSend(v5, "peerInfo"), a3);

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_10020B604(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const void *v16;
  NSObject *v17;
  unint64_t Nanoseconds;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[7];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[4];
  os_signpost_id_t v35;
  __int16 v36;
  double v37;
  __int16 v38;
  _BOOL4 v39;

  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCSetNewPublicBackupKey", " enableTelemetry=YES ", buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCSetNewPublicBackupKey  enableTelemetry=YES ", buf, 0xCu);
  }

  v16 = sub_10000EF14("devRecovery");
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "SOSCCSetNewPublicBackupKey_Server acquiring account lock", buf, 2u);
  }

  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10020B934;
  v29[3] = &unk_1002ED070;
  v29[5] = a1;
  v29[6] = a2;
  v29[4] = &v30;
  sub_100205C98(a2, v29);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
  v19 = _OctagonSignpostLogSystem(Nanoseconds);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  v21 = v20;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    v22 = v31[3] != 0;
    *(_DWORD *)buf = 67240192;
    LODWORD(v35) = v22;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCSetNewPublicBackupKey", " SOSSignpostNameSOSCCSetNewPublicBackupKey=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCSetNewPublicBackupKey}d ", buf, 8u);
  }

  v24 = _OctagonSignpostLogSystem(v23);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = v31[3];
    *(_DWORD *)buf = 134218496;
    v35 = v6;
    v36 = 2048;
    v37 = (double)Nanoseconds / 1000000000.0;
    v38 = 1026;
    v39 = v26 != 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCSetNewPublicBackupKey  SOSSignpostNameSOSCCSetNewPublicBackupKey=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCSetNewPublicBackupKey}d ", buf, 0x1Cu);
  }

  v27 = v31[3];
  _Block_object_dispose(&v30, 8);
  return v27;
}

void sub_10020B8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020B934(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const void *v6;
  NSObject *v7;
  int v8;
  const void *v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  const void *v13;
  const char *v14;
  uint8_t *v15;
  _BOOL8 v16;
  __int16 v18;
  __int16 v19;
  uint8_t v20[16];
  uint8_t buf[16];

  v5 = a2;
  v6 = sub_10000EF14("devRecovery");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SOSCCSetNewPublicBackupKey_Server acquired account lock", buf, 2u);
  }

  v8 = sub_1001D2FBC(v5, *(const __CFData **)(a1 + 40), *(_QWORD *)(a1 + 48));
  v9 = sub_10000EF14("devRecovery");
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v11)
    {
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SOSCCSetNewPublicBackupKey_Server, new public backup is set in account", v20, 2u);
    }

    objc_msgSend(v5, "restart");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = SOSPeerInfoCreateCopy(kCFAllocatorDefault, objc_msgSend(v12, "peerInfo"), a3);

    v13 = sub_10000EF14("devRecovery");
    v10 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 0;
      v14 = "SOSCCSetNewPublicBackupKey_Server, new public backup is set and pushed";
      v15 = (uint8_t *)&v19;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v14, v15, 2u);
    }
  }
  else if (v11)
  {
    v18 = 0;
    v14 = "SOSCCSetNewPublicBackupKey_Server, could not set new public backup";
    v15 = (uint8_t *)&v18;
    goto LABEL_10;
  }

  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
  return v16;
}

BOOL sub_10020BAF0(uint64_t a1, char a2, CFTypeRef *a3)
{
  uint64_t v6;
  void *v7;
  os_signpost_id_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _BOOL8 v18;
  unint64_t Nanoseconds;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD v27[6];
  char v28;
  uint8_t buf[4];
  os_signpost_id_t v30;
  __int16 v31;
  double v32;
  __int16 v33;
  _BOOL4 v34;

  v6 = _OctagonSignpostLogSystem(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = _OctagonSignpostCreate();
  v10 = v9;

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = v13;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_BEGIN, v8, "SOSCCRegisterSingleRecoverySecret", " enableTelemetry=YES ", buf, 2u);
  }

  v16 = _OctagonSignpostLogSystem(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCRegisterSingleRecoverySecret  enableTelemetry=YES ", buf, 0xCu);
  }

  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10020BD5C;
  v27[3] = &unk_1002ED090;
  v28 = a2;
  v27[4] = a1;
  v27[5] = a3;
  v18 = sub_100205C98(a3, v27);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v8, v10);
  v20 = _OctagonSignpostLogSystem(Nanoseconds);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  v22 = v21;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v30) = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_INTERVAL_END, v8, "SOSCCRegisterSingleRecoverySecret", " SOSSignpostNameSOSCCRegisterSingleRecoverySecret=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRegisterSingleRecoverySecret}d ", buf, 8u);
  }

  v24 = _OctagonSignpostLogSystem(v23);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v30 = v8;
    v31 = 2048;
    v32 = (double)Nanoseconds / 1000000000.0;
    v33 = 1026;
    v34 = v18;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCRegisterSingleRecoverySecret  SOSSignpostNameSOSCCRegisterSingleRecoverySecret=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRegisterSingleRecoverySecret}d ", buf, 0x1Cu);
  }

  return v18;
}

BOOL sub_10020BD5C(uint64_t a1, void *a2)
{
  void *v3;
  int v4;
  __CFString **v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const __CFDictionary *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  const __CFDictionary *v24;
  OSStatus v25;
  CFMutableDictionaryRef MutableCopy;
  BOOL v27;
  const void *v28;
  NSObject *v29;
  __CFString *v30;
  const void *Direct;
  _BOOL8 v32;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  __int128 context;
  void *v39;
  void *v40;
  CFMutableDictionaryRef v41;
  uint64_t *v42;
  const void *v43;
  __CFString **v44;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v4 = *(unsigned __int8 *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(__CFString ***)(a1 + 40);
  v7 = v3;
  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = 0;
  v8 = (uint64_t)objc_msgSend(v7, "isInCircle:", v5);
  if ((v8 & 1) != 0)
  {
    if (v4)
    {
      v16 = sub_1001D2200(v8, v9, v10, v11, v12, v13, v14, v15);
      v24 = sub_10012E96C(kCFAllocatorDefault, v17, v18, v19, v20, v21, v22, v23, (uint64_t)kSecValueData, v6);
      v25 = SecItemUpdate(v16, v24);
      if (v25 == -25300)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v16);
        *(_QWORD *)&context = _NSConcreteStackBlock;
        *((_QWORD *)&context + 1) = 3221225472;
        v39 = sub_1001D3348;
        v40 = &unk_1002ECD08;
        v41 = MutableCopy;
        CFDictionaryApplyFunction(v24, (CFDictionaryApplierFunction)sub_1001D3350, &context);
        v25 = SecItemAdd(MutableCopy, 0);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
      v27 = sub_100019F20(v25, v5, CFSTR("Error saving %@"), v16);
      if (v16)
        CFRelease(v16);
      if (v24)
        CFRelease(v24);
      *((_BYTE *)v35 + 24) = v27;
      if (!v27)
      {
        v28 = sub_10000EF14("keybag");
        v29 = objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          v30 = *v5;
          LODWORD(context) = 138412290;
          *(_QWORD *)((char *)&context + 4) = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "failed to set V0 keybag (%@)", (uint8_t *)&context, 0xCu);
        }

      }
    }
    else
    {
      *((_BYTE *)v35 + 24) = 1;
      Direct = (const void *)SOSBackupSliceKeyBagCreateDirect(kCFAllocatorDefault, v6, v5);
      *(_QWORD *)&context = _NSConcreteStackBlock;
      *((_QWORD *)&context + 1) = 3221225472;
      v39 = sub_1001D3368;
      v40 = &unk_1002EB8B8;
      v42 = &v34;
      v41 = (CFMutableDictionaryRef)v7;
      v43 = Direct;
      v44 = v5;
      sub_1001D29C4(v41, &context);

      if (Direct)
        CFRelease(Direct);
    }
  }
  v32 = *((_BYTE *)v35 + 24) != 0;
  _Block_object_dispose(&v34, 8);

  return v32;
}

void sub_10020C010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10020C034(CFTypeRef *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10020C0D4;
  v3[3] = &unk_1002ECEE8;
  v3[4] = &v4;
  sub_100202B4C(a1, v3);
  v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10020C0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020C0D4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  unsigned int v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
  v5 = objc_msgSend(v4, "departureCode");

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

BOOL sub_10020C144(int a1, CFTypeRef *a2)
{
  _QWORD v3[4];
  int v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10020C19C;
  v3[3] = &unk_1002ECD88;
  v4 = a1;
  return sub_100202B4C(a2, v3);
}

uint64_t sub_10020C19C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v4 = *(unsigned int *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
  objc_msgSend(v5, "setDepartureCode:", v4);

  return 1;
}

BOOL sub_10020C1F4(CFTypeRef *a1)
{
  const void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  os_signpost_id_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL8 v17;
  unint64_t Nanoseconds;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v26;
  os_signpost_id_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  _BOOL4 v31;

  v2 = sub_10000EF14("updates");
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v26) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Request for registering peers", (uint8_t *)&v26, 2u);
  }

  v5 = _OctagonSignpostLogSystem(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = _OctagonSignpostCreate();
  v9 = v8;

  v11 = _OctagonSignpostLogSystem(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    LOWORD(v26) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SOSCCProcessEnsurePeerRegistration", " enableTelemetry=YES ", (uint8_t *)&v26, 2u);
  }

  v15 = _OctagonSignpostLogSystem(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v26 = 134217984;
    v27 = v7;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCProcessEnsurePeerRegistration  enableTelemetry=YES ", (uint8_t *)&v26, 0xCu);
  }

  v17 = sub_100205C98(a1, &stru_1002ED0B0);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v7, v9);
  v19 = _OctagonSignpostLogSystem(Nanoseconds);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  v21 = v20;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    v26 = 67240192;
    LODWORD(v27) = v17;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v7, "SOSCCProcessEnsurePeerRegistration", " SOSSignpostNameSOSCCProcessEnsurePeerRegistration=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCProcessEnsurePeerRegistration}d ", (uint8_t *)&v26, 8u);
  }

  v23 = _OctagonSignpostLogSystem(v22);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v26 = 134218496;
    v27 = v7;
    v28 = 2048;
    v29 = (double)Nanoseconds / 1000000000.0;
    v30 = 1026;
    v31 = v17;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCProcessEnsurePeerRegistration  SOSSignpostNameSOSCCProcessEnsurePeerRegistration=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCProcessEnsurePeerRegistration}d ", (uint8_t *)&v26, 0x1Cu);
  }

  return v17;
}

BOOL sub_10020C46C(id a1, SOSAccountTransaction *a2, __CFError **a3)
{
  SOSAccountTransaction *v3;
  void *v4;
  unsigned int v5;
  void *v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v3, "account"));
  v5 = objc_msgSend(v4, "SOSMonitorModeSOSIsActive");

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v3, "account"));
    sub_1001CFD08(v6);

  }
  return 1;
}

uint64_t sub_10020C4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD block[9];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  CFMutableSetRef v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  CFMutableSetRef Mutable;

  if (!sub_10020A1C4())
    return 0;
  if (qword_100341688 != -1)
    dispatch_once(&qword_100341688, &stru_1002ED0D0);
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  Mutable = (CFMutableSetRef)0xAAAAAAAAAAAAAAAALL;
  Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = (CFMutableSetRef)0xAAAAAAAAAAAAAAAALL;
  v12 = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  if (!a1)
  {
    a1 = v10[3];
    if (a2)
      goto LABEL_6;
LABEL_10:
    a2 = v10[3];
    goto LABEL_6;
  }
  if (!a2)
    goto LABEL_10;
LABEL_6:
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10020C660;
  block[3] = &unk_1002ED120;
  block[6] = a1;
  block[7] = a2;
  block[8] = a3;
  block[4] = &v13;
  block[5] = &v9;
  dispatch_sync((dispatch_queue_t)qword_100341680, block);
  v6 = v14[3];
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  return v6;
}

void sub_10020C648(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10020C660(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  CFIndex Count;
  uint64_t v15;
  CFTypeRef *v16;
  const __CFSet *v17;
  const __CFSet *v18;
  uint64_t v19;
  const __CFSet *v20;
  const __CFSet *v21;
  uint64_t v22;
  unint64_t Nanoseconds;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  CFIndex v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  CFIndex v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  const void *v35;
  _QWORD v36[4];
  int8x16_t v37;
  _QWORD v38[4];
  int8x16_t v39;
  _BYTE buf[24];
  void *v41;
  __int128 v42;
  uint64_t v43;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCProcessSyncWithPeers", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCProcessSyncWithPeers  enableTelemetry=YES ", buf, 0xCu);
  }

  Count = CFSetGetCount(*(CFSetRef *)(a1 + 48));
  if (CFSetGetCount(*(CFSetRef *)(a1 + 56)) + Count > 6)
  {
    v17 = *(const __CFSet **)(a1 + 56);
    if (v17 && CFSetGetCount(v17))
    {
      v18 = *(const __CFSet **)(a1 + 56);
      v19 = *(_QWORD *)(a1 + 64);
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_10020CD10;
      v38[3] = &unk_1002ED0F8;
      v39 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
      sub_10020CD7C(v18, v19, v38);
    }
    v20 = *(const __CFSet **)(a1 + 48);
    if (v20 && CFSetGetCount(v20))
    {
      v21 = *(const __CFSet **)(a1 + 48);
      v22 = *(_QWORD *)(a1 + 64);
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472;
      v36[2] = sub_10020CF34;
      v36[3] = &unk_1002ED0F8;
      v37 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
      sub_10020CD7C(v21, v22, v36);
    }
  }
  else
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v16 = *(CFTypeRef **)(a1 + 64);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_10020CA10;
    v41 = &unk_1002ED770;
    v42 = *(_OWORD *)(a1 + 48);
    v43 = v15;
    sub_100205C98(v16, buf);
  }
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v24 = _OctagonSignpostLogSystem(Nanoseconds);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  v26 = v25;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
  {
    v27 = CFSetGetCount(*(CFSetRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v27 != 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCProcessSyncWithPeers", " SOSSignpostNameSOSCCProcessSyncWithPeers=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCProcessSyncWithPeers}d ", buf, 8u);
  }

  v29 = _OctagonSignpostLogSystem(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    v31 = CFSetGetCount(*(CFSetRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)Nanoseconds / 1000000000.0;
    *(_WORD *)&buf[22] = 1026;
    LODWORD(v41) = v31 != 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCProcessSyncWithPeers  SOSSignpostNameSOSCCProcessSyncWithPeers=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCProcessSyncWithPeers}d ", buf, 0x1Cu);
  }

  if (!CFSetGetCount(*(CFSetRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)))
  {
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v33 = *(const void **)(v32 + 24);
    if (v33)
    {
      *(_QWORD *)(v32 + 24) = 0;
      CFRelease(v33);
    }
  }
  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v35 = *(const void **)(v34 + 24);
  if (v35)
  {
    *(_QWORD *)(v34 + 24) = 0;
    CFRelease(v35);
  }
}

uint64_t sub_10020CA10(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  const __CFSet *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t (*__ptr32 *v12)();
  const __CFSet *Mutable;
  const void *v14;
  NSObject *v15;
  CFTypeRef v16;
  void *v17;
  id v18;
  const __CFSet *v19;
  const __CFSet *v20;
  const void *v21;
  NSObject *v22;
  CFTypeRef v23;
  const __CFSet *v24;
  uint64_t v25;
  CFTypeRef cf;
  __int128 buf;
  void (*v29)(uint64_t, const void *);
  void *v30;
  const __CFSet *v31;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v7 = objc_msgSend(v6, "SOSMonitorModeSOSIsActive");

  if (v7)
  {
    v8 = (const __CFSet *)a1[4];
    v9 = a1[5];
    v10 = v5;
    cf = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "account"));
    v12 = &off_100248000;
    if ((sub_1001D523C(v11, a3) & 1) != 0)
    {
      Mutable = sub_1001D57C8(v10, v8, (uint64_t)&cf);
      if (!Mutable)
      {
        v14 = sub_10000EF14("account-sync");
        v15 = objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = cf;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Peer Sync failed: %@", (uint8_t *)&buf, 0xCu);
        }

        Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
      }
      v16 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v16);
      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "kvs_message_transport"));
      v18 = objc_msgSend(v17, "SOSTransportMessageGetEngine");

      v19 = sub_100102A80((uint64_t)v18, v9, 0, a3);
      v20 = v19;
      if (v19)
      {
        *(_QWORD *)&buf = _NSConcreteStackBlock;
        v12 = &off_100248000;
        *((_QWORD *)&buf + 1) = 3221225472;
        v29 = sub_1001D5B50;
        v30 = &unk_1002EDB28;
        v31 = Mutable;
        CFSetApplyFunction(v19, (CFSetApplierFunction)sub_1001D57B4, &buf);
      }
      else
      {
        v21 = sub_10000EF14("account-sync");
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = cf;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Engine Backup Sync failed: %@", (uint8_t *)&buf, 0xCu);
        }

        v12 = &off_100248000;
      }
      v23 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v23);
      }
      if (v20)
        CFRelease(v20);
    }
    else
    {
      Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
    }

    v24 = (const __CFSet *)a1[6];
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = *((_QWORD *)v12 + 495);
    v29 = sub_10020D04C;
    v30 = &unk_1002EDB28;
    v31 = v24;
    CFSetApplyFunction(Mutable, (CFSetApplierFunction)sub_100201FDC, &buf);
    if (!Mutable)
    {
      v25 = 0;
      goto LABEL_22;
    }
    CFRelease(Mutable);
  }
  v25 = 1;
LABEL_22:

  return v25;
}

BOOL sub_10020CD10(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[7];

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10020CA10;
  v6[3] = &unk_1002ED770;
  v6[4] = v3;
  v6[5] = a2;
  v6[6] = v4;
  return sub_100205C98(a3, v6);
}

void sub_10020CD7C(const __CFSet *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  char v7;
  char v8;
  const void *v9;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  CFMutableSetRef Mutable;
  _QWORD v21[4];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;

  v5 = a3;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 1;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  v21[3] = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  Mutable = (CFMutableSetRef)0xAAAAAAAAAAAAAAAALL;
  Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10020CFA0;
  v10[3] = &unk_1002ED798;
  v12 = &v17;
  v13 = v21;
  v14 = &v22;
  v15 = 7;
  v6 = v5;
  v11 = v6;
  v16 = a2;
  CFSetApplyFunction(a1, (CFSetApplierFunction)sub_100201FDC, v10);
  if (CFSetGetCount((CFSetRef)v18[3]))
  {
    v7 = (*((uint64_t (**)(id, uint64_t, uint64_t))v6 + 2))(v6, v18[3], a2);
    if (*((_BYTE *)v23 + 24))
      v8 = v7;
    else
      v8 = 0;
    *((_BYTE *)v23 + 24) = v8;
  }
  v9 = (const void *)v18[3];
  if (v9)
  {
    v18[3] = 0;
    CFRelease(v9);
  }

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  _Block_object_dispose(&v22, 8);

}

void sub_10020CEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020CF34(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[7];

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10020CA10;
  v6[3] = &unk_1002ED770;
  v6[4] = a2;
  v6[5] = v3;
  v6[6] = v4;
  return sub_100205C98(a3, v6);
}

void sub_10020CFA0(_QWORD *a1, const void *a2)
{
  char v3;
  uint64_t v4;
  char v5;

  CFSetAddValue(*(CFMutableSetRef *)(*(_QWORD *)(a1[5] + 8) + 24), a2);
  if (++*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) >= a1[8])
  {
    v3 = (*(uint64_t (**)(void))(a1[4] + 16))();
    v4 = *(_QWORD *)(a1[7] + 8);
    if (*(_BYTE *)(v4 + 24))
      v5 = v3;
    else
      v5 = 0;
    *(_BYTE *)(v4 + 24) = v5;
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
    CFSetRemoveAllValues(*(CFMutableSetRef *)(*(_QWORD *)(a1[5] + 8) + 24));
  }
}

void sub_10020D04C(uint64_t a1, const void *a2)
{
  CFSetSetValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

void sub_10020D054(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("syncWithPeers", 0);
  v2 = (void *)qword_100341680;
  qword_100341680 = (uint64_t)v1;

}

uint64_t sub_10020D080(CFErrorRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const void *v14;
  NSObject *v15;
  CFTypeRef v16;
  uint64_t v17;
  unint64_t Nanoseconds;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const void *v26;
  NSObject *v27;
  __CFError *v28;
  CFErrorRef v29;
  CFTypeRef cf;
  uint8_t buf[4];
  os_signpost_id_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  int v36;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCProcessSyncWithAllPeers", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v32 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCProcessSyncWithAllPeers  enableTelemetry=YES ", buf, 0xCu);
  }

  cf = 0;
  if (sub_100205C98(&cf, &stru_1002ED140) || !cf)
  {
    v17 = 1;
  }
  else
  {
    if (SecErrorGetOSStatus(cf) == -25308)
    {
      v14 = sub_10000EF14("updates");
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SOSAccountSyncWithAllKVSPeers failed because device is locked; letting CloudKeychainProxy know",
          buf,
          2u);
      }

      v16 = cf;
      if (!cf)
      {
        v17 = 2;
        goto LABEL_14;
      }
      cf = 0;
      CFRelease(v16);
      v17 = 2;
    }
    else
    {
      v26 = sub_10000EF14("SecError");
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v32 = (os_signpost_id_t)cf;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Unexpected error: %@", buf, 0xCu);
      }

      v17 = 1;
    }
    v28 = (__CFError *)cf;
    if (a1 && cf)
    {
      if (!*a1)
        goto LABEL_33;
      if (CFErrorGetCode(*a1) == -25330)
      {
        v29 = *a1;
        if (!*a1)
          goto LABEL_33;
        *a1 = 0;
        CFRelease(v29);
      }
LABEL_31:
      if (*a1)
        goto LABEL_32;
LABEL_33:
      *a1 = v28;
      goto LABEL_14;
    }
    if (cf)
    {
      if (!a1)
      {
LABEL_32:
        CFRelease(v28);
        goto LABEL_14;
      }
      goto LABEL_31;
    }
  }
LABEL_14:
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v19 = _OctagonSignpostLogSystem(Nanoseconds);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  v21 = v20;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v32) = v17;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCProcessSyncWithAllPeers", " SOSSignpostNameSOSCCProcessSyncWithAllPeers=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCProcessSyncWithAllPeers}d ", buf, 8u);
  }

  v23 = _OctagonSignpostLogSystem(v22);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v32 = v4;
    v33 = 2048;
    v34 = (double)Nanoseconds / 1000000000.0;
    v35 = 1026;
    v36 = v17;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCProcessSyncWithAllPeers  SOSSignpostNameSOSCCProcessSyncWithAllPeers=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCProcessSyncWithAllPeers}d ", buf, 0x1Cu);
  }

  return v17;
}

BOOL sub_10020D3F4(id a1, SOSAccountTransaction *a2, __CFError **a3)
{
  SOSAccountTransaction *v4;
  void *v5;
  unsigned int v6;
  unsigned __int8 v7;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](v4, "account"));
  v6 = objc_msgSend(v5, "SOSMonitorModeSOSIsActive");

  if (v6)
    v7 = sub_1001D5C2C(v4, (uint64_t)a3);
  else
    v7 = 0;

  return v7;
}

void sub_10020D45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFArrayRef v8;
  _QWORD activity_block[5];

  v8 = sub_100139AC4(kCFAllocatorDefault, a2, a3, a4, a5, a6, a7, a8, a1);
  activity_block[0] = _NSConcreteStackBlock;
  activity_block[1] = 3221225472;
  activity_block[2] = sub_100202158;
  activity_block[3] = &unk_1002ED1A0;
  activity_block[4] = v8;
  _os_activity_initiate((void *)&_mh_execute_header, "CloudCircle RequestSyncWithPeersList", OS_ACTIVITY_FLAG_DEFAULT, activity_block);
  if (v8)
    CFRelease(v8);
}

void sub_10020D4FC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFArrayRef v21;
  uint64_t v22;
  dispatch_queue_global_t global_queue;
  void *v24;
  unint64_t Nanoseconds;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint8_t buf[4];
  os_signpost_id_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCRequestSyncWithBackupPeerList", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v33 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCRequestSyncWithBackupPeerList  enableTelemetry=YES ", buf, 0xCu);
  }

  v21 = sub_100139AC4(kCFAllocatorDefault, v14, v15, v16, v17, v18, v19, v20, 0);
  sub_10002FCF4(*(const __CFArray **)(a1 + 32), CFSTR("["), CFSTR("]"), (uint64_t)&stru_1002ED1C0);
  v22 = *(_QWORD *)(a1 + 32);
  global_queue = dispatch_get_global_queue(-32768, 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  SOSCloudKeychainRequestSyncWithPeers(v21, v22, v24, 0);

  if (v21)
    CFRelease(v21);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v26 = _OctagonSignpostLogSystem(Nanoseconds);
  v27 = objc_claimAutoreleasedReturnValue(v26);
  v28 = v27;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v27))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v33) = 1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCRequestSyncWithBackupPeerList", " SOSSignpostNameSOSCCRequestSyncWithBackupPeerList=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRequestSyncWithBackupPeerList}d ", buf, 8u);
  }

  v30 = _OctagonSignpostLogSystem(v29);
  v31 = objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v33 = v4;
    v34 = 2048;
    v35 = (double)Nanoseconds / 1000000000.0;
    v36 = 1026;
    v37 = 1;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCRequestSyncWithBackupPeerList  SOSSignpostNameSOSCCRequestSyncWithBackupPeerList=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRequestSyncWithBackupPeerList}d ", buf, 0x1Cu);
  }

}

void sub_10020D78C(id a1, __CFString *a2)
{
  const void *v3;
  NSObject *v4;
  int v5;
  __CFString *v6;

  v3 = sub_10000EF14("syncwith");
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request backup sync With: %@", (uint8_t *)&v5, 0xCu);
  }

}

void sub_10020D834(id a1)
{
  uint64_t v1;
  void *v2;
  os_signpost_id_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  dispatch_queue_global_t global_queue;
  void *v14;
  unint64_t Nanoseconds;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  os_signpost_id_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  int v27;

  v1 = _OctagonSignpostLogSystem(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = _OctagonSignpostCreate();
  v5 = v4;

  v7 = _OctagonSignpostLogSystem(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    LOWORD(v22) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_BEGIN, v3, "SOSCCEnsurePeerRegistration", " enableTelemetry=YES ", (uint8_t *)&v22, 2u);
  }

  v11 = _OctagonSignpostLogSystem(v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v22 = 134217984;
    v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCEnsurePeerRegistration  enableTelemetry=YES ", (uint8_t *)&v22, 0xCu);
  }

  global_queue = dispatch_get_global_queue(-32768, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  SOSCloudKeychainRequestEnsurePeerRegistration(v14, 0);

  Nanoseconds = _OctagonSignpostGetNanoseconds(v3, v5);
  v16 = _OctagonSignpostLogSystem(Nanoseconds);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = v17;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    v22 = 67240192;
    LODWORD(v23) = 1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v3, "SOSCCEnsurePeerRegistration", " SOSSignpostNameSOSCCEnsurePeerRegistration=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCEnsurePeerRegistration}d ", (uint8_t *)&v22, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = 134218496;
    v23 = v3;
    v24 = 2048;
    v25 = (double)Nanoseconds / 1000000000.0;
    v26 = 1026;
    v27 = 1;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCEnsurePeerRegistration  SOSSignpostNameSOSCCEnsurePeerRegistration=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCEnsurePeerRegistration}d ", (uint8_t *)&v22, 0x1Cu);
  }

}

uint64_t sub_10020DA64(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t Nanoseconds;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  os_signpost_id_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  _BOOL4 v35;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCCopyApplication", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v31 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCCopyApplication  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10020DD40;
  v25[3] = &unk_1002ECEE8;
  v25[4] = &v26;
  sub_100205C98(a1, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v15 = _OctagonSignpostLogSystem(Nanoseconds);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    v18 = v27[3] != 0;
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCCopyApplication", " SOSSignpostNameSOSCCCopyApplication=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyApplication}d ", buf, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = v27[3];
    *(_DWORD *)buf = 134218496;
    v31 = v4;
    v32 = 2048;
    v33 = (double)Nanoseconds / 1000000000.0;
    v34 = 1026;
    v35 = v22 != 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCCopyApplication  SOSSignpostNameSOSCCCopyApplication=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyApplication}d ", buf, 0x1Cu);
  }

  v23 = v27[3];
  _Block_object_dispose(&v26, 8);
  return v23;
}

void sub_10020DD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020DD40(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001CC9D8(v5, a3);

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

BOOL sub_10020DDA4(CFTypeRef *a1)
{
  _BOOL8 v2;
  _BOOL8 v3;
  CFTypeRef v4;

  v2 = sub_100205C98(a1, &stru_1002ED200);
  v3 = v2;
  if (a1)
  {
    if (v2)
    {
      v4 = *a1;
      if (*a1)
      {
        *a1 = 0;
        CFRelease(v4);
      }
    }
  }
  return v3;
}

BOOL sub_10020DDEC(id a1, SOSAccountTransaction *a2, __CFError **a3)
{
  void *v4;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](a2, "account"));
  sub_1001D0198(v4, (uint64_t *)a3);

  return 1;
}

uint64_t sub_10020DE28(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  unint64_t Nanoseconds;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[6];
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t buf[4];
  os_signpost_id_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  _BOOL4 v37;

  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v31 = 0;
  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCCopyCircleJoiningBlob", " enableTelemetry=YES ", buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v33 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCCopyCircleJoiningBlob  enableTelemetry=YES ", buf, 0xCu);
  }

  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10020E108;
  v27[3] = &unk_1002ED228;
  v27[4] = &v28;
  v27[5] = a1;
  sub_100205C98(a2, v27);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
  v17 = _OctagonSignpostLogSystem(Nanoseconds);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  v19 = v18;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    v20 = v29[3] != 0;
    *(_DWORD *)buf = 67240192;
    LODWORD(v33) = v20;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCCopyCircleJoiningBlob", " SOSSignpostNameSOSCCCopyCircleJoiningBlob=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyCircleJoiningBlob}d ", buf, 8u);
  }

  v22 = _OctagonSignpostLogSystem(v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v24 = v29[3];
    *(_DWORD *)buf = 134218496;
    v33 = v6;
    v34 = 2048;
    v35 = (double)Nanoseconds / 1000000000.0;
    v36 = 1026;
    v37 = v24 != 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCCopyCircleJoiningBlob  SOSSignpostNameSOSCCCopyCircleJoiningBlob=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyCircleJoiningBlob}d ", buf, 0x1Cu);
  }

  v25 = v29[3];
  _Block_object_dispose(&v28, 8);
  return v25;
}

void sub_10020E0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020E108(uint64_t a1, void *a2, uint64_t *a3)
{
  void *v5;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_1001CB76C(v5, 0, 0, 0, 0, *(_QWORD *)(a1 + 40), a3);

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_10020E180(uint64_t a1, CFTypeRef *a2)
{
  int v3;
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  unint64_t Nanoseconds;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[5];
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  os_signpost_id_t v34;
  __int16 v35;
  double v36;
  __int16 v37;
  _BOOL4 v38;

  v3 = a1;
  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = 0;
  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCCopyInitialSyncData", " enableTelemetry=YES ", buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v34 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCCopyInitialSyncData  enableTelemetry=YES ", buf, 0xCu);
  }

  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10020E464;
  v27[3] = &unk_1002ED250;
  v27[4] = &v29;
  v28 = v3;
  sub_100205C98(a2, v27);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
  v17 = _OctagonSignpostLogSystem(Nanoseconds);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  v19 = v18;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    v20 = v30[3] != 0;
    *(_DWORD *)buf = 67240192;
    LODWORD(v34) = v20;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCCopyInitialSyncData", " SOSSignpostNameSOSCCCopyInitialSyncData=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyInitialSyncData}d ", buf, 8u);
  }

  v22 = _OctagonSignpostLogSystem(v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v24 = v30[3];
    *(_DWORD *)buf = 134218496;
    v34 = v6;
    v35 = 2048;
    v36 = (double)Nanoseconds / 1000000000.0;
    v37 = 1026;
    v38 = v24 != 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCCopyInitialSyncData  SOSSignpostNameSOSCCCopyInitialSyncData=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyInitialSyncData}d ", buf, 0x1Cu);
  }

  v25 = v30[3];
  _Block_object_dispose(&v29, 8);
  return v25;
}

void sub_10020E42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020E464(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  int v6;
  void *v7;
  id v8;
  const __CFArray *Mutable;
  void *v10;
  const void *v11;
  NSObject *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex i;
  const void *ValueAtIndex;
  void *v17;
  void *v18;
  void *v19;
  const __CFDictionary *v20;
  CFTypeRef v21;
  const __CFDictionary *v22;
  CFTypeRef v23;
  const void *v24;
  NSObject *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *j;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  unsigned int v38;
  __CFString *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  UInt8 *v49;
  char *v50;
  unsigned int v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  NSObject *v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  void *k;
  void *v70;
  NSMutableData *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const void *v80;
  NSObject *v81;
  unsigned int v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const void *v90;
  NSObject *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  NSMutableData *v95;
  id v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  id v103;
  id v104;
  id v106;
  void *v107;
  uint64_t v108;
  id v109;
  id obj;
  id v111;
  id v112;
  uint64_t v113;
  void *v114;
  void *v115;
  id v116;
  void *v117;
  uint8_t v118[4];
  unsigned int v119;
  CFTypeRef result[2];
  uint8_t v121[16];
  __int128 v122;
  __int128 v123;
  unsigned __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  unsigned __int128 v128;
  uint8_t v129[32];
  __int128 v130;
  __int128 v131;
  __int128 buf;
  void (*v133)(uint64_t, const void *);
  const __CFString *v134;
  CFBooleanRef v135;
  CFStringRef v136;
  void *v137;
  void *v138;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v108 = a1;
  v6 = *(_DWORD *)(a1 + 40);
  v109 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if ((v6 & 4) != 0)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    sub_1001D0D50(v18, v19, 1);

  }
  else
  {
    if ((v6 & 2) != 0)
    {
      v8 = v109;
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "trust"));

      *(_QWORD *)&buf = _NSConcreteStackBlock;
      *((_QWORD *)&buf + 1) = 3221225472;
      v133 = sub_1001D188C;
      v134 = (const __CFString *)&unk_1002EC3A0;
      v135 = Mutable;
      SOSCircleForEachActivePeer(objc_msgSend(v10, "trustedCircle"), &buf);

      v11 = sub_10000EF14("piggy");
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = Mutable;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "identities: %@", (uint8_t *)&buf, 0xCu);
      }

      Count = CFArrayGetCount(Mutable);
      if (Count >= 1)
      {
        v14 = Count;
        for (i = 0; i != v14; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
          v17 = (void *)SOSPeerInfoCopyData(ValueAtIndex, a3);
          if (v17)
            objc_msgSend(v7, "addObject:", v17);

        }
      }
      CFRelease(Mutable);
    }
    if ((v6 & 1) != 0)
    {
      result[0] = 0;
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
      sub_1001D0D50(v18, v115, 0);
      *(_QWORD *)v121 = kSecClass;
      *(_QWORD *)&v121[8] = kSecUseDataProtectionKeychain;
      *(_QWORD *)&buf = kSecClassInternetPassword;
      *((_QWORD *)&buf + 1) = &__kCFBooleanTrue;
      *(_QWORD *)&v122 = kSecAttrAccessGroup;
      *((_QWORD *)&v122 + 1) = kSecAttrDescription;
      v133 = (void (*)(uint64_t, const void *))CFSTR("com.apple.security.ckks");
      v134 = CFSTR("tlk");
      *(_QWORD *)&v123 = kSecAttrSynchronizable;
      *((_QWORD *)&v123 + 1) = kSecMatchLimit;
      v135 = kCFBooleanTrue;
      v136 = kSecMatchLimitAll;
      v124 = __PAIR128__((unint64_t)kSecReturnData, (unint64_t)kSecReturnAttributes);
      v137 = &__kCFBooleanTrue;
      v138 = &__kCFBooleanTrue;
      v20 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &buf, v121, 8));
      if (!SecItemCopyMatching(v20, result))
        sub_1001D118C(v18, (void *)result[0], v115);
      v21 = result[0];
      if (result[0])
      {
        result[0] = 0;
        CFRelease(v21);
      }
      *(_QWORD *)&v125 = kSecClass;
      *((_QWORD *)&v125 + 1) = kSecUseDataProtectionKeychain;
      *(_QWORD *)v129 = kSecClassInternetPassword;
      *(_QWORD *)&v126 = kSecAttrAccessGroup;
      *((_QWORD *)&v126 + 1) = kSecAttrDescription;
      *(_QWORD *)&v129[8] = &__kCFBooleanTrue;
      *(_QWORD *)&v129[16] = CFSTR("com.apple.security.ckks");
      *(_QWORD *)&v129[24] = CFSTR("tlk-piggy");
      *(_QWORD *)&v127 = kSecAttrSynchronizable;
      *((_QWORD *)&v127 + 1) = kSecMatchLimit;
      *(_QWORD *)&v130 = kSecAttrSynchronizableAny;
      *((_QWORD *)&v130 + 1) = kSecMatchLimitAll;
      v128 = __PAIR128__((unint64_t)kSecReturnData, (unint64_t)kSecReturnAttributes);
      *(_QWORD *)&v131 = &__kCFBooleanTrue;
      *((_QWORD *)&v131 + 1) = &__kCFBooleanTrue;
      v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v129, &v125, 8));

      if (!SecItemCopyMatching(v22, result))
        sub_1001D118C(v18, (void *)result[0], v115);
      v23 = result[0];
      if (result[0])
      {
        result[0] = 0;
        CFRelease(v23);
      }
      v24 = sub_10000EF14("piggy");
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v118 = 67109120;
        v119 = objc_msgSend(v18, "count");
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Found %d TLKs", v118, 8u);
      }

    }
    else
    {
      v18 = 0;
    }
  }
  v26 = v7;
  v27 = v18;
  v106 = v26;
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v107 = v27;
  v29 = objc_msgSend(v27, "mutableCopy");
  objc_msgSend(v29, "sortUsingComparator:", &stru_1002EB4B8);
  v123 = 0u;
  v124 = 0u;
  *(_OWORD *)v121 = 0u;
  v122 = 0u;
  v30 = v29;
  v116 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", v121, &buf, 16);
  if (v116)
  {
    v113 = *(_QWORD *)v122;
    obj = v30;
    while (2)
    {
      for (j = 0; j != v116; j = (char *)j + 1)
      {
        if (*(_QWORD *)v122 != v113)
          objc_enumerationMutation(obj);
        v32 = *(void **)(*(_QWORD *)&v121[8] + 8 * (_QWORD)j);
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", kSecValueData));
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", kSecAttrServer));
        v35 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", kSecAttrAccount));
        v36 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v35);

        memset(v129, 170, 16);
        objc_msgSend(v36, "getUUIDBytes:", v129);
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v129, 16));

        v38 = sub_1001D1608(v34);
        v39 = v34;
        v40 = v37;
        v41 = objc_msgSend(v33, "length");
        v42 = objc_msgSend(v40, "length");

        if (v38)
          v43 = ccder_sizeof_uint64(v38);
        else
          v43 = sub_100020F24(v39);
        v44 = v43;
        v45 = ccder_sizeof(4, v42);
        v46 = ccder_sizeof(4, v41);
        v47 = ccder_sizeof(0x2000000000000010, v45 + v44 + v46);

        v48 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v47)));
        v49 = (UInt8 *)objc_msgSend(v48, "mutableBytes");
        v50 = (char *)objc_msgSend(v48, "length") + (_QWORD)v49;
        v51 = sub_1001D1608(v39);
        if (v51)
        {
          v52 = v51;
          v53 = v33;
          v54 = v40;
          v55 = ccder_encode_uint64(v52);
        }
        else
        {
          v56 = v33;
          v57 = v40;
          v55 = sub_1000205A8(v39, 0, v49, (uint64_t)v50, v58);
        }
        v59 = sub_1001D169C(v40, (uint64_t)v49, v55);

        v60 = sub_1001D169C(v33, (uint64_t)v49, v59);
        if (!ccder_encode_constructed_tl(0x2000000000000010, v50, v49, v60))
        {

          v30 = obj;
          v111 = 0;
          goto LABEL_43;
        }
        v61 = sub_10000EF14("piggy");
        v62 = objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v129 = 138412546;
          *(_QWORD *)&v129[4] = v39;
          *(_WORD *)&v129[12] = 2112;
          *(_QWORD *)&v129[14] = v35;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "preparing TLK in order: %@: %@", v129, 0x16u);
        }

        objc_msgSend(v28, "addObject:", v48);
      }
      v30 = obj;
      v116 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v121, &buf, 16);
      if (v116)
        continue;
      break;
    }
  }

  v111 = v28;
LABEL_43:

  v63 = v106;
  v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  *(_OWORD *)v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v65 = v63;
  v66 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", v121, &buf, 16);
  if (v66)
  {
    v67 = v66;
    v68 = *(_QWORD *)v122;
    do
    {
      for (k = 0; k != v67; k = (char *)k + 1)
      {
        if (*(_QWORD *)v122 != v68)
          objc_enumerationMutation(v65);
        v70 = *(void **)(*(_QWORD *)&v121[8] + 8 * (_QWORD)k);
        v71 = +[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", ccder_sizeof_raw_octet_string(objc_msgSend(v70, "length")));
        v72 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v71));
        v73 = objc_msgSend(v72, "mutableBytes");
        ccder_encode_raw_octet_string(objc_msgSend(v70, "length"), objc_msgSend(objc_retainAutorelease(v70), "bytes"), v73, (char *)objc_msgSend(v72, "length") + (_QWORD)v73);
        objc_msgSend(v64, "addObject:", v72);

      }
      v67 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", v121, &buf, 16);
    }
    while (v67);
  }

  v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  memset(v129, 0, sizeof(v129));
  v130 = 0u;
  v131 = 0u;
  v112 = v111;
  v74 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", v129, &buf, 16);
  if (v74)
  {
    v75 = v74;
    v76 = 0;
    v77 = **(_QWORD **)&v129[16];
LABEL_52:
    v78 = 0;
    while (1)
    {
      if (**(_QWORD **)&v129[16] != v77)
        objc_enumerationMutation(v112);
      v79 = *(void **)(*(_QWORD *)&v129[8] + 8 * v78);
      if (500 - v76 < (unint64_t)objc_msgSend(v79, "length"))
        break;
      objc_msgSend(v117, "addObject:", v79);
      v76 += (uint64_t)objc_msgSend(v79, "length");
      if (v75 == (id)++v78)
      {
        v75 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", v129, &buf, 16);
        if (v75)
          goto LABEL_52;
        break;
      }
    }
  }
  else
  {
    v76 = 0;
  }

  v80 = sub_10000EF14("piggy");
  v81 = objc_claimAutoreleasedReturnValue(v80);
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
  {
    v82 = objc_msgSend(v117, "count");
    *(_DWORD *)v121 = 67109120;
    *(_DWORD *)&v121[4] = v82;
    _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "sending %d tlks", v121, 8u);
  }

  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v83 = v64;
  v84 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v125, v121, 16);
  if (v84)
  {
    v85 = v84;
    v86 = 0;
    v87 = *(_QWORD *)v126;
LABEL_64:
    v88 = 0;
    while (1)
    {
      if (*(_QWORD *)v126 != v87)
        objc_enumerationMutation(v83);
      v89 = *(void **)(*((_QWORD *)&v125 + 1) + 8 * v88);
      if (120 - v86 < (unint64_t)objc_msgSend(v89, "length"))
        break;
      objc_msgSend(v114, "addObject:", v89);
      v86 += (uint64_t)objc_msgSend(v89, "length");
      if (v85 == (id)++v88)
      {
        v85 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v125, v121, 16);
        if (v85)
          goto LABEL_64;
        break;
      }
    }
  }
  else
  {
    v86 = 0;
  }

  v90 = sub_10000EF14("piggy");
  v91 = objc_claimAutoreleasedReturnValue(v90);
  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
  {
    v92 = objc_msgSend(v114, "count");
    LODWORD(result[0]) = 67109120;
    HIDWORD(result[0]) = v92;
    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "sending %d identities", (uint8_t *)result, 8u);
  }

  v93 = ccder_sizeof(0x2000000000000010, v86);
  v94 = ccder_sizeof(0x2000000000000010, v76);
  v95 = +[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", ccder_sizeof(0x2000000000000010, v94 + v93));
  v96 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v95));
  v97 = (uint64_t)objc_msgSend(v96, "mutableBytes");
  v98 = (char *)objc_msgSend(v96, "length");
  v99 = &v98[v97];
  v100 = sub_1001D1724(v117, v97, (uint64_t)&v98[v97]);
  v101 = sub_1001D1724(v114, v97, v100);
  v102 = (id)ccder_encode_constructed_tl(0x2000000000000010, v99, v97, v101);
  v103 = objc_retainAutorelease(v96);
  if (v102 == objc_msgSend(v103, "mutableBytes"))
    v104 = v103;
  else
    v104 = 0;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 32) + 8) + 24) = v104;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 32) + 8) + 24) != 0;
}

BOOL sub_10020F170(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t v6;
  void *v7;
  os_signpost_id_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _BOOL8 v18;
  unint64_t Nanoseconds;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD v27[5];
  int v28;
  uint8_t buf[4];
  os_signpost_id_t v30;
  __int16 v31;
  double v32;
  __int16 v33;
  _BOOL4 v34;

  v6 = _OctagonSignpostLogSystem(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = _OctagonSignpostCreate();
  v10 = v9;

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = v13;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_BEGIN, v8, "SOSCCJoinWithCircleJoiningBlob", " enableTelemetry=YES ", buf, 2u);
  }

  v16 = _OctagonSignpostLogSystem(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCJoinWithCircleJoiningBlob  enableTelemetry=YES ", buf, 0xCu);
  }

  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10020F3DC;
  v27[3] = &unk_1002ED270;
  v27[4] = a1;
  v28 = a2;
  v18 = sub_100205C98(a3, v27);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v8, v10);
  v20 = _OctagonSignpostLogSystem(Nanoseconds);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  v22 = v21;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v30) = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_INTERVAL_END, v8, "SOSCCJoinWithCircleJoiningBlob", " SOSSignpostNameSOSCCJoinWithCircleJoiningBlob=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCJoinWithCircleJoiningBlob}d ", buf, 8u);
  }

  v24 = _OctagonSignpostLogSystem(v23);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v30 = v8;
    v31 = 2048;
    v32 = (double)Nanoseconds / 1000000000.0;
    v33 = 1026;
    v34 = v18;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCJoinWithCircleJoiningBlob  SOSSignpostNameSOSCCJoinWithCircleJoiningBlob=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCJoinWithCircleJoiningBlob}d ", buf, 0x1Cu);
  }

  return v18;
}

id sub_10020F3DC(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  CFTypeRef v8;
  void *v9;
  void *v10;
  unsigned int v11;
  id v12;
  void *v13;
  CFTypeRef v14;
  _BOOL4 v15;
  const __CFString *v16;
  const __CFString *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  int IsLegacy;
  const __CFString *v23;
  void *v24;
  const __CFString *v25;
  const __CFString *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  int v31;
  const __CFString *v32;
  id v33;
  CFTypeRef cf;
  _QWORD v36[4];
  _QWORD v37[4];

  v5 = a2;
  cf = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v7 = sub_1001CB034(v6, *(const void **)(a1 + 32), *(unsigned int *)(a1 + 40), &cf);

  if (a3)
  {
    v8 = cf;
    if (cf)
    {
      CFRetain(cf);
      *a3 = v8;
    }
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "trust"));
  v11 = objc_msgSend(v10, "isInCircleOnly:", 0);

  if (cf)
  {
    v12 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = cf;
    v36[0] = CFSTR("SOSEnabled");
    v15 = -[OTSOSActualAdapter sosEnabled]_0();
    v16 = CFSTR("compat_disabled");
    if (v15)
      v16 = CFSTR("compat_enabled");
    v37[0] = v16;
    v37[1] = CFSTR("Piggybacking");
    v36[1] = CFSTR("SOSJoinMethod");
    v36[2] = CFSTR("JoiningSOSResult");
    v17 = CFSTR("not_in_circle");
    if (v11)
      v17 = CFSTR("in_circle");
    v37[2] = v17;
    v36[3] = CFSTR("CircleContainsLegacy");
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "trust"));
    v20 = objc_msgSend(v19, "trustedCircle");
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    IsLegacy = SOSCircleIsLegacy(v20, objc_msgSend(v21, "accountKey"));
    v23 = CFSTR("does_not_contain_legacy");
    if (IsLegacy)
      v23 = CFSTR("contains_legacy");
    v37[3] = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 4));
    objc_msgSend(v13, "logResultForEvent:hardFailure:result:withAttributes:", CFSTR("SOSDeferralEventPiggybacking"), 0, v14, v24);

  }
  else
  {
    if (-[OTSOSActualAdapter sosEnabled]_0())
      v25 = CFSTR("compat_enabled");
    else
      v25 = CFSTR("compat_disabled");
    if (v11)
      v26 = CFSTR("in_circle");
    else
      v26 = CFSTR("not_in_circle");
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "trust"));
    v29 = objc_msgSend(v28, "trustedCircle");
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    v31 = SOSCircleIsLegacy(v29, objc_msgSend(v30, "accountKey"));
    v32 = CFSTR("does_not_contain_legacy");
    if (v31)
      v32 = CFSTR("contains_legacy");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@-%@-%@"), v25, CFSTR("Piggybacking"), v26, v32));

    v33 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
    v18 = (void *)objc_claimAutoreleasedReturnValue(v33);
    objc_msgSend(v18, "logSuccessForEventNamed:", v13);
  }

  return v7;
}

uint64_t sub_10020F704(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10020F7AC;
  v4[3] = &unk_1002ED228;
  v4[4] = &v5;
  v4[5] = a1;
  sub_100202B4C(a2, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_10020F794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10020F7AC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  os_signpost_id_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  const __CFArray *v19;
  id v20;
  unint64_t Count;
  const __CFSet *MutableCopy;
  CFBooleanRef v23;
  CFIndex v24;
  const void **v25;
  const __CFAllocator *v26;
  const __CFSet *v27;
  CFIndex v28;
  const CFBooleanRef *v29;
  unint64_t Nanoseconds;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  _BYTE v40[24];
  void *v41;
  id v42;
  const __CFSet *v43;
  CFRange v44;

  v5 = a2;
  v6 = _OctagonSignpostLogSystem(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = _OctagonSignpostCreate();
  v10 = v9;

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = v13;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)v40 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_INTERVAL_BEGIN, v8, "SOSCCPeersHaveViewsEnabled", " enableTelemetry=YES ", v40, 2u);
  }

  v16 = _OctagonSignpostLogSystem(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v40 = 134217984;
    *(_QWORD *)&v40[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCPeersHaveViewsEnabled  enableTelemetry=YES ", v40, 0xCu);
  }

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v19 = *(const __CFArray **)(a1 + 40);
  v20 = v18;
  if (objc_msgSend(v20, "isInCircle:", a3))
  {
    Count = CFArrayGetCount(v19);
    if (Count >> 61)
    {
      MutableCopy = CFSetCreateMutableCopy(kCFAllocatorDefault, 0, 0);
    }
    else
    {
      v24 = Count;
      v25 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
      v44.location = 0;
      v44.length = v24;
      CFArrayGetValues(v19, v44, v25);
      v26 = CFGetAllocator(v19);
      v27 = CFSetCreate(v26, v25, v24, &kCFTypeSetCallBacks);
      free(v25);
      MutableCopy = CFSetCreateMutableCopy(kCFAllocatorDefault, 0, v27);
      if (v27)
        CFRelease(v27);
    }
    *(_QWORD *)v40 = _NSConcreteStackBlock;
    *(_QWORD *)&v40[8] = 3221225472;
    *(_QWORD *)&v40[16] = sub_1001D9CFC;
    v41 = &unk_1002EBA40;
    v42 = v20;
    v43 = MutableCopy;
    sub_1001F93BC(v42, v40);
    v28 = CFSetGetCount(MutableCopy);
    v29 = &kCFBooleanTrue;
    if (v28)
      v29 = &kCFBooleanFalse;
    v23 = *v29;
    if (MutableCopy)
      CFRelease(MutableCopy);

  }
  else
  {
    v23 = 0;
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v23;
  Nanoseconds = _OctagonSignpostGetNanoseconds(v8, v10);
  v31 = _OctagonSignpostLogSystem(Nanoseconds);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  v33 = v32;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v32))
  {
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
    *(_DWORD *)v40 = 67240192;
    *(_DWORD *)&v40[4] = v34;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_INTERVAL_END, v8, "SOSCCPeersHaveViewsEnabled", " SOSSignpostNameSOSCCPeersHaveViewsEnabled=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCPeersHaveViewsEnabled}d ", v40, 8u);
  }

  v36 = _OctagonSignpostLogSystem(v35);
  v37 = objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    *(_DWORD *)v40 = 134218496;
    *(_QWORD *)&v40[4] = v8;
    *(_WORD *)&v40[12] = 2048;
    *(double *)&v40[14] = (double)Nanoseconds / 1000000000.0;
    *(_WORD *)&v40[22] = 1026;
    LODWORD(v41) = v38 != 0;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCPeersHaveViewsEnabled  SOSSignpostNameSOSCCPeersHaveViewsEnabled=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCPeersHaveViewsEnabled}d ", v40, 0x1Cu);
  }

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

uint64_t sub_10020FB80(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  dispatch_semaphore_t v18;
  NSObject *v19;
  dispatch_time_t v20;
  const void *v21;
  NSObject *v22;
  void *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t Nanoseconds;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  const void *v33;
  const void *v34;
  NSObject *v35;
  _QWORD v37[4];
  NSObject *v38;
  __int128 *p_buf;
  _QWORD v40[5];
  uint8_t v41[4];
  os_signpost_id_t v42;
  __int16 v43;
  double v44;
  __int16 v45;
  int v46;
  __int128 buf;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  void (*v50)(uint64_t);
  id v51;

  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCRegisterRecoveryPublicKey", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCRegisterRecoveryPublicKey  enableTelemetry=YES ", (uint8_t *)&buf, 0xCu);
  }

  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_100210030;
  v40[3] = &unk_1002ECF50;
  v40[4] = a1;
  if (!sub_100202B4C(a2, v40))
  {
    v33 = sub_10000EF14("SecError");
    v17 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "register-recovery-public-key: Failed to register recovery key", (uint8_t *)&buf, 2u);
    }
    goto LABEL_34;
  }
  v16 = sub_1002025E0();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (!v17)
  {
    v34 = sub_10000EF14("SecError");
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "register-recovery-public-key: Failed to get account object", (uint8_t *)&buf, 2u);
    }

    if (a2)
    {
      v17 = 0;
      v25 = 0;
      *a2 = CFErrorCreate(kCFAllocatorDefault, kSOSErrorDomain, 1048, 0);
      goto LABEL_35;
    }
    v17 = 0;
LABEL_34:
    v25 = 0;
    goto LABEL_35;
  }
  v18 = dispatch_semaphore_create(0);
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v48 = 0x3032000000;
  v49 = sub_10020A1AC;
  v50 = sub_10020A1BC;
  v51 = 0;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1002102E4;
  v37[3] = &unk_1002ED298;
  p_buf = &buf;
  v19 = v18;
  v38 = v19;
  -[NSObject triggerRingUpdateNow:](v17, "triggerRingUpdateNow:", v37);
  v20 = dispatch_time(0, 60000000000);
  if (dispatch_semaphore_wait(v19, v20))
  {
    v21 = sub_10000EF14("SecError");
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "timed out waiting for ring update", v41, 2u);
    }

  }
  v23 = *(void **)(*((_QWORD *)&buf + 1) + 40);
  if (a2)
    v24 = v23 == 0;
  else
    v24 = 1;
  v25 = v24;
  if (v24)
  {
    Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
    v27 = _OctagonSignpostLogSystem(Nanoseconds);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    v29 = v28;
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v28))
    {
      *(_DWORD *)v41 = 67240192;
      LODWORD(v42) = 1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCRegisterRecoveryPublicKey", " SOSSignpostNameSOSCCRegisterRecoveryPublicKey=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRegisterRecoveryPublicKey}d ", v41, 8u);
    }

    v31 = _OctagonSignpostLogSystem(v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v41 = 134218496;
      v42 = v6;
      v43 = 2048;
      v44 = (double)Nanoseconds / 1000000000.0;
      v45 = 1026;
      v46 = 1;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCRegisterRecoveryPublicKey  SOSSignpostNameSOSCCRegisterRecoveryPublicKey=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCRegisterRecoveryPublicKey}d ", v41, 0x1Cu);
    }

  }
  else
  {
    *a2 = v23;
  }

  _Block_object_dispose(&buf, 8);
LABEL_35:

  return v25;
}

void sub_100210004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100210030(uint64_t a1, void *a2, const void **a3)
{
  id v5;
  const __CFData *v6;
  const __CFData *v7;
  id v8;
  void *v9;
  _BOOL4 v10;
  const void *v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  _BOOL8 v15;
  const void *v16;
  id v17;
  void *v18;
  const void *v19;
  NSObject *v20;
  _BOOL4 v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  const void *v25;
  void *v26;
  char v27;
  const void *v28;
  const void *v29;
  void *v30;
  int v32;
  const void *v33;

  v5 = a2;
  v6 = *(const __CFData **)(a1 + 32);
  if (v6 && CFDataGetLength(v6))
  {
    v7 = *(const __CFData **)(a1 + 32);
    v8 = v5;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "account"));
    v10 = sub_1001E9894(v9, v7, a3);

    v11 = sub_10000EF14("recovery");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v13)
      {
        LOWORD(v32) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "successfully registered recovery public key", (uint8_t *)&v32, 2u);
      }

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "account"));
      v15 = 1;
      objc_msgSend(v14, "setPublicKeyStatus:forKey:", 1, 2);

      if (a3)
      {
        v16 = *a3;
        if (*a3)
        {
          *a3 = 0;
          CFRelease(v16);
        }
      }
    }
    else
    {
      if (v13)
      {
        v29 = *a3;
        v32 = 138412290;
        v33 = v29;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "could not register recovery public key: %@", (uint8_t *)&v32, 0xCu);
      }

      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "account"));
      objc_msgSend(v30, "setPublicKeyStatus:forKey:", 0, 2);

      v15 = 0;
    }
    goto LABEL_24;
  }
  v17 = v5;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "account"));
  v15 = sub_1001E9894(v18, 0, a3);

  v19 = sub_10000EF14("recovery");
  v20 = objc_claimAutoreleasedReturnValue(v19);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v21)
    {
      LOWORD(v32) = 0;
      v22 = "RK Cleared";
      v23 = v20;
      v24 = 2;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)&v32, v24);
    }
  }
  else if (v21)
  {
    v25 = *a3;
    v32 = 138412290;
    v33 = v25;
    v22 = "Couldn't clear RK(%@)";
    v23 = v20;
    v24 = 12;
    goto LABEL_14;
  }

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "account"));
  objc_msgSend(v26, "setPublicKeyStatus:forKey:", 0, 2);

  v27 = !v15;
  if (!a3)
    v27 = 1;
  if ((v27 & 1) == 0)
  {
    v28 = *a3;
    if (*a3)
    {
      *a3 = 0;
      CFRelease(v28);
    }
    v15 = 1;
  }
LABEL_24:

  return v15;
}

void sub_1002102E4(uint64_t a1, void *a2)
{
  id v4;
  const void *v5;
  NSObject *v6;
  int v7;
  id v8;

  v4 = a2;
  if (v4)
  {
    v5 = sub_10000EF14("SecError");
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 138412290;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "trigger ring update error: %@", (uint8_t *)&v7, 0xCu);
    }

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

uint64_t sub_1002103C4(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t Nanoseconds;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  os_signpost_id_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  _BOOL4 v35;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCCopyRecoveryPublicKey", " enableTelemetry=YES ", buf, 2u);
  }

  v12 = _OctagonSignpostLogSystem(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v31 = v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCCopyRecoveryPublicKey  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1002106A0;
  v25[3] = &unk_1002ECEE8;
  v25[4] = &v26;
  sub_100202B4C(a1, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
  v15 = _OctagonSignpostLogSystem(Nanoseconds);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    v18 = v27[3] != 0;
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCCopyRecoveryPublicKey", " SOSSignpostNameSOSCCCopyRecoveryPublicKey=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyRecoveryPublicKey}d ", buf, 8u);
  }

  v20 = _OctagonSignpostLogSystem(v19);
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = v27[3];
    *(_DWORD *)buf = 134218496;
    v31 = v4;
    v32 = 2048;
    v33 = (double)Nanoseconds / 1000000000.0;
    v34 = 1026;
    v35 = v22 != 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCCopyRecoveryPublicKey  SOSSignpostNameSOSCCCopyRecoveryPublicKey=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCCopyRecoveryPublicKey}d ", buf, 0x1Cu);
  }

  v23 = v27[3];
  _Block_object_dispose(&v26, 8);
  return v23;
}

void sub_100210668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002106A0(uint64_t a1, void *a2, CFTypeRef *a3)
{
  void *v5;
  const __CFData *v6;
  CFTypeID v7;
  CFTypeRef v8;
  const void *v9;
  NSObject *v10;
  CFTypeRef v11;
  int v13;
  CFTypeRef v14;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v6 = sub_1001E97E4(kCFAllocatorDefault, v5, a3);

  if (!v6)
  {
    v9 = sub_10000EF14("recovery");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *a3;
      v13 = 138412290;
      v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Could not retrieve the recovery public key from the ring: %@", (uint8_t *)&v13, 0xCu);
    }

    goto LABEL_10;
  }
  v7 = CFGetTypeID(v6);
  if (v7 != CFDataGetTypeID())
  {
    CFRelease(v6);
LABEL_10:
    v6 = 0;
    goto LABEL_11;
  }
  if (a3)
  {
    v8 = *a3;
    if (*a3)
    {
      *a3 = 0;
      CFRelease(v8);
    }
  }
LABEL_11:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

BOOL sub_1002107F0(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL8 v16;
  unint64_t Nanoseconds;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD v25[5];
  uint8_t buf[4];
  os_signpost_id_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  _BOOL4 v31;

  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCMessageFromPeerIsPending", " enableTelemetry=YES ", buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCMessageFromPeerIsPending  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100210A4C;
  v25[3] = &unk_1002ECF50;
  v25[4] = a1;
  v16 = sub_100202B4C(a2, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
  v18 = _OctagonSignpostLogSystem(Nanoseconds);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  v20 = v19;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v27) = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCMessageFromPeerIsPending", " SOSSignpostNameSOSCCMessageFromPeerIsPending=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCMessageFromPeerIsPending}d ", buf, 8u);
  }

  v22 = _OctagonSignpostLogSystem(v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v27 = v6;
    v28 = 2048;
    v29 = (double)Nanoseconds / 1000000000.0;
    v30 = 1026;
    v31 = v16;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCMessageFromPeerIsPending  SOSSignpostNameSOSCCMessageFromPeerIsPending=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCMessageFromPeerIsPending}d ", buf, 0x1Cu);
  }

  return v16;
}

uint64_t sub_100210A4C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t PeerID;
  const void *v13;
  uint64_t HasPendingKey;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v7 = objc_msgSend(v6, "SOSMonitorModeSOSIsActive");

  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    if (sub_1001D523C(v9, a3))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "kvs_message_transport"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "peerID"));
      PeerID = SOSPeerInfoGetPeerID(v8);
      v13 = (const void *)SOSMessageKeyCreateFromPeerToTransport(v10, v11, PeerID);

      HasPendingKey = SOSCloudKeychainHasPendingKey(v13, a3);
      if (v13)
        CFRelease(v13);
    }
    else
    {
      HasPendingKey = 0;
    }

  }
  else
  {
    HasPendingKey = 0;
  }

  return HasPendingKey;
}

BOOL sub_100210B3C(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  void *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL8 v16;
  unint64_t Nanoseconds;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD v25[5];
  uint8_t buf[4];
  os_signpost_id_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  _BOOL4 v31;

  v4 = _OctagonSignpostLogSystem(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = _OctagonSignpostCreate();
  v8 = v7;

  v10 = _OctagonSignpostLogSystem(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SOSCCSendToPeerIsPending", " enableTelemetry=YES ", buf, 2u);
  }

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCSendToPeerIsPending  enableTelemetry=YES ", buf, 0xCu);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100210D98;
  v25[3] = &unk_1002ECF50;
  v25[4] = a1;
  v16 = sub_100202B4C(a2, v25);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v6, v8);
  v18 = _OctagonSignpostLogSystem(Nanoseconds);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  v20 = v19;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v27) = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v6, "SOSCCSendToPeerIsPending", " SOSSignpostNameSOSCCSendToPeerIsPending=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCSendToPeerIsPending}d ", buf, 8u);
  }

  v22 = _OctagonSignpostLogSystem(v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v27 = v6;
    v28 = 2048;
    v29 = (double)Nanoseconds / 1000000000.0;
    v30 = 1026;
    v31 = v16;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCSendToPeerIsPending  SOSSignpostNameSOSCCSendToPeerIsPending=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCSendToPeerIsPending}d ", buf, 0x1Cu);
  }

  return v16;
}

uint64_t sub_100210D98(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  v7 = objc_msgSend(v6, "SOSMonitorModeSOSIsActive");

  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    if (sub_1001D523C(v9, a3))
      SOSPeerInfoGetPeerID(v8);

  }
  return 0;
}

BOOL sub_100210E20(int a1, CFTypeRef *a2)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  os_signpost_id_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  _BOOL8 v20;
  unint64_t Nanoseconds;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  id v28;
  void *v29;
  void *v30;
  const __CFString *v31;
  _QWORD v33[4];
  char v34;
  uint8_t buf[4];
  os_signpost_id_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  _BOOL4 v40;

  v4 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "startLogSystemMetricsForActivityNamed:", CFSTR("SOSDeferralActivitySetCompatibilityMode")));

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = _OctagonSignpostCreate();
  v12 = v11;

  v14 = _OctagonSignpostLogSystem(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  v16 = v15;
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_BEGIN, v10, "SOSCCSetCompatibilityMode", " enableTelemetry=YES ", buf, 2u);
  }

  v18 = _OctagonSignpostLogSystem(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v36 = v10;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCSetCompatibilityMode  enableTelemetry=YES ", buf, 0xCu);
  }

  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_100211128;
  v33[3] = &unk_1002ED2B8;
  v34 = a1;
  v20 = sub_100202B4C(a2, v33);
  Nanoseconds = _OctagonSignpostGetNanoseconds(v10, v12);
  v22 = _OctagonSignpostLogSystem(Nanoseconds);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  v24 = v23;
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v36) = v20;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_INTERVAL_END, v10, "SOSCCSetCompatibilityMode", " SOSSignpostNameSOSCCSetCompatibilityMode=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCSetCompatibilityMode}d ", buf, 8u);
  }

  v26 = _OctagonSignpostLogSystem(v25);
  v27 = objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v36 = v10;
    v37 = 2048;
    v38 = (double)Nanoseconds / 1000000000.0;
    v39 = 1026;
    v40 = v20;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCSetCompatibilityMode  SOSSignpostNameSOSCCSetCompatibilityMode=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCSetCompatibilityMode}d ", buf, 0x1Cu);
  }

  if (a2)
  {
    if (*a2)
      a2 = (id)*a2;
    else
      a2 = 0;
  }
  objc_msgSend(v6, "stopWithEvent:result:", CFSTR("SOSDeferralActivitySetCompatibilityMode"), a2);
  v28 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  v30 = v29;
  if (a1)
    v31 = CFSTR("SOSDeferralEventCompatibilityModeEnabled");
  else
    v31 = CFSTR("SOSDeferralEventCompatibilityModeDisabled");
  objc_msgSend(v29, "logSuccessForEventNamed:", v31);

  return v20;
}

BOOL sub_100211128(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _BOOL8 v18;
  const void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  const void *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  __CFString *v32;
  __CFString *v33;
  void *v34;
  const __CFDictionary *v35;
  id v36;
  OSStatus v37;
  const void *Error;
  const void *v39;
  uint64_t v41;
  CFStringRef v42;
  void *v43;
  _QWORD v44[7];
  _QWORD v45[7];
  uint8_t buf[4];
  uint64_t v47;

  v5 = a2;
  if (qword_1003412D8 != -1)
    dispatch_once(&qword_1003412D8, &stru_1002E7880);
  if (byte_1003412D0)
  {
    v6 = *(unsigned __int8 *)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    objc_msgSend(v7, "setSosCompatibilityMode:", v6);

    if (*(_BYTE *)(a1 + 32))
    {
      dword_100341678 = 2;
      v8 = sub_10000EF14("sos-compatibility-mode");
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Alerting SOS of account sign in", buf, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      objc_msgSend(v10, "setAccountIsChanging:", 0);

      v11 = sub_100011C40(0);
      v12 = sub_10001A338(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      objc_msgSend(v13, "setFactory:", v12);

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      objc_msgSend(v14, "SOSMonitorModeEnableSOS");

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      objc_msgSend(v15, "ensureFactoryCircles");

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      objc_msgSend(v16, "setKey_interests_need_updating:", 1);

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      objc_msgSend(v17, "setConsolidateKeyInterest:", 0);

      objc_msgSend(v5, "restart");
    }
    else
    {
      v19 = sub_10000EF14("sos-compatibility-mode");
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Alerting SOS of account sign out", buf, 2u);
      }

      v41 = 0;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "trust"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      v24 = objc_msgSend(v22, "leaveCircle:err:", v23, &v41);

      if (!v24 || v41)
      {
        v25 = sub_10000EF14("SecError");
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v47 = v41;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "sos-compatibility-mode: failed to leave circle, error: %@", buf, 0xCu);
        }

      }
      objc_msgSend(v5, "restart");
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      sub_10020346C(0);

      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      sub_1001CDD78(v28);

      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      objc_msgSend(v29, "setAccountIsChanging:", 1);

      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
      objc_msgSend(v30, "SOSMonitorModeDisableSOS");

      notify_post(kSOSCCSOSIsNowOFF);
      dword_100341678 = 1;
    }
    v44[0] = kSecClass;
    v44[1] = kSecUseDataProtectionKeychain;
    v45[0] = kSecClassGenericPassword;
    v45[1] = &__kCFBooleanTrue;
    v44[2] = kSecAttrSynchronizable;
    v44[3] = kSecAttrAccessGroup;
    v45[2] = &__kCFBooleanFalse;
    v45[3] = CFSTR("com.apple.security.sos");
    v44[4] = kSecAttrAccount;
    v44[5] = kSecAttrAccessible;
    v45[4] = CFSTR("sos-compatibility-mode");
    v45[5] = kSecAttrAccessibleAfterFirstUnlock;
    v44[6] = kSecAttrSysBound;
    v45[6] = &off_10030B0D8;
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v45, v44, 7));
    if (*(_BYTE *)(a1 + 32))
      v32 = CFSTR("enabled");
    else
      v32 = CFSTR("disabled");
    v33 = v32;
    v34 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString dataUsingEncoding:](v33, "dataUsingEncoding:", 134217984));
    v42 = kSecValueData;
    v43 = v34;
    v35 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));

    v36 = objc_msgSend(v31, "mutableCopy");
    objc_msgSend(v36, "addEntriesFromDictionary:", v35);
    v37 = SecItemAdd((CFDictionaryRef)v36, 0);
    if (v37 == -25299)
      v37 = SecItemUpdate((CFDictionaryRef)v31, v35);
    v18 = v37 == 0;
    if (v37)
    {
      Error = (const void *)SecCopyLastError();
      v39 = Error;
      if (a3)
      {
        if (Error)
          CFRetain(Error);
        *a3 = v39;
      }
      if (v39)
        CFRelease(v39);
    }

  }
  else
  {
    v18 = 1;
  }

  return v18;
}

BOOL sub_100211664()
{
  _BOOL8 v0;
  const void *v1;
  NSObject *v2;
  const __CFString *v3;
  int v5;
  const __CFString *v6;

  v0 = -[OTSOSActualAdapter sosEnabled]_0();
  v1 = sub_10000EF14("sos-compatibility-mode-cached");
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = CFSTR("disabled");
    if (v0)
      v3 = CFSTR("enabled");
    v5 = 138412290;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cached SOS Compatibility Mode is %@", (uint8_t *)&v5, 0xCu);
  }

  return v0;
}

uint64_t sub_10021172C(CFTypeRef *a1)
{
  uint64_t v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const void *v15;
  NSObject *v16;
  unint64_t Nanoseconds;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _BOOL8 v24;
  const void *v25;
  NSObject *v26;
  const __CFString *v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  _QWORD v36[5];
  uint8_t v37[4];
  os_signpost_id_t v38;
  __int16 v39;
  double v40;
  __int16 v41;
  int v42;
  _BYTE buf[24];
  _BOOL4 v44;

  v2 = _OctagonSignpostLogSystem(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = _OctagonSignpostCreate();
  v6 = v5;

  v8 = _OctagonSignpostLogSystem(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  v11 = v4 - 1;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SOSCCFetchCompatibilityMode", " enableTelemetry=YES ", buf, 2u);
  }

  v13 = _OctagonSignpostLogSystem(v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: SOSCCFetchCompatibilityMode  enableTelemetry=YES ", buf, 0xCu);
  }

  if (qword_1003412D8 != -1)
    dispatch_once(&qword_1003412D8, &stru_1002E7880);
  if (byte_1003412D0)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    LOBYTE(v44) = 0;
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_100211BE0;
    v36[3] = &unk_1002ECEE8;
    v36[4] = buf;
    sub_100202B4C(a1, v36);
    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      v15 = sub_10000EF14("sos-compatibility-mode");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Device is in circle, SOS Compatibility Mode is enabled", v37, 2u);
      }

      Nanoseconds = _OctagonSignpostGetNanoseconds(v4, v6);
      v18 = _OctagonSignpostLogSystem(Nanoseconds);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      v20 = v19;
      if (v11 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
      {
        *(_DWORD *)v37 = 67240192;
        LODWORD(v38) = 1;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCFetchCompatibilityMode", " SOSSignpostNameSOSCCFetchCompatibilityMode=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCFetchCompatibilityMode}d ", v37, 8u);
      }

      v22 = _OctagonSignpostLogSystem(v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v37 = 134218496;
        v38 = v4;
        v39 = 2048;
        v40 = (double)Nanoseconds / 1000000000.0;
        v41 = 1026;
        v42 = 1;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCFetchCompatibilityMode  SOSSignpostNameSOSCCFetchCompatibilityMode=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCFetchCompatibilityMode}d ", v37, 0x1Cu);
      }

      _Block_object_dispose(buf, 8);
      return 1;
    }
    _Block_object_dispose(buf, 8);
  }
  v24 = -[OTSOSActualAdapter sosEnabled]_0();
  v25 = sub_10000EF14("sos-compatibility-mode");
  v26 = objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    v27 = CFSTR("disabled");
    if (v24)
      v27 = CFSTR("enabled");
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "SOS Compatibility Mode is %@", buf, 0xCu);
  }

  v28 = _OctagonSignpostGetNanoseconds(v4, v6);
  v29 = _OctagonSignpostLogSystem(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  v31 = v30;
  if (v11 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v30))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v24;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_INTERVAL_END, v4, "SOSCCFetchCompatibilityMode", " SOSSignpostNameSOSCCFetchCompatibilityMode=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCFetchCompatibilityMode}d ", buf, 8u);
  }

  v33 = _OctagonSignpostLogSystem(v32);
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)v28 / 1000000000.0;
    *(_WORD *)&buf[22] = 1026;
    v44 = v24;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: SOSCCFetchCompatibilityMode  SOSSignpostNameSOSCCFetchCompatibilityMode=%{public,signpost.telemetry:number1,name=SOSSignpostNameSOSCCFetchCompatibilityMode}d ", buf, 0x1Cu);
  }

  return v24;
}

void sub_100211BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100211BE0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  _BOOL8 v17;
  void *v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v5 = objc_msgSend(v4, "getCircleStatus:", 0);

  if (!v5 && dword_100341678 != 2)
  {
    dword_100341678 = 2;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    objc_msgSend(v6, "setSosCompatibilityMode:", 1);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    objc_msgSend(v7, "setAccountIsChanging:", 0);

    v8 = sub_100011C40(0);
    v9 = sub_10001A338(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    objc_msgSend(v10, "setFactory:", v9);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    objc_msgSend(v11, "SOSMonitorModeEnableSOS");

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    objc_msgSend(v12, "ensureFactoryCircles");

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    objc_msgSend(v13, "setKey_interests_need_updating:", 1);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    objc_msgSend(v14, "setConsolidateKeyInterest:", 0);

    objc_msgSend(v3, "restart");
    v15 = objc_msgSend((id)objc_opt_class(CKKSAnalytics), "logger");
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    objc_msgSend(v16, "logSuccessForEventNamed:", CFSTR("SOSDeferralEventCompatibilityModeEnabled"));

LABEL_5:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    goto LABEL_6;
  }
  if (!v5)
    goto LABEL_5;
LABEL_6:
  v17 = v5 == 0;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  objc_msgSend(v18, "setSosCompatibilityMode:", v17);

  return 1;
}

void sub_100211D8C(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  CFTypeRef v4;
  uint8_t buf[4];
  CFTypeRef v6;

  v4 = 0;
  sub_100205C98(&v4, &stru_1002ED2D8);
  if (v4)
  {
    v2 = sub_10000EF14("SecError");
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SOSCCPushResetCircle_Server: error writing reset circle to kvs: %@", buf, 0xCu);
    }

    if (a1)
      *a1 = v4;
  }
}

BOOL sub_100211E60(id a1, SOSAccountTransaction *a2, __CFError **a3)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t Name;
  void *v7;
  uint64_t v8;
  const void *v9;
  BOOL v10;
  const void *v11;
  NSObject *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  const void *v15;
  NSObject *v16;
  void *v17;
  dispatch_semaphore_t v18;
  dispatch_time_t v19;
  dispatch_queue_global_t global_queue;
  void *v21;
  NSObject *v22;
  _OWORD *v23;
  CFTypeRef cf;
  CFTypeRef v26;
  __int128 buf;
  intptr_t (*v28)(uint64_t, uint64_t, uint64_t);
  void *v29;
  dispatch_semaphore_t v30;

  v3 = (id)objc_claimAutoreleasedReturnValue(-[SOSAccountTransaction account](a2, "account", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));

  Name = SOSCircleGetName(objc_msgSend(v5, "trustedCircle"));
  v26 = 0;
  v7 = (void *)SOSCircleKeyCreateWithName(Name, &v26);
  if (!v7 || v26)
  {
    v15 = sub_10000EF14("SecError");
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v26;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "SOSAccountWriteEmptyCircleToKVS failed to create circle key: %@", (uint8_t *)&buf, 0xCu);
    }

    v14 = v26;
    if (v26)
    {
      v26 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    cf = 0;
    v8 = SOSCircleCreate(kCFAllocatorDefault, Name, &cf);
    v9 = (const void *)v8;
    if (v8)
      v10 = cf == 0;
    else
      v10 = 0;
    if (v10)
    {
      v17 = (void *)SOSCircleCopyEncodedData(v8, kCFAllocatorDefault, 0);
      CFRelease(v9);
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v17, v7);

      v18 = dispatch_semaphore_create(0);
      v19 = dispatch_time(0, 30000000000);
      global_queue = dispatch_get_global_queue(-2, 0);
      v21 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
      *(_QWORD *)&buf = _NSConcreteStackBlock;
      *((_QWORD *)&buf + 1) = 3221225472;
      v28 = sub_1001D00D8;
      v29 = &unk_1002EC920;
      v30 = v18;
      v22 = v18;
      v23 = objc_retainBlock(&buf);
      SOSCloudKeychainPutObjectsInCloud(v4, v21, v23);
      dispatch_semaphore_wait(v22, v19);

      goto LABEL_19;
    }
    v11 = sub_10000EF14("SecError");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = cf;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SOSAccountWriteEmptyCircleToKVS failed to create circle key: %@", (uint8_t *)&buf, 0xCu);
    }

    v13 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v13);
    }
    if (v9)
    {
      v14 = v9;
LABEL_17:
      CFRelease(v14);
    }
  }
LABEL_19:

  return 1;
}

uint64_t sub_100212140(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  id v8;
  const void *v9;
  NSObject *v10;
  uint64_t (**v11)(id, uint64_t, _QWORD);
  void *v12;
  uint64_t Name;
  uint64_t v14;
  id v15;
  const void *v16;
  NSObject *v17;
  CFTypeRef v18;
  _QWORD v20[4];
  id v21;
  uint64_t (**v22)(id, uint64_t, _QWORD);
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  CFTypeRef v27;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v5 = objc_msgSend(v4, "SOSMonitorModeSOSIsActive");

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v7 = *(_QWORD *)(a1 + 32);
    v8 = v6;
    v9 = sub_10000EF14("otrtimer");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v20[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "timer fired!", (uint8_t *)v20, 2u);
    }

    cf = 0;
    v11 = (uint64_t (**)(id, uint64_t, _QWORD))objc_msgSend(v8, "factory");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "trust"));
    Name = SOSCircleGetName(objc_msgSend(v12, "trustedCircle"));
    if (v11)
    {
      v14 = v11[1](v11, Name, 0);
      if (v14)
      {
        v11 = *(uint64_t (***)(id, uint64_t, _QWORD))v14;
        (*(void (**)(uint64_t, _QWORD))(v14 + 72))(v14, 0);
      }
      else
      {
        v11 = 0;
      }
    }

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1001D1A68;
    v20[3] = &unk_1002EB548;
    v22 = v11;
    v15 = v8;
    v21 = v15;
    sub_1000FC2C0((uint64_t)v11, v7, (uint64_t)&cf, v20);
    if (cf)
    {
      v16 = sub_10000EF14("otrtimer");
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v25 = v7;
        v26 = 2112;
        v27 = cf;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "error grabbing engine for peer id: %@, error:%@", buf, 0x16u);
      }

      v18 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v18);
      }
    }

  }
  return 1;
}

uint64_t sub_100212370(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t (**v12)(id, uint64_t, _QWORD);
  void *v13;
  uint64_t Name;
  uint64_t v15;
  id v16;
  const void *v17;
  NSObject *v18;
  CFTypeRef v19;
  _QWORD v21[4];
  id v22;
  uint64_t *v23;
  CFTypeRef cf;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  id v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  CFTypeRef v34;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v5 = objc_msgSend(v4, "SOSMonitorModeSOSIsActive");

  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    v7 = *(void **)(a1 + 40);
    v8 = v3;
    v9 = v6;
    v10 = v7;
    v25 = 0;
    v26 = &v25;
    v27 = 0x3032000000;
    v28 = sub_1001CB63C;
    v29 = sub_1001CB64C;
    v30 = (id)0xAAAAAAAAAAAAAAAALL;
    v30 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "account"));
    cf = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "account"));
    v12 = (uint64_t (**)(id, uint64_t, _QWORD))objc_msgSend(v11, "factory");
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v26[5], "trust"));
    Name = SOSCircleGetName(objc_msgSend(v13, "trustedCircle"));
    if (v12)
    {
      v15 = v12[1](v12, Name, 0);
      if (v15)
      {
        v12 = *(uint64_t (***)(id, uint64_t, _QWORD))v15;
        (*(void (**)(uint64_t, _QWORD))(v15 + 72))(v15, 0);
      }
      else
      {
        v12 = 0;
      }
    }

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1001D1FAC;
    v21[3] = &unk_1002EB570;
    v16 = v10;
    v22 = v16;
    v23 = &v25;
    sub_1000FC2C0((uint64_t)v12, (uint64_t)v9, (uint64_t)&cf, v21);
    if (cf)
    {
      v17 = sub_10000EF14("otrtimer");
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v32 = v9;
        v33 = 2112;
        v34 = cf;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "error grabbing engine for peer id: %@, error:%@", buf, 0x16u);
      }

      v19 = cf;
      if (cf)
      {
        cf = 0;
        CFRelease(v19);
      }
    }

    _Block_object_dispose(&v25, 8);
  }

  return 1;
}

void sub_1002125D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002125F4(uint64_t a1, void *a2, const void **a3)
{
  const void *v4;
  void *v5;
  void *v6;
  id v7;
  const void *v8;
  CFTypeRef v9;
  const void *v11;
  NSObject *v12;
  const void *v13;
  NSObject *v14;
  const void *v15;
  NSObject *v16;
  CFTypeRef v17;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v20;

  if (a3)
    v4 = *a3;
  else
    v4 = 0;
  cf = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trust"));
  v7 = objc_msgSend(v6, "fullPeerInfo");

  if (!v7)
  {
    v11 = sub_10000EF14("SecError");
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "device does not have a peer", buf, 2u);
    }

    SOSCreateError(1032, CFSTR("No Peer for Account"), 0, &cf);
    v9 = 0;
    v8 = 0;
LABEL_22:
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v17 = cf;
    if (cf)
    {
      cf = 0;
      CFRelease(v17);
    }
    if (v8)
      CFRelease(v8);
    if (v9)
      goto LABEL_11;
    return 1;
  }
  v8 = (const void *)SOSFullPeerInfoCopyOctagonSigningKey(v7, &cf);
  if (!v8 || cf)
  {
    v13 = sub_10000EF14("SecError");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v20 = cf;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "SOSCCPerformWithAllOctagonKeys signing key error: %@", buf, 0xCu);
    }

    v9 = 0;
    goto LABEL_22;
  }
  v9 = (CFTypeRef)SOSFullPeerInfoCopyOctagonEncryptionKey(v7, &cf);
  if (!v9 || cf)
  {
    v15 = sub_10000EF14("SecError");
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v20 = cf;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "SOSCCPerformWithAllOctagonKeys encryption key error: %@", buf, 0xCu);
    }

    goto LABEL_22;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  CFRelease(v8);
  CFRelease(v9);
  v9 = cf;
  if (cf)
  {
    cf = 0;
LABEL_11:
    CFRelease(v9);
  }
  return 1;
}

void sub_100212874(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  void *PrivateAttributeDictionary;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  CFTypeRef result;

  v7 = a1;
  PrivateAttributeDictionary = (void *)SecKeyGeneratePrivateAttributeDictionary(a3, kSecAttrKeyTypeEC, a2);
  v9 = objc_msgSend(PrivateAttributeDictionary, "mutableCopy");

  objc_msgSend(v9, "setObject:forKeyedSubscript:", v7, kSecAttrLabel);
  objc_msgSend(v9, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kSecUseDataProtectionKeychain);
  objc_msgSend(v9, "setObject:forKeyedSubscript:", kCFBooleanFalse, kSecAttrSynchronizable);
  objc_msgSend(v9, "setObject:forKeyedSubscript:", kSOSInternalAccessGroup, kSecAttrAccessGroup);
  result = 0;
  v10 = SecItemAdd((CFDictionaryRef)v9, &result);
  if ((_DWORD)v10)
  {
    if ((_DWORD)v10 == -25299)
    {
      v11 = objc_alloc_init((Class)NSMutableDictionary);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kSecClass));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v12, kSecClass);

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kSecAttrKeyTypeEC));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v13, kSecAttrKeyType);

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kSecAttrKeyClassPrivate));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v14, kSecAttrKeyClass);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kSecAttrAccessGroup));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v15, kSecAttrAccessGroup);

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kSecAttrLabel));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v16, kSecAttrLabel);

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kSecAttrApplicationLabel));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v17, kSecAttrApplicationLabel);

      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kSecUseDataProtectionKeychain));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v18, kSecUseDataProtectionKeychain);

      v19 = objc_msgSend(v9, "mutableCopy");
      objc_msgSend(v19, "setObject:forKeyedSubscript:", 0, kSecClass);
      v20 = SecItemUpdate((CFDictionaryRef)v11, (CFDictionaryRef)v19);
      if ((_DWORD)v20)
      {
        v21 = (int)v20;
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SecItemUpdate: %d"), v20));
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", NSOSStatusErrorDomain, v21, v22));

      }
      else
      {
        v23 = 0;
      }

    }
    else
    {
      v24 = (int)v10;
      v11 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SecItemAdd: %d"), v10));
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:description:](NSError, "errorWithDomain:code:description:", NSOSStatusErrorDomain, v24, v11));
    }

    if (a4 && v23)
      *a4 = objc_retainAutorelease(v23);

  }
}

void sub_100212BFC(uint64_t a1, void *a2)
{
  __CFString *v4;
  id v5;
  void *v6;
  const __CFDictionary *v7;
  OSStatus v8;
  const void *v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  const __CFString *v14;
  __int16 v15;
  OSStatus v16;
  CFStringRef v17;
  id v18;
  _QWORD v19[4];
  _QWORD v20[4];

  v4 = CFSTR("sync");
  v5 = a2;
  v6 = (void *)SecKeyCopyPublicKeyHash(a1);
  v19[0] = kSecClass;
  v19[1] = kSecAttrSynchronizable;
  v20[0] = kSecClassKey;
  v20[1] = kSecAttrSynchronizableAny;
  v19[2] = kSecAttrApplicationLabel;
  v19[3] = kSecAttrAccessGroup;
  v20[2] = v6;
  v20[3] = CFSTR("sync");
  v7 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 4));
  v17 = kSecAttrAccessGroup;
  v18 = v5;
  v8 = SecItemUpdate(v7, (CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
  v9 = sub_10000EF14("octagon");
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 138412802;
    v12 = v5;
    v13 = 2112;
    v14 = CFSTR("sync");
    v15 = 1024;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Ensuring key agrp ('%@' from '%@') status: %d", (uint8_t *)&v11, 0x1Cu);
  }

}

uint64_t sub_100212DA8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  __int128 v9;
  _QWORD v10[4];
  id v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v3 = a2;
  v16 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v10[1] = 3221225472;
  v9 = *(_OWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[2] = sub_100212E88;
  v10[3] = &unk_1002ED328;
  v11 = v3;
  v14 = *(_QWORD *)(a1 + 64);
  v5 = (id)v9;
  v12 = v9;
  v15 = *(_OWORD *)(a1 + 72);
  v6 = v3;
  v7 = sub_1001D9488(v4, (uint64_t)CFSTR("Updating Octagon Keys in SOS"), (uint64_t)&v16, v10);

  return v7;
}

uint64_t sub_100212E88(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;
  const void *v7;
  NSObject *v8;
  void (*v9)(void);
  uint64_t v10;
  const void *v12;
  NSObject *v13;
  const void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  NSObject *v24;
  void *v25;
  NSErrorUserInfoKey v26;
  const __CFString *v27;
  uint8_t buf[4];
  void *v29;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
  v5 = sub_1002131A4(v4, *(void **)(a1 + 48), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v6)
  {
    v7 = sub_10000EF14("SecError");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "octagon: failed to save Octagon keys to the keychain: %@", buf, 0xCu);
    }

    v9 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
LABEL_5:
    v9();
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  if (!a2)
  {
    v14 = sub_10000EF14("octagon");
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "No peer info to update?", buf, 2u);
    }

    v16 = kSOSErrorDomain;
    v26 = NSLocalizedDescriptionKey;
    v27 = CFSTR("Device has no full peer info");
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 1032, v17));

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_6;
  }
  v25 = 0;
  SOSPeerInfoSetOctagonKeysInDescription(a2, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), &v25);
  if (v25)
  {
    v12 = sub_10000EF14("SecError");
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v25;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "octagon: Failed to set Octagon Keys in peerInfo: %@", buf, 0xCu);
    }

    v9 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    goto LABEL_5;
  }
  v19 = *(_QWORD *)(a1 + 80);
  if (v19)
    CFRetain(*(CFTypeRef *)(a1 + 80));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
  objc_msgSend(v20, "setOctagonSigningFullKeyRef:", v19);

  v21 = *(_QWORD *)(a1 + 88);
  if (v21)
    CFRetain(*(CFTypeRef *)(a1 + 88));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
  objc_msgSend(v22, "setOctagonEncryptionFullKeyRef:", v21);

  v23 = sub_10000EF14("octagon");
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Success! Updated Octagon keys in SOS!", buf, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v10 = 1;
LABEL_7:

  return v10;
}

id sub_1002131A4(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t Name;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  const void *v23;
  NSObject *v24;
  const char *v25;
  const void *v26;
  id v28;
  id v29;
  uint8_t buf[4];
  id v31;

  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "trust"));
  Name = SOSCircleGetName(objc_msgSend(v12, "trustedCircle"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(Name);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "gestalt"));
  v16 = sub_1002133B4((uint64_t)v15, v14, CFSTR("Octagon Peer Signing "));
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "gestalt"));
  v19 = sub_1002133B4((uint64_t)v18, v14, CFSTR("Octagon Peer Encryption "));
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

  v29 = 0;
  sub_100212874(v17, (uint64_t)v10, a4, &v29);

  v21 = v29;
  if (v21)
  {
    v22 = v21;
    v23 = sub_10000EF14("SecError");
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v31 = v22;
      v25 = "octagon: could not save signing key: %@";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0xCu);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v28 = 0;
  sub_100212874(v20, (uint64_t)v9, a5, &v28);
  v22 = v28;
  if (v22)
  {
    v26 = sub_10000EF14("SecError");
    v24 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v31 = v22;
      v25 = "octagon: could not save encryption key: %@";
      goto LABEL_7;
    }
LABEL_8:

  }
  return v22;
}

id sub_1002133B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSString *v7;
  void *v8;
  void *v9;

  v5 = a3;
  v6 = a2;
  v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ID for %@-%@"), SOSPeerGestaltGetName(a1), v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByAppendingString:", v8));
  return v9;
}

uint64_t sub_100213444(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  const void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  NSObject *v16;
  const void *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  NSErrorUserInfoKey v23;
  const __CFString *v24;
  uint8_t buf[4];
  void *v26;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v5 = sub_1002131A4(v4, *(void **)(a1 + 40), *(void **)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v6)
  {
    v7 = sub_10000EF14("SecError");
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "octagon-preload-keys: failed to save Octagon keys to the keychain: %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_5:
    v9 = 0;
    goto LABEL_14;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));

  if (!v10)
  {
    v18 = sub_10000EF14("octagon-preload-keys");
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "No SOSAccount to update?", buf, 2u);
    }

    v20 = kSOSErrorDomain;
    v23 = NSLocalizedDescriptionKey;
    v24 = CFSTR("Device has no SOSAccount");
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v20, 1048, v21));

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
    CFRetain(*(CFTypeRef *)(a1 + 72));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  objc_msgSend(v12, "setOctagonSigningFullKeyRef:", v11);

  v13 = *(_QWORD *)(a1 + 80);
  if (v13)
    CFRetain(*(CFTypeRef *)(a1 + 80));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  objc_msgSend(v14, "setOctagonEncryptionFullKeyRef:", v13);

  v15 = sub_10000EF14("octagon-preload-keys");
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Success! Octagon Keys Preloaded!", buf, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v9 = 1;
LABEL_14:

  return v9;
}

uint64_t sub_1002136F0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  _QWORD v7[4];
  char v8;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100213780;
  v7[3] = &unk_1002ED370;
  v8 = *(_BYTE *)(a1 + 32);
  sub_1001D926C(v5, (uint64_t)CFSTR("CKKS4All update"), a3, v7);

  return 1;
}

uint64_t sub_100213780(uint64_t a1, uint64_t a2)
{
  return SOSFullPeerInfoSetCKKS4AllSupport(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_100213790(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "account"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trust"));
  v5 = objc_msgSend(v4, "copyPeerSetMatching:", &stru_1002ED3B0);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v5)
    CFRelease(v5);
  return 1;
}

BOOL sub_100213824(id a1, __OpaqueSOSPeerInfo *a2)
{
  return 1;
}

uint64_t sub_100213B84()
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100213C00;
  block[3] = &unk_1002ED818;
  block[4] = &qword_1003416C0;
  if (qword_1003416B8 != -1)
    dispatch_once(&qword_1003416B8, block);
  return qword_1003416C0;
}

uint64_t sub_100213C00(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass(&unk_1002ED7B8);
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

void sub_100213C30(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[2];
  if (v2)
  {
    a1[2] = 0;
    CFRelease(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    a1[3] = 0;
    CFRelease(v3);
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    a1[5] = 0;
    CFRelease(v4);
  }
  v5 = (const void *)a1[4];
  if (v5)
  {
    a1[4] = 0;
    CFRelease(v5);
  }
}

uint64_t sub_100213C94(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  CFTypeID v4;
  CFTypeID v5;
  CFTypeID v6;
  CFTypeID v7;
  uint64_t result;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  v3 = a1;
  v4 = CFGetTypeID(a1);
  if (v4 != sub_100213B84())
    return 0;
  v5 = CFGetTypeID(a2);
  if (v5 != sub_100213B84())
    return 0;
  v6 = CFGetTypeID(v3);
  if (v6 == sub_100213B84())
    sub_100214174(v3);
  else
    v3 = 0;
  v7 = CFGetTypeID(a2);
  if (v7 != sub_100213B84())
    return 0;
  sub_100214174(a2);
  result = 0;
  if (!a2 || !v3)
    return result;
  v9 = (const void *)v3[2];
  v10 = (const void *)a2[2];
  if (v9 && v10)
  {
    result = CFEqual(v9, v10);
    if (!(_DWORD)result)
      return result;
  }
  else if (v9 != v10)
  {
    return 0;
  }
  v11 = (const void *)v3[3];
  v12 = (const void *)a2[3];
  if (v11 && v12)
  {
    result = CFEqual(v11, v12);
    if (!(_DWORD)result)
      return result;
  }
  else if (v11 != v12)
  {
    return 0;
  }
  v13 = (const void *)v3[5];
  v14 = (const void *)a2[5];
  if (v13 && v14)
  {
    result = CFEqual(v13, v14);
    if (!(_DWORD)result)
      return result;
    goto LABEL_26;
  }
  if (v13 != v14)
    return 0;
LABEL_26:
  v15 = (const void *)v3[4];
  v16 = (const void *)a2[4];
  if (v15 && v16)
    return CFEqual(v15, v16) != 0;
  else
    return v15 == v16;
}

__CFString *sub_100213DD8(uint64_t a1, const __CFDictionary *a2)
{
  const __CFSet *Value;
  const __CFSet *v5;
  CFTypeID v6;
  CFMutableStringRef v7;
  const __CFSet *v8;
  CFMutableStringRef v9;
  const __CFSet *v10;
  CFMutableStringRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFDictionary *v19;
  CFMutableStringRef Mutable;
  const __CFDictionary *v21;
  const void *v22;
  const void *v23;
  __CFString *v24;
  const void *v25;
  const void *v26;
  const __CFString *v27;
  const __CFString *v28;
  CFStringRef Copy;
  CFStringRef v30;
  const void *v31;
  const void *v32;
  const void *v33;
  _QWORD v35[6];
  _QWORD context[6];
  _QWORD v37[3];
  char v38;
  CFRange v39;

  sub_100214174((_QWORD *)a1);
  sub_100214174((_QWORD *)a1);
  Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("PeerIDs"));
  if (!Value || (v5 = Value, v6 = CFGetTypeID(Value), v6 != CFSetGetTypeID()))
    v5 = 0;
  v7 = sub_100214454(v5);
  sub_100214174((_QWORD *)a1);
  v8 = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("Applicants"));
  v9 = sub_100214454(v8);
  sub_100214174((_QWORD *)a1);
  v10 = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("Rejections"));
  v11 = sub_100214454(v10);
  v19 = sub_100214524((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, (uint64_t)CFSTR("MEMBER"), (uint64_t)v7);
  if (v7)
    CFRelease(v7);
  if (v9)
    CFRelease(v9);
  if (v11)
    CFRelease(v11);
  v37[0] = 0;
  v37[1] = v37;
  v37[2] = 0x2000000000;
  v38 = 0;
  Mutable = CFStringCreateMutable(0, 0);
  v21 = *(const __CFDictionary **)(a1 + 32);
  context[0] = _NSConcreteStackBlock;
  context[1] = 0x40000000;
  context[2] = sub_10021438C;
  context[3] = &unk_1002ED888;
  context[4] = v37;
  context[5] = Mutable;
  CFDictionaryApplyFunction(v21, (CFDictionaryApplierFunction)sub_10021443C, context);
  _Block_object_dispose(v37, 8);
  v22 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("Generation"));
  v23 = (const void *)SOSGenerationCountCopyDescription(v22);
  v24 = CFStringCreateMutable(kCFAllocatorDefault, 0);
  v25 = sub_100214310(*(const __CFDictionary **)(a1 + 24));
  CFStringAppendFormat(v24, a2, CFSTR("<SOSRing: '%@'"), v25);
  v26 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("Generation"));
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 0x40000000;
  v35[2] = sub_100214358;
  v35[3] = &unk_1002ED8F8;
  v35[4] = v24;
  v35[5] = a2;
  SOSGenerationCountWithDescription(v26, v35);
  v27 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("LastModifier"));
  if (v27)
  {
    v28 = v27;
    if (CFStringGetLength(v27) > 8)
    {
      v39.location = 0;
      v39.length = 8;
      Copy = CFStringCreateWithSubstring(kCFAllocatorDefault, v28, v39);
    }
    else
    {
      Copy = CFStringCreateCopy(kCFAllocatorDefault, v28);
    }
    v30 = Copy;
    CFStringAppendFormat(v24, a2, CFSTR("Mod: %@, "), Copy);
    if (v30)
      CFRelease(v30);
  }
  else
  {
    CFStringAppendFormat(v24, a2, CFSTR("Mod: %@, "), 0);
  }
  v31 = CFDictionaryGetValue(v19, CFSTR("MEMBER"));
  CFStringAppendFormat(v24, a2, CFSTR("P: [%@], "), v31);
  v32 = CFDictionaryGetValue(v19, CFSTR("APPLICANTS"));
  CFStringAppendFormat(v24, a2, CFSTR("A: [%@], "), v32);
  v33 = CFDictionaryGetValue(v19, CFSTR("REJECTS"));
  CFStringAppendFormat(v24, a2, CFSTR("R: [%@], "), v33);
  CFStringAppendFormat(v24, a2, CFSTR("S: [%@]>"), Mutable);
  if (v23)
    CFRelease(v23);
  if (v19)
    CFRelease(v19);
  if (Mutable)
    CFRelease(Mutable);
  return v24;
}

__CFString *sub_10021414C(uint64_t a1)
{
  const __CFDictionary *v2;

  v2 = (const __CFDictionary *)sub_100005100();
  return sub_100213DD8(a1, v2);
}

uint64_t sub_100214174(_QWORD *a1)
{
  uint64_t result;
  NSObject *v2;
  _BOOL4 v3;
  const char *v4;
  uint8_t *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;

  if (!a1)
  {
    v2 = sub_10000EF14("SecError");
    v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v3)
      return result;
    v14 = 0;
    v4 = "no ring passed in";
    v5 = (uint8_t *)&v14;
    goto LABEL_18;
  }
  if (!a1[2])
  {
    v2 = sub_10000EF14("SecError");
    v6 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v6)
      return result;
    v13 = 0;
    v4 = "ring has no unSignedInformation";
    v5 = (uint8_t *)&v13;
    goto LABEL_18;
  }
  if (!a1[3])
  {
    v2 = sub_10000EF14("SecError");
    v7 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v7)
      return result;
    v12 = 0;
    v4 = "ring has no signedInformation";
    v5 = (uint8_t *)&v12;
    goto LABEL_18;
  }
  if (!a1[4])
  {
    v2 = sub_10000EF14("SecError");
    v8 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v8)
      return result;
    v11 = 0;
    v4 = "ring has no signatures";
    v5 = (uint8_t *)&v11;
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
    return 0;
  }
  if (a1[5])
    return 1;
  v2 = sub_10000EF14("SecError");
  v9 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v9)
  {
    v10 = 0;
    v4 = "ring has no data";
    v5 = (uint8_t *)&v10;
    goto LABEL_18;
  }
  return result;
}

const void *sub_100214310(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("RingName"));
  if (!Value)
    return 0;
  v2 = Value;
  v3 = CFGetTypeID(Value);
  if (v3 != CFStringGetTypeID())
    return 0;
  return v2;
}

void sub_100214358(uint64_t a1, uint64_t a2)
{
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), *(CFDictionaryRef *)(a1 + 40), CFSTR("Gen: %@, "), a2);
}

void sub_10021438C(uint64_t a1, CFStringRef theString)
{
  const __CFString *v2;
  CFStringRef Copy;
  CFRange v5;

  v2 = theString;
  if (theString)
  {
    if (CFStringGetLength(theString) > 8)
    {
      v5.location = 0;
      v5.length = 8;
      Copy = CFStringCreateWithSubstring(kCFAllocatorDefault, v2, v5);
    }
    else
    {
      Copy = CFStringCreateCopy(kCFAllocatorDefault, v2);
    }
    v2 = Copy;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    CFStringAppendCString(*(CFMutableStringRef *)(a1 + 40), ", ", 0x8000100u);
  CFStringAppend(*(CFMutableStringRef *)(a1 + 40), v2);
  if (v2)
    CFRelease(v2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

uint64_t sub_10021443C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

CFMutableStringRef sub_100214454(const __CFSet *a1)
{
  CFMutableStringRef Mutable;
  CFMutableStringRef v3;
  _QWORD v5[6];
  _QWORD v6[3];
  char v7;
  _QWORD context[5];

  Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  v3 = Mutable;
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2000000000;
  v7 = 0;
  if (a1)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 0x40000000;
    v5[2] = sub_100214610;
    v5[3] = &unk_1002ED8B0;
    v5[4] = v6;
    v5[5] = Mutable;
    context[0] = _NSConcreteStackBlock;
    context[1] = 0x40000000;
    context[2] = sub_1002146D0;
    context[3] = &unk_1002ED8D8;
    context[4] = v5;
    CFSetApplyFunction(a1, (CFSetApplierFunction)sub_1002146DC, context);
  }
  _Block_object_dispose(v6, 8);
  return v3;
}

CFDictionaryRef sub_100214524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  const void **v15;
  const void *v16;
  const __CFNull *v17;
  CFNullRef v18;
  CFDictionaryRef Copy;
  uint64_t *v21;
  const void **v22;

  v21 = &a10;
  v10 = 0;
  if (a9)
  {
    do
    {
      v10 += 2;
      v11 = v21;
      v21 += 2;
    }
    while (v11[1]);
  }
  v12 = v10 >> 1;
  v22 = (const void **)&a9;
  Mutable = CFDictionaryCreateMutable(0, v10 >> 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
    return 0;
  v14 = Mutable;
  if (v10)
  {
    do
    {
      v15 = v22;
      v16 = *v22;
      v22 += 2;
      v17 = (const __CFNull *)v15[1];
      if (v17)
        v18 = v17;
      else
        v18 = kCFNull;
      CFDictionarySetValue(v14, v16, v18);
      --v12;
    }
    while (v12);
  }
  Copy = CFDictionaryCreateCopy(0, v14);
  CFRelease(v14);
  return Copy;
}

void sub_100214610(uint64_t a1, CFStringRef theString)
{
  const __CFString *Copy;
  const __CFString *v5;
  CFRange v6;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    CFStringAppendCString(*(CFMutableStringRef *)(a1 + 40), ", ", 0x8000100u);
  if (theString)
  {
    if (CFStringGetLength(theString) > 8)
    {
      v6.location = 0;
      v6.length = 8;
      Copy = CFStringCreateWithSubstring(kCFAllocatorDefault, theString, v6);
    }
    else
    {
      Copy = CFStringCreateCopy(kCFAllocatorDefault, theString);
    }
    v5 = Copy;
    CFStringAppend(*(CFMutableStringRef *)(a1 + 40), Copy);
    if (v5)
      CFRelease(v5);
  }
  else
  {
    CFStringAppend(*(CFMutableStringRef *)(a1 + 40), 0);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

uint64_t sub_1002146D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1002146DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_1002146F0(_QWORD *a1)
{
  uint64_t v2;
  const __CFDictionary *v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  CFTypeID v6;
  unsigned int valuePtr;

  v2 = 64429;
  valuePtr = 64429;
  if (sub_100214174(a1))
  {
    v3 = (const __CFDictionary *)a1[3];
    if (v3)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v3, CFSTR("RingType"));
      if (Value)
      {
        v5 = Value;
        v6 = CFGetTypeID(Value);
        if (v6 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
          return valuePtr;
        }
        else
        {
          return 64429;
        }
      }
    }
  }
  return v2;
}

uint64_t sub_100214774(const __CFDictionary *a1, uint64_t a2)
{
  const void *Value;
  const void *v4;

  Value = CFDictionaryGetValue(a1, CFSTR("Generation"));
  v4 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 24), CFSTR("Generation"));
  return SOSGenerationIsOlder(Value, v4);
}

BOOL sub_1002147C0(uint64_t a1, const void *a2)
{
  const __CFSet *Value;

  sub_100214174((_QWORD *)a1);
  sub_100214174((_QWORD *)a1);
  Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("Applicants"));
  return CFSetContainsValue(Value, a2) != 0;
}

BOOL sub_10021480C(uint64_t a1, const void *a2)
{
  const __CFSet *Value;

  sub_100214174((_QWORD *)a1);
  sub_100214174((_QWORD *)a1);
  Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("Rejections"));
  return CFSetContainsValue(Value, a2) != 0;
}

void sub_100214858(uint64_t a1, const void *a2)
{
  __CFSet *Value;

  sub_100214174((_QWORD *)a1);
  Value = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("Rejections"));
  CFSetRemoveValue(Value, a2);
}

const void *sub_100214890(uint64_t a1)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  sub_100214174((_QWORD *)a1);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("BackupViews"));
  if (!Value)
    return 0;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 != CFSetGetTypeID())
    return 0;
  return v3;
}

BOOL sub_1002148E4(uint64_t a1, const void *a2)
{
  sub_100214174((_QWORD *)a1);
  if (a2)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("BackupViews"), a2);
  return a2 != 0;
}

BOOL sub_100214928(uint64_t a1, const void *a2)
{
  sub_100214174((_QWORD *)a1);
  if (a2)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("PeerIDs"), a2);
  return a2 != 0;
}

BOOL sub_10021496C(uint64_t a1, const void *a2)
{
  const __CFSet *Value;
  const __CFSet *v5;
  CFTypeID v6;

  sub_100214174((_QWORD *)a1);
  sub_100214174((_QWORD *)a1);
  Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("PeerIDs"));
  if (!Value || (v5 = Value, v6 = CFGetTypeID(Value), v6 != CFSetGetTypeID()))
    v5 = 0;
  return CFSetContainsValue(v5, a2) != 0;
}

CFMutableSetRef sub_1002149E4(uint64_t a1)
{
  const __CFSet *Value;
  const __CFSet *v3;
  CFTypeID v4;

  sub_100214174((_QWORD *)a1);
  Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("PeerIDs"));
  if (!Value || (v3 = Value, v4 = CFGetTypeID(Value), v4 != CFSetGetTypeID()))
    v3 = 0;
  return CFSetCreateMutableCopy(0, 0, v3);
}

void sub_100214A40(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef PeerID;
  CFTypeID v4;
  CFTypeID v5;

  if (cf)
  {
    PeerID = cf;
    v4 = CFGetTypeID(cf);
    if (v4 != SOSPeerInfoGetTypeID() || (PeerID = (CFTypeRef)SOSPeerInfoGetPeerID(PeerID)) != 0)
    {
      v5 = CFGetTypeID(PeerID);
      if (v5 == CFStringGetTypeID())
        sub_100214AC4(*(_QWORD *)(a1 + 32), PeerID);
    }
  }
}

void sub_100214AC4(uint64_t a1, const void *a2)
{
  __CFSet *Value;
  __CFSet *v5;
  CFTypeID v6;

  sub_100214174((_QWORD *)a1);
  Value = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("PeerIDs"));
  if (!Value || (v5 = Value, v6 = CFGetTypeID(Value), v6 != CFSetGetTypeID()))
    v5 = 0;
  CFSetAddValue(v5, a2);
}

void sub_100214B28(uint64_t a1, uint64_t a2)
{
  const __CFSet *Value;
  const __CFSet *v5;
  CFTypeID v6;
  _QWORD context[5];

  sub_100214174((_QWORD *)a1);
  sub_100214174((_QWORD *)a1);
  Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("PeerIDs"));
  if (Value)
  {
    v5 = Value;
    v6 = CFGetTypeID(Value);
    if (v6 == CFSetGetTypeID())
    {
      context[0] = _NSConcreteStackBlock;
      context[1] = 0x40000000;
      context[2] = sub_100214BD4;
      context[3] = &unk_1002ED860;
      context[4] = a2;
      CFSetApplyFunction(v5, (CFSetApplierFunction)sub_1002146DC, context);
    }
  }
}

uint64_t sub_100214BD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100214BE0(const void *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t Instance;
  const void *v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  CFMutableDictionaryRef v11;
  CFMutableDictionaryRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  const __CFUUID *v17;
  const __CFUUID *v18;
  CFStringRef v19;
  CFMutableSetRef v20;
  CFMutableSetRef v21;
  CFMutableSetRef v22;
  uint64_t v23;
  uint64_t result;
  const __CFString *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  NSObject *v30;
  NSObject *v31;
  int valuePtr;
  uint8_t buf[12];
  int v34;
  uint8_t v35[16];

  v6 = sub_100213B84();
  Instance = _CFRuntimeCreateInstance(0, v6, 32, 0);
  v8 = (const void *)SOSGenerationCreate();
  if (!a1)
  {
    SOSCreateError(1036, CFSTR("No ring name"), 0, a3);
    if (v8)
LABEL_29:
      CFRelease(v8);
LABEL_30:
    v23 = 0;
    result = 0;
    v22 = (CFMutableSetRef)Instance;
    if (!Instance)
      return result;
    goto LABEL_31;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)(Instance + 16) = Mutable;
  if (!Mutable)
  {
    v25 = CFSTR("Failed to allocate unsigned information area");
    goto LABEL_20;
  }
  v10 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)(Instance + 24) = v10;
  if (!v10)
  {
    v25 = CFSTR("Failed to allocate signed information area");
    goto LABEL_20;
  }
  v11 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)(Instance + 32) = v11;
  if (!v11)
  {
    v25 = CFSTR("Failed to allocate signature area");
    goto LABEL_20;
  }
  v12 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)(Instance + 40) = v12;
  if (!v12)
  {
    v25 = CFSTR("Failed to allocate data area");
    goto LABEL_20;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 24), CFSTR("RingName"), a1);
  valuePtr = a2;
  sub_100214174((_QWORD *)Instance);
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (!v13)
  {
    v25 = CFSTR("Failed to allocate ring type");
    goto LABEL_20;
  }
  v14 = v13;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 24), CFSTR("RingType"), v13);
  CFRelease(v14);
  v34 = 1;
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
  if (!v15)
  {
    v30 = sub_10000EF14("ring");
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Could not create version number", buf, 2u);
    }
    v25 = CFSTR("Failed to allocate ring version");
LABEL_20:
    SOSCreateError(1024, v25, 0, a3);
    v26 = *(const void **)(Instance + 16);
    if (v26)
    {
      *(_QWORD *)(Instance + 16) = 0;
      CFRelease(v26);
    }
    v27 = *(const void **)(Instance + 24);
    if (v27)
    {
      *(_QWORD *)(Instance + 24) = 0;
      CFRelease(v27);
    }
    v28 = *(const void **)(Instance + 32);
    if (v28)
    {
      *(_QWORD *)(Instance + 32) = 0;
      CFRelease(v28);
    }
    v29 = *(const void **)(Instance + 40);
    if (v29)
    {
      *(_QWORD *)(Instance + 40) = 0;
      CFRelease(v29);
    }
    if (v8)
      goto LABEL_29;
    goto LABEL_30;
  }
  v16 = v15;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 24), CFSTR("RingVersion"), v15);
  CFRelease(v16);
  v17 = CFUUIDCreate(0);
  if (!v17)
  {
    v31 = sub_10000EF14("ring");
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Could not create ring identifier", v35, 2u);
    }
    v25 = CFSTR("Failed to allocate ring identifier");
    goto LABEL_20;
  }
  v18 = v17;
  v19 = CFUUIDCreateString(0, v17);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 24), CFSTR("Identifier"), v19);
  CFRelease(v18);
  if (v19)
    CFRelease(v19);
  v20 = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  sub_100214174((_QWORD *)Instance);
  if (!v20)
  {
    v25 = CFSTR("Failed to allocate applicant area");
    goto LABEL_20;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 16), CFSTR("Applicants"), v20);
  CFRelease(v20);
  v21 = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  sub_100214174((_QWORD *)Instance);
  if (!v21)
  {
    v25 = CFSTR("Failed to allocate rejection area");
    goto LABEL_20;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 16), CFSTR("Rejections"), v21);
  CFRelease(v21);
  if (!v8)
  {
    v25 = CFSTR("Failed to allocate generation count");
    goto LABEL_20;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 24), CFSTR("Generation"), v8);
  v22 = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  if (!sub_100214928(Instance, v22))
  {
    v25 = CFSTR("Failed to allocate PeerID");
    goto LABEL_20;
  }
  CFRelease(v8);
  v23 = Instance;
  result = Instance;
  if (!v22)
    return result;
LABEL_31:
  CFRelease(v22);
  return v23;
}

BOOL sub_100215024(uint64_t a1)
{
  const __CFSet *Value;
  const __CFSet *v3;
  CFTypeID v4;

  sub_100214174((_QWORD *)a1);
  Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("PeerIDs"));
  if (!Value || (v3 = Value, v4 = CFGetTypeID(Value), v4 != CFSetGetTypeID()))
    v3 = 0;
  return CFSetGetCount(v3) == 0;
}

void sub_100215084(uint64_t a1)
{
  __CFSet *Value;
  __CFSet *v3;
  __CFSet *v4;
  __CFSet *v5;
  CFTypeID v6;
  const void *v7;
  const void *v8;

  sub_100214174((_QWORD *)a1);
  Value = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("Applicants"));
  CFSetRemoveAllValues(Value);
  sub_100214174((_QWORD *)a1);
  v3 = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("Rejections"));
  CFSetRemoveAllValues(v3);
  sub_100214174((_QWORD *)a1);
  v4 = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("PeerIDs"));
  if (!v4 || (v5 = v4, v6 = CFGetTypeID(v4), v6 != CFSetGetTypeID()))
    v5 = 0;
  CFSetRemoveAllValues(v5);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 32));
  v7 = (const void *)SOSGenerationCreate();
  if (v7)
  {
    v8 = v7;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Generation"), v7);
    CFRelease(v8);
  }
}

BOOL sub_100215158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  const void *v5;
  const void *Value;
  const void *v7;
  CFTypeID v8;
  const void *v9;

  v4 = (const void *)SOSCopyIDOfKey(a2, a3);
  v5 = v4;
  if (a1 && v4)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v4);
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 != CFDataGetTypeID())
        v7 = 0;
    }
    goto LABEL_8;
  }
  v7 = 0;
  v9 = 0;
  if (v4)
  {
LABEL_8:
    CFRelease(v5);
    v9 = v7;
  }
  return v9 != 0;
}

BOOL sub_1002151EC(uint64_t a1, __SecKey *a2, CFTypeRef *a3)
{
  const __CFData *v6;
  CFDataRef v7;
  const __CFData *Value;
  const __CFData *v9;
  CFTypeID v10;
  uint64_t v11;
  CFIndex *v12;
  const uint8_t *BytePtr;
  size_t Length;
  const uint8_t *v15;
  size_t v16;
  _BOOL8 v17;

  v6 = (const __CFData *)SOSCopyIDOfKey(a2, a3);
  v7 = v6;
  if (a1 && v6)
  {
    Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v6);
    if (Value && (v9 = Value, v10 = CFGetTypeID(Value), v10 == CFDataGetTypeID()))
    {
      CFRelease(v7);
      v12 = (CFIndex *)ccsha256_di(v11);
      v7 = sub_1002152EC(v12, a1, a3);
      BytePtr = CFDataGetBytePtr(v7);
      Length = CFDataGetLength(v7);
      v15 = CFDataGetBytePtr(v9);
      v16 = CFDataGetLength(v9);
      v17 = SecKeyRawVerify(a2, 0, BytePtr, Length, v15, v16) == 0;
      if (!v7)
        return v17;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = 0;
    if (!v6)
      return v17;
  }
  CFRelease(v7);
  return v17;
}

CFDataRef sub_1002152EC(CFIndex *a1, uint64_t a2, CFTypeRef *a3)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  const UInt8 *v9;
  CFDataRef result;
  CFDataRef v11;
  CFDataRef v12;
  uint64_t v13;

  __chkstk_darwin(a1);
  v9 = (const UInt8 *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    memset((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v6);
  result = (CFDataRef)sub_1000212A4(*(const __CFString **)(a2 + 24), a3, v6, v7, v8);
  if (result)
  {
    v11 = result;
    result = (CFDataRef)malloc_type_malloc((size_t)result, 0x88877CA1uLL);
    if (result)
    {
      v12 = result;
      if (sub_100020FA0(*(const __CFString **)(a2 + 24), a3, 0, (UInt8 *)v12, (unint64_t)v11 + (_QWORD)v12))
      {
        ccdigest(a1, v11, v12, v9);
        free(v12);
        return CFDataCreate(0, v9, *a1);
      }
      else
      {
        free(v12);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10021540C(uint64_t a1, __SecKey *a2, CFTypeRef *a3)
{
  BOOL v3;
  uint64_t v4;
  const void *Value;
  const void *v9;
  const void *v10;
  NSObject *v11;
  uint8_t v13[16];

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("Generation"));
    v9 = (const void *)SOSGenerationIncrementAndCreate(Value);
    if (v9)
    {
      v10 = v9;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Generation"), v9);
      CFRelease(v10);
    }
    v11 = sub_10000EF14("Development");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "SOSRingEnsureRingConsistency requires ring membership and generation count consistency check", v13, 2u);
    }
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 32));
    sub_1002154F0(a1, a2, a3);
  }
  return v4;
}

void sub_1002154F0(uint64_t a1, __SecKey *a2, CFTypeRef *a3)
{
  CFIndex *v6;
  const __CFData *v7;
  CFDataRef v8;
  const void *PublicFromPrivate;
  const void *v10;

  v6 = (CFIndex *)ccsha256_di(a1);
  v7 = sub_1002152EC(v6, a1, a3);
  v8 = sub_1002155B0(a2, v7);
  PublicFromPrivate = (const void *)SecKeyCreatePublicFromPrivate(a2);
  v10 = (const void *)SOSCopyIDOfKey(PublicFromPrivate, a3);
  if (v10)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v10, v8);
  if (PublicFromPrivate)
    CFRelease(PublicFromPrivate);
  if (v10)
    CFRelease(v10);
  CFRelease(v8);
  if (v7)
    CFRelease(v7);
}

CFDataRef sub_1002155B0(__SecKey *a1, const __CFData *a2)
{
  uint64_t Size;
  size_t v5;
  uint64_t v6;
  UInt8 *v7;
  const uint8_t *BytePtr;
  size_t Length;
  size_t sigLen;

  Size = SecKeyGetSize(a1, 1);
  sigLen = Size + 16;
  __chkstk_darwin(Size);
  v7 = (UInt8 *)&sigLen - v6;
  if (v5)
    memset((char *)&sigLen - v6, 170, v5);
  BytePtr = CFDataGetBytePtr(a2);
  Length = CFDataGetLength(a2);
  if (SecKeyRawSign(a1, 0, BytePtr, Length, v7, &sigLen))
    return 0;
  else
    return CFDataCreate(0, v7, sigLen);
}

void sub_10021679C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_100216868(uint64_t a1, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10021687C(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100216900;
  v3[3] = &unk_1002ED948;
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "SOSMonitorModeSOSIsActiveWithCallback:", v3);

}

uint64_t sub_100216900(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10021690C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
  objc_msgSend(v1, "SOSMonitorModeEnableSOS");

}

void sub_10021693C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
  objc_msgSend(v1, "SOSMonitorModeDisableSOS");

}

void sub_100216BBC(id a1)
{
  void *v1;
  SOSControlServer *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = objc_autoreleasePoolPush();
  v2 = objc_opt_new(SOSControlServer);
  v3 = (void *)qword_1003416D8;
  qword_1003416D8 = (uint64_t)v2;

  v4 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.securityd.sos"));
  v5 = (void *)qword_1003416D0;
  qword_1003416D0 = (uint64_t)v4;

  objc_msgSend((id)qword_1003416D0, "setDelegate:", qword_1003416D8);
  objc_msgSend((id)qword_1003416D0, "resume");
  objc_autoreleasePoolPop(v1);
}

void sub_100217348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10021741C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100217454(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFTypeRef v5;
  CFTypeID v6;
  CFTypeID v7;
  CFTypeID TypeID;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFDictionaryRef v22;
  dispatch_queue_global_t global_queue;
  void *v24;
  id v25;

  if (!cf || (v5 = cf, v6 = CFGetTypeID(cf), v6 != CFStringGetTypeID()))
    v5 = 0;
  if (a3)
  {
    v7 = CFGetTypeID(a3);
    TypeID = CFDataGetTypeID();
    if (v5)
    {
      if (v7 == TypeID)
      {
        v9 = *(void **)(a1 + 32);
        v25 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "circleName"));
        v10 = v9;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "SOSTransportMessageGetAccount"));
        sub_1001CDAF8(v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "peerID"));
        v13 = (const void *)SOSMessageKeyCreateFromTransportToPeer(v10, v12, v5);

        v22 = sub_100214524(v14, v15, v16, v17, v18, v19, v20, v21, (uint64_t)v13, (uint64_t)a3);
        global_queue = dispatch_get_global_queue(-2, 0);
        v24 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
        SOSCloudKeychainPutObjectsInCloud(v22, v24, &stru_1002EDAE0);

        if (v22)
          CFRelease(v22);
        if (v13)
          CFRelease(v13);

      }
    }
  }
}

uint64_t sub_1002175C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void sub_1002175D8(id a1, __CFDictionary *a2, __CFError *a3)
{
  const void *v4;
  NSObject *v5;
  int v6;
  __CFError *v7;

  if (a3)
  {
    v4 = sub_10000EF14("SecError");
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error putting: %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_100217684(_QWORD *a1, CFTypeRef cf)
{
  CFTypeRef v3;
  CFTypeID v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  CFTypeRef v10;
  _QWORD *v11;
  CFTypeRef cfa;

  if (!cf || (v3 = cf, v4 = CFGetTypeID(cf), v4 != CFStringGetTypeID()))
    v3 = 0;
  cfa = 0;
  v5 = (void *)a1[4];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "circleName"));
  v7 = objc_msgSend(v5, "SOSTransportMessageSendMessageIfNeeded:circleName:pID:err:", v5, v6, v3, &cfa);
  v8 = *(_QWORD *)(a1[5] + 8);
  if (*(_BYTE *)(v8 + 24))
    v9 = v7;
  else
    v9 = 0;
  *(_BYTE *)(v8 + 24) = v9;

  if (!*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    v11 = (_QWORD *)a1[6];
    if (v11)
    {
      v10 = cfa;
      if (*v11 || !cfa)
        goto LABEL_9;
      *(_QWORD *)a1[6] = CFRetain(cfa);
    }
  }
  v10 = cfa;
LABEL_9:
  if (v10)
  {
    cfa = 0;
    CFRelease(v10);
  }
}

uint64_t sub_100217768(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_10021777C(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFTypeID v6;
  CFTypeRef v7;
  CFTypeID v8;
  const void *v9;
  NSObject *v10;
  CFTypeRef v11;
  CFTypeRef cfa;
  uint8_t buf[4];
  CFTypeRef v14;
  __int16 v15;
  CFTypeRef v16;

  if (!cf || (v6 = CFGetTypeID(cf), v7 = cf, v6 != CFStringGetTypeID()))
    v7 = 0;
  if (a3 && (v8 = CFGetTypeID(a3), v8 == CFDataGetTypeID()))
  {
    cfa = 0;
    if (v7
      && objc_msgSend(*(id *)(a1 + 32), "SOSTransportMessageHandlePeerMessage:id:cm:err:", *(_QWORD *)(a1 + 32), v7, a3, &cfa))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), cf);
      goto LABEL_13;
    }
  }
  else
  {
    cfa = 0;
  }
  v9 = sub_10000EF14("transport");
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v14 = v7;
    v15 = 2112;
    v16 = cfa;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ KVSTransport handle message failed: %@", buf, 0x16u);
  }

LABEL_13:
  v11 = cfa;
  if (cfa)
  {
    cfa = 0;
    CFRelease(v11);
  }
}

void sub_1002178D4(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFTypeID v6;
  CFTypeID TypeID;
  CFTypeID v8;
  id v9;
  __int128 v10;
  _QWORD context[4];
  __int128 v12;
  CFTypeRef v13;
  CFRange v14;

  if (cf)
  {
    v6 = CFGetTypeID(cf);
    TypeID = CFStringGetTypeID();
    if (a3)
    {
      if (v6 == TypeID)
      {
        v8 = CFGetTypeID(a3);
        if (v8 == CFArrayGetTypeID())
        {
          context[0] = _NSConcreteStackBlock;
          context[1] = 3221225472;
          context[2] = sub_1002179B4;
          context[3] = &unk_1002EDAA0;
          v13 = cf;
          v10 = *(_OWORD *)(a1 + 32);
          v9 = (id)v10;
          v12 = v10;
          v14.length = CFArrayGetCount((CFArrayRef)a3);
          v14.location = 0;
          CFArrayApplyFunction((CFArrayRef)a3, v14, (CFArrayApplierFunction)sub_100217768, context);

        }
      }
    }
  }
}

void sub_1002179B4(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const __CFArray *v5;
  _QWORD context[4];
  id v7;
  uint64_t v8;
  CFTypeRef v9;
  CFRange v10;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      v5 = *(const __CFArray **)(a1 + 40);
      if (v5)
      {
        context[0] = _NSConcreteStackBlock;
        context[1] = 3221225472;
        context[2] = sub_100217A74;
        context[3] = &unk_1002EDAA0;
        v8 = *(_QWORD *)(a1 + 48);
        v9 = cf;
        v7 = *(id *)(a1 + 32);
        v10.length = CFArrayGetCount(v5);
        v10.location = 0;
        CFArrayApplyFunction(v5, v10, (CFArrayApplierFunction)sub_100217768, context);

      }
    }
  }
}

void sub_100217A74(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  const void *v6;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      v5 = (const void *)SOSMessageKeyCreateWithCircleNameAndPeerNames(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), cf);
      sub_100217B14(*(void **)(a1 + 32), v5);
      if (v5)
        CFRelease(v5);
      v6 = (const void *)SOSMessageKeyCreateWithCircleNameAndPeerNames(*(_QWORD *)(a1 + 40), cf, *(_QWORD *)(a1 + 48));
      sub_100217B14(*(void **)(a1 + 32), v6);
      if (v6)
        CFRelease(v6);
    }
  }
}

void sub_100217B14(void *a1, const void *a2)
{
  id v3;

  v3 = a1;
  if (!objc_msgSend(v3, "pending_changes"))
    objc_msgSend(v3, "setPending_changes:", CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks));
  CFDictionarySetValue((CFMutableDictionaryRef)objc_msgSend(v3, "pending_changes"), a2, kCFNull);

}

void sub_100217B98(uint64_t a1, uint64_t a2)
{
  uint64_t PeerID;
  const void *v4;
  const void *v5;

  PeerID = SOSPeerInfoGetPeerID(a2);
  v4 = (const void *)SOSMessageKeyCreateFromPeerToTransport(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), PeerID);
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), v4);
    CFRelease(v5);
  }
}

void sub_100219054(uint64_t a1, const void *a2)
{
  CFSetSetValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

uint64_t sub_10021905C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_100219070(uint64_t a1, uint64_t a2)
{
  uint64_t PeerInfo;

  PeerInfo = SOSFullPeerInfoGetPeerInfo(objc_msgSend(*(id *)(a1 + 32), "fullPeerInfo"));
  return SOSCircleUpdatePeerInfo(a2, PeerInfo);
}

uint64_t sub_1002190A0(uint64_t a1, uint64_t a2)
{
  const void *v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = sub_10000EF14("circleChange");
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling SOSCircleUpdatePeerInfo for gestalt change", v7, 2u);
  }

  return SOSCircleUpdatePeerInfo(a2, objc_msgSend(*(id *)(a1 + 32), "peerInfo"));
}

id objc_msgSend_AddMultiSamplerForName_withTimeInterval_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "AddMultiSamplerForName:withTimeInterval:block:");
}

id objc_msgSend_AllOctagonFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "AllOctagonFlags");
}

id objc_msgSend_CKKSGroupWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CKKSGroupWithName:");
}

id objc_msgSend_CKKSPowerEvent_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CKKSPowerEvent:count:");
}

id objc_msgSend_CKKSPowerEvent_zone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CKKSPowerEvent:zone:");
}

id objc_msgSend_CKKSPowerEvent_zone_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CKKSPowerEvent:zone:count:");
}

id objc_msgSend_CKPropertiesDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CKPropertiesDescription");
}

id objc_msgSend_CKRecordName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CKRecordName");
}

id objc_msgSend_CKRecordWithZoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CKRecordWithZoneID:");
}

id objc_msgSend_OctagonAllStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "OctagonAllStates");
}

id objc_msgSend_OctagonHealthSourceStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "OctagonHealthSourceStates");
}

id objc_msgSend_OctagonInAccountStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "OctagonInAccountStates");
}

id objc_msgSend_OctagonNotInCliqueStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "OctagonNotInCliqueStates");
}

id objc_msgSend_OctagonReadyStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "OctagonReadyStates");
}

id objc_msgSend_OctagonStateMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "OctagonStateMap");
}

id objc_msgSend_PCSPublicKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PCSPublicKey");
}

id objc_msgSend_PCSServiceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "PCSServiceID");
}

id objc_msgSend_SOSMonitorModeDisableSOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSMonitorModeDisableSOS");
}

id objc_msgSend_SOSMonitorModeEnableSOS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSMonitorModeEnableSOS");
}

id objc_msgSend_SOSMonitorModeSOSIsActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSMonitorModeSOSIsActive");
}

id objc_msgSend_SOSMonitorModeSOSIsActiveDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSMonitorModeSOSIsActiveDescription");
}

id objc_msgSend_SOSMonitorModeSOSIsActiveWithCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSMonitorModeSOSIsActiveWithCallback:");
}

id objc_msgSend_SOSTransportKeyParameterGetAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportKeyParameterGetAccount:");
}

id objc_msgSend_SOSTransportKeyParameterGetTransportType_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportKeyParameterGetTransportType:err:");
}

id objc_msgSend_SOSTransportKeyParameterHandleKeyParameterChanges_data_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportKeyParameterHandleKeyParameterChanges:data:err:");
}

id objc_msgSend_SOSTransportKeyParameterKVSAppendKeyInterests_ak_firstUnLock_unlocked_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportKeyParameterKVSAppendKeyInterests:ak:firstUnLock:unlocked:err:");
}

id objc_msgSend_SOSTransportKeyParameterPublishCloudParameters_data_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportKeyParameterPublishCloudParameters:data:err:");
}

id objc_msgSend_SOSTransportMessageCalculateNextTimer_rtt_peerid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageCalculateNextTimer:rtt:peerid:");
}

id objc_msgSend_SOSTransportMessageCleanupAfterPeerMessages_peers_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageCleanupAfterPeerMessages:peers:err:");
}

id objc_msgSend_SOSTransportMessageFlushChanges_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageFlushChanges:err:");
}

id objc_msgSend_SOSTransportMessageGetAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageGetAccount");
}

id objc_msgSend_SOSTransportMessageGetCircleName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageGetCircleName");
}

id objc_msgSend_SOSTransportMessageGetEngine(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageGetEngine");
}

id objc_msgSend_SOSTransportMessageGetTransportType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageGetTransportType");
}

id objc_msgSend_SOSTransportMessageHandlePeerMessage_id_cm_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageHandlePeerMessage:id:cm:err:");
}

id objc_msgSend_SOSTransportMessageHandlePeerMessageReturnsHandledCopy_peerMessages_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageHandlePeerMessageReturnsHandledCopy:peerMessages:err:");
}

id objc_msgSend_SOSTransportMessageKVSAppendKeyInterest_ak_firstUnlock_unlocked_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageKVSAppendKeyInterest:ak:firstUnlock:unlocked:err:");
}

id objc_msgSend_SOSTransportMessageSendMessage_id_messageToSend_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageSendMessage:id:messageToSend:err:");
}

id objc_msgSend_SOSTransportMessageSendMessageIfNeeded_circleName_pID_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageSendMessageIfNeeded:circleName:pID:err:");
}

id objc_msgSend_SOSTransportMessageSendMessages_pm_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageSendMessages:pm:err:");
}

id objc_msgSend_SOSTransportMessageSyncWithPeers_p_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageSyncWithPeers:p:err:");
}

id objc_msgSend_SOSTransportMessageUpdateLastMessageSentTimetstamp_peer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageUpdateLastMessageSentTimetstamp:peer:");
}

id objc_msgSend_SOSTransportMessageUpdateRTTs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SOSTransportMessageUpdateRTTs:");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLSession");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__appearsToBeEmail(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_appearsToBeEmail");
}

id objc_msgSend__appearsToBePhoneNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_appearsToBePhoneNumber");
}

id objc_msgSend__deleteAll_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_deleteAll:");
}

id objc_msgSend__deleteFromDatabase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_deleteFromDatabase:");
}

id objc_msgSend__endpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_endpoint");
}

id objc_msgSend__fetchAndUpdateMirrorEntry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_fetchAndUpdateMirrorEntry:");
}

id objc_msgSend__init(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_init");
}

id objc_msgSend__isCKServerInternalError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isCKServerInternalError");
}

id objc_msgSend__isRetryableNSURLError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isRetryableNSURLError");
}

id objc_msgSend__newZeroingDataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_newZeroingDataWithBytes:length:");
}

id objc_msgSend__onQueueDropClassAKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onQueueDropClassAKeys");
}

id objc_msgSend__onQueueEnsureInBackupRings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onQueueEnsureInBackupRings:");
}

id objc_msgSend__onQueueFetchRemoteChangesForZoneIDs_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onQueueFetchRemoteChangesForZoneIDs:completion:");
}

id objc_msgSend__onQueueRecordRetiredPeersInCircle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onQueueRecordRetiredPeersInCircle");
}

id objc_msgSend__onQueueResetReachabilityDependency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onQueueResetReachabilityDependency");
}

id objc_msgSend__onQueueRunReachabilityDependency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onQueueRunReachabilityDependency");
}

id objc_msgSend__onQueueZoneIsReadyForFetching_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onQueueZoneIsReadyForFetching:");
}

id objc_msgSend__onqueueContains_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueContains:");
}

id objc_msgSend__onqueueDeliverCloudKitStateChanges_dispatchGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueDeliverCloudKitStateChanges:dispatchGroup:");
}

id objc_msgSend__onqueueDeliverCurrentCloudKitState_listenerQueue_oldStatus_group_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueDeliverCurrentCloudKitState:listenerQueue:oldStatus:group:");
}

id objc_msgSend__onqueueFindSecDbItem_accessGroup_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueFindSecDbItem:accessGroup:error:");
}

id objc_msgSend__onqueueFindSecDbItemWithQuery_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueFindSecDbItemWithQuery:error:");
}

id objc_msgSend__onqueueFindSecDbItemWithUUID_accessGroup_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueFindSecDbItemWithUUID:accessGroup:error:");
}

id objc_msgSend__onqueueGenerateNewUUIDPersistentRefOnSecItem_viewState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueGenerateNewUUIDPersistentRefOnSecItem:viewState:");
}

id objc_msgSend__onqueueHandleFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueHandleFlag:");
}

id objc_msgSend__onqueueHandleIQEChange_attributes_class_viewState_sortedForThisView_keyCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueHandleIQEChange:attributes:class:viewState:sortedForThisView:keyCache:");
}

id objc_msgSend__onqueueHandleIQEChange_item_viewState_sortedForThisView_keyCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueHandleIQEChange:item:viewState:sortedForThisView:keyCache:");
}

id objc_msgSend__onqueueHandleIQEDelete_class_viewState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueHandleIQEDelete:class:viewState:");
}

id objc_msgSend__onqueueHandleMismatchedViewItem_secDbClass_attributes_intendedView_viewState_keyCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueHandleMismatchedViewItem:secDbClass:attributes:intendedView:viewState:keyCache:");
}

id objc_msgSend__onqueueHandlePendingFlagLater_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueHandlePendingFlagLater:");
}

id objc_msgSend__onqueueIsErrorMissingSyncKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueIsErrorMissingSyncKey:");
}

id objc_msgSend__onqueueLoadOrCreateAccountMetadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueLoadOrCreateAccountMetadata:");
}

id objc_msgSend__onqueueModifyAllRecords_as_viewState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueModifyAllRecords:as:viewState:");
}

id objc_msgSend__onqueueModifyRecordAsError_recordError_viewState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueModifyRecordAsError:recordError:viewState:");
}

id objc_msgSend__onqueueNextStateMachineTransition(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueNextStateMachineTransition");
}

id objc_msgSend__onqueueNextStateMachineTransition_flags_pendingFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueNextStateMachineTransition:flags:pendingFlags:");
}

id objc_msgSend__onqueueOtherDevicesReportHavingTLKs_trustStates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueOtherDevicesReportHavingTLKs:trustStates:");
}

id objc_msgSend__onqueuePokeStateMachine(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueuePokeStateMachine");
}

id objc_msgSend__onqueuePrioritizePriorityViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueuePrioritizePriorityViews");
}

id objc_msgSend__onqueueProcessOutgoingQueue_priorityRush_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueProcessOutgoingQueue:priorityRush:");
}

id objc_msgSend__onqueueRecheck(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueRecheck");
}

id objc_msgSend__onqueueRecheckConditions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueRecheckConditions");
}

id objc_msgSend__onqueueRegisterMultiStateArrivalWatcher_startTimeout_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueRegisterMultiStateArrivalWatcher:startTimeout:");
}

id objc_msgSend__onqueueRemoveFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueRemoveFlag:");
}

id objc_msgSend__onqueueResetAllInflightOQE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueResetAllInflightOQE:");
}

id objc_msgSend__onqueueSaveRecordsWithDelay_viewState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueSaveRecordsWithDelay:viewState:");
}

id objc_msgSend__onqueueSendAnyPendingFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueSendAnyPendingFlags");
}

id objc_msgSend__onqueueSetFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueSetFlag:");
}

id objc_msgSend__onqueueSetNetworkReachability_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueSetNetworkReachability:");
}

id objc_msgSend__onqueueStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueStart");
}

id objc_msgSend__onqueueStartNextStateMachineOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueStartNextStateMachineOperation:");
}

id objc_msgSend__onqueueTimeoutError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueTimeoutError");
}

id objc_msgSend__onqueueTimerTick(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueTimerTick");
}

id objc_msgSend__onqueueTrigger_maximumDelay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueTrigger:maximumDelay:");
}

id objc_msgSend__onqueueUpdateAccountState_deliveredSemaphore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueUpdateAccountState:deliveredSemaphore:");
}

id objc_msgSend__onqueueUpdateAccountState_dispatchGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueUpdateAccountState:dispatchGroup:");
}

id objc_msgSend__onqueueUpdateCKDeviceID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueUpdateCKDeviceID:");
}

id objc_msgSend__onqueueUpdateCirclePeerID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueUpdateCirclePeerID:");
}

id objc_msgSend__onqueueUpdateIQE_withState_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_onqueueUpdateIQE:withState:error:");
}

id objc_msgSend__password_tmp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_password_tmp");
}

id objc_msgSend__saveToDatabaseWithConnection_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_saveToDatabaseWithConnection:error:");
}

id objc_msgSend__secKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_secKey");
}

id objc_msgSend__setFileNameLocalizationEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setFileNameLocalizationEnabled:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__strictlyUnarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_strictlyUnarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_aa_altDSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_altDSID");
}

id objc_msgSend_aa_appleAccounts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_appleAccounts");
}

id objc_msgSend_aa_appleAccountsWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_appleAccountsWithError:");
}

id objc_msgSend_aa_isAccountClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_isAccountClass:");
}

id objc_msgSend_aa_personID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_personID");
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aa_primaryAppleAccount");
}

id objc_msgSend_acceptGroupInvite_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acceptGroupInvite:completion:");
}

id objc_msgSend_acceptInviteForGroupID_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acceptInviteForGroupID:completion:");
}

id objc_msgSend_acceptanceStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acceptanceStatus");
}

id objc_msgSend_accessGroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessGroup");
}

id objc_msgSend_accessGroupRateLimitState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessGroupRateLimitState");
}

id objc_msgSend_accessGroupToNextMessageToSend(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessGroupToNextMessageToSend");
}

id objc_msgSend_accessGroupToTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessGroupToTimer");
}

id objc_msgSend_accessGroups(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessGroups");
}

id objc_msgSend_accessgroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessgroup");
}

id objc_msgSend_accessibility(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessibility");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "account");
}

id objc_msgSend_accountAccessTelemetryOptInForAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountAccessTelemetryOptInForAccount:");
}

id objc_msgSend_accountAvailable_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountAvailable:error:");
}

id objc_msgSend_accountChanged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountChanged");
}

id objc_msgSend_accountCirclePeerID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountCirclePeerID");
}

id objc_msgSend_accountCirclePeerIDInitialized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountCirclePeerIDInitialized");
}

id objc_msgSend_accountConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountConfiguration");
}

id objc_msgSend_accountFromDER_end_factory_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountFromDER:end:factory:error:");
}

id objc_msgSend_accountFromData_factory_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountFromData:factory:error:");
}

id objc_msgSend_accountInScriptBypassMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountInScriptBypassMode");
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountInfoWithCompletionHandler:");
}

id objc_msgSend_accountIsCDPCapable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountIsCDPCapable");
}

id objc_msgSend_accountIsCDPCapableByAltDSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountIsCDPCapableByAltDSID:");
}

id objc_msgSend_accountIsChanging(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountIsChanging");
}

id objc_msgSend_accountIsDemoAccountByAltDSID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountIsDemoAccountByAltDSID:error:");
}

id objc_msgSend_accountKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountKey");
}

id objc_msgSend_accountKeyDerivationParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountKeyDerivationParameters");
}

id objc_msgSend_accountKeyIsTrusted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountKeyIsTrusted");
}

id objc_msgSend_accountLoggedInDependency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountLoggedInDependency");
}

id objc_msgSend_accountMetadataStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountMetadataStore");
}

id objc_msgSend_accountNoLongerAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountNoLongerAvailable");
}

id objc_msgSend_accountOverrideInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountOverrideInfo");
}

id objc_msgSend_accountPrivateKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountPrivateKey");
}

id objc_msgSend_accountSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountSettings");
}

id objc_msgSend_accountStateKnown(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountStateKnown");
}

id objc_msgSend_accountStateTracker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountStateTracker");
}

id objc_msgSend_accountStateUpdated_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountStateUpdated:from:");
}

id objc_msgSend_accountStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountStatus");
}

id objc_msgSend_accountStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountStatus:");
}

id objc_msgSend_accountStatusFromCKAccountInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountStatusFromCKAccountInfo:");
}

id objc_msgSend_accountStatusInternal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountStatusInternal");
}

id objc_msgSend_accountTracker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountTracker");
}

id objc_msgSend_accountWide(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountWide");
}

id objc_msgSend_accountsAdapter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountsAdapter");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "action");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activate");
}

id objc_msgSend_activateTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateTimer");
}

id objc_msgSend_active(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "active");
}

id objc_msgSend_activeAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeAccount");
}

id objc_msgSend_activeMIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeMIDs:");
}

id objc_msgSend_activeManagedViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeManagedViews");
}

id objc_msgSend_activeValidInCircle_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeValidInCircle:err:");
}

id objc_msgSend_addAttribute_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAttribute:value:");
}

id objc_msgSend_addBackupFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addBackupFlag");
}

id objc_msgSend_addCKPartialError_error_depth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addCKPartialError:error:depth:");
}

id objc_msgSend_addClientOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addClientOperation:");
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDependency:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addEscrowToPeerInfo_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEscrowToPeerInfo:err:");
}

id objc_msgSend_addEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEvent:");
}

id objc_msgSend_addExecutionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addExecutionBlock:");
}

id objc_msgSend_addInternalTestConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addInternalTestConfig:");
}

id objc_msgSend_addKeyToCache_key_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addKeyToCache:key:");
}

id objc_msgSend_addLockStateObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addLockStateObserver:");
}

id objc_msgSend_addMetric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addMetric:");
}

id objc_msgSend_addMetrics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addMetrics:");
}

id objc_msgSend_addNullableDependency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNullableDependency:");
}

id objc_msgSend_addNullableSuccessDependency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNullableSuccessDependency:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOperationGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addOperationGroup:");
}

id objc_msgSend_addParticipant_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addParticipant:");
}

id objc_msgSend_addPendingBackupPeers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPendingBackupPeers:");
}

id objc_msgSend_addRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_addRingDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRingDictionary");
}

id objc_msgSend_addRingUpdateFlag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRingUpdateFlag");
}

id objc_msgSend_addSuccessDependency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addSuccessDependency:");
}

id objc_msgSend_addTlkSharesForVouchedIdentity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addTlkSharesForVouchedIdentity:");
}

id objc_msgSend_addToStatsDictionary_key_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addToStatsDictionary:key:");
}

id objc_msgSend_addiCloudIdentity_key_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addiCloudIdentity:key:err:");
}

id objc_msgSend_aessivkey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aessivkey");
}

id objc_msgSend_afterAuthKitFetch_userInitiatedRemovals_evictedRemovals_unknownReasonRemovals_trustedDeviceHash_deletedDeviceHash_trustedDevicesUpdateTimestamp_accountIsDemo_version_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "afterAuthKitFetch:userInitiatedRemovals:evictedRemovals:unknownReasonRemovals:trustedDeviceHash:deletedDeviceHash:trustedDevicesUpdateTimestamp:accountIsDemo:version:");
}

id objc_msgSend_afterOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "afterOperation");
}

id objc_msgSend_afterPreflight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "afterPreflight");
}

id objc_msgSend_afterPrepare(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "afterPrepare");
}

id objc_msgSend_afterSuccessfulAllowList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "afterSuccessfulAllowList");
}

id objc_msgSend_afterTPHTrustState_trustedPeers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "afterTPHTrustState:trustedPeers:");
}

id objc_msgSend_afterUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "afterUpdate");
}

id objc_msgSend_aksDecryptWithKeybag_keyclass_ciphertext_outKeyclass_plaintext_personaId_personaIdLength_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aksDecryptWithKeybag:keyclass:ciphertext:outKeyclass:plaintext:personaId:personaIdLength:error:");
}

id objc_msgSend_aksEncryptWithKeybag_keyclass_plaintext_outKeyclass_ciphertext_personaId_personaIdLength_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aksEncryptWithKeybag:keyclass:plaintext:outKeyclass:ciphertext:personaId:personaIdLength:error:");
}

id objc_msgSend_all_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "all:");
}

id objc_msgSend_allCKKSManagedViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allCKKSManagedViews");
}

id objc_msgSend_allClientOptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allClientOptions");
}

id objc_msgSend_allDependentsSuccessful(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allDependentsSuccessful");
}

id objc_msgSend_allExternalManagedViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allExternalManagedViews");
}

id objc_msgSend_allFor_contextID_keyUUID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allFor:contextID:keyUUID:zoneID:error:");
}

id objc_msgSend_allForUUID_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allForUUID:contextID:zoneID:error:");
}

id objc_msgSend_allIQEsHaveValidUnwrappingKeysInContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allIQEsHaveValidUnwrappingKeysInContextID:zoneID:error:");
}

id objc_msgSend_allInState_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allInState:contextID:zoneID:error:");
}

id objc_msgSend_allInZone_contextID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allInZone:contextID:error:");
}

id objc_msgSend_allInZone_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allInZone:error:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allKeysForContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeysForContextID:zoneID:error:");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allParentKeyUUIDsInContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allParentKeyUUIDsInContextID:zoneID:error:");
}

id objc_msgSend_allPriorityViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allPriorityViews");
}

id objc_msgSend_allSelves(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allSelves");
}

id objc_msgSend_allSuccessful_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allSuccessful:");
}

id objc_msgSend_allUUIDsWithContextID_inZones_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allUUIDsWithContextID:inZones:error:");
}

id objc_msgSend_allUUIDsWithContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allUUIDsWithContextID:zoneID:error:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_allViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allViews");
}

id objc_msgSend_allWhere_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allWhere:error:");
}

id objc_msgSend_allWithContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allWithContextID:zoneID:error:");
}

id objc_msgSend_allWithUUID_contextID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allWithUUID:contextID:error:");
}

id objc_msgSend_allWithUUID_states_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allWithUUID:states:contextID:zoneID:error:");
}

id objc_msgSend_allZoneCreationsSucceeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allZoneCreationsSucceeded");
}

id objc_msgSend_allZoneSubscriptionsSucceeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allZoneSubscriptionsSucceeded");
}

id objc_msgSend_alloc(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alloc");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowClientRPC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowClientRPC:");
}

id objc_msgSend_allowFullRefetchResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowFullRefetchResult");
}

id objc_msgSend_allowOutOfBandFetch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowOutOfBandFetch:");
}

id objc_msgSend_allowPendingFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowPendingFlags");
}

id objc_msgSend_allowableFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowableFlags");
}

id objc_msgSend_allowableStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowableStates");
}

id objc_msgSend_allowedProtocol(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedProtocol");
}

id objc_msgSend_allowedProtocolForEntitlementBearer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedProtocolForEntitlementBearer:");
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "altDSID");
}

id objc_msgSend_altDSIDForAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "altDSIDForAccount:");
}

id objc_msgSend_analyticsReporterWithTransport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyticsReporterWithTransport:");
}

id objc_msgSend_analyticsTransportRTCWithClientType_clientBundleId_clientName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyticsTransportRTCWithClientType:clientBundleId:clientName:");
}

id objc_msgSend_andsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "andsCount");
}

id objc_msgSend_anisetteDataWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anisetteDataWithError:");
}

id objc_msgSend_anonymousListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anonymousListener");
}

id objc_msgSend_anyViewsInState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anyViewsInState:");
}

id objc_msgSend_apnsPushes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apnsPushes");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appleAccountID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appleAccountID");
}

id objc_msgSend_appleAccountSignOutOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appleAccountSignOutOperation");
}

id objc_msgSend_applicationLabel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationLabel");
}

id objc_msgSend_applicationTag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationTag");
}

id objc_msgSend_applyInTransaction_withAccessGroups_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyInTransaction:withAccessGroups:error:");
}

id objc_msgSend_applyInTransaction_withAccessGroups_updateInfos_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyInTransaction:withAccessGroups:updateInfos:error:");
}

id objc_msgSend_applyIncomingDeletionsInTransaction_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyIncomingDeletionsInTransaction:error:");
}

id objc_msgSend_applyIncomingEntriesInTransaction_updateInfos_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyIncomingEntriesInTransaction:updateInfos:error:");
}

id objc_msgSend_applyIncomingShareDeletionsInTransaction_updateInfos_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyIncomingShareDeletionsInTransaction:updateInfos:error:");
}

id objc_msgSend_applyNewSyncingPolicy_viewStates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyNewSyncingPolicy:viewStates:");
}

id objc_msgSend_apsConnectionClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apsConnectionClass");
}

id objc_msgSend_apsDeliveryQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apsDeliveryQueue");
}

id objc_msgSend_apsRateLimiter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apsRateLimiter");
}

id objc_msgSend_apsReceiver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apsReceiver");
}

id objc_msgSend_archivedDataWithRootObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_areEquivalent_ckksItem_keyCache_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "areEquivalent:ckksItem:keyCache:");
}

id objc_msgSend_areNewSharesSufficient_trustStates_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "areNewSharesSufficient:trustStates:error:");
}

id objc_msgSend_areRecoveryKeysDistrusted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "areRecoveryKeysDistrusted:");
}

id objc_msgSend_areTestsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "areTestsEnabled");
}

id objc_msgSend_armReadyNotification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "armReadyNotification");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_asBOOL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asBOOL");
}

id objc_msgSend_asBase64DecodedData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asBase64DecodedData");
}

id objc_msgSend_asISO8601Date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asISO8601Date");
}

id objc_msgSend_asKeychainBackedSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asKeychainBackedSet:");
}

id objc_msgSend_asNSInteger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asNSInteger");
}

id objc_msgSend_asNSNumberInteger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asNSNumberInteger");
}

id objc_msgSend_asPathStep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asPathStep");
}

id objc_msgSend_asString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asString");
}

id objc_msgSend_assertStashedAccountCredential_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assertStashedAccountCredential:");
}

id objc_msgSend_assetType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assetType");
}

id objc_msgSend_associateWithCompletedOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associateWithCompletedOperation:");
}

id objc_msgSend_asyncNotifyAccountStateChanges_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "asyncNotifyAccountStateChanges:from:");
}

id objc_msgSend_attemptPreapprovedJoinWithSpecificUser_ckksKeys_tlkShares_preapprovedKeys_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attemptPreapprovedJoinWithSpecificUser:ckksKeys:tlkShares:preapprovedKeys:reply:");
}

id objc_msgSend_attemptToEscrowPreRecord_preRecordUUID_secretType_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attemptToEscrowPreRecord:preRecordUUID:secretType:completion:");
}

id objc_msgSend_attemptToHealView_currentTrustStates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attemptToHealView:currentTrustStates:");
}

id objc_msgSend_attemptedJoin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attemptedJoin");
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attributes");
}

id objc_msgSend_attributesWithAccessGroups_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attributesWithAccessGroups:error:");
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "auditToken");
}

id objc_msgSend_authKitAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authKitAccountWithAltDSID:");
}

id objc_msgSend_authKitAccountWithAltDSID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authKitAccountWithAltDSID:error:");
}

id objc_msgSend_authKitAdapter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authKitAdapter");
}

id objc_msgSend_authenticationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticationType");
}

id objc_msgSend_backoff(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backoff");
}

id objc_msgSend_backup_key(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backup_key");
}

id objc_msgSend_base64EncodedDataWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "base64EncodedDataWithOptions:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_base64Item(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "base64Item");
}

id objc_msgSend_base64WrappedKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "base64WrappedKey");
}

id objc_msgSend_becomeInheritedOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "becomeInheritedOperation");
}

id objc_msgSend_becomeReadyOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "becomeReadyOperation");
}

id objc_msgSend_becomeReadyOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "becomeReadyOperation:");
}

id objc_msgSend_becomeUntrustedOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "becomeUntrustedOperation:");
}

id objc_msgSend_beginCloudKitOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginCloudKitOperation");
}

id objc_msgSend_beginHSA2PasscodeRequest_uuid_reason_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginHSA2PasscodeRequest:uuid:reason:error:");
}

id objc_msgSend_beginTrustedOperation_suggestTLKUpload_requestPolicyCheck_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginTrustedOperation:suggestTLKUpload:requestPolicyCheck:");
}

id objc_msgSend_bindWhereClause_whereDict_cferror_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bindWhereClause:whereDict:cferror:");
}

id objc_msgSend_blockOperationWithBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blockOperationWithBlock:");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bottleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bottleID");
}

id objc_msgSend_bottleId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bottleId");
}

id objc_msgSend_bottleSalt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bottleSalt");
}

id objc_msgSend_buckets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buckets");
}

id objc_msgSend_buildVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildVersion");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_c2MetricsEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "c2MetricsEndpoint");
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cachedFeatureAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedFeatureAllowed");
}

id objc_msgSend_cachedOctagonEncryptionKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedOctagonEncryptionKey");
}

id objc_msgSend_cachedOctagonSigningKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedOctagonSigningKey");
}

id objc_msgSend_cachingEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachingEnabled");
}

id objc_msgSend_calendarWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "calendarWithIdentifier:");
}

id objc_msgSend_callCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callCallback:");
}

id objc_msgSend_callCallback_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callCallback:error:");
}

id objc_msgSend_callSyncCallbackWithErrorNoAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callSyncCallbackWithErrorNoAccount:");
}

id objc_msgSend_canSendMetricsUsingAccountState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canSendMetricsUsingAccountState:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAllOperations");
}

id objc_msgSend_cancelOperationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelOperationsWithCompletionHandler:");
}

id objc_msgSend_cancelPendingInvitesForGroup_participantHandles_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelPendingInvitesForGroup:participantHandles:completion:");
}

id objc_msgSend_cancelPendingOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelPendingOperations");
}

id objc_msgSend_capacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "capacity:");
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_cborWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cborWithData:");
}

id objc_msgSend_cborWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cborWithDictionary:");
}

id objc_msgSend_cborWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cborWithUTF8String:");
}

id objc_msgSend_cdpCapableiCloudAccountInitialized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cdpCapableiCloudAccountInitialized");
}

id objc_msgSend_cdpCapableiCloudAccountStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cdpCapableiCloudAccountStatus");
}

id objc_msgSend_cdpContextTypes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cdpContextTypes");
}

id objc_msgSend_cdpState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cdpState");
}

id objc_msgSend_cdpUploadPrerecord_secretType_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cdpUploadPrerecord:secretType:reply:");
}

id objc_msgSend_cdpd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cdpd");
}

id objc_msgSend_cert(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cert");
}

id objc_msgSend_certCached(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "certCached");
}

id objc_msgSend_chain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "chain");
}

id objc_msgSend_changeActiveAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changeActiveAccount:");
}

id objc_msgSend_changeToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changeToken");
}

id objc_msgSend_changeTokens(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changeTokens");
}

id objc_msgSend_change_blocks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "change_blocks");
}

id objc_msgSend_changesFetched_deletedRecordIDs_zoneID_newChangeToken_moreComing_resync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changesFetched:deletedRecordIDs:zoneID:newChangeToken:moreComing:resync:");
}

id objc_msgSend_checkAndHealTLKShares_currentTrustStates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkAndHealTLKShares:currentTrustStates:");
}

id objc_msgSend_checkAvailabilityForHandles_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkAvailabilityForHandles:completion:");
}

id objc_msgSend_checkDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkDate");
}

id objc_msgSend_checkEntitlement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkEntitlement:");
}

id objc_msgSend_checkErrorChainForLockState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkErrorChainForLockState:");
}

id objc_msgSend_checkExistingKeyHierarchy_zoneID_currentTrustStates_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkExistingKeyHierarchy:zoneID:currentTrustStates:error:");
}

id objc_msgSend_checkFatalError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkFatalError:");
}

id objc_msgSend_checkForAccountFixupsOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkForAccountFixupsOperation:");
}

id objc_msgSend_checkForCKAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkForCKAccount:");
}

id objc_msgSend_checkForRings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkForRings:");
}

id objc_msgSend_checkForSponsorshipTrust_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkForSponsorshipTrust:");
}

id objc_msgSend_checkIfPasscodeIsSetForDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkIfPasscodeIsSetForDevice");
}

id objc_msgSend_checkMetricsTrigger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkMetricsTrigger");
}

id objc_msgSend_checkOctagonHealth_repair_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkOctagonHealth:repair:reply:");
}

id objc_msgSend_checkRampStateWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkRampStateWithError:");
}

id objc_msgSend_checkReachabilityOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkReachabilityOperation");
}

id objc_msgSend_checkTrustStatusAndPostRepairCFUIfNecessary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkTrustStatusAndPostRepairCFUIfNecessary:");
}

id objc_msgSend_checkUnlockOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkUnlockOperation");
}

id objc_msgSend_ciphertext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ciphertext");
}

id objc_msgSend_circleHash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "circleHash:");
}

id objc_msgSend_circleJoiningBlob_flowID_deviceSessionID_canSendMetrics_applicant_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "circleJoiningBlob:flowID:deviceSessionID:canSendMetrics:applicant:complete:");
}

id objc_msgSend_circleName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "circleName");
}

id objc_msgSend_circlePeerID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "circlePeerID");
}

id objc_msgSend_circleStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "circleStatus");
}

id objc_msgSend_circleStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "circleStatus:");
}

id objc_msgSend_circle_rings_retirements_need_attention(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "circle_rings_retirements_need_attention");
}

id objc_msgSend_circle_transport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "circle_transport");
}

id objc_msgSend_ckAccountInfoInitialized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckAccountInfoInitialized");
}

id objc_msgSend_ckChangeListeners(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckChangeListeners");
}

id objc_msgSend_ckErrorOrPartialError_isError_zoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckErrorOrPartialError:isError:zoneID:");
}

id objc_msgSend_ckErrorState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckErrorState");
}

id objc_msgSend_ckOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckOperations");
}

id objc_msgSend_ckRecordType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckRecordType");
}

id objc_msgSend_ckdatabase(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckdatabase");
}

id objc_msgSend_ckdeviceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckdeviceID");
}

id objc_msgSend_ckdeviceIDError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckdeviceIDError");
}

id objc_msgSend_ckdeviceIDInitialized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckdeviceIDInitialized");
}

id objc_msgSend_ckks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckks");
}

id objc_msgSend_ckksAccountSyncForContainer_contextID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckksAccountSyncForContainer:contextID:");
}

id objc_msgSend_ckksAccountSyncForContainer_contextID_possibleAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckksAccountSyncForContainer:contextID:possibleAccount:");
}

id objc_msgSend_ckksConflictState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckksConflictState");
}

id objc_msgSend_ckksForClientRPC_createIfMissing_allowNonPrimaryAccounts_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckksForClientRPC:createIfMissing:allowNonPrimaryAccounts:error:");
}

id objc_msgSend_ckksManagedView(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckksManagedView");
}

id objc_msgSend_ckksPeerStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckksPeerStatus:");
}

id objc_msgSend_ckksPushReceivedDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckksPushReceivedDate");
}

id objc_msgSend_ckksPushTracingEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckksPushTracingEnabled");
}

id objc_msgSend_ckksPushTracingUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckksPushTracingUUID");
}

id objc_msgSend_ckoperationGroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckoperationGroup");
}

id objc_msgSend_cktypeToOTCliqueStatusWrapper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cktypeToOTCliqueStatusWrapper:");
}

id objc_msgSend_cktypeToSOSCCStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cktypeToSOSCCStatus:");
}

id objc_msgSend_ckzone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckzone");
}

id objc_msgSend_ckzonecreated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckzonecreated");
}

id objc_msgSend_ckzonesubscribed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ckzonesubscribed");
}

id objc_msgSend_claimCallbackForUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "claimCallbackForUUID:");
}

id objc_msgSend_claimTokenData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "claimTokenData");
}

id objc_msgSend_classA(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "classA");
}

id objc_msgSend_classC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "classC");
}

id objc_msgSend_cleanseErrorForXPC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanseErrorForXPC:");
}

id objc_msgSend_cleanupAfterPeer_circleTransport_seconds_circle_cleanupPeer_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanupAfterPeer:circleTransport:seconds:circle:cleanupPeer:err:");
}

id objc_msgSend_cleanupRetirementTickets_circle_time_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanupRetirementTickets:circle:time:err:");
}

id objc_msgSend_clearClientOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearClientOperations");
}

id objc_msgSend_clearContextState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearContextState");
}

id objc_msgSend_clearFollowUpWithContext_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearFollowUpWithContext:error:");
}

id objc_msgSend_clearInternalTestConfigs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearInternalTestConfigs");
}

id objc_msgSend_clearMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearMetrics");
}

id objc_msgSend_clearOperationGroups(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearOperationGroups");
}

id objc_msgSend_clearPairingUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearPairingUUID");
}

id objc_msgSend_clearPendingBackupPeers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearPendingBackupPeers");
}

id objc_msgSend_clearStalePushNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearStalePushNotifications");
}

id objc_msgSend_clearTlkSharesForVouchedIdentitys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearTlkSharesForVouchedIdentitys");
}

id objc_msgSend_clientConnections(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientConnections");
}

id objc_msgSend_clientDefined0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientDefined0");
}

id objc_msgSend_clientDefined1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientDefined1");
}

id objc_msgSend_clientDefined2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientDefined2");
}

id objc_msgSend_clientDefined3(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientDefined3");
}

id objc_msgSend_clientHasBooleanEntitlement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientHasBooleanEntitlement:");
}

id objc_msgSend_clientMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientMap");
}

id objc_msgSend_clientOperationAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientOperationAtIndex:");
}

id objc_msgSend_clientOperationsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientOperationsCount");
}

id objc_msgSend_cliqueStatusToCKType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cliqueStatusToCKType:");
}

id objc_msgSend_cloudKitAccountInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudKitAccountInfo");
}

id objc_msgSend_cloudKitAccountNewlyAvailableOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudKitAccountNewlyAvailableOperation:");
}

id objc_msgSend_cloudKitAccountStateKnown(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudKitAccountStateKnown");
}

id objc_msgSend_cloudKitClassDependencies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudKitClassDependencies");
}

id objc_msgSend_cloudKitContainer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudKitContainer");
}

id objc_msgSend_cloudKitRecord(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudKitRecord");
}

id objc_msgSend_cloudkitAccountStateChange_to_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudkitAccountStateChange:to:");
}

id objc_msgSend_cloudkitContainerName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudkitContainerName");
}

id objc_msgSend_cloudkitRetryAfter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudkitRetryAfter");
}

id objc_msgSend_cloudkitWriteFailures(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudkitWriteFailures");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_coder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coder");
}

id objc_msgSend_collectableEscrowRecords(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectableEscrowRecords");
}

id objc_msgSend_collectableTlkShares(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectableTlkShares");
}

id objc_msgSend_collectedEscrowRecords(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectedEscrowRecords");
}

id objc_msgSend_collectedTlkShares(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectedTlkShares");
}

id objc_msgSend_columnCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "columnCount");
}

id objc_msgSend_columnName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "columnName");
}

id objc_msgSend_columnNamesWithTableName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "columnNamesWithTableName:");
}

id objc_msgSend_comment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "comment");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commit");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:");
}

id objc_msgSend_completeOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completeOperation");
}

id objc_msgSend_completeWithErrorIfPending_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completeWithErrorIfPending:");
}

id objc_msgSend_completed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completed");
}

id objc_msgSend_completedSecCKKSInitialize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completedSecCKKSInitialize");
}

id objc_msgSend_completionHandlerDidRunCondition(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completionHandlerDidRunCondition");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_concatenateWithSeparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "concatenateWithSeparator:");
}

id objc_msgSend_conditionChecksInFlight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conditionChecksInFlight");
}

id objc_msgSend_conditionForFlagIfPresent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conditionForFlagIfPresent:");
}

id objc_msgSend_conditions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conditions");
}

id objc_msgSend_config(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "config");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configuration");
}

id objc_msgSend_configureSecuritydXPCProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configureSecuritydXPCProtocol:");
}

id objc_msgSend_confirmReceiptForMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "confirmReceiptForMessage:");
}

id objc_msgSend_confirmed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "confirmed");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connection");
}

id objc_msgSend_connectionQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionQueue");
}

id objc_msgSend_connectionWasInterrupted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionWasInterrupted:");
}

id objc_msgSend_connectionWasInvalidated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionWasInvalidated:");
}

id objc_msgSend_considerSelfTrusted_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "considerSelfTrusted:error:");
}

id objc_msgSend_consolidateKeyInterest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "consolidateKeyInterest");
}

id objc_msgSend_consumeTokenFromBucket_config_name_at_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "consumeTokenFromBucket:config:name:at:");
}

id objc_msgSend_consumeTokenFromBucket_type_at_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "consumeTokenFromBucket:type:at:");
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "container");
}

id objc_msgSend_containerIDForContainerIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containerIDForContainerIdentifier:");
}

id objc_msgSend_containerIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containerIdentifier");
}

id objc_msgSend_containerName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containerName");
}

id objc_msgSend_containerWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containerWithIdentifier:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contents");
}

id objc_msgSend_contentsAsString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsAsString");
}

id objc_msgSend_contextForClientRPC_createIfMissing_allowNonPrimaryAccounts_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForClientRPC:createIfMissing:allowNonPrimaryAccounts:error:");
}

id objc_msgSend_contextForClientRPC_createIfMissing_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForClientRPC:createIfMissing:error:");
}

id objc_msgSend_contextForClientRPC_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForClientRPC:error:");
}

id objc_msgSend_contextForClientRPCWithActiveAccount_createIfMissing_allowNonPrimaryAccounts_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForClientRPCWithActiveAccount:createIfMissing:allowNonPrimaryAccounts:error:");
}

id objc_msgSend_contextForConfirmExistingSecret(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForConfirmExistingSecret");
}

id objc_msgSend_contextForContainerName_contextID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForContainerName:contextID:");
}

id objc_msgSend_contextForContainerName_contextID_possibleAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForContainerName:contextID:possibleAccount:");
}

id objc_msgSend_contextForContainerName_contextID_possibleAccount_createIfMissing_sosAdapter_accountsAdapter_authKitAdapter_tooManyPeersAdapter_tapToRadarAdapter_lockStateTracker_deviceInformationAdapter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForContainerName:contextID:possibleAccount:createIfMissing:sosAdapter:accountsAdapter:authKitAdapter:tooManyPeersAdapter:tapToRadarAdapter:lockStateTracker:deviceInformationAdapter:");
}

id objc_msgSend_contextForPrimaryAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForPrimaryAccount");
}

id objc_msgSend_contextForRecoveryKeyRepair(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForRecoveryKeyRepair");
}

id objc_msgSend_contextForSecureTerms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForSecureTerms");
}

id objc_msgSend_contextForStateRepair(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextForStateRepair");
}

id objc_msgSend_contextID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextID");
}

id objc_msgSend_contextID_zoneName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contextID:zoneName:");
}

id objc_msgSend_contexts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contexts");
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controller");
}

id objc_msgSend_convertTimeIntervalToServerTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertTimeIntervalToServerTime:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyPeerSetForView_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPeerSetForView:");
}

id objc_msgSend_copyPeerSetMatching_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPeerSetMatching:");
}

id objc_msgSend_copyPublicKeyForPeer_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPublicKeyForPeer:err:");
}

id objc_msgSend_copyRing_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyRing:err:");
}

id objc_msgSend_copySortedPeerArray_action_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copySortedPeerArray:action:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countByState_contextID_zone_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByState:contextID:zone:error:");
}

id objc_msgSend_countByState_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByState:contextID:zoneID:error:");
}

id objc_msgSend_countNewEntriesByKeyWithContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countNewEntriesByKeyWithContextID:zoneID:error:");
}

id objc_msgSend_countsByClassWithContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countsByClassWithContextID:zoneID:error:");
}

id objc_msgSend_countsByParentKeyWithContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countsByParentKeyWithContextID:zoneID:error:");
}

id objc_msgSend_countsByStateWithContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countsByStateWithContextID:zoneID:error:");
}

id objc_msgSend_countsByZoneNameWithContextID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countsByZoneNameWithContextID:error:");
}

id objc_msgSend_countsWithContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countsWithContextID:zoneID:error:");
}

id objc_msgSend_createAccountLoggedInDependency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createAccountLoggedInDependency:");
}

id objc_msgSend_createCDPFollowupContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createCDPFollowupContext:");
}

id objc_msgSend_createCustodianRecoveryKeyWithSpecificUser_recoveryKey_salt_ckksKeys_uuid_kind_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createCustodianRecoveryKeyWithSpecificUser:recoveryKey:salt:ckksKeys:uuid:kind:reply:");
}

id objc_msgSend_createDraft_forProcessNamed_withDisplayReason_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDraft:forProcessNamed:withDisplayReason:completionHandler:");
}

id objc_msgSend_createFromProvider_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFromProvider:");
}

id objc_msgSend_createMissingKeyShares_peers_databaseProvider_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createMissingKeyShares:peers:databaseProvider:error:");
}

id objc_msgSend_createMissingKeyShares_trustStates_databaseProvider_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createMissingKeyShares:trustStates:databaseProvider:error:");
}

id objc_msgSend_createOperationToFinishAttempt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createOperationToFinishAttempt:");
}

id objc_msgSend_createRecoveryKey_recoveryKey_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createRecoveryKey:recoveryKey:reply:");
}

id objc_msgSend_createSuccessfulFetchDependency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createSuccessfulFetchDependency");
}

id objc_msgSend_createViewState_contextID_zoneIsNew_priorityView_ckksManagedView_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createViewState:contextID:zoneIsNew:priorityView:ckksManagedView:");
}

id objc_msgSend_createWithManager_entitlementBearer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createWithManager:entitlementBearer:");
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "creationDate");
}

id objc_msgSend_crk(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "crk");
}

id objc_msgSend_currentCKAccountInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCKAccountInfo");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentCircleStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCircleStatus");
}

id objc_msgSend_currentClassAPointer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentClassAPointer");
}

id objc_msgSend_currentClassAUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentClassAUUID");
}

id objc_msgSend_currentClassCPointer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentClassCPointer");
}

id objc_msgSend_currentClassCUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentClassCUUID");
}

id objc_msgSend_currentConditions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentConditions");
}

id objc_msgSend_currentDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentDelay");
}

id objc_msgSend_currentFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentFetch");
}

id objc_msgSend_currentFetchReasons(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentFetchReasons");
}

id objc_msgSend_currentFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentFlags");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_currentItemUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentItemUUID");
}

id objc_msgSend_currentKeyForClass_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentKeyForClass:contextID:zoneID:error:");
}

id objc_msgSend_currentKeyUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentKeyUUID");
}

id objc_msgSend_currentKeysForClass_contextID_state_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentKeysForClass:contextID:state:zoneID:error:");
}

id objc_msgSend_currentMemoizedLastHealthCheck(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentMemoizedLastHealthCheck");
}

id objc_msgSend_currentOutgoingQueueOperationGroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentOutgoingQueueOperationGroup");
}

id objc_msgSend_currentPersona(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentPersona");
}

id objc_msgSend_currentPointerIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentPointerIdentifier");
}

id objc_msgSend_currentProcessResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentProcessResult");
}

id objc_msgSend_currentReachability(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentReachability");
}

id objc_msgSend_currentSOSSelf_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentSOSSelf:");
}

id objc_msgSend_currentSelf(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentSelf");
}

id objc_msgSend_currentSelfPeers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentSelfPeers");
}

id objc_msgSend_currentSelfPeersError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentSelfPeersError");
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentState");
}

id objc_msgSend_currentTLKPointer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentTLKPointer");
}

id objc_msgSend_currentTLKUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentTLKUUID");
}

id objc_msgSend_currentTLKsFilteredByPolicy_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentTLKsFilteredByPolicy:error:");
}

id objc_msgSend_currentThreadIsForPrimaryiCloudAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentThreadIsForPrimaryiCloudAccount");
}

id objc_msgSend_currentThreadPersonaUniqueString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentThreadPersonaUniqueString");
}

id objc_msgSend_currentTrustBitmask(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentTrustBitmask");
}

id objc_msgSend_currentTrustStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentTrustStates");
}

id objc_msgSend_currentTrustedPeerIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentTrustedPeerIDs");
}

id objc_msgSend_currentTrustedPeers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentTrustedPeers");
}

id objc_msgSend_currentTrustedPeersError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentTrustedPeersError");
}

id objc_msgSend_currentUserMetadata(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentUserMetadata");
}

id objc_msgSend_currentUserMetadataFeatureUsage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentUserMetadataFeatureUsage");
}

id objc_msgSend_currentUserParticipant(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentUserParticipant");
}

id objc_msgSend_currentkey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentkey");
}

id objc_msgSend_cursor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cursor");
}

id objc_msgSend_curve(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "curve");
}

id objc_msgSend_custodianRecoveryKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "custodianRecoveryKey");
}

id objc_msgSend_cuttlefishAdapter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cuttlefishAdapter");
}

id objc_msgSend_cuttlefishPushTopics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cuttlefishPushTopics");
}

id objc_msgSend_cuttlefishRetryAfter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cuttlefishRetryAfter");
}

id objc_msgSend_cuttlefishTrustEvaluation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cuttlefishTrustEvaluation");
}

id objc_msgSend_cuttlefishXPCConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cuttlefishXPCConnection");
}

id objc_msgSend_cuttlefishXPCWrapper(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cuttlefishXPCWrapper");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data");
}

id objc_msgSend_dataForSigning_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataForSigning:");
}

id objc_msgSend_dataTaskWithRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataTaskWithRequest:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithCBOR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithCBOR:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithData:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithLength:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_dataWithSpace_DEREncode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithSpace:DEREncode:");
}

id objc_msgSend_database(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "database");
}

id objc_msgSend_databaseItemClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "databaseItemClass");
}

id objc_msgSend_databaseProvider(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "databaseProvider");
}

id objc_msgSend_databaseScope(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "databaseScope");
}

id objc_msgSend_datafyPeerID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "datafyPeerID:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateOfLastSuccessForEvent_zoneName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateOfLastSuccessForEvent:zoneName:");
}

id objc_msgSend_datePropertyForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "datePropertyForKey:");
}

id objc_msgSend_datePropertyForKey_zoneName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "datePropertyForKey:zoneName:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_declineGroupInvite_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "declineGroupInvite:completion:");
}

id objc_msgSend_declineInviteForGroupID_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "declineInviteForGroupID:completion:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeBytesForKey_returnedLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeBytesForKey:returnedLength:");
}

id objc_msgSend_decodeFromData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeFromData:");
}

id objc_msgSend_decodeInt32ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeInt32ForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decrypt_withKey_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decrypt:withKey:error:");
}

id objc_msgSend_decryptCKKSItemToAttributes_keyCache_ckksOperationalDependencies_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decryptCKKSItemToAttributes:keyCache:ckksOperationalDependencies:error:");
}

id objc_msgSend_decryptData_authenticatedData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decryptData:authenticatedData:error:");
}

id objc_msgSend_decryptDictionary_key_authenticatedData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decryptDictionary:key:authenticatedData:error:");
}

id objc_msgSend_decryptItemToDictionary_keyCache_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decryptItemToDictionary:keyCache:error:");
}

id objc_msgSend_decryptItemToDictionaryVersion1or2_keyCache_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decryptItemToDictionaryVersion1or2:keyCache:error:");
}

id objc_msgSend_decryptionOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decryptionOperation");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultOverCommitManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultOverCommitManager");
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultStore");
}

id objc_msgSend_defaultViewError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultViewError");
}

id objc_msgSend_deleteAllWithContextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteAllWithContextID:zoneID:error:");
}

id objc_msgSend_deleteCorruptedItemsWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteCorruptedItemsWithError:");
}

id objc_msgSend_deleteFromDatabase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteFromDatabase:");
}

id objc_msgSend_deleteFromKeychain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteFromKeychain:");
}

id objc_msgSend_deleteFromKeychainForContainer_contextID_personaAdapter_personaUniqueString_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteFromKeychainForContainer:contextID:personaAdapter:personaUniqueString:error:");
}

id objc_msgSend_deleteFromTable_where_connection_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteFromTable:where:connection:error:");
}

id objc_msgSend_deleteKeyMaterialFromKeychain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteKeyMaterialFromKeychain:");
}

id objc_msgSend_deleteWithAcmContext_accessControl_callerAccessGroups_keyDiversify_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteWithAcmContext:accessControl:callerAccessGroups:keyDiversify:error:");
}

id objc_msgSend_deletedDeviceHash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deletedDeviceHash");
}

id objc_msgSend_deletedDeviceList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deletedDeviceList");
}

id objc_msgSend_deletedOQE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deletedOQE:");
}

id objc_msgSend_deletions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deletions");
}

id objc_msgSend_deliverAKDeviceListDeltaMessagePayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deliverAKDeviceListDeltaMessagePayload:");
}

id objc_msgSend_demoAccountForAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "demoAccountForAccount:");
}

id objc_msgSend_departByDistrustingSelfWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "departByDistrustingSelfWithSpecificUser:reply:");
}

id objc_msgSend_departureCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "departureCode");
}

id objc_msgSend_dependOnBeforeGroupFinished_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dependOnBeforeGroupFinished:");
}

id objc_msgSend_dependencies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dependencies");
}

id objc_msgSend_dependenciesDescriptionError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dependenciesDescriptionError");
}

id objc_msgSend_deps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deps");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_descriptionError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionError");
}

id objc_msgSend_descriptionErrorCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionErrorCode");
}

id objc_msgSend_descriptionInternal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionInternal:");
}

id objc_msgSend_descriptionUnderlyingError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionUnderlyingError");
}

id objc_msgSend_desiredTimeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "desiredTimeout");
}

id objc_msgSend_determineCDPState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "determineCDPState");
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "device");
}

id objc_msgSend_deviceAdapter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceAdapter");
}

id objc_msgSend_deviceDidLock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceDidLock");
}

id objc_msgSend_deviceInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceInfo");
}

id objc_msgSend_deviceInformationAdapter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceInformationAdapter");
}

id objc_msgSend_deviceList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceList");
}

id objc_msgSend_deviceListVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceListVersion");
}

id objc_msgSend_deviceListWithContext_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceListWithContext:completion:");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceName");
}

id objc_msgSend_deviceNameUpdateListeners(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceNameUpdateListeners");
}

id objc_msgSend_deviceSessionID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceSessionID");
}

id objc_msgSend_diagnostics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "diagnostics");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didAcceptInviteForGroupID_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didAcceptInviteForGroupID:completion:");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_didDeclineInviteForGroupID_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didDeclineInviteForGroupID:completion:");
}

id objc_msgSend_disablePendingFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disablePendingFlags");
}

id objc_msgSend_dispatchSyncWithConnection_readWriteTxion_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchSyncWithConnection:readWriteTxion:block:");
}

id objc_msgSend_dispatchSyncWithReadOnlySQLTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchSyncWithReadOnlySQLTransaction:");
}

id objc_msgSend_dispatchSyncWithSQLTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchSyncWithSQLTransaction:");
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "displayName");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distantPast");
}

id objc_msgSend_distrustPeerIDsWithSpecificUser_peerIDs_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distrustPeerIDsWithSpecificUser:peerIDs:reply:");
}

id objc_msgSend_doSIV_nonce_text_buffer_bufferLength_authenticatedData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doSIV:nonce:text:buffer:bufferLength:authenticatedData:error:");
}

id objc_msgSend_doSimpleStateMachineRPC_op_sourceStates_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doSimpleStateMachineRPC:op:sourceStates:reply:");
}

id objc_msgSend_doWatchedStateMachineRPC_sourceStates_path_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doWatchedStateMachineRPC:sourceStates:path:reply:");
}

id objc_msgSend_doWatchedStateMachineRPC_sourceStates_path_transitionOp_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doWatchedStateMachineRPC:sourceStates:path:transitionOp:reply:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain");
}

id objc_msgSend_domainHost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domainHost");
}

id objc_msgSend_domainPort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domainPort");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_dropAllActors(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dropAllActors");
}

id objc_msgSend_dropAllKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dropAllKeys");
}

id objc_msgSend_dropDeletionsForRecordIDs_inTransaction_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dropDeletionsForRecordIDs:inTransaction:error:");
}

id objc_msgSend_dropOutgoingChangeForRecordID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dropOutgoingChangeForRecordID:error:");
}

id objc_msgSend_dumpFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dumpFlags");
}

id objc_msgSend_dumpPendingFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dumpPendingFlags");
}

id objc_msgSend_dumpWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dumpWithSpecificUser:reply:");
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_earliestFetchTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "earliestFetchTime");
}

id objc_msgSend_effectiveKeySize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveKeySize");
}

id objc_msgSend_effectiveUserIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveUserIdentifier");
}

id objc_msgSend_egoPeerID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "egoPeerID");
}

id objc_msgSend_egoPeerMachineID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "egoPeerMachineID");
}

id objc_msgSend_egoPeerStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "egoPeerStatus:");
}

id objc_msgSend_egoStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "egoStatus");
}

id objc_msgSend_emailAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "emailAddress");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enabled");
}

id objc_msgSend_encitem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encitem");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeInt32_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt32:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodeSubjectPublicKeyInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeSubjectPublicKeyInfo");
}

id objc_msgSend_encodeToDER_err_start_end_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeToDER:err:start:end:");
}

id objc_msgSend_encodeWithCoder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeWithCoder:");
}

id objc_msgSend_encodedCKRecord(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodedCKRecord");
}

id objc_msgSend_encodedChangeToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodedChangeToken");
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodedData");
}

id objc_msgSend_encodedData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodedData:");
}

id objc_msgSend_encodedRateLimiter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodedRateLimiter");
}

id objc_msgSend_encrypt_withKey_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encrypt:withKey:error:");
}

id objc_msgSend_encryptCKKSItem_dataDictionary_updatingCKKSItem_parentkey_keyCache_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptCKKSItem:dataDictionary:updatingCKKSItem:parentkey:keyCache:error:");
}

id objc_msgSend_encryptData_authenticatedData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptData:authenticatedData:error:");
}

id objc_msgSend_encryptDictionary_key_authenticatedData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptDictionary:key:authenticatedData:error:");
}

id objc_msgSend_encryptMetadataWithKeybag_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptMetadataWithKeybag:error:");
}

id objc_msgSend_encryptSecretDataWithKeybag_accessControl_acmContext_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptSecretDataWithKeybag:accessControl:acmContext:error:");
}

id objc_msgSend_encryptedBlobWithKeybag_accessControl_acmContext_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptedBlobWithKeybag:accessControl:acmContext:error:");
}

id objc_msgSend_encryptedMetadata(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptedMetadata");
}

id objc_msgSend_encryptedMetadataBlob(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptedMetadataBlob");
}

id objc_msgSend_encryptedSecretData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptedSecretData");
}

id objc_msgSend_encryptedSecretDataBlob(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptedSecretDataBlob");
}

id objc_msgSend_encryptedValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptedValues");
}

id objc_msgSend_encryptionIdentity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptionIdentity");
}

id objc_msgSend_encryptionKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptionKey");
}

id objc_msgSend_encryptionOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptionOperation");
}

id objc_msgSend_encryptionSPKI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encryptionSPKI");
}

id objc_msgSend_encver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encver");
}

id objc_msgSend_endTrustedOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endTrustedOperation");
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpoint");
}

id objc_msgSend_enforceRateLimiting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enforceRateLimiting");
}

id objc_msgSend_engine(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "engine");
}

id objc_msgSend_engine_peer_state_needs_repair(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "engine_peer_state_needs_repair");
}

id objc_msgSend_ensureCurrentUserProvisionedWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ensureCurrentUserProvisionedWithCompletion:");
}

id objc_msgSend_ensureExpansion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ensureExpansion:");
}

id objc_msgSend_ensureFactoryCircles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ensureFactoryCircles");
}

id objc_msgSend_ensureFullPeerAvailable_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ensureFullPeerAvailable:err:");
}

id objc_msgSend_ensureKeyLoadedForContextID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ensureKeyLoadedForContextID:error:");
}

id objc_msgSend_ensureKeyLoadedFromKeychain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ensureKeyLoadedFromKeychain:");
}

id objc_msgSend_ensureKeyPresent_viewState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ensureKeyPresent:viewState:");
}

id objc_msgSend_ensureOctagonPeerKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ensureOctagonPeerKeys");
}

id objc_msgSend_ensureOctagonPeerKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ensureOctagonPeerKeys:");
}

id objc_msgSend_ensureRampsInitialized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ensureRampsInitialized");
}

id objc_msgSend_entitlementBearer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entitlementBearer");
}

id objc_msgSend_entropy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entropy");
}

id objc_msgSend_entryAccessGroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entryAccessGroup");
}

id objc_msgSend_entrySchemaVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entrySchemaVersion");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateRowsInRemotelyDeletedZonesForEntryModel_inTransaction_withError_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateRowsInRemotelyDeletedZonesForEntryModel:inTransaction:withError:usingBlock:");
}

id objc_msgSend_enumerateRowsInZoneIDs_forEntryModel_inTransaction_withError_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateRowsInZoneIDs:forEntryModel:inTransaction:withError:usingBlock:");
}

id objc_msgSend_enumerateRowsInZoneIDs_forLocalItemsInTransaction_withError_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateRowsInZoneIDs:forLocalItemsInTransaction:withError:usingBlock:");
}

id objc_msgSend_environmentMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "environmentMap");
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ephemeralSessionConfiguration");
}

id objc_msgSend_epoch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "epoch");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "error");
}

id objc_msgSend_errorChain_depth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorChain:depth:");
}

id objc_msgSend_errorIfNoCKAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorIfNoCKAccount:");
}

id objc_msgSend_errorItemsProcessed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorItemsProcessed");
}

id objc_msgSend_errorWithDomain_code_description_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithDomain:code:description:");
}

id objc_msgSend_errorWithDomain_code_description_underlying_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithDomain:code:description:underlying:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_escrowAttemptedWithinLastSeconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "escrowAttemptedWithinLastSeconds:");
}

id objc_msgSend_escrowCompletedWithinLastSeconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "escrowCompletedWithinLastSeconds:");
}

id objc_msgSend_escrowCompletedWithinLastSeconds_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "escrowCompletedWithinLastSeconds:reply:");
}

id objc_msgSend_escrowInformationMetadata(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "escrowInformationMetadata");
}

id objc_msgSend_escrowRecordGarbageCollectionEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "escrowRecordGarbageCollectionEnabled");
}

id objc_msgSend_escrowRequestClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "escrowRequestClass");
}

id objc_msgSend_essential(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "essential");
}

id objc_msgSend_establishStatePathDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "establishStatePathDictionary");
}

id objc_msgSend_establishWithSpecificUser_ckksKeys_tlkShares_preapprovedKeys_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "establishWithSpecificUser:ckksKeys:tlkShares:preapprovedKeys:reply:");
}

id objc_msgSend_evaluateSecdOctagonTrust(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateSecdOctagonTrust");
}

id objc_msgSend_evaluateTPHOctagonTrust(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateTPHOctagonTrust");
}

id objc_msgSend_event(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "event");
}

id objc_msgSend_eventName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventName");
}

id objc_msgSend_eventS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventS");
}

id objc_msgSend_eventsByTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventsByTime");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_executeQuery_readWrite_error_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeQuery:readWrite:error:block:");
}

id objc_msgSend_expansion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expansion");
}

id objc_msgSend_expireRetirementRecords_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expireRetirementRecords:err:");
}

id objc_msgSend_exportedInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exportedInterface");
}

id objc_msgSend_externalManagedViewForRPC_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "externalManagedViewForRPC:error:");
}

id objc_msgSend_extractStringKey_fromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "extractStringKey:fromDictionary:");
}

id objc_msgSend_factory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "factory");
}

id objc_msgSend_failStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "failStates");
}

id objc_msgSend_failedDueToEssentialTrustState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "failedDueToEssentialTrustState");
}

id objc_msgSend_failedDueToLockState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "failedDueToLockState");
}

id objc_msgSend_fakeEntitlements(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fakeEntitlements");
}

id objc_msgSend_fastStatus_zoneStateEntry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fastStatus:zoneStateEntry:");
}

id objc_msgSend_fetch_startingAtUUID_state_action_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetch:startingAtUUID:state:action:contextID:zoneID:error:");
}

id objc_msgSend_fetch_state_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetch:state:contextID:zoneID:error:");
}

id objc_msgSend_fetch_where_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetch:where:error:");
}

id objc_msgSend_fetch_where_orderBy_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetch:where:orderBy:error:");
}

id objc_msgSend_fetchAccountSettingsWithSpecificUser_forceFetch_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAccountSettingsWithSpecificUser:forceFetch:reply:");
}

id objc_msgSend_fetchAccountsRetryingWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAccountsRetryingWithError:");
}

id objc_msgSend_fetchAllCKSharesInMirrorForGroupID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAllCKSharesInMirrorForGroupID:error:");
}

id objc_msgSend_fetchAllRecordZonesOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAllRecordZonesOperation");
}

id objc_msgSend_fetchAllSharingGroupsInMirrorWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAllSharingGroupsInMirrorWithError:");
}

id objc_msgSend_fetchAllowedMachineIDsWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAllowedMachineIDsWithSpecificUser:reply:");
}

id objc_msgSend_fetchAndUpdateParticipantsForGroup_share_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchAndUpdateParticipantsForGroup:share:completion:");
}

id objc_msgSend_fetchBeforeGettingKeyset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchBeforeGettingKeyset");
}

id objc_msgSend_fetchBehavior(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchBehavior");
}

id objc_msgSend_fetchCKAccountStatusScheduler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCKAccountStatusScheduler");
}

id objc_msgSend_fetchCKShareFromMirrorForGroupID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCKShareFromMirrorForGroupID:error:");
}

id objc_msgSend_fetchCKShareMetadataForGroupInvites_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCKShareMetadataForGroupInvites:completion:");
}

id objc_msgSend_fetchChangesForZoneIDs_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchChangesForZoneIDs:completionHandler:");
}

id objc_msgSend_fetchChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchChangesWithCompletionHandler:");
}

id objc_msgSend_fetchCirclePeerID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCirclePeerID:");
}

id objc_msgSend_fetchCloudKitExternallyManagedViewKeyHierarchy_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCloudKitExternallyManagedViewKeyHierarchy:reply:");
}

id objc_msgSend_fetchCompletedOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCompletedOperation");
}

id objc_msgSend_fetchCurrentDeviceIDWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCurrentDeviceIDWithCompletionHandler:");
}

id objc_msgSend_fetchCurrentDeviceListByAltDSID_flowID_deviceSessionID_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCurrentDeviceListByAltDSID:flowID:deviceSessionID:reply:");
}

id objc_msgSend_fetchCurrentItem_items_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCurrentItem:items:reply:");
}

id objc_msgSend_fetchCurrentItemWithSpecificUser_items_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCurrentItemWithSpecificUser:items:reply:");
}

id objc_msgSend_fetchCurrentPolicyWithSpecificUser_modelIDOverride_isInheritedAccount_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCurrentPolicyWithSpecificUser:modelIDOverride:isInheritedAccount:reply:");
}

id objc_msgSend_fetchCurrentUserIdentifierFromCloudKitWithReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCurrentUserIdentifierFromCloudKitWithReply:");
}

id objc_msgSend_fetchCurrentUserIdentifierWithReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCurrentUserIdentifierWithReply:");
}

id objc_msgSend_fetchCursorForScope_zoneIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchCursorForScope:zoneIDs:");
}

id objc_msgSend_fetchDeviceSessionIDFromAuthKit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchDeviceSessionIDFromAuthKit:");
}

id objc_msgSend_fetchEgoEpochWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchEgoEpochWithSpecificUser:reply:");
}

id objc_msgSend_fetchEscrowContents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchEscrowContents:");
}

id objc_msgSend_fetchEscrowContentsWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchEscrowContentsWithSpecificUser:reply:");
}

id objc_msgSend_fetchExternallyManagedViewKeyHierarchy_forceFetch_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchExternallyManagedViewKeyHierarchy:forceFetch:reply:");
}

id objc_msgSend_fetchIdentity_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchIdentity:error:");
}

id objc_msgSend_fetchKeyForClass_fromDb_keybag_specifier_allowWrites_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchKeyForClass:fromDb:keybag:specifier:allowWrites:error:");
}

id objc_msgSend_fetchKeyMaterialItemFromKeychain_resave_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchKeyMaterialItemFromKeychain:resave:error:");
}

id objc_msgSend_fetchLocalShareForGroupID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchLocalShareForGroupID:");
}

id objc_msgSend_fetchOutgoingChangesWithCursor_maxChangeCount_maxBatchSizeInBytes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchOutgoingChangesWithCursor:maxChangeCount:maxBatchSizeInBytes:error:");
}

id objc_msgSend_fetchOutgoingChangesWithScope_cursor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchOutgoingChangesWithScope:cursor:");
}

id objc_msgSend_fetchOutgoingDatabaseItemWithRecordID_inTransaction_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchOutgoingDatabaseItemWithRecordID:inTransaction:error:");
}

id objc_msgSend_fetchOutgoingRecordWithRecordID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchOutgoingRecordWithRecordID:error:");
}

id objc_msgSend_fetchPCSIdentityByKey_pcsservices_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchPCSIdentityByKey:pcsservices:reply:");
}

id objc_msgSend_fetchPCSIdentityByPublicKeyWithSpecificUser_pcsservices_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchPCSIdentityByPublicKeyWithSpecificUser:pcsservices:reply:");
}

id objc_msgSend_fetchPCSIdentityOutOfBand_forceFetch_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchPCSIdentityOutOfBand:forceFetch:complete:");
}

id objc_msgSend_fetchPolicyDocumentsWithSpecificUser_versions_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchPolicyDocumentsWithSpecificUser:versions:reply:");
}

id objc_msgSend_fetchRampRecordWithReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRampRecordWithReply:");
}

id objc_msgSend_fetchReasons(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchReasons");
}

id objc_msgSend_fetchReceivedInviteWithGroupID_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchReceivedInviteWithGroupID:completion:");
}

id objc_msgSend_fetchReceivedInvitesWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchReceivedInvitesWithCompletion:");
}

id objc_msgSend_fetchReceivedPendingGroupsExcludingGroupIDs_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchReceivedPendingGroupsExcludingGroupIDs:completion:");
}

id objc_msgSend_fetchRecordRecordsOperationClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRecordRecordsOperationClass");
}

id objc_msgSend_fetchRecordZoneChangesOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRecordZoneChangesOperation");
}

id objc_msgSend_fetchRecordZoneChangesOperationClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRecordZoneChangesOperationClass");
}

id objc_msgSend_fetchRecordsOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRecordsOperation");
}

id objc_msgSend_fetchRecordsOperationClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRecordsOperationClass");
}

id objc_msgSend_fetchRecoverableTLKSharesWithSpecificUser_peerID_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRecoverableTLKSharesWithSpecificUser:peerID:reply:");
}

id objc_msgSend_fetchRemoteChangesForZoneIDs_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRemoteChangesForZoneIDs:completion:");
}

id objc_msgSend_fetchRequestStatuses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRequestStatuses:");
}

id objc_msgSend_fetchScheduler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchScheduler");
}

id objc_msgSend_fetchSelfPeers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchSelfPeers:");
}

id objc_msgSend_fetchSendingMetricsPermitted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchSendingMetricsPermitted:");
}

id objc_msgSend_fetchShareParticipantsForParticipants_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchShareParticipantsForParticipants:completion:");
}

id objc_msgSend_fetchStatuses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchStatuses:");
}

id objc_msgSend_fetchTrustStateWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchTrustStateWithSpecificUser:reply:");
}

id objc_msgSend_fetchTrustStatus_configuration_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchTrustStatus:configuration:reply:");
}

id objc_msgSend_fetchTrustedPeerCountWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchTrustedPeerCountWithSpecificUser:reply:");
}

id objc_msgSend_fetchTrustedPeers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchTrustedPeers:");
}

id objc_msgSend_fetchUserControllableViewsSyncStatus_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchUserControllableViewsSyncStatus:reply:");
}

id objc_msgSend_fetchUserRecordIDWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchUserRecordIDWithCompletionHandler:");
}

id objc_msgSend_fetchValueForMetadataKey_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchValueForMetadataKey:error:");
}

id objc_msgSend_fetchViableBottlesWithSpecificUser_source_flowID_deviceSessionID_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchViableBottlesWithSpecificUser:source:flowID:deviceSessionID:reply:");
}

id objc_msgSend_fetchViableEscrowRecordsWithSpecificUser_source_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchViableEscrowRecordsWithSpecificUser:source:reply:");
}

id objc_msgSend_fetchZoneIDsToDeleteFromDatabaseWithScope_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchZoneIDsToDeleteFromDatabaseWithScope:error:");
}

id objc_msgSend_fetchZonesToSaveToDatabaseWithScope_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchZonesToSaveToDatabaseWithScope:error:");
}

id objc_msgSend_fetchedItems(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchedItems");
}

id objc_msgSend_fetchedZoneIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchedZoneIDs");
}

id objc_msgSend_fieldName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fieldName");
}

id objc_msgSend_fillInError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fillInError");
}

id objc_msgSend_filterTrustedPeers_missingTLKSharesFor_databaseProvider_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterTrustedPeers:missingTLKSharesFor:databaseProvider:error:");
}

id objc_msgSend_findAccountForCurrentThread_optionalAltDSID_cloudkitContainerName_octagonContextID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findAccountForCurrentThread:optionalAltDSID:cloudkitContainerName:octagonContextID:error:");
}

id objc_msgSend_findCorruptedItemsWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findCorruptedItemsWithError:");
}

id objc_msgSend_findCustodianRecoveryKeyWithSpecificUser_uuid_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findCustodianRecoveryKeyWithSpecificUser:uuid:reply:");
}

id objc_msgSend_findFirstPendingOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findFirstPendingOperation:");
}

id objc_msgSend_findItemPersistentRefByUUID_extraLoggingString_client_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findItemPersistentRefByUUID:extraLoggingString:client:complete:");
}

id objc_msgSend_findKeySets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "findKeySets:");
}

id objc_msgSend_fingerprintAllPasswordsInTransaction_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fingerprintAllPasswordsInTransaction:error:");
}

id objc_msgSend_fingerprintAllPrivateKeysInTransaction_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fingerprintAllPrivateKeysInTransaction:error:");
}

id objc_msgSend_fingerprintPasswordDatabaseItem_inTransaction_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fingerprintPasswordDatabaseItem:inTransaction:error:");
}

id objc_msgSend_fingerprintPrivateKeyDatabaseItem_inTransaction_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fingerprintPrivateKeyDatabaseItem:inTransaction:error:");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finish");
}

id objc_msgSend_finishDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishDate");
}

id objc_msgSend_finishDecoding(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishDecoding");
}

id objc_msgSend_finishOp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishOp");
}

id objc_msgSend_finishOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishOperation");
}

id objc_msgSend_finishedInitialDispatches(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishedInitialDispatches");
}

id objc_msgSend_finishedOp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishedOp");
}

id objc_msgSend_finishingBlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishingBlock");
}

id objc_msgSend_fireTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fireTime");
}

id objc_msgSend_firstCKAccountFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstCKAccountFetch");
}

id objc_msgSend_firstManateeKeyFetched(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstManateeKeyFetched");
}

id objc_msgSend_firstMatchInString_options_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstMatchInString:options:range:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_fixICloudIdentities_circle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fixICloudIdentities:circle:");
}

id objc_msgSend_fixMismatchedViewItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fixMismatchedViewItems:");
}

id objc_msgSend_fixUUIDlessItemsInZone_primaryKeys_databaseProvider_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fixUUIDlessItemsInZone:primaryKeys:databaseProvider:");
}

id objc_msgSend_fixupNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fixupNumber");
}

id objc_msgSend_fixupOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fixupOperation:");
}

id objc_msgSend_flag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flag");
}

id objc_msgSend_flagConditions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flagConditions");
}

id objc_msgSend_flagHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flagHandler");
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flags");
}

id objc_msgSend_flattenToSaveBlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flattenToSaveBlock");
}

id objc_msgSend_flowID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flowID");
}

id objc_msgSend_flushChanges_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flushChanges:");
}

id objc_msgSend_followStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "followStates");
}

id objc_msgSend_followup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "followup");
}

id objc_msgSend_followupHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "followupHandler");
}

id objc_msgSend_forEachCirclePeerExceptMe_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forEachCirclePeerExceptMe:");
}

id objc_msgSend_forEachRing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forEachRing:");
}

id objc_msgSend_forKeyClass_contextID_withKeyUUID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forKeyClass:contextID:withKeyUUID:zoneID:error:");
}

id objc_msgSend_forLiveCloudKit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forLiveCloudKit");
}

id objc_msgSend_forceFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceFetch");
}

id objc_msgSend_forceIgnoreCloudServicesRateLimiting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceIgnoreCloudServicesRateLimiting");
}

id objc_msgSend_forceRefetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceRefetch");
}

id objc_msgSend_forceResync(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceResync");
}

id objc_msgSend_forceSyncForRecoveryRing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceSyncForRecoveryRing");
}

id objc_msgSend_fromDatabase_contextID_receiverPeerID_senderPeerID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fromDatabase:contextID:receiverPeerID:senderPeerID:zoneID:error:");
}

id objc_msgSend_fromDatabase_contextID_state_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fromDatabase:contextID:state:zoneID:error:");
}

id objc_msgSend_fromDatabase_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fromDatabase:contextID:zoneID:error:");
}

id objc_msgSend_fromDatabase_state_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fromDatabase:state:contextID:zoneID:error:");
}

id objc_msgSend_fromDatabase_zoneName_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fromDatabase:zoneName:error:");
}

id objc_msgSend_fromDatabaseAnyState_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fromDatabaseAnyState:contextID:zoneID:error:");
}

id objc_msgSend_fromDatabaseRow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fromDatabaseRow:");
}

id objc_msgSend_fromDatabaseWhere_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fromDatabaseWhere:error:");
}

id objc_msgSend_fulfill(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fulfill");
}

id objc_msgSend_fullPeerInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullPeerInfo");
}

id objc_msgSend_futureBlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "futureBlock");
}

id objc_msgSend_fuzzyDaysSinceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fuzzyDaysSinceDate:");
}

id objc_msgSend_fuzzyNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fuzzyNumber:");
}

id objc_msgSend_gbAgeRamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gbAgeRamp");
}

id objc_msgSend_gbmidRamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gbmidRamp");
}

id objc_msgSend_gbserialRamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gbserialRamp");
}

id objc_msgSend_generateAndRestorePersonaContextWithPersonaUniqueString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateAndRestorePersonaContextWithPersonaUniqueString:");
}

id objc_msgSend_generateDeviceInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateDeviceInfo");
}

id objc_msgSend_generateError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateError:");
}

id objc_msgSend_generationCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generationCount");
}

id objc_msgSend_generationSignatureUpdateWith_key_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generationSignatureUpdateWith:key:");
}

id objc_msgSend_genericEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "genericEvent");
}

id objc_msgSend_gestalt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gestalt");
}

id objc_msgSend_getAcceptedTermsForAltDSID_withError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAcceptedTermsForAltDSID:withError:");
}

id objc_msgSend_getAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAccount");
}

id objc_msgSend_getAccountMetadataWithReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getAccountMetadataWithReply:");
}

id objc_msgSend_getCDPStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCDPStatus:");
}

id objc_msgSend_getChangeToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getChangeToken");
}

id objc_msgSend_getCircle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCircle:");
}

id objc_msgSend_getCircleStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCircleStatus");
}

id objc_msgSend_getCircleStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCircleStatus:");
}

id objc_msgSend_getCircleStatusOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCircleStatusOnly:");
}

id objc_msgSend_getCurrentItemForAccessGroup_identifier_viewHint_fetchCloudValue_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentItemForAccessGroup:identifier:viewHint:fetchCloudValue:complete:");
}

id objc_msgSend_getCurrentItemOutOfBand_forceFetch_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentItemOutOfBand:forceFetch:complete:");
}

id objc_msgSend_getDEREncodedSize_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDEREncodedSize:err:");
}

id objc_msgSend_getDataSourceEngine_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDataSourceEngine:");
}

id objc_msgSend_getDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getDate");
}

id objc_msgSend_getEgoPeerID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEgoPeerID:");
}

id objc_msgSend_getEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEvent");
}

id objc_msgSend_getEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEvent:");
}

id objc_msgSend_getGroupByGroupID_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getGroupByGroupID:completion:");
}

id objc_msgSend_getKeychainBackedKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getKeychainBackedKey:");
}

id objc_msgSend_getLimit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getLimit");
}

id objc_msgSend_getOverriddenMachineID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getOverriddenMachineID");
}

id objc_msgSend_getPropertyValue_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPropertyValue:object:");
}

id objc_msgSend_getPublicKeyStatusForKey_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPublicKeyStatusForKey:error:");
}

id objc_msgSend_getRings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getRings:");
}

id objc_msgSend_getSupportAppInfoWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSupportAppInfoWithSpecificUser:reply:");
}

id objc_msgSend_getTLKSharesPairedWithVoucher(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTLKSharesPairedWithVoucher");
}

id objc_msgSend_getTPSyncingPolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTPSyncingPolicy");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_getValueFromExpansion_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getValueFromExpansion:err:");
}

id objc_msgSend_getWatchdogParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getWatchdogParameters:");
}

id objc_msgSend_ghostBust_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostBust:complete:");
}

id objc_msgSend_ghostBustCheckDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostBustCheckDate");
}

id objc_msgSend_ghostBustFollowup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostBustFollowup");
}

id objc_msgSend_ghostBustGetDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostBustGetDate");
}

id objc_msgSend_ghostBustGetRampSettings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostBustGetRampSettings");
}

id objc_msgSend_ghostBustInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostBustInfo:");
}

id objc_msgSend_ghostBustPeriodic_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostBustPeriodic:complete:");
}

id objc_msgSend_ghostBustSchedule(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostBustSchedule");
}

id objc_msgSend_ghostBustTriggerTimed_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostBustTriggerTimed:complete:");
}

id objc_msgSend_ghostbustByAgeEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostbustByAgeEnabled");
}

id objc_msgSend_ghostbustByMidEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostbustByMidEnabled");
}

id objc_msgSend_ghostbustBySerialEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ghostbustBySerialEnabled");
}

id objc_msgSend_globalRateLimiter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globalRateLimiter");
}

id objc_msgSend_globalTracker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globalTracker");
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "group");
}

id objc_msgSend_groupByClause_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupByClause:");
}

id objc_msgSend_groupID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupID");
}

id objc_msgSend_groupManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupManager");
}

id objc_msgSend_groupStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupStart");
}

id objc_msgSend_groupUpdateInfoFrom_to_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupUpdateInfoFrom:to:");
}

id objc_msgSend_groups(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groups");
}

id objc_msgSend_groupsUpdated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupsUpdated");
}

id objc_msgSend_groupsUpdatedWithInfos_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "groupsUpdatedWithInfos:");
}

id objc_msgSend_gzipEncode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gzipEncode:");
}

id objc_msgSend_halt(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "halt");
}

id objc_msgSend_haltAll(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "haltAll");
}

id objc_msgSend_haltOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "haltOperation");
}

id objc_msgSend_halted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "halted");
}

id objc_msgSend_handle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handle");
}

id objc_msgSend_handleCKLogin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCKLogin");
}

id objc_msgSend_handleCKLogout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCKLogout");
}

id objc_msgSend_handleCircleMessagesAndReturnHandledCopy_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleCircleMessagesAndReturnHandledCopy:err:");
}

id objc_msgSend_handleEvictedMachineIDsWithSpecificUser_machineIDs_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleEvictedMachineIDsWithSpecificUser:machineIDs:reply:");
}

id objc_msgSend_handleExternalRequest_startTimeout_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleExternalRequest:startTimeout:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleFlag:");
}

id objc_msgSend_handleGroupCreateRequest_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleGroupCreateRequest:completion:");
}

id objc_msgSend_handleGroupDeleteRequest_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleGroupDeleteRequest:completion:");
}

id objc_msgSend_handleGroupFetchRequest_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleGroupFetchRequest:completion:");
}

id objc_msgSend_handleGroupLeaveRequest_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleGroupLeaveRequest:completion:");
}

id objc_msgSend_handleGroupUpdateRequest_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleGroupUpdateRequest:completion:");
}

id objc_msgSend_handleKeychainEventDbConnection_source_added_deleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleKeychainEventDbConnection:source:added:deleted:");
}

id objc_msgSend_handleKeychainEventDbConnection_source_added_deleted_rateLimiter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleKeychainEventDbConnection:source:added:deleted:rateLimiter:");
}

id objc_msgSend_handleMismatchedViewItems(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleMismatchedViewItems");
}

id objc_msgSend_handlePairingRestart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePairingRestart:");
}

id objc_msgSend_handlePendingFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePendingFlag:");
}

id objc_msgSend_handlePrepareErrors_nextExpectedState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePrepareErrors:nextExpectedState:");
}

id objc_msgSend_handleProvisioningActivity_isRetry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleProvisioningActivity:isRetry:");
}

id objc_msgSend_handleRemovedMachineIDsDueToUnknownReasonsWithSpecificUser_machineIDs_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRemovedMachineIDsDueToUnknownReasonsWithSpecificUser:machineIDs:reply:");
}

id objc_msgSend_handleRepairSuggestions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRepairSuggestions:");
}

id objc_msgSend_handleRetirementMessages_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRetirementMessages:err:");
}

id objc_msgSend_handleTTRRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTTRRequest:");
}

id objc_msgSend_handleUpdateRing_prospectiveRing_transport_userPublicKey_writeUpdate_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleUpdateRing:prospectiveRing:transport:userPublicKey:writeUpdate:err:");
}

id objc_msgSend_hasAltDSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasAltDSID");
}

id objc_msgSend_hasAttemptedJoin(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasAttemptedJoin");
}

id objc_msgSend_hasCertCached(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasCertCached");
}

id objc_msgSend_hasChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasChanged:");
}

id objc_msgSend_hasCircle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasCircle:");
}

id objc_msgSend_hasExists(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasExists");
}

id objc_msgSend_hasIncomingEntries_deletions_inTransaction_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasIncomingEntries:deletions:inTransaction:error:");
}

id objc_msgSend_hasLastCloudServicesTriggerTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasLastCloudServicesTriggerTime");
}

id objc_msgSend_hasLastEscrowAttemptTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasLastEscrowAttemptTime");
}

id objc_msgSend_hasLeft(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasLeft");
}

id objc_msgSend_hasMatch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasMatch");
}

id objc_msgSend_hasMatchingRule(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasMatchingRule");
}

id objc_msgSend_hasNot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasNot");
}

id objc_msgSend_hasOutgoingChangesInDatabaseWithScope_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasOutgoingChangesInDatabaseWithScope:");
}

id objc_msgSend_hasPeerInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPeerInfo");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasSerializedPrerecord(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSerializedPrerecord");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasSyncingPolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSyncingPolicy");
}

id objc_msgSend_hasUploadCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasUploadCompleted");
}

id objc_msgSend_hasValidCredentials(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasValidCredentials");
}

id objc_msgSend_hasWalrus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasWalrus");
}

id objc_msgSend_hasWebAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasWebAccess");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hash");
}

id objc_msgSend_hashWithAlgo_ofData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hashWithAlgo:ofData:");
}

id objc_msgSend_hasiCloudAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasiCloudAccount");
}

id objc_msgSend_haveConfirmedOctagonKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "haveConfirmedOctagonKeys");
}

id objc_msgSend_haveNetwork(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "haveNetwork");
}

id objc_msgSend_haveRecordedDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "haveRecordedDate");
}

id objc_msgSend_haveUnmirroredGroups_forDatabase_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "haveUnmirroredGroups:forDatabase:");
}

id objc_msgSend_havoc(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "havoc");
}

id objc_msgSend_healthCheck_skipRateLimitingCheck_repair_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "healthCheck:skipRateLimitingCheck:repair:reply:");
}

id objc_msgSend_history(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "history");
}

id objc_msgSend_holdIncomingQueueOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "holdIncomingQueueOperation");
}

id objc_msgSend_holdLocalSynchronizeOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "holdLocalSynchronizeOperation");
}

id objc_msgSend_holdOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "holdOperation");
}

id objc_msgSend_holdOutgoingQueueOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "holdOutgoingQueueOperation");
}

id objc_msgSend_holdStateMachineOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "holdStateMachineOperation");
}

id objc_msgSend_iCloudCheckEventHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iCloudCheckEventHandle:");
}

id objc_msgSend_iCloudCleanerHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iCloudCleanerHandle:");
}

id objc_msgSend_iCloudIdentityStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iCloudIdentityStatus:");
}

id objc_msgSend_iCloudIdentityStatus_internal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iCloudIdentityStatus_internal:");
}

id objc_msgSend_icloudAccountState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "icloudAccountState");
}

id objc_msgSend_icloudAccountStateAsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "icloudAccountStateAsString:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifiers");
}

id objc_msgSend_identityForIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identityForIdentifier:");
}

id objc_msgSend_identityIsPreapproved(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identityIsPreapproved");
}

id objc_msgSend_idmsCuttlefishPassword(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idmsCuttlefishPassword");
}

id objc_msgSend_idmsTargetContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idmsTargetContext");
}

id objc_msgSend_idmsTrustLevelChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idmsTrustLevelChanged:");
}

id objc_msgSend_ik(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ik");
}

id objc_msgSend_immutableData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "immutableData");
}

id objc_msgSend_importInitialSyncCredentials_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "importInitialSyncCredentials:complete:");
}

id objc_msgSend_incomingDatabaseItem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "incomingDatabaseItem");
}

id objc_msgSend_incompleteKeySets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "incompleteKeySets");
}

id objc_msgSend_incrementIntegerPropertyForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "incrementIntegerPropertyForKey:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexesOfObjectsPassingTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexesOfObjectsPassingTest:");
}

id objc_msgSend_inflateAllTPSpecificUsers_octagonContextID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inflateAllTPSpecificUsers:octagonContextID:");
}

id objc_msgSend_inflightFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inflightFetch");
}

id objc_msgSend_inflightFetchDependencies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inflightFetchDependencies");
}

id objc_msgSend_inflightFetchDependency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inflightFetchDependency");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "infoDictionary");
}

id objc_msgSend_inheritanceKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inheritanceKey");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init");
}

id objc_msgSend_init_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:");
}

id objc_msgSend_init_PCSPublicKey_zoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:PCSPublicKey:zoneID:");
}

id objc_msgSend_init_contextID_reason_idmsTargetContext_idmsCuttlefishPassword_notifyIdMS_intendedState_dependencies_errorState_cuttlefishXPCWrapper_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:contextID:reason:idmsTargetContext:idmsCuttlefishPassword:notifyIdMS:intendedState:dependencies:errorState:cuttlefishXPCWrapper:");
}

id objc_msgSend_init_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:error:");
}

id objc_msgSend_init_nsnotificationCenterClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:nsnotificationCenterClass:");
}

id objc_msgSend_init_sender_receiver_curve_version_epoch_poisoned_zoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:sender:receiver:curve:version:epoch:poisoned:zoneID:");
}

id objc_msgSend_init_sourceStates_serialQueue_transitionOp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:sourceStates:serialQueue:transitionOp:");
}

id objc_msgSend_init_zoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:zoneID:");
}

id objc_msgSend_initAsEssential_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initAsEssential:");
}

id objc_msgSend_initAsSuccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initAsSuccess");
}

id objc_msgSend_initCopyingCKKSItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initCopyingCKKSItem:");
}

id objc_msgSend_initForClass_contextID_currentKeyUUID_zoneID_encodedCKRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForClass:contextID:currentKeyUUID:zoneID:encodedCKRecord:");
}

id objc_msgSend_initForContainer_contextID_activeAccount_stateHolder_flagHandler_sosAdapter_octagonAdapter_accountsAdapter_authKitAdapter_personaAdapter_deviceInfoAdapter_ckksAccountSync_lockStateTracker_cuttlefishXPCWrapper_escrowRequestClass_notifierClass_flowID_deviceSessionID_permittedToSendMetrics_reachabilityTracker_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForContainer:contextID:activeAccount:stateHolder:flagHandler:sosAdapter:octagonAdapter:accountsAdapter:authKitAdapter:personaAdapter:deviceInfoAdapter:ckksAccountSync:lockStateTracker:cuttlefishXPCWrapper:escrowRequestClass:notifierClass:flowID:deviceSessionID:permittedToSendMetrics:reachabilityTracker:");
}

id objc_msgSend_initForContainerName_contextID_epoch_machineID_modelID_deviceName_serialNumber_osVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForContainerName:contextID:epoch:machineID:modelID:deviceName:serialNumber:osVersion:");
}

id objc_msgSend_initForDeletedRecordWithRecordID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForDeletedRecordWithRecordID:");
}

id objc_msgSend_initForDevice_contextID_osVersion_lastUnlockTime_octagonPeerID_octagonStatus_circlePeerID_circleStatus_keyState_currentTLKUUID_currentClassAUUID_currentClassCUUID_zoneID_encodedCKRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForDevice:contextID:osVersion:lastUnlockTime:octagonPeerID:octagonStatus:circlePeerID:circleStatus:keyState:currentTLKUUID:currentClassAUUID:currentClassCUUID:zoneID:encodedCKRecord:");
}

id objc_msgSend_initForIdentifier_contextID_currentItemUUID_state_zoneID_encodedCKRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForIdentifier:contextID:currentItemUUID:state:zoneID:encodedCKRecord:");
}

id objc_msgSend_initForKey_contextID_senderPeerID_recieverPeerID_receiverEncPublicKeySPKI_curve_version_epoch_poisoned_wrappedKey_signature_zoneID_encodedCKRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForKey:contextID:senderPeerID:recieverPeerID:receiverEncPublicKeySPKI:curve:version:epoch:poisoned:wrappedKey:signature:zoneID:encodedCKRecord:");
}

id objc_msgSend_initForKey_senderPeerID_recieverPeerID_receiverEncPublicKeySPKI_curve_version_epoch_poisoned_wrappedKey_signature_zoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForKey:senderPeerID:recieverPeerID:receiverEncPublicKeySPKI:curve:version:epoch:poisoned:wrappedKey:signature:zoneID:");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initIntending_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initIntending:errorState:");
}

id objc_msgSend_initNamed_serialQueue_states_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initNamed:serialQueue:states:");
}

id objc_msgSend_initNamed_serialQueue_states_failStates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initNamed:serialQueue:states:failStates:");
}

id objc_msgSend_initNamed_stateMachine_path_initialRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initNamed:stateMachine:path:initialRequest:");
}

id objc_msgSend_initPasskeyWithPrivateKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initPasskeyWithPrivateKey:");
}

id objc_msgSend_initPasskeyWithPrivateKeyDatabaseItem_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initPasskeyWithPrivateKeyDatabaseItem:error:");
}

id objc_msgSend_initPasskeyWithProto_sharingGroup_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initPasskeyWithProto:sharingGroup:error:");
}

id objc_msgSend_initPasswordWithInternetPassword_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initPasswordWithInternetPassword:");
}

id objc_msgSend_initPasswordWithInternetPasswordDatabaseItem_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initPasswordWithInternetPasswordDatabaseItem:error:");
}

id objc_msgSend_initPasswordWithProto_sharingGroup_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initPasswordWithProto:sharingGroup:error:");
}

id objc_msgSend_initRandomKeyWithSpecifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initRandomKeyWithSpecifier:error:");
}

id objc_msgSend_initRefKeyWrappedKeyWithData_refKeyBlob_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initRefKeyWrappedKeyWithData:refKeyBlob:");
}

id objc_msgSend_initRegularWrappedKeyWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initRegularWrappedKeyWithData:");
}

id objc_msgSend_initRequiringSecureCoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initRequiringSecureCoding:");
}

id objc_msgSend_initSOSClientWithAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initSOSClientWithAccount:");
}

id objc_msgSend_initSOSConnectionWithConnection_account_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initSOSConnectionWithConnection:account:");
}

id objc_msgSend_initSelfWrappedWithAESKey_contextID_uuid_keyclass_state_zoneID_encodedCKRecord_currentkey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initSelfWrappedWithAESKey:contextID:uuid:keyclass:state:zoneID:encodedCKRecord:currentkey:");
}

id objc_msgSend_initTapToRadar_description_radar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initTapToRadar:description:radar:");
}

id objc_msgSend_initToChain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initToChain:");
}

id objc_msgSend_initWithAESKey_wrappedAESKey_uuid_parentKeyUUID_keyclass_zoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAESKey:wrappedAESKey:uuid:parentKeyUUID:keyclass:zoneID:");
}

id objc_msgSend_initWithAccessGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccessGroup:");
}

id objc_msgSend_initWithAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccount:");
}

id objc_msgSend_initWithAccount_andCircleName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccount:andCircleName:");
}

id objc_msgSend_initWithAccount_andName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccount:andName:");
}

id objc_msgSend_initWithAccount_quiet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccount:quiet:");
}

id objc_msgSend_initWithActiveMIDS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithActiveMIDS:");
}

id objc_msgSend_initWithAltDSID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAltDSID:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAttributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAttributes:error:");
}

id objc_msgSend_initWithBase64_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBase64:");
}

id objc_msgSend_initWithBase64EncodedData_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBase64EncodedData:options:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBitSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBitSize:");
}

id objc_msgSend_initWithBytes_len_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:len:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytesNoCopy_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytesNoCopy:length:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCKKSItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCKKSItem:");
}

id objc_msgSend_initWithCKKSItem_action_state_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCKKSItem:action:state:");
}

id objc_msgSend_initWithCKKSItem_action_state_waitUntil_accessGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCKKSItem:action:state:waitUntil:accessGroup:");
}

id objc_msgSend_initWithCKKSKeychainView_dependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCKKSKeychainView:dependencies:");
}

id objc_msgSend_initWithCKKSKeychainView_operationDependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCKKSKeychainView:operationDependencies:");
}

id objc_msgSend_initWithCKKSMetrics_altDSID_eventName_testsAreEnabled_category_sendMetric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCKKSMetrics:altDSID:eventName:testsAreEnabled:category:sendMetric:");
}

id objc_msgSend_initWithCKKSOperationDependencies_viewState_accessGroup_identifiers_ckoperationGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCKKSOperationDependencies:viewState:accessGroup:identifiers:ckoperationGroup:");
}

id objc_msgSend_initWithCKKSOperationDependencies_viewState_newItem_hash_accessGroup_identifier_replacing_hash_ckoperationGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCKKSOperationDependencies:viewState:newItem:hash:accessGroup:identifier:replacing:hash:ckoperationGroup:");
}

id objc_msgSend_initWithCKRecord_contextID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCKRecord:contextID:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCiphertext_wrappedKey_tamperCheck_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCiphertext:wrappedKey:tamperCheck:error:");
}

id objc_msgSend_initWithClientIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithClientIdentifier:");
}

id objc_msgSend_initWithCloudkitContainerName_octagonContextID_appleAccountID_altDSID_isPrimaryPersona_personaUniqueString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCloudkitContainerName:octagonContextID:appleAccountID:altDSID:isPrimaryPersona:personaUniqueString:");
}

id objc_msgSend_initWithCoder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCoder:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConnection:");
}

id objc_msgSend_initWithConnection_allowedProtocol_groupManager_syncController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConnection:allowedProtocol:groupManager:syncController:");
}

id objc_msgSend_initWithContainer_contextID_activeAccount_accountTracker_lockStateTracker_reachabilityTracker_savedTLKNotifier_cloudKitClassDependencies_personaAdapter_accountsAdapter_cuttlefishAdapter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContainer:contextID:activeAccount:accountTracker:lockStateTracker:reachabilityTracker:savedTLKNotifier:cloudKitClassDependencies:personaAdapter:accountsAdapter:cuttlefishAdapter:");
}

id objc_msgSend_initWithContainer_fetchClass_clientMap_fetchReasons_apnsPushes_forceResync_ckoperationGroup_altDSID_sendMetric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContainer:fetchClass:clientMap:fetchReasons:apnsPushes:forceResync:ckoperationGroup:altDSID:sendMetric:");
}

id objc_msgSend_initWithContainer_fetchClass_reachabilityTracker_altDSID_sendMetric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContainer:fetchClass:reachabilityTracker:altDSID:sendMetric:");
}

id objc_msgSend_initWithContainer_sosAdapter_accountStateTracker_lockStateTracker_reachabilityTracker_personaAdapter_cloudKitClassDependencies_accountsAdapter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContainer:sosAdapter:accountStateTracker:lockStateTracker:reachabilityTracker:personaAdapter:cloudKitClassDependencies:accountsAdapter:");
}

id objc_msgSend_initWithContainerID_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContainerID:options:");
}

id objc_msgSend_initWithContainerName_contextID_activeAccount_cuttlefish_ckksAccountSync_sosAdapter_accountsAdapter_authKitAdapter_personaAdapter_tooManyPeersAdapter_tapToRadarAdapter_lockStateTracker_reachabilityTracker_accountStateTracker_deviceInformationAdapter_apsConnectionClass_escrowRequestClass_notifierClass_cdpd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContainerName:contextID:activeAccount:cuttlefish:ckksAccountSync:sosAdapter:accountsAdapter:authKitAdapter:personaAdapter:tooManyPeersAdapter:tapToRadarAdapter:lockStateTracker:reachabilityTracker:accountStateTracker:deviceInformationAdapter:apsConnectionClass:escrowRequestClass:notifierClass:cdpd:");
}

id objc_msgSend_initWithContents_fullyDecoded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContents:fullyDecoded:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithContextID_zoneName_zoneCreated_zoneSubscribed_changeToken_moreRecordsInCloudKit_lastFetch_lastScan_lastFixup_encodedRateLimiter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContextID:zoneName:zoneCreated:zoneSubscribed:changeToken:moreRecordsInCloudKit:lastFetch:lastScan:lastFixup:encodedRateLimiter:");
}

id objc_msgSend_initWithCurrent_allSelves_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCurrent:allSelves:");
}

id objc_msgSend_initWithCurve_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCurve:");
}

id objc_msgSend_initWithCuttlefishXPCConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCuttlefishXPCConnection:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_decryptionKeybag_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:decryptionKeybag:error:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithData_signature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:signature:");
}

id objc_msgSend_initWithData_specifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:specifier:error:");
}

id objc_msgSend_initWithDatabase_dataSource_metadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDatabase:dataSource:metadata:");
}

id objc_msgSend_initWithDatabaseItem_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDatabaseItem:error:");
}

id objc_msgSend_initWithDatabaseScope_desiredZoneIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDatabaseScope:desiredZoneIDs:");
}

id objc_msgSend_initWithDatabaseScope_keyset_fetchBehavior_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDatabaseScope:keyset:fetchBehavior:");
}

id objc_msgSend_initWithDefaults_dateDescription_earliest_latest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDefaults:dateDescription:earliest:latest:");
}

id objc_msgSend_initWithDeletedLocalItemForMirrorEntry_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDeletedLocalItemForMirrorEntry:");
}

id objc_msgSend_initWithDeletedRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDeletedRecord:");
}

id objc_msgSend_initWithDepartedGroupID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDepartedGroupID:");
}

id objc_msgSend_initWithDependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:");
}

id objc_msgSend_initWithDependencies_allowFullRefetchResult_intendedState_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:allowFullRefetchResult:intendedState:errorState:");
}

id objc_msgSend_initWithDependencies_allowFullRefetchResult_intending_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:allowFullRefetchResult:intending:errorState:");
}

id objc_msgSend_initWithDependencies_intendedState_ckksConflictState_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:ckksConflictState:errorState:");
}

id objc_msgSend_initWithDependencies_intendedState_ckksConflictState_errorState_deviceInfo_policyOverride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:ckksConflictState:errorState:deviceInfo:policyOverride:");
}

id objc_msgSend_initWithDependencies_intendedState_ckksConflictState_peerMissingState_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:ckksConflictState:peerMissingState:errorState:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_accountSettings_accountWide_forceFetch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:accountSettings:accountWide:forceFetch:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_bottleID_entropy_bottleSalt_saveVoucher_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:bottleID:entropy:bottleSalt:saveVoucher:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_custodianRecoveryKey_saveVoucher_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:custodianRecoveryKey:saveVoucher:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_deviceInfo_peerID_permanentInfo_permanentInfoSig_stableInfo_stableInfoSig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:deviceInfo:peerID:permanentInfo:permanentInfoSig:stableInfo:stableInfoSig:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_deviceInfo_policyOverride_accountSettings_epoch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:deviceInfo:policyOverride:accountSettings:epoch:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_deviceInfo_skipRateLimitedCheck_reportRateLimitingError_repair_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:deviceInfo:skipRateLimitedCheck:reportRateLimitingError:repair:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_holdOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:holdOperation:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_ik_deviceInfo_policyOverride_isInheritedAccount_epoch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:ik:deviceInfo:policyOverride:isInheritedAccount:epoch:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_peerIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:peerIDs:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_recoveryKey_saveVoucher_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:recoveryKey:saveVoucher:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_saveVoucher_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:saveVoucher:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_settings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:settings:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_tphcrk_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:errorState:tphcrk:");
}

id objc_msgSend_initWithDependencies_intendedState_listUpdatesState_errorState_retryFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:listUpdatesState:errorState:retryFlag:");
}

id objc_msgSend_initWithDependencies_intendedState_peerUnknownState_determineCDPState_errorState_forceRefetch_retryFlag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:peerUnknownState:determineCDPState:errorState:forceRefetch:retryFlag:");
}

id objc_msgSend_initWithDependencies_intendedState_sosNotPresentState_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedState:sosNotPresentState:errorState:");
}

id objc_msgSend_initWithDependencies_intendedViewStatus_intendedState_peerMissingState_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intendedViewStatus:intendedState:peerMissingState:errorState:");
}

id objc_msgSend_initWithDependencies_intending_ckErrorState_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intending:ckErrorState:errorState:");
}

id objc_msgSend_initWithDependencies_intending_errorState_ckoperationGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intending:errorState:ckoperationGroup:");
}

id objc_msgSend_initWithDependencies_intending_pendingClassAItemsRemainingState_errorState_handleMismatchedViewItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:intending:pendingClassAItemsRemainingState:errorState:handleMismatchedViewItems:");
}

id objc_msgSend_initWithDependencies_recoveryKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:recoveryKey:");
}

id objc_msgSend_initWithDependencies_refetchNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:refetchNeeded:");
}

id objc_msgSend_initWithDependencies_rollTLKIfPresent_preexistingPendingKeySets_intendedState_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:rollTLKIfPresent:preexistingPendingKeySets:intendedState:errorState:");
}

id objc_msgSend_initWithDependencies_stateIfCDPCapable_stateIfNotCDPCapable_stateIfNoAccount_errorState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:stateIfCDPCapable:stateIfNotCDPCapable:stateIfNoAccount:errorState:");
}

id objc_msgSend_initWithDependencies_viewsToFetch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDependencies:viewsToFetch:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithEmailAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEmailAddress:");
}

id objc_msgSend_initWithEngine_peer_localManifest_proposedManifest_confirmedManifest_andMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEngine:peer:localManifest:proposedManifest:confirmedManifest:andMessage:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithEventName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEventName:");
}

id objc_msgSend_initWithEventName_eventCategory_initData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEventName:eventCategory:initData:");
}

id objc_msgSend_initWithFetchRecordZoneChangesOperationClass_fetchRecordsOperationClass_queryOperationClass_modifySubscriptionsOperationClass_modifyRecordZonesOperationClass_apsConnectionClass_nsnotificationCenterClass_nsdistributednotificationCenterClass_notifierClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFetchRecordZoneChangesOperationClass:fetchRecordsOperationClass:queryOperationClass:modifySubscriptionsOperationClass:modifyRecordZonesOperationClass:apsConnectionClass:nsnotificationCenterClass:nsdistributednotificationCenterClass:notifierClass:");
}

id objc_msgSend_initWithFetchedRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFetchedRecord:");
}

id objc_msgSend_initWithFlag_conditions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFlag:conditions:");
}

id objc_msgSend_initWithFlag_conditions_delayInSeconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFlag:conditions:delayInSeconds:");
}

id objc_msgSend_initWithFlag_delayInSeconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFlag:delayInSeconds:");
}

id objc_msgSend_initWithFlowID_deviceSessionID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFlowID:deviceSessionID:");
}

id objc_msgSend_initWithFollowupController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFollowupController:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithGestalt_factory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithGestalt:factory:");
}

id objc_msgSend_initWithGroup_addedParticipants_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithGroup:addedParticipants:");
}

id objc_msgSend_initWithGroupID_participants_displayName_shareURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithGroupID:participants:displayName:shareURL:");
}

id objc_msgSend_initWithHandle_permissionLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithHandle:permissionLevel:");
}

id objc_msgSend_initWithIK_dependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIK:dependencies:");
}

id objc_msgSend_initWithIdentifier_accessGroup_zoneID_decryptedRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentifier:accessGroup:zoneID:decryptedRecord:");
}

id objc_msgSend_initWithIncomingDatabaseItem_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIncomingDatabaseItem:error:");
}

id objc_msgSend_initWithIncomingEntry_flags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIncomingEntry:flags:");
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInt:");
}

id objc_msgSend_initWithIntendedState_errorState_enforceRateLimiting_lockStateTracker_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIntendedState:errorState:enforceRateLimiting:lockStateTracker:");
}

id objc_msgSend_initWithIntendedState_errorState_lockStateTracker_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIntendedState:errorState:lockStateTracker:");
}

id objc_msgSend_initWithIntendedZoneIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIntendedZoneIDs:");
}

id objc_msgSend_initWithKeyCore_contextID_state_currentkey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKeyCore:contextID:state:currentkey:");
}

id objc_msgSend_initWithKeySpecifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKeySpecifier:");
}

id objc_msgSend_initWithKeySpecifier_digestOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKeySpecifier:digestOperation:");
}

id objc_msgSend_initWithKeychainCircleMetrics_altDSID_flowID_deviceSessionID_eventName_testsAreEnabled_canSendMetrics_category_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKeychainCircleMetrics:altDSID:flowID:deviceSessionID:eventName:testsAreEnabled:canSendMetrics:category:");
}

id objc_msgSend_initWithKeyprint_valueprint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKeyprint:valueprint:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithListener_queue_daemonGroupManager_syncController_entitlementBearer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithListener:queue:daemonGroupManager:syncController:entitlementBearer:");
}

id objc_msgSend_initWithLocalItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLocalItem:");
}

id objc_msgSend_initWithLockStateTracker_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLockStateTracker:");
}

id objc_msgSend_initWithLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLong:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithManager_entitlementBearer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithManager:entitlementBearer:");
}

id objc_msgSend_initWithMirrorDatabaseItem_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMirrorDatabaseItem:error:");
}

id objc_msgSend_initWithMirrorEntry_flags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMirrorEntry:flags:");
}

id objc_msgSend_initWithModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithModel:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_delay_keepProcessAlive_dependencyDescriptionCode_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:delay:keepProcessAlive:dependencyDescriptionCode:block:");
}

id objc_msgSend_initWithName_initialDelay_continuingDelay_keepProcessAlive_dependencyDescriptionCode_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:initialDelay:continuingDelay:keepProcessAlive:dependencyDescriptionCode:block:");
}

id objc_msgSend_initWithName_initialDelay_exponentialBackoff_maximumDelay_keepProcessAlive_dependencyDescriptionCode_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:initialDelay:exponentialBackoff:maximumDelay:keepProcessAlive:dependencyDescriptionCode:block:");
}

id objc_msgSend_initWithName_initialDelay_exponentialBackoff_maximumDelay_keepProcessAlive_dependencyDescriptionCode_qosClass_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:initialDelay:exponentialBackoff:maximumDelay:keepProcessAlive:dependencyDescriptionCode:qosClass:block:");
}

id objc_msgSend_initWithName_states_flags_initialState_queue_stateEngine_unexpectedStateErrorDomain_lockStateTracker_reachabilityTracker_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:states:flags:initialState:queue:stateEngine:unexpectedStateErrorDomain:lockStateTracker:reachabilityTracker:");
}

id objc_msgSend_initWithName_version_identifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:version:identifier:");
}

id objc_msgSend_initWithNamedDelegatePort_apsConnectionClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNamedDelegatePort:apsConnectionClass:");
}

id objc_msgSend_initWithNewLocalItem_zoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNewLocalItem:zoneID:");
}

id objc_msgSend_initWithOperation_columnName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOperation:columnName:");
}

id objc_msgSend_initWithOperation_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOperation:value:");
}

id objc_msgSend_initWithOperationDependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOperationDependencies:");
}

id objc_msgSend_initWithOperationDependencies_ckoperationGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOperationDependencies:ckoperationGroup:");
}

id objc_msgSend_initWithOperationDependencies_fixupNumber_ckoperationGroup_entering_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOperationDependencies:fixupNumber:ckoperationGroup:entering:");
}

id objc_msgSend_initWithOperationDependencies_rateLimit_ckoperationGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOperationDependencies:rateLimit:ckoperationGroup:");
}

id objc_msgSend_initWithOutgoingDatabaseItem_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOutgoingDatabaseItem:error:");
}

id objc_msgSend_initWithParticipantID_handle_permissionLevel_isCurrentUser_inviteStatus_sharingInvitationData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithParticipantID:handle:permissionLevel:isCurrentUser:inviteStatus:sharingInvitationData:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithPeer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPeer:");
}

id objc_msgSend_initWithPeerID_encryptionPublicKey_signingPublicKey_viewList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPeerID:encryptionPublicKey:signingPublicKey:viewList:");
}

id objc_msgSend_initWithPeerID_signingIdentity_encryptionIdentity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPeerID:signingIdentity:encryptionIdentity:");
}

id objc_msgSend_initWithPeerID_specificUser_personaAdapter_cuttlefishXPC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPeerID:specificUser:personaAdapter:cuttlefishXPC:");
}

id objc_msgSend_initWithPeerProviderID_essential_selfPeers_selfPeersError_trustedPeers_trustedPeersError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPeerProviderID:essential:selfPeers:selfPeersError:trustedPeers:trustedPeersError:");
}

id objc_msgSend_initWithPhoneNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPhoneNumber:");
}

id objc_msgSend_initWithPlaceholderOutgoingDatabaseItem_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPlaceholderOutgoingDatabaseItem:error:");
}

id objc_msgSend_initWithProto_sharingGroup_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProto:sharingGroup:error:");
}

id objc_msgSend_initWithProvider_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProvider:");
}

id objc_msgSend_initWithPublicKey_publickeyHash_user_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPublicKey:publickeyHash:user:");
}

id objc_msgSend_initWithQuery_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQuery:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueue_container_context_personaAdapter_activeAccount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:container:context:personaAdapter:activeAccount:");
}

id objc_msgSend_initWithQueue_flags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:flags:");
}

id objc_msgSend_initWithRecordID_action_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordID:action:");
}

id objc_msgSend_initWithRecordID_recordType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordID:recordType:");
}

id objc_msgSend_initWithRecordIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordIDs:");
}

id objc_msgSend_initWithRecordName_localSettingName_container_database_zoneID_accountTracker_lockStateTracker_reachabilityTracker_fetchRecordRecordsOperationClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordName:localSettingName:container:database:zoneID:accountTracker:lockStateTracker:reachabilityTracker:fetchRecordRecordsOperationClass:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithRecordType_predicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordType:predicate:");
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordType:recordID:");
}

id objc_msgSend_initWithRecordZoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordZoneID:");
}

id objc_msgSend_initWithRecordZoneIDs_configurationsByRecordZoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordZoneIDs:configurationsByRecordZoneID:");
}

id objc_msgSend_initWithRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordsToSave:recordIDsToDelete:");
}

id objc_msgSend_initWithRecordsToSave_recordIDsToDelete_cursor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRecordsToSave:recordIDsToDelete:cursor:");
}

id objc_msgSend_initWithRemotelyChangedIncomingDatabaseItem_locallyChangedOutgoingDatabaseItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemotelyChangedIncomingDatabaseItem:locallyChangedOutgoingDatabaseItem:");
}

id objc_msgSend_initWithRemotelyChangedIncomingDatabaseItem_locallyDeletedOutgoingDatabaseItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemotelyChangedIncomingDatabaseItem:locallyDeletedOutgoingDatabaseItem:");
}

id objc_msgSend_initWithRemotelyDeletedIncomingDatabaseItem_locallyChangedOutgoingDatabaseItem_mirrorDatabaseItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemotelyDeletedIncomingDatabaseItem:locallyChangedOutgoingDatabaseItem:mirrorDatabaseItem:");
}

id objc_msgSend_initWithRemotelyDeletedIncomingDatabaseItem_locallyDeletedOutgoingDatabaseItem_mirrorDatabaseItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRemotelyDeletedIncomingDatabaseItem:locallyDeletedOutgoingDatabaseItem:mirrorDatabaseItem:");
}

id objc_msgSend_initWithRetirees_fpi_circle_departureCode_peerExpansion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRetirees:fpi:circle:departureCode:peerExpansion:");
}

id objc_msgSend_initWithRocketName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRocketName:");
}

id objc_msgSend_initWithSOSAdapter_accountsAdapter_authKitAdapter_tooManyPeersAdapter_tapToRadarAdapter_deviceInformationAdapter_personaAdapter_apsConnectionClass_escrowRequestClass_notifierClass_loggerClass_lockStateTracker_reachabilityTracker_cloudKitClassDependencies_cuttlefishXPCConnection_cdpd_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSOSAdapter:accountsAdapter:authKitAdapter:tooManyPeersAdapter:tapToRadarAdapter:deviceInformationAdapter:personaAdapter:apsConnectionClass:escrowRequestClass:notifierClass:loggerClass:lockStateTracker:reachabilityTracker:cloudKitClassDependencies:cuttlefishXPCConnection:cdpd:");
}

id objc_msgSend_initWithSOSPeerID_encryptionKey_signingKey_viewList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSOSPeerID:encryptionKey:signingKey:viewList:");
}

id objc_msgSend_initWithSOSPeerID_encryptionPublicKey_signingPublicKey_viewList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSOSPeerID:encryptionPublicKey:signingPublicKey:viewList:");
}

id objc_msgSend_initWithSavedRecord_forOutgoingEntry_flags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSavedRecord:forOutgoingEntry:flags:");
}

id objc_msgSend_initWithSecKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSecKey:");
}

id objc_msgSend_initWithSecretAttributes_metadataAttributes_tamperCheck_keyclass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSecretAttributes:metadataAttributes:tamperCheck:keyclass:");
}

id objc_msgSend_initWithSecureElementIdentity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSecureElementIdentity:");
}

id objc_msgSend_initWithSecurityClient_fakeEntitlements_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSecurityClient:fakeEntitlements:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithServiceNumber_publicKey_zoneID_decryptedRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceNumber:publicKey:zoneID:decryptedRecord:");
}

id objc_msgSend_initWithServiceType_applicationIdentifier_domain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceType:applicationIdentifier:domain:");
}

id objc_msgSend_initWithSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSet:");
}

id objc_msgSend_initWithShare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithShare:");
}

id objc_msgSend_initWithShare_contextID_zoneID_encodedCKRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithShare:contextID:zoneID:encodedCKRecord:");
}

id objc_msgSend_initWithShareURLs_invitationTokensByShareURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithShareURLs:invitationTokensByShareURL:");
}

id objc_msgSend_initWithSharingInvitationData_shareURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSharingInvitationData:shareURL:");
}

id objc_msgSend_initWithState_pathStep_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithState:pathStep:");
}

id objc_msgSend_initWithStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStatus:");
}

id objc_msgSend_initWithStoragePath_storageClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStoragePath:storageClass:");
}

id objc_msgSend_initWithStore_container_privateSyncEngine_sharedSyncEngine_messagingdConnection_forTesting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStore:container:privateSyncEngine:sharedSyncEngine:messagingdConnection:forTesting:");
}

id objc_msgSend_initWithStore_container_privateSyncEngine_sharedSyncEngine_messagingdConnection_lockStateTracker_forTesting_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStore:container:privateSyncEngine:sharedSyncEngine:messagingdConnection:lockStateTracker:forTesting:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithSubscriptionsToSave_subscriptionIDsToDelete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSubscriptionsToSave:subscriptionIDsToDelete:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithSyncController_messagingdConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSyncController:messagingdConnection:");
}

id objc_msgSend_initWithTLK_classA_classC_newUpload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTLK:classA:classC:newUpload:");
}

id objc_msgSend_initWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTimeIntervalSince1970:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:");
}

id objc_msgSend_initWithUUID_claimTokenData_wrappingKeyData_dependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:claimTokenData:wrappingKeyData:dependencies:");
}

id objc_msgSend_initWithUUID_claimTokenData_wrappingKeyData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:claimTokenData:wrappingKeyData:error:");
}

id objc_msgSend_initWithUUID_dependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:dependencies:");
}

id objc_msgSend_initWithUUID_encryptionKey_signingKey_recoveryString_salt_kind_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:encryptionKey:signingKey:recoveryString:salt:kind:");
}

id objc_msgSend_initWithUUID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:error:");
}

id objc_msgSend_initWithUUID_oldIK_dependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:oldIK:dependencies:");
}

id objc_msgSend_initWithUUID_oldIK_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:oldIK:error:");
}

id objc_msgSend_initWithUUID_parentKeyUUID_contextID_zoneID_encodedCKRecord_encItem_wrappedkey_generationCount_encver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:parentKeyUUID:contextID:zoneID:encodedCKRecord:encItem:wrappedkey:generationCount:encver:");
}

id objc_msgSend_initWithUUID_parentKeyUUID_contextID_zoneID_encodedCKRecord_encItem_wrappedkey_generationCount_encver_plaintextPCSServiceIdentifier_plaintextPCSPublicKey_plaintextPCSPublicIdentity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:parentKeyUUID:contextID:zoneID:encodedCKRecord:encItem:wrappedkey:generationCount:encver:plaintextPCSServiceIdentifier:plaintextPCSPublicKey:plaintextPCSPublicIdentity:");
}

id objc_msgSend_initWithUUID_recoveryString_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:recoveryString:error:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUpdatedLocalItem_forIncomingEntry_flags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUpdatedLocalItem:forIncomingEntry:flags:");
}

id objc_msgSend_initWithUpdatedLocalItem_forMirrorEntry_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUpdatedLocalItem:forMirrorEntry:error:");
}

id objc_msgSend_initWithUpdatedLocalItem_forMirrorEntry_flags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUpdatedLocalItem:forMirrorEntry:flags:");
}

id objc_msgSend_initWithUserActivityLabel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUserActivityLabel:");
}

id objc_msgSend_initWithUserHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUserHandle:");
}

id objc_msgSend_initWithUserIdentityLookupInfos_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUserIdentityLookupInfos:");
}

id objc_msgSend_initWithValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithValues:");
}

id objc_msgSend_initWithView_tlkUUID_receiverPeerID_senderPeerID_wrappedTLK_signature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithView:tlkUUID:receiverPeerID:senderPeerID:wrappedTLK:signature:");
}

id objc_msgSend_initWithView_uuid_parentTLKUUID_keyData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithView:uuid:parentTLKUUID:keyData:");
}

id objc_msgSend_initWithViewName_tlk_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithViewName:tlk:");
}

id objc_msgSend_initWithViewName_tlkShare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithViewName:tlkShare:");
}

id objc_msgSend_initWithViewStates_contextID_activeAccount_ckdatabase_cloudKitClassDependencies_ckoperationGroup_flagHandler_overallLaunch_accountStateTracker_lockStateTracker_reachabilityTracker_peerProviders_databaseProvider_savedTLKNotifier_personaAdapter_sendMetric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithViewStates:contextID:activeAccount:ckdatabase:cloudKitClassDependencies:ckoperationGroup:flagHandler:overallLaunch:accountStateTracker:lockStateTracker:reachabilityTracker:peerProviders:databaseProvider:savedTLKNotifier:personaAdapter:sendMetric:");
}

id objc_msgSend_initWithWrappedAESKey_uuid_parentKeyUUID_keyclass_zoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWrappedAESKey:uuid:parentKeyUUID:keyclass:zoneID:");
}

id objc_msgSend_initWithWrappedKeyData_contextID_uuid_parentKeyUUID_keyclass_state_zoneID_encodedCKRecord_currentkey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWrappedKeyData:contextID:uuid:parentKeyUUID:keyclass:state:zoneID:encodedCKRecord:currentkey:");
}

id objc_msgSend_initWithZoneID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithZoneID:");
}

id objc_msgSend_initWithZoneID_contextID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithZoneID:contextID:");
}

id objc_msgSend_initWithZoneID_forContextID_ckksManagedView_priorityView_notifyViewChangedScheduler_notifyViewReadyScheduler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithZoneID:forContextID:ckksManagedView:priorityView:notifyViewChangedScheduler:notifyViewReadyScheduler:");
}

id objc_msgSend_initWithZoneID_subscriptionID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithZoneID:subscriptionID:");
}

id objc_msgSend_initWithZoneName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithZoneName:");
}

id objc_msgSend_initWithZoneName_ownerName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithZoneName:ownerName:");
}

id objc_msgSend_initialBecomeUntrustedPosted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialBecomeUntrustedPosted");
}

id objc_msgSend_initialDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialDelay");
}

id objc_msgSend_initialID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialID");
}

id objc_msgSend_initialInCircle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialInCircle");
}

id objc_msgSend_initialKeyParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialKeyParameters");
}

id objc_msgSend_initialState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialState");
}

id objc_msgSend_initialSyncCredentials_altDSID_flowID_deviceSessionID_canSendMetrics_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialSyncCredentials:altDSID:flowID:deviceSessionID:canSendMetrics:complete:");
}

id objc_msgSend_initialTrusted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialTrusted");
}

id objc_msgSend_initialUnsyncedViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialUnsyncedViews");
}

id objc_msgSend_initialViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initialViews");
}

id objc_msgSend_initializeOctagon(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializeOctagon");
}

id objc_msgSend_initializingOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initializingOperation");
}

id objc_msgSend_insertIntoIncoming(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertIntoIncoming");
}

id objc_msgSend_insertIntoLocalAndMirror(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertIntoLocalAndMirror");
}

id objc_msgSend_insertIntoMirror(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertIntoMirror");
}

id objc_msgSend_insertIntoOutgoing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertIntoOutgoing");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insideSQLTransaction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insideSQLTransaction");
}

id objc_msgSend_inspectErrorForRetryAfter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inspectErrorForRetryAfter:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_intendedFederation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intendedFederation");
}

id objc_msgSend_intendedPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intendedPath");
}

id objc_msgSend_intendedState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intendedState");
}

id objc_msgSend_intendedViewStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intendedViewStatus");
}

id objc_msgSend_intendedZoneIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intendedZoneIDs");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internalSuccesses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "internalSuccesses");
}

id objc_msgSend_internalTestConfigAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "internalTestConfigAtIndex:");
}

id objc_msgSend_internalTestConfigsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "internalTestConfigsCount");
}

id objc_msgSend_internetPassword(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "internetPassword");
}

id objc_msgSend_internetPasswordFingerprint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "internetPasswordFingerprint");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_intersectsSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intersectsSet:");
}

id objc_msgSend_intransaction_processQueueEntries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransaction:processQueueEntries:");
}

id objc_msgSend_intransactionCKRecordChanged_resync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionCKRecordChanged:resync:");
}

id objc_msgSend_intransactionCKRecordDeleted_recordType_resync_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionCKRecordDeleted:recordType:resync:");
}

id objc_msgSend_intransactionCKWriteFailed_attemptedRecordsChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionCKWriteFailed:attemptedRecordsChanged:");
}

id objc_msgSend_intransactionCreateDeviceStateForView_accountTracker_lockStateTracker_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionCreateDeviceStateForView:accountTracker:lockStateTracker:error:");
}

id objc_msgSend_intransactionIsErrorBadEtagOnKeyPointersOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionIsErrorBadEtagOnKeyPointersOnly:");
}

id objc_msgSend_intransactionMarkAsError_viewState_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionMarkAsError:viewState:error:");
}

id objc_msgSend_intransactionMoveToState_viewState_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionMoveToState:viewState:error:");
}

id objc_msgSend_intransactionRecordChanged_contextID_resync_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionRecordChanged:contextID:resync:error:");
}

id objc_msgSend_intransactionRecordChanged_contextID_resync_flagHandler_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionRecordChanged:contextID:resync:flagHandler:error:");
}

id objc_msgSend_intransactionRecordDeleted_contextID_resync_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionRecordDeleted:contextID:resync:error:");
}

id objc_msgSend_intransactionSlowStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intransactionSlowStatus:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateTimeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateTimeout");
}

id objc_msgSend_invitationToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invitationToken");
}

id objc_msgSend_inviteStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inviteStatus");
}

id objc_msgSend_inviteToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inviteToken");
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invoke");
}

id objc_msgSend_invokeWithTarget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invokeWithTarget:");
}

id objc_msgSend_isAAAFoundationAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAAAFoundationAvailable");
}

id objc_msgSend_isAppleInternal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAppleInternal");
}

id objc_msgSend_isAppleTV(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAppleTV");
}

id objc_msgSend_isAuthKitAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAuthKitAvailable");
}

id objc_msgSend_isCKErrorBadEtagOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCKErrorBadEtagOnly:");
}

id objc_msgSend_isCKInternalServerHTTPError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCKInternalServerHTTPError");
}

id objc_msgSend_isCKKSServerPluginError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCKKSServerPluginError:");
}

id objc_msgSend_isCKPartialError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCKPartialError:");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isCurrentUser(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCurrentUser");
}

id objc_msgSend_isCurrentUserIdentifierAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCurrentUserIdentifierAvailable");
}

id objc_msgSend_isCurrentUserProvisioned(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCurrentUserProvisioned");
}

id objc_msgSend_isCuttlefishError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCuttlefishError:");
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEmpty");
}

id objc_msgSend_isEnabledForDataclass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnabledForDataclass:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isErrorRetryable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isErrorRetryable:");
}

id objc_msgSend_isExcluded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isExcluded");
}

id objc_msgSend_isExecuting(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isExecuting");
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFinished");
}

id objc_msgSend_isFullPeer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFullPeer");
}

id objc_msgSend_isFullPeer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFullPeer:");
}

id objc_msgSend_isFullyDecoded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFullyDecoded");
}

id objc_msgSend_isHomePod(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isHomePod");
}

id objc_msgSend_isInCircle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInCircle:");
}

id objc_msgSend_isInCircleOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInCircleOnly:");
}

id objc_msgSend_isInheritedAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInheritedAccount");
}

id objc_msgSend_isItemKeyForKeychainView_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isItemKeyForKeychainView:");
}

id objc_msgSend_isListeningForSync(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isListeningForSync");
}

id objc_msgSend_isLocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLocked");
}

id objc_msgSend_isLockedError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLockedError:");
}

id objc_msgSend_isLockedError_duringFetchForEngine_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLockedError:duringFetchForEngine:");
}

id objc_msgSend_isMachineIDOverridden(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMachineIDOverridden");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isNetworkError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkError:");
}

id objc_msgSend_isNetworkFailureError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkFailureError:");
}

id objc_msgSend_isPaused(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPaused");
}

id objc_msgSend_isPending(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPending");
}

id objc_msgSend_isPrimaryAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrimaryAccount");
}

id objc_msgSend_isProvisionedForDataclass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isProvisionedForDataclass:");
}

id objc_msgSend_isReady(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isReady");
}

id objc_msgSend_isRecoveryKeySet_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRecoveryKeySet:reply:");
}

id objc_msgSend_isRetryable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRetryable");
}

id objc_msgSend_isSubsetOfSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSubsetOfSet:");
}

id objc_msgSend_isSyncingEnabledForView_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSyncingEnabledForView:");
}

id objc_msgSend_isSyncingV0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSyncingV0");
}

id objc_msgSend_isTracingEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isTracingEnabled");
}

id objc_msgSend_isUseful(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUseful");
}

id objc_msgSend_isWatch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isWatch");
}

id objc_msgSend_item(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "item");
}

id objc_msgSend_itemModificationsBeforePolicyLoaded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "itemModificationsBeforePolicyLoaded");
}

id objc_msgSend_itemPtr(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "itemPtr");
}

id objc_msgSend_itemPtrName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "itemPtrName");
}

id objc_msgSend_itemsToDelete(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "itemsToDelete");
}

id objc_msgSend_iterateListeners_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iterateListeners:");
}

id objc_msgSend_joinAfterRestore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinAfterRestore:");
}

id objc_msgSend_joinCircleWithBlob_altDSID_flowID_deviceSessionID_canSendMetrics_version_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinCircleWithBlob:altDSID:flowID:deviceSessionID:canSendMetrics:version:complete:");
}

id objc_msgSend_joinStatePathDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinStatePathDictionary");
}

id objc_msgSend_joinWithBottle_entropy_bottleSalt_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinWithBottle:entropy:bottleSalt:reply:");
}

id objc_msgSend_joinWithCustodianRecoveryKey_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinWithCustodianRecoveryKey:reply:");
}

id objc_msgSend_joinWithInheritanceKey_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinWithInheritanceKey:reply:");
}

id objc_msgSend_joinWithRecoveryKey_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinWithRecoveryKey:reply:");
}

id objc_msgSend_joinWithSpecificUser_voucherData_voucherSig_ckksKeys_tlkShares_preapprovedKeys_flowID_deviceSessionID_canSendMetrics_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "joinWithSpecificUser:voucherData:voucherSig:ckksKeys:tlkShares:preapprovedKeys:flowID:deviceSessionID:canSendMetrics:reply:");
}

id objc_msgSend_judge_at_limitTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "judge:at:limitTime:");
}

id objc_msgSend_keepProcessAlive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keepProcessAlive");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "key");
}

id objc_msgSend_key_wrappedByKey_uuid_parentKeyUUID_keyclass_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "key:wrappedByKey:uuid:parentKeyUUID:keyclass:zoneID:error:");
}

id objc_msgSend_keyCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyCache");
}

id objc_msgSend_keyData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyData");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyEnumerator");
}

id objc_msgSend_keyForItem_contextID_zoneID_keyCache_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyForItem:contextID:zoneID:keyCache:error:");
}

id objc_msgSend_keyForKeyclass_keybag_keySpecifier_allowWrites_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyForKeyclass:keybag:keySpecifier:allowWrites:error:");
}

id objc_msgSend_keyHierarchyConditions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyHierarchyConditions");
}

id objc_msgSend_keyMaterial(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyMaterial");
}

id objc_msgSend_keyPair(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyPair");
}

id objc_msgSend_keySizeInBits(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keySizeInBits");
}

id objc_msgSend_keySpecifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keySpecifier");
}

id objc_msgSend_keyState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyState");
}

id objc_msgSend_keyStateFullRefetchRequested(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyStateFullRefetchRequested");
}

id objc_msgSend_keyStateMachineRefetched(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyStateMachineRefetched");
}

id objc_msgSend_keyStateMachineRequestProcess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyStateMachineRequestProcess");
}

id objc_msgSend_keyStatusFor_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyStatusFor:complete:");
}

id objc_msgSend_keyType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyType");
}

id objc_msgSend_keyViewMapping(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyViewMapping");
}

id objc_msgSend_keyWithSubjectPublicKeyInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyWithSubjectPublicKeyInfo:");
}

id objc_msgSend_keyWrappedBySelf_uuid_keyclass_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyWrappedBySelf:uuid:keyclass:zoneID:error:");
}

id objc_msgSend_key_interests_need_updating(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "key_interests_need_updating");
}

id objc_msgSend_key_transport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "key_transport");
}

id objc_msgSend_keychainMusrForCurrentAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keychainMusrForCurrentAccount");
}

id objc_msgSend_keyclass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyclass");
}

id objc_msgSend_keycore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keycore");
}

id objc_msgSend_keyprint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyprint");
}

id objc_msgSend_keysOfEntriesPassingTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keysOfEntriesPassingTest:");
}

id objc_msgSend_keysSortedByValueUsingSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keysSortedByValueUsingSelector:");
}

id objc_msgSend_keyset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyset");
}

id objc_msgSend_keysetProviderOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keysetProviderOperations");
}

id objc_msgSend_keysets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keysets");
}

id objc_msgSend_kind(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kind");
}

id objc_msgSend_knownICDPFederations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "knownICDPFederations:");
}

id objc_msgSend_kvsAddToPendingChanges_data_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kvsAddToPendingChanges:data:");
}

id objc_msgSend_kvsAppendDebugKeyInterest_firstUnlock_unlocked_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kvsAppendDebugKeyInterest:firstUnlock:unlocked:err:");
}

id objc_msgSend_kvsAppendKeyInterest_firstUnlock_unlocked_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kvsAppendKeyInterest:firstUnlock:unlocked:err:");
}

id objc_msgSend_kvsAppendRingKeyInterest_firstUnlock_unlocked_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kvsAppendRingKeyInterest:firstUnlock:unlocked:err:");
}

id objc_msgSend_kvsPerformanceCounters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kvsPerformanceCounters:");
}

id objc_msgSend_kvsRingPostRing_ring_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kvsRingPostRing:ring:err:");
}

id objc_msgSend_kvsSendOfficialDSID_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kvsSendOfficialDSID:err:");
}

id objc_msgSend_kvs_message_transport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kvs_message_transport");
}

id objc_msgSend_kvssendDebugInfo_debug_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kvssendDebugInfo:debug:err:");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "label");
}

id objc_msgSend_lastCKFetchError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastCKFetchError");
}

id objc_msgSend_lastCloudServicesTriggerTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastCloudServicesTriggerTime");
}

id objc_msgSend_lastEscrowAttemptTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastEscrowAttemptTime");
}

id objc_msgSend_lastFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastFetch");
}

id objc_msgSend_lastFetchTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastFetchTime");
}

id objc_msgSend_lastFixup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastFixup");
}

id objc_msgSend_lastFixupOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastFixupOperation");
}

id objc_msgSend_lastHealthCheckup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastHealthCheckup");
}

id objc_msgSend_lastHealthCheckupDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastHealthCheckupDate:");
}

id objc_msgSend_lastIncomingQueueOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastIncomingQueueOperation");
}

id objc_msgSend_lastJudgment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastJudgment");
}

id objc_msgSend_lastLocalKeychainScanTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastLocalKeychainScanTime");
}

id objc_msgSend_lastNewTLKOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastNewTLKOperation");
}

id objc_msgSend_lastOutgoingQueueOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastOutgoingQueueOperation");
}

id objc_msgSend_lastProcessReceivedKeysOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastProcessReceivedKeysOperation");
}

id objc_msgSend_lastReencryptOutgoingItemsOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastReencryptOutgoingItemsOperation");
}

id objc_msgSend_lastUnlockTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastUnlockTime");
}

id objc_msgSend_lastUnlockedTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastUnlockedTime");
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_launch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launch");
}

id objc_msgSend_launchComplete(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchComplete");
}

id objc_msgSend_launchSequence(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchSequence");
}

id objc_msgSend_launched(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launched");
}

id objc_msgSend_leaveCircle_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "leaveCircle:err:");
}

id objc_msgSend_leaveTrust(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "leaveTrust");
}

id objc_msgSend_leaveTrust_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "leaveTrust:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_limitOperationToPriorityViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limitOperationToPriorityViews");
}

id objc_msgSend_limitOperationToPriorityViewsSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limitOperationToPriorityViewsSet");
}

id objc_msgSend_linearDependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linearDependencies:");
}

id objc_msgSend_linearDependenciesWithSelfFirst_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linearDependenciesWithSelfFirst:");
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "listener");
}

id objc_msgSend_listeners(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "listeners");
}

id objc_msgSend_liveRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "liveRequest");
}

id objc_msgSend_liveRequestReceived(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "liveRequestReceived");
}

id objc_msgSend_loadAllFromKeychain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadAllFromKeychain:");
}

id objc_msgSend_loadAndProcessEntries_withActionFilter_totalQueueEntries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadAndProcessEntries:withActionFilter:totalQueueEntries:");
}

id objc_msgSend_loadForZone_contextID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadForZone:contextID:");
}

id objc_msgSend_loadFromKeychain_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadFromKeychain:error:");
}

id objc_msgSend_loadFromKeychainForContainer_contextID_personaAdapter_personaUniqueString_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadFromKeychainForContainer:contextID:personaAdapter:personaUniqueString:error:");
}

id objc_msgSend_loadFromProtobuf_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadFromProtobuf:error:");
}

id objc_msgSend_loadKeyForUUID_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadKeyForUUID:contextID:zoneID:error:");
}

id objc_msgSend_loadKeyMaterialFromKeychain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadKeyMaterialFromKeychain:");
}

id objc_msgSend_loadKeyWithUUID_contextID_zoneID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadKeyWithUUID:contextID:zoneID:error:");
}

id objc_msgSend_loadKeys_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadKeys:reply:");
}

id objc_msgSend_loadOrCreateAccountMetadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadOrCreateAccountMetadata:");
}

id objc_msgSend_local(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "local");
}

id objc_msgSend_localPeerIdentity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localPeerIdentity");
}

id objc_msgSend_localReset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localReset:");
}

id objc_msgSend_localResetWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localResetWithSpecificUser:reply:");
}

id objc_msgSend_localSettingName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localSettingName");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_lockStateProvider(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockStateProvider");
}

id objc_msgSend_lockStateTracker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockStateTracker");
}

id objc_msgSend_lock_notification_token(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lock_notification_token");
}

id objc_msgSend_lockedError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockedError:");
}

id objc_msgSend_logForUpgrade(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logForUpgrade");
}

id objc_msgSend_logHardFailureForEventNamed_withAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logHardFailureForEventNamed:withAttributes:");
}

id objc_msgSend_logMetric_withName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logMetric:withName:");
}

id objc_msgSend_logRecoverableError_forEvent_withAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logRecoverableError:forEvent:withAttributes:");
}

id objc_msgSend_logRecoverableError_forEvent_zoneName_withAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logRecoverableError:forEvent:zoneName:withAttributes:");
}

id objc_msgSend_logResultForEvent_hardFailure_result_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logResultForEvent:hardFailure:result:");
}

id objc_msgSend_logResultForEvent_hardFailure_result_withAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logResultForEvent:hardFailure:result:withAttributes:");
}

id objc_msgSend_logSoftFailureForEventNamed_withAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logSoftFailureForEventNamed:withAttributes:");
}

id objc_msgSend_logSuccessForEvent_zoneName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logSuccessForEvent:zoneName:");
}

id objc_msgSend_logSuccessForEventNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logSuccessForEventNamed:");
}

id objc_msgSend_logSystemMetricsForActivityNamed_withAction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logSystemMetricsForActivityNamed:withAction:");
}

id objc_msgSend_logUnrecoverableError_forEvent_withAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logUnrecoverableError:forEvent:withAttributes:");
}

id objc_msgSend_logUnrecoverableError_forEvent_zoneName_withAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logUnrecoverableError:forEvent:zoneName:withAttributes:");
}

id objc_msgSend_loggedIn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loggedIn");
}

id objc_msgSend_loggedOut(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loggedOut");
}

id objc_msgSend_logger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logger");
}

id objc_msgSend_loggerClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loggerClass");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longValue");
}

id objc_msgSend_lookupInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lookupInfo");
}

id objc_msgSend_loseTrustOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loseTrustOperation:");
}

id objc_msgSend_lostEvents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lostEvents");
}

id objc_msgSend_machineID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "machineID");
}

id objc_msgSend_machineID_flowID_deviceSessionID_canSendMetrics_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "machineID:flowID:deviceSessionID:canSendMetrics:error:");
}

id objc_msgSend_machineIDOnMemoizedList_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "machineIDOnMemoizedList:error:");
}

id objc_msgSend_machineId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "machineId");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_makeAuthenticatedDataDictionaryUpdatingCKKSItem_encryptionVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeAuthenticatedDataDictionaryUpdatingCKKSItem:encryptionVersion:");
}

id objc_msgSend_makeAuthenticatedDataDictionaryUpdatingCKKSItemEncVer1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeAuthenticatedDataDictionaryUpdatingCKKSItemEncVer1");
}

id objc_msgSend_makeAuthenticatedDataDictionaryUpdatingCKKSItemEncVer2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeAuthenticatedDataDictionaryUpdatingCKKSItemEncVer2:");
}

id objc_msgSend_makeCKContainer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeCKContainer");
}

id objc_msgSend_makeCKContainer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeCKContainer:");
}

id objc_msgSend_makeCKKSKey_contextID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeCKKSKey:contextID:error:");
}

id objc_msgSend_makeFakeCKKSClassKey_contextID_zoneiD_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeFakeCKKSClassKey:contextID:zoneiD:error:");
}

id objc_msgSend_makeOperationDependency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeOperationDependency");
}

id objc_msgSend_makeTLKShareRecord_contextID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeTLKShareRecord:contextID:");
}

id objc_msgSend_makeWhereClause_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeWhereClause:");
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "manager");
}

id objc_msgSend_managerObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "managerObject");
}

id objc_msgSend_mapDictionaryToView_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mapDictionaryToView:");
}

id objc_msgSend_mapResultRow_startingAt_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mapResultRow:startingAt:error:");
}

id objc_msgSend_markTrustedDeviceListFetchFailed_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "markTrustedDeviceListFetchFailed:reply:");
}

id objc_msgSend_match(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "match");
}

id objc_msgSend_matchOTUserViewSettings_userViewsEnabled_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchOTUserViewSettings:userViewsEnabled:err:");
}

id objc_msgSend_matchesCKRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchesCKRecord:");
}

id objc_msgSend_matchesCKRecord_checkServerFields_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchesCKRecord:checkServerFields:");
}

id objc_msgSend_matchingRule(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchingRule");
}

id objc_msgSend_maximumDelay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maximumDelay");
}

id objc_msgSend_maybeCreateNewFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maybeCreateNewFetch");
}

id objc_msgSend_memberChanges(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "memberChanges");
}

id objc_msgSend_memoizeOriginalSelfWhereClause(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "memoizeOriginalSelfWhereClause");
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergeFrom:");
}

id objc_msgSend_mergeWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergeWithError:");
}

id objc_msgSend_mergeWithUpdateInfos_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergeWithUpdateInfos:error:");
}

id objc_msgSend_mergedAccountSettings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergedAccountSettings:");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "message");
}

id objc_msgSend_messagingdConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messagingdConnection");
}

id objc_msgSend_metadataAttributesWithError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadataAttributesWithError:");
}

id objc_msgSend_metadataClassKeyWithKeybag_allowWrites_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadataClassKeyWithKeybag:allowWrites:error:");
}

id objc_msgSend_metadataDomain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadataDomain");
}

id objc_msgSend_methodForSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "methodForSelector:");
}

id objc_msgSend_methodSignatureForSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "methodSignatureForSelector:");
}

id objc_msgSend_metricAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metricAtIndex:");
}

id objc_msgSend_metricsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metricsCount");
}

id objc_msgSend_midIsValidInList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "midIsValidInList:");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_mirrorDatabaseItem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mirrorDatabaseItem");
}

id objc_msgSend_missingKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "missingKey");
}

id objc_msgSend_missingLocalItemsFound(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "missingLocalItemsFound");
}

id objc_msgSend_modelID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelID");
}

id objc_msgSend_modificationDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modificationDate");
}

id objc_msgSend_modifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modifications");
}

id objc_msgSend_modifyCircle_err_action_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modifyCircle:err:action:");
}

id objc_msgSend_modifyPendingChangesInZoneIDs_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modifyPendingChangesInZoneIDs:completionHandler:");
}

id objc_msgSend_modifyPendingChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modifyPendingChangesWithCompletionHandler:");
}

id objc_msgSend_modifyRecordZonesOperationClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modifyRecordZonesOperationClass");
}

id objc_msgSend_modifyRecordsCompleted_fullUpload_recordsToSave_recordIDsToDelete_recordIDsModified_modifyComplete_savedRecords_deletedRecordIDs_ckerror_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modifyRecordsCompleted:fullUpload:recordsToSave:recordIDsToDelete:recordIDsModified:modifyComplete:savedRecords:deletedRecordIDs:ckerror:");
}

id objc_msgSend_modifyRecordsOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modifyRecordsOperation");
}

id objc_msgSend_modifySubscriptionsOperationClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modifySubscriptionsOperationClass");
}

id objc_msgSend_modifyTLKSharesForExternallyManagedView_adding_deleting_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modifyTLKSharesForExternallyManagedView:adding:deleting:reply:");
}

id objc_msgSend_monitors(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "monitors");
}

id objc_msgSend_moreComing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moreComing");
}

id objc_msgSend_moreRecordsInCloudKit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moreRecordsInCloudKit");
}

id objc_msgSend_moveRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveRequest");
}

id objc_msgSend_moveToCheckTrustedState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveToCheckTrustedState");
}

id objc_msgSend_moveToCheckTrustedStateForArguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveToCheckTrustedStateForArguments:");
}

id objc_msgSend_moveToFederationAllowed_altDSID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveToFederationAllowed:altDSID:error:");
}

id objc_msgSend_moveUserDbWithReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveUserDbWithReply:");
}

id objc_msgSend_musr(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "musr");
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableBytes");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_mutableStateConditions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableStateConditions");
}

id objc_msgSend_myPeerInfo_flowID_deviceSessionID_canSendMetrics_complete_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "myPeerInfo:flowID:deviceSessionID:canSendMetrics:complete:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "name");
}

id objc_msgSend_nameFromCKRecordID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nameFromCKRecordID:");
}

id objc_msgSend_named_entering_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "named:entering:");
}

id objc_msgSend_named_intending_errorState_withBlockTakingSelf_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "named:intending:errorState:withBlockTakingSelf:");
}

id objc_msgSend_named_withBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "named:withBlock:");
}

id objc_msgSend_named_withBlockTakingSelf_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "named:withBlockTakingSelf:");
}

id objc_msgSend_namedDelegatePort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "namedDelegatePort");
}

id objc_msgSend_need_backup_peers_created_after_backup_key_set(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "need_backup_peers_created_after_backup_key_set");
}

id objc_msgSend_networkError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkError");
}

id objc_msgSend_networkMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkMonitor");
}

id objc_msgSend_newCloudKitRecordsWritten(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newCloudKitRecordsWritten");
}

id objc_msgSend_newItem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newItem");
}

id objc_msgSend_newKeyForKeyclass_withKeybag_keySpecifier_database_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newKeyForKeyclass:withKeybag:keySpecifier:database:error:");
}

id objc_msgSend_newOutgoingEntries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newOutgoingEntries");
}

id objc_msgSend_newRequests(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRequests");
}

id objc_msgSend_newUpload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newUpload");
}

id objc_msgSend_newerItemPersistentRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newerItemPersistentRef");
}

id objc_msgSend_newerItemSHA1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newerItemSHA1");
}

id objc_msgSend_nextFireTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextFireTime");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextObject");
}

id objc_msgSend_nextState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextState");
}

id objc_msgSend_nextStateMachineCycleOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextStateMachineCycleOperation");
}

id objc_msgSend_nextStep_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextStep:");
}

id objc_msgSend_noteEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noteEvent:");
}

id objc_msgSend_noteEventNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noteEventNamed:");
}

id objc_msgSend_noteLaunchSequence_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noteLaunchSequence:");
}

id objc_msgSend_noteMetric_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "noteMetric:count:");
}

id objc_msgSend_notes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notes");
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notification");
}

id objc_msgSend_notificationFromRemoteNotificationDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notificationFromRemoteNotificationDictionary:");
}

id objc_msgSend_notificationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notificationType");
}

id objc_msgSend_notifierClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifierClass");
}

id objc_msgSend_notifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifiers");
}

id objc_msgSend_notifyBackupOnExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyBackupOnExit");
}

id objc_msgSend_notifyCKAccountStatusChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyCKAccountStatusChange:");
}

id objc_msgSend_notifyCKAccountStatusChangeAndWait_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyCKAccountStatusChangeAndWait:");
}

id objc_msgSend_notifyCircleChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyCircleChange:");
}

id objc_msgSend_notifyCircleChangeOnExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyCircleChangeOnExit");
}

id objc_msgSend_notifyContainerChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyContainerChange:");
}

id objc_msgSend_notifyContainerChangeWithUserInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyContainerChangeWithUserInfo:");
}

id objc_msgSend_notifyForItem_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyForItem:");
}

id objc_msgSend_notifyIdMS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyIdMS");
}

id objc_msgSend_notifyNewTLKsInKeychain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyNewTLKsInKeychain");
}

id objc_msgSend_notifyPasswordsOrPCSChangedForAddedItem_modified_deleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyPasswordsOrPCSChangedForAddedItem:modified:deleted:");
}

id objc_msgSend_notifyQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyQueue");
}

id objc_msgSend_notifyTrustChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyTrustChanged:");
}

id objc_msgSend_notifyViewChangeOnExit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyViewChangeOnExit");
}

id objc_msgSend_notifyViewChangedScheduler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyViewChangedScheduler");
}

id objc_msgSend_notifyViewReadyScheduler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyViewReadyScheduler");
}

id objc_msgSend_notifyZoneChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyZoneChange:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "now");
}

id objc_msgSend_nsdistributednotificationCenterClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nsdistributednotificationCenterClass");
}

id objc_msgSend_nsnotificationCenterClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nsnotificationCenterClass");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "null");
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberOfPeersInOctagon(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberOfPeersInOctagon");
}

id objc_msgSend_numberOfRecordsUploaded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberOfRecordsUploaded");
}

id objc_msgSend_numberPropertyForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberPropertyForKey:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectsAtIndexes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectsAtIndexes:");
}

id objc_msgSend_objectsForKeys_notFoundMarker_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectsForKeys:notFoundMarker:");
}

id objc_msgSend_obtainAuthoritativeGroupsForPrivate_shared_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obtainAuthoritativeGroupsForPrivate:shared:error:");
}

id objc_msgSend_octagonAdapter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "octagonAdapter");
}

id objc_msgSend_octagonContainerMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "octagonContainerMap");
}

id objc_msgSend_octagonContainsDistrustedRecoveryKeysWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "octagonContainsDistrustedRecoveryKeysWithSpecificUser:reply:");
}

id objc_msgSend_octagonContextID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "octagonContextID");
}

id objc_msgSend_octagonEncryptionFullKeyRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "octagonEncryptionFullKeyRef");
}

id objc_msgSend_octagonInformationInitialized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "octagonInformationInitialized");
}

id objc_msgSend_octagonPeerID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "octagonPeerID");
}

id objc_msgSend_octagonPeerIDGivenBottleID_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "octagonPeerIDGivenBottleID:reply:");
}

id objc_msgSend_octagonSigningFullKeyRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "octagonSigningFullKeyRef");
}

id objc_msgSend_octagonStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "octagonStatus");
}

id objc_msgSend_oldIK(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "oldIK");
}

id objc_msgSend_oldItem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "oldItem");
}

id objc_msgSend_oldItemPersistentRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "oldItemPersistentRef");
}

id objc_msgSend_oldItemSHA1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "oldItemSHA1");
}

id objc_msgSend_oldPeerID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "oldPeerID");
}

id objc_msgSend_onboardItemToCKKS_viewState_keyCache_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onboardItemToCKKS:viewState:keyCache:error:");
}

id objc_msgSend_onboardItemsInView_uuids_itemClass_databaseProvider_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onboardItemsInView:uuids:itemClass:databaseProvider:");
}

id objc_msgSend_onqueueCreatePriorityViewsProcessedWatcher(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onqueueCreatePriorityViewsProcessedWatcher");
}

id objc_msgSend_onqueueEnterState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onqueueEnterState:");
}

id objc_msgSend_onqueueFreeHashBuff(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onqueueFreeHashBuff");
}

id objc_msgSend_onqueueHandleStartTimeout_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onqueueHandleStartTimeout:");
}

id objc_msgSend_onqueueHandleTransition_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onqueueHandleTransition:");
}

id objc_msgSend_onqueuePerformLocalReset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onqueuePerformLocalReset");
}

id objc_msgSend_onqueueProcessTransition_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onqueueProcessTransition:");
}

id objc_msgSend_onqueueStartFinishOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onqueueStartFinishOperation");
}

id objc_msgSend_onqueueStartFinishOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onqueueStartFinishOperation:");
}

id objc_msgSend_ontransactionFetchEntries_contextID_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ontransactionFetchEntries:contextID:error:");
}

id objc_msgSend_op_column_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "op:column:");
}

id objc_msgSend_op_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "op:value:");
}

id objc_msgSend_operateOnAllViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operateOnAllViews");
}

id objc_msgSend_operateOnSelectViews_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operateOnSelectViews:");
}

id objc_msgSend_operatingSystemVersionString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operatingSystemVersionString");
}

id objc_msgSend_operationCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationCount");
}

id objc_msgSend_operationDependencies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationDependencies");
}

id objc_msgSend_operationDependency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationDependency");
}

id objc_msgSend_operationDependencyDescriptionCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationDependencyDescriptionCode");
}

id objc_msgSend_operationGroupAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationGroupAtIndex:");
}

id objc_msgSend_operationGroupsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationGroupsCount");
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationQueue");
}

id objc_msgSend_operationStateString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationStateString");
}

id objc_msgSend_operationWithBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationWithBlock:");
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operations");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "options");
}

id objc_msgSend_orderByClause_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "orderByClause:");
}

id objc_msgSend_originalRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "originalRequest");
}

id objc_msgSend_originalSelfWhereClause(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "originalSelfWhereClause");
}

id objc_msgSend_orsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "orsCount");
}

id objc_msgSend_osVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "osVersion");
}

id objc_msgSend_outgoingDatabaseItem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outgoingDatabaseItem");
}

id objc_msgSend_outgoingQueueOperationScheduler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outgoingQueueOperationScheduler");
}

id objc_msgSend_outgoingQueueOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outgoingQueueOperations");
}

id objc_msgSend_outgoingQueuePriorityOperationScheduler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outgoingQueuePriorityOperationScheduler");
}

id objc_msgSend_overallLaunch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overallLaunch");
}

id objc_msgSend_overloadUntil(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overloadUntil");
}

id objc_msgSend_overriddenMachineID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overriddenMachineID");
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "owner");
}

id objc_msgSend_ownerName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ownerName");
}

id objc_msgSend_padData_blockSize_additionalBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "padData:blockSize:additionalBlock:");
}

id objc_msgSend_pairingUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingUUID");
}

id objc_msgSend_parentKeyUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parentKeyUUID");
}

id objc_msgSend_parsedSecureElementIdentity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parsedSecureElementIdentity");
}

id objc_msgSend_participants(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "participants");
}

id objc_msgSend_participateInFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "participateInFetch");
}

id objc_msgSend_participateInFetch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "participateInFetch:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path");
}

id objc_msgSend_pathFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathFromDictionary:");
}

id objc_msgSend_pathStep(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathStep");
}

id objc_msgSend_paused(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "paused");
}

id objc_msgSend_pcsMirrorKeysForService_matchingKeys_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pcsMirrorKeysForService:matchingKeys:error:");
}

id objc_msgSend_pcsMirrorKeysForServices_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pcsMirrorKeysForServices:reply:");
}

id objc_msgSend_peekCallbackForUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peekCallbackForUUID:");
}

id objc_msgSend_peer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peer");
}

id objc_msgSend_peerChangeListeners(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerChangeListeners");
}

id objc_msgSend_peerCountsByMachineID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerCountsByMachineID");
}

id objc_msgSend_peerData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerData");
}

id objc_msgSend_peerID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerID");
}

id objc_msgSend_peerIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerIDs");
}

id objc_msgSend_peerIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerIdentifier");
}

id objc_msgSend_peerInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerInfo");
}

id objc_msgSend_peerMissingState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerMissingState");
}

id objc_msgSend_peerPreapprovedSPKIs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerPreapprovedSPKIs");
}

id objc_msgSend_peerProviderID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerProviderID");
}

id objc_msgSend_peerProviders(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerProviders");
}

id objc_msgSend_peerPublicKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerPublicKey");
}

id objc_msgSend_peerPublicSigningKeySPKIs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerPublicSigningKeySPKIs:");
}

id objc_msgSend_peerPublicSigningKeySPKIsForCircle_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerPublicSigningKeySPKIsForCircle:error:");
}

id objc_msgSend_peerStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerStatus");
}

id objc_msgSend_peerUnknownState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerUnknownState");
}

id objc_msgSend_peerinfoHasMID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerinfoHasMID:");
}

id objc_msgSend_peersCleanedup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peersCleanedup");
}

id objc_msgSend_peersToRequestSync(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peersToRequestSync");
}

id objc_msgSend_pendEnableViewSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendEnableViewSet:");
}

id objc_msgSend_pendingBackupPeers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingBackupPeers");
}

id objc_msgSend_pendingBackupPeersAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingBackupPeersAtIndex:");
}

id objc_msgSend_pendingBackupPeersCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingBackupPeersCount");
}

id objc_msgSend_pendingCallbackUUIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingCallbackUUIDs");
}

id objc_msgSend_pendingClassAEntries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingClassAEntries");
}

id objc_msgSend_pendingClassAEntriesError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingClassAEntriesError");
}

id objc_msgSend_pendingDependenciesString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingDependenciesString:");
}

id objc_msgSend_pendingEscrowCacheWarmup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingEscrowCacheWarmup");
}

id objc_msgSend_pendingEscrowUpload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingEscrowUpload:");
}

id objc_msgSend_pendingFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingFlags");
}

id objc_msgSend_pendingFlagsScheduler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingFlagsScheduler");
}

id objc_msgSend_pendingFlagsString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingFlagsString");
}

id objc_msgSend_pendingFollowUpItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingFollowUpItems:");
}

id objc_msgSend_pendingSyncCallbacks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingSyncCallbacks");
}

id objc_msgSend_pendingTLKShares(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pendingTLKShares");
}

id objc_msgSend_pending_changes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pending_changes");
}

id objc_msgSend_performATOPRVActionsWithSpecificUser_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performATOPRVActionsWithSpecificUser:reply:");
}

id objc_msgSend_performBackup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performBackup");
}

id objc_msgSend_performBackups(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performBackups");
}

id objc_msgSend_performBlockWithPersonaIdentifier_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performBlockWithPersonaIdentifier:block:");
}

id objc_msgSend_performFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performFetch");
}

id objc_msgSend_performInitialDispatches(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performInitialDispatches");
}

id objc_msgSend_performInitializedOperation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performInitializedOperation");
}

id objc_msgSend_performMaintenanceWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performMaintenanceWithCompletion:");
}

id objc_msgSend_performOnQuietAccountQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performOnQuietAccountQueue:");
}

id objc_msgSend_performRingUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performRingUpdate");
}

id objc_msgSend_performRingUpdates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performRingUpdates");
}

id objc_msgSend_performTransaction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performTransaction:");
}

id objc_msgSend_performTransaction_action_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performTransaction:action:");
}

id objc_msgSend_performTransaction_Locked_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performTransaction_Locked:");
}

id objc_msgSend_performTransaction_Locked_action_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performTransaction_Locked:action:");
}

id objc_msgSend_performWithAccountWide_forceFetch_cuttlefishXPCWrapper_activeAccount_containerName_contextID_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performWithAccountWide:forceFetch:cuttlefishXPCWrapper:activeAccount:containerName:contextID:reply:");
}

id objc_msgSend_performWithStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performWithStatus:");
}

id objc_msgSend_permanentInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "permanentInfo");
}

id objc_msgSend_permanentInfoSig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "permanentInfoSig");
}

id objc_msgSend_permanentInfoWithPeerID_data_sig_keyFactory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "permanentInfoWithPeerID:data:sig:keyFactory:");
}

id objc_msgSend_permission(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "permission");
}

id objc_msgSend_permissionLevel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "permissionLevel");
}

id objc_msgSend_permittedToSendMetrics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "permittedToSendMetrics");
}

id objc_msgSend_persistAccountChanges_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistAccountChanges:error:");
}

id objc_msgSend_persistLastHealthCheck_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistLastHealthCheck:error:");
}

id objc_msgSend_persistNewTrustState_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistNewTrustState:error:");
}

id objc_msgSend_persistOctagonJoinAttempt_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistOctagonJoinAttempt:error:");
}

id objc_msgSend_persistSendingMetricsPermitted_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistSendingMetricsPermitted:error:");
}

id objc_msgSend_persistSendingMetricsPermitted_sendingMetricsPermitted_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistSendingMetricsPermitted:sendingMetricsPermitted:error:");
}

id objc_msgSend_persistentKeyRef_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentKeyRef:error:");
}

id objc_msgSend_persistentReferenceUpgrader(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentReferenceUpgrader");
}

id objc_msgSend_personaAdapter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "personaAdapter");
}

id objc_msgSend_personaIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "personaIdentifier");
}

id objc_msgSend_personaUniqueString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "personaUniqueString");
}

id objc_msgSend_phoneNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "phoneNumber");
}

id objc_msgSend_pingWithReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pingWithReply:");
}

id objc_msgSend_plaintextPCSPublicIdentity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plaintextPCSPublicIdentity");
}

id objc_msgSend_plaintextPCSPublicKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plaintextPCSPublicKey");
}

id objc_msgSend_plaintextPCSServiceIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plaintextPCSServiceIdentifier");
}

id objc_msgSend_plan(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plan");
}

id objc_msgSend_pointerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pointerValue");
}

id objc_msgSend_poisoned(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "poisoned");
}

id objc_msgSend_pokeStateMachine(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pokeStateMachine");
}

id objc_msgSend_policyDependentViewStateForName_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyDependentViewStateForName:error:");
}

id objc_msgSend_policyDependentViewStateForName_timeout_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyDependentViewStateForName:timeout:error:");
}

id objc_msgSend_policyLoaded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyLoaded");
}

id objc_msgSend_policyOverride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyOverride");
}

id objc_msgSend_popDialogWithCount_limit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "popDialogWithCount:limit:");
}

id objc_msgSend_popTooManyPeersDialogWithEgoPeerStatus_accountMeta_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "popTooManyPeersDialogWithEgoPeerStatus:accountMeta:");
}

id objc_msgSend_populateUnderlyingErrorsStartingWithRootError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "populateUnderlyingErrorsStartingWithRootError:");
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "port");
}

id objc_msgSend_post_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "post:");
}

id objc_msgSend_postCircle_circleData_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postCircle:circleData:err:");
}

id objc_msgSend_postConfirmPasscodeCFU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postConfirmPasscodeCFU:");
}

id objc_msgSend_postEscrowCFU(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postEscrowCFU");
}

id objc_msgSend_postFollowUp_activeAccount_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postFollowUp:activeAccount:error:");
}

id objc_msgSend_postFollowUpWithContext_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postFollowUpWithContext:error:");
}

id objc_msgSend_postHomePodLostTrustTTR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postHomePodLostTrustTTR:");
}

id objc_msgSend_postNotificationName_object_userInfo_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotificationName:object:userInfo:options:");
}

id objc_msgSend_postRepairCFU(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postRepairCFU");
}

id objc_msgSend_postRepairCFU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postRepairCFU:");
}

id objc_msgSend_postRepairCFUAndBecomeUntrusted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postRepairCFUAndBecomeUntrusted");
}

id objc_msgSend_postRetirement_peer_err_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postRetirement:peer:err:");
}

id objc_msgSend_postedCFUTypes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postedCFUTypes");
}

id objc_msgSend_predicateWithValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithValue:");
}

id objc_msgSend_predictedNextFireTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictedNextFireTime");
}

id objc_msgSend_preflightJoinWithCustodianRecoveryKey_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preflightJoinWithCustodianRecoveryKey:reply:");
}

id objc_msgSend_preflightJoinWithInheritanceKey_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preflightJoinWithInheritanceKey:reply:");
}

id objc_msgSend_preflightPreapprovedJoinWithSpecificUser_preapprovedKeys_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preflightPreapprovedJoinWithSpecificUser:preapprovedKeys:reply:");
}

id objc_msgSend_preflightRecoverOctagonUsingRecoveryKey_recoveryKey_salt_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preflightRecoverOctagonUsingRecoveryKey:recoveryKey:salt:reply:");
}

id objc_msgSend_preflightRecoverOctagonUsingRecoveryKey_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preflightRecoverOctagonUsingRecoveryKey:reply:");
}

id objc_msgSend_preflightVouchWithBottleWithSpecificUser_bottleID_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preflightVouchWithBottleWithSpecificUser:bottleID:reply:");
}

id objc_msgSend_preflightVouchWithCustodianRecoveryKeyWithSpecificUser_crk_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preflightVouchWithCustodianRecoveryKeyWithSpecificUser:crk:reply:");
}

id objc_msgSend_preflightVouchWithRecoveryKeyWithSpecificUser_recoveryKey_salt_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preflightVouchWithRecoveryKeyWithSpecificUser:recoveryKey:salt:reply:");
}

id objc_msgSend_preflightWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preflightWithCompletion:");
}

id objc_msgSend_preflightWithCompletion_delay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preflightWithCompletion:delay:");
}

id objc_msgSend_preloadOctagonKeySetOnAccount_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preloadOctagonKeySetOnAccount:error:");
}

id objc_msgSend_prepareInformation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareInformation");
}

id objc_msgSend_prepareInheritancePeerWithSpecificUser_epoch_machineID_bottleSalt_bottleID_modelID_deviceName_serialNumber_osVersion_policyVersion_policySecrets_syncUserControllableViews_secureElementIdentity_signingPrivKeyPersistentRef_encPrivKeyPersistentRef_crk_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareInheritancePeerWithSpecificUser:epoch:machineID:bottleSalt:bottleID:modelID:deviceName:serialNumber:osVersion:policyVersion:policySecrets:syncUserControllableViews:secureElementIdentity:signingPrivKeyPersistentRef:encPrivKeyPersistentRef:crk:reply:");
}

id objc_msgSend_prepareThreadForKeychainAPIUseForPersonaIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareThreadForKeychainAPIUseForPersonaIdentifier:");
}

id objc_msgSend_prepareWithSpecificUser_epoch_machineID_bottleSalt_bottleID_modelID_deviceName_serialNumber_osVersion_policyVersion_policySecrets_syncUserControllableViews_secureElementIdentity_setting_signingPrivKeyPersistentRef_encPrivKeyPersistentRef_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareWithSpecificUser:epoch:machineID:bottleSalt:bottleID:modelID:deviceName:serialNumber:osVersion:policyVersion:policySecrets:syncUserControllableViews:secureElementIdentity:setting:signingPrivKeyPersistentRef:encPrivKeyPersistentRef:reply:");
}

id objc_msgSend_previousAccountKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "previousAccountKey");
}

id objc_msgSend_previousPendingKeySets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "previousPendingKeySets");
}

id objc_msgSend_primaryAuthKitAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryAuthKitAccount");
}

id objc_msgSend_priorityView(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "priorityView");
}

id objc_msgSend_priorityViews(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "priorityViews");
}

id objc_msgSend_priorityViewsProcessed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "priorityViewsProcessed");
}

id objc_msgSend_privateCloudDatabase(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privateCloudDatabase");
}

id objc_msgSend_privateKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privateKey");
}

id objc_msgSend_privateKeyFingerprint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privateKeyFingerprint");
}

id objc_msgSend_privateSyncEngine(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privateSyncEngine");
}

id objc_msgSend_proceedAfterFetch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proceedAfterFetch");
}

id objc_msgSend_proceedWithFilteredTLKShares_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proceedWithFilteredTLKShares:");
}

id objc_msgSend_proceedWithKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proceedWithKeys:");
}

id objc_msgSend_proceedWithKeys_incompleteKeySets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proceedWithKeys:incompleteKeySets:");
}

id objc_msgSend_proceedWithKeys_pendingTLKShares_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proceedWithKeys:pendingTLKShares:");
}

id objc_msgSend_proceedWithKeys_salt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proceedWithKeys:salt:");
}

id objc_msgSend_proceedWithPeerID_refetchWasNeeded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proceedWithPeerID:refetchWasNeeded:");
}

id objc_msgSend_proceedWithPendingTLKShares_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proceedWithPendingTLKShares:");
}

id objc_msgSend_proceedWithRecoveryKeyID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proceedWithRecoveryKeyID:");
}

id objc_msgSend_processDatabaseModifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processDatabaseModifications");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processMoveRequest_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processMoveRequest:error:");
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processName");
}

id objc_msgSend_processNewCurrentItemPointers_viewState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processNewCurrentItemPointers:viewState:");
}

id objc_msgSend_processRemoteKeys_viewState_currentTrustStates_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processRemoteKeys:viewState:currentTrustStates:error:");
}

id objc_msgSend_processUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processUUID");
}

id objc_msgSend_processVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processVersion");
}

id objc_msgSend_processedItems(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processedItems");
}

id objc_msgSend_productName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "productName");
}

