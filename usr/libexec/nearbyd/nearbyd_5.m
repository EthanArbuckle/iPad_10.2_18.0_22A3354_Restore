void sub_1002CB3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  std::recursive_mutex *v16;
  void *v17;
  va_list va;

  va_start(va, a16);

  if (LOBYTE(STACK[0x640]))
  {
    if (SLOBYTE(STACK[0x63F]) < 0)
      operator delete((void *)STACK[0x628]);
  }
  std::recursive_mutex::unlock(v16);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002CB434(uint64_t a1)
{
  uint64_t v1;
  void *v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 __p;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(v2, "Client asked to cancel service, but has no registered requests.");
  v4 = 113;
  if (SHIBYTE(v3) < 0)
  {
    sub_100004678(&__p, v2[0], (unint64_t)v2[1]);
  }
  else
  {
    __p = *(_OWORD *)v2;
    v6 = v3;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 104))(v1, &v4);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(v2[0]);
}

void sub_1002CB4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002CB504(uint64_t a1)
{
  uint64_t v1;
  void *v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 __p;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(v2, "Client asked to cancel service with invalid ticket id.");
  v4 = 108;
  if (SHIBYTE(v3) < 0)
  {
    sub_100004678(&__p, v2[0], (unint64_t)v2[1]);
  }
  else
  {
    __p = *(_OWORD *)v2;
    v6 = v3;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 104))(v1, &v4);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(v2[0]);
}

void sub_1002CB5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002CB5D4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  uint64_t v6;
  uint64_t v7;
  __int128 __p;
  uint64_t v9;

  v2 = (_QWORD *)(a1 + 48);
  if (*(_BYTE *)(a1 + 736))
    v3 = *(_QWORD *)(a1 + 704);
  else
    v3 = 1000;
  v4 = *(_QWORD *)(a1 + 32);
  sub_1002CADAC(v2, v5);
  v7 = v3;
  if (SHIBYTE(v6) < 0)
  {
    sub_100004678(&__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    __p = *(_OWORD *)v5;
    v9 = v6;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 104))(v4, &v7);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_1002CB680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_1002CB6B4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  std::recursive_mutex *v9;
  _QWORD *v10;
  uint64_t **i;
  unsigned int v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v27;
  NSObject *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v34[3];
  _QWORD block[5];
  std::__shared_weak_count *v36;
  _QWORD v37[5];
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  _QWORD v41[5];
  std::__shared_weak_count *v42;
  _BYTE v43[656];
  _BYTE v44[8];
  void *v45;
  char v46;
  char v47;
  _QWORD __src[82];
  uint64_t v49;
  void *__p;
  char v51;
  char v52;

  v39 = 0;
  v40 = 0;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5 && (v40 = std::__shared_weak_count::lock(v5)) != 0 && (v39 = *a2) != 0)
  {
    v9 = (std::recursive_mutex *)(a1 + 64);
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
    v10 = sub_1002CFFE4((_QWORD *)(a1 + 272), &v39);
    if (v10)
    {
      for (i = (uint64_t **)v10[5]; i; i = (uint64_t **)*i)
      {
        v12 = *((unsigned __int16 *)i + 13);
        if (v12 <= a3)
        {
          if (v12 >= a3)
          {
            (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 6456) + 56))(__src, *(_QWORD *)(a1 + 6456), a3, a4);
            if (LODWORD(__src[81]))
              sub_1002CF994();
            v16 = (std::__shared_weak_count *)(LOBYTE(__src[1]) != 0);
            if (!LOBYTE(__src[1]))
            {
              v27 = (id)qword_10085F520;
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                sub_1002CADAC(__src, v34);
                sub_1003E7D2C();
              }

              v28 = *(NSObject **)(a1 + 56);
              v41[0] = _NSConcreteStackBlock;
              v41[1] = 3321888768;
              v41[2] = sub_1002CBCD4;
              v41[3] = &unk_100813BC0;
              v41[4] = v39;
              v42 = v40;
              if (v40)
              {
                p_shared_owners = (unint64_t *)&v40->__shared_owners_;
                do
                  v30 = __ldxr(p_shared_owners);
                while (__stxr(v30 + 1, p_shared_owners));
              }
              memcpy(v43, __src, sizeof(v43));
              sub_10015A2F0(v44, (uint64_t)&v49);
              dispatch_async(v28, v41);
              if (v47 && v46 < 0)
                operator delete(v45);
              v31 = v42;
              if (v42)
              {
                v32 = (unint64_t *)&v42->__shared_owners_;
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
            }
            if (v52 && v51 < 0)
              operator delete(__p);
            goto LABEL_33;
          }
          ++i;
        }
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003E7CC8();
      v13 = *(NSObject **)(a1 + 56);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3321888768;
      block[2] = sub_1002CBC04;
      block[3] = &unk_100813BF0;
      block[4] = v39;
      v36 = v40;
      if (v40)
      {
        v14 = (unint64_t *)&v40->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      dispatch_async(v13, block);
      v16 = v36;
      if (!v36)
        goto LABEL_33;
      v17 = (unint64_t *)&v36->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_30:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v16 = 0;
      goto LABEL_33;
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7C9C();
    v19 = *(NSObject **)(a1 + 56);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3321888768;
    v37[2] = sub_1002CBB34;
    v37[3] = &unk_100813BF0;
    v37[4] = v39;
    v38 = v40;
    if (v40)
    {
      v20 = (unint64_t *)&v40->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    dispatch_async(v19, v37);
    v16 = v38;
    if (v38)
    {
      v22 = (unint64_t *)&v38->__shared_owners_;
      do
        v18 = __ldaxr(v22);
      while (__stlxr(v18 - 1, v22));
      goto LABEL_30;
    }
LABEL_33:
    std::recursive_mutex::unlock(v9);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7C70();
    v16 = 0;
  }
  v23 = v40;
  if (v40)
  {
    v24 = (unint64_t *)&v40->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v16;
}

void sub_1002CBAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  std::recursive_mutex *v16;
  void *v17;
  va_list va;

  va_start(va, a16);

  if (LOBYTE(STACK[0x640]))
  {
    if (SLOBYTE(STACK[0x63F]) < 0)
      operator delete((void *)STACK[0x628]);
  }
  std::recursive_mutex::unlock(v16);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002CBB34(uint64_t a1)
{
  uint64_t v1;
  void *v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 __p;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(v2, "Client asked to trigger service, but has no registered requests.");
  v4 = 113;
  if (SHIBYTE(v3) < 0)
  {
    sub_100004678(&__p, v2[0], (unint64_t)v2[1]);
  }
  else
  {
    __p = *(_OWORD *)v2;
    v6 = v3;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 104))(v1, &v4);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(v2[0]);
}

void sub_1002CBBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002CBC04(uint64_t a1)
{
  uint64_t v1;
  void *v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 __p;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(v2, "Client asked to trigger service with invalid ticket id.");
  v4 = 108;
  if (SHIBYTE(v3) < 0)
  {
    sub_100004678(&__p, v2[0], (unint64_t)v2[1]);
  }
  else
  {
    __p = *(_OWORD *)v2;
    v6 = v3;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 104))(v1, &v4);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(v2[0]);
}

void sub_1002CBCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002CBCD4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  uint64_t v6;
  uint64_t v7;
  __int128 __p;
  uint64_t v9;

  v2 = (_QWORD *)(a1 + 48);
  if (*(_BYTE *)(a1 + 736))
    v3 = *(_QWORD *)(a1 + 704);
  else
    v3 = 1000;
  v4 = *(_QWORD *)(a1 + 32);
  sub_1002CADAC(v2, v5);
  v7 = v3;
  if (SHIBYTE(v6) < 0)
  {
    sub_100004678(&__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    __p = *(_OWORD *)v5;
    v9 = v6;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 104))(v4, &v7);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_1002CBD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_1002CBDB4(uint64_t a1, uint64_t *a2, unsigned __int16 *a3)
{
  std::__shared_weak_count *v4;
  std::recursive_mutex *v7;
  _QWORD *v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v26;
  _QWORD v27[5];
  std::__shared_weak_count *v28;
  _QWORD block[5];
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  int v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  void *v40;
  void *v41;
  char v42;
  char v43;
  void *__p;
  void *v45;
  char v46;
  __int16 v47;
  __int16 v48;
  char v49;
  char v50;
  __int16 v51;
  char v52;
  char v53;
  char v54;
  char v55;

  v31 = 0;
  v32 = 0;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4 && (v32 = std::__shared_weak_count::lock(v4)) != 0 && (v31 = *a2) != 0)
  {
    v7 = (std::recursive_mutex *)(a1 + 64);
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
    v8 = sub_1002CFFE4((_QWORD *)(a1 + 272), &v31);
    if (v8)
    {
      v9 = (uint64_t **)v8[5];
      if (v9)
      {
        v10 = *a3;
        do
        {
          v11 = *((unsigned __int16 *)v9 + 13);
          if (v10 >= v11)
          {
            if (v11 >= v10)
            {
              v26 = *((_BYTE *)a3 + 2);
              v33 = 7;
              v34 = 0;
              v35 = 0;
              v36 = 0;
              v37 = 0;
              v38 = 0;
              v39 = 0;
              v42 = 0;
              v43 = 0;
              v46 = 0;
              v47 = 0;
              v48 = v10;
              v49 = v26;
              v50 = 1;
              v51 = 0;
              v52 = 0;
              v53 = 0;
              v54 = 0;
              v55 = 0;
              v15 = (std::__shared_weak_count *)sub_10019BF90(a1 + 3264, (uint64_t)&v33);
              if (v46 && __p)
              {
                v45 = __p;
                operator delete(__p);
              }
              if (v42 && v40)
              {
                v41 = v40;
                operator delete(v40);
              }
              goto LABEL_34;
            }
            ++v9;
          }
          v9 = (uint64_t **)*v9;
        }
        while (v9);
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003E7DC8();
      v12 = *(NSObject **)(a1 + 56);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3321888768;
      v27[2] = sub_1002CC1F8;
      v27[3] = &unk_100813BF0;
      v27[4] = v31;
      v28 = v32;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      dispatch_async(v12, v27);
      v15 = v28;
      if (!v28)
        goto LABEL_34;
      v16 = (unint64_t *)&v28->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
LABEL_31:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      v15 = 0;
      goto LABEL_34;
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7D9C();
    v18 = *(NSObject **)(a1 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1002CC128;
    block[3] = &unk_100813BF0;
    block[4] = v31;
    v30 = v32;
    if (v32)
    {
      v19 = (unint64_t *)&v32->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    dispatch_async(v18, block);
    v15 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v17 = __ldaxr(v21);
      while (__stlxr(v17 - 1, v21));
      goto LABEL_31;
    }
LABEL_34:
    std::recursive_mutex::unlock(v7);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7D70();
    v15 = 0;
  }
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v15;
}

void sub_1002CC0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  std::recursive_mutex *v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_100167580((uint64_t)va1);
  std::recursive_mutex::unlock(v13);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002CC128(uint64_t a1)
{
  uint64_t v1;
  void *v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 __p;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(v2, "Client asked to trigger service, but has no registered requests.");
  v4 = 113;
  if (SHIBYTE(v3) < 0)
  {
    sub_100004678(&__p, v2[0], (unint64_t)v2[1]);
  }
  else
  {
    __p = *(_OWORD *)v2;
    v6 = v3;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 104))(v1, &v4);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(v2[0]);
}

void sub_1002CC1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002CC1F8(uint64_t a1)
{
  uint64_t v1;
  void *v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 __p;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(v2, "Client asked to trigger service with invalid ticket id.");
  v4 = 108;
  if (SHIBYTE(v3) < 0)
  {
    sub_100004678(&__p, v2[0], (unint64_t)v2[1]);
  }
  else
  {
    __p = *(_OWORD *)v2;
    v6 = v3;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 104))(v1, &v4);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(v2[0]);
}

void sub_1002CC294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002CC2C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  NSObject *v7;
  std::recursive_mutex *v8;
  _QWORD *v9;
  uint64_t **v10;
  unsigned int v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v30[3];
  _QWORD block[5];
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD v35[5];
  std::__shared_weak_count *v36;
  _BYTE v37[656];
  _BYTE v38[8];
  void *v39;
  char v40;
  char v41;
  uint8_t buf[656];
  uint64_t v43;
  void *__p;
  char v45;
  char v46;

  v33 = 0;
  v34 = 0;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4 && (v34 = std::__shared_weak_count::lock(v4)) != 0 && (v33 = *a2) != 0)
  {
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "stopUserTriggeredRanging! Ticket: %d", buf, 8u);
    }
    v8 = (std::recursive_mutex *)(a1 + 64);
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
    v9 = sub_1002CFFE4((_QWORD *)(a1 + 272), &v33);
    if (v9)
    {
      v10 = (uint64_t **)v9[5];
      if (!v10)
      {
LABEL_12:
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003E7E54();
        v12 = *(NSObject **)(a1 + 56);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_1002CC71C;
        block[3] = &unk_100813BF0;
        block[4] = v33;
        v32 = v34;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        dispatch_async(v12, block);
        v15 = (uint64_t)v32;
        if (v32)
        {
          v16 = (unint64_t *)&v32->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
          }
          v15 = 0;
        }
        goto LABEL_29;
      }
      while (1)
      {
        v11 = *((unsigned __int16 *)v10 + 13);
        if (v11 <= a3)
        {
          if (v11 >= a3)
          {
            (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 6456) + 64))(buf, *(_QWORD *)(a1 + 6456), a3);
            if (*(_DWORD *)&buf[648])
              sub_1002CF994();
            v15 = buf[8] != 0;
            if (!buf[8])
            {
              v23 = (id)qword_10085F520;
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                sub_1002CADAC(buf, v30);
                sub_1003E7E80();
              }

              v24 = *(NSObject **)(a1 + 56);
              v35[0] = _NSConcreteStackBlock;
              v35[1] = 3321888768;
              v35[2] = sub_1002CC7EC;
              v35[3] = &unk_100813BC0;
              v35[4] = v33;
              v36 = v34;
              if (v34)
              {
                v25 = (unint64_t *)&v34->__shared_owners_;
                do
                  v26 = __ldxr(v25);
                while (__stxr(v26 + 1, v25));
              }
              memcpy(v37, buf, sizeof(v37));
              sub_10015A2F0(v38, (uint64_t)&v43);
              dispatch_async(v24, v35);
              if (v41 && v40 < 0)
                operator delete(v39);
              v27 = v36;
              if (v36)
              {
                v28 = (unint64_t *)&v36->__shared_owners_;
                do
                  v29 = __ldaxr(v28);
                while (__stlxr(v29 - 1, v28));
                if (!v29)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }
            }
            if (v46 && v45 < 0)
              operator delete(__p);
            goto LABEL_29;
          }
          ++v10;
        }
        v10 = (uint64_t **)*v10;
        if (!v10)
          goto LABEL_12;
      }
    }
    v18 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Client asked to stop service, but has no registered requests. Ignoring.", buf, 2u);
    }
    v15 = 1;
LABEL_29:
    std::recursive_mutex::unlock(v8);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E7E28();
    v15 = 0;
  }
  v19 = v34;
  if (v34)
  {
    v20 = (unint64_t *)&v34->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v15;
}

void sub_1002CC6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  std::recursive_mutex *v10;
  void *v11;
  va_list va;

  va_start(va, a10);

  if (LOBYTE(STACK[0x610]))
  {
    if (SLOBYTE(STACK[0x60F]) < 0)
      operator delete((void *)STACK[0x5F8]);
  }
  std::recursive_mutex::unlock(v10);
  sub_10001AE68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002CC71C(uint64_t a1)
{
  uint64_t v1;
  void *v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 __p;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10000BF04(v2, "Client asked to stop service with invalid ticket id.");
  v4 = 108;
  if (SHIBYTE(v3) < 0)
  {
    sub_100004678(&__p, v2[0], (unint64_t)v2[1]);
  }
  else
  {
    __p = *(_OWORD *)v2;
    v6 = v3;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 104))(v1, &v4);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(v2[0]);
}

void sub_1002CC7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002CC7EC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  uint64_t v6;
  uint64_t v7;
  __int128 __p;
  uint64_t v9;

  v2 = (_QWORD *)(a1 + 48);
  if (*(_BYTE *)(a1 + 736))
    v3 = *(_QWORD *)(a1 + 704);
  else
    v3 = 1000;
  v4 = *(_QWORD *)(a1 + 32);
  sub_1002CADAC(v2, v5);
  v7 = v3;
  if (SHIBYTE(v6) < 0)
  {
    sub_100004678(&__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    __p = *(_OWORD *)v5;
    v9 = v6;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 104))(v4, &v7);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_1002CC898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002CC8CC(uint64_t a1, uint64_t a2)
{
  return sub_10019CE98(a1 + 3264, a2);
}

uint64_t sub_1002CC8D4(uint64_t a1, uint64_t a2)
{
  return sub_10019CE98(a1 + 3232, a2);
}

void sub_1002CC8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  BOOL v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  _BOOL4 v12;
  id v13;
  uint8_t buf[8];
  _QWORD v15[2];
  _QWORD v16[2];

  if (!*(_QWORD *)(a3 + 24))
    sub_1003E7EC4();
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRangingManager::pushBeaconAllowlist ++", buf, 2u);
  }
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
  {
    v15[0] = NSLocalizedDescriptionKey;
    v15[1] = NSLocalizedFailureReasonErrorKey;
    v16[0] = CFSTR("Failed to push beacon allowlist.");
    v16[1] = CFSTR("To allowlist, must specify at least one beacon.");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 2));
    v11 = PRErrorWithCodeAndUserInfo(107, v10);
    v8 = (id)objc_claimAutoreleasedReturnValue(v11);

    sub_1002CCAA8(a3, v8);
  }
  else
  {
    v13 = 0;
    v7 = sub_10019D110(a1 + 3264, (int **)a2, &v13);
    v8 = v13;
    if (v7)
    {
      v9 = 0;
    }
    else
    {
      v12 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
      v9 = v8;
      if (v12)
      {
        sub_1003E7EEC();
        v9 = v8;
      }
    }
    sub_1002CCAA8(a3, v9);
  }

}

void sub_1002CCA80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002CCAA8(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_100027BC4();
  (*(void (**)(uint64_t, id *))(*(_QWORD *)v3 + 48))(v3, &v4);

}

void sub_1002CCAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1002CCB10(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  id v4;
  void *v5;
  _BOOL4 v6;
  id v7;
  void *__p;
  void *v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  v7 = 0;
  v3 = sub_10019D110(a1 + 3264, (int **)&__p, &v7);
  v4 = v7;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v3)
  {
    v5 = 0;
  }
  else
  {
    v6 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
    v5 = v4;
    if (v6)
    {
      sub_1003E7F18();
      v5 = v4;
    }
  }
  sub_1002CCAA8(a2, v5);

}

void sub_1002CCBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CCBE8(uint64_t a1)
{
  return sub_100290E28(a1 + 912);
}

uint64_t sub_1002CCBF0(std::recursive_mutex *a1, uint64_t *a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;

  v4 = a1 + 1;
  std::recursive_mutex::lock(a1 + 1);
  v5 = sub_1002DA24C((uint64_t)&a1[16].__m_.__opaque[40], a2);
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_1002CCC40(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CCC54(uint64_t a1, uint64_t *a2)
{
  return sub_1002CCBF0((std::recursive_mutex *)(a1 - 48), a2);
}

id sub_1002CCC5C(std::recursive_mutex *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  id v5;

  v4 = a1 + 1;
  std::recursive_mutex::lock(a1 + 1);
  v5 = sub_1002DA324((uint64_t)&a1[16].__m_.__opaque[40], a2);
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_1002CCCAC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1002CCCC0(uint64_t a1, uint64_t a2)
{
  return sub_1002CCC5C((std::recursive_mutex *)(a1 - 48), a2);
}

id sub_1002CCCC8(std::recursive_mutex *a1)
{
  std::recursive_mutex *v2;
  id v3;

  v2 = a1 + 1;
  std::recursive_mutex::lock(a1 + 1);
  v3 = sub_1002DA384((uint64_t)&a1[16].__m_.__opaque[40]);
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_1002CCD08(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1002CCD1C(uint64_t a1)
{
  return sub_1002CCCC8((std::recursive_mutex *)(a1 - 48));
}

uint64_t sub_1002CCD24(std::recursive_mutex *a1)
{
  std::recursive_mutex *v2;
  uint64_t v3;

  v2 = a1 + 1;
  std::recursive_mutex::lock(a1 + 1);
  v3 = sub_1002D96E8((uint64_t)&a1[16].__m_.__opaque[40]);
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_1002CCD64(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CCD78(uint64_t a1)
{
  return sub_1002CCD24((std::recursive_mutex *)(a1 - 48));
}

uint64_t sub_1002CCD80(std::recursive_mutex *a1)
{
  std::recursive_mutex *v2;
  uint64_t v3;

  v2 = a1 + 1;
  std::recursive_mutex::lock(a1 + 1);
  v3 = sub_1002D97BC((uint64_t)&a1[16].__m_.__opaque[40]);
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_1002CCDC0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CCDD4(uint64_t a1)
{
  return sub_1002CCD80((std::recursive_mutex *)(a1 - 48));
}

uint64_t sub_1002CCDDC(uint64_t a1)
{
  return sub_100199518(a1 + 3264);
}

uint64_t sub_1002CCDE4(uint64_t a1)
{
  return sub_1001995B8(a1 + 3264);
}

uint64_t sub_1002CCDEC(uint64_t a1, uint64_t a2)
{
  return sub_1001995C0(a1 + 3264, a2);
}

uint64_t sub_1002CCDF4(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  NSObject *v6;
  void **v7;
  std::string::size_type v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;
  __int16 v14;
  std::string::size_type v15;

  v6 = (id)qword_10085F520;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10039FA60(a2, __p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (*(char *)(a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *(_QWORD *)a3;
    *(_DWORD *)buf = 136315394;
    v13 = v7;
    v14 = 2080;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[Diagnostics] Client triggered log collection. Type: %s, Reason: %s", buf, 0x16u);
    if (v11 < 0)
      operator delete(__p[0]);
  }

  return sub_1001992C0(a1 + 3264, a2, a3);
}

void sub_1002CCF10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002CCF28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10019BC4C(a1 + 3264, a2, a3);
}

uint64_t sub_1002CCF30(uint64_t a1, BOOL *a2)
{
  return sub_100199668(a1 + 3264, a2);
}

uint64_t sub_1002CCF38(uint64_t a1, int a2)
{
  return sub_100199678(a1 + 3264, a2);
}

uint64_t sub_1002CCF40(uint64_t a1, _BYTE *a2)
{
  return sub_100199670(a1 + 3264, a2);
}

CFDataRef sub_1002CCF48(uint64_t a1)
{
  return sub_1001997D0(a1 + 3264);
}

uint64_t sub_1002CCF50(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#deep-slp PRRangingManager getDeepSleepState", v4, 2u);
  }
  return sub_10019B4BC(a1 + 3264);
}

uint64_t sub_1002CCFC0(uint64_t a1)
{
  return sub_10019B700(a1 + 3264);
}

void sub_1002CCFCC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  kdebug_trace(728956968, 0, 0, 0, 0);
  sub_1002CD2F4(a1, *(_WORD *)(a2 + 36), &v7);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
    kdebug_trace(728956972, 0, 0, 0, 0);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E7F44();
  }
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002CD0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CD0E8(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  v4 = (char *)operator new(0xA0uLL);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v4 + 120) = v5;
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 56) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 88) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_QWORD *)v4 = off_1008141B0;
  *((_QWORD *)v4 + 19) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(v4 + 24) = v8;
  v12 = v4;
  sub_1002CD628(a1, (uint64_t)v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1002CD1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1002CD214(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  sub_1002CD2F4(a1, *(_WORD *)(a2 + 4), &v7);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E7FA8();
  }
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002CD2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CD2F4(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, _QWORD *a3@<X8>)
{
  std::recursive_mutex *v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int16 v10;

  v10 = a2;
  v5 = (std::recursive_mutex *)(a1 + 64);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
  v6 = sub_100154A64((_QWORD *)(a1 + 232), &v10);
  if (v6)
  {
    v7 = v6[4];
    *a3 = v6[3];
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 1);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  std::recursive_mutex::unlock(v5);
}

void sub_1002CD374(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1002CD388(uint64_t a1, unsigned __int16 *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  sub_1002CD2F4(a1, *a2, &v7);
  if (v7)
  {
    (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)v7 + 48))(v7, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E800C();
  }
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002CD448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CD45C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  sub_1002CD2F4(a1, *(_WORD *)(a2 + 24), &v7);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E806C();
  }
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002CD528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***sub_1002CD53C(uint64_t a1, int *a2))()
{
  int v4;
  uint64_t (***result)();
  uint64_t v6;
  uint64_t (**v7)();
  int v8;
  uint64_t (***v9)();

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  v4 = *a2;
  v7 = off_100814020;
  v8 = v4;
  v9 = &v7;
  sub_1002CD628(a1, (uint64_t)&v7);
  result = v9;
  if (v9 == &v7)
  {
    v6 = 4;
    result = &v7;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (uint64_t (***)())(*result)[v6]();
}

void sub_1002CD5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1002CD628(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint8_t v11[8];
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE v14[24];
  _BYTE *v15;

  v4 = (std::recursive_mutex *)(a1 + 64);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
  if (!*(_QWORD *)(a1 + 224))
  {
    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "forEachClientWithFunction but no registered clients.", v11, 2u);
    }
  }
  v6 = *(_QWORD **)(a1 + 208);
  sub_100027674((uint64_t)v12, a2);
  sub_1002CE884(v6, (_QWORD *)(a1 + 216), (uint64_t)v12, (uint64_t)v14);
  v7 = v15;
  if (v15 == v14)
  {
    v8 = 4;
    v7 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_9:
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_13;
  }
  if (v13)
  {
    v10 = 5;
LABEL_13:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1002CD76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::recursive_mutex *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_1002CD7B4(uint64_t a1, unsigned __int16 *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  sub_1002CD2F4(a1, *a2, &v7);
  if (v7)
  {
    (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)v7 + 56))(v7, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E80CC();
  }
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002CD874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CD888(uint64_t a1, unsigned __int16 *a2)
{
  sub_1002CD7B4(a1 - 8, a2);
}

void sub_1002CD890(uint64_t a1, unsigned __int16 *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  sub_1002CD2F4(a1, *a2, &v7);
  if (v7)
  {
    (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)v7 + 64))(v7, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E812C();
  }
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002CD950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CD964(uint64_t a1, unsigned __int16 *a2)
{
  sub_1002CD890(a1 - 16, a2);
}

_QWORD *sub_1002CD96C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  v6[0] = off_1008140B0;
  v6[1] = a2;
  v7 = v6;
  sub_1002CD628(a1, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1002CDA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002CDA50(uint64_t a1, uint64_t a2)
{
  return sub_1002CD96C(a1 - 24, a2);
}

_QWORD *sub_1002CDA58(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  v6[0] = off_100814130;
  v6[1] = a2;
  v7 = v6;
  sub_1002CD628(a1, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1002CDB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1002CDB3C(uint64_t a1, uint64_t a2)
{
  int v4;
  std::runtime_error *exception;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  v4 = *(_DWORD *)(a2 + 4);
  switch(v4)
  {
    case 1:
      if (!*(_BYTE *)(a2 + 20))
        sub_1003E818C();
      sub_1002CDC30(a1, a2 + 8);
      if (!*(_BYTE *)(a2 + 20))
        sub_10000BA44();
      sub_1002CDD64(a1, (unsigned __int16 *)(a2 + 8));
      break;
    case 2:
      if (!*(_BYTE *)(a2 + 56))
        sub_1003E81B4();
      sub_1002CDE14(a1, *(_WORD *)a2, a2 + 24);
      break;
    case 0:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "PRRangingService got unspecified service response");
  }
}

void sub_1002CDC1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002CDC30(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  NSObject *v8;
  void **v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  v2 = *(_DWORD *)(a2 + 4);
  v3 = v2 > 9;
  v4 = (1 << v2) & 0x390;
  if (!v3 && v4 != 0)
  {
    v8 = (id)qword_10085F520;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10000BF04(__p, off_100814358[*(int *)(a2 + 4)]);
      if (v11 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PRRangingManager::handlePossibleRequestInvalidation - %s", buf, 0xCu);
      if (v11 < 0)
        operator delete(__p[0]);
    }

    sub_1002CDEF8(a1, *(_WORD *)a2);
  }
}

void sub_1002CDD4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002CDD64(uint64_t a1, unsigned __int16 *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  sub_1002CD2F4(a1, *a2, &v7);
  if (v7)
    (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)v7 + 80))(v7, a2);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002CDE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CDE14(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  sub_1002CD2F4(a1, a2, &v9);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, a3);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E81DC();
  }
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1002CDEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CDEF8(uint64_t a1, unsigned __int16 a2)
{
  std::recursive_mutex *v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unsigned __int16 v26;
  uint8_t buf[4];
  int v28;

  v26 = a2;
  v3 = (std::recursive_mutex *)(a1 + 64);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
  v4 = sub_100154A64((_QWORD *)(a1 + 232), &v26);
  v5 = v4;
  if (v4)
  {
    v6 = (uint64_t)v4[3];
    v7 = v4[4];
    v24 = v6;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 1);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    if (v6)
    {
      v10 = sub_1002CFFE4((_QWORD *)(a1 + 272), &v24);
      if (v10)
      {
        v13 = v10[5];
        v11 = (uint64_t **)(v10 + 5);
        v12 = v13;
        if (!v13)
          goto LABEL_18;
        v14 = (uint64_t *)v11;
        do
        {
          v15 = *(unsigned __int16 *)(v12 + 26);
          v16 = v15 >= v26;
          if (v15 >= v26)
            v17 = (uint64_t *)v12;
          else
            v17 = (uint64_t *)(v12 + 8);
          if (v16)
            v14 = (uint64_t *)v12;
          v12 = *v17;
        }
        while (*v17);
        if (v14 != (uint64_t *)v11 && v26 >= *((unsigned __int16 *)v14 + 13))
        {
          sub_100027730(v11 - 1, v14);
          operator delete(v14);
        }
        else
        {
LABEL_18:
          sub_1002D069C((_QWORD *)(a1 + 272), &v24);
        }
      }
      else
      {
        v19 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003E82A0(&v24, v19);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003E8240();
    }
    v20 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v28 = v26;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "PRRangingManager: Speculative Cleanup - erasing ticketId (%d) from fRequestToClientMap", buf, 8u);
    }
    sub_10002A5A0((_QWORD *)(a1 + 232), v5, (uint64_t)buf);
    sub_1001E86F4((uint64_t)buf, 0);
    sub_100199C08(a1 + 3264);
    v21 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    v18 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v28 = v26;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Speculative Cleanup: no request found with ticket: %d", buf, 8u);
    }
  }
  std::recursive_mutex::unlock(v3);
}

void sub_1002CE178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1002CE1AC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  std::recursive_mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint8_t v9[8];
  _BYTE v10[24];
  _BYTE *v11;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Enumerating registered service requests", v9, 2u);
  }
  v5 = (std::recursive_mutex *)(a1 + 64);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
  v6 = *(_QWORD *)(a1 + 6456);
  sub_100027674((uint64_t)v10, a2);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 80))(v6, v10);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_7;
  }
  if (v11)
  {
    v8 = 5;
LABEL_7:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  std::recursive_mutex::unlock(v5);
}

void sub_1002CE2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::recursive_mutex *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_1002CE308(uint64_t a1, unint64_t *a2)
{
  NSObject *v4;
  uint8_t v5[16];

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client connecting.", v5, 2u);
  }
  if (*a2)
  {
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
    sub_1002D051C((uint64_t **)(a1 + 208), a2, (uint64_t *)a2);
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 64));
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E8318();
  }
}

void sub_1002CE3CC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1002CE3E0(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E8370();
  if (*a2)
  {
    v4 = a2[1];
    v10 = *a2;
    v11 = (std::__shared_weak_count *)v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    sub_1002CE4DC(a1, &v10);
    v7 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E8344();
  }
}

void sub_1002CE4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CE4DC(uint64_t a1, unint64_t *a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD **v14;
  int v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD **v18;
  BOOL v19;
  void **v20;
  NSObject *v21;
  unint64_t v22;
  void *v23[2];
  char v24;
  _QWORD **v25;
  _QWORD *v26[2];
  uint8_t v27[4];
  int v28;
  __int16 v29;
  void **v30;
  uint8_t buf[4];
  unint64_t v32;
  int v33;
  void *__p;
  char v35;
  char v36;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003E83C8();
  if (*a2)
  {
    v4 = (std::recursive_mutex *)(a1 + 64);
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
    v5 = *(_QWORD **)(a1 + 216);
    if (v5)
    {
      v6 = *a2;
      v7 = (uint64_t *)(a1 + 216);
      do
      {
        v8 = v5[4];
        v9 = v8 >= v6;
        if (v8 >= v6)
          v10 = v5;
        else
          v10 = v5 + 1;
        if (v9)
          v7 = v5;
        v5 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != (uint64_t *)(a1 + 216) && v6 >= v7[4])
      {
        sub_100027730((uint64_t **)(a1 + 208), v7);
        sub_10001AE68((uint64_t)(v7 + 4));
        operator delete(v7);
        v11 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Cleanup: removed from client record", buf, 2u);
        }
      }
    }
    v12 = sub_1002CFFE4((_QWORD *)(a1 + 272), a2);
    v13 = v12;
    if (v12)
    {
      sub_10015453C((uint64_t *)&v25, (uint64_t)(v12 + 4));
      v14 = v25;
      if (v25 != v26)
      {
        do
        {
          v15 = *((unsigned __int16 *)v14 + 13);
          (*(void (**)(uint8_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 6456) + 48))(buf, *(_QWORD *)(a1 + 6456), *((unsigned __int16 *)v14 + 13));
          if (v33)
            sub_1002CF994();
          if (!BYTE4(v32))
          {
            v16 = (id)qword_10085F520;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              sub_1002CADAC(buf, v23);
              v20 = v23;
              if (v24 < 0)
                v20 = (void **)v23[0];
              *(_DWORD *)v27 = 67109378;
              v28 = v15;
              v29 = 2080;
              v30 = v20;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Cleanup: Failed to unregister for service with ticket: %d. Error: %s", v27, 0x12u);
              if (v24 < 0)
                operator delete(v23[0]);
            }

            sub_1002CDEF8(a1, v15);
          }
          if (v36 && v35 < 0)
            operator delete(__p);
          v17 = v14[1];
          if (v17)
          {
            do
            {
              v18 = (_QWORD **)v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD **)v14[2];
              v19 = *v18 == v14;
              v14 = v18;
            }
            while (!v19);
          }
          v14 = v18;
        }
        while (v18 != v26);
      }
      sub_1002D0654((_QWORD *)(a1 + 272), v13);
      sub_10003E3F0((uint64_t)&v25, v26[0]);
    }
    else
    {
      v21 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *a2;
        *(_DWORD *)buf = 134217984;
        v32 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Cleanup: no requests found for client %p", buf, 0xCu);
      }
    }
    std::recursive_mutex::unlock(v4);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003E839C();
  }
}

void sub_1002CE820(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CE884@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = (std::__shared_weak_count *)v7[5];
      v19 = v7[4];
      v20 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = *(_QWORD *)(a3 + 24);
      if (!v11)
        sub_100027BC4();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v19);
      v12 = v20;
      if (v20)
      {
        v13 = (unint64_t *)&v20->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (_QWORD *)v7[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v7[2];
          v17 = *v16 == (_QWORD)v7;
          v7 = v16;
        }
        while (!v17);
      }
      v7 = v16;
    }
    while (v16 != a2);
  }
  return sub_1002D08A4(a4, a3);
}

void sub_1002CE988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CE9A0(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      sub_1002CEA20((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1002CEA08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10017ECCC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002CEA20(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)sub_100232F70(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1002CEAA0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_1002CEAA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_100004678(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1002CEB20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1001DA2BC(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CEB3C(uint64_t a1, __int128 *a2, __int128 *a3, const void ***a4)
{
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = off_100809E40;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100004678((_BYTE *)(a1 + 32), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v8;
  }
  sub_1002CEC20((uint64_t *)(a1 + 56), a4);
  return a1;
}

void sub_1002CEBEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1002CEC20(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002CEC74(a1, *a2, a2 + 1);
  return a1;
}

void sub_1002CEC5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10017ECCC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002CEC74(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1002CEA20(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

_QWORD *sub_1002CECF8@<X0>(_QWORD *a1@<X1>, unsigned __int8 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x2C8uLL);
  result = sub_1002CED58(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1002CED44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CED58(_QWORD *a1, _QWORD *a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100813D30;
  sub_1000DE194(a1 + 3, *a2, *a3);
  return a1;
}

void sub_1002CED94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002CEDA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100813D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002CEDB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100813D30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002CEDE8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1002CEDF8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xB8uLL);
  result = sub_1002CEE70(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1002CEE5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CEE70(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  char v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100813D80;
  sub_1002CEF28((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1002CEEC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002CEED8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100813D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002CEEE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100813D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002CEF18(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1002CEF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;

  v6 = *a4;
  *a4 = 0;
  v21 = v6;
  v19 = *a5;
  if (v19)
    operator new();
  v20 = 0;
  *a5 = 0;
  v7 = (std::__shared_weak_count *)a6[1];
  v17 = *a6;
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_10026BB9C(a2, a3, &v21, &v19, &v17);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1002CF07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

void sub_1002CF0C0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002CF0E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1002CF0FC(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_1002CF13C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x28uLL);
  result = sub_1002CF19C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1002CF188(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CF19C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100813E30;
  sub_1002A42C8(a1 + 3, a2 + 8, a3 + 8);
  return a1;
}

void sub_1002CF1D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002CF1EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100813E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002CF1FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100813E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1002CF238()
{
  operator delete();
}

__n128 sub_1002CF24C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_100813E80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1002CF28C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100813E80;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1002CF2B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t sub_1002CF2D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002CF310()
{
}

void sub_1002CF31C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002CF31C(a1, *a2);
    sub_1002CF31C(a1, a2[1]);
    sub_10001AE68((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1002CF364(uint64_t a1)
{
  void *v2;

  sub_1002CF39C(a1, *(_QWORD ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1002CF39C(uint64_t a1, _QWORD **a2)
{
  _QWORD **v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      sub_10003E3F0((uint64_t)(v2 + 4), v2[5]);
      sub_10001AE68((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
}

_QWORD *sub_1002CF3F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0xAA8uLL);
  result = sub_1002CF478(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1002CF464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CF478(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100813F30;
  sub_1002CF534((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1002CF4D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002CF4E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100813F30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002CF4F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100813F30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002CF524(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1002CF534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v8 = *a5;
  v9 = *a6;
  v10 = (std::__shared_weak_count *)a7[1];
  v16 = *a7;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_100155BE4(a2, a3, a4, v8, v9, &v16);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1002CF5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CF5E0@<X0>(uint64_t *a1@<X1>, void **a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x48uLL);
  result = sub_1002CF640(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1002CF62C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CF640(_QWORD *a1, uint64_t *a2, void **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100813F80;
  sub_100159BDC(a1 + 3, *a2, *a3);
  return a1;
}

void sub_1002CF67C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002CF690(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100813F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002CF6A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100813F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002CF6D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1002CF6E0(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x78uLL);
  sub_1002CF730(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  sub_10001B020((uint64_t)a1, v2 + 3, (uint64_t)(v2 + 3));
}

void sub_1002CF71C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CF730(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100813FD0;
  sub_1001DB274((uint64_t)(a1 + 3));
  return a1;
}

void sub_1002CF764(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002CF778(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100813FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002CF788(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100813FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1002CF7B8(uint64_t a1)
{
  char v1;

  sub_1002CF7E0((uint64_t)&v1, a1 + 24);
}

void sub_1002CF7E0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;

  std::mutex::~mutex((std::mutex *)(a2 + 16));
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

_QWORD *sub_1002CF820(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1002CF988(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000131D8(a1);
}

void sub_1002CF994()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

_QWORD *sub_1002CF9CC(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x38uLL);
  i = v16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = **a4;
  v18 = v17[1];
  v16[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v16[5] = 0;
  v16[6] = 0;
  v16[4] = v16 + 5;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    sub_10002A900(a1, v26);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *i = *v28;
LABEL_41:
    *v28 = i;
    goto LABEL_42;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v27 + 8 * v4) = v15;
  if (*i)
  {
    v29 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v29 >= v10)
        v29 %= v10;
    }
    else
    {
      v29 &= v10 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1002CFC5C(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  sub_1002CFC78(v2, v1);
  _Unwind_Resume(a1);
}

void sub_1002CFC78(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_10003E3F0((uint64_t)(a2 + 4), a2[5]);
    sub_10001AE68((uint64_t)(a2 + 2));
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t **sub_1002CFCCC(uint64_t **a1, unsigned __int16 *a2, _WORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v10 + 13) = *a3;
    sub_1000272A8(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **sub_1002CFD84(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t **)*i)
      {
        v12 = (unint64_t)i[1];
        if (v12 == v7)
        {
          if (*((unsigned __int16 *)i + 8) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  *((_WORD *)v14 + 8) = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10002A900(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t **)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1001E86F4((uint64_t)v24, 0);
  return i;
}

void sub_1002CFFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001E86F4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002CFFE4(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1002D00D0(uint64_t a1)
{
  sub_10003E3F0(a1 + 16, *(_QWORD **)(a1 + 24));
  return sub_10001AE68(a1);
}

_QWORD *sub_1002D00FC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_10015453C(a1 + 2, (uint64_t)(a2 + 2));
  return a1;
}

void sub_1002D0148(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001AE68(v1);
  _Unwind_Resume(a1);
}

void sub_1002D0160()
{
  operator delete();
}

_DWORD *sub_1002D0174(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_100814020;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1002D01AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_100814020;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1002D01CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 96))(v3, a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002D0240(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_1003E83F4();
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D0258(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002D0294()
{
}

void sub_1002D02A4()
{
  operator delete();
}

_QWORD *sub_1002D02B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1008140B0;
  result[1] = v3;
  return result;
}

uint64_t sub_1002D02EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1008140B0;
  a2[1] = v2;
  return result;
}

void sub_1002D0308(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(_QWORD *)(a1 + 8));
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002D037C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_1003E83F4();
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D0394(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002D03D0()
{
}

void sub_1002D03E0()
{
  operator delete();
}

_QWORD *sub_1002D03F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100814130;
  result[1] = v3;
  return result;
}

uint64_t sub_1002D0428(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100814130;
  a2[1] = v2;
  return result;
}

void sub_1002D0444(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 88))(v3, **(unsigned int **)(a1 + 8), *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4));
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002D04BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_1003E83F4();
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D04D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002D0510()
{
}

uint64_t *sub_1002D051C(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        return (uint64_t *)v8;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v16[1] = v6;
    v12 = a3[1];
    v11[4] = *a3;
    v11[5] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v17 = 1;
    sub_1000272A8(a1, (uint64_t)v8, v7, v11);
    v16[0] = 0;
    sub_1002D0610((uint64_t)v16, 0);
  }
  return v11;
}

void sub_1002D0610(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10001AE68((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_1002D0654(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v5;
  uint64_t v6;

  v2 = *a2;
  sub_10002A5A0(a1, a2, (uint64_t)&v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    sub_1002CFC78((uint64_t)&v6, v3);
  return v2;
}

uint64_t *sub_1002D069C(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = sub_1002CFFE4(a1, a2);
  if (result)
  {
    sub_1002D0654(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void sub_1002D06D4()
{
  operator delete();
}

__n128 sub_1002D06E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v2 = off_1008141B0;
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *((_QWORD *)v2 + 19) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1002D0768(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a2 = off_1008141B0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  result = *(__n128 *)(a1 + 104);
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 136) = v8;
  *(_OWORD *)(a2 + 120) = v7;
  *(__n128 *)(a2 + 104) = result;
  return result;
}

void sub_1002D07D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1002D0844(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_1003E83F4();
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D085C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002D0898()
{
}

uint64_t sub_1002D08A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_1002D0908(float a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int v4;
  int v5;
  _QWORD *v6;

  if (v5 >= 0)
    v6 = a3;
  else
    v6 = (_QWORD *)*a3;
  *(float *)a4 = a1;
  *(_DWORD *)(a4 + 4) = v4;
  *(_WORD *)(a4 + 8) = 2080;
  *(_QWORD *)(a4 + 10) = v6;
}

void sub_1002D092C(std::__shared_weak_count *this)
{
  std::__shared_weak_count::__release_weak(this);
}

void sub_1002D094C(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x12u);
}

void sub_1002D0968()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850448);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850448))
    {
      sub_10000BF04(qword_100850430, "PRRoseProviderNetworkListener");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850430, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850448);
    }
  }
}

void sub_1002D09E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850448);
  _Unwind_Resume(a1);
}

void sub_1002D09FC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850468);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850468))
    {
      sub_10000BF04(&qword_100850450, "com.apple.nearbyd.accessory.download");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850450, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850468);
    }
  }
}

void sub_1002D0A78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850468);
  _Unwind_Resume(a1);
}

void sub_1002D0A90()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850488);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850488))
    {
      sub_10000BF04(&qword_100850470, "com.apple.nearbyd.accessory.files");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100850470, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850488);
    }
  }
}

void sub_1002D0B0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850488);
  _Unwind_Resume(a1);
}

void sub_1002D0B24()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504A8))
    {
      sub_10000BF04(qword_100850490, "MA_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850490, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504A8);
    }
  }
}

void sub_1002D0BA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504A8);
  _Unwind_Resume(a1);
}

void sub_1002D0BB8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504C8))
    {
      sub_10000BF04(qword_1008504B0, "MB_");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504C8);
    }
  }
}

void sub_1002D0C34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504C8);
  _Unwind_Resume(a1);
}

void sub_1002D0C4C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1008504E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1008504E8))
    {
      sub_10000BF04(qword_1008504D0, "D");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008504D0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1008504E8);
    }
  }
}

void sub_1002D0CC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008504E8);
  _Unwind_Resume(a1);
}

void sub_1002D0CE0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850508);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850508))
    {
      sub_10000BF04(&qword_1008504F0, "A");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008504F0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850508);
    }
  }
}

void sub_1002D0D5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850508);
  _Unwind_Resume(a1);
}

void sub_1002D0D74()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100850528);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850528))
    {
      sub_10000BF04(qword_100850510, "FAS.bin");
      __cxa_atexit((void (*)(void *))&std::string::~string, qword_100850510, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850528);
    }
  }
}

void sub_1002D0DF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850528);
  _Unwind_Resume(a1);
}

void sub_1002D0E08()
{
  unsigned __int8 v0;
  _OWORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_100850548);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_100850548))
    {
      qword_100850530 = 0;
      qword_100850538 = 0;
      qword_100850540 = 0;
      v1 = operator new(0x30uLL);
      qword_100850538 = (uint64_t)(v1 + 3);
      qword_100850540 = (uint64_t)(v1 + 3);
      *v1 = xmmword_100476218;
      v1[1] = unk_100476228;
      v1[2] = xmmword_100476238;
      qword_100850530 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_100009C44, &qword_100850530, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100850548);
    }
  }
}

void sub_1002D0EA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100850548);
  _Unwind_Resume(a1);
}

void sub_1002D0EC0()
{
  void *v0;
  std::string *v1;
  __int128 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;

  v0 = objc_autoreleasePoolPush();
  sub_1003610EC(0);
  v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  v3 = std::string::append(&v38, ".bin");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_10085B8E8 = v3->__r_.__value_.__r.__words[2];
  xmmword_10085B8D8 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B8D8, (void *)&_mh_execute_header);
  sub_1003610EC(1);
  v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v38, ".bin");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_10085B900 = v7->__r_.__value_.__r.__words[2];
  xmmword_10085B8F0 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B8F0, (void *)&_mh_execute_header);
  sub_1003610EC(2);
  v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v38, ".bin");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_10085B918 = v11->__r_.__value_.__r.__words[2];
  xmmword_10085B908 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B908, (void *)&_mh_execute_header);
  sub_1003610EC(3);
  v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v38, ".bin");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_10085B930 = v15->__r_.__value_.__r.__words[2];
  xmmword_10085B920 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B920, (void *)&_mh_execute_header);
  sub_1003610EC(4);
  v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v38, ".bin");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_10085B948 = v19->__r_.__value_.__r.__words[2];
  xmmword_10085B938 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B938, (void *)&_mh_execute_header);
  sub_1003610EC(5);
  v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v38, ".bin");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_10085B960 = v23->__r_.__value_.__r.__words[2];
  xmmword_10085B950 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B950, (void *)&_mh_execute_header);
  sub_1003610EC(6);
  v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v38, ".bin");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_10085B978 = v27->__r_.__value_.__r.__words[2];
  xmmword_10085B968 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B968, (void *)&_mh_execute_header);
  sub_1003610EC(7);
  v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v38, ".bin");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_10085B990 = v31->__r_.__value_.__r.__words[2];
  xmmword_10085B980 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B980, (void *)&_mh_execute_header);
  sub_1003610EC(8);
  v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v38, ".bin");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_10085B9A8 = v35->__r_.__value_.__r.__words[2];
  xmmword_10085B998 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10085B998, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1002D14B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1002D1640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002D166C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 8));
  if (v12)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v7 = objc_opt_respondsToSelector(v6, "DataCallback:");

    if ((v7 & 1) != 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(v8, "DataCallback:", v12);

    }
  }
  if (v5)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v10 = objc_opt_respondsToSelector(v9, "ErrorCallback:");

    if ((v10 & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(v11, "ErrorCallback:", v5);

    }
  }

}

void sub_1002D1754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002D189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002D18C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 8));
  if (v12)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v7 = objc_opt_respondsToSelector(v6, "DataCallback:");

    if ((v7 & 1) != 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(v8, "DataCallback:", v12);

    }
  }
  if (v5)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v10 = objc_opt_respondsToSelector(v9, "ErrorCallback:");

    if ((v10 & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(v11, "ErrorCallback:", v5);

    }
  }

}

void sub_1002D19B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002D1CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void *sub_1002D1DB8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    sub_1000260B0();
  return operator new(48 * a2);
}

_QWORD *sub_1002D1DFC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100814550[a1]);
}

_QWORD *sub_1002D1E10@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008145A8[a1]);
}

_QWORD *sub_1002D1E24@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008145F0[a1]);
}

_QWORD *sub_1002D1E38@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100814610[a1]);
}

void sub_1002D2180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002D27A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1002D2A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1002D2B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1002D2BB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D2CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002D2E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D3284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1002D34F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1002D36B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002D38EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002D39C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D3A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D3C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002D3CA0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)_NIServerTestWiFiOnlySession;
  v2 = objc_msgSendSuper2(&v5, "resourcesManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
  objc_msgSend(v4, "uwbSessionDidFailWithError:", *(_QWORD *)(a1 + 40));

}

void sub_1002D3D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D3E04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D3F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D4080(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  objc_super v5;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 64))
  {
    v5.receiver = *(id *)(a1 + 32);
    v5.super_class = (Class)_NIServerTestWiFiOnlySession;
    v2 = objc_msgSendSuper2(&v5, "resourcesManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remote"));
    objc_msgSend(v4, "didUpdateNearbyObjects:", *(_QWORD *)(a1 + 40));

  }
}

void sub_1002D4100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002D41E4(uint64_t a1)
{

  return a1;
}

void sub_1002D420C(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1002D4244(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_1008143E0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1002D4288(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1008143E0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1002D42BC(uint64_t a1)
{

}

void sub_1002D42C4(id *a1)
{

  operator delete(a1);
}

id sub_1002D42EC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 8), "wifiRangingRangeResults:", a2);
}

uint64_t sub_1002D42F8(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100814440))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1002D4334()
{
  return &off_100814440;
}

uint64_t sub_1002D4340(uint64_t a1)
{

  return a1;
}

void sub_1002D4368(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1002D43A0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100814460;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1002D43E4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100814460;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1002D4418(uint64_t a1)
{

}

void sub_1002D4420(id *a1)
{

  operator delete(a1);
}

id sub_1002D4448(uint64_t a1, int *a2)
{
  int v3;

  v3 = *a2;
  return objc_msgSend(*(id *)(a1 + 8), "wifiRangingRangeError:", &v3);
}

uint64_t sub_1002D4474(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_1008144C0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1002D44B0()
{
  return &off_1008144C0;
}

uint64_t sub_1002D44BC(uint64_t a1)
{

  return a1;
}

void sub_1002D44E4(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1002D451C(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_1008144E0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1002D4560(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_1008144E0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1002D4594(uint64_t a1)
{

}

void sub_1002D459C(id *a1)
{

  operator delete(a1);
}

id sub_1002D45C4(uint64_t a1, int *a2)
{
  int v3;

  v3 = *a2;
  return objc_msgSend(*(id *)(a1 + 8), "wifiRangingReadiness:", &v3);
}

uint64_t sub_1002D45F0(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100814540))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1002D462C()
{
  return &off_100814540;
}

void sub_1002D4638()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;

  v0 = objc_autoreleasePoolPush();
  v10 = xmmword_100476C90;
  v11 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085D348, (int *)&v10, 3);
  xmmword_10085D360 = xmmword_10046E050;
  *(_OWORD *)algn_10085D370 = xmmword_10046E060;
  qword_10085D388 = 0;
  unk_10085D390 = 0;
  qword_10085D380 = 0x3FD999999999999ALL;
  unk_10085D398 = xmmword_10046E070;
  dword_10085D3A8 = 5;
  qword_10085D3B0 = 0x4000000000000000;
  dword_10085D3B8 = 5;
  byte_10085D3C0 = 0;
  *(_QWORD *)&algn_10085D3C1[3] = 0x30000000ALL;
  xmmword_10085D3D0 = xmmword_10046E080;
  unk_10085D3E0 = xmmword_10046E090;
  xmmword_10085D3F0 = xmmword_10046E0A0;
  qword_10085D400 = 0x3FE3333333333333;
  dword_10085D408 = 3;
  xmmword_10085D410 = xmmword_10046E0B0;
  unk_10085D420 = xmmword_10046E090;
  xmmword_10085D430 = xmmword_10046E080;
  qword_10085D440 = 0x3FE3333333333333;
  byte_10085D448 = 0;
  xmmword_10085D450 = xmmword_10046E0C0;
  unk_10085D460 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v8 = _Q0;
  xmmword_10085D470 = _Q0;
  qword_10085D480 = 0xBFD3333333333333;
  xmmword_10085D488 = xmmword_10046E0E0;
  qword_10085D498 = 0x3E99999A40000000;
  xmmword_10085D4A0 = xmmword_10046E060;
  qword_10085D4B8 = 0;
  unk_10085D4C0 = 0;
  qword_10085D4B0 = 0x3FD999999999999ALL;
  xmmword_10085D4C8 = xmmword_10046E070;
  dword_10085D4D8 = 5;
  qword_10085D4E0 = 0x4000000000000000;
  dword_10085D4E8 = 4;
  qword_10085D4F0 = 0x300000008;
  qword_10085D4F8 = 0xC04E800000000000;
  v9 = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_10085D500, (double *)&v9, 1);
  xmmword_10085D518 = xmmword_10046E0F0;
  qword_10085D528 = 0x4024000000000000;
  dword_10085D530 = 45;
  byte_10085D534 = 0;
  dword_10085D538 = 1;
  byte_10085D540 = 1;
  xmmword_10085D548 = xmmword_10046E100;
  unk_10085D558 = xmmword_10046E110;
  xmmword_10085D568 = v8;
  qword_10085D578 = 0xC059000000000000;
  xmmword_10085D580 = xmmword_10046E120;
  qword_10085D590 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085D598 = xmmword_10046E060;
  qword_10085D5A8 = 0x3FD999999999999ALL;
  qword_10085D5B8 = 0;
  qword_10085D5B0 = 0;
  xmmword_10085D5C0 = xmmword_10046E070;
  dword_10085D5D0 = 5;
  qword_10085D5D8 = 0x4000000000000000;
  dword_10085D5E0 = 10;
  qword_10085D5E8 = 0x4034000000000000;
  dword_10085D5F0 = 3;
  xmmword_10085D5F8 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085D348, (void *)&_mh_execute_header);
  qword_10085D610 = 0;
  unk_10085D618 = 0;
  qword_10085D608 = 0;
  v6 = operator new(0x40uLL);
  qword_10085D610 = (uint64_t)(v6 + 4);
  unk_10085D618 = v6 + 4;
  *v6 = xmmword_100476CA8;
  v6[1] = unk_100476CB8;
  v6[2] = xmmword_100476CC8;
  v6[3] = unk_100476CD8;
  qword_10085D608 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085D608, (void *)&_mh_execute_header);
  qword_10085D628 = 0;
  unk_10085D630 = 0;
  qword_10085D620 = 0;
  v7 = operator new(0x10uLL);
  qword_10085D628 = (uint64_t)(v7 + 1);
  unk_10085D630 = v7 + 1;
  *v7 = xmmword_100476CE8;
  qword_10085D620 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085D620, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1002D4990(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1002D4A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D4B70(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1002D4DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  os_unfair_lock_s *v14;
  void *v15;

  os_unfair_lock_unlock(v14);
  _Unwind_Resume(a1);
}

void sub_1002D4DE8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  double v5;
  double v6;
  NSObject *v7;
  int v8;
  id v9;

  v4 = a3;
  v5 = *(double *)(a1 + 40);
  objc_msgSend(v4, "timestamp");
  if (v5 - v6 <= *(double *)(a1 + 48))
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  }
  else
  {
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#recent-obj-cache,Result too old: %@", (uint8_t *)&v8, 0xCu);
    }
  }

}

void sub_1002D4EC4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

int64_t sub_1002D4EDC(id a1, NINearbyObject *a2, NINearbyObject *a3)
{
  NINearbyObject *v4;
  float v5;
  float v6;
  float v7;
  int64_t v8;

  v4 = a3;
  -[NINearbyObject distance](a2, "distance");
  v6 = v5;
  -[NINearbyObject distance](v4, "distance");
  if (v6 < v7)
    v8 = -1;
  else
    v8 = v6 > v7;

  return v8;
}

void sub_1002D4F30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D50A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1002D513C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "initAccessoryListener");
}

void sub_1002D5358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D56FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1002D57B8(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  int v5;
  void *v6;
  __int16 v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", EAAccessoryKey));
  v4 = qword_10085D638;
  if (os_log_type_enabled((os_log_t)qword_10085D638, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412546;
    v6 = v3;
    v7 = 2112;
    v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "regulatory,acc,connected,accessory,%@,userinfo,%@", (uint8_t *)&v5, 0x16u);
  }
  objc_msgSend(*(id *)(a1 + 40), "accessoryNotify:isAttached:", v3, 1);

}

void sub_1002D58A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D5948(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  int v5;
  void *v6;
  __int16 v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", EAAccessoryKey));
  v4 = qword_10085D638;
  if (os_log_type_enabled((os_log_t)qword_10085D638, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412546;
    v6 = v3;
    v7 = 2112;
    v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "regulatory,acc,disconnected,accessory,%@,userinfo,%@", (uint8_t *)&v5, 0x16u);
  }
  objc_msgSend(*(id *)(a1 + 40), "accessoryNotify:isAttached:", v3, 0);

}

void sub_1002D5A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D5CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002D5F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1002D5FFC(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

unsigned __int8 *sub_1002D60B0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10003AAC4(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10003AF6C(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_1002D6344(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10002A900(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1002D6320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    sub_10003B010((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1002D6344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = v8 + 16;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_100004678(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1002D63D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_10003B010(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D63EC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_10002A5A0(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    sub_10003B010((uint64_t)&v6, v3);
  return v2;
}

void sub_1002D6434()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_10085D638 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

id sub_1002D6474()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  id v145;
  void *v146;
  void *v147;
  id v148;
  id v149;
  id v150;
  id v151;
  _QWORD v152[3];
  uint64_t v153;
  _QWORD v154[2];
  _QWORD v155[6];
  _QWORD v156[3];
  _QWORD v157[4];

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___UWBSessionServerProtocol));
  v1 = objc_alloc((Class)NSSet);
  v3 = objc_opt_class(NSDictionary, v2);
  v5 = objc_opt_class(NSString, v4);
  v150 = objc_msgSend(v1, "initWithObjects:", v3, v5, objc_opt_class(NSNumber, v6), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:");
  v7 = objc_alloc((Class)NSSet);
  v9 = objc_opt_class(NSDictionary, v8);
  v11 = objc_opt_class(NSData, v10);
  v13 = objc_opt_class(NSString, v12);
  v149 = objc_msgSend(v7, "initWithObjects:", v9, v11, v13, objc_opt_class(NSNumber, v14), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:");
  v15 = objc_alloc((Class)NSSet);
  v17 = objc_opt_class(NSDictionary, v16);
  v19 = objc_opt_class(NSString, v18);
  v148 = objc_msgSend(v15, "initWithObjects:", v17, v19, objc_opt_class(NSNumber, v20), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:");
  v21 = objc_alloc((Class)NSMutableSet);
  v23 = objc_opt_class(NIConfiguration, v22);
  v25 = objc_opt_class(NINearbyPeerConfiguration, v24);
  v27 = objc_opt_class(NIAcwgConfiguration, v26);
  v29 = objc_opt_class(NSData, v28);
  v31 = objc_opt_class(NIDiscoveryToken, v30);
  v151 = objc_msgSend(v21, "initWithObjects:", v23, v25, v27, v29, v31, objc_opt_class(NSDictionary, v32), 0);
  v157[0] = objc_opt_class(NIHomeDeviceConfiguration, v33);
  v157[1] = objc_opt_class(NIRegionPredicate, v34);
  v157[2] = objc_opt_class(NSArray, v35);
  v157[3] = objc_opt_class(NSString, v36);
  v147 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v157, 4));
  objc_msgSend(v151, "addObjectsFromArray:");
  v156[0] = objc_opt_class(NICarKeyConfiguration, v37);
  v156[1] = objc_opt_class(NSDictionary, v38);
  v156[2] = objc_opt_class(NSNumber, v39);
  v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v156, 3));
  objc_msgSend(v151, "addObjectsFromArray:");
  v155[0] = objc_opt_class(NINearbyAccessoryConfiguration, v40);
  v155[1] = objc_opt_class(NSUUID, v41);
  v155[2] = objc_opt_class(NSDictionary, v42);
  v155[3] = objc_opt_class(NSNumber, v43);
  v155[4] = objc_opt_class(NSString, v44);
  v155[5] = objc_opt_class(NSData, v45);
  v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v155, 6));
  objc_msgSend(v151, "addObjectsFromArray:");
  v154[0] = objc_opt_class(NIDevicePresenceConfiguration, v46);
  v154[1] = objc_opt_class(NIRegionPredicate, v47);
  v141 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v154, 2));
  objc_msgSend(v151, "addObjectsFromArray:");
  v153 = objc_opt_class(NIRangingAuthConfiguration, v48);
  v143 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v153, 1));
  objc_msgSend(v151, "addObjectsFromArray:");
  v152[0] = objc_opt_class(NIFindingConfiguration, v49);
  v152[1] = objc_opt_class(NIDiscoveryToken, v50);
  v152[2] = objc_opt_class(NSDictionary, v51);
  v144 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v152, 3));
  objc_msgSend(v151, "addObjectsFromArray:");
  v52 = objc_alloc((Class)NSSet);
  v54 = objc_opt_class(_NIWiFiRangingTestConfiguration, v53);
  v56 = objc_opt_class(NSNumber, v55);
  v145 = objc_msgSend(v52, "initWithObjects:", v54, v56, objc_opt_class(NSString, v57), 0);
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v151, "setByAddingObjectsFromSet:"));
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v58, "runWithConfiguration:reply:", 0, 0);

  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIDiscoveryToken, v59), "_addObject:reply:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIDiscoveryToken, v60), "_removeObject:reply:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSData, v61), "processDCKMessage:reply:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSData, v62), "processDCKMessage:reply:", 0, 1);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v63), "processDCKMessage:reply:", 1, 1);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIBluetoothHostTimeSyncResponse, v64), "processBluetoothHostTimeSyncWithType:btcClockTicks:eventCounter:reply:", 0, 1);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v65), "isRangingLimitExceeded:", 1, 1);
  v66 = objc_alloc((Class)NSSet);
  v68 = objc_opt_class(NSDictionary, v67);
  v70 = objc_opt_class(NSString, v69);
  v140 = objc_msgSend(v66, "initWithObjects:", v68, v70, objc_opt_class(NSNumber, v71), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:");
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v72), "_processCarKeyEvent:reply:", 0, 1);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIAcwgM1Msg, v73), "processAcwgM1Msg:withSessionTriggerReason:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIAcwgM3Msg, v74), "processAcwgM3Msg:", 0, 0);
  v75 = objc_alloc((Class)NSSet);
  v77 = objc_opt_class(NIVisionInput, v76);
  v137 = objc_msgSend(v75, "initWithObjects:", v77, objc_opt_class(NSData, v78), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:");
  v79 = objc_alloc((Class)NSSet);
  v138 = objc_msgSend(v79, "initWithObjects:", objc_opt_class(NSError, v80), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:");
  v81 = objc_alloc((Class)NSSet);
  v83 = objc_opt_class(NIBluetoothSample, v82);
  v139 = objc_msgSend(v81, "initWithObjects:", v83, objc_opt_class(NSString, v84), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:");
  v85 = objc_alloc((Class)NSSet);
  v87 = objc_opt_class(NSArray, v86);
  v89 = objc_msgSend(v85, "initWithObjects:", v87, objc_opt_class(NIDiscoveryToken, v88), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v89, "setLocalDeviceCanInteract:withDiscoveryTokens:reply:", 1, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v90), "setLocalDeviceCanInteract:withDiscoveryTokens:reply:", 0, 1);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v89, "setLocalDeviceInteractableDiscoveryTokens:reply:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v91), "setLocalDeviceInteractableDiscoveryTokens:reply:", 0, 1);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v89, "getInteractableDiscoveryTokens:", 0, 1);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v92), "getInteractableDiscoveryTokens:", 1, 1);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v89, "getActivelyInteractingDiscoveryTokens:", 0, 1);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v93), "getActivelyInteractingDiscoveryTokens:", 1, 1);
  v94 = objc_alloc((Class)NSSet);
  v96 = objc_opt_class(NSDictionary, v95);
  v98 = objc_opt_class(NSArray, v97);
  v136 = objc_msgSend(v94, "initWithObjects:", v96, v98, objc_opt_class(NSString, v99), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:");
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v100), "getLocalDevicePrintableState:", 1, 1);
  v101 = objc_alloc((Class)NSSet);
  v103 = objc_opt_class(NSDictionary, v102);
  v105 = objc_opt_class(NIDiscoveryToken, v104);
  v107 = objc_opt_class(NILocation, v106);
  v109 = objc_opt_class(NIHeading, v108);
  v111 = objc_opt_class(NSDate, v110);
  v113 = objc_opt_class(NSData, v112);
  v115 = objc_opt_class(NSString, v114);
  v117 = objc_msgSend(v101, "initWithObjects:", v103, v105, v107, v109, v111, v113, v115, objc_opt_class(NSNumber, v116), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v117, "_processFindingEvent:reply:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v118), "_processFindingEvent:reply:", 0, 1);
  v119 = objc_alloc((Class)NSSet);
  v121 = objc_opt_class(NSDictionary, v120);
  v123 = objc_opt_class(NSString, v122);
  v125 = objc_msgSend(v119, "initWithObjects:", v121, v123, objc_opt_class(NSNumber, v124), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v125, "setLocalDeviceDebugParameters:reply:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v126), "setLocalDeviceDebugParameters:reply:", 0, 1);
  v127 = objc_alloc((Class)NSSet);
  v129 = objc_opt_class(NSDictionary, v128);
  v131 = objc_opt_class(NSString, v130);
  v133 = objc_msgSend(v127, "initWithObjects:", v129, v131, objc_opt_class(NSNumber, v132), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v133, "_processSystemEvent:reply:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v134), "_processSystemEvent:reply:", 0, 1);

  return v0;
}

void sub_1002D70D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33)
{
  void *v33;

  _Unwind_Resume(a1);
}

id sub_1002D7274()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___UWBSessionDelegateProxyProtocol));
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIDiscoveryToken, v1), "didUpdateLocalDiscoveryToken:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v2), "uwbSessionDidInvalidateWithError:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSError, v3), "uwbSessionDidFailWithError:", 0, 0);
  v4 = objc_alloc((Class)NSSet);
  v6 = objc_opt_class(NSArray, v5);
  v8 = objc_opt_class(NINearbyObject, v7);
  v10 = objc_opt_class(NIDiscoveryToken, v9);
  v12 = objc_opt_class(NSData, v11);
  v14 = objc_opt_class(NSString, v13);
  v16 = objc_msgSend(v4, "initWithObjects:", v6, v8, v10, v12, v14, objc_opt_class(NSUUID, v15), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v16, "didUpdateNearbyObjects:", 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v16, "didRemoveNearbyObjects:withReason:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NINearbyObject, v17), "didDiscoverNearbyObject:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NINearbyObject, v18), "object:didUpdateRegion:previousRegion:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIRegionPredicate, v19), "object:didUpdateRegion:previousRegion:", 1, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIRegionPredicate, v20), "object:didUpdateRegion:previousRegion:", 2, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSData, v21), "relayDCKMessage:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIAcwgM2Msg, v22), "didProcessAcwgM1MsgWithResponse:error:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIAcwgM4Msg, v23), "didProcessAcwgM3MsgWithResponse:error:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIAcwgRangingSessionResumeResponseMsg, v24), "didProcessAcwgRangingSessionResumeRequestMsgWithResponse:error:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NINearbyObject, v25), "didReceiveRangingAuthRecommendation:forObject:", 1, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NIAlgorithmConvergenceState, v26), "didUpdateAlgorithmState:forObject:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NINearbyObject, v27), "didUpdateAlgorithmState:forObject:", 1, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NISystemState, v28), "systemDidUpdateState:", 0, 0);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(NSString, v29), "systemDidUpdateResourceUsageLimitExceeded:forSessionConfigurationTypeWithName:", 1, 0);

  return v0;
}

void sub_1002D75F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *sub_1002D7610(unint64_t a1)
{
  if (a1 > 7)
    return CFSTR("AirplaneModeActive");
  else
    return off_100814698[a1];
}

const __CFString *sub_1002D7634(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Timeout");
  if (a1 == 1)
    v1 = CFSTR("PeerEnded");
  if (a1 == 2)
    return CFSTR("LocalForceRemoved");
  else
    return v1;
}

_QWORD *sub_1002D7660@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100814A88)[a1]);
}

_QWORD *sub_1002D7674@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100814AE0)[a1]);
}

_QWORD *sub_1002D7688@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100814B28)[a1]);
}

_QWORD *sub_1002D769C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100814B48)[a1]);
}

void sub_1002D76B0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];

  v5 = a2;
  *(_QWORD *)a1 = off_1008146E8;
  *(_QWORD *)(a1 + 8) = off_1008147B0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)sub_100004784() + 144);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = dispatch_queue_create("com.apple.nearbyd.regulatory", 0);
  sub_100297D2C(a1 + 48);
  *(_BYTE *)(a1 + 272) = 0;
  v6 = *(void **)(a1 + 40);
  v9[0] = off_100814908;
  v9[1] = a1;
  v9[3] = v9;
  v8[0] = off_100814988;
  v8[1] = a1;
  v8[3] = v8;
  v7[0] = off_100814A08;
  v7[1] = a1;
  v7[3] = v7;
  sub_1001D4C08((_DWORD *)(a1 + 280), v6);
}

void sub_1002D79FC(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  sub_1001D4E2C(v4);
  sub_1002D7E3C(v3);

  _Unwind_Resume(a1);
}

BOOL sub_1002D7B20(uint64_t a1)
{
  return sub_1002D7B28(*(_QWORD *)(a1 + 32));
}

BOOL sub_1002D7B28(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;
  uint8_t v6[16];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  if (*(_BYTE *)(a1 + 272))
    return 1;
  if (MKBDeviceUnlockedSinceBoot(v2) != 1)
    return *(_BYTE *)(a1 + 272) != 0;
  v4 = qword_10085D640;
  if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#reg-prov,regulatory provider processing device unlocked since boot", v6, 2u);
  }
  v5 = sub_100007824();
  sub_1001D4E30(a1 + 280);
  sub_10038D4EC((uint64_t)v5);
  sub_1001D83B4(a1 + 280);
  result = 1;
  *(_BYTE *)(a1 + 272) = 1;
  return result;
}

char *sub_1002D7BF4(uint64_t a1)
{
  NSMutableArray *v1;
  void *v2;
  char *v3;

  v1 = sub_1002D7C48(*(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = sub_10002D668(CFSTR("PRRegulatoryProvider"), v2);

  return v3;
}

void sub_1002D7C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSMutableArray *sub_1002D7C48(uint64_t a1)
{
  NSMutableArray *v2;
  void *v3;
  NSMutableArray *v4;
  void *v5;
  NSMutableArray *v6;
  NSMutableArray *v7;
  void *v8;
  NSMutableArray *v9;
  void *v10;
  _QWORD v12[4];
  NSMutableArray *v13;
  _QWORD v14[4];
  NSMutableArray *v15;
  _QWORD v16[4];
  NSMutableArray *v17;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  v2 = objc_opt_new(NSMutableArray);
  v3 = objc_autoreleasePoolPush();
  -[NSMutableArray addObject:](v2, "addObject:", CFSTR("GeoMonitor"));
  v4 = sub_1001D89E8(a1 + 280);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1002DA498;
  v16[3] = &unk_10080AD38;
  v6 = v2;
  v17 = v6;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v16);
  -[NSMutableArray addObject:](v6, "addObject:", CFSTR("Settings"));
  v7 = sub_10029A0D4(a1 + 48);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002DA500;
  v14[3] = &unk_10080AD38;
  v9 = v6;
  v15 = v9;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", v14);
  if (*(_QWORD *)(a1 + 2160))
  {
    -[NSMutableArray addObject:](v9, "addObject:", CFSTR("Narrowband SAR"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 2160), "printableStateOnQueue"));

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1002DA568;
    v12[3] = &unk_10080AD38;
    v13 = v9;
    objc_msgSend(v10, "enumerateObjectsUsingBlock:", v12);

  }
  else
  {
    v10 = v8;
  }

  objc_autoreleasePoolPop(v3);
  return v9;
}

void sub_1002D7DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

uint64_t sub_1002D7E3C(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 152));
  sub_10003E3F0(a1 + 128, *(_QWORD **)(a1 + 136));
  sub_100144C1C(a1 + 104, *(_QWORD **)(a1 + 112));
  sub_10003E3F0(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_100144C1C(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1002D7EA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1008146E8;
  *(_QWORD *)(a1 + 8) = off_1008147B0;

  sub_1001D4E2C(a1 + 280);
  std::mutex::~mutex((std::mutex *)(a1 + 200));
  sub_10003E3F0(a1 + 176, *(_QWORD **)(a1 + 184));
  sub_100144C1C(a1 + 152, *(_QWORD **)(a1 + 160));
  sub_10003E3F0(a1 + 128, *(_QWORD **)(a1 + 136));
  sub_100144C1C(a1 + 104, *(_QWORD **)(a1 + 112));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));

  return a1;
}

uint64_t sub_1002D7F5C(uint64_t a1)
{
  return sub_1002D7EA8(a1 - 8);
}

void sub_1002D7F64(uint64_t a1)
{
  sub_1002D7EA8(a1);
  operator delete();
}

void sub_1002D7F88(uint64_t a1)
{
  sub_1002D7EA8(a1 - 8);
  operator delete();
}

id sub_1002D7FB0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  id result;
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD v15[5];
  uint8_t buf[4];
  unsigned int v17;

  v2 = a1 + 280;
  sub_1001D4E38(a1 + 280);
  sub_1002D822C((_QWORD *)a1);
  v3 = *(void **)(a1 + 2144);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1002D8370;
  v15[3] = &unk_100814828;
  v15[4] = a1;
  objc_msgSend(v3, "setAirplaneModeChangedHandler:", v15);
  v4 = *(void **)(a1 + 2152);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002D84F0;
  v14[3] = &unk_100814848;
  v14[4] = a1;
  objc_msgSend(v4, "setStateChangedHandler:", v14);
  v5 = *(void **)(a1 + 2160);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002D86C4;
  v13[3] = &unk_100814868;
  v13[4] = a1;
  objc_msgSend(v5, "setStateChangeHandler:", v13);
  if (!sub_100360DCC(*(_DWORD *)(a1 + 24)))
  {
    v8 = qword_10085D640;
    if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#reg-prov,fGeoMonitor startMonitoring,skipped,device does not support UWB.", buf, 2u);
    }
    goto LABEL_8;
  }
  v6 = sub_1001D52C4(v2);
  v7 = qword_10085D640;
  if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#reg-prov,fGeoMonitor startMonitoring completed, status, %d", buf, 8u);
  }
  if (v6)
LABEL_8:
    v6 = objc_msgSend(*(id *)(a1 + 2144), "startMonitoring");
  v9 = qword_10085D640;
  if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#reg-prov,fSystemSettingsMonitor startMonitoring done, status, %d", buf, 8u);
  }
  if (v6)
    v6 = objc_msgSend(*(id *)(a1 + 2152), "startMonitoring");
  v10 = qword_10085D640;
  if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#reg-prov,fAttachedAccessoryMonitor startMonitoring done, status, %d", buf, 8u);
  }
  v11 = *(_QWORD *)(a1 + 2160);
  if (v11)
    result = 0;
  else
    result = (id)v6;
  if (v11)
  {
    if (((v6 ^ 1) & 1) == 0)
      return objc_msgSend(*(id *)(a1 + 2160), "startMonitoring");
  }
  return result;
}

_QWORD *sub_1002D822C(_QWORD *result)
{
  _QWORD *v1;
  PRSettingsObserver *v2;
  void *v3;
  PRSettingsObserver *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  _QWORD v10[5];
  _QWORD v11[5];

  if (!result[271])
  {
    v1 = result;
    v2 = [PRSettingsObserver alloc];
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](PRGlobalDebugSettings, "sharedSettings"));
    v4 = -[PRSettingsObserver initWithSettings:queue:](v2, "initWithSettings:queue:", v3, v1[5]);
    v5 = (void *)v1[271];
    v1[271] = v4;

    v6 = (void *)v1[271];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1002D9A84;
    v11[3] = &unk_10080AFF0;
    v11[4] = v1;
    objc_msgSend(v6, "startObserving:observeImmediately:callback:", PRDebugConfigArgMcc, 0, v11);
    v7 = (void *)v1[271];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1002D9C74;
    v10[3] = &unk_10080AFF0;
    v10[4] = v1;
    objc_msgSend(v7, "startObserving:observeImmediately:callback:", PRDebugConfigArgAccessoryState, 0, v10);
    v8 = (void *)v1[271];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1002D9DF0;
    v9[3] = &unk_10080AFF0;
    v9[4] = v1;
    return objc_msgSend(v8, "startObserving:observeImmediately:callback:", PRDebugConfigArgIsoCountry, 0, v9);
  }
  return result;
}

void sub_1002D8360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D8370(uint64_t a1, uint64_t a2)
{
  sub_1002D8378(*(_QWORD *)(a1 + 32), a2);
}

void sub_1002D8378(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  NSObject *v5;
  NSObject *v6;
  const __CFString *v7;
  void *v8;
  _BOOL4 v9;
  int v10;
  int v11;
  int v12;
  void *v13;

  v4 = sub_100360DCC(*(_DWORD *)(a1 + 24));
  v5 = qword_10085D640;
  if (v4)
  {
    v6 = (id)qword_10085D640;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = sub_1002A2C8C(a2);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v12 = 138412290;
      v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#reg-prov,Airplane Mode changed: %@.", (uint8_t *)&v12, 0xCu);

    }
    v9 = a2 == 1;
    v10 = sub_100298AF0(a1 + 48, v9);
    if (v9)
      v11 = 1;
    else
      v11 = 2;
    sub_1001D869C(a1 + 280, v11);
    if ((v10 & 1) != 0)
      sub_1002D8998(a1, 1u, 1);
    if ((v10 & 0x10000) != 0)
      sub_1002D8B6C(a1, 1u, 1);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#reg-prov,onAirplaneModeStateChange,exited early,device does not support UWB.", (uint8_t *)&v12, 2u);
  }
}

void sub_1002D84D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D84F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  sub_1002D84F8(*(_QWORD *)(a1 + 32), a2, a3, a4);
}

void sub_1002D84F8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  const char *v9;
  void *p_p;
  void *v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  void *__p;
  char v16;
  int v17;
  char v18;
  __int16 v19;
  char v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  void *v24;

  v8 = (id)qword_10085D640;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003610EC(a4);
    v9 = "detached";
    if (a2)
      v9 = "attached";
    if (v20 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    v22 = v9;
    v23 = 2080;
    v24 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#reg-prov,accessory:%s,type:%s", buf, 0x16u);
    if (v20 < 0)
      operator delete(__p);
  }

  v11 = sub_100004784();
  if ((sub_1003956C8((uint64_t)v11) & 1) != 0)
  {
    if (!a3)
    {
      v12 = sub_1002989B8(a1 + 48, a2, a4);
      if (a2)
        v13 = 4;
      else
        v13 = 5;
      LODWORD(__p) = 2;
      HIDWORD(__p) = v13;
      v16 = BYTE1(v12) & 1;
      v17 = a4;
      v18 = 1;
      v19 = 0;
      sub_1002D8D4C(a1, (uint64_t)&__p);
    }
  }
  else
  {
    v14 = qword_10085D640;
    if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#reg-prov,Ignore accessory event", (uint8_t *)&__p, 2u);
    }
  }
}

void sub_1002D86AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D86C4(uint64_t a1, int a2)
{
  sub_1002D86CC(*(_QWORD *)(a1 + 32), a2);
}

void sub_1002D86CC(uint64_t a1, int a2)
{
  NSObject *v4;
  __int128 v5;
  char v6;
  char v7;
  char v8;

  v4 = qword_10085D640;
  if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v5) = 67109120;
    DWORD1(v5) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#reg-prov,onNarrowbandSARChange,index,%d", (uint8_t *)&v5, 8u);
  }
  *(_QWORD *)&v5 = 0x800000005;
  BYTE8(v5) = 1;
  BYTE12(v5) = 0;
  v6 = 0;
  v7 = a2;
  v8 = 1;
  sub_1002D88EC(a1, &v5);
}

id sub_1002D87A4(uint64_t a1)
{
  return sub_1002D7FB0(a1 - 8);
}

uint64_t sub_1002D87AC(id *a1)
{
  objc_msgSend(a1[269], "setStateChangedHandler:", 0);
  objc_msgSend(a1[268], "setAirplaneModeChangedHandler:", 0);
  objc_msgSend(a1[270], "setStateChangeHandler:", 0);
  return 1;
}

uint64_t sub_1002D87F0(id *a1)
{
  objc_msgSend(a1[268], "setStateChangedHandler:", 0);
  objc_msgSend(a1[267], "setAirplaneModeChangedHandler:", 0);
  objc_msgSend(a1[269], "setStateChangeHandler:", 0);
  return 1;
}

void sub_1002D8834(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  if (sub_100360DCC(*(_DWORD *)(a1 + 24)))
  {
    v2 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002D88E4;
    block[3] = &unk_1007FA668;
    block[4] = a1;
    dispatch_async(v2, block);
  }
  else
  {
    v3 = qword_10085D640;
    if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#reg-prov,onFirstUnlock,exited early,device does not support UWB.", buf, 2u);
    }
  }
}

BOOL sub_1002D88E4(uint64_t a1)
{
  return sub_1002D7B28(*(_QWORD *)(a1 + 32));
}

void sub_1002D88EC(uint64_t a1, __int128 *a2)
{
  NSObject *v2;
  _QWORD v3[5];
  __int128 v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = *(NSObject **)(a1 + 32);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1002D895C;
    v3[3] = &unk_100814888;
    v3[4] = a1;
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
    dispatch_async(v2, v3);
  }
}

void sub_1002D895C(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  v2 = *(_OWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 56);
  sub_10016AB20(v1, (uint64_t)&v2);
}

void sub_1002D8998(uint64_t a1, unsigned int a2, int a3)
{
  _BOOL4 v6;
  NSObject *v7;
  char *v8;
  void **v9;
  const char *v10;
  const char *v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;

  v6 = sub_1002D8B24(a1);
  v7 = (id)qword_10085D640;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 8)
      v8 = "Unknown";
    else
      v8 = (&off_100814B68)[a2];
    sub_10000BF04(__p, v8);
    v9 = (void **)__p[0];
    v10 = "UWBDisallowed";
    if (v13 >= 0)
      v9 = __p;
    if (v6)
      v10 = "UWBAllowed";
    *(_DWORD *)buf = 136315650;
    v15 = v9;
    v16 = 2080;
    v17 = v10;
    if (a3)
      v11 = "yes";
    else
      v11 = "no";
    v18 = 2080;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#reg-prov,relayUwbState,%s,allowed,%s,actionRequired,%s", buf, 0x20u);
    if (v13 < 0)
      operator delete(__p[0]);
  }

  *(_DWORD *)buf = v6;
  LODWORD(v15) = a2;
  BYTE4(v15) = a3;
  LOBYTE(v16) = 0;
  BYTE2(v17) = 0;
  HIWORD(v17) = 0;
  sub_1002D88EC(a1, (__int128 *)buf);
}

void sub_1002D8B0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1002D8B24(uint64_t a1)
{
  int v1;
  _BYTE v3[32];
  void *__p;
  char v5;

  sub_100299EF4(a1 + 48, (uint64_t)v3);
  v1 = v3[0];
  if (v5 < 0)
    operator delete(__p);
  return v1 != 0;
}

void sub_1002D8B6C(uint64_t a1, unsigned int a2, int a3)
{
  _BOOL4 v6;
  NSObject *v7;
  char *v8;
  void **v9;
  const char *v10;
  const char *v11;
  int v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;

  v6 = sub_1002D8D04(a1);
  v7 = (id)qword_10085D640;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 8)
      v8 = "Unknown";
    else
      v8 = (&off_100814B68)[a2];
    sub_10000BF04(__p, v8);
    v9 = (void **)__p[0];
    v10 = "NBDisallowed";
    if (v14 >= 0)
      v9 = __p;
    if (v6)
      v10 = "NBAllowed";
    *(_DWORD *)buf = 136315650;
    v16 = v9;
    v17 = 2080;
    v18 = v10;
    if (a3)
      v11 = "yes";
    else
      v11 = "no";
    v19 = 2080;
    v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#reg-prov,relayNBState,%s,allowed,%s,actionRequired,%s", buf, 0x20u);
    if (v14 < 0)
      operator delete(__p[0]);
  }

  if (v6)
    v12 = 4;
  else
    v12 = 3;
  *(_DWORD *)buf = v12;
  LODWORD(v16) = a2;
  BYTE4(v16) = a3;
  LOBYTE(v17) = 0;
  BYTE2(v18) = 0;
  HIWORD(v18) = 0;
  sub_1002D88EC(a1, (__int128 *)buf);
}

void sub_1002D8CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1002D8D04(uint64_t a1)
{
  int v1;
  _BYTE v3[32];
  void *__p;
  char v5;

  sub_100299EF4(a1 + 48, (uint64_t)v3);
  v1 = v3[1];
  if (v5 < 0)
    operator delete(__p);
  return v1 != 0;
}

void sub_1002D8D4C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  void **v7;
  void *v8;
  const char *v9;
  void *__p[2];
  char v11;
  _BYTE v12[32];
  void *v13;
  char v14;
  unsigned __int16 v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;

  sub_100299EF4(a1 + 48, (uint64_t)v12);
  v4 = (id)qword_10085D640;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(int *)(a2 + 4);
    if (v5 > 8)
      v6 = "Unknown";
    else
      v6 = (&off_100814B68)[v5];
    sub_10000BF04(__p, v6);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    v8 = &v13;
    if (v14 < 0)
      v8 = v13;
    if (*(_BYTE *)(a2 + 8))
      v9 = "yes";
    else
      v9 = "no";
    *(_DWORD *)buf = 136315906;
    v17 = v7;
    v18 = 2080;
    v19 = v8;
    v20 = 1024;
    v21 = v15;
    v22 = 2080;
    v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#reg-prov,relaySettingsChange,%s,country,%s,flags,%d,actionRequired,%s", buf, 0x26u);
    if (v11 < 0)
      operator delete(__p[0]);
  }

  sub_1002D88EC(a1, (__int128 *)a2);
  if (v14 < 0)
    operator delete(v13);
}

void sub_1002D8ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002D8EF4(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  void *v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[32];
  __int128 v8;
  uint64_t v9;

  v4 = sub_100007824();
  sub_100299EF4(a1 + 48, (uint64_t)v7);
  if (SHIBYTE(v9) < 0)
  {
    sub_100004678(__p, (void *)v8, *((unint64_t *)&v8 + 1));
  }
  else
  {
    *(_OWORD *)__p = v8;
    v6 = v9;
  }
  sub_100390FAC((uint64_t)v4, (uint64_t)__p, a2);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)v8);
}

void sub_1002D8F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002D8FCC(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  sub_1002D8EF4(a1 - 8, a2);
}

void sub_1002D8FD4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[32];
  __int128 v8;
  uint64_t v9;

  v4 = sub_100007824();
  sub_100299EF4(a1 + 48, (uint64_t)v7);
  if (SHIBYTE(v9) < 0)
  {
    sub_100004678(__p, (void *)v8, *((unint64_t *)&v8 + 1));
  }
  else
  {
    *(_OWORD *)__p = v8;
    v6 = v9;
  }
  sub_100391360(v4, (uint64_t)__p, a2);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)v8);
}

void sub_1002D9078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002D90AC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1002D8FD4(a1 - 8, a2);
}

void sub_1002D90B4(uint64_t a1, char *a2)
{
  NSObject *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  std::string __p;
  _BYTE buf[12];
  char v14;
  char v15;
  __int16 v16;

  v4 = qword_10085D640;
  if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#reg-prov,onCountryChange", buf, 2u);
  }
  if ((a2[23] & 0x80000000) == 0)
  {
    if (a2[23])
    {
      __p = *(std::string *)a2;
      goto LABEL_8;
    }
LABEL_14:
    v6 = sub_1002997FC(a1 + 48);
    v11 = qword_10085D640;
    if (!os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
      goto LABEL_17;
    *(_WORD *)buf = 0;
    v8 = "#reg-prov,onCountryChange callback: <empty isoCode>.";
    v9 = v11;
    v10 = 2;
    goto LABEL_16;
  }
  v5 = *((_QWORD *)a2 + 1);
  if (!v5)
    goto LABEL_14;
  sub_100004678(&__p, *(void **)a2, v5);
LABEL_8:
  v6 = sub_100298FAC(a1 + 48, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = qword_10085D640;
  if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] < 0)
      a2 = *(char **)a2;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = a2;
    v8 = "#reg-prov,onCountryChange callback: %s.";
    v9 = v7;
    v10 = 12;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
  }
LABEL_17:
  if ((_BYTE)v6)
    sub_1002D8998(a1, 3u, 1);
  if ((v6 & 0xFF00) != 0)
  {
    *(_QWORD *)buf = 0x300000002;
    buf[8] = 1;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    sub_1002D8D4C(a1, (uint64_t)buf);
  }
  if ((v6 & 0xFF0000) != 0)
    sub_1002D8B6C(a1, 3u, 1);
  if (HIBYTE(v6))
  {
    *(_QWORD *)buf = 0x300000005;
    buf[8] = 1;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    sub_1002D8D4C(a1, (uint64_t)buf);
  }
}

void sub_1002D92D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002D92FC(uint64_t a1, int a2)
{
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  void **v14;

  v4 = sub_100298D54(a1 + 48, a2);
  if ((_BYTE)v4)
  {
    v5 = (id)qword_10085D640;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 79) < 0)
      {
        sub_100004678(__p, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 56);
        v10 = *(_QWORD *)(a1 + 72);
      }
      v6 = __p;
      if (v10 < 0)
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      v12 = a2;
      v13 = 2080;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#reg-prov,onRestrictedRegionChanged,%d,isoCountry,%s,uwbChannelSettingChanged", buf, 0x12u);
      if (SHIBYTE(v10) < 0)
        operator delete(__p[0]);
    }

    sub_1002D8998(a1, 7u, 1);
  }
  if ((v4 & 0xFF0000) != 0)
  {
    v7 = (id)qword_10085D640;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 79) < 0)
      {
        sub_100004678(__p, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 56);
        v10 = *(_QWORD *)(a1 + 72);
      }
      v8 = __p;
      if (v10 < 0)
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      v12 = a2;
      v13 = 2080;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#reg-prov,onRestrictedRegionChanged,%d,isoCountry,%s,isNBChannelSettingChanged", buf, 0x12u);
      if (SHIBYTE(v10) < 0)
        operator delete(__p[0]);
    }

    sub_1002D8B6C(a1, 7u, 1);
  }
}

void sub_1002D94F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002D9514(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  NSObject *v6;
  uint64_t v8;
  void *__p;
  char v10;
  unsigned __int8 v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringForKey:", CFSTR("RegulatoryGroup")));
  v4 = v3;
  if (v3)
  {
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("US")) & 1) != 0)
    {
      v5 = 0;
      goto LABEL_18;
    }
    if ((objc_msgSend(v4, "isEqualToString:", CFSTR("EU")) & 1) != 0)
    {
      v5 = 1;
      goto LABEL_18;
    }
    if ((objc_msgSend(v4, "isEqualToString:", CFSTR("TW")) & 1) != 0)
    {
      v5 = 2;
      goto LABEL_18;
    }
    if ((objc_msgSend(v4, "isEqualToString:", CFSTR("CN")) & 1) != 0)
    {
      v5 = 3;
      goto LABEL_18;
    }
    if ((objc_msgSend(v4, "isEqualToString:", CFSTR("JP")) & 1) != 0)
    {
      v5 = 4;
      goto LABEL_18;
    }
    if ((objc_msgSend(v4, "isEqualToString:", CFSTR("KR")) & 1) != 0)
    {
      v5 = 5;
      goto LABEL_18;
    }
    if ((objc_msgSend(v4, "isEqualToString:", CFSTR("RU")) & 1) != 0)
    {
      v5 = 6;
      goto LABEL_18;
    }
    if (objc_msgSend(v4, "isEqualToString:", CFSTR("AR")))
    {
      v5 = 7;
LABEL_18:
      v6 = qword_10085D640;
      if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEBUG))
        sub_1003E8980((uint64_t)v4, v6);
      goto LABEL_24;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEBUG))
    sub_1003E8948();
  sub_100299EF4(a1 + 48, (uint64_t)&v8);
  v5 = v11;
  if (v10 < 0)
    operator delete(__p);
LABEL_24:

  return v5 | 0x100u;
}

void sub_1002D96C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002D96E0(uint64_t a1)
{
  return sub_1002D9514(a1 - 8);
}

uint64_t sub_1002D96E8(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002D9778;
  v4[3] = &unk_10080AC10;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

BOOL sub_1002D9778(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 40);
  sub_1002D7B28(v2);
  result = sub_1002D8B24(v2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1002D97B4(uint64_t a1)
{
  return sub_1002D96E8(a1 - 8);
}

uint64_t sub_1002D97BC(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002D984C;
  v4[3] = &unk_10080AC10;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

BOOL sub_1002D984C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 40);
  sub_1002D7B28(v2);
  result = sub_1002D8D04(v2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1002D9888(uint64_t a1)
{
  return sub_1002D97BC(a1 - 8);
}

uint64_t *sub_1002D9890(uint64_t a1)
{
  void *v2;
  uint64_t *v3;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[32];
  __int128 v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned int v11;

  v2 = sub_100007824();
  sub_100299EF4(a1 + 48, (uint64_t)v7);
  if (SHIBYTE(v9) < 0)
  {
    sub_100004678(__p, (void *)v8, *((unint64_t *)&v8 + 1));
  }
  else
  {
    *(_OWORD *)__p = v8;
    v6 = v9;
  }
  v3 = sub_1003905BC((uint64_t)v2, (uint64_t *)__p, v10, v11);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)v8);
  return v3;
}

void sub_1002D9934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1002D9968(uint64_t a1)
{
  return sub_1002D9890(a1 - 8);
}

uint64_t sub_1002D9970()
{
  return 1;
}

uint64_t sub_1002D9978(uint64_t a1, _DWORD *a2)
{
  if (!*a2 && os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_ERROR))
    sub_1003E89F4();
  return 0;
}

void sub_1002D99C0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  if (sub_100360DCC(*(_DWORD *)(a1 + 24)))
  {
    v2 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002D9A70;
    block[3] = &unk_1007FA668;
    block[4] = a1;
    dispatch_async(v2, block);
  }
  else
  {
    v3 = qword_10085D640;
    if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#reg-prov,refreshRegulatoryInformation,exited early,device does not support UWB.", buf, 2u);
    }
  }
}

uint64_t sub_1002D9A70(uint64_t a1)
{
  return sub_1001D83B4(*(_QWORD *)(a1 + 32) + 280);
}

void sub_1002D9A7C(uint64_t a1)
{
  sub_1002D99C0(a1 - 8);
}

void sub_1002D9A84(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  std::string __p;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](PRGlobalDebugSettings, "sharedSettings"));
  v7 = objc_msgSend(v5, "objectForKey:ofClass:", v3, objc_opt_class(NSString, v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v9 = (id)qword_10085D640;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)objc_msgSend(objc_retainAutorelease(v8), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#reg-prov,test,received mcc: %s", (uint8_t *)&__p, 0xCu);
  }

  if (sub_100360DCC(*(_DWORD *)(v4 + 24)))
  {
    sub_10000BF04(&__p, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
    sub_1001D78C0((int *)(v4 + 280), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = qword_10085D640;
    if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#reg-prov,test,received mcc,skipped,device does not support UWB", (uint8_t *)&__p, 2u);
    }
  }

}

void sub_1002D9C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002D9C74(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *p_p;
  void *__p;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  void *v15;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](PRGlobalDebugSettings, "sharedSettings"));
  v6 = objc_msgSend(v5, "integerForKey:", v3);

  v7 = sub_1003611B4((uint64_t)v6);
  v8 = (id)qword_10085D640;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003610EC(v7);
    if (v11 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 67109378;
    v13 = (int)v6;
    v14 = 2080;
    v15 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#reg-prov,test,received accessoryState %d, accessoryType %s", buf, 0x12u);
    if (v11 < 0)
      operator delete(__p);
  }

  sub_1002D84F8(v4, v7 != 0, 0, v7);
}

void sub_1002D9DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D9DF0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  id v14;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[PRGlobalDebugSettings sharedSettings](PRGlobalDebugSettings, "sharedSettings"));
  v7 = objc_msgSend(v5, "objectForKey:ofClass:", v3, objc_opt_class(NSString, v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v9 = (id)qword_10085D640;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v14 = objc_msgSend(objc_retainAutorelease(v8), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#reg-prov,test,received isoCountry %s", buf, 0xCu);
  }

  if (sub_100360DCC(*(_DWORD *)(v4 + 24)))
  {
    sub_10000BF04(__p, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
    sub_1002D90B4(v4, (char *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = qword_10085D640;
    if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#reg-prov,test,received isoCountry,skipped,device does not support UWB", buf, 2u);
    }
  }

}

void sub_1002D9F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002D9FD4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  void *__p[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *__dst[2];
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned int v21;

  sub_100299EF4(a1 + 48, (uint64_t)v15);
  if (v15[4])
  {
    v3 = 0;
    goto LABEL_8;
  }
  if (!v17)
  {
    if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_FAULT))
      sub_1003E8A20();
    v8 = 587;
LABEL_32:
    __assert_rtn("toRegulatoryState", "PRRegulatoryProvider.mm", v8, "false");
  }
  if ((v16 - 2) < 2)
  {
    v3 = 2;
    goto LABEL_8;
  }
  if (!v16)
  {
    if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_FAULT))
      sub_1003E8A4C();
    v8 = 599;
    goto LABEL_32;
  }
  v3 = 1;
LABEL_8:
  v4 = sub_100007824();
  if (SHIBYTE(v19) < 0)
  {
    sub_100004678(__dst, (void *)v18, *((unint64_t *)&v18 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v18;
    v14 = v19;
  }
  v5 = sub_1003905BC((uint64_t)v4, (uint64_t *)__dst, v20, v21);
  if (SHIBYTE(v19) < 0)
  {
    sub_100004678(v11, (void *)v18, *((unint64_t *)&v18 + 1));
  }
  else
  {
    *(_OWORD *)v11 = v18;
    v12 = v19;
  }
  v6 = sub_100390914(v4, (uint64_t *)v11, v20, v21);
  if (SHIBYTE(v19) < 0)
  {
    sub_100004678(__p, (void *)v18, *((unint64_t *)&v18 + 1));
  }
  else
  {
    *(_OWORD *)__p = v18;
    v10 = v19;
  }
  v7 = sub_100390C60(v4, (uint64_t *)__p, v20, v21);
  sub_1002DA5D0(a2, v3, (uint64_t)v5, (uint64_t)v6, (uint64_t)v7);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
}

void sub_1002DA1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_1002DA244(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002D9FD4(a1 - 8, a2);
}

uint64_t sub_1002DA24C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t v8[16];

  if (sub_100360EFC(*(_DWORD *)(a1 + 24)) && sub_100360DCC(*(_DWORD *)(a1 + 24)))
  {
    v4 = sub_1001D7D64((int *)(a1 + 280), (uint64_t)a2);
    v5 = qword_10085D640;
    if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEBUG))
      sub_1003E8A78(a2, v4, v5);
  }
  else
  {
    v6 = qword_10085D640;
    v4 = 0;
    if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#reg-prov,injectIsoCode,exited early,device is not a UWB watch.", v8, 2u);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_1002DA31C(uint64_t a1, uint64_t *a2)
{
  return sub_1002DA24C(a1 - 8, a2);
}

id sub_1002DA324(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a1 + 2160);
  if (v2)
    return objc_msgSend(v2, "injectNarrowbandSARState:", a2);
  if (os_log_type_enabled((os_log_t)qword_10085D640, OS_LOG_TYPE_ERROR))
    sub_1003E8B10();
  return 0;
}

id sub_1002DA37C(uint64_t a1, uint64_t a2)
{
  return sub_1002DA324(a1 - 8, a2);
}

id sub_1002DA384(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 2160), "clearSARStateOverride");
}

id sub_1002DA38C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 2152), "clearSARStateOverride");
}

id sub_1002DA394(uint64_t a1)
{
  NSObject *v1;
  id v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = sub_1002DA448;
  v9 = sub_1002DA458;
  v10 = 0;
  v1 = *(NSObject **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002DA460;
  v4[3] = &unk_10080AC10;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

uint64_t sub_1002DA448(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002DA458(uint64_t a1)
{

}

void sub_1002DA460(uint64_t a1)
{
  NSMutableArray *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = sub_1002D7C48(*(_QWORD *)(a1 + 40));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1002DA498(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %@"), a2));
  objc_msgSend(v2, "addObject:");

}

void sub_1002DA4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002DA500(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %@"), a2));
  objc_msgSend(v2, "addObject:");

}

void sub_1002DA554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002DA568(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %@"), a2));
  objc_msgSend(v2, "addObject:");

}

void sub_1002DA5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1002DA5D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1002106A0((_QWORD *)(a1 + 8), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_100210718((_QWORD *)(a1 + 32), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_100210790((_QWORD *)(a1 + 56), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
  return a1;
}

void sub_1002DA668(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DA6A0()
{
  operator delete();
}

_QWORD *sub_1002DA6B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100814908;
  result[1] = v3;
  return result;
}

uint64_t sub_1002DA6E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100814908;
  a2[1] = v2;
  return result;
}

void sub_1002DA704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100004678(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v4 = *(_QWORD *)(a2 + 16);
  }
  sub_1002D90B4(v2, (char *)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_1002DA770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DA78C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002DA7C8()
{
}

void sub_1002DA7D8()
{
  operator delete();
}

_QWORD *sub_1002DA7EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100814988;
  result[1] = v3;
  return result;
}

uint64_t sub_1002DA820(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100814988;
  a2[1] = v2;
  return result;
}

void sub_1002DA83C(uint64_t a1, unsigned __int8 *a2)
{
  sub_1002D92FC(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_1002DA848(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002DA884()
{
}

void sub_1002DA894()
{
  operator delete();
}

_QWORD *sub_1002DA8A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100814A08;
  result[1] = v3;
  return result;
}

uint64_t sub_1002DA8DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100814A08;
  a2[1] = v2;
  return result;
}

void sub_1002DA8F8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _OWORD *v4;
  NSObject *v5;
  void **v6;
  void *v7;
  size_t v8;
  size_t v9;
  void **v10;
  void *v11;
  char *v12;
  size_t v13;
  void **v14;
  char *v15;
  size_t v16;
  void **v17;
  char *v18;
  size_t v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  void *__s1[2];
  uint64_t v24;
  uint8_t buf[4];
  void **v26;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (_OWORD *)(v3 + 56);
  if (*(char *)(v3 + 79) < 0)
  {
    sub_100004678(__s1, *(void **)(v3 + 56), *(_QWORD *)(v3 + 64));
  }
  else
  {
    *(_OWORD *)__s1 = *v4;
    v24 = *(_QWORD *)(v3 + 72);
  }
  v5 = (id)qword_10085D640;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(v3 + 79) < 0)
    {
      sub_100004678(__p, *(void **)(v3 + 56), *(_QWORD *)(v3 + 64));
    }
    else
    {
      *(_OWORD *)__p = *v4;
      v22 = *(_QWORD *)(v3 + 72);
    }
    v6 = __p;
    if (v22 < 0)
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#reg-prov,IsoCountry %s", buf, 0xCu);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
  }

  v7 = (void *)strlen(off_100853238[0]);
  v8 = (size_t)v7;
  v9 = HIBYTE(v24);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (v7 != (void *)HIBYTE(v24))
    {
      v12 = off_100853250[0];
      v13 = strlen(off_100853250[0]);
LABEL_23:
      if (v13 != v9)
      {
        v15 = off_100853220[0];
        v16 = strlen(off_100853220[0]);
LABEL_32:
        if (v16 != v9)
        {
          v18 = off_100853248[0];
          v19 = strlen(off_100853248[0]);
          goto LABEL_42;
        }
        v17 = __s1;
        v11 = (void *)v9;
        goto LABEL_40;
      }
      v14 = __s1;
      v11 = (void *)v9;
      goto LABEL_30;
    }
    if (v7 != (void *)-1)
    {
      v10 = __s1;
      goto LABEL_19;
    }
LABEL_54:
    sub_10017EF98();
  }
  v11 = __s1[1];
  if (v7 != __s1[1])
  {
    v12 = off_100853250[0];
    v13 = strlen(off_100853250[0]);
    goto LABEL_27;
  }
  if (v7 == (void *)-1)
    goto LABEL_54;
  v10 = (void **)__s1[0];
LABEL_19:
  if (!memcmp(v10, off_100853238[0], v8))
    goto LABEL_51;
  v12 = off_100853250[0];
  v13 = strlen(off_100853250[0]);
  if ((v9 & 0x80) == 0)
    goto LABEL_23;
  v11 = __s1[1];
LABEL_27:
  if ((void *)v13 != v11)
  {
    v15 = off_100853220[0];
    v16 = strlen(off_100853220[0]);
    goto LABEL_37;
  }
  if (v11 == (void *)-1)
    sub_10017EF98();
  v14 = (void **)__s1[0];
LABEL_30:
  if (!memcmp(v14, v12, (size_t)v11))
    goto LABEL_51;
  v15 = off_100853220[0];
  v16 = strlen(off_100853220[0]);
  if ((v9 & 0x80) == 0)
    goto LABEL_32;
  v11 = __s1[1];
LABEL_37:
  if ((void *)v16 != v11)
  {
    v18 = off_100853248[0];
    v19 = strlen(off_100853248[0]);
    goto LABEL_46;
  }
  if (v11 == (void *)-1)
    sub_10017EF98();
  v17 = (void **)__s1[0];
LABEL_40:
  if (!memcmp(v17, v15, (size_t)v11))
    goto LABEL_51;
  v18 = off_100853248[0];
  v19 = strlen(off_100853248[0]);
  if ((v9 & 0x80) == 0)
  {
LABEL_42:
    if (v19 == v9)
    {
      v20 = __s1;
      goto LABEL_49;
    }
LABEL_50:
    *(_OWORD *)a2 = *(_OWORD *)__s1;
    a2[2] = v24;
    return;
  }
  v11 = __s1[1];
LABEL_46:
  if ((void *)v19 != v11)
    goto LABEL_50;
  if (v11 == (void *)-1)
    sub_10017EF98();
  v20 = (void **)__s1[0];
  v9 = (size_t)v11;
LABEL_49:
  if (memcmp(v20, v18, v9))
    goto LABEL_50;
LABEL_51:
  sub_10000BF04(a2, "");
  if (SHIBYTE(v24) < 0)
    operator delete(__s1[0]);
}

void sub_1002DAC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    sub_1000131D8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DACB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002DACF4()
{
}

void sub_1002DAD00()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_10085D640 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  objc_autoreleasePoolPop(v0);
}

void sub_1002DAD80(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = -[_FindingAdvertiser _initInternal]([_FindingAdvertiser alloc], "_initInternal");
  v2 = (void *)qword_10085D648;
  qword_10085D648 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NIServerSpatialInteractionPayloadAggregator sharedInstance](NIServerSpatialInteractionPayloadAggregator, "sharedInstance"));
  objc_msgSend(v3, "addPayloadChangeObserver:", qword_10085D648);

}

void sub_1002DADE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002DAF40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002DAF54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002DAF64(uint64_t a1)
{

}

void sub_1002DAF6C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  v2 = sub_1002B66E4(*(unsigned __int8 *)(a1 + 64));
  v3 = *(void **)(a1 + 32);
  v12 = 0;
  v13 = 0;
  v4 = (id *)objc_msgSend(v3, "_peerIndexReferenceForAdvertisementType:outPeers:outAdvertisements:", v2, &v13, &v12);
  v5 = v13;
  v6 = v12;
  v7 = objc_msgSend(v5, "indexOfObject:", *(_QWORD *)(a1 + 40));
  if (v7 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_configureAdvertiserForType:toPeer:withAdvertisement:", v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
    if (v8)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v8);
    }
    else
    {
      objc_msgSend(v5, "addObject:", *(_QWORD *)(a1 + 40));
      objc_msgSend(v6, "addObject:", *(_QWORD *)(a1 + 48));
      v11 = objc_msgSend(v5, "count");
      if (v11 != objc_msgSend(v6, "count"))
        __assert_rtn("-[_FindingAdvertiser startAdvertisingAsFinder:toPeer:withAdvertisement:]_block_invoke", "NIServerFindingDiscovery.mm", 168, "_peers.count == _advertisements.count");
      *v4 = (char *)objc_msgSend(v5, "count") - 1;
      if (objc_msgSend(*(id *)(a1 + 32), "_totalPeers") == (id)1)
        objc_msgSend(*(id *)(a1 + 32), "_startRoundRobinTimer");
    }
    goto LABEL_10;
  }
  objc_msgSend(v6, "setObject:atIndexedSubscript:", *(_QWORD *)(a1 + 48), v7);
  if (*v4 == v7)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_configureAdvertiserForType:toPeer:withAdvertisement:", v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
    if (v9)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;
LABEL_10:

    }
  }

}

void sub_1002DB104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002DB210(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;

  v2 = sub_1002B66E4(*(unsigned __int8 *)(a1 + 56));
  v3 = *(void **)(a1 + 32);
  v16 = 0;
  v17 = 0;
  v4 = objc_msgSend(v3, "_peerIndexReferenceForAdvertisementType:outPeers:outAdvertisements:", v2, &v17, &v16);
  v5 = v17;
  v6 = v16;
  v7 = objc_msgSend(v5, "indexOfObject:", *(_QWORD *)(a1 + 40));
  if (v7 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(v5, "removeObjectAtIndex:", v7);
    objc_msgSend(v6, "removeObjectAtIndex:", v7);
    v8 = objc_msgSend(v5, "count");
    if (v8 != objc_msgSend(v6, "count"))
      __assert_rtn("-[_FindingAdvertiser stopAdvertisingAsFinder:toPeer:]_block_invoke", "NIServerFindingDiscovery.mm", 202, "_peers.count == _advertisements.count");
    *v4 = 0;
    v9 = objc_msgSend(v5, "count");
    v10 = *(void **)(a1 + 32);
    if (v9)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_configureAdvertiserForType:toPeer:withAdvertisement:", v2, v11, v12));

      if (v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v15 = *(void **)(v14 + 40);
        *(_QWORD *)(v14 + 40) = v13;

        goto LABEL_9;
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "_resetAdvertiserForType:", v2);
    }
    if (!objc_msgSend(*(id *)(a1 + 32), "_totalPeers"))
      objc_msgSend(*(id *)(a1 + 32), "_stopRoundRobinTimer");
  }
LABEL_9:

}

void sub_1002DB39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002DB48C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int v30;
  const char *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const __CFString *v52;
  id v53;
  id v54;
  uint64_t v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  unint64_t i;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  char v67;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Advertiser singleton. Round robin timer active: %d"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) != 0));
  objc_msgSend(v2, "addObject:", v3);

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 24);
  if (v5 && *(_BYTE *)(v4 + 32))
  {
    v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "advertisingAddressDataConnectable"));
    v8 = CUPrintNSDataAddress();
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "advertiseRate");
    if (v10 > 39)
    {
      if (v10 <= 44)
      {
        if (v10 == 40)
        {
          v11 = "Medium";
          goto LABEL_28;
        }
        if (v10 == 42)
        {
          v11 = "MediumMid";
          goto LABEL_28;
        }
      }
      else
      {
        switch(v10)
        {
          case '-':
            v11 = "MediumHigh";
            goto LABEL_28;
          case '2':
            v11 = "High";
            goto LABEL_28;
          case '<':
            v11 = "Max";
            goto LABEL_28;
        }
      }
    }
    else if (v10 <= 14)
    {
      if (!v10)
      {
        v11 = "Default";
        goto LABEL_28;
      }
      if (v10 == 10)
      {
        v11 = "Periodic";
        goto LABEL_28;
      }
    }
    else
    {
      switch(v10)
      {
        case 15:
          v11 = "PeriodicHigh";
          goto LABEL_28;
        case 20:
          v11 = "Background";
          goto LABEL_28;
        case 30:
          v11 = "Low";
LABEL_28:
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    T26 conn-addr: %@. Adv rate: %s."), v9, v11));
          objc_msgSend(v6, "addObject:", v14);

          v15 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          v16 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "nearbyActionNoWakeType");
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "nearbyActionNoWakeAuthTagData"));
          v17 = CUPrintNSDataHex(v13, 3, 0);
          v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          v19 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "nearbyActionNWPrecisionFindingStatus");
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "nearbyActionNoWakeConfigData"));
          v21 = CUPrintNSDataHex(v20, 1, 0);
          v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    T26 type: %d. ATag: 0x%@. Status: 0x%02X. Cfg: 0x%@"), v16, v18, v19, v22));
          objc_msgSend(v15, "addObject:", v23);

          goto LABEL_29;
      }
    }
    v11 = "?";
    goto LABEL_28;
  }
  v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    T26 advertiser: %d. Activated: %d"), v5 != 0, *(unsigned __int8 *)(v4 + 32)));
  objc_msgSend(v12, "addObject:", v13);
LABEL_29:

  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(void **)(v24 + 40);
  if (v25 && *(_BYTE *)(v24 + 48))
  {
    v26 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "advertisingAddressData"));
    v28 = CUPrintNSDataAddress();
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    v30 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "advertiseRate");
    if (v30 > 39)
    {
      if (v30 <= 44)
      {
        if (v30 == 40)
        {
          v31 = "Medium";
          goto LABEL_56;
        }
        if (v30 == 42)
        {
          v31 = "MediumMid";
          goto LABEL_56;
        }
      }
      else
      {
        switch(v30)
        {
          case '-':
            v31 = "MediumHigh";
            goto LABEL_56;
          case '2':
            v31 = "High";
            goto LABEL_56;
          case '<':
            v31 = "Max";
            goto LABEL_56;
        }
      }
    }
    else if (v30 <= 14)
    {
      if (!v30)
      {
        v31 = "Default";
        goto LABEL_56;
      }
      if (v30 == 10)
      {
        v31 = "Periodic";
        goto LABEL_56;
      }
    }
    else
    {
      switch(v30)
      {
        case 15:
          v31 = "PeriodicHigh";
          goto LABEL_56;
        case 20:
          v31 = "Background";
          goto LABEL_56;
        case 30:
          v31 = "Low";
LABEL_56:
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "clientIrkData"));
          v36 = CUPrintNSObjectMasked(v34, v35);
          v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "clientIdentifierData"));
          v39 = CUPrintNSDataHex(v38, 3, 0);
          v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
          v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    T19 non-conn-addr: %@. Adv rate: %s. CIRK: %@. CID: %@"), v29, v31, v37, v40));
          objc_msgSend(v26, "addObject:", v41);

          v42 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          v43 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "controlFlags");
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "uwbConfigData"));
          v44 = CUPrintNSDataHex(v33, 5, 0);
          v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    T19 control flags: 0x%08X. UWB config data: %@"), v43, v45));
          objc_msgSend(v42, "addObject:", v46);

          goto LABEL_57;
      }
    }
    v31 = "?";
    goto LABEL_56;
  }
  v32 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    T19 advertiser: %d. Activated: %d"), v25 != 0, *(unsigned __int8 *)(v24 + 48)));
  objc_msgSend(v32, "addObject:", v33);
LABEL_57:

  v47 = 1;
  do
  {
    v48 = v47;
    v49 = 80;
    if ((v47 & 1) != 0)
    {
      v49 = 56;
      v50 = 64;
    }
    else
    {
      v50 = 88;
    }
    if ((v47 & 1) != 0)
      v51 = 72;
    else
      v51 = 96;
    if ((v47 & 1) != 0)
      v52 = CFSTR("T26");
    else
      v52 = CFSTR("T19");
    v53 = *(id *)(*(_QWORD *)(a1 + 32) + v49);
    v54 = *(id *)(*(_QWORD *)(a1 + 32) + v50);
    v55 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v51);
    v56 = objc_msgSend(v53, "count");
    v57 = objc_msgSend(v54, "count");
    v58 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v67 = v48;
    if (v56 == v57)
    {
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %@ peers (%d)"), v52, objc_msgSend(v53, "count")));
      objc_msgSend(v58, "addObject:", v59);

      for (i = 0; i < (unint64_t)objc_msgSend(v53, "count"); ++i)
      {
        v61 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        if (v55 == i)
        {
          v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectAtIndexedSubscript:", v55));
          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "descriptionInternal"));
          v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectAtIndexedSubscript:", v55));
          v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("      > %@: %@"), v63, v64));
        }
        else
        {
          v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectAtIndexedSubscript:", i));
          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "descriptionInternal"));
          v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectAtIndexedSubscript:", i));
          v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        %@: %@"), v63, v64));
        }
        objc_msgSend(v61, "addObject:", v65);

      }
    }
    else
    {
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("    %@ state mismatch!!! %d peers, %d advertisements, %d current index"), v52, objc_msgSend(v53, "count"), objc_msgSend(v54, "count"), v55));
      objc_msgSend(v58, "addObject:", v66);

    }
    v47 = 0;
  }
  while ((v67 & 1) != 0);
}

void sub_1002DBC3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002DBE60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002DC034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002DC554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1002DC614(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_cbAdvertisingAddressChanged");

}

void sub_1002DC648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002DC65C(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  _QWORD *WeakRetained;
  double v7;
  NSObject *v8;
  void *v9;
  int v10;
  double v11;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(double *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v7 = v4 - v5;
    v8 = qword_10085F520;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E8C30();
      v9 = (void *)WeakRetained[3];
      WeakRetained[3] = 0;

    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 134217984;
        v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#find-disc,NearbyActionNoWake: activate advertiser complete [%0.6f s]", (uint8_t *)&v10, 0xCu);
      }
      *((_BYTE *)WeakRetained + 32) = 1;
      objc_msgSend(*(id *)(a1 + 32), "_updateAdvertisementAfterActivationForType:", 26);
    }
  }

}

void sub_1002DC780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1002DC7A4(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  const char *v15;
  int v16;
  __int16 v17;
  char v18;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    v15 = "token";
    v16 = 2462;
    goto LABEL_17;
  }
  if (!v4)
  {
    v15 = "address";
    v16 = 2463;
LABEL_17:
    __assert_rtn("_getAuthTagForToken", "NIServerFindingDiscovery.mm", v16, v15);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "getIRK"));
  v7 = v6;
  if (v6 && objc_msgSend(v6, "length") == (id)16)
  {
    if (qword_10085D660 != -1)
      dispatch_once(&qword_10085D660, &stru_100814D68);
    v8 = byte_10085D658;
    v9 = objc_retainAutorelease(v7);
    if (v8)
    {
      v10 = SipHash(objc_msgSend(v9, "bytes"), "StaticSipHashInput", 18);
    }
    else
    {
      v12 = objc_msgSend(v9, "bytes");
      v13 = objc_retainAutorelease(v5);
      v10 = SipHash(v12, objc_msgSend(v13, "bytes"), objc_msgSend(v13, "length"));
    }
    v17 = v10;
    v18 = BYTE2(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v17, 3));
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003E8C90();
    v11 = 0;
  }

  return v11;
}

void sub_1002DC940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002DCF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1002DD040(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  _QWORD *WeakRetained;
  double v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  double v13;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(double *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v7 = v4 - v5;
    v8 = qword_10085F520;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E8CE8();
      v9 = (void *)WeakRetained[5];
      WeakRetained[5] = 0;

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NIServerSpatialInteractionPayloadAggregator sharedInstance](NIServerSpatialInteractionPayloadAggregator, "sharedInstance"));
      objc_msgSend(v10, "setFindingEnabled:", 0);

      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NIServerSpatialInteractionPayloadAggregator sharedInstance](NIServerSpatialInteractionPayloadAggregator, "sharedInstance"));
      objc_msgSend(v11, "commitChange");

    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 134217984;
        v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#find-disc,SpatialInteraction: activate advertiser complete [%0.6f s]", (uint8_t *)&v12, 0xCu);
      }
      *((_BYTE *)WeakRetained + 48) = 1;
      objc_msgSend(*(id *)(a1 + 32), "_updateAdvertisementAfterActivationForType:", 19);
    }
  }

}

void sub_1002DD19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002DD320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002DD418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002DD564(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_roundRobinTimerHandler");

}

void sub_1002DD598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002DD7D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002DD938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002DDB04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002DDF4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002DE378(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  uint64_t v3;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 136));
  _Unwind_Resume(a1);
}

void sub_1002DE440(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_cbInterruptionHandler");

}

void sub_1002DE474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002DE488(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_cbErrorHandler:", v3);

}

void sub_1002DE4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002DE4E8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_cbBluetoothStateChangedHandler");

}

void sub_1002DE51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002DE530(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id WeakRetained;
  double v7;
  NSObject *v8;
  id v9;
  int v10;
  double v11;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(double *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = v4 - v5;
    v8 = qword_10085F520;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E8D48();
      v9 = (id)*((_QWORD *)WeakRetained + 8);
      *((_QWORD *)WeakRetained + 8) = 0;
      goto LABEL_6;
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 134217984;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#find-disc,Activate controller complete [%0.6f s]", (uint8_t *)&v10, 0xCu);
    }
    *((_BYTE *)WeakRetained + 72) = 1;
    objc_msgSend(WeakRetained, "_cbBluetoothStateChangedHandler");
    if (*((_BYTE *)WeakRetained + 72) && *((_BYTE *)WeakRetained + 88))
    {
      v9 = objc_loadWeakRetained((id *)WeakRetained + 5);
      objc_msgSend(v9, "bluetoothDiscoveryFinishedActivating");
LABEL_6:

    }
  }

}

void sub_1002DE670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1002DE6A4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_cbAdvertisingAddressChangedHandler");

}

void sub_1002DE6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002DE6EC(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id WeakRetained;
  double v7;
  NSObject *v8;
  id v9;
  int v10;
  double v11;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(double *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = v4 - v5;
    v8 = qword_10085F520;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E8DA8();
      v9 = (id)*((_QWORD *)WeakRetained + 10);
      *((_QWORD *)WeakRetained + 10) = 0;
      goto LABEL_6;
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 134217984;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#find-disc,Activate address observer complete [%0.6f s]", (uint8_t *)&v10, 0xCu);
    }
    *((_BYTE *)WeakRetained + 88) = 1;
    objc_msgSend(WeakRetained, "_cbAdvertisingAddressChangedHandler");
    if (*((_BYTE *)WeakRetained + 72) && *((_BYTE *)WeakRetained + 88))
    {
      v9 = objc_loadWeakRetained((id *)WeakRetained + 5);
      objc_msgSend(v9, "bluetoothDiscoveryFinishedActivating");
LABEL_6:

    }
  }

}

void sub_1002DE82C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1002DE96C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[_FindingAdvertiser sharedInstance](_FindingAdvertiser, "sharedInstance"));
  v4 = objc_msgSend(v3, "stopAdvertisingAsFinder:toPeer:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32), v5);

}

void sub_1002DE9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002DED00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002DED88(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

}

void sub_1002DEDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002DEDE8(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v6) & 1) == 0)
  {
    dispatch_source_cancel(v5);
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
  }

}

void sub_1002DEE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002DF110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002DF154(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 40));
  objc_msgSend(WeakRetained, "didGenerateAdvertisement:toSendOOBToPeer:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_configureAdvertisementOOBRefreshTimerForToken:", *(_QWORD *)(a1 + 48));

}

void sub_1002DF1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002DF3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002DF4BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002DF670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002DF878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002DF8A4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 40));
  objc_msgSend(WeakRetained, "didLosePeer:", *(_QWORD *)(a1 + 40));

}

void sub_1002DF8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E0334(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

const char *sub_1002E0420(unint64_t a1)
{
  if (a1 > 0xA)
    return "?";
  else
    return off_100814DA8[a1];
}

void sub_1002E0444(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "descriptionInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        %@: %@"), v6, v8));
  objc_msgSend(v5, "addObject:", v7);

}

void sub_1002E04D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1002E0504(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "descriptionInternal"));
  v7 = sub_1002B6B04(v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        %@: %@"), v6, v8));
  objc_msgSend(v5, "addObject:", v9);

}

void sub_1002E05A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002E05E0(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "descriptionInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("        %@: %@"), v6, v8));
  objc_msgSend(v5, "addObject:", v7);

}

void sub_1002E0674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1002E0760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E07BC(id a1, NIDiscoveryToken *a2, OS_dispatch_source *a3, BOOL *a4)
{
  dispatch_source_cancel((dispatch_source_t)a3);
}

void sub_1002E081C(id a1, NIDiscoveryToken *a2, OS_dispatch_source *a3, BOOL *a4)
{
  dispatch_source_cancel((dispatch_source_t)a3);
}

void sub_1002E0824(id a1, NIDiscoveryToken *a2, OS_dispatch_source *a3, BOOL *a4)
{
  dispatch_source_cancel((dispatch_source_t)a3);
}

void sub_1002E0D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1002E0D98(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didDiscoverPeer:advertisement:overBluetooth:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0);
}

void sub_1002E0FA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002E1260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002E12AC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "objectForKey:"));
  v4 = objc_msgSend(v3, "copy");

  objc_msgSend(v4, "setAddress:", *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "setObject:forKey:", v4, v5);

}

void sub_1002E1334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002E1360(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[_FindingAdvertiser sharedInstance](_FindingAdvertiser, "sharedInstance"));
  v7 = objc_msgSend(v6, "startAdvertisingAsFinder:toPeer:withAdvertisement:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32), v8, v5);

}

void sub_1002E13DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002E1400(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "didGenerateAdvertisement:toSendOOBToPeer:", v5, v6);
  objc_msgSend(*(id *)(a1 + 40), "_configureAdvertisementOOBRefreshTimerForToken:", v6);

}

void sub_1002E145C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002E1564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002E1710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E1838(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E18FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002E199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002E19B4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_opt_new(CBOOBKeyInfo);
  objc_msgSend(v3, "setKeyType:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "getIRK"));
  objc_msgSend(v3, "setIrkData:", v4);

  v5 = sub_1002B7444(v7);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend(v3, "setBtAddressData:", v6);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
}

void sub_1002E1A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002E1B98(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  NSObject *v3;
  id v4;
  __int16 v5[8];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    if (!objc_msgSend(WeakRetained[17], "count")
      && ((unint64_t)objc_msgSend(v2[12], "discoveryFlags") & 0x200100000) != 0)
    {
      v3 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v5[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-disc,NearbyActionNoWake: disabling scan dupes", (uint8_t *)v5, 2u);
      }
      objc_msgSend(v2[12], "setDiscoveryFlags:", (unint64_t)objc_msgSend(v2[12], "discoveryFlags") & 0xFFFFFFFDFFEFFFFFLL);
    }
    v4 = v2[15];
    v2[15] = 0;

  }
}

void sub_1002E1C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E205C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 80));
  _Unwind_Resume(a1);
}

void sub_1002E20C0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_cbDeviceFoundHandler:", v3);

}

void sub_1002E2108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002E2120(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id *WeakRetained;
  id *v7;
  double v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  id v12;
  void *v13;
  int v14;
  double v15;
  __int16 v16;
  id v17;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(double *)(a1 + 40);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = v4 - v5;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E90C4();
      v9 = v7[12];
      v7[12] = 0;
    }
    else
    {
      *((_BYTE *)WeakRetained + 112) = 1;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_nearbyActionNoWakeOOBKeysFromEligibleDiscoveryPeers"));
      objc_msgSend(v7[12], "setOobKeys:", v10);

      if (!objc_msgSend(v7[17], "count"))
        objc_msgSend(v7, "_nearbyActionNoWakeDisableScanDupesIfNecessary");
      v11 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v12 = v7[12];
        v14 = 134218243;
        v15 = v8;
        v16 = 2113;
        v17 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#find-disc,NearbyActionNoWake: activated scanner [%0.6f s]: %{private}@", (uint8_t *)&v14, 0x16u);
      }
      v9 = (id)qword_10085F520;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7[12], "discoveredDevices"));
        v14 = 138477827;
        v15 = *(double *)&v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#find-disc,NearbyActionNoWake: discovered devices after activating scanner: %{private}@", (uint8_t *)&v14, 0xCu);

      }
    }

  }
}

void sub_1002E22EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002E25D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E2628(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_cbDeviceFoundHandler:", v3);

}

void sub_1002E2670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002E2688(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  _QWORD *WeakRetained;
  _QWORD *v7;
  double v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD v16[5];
  uint8_t buf[4];
  double v18;
  __int16 v19;
  uint64_t v20;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(double *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = v4 - v5;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003E9124();
      v9 = (void *)v7[13];
      v7[13] = 0;

      v10 = (void *)v7[25];
      v7[25] = 0;

    }
    else
    {
      *((_BYTE *)WeakRetained + 112) = 1;
      v11 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      v12 = (void *)v7[25];
      v7[25] = v11;

      v13 = (void *)v7[16];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1002E284C;
      v16[3] = &unk_10080CC70;
      v16[4] = v7;
      objc_msgSend(v13, "enumerateObjectsUsingBlock:", v16);
      v14 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v15 = v7[13];
        *(_DWORD *)buf = 134218243;
        v18 = v8;
        v19 = 2113;
        v20 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#find-disc,SpatialInteraction: activated scanner [%0.6f s]: %{private}@", buf, 0x16u);
      }
    }
  }

}

void sub_1002E2824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002E284C(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  double v10;

  v3 = a2;
  v4 = sub_10000883C();
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 104);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "rawToken"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002E2928;
  v8[3] = &unk_10080E410;
  v10 = v4;
  v7 = v3;
  v9 = v7;
  objc_msgSend(v5, "addPeerToken:completion:", v6, v8);

}

void sub_1002E2904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002E2928(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  double v10;

  v3 = a2;
  v4 = sub_10000883C() - *(double *)(a1 + 40);
  v5 = qword_10085F520;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003E9184();
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138478083;
    v8 = v6;
    v9 = 2048;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#find-disc,SpatialInteraction: added %{private}@ to scanner [%0.6f s]", (uint8_t *)&v7, 0x16u);
  }

}

void sub_1002E2A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E2D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v24 = v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1002E2DAC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  xpc_object_t v6;
  id v7;
  id v8;
  id v9;

  v9 = a2;
  v3 = sub_1002B7444(v9);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "getIRK"));
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = objc_retainAutorelease(v4);
  xpc_dictionary_set_data(v6, "btAd", objc_msgSend(v7, "bytes"), (size_t)objc_msgSend(v7, "length"));
  v8 = objc_retainAutorelease(v5);
  xpc_dictionary_set_data(v6, "irkD", objc_msgSend(v8, "bytes"), (size_t)objc_msgSend(v8, "length"));
  xpc_dictionary_set_uint64(v6, "irkT", 1uLL);
  xpc_array_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), 0xFFFFFFFFFFFFFFFFLL, v6);

}

void sub_1002E2EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002E3064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002E30A8(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  id v4;
  id *v5;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    objc_msgSend(WeakRetained[22], "removeObjectForKey:", *(_QWORD *)(a1 + 32));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5[21], "objectForKey:", *(_QWORD *)(a1 + 32)));
    if (v3)
    {
      v4 = objc_loadWeakRetained(v5 + 5);
      objc_msgSend(v4, "didGenerateAdvertisement:toSendOOBToPeer:", v3, *(_QWORD *)(a1 + 32));
      objc_msgSend(v5, "_configureAdvertisementOOBRefreshTimerForToken:", *(_QWORD *)(a1 + 32));

    }
    WeakRetained = v5;
  }

}

void sub_1002E3140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E32FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002E3340(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  id v4;
  id v5;
  id *v6;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    objc_msgSend(WeakRetained[23], "removeObjectForKey:", *(_QWORD *)(a1 + 32));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[21], "objectForKey:", *(_QWORD *)(a1 + 32)));

    WeakRetained = v6;
    if (v3)
    {
      v4 = objc_msgSend(v6, "stopAdvertisingToPeer:", *(_QWORD *)(a1 + 32));
      v5 = objc_loadWeakRetained(v6 + 5);
      objc_msgSend(v5, "didStopAdvertisingToPeer:", *(_QWORD *)(a1 + 32));

      WeakRetained = v6;
    }
  }

}

void sub_1002E33D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002E355C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002E35A0(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  id v4;
  id *v5;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    objc_msgSend(WeakRetained[19], "removeObjectForKey:", *(_QWORD *)(a1 + 32));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5[17], "objectForKey:", *(_QWORD *)(a1 + 32)));

    objc_msgSend(v5, "_resetDiscoveryStateForPeer:", *(_QWORD *)(a1 + 32));
    WeakRetained = v5;
    if (v3)
    {
      v4 = objc_loadWeakRetained(v5 + 5);
      objc_msgSend(v4, "didLosePeer:", *(_QWORD *)(a1 + 32));

      WeakRetained = v5;
    }
  }

}

void sub_1002E362C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002E3864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002E38A4(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  unsigned int v10;
  id v11;

  v11 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "btAddressData"));
  v7 = sub_1002DC7A4(v11, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nearbyActionNoWakeAuthTagData"));
  v10 = objc_msgSend(v8, "isEqualToData:", v9);

  if (v10)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }

}

void sub_1002E395C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002E3BF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  operator delete(v3);

  _Unwind_Resume(a1);
}

void sub_1002E406C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1002E43BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1002E45D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002E4708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E4A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002E4B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002E4EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1002E50FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  if (v3)

  _Unwind_Resume(a1);
}

_QWORD *sub_1002E5220(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return sub_1002E54F4(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
}

char *sub_1002E5250(char *result, uint64_t a2)
{
  if (result != (char *)a2)
    return sub_1002E556C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

void sub_1002E52D0(id a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  NSObject *v4;
  uint32_t v5;
  uint64_t v6;
  _DWORD v7[2];

  if (+[NIPlatformInfo isInternalBuild](NIPlatformInfo, "isInternalBuild"))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    byte_10085D658 = objc_msgSend(v1, "BOOLForKey:", CFSTR("FindingTestModeStaticAuthTag"));

    v2 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      return;
    v7[0] = 67109120;
    v7[1] = byte_10085D658;
    v3 = "#find-disc,Static tag test mode: %d";
    v4 = v2;
    v5 = 8;
  }
  else
  {
    byte_10085D658 = 0;
    v6 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v7[0]) = 0;
    v3 = "#find-disc,Static tag test mode never allowed";
    v4 = v6;
    v5 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)v7, v5);
}

void sub_1002E53F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E5410(id a1)
{
  void *v1;
  NSObject *v2;
  _DWORD v3[2];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_10085D670 = objc_msgSend(v1, "BOOLForKey:", CFSTR("FindingDisableClientDiscoveryEvents"));

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = byte_10085D670;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#find-disc,Disable client discovery events: %d", (uint8_t *)v3, 8u);
  }
}

void sub_1002E54DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1002E54F4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10003B108(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1002E5550(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002E556C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_100026E7C();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_10003B108(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_1002E5674(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

_QWORD *sub_1002E5684@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100814FB0)[a1]);
}

_QWORD *sub_1002E5698@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100815008)[a1]);
}

_QWORD *sub_1002E56AC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100815050)[a1]);
}

_QWORD *sub_1002E56C0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, (&off_100815070)[a1]);
}

void sub_1002E59FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1002E5CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  if (a12 && __p)
    operator delete(__p);
  if (a13)
    operator delete(a13);

  _Unwind_Resume(a1);
}

void sub_1002E628C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1002E7700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,_QWORD *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;
  void *v73;

  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  sub_100180704((uint64_t)&STACK[0x2C0]);
  sub_10003E3F0(v72, a35);
  sub_10003E3F0((uint64_t)&a72, (_QWORD *)STACK[0x200]);

  STACK[0x2C0] = (unint64_t)&STACK[0x298];
  sub_1002F0A00((void ***)&STACK[0x2C0]);

  _Unwind_Resume(a1);
}

uint64_t sub_1002E7AD0(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  _QWORD v20[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      sub_100026E7C();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v20[4] = v4;
    if (v14)
      v15 = (char *)sub_1002D1DB8(v4, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[48 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16[40] = *((_BYTE *)a2 + 40);
    *(_OWORD *)(v16 + 24) = v18;
    v20[2] = v16 + 48;
    sub_1002F0A8C(a1, v20);
    v10 = a1[1];
    sub_1002F0C24((uint64_t)v20);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_BYTE *)(v7 + 40) = *((_BYTE *)a2 + 40);
    *(_OWORD *)(v7 + 24) = v9;
    v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return v10 - 48;
}

void sub_1002E7C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002F0C24((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002E7E98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_10085DA90);

  _Unwind_Resume(a1);
}

void sub_1002E8C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002E8E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E8F90()
{
  operator delete();
}

void sub_1002E9098()
{
  operator delete();
}

void sub_1002E9188()
{
  operator delete();
}

void sub_1002E926C()
{
  operator delete();
}

void sub_1002E935C()
{
  operator delete();
}

void sub_1002E99C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;

  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);

  _Unwind_Resume(a1);
}

_QWORD *sub_1002E9B24(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    sub_1002F1B78(a1, a3);
    a1[1] = sub_1002F1C0C(v4, a2, a2 + 160 * a3, a1[1]);
  }
  return a1;
}

void sub_1002E9BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1002F1D80(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E9BC0(int a1, float a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[10];
  char v8;
  uint64_t v9;

  sub_100210A10((uint64_t)&v6);
  v4 = v6;
  *(_QWORD *)((char *)&v7[1] + *(_QWORD *)(v6 - 24)) = a1;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v4 - 24)) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(v4 - 24)) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(a2);
  std::stringbuf::str(v7);
  if (v8 < 0)
    operator delete((void *)v7[8]);
  std::streambuf::~streambuf(v7);
  return std::ios::~ios(&v9);
}

void sub_1002E9CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100210AFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002EAB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002EAFE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002EB194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1002EB594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

void *sub_1002EB648()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100853000);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100853000))
    __cxa_guard_release(&qword_100853000);
  return &unk_100852FF8;
}

void sub_1002EB76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1002EB860(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100353B88();
    operator delete();
  }
  return result;
}

void sub_1002EC318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1002EC7A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EC924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002ECB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  sub_100137328(&a11);
  _Unwind_Resume(a1);
}

void sub_1002ED224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45)
{
  void *v45;
  void *v46;

  if (__p)
    operator delete(__p);

  if (a43 < 0)
    operator delete(a38);

  _Unwind_Resume(a1);
}

uint64_t sub_1002ED388()
{
  uint64_t v0;
  _QWORD v2[2];
  uint64_t v3;
  _QWORD v4[10];
  char v5;
  uint64_t v6;

  sub_1000537E4((uint64_t)v2);
  *(_QWORD *)((char *)&v2[2] + *(_QWORD *)(v2[0] - 24)) = 4;
  std::ostream::operator<<(&v3);
  std::stringbuf::str(v4);
  *(_QWORD *)((char *)v2
  v3 = v0;
  if (v5 < 0)
    operator delete((void *)v4[8]);
  std::streambuf::~streambuf(v4);
  return std::ios::~ios(&v6);
}

void sub_1002ED458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100053910((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002ED5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002EDC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  void *v38;
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

void sub_1002EE1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  void *v46;
  void *v47;
  void *v48;

  _Unwind_Resume(a1);
}

void sub_1002EE604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1002EED68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1002EF2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002EF3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002EF6FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EF8F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EFA10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EFB34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002EFC74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EFD50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EFDE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EFE6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EFF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002F00C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F0414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);

  sub_100210AFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002F0540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F0794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F0880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002F094C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1002F0988(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100137650(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1002F09E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F0A00(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1002F0A40((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1002F0A40(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  a1[1] = v2;
}

uint64_t sub_1002F0A8C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002F0B00((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002F0B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_BYTE *)(v9 - 8) = *(_BYTE *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  sub_1002F0BAC((uint64_t)v13);
  return a6;
}

uint64_t sub_1002F0BAC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002F0BE0(a1);
  return a1;
}

void sub_1002F0BE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 48;
  }
}

uint64_t sub_1002F0C24(uint64_t a1)
{
  sub_1002F0C58(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1002F0C58(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 6;
      *(_QWORD *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t *sub_1002F0CAC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10029AB14(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1002F0CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1002F0D00(uint64_t a1)
{

  return a1;
}

void sub_1002F0D28(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1002F0D60(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100814E10;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1002F0DA4(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100814E10;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1002F0DD8(uint64_t a1)
{

}

void sub_1002F0DE0(id *a1)
{

  operator delete(a1);
}

void sub_1002F0E08(uint64_t a1, double *a2, uint64_t *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t *a7, unsigned __int8 *a8)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  char v28;
  char v29;
  void *v30[2];
  uint64_t v31;
  __int128 v32;
  char v33;
  char v34;
  _OWORD v35[12];
  void *v36[2];
  char v37;
  char v38;
  void *v39[2];
  char v40;
  char v41;

  v8 = *a2;
  v9 = *a3;
  LOBYTE(v30[0]) = 0;
  v34 = 0;
  if (*(_BYTE *)(a4 + 48))
  {
    *(_OWORD *)v30 = *(_OWORD *)a4;
    v31 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    v32 = *(_OWORD *)(a4 + 24);
    v33 = *(_BYTE *)(a4 + 40);
    v34 = 1;
  }
  LOBYTE(__p[0]) = 0;
  v29 = 0;
  if (*(_BYTE *)(a5 + 48))
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v26 = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 0;
    v27 = *(_OWORD *)(a5 + 24);
    v28 = *(_BYTE *)(a5 + 40);
    v29 = 1;
  }
  v21 = a6[8];
  v22 = a6[9];
  v23 = a6[10];
  v24 = a6[11];
  v17 = a6[4];
  v18 = a6[5];
  v19 = a6[6];
  v20 = a6[7];
  v13 = *a6;
  v14 = a6[1];
  v15 = a6[2];
  v16 = a6[3];
  v10 = *a7;
  v11 = *a8;
  v12 = *(void **)(a1 + 8);
  sub_1002F109C((char *)v39, (__int128 *)v30);
  sub_1002F109C((char *)v36, (__int128 *)__p);
  v35[8] = v21;
  v35[9] = v22;
  v35[10] = v23;
  v35[11] = v24;
  v35[4] = v17;
  v35[5] = v18;
  v35[6] = v19;
  v35[7] = v20;
  v35[0] = v13;
  v35[1] = v14;
  v35[2] = v15;
  v35[3] = v16;
  objc_msgSend(v12, "_handleRegionChangeForDevice:currentRegion:prevRegion:timestamp:rangeResult:intentPrediction:regionTransitionSuppressed:", v9, v39, v36, v35, v10, v11 != 0, v8);
  if (v38 && v37 < 0)
    operator delete(v36[0]);
  if (v41 && v40 < 0)
    operator delete(v39[0]);
  if (v29 && SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  if (v34)
  {
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
  }
}

void sub_1002F0FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  if (*(_BYTE *)(v53 - 128) && *(char *)(v53 - 153) < 0)
    operator delete(*(void **)(v53 - 176));
  if (*(_BYTE *)(v53 - 72) && *(char *)(v53 - 97) < 0)
    operator delete(*(void **)(v53 - 120));
  if (a42 && a38 < 0)
    operator delete(__p);
  if (a53)
  {
    if (a49 < 0)
      operator delete(a44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F1054(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100814E80))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1002F1090()
{
  return &off_100814E80;
}

char *sub_1002F109C(char *a1, __int128 *a2)
{
  *a1 = 0;
  a1[48] = 0;
  sub_1002F10E4(a1, a2);
  return a1;
}

void sub_1002F10C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
    sub_1003E4FD0(v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_1002F10E4(char *__dst, __int128 *a2)
{
  __int128 v4;
  __n128 result;

  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    result = *(__n128 *)((char *)a2 + 24);
    __dst[40] = *((_BYTE *)a2 + 40);
    *(__n128 *)(__dst + 24) = result;
    __dst[48] = 1;
  }
  return result;
}

uint64_t sub_1002F114C(uint64_t a1)
{

  return a1;
}

void sub_1002F1174(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1002F11AC(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100814EA0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1002F11F0(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100814EA0;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1002F1224(uint64_t a1)
{

}

void sub_1002F122C(id *a1)
{

  operator delete(a1);
}

void sub_1002F1254(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, double *a4, unsigned int *a5, __int128 *a6, unsigned int *a7)
{
  int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  void **v16[3];
  char v17;
  void ***v18;

  v7 = *a2;
  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  LOBYTE(v13) = 0;
  v15 = 0;
  if (*((_BYTE *)a6 + 24))
  {
    v13 = *a6;
    v14 = *((_QWORD *)a6 + 2);
    *((_QWORD *)a6 + 1) = 0;
    *((_QWORD *)a6 + 2) = 0;
    *(_QWORD *)a6 = 0;
    v15 = 1;
  }
  else if (v7)
  {
    __assert_rtn("operator()", "NIServerNearbyUpdatesEngine.mm", 379, "regionsVector.has_value()");
  }
  v11 = *a7;
  v12 = *(void **)(a1 + 8);
  sub_1002F13EC((char *)v16, (uint64_t)&v13);
  objc_msgSend(v12, "_handleDeviceMonitorActivation:forDevice:timestamp:regionSizeCategory:regions:predictorType:", v7 != 0, v8, v10, v16, v11, v9, v13, v14);
  if (v17)
  {
    v18 = v16;
    sub_1002F0A00((void ***)&v18);
  }
  if (v15)
  {
    v16[0] = (void **)&v13;
    sub_1002F0A00(v16);
  }
}

void sub_1002F1360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t *a18)
{
  if (a17)
  {
    a18 = (uint64_t *)&a14;
    sub_1002F0A00((void ***)&a18);
  }
  if (a12)
  {
    a18 = &a9;
    sub_1002F0A00((void ***)&a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F13A4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100814F10))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1002F13E0()
{
  return &off_100814F10;
}

char *sub_1002F13EC(char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[24] = 0;
  sub_1002F1440(a1, a2);
  return a1;
}

void sub_1002F1420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    sub_1002F0A00((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002F1440(char *result, uint64_t a2)
{
  char *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    result = sub_1002F1494(result, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    v2[24] = 1;
  }
  return result;
}

char *sub_1002F1494(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_1002F1518(result, a4);
    result = sub_1002F1568((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_1002F14F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1002F0A00(&a9);
  _Unwind_Resume(a1);
}

char *sub_1002F1518(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    sub_100026E7C();
  result = (char *)sub_1002D1DB8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

char *sub_1002F1568(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  char *v8;
  __int128 v9;
  _QWORD v11[3];
  char v12;
  char *v13;
  char *v14;

  v4 = __dst;
  v13 = __dst;
  v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100004678(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v8 = v14;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
        v8 = v4;
      }
      v9 = *(__int128 *)((char *)v6 + 24);
      v4[40] = *((_BYTE *)v6 + 40);
      *(_OWORD *)(v4 + 24) = v9;
      v6 += 3;
      v4 = v8 + 48;
      v14 = v8 + 48;
    }
    while (v6 != a3);
  }
  v12 = 1;
  sub_1002F1638((uint64_t)v11);
  return v4;
}

void sub_1002F1624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002F1638((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F1638(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002F166C(a1);
  return a1;
}

void sub_1002F166C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0)
      operator delete(*(void **)(v1 - 48));
    v1 -= 48;
  }
}

uint64_t sub_1002F16B0(uint64_t a1)
{

  return a1;
}

void sub_1002F16D8(uint64_t a1)
{

  operator delete();
}

_QWORD *sub_1002F1710(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_100814F30;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1002F1754(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_100814F30;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1002F1788(uint64_t a1)
{

}

void sub_1002F1790(id *a1)
{

  operator delete(a1);
}

id sub_1002F17B8(uint64_t a1, double *a2, uint64_t *a3, _OWORD *a4)
{
  double v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[12];

  v4 = *a2;
  v5 = *a3;
  v6 = a4[9];
  v13[8] = a4[8];
  v13[9] = v6;
  v7 = a4[11];
  v13[10] = a4[10];
  v13[11] = v7;
  v8 = a4[5];
  v13[4] = a4[4];
  v13[5] = v8;
  v9 = a4[7];
  v13[6] = a4[6];
  v13[7] = v9;
  v10 = a4[1];
  v13[0] = *a4;
  v13[1] = v10;
  v11 = a4[3];
  v13[2] = a4[2];
  v13[3] = v11;
  return objc_msgSend(*(id *)(a1 + 8), "_handleBoundedRegionRange:forDevice:rangeResult:", v5, v13, v4);
}

uint64_t sub_1002F1814(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100814FA0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1002F1850()
{
  return &off_100814FA0;
}

void sub_1002F185C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *v4;
  void **v5;

  if (a2)
  {
    v5 = (void **)(a2 + 528);
    sub_1002F190C(&v5);
    sub_10003A394((_QWORD *)(a2 + 456));
    v3 = *(_QWORD **)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    if (v3)
    {
      v3[21] = off_100807398;
      v3[13] = off_100807398;
      v3[5] = off_100807398;
      operator delete();
    }
    if (*(_BYTE *)(a2 + 128))
    {
      v4 = *(void **)(a2 + 96);
      if (v4)
      {
        *(_QWORD *)(a2 + 104) = v4;
        operator delete(v4);
      }
    }
    sub_1002F1998((uint64_t *)(a2 + 72), 0);
    operator delete();
  }
}

void sub_1002F190C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1002F194C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1002F194C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 96)
  {
    if (*(char *)(i - 73) < 0)
      operator delete(*(void **)(i - 96));
  }
  a1[1] = v2;
}

uint64_t sub_1002F1998(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1002F19D4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1002F19D4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)(a1 + 856) = off_100807398;
  *(_QWORD *)(a1 + 776) = off_100807398;
  v7 = (void **)(a1 + 712);
  sub_1002F1AA0(&v7);
  v7 = (void **)(a1 + 688);
  sub_1002F1AE0(&v7);
  v7 = (void **)(a1 + 664);
  sub_1002F1AA0(&v7);
  *(_QWORD *)(a1 + 536) = off_100807398;
  *(_QWORD *)(a1 + 472) = off_100807398;
  *(_QWORD *)(a1 + 336) = off_100807398;
  *(_QWORD *)(a1 + 264) = off_100807398;
  *(_QWORD *)(a1 + 192) = off_100807398;
  v7 = (void **)(a1 + 168);
  sub_1002F1B24(&v7);
  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1002F1AA0(void ***a1)
{
  void **v1;
  char *v2;
  char *i;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 112)
      *((_QWORD *)i - 9) = off_100807398;
    v1[1] = v2;
    operator delete(v2);
  }
}

void sub_1002F1AE0(void ***a1)
{
  void **v1;
  char *v2;
  char *i;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 208)
    {
      *((_QWORD *)i - 14) = off_100807398;
      *((_QWORD *)i - 22) = off_100807398;
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

void sub_1002F1B24(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  char *v4;
  BOOL v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    if (v3 != v2)
    {
      v4 = v3 - 192;
      do
      {
        *((_QWORD *)v4 + 16) = off_100807398;
        *(_QWORD *)v4 = off_100807398;
        *((_QWORD *)v4 - 14) = off_100807398;
        *((_QWORD *)v4 - 22) = off_100807398;
        *((_QWORD *)v4 - 30) = off_100807398;
        v5 = v4 - 240 == v2;
        v4 -= 432;
      }
      while (!v5);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

char *sub_1002F1B78(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x19999999999999ALL)
    sub_100026E7C();
  result = (char *)sub_1002F1BC8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[160 * v4];
  return result;
}

void *sub_1002F1BC8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL)
    sub_1000260B0();
  return operator new(160 * a2);
}

uint64_t sub_1002F1C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a4;
  v16 = a4;
  v17 = a4;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_1001530EC((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8) - *(_QWORD *)v6);
      *(_OWORD *)(v4 + 24) = *(_OWORD *)(v6 + 24);
      v7 = *(_OWORD *)(v6 + 40);
      v8 = *(_OWORD *)(v6 + 56);
      v9 = *(_OWORD *)(v6 + 72);
      *(_OWORD *)(v4 + 88) = *(_OWORD *)(v6 + 88);
      *(_OWORD *)(v4 + 72) = v9;
      *(_OWORD *)(v4 + 56) = v8;
      *(_OWORD *)(v4 + 40) = v7;
      v10 = *(_OWORD *)(v6 + 104);
      v11 = *(_OWORD *)(v6 + 120);
      v12 = *(_OWORD *)(v6 + 136);
      *(_BYTE *)(v4 + 152) = *(_BYTE *)(v6 + 152);
      *(_OWORD *)(v4 + 136) = v12;
      *(_OWORD *)(v4 + 120) = v11;
      *(_OWORD *)(v4 + 104) = v10;
      v4 = v17 + 160;
      v17 += 160;
      v6 += 160;
    }
    while (v6 != a3);
  }
  v15 = 1;
  sub_1002F1D00((uint64_t)v14);
  return v4;
}

void sub_1002F1CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002F1D00((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F1D00(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002F1D34(a1);
  return a1;
}

void sub_1002F1D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 160);
      v3 -= 160;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 152) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_1002F1D80(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1002F1DC0((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1002F1DC0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 160);
      v4 -= 160;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 152) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *sub_1002F1E14(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10002A900(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1002F2040(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  sub_1001880BC(v2, v1);
  _Unwind_Resume(a1);
}

void sub_1002F205C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002F205C(a1, *a2);
    sub_1002F205C(a1, a2[1]);
    sub_10003E3F0((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    operator delete(a2);
  }
}

uint64_t *sub_1002F20A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  double v6;
  uint64_t **v7;
  double v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *(double *)(a2 + 8);
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *((double *)v4 + 5);
        if (v6 >= v8)
          break;
        v4 = (uint64_t *)*v4;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = (uint64_t *)v4[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_1002F2158(a1, a3, (uint64_t)&v10);
    sub_1000272A8((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

__n128 sub_1002F2158@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x138uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_OWORD *)v6 + 2) = *(_OWORD *)a2;
  sub_100232898((uint64_t *)v6 + 6, a2 + 16);
  *(_OWORD *)(v6 + 248) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v6 + 264) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v6 + 280) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v6 + 184) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v6 + 200) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v6 + 216) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v6 + 232) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v6 + 120) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v6 + 136) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v6 + 152) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v6 + 168) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v6 + 104) = *(_OWORD *)(a2 + 72);
  result = *(__n128 *)(a2 + 264);
  *(__n128 *)(v6 + 296) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1002F2248(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002F2264(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1002F2264(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_10003E3F0((uint64_t)(a2 + 6), a2[7]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *sub_1002F22AC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002F2300(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1002F22E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002F205C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002F2300(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  double *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (double *)(result + 1);
    do
    {
      result = sub_1002F2384(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1002F2384(uint64_t **a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  double v9;
  double *v10;

  v6 = (uint64_t **)sub_1002F2404(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1002F2158((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000272A8(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

double *sub_1002F2404(_QWORD *a1, double *a2, double **a3, double *a4, uint64_t a5)
{
  double *v5;
  double v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  BOOL v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  double *v19;
  double *v20;
  double v21;

  v5 = (double *)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2 || (v6 = *(double *)(a5 + 8), v7 = a2[5], v6 < v7))
  {
    v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = *(uint64_t **)a2;
      do
      {
        v10 = (double *)v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (double *)*((_QWORD *)v13 + 2);
        v14 = *(_QWORD *)v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *(double *)(a5 + 8);
    if (v10[5] < v15)
      goto LABEL_17;
    v16 = *(double **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[5];
          if (v15 >= v18)
            break;
          v16 = *(double **)v16;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v18 >= v15)
          break;
        v5 = v16 + 1;
        v16 = (double *)*((_QWORD *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *(_QWORD *)a4 = a2;
    return a4;
  }
  v11 = *((_QWORD *)a2 + 1);
  if (v11)
  {
    v12 = (double *)*((_QWORD *)a2 + 1);
    do
    {
      a4 = v12;
      v12 = *(double **)v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (double *)*((_QWORD *)v19 + 2);
      v14 = *(_QWORD *)a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[5])
  {
    v20 = *(double **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v20;
          v21 = v20[5];
          if (v6 >= v21)
            break;
          v20 = *(double **)v20;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v21 >= v6)
          break;
        v5 = v20 + 1;
        v20 = (double *)*((_QWORD *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1002F25A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1001883D4(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_1002F25F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void sub_1002F2600()
{
  void *v0;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  const char *v12;

  v0 = objc_autoreleasePoolPush();
  sub_10000BF04(&qword_10085D678, "/System/Library/NearbyInteractionBundles");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10085D678, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_10085D690, "BiasEstimatorResourceBundle.bundle");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10085D690, (void *)&_mh_execute_header);
  v9 = xmmword_100477494;
  v10 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085D6A8, (int *)&v9, 3);
  xmmword_10085D6C0 = xmmword_10046E050;
  *(_OWORD *)&qword_10085D6D0 = xmmword_10046E060;
  qword_10085D6E8 = 0;
  unk_10085D6F0 = 0;
  qword_10085D6E0 = 0x3FD999999999999ALL;
  unk_10085D6F8 = xmmword_10046E070;
  dword_10085D708 = 5;
  qword_10085D710 = 0x4000000000000000;
  LODWORD(qword_10085D718) = 5;
  byte_10085D720 = 0;
  *(_QWORD *)&algn_10085D721[3] = 0x30000000ALL;
  xmmword_10085D730 = xmmword_10046E080;
  unk_10085D740 = xmmword_10046E090;
  xmmword_10085D750 = xmmword_10046E0A0;
  qword_10085D760 = 0x3FE3333333333333;
  dword_10085D768 = 3;
  xmmword_10085D770 = xmmword_10046E0B0;
  unk_10085D780 = xmmword_10046E090;
  xmmword_10085D790 = xmmword_10046E080;
  qword_10085D7A0 = 0x3FE3333333333333;
  LOBYTE(qword_10085D7A8) = 0;
  xmmword_10085D7B0 = xmmword_10046E0C0;
  unk_10085D7C0 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v8 = _Q0;
  xmmword_10085D7D0 = _Q0;
  qword_10085D7E0 = 0xBFD3333333333333;
  xmmword_10085D7E8 = xmmword_10046E0E0;
  qword_10085D7F8 = 0x3E99999A40000000;
  xmmword_10085D800 = xmmword_10046E060;
  qword_10085D818 = 0;
  unk_10085D820 = 0;
  qword_10085D810 = 0x3FD999999999999ALL;
  xmmword_10085D828 = xmmword_10046E070;
  dword_10085D838 = 5;
  qword_10085D840 = 0x4000000000000000;
  dword_10085D848 = 4;
  *(_QWORD *)&xmmword_10085D850 = 0x300000008;
  *((_QWORD *)&xmmword_10085D850 + 1) = 0xC04E800000000000;
  v11 = (char *)0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_10085D860, (double *)&v11, 1);
  xmmword_10085D878 = xmmword_10046E0F0;
  qword_10085D888 = 0x4024000000000000;
  dword_10085D890 = 45;
  byte_10085D894 = 0;
  LODWORD(xmmword_10085D898) = 1;
  BYTE8(xmmword_10085D898) = 1;
  xmmword_10085D8A8 = xmmword_10046E100;
  xmmword_10085D8B8 = xmmword_10046E110;
  xmmword_10085D8C8 = v8;
  *(_QWORD *)&xmmword_10085D8D8 = 0xC059000000000000;
  *(__int128 *)((char *)&xmmword_10085D8D8 + 8) = xmmword_10046E120;
  qword_10085D8F0 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085D8F8 = xmmword_10046E060;
  qword_10085D908 = 0x3FD999999999999ALL;
  *(_QWORD *)&xmmword_10085D918 = 0;
  qword_10085D910 = 0;
  *(__int128 *)((char *)&xmmword_10085D918 + 8) = xmmword_10046E070;
  dword_10085D930 = 5;
  *(_QWORD *)&xmmword_10085D938 = 0x4000000000000000;
  DWORD2(xmmword_10085D938) = 10;
  *(_QWORD *)&xmmword_10085D948 = 0x4034000000000000;
  DWORD2(xmmword_10085D948) = 3;
  xmmword_10085D958 = xmmword_10046E130;
  __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085D6A8, (void *)&_mh_execute_header);
  qword_10085D970 = 0;
  unk_10085D978 = 0;
  qword_10085D968 = 0;
  v6 = operator new(0x40uLL);
  qword_10085D970 = (uint64_t)(v6 + 4);
  unk_10085D978 = v6 + 4;
  *v6 = xmmword_1004774B0;
  v6[1] = unk_1004774C0;
  v6[2] = xmmword_1004774D0;
  v6[3] = unk_1004774E0;
  qword_10085D968 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085D968, (void *)&_mh_execute_header);
  qword_10085D988 = 0;
  unk_10085D990 = 0;
  qword_10085D980 = 0;
  v7 = operator new(0x10uLL);
  qword_10085D988 = (uint64_t)(v7 + 1);
  unk_10085D990 = v7 + 1;
  *v7 = xmmword_1004774F0;
  qword_10085D980 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085D980, (void *)&_mh_execute_header);
  *(_QWORD *)&v9 = "AntennaMask_1_NN_V5_Model_DeviceType_201.mlmodelc/fp16_model.espresso";
  *((_QWORD *)&v9 + 1) = "net";
  sub_10027C150(&qword_10085D998, (char **)&v9);
  v11 = "AntennaMask_2_NN_V5_Model_DeviceType_201.mlmodelc/fp16_model.espresso";
  v12 = "net";
  sub_10027C150(qword_10085D9C8, &v11);
  __cxa_atexit((void (*)(void *))sub_10026B920, &qword_10085D998, (void *)&_mh_execute_header);
  *(_QWORD *)&v9 = "AntennaMask_1_NN_V5_ScalingModel_DeviceType_201";
  *((_QWORD *)&v9 + 1) = "mlmodelc";
  sub_10027C150(&qword_10085D9F8, (char **)&v9);
  v11 = "AntennaMask_2_NN_V5_ScalingModel_DeviceType_201";
  v12 = "mlmodelc";
  sub_10027C150(qword_10085DA28, &v11);
  __cxa_atexit((void (*)(void *))sub_10026B920, &qword_10085D9F8, (void *)&_mh_execute_header);
  sub_10000BF04(qword_10085DA58, "input_1");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10085DA58, (void *)&_mh_execute_header);
  sub_10000BF04(qword_10085DA70, "Identity");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10085DA70, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1002F2AD0(_Unwind_Exception *exception_object)
{
  if (byte_10085DA27 < 0)
    sub_1003E9E58();
  if (byte_10085DA0F < 0)
    operator delete((void *)qword_10085D9F8);
  _Unwind_Resume(exception_object);
}

void sub_1002F2D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1002F2F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002F3350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002F37BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F3B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F3D88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  _Unwind_Resume(a1);
}

void sub_1002F45B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002F4714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1002F47E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002F48E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002F4A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F4AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F4C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F4CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F4E54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1002F4F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002F4FFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002F511C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F51C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F528C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F5394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F5420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F5490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002F5584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002F56A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F57F8(id a1)
{
  PRGlobalDebugSettings *v1;
  void *v2;

  v1 = objc_alloc_init(PRGlobalDebugSettings);
  v2 = (void *)qword_10085DA98;
  qword_10085DA98 = (uint64_t)v1;

}

void sub_1002F5C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002F5E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F5F60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F60B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F63A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1002F657C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F6678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F67D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F68D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F6A38(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  NSObject *v11;
  double v12;
  std::string *v13;
  __int128 v14;
  void *v15;
  void *v16;
  void *v17;
  std::string __p;
  std::string v19;

  if (a1[23] >= 0)
    v4 = a1;
  else
    v4 = *(char **)a1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v4, 4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithString:](NSMutableString, "stringWithString:", v5));
  v7 = objc_alloc_init((Class)NSDateFormatter);
  v8 = objc_claimAutoreleasedReturnValue(+[NSLocale localeWithLocaleIdentifier:](NSLocale, "localeWithLocaleIdentifier:", CFSTR("en_US_POSIX")));
  v9 = (void *)v8;
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (v10)
  {
    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003E9E90(v11);
    v12 = sub_10000883C();
    std::to_string(&v19, v12);
    sub_10013F9B8((const void **)a1, (const void **)&v19.__r_.__value_.__l.__data_, (uint64_t)&__p);
    v13 = std::string::append(&__p, ".protobuf.log");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    objc_msgSend(v7, "setLocale:", v8);
    objc_msgSend(v7, "setDateFormat:", CFSTR("yyyy_MM_dd_HH_mm_ss"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithName:](NSTimeZone, "timeZoneWithName:", CFSTR("UTC")));
    objc_msgSend(v7, "setTimeZone:", v15);

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringFromDate:", v16));

    objc_msgSend(v6, "appendString:", v17);
    objc_msgSend(v6, "appendString:", CFSTR(".protobuf.log"));
    sub_10000BF04(a2, (char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));

  }
}

void sub_1002F6C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1002F6EC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F6ED8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1002F6F4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002F70A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F70BC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_1002F7114(void *a1, id a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v12;
  id v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v3));
  if (v6 && (v7 = objc_opt_class(NSNumber, v5), (objc_opt_isKindOfClass(v6, v7) & 1) != 0))
  {
    a2 = objc_msgSend(v6, "intValue");
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *((_QWORD *)&off_100815180 + v8);
    v12 = 138412802;
    v13 = v3;
    v14 = 2112;
    v15 = v10;
    v16 = 1024;
    v17 = (int)a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#PRDefaults,%@[%@] = %d", (uint8_t *)&v12, 0x1Cu);
  }

  return a2;
}

void sub_1002F725C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1002F7290(void *a1, id a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  int v9;
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v3));

  if (v5)
    a2 = objc_msgSend(v4, "BOOLForKey:", v3);
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((_QWORD *)&off_100815180 + (v5 != 0));
    v9 = 138412802;
    v10 = v3;
    v11 = 2112;
    v12 = v7;
    v13 = 1024;
    v14 = (int)a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#PRDefaults,%@[%@] = %d", (uint8_t *)&v9, 0x1Cu);
  }

  return a2;
}

void sub_1002F73BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double sub_1002F73E4(void *a1, double a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v13;
  id v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  double v18;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v3));
  if (v6 && (v7 = objc_opt_class(NSNumber, v5), (objc_opt_isKindOfClass(v6, v7) & 1) != 0))
  {
    objc_msgSend(v6, "doubleValue");
    a2 = v8;
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *((_QWORD *)&off_100815180 + v9);
    v13 = 138412802;
    v14 = v3;
    v15 = 2112;
    v16 = v11;
    v17 = 2048;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#PRDefaults,%@[%@] = %f", (uint8_t *)&v13, 0x20u);
  }

  return a2;
}

void sub_1002F7534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002F76D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002F77D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F78A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F7A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1002F7BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F7CD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F7D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *AONSenseSampleProvider.AONSENSE_FRAMEWORK_AVAILABLE.unsafeMutableAddressor()
{
  return &static AONSenseSampleProvider.AONSENSE_FRAMEWORK_AVAILABLE;
}

uint64_t static AONSenseSampleProvider.AONSENSE_FRAMEWORK_AVAILABLE.getter()
{
  return 1;
}

id sub_1002F7E40()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AONSenseSampleProvider()), "init");
  static AONSenseSampleProvider.shared = (uint64_t)result;
  return result;
}

id AONSenseSampleProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

uint64_t *AONSenseSampleProvider.shared.unsafeMutableAddressor()
{
  if (qword_10085DAA8 != -1)
    swift_once(&qword_10085DAA8, sub_1002F7E40);
  return &static AONSenseSampleProvider.shared;
}

id static AONSenseSampleProvider.shared.getter()
{
  if (qword_10085DAA8 != -1)
    swift_once(&qword_10085DAA8, sub_1002F7E40);
  return (id)static AONSenseSampleProvider.shared;
}

uint64_t AONSenseSampleProvider.register(queue:callback:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v4 = v3;
  v6 = &v4[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__callout];
  v7 = *(_QWORD *)&v4[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__callout];
  v8 = *(_QWORD *)&v4[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__callout + 8];
  *(_QWORD *)v6 = a2;
  *((_QWORD *)v6 + 1) = a3;
  swift_retain(a3);
  sub_1002F80AC(v7, v8);
  v9 = type metadata accessor for ALFBtAdvResultsRequester(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = ALFBtAdvResultsRequester.init(queue:)(a1);
  v11 = OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__aonSense;
  v12 = *(_QWORD *)&v4[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__aonSense];
  *(_QWORD *)&v4[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__aonSense] = v10;
  result = swift_release(v12);
  v14 = *(_QWORD *)&v4[v11];
  if (v14)
  {
    v15 = swift_allocObject(&unk_1008151A0, 24, 7);
    *(_QWORD *)(v15 + 16) = v4;
    swift_retain(v14);
    v16 = v4;
    dispatch thunk of ALFBtAdvResultsRequester.register(callback:intervalSec:)(sub_1002F80E0, v15, 0x100000000);
    swift_release(v14);
    return swift_release(v15);
  }
  return result;
}

uint64_t sub_1002F80AC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_1002F80BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

double sub_1002F80E0(uint64_t a1, char a2)
{
  return sub_1002F81D0(a1, a2);
}

unint64_t sub_1002F8100()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100853018;
  if (!qword_100853018)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100853018);
  }
  return result;
}

uint64_t variable initialization expression of AONSenseSampleProvider._callout()
{
  return 0;
}

uint64_t variable initialization expression of AONSenseSampleProvider._aonSense()
{
  return 0;
}

double sub_1002F81D0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  char *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  char v28;
  os_log_type_t v29;
  NSObject *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t (*v38)(_QWORD, _QWORD, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t i;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  char v51;
  void (*v52)(char *, uint64_t);
  void (*v53)(unint64_t, _QWORD);
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  char *v58;
  __n128 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unsigned int v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t (*v78)(_QWORD, _QWORD, _QWORD);
  uint64_t v79;
  uint64_t (*v80)(_QWORD, _QWORD, _QWORD);

  sub_1002F88E8(&qword_100853048);
  ((void (*)(void))__chkstk_darwin)();
  v76 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ALBtAdvertisement.BtType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v75 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v72 = (char *)&v57 - v10;
  v11 = type metadata accessor for ALBtAdvertisement(0);
  v79 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v77 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ALBtNotification(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v60 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v57 - v18;
  v64 = *(_QWORD *)(a1 + 16);
  if (v64)
  {
    v73 = v2 + OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__callout;
    v63 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v62 = *(_QWORD *)(v14 + 72);
    v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v74 = enum case for ALBtAdvertisement.BtType.type7(_:);
    v57 = a1;
    v20 = swift_bridgeObjectRetain(a1);
    v21 = 0;
    v69 = a2 & 1;
    v20.n128_u64[0] = 136315394;
    v59 = v20;
    v58 = (char *)&type metadata for Any + 8;
    v71 = v7;
    v22 = (uint64_t)v76;
    v65 = v19;
    v61 = v13;
    v67 = v14;
    do
    {
      v70 = v21;
      v25 = v68(v19, v63 + v62 * v21, v13);
      v26 = ALBtNotification.isScreenOn.getter(v25);
      if (v26 != 2)
      {
        v28 = v26;
        v29 = static os_log_type_t.debug.getter(v26);
        sub_1002F8100();
        v30 = static OS_os_log.default.getter();
        v31 = v60;
        v68(v60, (uint64_t)v19, v13);
        if (os_log_type_enabled(v30, v29))
        {
          v32 = swift_slowAlloc(22, -1);
          v78 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc(32, -1);
          v80 = v78;
          *(_DWORD *)v32 = v59.n128_u32[0];
          if ((v28 & 1) != 0)
            v33 = 0xE90000000000006ELL;
          else
            v33 = 0xEA00000000006666;
          *(_QWORD *)(v32 + 4) = sub_1002F8970(0x4F206E6565726353, v33, (uint64_t *)&v80);
          v34 = swift_bridgeObjectRelease(v33);
          *(_WORD *)(v32 + 12) = 2048;
          v35 = ALBtNotification.advertisements.getter(v34);
          v36 = *(_QWORD *)(v35 + 16);
          v37 = swift_bridgeObjectRelease(v35);
          (*(void (**)(char *, uint64_t, __n128))(v67 + 8))(v31, v13, v37);
          *(_QWORD *)(v32 + 14) = v36;
          _os_log_impl((void *)&_mh_execute_header, v30, v29, "#AONSenseSampleProvider #QE_Log - screen state for this notification: %s with Advertisement count: %ld", (uint8_t *)v32, 0x16u);
          v38 = v78;
          swift_arrayDestroy(v78, 1, v58);
          v7 = v71;
          swift_slowDealloc(v38, -1, -1);
          swift_slowDealloc(v32, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v67 + 8))(v31, v13);
        }

        v19 = v65;
      }
      v39 = ALBtNotification.advertisements.getter(v27);
      v40 = *(_QWORD *)(v39 + 16);
      if (v40)
      {
        v41 = *(unsigned __int8 *)(v79 + 80);
        v66 = v39;
        v42 = v39 + ((v41 + 32) & ~v41);
        v43 = *(_QWORD *)(v79 + 72);
        v78 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v79 + 16);
        v44 = v72;
        v45 = v77;
        for (i = v78(v77, v42, v11); ; i = v78(v45, v42, v11))
        {
          ALBtAdvertisement.type.getter(i);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v22, 1, v6) == 1)
          {
            (*(void (**)(char *, uint64_t))(v79 + 8))(v45, v11);
            sub_1002F9D78(v22, &qword_100853048);
          }
          else
          {
            v47 = v11;
            (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v44, v22, v6);
            v48 = v75;
            (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v75, v74, v6);
            v49 = sub_1002F8928();
            v50 = v44;
            v51 = dispatch thunk of static Equatable.== infix(_:_:)(v44, v48, v6, v49);
            v52 = *(void (**)(char *, uint64_t))(v7 + 8);
            v52(v48, v6);
            if ((v51 & 1) != 0)
            {
              v53 = *(void (**)(unint64_t, _QWORD))v73;
              v22 = (uint64_t)v76;
              if (*(_QWORD *)v73)
              {
                v54 = *(_QWORD *)(v73 + 8);
                sub_1002F96A4((uint64_t)v53, v54);
                v55 = sub_1002F8FB0();
                if (v55)
                {
                  v56 = (void *)v55;
                  v53(v55, v69);
                  sub_1002F80AC((uint64_t)v53, v54);

                }
                else
                {
                  sub_1002F80AC((uint64_t)v53, v54);
                }
                v7 = v71;
              }
              v44 = v72;
              v52(v72, v6);
              v11 = v47;
              v45 = v77;
              (*(void (**)(void))(v79 + 8))();
            }
            else
            {
              v52(v50, v6);
              v11 = v47;
              v45 = v77;
              (*(void (**)(void))(v79 + 8))();
              v44 = v50;
              v22 = (uint64_t)v76;
            }
          }
          v42 += v43;
          if (!--v40)
            break;
        }
        v23 = swift_bridgeObjectRelease(v66);
        v13 = v61;
        v24 = v67;
        v19 = v65;
      }
      else
      {
        v23 = swift_bridgeObjectRelease(v39);
        v13 = v61;
        v24 = v67;
      }
      v21 = v70 + 1;
      (*(void (**)(char *, uint64_t, __n128))(v24 + 8))(v19, v13, v23);
    }
    while (v21 != v64);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v57).n128_u64[0];
  }
  return result;
}

id AONSenseSampleProvider.init()()
{
  char *v0;
  char *v1;
  objc_super v3;

  v1 = &v0[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__callout];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__aonSense] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for AONSenseSampleProvider();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for AONSenseSampleProvider()
{
  return objc_opt_self(_TtC19ProximityDaemonCore22AONSenseSampleProvider);
}

id AONSenseSampleProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AONSenseSampleProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1002F88E8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1002F8928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100853050;
  if (!qword_100853050)
  {
    v1 = type metadata accessor for ALBtAdvertisement.BtType(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ALBtAdvertisement.BtType, v1);
    atomic_store(result, (unint64_t *)&qword_100853050);
  }
  return result;
}

uint64_t sub_1002F8970(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1002F8A40(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1002F96D4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1002F96D4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_1002F96B4(v12);
  return v7;
}

uint64_t sub_1002F8A40(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1002F8BF8(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_1002F8BF8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1002F8C8C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1002F8E64(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1002F8E64(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1002F8C8C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1002F8E00(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1002F8E00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_1002F88E8(&qword_100853058);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1002F8E64(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1002F88E8(&qword_100853058);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_1002F8FB0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t result;
  const char *v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Swift::String v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  double v55;
  double v56;
  unint64_t v57;
  id v58;
  NSString v59;
  uint64_t v60;
  NSString v61;
  NSString v62;
  NSString v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  uint8_t *v68;
  _QWORD v69[2];
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;

  sub_1002F88E8(&qword_100853060);
  __chkstk_darwin();
  v1 = (char *)v69 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for ALBtAdvInfoType7(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = ALBtAdvertisement.rssidB.getter(v4);
  if ((v7 & 0x100000000) != 0)
  {
    v13 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
    sub_1002F8100();
    v14 = static OS_os_log.default.getter();
    v15 = "#AONSenseSampleProvider - no RSSI in advertisement";
    v16 = v13;
    v17 = v14;
    v18 = 50;
LABEL_15:
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, v15, v18, 2, &_swiftEmptyArrayStorage);
LABEL_16:

    return 0;
  }
  v8 = v7;
  if ((v7 & 0x80000000) == 0)
  {
    v9 = static os_log_type_t.error.getter(v7);
    sub_1002F8100();
    v10 = static OS_os_log.default.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 67109120;
      LODWORD(v74) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4, v12 + 4);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "#AONSenseSampleProvider - invalid RSSI: %d", v12, 8u);
      swift_slowDealloc(v12, -1, -1);
    }

    return 0;
  }
  v19 = ALBtAdvertisement.identifier.getter();
  if (!v20)
  {
    v27 = static os_log_type_t.error.getter(v19);
    sub_1002F8100();
    v14 = static OS_os_log.default.getter();
    v15 = "#AONSenseSampleProvider - no identifier in advertisement";
LABEL_14:
    v16 = v27;
    v17 = v14;
    v18 = 56;
    goto LABEL_15;
  }
  v21 = v19;
  v22 = v20;
  v23 = ALBtAdvertisement.productID.getter();
  if ((v23 & 0x100000000) != 0)
  {
    v28 = ((uint64_t (*)(void *))swift_bridgeObjectRelease)(v22);
    v27 = static os_log_type_t.error.getter(v28);
    sub_1002F8100();
    v14 = static OS_os_log.default.getter();
    v15 = "#AONSenseSampleProvider - no product ID in advertisement";
    goto LABEL_14;
  }
  v24 = v23;
  if (!sub_1002F9714(v23) || sub_1002F973C(v24))
  {
    v25 = ((uint64_t (*)(void *))swift_bridgeObjectRelease)(v22);
    v26 = static os_log_type_t.debug.getter(v25);
    sub_1002F8100();
    v14 = static OS_os_log.default.getter();
    v15 = "#AONSenseSampleProvider - non-airpods sample received. Dropping";
    v16 = v26;
    v17 = v14;
    v18 = 63;
    goto LABEL_15;
  }
  v31 = sub_1002F9754(v24);
  v69[1] = String.init(cString:)(v31);
  v71 = v32;
  v33 = sub_1002F9A48(v24);
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v70 = v36;

    v37 = v70;
  }
  else
  {
    v37 = 0xE700000000000000;
    v35 = 0x6E776F6E6B6E55;
  }
  v74 = v35;
  v75 = v37;
  v38._countAndFlagsBits = v21;
  v38._object = v22;
  String.append(_:)(v38);
  ALBtAdvertisement.type7Info.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v39 = v75;
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v39);
    v40 = sub_1002F9D78((uint64_t)v1, &qword_100853060);
    v41 = static os_log_type_t.error.getter(v40);
    sub_1002F8100();
    v14 = static OS_os_log.default.getter();
    v15 = "#AONSenseSampleProvider - no type 7 info in advertisement";
    v16 = v41;
    v17 = v14;
    v18 = 57;
    goto LABEL_15;
  }
  v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v6, v1, v2);
  v43 = ALBtAdvInfoType7.isLeftBud.getter(v42);
  if (v43 == 2)
  {
    v44 = v75;
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v71);
    v45 = ((uint64_t (*)(unint64_t))swift_bridgeObjectRelease)(v44);
    v46 = static os_log_type_t.error.getter(v45);
    sub_1002F8100();
    v47 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "#AONSenseSampleProvider - no Left vs Right Bud Info in advertisement", 68, 2, &_swiftEmptyArrayStorage);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return 0;
  }
  v72 = v21;
  v73 = v22;
  if ((v43 & 1) != 0)
  {
    swift_bridgeObjectRetain(v22);
    v48 = 1952867660;
    v49 = 0xE400000000000000;
  }
  else
  {
    swift_bridgeObjectRetain(v22);
    v48 = 0x7468676952;
    v49 = 0xE500000000000000;
  }
  String.append(_:)(*(Swift::String *)&v48);
  v50 = v73;
  v51 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v52 = ALBtAdvertisement.channel.getter(v51);
  if ((v52 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v75);
    v65 = static os_log_type_t.error.getter(v64);
    sub_1002F8100();
    v14 = static OS_os_log.default.getter();
    v15 = "#AONSenseSampleProvider - no channel number in advertisement";
    v16 = v65;
    v17 = v14;
    v18 = 60;
    goto LABEL_15;
  }
  v53 = v52;
  if ((v52 - 37) >= 3)
  {
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v75);
    v67 = static os_log_type_t.error.getter(v66);
    sub_1002F8100();
    v14 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v14, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v68 = 67109120;
      LODWORD(v72) = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, (char *)&v72 + 4, v68 + 4);
      _os_log_impl((void *)&_mh_execute_header, v14, v67, "#AONSenseSampleProvider - invalid Channel: %d", v68, 8u);
      swift_slowDealloc(v68, -1, -1);
    }
    goto LABEL_16;
  }
  result = ALBtAdvertisement.machContTimeNs.getter();
  if ((v54 & 1) == 0)
  {
    v55 = (double)v8;
    v56 = (double)result / 1000000000.0;
    v57 = v75;
    v58 = objc_allocWithZone((Class)NIBluetoothSample);
    v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    v60 = v71;
    v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v60);
    v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v57);
    v29 = objc_msgSend(v58, "initWithRSSI:identifier:model:channel:machContinuousTimeSeconds:partIdentifier:name:", v59, v61, v53, v62, v63, v55, v56);

    return (unint64_t)v29;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002F96A4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1002F96B4(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1002F96D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1002F9714(int a1)
{
  return ((a1 - 8194) < 0x23) & (0x472863101uLL >> (a1 - 2));
}

BOOL sub_1002F973C(int a1)
{
  return a1 == 8202 || a1 == 8223;
}

const char *sub_1002F9754(int a1)
{
  const char *result;

  if (a1 > 21759)
  {
    if (a1 <= 28943)
    {
      if (a1 > 28935)
      {
        if (a1 == 28936)
          return "AppleTV6,2";
        if (a1 == 28943)
          return "AudioAccessory1,1";
      }
      else
      {
        if (a1 == 21760)
          return "Device1,21760";
        if (a1 == 28420)
          return "AppleTV5,3";
      }
    }
    else if (a1 <= 29714)
    {
      if (a1 == 28944)
        return "AudioAccessory1,2";
      if (a1 == 29455)
        return "AppleTV11,2";
    }
    else
    {
      switch(a1)
      {
        case 29715:
          return "AudioAccessory5,1";
        case 65533:
          return "HeGn";
        case 65534:
          return "ApGn";
      }
    }
    return "?";
  }
  if (a1 <= 8193)
  {
    switch(a1)
    {
      case 0:
        return "Invalid";
      case 614:
        return "ATVRemote1,1";
      case 621:
        return "ATVRemote1,2";
    }
    return "?";
  }
  switch(a1)
  {
    case 8194:
      result = "AirPods1,1";
      break;
    case 8195:
      result = "PowerBeats3,1";
      break;
    case 8197:
      result = "BeatsX1,1";
      break;
    case 8198:
      result = "BeatsSolo3,1";
      break;
    case 8201:
      result = "BeatsStudio3,2";
      break;
    case 8202:
      result = "Device1,8202";
      break;
    case 8203:
      result = "PowerbeatsPro1,1";
      break;
    case 8204:
      result = "BeatsSoloPro1,1";
      break;
    case 8205:
      result = "Powerbeats4,1";
      break;
    case 8206:
      result = "AirPodsPro1,1";
      break;
    case 8207:
      result = "AirPods1,3";
      break;
    case 8208:
      result = "Device1,8208";
      break;
    case 8209:
      result = "BeatsStudioBuds1,1";
      break;
    case 8210:
      result = "Device1,8210";
      break;
    case 8211:
      result = "Device1,8211";
      break;
    case 8212:
      result = "Device1,8212";
      break;
    case 8213:
      result = "Device1,8213";
      break;
    case 8214:
      result = "BeatsStudioBuds1,2";
      break;
    case 8215:
      result = "BeatsStudioPro1,1";
      break;
    case 8216:
      result = "Device1,8216";
      break;
    case 8217:
      result = "Device1,8217";
      break;
    case 8218:
      result = "Device1,8218";
      break;
    case 8219:
      result = "Device1,8219";
      break;
    case 8220:
      result = "Device1,8220";
      break;
    case 8221:
      result = "Device1,8221";
      break;
    case 8222:
      result = "Device1,8222";
      break;
    case 8223:
      result = "Device1,8223";
      break;
    case 8224:
      result = "Device1,8224";
      break;
    case 8228:
      result = "Device1,8228";
      break;
    case 8229:
      result = "Device1,8229";
      break;
    case 8230:
      result = "Device1,8230";
      break;
    default:
      return "?";
  }
  return result;
}

id sub_1002F9A48(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  uint64_t v4;
  void *v5;

  if ((int)a1 <= 612)
  {
    if ((int)a1 <= 557)
    {
      if ((int)a1 > 521)
      {
        if ((_DWORD)a1 != 522 && (_DWORD)a1 != 556 && (_DWORD)a1 != 557)
          goto LABEL_48;
      }
      else
      {
        if (!(_DWORD)a1)
        {
          v5 = 0;
          return v5;
        }
        if ((_DWORD)a1 != 520 && (_DWORD)a1 != 521)
          goto LABEL_48;
      }
    }
    else if ((int)a1 <= 570)
    {
      if ((_DWORD)a1 != 558 && (_DWORD)a1 != 569 && (_DWORD)a1 != 570)
        goto LABEL_48;
    }
    else if ((int)a1 > 597)
    {
      if ((_DWORD)a1 != 598 && (_DWORD)a1 != 599)
        goto LABEL_48;
    }
    else if ((_DWORD)a1 != 571 && (_DWORD)a1 != 597)
    {
      goto LABEL_48;
    }
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
    v2 = v1;
    v3 = CFSTR("apple_wireless_keyboard");
    goto LABEL_39;
  }
  if ((int)a1 > 776)
  {
    if ((int)a1 <= 8212)
    {
      switch((int)a1)
      {
        case 777:
          v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
          v2 = v1;
          v3 = CFSTR("apple_wireless_mouse");
          goto LABEL_39;
        case 780:
          v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
          v2 = v1;
          v3 = CFSTR("apple_mighty_mouse");
          goto LABEL_39;
        case 781:
LABEL_42:
          v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
          v2 = v1;
          v3 = CFSTR("apple_magic_mouse");
          goto LABEL_39;
        case 782:
LABEL_43:
          v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
          v2 = v1;
          v3 = CFSTR("apple_magic_trackpad");
          goto LABEL_39;
        default:
          goto LABEL_48;
      }
    }
    if ((_DWORD)a1 == 8220 || (_DWORD)a1 == 8216 || (_DWORD)a1 == 8213)
    {
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
      v2 = v1;
      v3 = CFSTR("apple_airpods_case");
      goto LABEL_39;
    }
LABEL_48:
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", a1));
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "productName"));
    goto LABEL_40;
  }
  if ((int)a1 <= 665)
  {
    switch((int)a1)
    {
      case 613:
        goto LABEL_43;
      case 615:
        goto LABEL_44;
      case 617:
        goto LABEL_42;
      case 620:
        v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
        v2 = v1;
        v3 = CFSTR("apple_magic_keyboard_keypad");
        goto LABEL_39;
      default:
        goto LABEL_48;
    }
  }
  if ((_DWORD)a1 == 666)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
    v2 = v1;
    v3 = CFSTR("apple_magic_keyboard_touch");
    goto LABEL_39;
  }
  if ((_DWORD)a1 == 668)
  {
LABEL_44:
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
    v2 = v1;
    v3 = CFSTR("apple_magic_keyboard");
    goto LABEL_39;
  }
  if ((_DWORD)a1 != 671)
    goto LABEL_48;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
  v2 = v1;
  v3 = CFSTR("apple_magic_keyboard_touch_keypad");
LABEL_39:
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", v3, &stru_10081D5E0, CFSTR("CBLocalizable")));
LABEL_40:
  v5 = (void *)v4;

  return v5;
}

uint64_t sub_1002F9D78(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1002F88E8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002F9DB4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002F9DD8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1002F9DF0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int16 v15;
  const char *v17;
  int v18;

  v8 = a4[1];
  *(_QWORD *)a1 = *a4;
  *(_QWORD *)(a1 + 8) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1001B0668((_QWORD *)(a1 + 32), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_1001530EC((_QWORD *)(a1 + 72), *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40));
  *(_DWORD *)(a1 + 96) = 0;
  sub_100027674(a1 + 104, a5);
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 158) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 166) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (!*(_QWORD *)(a1 + 16))
  {
    v17 = "_uwbSystem";
    v18 = 228;
    goto LABEL_14;
  }
  if (!*(_QWORD *)a1)
  {
    v17 = "_configProvider";
    v18 = 229;
    goto LABEL_14;
  }
  if (!*(_QWORD *)(a1 + 128))
  {
    v17 = "_getTimeCb";
    v18 = 230;
LABEL_14:
    __assert_rtn("ParameterNegotiator", "AlishaParameterNegotiation.cpp", v18, v17);
  }
  return a1;
}

void sub_1002F9F4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1002B26A8(v3);
  sub_10001AE68(v2);
  sub_10001AE68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F9FCC(uint64_t result)
{
  if (*(_BYTE *)(result + 144))
    *(_BYTE *)(result + 144) = 0;
  return result;
}

uint64_t sub_1002F9FDC(uint64_t result)
{
  *(_DWORD *)(result + 96) = 0;
  if (*(_BYTE *)(result + 158))
    *(_BYTE *)(result + 158) = 0;
  if (*(_BYTE *)(result + 166))
    *(_BYTE *)(result + 166) = 0;
  if (*(_BYTE *)(result + 180))
    *(_BYTE *)(result + 180) = 0;
  if (*(_BYTE *)(result + 200))
    *(_BYTE *)(result + 200) = 0;
  return result;
}

void sub_1002FA014(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  char *v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _QWORD v33[2];
  char v34;
  _BYTE __p[12];
  __int16 v36;
  unint64_t v37;
  char v38;
  _BYTE buf[12];
  __int16 v40;
  _BYTE v41[18];

  v6 = *a2;
  if ((_DWORD)v6 == 12)
    v7 = 1000;
  else
    v7 = 0;
  if ((_DWORD)v6 == 138)
    v8 = 0;
  else
    v8 = v7;
  if ((_DWORD)v6 == 138)
    v9 = 2;
  else
    v9 = 0;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = sub_1002596C8((uint64_t)a2, v6);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v10 + 48))(v33, v10, v11);
  if (LODWORD(v33[0]) || !v34)
  {
    v22 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      if (*a2 == 12)
        v27 = "LESetPHY";
      else
        v27 = "ConnCmpltEventCount0";
      sub_10000BF04(buf, v27);
      v28 = v41[9];
      v29 = *(_BYTE **)buf;
      v31 = sub_1002596C8((uint64_t)a2, v30);
      v32 = buf;
      if (v28 < 0)
        v32 = v29;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v32;
      v36 = 2048;
      v37 = v31;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#alisha-param-neg,BT event %s. Failed to convert BT clock %llu [us]", __p, 0x16u);
      if ((v41[9] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    v23 = 0;
    v24 = 0;
    v25 = -1;
  }
  else
  {
    v12 = v33[1];
    v13 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      if (*a2 == 12)
        v14 = "LESetPHY";
      else
        v14 = "ConnCmpltEventCount0";
      sub_10000BF04(__p, v14);
      v15 = v38;
      v16 = *(_BYTE **)__p;
      v18 = sub_1002596C8((uint64_t)a2, v17);
      v19 = __p;
      *(_DWORD *)buf = 136315650;
      if (v15 < 0)
        v19 = v16;
      *(_QWORD *)&buf[4] = v19;
      v40 = 2048;
      *(_QWORD *)v41 = v18;
      *(_WORD *)&v41[8] = 2048;
      *(_QWORD *)&v41[10] = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,BT event %s. Converted BT clock %llu [us] to UWB clock %llu [us]", buf, 0x20u);
      if (v38 < 0)
        operator delete(*(void **)__p);
    }
    if (*(_BYTE *)(a1 + 144))
    {
      v20 = *(_QWORD *)(a1 + 136);
      if (v12 < v20)
      {
        v21 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v12;
          v40 = 2048;
          *(_QWORD *)v41 = v20;
          _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "#alisha-param-neg,BT event UWB clock (%llu [us]) < shared event UWB clock (%llu [us])", buf, 0x16u);
          v21 = qword_10085F520;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/AlishaSupport/AlishaParameterNegotiation.cpp";
          v40 = 1024;
          *(_DWORD *)v41 = 311;
          *(_WORD *)&v41[4] = 2080;
          *(_QWORD *)&v41[6] = "processBluetoothEvent";
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#alisha-param-neg,%s:%d: assertion failure in %s", buf, 0x1Cu);
        }
        abort();
      }
    }
    else
    {
      v26 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT)
        || (*(_WORD *)buf = 0,
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,Setting this BT event as the shared event for sending timing info to vehicle", buf, 2u), !*(_BYTE *)(a1 + 144)))
      {
        *(_BYTE *)(a1 + 144) = 1;
      }
      *(_QWORD *)(a1 + 136) = v12;
      v20 = v12;
    }
    v8 = 0;
    v23 = v12 - v20;
    v25 = *((_QWORD *)a2 + 5);
    v24 = 1;
    v9 = 1;
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v25;
  *(_QWORD *)(a3 + 16) = v23;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 25) = v24;
  *(_WORD *)(a3 + 26) = 100;
  *(_BYTE *)(a3 + 28) = v9;
  *(_WORD *)(a3 + 30) = v8;
  *(_BYTE *)(a3 + 32) = 1;
}

void sub_1002FA3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *sub_1002FA400(uint64_t a1, const char **a2)
{
  const char *v4;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  int v10;
  const char *v11;
  __int16 v12;
  _QWORD v13[3];

  if (!*(_BYTE *)(a1 + 144))
  {
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *a2;
      v10 = 134217984;
      v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,Setting ranging start time UWB clock (%llu [us]) as the shared event for sending timing info to vehicle", (uint8_t *)&v10, 0xCu);
      v5 = *a2;
      if (*(_BYTE *)(a1 + 144))
      {
LABEL_13:
        *(_QWORD *)(a1 + 136) = v5;
        return (const char *)(*a2 - v5);
      }
    }
    else
    {
      v5 = *a2;
    }
    *(_BYTE *)(a1 + 144) = 1;
    goto LABEL_13;
  }
  v4 = *a2;
  v5 = *(const char **)(a1 + 136);
  if ((uint64_t)*a2 < (uint64_t)v5)
  {
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    {
      v10 = 134218240;
      v11 = v4;
      v12 = 2048;
      v13[0] = v5;
      _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "#alisha-param-neg,Ranging start time UWB clock (%llu [us]) < shared event UWB clock (%llu [us])", (uint8_t *)&v10, 0x16u);
      v6 = qword_10085F520;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v10 = 136315650;
      v11 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/AlishaSupport/AlishaParameterNegotiation.cpp";
      v12 = 1024;
      LODWORD(v13[0]) = 334;
      WORD2(v13[0]) = 2080;
      *(_QWORD *)((char *)v13 + 6) = "getUwbTime0";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#alisha-param-neg,%s:%d: assertion failure in %s", (uint8_t *)&v10, 0x1Cu);
    }
    abort();
  }
  return (const char *)(*a2 - v5);
}

uint64_t sub_1002FA5C4(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int8 v19;
  void *__p;
  unsigned __int16 *v22;
  _QWORD v23[2];

  if (*(_DWORD *)(a1 + 96))
  {
    LODWORD(v23[0]) = -2000;
    *(_QWORD *)((char *)v23 + 4) = 0;
    return v23[0];
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)a1 + 16))(&__p);
  v4 = *a2;
  v5 = a2[1];
  v6 = (unsigned __int16 *)__p;
  if (*a2 != v5)
  {
    while (__p == v22)
    {
LABEL_8:
      if (++v4 == v5)
        goto LABEL_28;
    }
    v7 = (unsigned __int16 *)__p;
    while (*v4 != *v7)
    {
      if (++v7 == v22)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_28:
    v16 = -2002;
    goto LABEL_36;
  }
  v8 = a2[3];
  v9 = a2[4];
  if (v8 != v9)
  {
    v10 = *(unsigned __int16 **)(a1 + 40);
    while (*(unsigned __int16 **)(a1 + 32) == v10)
    {
LABEL_17:
      if (++v8 == v9)
        goto LABEL_34;
    }
    v11 = *(unsigned __int16 **)(a1 + 32);
    while (*v8 != *v11)
    {
      if (++v11 == v10)
        goto LABEL_17;
    }
  }
  if (v8 == v9)
  {
LABEL_34:
    v16 = -2003;
    goto LABEL_36;
  }
  v12 = (unsigned __int8 *)a2[6];
  v13 = (unsigned __int8 *)a2[7];
  if (v12 != v13)
  {
    v14 = *(unsigned __int8 **)(a1 + 80);
    while (*(unsigned __int8 **)(a1 + 72) == v14)
    {
LABEL_26:
      if (++v12 == v13)
        goto LABEL_35;
    }
    v15 = *(unsigned __int8 **)(a1 + 72);
    while (*v12 != *v15)
    {
      if (++v15 == v14)
        goto LABEL_26;
    }
  }
  if (v12 == v13)
  {
LABEL_35:
    v16 = -2004;
LABEL_36:
    LODWORD(v23[0]) = v16;
    *(_QWORD *)((char *)v23 + 4) = 0;
    if (!__p)
      return v23[0];
LABEL_37:
    v22 = v6;
    operator delete(v6);
    return v23[0];
  }
  v17 = *v4;
  v18 = *v8;
  v19 = *v12;
  if (!*(_BYTE *)(a1 + 158))
    *(_BYTE *)(a1 + 158) = 1;
  *(_WORD *)(a1 + 152) = v17;
  *(_WORD *)(a1 + 154) = v18;
  *(_BYTE *)(a1 + 156) = v19;
  LODWORD(v23[0]) = 0;
  *(_QWORD *)((char *)v23 + 4) = *(_QWORD *)(a1 + 152);
  if (v6)
    goto LABEL_37;
  return v23[0];
}

void sub_1002FA78C(_QWORD *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  void *v15;
  void *v16;
  void *v17;
  BOOL v19;
  char v20;
  unsigned int v21;
  unsigned __int16 *i;
  char v23;
  int v24;
  int v25;
  unsigned __int16 v26;
  char v27;
  char v28;
  int v29;
  char v30;
  void *__p;
  unsigned __int16 *v32;

  if (*((_DWORD *)a1 + 24))
  {
    v4 = -2000;
LABEL_10:
    *(_DWORD *)a3 = v4;
    *(_BYTE *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
  v7 = *((unsigned __int8 *)a1 + 158);
  v8 = qword_10085F520;
  v9 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v9)
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,Negotiating session parameters WITH a previously cached capability response", (uint8_t *)&__p, 2u);
      if (!*((_BYTE *)a1 + 158))
        sub_10000BA44();
    }
    if (*a2 != *((unsigned __int16 *)a1 + 76)
      || a2[1] != *((unsigned __int16 *)a1 + 77)
      || *((unsigned __int8 *)a2 + 4) != *((unsigned __int8 *)a1 + 156))
    {
      v4 = -2005;
      goto LABEL_10;
    }
    goto LABEL_42;
  }
  if (v9)
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,Negotiating session parameters WITHOUT a previously cached capability response", (uint8_t *)&__p, 2u);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 16))(&__p);
  v10 = (unsigned __int16 *)__p;
  v11 = v32;
  if (__p == v32)
  {
    v12 = (unsigned __int16 *)__p;
  }
  else
  {
    v12 = (unsigned __int16 *)__p;
    while (*v12 != *a2)
    {
      if (++v12 == v32)
      {
        v12 = v32;
        break;
      }
    }
  }
  v14 = (unsigned __int16 *)a1[4];
  v13 = (unsigned __int16 *)a1[5];
  if (v14 != v13)
  {
    while (*v14 != a2[1])
    {
      if (++v14 == v13)
      {
        v14 = (unsigned __int16 *)a1[5];
        break;
      }
    }
  }
  v15 = (void *)a1[10];
  v16 = memchr((void *)a1[9], *((char *)a2 + 4), (size_t)v15 - a1[9]);
  if (v16)
    v17 = v16;
  else
    v17 = v15;
  v19 = v12 == v11 || v14 == v13 || v17 == v15;
  v20 = v19;
  if (v19)
  {
    *(_DWORD *)a3 = -2020;
    *(_BYTE *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  if (v10)
  {
    v32 = v10;
    operator delete(v10);
  }
  if ((v20 & 1) == 0)
  {
LABEL_42:
    v21 = (a1[8] & *((_BYTE *)a2 + 5));
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 24))(&__p);
    if (v21)
    {
      for (i = (unsigned __int16 *)__p; ; i = (unsigned __int16 *)((char *)i + 1))
      {
        if (i == v32)
        {
          v24 = -2008;
          goto LABEL_49;
        }
        v23 = *(_BYTE *)i;
        if (((v21 >> *(_BYTE *)i) & 1) != 0)
          break;
      }
      v25 = *((unsigned __int8 *)a1 + 166);
      v26 = a2[2];
      *((_DWORD *)a1 + 40) = *(_DWORD *)a2;
      *((_WORD *)a1 + 82) = v26;
      if (!v25)
        *((_BYTE *)a1 + 166) = 1;
      v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
      v28 = *((_BYTE *)a1 + 56);
      v29 = *((_DWORD *)a1 + 15);
      v30 = *((_BYTE *)a1 + 65);
      if (!*((_BYTE *)a1 + 180))
        *((_BYTE *)a1 + 180) = 1;
      *((_BYTE *)a1 + 168) = v27;
      *((_BYTE *)a1 + 169) = v28;
      *((_DWORD *)a1 + 43) = v29;
      *((_BYTE *)a1 + 176) = v23;
      *((_BYTE *)a1 + 177) = v30;
      *((_DWORD *)a1 + 24) = 1;
      *(_DWORD *)a3 = 0;
      *(_OWORD *)(a3 + 4) = *(_OWORD *)(a1 + 21);
    }
    else
    {
      v24 = -2016;
LABEL_49:
      *(_DWORD *)a3 = v24;
      *(_BYTE *)(a3 + 4) = 0;
      *(_BYTE *)(a3 + 16) = 0;
    }
    if (__p)
    {
      v32 = (unsigned __int16 *)__p;
      operator delete(__p);
    }
  }
}

void sub_1002FAA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1002FAA7C@<X0>(unint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  _QWORD *v5;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  __int16 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  int v21;
  char v22;
  int v23;
  int v24;
  unint64_t v25;
  _BYTE v26[23];

  if (*(_DWORD *)(result + 96) != 1)
  {
    v8 = -2000;
    goto LABEL_8;
  }
  v5 = (_QWORD *)result;
  if (!*(_BYTE *)(result + 166) || !*(_BYTE *)(result + 180))
  {
    v8 = -2001;
    goto LABEL_8;
  }
  v7 = *a2;
  if (v7 < *(unsigned __int8 *)(result + 168))
  {
    v8 = -2007;
LABEL_8:
    *(_DWORD *)a3 = v8;
LABEL_9:
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 40) = 0;
    return result;
  }
  v9 = a2[1];
  v8 = -2010;
  if (v9 > 0x18 || ((1 << v9) & 0x1001358) == 0)
    goto LABEL_8;
  v10 = a2[3];
  if ((v10 > 0x30 || ((1 << v10) & 0x1001101051350) == 0) && v10 != 96 && v10 != 72)
  {
LABEL_20:
    v8 = -2009;
    goto LABEL_8;
  }
  if (v10 - 4 < a2[2])
  {
    v8 = -2012;
    goto LABEL_8;
  }
  if (0x120 % (v10 * v9))
  {
    v8 = -2011;
    goto LABEL_8;
  }
  v11 = 1;
  switch(a2[1])
  {
    case 3u:
      break;
    case 4u:
      v11 = 2;
      break;
    case 5u:
    case 7u:
    case 0xAu:
    case 0xBu:
      goto LABEL_20;
    case 6u:
      v11 = 4;
      break;
    case 8u:
      v11 = 8;
      break;
    case 9u:
      v11 = 16;
      break;
    case 0xCu:
      v11 = 32;
      break;
    default:
      if (v9 != 24)
        goto LABEL_20;
      v11 = 64;
      break;
  }
  if ((*(_BYTE *)(result + 169) & v11) == 0)
  {
    v8 = -2017;
    goto LABEL_8;
  }
  v12 = a2[8];
  v13 = v12 & 0xE0;
  if (v13 == 32 || v13 == 64)
  {
    if ((((v12 & 0x1F) - 8) & 0xFFFFFFF7) == 0)
      goto LABEL_34;
LABEL_40:
    v8 = -2015;
    goto LABEL_8;
  }
  if (v13 != 128)
  {
    v8 = -2014;
    goto LABEL_8;
  }
  if ((v12 & 0x1F) != 0)
    goto LABEL_40;
LABEL_34:
  if ((v12 & ~*(unsigned __int8 *)(result + 177)) != 0)
  {
    v8 = -2019;
    goto LABEL_8;
  }
  if (a2[10])
  {
    result = sub_1002FADE4(a2[9], v7, v9, v10);
    if ((_DWORD)result)
    {
      *(_DWORD *)a3 = result;
      goto LABEL_9;
    }
    v14 = HIDWORD(result);
    v3 = result >> 40;
    v15 = HIWORD(result);
  }
  else
  {
    LOBYTE(v14) = 0;
    LODWORD(v15) = 0;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 32))(*v5, (*((_DWORD *)a2 + 1) & *((_DWORD *)v5 + 43)));
  if ((result & 0xFF000000000000) != 0)
    v16 = 0;
  else
    v16 = -1004;
  if ((_DWORD)result)
    v16 = result;
  if (v16)
  {
    *(_DWORD *)a3 = v16;
    goto LABEL_9;
  }
  if ((result & 0xFF000000000000) == 0 || !*((_BYTE *)v5 + 180) || !*((_BYTE *)v5 + 166))
    sub_10000BA44();
  v17 = *(_WORD *)a2;
  v18 = a2[3];
  v19 = a2[2];
  v20 = a2[8];
  *((_BYTE *)v5 + 184) = *((_BYTE *)v5 + 176);
  v21 = *((_DWORD *)v5 + 40);
  v22 = *((_BYTE *)v5 + 164);
  v23 = (v3 << 8) | ((_DWORD)v15 << 16) | v14;
  v24 = *((unsigned __int8 *)v5 + 200);
  *((_BYTE *)v5 + 185) = BYTE5(result);
  *(_DWORD *)((char *)v5 + 186) = v21;
  *((_WORD *)v5 + 95) = v17;
  if (!v24)
    *((_BYTE *)v5 + 200) = 1;
  v25 = HIDWORD(result);
  *((_BYTE *)v5 + 192) = v18;
  *((_BYTE *)v5 + 193) = v19;
  *((_BYTE *)v5 + 194) = v20;
  *((_BYTE *)v5 + 195) = v22;
  *((_WORD *)v5 + 98) = v23;
  *((_BYTE *)v5 + 198) = BYTE2(v23);
  *((_BYTE *)v5 + 166) = 0;
  *((_BYTE *)v5 + 180) = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 48))(*v5, v5 + 23);
  *((_DWORD *)v5 + 24) = 2;
  *(_OWORD *)&v26[7] = *(_OWORD *)(v5 + 23);
  *(_OWORD *)(a3 + 9) = *(_OWORD *)v26;
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = v25;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v26[15];
  *(_QWORD *)(a3 + 32) = result;
  *(_BYTE *)(a3 + 40) = 1;
  return result;
}

unint64_t sub_1002FADE4(unsigned int a1, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  unsigned int v5;
  const mach_header_64 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  if (a1 >> 6)
  {
    v4 = 4294965273;
    if (a1 >> 6 == 1)
    {
      if (a3)
      {
        if (a4)
        {
          v5 = 288 * a2 / a3;
          if (v5 >= a4)
          {
            v6 = 0;
            v8 = a1 & 0x3F;
            if ((a1 & 0x3F) != 0)
            {
              if (v8 > 0x10)
              {
                v7 = 0;
              }
              else
              {
                v9 = v5 / a4 - 1;
                v7 = 0;
                if (v9 >= v8)
                {
                  v7 = v8 << 40;
                  v4 = 0x1000000000000;
                  v6 = &_mh_execute_header;
                }
              }
            }
            else
            {
              v7 = 0;
            }
          }
          else
          {
            v6 = 0;
            v7 = 0;
            v4 = 4294965275;
          }
        }
        else
        {
          v6 = 0;
          v7 = 0;
          v4 = 4294965287;
        }
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v4 = 4294965286;
      }
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v4 = 4294965274;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v4 = 0x1000000000000;
  }
  return v4 | (unint64_t)v6 | v7;
}

double sub_1002FAEB4@<D0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v6;
  NSObject *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  __int128 v14;
  double buf[3];

  if (*((_DWORD *)a1 + 24) != 2)
  {
    v9 = -2000;
LABEL_12:
    *(_DWORD *)a3 = v9;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 40) = 0;
    return result;
  }
  if (!*((_BYTE *)a1 + 200))
  {
    v9 = -2001;
    goto LABEL_12;
  }
  v14 = *(_OWORD *)(a1 + 23);
  v6 = a2[1];
  if (a2[1])
  {
    v6 = *a2;
    if (!*a2)
    {
      v7 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,Recovery RAN multiplier of 0 was specified. Using a multiplier of 1 instead.", (uint8_t *)buf, 2u);
      if (!a2[1])
        sub_10000BA44();
      v6 = *a2;
      if (!*a2)
LABEL_8:
        v6 = 1;
    }
    BYTE6(v14) = v6;
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  v10 = v6 | (v8 << 8);
  v11 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a1 + 48))(*a1, &v14);
  *(_OWORD *)((char *)buf + 6) = v14;
  result = buf[0];
  *(_OWORD *)(a3 + 10) = *(_OWORD *)buf;
  v13 = *(_QWORD *)((char *)&buf[1] + 6);
  *(_DWORD *)a3 = 0;
  *(_WORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = v11;
  *(_BYTE *)(a3 + 40) = 1;
  return result;
}

_QWORD *sub_1002FB008@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 == 2)
  {
    v2 = "RequireCapabilityExchange";
  }
  else if (a1 == 255)
  {
    v2 = "WrongParameters";
  }
  else
  {
    v2 = "UnsupportedChannelBitmask";
  }
  return sub_10000BF04(a2, v2);
}

_QWORD *sub_1002FB044@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_100815260[a1 - 1]);
}

void sub_1002FB05C(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  int v4;
  int v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  const char *v14;
  int v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  void *v20[2];
  char v21;

  sub_10000BF04(v20, off_100815298[(char)*a1 - 1]);
  memset(&v19, 0, sizeof(v19));
  v4 = *a1;
  switch(v4)
  {
    case 3:
      if (!a1[6])
      {
        v14 = "deviceRangingIntentSubEventCode.has_value()";
        v15 = 323;
        goto LABEL_36;
      }
      sub_10000BF04(&v18, off_1008152B0[(char)a1[5]]);
      break;
    case 2:
      if (!a1[4])
      {
        v14 = "rangingSessionStatusChangedSubEventCode.has_value()";
        v15 = 319;
        goto LABEL_36;
      }
      sub_1002FB044(a1[3], &v18);
      break;
    case 1:
      if (a1[2])
      {
        v5 = a1[1];
        if (v5 == 2)
        {
          v6 = "RequireCapabilityExchange";
        }
        else if (v5 == 255)
        {
          v6 = "WrongParameters";
        }
        else
        {
          v6 = "UnsupportedChannelBitmask";
        }
        sub_10000BF04(&v18, v6);
        break;
      }
      v14 = "commandCompleteSubEventCode.has_value()";
      v15 = 315;
LABEL_36:
      __assert_rtn("toString", "AlishaDCKCoder.cpp", v15, v14);
    default:
      goto LABEL_16;
  }
  v19 = v18;
LABEL_16:
  std::operator+<char>(&v16, "(", v20);
  v7 = std::string::append(&v16, ", ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v19;
  else
    v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v17, (const std::string::value_type *)v9, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v18, ")");
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(v20[0]);
}

void sub_1002FB288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

_WORD *sub_1002FB310(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

unint64_t sub_1002FB318(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  int v6;
  int v7;

  v2 = 4294963292;
  v3 = *a2;
  v4 = a2[1] - *a2;
  if (v4 >= 4)
  {
    if (v4 >> 16)
    {
      v5 = 0;
      v6 = 0;
      v2 = 4294963295;
    }
    else if (v4 == __rev16(*(unsigned __int16 *)(v3 + 2)) + 4)
    {
      v5 = *(_BYTE *)v3 & 0x3F;
      if (v5 > 5)
      {
        v5 = 0;
        v6 = 0;
        v2 = 4294963293;
      }
      else
      {
        v7 = *(unsigned __int8 *)(v3 + 1);
        if ((v7 - 1) > 0x14)
        {
          v5 = 0;
          v6 = 0;
        }
        else
        {
          v6 = v7 << 8;
          v2 = 0x1000000000000;
        }
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v2 = 4294963294;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v2 = 4294963296;
  }
  return v2 | ((unint64_t)(v6 | v5) << 32);
}

uint64_t sub_1002FB3C8(int a1)
{
  if (a1 == 256)
    return 65792;
  else
    return 256;
}

void sub_1002FB3E0(__int16 a1, unint64_t *a2)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  _BYTE *v25;
  char v26;

  v3 = *a2;
  v2 = (_BYTE *)a2[1];
  v4 = (uint64_t)&v2[-*a2];
  if ((unint64_t)(v4 - 65534) <= 0xFFFFFFFFFFFEFFFFLL)
    sub_1003E9F84();
  v7 = a2[2];
  if ((unint64_t)v2 >= v7)
  {
    if (v4 <= -2)
      goto LABEL_41;
    v9 = v7 - v3;
    if (2 * v9 <= v4 + 1)
      v10 = v4 + 1;
    else
      v10 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    *(_BYTE *)(v12 + v4) = HIBYTE(a1);
    v8 = (_BYTE *)(v12 + v4 + 1);
    if (v2 == (_BYTE *)v3)
    {
      v12 += v4;
    }
    else
    {
      v14 = &v2[~v3];
      do
      {
        v15 = *--v2;
        (v14--)[v12] = v15;
      }
      while (v2 != (_BYTE *)v3);
      v2 = (_BYTE *)*a2;
    }
    *a2 = v12;
    a2[1] = (unint64_t)v8;
    a2[2] = (unint64_t)v13;
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = HIBYTE(a1);
    v8 = v2 + 1;
  }
  a2[1] = (unint64_t)v8;
  v16 = a2[2];
  if ((unint64_t)v8 < v16)
  {
    *v8 = a1;
    v17 = (uint64_t)(v8 + 1);
    goto LABEL_39;
  }
  v18 = *a2;
  v19 = &v8[-*a2];
  v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0)
LABEL_41:
    sub_100026E7C();
  v21 = v16 - v18;
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
    v22 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v22 = v20;
  if (v22)
    v23 = (unint64_t)operator new(v22);
  else
    v23 = 0;
  v24 = (char *)(v23 + v22);
  v19[v23] = a1;
  v17 = (uint64_t)&v19[v23 + 1];
  if (v8 == (_BYTE *)v18)
  {
    *a2 = (unint64_t)&v19[v23];
    a2[1] = v17;
    a2[2] = (unint64_t)v24;
LABEL_38:
    operator delete(v8);
    goto LABEL_39;
  }
  v25 = &v8[~v18];
  do
  {
    v26 = *--v8;
    (v25--)[v23] = v26;
  }
  while (v8 != (_BYTE *)v18);
  v8 = (_BYTE *)*a2;
  *a2 = v23;
  a2[1] = v17;
  a2[2] = (unint64_t)v24;
  if (v8)
    goto LABEL_38;
LABEL_39:
  a2[1] = v17;
}

void sub_1002FB5A8(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char *v13;
  _BYTE *v14;
  char v15;
  _BYTE *v16;
  unint64_t v17;
  __int16 v18;
  const char *v19;
  int v20;
  const char *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char v25;
  void *__p;
  _BYTE *v27;
  unint64_t v28;

  LOBYTE(v22) = 0;
  sub_100191910(&__p, 4uLL, &v22);
  sub_1002FB3E0(*(_WORD *)a1, (unint64_t *)&__p);
  sub_1002FB3E0(*(_WORD *)(a1 + 2), (unint64_t *)&__p);
  v5 = (unint64_t)__p;
  v4 = v27;
  v6 = v27 - (_BYTE *)__p;
  if ((unint64_t)(v27 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
    v19 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    v20 = 225;
    v21 = "append";
    goto LABEL_31;
  }
  v7 = *(_BYTE *)(a1 + 4);
  if ((unint64_t)v27 >= v28)
  {
    v9 = v28 - (_QWORD)__p;
    if (2 * (v28 - (unint64_t)__p) <= v6 + 1)
      v10 = v6 + 1;
    else
      v10 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v13 = (char *)v12 + v11;
    *((_BYTE *)v12 + v6) = v7;
    v8 = (char *)v12 + v6 + 1;
    if (v4 == (_BYTE *)v5)
    {
      v12 = (char *)v12 + v6;
    }
    else
    {
      v14 = &v4[~v5];
      do
      {
        v15 = *--v4;
        (v14--)[(_QWORD)v12] = v15;
      }
      while (v4 != (_BYTE *)v5);
      v4 = __p;
    }
    __p = v12;
    v27 = v8;
    v28 = (unint64_t)v13;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v27 = v7;
    v8 = v4 + 1;
  }
  v27 = v8;
  v16 = __p;
  v17 = v8 - (_BYTE *)__p;
  if ((unint64_t)(v8 - (_BYTE *)__p) >= 0x10000)
  {
    v19 = "msg.size() <= kMaxMessageSize";
    v20 = 166;
    v21 = "populateHeader";
LABEL_31:
    __assert_rtn(v21, "AlishaDCKCoder.cpp", v20, v19);
  }
  if (v17 <= 3)
  {
    sub_10003F150((unint64_t *)&__p, 4 - v17);
    v16 = __p;
    LOWORD(v17) = (_WORD)v27 - (_WORD)__p;
  }
  v18 = v17 - 4;
  *v16 = 2;
  *((_BYTE *)__p + 1) = 2;
  *((_BYTE *)__p + 2) = HIBYTE(v18);
  *((_BYTE *)__p + 3) = v18;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  sub_1001530EC(&v22, __p, (uint64_t)v27, v27 - (_BYTE *)__p);
  v25 = 1;
  *a2 = 0;
  sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&v22);
  if (v25 && v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
}

void sub_1002FB7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1002FB800(int a1, unint64_t *a2)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  _BYTE *v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  char *v46;
  _BYTE *v47;
  char v48;

  v3 = *a2;
  v2 = (_BYTE *)a2[1];
  v4 = (uint64_t)&v2[-*a2];
  if ((unint64_t)(v4 - 65532) <= 0xFFFFFFFFFFFEFFFFLL)
    sub_1003E9FAC();
  v7 = a2[2];
  if ((unint64_t)v2 >= v7)
  {
    if (v4 <= -2)
      goto LABEL_77;
    v9 = v7 - v3;
    if (2 * v9 <= v4 + 1)
      v10 = v4 + 1;
    else
      v10 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    *(_BYTE *)(v12 + v4) = HIBYTE(a1);
    v8 = (_BYTE *)(v12 + v4 + 1);
    if (v2 == (_BYTE *)v3)
    {
      v12 += v4;
    }
    else
    {
      v14 = &v2[~v3];
      do
      {
        v15 = *--v2;
        (v14--)[v12] = v15;
      }
      while (v2 != (_BYTE *)v3);
      v2 = (_BYTE *)*a2;
    }
    *a2 = v12;
    a2[1] = (unint64_t)v8;
    a2[2] = (unint64_t)v13;
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = HIBYTE(a1);
    v8 = v2 + 1;
  }
  a2[1] = (unint64_t)v8;
  v16 = a2[2];
  if ((unint64_t)v8 < v16)
  {
    *v8 = BYTE2(a1);
    v17 = v8 + 1;
    goto LABEL_39;
  }
  v18 = *a2;
  v19 = &v8[-*a2];
  v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0)
    goto LABEL_77;
  v21 = v16 - v18;
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
    v22 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v22 = v20;
  if (v22)
    v23 = (unint64_t)operator new(v22);
  else
    v23 = 0;
  v24 = (char *)(v23 + v22);
  v19[v23] = BYTE2(a1);
  v17 = &v19[v23 + 1];
  if (v8 == (_BYTE *)v18)
  {
    *a2 = (unint64_t)&v19[v23];
    a2[1] = (unint64_t)v17;
    a2[2] = (unint64_t)v24;
LABEL_38:
    operator delete(v8);
    goto LABEL_39;
  }
  v25 = &v8[~v18];
  do
  {
    v26 = *--v8;
    (v25--)[v23] = v26;
  }
  while (v8 != (_BYTE *)v18);
  v8 = (_BYTE *)*a2;
  *a2 = v23;
  a2[1] = (unint64_t)v17;
  a2[2] = (unint64_t)v24;
  if (v8)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v17;
  v27 = a2[2];
  if ((unint64_t)v17 < v27)
  {
    *v17 = BYTE1(a1);
    v28 = v17 + 1;
    goto LABEL_57;
  }
  v29 = *a2;
  v30 = &v17[-*a2];
  v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0)
    goto LABEL_77;
  v32 = v27 - v29;
  if (2 * v32 > v31)
    v31 = 2 * v32;
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
    v33 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v33 = v31;
  if (v33)
    v34 = (unint64_t)operator new(v33);
  else
    v34 = 0;
  v35 = (char *)(v34 + v33);
  v30[v34] = BYTE1(a1);
  v28 = &v30[v34 + 1];
  if (v17 == (_BYTE *)v29)
  {
    *a2 = (unint64_t)&v30[v34];
    a2[1] = (unint64_t)v28;
    a2[2] = (unint64_t)v35;
LABEL_56:
    operator delete(v17);
    goto LABEL_57;
  }
  v36 = &v17[~v29];
  do
  {
    v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (_BYTE *)v29);
  v17 = (_BYTE *)*a2;
  *a2 = v34;
  a2[1] = (unint64_t)v28;
  a2[2] = (unint64_t)v35;
  if (v17)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v28;
  v38 = a2[2];
  if ((unint64_t)v28 < v38)
  {
    *v28 = a1;
    v39 = (uint64_t)(v28 + 1);
    goto LABEL_75;
  }
  v40 = *a2;
  v41 = &v28[-*a2];
  v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0)
LABEL_77:
    sub_100026E7C();
  v43 = v38 - v40;
  if (2 * v43 > v42)
    v42 = 2 * v43;
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
    v45 = (unint64_t)operator new(v44);
  else
    v45 = 0;
  v46 = (char *)(v45 + v44);
  v41[v45] = a1;
  v39 = (uint64_t)&v41[v45 + 1];
  if (v28 == (_BYTE *)v40)
  {
    *a2 = (unint64_t)&v41[v45];
    a2[1] = v39;
    a2[2] = (unint64_t)v46;
LABEL_74:
    operator delete(v28);
    goto LABEL_75;
  }
  v47 = &v28[~v40];
  do
  {
    v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (_BYTE *)v40);
  v28 = (_BYTE *)*a2;
  *a2 = v45;
  a2[1] = v39;
  a2[2] = (unint64_t)v46;
  if (v28)
    goto LABEL_74;
LABEL_75:
  a2[1] = v39;
}

void sub_1002FBB48(char *a1@<X1>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  void *v23;
  char *v24;
  _BYTE *v25;
  char v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  _BYTE *v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  void *v35;
  char *v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  _BYTE *v42;
  unint64_t v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  char *v47;
  _BYTE *v48;
  char v49;
  _BYTE *v50;
  unint64_t v51;
  __int16 v52;
  const char *v53;
  int v54;
  const char *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  char v59;
  void *__p;
  _BYTE *v61;
  unint64_t v62;

  LOBYTE(v56) = 0;
  sub_100191910(&__p, 4uLL, &v56);
  v5 = (unint64_t)__p;
  v4 = v61;
  v6 = v61 - (_BYTE *)__p;
  if ((unint64_t)(v61 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
    goto LABEL_86;
  v7 = *a1;
  if ((unint64_t)v61 >= v62)
  {
    v9 = v62 - (_QWORD)__p;
    if (2 * (v62 - (unint64_t)__p) <= v6 + 1)
      v10 = v6 + 1;
    else
      v10 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v13 = (char *)v12 + v11;
    *((_BYTE *)v12 + v6) = v7;
    v8 = (char *)v12 + v6 + 1;
    if (v4 == (_BYTE *)v5)
    {
      v12 = (char *)v12 + v6;
    }
    else
    {
      v14 = &v4[~v5];
      do
      {
        v15 = *--v4;
        (v14--)[(_QWORD)v12] = v15;
      }
      while (v4 != (_BYTE *)v5);
      v4 = __p;
    }
    __p = v12;
    v61 = v8;
    v62 = (unint64_t)v13;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v61 = v7;
    v8 = v4 + 1;
  }
  v61 = v8;
  v16 = (unint64_t)__p;
  v17 = v8 - (_BYTE *)__p;
  if ((unint64_t)(v8 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
    goto LABEL_86;
  v18 = a1[1];
  if ((unint64_t)v8 >= v62)
  {
    v20 = v62 - (_QWORD)__p;
    if (2 * (v62 - (unint64_t)__p) <= v17 + 1)
      v21 = v17 + 1;
    else
      v21 = 2 * v20;
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = operator new(v22);
    else
      v23 = 0;
    v24 = (char *)v23 + v22;
    *((_BYTE *)v23 + v17) = v18;
    v19 = (char *)v23 + v17 + 1;
    if (v8 == (_BYTE *)v16)
    {
      __p = (char *)v23 + v17;
      v61 = (char *)v23 + v17 + 1;
      v62 = (unint64_t)v24;
    }
    else
    {
      v25 = &v8[~v16];
      do
      {
        v26 = *--v8;
        (v25--)[(_QWORD)v23] = v26;
      }
      while (v8 != (_BYTE *)v16);
      v8 = __p;
      __p = v23;
      v61 = (char *)v23 + v17 + 1;
      v62 = (unint64_t)v24;
      if (!v8)
        goto LABEL_39;
    }
    operator delete(v8);
  }
  else
  {
    *v8 = v18;
    v19 = v8 + 1;
  }
LABEL_39:
  v61 = v19;
  sub_1002FB800(*((_DWORD *)a1 + 1), (unint64_t *)&__p);
  v28 = (unint64_t)__p;
  v27 = v61;
  v29 = v61 - (_BYTE *)__p;
  if ((unint64_t)(v61 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
    goto LABEL_86;
  v30 = a1[8];
  if ((unint64_t)v61 >= v62)
  {
    v32 = v62 - (_QWORD)__p;
    if (2 * (v62 - (unint64_t)__p) <= v29 + 1)
      v33 = v29 + 1;
    else
      v33 = 2 * v32;
    if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
      v34 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
      v35 = operator new(v34);
    else
      v35 = 0;
    v36 = (char *)v35 + v34;
    *((_BYTE *)v35 + v29) = v30;
    v31 = (char *)v35 + v29 + 1;
    if (v27 == (_BYTE *)v28)
    {
      v35 = (char *)v35 + v29;
    }
    else
    {
      v37 = &v27[~v28];
      do
      {
        v38 = *--v27;
        (v37--)[(_QWORD)v35] = v38;
      }
      while (v27 != (_BYTE *)v28);
      v27 = __p;
    }
    __p = v35;
    v61 = v31;
    v62 = (unint64_t)v36;
    if (v27)
      operator delete(v27);
  }
  else
  {
    *v61 = v30;
    v31 = v27 + 1;
  }
  v61 = v31;
  v39 = (unint64_t)__p;
  v40 = v31 - (_BYTE *)__p;
  if ((unint64_t)(v31 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
LABEL_86:
    v53 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    v54 = 225;
    v55 = "append";
    goto LABEL_87;
  }
  v41 = a1[9];
  if ((unint64_t)v31 < v62)
  {
    *v31 = v41;
    v42 = v31 + 1;
    goto LABEL_77;
  }
  v43 = v62 - (_QWORD)__p;
  if (2 * (v62 - (unint64_t)__p) <= v40 + 1)
    v44 = v40 + 1;
  else
    v44 = 2 * v43;
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
    v45 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v45 = v44;
  if (v45)
    v46 = operator new(v45);
  else
    v46 = 0;
  v47 = (char *)v46 + v45;
  *((_BYTE *)v46 + v40) = v41;
  v42 = (char *)v46 + v40 + 1;
  if (v31 == (_BYTE *)v39)
  {
    __p = (char *)v46 + v40;
    v61 = (char *)v46 + v40 + 1;
    v62 = (unint64_t)v47;
LABEL_76:
    operator delete(v31);
    goto LABEL_77;
  }
  v48 = &v31[~v39];
  do
  {
    v49 = *--v31;
    (v48--)[(_QWORD)v46] = v49;
  }
  while (v31 != (_BYTE *)v39);
  v31 = __p;
  __p = v46;
  v61 = (char *)v46 + v40 + 1;
  v62 = (unint64_t)v47;
  if (v31)
    goto LABEL_76;
LABEL_77:
  v61 = v42;
  v50 = __p;
  v51 = v42 - (_BYTE *)__p;
  if ((unint64_t)(v42 - (_BYTE *)__p) >= 0x10000)
  {
    v53 = "msg.size() <= kMaxMessageSize";
    v54 = 166;
    v55 = "populateHeader";
LABEL_87:
    __assert_rtn(v55, "AlishaDCKCoder.cpp", v54, v53);
  }
  if (v51 <= 3)
  {
    sub_10003F150((unint64_t *)&__p, 4 - v51);
    v50 = __p;
    LOWORD(v51) = (_WORD)v61 - (_WORD)__p;
  }
  v52 = v51 - 4;
  *v50 = 2;
  *((_BYTE *)__p + 1) = 4;
  *((_BYTE *)__p + 2) = HIBYTE(v52);
  *((_BYTE *)__p + 3) = v52;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  sub_1001530EC(&v56, __p, (uint64_t)v61, v61 - (_BYTE *)__p);
  v59 = 1;
  *a2 = 0;
  sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&v56);
  if (v59 && v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (__p)
  {
    v61 = __p;
    operator delete(__p);
  }
}

void sub_1002FBFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1002FBFF4(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char *v13;
  _BYTE *v14;
  char v15;
  _BYTE *v16;
  unint64_t v17;
  __int16 v18;
  const char *v19;
  int v20;
  const char *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char v25;
  void *__p;
  _BYTE *v27;
  unint64_t v28;

  LOBYTE(v22) = 0;
  sub_100191910(&__p, 4uLL, &v22);
  sub_1002FB800(*(_DWORD *)a1, (unint64_t *)&__p);
  sub_1002FC25C(*(_QWORD *)(a1 + 8), (unint64_t *)&__p);
  sub_1002FB800(*(_DWORD *)(a1 + 16), (unint64_t *)&__p);
  v5 = (unint64_t)__p;
  v4 = v27;
  v6 = v27 - (_BYTE *)__p;
  if ((unint64_t)(v27 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
    v19 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    v20 = 225;
    v21 = "append";
    goto LABEL_31;
  }
  v7 = *(_BYTE *)(a1 + 20);
  if ((unint64_t)v27 >= v28)
  {
    v9 = v28 - (_QWORD)__p;
    if (2 * (v28 - (unint64_t)__p) <= v6 + 1)
      v10 = v6 + 1;
    else
      v10 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v13 = (char *)v12 + v11;
    *((_BYTE *)v12 + v6) = v7;
    v8 = (char *)v12 + v6 + 1;
    if (v4 == (_BYTE *)v5)
    {
      v12 = (char *)v12 + v6;
    }
    else
    {
      v14 = &v4[~v5];
      do
      {
        v15 = *--v4;
        (v14--)[(_QWORD)v12] = v15;
      }
      while (v4 != (_BYTE *)v5);
      v4 = __p;
    }
    __p = v12;
    v27 = v8;
    v28 = (unint64_t)v13;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v27 = v7;
    v8 = v4 + 1;
  }
  v27 = v8;
  v16 = __p;
  v17 = v8 - (_BYTE *)__p;
  if ((unint64_t)(v8 - (_BYTE *)__p) >= 0x10000)
  {
    v19 = "msg.size() <= kMaxMessageSize";
    v20 = 166;
    v21 = "populateHeader";
LABEL_31:
    __assert_rtn(v21, "AlishaDCKCoder.cpp", v20, v19);
  }
  if (v17 <= 3)
  {
    sub_10003F150((unint64_t *)&__p, 4 - v17);
    v16 = __p;
    LOWORD(v17) = (_WORD)v27 - (_WORD)__p;
  }
  v18 = v17 - 4;
  *v16 = 2;
  *((_BYTE *)__p + 1) = 6;
  *((_BYTE *)__p + 2) = HIBYTE(v18);
  *((_BYTE *)__p + 3) = v18;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  sub_1001530EC(&v22, __p, (uint64_t)v27, v27 - (_BYTE *)__p);
  v25 = 1;
  *a2 = 0;
  sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&v22);
  if (v25 && v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
}

void sub_1002FC21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1002FC25C(uint64_t a1, unint64_t *a2)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  _BYTE *v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  char *v46;
  _BYTE *v47;
  char v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  unint64_t v56;
  char *v57;
  _BYTE *v58;
  char v59;
  unint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  _BYTE *v63;
  unint64_t v64;
  unint64_t v65;
  size_t v66;
  unint64_t v67;
  char *v68;
  _BYTE *v69;
  char v70;
  unint64_t v71;
  _BYTE *v72;
  unint64_t v73;
  _BYTE *v74;
  unint64_t v75;
  unint64_t v76;
  size_t v77;
  unint64_t v78;
  char *v79;
  _BYTE *v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  unint64_t v86;
  unint64_t v87;
  size_t v88;
  unint64_t v89;
  char *v90;
  _BYTE *v91;
  char v92;

  v3 = *a2;
  v2 = (_BYTE *)a2[1];
  v4 = (uint64_t)&v2[-*a2];
  if ((unint64_t)(v4 - 65528) <= 0xFFFFFFFFFFFEFFFFLL)
    sub_1003E9FD4();
  v7 = a2[2];
  if ((unint64_t)v2 >= v7)
  {
    if (v4 <= -2)
      goto LABEL_149;
    v9 = v7 - v3;
    if (2 * v9 <= v4 + 1)
      v10 = v4 + 1;
    else
      v10 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    *(_BYTE *)(v12 + v4) = HIBYTE(a1);
    v8 = (_BYTE *)(v12 + v4 + 1);
    if (v2 == (_BYTE *)v3)
    {
      v12 += v4;
    }
    else
    {
      v14 = &v2[~v3];
      do
      {
        v15 = *--v2;
        (v14--)[v12] = v15;
      }
      while (v2 != (_BYTE *)v3);
      v2 = (_BYTE *)*a2;
    }
    *a2 = v12;
    a2[1] = (unint64_t)v8;
    a2[2] = (unint64_t)v13;
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = HIBYTE(a1);
    v8 = v2 + 1;
  }
  a2[1] = (unint64_t)v8;
  v16 = a2[2];
  if ((unint64_t)v8 < v16)
  {
    *v8 = BYTE6(a1);
    v17 = v8 + 1;
    goto LABEL_39;
  }
  v18 = *a2;
  v19 = &v8[-*a2];
  v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0)
    goto LABEL_149;
  v21 = v16 - v18;
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
    v22 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v22 = v20;
  if (v22)
    v23 = (unint64_t)operator new(v22);
  else
    v23 = 0;
  v24 = (char *)(v23 + v22);
  v19[v23] = BYTE6(a1);
  v17 = &v19[v23 + 1];
  if (v8 == (_BYTE *)v18)
  {
    *a2 = (unint64_t)&v19[v23];
    a2[1] = (unint64_t)v17;
    a2[2] = (unint64_t)v24;
LABEL_38:
    operator delete(v8);
    goto LABEL_39;
  }
  v25 = &v8[~v18];
  do
  {
    v26 = *--v8;
    (v25--)[v23] = v26;
  }
  while (v8 != (_BYTE *)v18);
  v8 = (_BYTE *)*a2;
  *a2 = v23;
  a2[1] = (unint64_t)v17;
  a2[2] = (unint64_t)v24;
  if (v8)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v17;
  v27 = a2[2];
  if ((unint64_t)v17 < v27)
  {
    *v17 = BYTE5(a1);
    v28 = v17 + 1;
    goto LABEL_57;
  }
  v29 = *a2;
  v30 = &v17[-*a2];
  v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0)
    goto LABEL_149;
  v32 = v27 - v29;
  if (2 * v32 > v31)
    v31 = 2 * v32;
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
    v33 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v33 = v31;
  if (v33)
    v34 = (unint64_t)operator new(v33);
  else
    v34 = 0;
  v35 = (char *)(v34 + v33);
  v30[v34] = BYTE5(a1);
  v28 = &v30[v34 + 1];
  if (v17 == (_BYTE *)v29)
  {
    *a2 = (unint64_t)&v30[v34];
    a2[1] = (unint64_t)v28;
    a2[2] = (unint64_t)v35;
LABEL_56:
    operator delete(v17);
    goto LABEL_57;
  }
  v36 = &v17[~v29];
  do
  {
    v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (_BYTE *)v29);
  v17 = (_BYTE *)*a2;
  *a2 = v34;
  a2[1] = (unint64_t)v28;
  a2[2] = (unint64_t)v35;
  if (v17)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v28;
  v38 = a2[2];
  if ((unint64_t)v28 < v38)
  {
    *v28 = BYTE4(a1);
    v39 = v28 + 1;
    goto LABEL_75;
  }
  v40 = *a2;
  v41 = &v28[-*a2];
  v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0)
    goto LABEL_149;
  v43 = v38 - v40;
  if (2 * v43 > v42)
    v42 = 2 * v43;
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
    v45 = (unint64_t)operator new(v44);
  else
    v45 = 0;
  v46 = (char *)(v45 + v44);
  v41[v45] = BYTE4(a1);
  v39 = &v41[v45 + 1];
  if (v28 == (_BYTE *)v40)
  {
    *a2 = (unint64_t)&v41[v45];
    a2[1] = (unint64_t)v39;
    a2[2] = (unint64_t)v46;
LABEL_74:
    operator delete(v28);
    goto LABEL_75;
  }
  v47 = &v28[~v40];
  do
  {
    v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (_BYTE *)v40);
  v28 = (_BYTE *)*a2;
  *a2 = v45;
  a2[1] = (unint64_t)v39;
  a2[2] = (unint64_t)v46;
  if (v28)
    goto LABEL_74;
LABEL_75:
  a2[1] = (unint64_t)v39;
  v49 = a2[2];
  if ((unint64_t)v39 < v49)
  {
    *v39 = BYTE3(a1);
    v50 = v39 + 1;
    goto LABEL_93;
  }
  v51 = *a2;
  v52 = &v39[-*a2];
  v53 = (unint64_t)(v52 + 1);
  if ((uint64_t)(v52 + 1) < 0)
    goto LABEL_149;
  v54 = v49 - v51;
  if (2 * v54 > v53)
    v53 = 2 * v54;
  if (v54 >= 0x3FFFFFFFFFFFFFFFLL)
    v55 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
    v56 = (unint64_t)operator new(v55);
  else
    v56 = 0;
  v57 = (char *)(v56 + v55);
  v52[v56] = BYTE3(a1);
  v50 = &v52[v56 + 1];
  if (v39 == (_BYTE *)v51)
  {
    *a2 = (unint64_t)&v52[v56];
    a2[1] = (unint64_t)v50;
    a2[2] = (unint64_t)v57;
LABEL_92:
    operator delete(v39);
    goto LABEL_93;
  }
  v58 = &v39[~v51];
  do
  {
    v59 = *--v39;
    (v58--)[v56] = v59;
  }
  while (v39 != (_BYTE *)v51);
  v39 = (_BYTE *)*a2;
  *a2 = v56;
  a2[1] = (unint64_t)v50;
  a2[2] = (unint64_t)v57;
  if (v39)
    goto LABEL_92;
LABEL_93:
  a2[1] = (unint64_t)v50;
  v60 = a2[2];
  if ((unint64_t)v50 < v60)
  {
    *v50 = BYTE2(a1);
    v61 = v50 + 1;
    goto LABEL_111;
  }
  v62 = *a2;
  v63 = &v50[-*a2];
  v64 = (unint64_t)(v63 + 1);
  if ((uint64_t)(v63 + 1) < 0)
    goto LABEL_149;
  v65 = v60 - v62;
  if (2 * v65 > v64)
    v64 = 2 * v65;
  if (v65 >= 0x3FFFFFFFFFFFFFFFLL)
    v66 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v66 = v64;
  if (v66)
    v67 = (unint64_t)operator new(v66);
  else
    v67 = 0;
  v68 = (char *)(v67 + v66);
  v63[v67] = BYTE2(a1);
  v61 = &v63[v67 + 1];
  if (v50 == (_BYTE *)v62)
  {
    *a2 = (unint64_t)&v63[v67];
    a2[1] = (unint64_t)v61;
    a2[2] = (unint64_t)v68;
LABEL_110:
    operator delete(v50);
    goto LABEL_111;
  }
  v69 = &v50[~v62];
  do
  {
    v70 = *--v50;
    (v69--)[v67] = v70;
  }
  while (v50 != (_BYTE *)v62);
  v50 = (_BYTE *)*a2;
  *a2 = v67;
  a2[1] = (unint64_t)v61;
  a2[2] = (unint64_t)v68;
  if (v50)
    goto LABEL_110;
LABEL_111:
  a2[1] = (unint64_t)v61;
  v71 = a2[2];
  if ((unint64_t)v61 < v71)
  {
    *v61 = BYTE1(a1);
    v72 = v61 + 1;
    goto LABEL_129;
  }
  v73 = *a2;
  v74 = &v61[-*a2];
  v75 = (unint64_t)(v74 + 1);
  if ((uint64_t)(v74 + 1) < 0)
    goto LABEL_149;
  v76 = v71 - v73;
  if (2 * v76 > v75)
    v75 = 2 * v76;
  if (v76 >= 0x3FFFFFFFFFFFFFFFLL)
    v77 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v77 = v75;
  if (v77)
    v78 = (unint64_t)operator new(v77);
  else
    v78 = 0;
  v79 = (char *)(v78 + v77);
  v74[v78] = BYTE1(a1);
  v72 = &v74[v78 + 1];
  if (v61 == (_BYTE *)v73)
  {
    *a2 = (unint64_t)&v74[v78];
    a2[1] = (unint64_t)v72;
    a2[2] = (unint64_t)v79;
LABEL_128:
    operator delete(v61);
    goto LABEL_129;
  }
  v80 = &v61[~v73];
  do
  {
    v81 = *--v61;
    (v80--)[v78] = v81;
  }
  while (v61 != (_BYTE *)v73);
  v61 = (_BYTE *)*a2;
  *a2 = v78;
  a2[1] = (unint64_t)v72;
  a2[2] = (unint64_t)v79;
  if (v61)
    goto LABEL_128;
LABEL_129:
  a2[1] = (unint64_t)v72;
  v82 = a2[2];
  if ((unint64_t)v72 < v82)
  {
    *v72 = a1;
    v83 = (uint64_t)(v72 + 1);
    goto LABEL_147;
  }
  v84 = *a2;
  v85 = &v72[-*a2];
  v86 = (unint64_t)(v85 + 1);
  if ((uint64_t)(v85 + 1) < 0)
LABEL_149:
    sub_100026E7C();
  v87 = v82 - v84;
  if (2 * v87 > v86)
    v86 = 2 * v87;
  if (v87 >= 0x3FFFFFFFFFFFFFFFLL)
    v88 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (v88)
    v89 = (unint64_t)operator new(v88);
  else
    v89 = 0;
  v90 = (char *)(v89 + v88);
  v85[v89] = a1;
  v83 = (uint64_t)&v85[v89 + 1];
  if (v72 == (_BYTE *)v84)
  {
    *a2 = (unint64_t)&v85[v89];
    a2[1] = v83;
    a2[2] = (unint64_t)v90;
LABEL_146:
    operator delete(v72);
    goto LABEL_147;
  }
  v91 = &v72[~v84];
  do
  {
    v92 = *--v72;
    (v91--)[v89] = v92;
  }
  while (v72 != (_BYTE *)v84);
  v72 = (_BYTE *)*a2;
  *a2 = v89;
  a2[1] = v83;
  a2[2] = (unint64_t)v90;
  if (v72)
    goto LABEL_146;
LABEL_147:
  a2[1] = v83;
}

void sub_1002FC8A4(int *a1@<X1>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  __int16 v6;
  void *__p;
  void *v8;
  uint64_t v9;
  char v10;
  void *v11;
  _BYTE *v12;

  LOBYTE(__p) = 0;
  sub_100191910(&v11, 4uLL, &__p);
  sub_1002FB800(*a1, (unint64_t *)&v11);
  v4 = v11;
  v5 = v12 - (_BYTE *)v11;
  if ((unint64_t)(v12 - (_BYTE *)v11) >= 0x10000)
    __assert_rtn("populateHeader", "AlishaDCKCoder.cpp", 166, "msg.size() <= kMaxMessageSize");
  if (v5 <= 3)
  {
    sub_10003F150((unint64_t *)&v11, 4 - v5);
    v4 = v11;
    LOWORD(v5) = (_WORD)v12 - (_WORD)v11;
  }
  v6 = v5 - 4;
  *v4 = 2;
  *((_BYTE *)v11 + 1) = 7;
  *((_BYTE *)v11 + 2) = HIBYTE(v6);
  *((_BYTE *)v11 + 3) = v6;
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_1001530EC(&__p, v11, (uint64_t)v12, v12 - (_BYTE *)v11);
  v10 = 1;
  *a2 = 0;
  sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&__p);
  if (v10 && __p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
}

void sub_1002FC9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1002FCA08(char *a1@<X1>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char *v13;
  _BYTE *v14;
  char v15;
  _BYTE *v16;
  unint64_t v17;
  __int16 v18;
  const char *v19;
  int v20;
  const char *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char v25;
  void *__p;
  _BYTE *v27;
  unint64_t v28;

  LOBYTE(v22) = 0;
  sub_100191910(&__p, 4uLL, &v22);
  v5 = (unint64_t)__p;
  v4 = v27;
  v6 = v27 - (_BYTE *)__p;
  if ((unint64_t)(v27 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
    v19 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    v20 = 225;
    v21 = "append";
    goto LABEL_31;
  }
  v7 = *a1;
  if ((unint64_t)v27 >= v28)
  {
    v9 = v28 - (_QWORD)__p;
    if (2 * (v28 - (unint64_t)__p) <= v6 + 1)
      v10 = v6 + 1;
    else
      v10 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v13 = (char *)v12 + v11;
    *((_BYTE *)v12 + v6) = v7;
    v8 = (char *)v12 + v6 + 1;
    if (v4 == (_BYTE *)v5)
    {
      v12 = (char *)v12 + v6;
    }
    else
    {
      v14 = &v4[~v5];
      do
      {
        v15 = *--v4;
        (v14--)[(_QWORD)v12] = v15;
      }
      while (v4 != (_BYTE *)v5);
      v4 = __p;
    }
    __p = v12;
    v27 = v8;
    v28 = (unint64_t)v13;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v27 = v7;
    v8 = v4 + 1;
  }
  v27 = v8;
  v16 = __p;
  v17 = v8 - (_BYTE *)__p;
  if ((unint64_t)(v8 - (_BYTE *)__p) >= 0x10000)
  {
    v19 = "msg.size() <= kMaxMessageSize";
    v20 = 166;
    v21 = "populateHeader";
LABEL_31:
    __assert_rtn(v21, "AlishaDCKCoder.cpp", v20, v19);
  }
  if (v17 <= 3)
  {
    sub_10003F150((unint64_t *)&__p, 4 - v17);
    v16 = __p;
    LOWORD(v17) = (_WORD)v27 - (_WORD)__p;
  }
  v18 = v17 - 4;
  *v16 = 2;
  *((_BYTE *)__p + 1) = 8;
  *((_BYTE *)__p + 2) = HIBYTE(v18);
  *((_BYTE *)__p + 3) = v18;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  sub_1001530EC(&v22, __p, (uint64_t)v27, v27 - (_BYTE *)__p);
  v25 = 1;
  *a2 = 0;
  sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&v22);
  if (v25 && v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
}

void sub_1002FCC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1002FCC4C(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  __int16 v6;
  void *__p;
  void *v8;
  uint64_t v9;
  char v10;
  void *v11;
  _BYTE *v12;

  LOBYTE(__p) = 0;
  sub_100191910(&v11, 4uLL, &__p);
  sub_1002FB800(*(_DWORD *)a1, (unint64_t *)&v11);
  sub_1002FC25C(*(_QWORD *)(a1 + 8), (unint64_t *)&v11);
  v4 = v11;
  v5 = v12 - (_BYTE *)v11;
  if ((unint64_t)(v12 - (_BYTE *)v11) >= 0x10000)
    __assert_rtn("populateHeader", "AlishaDCKCoder.cpp", 166, "msg.size() <= kMaxMessageSize");
  if (v5 <= 3)
  {
    sub_10003F150((unint64_t *)&v11, 4 - v5);
    v4 = v11;
    LOWORD(v5) = (_WORD)v12 - (_WORD)v11;
  }
  v6 = v5 - 4;
  *v4 = 2;
  *((_BYTE *)v11 + 1) = 10;
  *((_BYTE *)v11 + 2) = HIBYTE(v6);
  *((_BYTE *)v11 + 3) = v6;
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_1001530EC(&__p, v11, (uint64_t)v12, v12 - (_BYTE *)v11);
  v10 = 1;
  *a2 = 0;
  sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&__p);
  if (v10 && __p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
}

void sub_1002FCD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1002FCDBC(char *a1@<X1>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char *v13;
  _BYTE *v14;
  char v15;
  _BYTE *v16;
  unint64_t v17;
  __int16 v18;
  const char *v19;
  int v20;
  const char *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char v25;
  void *__p;
  _BYTE *v27;
  unint64_t v28;

  LOBYTE(v22) = 0;
  sub_100191910(&__p, 4uLL, &v22);
  v5 = (unint64_t)__p;
  v4 = v27;
  v6 = v27 - (_BYTE *)__p;
  if ((unint64_t)(v27 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
    v19 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    v20 = 225;
    v21 = "append";
    goto LABEL_31;
  }
  v7 = *a1;
  if ((unint64_t)v27 >= v28)
  {
    v9 = v28 - (_QWORD)__p;
    if (2 * (v28 - (unint64_t)__p) <= v6 + 1)
      v10 = v6 + 1;
    else
      v10 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v13 = (char *)v12 + v11;
    *((_BYTE *)v12 + v6) = v7;
    v8 = (char *)v12 + v6 + 1;
    if (v4 == (_BYTE *)v5)
    {
      v12 = (char *)v12 + v6;
    }
    else
    {
      v14 = &v4[~v5];
      do
      {
        v15 = *--v4;
        (v14--)[(_QWORD)v12] = v15;
      }
      while (v4 != (_BYTE *)v5);
      v4 = __p;
    }
    __p = v12;
    v27 = v8;
    v28 = (unint64_t)v13;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v27 = v7;
    v8 = v4 + 1;
  }
  v27 = v8;
  sub_1002FB800(*((_DWORD *)a1 + 1), (unint64_t *)&__p);
  sub_1002FC25C(*((_QWORD *)a1 + 1), (unint64_t *)&__p);
  v16 = __p;
  v17 = v27 - (_BYTE *)__p;
  if ((unint64_t)(v27 - (_BYTE *)__p) >= 0x10000)
  {
    v19 = "msg.size() <= kMaxMessageSize";
    v20 = 166;
    v21 = "populateHeader";
LABEL_31:
    __assert_rtn(v21, "AlishaDCKCoder.cpp", v20, v19);
  }
  if (v17 <= 3)
  {
    sub_10003F150((unint64_t *)&__p, 4 - v17);
    v16 = __p;
    LOWORD(v17) = (_WORD)v27 - (_WORD)__p;
  }
  v18 = v17 - 4;
  *v16 = 2;
  *((_BYTE *)__p + 1) = 19;
  *((_BYTE *)__p + 2) = HIBYTE(v18);
  *((_BYTE *)__p + 3) = v18;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  sub_1001530EC(&v22, __p, (uint64_t)v27, v27 - (_BYTE *)__p);
  v25 = 1;
  *a2 = 0;
  sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&v22);
  if (v25 && v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
}

void sub_1002FCFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1002FD020(uint64_t *a1@<X1>, int *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 v12;
  const char *v13;
  unsigned __int16 v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  _WORD *v18;
  unsigned __int16 v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  unsigned __int16 v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  int v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned __int8 v38;
  void *__p;
  _BYTE *v40;
  uint64_t v41;
  void *v42;
  _WORD *v43;
  uint64_t v44;
  void *v45;
  _WORD *v46;
  uint64_t v47;
  unsigned __int16 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55;

  v3 = *a1;
  v4 = a1[1] - *a1;
  if (v4 < 4)
  {
    v5 = -4000;
LABEL_17:
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = v5;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    sub_1002FE434((uint64_t)&v49);
    return;
  }
  if (v4 >> 16)
  {
    v5 = -4001;
    goto LABEL_17;
  }
  if (v4 != __rev16(*(unsigned __int16 *)(v3 + 2)) + 4)
  {
    v5 = -4002;
    goto LABEL_17;
  }
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  __p = 0;
  v40 = 0;
  v41 = 0;
  if (v4 <= 4)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4007;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
LABEL_52:
    sub_1002FE434((uint64_t)&v49);
    goto LABEL_53;
  }
  v6 = *(unsigned __int8 *)(v3 + 4);
  if (v6 + 4 >= v4)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4011;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  if (!(_DWORD)v6)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4008;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  if ((v6 & 1) != 0)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4009;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  v38 = v6;
  sub_1002FD628((uint64_t)&v45, v6 >> 1);
  v8 = v45;
  v9 = v46;
  if (v45 != v46)
  {
    v10 = *a1;
    v11 = a1[1] - *a1;
    v12 = 5;
    v13 = "msg.size() <= kMaxMessageSize";
    while (!(v11 >> 16))
    {
      if ((unint64_t)v12 + 2 > v11)
      {
        v29 = 191;
        v13 = "offset + sizeof(val) <= msg.size()";
LABEL_49:
        __assert_rtn("readAndAdvance", "AlishaDCKCoder.cpp", v29, v13);
      }
      v14 = v12 + 1;
      v15 = *(unsigned __int8 *)(v10 + v12);
      *v8 = v15 << 8;
      v12 += 2;
      *v8++ = *(unsigned __int8 *)(v10 + v14) | (unsigned __int16)(v15 << 8);
      if (v8 == v9)
        goto LABEL_24;
    }
    v29 = 190;
    goto LABEL_49;
  }
  v12 = 5;
LABEL_24:
  v48 = v12;
  if (v4 <= v12)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4012;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  v16 = *(unsigned __int8 *)(*a1 + v12);
  if (v16 + (unint64_t)v12 >= v4)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4016;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  if (!*(_BYTE *)(*a1 + v12))
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4013;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  if ((v16 & 1) != 0)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4014;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  sub_1002FD5E4(&v38, a1, &v48);
  sub_1002FD628((uint64_t)&v42, (unint64_t)v38 >> 1);
  v17 = v42;
  v18 = v43;
  v19 = v48;
  if (v42 != v43)
  {
    v20 = *a1;
    v21 = a1[1] - *a1;
    v22 = "msg.size() <= kMaxMessageSize";
    while (!(v21 >> 16))
    {
      if ((unint64_t)v19 + 2 > v21)
      {
        v30 = 191;
        v22 = "offset + sizeof(val) <= msg.size()";
LABEL_61:
        __assert_rtn("readAndAdvance", "AlishaDCKCoder.cpp", v30, v22);
      }
      v23 = v19 + 1;
      v24 = *(unsigned __int8 *)(v20 + v19);
      *v17 = v24 << 8;
      v19 += 2;
      *v17++ = *(unsigned __int8 *)(v20 + v23) | (unsigned __int16)(v24 << 8);
      if (v17 == v18)
        goto LABEL_33;
    }
    v30 = 190;
    goto LABEL_61;
  }
LABEL_33:
  v48 = v19;
  if (v4 <= v19)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4017;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  v25 = v19;
  v26 = *(unsigned __int8 *)(*a1 + v19);
  if (v26 + v25 >= v4)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4020;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  if (!(_DWORD)v26)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4018;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  sub_1002FD5E4(&v38, a1, &v48);
  sub_1001F90EC((unint64_t *)&__p, v38);
  v31 = v4;
  v27 = __p;
  v28 = v40;
  while (v27 != v28)
    sub_1002FD5E4(v27++, a1, &v48);
  if (v31 != v48)
  {
    LOBYTE(v49) = 0;
    v55 = 0;
    *a2 = -4006;
    sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  sub_1002FE48C(&v32, (uint64_t)&v45, (uint64_t)&v42, (uint64_t)&__p);
  v49 = v32;
  v50 = v33;
  v32 = 0uLL;
  v51 = v34;
  v52 = v35;
  v33 = 0;
  v34 = 0uLL;
  v35 = 0;
  v53 = v36;
  v54 = v37;
  v37 = 0;
  v36 = 0uLL;
  v55 = 1;
  *a2 = 0;
  sub_1002FE74C((uint64_t)(a2 + 2), (uint64_t)&v49);
  sub_1002FE434((uint64_t)&v49);
  sub_1002FD658((uint64_t)&v32);
LABEL_53:
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
}

void sub_1002FD534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;

  sub_1002FE434(v28 - 128);
  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(a1);
}

_BYTE *sub_1002FD5E4(_BYTE *result, uint64_t *a2, _WORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v4 = a2[1] - *a2;
  if (v4 >= 0x10000)
    sub_1003E9FFC();
  v5 = (unsigned __int16)*a3;
  if (v4 <= v5)
    sub_1003EA024((uint64_t)result, (uint64_t)a2, (uint64_t)a3);
  *a3 = v5 + 1;
  *result = *(_BYTE *)(v3 + v5);
  return result;
}

void sub_1002FD628(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_1002FE854((char **)a1, a2 - v2);
  }
}

uint64_t sub_1002FD658(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1002FD6A8@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  char v13;
  char v14;

  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5 < 4)
  {
    v6 = -4000;
LABEL_16:
    v14 = 0;
    *(_DWORD *)a4 = v6;
    *(_BYTE *)(a4 + 4) = 0;
    goto LABEL_17;
  }
  if (v5 >> 16)
  {
    v6 = -4001;
    goto LABEL_16;
  }
  v7 = *(unsigned __int8 *)(v4 + 3);
  v8 = *(unsigned __int8 *)(v4 + 2);
  if (v5 != (v7 | (v8 << 8)) + 4)
  {
    v6 = -4002;
    goto LABEL_16;
  }
  if ((v7 | ((_DWORD)v8 << 8)) != 0xA)
  {
    v6 = -4006;
    goto LABEL_16;
  }
  if (v5 <= 5)
    sub_1003EA048(result, (uint64_t)a2, a3);
  if (v5 <= 7)
    sub_1003EA048(result, (uint64_t)a2, a3);
  if (v5 <= 0xB)
    sub_1003EA06C(result, (uint64_t)a2, a3);
  if (v5 == 12)
    sub_1003EA024(result, (uint64_t)a2, a3);
  if (v5 <= 0xD)
    sub_1003EA024(result, (uint64_t)a2, a3);
  if (v5 != 14)
    sub_1003EA090();
  v9 = bswap32(*(unsigned __int16 *)(v4 + 4));
  v10 = bswap32(*(unsigned __int16 *)(v4 + 6)) >> 16;
  v11 = bswap32(*(_DWORD *)(v4 + 8));
  v12 = *(_BYTE *)(v4 + 12);
  v13 = *(_BYTE *)(v4 + 13);
  *(_DWORD *)a4 = 0;
  *(_WORD *)(a4 + 4) = HIWORD(v9);
  *(_WORD *)(a4 + 6) = v10;
  *(_DWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 12) = v12;
  *(_BYTE *)(a4 + 13) = v13;
  v14 = 1;
LABEL_17:
  *(_BYTE *)(a4 + 16) = v14;
  return result;
}

uint64_t sub_1002FD7B0@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  unsigned int v13;
  char v14;
  char v15;

  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5 < 4)
  {
    v6 = -4000;
LABEL_16:
    v15 = 0;
    *(_DWORD *)a4 = v6;
    *(_BYTE *)(a4 + 4) = 0;
    goto LABEL_17;
  }
  if (v5 >> 16)
  {
    v6 = -4001;
    goto LABEL_16;
  }
  v7 = *(unsigned __int8 *)(v4 + 3);
  v8 = *(unsigned __int8 *)(v4 + 2);
  if (v5 != (v7 | (v8 << 8)) + 4)
  {
    v6 = -4002;
    goto LABEL_16;
  }
  if ((v7 | ((_DWORD)v8 << 8)) != 9)
  {
    v6 = -4006;
    goto LABEL_16;
  }
  if (v5 <= 4)
    sub_1003EA024(result, (uint64_t)a2, a3);
  if (v5 == 5)
    sub_1003EA024(result, (uint64_t)a2, a3);
  if (v5 <= 6)
    sub_1003EA024(result, (uint64_t)a2, a3);
  if (v5 == 7)
    sub_1003EA024(result, (uint64_t)a2, a3);
  if (v5 <= 0xB)
    sub_1003EA06C(result, (uint64_t)a2, a3);
  if (v5 != 13)
  {
    if (v5 == 12)
      sub_1003EA024(result, (uint64_t)a2, a3);
    sub_1003EA0B8();
  }
  v9 = *(_BYTE *)(v4 + 4);
  v10 = *(_BYTE *)(v4 + 5);
  v11 = *(_BYTE *)(v4 + 6);
  v12 = *(_BYTE *)(v4 + 7);
  v13 = bswap32(*(_DWORD *)(v4 + 8));
  v14 = *(_BYTE *)(v4 + 12);
  *(_DWORD *)a4 = 0;
  *(_BYTE *)(a4 + 4) = v9;
  *(_BYTE *)(a4 + 5) = v10;
  *(_BYTE *)(a4 + 6) = v11;
  *(_BYTE *)(a4 + 7) = v12;
  *(_DWORD *)(a4 + 8) = v13;
  v15 = 1;
  *(_BYTE *)(a4 + 12) = v14;
LABEL_17:
  *(_BYTE *)(a4 + 16) = v15;
  return result;
}

uint64_t sub_1002FD8BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1] - *a2;
  if (v4 < 4)
  {
    v5 = -4000;
LABEL_12:
    LODWORD(v8) = 0;
    LODWORD(v10) = v5;
    goto LABEL_13;
  }
  if (v4 >> 16)
  {
    v5 = -4001;
    goto LABEL_12;
  }
  v6 = *(unsigned __int8 *)(v3 + 3);
  v7 = *(unsigned __int8 *)(v3 + 2);
  if (v4 != (v6 | (v7 << 8)) + 4)
  {
    v5 = -4002;
    goto LABEL_12;
  }
  if ((v6 | ((_DWORD)v7 << 8)) != 4)
  {
    v5 = -4006;
    goto LABEL_12;
  }
  if (v4 <= 7)
    sub_1003EA06C(a1, (uint64_t)a2, a3);
  if (v4 != 8)
    sub_1003EA0E0();
  LODWORD(v10) = 0;
  v8 = bswap32(*(_DWORD *)(v3 + 4)) | (unint64_t)&_mh_execute_header;
LABEL_13:
  HIDWORD(v10) = v8;
  return v10;
}

unint64_t sub_1002FD970(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  unint64_t result;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = 4294963290;
  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5 < 4)
    return 4294963296;
  if (v5 >> 16)
    return 4294963295;
  v6 = v4[3];
  v7 = v4[2];
  if (v5 != (v6 | (v7 << 8)) + 4)
    return 4294963294;
  if ((v6 | ((_DWORD)v7 << 8)) == 1)
  {
    if (v5 <= 4)
      sub_1003EA024(4294963290, (uint64_t)a2, a3);
    if (v5 != 5)
      sub_1003EA108();
    return ((unint64_t)v4[4] << 32) | 0x10000000000;
  }
  return result;
}

uint64_t sub_1002FD9FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1] - *a2;
  if (v4 < 4)
  {
    v5 = -4000;
LABEL_12:
    LODWORD(v8) = 0;
    LODWORD(v10) = v5;
    goto LABEL_13;
  }
  if (v4 >> 16)
  {
    v5 = -4001;
    goto LABEL_12;
  }
  v6 = *(unsigned __int8 *)(v3 + 3);
  v7 = *(unsigned __int8 *)(v3 + 2);
  if (v4 != (v6 | (v7 << 8)) + 4)
  {
    v5 = -4002;
    goto LABEL_12;
  }
  if ((v6 | ((_DWORD)v7 << 8)) != 4)
  {
    v5 = -4006;
    goto LABEL_12;
  }
  if (v4 <= 7)
    sub_1003EA06C(a1, (uint64_t)a2, a3);
  if (v4 != 8)
    sub_1003EA130();
  LODWORD(v10) = 0;
  v8 = bswap32(*(_DWORD *)(v3 + 4)) | (unint64_t)&_mh_execute_header;
LABEL_13:
  HIDWORD(v10) = v8;
  return v10;
}

uint64_t sub_1002FDAB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1] - *a2;
  if (v4 < 4)
  {
    v5 = -4000;
LABEL_12:
    LODWORD(v9) = v5;
    BYTE4(v9) = 0;
    return v9;
  }
  if (v4 >> 16)
  {
    v5 = -4001;
    goto LABEL_12;
  }
  v6 = *(unsigned __int8 *)(v3 + 3);
  v7 = *(unsigned __int8 *)(v3 + 2);
  if (v4 != (v6 | (v7 << 8)) + 4)
  {
    v5 = -4002;
    goto LABEL_12;
  }
  if ((v6 | ((_DWORD)v7 << 8)) != 5)
  {
    v5 = -4006;
    goto LABEL_12;
  }
  if (v4 <= 7)
    sub_1003EA06C(a1, (uint64_t)a2, a3);
  if (v4 != 9)
  {
    if (v4 == 8)
      sub_1003EA024(a1, (uint64_t)a2, a3);
    sub_1003EA158();
  }
  LODWORD(v9) = 0;
  HIDWORD(v9) = bswap32(*(_DWORD *)(v3 + 4));
  return v9;
}

void sub_1002FDB78(char *a1@<X1>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char *v13;
  _BYTE *v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  _BYTE *v37;
  char v38;
  _BYTE *v39;
  char v40;
  _BYTE *v41;
  char v42;
  _BYTE *v43;
  unint64_t v44;
  __int16 v45;
  const char *v46;
  int v47;
  const char *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  char v52;
  void *__p;
  _BYTE *v54;
  unint64_t v55;

  LOBYTE(v49) = 0;
  sub_100191910(&__p, 4uLL, &v49);
  v5 = (unint64_t)__p;
  v4 = v54;
  v6 = v54 - (_BYTE *)__p;
  if ((unint64_t)(v54 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
    goto LABEL_85;
  v7 = *a1;
  if ((unint64_t)v54 >= v55)
  {
    v9 = v55 - (_QWORD)__p;
    if (2 * (v55 - (unint64_t)__p) <= v6 + 1)
      v10 = v6 + 1;
    else
      v10 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v13 = (char *)v12 + v11;
    *((_BYTE *)v12 + v6) = v7;
    v8 = (char *)v12 + v6 + 1;
    if (v4 == (_BYTE *)v5)
    {
      v12 = (char *)v12 + v6;
    }
    else
    {
      v14 = &v4[~v5];
      do
      {
        v15 = *--v4;
        (v14--)[(_QWORD)v12] = v15;
      }
      while (v4 != (_BYTE *)v5);
      v4 = __p;
    }
    __p = v12;
    v54 = v8;
    v55 = (unint64_t)v13;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v54 = v7;
    v8 = v4 + 1;
  }
  v54 = v8;
  v16 = *a1;
  if (v16 == 1)
  {
    if (!a1[2])
    {
      v46 = "evt.commandCompleteSubEventCode.has_value()";
      v47 = 976;
      goto LABEL_90;
    }
    v29 = (unint64_t)__p;
    v30 = v8 - (_BYTE *)__p;
    if ((unint64_t)(v8 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
      goto LABEL_85;
    v19 = a1[1];
    if ((unint64_t)v8 < v55)
      goto LABEL_48;
    v32 = v55 - (_QWORD)__p;
    if (2 * (v55 - (unint64_t)__p) <= v30 + 1)
      v33 = v30 + 1;
    else
      v33 = 2 * v32;
    if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
      v34 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
      v23 = operator new(v34);
    else
      v23 = 0;
    v35 = (char *)v23 + v30;
    v36 = (char *)v23 + v34;
    *((_BYTE *)v23 + v30) = v19;
    v31 = (char *)v23 + v30 + 1;
    if (v8 == (_BYTE *)v29)
      goto LABEL_73;
    v39 = &v8[~v29];
    do
    {
      v40 = *--v8;
      (v39--)[(_QWORD)v23] = v40;
    }
    while (v8 != (_BYTE *)v29);
    goto LABEL_71;
  }
  if (v16 == 2)
  {
    if (!a1[4])
    {
      v46 = "evt.rangingSessionStatusChangedSubEventCode.has_value()";
      v47 = 981;
LABEL_90:
      v48 = "encodeEventNotification";
LABEL_91:
      __assert_rtn(v48, "AlishaDCKCoder.cpp", v47, v46);
    }
    v24 = (unint64_t)__p;
    v25 = v8 - (_BYTE *)__p;
    if ((unint64_t)(v8 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
      goto LABEL_85;
    v19 = a1[3];
    if ((unint64_t)v8 < v55)
      goto LABEL_48;
    v26 = v55 - (_QWORD)__p;
    if (2 * (v55 - (unint64_t)__p) <= v25 + 1)
      v27 = v25 + 1;
    else
      v27 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v28 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    if (v28)
      v23 = operator new(v28);
    else
      v23 = 0;
    v35 = (char *)v23 + v25;
    v36 = (char *)v23 + v28;
    *((_BYTE *)v23 + v25) = v19;
    v31 = (char *)v23 + v25 + 1;
    if (v8 == (_BYTE *)v24)
      goto LABEL_73;
    v37 = &v8[~v24];
    do
    {
      v38 = *--v8;
      (v37--)[(_QWORD)v23] = v38;
    }
    while (v8 != (_BYTE *)v24);
LABEL_71:
    v8 = __p;
    __p = v23;
    v54 = v31;
    v55 = (unint64_t)v36;
    if (!v8)
      goto LABEL_75;
    goto LABEL_74;
  }
  if (v16 != 3)
    goto LABEL_76;
  if (!a1[6])
  {
    v46 = "evt.deviceRangingIntentSubEventCode.has_value()";
    v47 = 986;
    goto LABEL_90;
  }
  v17 = (unint64_t)__p;
  v18 = v8 - (_BYTE *)__p;
  if ((unint64_t)(v8 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
LABEL_85:
    v46 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    v47 = 225;
    v48 = "append";
    goto LABEL_91;
  }
  v19 = a1[5];
  if ((unint64_t)v8 >= v55)
  {
    v20 = v55 - (_QWORD)__p;
    if (2 * (v55 - (unint64_t)__p) <= v18 + 1)
      v21 = v18 + 1;
    else
      v21 = 2 * v20;
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = operator new(v22);
    else
      v23 = 0;
    v35 = (char *)v23 + v18;
    v36 = (char *)v23 + v22;
    *((_BYTE *)v23 + v18) = v19;
    v31 = (char *)v23 + v18 + 1;
    if (v8 != (_BYTE *)v17)
    {
      v41 = &v8[~v17];
      do
      {
        v42 = *--v8;
        (v41--)[(_QWORD)v23] = v42;
      }
      while (v8 != (_BYTE *)v17);
      goto LABEL_71;
    }
LABEL_73:
    __p = v35;
    v54 = v31;
    v55 = (unint64_t)v36;
LABEL_74:
    operator delete(v8);
    goto LABEL_75;
  }
LABEL_48:
  *v8 = v19;
  v31 = v8 + 1;
LABEL_75:
  v54 = v31;
  v8 = v31;
LABEL_76:
  v43 = __p;
  v44 = v8 - (_BYTE *)__p;
  if ((unint64_t)(v8 - (_BYTE *)__p) >= 0x10000)
  {
    v46 = "msg.size() <= kMaxMessageSize";
    v47 = 166;
    v48 = "populateHeader";
    goto LABEL_91;
  }
  if (v44 <= 3)
  {
    sub_10003F150((unint64_t *)&__p, 4 - v44);
    v43 = __p;
    LOWORD(v44) = (_WORD)v54 - (_WORD)__p;
  }
  v45 = v44 - 4;
  *v43 = 3;
  *((_BYTE *)__p + 1) = 17;
  *((_BYTE *)__p + 2) = HIBYTE(v45);
  *((_BYTE *)__p + 3) = v45;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  sub_1001530EC(&v49, __p, (uint64_t)v54, v54 - (_BYTE *)__p);
  v52 = 1;
  *a2 = 0;
  sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&v49);
  if (v52 && v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
}

void sub_1002FDFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1002FE02C(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  void *v23;
  char *v24;
  _BYTE *v25;
  char v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  _BYTE *v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  void *v35;
  char *v36;
  _BYTE *v37;
  char v38;
  _BYTE *v39;
  unint64_t v40;
  __int16 v41;
  const char *v42;
  int v43;
  const char *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  char v48;
  void *__p;
  _BYTE *v50;
  unint64_t v51;

  LOBYTE(v45) = 0;
  sub_100191910(&__p, 4uLL, &v45);
  sub_1002FC25C(*(_QWORD *)a1, (unint64_t *)&__p);
  sub_1002FC25C(*(_QWORD *)(a1 + 8), (unint64_t *)&__p);
  v5 = (unint64_t)__p;
  v4 = v50;
  v6 = v50 - (_BYTE *)__p;
  if ((unint64_t)(v50 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
    goto LABEL_67;
  v7 = *(_BYTE *)(a1 + 16);
  if ((unint64_t)v50 >= v51)
  {
    v9 = v51 - (_QWORD)__p;
    if (2 * (v51 - (unint64_t)__p) <= v6 + 1)
      v10 = v6 + 1;
    else
      v10 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v13 = (char *)v12 + v11;
    *((_BYTE *)v12 + v6) = v7;
    v8 = (char *)v12 + v6 + 1;
    if (v4 == (_BYTE *)v5)
    {
      v12 = (char *)v12 + v6;
    }
    else
    {
      v14 = &v4[~v5];
      do
      {
        v15 = *--v4;
        (v14--)[(_QWORD)v12] = v15;
      }
      while (v4 != (_BYTE *)v5);
      v4 = __p;
    }
    __p = v12;
    v50 = v8;
    v51 = (unint64_t)v13;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v50 = v7;
    v8 = v4 + 1;
  }
  v50 = v8;
  v16 = (unint64_t)__p;
  v17 = v8 - (_BYTE *)__p;
  if ((unint64_t)(v8 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
    goto LABEL_67;
  v18 = *(_BYTE *)(a1 + 17);
  if ((unint64_t)v8 < v51)
  {
    *v8 = v18;
    v19 = v8 + 1;
    goto LABEL_39;
  }
  v20 = v51 - (_QWORD)__p;
  if (2 * (v51 - (unint64_t)__p) <= v17 + 1)
    v21 = v17 + 1;
  else
    v21 = 2 * v20;
  if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
    v22 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v22 = v21;
  if (v22)
    v23 = operator new(v22);
  else
    v23 = 0;
  v24 = (char *)v23 + v22;
  *((_BYTE *)v23 + v17) = v18;
  v19 = (char *)v23 + v17 + 1;
  if (v8 == (_BYTE *)v16)
  {
    __p = (char *)v23 + v17;
    v50 = (char *)v23 + v17 + 1;
    v51 = (unint64_t)v24;
LABEL_38:
    operator delete(v8);
    goto LABEL_39;
  }
  v25 = &v8[~v16];
  do
  {
    v26 = *--v8;
    (v25--)[(_QWORD)v23] = v26;
  }
  while (v8 != (_BYTE *)v16);
  v8 = __p;
  __p = v23;
  v50 = (char *)v23 + v17 + 1;
  v51 = (unint64_t)v24;
  if (v8)
    goto LABEL_38;
LABEL_39:
  v50 = v19;
  sub_1002FB3E0(*(_WORD *)(a1 + 18), (unint64_t *)&__p);
  v28 = (unint64_t)__p;
  v27 = v50;
  v29 = v50 - (_BYTE *)__p;
  if ((unint64_t)(v50 - (_BYTE *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
LABEL_67:
    v42 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    v43 = 225;
    v44 = "append";
    goto LABEL_69;
  }
  v30 = *(_BYTE *)(a1 + 20);
  if ((unint64_t)v50 >= v51)
  {
    v32 = v51 - (_QWORD)__p;
    if (2 * (v51 - (unint64_t)__p) <= v29 + 1)
      v33 = v29 + 1;
    else
      v33 = 2 * v32;
    if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
      v34 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
      v35 = operator new(v34);
    else
      v35 = 0;
    v36 = (char *)v35 + v34;
    *((_BYTE *)v35 + v29) = v30;
    v31 = (char *)v35 + v29 + 1;
    if (v27 == (_BYTE *)v28)
    {
      v35 = (char *)v35 + v29;
    }
    else
    {
      v37 = &v27[~v28];
      do
      {
        v38 = *--v27;
        (v37--)[(_QWORD)v35] = v38;
      }
      while (v27 != (_BYTE *)v28);
      v27 = __p;
    }
    __p = v35;
    v50 = v31;
    v51 = (unint64_t)v36;
    if (v27)
      operator delete(v27);
  }
  else
  {
    *v50 = v30;
    v31 = v27 + 1;
  }
  v50 = v31;
  sub_1002FB3E0(*(_WORD *)(a1 + 22), (unint64_t *)&__p);
  v39 = __p;
  v40 = v50 - (_BYTE *)__p;
  if ((unint64_t)(v50 - (_BYTE *)__p) >= 0x10000)
  {
    v42 = "msg.size() <= kMaxMessageSize";
    v43 = 166;
    v44 = "populateHeader";
LABEL_69:
    __assert_rtn(v44, "AlishaDCKCoder.cpp", v43, v42);
  }
  if (v40 <= 3)
  {
    sub_10003F150((unint64_t *)&__p, 4 - v40);
    v39 = __p;
    LOWORD(v40) = (_WORD)v50 - (_WORD)__p;
  }
  v41 = v40 - 4;
  *v39 = 5;
  *((_BYTE *)__p + 1) = 13;
  *((_BYTE *)__p + 2) = HIBYTE(v41);
  *((_BYTE *)__p + 3) = v41;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  sub_1001530EC(&v45, __p, (uint64_t)v50, v50 - (_BYTE *)__p);
  v48 = 1;
  *a2 = 0;
  sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&v45);
  if (v48 && v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
}

void sub_1002FE3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FE434(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

_QWORD *sub_1002FE48C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1001B0668(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_1001B0668(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_1001530EC(a1 + 6, *(const void **)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  return a1;
}

void sub_1002FE510(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FE544(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100131724(a1);
  return a1;
}

uint64_t sub_1002FE578(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002FE5EC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002FE5EC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1002FE68C((uint64_t)v11);
  return v9;
}

uint64_t sub_1002FE68C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10013A4CC(a1);
  return a1;
}

uint64_t sub_1002FE6C0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_1002FE708((_QWORD *)a1, a2);
  return a1;
}

void sub_1002FE6EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_1003EA180(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002FE708(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = sub_1001530EC(result, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

uint64_t sub_1002FE74C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    sub_1002FE7A0((_QWORD *)a1, a2);
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_1002FE78C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002FE434(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002FE7A0(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1001B0668(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_1001B0668(a1 + 3, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 1);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_1001530EC(a1 + 6, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48));
  return a1;
}

void sub_1002FE820(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FE854(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      sub_100026E7C();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_100131980(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_1002FE954(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 183, a4);
}

void sub_1002FE95C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 200, a4);
}

void sub_1002FE964(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 191, a4);
}

uint64_t sub_1002FE96C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  char *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  unsigned __int8 v12;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;

  sub_1000537E4((uint64_t)v13);
  sub_100054C60(&v14, (uint64_t)"[", 1);
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v3 = 0;
    do
    {
      v4 = *(unsigned __int8 *)(v2 + v3);
      if (v4 == 1)
      {
        v5 = "SchedulingConflict";
      }
      else if (v4 == 4)
      {
        v5 = "SessionMuted";
      }
      else
      {
        v5 = "CoexConflict";
      }
      sub_10000BF04(__p, v5);
      if ((v12 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v12 & 0x80u) == 0)
        v7 = v12;
      else
        v7 = (uint64_t)__p[1];
      sub_100054C60(&v14, (uint64_t)v6, v7);
      if ((char)v12 < 0)
        operator delete(__p[0]);
      v2 = *a1;
      v8 = a1[1];
      if (~*a1 + v8 > v3)
      {
        sub_100054C60(&v14, (uint64_t)", ", 2);
        v2 = *a1;
        v8 = a1[1];
      }
      ++v3;
    }
    while (v8 - v2 > v3);
  }
  sub_100054C60(&v14, (uint64_t)"]", 1);
  std::stringbuf::str(v15);
  *(_QWORD *)((char *)v13
  v14 = v9;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf(v15);
  return std::ios::~ios(&v17);
}

void sub_1002FEB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100053910((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1002FEB5C(char a1@<W0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  char *v22;
  _BYTE *v23;
  char v24;

  v4 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((a1 & 1) != 0)
  {
    v4 = (unint64_t)operator new(1uLL);
    *(_BYTE *)v4 = 1;
    v5 = (_BYTE *)(v4 + 1);
    a2[1] = v4 + 1;
    a2[2] = v4 + 1;
    *a2 = v4;
  }
  if ((a1 & 2) == 0)
  {
    v6 = v5;
    if ((a1 & 4) == 0)
      return;
    goto LABEL_23;
  }
  v7 = (unint64_t)&v5[-v4];
  v8 = (uint64_t)&v5[-v4 + 1];
  if (v8 < 0)
    sub_100026E7C();
  if (2 * v7 > v8)
    v8 = 2 * v7;
  if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v9 = v8;
  if (v9)
    v10 = (unint64_t)operator new(v9);
  else
    v10 = 0;
  v11 = (char *)(v10 + v9);
  *(_BYTE *)(v10 + v7) = 2;
  v6 = (_BYTE *)(v10 + v7 + 1);
  if (v5 == (_BYTE *)v4)
  {
    v10 += v7;
  }
  else
  {
    v12 = &v5[~v4];
    do
    {
      v13 = *--v5;
      (v12--)[v10] = v13;
    }
    while (v5 != (_BYTE *)v4);
  }
  *a2 = v10;
  a2[1] = (unint64_t)v6;
  a2[2] = (unint64_t)v11;
  if (v4)
    operator delete((void *)v4);
  a2[1] = (unint64_t)v6;
  if ((a1 & 4) != 0)
  {
LABEL_23:
    v14 = a2[2];
    if ((unint64_t)v6 >= v14)
    {
      v16 = *a2;
      v17 = &v6[-*a2];
      v18 = (unint64_t)(v17 + 1);
      if ((uint64_t)(v17 + 1) < 0)
        sub_100026E7C();
      v19 = v14 - v16;
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
        v21 = (unint64_t)operator new(v20);
      else
        v21 = 0;
      v22 = (char *)(v21 + v20);
      v17[v21] = 4;
      v15 = (uint64_t)&v17[v21 + 1];
      if (v6 == (_BYTE *)v16)
      {
        v21 += (unint64_t)v17;
      }
      else
      {
        v23 = &v6[~v16];
        do
        {
          v24 = *--v6;
          (v23--)[v21] = v24;
        }
        while (v6 != (_BYTE *)v16);
      }
      *a2 = v21;
      a2[1] = v15;
      a2[2] = (unint64_t)v22;
      if (v16)
        operator delete((void *)v16);
    }
    else
    {
      *v6 = 4;
      v15 = (uint64_t)(v6 + 1);
    }
    a2[1] = v15;
  }
}

void sub_1002FED38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FED5C(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const std::locale::facet *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  const std::locale::facet *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[2];
  uint64_t v43;
  _QWORD v44[10];
  char v45;
  uint64_t v46;
  std::locale v47;

  sub_1000537E4((uint64_t)v42);
  LOBYTE(v47.__locale_) = 48;
  v2 = sub_10015BFA0(&v43, (char *)&v47);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 8;
  v3 = sub_100054C60(&v43, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v47, &std::ctype<char>::id);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v47);
  std::ostream::put(v3, v5);
  std::ostream::flush(v3);
  LOBYTE(v47.__locale_) = 9;
  v6 = sub_100054C60(&v43, (uint64_t)&v47, 1);
  sub_100054C60(v6, (uint64_t)"UWB config ids: [", 17);
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    do
    {
      *(_QWORD *)((char *)&v44[2] + *(_QWORD *)(v43 - 24)) = 4;
      std::ostream::operator<<(&v43, *(unsigned __int16 *)(v7 + 2 * v8));
      v7 = *a1;
      v9 = (a1[1] - *a1) >> 1;
      if (v9 - 1 > v8)
      {
        sub_100054C60(&v43, (uint64_t)", ", 2);
        v7 = *a1;
        v9 = (a1[1] - *a1) >> 1;
      }
      ++v8;
    }
    while (v9 > v8);
  }
  v10 = sub_100054C60(&v43, (uint64_t)"], ", 3);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v47, &std::ctype<char>::id);
  v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v47);
  std::ostream::put(v10, v12);
  std::ostream::flush(v10);
  LOBYTE(v47.__locale_) = 9;
  v13 = sub_100054C60(&v43, (uint64_t)&v47, 1);
  v14 = sub_100054C60(v13, (uint64_t)"Slot bitmask: ", 14);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 2;
  v15 = (_QWORD *)std::ostream::operator<<(v14, *((unsigned __int8 *)a1 + 24));
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
  v16 = std::locale::use_facet(&v47, &std::ctype<char>::id);
  v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v47);
  std::ostream::put(v15, v17);
  std::ostream::flush(v15);
  LOBYTE(v47.__locale_) = 9;
  v18 = sub_100054C60(&v43, (uint64_t)&v47, 1);
  v19 = sub_100054C60(v18, (uint64_t)"Sync code index bitmask: ", 25);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 24) = 8;
  v20 = (_QWORD *)std::ostream::operator<<(v19, *((unsigned int *)a1 + 7));
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet(&v47, &std::ctype<char>::id);
  v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v47);
  std::ostream::put(v20, v22);
  std::ostream::flush(v20);
  LOBYTE(v47.__locale_) = 9;
  v23 = sub_100054C60(&v43, (uint64_t)&v47, 1);
  v24 = sub_100054C60(v23, (uint64_t)"RF channel bitmask: ", 20);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 2;
  v25 = (_QWORD *)std::ostream::operator<<(v24, *((unsigned __int8 *)a1 + 32));
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
  v26 = std::locale::use_facet(&v47, &std::ctype<char>::id);
  v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v47);
  std::ostream::put(v25, v27);
  std::ostream::flush(v25);
  LOBYTE(v47.__locale_) = 9;
  v28 = sub_100054C60(&v43, (uint64_t)&v47, 1);
  v29 = sub_100054C60(v28, (uint64_t)"Hop config bitmask: ", 20);
  *(_QWORD *)((char *)v29 + *(_QWORD *)(*v29 - 24) + 24) = 2;
  v30 = (_QWORD *)std::ostream::operator<<(v29, *((unsigned __int8 *)a1 + 33));
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
  v31 = std::locale::use_facet(&v47, &std::ctype<char>::id);
  v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale(&v47);
  std::ostream::put(v30, v32);
  std::ostream::flush(v30);
  LOBYTE(v47.__locale_) = 9;
  v33 = sub_100054C60(&v43, (uint64_t)&v47, 1);
  sub_100054C60(v33, (uint64_t)"Pulse shape combos: [", 21);
  v34 = a1[5];
  if (a1[6] != v34)
  {
    v35 = 0;
    do
    {
      *(_QWORD *)((char *)&v44[2] + *(_QWORD *)(v43 - 24)) = 2;
      std::ostream::operator<<(&v43, *(unsigned __int8 *)(v34 + v35));
      v34 = a1[5];
      v36 = a1[6];
      if (~v34 + v36 > v35)
      {
        sub_100054C60(&v43, (uint64_t)", ", 2);
        v34 = a1[5];
        v36 = a1[6];
      }
      ++v35;
    }
    while (v36 - v34 > v35);
  }
  v37 = sub_100054C60(&v43, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(*v37 - 24)));
  v38 = std::locale::use_facet(&v47, &std::ctype<char>::id);
  v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale(&v47);
  std::ostream::put(v37, v39);
  std::ostream::flush(v37);
  sub_100054C60(&v43, (uint64_t)"}", 1);
  std::stringbuf::str(v44);
  *(_QWORD *)((char *)v42
  v43 = v40;
  if (v45 < 0)
    operator delete((void *)v44[8]);
  std::streambuf::~streambuf(v44);
  return std::ios::~ios(&v46);
}

void sub_1002FF350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100053910((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FF3B0(unsigned __int16 *a1)
{
  const std::locale::facet *v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *locale;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  const std::locale::facet *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  const std::locale::facet *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  const std::locale::facet *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  const std::locale::facet *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  const std::locale::facet *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  const std::locale::facet *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  const std::locale::facet *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  const std::locale::facet *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  const std::locale::facet *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  const std::locale::facet *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  const std::locale::facet *v119;
  uint64_t v120;
  unsigned __int8 *v121;
  unsigned __int8 *i;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  const std::locale::facet *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  const std::locale::facet *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  const std::locale::facet *v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  const std::locale::facet *v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  const std::locale::facet *v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  const std::locale::facet *v160;
  uint64_t v161;
  uint64_t v162;
  std::locale v164;
  uint64_t v165;
  unsigned __int8 v166;
  _QWORD v167[2];
  uint64_t v168;
  _QWORD v169[10];
  char v170;
  uint64_t v171;
  std::locale v172;

  sub_1000537E4((uint64_t)v167);
  std::ios_base::getloc((const std::ios_base *)((char *)&v169[-1] + *(_QWORD *)(v168 - 24)));
  v2 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v164);
  std::ostream::put(&v168, v3);
  std::ostream::flush(&v168);
  v4 = sub_100054C60(&v168, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v4, v6);
  std::ostream::flush(v4);
  LOBYTE(v164.__locale_) = 9;
  v7 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v8 = sub_100054C60(v7, (uint64_t)"Status: ", 8);
  v9 = sub_100302364(*a1);
  sub_100301BCC(v9, &v164);
  if ((v166 & 0x80u) == 0)
    locale = &v164;
  else
    locale = v164.__locale_;
  if ((v166 & 0x80u) == 0)
    v11 = v166;
  else
    v11 = v165;
  v12 = sub_100054C60(v8, (uint64_t)locale, v11);
  v13 = sub_100054C60(v12, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v172, &std::ctype<char>::id);
  v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v172);
  std::ostream::put(v13, v15);
  std::ostream::flush(v13);
  if ((char)v166 < 0)
    operator delete(v164.__locale_);
  LOBYTE(v164.__locale_) = 48;
  v16 = sub_10015BFA0(&v168, (char *)&v164);
  *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v164.__locale_) = 9;
  v17 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v18 = sub_100054C60(v17, (uint64_t)"Session type: 0x", 16);
  v19 = (_QWORD *)std::ostream::operator<<(v18, *((unsigned __int8 *)a1 + 4));
  v20 = sub_100054C60(v19, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v20, v22);
  std::ostream::flush(v20);
  *(_DWORD *)((char *)v169 + *(_QWORD *)(v168 - 24)) = *(_DWORD *)((_BYTE *)v169 + *(_QWORD *)(v168 - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v164.__locale_) = 9;
  v23 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v24 = sub_100054C60(v23, (uint64_t)"UWB session id: ", 16);
  v25 = (_QWORD *)std::ostream::operator<<(v24, *((unsigned int *)a1 + 2));
  v26 = sub_100054C60(v25, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
  v27 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v28 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v26, v28);
  std::ostream::flush(v26);
  LOBYTE(v164.__locale_) = 9;
  v29 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v30 = sub_100054C60(v29, (uint64_t)"Block start time (R1 ticks): ", 29);
  v31 = (_QWORD *)std::ostream::operator<<(v30, *((_QWORD *)a1 + 2));
  v32 = sub_100054C60(v31, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
  v33 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v32, v34);
  std::ostream::flush(v32);
  LOBYTE(v164.__locale_) = 9;
  v35 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v36 = sub_100054C60(v35, (uint64_t)"Block index: ", 13);
  v37 = (_QWORD *)std::ostream::operator<<(v36, a1[12]);
  v38 = sub_100054C60(v37, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
  v39 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v40 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v38, v40);
  std::ostream::flush(v38);
  LOBYTE(v164.__locale_) = 9;
  v41 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v42 = sub_100054C60(v41, (uint64_t)"Round index: ", 13);
  v43 = (_QWORD *)std::ostream::operator<<(v42, a1[13]);
  v44 = sub_100054C60(v43, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
  v45 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v44, v46);
  std::ostream::flush(v44);
  LOBYTE(v164.__locale_) = 9;
  v47 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v48 = sub_100054C60(v47, (uint64_t)"Round STS index: ", 17);
  v49 = (_QWORD *)std::ostream::operator<<(v48, *((unsigned int *)a1 + 8));
  v50 = sub_100054C60(v49, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
  v51 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v52 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v50, v52);
  std::ostream::flush(v50);
  LOBYTE(v164.__locale_) = 9;
  v53 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v54 = sub_100054C60(v53, (uint64_t)"Ranging event: ", 15);
  v55 = (_QWORD *)std::ostream::operator<<(v54, *((unsigned __int8 *)a1 + 29));
  v56 = sub_100054C60(v55, (uint64_t)" of ", 4);
  v57 = (_QWORD *)std::ostream::operator<<(v56, *((unsigned __int8 *)a1 + 28));
  v58 = sub_100054C60(v57, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)));
  v59 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v60 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v58, v60);
  std::ostream::flush(v58);
  if (*((_BYTE *)a1 + 80))
  {
    LOBYTE(v164.__locale_) = 9;
    v61 = sub_100054C60(&v168, (uint64_t)&v164, 1);
    v62 = sub_100054C60(v61, (uint64_t)"Range (m): ", 11);
    *(_QWORD *)((char *)v62 + *(_QWORD *)(*v62 - 24) + 16) = 5;
    if (!*((_BYTE *)a1 + 80))
      sub_10000BA44();
    v63 = (_QWORD *)std::ostream::operator<<(*((float *)a1 + 19));
    v64 = sub_100054C60(v63, (uint64_t)",", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
    v65 = std::locale::use_facet(&v164, &std::ctype<char>::id);
    v66 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
    std::locale::~locale(&v164);
    std::ostream::put(v64, v66);
    std::ostream::flush(v64);
  }
  LOBYTE(v164.__locale_) = 9;
  v67 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v68 = sub_100054C60(v67, (uint64_t)"Block size: ", 12);
  v69 = (_QWORD *)std::ostream::operator<<(v68, a1[18]);
  v70 = sub_100054C60(v69, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(_QWORD *)(*v70 - 24)));
  v71 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v72 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v70, v72);
  std::ostream::flush(v70);
  LOBYTE(v164.__locale_) = 9;
  v73 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v74 = sub_100054C60(v73, (uint64_t)"Round size: ", 12);
  v75 = (_QWORD *)std::ostream::operator<<(v74, a1[19]);
  v76 = sub_100054C60(v75, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(_QWORD *)(*v76 - 24)));
  v77 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v78 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v76, v78);
  std::ostream::flush(v76);
  LOBYTE(v164.__locale_) = 9;
  v79 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v80 = sub_100054C60(v79, (uint64_t)"Slot size: ", 11);
  v81 = (_QWORD *)std::ostream::operator<<(v80, a1[20]);
  v82 = sub_100054C60(v81, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*v82 - 24)));
  v83 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v84 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v82, v84);
  std::ostream::flush(v82);
  LOBYTE(v164.__locale_) = 9;
  v85 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v86 = sub_100054C60(v85, (uint64_t)"Num. RX skips: ", 15);
  v87 = (_QWORD *)std::ostream::operator<<(v86, *((unsigned __int8 *)a1 + 42));
  v88 = sub_100054C60(v87, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(_QWORD *)(*v88 - 24)));
  v89 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v90 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v88, v90);
  std::ostream::flush(v88);
  LOBYTE(v164.__locale_) = 9;
  v91 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v92 = sub_100054C60(v91, (uint64_t)"RX skip reasons: ", 17);
  sub_1002FE96C((uint64_t *)a1 + 6);
  if ((v166 & 0x80u) == 0)
    v93 = &v164;
  else
    v93 = v164.__locale_;
  if ((v166 & 0x80u) == 0)
    v94 = v166;
  else
    v94 = v165;
  v95 = sub_100054C60(v92, (uint64_t)v93, v94);
  v96 = sub_100054C60(v95, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24)));
  v97 = std::locale::use_facet(&v172, &std::ctype<char>::id);
  v98 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
  std::locale::~locale(&v172);
  std::ostream::put(v96, v98);
  std::ostream::flush(v96);
  if ((char)v166 < 0)
    operator delete(v164.__locale_);
  LOBYTE(v164.__locale_) = 9;
  v99 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v100 = sub_100054C60(v99, (uint64_t)"Next hop flag: ", 15);
  v101 = (_QWORD *)std::ostream::operator<<(v100, *((unsigned __int8 *)a1 + 72));
  v102 = sub_100054C60(v101, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(_QWORD *)(*v102 - 24)));
  v103 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v104 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v102, v104);
  std::ostream::flush(v102);
  LOBYTE(v164.__locale_) = 9;
  v105 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v106 = sub_100054C60(v105, (uint64_t)"Next round index: ", 18);
  v107 = (_QWORD *)std::ostream::operator<<(v106, a1[37]);
  v108 = sub_100054C60(v107, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v108 + *(_QWORD *)(*v108 - 24)));
  v109 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v110 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v108, v110);
  std::ostream::flush(v108);
  LOBYTE(v164.__locale_) = 9;
  v111 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v112 = sub_100054C60(v111, (uint64_t)"Num. successes: ", 16);
  v113 = (_QWORD *)std::ostream::operator<<(v112, *((unsigned __int8 *)a1 + 84));
  v114 = sub_100054C60(v113, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v114 + *(_QWORD *)(*v114 - 24)));
  v115 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v116 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v115->__vftable[2].~facet_0)(v115, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v114, v116);
  std::ostream::flush(v114);
  LOBYTE(v164.__locale_) = 9;
  v117 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v118 = sub_100054C60(v117, (uint64_t)"Responder info: [", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(_QWORD *)(*v118 - 24)));
  v119 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v120 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v118, v120);
  std::ostream::flush(v118);
  v121 = (unsigned __int8 *)*((_QWORD *)a1 + 11);
  for (i = (unsigned __int8 *)*((_QWORD *)a1 + 12); v121 != i; v121 += 16)
  {
    LOBYTE(v164.__locale_) = 9;
    v123 = sub_100054C60(&v168, (uint64_t)&v164, 1);
    LOBYTE(v164.__locale_) = 9;
    v124 = sub_100054C60(v123, (uint64_t)&v164, 1);
    v125 = sub_100054C60(v124, (uint64_t)"{", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v125 + *(_QWORD *)(*v125 - 24)));
    v126 = std::locale::use_facet(&v164, &std::ctype<char>::id);
    v127 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v126->__vftable[2].~facet_0)(v126, 10);
    std::locale::~locale(&v164);
    std::ostream::put(v125, v127);
    std::ostream::flush(v125);
    LOBYTE(v164.__locale_) = 48;
    v128 = sub_10015BFA0(&v168, (char *)&v164);
    *(_DWORD *)((char *)v128 + *(_QWORD *)(*v128 - 24) + 8) = *(_DWORD *)((_BYTE *)v128 + *(_QWORD *)(*v128 - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
    LOBYTE(v164.__locale_) = 9;
    v129 = sub_100054C60(&v168, (uint64_t)&v164, 1);
    LOBYTE(v164.__locale_) = 9;
    v130 = sub_100054C60(v129, (uint64_t)&v164, 1);
    LOBYTE(v164.__locale_) = 9;
    v131 = sub_100054C60(v130, (uint64_t)&v164, 1);
    v132 = sub_100054C60(v131, (uint64_t)"RX status: 0x", 13);
    *(_QWORD *)((char *)v132 + *(_QWORD *)(*v132 - 24) + 24) = 1;
    v133 = (_QWORD *)std::ostream::operator<<(v132, *v121);
    v134 = sub_100054C60(v133, (uint64_t)",", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v134 + *(_QWORD *)(*v134 - 24)));
    v135 = std::locale::use_facet(&v164, &std::ctype<char>::id);
    v136 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v135->__vftable[2].~facet_0)(v135, 10);
    std::locale::~locale(&v164);
    std::ostream::put(v134, v136);
    std::ostream::flush(v134);
    *(_DWORD *)((char *)v169 + *(_QWORD *)(v168 - 24)) = *(_DWORD *)((_BYTE *)v169 + *(_QWORD *)(v168 - 24)) & 0xFFFFFFB5 | 2;
    LOBYTE(v164.__locale_) = 9;
    v137 = sub_100054C60(&v168, (uint64_t)&v164, 1);
    LOBYTE(v164.__locale_) = 9;
    v138 = sub_100054C60(v137, (uint64_t)&v164, 1);
    LOBYTE(v164.__locale_) = 9;
    v139 = sub_100054C60(v138, (uint64_t)&v164, 1);
    v140 = sub_100054C60(v139, (uint64_t)"CFO (ppm): ", 11);
    v141 = (_QWORD *)std::ostream::operator<<(v140, (char)v121[1]);
    v142 = sub_100054C60(v141, (uint64_t)",", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v142 + *(_QWORD *)(*v142 - 24)));
    v143 = std::locale::use_facet(&v164, &std::ctype<char>::id);
    v144 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v143->__vftable[2].~facet_0)(v143, 10);
    std::locale::~locale(&v164);
    std::ostream::put(v142, v144);
    std::ostream::flush(v142);
    LOBYTE(v164.__locale_) = 9;
    v145 = sub_100054C60(&v168, (uint64_t)&v164, 1);
    LOBYTE(v164.__locale_) = 9;
    v146 = sub_100054C60(v145, (uint64_t)&v164, 1);
    LOBYTE(v164.__locale_) = 9;
    v147 = sub_100054C60(v146, (uint64_t)&v164, 1);
    v148 = sub_100054C60(v147, (uint64_t)"soiRssi (dBm): ", 15);
    *(_QWORD *)((char *)v148 + *(_QWORD *)(*v148 - 24) + 16) = 5;
    v149 = (_QWORD *)std::ostream::operator<<(v148);
    v150 = sub_100054C60(v149, (uint64_t)",", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v150 + *(_QWORD *)(*v150 - 24)));
    v151 = std::locale::use_facet(&v164, &std::ctype<char>::id);
    v152 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v151->__vftable[2].~facet_0)(v151, 10);
    std::locale::~locale(&v164);
    std::ostream::put(v150, v152);
    std::ostream::flush(v150);
    LOBYTE(v164.__locale_) = 9;
    v153 = sub_100054C60(&v168, (uint64_t)&v164, 1);
    LOBYTE(v164.__locale_) = 9;
    v154 = sub_100054C60(v153, (uint64_t)&v164, 1);
    v155 = sub_100054C60(v154, (uint64_t)"}, ", 3);
    std::ios_base::getloc((const std::ios_base *)((char *)v155 + *(_QWORD *)(*v155 - 24)));
    v156 = std::locale::use_facet(&v164, &std::ctype<char>::id);
    v157 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v156->__vftable[2].~facet_0)(v156, 10);
    std::locale::~locale(&v164);
    std::ostream::put(v155, v157);
    std::ostream::flush(v155);
  }
  LOBYTE(v164.__locale_) = 9;
  v158 = sub_100054C60(&v168, (uint64_t)&v164, 1);
  v159 = sub_100054C60(v158, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v159 + *(_QWORD *)(*v159 - 24)));
  v160 = std::locale::use_facet(&v164, &std::ctype<char>::id);
  v161 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v160->__vftable[2].~facet_0)(v160, 10);
  std::locale::~locale(&v164);
  std::ostream::put(v159, v161);
  std::ostream::flush(v159);
  sub_100054C60(&v168, (uint64_t)"}", 1);
  std::stringbuf::str(v169);
  *(_QWORD *)((char *)v167
  v168 = v162;
  if (v170 < 0)
    operator delete((void *)v169[8]);
  std::streambuf::~streambuf(v169);
  return std::ios::~ios(&v171);
}

void sub_100300534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_100053910((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100300604(unsigned __int16 *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  void **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *i;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v16;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;

  sub_1000537E4((uint64_t)v17);
  v2 = sub_100054C60(&v18, (uint64_t)"BI: ", 4);
  std::ostream::operator<<(v2, a1[12]);
  v3 = sub_100054C60(&v18, (uint64_t)", ", 2);
  v4 = sub_100302364(*a1);
  sub_100301BCC(v4, __p);
  if ((v16 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v6 = v16;
  else
    v6 = (uint64_t)__p[1];
  sub_100054C60(v3, (uint64_t)v5, v6);
  if ((char)v16 < 0)
    operator delete(__p[0]);
  v7 = (unsigned __int8 *)*((_QWORD *)a1 + 11);
  for (i = (unsigned __int8 *)*((_QWORD *)a1 + 12); v7 != i; v7 += 16)
  {
    LOBYTE(__p[0]) = 48;
    v9 = sub_10015BFA0(&v18, (char *)__p);
    *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 8;
    v10 = sub_100054C60(&v18, (uint64_t)", <RX: 0x", 9);
    *(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 1;
    std::ostream::operator<<(v10, *v7);
    *(_DWORD *)((char *)v19 + *(_QWORD *)(v18 - 24)) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(v18 - 24)) & 0xFFFFFFB5 | 2;
    v11 = sub_100054C60(&v18, (uint64_t)", SR: ", 6);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 16) = 5;
    v12 = (_QWORD *)std::ostream::operator<<(v11);
    sub_100054C60(v12, (uint64_t)">", 1);
  }
  std::stringbuf::str(v19);
  *(_QWORD *)((char *)v17
  v18 = v13;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_100300828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_100053910((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100300868(unsigned __int16 *a1)
{
  const std::locale::facet *v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *locale;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  const std::locale::facet *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  const std::locale::facet *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  const std::locale::facet *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  const std::locale::facet *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  const std::locale::facet *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  const std::locale::facet *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  const std::locale::facet *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  const std::locale::facet *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  const std::locale::facet *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  const std::locale::facet *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  const std::locale::facet *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  const std::locale::facet *v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  const std::locale::facet *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  const std::locale::facet *v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  const std::locale::facet *v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  const std::locale::facet *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  const std::locale::facet *v159;
  uint64_t v160;
  uint64_t v161;
  std::locale v163;
  uint64_t v164;
  unsigned __int8 v165;
  _QWORD v166[2];
  uint64_t v167;
  _QWORD v168[10];
  char v169;
  uint64_t v170;
  std::locale v171;

  sub_1000537E4((uint64_t)v166);
  std::ios_base::getloc((const std::ios_base *)((char *)&v168[-1] + *(_QWORD *)(v167 - 24)));
  v2 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v163);
  std::ostream::put(&v167, v3);
  std::ostream::flush(&v167);
  v4 = sub_100054C60(&v167, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v4, v6);
  std::ostream::flush(v4);
  LOBYTE(v163.__locale_) = 9;
  v7 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v8 = sub_100054C60(v7, (uint64_t)"Status: ", 8);
  v9 = sub_100302364(*a1);
  sub_100301BCC(v9, &v163);
  if ((v165 & 0x80u) == 0)
    locale = &v163;
  else
    locale = v163.__locale_;
  if ((v165 & 0x80u) == 0)
    v11 = v165;
  else
    v11 = v164;
  v12 = sub_100054C60(v8, (uint64_t)locale, v11);
  v13 = sub_100054C60(v12, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v171, &std::ctype<char>::id);
  v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v171);
  std::ostream::put(v13, v15);
  std::ostream::flush(v13);
  if ((char)v165 < 0)
    operator delete(v163.__locale_);
  LOBYTE(v163.__locale_) = 48;
  v16 = sub_10015BFA0(&v167, (char *)&v163);
  *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v163.__locale_) = 9;
  v17 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v18 = sub_100054C60(v17, (uint64_t)"Session type: 0x", 16);
  v19 = (_QWORD *)std::ostream::operator<<(v18, *((unsigned __int8 *)a1 + 4));
  v20 = sub_100054C60(v19, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v20, v22);
  std::ostream::flush(v20);
  *(_DWORD *)((char *)v168 + *(_QWORD *)(v167 - 24)) = *(_DWORD *)((_BYTE *)v168 + *(_QWORD *)(v167 - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v163.__locale_) = 9;
  v23 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v24 = sub_100054C60(v23, (uint64_t)"UWB session id: ", 16);
  v25 = (_QWORD *)std::ostream::operator<<(v24, *((unsigned int *)a1 + 2));
  v26 = sub_100054C60(v25, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
  v27 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v28 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v26, v28);
  std::ostream::flush(v26);
  LOBYTE(v163.__locale_) = 9;
  v29 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v30 = sub_100054C60(v29, (uint64_t)"Responder index: ", 17);
  v31 = (_QWORD *)std::ostream::operator<<(v30, *((unsigned __int8 *)a1 + 12));
  v32 = sub_100054C60(v31, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
  v33 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v32, v34);
  std::ostream::flush(v32);
  LOBYTE(v163.__locale_) = 9;
  v35 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v36 = sub_100054C60(v35, (uint64_t)"Block start time (R1 ticks): ", 29);
  v37 = (_QWORD *)std::ostream::operator<<(v36, *((_QWORD *)a1 + 2));
  v38 = sub_100054C60(v37, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
  v39 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v40 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v38, v40);
  std::ostream::flush(v38);
  LOBYTE(v163.__locale_) = 9;
  v41 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v42 = sub_100054C60(v41, (uint64_t)"Block index: ", 13);
  v43 = (_QWORD *)std::ostream::operator<<(v42, a1[12]);
  v44 = sub_100054C60(v43, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
  v45 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v44, v46);
  std::ostream::flush(v44);
  LOBYTE(v163.__locale_) = 9;
  v47 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v48 = sub_100054C60(v47, (uint64_t)"Round index: ", 13);
  v49 = (_QWORD *)std::ostream::operator<<(v48, a1[13]);
  v50 = sub_100054C60(v49, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
  v51 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v52 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v50, v52);
  std::ostream::flush(v50);
  LOBYTE(v163.__locale_) = 9;
  v53 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v54 = sub_100054C60(v53, (uint64_t)"Round STS index: ", 17);
  v55 = (_QWORD *)std::ostream::operator<<(v54, *((unsigned int *)a1 + 7));
  v56 = sub_100054C60(v55, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(_QWORD *)(*v56 - 24)));
  v57 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v58 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v56, v58);
  std::ostream::flush(v56);
  LOBYTE(v163.__locale_) = 9;
  v59 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v60 = sub_100054C60(v59, (uint64_t)"Ranging event: ", 15);
  v61 = (_QWORD *)std::ostream::operator<<(v60, *((unsigned __int8 *)a1 + 43));
  v62 = sub_100054C60(v61, (uint64_t)" of ", 4);
  v63 = (_QWORD *)std::ostream::operator<<(v62, *((unsigned __int8 *)a1 + 42));
  v64 = sub_100054C60(v63, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
  v65 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v66 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v64, v66);
  std::ostream::flush(v64);
  LOBYTE(v163.__locale_) = 9;
  v67 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v68 = sub_100054C60(v67, (uint64_t)"Range (m): ", 11);
  *(_QWORD *)((char *)v68 + *(_QWORD *)(*v68 - 24) + 16) = 5;
  v69 = (_QWORD *)std::ostream::operator<<(*((float *)a1 + 11));
  v70 = sub_100054C60(v69, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(_QWORD *)(*v70 - 24)));
  v71 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v72 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v70, v72);
  std::ostream::flush(v70);
  LOBYTE(v163.__locale_) = 9;
  v73 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v74 = sub_100054C60(v73, (uint64_t)"CFO (ppt): ", 11);
  v75 = (_QWORD *)std::ostream::operator<<(v74, *((unsigned int *)a1 + 12));
  v76 = sub_100054C60(v75, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(_QWORD *)(*v76 - 24)));
  v77 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v78 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v76, v78);
  std::ostream::flush(v76);
  LOBYTE(v163.__locale_) = 48;
  v79 = sub_10015BFA0(&v167, (char *)&v163);
  *(_DWORD *)((char *)v79 + *(_QWORD *)(*v79 - 24) + 8) = *(_DWORD *)((_BYTE *)v79 + *(_QWORD *)(*v79 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v163.__locale_) = 9;
  v80 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v81 = sub_100054C60(v80, (uint64_t)"Pre-poll RX status: 0x", 22);
  *(_QWORD *)((char *)v81 + *(_QWORD *)(*v81 - 24) + 24) = 1;
  v82 = (_QWORD *)std::ostream::operator<<(v81, *((unsigned __int8 *)a1 + 52));
  v83 = sub_100054C60(v82, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(_QWORD *)(*v83 - 24)));
  v84 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v85 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v83, v85);
  std::ostream::flush(v83);
  *(_DWORD *)((char *)v168 + *(_QWORD *)(v167 - 24)) = *(_DWORD *)((_BYTE *)v168 + *(_QWORD *)(v167 - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v163.__locale_) = 9;
  v86 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v87 = sub_100054C60(v86, (uint64_t)"Pre-poll soiRssi (dBm): ", 24);
  *(_QWORD *)((char *)v87 + *(_QWORD *)(*v87 - 24) + 16) = 5;
  v88 = (_QWORD *)std::ostream::operator<<(v87);
  v89 = sub_100054C60(v88, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(_QWORD *)(*v89 - 24)));
  v90 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v91 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v89, v91);
  std::ostream::flush(v89);
  LOBYTE(v163.__locale_) = 48;
  v92 = sub_10015BFA0(&v167, (char *)&v163);
  *(_DWORD *)((char *)v92 + *(_QWORD *)(*v92 - 24) + 8) = *(_DWORD *)((_BYTE *)v92 + *(_QWORD *)(*v92 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v163.__locale_) = 9;
  v93 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v94 = sub_100054C60(v93, (uint64_t)"Poll RX status: 0x", 18);
  *(_QWORD *)((char *)v94 + *(_QWORD *)(*v94 - 24) + 24) = 1;
  v95 = (_QWORD *)std::ostream::operator<<(v94, *((unsigned __int8 *)a1 + 64));
  v96 = sub_100054C60(v95, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24)));
  v97 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v98 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v96, v98);
  std::ostream::flush(v96);
  *(_DWORD *)((char *)v168 + *(_QWORD *)(v167 - 24)) = *(_DWORD *)((_BYTE *)v168 + *(_QWORD *)(v167 - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v163.__locale_) = 9;
  v99 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v100 = sub_100054C60(v99, (uint64_t)"Poll soiRssi (dBm): ", 20);
  *(_QWORD *)((char *)v100 + *(_QWORD *)(*v100 - 24) + 16) = 5;
  v101 = (_QWORD *)std::ostream::operator<<(v100);
  v102 = sub_100054C60(v101, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(_QWORD *)(*v102 - 24)));
  v103 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v104 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v102, v104);
  std::ostream::flush(v102);
  LOBYTE(v163.__locale_) = 48;
  v105 = sub_10015BFA0(&v167, (char *)&v163);
  *(_DWORD *)((char *)v105 + *(_QWORD *)(*v105 - 24) + 8) = *(_DWORD *)((_BYTE *)v105 + *(_QWORD *)(*v105 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v163.__locale_) = 9;
  v106 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v107 = sub_100054C60(v106, (uint64_t)"Final RX status: 0x", 19);
  *(_QWORD *)((char *)v107 + *(_QWORD *)(*v107 - 24) + 24) = 1;
  v108 = (_QWORD *)std::ostream::operator<<(v107, *((unsigned __int8 *)a1 + 80));
  v109 = sub_100054C60(v108, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v109 + *(_QWORD *)(*v109 - 24)));
  v110 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v111 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v110->__vftable[2].~facet_0)(v110, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v109, v111);
  std::ostream::flush(v109);
  *(_DWORD *)((char *)v168 + *(_QWORD *)(v167 - 24)) = *(_DWORD *)((_BYTE *)v168 + *(_QWORD *)(v167 - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v163.__locale_) = 9;
  v112 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v113 = sub_100054C60(v112, (uint64_t)"Final soiRssi (dBm): ", 21);
  *(_QWORD *)((char *)v113 + *(_QWORD *)(*v113 - 24) + 16) = 5;
  v114 = (_QWORD *)std::ostream::operator<<(v113);
  v115 = sub_100054C60(v114, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v115 + *(_QWORD *)(*v115 - 24)));
  v116 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v117 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v115, v117);
  std::ostream::flush(v115);
  LOBYTE(v163.__locale_) = 48;
  v118 = sub_10015BFA0(&v167, (char *)&v163);
  *(_DWORD *)((char *)v118 + *(_QWORD *)(*v118 - 24) + 8) = *(_DWORD *)((_BYTE *)v118 + *(_QWORD *)(*v118 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v163.__locale_) = 9;
  v119 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v120 = sub_100054C60(v119, (uint64_t)"Final-data RX status: 0x", 24);
  *(_QWORD *)((char *)v120 + *(_QWORD *)(*v120 - 24) + 24) = 1;
  v121 = (_QWORD *)std::ostream::operator<<(v120, *((unsigned __int8 *)a1 + 96));
  v122 = sub_100054C60(v121, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v122 + *(_QWORD *)(*v122 - 24)));
  v123 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v124 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v123->__vftable[2].~facet_0)(v123, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v122, v124);
  std::ostream::flush(v122);
  *(_DWORD *)((char *)v168 + *(_QWORD *)(v167 - 24)) = *(_DWORD *)((_BYTE *)v168 + *(_QWORD *)(v167 - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v163.__locale_) = 9;
  v125 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v126 = sub_100054C60(v125, (uint64_t)"Final-data soiRssi (dBm): ", 26);
  *(_QWORD *)((char *)v126 + *(_QWORD *)(*v126 - 24) + 16) = 5;
  v127 = (_QWORD *)std::ostream::operator<<(v126);
  v128 = sub_100054C60(v127, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v128 + *(_QWORD *)(*v128 - 24)));
  v129 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v130 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v129->__vftable[2].~facet_0)(v129, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v128, v130);
  std::ostream::flush(v128);
  LOBYTE(v163.__locale_) = 9;
  v131 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v132 = sub_100054C60(v131, (uint64_t)"Block size: ", 12);
  v133 = (_QWORD *)std::ostream::operator<<(v132, a1[16]);
  v134 = sub_100054C60(v133, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v134 + *(_QWORD *)(*v134 - 24)));
  v135 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v136 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v135->__vftable[2].~facet_0)(v135, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v134, v136);
  std::ostream::flush(v134);
  LOBYTE(v163.__locale_) = 9;
  v137 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v138 = sub_100054C60(v137, (uint64_t)"Round size: ", 12);
  v139 = (_QWORD *)std::ostream::operator<<(v138, a1[17]);
  v140 = sub_100054C60(v139, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v140 + *(_QWORD *)(*v140 - 24)));
  v141 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v142 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v141->__vftable[2].~facet_0)(v141, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v140, v142);
  std::ostream::flush(v140);
  LOBYTE(v163.__locale_) = 9;
  v143 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v144 = sub_100054C60(v143, (uint64_t)"Slot size: ", 11);
  v145 = (_QWORD *)std::ostream::operator<<(v144, a1[18]);
  v146 = sub_100054C60(v145, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v146 + *(_QWORD *)(*v146 - 24)));
  v147 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v148 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v147->__vftable[2].~facet_0)(v147, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v146, v148);
  std::ostream::flush(v146);
  LOBYTE(v163.__locale_) = 9;
  v149 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v150 = sub_100054C60(v149, (uint64_t)"Next hop flag: ", 15);
  v151 = (_QWORD *)std::ostream::operator<<(v150, *((unsigned __int8 *)a1 + 38));
  v152 = sub_100054C60(v151, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v152 + *(_QWORD *)(*v152 - 24)));
  v153 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v154 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v153->__vftable[2].~facet_0)(v153, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v152, v154);
  std::ostream::flush(v152);
  LOBYTE(v163.__locale_) = 9;
  v155 = sub_100054C60(&v167, (uint64_t)&v163, 1);
  v156 = sub_100054C60(v155, (uint64_t)"Next round index: ", 18);
  v157 = (_QWORD *)std::ostream::operator<<(v156, a1[20]);
  v158 = sub_100054C60(v157, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v158 + *(_QWORD *)(*v158 - 24)));
  v159 = std::locale::use_facet(&v163, &std::ctype<char>::id);
  v160 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v159->__vftable[2].~facet_0)(v159, 10);
  std::locale::~locale(&v163);
  std::ostream::put(v158, v160);
  std::ostream::flush(v158);
  sub_100054C60(&v167, (uint64_t)"}", 1);
  std::stringbuf::str(v168);
  *(_QWORD *)((char *)v166
  v167 = v161;
  if (v169 < 0)
    operator delete((void *)v168[8]);
  std::streambuf::~streambuf(v168);
  return std::ios::~ios(&v170);
}

void sub_100301AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100053910((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_100301BCC@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 <= -1034)
  {
    switch(a1)
    {
      case -4026:
        v2 = "SPLIT_DCK_MESSAGES_TOO_MANY_BYTES";
        break;
      case -4025:
        v2 = "SPLIT_DCK_MESSAGES_NOT_ENOUGH_BYTES";
        break;
      case -4024:
        v2 = "INVALID_DCK_SUB_EVENT_CODE";
        break;
      case -4023:
        v2 = "INVALID_DCK_SUB_EVENT_CATEGORY";
        break;
      case -4022:
        v2 = "DCK_NO_SUB_EVENT_CODE";
        break;
      case -4021:
        v2 = "DCK_NO_SUB_EVENT_CATEGORY";
        break;
      case -4020:
        v2 = "DCK_PULSE_SHAPE_COMBO_LENGTH_EXCEEDS_MSG_SIZE";
        break;
      case -4019:
        v2 = "DCK_PULSE_SHAPE_COMBO_LENGTH_EXCEEDS_UINT8_MAX";
        break;
      case -4018:
        v2 = "DCK_PULSE_SHAPE_COMBO_LENGTH_ZERO";
        break;
      case -4017:
        v2 = "DCK_NO_PULSE_SHAPE_COMBO_LENGTH";
        break;
      case -4016:
        v2 = "DCK_UWB_CONFIG_ID_LENGTH_EXCEEDS_MSG_SIZE";
        break;
      case -4015:
        v2 = "DCK_UWB_CONFIG_ID_LENGTH_EXCEEDS_UINT8_MAX";
        break;
      case -4014:
        v2 = "DCK_UWB_CONFIG_ID_LENGTH_ODD";
        break;
      case -4013:
        v2 = "DCK_UWB_CONFIG_ID_LENGTH_ZERO";
        break;
      case -4012:
        v2 = "DCK_NO_UWB_CONFIG_ID_LENGTH";
        break;
      case -4011:
        v2 = "DCK_PROTOCOL_VERSION_LENGTH_EXCEEDS_MSG_SIZE";
        break;
      case -4010:
        v2 = "DCK_PROTOCOL_VERSION_LENGTH_EXCEEDS_UINT8_MAX";
        break;
      case -4009:
        v2 = "DCK_PROTOCOL_VERSION_LENGTH_ODD";
        break;
      case -4008:
        v2 = "DCK_PROTOCOL_VERSION_LENGTH_ZERO";
        break;
      case -4007:
        v2 = "DCK_NO_PROTOCOL_VERSION_LENGTH";
        break;
      case -4006:
        v2 = "DCK_MSG_UNEXPECTED_DATA_LENGTH";
        break;
      case -4005:
        v2 = "DCK_HEADER_ID_MISMATCHES";
        break;
      case -4004:
        v2 = "INVALID_DCK_MESSAGE_ID";
        break;
      case -4003:
        v2 = "INVALID_DCK_PROTOCOL_TYPE";
        break;
      case -4002:
        v2 = "DCK_MISMATCHED_DATA_LENGTH";
        break;
      case -4001:
        v2 = "DCK_MESSAGE_EXCEEDS_MAX_SIZE";
        break;
      case -4000:
        v2 = "DCK_HEADER_TOO_SHORT";
        break;
      default:
        switch(a1)
        {
          case -2023:
            v2 = "ACWG_INVALID_OFFSET_BETWEEN_RANGING_ROUNDS";
            break;
          case -2022:
            v2 = "ACWG_INVALID_NUM_RANGING_ROUNDS_PER_BLOCK";
            break;
          case -2021:
            v2 = "ACWG_INVALID_TOTAL_NUM_ROUNDS_PER_BLOCK";
            break;
          case -2020:
            v2 = "CAPABILITIES_REQUIRE_RENEGOTIATION";
            break;
          case -2019:
            v2 = "UNSUPPORTED_HOP_CONFIG";
            break;
          case -2018:
            v2 = "UNSUPPORTED_SYNC_CODES";
            break;
          case -2017:
            v2 = "UNSUPPORTED_NUM_SLOTS_PER_ROUND";
            break;
          case -2016:
            v2 = "UNSUPPORTED_CHANNELS";
            break;
          case -2015:
            v2 = "INVALID_HOP_MODE_SEQUENCE_COMBO";
            break;
          case -2014:
            v2 = "INVALID_HOP_MODE";
            break;
          case -2013:
            v2 = "INVALID_SYNC_CODES";
            break;
          case -2012:
            v2 = "INVALID_SLOTS_RESPONDERS_COMBO";
            break;
          case -2011:
            v2 = "INVALID_SLOTS_CHAPS_COMBO";
            break;
          case -2010:
            v2 = "INVALID_NUM_CHAPS_PER_SLOT";
            break;
          case -2009:
            v2 = "INVALID_NUM_SLOTS_PER_ROUND";
            break;
          case -2008:
            v2 = "NO_ALLOWED_CHANNELS";
            break;
          case -2007:
            v2 = "RAN_MULTIPLIER_TOO_SMALL";
            break;
          case -2006:
            v2 = "NO_BT_TIME_SYNC";
            break;
          case -2005:
            v2 = "CAPABILITIES_DO_NOT_MATCH_PREVIOUS_SELECTION";
            break;
          case -2004:
            v2 = "UNSUPPORTED_PULSE_SHAPE_COMBO";
            break;
          case -2003:
            v2 = "UNSUPPORTED_UWB_CFG_ID";
            break;
          case -2002:
            v2 = "UNSUPPORTED_DCK_PROTOCOL_VERSION";
            break;
          case -2001:
            v2 = "NO_CACHED_NEGOTIATION_PARAMETERS";
            break;
          case -2000:
            v2 = "PARAMETER_NEGOTIATION_OUT_OF_ORDER";
            break;
          default:
            switch(a1)
            {
              case -3013:
                v2 = "RECOVERY_REQUEST_GET_KEY_FAILURE";
                break;
              case -3012:
                v2 = "SESSION_REQUEST_GET_KEY_FAILURE";
                break;
              case -3011:
                v2 = "TIMEOUT_FOR_SUSPEND_RESPONSE_NOT_EXPECTED";
                break;
              case -3010:
                v2 = "TIMEOUT_AB_WHEN_NOT_RANGING";
                break;
              case -3009:
                v2 = "SUSPEND_RESPONSE_NOT_EXPECTED";
                break;
              case -3008:
                v2 = "SESSION_SETUP_REQUEST_NOT_EXPECTED";
                break;
              case -3007:
                v2 = "SESSION_REQUEST_NOT_EXPECTED";
                break;
              case -3006:
                v2 = "RECOVERY_REQUEST_MISMATCHED_UWB_SESSION_ID";
                break;
              case -3005:
                v2 = "RECOVERY_REQUEST_WHEN_SESSION_NOT_SUSPENDED";
                break;
              case -3004:
                v2 = "RECOVERY_REQUEST_PARAMETER_UPDATE_FAILED";
                break;
              case -3003:
                v2 = "NO_CACHED_KEY";
                break;
              case -3002:
                v2 = "NO_CACHED_UWB_SESSION_ID";
                break;
              case -3001:
                v2 = "SUSPEND_REQUEST_MISMATCHED_UWB_SESSION_ID";
                break;
              case -3000:
                v2 = "SUSPEND_REQUEST_WHEN_NOT_RANGING";
                break;
              default:
LABEL_140:
                v2 = "UNKNOWN";
                break;
            }
            break;
        }
        break;
    }
  }
  else
  {
    v2 = "SUCCESS";
    switch(a1)
    {
      case 0:
        return sub_10000BF04(a2, v2);
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 9:
      case 10:
      case 11:
      case 15:
      case 16:
      case 17:
      case 24:
      case 25:
      case 26:
      case 27:
      case 30:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 58:
      case 59:
      case 60:
      case 61:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
        goto LABEL_140;
      case 6:
        v2 = "HSI_ERR_BUSY";
        break;
      case 8:
        v2 = "HSI_ERR_SES_MAX_LIMIT_REACHED";
        break;
      case 12:
        v2 = "HSI_ERR_SES_TIMEOUT";
        break;
      case 13:
        v2 = "HSI_ERR_SES_SYNC_TIMEOUT";
        break;
      case 14:
        v2 = "HSI_ERR_MISSED_RANGING_CYCLE";
        break;
      case 18:
        v2 = "HSI_ERR_SES_ALREADY_ACTIVE";
        break;
      case 19:
        v2 = "HSI_ERR_SES_ALREADY_DISABLED";
        break;
      case 20:
        v2 = "HSI_ERR_SES_SCHEDULING_CONFLICT";
        break;
      case 21:
        v2 = "HSI_ERR_SES_COEX_CONFLICT";
        break;
      case 22:
        v2 = "HSI_ERR_SES_WRONG_SYNC";
        break;
      case 23:
        v2 = "HSI_ERR_START_TIME_ELAPSED";
        break;
      case 28:
        v2 = "HSI_ERR_INVALID_SES_ROLE";
        break;
      case 29:
        v2 = "HSI_ERR_INVALID_ANTENNA_CFG";
        break;
      case 31:
        v2 = "HSI_ERR_INVALID_PREAMBLE";
        break;
      case 32:
        v2 = "HSI_ERR_INVALID_FEM_CFG";
        break;
      case 39:
        v2 = "HSI_ERR_INVALID_CHANNEL";
        break;
      case 48:
        v2 = "HSI_ERR_INVALID_ALISHA_UWB_CFG_ID";
        break;
      case 49:
        v2 = "HSI_ERR_INVALID_ALISHA_RAN_MULTIPLIER";
        break;
      case 50:
        v2 = "HSI_ERR_INVALID_ALISHA_NRESPONDERS";
        break;
      case 51:
        v2 = "HSI_ERR_INVALID_SLOT_SIZE";
        break;
      case 52:
        v2 = "HSI_ERR_INVALID_NSLOTS_PER_ROUND";
        break;
      case 53:
        v2 = "HSI_ERR_INVALID_RBLOCK_CFG";
        break;
      case 54:
        v2 = "HSI_ERR_ALISHA_UWB_SES_ID_NOT_FOUND";
        break;
      case 55:
        v2 = "HSI_ERR_ALISHA_UWB_SES_ID_ALREADY_IN_USE";
        break;
      case 56:
        v2 = "HSI_ERR_ALISHA_KEY_STORE_FULL";
        break;
      case 57:
        v2 = "HSI_ERR_INVALID_ALISHA_RESPONDER_IDX";
        break;
      case 62:
        v2 = "HSI_ERR_SLOT_TIME_ELAPSED";
        break;
      case 63:
        v2 = "HSI_ERR_INVALID_PULSE_SHAPE_COMBO";
        break;
      case 64:
        v2 = "HSI_ERR_INVALID_ALISHA_HOP_MODE";
        break;
      case 65:
        v2 = "HSI_ERR_INVALID_ALISHA_HOP_SEQUENCE";
        break;
      case 71:
        v2 = "HSI_ERR_ALISHA_URSK_RETRIEVAL_FAILED";
        break;
      case 72:
        v2 = "HSI_ERR_ALISHA_GET_KEY_ALREADY_PENDING";
        break;
      case 73:
        v2 = "HSI_ERR_STS_INDEX_EXHAUSTED";
        break;
      case 74:
        v2 = "HSI_ERR_BLOCK_IDX_EXHAUSTED";
        break;
      case 75:
        v2 = "HSI_ERR_ALISHA_URSK_TTL_EXPIRED";
        break;
      case 76:
        v2 = "HSI_ERR_INVALID_ALISHA_STS_INDEX_0";
        break;
      case 77:
        v2 = "HSI_ERR_ALISHA_RESPONSE_TIMEOUT";
        break;
      case 78:
        v2 = "HSI_ERR_ALISHA_TOTAL_TIMEOUT";
        break;
      case 79:
        v2 = "HSI_ERR_UNAUTHENTICATED_CAL_BLOB";
        break;
      case 98:
        v2 = "HSI_ERR_ALISHA_TIMER_CREATION_FAILED";
        break;
      case 99:
        v2 = "HSI_ERR_ALISHA_TIMER_QUERY_FAILED";
        break;
      case 100:
        v2 = "HSI_ERR_ALISHA_TIMER_RESP_INVALID";
        break;
      case 101:
        v2 = "HSI_ERR_ALISHA_TIMER_DELETION_FAILED";
        break;
      case 112:
        v2 = "HSI_ERR_INVALID_ACWG_ROUNDS_OFFSET";
        break;
      case 113:
        v2 = "HSI_ERR_INVALID_ACWG_CONFIG";
        break;
      default:
        switch(a1)
        {
          case -1033:
            v2 = "PREWARM_SECURE_ELEMENT_CHANNEL_UNEXPECTED_RSP";
            break;
          case -1032:
            v2 = "PREWARM_SECURE_ELEMENT_CHANNEL_EMPTY_RSP";
            break;
          case -1031:
            v2 = "PREWARM_SECURE_ELEMENT_CHANNEL_TIMED_OUT";
            break;
          case -1030:
            v2 = "PREWARM_SECURE_ELEMENT_CHANNEL_CMD_FAILED";
            break;
          case -1029:
            v2 = "GET_TEST_MODE_FAILED";
            break;
          case -1028:
            v2 = "SET_TEST_MODE_FAILED";
            break;
          case -1027:
            v2 = "CONFIG_MISSING_MANDATORY_ANTENNA_MASK_KEY";
            break;
          case -1026:
            v2 = "SUBSYSTEM_TIME_CONVERSION_FAILED";
            break;
          case -1025:
            v2 = "TIME_CONVERSION_NOT_READY";
            break;
          case -1024:
            v2 = "GET_SESSION_STATS_AOP_COMMAND_FAILED";
            break;
          case -1023:
            v2 = "RANGE_ENABLE_UNDEFINED_ERROR";
            break;
          case -1022:
            v2 = "RANGE_ENABLE_TIME_CONVERSION_FAILED";
            break;
          case -1021:
            v2 = "PASSTHROUGH_SESSION_NOT_SUPPORTED";
            break;
          case -1020:
            v2 = "SET_URSK_TTL_NOT_SUPPORTED";
            break;
          case -1019:
            v2 = "DELETE_KEYS_TIMED_OUT";
            break;
          case -1018:
            v2 = "DELETE_KEYS_ROSE_COMMAND_FAILED";
            break;
          case -1017:
            v2 = "SET_URSK_TTL_ROSE_COMMAND_FAILED";
            break;
          case -1016:
            v2 = "CONFIG_CONTAINS_INVALID_SYNC_CODE_INDEX";
            break;
          case -1015:
            v2 = "CONFIG_MISSING_MANDATORY_ANCHOR_KEY";
            break;
          case -1014:
            v2 = "CONFIG_MISSING_MANDATORY_PASSTHROUGH_KEY";
            break;
          case -1013:
            v2 = "BUILD_ALISHA_SESSION_FAILED";
            break;
          case -1012:
            v2 = "SET_DEBUG_KEY_NOT_SUPPORTED";
            break;
          case -1011:
            v2 = "ALISHA_KEY_ROSE_COMMAND_ALREADY_IN_FLIGHT";
            break;
          case -1010:
            v2 = "SET_DEBUG_KEY_TIMED_OUT";
            break;
          case -1009:
            v2 = "SET_DEBUG_KEY_ROSE_COMMAND_FAILED";
            break;
          case -1008:
            v2 = "GET_KEY_RETURNED_WRONG_UWB_SESSION_ID";
            break;
          case -1007:
            v2 = "GET_KEY_ROSE_COMMAND_FAILED";
            break;
          case -1006:
            v2 = "GET_CAPABILITIES_TIMED_OUT";
            break;
          case -1005:
            v2 = "GET_CAPABILITIES_ROSE_COMMAND_FAILED";
            break;
          case -1004:
            v2 = "INTERNAL_ERROR_NO_RESULT_PAYLOAD";
            break;
          case -1003:
            v2 = "UNKNOWN_HSI_STATUS_CODE";
            break;
          case -1002:
            v2 = "GET_KEY_TIMED_OUT";
            break;
          case -1001:
            v2 = "RANGE_ENABLE_TIMED_OUT";
            break;
          case -1000:
            v2 = "FAILURE";
            break;
          default:
            goto LABEL_140;
        }
        break;
    }
  }
  return sub_10000BF04(a2, v2);
}

uint64_t sub_100302364(unsigned int a1)
{
  if (a1 > 0x71)
    return 4294966293;
  else
    return dword_100477CE0[(__int16)a1];
}

_QWORD *sub_100302388@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008152C8[a1]);
}

uint64_t sub_1003023A0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v26;
  int v27;

  v11 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v14;
  v15 = (_QWORD *)(a1 + 16);
  if (v14)
  {
    v16 = (unint64_t *)(v14 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = a4[1];
  *(_QWORD *)(a1 + 32) = *a4;
  *(_QWORD *)(a1 + 40) = v18;
  v19 = (_QWORD *)(a1 + 32);
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = a5[1];
  *(_QWORD *)(a1 + 48) = *a5;
  *(_QWORD *)(a1 + 56) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  sub_100027674(a1 + 64, a6);
  sub_100027674(a1 + 96, a7);
  sub_100027674(a1 + 128, a8);
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 172) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 3;
  if (!*(_QWORD *)a1)
  {
    v26 = "_parameterNegotiator";
    v27 = 56;
    goto LABEL_24;
  }
  if (!*v15)
  {
    v26 = "_rangingLimitManager";
    v27 = 57;
    goto LABEL_24;
  }
  if (!*v19)
  {
    v26 = "_uwbSystem";
    v27 = 58;
    goto LABEL_24;
  }
  if (!*(_QWORD *)(a1 + 88))
  {
    v26 = "_rangeEnableCallback";
    v27 = 59;
    goto LABEL_24;
  }
  if (!*(_QWORD *)(a1 + 120))
  {
    v26 = "_rangeDisableCallback";
    v27 = 60;
LABEL_24:
    __assert_rtn("StateMachine", "AlishaStateMachine.cpp", v27, v26);
  }
  return a1;
}

void sub_100302544(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v8 = *(_QWORD **)(v1 + 120);
  if (v8 == v6)
  {
    v9 = 4;
    v8 = v6;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = *(_QWORD **)(v1 + 88);
  if (v10 == v5)
  {
    v11 = 4;
    v10 = v5;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  sub_10001AE68(v4);
  sub_10001AE68(v3);
  sub_10001AE68(v2);
  sub_10001AE68(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100302614(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  sub_1003026F8((uint64_t)a1);
  sub_100180AF4(a1);
  sub_100180AF4(a1 + 2);
  sub_100180AF4(a1 + 4);
  sub_100180AF4(a1 + 6);
  v2 = (_QWORD *)a1[11];
  a1[11] = 0;
  if (v2 == a1 + 8)
  {
    v3 = 4;
    v2 = a1 + 8;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = (_QWORD *)a1[15];
  a1[15] = 0;
  if (v4 == a1 + 12)
  {
    v5 = 4;
    v4 = a1 + 12;
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  result = (_QWORD *)a1[19];
  a1[19] = 0;
  if (result == a1 + 16)
  {
    v7 = 4;
    result = a1 + 16;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

uint64_t sub_1003026F8(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  v2 = *(unsigned __int8 *)(a1 + 160);
  if ((v2 - 1) < 2)
    goto LABEL_4;
  if (!*(_BYTE *)(a1 + 160))
  {
    v3 = 0;
    goto LABEL_10;
  }
  if (v2 == 5)
LABEL_4:
    v3 = 0;
  else
    v3 = 1;
  if (*(_QWORD *)(a1 + 152))
    sub_100304714(a1 + 128, v2, 0);
  *(_BYTE *)(a1 + 160) = 0;
LABEL_10:
  sub_1002F9FDC(*(_QWORD *)a1);
  if (*(_BYTE *)(a1 + 168))
    *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a1 + 184))
    *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 3;
  if (!v3)
    return 0;
  v4 = sub_100303354(a1, 3);
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100301BCC(v4, __p);
    if (v9 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#alisha-sm,_resetToInitialState called while ranging. rangeDisable returns status code %s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  return v4;
}

uint64_t sub_100302864(uint64_t a1, unsigned __int16 **a2)
{
  NSObject *v4;
  __int128 *v5;
  unsigned int v6;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  __int16 v11;
  char *v12;
  _WORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  __int128 __p;
  char v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[2];
  _DWORD v33[4];
  __int128 buf;
  char *v35;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100302388(*(_BYTE *)(a1 + 160), &__p);
    v5 = v27 >= 0 ? &__p : (__int128 *)__p;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK cap RQ in state %s", (uint8_t *)&buf, 0xCu);
    if (v27 < 0)
      operator delete((void *)__p);
  }
  v6 = sub_1003026F8(a1);
  if (v6)
  {
    sub_1003026F8(a1);
    LODWORD(__p) = v6;
    *(_QWORD *)((char *)&__p + 4) = 0;
    return v6;
  }
  else
  {
    buf = 0uLL;
    v35 = 0;
    v8 = *a2;
    v9 = a2[1];
    if (*a2 != v9)
    {
      do
      {
        v10 = sub_1002FB3C8(*v8);
        v11 = v10;
        if ((v10 & 0xFF0000) != 0)
        {
          v12 = (char *)*((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1) >= (unint64_t)v35)
          {
            v14 = (char *)buf;
            v15 = *((_QWORD *)&buf + 1) - buf;
            if ((uint64_t)(*((_QWORD *)&buf + 1) - buf) <= -3)
              sub_100026E7C();
            v16 = v15 >> 1;
            if ((unint64_t)&v35[-buf] <= (v15 >> 1) + 1)
              v17 = v16 + 1;
            else
              v17 = (uint64_t)&v35[-buf];
            if ((unint64_t)&v35[-buf] >= 0x7FFFFFFFFFFFFFFELL)
              v18 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
            {
              v19 = (char *)sub_100131980((uint64_t)&v35, v18);
              v12 = (char *)*((_QWORD *)&buf + 1);
              v14 = (char *)buf;
            }
            else
            {
              v19 = 0;
            }
            v20 = &v19[2 * v16];
            *(_WORD *)v20 = v11;
            v13 = v20 + 2;
            while (v12 != v14)
            {
              v21 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *((_WORD *)v20 - 1) = v21;
              v20 -= 2;
            }
            *(_QWORD *)&buf = v20;
            *((_QWORD *)&buf + 1) = v13;
            v35 = &v19[2 * v18];
            if (v14)
              operator delete(v14);
          }
          else
          {
            **((_WORD **)&buf + 1) = v10;
            v13 = v12 + 2;
          }
          *((_QWORD *)&buf + 1) = v13;
        }
        ++v8;
      }
      while (v8 != v9);
    }
    sub_100304770(&__p, (uint64_t)&buf, (uint64_t)(a2 + 3), (uint64_t)(a2 + 6));
    v22 = sub_1002FA5C4(*(_QWORD *)a1, (unsigned __int16 **)&__p);
    if ((*(_QWORD *)&v23 & 0xFF0000) != 0)
      v24 = 0;
    else
      v24 = -1004;
    if ((_DWORD)v22)
      v25 = v22;
    else
      v25 = v24;
    if (v25)
    {
      sub_1003026F8(a1);
      v33[0] = v25;
      *(_QWORD *)&v33[1] = 0;
      v32[0] = v25;
    }
    else
    {
      if ((*(_QWORD *)&v23 & 0xFF0000) == 0)
        sub_10000BA44();
      LODWORD(v32[0]) = 0;
      *(_QWORD *)((char *)v32 + 4) = HIDWORD(v22) & 0xFFFF0000 | WORD2(v22) | ((unint64_t)v23 << 32) | 0x1000000000000;
    }
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if ((_QWORD)buf)
    {
      *((_QWORD *)&buf + 1) = buf;
      operator delete((void *)buf);
    }
    return v32[0];
  }
}

void sub_100302B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  sub_1002FD658((uint64_t)&a10);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100302B7C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  char v28;
  unsigned __int16 v29[3];
  _BYTE __p[12];
  int v31;
  char v32;
  char v33;
  uint8_t buf[4];
  _BYTE *v35;
  char v36;
  char v37;
  unsigned __int8 v38;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100302388(*(_BYTE *)(a1 + 160), __p);
    v7 = v33 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    v35 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK session RQ in state %s", buf, 0xCu);
    if (v33 < 0)
      operator delete(*(void **)__p);
  }
  if (*(_BYTE *)(a1 + 160))
    sub_1003026F8(a1);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
  v9 = sub_1002FB3C8(*a2);
  v10 = v9;
  if ((v9 & 0xFF0000) == 0)
  {
    sub_1003026F8(a1);
    v16 = -2002;
LABEL_27:
    *(_DWORD *)a3 = v16;
    *(_BYTE *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 24))(__p, *(_QWORD *)(a1 + 32), *((unsigned int *)a2 + 1));
  if (v32)
    v12 = 0;
  else
    v12 = -1004;
  if (*(_DWORD *)__p)
    v13 = *(_DWORD *)__p;
  else
    v13 = v12;
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 112))(v14);
  if (v13)
  {
    v15 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003EA198(v13, v15);
    sub_1003026F8(a1);
    v16 = -3012;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 164) = *((_DWORD *)a2 + 1);
  *(_BYTE *)(a1 + 168) = 1;
  if (!v32)
    sub_10000BA44();
  v17 = *(unsigned __int8 *)(a1 + 184);
  *(_QWORD *)(a1 + 172) = *(_QWORD *)&__p[4];
  *(_DWORD *)(a1 + 180) = v31;
  if (!v17)
    *(_BYTE *)(a1 + 184) = 1;
  v18 = a2[1];
  v19 = a2[4];
  v29[0] = v10;
  v29[1] = v18;
  v29[2] = v19;
  sub_1002FA78C(*(_QWORD **)a1, v29, (uint64_t)buf);
  v20 = v38;
  if (v38)
    v21 = 0;
  else
    v21 = -1004;
  if (*(_DWORD *)buf)
    v22 = *(_DWORD *)buf;
  else
    v22 = v21;
  if (v22)
  {
    sub_1003026F8(a1);
    v23 = 0;
    *(_DWORD *)a3 = v22;
    *(_BYTE *)(a3 + 4) = 0;
  }
  else
  {
    v24 = *(unsigned __int8 *)(a1 + 160);
    if (v24 != 1)
    {
      if (*(_QWORD *)(a1 + 152))
      {
        sub_100304714(a1 + 128, v24, 1);
        v20 = v38;
      }
      *(_BYTE *)(a1 + 160) = 1;
    }
    if (!v20)
      sub_10000BA44();
    v23 = 1;
    v25 = 1 << v36;
    v26 = (__int16)v35;
    v27 = HIDWORD(v35);
    v28 = v37;
    *(_DWORD *)a3 = 0;
    *(_WORD *)(a3 + 4) = v26;
    *(_DWORD *)(a3 + 8) = v27;
    *(_BYTE *)(a3 + 12) = v25;
    *(_BYTE *)(a3 + 13) = v28;
  }
  *(_BYTE *)(a3 + 16) = v23;
}

uint64_t sub_100302E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  void **v9;
  char v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  int v15;
  int v16;
  const char *v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  __int128 v26;
  void *__p;
  char v28;
  __int128 v29;
  const char *v30;
  char v31;
  _DWORD v32[2];
  char v33;
  __int16 v34;
  const char *v35;
  uint8_t buf[4];
  _BYTE v37[12];
  char v38;

  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100302388(*(_BYTE *)(a1 + 160), &__p);
    v9 = (SBYTE7(v29) & 0x80u) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v37 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK session setup RQ in state %s", buf, 0xCu);
    if (SBYTE7(v29) < 0)
      operator delete(__p);
  }
  if (*(_BYTE *)(a1 + 160) != 1)
  {
    result = sub_1003026F8(a1);
    v15 = -3008;
LABEL_22:
    *(_DWORD *)a4 = v15;
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a1 + 168))
  {
    result = sub_1003026F8(a1);
    v15 = -3002;
    goto LABEL_22;
  }
  if (!*(_BYTE *)(a1 + 184))
  {
    result = sub_1003026F8(a1);
    v15 = -3003;
    goto LABEL_22;
  }
  v10 = *(_BYTE *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 4);
  v32[0] = *(_DWORD *)a2;
  v32[1] = v11;
  v33 = v10;
  v34 = a3;
  sub_1002FAA7C(*(_QWORD *)a1, (unsigned __int8 *)v32, (uint64_t)&__p);
  if (v31)
    v12 = 0;
  else
    v12 = -1004;
  if ((_DWORD)__p)
    v13 = (int)__p;
  else
    v13 = v12;
  if (v13)
  {
    result = sub_1003026F8(a1);
LABEL_18:
    *(_DWORD *)a4 = v13;
LABEL_23:
    *(_BYTE *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 32) = 0;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
  {
    v16 = *(unsigned __int8 *)(a1 + 160);
    if (v16 != 2)
    {
      if (*(_QWORD *)(a1 + 152))
        sub_100304714(a1 + 128, v16, 2);
      *(_BYTE *)(a1 + 160) = 2;
    }
    result = *(_QWORD *)(a1 + 48);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    v17 = 0;
  }
  else
  {
    if (!v31)
      sub_10000BA44();
    if (!*(_BYTE *)(a1 + 168))
      sub_10000BA44();
    v25 = *(_DWORD *)(a1 + 164);
    v26 = v29;
    v35 = v30;
    v21 = *(_QWORD *)(a1 + 88);
    if (!v21)
      sub_100027BC4();
    (*(void (**)(uint8_t *__return_ptr, uint64_t, int *, const char **))(*(_QWORD *)v21 + 48))(buf, v21, &v25, &v35);
    if (v38)
      v22 = 0;
    else
      v22 = -1004;
    if (*(_DWORD *)buf)
      v13 = *(_DWORD *)buf;
    else
      v13 = v22;
    if (v13)
    {
      result = sub_1003026F8(a1);
      goto LABEL_18;
    }
    if (!v38)
      sub_10000BA44();
    v23 = *(_QWORD *)a1;
    v35 = *(const char **)&v37[4];
    v17 = sub_1002FA400(v23, &v35);
    v24 = *(unsigned __int8 *)(a1 + 160);
    if (v24 != 3)
    {
      if (*(_QWORD *)(a1 + 152))
        sub_100304714(a1 + 128, v24, 3);
      *(_BYTE *)(a1 + 160) = 3;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
    result = *(_QWORD *)(a1 + 48);
    if (result)
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 24))(result, BYTE9(v26), v26, BYTE6(v26));
  }
  if (!v31)
    sub_10000BA44();
  if (!*(_BYTE *)(a1 + 184))
    sub_10000BA44();
  v18 = v28;
  v19 = *(_DWORD *)(a1 + 176);
  v20 = *(_DWORD *)(a1 + 180);
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)a4 = 0;
  *(_DWORD *)(a4 + 8) = v19;
  *(_QWORD *)(a4 + 16) = v17;
  *(_DWORD *)(a4 + 24) = v20;
  *(_BYTE *)(a4 + 28) = v18;
  *(_BYTE *)(a4 + 32) = 1;
  return result;
}

uint64_t sub_100303198(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  void **v5;
  int v6;
  unsigned int v8;
  int v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100302388(*(_BYTE *)(a1 + 160), __p);
    v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK suspend RQ in state %s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  v6 = *(unsigned __int8 *)(a1 + 160);
  if ((v6 - 3) < 2)
  {
    if (*(_BYTE *)(a1 + 168))
    {
      if (*(_DWORD *)(a1 + 164) == *a2)
      {
        v8 = sub_100303354(a1, 2);
        if (!v8)
        {
          v9 = *(unsigned __int8 *)(a1 + 160);
          if (v9 == 5)
            return 0x10000000000;
          if (*(_QWORD *)(a1 + 152))
            sub_100304714(a1 + 128, v9, 5);
          goto LABEL_12;
        }
        sub_1003026F8(a1);
        return v8;
      }
      else
      {
        sub_1003026F8(a1);
        return 4294964295;
      }
    }
    else
    {
      sub_1003026F8(a1);
      return 4294964294;
    }
  }
  else
  {
    if (v6 != 1)
    {
      if (v6 != 2)
        return 0x10000000000;
      if (*(_QWORD *)(a1 + 152))
        sub_100304714(a1 + 128, 2, 5);
LABEL_12:
      *(_BYTE *)(a1 + 160) = 5;
      return 0x10000000000;
    }
    sub_1003026F8(a1);
    return 4294964296;
  }
}

uint64_t sub_100303354(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  void *v11;
  char v12;

  v3 = *(_QWORD *)(a1 + 120);
  if (!v3)
    sub_100027BC4();
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 48))(&v8);
  v5 = v8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    if (v12)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 120))(v6, &v9);
      v6 = *(_QWORD *)(a1 + 48);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2);
  }
  if (v12 && __p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_100303408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
    sub_1003EA218((uint64_t)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100303424@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  void **v7;
  uint64_t result;
  int v9;
  int v10;
  char v11;
  int v12;
  uint64_t v13;
  void *__p;
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  uint8_t buf[4];
  void **v20;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100302388(*(_BYTE *)(a1 + 160), &__p);
    v7 = v16 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK recovery RQ in state %s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p);
  }
  *(_WORD *)buf = 0;
  result = sub_10030358C(a1, 1, *a2, buf, (uint64_t)&__p);
  if (v18)
    v9 = 0;
  else
    v9 = -1004;
  if ((_DWORD)__p)
    v10 = (int)__p;
  else
    v10 = v9;
  if (v10)
  {
    result = sub_1003026F8(a1);
    v11 = 0;
    *(_DWORD *)a3 = v10;
    *(_BYTE *)(a3 + 8) = 0;
  }
  else
  {
    if (!v18)
      sub_10000BA44();
    v12 = v15;
    v13 = v17;
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v13;
    v11 = 1;
  }
  *(_BYTE *)(a3 + 24) = v11;
  return result;
}

uint64_t sub_10030358C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  int v22;
  int v23;
  int v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  _QWORD v34[2];
  char v35;
  int v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int v40;
  char v41;
  const char *v42;
  _BYTE buf[12];
  __int16 v44;
  _BYTE v45[18];
  const char *v46;
  char v47;

  if ((a2 - 3) <= 0xFDu)
  {
    v32 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    {
      sub_1003EA23C((uint64_t)v32, buf, v33);
      v32 = *(NSObject **)buf;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/AlishaSupport/AlishaStateMachine.cpp";
      v44 = 1024;
      *(_DWORD *)v45 = 609;
      *(_WORD *)&v45[4] = 2080;
      *(_QWORD *)&v45[6] = "_processRecoveryRequest";
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#alisha-sm,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  switch(*(_BYTE *)(a1 + 160))
  {
    case 0:
    case 1:
    case 4:
      result = sub_1003026F8(a1);
      v11 = -3005;
      goto LABEL_30;
    case 2:
      if (!*(_QWORD *)(a1 + 152))
        goto LABEL_9;
      LOBYTE(v14) = 2;
      goto LABEL_8;
    case 3:
      v12 = sub_100303354(a1, 3);
      if (v12)
      {
        v13 = v12;
        result = sub_1003026F8(a1);
        *(_DWORD *)a5 = v13;
LABEL_31:
        *(_BYTE *)(a5 + 8) = 0;
        *(_BYTE *)(a5 + 40) = 0;
        return result;
      }
      v14 = *(unsigned __int8 *)(a1 + 160);
      if (v14 != 5)
      {
        if (*(_QWORD *)(a1 + 152))
LABEL_8:
          sub_100304714(a1 + 128, v14, 5);
LABEL_9:
        *(_BYTE *)(a1 + 160) = 5;
      }
LABEL_10:
      v15 = *(_QWORD *)(a1 + 48);
      if (v15)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, a2);
      if (!*(_BYTE *)(a1 + 168))
      {
        result = sub_1003026F8(a1);
        v11 = -3002;
LABEL_30:
        *(_DWORD *)a5 = v11;
        goto LABEL_31;
      }
      if (*(_DWORD *)(a1 + 164) != (_DWORD)a3)
      {
        result = sub_1003026F8(a1);
        v11 = -3006;
        goto LABEL_30;
      }
      v16 = *(_QWORD *)(a1 + 48);
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 104))(v16);
      (*(void (**)(int *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(&v38, *(_QWORD *)(a1 + 32), a3);
      if (v41)
        v17 = 0;
      else
        v17 = -1004;
      if (v38)
        v18 = v38;
      else
        v18 = v17;
      v19 = *(_QWORD *)(a1 + 48);
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 112))(v19);
      if (v18)
      {
        v20 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003EA2DC(v18, v20);
        result = sub_1003026F8(a1);
        v11 = -3013;
        goto LABEL_30;
      }
      v21.n128_f64[0] = sub_1002FAEB4(*(_QWORD **)a1, a4, (uint64_t)buf);
      if (v47)
        v22 = 0;
      else
        v22 = -1004;
      if (*(_DWORD *)buf)
        v23 = *(_DWORD *)buf;
      else
        v23 = v22;
      if (v23)
      {
        result = sub_1003026F8(a1);
        *(_DWORD *)a5 = v23;
        goto LABEL_31;
      }
      if (!v47)
        sub_10000BA44();
      if (a4[1] && !buf[9])
      {
        result = sub_1003026F8(a1);
        v11 = -3004;
        goto LABEL_30;
      }
      if ((*(unsigned int (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v21))
      {
        v24 = *(unsigned __int8 *)(a1 + 160);
        if (v24 != 2)
        {
          if (*(_QWORD *)(a1 + 152))
            sub_100304714(a1 + 128, v24, 2);
          *(_BYTE *)(a1 + 160) = 2;
        }
        result = *(_QWORD *)(a1 + 48);
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
        v25 = 0;
      }
      else
      {
        if (!v47)
          sub_10000BA44();
        if (!*(_BYTE *)(a1 + 168))
          sub_10000BA44();
        v36 = *(_DWORD *)(a1 + 164);
        v37 = *(_OWORD *)&v45[2];
        v42 = v46;
        v27 = *(_QWORD *)(a1 + 88);
        if (!v27)
          sub_100027BC4();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, int *, const char **))(*(_QWORD *)v27 + 48))(v34, v27, &v36, &v42);
        if (v35)
          v28 = 0;
        else
          v28 = -1004;
        if (LODWORD(v34[0]))
          v29 = v34[0];
        else
          v29 = v28;
        if (v29)
        {
          result = sub_1003026F8(a1);
          *(_DWORD *)a5 = v29;
          goto LABEL_31;
        }
        if (!v35)
          sub_10000BA44();
        v30 = *(_QWORD *)a1;
        v42 = (const char *)v34[1];
        v25 = sub_1002FA400(v30, &v42);
        v31 = *(unsigned __int8 *)(a1 + 160);
        if (v31 != 3)
        {
          if (*(_QWORD *)(a1 + 152))
            sub_100304714(a1 + 128, v31, 3);
          *(_BYTE *)(a1 + 160) = 3;
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
        result = *(_QWORD *)(a1 + 48);
        if (result)
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 24))(result, BYTE9(v37), v37, BYTE6(v37));
      }
      if (!v47)
        sub_10000BA44();
      if (!v41)
        sub_10000BA44();
      v26 = *(_WORD *)&buf[8];
      *(_QWORD *)(a5 + 8) = v39;
      *(_DWORD *)(a5 + 16) = v40;
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 24) = v25;
      *(_WORD *)(a5 + 32) = v26;
      *(_BYTE *)(a5 + 40) = 1;
      return result;
    default:
      goto LABEL_10;
  }
}

uint64_t sub_100303A4C@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  void **v7;
  uint64_t result;
  int v9;
  int v10;
  char v11;
  char v12;
  int v13;
  uint64_t v14;
  void *__p;
  int v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint8_t buf[4];
  void **v23;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100302388(*(_BYTE *)(a1 + 160), &__p);
    v7 = v17 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK configurable recovery RQ in state %s", buf, 0xCu);
    if (v17 < 0)
      operator delete(__p);
  }
  *(_WORD *)buf = *((unsigned __int8 *)a2 + 4) | 0x100;
  result = sub_10030358C(a1, 2, *a2, buf, (uint64_t)&__p);
  if (v21)
    v9 = 0;
  else
    v9 = -1004;
  if ((_DWORD)__p)
    v10 = (int)__p;
  else
    v10 = v9;
  if (v10)
  {
    result = sub_1003026F8(a1);
    v11 = 0;
    *(_DWORD *)a3 = v10;
    *(_BYTE *)(a3 + 8) = 0;
  }
  else
  {
    if (!v21)
      sub_10000BA44();
    if (!v20)
      sub_1003EA35C();
    v12 = v19;
    v13 = v16;
    v14 = v18;
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 12) = v13;
    *(_QWORD *)(a3 + 16) = v14;
    v11 = 1;
  }
  *(_BYTE *)(a3 + 24) = v11;
  return result;
}

uint64_t sub_100303BD4(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  void **v5;
  char v6;
  NSObject *v7;
  NSObject *v8;
  void **v9;
  char v10;
  uint64_t v12;
  int v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100302388(*(_BYTE *)(a1 + 160), __p);
    v5 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK suspend RS in state %s", buf, 0xCu);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  v6 = *(_BYTE *)(a1 + 160);
  switch(v6)
  {
    case 0:
    case 5:
      v8 = qword_10085F520;
      a2 = 0;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        sub_100302388(v6, __p);
        if (v15 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-sm,processDCKSuspendRS: ignoring suspend response in state %s", buf, 0xCu);
        if (v15 < 0)
          operator delete(__p[0]);
        return 0;
      }
      return (uint64_t)a2;
    case 1:
    case 2:
    case 3:
      v7 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003EA404(v6, v7);
      return 4294964287;
    case 4:
      if (*a2)
      {
        if (*(_QWORD *)(a1 + 152))
          sub_100304714(a1 + 128, 4, 3);
        a2 = 0;
        v10 = 3;
LABEL_22:
        *(_BYTE *)(a1 + 160) = v10;
        return (uint64_t)a2;
      }
      a2 = (_BYTE *)sub_100303354(a1, *(unsigned int *)(a1 + 188));
      if (!(_DWORD)a2)
      {
        v13 = *(unsigned __int8 *)(a1 + 160);
        if (v13 == 5)
          return 0;
        if (*(_QWORD *)(a1 + 152))
          sub_100304714(a1 + 128, v13, 5);
        a2 = 0;
        v10 = 5;
        goto LABEL_22;
      }
      v12 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003EA384((int)a2, v12);
      return (uint64_t)a2;
    default:
      return (uint64_t)a2;
  }
}

void sub_100303E24(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned int v11;
  int v12;
  NSObject *v13;
  int v14;
  char v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  NSObject *v31;
  _BYTE *v32;
  NSObject *v33;
  uint64_t v34;
  _BYTE v35[12];
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  _BYTE __p[12];
  char v41;
  uint8_t buf[4];
  _BYTE *v43;
  __int16 v44;
  _BYTE *v45;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000BF04(v35, off_1008152F8[a2]);
    v7 = SBYTE3(v39);
    v8 = *(_BYTE **)v35;
    sub_100302388(*(_BYTE *)(a1 + 160), __p);
    v9 = v35;
    if (v7 < 0)
      v9 = v8;
    if (v41 >= 0)
      v10 = __p;
    else
      v10 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    v43 = v9;
    v44 = 2080;
    v45 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Suspend on timeout event %s in state %s", buf, 0x16u);
    if (v41 < 0)
      operator delete(*(void **)__p);
    if (SBYTE3(v39) < 0)
      operator delete(*(void **)v35);
  }
  switch(a2)
  {
    case 0:
      v33 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      {
        sub_1003EA4A0((uint64_t)v33, v35, v34);
        v33 = *(NSObject **)v35;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v35 = 136315650;
        *(_QWORD *)&v35[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/AlishaSupport/AlishaStateMachine.cpp";
        v36 = 1024;
        v37 = 541;
        v38 = 2080;
        v39 = "suspendOnTimeout";
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#alisha-sm,%s:%d: assertion failure in %s", v35, 0x1Cu);
      }
      abort();
    case 1:
      if (*(_BYTE *)(a1 + 160) != 2)
        goto LABEL_50;
      if (*(_QWORD *)(a1 + 152))
        sub_100304714(a1 + 128, 2, 5);
LABEL_23:
      *(_BYTE *)(a1 + 160) = 5;
LABEL_24:
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 4) = 117440514;
      v15 = 1;
      *(_WORD *)(a3 + 8) = 1;
      *(_BYTE *)(a3 + 10) = 0;
      *(_DWORD *)(a3 + 12) = 1;
      goto LABEL_52;
    case 2:
    case 3:
      v11 = *(unsigned __int8 *)(a1 + 160);
      if (v11 > 5)
        goto LABEL_26;
      v12 = 1 << v11;
      if ((v12 & 0x31) != 0)
        goto LABEL_50;
      if ((v12 & 6) != 0)
      {
        v13 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          sub_1003044E8(a2, v35);
          v23 = SBYTE3(v39);
          v24 = *(_BYTE **)v35;
          sub_100302388(*(_BYTE *)(a1 + 160), __p);
          v25 = v35;
          if (v23 < 0)
            v25 = v24;
          if (v41 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315394;
          v43 = v25;
          v44 = 2080;
          v45 = v26;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#alisha-sm,suspendOnTimeout error: %s event is received but state is %s", buf, 0x16u);
          if (v41 < 0)
            operator delete(*(void **)__p);
          if (SBYTE3(v39) < 0)
LABEL_75:
            operator delete(*(void **)v35);
        }
LABEL_28:
        sub_1003026F8(a1);
        v15 = 0;
        v17 = -3010;
      }
      else
      {
        if (*(_BYTE *)(a1 + 168))
        {
          if (a2 == 2)
          {
            v18 = 0;
          }
          else
          {
            if (a2 != 3)
            {
              v31 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
              {
                sub_1003044E8(a2, v35);
                if (SBYTE3(v39) >= 0)
                  v32 = v35;
                else
                  v32 = *(_BYTE **)v35;
                *(_DWORD *)__p = 136315138;
                *(_QWORD *)&__p[4] = v32;
                _os_log_fault_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "#alisha-sm,Cannot translate ranging timeout %s to a reason for session end", __p, 0xCu);
                if (SBYTE3(v39) < 0)
                  operator delete(*(void **)v35);
                v31 = qword_10085F520;
              }
              if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)v35 = 136315650;
                *(_QWORD *)&v35[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/AlishaSupport/AlishaStateMachine.cpp";
                v36 = 1024;
                v37 = 448;
                v38 = 2080;
                v39 = "suspendOnTimeout";
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#alisha-sm,%s:%d: assertion failure in %s", v35, 0x1Cu);
              }
              abort();
            }
            v18 = 1;
          }
          *(_DWORD *)(a1 + 188) = v18;
          if (*(_QWORD *)(a1 + 152))
          {
            sub_100304714(a1 + 128, 3, 4);
            v20 = *(unsigned __int8 *)(a1 + 168);
            *(_BYTE *)(a1 + 160) = 4;
            if (!v20)
              sub_10000BA44();
          }
          else
          {
            *(_BYTE *)(a1 + 160) = 4;
          }
          v22 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)a3 = 0;
          *(_DWORD *)(a3 + 4) = v22;
          *(_DWORD *)(a3 + 12) = 0;
          v15 = 1;
          goto LABEL_52;
        }
        sub_1003026F8(a1);
        v15 = 0;
        v17 = -3002;
      }
      *(_DWORD *)a3 = v17;
LABEL_51:
      *(_BYTE *)(a3 + 4) = 0;
LABEL_52:
      *(_BYTE *)(a3 + 16) = v15;
      return;
    case 4:
      v11 = *(unsigned __int8 *)(a1 + 160);
LABEL_26:
      switch(v11)
      {
        case 1u:
        case 2u:
          v16 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          {
            sub_1003044E8(a2, v35);
            v27 = SBYTE3(v39);
            v28 = *(_BYTE **)v35;
            sub_100302388(*(_BYTE *)(a1 + 160), __p);
            v29 = v35;
            if (v27 < 0)
              v29 = v28;
            if (v41 >= 0)
              v30 = __p;
            else
              v30 = *(_BYTE **)__p;
            *(_DWORD *)buf = 136315394;
            v43 = v29;
            v44 = 2080;
            v45 = v30;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#alisha-sm,suspendOnTimeout error: %s event is received but state is %s", buf, 0x16u);
            if (v41 < 0)
              operator delete(*(void **)__p);
            if (SBYTE3(v39) < 0)
              goto LABEL_75;
          }
          goto LABEL_28;
        case 3u:
          v14 = sub_100303354(a1, *(unsigned int *)(a1 + 188));
          if (v14)
            goto LABEL_40;
          v21 = *(unsigned __int8 *)(a1 + 160);
          if (v21 == 5)
            goto LABEL_24;
          if (*(_QWORD *)(a1 + 152))
            sub_100304714(a1 + 128, v21, 5);
          goto LABEL_23;
        case 4u:
          v14 = sub_100303354(a1, *(unsigned int *)(a1 + 188));
          if (v14)
            goto LABEL_40;
          v19 = *(unsigned __int8 *)(a1 + 160);
          if (v19 == 5)
            goto LABEL_50;
          if (*(_QWORD *)(a1 + 152))
            goto LABEL_48;
          goto LABEL_49;
        default:
          goto LABEL_50;
      }
    case 5:
      if (*(_BYTE *)(a1 + 160) != 4)
        goto LABEL_50;
      v14 = sub_100303354(a1, *(unsigned int *)(a1 + 188));
      if (v14)
      {
LABEL_40:
        sub_1003026F8(a1);
        v15 = 0;
        *(_DWORD *)a3 = v14;
      }
      else
      {
        v19 = *(unsigned __int8 *)(a1 + 160);
        if (v19 != 5)
        {
          if (*(_QWORD *)(a1 + 152))
LABEL_48:
            sub_100304714(a1 + 128, v19, 5);
LABEL_49:
          *(_BYTE *)(a1 + 160) = 5;
        }
LABEL_50:
        v15 = 0;
        *(_DWORD *)a3 = 0;
      }
      goto LABEL_51;
    default:
      return;
  }
}

void sub_1003044BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003044E8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_10000BF04(a2, off_1008152F8[a1]);
}

uint64_t sub_1003044FC(uint64_t a1)
{
  NSObject *v2;
  _BYTE *v3;
  unsigned int v4;
  int v5;
  int v7;
  _BYTE __p[12];
  char v9;
  _QWORD v10[2];
  uint8_t buf[4];
  _BYTE *v12;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100302388(*(_BYTE *)(a1 + 160), __p);
    v3 = v9 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Stop ranging in state %s", buf, 0xCu);
    if (v9 < 0)
      operator delete(*(void **)__p);
  }
  switch(*(_BYTE *)(a1 + 160))
  {
    case 0:
    case 5:
      goto LABEL_9;
    case 1:
      sub_1003026F8(a1);
      goto LABEL_9;
    case 2:
      if (*(_QWORD *)(a1 + 152))
        sub_100304714(a1 + 128, 2, 5);
      *(_BYTE *)(a1 + 160) = 5;
      goto LABEL_21;
    case 3:
      v4 = sub_100303354(a1, 3);
      if (v4)
        goto LABEL_16;
      v5 = *(unsigned __int8 *)(a1 + 160);
      if (v5 != 5)
      {
        if (*(_QWORD *)(a1 + 152))
          sub_100304714(a1 + 128, v5, 5);
        *(_BYTE *)(a1 + 160) = 5;
      }
LABEL_21:
      LODWORD(v10[0]) = 0;
      *(_QWORD *)((char *)v10 + 4) = 0x100000107000002;
      break;
    case 4:
      v4 = sub_100303354(a1, *(unsigned int *)(a1 + 188));
      if (v4)
      {
LABEL_16:
        sub_1003026F8(a1);
        *(_DWORD *)__p = v4;
        *(_QWORD *)&__p[4] = 0;
        v10[0] = v4;
      }
      else
      {
        v7 = *(unsigned __int8 *)(a1 + 160);
        if (v7 != 5)
        {
          if (*(_QWORD *)(a1 + 152))
            sub_100304714(a1 + 128, v7, 5);
          *(_BYTE *)(a1 + 160) = 5;
        }
LABEL_9:
        LODWORD(v10[0]) = 0;
        *(_QWORD *)((char *)v10 + 4) = 0;
      }
      break;
    default:
      return v10[0];
  }
  return v10[0];
}

uint64_t sub_100304714(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  char v5;
  char v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, char *, char *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_100304754(unsigned int a1)
{
  return (a1 > 5) | (0x18u >> a1) & 1;
}

_QWORD *sub_100304770(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_100304828(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_1001B0668(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_1001530EC(a1 + 6, *(const void **)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  return a1;
}

void sub_1003047F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100304828(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1001A8D04(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100304884(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003048A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(__p);
}

void sub_1003048A8(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_fault_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0xCu);
}

_QWORD *sub_1003048C8(int a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return sub_100301BCC(a1, (uint64_t *)va);
}

_QWORD *sub_1003048F8(uint64_t a1, char *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return sub_10000BF04((uint64_t *)va, a2);
}

uint64_t sub_100304904(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_10030493C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v30;
  int v31;

  v11 = sub_100027674(a1, a2);
  sub_100027674(v11 + 32, a3);
  v12 = a4[1];
  *(_QWORD *)(a1 + 64) = *a4;
  *(_QWORD *)(a1 + 72) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v15 = a5[1];
  *(_QWORD *)(a1 + 96) = *a5;
  *(_QWORD *)(a1 + 104) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = a6[1];
  *(_QWORD *)(a1 + 112) = *a6;
  *(_QWORD *)(a1 + 120) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  v21 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA540(v21, v22, v23, v24, v25, v26, v27, v28);
  if (!*(_QWORD *)(a1 + 24))
  {
    v30 = "_constructSessionCallback";
    v31 = 33;
    goto LABEL_21;
  }
  if (!*(_QWORD *)(a1 + 64))
  {
    v30 = "_uwbSystem";
    v31 = 34;
    goto LABEL_21;
  }
  if (!*(_QWORD *)(a1 + 96))
  {
    v30 = "_paramNegotiator";
    v31 = 35;
    goto LABEL_21;
  }
  if (!*(_QWORD *)(a1 + 112))
  {
    v30 = "_rangingLimitManager";
    v31 = 36;
LABEL_21:
    __assert_rtn("AcwgManager", "AcwgManager.cpp", v31, v30);
  }
  return a1;
}

void sub_100304AD4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100304BA4(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA5B0(v2, v3, v4, v5, v6, v7, v8, v9);
  sub_100304CAC(a1);
  sub_10002AB34((uint64_t)(a1 + 18));
  v10 = a1[17];
  a1[17] = 0;
  if (v10)
    operator delete();
  v11 = (_QWORD *)a1[16];
  a1[16] = 0;
  if (v11)
    sub_100305CB4((uint64_t)(a1 + 16), v11);
  sub_10001AE68((uint64_t)(a1 + 14));
  sub_10001AE68((uint64_t)(a1 + 12));
  sub_10001AE68((uint64_t)(a1 + 10));
  sub_10001AE68((uint64_t)(a1 + 8));
  v12 = (_QWORD *)a1[7];
  if (v12 == a1 + 4)
  {
    v13 = 4;
    v12 = a1 + 4;
  }
  else
  {
    if (!v12)
      goto LABEL_12;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_12:
  v14 = (_QWORD *)a1[3];
  if (v14 == a1)
  {
    v15 = 4;
    v14 = a1;
    goto LABEL_16;
  }
  if (v14)
  {
    v15 = 5;
LABEL_16:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return a1;
}

_QWORD *sub_100304CAC(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _BYTE v18[16];
  void *__p;
  void *v20;
  char v21;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA620(v2, v3, v4, v5, v6, v7, v8, v9);
  v11 = (_QWORD **)(a1 + 16);
  v10 = (_QWORD *)a1[16];
  if (v10)
  {
    sub_100302614(v10);
    v12 = *v11;
    *v11 = 0;
    if (v12)
      sub_100305CB4((uint64_t)(a1 + 16), v12);
  }
  if (a1[10])
  {
    sub_100304DEC((uint64_t)a1, (uint64_t)v18);
    if (v21)
    {
      if (__p)
      {
        v20 = __p;
        operator delete(__p);
      }
    }
  }
  v13 = a1[17];
  a1[17] = 0;
  if (v13)
    operator delete();
  sub_100055054(a1 + 18);
  sub_100180AF4(a1 + 8);
  sub_100180AF4(a1 + 12);
  sub_100180AF4(a1 + 14);
  v14 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v14 == a1)
  {
    v15 = 4;
    v14 = a1;
  }
  else
  {
    if (!v14)
      goto LABEL_17;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_17:
  result = (_QWORD *)a1[7];
  a1[7] = 0;
  if (result == a1 + 4)
  {
    v17 = 4;
    result = a1 + 4;
  }
  else
  {
    if (!result)
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

void sub_100304DEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v15[8];
  void *__p;
  void *v17;
  char v18;

  v4 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA690(v4, v5, v6, v7, v8, v9, v10, v11);
  v14 = *(_QWORD *)(a1 + 80);
  v13 = (_QWORD *)(a1 + 80);
  v12 = v14;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    sub_100180AF4(v13);
  }
  else
  {
    v15[0] = 0;
    v18 = 0;
    *(_DWORD *)a2 = 0;
    sub_1002B4C20((__n128 *)(a2 + 8), (uint64_t)v15);
    if (v18)
    {
      if (__p)
      {
        v17 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_100304E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
    sub_1003E6FD0((uint64_t)&a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100304EB4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA700(v2, v3, v4, v5, v6, v7, v8, v9);
  if (!*(_QWORD *)(a1 + 128))
    operator new();
  if (!*(_QWORD *)(a1 + 136))
    operator new();
  return 0;
}

void sub_100305214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v27 = a21;
  if (a21 == v25)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  v29 = a25;
  if (a25 == &a22)
  {
    v30 = 4;
    v29 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v30 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v29 + 8 * v30))(v29);
LABEL_11:
  v31 = *(_QWORD **)(v26 - 48);
  if (v31 == (_QWORD *)(v26 - 72))
  {
    v32 = 4;
    v31 = (_QWORD *)(v26 - 72);
  }
  else
  {
    if (!v31)
      goto LABEL_16;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_16:
  sub_10001AE68((uint64_t)&a10);
  sub_10001AE68((uint64_t)&a12);
  sub_10001AE68((uint64_t)&a14);
  sub_10001AE68((uint64_t)&a16);
  operator delete();
}

uint64_t sub_100305308(uint64_t a1, char a2, char a3)
{
  NSObject *v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  void **v10;
  void *__p[2];
  char v13;
  _BYTE v14[12];
  char v15;
  uint8_t buf[4];
  _BYTE *v17;
  __int16 v18;
  void **v19;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v14 = 136315138;
    *(_QWORD *)&v14[4] = "_stateChangedHandler";
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#acwg-mgr,In method: '%s'", v14, 0xCu);
    v6 = qword_10085F520;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_100302388(a2, v14);
    v7 = v15;
    v8 = *(_BYTE **)v14;
    sub_100302388(a3, __p);
    v9 = v14;
    if (v7 < 0)
      v9 = v8;
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v17 = v9;
    v18 = 2080;
    v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#acwg-mgr,State machine state changed handler. Old state: %s. New state: %s", buf, 0x16u);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(*(void **)v14);
  }
  return sub_100304714(a1 + 32, a2, a3);
}

void sub_100305498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003054BC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA798(v2, v3, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 128);
  if (!v10)
    sub_1003EA770();
  v11 = sub_1003044FC(v10);
  return sub_10030551C(a1, v11);
}

uint64_t sub_10030551C(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;

  if (!a2)
    return 0;
  v2 = sub_10030842C(*(_QWORD *)(a1 + 136), a2);
  if ((v3 & 0xFF000000) == 0)
    goto LABEL_18;
  if (BYTE4(v2) == 3)
  {
    if ((*(_QWORD *)&v3 & 0xFF0000) != 0)
    {
      if (BYTE1(v3) < 3u)
        return 4294967196;
      goto LABEL_18;
    }
LABEL_33:
    sub_10000BA44();
  }
  if (BYTE4(v2) == 2)
  {
    if ((_BYTE)v3)
    {
      v5 = HIBYTE(v2) - 1;
      if ((HIBYTE(v2) - 1) < 7u && ((0x69u >> v5) & 1) != 0)
        return dword_1004783D8[v5];
      goto LABEL_18;
    }
    goto LABEL_33;
  }
  if (BYTE4(v2) != 1)
    goto LABEL_18;
  if ((v2 & 0xFF000000000000) == 0)
    goto LABEL_33;
  if (BYTE5(v2) == 2)
    return 4294967196;
  if (BYTE5(v2) == 255 || BYTE5(v2) == 133)
    return 4294967194;
LABEL_18:
  v4 = 0;
  if ((int)v2 <= -1034)
  {
    if ((v2 + 4026) >= 0x1B && (v2 + 2023) >= 0x18 && (v2 + 3013) >= 0xE)
      return v4;
    return 4294967196;
  }
  switch((int)v2)
  {
    case 6:
    case 8:
    case 12:
    case 13:
    case 14:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 28:
    case 29:
    case 31:
    case 32:
    case 39:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 62:
    case 63:
    case 64:
    case 65:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 98:
    case 99:
    case 100:
    case 101:
    case 112:
    case 113:
      return 4294967196;
    case 7:
    case 9:
    case 10:
    case 11:
    case 15:
    case 16:
    case 17:
    case 24:
    case 25:
    case 26:
    case 27:
    case 30:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 58:
    case 59:
    case 60:
    case 61:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
      return v4;
    default:
      if ((v2 + 1033) < 0x22)
        return 4294967196;
      break;
  }
  return v4;
}

void sub_100305650(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  char v22;
  int v23;
  char v24;
  __int16 v25;
  int v26;
  char v27;
  char v28;
  int v29;
  __int16 v30;
  int v31;
  char v32;
  char v33;
  char v34;
  unsigned __int16 v35[2];
  int v36;
  char v37;
  char v38;
  void *v39[3];
  void *v40;
  void *v41;
  void *__p;
  void *v43;
  void *v44;
  void *v45;
  _WORD *v46;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA808(v6, v7, v8, v9, v10, v11, v12, v13);
  v14 = operator new(2uLL);
  v44 = v14;
  *v14 = 256;
  v45 = v14 + 1;
  v46 = v14 + 1;
  sub_1002FE48C(v39, (uint64_t)&v44, a2, a2 + 24);
  v15 = sub_100302864(*(_QWORD *)(a1 + 128), (unsigned __int16 **)v39);
  v17 = v16;
  v18 = sub_10030551C(a1, v15);
  if (v18)
  {
    *(_DWORD *)a3 = v18;
    *(_BYTE *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  else
  {
    if ((*(_QWORD *)&v17 & 0xFF0000) == 0)
      sub_10000BA44();
    v19 = HIDWORD(v15);
    v20 = HIWORD(v15);
    v21 = *(_DWORD *)(a2 + 52);
    v22 = *(_BYTE *)(a2 + 48);
    v35[0] = v19;
    v35[1] = v20;
    v36 = v21;
    v37 = v17;
    v38 = v22;
    sub_100302B7C(*(_QWORD *)(a1 + 128), v35, (uint64_t)&v29);
    v23 = sub_10030551C(a1, v29);
    if (v23)
    {
      v24 = 0;
      *(_DWORD *)a3 = v23;
      *(_BYTE *)(a3 + 4) = 0;
    }
    else
    {
      if (!v34)
        sub_10000BA44();
      v25 = v30;
      v26 = v31;
      v27 = v32;
      v28 = v33;
      *(_DWORD *)a3 = 0;
      *(_WORD *)(a3 + 4) = v20;
      *(_BYTE *)(a3 + 6) = v17;
      *(_BYTE *)(a3 + 7) = v27;
      *(_DWORD *)(a3 + 8) = v26;
      *(_WORD *)(a3 + 12) = v25;
      v24 = 1;
      *(_BYTE *)(a3 + 14) = v28;
    }
    *(_BYTE *)(a3 + 16) = v24;
  }
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
}

void sub_1003057FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  sub_1002FD658((uint64_t)va);
  v7 = *(void **)(v5 - 72);
  if (v7)
  {
    *(_QWORD *)(v5 - 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100305834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t result;
  char v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22[4];
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  _DWORD v27[2];
  char v28;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA878(v6, v7, v8, v9, v10, v11, v12, v13);
  v14 = *(_BYTE *)(a2 + 8);
  v15 = *(_DWORD *)(a2 + 4);
  v27[0] = *(_DWORD *)a2;
  v27[1] = v15;
  v28 = v14;
  sub_100302E54(*(_QWORD *)(a1 + 128), (uint64_t)v27, *(unsigned __int8 *)(a2 + 9) | 0x100, (uint64_t)v22);
  result = sub_10030551C(a1, v22[0]);
  if ((_DWORD)result)
  {
    v17 = 0;
    *(_DWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = 0;
  }
  else
  {
    if (!v26)
      sub_10000BA44();
    v18 = v22[2];
    v19 = v23;
    v20 = v24;
    v21 = v25;
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = v18;
    *(_QWORD *)(a3 + 16) = v19;
    *(_DWORD *)(a3 + 24) = v20;
    *(_BYTE *)(a3 + 28) = v21;
    v17 = 1;
  }
  *(_BYTE *)(a3 + 32) = v17;
  return result;
}

uint64_t sub_100305910@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  int v16;
  uint64_t v17;
  int v18[4];
  uint64_t v19;
  char v20;
  unsigned int v21;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA8E8(v6, v7, v8, v9, v10, v11, v12, v13);
  v21 = a2;
  sub_100303424(*(_QWORD *)(a1 + 128), &v21, (uint64_t)v18);
  result = sub_10030551C(a1, v18[0]);
  if ((_DWORD)result)
  {
    v15 = 0;
    *(_DWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = 0;
  }
  else
  {
    if (!v20)
      sub_10000BA44();
    v16 = v18[2];
    v17 = v19;
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = v16;
    *(_QWORD *)(a3 + 16) = v17;
    v15 = 1;
  }
  *(_BYTE *)(a3 + 24) = v15;
  return result;
}

void sub_1003059C8(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA958(v6, v7, v8, v9, v10, v11, v12, v13);
  sub_1002FA014(*(_QWORD *)(a1 + 96), a2, a3);
}

uint64_t sub_100305A2C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 80);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_100305A44(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EA9F0(v2, v3, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (!v10)
    sub_1003EA9C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a1 + 144);
}

uint64_t sub_100305AA4(uint64_t a1, uint64_t a2, int *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  unsigned int v17;

  v17 = a2;
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EAA60(v6, v7, v8, v9, v10, v11, v12, v13);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 24))(&v16, *(_QWORD *)(a1 + 64), a2);
  v14 = v16;
  if (!(_DWORD)v16)
  {
    sub_10030642C(a1 + 144, &v17, &v17);
    v14 = v16;
  }
  *a3 = v14;
  return sub_10030551C(a1, v14);
}

uint64_t sub_100305B44(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  const char *v6;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v5 = 136315138;
    v6 = "handleUWBSystemError";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#acwg-mgr,In method: '%s'", (uint8_t *)&v5, 0xCu);
    v2 = qword_10085F520;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#acwg-mgr,handleUWBSystemError", (uint8_t *)&v5, 2u);
  }
  v3 = *(_QWORD *)(a1 + 96);
  if (v3)
    sub_1002F9FCC(v3);
  sub_100055054((_QWORD *)(a1 + 144));
  return 0;
}

_QWORD *sub_100305C4C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  switch(a1)
  {
    case -103:
      v2 = "URSK_UNAVAILABLE";
      break;
    case -102:
      v2 = "WRONG_PARAMETERS";
      break;
    case -101:
      v2 = "RESOURCE_UNAVAILABLE";
      break;
    case -100:
      v2 = "UNKNOWN_ERROR";
      break;
    default:
      v2 = "SUCCESS";
      break;
  }
  return sub_10000BF04(a2, v2);
}

void sub_100305CB4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (a2)
  {
    v3 = (_QWORD *)a2[19];
    if (v3 == a2 + 16)
    {
      v4 = 4;
      v3 = a2 + 16;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = (_QWORD *)a2[15];
    if (v5 == a2 + 12)
    {
      v6 = 4;
      v5 = a2 + 12;
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
    v7 = (_QWORD *)a2[11];
    if (v7 == a2 + 8)
    {
      v8 = 4;
      v7 = a2 + 8;
    }
    else
    {
      if (!v7)
        goto LABEL_18;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
    sub_10001AE68((uint64_t)(a2 + 6));
    sub_10001AE68((uint64_t)(a2 + 4));
    sub_10001AE68((uint64_t)(a2 + 2));
    sub_10001AE68((uint64_t)a2);
    operator delete();
  }
}

void sub_100305D9C()
{
  operator delete();
}

_QWORD *sub_100305DB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100815338;
  result[1] = v3;
  return result;
}

uint64_t sub_100305DE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100815338;
  a2[1] = v2;
  return result;
}

void sub_100305E00(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int v15[4];
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  char v22;
  _BYTE v23[16];
  void *__p;
  void *v25;
  char v26;

  v5 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v5 + 24))
    sub_1003EAAD0();
  v7 = *a3;
  v8 = (_QWORD *)(v5 + 80);
  if (*(_QWORD *)(v5 + 80))
  {
    sub_100304DEC(*(_QWORD *)(a1 + 8), (uint64_t)v23);
    if (v26)
    {
      if (__p)
      {
        v25 = __p;
        operator delete(__p);
      }
    }
  }
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    sub_100027BC4();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(&v19, v9, a2);
  v10 = v19;
  if (v22)
    v11 = 0;
  else
    v11 = -1004;
  if (!(_DWORD)v19)
    v10 = v11;
  if (v10)
  {
    *(_DWORD *)a4 = v10;
LABEL_14:
    *(_BYTE *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 0;
    goto LABEL_15;
  }
  if (!v22)
    sub_10000BA44();
  sub_100021C24((_QWORD *)(v5 + 80), &v20);
  if (!*v8)
  {
    *(_DWORD *)a4 = -1013;
    goto LABEL_14;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 24))(*v8, v7);
  if (*(_DWORD *)a4)
  {
    sub_100304DEC(v5, (uint64_t)v15);
    if (v18 && v16)
    {
      v17 = v16;
      operator delete(v16);
    }
  }
  else
  {
    v15[0] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
    sub_100306040(v5 + 144, v15, v15);
  }
LABEL_15:
  if (v22)
  {
    v12 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_100305FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21)
{
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a21 && a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100305FF8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100306034()
{
}

_QWORD *sub_100306040(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10002A900(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_100306248(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100306260()
{
  operator delete();
}

__n128 sub_100306274(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1008153C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1003062B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1008153C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003062DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_1003062F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100306334()
{
}

void sub_100306344()
{
  operator delete();
}

__n128 sub_100306358(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_100815488;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100306398(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100815488;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003063C0(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v5;

  v3 = a1[2];
  v4 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v5 + v4);
  return v4(v5, *a2, *a3);
}

uint64_t sub_1003063E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100306420()
{
}

_QWORD *sub_10030642C(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10002A900(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_100306634(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100306648()
{
  return __cxa_atexit((void (*)(void *))sub_100304904, &unk_10085DAB0, (void *)&_mh_execute_header);
}

uint64_t sub_100306664(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  const char *v36;
  int v37;

  v16 = sub_100027674(a1, a2);
  sub_100027674(v16 + 32, a3);
  v17 = a4[1];
  *(_QWORD *)(a1 + 64) = *a4;
  *(_QWORD *)(a1 + 72) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v20 = a5[1];
  *(_QWORD *)(a1 + 96) = *a5;
  *(_QWORD *)(a1 + 104) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = a6[1];
  *(_QWORD *)(a1 + 112) = *a6;
  *(_QWORD *)(a1 + 120) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = a7[1];
  *(_QWORD *)(a1 + 128) = *a7;
  *(_QWORD *)(a1 + 136) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = a8[1];
  *(_QWORD *)(a1 + 144) = *a8;
  *(_QWORD *)(a1 + 152) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  v32 = a9[1];
  *(_QWORD *)(a1 + 216) = *a9;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(_QWORD *)(a1 + 224) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    v36 = "_constructSessionCallback";
    v37 = 34;
    goto LABEL_30;
  }
  if (!*(_QWORD *)(a1 + 64))
  {
    v36 = "_system";
    v37 = 35;
    goto LABEL_30;
  }
  if (!*(_QWORD *)(a1 + 96))
  {
    v36 = "_dckCoder";
    v37 = 36;
    goto LABEL_30;
  }
  if (!*(_QWORD *)(a1 + 112))
  {
    v36 = "_paramNegotiator";
    v37 = 37;
    goto LABEL_30;
  }
  if (!*(_QWORD *)(a1 + 128))
  {
    v36 = "_rangingLimitManager";
    v37 = 38;
LABEL_30:
    __assert_rtn("AlishaManager", "AlishaManager.cpp", v37, v36);
  }
  return a1;
}

void sub_100306870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = (_QWORD *)v10[3];
  if (v12 == v10)
  {
    v13 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
    v10 = (_QWORD *)v10[3];
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v13))(v10);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030695C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9)
{
  return sub_100306664(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

_QWORD *sub_100306968(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  sub_100306A5C(a1);
  sub_10001AE68((uint64_t)(a1 + 27));
  sub_10002AB34((uint64_t)(a1 + 22));
  v2 = a1[21];
  a1[21] = 0;
  if (v2)
    operator delete();
  v3 = (_QWORD *)a1[20];
  a1[20] = 0;
  if (v3)
    sub_100305CB4((uint64_t)(a1 + 20), v3);
  sub_10001AE68((uint64_t)(a1 + 18));
  sub_10001AE68((uint64_t)(a1 + 16));
  sub_10001AE68((uint64_t)(a1 + 14));
  sub_10001AE68((uint64_t)(a1 + 12));
  sub_10001AE68((uint64_t)(a1 + 10));
  sub_10001AE68((uint64_t)(a1 + 8));
  v4 = (_QWORD *)a1[7];
  if (v4 == a1 + 4)
  {
    v5 = 4;
    v4 = a1 + 4;
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  v6 = (_QWORD *)a1[3];
  if (v6 == a1)
  {
    v7 = 4;
    v6 = a1;
    goto LABEL_14;
  }
  if (v6)
  {
    v7 = 5;
LABEL_14:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *sub_100306A5C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[16];
  void *__p;
  void *v12;
  char v13;

  v3 = a1 + 20;
  v2 = (_QWORD *)a1[20];
  if (v2)
  {
    sub_100302614(v2);
    v4 = (_QWORD *)*v3;
    *v3 = 0;
    if (v4)
      sub_100305CB4((uint64_t)v3, v4);
  }
  if (a1[10])
  {
    sub_100306B8C((uint64_t)a1, (uint64_t)v10);
    if (v13)
    {
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
    }
  }
  v5 = a1[21];
  a1[21] = 0;
  if (v5)
    operator delete();
  sub_100055054(a1 + 22);
  sub_100180AF4(a1 + 8);
  sub_100180AF4(a1 + 12);
  sub_100180AF4(a1 + 14);
  sub_100180AF4(a1 + 16);
  sub_100180AF4(a1 + 18);
  sub_100180AF4(a1 + 27);
  v6 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v6 == a1)
  {
    v7 = 4;
    v6 = a1;
  }
  else
  {
    if (!v6)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  result = (_QWORD *)a1[7];
  a1[7] = 0;
  if (result == a1 + 4)
  {
    v9 = 4;
    result = a1 + 4;
  }
  else
  {
    if (!result)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_100306B8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE v4[8];
  void *__p;
  void *v6;
  char v7;

  v3 = (_QWORD *)(a1 + 80);
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    sub_100180AF4(v3);
  }
  else
  {
    v4[0] = 0;
    v7 = 0;
    *(_DWORD *)a2 = 0;
    sub_1002B4C20((__n128 *)(a2 + 8), (uint64_t)v4);
    if (v7)
    {
      if (__p)
      {
        v6 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_100306C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
    sub_1003E6FD0((uint64_t)&a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100306C24(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 160))
    operator new();
  if (!*(_QWORD *)(a1 + 168))
    operator new();
  return 0;
}

void sub_100306F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;

  v27 = a21;
  if (a21 == v25)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  v29 = a25;
  if (a25 == &a22)
  {
    v30 = 4;
    v29 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v30 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v29 + 8 * v30))(v29);
LABEL_11:
  v31 = *(_QWORD **)(v26 - 48);
  if (v31 == (_QWORD *)(v26 - 72))
  {
    v32 = 4;
    v31 = (_QWORD *)(v26 - 72);
  }
  else
  {
    if (!v31)
    {
LABEL_16:
      if (a11)
      {
        p_shared_owners = (unint64_t *)&a11->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
          std::__shared_weak_count::__release_weak(a11);
        }
      }
      if (a13)
      {
        v35 = (unint64_t *)&a13->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
          std::__shared_weak_count::__release_weak(a13);
        }
      }
      if (a15)
      {
        v37 = (unint64_t *)&a15->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
          std::__shared_weak_count::__release_weak(a15);
        }
      }
      if (a17)
      {
        v39 = (unint64_t *)&a17->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
          std::__shared_weak_count::__release_weak(a17);
        }
      }
      operator delete();
    }
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
  goto LABEL_16;
}

uint64_t sub_100307128(uint64_t a1, char a2, char a3)
{
  NSObject *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  void **v19;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100302388(a2, v14);
    v7 = v15;
    v8 = (void **)v14[0];
    sub_100302388(a3, __p);
    v9 = v14;
    if (v7 < 0)
      v9 = v8;
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v17 = v9;
    v18 = 2080;
    v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-mgr,State machine state changed handler. Old state: %s. New state: %s", buf, 0x16u);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  return sub_100304714(a1 + 32, a2, a3);
}

void sub_100307264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100307288(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  BOOL v6;
  const char *v7;
  int v8;
  void *__p;
  void *v10;
  uint64_t v11;
  char v12;
  int v13;
  void *v14;
  _BYTE *v15;
  char v16;
  uint64_t v17;
  int v18;

  v2 = *(_QWORD *)(a1 + 160);
  if (!v2)
    sub_1003EAAF8();
  v4 = sub_1003044FC(v2);
  v17 = v4;
  v18 = v5;
  if ((_DWORD)v4)
    v6 = 1;
  else
    v6 = (v5 & 0xFF000000) == 0;
  if (v6)
  {
    *a2 = v4;
    sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&unk_10085DAD0);
    return;
  }
  sub_1002FDB78((char *)&v17 + 4, &v13);
  if (v13)
  {
    v7 = "dckEncodedResult.statusCode == StatusCode::SUCCESS";
    v8 = 143;
    goto LABEL_20;
  }
  if (!v16)
  {
    v7 = "dckEncodedResult.payload.has_value()";
    v8 = 144;
LABEL_20:
    __assert_rtn("stopRanging", "AlishaManager.cpp", v8, v7);
  }
  __p = 0;
  v10 = 0;
  v11 = 0;
  sub_1001530EC(&__p, v14, (uint64_t)v15, v15 - (_BYTE *)v14);
  v12 = 1;
  *a2 = 0;
  sub_1002FE6C0((uint64_t)(a2 + 2), (uint64_t)&__p);
  if (v12 && __p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }
  }
}

void sub_1003073B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a13 && __p)
    operator delete(__p);
  if (a18)
  {
    if (a15)
      operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003073F8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  void *v17;
  __n128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *__p;
  void *v28;
  char v29;
  char v30;
  unint64_t v31;
  __n128 v32;
  char v33;
  char v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  unsigned __int8 v38;

  v6 = a1[18];
  if (v6)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, a2);
  v7 = sub_1002FB318(a1[12], a2);
  if ((v7 & 0xFF000000000000) == 0)
  {
    v10 = a1[27];
    if (v10)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v10 + 56))(v10, v7);
    *(_DWORD *)a3 = v7;
    v11 = a3 + 8;
    goto LABEL_17;
  }
  if ((v7 & 0xFF00000000) != 0x200000000)
  {
    v12 = a1[27];
    if (v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 56))(v12, 4294963293);
    *(_DWORD *)a3 = -4003;
    v11 = a3 + 8;
LABEL_17:
    sub_1002FE6C0(v11, (uint64_t)&unk_10085DAD0);
    return;
  }
  v35 = -1000;
  sub_1002FE6C0((uint64_t)&v36, (uint64_t)&unk_10085DAD0);
  switch(BYTE5(v7))
  {
    case 1:
      sub_1002FD020(a2, (int *)&v31);
      v35 = v31;
      if (v34)
      {
        v23 = sub_100302864(a1[20], (unsigned __int16 **)&v32);
        LODWORD(v24) = v15;
        v35 = v23;
        if ((*(_QWORD *)&v15 & 0xFF0000) != 0)
        {
          sub_1002FB5A8((uint64_t)&v23 + 4, &v26);
          sub_1003079EC(&v35, (uint64_t)&v26);
          if (v30)
          {
            if (__p)
            {
              v28 = __p;
              operator delete(__p);
            }
          }
        }
      }
      sub_1002FE434((uint64_t)&v32);
      goto LABEL_47;
    case 2:
    case 4:
    case 6:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x13:
    case 0x14:
    case 0x15:
      v9 = a1[27];
      if (v9)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 56))(v9, 4294963292);
      *(_DWORD *)a3 = -4004;
      sub_1002FE6C0(a3 + 8, (uint64_t)&unk_10085DAD0);
      if (v38 && (_QWORD)v36)
      {
        *((_QWORD *)&v36 + 1) = v36;
        operator delete((void *)v36);
      }
      return;
    case 3:
      sub_1002FD6A8(a1[12], a2, v8, (uint64_t)&v26);
      v35 = v26;
      if (!(_BYTE)v28)
        goto LABEL_47;
      sub_100302B7C(a1[20], (unsigned __int16 *)&v26 + 2, (uint64_t)&v23);
      v35 = v23;
      if (!v25)
        goto LABEL_47;
      sub_1002FBB48((char *)&v23 + 4, &v31);
      goto LABEL_38;
    case 5:
      sub_1002FD7B0(a1[12], a2, v8, (uint64_t)&v23);
      v35 = v23;
      if (!v25)
        goto LABEL_47;
      sub_100302E54(a1[20], (uint64_t)&v23 + 4, 0, (uint64_t)&v31);
      v35 = v31;
      if (!v33)
        goto LABEL_47;
      sub_1002FBFF4((uint64_t)&v32, &v26);
      sub_1003079EC(&v35, (uint64_t)&v26);
      if (!v30)
        goto LABEL_47;
      v17 = __p;
      if (!__p)
        goto LABEL_47;
      v28 = __p;
      goto LABEL_41;
    case 7:
      v26 = sub_1002FD8BC(a1[12], a2, v8);
      LODWORD(__p) = v13;
      v35 = v26;
      if (!(_BYTE)v13)
        goto LABEL_47;
      v23 = sub_100303198(a1[20], (_DWORD *)&v26 + 1);
      v35 = v23;
      if ((v23 & 0xFF0000000000) == 0)
        goto LABEL_47;
      sub_1002FCA08((char *)&v23 + 4, &v31);
      goto LABEL_38;
    case 8:
      v31 = sub_1002FD970(a1[12], (unsigned __int8 **)a2, v8);
      v35 = v31;
      if ((v31 & 0xFF0000000000) != 0)
        v35 = sub_100303BD4(a1[20], (_BYTE *)&v31 + 4);
      goto LABEL_47;
    case 9:
      v23 = sub_1002FD9FC(a1[12], a2, v8);
      LODWORD(v24) = v16;
      v35 = v23;
      if (!(_BYTE)v16)
        goto LABEL_47;
      sub_100303424(a1[20], (unsigned int *)&v23 + 1, (uint64_t)&v26);
      v35 = v26;
      if (!v29)
        goto LABEL_47;
      sub_1002FCC4C((uint64_t)&__p, &v31);
      goto LABEL_38;
    case 0x12:
      v23 = sub_1002FDAB0(a1[12], a2, v8);
      v24 = v14;
      v35 = v23;
      if ((v14 & 0xFF00000000) == 0)
        goto LABEL_47;
      sub_100303A4C(a1[20], (unsigned int *)&v23 + 1, (uint64_t)&v26);
      v35 = v26;
      if (!v29)
        goto LABEL_47;
      sub_1002FCDBC((char *)&__p, &v31);
LABEL_38:
      sub_1003079EC(&v35, (uint64_t)&v31);
      if (v33)
      {
        v17 = (void *)v32.n128_u64[0];
        if (v32.n128_u64[0])
        {
          v32.n128_u64[1] = v32.n128_u64[0];
LABEL_41:
          operator delete(v17);
        }
      }
LABEL_47:
      if (v35)
      {
        v26 = sub_10030842C(a1[21], v35);
        LODWORD(__p) = v19;
        v35 = v26;
        if ((v19 & 0xFF000000) != 0)
        {
          sub_1002FDB78((char *)&v26 + 4, &v31);
          v35 = v31;
          v18 = sub_100307F14((uint64_t)&v36, &v32);
          if (v33)
          {
            if (v32.n128_u64[0])
            {
              v32.n128_u64[1] = v32.n128_u64[0];
              operator delete((void *)v32.n128_u64[0]);
            }
          }
        }
        v20 = a1[27];
        if (v20)
        {
          if (v35)
          {
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v20 + 56))(v20, v18);
          }
          else
          {
            if (!BYTE3(__p))
              __assert_rtn("processDCKMessage", "AlishaManager.cpp", 308, "evtGenResult.payload.has_value()");
            (*(void (**)(uint64_t, char *, __n128))(*(_QWORD *)v20 + 48))(v20, (char *)&v26 + 4, v18);
          }
        }
      }
      v21 = a1[18];
      v22 = v38;
      if (v21 && v38)
      {
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v21 + 24))(v21, &v36);
        v22 = v38;
      }
      *(_DWORD *)a3 = v35;
      *(_BYTE *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      if (v22)
      {
        *(_OWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v37;
        v37 = 0;
        v36 = 0uLL;
        *(_BYTE *)(a3 + 32) = 1;
      }
      break;
    default:
      goto LABEL_47;
  }
}

void sub_100307960(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 - 56))
  {
    v3 = *(void **)(v1 - 80);
    if (v3)
    {
      *(_QWORD *)(v1 - 72) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1003079EC(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  sub_100307F14((uint64_t)(a1 + 2), (__n128 *)(a2 + 8));
  return a1;
}

void sub_100307A1C(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  __n128 __p;
  char v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  v8 = *(_QWORD *)(a1 + 144);
  if (v8)
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v8 + 32))(v8, a2);
  sub_1002FA014(*(_QWORD *)(a1 + 112), a2, (uint64_t)&v13);
  *a4 = v13;
  sub_1002FE6C0((uint64_t)(a4 + 2), (uint64_t)&unk_10085DAD0);
  if (v16)
  {
    sub_1002FE02C((uint64_t)&v14, &v10);
    *a4 = v10;
    sub_100307F14((uint64_t)(a4 + 2), &__p);
    if (v12 && __p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v9 = *(unsigned __int8 *)(a3 + 24);
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    if (!v9)
      *(_BYTE *)(a3 + 24) = 1;
  }
}

void sub_100307B14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(_BYTE *)(v1 + 32))
  {
    v4 = *v2;
    if (*v2)
    {
      *(_QWORD *)(v1 + 16) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100307B38(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  uint8_t *v12;
  uint8_t *v13;
  void *v14;
  void *v15;
  int v16;
  char v17;
  uint8_t buf[8];
  __n128 __p;
  char v20;
  int v21;
  int v22;
  int v23;
  char v24;
  uint8_t v25[4];
  uint8_t *v26;
  __int16 v27;
  void *v28;

  *a3 = -1000;
  sub_1002FE6C0((uint64_t)(a3 + 2), (uint64_t)&unk_10085DAD0);
  if ((a2 - 1) >= 5)
  {
    if (!a2)
    {
      v10 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#alisha-mgr,SessionRequested timeout received", buf, 2u);
      }
      *a3 = 0;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 160);
    if (!v6)
      return;
    sub_100303E24(v6, a2, (uint64_t)&v21);
    v7 = v21;
    if (!v21)
    {
      *a3 = 0;
      if (!v24)
        return;
      if (v23 == 1)
      {
        sub_1002FDB78((char *)&v22, buf);
        *a3 = *(_DWORD *)buf;
        sub_100307F14((uint64_t)(a3 + 2), &__p);
      }
      else
      {
        if (v23)
          __assert_rtn("processTimeoutEvent", "AlishaManager.cpp", 369, "false");
        sub_1002FC8A4(&v22, buf);
        *a3 = *(_DWORD *)buf;
        sub_100307F14((uint64_t)(a3 + 2), &__p);
      }
      goto LABEL_16;
    }
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      sub_1003044E8(a2, buf);
      v11 = __p.n128_i8[15];
      v12 = *(uint8_t **)buf;
      sub_100301BCC(v21, &v15);
      v13 = buf;
      if (v11 < 0)
        v13 = v12;
      if (v17 >= 0)
        v14 = &v15;
      else
        v14 = v15;
      *(_DWORD *)v25 = 136315394;
      v26 = v13;
      v27 = 2080;
      v28 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#alisha-mgr,Processing timeout event %s returned non-successful status code %s", v25, 0x16u);
      if (v17 < 0)
        operator delete(v15);
      if (__p.n128_i8[15] < 0)
        operator delete(*(void **)buf);
      v7 = v21;
    }
    v15 = (void *)sub_10030842C(*(_QWORD *)(a1 + 168), v7);
    v16 = v9;
    *a3 = (_DWORD)v15;
    if ((v9 & 0xFF000000) != 0)
    {
      sub_1002FDB78((char *)&v15 + 4, buf);
      *a3 = *(_DWORD *)buf;
      sub_100307F14((uint64_t)(a3 + 2), &__p);
LABEL_16:
      if (v20)
      {
        if (__p.n128_u64[0])
        {
          __p.n128_u64[1] = __p.n128_u64[0];
          operator delete((void *)__p.n128_u64[0]);
        }
      }
    }
  }
}

void sub_100307DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    sub_1000131D8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100307E68(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    sub_1003EAB20();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, a1 + 176);
}

uint64_t sub_100307E94(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v5[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-mgr,handleUWBSystemError", v5, 2u);
  }
  v3 = *(_QWORD *)(a1 + 112);
  if (v3)
    sub_1002F9FCC(v3);
  sub_100055054((_QWORD *)(a1 + 176));
  return 0;
}

__n128 sub_100307F14(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void *v4;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
      result.n128_u64[0] = sub_10013775C(a1, a2).n128_u64[0];
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void sub_100307F9C()
{
  operator delete();
}

_QWORD *sub_100307FB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_100815520;
  result[1] = v3;
  return result;
}

uint64_t sub_100307FE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_100815520;
  a2[1] = v2;
  return result;
}

void sub_100308000(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int v15[4];
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  char v22;
  _BYTE v23[16];
  void *__p;
  void *v25;
  char v26;

  v5 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v5 + 24))
    sub_1003EAB48();
  v7 = *a3;
  v8 = (_QWORD *)(v5 + 80);
  if (*(_QWORD *)(v5 + 80))
  {
    sub_100306B8C(*(_QWORD *)(a1 + 8), (uint64_t)v23);
    if (v26)
    {
      if (__p)
      {
        v25 = __p;
        operator delete(__p);
      }
    }
  }
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    sub_100027BC4();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(&v19, v9, a2);
  v10 = v19;
  if (v22)
    v11 = 0;
  else
    v11 = -1004;
  if (!(_DWORD)v19)
    v10 = v11;
  if (v10)
  {
    *(_DWORD *)a4 = v10;
LABEL_14:
    *(_BYTE *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 0;
    goto LABEL_15;
  }
  if (!v22)
    sub_10000BA44();
  sub_100021C24((_QWORD *)(v5 + 80), &v20);
  if (!*v8)
  {
    *(_DWORD *)a4 = -1013;
    goto LABEL_14;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 24))(*v8, v7);
  if (*(_DWORD *)a4)
  {
    sub_100306B8C(v5, (uint64_t)v15);
    if (v18 && v16)
    {
      v17 = v16;
      operator delete(v16);
    }
  }
  else
  {
    v15[0] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
    sub_100306040(v5 + 176, v15, v15);
  }
LABEL_15:
  if (v22)
  {
    v12 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_1003081A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21)
{
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a21 && a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003081F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100308234()
{
}

void sub_100308244()
{
  operator delete();
}

__n128 sub_100308258(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1008155A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100308298(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1008155A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003082C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_1003082DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100308318()
{
}

void sub_100308328()
{
  operator delete();
}

__n128 sub_10030833C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_100815650;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_10030837C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100815650;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003083A4(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v5;

  v3 = a1[2];
  v4 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v5 + v4);
  return v4(v5, *a2, *a3);
}

uint64_t sub_1003083C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100308404()
{
}

uint64_t sub_100308410()
{
  return __cxa_atexit((void (*)(void *))sub_100304904, &unk_10085DAD0, (void *)&_mh_execute_header);
}

uint64_t sub_10030842C(uint64_t a1, int a2)
{
  NSObject *v3;
  int v4;
  void **v5;
  void **v6;
  _BYTE *v7;
  unsigned __int16 v8;
  unint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  void **v13;
  void **v14;
  _BYTE *v15;
  char v16;
  NSObject *v17;
  int v18;
  void **v19;
  void **v20;
  _BYTE *v21;
  unsigned int v22;
  NSObject *v23;
  int v24;
  void **v25;
  void **v26;
  _BYTE *v27;
  NSObject *v28;
  int v29;
  void **v30;
  void **v31;
  _BYTE *v32;
  NSObject *v33;
  int v34;
  void **v35;
  void **v36;
  _BYTE *v37;
  NSObject *v38;
  void **v39;
  void *v41[2];
  char v42;
  uint64_t v43;
  _BYTE __p[12];
  char v45;
  uint8_t buf[4];
  void **v47;
  __int16 v48;
  _BYTE *v49;

  if (a2 <= -3014)
  {
    if ((a2 + 4020) < 0x15)
    {
      v3 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        sub_100301BCC(a2, v41);
        v4 = v42;
        v5 = (void **)v41[0];
        sub_1002FB008(255, __p);
        v6 = v41;
        if (v4 < 0)
          v6 = v5;
        if (v45 >= 0)
          v7 = __p;
        else
          v7 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        v47 = v6;
        v48 = 2080;
        v49 = v7;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
        if (v45 < 0)
          operator delete(*(void **)__p);
        if (v42 < 0)
          operator delete(v41[0]);
      }
      LODWORD(v43) = 0;
      v8 = -255;
LABEL_14:
      LODWORD(v9) = v8 | 0x10000;
      goto LABEL_90;
    }
    goto LABEL_83;
  }
  if (a2 <= -2021)
  {
    v16 = a2 - 59;
    if ((a2 + 3013) <= 0xD)
    {
      if (((1 << v16) & 0x3070) != 0)
      {
        v23 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          sub_100301BCC(a2, v41);
          v24 = v42;
          v25 = (void **)v41[0];
          sub_1002FB044(4, __p);
          v26 = v41;
          if (v24 < 0)
            v26 = v25;
          if (v45 >= 0)
            v27 = __p;
          else
            v27 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315394;
          v47 = v26;
          v48 = 2080;
          v49 = v27;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
          if (v45 < 0)
            operator delete(*(void **)__p);
          if (v42 < 0)
            operator delete(v41[0]);
        }
        LODWORD(v43) = 0;
        v22 = 67108866;
        goto LABEL_54;
      }
      if (((1 << v16) & 0x381) != 0)
      {
        v17 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          sub_100301BCC(a2, v41);
          v18 = v42;
          v19 = (void **)v41[0];
          sub_1002FB044(6, __p);
          v20 = v41;
          if (v18 < 0)
            v20 = v19;
          if (v45 >= 0)
            v21 = __p;
          else
            v21 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315394;
          v47 = v20;
          v48 = 2080;
          v49 = v21;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
          if (v45 < 0)
            operator delete(*(void **)__p);
          if (v42 < 0)
            operator delete(v41[0]);
        }
        LODWORD(v43) = 0;
        v22 = 100663298;
LABEL_54:
        v9 = (unint64_t)&_mh_execute_header & 0xFFFFFFFFFFFFLL | v22 | 0x100000000000000;
        goto LABEL_90;
      }
      if (a2 == -3012)
        goto LABEL_72;
    }
LABEL_83:
    v38 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      sub_100301BCC(a2, v41);
      v39 = v42 >= 0 ? v41 : (void **)v41[0];
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Passthrough of status code %s", __p, 0xCu);
      if (v42 < 0)
        operator delete(v41[0]);
    }
    LODWORD(v9) = 0;
    LODWORD(v43) = a2;
    goto LABEL_90;
  }
  if ((a2 + 2020) <= 0x12)
  {
    v10 = 1 << (a2 - 28);
    if ((v10 & 0x78001) != 0)
    {
      v11 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        sub_100301BCC(a2, v41);
        v12 = v42;
        v13 = (void **)v41[0];
        sub_1002FB008(2, __p);
        v14 = v41;
        if (v12 < 0)
          v14 = v13;
        if (v45 >= 0)
          v15 = __p;
        else
          v15 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        v47 = v14;
        v48 = 2080;
        v49 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
        if (v45 < 0)
          operator delete(*(void **)__p);
        if (v42 < 0)
          operator delete(v41[0]);
      }
      LODWORD(v43) = 0;
      v8 = 513;
      goto LABEL_14;
    }
    if ((v10 & 0x1010) != 0)
    {
      v28 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        sub_100301BCC(a2, v41);
        v29 = v42;
        v30 = (void **)v41[0];
        sub_1002FB008(133, __p);
        v31 = v41;
        if (v29 < 0)
          v31 = v30;
        if (v45 >= 0)
          v32 = __p;
        else
          v32 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        v47 = v31;
        v48 = 2080;
        v49 = v32;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
        if (v45 < 0)
          operator delete(*(void **)__p);
        if (v42 < 0)
          operator delete(v41[0]);
      }
      LODWORD(v43) = 0;
      v8 = -31487;
      goto LABEL_14;
    }
  }
  if ((a2 - 54) > 0x15 || ((1 << (a2 - 54)) & 0x220001) == 0)
  {
    if (!a2)
      sub_1003EAB70();
    goto LABEL_83;
  }
LABEL_72:
  v33 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_100301BCC(a2, v41);
    v34 = v42;
    v35 = (void **)v41[0];
    sub_1002FB044(1, __p);
    v36 = v41;
    if (v34 < 0)
      v36 = v35;
    if (v45 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    v47 = v36;
    v48 = 2080;
    v49 = v37;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
    if (v45 < 0)
      operator delete(*(void **)__p);
    if (v42 < 0)
      operator delete(v41[0]);
  }
  LODWORD(v43) = 0;
  LODWORD(v9) = 16777218;
LABEL_90:
  HIDWORD(v43) = v9;
  return v43;
}

void sub_100308AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100308AEC(uint64_t a1)
{
  *(_DWORD *)a1 = 65793;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 0;
  operator new();
}

void sub_100308D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v13;
  void *v14;

  a9 = (void **)(v9 + 528);
  sub_1002F190C(&a9);
  sub_10003A394(v11);
  v13 = *(_QWORD **)(v9 + 136);
  *(_QWORD *)(v9 + 136) = 0;
  if (v13)
  {
    v13[21] = off_100807398;
    v13[13] = off_100807398;
    v13[5] = off_100807398;
    operator delete();
  }
  if (*(_BYTE *)(v9 + 128))
  {
    v14 = *(void **)(v9 + 96);
    if (v14)
    {
      *(_QWORD *)(v9 + 104) = v14;
      operator delete(v14);
    }
  }
  sub_1002F1998(v10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100308DFC(uint64_t result, double a2)
{
  *(double *)(result + 552) = a2;
  return result;
}

void sub_100308E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  double v7;
  int v8;
  NSObject *v9;
  double v10;
  const char *v11;
  double v12;
  double v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  double v18;
  const char *v19;
  NSObject *v20;
  double v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  __int16 v32;
  __int128 v33;
  void *__p[2];
  __int128 v35;
  __int128 v36;
  _BYTE buf[32];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  __int16 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v4 = *(_QWORD *)(a1 + 496);
  if (!v4
    || *(double *)a2 > *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 464)
                                             + (((unint64_t)(v4 + *(_QWORD *)(a1 + 488) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                                 + (((v4 + *(_QWORD *)(a1 + 488) - 1) & 0x1F) << 7)))
  {
    v5 = *(_DWORD *)(a1 + 504);
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 80);
    v6 = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(a1 + 512) = v6;
    v7 = *(double *)a2;
    if (!*(_BYTE *)(a1 + 32) || *(double *)(a1 + 24) < v7)
    {
      *(double *)(a1 + 24) = v7;
      *(_BYTE *)(a1 + 32) = 1;
    }
    v8 = *(_DWORD *)(a2 + 80);
    if (v5 == v8)
      goto LABEL_19;
    if (v8 == 2)
    {
      v9 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_19;
      v13 = *(double *)a2;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v13;
      v11 = "#sa_algo,VIO Tracking State changed to Normal at %f s";
    }
    else if (v8 == 1)
    {
      v9 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_19;
      v12 = *(double *)a2;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v12;
      v11 = "#sa_algo,VIO Tracking State changed to Limited at %f s";
    }
    else
    {
      if (v8)
        goto LABEL_19;
      v9 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_19;
      v10 = *(double *)a2;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v10;
      v11 = "#sa_algo,VIO Tracking State changed to Not Available at %f s";
    }
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
LABEL_19:
    sub_100309308(a1, a2);
    v14 = *(_DWORD *)(a2 + 80);
    if (v5 == 2 && v14 != 2)
    {
      v15 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo,VIO Tracking not normal anymore - resetting", buf, 2u);
      }
      if (*(_BYTE *)(a1 + 368))
      {
        v16 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo,VIO Tracking not normal before the cached measurement can be interpolated - passing the cached measurement to the range filter without VIO", buf, 2u);
          if (!*(_BYTE *)(a1 + 368))
            sub_10000BA44();
        }
        sub_100309650(a1, a1 + 184);
      }
      sub_1003097EC(a1);
      v14 = *(_DWORD *)(a2 + 80);
    }
    if (v14 == 2)
    {
      if (*(_BYTE *)(a2 + 84))
      {
        v17 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *(double *)a2;
          if (*(_BYTE *)(a2 + 85))
            v19 = "YES";
          else
            v19 = "NO";
          *(_DWORD *)buf = 134218498;
          *(double *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "YES";
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#sa_algo,VIO reported relocalization event at %f s, MAJOR: %s, MINOR: %s - resetting", buf, 0x20u);
        }
        sub_1003097EC(a1);
      }
      else
      {
        if (*(_BYTE *)(a2 + 85))
        {
          v20 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v21 = *(double *)a2;
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#sa_algo,VIO reported MINOR relocalization event at %f s", buf, 0xCu);
          }
        }
        v22 = 0;
        v23 = *(float32x4_t *)(a2 + 16);
        v24 = *(float32x4_t *)(a2 + 32);
        v25 = *(float32x4_t *)(a2 + 48);
        v26 = *(float32x4_t *)(a2 + 64);
        v33 = xmmword_100478840;
        *(_OWORD *)__p = xmmword_100478850;
        v35 = xmmword_100478860;
        v36 = xmmword_100478870;
        do
        {
          *(float32x4_t *)&buf[v22 * 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)&__p[v22 - 2])), v24, (float32x2_t)__p[v22 - 2], 1), v25, *(float32x4_t *)&__p[v22 - 2], 2), v26, *(float32x4_t *)&__p[v22 - 2], 3);
          v22 += 2;
        }
        while (v22 != 8);
        v27 = *(_OWORD *)buf;
        v28 = *(_OWORD *)&buf[16];
        v29 = v38;
        v30 = v39;
        v31 = *(_DWORD *)(a2 + 80);
        v32 = *(_WORD *)(a2 + 84);
        *(_QWORD *)buf = *(_QWORD *)a2;
        *(_OWORD *)&buf[16] = v27;
        v38 = v28;
        v39 = v29;
        v40 = v30;
        v41 = v31;
        v42 = v32;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        sub_1003098A8((_QWORD *)(a1 + 456), (__int128 *)buf);
        if (!*(_BYTE *)(a1 + 3))
        {
          sub_100327450(*(_QWORD *)(a1 + 72), &v33, *(double *)buf, *((float *)&v40 + 1));
          sub_10030994C(a1 + 80, (uint64_t *)&v33);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
      }
    }
    sub_1003099CC(a1);
    sub_10030A038(a1);
    sub_10030A6FC((_QWORD *)a1);
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003EAB98();
}

void sub_1003092E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100309308(uint64_t result, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  void **v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  void *__p;
  char v26;
  uint64_t v27;
  _QWORD v28[10];
  char v29;
  uint64_t v30;
  uint8_t buf[4];
  double v32;
  __int16 v33;
  void **v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;

  v3 = *(double *)a2;
  if (!*(_BYTE *)(result + 48) || v3 - *(double *)(result + 40) >= 0.2)
  {
    *(double *)(result + 40) = v3;
    *(_BYTE *)(result + 48) = 1;
    sub_100210A10((uint64_t)&v27);
    sub_100054C60(&v27, (uint64_t)"tracking state: ", 16);
    v4 = *(int *)(a2 + 80);
    if (v4 < 3)
      sub_100054C60(&v27, (uint64_t)off_1008157F8[v4], qword_100478940[v4]);
    sub_100054C60(&v27, (uint64_t)", light intensity ", 18);
    if (*(_BYTE *)(a2 + 96))
    {
      v5 = v27;
      *(_DWORD *)((char *)v28 + *(_QWORD *)(v27 - 24)) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(v27 - 24)) & 0xFFFFFEFB | 4;
      *(_QWORD *)((char *)&v28[1] + *(_QWORD *)(v5 - 24)) = 2;
      std::ostream::operator<<(&v27);
    }
    else
    {
      sub_100054C60(&v27, (uint64_t)"-", 1);
    }
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)a2;
      std::stringbuf::str(v28);
      v8 = v26 >= 0 ? &__p : (void **)__p;
      v9 = *(float *)(a2 + 16);
      v10 = *(float *)(a2 + 20);
      v11 = *(float *)(a2 + 24);
      v12 = *(float *)(a2 + 28);
      v13 = *(float *)(a2 + 32);
      v14 = *(float *)(a2 + 36);
      v15 = *(float *)(a2 + 40);
      v16 = *(float *)(a2 + 44);
      v17 = *(float *)(a2 + 48);
      v18 = *(float *)(a2 + 52);
      v19 = *(float *)(a2 + 56);
      v20 = *(float *)(a2 + 60);
      v21 = *(float *)(a2 + 64);
      v22 = *(float *)(a2 + 68);
      v23 = *(float *)(a2 + 72);
      v24 = *(float *)(a2 + 76);
      *(_DWORD *)buf = 134222338;
      v32 = v7;
      v33 = 2080;
      v34 = v8;
      v35 = 2048;
      v36 = v9;
      v37 = 2048;
      v38 = v10;
      v39 = 2048;
      v40 = v11;
      v41 = 2048;
      v42 = v12;
      v43 = 2048;
      v44 = v13;
      v45 = 2048;
      v46 = v14;
      v47 = 2048;
      v48 = v15;
      v49 = 2048;
      v50 = v16;
      v51 = 2048;
      v52 = v17;
      v53 = 2048;
      v54 = v18;
      v55 = 2048;
      v56 = v19;
      v57 = 2048;
      v58 = v20;
      v59 = 2048;
      v60 = v21;
      v61 = 2048;
      v62 = v22;
      v63 = 2048;
      v64 = v23;
      v65 = 2048;
      v66 = v24;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#sa_algo,Pose timestamp: %f, %s, pose [%3.2f, %3.2f, %3.2f, %3.2f, ...\n\t%3.2f, %3.2f, %3.2f, %3.2f, ...\n\t%3.2f, %3.2f, %3.2f, %3.2f, ... \n\t%3.2f, %3.2f, %3.2f, %3.2f]", buf, 0xB6u);
      if (v26 < 0)
        operator delete(__p);
    }
    if (v29 < 0)
      operator delete((void *)v28[8]);
    std::streambuf::~streambuf(v28);
    return std::ios::~ios(&v30);
  }
  return result;
}

void sub_10030962C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100210AFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100309650(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  _OWORD *v6;
  double v7;
  int v8;
  NSObject *v9;
  __int128 v10;
  NSObject *v11;
  double v12;
  _BYTE v13[32];
  _BYTE buf[24];
  double v15;

  v4 = *(double *)(a2 + 8);
  if (*(_BYTE *)(a1 + 176) && (v5 = *(double *)(a1 + 168), v4 <= v5))
  {
    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(float *)(a2 + 16);
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v4;
      *(_WORD *)&buf[22] = 2048;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#sa_algo,Not passing range measurement without VIO to range filter, range: %0.2f m, timestamp: %f s, range filter time: %f s", buf, 0x20u);
    }
  }
  else
  {
    v6 = (_OWORD *)(a1 + 144);
    v7 = *(float *)(a2 + 16);
    *(_QWORD *)buf = *(_QWORD *)(a2 + 8);
    *(double *)&buf[8] = v7;
    *(_QWORD *)&buf[16] = 0x3FB999999999999ALL;
    LODWORD(v15) = 0;
    v8 = *(unsigned __int8 *)(a1 + 3);
    v9 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v13 = 134218240;
      *(double *)&v13[4] = v7;
      *(_WORD *)&v13[12] = 2048;
      *(double *)&v13[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#sa_algo,Passing range measurement without VIO to range filter, range: %0.2f m, timestamp: %f s", v13, 0x16u);
    }
    sub_100323F64(*(_QWORD *)(a1 + 136), (double *)buf, v8 != 0, 1, (uint64_t)v13);
    v10 = *(_OWORD *)&v13[16];
    *v6 = *(_OWORD *)v13;
    *(_OWORD *)(a1 + 160) = v10;
    *(_BYTE *)(a1 + 176) = 1;
  }
}

void sub_1003097EC(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*(_BYTE *)(a1 + 368))
    *(_BYTE *)(a1 + 368) = 0;
  v2 = *(void ***)(a1 + 464);
  v3 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 496) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 472);
      v2 = (void **)(*(_QWORD *)(a1 + 464) + 8);
      *(_QWORD *)(a1 + 464) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 16;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_10;
    v6 = 32;
  }
  *(_QWORD *)(a1 + 488) = v6;
LABEL_10:
  if (*(_BYTE *)(a1 + 128))
  {
    v7 = *(void **)(a1 + 96);
    if (v7)
    {
      *(_QWORD *)(a1 + 104) = v7;
      operator delete(v7);
    }
    *(_BYTE *)(a1 + 128) = 0;
  }
  sub_100327610(*(_QWORD *)(a1 + 72));
  if (*(_BYTE *)(a1 + 448))
  {
    *(_DWORD *)(a1 + 408) = 0;
    if (*(_BYTE *)(a1 + 440))
      *(_BYTE *)(a1 + 440) = 0;
  }
}

__n128 sub_1003098A8(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 4 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10030DE34(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + ((v7 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v7 & 0x1F) << 7);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  result = (__n128)a2[4];
  v13 = a2[5];
  v14 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v14;
  *(__n128 *)(v8 + 64) = result;
  *(_OWORD *)(v8 + 80) = v13;
  ++a1[5];
  return result;
}

uint64_t sub_10030994C(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 48))
  {
    v4 = *(void **)(a1 + 16);
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
  v5 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 32) = a2[4];
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void sub_1003099CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char *v10;
  unint64_t v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  double *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __int128 v41;
  unsigned int v42;
  double *v43;
  double *v44;
  NSObject *v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  float32x4_t v50;
  float v51;
  float32x4_t v52;
  __int128 v53;
  float32x4_t v54;
  float32x4_t v55;
  __int128 v56;
  float32x4_t v57;
  uint64_t (**v58)();
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _BYTE v63[64];
  uint64_t (**v64)();
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t (**v69)();
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  _BYTE v74[24];
  double v75;
  _BYTE v76[10];
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  _BYTE buf[110];

  if (!*(_BYTE *)(a1 + 448))
    return;
  if (*(_DWORD *)(a1 + 408) != 1)
    return;
  v2 = *(_QWORD *)(a1 + 496);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 488);
  v4 = v3 >> 5;
  v6 = *(_QWORD *)(a1 + 464);
  v5 = *(_QWORD *)(a1 + 472);
  v7 = (char *)(v6 + 8 * (v3 >> 5));
  if (v5 == v6)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
  }
  else
  {
    v8 = *(_QWORD *)v7 + ((*(_QWORD *)(a1 + 488) & 0x1FLL) << 7);
    v9 = v3 + v2;
    v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
    v11 = *(_QWORD *)v10 + ((unint64_t)(v9 & 0x1F) << 7);
  }
  v13 = *(double *)(a1 + 376);
  v12 = *(double *)(a1 + 384);
  v14 = *(double *)(a1 + 392);
  v15 = *(double *)(a1 + 400);
  *(_QWORD *)buf = v6 + 8 * (v3 >> 5);
  *(_QWORD *)&buf[8] = v8;
  if (v11 != v8)
  {
    v16 = ((uint64_t)(v11 - *(_QWORD *)v10) >> 7) + 4 * (v10 - v7);
    v17 = v8 - *(_QWORD *)v7;
    v18 = v16 - (v17 >> 7);
    if (v16 != v17 >> 7)
    {
      do
      {
        v19 = v18 >> 1;
        v20 = sub_10030ECFC((uint64_t)buf, v18 >> 1);
        if (v13 >= *v21)
        {
          v22 = v21 + 16;
          if ((double *)((char *)v21 - *v20 + 128) == (double *)4096)
          {
            v23 = (double *)v20[1];
            ++v20;
            v22 = v23;
          }
          *(_QWORD *)buf = v20;
          *(_QWORD *)&buf[8] = v22;
          v19 = v18 + ~v19;
        }
        v18 = v19;
      }
      while (v19);
      v7 = *(char **)buf;
      v8 = *(_QWORD *)&buf[8];
      v3 = *(_QWORD *)(a1 + 488);
      v6 = *(_QWORD *)(a1 + 464);
      v5 = *(_QWORD *)(a1 + 472);
      v4 = v3 >> 5;
    }
  }
  if (v5 == v6)
  {
    if (v8)
    {
      v25 = 0;
      v24 = *(_QWORD *)(a1 + 496);
      goto LABEL_20;
    }
LABEL_23:
    v31 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      v49 = *(_QWORD *)(*(_QWORD *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7));
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v49;
      _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#sa_algo,AoA Measurement at %f s earlier than the first pose in history at %f s - skipping interpolation and marking impossible to interpolate", buf, 0x16u);
    }
    if (!*(_BYTE *)(a1 + 448))
      sub_10000BA44();
    *(_DWORD *)(a1 + 408) = 0;
    goto LABEL_38;
  }
  if (*(_QWORD *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7) == v8)
    goto LABEL_23;
  v24 = *(_QWORD *)(a1 + 496);
  v25 = *(_QWORD *)(v6 + (((v24 + v3) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v24 + v3) & 0x1F) << 7);
LABEL_20:
  if (v25 != v8)
  {
    v26 = v8 - *(_QWORD *)v7;
    v27 = v26 >> 7;
    if (v26 < 129)
    {
      v34 = 32 - v27;
      v29 = *(_QWORD *)&v7[-8 * (v34 >> 5)];
      v30 = ~(_DWORD)v34 & 0x1FLL;
    }
    else
    {
      v28 = v27 - 1;
      v29 = *(_QWORD *)&v7[(v28 >> 2) & 0x3FFFFFFFFFFFFFF8];
      v30 = v28 & 0x1F;
    }
    v35 = v29 + (v30 << 7);
    v36 = (v13 - *(double *)v35) / (*(double *)v8 - *(double *)v35);
    v51 = v36;
    v54 = *(float32x4_t *)(v35 + 64);
    *(double *)v37.i64 = sub_10030C298(*(int8x16_t *)(v35 + 16), *(int8x16_t *)(v35 + 32), *(__n128 *)(v35 + 48));
    v52 = v37;
    v50 = *(float32x4_t *)(v8 + 64);
    *(double *)v38.i64 = sub_10030C298(*(int8x16_t *)(v8 + 16), *(int8x16_t *)(v8 + 32), *(__n128 *)(v8 + 48));
    v39 = vmulq_f32(v52, v38);
    v40 = (float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL);
    *(float32x2_t *)v39.f32 = vadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.f32);
    v39.f32[0] = vaddv_f32(*(float32x2_t *)v39.f32);
    v40.i32[0] = 0;
    sub_10030D9C8(v52, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v39, v40)), 0), (int8x16_t)vnegq_f32(v38), (int8x16_t)v38), v51);
    v53 = v41;
    v71 = 0x100000003;
    v69 = off_1008156E8;
    v70 = xmmword_100478880;
    v72 = &v73;
    sub_10030DD0C(&v69, 3, 1);
    sub_10030DD58((uint64_t)&v69, 0.0);
    v66 = 0x100000004;
    v64 = off_100815778;
    v65 = xmmword_100478890;
    v67 = &v68;
    sub_10030DD0C(&v64, 4, 1);
    sub_10030DD58((uint64_t)&v64, 0.0);
    v42 = 0;
    v55 = vmlaq_n_f32(v54, vsubq_f32(v50, v54), v51);
    do
    {
      v43 = (double *)sub_10030E194((uint64_t)&v69, v42);
      v57 = v55;
      *v43 = *(float *)((unint64_t)&v57 & 0xFFFFFFFFFFFFFFF3 | (4 * (v42 & 3)));
      v44 = (double *)sub_10030E194((uint64_t)&v64, v42);
      v56 = v53;
      *v44 = *(float *)((unint64_t)&v56 & 0xFFFFFFFFFFFFFFF3 | (4 * (v42++ & 3)));
    }
    while (v42 != 3);
    *(double *)sub_10030E194((uint64_t)&v64, 3u) = *((float *)&v53 + 3);
    sub_100359F98((uint64_t)&v64, (uint64_t)buf);
    sub_100359EB8((uint64_t)v63, v12, v14, v15);
    *(_QWORD *)&v75 = 0x100000003;
    *(_QWORD *)v74 = off_1008156E8;
    *(_OWORD *)&v74[8] = xmmword_100478880;
    *(_QWORD *)v76 = &v76[8];
    sub_10030E3B0((uint64_t)buf, (uint64_t)v63, (uint64_t)v74);
    v60 = 0x100000003;
    v58 = off_1008156E8;
    v59 = xmmword_100478880;
    v61 = &v62;
    sub_10030F0E0((uint64_t)v74, (uint64_t)&v69, (uint64_t)&v58);
    v45 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v74 = 134219520;
      *(double *)&v74[4] = v55.f32[0];
      *(_WORD *)&v74[12] = 2048;
      *(double *)&v74[14] = v55.f32[1];
      *(_WORD *)&v74[22] = 2048;
      v75 = v55.f32[2];
      *(_WORD *)v76 = 2048;
      *(double *)&v76[2] = *(float *)&v53;
      v77 = 2048;
      v78 = *((float *)&v53 + 1);
      v79 = 2048;
      v80 = *((float *)&v53 + 2);
      v81 = 2048;
      v82 = *((float *)&v53 + 3);
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#sa_algo,AoA Measurement pos: [%3.2f, %3.2f, %3.2f] quat: [%3.2f, %3.2f, %3.2f, %3.2f]", v74, 0x48u);
    }
    v46 = sub_10027C1A4((uint64_t)&v58, 0);
    v47 = sub_10027C1A4((uint64_t)&v58, 1u);
    v48 = sub_10027C1A4((uint64_t)&v58, 2u);
    if (!*(_BYTE *)(a1 + 448))
      sub_10000BA44();
    if (*(_BYTE *)(a1 + 440))
      *(_BYTE *)(a1 + 440) = 0;
    *(double *)(a1 + 416) = v46;
    *(double *)(a1 + 424) = v47;
    *(double *)(a1 + 432) = v48;
    *(_BYTE *)(a1 + 440) = 1;
    *(_DWORD *)(a1 + 408) = 2;
LABEL_38:
    sub_10030C0DC(a1);
    return;
  }
  v32 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + (((v3 + v24 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v3 + v24 - 1) & 0x1F) << 7));
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v33;
    _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#sa_algo,AoA Measurement at %f s later than the last pose in history at %f s - skipping interpolation", buf, 0x16u);
  }
}

void sub_10030A038(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char *v10;
  unint64_t v11;
  double v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  double v41;
  int8x16_t v42;
  double v43;
  double v44;
  NSObject *v45;
  double v46;
  char v47;
  double v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float64x2_t v61;
  float v62;
  float64x2_t v63;
  int v64[4];
  void *v65;
  void *v66;
  char v67;
  _BYTE v68[32];
  _BYTE buf[24];
  double v70;
  __int16 v71;
  float64_t v72;
  __int16 v73;
  float64_t v74;
  __int16 v75;
  double v76;
  __int16 v77;
  float64_t v78;
  __int16 v79;
  float64_t v80;
  __int16 v81;
  double v82;
  double v83;
  float64x2_t v84;
  double v85;
  float64x2_t v86;
  double v87;

  if (!*(_BYTE *)(a1 + 368))
    return;
  v2 = *(_QWORD *)(a1 + 496);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 488);
  v4 = v3 >> 5;
  v6 = *(_QWORD *)(a1 + 464);
  v5 = *(_QWORD *)(a1 + 472);
  v7 = (char *)(v6 + 8 * (v3 >> 5));
  if (v5 == v6)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
  }
  else
  {
    v8 = *(_QWORD *)v7 + ((*(_QWORD *)(a1 + 488) & 0x1FLL) << 7);
    v9 = v3 + v2;
    v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
    v11 = *(_QWORD *)v10 + ((unint64_t)(v9 & 0x1F) << 7);
  }
  v12 = *(double *)(a1 + 192);
  v13 = *(float *)(a1 + 200);
  *(_QWORD *)buf = v6 + 8 * (v3 >> 5);
  *(_QWORD *)&buf[8] = v8;
  if (v11 != v8)
  {
    v14 = ((uint64_t)(v11 - *(_QWORD *)v10) >> 7) + 4 * (v10 - v7);
    v15 = v8 - *(_QWORD *)v7;
    v16 = v14 - (v15 >> 7);
    if (v14 != v15 >> 7)
    {
      do
      {
        v17 = v16 >> 1;
        v18 = sub_10030ECFC((uint64_t)buf, v16 >> 1);
        if (v12 >= *v19)
        {
          v20 = v19 + 16;
          if ((double *)((char *)v19 - *v18 + 128) == (double *)4096)
          {
            v21 = (double *)v18[1];
            ++v18;
            v20 = v21;
          }
          *(_QWORD *)buf = v18;
          *(_QWORD *)&buf[8] = v20;
          v17 = v16 + ~v17;
        }
        v16 = v17;
      }
      while (v17);
      v7 = *(char **)buf;
      v8 = *(_QWORD *)&buf[8];
      v3 = *(_QWORD *)(a1 + 488);
      v6 = *(_QWORD *)(a1 + 464);
      v5 = *(_QWORD *)(a1 + 472);
      v4 = v3 >> 5;
    }
  }
  if (v5 == v6)
  {
    if (v8)
    {
      v23 = 0;
      v22 = *(_QWORD *)(a1 + 496);
LABEL_19:
      if (v23 == v8)
      {
        v31 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(v6 + (((v3 + v22 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                          + (((v3 + v22 - 1) & 0x1F) << 7));
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v12;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v32;
          _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#sa_algo,Measurement at %f s later than the last pose in history at %f s - skipping interpolation", buf, 0x16u);
        }
      }
      else
      {
        v24 = v8 - *(_QWORD *)v7;
        v25 = v24 >> 7;
        if (v24 < 129)
        {
          v33 = 32 - v25;
          v27 = &v7[-8 * (v33 >> 5)];
          v28 = *(_QWORD *)v27;
          v29 = ~(_DWORD)v33 & 0x1FLL;
        }
        else
        {
          v26 = v25 - 1;
          v27 = &v7[8 * (v26 >> 5)];
          v28 = *(_QWORD *)v27;
          v29 = v26 & 0x1F;
        }
        v34 = v28 + (v29 << 7);
        v35 = (v12 - *(double *)v34) / (*(double *)v8 - *(double *)v34);
        v60 = *(float32x4_t *)(v34 + 64);
        v62 = v35;
        *(double *)v36.i64 = sub_10030C298(*(int8x16_t *)(v34 + 16), *(int8x16_t *)(v34 + 32), *(__n128 *)(v34 + 48));
        v58 = v36;
        v59 = *(float32x4_t *)(v8 + 64);
        *(double *)v37.i64 = sub_10030C298(*(int8x16_t *)(v8 + 16), *(int8x16_t *)(v8 + 32), *(__n128 *)(v8 + 48));
        v38 = vmulq_f32(v58, v37);
        v39 = (float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL);
        *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32);
        v38.f32[0] = vaddv_f32(*(float32x2_t *)v38.f32);
        v39.i32[0] = 0;
        sub_10030D9C8(v58, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v38, v39)), 0), (int8x16_t)vnegq_f32(v37), (int8x16_t)v37), v62);
        v40 = (int8x16_t)vmlaq_n_f32(v60, vsubq_f32(v59, v60), v62);
        v41 = *(float *)v40.i32;
        v43 = *(float *)v42.i32;
        v61 = vcvtq_f64_f32((float32x2_t)vext_s8(*(int8x8_t *)v42.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), 4uLL));
        v63 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 4uLL));
        v44 = *(float *)&v42.i32[3];
        v45 = qword_10085F520;
        v46 = v13;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134220032;
          *(double *)&buf[4] = v46;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v12;
          *(_WORD *)&buf[22] = 2048;
          v70 = v41;
          v71 = 2048;
          v72 = v63.f64[0];
          v73 = 2048;
          v74 = v63.f64[1];
          v75 = 2048;
          v76 = v43;
          v77 = 2048;
          v78 = v61.f64[0];
          v79 = 2048;
          v80 = v61.f64[1];
          v81 = 2048;
          v82 = v44;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#sa_algo,Passing range measurement to batch filter and range filter, range: %0.2f m, timestamp: %f s, device position:[%0.2f,%0.2f,%0.2f], device quat:[%0.2f,%0.2f,%0.2f,%0.2f]", buf, 0x5Cu);
        }
        *(double *)buf = v12;
        *(double *)&buf[8] = v46;
        *(_QWORD *)&buf[16] = 0x3FB999999999999ALL;
        LODWORD(v70) = 0;
        LOBYTE(v71) = 0;
        BYTE4(v82) = 0;
        v84 = v63;
        v83 = v41;
        v85 = v43;
        v86 = v61;
        v87 = v44;
        if (*(_BYTE *)(a1 + 176))
        {
          v47 = v12 - *(double *)(a1 + 168) <= 2.0;
          v48 = *(double *)(a1 + 152);
        }
        else
        {
          v47 = 0;
          v48 = 0.0;
        }
        sub_10032912C(*(_QWORD *)(a1 + 72), v47, v48);
        sub_10030DB30(v64, (uint64_t *)(a1 + 80));
        sub_100329138(*(_QWORD *)(a1 + 72), (uint64_t)buf, v68);
        sub_10030994C(a1 + 80, (uint64_t *)v68);
        if (*(_QWORD *)&v68[16])
        {
          *(_QWORD *)&v68[24] = *(_QWORD *)&v68[16];
          operator delete(*(void **)&v68[16]);
        }
        sub_100323578(*(_QWORD *)(a1 + 136), (uint64_t)buf, (uint64_t)v68);
        if (*(_BYTE *)(a1 + 176))
          *(_BYTE *)(a1 + 176) = 0;
        v49 = *(_OWORD *)&v68[16];
        *(_OWORD *)(a1 + 144) = *(_OWORD *)v68;
        *(_OWORD *)(a1 + 160) = v49;
        *(_BYTE *)(a1 + 176) = 1;
        if (!v67)
          goto LABEL_41;
        if (!*(_BYTE *)(a1 + 128))
          sub_10000BA44();
        if (v64[0] != *(_DWORD *)(a1 + 80))
LABEL_41:
          sub_10030D1A8(a1);
        v50 = *(_QWORD *)(a1 + 464);
        v51 = (char *)(v50 + 8 * (*(_QWORD *)(a1 + 488) >> 5));
        if (*(_QWORD *)(a1 + 472) == v50)
          v52 = 0;
        else
          v52 = *(_QWORD *)v51 + ((*(_QWORD *)(a1 + 488) & 0x1FLL) << 7);
        sub_10030D388((_QWORD *)(a1 + 456), v51, v52, v27, v34);
        v53 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        {
          v54 = *(_QWORD *)(a1 + 464);
          v55 = *(_QWORD *)(*(_QWORD *)(v54 + ((*(_QWORD *)(a1 + 488) >> 2) & 0x3FFFFFFFFFFFFFF8))
                          + ((*(_QWORD *)(a1 + 488) & 0x1FLL) << 7));
          v56 = *(_QWORD *)(*(_QWORD *)(v54
                                      + (((unint64_t)(*(_QWORD *)(a1 + 488) + *(_QWORD *)(a1 + 496) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                          + (((*(_QWORD *)(a1 + 488) + *(_QWORD *)(a1 + 496) - 1) & 0x1F) << 7));
          *(_DWORD *)v68 = 134218240;
          *(_QWORD *)&v68[4] = v55;
          *(_WORD *)&v68[12] = 2048;
          *(_QWORD *)&v68[14] = v56;
          _os_log_debug_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "#sa_algo,Pose history now between %f s and %f s", v68, 0x16u);
        }
        if (*(_BYTE *)(a1 + 368))
          *(_BYTE *)(a1 + 368) = 0;
        if (v67)
        {
          if (v65)
          {
            v66 = v65;
            operator delete(v65);
          }
        }
      }
      return;
    }
  }
  else if (*(_QWORD *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7) != v8)
  {
    v22 = *(_QWORD *)(a1 + 496);
    v23 = *(_QWORD *)(v6 + (((v22 + v3) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v22 + v3) & 0x1F) << 7);
    goto LABEL_19;
  }
  v30 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7));
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v57;
    _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#sa_algo,Measurement at %f s earlier than the first pose in history at %f s - skipping interpolation and removing range measurement", buf, 0x16u);
  }
  if (*(_BYTE *)(a1 + 368))
    *(_BYTE *)(a1 + 368) = 0;
}

void sub_10030A6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (a24)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030A6FC(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  NSObject *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  _QWORD *v23;
  double *v24;
  double *v25;
  double *v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[22];

  v1 = a1[62];
  if (v1)
  {
    v3 = a1[61];
    v4 = a1[58];
    v5 = v3 >> 5;
    v6 = *(double *)(*(_QWORD *)(v4 + (((v1 + v3 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v1 + v3 - 1) & 0x1F) << 7))
       - *(double *)(*(_QWORD *)(v4 + 8 * (v3 >> 5)) + ((v3 & 0x1F) << 7));
    if (v6 > 5.0)
    {
      v7 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v33 = 134217984;
        *(double *)&v33[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo,Pose history spans %f s - pruning down past poses from history", v33, 0xCu);
        v3 = a1[61];
        v1 = a1[62];
        v4 = a1[58];
        v5 = v3 >> 5;
      }
      v8 = v3 + v1;
      v9 = v3 + v1 - 1;
      v10 = *(_QWORD *)(v4 + ((v9 >> 2) & 0x3FFFFFFFFFFFFFF8));
      v11 = (v9 & 0x1F) << 7;
      v12 = (char *)(v4 + 8 * v5);
      v13 = a1[59];
      if (v13 == v4)
      {
        v14 = 0;
        v16 = 0;
        v15 = (char *)(v4 + 8 * (v8 >> 5));
      }
      else
      {
        v14 = *(_QWORD *)v12 + ((v3 & 0x1F) << 7);
        v15 = (char *)(v4 + 8 * (v8 >> 5));
        v16 = *(_QWORD *)v15 + ((v8 & 0x1F) << 7);
      }
      v17 = *(double *)(v10 + v11);
      *(_QWORD *)v33 = v4 + 8 * v5;
      *(_QWORD *)&v33[8] = v14;
      if (v16 != v14)
      {
        v18 = ((uint64_t)(v16 - *(_QWORD *)v15) >> 7) + 4 * (v15 - v12);
        v19 = v14 - *(_QWORD *)v12;
        v20 = v18 - (v19 >> 7);
        if (v18 != v19 >> 7)
        {
          v21 = v17 + -2.0;
          do
          {
            v22 = v20 >> 1;
            v23 = sub_10030ECFC((uint64_t)v33, v20 >> 1);
            if (v21 >= *v24)
            {
              v25 = v24 + 16;
              if ((double *)((char *)v24 - *v23 + 128) == (double *)4096)
              {
                v26 = (double *)v23[1];
                ++v23;
                v25 = v26;
              }
              *(_QWORD *)v33 = v23;
              *(_QWORD *)&v33[8] = v25;
              v22 = v20 + ~v22;
            }
            v20 = v22;
          }
          while (v22);
          v12 = *(char **)v33;
          v14 = *(_QWORD *)&v33[8];
          v3 = a1[61];
          v4 = a1[58];
          v13 = a1[59];
          v5 = v3 >> 5;
        }
      }
      v27 = (char *)(v4 + 8 * v5);
      if (v13 == v4)
        v28 = 0;
      else
        v28 = *(_QWORD *)v27 + ((v3 & 0x1F) << 7);
      sub_10030D388(a1 + 57, v27, v28, v12, v14);
      v29 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v30 = a1[58];
        v31 = *(_QWORD *)(*(_QWORD *)(v30 + ((a1[61] >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((a1[61] & 0x1FLL) << 7));
        v32 = *(_QWORD *)(*(_QWORD *)(v30 + (((unint64_t)(a1[61] + a1[62] - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                        + (((a1[61] + a1[62] - 1) & 0x1F) << 7));
        *(_DWORD *)v33 = 134218240;
        *(_QWORD *)&v33[4] = v31;
        *(_WORD *)&v33[12] = 2048;
        *(_QWORD *)&v33[14] = v32;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#sa_algo,Pose history now between %f s and %f s", v33, 0x16u);
      }
    }
  }
}

void sub_10030A9D0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  double v20;
  NSObject *v21;
  double v22;
  NSObject *v23;
  const char *v24;
  double v25;
  double v26;
  NSObject *v27;
  _BOOL4 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;

  if (*(_BYTE *)(a2 + 181))
  {
    v4 = *(unsigned __int8 *)(a2 + 180);
    if (v4 <= 2)
    {
      v15 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        return;
      v38 = 67109120;
      LODWORD(v39) = v4;
      v16 = "#sa_algo,mmsValStatus %d does not pass check, rejecting range result event";
      v17 = v15;
      v18 = 8;
      goto LABEL_8;
    }
  }
  v5 = *(unsigned __int8 *)(a2 + 36);
  v6 = qword_10085F520;
  v7 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (!v7)
      goto LABEL_12;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(float *)(a2 + 16);
    v10 = *(float *)(a2 + 24);
    v11 = *(float *)(a2 + 28);
    v38 = 134218752;
    v39 = v8;
    v40 = 2048;
    v41 = v9;
    v42 = 2048;
    v43 = v10;
    v44 = 2048;
    v45 = v11;
    v12 = "#sa_algo,Received range result at %f s, distance: %0.2f m, az: %3.2f rad, el: %3.2f rad";
    v13 = v6;
    v14 = 42;
  }
  else
  {
    if (!v7)
      goto LABEL_12;
    v19 = *(_QWORD *)(a2 + 8);
    v20 = *(float *)(a2 + 16);
    v38 = 134218240;
    v39 = v19;
    v40 = 2048;
    v41 = v20;
    v12 = "#sa_algo,Received range result at %f s, distance: %0.2f m";
    v13 = v6;
    v14 = 22;
  }
  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v38, v14);
LABEL_12:
  if (!*(_BYTE *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 16) = 1;
  }
  if (*(_BYTE *)(a1 + 3))
  {
    v21 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v38) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#sa_algo,Target is moving - passing range measurement to range filter without VIO", (uint8_t *)&v38, 2u);
    }
    sub_100309650(a1, a2);
    goto LABEL_29;
  }
  if (*(_DWORD *)(a1 + 504) == 2)
  {
    if (!*(_QWORD *)(a1 + 496))
    {
      v23 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v38) = 0;
        v24 = "#sa_algo,Pose history is empty - passing range measurement to range filter without VIO";
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    v22 = *(double *)(a2 + 8);
    if (v22 < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 464) + ((*(_QWORD *)(a1 + 488) >> 2) & 0x3FFFFFFFFFFFFFF8))
                         + ((*(_QWORD *)(a1 + 488) & 0x1FLL) << 7)))
    {
      v23 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v38) = 0;
        v24 = "#sa_algo,Measurement earlier than the first pose in history - passing range measurement to range filter without VIO";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v38, 2u);
        goto LABEL_28;
      }
      goto LABEL_28;
    }
    if (!*(_BYTE *)(a1 + 368))
    {
LABEL_39:
      v29 = *(_OWORD *)a2;
      v30 = *(_OWORD *)(a2 + 16);
      v31 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 232) = v31;
      *(_OWORD *)(a1 + 184) = v29;
      *(_OWORD *)(a1 + 200) = v30;
      v32 = *(_OWORD *)(a2 + 64);
      v33 = *(_OWORD *)(a2 + 80);
      v34 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 296) = v34;
      *(_OWORD *)(a1 + 248) = v32;
      *(_OWORD *)(a1 + 264) = v33;
      v35 = *(_OWORD *)(a2 + 128);
      v36 = *(_OWORD *)(a2 + 144);
      v37 = *(_OWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 328) = v36;
      *(_OWORD *)(a1 + 344) = v37;
      *(_OWORD *)(a1 + 312) = v35;
      *(_BYTE *)(a1 + 368) = 1;
      sub_10030AE00(a1, (float32x2_t *)a2, 1);
      sub_1003099CC(a1);
      sub_10030A038(a1);
      goto LABEL_29;
    }
    v26 = *(double *)(a1 + 192);
    v27 = qword_10085F520;
    v28 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
    if (v22 > v26)
    {
      if (v28)
      {
        LOWORD(v38) = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#sa_algo,Received a new measurement before the cached one can be interpolated - passing the cached measurement to the range filter without VIO", (uint8_t *)&v38, 2u);
        if (!*(_BYTE *)(a1 + 368))
          sub_10000BA44();
      }
      sub_100309650(a1, a1 + 184);
      if (*(_BYTE *)(a1 + 368))
        *(_BYTE *)(a1 + 368) = 0;
      goto LABEL_39;
    }
    if (!v28)
      return;
    LOWORD(v38) = 0;
    v16 = "#sa_algo,Measurement earlier than the cached measurement - rejecting range measurement";
    v17 = v27;
    v18 = 2;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v38, v18);
    return;
  }
  v23 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v38) = 0;
    v24 = "#sa_algo,VIO Tracking is not normal - passing range measurement to range filter without VIO";
    goto LABEL_27;
  }
LABEL_28:
  sub_100309650(a1, a2);
  sub_10030AE00(a1, (float32x2_t *)a2, 0);
LABEL_29:
  v25 = *(double *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 32) || *(double *)(a1 + 24) < v25)
  {
    *(double *)(a1 + 24) = v25;
    *(_BYTE *)(a1 + 32) = 1;
  }
}

void sub_10030AE00(uint64_t a1, float32x2_t *a2, int a3)
{
  double v3;

  if (a2[4].i8[4])
  {
    v3 = a2[2].f32[0];
    *(float32x2_t *)(a1 + 376) = a2[1];
    *(double *)(a1 + 384) = v3;
    *(float64x2_t *)(a1 + 392) = vcvtq_f64_f32(a2[3]);
    *(_DWORD *)(a1 + 408) = a3;
    *(_BYTE *)(a1 + 416) = 0;
    *(_BYTE *)(a1 + 440) = 0;
    *(_BYTE *)(a1 + 448) = 1;
    sub_10030C0DC(a1);
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    sub_1003EAC08();
  }
}

uint64_t sub_10030AE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  unsigned int v8;
  double v9;
  long double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  float v16;
  float v17;
  __int128 v18;
  NSObject *v19;
  uint64_t v20;
  float v21;
  double v22;
  double v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unsigned int i;
  double *v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __int128 v36;
  float v37;
  float v38;
  __int128 v39;
  NSObject *v40;
  NSObject *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  unint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  float v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  NSObject *v55;
  unsigned int v56;
  __int128 v57;
  int v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  NSObject *v65;
  int v68;
  float v69;
  NSObject *v70;
  float64x2_t v71;
  double v72;
  float v73;
  int v74;
  float v75;
  unsigned int v76;
  double v77;
  const char *v78;
  int v79;
  float64x2_t v80;
  float v81;
  float v82;
  float v83;
  __int128 v84;
  float v85;
  float v86;
  __int128 v87;
  float v88;
  float64x2_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t (**v92)();
  __int128 v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t (**v97)();
  __int128 v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  _BYTE v102[24];
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t (**v106)();
  __int128 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t (**v111)();
  __int128 v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t (**v116)();
  __int128 v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE v120[24];
  uint8_t v121[4];
  long double v122;
  _BYTE v123[10];
  __int16 v124;
  double v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  __int16 v130;
  double v131;
  uint8_t v132[32];
  _BYTE buf[24];
  uint64_t v134;
  _OWORD v135[154];

  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)(a1 + 128))
    {
      v4 = *(_QWORD *)(a1 + 85);
      *(_QWORD *)buf = *(_QWORD *)(a1 + 80);
      *(_QWORD *)&buf[5] = v4;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)&v135[0] = 0;
      *(double *)&v134 = 0.0;
      v5 = (uint64_t)sub_10030D950(&buf[16], *(const void **)(a1 + 96), *(_QWORD *)(a1 + 104), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3));
      *((_QWORD *)&v135[0] + 1) = *(_QWORD *)(a1 + 120);
      switch(*(_DWORD *)buf)
      {
        case 0:
        case 1:
        case 6:
          *(_DWORD *)a2 = 0;
          v6 = 1;
          goto LABEL_7;
        case 2:
        case 3:
          *(_DWORD *)a2 = 0;
          v6 = 256;
LABEL_7:
          *(_DWORD *)(a2 + 4) = v6;
          goto LABEL_8;
        case 4:
          *(_QWORD *)a2 = 0;
          goto LABEL_8;
        case 5:
          *(_OWORD *)v102 = **(_OWORD **)&buf[16];
          *(_QWORD *)&v102[16] = *(_QWORD *)(*(_QWORD *)&buf[16] + 16);
          v116 = 0;
          *(_QWORD *)&v117 = 0;
          DWORD2(v117) = 0;
          v45 = *(_QWORD *)(a1 + 496) + *(_QWORD *)(a1 + 488) - 1;
          sub_10030BEDC((float64x2_t *)v102, (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 464) + ((v45 >> 2) & 0x3FFFFFFFFFFFFFF8))+ ((v45 & 0x1F) << 7)), (uint64_t)&v116);
          v46 = qword_10085F520;
          v5 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)v5)
          {
            if (!*(_BYTE *)(a1 + 32))
              sub_10000BA44();
            sub_1003EAE8C(a1, (float *)&v116, v132, v46);
          }
          if (!*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 32))
            sub_10000BA44();
          v47 = *(_QWORD *)(a1 + 8);
          v48 = *(_QWORD *)(a1 + 24);
          v49 = (int)v116;
          if (*(_BYTE *)(a2 + 192))
            *(_BYTE *)(a2 + 192) = 0;
          *(_QWORD *)(a2 + 8) = v47;
          *(_QWORD *)(a2 + 16) = v48;
          *(_DWORD *)(a2 + 24) = v49;
          *(_DWORD *)(a2 + 28) = 1;
          *(_BYTE *)(a2 + 56) = 0;
          *(_QWORD *)(a2 + 32) = 0;
          *(_QWORD *)(a2 + 40) = 0;
          *(_BYTE *)(a2 + 60) = 0;
          *(_BYTE *)(a2 + 64) = 0;
          *(_BYTE *)(a2 + 68) = 0;
          *(_QWORD *)(a2 + 72) = 0;
          *(_QWORD *)(a2 + 80) = 0;
          *(_WORD *)(a2 + 88) = 0;
          *(_OWORD *)(a2 + 96) = 0u;
          *(_OWORD *)(a2 + 112) = 0u;
          *(_QWORD *)(a2 + 128) = 0x200000000;
          *(_BYTE *)(a2 + 136) = 0;
          *(_BYTE *)(a2 + 160) = 0;
          *(_QWORD *)(a2 + 168) = 0;
          *(_QWORD *)(a2 + 176) = 0;
          *(_QWORD *)(a2 + 184) = 0;
          *(_BYTE *)(a2 + 192) = 1;
          v50 = *(float *)&v117;
          if (!*(_BYTE *)(a2 + 224))
            *(_BYTE *)(a2 + 224) = 1;
          *(double *)(a2 + 216) = v50;
          if (BYTE8(v117))
          {
            *(double *)(a2 + 200) = *((float *)&v116 + 1) * 180.0 / 3.14159265;
            *(_BYTE *)(a2 + 208) = 1;
            *(_DWORD *)(a2 + 364) = 2;
            *(_BYTE *)(a2 + 368) = 1;
            v5 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
            if ((_DWORD)v5)
              sub_1003EAE28();
          }
          if (!*(_BYTE *)(a1 + 128))
            sub_10000BA44();
          v51 = *(_DWORD *)(a1 + 88);
          if (v51 == 2)
          {
            *(_DWORD *)a2 = 1;
            v69 = *((float *)&v117 + 1);
            if (!*(_BYTE *)(a2 + 248))
              *(_BYTE *)(a2 + 248) = 1;
            *(double *)(a2 + 240) = v69;
            v70 = qword_10085F520;
            v5 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
            if ((v5 & 1) != 0)
            {
              v77 = *(double *)&v102[16];
              *(_DWORD *)v121 = 134218496;
              v89 = *(float64x2_t *)v102;
              v122 = *(double *)v102;
              *(_WORD *)v123 = 2048;
              *(_QWORD *)((unint64_t)v121 | 0xE) = *(_QWORD *)&v102[8];
              v124 = 2048;
              v125 = v77;
              _os_log_debug_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "#sa_algo,Populating world position output with SA, object position is [%4.2f, %4.2f, %4.2f] m", v121, 0x20u);
              v71 = v89;
              v72 = v77;
            }
            else
            {
              v71 = *(float64x2_t *)v102;
              v72 = *(double *)&v102[16];
            }
            *(float32x2_t *)&v71.f64[0] = vcvt_f32_f64(v71);
            v73 = v72;
            *(float *)&v71.f64[1] = v73;
            if (!*(_BYTE *)(a2 + 304))
              *(_BYTE *)(a2 + 304) = 1;
            *(float64x2_t *)(a2 + 288) = v71;
            if (v69 >= 2.5)
            {
              v74 = 2;
            }
            else if (v69 <= -2.5)
            {
              v74 = 3;
            }
            else
            {
              v74 = 1;
            }
            *(_DWORD *)(a2 + 232) = v74;
          }
          else
          {
            if (v51 == 1)
            {
              if (*((float *)&v117 + 1) > -2.5 && *((float *)&v117 + 1) < 2.5)
                v68 = 1;
              else
                v68 = 4;
              *(_DWORD *)(a2 + 232) = v68;
              *(_DWORD *)a2 = 0;
            }
            else
            {
              if (v51)
                goto LABEL_8;
              *(_DWORD *)a2 = 0;
              *(_DWORD *)(a2 + 232) = 0;
            }
            *(_BYTE *)(a2 + 6) = 1;
          }
LABEL_8:
          if (!*(_BYTE *)(a1 + 32))
            sub_10000BA44();
          sub_10030BFA8(v5, (_DWORD *)(a2 + 232));
          if (*(_QWORD *)&buf[16])
          {
            v134 = *(uint64_t *)&buf[16];
            operator delete(*(void **)&buf[16]);
          }
          break;
        default:
          goto LABEL_8;
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  if (!*(_BYTE *)(a1 + 448))
    goto LABEL_87;
  v7 = *(double *)(a1 + 376);
  v8 = *(_DWORD *)(a1 + 408);
  if (v8 >= 2)
  {
    if (v8 != 2)
      goto LABEL_87;
    if (!*(_BYTE *)(a1 + 32))
      sub_10000BA44();
    v22 = *(double *)(a1 + 24);
    if (v22 - v7 >= 10.0)
    {
      v41 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v7;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v22;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#sa_algo,Not populating direction or range output from AoA meas with VIO, measurement time %f s is too stale compared to current time %f s", buf, 0x16u);
        v41 = qword_10085F520;
      }
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        goto LABEL_51;
      if (!*(_BYTE *)(a1 + 32))
        sub_10000BA44();
      v44 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v44;
      v43 = "#sa_algo,Removing AoA measurement from cache, measurement time %f s is too stale compared to current time %f"
            " s and measurement is not usable anymore";
      goto LABEL_50;
    }
    v80 = *(float64x2_t *)(a1 + 416);
    v23 = *(double *)(a1 + 432);
    v24 = *(unsigned __int8 *)(a1 + 440);
    v25 = *(_QWORD *)(a1 + 496) + *(_QWORD *)(a1 + 488) - 1;
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 464) + ((v25 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v25 & 0x1F) << 7);
    v84 = *(_OWORD *)(v26 + 64);
    *(double *)&v27 = sub_10030C298(*(int8x16_t *)(v26 + 16), *(int8x16_t *)(v26 + 32), *(__n128 *)(v26 + 48));
    v87 = v27;
    v108 = 0x100000003;
    v106 = off_1008156E8;
    v107 = xmmword_100478880;
    v109 = &v110;
    sub_10030DD0C(&v106, 3, 1);
    sub_10030DD58((uint64_t)&v106, 0.0);
    v103 = 0x100000004;
    *(_QWORD *)v102 = off_100815778;
    *(_OWORD *)&v102[8] = xmmword_100478890;
    v104 = &v105;
    sub_10030DD0C(v102, 4, 1);
    sub_10030DD58((uint64_t)v102, 0.0);
    for (i = 0; i != 3; ++i)
    {
      v29 = (double *)sub_10030E194((uint64_t)&v106, i);
      v91 = v84;
      *v29 = *(float *)((unint64_t)&v91 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
      v30 = (double *)sub_10030E194((uint64_t)v102, i);
      v90 = v87;
      *v30 = *(float *)((unint64_t)&v90 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
    }
    *(double *)sub_10030E194((uint64_t)v102, 3u) = *((float *)&v87 + 3);
    sub_100359F98((uint64_t)v102, (uint64_t)v121);
    if (!v24)
      sub_10000BA44();
    v99 = 0x100000003;
    v97 = off_1008156E8;
    v98 = xmmword_100478880;
    v100 = &v101;
    sub_10030DD0C(&v97, 3, 1);
    sub_10030DD58((uint64_t)&v97, 0.0);
    *(float64_t *)sub_10030E194((uint64_t)&v97, 0) = v80.f64[0];
    *(float64_t *)sub_10030E194((uint64_t)&v97, 1u) = v80.f64[1];
    *(double *)sub_10030E194((uint64_t)&v97, 2u) = v23;
    v134 = 0x300000003;
    *(_QWORD *)&v135[0] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = off_100815730;
    if (*(_DWORD *)v123 > 3u)
    {
      v78 = "this->max_num_rows_ >= num_rows";
      v79 = 422;
    }
    else
    {
      if (HIDWORD(v122) < 4)
      {
        *(_DWORD *)&buf[8] = *(_DWORD *)v123;
        *(_DWORD *)&buf[12] = HIDWORD(v122);
        *(_DWORD *)&buf[16] = HIDWORD(v122) * *(_DWORD *)v123;
        *(_DWORD *)&buf[20] = *(_DWORD *)v123;
        *(_QWORD *)&v135[0] = (char *)v135 + 8;
        sub_10030E1CC((uint64_t)v121, buf);
        v118 = 0x100000003;
        v116 = off_1008156E8;
        v117 = xmmword_100478880;
        v119 = v120;
        sub_10030E2B4((uint64_t)&v97, (uint64_t)&v106, (uint64_t)&v116);
        v94 = 0x100000003;
        v92 = off_1008156E8;
        v93 = xmmword_100478880;
        v95 = &v96;
        sub_10030E3B0((uint64_t)buf, (uint64_t)&v116, (uint64_t)&v92);
        v118 = 0x100000003;
        v116 = off_1008156E8;
        v117 = xmmword_100478880;
        v119 = v120;
        v134 = 0x100000134;
        *(_QWORD *)buf = off_1008157C0;
        *(_OWORD *)&buf[8] = xmmword_1004788A0;
        *(_QWORD *)&v135[0] = (char *)v135 + 8;
        v113 = 0x100000003;
        v111 = off_1008156E8;
        v112 = xmmword_100478880;
        v114 = &v115;
        sub_10030E510((uint64_t)&v92, (uint64_t)&v116, (uint64_t)buf, (uint64_t)&v111, "2");
        v32 = v31;
        if (v31 <= 0.001)
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            sub_1003EADC4();
        }
        else
        {
          v33 = sub_10027C1A4((uint64_t)&v92, 0);
          v34 = sub_10027C1A4((uint64_t)&v92, 1u);
          v35 = sub_10027C1A4((uint64_t)&v92, 2u);
          *(float *)&v36 = v33 / v32;
          v37 = v34 / v32;
          v38 = v35 / v32;
          v85 = v38;
          v88 = *(float *)&v36;
          v39 = v36;
          v82 = v37;
          *((float *)&v39 + 1) = v37;
          *((float *)&v39 + 2) = v38;
          if (!*(_BYTE *)(a2 + 272))
            *(_BYTE *)(a2 + 272) = 1;
          *(_OWORD *)(a2 + 256) = v39;
          v40 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134218752;
            *(double *)&buf[4] = v7;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v88;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&v134 = v82;
            LOWORD(v135[0]) = 2048;
            *(double *)((char *)v135 + 2) = v85;
            _os_log_debug_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#sa_algo,Populating direction output from AoA meas with VIO, timestamp: %f s, direction [%4.3f, %4.3f, %4.3f]", buf, 0x2Au);
          }
        }
        if (!*(_BYTE *)(a2 + 192))
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            sub_1003EAD60();
          if (!*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 32))
            sub_10000BA44();
          v52 = *(_QWORD *)(a1 + 8);
          v53 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(a2 + 192))
            *(_BYTE *)(a2 + 192) = 0;
          *(_QWORD *)(a2 + 8) = v52;
          *(_QWORD *)(a2 + 16) = v53;
          v54 = v32;
          *(float *)(a2 + 24) = v54;
          *(_DWORD *)(a2 + 28) = 1;
          *(_BYTE *)(a2 + 56) = 0;
          *(_QWORD *)(a2 + 32) = 0;
          *(_QWORD *)(a2 + 40) = 0;
          *(_BYTE *)(a2 + 60) = 0;
          *(_BYTE *)(a2 + 64) = 0;
          *(_BYTE *)(a2 + 68) = 0;
          *(_QWORD *)(a2 + 72) = 0;
          *(_QWORD *)(a2 + 80) = 0;
          *(_WORD *)(a2 + 88) = 0;
          *(_OWORD *)(a2 + 96) = 0u;
          *(_OWORD *)(a2 + 112) = 0u;
          *(_QWORD *)(a2 + 128) = 0x200000000;
          *(_BYTE *)(a2 + 136) = 0;
          *(_BYTE *)(a2 + 160) = 0;
          *(_QWORD *)(a2 + 168) = 0;
          *(_QWORD *)(a2 + 176) = 0;
          *(_QWORD *)(a2 + 184) = 0;
          *(_BYTE *)(a2 + 192) = 1;
        }
        if (*(_BYTE *)(a2 + 304))
          goto LABEL_87;
        v55 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218496;
          *(float64_t *)&buf[4] = v80.f64[0];
          *(_WORD *)&buf[12] = 2048;
          *(float64_t *)&buf[14] = v80.f64[1];
          *(_WORD *)&buf[22] = 2048;
          *(double *)&v134 = v23;
          _os_log_debug_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "#sa_algo,Populating world position output from AoA meas with VIO, object position is [%4.2f, %4.2f, %4.2f] m", buf, 0x20u);
          *(float *)&v57 = v80.f64[0];
          v75 = v80.f64[1];
          *(float *)&v76 = v23;
          *((float *)&v57 + 1) = v75;
          *((_QWORD *)&v57 + 1) = __PAIR64__(HIDWORD(v80.f64[1]), v76);
          if (*(_BYTE *)(a2 + 304))
            goto LABEL_86;
        }
        else
        {
          *(float32x2_t *)&v57 = vcvt_f32_f64(v80);
          *(float *)&v56 = v23;
          *((_QWORD *)&v57 + 1) = __PAIR64__(HIDWORD(v80.f64[1]), v56);
        }
        *(_BYTE *)(a2 + 304) = 1;
LABEL_86:
        *(_OWORD *)(a2 + 288) = v57;
        goto LABEL_87;
      }
      v78 = "this->max_num_cols_ >= num_cols";
      v79 = 423;
    }
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v79, v78);
  }
  if (!*(_BYTE *)(a1 + 32))
    sub_10000BA44();
  if (*(double *)(a1 + 24) - v7 < *(double *)(a1 + 552))
  {
    v9 = *(double *)(a1 + 384);
    v10 = *(double *)(a1 + 392);
    v11 = *(double *)(a1 + 400);
    sub_100359EB8((uint64_t)buf, 1.0, v10, v11);
    v12 = sub_10027C1A4((uint64_t)buf, 0);
    v13 = sub_10027C1A4((uint64_t)buf, 1u);
    v14 = sub_10027C1A4((uint64_t)buf, 2u);
    *(float *)&v15 = v12;
    v16 = v13;
    v17 = v14;
    v81 = v16;
    v83 = *(float *)&v15;
    v18 = v15;
    *((float *)&v18 + 1) = v16;
    v86 = v17;
    *((float *)&v18 + 2) = v17;
    if (!*(_BYTE *)(a2 + 272))
      *(_BYTE *)(a2 + 272) = 1;
    *(_OWORD *)(a2 + 256) = v18;
    v19 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v121 = 134219264;
      v122 = v10 * 180.0 / 3.14159265;
      *(_WORD *)v123 = 2048;
      *(double *)&v123[2] = v11 * 180.0 / 3.14159265;
      v124 = 2048;
      v125 = v7;
      v126 = 2048;
      v127 = v83;
      v128 = 2048;
      v129 = v81;
      v130 = 2048;
      v131 = v86;
      _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#sa_algo,Populating direction output from AoA meas without VIO, az %f deg, el %f deg, timestamp: %f s, direction [%4.3f, %4.3f, %4.3f]", v121, 0x3Eu);
    }
    if (!*(_BYTE *)(a2 + 192))
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EAC98();
      if (!*(_BYTE *)(a1 + 16))
        sub_10000BA44();
      v20 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(a2 + 192))
        *(_BYTE *)(a2 + 192) = 0;
      *(_QWORD *)(a2 + 8) = v20;
      *(double *)(a2 + 16) = v7;
      v21 = v9;
      *(float *)(a2 + 24) = v21;
      *(_DWORD *)(a2 + 28) = 1;
      *(_BYTE *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 60) = 0;
      *(_BYTE *)(a2 + 64) = 0;
      *(_BYTE *)(a2 + 68) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_WORD *)(a2 + 88) = 0;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_QWORD *)(a2 + 128) = 0x200000000;
      *(_BYTE *)(a2 + 136) = 0;
      *(_BYTE *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_QWORD *)(a2 + 176) = 0;
      *(_QWORD *)(a2 + 184) = 0;
      *(_BYTE *)(a2 + 192) = 1;
    }
    goto LABEL_87;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EACFC();
  if (!v8)
  {
    v41 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
LABEL_51:
      if (*(_BYTE *)(a1 + 448))
        *(_BYTE *)(a1 + 448) = 0;
      sub_10030C0DC(a1);
      goto LABEL_87;
    }
    if (!*(_BYTE *)(a1 + 32))
      sub_10000BA44();
    v42 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v42;
    v43 = "#sa_algo,Removing AoA measurement from cache, measurement time %f s is too stale compared to current time %f s"
          " and measurement can't be interpolated anymore.";
LABEL_50:
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, v43, buf, 0x16u);
    goto LABEL_51;
  }
LABEL_87:
  v58 = *(unsigned __int8 *)(a2 + 192);
  if (*(_BYTE *)(a1 + 1))
  {
    if (*(_BYTE *)(a2 + 192))
    {
      v58 = 1;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 176))
        return sub_10030C49C(a1, a2);
      if (!*(_BYTE *)(a1 + 32))
        sub_10000BA44();
      v59 = *(double *)(a1 + 168);
      v60 = *(double *)(a1 + 24);
      if (v60 - v59 >= *(double *)(a1 + 552))
      {
        v65 = qword_10085F520;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          return sub_10030C49C(a1, a2);
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v59;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v60;
        _os_log_debug_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "#sa_algo,Not populating range output with range filter, filter time %f s is too stale compared to current time %f s", buf, 0x16u);
        v58 = *(unsigned __int8 *)(a2 + 192);
      }
      else
      {
        v61 = *(double *)(a1 + 152);
        *(_DWORD *)(a2 + 364) = 3;
        *(_BYTE *)(a2 + 368) = 1;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003EAC34();
        if (!*(_BYTE *)(a1 + 16))
          sub_10000BA44();
        if (!*(_BYTE *)(a1 + 32))
          sub_10000BA44();
        v62 = *(_QWORD *)(a1 + 8);
        v63 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(a2 + 192))
          *(_BYTE *)(a2 + 192) = 0;
        *(_QWORD *)(a2 + 8) = v62;
        *(_QWORD *)(a2 + 16) = v63;
        v64 = v61;
        *(float *)(a2 + 24) = v64;
        v58 = 1;
        *(_DWORD *)(a2 + 28) = 1;
        *(_BYTE *)(a2 + 56) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 40) = 0;
        *(_BYTE *)(a2 + 60) = 0;
        *(_BYTE *)(a2 + 64) = 0;
        *(_BYTE *)(a2 + 68) = 0;
        *(_QWORD *)(a2 + 72) = 0;
        *(_QWORD *)(a2 + 80) = 0;
        *(_WORD *)(a2 + 88) = 0;
        *(_OWORD *)(a2 + 96) = 0u;
        *(_OWORD *)(a2 + 112) = 0u;
        *(_QWORD *)(a2 + 128) = 0x200000000;
        *(_BYTE *)(a2 + 136) = 0;
        *(_BYTE *)(a2 + 160) = 0;
        *(_QWORD *)(a2 + 168) = 0;
        *(_QWORD *)(a2 + 176) = 0;
        *(_QWORD *)(a2 + 184) = 0;
        *(_BYTE *)(a2 + 192) = 1;
      }
    }
  }
  if (v58 && !*(_DWORD *)a2 && *(_DWORD *)(a1 + 504) != 2 && *(_BYTE *)(a1 + 520) && *(double *)(a1 + 512) < 500.0)
    *(_BYTE *)(a2 + 7) = 1;
  return sub_10030C49C(a1, a2);
}

void sub_10030BE6C(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_10030BEDC(float64x2_t *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float32_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;

  v7 = *(float32x4_t *)a1;
  *(float32x2_t *)v7.f32 = vcvt_f32_f64(*a1);
  v4 = a1[1].f64[0];
  v7.f32[2] = v4;
  v5 = vsubq_f32(v7, a2[4]);
  v6 = vmulq_f32(v5, v5);
  v7.f32[0] = sqrtf(v6.f32[2] + v6.f32[0]);
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)a3 = sqrtf(v6.f32[2] + vaddv_f32(*(float32x2_t *)v6.f32));
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 12) = v5.i32[1];
  *(_DWORD *)(a3 + 8) = v7.i32[0];
  *(_BYTE *)(a3 + 16) = 1;
  if (v7.f32[0] <= 0.01)
  {
    *(_BYTE *)(a3 + 16) = 0;
  }
  else
  {
    v8.i32[0] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u32[0];
    v8.i32[1] = v5.i32[0];
    v12 = vdiv_f32(v8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0));
    v9 = (float32x2_t)sub_10030D5BC(a2);
    v11 = vmla_lane_f32(vmul_n_f32(v9, v12.f32[0]), v10, v12, 1);
    *(float *)(a3 + 4) = atan2f(v11.f32[1], v11.f32[0]);
  }
}

void sub_10030BFA8(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EAEEC();
      break;
    case 1:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EAF50();
      break;
    case 2:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EAFB4();
      break;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EB018();
      break;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EB07C();
      break;
    default:
      return;
  }
}

_QWORD *sub_10030C0CC(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_10030C0DC(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 448))
  {
    v2 = *(_DWORD *)(a1 + 408);
    v4 = *(_QWORD *)(a1 + 416);
    v3 = *(_QWORD *)(a1 + 424);
    v5 = *(_QWORD *)(a1 + 432);
    v6 = *(unsigned __int8 *)(a1 + 440);
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003EB1BC((_QWORD *)a1, v7);
    if (v2 == 2)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EB190();
    }
    else if (v2 == 1)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EB164();
    }
    else if (!v2 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      sub_1003EB138();
    }
    v8 = qword_10085F520;
    v9 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      if (v9)
      {
        v10 = 134218496;
        v11 = v4;
        v12 = 2048;
        v13 = v3;
        v14 = 2048;
        v15 = v5;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#sa_algo,AoA cache: world position [%3.2f, %3.2f, %3.2f] m", (uint8_t *)&v10, 0x20u);
      }
    }
    else if (v9)
    {
      sub_1003EB10C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    sub_1003EB0E0();
  }
}

double sub_10030C298(int8x16_t a1, int8x16_t a2, __n128 a3)
{
  float v3;
  float v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  unsigned __int32 v19;
  float32x2_t v24;
  float v25;
  unsigned int v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;

  v3 = a3.n128_f32[2] + (float)(*(float *)a1.i32 + *(float *)&a2.i32[1]);
  if (v3 >= 0.0)
  {
    v12 = sqrtf(v3 + 1.0);
    v13 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12));
    v14 = vmul_f32(v13, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12), v13));
    v24 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), (int32x2_t)a3.n128_u64[0]), (float32x2_t)vext_s8((int8x8_t)a3.n128_u64[0], (int8x8_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), 4uLL)), vmul_f32(v14, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12), v14)).f32[0]);
  }
  else if (*(float *)a1.i32 < *(float *)&a2.i32[1] || *(float *)a1.i32 < a3.n128_f32[2])
  {
    v5 = 1.0 - *(float *)a1.i32;
    if (*(float *)&a2.i32[1] >= a3.n128_f32[2])
    {
      v25 = sqrtf(*(float *)&a2.i32[1] + (float)(v5 - a3.n128_f32[2]));
      *(float *)&v26 = v25 + v25;
      v27 = vrecpe_f32((float32x2_t)v26);
      v28 = vmul_f32(v27, vrecps_f32((float32x2_t)v26, v27));
      v29.i32[0] = vmul_f32(v28, vrecps_f32((float32x2_t)v26, v28)).u32[0];
      v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.i8, 1), *(float32x2_t *)a2.i8).u32[0];
      v28.i32[1] = v26;
      v29.i32[1] = 0.25;
      v24 = vmul_f32(v28, v29);
    }
    else
    {
      v6 = (float32x2_t)__PAIR64__(a1.u32[1], COERCE_UNSIGNED_INT(sqrtf(a3.n128_f32[2] + (float)(v5 - *(float *)&a2.i32[1]))));
      v7 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL)), (float32x2_t)a3.n128_u64[0]);
      v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.i8, 0);
      v8.i32[0] = 2.0;
      v8.i32[0] = vmul_f32(v6, v8).u32[0];
      v9 = vrecpe_f32((float32x2_t)v8.u32[0]);
      v10 = vmul_f32(v9, vrecps_f32((float32x2_t)v8.u32[0], v9));
      v24 = vmul_n_f32(v7, vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.i8, 0);
    v16 = vadd_f32(*(float32x2_t *)a1.i8, v15);
    v15.i32[0] = 2.0;
    v15.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)a1.i32 + (float)((float)(1.0 - *(float *)&a2.i32[1])- a3.n128_f32[2])))), v15).u32[0];
    v15.i32[1] = v16.i32[1];
    v17 = vrecpe_f32((float32x2_t)v15.u32[0]);
    v18 = vmul_f32(v17, vrecps_f32((float32x2_t)v15.u32[0], v17));
    v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v15.u32[0], v18)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v19;
    v24 = vmul_f32(v15, _D5);
  }
  return *(double *)&v24;
}

_QWORD *sub_10030C47C(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_10030C48C(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

uint64_t sub_10030C49C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  uint64_t v13;
  uint64_t *v14;
  const char *v15;
  uint64_t v16;
  uint64_t *v17;
  const char *v18;
  uint64_t v19;
  uint64_t *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  const char *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *p_p;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *__p;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  uint64_t v70;
  _QWORD v71[10];
  char v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[10];
  char v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[10];
  char v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[10];
  char v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[10];
  char v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[10];
  char v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[10];
  char v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[10];
  char v100;
  uint64_t v101;
  uint8_t buf[4];
  void *v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  void *v117;
  __int16 v118;
  void *v119;
  __int16 v120;
  void *v121;
  __int16 v122;
  void *v123;
  __int16 v124;
  void *v125;
  __int16 v126;
  void *v127;
  __int16 v128;
  void *v129;

  if (!*(_BYTE *)(result + 32))
    return result;
  v3 = result;
  v4 = *(double *)(result + 24);
  if (*(_BYTE *)(result + 64))
  {
    if (v4 - *(double *)(result + 56) < 0.2)
      return result;
  }
  *(double *)(result + 56) = v4;
  *(_BYTE *)(result + 64) = 1;
  sub_100210A10((uint64_t)&v98);
  sub_100210A10((uint64_t)&v94);
  sub_100210A10((uint64_t)&v90);
  sub_100210A10((uint64_t)&v86);
  sub_100210A10((uint64_t)&v82);
  sub_100210A10((uint64_t)&v78);
  sub_100210A10((uint64_t)&v74);
  sub_100210A10((uint64_t)&v70);
  v5 = v94;
  *(_DWORD *)((char *)v95 + *(_QWORD *)(v94 - 24)) = *(_DWORD *)((_BYTE *)v95 + *(_QWORD *)(v94 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v95[1] + *(_QWORD *)(v5 - 24)) = 2;
  v6 = v90;
  *(_DWORD *)((char *)v91 + *(_QWORD *)(v90 - 24)) = *(_DWORD *)((_BYTE *)v91 + *(_QWORD *)(v90 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v91[1] + *(_QWORD *)(v6 - 24)) = 1;
  v7 = v86;
  *(_DWORD *)((char *)v87 + *(_QWORD *)(v86 - 24)) = *(_DWORD *)((_BYTE *)v87 + *(_QWORD *)(v86 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v87[1] + *(_QWORD *)(v7 - 24)) = 2;
  v8 = v78;
  *(_DWORD *)((char *)v79 + *(_QWORD *)(v78 - 24)) = *(_DWORD *)((_BYTE *)v79 + *(_QWORD *)(v78 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v79[1] + *(_QWORD *)(v8 - 24)) = 2;
  v9 = v74;
  *(_DWORD *)((char *)v75 + *(_QWORD *)(v74 - 24)) = *(_DWORD *)((_BYTE *)v75 + *(_QWORD *)(v74 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v75[1] + *(_QWORD *)(v9 - 24)) = 2;
  v10 = v70;
  *(_DWORD *)((char *)v71 + *(_QWORD *)(v70 - 24)) = *(_DWORD *)((_BYTE *)v71 + *(_QWORD *)(v70 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v71[1] + *(_QWORD *)(v10 - 24)) = 2;
  if (*(_BYTE *)(a2 + 192))
  {
    std::ostream::operator<<(&v98, *(_QWORD *)(a2 + 8));
    if (!*(_BYTE *)(a2 + 192))
      goto LABEL_104;
    v11 = (uint64_t *)std::ostream::operator<<(*(float *)(a2 + 24));
    v12 = " m";
    v13 = 2;
  }
  else
  {
    v12 = "-";
    v13 = 1;
    sub_100054C60(&v98, (uint64_t)"-", 1);
    v11 = &v94;
  }
  sub_100054C60(v11, (uint64_t)v12, v13);
  if (*(_BYTE *)(a2 + 208))
  {
    v14 = (uint64_t *)std::ostream::operator<<(&v90);
    v15 = " deg";
    v16 = 4;
  }
  else
  {
    v15 = "-";
    v14 = &v90;
    v16 = 1;
  }
  sub_100054C60(v14, (uint64_t)v15, v16);
  if (*(_BYTE *)(a2 + 224))
  {
    v17 = (uint64_t *)std::ostream::operator<<(&v86);
    v18 = " m";
    v19 = 2;
  }
  else
  {
    v18 = "-";
    v17 = &v86;
    v19 = 1;
  }
  sub_100054C60(v17, (uint64_t)v18, v19);
  if (*(_BYTE *)(a2 + 248))
  {
    v20 = (uint64_t *)std::ostream::operator<<(&v78);
    v21 = " m";
    v22 = 2;
  }
  else
  {
    v21 = "-";
    v20 = &v78;
    v22 = 1;
  }
  sub_100054C60(v20, (uint64_t)v21, v22);
  v23 = *(int *)(a2 + 232);
  if (v23 <= 4)
    sub_100054C60(&v82, (uint64_t)off_100815810[v23], qword_100478958[v23]);
  if (*(_BYTE *)(a2 + 272))
  {
    sub_100054C60(&v74, (uint64_t)"[", 1);
    if (!*(_BYTE *)(a2 + 272))
      goto LABEL_104;
    v24 = (_QWORD *)std::ostream::operator<<(*(float *)(a2 + 256));
    sub_100054C60(v24, (uint64_t)", ", 2);
    if (!*(_BYTE *)(a2 + 272))
      goto LABEL_104;
    v25 = (_QWORD *)std::ostream::operator<<(*(float *)(a2 + 260));
    sub_100054C60(v25, (uint64_t)", ", 2);
    if (!*(_BYTE *)(a2 + 272))
      goto LABEL_104;
    v26 = (uint64_t *)std::ostream::operator<<(*(float *)(a2 + 264));
    v27 = "]";
  }
  else
  {
    v27 = "-";
    v26 = &v74;
  }
  sub_100054C60(v26, (uint64_t)v27, 1);
  if (!*(_BYTE *)(a2 + 304))
  {
    v31 = "-";
    v30 = &v70;
    v32 = 1;
    goto LABEL_31;
  }
  sub_100054C60(&v70, (uint64_t)"[", 1);
  if (!*(_BYTE *)(a2 + 304)
    || (v28 = (_QWORD *)std::ostream::operator<<(*(float *)(a2 + 288)),
        sub_100054C60(v28, (uint64_t)", ", 2),
        !*(_BYTE *)(a2 + 304))
    || (v29 = (_QWORD *)std::ostream::operator<<(*(float *)(a2 + 292)),
        sub_100054C60(v29, (uint64_t)", ", 2),
        !*(_BYTE *)(a2 + 304)))
  {
LABEL_104:
    sub_10000BA44();
  }
  v30 = (uint64_t *)std::ostream::operator<<(*(float *)(a2 + 296));
  v31 = "] m";
  v32 = 3;
LABEL_31:
  sub_100054C60(v30, (uint64_t)v31, v32);
  v33 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str(v99);
    if (v69 >= 0)
      v34 = &v68;
    else
      v34 = v68;
    if (!*(_BYTE *)(v3 + 32))
      sub_10000BA44();
    v35 = *(_QWORD *)(v3 + 24);
    if (*(_DWORD *)a2 == 1)
      v36 = "YES";
    else
      v36 = "NO";
    if (*(_BYTE *)(a2 + 4))
      v37 = "YES";
    else
      v37 = "NO";
    if (*(_BYTE *)(a2 + 5))
      v38 = "YES";
    else
      v38 = "NO";
    if (*(_BYTE *)(a2 + 6))
      v39 = "YES";
    else
      v39 = "NO";
    if (*(_BYTE *)(a2 + 7))
      v40 = "YES";
    else
      v40 = "NO";
    std::stringbuf::str(v95);
    if (v67 >= 0)
      v41 = &v66;
    else
      v41 = v66;
    std::stringbuf::str(v91);
    if (v65 >= 0)
      v42 = &v64;
    else
      v42 = v64;
    v53 = v42;
    std::stringbuf::str(v87);
    if (v63 >= 0)
      v43 = &v62;
    else
      v43 = v62;
    v51 = v33;
    v52 = v43;
    std::stringbuf::str(v79);
    v50 = v39;
    if (v61 >= 0)
      v44 = &v60;
    else
      v44 = v60;
    v45 = &v58;
    std::stringbuf::str(v83);
    if (v59 < 0)
      v45 = v58;
    std::stringbuf::str(v75);
    std::stringbuf::str(v71);
    v46 = &v56;
    if (v57 < 0)
      v46 = v56;
    if (v55 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136318466;
    v103 = v34;
    v104 = 2048;
    v105 = v35;
    v106 = 2080;
    v107 = v36;
    v108 = 2080;
    v109 = v37;
    v110 = 2080;
    v111 = v38;
    v112 = 2080;
    v113 = v50;
    v114 = 2080;
    v115 = v40;
    v116 = 2080;
    v117 = v41;
    v118 = 2080;
    v119 = v53;
    v120 = 2080;
    v121 = v52;
    v122 = 2080;
    v123 = v44;
    v124 = 2080;
    v125 = v45;
    v126 = 2080;
    v127 = v46;
    v128 = 2080;
    v129 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#sa_algo,DeviceID: %s\n\tTimestamp: %f\n\tSolution convergence: %s, insufficientDisplacement: %s, insufficientHorizontalPositionDiversity: %s, insufficientVerticalPositionDiversity: %s, insufficientLighting: %s\n\tRange: %s, Horizontal angle: %s, Horizontal distance: %s, Vertical distance: %s, Vertical state: %s, Direction: %s, World Position: %s", buf, 0x8Eu);
    if (v55 < 0)
      operator delete(__p);
    if (v57 < 0)
      operator delete(v56);
    if (v59 < 0)
      operator delete(v58);
    if (v61 < 0)
      operator delete(v60);
    if (v63 < 0)
      operator delete(v62);
    if (v65 < 0)
      operator delete(v64);
    if (v67 < 0)
      operator delete(v66);
    if (v69 < 0)
      operator delete(v68);
  }
  if (v72 < 0)
    operator delete((void *)v71[8]);
  std::streambuf::~streambuf(v71);
  std::ios::~ios(&v73);
  v74 = v48;
  *(_QWORD *)((char *)&v75[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v76 < 0)
    operator delete((void *)v75[8]);
  std::streambuf::~streambuf(v75);
  std::ios::~ios(&v77);
  v78 = v48;
  *(_QWORD *)((char *)&v79[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v80 < 0)
    operator delete((void *)v79[8]);
  std::streambuf::~streambuf(v79);
  std::ios::~ios(&v81);
  v82 = v48;
  *(_QWORD *)((char *)&v83[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v84 < 0)
    operator delete((void *)v83[8]);
  std::streambuf::~streambuf(v83);
  std::ios::~ios(&v85);
  v86 = v48;
  *(_QWORD *)((char *)&v87[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v88 < 0)
    operator delete((void *)v87[8]);
  std::streambuf::~streambuf(v87);
  std::ios::~ios(&v89);
  v90 = v48;
  *(_QWORD *)((char *)&v91[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v92 < 0)
    operator delete((void *)v91[8]);
  std::streambuf::~streambuf(v91);
  std::ios::~ios(&v93);
  v94 = v48;
  *(_QWORD *)((char *)&v95[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v96 < 0)
    operator delete((void *)v95[8]);
  std::streambuf::~streambuf(v95);
  std::ios::~ios(&v97);
  v98 = v48;
  *(_QWORD *)((char *)&v99[-1] + *(_QWORD *)(v48 - 24)) = v49;
  if (v100 < 0)
    operator delete((void *)v99[8]);
  std::streambuf::~streambuf(v99);
  return std::ios::~ios(&v101);
}

void sub_10030CE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  if (a53 < 0)
    operator delete(a48);
  if (a59 < 0)
    operator delete(a54);
  sub_100210AFC((uint64_t)&a60);
  sub_100210AFC((uint64_t)&a72);
  sub_100210AFC((uint64_t)&STACK[0x300]);
  sub_100210AFC((uint64_t)&STACK[0x408]);
  sub_100210AFC((uint64_t)&STACK[0x510]);
  sub_100210AFC((uint64_t)&STACK[0x618]);
  sub_100210AFC((uint64_t)&STACK[0x720]);
  sub_100210AFC((uint64_t)&STACK[0x828]);
  _Unwind_Resume(a1);
}

void sub_10030CF78(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  float v9;

  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (*(_BYTE *)(a1 + 1) && *(_BYTE *)(a1 + 176))
  {
    v5 = *(double *)(a1 + 152);
    v6 = *(double *)(a1 + 168);
    if (a2)
    {
      *(_DWORD *)(a3 + 364) = 3;
      *(_BYTE *)(a3 + 368) = 1;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EB254();
      if (*(_BYTE *)(a1 + 16))
      {
        v7 = v5;
        *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 8);
        *(double *)(a3 + 16) = v6;
        *(float *)(a3 + 24) = v7;
        *(_DWORD *)(a3 + 28) = 1;
        *(_BYTE *)(a3 + 56) = 0;
        *(_QWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 40) = 0;
        *(_BYTE *)(a3 + 60) = 0;
        *(_BYTE *)(a3 + 64) = 0;
        *(_BYTE *)(a3 + 68) = 0;
        *(_QWORD *)(a3 + 72) = 0;
        *(_QWORD *)(a3 + 80) = 0;
        *(_WORD *)(a3 + 88) = 0;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        *(_QWORD *)(a3 + 128) = 0x200000000;
        *(_BYTE *)(a3 + 136) = 0;
        *(_BYTE *)(a3 + 160) = 0;
        *(_QWORD *)(a3 + 168) = 0;
        *(_QWORD *)(a3 + 176) = 0;
        *(_QWORD *)(a3 + 184) = 0;
LABEL_15:
        *(_BYTE *)(a3 + 192) = 1;
        return;
      }
      goto LABEL_19;
    }
    if (!*(_BYTE *)(a1 + 32))
      goto LABEL_19;
    if (*(double *)(a1 + 24) - v6 < *(double *)(a1 + 552))
    {
      *(_DWORD *)(a3 + 364) = 3;
      *(_BYTE *)(a3 + 368) = 1;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EB2B8();
      if (*(_BYTE *)(a1 + 16) && *(_BYTE *)(a1 + 32))
      {
        v8 = *(_QWORD *)(a1 + 24);
        v9 = v5;
        *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a3 + 16) = v8;
        *(float *)(a3 + 24) = v9;
        *(_DWORD *)(a3 + 28) = 1;
        *(_BYTE *)(a3 + 56) = 0;
        *(_QWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 40) = 0;
        *(_BYTE *)(a3 + 60) = 0;
        *(_BYTE *)(a3 + 64) = 0;
        *(_BYTE *)(a3 + 68) = 0;
        *(_QWORD *)(a3 + 72) = 0;
        *(_QWORD *)(a3 + 80) = 0;
        *(_WORD *)(a3 + 88) = 0;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        *(_DWORD *)(a3 + 128) = 0;
        *(_DWORD *)(a3 + 132) = 2;
        *(_BYTE *)(a3 + 136) = 0;
        *(_BYTE *)(a3 + 160) = 0;
        *(_QWORD *)(a3 + 176) = 0;
        *(_QWORD *)(a3 + 184) = 0;
        *(_QWORD *)(a3 + 168) = 0;
        goto LABEL_15;
      }
LABEL_19:
      sub_10000BA44();
    }
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003EB31C();
  }
}

void sub_10030D1A8(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;

  if (*(_BYTE *)(a1 + 128))
  {
    switch(*(_DWORD *)(a1 + 80))
    {
      case 0:
        v1 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v10 = 0;
          v2 = "#sa_algo,Batch solution status: STATIC_AND_UNOBSERVABLE";
          v3 = (uint8_t *)&v10;
          goto LABEL_17;
        }
        break;
      case 1:
        v1 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v9 = 0;
          v2 = "#sa_algo,Batch solution status: STATIC";
          v3 = (uint8_t *)&v9;
          goto LABEL_17;
        }
        break;
      case 2:
        v1 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v8 = 0;
          v2 = "#sa_algo,Batch solution status: UNOBSERVABLE";
          v3 = (uint8_t *)&v8;
          goto LABEL_17;
        }
        break;
      case 3:
        v1 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v7 = 0;
          v2 = "#sa_algo,Batch solution status: DEGENERATE_PATH";
          v3 = (uint8_t *)&v7;
          goto LABEL_17;
        }
        break;
      case 4:
        v1 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v6 = 0;
          v2 = "#sa_algo,Batch solution status: NOT_CONVERGED";
          v3 = (uint8_t *)&v6;
          goto LABEL_17;
        }
        break;
      case 5:
        v1 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v5 = 0;
          v2 = "#sa_algo,Batch solution status: INITIALIZED";
          v3 = (uint8_t *)&v5;
          goto LABEL_17;
        }
        break;
      case 6:
        v1 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v4 = 0;
          v2 = "#sa_algo,Batch solution status: RESET_FROM_HIGH_RESIDUALS";
          v3 = (uint8_t *)&v4;
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, v2, v3, 2u);
        }
        break;
      default:
        return;
    }
  }
}

_QWORD *sub_10030D388(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  char *v12;
  char **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char **v19;
  char *v20;
  char **v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v32;
  char **v33;
  char *v34;
  __n128 v35;
  char *v36;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 7) + 4 * (a4 - a2) - ((a3 - *(_QWORD *)a2) >> 7);
  v7 = a1[1];
  v8 = (char *)(v7 + 8 * (a1[4] >> 5));
  if (a1[2] == v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + ((a1[4] & 0x1FLL) << 7);
  v33 = (char **)(v7 + 8 * (a1[4] >> 5));
  v34 = (char *)v9;
  if (v9 == a3)
    v10 = 0;
  else
    v10 = ((a3 - *(_QWORD *)a2) >> 7) + 4 * (a2 - v8) - ((v9 - *(_QWORD *)v8) >> 7);
  v11 = (char **)sub_10030ECFC((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v19 = v11;
      v20 = v12;
      v21 = v33;
      v22 = v34;
      v23 = sub_10030ECFC((uint64_t)&v32, v6);
      sub_10030EDCC(v21, v22, v19, v20, v23, v24, &v35);
      v25 = v34;
      if (v34 != v36)
      {
        v26 = v33;
        do
        {
          v25 += 128;
          v34 = v25;
          if (v25 - *v26 == 4096)
          {
            v27 = v26[1];
            ++v26;
            v25 = v27;
            v33 = v26;
            v34 = v27;
          }
        }
        while (v25 != v36);
      }
      v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((sub_100145748((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      v13 = (char **)sub_10030ECFC((uint64_t)&v32, v6);
      v15 = a1[4] + a1[5];
      v16 = a1[1];
      v17 = (char **)(v16 + 8 * (v15 >> 5));
      if (a1[2] == v16)
        v18 = 0;
      else
        v18 = &(*v17)[128 * (v15 & 0x1F)];
      v35 = v32;
      sub_10030EF54(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_10030ED60(a1, 1) & 1) != 0)
        ;
    }
  }
  v29 = a1[1];
  if (a1[2] == v29)
    v30 = 0;
  else
    v30 = *(_QWORD *)(v29 + 8 * (a1[4] >> 5)) + ((a1[4] & 0x1FLL) << 7);
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 5);
  v35.n128_u64[1] = v30;
  return sub_10030ECFC((uint64_t)&v35, v10);
}

int32x2_t sub_10030D5BC(float32x4_t *a1)
{
  float32x2_t v1;
  int32x2_t v3;
  float v4;
  float32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  double v8;
  double v9;
  float32x2_t v10;
  float v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  __float2 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int32x2_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;

  v30 = a1[3];
  v32 = a1[2];
  v4 = acosf(-v30.f32[1]);
  v7 = v32;
  v1.i32[0] = v32.i32[1];
  v5.i32[0] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u32[0];
  v5.i32[1] = v32.i32[0];
  v6 = vmulq_f32(v7, v7);
  v7.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), v6).f32[0]);
  if (fabsf(v32.f32[1]) >= fabsf(a1[1].f32[1]))
  {
    v33 = v5;
    v29 = *(int32x2_t *)v7.f32;
    v11 = asinf(v7.f32[0]);
    if (v11 >= 0.43633)
    {
      v8 = COERCE_DOUBLE(vdiv_f32(v33, (float32x2_t)vdup_lane_s32(v29, 0)));
      v24 = v4;
      if (v4 <= 1.57079633)
      {
        *(float *)&v24 = -*((float *)&v8 + 1);
        v25 = COERCE_DOUBLE(vzip1_s32(*(int32x2_t *)&v24, *(int32x2_t *)&v8));
        v26 = COERCE_DOUBLE(vneg_f32(*(float32x2_t *)&v8));
        LODWORD(v27) = vdup_lane_s32(*(int32x2_t *)&v26, 1).u32[0];
        if (v4 <= 0.7854)
        {
          v9 = v25;
        }
        else
        {
          v8 = v26;
          *((float *)&v27 + 1) = -*(float *)&v26;
          v9 = v27;
        }
        return vzip1_s32(*(int32x2_t *)&v8, *(int32x2_t *)&v9);
      }
    }
    else
    {
      v12 = v30;
      v13.i32[0] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
      v13.i32[1] = v30.i32[0];
      v10.i32[0] = 0;
      v14 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v1, v10), 0), (int8x8_t)vneg_f32(v13), (int8x8_t)v13);
      v15 = vmulq_f32(v12, v12);
      v15.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), v15).u64[0];
      v15.f32[0] = sqrtf(v15.f32[0]);
      v8 = COERCE_DOUBLE(vdiv_f32(v14, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 0)));
      if (v11 > 0.2618)
      {
        v16 = (float32x2_t)vbsl_s8((int8x8_t)vcgtd_f64(1.57079633, v4), (int8x8_t)vneg_f32(v33), (int8x8_t)v33);
        v17 = vmul_f32(v16, v16);
        v17.f32[0] = sqrtf(vaddv_f32(v17));
        v18 = vdiv_f32(v16, (float32x2_t)vdup_lane_s32((int32x2_t)v17, 0));
        v16.f32[0] = -v18.f32[1];
        v19 = vzip1_s32((int32x2_t)v16, (int32x2_t)v18);
        v31 = (float32x2_t)v19;
        v34 = v18;
        v20 = (float32x2_t)__PAIR64__(v19.u32[1], v18.u32[1]);
        v18.i32[1] = v19.i32[0];
        v21 = vmla_lane_f32(vmul_n_f32(v18, *(float *)&v8), v20, *(float32x2_t *)&v8, 1);
        v22 = atan2f(v21.f32[1], v21.f32[0]);
        v23 = __sincosf_stret((float)((float)(v11 + -0.43633) / -0.17453) * v22);
        v8 = COERCE_DOUBLE(vmla_n_f32(vmul_n_f32(v31, v23.__sinval), v34, v23.__cosval));
      }
    }
    LODWORD(v9) = vdup_lane_s32(*(int32x2_t *)&v8, 1).u32[0];
    *((float *)&v9 + 1) = -*(float *)&v8;
    return vzip1_s32(*(int32x2_t *)&v8, *(int32x2_t *)&v9);
  }
  v8 = COERCE_DOUBLE(vdiv_f32(v5, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0)));
  v7.i32[0] = HIDWORD(v8);
  *(float *)v3.i32 = -*((float *)&v8 + 1);
  v9 = COERCE_DOUBLE(vzip1_s32(v3, *(int32x2_t *)&v8));
  if (v4 > 0.7854)
  {
    v7.f32[1] = -*(float *)&v8;
    v9 = *(double *)v7.i64;
  }
  return vzip1_s32(*(int32x2_t *)&v8, *(int32x2_t *)&v9);
}

void sub_10030D7D4(uint64_t a1, int a2)
{
  int v2;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  const char *v9;

  if (*(unsigned __int8 *)(a1 + 3) != a2)
  {
    v2 = a2;
    *(_BYTE *)(a1 + 3) = a2;
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "NO";
      if (v2)
        v5 = "YES";
      v8 = 136315138;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#sa_algo,Target motion state changed to %s", (uint8_t *)&v8, 0xCu);
      v2 = *(unsigned __int8 *)(a1 + 3);
    }
    if (v2)
    {
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v8) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#sa_algo,Target started moving - resetting", (uint8_t *)&v8, 2u);
      }
      if (*(_BYTE *)(a1 + 368))
      {
        v7 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v8) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo,Target started moving - passing the cached measurement to the range filter without VIO", (uint8_t *)&v8, 2u);
          if (!*(_BYTE *)(a1 + 368))
            sub_10000BA44();
        }
        sub_100309650(a1, a1 + 184);
      }
      sub_1003097EC(a1);
    }
  }
}

_QWORD *sub_10030D950(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100027CA4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10030D9AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030D9C8(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  float v11;
  float v12;

  v5 = 1.0 - a3;
  v6 = vsubq_f32(a1, a2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = vaddq_f32(a1, a2);
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0)
    sinf(v11);
  if ((float)(v5 * v11) != 0.0)
    sinf(v5 * v11);
  v12 = v11 * a3;
  if (v12 != 0.0)
    sinf(v12);
}

_BYTE *sub_10030DB30(_BYTE *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[48] = 0;
  sub_10030DB78((uint64_t)a1, a2);
  return a1;
}

void sub_10030DB5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
    sub_1003EB380(v1);
  _Unwind_Resume(exception_object);
}

double sub_10030DB78(uint64_t a1, uint64_t *a2)
{
  double v4;
  double result;

  if (*((_BYTE *)a2 + 48))
  {
    v4 = *(double *)a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(double *)a1 = v4;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_10030D950((_QWORD *)(a1 + 16), (const void *)a2[2], a2[3], 0xCF3CF3CF3CF3CF3DLL * ((a2[3] - a2[2]) >> 3));
    result = *((double *)a2 + 5);
    *(double *)(a1 + 40) = result;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return result;
}

void sub_10030DBF0(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10030DC10(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10030DC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[3];

  sub_10030DC3C(a1, v3, a3);
}

void sub_10030DC3C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v5 = *(_DWORD *)(a1 + 12);
    if (v5 >= 2)
    {
      if (!a2)
        sub_1003EB398(a1, 0, a3);
      v7 = v5 + v3 - *(_DWORD *)(a1 + 20);
      if (v7 <= 0)
        sub_1003EB3BC(a1, (uint64_t)a2, a3);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v8 = *(_DWORD *)(a1 + 16);
      if (v8 >= 3)
      {
        v9 = (v8 - 1);
        v10 = *(_QWORD *)(a1 + 32);
        v11 = 1;
        do
        {
          v12 = &a2[v11];
          if (!a2[v11])
          {
            v13 = *(_QWORD *)(v10 + 8 * v11);
            v14 = v11;
            do
            {
              v14 = v14 * v7 % (int)v9;
              v15 = *(_QWORD *)(v10 + 8 * v14);
              *(_QWORD *)(v10 + 8 * v14) = v13;
              *v12 = 1;
              v12 = &a2[v14];
              v13 = v15;
            }
            while (!*v12);
          }
          ++v11;
        }
        while (v11 != v9);
      }
    }
  }
}

_DWORD *sub_10030DD0C(_DWORD *result, int a2, int a3)
{
  if (a2 < 0)
    sub_1003EB3E0();
  if (result[6] < a2)
    sub_1003EB408();
  if (a3 < 0)
    sub_1003EB430();
  if (result[7] < a3)
    sub_1003EB458();
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

uint64_t sub_10030DD58(uint64_t result, double a2)
{
  int64x2_t *v2;
  uint64_t v3;
  int64x2_t *v4;
  uint64_t v5;
  int64x2_t v6;

  v2 = *(int64x2_t **)(result + 32);
  if (!v2)
    sub_1003EB480();
  v3 = *(unsigned int *)(result + 16);
  if ((int)v3 > 3)
  {
    v4 = (int64x2_t *)((char *)v2 + 8 * (v3 - 2));
    v5 = (v3 - 1) >> 1;
    v6 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
    do
    {
      *v2++ = v6;
      --v5;
    }
    while (v5);
    *v4 = v6;
  }
  else if ((int)v3 >= 1)
  {
    do
    {
      *(double *)v2->i64 = a2;
      v2 = (int64x2_t *)((char *)v2 + 8);
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_10030DDBC(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10030DDDC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10030DDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[9];

  sub_10030DC3C(a1, v3, a3);
}

void sub_10030DE34(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x20;
  v4 = v2 - 32;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10030E0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10030E148(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10030E168(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10030E174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[4];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_10030E194(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_1003EB4A8();
  if ((a2 & 0x80000000) != 0)
    sub_1003EB4D0();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_1003EB4F8();
  return v2 + 8 * a2;
}

double *sub_10030E1CC(uint64_t a1, _DWORD *a2)
{
  double *result;
  int v5;
  int v6;
  int v7;
  int i;
  double v9;

  if ((_DWORD *)a1 == a2)
    sub_1003EB520();
  result = (double *)sub_10030DD0C(a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  v5 = a2[2];
  if (v5)
  {
    v6 = 0;
    v7 = a2[3];
    do
    {
      if (v7)
      {
        for (i = 0; i != v7; ++i)
        {
          v9 = sub_10027C1DC(a1, i, v6);
          result = (double *)sub_10030E274((uint64_t)a2, v6, i);
          *result = v9;
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_10030E274(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_1003EB548();
  v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0)
    sub_1003EB570();
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16))
    sub_1003EB598();
  return v3 + 8 * v4;
}

float64x2_t sub_10030E2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v7;
  float64x2_t result;
  uint64_t v9;
  double *v10;
  double *v11;
  float64_t *v12;
  double v13;
  double v14;
  double v15;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t *v21;
  uint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 != *(_DWORD *)(a2 + 8))
    sub_1003EB638();
  v7 = *(_DWORD *)(a1 + 12);
  if (v7 != *(_DWORD *)(a2 + 12))
    sub_1003EB610();
  if (a1 == a3)
    sub_1003EB5C0();
  if (a2 == a3)
    sub_1003EB5E8();
  sub_10030DD0C((_DWORD *)a3, v4, v7);
  v9 = *(unsigned int *)(a3 + 16);
  if ((int)v9 > 3)
  {
    v16 = *(float64x2_t **)(a1 + 32);
    v17 = *(float64x2_t **)(a2 + 32);
    v18 = (float64x2_t *)((char *)v16 + 8 * (v9 - 2));
    v19 = *(float64x2_t **)(a3 + 32);
    v20 = (float64x2_t *)((char *)v17 + 8 * (v9 - 2));
    v21 = (float64x2_t *)((char *)v19 + 8 * (v9 - 2));
    v22 = (v9 - 1) >> 1;
    do
    {
      v23 = *v16++;
      v24 = v23;
      v25 = *v17++;
      *v19++ = vsubq_f64(v24, v25);
      --v22;
    }
    while (v22);
    result = vsubq_f64(*v18, *v20);
    *v21 = result;
  }
  else if ((int)v9 >= 1)
  {
    v10 = *(double **)(a1 + 32);
    v11 = *(double **)(a2 + 32);
    v12 = *(float64_t **)(a3 + 32);
    do
    {
      v13 = *v10++;
      v14 = v13;
      v15 = *v11++;
      result.f64[0] = v14 - v15;
      *v12++ = result.f64[0];
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_10030E3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t __ldb;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const double *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v17;
  double *v18;
  double *v19;
  double v20;

  __ldb = *(unsigned int *)(a1 + 12);
  if ((_DWORD)__ldb != *(_DWORD *)(a2 + 8))
    sub_1003EB6B0();
  if (a1 == a3)
    sub_1003EB660();
  if (a2 == a3)
    sub_1003EB688();
  v7 = *(unsigned int *)(a1 + 8);
  v8 = *(unsigned int *)(a2 + 12);
  sub_10030DD0C((_DWORD *)a3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a2 + 12));
  if (__ldb <= v8)
    v9 = v8;
  else
    v9 = __ldb;
  if (v9 <= v7)
    v9 = v7;
  v10 = *(const double **)(a1 + 32);
  if (v9 > 5)
  {
    cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, v7, v8, __ldb, 1.0, v10, v7, *(const double **)(a2 + 32), __ldb, 0.0, *(double **)(a3 + 32), *(_DWORD *)(a3 + 8));
  }
  else if ((_DWORD)v8)
  {
    v11 = 0;
    v12 = *(double **)(a2 + 32);
    v13 = *(_QWORD *)(a3 + 32);
    do
    {
      if ((_DWORD)v7)
      {
        v14 = 0;
        v15 = (double *)v10;
        do
        {
          v16 = 0.0;
          if ((_DWORD)__ldb)
          {
            v17 = __ldb;
            v18 = v12;
            v19 = v15;
            do
            {
              v20 = *v18++;
              v16 = v16 + *v19 * v20;
              v19 += v7;
              --v17;
            }
            while (v17);
          }
          *(double *)(v13 + 8 * (v11 * v7 + v14++)) = v16;
          ++v15;
        }
        while (v14 != v7);
      }
      ++v11;
      v12 += __ldb;
    }
    while (v11 != v8);
  }
}

void sub_10030E510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s1)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double *v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  long double v19;
  double *v20;
  double v21;
  double *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  int v28;
  double v29;
  uint64_t v30;
  unsigned int v31;
  double v32;
  double *v33;
  uint64_t v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double *v39;
  uint64_t v40;
  double v41;
  double *v42;
  double *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  double *v52;
  double *v53;
  double v54;
  double *v55;
  uint64_t v56;
  double v57;
  double v58;
  double *v59;
  double v60;
  double *v61;
  uint64_t v62;
  double v63;
  double v64;
  double *v65;
  long double v66;
  double *v67;
  uint64_t v68;
  double v69;
  double v70;
  double *v71;
  uint64_t v72;
  double v73;
  double v74;
  long double v75;

  if (a1 == a2)
    sub_1003EB6D8();
  if (a1 == a3)
    sub_1003EB700();
  if (a1 == a4)
    sub_1003EB728();
  if (a2 == a3)
    sub_1003EB750();
  if (a2 == a4)
    sub_1003EB778();
  if (a3 == a4)
    sub_1003EB7A0();
  v9 = *(unsigned int *)(a1 + 16);
  if (*(_DWORD *)(a2 + 16) < (int)v9)
    sub_1003EB7C8();
  if ((_DWORD)v9)
  {
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(unsigned int *)(a1 + 12);
    v13 = strcmp(__s1, "2");
    if ((_DWORD)v11 == 1 || (_DWORD)v12 == 1)
    {
      if (v13)
      {
        if (!strcmp(__s1, "1"))
        {
          v37 = *(double **)(a1 + 32);
          v38 = fabs(*v37);
          if (v9 >= 2)
          {
            v39 = v37 + 1;
            v40 = v9 - 1;
            do
            {
              v41 = *v39++;
              v38 = v38 + fabs(v41);
              --v40;
            }
            while (v40);
          }
        }
        else if (!strcmp(__s1, "inf"))
        {
          v53 = *(double **)(a1 + 32);
          v54 = fabs(*v53);
          if (v9 >= 2)
          {
            v55 = v53 + 1;
            v56 = v9 - 1;
            do
            {
              v57 = *v55++;
              v58 = fabs(v57);
              if (v58 > v54)
                v54 = v58;
              --v56;
            }
            while (v56);
          }
        }
        else if (!strcmp(__s1, "-inf"))
        {
          v59 = *(double **)(a1 + 32);
          v60 = fabs(*v59);
          if (v9 >= 2)
          {
            v61 = v59 + 1;
            v62 = v9 - 1;
            do
            {
              v63 = *v61++;
              v64 = fabs(v63);
              if (v64 < v60)
                v60 = v64;
              --v62;
            }
            while (v62);
          }
        }
        else
        {
          v75 = 0.0;
          if (sscanf(__s1, "%lg", &v75) != 1)
            sub_1003EB83C();
          v19 = v75;
          if (fabs(v75) >= 2.22044605e-16)
          {
            v65 = *(double **)(a1 + 32);
            v66 = pow(fabs(*v65), v75);
            if (v9 >= 2)
            {
              v67 = v65 + 1;
              v68 = v9 - 1;
              do
              {
                v69 = *v67++;
                v66 = v66 + pow(fabs(v69), v19);
                --v68;
              }
              while (v68);
            }
            pow(v66, 1.0 / v19);
          }
        }
      }
      else
      {
        v20 = *(double **)(a1 + 32);
        v21 = *v20 * *v20;
        if (v9 >= 2)
        {
          v22 = v20 + 1;
          v23 = v9 - 1;
          do
          {
            v24 = *v22++;
            v21 = v21 + v24 * v24;
            --v23;
          }
          while (v23);
        }
      }
    }
    else if (v13)
    {
      if (!strcmp(__s1, "1"))
      {
        if ((_DWORD)v12)
        {
          v25 = 0;
          v26 = *(_QWORD *)(a1 + 32);
          v27 = *(double **)(a2 + 32);
          v28 = 1;
          do
          {
            v29 = fabs(*(double *)(v26 + 8 * (v11 * v25)));
            v27[v25] = v29;
            v30 = v11 - 1;
            v31 = v28;
            if (v11 >= 2)
            {
              do
              {
                v29 = v29 + fabs(*(double *)(v26 + 8 * v31));
                v27[v25] = v29;
                ++v31;
                --v30;
              }
              while (v30);
            }
            ++v25;
            v28 += v11;
          }
          while (v25 != v12);
          v32 = *v27;
          v33 = v27 + 1;
          v34 = v12 - 1;
          do
          {
            v35 = *v33++;
            v36 = v35;
            if (v35 > v32)
              v32 = v36;
            --v34;
          }
          while (v34);
        }
      }
      else if (!strcmp(__s1, "inf"))
      {
        if ((_DWORD)v11)
        {
          v42 = *(double **)(a1 + 32);
          v43 = *(double **)(a2 + 32);
          v44 = v11;
          do
          {
            v45 = *v42++;
            *v43++ = fabs(v45);
            --v44;
          }
          while (v44);
        }
        if (v12 <= 1)
        {
          v47 = *(double **)(a2 + 32);
        }
        else
        {
          v46 = *(_QWORD *)(a1 + 32);
          v47 = *(double **)(a2 + 32);
          v48 = 1;
          v49 = v11;
          do
          {
            v50 = v11;
            v51 = v49;
            v52 = v47;
            if ((_DWORD)v11)
            {
              do
              {
                *v52 = fabs(*(double *)(v46 + 8 * v51)) + *v52;
                ++v52;
                ++v51;
                --v50;
              }
              while (v50);
            }
            ++v48;
            v49 += v11;
          }
          while (v48 != (_DWORD)v12);
        }
        v70 = *v47;
        if (v11 >= 2)
        {
          v71 = v47 + 1;
          v72 = v11 - 1;
          do
          {
            v73 = *v71++;
            v74 = v73;
            if (v73 > v70)
              v70 = v74;
            --v72;
          }
          while (v72);
        }
      }
      else
      {
        if (strcmp(__s1, "fro"))
          sub_1003EB7F0();
        v14 = *(double **)(a1 + 32);
        v15 = *v14 * *v14;
        if (v9 >= 2)
        {
          v16 = v14 + 1;
          v17 = v9 - 1;
          do
          {
            v18 = *v16++;
            v15 = v15 + v18 * v18;
            --v17;
          }
          while (v17);
        }
      }
    }
    else
    {
      sub_10030EA18(a1, a2, a3, a4);
    }
  }
}

_QWORD *sub_10030E988(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_10030E998(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10030E9B8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10030E9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[308];

  sub_10030DC3C(a1, v3, a3);
}

_DWORD *sub_10030EA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v11;
  __CLPK_integer v12;
  __CLPK_integer v13;
  __CLPK_doublereal *v14;
  __CLPK_doublereal *v15;
  __CLPK_doublereal *v16;
  cnprint::CNPrinter *v17;
  __CLPK_integer v18;
  __CLPK_integer v20;
  __CLPK_integer __lwork;
  __CLPK_integer __ldvt;
  __CLPK_integer __ldu;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  char __jobvt;
  char __jobu;

  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  if (v5 <= v6)
    v7 = *(_DWORD *)(a1 + 8);
  else
    v7 = *(_DWORD *)(a1 + 12);
  if (v5 >= v6)
    v8 = *(_DWORD *)(a1 + 8);
  else
    v8 = *(_DWORD *)(a1 + 12);
  if (a1 == a2)
    sub_1003EB888();
  if (a1 == a3)
    sub_1003EB8B0();
  if (a1 == a4)
    sub_1003EB8D8();
  if (a2 == a3)
    sub_1003EB900();
  if (a2 == a4)
    sub_1003EB928();
  if (a3 == a4)
    sub_1003EB950();
  v11 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  if (!v11)
    sub_1003EB978();
  if (v11 < 3 * v8 + v7)
    sub_1003EB9A0();
  if (v11 < 5 * v8)
    sub_1003EB9C8();
  if (*(_DWORD *)(a2 + 24) < v6)
    sub_1003EB9F0();
  if (*(_DWORD *)(a2 + 28) < v5)
    sub_1003EBA18();
  if (*(_DWORD *)(a4 + 24) < v8)
    sub_1003EBA40();
  if (!*(_DWORD *)(a4 + 28))
    sub_1003EBA68();
  sub_10030EC4C(a2, a1);
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 12);
  v14 = *(__CLPK_doublereal **)(a2 + 32);
  v15 = *(__CLPK_doublereal **)(a4 + 32);
  v16 = *(__CLPK_doublereal **)(a3 + 32);
  __jobu = 78;
  __jobvt = 78;
  __n = v13;
  __m = v12;
  __lda = v12;
  __ldvt = 1;
  __ldu = 1;
  v20 = 0;
  __lwork = v11;
  v17 = (cnprint::CNPrinter *)dgesvd_(&__jobu, &__jobvt, &__m, &__n, v14, &__lda, v15, 0, &__ldu, 0, &__ldvt, v16, &__lwork, &v20);
  v18 = v20;
  if (v20)
  {
    LOWORD(__m) = 4;
    if (v20 < 0)
      LOBYTE(__n) = 5;
    else
      LOBYTE(__n) = 4;
    v17 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v11 < **(double **)(a3 + 32) && cnprint::CNPrinter::GetLogLevel(v17) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print(&__m, &__n);
  }
  if (v18)
    sub_1003EBA90();
  sub_10030DD0C((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  return sub_10030DD0C((_DWORD *)a4, v8, 1);
}

__n128 sub_10030EC4C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  __n128 result;
  _OWORD *v10;
  __int128 *v11;
  __n128 *v12;
  __n128 *v13;
  uint64_t v14;
  __int128 v15;

  if (a1 != a2)
  {
    v2 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a1 + 24) < v2)
      sub_1003EBAB8();
    v3 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(a1 + 28) < v3)
      sub_1003EBAE0();
    *(_DWORD *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 12) = v3;
    v4 = v3 * v2;
    *(_DWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 20) = v2;
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      v10 = *(_OWORD **)(a1 + 32);
      v11 = *(__int128 **)(a2 + 32);
      v12 = (__n128 *)((char *)v10 + 8 * (v5 - 2));
      v13 = (__n128 *)((char *)v11 + 8 * (v5 - 2));
      v14 = (v5 - 1) >> 1;
      do
      {
        v15 = *v11++;
        *v10++ = v15;
        --v14;
      }
      while (v14);
      result = *v13;
      *v12 = *v13;
    }
    else if ((int)v4 >= 1)
    {
      v6 = *(unint64_t **)(a2 + 32);
      v7 = *(unint64_t **)(a1 + 32);
      do
      {
        v8 = *v6++;
        result.n128_u64[0] = v8;
        *v7++ = v8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

_QWORD *sub_10030ECFC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 7);
    if (v4 < 1)
      result -= (unint64_t)(31 - v4) >> 5;
    else
      result += (unint64_t)v4 >> 5;
  }
  return result;
}

uint64_t sub_10030ED60(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 4 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x20)
    a2 = 1;
  if (v5 < 0x40)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_10030EDCC@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_10030EE98(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  sub_10030EE98(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10030EE98@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 7 >= v12 >> 7)
        v13 = v12 >> 7;
      else
        v13 = (v11 - a1) >> 7;
      v11 -= 128 * v13;
      a4 -= 128 * v13;
      if (v13)
        result = memmove(a4, v11, (v13 << 7) - 8);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10030EF54(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    sub_10030F020(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      sub_10030F020(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  sub_10030F020(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_10030F020@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 7 >= v11 >> 7 ? v11 >> 7 : (a3 - v9) >> 7;
      if (v12)
        __src = (char *)memmove(__dst, v9, (v12 << 7) - 8);
      v9 += 128 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 128 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

float64x2_t sub_10030F0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v7;
  float64x2_t result;
  uint64_t v9;
  double *v10;
  double *v11;
  float64_t *v12;
  double v13;
  double v14;
  double v15;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t *v21;
  uint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 != *(_DWORD *)(a2 + 8))
    sub_1003EBB80();
  v7 = *(_DWORD *)(a1 + 12);
  if (v7 != *(_DWORD *)(a2 + 12))
    sub_1003EBB58();
  if (a1 == a3)
    sub_1003EBB08();
  if (a2 == a3)
    sub_1003EBB30();
  sub_10030DD0C((_DWORD *)a3, v4, v7);
  v9 = *(unsigned int *)(a3 + 16);
  if ((int)v9 > 3)
  {
    v16 = *(float64x2_t **)(a1 + 32);
    v17 = *(float64x2_t **)(a2 + 32);
    v18 = (float64x2_t *)((char *)v16 + 8 * (v9 - 2));
    v19 = *(float64x2_t **)(a3 + 32);
    v20 = (float64x2_t *)((char *)v17 + 8 * (v9 - 2));
    v21 = (float64x2_t *)((char *)v19 + 8 * (v9 - 2));
    v22 = (v9 - 1) >> 1;
    do
    {
      v23 = *v16++;
      v24 = v23;
      v25 = *v17++;
      *v19++ = vaddq_f64(v24, v25);
      --v22;
    }
    while (v22);
    result = vaddq_f64(*v18, *v20);
    *v21 = result;
  }
  else if ((int)v9 >= 1)
  {
    v10 = *(double **)(a1 + 32);
    v11 = *(double **)(a2 + 32);
    v12 = *(float64_t **)(a3 + 32);
    do
    {
      v13 = *v10++;
      v14 = v13;
      v15 = *v11++;
      result.f64[0] = v14 + v15;
      *v12++ = result.f64[0];
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_10030F1DC(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 128, a4);
}

void sub_10030F1E4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 122, a4);
}

uint64_t sub_10030F1EC()
{
  uint64_t v0;

  return cnprint::CNPrinter::Print(v0 - 4, v0 - 1);
}

uint64_t sub_10030F1F8()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10085DAF0 = 0;
  qword_10085DAF8 = 0;
  qword_10085DB00 = 0;
  v0 = operator new(0x40uLL);
  qword_10085DAF8 = (uint64_t)(v0 + 4);
  qword_10085DB00 = (uint64_t)(v0 + 4);
  *v0 = xmmword_1004788D0;
  v0[1] = unk_1004788E0;
  v0[2] = xmmword_1004788F0;
  v0[3] = unk_100478900;
  qword_10085DAF0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085DAF0, (void *)&_mh_execute_header);
  qword_10085DB10 = 0;
  unk_10085DB18 = 0;
  qword_10085DB08 = 0;
  v1 = operator new(0x10uLL);
  qword_10085DB10 = (uint64_t)(v1 + 1);
  unk_10085DB18 = v1 + 1;
  *v1 = xmmword_100478910;
  qword_10085DB08 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085DB08, (void *)&_mh_execute_header);
}

uint64_t sub_10030F2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;

  v4 = a2 + 16;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_100815848;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a2;
  sub_100232898((uint64_t *)(a1 + 96), a2 + 16);
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  v7 = *(_OWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  *(_OWORD *)(a1 + 168) = v7;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 264) = v12;
  *(_OWORD *)(a1 + 248) = v11;
  *(_OWORD *)(a1 + 232) = v10;
  v13 = *(_OWORD *)(a2 + 216);
  v14 = *(_OWORD *)(a2 + 232);
  v15 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 328) = v15;
  *(_OWORD *)(a1 + 312) = v14;
  *(_OWORD *)(a1 + 296) = v13;
  *(_BYTE *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 368) = xmmword_1004789A0;
  *(_OWORD *)(a1 + 384) = xmmword_1004789B0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 400) = _Q0;
  *(_QWORD *)(a1 + 416) = 0xBFD3333333333333;
  *(_QWORD *)(a1 + 424) = 4;
  *(_QWORD *)(a1 + 432) = 30;
  *(int32x2_t *)(a1 + 440) = vdup_n_s32(0x3DCCCCCDu);
  *(_OWORD *)(a1 + 448) = xmmword_10046E060;
  *(_QWORD *)(a1 + 464) = 0x3FD999999999999ALL;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0x4034000000000000;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 5;
  *(_QWORD *)(a1 + 512) = 0x4000000000000000;
  *(_DWORD *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 596) = 0;
  *(_BYTE *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 636) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 640) = -1;
  *(_BYTE *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 664) = *(_OWORD *)a2;
  sub_100232898((uint64_t *)(a1 + 680), v4);
  v21 = *(_OWORD *)(a2 + 40);
  v22 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 736) = v22;
  *(_OWORD *)(a1 + 704) = v21;
  v23 = *(_OWORD *)(a2 + 88);
  v24 = *(_OWORD *)(a2 + 104);
  v25 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 800) = v25;
  *(_OWORD *)(a1 + 752) = v23;
  *(_OWORD *)(a1 + 768) = v24;
  v26 = *(_OWORD *)(a2 + 152);
  v27 = *(_OWORD *)(a2 + 168);
  v28 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 848) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 864) = v28;
  *(_OWORD *)(a1 + 816) = v26;
  *(_OWORD *)(a1 + 832) = v27;
  v29 = *(_OWORD *)(a2 + 216);
  v30 = *(_OWORD *)(a2 + 232);
  v31 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 928) = v31;
  *(_OWORD *)(a1 + 880) = v29;
  *(_OWORD *)(a1 + 896) = v30;
  *(_DWORD *)(a1 + 944) = 0;
  v32 = *(_DWORD *)(a1 + 152);
  if (v32 == 1)
    operator new();
  if (v32 == 2)
    operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

void sub_10030F5CC()
{
  operator delete();
}

uint64_t sub_10030F694(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 568))
    *(_BYTE *)(a1 + 568) = 0;
  if (*(_BYTE *)(a1 + 608))
    *(_BYTE *)(a1 + 608) = 0;
  if (*(_BYTE *)(a1 + 624))
    *(_BYTE *)(a1 + 624) = 0;
  if (*(_BYTE *)(a1 + 584))
    *(_BYTE *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 528);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 552) + 32))(*(_QWORD *)(a1 + 552));
}

void sub_10030F6DC(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double v7;
  int v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  size_t v37;
  uint64_t (*v38)[4];
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double *v43;
  int v44;
  double *v45;
  double *v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  void *__p;
  void *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  char v63;
  void *v64;
  void *v65;
  uint64_t v66;

  v7 = *(double *)a2;
  v6 = *((_QWORD *)a2 + 1);
  v8 = *((_DWORD *)a2 + 4);
  v9 = (void **)(a1 + 528);
  v10 = *(_QWORD *)(a1 + 536);
  v11 = *(_QWORD *)(a1 + 528);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v11) >> 3);
  v13 = *(int *)(a1 + 80);
  v14 = a1 + 544;
  v15 = *(_QWORD *)(a1 + 544);
  if (v12 < v13)
  {
    if (v10 < v15)
    {
      *(double *)v10 = v7;
      *(_QWORD *)(v10 + 8) = v6;
      v16 = v10 + 24;
      *(_DWORD *)(v10 + 16) = v8;
      *(_DWORD *)(v10 + 20) = 0;
      goto LABEL_37;
    }
    if (v12 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v11) >> 3);
      v19 = 2 * v18;
      if (2 * v18 <= v12 + 1)
        v19 = v12 + 1;
      if (v18 >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)sub_100026E90(v14, v20);
      else
        v21 = 0;
      v26 = &v21[24 * v12];
      v27 = &v21[24 * v20];
      *(double *)v26 = v7;
      *((_QWORD *)v26 + 1) = v6;
      *((_DWORD *)v26 + 4) = v8;
      *((_DWORD *)v26 + 5) = 0;
      v16 = (uint64_t)(v26 + 24);
      v28 = *(char **)(a1 + 536);
      v29 = *(char **)(a1 + 528);
      if (v28 != v29)
      {
        do
        {
          v30 = *(_OWORD *)(v28 - 24);
          *((_QWORD *)v26 - 1) = *((_QWORD *)v28 - 1);
          *(_OWORD *)(v26 - 24) = v30;
          v26 -= 24;
          v28 -= 24;
        }
        while (v28 != v29);
        v28 = (char *)*v9;
      }
      *(_QWORD *)(a1 + 528) = v26;
      *(_QWORD *)(a1 + 536) = v16;
      *(_QWORD *)(a1 + 544) = v27;
      if (v28)
        operator delete(v28);
      goto LABEL_37;
    }
LABEL_84:
    sub_100026E7C();
  }
  if (v10 >= v15)
  {
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_84;
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v11) >> 3);
    v23 = 2 * v22;
    if (2 * v22 <= v12 + 1)
      v23 = v12 + 1;
    if (v22 >= 0x555555555555555)
      v24 = 0xAAAAAAAAAAAAAAALL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)sub_100026E90(v14, v24);
    else
      v25 = 0;
    v31 = &v25[24 * v12];
    v32 = &v25[24 * v24];
    *(double *)v31 = v7;
    *((_QWORD *)v31 + 1) = v6;
    *((_DWORD *)v31 + 4) = v8;
    *((_DWORD *)v31 + 5) = 0;
    v17 = v31 + 24;
    v33 = *(char **)(a1 + 536);
    v34 = *(char **)(a1 + 528);
    if (v33 != v34)
    {
      do
      {
        v35 = *(_OWORD *)(v33 - 24);
        *((_QWORD *)v31 - 1) = *((_QWORD *)v33 - 1);
        *(_OWORD *)(v31 - 24) = v35;
        v31 -= 24;
        v33 -= 24;
      }
      while (v33 != v34);
      v33 = (char *)*v9;
    }
    *(_QWORD *)(a1 + 528) = v31;
    *(_QWORD *)(a1 + 536) = v17;
    *(_QWORD *)(a1 + 544) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *(double *)v10 = v7;
    *(_QWORD *)(v10 + 8) = v6;
    v17 = (char *)(v10 + 24);
    *(_DWORD *)(v10 + 16) = v8;
    *(_DWORD *)(v10 + 20) = 0;
  }
  *(_QWORD *)(a1 + 536) = v17;
  v36 = *(_QWORD *)(a1 + 528);
  v37 = (size_t)&v17[-v36 - 24];
  if (v37)
    memmove(*(void **)(a1 + 528), (const void *)(v36 + 24), v37);
  v16 = v36 + v37;
LABEL_37:
  *(_QWORD *)(a1 + 536) = v16;
  v38 = off_100851DD0[*(int *)(a1 + 84)];
  v65 = 0;
  v66 = 0;
  v64 = 0;
  sub_10016F900(&v64, *(const void **)(a1 + 528), v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - *(_QWORD *)(a1 + 528)) >> 3));
  *(double *)(a1 + 560) = (*(double (**)(uint64_t (*)[4], void **))((*v38)[0] + 16))(v38, &v64);
  *(_BYTE *)(a1 + 568) = 1;
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  v39 = *(unsigned __int8 *)(a1 + 148);
  if (*(_BYTE *)(a1 + 148))
  {
    v40 = *(_QWORD *)(a1 + 552);
    v53 = *a2;
    v54 = *((_DWORD *)a2 + 4);
    if (*((char *)a2 + 47) < 0)
    {
      sub_100004678(&v55, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
    }
    else
    {
      v55 = *(__int128 *)((char *)a2 + 24);
      v56 = *((_QWORD *)a2 + 5);
    }
    __p = 0;
    v58 = 0;
    v59 = 0;
    sub_1001530EC(&__p, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6));
    v60 = *(__int128 *)((char *)a2 + 72);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v40 + 24))(&v61, v40, &v53, 0);
    if (__p)
    {
      v58 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v56) < 0)
      operator delete((void *)v55);
    if (!v63 || !v62)
      goto LABEL_82;
    *(_QWORD *)(a1 + 560) = v61;
    *(_BYTE *)(a1 + 568) = 1;
  }
  v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 536) - *(_QWORD *)(a1 + 528)) >> 3);
  v42 = *(int *)(a1 + 80);
  if (*(_BYTE *)(a1 + 596))
  {
    if (v41 < v42)
    {
      if (*(_DWORD *)(a1 + 592))
      {
LABEL_72:
        LODWORD(v48) = v41;
        goto LABEL_73;
      }
LABEL_55:
      v43 = *(double **)(a1 + 96);
      if (v43 == (double *)(a1 + 104))
      {
        v44 = 0;
      }
      else
      {
        v44 = 0;
        do
        {
          if (*(_BYTE *)(a1 + 568) && *(double *)(a1 + 560) > v43[4] + 3.0)
            break;
          v45 = (double *)*((_QWORD *)v43 + 1);
          if (v45)
          {
            do
            {
              v46 = v45;
              v45 = *(double **)v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              v46 = (double *)*((_QWORD *)v43 + 2);
              v47 = *(_QWORD *)v46 == (_QWORD)v43;
              v43 = v46;
            }
            while (!v47);
          }
          ++v44;
          v43 = v46;
        }
        while (v46 != (double *)(a1 + 104));
      }
      v49 = (v44 + 1);
      if (*(_QWORD *)(a1 + 112) >= v49)
      {
        *(_DWORD *)(a1 + 592) = v49;
        *(_BYTE *)(a1 + 596) = 1;
        *(_DWORD *)(a1 + 640) = v49;
      }
      else
      {
        *(_DWORD *)(a1 + 592) = 0;
        *(_BYTE *)(a1 + 596) = 1;
      }
      goto LABEL_72;
    }
  }
  else if (v41 < v42)
  {
    goto LABEL_55;
  }
  if (!*(_BYTE *)(a1 + 568))
    sub_10000BA44();
  *(_DWORD *)(a1 + 592) = sub_10030FC7C((unsigned int *)(a1 + 640), *(double *)(a1 + 560), *(double *)a2);
  *(_BYTE *)(a1 + 596) = 1;
  v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 536) - *(_QWORD *)(a1 + 528)) >> 3);
LABEL_73:
  *(_QWORD *)(a1 + 616) = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 624) = 1;
  if (!*(_BYTE *)(a1 + 636))
    *(_BYTE *)(a1 + 636) = 1;
  *(_DWORD *)(a1 + 632) = v48;
  if (v39 && *(_BYTE *)(a1 + 148) && *(_BYTE *)(a1 + 568))
  {
    sub_10031002C(a1, *(double *)(a1 + 560));
    *(_QWORD *)(a1 + 576) = v50;
    *(_BYTE *)(a1 + 584) = 1;
  }
  if (v41 < v42 && *(_BYTE *)(a1 + 596) && !*(_DWORD *)(a1 + 592))
  {
LABEL_82:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 80) = 0;
    return;
  }
  v51 = *(_OWORD *)(a1 + 608);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 592);
  *(_OWORD *)(a3 + 48) = v51;
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 624);
  v52 = *(_OWORD *)(a1 + 576);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 560);
  *(_OWORD *)(a3 + 16) = v52;
  *(_BYTE *)(a3 + 80) = 1;
}

void sub_10030FC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_100186108((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_10030FC7C(unsigned int *a1, double a2, double a3)
{
  unsigned int *v5;
  double *v6;
  int v7;
  double *v8;
  double v9;
  int v10;
  double *v11;
  double *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t result;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  int v25;
  double v26;
  double *v27;
  double *v28;
  double v29;
  double v30;
  NSObject *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[12];
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  double v55;
  __int16 v56;
  uint64_t v57;

  v5 = (unsigned int *)*((_QWORD *)a1 + 5);
  v6 = (double *)(a1 + 12);
  if (v5 == a1 + 12)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = (double *)*((_QWORD *)a1 + 5);
    do
    {
      v9 = v8[4];
      if (v9 < a2)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9 < a2)
        break;
      v11 = (double *)*((_QWORD *)v8 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(double **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (double *)*((_QWORD *)v8 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v13);
      }
      v7 = v10;
      v8 = v12;
    }
    while (v12 != v6);
  }
  v14 = (v7 + 1);
  v15 = *((_QWORD *)a1 + 7);
  if (v15 >= v14)
    v16 = (v7 + 1);
  else
    v16 = 0;
  result = *a1;
  if ((_DWORD)result == -1)
  {
    *a1 = v16;
    return v16;
  }
  if ((_DWORD)result == (_DWORD)v16)
  {
    if (*((_BYTE *)a1 + 16))
      *((_BYTE *)a1 + 16) = 0;
    a1[76] = 0;
    return v16;
  }
  v18 = a1[76] + 1;
  a1[76] = v18;
  if (*((_BYTE *)a1 + 16))
  {
    v19 = *((double *)a1 + 1);
  }
  else
  {
    *((double *)a1 + 1) = a3;
    *((_BYTE *)a1 + 16) = 1;
    v19 = a3;
  }
  v20 = a3 - v19;
  v21 = *((double *)a1 + 8);
  v22 = v21 - v20;
  if (v21 - v20 < 0.0)
    v22 = 0.0;
  v23 = v22 / v21;
  v24 = a1[22];
  v25 = (v24 - v18) & ~((v24 - v18) >> 31);
  if ((double)v25 / (double)v24 >= v23)
    v26 = v23;
  else
    v26 = (double)v25 / (double)v24;
  if (v15 >= v14)
  {
    if ((_DWORD)result && v7 >= (int)result)
    {
      *(_QWORD *)v41 = v5;
      sub_100310398((_QWORD **)v41, (int)result - 1);
    }
    else
    {
      *(_QWORD *)v41 = v5;
      sub_100310398((_QWORD **)v41, v7);
    }
    v29 = *(double *)(*(_QWORD *)v41 + 32);
    v30 = vabdd_f64(a2, v29);
    result = *a1;
    if ((int)v14 < (int)result || !(_DWORD)result)
    {
      if (v30 >= v26 * *((double *)a1 + 9))
      {
        v36 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v37 = a1[76];
          v38 = a1[22];
          v39 = *((_QWORD *)a1 + 7);
          v40 = *((_QWORD *)a1 + 8);
          *(_DWORD *)v41 = 134220032;
          *(_QWORD *)&v41[4] = v39;
          v42 = 2048;
          v43 = a2;
          v44 = 2048;
          v45 = v29;
          v46 = 2048;
          v47 = v30;
          v48 = 2048;
          v49 = v26;
          v50 = 1024;
          v51 = v37;
          v52 = 1024;
          v53 = v38;
          v54 = 2048;
          v55 = v20;
          v56 = 2048;
          v57 = v40;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#threshold-detector, threshsize:%zu [in] rssi: %f, rssiBorder: %f, rssiDelta: %f, mindecayfactor: %f, samples: %d/%d, time: %f/%f", v41, 0x54u);
        }
        *a1 = v14;
        if (*((_BYTE *)a1 + 16))
          *((_BYTE *)a1 + 16) = 0;
        return v14;
      }
      return result;
    }
  }
  else
  {
    v27 = *(double **)v6;
    if (*(_QWORD *)v6)
    {
      do
      {
        v28 = v27;
        v27 = (double *)*((_QWORD *)v27 + 1);
      }
      while (v27);
    }
    else
    {
      do
      {
        v28 = (double *)*((_QWORD *)v6 + 2);
        v13 = *(_QWORD *)v28 == (_QWORD)v6;
        v6 = v28;
      }
      while (v13);
    }
    v29 = v28[4];
    v30 = vabdd_f64(a2, v29);
  }
  if (v30 >= v26 * *((double *)a1 + 10))
  {
    v31 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v32 = a1[76];
      v33 = a1[22];
      v34 = *((_QWORD *)a1 + 7);
      v35 = *((_QWORD *)a1 + 8);
      *(_DWORD *)v41 = 134220032;
      *(_QWORD *)&v41[4] = v34;
      v42 = 2048;
      v43 = a2;
      v44 = 2048;
      v45 = v29;
      v46 = 2048;
      v47 = v30;
      v48 = 2048;
      v49 = v26;
      v50 = 1024;
      v51 = v32;
      v52 = 1024;
      v53 = v33;
      v54 = 2048;
      v55 = v20;
      v56 = 2048;
      v57 = v35;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#threshold-detector, threshsize:%zu [out] rssi: %f, rssiBorder: %f, rssiDelta: %f, mindecayfactor: %f, samples: %d/%d, time: %f/%f", v41, 0x54u);
    }
    *a1 = v16;
    if (*((_BYTE *)a1 + 16))
      *((_BYTE *)a1 + 16) = 0;
    return v16;
  }
  return result;
}

void sub_10031002C(uint64_t a1, double a2)
{
  float v4;
  int v5;
  _QWORD *v6;
  double v7;
  double v8;
  float v9;
  float v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  double v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  _BYTE v21[12];
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;

  if (!*(_BYTE *)(a1 + 596))
    sub_10000BA44();
  v4 = (float)*(unint64_t *)(a1 + 112);
  v5 = *(_DWORD *)(a1 + 592);
  if (v5 < 2)
  {
    if (v5 == 1)
    {
      v7 = *(double *)(*(_QWORD *)(a1 + 96) + 32);
      v10 = 1.0;
      v11 = 1.0;
      v8 = v7;
    }
    else
    {
      v12 = a1 + 104;
      v13 = *(_QWORD *)(a1 + 104);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(_QWORD *)(v13 + 8);
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = *(_QWORD *)(v12 + 16);
          v15 = *(_QWORD *)v14 == v12;
          v12 = v14;
        }
        while (v15);
      }
      v8 = *(double *)(v14 + 32);
      v7 = v8 - *(double *)(a1 + 328);
      v11 = 0.0;
      v10 = 1.0 / v4;
    }
  }
  else
  {
    v6 = (_QWORD *)(a1 + 96);
    *(_QWORD *)v21 = *(_QWORD *)(a1 + 96);
    sub_100310398((_QWORD **)v21, (v5 - 1));
    v7 = *(double *)(*(_QWORD *)v21 + 32);
    *(_QWORD *)v21 = *v6;
    sub_100310398((_QWORD **)v21, (v5 - 2));
    v8 = *(double *)(*(_QWORD *)v21 + 32);
    v9 = (float)(v4 - (float)((float)v5 + -1.0)) / v4;
    v10 = (float)(1.0 / v4) + v9;
    v11 = v9;
  }
  v16 = v10;
  v17 = v10;
  if (v8 > a2)
  {
    v17 = v11;
    if (v7 < a2)
      v17 = v11 + (a2 - v7) / (v8 - v7) * (v16 - v11);
  }
  v18 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    if (!*(_BYTE *)(a1 + 596))
      sub_10000BA44();
    v19 = *(_QWORD *)(a1 + 112);
    v20 = *(_DWORD *)(a1 + 592);
    *(_DWORD *)v21 = 134219776;
    *(_QWORD *)&v21[4] = v19;
    v22 = 1024;
    v23 = v20;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v17;
    v28 = 2048;
    v29 = v7;
    v30 = 2048;
    v31 = v8;
    v32 = 2048;
    v33 = v11;
    v34 = 2048;
    v35 = v16;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#threshold-detector, threshsize:%zu, inbubblestate: %d, estimaterssi: %f, scaledoutput: %f, lowerbThresh: %f, upperbThresh: %f, tmin: %f, tmax: %f", v21, 0x4Eu);
  }
}

uint64_t sub_100310274()
{
  return 0;
}

uint64_t sub_100310280(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_100815848;
  sub_10003E3F0(a1 + 680, *(_QWORD **)(a1 + 688));
  v2 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 528);
  if (v3)
  {
    *(_QWORD *)(a1 + 536) = v3;
    operator delete(v3);
  }
  sub_10003E3F0(a1 + 96, *(_QWORD **)(a1 + 104));
  *(_QWORD *)a1 = off_1008165B8;
  sub_100152A44((_QWORD *)(a1 + 16));
  return a1;
}

void sub_100310304(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_100815848;
  sub_10003E3F0(a1 + 680, *(_QWORD **)(a1 + 688));
  v2 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 528);
  if (v3)
  {
    *(_QWORD *)(a1 + 536) = v3;
    operator delete(v3);
  }
  sub_10003E3F0(a1 + 96, *(_QWORD **)(a1 + 104));
  *(_QWORD *)a1 = off_1008165B8;
  sub_100152A44((_QWORD *)(a1 + 16));
  operator delete();
}

_QWORD **sub_100310398(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v7;
  _QWORD *v8;

  if (a2 < 0)
  {
    v7 = *result;
    do
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v4 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v7[2];
          v5 = *v4 == (_QWORD)v7;
          v7 = v4;
        }
        while (v5);
      }
      v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2)
      return result;
    v2 = *result;
    do
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (a2-- > 1);
  }
  *result = v4;
  return result;
}

uint64_t sub_100310424()
{
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = xmmword_1004789C0;
  v9 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085DB20, (int *)&v8, 3);
  xmmword_10085DB38 = xmmword_10046E050;
  unk_10085DB48 = xmmword_10046E060;
  qword_10085DB60 = 0;
  unk_10085DB68 = 0;
  qword_10085DB58 = 0x3FD999999999999ALL;
  unk_10085DB70 = xmmword_10046E070;
  dword_10085DB80 = 5;
  qword_10085DB88 = 0x4000000000000000;
  dword_10085DB90 = 5;
  byte_10085DB98 = 0;
  unk_10085DB9C = 0x30000000ALL;
  xmmword_10085DBA8 = xmmword_10046E080;
  unk_10085DBB8 = xmmword_10046E090;
  xmmword_10085DBC8 = xmmword_10046E0A0;
  qword_10085DBD8 = 0x3FE3333333333333;
  dword_10085DBE0 = 3;
  xmmword_10085DBE8 = xmmword_10046E0B0;
  unk_10085DBF8 = xmmword_10046E090;
  xmmword_10085DC08 = xmmword_10046E080;
  qword_10085DC18 = 0x3FE3333333333333;
  byte_10085DC20 = 0;
  xmmword_10085DC28 = xmmword_10046E0C0;
  unk_10085DC38 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v6 = _Q0;
  xmmword_10085DC48 = _Q0;
  qword_10085DC58 = 0xBFD3333333333333;
  xmmword_10085DC60 = xmmword_10046E0E0;
  qword_10085DC70 = 0x3E99999A40000000;
  xmmword_10085DC78 = xmmword_10046E060;
  qword_10085DC90 = 0;
  unk_10085DC98 = 0;
  qword_10085DC88 = 0x3FD999999999999ALL;
  xmmword_10085DCA0 = xmmword_10046E070;
  dword_10085DCB0 = 5;
  qword_10085DCB8 = 0x4000000000000000;
  dword_10085DCC0 = 4;
  qword_10085DCC8 = 0x300000008;
  qword_10085DCD0 = 0xC04E800000000000;
  v7 = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_10085DCD8, (double *)&v7, 1);
  xmmword_10085DCF0 = xmmword_10046E0F0;
  qword_10085DD00 = 0x4024000000000000;
  dword_10085DD08 = 45;
  byte_10085DD0C = 0;
  dword_10085DD10 = 1;
  byte_10085DD18 = 1;
  xmmword_10085DD20 = xmmword_10046E100;
  unk_10085DD30 = xmmword_10046E110;
  xmmword_10085DD40 = v6;
  qword_10085DD50 = 0xC059000000000000;
  xmmword_10085DD58 = xmmword_10046E120;
  qword_10085DD68 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085DD70 = xmmword_10046E060;
  qword_10085DD80 = 0x3FD999999999999ALL;
  qword_10085DD90 = 0;
  qword_10085DD88 = 0;
  xmmword_10085DD98 = xmmword_10046E070;
  dword_10085DDA8 = 5;
  qword_10085DDB0 = 0x4000000000000000;
  dword_10085DDB8 = 10;
  qword_10085DDC0 = 0x4034000000000000;
  dword_10085DDC8 = 3;
  xmmword_10085DDD0 = xmmword_10046E130;
  return __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085DB20, (void *)&_mh_execute_header);
}

void sub_1003106CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1003106EC(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;

  sub_100310784((_QWORD *)a1, a2);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (*(double *)a2 - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v5 / 0x24)) + 112 * (v5 % 0x24)) > *(double *)(a1 + 368))
    {
      *(_QWORD *)(a1 + 32) = v5 + 1;
      *(_QWORD *)(a1 + 40) = v4 - 1;
      sub_100311588(a1, 1);
    }
  }
}

__n128 sub_100310784(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 36 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100311274(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x24)) + 112 * (v7 % 0x24);
  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)v8 = v9;
  result = (__n128)a2[3];
  v12 = a2[4];
  v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(__n128 *)(v8 + 48) = result;
  *(_OWORD *)(v8 + 64) = v12;
  ++a1[5];
  return result;
}

float32x4_t sub_100310848@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v7;
  float32x4_t v8;
  __n128 v9;
  NSObject *v10;
  int32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  __int128 v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  float32x4_t result;
  __n128 v21;

  if (*(_BYTE *)(a2 + 16))
  {
    v7 = *(double *)(a1 + 376);
    *(float *)&v7 = v7;
    v8 = vdivq_f32(*(float32x4_t *)a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v7, 0));
    if (!*(_BYTE *)(a1 + 352))
      *(_BYTE *)(a1 + 352) = 1;
    *(float32x4_t *)(a1 + 336) = v8;
  }
  sub_100310944(a1, *(double *)(a2 + 64), a4);
  v21 = v9;
  v10 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EBC10(v10, v21);
  v11 = (int32x4_t)vnegq_f32((float32x4_t)v21);
  v12 = (int8x16_t)vtrn2q_s32((int32x4_t)v21, vtrn1q_s32((int32x4_t)v21, v11));
  v14 = *(_OWORD *)(a2 + 32);
  v13 = *(float32x4_t *)(a2 + 48);
  v15 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v11, 8uLL), *(float32x2_t *)v13.f32, 1), (float32x4_t)vextq_s8(v12, v12, 8uLL), v13.f32[0]);
  v16 = (float32x4_t)vrev64q_s32((int32x4_t)v21);
  v16.i32[0] = v11.i32[1];
  v16.i32[3] = v11.i32[2];
  v17 = vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v21, v13, 3), v16, v13, 2);
  v18 = *(_OWORD *)(a2 + 64);
  v19 = *(_OWORD *)(a2 + 16);
  result = vaddq_f32(v15, v17);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v19;
  *(_OWORD *)(a3 + 32) = v14;
  *(float32x4_t *)(a3 + 48) = result;
  *(_OWORD *)(a3 + 64) = v18;
  *(double *)(a3 + 64) = a4;
  return result;
}

uint64_t sub_100310944(uint64_t a1, double a2, double a3)
{
  int8x16_t v6;
  int8x16_t v7;

  sub_10031114C(a1, &v7, a2);
  return sub_10031114C(a1, &v6, a3);
}

float32x4_t sub_100310A50@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, double *a3@<X8>, double a4@<D0>)
{
  double v8;
  float32x4_t v9;
  float32x4_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  double v33;
  double v34;
  double v35;
  int8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  double v42;
  float32x4_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float v49;
  float v51;
  float v52;
  float v53;
  float32x2_t v54;
  float32x2_t v55;
  unsigned __int32 v56;
  unsigned __int32 v57;
  float v58;
  float v59;
  float32x2_t v60;
  float32x2_t v61;
  float v62;
  float v63;
  unsigned int v64;
  float32x2_t v65;
  float32x2_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float32x2_t v74;
  float32x2_t v75;
  int32x4_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float v79;
  float v80;
  float v81;
  int32x4_t v82;
  int32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int8x16_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _OWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  float32x4_t result;
  float32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  int32x4_t v138;
  int32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;

  v8 = *(double *)a2;
  sub_100310944(a1, *(double *)a2, a4);
  if (*(_BYTE *)(a1 + 352))
    v10 = *(float32x4_t *)(a1 + 336);
  else
    v10 = 0uLL;
  v132 = v10;
  v128 = (float32x4_t)a2[2];
  v129 = (float32x4_t)a2[1];
  v126 = (float32x4_t)a2[4];
  v127 = (float32x4_t)a2[3];
  *(double *)&v11 = sub_100311080(v9);
  v12 = 0;
  v134 = v11;
  v135 = v13;
  v136 = v14;
  v137 = v15;
  do
  {
    *(float32x4_t *)((char *)&v138 + v12) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, COERCE_FLOAT(*(__int128 *)((char *)&v134 + v12))), v128, *(float32x2_t *)((char *)&v134 + v12), 1), v127, *(float32x4_t *)((char *)&v134 + v12), 2), v126, *(float32x4_t *)((char *)&v134 + v12), 3);
    v12 += 16;
  }
  while (v12 != 64);
  v16 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v19 = v18 / 0x24;
  if (v17)
    v20 = *(double *)(*(_QWORD *)(v16 + 8 * v19) + 112 * (v18 % 0x24));
  else
    v20 = 0.0;
  v21 = v132;
  v122 = v139;
  v123 = v138;
  v120 = v141;
  v121 = v140;
  v22 = 0uLL;
  if (*(_QWORD *)(a1 + 16) != v16)
  {
    v23 = *(_QWORD *)(v16 + 8 * v19);
    v24 = v23 + 112 * (v18 % 0x24);
    v25 = *(_QWORD *)(v16 + 8 * ((v18 + v17) / 0x24)) + 112 * ((v18 + v17) % 0x24);
    if (v24 != v25)
    {
      v26 = 0;
      v27 = (uint64_t *)(v16 + 8 * v19);
      v28 = (float32x4_t)vdupq_n_s32(0xBF3504F3);
      v29.i64[0] = 0x8000000080000000;
      v29.i64[1] = 0x8000000080000000;
      v30 = (float32x4_t)vdupq_n_s32(0x3F3504F3u);
      v31 = (float32x4_t)xmmword_100478A20;
      v32 = 0uLL;
      v124 = v30;
      v125 = v28;
      do
      {
        v33 = *(double *)v24;
        if (v8 < *(double *)v24)
        {
          v35 = *(double *)(v24 + 16);
          v34 = *(double *)(v24 + 24);
          v36 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v24 + 56)), *(float64x2_t *)(v24 + 72));
          v37 = (int32x4_t)vextq_s8(v36, v36, 4uLL);
          v38 = (int32x4_t)vnegq_f32((float32x4_t)v37);
          v39 = (int8x16_t)vtrn2q_s32(v37, vtrn1q_s32(v37, v38));
          v40 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL), v29), v28, (float32x4_t)vextq_s8(v39, v39, 8uLL));
          v41 = (float32x4_t)vrev64q_s32(v37);
          v41.i32[0] = v38.i32[1];
          v42 = *(double *)(v24 + 8);
          v41.i32[3] = v38.i32[2];
          v43 = vaddq_f32(vmlaq_f32(vmulq_f32((float32x4_t)v37, v30), v29, v41), v40);
          if (!v26)
          {
            v130 = (int32x4_t)v43;
            v131 = v22;
            v133 = v21;
            *(double *)&v44 = sub_100311080((float32x4_t)xmmword_100478A40);
            v45 = 0;
            v134 = v44;
            v135 = v46;
            v136 = v47;
            v137 = v48;
            do
            {
              *(float32x4_t *)((char *)&v138 + v45) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, COERCE_FLOAT(*(__int128 *)((char *)&v134 + v45))), v128, *(float32x2_t *)((char *)&v134 + v45), 1), v127, *(float32x4_t *)((char *)&v134 + v45), 2), v126, *(float32x4_t *)((char *)&v134 + v45), 3);
              v45 += 16;
            }
            while (v45 != 64);
            v49 = v140.f32[2] + (float)(*(float *)v138.i32 + *(float *)&v139.i32[1]);
            v22 = v131;
            v21 = v133;
            v30 = v124;
            v28 = v125;
            v29.i64[0] = 0x8000000080000000;
            v29.i64[1] = 0x8000000080000000;
            v31 = (float32x4_t)xmmword_100478A20;
            v43 = (float32x4_t)v130;
            if (v49 >= 0.0)
            {
              v58 = sqrtf(v49 + 1.0);
              v59 = v58 + v58;
              v60 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v58 + v58));
              v61 = vmul_f32(v60, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v58 + v58), v60));
              LODWORD(v62) = vmul_f32(v61, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v58 + v58), v61)).u32[0];
              v68 = vmuls_lane_f32(v62, (float32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_laneq_s32(v139, 2), v140), 1);
              v69 = vmuls_n_f32(vsubq_f32(v140, (float32x4_t)vdupq_laneq_s32(v138, 2)).f32[0], v62);
              v70 = vmuls_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.i8, 1), (float32x4_t)v139).f32[0], v62);
              v71 = v59 * 0.25;
            }
            else if (*(float *)v138.i32 < *(float *)&v139.i32[1] || *(float *)v138.i32 < v140.f32[2])
            {
              v51 = 1.0 - *(float *)v138.i32;
              if (*(float *)&v139.i32[1] >= v140.f32[2])
              {
                v72 = sqrtf(*(float *)&v139.i32[1] + (float)(v51 - v140.f32[2]));
                v73 = v72 + v72;
                v74 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v72 + v72));
                v75 = vmul_f32(v74, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v72 + v72), v74));
                v56 = vmul_f32(v75, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v72 + v72), v75)).u32[0];
                v68 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.i8, 1), (float32x4_t)v139).f32[0], *(float *)&v56);
                v69 = v73 * 0.25;
                v70 = vmuls_lane_f32(*(float *)&v56, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32(v139, 2), v140), 1);
                v57 = vsubq_f32(v140, (float32x4_t)vdupq_laneq_s32(v138, 2)).u32[0];
              }
              else
              {
                v52 = sqrtf(v140.f32[2] + (float)(v51 - *(float *)&v139.i32[1]));
                v53 = v52 + v52;
                v54 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v52 + v52));
                v55 = vmul_f32(v54, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v52 + v52), v54));
                v56 = vmul_f32(v55, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v52 + v52), v55)).u32[0];
                v68 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v138, 2), v140).f32[0], *(float *)&v56);
                v69 = vmuls_lane_f32(*(float *)&v56, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32(v139, 2), v140), 1);
                v70 = v53 * 0.25;
                v57 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.i8, 1), (float32x4_t)v139).u32[0];
              }
              v71 = vmuls_n_f32(*(float *)&v57, *(float *)&v56);
            }
            else
            {
              v63 = sqrtf(*(float *)v138.i32 + (float)((float)(1.0 - *(float *)&v139.i32[1]) - v140.f32[2]));
              *(float *)&v64 = v63 + v63;
              v65 = vrecpe_f32((float32x2_t)v64);
              v66 = vmul_f32(v65, vrecps_f32((float32x2_t)v64, v65));
              LODWORD(v67) = vmul_f32(v66, vrecps_f32((float32x2_t)v64, v66)).u32[0];
              v68 = *(float *)&v64 * 0.25;
              v69 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.i8, 1), (float32x4_t)v139).f32[0], v67);
              v70 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v138, 2), v140).f32[0], v67);
              v71 = vmuls_lane_f32(v67, (float32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_laneq_s32(v139, 2), v140), 1);
            }
            v76 = (int32x4_t)vnegq_f32((float32x4_t)v130);
            v77 = (int8x16_t)vtrn2q_s32(v130, vtrn1q_s32(v130, v76));
            v78 = (float32x4_t)vrev64q_s32(v130);
            v78.i32[0] = v76.i32[1];
            v78.i32[3] = v76.i32[2];
            v32 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v130, (int8x16_t)v76, 8uLL), v69), (float32x4_t)vextq_s8(v77, v77, 8uLL), v68), vmlaq_n_f32(vmulq_n_f32((float32x4_t)v130, v71), v78, v70));
            v23 = *v27;
            v26 = 1;
          }
          v79 = v42;
          v80 = v35;
          v81 = v34;
          v82 = (int32x4_t)vmulq_f32(v43, v31);
          v83 = (int32x4_t)vnegq_f32((float32x4_t)v82);
          v84 = (int8x16_t)vtrn2q_s32(v82, vtrn1q_s32(v82, v83));
          v85 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v83, 8uLL), v80), (float32x4_t)vextq_s8(v84, v84, 8uLL), v79);
          v86 = (float32x4_t)vrev64q_s32(v82);
          v86.i32[0] = v83.i32[1];
          v86.i32[3] = v83.i32[2];
          v87 = (int32x4_t)vmlaq_n_f32(v85, v86, v81);
          v88 = (int32x4_t)vnegq_f32((float32x4_t)v87);
          v89 = (int8x16_t)vtrn2q_s32(v87, vtrn1q_s32(v87, v88));
          v90 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v88, 8uLL), *(float32x2_t *)v43.f32, 1), (float32x4_t)vextq_s8(v89, v89, 8uLL), v43.f32[0]);
          v91 = (float32x4_t)vrev64q_s32(v87);
          v91.i32[0] = v88.i32[1];
          v91.i32[3] = v88.i32[2];
          v92 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v87, v43, 3), v91, v43, 2), v90);
          v93 = (int32x4_t)vmulq_f32(v32, v31);
          v94 = (int32x4_t)vnegq_f32((float32x4_t)v93);
          v95 = (int8x16_t)vtrn2q_s32(v93, vtrn1q_s32(v93, v94));
          v96 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v93, (int8x16_t)v94, 8uLL), *(float32x2_t *)v92.f32, 1), (float32x4_t)vextq_s8(v95, v95, 8uLL), v92.f32[0]);
          v97 = (float32x4_t)vrev64q_s32(v93);
          v97.i32[0] = v94.i32[1];
          v97.i32[3] = v94.i32[2];
          v98 = (int32x4_t)vmlaq_laneq_f32(v96, v97, v92, 2);
          v99 = (int32x4_t)vnegq_f32((float32x4_t)v98);
          v100 = (int8x16_t)vtrn2q_s32(v98, vtrn1q_s32(v98, v99));
          v101 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v98, (int8x16_t)v99, 8uLL), *(float32x2_t *)v32.f32, 1), (float32x4_t)vextq_s8(v100, v100, 8uLL), v32.f32[0]);
          v102 = (float32x4_t)vrev64q_s32(v98);
          v102.i32[0] = v99.i32[1];
          v102.i32[3] = v99.i32[2];
          v103 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v98, v32, 3), v102, v32, 2), v101);
          v102.f32[0] = v33 - v20;
          v22 = vmlaq_n_f32(v22, v21, v102.f32[0]);
          v21 = vmlaq_n_f32(v21, v103, v102.f32[0]);
        }
        v24 += 112;
        if (v24 - v23 == 4032)
        {
          v104 = v27[1];
          ++v27;
          v23 = v104;
          v24 = v104;
        }
        v20 = v33;
      }
      while (v24 != v25);
    }
  }
  v105 = a2[5];
  *((_OWORD *)a3 + 4) = a2[4];
  *((_OWORD *)a3 + 5) = v105;
  v106 = a2[7];
  *((_OWORD *)a3 + 6) = a2[6];
  *((_OWORD *)a3 + 7) = v106;
  v107 = a2[1];
  *(_OWORD *)a3 = *a2;
  *((_OWORD *)a3 + 1) = v107;
  v108 = a2[3];
  *((_OWORD *)a3 + 2) = a2[2];
  *((_OWORD *)a3 + 3) = v108;
  v109 = (_OWORD *)(a1 + 192);
  v110 = *a2;
  v111 = a2[1];
  v112 = a2[3];
  if (*(_BYTE *)(a1 + 320))
  {
    *(_OWORD *)(a1 + 224) = a2[2];
    *(_OWORD *)(a1 + 240) = v112;
    *v109 = v110;
    *(_OWORD *)(a1 + 208) = v111;
    v113 = a2[4];
    v114 = a2[5];
    v115 = a2[6];
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(a1 + 272) = v114;
    *(_OWORD *)(a1 + 288) = v115;
    *(_OWORD *)(a1 + 256) = v113;
  }
  else
  {
    *(_OWORD *)(a1 + 224) = a2[2];
    *(_OWORD *)(a1 + 240) = v112;
    *v109 = v110;
    *(_OWORD *)(a1 + 208) = v111;
    v116 = a2[4];
    v117 = a2[5];
    v118 = a2[7];
    *(_OWORD *)(a1 + 288) = a2[6];
    *(_OWORD *)(a1 + 304) = v118;
    *(_OWORD *)(a1 + 256) = v116;
    *(_OWORD *)(a1 + 272) = v117;
    *(_BYTE *)(a1 + 320) = 1;
  }
  v22.i32[3] = 0;
  result = vaddq_f32(v120, v22);
  *((int32x4_t *)a3 + 1) = v123;
  *((int32x4_t *)a3 + 2) = v122;
  *((float32x4_t *)a3 + 3) = v121;
  *((float32x4_t *)a3 + 4) = result;
  *a3 = a4;
  return result;
}

double sub_100311080(float32x4_t _Q0)
{
  float v10;
  double v11;

  _S3 = _Q0.u32[1];
  _S5 = _Q0.u32[2];
  __asm { FMLS            S1, S5, V0.S[2] }
  _S7 = _Q0.u32[3];
  __asm { FMLA            S1, S7, V0.S[3] }
  v10 = vmlas_n_f32(vmuls_lane_f32(_Q0.f32[2], _Q0, 3), _Q0.f32[1], _Q0.f32[0]);
  LODWORD(v11) = _S1;
  *((float *)&v11 + 1) = v10 + v10;
  __asm
  {
    FMLA            S6, S3, V0.S[1]
    FMLA            S6, S7, V0.S[3]
    FMLS            S6, S0, V0.S[0]
    FMLA            S18, S5, V0.S[1]
    FMLA            S17, S0, V0.S[2]
    FMLA            S16, S5, V0.S[1]
    FMLA            S7, S5, V0.S[2]
    FMLS            S7, S0, V0.S[0]
    FMLS            S7, S3, V0.S[1]
  }
  return v11;
}

uint64_t sub_10031114C@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  int8x16_t v14;

  v3 = *(_QWORD *)(result + 40);
  if (v3
    && (v4 = *(_QWORD *)(result + 8),
        v5 = *(_QWORD *)(result + 32),
        v6 = (unint64_t *)(v4 + 8 * (v5 / 0x24)),
        v7 = *v6,
        v8 = *v6 + 112 * (v5 % 0x24),
        *(double *)v8 <= a3))
  {
    if (*(_QWORD *)(result + 16) != v4)
    {
      result = 36;
      while (v8 != *(_QWORD *)(v4 + 8 * ((v5 + v3) / 0x24)) + 112 * ((v5 + v3) % 0x24))
      {
        if (*(double *)v8 > a3)
        {
          v12 = *(float64x2_t *)(v8 + 72);
          v13 = *(float64x2_t *)(v8 + 56);
          goto LABEL_12;
        }
        v8 += 112;
        if (v8 - v7 == 4032)
        {
          v10 = v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
    }
    v11 = *(_QWORD *)(v4 + 8 * ((v3 + v5 - 1) / 0x24)) + 112 * ((v3 + v5 - 1) % 0x24);
    v12 = *(float64x2_t *)(v11 + 72);
    v13 = *(float64x2_t *)(v11 + 56);
LABEL_12:
    v14 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v13), v12);
    *a2 = vextq_s8(v14, v14, 4uLL);
    v9 = 1;
  }
  else
  {
    v9 = 0;
    a2->i8[0] = 0;
  }
  a2[1].i8[0] = v9;
  return result;
}

void sub_100311274(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x24;
  v4 = v2 - 36;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10031153C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100311588(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x24)
    a2 = 1;
  if (v2 < 0x48)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 36;
  }
  return v4 ^ 1u;
}

uint64_t sub_1003115E4(uint64_t a1, __n128 *a2)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1008158A0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  sub_100352F50(a1 + 584, a2);
  return a1;
}

void sub_1003116AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_10003E3F0(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1003116C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  _BOOL4 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float32x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  float64x2_t v48;
  float64x2_t v49;
  int v50;
  double *v51;
  int v52;
  _BOOL4 v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  long double v60;
  long double v61;
  long double v62;
  float64x2_t __xa;
  int8x16_t __x;
  int8x16_t __xb;
  float64x2_t __xc;
  void *__p[2];
  char v68;
  _BYTE buf[32];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EBF2C();
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  *(_WORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    sub_100311ED8(a1, (uint64_t)buf);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)buf;
    *(_OWORD *)(a2 + 145) = *(_OWORD *)&buf[9];
    if (!*(_BYTE *)(a1 + 56))
      sub_10000BA44();
    v4 = *(double *)(a1 + 48) + dbl_100478A50[*(_BYTE *)(a1 + 40) == 0];
    if (*(_BYTE *)(a1 + 448) && *(_BYTE *)(a1 + 312))
    {
      v5 = v4 - *(double *)(a1 + 320);
      if (v5 <= 6.3)
      {
        v24 = v4 - *(double *)(a1 + 304);
        v25 = v24 / 0.1;
        v26 = v24 <= 409.5;
        v27 = 4095.0;
        if (v26)
          v27 = v25;
        v28 = fmod(round(v27) * 0.1, 409.6);
        if (v28 < 0.0)
          v29 = 409.6;
        else
          v29 = -0.0;
        v30 = v28 + v29 + 0.0;
        v31 = fmod(round(v5 / 0.1) * 0.1, 6.4);
        if (v31 < 0.0)
          v32 = 6.4;
        else
          v32 = -0.0;
        v33 = v31 + v32 + 0.0;
        __x = *(int8x16_t *)(a1 + 384);
        v34 = fmod(round(*(float *)&__x.i32[1] / 0.1) * 0.1 + 25.6, 51.2);
        if (v34 < 0.0)
          v35 = 51.2;
        else
          v35 = -0.0;
        v36 = v34 + v35 + -25.6;
        *(double *)(a2 + 24) = v30;
        *(double *)(a2 + 32) = v33;
        *(_DWORD *)(a2 + 40) = 0;
        v37.i32[0] = vextq_s8(__x, __x, 8uLL).u32[0];
        v37.i32[1] = __x.i32[0];
        v38 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
        __xb = (int8x16_t)vaddq_f64(vmulq_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_f32(v37), v38)), v38), (float64x2_t)vdupq_n_s64(0x407999999999999AuLL));
        v61 = fmod(*(long double *)&__xb.i64[1], 819.2);
        v39.f64[0] = fmod(*(long double *)__xb.i64, 819.2);
        v39.f64[1] = v61;
        *(float64x2_t *)(a2 + 48) = vaddq_f64(vaddq_f64(v39, (float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(v39), (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vdupq_n_s64(0x408999999999999AuLL))), (float64x2_t)vdupq_n_s64(0xC07999999999999ALL));
        *(double *)(a2 + 64) = v36;
        *(_BYTE *)(a2 + 72) = 1;
        goto LABEL_57;
      }
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EBEC8();
    }
    if (!*(_BYTE *)(a1 + 576))
    {
LABEL_14:
      if (*(_BYTE *)(a1 + 568))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003EBDD4();
        v11 = v4 - *(double *)(a1 + 544);
        if (v11 <= 6.3)
        {
          v40 = v4 - *(double *)(a1 + 536);
          v41 = v40 / 0.1;
          v26 = v40 <= 409.5;
          v42 = 4095.0;
          if (v26)
            v42 = v41;
          v43 = fmod(round(v42) * 0.1, 409.6);
          if (v43 < 0.0)
            v44 = 409.6;
          else
            v44 = -0.0;
          v45 = v43 + v44 + 0.0;
          v46 = fmod(round(v11 / 0.1) * 0.1, 6.4);
          if (v46 < 0.0)
            v47 = 6.4;
          else
            v47 = -0.0;
          *(double *)(a2 + 80) = v45;
          *(double *)(a2 + 88) = v46 + v47 + 0.0;
          v48 = (float64x2_t)vdupq_n_s64(0x3FA999999999999AuLL);
          __xc = vaddq_f64(vmulq_f64(vrndaq_f64(vdivq_f64(*(float64x2_t *)(a1 + 552), v48)), v48), (float64x2_t)vdupq_n_s64(0x401999999999999AuLL));
          v62 = fmod(__xc.f64[1], 12.8);
          v49.f64[0] = fmod(__xc.f64[0], 12.8);
          v49.f64[1] = v62;
          *(float64x2_t *)(a2 + 96) = vaddq_f64(vaddq_f64(v49, (float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(v49), (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vdupq_n_s64(0x402999999999999AuLL))), (float64x2_t)vdupq_n_s64(0xC01999999999999ALL));
          *(_BYTE *)(a2 + 112) = 1;
        }
        else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        {
          sub_1003EBD70();
        }
      }
      goto LABEL_57;
    }
    v6 = *(double *)(a1 + 464);
    v7 = *(double *)(a1 + 472);
    v8 = v4 - v6;
    v9 = qword_10085F520;
    v10 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
    if (v4 - v6 > 6.3)
    {
      if (v10)
        sub_1003EBE64();
      goto LABEL_14;
    }
    if (v10)
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&buf[24] = v4;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#findalgs-findee, Providing PDR displacement, enter time: %f, applicable time: %f, transmission time: %f", buf, 0x20u);
    }
    v12 = 4095.0;
    if (v4 - v7 <= 409.5)
      v12 = (v4 - v7) / 0.1;
    v13 = fmod(round(v12) * 0.1, 409.6);
    if (v13 < 0.0)
      v14 = 409.6;
    else
      v14 = -0.0;
    v15 = v13 + v14 + 0.0;
    v16 = fmod(round(v8 / 0.1) * 0.1, 6.4);
    if (v16 < 0.0)
      v17 = 6.4;
    else
      v17 = -0.0;
    v18 = v16 + v17 + 0.0;
    v19 = fmod(round(*(double *)(a1 + 520) / 0.1) * 0.1 + 25.6, 51.2);
    if (v19 < 0.0)
      v20 = 51.2;
    else
      v20 = -0.0;
    v21 = v19 + v20 + -25.6;
    *(double *)(a2 + 24) = v15;
    *(double *)(a2 + 32) = v18;
    *(_DWORD *)(a2 + 40) = 1;
    v22 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
    __xa = vaddq_f64(vmulq_f64(vrndaq_f64(vdivq_f64(*(float64x2_t *)(a1 + 504), v22)), v22), (float64x2_t)vdupq_n_s64(0x407999999999999AuLL));
    v60 = fmod(__xa.f64[1], 819.2);
    v23.f64[0] = fmod(__xa.f64[0], 819.2);
    v23.f64[1] = v60;
    *(float64x2_t *)(a2 + 48) = vaddq_f64(vaddq_f64(v23, (float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(v23), (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vdupq_n_s64(0x408999999999999AuLL))), (float64x2_t)vdupq_n_s64(0xC07999999999999ALL));
    *(double *)(a2 + 64) = v21;
    *(_BYTE *)(a2 + 72) = 1;
LABEL_57:
    if (*(_BYTE *)(a1 + 248))
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EBD44();
      v50 = 0;
      v51 = (double *)(a1 + 232);
    }
    else
    {
      v52 = *(unsigned __int8 *)(a1 + 296);
      if (*(_BYTE *)(a1 + 272))
      {
        if (!*(_BYTE *)(a1 + 296))
        {
LABEL_78:
          if (*(_BYTE *)(a1 + 32))
          {
            v59 = *(double *)(a1 + 8);
            sub_10000BF04(__p, "Findee");
            *(_WORD *)(a2 + 168) = sub_100353054(a1 + 584, (uint64_t *)__p, v59) | 0x100;
            if (v68 < 0)
              operator delete(__p[0]);
          }
          return;
        }
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003EBD18();
      }
      else
      {
        v53 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
        if (v52)
        {
          if (v53)
            sub_1003EBCEC();
          v51 = (double *)(a1 + 288);
          v50 = 1;
          goto LABEL_72;
        }
        if (v53)
          sub_1003EBCC0();
      }
      v51 = (double *)(a1 + 288);
      v50 = 2;
    }
LABEL_72:
    v54 = v4 - *v51;
    v55 = v54 / 0.1;
    v26 = v54 <= 409.5;
    v56 = 4095.0;
    if (v26)
      v56 = v55;
    v57 = fmod(round(v56) * 0.1, 409.6);
    v58 = -0.0;
    if (v57 < 0.0)
      v58 = 409.6;
    *(double *)a2 = v57 + v58 + 0.0;
    *(_DWORD *)(a2 + 8) = v50;
    *(_BYTE *)(a2 + 16) = 1;
    goto LABEL_78;
  }
}

void sub_100311EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100311ED8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  __int128 buf;

  if (!*(_BYTE *)(a1 + 168) || !*(_BYTE *)(a1 + 32))
    goto LABEL_16;
  v15 = 0.0;
  if (!sub_10034F710(a1, &v15, *(double *)(a1 + 80)))
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003EC14C();
    goto LABEL_16;
  }
  v4 = vabdd_f64(*(double *)(a1 + 8), v15);
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC0E8();
  v5 = 0.0;
  if (v4 > 1.0)
  {
    if (!*(_BYTE *)(a1 + 168))
      sub_10000BA44();
    v6 = *(double *)(a1 + 104);
    if (v6 <= 3.0)
    {
      v5 = (v4 + -1.0) * fmax(v6, 2.0);
      v8 = *(double *)(a1 + 120);
    }
    else
    {
      v7 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 134217984;
        *(double *)((char *)&buf + 4) = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#findalgs-findee, #clcc,findee location speed exceeds a brisk walking pace,inflating uncertainty before transmitting,%.1lf", (uint8_t *)&buf, 0xCu);
      }
      v8 = *(double *)(a1 + 120);
      v5 = 200.0 - v8;
    }
    if (v5 + v8 > 200.0)
    {
LABEL_16:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return;
    }
  }
  *(_QWORD *)&buf = sub_100030318(*(double *)(a1 + 64));
  *((_QWORD *)&buf + 1) = sub_100030318(*(double *)(a1 + 72));
  v9 = sub_100357CA4((double *)&buf);
  v11 = v10;
  v12 = sub_100357E7C(v5 + *(double *)(a1 + 120));
  v13 = 0x407FF00000000000;
  if (v9 <= 511.0)
  {
    if (v9 >= -512.0)
    {
      v14 = *(_QWORD *)&v9;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003EC084();
      v14 = 0xC080000000000000;
    }
  }
  else
  {
    v14 = 0x407FF00000000000;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003EC020();
  }
  if (v11 <= 511.0)
  {
    if (v11 >= -512.0)
    {
      v13 = *(_QWORD *)&v11;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003EBFBC();
      v13 = 0xC080000000000000;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003EBF58();
  }
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = 1;
}

void sub_1003121C8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC1B0();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 56) = 1;
  if (*(_BYTE *)(a2 + 183))
  {
    if (*(_BYTE *)(a2 + 182) == 1)
    {
      if (!*(_BYTE *)(a1 + 40))
      {
        v4 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, process Range: Setting reduced range rate to true", buf, 2u);
        }
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      if (*(_BYTE *)(a1 + 40))
      {
        v5 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v6 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, process Range: Setting reduced range rate to false", v6, 2u);
        }
      }
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003EC178();
  }
}

void sub_100312300(uint64_t a1, uint64_t a2)
{
  char v4;
  NSObject *v5;
  NSObject *v6;
  _BOOL4 v7;
  uint8_t v8[16];
  uint8_t buf[16];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC228();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 56) = 1;
  v4 = *(_BYTE *)(a1 + 40);
  if (*(_BYTE *)(a2 + 10) == 1)
  {
    if (!*(_BYTE *)(a1 + 40))
    {
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, process missedRange: Setting reduced range rate to true", buf, 2u);
      }
    }
    v4 = 1;
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    v6 = qword_10085F520;
    v7 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
    v4 = 0;
    if (v7)
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, process missedRange: Setting reduced range rate to false", v8, 2u);
      v4 = 0;
    }
  }
  *(_BYTE *)(a1 + 40) = v4;
}

void sub_100312410(uint64_t a1, __int128 *a2)
{
  double *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  NSObject *v17;
  uint8_t v18[16];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC2F4();
  v4 = (double *)(a1 + 320);
  if (!*(_BYTE *)(a1 + 448))
  {
    if (!*((_BYTE *)a2 + 84) && *((_DWORD *)a2 + 20) == 2)
    {
      v11 = *a2;
      v12 = a2[1];
      v13 = a2[3];
      *(_OWORD *)(a1 + 352) = a2[2];
      *(_OWORD *)(a1 + 368) = v13;
      *(_OWORD *)v4 = v11;
      *(_OWORD *)(a1 + 336) = v12;
      v14 = a2[4];
      v15 = a2[5];
      v16 = a2[7];
      *(_OWORD *)(a1 + 416) = a2[6];
      *(_OWORD *)(a1 + 432) = v16;
      *(_OWORD *)(a1 + 384) = v14;
      *(_OWORD *)(a1 + 400) = v15;
      *(_BYTE *)(a1 + 448) = 1;
LABEL_11:
      if (!*(_BYTE *)(a1 + 312))
      {
        *(_QWORD *)(a1 + 304) = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 312) = 1;
      }
      return;
    }
    goto LABEL_13;
  }
  if (*(double *)a2 > *v4)
  {
    if (!*((_BYTE *)a2 + 84) && *((_DWORD *)a2 + 20) == 2)
    {
      v5 = *a2;
      v6 = a2[1];
      v7 = a2[3];
      *(_OWORD *)(a1 + 352) = a2[2];
      *(_OWORD *)(a1 + 368) = v7;
      *(_OWORD *)v4 = v5;
      *(_OWORD *)(a1 + 336) = v6;
      v8 = a2[4];
      v9 = a2[5];
      v10 = a2[6];
      *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 14);
      *(_OWORD *)(a1 + 400) = v9;
      *(_OWORD *)(a1 + 416) = v10;
      *(_OWORD *)(a1 + 384) = v8;
      goto LABEL_11;
    }
LABEL_13:
    v17 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, Encountered a disruption in VIO tracking.  Resetting.  ", v18, 2u);
    }
    if (*(_BYTE *)(a1 + 312))
      *(_BYTE *)(a1 + 312) = 0;
    if (*(_BYTE *)(a1 + 448))
      *(_BYTE *)(a1 + 448) = 0;
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003EC290();
}

void sub_1003125A0(uint64_t a1, double *a2)
{
  double v4;
  NSObject *v5;
  uint8_t v6[16];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC320();
  v4 = *a2;
  if (*(_BYTE *)(a1 + 240))
    *(double *)(a1 + 224) = v4;
  sub_100312684(a1, v4);
  if (*(_BYTE *)(a1 + 448) && *a2 - *(double *)(a1 + 320) > 0.5)
  {
    v5 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, Too much time since last pose was seen.  Resetting.  ", v6, 2u);
    }
    if (*(_BYTE *)(a1 + 312))
      *(_BYTE *)(a1 + 312) = 0;
    if (*(_BYTE *)(a1 + 448))
      *(_BYTE *)(a1 + 448) = 0;
  }
}

void sub_100312684(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  int v18;
  _DWORD v19[2];

  sub_100312B2C(a1, a2, 30.0);
  v4 = *(_QWORD *)(a1 + 192);
  if (v4)
  {
    v5 = (uint64_t *)(a1 + 184);
    if (*(_BYTE *)(a1 + 216))
    {
      v6 = *(_QWORD *)(a1 + 184);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = v5[2];
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = (uint64_t *)v7;
        }
        while (v8);
      }
      v9 = *(_DWORD *)(v7 + 40) - *(_DWORD *)(a1 + 208);
      if (v9 >= 16)
      {
        v10 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003EC34C(v9, v10);
LABEL_18:
        LODWORD(v4) = 1;
        goto LABEL_20;
      }
    }
    else
    {
      v11 = *v5;
      if (*v5)
      {
        v12 = *v5;
        do
        {
          v13 = v12;
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12);
      }
      else
      {
        v14 = a1 + 184;
        do
        {
          v13 = *(_QWORD *)(v14 + 16);
          v8 = *(_QWORD *)v13 == v14;
          v14 = v13;
        }
        while (v8);
      }
      if (*(int *)(v13 + 40) >= 16)
      {
        v15 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        {
          if (v11)
          {
            do
            {
              v17 = v11;
              v11 = *(_QWORD *)(v11 + 8);
            }
            while (v11);
          }
          else
          {
            do
            {
              v17 = v5[2];
              v8 = *(_QWORD *)v17 == (_QWORD)v5;
              v5 = (uint64_t *)v17;
            }
            while (v8);
          }
          v18 = *(_DWORD *)(v17 + 40);
          v19[0] = 67109120;
          v19[1] = v18;
          _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#findalgs-findee, Walking set to true, step count seen: %d", (uint8_t *)v19, 8u);
        }
        goto LABEL_18;
      }
    }
    LODWORD(v4) = 0;
  }
LABEL_20:
  if (*(_BYTE *)(a1 + 249))
    LODWORD(v4) = 1;
  if (*(_BYTE *)(a1 + 296))
  {
    v16 = *(unsigned __int8 *)(a1 + 272);
    *(double *)(a1 + 280) = a2;
    if (v16 != (_DWORD)v4)
      *(double *)(a1 + 288) = a2;
  }
  else
  {
    *(double *)(a1 + 280) = a2;
    *(double *)(a1 + 288) = a2;
    *(_BYTE *)(a1 + 296) = 1;
  }
  *(_BYTE *)(a1 + 272) = v4;
}

void sub_100312878()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC3BC();
}

__n128 sub_1003128B8(uint64_t a1, __int128 *a2, int a3)
{
  __n128 result;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    sub_1003EC414();
    if (a3)
    {
LABEL_3:
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003EC3E8();
      return result;
    }
  }
  else if (a3)
  {
    goto LABEL_3;
  }
  if (*((_DWORD *)a2 + 23) == 1)
  {
    v7 = (_OWORD *)(a1 + 64);
    v8 = *a2;
    v9 = a2[2];
    if (*(_BYTE *)(a1 + 168))
    {
      *(_OWORD *)(a1 + 80) = a2[1];
      *(_OWORD *)(a1 + 96) = v9;
      *v7 = v8;
      result = (__n128)a2[3];
      v10 = a2[4];
      v11 = a2[5];
      *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 24);
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 144) = v11;
      *(__n128 *)(a1 + 112) = result;
    }
    else
    {
      *(_OWORD *)(a1 + 80) = a2[1];
      *(_OWORD *)(a1 + 96) = v9;
      *v7 = v8;
      result = (__n128)a2[3];
      v12 = a2[4];
      v13 = a2[5];
      *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 12);
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 144) = v13;
      *(__n128 *)(a1 + 112) = result;
      *(_BYTE *)(a1 + 168) = 1;
    }
  }
  return result;
}

void sub_1003129AC(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC440();
  if (*(_BYTE *)(a1 + 32))
    sub_100352FC0(a1 + 584, a2, *(double *)(a1 + 8));
}

void sub_100312A14(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  double v6;
  int v7;
  int v8;
  NSObject *v9;
  uint8_t v10[8];
  double v11;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC46C();
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a1 + 248);
  v11 = 0.0;
  sub_10034F6EC(a1, &v11, *(double *)a2);
  v6 = v11;
  if (v4 != v5)
  {
    v7 = *(unsigned __int8 *)(a1 + 240);
    *(double *)(a1 + 224) = v11;
    *(double *)(a1 + 232) = v6;
    if (!v7)
      *(_BYTE *)(a1 + 240) = 1;
    v8 = *(unsigned __int8 *)(a2 + 16);
    *(_BYTE *)(a1 + 248) = v8;
    if (v8)
    {
      v9 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, Clearing step history because motion activity changed to stationary", v10, 2u);
        v6 = v11;
      }
      sub_100312B2C(a1, v6, 0.0);
      v6 = v11;
    }
  }
  *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 18);
  sub_100312684(a1, v6);
}

void sub_100312B2C(uint64_t a1, double a2, double a3)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  double v9;
  int v10;
  NSObject *v11;
  int v12;
  uint64_t *v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  int v17;

  v4 = (uint64_t **)(a1 + 176);
  v3 = *(uint64_t **)(a1 + 176);
  v5 = (uint64_t *)(a1 + 184);
  if (v3 != (uint64_t *)(a1 + 184))
  {
    do
    {
      v9 = *((double *)v3 + 4);
      if (a2 - v9 <= a3)
        break;
      v10 = *((_DWORD *)v3 + 10);
      v11 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v15 = v9;
        v16 = 1024;
        v17 = v10;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#findalgs-findee, removing step time: %f, step count: %d", buf, 0x12u);
      }
      v12 = *(unsigned __int8 *)(a1 + 216);
      *(double *)(a1 + 200) = v9;
      *(_DWORD *)(a1 + 208) = v10;
      if (!v12)
        *(_BYTE *)(a1 + 216) = 1;
      v13 = *v4;
      sub_100027730(v4, *v4);
      operator delete(v13);
      v3 = *v4;
    }
    while (*v4 != v5);
  }
}

void sub_100312C8C(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  int v6;
  double v7;
  double v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[12];
  __int16 v15;
  double v16;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC564();
  if (*(_BYTE *)(a2 + 32) && *(_BYTE *)(a2 + 48))
  {
    *(_BYTE *)(a1 + 576) = 1;
    v4 = (double *)(a1 + 504);
    if (!*(_BYTE *)(a1 + 528))
    {
      *v4 = 0.0;
      *(_QWORD *)(a1 + 512) = 0;
      *(_QWORD *)(a1 + 520) = 0;
      *(_BYTE *)(a1 + 528) = 1;
      *(_QWORD *)v14 = 0;
      sub_10034F6EC(a1, (double *)v14, *(double *)a2);
      v5 = *(_QWORD *)v14;
      v6 = *(unsigned __int8 *)(a1 + 480);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)v14;
      *(_QWORD *)(a1 + 472) = v5;
      if (!v6)
        *(_BYTE *)(a1 + 480) = 1;
    }
    if (*(_BYTE *)(a1 + 496))
      *(_BYTE *)(a1 + 496) = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      if (*(_BYTE *)(a1 + 528))
      {
        v7 = *(double *)(a2 + 24) + *v4;
        *v4 = v7;
        if (*(_BYTE *)(a2 + 48))
        {
          v8 = *(double *)(a2 + 40) + *(double *)(a1 + 512);
          *(double *)(a1 + 512) = v8;
          if (*(_BYTE *)(a2 + 64))
            *(double *)(a1 + 520) = *(double *)(a2 + 56) + *(double *)(a1 + 520);
          v9 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v14 = 134218240;
            *(double *)&v14[4] = v7;
            v15 = 2048;
            v16 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, integrated PDR, H1 pos: %f, H2 pos: %f", v14, 0x16u);
          }
          *(_QWORD *)v14 = 0;
          sub_10034F6EC(a1, (double *)v14, *(double *)a2);
          v10 = *(unsigned __int8 *)(a1 + 480);
          *(_QWORD *)(a1 + 464) = *(_QWORD *)v14;
          if (!v10)
            *(_BYTE *)(a1 + 480) = 1;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            sub_1003EC4F0();
          return;
        }
      }
    }
LABEL_39:
    sub_10000BA44();
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC4C4();
  if (*(_BYTE *)(a2 + 80) && *(_BYTE *)(a2 + 96) && *(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(a1 + 576) = 0;
    if (!*(_BYTE *)(a1 + 496))
    {
      *(_QWORD *)v14 = 0;
      sub_10034F6EC(a1, (double *)v14, *(double *)a2);
      *(_QWORD *)(a1 + 488) = *(_QWORD *)v14;
      *(_BYTE *)(a1 + 496) = 1;
    }
    *(_QWORD *)v14 = 0;
    sub_10034F6EC(a1, (double *)v14, *(double *)a2);
    if (*(_BYTE *)(a1 + 568))
    {
      if (*(_BYTE *)(a2 + 80))
      {
        *(double *)(a1 + 552) = *(double *)(a2 + 72) + *(double *)(a1 + 552);
        if (*(_BYTE *)(a2 + 96))
        {
          *(double *)(a1 + 560) = *(double *)(a2 + 88) + *(double *)(a1 + 560);
          *(_QWORD *)(a1 + 544) = *(_QWORD *)v14;
          return;
        }
      }
    }
    else if (*(_BYTE *)(a1 + 496) && *(_BYTE *)(a2 + 80) && *(_BYTE *)(a2 + 96))
    {
      v11 = *(_QWORD *)v14;
      v12 = *(_QWORD *)(a2 + 72);
      v13 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 488);
      *(_QWORD *)(a1 + 544) = v11;
      *(_QWORD *)(a1 + 552) = v12;
      *(_QWORD *)(a1 + 560) = v13;
      *(_BYTE *)(a1 + 568) = 1;
      return;
    }
    goto LABEL_39;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC498();
}

void sub_100312FA0()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC590();
}

void sub_100312FE0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  double v10[2];
  double v11;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC5BC();
  v11 = 0.0;
  sub_10034F710(a1, &v11, *(double *)(a2 + 8));
  if (*(_QWORD *)(a1 + 192))
  {
    v5 = *(_QWORD **)(a1 + 184);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 184);
      do
      {
        v7 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      v8 = a1 + 184;
      do
      {
        v7 = *(_QWORD *)(v8 + 16);
        v9 = *(_QWORD *)v7 == v8;
        v8 = v7;
      }
      while (v9);
    }
    if (*(_DWORD *)(a2 + 16) < *(_DWORD *)(v7 + 40))
    {
      sub_10003E3F0(a1 + 176, v5);
      *(_QWORD *)(a1 + 184) = 0;
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 176) = a1 + 184;
      if (*(_BYTE *)(a1 + 216))
        *(_BYTE *)(a1 + 216) = 0;
    }
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v10[0] = v11;
  v10[1] = (double)v4;
  sub_100313280((uint64_t **)(a1 + 176), v10, (uint64_t)v10);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a1 + 264) = 1;
  sub_100312684(a1, v11);
}

void sub_1003130F8()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EC5E8();
}

uint64_t sub_100313138()
{
  return 0;
}

uint64_t sub_100313140()
{
  return 1;
}

uint64_t sub_100313148()
{
  return 1;
}

uint64_t sub_100313150()
{
  return 0;
}

uint64_t sub_100313158()
{
  return 1;
}

uint64_t sub_100313160()
{
  return 0;
}

uint64_t sub_100313168()
{
  return 1;
}

uint64_t sub_100313170()
{
  return 0;
}

uint64_t sub_100313178()
{
  return 0;
}

uint64_t sub_100313180()
{
  return 1;
}

uint64_t sub_100313188()
{
  return 0;
}

uint64_t sub_100313190()
{
  return 0;
}

uint64_t sub_100313198()
{
  return 0;
}

uint64_t sub_1003131A0()
{
  return 1;
}

uint64_t sub_1003131A8()
{
  return 0;
}

uint64_t sub_1003131B0()
{
  return 1;
}

uint64_t sub_1003131B8()
{
  return 1;
}

uint64_t sub_1003131C0()
{
  return 1;
}

uint64_t sub_1003131C8()
{
  return 1;
}

uint64_t sub_1003131D0()
{
  return 0;
}

uint64_t sub_1003131D8()
{
  return 0;
}

uint64_t sub_1003131E0()
{
  return 1;
}

uint64_t sub_1003131E8()
{
  return 1;
}

uint64_t sub_1003131F0()
{
  return 0;
}

uint64_t sub_1003131F8()
{
  return 0;
}

uint64_t sub_100313200()
{
  return 0;
}

void sub_10031320C(uint64_t a1)
{
  sub_100313230(a1);
  operator delete();
}

uint64_t sub_100313230(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1008158A0;
  if (*(_BYTE *)(a1 + 616))
  {
    v2 = *(void **)(a1 + 584);
    if (v2)
    {
      *(_QWORD *)(a1 + 592) = v2;
      operator delete(v2);
    }
  }
  sub_10003E3F0(a1 + 176, *(_QWORD **)(a1 + 184));
  return a1;
}

uint64_t **sub_100313280(uint64_t **a1, double *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  double v7;
  uint64_t **v8;
  double v9;
  _QWORD *v10;
  double v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((double *)v5 + 4);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x30uLL);
    v11 = *(double *)(a3 + 8);
    v10[4] = *(_QWORD *)a3;
    *((_DWORD *)v10 + 10) = (int)v11;
    sub_1000272A8(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_100313340(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x12u);
}

uint64_t sub_100313364(uint64_t a1, int a2, int a3)
{
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  NSObject *v9;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint8_t buf[8];
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_100318FC8((_QWORD *)a1, (const void *)qword_10085DDE0, qword_10085DDE8, (qword_10085DDE8 - qword_10085DDE0) >> 4);
  *(_QWORD *)(a1 + 96) = off_1008156E8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 120) = 0x100000003;
  *(_OWORD *)(a1 + 104) = xmmword_100478880;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  sub_10030DD0C((_DWORD *)(a1 + 96), 3, 1);
  sub_10030DD58(a1 + 96, 0.0);
  *(_QWORD *)(a1 + 240) = off_1008156E8;
  *(_QWORD *)(a1 + 184) = 0x100000003;
  *(_QWORD *)(a1 + 160) = off_1008156E8;
  *(_OWORD *)(a1 + 168) = xmmword_100478880;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 264) = 0x100000003;
  *(_OWORD *)(a1 + 248) = xmmword_100478880;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 336) = xmmword_100478B40;
  *(_BYTE *)(a1 + 352) = 1;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v18 = 0x100000003;
  *(_QWORD *)buf = off_1008156E8;
  v17 = xmmword_100478880;
  v19 = &v20;
  sub_10030DD0C(buf, 3, 1);
  sub_10030DD58((uint64_t)buf, 0.0);
  v13 = 0x100000003;
  v11 = off_1008156E8;
  v12 = xmmword_100478880;
  v14 = &v15;
  sub_10030DD0C(&v11, 3, 1);
  sub_10030DD58((uint64_t)&v11, 0.0);
  sub_1003186A8(a1 + 384, (uint64_t)buf, (uint64_t)&v11, 0, 0.0, 0.0, 0.0, 0.0);
  v6 = 0;
  *(_WORD *)(a1 + 560) = 257;
  *(_DWORD *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 565) = 0;
  *(_QWORD *)(a1 + 576) = 0x1000000032;
  *(_QWORD *)(a1 + 584) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a1 + 624) = 1;
  *(_OWORD *)(a1 + 592) = xmmword_100478B50;
  *(_OWORD *)(a1 + 608) = xmmword_100478B60;
  do
    *(_QWORD *)sub_10030E194(a1 + 240, v6++) = 0;
  while (v6 != 3);
  sub_100313714((uint64_t *)(a1 + 360), 4uLL);
  v7 = &qword_10085DDF8;
  if (a2)
    v8 = &qword_10085DDE0;
  else
    v8 = &qword_10085DDF8;
  if (v8 != (uint64_t *)a1)
  {
    if (a2)
      v7 = &qword_10085DDE0;
    sub_1003192AC((char *)a1, (char *)*v8, v7[1], (v7[1] - *v8) >> 4);
  }
  *(_BYTE *)(a1 + 624) = a3;
  v9 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    LOWORD(v17) = 1024;
    *(_DWORD *)((char *)&v17 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,SyntheticApertureBatchFilterWithFindeeVIO constructed. Strict box span requirement %d, third party behavior %d", buf, 0xEu);
  }
  return a1;
}

void sub_100313688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a11);
  sub_10031909C((void ***)va);
  *(_QWORD *)(v11 + 240) = off_100807398;
  *(_QWORD *)(v11 + 160) = off_100807398;
  *v12 = off_100807398;
  sub_100319040((void ***)va);
  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v11 + 48) = v15;
    operator delete(v15);
  }
  v16 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void sub_100313714(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *__p;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x1745D1745D1745ELL)
      sub_100026E7C();
    v5 = a1[1] - *a1;
    v13 = v3;
    __p = sub_100319154(v3, a2);
    v10 = (char *)__p + v5;
    v11 = (char *)__p + v5;
    v12 = (char *)__p + 176 * v6;
    sub_1003190E0(a1, &__p);
    v7 = v10;
    v8 = v11;
    if (v11 != v10)
    {
      do
      {
        *((_QWORD *)v8 - 8) = off_100807398;
        *((_QWORD *)v8 - 17) = off_100807398;
        v8 -= 176;
      }
      while (v8 != v7);
      v11 = v7;
    }
    if (__p)
      operator delete(__p);
  }
}

double sub_10031383C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double result;

  if (*(double *)(a1 + 224) < a3)
  {
    *(double *)(a1 + 224) = a3;
    *(double *)sub_10030E194(a1 + 96, 0) = a4;
    *(double *)sub_10030E194(a1 + 96, 1u) = a5;
    *(double *)sub_10030E194(a1 + 96, 2u) = a6;
    if (*(_BYTE *)(a1 + 562))
    {
      sub_10031391C(a1);
      sub_100313EA4(a1);
    }
  }
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 29);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_100318718((_QWORD *)(a2 + 16), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 6));
  result = *(double *)(a1 + 64);
  *(double *)(a2 + 40) = result;
  return result;
}

void sub_10031391C(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  double v20;
  double v21;
  double v22;
  double v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  double *v35;
  double *v36;
  int v37;
  const char *v38;
  uint64_t v39;
  uint64_t (**v40)();
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void *__p;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t (**v51)();
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t (**v56)();
  __int128 v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE v60[96];
  uint64_t (**v61)();
  __int128 v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t (**v66)();
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (**v71)();
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;

  *(_DWORD *)(a1 + 564) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  if (*(_BYTE *)(a1 + 562))
  {
    v73 = 0x100000003;
    v71 = off_1008156E8;
    v72 = xmmword_100478880;
    v74 = &v75;
    sub_10035A21C(*(_QWORD *)(a1 + 72), a1 + 160, (uint64_t)&v71);
    v68 = 0x100000003;
    v66 = off_1008156E8;
    v67 = xmmword_100478880;
    v69 = &v70;
    sub_10030E2B4((uint64_t)&v71, a1 + 96, (uint64_t)&v66);
    v2 = sub_10027C1A4((uint64_t)&v66, 0);
    v3 = sub_10027C1A4((uint64_t)&v66, 0);
    v4 = sub_10027C1A4((uint64_t)&v66, 2u);
    if (sqrt(v4 * sub_10027C1A4((uint64_t)&v66, 2u) + v2 * v3) <= 2.0)
    {
      v5 = *(_QWORD *)(a1 + 72);
      v39 = *(_QWORD *)(a1 + 80);
      if (v5 != v39)
      {
        v6 = xmmword_100478B70;
        while (1)
        {
          v63 = 0x100000003;
          v61 = off_1008156E8;
          v62 = xmmword_100478880;
          v64 = &v65;
          v58 = 0x400000003;
          v56 = off_100815AD0;
          v57 = v6;
          v59 = v60;
          sub_10035A45C(v5, a1 + 160, (uint64_t)&v61, (uint64_t)&v56);
          v48 = 0x400000003;
          __p = off_100815AD0;
          v47 = xmmword_100478B70;
          v7 = v5 + 136;
          v49 = &v50;
          sub_10030E3B0((uint64_t)&v56, v7, (uint64_t)&__p);
          v43 = 0x300000004;
          v44 = 0;
          v41 = 0;
          v42 = 0;
          v40 = off_100815B18;
          if (DWORD1(v57) > 4)
            break;
          if (v57 >= 4)
          {
            v37 = 423;
            v38 = "this->max_num_cols_ >= num_cols";
LABEL_49:
            __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v37, v38);
          }
          v41 = __PAIR64__(v57, DWORD1(v57));
          LODWORD(v42) = v57 * DWORD1(v57);
          HIDWORD(v42) = DWORD1(v57);
          v44 = &v45;
          sub_10030E1CC((uint64_t)&v56, &v40);
          v53 = 0x300000003;
          v51 = off_100815730;
          v52 = xmmword_100478B80;
          v54 = &v55;
          sub_10030E3B0((uint64_t)&__p, (uint64_t)&v40, (uint64_t)&v51);
          v8 = sub_10027C1DC((uint64_t)&v51, 1, 1);
          v9 = *(double *)sub_10030E194((uint64_t)&v61, 1u);
          v10 = (double *)sub_10030E194(a1 + 96, 1u);
          v11 = sqrt(v8);
          v12 = v9 - *v10;
          v13 = v11 + v12;
          v14 = v12 - v11;
          if (v14 <= -2.5 && v13 >= -2.5)
            goto LABEL_19;
          if (v14 <= 2.5 && v13 >= 2.5)
            goto LABEL_19;
          v5 = v7 + 424;
          v6 = xmmword_100478B70;
          if (v5 == v39)
            goto LABEL_18;
        }
        v37 = 422;
        v38 = "this->max_num_rows_ >= num_rows";
        goto LABEL_49;
      }
LABEL_18:
      *(_DWORD *)(a1 + 564) = 1;
    }
LABEL_19:
    v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 4);
    __p = 0;
    v47 = 0uLL;
    sub_100318614(&__p, v17);
    v18 = *(_QWORD *)(a1 + 360);
    for (i = *(_QWORD *)(a1 + 368); v18 != i; v18 += 176)
    {
      v58 = 0x100000003;
      v56 = off_1008156E8;
      v57 = xmmword_100478880;
      v59 = v60;
      sub_10030E2B4((uint64_t)&v71, v18 + 40, (uint64_t)&v56);
      v20 = sub_10027C1A4((uint64_t)&v56, 0);
      v21 = sub_10027C1A4((uint64_t)&v56, 2u);
      if (*(_BYTE *)(a1 + 624) || sqrt(v21 * v21 + v20 * v20) <= 4.0)
      {
        v22 = sub_10027C1A4((uint64_t)&v56, 1u);
        v23 = v22;
        v24 = (char *)v47;
        if ((unint64_t)v47 >= *((_QWORD *)&v47 + 1))
        {
          v26 = (char *)__p;
          v27 = (uint64_t)(v47 - (_QWORD)__p) >> 3;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            sub_100026E7C();
          v29 = *((_QWORD *)&v47 + 1) - (_QWORD)__p;
          if ((uint64_t)(*((_QWORD *)&v47 + 1) - (_QWORD)__p) >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v31 = (char *)sub_10005538C((uint64_t)&v47 + 8, v30);
            v26 = (char *)__p;
            v24 = (char *)v47;
          }
          else
          {
            v31 = 0;
          }
          v32 = &v31[8 * v27];
          *(double *)v32 = v23;
          v25 = v32 + 8;
          while (v24 != v26)
          {
            v33 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *((_QWORD *)v32 - 1) = v33;
            v32 -= 8;
          }
          __p = v32;
          *(_QWORD *)&v47 = v25;
          *((_QWORD *)&v47 + 1) = &v31[8 * v30];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(double *)v47 = v22;
          v25 = v24 + 8;
        }
        *(_QWORD *)&v47 = v25;
      }
    }
    v34 = __p;
    if (__p != (void *)v47)
    {
      LOBYTE(v40) = 0;
      v35 = sub_100137504((double *)__p, (double *)v47);
      if (*v36 - *v35 >= 0.5)
      {
        *(_DWORD *)(a1 + 564) = 2;
        *(_BYTE *)(a1 + 568) = 1;
      }
      v34 = __p;
    }
    if (v34)
    {
      *(_QWORD *)&v47 = v34;
      operator delete(v34);
    }
  }
}

void sub_100313E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100313EA4(uint64_t a1)
{
  int v2;
  char *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)();
  uint64_t (**v8)();
  uint64_t i;
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  _OWORD *v16;
  void *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  int v35;
  const char *v36;
  int v37;
  const char *v38;
  uint64_t v39;
  uint64_t (**v40)();
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (**v45)();
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE v50[96];
  uint64_t (**v51)();
  __int128 v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE v55[96];
  uint64_t (**v56)();
  __int128 v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t (**v61)();
  __int128 v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE v65[96];
  uint64_t (**v66)();
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (**v71)();
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t (**v76)();
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t (**v81)();
  __int128 v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _BYTE v86[13];
  void *__p[2];
  __int128 v88;
  uint8_t buf[16];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;

  *(_DWORD *)v86 = 0;
  v86[4] = 0;
  *(_DWORD *)&v86[8] = 0;
  *(_OWORD *)__p = 0u;
  v88 = 0u;
  v86[12] = 0;
  if (*(_BYTE *)(a1 + 563))
  {
    v2 = 6;
LABEL_3:
    *(_DWORD *)v86 = v2;
    goto LABEL_4;
  }
  if (*(_BYTE *)(a1 + 560))
  {
    if (!*(_BYTE *)(a1 + 561))
    {
      v2 = 1;
      goto LABEL_3;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 561))
    {
      v4 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(a1 + 336);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Linear user path length is %4.2f m", buf, 0xCu);
      }
      if (*(double *)(a1 + 336) >= 1.5)
        v2 = 3;
      else
        v2 = 2;
      goto LABEL_3;
    }
    if (!*(_BYTE *)(a1 + 562))
    {
      v2 = 4;
      goto LABEL_3;
    }
    *(_DWORD *)v86 = 5;
    *(_DWORD *)&v86[8] = *(_DWORD *)(a1 + 564);
    v86[4] = *(_DWORD *)&v86[8] == 2;
    v6 = *(_QWORD *)(a1 + 72);
    v39 = *(_QWORD *)(a1 + 80);
    if (v6 != v39)
    {
      v7 = off_100815AD0;
      while (1)
      {
        v98 = 0u;
        v97 = 0u;
        v96 = 0u;
        v95 = 0u;
        v94 = 0u;
        v93 = 0u;
        v92 = 0u;
        v91 = 0u;
        v90 = 0u;
        *(_OWORD *)buf = 0u;
        LODWORD(v99) = 1;
        v100 = 0uLL;
        *((_QWORD *)&v99 + 1) = 0;
        v83 = 0x100000003;
        v81 = off_1008156E8;
        v82 = xmmword_100478880;
        v84 = &v85;
        v78 = 0x400000003;
        v8 = v7;
        v76 = v7;
        v77 = xmmword_100478B70;
        v79 = &v80;
        sub_10035A45C(v6, a1 + 160, (uint64_t)&v81, (uint64_t)&v76);
        v73 = 0x100000003;
        v71 = off_1008156E8;
        v72 = xmmword_100478880;
        v74 = &v75;
        v68 = 0x300000003;
        v66 = off_100815730;
        v67 = xmmword_100478B80;
        v69 = &v70;
        v63 = 0x100000003;
        v61 = off_1008156E8;
        v62 = xmmword_100478880;
        v64 = v65;
        sub_10030E2B4((uint64_t)&v81, a1 + 96, (uint64_t)&v61);
        sub_10035AAB4((uint64_t)&v61, (uint64_t)&v71, (uint64_t)&v66);
        v63 = 0x400000003;
        v61 = v8;
        v62 = xmmword_100478B70;
        v64 = v65;
        sub_10030E3B0((uint64_t)&v66, (uint64_t)&v76, (uint64_t)&v61);
        v53 = 0x400000003;
        v51 = v8;
        v52 = xmmword_100478B70;
        v54 = v55;
        sub_10030E3B0((uint64_t)&v76, v6 + 136, (uint64_t)&v51);
        v48 = 0x300000004;
        v49 = 0;
        v46 = 0;
        v47 = 0;
        v45 = off_100815B18;
        if (DWORD1(v77) > 4)
          break;
        if (v77 >= 4)
        {
          v35 = 423;
          v36 = "this->max_num_cols_ >= num_cols";
LABEL_59:
          __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v35, v36);
        }
        v46 = __PAIR64__(v77, DWORD1(v77));
        LODWORD(v47) = v77 * DWORD1(v77);
        HIDWORD(v47) = DWORD1(v77);
        v49 = v50;
        sub_10030E1CC((uint64_t)&v76, &v45);
        v58 = 0x300000003;
        v56 = off_100815730;
        v57 = xmmword_100478B80;
        v59 = &v60;
        sub_10030E3B0((uint64_t)&v51, (uint64_t)&v45, (uint64_t)&v56);
        v53 = 0x400000003;
        v51 = v8;
        v52 = xmmword_100478B70;
        v54 = v55;
        sub_10030E3B0((uint64_t)&v61, v6 + 136, (uint64_t)&v51);
        v48 = 0x300000004;
        v49 = 0;
        v46 = 0;
        v47 = 0;
        v45 = off_100815B18;
        if (DWORD1(v62) > 4)
        {
          v37 = 422;
          v38 = "this->max_num_rows_ >= num_rows";
          goto LABEL_62;
        }
        if (v62 >= 4)
        {
          v37 = 423;
          v38 = "this->max_num_cols_ >= num_cols";
LABEL_62:
          __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v37, v38);
        }
        v46 = __PAIR64__(v62, DWORD1(v62));
        LODWORD(v47) = v62 * DWORD1(v62);
        HIDWORD(v47) = DWORD1(v62);
        v49 = v50;
        sub_10030E1CC((uint64_t)&v61, &v45);
        v42 = 0x300000003;
        v40 = off_100815730;
        v41 = xmmword_100478B80;
        v43 = &v44;
        sub_10030E3B0((uint64_t)&v51, (uint64_t)&v45, (uint64_t)&v40);
        for (i = 0; i != 3; ++i)
          *(_QWORD *)&buf[8 * i] = *(_QWORD *)sub_10030E194((uint64_t)&v81, i);
        *((_QWORD *)&v90 + 1) = sub_10027C1DC((uint64_t)&v56, 0, 0);
        *(_QWORD *)&v91 = sub_10027C1DC((uint64_t)&v56, 0, 1);
        *((_QWORD *)&v91 + 1) = sub_10027C1DC((uint64_t)&v56, 0, 2);
        *(_QWORD *)&v92 = sub_10027C1DC((uint64_t)&v56, 1, 1);
        *((_QWORD *)&v92 + 1) = sub_10027C1DC((uint64_t)&v56, 1, 2);
        *(_QWORD *)&v93 = sub_10027C1DC((uint64_t)&v56, 2, 2);
        v10 = v57;
        if ((_DWORD)v57 != DWORD1(v57))
          __assert_rtn("Trace", "cnmatrixbase.h", 4977, "A.NumRows() == A.NumCols()");
        if ((int)v57 < 1)
        {
          v12 = 0.0;
        }
        else
        {
          v11 = 0;
          v12 = 0.0;
          do
          {
            v12 = v12 + sub_100319720((uint64_t)&v56, v11, v11);
            ++v11;
          }
          while (v10 != v11);
        }
        v13 = *(_QWORD *)(v6 + 416);
        *((_QWORD *)&v93 + 1) = sqrt(v12);
        *(_QWORD *)&v94 = v13;
        LODWORD(v99) = *(_DWORD *)(v6 + 424);
        *((_QWORD *)&v94 + 1) = *(_QWORD *)sub_10030E194((uint64_t)&v71, 0);
        *(_QWORD *)&v95 = *(_QWORD *)sub_10030E194((uint64_t)&v71, 1u);
        *((_QWORD *)&v95 + 1) = *(_QWORD *)sub_10030E194((uint64_t)&v71, 2u);
        *(_QWORD *)&v96 = sqrt(sub_10027C1DC((uint64_t)&v40, 0, 0));
        *((_QWORD *)&v96 + 1) = sqrt(sub_10027C1DC((uint64_t)&v40, 1, 1));
        v14 = 0;
        *(_QWORD *)&v97 = sqrt(sub_10027C1DC((uint64_t)&v40, 2, 2));
        do
        {
          v15 = &buf[8 * v14];
          *((_QWORD *)v15 + 17) = *(_QWORD *)sub_10030E194(a1 + 96, v14);
          *((_QWORD *)v15 + 21) = *(_QWORD *)sub_10030E194(a1 + 160, v14++);
        }
        while (v14 != 3);
        v16 = __p[1];
        if (__p[1] >= (void *)v88)
        {
          v18 = __p[0];
          v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 6);
          v20 = v19 + 1;
          if (v19 + 1 > 0x155555555555555)
            sub_100026E7C();
          if (0x5555555555555556 * ((uint64_t)(v88 - (unint64_t)__p[0]) >> 6) > v20)
            v20 = 0x5555555555555556 * ((uint64_t)(v88 - (unint64_t)__p[0]) >> 6);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - (unint64_t)__p[0]) >> 6) >= 0xAAAAAAAAAAAAAALL)
            v21 = 0x155555555555555;
          else
            v21 = v20;
          if (v21)
          {
            v22 = (char *)sub_1003187E0((uint64_t)&v88, v21);
            v16 = __p[1];
            v18 = __p[0];
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[192 * v19];
          *((_OWORD *)v23 + 8) = v97;
          *((_OWORD *)v23 + 9) = v98;
          *((_OWORD *)v23 + 10) = v99;
          *((_OWORD *)v23 + 11) = v100;
          *((_OWORD *)v23 + 4) = v93;
          *((_OWORD *)v23 + 5) = v94;
          *((_OWORD *)v23 + 6) = v95;
          *((_OWORD *)v23 + 7) = v96;
          *(_OWORD *)v23 = *(_OWORD *)buf;
          *((_OWORD *)v23 + 1) = v90;
          *((_OWORD *)v23 + 2) = v91;
          *((_OWORD *)v23 + 3) = v92;
          if (v16 == v18)
          {
            v34 = &v22[192 * v19];
          }
          else
          {
            v24 = &v22[192 * v19];
            do
            {
              v25 = *(v16 - 12);
              v26 = *(v16 - 11);
              v27 = *(v16 - 9);
              *((_OWORD *)v24 - 10) = *(v16 - 10);
              *((_OWORD *)v24 - 9) = v27;
              *((_OWORD *)v24 - 12) = v25;
              *((_OWORD *)v24 - 11) = v26;
              v28 = *(v16 - 8);
              v29 = *(v16 - 7);
              v30 = *(v16 - 5);
              *((_OWORD *)v24 - 6) = *(v16 - 6);
              *((_OWORD *)v24 - 5) = v30;
              *((_OWORD *)v24 - 8) = v28;
              *((_OWORD *)v24 - 7) = v29;
              v31 = *(v16 - 4);
              v32 = *(v16 - 3);
              v33 = *(v16 - 1);
              v34 = v24 - 192;
              *((_OWORD *)v24 - 2) = *(v16 - 2);
              *((_OWORD *)v24 - 1) = v33;
              *((_OWORD *)v24 - 4) = v31;
              *((_OWORD *)v24 - 3) = v32;
              v16 -= 12;
              v24 -= 192;
            }
            while (v16 != v18);
          }
          v17 = v23 + 192;
          __p[0] = v34;
          __p[1] = v23 + 192;
          *(_QWORD *)&v88 = &v22[192 * v21];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *((_OWORD *)__p[1] + 8) = v97;
          v16[9] = v98;
          v16[10] = v99;
          v16[11] = v100;
          v16[4] = v93;
          v16[5] = v94;
          v16[6] = v95;
          v16[7] = v96;
          *v16 = *(_OWORD *)buf;
          v16[1] = v90;
          v16[2] = v91;
          v16[3] = v92;
          v17 = v16 + 12;
        }
        __p[1] = v17;
        if (!*(_BYTE *)(a1 + 352))
          sub_10000BA44();
        *((_QWORD *)&v88 + 1) = *(_QWORD *)(a1 + 344);
        v6 += 560;
        v7 = v8;
        if (v6 == v39)
          goto LABEL_4;
      }
      v35 = 422;
      v36 = "this->max_num_rows_ >= num_rows";
      goto LABEL_59;
    }
  }
LABEL_4:
  v3 = (char *)__p[0];
  *(_QWORD *)(a1 + 24) = *(_QWORD *)v86;
  *(_QWORD *)(a1 + 29) = *(_QWORD *)&v86[5];
  if ((_BYTE *)(a1 + 24) != v86)
  {
    sub_100318824((char *)(a1 + 40), v3, (uint64_t)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)v3) >> 6));
    v3 = (char *)__p[0];
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)&v88 + 1);
  if (v3)
  {
    __p[1] = v3;
    operator delete(v3);
  }
}

void sub_10031485C(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    STACK[0x4A8] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

double sub_1003148CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double result;

  if (*(double *)(a1 + 232) < a3)
  {
    *(double *)(a1 + 232) = a3;
    *(double *)sub_10030E194(a1 + 160, 0) = a4;
    *(double *)sub_10030E194(a1 + 160, 1u) = a5;
    *(double *)sub_10030E194(a1 + 160, 2u) = a6;
    sub_10031391C(a1);
    sub_100313EA4(a1);
  }
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 5) = *(_QWORD *)(a1 + 29);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_100318718((_QWORD *)(a2 + 16), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 6));
  result = *(double *)(a1 + 64);
  *(double *)(a2 + 40) = result;
  return result;
}

_QWORD *sub_1003149A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  __int128 i;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  _QWORD *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double *v38;
  double *v39;
  double *v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  NSObject *v48;
  double v49;
  double v50;
  NSObject *v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  _QWORD *result;
  _BOOL4 v60;
  uint64_t (**v61)();
  __int128 v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE v65[24];
  uint64_t (**v66)();
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _BYTE v71[112];
  uint64_t (**v72)();
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t (**v77)();
  __int128 v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t (**v82)();
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t (**v87)();
  __int128 v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE v91[24];
  uint64_t (**v92)();
  __int128 v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE v96[24];
  _BYTE buf[24];
  uint64_t v98;
  _BYTE *v99;
  _BYTE v100[2464];

  if (*(_BYTE *)(a1 + 563))
  {
    *(_BYTE *)(a1 + 563) = 0;
    if (*(_QWORD *)(a1 + 360) != *(_QWORD *)(a1 + 368))
      sub_1003154F8(a1);
  }
  v84 = 0x100000003;
  v82 = off_1008156E8;
  v83 = xmmword_100478880;
  v85 = &v86;
  sub_10030DD0C(&v82, 3, 1);
  sub_10030DD58((uint64_t)&v82, 0.0);
  v79 = 0x100000004;
  v77 = off_100815778;
  v78 = xmmword_100478890;
  v80 = &v81;
  sub_10030DD0C(&v77, 4, 1);
  sub_10030DD58((uint64_t)&v77, 0.0);
  v74 = 0x100000003;
  v72 = off_1008156E8;
  v73 = xmmword_100478880;
  v75 = &v76;
  sub_10030DD0C(&v72, 3, 1);
  sub_10030DD58((uint64_t)&v72, 0.0);
  v6 = 0;
  v7 = (uint64_t *)(a2 + 152);
  do
  {
    v8 = *(v7 - 7);
    *(_QWORD *)sub_10030E194((uint64_t)&v82, v6) = v8;
    v9 = *(v7 - 4);
    *(_QWORD *)sub_10030E194((uint64_t)&v77, v6) = v9;
    v10 = *v7;
    *(_QWORD *)sub_10030E194((uint64_t)&v72, v6++) = v10;
    ++v7;
  }
  while (v6 != 3);
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)sub_10030E194((uint64_t)&v77, 3u) = v11;
  sub_100359F98((uint64_t)&v77, (uint64_t)v71);
  v98 = 0x100000003;
  *(_QWORD *)buf = off_1008156E8;
  *(_OWORD *)&buf[8] = xmmword_100478880;
  v99 = v100;
  sub_10030E3B0((uint64_t)v71, a1 + 240, (uint64_t)buf);
  v68 = 0x100000003;
  v66 = off_1008156E8;
  v67 = xmmword_100478880;
  v69 = &v70;
  sub_10030F0E0((uint64_t)&v82, (uint64_t)buf, (uint64_t)&v66);
  v12 = *(double *)a2;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)a2;
  if (v12 > *(double *)(a1 + 224))
  {
    sub_10030EC4C(a1 + 96, (uint64_t)&v82);
    v12 = *(double *)a2;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)a2;
  }
  if (v12 > *(double *)(a1 + 232))
  {
    sub_10030EC4C(a1 + 160, (uint64_t)&v72);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)a2;
  }
  v13 = *(double *)(a2 + 16);
  if (v13 <= 0.0 || *(double *)(a2 + 8) < -1.0)
  {
    v14 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003EC61C(a2, v14, v13);
    goto LABEL_68;
  }
  v15 = *(_QWORD *)(a1 + 368);
  if (v15 == *(_QWORD *)(a1 + 360))
    goto LABEL_42;
  v63 = 0x100000003;
  v61 = off_1008156E8;
  v62 = xmmword_100478880;
  v64 = v65;
  sub_10030E2B4((uint64_t)&v66, v15 - 136, (uint64_t)&v61);
  v94 = 0x100000003;
  v92 = off_1008156E8;
  v93 = xmmword_100478880;
  v95 = v96;
  v98 = 0x100000134;
  *(_QWORD *)buf = off_1008157C0;
  *(_OWORD *)&buf[8] = xmmword_1004788A0;
  v99 = v100;
  v89 = 0x100000003;
  v87 = off_1008156E8;
  v88 = xmmword_100478880;
  v90 = v91;
  sub_10030E510((uint64_t)&v61, (uint64_t)&v92, (uint64_t)buf, (uint64_t)&v87, "2");
  v17 = v16;
  v63 = 0x100000003;
  v61 = off_1008156E8;
  v62 = xmmword_100478880;
  v64 = v65;
  sub_10030E2B4(a1 + 160, v15 - 64, (uint64_t)&v61);
  v94 = 0x100000003;
  v92 = off_1008156E8;
  v93 = xmmword_100478880;
  v95 = v96;
  v98 = 0x100000134;
  *(_QWORD *)buf = off_1008157C0;
  *(_OWORD *)&buf[8] = xmmword_1004788A0;
  v99 = v100;
  v89 = 0x100000003;
  v87 = off_1008156E8;
  v88 = xmmword_100478880;
  v90 = v91;
  sub_10030E510((uint64_t)&v61, (uint64_t)&v92, (uint64_t)buf, (uint64_t)&v87, "2");
  v19 = v17 + v18;
  v20 = *(double *)(a2 + 8);
  v21 = *(double *)(v15 - 168);
  v22 = v20 - v21;
  if (v20 - v21 <= 0.0)
  {
    if ((fabs(v22) - v19) / *(double *)(a2 + 16) > 6.0)
    {
      v24 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218496;
        *(double *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2048;
        v98 = *(_QWORD *)&v19;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter_with,nLoS->LoS event detected by the batch filter: Previous range %f m, Current range %f m, Distance travelled %f m", buf, 0x20u);
      }
      v25 = *(_QWORD *)(a1 + 360);
      i = xmmword_100478880;
      if (v25 != *(_QWORD *)(a1 + 368))
      {
        do
        {
          v63 = 0x100000003;
          v61 = off_1008156E8;
          v62 = i;
          v64 = v65;
          sub_10030E2B4((uint64_t)&v66, v25 + 40, (uint64_t)&v61);
          v94 = 0x100000003;
          v92 = off_1008156E8;
          v93 = xmmword_100478880;
          v95 = v96;
          v98 = 0x100000134;
          *(_QWORD *)buf = off_1008157C0;
          *(_OWORD *)&buf[8] = xmmword_1004788A0;
          v99 = v100;
          v89 = 0x100000003;
          v87 = off_1008156E8;
          v88 = xmmword_100478880;
          v90 = v91;
          sub_10030E510((uint64_t)&v61, (uint64_t)&v92, (uint64_t)buf, (uint64_t)&v87, "2");
          v28 = v27;
          v63 = 0x100000003;
          v61 = off_1008156E8;
          v62 = xmmword_100478880;
          v64 = v65;
          sub_10030E2B4((uint64_t)&v72, v25 + 112, (uint64_t)&v61);
          v94 = 0x100000003;
          v92 = off_1008156E8;
          v93 = xmmword_100478880;
          v95 = v96;
          v98 = 0x100000134;
          *(_QWORD *)buf = off_1008157C0;
          *(_OWORD *)&buf[8] = xmmword_1004788A0;
          v99 = v100;
          v89 = 0x100000003;
          v87 = off_1008156E8;
          v88 = xmmword_100478880;
          v90 = v91;
          sub_10030E510((uint64_t)&v61, (uint64_t)&v92, (uint64_t)buf, (uint64_t)&v87, "2");
          v30 = v28 + v29;
          v31 = *(double *)(v25 + 8);
          if ((v31 - *(double *)(a2 + 8) - v30) / *(double *)(a2 + 16) <= 6.0)
          {
            v25 += 176;
            v34 = *(_QWORD *)(a1 + 368);
            i = xmmword_100478880;
          }
          else
          {
            v32 = a3;
            v33 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
            {
              v36 = *(_QWORD *)v25;
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v36;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v31;
              _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter_with,Removing measurement at time %f s with range %f m", buf, 0x16u);
            }
            sub_1003193B4((uint64_t)buf, (__int128 *)(v25 + 176), *(__int128 **)(a1 + 368), v25);
            a3 = v32;
            v35 = *(_QWORD *)(a1 + 368);
            for (i = xmmword_100478880; v35 != v34; v35 -= 176)
            {
              *(_QWORD *)(v35 - 64) = off_100807398;
              *(_QWORD *)(v35 - 136) = off_100807398;
            }
            *(_QWORD *)(a1 + 368) = v34;
          }
        }
        while (v25 != v34);
      }
      sub_10031561C(a1);
      v37 = *(double **)(a1 + 360);
      v38 = *(double **)(a1 + 368);
      if (v37 == v38)
      {
        *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
      }
      else
      {
        v39 = v37 + 22;
        v40 = *(double **)(a1 + 360);
        if (v37 + 22 != v38)
        {
          v40 = *(double **)(a1 + 360);
          do
          {
            if (v39[1] < v40[1])
              v40 = v39;
            v39 += 22;
          }
          while (v39 != v38);
        }
        v41 = fmax(v40[1], 1.0);
        if (v41 != *(double *)(a1 + 328))
        {
          *(double *)(a1 + 328) = v41;
          do
          {
            v42 = sub_10035A1DC(v37[1] / *(double *)(a1 + 328));
            v37[4] = v42;
            v37[2] = v37[1] / (v42 * v37[3]);
            v37 += 22;
          }
          while (v37 != v38);
        }
      }
    }
    goto LABEL_42;
  }
  if ((v22 - v19) / *(double *)(a2 + 16) <= 6.0)
  {
LABEL_42:
    v43 = *(double **)(a1 + 360);
    v44 = *(double **)(a1 + 368);
    v45 = *(double *)(a2 + 8);
    if (v43 == v44)
    {
      v50 = fmax(v45, 1.0);
      *(double *)(a1 + 328) = v50;
      v51 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v50;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Minimum observed range initialized to %f m", buf, 0xCu);
      }
    }
    else
    {
      v46 = *(double *)(a1 + 328);
      if (v45 < v46 && v46 > 1.0)
      {
        v47 = fmax(v45, 1.0);
        *(double *)(a1 + 328) = v47;
        v48 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(double *)&buf[4] = v47;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Minimum observed range changed to %f m", buf, 0xCu);
          v43 = *(double **)(a1 + 360);
          v44 = *(double **)(a1 + 368);
        }
        while (v43 != v44)
        {
          v49 = sub_10035A1DC(v43[1] / *(double *)(a1 + 328));
          v43[4] = v49;
          v43[2] = v43[1] / (v49 * v43[3]);
          v43 += 22;
        }
      }
    }
    v52 = sub_10035A1DC(*(double *)(a2 + 8) / *(double *)(a1 + 328));
    v53 = *(double *)(a2 + 8);
    v54 = v53 / 10.0 * 0.1;
    if (v53 <= 10.0)
      v54 = 0.1;
    sub_1003186A8((uint64_t)buf, (uint64_t)&v66, (uint64_t)&v72, *(_DWORD *)(a2 + 24), *(double *)a2, v53, v54, v52);
    v55 = *(_QWORD *)(a1 + 368);
    if (v55 >= *(_QWORD *)(a1 + 376))
    {
      v56 = sub_100319438((uint64_t *)(a1 + 360), (__int128 *)buf);
    }
    else
    {
      sub_1003195C4(a1 + 376, *(_QWORD *)(a1 + 368), (__int128 *)buf);
      v56 = v55 + 176;
      *(_QWORD *)(a1 + 368) = v55 + 176;
    }
    *(_QWORD *)(a1 + 368) = v56;
    goto LABEL_58;
  }
  v23 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218496;
    *(double *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v20;
    *(_WORD *)&buf[22] = 2048;
    v98 = *(_QWORD *)&v19;
    _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter_with,LoS->nLoS event detected by the batch filter: Previous range %f m, Current range %f m, Distance travelled %f m", buf, 0x20u);
  }
LABEL_58:
  if ((*(_BYTE *)(a1 + 560) || *(_BYTE *)(a1 + 561))
    && (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 4)) >= 4)
  {
    sub_1003156A0(a1);
  }
  v57 = *(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v57 >> 4)) < 4
    || *(_BYTE *)(a1 + 560)
    || *(_BYTE *)(a1 + 561)
    || *(double *)(a1 + 312) - *(double *)(a1 + 320) < 0.5)
  {
    if (v57 == 176)
    {
      v58 = *(double *)(a1 + 312);
      *(double *)(a1 + 304) = v58;
      *(double *)(a1 + 320) = v58 + -0.5;
    }
  }
  else
  {
    v60 = sub_100315868(a1);
    *(_BYTE *)(a1 + 562) = v60;
    if (v60)
    {
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
      sub_10031391C(a1);
    }
  }
LABEL_68:
  sub_100313EA4(a1);
  *a3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)(a1 + 29);
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
  result = sub_100318718(a3 + 2, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 6));
  a3[5] = *(_QWORD *)(a1 + 64);
  return result;
}

void sub_1003154C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 368) = v2;
  _Unwind_Resume(a1);
}

void sub_1003154F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  __int16 v10[8];

  v2 = *(_QWORD *)(a1 + 360);
  for (i = *(_QWORD *)(a1 + 368); i != v2; i -= 176)
  {
    *(_QWORD *)(i - 64) = off_100807398;
    *(_QWORD *)(i - 136) = off_100807398;
  }
  *(_QWORD *)(a1 + 368) = v2;
  sub_10031561C(a1);
  v4 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 29) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    operator delete(v4);
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
  v5 = *(_QWORD **)(a1 + 72);
  v6 = *(_QWORD **)(a1 + 80);
  if (v6 != v5)
  {
    do
    {
      *(v6 - 8) = off_100807398;
      *(v6 - 16) = off_100807398;
      *(v6 - 32) = off_100807398;
      v7 = v6 - 61;
      v8 = v6 - 70;
      *(v6 - 53) = off_100807398;
      *v8 = off_100807398;
      v6 -= 70;
      *v7 = off_100807398;
    }
    while (v8 != v5);
  }
  *(_QWORD *)(a1 + 80) = v5;
  if (*(_BYTE *)(a1 + 352))
    *(_BYTE *)(a1 + 352) = 0;
  v9 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Batch filter is reinitialized", (uint8_t *)v10, 2u);
  }
}

void sub_10031561C(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 304);
  *(_WORD *)(a1 + 560) = 257;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 562) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 564) = 0;
  v1 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Batch filter is reset", v2, 2u);
  }
}

void sub_1003156A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  double *v9;
  double *v10;
  BOOL v11;
  double v12;
  int v13;
  BOOL v14;
  char v15;
  double v16;
  char v18;
  _OWORD v19[2];
  uint64_t v20;
  void (**v21)();
  int v22;
  void (**v23)();
  _OWORD v24[2];
  uint64_t v25;
  void (**v26)();
  int v27;
  void (**v28)();

  v1 = *(_QWORD *)(a1 + 360);
  v2 = *(_QWORD *)(a1 + 368);
  if (v1 != v2)
  {
    if (v1 + 176 != v2)
    {
      v3 = v1 + 288;
      do
      {
        v4 = *(_OWORD *)v1;
        v5 = *(_OWORD *)(v1 + 16);
        v25 = *(_QWORD *)(v1 + 32);
        v24[0] = v4;
        v24[1] = v5;
        sub_10031895C((uint64_t)&v26, v1 + 40);
        v27 = *(_DWORD *)(v1 + 104);
        sub_10031895C((uint64_t)&v28, v1 + 112);
        v6 = *(_OWORD *)(v3 - 112);
        v7 = *(_OWORD *)(v3 - 96);
        v20 = *(_QWORD *)(v3 - 80);
        v19[0] = v6;
        v19[1] = v7;
        sub_10031895C((uint64_t)&v21, v3 - 72);
        v22 = *(_DWORD *)(v3 - 8);
        sub_10031895C((uint64_t)&v23, v3);
        v23 = off_100807398;
        v21 = off_100807398;
        v28 = off_100807398;
        v26 = off_100807398;
        if (*((double *)v24 + 1) < *((double *)v19 + 1))
          v1 = v3 - 112;
        v8 = v3 + 64;
        v3 += 176;
      }
      while (v8 != v2);
    }
    v9 = *(double **)a1;
    v10 = *(double **)(a1 + 8);
    if (*(double **)a1 != v10)
    {
      v11 = 0;
      v12 = *(double *)(v1 + 8);
      do
      {
        if (v11)
        {
          v11 = 1;
        }
        else
        {
          LOBYTE(v19[0]) = 1;
          v18 = 0;
          *(_QWORD *)&v24[0] = 0;
          sub_100317B7C(*v9, v9[1], a1, (uint64_t *)(a1 + 360), (BOOL *)v19, &v18, (double *)v24);
          v13 = LOBYTE(v19[0]);
          if (*(_BYTE *)(a1 + 560))
            v14 = LOBYTE(v19[0]) == 0;
          else
            v14 = 1;
          v15 = !v14;
          *(_BYTE *)(a1 + 560) = v15;
          if (!v13)
          {
            if (!v18)
            {
              *(_BYTE *)(a1 + 561) = 0;
              return;
            }
            v16 = *(double *)(a1 + 336);
            if (v16 < *(double *)v24)
              v16 = *(double *)v24;
            *(double *)(a1 + 336) = v16;
          }
          v11 = v12 <= v9[1];
        }
        v9 += 2;
      }
      while (v9 != v10);
    }
  }
}

BOOL sub_100315868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t i;
  double v19;
  unsigned int v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t k;
  double v25;
  __double2 v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  NSObject *v37;
  unint64_t v38;
  uint64_t (**v39)();
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unsigned int v44;
  double v45;
  double v46;
  double *v47;
  double v48;
  double *v49;
  double v50;
  uint64_t v51;
  double v52;
  uint64_t *v53;
  double v54;
  uint64_t v55;
  double v56;
  double *v57;
  double v58;
  unint64_t v59;
  uint64_t v60;
  double *v61;
  double v62;
  double v63;
  double *v64;
  int v65;
  double v66;
  int v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t n;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t ii;
  NSObject *v88;
  uint64_t v89;
  uint64_t m;
  _QWORD *v91;
  uint64_t *v93;
  uint64_t j;
  int v95;
  double v96;
  uint64_t (**v97)();
  __int128 v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE v101[72];
  _BYTE v102[72];
  uint64_t (**v103)();
  __int128 v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  _BYTE v111[64];
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _BYTE buf[24];
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;

  v2 = *(_QWORD *)(a1 + 360);
  v1 = *(_QWORD *)(a1 + 368);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v1 - v2) >> 4)) >= 4)
  {
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v5 = (uint64_t *)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 72);
    v6 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 562))
      v7 = 0;
    else
      v7 = v4 == v6;
    if (v7)
    {
      if (v2 != v1)
      {
        for (i = v2 + 176; i != v1; i += 176)
        {
          if (*(double *)(i + 8) < *(double *)(v2 + 8))
            v2 = i;
        }
      }
      if (*(double *)(v2 + 8) >= 0.5)
        v19 = *(double *)(v2 + 8);
      else
        v19 = 0.5;
      sub_10031895C((uint64_t)v102, v2 + 40);
      sub_10031895C((uint64_t)v111, v2 + 112);
      v20 = 0;
      v108 = 0;
      v109 = 0;
      v110 = 0;
      do
      {
        sub_10031895C((uint64_t)buf, (uint64_t)v102);
        sub_10031895C((uint64_t)&v97, (uint64_t)v102);
        v21 = *(double *)sub_10030E194((uint64_t)buf, v20);
        *(double *)sub_10030E194((uint64_t)buf, v20) = v19 + v21;
        v22 = *(double *)sub_10030E194((uint64_t)&v97, v20);
        *(double *)sub_10030E194((uint64_t)&v97, v20) = v22 - v19;
        sub_10031680C(&v108, (uint64_t)buf);
        sub_10031680C(&v108, (uint64_t)&v97);
        ++v20;
      }
      while (v20 != 3);
      v23 = v108;
      for (j = v109; v23 != j; v23 += 64)
      {
        for (k = 0; k != 6; ++k)
        {
          v25 = *(double *)&qword_100478CA0[k];
          v26 = __sincos_stret(v25);
          v116 = 0x300000003;
          *(_QWORD *)buf = off_100815730;
          *(_OWORD *)&buf[8] = xmmword_100478B80;
          v117 = &v118;
          *(double *)sub_10030E274((uint64_t)buf, 0, 0) = v26.__cosval;
          *(_QWORD *)sub_10030E274((uint64_t)buf, 1, 0) = 0;
          *(double *)sub_10030E274((uint64_t)buf, 2, 0) = -v26.__sinval;
          *(_QWORD *)sub_10030E274((uint64_t)buf, 0, 1) = 0;
          *(_QWORD *)sub_10030E274((uint64_t)buf, 1, 1) = 0x3FF0000000000000;
          *(_QWORD *)sub_10030E274((uint64_t)buf, 2, 1) = 0;
          *(double *)sub_10030E274((uint64_t)buf, 0, 2) = v26.__sinval;
          *(_QWORD *)sub_10030E274((uint64_t)buf, 1, 2) = 0;
          *(double *)sub_10030E274((uint64_t)buf, 2, 2) = v26.__cosval;
          v99 = 0x100000003;
          v97 = off_1008156E8;
          v98 = xmmword_100478880;
          v100 = v101;
          sub_10030E3B0((uint64_t)buf, (uint64_t)v111, (uint64_t)&v97);
          v105 = 0x100000003;
          v103 = off_1008156E8;
          v104 = xmmword_100478880;
          v106 = &v107;
          sub_10030E2B4(v23, (uint64_t)&v97, (uint64_t)&v103);
          v99 = 0x100000004;
          v97 = off_100815778;
          v98 = xmmword_100478890;
          v100 = v101;
          v27 = sub_10027C1A4((uint64_t)&v103, 0);
          *(double *)sub_10030E194((uint64_t)&v97, 0) = v27;
          v28 = sub_10027C1A4((uint64_t)&v103, 1u);
          *(double *)sub_10030E194((uint64_t)&v97, 1u) = v28;
          v29 = sub_10027C1A4((uint64_t)&v103, 2u);
          *(double *)sub_10030E194((uint64_t)&v97, 2u) = v29;
          *(double *)sub_10030E194((uint64_t)&v97, 3u) = v25;
          v30 = v113;
          if (v113 >= v114)
          {
            v31 = sub_1003197EC(&v112, (uint64_t)&v97);
          }
          else
          {
            sub_100318C30(v113, (uint64_t)&v97);
            v31 = v30 + 72;
          }
          v113 = v31;
        }
      }
      *(_QWORD *)buf = &v108;
      sub_100319A64((void ***)buf);
    }
    else
    {
      if (v4 != v6)
      {
        v8 = 0;
        do
        {
          if (v8 >= v114)
          {
            v8 = sub_1003197EC(&v112, v4);
          }
          else
          {
            sub_100318C30(v8, v4);
            v8 += 72;
          }
          v113 = v8;
          v4 += 560;
        }
        while (v4 != v6);
        v6 = *v5;
      }
      sub_100318C30((uint64_t)buf, v6);
      v9 = &qword_100478C70;
      do
      {
        v10 = 0;
        v11 = *(double *)v9;
        do
        {
          if (v11 != 0.0 || *(double *)&qword_100478C88[v10] != 0.0)
          {
            sub_100318C30((uint64_t)&v97, (uint64_t)buf);
            v12 = *(double *)sub_10030E194((uint64_t)&v97, 1u);
            *(double *)sub_10030E194((uint64_t)&v97, 1u) = v11 + v12;
            v13 = *(double *)sub_10030E194((uint64_t)&v97, 3u);
            v14 = *(double *)&qword_100478C88[v10];
            *(double *)sub_10030E194((uint64_t)&v97, 3u) = v13 + v14;
            v15 = v113;
            if (v113 >= v114)
            {
              v16 = sub_1003197EC(&v112, (uint64_t)&v97);
            }
            else
            {
              sub_100318C30(v113, (uint64_t)&v97);
              v16 = v15 + 72;
            }
            v113 = v16;
          }
          ++v10;
        }
        while (v10 != 3);
        ++v9;
      }
      while (v9 != qword_100478C88);
    }
    v103 = 0;
    v104 = 0uLL;
    if (v112 != v113)
      sub_10031691C(a1, v112, a1 + 360);
    sub_100317248((uint64_t)&v103, 0, 0);
    v32 = 126 - 2 * __clz(0x4FCACE213F2B3885 * ((uint64_t)(v104 - (_QWORD)v103) >> 3));
    if ((uint64_t (**)())v104 == v103)
      v33 = 0;
    else
      v33 = v32;
    sub_10031A284((uint64_t)v103, v104, v33, 1);
    if (v103 == (uint64_t (**)())v104)
      goto LABEL_117;
    v35 = sub_1003172E4(v34, (uint64_t)v103, (uint64_t *)(a1 + 360));
    *(double *)(a1 + 344) = v35;
    *(_BYTE *)(a1 + 352) = 1;
    v36 = *(double *)(a1 + 616);
    if (v35 > v36)
    {
      v37 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v35;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v36;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Batch filter has detected an issue with the measurements - rms normalized error (%f) is above the threshold (%f)", buf, 0x16u);
      }
      sub_1003154F8(a1);
      v17 = 0;
      *(_BYTE *)(a1 + 563) = 1;
      goto LABEL_118;
    }
    v93 = v5;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v38 = sub_10031BCE8(&v108, (uint64_t)v103);
    v39 = v103;
    v109 = v38;
    if ((unint64_t)(0x4FCACE213F2B3885 * ((uint64_t)(v104 - (_QWORD)v103) >> 3)) >= 2)
    {
      v40 = 1;
      do
      {
        v41 = v38;
        if (v38 == v108)
          goto LABEL_67;
        v42 = 0;
        v43 = 1;
        do
        {
          v44 = 0;
          v45 = 0.0;
          do
          {
            v46 = *(double *)sub_10030E194((uint64_t)&v103[77 * v40 + 1], v44);
            v47 = (double *)sub_10030E194(v108 + 616 * v42 + 8, v44);
            v45 = v45 + (v46 - *v47) * (v46 - *v47);
            ++v44;
          }
          while (v44 != 3);
          v48 = *(double *)sub_10030E194((uint64_t)&v103[77 * v40 + 1], 3u);
          v49 = (double *)sub_10030E194(v108 + 616 * v42 + 8, 3u);
          if ((v43 & (sqrt(v45) > 0.5)) != 0)
          {
            v50 = fmod(v48 - *v49 + 3.14159265, 6.28318531);
            if (v50 < 0.0)
              v50 = v50 + 6.28318531;
            v43 = fabs(v50 + -3.14159265) > 0.0872664626;
          }
          else
          {
            v43 = 0;
          }
          ++v42;
          v41 = v108;
          v38 = v109;
        }
        while (0x4FCACE213F2B3885 * ((uint64_t)(v109 - v108) >> 3) > v42);
        v39 = v103;
        if (v43)
        {
LABEL_67:
          if (exp(*(double *)(v41 + 600) - *(double *)&v39[77 * v40 + 75]) > 0.01)
          {
            if (v38 >= v110)
            {
              v38 = sub_10031BCE8(&v108, (uint64_t)&v39[77 * v40]);
            }
            else
            {
              sub_10031A054((uint64_t)&v110, v38, (uint64_t)&v39[77 * v40]);
              v38 += 616;
            }
            v109 = v38;
            v39 = v103;
          }
        }
        ++v40;
      }
      while (0x4FCACE213F2B3885 * ((uint64_t)(v104 - (_QWORD)v39) >> 3) > v40);
    }
    v51 = v108;
    if ((unint64_t)(0x4FCACE213F2B3885 * ((uint64_t)(v38 - v108) >> 3)) <= 1)
    {
      v53 = v93;
    }
    else
    {
      v52 = exp(-*(double *)(v108 + 600));
      v53 = v93;
      v54 = 0.0;
      if (v51 != v38)
      {
        v55 = v51;
        do
        {
          v54 = v54 + exp(-*(double *)(v55 + 600));
          v55 += 616;
        }
        while (v55 != v38);
      }
      v56 = v52 / v54;
      if (v56 < 0.9)
      {
        v57 = (double *)sub_10030E194(v51 + 144, 1u);
        v51 = v108;
        v38 = v109;
        if ((unint64_t)(0x4FCACE213F2B3885 * ((uint64_t)(v109 - v108) >> 3)) >= 2)
        {
          v58 = *v57;
          v59 = 1;
          v60 = 760;
          while (1)
          {
            v61 = (double *)sub_10030E194(v51 + v60, 1u);
            v62 = fmod(*v61 - v58 + 3.14159265, 6.28318531);
            if (v62 < 0.0)
              v62 = v62 + 6.28318531;
            v63 = fabs(v62 + -3.14159265);
            if (v63 > 0.392699082)
              break;
            ++v59;
            v51 = v108;
            v38 = v109;
            v60 += 616;
            if (0x4FCACE213F2B3885 * ((uint64_t)(v109 - v108) >> 3) <= v59)
              goto LABEL_86;
          }
          v88 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(double *)&buf[4] = v56;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v63;
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Batch filter clearing solutions since the best one has a low weight (%f) and the horizontal angle difference to a secondary solution is too high (%f)", buf, 0x16u);
          }
          v89 = v108;
          for (m = v109; m != v89; *v91 = off_100807398)
          {
            *(_QWORD *)(m - 128) = off_100807398;
            *(_QWORD *)(m - 240) = off_100807398;
            v91 = (_QWORD *)(m - 608);
            *(_QWORD *)(m - 408) = off_100807398;
            *(_QWORD *)(m - 472) = off_100807398;
            *(_QWORD *)(m - 536) = off_100807398;
            m -= 616;
          }
          v109 = v89;
          goto LABEL_116;
        }
      }
    }
LABEL_86:
    if (v51 != v38)
    {
      do
      {
        v64 = (double *)sub_10030E274(v51 + 488, 1, 1);
        v65 = *(_DWORD *)(v51 + 384);
        if (v65 != *(_DWORD *)(v51 + 388))
          __assert_rtn("Trace", "cnmatrixbase.h", 4977, "A.NumRows() == A.NumCols()");
        v66 = *v64;
        if (v65 < 1)
        {
          v68 = 0.0;
        }
        else
        {
          v67 = 0;
          v68 = 0.0;
          do
          {
            v68 = v68 + sub_100319720(v51 + 376, v67, v67);
            ++v67;
          }
          while (v65 != v67);
        }
        if (sqrt(v66) * 180.0 / 3.14159265 <= *(double *)(a1 + 608) || v68 <= *(double *)(a1 + 600))
        {
          v51 += 616;
          v70 = v109;
        }
        else
        {
          sub_10031A1D0((uint64_t)&v97, v51 + 616, v109, v51);
          v70 = v69;
          for (n = v109; n != v69; *v72 = off_100807398)
          {
            *(_QWORD *)(n - 128) = off_100807398;
            *(_QWORD *)(n - 240) = off_100807398;
            v72 = (_QWORD *)(n - 608);
            *(_QWORD *)(n - 408) = off_100807398;
            *(_QWORD *)(n - 472) = off_100807398;
            *(_QWORD *)(n - 536) = off_100807398;
            n -= 616;
          }
          v109 = v69;
        }
      }
      while (v51 != v70);
      v73 = v108;
      if (v108 != v70)
      {
        v74 = *(_QWORD **)(a1 + 72);
        v75 = *(_QWORD **)(a1 + 80);
        if (v75 != v74)
        {
          do
          {
            *(v75 - 8) = off_100807398;
            *(v75 - 16) = off_100807398;
            *(v75 - 32) = off_100807398;
            v76 = v75 - 61;
            v77 = v75 - 70;
            *(v75 - 53) = off_100807398;
            *v77 = off_100807398;
            v75 -= 70;
            *v76 = off_100807398;
          }
          while (v77 != v74);
        }
        *(_QWORD *)(a1 + 80) = v74;
        v78 = *(double *)(v73 + 600);
        v79 = v73 + 488;
        v80 = 0.0;
        do
        {
          sub_100318C30((uint64_t)v102, v79 - 480);
          sub_10031895C((uint64_t)v111, v79 - 344);
          sub_100318E60((uint64_t)buf, v79 - 280);
          sub_100318AC8((uint64_t)&v97, v79);
          v81 = exp(v78 - *(double *)(v79 + 112));
          v82 = v81;
          v96 = v81;
          v83 = *(_DWORD *)(v79 + 120);
          v95 = v83;
          v84 = *(_QWORD *)(a1 + 80);
          if (v84 >= *(_QWORD *)(a1 + 88))
          {
            v85 = sub_10031BE0C(v53, (uint64_t)v102, (uint64_t)v111, (uint64_t)buf, (uint64_t)&v97, &v96, &v95, a1 + 96, a1 + 160);
          }
          else
          {
            sub_10031BF78(*(_QWORD *)(a1 + 80), (uint64_t)v102, (uint64_t)v111, (uint64_t)buf, (uint64_t)&v97, v83, a1 + 96, a1 + 160, v81);
            v85 = v84 + 560;
            *(_QWORD *)(a1 + 80) = v84 + 560;
          }
          *(_QWORD *)(a1 + 80) = v85;
          v80 = v80 + v82;
          v86 = v79 + 128;
          v79 += 616;
        }
        while (v86 != v70);
        for (ii = *v53; ii != v85; ii += 560)
          *(double *)(ii + 416) = *(double *)(ii + 416) / v80;
      }
    }
LABEL_116:
    *(_QWORD *)buf = &v108;
    sub_100319C80((void ***)buf);
LABEL_117:
    v17 = *(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 72);
LABEL_118:
    *(_QWORD *)buf = &v103;
    sub_100319C80((void ***)buf);
    *(_QWORD *)buf = &v112;
    sub_100319760((void ***)buf);
    return v17;
  }
  return 0;
}

void sub_1003166CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  void **a67;
  uint64_t v67;

  *(_QWORD *)(v67 + 176) = &a53;
  sub_100319C80(&a67);
  *(_QWORD *)(v67 + 176) = v67;
  sub_100319C80(&a67);
  *(_QWORD *)(v67 + 176) = &a64;
  sub_100319760(&a67);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003167EC(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_1003167FC(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_10031680C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v9 + 1) >> 58)
      sub_100026E7C();
    v10 = v5 - *a1;
    v11 = v10 >> 5;
    if (v10 >> 5 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)sub_100319B64(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[64 * v9];
    v17 = &v13[64 * v12];
    sub_10031895C((uint64_t)v15, a2);
    v16 = v15 + 64;
    sub_100319AF0(a1, &v14);
    v8 = a1[1];
    sub_100319C30((uint64_t)&v14);
  }
  else
  {
    sub_10031895C(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v8;
}

void sub_1003168FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_10031691C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[72];

  sub_100318C30((uint64_t)v5, a2);
  sub_100317464(a1, (uint64_t)v5, a3);
}

void sub_100317158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100317248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  char v9;

  if (a2 != a3)
  {
    sub_10031A1D0((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    for (i = *(_QWORD *)(a1 + 8); i != v5; *v7 = off_100807398)
    {
      *(_QWORD *)(i - 128) = off_100807398;
      *(_QWORD *)(i - 240) = off_100807398;
      v7 = (_QWORD *)(i - 608);
      *(_QWORD *)(i - 408) = off_100807398;
      *(_QWORD *)(i - 472) = off_100807398;
      *(_QWORD *)(i - 536) = off_100807398;
      i -= 616;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  return a2;
}

double sub_1003172E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  double v7;
  __int128 v8;
  double v9;
  double v10;
  double *v11;
  uint64_t v12;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 == v4)
  {
    v7 = 0.0;
    v12 = *a3;
  }
  else
  {
    v6 = a2 + 8;
    v7 = 0.0;
    do
    {
      v21 = 0x100000001;
      v19 = off_100815C78;
      *(_QWORD *)&v8 = 0x100000001;
      *((_QWORD *)&v8 + 1) = 0x100000001;
      v20 = v8;
      v22 = &v23;
      v16 = 0x400000001;
      v14 = off_100815A40;
      v15 = xmmword_100478BC0;
      v17 = &v18;
      sub_10035A7CC(v6, v3 + 40, v3 + 112, (uint64_t)&v19, (uint64_t)&v14);
      v9 = *(double *)(v3 + 32);
      v10 = *(double *)(v3 + 8);
      v11 = (double *)sub_10030E194((uint64_t)&v19, 0);
      v7 = v7 + 1.0 / (v9 * 0.1) * (v10 - *v11) * (1.0 / (v9 * 0.1) * (v10 - *v11));
      v3 += 176;
    }
    while (v3 != v4);
    v3 = *a3;
    v12 = a3[1];
  }
  return sqrt(v7 / (double)(unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v12 - v3) >> 4) - 3));
}

_QWORD *sub_100317454(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_100317464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  double v7;
  double *v8;
  double *i;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double *v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE v18[128];
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (**v24)();
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  double *v29;
  double *v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE v36[128];
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  v5 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
  v30 = 0;
  v29 = 0;
  v31 = 0;
  sub_1003177D4((uint64_t *)&v29, v5);
  sub_1003178F8(v6, a2, (double **)a3, (uint64_t *)&v29);
  v26 = 0x400000004;
  v24 = off_100815A88;
  v25 = xmmword_100478BA0;
  v27 = &v28;
  sub_10030DD0C(&v24, 4, 4);
  sub_10030DD58((uint64_t)&v24, 0.0);
  v21 = 0x100000004;
  v19 = off_100815778;
  v20 = xmmword_100478890;
  v22 = &v23;
  sub_10030DD0C(&v19, 4, 1);
  v7 = 0.0;
  sub_10030DD58((uint64_t)&v19, 0.0);
  v8 = v29;
  for (i = v30; v8 != i; v8 = (double *)(v11 + 72))
  {
    v10 = (uint64_t)(v8 + 10);
    v12 = *v8;
    v11 = (uint64_t)(v8 + 1);
    v16 = 0x400000004;
    v14 = off_100815A88;
    v15 = xmmword_100478BA0;
    v17 = v18;
    sub_10030E3B0(v10, v11, (uint64_t)&v14);
    v34 = 0x400000004;
    v32 = off_100815A88;
    v33 = xmmword_100478BA0;
    v35 = v36;
    sub_10030F0E0((uint64_t)&v24, (uint64_t)&v14, (uint64_t)&v32);
    sub_10030EC4C((uint64_t)&v24, (uint64_t)&v32);
    v16 = 0x100000004;
    v14 = off_100815778;
    v15 = xmmword_100478890;
    v11 += 72;
    v17 = v18;
    sub_10031CBA0(v11, (uint64_t)&v14, v12);
    v34 = 0x100000004;
    v32 = off_100815778;
    v33 = xmmword_100478890;
    v35 = v36;
    sub_10030F0E0((uint64_t)&v19, (uint64_t)&v14, (uint64_t)&v32);
    sub_10030EC4C((uint64_t)&v19, (uint64_t)&v32);
    v7 = v7 + v12 * v12;
  }
  v13 = (double *)sub_10030E274((uint64_t)&v24, 3, 3);
  *v13 = *v13 + 0.101321184;
  v16 = 0x400000004;
  v14 = off_100815A88;
  v15 = xmmword_100478BA0;
  v17 = v18;
  v39 = 0x100000004;
  v37 = off_100815BA8;
  v38 = xmmword_100478890;
  v40 = &v41;
  v34 = 0x100000010;
  v32 = off_100815C30;
  v33 = xmmword_100478BB0;
  v35 = v36;
  sub_10031C6D8((uint64_t)&v24, (uint64_t)&v37, (uint64_t)&v32, (uint64_t)&v14);
}

void sub_100317788(_Unwind_Exception *a1)
{
  STACK[0x220] = (unint64_t)&STACK[0x208];
  sub_10031C3B4((void ***)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_1003177D4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *__p;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x86BCA1AF286BCA1BLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1AF286BCA1AF287)
      sub_100026E7C();
    v5 = a1[1] - *a1;
    v13 = v3;
    __p = sub_100152EEC(v3, a2);
    v10 = (char *)__p + v5;
    v11 = (char *)__p + v5;
    v12 = (char *)__p + 152 * v6;
    sub_10031C3F8(a1, &__p);
    v7 = v10;
    v8 = v11;
    if (v11 != v10)
    {
      do
      {
        *((_QWORD *)v8 - 9) = off_100807398;
        *((_QWORD *)v8 - 18) = off_100807398;
        v8 -= 152;
      }
      while (v8 != v7);
      v11 = v7;
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_1003178F8(uint64_t a1, uint64_t a2, double **a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double *v9;
  __int128 v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  unsigned int v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  double v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  v6 = *a4;
  v7 = a4[1];
  if (*a4 != v7)
  {
    do
    {
      *(_QWORD *)(v7 - 72) = off_100807398;
      *(_QWORD *)(v7 - 144) = off_100807398;
      v7 -= 152;
    }
    while (v7 != v6);
    a4[1] = v6;
    sub_1003177D4(a4, 0x2E8BA2E8BA2E8BA3 * (((char *)a3[1] - (char *)*a3) >> 4));
  }
  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      v39 = 0x100000001;
      v37 = off_100815C78;
      *(_QWORD *)&v10 = 0x100000001;
      *((_QWORD *)&v10 + 1) = 0x100000001;
      v38 = v10;
      v40 = &v41;
      v34 = 0x400000001;
      v32 = off_100815A40;
      v33 = xmmword_100478BC0;
      v35 = &v36;
      sub_10035A7CC(a2, (uint64_t)(v8 + 5), (uint64_t)(v8 + 14), (uint64_t)&v37, (uint64_t)&v32);
      v12 = v8[3];
      v11 = v8[4];
      v31 = 0.0;
      v13 = v8[2];
      v14 = (double *)sub_10030E194((uint64_t)&v37, 0);
      v15 = 1.0 / (v12 * v11);
      v31 = v13 - v15 * *v14;
      v28 = 0x400000001;
      v26 = off_100815A40;
      v27 = xmmword_100478BC0;
      v29 = &v30;
      sub_10031CBA0((uint64_t)&v32, (uint64_t)&v26, v15);
      v16 = 0;
      v23 = 0x100000004;
      v21 = off_100815778;
      v22 = xmmword_100478890;
      v24 = &v25;
      do
      {
        v17 = sub_10027C1A4((uint64_t)&v26, v16);
        *(double *)sub_10030E194((uint64_t)&v21, v16++) = v17;
      }
      while (v16 != 4);
      v18 = a4[1];
      if (v18 >= a4[2])
      {
        v19 = sub_10031CC5C(a4, &v31, (uint64_t)&v26, (uint64_t)&v21);
      }
      else
      {
        sub_10031CDF8((double *)a4[1], (uint64_t)&v26, (uint64_t)&v21, v31);
        v19 = v18 + 152;
        a4[1] = v18 + 152;
      }
      a4[1] = v19;
      v8 += 22;
    }
    while (v8 != v9);
  }
}

void sub_100317B54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_100317B5C(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_100317B6C(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_100317B7C(double a1, double a2, uint64_t a3, uint64_t *a4, BOOL *a5, char *a6, double *a7)
{
  uint64_t v7;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  double v31;
  double *v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  char v46;
  NSObject *v47;
  _BOOL4 v48;
  int v49;
  const char *v50;
  const char *v51;
  int v52;
  double *v53;
  double v54;
  uint64_t (**v55)();
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE v60[32];
  uint64_t (**v61)();
  __int128 v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE v65[32];
  uint64_t (**v66)();
  __int128 v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE v70[32];
  uint64_t (**v71)();
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t (**v76)();
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t (**v84)();
  __int128 v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE v88[1800];
  _BYTE buf[24];
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;

  *a5 = 1;
  *a6 = 0;
  *a7 = 0.0;
  v7 = a4[1];
  if (*a4 != v7)
  {
    v14 = 0x2E8BA2E8BA2E8BA3 * ((v7 - *a4) >> 4);
    v81 = 0;
    v82 = 0;
    v83 = 0;
    sub_10031834C(&v81, v14);
    v78 = 0x100000002;
    v76 = off_100815CC0;
    v77 = xmmword_100478BD0;
    v79 = &v80;
    v15 = *a4;
    v16 = a4[1];
    while (v15 != v16)
    {
      if (*(double *)(v15 + 8) <= a2)
      {
        v17 = sub_10027C1A4(v15 + 40, 2u);
        *(double *)sub_10030E194((uint64_t)&v76, 0) = v17;
        v18 = sub_10027C1A4(v15 + 40, 0);
        *(double *)sub_10030E194((uint64_t)&v76, 1u) = v18;
        v19 = v82;
        if (v82 >= v83)
        {
          v20 = sub_10031D1F4(&v81, (uint64_t)&v76);
        }
        else
        {
          sub_10031CFEC(v82, (uint64_t)&v76);
          v20 = v19 + 56;
        }
        v82 = v20;
      }
      v15 += 176;
    }
    if (v81 != v82)
    {
      v53 = a7;
      v73 = 0x100000002;
      v71 = off_100815CC0;
      v72 = xmmword_100478BD0;
      v74 = &v75;
      sub_10030DD0C(&v71, 2, 1);
      sub_10030DD58((uint64_t)&v71, 0.0);
      v22 = v81;
      for (i = v82; v22 != i; v22 += 56)
      {
        v86 = 0x100000002;
        v84 = off_100815CC0;
        v85 = xmmword_100478BD0;
        v87 = v88;
        sub_10030F0E0((uint64_t)&v71, v22, (uint64_t)&v84);
        sub_10030EC4C((uint64_t)&v71, (uint64_t)&v84);
      }
      v86 = 0x100000002;
      v84 = off_100815CC0;
      v85 = xmmword_100478BD0;
      v87 = v88;
      sub_10031CBA0((uint64_t)&v71, (uint64_t)&v84, 1.0 / (double)v14);
      sub_10030EC4C((uint64_t)&v71, (uint64_t)&v84);
      v24 = v81;
      v23 = v82;
      if (v81 != v82)
      {
        v25 = 0.0;
        do
        {
          v86 = 0x100000002;
          v84 = off_100815CC0;
          v85 = xmmword_100478BD0;
          v87 = v88;
          sub_10030E2B4(v24, (uint64_t)&v71, (uint64_t)&v84);
          sub_10030EC4C(v24, (uint64_t)&v84);
          v68 = 0x100000002;
          v66 = off_100815CC0;
          v67 = xmmword_100478BD0;
          v69 = v70;
          v86 = 0x1000000E1;
          v84 = off_100815D08;
          v85 = xmmword_100478BE0;
          v87 = v88;
          v63 = 0x100000002;
          v61 = off_100815CC0;
          v62 = xmmword_100478BD0;
          v64 = v65;
          sub_10030E510(v24, (uint64_t)&v66, (uint64_t)&v84, (uint64_t)&v61, "2");
          if (v26 > v25)
            v25 = v26;
          v24 += 56;
        }
        while (v24 != v23);
        *a5 = v25 < 0.3;
        if (v25 < 0.3)
          goto LABEL_54;
        v86 = 0x200000002;
        v84 = off_100815D50;
        v85 = xmmword_100478BF0;
        v87 = v88;
        sub_10030DD0C(&v84, 2, 2);
        sub_10030DD58((uint64_t)&v84, 0.0);
        v27 = v81;
        v28 = v82;
        if (v81 != v82)
        {
          while (1)
          {
            v30 = *(_DWORD *)(v27 + 8);
            v29 = *(_DWORD *)(v27 + 12);
            v58 = 0x200000001;
            v59 = 0;
            v56 = 0;
            v57 = 0;
            v55 = off_100815D98;
            if (v29 > 1)
              break;
            if (v30 >= 3)
            {
              v49 = 423;
              v50 = "this->max_num_cols_ >= num_cols";
LABEL_58:
              __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v49, v50);
            }
            v56 = __PAIR64__(v30, v29);
            LODWORD(v57) = v30 * v29;
            HIDWORD(v57) = v29;
            v59 = v60;
            sub_10030E1CC(v27, &v55);
            v63 = 0x200000002;
            v61 = off_100815D50;
            v62 = xmmword_100478BF0;
            v64 = v65;
            sub_10030E3B0(v27, (uint64_t)&v55, (uint64_t)&v61);
            v68 = 0x200000002;
            v66 = off_100815D50;
            v67 = xmmword_100478BF0;
            v69 = v70;
            sub_10030F0E0((uint64_t)&v84, (uint64_t)&v61, (uint64_t)&v66);
            sub_10030EC4C((uint64_t)&v84, (uint64_t)&v66);
            v27 += 56;
            if (v27 == v28)
              goto LABEL_23;
          }
          v49 = 422;
          v50 = "this->max_num_rows_ >= num_rows";
          goto LABEL_58;
        }
LABEL_23:
        v68 = 0x200000002;
        v66 = off_100815D50;
        v67 = xmmword_100478BF0;
        v69 = v70;
        v63 = 0x200000002;
        v61 = off_100815D50;
        v62 = xmmword_100478BF0;
        v64 = v65;
        sub_100318438((uint64_t)&v84, (uint64_t)&v66, (uint64_t)&v61);
        v31 = *(double *)sub_10030E274((uint64_t)&v61, 0, 0);
        v32 = (double *)sub_10030E274((uint64_t)&v61, 1, 1);
        if (*v32 >= v31)
          v33 = v31;
        else
          v33 = *v32;
        v58 = 0x200000002;
        v55 = off_100815D50;
        if (DWORD1(v67) > 2)
        {
          v51 = "this->max_num_rows_ >= num_rows";
          v52 = 422;
        }
        else
        {
          if (v67 < 3)
          {
            v56 = __PAIR64__(v67, DWORD1(v67));
            LODWORD(v57) = v67 * DWORD1(v67);
            HIDWORD(v57) = DWORD1(v67);
            v59 = v60;
            sub_10030E1CC((uint64_t)&v66, &v55);
            v34 = v81;
            v35 = v82;
            if (v81 == v82)
            {
              v43 = 0.0;
              v44 = 0.0;
            }
            else
            {
              v54 = v33;
              v36 = 0.0;
              v37 = 0.0;
              v38 = 0.0;
              v39 = 0.0;
              do
              {
                v90 = 0x100000002;
                *(_QWORD *)buf = off_100815CC0;
                *(_OWORD *)&buf[8] = xmmword_100478BD0;
                v91 = &v92;
                sub_10030E3B0((uint64_t)&v55, v34, (uint64_t)buf);
                v40 = sub_10027C1A4((uint64_t)buf, 0);
                v41 = sub_10027C1A4((uint64_t)buf, 1u);
                if (v40 < v39)
                  v42 = v40;
                else
                  v42 = v39;
                if (v40 > v38)
                  v38 = v40;
                else
                  v39 = v42;
                if (v41 <= v36)
                {
                  if (v41 < v37)
                    v37 = v41;
                }
                else
                {
                  v36 = v41;
                }
                v34 += 56;
              }
              while (v34 != v35);
              v43 = v38 - v39;
              v44 = v36 - v37;
              v33 = v54;
            }
            if (v44 >= v43)
              v45 = v43;
            else
              v45 = v44;
            if (v43 < v44)
              v43 = v44;
            *v53 = v43;
            if (v45 >= a1)
            {
              v47 = qword_10085F520;
              v48 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
              v46 = 0;
              if (v48)
              {
                *(_DWORD *)buf = 134218496;
                *(double *)&buf[4] = a2;
                *(_WORD *)&buf[12] = 2048;
                *(double *)&buf[14] = v33;
                *(_WORD *)&buf[22] = 2048;
                v90 = *(_QWORD *)&v45;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Batch filter problem is observable now from the bin with max range %3.1f m: smallest eigenvalue is %f, smallest rectangular box dimension is %f m", buf, 0x20u);
                v46 = 0;
              }
            }
            else
            {
              v46 = 1;
            }
            *a6 = v46;
            goto LABEL_54;
          }
          v51 = "this->max_num_cols_ >= num_cols";
          v52 = 423;
        }
        __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v52, v51);
      }
      *a5 = 1;
    }
LABEL_54:
    v84 = (uint64_t (**)())&v81;
    sub_10031CE54((void ***)&v84);
  }
}

void sub_1003182C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  a15 = (void **)&a56;
  sub_10031CE54(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10031834C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      sub_100026E7C();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100028A48(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    sub_10031CEE0(a1, v7);
    return sub_10031D1A4((uint64_t)v7);
  }
  return result;
}

void sub_1003183F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10031D1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100318408(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_100318418(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_100318428(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_100318438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  char v5;
  __int16 v6;
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v34 = 0x200000002;
  v32 = off_100815D50;
  v33 = xmmword_100478BF0;
  v35 = &v36;
  v29 = 0x200000002;
  v27 = off_100815D50;
  v28 = xmmword_100478BF0;
  v30 = &v31;
  v24 = 0x200000002;
  v22 = off_100815D50;
  v23 = xmmword_100478BF0;
  v25 = &v26;
  v19 = 0x100000002;
  v17 = off_100815CC0;
  v18 = xmmword_100478BD0;
  v20 = &v21;
  v14 = 0x200000002;
  v12 = off_100815D50;
  v13 = xmmword_100478BF0;
  v15 = &v16;
  v9 = 0x1000000A8;
  v7 = off_100815DE0;
  v8 = xmmword_100478C00;
  v10 = &v11;
  sub_10031D438(a1, (uint64_t)&v32, a3, (uint64_t)&v27, a2, (uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v12, (uint64_t)&v7);
  if (DWORD2(v28))
  {
    v3 = 0;
    while (*(double *)sub_10030E194((uint64_t)&v27, v3) == 0.0)
    {
      if (++v3 >= DWORD2(v28))
        goto LABEL_6;
    }
    v6 = 4;
    v5 = 2;
    cnprint::CNPrinter::Print(&v6, &v5);
  }
LABEL_6:
  if (DWORD2(v23))
  {
    v4 = 0;
    while (*(double *)sub_10030E194((uint64_t)&v22, v4) == 0.0)
    {
      if (++v4 >= DWORD2(v23))
        return;
    }
    v6 = 4;
    v5 = 2;
    cnprint::CNPrinter::Print(&v6, &v5);
  }
}

void sub_100318614(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_100026E7C();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10005538C(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1003186A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8)
{
  *(double *)a1 = a5;
  *(double *)(a1 + 8) = a6;
  *(double *)(a1 + 16) = a6 / (a7 * a8);
  *(double *)(a1 + 24) = a7;
  *(double *)(a1 + 32) = a8;
  sub_10031895C(a1 + 40, a2);
  *(_DWORD *)(a1 + 104) = a4;
  sub_10031895C(a1 + 112, a3);
  return a1;
}

void sub_100318708(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

_QWORD *sub_100318718(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100318790(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100318774(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100318790(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x155555555555556)
    sub_100026E7C();
  result = (char *)sub_1003187E0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[192 * v4];
  return result;
}

void *sub_1003187E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556)
    sub_1000260B0();
  return operator new(192 * a2);
}

char *sub_100318824(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 6) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x155555555555555)
      sub_100026E7C();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 6);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAALL)
      v12 = 0x155555555555555;
    else
      v12 = v11;
    result = sub_100318790(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 6) >= a4)
    goto LABEL_16;
  v16 = &__src[64 * ((v15 - v9) >> 6)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

__n128 sub_10031895C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x100000003;
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1008156E8;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 3)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_100318AB8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

__n128 sub_100318AC8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x300000003;
  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100815730;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 3)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 4)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 3u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_100318C20(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

__n128 sub_100318C30(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x100000004;
  *(_QWORD *)(a1 + 24) = 0x100000004;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100815778;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 4)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 4u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_100318D8C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_100318D9C(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_100318DBC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_100318DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[4];

  sub_10030DC3C(a1, v3, a3);
}

void sub_100318DE8(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_100318E08(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_100318E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[16];

  sub_10030DC3C(a1, v3, a3);
}

__n128 sub_100318E60(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x400000004;
  *(_QWORD *)(a1 + 24) = 0x400000004;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100815A88;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 4)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 5)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 4u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 4u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_100318FB8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

_QWORD *sub_100318FC8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10013C84C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100319024(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100319040(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v3 = v1[1];
    if (v3 != v2)
    {
      do
      {
        *(v3 - 8) = off_100807398;
        *(v3 - 16) = off_100807398;
        *(v3 - 32) = off_100807398;
        v4 = v3 - 61;
        v5 = v3 - 70;
        *(v3 - 53) = off_100807398;
        *v5 = off_100807398;
        v3 -= 70;
        *v4 = off_100807398;
      }
      while (v5 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

void sub_10031909C(void ***a1)
{
  void **v1;
  char *v2;
  char *i;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 176)
    {
      *((_QWORD *)i - 8) = off_100807398;
      *((_QWORD *)i - 17) = off_100807398;
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_1003190E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10031919C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100319154(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL)
    sub_1000260B0();
  return operator new(176 * a2);
}

uint64_t sub_10031919C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = a7 - 176;
  while (a3 + v11 != a5)
  {
    v13 = v12 + v11;
    v11 -= 176;
    sub_100319240(a1, v13, (__int128 *)(v11 + a3));
  }
  return a6;
}

double sub_100319240(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  double result;

  v5 = *a3;
  v6 = a3[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  sub_10031895C(a2 + 40, (uint64_t)a3 + 40);
  *(_DWORD *)(a2 + 104) = *((_DWORD *)a3 + 26);
  *(_QWORD *)&result = sub_10031895C(a2 + 112, (uint64_t)(a3 + 7)).n128_u64[0];
  return result;
}

void sub_10031929C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

char *sub_1003192AC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      sub_100026E7C();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_10013C84C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

__int128 *sub_1003193B4(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *v5;
    v8 = v5[1];
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v5 + 4);
    *(_OWORD *)a4 = v7;
    *(_OWORD *)(a4 + 16) = v8;
    sub_10030EC4C(a4 + 40, (uint64_t)v5 + 40);
    *(_DWORD *)(a4 + 104) = *((_DWORD *)v5 + 26);
    sub_10030EC4C(a4 + 112, (uint64_t)(v5 + 7));
    a4 += 176;
    v5 += 11;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_100319438(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL)
    sub_100026E7C();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
    v6 = 0x1745D1745D1745DLL;
  else
    v6 = v4;
  v16 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100319154((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  __p = v7;
  v13 = &v7[176 * v3];
  v15 = &v7[176 * v6];
  sub_1003195C4((uint64_t)(a1 + 2), (uint64_t)v13, a2);
  v14 = (uint64_t)(v13 + 176);
  sub_1003190E0(a1, &__p);
  v8 = a1[1];
  v9 = (uint64_t)v13;
  v10 = v14;
  if ((char *)v14 != v13)
  {
    do
    {
      *(_QWORD *)(v10 - 64) = off_100807398;
      *(_QWORD *)(v10 - 136) = off_100807398;
      v10 -= 176;
    }
    while (v10 != v9);
    v14 = v9;
  }
  if (__p)
    operator delete(__p);
  return v8;
}

double sub_1003195C4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  double result;

  v5 = *a3;
  v6 = a3[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  sub_10031895C(a2 + 40, (uint64_t)a3 + 40);
  *(_DWORD *)(a2 + 104) = *((_DWORD *)a3 + 26);
  *(_QWORD *)&result = sub_10031895C(a2 + 112, (uint64_t)(a3 + 7)).n128_u64[0];
  return result;
}

void sub_100319620(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_100319630(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_100319650(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10031965C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[12];

  sub_10030DC3C(a1, v3, a3);
}

void sub_1003196A8(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_1003196C8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1003196D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[12];

  sub_10030DC3C(a1, v3, a3);
}

double sub_100319720(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_1003EC6A0();
  v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0)
    sub_1003EC6C8();
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16))
    sub_1003EC6F0();
  return *(double *)(v3 + 8 * v4);
}

void sub_100319760(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 72;
      v7 = v4 - 72;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 72;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1003197EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    sub_100026E7C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100264974(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[72 * v4];
  v16 = &v10[72 * v9];
  sub_100318C30((uint64_t)v14, a2);
  v15 = v14 + 72;
  sub_100319908(a1, &v13);
  v11 = a1[1];
  sub_100319A14((uint64_t)&v13);
  return v11;
}

void sub_1003198F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100319A14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100319908(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10031997C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10031997C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 72;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 72;
    sub_100318C30(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_100319A14(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 72);
    *(_QWORD *)(a1 + 16) = i - 72;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100319A64(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 64;
      v7 = v4 - 64;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 64;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100319AF0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100319B98((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100319B64(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_1000260B0();
  return operator new(a2 << 6);
}

uint64_t sub_100319B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 64;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 64;
    sub_10031895C(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_100319C30(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 64);
    *(_QWORD *)(a1 + 16) = i - 64;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100319C80(void ***a1)
{
  void **v1;
  char *v2;
  char *i;
  char *v4;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; *(_QWORD *)v4 = off_100807398)
    {
      *((_QWORD *)i - 16) = off_100807398;
      *((_QWORD *)i - 30) = off_100807398;
      v4 = i - 608;
      *((_QWORD *)i - 51) = off_100807398;
      *((_QWORD *)i - 59) = off_100807398;
      *((_QWORD *)i - 67) = off_100807398;
      i -= 616;
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_100319CE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x4FCACE213F2B3885 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x6A63BD81A98EF6)
    sub_100026E7C();
  if (0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4FCACE213F2B3885 * ((a1[2] - *a1) >> 3)) >= 0x3531DEC0D4C77BLL)
    v6 = 0x6A63BD81A98EF6;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100319F7C((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[616 * v3];
  v13 = &v7[616 * v6];
  sub_100319E08((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 616;
  sub_100319F08(a1, &v10);
  v8 = a1[1];
  sub_10031A154((uint64_t)&v10);
  return v8;
}

void sub_100319DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10031A154((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100319E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3 + 80;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = a2 + 80;
  sub_100318C30(a2 + 8, a3 + 8);
  sub_10031895C(v6, v5);
  sub_10031895C(a2 + 144, a3 + 144);
  sub_100318E60(a2 + 208, a3 + 208);
  sub_100318AC8(a2 + 376, a3 + 376);
  sub_100318AC8(a2 + 488, a3 + 488);
  v7 = *(_QWORD *)(a3 + 600);
  *(_DWORD *)(a2 + 608) = *(_DWORD *)(a3 + 608);
  *(_QWORD *)(a2 + 600) = v7;
}

void sub_100319EB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *v5 = off_100807398;
  *v4 = off_100807398;
  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_100319F08(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100319FC4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100319F7C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x6A63BD81A98EF7)
    sub_1000260B0();
  return operator new(616 * a2);
}

uint64_t sub_100319FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;

  for (i = 0; a3 + i != a5; sub_10031A054(a1, i + a7, i + a3))
    i -= 616;
  return a6;
}

void sub_10031A054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3 + 80;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = a2 + 80;
  sub_100318C30(a2 + 8, a3 + 8);
  sub_10031895C(v6, v5);
  sub_10031895C(a2 + 144, a3 + 144);
  sub_100318E60(a2 + 208, a3 + 208);
  sub_100318AC8(a2 + 376, a3 + 376);
  sub_100318AC8(a2 + 488, a3 + 488);
  v7 = *(_QWORD *)(a3 + 600);
  *(_DWORD *)(a2 + 608) = *(_DWORD *)(a3 + 608);
  *(_QWORD *)(a2 + 600) = v7;
}

void sub_10031A104(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *v5 = off_100807398;
  *v4 = off_100807398;
  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_10031A154(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      *(_QWORD *)(v3 - 128) = off_100807398;
      *(_QWORD *)(v3 - 240) = off_100807398;
      v4 = (_QWORD *)(v3 - 608);
      *(_QWORD *)(v3 - 408) = off_100807398;
      *(_QWORD *)(v3 - 472) = off_100807398;
      *(_QWORD *)(v3 - 536) = off_100807398;
      v3 -= 616;
      *v4 = off_100807398;
    }
    while (v3 != v2);
    *(_QWORD *)(a1 + 16) = v2;
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v5);
  return a1;
}

uint64_t sub_10031A1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_BYTE *)a4 = *(_BYTE *)v5;
    sub_10030EC4C(a4 + 8, v5 + 8);
    sub_10030EC4C(a4 + 80, v5 + 80);
    sub_10030EC4C(a4 + 144, v5 + 144);
    sub_10030EC4C(a4 + 208, v5 + 208);
    sub_10030EC4C(a4 + 376, v5 + 376);
    sub_10030EC4C(a4 + 488, v5 + 488);
    v7 = *(_DWORD *)(v5 + 608);
    *(_QWORD *)(a4 + 600) = *(_QWORD *)(v5 + 600);
    *(_DWORD *)(a4 + 608) = v7;
    a4 += 616;
    v5 += 616;
  }
  while (v5 != v6);
  return v6;
}

void sub_10031A284(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  double v18;
  unint64_t v19;
  double v20;
  char *v21;
  double v22;
  double v23;
  char *v24;
  int v25;
  int v26;
  BOOL v27;
  double v28;
  unint64_t v29;
  double v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  double v34;
  double v35;
  double v36;
  char *v37;
  int v38;
  int v39;
  char *v40;
  char *v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  double v55;
  int v56;
  char *v57;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  char v67;
  char v68;
  char v69;
  char v70;
  _BYTE v71[72];
  _BYTE v72[64];
  _BYTE v73[64];
  _BYTE v74[168];
  _BYTE v75[112];
  _BYTE v76[112];
  double v77;
  int v78;

void sub_10031AD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _BYTE v44[72];
  _BYTE v45[64];
  _BYTE v46[64];
  _BYTE v47[168];
  _BYTE v48[112];
  _BYTE v49[112];
  uint64_t v50;
  int v51;
  char v52;
  _BYTE v53[72];
  _BYTE v54[64];
  _BYTE v55[64];
  _BYTE v56[168];
  _BYTE v57[112];
  _BYTE v58[112];
  double v59;
  int v60;
  uint64_t v61;
  uint64_t v62;

  if (a1 != a2)
  {
    v61 = v3;
    v62 = v4;
    v6 = a1;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 616;
    if (a2 - a1 >= 617)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (double *)(a1 + 616 * v10);
      do
      {
        sub_10031BA3C(v6, v9, v12);
        v12 -= 77;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*(double *)(v14 + 600) < *(double *)(v6 + 600))
        {
          sub_10031B7F4((char *)v14, (char *)v6);
          sub_10031BA3C(v6, v9, (double *)v6);
        }
        v14 += 616;
      }
      while (v14 != a3);
    }
    if (v8 >= 617)
    {
      v15 = v8 / 0x268uLL;
      v38 = v6 + 80;
      v39 = v6 + 8;
      v36 = v6 + 208;
      v37 = v6 + 144;
      v34 = v6 + 488;
      v35 = v6 + 376;
      v32 = v6;
      v33 = v6 + 600;
      do
      {
        v41 = v13;
        v43 = *(_BYTE *)v6;
        sub_100318C30((uint64_t)v44, v39);
        sub_10031895C((uint64_t)v45, v38);
        sub_10031895C((uint64_t)v46, v37);
        sub_100318E60((uint64_t)v47, v36);
        sub_100318AC8((uint64_t)v48, v35);
        sub_100318AC8((uint64_t)v49, v34);
        v16 = 0;
        v50 = *(_QWORD *)v33;
        v51 = *(_DWORD *)(v33 + 8);
        v42 = v15;
        v17 = v6;
        do
        {
          v18 = v17;
          v19 = v16 + 1;
          v17 += 616 * (v16 + 1);
          v20 = 2 * v16;
          v16 = (2 * v16) | 1;
          v21 = v20 + 2;
          if (v21 < v15 && *(double *)(v18 + 616 * v19 + 600) < *(double *)(v17 + 1216))
          {
            v17 += 616;
            v16 = v21;
          }
          *(_BYTE *)v18 = *(_BYTE *)v17;
          sub_10030EC4C(v18 + 8, v17 + 8);
          sub_10030EC4C(v18 + 80, v17 + 80);
          sub_10030EC4C(v18 + 144, v17 + 144);
          sub_10030EC4C(v18 + 208, v17 + 208);
          sub_10030EC4C(v18 + 376, v17 + 376);
          sub_10030EC4C(v18 + 488, v17 + 488);
          v22 = *(_DWORD *)(v17 + 608);
          *(_QWORD *)(v18 + 600) = *(_QWORD *)(v17 + 600);
          *(_DWORD *)(v18 + 608) = v22;
        }
        while (v16 <= (uint64_t)((unint64_t)(v15 - 2) >> 1));
        v23 = (_QWORD *)(v17 + 600);
        v24 = (char *)(v13 - 616);
        if (v17 == v13 - 616)
        {
          *(_BYTE *)v17 = v43;
          sub_10030EC4C(v17 + 8, (uint64_t)v44);
          sub_10030EC4C(v17 + 80, (uint64_t)v45);
          sub_10030EC4C(v17 + 144, (uint64_t)v46);
          sub_10030EC4C(v17 + 208, (uint64_t)v47);
          sub_10030EC4C(v17 + 376, (uint64_t)v48);
          sub_10030EC4C(v17 + 488, (uint64_t)v49);
          v31 = v51;
          *v23 = v50;
          *(_DWORD *)(v17 + 608) = v31;
          v6 = v32;
        }
        else
        {
          *(_BYTE *)v17 = *v24;
          sub_10030EC4C(v17 + 8, v13 - 608);
          sub_10030EC4C(v17 + 80, v13 - 536);
          sub_10030EC4C(v17 + 144, v13 - 472);
          sub_10030EC4C(v17 + 208, v13 - 408);
          sub_10030EC4C(v17 + 376, v13 - 240);
          sub_10030EC4C(v17 + 488, v13 - 128);
          v25 = *(_QWORD *)(v13 - 16);
          *(_DWORD *)(v17 + 608) = *(_DWORD *)(v13 - 8);
          v40 = (double *)(v17 + 600);
          *v23 = v25;
          *v24 = v43;
          sub_10030EC4C(v13 - 608, (uint64_t)v44);
          sub_10030EC4C(v13 - 536, (uint64_t)v45);
          sub_10030EC4C(v13 - 472, (uint64_t)v46);
          sub_10030EC4C(v13 - 408, (uint64_t)v47);
          sub_10030EC4C(v13 - 240, (uint64_t)v48);
          sub_10030EC4C(v13 - 128, (uint64_t)v49);
          *(_QWORD *)(v13 - 16) = v50;
          *(_DWORD *)(v13 - 8) = v51;
          v6 = v32;
          v26 = v17 - v32 + 616;
          if (v26 >= 617)
          {
            v27 = (v26 / 0x268uLL - 2) >> 1;
            if (*(double *)(v32 + 616 * v27 + 600) < *v40)
            {
              v52 = *(_BYTE *)v17;
              sub_100318C30((uint64_t)v53, v17 + 8);
              sub_10031895C((uint64_t)v54, v17 + 80);
              sub_10031895C((uint64_t)v55, v17 + 144);
              sub_100318E60((uint64_t)v56, v17 + 208);
              sub_100318AC8((uint64_t)v57, v17 + 376);
              sub_100318AC8((uint64_t)v58, v17 + 488);
              v28 = *v40;
              v60 = *(_DWORD *)(v17 + 608);
              v59 = v28;
              do
              {
                v29 = v17;
                v17 = v32 + 616 * v27;
                *(_BYTE *)v29 = *(_BYTE *)v17;
                sub_10030EC4C(v29 + 8, v17 + 8);
                sub_10030EC4C(v29 + 80, v17 + 80);
                sub_10030EC4C(v29 + 144, v17 + 144);
                sub_10030EC4C(v29 + 208, v17 + 208);
                sub_10030EC4C(v29 + 376, v17 + 376);
                sub_10030EC4C(v29 + 488, v17 + 488);
                v30 = *(_DWORD *)(v17 + 608);
                *(_QWORD *)(v29 + 600) = *(_QWORD *)(v17 + 600);
                *(_DWORD *)(v29 + 608) = v30;
                if (!v27)
                  break;
                v27 = (v27 - 1) >> 1;
              }
              while (*(double *)(v32 + 616 * v27 + 600) < v59);
              *(_BYTE *)v17 = v52;
              sub_10030EC4C(v17 + 8, (uint64_t)v53);
              sub_10030EC4C(v17 + 80, (uint64_t)v54);
              sub_10030EC4C(v17 + 144, (uint64_t)v55);
              sub_10030EC4C(v17 + 208, (uint64_t)v56);
              sub_10030EC4C(v17 + 376, (uint64_t)v57);
              sub_10030EC4C(v17 + 488, (uint64_t)v58);
              *(double *)(v17 + 600) = v59;
              *(_DWORD *)(v17 + 608) = v60;
            }
          }
        }
        --v15;
        v13 = v41 - 616;
      }
      while (v42 > 2);
    }
  }
}

void sub_10031B39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  double v7;
  char *v8;

  v5 = a1;
  v6 = *(double *)(a2 + 600);
  v7 = *(double *)(a3 + 600);
  if (v6 < *(double *)(a1 + 600))
  {
    if (v7 >= v6)
    {
      sub_10031B7F4((char *)a1, (char *)a2);
      if (*(double *)(a3 + 600) >= *(double *)(a2 + 600))
        return;
      a1 = a2;
    }
    v8 = (char *)a3;
    goto LABEL_9;
  }
  if (v7 < v6)
  {
    sub_10031B7F4((char *)a2, (char *)a3);
    if (*(double *)(a2 + 600) < *(double *)(v5 + 600))
    {
      a1 = v5;
      v8 = (char *)a2;
LABEL_9:
      sub_10031B7F4((char *)a1, v8);
    }
  }
}

BOOL sub_10031B448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  _BYTE v19[72];
  _BYTE v20[64];
  _BYTE v21[64];
  _BYTE v22[168];
  _BYTE v23[112];
  _BYTE v24[112];
  double v25;
  int v26;

  v2 = a2;
  v4 = 0x4FCACE213F2B3885 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 600))
      {
        v6 = (char *)(a2 - 616);
        v7 = (char *)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      sub_10031B39C(a1, a1 + 616, a2 - 616);
      return 1;
    case 4:
      sub_10031B9A8(a1, a1 + 616, a1 + 1232, a2 - 616);
      return 1;
    case 5:
      sub_10031B9A8(a1, a1 + 616, a1 + 1232, a1 + 1848);
      if (*(double *)(v2 - 16) < *(double *)(a1 + 2448))
      {
        sub_10031B7F4((char *)(a1 + 1848), (char *)(v2 - 616));
        if (*(double *)(a1 + 2448) < *(double *)(a1 + 1832))
        {
          sub_10031B7F4((char *)(a1 + 1232), (char *)(a1 + 1848));
          if (*(double *)(a1 + 1832) < *(double *)(a1 + 1216))
          {
            sub_10031B7F4((char *)(a1 + 616), (char *)(a1 + 1232));
            if (*(double *)(a1 + 1216) < *(double *)(a1 + 600))
            {
              v7 = (char *)a1;
              v6 = (char *)(a1 + 616);
LABEL_4:
              sub_10031B7F4(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 1232;
      sub_10031B39C(a1, a1 + 616, a1 + 1232);
      v9 = a1 + 1848;
      if (a1 + 1848 == v2)
        return 1;
      v10 = 0;
      v11 = 0;
      v15 = v2;
      break;
  }
  while (*(double *)(v9 + 600) >= *(double *)(v8 + 600))
  {
LABEL_16:
    v8 = v9;
    v10 += 616;
    v9 += 616;
    if (v9 == v2)
      return 1;
  }
  v17 = v11;
  v18 = *(_BYTE *)v9;
  sub_100318C30((uint64_t)v19, v9 + 8);
  sub_10031895C((uint64_t)v20, v9 + 80);
  sub_10031895C((uint64_t)v21, v9 + 144);
  sub_100318E60((uint64_t)v22, v9 + 208);
  sub_100318AC8((uint64_t)v23, v9 + 376);
  sub_100318AC8((uint64_t)v24, v9 + 488);
  v25 = *(double *)(v9 + 600);
  v26 = *(_DWORD *)(v9 + 608);
  v16 = v10;
  while (1)
  {
    v12 = a1 + v10;
    *(_BYTE *)(a1 + v10 + 1848) = *(_BYTE *)(a1 + v10 + 1232);
    v13 = a1 + v10 + 1240;
    sub_10030EC4C(a1 + v10 + 1856, v13);
    sub_10030EC4C(v12 + 1928, v12 + 1312);
    sub_10030EC4C(v12 + 1992, v12 + 1376);
    sub_10030EC4C(v12 + 2056, v12 + 1440);
    sub_10030EC4C(v12 + 2224, v12 + 1608);
    sub_10030EC4C(v12 + 2336, v12 + 1720);
    *(_QWORD *)(v12 + 2448) = *(_QWORD *)(v12 + 1832);
    *(_DWORD *)(v12 + 2456) = *(_DWORD *)(v12 + 1840);
    if (v10 == -1232)
      break;
    v10 -= 616;
    if (v25 >= *(double *)(v12 + 1216))
    {
      v14 = (_BYTE *)(a1 + v10 + 1848);
      goto LABEL_14;
    }
  }
  v14 = (_BYTE *)a1;
LABEL_14:
  *v14 = v18;
  sub_10030EC4C(v13, (uint64_t)v19);
  sub_10030EC4C(v12 + 1312, (uint64_t)v20);
  sub_10030EC4C(v12 + 1376, (uint64_t)v21);
  sub_10030EC4C(v12 + 1440, (uint64_t)v22);
  sub_10030EC4C(v12 + 1608, (uint64_t)v23);
  sub_10030EC4C(v12 + 1720, (uint64_t)v24);
  *(double *)(v12 + 1832) = v25;
  *(_DWORD *)(v12 + 1840) = v26;
  v11 = v17 + 1;
  if (v17 != 7)
  {
    v2 = v15;
    v10 = v16;
    goto LABEL_16;
  }
  return v9 + 616 == v15;
}

void sub_10031B7F4(char *a1, char *a2)
{
  uint64_t v4;
  char v5;
  _BYTE v6[72];
  _BYTE v7[64];
  _BYTE v8[64];
  _BYTE v9[168];
  _BYTE v10[112];
  _BYTE v11[112];
  uint64_t v12;
  int v13;

  v5 = *a1;
  sub_100318C30((uint64_t)v6, (uint64_t)(a1 + 8));
  sub_10031895C((uint64_t)v7, (uint64_t)(a1 + 80));
  sub_10031895C((uint64_t)v8, (uint64_t)(a1 + 144));
  sub_100318E60((uint64_t)v9, (uint64_t)(a1 + 208));
  sub_100318AC8((uint64_t)v10, (uint64_t)(a1 + 376));
  sub_100318AC8((uint64_t)v11, (uint64_t)(a1 + 488));
  v12 = *((_QWORD *)a1 + 75);
  v13 = *((_DWORD *)a1 + 152);
  *a1 = *a2;
  sub_10030EC4C((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  sub_10030EC4C((uint64_t)(a1 + 80), (uint64_t)(a2 + 80));
  sub_10030EC4C((uint64_t)(a1 + 144), (uint64_t)(a2 + 144));
  sub_10030EC4C((uint64_t)(a1 + 208), (uint64_t)(a2 + 208));
  sub_10030EC4C((uint64_t)(a1 + 376), (uint64_t)(a2 + 376));
  sub_10030EC4C((uint64_t)(a1 + 488), (uint64_t)(a2 + 488));
  v4 = *((_QWORD *)a2 + 75);
  *((_DWORD *)a1 + 152) = *((_DWORD *)a2 + 152);
  *((_QWORD *)a1 + 75) = v4;
  *a2 = v5;
  sub_10030EC4C((uint64_t)(a2 + 8), (uint64_t)v6);
  sub_10030EC4C((uint64_t)(a2 + 80), (uint64_t)v7);
  sub_10030EC4C((uint64_t)(a2 + 144), (uint64_t)v8);
  sub_10030EC4C((uint64_t)(a2 + 208), (uint64_t)v9);
  sub_10030EC4C((uint64_t)(a2 + 376), (uint64_t)v10);
  sub_10030EC4C((uint64_t)(a2 + 488), (uint64_t)v11);
  *((_QWORD *)a2 + 75) = v12;
  *((_DWORD *)a2 + 152) = v13;
}

void sub_10031B9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10031B39C(a1, a2, a3);
  if (*(double *)(a4 + 600) < *(double *)(a3 + 600))
  {
    sub_10031B7F4((char *)a3, (char *)a4);
    if (*(double *)(a3 + 600) < *(double *)(a2 + 600))
    {
      sub_10031B7F4((char *)a2, (char *)a3);
      if (*(double *)(a2 + 600) < *(double *)(a1 + 600))
        sub_10031B7F4((char *)a1, (char *)a2);
    }
  }
}

void sub_10031BA3C(uint64_t a1, uint64_t a2, double *a3)
{
  unint64_t v3;
  double *v4;
  int64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int64_t v18;
  char v20;
  _BYTE v21[72];
  _BYTE v22[64];
  _BYTE v23[64];
  _BYTE v24[168];
  _BYTE v25[112];
  _BYTE v26[112];
  double v27;
  int v28;

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = a3;
    v18 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= 0x4FCACE213F2B3885 * (((uint64_t)a3 - a1) >> 3))
    {
      v5 = (0x9F959C427E56710ALL * (((uint64_t)a3 - a1) >> 3)) | 1;
      v6 = (double *)(a1 + 616 * v5);
      if ((uint64_t)(0x9F959C427E56710ALL * (((uint64_t)a3 - a1) >> 3) + 2) < a2
        && *(double *)(a1 + 616 * v5 + 600) < v6[152])
      {
        v6 += 77;
        v5 = 0x9F959C427E56710ALL * (((uint64_t)a3 - a1) >> 3) + 2;
      }
      if (v6[75] >= a3[75])
      {
        v20 = *(_BYTE *)a3;
        sub_100318C30((uint64_t)v21, (uint64_t)(a3 + 1));
        sub_10031895C((uint64_t)v22, (uint64_t)(v4 + 10));
        sub_10031895C((uint64_t)v23, (uint64_t)(v4 + 18));
        sub_100318E60((uint64_t)v24, (uint64_t)(v4 + 26));
        sub_100318AC8((uint64_t)v25, (uint64_t)(v4 + 47));
        sub_100318AC8((uint64_t)v26, (uint64_t)(v4 + 61));
        v27 = v4[75];
        v28 = *((_DWORD *)v4 + 152);
        do
        {
          v7 = v6;
          *(_BYTE *)v4 = *(_BYTE *)v6;
          v8 = (uint64_t)(v6 + 1);
          sub_10030EC4C((uint64_t)(v4 + 1), (uint64_t)(v6 + 1));
          v9 = (uint64_t)(v6 + 10);
          sub_10030EC4C((uint64_t)(v4 + 10), (uint64_t)(v6 + 10));
          v10 = (uint64_t)(v6 + 18);
          sub_10030EC4C((uint64_t)(v4 + 18), (uint64_t)(v6 + 18));
          v11 = (uint64_t)(v6 + 26);
          sub_10030EC4C((uint64_t)(v4 + 26), (uint64_t)(v6 + 26));
          v12 = (uint64_t)(v6 + 47);
          sub_10030EC4C((uint64_t)(v4 + 47), (uint64_t)(v6 + 47));
          v13 = (uint64_t)(v6 + 61);
          sub_10030EC4C((uint64_t)(v4 + 61), (uint64_t)(v6 + 61));
          v14 = *((_DWORD *)v6 + 152);
          v4[75] = v6[75];
          *((_DWORD *)v4 + 152) = v14;
          if (v18 < v5)
            break;
          v15 = (2 * v5) | 1;
          v6 = (double *)(a1 + 616 * v15);
          if (2 * v5 + 2 < a2 && *(double *)(a1 + 616 * v15 + 600) < v6[152])
          {
            v6 += 77;
            v15 = 2 * v5 + 2;
          }
          v4 = v7;
          v5 = v15;
        }
        while (v6[75] >= v27);
        *(_BYTE *)v7 = v20;
        sub_10030EC4C(v8, (uint64_t)v21);
        sub_10030EC4C(v9, (uint64_t)v22);
        sub_10030EC4C(v10, (uint64_t)v23);
        sub_10030EC4C(v11, (uint64_t)v24);
        sub_10030EC4C(v12, (uint64_t)v25);
        sub_10030EC4C(v13, (uint64_t)v26);
        v16 = v28;
        v7[75] = v27;
        *((_DWORD *)v7 + 152) = v16;
      }
    }
  }
}

uint64_t sub_10031BCE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x4FCACE213F2B3885 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x6A63BD81A98EF6)
    sub_100026E7C();
  if (0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4FCACE213F2B3885 * ((a1[2] - *a1) >> 3)) >= 0x3531DEC0D4C77BLL)
    v6 = 0x6A63BD81A98EF6;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100319F7C((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[616 * v3];
  v13 = &v7[616 * v6];
  sub_10031A054((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 616;
  sub_100319F08(a1, &v10);
  v8 = a1[1];
  sub_10031A154((uint64_t)&v10);
  return v8;
}

void sub_10031BDF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10031A154((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10031BE0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, int *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;

  v10 = *a1;
  v11 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 4);
  v12 = v11 + 1;
  if (v11 + 1 > 0x75075075075075)
    sub_100026E7C();
  v20 = (uint64_t)(a1 + 2);
  v21 = 0xAF8AF8AF8AF8AF8BLL * ((a1[2] - v10) >> 4);
  if (2 * v21 > v12)
    v12 = 2 * v21;
  if (v21 >= 0x3A83A83A83A83ALL)
    v22 = 0x75075075075075;
  else
    v22 = v12;
  v30 = a1 + 2;
  if (v22)
    v23 = (char *)sub_10031C0F0(v20, v22);
  else
    v23 = 0;
  v26 = v23;
  v27 = &v23[560 * v11];
  v28 = (uint64_t)v27;
  v29 = &v23[560 * v22];
  sub_10031BF78((uint64_t)v27, a2, a3, a4, a5, *a7, a8, a9, *a6);
  v28 = (uint64_t)(v27 + 560);
  sub_10031C07C(a1, &v26);
  v24 = a1[1];
  sub_10031C2B0((uint64_t)&v26);
  return v24;
}

void sub_10031BF64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10031C2B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10031BF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v17;

  sub_100318C30(a1, a2);
  sub_10031895C(v17 + 72, a3);
  sub_100318E60(a1 + 136, a4);
  sub_100318AC8(a1 + 304, a5);
  *(double *)(a1 + 416) = a9;
  *(_DWORD *)(a1 + 424) = a6;
  sub_10031895C(a1 + 432, a7);
  sub_10031895C(a1 + 496, a8);
  return a1;
}

void sub_10031C02C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *v5 = off_100807398;
  *v4 = off_100807398;
  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_10031C07C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10031C138((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10031C0F0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x75075075075076)
    sub_1000260B0();
  return operator new(560 * a2);
}

uint64_t sub_10031C138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;

  for (i = 0; a3 + i != a5; sub_10031C1C8(a1, i + a7, i + a3))
    i -= 560;
  return a6;
}

double sub_10031C1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double result;

  sub_100318C30(a2, a3);
  sub_10031895C(a2 + 72, a3 + 72);
  sub_100318E60(a2 + 136, a3 + 136);
  sub_100318AC8(a2 + 304, a3 + 304);
  v5 = *(_QWORD *)(a3 + 416);
  *(_DWORD *)(a2 + 424) = *(_DWORD *)(a3 + 424);
  *(_QWORD *)(a2 + 416) = v5;
  sub_10031895C(a2 + 432, a3 + 432);
  *(_QWORD *)&result = sub_10031895C(a2 + 496, a3 + 496).n128_u64[0];
  return result;
}

void sub_10031C260(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *v5 = off_100807398;
  *v4 = off_100807398;
  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_10031C2B0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      *(v3 - 8) = off_100807398;
      *(v3 - 16) = off_100807398;
      *(v3 - 32) = off_100807398;
      v4 = v3 - 61;
      v5 = v3 - 70;
      *(v3 - 53) = off_100807398;
      *v5 = off_100807398;
      v3 -= 70;
      *v4 = off_100807398;
    }
    while (v5 != v2);
    *(_QWORD *)(a1 + 16) = v2;
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v6);
  return a1;
}

_QWORD *sub_10031C324(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_10031C334(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10031C354(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10031C360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[395];

  sub_10030DC3C(a1, v3, a3);
}

void sub_10031C3B4(void ***a1)
{
  void **v1;
  char *v2;
  char *i;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 152)
    {
      *((_QWORD *)i - 9) = off_100807398;
      *((_QWORD *)i - 18) = off_100807398;
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_10031C3F8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10031C46C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10031C46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v11 = 0;
  v12 = a7 - 152;
  while (a3 + v11 != a5)
  {
    v13 = (_QWORD *)(v12 + v11);
    v11 -= 152;
    sub_10031C510(a1, v13, (_QWORD *)(v11 + a3));
  }
  return a6;
}

double sub_10031C510(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  double result;

  v4 = (uint64_t)(a3 + 10);
  *a2 = *a3;
  sub_10031C56C((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
  *(_QWORD *)&result = sub_100318C30((uint64_t)(a2 + 10), v4).n128_u64[0];
  return result;
}

void sub_10031C55C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

__n128 sub_10031C56C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x400000001;
  *(_QWORD *)(a1 + 24) = 0x400000001;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100815A40;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 1)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 5)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 4u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_10031C6C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_10031C6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  __CLPK_doublereal *v8;
  __CLPK_integer v9;
  void *v10;
  size_t v11;
  __CLPK_integer *v12;
  __CLPK_integer *v13;
  __CLPK_integer __info;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;

  if (a1 != a3)
  {
    if (a1 != a4)
    {
      if (a3 != a4)
      {
        v6 = *(_DWORD *)(a1 + 8);
        if (v6 == *(_DWORD *)(a1 + 12))
        {
          if (*(_DWORD *)(a2 + 28) * *(_DWORD *)(a2 + 24) >= v6)
          {
            if (*(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24) >= 4 * v6)
            {
              if (*(_DWORD *)(a4 + 24) >= v6)
              {
                if (*(_DWORD *)(a4 + 28) >= v6)
                {
                  sub_10030EC4C(a4, a1);
                  v7 = *(unsigned int *)(a4 + 8);
                  v8 = *(__CLPK_doublereal **)(a4 + 32);
                  v9 = *(_DWORD *)(a4 + 20);
                  v10 = *(void **)(a2 + 32);
                  __n = *(_DWORD *)(a4 + 12);
                  __m = v7;
                  __lda = v9;
                  if ((int)v7 >= 1)
                  {
                    v11 = 4 * v7;
                    v12 = (__CLPK_integer *)operator new[](4 * v7, &std::nothrow);
                    if (v12)
                    {
                      v13 = v12;
                      __info = 0;
                      dgetrf_(&__m, &__n, v8, &__lda, v12, &__info);
                      memcpy(v10, v13, v11);
                      operator delete[]();
                    }
                    sub_1003EC890();
                  }
                  sub_1003EC890();
                }
                sub_1003EC868();
              }
              sub_1003EC840();
            }
            sub_1003EC818();
          }
          sub_1003EC7F0();
        }
        sub_1003EC908();
      }
      sub_1003EC7C8();
    }
    sub_1003EC7A0();
  }
  sub_1003EC778();
}

_QWORD *sub_10031C9A0(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_10031C9B0(_QWORD *result)
{
  *result = off_100815C00;
  return result;
}

void sub_10031C9C0(_QWORD *a1)
{
  *a1 = off_100815C00;
  operator delete();
}

uint64_t sub_10031C9E0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10031C9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[4];

  sub_10031CA0C(a1, v3, a3);
}

void sub_10031CA0C(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v5 = *(_DWORD *)(a1 + 12);
    if (v5 >= 2)
    {
      if (!a2)
        sub_1003EB398(a1, 0, a3);
      v7 = v5 + v3 - *(_DWORD *)(a1 + 20);
      if (v7 <= 0)
        sub_1003EB3BC(a1, (uint64_t)a2, a3);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v8 = *(_DWORD *)(a1 + 16);
      if (v8 >= 3)
      {
        v9 = (v8 - 1);
        v10 = *(_QWORD *)(a1 + 32);
        v11 = 1;
        do
        {
          v12 = &a2[v11];
          if (!a2[v11])
          {
            v13 = *(_DWORD *)(v10 + 4 * v11);
            v14 = v11;
            do
            {
              v14 = v14 * v7 % (int)v9;
              v15 = *(_DWORD *)(v10 + 4 * v14);
              *(_DWORD *)(v10 + 4 * v14) = v13;
              *v12 = 1;
              v12 = &a2[v14];
              v13 = v15;
            }
            while (!*v12);
          }
          ++v11;
        }
        while (v11 != v9);
      }
    }
  }
}

void sub_10031CADC(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10031CAFC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10031CB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[16];

  sub_10030DC3C(a1, v3, a3);
}

void sub_10031CB54(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10031CB74(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10031CB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  sub_10030DC3C(a1, &v3, a3);
}

float64x2_t sub_10031CBA0(uint64_t a1, uint64_t a2, double a3)
{
  float64x2_t result;
  uint64_t v6;
  double *v7;
  double *v8;
  double v9;
  float64x2_t *v10;
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t *v13;
  uint64_t v14;
  float64x2_t v15;

  if (a1 == a2)
    sub_1003EC930();
  sub_10030DD0C((_DWORD *)a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  v6 = *(unsigned int *)(a2 + 16);
  if ((int)v6 > 3)
  {
    v10 = *(float64x2_t **)(a1 + 32);
    v11 = *(float64x2_t **)(a2 + 32);
    v12 = (float64x2_t *)((char *)v10 + 8 * (v6 - 2));
    v13 = (float64x2_t *)((char *)v11 + 8 * (v6 - 2));
    v14 = (v6 - 1) >> 1;
    do
    {
      v15 = *v10++;
      *v11++ = vmulq_n_f64(v15, a3);
      --v14;
    }
    while (v14);
    result = vmulq_n_f64(*v12, a3);
    *v13 = result;
  }
  else if ((int)v6 >= 1)
  {
    v7 = *(double **)(a1 + 32);
    v8 = *(double **)(a2 + 32);
    do
    {
      v9 = *v7++;
      result.f64[0] = v9 * a3;
      *v8++ = v9 * a3;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_10031CC5C(uint64_t *a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  double *v16;
  double *v17;
  void *__p;
  double *v20;
  double *v21;
  char *v22;
  uint64_t *v23;

  v5 = *a1;
  v6 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x1AF286BCA1AF286)
    sub_100026E7C();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0xD79435E50D7943)
    v13 = 0x1AF286BCA1AF286;
  else
    v13 = v7;
  v23 = a1 + 2;
  if (v13)
    v14 = (char *)sub_100152EEC(v11, v13);
  else
    v14 = 0;
  __p = v14;
  v20 = (double *)&v14[152 * v6];
  v21 = v20;
  v22 = &v14[152 * v13];
  sub_10031CDF8(v20, a3, a4, *a2);
  v21 = v20 + 19;
  sub_10031C3F8(a1, &__p);
  v15 = a1[1];
  v16 = v20;
  v17 = v21;
  if (v21 != v20)
  {
    do
    {
      *((_QWORD *)v17 - 9) = off_100807398;
      *((_QWORD *)v17 - 18) = off_100807398;
      v17 -= 19;
    }
    while (v17 != v16);
    v21 = v16;
  }
  if (__p)
    operator delete(__p);
  return v15;
}

double *sub_10031CDF8(double *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;

  *a1 = a4;
  v6 = (uint64_t)(a1 + 10);
  sub_10031C56C((uint64_t)(a1 + 1), a2);
  sub_100318C30(v6, a3);
  return a1;
}

void sub_10031CE44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_10031CE54(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 56;
      v7 = v4 - 56;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 56;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10031CEE0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10031CF54((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10031CF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 56;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 56;
    sub_10031CFEC(v12, v10 + a3);
  }
  return a6;
}

__n128 sub_10031CFEC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x100000002;
  *(_QWORD *)(a1 + 24) = 0x100000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100815CC0;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_10031D148(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_10031D158(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10031D178(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10031D184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[2];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_10031D1A4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10031D1F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_100026E7C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100028A48(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v16 = &v10[56 * v9];
  sub_10031CFEC((uint64_t)v14, a2);
  v15 = v14 + 56;
  sub_10031CEE0(a1, &v13);
  v11 = a1[1];
  sub_10031D1A4((uint64_t)&v13);
  return v11;
}

void sub_10031D2FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10031D1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10031D310(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_10031D320(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10031D340(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10031D34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[225];

  sub_10030DC3C(a1, v3, a3);
}

void sub_10031D3A0(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10031D3C0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10031D3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[4];

  sub_10030DC3C(a1, v3, a3);
}

void sub_10031D3EC(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10031D40C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10031D418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[2];

  sub_10030DC3C(a1, v3, a3);
}

double sub_10031D438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  __CLPK_doublereal *v19;
  __CLPK_doublereal *__wi;
  __CLPK_doublereal *__scale;
  __CLPK_doublereal *__rconde;
  __CLPK_doublereal *__work;
  __CLPK_doublereal *v24;
  __CLPK_integer v25;
  __CLPK_doublereal *v26;
  __CLPK_integer v27;
  cnprint::CNPrinter *v28;
  __CLPK_integer v29;
  double result;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  double *v41;
  _QWORD *v42;
  int v43;
  unsigned int v44;
  __CLPK_doublereal v45;
  __CLPK_integer v46;
  unsigned int v47;
  __CLPK_integer __ihi[2];
  __CLPK_integer __ldvr;
  __CLPK_integer __ldvl;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  char __sense[12];

  if (a1 == a2)
    sub_1003EC958();
  if (a1 == a3)
    sub_1003EC980();
  if (a1 == a4)
    sub_1003EC9A8();
  if (a1 == a5)
    sub_1003EC9D0();
  if (a1 == a6)
    sub_1003EC9F8();
  if (a1 == a7)
    sub_1003ECA20();
  if (a1 == a8)
    sub_1003ECA48();
  if (a1 == a9)
    sub_1003ECA70();
  if (a2 == a3)
    sub_1003ECA98();
  if (a2 == a4)
    sub_1003ECAC0();
  if (a2 == a5)
    sub_1003ECAE8();
  if (a2 == a6)
    sub_1003ECB10();
  if (a2 == a7)
    sub_1003ECB38();
  if (a2 == a8)
    sub_1003ECB60();
  if (a2 == a9)
    sub_1003ECB88();
  if (a3 == a4)
    sub_1003ECBB0();
  if (a3 == a5)
    sub_1003ECBD8();
  if (a3 == a6)
    sub_1003ECC00();
  if (a3 == a7)
    sub_1003ECC28();
  if (a3 == a8)
    sub_1003ECC50();
  if (a3 == a9)
    sub_1003ECC78();
  if (a4 == a5)
    sub_1003ECCA0();
  if (a4 == a6)
    sub_1003ECCC8();
  if (a4 == a7)
    sub_1003ECCF0();
  if (a4 == a8)
    sub_1003ECD18();
  if (a4 == a9)
    sub_1003ECD40();
  if (a5 == a6)
    sub_1003ECD68();
  if (a5 == a7)
    sub_1003ECD90();
  if (a5 == a8)
    sub_1003ECDB8();
  if (a5 == a9)
    sub_1003ECDE0();
  if (a6 == a7)
    sub_1003ECE08();
  if (a6 == a8)
    sub_1003ECE30();
  if (a6 == a9)
    sub_1003ECE58();
  if (a7 == a8)
    sub_1003ECE80();
  if (a7 == a9)
    sub_1003ECEA8();
  if (a8 == a9)
    sub_1003ECED0();
  v16 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v16 != *(_DWORD *)(a1 + 12))
    sub_1003ED178();
  v17 = *(_DWORD *)(a7 + 24);
  if (*(_DWORD *)(a7 + 28) * v17 < v16)
    sub_1003ECEF8();
  v18 = *(_DWORD *)(a8 + 24);
  if (*(_DWORD *)(a8 + 28) * v18 < v16)
    sub_1003ECF20();
  v44 = *(_DWORD *)(a9 + 28) * *(_DWORD *)(a9 + 24);
  if (v44 < 3 * (int)v16)
    sub_1003ECF48();
  if (*(_DWORD *)(a2 + 24) < v16)
    sub_1003ECF70();
  if (*(_DWORD *)(a2 + 28) < v16)
    sub_1003ECF98();
  if (*(_DWORD *)(a3 + 24) < v16)
    sub_1003ECFC0();
  if (*(_DWORD *)(a3 + 28) < v16)
    sub_1003ECFE8();
  if (*(_DWORD *)(a4 + 24) < v16)
    sub_1003ED010();
  if (*(_DWORD *)(a4 + 28) < v16)
    sub_1003ED038();
  if (*(_DWORD *)(a5 + 24) < v16)
    sub_1003ED060();
  if (*(_DWORD *)(a5 + 28) < v16)
    sub_1003ED088();
  if (*(_DWORD *)(a6 + 24) < v16)
    sub_1003ED0B0();
  if (*(_DWORD *)(a6 + 28) < v16)
    sub_1003ED0D8();
  if (v17 < v16)
    sub_1003ED100();
  if (v18 < v16)
    sub_1003ED128();
  sub_10030EC4C(a2, a1);
  sub_10030DD0C((_DWORD *)a3, v16, v16);
  sub_10030DD58(a3, 0.0);
  sub_10030DD0C((_DWORD *)a4, v16, v16);
  sub_10030DD58(a4, 0.0);
  sub_10030DD0C((_DWORD *)a5, v16, v16);
  sub_10030DD58(a5, 0.0);
  sub_10030DD0C((_DWORD *)a6, v16, v16);
  sub_10030DD58(a6, 0.0);
  v19 = *(__CLPK_doublereal **)(a3 + 32);
  __wi = *(__CLPK_doublereal **)(a4 + 32);
  __scale = *(__CLPK_doublereal **)(a7 + 32);
  v45 = 0.0;
  __rconde = *(__CLPK_doublereal **)(a8 + 32);
  __work = *(__CLPK_doublereal **)(a9 + 32);
  v24 = *(__CLPK_doublereal **)(a2 + 32);
  v25 = *(_DWORD *)(a2 + 8);
  v26 = *(__CLPK_doublereal **)(a5 + 32);
  v27 = *(_DWORD *)(a5 + 8);
  qmemcpy(__sense, "NVNB", 4);
  __lda = v25;
  __n = v16;
  __ldvr = v27;
  __ldvl = 1;
  *(_QWORD *)__ihi = 0;
  v46 = 0;
  v47 = v44;
  v28 = (cnprint::CNPrinter *)dgeevx_(&__sense[3], &__sense[2], &__sense[1], __sense, &__n, v24, &__lda, v19, __wi, 0, &__ldvl, v26, &__ldvr, &__ihi[1], __ihi, __scale, &v45, __rconde, &__rconde[(int)v16],
                                __work,
                                (__CLPK_integer *)&v47,
                                0,
                                &v46);
  v29 = v46;
  if (v46)
  {
    LOWORD(__n) = 4;
    if (v46 < 0)
      LOBYTE(__lda) = 5;
    else
      LOBYTE(__lda) = 4;
    v28 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__n, &__lda);
  }
  if (v44 < **(double **)(a9 + 32) && cnprint::CNPrinter::GetLogLevel(v28) <= 1)
  {
    LOWORD(__n) = 4;
    LOBYTE(__lda) = 1;
    cnprint::CNPrinter::Print(&__n, &__lda);
  }
  if (v29)
    sub_1003ED150();
  sub_10030DD0C((_DWORD *)a9, *(_DWORD *)(a9 + 24), *(_DWORD *)(a9 + 28));
  sub_10030DD0C((_DWORD *)a8, v16, 2);
  sub_10030DD0C((_DWORD *)a7, v16, 1);
  if ((_DWORD)v16)
  {
    v31 = 0;
    v32 = *(_QWORD *)(a4 + 32);
    v33 = *(_QWORD *)(a5 + 32);
    v34 = *(_QWORD *)(a6 + 32);
    do
    {
      result = *(double *)(v32 + 8 * v31);
      if (result != 0.0)
      {
        v35 = v31 * v16;
        v36 = v16 + v31;
        v37 = v16;
        do
        {
          *(_QWORD *)(v34 + 8 * v35) = *(_QWORD *)(v33 + 8 * v36);
          *(double *)(v34 + 8 * v36) = -*(double *)(v33 + 8 * v36);
          result = *(double *)(v33 + 8 * v35++);
          *(double *)(v33 + 8 * v36++) = result;
          --v37;
        }
        while (v37);
        ++v31;
      }
      ++v31;
    }
    while (v31 < v16);
    if (v16 >= 2)
    {
      v38 = *(_QWORD *)(a3 + 32);
      v39 = *(_QWORD *)(a4 + 32);
      v40 = v16 - 1;
      v41 = (double *)(v39 + 8);
      v42 = (_QWORD *)(v38 + 8);
      v43 = v16 + 1;
      do
      {
        *(_QWORD *)(v38 + 8 * v43) = *v42;
        result = *v41;
        *(double *)(v39 + 8 * v43) = *v41;
        *v42++ = 0;
        *v41++ = 0.0;
        v43 += v16 + 1;
        --v40;
      }
      while (v40);
    }
  }
  return result;
}

_QWORD *sub_10031DA10(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_10031DA20(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10031DA40(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10031DA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[168];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_10031DA98()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10085DDE0 = 0;
  qword_10085DDE8 = 0;
  qword_10085DDF0 = 0;
  v0 = operator new(0x40uLL);
  qword_10085DDE8 = (uint64_t)(v0 + 4);
  qword_10085DDF0 = (uint64_t)(v0 + 4);
  *v0 = xmmword_100478C20;
  v0[1] = unk_100478C30;
  v0[2] = xmmword_100478C40;
  v0[3] = unk_100478C50;
  qword_10085DDE0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085DDE0, (void *)&_mh_execute_header);
  qword_10085DE00 = 0;
  unk_10085DE08 = 0;
  qword_10085DDF8 = 0;
  v1 = operator new(0x10uLL);
  qword_10085DE00 = (uint64_t)(v1 + 1);
  unk_10085DE08 = v1 + 1;
  *v1 = xmmword_100478C60;
  qword_10085DDF8 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085DDF8, (void *)&_mh_execute_header);
}

void sub_10031DB58(uint64_t a1, double a2, double a3)
{
  NSObject *v6;
  int v7;
  double v8;
  __int16 v9;
  double v10;

  *(_BYTE *)a1 = 0;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a2;
  if (a3 <= 0.0)
    sub_1003ED1A0();
  if (a2 <= 0.0)
    sub_1003ED1C8();
  *(double *)(a1 + 24) = 1.0 / a2 / (1.0 / a2 + 1.0 / (a3 * 6.28318531));
  sub_10031DC64(a1);
  *(_BYTE *)a1 = 1;
  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 134218240;
    v8 = a2;
    v9 = 2048;
    v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #LPF configured with fs = %f and fc = %f", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10031DC64(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  *(_BYTE *)(a1 + 1) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v1 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #LPF reset", v2, 2u);
  }
}

uint64_t sub_10031DCD0(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  __int128 v6;
  __int128 v7;
  NSObject *v8;
  stat *v9;
  const char *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  stat __p;
  uint8_t buf[4];
  stat *v17;

  *(_QWORD *)a1 = off_100815E88;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v6;
  }
  v7 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000BF04(&__p, "PredictorPrimary_GestureClassifier");
    v9 = (__p.st_gid & 0x80000000) == 0 ? &__p : *(stat **)&__p.st_dev;
    *(_DWORD *)buf = 136315138;
    v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Configuring GestureClassifier for Predictor %s", buf, 0xCu);
    if (SHIBYTE(__p.st_gid) < 0)
      operator delete(*(void **)&__p.st_dev);
  }
  if (!*a3)
    operator new();
  *(_QWORD *)(a1 + 96) = espresso_create_context(0, 0xFFFFFFFFLL);
  *(_QWORD *)(a1 + 88) = espresso_create_plan();
  if (*((char *)a2 + 23) >= 0)
    v10 = (const char *)a2;
  else
    v10 = *(const char **)a2;
  if (stat(v10, &__p))
  {
    *(_BYTE *)(a1 + 64) = 0;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003ED248();
  }
  else
  {
    *(_BYTE *)(a1 + 64) = 1;
    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Successfully located model weights filepath.", buf, 2u);
    }
    if (*((char *)a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *(void **)a2;
    if (espresso_plan_add_network(*(_QWORD *)(a1 + 88), v12, 65568, a1 + 72))
    {
      *(_BYTE *)(a1 + 64) = 0;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003ED21C();
    }
    else if (espresso_plan_build(*(_QWORD *)(a1 + 88)))
    {
      *(_BYTE *)(a1 + 64) = 0;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003ED1F0();
    }
    else
    {
      v13 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Espresso Model initialized", buf, 2u);
      }
    }
  }
  return a1;
}

void sub_10031E0AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v3;
  *v3 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10031E11C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  NSObject *v9;
  void **v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int i;
  int v22;
  float v23;
  uint64_t v24;
  float *v25;
  char v26;
  char v27;
  float v28;
  NSObject *v29;
  double v30;
  double v31;
  double v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  const char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v52;
  int v53;
  void *v54[3];
  void *__p[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint8_t v66[24];
  double v67;
  _BYTE buf[168];
  _QWORD v69[4];

  v9 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    sub_10000BF04(__p, "PredictorPrimary_GestureClassifier");
    v10 = (SBYTE7(v56) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Predicting intent using %s", buf, 0xCu);
    if (SBYTE7(v56) < 0)
      operator delete(__p[0]);
  }
  sub_10031E6F8((uint64_t)a1, a2, a3);
  v65 = 0;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  *(_OWORD *)__p = 0u;
  v11 = a1[6];
  v69[0] = 1;
  v69[1] = (*(int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v69[2] = 9;
  v69[3] = (int)((*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 16))(a1[6]) + 2);
  if (espresso_buffer_pack_tensor_shape(__p, 4, v69))
    sub_1003ED274();
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 24))(a1[6]);
  v52 = (int)(9 * v12 * ((*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 16))(a1[6]) + 2));
  sub_1003219A4(v54, v52);
  v50 = a4;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = (_BYTE *)(a2 + 9368);
  v17 = a2;
  v18 = a2 + 4688;
  v48 = v17;
  v49 = a3;
  v19 = v17 + 9464;
  while (v14 < (*(int (**)(_QWORD))(*(_QWORD *)a1[6] + 24))(a1[6]))
  {
    v20 = 0;
    v53 = v13;
    do
    {
      for (i = 0; i < (*(int (**)(_QWORD))(*(_QWORD *)a1[6] + 16))(a1[6]); ++i)
      {
        v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 16))(a1[6]);
        if (!*v16)
          sub_10000BA44();
        v23 = *(double *)(v18 + 8 * (i + v13 * v22));
        *((float *)v54[0] + v15++) = v23;
      }
      if (!v16[176])
        sub_10000BA44();
      v24 = 0;
      v25 = (float *)v54[0];
      v26 = 1;
      do
      {
        v27 = v26;
        v28 = *(double *)(v19 + 8 * (v24 | (2 * v14)));
        v25[v15++] = v28;
        v24 = 1;
        v26 = 0;
      }
      while ((v27 & 1) != 0);
      ++v20;
      ++v13;
    }
    while (v20 != 9);
    ++v14;
    v13 = v53 + 9;
  }
  if (v15 != v52)
  {
    v45 = "m == flattenedVectorsize";
    v46 = 151;
    goto LABEL_54;
  }
  __p[0] = v54[0];
  LODWORD(v65) = 65568;
  if (espresso_network_bind_buffer(a1[9], a1[10], "input_2", __p, 0x10000, 0x20000, 0x10000))
  {
    v45 = "status == ESPRESSO_STATUS_SUCCESS";
    v46 = 158;
LABEL_54:
    __assert_rtn("makePrediction", "NRBYSpatialGesturePredictor.cpp", v46, v45);
  }
  if (espresso_network_bind_buffer(a1[9], a1[10], "Identity", buf, 0x20000, 0x10000, 0x10000))
  {
    v47 = 163;
    goto LABEL_57;
  }
  if (espresso_plan_execute_sync(a1[11]))
  {
    v47 = 167;
LABEL_57:
    __assert_rtn("makePrediction", "NRBYSpatialGesturePredictor.cpp", v47, "status == ESPRESSO_STATUS_SUCCESS");
  }
  v29 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v30 = **(float **)buf;
    v31 = *(float *)(*(_QWORD *)buf + 4);
    v32 = *(float *)(*(_QWORD *)buf + 8);
    *(_DWORD *)v66 = 134218496;
    *(double *)&v66[4] = v30;
    *(_WORD *)&v66[12] = 2048;
    *(double *)&v66[14] = v31;
    *(_WORD *)&v66[22] = 2048;
    v67 = v32;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #probabilities Other = %f, HighConfidenceHandoff = %f, LowConfidenceHandoff = %f", v66, 0x20u);
  }
  v33 = 0;
  v34 = 0;
  memset(v66, 0, sizeof(v66));
  do
  {
    v35 = *(_QWORD *)buf;
    if ((unint64_t)v33 >= *(_QWORD *)&v66[16])
    {
      v37 = *(_DWORD **)v66;
      v38 = ((uint64_t)v33 - *(_QWORD *)v66) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        sub_100026E7C();
      v40 = *(_QWORD *)&v66[16] - *(_QWORD *)v66;
      if ((uint64_t)(*(_QWORD *)&v66[16] - *(_QWORD *)v66) >> 1 > v39)
        v39 = v40 >> 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        v42 = (char *)sub_10003B05C((uint64_t)&v66[16], v41);
        v37 = *(_DWORD **)v66;
        v33 = *(_DWORD **)&v66[8];
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[4 * v38];
      *(_DWORD *)v43 = *(_DWORD *)(v35 + 4 * v34);
      v36 = v43 + 4;
      while (v33 != v37)
      {
        v44 = *--v33;
        *((_DWORD *)v43 - 1) = v44;
        v43 -= 4;
      }
      *(_QWORD *)v66 = v43;
      *(_QWORD *)&v66[8] = v36;
      *(_QWORD *)&v66[16] = &v42[4 * v41];
      if (v37)
        operator delete(v37);
    }
    else
    {
      *v33 = *(_DWORD *)(*(_QWORD *)buf + 4 * v34);
      v36 = v33 + 1;
    }
    *(_QWORD *)&v66[8] = v36;
    ++v34;
    v33 = v36;
  }
  while (v34 != 3);
  ++*(_DWORD *)(v49 + 8);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_10031ECDC((uint64_t)a1, v48, (float **)v66, v49, v50, (uint64_t)a5);
  if (*(_QWORD *)v66)
  {
    *(_QWORD *)&v66[8] = *(_QWORD *)v66;
    operator delete(*(void **)v66);
  }
  if (v54[0])
  {
    v54[1] = v54[0];
    operator delete(v54[0]);
  }
}

void sub_10031E69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_10031E6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  double v23;
  int v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  double v32;
  double *v33;
  uint64_t v34;
  int v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[26];
  double v44[2];
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  double __dst[586];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003ED3B4();
  if (!*(_DWORD *)(a3 + 32))
  {
    v6 = (_BYTE *)(a2 + 4680);
    if (!*(_BYTE *)(a2 + 4680))
      sub_1003ED29C();
    v7 = (_BYTE *)(a2 + 9368);
    if (!*(_BYTE *)(a2 + 9456))
      sub_1003ED2C4();
    if (!*(_BYTE *)(a2 + 10632))
      sub_1003ED2EC();
    if (*(_BYTE *)(a3 + 4))
    {
      bzero(__dst, 0x1248uLL);
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      v8 = 9 * (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
      LODWORD(v9) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48)) - v8;
      if ((int)v9 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48)))
      {
        v9 = (int)v9;
        do
        {
          (*(void (**)(double *__return_ptr))(**(_QWORD **)(a1 + 56) + 24))(v44);
          v10 = v44[2
                  * ((int)v9 % (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)))];
          (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 56) + 24))(v43);
          v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
          if (!*v6)
            goto LABEL_55;
          __dst[v9] = (*(double *)(a2 + 8 * v9) - v10) / *(double *)&v43[2 * ((int)v9 % v11) + 1];
        }
        while (++v9 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48)));
      }
      LODWORD(v12) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)) - 2;
      if ((int)v12 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
      {
        v12 = (int)v12;
        do
        {
          v44[0] = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
          v45 = v13;
          v14 = v12 & 1;
          if ((int)v12 < 0)
            v14 = -v14;
          v15 = v44[2 * v14];
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
          if (!*(_BYTE *)(a2 + 9456))
            goto LABEL_55;
          v16 = *(double *)(a2 + 9376 + 8 * v12) - v15;
          *((double *)&v46 + v12++) = v16
                                    / (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
        }
        while (v12 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)));
      }
      *(_BYTE *)(a3 + 4) = 0;
      goto LABEL_41;
    }
    if (!*v7)
      sub_1003ED314();
    if (!*(_BYTE *)(a2 + 9544))
      sub_1003ED33C();
    memcpy(__dst, (const void *)(a2 + 4688), 0x1248uLL);
    v17 = *(_OWORD *)(a2 + 9512);
    v48 = *(_OWORD *)(a2 + 9496);
    v49 = v17;
    v50 = *(_OWORD *)(a2 + 9528);
    v18 = *(_OWORD *)(a2 + 9480);
    v46 = *(_OWORD *)(a2 + 9464);
    v47 = v18;
    v19 = 9 * (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
    if (v19 >= (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48)))
    {
LABEL_25:
      LODWORD(v22) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48)) - v19;
      if ((int)v22 >= (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48)))
      {
LABEL_29:
        if (!*(_BYTE *)(a2 + 10648))
          sub_1003ED364();
        v25 = *(double *)(a2 + 10640);
        v26 = *(double *)(a3 + 24);
        if ((*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)) < 3)
        {
LABEL_34:
          v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)) - 2;
          if (v30 >= (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
          {
LABEL_41:
            v39 = *v7;
            memcpy((void *)(a2 + 4688), __dst, 0x1248uLL);
            if (!v39)
              *v7 = 1;
            v40 = *(unsigned __int8 *)(a2 + 9544);
            v41 = v49;
            *(_OWORD *)(a2 + 9496) = v48;
            *(_OWORD *)(a2 + 9512) = v41;
            *(_OWORD *)(a2 + 9528) = v50;
            v42 = v47;
            *(_OWORD *)(a2 + 9464) = v46;
            *(_OWORD *)(a2 + 9480) = v42;
            if (!v40)
              *(_BYTE *)(a2 + 9544) = 1;
            if (!*(_BYTE *)(a2 + 10648))
              sub_1003ED38C();
            *(_QWORD *)(a3 + 24) = *(_QWORD *)(a2 + 10640);
            return;
          }
          v31 = v30;
          v32 = v25 - v26;
          v33 = (double *)(a2 + 8 * v30 + 9376);
          while (1)
          {
            v44[0] = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
            v45 = v34;
            v35 = (int)v31 >= 0 ? v31 & 1 : -(v31 & 1);
            v36 = v44[2 * v35];
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
            v43[1] = v37;
            v43[3] = v38;
            if (!*(_BYTE *)(a2 + 9456))
              break;
            *((double *)&v46 + v31++) = ((*v33 - *(v33 - 2)) / v32 - v36) / *(double *)&v43[2 * v35 + 1];
            ++v33;
            if (v31 >= (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
              goto LABEL_41;
          }
        }
        else
        {
          v27 = 0;
          while (*(_BYTE *)(a2 + 9544))
          {
            *((_QWORD *)&v46 + v27) = *(_QWORD *)(a2 + 9480 + 8 * v27);
            v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
            v29 = v27 + 3;
            ++v27;
            if (v29 >= v28)
              goto LABEL_34;
          }
        }
      }
      else
      {
        v22 = (int)v22;
        while (1)
        {
          (*(void (**)(double *__return_ptr))(**(_QWORD **)(a1 + 56) + 24))(v44);
          v23 = v44[2
                  * ((int)v22 % (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)))];
          (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 56) + 24))(v43);
          v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
          if (!*v6)
            break;
          __dst[v22] = (*(double *)(a2 + 8 * v22) - v23) / *(double *)&v43[2 * ((int)v22 % v24) + 1];
          if (++v22 >= (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48)))
            goto LABEL_29;
        }
      }
    }
    else
    {
      v20 = v19;
      v21 = __dst;
      while (*v7)
      {
        *v21++ = *(double *)(a2 + 4688 + 8 * v20);
        if (++v20 >= (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48)))
          goto LABEL_25;
      }
    }
LABEL_55:
    sub_10000BA44();
  }
}

void sub_10031ECDC(uint64_t a1@<X0>, uint64_t a2@<X1>, float **a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  float *v11;
  float v12;
  float v13;
  int v14;
  float v15;
  BOOL v16;
  BOOL v17;
  double v18;
  double v19;
  double v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  unsigned __int8 v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  double *v30;
  double *v31;
  uint64_t v32;
  double *v33;
  double *v34;
  double *v35;
  int v36;
  int v37;
  unint64_t v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  NSObject *v45;
  __n128 v46;
  __n128 v47;
  double v48;
  double v49;
  double v50;
  NSObject *v51;
  __n128 v52;
  __n128 v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  double v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *__p[3];
  void *v67;
  double *v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  double v73;
  _BYTE buf[24];
  uint64_t v75;
  __int16 v76;
  uint64_t v77;

  v11 = *a3;
  v12 = **a3;
  v13 = (*a3)[1];
  if (v12 <= v13 || v12 <= v11[2])
  {
    v15 = v11[2];
    if (v13 <= v12 || ((float)(v13 - v12) > 0.03 ? (v16 = v13 <= v15) : (v16 = 1), v16))
    {
      v14 = 0;
      v17 = v15 <= v12 || v15 <= v13;
      if (v17 || (float)(v15 - v12) <= 0.03)
        goto LABEL_20;
      v18 = v15;
      v19 = *(double *)(a4 + 16);
      v20 = 0.0799999982;
    }
    else
    {
      v18 = v13;
      v19 = *(double *)(a4 + 16);
      v20 = 0.100000001;
    }
    v21 = v19 + v18 * v20;
    if (v21 > 1.0)
      v21 = 1.0;
    *(double *)(a4 + 16) = v21;
    v14 = 1;
  }
  else
  {
    switch(a5)
    {
      case 0:
      case 2:
        sub_1003ED460();
      case 1:
        v14 = 0;
        *(_QWORD *)(a4 + 16) = 0;
        break;
      case 3:
        v14 = 0;
        v60 = *(double *)(a4 + 16) + -0.0799999982;
        if (v60 < 0.0)
          v60 = 0.0;
        *(double *)(a4 + 16) = v60;
        break;
      default:
        v14 = 0;
        break;
    }
  }
LABEL_20:
  v22 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *(_QWORD *)(a4 + 16);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #probabilities hysteresisProb = %f", buf, 0xCu);
  }
  if (!*(_DWORD *)(a4 + 32))
  {
    if (!*(_BYTE *)(a2 + 9456))
      sub_1003ED3E0();
    v73 = 0.0;
    v24 = atomic_load((unsigned __int8 *)&qword_10085DE18);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_10085DE18))
    {
      dword_10085DE10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
      __cxa_guard_release(&qword_10085DE18);
    }
    sub_100321A18(&v71, dword_10085DE10);
    sub_100321A18(&v69, dword_10085DE10);
    v25 = dword_10085DE10;
    if (dword_10085DE10 < 1)
      goto LABEL_78;
    if (!*(_BYTE *)(a2 + 9456))
      sub_10000BA44();
    v26 = 0;
    v27 = v71;
    v28 = v69;
    v29 = 16 * dword_10085DE10;
    do
    {
      *v27++ = *(_QWORD *)(a2 + v26 + 9376);
      *v28++ = *(_QWORD *)(a2 + v26 + 9384);
      v26 += 16;
    }
    while (v29 != v26);
    if (v25 < 1)
LABEL_78:
      __assert_rtn("_refineModelPrediction", "NRBYSpatialGesturePredictor.cpp", 331, "_dimInputsModel > 0");
    sub_100321A18(&v67, (v25 - 1));
    sub_100321A18(__p, dword_10085DE10 - 1);
    v30 = (double *)v67;
    if (dword_10085DE10 >= 2)
    {
      v31 = (double *)__p[0];
      v32 = dword_10085DE10 - 1;
      v33 = (double *)((char *)v69 + 8);
      v34 = (double *)((char *)v71 + 8);
      v35 = (double *)v67;
      do
      {
        *v35++ = *(v34 - 1) - *v34;
        *v31++ = *v33 - *(v33 - 1);
        ++v33;
        ++v34;
        --v32;
      }
      while (v32);
    }
    if (v68 == v30)
    {
      v37 = 0;
      v36 = 0;
    }
    else
    {
      v36 = 0;
      v37 = 0;
      v38 = v68 - v30;
      v39 = (double *)__p[0];
      if (v38 <= 1)
        v38 = 1;
      do
      {
        v40 = *v30++;
        if (v40 > 0.0)
          ++v37;
        v41 = *v39++;
        if (v41 > 0.0)
          ++v36;
        --v38;
      }
      while (v38);
    }
    switch(a5)
    {
      case 0:
      case 2:
        __assert_rtn("_refineModelPrediction", "NRBYSpatialGesturePredictor.cpp", 382, "0");
      case 1:
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003ED434();
        v42 = *(double *)(a4 + 16);
        if ((v14 & 1) != 0 || v42 > *(double *)(a1 + 32) * 0.5)
        {
          v43 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48));
          v44 = v43 * (double)v37
              + v42 * 0.55
              + (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 56))(*(_QWORD *)(a1 + 48)) * (double)v36;
          v73 = v44;
          v45 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v44;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #probabilities with range and rssi derivatives SinglePredictor handoffConfidence = %f", buf, 0xCu);
          }
          sub_10031F4A8(a1, a2, v14, (unint64_t *)&v73, a4, 1, (uint64_t)buf, v46, v47);
LABEL_56:
          *(_OWORD *)a6 = *(_OWORD *)buf;
          *(_QWORD *)(a6 + 16) = *(_QWORD *)&buf[16];
LABEL_57:
          v54 = qword_10085F520;
          if (v14)
          {
            if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
              goto LABEL_68;
            v55 = *(v72 - 1);
            v56 = *(v70 - 1);
            v57 = *(_QWORD *)(a4 + 16);
            v58 = *(_QWORD *)(a6 + 8);
            *(_DWORD *)buf = 134218752;
            *(_QWORD *)&buf[4] = v55;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v56;
            *(_WORD *)&buf[22] = 2048;
            v75 = v57;
            v76 = 2048;
            v77 = v58;
            v59 = "#spatialGesturesPredictor #evaluation distance = %f, rssi = %f, prediction = Handoff, hysteresis prob "
                  "= %f, handoff confidence = %f";
            goto LABEL_67;
          }
        }
        else
        {
          v61 = *(_QWORD *)&v73;
          *(_DWORD *)a6 = 0;
          *(_QWORD *)(a6 + 8) = v61;
          *(_BYTE *)(a6 + 16) = 0;
          v54 = qword_10085F520;
        }
        if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          goto LABEL_68;
        v62 = *(v72 - 1);
        v63 = *(v70 - 1);
        v64 = *(_QWORD *)(a4 + 16);
        v65 = *(_QWORD *)(a6 + 8);
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = v62;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v63;
        *(_WORD *)&buf[22] = 2048;
        v75 = v64;
        v76 = 2048;
        v77 = v65;
        v59 = "#spatialGesturesPredictor #evaluation distance = %f, rssi = %f, prediction = Other, hysteresis prob = %f, "
              "handoff confidence = %f";
LABEL_67:
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, v59, buf, 0x2Au);
LABEL_68:
        *(_DWORD *)a4 = *(_DWORD *)a6;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v67)
        {
          v68 = (double *)v67;
          operator delete(v67);
        }
        if (v69)
        {
          v70 = v69;
          operator delete(v69);
        }
        if (v71)
        {
          v72 = v71;
          operator delete(v71);
        }
        break;
      case 3:
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003ED408();
        v48 = *(double *)(a4 + 16);
        v49 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48));
        v50 = v49 * (double)v37
            + v48 * 0.55
            + (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 56))(*(_QWORD *)(a1 + 48)) * (double)v36;
        v73 = v50;
        v51 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(double *)&buf[4] = v50;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #probabilities with range and rssi derivatives DualAnchorAntennaPredictor handoffConfidence = %f", buf, 0xCu);
        }
        sub_10031F4A8(a1, a2, v14, (unint64_t *)&v73, a4, 3, (uint64_t)buf, v52, v53);
        goto LABEL_56;
      default:
        goto LABEL_57;
    }
  }
}

void sub_10031F3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  __cxa_guard_abort(&qword_10085DE18);
  _Unwind_Resume(a1);
}

double sub_10031F45C(uint64_t a1, int a2)
{
  double *v2;
  double result;

  switch(a2)
  {
    case 0:
    case 2:
      sub_1003ED488();
    case 1:
      v2 = (double *)(a1 + 32);
      goto LABEL_4;
    case 3:
      v2 = (double *)(a1 + 40);
LABEL_4:
      result = *v2;
      break;
    default:
      return result;
  }
  return result;
}

void sub_10031F4A8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>, __n128 a8@<Q0>, __n128 a9@<Q1>)
{
  int v11;
  unint64_t *v15;
  int v16;
  double *v17;
  double *v18;
  double v19;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double v30;
  double v31;
  NSObject *v32;
  uint64_t i;
  int v34;
  uint8_t v35[8];
  double *v36;
  double *v37;

  v11 = a3;
  switch(a6)
  {
    case 0:
    case 2:
      sub_1003ED4B0();
    case 1:
      v15 = (unint64_t *)(a1 + 32);
      goto LABEL_4;
    case 3:
      v15 = (unint64_t *)(a1 + 40);
LABEL_4:
      a9.n128_u64[0] = *v15;
      break;
    default:
      a9.n128_u64[0] = 0;
      break;
  }
  if (a3 == 1 || (a8.n128_u64[0] = *a4, *(double *)a4 > a9.n128_f64[0]))
  {
    v16 = (*(uint64_t (**)(_QWORD, __n128, __n128))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a8, a9);
    sub_100321A18(&v36, 9 * v16);
    if (!*(_DWORD *)(a5 + 32))
    {
      if (!*(_BYTE *)(a2 + 4680))
        __assert_rtn("_evaluateHeuristics", "NRBYSpatialGesturePredictor.cpp", 425, "inputObject.deviceMotionBufferPrimary.has_value()");
      for (i = 0;
            i < (int)(9 * (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48)));
            ++i)
      {
        if (!*(_BYTE *)(a2 + 4680))
          sub_10000BA44();
        v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
        v36[i] = *(double *)(a2 + 8 * v34 * (int)i);
      }
    }
    v17 = v36;
    v18 = v36 + 1;
    v19 = *v36;
    if (v36 == v37 || v18 == v37)
    {
      v21 = v36;
    }
    else
    {
      v22 = *v36;
      v23 = v36 + 1;
      v24 = v36;
      v25 = v36 + 1;
      do
      {
        v26 = *v25++;
        v27 = v26;
        if (v26 < v22)
        {
          v22 = v27;
          v24 = v23;
        }
        v23 = v25;
      }
      while (v25 != v37);
      v28 = *v24;
      v21 = v36;
      v29 = v36 + 1;
      do
      {
        v30 = *v29++;
        v31 = v30;
        if (v19 < v30)
        {
          v19 = v31;
          v21 = v18;
        }
        v18 = v29;
      }
      while (v29 != v37);
      v19 = v28;
    }
    if (vabdd_f64(v19, *v21) <= 0.85)
    {
      v11 = 1;
    }
    else
    {
      *a4 = 0;
      v32 = qword_10085F520;
      v11 = 0;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #evaluation Speculating sideways motion", v35, 2u);
        v11 = 0;
        v17 = v36;
      }
    }
    if (v17)
    {
      v37 = v17;
      operator delete(v17);
    }
    a8.n128_u64[0] = *a4;
  }
  *(_DWORD *)a7 = v11;
  *(_QWORD *)(a7 + 8) = a8.n128_u64[0];
  *(_BYTE *)(a7 + 16) = 0;
}

void sub_10031F704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10031F728(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint8_t v7[16];

  *(_QWORD *)a1 = off_100815E88;
  if (espresso_plan_destroy(*(_QWORD *)(a1 + 88)))
  {
    v6 = 461;
    goto LABEL_14;
  }
  if (espresso_context_destroy(*(_QWORD *)(a1 + 96)))
  {
    v6 = 464;
LABEL_14:
    __assert_rtn("~GestureClassifier", "NRBYSpatialGesturePredictor.cpp", v6, "status == ESPRESSO_STATUS_SUCCESS");
  }
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Deleted model network parameters", v7, 2u);
  }
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10031F82C(uint64_t a1)
{
  sub_10031F728(a1);
  operator delete();
}

uint64_t sub_10031F850(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  char v13;
  char v14;
  NSObject *v15;
  NSObject *v16;
  uint8_t buf[4];
  int v19;

  v5 = 0;
  *(_QWORD *)a1 = off_100815EB0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = a1 + 64;
  do
  {
    v7 = a1 + v5;
    *(_WORD *)(v7 + 64) = 0;
    *(_QWORD *)(v7 + 88) = 0;
    *(_QWORD *)(v7 + 96) = 0;
    v5 += 40;
  }
  while (v5 != 360);
  for (i = 0; i != 80; i += 40)
  {
    v9 = a1 + i;
    *(_WORD *)(v9 + 424) = 0;
    *(_QWORD *)(v9 + 448) = 0;
    *(_QWORD *)(v9 + 456) = 0;
  }
  *(_OWORD *)(a1 + 9880) = 0u;
  *(_OWORD *)(a1 + 9896) = 0u;
  *(_OWORD *)(a1 + 9864) = 0u;
  *(_OWORD *)(a1 + 11160) = 0u;
  *(_OWORD *)(a1 + 11176) = 0u;
  *(_OWORD *)(a1 + 11192) = 0u;
  *(_BYTE *)(a1 + 11208) = 0;
  sub_100021C24((_QWORD *)(a1 + 8), a2);
  bzero((void *)(a1 + 10080), 0x438uLL);
  *(_DWORD *)(a1 + 56) = 0;
  bzero((void *)(a1 + 504), 0x2490uLL);
  v10 = 0;
  *(_OWORD *)(a1 + 10040) = 0u;
  *(_OWORD *)(a1 + 10056) = 0u;
  *(_OWORD *)(a1 + 10008) = 0u;
  *(_OWORD *)(a1 + 10024) = 0u;
  *(_OWORD *)(a1 + 9976) = 0u;
  *(_OWORD *)(a1 + 9992) = 0u;
  *(_OWORD *)(a1 + 9944) = 0u;
  *(_OWORD *)(a1 + 9960) = 0u;
  *(_OWORD *)(a1 + 9912) = 0u;
  *(_OWORD *)(a1 + 9928) = 0u;
  *(_DWORD *)(a1 + 11212) = a3;
  do
  {
    sub_10031DB58(v6, 100.0, 50.0);
    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #LPF configured LPF for signal %d in device motion data", buf, 8u);
    }
    ++v10;
    v6 += 40;
  }
  while (v10 != 9);
  v12 = 0;
  v13 = 1;
  do
  {
    v14 = v13;
    sub_10031DB58(a1 + 424 + 40 * v12, 50.0, 20.0);
    v15 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #LPF configured LPF for signal %d in UWB data", buf, 8u);
    }
    v13 = 0;
    v12 = 1;
  }
  while ((v14 & 1) != 0);
  v16 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor GesturePredictor is created", buf, 2u);
  }
  return a1;
}

void sub_10031FAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;
  void *v15;
  void *v16;

  if (*(char *)(v12 + 11207) < 0)
    operator delete(*(void **)(v12 + 11184));
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 11168) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v12 + 9888);
  if (v15)
  {
    *(_QWORD *)(v12 + 9896) = v15;
    operator delete(v15);
  }
  v16 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v12 + 9872) = v16;
    operator delete(v16);
  }
  sub_10001AE68(a12);
  _Unwind_Resume(a1);
}

void sub_10031FB5C(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  _OWORD v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD v70[4];
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  if (*(_BYTE *)(a1[1] + 64))
  {
    v4 = *(_OWORD *)(a2 + 24);
    v70[0] = *(_OWORD *)(a2 + 8);
    v70[1] = v4;
    v5 = *(_OWORD *)(a2 + 88);
    v70[2] = *(_OWORD *)(a2 + 40);
    v70[3] = v5;
    v71 = *(_QWORD *)(a2 + 104);
    v72 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)&v5 = *(_QWORD *)(a2 + 56);
    v73 = *(_QWORD *)(a2 + 80);
    v74 = v5;
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    sub_10031FFD0((uint64_t)a1, (uint64_t)v70, (uint64_t)&v63);
    v6 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v6)
      sub_1003ED530();
    v7 = a1[1234];
    v8 = a1[1235];
    if (v7 >= v8)
    {
      v13 = a1[1233];
      v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7 - v13) >> 3);
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) > 0x276276276276276)
        sub_100026E7C();
      v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v8 - v13) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x13B13B13B13B13BLL)
        v17 = 0x276276276276276;
      else
        v17 = v15;
      if (v17)
        v18 = (char *)sub_100321A8C((uint64_t)(a1 + 1235), v17);
      else
        v18 = 0;
      v19 = &v18[104 * v14];
      v20 = &v18[104 * v17];
      v21 = v64;
      *(_OWORD *)v19 = v63;
      *((_OWORD *)v19 + 1) = v21;
      *((_QWORD *)v19 + 12) = v69;
      v22 = v68;
      *((_OWORD *)v19 + 4) = v67;
      *((_OWORD *)v19 + 5) = v22;
      v23 = v66;
      *((_OWORD *)v19 + 2) = v65;
      *((_OWORD *)v19 + 3) = v23;
      v12 = v19 + 104;
      v6 = a1[1234];
      v24 = a1[1233];
      if (v6 != v24)
      {
        do
        {
          v25 = *(_OWORD *)(v6 - 104);
          v26 = *(_OWORD *)(v6 - 88);
          *(_OWORD *)(v19 - 72) = *(_OWORD *)(v6 - 72);
          *(_OWORD *)(v19 - 88) = v26;
          *(_OWORD *)(v19 - 104) = v25;
          v27 = *(_OWORD *)(v6 - 56);
          v28 = *(_OWORD *)(v6 - 40);
          v29 = *(_OWORD *)(v6 - 24);
          *((_QWORD *)v19 - 1) = *(_QWORD *)(v6 - 8);
          *(_OWORD *)(v19 - 24) = v29;
          *(_OWORD *)(v19 - 40) = v28;
          *(_OWORD *)(v19 - 56) = v27;
          v19 -= 104;
          v6 -= 104;
        }
        while (v6 != v24);
        v6 = a1[1233];
      }
      a1[1233] = v19;
      a1[1234] = v12;
      a1[1235] = v20;
      if (v6)
        operator delete((void *)v6);
    }
    else
    {
      v9 = v68;
      *(_OWORD *)(v7 + 64) = v67;
      *(_OWORD *)(v7 + 80) = v9;
      *(_QWORD *)(v7 + 96) = v69;
      v10 = v64;
      *(_OWORD *)v7 = v63;
      *(_OWORD *)(v7 + 16) = v10;
      v11 = v66;
      v12 = (char *)(v7 + 104);
      *(_OWORD *)(v7 + 32) = v65;
      *(_OWORD *)(v7 + 48) = v11;
    }
    a1[1234] = v12;
    v30 = (_QWORD *)a1[1237];
    v31 = a1[1238];
    if ((unint64_t)v30 >= v31)
    {
      v6 = a1[1236];
      v33 = ((uint64_t)v30 - v6) >> 3;
      if ((unint64_t)(v33 + 1) >> 61)
        sub_100026E7C();
      v34 = v31 - v6;
      v35 = (uint64_t)(v31 - v6) >> 2;
      if (v35 <= v33 + 1)
        v35 = v33 + 1;
      if (v34 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
      {
        v37 = (char *)sub_10005538C((uint64_t)(a1 + 1238), v36);
        v30 = (_QWORD *)a1[1237];
        v6 = a1[1236];
      }
      else
      {
        v37 = 0;
      }
      v38 = &v37[8 * v33];
      v39 = &v37[8 * v36];
      *(_QWORD *)v38 = *(_QWORD *)a2;
      v32 = v38 + 8;
      while (v30 != (_QWORD *)v6)
      {
        v40 = *--v30;
        *((_QWORD *)v38 - 1) = v40;
        v38 -= 8;
      }
      a1[1236] = v38;
      a1[1237] = v32;
      a1[1238] = v39;
      if (v6)
        operator delete((void *)v6);
    }
    else
    {
      *v30 = *(_QWORD *)a2;
      v32 = v30 + 1;
    }
    a1[1237] = v32;
    v41 = *(_OWORD *)(a2 + 72);
    v62[0] = *(_OWORD *)(a2 + 56);
    v62[1] = v41;
    sub_1003200D8(v6, (double *)v62);
    v45 = v42;
    v46 = v43;
    v47 = v44;
    v48 = (_QWORD *)a1[1396];
    v49 = a1[1397];
    if ((unint64_t)v48 >= v49)
    {
      v51 = a1[1395];
      v52 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - v51) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100026E7C();
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v51) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v53;
      if (v55)
        v56 = (char *)sub_100026E90((uint64_t)(a1 + 1397), v55);
      else
        v56 = 0;
      v57 = &v56[24 * v52];
      v58 = &v56[24 * v55];
      *(_QWORD *)v57 = v45;
      *((_QWORD *)v57 + 1) = v46;
      *((_QWORD *)v57 + 2) = v47;
      v50 = v57 + 24;
      v59 = (char *)a1[1396];
      v60 = (char *)a1[1395];
      if (v59 != v60)
      {
        do
        {
          v61 = *(_OWORD *)(v59 - 24);
          *((_QWORD *)v57 - 1) = *((_QWORD *)v59 - 1);
          *(_OWORD *)(v57 - 24) = v61;
          v57 -= 24;
          v59 -= 24;
        }
        while (v59 != v60);
        v59 = (char *)a1[1395];
      }
      a1[1395] = v57;
      a1[1396] = v50;
      a1[1397] = v58;
      if (v59)
        operator delete(v59);
    }
    else
    {
      *v48 = v42;
      v48[1] = v43;
      v50 = v48 + 3;
      v48[2] = v44;
    }
    a1[1396] = v50;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003ED504();
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003ED4D8();
  }
}

__n128 sub_10031FFD0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double *v6;
  double v7;
  NSObject *v8;
  __n128 result;
  uint8_t v10[16];

  v5 = 0;
  v6 = (double *)(a1 + 96);
  do
  {
    v7 = *(double *)(a2 + v5);
    if (*((_BYTE *)v6 - 32))
    {
      if (*((_BYTE *)v6 - 31))
        v7 = (1.0 - *(v6 - 1)) * *v6 + *(v6 - 1) * v7;
      else
        *((_BYTE *)v6 - 31) = 1;
      *v6 = v7;
    }
    else
    {
      v8 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v10 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#spatialGesturesPredictor Something wrong with filtering, using unfiltered signal", v10, 2u);
        v7 = *(double *)(a2 + v5);
      }
    }
    v6 += 5;
    *(double *)(a3 + v5) = v7;
    v5 += 8;
  }
  while (v5 != 72);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a2 + 72);
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a3 + 88) = result;
  return result;
}

void sub_1003200D8(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a2 * v4 - v5 * v3 + *a2 * v4 - v5 * v3;
  if (fabs(v6) < 1.0)
    asin(v6);
  atan2(v5 * v4 + v2 * v3 + v5 * v4 + v2 * v3, (v4 * v4 + v3 * v3) * -2.0 + 1.0);
  atan2(v3 * v4 + v2 * v5 + v3 * v4 + v2 * v5, (v5 * v5 + v4 * v4) * -2.0 + 1.0);
}

void sub_1003201A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  __int128 v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _DWORD *v29;
  int v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  _DWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  int v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  __int128 *v75;
  _BYTE *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  int *v85;
  uint64_t v86;
  uint8_t *v87;
  int v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  _BYTE *v97;
  int v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  void **v104;
  uint64_t v105;
  __int128 *v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  char *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  __int128 v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  __int128 v152;
  _QWORD *v153;
  _QWORD *v154;
  char *v155;
  __int128 v156;
  uint64_t v157;
  void *v158;
  _QWORD *v159;
  unint64_t v160;
  void *v161;
  _QWORD *v162;
  unint64_t v163;
  void *__p;
  char *v165;
  unint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  _BYTE __src[936];
  uint8_t buf[1088];
  uint8_t __dst[4688];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 64))
  {
    v4 = a2;
    v6 = *(_OWORD *)(a1 + 9944);
    v184 = *(_OWORD *)(a1 + 9928);
    v185 = v6;
    v7 = *(_OWORD *)(a1 + 9976);
    v186 = *(_OWORD *)(a1 + 9960);
    v187 = v7;
    if (!*(_BYTE *)(a2 + 72))
      sub_1003ED55C();
    switch(*(_DWORD *)(a1 + 11212))
    {
      case 0:
      case 2:
        sub_1003ED5B0();
      case 1:
        v3 = *(float *)(a2 + 16);
        v2 = *(_QWORD *)(a2 + 64);
        break;
      case 3:
        v8 = *(_QWORD *)(a2 + 64);
        *(double *)__dst = *(float *)(a2 + 16);
        *(_QWORD *)&__dst[8] = v8;
        v3 = sub_100320FCC(a1, (uint64_t)__dst);
        v2 = v9;
        v10 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #LPF UWB signals filtered for DualAnchorAntennaPredictor", buf, 2u);
        }
        break;
      default:
        break;
    }
    v11 = v185;
    *(_OWORD *)(a1 + 9912) = v184;
    *(_OWORD *)(a1 + 9928) = v11;
    v12 = v187;
    *(_OWORD *)(a1 + 9944) = v186;
    *(_OWORD *)(a1 + 9960) = v12;
    *(double *)(a1 + 9976) = v3;
    *(_QWORD *)(a1 + 9984) = v2;
    v13 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__dst = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor GesturePredictor consumed UWB input", __dst, 2u);
    }
    bzero(__src, 0x3A8uLL);
    v180 = 0;
    v178 = 0u;
    v179 = 0u;
    v176 = 0u;
    v177 = 0u;
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    v171 = 0u;
    v169 = 0u;
    v170 = 0u;
    v167 = 0u;
    v168 = 0u;
    v14 = *(_QWORD *)(a1 + 9888);
    v15 = *(_QWORD *)(a1 + 9896) - v14;
    v16 = v15 >> 3;
    if (v15)
    {
      v17 = 0;
      if (v16 <= 1)
        v18 = 1;
      else
        v18 = v16;
      while (*(double *)(v14 + 8 * v17) <= *(double *)(v4 + 8))
      {
        if (v18 == ++v17)
          goto LABEL_19;
      }
      LODWORD(v16) = v17;
    }
LABEL_19:
    v19 = (int)v16;
    if ((_DWORD)v16 == 9)
    {
      v20 = 0;
      v21 = *(_QWORD *)(a1 + 9864);
      v22 = *(_QWORD *)(a1 + 11160);
      v23 = __src;
      do
      {
        v24 = (char *)&v167 + v20;
        v25 = v22 + v20;
        v26 = *(_OWORD *)(v21 + 80);
        *((_OWORD *)v23 + 4) = *(_OWORD *)(v21 + 64);
        *((_OWORD *)v23 + 5) = v26;
        *((_QWORD *)v23 + 12) = *(_QWORD *)(v21 + 96);
        v27 = *(_OWORD *)(v21 + 16);
        *(_OWORD *)v23 = *(_OWORD *)v21;
        *((_OWORD *)v23 + 1) = v27;
        v28 = *(_OWORD *)(v21 + 48);
        *((_OWORD *)v23 + 2) = *(_OWORD *)(v21 + 32);
        *((_OWORD *)v23 + 3) = v28;
        *(_OWORD *)v24 = *(_OWORD *)(v22 + v20);
        v20 += 24;
        v21 += 104;
        v23 += 104;
        *((_QWORD *)v24 + 2) = *(_QWORD *)(v25 + 16);
      }
      while (v20 != 216);
    }
    else
    {
      if ((v16 - 1) > 7)
      {
        if ((int)v16 < 10)
          goto LABEL_106;
        v157 = v4;
        v47 = 0;
        v48 = 0;
        memset(__dst, 0, 24);
        do
        {
          if ((unint64_t)v47 >= *(_QWORD *)&__dst[16])
          {
            v49 = *(_DWORD **)__dst;
            v50 = ((uint64_t)v47 - *(_QWORD *)__dst) >> 2;
            v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62)
              sub_100026E7C();
            v52 = *(_QWORD *)&__dst[16] - *(_QWORD *)__dst;
            if ((uint64_t)(*(_QWORD *)&__dst[16] - *(_QWORD *)__dst) >> 1 > v51)
              v51 = v52 >> 1;
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
              v53 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v53 = v51;
            if (v53)
            {
              v53 = (unint64_t)sub_10003B05C((uint64_t)&__dst[16], v53);
              v55 = v54;
              v47 = *(_DWORD **)&__dst[8];
              v49 = *(_DWORD **)__dst;
            }
            else
            {
              v55 = 0;
            }
            v56 = (_DWORD *)(v53 + 4 * v50);
            *v56 = v48;
            v57 = v56 + 1;
            while (v47 != v49)
            {
              v58 = *--v47;
              *--v56 = v58;
            }
            *(_QWORD *)__dst = v56;
            *(_QWORD *)&__dst[8] = v57;
            *(_QWORD *)&__dst[16] = v53 + 4 * v55;
            if (v49)
              operator delete(v49);
            v47 = v57;
          }
          else
          {
            *v47++ = v48;
          }
          *(_QWORD *)&__dst[8] = v47;
          ++v48;
        }
        while (v48 != (_DWORD)v16);
        LODWORD(__p) = 5;
        sub_100321AD4(*(unint64_t *)__dst, (uint64_t)v47, (uint64_t)&__p);
        v59 = 0;
        v60 = 0;
        memset(buf, 0, 24);
        do
        {
          v61 = *(_QWORD *)__dst;
          if ((unint64_t)v59 >= *(_QWORD *)&buf[16])
          {
            v62 = *(_DWORD **)buf;
            v63 = ((uint64_t)v59 - *(_QWORD *)buf) >> 2;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62)
              sub_100026E7C();
            v65 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
            if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 1 > v64)
              v64 = v65 >> 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
              v66 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
            {
              v66 = (unint64_t)sub_10003B05C((uint64_t)&buf[16], v66);
              v68 = v67;
              v59 = *(_DWORD **)&buf[8];
              v62 = *(_DWORD **)buf;
            }
            else
            {
              v68 = 0;
            }
            v69 = (_DWORD *)(v66 + 4 * v63);
            *v69 = *(_DWORD *)(v61 + 4 * v60);
            v70 = v69 + 1;
            while (v59 != v62)
            {
              v71 = *--v59;
              *--v69 = v71;
            }
            *(_QWORD *)buf = v69;
            *(_QWORD *)&buf[8] = v70;
            *(_QWORD *)&buf[16] = v66 + 4 * v68;
            if (v62)
              operator delete(v62);
            v59 = v70;
          }
          else
          {
            *v59++ = *(_DWORD *)(*(_QWORD *)__dst + 4 * v60);
          }
          *(_QWORD *)&buf[8] = v59;
          ++v60;
        }
        while (v60 != 9);
        std::__sort<std::__less<int,int> &,int *>(*(_QWORD *)buf);
        v72 = 0;
        v73 = *(char **)buf;
        v74 = *(_QWORD *)(a1 + 9864);
        v75 = &v167;
        v76 = __src;
        v77 = *(_QWORD *)(a1 + 11160);
        v4 = v157;
        do
        {
          v78 = *(_DWORD *)&v73[v72];
          v79 = v74 + 104 * v78;
          v80 = *(_OWORD *)(v79 + 80);
          *((_OWORD *)v76 + 4) = *(_OWORD *)(v79 + 64);
          *((_OWORD *)v76 + 5) = v80;
          *((_QWORD *)v76 + 12) = *(_QWORD *)(v79 + 96);
          v81 = *(_OWORD *)(v79 + 16);
          *(_OWORD *)v76 = *(_OWORD *)v79;
          *((_OWORD *)v76 + 1) = v81;
          v82 = *(_OWORD *)(v79 + 48);
          *((_OWORD *)v76 + 2) = *(_OWORD *)(v79 + 32);
          *((_OWORD *)v76 + 3) = v82;
          v83 = v77 + 24 * v78;
          *v75 = *(_OWORD *)v83;
          *((_QWORD *)v75 + 2) = *(_QWORD *)(v83 + 16);
          v72 += 4;
          v75 = (__int128 *)((char *)v75 + 24);
          v76 += 104;
        }
        while (v72 != 36);
        *(_QWORD *)&buf[8] = v73;
        operator delete(v73);
        v84 = *(void **)__dst;
        if (!*(_QWORD *)__dst)
          goto LABEL_106;
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 9 - v16;
        memset(buf, 0, 24);
        do
        {
          if ((unint64_t)v29 >= *(_QWORD *)&buf[16])
          {
            v32 = *(_DWORD **)buf;
            v33 = ((uint64_t)v29 - *(_QWORD *)buf) >> 2;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62)
              sub_100026E7C();
            v35 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
            if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 1 > v34)
              v34 = v35 >> 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
              v36 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v36 = (unint64_t)sub_10003B05C((uint64_t)&buf[16], v36);
              v38 = v37;
              v29 = *(_DWORD **)&buf[8];
              v32 = *(_DWORD **)buf;
            }
            else
            {
              v38 = 0;
            }
            v39 = (_DWORD *)(v36 + 4 * v33);
            *v39 = v30;
            v40 = v39 + 1;
            while (v29 != v32)
            {
              v41 = *--v29;
              *--v39 = v41;
            }
            *(_QWORD *)buf = v39;
            *(_QWORD *)&buf[8] = v40;
            *(_QWORD *)&buf[16] = v36 + 4 * v38;
            if (v32)
              operator delete(v32);
            v29 = v40;
          }
          else
          {
            *v29++ = v30;
          }
          *(_QWORD *)&buf[8] = v29;
          ++v30;
        }
        while (v30 != (_DWORD)v16);
        LODWORD(__p) = 5;
        sub_100321AD4(*(unint64_t *)buf, (uint64_t)v29, (uint64_t)&__p);
        if (v31 <= (int)v16)
        {
          if ((int)v16 <= 8)
          {
            v85 = *(int **)buf;
            if (v31 <= 1)
              v86 = 1;
            else
              v86 = v31;
            v87 = __dst;
            do
            {
              v88 = *v85++;
              *(_DWORD *)v87 = v88;
              v87 += 4;
              --v86;
            }
            while (v86);
          }
          v89 = *(int **)buf;
          v90 = v16;
          v91 = 36 - 4 * (int)v16;
          do
          {
            v92 = *v89++;
            *(_DWORD *)&__dst[v91] = v92;
            v91 += 4;
            --v90;
          }
          while (v90);
        }
        else
        {
          LODWORD(v42) = 0;
          v43 = *(_QWORD *)buf;
          do
          {
            v44 = 0;
            v45 = v42;
            v42 = (int)v42;
            do
            {
              v46 = v42;
              *(_DWORD *)&__dst[4 * v42++] = *(_DWORD *)(v43 + 4 * v44++);
            }
            while (v46 <= 7 && v44 < (int)v16);
          }
          while (v45 + (int)v44 <= 8);
        }
        std::__sort<std::__less<int,int> &,int *>(__dst);
        v93 = 0;
        v94 = *(_QWORD *)(a1 + 9864);
        v95 = &v167;
        v96 = *(_QWORD *)(a1 + 11160);
        v97 = __src;
        do
        {
          v98 = *(_DWORD *)&__dst[v93];
          v99 = v94 + 104 * v98;
          v100 = *(_OWORD *)(v99 + 80);
          *((_OWORD *)v97 + 4) = *(_OWORD *)(v99 + 64);
          *((_OWORD *)v97 + 5) = v100;
          *((_QWORD *)v97 + 12) = *(_QWORD *)(v99 + 96);
          v101 = *(_OWORD *)(v99 + 16);
          *(_OWORD *)v97 = *(_OWORD *)v99;
          *((_OWORD *)v97 + 1) = v101;
          v102 = *(_OWORD *)(v99 + 48);
          *((_OWORD *)v97 + 2) = *(_OWORD *)(v99 + 32);
          *((_OWORD *)v97 + 3) = v102;
          v103 = v96 + 24 * v98;
          *v95 = *(_OWORD *)v103;
          *((_QWORD *)v95 + 2) = *(_QWORD *)(v103 + 16);
          v93 += 4;
          v95 = (__int128 *)((char *)v95 + 24);
          v97 += 104;
        }
        while (v93 != 36);
        v84 = *(void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_106;
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      }
      operator delete(v84);
    }
LABEL_106:
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003ED584();
    v104 = (void **)(a1 + 9888);
    memcpy(__dst, (const void *)(a1 + 1440), 0xEA0uLL);
    memcpy(buf, (const void *)(a1 + 10296), 0x360uLL);
    memcpy(&__dst[3744], __src, 0x3A8uLL);
    *(_OWORD *)&buf[1024] = v177;
    *(_OWORD *)&buf[1040] = v178;
    *(_OWORD *)&buf[1056] = v179;
    *(_OWORD *)&buf[960] = v173;
    *(_OWORD *)&buf[976] = v174;
    *(_OWORD *)&buf[992] = v175;
    *(_OWORD *)&buf[1008] = v176;
    *(_OWORD *)&buf[896] = v169;
    *(_OWORD *)&buf[912] = v170;
    *(_OWORD *)&buf[928] = v171;
    *(_OWORD *)&buf[944] = v172;
    *(_OWORD *)&buf[864] = v167;
    *(_QWORD *)&buf[1072] = v180;
    *(_OWORD *)&buf[880] = v168;
    memcpy((void *)(a1 + 504), __dst, 0x1248uLL);
    memcpy((void *)(a1 + 10080), buf, 0x438uLL);
    __p = 0;
    v165 = 0;
    v166 = 0;
    v161 = 0;
    v162 = 0;
    v163 = 0;
    v158 = 0;
    v159 = 0;
    v160 = 0;
    *(_QWORD *)(a1 + 10072) = *(_QWORD *)(v4 + 8);
    v105 = *(_QWORD *)(a1 + 9864);
    if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 9872) - v105) >> 3) > (unint64_t)(int)v16)
    {
      do
      {
        v106 = (__int128 *)(v105 + 104 * v19);
        v107 = v165;
        if ((unint64_t)v165 >= v166)
        {
          v114 = (char *)__p;
          v115 = 0x4EC4EC4EC4EC4EC5 * ((v165 - (_BYTE *)__p) >> 3);
          v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) > 0x276276276276276)
            sub_100026E7C();
          if (0x9D89D89D89D89D8ALL * ((uint64_t)(v166 - (_QWORD)__p) >> 3) > v116)
            v116 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v166 - (_QWORD)__p) >> 3);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v166 - (_QWORD)__p) >> 3)) >= 0x13B13B13B13B13BLL)
            v117 = 0x276276276276276;
          else
            v117 = v116;
          if (v117)
          {
            v118 = (char *)sub_100321A8C((uint64_t)&v166, v117);
            v114 = (char *)__p;
            v107 = v165;
          }
          else
          {
            v118 = 0;
          }
          v119 = &v118[104 * v115];
          v120 = *v106;
          v121 = v106[2];
          *((_OWORD *)v119 + 1) = v106[1];
          *((_OWORD *)v119 + 2) = v121;
          *(_OWORD *)v119 = v120;
          v122 = v106[3];
          v123 = v106[4];
          v124 = v106[5];
          *((_QWORD *)v119 + 12) = *((_QWORD *)v106 + 12);
          *((_OWORD *)v119 + 4) = v123;
          *((_OWORD *)v119 + 5) = v124;
          *((_OWORD *)v119 + 3) = v122;
          if (v107 == v114)
          {
            v131 = &v118[104 * v115];
          }
          else
          {
            v125 = &v118[104 * v115];
            do
            {
              v126 = *(_OWORD *)(v107 - 104);
              v127 = *(_OWORD *)(v107 - 88);
              *(_OWORD *)(v125 - 72) = *(_OWORD *)(v107 - 72);
              *(_OWORD *)(v125 - 88) = v127;
              *(_OWORD *)(v125 - 104) = v126;
              v128 = *(_OWORD *)(v107 - 56);
              v129 = *(_OWORD *)(v107 - 40);
              v130 = *(_OWORD *)(v107 - 24);
              v131 = v125 - 104;
              *((_QWORD *)v125 - 1) = *((_QWORD *)v107 - 1);
              *(_OWORD *)(v125 - 24) = v130;
              *(_OWORD *)(v125 - 40) = v129;
              *(_OWORD *)(v125 - 56) = v128;
              v107 -= 104;
              v125 -= 104;
            }
            while (v107 != v114);
          }
          v113 = v119 + 104;
          __p = v131;
          v165 = v119 + 104;
          v166 = (unint64_t)&v118[104 * v117];
          if (v114)
            operator delete(v114);
        }
        else
        {
          v108 = *v106;
          v109 = v106[2];
          *((_OWORD *)v165 + 1) = v106[1];
          *((_OWORD *)v107 + 2) = v109;
          *(_OWORD *)v107 = v108;
          v110 = v106[3];
          v111 = v106[4];
          v112 = v106[5];
          *((_QWORD *)v107 + 12) = *((_QWORD *)v106 + 12);
          *((_OWORD *)v107 + 4) = v111;
          *((_OWORD *)v107 + 5) = v112;
          *((_OWORD *)v107 + 3) = v110;
          v113 = v107 + 104;
        }
        v165 = v113;
        v132 = *v104;
        v133 = v159;
        if ((unint64_t)v159 >= v160)
        {
          v135 = v158;
          v136 = ((char *)v159 - (_BYTE *)v158) >> 3;
          v137 = v136 + 1;
          if ((unint64_t)(v136 + 1) >> 61)
            sub_100026E7C();
          v138 = v160 - (_QWORD)v158;
          if ((uint64_t)(v160 - (_QWORD)v158) >> 2 > v137)
            v137 = v138 >> 2;
          if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
            v139 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v139 = v137;
          if (v139)
          {
            v140 = (char *)sub_10005538C((uint64_t)&v160, v139);
            v135 = v158;
            v133 = v159;
          }
          else
          {
            v140 = 0;
          }
          v141 = &v140[8 * v136];
          *(_QWORD *)v141 = v132[v19];
          v134 = v141 + 8;
          while (v133 != v135)
          {
            v142 = *--v133;
            *((_QWORD *)v141 - 1) = v142;
            v141 -= 8;
          }
          v158 = v141;
          v159 = v134;
          v160 = (unint64_t)&v140[8 * v139];
          if (v135)
            operator delete(v135);
        }
        else
        {
          *v159 = v132[v19];
          v134 = v133 + 1;
        }
        v159 = v134;
        v143 = *(_QWORD *)(a1 + 11160) + 24 * v19;
        v144 = v162;
        if ((unint64_t)v162 >= v163)
        {
          v147 = 0xAAAAAAAAAAAAAAABLL * (((char *)v162 - (_BYTE *)v161) >> 3);
          v148 = v147 + 1;
          if (v147 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100026E7C();
          if (0x5555555555555556 * ((uint64_t)(v163 - (_QWORD)v161) >> 3) > v148)
            v148 = 0x5555555555555556 * ((uint64_t)(v163 - (_QWORD)v161) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163 - (_QWORD)v161) >> 3) >= 0x555555555555555)
            v149 = 0xAAAAAAAAAAAAAAALL;
          else
            v149 = v148;
          if (v149)
            v150 = (char *)sub_100026E90((uint64_t)&v163, v149);
          else
            v150 = 0;
          v151 = &v150[24 * v147];
          v152 = *(_OWORD *)v143;
          *((_QWORD *)v151 + 2) = *(_QWORD *)(v143 + 16);
          *(_OWORD *)v151 = v152;
          v154 = v161;
          v153 = v162;
          v155 = v151;
          if (v162 != v161)
          {
            do
            {
              v156 = *(_OWORD *)(v153 - 3);
              *((_QWORD *)v155 - 1) = *(v153 - 1);
              *(_OWORD *)(v155 - 24) = v156;
              v155 -= 24;
              v153 -= 3;
            }
            while (v153 != v154);
            v153 = v161;
          }
          v146 = v151 + 24;
          v161 = v155;
          v162 = v151 + 24;
          v163 = (unint64_t)&v150[24 * v149];
          if (v153)
            operator delete(v153);
        }
        else
        {
          v145 = *(_OWORD *)v143;
          v162[2] = *(_QWORD *)(v143 + 16);
          *v144 = v145;
          v146 = (_QWORD *)v144 + 3;
        }
        v162 = v146;
        ++v19;
        v105 = *(_QWORD *)(a1 + 9864);
      }
      while (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 9872) - v105) >> 3) > v19);
    }
    if ((void **)(a1 + 9864) != &__p)
      sub_100321E1C((char *)(a1 + 9864), (char *)__p, (uint64_t)v165, 0x4EC4EC4EC4EC4EC5 * ((v165 - (_BYTE *)__p) >> 3));
    if (v104 != &v158)
      sub_100144F58((char *)(a1 + 9888), (char *)v158, (uint64_t)v159, ((char *)v159 - (_BYTE *)v158) >> 3);
    if ((void **)(a1 + 11160) != &v161)
      sub_100321FC8((char *)(a1 + 11160), (char *)v161, (uint64_t)v162, 0xAAAAAAAAAAAAAAABLL * (((char *)v162 - (_BYTE *)v161) >> 3));
    if (v158)
    {
      v159 = v158;
      operator delete(v158);
    }
    if (v161)
    {
      v162 = v161;
      operator delete(v161);
    }
    if (__p)
    {
      v165 = (char *)__p;
      operator delete(__p);
    }
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003ED4D8();
}

void sub_100320F20(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)STACK[0x4E0];
  if (STACK[0x4E0])
  {
    STACK[0x4E8] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x920];
  if (STACK[0x920])
  {
    STACK[0x928] = (unint64_t)v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

double sub_100320FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  double v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t v14[16];
  double v15;

  v3 = 0;
  v4 = a1 + 424;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = *(double *)(a2 + 8 * v3);
    if (*(_BYTE *)(v4 + 40 * v3))
    {
      v8 = v4 + 40 * v3;
      v10 = *(unsigned __int8 *)(v8 + 1);
      v9 = (_BYTE *)(v8 + 1);
      if (v10)
      {
        v11 = v4 + 40 * v3;
        v7 = (1.0 - *(double *)(v11 + 24)) * *(double *)(v11 + 32) + *(double *)(v11 + 24) * v7;
      }
      else
      {
        *v9 = 1;
        v11 = v4 + 40 * v3;
      }
      *(double *)(v11 + 32) = v7;
    }
    else
    {
      v12 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v14 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#spatialGesturesPredictor Something wrong with filtering, using unfiltered signal", v14, 2u);
        v7 = *(double *)(a2 + 8 * v3);
      }
    }
    v5 = 0;
    *(&v15 + v3) = v7;
    v3 = 1;
  }
  while ((v6 & 1) != 0);
  return v15;
}

void sub_1003210DC()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Gesture changed", v1, 2u);
  }
}

double sub_100321140(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  double v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  _BOOL4 v15;
  const char *v16;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _BYTE __dst[4688];
  _BYTE v22[4680];
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  _BYTE v36[1088];
  uint64_t v37;
  char v38;
  uint8_t buf[4];
  double v40;

  v1 = (_BYTE *)(a1 + 11208);
  *(_BYTE *)(a1 + 11208) = 0;
  v2 = *(_BYTE **)(a1 + 8);
  if (v2[64])
  {
    memcpy(__dst, (const void *)(a1 + 504), 0x1248uLL);
    __dst[4680] = 1;
    memcpy(v22, (const void *)(a1 + 5184), sizeof(v22));
    v4 = *(_OWORD *)(a1 + 9912);
    v25 = *(_OWORD *)(a1 + 9928);
    v5 = *(_OWORD *)(a1 + 9960);
    v26 = *(_OWORD *)(a1 + 9944);
    v23 = 1;
    v27 = v5;
    v28 = *(_OWORD *)(a1 + 9976);
    v24 = v4;
    v29 = 1;
    v6 = *(_OWORD *)(a1 + 10040);
    v32 = *(_OWORD *)(a1 + 10024);
    v33 = v6;
    v34 = *(_OWORD *)(a1 + 10056);
    v7 = *(_OWORD *)(a1 + 10008);
    v30 = *(_OWORD *)(a1 + 9992);
    v31 = v7;
    v35 = 1;
    memcpy(v36, (const void *)(a1 + 10080), 0x438uLL);
    v36[1080] = 1;
    v37 = *(_QWORD *)(a1 + 10072);
    v38 = 1;
    v18 = 0;
    v19 = 0.0;
    v20 = 0;
    (*(void (**)(uint64_t *__return_ptr, _BYTE *, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(&v18, v2, __dst, a1 + 24, *(unsigned int *)(a1 + 11212));
    if (!v23)
      sub_1003ED654();
    memcpy((void *)(a1 + 5184), v22, 0x1248uLL);
    if (!v35)
      sub_1003ED67C();
    v8 = v33;
    *(_OWORD *)(a1 + 10024) = v32;
    *(_OWORD *)(a1 + 10040) = v8;
    *(_OWORD *)(a1 + 10056) = v34;
    v9 = v31;
    *(_OWORD *)(a1 + 9992) = v30;
    *(_OWORD *)(a1 + 10008) = v9;
    if (!(_BYTE)v20)
    {
      v11 = v19;
      v13 = sub_10031F45C(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 11212));
      v14 = qword_10085F520;
      v15 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
      if (v11 <= v13)
      {
        if (!v15)
          return v11;
        *(_DWORD *)buf = 134217984;
        v40 = v11;
        v16 = "#spatialGesturesPredictor Gesture = Other, HandoffConfidence = %f";
      }
      else
      {
        if (!v15)
          return v11;
        *(_DWORD *)buf = 134217984;
        v40 = v11;
        v16 = "#spatialGesturesPredictor Gesture = Handoff, HandoffConfidence = %f";
      }
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
      return v11;
    }
    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #evaluation false positive alert", buf, 2u);
    }
    *v1 = 1;
    return 0.0;
  }
  else
  {
    v12 = qword_10085F520;
    v11 = 1.0;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003ED5D8(v12);
  }
  return v11;
}

uint64_t sub_100321444(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 11208);
}

void sub_100321450(uint64_t a1)
{
  *(_QWORD *)a1 = off_100815EF8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  operator new();
}

void sub_100321538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10001AE68((uint64_t)&a9);
  operator delete();
}

uint64_t sub_100321588(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100321598(uint64_t a1, uint64_t a2)
{
  *(double *)(a1 + 16) = *(float *)(a2 + 16);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

void sub_1003215B4(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  _BYTE v7[8];
  void *__p;
  char v9;
  char v10;
  char v11;
  _BYTE v12[8];
  void *v13;
  char v14;
  char v15;
  char v16;

  v6 = *(_QWORD *)(a1 + 8);
  sub_1003217E0(v12, a2);
  sub_1003217E0(v7, a3);
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, double))(*(_QWORD *)v6 + 32))(v6, v12, v7, a4);
  if (v11 && v10 && v9 < 0)
    operator delete(__p);
  if (v16 && v15 && v14 < 0)
    operator delete(v13);
}

void sub_100321658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  if ((_BYTE)a21 && a19 && a15 < 0)
    operator delete(__p);
  if ((_BYTE)a36 && a34 && a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003216AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

void sub_1003216C0(uint64_t a1)
{
  sub_10032187C(a1);
  operator delete();
}

_QWORD *sub_1003216E4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_100815EF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_100321724(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_100815EF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete();
}

uint64_t sub_100321774()
{
  return 0;
}

void sub_10032177C()
{
  operator delete();
}

uint64_t sub_100321790()
{
  return 13;
}

uint64_t sub_100321798()
{
  return 5;
}

uint64_t sub_1003217A0()
{
  return 585;
}

uint64_t sub_1003217A8()
{
  return 10;
}

double sub_1003217B0()
{
  return 0.05625;
}

double sub_1003217BC()
{
  return 0.05625;
}

double sub_1003217C8()
{
  return 0.05625;
}

double sub_1003217D4()
{
  return 0.05625;
}

_BYTE *sub_1003217E0(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[64] = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    sub_1002F109C(a1 + 8, (__int128 *)(a2 + 8));
    a1[64] = 1;
  }
  return a1;
}

void sub_100321828(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10032183C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10032183C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64) && *(_BYTE *)(a1 + 56) && *(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10032187C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_100815EB0;
  if (*(char *)(a1 + 11207) < 0)
    operator delete(*(void **)(a1 + 11184));
  v2 = *(void **)(a1 + 11160);
  if (v2)
  {
    *(_QWORD *)(a1 + 11168) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 9888);
  if (v3)
  {
    *(_QWORD *)(a1 + 9896) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 9864);
  if (v4)
  {
    *(_QWORD *)(a1 + 9872) = v4;
    operator delete(v4);
  }
  sub_10001AE68(a1 + 8);
  return a1;
}

void sub_1003218F8()
{
  operator delete();
}

double sub_10032190C()
{
  return 0.40968198;
}

double sub_100321918@<D0>(_OWORD *a1@<X8>)
{
  double result;

  a1[10] = xmmword_100479198;
  a1[11] = unk_1004791A8;
  a1[12] = xmmword_1004791B8;
  a1[6] = xmmword_100479158;
  a1[7] = unk_100479168;
  a1[8] = xmmword_100479178;
  a1[9] = unk_100479188;
  a1[2] = xmmword_100479118;
  a1[3] = unk_100479128;
  a1[4] = xmmword_100479138;
  a1[5] = unk_100479148;
  result = dbl_100479108[0];
  *a1 = xmmword_1004790F8;
  a1[1] = *(_OWORD *)dbl_100479108;
  return result;
}

double sub_10032195C()
{
  return 0.335718321;
}

double sub_100321980()
{
  return -0.116659178;
}

_QWORD *sub_1003219A4(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10003B108(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1003219FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100321A18(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100137650(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_100321A70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100321A8C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    sub_1000260B0();
  return operator new(104 * a2);
}

uint64_t sub_100321AD4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  __int128 v12;

  if ((uint64_t)(a2 - a1) >= 5)
  {
    v4 = (int *)a1;
    v12 = xmmword_1004791D0;
    v5 = a2 - 4;
    if (a2 - 4 > a1)
    {
      v7 = ((a2 - a1) >> 2) - 1;
      do
      {
        v11[0] = 0;
        v11[1] = v7;
        v8 = sub_100321B78((uint64_t)&v12, a3, v11);
        if (v8)
        {
          v9 = *v4;
          *v4 = v4[v8];
          v4[v8] = v9;
        }
        ++v4;
        --v7;
      }
      while ((unint64_t)v4 < v5);
    }
  }
  return a2;
}

uint64_t sub_100321B78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      sub_100321C00((uint64_t)v10, a2, 0x40uLL);
      return sub_100321CF4((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      sub_100321C00((uint64_t)v10, a2, v8 - v7);
      do
        v9 = sub_100321CF4((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t sub_100321C00(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3 % 0x1E)
    v3 = a3 / 0x1E + 1;
  else
    v3 = a3 / 0x1E;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      v6 = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E)
    v6 = 0;
  else
    v6 = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
LABEL_13:
  *(_QWORD *)(result + 48) = v6;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  if (v4 >= 0x1F)
    v8 = -1;
  else
    v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t sub_100321CF4(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    result = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        v7 = v6 / 0xADC8;
        v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (v9)
          v11 = 0;
        else
          v11 = 0x7FFFFFFF;
        v6 = v11 + v10;
        v12 = v6 - 1;
      }
      while (*(_QWORD *)(a1 + 40) <= v12);
      v13 = result << v5;
      if (v5 >= 0x40)
        v13 = 0;
      result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    result = 0;
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (v2 < v14)
  {
    v15 = *(unsigned int **)a1;
    v16 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(a1 + 60);
    v19 = *v15;
    while (1)
    {
      v20 = v19 / 0xADC8;
      v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      v9 = v21 >= v20;
      v22 = v21 - v20;
      if (v9)
        v23 = 0;
      else
        v23 = 0x7FFFFFFF;
      v19 = v23 + v22;
      v24 = v19 - 1;
      if (v16 > v24)
      {
        v25 = result << (v17 + 1);
        if (v17 >= 0x3F)
          v25 = 0;
        result = v25 + (v18 & v24);
        if (++v2 == v14)
          break;
      }
    }
    *v15 = v19;
  }
  return result;
}

char *sub_100321E1C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x276276276276276)
      sub_100026E7C();
    v10 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x13B13B13B13B13BLL)
      v12 = 0x276276276276276;
    else
      v12 = v11;
    result = sub_100321F74(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x4EC4EC4EC4EC4EC5 * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *sub_100321F74(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    sub_100026E7C();
  result = (char *)sub_100321A8C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

char *sub_100321FC8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100026E7C();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = sub_100026E2C(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void sub_100322100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  double v25[9];
  char v26;

  if (*(_BYTE *)(a2 + 192))
  {
    v4 = a2 + 8;
    v5 = (__int128 *)(a1 + 56);
    if (*(_BYTE *)(a1 + 240))
    {
      if (*(double *)(a1 + 64) == *(double *)(a2 + 16))
        return;
      v6 = *(_OWORD *)v4;
      v7 = *(_OWORD *)(v4 + 16);
      v8 = *(_OWORD *)(v4 + 48);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(v4 + 32);
      *(_OWORD *)(a1 + 104) = v8;
      *v5 = v6;
      *(_OWORD *)(a1 + 72) = v7;
      v9 = *(_OWORD *)(v4 + 64);
      v10 = *(_OWORD *)(v4 + 80);
      v11 = *(_OWORD *)(v4 + 112);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(v4 + 96);
      *(_OWORD *)(a1 + 168) = v11;
      *(_OWORD *)(a1 + 120) = v9;
      *(_OWORD *)(a1 + 136) = v10;
      v12 = *(_OWORD *)(v4 + 128);
      v13 = *(_OWORD *)(v4 + 144);
      v14 = *(_OWORD *)(v4 + 160);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(v4 + 176);
      *(_OWORD *)(a1 + 200) = v13;
      *(_OWORD *)(a1 + 216) = v14;
      *(_OWORD *)(a1 + 184) = v12;
    }
    else
    {
      v15 = *(_OWORD *)v4;
      v16 = *(_OWORD *)(v4 + 16);
      v17 = *(_OWORD *)(v4 + 48);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(v4 + 32);
      *(_OWORD *)(a1 + 104) = v17;
      *v5 = v15;
      *(_OWORD *)(a1 + 72) = v16;
      v18 = *(_OWORD *)(v4 + 64);
      v19 = *(_OWORD *)(v4 + 80);
      v20 = *(_OWORD *)(v4 + 112);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(v4 + 96);
      *(_OWORD *)(a1 + 168) = v20;
      *(_OWORD *)(a1 + 120) = v18;
      *(_OWORD *)(a1 + 136) = v19;
      v21 = *(_OWORD *)(v4 + 128);
      v22 = *(_OWORD *)(v4 + 144);
      v23 = *(_OWORD *)(v4 + 160);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(v4 + 176);
      *(_OWORD *)(a1 + 200) = v22;
      *(_OWORD *)(a1 + 216) = v23;
      *(_OWORD *)(a1 + 184) = v21;
      *(_BYTE *)(a1 + 240) = 1;
    }
    if (!*(_BYTE *)(a2 + 192))
      sub_10000BA44();
    sub_100326168(a1 + 248, (__int128 *)v4, v25);
    if (v26)
    {
      v24 = *(_QWORD *)(a1 + 48);
      if (!v24
        || v25[0]
         - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * ((v24 + *(_QWORD *)(a1 + 40) - 1) / 0x38uLL))
                     + 72 * ((v24 + *(_QWORD *)(a1 + 40) - 1) % 0x38uLL)) >= 0.25)
      {
        sub_100322254((_QWORD *)(a1 + 8), (uint64_t)v25);
      }
    }
  }
}

uint64_t sub_100322254(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 56 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100322A40(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x38)) + 72 * (v7 % 0x38);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  v12 = a1[4];
  v13 = a1[5] + 1;
  a1[5] = v13;
  v14 = v12 + v13;
  v15 = a1[1];
  v16 = (_QWORD *)(v15 + 8 * (v14 / 0x38));
  v17 = *v16 + 72 * (v14 % 0x38);
  if (a1[2] == v15)
    v17 = 0;
  if (v17 == *v16)
    v17 = *(v16 - 1) + 4032;
  return v17 - 72;
}

void sub_100322354(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  double v4[9];
  char v5;
  char v6;

  v6 = 0;
  sub_100325288((uint64_t)(a1 + 31), a2, &v6, (uint64_t)v4);
  if (v6)
  {
    sub_100322410((uint64_t)a1);
  }
  else if (v5)
  {
    v3 = a1[6];
    if (!v3
      || v4[0] - *(double *)(*(_QWORD *)(a1[2] + 8 * ((v3 + a1[5] - 1) / 0x38uLL)) + 72 * ((v3 + a1[5] - 1) % 0x38uLL)) >= 0.25)
    {
      sub_100322254(a1 + 1, (uint64_t)v4);
    }
  }
}

void sub_100322410(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void ***)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 48) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 24);
      v2 = (void **)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 28;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 56;
  }
  *(_QWORD *)(a1 + 40) = v6;
LABEL_8:
  if (*(_BYTE *)(a1 + 240))
    *(_BYTE *)(a1 + 240) = 0;
}

uint64_t sub_100322490(uint64_t a1, double *a2, uint64_t a3, int a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t i;
  double v26;
  double v27;
  uint64_t v29;
  double v30;
  float64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double *v35;
  double *v36;
  double *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  double *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double *v48;
  unint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  char v54;
  int v56;
  _QWORD *v57;
  float64x2_t v58;
  void *__p;
  double *v60;
  double *v61;

  if (!*(_BYTE *)(a3 + 208))
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 < 5
    || *a2
     - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * ((v5 + *(_QWORD *)(a1 + 40) - 1) / 0x38))
                 + 72 * ((v5 + *(_QWORD *)(a1 + 40) - 1) % 0x38)) > 5.0)
  {
    return 2 * (*(_BYTE *)a1 == 0);
  }
  __p = 0;
  v60 = 0;
  v61 = 0;
  if ((sub_100322940(a1, a3, (uint64_t)a2, &v58) & 1) != 0)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = (_QWORD *)(v9 + 8 * (v8 / 0x38));
    v56 = a4;
    if (v10 == v9)
      v12 = 0;
    else
      v12 = *v11 + 72 * (v8 % 0x38);
LABEL_11:
    v57 = v11;
    while (1)
    {
      if (v10 == v9)
      {
        v14 = 0;
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40);
        v14 = *(_QWORD *)(v9 + 8 * (v13 / 0x38)) + 72 * (v13 % 0x38);
      }
      if (v12 == v14)
        break;
      v15 = v12 - *v11;
      v16 = 0x8E38E38E38E38E39 * (v15 >> 3);
      if (v15 < -71)
      {
        v22 = 54 - v16;
        v23 = (54 - v16) / 0x38;
        v19 = &v11[-v23];
        v20 = *v19;
        v21 = *v19 + 72 * (56 * v23 - v22) + 3960;
      }
      else
      {
        v17 = v16 + 1;
        v18 = (v16 + 1) / 0x38;
        v19 = &v11[v18];
        v20 = *v19;
        v21 = *v19 + 72 * (v17 - 56 * v18);
      }
      while (1)
      {
        if (v10 == v9)
        {
          v47 = 0;
        }
        else
        {
          v46 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40);
          v47 = *(_QWORD *)(v9 + 8 * (v46 / 0x38)) + 72 * (v46 % 0x38);
        }
        if (v21 == v47)
          break;
        v24 = 0.0;
        for (i = 16; i != 40; i += 8)
        {
          v26 = *(double *)(v12 + i) - *(double *)(v21 + i);
          v24 = v24 + v26 * v26;
        }
        v27 = sqrt(v24);
        if (v27 > 2.0 && v27 < 15.0)
        {
          v29 = 0;
          v30 = 0.0;
          do
          {
            v31 = v58.f64[v29] - *(double *)(v21 + 16 + v29 * 8);
            v30 = v30 + v31 * v31;
            ++v29;
          }
          while (v29 != 3);
          v32 = 0;
          v33 = 0.0;
          do
          {
            v33 = v33
                + (v58.f64[v32] - *(double *)(v12 + v32 * 8 + 16)) * (v58.f64[v32] - *(double *)(v12 + v32 * 8 + 16));
            ++v32;
          }
          while (v32 != 3);
          v34 = fabs(sqrt(v30) - sqrt(v33) + *(double *)(v12 + 8) - *(double *)(v21 + 8));
          v35 = v60;
          if (v60 >= v61)
          {
            v37 = (double *)__p;
            v38 = ((char *)v60 - (_BYTE *)__p) >> 3;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61)
              sub_100026E7C();
            v40 = (char *)v61 - (_BYTE *)__p;
            if (((char *)v61 - (_BYTE *)__p) >> 2 > v39)
              v39 = v40 >> 2;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
              v41 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
            {
              v42 = (char *)sub_10005538C((uint64_t)&v61, v41);
              v37 = (double *)__p;
              v35 = v60;
            }
            else
            {
              v42 = 0;
            }
            v43 = (double *)&v42[8 * v38];
            *v43 = v34;
            v36 = v43 + 1;
            while (v35 != v37)
            {
              v44 = *((_QWORD *)v35-- - 1);
              *((_QWORD *)v43-- - 1) = v44;
            }
            __p = v43;
            v60 = v36;
            v61 = (double *)&v42[8 * v41];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *v60 = v34;
            v36 = v35 + 1;
          }
          v60 = v36;
          v20 = *v19;
        }
        v21 += 72;
        if (v21 - v20 == 4032)
        {
          v45 = v19[1];
          ++v19;
          v20 = v45;
          v21 = v45;
        }
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_QWORD *)(a1 + 24);
      }
      v12 += 72;
      v11 = v57;
      if (v12 - *v57 == 4032)
      {
        v11 = v57 + 1;
        v12 = v57[1];
        goto LABEL_11;
      }
    }
    v48 = (double *)__p;
    if ((unint64_t)((char *)v60 - (_BYTE *)__p) >= 0x28)
    {
      v49 = ((char *)v60 - (_BYTE *)__p) >> 3;
      *(_BYTE *)(a1 + 1) = 1;
      if (v49 <= 1)
        v50 = 1;
      else
        v50 = v49;
      v51 = 0.0;
      do
      {
        v52 = *v48++;
        v51 = v51 + v52 * v52;
        --v50;
      }
      while (v50);
      v53 = v51 / (double)v49;
      if (v53 < 3.0)
        v54 = v56;
      else
        v54 = 0;
      if (v53 < 0.5 || (v54 & 1) != 0)
      {
        *(_BYTE *)a1 = 0;
        v6 = 1;
      }
      else
      {
        if (v56)
          sub_100322410(a1);
        v6 = 0;
        *(_BYTE *)a1 = 1;
      }
    }
    else
    {
      v6 = 2 * (*(_BYTE *)a1 == 0);
    }
  }
  else
  {
    v6 = 2;
  }
  if (__p)
  {
    v60 = (double *)__p;
    operator delete(__p);
  }
  return v6;
}

void sub_10032291C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100322940(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4)
{
  float v4;
  BOOL v5;
  double v9;
  __double2 v10;
  float v11;
  float v12;
  simd_float2x2 v13;
  float32x2_t v14;
  __int128 v15;
  float v16;
  float v18;
  float v19;
  simd_float2x2 v20;

  if (*(_DWORD *)(a3 + 80) != 2)
    return 0;
  v4 = *(float *)(a2 + 24);
  v5 = !*(_BYTE *)(a2 + 208) || *(_BYTE *)(a2 + 192) == 0;
  if (v5 || v4 == 1.1755e-38)
    return 0;
  v9 = v4;
  v10 = __sincos_stret(*(double *)(a2 + 200) * 3.14159265 / 180.0);
  v11 = v10.__cosval * v9;
  v12 = v10.__sinval * v9;
  v18 = v11;
  v19 = v12;
  v20.columns[0] = (simd_float2)sub_10030D5BC((float32x4_t *)a3);
  v13 = __invert_f2(v20);
  v14 = vmla_n_f32(vmul_n_f32((float32x2_t)v13.columns[0], v18), (float32x2_t)v13.columns[1], v19);
  v15 = *(_OWORD *)(a3 + 64);
  v16 = COERCE_FLOAT(*(_QWORD *)(a3 + 72));
  *(float *)&v15 = *(float *)&v15 + v14.f32[1];
  *a4 = vcvtq_f64_f32(*(float32x2_t *)&v15);
  a4[1].f64[0] = (float)(v16 + v14.f32[0]);
  return 1;
}

uint64_t sub_100322A28(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t sub_100322A30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_100322A38(uint64_t result, char a2)
{
  *(_BYTE *)(result + 2) = a2;
  return result;
}

void sub_100322A40(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x38;
  v4 = v2 - 56;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100322D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100322D54()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10085DE20 = 0;
  qword_10085DE28 = 0;
  qword_10085DE30 = 0;
  v0 = operator new(0x40uLL);
  qword_10085DE28 = (uint64_t)(v0 + 4);
  qword_10085DE30 = (uint64_t)(v0 + 4);
  *v0 = xmmword_1004791E0;
  v0[1] = unk_1004791F0;
  v0[2] = xmmword_100479200;
  v0[3] = unk_100479210;
  qword_10085DE20 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085DE20, (void *)&_mh_execute_header);
  qword_10085DE40 = 0;
  unk_10085DE48 = 0;
  qword_10085DE38 = 0;
  v1 = operator new(0x10uLL);
  qword_10085DE40 = (uint64_t)(v1 + 1);
  unk_10085DE48 = v1 + 1;
  *v1 = xmmword_100479220;
  qword_10085DE38 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085DE38, (void *)&_mh_execute_header);
}

uint64_t sub_100322E10(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  sub_1000537E4((uint64_t)v10);
  *(_QWORD *)((char *)&v10[2] + *(_QWORD *)(v10[0] - 24)) = 2;
  v2 = sub_100054C60(&v11, (uint64_t)"<", 1);
  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = *(_QWORD *)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = sub_100054C60(v2, v4, v5);
  sub_100054C60(v6, (uint64_t)" | ", 3);
  v7 = (_QWORD *)std::ostream::operator<<(*(float *)(a1 + 24));
  sub_100054C60(v7, (uint64_t)">", 1);
  std::stringbuf::str(v12);
  *(_QWORD *)((char *)v10
  v11 = v8;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf(v12);
  return std::ios::~ios(&v14);
}

void sub_100322F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100053910((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100322F3C(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_100816038;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  operator new();
}

void sub_100323010()
{
  operator delete();
}

uint64_t sub_100323088(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 48))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_100323098(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 8))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_1003230A8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), a2);
}

uint64_t sub_1003230E8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a2);
}

uint64_t sub_100323128(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48), a2);
}

uint64_t sub_100323168(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 272))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_100323178(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_100323188(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 208))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_100323198(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 224))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_1003231A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 240))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_1003231B8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 256))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_1003231C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_1003231D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 296))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_1003231E8()
{
  return 1;
}

uint64_t sub_1003231F0()
{
  return 1;
}

uint64_t sub_1003231F8()
{
  return 1;
}

uint64_t sub_100323200()
{
  return 1;
}

uint64_t sub_100323208()
{
  return 1;
}

uint64_t sub_100323210()
{
  return 1;
}

uint64_t sub_100323218()
{
  return 0;
}

uint64_t sub_100323220()
{
  return 0;
}

uint64_t sub_100323228()
{
  return 1;
}

uint64_t sub_100323230()
{
  return 1;
}

uint64_t sub_100323238()
{
  return 1;
}

uint64_t sub_100323240()
{
  return 1;
}

uint64_t sub_100323248()
{
  return 1;
}

uint64_t sub_100323250()
{
  return 1;
}

uint64_t sub_100323258()
{
  return 1;
}

uint64_t sub_100323260()
{
  return 1;
}

void sub_10032326C(_QWORD *a1)
{
  sub_100323290(a1);
  operator delete();
}

_QWORD *sub_100323290(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_100816038;
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 368))(v2);
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 368))(v3);
  return a1;
}

uint64_t sub_1003232EC()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10085DE50 = 0;
  qword_10085DE58 = 0;
  qword_10085DE60 = 0;
  v0 = operator new(0x40uLL);
  qword_10085DE58 = (uint64_t)(v0 + 4);
  qword_10085DE60 = (uint64_t)(v0 + 4);
  *v0 = xmmword_100479230;
  v0[1] = unk_100479240;
  v0[2] = xmmword_100479250;
  v0[3] = unk_100479260;
  qword_10085DE50 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085DE50, (void *)&_mh_execute_header);
  qword_10085DE70 = 0;
  unk_10085DE78 = 0;
  qword_10085DE68 = 0;
  v1 = operator new(0x10uLL);
  qword_10085DE70 = (uint64_t)(v1 + 1);
  unk_10085DE78 = v1 + 1;
  *v1 = xmmword_100479270;
  qword_10085DE68 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085DE68, (void *)&_mh_execute_header);
}

uint64_t sub_1003233A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  long double v5;
  long double v6;
  unsigned int v7;
  NSObject *v8;
  uint8_t v10[16];

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1004792C0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = off_1008156E8;
  v2 = a1 + 40;
  *(_QWORD *)(a1 + 64) = 0x100000003;
  *(_OWORD *)(a1 + 48) = xmmword_100478880;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 104) = off_1008156E8;
  v3 = a1 + 104;
  *(_QWORD *)(a1 + 128) = 0x100000003;
  *(_OWORD *)(a1 + 112) = xmmword_100478880;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 168) = off_1008156E8;
  v4 = a1 + 168;
  *(_QWORD *)(a1 + 192) = 0x100000003;
  *(_OWORD *)(a1 + 176) = xmmword_100478880;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 232) = xmmword_1004792D0;
  *(_QWORD *)(a1 + 248) = 0xBFFBB67AE8584CAALL;
  v5 = erf(1.73205081);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(long double *)(a1 + 296) = v5;
  v6 = erf(-1.73205081);
  v7 = 0;
  *(_OWORD *)(a1 + 312) = xmmword_100479340;
  *(_OWORD *)(a1 + 328) = unk_100479350;
  *(long double *)(a1 + 304) = v6;
  *(_QWORD *)(a1 + 344) = 0x3FC5555555555555;
  *(_OWORD *)(a1 + 352) = xmmword_100479368;
  *(_OWORD *)(a1 + 368) = unk_100479378;
  *(_QWORD *)(a1 + 384) = 0x3FC5555555555555;
  do
  {
    *(_QWORD *)sub_10030E194(v3, v7) = 0;
    *(_QWORD *)sub_10030E194(v4, v7) = 0;
    *(_QWORD *)sub_10030E194(v2, v7++) = 0;
  }
  while (v7 != 3);
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,SyntheticApertureRangeFilter constructed", v10, 2u);
  }
  return a1;
}

void sub_10032355C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

void sub_100323578(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t (**v28)();
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t (**v38)();
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _BYTE v43[24];
  uint64_t v44;
  _QWORD v45[4];
  uint8_t buf[4];
  double v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;

  v6 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(double *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 96);
    v11 = *(_QWORD *)(a2 + 104);
    v12 = *(_QWORD *)(a2 + 112);
    *(_DWORD *)buf = 134219264;
    v47 = v7;
    v48 = 2048;
    v49 = v8;
    v50 = 2048;
    v51 = v9;
    v52 = 2048;
    v53 = v10;
    v54 = 2048;
    v55 = v11;
    v56 = 2048;
    v57 = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Measurement added with VIO: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, position [%3.2f, %3.2f, %3.2f] m", buf, 0x3Eu);
  }
  v40 = 0x100000003;
  v38 = off_1008156E8;
  v39 = xmmword_100478880;
  v41 = &v42;
  sub_10030DD0C(&v38, 3, 1);
  sub_10030DD58((uint64_t)&v38, 0.0);
  v35 = 0x100000004;
  v33 = off_100815778;
  v34 = xmmword_100478890;
  v36 = &v37;
  sub_10030DD0C(&v33, 4, 1);
  sub_10030DD58((uint64_t)&v33, 0.0);
  for (i = 0; i != 3; ++i)
  {
    v14 = a2 + 8 * i;
    v15 = *(_QWORD *)(v14 + 96);
    *(_QWORD *)sub_10030E194((uint64_t)&v38, i) = v15;
    v16 = *(_QWORD *)(v14 + 120);
    *(_QWORD *)sub_10030E194((uint64_t)&v33, i) = v16;
  }
  v17 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)sub_10030E194((uint64_t)&v33, 3u) = v17;
  sub_100359F98((uint64_t)&v33, (uint64_t)buf);
  v44 = 0x100000003;
  *(_QWORD *)v43 = off_1008156E8;
  *(_OWORD *)&v43[8] = xmmword_100478880;
  v45[0] = &v45[1];
  sub_10030E3B0((uint64_t)buf, a1 + 104, (uint64_t)v43);
  v30 = 0x100000003;
  v28 = off_1008156E8;
  v29 = xmmword_100478880;
  v31 = &v32;
  sub_10030F0E0((uint64_t)&v38, (uint64_t)v43, (uint64_t)&v28);
  if (*(_BYTE *)a1)
  {
    v18 = *(_DWORD *)(a1 + 8);
    if (v18 == 1)
    {
      sub_100323A7C(a1, (uint64_t)&v28);
    }
    else if (!v18)
    {
      v19 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Range filter transitioning from non-VIO to VIO mode", v43, 2u);
      }
      sub_100323980(a1, *(double *)a2);
      sub_10030EC4C(a1 + 40, (uint64_t)&v28);
    }
    sub_100323D14(a1, 0, *(double *)(a2 + 8), *(double *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
    sub_10030EC4C(a1 + 40, (uint64_t)&v28);
    *(_BYTE *)a1 = 1;
    v20 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(a1 + 16);
      v22 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v43 = 134218240;
      *(_QWORD *)&v43[4] = v21;
      *(_WORD *)&v43[12] = 2048;
      *(_QWORD *)&v43[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Initializing range filter with VIO: range %f m, uncertainty %f m", v43, 0x16u);
    }
  }
  v23 = *(double *)a2;
  *(_DWORD *)(a1 + 8) = 1;
  *(double *)(a1 + 32) = v23;
  v24 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v43 = 134218754;
    *(double *)&v43[4] = v23;
    *(_WORD *)&v43[12] = 2048;
    *(_QWORD *)&v43[14] = v25;
    *(_WORD *)&v43[22] = 2048;
    v44 = v26;
    LOWORD(v45[0]) = 2080;
    *(_QWORD *)((char *)v45 + 2) = "YES";
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Filter state after meas with VIO: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, with VIO: %s", v43, 0x2Au);
  }
  v27 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 16) = v27;
  *(double *)(a3 + 8) = fmax(*(double *)(a3 + 8), 0.0);
}

void sub_100323980(uint64_t a1, double a2)
{
  double v3;
  double v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  int v8;
  double v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  double v13;
  __int16 v14;
  const char *v15;

  v3 = *(double *)(a1 + 32);
  v4 = *(double *)(a1 + 24) + (a2 - v3) * 0.25;
  *(double *)(a1 + 24) = v4;
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 8) == 1)
      v7 = "YES";
    else
      v7 = "NO";
    v8 = 134218754;
    v9 = v3;
    v10 = 2048;
    v11 = v6;
    v12 = 2048;
    v13 = v4;
    v14 = 2080;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Filter state after propagation with time: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, with VIO: %s", (uint8_t *)&v8, 0x2Au);
  }
}

void sub_100323A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (**v24)();
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (**v29)();
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _BYTE buf[24];
  uint64_t v35;
  _QWORD v36[309];

  v4 = a1 + 40;
  v21 = 0x100000003;
  v19 = off_1008156E8;
  v20 = xmmword_100478880;
  v22 = &v23;
  sub_10030E2B4(a2, a1 + 40, (uint64_t)&v19);
  v31 = 0x100000003;
  v29 = off_1008156E8;
  v30 = xmmword_100478880;
  v32 = &v33;
  v35 = 0x100000134;
  *(_QWORD *)buf = off_1008157C0;
  *(_OWORD *)&buf[8] = xmmword_1004788A0;
  v36[0] = &v36[1];
  v26 = 0x100000003;
  v24 = off_1008156E8;
  v25 = xmmword_100478880;
  v27 = &v28;
  sub_10030E510((uint64_t)&v19, (uint64_t)&v29, (uint64_t)buf, (uint64_t)&v24, "2");
  v6 = v5;
  sub_10030EC4C(v4, a2);
  v8 = *(double *)(a1 + 16);
  v7 = *(double *)(a1 + 24);
  if (v8 + v7 * -1.73205081 <= 0.0)
  {
    v15 = sqrt(v6 * 0.5 * (v6 * 0.5) + v7 * v7);
    *(double *)(a1 + 24) = v15;
  }
  else
  {
    v9 = 0;
    v10 = 0.0;
    do
    {
      v11 = v8 + v7 * *(double *)(a1 + v9 + 232);
      v12 = sqrt(v6 * v6 + v11 * v11 + v6 * -2.0 * v11 * *(double *)(a1 + v9 + 272));
      *(double *)&buf[v9] = v12;
      v10 = v10 + *(double *)(a1 + v9 + 312) * v12;
      v9 += 8;
    }
    while (v9 != 40);
    v13 = 0;
    v14 = 0.0;
    do
    {
      v14 = v14 + *(double *)(a1 + 352 + v13) * (*(double *)&buf[v13] - v10) * (*(double *)&buf[v13] - v10);
      v13 += 8;
    }
    while (v13 != 40);
    v15 = sqrt(v14);
    *(double *)(a1 + 16) = v10;
    *(double *)(a1 + 24) = v15;
    v8 = v10;
  }
  v16 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 8) == 1)
      v18 = "YES";
    else
      v18 = "NO";
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = v17;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2048;
    v35 = *(_QWORD *)&v15;
    LOWORD(v36[0]) = 2080;
    *(_QWORD *)((char *)v36 + 2) = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Filter state after propagation with pose: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, with VIO: %s", buf, 0x2Au);
  }
}

void sub_100323D14(uint64_t a1, int a2, double a3, double a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  int v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;

  v7 = a4 * a4;
  v9 = *(double *)(a1 + 16);
  v8 = *(double *)(a1 + 24);
  v10 = a4 * a4 + v8 * v8;
  v11 = sqrt(v10);
  v12 = (a3 - v9) / v11;
  if (a2 && v12 > 8.0)
  {
    v13 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      return;
    v16 = 134218496;
    v17 = v9;
    v18 = 2048;
    v19 = a3;
    v20 = 2048;
    v21 = v12;
    v14 = "#sa_algo_rangefilter,LoS->nLoS event detected by the range filter for a moving target: Previous range %f m, Cu"
          "rrent range %f m, Normalized change %f";
LABEL_9:
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v16, 0x20u);
    return;
  }
  if ((a2 & 1) == 0 && v12 > 6.0)
  {
    v13 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      return;
    v16 = 134218496;
    v17 = v9;
    v18 = 2048;
    v19 = a3;
    v20 = 2048;
    v21 = v12;
    v14 = "#sa_algo_rangefilter,LoS->nLoS event detected by the range filter for a static target: Previous range %f m, Cu"
          "rrent range %f m, Normalized change %f";
    goto LABEL_9;
  }
  if (v12 >= -6.0)
  {
    *(double *)(a1 + 16) = (v7 * v9 + a3 * (v8 * v8)) / v10;
    *(double *)(a1 + 24) = v8 * a4 / v11;
  }
  else
  {
    v15 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      v16 = 134218496;
      v17 = v9;
      v18 = 2048;
      v19 = a3;
      v20 = 2048;
      v21 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#sa_algo_rangefilter,nLos->LoS event detected by the range filter: Previous range %f m, Current range %f m, Normalized change %f", (uint8_t *)&v16, 0x20u);
      v15 = qword_10085F520;
    }
    *(double *)(a1 + 16) = a3;
    *(double *)(a1 + 24) = a4;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 134218240;
      v17 = a3;
      v18 = 2048;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Re-initializing range filter: range %f m, uncertainty %f m", (uint8_t *)&v16, 0x16u);
    }
  }
}

void sub_100323F64(uint64_t a1@<X0>, double *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  int v22;
  double v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  _DWORD *v27;
  NSObject *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;

  v10 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a2;
    v12 = *((_QWORD *)a2 + 1);
    v13 = *((_QWORD *)a2 + 2);
    v14 = "YES";
    if (a3)
      v15 = "YES";
    else
      v15 = "NO";
    if (!a4)
      v14 = "NO";
    v33 = 134219010;
    v34 = v11;
    v35 = 2048;
    v36 = v12;
    v37 = 2048;
    v38 = v13;
    v39 = 2080;
    v40 = v15;
    v41 = 2080;
    v42 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Measurement added without VIO: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, isCompanionMoving %s, isDeviceMoving %s", (uint8_t *)&v33, 0x34u);
  }
  if (*(_BYTE *)a1)
  {
    if ((a3 & 1) != 0 || (a4 & 1) != 0)
    {
      sub_100323980(a1, *a2);
      v19 = a2[1];
      v20 = a2[2];
      v21 = a1;
      v22 = a3;
    }
    else
    {
      v16 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v17 = a2[1];
        v18 = *((_QWORD *)a2 + 2);
        v33 = 134218240;
        v34 = v17;
        v35 = 2048;
        v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Range filter update with stationary companion and device: range %f m, uncertainty %f m", (uint8_t *)&v33, 0x16u);
      }
      v19 = a2[1];
      v20 = a2[2];
      v21 = a1;
      v22 = 0;
    }
    sub_100323D14(v21, v22, v19, v20);
  }
  else
  {
    v23 = a2[1];
    *(double *)(a1 + 16) = v23;
    v24 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 24) = v24;
    *(_BYTE *)a1 = 1;
    v25 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v33 = 134218240;
      v34 = v23;
      v35 = 2048;
      v36 = v24;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Initializing range filter without VIO: range %f m, uncertainty %f m", (uint8_t *)&v33, 0x16u);
    }
  }
  v27 = (_DWORD *)(a1 + 8);
  v26 = *(_DWORD *)(a1 + 8);
  *(double *)(a1 + 32) = *a2;
  v28 = qword_10085F520;
  if (v26 == 1 && os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v33) = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Range filter transitioning from VIO to non-VIO mode", (uint8_t *)&v33, 2u);
    v28 = qword_10085F520;
  }
  *v27 = 0;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v30 = *(_QWORD *)(a1 + 24);
    v29 = *(double *)(a1 + 32);
    v31 = *(_QWORD *)(a1 + 16);
    v33 = 134218754;
    v34 = v29;
    v35 = 2048;
    v36 = v31;
    v37 = 2048;
    v38 = v30;
    v39 = 2080;
    v40 = "NO";
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Filter state after meas without VIO: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, with VIO: %s", (uint8_t *)&v33, 0x2Au);
  }
  v32 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a5 = *(_OWORD *)v27;
  *(_OWORD *)(a5 + 16) = v32;
  *(double *)(a5 + 8) = fmax(*(double *)(a5 + 8), 0.0);
}

uint64_t sub_10032426C()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10085DE80 = 0;
  qword_10085DE88 = 0;
  qword_10085DE90 = 0;
  v0 = operator new(0x40uLL);
  qword_10085DE88 = (uint64_t)(v0 + 4);
  qword_10085DE90 = (uint64_t)(v0 + 4);
  *v0 = xmmword_1004792F0;
  v0[1] = unk_100479300;
  v0[2] = xmmword_100479310;
  v0[3] = unk_100479320;
  qword_10085DE80 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085DE80, (void *)&_mh_execute_header);
  qword_10085DEA0 = 0;
  unk_10085DEA8 = 0;
  qword_10085DE98 = 0;
  v1 = operator new(0x10uLL);
  qword_10085DEA0 = (uint64_t)(v1 + 1);
  unk_10085DEA8 = v1 + 1;
  *v1 = xmmword_100479330;
  qword_10085DE98 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085DE98, (void *)&_mh_execute_header);
}

_BYTE *sub_100324328(_BYTE *a1)
{
  NSObject *v2;
  uint8_t v4[16];

  *a1 = 0;
  a1[8] = 0;
  a1[16] = 0;
  a1[64] = 0;
  a1[72] = 0;
  a1[96] = 0;
  a1[104] = 0;
  a1[152] = 0;
  a1[160] = 0;
  a1[344] = 0;
  a1[352] = 0;
  a1[368] = 0;
  a1[376] = 0;
  a1[384] = 0;
  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#cl_algo,CLLocationBasedArrowFilter initialized", v4, 2u);
  }
  return a1;
}

void sub_1003243D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  double DistanceCoordinates;
  double v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint32_t v24;
  double v25;
  int v26;
  double v27;
  double v30;
  NSObject *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  float v35;
  double v36;
  double v37;
  long double v38;
  double v39;
  double v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  _BYTE v47[10];
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;

  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 364) = 4;
  *(_BYTE *)(a2 + 368) = 1;
  if (*(_BYTE *)(a1 + 96) && *(_BYTE *)(a1 + 152) && *(_BYTE *)(a1 + 64) && *(_BYTE *)(a1 + 384))
  {
    v4 = *(double *)(a1 + 48);
    if (v4 > 3.0)
    {
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        v46 = 134217984;
        *(double *)v47 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#cl_algo,#clcc,self location speed exceeds a brisk walking pace,inflating uncertainty,%.1lf", (uint8_t *)&v46, 0xCu);
      }
      *(double *)(a1 + 40) = fmin(*(double *)(a1 + 40), 200.0);
    }
    v6 = *(double *)(a1 + 136);
    if (v6 > 3.0)
    {
      v7 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        v46 = 134217984;
        *(double *)v47 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#cl_algo,#clcc,peer location speed exceeds a brisk walking pace,inflating uncertainty,%.1lf", (uint8_t *)&v46, 0xCu);
      }
      *(double *)(a1 + 128) = fmin(*(double *)(a1 + 128), 200.0);
    }
    if (!*(_BYTE *)(a1 + 384) || !*(_BYTE *)(a1 + 96))
      goto LABEL_68;
    v8 = *(double *)(a1 + 376);
    v9 = *(unsigned __int8 *)(a1 + 344);
    v10 = *(_BYTE *)(a1 + 344) ? v8 - *(double *)(a1 + 168) : INFINITY;
    if (!*(_BYTE *)(a1 + 64) || !*(_BYTE *)(a1 + 152))
      goto LABEL_68;
    v11 = *(double *)(a1 + 72);
    v12 = vabdd_f64(v8, v11);
    v13 = *(double *)(a1 + 16);
    v14 = vabdd_f64(v8, v13);
    v15 = *(double *)(a1 + 104);
    v16 = vabdd_f64(v8, v15);
    v17 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      if (v9)
        v45 = *(_QWORD *)(a1 + 168);
      else
        v45 = 0x7FF0000000000000;
      v46 = 134219520;
      *(double *)v47 = v8;
      *(_WORD *)&v47[8] = 2048;
      v48 = v11;
      v49 = 2048;
      v50 = v13;
      v51 = 2048;
      v52 = v15;
      v53 = 2048;
      v54 = v45;
      v55 = 2048;
      v56 = v16;
      v57 = 2048;
      v58 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#cl_algo,event timestamp: %f, heading timestamp: %f, self loc timestamp: %f, peer loc timestamp: %f, range timestamp: %f, peer loc age, %.1lf, self loc age, %.1lf", (uint8_t *)&v46, 0x48u);
    }
    if (v12 > 1.0 || v14 > 12.0 || v16 > 12.0)
    {
      v20 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        return;
      v46 = 134218496;
      *(double *)v47 = v12;
      *(_WORD *)&v47[8] = 2048;
      v48 = v14;
      v49 = 2048;
      v50 = v16;
      v21 = "#cl_algo,CLLocationBasedArrowFilter,data stale,not populating a solution,heading_age,%.1lf,abs_self_location"
            "_age_s,%.1lf,abs_peer_location_age_s,%.1lf";
      v22 = v20;
      v23 = OS_LOG_TYPE_DEFAULT;
      v24 = 32;
      goto LABEL_62;
    }
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_68;
    DistanceCoordinates = CLClientGetDistanceCoordinates(*(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 112), *(double *)(a1 + 120));
    if (*(_BYTE *)(a1 + 344))
      v19 = *(float *)(a1 + 176);
    else
      v19 = INFINITY;
    v25 = 2.0;
    if (*(_BYTE *)(a1 + 368) && *(_BYTE *)(a1 + 384) && vabdd_f64(*(double *)(a1 + 376), *(double *)(a1 + 352)) < 12.0)
    {
      v26 = *(_DWORD *)(a1 + 360);
      v27 = 2.0;
      if (v26 == 1)
        v27 = 1.0;
      if (v26)
        v25 = v27;
      else
        v25 = 0.5;
    }
    if (v19 + v10 * 2.0 >= DistanceCoordinates || *(_BYTE *)(a1 + 344) == 0 || v10 > 60.0)
      v30 = DistanceCoordinates;
    else
      v30 = v19 + v10 * 2.0;
    v31 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      v46 = 134218752;
      *(double *)v47 = DistanceCoordinates;
      *(_WORD *)&v47[8] = 2048;
      v48 = v19;
      v49 = 2048;
      v50 = fabs(v10);
      v51 = 2048;
      v52 = v30;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#cl_algo,CLLocationBasedArrowFilter,location_range_m,%.1lf,uwb_range_m,%.1lf,abs_uwb_range_age,%.1lf,fused_range_m,%.1lf", (uint8_t *)&v46, 0x2Au);
    }
    v32 = *(_BYTE *)(a1 + 8) ? *(_QWORD *)a1 : 0;
    if (!*(_BYTE *)(a1 + 384))
      goto LABEL_68;
    v33 = sqrt((*(double *)(a1 + 128) + v25 * v16) * (*(double *)(a1 + 128) + v25 * v16)+ (*(double *)(a1 + 40) + v14 * 2.0) * (*(double *)(a1 + 40) + v14 * 2.0));
    v34 = *(_QWORD *)(a1 + 376);
    v35 = DistanceCoordinates;
    *(_QWORD *)(a2 + 8) = v32;
    *(_QWORD *)(a2 + 16) = v34;
    *(float *)(a2 + 24) = v35;
    *(_DWORD *)(a2 + 28) = 4;
    *(_BYTE *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 60) = 0;
    *(_BYTE *)(a2 + 64) = 0;
    *(_BYTE *)(a2 + 68) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_WORD *)(a2 + 88) = 0;
    v36 = v33 / 1.41421356;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(double *)(a2 + 112) = v33 / 1.41421356;
    *(_QWORD *)(a2 + 120) = 1;
    *(_QWORD *)(a2 + 128) = 0x200000000;
    *(_BYTE *)(a2 + 136) = 0;
    *(_BYTE *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_BYTE *)(a2 + 192) = 1;
    if (!*(_BYTE *)(a1 + 152) || (v37 = sub_1003249DC(a1 + 16, a1 + 104), !*(_BYTE *)(a1 + 96)))
LABEL_68:
      sub_10000BA44();
    v38 = fmod(v37 + 360.0, 360.0);
    v39 = fmod(v38 - *(double *)(a1 + 80) + 180.0, 360.0);
    *(_BYTE *)(a2 + 208) = 1;
    if (v39 < 0.0)
      v39 = v39 + 360.0;
    *(double *)(a2 + 200) = v39 + -180.0;
    v40 = v36 / v30 * 57.2957795;
    *(double *)(a2 + 336) = v40;
    *(_BYTE *)(a2 + 344) = 1;
    *(double *)(a2 + 320) = sqrt(*(double *)(a1 + 88) * *(double *)(a1 + 88) + v40 * v40);
    *(_BYTE *)(a2 + 328) = 1;
    v41 = *(unsigned __int8 *)(a1 + 56);
    if (*(_BYTE *)(a1 + 56))
      v42 = *(_BYTE *)(a1 + 144) != 0;
    else
      v42 = 0;
    *(_WORD *)(a2 + 352) = v42 | 0x100;
    v43 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      v44 = *(unsigned __int8 *)(a1 + 144);
      v46 = 67109632;
      *(_DWORD *)v47 = v42;
      *(_WORD *)&v47[4] = 1024;
      *(_DWORD *)&v47[6] = v41;
      LOWORD(v48) = 1024;
      *(_DWORD *)((char *)&v48 + 2) = v44;
      v21 = "#cl_algo,#gri,findee,CLLocationBasedArrowFilter,producedInGoodEnvironmentalConditions,%d,self,%d,peer,%d";
      v22 = v43;
      v23 = OS_LOG_TYPE_INFO;
      v24 = 20;
LABEL_62:
      _os_log_impl((void *)&_mh_execute_header, v22, v23, v21, (uint8_t *)&v46, v24);
    }
  }
}

long double sub_1003249DC(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  __double2 v4;
  __double2 v5;
  __double2 v6;

  v2 = *(double *)(a1 + 8) * 3.14159265 / 180.0;
  v3 = *(double *)(a2 + 8) * 3.14159265 / 180.0;
  v4 = __sincos_stret(*(double *)(a2 + 16) * 3.14159265 / 180.0 - *(double *)(a1 + 16) * 3.14159265 / 180.0);
  v5 = __sincos_stret(v3);
  v6 = __sincos_stret(v2);
  return atan2(v5.__cosval * v4.__sinval, -(v6.__sinval * v5.__cosval) * v4.__cosval + v6.__cosval * v5.__sinval)
       * 180.0
       / 3.14159265;
}

__n128 sub_100324A8C(uint64_t a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = (__n128 *)(a1 + 104);
  if (*(_BYTE *)(a1 + 152))
  {
    result = *(__n128 *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 25);
    *v2 = result;
    *(_OWORD *)(a1 + 120) = v4;
  }
  else
  {
    result = *(__n128 *)a2;
    v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 136) = v5;
    *v2 = result;
    *(_BYTE *)(a1 + 152) = 1;
  }
  return result;
}

uint64_t sub_100324AC8(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  double v4;

  v2 = *(unsigned __int8 *)(result + 96);
  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(result + 72) = *(_OWORD *)a2;
  *(_QWORD *)(result + 88) = v3;
  if (!v2)
    *(_BYTE *)(result + 96) = 1;
  v4 = *(double *)a2;
  if (!*(_BYTE *)(result + 384) || *(double *)(result + 376) < v4)
  {
    *(double *)(result + 376) = v4;
    *(_BYTE *)(result + 384) = 1;
  }
  return result;
}

uint64_t sub_100324B10(uint64_t result, __int128 *a2)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double v7;

  v2 = (_OWORD *)(result + 16);
  if (*(_BYTE *)(result + 64))
  {
    v3 = *a2;
    v4 = a2[1];
    *(_OWORD *)(result + 41) = *(__int128 *)((char *)a2 + 25);
    *v2 = v3;
    *(_OWORD *)(result + 32) = v4;
  }
  else
  {
    v5 = *a2;
    v6 = a2[2];
    *(_OWORD *)(result + 32) = a2[1];
    *(_OWORD *)(result + 48) = v6;
    *v2 = v5;
    *(_BYTE *)(result + 64) = 1;
  }
  v7 = *(double *)a2;
  if (!*(_BYTE *)(result + 384) || *(double *)(result + 376) < v7)
  {
    *(double *)(result + 376) = v7;
    *(_BYTE *)(result + 384) = 1;
  }
  return result;
}

uint64_t sub_100324B70(uint64_t result, __int128 *a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double v12;

  v2 = *(unsigned __int8 *)(result + 344);
  v3 = a2[3];
  v5 = *a2;
  v4 = a2[1];
  *(_OWORD *)(result + 192) = a2[2];
  *(_OWORD *)(result + 208) = v3;
  *(_OWORD *)(result + 160) = v5;
  *(_OWORD *)(result + 176) = v4;
  v6 = a2[7];
  v8 = a2[4];
  v7 = a2[5];
  *(_OWORD *)(result + 256) = a2[6];
  *(_OWORD *)(result + 272) = v6;
  *(_OWORD *)(result + 224) = v8;
  *(_OWORD *)(result + 240) = v7;
  v10 = a2[9];
  v9 = a2[10];
  v11 = a2[8];
  *(_QWORD *)(result + 336) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(result + 304) = v10;
  *(_OWORD *)(result + 320) = v9;
  *(_OWORD *)(result + 288) = v11;
  if (!v2)
    *(_BYTE *)(result + 344) = 1;
  v12 = *((double *)a2 + 1);
  if (!*(_BYTE *)(result + 384) || *(double *)(result + 376) < v12)
  {
    *(double *)(result + 376) = v12;
    *(_BYTE *)(result + 384) = 1;
  }
  return result;
}

uint64_t sub_100324BE0(uint64_t result, int *a2, double a3)
{
  int v3;

  if (!*(_BYTE *)(result + 384) || *(double *)(result + 376) < a3)
  {
    *(double *)(result + 376) = a3;
    *(_BYTE *)(result + 384) = 1;
  }
  v3 = *a2;
  *(double *)(result + 352) = a3;
  *(_DWORD *)(result + 360) = v3;
  *(_BYTE *)(result + 368) = 1;
  return result;
}

uint64_t sub_100324C18(uint64_t result, double a2, double a3, double a4, double a5)
{
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a3;
  *(_QWORD *)result = off_1008161D8;
  *(double *)(result + 24) = a4;
  *(double *)(result + 32) = a5;
  return result;
}

BOOL sub_100324C30(double *a1, __int128 **a2)
{
  double v4;
  NSObject *v5;
  _BOOL8 v6;
  uint64_t v7;
  _BYTE v9[24];

  v4 = (*(double (**)(double *))(*(_QWORD *)a1 + 16))(a1);
  v5 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 134217984;
    *(double *)&v9[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#dec-proc, WRTT: Estimating shouldUnlock with unlockThreshold: %f", v9, 0xCu);
  }
  (*(void (**)(_BYTE *__return_ptr, double *))(*(_QWORD *)a1 + 32))(v9, a1);
  v6 = sub_100324D68(a1, (uint64_t *)v9, a2, v4);
  v7 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v6;
}

void sub_100324D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

BOOL sub_100324D68(double *a1, uint64_t *a2, __int128 **a3, double a4)
{
  __int128 *v4;
  __int128 *v5;
  char *v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  uint64_t v46;
  _BOOL8 v47;
  NSObject *v49;
  void *v50[3];
  uint64_t v51[3];
  void *__p[5];

  v4 = *a3;
  v5 = a3[1];
  if (*a3 == v5)
    return 0;
  if (!*a2)
  {
    v49 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "#dec-proc, Assertion failed", (uint8_t *)__p, 2u);
      v49 = qword_10085F520;
    }
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/NearbyAlgorithms/AutoUnloc"
                                    "k/NRBYPeerRangingDecisionProcessor.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 40;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = "filterRangesAndEstimateUnlock";
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "#dec-proc, %s:%d: assertion failure in %s", (uint8_t *)__p, 0x1Cu);
    }
    abort();
  }
  v9 = 0;
  memset(__p, 0, 24);
  do
  {
    v10 = *((float *)v4 + 4);
    if (a1[1] < v10 && a1[2] > v10)
    {
      if (v9 >= __p[2])
      {
        v20 = (char *)__p[0];
        v21 = 0xD37A6F4DE9BD37A7 * ((v9 - (char *)__p[0]) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0x1642C8590B21642)
          sub_100026E7C();
        if (0xA6F4DE9BD37A6F4ELL * (((char *)__p[2] - (char *)__p[0]) >> 3) > v22)
          v22 = 0xA6F4DE9BD37A6F4ELL * (((char *)__p[2] - (char *)__p[0]) >> 3);
        if (0xD37A6F4DE9BD37A7 * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0xB21642C8590B21)
          v23 = 0x1642C8590B21642;
        else
          v23 = v22;
        if (v23)
        {
          v24 = (char *)sub_100182D3C((uint64_t)&__p[2], v23);
          v20 = (char *)__p[0];
          v9 = (char *)__p[1];
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[184 * v21];
        v26 = *v4;
        v27 = v4[1];
        v28 = v4[3];
        *((_OWORD *)v25 + 2) = v4[2];
        *((_OWORD *)v25 + 3) = v28;
        *(_OWORD *)v25 = v26;
        *((_OWORD *)v25 + 1) = v27;
        v29 = v4[4];
        v30 = v4[5];
        v31 = v4[7];
        *((_OWORD *)v25 + 6) = v4[6];
        *((_OWORD *)v25 + 7) = v31;
        *((_OWORD *)v25 + 4) = v29;
        *((_OWORD *)v25 + 5) = v30;
        v32 = v4[8];
        v33 = v4[9];
        v34 = v4[10];
        *((_QWORD *)v25 + 22) = *((_QWORD *)v4 + 22);
        *((_OWORD *)v25 + 9) = v33;
        *((_OWORD *)v25 + 10) = v34;
        *((_OWORD *)v25 + 8) = v32;
        if (v9 == v20)
        {
          v45 = &v24[184 * v21];
        }
        else
        {
          v35 = &v24[184 * v21];
          do
          {
            v36 = *(_OWORD *)(v9 - 184);
            v37 = *(_OWORD *)(v9 - 168);
            v38 = *(_OWORD *)(v9 - 152);
            *(_OWORD *)(v35 - 136) = *(_OWORD *)(v9 - 136);
            *(_OWORD *)(v35 - 152) = v38;
            *(_OWORD *)(v35 - 168) = v37;
            *(_OWORD *)(v35 - 184) = v36;
            v39 = *(_OWORD *)(v9 - 120);
            v40 = *(_OWORD *)(v9 - 104);
            v41 = *(_OWORD *)(v9 - 88);
            *(_OWORD *)(v35 - 72) = *(_OWORD *)(v9 - 72);
            *(_OWORD *)(v35 - 88) = v41;
            *(_OWORD *)(v35 - 104) = v40;
            *(_OWORD *)(v35 - 120) = v39;
            v42 = *(_OWORD *)(v9 - 56);
            v43 = *(_OWORD *)(v9 - 40);
            v44 = *(_OWORD *)(v9 - 24);
            v45 = v35 - 184;
            *((_QWORD *)v35 - 1) = *((_QWORD *)v9 - 1);
            *(_OWORD *)(v35 - 24) = v44;
            *(_OWORD *)(v35 - 40) = v43;
            *(_OWORD *)(v35 - 56) = v42;
            v9 -= 184;
            v35 -= 184;
          }
          while (v9 != v20);
        }
        v9 = v25 + 184;
        __p[0] = v45;
        __p[1] = v25 + 184;
        __p[2] = &v24[184 * v23];
        if (v20)
          operator delete(v20);
      }
      else
      {
        v11 = *v4;
        v12 = v4[1];
        v13 = v4[3];
        *((_OWORD *)v9 + 2) = v4[2];
        *((_OWORD *)v9 + 3) = v13;
        *(_OWORD *)v9 = v11;
        *((_OWORD *)v9 + 1) = v12;
        v14 = v4[4];
        v15 = v4[5];
        v16 = v4[7];
        *((_OWORD *)v9 + 6) = v4[6];
        *((_OWORD *)v9 + 7) = v16;
        *((_OWORD *)v9 + 4) = v14;
        *((_OWORD *)v9 + 5) = v15;
        v17 = v4[8];
        v18 = v4[9];
        v19 = v4[10];
        *((_QWORD *)v9 + 22) = *((_QWORD *)v4 + 22);
        *((_OWORD *)v9 + 9) = v18;
        *((_OWORD *)v9 + 10) = v19;
        *((_OWORD *)v9 + 8) = v17;
        v9 += 184;
      }
      __p[1] = v9;
    }
    v4 = (__int128 *)((char *)v4 + 184);
  }
  while (v4 != v5);
  v46 = *a2;
  (*(void (**)(void **__return_ptr, double *, void **))(*(_QWORD *)a1 + 48))(v50, a1, __p);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, double))(*(_QWORD *)v46 + 16))(v51, v46, v50, a4);
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  v47 = LOBYTE(v51[0]) != 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v47;
}

void sub_100325134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

double sub_100325178(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

double sub_100325180(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

_QWORD *sub_100325188@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1003251BC(a2, *(const void **)a1, *(_QWORD *)(a1 + 8), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
}

_QWORD *sub_1003251BC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100325234(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100325218(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100325234(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1642C8590B21643)
    sub_100026E7C();
  result = (char *)sub_100182D3C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

__n128 sub_100325288@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  double v12;
  const char *v13;
  NSObject *v14;
  __n128 result;
  double v16;
  double v17;
  int v18;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  double v23;
  const char *v24;
  const char *v25;
  NSObject *v26;
  double v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int16 v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  _OWORD v42[4];
  _BYTE buf[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  __int16 v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;

  *a3 = 0;
  v8 = *(_QWORD *)(a1 + 232);
  if (!v8
    || *(double *)a2 > *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 200)
                                             + (((unint64_t)(v8 + *(_QWORD *)(a1 + 224) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                                 + (((v8 + *(_QWORD *)(a1 + 224) - 1) & 0x1F) << 7)))
  {
    v9 = *(_DWORD *)(a1 + 240);
    v10 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 240) = v10;
    if (v9 != v10)
    {
      switch(v10)
      {
        case 2:
          v11 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v16 = *(double *)a2;
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v16;
            v13 = "#findalgs-rangeposeinterpolator,VIO Tracking State changed to Normal at %f s";
            goto LABEL_16;
          }
          break;
        case 1:
          v11 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *(double *)a2;
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v17;
            v13 = "#findalgs-rangeposeinterpolator,VIO Tracking State changed to Limited at %f s";
            goto LABEL_16;
          }
          break;
        case 0:
          v11 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v12 = *(double *)a2;
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v12;
            v13 = "#findalgs-rangeposeinterpolator,VIO Tracking State changed to Not Available at %f s";
LABEL_16:
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v13, buf, 0xCu);
          }
          break;
      }
    }
    v18 = *(_DWORD *)(a2 + 80);
    if (v9 == 2 && v18 != 2)
    {
      v20 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,VIO Tracking not normal anymore - resetting", buf, 2u);
      }
      if (*(_BYTE *)(a1 + 184))
      {
        v21 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,VIO Tracking not normal before the cached measurement can be interpolated - passing the cached measurement to the range filter without VIO", buf, 2u);
        }
      }
      *a3 = 1;
      sub_100325760(a1);
      v18 = *(_DWORD *)(a2 + 80);
    }
    if (v18 == 2)
    {
      if (*(_BYTE *)(a2 + 84))
      {
        v22 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v23 = *(double *)a2;
          v24 = "YES";
          if (*(_BYTE *)(a2 + 84))
            v25 = "YES";
          else
            v25 = "NO";
          if (!*(_BYTE *)(a2 + 85))
            v24 = "NO";
          *(_DWORD *)buf = 134218498;
          *(double *)&buf[4] = v23;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v25;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v24;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,VIO reported relocalization event at %f s, MAJOR: %s, MINOR: %s - resetting", buf, 0x20u);
        }
        *a3 = 1;
        sub_100325760(a1);
      }
      else
      {
        if (*(_BYTE *)(a2 + 85))
        {
          v26 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v27 = *(double *)a2;
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,VIO reported MINOR relocalization event at %f s", buf, 0xCu);
          }
        }
        v28 = 0;
        v29 = *(float32x4_t *)(a2 + 16);
        v30 = *(float32x4_t *)(a2 + 32);
        v31 = *(float32x4_t *)(a2 + 48);
        v32 = *(float32x4_t *)(a2 + 64);
        v42[0] = xmmword_100478840;
        v42[1] = xmmword_100478850;
        v42[2] = xmmword_100478860;
        v42[3] = xmmword_100478870;
        do
        {
          *(float32x4_t *)&buf[v28 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(v42[v28])), v30, *(float32x2_t *)&v42[v28], 1), v31, (float32x4_t)v42[v28], 2), v32, (float32x4_t)v42[v28], 3);
          ++v28;
        }
        while (v28 != 4);
        v33 = *(_OWORD *)buf;
        v34 = *(_OWORD *)&buf[16];
        v35 = v44;
        v36 = v45;
        v37 = *(_DWORD *)(a2 + 80);
        v38 = *(_WORD *)(a2 + 84);
        *(_QWORD *)buf = *(_QWORD *)a2;
        *(_OWORD *)&buf[16] = v33;
        v44 = v34;
        v45 = v35;
        v46 = v36;
        v47 = v37;
        v48 = v38;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        sub_1003098A8((_QWORD *)(a1 + 192), (__int128 *)buf);
      }
    }
    sub_1003257E4(a1, (uint64_t)buf);
    sub_100325EA4((_QWORD *)a1);
    v39 = v45;
    *(_OWORD *)(a4 + 32) = v44;
    *(_OWORD *)(a4 + 48) = v39;
    *(_OWORD *)(a4 + 64) = v46;
    result = *(__n128 *)&buf[16];
    *(_OWORD *)a4 = *(_OWORD *)buf;
    *(__n128 *)(a4 + 16) = result;
    return result;
  }
  v14 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    v40 = *(_QWORD *)(a1 + 232) + *(_QWORD *)(a1 + 224) - 1;
    v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + ((v40 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v40 & 0x1F) << 7));
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v41;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#findalgs-rangeposeinterpolator,Received pose earlier than the last pose in history with timestamp: %f - pose rejected", buf, 0xCu);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 72) = 0;
  return result;
}

void sub_100325760(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 240) = 0;
  if (*(_BYTE *)(a1 + 184))
    *(_BYTE *)(a1 + 184) = 0;
  v2 = *(void ***)(a1 + 200);
  v3 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 232) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 208);
      v2 = (void **)(*(_QWORD *)(a1 + 200) + 8);
      *(_QWORD *)(a1 + 200) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 16;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 32;
  }
  *(_QWORD *)(a1 + 224) = v6;
}

void sub_1003257E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char *v11;
  unint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  double *v20;
  double *v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float v49;
  float v50;
  BOOL v51;
  float v52;
  float v53;
  float32x2_t v54;
  float32x2_t v55;
  float v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x2_t v64;
  int8x16_t v65;
  unsigned __int32 v66;
  float32x2_t v67;
  float32x2_t v68;
  int8x16_t v69;
  double v70;
  double v71;
  double v72;
  NSObject *v73;
  double v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  float v83;
  float v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float64x2_t v89;
  float v90;
  float64x2_t v91;
  _BYTE buf[22];
  __int16 v93;
  double v94;
  __int16 v95;
  float64_t v96;
  __int16 v97;
  float64_t v98;
  __int16 v99;
  double v100;
  __int16 v101;
  float64_t v102;
  __int16 v103;
  float64_t v104;
  __int16 v105;
  double v106;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (!*(_BYTE *)(a1 + 184))
    return;
  v4 = *(_QWORD *)(a1 + 232);
  if (!v4)
    return;
  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 208);
  v8 = (char *)(v6 + 8 * (v5 >> 5));
  if (v7 == v6)
  {
    v9 = 0;
    v12 = 0;
    v11 = (char *)(v6 + 8 * ((v5 + v4) >> 5));
  }
  else
  {
    v9 = *(_QWORD *)v8 + ((*(_QWORD *)(a1 + 224) & 0x1FLL) << 7);
    v10 = v5 + v4;
    v11 = (char *)(v6 + 8 * ((v5 + v4) >> 5));
    v12 = *(_QWORD *)v11 + ((unint64_t)(v10 & 0x1F) << 7);
  }
  v13 = *(double *)(a1 + 8);
  v14 = *(float *)(a1 + 16);
  *(_QWORD *)buf = v6 + 8 * (v5 >> 5);
  *(_QWORD *)&buf[8] = v9;
  if (v12 != v9)
  {
    v15 = ((uint64_t)(v12 - *(_QWORD *)v11) >> 7) + 4 * (v11 - v8);
    v16 = v9 - *(_QWORD *)v8;
    v17 = v15 - (v16 >> 7);
    if (v15 != v16 >> 7)
    {
      do
      {
        v18 = v17 >> 1;
        v19 = sub_10030ECFC((uint64_t)buf, v17 >> 1);
        if (v13 >= *v20)
        {
          v21 = v20 + 16;
          if ((double *)((char *)v20 - *v19 + 128) == (double *)4096)
          {
            v22 = (double *)v19[1];
            ++v19;
            v21 = v22;
          }
          *(_QWORD *)buf = v19;
          *(_QWORD *)&buf[8] = v21;
          v18 = v17 + ~v18;
        }
        v17 = v18;
      }
      while (v18);
      v8 = *(char **)buf;
      v9 = *(_QWORD *)&buf[8];
      v5 = *(_QWORD *)(a1 + 224);
      v6 = *(_QWORD *)(a1 + 200);
      v7 = *(_QWORD *)(a1 + 208);
    }
  }
  if (v7 == v6)
  {
    if (v9)
    {
      v23 = 0;
      goto LABEL_19;
    }
LABEL_22:
    v30 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + ((*(_QWORD *)(a1 + 224) >> 2) & 0x3FFFFFFFFFFFFFF8))
                      + ((*(_QWORD *)(a1 + 224) & 0x1FLL) << 7));
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v31;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#findalgs-rangeposeinterpolator,Measurement at %f s earlier than the first pose in history at %f s - skipping interpolation and removing range measurement", buf, 0x16u);
    }
    goto LABEL_43;
  }
  if (*(_QWORD *)(v6 + ((v5 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v5 & 0x1F) << 7) == v9)
    goto LABEL_22;
  v23 = *(_QWORD *)(v6 + (((*(_QWORD *)(a1 + 232) + v5) >> 2) & 0x3FFFFFFFFFFFFFF8))
      + (((*(_QWORD *)(a1 + 232) + v5) & 0x1F) << 7);
LABEL_19:
  if (v23 != v9)
  {
    v24 = v9 - *(_QWORD *)v8;
    v25 = v24 >> 7;
    if (v24 < 129)
    {
      v35 = 32 - v25;
      v27 = &v8[-8 * (v35 >> 5)];
      v28 = *(_QWORD *)v27;
      v29 = ~(_DWORD)v35 & 0x1FLL;
    }
    else
    {
      v26 = v25 - 1;
      v27 = &v8[8 * (v26 >> 5)];
      v28 = *(_QWORD *)v27;
      v29 = v26 & 0x1F;
    }
    v36 = v28 + (v29 << 7);
    v37 = (v13 - *(double *)v36) / (*(double *)v9 - *(double *)v36);
    v90 = v37;
    v87 = *(float32x4_t *)(v36 + 64);
    *(double *)v38.i64 = sub_10030C298(*(int8x16_t *)(v36 + 16), *(int8x16_t *)(v36 + 32), *(__n128 *)(v36 + 48));
    v88 = v38;
    v86 = *(float32x4_t *)(v9 + 64);
    *(double *)v39.i64 = sub_10030C298(*(int8x16_t *)(v9 + 16), *(int8x16_t *)(v9 + 32), *(__n128 *)(v9 + 48));
    v40 = (int8x16_t)vmulq_f32(v88, v39);
    v41 = (float32x4_t)vextq_s8(v40, v40, 8uLL);
    *(float32x2_t *)v40.i8 = vadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v41.f32);
    *(float *)v40.i32 = vaddv_f32(*(float32x2_t *)v40.i8);
    v41.i32[0] = 0;
    v42 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)v40, v41)), 0), (int8x16_t)vnegq_f32(v39), (int8x16_t)v39);
    v43 = 1.0;
    v44 = 1.0 - v90;
    v45 = vsubq_f32(v88, v42);
    v46 = (int8x16_t)vmulq_f32(v45, v45);
    v85 = v42;
    v47 = vaddq_f32(v88, v42);
    v48 = (int8x16_t)vmulq_f32(v47, v47);
    v49 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL)))));
    v50 = v49 + v49;
    v51 = (float)(v49 + v49) == 0.0;
    v52 = 1.0;
    if (!v51)
      v52 = sinf(v50) / v50;
    v53 = v52;
    v54 = vrecpe_f32((float32x2_t)LODWORD(v52));
    v55 = vmul_f32(v54, vrecps_f32((float32x2_t)LODWORD(v53), v54));
    LODWORD(v56) = vmul_f32(v55, vrecps_f32((float32x2_t)LODWORD(v53), v55)).u32[0];
    if ((float)(v44 * v50) != 0.0)
    {
      v83 = v56;
      v55.f32[0] = sinf(v44 * v50);
      v56 = v83;
      v43 = v55.f32[0] / (float)(v44 * v50);
    }
    v55.f32[0] = v44 * (float)(v56 * v43);
    v57 = (float32x4_t)vdupq_lane_s32((int32x2_t)v55, 0);
    v58 = v90;
    v59 = v50 * v90;
    v60 = 1.0;
    if (v59 != 0.0)
    {
      v82 = v57;
      v84 = v56;
      v61 = sinf(v59);
      v57 = v82;
      v56 = v84;
      v58 = v90;
      v60 = v61 / v59;
    }
    v62 = vmlaq_f32(vmulq_n_f32(v85, (float)(v56 * v60) * v58), v88, v57);
    v63 = (int8x16_t)vmulq_f32(v62, v62);
    v64 = vadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
    if (vaddv_f32(v64) == 0.0)
    {
      v65 = (int8x16_t)xmmword_100478870;
    }
    else
    {
      v66 = vadd_f32(v64, (float32x2_t)vdup_lane_s32((int32x2_t)v64, 1)).u32[0];
      v67 = vrsqrte_f32((float32x2_t)v66);
      v68 = vmul_f32(v67, vrsqrts_f32((float32x2_t)v66, vmul_f32(v67, v67)));
      v65 = (int8x16_t)vmulq_n_f32(v62, vmul_f32(v68, vrsqrts_f32((float32x2_t)v66, vmul_f32(v68, v68))).f32[0]);
    }
    v69 = (int8x16_t)vmlaq_n_f32(v87, vsubq_f32(v86, v87), v58);
    v70 = *(float *)v69.i32;
    v71 = *(float *)v65.i32;
    v89 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 4uLL));
    v91 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 4uLL));
    v72 = *(float *)&v65.i32[3];
    v73 = qword_10085F520;
    v74 = v14;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134220032;
      *(double *)&buf[4] = v74;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v13;
      v93 = 2048;
      v94 = v70;
      v95 = 2048;
      v96 = v91.f64[0];
      v97 = 2048;
      v98 = v91.f64[1];
      v99 = 2048;
      v100 = v71;
      v101 = 2048;
      v102 = v89.f64[0];
      v103 = 2048;
      v104 = v89.f64[1];
      v105 = 2048;
      v106 = v72;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,Passing range measurement to batch filter and range filter, range: %0.2f m, timestamp: %f s, device position:[%0.2f,%0.2f,%0.2f], device quat:[%0.2f,%0.2f,%0.2f,%0.2f]", buf, 0x5Cu);
    }
    *(double *)a2 = v13;
    *(double *)(a2 + 8) = v74;
    *(double *)(a2 + 16) = v70;
    *(float64x2_t *)(a2 + 24) = v91;
    *(double *)(a2 + 40) = v71;
    *(float64x2_t *)(a2 + 48) = v89;
    *(double *)(a2 + 64) = v72;
    *(_BYTE *)(a2 + 72) = 1;
    v75 = *(_QWORD *)(a1 + 200);
    v76 = (char *)(v75 + 8 * (*(_QWORD *)(a1 + 224) >> 5));
    if (*(_QWORD *)(a1 + 208) == v75)
      v77 = 0;
    else
      v77 = *(_QWORD *)v76 + ((*(_QWORD *)(a1 + 224) & 0x1FLL) << 7);
    sub_10030D388((_QWORD *)(a1 + 192), v76, v77, v27, v36);
    v78 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v79 = *(_QWORD *)(a1 + 200);
      v80 = *(_QWORD *)(*(_QWORD *)(v79 + ((*(_QWORD *)(a1 + 224) >> 2) & 0x3FFFFFFFFFFFFFF8))
                      + ((*(_QWORD *)(a1 + 224) & 0x1FLL) << 7));
      v81 = *(_QWORD *)(*(_QWORD *)(v79
                                  + (((unint64_t)(*(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 232) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                      + (((*(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 232) - 1) & 0x1F) << 7));
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v80;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v81;
      _os_log_debug_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "#findalgs-rangeposeinterpolator,Pose history now between %f s and %f s", buf, 0x16u);
    }
LABEL_43:
    if (*(_BYTE *)(a1 + 184))
      *(_BYTE *)(a1 + 184) = 0;
    return;
  }
  v32 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v33 = *(_QWORD *)(a1 + 232) + *(_QWORD *)(a1 + 224) - 1;
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + ((v33 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v33 & 0x1F) << 7));
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v34;
    _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#findalgs-rangeposeinterpolator,Measurement at %f s later than the last pose in history at %f s - skipping interpolation", buf, 0x16u);
  }
}

void sub_100325EA4(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  double v4;
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  _QWORD *v21;
  double *v22;
  double *v23;
  double *v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[22];

  v1 = a1[29];
  if (v1)
  {
    v3 = a1[28];
    v4 = *(double *)(*(_QWORD *)(a1[25] + (((v1 + v3 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v1 + v3 - 1) & 0x1F) << 7))
       - *(double *)(*(_QWORD *)(a1[25] + ((v3 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v3 & 0x1F) << 7));
    if (v4 > 5.0)
    {
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v31 = 134217984;
        *(double *)&v31[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,Pose history spans %f s - pruning down past poses from history", v31, 0xCu);
      }
      v6 = a1[28];
      v7 = v6 + a1[29];
      v8 = a1[25];
      v9 = a1[26];
      v10 = v6 >> 5;
      v11 = (char *)(v8 + 8 * (v6 >> 5));
      if (v9 == v8)
      {
        v12 = 0;
        v14 = 0;
        v13 = (char *)(v8 + 8 * (v7 >> 5));
      }
      else
      {
        v12 = *(_QWORD *)v11 + ((a1[28] & 0x1FLL) << 7);
        v13 = (char *)(v8 + 8 * (v7 >> 5));
        v14 = *(_QWORD *)v13 + ((v7 & 0x1F) << 7);
      }
      v15 = *(double *)(*(_QWORD *)(v8 + (((v7 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v7 - 1) & 0x1F) << 7));
      *(_QWORD *)v31 = v8 + 8 * (v6 >> 5);
      *(_QWORD *)&v31[8] = v12;
      if (v14 != v12)
      {
        v16 = ((uint64_t)(v14 - *(_QWORD *)v13) >> 7) + 4 * (v13 - v11);
        v17 = v12 - *(_QWORD *)v11;
        v18 = v16 - (v17 >> 7);
        if (v16 != v17 >> 7)
        {
          v19 = v15 + -2.0;
          do
          {
            v20 = v18 >> 1;
            v21 = sub_10030ECFC((uint64_t)v31, v18 >> 1);
            if (v19 >= *v22)
            {
              v23 = v22 + 16;
              if ((double *)((char *)v22 - *v21 + 128) == (double *)4096)
              {
                v24 = (double *)v21[1];
                ++v21;
                v23 = v24;
              }
              *(_QWORD *)v31 = v21;
              *(_QWORD *)&v31[8] = v23;
              v20 = v18 + ~v20;
            }
            v18 = v20;
          }
          while (v20);
          v11 = *(char **)v31;
          v12 = *(_QWORD *)&v31[8];
          v6 = a1[28];
          v8 = a1[25];
          v9 = a1[26];
          v10 = v6 >> 5;
        }
      }
      v25 = (char *)(v8 + 8 * v10);
      if (v9 == v8)
        v26 = 0;
      else
        v26 = *(_QWORD *)v25 + ((v6 & 0x1F) << 7);
      sub_10030D388(a1 + 24, v25, v26, v11, v12);
      v27 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v28 = a1[25];
        v29 = *(_QWORD *)(*(_QWORD *)(v28 + ((a1[28] >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((a1[28] & 0x1FLL) << 7));
        v30 = *(_QWORD *)(*(_QWORD *)(v28 + (((unint64_t)(a1[28] + a1[29] - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                        + (((a1[28] + a1[29] - 1) & 0x1F) << 7));
        *(_DWORD *)v31 = 134218240;
        *(_QWORD *)&v31[4] = v29;
        *(_WORD *)&v31[12] = 2048;
        *(_QWORD *)&v31[14] = v30;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,Pose history now between %f s and %f s", v31, 0x16u);
      }
    }
  }
}

void sub_100326168(uint64_t a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X8>)
{
  BOOL v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  NSObject *v16;
  int v18;
  _DWORD v19[2];

  if (*((_BYTE *)a2 + 181))
    v5 = *((unsigned __int8 *)a2 + 180) > 2u;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(a1 + 184);
    v7 = a2[3];
    v9 = *a2;
    v8 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v8;
    v10 = a2[7];
    v12 = a2[4];
    v11 = a2[5];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v10;
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 80) = v11;
    v14 = a2[9];
    v13 = a2[10];
    v15 = a2[8];
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    *(_OWORD *)(a1 + 144) = v14;
    *(_OWORD *)(a1 + 160) = v13;
    *(_OWORD *)(a1 + 128) = v15;
    if (!v6)
      *(_BYTE *)(a1 + 184) = 1;
    sub_1003257E4(a1, (uint64_t)a3);
  }
  else
  {
    v16 = (id)qword_10085F520;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (!*((_BYTE *)a2 + 181))
        sub_10000BA44();
      v18 = *((unsigned __int8 *)a2 + 180);
      v19[0] = 67109120;
      v19[1] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,mmsValStatus %d does not pass check, rejecting range result event", (uint8_t *)v19, 8u);
    }

    *a3 = 0;
    a3[72] = 0;
  }
}

void sub_1003262C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1003262DC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_100343534(a1, a2);
  *result = off_100816230;
  return result;
}

uint64_t sub_1003262FC@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v5;
  double v6;
  uint64_t result;
  char v8;
  char v9;
  _BYTE v10[96];

  v6 = *a2;
  v5 = a2[1];
  v10[0] = 0;
  v10[88] = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, double, double))(*(_QWORD *)a1 + 16))(a1, a3, v10, v5, v6);
  if (v8)
  {
    *(_QWORD *)a4 = result;
    v9 = 1;
    *(_BYTE *)(a4 + 8) = 1;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 24) = 0;
    *(_BYTE *)(a4 + 32) = 0;
    *(_BYTE *)(a4 + 36) = 0;
    *(_BYTE *)(a4 + 40) = 0;
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 56) = 0;
    *(_BYTE *)(a4 + 64) = 0;
    *(_BYTE *)(a4 + 72) = 0;
    *(_BYTE *)(a4 + 76) = 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 80) = v9;
  return result;
}

__n128 sub_100326390(uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_100816270;
  result = *a2;
  *(_QWORD *)(a1 + 96) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 80) = result;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t sub_1003263D8(uint64_t result)
{
  *(_QWORD *)(result + 120) = *(_QWORD *)(result + 112);
  *(_BYTE *)(result + 104) = 0;
  return result;
}

void sub_1003263E8(_QWORD *a1@<X0>, uint64_t *a2@<X1>, double *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;

  v6 = *a2;
  v5 = a2[1];
  v7 = *((_DWORD *)a2 + 4);
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v23 = 134218496;
    v24 = v6;
    v25 = 2048;
    v26 = v5;
    v27 = 1024;
    v28 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#boundedregiongrange-estimator, Input time: %4.3f s, rssi: %3.1f, channel: %d", (uint8_t *)&v23, 0x1Cu);
  }
  v9 = a1[16];
  v10 = a1[15];
  if (v10 >= v9)
  {
    v12 = a1[14];
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v12) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100026E7C();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)sub_100026E90((uint64_t)(a1 + 16), v16);
    else
      v17 = 0;
    v18 = &v17[24 * v13];
    v19 = &v17[24 * v16];
    *(_QWORD *)v18 = v6;
    *((_QWORD *)v18 + 1) = v5;
    *((_DWORD *)v18 + 4) = v7;
    *((_DWORD *)v18 + 5) = 0;
    v11 = v18 + 24;
    v21 = (char *)a1[14];
    v20 = (char *)a1[15];
    if (v20 != v21)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v18 - 24) = v22;
        v18 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)a1[14];
    }
    a1[14] = v18;
    a1[15] = v11;
    a1[16] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *(_QWORD *)v10 = v6;
    *(_QWORD *)(v10 + 8) = v5;
    v11 = (char *)(v10 + 24);
    *(_DWORD *)(v10 + 16) = v7;
    *(_DWORD *)(v10 + 20) = 0;
  }
  a1[15] = v11;
  sub_1003265E0((uint64_t)a1);
  sub_100326654((uint64_t)a1);
  sub_100326764((uint64_t)a1, a3);
}

void sub_1003265E0(uint64_t a1)
{
  double *v1;
  double *v2;
  double v3;
  double v4;
  NSObject *v5;

  if (!*(_BYTE *)(a1 + 104))
  {
    v1 = *(double **)(a1 + 112);
    v2 = *(double **)(a1 + 120);
    if (v1 != v2)
    {
      v3 = *(v2 - 3) - *v1;
      v4 = *(double *)(a1 + 88);
      *(_BYTE *)(a1 + 104) = v3 >= v4;
      if (v3 >= v4)
      {
        v5 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003ED6AC(v5);
      }
    }
  }
}

void sub_100326654(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  __int128 v7;
  NSObject *v8;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = *(_QWORD *)(a1 + 120);
  v1 = (uint64_t **)(a1 + 112);
  if (v3 != v2)
  {
    v4 = *(double *)(v2 - 24);
    v5 = *(double *)(a1 + 96);
    if (v4 - *(double *)v3 >= v5)
    {
      while (v4 - *(double *)v3 <= v5)
      {
        v3 += 24;
        if (v3 == v2)
          goto LABEL_14;
      }
      if (v3 != v2)
      {
        v6 = v3 + 24;
        if (v3 + 24 != v2)
        {
          do
          {
            if (v4 - *(double *)v6 <= *(double *)(a1 + 96))
            {
              v7 = *(_OWORD *)v6;
              *(_QWORD *)(v3 + 16) = *(_QWORD *)(v6 + 16);
              *(_OWORD *)v3 = v7;
              v3 += 24;
            }
            v6 += 24;
          }
          while (v6 != v2);
          v2 = *(_QWORD *)(a1 + 120);
        }
        if (v3 != v2)
        {
          v2 = v3;
          *(_QWORD *)(a1 + 120) = v3;
        }
      }
LABEL_14:
      v8 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003ED6EC(v2, v1, v8);
    }
  }
}

void sub_100326764(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t (*v3)[4];
  double v4;
  void *__p;
  void *v6;
  uint64_t v7;

  *(_BYTE *)a2 = 0;
  *((_BYTE *)a2 + 80) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    v3 = off_100851DD0[*(int *)(a1 + 80)];
    v6 = 0;
    v7 = 0;
    __p = 0;
    sub_10016F900(&__p, *(const void **)(a1 + 112), *(_QWORD *)(a1 + 120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3));
    v4 = (*(double (**)(uint64_t (*)[4], void **))((*v3)[0] + 16))(v3, &__p);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    *a2 = v4;
    *((_BYTE *)a2 + 8) = 1;
    *((_BYTE *)a2 + 16) = 0;
    *((_BYTE *)a2 + 24) = 0;
    *((_BYTE *)a2 + 32) = 0;
    *((_BYTE *)a2 + 36) = 0;
    *((_BYTE *)a2 + 40) = 0;
    *((_BYTE *)a2 + 48) = 0;
    *((_BYTE *)a2 + 56) = 0;
    *((_BYTE *)a2 + 64) = 0;
    *((_BYTE *)a2 + 72) = 0;
    *((_BYTE *)a2 + 76) = 0;
    *((_BYTE *)a2 + 80) = 1;
  }
}

void sub_100326838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100326854()
{
  return 0;
}

void sub_100326864(_QWORD *a1)
{
  sub_100326940(a1);
  operator delete();
}

_QWORD *sub_100326888(_QWORD *a1)
{
  void *v2;

  *a1 = off_100816270;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  *a1 = off_1008165B8;
  sub_100152A44(a1 + 2);
  return a1;
}

void sub_1003268DC(_QWORD *a1)
{
  void *v2;

  *a1 = off_100816270;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  *a1 = off_1008165B8;
  sub_100152A44(a1 + 2);
  operator delete();
}

_QWORD *sub_100326940(_QWORD *a1)
{
  void *v2;

  *a1 = off_1008164F8;
  v2 = (void *)a1[37];
  if (v2)
  {
    a1[38] = v2;
    operator delete(v2);
  }
  *a1 = off_1008165B8;
  sub_100152A44(a1 + 2);
  return a1;
}

uint64_t sub_100326998()
{
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = xmmword_1004793A0;
  v9 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085DEB0, (int *)&v8, 3);
  xmmword_10085DEC8 = xmmword_10046E050;
  unk_10085DED8 = xmmword_10046E060;
  qword_10085DEF0 = 0;
  unk_10085DEF8 = 0;
  qword_10085DEE8 = 0x3FD999999999999ALL;
  unk_10085DF00 = xmmword_10046E070;
  dword_10085DF10 = 5;
  qword_10085DF18 = 0x4000000000000000;
  dword_10085DF20 = 5;
  byte_10085DF28 = 0;
  unk_10085DF2C = 0x30000000ALL;
  xmmword_10085DF38 = xmmword_10046E080;
  unk_10085DF48 = xmmword_10046E090;
  xmmword_10085DF58 = xmmword_10046E0A0;
  qword_10085DF68 = 0x3FE3333333333333;
  dword_10085DF70 = 3;
  xmmword_10085DF78 = xmmword_10046E0B0;
  unk_10085DF88 = xmmword_10046E090;
  xmmword_10085DF98 = xmmword_10046E080;
  qword_10085DFA8 = 0x3FE3333333333333;
  byte_10085DFB0 = 0;
  xmmword_10085DFB8 = xmmword_10046E0C0;
  unk_10085DFC8 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v6 = _Q0;
  xmmword_10085DFD8 = _Q0;
  qword_10085DFE8 = 0xBFD3333333333333;
  xmmword_10085DFF0 = xmmword_10046E0E0;
  qword_10085E000 = 0x3E99999A40000000;
  xmmword_10085E008 = xmmword_10046E060;
  qword_10085E020 = 0;
  unk_10085E028 = 0;
  qword_10085E018 = 0x3FD999999999999ALL;
  xmmword_10085E030 = xmmword_10046E070;
  dword_10085E040 = 5;
  qword_10085E048 = 0x4000000000000000;
  dword_10085E050 = 4;
  qword_10085E058 = 0x300000008;
  qword_10085E060 = 0xC04E800000000000;
  v7 = 0xC04E800000000000;
  sub_10018252C((uint64_t)algn_10085E068, (double *)&v7, 1);
  xmmword_10085E080 = xmmword_10046E0F0;
  qword_10085E090 = 0x4024000000000000;
  dword_10085E098 = 45;
  byte_10085E09C = 0;
  dword_10085E0A0 = 1;
  byte_10085E0A8 = 1;
  xmmword_10085E0B0 = xmmword_10046E100;
  unk_10085E0C0 = xmmword_10046E110;
  xmmword_10085E0D0 = v6;
  qword_10085E0E0 = 0xC059000000000000;
  xmmword_10085E0E8 = xmmword_10046E120;
  qword_10085E0F8 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085E100 = xmmword_10046E060;
  qword_10085E110 = 0x3FD999999999999ALL;
  qword_10085E120 = 0;
  qword_10085E118 = 0;
  xmmword_10085E128 = xmmword_10046E070;
  dword_10085E138 = 5;
  qword_10085E140 = 0x4000000000000000;
  dword_10085E148 = 10;
  qword_10085E150 = 0x4034000000000000;
  dword_10085E158 = 3;
  xmmword_10085E160 = xmmword_10046E130;
  return __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085DEB0, (void *)&_mh_execute_header);
}

void sub_100326C40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100326C60(uint64_t a1, int a2, int a3)
{
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  NSObject *v8;
  uint8_t buf[8];
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_100318FC8((_QWORD *)a1, (const void *)qword_10085E170, qword_10085E178, (qword_10085E178 - qword_10085E170) >> 4);
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 69) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 117) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = off_1008156E8;
  *(_QWORD *)(a1 + 216) = 0x100000003;
  *(_OWORD *)(a1 + 200) = xmmword_100478880;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  sub_10030DD0C((_DWORD *)(a1 + 192), 3, 1);
  sub_10030DD58(a1 + 192, 0.0);
  *(_QWORD *)(a1 + 288) = 0x100000004;
  *(_QWORD *)(a1 + 264) = off_100815778;
  *(_OWORD *)(a1 + 272) = xmmword_100478890;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  sub_10030DD0C((_DWORD *)(a1 + 264), 4, 1);
  sub_10030DD58(a1 + 264, 0.0);
  *(_QWORD *)(a1 + 360) = 0x300000003;
  *(_QWORD *)(a1 + 336) = off_100815730;
  *(_OWORD *)(a1 + 344) = xmmword_100478B80;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 496) = 0x100000003;
  *(_QWORD *)(a1 + 472) = off_1008156E8;
  *(_OWORD *)(a1 + 480) = xmmword_100478880;
  *(_QWORD *)(a1 + 504) = a1 + 512;
  *(_QWORD *)(a1 + 560) = 0x100000003;
  *(_QWORD *)(a1 + 536) = off_1008156E8;
  *(_OWORD *)(a1 + 544) = xmmword_100478880;
  *(_QWORD *)(a1 + 568) = a1 + 576;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_QWORD *)(a1 + 632) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 640) = xmmword_100478B40;
  *(_BYTE *)(a1 + 656) = 1;
  *(_QWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  v13 = 0x100000003;
  *(_QWORD *)buf = off_1008156E8;
  v12 = xmmword_100478880;
  v14 = &v15;
  sub_10030DD0C(buf, 3, 1);
  sub_10030DD58((uint64_t)buf, 0.0);
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 752) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  sub_10031895C(a1 + 776, (uint64_t)buf);
  v5 = 0;
  *(_QWORD *)(a1 + 880) = 0x100000003;
  *(_QWORD *)(a1 + 856) = off_1008156E8;
  *(_OWORD *)(a1 + 864) = xmmword_100478880;
  *(_QWORD *)(a1 + 888) = a1 + 896;
  *(_DWORD *)(a1 + 920) = 0x10000;
  *(_WORD *)(a1 + 924) = 257;
  *(_DWORD *)(a1 + 926) = 0;
  *(_DWORD *)(a1 + 929) = 0;
  *(_QWORD *)(a1 + 936) = 0x1000000032;
  *(_QWORD *)(a1 + 976) = 0x4018000000000000;
  *(_BYTE *)(a1 + 984) = 1;
  *(_DWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 944) = xmmword_100479460;
  *(_OWORD *)(a1 + 960) = xmmword_100479470;
  do
  {
    *(_QWORD *)sub_10030E194(a1 + 472, v5) = 0;
    *(_QWORD *)sub_10030E194(a1 + 536, v5++) = 0;
  }
  while (v5 != 3);
  sub_100327130((uint64_t *)(a1 + 664), 4uLL);
  v6 = &qword_10085E188;
  if (a2)
    v7 = &qword_10085E170;
  else
    v7 = &qword_10085E188;
  if (v7 != (uint64_t *)a1)
  {
    if (a2)
      v6 = &qword_10085E170;
    sub_1003192AC((char *)a1, (char *)*v7, v6[1], (v6[1] - *v7) >> 4);
  }
  *(_BYTE *)(a1 + 984) = a3;
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    LOWORD(v12) = 1024;
    *(_DWORD *)((char *)&v12 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,SyntheticApertureBatchFilter constructed. Strict box span requirement %d, third party behavior %d", buf, 0xEu);
  }
  return a1;
}

void sub_100327048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  a15 = (void **)(v15 + 712);
  sub_1002F1AA0(&a15);
  a15 = (void **)(v15 + 688);
  sub_1002F1AE0(&a15);
  sub_1002F1AA0(&a15);
  *(_QWORD *)(v15 + 536) = off_100807398;
  *(_QWORD *)(v15 + 472) = off_100807398;
  *(_QWORD *)(v15 + 336) = off_100807398;
  *v17 = off_100807398;
  *v16 = off_100807398;
  sub_1002F1B24(&a15);
  v20 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v15 + 144) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v15 + 96) = v21;
    operator delete(v21);
  }
  v22 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v15 + 48) = v22;
    operator delete(v22);
  }
  v23 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void sub_100327130(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *__p;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      sub_100026E7C();
    v5 = a1[1] - *a1;
    v13 = v3;
    __p = sub_10032EF8C(v3, a2);
    v10 = (char *)__p + v5;
    v11 = (char *)__p + v5;
    v12 = (char *)__p + 112 * v6;
    sub_10032EF18(a1, &__p);
    v7 = v10;
    v8 = v11;
    if (v11 != v10)
    {
      do
      {
        *((_QWORD *)v8 - 9) = off_100807398;
        v8 -= 112;
      }
      while (v8 != v7);
      v11 = v7;
    }
    if (__p)
      operator delete(__p);
  }
}

double sub_100327250@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double *v4;
  double result;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 927) || *(_BYTE *)(a1 + 926))
    goto LABEL_3;
  if (*(_BYTE *)(a1 + 920))
  {
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 624);
      v10 = 134217984;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Returning solution from AoA at %f s", (uint8_t *)&v10, 0xCu);
    }
    *a2 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)(a1 + 77);
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    sub_10030D950(a2 + 2, *(const void **)(a1 + 88), *(_QWORD *)(a1 + 96), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3));
    v4 = (double *)(a1 + 112);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 921))
    {
LABEL_3:
      *a2 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)(a1 + 29);
      a2[3] = 0;
      a2[4] = 0;
      a2[2] = 0;
      sub_10030D950(a2 + 2, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3));
      v4 = (double *)(a1 + 64);
      goto LABEL_4;
    }
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 848);
      v10 = 134217984;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Returning solution from straight path estimator at %f s", (uint8_t *)&v10, 0xCu);
    }
    *a2 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)(a1 + 125);
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    sub_10030D950(a2 + 2, *(const void **)(a1 + 136), *(_QWORD *)(a1 + 144), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3));
    v4 = (double *)(a1 + 160);
  }
LABEL_4:
  result = *v4;
  a2[5] = *(_QWORD *)v4;
  return result;
}

void sub_100327450(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  int v7;
  NSObject *v8;
  double v9;
  NSObject *v10;
  int v11;
  double v12;
  __int16 v13;
  double v14;

  *(double *)(a1 + 256) = a4;
  if (a3 - *(double *)(a1 + 608) <= 10.0 || *(_QWORD *)(a1 + 672) == *(_QWORD *)(a1 + 664))
  {
    if (*(_BYTE *)(a1 + 926))
    {
      *(_BYTE *)(a1 + 36) = 0;
      v7 = *(_DWORD *)(a1 + 32);
      sub_1003277B4(a1);
      if (v7 != *(_DWORD *)(a1 + 32))
      {
        v8 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Vertical state changed with the pose update", (uint8_t *)&v11, 2u);
        }
        *(_BYTE *)(a1 + 36) = 1;
      }
    }
  }
  else
  {
    sub_100327610(a1);
    *(_DWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 36) = 0;
    sub_10032EAB8((char *)(a1 + 40), 0, 0, 0);
    *(_QWORD *)(a1 + 64) = 0;
  }
  if (*(_BYTE *)(a1 + 920))
  {
    v9 = *(double *)(a1 + 624);
    if (a3 - v9 > 10.0)
    {
      *(_BYTE *)(a1 + 920) = 0;
      v10 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 134218240;
        v12 = v9;
        v13 = 2048;
        v14 = a3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,AoA Solution from AoA at %f s is no longer valid - current time is %f s", (uint8_t *)&v11, 0x16u);
      }
    }
  }
  sub_100327250(a1, a2);
}

void sub_100327610(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  void *v6;
  __int128 v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  NSObject *v14;
  __int16 v15[8];

  v2 = *(_QWORD *)(a1 + 672);
  for (i = *(_QWORD *)(a1 + 664); v2 != i; v2 -= 112)
    *(_QWORD *)(v2 - 72) = off_100807398;
  *(_QWORD *)(a1 + 672) = i;
  v4 = *(_QWORD *)(a1 + 696);
  for (j = *(_QWORD *)(a1 + 688); v4 != j; v4 -= 208)
  {
    *(_QWORD *)(v4 - 112) = off_100807398;
    *(_QWORD *)(v4 - 176) = off_100807398;
  }
  *(_QWORD *)(a1 + 696) = j;
  sub_10032AE7C(a1);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 29) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    operator delete(v6);
  }
  v7 = 0uLL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 77) = 0;
  if (v8)
  {
    *(_QWORD *)(a1 + 96) = v8;
    operator delete(v8);
    v7 = 0uLL;
  }
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 104) = v7;
  v9 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 125) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 144) = v9;
    operator delete(v9);
  }
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_QWORD *)(a1 + 632) = 0x3FF0000000000000;
  v10 = *(_QWORD **)(a1 + 168);
  v11 = *(_QWORD **)(a1 + 176);
  if (v11 != v10)
  {
    v12 = v11 - 24;
    do
    {
      v12[16] = off_100807398;
      *v12 = off_100807398;
      *(v12 - 14) = off_100807398;
      *(v12 - 22) = off_100807398;
      *(v12 - 30) = off_100807398;
      v13 = v12 - 30 == v10;
      v12 -= 54;
    }
    while (!v13);
  }
  *(_QWORD *)(a1 + 176) = v10;
  if (*(_BYTE *)(a1 + 656))
    *(_BYTE *)(a1 + 656) = 0;
  *(_WORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  v14 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Batch filter is reinitialized", (uint8_t *)v15, 2u);
  }
}

void sub_1003277B4(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  double *v25;
  double *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  double *v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *__p;
  double *v43;
  unint64_t v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE v49[40];

  *(_DWORD *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 932) = 0;
  if (*(_BYTE *)(a1 + 926))
  {
    v2 = *(_QWORD *)(a1 + 168);
    v47 = 0x100000003;
    v45 = off_1008156E8;
    v46 = xmmword_100478880;
    v48 = v49;
    sub_10030E2B4(v2, a1 + 192, (uint64_t)&v45);
    v3 = sub_10027C1A4((uint64_t)&v45, 0);
    v4 = sub_10027C1A4((uint64_t)&v45, 0);
    v5 = sub_10027C1A4((uint64_t)&v45, 2u);
    if (sqrt(v5 * sub_10027C1A4((uint64_t)&v45, 2u) + v3 * v4) <= 2.0)
    {
      v6 = *(_QWORD *)(a1 + 168);
      v7 = *(_QWORD *)(a1 + 176);
      if (v6 == v7)
      {
LABEL_15:
        *(_DWORD *)(a1 + 928) = 1;
      }
      else
      {
        while (1)
        {
          v8 = sub_10027C1DC(v6 + 128, 1, 1);
          v9 = sub_10027C1A4(v6, 1u);
          v10 = sqrt(v8);
          v11 = v9 - *(double *)(a1 + 256);
          v12 = v10 + v11;
          v13 = v11 - v10;
          if (v13 <= -2.5 && v12 >= -2.5)
            break;
          if (v13 <= 2.5 && v12 >= 2.5)
            break;
          v6 += 432;
          if (v6 == v7)
            goto LABEL_15;
        }
      }
    }
    v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 672) - *(_QWORD *)(a1 + 664)) >> 4);
    __p = 0;
    v43 = 0;
    v44 = 0;
    sub_100318614(&__p, v16);
    v17 = *(_QWORD *)(a1 + 664);
    v18 = *(_QWORD *)(a1 + 672);
    if (v17 != v18)
    {
      v19 = *(_QWORD *)(a1 + 168);
      do
      {
        v39 = 0x100000003;
        v37 = off_1008156E8;
        v38 = xmmword_100478880;
        v40 = &v41;
        sub_10030E2B4(v19, v17 + 40, (uint64_t)&v37);
        v20 = sub_10027C1A4((uint64_t)&v37, 0);
        v21 = sub_10027C1A4((uint64_t)&v37, 2u);
        if (*(_BYTE *)(a1 + 984) || sqrt(v21 * v21 + v20 * v20) <= 4.0)
        {
          v22 = sub_10027C1A4((uint64_t)&v37, 1u);
          v23 = v22;
          v24 = v43;
          if ((unint64_t)v43 >= v44)
          {
            v26 = (double *)__p;
            v27 = ((char *)v43 - (_BYTE *)__p) >> 3;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61)
              sub_100026E7C();
            v29 = v44 - (_QWORD)__p;
            if ((uint64_t)(v44 - (_QWORD)__p) >> 2 > v28)
              v28 = v29 >> 2;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v30 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              v31 = (char *)sub_10005538C((uint64_t)&v44, v30);
              v26 = (double *)__p;
              v24 = v43;
            }
            else
            {
              v31 = 0;
            }
            v32 = (double *)&v31[8 * v27];
            *v32 = v23;
            v25 = v32 + 1;
            while (v24 != v26)
            {
              v33 = *((_QWORD *)v24-- - 1);
              *((_QWORD *)v32-- - 1) = v33;
            }
            __p = v32;
            v43 = v25;
            v44 = (unint64_t)&v31[8 * v30];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v43 = v22;
            v25 = v24 + 1;
          }
          v43 = v25;
        }
        v17 += 112;
      }
      while (v17 != v18);
    }
    v34 = (double *)__p;
    if (__p != v43)
    {
      v49[31] = 0;
      v35 = sub_100137504((double *)__p, v43);
      if (*v36 - *v35 >= 0.5)
      {
        *(_DWORD *)(a1 + 928) = 2;
        *(_BYTE *)(a1 + 932) = 1;
      }
      v34 = (double *)__p;
    }
    if (v34)
    {
      v43 = v34;
      operator delete(v34);
    }
  }
}

void sub_100327AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100327B30(uint64_t **a1@<X1>, uint64_t *a2@<X8>)
{
  __int128 *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t *v10;
  BOOL v11;
  _QWORD *v12;
  BOOL v13;
  double v14;
  double v15;
  __int128 *v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t *v20;
  BOOL v21;
  _QWORD *v22;
  BOOL v23;
  double v24;
  __int128 *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  __int128 *v29;
  uint64_t *v30;
  BOOL v31;
  _QWORD *v32;
  BOOL v33;
  double v34;
  double v35;
  uint64_t v36;
  float v37;
  unsigned int v38;
  float v39;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  float v44;
  unsigned int v45;
  float v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD **v49;
  _QWORD *v50;
  _QWORD **v51;
  unsigned int v52;
  uint64_t *v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t *v60;
  uint64_t *v61;
  BOOL v62;
  uint64_t *v63;
  _QWORD *v64[2];
  __int128 *v65;
  __int128 *v66;
  unint64_t v67;

  v5 = *a1;
  v4 = (__int128 *)a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v63 = v5;
  v64[0] = v5;
  v6 = (char *)v4 - (char *)v5;
  if (v4 == (__int128 *)v5)
  {
    v5 = (uint64_t *)v4;
    v7 = (uint64_t *)v4;
    goto LABEL_27;
  }
  v7 = v5 + 14;
  v66 = (__int128 *)(v5 + 14);
  if (v5 + 14 == (uint64_t *)v4)
  {
    v7 = v5;
    goto LABEL_27;
  }
  if (sub_10032EC18(&v66, (uint64_t *)&v63))
  {
    v63 = v5 + 14;
    v8 = v5;
  }
  else
  {
    v64[0] = v5 + 14;
    v8 = v5 + 14;
    v7 = v5;
  }
  v9 = (__int128 *)(v5 + 28);
  if (v5 + 28 == (uint64_t *)v4)
    goto LABEL_26;
  v10 = v5 + 42;
  while (1)
  {
    v65 = (__int128 *)(v10 - 14);
    v66 = v9 + 7;
    if (v9 + 7 == v4)
      break;
    if (sub_10032EC18(&v66, (uint64_t *)&v65))
    {
      if (sub_10032EC18(&v66, (uint64_t *)&v63))
      {
        v63 = v10;
        v7 = v10;
      }
      v11 = sub_10032EC18(&v65, (uint64_t *)v64);
      v12 = v9;
      if (v11)
        goto LABEL_20;
    }
    else
    {
      if (sub_10032EC18(&v65, (uint64_t *)&v63))
      {
        v63 = v10 - 14;
        v7 = v10 - 14;
      }
      v13 = sub_10032EC18(&v66, (uint64_t *)v64);
      v12 = v10;
      if (v13)
        goto LABEL_20;
    }
    v64[0] = v12;
    v8 = v12;
LABEL_20:
    v9 += 14;
    v66 = v9;
    v10 += 28;
    if (v9 == v4)
      goto LABEL_26;
  }
  if (sub_10032EC18(&v65, (uint64_t *)&v63))
  {
    v7 = v10 - 14;
  }
  else if (!sub_10032EC18(&v65, (uint64_t *)v64))
  {
    v8 = v10 - 14;
  }
LABEL_26:
  v5 = v8;
LABEL_27:
  v14 = sub_10027C1A4((uint64_t)(v7 + 5), 0);
  v15 = sub_10027C1A4((uint64_t)(v5 + 5), 0);
  v17 = *a1;
  v16 = (__int128 *)a1[1];
  v63 = v17;
  v64[0] = v17;
  if (v17 == (uint64_t *)v16)
    goto LABEL_46;
  v18 = v17 + 14;
  v66 = (__int128 *)(v17 + 14);
  if (v17 + 14 == (uint64_t *)v16)
    goto LABEL_46;
  if (sub_10032ECCC(&v66, (uint64_t *)&v63))
  {
    v63 = v17 + 14;
  }
  else
  {
    v64[0] = v17 + 14;
    v18 = v17;
  }
  v19 = (__int128 *)(v17 + 28);
  if (v17 + 28 == (uint64_t *)v16)
  {
LABEL_45:
    v17 = v18;
    goto LABEL_46;
  }
  v20 = v17 + 42;
  while (2)
  {
    v17 = v20 - 14;
    v65 = (__int128 *)(v20 - 14);
    v66 = v19 + 7;
    if (v19 + 7 != v16)
    {
      if (sub_10032ECCC(&v66, (uint64_t *)&v65))
      {
        if (sub_10032ECCC(&v66, (uint64_t *)&v63))
        {
          v63 = v20;
          v18 = v20;
        }
        v21 = sub_10032ECCC(&v65, (uint64_t *)v64);
        v22 = v19;
        if (v21)
          goto LABEL_44;
      }
      else
      {
        if (sub_10032ECCC(&v65, (uint64_t *)&v63))
        {
          v63 = v20 - 14;
          v18 = v20 - 14;
        }
        v23 = sub_10032ECCC(&v66, (uint64_t *)v64);
        v22 = v20;
        if (v23)
        {
LABEL_44:
          v19 += 14;
          v66 = v19;
          v20 += 28;
          if (v19 == v16)
            goto LABEL_45;
          continue;
        }
      }
      v64[0] = v22;
      goto LABEL_44;
    }
    break;
  }
  if (!sub_10032ECCC(&v65, (uint64_t *)&v63))
  {
    sub_10032ECCC(&v65, (uint64_t *)v64);
    v17 = v18;
  }
LABEL_46:
  v24 = sub_10027C1A4((uint64_t)(v17 + 5), 1u);
  v26 = *a1;
  v25 = (__int128 *)a1[1];
  v63 = v26;
  v64[0] = v26;
  if (v26 == (uint64_t *)v25 || (v27 = v26 + 14, v66 = (__int128 *)(v26 + 14), v26 + 14 == (uint64_t *)v25))
  {
    v27 = v26;
    goto LABEL_73;
  }
  if (sub_10032ED80(&v66, (uint64_t *)&v63))
  {
    v63 = v26 + 14;
    v28 = v26;
  }
  else
  {
    v64[0] = v26 + 14;
    v28 = v26 + 14;
    v27 = v26;
  }
  v29 = (__int128 *)(v26 + 28);
  if (v26 + 28 == (uint64_t *)v25)
    goto LABEL_72;
  v30 = v26 + 42;
  while (2)
  {
    v65 = (__int128 *)(v30 - 14);
    v66 = v29 + 7;
    if (v29 + 7 != v25)
    {
      if (sub_10032ED80(&v66, (uint64_t *)&v65))
      {
        if (sub_10032ED80(&v66, (uint64_t *)&v63))
        {
          v63 = v30;
          v27 = v30;
        }
        v31 = sub_10032ED80(&v65, (uint64_t *)v64);
        v32 = v29;
        if (v31)
          goto LABEL_64;
      }
      else
      {
        if (sub_10032ED80(&v65, (uint64_t *)&v63))
        {
          v63 = v30 - 14;
          v27 = v30 - 14;
        }
        v33 = sub_10032ED80(&v66, (uint64_t *)v64);
        v32 = v30;
        if (v33)
        {
LABEL_64:
          v29 += 14;
          v66 = v29;
          v30 += 28;
          if (v29 == v25)
            goto LABEL_72;
          continue;
        }
      }
      v64[0] = v32;
      v28 = v32;
      goto LABEL_64;
    }
    break;
  }
  if (sub_10032ED80(&v65, (uint64_t *)&v63))
  {
    v27 = v30 - 14;
  }
  else if (!sub_10032ED80(&v65, (uint64_t *)v64))
  {
    v28 = v30 - 14;
  }
LABEL_72:
  v26 = v28;
LABEL_73:
  v34 = sub_10027C1A4((uint64_t)(v27 + 5), 2u);
  v35 = sub_10027C1A4((uint64_t)(v26 + 5), 2u);
  v64[0] = 0;
  v64[1] = 0;
  v63 = (uint64_t *)v64;
  if (-1227133513 * (v6 >> 4))
  {
    v36 = 0;
    v37 = ceil((v15 - v14) * 4.0);
    v38 = fmaxf(v37, 1.0);
    v39 = ceil((v35 - v34) * 4.0);
    v40 = fmaxf(v39, 1.0);
    do
    {
      v41 = sub_10027C1A4((uint64_t)&(*a1)[14 * v36 + 5], 0);
      v42 = sub_10027C1A4((uint64_t)&(*a1)[14 * v36 + 5], 1u);
      v43 = sub_10027C1A4((uint64_t)&(*a1)[14 * v36 + 5], 2u);
      v44 = ceil((v41 - v14) * 4.0) + -1.0;
      v45 = fmaxf(v44, 0.0);
      v46 = ceil((v42 - v24) * 4.0) + -1.0;
      *(float *)&v43 = ceil((v43 - v34) * 4.0) + -1.0;
      v47 = v45 + (fmaxf(*(float *)&v43, 0.0) + fmaxf(v46, 0.0) * v40) * v38;
      v48 = v64[0];
      if (!v64[0])
        goto LABEL_85;
      v49 = v64;
      do
      {
        v50 = v48;
        v51 = v49;
        v52 = *((_DWORD *)v48 + 7);
        if (v52 >= v47)
          v49 = (_QWORD **)v48;
        else
          ++v48;
        v48 = (_QWORD *)*v48;
      }
      while (v48);
      if (v49 == v64)
        goto LABEL_85;
      if (v52 < v47)
        v50 = v51;
      if (v47 >= *((_DWORD *)v50 + 7))
      {
        if (*(double *)&(*a1)[14 * v36 + 1] < *(double *)&(*a1)[14 * *((unsigned int *)v49 + 8) + 1])
          *((_DWORD *)v49 + 8) = v36;
      }
      else
      {
LABEL_85:
        v67 = __PAIR64__(v36, v47);
        sub_10032F088(&v63, (unsigned int *)&v67, (uint64_t *)&v67);
      }
      ++v36;
    }
    while (v36 != -1227133513 * (v6 >> 4));
    v53 = v63;
    if (v63 != (uint64_t *)v64)
    {
      v54 = a2[1];
      do
      {
        v55 = *((_DWORD *)v53 + 8);
        v56 = *a1;
        v57 = (uint64_t)&(*a1)[14 * v55];
        if (v54 >= a2[2])
        {
          v54 = sub_10032F140(a2, (__int128 *)v57);
        }
        else
        {
          v58 = *(_OWORD *)v57;
          v59 = *(_OWORD *)(v57 + 16);
          *(_QWORD *)(v54 + 32) = *(_QWORD *)(v57 + 32);
          *(_OWORD *)v54 = v58;
          *(_OWORD *)(v54 + 16) = v59;
          sub_10031895C(v54 + 40, (uint64_t)&v56[14 * v55 + 5]);
          *(_DWORD *)(v54 + 104) = v56[14 * v55 + 13];
          v54 += 112;
          a2[1] = v54;
        }
        a2[1] = v54;
        v60 = (uint64_t *)v53[1];
        if (v60)
        {
          do
          {
            v61 = v60;
            v60 = (uint64_t *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            v61 = (uint64_t *)v53[2];
            v62 = *v61 == (_QWORD)v53;
            v53 = v61;
          }
          while (!v62);
        }
        v53 = v61;
      }
      while (v61 != (uint64_t *)v64);
    }
  }
  sub_10003E3F0((uint64_t)&v63, v64[0]);
}

void sub_1003281E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1002F1AA0((void ***)va);
  _Unwind_Resume(a1);
}

double sub_100328248(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t i;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (**v35)();
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t (**v41)();
  __int128 v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t (**v46)();
  __int128 v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE v50[2464];
  uint64_t (**v51)();
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  memset(v40, 0, sizeof(v40));
  v3 = *a2;
  if (a2[1] == *a2)
  {
    v7 = 0.0;
  }
  else
  {
    v6 = 0;
    v7 = 0.0;
    do
    {
      v37 = 0x100000003;
      v35 = off_1008156E8;
      v36 = xmmword_100478880;
      v38 = &v39;
      v32 = 0x100000003;
      v30 = off_1008156E8;
      v31 = xmmword_100478880;
      v33 = &v34;
      v8 = *a3;
      v9 = 112 * v6;
      v10 = *(double *)(*a3 + 112 * v6 + 8);
      v11 = *(double *)(v3 + 112 * v6 + 8);
      v12 = 3.14159265
          - acos(((v11 + 0.1) * (v11 + 0.1) + (v10 - v11) * (v10 - v11) - (v10 + -0.1) * (v10 + -0.1))/ ((v11 + 0.1)* (v10 - v11 + v10 - v11)));
      if (v12 <= 1.0)
        v13 = 1.0;
      else
        v13 = 1.0 / v12;
      if (v10 <= v11)
        v14 = v8;
      else
        v14 = v3;
      sub_10030EC4C((uint64_t)&v35, v14 + v9 + 40);
      v15 = *a3;
      if (*(double *)(*a3 + v9 + 8) <= *(double *)(*a2 + v9 + 8))
        v15 = *a2;
      sub_10030EC4C((uint64_t)&v30, v15 + v9 + 40);
      v16 = *a2 + v9;
      v17 = *a3 + v9;
      if (*(double *)(v16 + 8) >= *(double *)(v17 + 8))
        v18 = *(double *)(v16 + 8);
      else
        v18 = *(double *)(v17 + 8);
      v27 = 0x100000003;
      v25 = off_1008156E8;
      v26 = xmmword_100478880;
      v28 = &v29;
      sub_10030E2B4((uint64_t)&v35, (uint64_t)&v30, (uint64_t)&v25);
      v53 = 0x100000003;
      v51 = off_1008156E8;
      v52 = xmmword_100478880;
      v54 = &v55;
      v48 = 0x100000134;
      v46 = off_1008157C0;
      v47 = xmmword_1004788A0;
      v49 = v50;
      v43 = 0x100000003;
      v41 = off_1008156E8;
      v42 = xmmword_100478880;
      v44 = &v45;
      sub_10030E510((uint64_t)&v25, (uint64_t)&v51, (uint64_t)&v46, (uint64_t)&v41, "2");
      v20 = v19;
      v48 = 0x100000003;
      v46 = off_1008156E8;
      v47 = xmmword_100478880;
      v49 = v50;
      sub_10030E2B4((uint64_t)&v35, (uint64_t)&v30, (uint64_t)&v46);
      v21 = 0;
      v7 = v7 + v13;
      do
      {
        v22 = *(double *)sub_10030E194((uint64_t)&v30, v21);
        *(double *)&v40[v21] = *(double *)&v40[v21]
                             + v13 * (v22 + v18 * *(double *)sub_10030E194((uint64_t)&v46, v21) / v20);
        ++v21;
      }
      while (v21 != 3);
      ++v6;
      v3 = *a2;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) > v6);
  }
  for (i = 0; i != 3; ++i)
    *(double *)&v40[i] = *(double *)&v40[i] / v7;
  return *(double *)v40;
}

void sub_1003285C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  double v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  __int128 *v39;
  uint64_t v40;
  double v41;
  __int128 *v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  NSObject *v55;
  uint64_t v56;
  _QWORD *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[3];
  uint64_t v90[3];
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t (**v97)();
  __int128 v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE v101[24];
  __int128 *v102;
  __int128 *v103;
  unint64_t v104;
  uint64_t *v105[3];
  uint64_t (**v106)();
  __int128 v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE v110[24];
  uint8_t *v111;
  __int128 v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE v115[24];
  uint8_t buf[24];
  uint64_t v117;
  _BYTE *v118;
  _BYTE v119[2464];

  v1 = *(_QWORD *)(a1 + 672);
  v2 = *(_QWORD *)(a1 + 664);
  v3 = 0x6DB6DB6DB6DB6DB7 * ((v1 - v2) >> 4);
  if (v3 >= 4)
  {
    v4 = a1;
    if (*(_BYTE *)(a1 + 922))
    {
      v5 = *(_QWORD *)(a1 + 720);
      for (i = *(_QWORD *)(a1 + 712); v5 != i; v5 -= 112)
        *(_QWORD *)(v5 - 72) = off_100807398;
      *(_QWORD *)(a1 + 720) = i;
      memset(v105, 0, sizeof(v105));
      sub_10032F2E0(v105, v2, v1, v3);
      sub_100327B30(v105, (uint64_t *)buf);
      v7 = (__int128 **)(v4 + 712);
      sub_10032F45C((char **)(v4 + 712));
      *(_OWORD *)(v4 + 712) = *(_OWORD *)buf;
      *(_QWORD *)(v4 + 728) = *(_QWORD *)&buf[16];
      memset(buf, 0, sizeof(buf));
      v111 = buf;
      sub_1002F1AA0((void ***)&v111);
      v111 = (uint8_t *)v105;
      sub_1002F1AA0((void ***)&v111);
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v8 = *(_QWORD *)(v4 + 720);
      if (v8 == *(_QWORD *)(v4 + 712))
      {
        v26 = *(_QWORD *)(v4 + 720);
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = v101;
        v12 = v115;
        v13 = v119;
        v8 = *(_QWORD *)(v4 + 712);
        do
        {
          v14 = *(_QWORD *)(v4 + 672) - 72;
          v99 = 0x100000003;
          v97 = off_1008156E8;
          v98 = xmmword_100478880;
          v100 = v11;
          sub_10030E2B4(v8 + v9 * 16 + 40, v14, (uint64_t)&v97);
          v113 = 0x100000003;
          v111 = (uint8_t *)off_1008156E8;
          v112 = xmmword_100478880;
          v114 = v12;
          v117 = 0x100000134;
          *(_QWORD *)buf = off_1008157C0;
          *(_OWORD *)&buf[8] = xmmword_1004788A0;
          v118 = v13;
          v108 = 0x100000003;
          v106 = off_1008156E8;
          v107 = xmmword_100478880;
          v109 = v110;
          sub_10030E510((uint64_t)&v97, (uint64_t)&v111, (uint64_t)buf, (uint64_t)&v106, "2");
          if (v15 < 2.0)
          {
            v16 = v13;
            v17 = v12;
            v18 = v11;
            v19 = v4;
            v20 = *v7;
            v21 = &(*v7)[v9];
            v22 = v103;
            if ((unint64_t)v103 >= v104)
            {
              v25 = (__int128 *)sub_10032F4B8((uint64_t *)&v102, v21);
            }
            else
            {
              v23 = *v21;
              v24 = v21[1];
              *((_QWORD *)v103 + 4) = *((_QWORD *)v21 + 4);
              *v22 = v23;
              v22[1] = v24;
              sub_10031895C((uint64_t)v22 + 40, (uint64_t)v21 + 40);
              *((_DWORD *)v22 + 26) = DWORD2(v20[v9 + 6]);
              v25 = v22 + 7;
            }
            v4 = v19;
            v12 = v17;
            v103 = v25;
            v11 = v18;
            v13 = v16;
          }
          ++v10;
          v26 = *(_QWORD *)(v4 + 720);
          v8 = *(_QWORD *)(v4 + 712);
          v9 += 7;
        }
        while (0x6DB6DB6DB6DB6DB7 * ((v26 - v8) >> 4) > v10);
      }
      if (v7 != &v102)
      {
        sub_10032F658((uint64_t)v7, v102, v103, 0x6DB6DB6DB6DB6DB7 * (v103 - v102));
        v26 = *(_QWORD *)(v4 + 720);
        v8 = *(_QWORD *)(v4 + 712);
      }
      v27 = 0x6DB6DB6DB6DB6DB7 * ((v26 - v8) >> 4);
      v28 = v27 - 2;
      if ((int)v27 >= 2)
      {
        if (v27 >= 4)
          v28 = 2;
        if (v28)
        {
          if (v28 == 1)
            v29 = v27;
          else
            v29 = ((int)v27 - 1) * (int)v27 / 2;
        }
        else
        {
          v29 = 1;
        }
        if (v27 >= 5)
        {
          v83 = v29;
          v82 = v4;
          v30 = 0;
          v94 = 0;
          v95 = 0;
          v85 = (v27 - 1);
          v96 = 0;
          v91 = 0;
          v92 = 0;
          v86 = (int)v27;
          v93 = 0;
          v84 = v27;
          v31 = 1;
          v88 = 112;
          do
          {
            v87 = v30 + 1;
            if (v30 + 1 < v86)
            {
              v32 = v84;
              v33 = v88;
              do
              {
                v34 = *v7;
                v35 = (double *)((char *)*v7 + v33);
                v36 = v35[1];
                v37 = *((double *)&(*v7)[7 * v30] + 1);
                if (vabdd_f64(3.14159265, acos(((v37 + 0.1) * (v37 + 0.1) + (v36 - v37) * (v36 - v37) - (v36 + -0.1) * (v36 + -0.1))/ ((v37 + 0.1)* (v36 - v37 + v36 - v37)))) < 1.22173048)
                {
                  v99 = 0x100000003;
                  v97 = off_1008156E8;
                  v98 = xmmword_100478880;
                  v100 = v101;
                  sub_10030E2B4((uint64_t)&v34[7 * v30 + 2] + 8, (uint64_t)(v35 + 5), (uint64_t)&v97);
                  v113 = 0x100000003;
                  v111 = (uint8_t *)off_1008156E8;
                  v112 = xmmword_100478880;
                  v114 = v115;
                  v117 = 0x100000134;
                  *(_QWORD *)buf = off_1008157C0;
                  *(_OWORD *)&buf[8] = xmmword_1004788A0;
                  v118 = v119;
                  v108 = 0x100000003;
                  v106 = off_1008156E8;
                  v107 = xmmword_100478880;
                  v109 = v110;
                  sub_10030E510((uint64_t)&v97, (uint64_t)&v111, (uint64_t)buf, (uint64_t)&v106, "2");
                  if (vabdd_f64(v38, fmax(v37, v36) - fmin(v37, v36)) < 0.1414)
                  {
                    v39 = *v7;
                    v40 = (uint64_t)&(*v7)[7 * v30 + 2] + 8;
                    v99 = 0x100000003;
                    v97 = off_1008156E8;
                    v98 = xmmword_100478880;
                    v100 = v101;
                    sub_10030E2B4(v40, (uint64_t)v39 + v33 + 40, (uint64_t)&v97);
                    v113 = 0x100000003;
                    v111 = (uint8_t *)off_1008156E8;
                    v112 = xmmword_100478880;
                    v114 = v115;
                    v117 = 0x100000134;
                    *(_QWORD *)buf = off_1008157C0;
                    *(_OWORD *)&buf[8] = xmmword_1004788A0;
                    v118 = v119;
                    v108 = 0x100000003;
                    v106 = off_1008156E8;
                    v107 = xmmword_100478880;
                    v109 = v110;
                    sub_10030E510((uint64_t)&v97, (uint64_t)&v111, (uint64_t)buf, (uint64_t)&v106, "2");
                    if (v41 > 0.25)
                    {
                      v42 = *v7;
                      v43 = (uint64_t)&(*v7)[7 * v30];
                      v44 = v95;
                      if (v95 >= v96)
                      {
                        v47 = sub_10032F4B8(&v94, (__int128 *)v43);
                      }
                      else
                      {
                        v45 = *(_OWORD *)v43;
                        v46 = *(_OWORD *)(v43 + 16);
                        *(_QWORD *)(v95 + 32) = *(_QWORD *)(v43 + 32);
                        *(_OWORD *)v44 = v45;
                        *(_OWORD *)(v44 + 16) = v46;
                        sub_10031895C(v44 + 40, (uint64_t)&v42[7 * v30 + 2] + 8);
                        *(_DWORD *)(v44 + 104) = DWORD2(v42[7 * v30 + 6]);
                        v47 = v44 + 112;
                      }
                      v95 = v47;
                      v48 = *v7;
                      v49 = (__int128 *)((char *)*v7 + v33);
                      v50 = v92;
                      if (v92 >= v93)
                      {
                        v53 = sub_10032F4B8(&v91, v49);
                      }
                      else
                      {
                        v51 = *v49;
                        v52 = v49[1];
                        *(_QWORD *)(v92 + 32) = *((_QWORD *)v49 + 4);
                        *(_OWORD *)v50 = v51;
                        *(_OWORD *)(v50 + 16) = v52;
                        sub_10031895C(v50 + 40, (uint64_t)v49 + 40);
                        *(_DWORD *)(v50 + 104) = *(_DWORD *)((char *)v48 + v33 + 104);
                        v53 = v50 + 112;
                      }
                      v92 = v53;
                    }
                  }
                }
                v33 += 112;
                --v32;
              }
              while (v31 != v32);
            }
            ++v31;
            v88 += 112;
            ++v30;
          }
          while (v87 != v85);
          v54 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v95 - v94) >> 4);
          if (v54 > 5 && (float)((float)((float)v54 / (float)v83) * 100.0) >= 70.0)
          {
            *(_BYTE *)(v82 + 921) = 1;
            *(_QWORD *)(v82 + 848) = *(_QWORD *)(v82 + 608);
            sub_10030EC4C(v82 + 856, v82 + 192);
            v55 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              v56 = *(_QWORD *)(v82 + 608);
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v56;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Straight path solution generated at %f s", buf, 0xCu);
            }
            *(_DWORD *)(v82 + 120) = 5;
            *(_BYTE *)(v82 + 124) = 1;
            *(_DWORD *)(v82 + 128) = 2;
            *(_BYTE *)(v82 + 132) = 0;
            *(_QWORD *)(v82 + 160) = 0;
            memset(v90, 0, sizeof(v90));
            sub_10032F2E0(v90, v94, v95, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v95 - v94) >> 4));
            memset(v89, 0, sizeof(v89));
            v57 = sub_10032F2E0(v89, v91, v92, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v92 - v91) >> 4));
            v58 = sub_100328248((uint64_t)v57, v90, v89);
            v60 = v59;
            v62 = v61;
            *(_QWORD *)buf = v89;
            sub_1002F1AA0((void ***)buf);
            *(_QWORD *)buf = v90;
            sub_1002F1AA0((void ***)buf);
            v63 = *(_QWORD *)(v82 + 152);
            v64 = *(_QWORD *)(v82 + 136);
            *(_QWORD *)(v82 + 144) = v64;
            if (v64 >= v63)
            {
              v66 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v63 - v64) >> 3);
              v67 = 2 * v66;
              if (2 * v66 <= 1)
                v67 = 1;
              if (v66 >= 0xC30C30C30C30C3)
                v68 = 0x186186186186186;
              else
                v68 = v67;
              v69 = (char *)sub_100027CF8(v82 + 152, v68);
              v71 = &v69[168 * v70];
              *(double *)v69 = v58;
              *((_QWORD *)v69 + 1) = v60;
              *((_QWORD *)v69 + 2) = v62;
              *((_QWORD *)v69 + 4) = 0;
              *((_QWORD *)v69 + 5) = 0;
              *((_QWORD *)v69 + 3) = 0x3F847AE147AE147CLL;
              *((_OWORD *)v69 + 3) = xmmword_100479480;
              *((_OWORD *)v69 + 4) = xmmword_100479490;
              *((_QWORD *)v69 + 10) = 0x3FF0000000000000;
              *(_OWORD *)(v69 + 88) = 0u;
              *(_OWORD *)(v69 + 104) = 0u;
              *(_OWORD *)(v69 + 120) = 0u;
              *(_OWORD *)(v69 + 136) = 0u;
              *((_QWORD *)v69 + 19) = 0;
              *((_DWORD *)v69 + 40) = 2;
              v65 = v69 + 168;
              v73 = *(char **)(v82 + 136);
              v72 = *(char **)(v82 + 144);
              if (v72 != v73)
              {
                do
                {
                  v74 = *(_OWORD *)(v72 - 168);
                  v75 = *(_OWORD *)(v72 - 152);
                  *(_OWORD *)(v69 - 136) = *(_OWORD *)(v72 - 136);
                  *(_OWORD *)(v69 - 152) = v75;
                  *(_OWORD *)(v69 - 168) = v74;
                  v76 = *(_OWORD *)(v72 - 120);
                  v77 = *(_OWORD *)(v72 - 104);
                  v78 = *(_OWORD *)(v72 - 88);
                  *(_OWORD *)(v69 - 72) = *(_OWORD *)(v72 - 72);
                  *(_OWORD *)(v69 - 88) = v78;
                  *(_OWORD *)(v69 - 104) = v77;
                  *(_OWORD *)(v69 - 120) = v76;
                  v79 = *(_OWORD *)(v72 - 56);
                  v80 = *(_OWORD *)(v72 - 40);
                  v81 = *(_OWORD *)(v72 - 24);
                  *((_DWORD *)v69 - 2) = *((_DWORD *)v72 - 2);
                  *(_OWORD *)(v69 - 24) = v81;
                  *(_OWORD *)(v69 - 40) = v80;
                  *(_OWORD *)(v69 - 56) = v79;
                  v69 -= 168;
                  v72 -= 168;
                }
                while (v72 != v73);
                v72 = *(char **)(v82 + 136);
              }
              *(_QWORD *)(v82 + 136) = v69;
              *(_QWORD *)(v82 + 144) = v65;
              *(_QWORD *)(v82 + 152) = v71;
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(double *)v64 = v58;
              *(_QWORD *)(v64 + 8) = v60;
              *(_QWORD *)(v64 + 16) = v62;
              *(_QWORD *)(v64 + 32) = 0;
              *(_QWORD *)(v64 + 40) = 0;
              *(_QWORD *)(v64 + 24) = 0x3F847AE147AE147CLL;
              *(_OWORD *)(v64 + 48) = xmmword_100479480;
              *(_OWORD *)(v64 + 64) = xmmword_100479490;
              *(_QWORD *)(v64 + 80) = 0x3FF0000000000000;
              *(_OWORD *)(v64 + 88) = 0u;
              *(_OWORD *)(v64 + 104) = 0u;
              *(_OWORD *)(v64 + 120) = 0u;
              *(_OWORD *)(v64 + 136) = 0u;
              *(_DWORD *)(v64 + 160) = 2;
              v65 = (char *)(v64 + 168);
              *(_QWORD *)(v64 + 152) = 0;
            }
            *(_QWORD *)(v82 + 144) = v65;
          }
          *(_QWORD *)buf = &v91;
          sub_1002F1AA0((void ***)buf);
          *(_QWORD *)buf = &v94;
          sub_1002F1AA0((void ***)buf);
        }
      }
      *(_QWORD *)buf = &v102;
      sub_1002F1AA0((void ***)buf);
    }
  }
}

void sub_100329050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  a39 = (void **)&a33;
  sub_1002F1AA0(&a39);
  a39 = (void **)&a36;
  sub_1002F1AA0(&a39);
  a39 = (void **)&a47;
  sub_1002F1AA0(&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_100329124(uint64_t result, char a2)
{
  *(_BYTE *)(result + 922) = a2;
  return result;
}

uint64_t sub_10032912C(uint64_t result, char a2, double a3)
{
  *(double *)(result + 456) = a3;
  *(_BYTE *)(result + 464) = a2;
  return result;
}

void sub_100329138(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  NSObject *v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  double v30;
  int v31;
  uint64_t v32;
  double v33;
  double v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  double v45;
  NSObject *v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t j;
  double v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *k;
  double *v57;
  double *v58;
  double *v59;
  double *v60;
  double v61;
  double v62;
  double *v63;
  double *v64;
  double v65;
  double v66;
  double v67;
  NSObject *v68;
  double v69;
  double v70;
  NSObject *v71;
  double v72;
  double v73;
  double v74;
  int v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  const char *v82;
  NSObject *v83;
  uint32_t v84;
  double v85;
  double v86;
  NSObject *v87;
  NSObject *v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  unint64_t v114;
  double v115;
  int v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  double v123;
  uint64_t v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  char *v131;
  _OWORD *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char *v147;
  uint64_t v148;
  _BOOL4 v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  void *__p;
  __int128 v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE v157[72];
  uint64_t (**v158)();
  __int128 v159;
  uint64_t v160;
  _BYTE *v161;
  _BYTE v162[72];
  uint64_t (**v163)();
  __int128 v164;
  uint64_t v165;
  _BYTE *v166;
  _BYTE v167[72];
  _BYTE v168[64];
  double *v169[3];
  uint64_t v170[3];
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _OWORD v174[2];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  _BYTE v184[13];
  __int128 __src;
  __int128 v186;
  uint64_t (**v187)();
  __int128 v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  _BYTE v192[112];
  uint64_t (**v193)();
  __int128 v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t (**v198)();
  __int128 v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t (**v203)();
  __int128 v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  _QWORD buf[4];
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;

  if (*(_BYTE *)(a1 + 927))
  {
    *(_BYTE *)(a1 + 927) = 0;
    if (*(_QWORD *)(a1 + 664) != *(_QWORD *)(a1 + 672))
      sub_100327610(a1);
  }
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 104);
  v200 = 0x100000003;
  v198 = off_1008156E8;
  v199 = xmmword_100478880;
  v201 = &v202;
  sub_10030DD0C(&v198, 3, 1);
  sub_10030DD58((uint64_t)&v198, 0.0);
  v195 = 0x100000004;
  v193 = off_100815778;
  v194 = xmmword_100478890;
  v196 = &v197;
  sub_10030DD0C(&v193, 4, 1);
  sub_10030DD58((uint64_t)&v193, 0.0);
  for (i = 0; i != 3; ++i)
  {
    v7 = a2 + 8 * i;
    v8 = *(_QWORD *)(v7 + 96);
    *(_QWORD *)sub_10030E194((uint64_t)&v198, i) = v8;
    v9 = *(_QWORD *)(v7 + 120);
    *(_QWORD *)sub_10030E194((uint64_t)&v193, i) = v9;
  }
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)sub_10030E194((uint64_t)&v193, 3u) = v10;
  sub_100359F98((uint64_t)&v193, (uint64_t)v192);
  buf[3] = 0x100000003;
  buf[0] = off_1008156E8;
  *(_OWORD *)&buf[1] = xmmword_100478880;
  *(_QWORD *)&v209 = (char *)&v209 + 8;
  sub_10030E3B0((uint64_t)v192, a1 + 472, (uint64_t)buf);
  v189 = 0x100000003;
  v187 = off_1008156E8;
  v188 = xmmword_100478880;
  v190 = &v191;
  sub_10030F0E0((uint64_t)&v198, (uint64_t)buf, (uint64_t)&v187);
  v152 = a1 + 192;
  sub_10030EC4C(a1 + 192, (uint64_t)&v198);
  sub_10030EC4C(a1 + 264, (uint64_t)&v193);
  sub_10030EC4C(a1 + 336, (uint64_t)v192);
  v11 = *(double *)a2;
  *(_QWORD *)(a1 + 608) = *(_QWORD *)a2;
  if (*(_BYTE *)(a1 + 920))
  {
    v12 = *(double *)(a1 + 624);
    if (v11 - v12 > 10.0)
    {
      *(_BYTE *)(a1 + 920) = 0;
      v13 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134218240;
        *(double *)((char *)buf + 4) = v12;
        WORD2(buf[1]) = 2048;
        *(double *)((char *)&buf[1] + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,AoA Solution from AoA at %f s is no longer valid - current time is %f s", (uint8_t *)buf, 0x16u);
      }
    }
  }
  if (*(_BYTE *)(a1 + 921))
  {
    v14 = *(double *)(a1 + 608) - *(double *)(a1 + 848);
    if (v14 >= 2.0 && (*(double *)(a1 + 456) < 2.0 || !*(_BYTE *)(a1 + 464)))
      goto LABEL_16;
    if (v14 >= 5.0)
    {
      v160 = 0x100000003;
      v158 = off_1008156E8;
      v159 = xmmword_100478880;
      v161 = v162;
      sub_10030E2B4((uint64_t)&v187, a1 + 856, (uint64_t)&v158);
      *((_QWORD *)&v174[1] + 1) = 0x100000003;
      *(_QWORD *)&v174[0] = off_1008156E8;
      *(_OWORD *)((char *)v174 + 8) = xmmword_100478880;
      *(_QWORD *)&v175 = (char *)&v175 + 8;
      buf[3] = 0x100000134;
      buf[0] = off_1008157C0;
      *(_OWORD *)&buf[1] = xmmword_1004788A0;
      *(_QWORD *)&v209 = (char *)&v209 + 8;
      v165 = 0x100000003;
      v163 = off_1008156E8;
      v164 = xmmword_100478880;
      v166 = v167;
      sub_10030E510((uint64_t)&v158, (uint64_t)v174, (uint64_t)buf, (uint64_t)&v163, "2");
      if (v15 > 1.0)
      {
LABEL_16:
        *(_BYTE *)(a1 + 921) = 0;
        v16 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *(_QWORD *)(a1 + 848);
          v18 = *(_QWORD *)(a1 + 608);
          LODWORD(buf[0]) = 134218240;
          *(_QWORD *)((char *)buf + 4) = v17;
          WORD2(buf[1]) = 2048;
          *(_QWORD *)((char *)&buf[1] + 6) = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Straight path solution at %f s is no longer valid - current time is %f s", (uint8_t *)buf, 0x16u);
        }
      }
    }
  }
  v19 = *(double *)(a2 + 16);
  if (v19 <= 0.0 || *(double *)(a2 + 8) < -1.0)
  {
    v20 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003ED790(a2, v20, v19);
    goto LABEL_142;
  }
  v21 = *(_QWORD *)(a1 + 672);
  if (v21 != *(_QWORD *)(a1 + 664))
  {
    v160 = 0x100000003;
    v158 = off_1008156E8;
    v159 = xmmword_100478880;
    v161 = v162;
    sub_10030E2B4((uint64_t)&v187, v21 - 72, (uint64_t)&v158);
    *((_QWORD *)&v174[1] + 1) = 0x100000003;
    *(_QWORD *)&v174[0] = off_1008156E8;
    *(_OWORD *)((char *)v174 + 8) = xmmword_100478880;
    *(_QWORD *)&v175 = (char *)&v175 + 8;
    buf[3] = 0x100000134;
    buf[0] = off_1008157C0;
    *(_OWORD *)&buf[1] = xmmword_1004788A0;
    *(_QWORD *)&v209 = (char *)&v209 + 8;
    v165 = 0x100000003;
    v163 = off_1008156E8;
    v164 = xmmword_100478880;
    v166 = v167;
    sub_10030E510((uint64_t)&v158, (uint64_t)v174, (uint64_t)buf, (uint64_t)&v163, "2");
    v23 = v22;
    v24 = *(double *)(a2 + 8);
    v25 = *(double *)(v21 - 104);
    v26 = v24 - v25;
    if (v24 - v25 <= 0.0)
    {
      if ((fabs(v26) - v23) / *(double *)(a2 + 16) > 6.0)
      {
        v28 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0]) = 134218496;
          *(double *)((char *)buf + 4) = v25;
          WORD2(buf[1]) = 2048;
          *(double *)((char *)&buf[1] + 6) = v24;
          HIWORD(buf[2]) = 2048;
          *(double *)&buf[3] = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter,nLoS->LoS event detected by the batch filter: Previous range %f m, Current range %f m, Distance travelled %f m", (uint8_t *)buf, 0x20u);
        }
        __p = 0;
        v154 = 0uLL;
        v29 = *(_QWORD *)(a1 + 664);
        if (v29 != *(_QWORD *)(a1 + 672))
        {
          do
          {
            v160 = 0x100000003;
            v158 = off_1008156E8;
            v159 = xmmword_100478880;
            v161 = v162;
            sub_10030E2B4((uint64_t)&v187, v29 + 40, (uint64_t)&v158);
            *((_QWORD *)&v174[1] + 1) = 0x100000003;
            *(_QWORD *)&v174[0] = off_1008156E8;
            *(_OWORD *)((char *)v174 + 8) = xmmword_100478880;
            *(_QWORD *)&v175 = (char *)&v175 + 8;
            buf[3] = 0x100000134;
            buf[0] = off_1008157C0;
            *(_OWORD *)&buf[1] = xmmword_1004788A0;
            *(_QWORD *)&v209 = (char *)&v209 + 8;
            v165 = 0x100000003;
            v163 = off_1008156E8;
            v164 = xmmword_100478880;
            v166 = v167;
            sub_10030E510((uint64_t)&v158, (uint64_t)v174, (uint64_t)buf, (uint64_t)&v163, "2");
            if ((*(double *)(v29 + 8) - *(double *)(a2 + 8) - v30) / *(double *)(a2 + 16) <= 6.0)
            {
              v29 += 112;
              v48 = *(_QWORD *)(a1 + 672);
            }
            else
            {
              v31 = 0;
              do
              {
                v32 = *(_QWORD *)(a1 + 688);
                if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 696) - v32) >> 4) <= (unint64_t)v31)
                  break;
                v33 = *(double *)(v32 + 208 * v31);
                v34 = *(double *)v29;
                if (v33 == *(double *)v29)
                {
                  v35 = (char *)v154;
                  if ((unint64_t)v154 >= *((_QWORD *)&v154 + 1))
                  {
                    v37 = (char *)__p;
                    v38 = (uint64_t)(v154 - (_QWORD)__p) >> 3;
                    v39 = v38 + 1;
                    if ((unint64_t)(v38 + 1) >> 61)
                      sub_100026E7C();
                    v40 = *((_QWORD *)&v154 + 1) - (_QWORD)__p;
                    if ((uint64_t)(*((_QWORD *)&v154 + 1) - (_QWORD)__p) >> 2 > v39)
                      v39 = v40 >> 2;
                    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                      v41 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v41 = v39;
                    if (v41)
                    {
                      v42 = (char *)sub_10005538C((uint64_t)&v154 + 8, v41);
                      v37 = (char *)__p;
                      v35 = (char *)v154;
                    }
                    else
                    {
                      v42 = 0;
                    }
                    v43 = &v42[8 * v38];
                    *(_QWORD *)v43 = v31;
                    v36 = v43 + 8;
                    while (v35 != v37)
                    {
                      v44 = *((_QWORD *)v35 - 1);
                      v35 -= 8;
                      *((_QWORD *)v43 - 1) = v44;
                      v43 -= 8;
                    }
                    __p = v43;
                    *(_QWORD *)&v154 = v36;
                    *((_QWORD *)&v154 + 1) = &v42[8 * v41];
                    if (v37)
                      operator delete(v37);
                  }
                  else
                  {
                    *(_QWORD *)v154 = v31;
                    v36 = v35 + 8;
                  }
                  *(_QWORD *)&v154 = v36;
                }
                else
                {
                  ++v31;
                }
              }
              while (v33 != v34);
              if (*(_BYTE *)(a1 + 920))
              {
                v45 = *(double *)(a1 + 624);
                if (*(double *)v29 == v45)
                {
                  *(_BYTE *)(a1 + 920) = 0;
                  v46 = qword_10085F520;
                  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0]) = 134217984;
                    *(double *)((char *)buf + 4) = v45;
                    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,AoA Solution from AoA at %f s is no longer valid due to multipath", (uint8_t *)buf, 0xCu);
                  }
                }
              }
              v47 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
              {
                v50 = *(double *)v29;
                v51 = *(_QWORD *)(v29 + 8);
                LODWORD(buf[0]) = 134218240;
                *(double *)((char *)buf + 4) = v50;
                WORD2(buf[1]) = 2048;
                *(_QWORD *)((char *)&buf[1] + 6) = v51;
                _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter,Removing measurement at time %f s with range %f m", (uint8_t *)buf, 0x16u);
              }
              sub_10032F7E8((__int128 *)(v29 + 112), *(__int128 **)(a1 + 672), v29);
              for (j = *(_QWORD *)(a1 + 672); j != v48; j -= 112)
                *(_QWORD *)(j - 72) = off_100807398;
              *(_QWORD *)(a1 + 672) = v48;
            }
          }
          while (v29 != v48);
          v52 = (char *)v154;
          if ((void *)v154 != __p)
          {
            v53 = *(_OWORD **)(a1 + 696);
            do
            {
              v54 = *((_QWORD *)v52 - 1);
              v52 -= 8;
              sub_10032F860((uint64_t)buf, (_OWORD *)(*(_QWORD *)(a1 + 688) + 208 * v54 + 208), v53, (_OWORD *)(*(_QWORD *)(a1 + 688) + 208 * v54));
              v53 = v55;
              for (k = *(_OWORD **)(a1 + 696); k != v55; k -= 13)
              {
                *((_QWORD *)k - 14) = off_100807398;
                *((_QWORD *)k - 22) = off_100807398;
              }
              *(_QWORD *)(a1 + 696) = v55;
            }
            while (v52 != __p);
          }
        }
        sub_10032AE7C(a1);
        v57 = *(double **)(a1 + 664);
        v58 = *(double **)(a1 + 672);
        if (v57 == v58)
        {
          *(_QWORD *)(a1 + 632) = 0x3FF0000000000000;
        }
        else
        {
          v59 = v57 + 14;
          v60 = *(double **)(a1 + 664);
          if (v57 + 14 != v58)
          {
            v60 = *(double **)(a1 + 664);
            do
            {
              if (v59[1] < v60[1])
                v60 = v59;
              v59 += 14;
            }
            while (v59 != v58);
          }
          v61 = fmax(v60[1], 1.0);
          if (v61 != *(double *)(a1 + 632))
          {
            *(double *)(a1 + 632) = v61;
            do
            {
              v62 = sub_10035A1DC(v57[1] / *(double *)(a1 + 632));
              v57[4] = v62;
              v57[2] = v57[1] / (v62 * v57[3]);
              v57 += 14;
            }
            while (v57 != v58);
          }
        }
        if (__p)
        {
          *(_QWORD *)&v154 = __p;
          operator delete(__p);
        }
      }
    }
    else if ((v26 - v23) / *(double *)(a2 + 16) > 6.0)
    {
      v27 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0]) = 134218496;
        *(double *)((char *)buf + 4) = v25;
        WORD2(buf[1]) = 2048;
        *(double *)((char *)&buf[1] + 6) = v24;
        HIWORD(buf[2]) = 2048;
        *(double *)&buf[3] = v23;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter,LoS->nLoS event detected by the batch filter: Previous range %f m, Current range %f m, Distance travelled %f m", (uint8_t *)buf, 0x20u);
      }
      goto LABEL_129;
    }
  }
  v63 = *(double **)(a1 + 664);
  v64 = *(double **)(a1 + 672);
  v65 = *(double *)(a2 + 8);
  if (v63 == v64)
  {
    v70 = fmax(v65, 1.0);
    *(double *)(a1 + 632) = v70;
    v71 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134217984;
      *(double *)((char *)buf + 4) = v70;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Minimum observed range initialized to %f m", (uint8_t *)buf, 0xCu);
    }
  }
  else
  {
    v66 = *(double *)(a1 + 632);
    if (v65 < v66 && v66 > 1.0)
    {
      v67 = fmax(v65, 1.0);
      *(double *)(a1 + 632) = v67;
      v68 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134217984;
        *(double *)((char *)buf + 4) = v67;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Minimum observed range changed to %f m", (uint8_t *)buf, 0xCu);
        v63 = *(double **)(a1 + 664);
        v64 = *(double **)(a1 + 672);
      }
      while (v63 != v64)
      {
        v69 = sub_10035A1DC(v63[1] / *(double *)(a1 + 632));
        v63[4] = v69;
        v63[2] = v63[1] / (v69 * v63[3]);
        v63 += 14;
      }
    }
  }
  v72 = sub_10035A1DC(*(double *)(a2 + 8) / *(double *)(a1 + 632));
  v73 = *(double *)(a2 + 8);
  if (v73 <= 10.0)
    v74 = 0.1;
  else
    v74 = *(double *)(a2 + 8) / 10.0 * 0.1;
  v75 = *(_DWORD *)(a2 + 24);
  buf[0] = *(_QWORD *)a2;
  *(double *)&buf[1] = v73;
  *(double *)&buf[2] = v73 / (v72 * v74);
  *(double *)&buf[3] = v74;
  *(double *)&v209 = v72;
  sub_10031895C((uint64_t)&v209 + 8, (uint64_t)&v187);
  DWORD2(v213) = v75;
  v76 = *(_QWORD *)(a1 + 672);
  if (v76 >= *(_QWORD *)(a1 + 680))
  {
    v79 = sub_10032F8D4((uint64_t *)(a1 + 664), (__int128 *)buf);
  }
  else
  {
    v77 = *(_OWORD *)buf;
    v78 = *(_OWORD *)&buf[2];
    *(_QWORD *)(v76 + 32) = v209;
    *(_OWORD *)v76 = v77;
    *(_OWORD *)(v76 + 16) = v78;
    sub_10031895C(v76 + 40, (uint64_t)&v209 + 8);
    *(_DWORD *)(v76 + 104) = DWORD2(v213);
    v79 = v76 + 112;
    *(_QWORD *)(a1 + 672) = v76 + 112;
  }
  *(_QWORD *)(a1 + 672) = v79;
  if (*(_BYTE *)(a2 + 88))
  {
    if (*(_BYTE *)(a2 + 80))
    {
      v80 = *(double *)(a2 + 72);
      if (v80 > 1.1)
      {
        v81 = qword_10085F520;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          goto LABEL_129;
        LODWORD(buf[0]) = 134217984;
        *(double *)((char *)buf + 4) = v80;
        v82 = "#sa_algo_batchfilter,AoA measurement rejected due to high multipath probability (%4.2f)";
        v83 = v81;
        v84 = 12;
        goto LABEL_104;
      }
    }
    v85 = *(double *)(a2 + 56);
    v86 = *(double *)(a2 + 64);
    if ((v86 < 450.0 || v85 < 0.0) && (v86 < 200.0 || v85 < 40.0))
    {
      v148 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_129;
      LODWORD(buf[0]) = 134218240;
      *(double *)((char *)buf + 4) = v86;
      WORD2(buf[1]) = 2048;
      *(double *)((char *)&buf[1] + 6) = v85;
      v82 = "#sa_algo_batchfilter,AoA measurement rejected due to low track score (%4.1f) or low sweep angle (%4.1f deg)";
      v83 = v148;
      v84 = 22;
LABEL_104:
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, v82, (uint8_t *)buf, v84);
      goto LABEL_129;
    }
    v87 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134218240;
      *(double *)((char *)buf + 4) = v86;
      WORD2(buf[1]) = 2048;
      *(double *)((char *)&buf[1] + 6) = v85;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,AoA measurement accepted: track score (%4.1f) and sweep angle (%4.1f deg)", (uint8_t *)buf, 0x16u);
    }
    *(_WORD *)(a1 + 920) = 1;
    *(_QWORD *)(a1 + 624) = *(_QWORD *)a2;
    buf[3] = 0x100000003;
    buf[0] = off_1008156E8;
    *(_OWORD *)&buf[1] = xmmword_100478880;
    *(_QWORD *)&v209 = (char *)&v209 + 8;
    sub_10030E3B0((uint64_t)v192, a1 + 536, (uint64_t)buf);
    *((_QWORD *)&v174[1] + 1) = 0x100000003;
    *(_QWORD *)&v174[0] = off_1008156E8;
    *(_OWORD *)((char *)v174 + 8) = xmmword_100478880;
    *(_QWORD *)&v175 = (char *)&v175 + 8;
    sub_10030F0E0((uint64_t)&v198, (uint64_t)buf, (uint64_t)v174);
    if (!*(_BYTE *)(a2 + 88))
      sub_10000BA44();
    sub_100359EB8((uint64_t)&v163, *(double *)(a2 + 8), *(double *)(a2 + 40) / 180.0 * 3.14159265, *(double *)(a2 + 32) / 180.0 * 3.14159265);
    buf[3] = 0x100000003;
    buf[0] = off_1008156E8;
    *(_OWORD *)&buf[1] = xmmword_100478880;
    *(_QWORD *)&v209 = (char *)&v209 + 8;
    sub_10030E3B0((uint64_t)v192, (uint64_t)&v163, (uint64_t)buf);
    v160 = 0x100000003;
    v158 = off_1008156E8;
    v159 = xmmword_100478880;
    v161 = v162;
    sub_10030F0E0((uint64_t)buf, (uint64_t)v174, (uint64_t)&v158);
    v88 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v89 = *(_QWORD *)(a1 + 624);
      v90 = sub_10027C1A4((uint64_t)&v158, 0);
      v91 = sub_10027C1A4((uint64_t)&v158, 1u);
      v92 = sub_10027C1A4((uint64_t)&v158, 2u);
      LODWORD(buf[0]) = 134218752;
      *(_QWORD *)((char *)buf + 4) = v89;
      WORD2(buf[1]) = 2048;
      *(double *)((char *)&buf[1] + 6) = v90;
      HIWORD(buf[2]) = 2048;
      *(double *)&buf[3] = v91;
      LOWORD(v209) = 2048;
      *(double *)((char *)&v209 + 2) = v92;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Solution from AoA is generated at %f s - device pos is [%f, %f, %f] m", (uint8_t *)buf, 0x2Au);
    }
    v93 = 0;
    *(_DWORD *)(a1 + 72) = 5;
    *(_BYTE *)(a1 + 76) = 1;
    *(_DWORD *)(a1 + 80) = 2;
    *(_BYTE *)(a1 + 84) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    v215 = 0u;
    v216 = 0u;
    v213 = 0u;
    v214 = 0u;
    v211 = 0u;
    v212 = 0u;
    v209 = 0u;
    v210 = 0u;
    memset(buf, 0, sizeof(buf));
    do
    {
      *(double *)&buf[v93] = sub_10027C1A4((uint64_t)&v158, v93);
      ++v93;
    }
    while (v93 != 3);
    buf[3] = 0x3F847AE147AE147CLL;
    v209 = 0uLL;
    v210 = xmmword_100479480;
    v211 = xmmword_100479490;
    *(_QWORD *)&v212 = 0x3FF0000000000000;
    LODWORD(v217) = 0;
    v94 = *(_QWORD *)(a1 + 104);
    v95 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 96) = v95;
    if (v95 >= v94)
    {
      v97 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v94 - v95) >> 3);
      v98 = 2 * v97;
      if (2 * v97 <= 1)
        v98 = 1;
      if (v97 >= 0xC30C30C30C30C3)
        v99 = 0x186186186186186;
      else
        v99 = v98;
      v100 = (char *)sub_100027CF8(a1 + 104, v99);
      v102 = &v100[168 * v101];
      *((_OWORD *)v100 + 6) = v213;
      *((_OWORD *)v100 + 5) = v212;
      *((_OWORD *)v100 + 4) = v211;
      *((_OWORD *)v100 + 3) = v210;
      *((_QWORD *)v100 + 20) = v217;
      *((_OWORD *)v100 + 9) = v216;
      *((_OWORD *)v100 + 8) = v215;
      *((_OWORD *)v100 + 7) = v214;
      *(_OWORD *)v100 = *(_OWORD *)buf;
      *((_OWORD *)v100 + 1) = *(_OWORD *)&buf[2];
      *((_OWORD *)v100 + 2) = v209;
      v96 = v100 + 168;
      v104 = *(char **)(a1 + 88);
      v103 = *(char **)(a1 + 96);
      if (v103 != v104)
      {
        do
        {
          v105 = *(_OWORD *)(v103 - 168);
          v106 = *(_OWORD *)(v103 - 152);
          *(_OWORD *)(v100 - 136) = *(_OWORD *)(v103 - 136);
          *(_OWORD *)(v100 - 152) = v106;
          *(_OWORD *)(v100 - 168) = v105;
          v107 = *(_OWORD *)(v103 - 120);
          v108 = *(_OWORD *)(v103 - 104);
          v109 = *(_OWORD *)(v103 - 88);
          *(_OWORD *)(v100 - 72) = *(_OWORD *)(v103 - 72);
          *(_OWORD *)(v100 - 88) = v109;
          *(_OWORD *)(v100 - 104) = v108;
          *(_OWORD *)(v100 - 120) = v107;
          v110 = *(_OWORD *)(v103 - 56);
          v111 = *(_OWORD *)(v103 - 40);
          v112 = *(_OWORD *)(v103 - 24);
          *((_DWORD *)v100 - 2) = *((_DWORD *)v103 - 2);
          *(_OWORD *)(v100 - 24) = v112;
          *(_OWORD *)(v100 - 40) = v111;
          *(_OWORD *)(v100 - 56) = v110;
          v100 -= 168;
          v103 -= 168;
        }
        while (v103 != v104);
        v103 = *(char **)(a1 + 88);
      }
      *(_QWORD *)(a1 + 88) = v100;
      *(_QWORD *)(a1 + 96) = v96;
      *(_QWORD *)(a1 + 104) = v102;
      if (v103)
        operator delete(v103);
    }
    else
    {
      *(_OWORD *)(v95 + 112) = v214;
      *(_OWORD *)(v95 + 128) = v215;
      *(_OWORD *)(v95 + 144) = v216;
      *(_QWORD *)(v95 + 160) = v217;
      *(_OWORD *)(v95 + 48) = v210;
      *(_OWORD *)(v95 + 64) = v211;
      *(_OWORD *)(v95 + 80) = v212;
      *(_OWORD *)(v95 + 96) = v213;
      *(_OWORD *)v95 = *(_OWORD *)buf;
      *(_OWORD *)(v95 + 16) = *(_OWORD *)&buf[2];
      *(_OWORD *)(v95 + 32) = v209;
      v96 = (char *)(v95 + 168);
    }
    *(_QWORD *)(a1 + 96) = v96;
  }
LABEL_129:
  if ((*(_BYTE *)(a1 + 924) || *(_BYTE *)(a1 + 925))
    && (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 672) - *(_QWORD *)(a1 + 664)) >> 4)) >= 4)
  {
    sub_10032AF04(a1);
  }
  v113 = *(_QWORD *)(a1 + 672) - *(_QWORD *)(a1 + 664);
  v114 = 0x6DB6DB6DB6DB6DB7 * (v113 >> 4);
  if (v114 >= 4
    && !*(_BYTE *)(a1 + 924)
    && !*(_BYTE *)(a1 + 925)
    && *(double *)(a1 + 608) - *(double *)(a1 + 616) >= 0.5)
  {
    v149 = sub_10032B0AC(a1);
    *(_BYTE *)(a1 + 926) = v149;
    if (v149)
    {
      *(_QWORD *)(a1 + 616) = *(_QWORD *)(a1 + 608);
      sub_1003277B4(a1);
      *(_BYTE *)(a1 + 921) = 0;
      goto LABEL_142;
    }
LABEL_141:
    sub_1003285C0(a1);
    goto LABEL_142;
  }
  if (v113 == 112)
  {
    v115 = *(double *)(a1 + 608);
    *(double *)(a1 + 600) = v115;
    *(double *)(a1 + 616) = v115 + -0.5;
    goto LABEL_142;
  }
  if (v114 >= 5 && !*(_BYTE *)(a1 + 926))
    goto LABEL_141;
LABEL_142:
  *(_DWORD *)v184 = 0;
  v184[4] = 0;
  *(_DWORD *)&v184[8] = 0;
  __src = 0u;
  v186 = 0u;
  v184[12] = 0;
  if (*(_BYTE *)(a1 + 927))
  {
    v116 = 6;
LABEL_144:
    *(_DWORD *)v184 = v116;
    goto LABEL_145;
  }
  if (*(_BYTE *)(a1 + 924))
  {
    if (!*(_BYTE *)(a1 + 925))
    {
      v116 = 1;
      goto LABEL_144;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 925))
    {
      v117 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v118 = *(_QWORD *)(a1 + 640);
        LODWORD(buf[0]) = 134217984;
        *(_QWORD *)((char *)buf + 4) = v118;
        _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Linear user path length is %4.2f m", (uint8_t *)buf, 0xCu);
      }
      if (*(double *)(a1 + 640) >= 1.5)
        v116 = 3;
      else
        v116 = 2;
      goto LABEL_144;
    }
    if (!*(_BYTE *)(a1 + 926))
    {
      v116 = 4;
      goto LABEL_144;
    }
    *(_DWORD *)v184 = 5;
    *(_DWORD *)&v184[8] = *(_DWORD *)(a1 + 928);
    v184[4] = *(_DWORD *)&v184[8] == 2;
    v119 = *(_QWORD *)(a1 + 168);
    v151 = *(_QWORD *)(a1 + 176);
    if (v119 != v151)
    {
      v150 = a3;
      do
      {
        v120 = 0;
        v181 = 0u;
        v182 = 0u;
        v179 = 0u;
        v180 = 0u;
        v177 = 0u;
        v178 = 0u;
        v175 = 0u;
        v176 = 0u;
        memset(v174, 0, sizeof(v174));
        LODWORD(v183) = 1;
        do
        {
          *((_QWORD *)v174 + v120) = *(_QWORD *)sub_10030E194(v119, v120);
          ++v120;
        }
        while (v120 != 3);
        *((_QWORD *)&v174[1] + 1) = *(_QWORD *)sub_10030E274(v119 + 128, 0, 0);
        *(_QWORD *)&v175 = *(_QWORD *)sub_10030E274(v119 + 128, 0, 1);
        *((_QWORD *)&v175 + 1) = *(_QWORD *)sub_10030E274(v119 + 128, 0, 2);
        *(_QWORD *)&v176 = *(_QWORD *)sub_10030E274(v119 + 128, 1, 1);
        *((_QWORD *)&v176 + 1) = *(_QWORD *)sub_10030E274(v119 + 128, 1, 2);
        *(_QWORD *)&v177 = *(_QWORD *)sub_10030E274(v119 + 128, 2, 2);
        v121 = *(_DWORD *)(v119 + 136);
        if (v121 != *(_DWORD *)(v119 + 140))
          __assert_rtn("Trace", "cnmatrixbase.h", 4977, "A.NumRows() == A.NumCols()");
        if (v121 < 1)
        {
          v123 = 0.0;
        }
        else
        {
          v122 = 0;
          v123 = 0.0;
          do
          {
            v123 = v123 + sub_100319720(v119 + 128, v122, v122);
            ++v122;
          }
          while (v121 != v122);
        }
        v124 = *(_QWORD *)(v119 + 352);
        *((_QWORD *)&v177 + 1) = sqrt(v123);
        *(_QWORD *)&v178 = v124;
        LODWORD(v183) = *(_DWORD *)(v119 + 360);
        v155 = 0x100000003;
        __p = off_1008156E8;
        v154 = xmmword_100478880;
        v156 = v157;
        sub_10030E2B4(v119 + 368, v152, (uint64_t)&__p);
        v165 = 0x100000003;
        v163 = off_1008156E8;
        v164 = xmmword_100478880;
        v166 = v167;
        buf[3] = 0x100000134;
        buf[0] = off_1008157C0;
        *(_OWORD *)&buf[1] = xmmword_1004788A0;
        *(_QWORD *)&v209 = (char *)&v209 + 8;
        v160 = 0x100000003;
        v158 = off_1008156E8;
        v159 = xmmword_100478880;
        v161 = v162;
        sub_10030E510((uint64_t)&__p, (uint64_t)&v163, (uint64_t)buf, (uint64_t)&v158, "2");
        if (v125 != 0.0)
        {
          v172 = 0;
          v171 = 0;
          v173 = 0;
          memset(v170, 0, sizeof(v170));
          memset(v169, 0, sizeof(v169));
          sub_10032C3D4(&v171, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 672) - *(_QWORD *)(a1 + 664)) >> 4));
          sub_10030EC4C(v119 + 368, v152);
          buf[3] = 0x100000003;
          buf[0] = off_1008156E8;
          *(_OWORD *)&buf[1] = xmmword_100478880;
          *(_QWORD *)&v209 = (char *)&v209 + 8;
          sub_10030E2B4(v119, v152, (uint64_t)buf);
          sub_100359D78((uint64_t)buf, (uint64_t)v168);
          sub_10030EC4C(v119 + 64, (uint64_t)v168);
          sub_10032C4EC(v126, (uint64_t)v168, v152, (double **)(a1 + 664), v169, &v171, v170);
          v165 = 0x300000003;
          v163 = off_100815730;
          v164 = xmmword_100478B80;
          v166 = v167;
          sub_10030DD0C(&v163, 3, 3);
          sub_10030DD58((uint64_t)&v163, 0.0);
          v127 = v171;
          v128 = v172;
          while (v127 != v128)
          {
            v160 = 0x300000003;
            v158 = off_100815730;
            v159 = xmmword_100478B80;
            v161 = v162;
            sub_10030E3B0(v127 + 72, v127 + 8, (uint64_t)&v158);
            buf[3] = 0x300000003;
            buf[0] = off_100815730;
            *(_OWORD *)&buf[1] = xmmword_100478B80;
            *(_QWORD *)&v209 = (char *)&v209 + 8;
            sub_10030F0E0((uint64_t)&v163, (uint64_t)&v158, (uint64_t)buf);
            sub_10030EC4C((uint64_t)&v163, (uint64_t)buf);
            v127 += 136;
          }
          sub_100318AC8((uint64_t)&v158, (uint64_t)&v163);
          v155 = 0x300000003;
          __p = off_100815730;
          v154 = xmmword_100478B80;
          v156 = v157;
          v205 = 0x100000003;
          v203 = off_1008163B8;
          v204 = xmmword_100478880;
          v206 = &v207;
          buf[3] = 0x10000000CLL;
          buf[0] = off_100816400;
          *(_OWORD *)&buf[1] = xmmword_1004794A0;
          *(_QWORD *)&v209 = (char *)&v209 + 8;
          sub_10031C6D8((uint64_t)&v158, (uint64_t)&v203, (uint64_t)buf, (uint64_t)&__p);
        }
        *((_QWORD *)&v178 + 1) = *(_QWORD *)sub_10030E194(v119 + 64, 0);
        *(_QWORD *)&v179 = *(_QWORD *)sub_10030E194(v119 + 64, 1u);
        *((_QWORD *)&v179 + 1) = *(_QWORD *)sub_10030E194(v119 + 64, 2u);
        *(_QWORD *)&v180 = sqrt(*(double *)sub_10030E274(v119 + 240, 0, 0));
        *((_QWORD *)&v180 + 1) = sqrt(*(double *)sub_10030E274(v119 + 240, 1, 1));
        v129 = 0;
        *(_QWORD *)&v181 = sqrt(*(double *)sub_10030E274(v119 + 240, 2, 2));
        do
        {
          *((_QWORD *)&v181 + v129 + 1) = *(_QWORD *)sub_10030E194(v119 + 368, v129);
          ++v129;
        }
        while (v129 != 3);
        v130 = (_OWORD *)*((_QWORD *)&__src + 1);
        if (*((_QWORD *)&__src + 1) >= (unint64_t)v186)
        {
          v132 = (_OWORD *)__src;
          v133 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 3);
          v134 = v133 + 1;
          if (v133 + 1 > 0x186186186186186)
            sub_100026E7C();
          if (0x9E79E79E79E79E7ALL * ((uint64_t)(v186 - __src) >> 3) > v134)
            v134 = 0x9E79E79E79E79E7ALL * ((uint64_t)(v186 - __src) >> 3);
          if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v186 - __src) >> 3) >= 0xC30C30C30C30C3)
            v135 = 0x186186186186186;
          else
            v135 = v134;
          if (v135)
          {
            v136 = (char *)sub_100027CF8((uint64_t)&v186, v135);
            v130 = (_OWORD *)*((_QWORD *)&__src + 1);
            v132 = (_OWORD *)__src;
          }
          else
          {
            v136 = 0;
          }
          v137 = &v136[168 * v133];
          *((_OWORD *)v137 + 7) = v180;
          *((_OWORD *)v137 + 8) = v181;
          *((_OWORD *)v137 + 9) = v182;
          *((_QWORD *)v137 + 20) = v183;
          *((_OWORD *)v137 + 3) = v176;
          *((_OWORD *)v137 + 4) = v177;
          *((_OWORD *)v137 + 5) = v178;
          *((_OWORD *)v137 + 6) = v179;
          *(_OWORD *)v137 = v174[0];
          *((_OWORD *)v137 + 1) = v174[1];
          *((_OWORD *)v137 + 2) = v175;
          if (v130 == v132)
          {
            v147 = &v136[168 * v133];
          }
          else
          {
            v138 = &v136[168 * v133];
            do
            {
              v139 = *(_OWORD *)((char *)v130 - 168);
              v140 = *(_OWORD *)((char *)v130 - 152);
              *(_OWORD *)(v138 - 136) = *(_OWORD *)((char *)v130 - 136);
              *(_OWORD *)(v138 - 152) = v140;
              *(_OWORD *)(v138 - 168) = v139;
              v141 = *(_OWORD *)((char *)v130 - 120);
              v142 = *(_OWORD *)((char *)v130 - 104);
              v143 = *(_OWORD *)((char *)v130 - 88);
              *(_OWORD *)(v138 - 72) = *(_OWORD *)((char *)v130 - 72);
              *(_OWORD *)(v138 - 88) = v143;
              *(_OWORD *)(v138 - 104) = v142;
              *(_OWORD *)(v138 - 120) = v141;
              v144 = *(_OWORD *)((char *)v130 - 56);
              v145 = *(_OWORD *)((char *)v130 - 40);
              v146 = *(_OWORD *)((char *)v130 - 24);
              v147 = v138 - 168;
              *((_DWORD *)v138 - 2) = *((_DWORD *)v130 - 2);
              *(_OWORD *)(v138 - 24) = v146;
              *(_OWORD *)(v138 - 40) = v145;
              *(_OWORD *)(v138 - 56) = v144;
              v130 = (_OWORD *)((char *)v130 - 168);
              v138 -= 168;
            }
            while (v130 != v132);
          }
          v131 = v137 + 168;
          *(_QWORD *)&__src = v147;
          *((_QWORD *)&__src + 1) = v137 + 168;
          *(_QWORD *)&v186 = &v136[168 * v135];
          a3 = v150;
          if (v132)
            operator delete(v132);
        }
        else
        {
          *(_OWORD *)(*((_QWORD *)&__src + 1) + 112) = v180;
          v130[8] = v181;
          v130[9] = v182;
          *((_QWORD *)v130 + 20) = v183;
          v130[3] = v176;
          v130[4] = v177;
          v130[5] = v178;
          v130[6] = v179;
          *v130 = v174[0];
          v130[1] = v174[1];
          v130[2] = v175;
          v131 = (char *)v130 + 168;
          a3 = v150;
        }
        *((_QWORD *)&__src + 1) = v131;
        if (!*(_BYTE *)(a1 + 656))
          sub_10000BA44();
        *((_QWORD *)&v186 + 1) = *(_QWORD *)(a1 + 648);
        v119 += 432;
      }
      while (v119 != v151);
    }
  }
LABEL_145:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)v184;
  *(_QWORD *)(a1 + 29) = *(_QWORD *)&v184[5];
  if ((_BYTE *)(a1 + 24) != v184)
    sub_10032EAB8((char *)(a1 + 40), (char *)__src, *((uint64_t *)&__src + 1), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 3));
  *(_QWORD *)(a1 + 64) = *((_QWORD *)&v186 + 1);
  sub_100327250(a1, a3);
  if ((_QWORD)__src)
  {
    *((_QWORD *)&__src + 1) = __src;
    operator delete((void *)__src);
  }
}

void sub_10032AD60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10032AE7C(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 923) = 65792;
  *(_BYTE *)(a1 + 932) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  v1 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Batch filter is reset", v2, 2u);
  }
}

void sub_10032AF04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  double *v10;
  double *v11;
  BOOL v12;
  double v13;
  int v14;
  BOOL v15;
  char v16;
  double v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;
  void (**v21)();
  int v22;
  _OWORD v23[2];
  uint64_t v24;
  void (**v25)();
  int v26;

  v1 = *(_QWORD *)(a1 + 664);
  v2 = *(_QWORD *)(a1 + 672);
  if (v1 != v2)
  {
    if (v1 + 112 != v2)
    {
      v4 = v1 + 152;
      do
      {
        v5 = *(_OWORD *)v1;
        v6 = *(_OWORD *)(v1 + 16);
        v24 = *(_QWORD *)(v1 + 32);
        v23[1] = v6;
        v23[0] = v5;
        sub_10031895C((uint64_t)&v25, v1 + 40);
        v26 = *(_DWORD *)(v1 + 104);
        v7 = *(_OWORD *)(v4 - 40);
        v8 = *(_OWORD *)(v4 - 24);
        v20 = *(_QWORD *)(v4 - 8);
        v19[0] = v7;
        v19[1] = v8;
        sub_10031895C((uint64_t)&v21, v4);
        v22 = *(_DWORD *)(v4 + 64);
        v21 = off_100807398;
        v25 = off_100807398;
        if (*((double *)v23 + 1) < *((double *)v19 + 1))
          v1 = v4 - 40;
        v9 = v4 + 72;
        v4 += 112;
      }
      while (v9 != v2);
    }
    v10 = *(double **)a1;
    v11 = *(double **)(a1 + 8);
    if (*(double **)a1 != v11)
    {
      v12 = 0;
      v13 = *(double *)(v1 + 8);
      do
      {
        if (v12)
        {
          v12 = 1;
        }
        else
        {
          LOBYTE(v19[0]) = 1;
          v18 = 0;
          *(_QWORD *)&v23[0] = 0;
          sub_10032E2E8(*v10, v10[1], a1, (uint64_t *)(a1 + 664), (BOOL *)v19, &v18, (double *)v23);
          v14 = LOBYTE(v19[0]);
          if (*(_BYTE *)(a1 + 924))
            v15 = LOBYTE(v19[0]) == 0;
          else
            v15 = 1;
          v16 = !v15;
          *(_BYTE *)(a1 + 924) = v16;
          if (!v14)
          {
            if (!v18)
            {
              *(_BYTE *)(a1 + 925) = 0;
              return;
            }
            v17 = *(double *)(a1 + 640);
            if (v17 < *(double *)v23)
              v17 = *(double *)v23;
            *(double *)(a1 + 640) = v17;
          }
          v12 = v13 <= v10[1];
        }
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
}

BOOL sub_10032B0AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  double v7;
  double v8;
  _BOOL8 v9;
  uint64_t i;
  double v11;
  unsigned int j;
  double v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  char *v35;
  double v36;
  double *v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  double *v41;
  double v42;
  double v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t (**v57)();
  __int128 v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE v61[72];
  uint64_t (**v62)();
  __int128 v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE v66[72];
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t (**v70)();
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE buf[24];
  uint64_t v85;
  _BYTE *v86;
  _BYTE v87[32];

  v1 = *(_QWORD *)(a1 + 672);
  v2 = *(_QWORD *)(a1 + 664);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v1 - v2) >> 4)) >= 4)
  {
    v82 = 0;
    v81 = 0;
    v83 = 0;
    v4 = *(_QWORD *)(a1 + 168);
    v56 = (uint64_t *)(a1 + 168);
    v5 = *(_QWORD *)(a1 + 176);
    if (*(_BYTE *)(a1 + 926))
      v6 = 0;
    else
      v6 = v4 == v5;
    if (v6)
    {
      if (v2 != v1)
      {
        for (i = v2 + 112; i != v1; i += 112)
        {
          if (*(double *)(i + 8) < *(double *)(v2 + 8))
            v2 = i;
        }
      }
      if (*(double *)(v2 + 8) >= 0.5)
        v11 = *(double *)(v2 + 8);
      else
        v11 = 0.5;
      sub_10031895C((uint64_t)buf, v2 + 40);
      for (j = 0; j != 3; ++j)
      {
        sub_10031895C((uint64_t)&v62, (uint64_t)buf);
        sub_10031895C((uint64_t)&v57, (uint64_t)buf);
        v13 = *(double *)sub_10030E194((uint64_t)&v62, j);
        *(double *)sub_10030E194((uint64_t)&v62, j) = v11 + v13;
        v14 = *(double *)sub_10030E194((uint64_t)&v57, j);
        *(double *)sub_10030E194((uint64_t)&v57, j) = v14 - v11;
        sub_10031680C(&v81, (uint64_t)&v62);
        sub_10031680C(&v81, (uint64_t)&v57);
      }
    }
    else
    {
      if (v4 != v5)
      {
        do
        {
          sub_10031680C(&v81, v4);
          v4 += 432;
        }
        while (v4 != v5);
        v5 = *v56;
      }
      sub_10031895C((uint64_t)buf, v5);
      sub_10031895C((uint64_t)&v62, (uint64_t)buf);
      sub_10031895C((uint64_t)&v57, (uint64_t)buf);
      v7 = *(double *)sub_10030E194((uint64_t)&v62, 1u);
      *(double *)sub_10030E194((uint64_t)&v62, 1u) = v7 + 3.0;
      v8 = *(double *)sub_10030E194((uint64_t)&v57, 1u);
      *(double *)sub_10030E194((uint64_t)&v57, 1u) = v8 + -3.0;
      sub_10031680C(&v81, (uint64_t)&v62);
      sub_10031680C(&v81, (uint64_t)&v57);
    }
    v79 = 0;
    v78 = 0;
    v80 = 0;
    if (v81 != v82)
    {
      v62 = 0;
      v63 = 0uLL;
      sub_10032CAF8(a1, v81, a1 + 664, (double **)&v62);
    }
    sub_10032D36C((uint64_t)&v78, 0, 0);
    v15 = 126 - 2 * __clz(0x51B3BEA3677D46CFLL * ((uint64_t)&v79[-v78] >> 3));
    if (v79 == (char *)v78)
      v16 = 0;
    else
      v16 = v15;
    sub_100330454(v78, v79, v16, 1);
    if ((char *)v78 == v79)
      goto LABEL_79;
    v18 = sub_10032D3F4(v17, v78, (uint64_t *)(a1 + 664));
    *(double *)(a1 + 648) = v18;
    *(_BYTE *)(a1 + 656) = 1;
    v19 = *(double *)(a1 + 976);
    if (v18 > v19)
    {
      v20 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Batch filter has detected an issue with the measurements - rms normalized error (%f) is above the threshold (%f)", buf, 0x16u);
      }
      sub_100327610(a1);
      v9 = 0;
      *(_BYTE *)(a1 + 927) = 1;
      goto LABEL_80;
    }
    v76 = 0;
    v75 = 0;
    v77 = 0;
    v21 = sub_1003319DC(&v75, v78);
    v22 = v21;
    v23 = v78;
    v76 = v21;
    if ((unint64_t)(0x51B3BEA3677D46CFLL * ((uint64_t)&v79[-v78] >> 3)) >= 2)
    {
      v24 = 1;
      v25 = v21;
      do
      {
        if (v25 == v75)
        {
          v28 = v25;
        }
        else
        {
          v26 = 0;
          v27 = 1;
          v25 = v75;
          v28 = v22;
          do
          {
            v29 = v25 + 376 * v26 + 8;
            while (!v27)
            {
              v27 = 0;
              ++v26;
              v29 += 376;
              if (0x51B3BEA3677D46CFLL * ((uint64_t)(v28 - v25) >> 3) <= v26)
              {
                v23 = v78;
                v22 = v28;
                goto LABEL_49;
              }
            }
            v72 = 0x100000003;
            v70 = off_1008156E8;
            v71 = xmmword_100478880;
            v73 = &v74;
            sub_10030E2B4(v78 + 376 * v24 + 8, v29, (uint64_t)&v70);
            v64 = 0x100000003;
            v62 = off_1008156E8;
            v63 = xmmword_100478880;
            v65 = v66;
            v85 = 0x100000134;
            *(_QWORD *)buf = off_1008157C0;
            *(_OWORD *)&buf[8] = xmmword_1004788A0;
            v86 = v87;
            v59 = 0x100000003;
            v57 = off_1008156E8;
            v58 = xmmword_100478880;
            v60 = v61;
            sub_10030E510((uint64_t)&v70, (uint64_t)&v62, (uint64_t)buf, (uint64_t)&v57, "2");
            v27 = v30 > 0.1;
            v28 = v76;
            v25 = v75;
            ++v26;
          }
          while (0x51B3BEA3677D46CFLL * ((v76 - v75) >> 3) > v26);
          v23 = v78;
          v22 = v76;
          if (v30 <= 0.1)
            goto LABEL_49;
        }
        if (exp(*(double *)(v25 + 360) - *(double *)(v23 + 376 * v24 + 360)) > 0.01)
        {
          if (v28 >= v77)
          {
            v22 = sub_1003319DC(&v75, v23 + 376 * v24);
          }
          else
          {
            sub_100330298((uint64_t)&v77, v28, v23 + 376 * v24);
            v22 = v28 + 376;
          }
          v76 = v22;
          v23 = v78;
          v28 = v22;
        }
LABEL_49:
        ++v24;
        v25 = v28;
      }
      while (0x51B3BEA3677D46CFLL * ((uint64_t)&v79[-v23] >> 3) > v24);
    }
    v31 = v75;
    if ((unint64_t)(0x51B3BEA3677D46CFLL * ((v22 - v75) >> 3)) <= 1)
    {
LABEL_63:
      v35 = "RKNS3_3hsi18RangeEnableCommandEyEEE";
    }
    else
    {
      v32 = exp(-*(double *)(v75 + 360));
      v33 = 0.0;
      if (v31 == v22)
      {
        v35 = "NSt3__110__function6__baseIFN4rose6alisha6ResultIyEERKNS3_3hsi18RangeEnableCommandEyEEE" + 52;
      }
      else
      {
        v34 = v31;
        v35 = "NSt3__110__function6__baseIFN4rose6alisha6ResultIyEERKNS3_3hsi18RangeEnableCommandEyEEE" + 52;
        do
        {
          v33 = v33 + exp(-*(double *)(v34 + 360));
          v34 += 376;
        }
        while (v34 != v22);
      }
      v36 = v32 / v33;
      if (v36 < 0.9)
      {
        v37 = (double *)sub_10030E194(v31 + 72, 1u);
        v22 = v76;
        v31 = v75;
        if ((unint64_t)(0x51B3BEA3677D46CFLL * ((v76 - v75) >> 3)) >= 2)
        {
          v38 = *v37;
          v39 = 1;
          v40 = 448;
          while (1)
          {
            v41 = (double *)sub_10030E194(v31 + v40, 1u);
            v42 = fmod(*v41 - v38 + 3.14159265, 6.28318531);
            if (v42 < 0.0)
              v42 = v42 + 6.28318531;
            v43 = fabs(v42 + -3.14159265);
            if (v43 > 0.392699082)
              break;
            ++v39;
            v22 = v76;
            v31 = v75;
            v40 += 376;
            if (0x51B3BEA3677D46CFLL * ((v76 - v75) >> 3) <= v39)
              goto LABEL_63;
          }
          v52 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(double *)&buf[4] = v36;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v43;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Batch filter clearing solutions since the best one has a low weight (%f) and the horizontal angle difference to a secondary solution is too high (%f)", buf, 0x16u);
          }
          v53 = v75;
          v35 = "NSt3__110__function6__baseIFN4rose6alisha6ResultIyEERKNS3_3hsi18RangeEnableCommandEyEEE" + 52;
          if (v76 != v75)
          {
            v54 = (_QWORD *)(v76 - 368);
            do
            {
              v54[30] = off_100807398;
              v54[16] = off_100807398;
              v54[8] = off_100807398;
              *v54 = off_100807398;
              v55 = v54 - 1;
              v54 -= 47;
            }
            while (v55 != (_QWORD *)v53);
          }
          v47 = 0;
          v46 = 0;
          v76 = v53;
          v67 = 0;
          v68 = 0;
          v69 = 0;
          goto LABEL_73;
        }
      }
    }
    v67 = 0;
    v68 = 0;
    v69 = 0;
    if (v31 == v22)
    {
      v47 = 0;
      v46 = 0;
    }
    else
    {
      do
      {
        sub_10032D568(v31 + 8, a1 + 688, (uint64_t *)&v62);
        if (v62 != (uint64_t (**)())v63)
          sub_10032CAF8(a1, v31 + 8, a1 + 664, (double **)&v62);
        v44 = v68;
        if (v68 >= v69)
        {
          v45 = sub_1003319DC((uint64_t *)&v67, v31);
        }
        else
        {
          sub_100330298((uint64_t)&v69, v68, v31);
          v45 = v44 + 376;
        }
        v68 = v45;
        *(_QWORD *)buf = &v62;
        sub_1002F1AE0((void ***)buf);
        v31 += 376;
      }
      while (v31 != v22);
      v46 = v67;
      v47 = (char *)v68;
      v35 = "NSt3__110__function6__baseIFN4rose6alisha6ResultIyEERKNS3_3hsi18RangeEnableCommandEyEEE" + 52;
    }
LABEL_73:
    v48 = 126 - 2 * __clz(0x51B3BEA3677D46CFLL * ((v47 - v46) >> 3));
    if (v47 == v46)
      v49 = 0;
    else
      v49 = v48;
    sub_100331B00(v46, v47, v49, 1);
    if (v67 != (char *)v68)
    {
      v50 = *((_QWORD *)v35 + 259);
      v64 = 0x300000003;
      v62 = off_100815730;
      v63 = xmmword_100478B80;
      v65 = v66;
      v59 = v50;
      v57 = off_1008163B8;
      v58 = xmmword_100478880;
      v60 = v61;
      v85 = 0x10000000CLL;
      *(_QWORD *)buf = off_100816400;
      *(_OWORD *)&buf[8] = xmmword_1004794A0;
      v86 = v87;
      sub_10031C6D8((uint64_t)(v67 + 248), (uint64_t)&v57, (uint64_t)buf, (uint64_t)&v62);
    }
    *(_QWORD *)buf = &v67;
    sub_10032FF04((void ***)buf);
    *(_QWORD *)buf = &v75;
    sub_10032FF04((void ***)buf);
LABEL_79:
    v9 = *(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 168);
LABEL_80:
    *(_QWORD *)buf = &v78;
    sub_10032FF04((void ***)buf);
    *(_QWORD *)buf = &v81;
    sub_100319A64((void ***)buf);
    return v9;
  }
  return 0;
}

void sub_10032C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a69;

  a69 = (void **)&STACK[0x220];
  sub_10032FF04(&a69);
  a69 = (void **)&STACK[0x238];
  sub_10032FF04(&a69);
  a69 = (void **)&STACK[0x250];
  sub_100319A64(&a69);
  _Unwind_Resume(a1);
}

void sub_10032C3D4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *__p;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1E1E1E1E1E1E1E2)
      sub_100026E7C();
    v5 = a1[1] - *a1;
    v13 = v3;
    __p = sub_10032FB70(v3, a2);
    v10 = (char *)__p + v5;
    v11 = (char *)__p + v5;
    v12 = (char *)__p + 136 * v6;
    sub_10032FAFC(a1, &__p);
    v7 = v10;
    v8 = v11;
    if (v11 != v10)
    {
      do
      {
        *((_QWORD *)v8 - 8) = off_100807398;
        *((_QWORD *)v8 - 16) = off_100807398;
        v8 -= 136;
      }
      while (v8 != v7);
      v11 = v7;
    }
    if (__p)
      operator delete(__p);
  }
}

uint64_t sub_10032C4EC(uint64_t a1, uint64_t a2, uint64_t a3, double **a4, double **a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  double *v16;
  double *v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double v23;
  unsigned int v24;
  double v25;
  unint64_t v26;
  double *v27;
  double *v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  int v35;
  double v36;
  double v37;
  unint64_t v38;
  double **v39;
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE v46[48];
  uint64_t (**v47)();
  __int128 v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE v51[48];
  double v52;
  uint64_t (**v53)();
  __int128 v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE v57[48];
  uint64_t (**v58)();
  __int128 v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE v62[16];
  double v63;
  uint64_t (**v64)();
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t (**v69)();
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;

  v11 = *a6;
  v12 = a6[1];
  if (*a6 != v12)
  {
    do
    {
      *(_QWORD *)(v12 - 64) = off_100807398;
      *(_QWORD *)(v12 - 128) = off_100807398;
      v12 -= 136;
    }
    while (v12 != v11);
    a6[1] = v11;
    sub_10032C3D4(a6, 0x6DB6DB6DB6DB6DB7 * (((char *)a4[1] - (char *)*a4) >> 4));
  }
  v13 = *a7;
  v14 = a7[1];
  if (*a7 != v14)
  {
    do
    {
      *(_QWORD *)(v14 - 88) = off_100807398;
      *(_QWORD *)(v14 - 176) = off_100807398;
      v14 -= 192;
    }
    while (v14 != v13);
    a7[1] = v13;
    sub_10032DC6C(a7, 0x4EC4EC4EC4EC4EC5 * (((char *)a5[1] - (char *)*a5) >> 4));
  }
  v39 = a5;
  v71 = 0x100000003;
  v69 = off_1008156E8;
  v70 = xmmword_100478880;
  v72 = &v73;
  v66 = 0x300000003;
  v64 = off_100815730;
  v65 = xmmword_100478B80;
  v67 = &v68;
  result = (uint64_t)sub_100359BD8(a2, (uint64_t)&v69, (uint64_t)&v64);
  v16 = *a4;
  v17 = a4[1];
  if (*a4 != v17)
  {
    do
    {
      v60 = 0x100000001;
      v58 = off_100815C78;
      *(_QWORD *)&v18 = 0x100000001;
      *((_QWORD *)&v18 + 1) = 0x100000001;
      v59 = v18;
      v61 = v62;
      v55 = 0x300000001;
      v53 = off_1008162E0;
      v54 = xmmword_1004794B0;
      v56 = v57;
      v49 = 0x100000003;
      v47 = off_1008156E8;
      v48 = xmmword_100478880;
      v50 = v51;
      sub_10030E2B4((uint64_t)(v16 + 5), a3, (uint64_t)&v47);
      sub_100359A5C(a2, (uint64_t)&v64, (uint64_t)&v69, (uint64_t)&v47, (uint64_t)&v58, (uint64_t)&v53);
      v20 = v16[3];
      v19 = v16[4];
      v63 = 0.0;
      v21 = v16[2];
      v22 = (double *)sub_10030E194((uint64_t)&v58, 0);
      v23 = 1.0 / (v20 * v19);
      v63 = v21 - v23 * *v22;
      v49 = 0x300000001;
      v47 = off_1008162E0;
      v48 = xmmword_1004794B0;
      v50 = v51;
      sub_10031CBA0((uint64_t)&v53, (uint64_t)&v47, v23);
      v24 = 0;
      v44 = 0x100000003;
      v42 = off_1008156E8;
      v43 = xmmword_100478880;
      v45 = v46;
      do
      {
        v25 = sub_10027C1A4((uint64_t)&v47, v24);
        *(double *)sub_10030E194((uint64_t)&v42, v24++) = v25;
      }
      while (v24 != 3);
      v26 = a6[1];
      if (v26 >= a6[2])
      {
        result = sub_100333D04(a6, &v63, (uint64_t)&v47, (uint64_t)&v42);
      }
      else
      {
        sub_100333E88((double *)a6[1], (uint64_t)&v47, (uint64_t)&v42, v63);
        result = v26 + 136;
        a6[1] = v26 + 136;
      }
      a6[1] = result;
      v16 += 14;
    }
    while (v16 != v17);
  }
  v28 = *a5;
  v27 = a5[1];
  if (*v39 != v27)
  {
    do
    {
      v60 = 0x100000002;
      v58 = off_100815CC0;
      v59 = xmmword_100478BD0;
      v61 = v62;
      v55 = 0x300000002;
      v53 = off_100816328;
      v54 = xmmword_1004794C0;
      v56 = v57;
      v49 = 0x100000003;
      v47 = off_1008156E8;
      v48 = xmmword_100478880;
      v50 = v51;
      sub_10030E2B4((uint64_t)(v28 + 4), a3, (uint64_t)&v47);
      sub_100359B18(a2, (uint64_t)&v64, (uint64_t)&v69, (uint64_t)&v47, (uint64_t)(v28 + 12), (uint64_t)&v58, (uint64_t)&v53);
      v29 = v28[3];
      v30 = v28[1];
      v31 = (double *)sub_10030E194((uint64_t)&v58, 0);
      v32 = 1.0 / v29;
      v33 = fmod(v29 * v30 - *v31 + 3.14159265, 6.28318531);
      if (v33 < 0.0)
        v33 = v33 + 6.28318531;
      v63 = v32 * (v33 + -3.14159265);
      v52 = 0.0;
      v34 = v28[2];
      v52 = v34 - v32 * *(double *)sub_10030E194((uint64_t)&v58, 1u);
      v49 = 0x300000002;
      v47 = off_100816328;
      v48 = xmmword_1004794C0;
      v50 = v51;
      sub_10031CBA0((uint64_t)&v53, (uint64_t)&v47, v32);
      v35 = 0;
      v44 = 0x200000003;
      v42 = off_100816370;
      v43 = xmmword_1004794D0;
      v45 = v46;
      do
      {
        v36 = sub_10027C1DC((uint64_t)&v47, 0, v35);
        *(double *)sub_10030E274((uint64_t)&v42, v35, 0) = v36;
        v37 = sub_10027C1DC((uint64_t)&v47, 1, v35);
        *(double *)sub_10030E274((uint64_t)&v42, v35++, 1) = v37;
      }
      while (v35 != 3);
      v38 = a7[1];
      if (v38 >= a7[2])
      {
        result = sub_100333EE4(a7, &v63, &v52, (uint64_t)&v47, (uint64_t)&v42);
      }
      else
      {
        sub_100334070((double *)a7[1], (uint64_t)&v47, (uint64_t)&v42, v63, v52);
        result = v38 + 192;
        a7[1] = v38 + 192;
      }
      a7[1] = result;
      v28 += 26;
    }
    while (v28 != v27);
  }
  return result;
}

void sub_10032CAB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10032CAC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10032CAF8(uint64_t a1, uint64_t a2, uint64_t a3, double **a4)
{
  _BYTE v7[64];

  sub_10031895C((uint64_t)v7, a2);
  sub_10032D794(a1, (uint64_t)v7, a3, a4);
}

void sub_10032D278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10032D36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if (a2 != a3)
  {
    sub_1003303B8((uint64_t)&v10, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = *(_QWORD **)(a1 + 8);
    if (v6 != v5)
    {
      v7 = v6 - 46;
      do
      {
        v7[30] = off_100807398;
        v7[16] = off_100807398;
        v7[8] = off_100807398;
        *v7 = off_100807398;
        v8 = v7 - 1;
        v7 -= 47;
      }
      while (v8 != v5);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  return a2;
}

double sub_10032D3F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  __int128 v9;
  double v10;
  double v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 == v4)
  {
    v8 = 0.0;
    v14 = *a3;
  }
  else
  {
    v6 = a2 + 8;
    v7 = v3 + 40;
    v8 = 0.0;
    do
    {
      v23 = 0x100000001;
      v21 = off_100815C78;
      *(_QWORD *)&v9 = 0x100000001;
      *((_QWORD *)&v9 + 1) = 0x100000001;
      v22 = v9;
      v24 = &v25;
      v18 = 0x300000001;
      v16 = off_1008162E0;
      v17 = xmmword_1004794B0;
      v19 = &v20;
      sub_100359580(v6, v7, (uint64_t)&v21, (uint64_t)&v16);
      v10 = *(double *)(v7 - 8);
      v11 = *(double *)(v7 - 32);
      v12 = (double *)sub_10030E194((uint64_t)&v21, 0);
      v8 = v8 + 1.0 / (v10 * 0.1) * (v11 - *v12) * (1.0 / (v10 * 0.1) * (v11 - *v12));
      v13 = v7 + 72;
      v7 += 112;
    }
    while (v13 != v4);
    v3 = *a3;
    v14 = a3[1];
  }
  return sqrt(v8 / (double)(unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v14 - v3) >> 4) - 3));
}

void sub_10032D568(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(_OWORD **)a2;
  v4 = *(_OWORD **)(a2 + 8);
  if (*(_OWORD **)a2 != v4)
  {
    v7 = (uint64_t)(a3 + 2);
    do
    {
      if (sub_10032D630(a1, (uint64_t)v3))
      {
        v8 = a3[1];
        if (v8 >= a3[2])
        {
          v9 = sub_1003340C8(a3, v3);
        }
        else
        {
          sub_100334254(v7, (_OWORD *)a3[1], v3);
          v9 = v8 + 208;
          a3[1] = v8 + 208;
        }
        a3[1] = v9;
      }
      v3 += 13;
    }
    while (v3 != v4);
  }
}

void sub_10032D60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  a10 = (void **)v10;
  sub_1002F1AE0(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_10032D630(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v13 = 0x100000003;
  v11 = off_1008156E8;
  v12 = xmmword_100478880;
  v14 = &v15;
  sub_10030E2B4(a1, a2 + 32, (uint64_t)&v11);
  v8 = 0x100000003;
  v6 = off_1008156E8;
  v7 = xmmword_100478880;
  v9 = &v10;
  sub_10030E3B0(a2 + 96, (uint64_t)&v11, (uint64_t)&v6);
  v3 = sub_10027C1A4((uint64_t)&v6, 2u);
  v28 = 0x100000003;
  v26 = off_1008156E8;
  v27 = xmmword_100478880;
  v29 = &v30;
  v23 = 0x100000134;
  v21 = off_1008157C0;
  v22 = xmmword_1004788A0;
  v24 = &v25;
  v18 = 0x100000003;
  v16 = off_1008156E8;
  v17 = xmmword_100478880;
  v19 = &v20;
  sub_10030E510((uint64_t)&v6, (uint64_t)&v26, (uint64_t)&v21, (uint64_t)&v16, "2");
  return acos(-v3 / v4) * 180.0 / 3.14159265 <= 60.0;
}

void sub_10032D794(uint64_t a1, uint64_t a2, uint64_t a3, double **a4)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  double *v10;
  double *i;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t (**v20)();
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE v29[72];
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (**v35)();
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  double *v40;
  double *v41;
  uint64_t v42;
  double *v43;
  double *v44;
  uint64_t v45;
  uint64_t (**v46)();
  __int128 v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE v50[96];
  uint64_t (**v51)();
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  v7 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  sub_10032C3D4((uint64_t *)&v43, 0x6DB6DB6DB6DB6DB7 * v7);
  sub_10032DD84(v8, a2, (double **)a3, a4, (uint64_t *)&v43, (uint64_t *)&v40);
  v37 = 0x300000003;
  v35 = off_100815730;
  v36 = xmmword_100478B80;
  v38 = &v39;
  sub_10030DD0C(&v35, 3, 3);
  sub_10030DD58((uint64_t)&v35, 0.0);
  v32 = 0x100000003;
  v30 = off_1008156E8;
  v31 = xmmword_100478880;
  v33 = &v34;
  sub_10030DD0C(&v30, 3, 1);
  v9 = 0.0;
  sub_10030DD58((uint64_t)&v30, 0.0);
  v10 = v43;
  for (i = v44; v10 != i; v10 = (double *)(v13 + 64))
  {
    v12 = (uint64_t)(v10 + 9);
    v14 = *v10;
    v13 = (uint64_t)(v10 + 1);
    v27 = 0x300000003;
    v25 = off_100815730;
    v26 = xmmword_100478B80;
    v28 = v29;
    sub_10030E3B0(v12, v13, (uint64_t)&v25);
    v48 = 0x300000003;
    v46 = off_100815730;
    v47 = xmmword_100478B80;
    v49 = v50;
    sub_10030F0E0((uint64_t)&v35, (uint64_t)&v25, (uint64_t)&v46);
    sub_10030EC4C((uint64_t)&v35, (uint64_t)&v46);
    v27 = 0x100000003;
    v25 = off_1008156E8;
    v26 = xmmword_100478880;
    v13 += 64;
    v28 = v29;
    sub_10031CBA0(v13, (uint64_t)&v25, v14);
    v48 = 0x100000003;
    v46 = off_1008156E8;
    v47 = xmmword_100478880;
    v49 = v50;
    sub_10030F0E0((uint64_t)&v30, (uint64_t)&v25, (uint64_t)&v46);
    sub_10030EC4C((uint64_t)&v30, (uint64_t)&v46);
    v9 = v9 + v14 * v14;
  }
  v15 = v40;
  v16 = v41;
  if (v40 != v41)
  {
    do
    {
      v17 = *v15;
      v18 = v15[1];
      v27 = 0x300000003;
      v25 = off_100815730;
      v26 = xmmword_100478B80;
      v19 = (uint64_t)(v15 + 2);
      v28 = v29;
      sub_10030E3B0((uint64_t)(v15 + 13), (uint64_t)(v15 + 2), (uint64_t)&v25);
      v48 = 0x300000003;
      v46 = off_100815730;
      v47 = xmmword_100478B80;
      v49 = v50;
      sub_10030F0E0((uint64_t)&v35, (uint64_t)&v25, (uint64_t)&v46);
      sub_10030EC4C((uint64_t)&v35, (uint64_t)&v46);
      v22 = 0x100000002;
      v20 = off_100815CC0;
      v21 = xmmword_100478BD0;
      v23 = &v24;
      *(double *)sub_10030E194((uint64_t)&v20, 0) = v17;
      *(double *)sub_10030E194((uint64_t)&v20, 1u) = v18;
      v27 = 0x100000003;
      v25 = off_1008156E8;
      v26 = xmmword_100478880;
      v19 += 88;
      v28 = v29;
      sub_10030E3B0(v19, (uint64_t)&v20, (uint64_t)&v25);
      v48 = 0x100000003;
      v46 = off_1008156E8;
      v47 = xmmword_100478880;
      v49 = v50;
      sub_10030F0E0((uint64_t)&v30, (uint64_t)&v25, (uint64_t)&v46);
      sub_10030EC4C((uint64_t)&v30, (uint64_t)&v46);
      v9 = v9 + v18 * v18 + v17 * v17;
      v15 = (double *)(v19 + 88);
    }
    while ((double *)(v19 + 88) != v16);
  }
  v27 = 0x300000003;
  v25 = off_100815730;
  v26 = xmmword_100478B80;
  v28 = v29;
  v53 = 0x100000003;
  v51 = off_1008163B8;
  v52 = xmmword_100478880;
  v54 = &v55;
  v48 = 0x10000000CLL;
  v46 = off_100816400;
  v47 = xmmword_1004794A0;
  v49 = v50;
  sub_10031C6D8((uint64_t)&v35, (uint64_t)&v51, (uint64_t)&v46, (uint64_t)&v25);
}

void sub_10032DBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  void **a66;

  a66 = (void **)&a60;
  sub_10032FAB8(&a66);
  a66 = (void **)&a63;
  sub_10032FA74(&a66);
  _Unwind_Resume(a1);
}

void sub_10032DC6C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *__p;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 6) < a2)
  {
    if (a2 >= 0x155555555555556)
      sub_100026E7C();
    v5 = a1[1] - *a1;
    v13 = v3;
    __p = sub_1003187E0(v3, a2);
    v10 = (char *)__p + v5;
    v11 = (char *)__p + v5;
    v12 = (char *)__p + 192 * v6;
    sub_1003338B8(a1, &__p);
    v7 = v10;
    v8 = v11;
    if (v11 != v10)
    {
      do
      {
        *((_QWORD *)v8 - 11) = off_100807398;
        *((_QWORD *)v8 - 22) = off_100807398;
        v8 -= 192;
      }
      while (v8 != v7);
      v11 = v7;
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_10032DD84(uint64_t a1, uint64_t a2, double **a3, double **a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  unsigned int v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  double v28;
  double v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  int v34;
  double v35;
  double v36;
  unint64_t v37;
  uint64_t v38;
  double **v39;
  uint64_t (**v41)();
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE v45[48];
  uint64_t (**v46)();
  __int128 v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE v50[48];
  double v51;
  uint64_t (**v52)();
  __int128 v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE v56[48];
  uint64_t (**v57)();
  __int128 v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE v61[16];
  double v62[2];

  v10 = *a5;
  v11 = a5[1];
  if (*a5 != v11)
  {
    do
    {
      *(_QWORD *)(v11 - 64) = off_100807398;
      *(_QWORD *)(v11 - 128) = off_100807398;
      v11 -= 136;
    }
    while (v11 != v10);
    a5[1] = v10;
    sub_10032C3D4(a5, 0x6DB6DB6DB6DB6DB7 * (((char *)a3[1] - (char *)*a3) >> 4));
  }
  v12 = *a6;
  v13 = a6[1];
  if (*a6 != v13)
  {
    do
    {
      *(_QWORD *)(v13 - 88) = off_100807398;
      *(_QWORD *)(v13 - 176) = off_100807398;
      v13 -= 192;
    }
    while (v13 != v12);
    a6[1] = v12;
    sub_10032DC6C(a6, 0x4EC4EC4EC4EC4EC5 * (((char *)a4[1] - (char *)*a4) >> 4));
  }
  v39 = a4;
  v14 = *a3;
  v15 = a3[1];
  if (*a3 != v15)
  {
    do
    {
      v59 = 0x100000001;
      v57 = off_100815C78;
      *(_QWORD *)&v16 = 0x100000001;
      *((_QWORD *)&v16 + 1) = 0x100000001;
      v58 = v16;
      v60 = v61;
      v54 = 0x300000001;
      v52 = off_1008162E0;
      v53 = xmmword_1004794B0;
      v55 = v56;
      sub_100359580(a2, (uint64_t)(v14 + 5), (uint64_t)&v57, (uint64_t)&v52);
      v18 = v14[3];
      v17 = v14[4];
      v62[0] = 0.0;
      v19 = v14[2];
      v20 = (double *)sub_10030E194((uint64_t)&v57, 0);
      v21 = 1.0 / (v18 * v17);
      v62[0] = v19 - v21 * *v20;
      v48 = 0x300000001;
      v46 = off_1008162E0;
      v47 = xmmword_1004794B0;
      v49 = v50;
      sub_10031CBA0((uint64_t)&v52, (uint64_t)&v46, v21);
      v22 = 0;
      v43 = 0x100000003;
      v41 = off_1008156E8;
      v42 = xmmword_100478880;
      v44 = v45;
      do
      {
        v23 = sub_10027C1A4((uint64_t)&v46, v22);
        *(double *)sub_10030E194((uint64_t)&v41, v22++) = v23;
      }
      while (v22 != 3);
      v24 = a5[1];
      if (v24 >= a5[2])
      {
        v25 = sub_100333D04(a5, v62, (uint64_t)&v46, (uint64_t)&v41);
      }
      else
      {
        sub_100333E88((double *)a5[1], (uint64_t)&v46, (uint64_t)&v41, v62[0]);
        v25 = v24 + 136;
        a5[1] = v24 + 136;
      }
      a5[1] = v25;
      v14 += 14;
    }
    while (v14 != v15);
  }
  v27 = *a4;
  v26 = a4[1];
  if (*v39 != v26)
  {
    do
    {
      v59 = 0x100000002;
      v57 = off_100815CC0;
      v58 = xmmword_100478BD0;
      v60 = v61;
      v54 = 0x300000002;
      v52 = off_100816328;
      v53 = xmmword_1004794C0;
      v55 = v56;
      sub_100359758(a2, (uint64_t)(v27 + 4), (uint64_t)(v27 + 12), (uint64_t)&v57, (uint64_t)&v52);
      v28 = v27[3];
      v29 = v27[1];
      v30 = (double *)sub_10030E194((uint64_t)&v57, 0);
      v31 = 1.0 / v28;
      v32 = fmod(v28 * v29 - *v30 + 3.14159265, 6.28318531);
      if (v32 < 0.0)
        v32 = v32 + 6.28318531;
      v62[0] = v31 * (v32 + -3.14159265);
      v51 = 0.0;
      v33 = v27[2];
      v51 = v33 - v31 * *(double *)sub_10030E194((uint64_t)&v57, 1u);
      v48 = 0x300000002;
      v46 = off_100816328;
      v47 = xmmword_1004794C0;
      v49 = v50;
      sub_10031CBA0((uint64_t)&v52, (uint64_t)&v46, 1.0 / v28);
      v34 = 0;
      v43 = 0x200000003;
      v41 = off_100816370;
      v42 = xmmword_1004794D0;
      v44 = v45;
      do
      {
        v35 = sub_10027C1DC((uint64_t)&v46, 0, v34);
        *(double *)sub_10030E274((uint64_t)&v41, v34, 0) = v35;
        v36 = sub_10027C1DC((uint64_t)&v46, 1, v34);
        *(double *)sub_10030E274((uint64_t)&v41, v34++, 1) = v36;
      }
      while (v34 != 3);
      v37 = a6[1];
      if (v37 >= a6[2])
      {
        v38 = sub_100333EE4(a6, v62, &v51, (uint64_t)&v46, (uint64_t)&v41);
      }
      else
      {
        sub_100334070((double *)a6[1], (uint64_t)&v46, (uint64_t)&v41, v62[0], v51);
        v38 = v37 + 192;
        a6[1] = v37 + 192;
      }
      a6[1] = v38;
      v27 += 26;
    }
    while (v27 != v26);
  }
}

void sub_10032E280(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10032E28C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_10032E2B8(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_10032E2C8(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_10032E2D8(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

void sub_10032E2E8(double a1, double a2, uint64_t a3, uint64_t *a4, BOOL *a5, char *a6, double *a7)
{
  uint64_t v7;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  double v31;
  double *v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  char v46;
  NSObject *v47;
  _BOOL4 v48;
  int v49;
  const char *v50;
  const char *v51;
  int v52;
  double *v53;
  double v54;
  uint64_t (**v55)();
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE v60[32];
  uint64_t (**v61)();
  __int128 v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE v65[32];
  uint64_t (**v66)();
  __int128 v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE v70[32];
  uint64_t (**v71)();
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t (**v76)();
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t (**v84)();
  __int128 v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE v88[1800];
  _BYTE buf[24];
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;

  *a5 = 1;
  *a6 = 0;
  *a7 = 0.0;
  v7 = a4[1];
  if (*a4 != v7)
  {
    v14 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a4) >> 4);
    v81 = 0;
    v82 = 0;
    v83 = 0;
    sub_10031834C(&v81, v14);
    v78 = 0x100000002;
    v76 = off_100815CC0;
    v77 = xmmword_100478BD0;
    v79 = &v80;
    v15 = *a4;
    v16 = a4[1];
    while (v15 != v16)
    {
      if (*(double *)(v15 + 8) <= a2)
      {
        v17 = sub_10027C1A4(v15 + 40, 2u);
        *(double *)sub_10030E194((uint64_t)&v76, 0) = v17;
        v18 = sub_10027C1A4(v15 + 40, 0);
        *(double *)sub_10030E194((uint64_t)&v76, 1u) = v18;
        v19 = v82;
        if (v82 >= v83)
        {
          v20 = sub_10031D1F4(&v81, (uint64_t)&v76);
        }
        else
        {
          sub_10031CFEC(v82, (uint64_t)&v76);
          v20 = v19 + 56;
        }
        v82 = v20;
      }
      v15 += 112;
    }
    if (v81 != v82)
    {
      v53 = a7;
      v73 = 0x100000002;
      v71 = off_100815CC0;
      v72 = xmmword_100478BD0;
      v74 = &v75;
      sub_10030DD0C(&v71, 2, 1);
      sub_10030DD58((uint64_t)&v71, 0.0);
      v22 = v81;
      for (i = v82; v22 != i; v22 += 56)
      {
        v86 = 0x100000002;
        v84 = off_100815CC0;
        v85 = xmmword_100478BD0;
        v87 = v88;
        sub_10030F0E0((uint64_t)&v71, v22, (uint64_t)&v84);
        sub_10030EC4C((uint64_t)&v71, (uint64_t)&v84);
      }
      v86 = 0x100000002;
      v84 = off_100815CC0;
      v85 = xmmword_100478BD0;
      v87 = v88;
      sub_10031CBA0((uint64_t)&v71, (uint64_t)&v84, 1.0 / (double)v14);
      sub_10030EC4C((uint64_t)&v71, (uint64_t)&v84);
      v24 = v81;
      v23 = v82;
      if (v81 != v82)
      {
        v25 = 0.0;
        do
        {
          v86 = 0x100000002;
          v84 = off_100815CC0;
          v85 = xmmword_100478BD0;
          v87 = v88;
          sub_10030E2B4(v24, (uint64_t)&v71, (uint64_t)&v84);
          sub_10030EC4C(v24, (uint64_t)&v84);
          v68 = 0x100000002;
          v66 = off_100815CC0;
          v67 = xmmword_100478BD0;
          v69 = v70;
          v86 = 0x1000000E1;
          v84 = off_100815D08;
          v85 = xmmword_100478BE0;
          v87 = v88;
          v63 = 0x100000002;
          v61 = off_100815CC0;
          v62 = xmmword_100478BD0;
          v64 = v65;
          sub_10030E510(v24, (uint64_t)&v66, (uint64_t)&v84, (uint64_t)&v61, "2");
          if (v26 > v25)
            v25 = v26;
          v24 += 56;
        }
        while (v24 != v23);
        *a5 = v25 < 0.3;
        if (v25 < 0.3)
          goto LABEL_54;
        v86 = 0x200000002;
        v84 = off_100815D50;
        v85 = xmmword_100478BF0;
        v87 = v88;
        sub_10030DD0C(&v84, 2, 2);
        sub_10030DD58((uint64_t)&v84, 0.0);
        v27 = v81;
        v28 = v82;
        if (v81 != v82)
        {
          while (1)
          {
            v30 = *(_DWORD *)(v27 + 8);
            v29 = *(_DWORD *)(v27 + 12);
            v58 = 0x200000001;
            v59 = 0;
            v56 = 0;
            v57 = 0;
            v55 = off_100815D98;
            if (v29 > 1)
              break;
            if (v30 >= 3)
            {
              v49 = 423;
              v50 = "this->max_num_cols_ >= num_cols";
LABEL_58:
              __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v49, v50);
            }
            v56 = __PAIR64__(v30, v29);
            LODWORD(v57) = v30 * v29;
            HIDWORD(v57) = v29;
            v59 = v60;
            sub_10030E1CC(v27, &v55);
            v63 = 0x200000002;
            v61 = off_100815D50;
            v62 = xmmword_100478BF0;
            v64 = v65;
            sub_10030E3B0(v27, (uint64_t)&v55, (uint64_t)&v61);
            v68 = 0x200000002;
            v66 = off_100815D50;
            v67 = xmmword_100478BF0;
            v69 = v70;
            sub_10030F0E0((uint64_t)&v84, (uint64_t)&v61, (uint64_t)&v66);
            sub_10030EC4C((uint64_t)&v84, (uint64_t)&v66);
            v27 += 56;
            if (v27 == v28)
              goto LABEL_23;
          }
          v49 = 422;
          v50 = "this->max_num_rows_ >= num_rows";
          goto LABEL_58;
        }
LABEL_23:
        v68 = 0x200000002;
        v66 = off_100815D50;
        v67 = xmmword_100478BF0;
        v69 = v70;
        v63 = 0x200000002;
        v61 = off_100815D50;
        v62 = xmmword_100478BF0;
        v64 = v65;
        sub_100318438((uint64_t)&v84, (uint64_t)&v66, (uint64_t)&v61);
        v31 = *(double *)sub_10030E274((uint64_t)&v61, 0, 0);
        v32 = (double *)sub_10030E274((uint64_t)&v61, 1, 1);
        if (*v32 >= v31)
          v33 = v31;
        else
          v33 = *v32;
        v58 = 0x200000002;
        v55 = off_100815D50;
        if (DWORD1(v67) > 2)
        {
          v51 = "this->max_num_rows_ >= num_rows";
          v52 = 422;
        }
        else
        {
          if (v67 < 3)
          {
            v56 = __PAIR64__(v67, DWORD1(v67));
            LODWORD(v57) = v67 * DWORD1(v67);
            HIDWORD(v57) = DWORD1(v67);
            v59 = v60;
            sub_10030E1CC((uint64_t)&v66, &v55);
            v34 = v81;
            v35 = v82;
            if (v81 == v82)
            {
              v43 = 0.0;
              v44 = 0.0;
            }
            else
            {
              v54 = v33;
              v36 = 0.0;
              v37 = 0.0;
              v38 = 0.0;
              v39 = 0.0;
              do
              {
                v90 = 0x100000002;
                *(_QWORD *)buf = off_100815CC0;
                *(_OWORD *)&buf[8] = xmmword_100478BD0;
                v91 = &v92;
                sub_10030E3B0((uint64_t)&v55, v34, (uint64_t)buf);
                v40 = sub_10027C1A4((uint64_t)buf, 0);
                v41 = sub_10027C1A4((uint64_t)buf, 1u);
                if (v40 < v39)
                  v42 = v40;
                else
                  v42 = v39;
                if (v40 > v38)
                  v38 = v40;
                else
                  v39 = v42;
                if (v41 <= v36)
                {
                  if (v41 < v37)
                    v37 = v41;
                }
                else
                {
                  v36 = v41;
                }
                v34 += 56;
              }
              while (v34 != v35);
              v43 = v38 - v39;
              v44 = v36 - v37;
              v33 = v54;
            }
            if (v44 >= v43)
              v45 = v43;
            else
              v45 = v44;
            if (v43 < v44)
              v43 = v44;
            *v53 = v43;
            if (v45 >= a1)
            {
              v47 = qword_10085F520;
              v48 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
              v46 = 0;
              if (v48)
              {
                *(_DWORD *)buf = 134218496;
                *(double *)&buf[4] = a2;
                *(_WORD *)&buf[12] = 2048;
                *(double *)&buf[14] = v33;
                *(_WORD *)&buf[22] = 2048;
                v90 = *(_QWORD *)&v45;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Batch filter problem is observable now from the bin with max range %3.1f m: smallest eigenvalue is %f, smallest rectangular box dimension is %f m", buf, 0x20u);
                v46 = 0;
              }
            }
            else
            {
              v46 = 1;
            }
            *a6 = v46;
            goto LABEL_54;
          }
          v51 = "this->max_num_cols_ >= num_cols";
          v52 = 423;
        }
        __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v52, v51);
      }
      *a5 = 1;
    }
LABEL_54:
    v84 = (uint64_t (**)())&v81;
    sub_10031CE54((void ***)&v84);
  }
}

void sub_10032EA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  a15 = (void **)&a56;
  sub_10031CE54(&a15);
  _Unwind_Resume(a1);
}

char *sub_10032EAB8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x186186186186186)
      sub_100026E7C();
    v10 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xC30C30C30C30C3)
      v12 = 0x186186186186186;
    else
      v12 = v11;
    result = sub_100027CA4(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 4;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCF3CF3CF3CF3CF3DLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9 - 4);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 4;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

BOOL sub_10032EC18(__int128 **a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  double v6;
  _DWORD v8[18];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _DWORD v12[18];

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v5 = (*a1)[1];
  v11 = *((_QWORD *)*a1 + 4);
  v9 = v4;
  v10 = v5;
  sub_10031895C((uint64_t)v12, (uint64_t)v2 + 40);
  v12[16] = *((_DWORD *)v2 + 26);
  sub_10031895C((uint64_t)v8, v3 + 40);
  v8[16] = *(_DWORD *)(v3 + 104);
  v6 = sub_10027C1A4((uint64_t)v12, 0);
  return v6 < sub_10027C1A4((uint64_t)v8, 0);
}

BOOL sub_10032ECCC(__int128 **a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  double v6;
  _DWORD v8[18];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _DWORD v12[18];

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v5 = (*a1)[1];
  v11 = *((_QWORD *)*a1 + 4);
  v9 = v4;
  v10 = v5;
  sub_10031895C((uint64_t)v12, (uint64_t)v2 + 40);
  v12[16] = *((_DWORD *)v2 + 26);
  sub_10031895C((uint64_t)v8, v3 + 40);
  v8[16] = *(_DWORD *)(v3 + 104);
  v6 = sub_10027C1A4((uint64_t)v12, 1u);
  return v6 < sub_10027C1A4((uint64_t)v8, 1u);
}

BOOL sub_10032ED80(__int128 **a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  double v6;
  _DWORD v8[18];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _DWORD v12[18];

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v5 = (*a1)[1];
  v11 = *((_QWORD *)*a1 + 4);
  v9 = v4;
  v10 = v5;
  sub_10031895C((uint64_t)v12, (uint64_t)v2 + 40);
  v12[16] = *((_DWORD *)v2 + 26);
  sub_10031895C((uint64_t)v8, v3 + 40);
  v8[16] = *(_DWORD *)(v3 + 104);
  v6 = sub_10027C1A4((uint64_t)v12, 2u);
  return v6 < sub_10027C1A4((uint64_t)v8, 2u);
}

void sub_10032EE34(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10032EE54(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10032EE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[3];

  sub_10030DC3C(a1, v3, a3);
}

void sub_10032EE80(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10032EEA0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10032EEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[6];

  sub_10030DC3C(a1, v3, a3);
}

void sub_10032EECC(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10032EEEC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10032EEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[6];

  sub_10030DC3C(a1, v3, a3);
}

uint64_t sub_10032EF18(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10032EFD4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10032EF8C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    sub_1000260B0();
  return operator new(112 * a2);
}

uint64_t sub_10032EFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      v13 = *(_OWORD *)(a3 + v11 - 112);
      v14 = *(_OWORD *)(a3 + v11 - 96);
      *(_QWORD *)(v12 - 80) = *(_QWORD *)(a3 + v11 - 80);
      *(_OWORD *)(v12 - 112) = v13;
      *(_OWORD *)(v12 - 96) = v14;
      sub_10031895C(a7 + v11 - 72, a3 + v11 - 72);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 112;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_10032F068(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 112)
    *(_QWORD *)(v1 + 40 + v2) = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t *sub_10032F088(uint64_t **a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    sub_1000272A8(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_10032F140(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249)
    sub_100026E7C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x124924924924924)
    v9 = 0x249249249249249;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10032EF8C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[112 * v4];
  __p = v10;
  v19 = v11;
  v20 = v11;
  v21 = &v10[112 * v9];
  v12 = *a2;
  v13 = a2[1];
  *((_QWORD *)v11 + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  sub_10031895C((uint64_t)(v11 + 40), (uint64_t)a2 + 40);
  *(_DWORD *)&v10[112 * v4 + 104] = *((_DWORD *)a2 + 26);
  v20 += 112;
  sub_10032EF18(a1, &__p);
  v14 = a1[1];
  v15 = v19;
  v16 = v20;
  if (v20 != v19)
  {
    do
    {
      *((_QWORD *)v16 - 9) = off_100807398;
      v16 -= 112;
    }
    while (v16 != v15);
    v20 = v15;
  }
  if (__p)
    operator delete(__p);
  return v14;
}

_QWORD *sub_10032F2E0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_10032F364(result, a4);
    result = (_QWORD *)sub_10032F3B8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10032F344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1002F1AA0(&a9);
  _Unwind_Resume(a1);
}

char *sub_10032F364(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    sub_100026E7C();
  result = (char *)sub_10032EF8C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t sub_10032F3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = a2 + v7;
      v10 = *(_OWORD *)(a2 + v7);
      v11 = *(_OWORD *)(a2 + v7 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + v7 + 32);
      *(_OWORD *)v8 = v10;
      *(_OWORD *)(v8 + 16) = v11;
      sub_10031895C(a4 + v7 + 40, a2 + v7 + 40);
      *(_DWORD *)(v8 + 104) = *(_DWORD *)(a2 + v7 + 104);
      v7 += 112;
    }
    while (v9 + 112 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10032F43C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 -= 112)
    *(_QWORD *)(v1 - 72 + v2) = off_100807398;
  _Unwind_Resume(a1);
}

void sub_10032F45C(char **a1)
{
  char *v2;
  char *i;

  v2 = *a1;
  if (v2)
  {
    for (i = a1[1]; i != v2; i -= 112)
      *((_QWORD *)i - 9) = off_100807398;
    a1[1] = v2;
    operator delete(v2);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_10032F4B8(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249)
    sub_100026E7C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x124924924924924)
    v9 = 0x249249249249249;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10032EF8C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[112 * v4];
  __p = v10;
  v19 = v11;
  v20 = v11;
  v21 = &v10[112 * v9];
  v12 = *a2;
  v13 = a2[1];
  *((_QWORD *)v11 + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  sub_10031895C((uint64_t)(v11 + 40), (uint64_t)a2 + 40);
  *(_DWORD *)&v10[112 * v4 + 104] = *((_DWORD *)a2 + 26);
  v20 += 112;
  sub_10032EF18(a1, &__p);
  v14 = a1[1];
  v15 = v19;
  v16 = v20;
  if (v20 != v19)
  {
    do
    {
      *((_QWORD *)v16 - 9) = off_100807398;
      v16 -= 112;
    }
    while (v16 != v15);
    v20 = v15;
  }
  if (__p)
    operator delete(__p);
  return v14;
}

uint64_t sub_10032F658(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  __int128 *v13;
  uint64_t v14;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_10032F45C((char **)a1);
    if (a4 > 0x249249249249249)
      sub_100026E7C();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)) >= 0x124924924924924)
      v11 = 0x249249249249249;
    else
      v11 = v10;
    sub_10032F364((_QWORD *)a1, v11);
    result = sub_10032F3B8(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4];
    sub_10032F7E8(a2, v13, (uint64_t)v9);
    result = sub_10032F3B8(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = (uint64_t)sub_10032F7E8(a2, a3, (uint64_t)v9);
  for (i = *(_QWORD *)(a1 + 8); i != v14; i -= 112)
    *(_QWORD *)(i - 72) = off_100807398;
  *(_QWORD *)(a1 + 8) = v14;
  return result;
}

void sub_10032F7D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10032F7E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__int128 *sub_10032F7E8(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *v4;
    v7 = v4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)v4 + 4);
    *(_OWORD *)a3 = v6;
    *(_OWORD *)(a3 + 16) = v7;
    sub_10030EC4C(a3 + 40, (uint64_t)v4 + 40);
    *(_DWORD *)(a3 + 104) = *((_DWORD *)v4 + 26);
    a3 += 112;
    v4 += 7;
  }
  while (v4 != v5);
  return v5;
}

_OWORD *sub_10032F860(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = v5[1];
    *a4 = *v5;
    a4[1] = v7;
    sub_10030EC4C((uint64_t)(a4 + 2), (uint64_t)(v5 + 2));
    sub_10030EC4C((uint64_t)(a4 + 6), (uint64_t)(v5 + 6));
    a4 += 13;
    v5 += 13;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_10032F8D4(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249)
    sub_100026E7C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x124924924924924)
    v9 = 0x249249249249249;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10032EF8C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[112 * v4];
  __p = v10;
  v19 = v11;
  v20 = v11;
  v21 = &v10[112 * v9];
  v12 = *a2;
  v13 = a2[1];
  *((_QWORD *)v11 + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  sub_10031895C((uint64_t)(v11 + 40), (uint64_t)a2 + 40);
  *(_DWORD *)&v10[112 * v4 + 104] = *((_DWORD *)a2 + 26);
  v20 += 112;
  sub_10032EF18(a1, &__p);
  v14 = a1[1];
  v15 = v19;
  v16 = v20;
  if (v20 != v19)
  {
    do
    {
      *((_QWORD *)v16 - 9) = off_100807398;
      v16 -= 112;
    }
    while (v16 != v15);
    v20 = v15;
  }
  if (__p)
    operator delete(__p);
  return v14;
}

void sub_10032FA74(void ***a1)
{
  void **v1;
  char *v2;
  char *i;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 136)
    {
      *((_QWORD *)i - 8) = off_100807398;
      *((_QWORD *)i - 16) = off_100807398;
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

void sub_10032FAB8(void ***a1)
{
  void **v1;
  char *v2;
  char *i;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 192)
    {
      *((_QWORD *)i - 11) = off_100807398;
      *((_QWORD *)i - 22) = off_100807398;
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_10032FAFC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10032FBB4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10032FB70(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2)
    sub_1000260B0();
  return operator new(136 * a2);
}

uint64_t sub_10032FBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v11 = 0;
  v12 = a7 - 136;
  while (a3 + v11 != a5)
  {
    v13 = (_QWORD *)(v12 + v11);
    v11 -= 136;
    sub_10032FC58(a1, v13, (_QWORD *)(v11 + a3));
  }
  return a6;
}

double sub_10032FC58(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  double result;

  v4 = (uint64_t)(a3 + 9);
  *a2 = *a3;
  sub_10032FCB4((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
  *(_QWORD *)&result = sub_10031895C((uint64_t)(a2 + 9), v4).n128_u64[0];
  return result;
}

void sub_10032FCA4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

__n128 sub_10032FCB4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x300000001;
  *(_QWORD *)(a1 + 24) = 0x300000001;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1008162E0;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 1)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 4)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 3u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_10032FE10(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

_QWORD *sub_10032FE20(_QWORD *result)
{
  *result = off_100807398;
  return result;
}

_QWORD *sub_10032FE30(_QWORD *result)
{
  *result = off_100815C00;
  return result;
}

void sub_10032FE40(_QWORD *a1)
{
  *a1 = off_100815C00;
  operator delete();
}

uint64_t sub_10032FE60(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10032FE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[3];

  sub_10031CA0C(a1, v3, a3);
}

void sub_10032FE8C(_QWORD *a1)
{
  *a1 = off_100807398;
  operator delete();
}

uint64_t sub_10032FEAC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10032FEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3[12];

  sub_10030DC3C(a1, v3, a3);
}

void sub_10032FF04(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    if (v3 != v2)
    {
      v4 = v3 - 368;
      do
      {
        *((_QWORD *)v4 + 30) = off_100807398;
        *((_QWORD *)v4 + 16) = off_100807398;
        *((_QWORD *)v4 + 8) = off_100807398;
        *(_QWORD *)v4 = off_100807398;
        v5 = v4 - 8;
        v4 -= 376;
      }
      while (v5 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_10032FF54(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9)
    sub_100026E7C();
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL)
    v6 = 0xAE4C415C9882B9;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1003301A4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[376 * v3];
  v13 = &v7[376 * v6];
  sub_100330078((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 376;
  sub_100330130(a1, &v10);
  v8 = a1[1];
  sub_100330350((uint64_t)&v10);
  return v8;
}

void sub_100330064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100330350((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100330078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3 + 72;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = a2 + 72;
  sub_10031895C(a2 + 8, a3 + 8);
  sub_10031895C(v6, v5);
  sub_100318AC8(a2 + 136, a3 + 136);
  sub_100318AC8(a2 + 248, a3 + 248);
  v7 = *(_QWORD *)(a3 + 360);
  *(_DWORD *)(a2 + 368) = *(_DWORD *)(a3 + 368);
  *(_QWORD *)(a2 + 360) = v7;
}

void sub_100330100(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_100330130(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1003301EC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003301A4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAE4C415C9882BALL)
    sub_1000260B0();
  return operator new(376 * a2);
}

uint64_t sub_1003301EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = a7 - 376;
  while (a3 + v11 != a5)
  {
    v13 = v12 + v11;
    v11 -= 376;
    sub_100330298(a1, v13, v11 + a3);
  }
  return a6;
}

void sub_100330298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3 + 72;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = a2 + 72;
  sub_10031895C(a2 + 8, a3 + 8);
  sub_10031895C(v6, v5);
  sub_100318AC8(a2 + 136, a3 + 136);
  sub_100318AC8(a2 + 248, a3 + 248);
  v7 = *(_QWORD *)(a3 + 360);
  *(_DWORD *)(a2 + 368) = *(_DWORD *)(a3 + 368);
  *(_QWORD *)(a2 + 360) = v7;
}

void sub_100330320(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_100330350(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v3 != v2)
  {
    v4 = v3 - 46;
    do
    {
      v4[30] = off_100807398;
      v4[16] = off_100807398;
      v4[8] = off_100807398;
      *v4 = off_100807398;
      v5 = v4 - 1;
      v4 -= 47;
    }
    while (v5 != v2);
    *(_QWORD *)(a1 + 16) = v2;
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v6);
  return a1;
}

uint64_t sub_1003303B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_BYTE *)a4 = *(_BYTE *)v5;
    sub_10030EC4C(a4 + 8, v5 + 8);
    sub_10030EC4C(a4 + 72, v5 + 72);
    sub_10030EC4C(a4 + 136, v5 + 136);
    sub_10030EC4C(a4 + 248, v5 + 248);
    v7 = *(_DWORD *)(v5 + 368);
    *(_QWORD *)(a4 + 360) = *(_QWORD *)(v5 + 360);
    *(_DWORD *)(a4 + 368) = v7;
    a4 += 376;
    v5 += 376;
  }
  while (v5 != v6);
  return v6;
}

void sub_100330454(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  double v24;
  unint64_t v25;
  double v26;
  char *v27;
  double v28;
  double v29;
  char *v30;
  int v31;
  __n128 v32;
  int v33;
  BOOL v34;
  double v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  double v39;
  char *v40;
  char *v41;
  double v42;
  double v43;
  double v44;
  char *v45;
  int v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  int v87;
  _BYTE *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  double v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  BOOL v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  double v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  int64_t v117;
  double *v118;
  uint64_t v119;
  char v121;
  _BYTE v122[64];
  _BYTE v123[64];
  _BYTE v124[112];
  _BYTE v125[112];
  uint64_t v126;
  int v127;
  char v128;
  _BYTE v129[64];
  _BYTE v130[64];
  _BYTE v131[112];
  _BYTE v132[112];
  double v133;
  int v134;

void sub_100331408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  double v7;
  char *v8;

  v5 = a1;
  v6 = *(double *)(a2 + 360);
  v7 = *(double *)(a3 + 360);
  if (v6 < *(double *)(a1 + 360))
  {
    if (v7 >= v6)
    {
      sub_1003317F4((char *)a1, (char *)a2);
      if (*(double *)(a3 + 360) >= *(double *)(a2 + 360))
        return;
      a1 = a2;
    }
    v8 = (char *)a3;
    goto LABEL_9;
  }
  if (v7 < v6)
  {
    sub_1003317F4((char *)a2, (char *)a3);
    if (*(double *)(a2 + 360) < *(double *)(v5 + 360))
    {
      a1 = v5;
      v8 = (char *)a2;
LABEL_9:
      sub_1003317F4((char *)a1, v8);
    }
  }
}

BOOL sub_1003314B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  _BYTE v18[64];
  _BYTE v19[64];
  _BYTE v20[112];
  _BYTE v21[112];
  double v22;
  int v23;

  v2 = a2;
  v4 = 0x51B3BEA3677D46CFLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 360))
      {
        v6 = (char *)(a2 - 376);
        v7 = (char *)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      sub_100331408(a1, a1 + 376, a2 - 376);
      return 1;
    case 4:
      sub_100331948(a1, a1 + 376, a1 + 752, a2 - 376);
      return 1;
    case 5:
      sub_100331948(a1, a1 + 376, a1 + 752, a1 + 1128);
      if (*(double *)(v2 - 16) < *(double *)(a1 + 1488))
      {
        sub_1003317F4((char *)(a1 + 1128), (char *)(v2 - 376));
        if (*(double *)(a1 + 1488) < *(double *)(a1 + 1112))
        {
          sub_1003317F4((char *)(a1 + 752), (char *)(a1 + 1128));
          if (*(double *)(a1 + 1112) < *(double *)(a1 + 736))
          {
            sub_1003317F4((char *)(a1 + 376), (char *)(a1 + 752));
            if (*(double *)(a1 + 736) < *(double *)(a1 + 360))
            {
              v7 = (char *)a1;
              v6 = (char *)(a1 + 376);
LABEL_4:
              sub_1003317F4(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 752;
      sub_100331408(a1, a1 + 376, a1 + 752);
      v9 = a1 + 1128;
      if (a1 + 1128 == v2)
        return 1;
      v10 = 0;
      v11 = 0;
      v16 = v2;
      break;
  }
  while (*(double *)(v9 + 360) >= *(double *)(v8 + 360))
  {
LABEL_16:
    v8 = v9;
    v10 += 376;
    v9 += 376;
    if (v9 == v2)
      return 1;
  }
  v17 = *(_BYTE *)v9;
  sub_10031895C((uint64_t)v18, v9 + 8);
  sub_10031895C((uint64_t)v19, v9 + 72);
  sub_100318AC8((uint64_t)v20, v9 + 136);
  sub_100318AC8((uint64_t)v21, v9 + 248);
  v22 = *(double *)(v9 + 360);
  v23 = *(_DWORD *)(v9 + 368);
  v12 = v10;
  while (1)
  {
    v13 = a1 + v12;
    *(_BYTE *)(a1 + v12 + 1128) = *(_BYTE *)(a1 + v12 + 752);
    v14 = a1 + v12 + 760;
    sub_10030EC4C(a1 + v12 + 1136, v14);
    sub_10030EC4C(v13 + 1200, v13 + 824);
    sub_10030EC4C(v13 + 1264, v13 + 888);
    sub_10030EC4C(v13 + 1376, v13 + 1000);
    *(_QWORD *)(v13 + 1488) = *(_QWORD *)(v13 + 1112);
    *(_DWORD *)(v13 + 1496) = *(_DWORD *)(v13 + 1120);
    if (v12 == -752)
      break;
    v12 -= 376;
    if (v22 >= *(double *)(v13 + 736))
    {
      v15 = (_BYTE *)(a1 + v12 + 1128);
      goto LABEL_14;
    }
  }
  v15 = (_BYTE *)a1;
LABEL_14:
  *v15 = v17;
  sub_10030EC4C(v14, (uint64_t)v18);
  sub_10030EC4C(v13 + 824, (uint64_t)v19);
  sub_10030EC4C(v13 + 888, (uint64_t)v20);
  sub_10030EC4C(v13 + 1000, (uint64_t)v21);
  *(double *)(v13 + 1112) = v22;
  *(_DWORD *)(v13 + 1120) = v23;
  if (++v11 != 8)
  {
    v2 = v16;
    goto LABEL_16;
  }
  return v9 + 376 == v16;
}

void sub_1003317F4(char *a1, char *a2)
{
  uint64_t v4;
  char v5;
  _BYTE v6[64];
  _BYTE v7[64];
  _BYTE v8[112];
  _BYTE v9[112];
  uint64_t v10;
  int v11;

  v5 = *a1;
  sub_10031895C((uint64_t)v6, (uint64_t)(a1 + 8));
  sub_10031895C((uint64_t)v7, (uint64_t)(a1 + 72));
  sub_100318AC8((uint64_t)v8, (uint64_t)(a1 + 136));
  sub_100318AC8((uint64_t)v9, (uint64_t)(a1 + 248));
  v10 = *((_QWORD *)a1 + 45);
  v11 = *((_DWORD *)a1 + 92);
  *a1 = *a2;
  sub_10030EC4C((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  sub_10030EC4C((uint64_t)(a1 + 72), (uint64_t)(a2 + 72));
  sub_10030EC4C((uint64_t)(a1 + 136), (uint64_t)(a2 + 136));
  sub_10030EC4C((uint64_t)(a1 + 248), (uint64_t)(a2 + 248));
  v4 = *((_QWORD *)a2 + 45);
  *((_DWORD *)a1 + 92) = *((_DWORD *)a2 + 92);
  *((_QWORD *)a1 + 45) = v4;
  *a2 = v5;
  sub_10030EC4C((uint64_t)(a2 + 8), (uint64_t)v6);
  sub_10030EC4C((uint64_t)(a2 + 72), (uint64_t)v7);
  sub_10030EC4C((uint64_t)(a2 + 136), (uint64_t)v8);
  sub_10030EC4C((uint64_t)(a2 + 248), (uint64_t)v9);
  *((_QWORD *)a2 + 45) = v10;
  *((_DWORD *)a2 + 92) = v11;
}

void sub_100331948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100331408(a1, a2, a3);
  if (*(double *)(a4 + 360) < *(double *)(a3 + 360))
  {
    sub_1003317F4((char *)a3, (char *)a4);
    if (*(double *)(a3 + 360) < *(double *)(a2 + 360))
    {
      sub_1003317F4((char *)a2, (char *)a3);
      if (*(double *)(a2 + 360) < *(double *)(a1 + 360))
        sub_1003317F4((char *)a1, (char *)a2);
    }
  }
}

uint64_t sub_1003319DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9)
    sub_100026E7C();
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL)
    v6 = 0xAE4C415C9882B9;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1003301A4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[376 * v3];
  v13 = &v7[376 * v6];
  sub_100330298((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 376;
  sub_100330130(a1, &v10);
  v8 = a1[1];
  sub_100330350((uint64_t)&v10);
  return v8;
}

void sub_100331AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100330350((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100331B00(char *a1, char *a2, uint64_t a3, char a4)
{
  unint64_t k;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  int v24;
  unint64_t v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  int v32;
  char *v33;
  char *v34;
  int v35;
  __n128 v36;
  int v37;
  BOOL v38;
  unint64_t v39;
  double v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *m;
  int v48;
  unint64_t v49;
  int v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  char *v56;
  uint64_t v57;
  _BYTE *v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t i;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  int v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  double v79;
  double *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  int v107;
  double v108;
  char *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t j;
  int v121;
  int v122;
  double *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v133;
  uint64_t v134;
  int64_t v135;
  char *v136;
  int64_t v137;
  unint64_t v138;
  char *v139;
  char v140;
  _BYTE v141[64];
  _BYTE v142[64];
  _BYTE v143[112];
  _BYTE v144[112];
  uint64_t v145;
  int v146;
  char v147;
  _BYTE v148[64];
  _BYTE v149[64];
  _BYTE v150[112];
  _BYTE v151[112];
  double v152;
  int v153;

double sub_100332D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  result = sub_100333264(a1, a2, a3, a4);
  v11 = *(_DWORD *)(a5 + 368);
  v12 = *(_DWORD *)(a4 + 368);
  if (v11 < v12 || v11 <= v12 && (result = *(double *)(a5 + 360), result < *(double *)(a4 + 360)))
  {
    sub_1003317F4((char *)a4, (char *)a5);
    v13 = *(_DWORD *)(a4 + 368);
    v14 = *(_DWORD *)(a3 + 368);
    if (v13 < v14 || v13 <= v14 && (result = *(double *)(a4 + 360), result < *(double *)(a3 + 360)))
    {
      sub_1003317F4((char *)a3, (char *)a4);
      v15 = *(_DWORD *)(a3 + 368);
      v16 = *(_DWORD *)(a2 + 368);
      if (v15 < v16 || v15 <= v16 && (result = *(double *)(a3 + 360), result < *(double *)(a2 + 360)))
      {
        sub_1003317F4((char *)a2, (char *)a3);
        v17 = *(_DWORD *)(a2 + 368);
        v18 = *(_DWORD *)(a1 + 368);
        if (v17 < v18 || v17 <= v18 && (result = *(double *)(a2 + 360), result < *(double *)(a1 + 360)))
          sub_1003317F4((char *)a1, (char *)a2);
      }
    }
  }
  return result;
}

double sub_100332E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  double result;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  int v14;
  int v15;

  v5 = a1;
  v6 = *(_DWORD *)(a2 + 368);
  v7 = *(_DWORD *)(a1 + 368);
  if (v6 >= v7 && (v6 > v7 || (result = *(double *)(a2 + 360), result >= *(double *)(a1 + 360))))
  {
    v10 = *(_DWORD *)(a3 + 368);
    if (v10 < v6 || v10 <= v6 && (result = *(double *)(a3 + 360), result < *(double *)(a2 + 360)))
    {
      sub_1003317F4((char *)a2, (char *)a3);
      v11 = *(_DWORD *)(a2 + 368);
      v12 = *(_DWORD *)(v5 + 368);
      if (v11 < v12 || v11 <= v12 && (result = *(double *)(a2 + 360), result < *(double *)(v5 + 360)))
      {
        a1 = v5;
        v13 = (char *)a2;
LABEL_18:
        sub_1003317F4((char *)a1, v13);
      }
    }
  }
  else
  {
    v9 = *(_DWORD *)(a3 + 368);
    if (v9 < v6 || v9 <= v6 && *(double *)(a3 + 360) < *(double *)(a2 + 360))
      goto LABEL_17;
    sub_1003317F4((char *)a1, (char *)a2);
    v14 = *(_DWORD *)(a3 + 368);
    v15 = *(_DWORD *)(a2 + 368);
    if (v14 < v15 || v14 <= v15 && (result = *(double *)(a3 + 360), result < *(double *)(a2 + 360)))
    {
      a1 = a2;
LABEL_17:
      v13 = (char *)a3;
      goto LABEL_18;
    }
  }
  return result;
}

BOOL sub_100332F50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t i;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  _BYTE v20[64];
  _BYTE v21[64];
  _BYTE v22[112];
  _BYTE v23[112];
  double v24;
  int v25;

  v2 = a2;
  v4 = 0x51B3BEA3677D46CFLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 8);
      v7 = *(_DWORD *)(a1 + 368);
      if (v6 < v7 || v6 <= v7 && *(double *)(a2 - 16) < *(double *)(a1 + 360))
      {
        sub_1003317F4((char *)a1, (char *)(a2 - 376));
        return 1;
      }
      return result;
    case 3:
      sub_100332E34(a1, a1 + 376, a2 - 376);
      return 1;
    case 4:
      sub_100333264(a1, a1 + 376, a1 + 752, a2 - 376);
      return 1;
    case 5:
      sub_100332D18(a1, a1 + 376, a1 + 752, a1 + 1128, a2 - 376);
      return 1;
    default:
      v8 = a1 + 752;
      sub_100332E34(a1, a1 + 376, a1 + 752);
      v9 = a1 + 1128;
      if (a1 + 1128 == v2)
        return 1;
      v10 = 0;
      v11 = 0;
      v17 = v2;
      break;
  }
  while (1)
  {
    v12 = *(_DWORD *)(v9 + 368);
    v13 = *(_DWORD *)(v8 + 368);
    if (v12 >= v13 && (v12 > v13 || *(double *)(v9 + 360) >= *(double *)(v8 + 360)))
      goto LABEL_21;
    v18 = v11;
    v19 = *(_BYTE *)v9;
    sub_10031895C((uint64_t)v20, v9 + 8);
    sub_10031895C((uint64_t)v21, v9 + 72);
    sub_100318AC8((uint64_t)v22, v9 + 136);
    sub_100318AC8((uint64_t)v23, v9 + 248);
    v24 = *(double *)(v9 + 360);
    v25 = *(_DWORD *)(v9 + 368);
    for (i = v10; ; i -= 376)
    {
      v15 = a1 + i;
      *(_BYTE *)(a1 + i + 1128) = *(_BYTE *)(a1 + i + 752);
      sub_10030EC4C(a1 + i + 1136, a1 + i + 760);
      sub_10030EC4C(v15 + 1200, v15 + 824);
      sub_10030EC4C(v15 + 1264, v15 + 888);
      sub_10030EC4C(v15 + 1376, v15 + 1000);
      *(_QWORD *)(v15 + 1488) = *(_QWORD *)(v15 + 1112);
      *(_DWORD *)(v15 + 1496) = *(_DWORD *)(v15 + 1120);
      if (i == -752)
        break;
      v16 = *(_DWORD *)(v15 + 744);
      if (v25 >= v16)
      {
        if (v25 > v16)
        {
          v8 = a1 + i + 752;
          goto LABEL_19;
        }
        if (v24 >= *(double *)(a1 + i + 736))
          goto LABEL_19;
      }
      v8 -= 376;
    }
    v8 = a1;
LABEL_19:
    *(_BYTE *)v8 = v19;
    sub_10030EC4C(a1 + i + 760, (uint64_t)v20);
    sub_10030EC4C(v15 + 824, (uint64_t)v21);
    sub_10030EC4C(v15 + 888, (uint64_t)v22);
    sub_10030EC4C(v15 + 1000, (uint64_t)v23);
    *(double *)(v15 + 1112) = v24;
    *(_DWORD *)(v15 + 1120) = v25;
    v11 = v18 + 1;
    if (v18 == 7)
      return v9 + 376 == v17;
    v2 = v17;
LABEL_21:
    v8 = v9;
    v10 += 376;
    v9 += 376;
    if (v9 == v2)
      return 1;
  }
}

double sub_100333264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  result = sub_100332E34(a1, a2, a3);
  v9 = *(_DWORD *)(a4 + 368);
  v10 = *(_DWORD *)(a3 + 368);
  if (v9 < v10 || v9 <= v10 && (result = *(double *)(a4 + 360), result < *(double *)(a3 + 360)))
  {
    sub_1003317F4((char *)a3, (char *)a4);
    v11 = *(_DWORD *)(a3 + 368);
    v12 = *(_DWORD *)(a2 + 368);
    if (v11 < v12 || v11 <= v12 && (result = *(double *)(a3 + 360), result < *(double *)(a2 + 360)))
    {
      sub_1003317F4((char *)a2, (char *)a3);
      v13 = *(_DWORD *)(a2 + 368);
      v14 = *(_DWORD *)(a1 + 368);
      if (v13 < v14 || v13 <= v14 && (result = *(double *)(a2 + 360), result < *(double *)(a1 + 360)))
        sub_1003317F4((char *)a1, (char *)a2);
    }
  }
  return result;
}

uint64_t sub_100333338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, int *a7, uint64_t a8)
{
  uint64_t v13;
  double v14;
  int v15;
  uint64_t result;
  _BYTE v17[64];

  v13 = *(_QWORD *)(a1 + 8);
  v14 = *a6;
  v15 = *a7;
  sub_10031895C((uint64_t)v17, a8);
  result = sub_100333558(v13, a2, a3, a4, a5, v15, (uint64_t)v17, v14);
  *(_QWORD *)(a1 + 8) = v13 + 432;
  return result;
}

void sub_1003333D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003333D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, int *a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  double v23;
  int v24;
  uint64_t v25;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  _BYTE v32[64];

  v9 = *a1;
  v10 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 4);
  v11 = v10 + 1;
  if (v10 + 1 > 0x97B425ED097B42)
    sub_100026E7C();
  v19 = (uint64_t)(a1 + 2);
  v20 = 0x84BDA12F684BDA13 * ((a1[2] - v9) >> 4);
  if (2 * v20 > v11)
    v11 = 2 * v20;
  if (v20 >= 0x4BDA12F684BDA1)
    v21 = 0x97B425ED097B42;
  else
    v21 = v11;
  v31 = a1 + 2;
  if (v21)
    v22 = (char *)sub_1003336AC(v19, v21);
  else
    v22 = 0;
  v27 = v22;
  v28 = &v22[432 * v10];
  v29 = (uint64_t)v28;
  v30 = &v22[432 * v21];
  v23 = *a6;
  v24 = *a7;
  sub_10031895C((uint64_t)v32, a8);
  sub_100333558((uint64_t)v28, a2, a3, a4, a5, v24, (uint64_t)v32, v23);
  v29 = (uint64_t)(v28 + 432);
  sub_100333638(a1, &v27);
  v25 = a1[1];
  sub_10033384C((uint64_t)&v27);
  return v25;
}

void sub_100333544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10033384C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100333558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, double a8)
{
  uint64_t v15;

  sub_10031895C(a1, a2);
  sub_10031895C(v15 + 64, a3);
  sub_100318AC8(a1 + 128, a4);
  sub_100318AC8(a1 + 240, a5);
  *(double *)(a1 + 352) = a8;
  *(_DWORD *)(a1 + 360) = a6;
  sub_10031895C(a1 + 368, a7);
  return a1;
}

void sub_1003335F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *v4 = off_100807398;
  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_100333638(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1003336F4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003336AC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x97B425ED097B43)
    sub_1000260B0();
  return operator new(432 * a2);
}

uint64_t sub_1003336F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;

  for (i = 0; a3 + i != a5; sub_100333784(a1, i + a7, i + a3))
    i -= 432;
  return a6;
}

double sub_100333784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double result;

  sub_10031895C(a2, a3);
  sub_10031895C(a2 + 64, a3 + 64);
  sub_100318AC8(a2 + 128, a3 + 128);
  sub_100318AC8(a2 + 240, a3 + 240);
  v5 = *(_QWORD *)(a3 + 352);
  *(_DWORD *)(a2 + 360) = *(_DWORD *)(a3 + 360);
  *(_QWORD *)(a2 + 352) = v5;
  *(_QWORD *)&result = sub_10031895C(a2 + 368, a3 + 368).n128_u64[0];
  return result;
}

void sub_10033380C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *v4 = off_100807398;
  *v3 = off_100807398;
  *v2 = off_100807398;
  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_10033384C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v3 != v2)
  {
    v4 = v3 - 24;
    do
    {
      v4[16] = off_100807398;
      *v4 = off_100807398;
      *(v4 - 14) = off_100807398;
      *(v4 - 22) = off_100807398;
      *(v4 - 30) = off_100807398;
      v5 = v4 - 30 == v2;
      v4 -= 54;
    }
    while (!v5);
    *(_QWORD *)(a1 + 16) = v2;
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v6);
  return a1;
}

uint64_t sub_1003338B8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10033392C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10033392C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;

  v11 = 0;
  v12 = a7 - 192;
  while (a3 + v11 != a5)
  {
    v13 = (_OWORD *)(v12 + v11);
    v11 -= 192;
    sub_1003339D0(a1, v13, (_OWORD *)(v11 + a3));
  }
  return a6;
}

double sub_1003339D0(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  double result;

  *a2 = *a3;
  sub_100333A2C((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
  *(_QWORD *)&result = sub_100333B98((uint64_t)a2 + 104, (uint64_t)a3 + 104).n128_u64[0];
  return result;
}

void sub_100333A1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

__n128 sub_100333A2C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x300000002;
  *(_QWORD *)(a1 + 24) = 0x300000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100816328;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 4)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 3u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_100333B88(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

__n128 sub_100333B98(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x200000003;
  *(_QWORD *)(a1 + 24) = 0x200000003;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100816370;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 3)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 3)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 2u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_100333CF4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_100333D04(uint64_t *a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  double *v16;
  double *v17;
  void *__p;
  double *v20;
  double *v21;
  char *v22;
  uint64_t *v23;

  v5 = *a1;
  v6 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x1E1E1E1E1E1E1E1)
    sub_100026E7C();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0xF0F0F0F0F0F0F0)
    v13 = 0x1E1E1E1E1E1E1E1;
  else
    v13 = v7;
  v23 = a1 + 2;
  if (v13)
    v14 = (char *)sub_10032FB70(v11, v13);
  else
    v14 = 0;
  __p = v14;
  v20 = (double *)&v14[136 * v6];
  v21 = v20;
  v22 = &v14[136 * v13];
  sub_100333E88(v20, a3, a4, *a2);
  v21 = v20 + 17;
  sub_10032FAFC(a1, &__p);
  v15 = a1[1];
  v16 = v20;
  v17 = v21;
  if (v21 != v20)
  {
    do
    {
      *((_QWORD *)v17 - 8) = off_100807398;
      *((_QWORD *)v17 - 16) = off_100807398;
      v17 -= 17;
    }
    while (v17 != v16);
    v21 = v16;
  }
  if (__p)
    operator delete(__p);
  return v15;
}

double *sub_100333E88(double *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;

  *a1 = a4;
  v6 = (uint64_t)(a1 + 9);
  sub_10032FCB4((uint64_t)(a1 + 1), a2);
  sub_10031895C(v6, a3);
  return a1;
}

void sub_100333ED4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_100333EE4(uint64_t *a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  double *v18;
  double *v19;
  void *__p;
  double *v22;
  double *v23;
  char *v24;
  uint64_t *v25;

  v6 = *a1;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  v8 = v7 + 1;
  if (v7 + 1 > 0x155555555555555)
    sub_100026E7C();
  v13 = (uint64_t)(a1 + 2);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 6);
  if (2 * v14 > v8)
    v8 = 2 * v14;
  if (v14 >= 0xAAAAAAAAAAAAAALL)
    v15 = 0x155555555555555;
  else
    v15 = v8;
  v25 = a1 + 2;
  if (v15)
    v16 = (char *)sub_1003187E0(v13, v15);
  else
    v16 = 0;
  __p = v16;
  v22 = (double *)&v16[192 * v7];
  v23 = v22;
  v24 = &v16[192 * v15];
  sub_100334070(v22, a4, a5, *a2, *a3);
  v23 = v22 + 24;
  sub_1003338B8(a1, &__p);
  v17 = a1[1];
  v18 = v22;
  v19 = v23;
  if (v23 != v22)
  {
    do
    {
      *((_QWORD *)v19 - 11) = off_100807398;
      *((_QWORD *)v19 - 22) = off_100807398;
      v19 -= 24;
    }
    while (v19 != v18);
    v23 = v18;
  }
  if (__p)
    operator delete(__p);
  return v17;
}

double *sub_100334070(double *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  *a1 = a4;
  a1[1] = a5;
  sub_100333A2C((uint64_t)(a1 + 2), a2);
  sub_100333B98((uint64_t)(a1 + 13), a3);
  return a1;
}

void sub_1003340B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003340C8(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *__p;
  char *v13;
  char *v14;
  char *v15;
  uint64_t *v16;

  v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x13B13B13B13B13BLL)
    sub_100026E7C();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 4)) >= 0x9D89D89D89D89DLL)
    v6 = 0x13B13B13B13B13BLL;
  else
    v6 = v4;
  v16 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100334324((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  __p = v7;
  v13 = &v7[208 * v3];
  v15 = &v7[208 * v6];
  sub_100334254((uint64_t)(a1 + 2), v13, a2);
  v14 = v13 + 208;
  sub_1003342B0(a1, &__p);
  v8 = a1[1];
  v9 = v13;
  v10 = v14;
  if (v14 != v13)
  {
    do
    {
      *((_QWORD *)v10 - 14) = off_100807398;
      *((_QWORD *)v10 - 22) = off_100807398;
      v10 -= 208;
    }
    while (v10 != v9);
    v14 = v9;
  }
  if (__p)
    operator delete(__p);
  return v8;
}

double sub_100334254(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v5;
  double result;

  v5 = a3[1];
  *a2 = *a3;
  a2[1] = v5;
  sub_10031895C((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
  *(_QWORD *)&result = sub_100318AC8((uint64_t)(a2 + 6), (uint64_t)(a3 + 6)).n128_u64[0];
  return result;
}

void sub_1003342A0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

uint64_t sub_1003342B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10033436C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100334324(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13B13B13B13B13CLL)
    sub_1000260B0();
  return operator new(208 * a2);
}

uint64_t sub_10033436C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;

  v11 = 0;
  v12 = a7 - 208;
  while (a3 + v11 != a5)
  {
    v13 = (_OWORD *)(v12 + v11);
    v11 -= 208;
    sub_100334254(a1, v13, (_OWORD *)(v11 + a3));
  }
  return a6;
}

uint64_t sub_100334410()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10085E170 = 0;
  qword_10085E178 = 0;
  qword_10085E180 = 0;
  v0 = operator new(0x40uLL);
  qword_10085E178 = (uint64_t)(v0 + 4);
  qword_10085E180 = (uint64_t)(v0 + 4);
  *v0 = xmmword_100479508;
  v0[1] = unk_100479518;
  v0[2] = xmmword_100479528;
  v0[3] = unk_100479538;
  qword_10085E170 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085E170, (void *)&_mh_execute_header);
  qword_10085E190 = 0;
  unk_10085E198 = 0;
  qword_10085E188 = 0;
  v1 = operator new(0x10uLL);
  qword_10085E190 = (uint64_t)(v1 + 1);
  unk_10085E198 = v1 + 1;
  *v1 = xmmword_100479548;
  qword_10085E188 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085E188, (void *)&_mh_execute_header);
}

uint64_t sub_1003344CC(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  sub_10034E340(a1 + 304);
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_BYTE *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 1040) = xmmword_1004795D0;
  *(_QWORD *)(a1 + 1056) = 0x3FF47AE147AE147BLL;
  *(_OWORD *)(a1 + 288) = 0u;
  return a1;
}

uint64_t sub_10033454C@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  float64x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  float32x4_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  double v30;
  char v31;
  uint64_t v32;
  _OWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  unsigned int v37;
  _DWORD *v38;
  double v39;
  double v40;
  double v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double v45;
  __int128 v46;
  int8x16_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  float64x2_t v51;
  double v52;
  float64x2_t v53;
  double v54;
  double v55;
  double v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  unint64_t v62;
  int8x16_t v63;
  char v64;
  char v65;
  double v66;
  char v67;
  char v68;
  char v69;
  char v70;
  int v71;
  double v72;
  char v73;
  __int128 v74;
  float64x2_t *v75;
  __int128 v76;
  int8x16_t v77;
  float64x2_t v78;
  _BYTE v79[7];
  _BYTE v80[7];
  _BYTE v81[7];
  _BYTE v82[7];
  _BYTE v83[7];
  _BYTE v84[7];
  _BYTE v85[7];
  _BYTE v86[7];
  _BYTE v87[7];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[7];
  uint64_t v100;
  _BYTE v101[7];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[31];
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE v121[31];
  _BYTE v122[97];
  _BYTE v123[31];
  _BYTE v124[97];
  _BYTE v125[31];
  float32x4_t v126;
  char v127;
  float v128;
  float v129;
  float v130;
  int8x16_t v131;
  uint64_t v132;

  v9 = (float64x2_t *)(a3 + 408);
  v10 = (uint64_t)&a1[19];
  sub_10034E750((uint64_t)&a1[19], a2, (uint64_t)&v126, a4);
  sub_100310848((uint64_t)&a1[42], (uint64_t)&v126, (uint64_t)v124, a5);
  v76 = *(_OWORD *)&v124[32];
  v77 = *(int8x16_t *)&v124[48];
  v11 = *(_QWORD *)&v124[64];
  if (!v127)
    goto LABEL_17;
  v74 = *(_OWORD *)v124;
  v12 = v124[16];
  result = sub_10034E338(v10);
  if ((_DWORD)result == 4)
  {
    if (v127)
    {
      v71 = v12;
      v14 = vaddq_f32(v126, a1[18]);
      a1[18] = v14;
      HIDWORD(v15) = 0;
      *(float *)&v15 = (float)((float)((float)(*(float *)v131.i32 * *(float *)v131.i32)
                                     - (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[1]))
                             - (float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[2]))
                     + (float)(*(float *)&v131.i32[3] * *(float *)&v131.i32[3]);
      HIDWORD(v16) = 0;
      *((float *)&v15 + 1) = (float)((float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[3])
                                   + (float)(*(float *)v131.i32 * *(float *)&v131.i32[1]))
                           + (float)((float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[3])
                                   + (float)(*(float *)v131.i32 * *(float *)&v131.i32[1]));
      *((float *)&v15 + 2) = (float)-(float)((float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[3])
                                           - (float)(*(float *)v131.i32 * *(float *)&v131.i32[2]))
                           - (float)((float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[3])
                                   - (float)(*(float *)v131.i32 * *(float *)&v131.i32[2]));
      HIDWORD(v17) = 0;
      *(float *)&v17 = (float)-(float)((float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[3])
                                     - (float)(*(float *)v131.i32 * *(float *)&v131.i32[1]))
                     - (float)((float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[3])
                             - (float)(*(float *)v131.i32 * *(float *)&v131.i32[1]));
      *((float *)&v17 + 1) = (float)((float)((float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[1])
                                           - (float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[2]))
                                   + (float)(*(float *)&v131.i32[3] * *(float *)&v131.i32[3]))
                           - (float)(*(float *)v131.i32 * *(float *)v131.i32);
      *((float *)&v17 + 2) = (float)((float)(*(float *)v131.i32 * *(float *)&v131.i32[3])
                                   + (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[2]))
                           + (float)((float)(*(float *)v131.i32 * *(float *)&v131.i32[3])
                                   + (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[2]));
      *(float *)&v16 = (float)((float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[3])
                             + (float)(*(float *)&v131.i32[2] * *(float *)v131.i32))
                     + (float)((float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[3])
                             + (float)(*(float *)&v131.i32[2] * *(float *)v131.i32));
      *((float *)&v16 + 1) = (float)-(float)((float)(*(float *)v131.i32 * *(float *)&v131.i32[3])
                                           - (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[2]))
                           - (float)((float)(*(float *)v131.i32 * *(float *)&v131.i32[3])
                                   - (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[2]));
      *((float *)&v16 + 2) = (float)((float)((float)(*(float *)&v131.i32[3] * *(float *)&v131.i32[3])
                                           + (float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[2]))
                                   - (float)(*(float *)v131.i32 * *(float *)v131.i32))
                           - (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[1]);
      v14.i32[3] = 1.0;
      *(_QWORD *)v124 = v132;
      *(_OWORD *)&v124[16] = v15;
      *(_OWORD *)&v124[32] = v17;
      *(_OWORD *)&v124[48] = v16;
      *(float32x4_t *)&v124[64] = v14;
      *(_DWORD *)&v124[80] = 2;
      *(_WORD *)&v124[84] = 0;
      v124[88] = 0;
      v124[96] = 0;
      v125[15] = 0;
      v125[19] = 0;
      *(_DWORD *)&v125[7] = 1;
      v125[11] = 1;
      sub_100310A50((uint64_t)&a1[42], (__int128 *)v124, (double *)v122, a5);
      v118 = *(_OWORD *)&v122[49];
      v117 = *(_OWORD *)&v122[33];
      v116 = *(_OWORD *)&v122[17];
      v114 = *(_OWORD *)&v122[1];
      *(_OWORD *)&v121[15] = *(_OWORD *)&v123[15];
      v120 = *(_OWORD *)&v122[81];
      *(_OWORD *)v121 = *(_OWORD *)v123;
      v119 = *(_OWORD *)&v122[65];
      v110 = *(_OWORD *)&v124[49];
      v109 = *(_OWORD *)&v124[33];
      v108 = *(_OWORD *)&v124[17];
      v106 = *(_OWORD *)&v124[1];
      *(_OWORD *)&v113[15] = *(_OWORD *)&v125[15];
      *(_OWORD *)v113 = *(_OWORD *)v125;
      v112 = *(_OWORD *)&v124[81];
      v111 = *(_OWORD *)&v124[65];
      if (v127)
      {
        v18 = *(_BYTE *)(a2 + 32);
        if (v18)
        {
          v19 = *(_BYTE *)(a2 + 48);
          if (v19)
          {
            v20 = *(_BYTE *)(a2 + 64);
            if (v20)
            {
              if (*(_BYTE *)(a2 + 80))
              {
                if (*(_BYTE *)(a2 + 96))
                {
                  if (*(_BYTE *)(a2 + 112))
                  {
                    v57 = v124[0];
                    v58 = v122[0];
                    v65 = *(_BYTE *)(a2 + 80);
                    v67 = *(_BYTE *)(a2 + 96);
                    v69 = *(_BYTE *)(a2 + 112);
                    v21 = *(_QWORD *)a2;
                    v59 = *(_BYTE *)(a2 + 8);
                    v61 = *(_BYTE *)(a2 + 16);
                    v22 = (_DWORD *)(a2 + 17);
                    v23 = (_DWORD *)(a2 + 33);
                    v24 = (_DWORD *)(a2 + 49);
                    v25 = (_DWORD *)(a2 + 65);
                    v26 = (_DWORD *)(a2 + 81);
                    v27 = (_DWORD *)(a2 + 97);
                    v28 = (_DWORD *)(a2 + 113);
                    v29 = (_DWORD *)(a2 + 153);
                    v63 = v131;
                    *(_DWORD *)v87 = *(_DWORD *)(a2 + 9);
                    *(_DWORD *)&v87[3] = *(_DWORD *)(a2 + 12);
                    *(_DWORD *)v86 = *(_DWORD *)(a2 + 17);
                    *(_DWORD *)&v86[3] = *(_DWORD *)(a2 + 20);
                    *(_DWORD *)v85 = *(_DWORD *)(a2 + 33);
                    *(_DWORD *)&v85[3] = *(_DWORD *)(a2 + 36);
                    *(_DWORD *)&v84[3] = *(_DWORD *)(a2 + 52);
                    *(_DWORD *)v84 = *(_DWORD *)(a2 + 49);
                    *(_DWORD *)&v83[3] = *(_DWORD *)(a2 + 68);
                    *(_DWORD *)v83 = *(_DWORD *)(a2 + 65);
                    *(_DWORD *)v82 = *(_DWORD *)(a2 + 81);
                    *(_DWORD *)&v82[3] = *(_DWORD *)(a2 + 84);
                    *(_DWORD *)v81 = *(_DWORD *)(a2 + 97);
                    *(_DWORD *)&v81[3] = *(_DWORD *)(a2 + 100);
                    *(_DWORD *)v80 = *(_DWORD *)(a2 + 113);
                    *(_DWORD *)&v80[3] = *(_DWORD *)(a2 + 116);
                    *(_DWORD *)&v79[3] = *(_DWORD *)(a2 + 156);
                    *(_DWORD *)v79 = *(_DWORD *)(a2 + 153);
                    if (v71)
                    {
                      v30 = v126.f32[1];
                      *(_DWORD *)v101 = *(_DWORD *)(a2 + 9);
                      v52 = v126.f32[2];
                      v54 = v128;
                      *(_DWORD *)&v101[3] = *(_DWORD *)(a2 + 12);
                      v55 = v129;
                      v56 = v126.f32[0];
                      *(_DWORD *)v99 = *v22;
                      v72 = v130;
                      if (*(unsigned __int8 *)(a2 + 152) <= 1u)
                        v31 = 1;
                      else
                        v31 = *(_BYTE *)(a2 + 152);
                      *(_DWORD *)&v99[3] = *(_DWORD *)((char *)v22 + 3);
                      LODWORD(v97) = *v23;
                      *(_DWORD *)((char *)&v97 + 3) = *(_DWORD *)((char *)v23 + 3);
                      *(_DWORD *)((char *)&v95 + 3) = *(_DWORD *)((char *)v24 + 3);
                      LODWORD(v95) = *v24;
                      *(_DWORD *)((char *)&v93 + 3) = *(_DWORD *)((char *)v25 + 3);
                      LODWORD(v93) = *v25;
                      LODWORD(v91) = *v26;
                      *(_DWORD *)((char *)&v91 + 3) = *(_DWORD *)((char *)v26 + 3);
                      LODWORD(v90) = *v27;
                      *(_DWORD *)((char *)&v90 + 3) = *(_DWORD *)((char *)v27 + 3);
                      LODWORD(v89) = *v28;
                      *(_DWORD *)((char *)&v89 + 3) = *(_DWORD *)((char *)v28 + 3);
                      *(_DWORD *)((char *)&v88 + 3) = *(_DWORD *)((char *)v29 + 3);
                      LODWORD(v88) = *v29;
                      result = sub_10034E338(v10);
                      *(_OWORD *)(a3 + 65) = v119;
                      *(_OWORD *)(a3 + 81) = v120;
                      *(_OWORD *)(a3 + 97) = *(_OWORD *)v121;
                      *(_OWORD *)(a3 + 112) = *(_OWORD *)&v121[15];
                      *(_OWORD *)(a3 + 1) = v114;
                      *(_OWORD *)(a3 + 17) = v116;
                      *(_OWORD *)(a3 + 33) = v117;
                      *(_BYTE *)a3 = v58;
                      *(_OWORD *)(a3 + 49) = v118;
                      *(_BYTE *)(a3 + 128) = 1;
                      *(_BYTE *)(a3 + 144) = v57;
                      *(_OWORD *)(a3 + 209) = v111;
                      *(_OWORD *)(a3 + 225) = v112;
                      *(_OWORD *)(a3 + 241) = *(_OWORD *)v113;
                      *(_OWORD *)(a3 + 256) = *(_OWORD *)&v113[15];
                      *(_OWORD *)(a3 + 145) = v106;
                      *(_OWORD *)(a3 + 161) = v108;
                      *(_OWORD *)(a3 + 177) = v109;
                      *(_OWORD *)(a3 + 193) = v110;
                      *(_BYTE *)(a3 + 272) = 1;
                      *(_QWORD *)(a3 + 288) = v21;
                      *(_BYTE *)(a3 + 296) = v59;
                      *(_DWORD *)(a3 + 300) = *(_DWORD *)&v101[3];
                      *(_DWORD *)(a3 + 297) = *(_DWORD *)v101;
                      *(_BYTE *)(a3 + 304) = v61;
                      *(_DWORD *)(a3 + 308) = *(_DWORD *)&v99[3];
                      *(_DWORD *)(a3 + 305) = *(_DWORD *)v99;
                      *(double *)(a3 + 312) = *(float *)&v74;
                      *(_BYTE *)(a3 + 320) = v18;
                      *(_DWORD *)(a3 + 324) = *(_DWORD *)((char *)&v97 + 3);
                      *(_DWORD *)(a3 + 321) = v97;
                      *(double *)(a3 + 328) = *((float *)&v74 + 1);
                      *(_BYTE *)(a3 + 336) = v19;
                      *(_DWORD *)(a3 + 340) = *(_DWORD *)((char *)&v95 + 3);
                      *(_DWORD *)(a3 + 337) = v95;
                      *(double *)(a3 + 344) = *((float *)&v74 + 2);
                      *(_BYTE *)(a3 + 352) = v20;
                      *(_DWORD *)(a3 + 356) = *(_DWORD *)((char *)&v93 + 3);
                      *(_DWORD *)(a3 + 353) = v93;
                      *(double *)(a3 + 360) = *(float *)&v76;
                      *(_BYTE *)(a3 + 368) = v65;
                      *(_DWORD *)(a3 + 372) = *(_DWORD *)((char *)&v91 + 3);
                      *(_DWORD *)(a3 + 369) = v91;
                      *(double *)(a3 + 376) = *((float *)&v76 + 1);
                      *(_BYTE *)(a3 + 384) = v67;
                      *(_DWORD *)(a3 + 388) = *(_DWORD *)((char *)&v90 + 3);
                      *(_DWORD *)(a3 + 385) = v90;
                      *(double *)(a3 + 392) = *((float *)&v76 + 2);
                      *(_BYTE *)(a3 + 400) = v69;
                      *(_DWORD *)(a3 + 404) = *(_DWORD *)((char *)&v89 + 3);
                      *(_DWORD *)(a3 + 401) = v89;
                      *v9 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 0xCuLL));
                      v9[1] = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 4uLL));
                      *(_BYTE *)(a3 + 440) = v31;
                      *(_DWORD *)(a3 + 444) = *(_DWORD *)((char *)&v88 + 3);
                      *(_DWORD *)(a3 + 441) = v88;
                      *(_QWORD *)(a3 + 448) = v21;
                      *(_BYTE *)(a3 + 456) = v59;
                      *(_DWORD *)(a3 + 460) = *(_DWORD *)&v87[3];
                      *(_DWORD *)(a3 + 457) = *(_DWORD *)v87;
                      *(_BYTE *)(a3 + 464) = v61;
                      *(_DWORD *)(a3 + 468) = *(_DWORD *)&v86[3];
                      *(_DWORD *)(a3 + 465) = *(_DWORD *)v86;
                      *(double *)(a3 + 472) = v56;
                      *(_BYTE *)(a3 + 480) = v18;
                      *(_DWORD *)(a3 + 484) = *(_DWORD *)&v85[3];
                      *(_DWORD *)(a3 + 481) = *(_DWORD *)v85;
                      *(double *)(a3 + 488) = v30;
                      *(_BYTE *)(a3 + 496) = v19;
                      *(_DWORD *)(a3 + 500) = *(_DWORD *)&v84[3];
                      *(_DWORD *)(a3 + 497) = *(_DWORD *)v84;
                      *(double *)(a3 + 504) = v52;
                      *(_BYTE *)(a3 + 512) = v20;
                      *(_DWORD *)(a3 + 516) = *(_DWORD *)&v83[3];
                      *(_DWORD *)(a3 + 513) = *(_DWORD *)v83;
                      *(double *)(a3 + 520) = v54;
                      *(_BYTE *)(a3 + 528) = v65;
                      *(_DWORD *)(a3 + 532) = *(_DWORD *)&v82[3];
                      *(_DWORD *)(a3 + 529) = *(_DWORD *)v82;
                      *(double *)(a3 + 536) = v55;
                      *(_BYTE *)(a3 + 544) = v67;
                      *(_DWORD *)(a3 + 548) = *(_DWORD *)&v81[3];
                      *(_DWORD *)(a3 + 545) = *(_DWORD *)v81;
                      *(double *)(a3 + 552) = v72;
                      *(_BYTE *)(a3 + 560) = v69;
                      *(_DWORD *)(a3 + 564) = *(_DWORD *)&v80[3];
                      *(_DWORD *)(a3 + 561) = *(_DWORD *)v80;
                      v9[10] = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 0xCuLL));
                      v9[11] = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 4uLL));
                      *(_BYTE *)(a3 + 600) = v31;
                      *(_DWORD *)(a3 + 604) = *(_DWORD *)&v79[3];
                      *(_DWORD *)(a3 + 601) = *(_DWORD *)v79;
                      *(_DWORD *)(a3 + 608) = result;
                      *(_DWORD *)(a3 + 620) = v105;
                      *(_QWORD *)(a3 + 612) = v103;
LABEL_24:
                      *(_BYTE *)(a3 + 624) = 1;
                      return result;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_26;
  }
  if (!v127)
  {
LABEL_17:
    result = sub_10034E338(v10);
    if ((_DWORD)result == 1)
    {
      if (*(_BYTE *)(a2 + 80))
      {
        if (*(_BYTE *)(a2 + 96))
        {
          v68 = *(_BYTE *)(a2 + 80);
          v70 = *(_BYTE *)(a2 + 96);
          v75 = v9;
          v73 = *(_BYTE *)(a2 + 112);
          if (v73)
          {
            v32 = *(_QWORD *)a2;
            v64 = *(_BYTE *)(a2 + 8);
            v33 = (_OWORD *)(a2 + 17);
            v34 = (_DWORD *)(a2 + 81);
            v35 = (_DWORD *)(a2 + 97);
            v36 = (_DWORD *)(a2 + 113);
            v37 = *(unsigned __int8 *)(a2 + 152);
            v38 = (_DWORD *)(a2 + 153);
            v39 = v128;
            v40 = v129;
            v41 = v130;
            v66 = *(float *)&v131.i32[2];
            if (v37 <= 1)
              LOBYTE(v37) = 1;
            v60 = v37;
            LODWORD(v100) = *(_DWORD *)(a2 + 9);
            *(_DWORD *)((char *)&v100 + 3) = *(_DWORD *)(a2 + 12);
            v42 = *(_OWORD *)(a2 + 33);
            *(_OWORD *)v122 = *v33;
            *(_OWORD *)&v122[16] = v42;
            v44 = *v33;
            v43 = *(_OWORD *)(a2 + 33);
            *(_OWORD *)&v122[32] = *(_OWORD *)(a2 + 49);
            *(_QWORD *)&v122[47] = *(_QWORD *)(a2 + 64);
            *(_DWORD *)((char *)&v98 + 3) = *(_DWORD *)(a2 + 84);
            LODWORD(v98) = *v34;
            *(_DWORD *)((char *)&v96 + 3) = *(_DWORD *)(a2 + 100);
            LODWORD(v96) = *v35;
            *(_DWORD *)((char *)&v94 + 3) = *(_DWORD *)(a2 + 116);
            LODWORD(v94) = *v36;
            v45 = *(float *)&v131.i32[3];
            v62 = COERCE_UNSIGNED_INT64(*(float *)&v131.i32[3]) >> 8;
            *(_DWORD *)((char *)&v92 + 3) = *(_DWORD *)(a2 + 156);
            LODWORD(v92) = *v38;
            v46 = *(_OWORD *)(a2 + 49);
            *(_QWORD *)&v124[47] = *(_QWORD *)(a2 + 64);
            *(_OWORD *)&v124[16] = v43;
            *(_OWORD *)&v124[32] = v46;
            *(_OWORD *)v124 = v44;
            *(_DWORD *)((char *)&v115 + 3) = *(_DWORD *)(a2 + 84);
            LODWORD(v115) = *v34;
            *(_DWORD *)((char *)&v107 + 3) = *(_DWORD *)(a2 + 100);
            LODWORD(v107) = *v35;
            *(_DWORD *)((char *)&v104 + 3) = *(_DWORD *)(a2 + 116);
            LODWORD(v104) = *v36;
            *(_DWORD *)((char *)&v102 + 3) = *(_DWORD *)(a2 + 156);
            v47 = v77;
            v53 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 0xCuLL));
            v51 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 4uLL));
            LODWORD(v102) = *v38;
            v78 = vcvtq_f64_f32(*(float32x2_t *)v131.i8);
            v48 = *(_BYTE *)(a2 + 16);
            result = sub_10034E338(v10);
            *(_BYTE *)a3 = 0;
            *(_BYTE *)(a3 + 128) = 0;
            *(_BYTE *)(a3 + 144) = 0;
            *(_BYTE *)(a3 + 272) = 0;
            *(_QWORD *)(a3 + 288) = v32;
            *(_QWORD *)(a3 + 296) = v11;
            *(_BYTE *)(a3 + 304) = 1;
            v49 = *(_OWORD *)&v124[16];
            *(_OWORD *)(a3 + 305) = *(_OWORD *)v124;
            *(_OWORD *)(a3 + 321) = v49;
            *(_OWORD *)(a3 + 337) = *(_OWORD *)&v124[32];
            *(_QWORD *)(a3 + 352) = *(_QWORD *)&v124[47];
            *(double *)(a3 + 360) = *(float *)&v76;
            *(_BYTE *)(a3 + 368) = v68;
            *(_DWORD *)(a3 + 372) = *(_DWORD *)((char *)&v115 + 3);
            *(_DWORD *)(a3 + 369) = v115;
            *(double *)(a3 + 376) = *((float *)&v76 + 1);
            *(_BYTE *)(a3 + 384) = v70;
            *(_DWORD *)(a3 + 388) = *(_DWORD *)((char *)&v107 + 3);
            *(_DWORD *)(a3 + 385) = v107;
            *(double *)(a3 + 392) = *((float *)&v76 + 2);
            *(_BYTE *)(a3 + 400) = v73;
            *(_DWORD *)(a3 + 404) = *(_DWORD *)((char *)&v104 + 3);
            *(_DWORD *)(a3 + 401) = v104;
            *v75 = v53;
            v75[1] = v51;
            *(_BYTE *)(a3 + 440) = v60;
            *(_DWORD *)(a3 + 444) = *(_DWORD *)((char *)&v102 + 3);
            *(_DWORD *)(a3 + 441) = v102;
            *(_QWORD *)(a3 + 448) = v32;
            *(_BYTE *)(a3 + 456) = v64;
            *(_DWORD *)(a3 + 460) = *(_DWORD *)((char *)&v100 + 3);
            *(_DWORD *)(a3 + 457) = v100;
            *(_BYTE *)(a3 + 464) = v48;
            *(_QWORD *)(a3 + 512) = *(_QWORD *)&v122[47];
            v50 = *(_OWORD *)&v122[16];
            *(_OWORD *)(a3 + 465) = *(_OWORD *)v122;
            *(_OWORD *)(a3 + 481) = v50;
            *(_OWORD *)(a3 + 497) = *(_OWORD *)&v122[32];
            *(double *)(a3 + 520) = v39;
            *(_BYTE *)(a3 + 528) = v68;
            *(_DWORD *)(a3 + 529) = v98;
            *(_DWORD *)(a3 + 532) = *(_DWORD *)((char *)&v98 + 3);
            *(double *)(a3 + 536) = v40;
            *(_BYTE *)(a3 + 544) = v70;
            *(_DWORD *)(a3 + 545) = v96;
            *(_DWORD *)(a3 + 548) = *(_DWORD *)((char *)&v96 + 3);
            *(double *)(a3 + 552) = v41;
            *(_BYTE *)(a3 + 560) = v73;
            *(_DWORD *)(a3 + 561) = v94;
            *(_DWORD *)(a3 + 564) = *(_DWORD *)((char *)&v94 + 3);
            *(_BYTE *)(a3 + 568) = LOBYTE(v45);
            HIBYTE(v75[10].f64[0]) = HIBYTE(v45);
            *(_WORD *)((char *)v75[10].f64 + 5) = HIDWORD(v45) >> 8;
            *(_DWORD *)((char *)v75[10].f64 + 1) = v62;
            *(float64x2_t *)(a3 + 576) = v78;
            *(double *)(a3 + 592) = v66;
            *(_BYTE *)(a3 + 600) = v60;
            *(_DWORD *)(a3 + 604) = *(_DWORD *)((char *)&v92 + 3);
            *(_DWORD *)(a3 + 601) = v92;
            *(_DWORD *)(a3 + 608) = result;
            goto LABEL_24;
          }
        }
      }
LABEL_26:
      sub_10000BA44();
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 624) = 0;
  return result;
}

uint64_t sub_100335178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  __n128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  char v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int16 v21;
  float32x4_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[8];
  float32x4_t v36;
  char v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  float32x4_t v52;
  __int128 v53;
  _BYTE v54[32];
  unsigned __int8 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  float32x4_t v60;
  __int128 v61;
  uint64_t v62;
  _BYTE v63[19];

  v5 = (_QWORD *)(a1 + 304);
  sub_10034F050(a1 + 304, a2, (uint64_t)&v56);
  if ((_DWORD)v61 == 2)
  {
    v6.n128_f64[0] = *(double *)&v56 - *(double *)(a1 + 1056);
    sub_10034E6E0(v5, (uint64_t)&v48, v6);
    v7 = v55;
    if (v55)
    {
      if (*(_BYTE *)(a1 + 128))
        *(float32x4_t *)(a1 + 288) = vaddq_f32(*(float32x4_t *)(a1 + 288), vsubq_f32(v52, *(float32x4_t *)(a1 + 64)));
      v8 = *(_OWORD *)&v54[16];
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v54;
      *(_OWORD *)(a1 + 112) = v8;
      *(_BYTE *)(a1 + 128) = v55;
      v9 = v51;
      *(_OWORD *)(a1 + 32) = v50;
      *(_OWORD *)(a1 + 48) = v9;
      v10 = v53;
      *(float32x4_t *)(a1 + 64) = v52;
      *(_OWORD *)(a1 + 80) = v10;
      v11 = v49;
      *(_OWORD *)a1 = v48;
      *(_OWORD *)(a1 + 16) = v11;
    }
    v44 = v48;
    v45 = v49;
    v46 = v50;
    v47 = v51;
    v33 = v53;
    v34 = *(_QWORD *)v54;
    v12 = *(_DWORD *)&v54[8];
    v13 = v54[12];
    *(_DWORD *)((char *)v43 + 15) = *(_DWORD *)&v54[28];
    v14 = *(float32x4_t *)(a1 + 288);
    v14.i32[3] = 1.0;
    v39 = v56;
    v40 = v57;
    v41 = v58;
    v42 = v59;
    v43[0] = *(_OWORD *)&v54[13];
    v31 = v61;
    v32 = v62;
    v38[0] = *(_OWORD *)v63;
    *(_DWORD *)((char *)v38 + 15) = *(_DWORD *)&v63[15];
    if (v7)
    {
      v12 = 0;
      v15 = v14;
      v16 = vaddq_f32(v14, vsubq_f32(v60, v52));
      v13 = 1;
    }
    else
    {
      v29 = v14;
      v30 = v52;
      sub_10034E460(v5, (uint64_t)v35);
      v16 = v29;
      if (v37)
      {
        v22 = *(float32x4_t *)(a1 + 288);
        v22.i32[3] = 1.0;
        v16 = vaddq_f32(vsubq_f32(v60, v36), v22);
      }
      v15 = v30;
    }
    *(_QWORD *)(a3 + 288) = 0;
    *(_BYTE *)(a3 + 296) = 0;
    *(_BYTE *)(a3 + 304) = 0;
    *(_BYTE *)(a3 + 440) = 0;
    *(_QWORD *)(a3 + 448) = 0;
    *(_BYTE *)(a3 + 456) = 0;
    *(_BYTE *)(a3 + 464) = 0;
    *(_BYTE *)(a3 + 600) = 0;
    *(_BYTE *)(a3 + 408) = 0;
    *(_OWORD *)(a3 + 312) = 0u;
    *(_OWORD *)(a3 + 328) = 0u;
    *(_OWORD *)(a3 + 344) = 0u;
    *(_OWORD *)(a3 + 360) = 0u;
    *(_OWORD *)(a3 + 376) = 0u;
    *(_OWORD *)(a3 + 392) = 0u;
    *(_BYTE *)(a3 + 568) = 0;
    *(_OWORD *)(a3 + 472) = 0u;
    *(_OWORD *)(a3 + 488) = 0u;
    *(_OWORD *)(a3 + 504) = 0u;
    *(_OWORD *)(a3 + 520) = 0u;
    *(_OWORD *)(a3 + 536) = 0u;
    *(_OWORD *)(a3 + 552) = 0u;
    v23 = v40;
    *(_OWORD *)a3 = v39;
    *(_OWORD *)(a3 + 16) = v23;
    v24 = v42;
    *(_OWORD *)(a3 + 32) = v41;
    *(_OWORD *)(a3 + 48) = v24;
    *(float32x4_t *)(a3 + 64) = v16;
    *(_OWORD *)(a3 + 80) = v31;
    *(_QWORD *)(a3 + 96) = v32;
    *(_DWORD *)(a3 + 104) = 0;
    *(_BYTE *)(a3 + 108) = 1;
    *(_OWORD *)(a3 + 109) = v38[0];
    *(_DWORD *)(a3 + 124) = *(_DWORD *)((char *)v38 + 15);
    *(_BYTE *)(a3 + 128) = 1;
    v25 = v47;
    *(_OWORD *)(a3 + 176) = v46;
    *(_OWORD *)(a3 + 192) = v25;
    v26 = v45;
    *(_OWORD *)(a3 + 144) = v44;
    *(_OWORD *)(a3 + 160) = v26;
    *(_QWORD *)(a3 + 240) = v34;
    *(float32x4_t *)(a3 + 208) = v15;
    *(_OWORD *)(a3 + 224) = v33;
    *(_DWORD *)(a3 + 248) = v12;
    *(_BYTE *)(a3 + 252) = v13;
    v27 = v43[0];
    *(_DWORD *)(a3 + 268) = *(_DWORD *)((char *)v43 + 15);
    *(_OWORD *)(a3 + 253) = v27;
    *(_BYTE *)(a3 + 272) = v7;
  }
  else
  {
    if (*(_BYTE *)(a1 + 128))
      *(_BYTE *)(a1 + 128) = 0;
    v52 = v60;
    v53 = v61;
    *(_QWORD *)v54 = v62;
    v48 = v56;
    v49 = v57;
    v50 = v58;
    v51 = v59;
    BYTE2(v44) = v63[2];
    LOWORD(v44) = *(_WORD *)v63;
    v35[0] = *(_QWORD *)&v63[8];
    *(_DWORD *)((char *)v35 + 7) = *(_DWORD *)&v63[15];
    v17 = sub_10034E338((uint64_t)v5);
    *(_BYTE *)(a3 + 144) = 0;
    *(_BYTE *)(a3 + 272) = 0;
    *(_QWORD *)(a3 + 288) = 0;
    *(_BYTE *)(a3 + 296) = 0;
    *(_BYTE *)(a3 + 304) = 0;
    *(_BYTE *)(a3 + 440) = 0;
    *(_QWORD *)(a3 + 448) = 0;
    *(_BYTE *)(a3 + 456) = 0;
    *(_BYTE *)(a3 + 464) = 0;
    *(_BYTE *)(a3 + 600) = 0;
    *(_OWORD *)(a3 + 312) = 0u;
    *(_OWORD *)(a3 + 328) = 0u;
    *(_OWORD *)(a3 + 344) = 0u;
    *(_OWORD *)(a3 + 360) = 0u;
    *(_OWORD *)(a3 + 376) = 0u;
    *(_OWORD *)(a3 + 392) = 0u;
    *(_BYTE *)(a3 + 408) = 0;
    *(_OWORD *)(a3 + 472) = 0u;
    *(_OWORD *)(a3 + 488) = 0u;
    *(_OWORD *)(a3 + 504) = 0u;
    *(_OWORD *)(a3 + 520) = 0u;
    *(_OWORD *)(a3 + 536) = 0u;
    *(_OWORD *)(a3 + 552) = 0u;
    *(_BYTE *)(a3 + 568) = 0;
    v18 = v53;
    *(float32x4_t *)(a3 + 64) = v52;
    *(_OWORD *)(a3 + 80) = v18;
    *(_QWORD *)(a3 + 96) = *(_QWORD *)v54;
    v19 = v49;
    *(_OWORD *)a3 = v48;
    *(_OWORD *)(a3 + 16) = v19;
    v20 = v51;
    *(_OWORD *)(a3 + 32) = v50;
    *(_OWORD *)(a3 + 48) = v20;
    *(_DWORD *)(a3 + 104) = 0;
    *(_BYTE *)(a3 + 108) = 1;
    v21 = v44;
    *(_BYTE *)(a3 + 111) = BYTE2(v44);
    *(_WORD *)(a3 + 109) = v21;
    *(_DWORD *)(a3 + 112) = v17;
    *(_BYTE *)(a3 + 116) = 1;
    *(_DWORD *)(a3 + 124) = *(_DWORD *)((char *)v35 + 7);
    *(_QWORD *)(a3 + 117) = v35[0];
    *(_BYTE *)(a3 + 128) = 1;
  }
  result = sub_10034E338((uint64_t)v5);
  *(_DWORD *)(a3 + 608) = result;
  return result;
}

__n128 sub_100335558(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6[7];

  v2 = a2[5];
  v6[4] = a2[4];
  v6[5] = v2;
  v6[6] = a2[6];
  v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  v4 = a2[3];
  v6[2] = a2[2];
  v6[3] = v4;
  sub_1003106EC(a1 + 672, v6);
  return result;
}

uint64_t sub_10033559C(uint64_t result, uint64_t *a2, _QWORD *a3, double a4, double a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  *(_QWORD *)result = off_100816448;
  *(_QWORD *)(result + 8) = v5;
  v6 = a2 + 1;
  v7 = a2[1];
  *(_QWORD *)(result + 16) = v7;
  v8 = result + 16;
  v9 = a2[2];
  *(_QWORD *)(result + 24) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *a2 = (uint64_t)v6;
    *v6 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v8;
  }
  *(_QWORD *)(result + 32) = *a3;
  v10 = a3 + 1;
  v11 = a3[1];
  *(_QWORD *)(result + 40) = v11;
  v12 = result + 40;
  v13 = a3[2];
  *(_QWORD *)(result + 48) = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    *a3 = v10;
    *v10 = 0;
    a3[2] = 0;
  }
  else
  {
    *(_QWORD *)(result + 32) = v12;
  }
  *(double *)(result + 56) = a4;
  *(double *)(result + 64) = a5;
  return result;
}

void sub_100335620(uint64_t a1@<X0>, uint64_t *a2@<X1>, BOOL *a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  _QWORD *v20;
  double v21;
  _QWORD *v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  NSObject *v31;
  double v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  NSObject *v42;
  double *__p;
  double *v44;
  double *v45;
  uint8_t buf[4];
  double v47;
  __int16 v48;
  double v49;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    *a3 = 0;
    a3[8] = 0;
    a3[16] = 0;
    return;
  }
  v9 = 0;
  __p = 0;
  v44 = 0;
  v45 = 0;
  do
  {
    v10 = *(float *)(v5 + 16);
    if (*(double *)(a1 + 56) <= v10 && *(double *)(a1 + 64) >= v10)
    {
      if (v9 >= v45)
      {
        v12 = __p;
        v13 = v9 - __p;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          sub_100026E7C();
        v15 = (char *)v45 - (char *)__p;
        if (((char *)v45 - (char *)__p) >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)sub_10005538C((uint64_t)&v45, v16);
          v12 = __p;
          v9 = v44;
          v10 = *(float *)(v5 + 16);
        }
        else
        {
          v17 = 0;
        }
        v18 = (double *)&v17[8 * v13];
        *v18 = v10;
        v11 = v18 + 1;
        while (v9 != v12)
        {
          v19 = *((_QWORD *)v9-- - 1);
          *((_QWORD *)v18-- - 1) = v19;
        }
        __p = v18;
        v45 = (double *)&v17[8 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v9 = v10;
        v11 = v9 + 1;
      }
      v44 = v11;
      v9 = v11;
    }
    v5 += 184;
  }
  while (v5 != v6);
  if (__p != v9)
  {
    v20 = (_QWORD *)(a1 + 32);
    v21 = sub_1003359A8((_QWORD *)(a1 + 32), a4);
    v22 = (_QWORD *)(a1 + 8);
    v23 = sub_1003359A8(v22, a4);
    if (v23 > 0.0)
    {
      v24 = log(v21 / v23);
      v25 = __p;
      if (__p == v44)
      {
        v28 = 0.0;
        v27 = 0.0;
      }
      else
      {
        v26 = v24;
        v27 = 0.0;
        v28 = 0.0;
        do
        {
          v29 = sub_1003359A8(v20, *v25);
          v30 = sub_1003359A8(v22, *v25);
          if (v30 <= 0.0)
          {
            v31 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
            {
              v32 = *v25;
              *(_DWORD *)buf = 134283521;
              v47 = v32;
              _os_log_fault_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "#hist-unlock, WRTT: Range %{private}f resulted in 0 unlock probability, skipping range", buf, 0xCu);
            }
          }
          else
          {
            v28 = v28 + log(v29 / v30);
            v27 = v26 + v27;
          }
          ++v25;
        }
        while (v25 != v44);
      }
      v42 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        v47 = v28;
        v48 = 2048;
        v49 = v27;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#hist-unlock, WRTT: CLHistogramHypothesisTestUnlockEstimator result: logRatio: %f, scaledLogRatio: %f", buf, 0x16u);
      }
      v41 = v28 < v27;
      goto LABEL_41;
    }
    v33 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003ED840(v33, v34, v35, v36, v37, v38, v39, v40);
  }
  v41 = 0;
LABEL_41:
  *a3 = v41;
  a3[8] = 0;
  a3[16] = 0;
  if (__p)
    operator delete(__p);
}

void sub_100335980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

double sub_1003359A8(_QWORD *a1, double a2)
{
  uint64_t v2;
  double *v3;
  uint64_t *v4;
  double *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  BOOL v15;

  v3 = (double *)(a1 + 1);
  v2 = a1[1];
  if (v2)
  {
    do
    {
      v4 = (uint64_t *)(v2 + 8);
      if (*(double *)(v2 + 32) > a2)
      {
        v4 = (uint64_t *)v2;
        v3 = (double *)v2;
      }
      v2 = *v4;
    }
    while (*v4);
  }
  if (v3 == (double *)*a1)
  {
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003ED8AC(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    v5 = *(double **)v3;
    if (*(_QWORD *)v3)
    {
      do
      {
        v3 = v5;
        v5 = (double *)*((_QWORD *)v5 + 1);
      }
      while (v5);
    }
    else
    {
      v14 = v3;
      do
      {
        v3 = (double *)*((_QWORD *)v14 + 2);
        v15 = *(_QWORD *)v3 == (_QWORD)v14;
        v14 = v3;
      }
      while (v15);
    }
  }
  return v3[5];
}

uint64_t sub_100335A60(uint64_t a1)
{
  *(_QWORD *)a1 = off_100816448;
  sub_10003E3F0(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_10003E3F0(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_100335AA0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100816448;
  sub_10003E3F0(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_10003E3F0(a1 + 8, *(_QWORD **)(a1 + 16));
  operator delete();
}

uint64_t sub_100335AF0(uint64_t a1)
{
  sub_10003E3F0(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_100335B18(uint64_t a1, double a2, double a3)
{
  _QWORD *result;

  result = (_QWORD *)sub_100324C18(a1, -5.0, 10.0, a2, a3);
  *result = off_100816498;
  return result;
}

void sub_100335B48()
{
  NSObject *v0;
  uint8_t buf[16];

  v0 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#decision-proc,WRTT, Using CLHistogramHypothesisTestUnlockEstimator with phone unlock histograms", buf, 2u);
  }
  sub_100335BE0();
}

void sub_100335BE0()
{
  operator new();
}

void sub_100335C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10003E3F0((uint64_t)&a9, a10);
  sub_10003E3F0((uint64_t)&a12, a13);
  operator delete();
}

void sub_100335CD8()
{
  sub_100335BE0();
}

void sub_100335D30()
{
  operator delete();
}

uint64_t sub_100335D44(uint64_t a1, double *a2, uint64_t a3)
{
  double *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (double *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_100335DC0((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_100335DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100335DC0(uint64_t **a1, double *a2, double *a3, _OWORD *a4)
{
  double *v6;
  uint64_t *v7;
  uint64_t **v8;
  double v10;
  double *v11;

  v6 = sub_100335E44(a1, a2, &v11, &v10, a3);
  v7 = *(uint64_t **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1000272A8(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

double *sub_100335E44(_QWORD *a1, double *a2, double **a3, double *a4, double *a5)
{
  double *v5;
  double v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  BOOL v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  double *v19;
  double *v20;
  double v21;

  v5 = (double *)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = *(uint64_t **)a2;
      do
      {
        v10 = (double *)v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (double *)*((_QWORD *)v13 + 2);
        v14 = *(_QWORD *)v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = *(double **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = *(double **)v16;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v18 >= v15)
          break;
        v5 = v16 + 1;
        v16 = (double *)*((_QWORD *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *(_QWORD *)a4 = a2;
    return a4;
  }
  v11 = *((_QWORD *)a2 + 1);
  if (v11)
  {
    v12 = (double *)*((_QWORD *)a2 + 1);
    do
    {
      a4 = v12;
      v12 = *(double **)v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (double *)*((_QWORD *)v19 + 2);
      v14 = *(_QWORD *)a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = *(double **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v20;
          v21 = v20[4];
          if (v6 >= v21)
            break;
          v20 = *(double **)v20;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v21 >= v6)
          break;
        v5 = v20 + 1;
        v20 = (double *)*((_QWORD *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_100335FE0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100336034(a1, *(double **)a2, (double *)(a2 + 8));
  return a1;
}

void sub_10033601C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100336034(uint64_t *result, double *a2, double *a3)
{
  double *v4;
  uint64_t **v5;
  double *v6;
  double *v7;
  double *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (double *)(result + 1);
    do
    {
      result = sub_100335DC0(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (double *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (double *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_1003360B8()
{
  double __dst[300];

  memcpy(__dst, &unk_100479660, sizeof(__dst));
  sub_100335D44((uint64_t)&unk_10085E1A0, __dst, 150);
  __cxa_atexit((void (*)(void *))sub_100335AF0, &unk_10085E1A0, (void *)&_mh_execute_header);
  memcpy(__dst, &unk_100479FC0, sizeof(__dst));
  sub_100335D44((uint64_t)&unk_10085E1B8, __dst, 150);
  return __cxa_atexit((void (*)(void *))sub_100335AF0, &unk_10085E1B8, (void *)&_mh_execute_header);
}

void sub_100336230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10033629C(unsigned int *a1, uint64_t a2)
{
  double *v2;
  int v3;
  int v4;
  double v5;
  double v6;
  BOOL v7;
  char v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  unsigned int v14;
  _BOOL4 v15;
  double v16;
  int v17;
  char v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;

  v2 = (double *)(a1 + 10);
  v3 = *((unsigned __int8 *)a1 + 56);
  if (*((_BYTE *)a1 + 56))
  {
    v4 = *(_DWORD *)(a2 + 8);
    if ((v4 - 1) < 2)
    {
LABEL_5:
      v3 = 0;
      v5 = *(double *)a2;
      a1[12] = *(_DWORD *)(a2 + 8);
      *v2 = v5;
      goto LABEL_10;
    }
    if (v4)
      goto LABEL_9;
    if (a1[12])
      goto LABEL_5;
    if (*(double *)a2 - *v2 <= 0.2)
    {
LABEL_9:
      v3 = 0;
    }
    else
    {
      v6 = *(double *)a2;
      a1[12] = *(_DWORD *)(a2 + 8);
      *v2 = v6;
      v3 = 1;
    }
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)a2;
    *((_BYTE *)a1 + 56) = 1;
  }
LABEL_10:
  if (*(_BYTE *)(a2 + 64))
    v7 = *(_DWORD *)(a2 + 32) == 1;
  else
    v7 = 0;
  v8 = !v7;
  if (v7)
  {
    v9 = a1 + 16;
    if (*((_BYTE *)a1 + 144))
    {
      v10 = a1 + 22;
      if (*(double *)(a2 + 16) - *((double *)a1 + 16) <= 0.2)
      {
        v19 = *(double *)(a2 + 40);
        v20 = *(double *)(a2 + 48);
        *((double *)a1 + 8) = v19;
        *((double *)a1 + 9) = v20;
        v21 = *(double *)(a2 + 56);
        *((double *)a1 + 10) = v21;
        v22 = *((double *)a1 + 12);
        v23 = v19 - *((double *)a1 + 11);
        v24 = *(double *)(a2 + 24);
        *((double *)a1 + 17) = v24;
        if (sqrt((v20 - v22) * (v20 - v22) + v23 * v23 + (v21 - *((double *)a1 + 13)) * (v21 - *((double *)a1 + 13))) >= 0.5)
        {
          *v10 = *v9;
          *((_QWORD *)a1 + 13) = *((_QWORD *)a1 + 10);
          *((double *)a1 + 15) = v24;
          *((_BYTE *)a1 + 112) = 0;
        }
        else
        {
          *((_BYTE *)a1 + 112) = v24 - *((double *)a1 + 15) >= 1.0;
        }
        goto LABEL_24;
      }
      *((_QWORD *)a1 + 14) = 0;
      *((_OWORD *)a1 + 5) = 0u;
      *((_OWORD *)a1 + 6) = 0u;
      *v9 = 0u;
      *((_BYTE *)a1 + 144) = 1;
      *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 40);
      *((_QWORD *)a1 + 10) = *(_QWORD *)(a2 + 56);
      *v10 = *v9;
      *((_QWORD *)a1 + 13) = *((_QWORD *)a1 + 10);
    }
    else
    {
      *((_QWORD *)a1 + 14) = 0;
      *((_OWORD *)a1 + 5) = 0u;
      *((_OWORD *)a1 + 6) = 0u;
      *v9 = 0u;
      *((_BYTE *)a1 + 144) = 1;
      *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 40);
      *((_QWORD *)a1 + 10) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 22) = *v9;
      *((_QWORD *)a1 + 13) = *((_QWORD *)a1 + 10);
    }
    v11 = *(_QWORD *)(a2 + 24);
    *((_QWORD *)a1 + 16) = *(_QWORD *)(a2 + 16);
    *((_QWORD *)a1 + 17) = v11;
    *((_QWORD *)a1 + 15) = v11;
    goto LABEL_24;
  }
  if (*((_BYTE *)a1 + 144))
    *((_BYTE *)a1 + 144) = 0;
LABEL_24:
  if (!*((_BYTE *)a1 + 32))
  {
    v16 = *((double *)a1 + 5);
    v17 = a1[12];
    if ((v8 & 1) != 0)
    {
      if (!v17)
      {
LABEL_60:
        v12 = 1;
        goto LABEL_61;
      }
    }
    else
    {
      if (!v17)
      {
        v17 = *((_BYTE *)a1 + 112) != 0 && v16 > *((double *)a1 + 15);
        if (*((_BYTE *)a1 + 112) != 0 && v16 > *((double *)a1 + 15))
          v16 = *((double *)a1 + 15);
        goto LABEL_60;
      }
      if (*((_BYTE *)a1 + 112))
      {
        v12 = 1;
        v16 = *((double *)a1 + 15);
        v17 = 1;
LABEL_61:
        *a1 = v12;
        a1[2] = v17;
        *((double *)a1 + 2) = v16;
        *((_BYTE *)a1 + 24) = v12;
        *((_BYTE *)a1 + 32) = 1;
        return v12;
      }
    }
    v12 = 0;
    v17 = 0;
    goto LABEL_61;
  }
  v12 = *a1;
  if ((_DWORD)v12 == 2)
  {
    v12 = 1;
    *a1 = 1;
  }
  v13 = *((double *)a1 + 5);
  v14 = a1[12];
  if ((v8 & 1) != 0)
  {
    if (!v14)
    {
      v15 = 0;
      goto LABEL_46;
    }
LABEL_36:
    if ((_DWORD)v12 != 1)
      return v12;
    v18 = 0;
    v12 = 0;
    *a1 = 0;
    a1[2] = 0;
LABEL_56:
    *((_BYTE *)a1 + 24) = v18;
    return v12;
  }
  if (v14)
  {
    if (!*((_BYTE *)a1 + 112))
      goto LABEL_36;
    v15 = 1;
    v13 = *((double *)a1 + 15);
  }
  else
  {
    v15 = *((_BYTE *)a1 + 112) != 0 && v13 > *((double *)a1 + 15);
    if (*((_BYTE *)a1 + 112) != 0 && v13 > *((double *)a1 + 15))
      v13 = *((double *)a1 + 15);
  }
LABEL_46:
  if ((_DWORD)v12 != 1)
  {
    v18 = 1;
    *a1 = 1;
    a1[2] = v15;
    *((double *)a1 + 2) = v13;
    v12 = 1;
    goto LABEL_56;
  }
  if (v3)
  {
    v18 = 1;
    if (v15)
      v12 = 1;
    else
      v12 = 2;
    *a1 = v12;
    a1[2] = v15;
    goto LABEL_55;
  }
  v12 = 1;
  if (v13 > *((double *)a1 + 2))
  {
    *a1 = 1;
    a1[2] = v15;
    v18 = 1;
LABEL_55:
    *((double *)a1 + 2) = v13;
    goto LABEL_56;
  }
  return v12;
}

void sub_100336698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100336808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100336960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100336FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  void *v66;

  if (a20 < 0)
    operator delete(__p);
  sub_100337130((uint64_t)&a34);
  sub_100337130((uint64_t)&a50);
  sub_100337130((uint64_t)&a66);

  _Unwind_Resume(a1);
}

uint64_t sub_100337130(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 112) && *(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100337410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);

  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_100337C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  void *v32;

  __cxa_guard_abort(&qword_10085E2C8);

  _Unwind_Resume(a1);
}

_QWORD *sub_100337D5C(_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_100137650(a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_100337DC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003382E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1003386C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100338A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100339224(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 192) = v1 - 168;
  sub_10033B348((void ***)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_100339544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100339784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100339D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  void *v33;
  void *v34;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10033A108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);

  _Unwind_Resume(a1);
}

void sub_10033A81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);

  _Unwind_Resume(a1);
}

double sub_10033A8FC(double *a1, long double *a2)
{
  double v2;
  int v3;
  double v4;
  long double v5;
  double v6;
  double v8;
  double v9;
  long double v10;
  double v11;
  long double __x;

  v8 = *a1;
  v9 = a1[1];
  v10 = a2[1];
  __x = *a2;
  v2 = logb(fmax(fabs(*a2), fabs(v10)));
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v3 = 0;
    v4 = v10;
  }
  else
  {
    v3 = (int)v2;
    __x = scalbn(__x, -(int)v2);
    v4 = scalbn(v10, -v3);
  }
  v11 = v4;
  v5 = v4 * v4 + __x * __x;
  v6 = scalbn((v9 * v4 + v8 * __x) / v5, -v3);
  scalbn((v9 * __x - v8 * v11) / v5, -v3);
  return v6;
}

void sub_10033AE2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10033B004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10033B0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NeuralNetworkModelWithDataTransformer;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

char *sub_10033B124(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100004678(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  *((_DWORD *)__dst + 12) = *((_DWORD *)a2 + 12);
  sub_10033B220((uint64_t)(__dst + 56), (__int128 *)((char *)a2 + 56));
  sub_10033B220((uint64_t)(__dst + 88), (__int128 *)((char *)a2 + 88));
  return __dst;
}

void sub_10033B1CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033B220(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_100291444((_OWORD *)a1, a2);
  return a1;
}

void sub_10033B24C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_1003E4FD0(v1);
  _Unwind_Resume(exception_object);
}

void sub_10033B268(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 120;
        sub_10033B2D4((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_10033B2D4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 112) && *(char *)(a2 + 111) < 0)
    operator delete(*(void **)(a2 + 88));
  if (*(_BYTE *)(a2 + 80) && *(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_10033B348(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        sub_10033B2D4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_10033B3CC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x222222222222223)
    sub_100026E7C();
  result = (char *)sub_10033B41C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

void *sub_10033B41C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223)
    sub_1000260B0();
  return operator new(120 * a2);
}

char *sub_10033B460(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  char *v10;
  char *v11;

  v4 = __dst;
  v10 = __dst;
  v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_10033B124(v4, v6);
      v6 = (__int128 *)((char *)v6 + 120);
      v4 = v11 + 120;
      v11 += 120;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_10033B500((uint64_t)v8);
  return v4;
}

void sub_10033B4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10033B500((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10033B500(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10033B534((uint64_t *)a1);
  return a1;
}

void sub_10033B534(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 120;
      sub_10033B2D4(v5, v3);
    }
    while (v3 != v4);
  }
}

char *sub_10033B584(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_10033B3CC(result, a4);
    result = sub_10033B608((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_10033B5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_10033B348(&a9);
  _Unwind_Resume(a1);
}

char *sub_10033B608(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  char *v10;
  char *v11;

  v4 = __dst;
  v10 = __dst;
  v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_10033B124(v4, v6);
      v6 = (__int128 *)((char *)v6 + 120);
      v4 = v11 + 120;
      v11 += 120;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_10033B500((uint64_t)v8);
  return v4;
}

void sub_10033B694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10033B500((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10033B6A8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10013C84C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10033B704(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10033B720(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 >> 60)
      sub_100026E7C();
    v15 = (__dst - (uint64_t)v13) >> 4;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_10013A59C(v9, v17);
    else
      v18 = 0;
    v28 = &v18[16 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[16 * v17];
    v29 = 16 * a5;
    v30 = &v28[16 * a5];
    do
    {
      v31 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    v35 = v30;
    v5 = (char *)sub_10033B92C((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 4;
  if (v20 >= a5)
  {
    v21 = &__src[16 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[16 * a5];
    v25 = &v23[-16 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-16 * ((v23 - v24) >> 4)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[16 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[16 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_10033B8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_10033B92C(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_10033BA00()
{
  void *v0;
  char *v1;
  const char *v2;
  char *v3;
  const char *v4;

  v0 = objc_autoreleasePoolPush();
  v3 = "AntennaMask_1_NN_V5_Model_DeviceType_201.mlmodelc/fp16_model.espresso";
  v4 = "net";
  sub_10027C150(&xmmword_10085E1D0, &v3);
  v1 = "AntennaMask_2_NN_V5_Model_DeviceType_201.mlmodelc/fp16_model.espresso";
  v2 = "net";
  sub_10027C150(&xmmword_10085E200, &v1);
  __cxa_atexit((void (*)(void *))sub_10026B920, &xmmword_10085E1D0, (void *)&_mh_execute_header);
  v3 = "AntennaMask_1_NN_V5_ScalingModel_DeviceType_201";
  v4 = "mlmodelc";
  sub_10027C150(&xmmword_10085E230, &v3);
  v1 = "AntennaMask_2_NN_V5_ScalingModel_DeviceType_201";
  v2 = "mlmodelc";
  sub_10027C150(&xmmword_10085E260, &v1);
  __cxa_atexit((void (*)(void *))sub_10026B920, &xmmword_10085E230, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_10085E290, "input_1");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10085E290, (void *)&_mh_execute_header);
  sub_10000BF04(&qword_10085E2A8, "Identity");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10085E2A8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10033BB4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (byte_10085E25F < 0)
    sub_1003EDE6C();
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033BB90(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD __src[313];

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v3 = (_BYTE *)(a1 + 4112);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_10047AA80;
  *(_OWORD *)(a1 + 112) = xmmword_10047AA90;
  *(_OWORD *)(a1 + 128) = xmmword_10047AAA0;
  *(_QWORD *)(a1 + 144) = 0x3FD3333333333333;
  *(_WORD *)(a1 + 152) = 257;
  *(_OWORD *)(a1 + 160) = xmmword_10047AAB0;
  *(_OWORD *)(a1 + 176) = xmmword_10047AAC0;
  *(_QWORD *)(a1 + 192) = 0;
  v4 = 1;
  *(_BYTE *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_10047AAD0;
  *(_OWORD *)(a1 + 224) = xmmword_10047AAE0;
  *(_OWORD *)(a1 + 240) = xmmword_10047AAF0;
  *(_OWORD *)(a1 + 256) = xmmword_10047AB00;
  *(_OWORD *)(a1 + 272) = xmmword_10047AB10;
  *(_OWORD *)(a1 + 288) = xmmword_10047AB20;
  *(_OWORD *)(a1 + 304) = xmmword_10047AB30;
  *(_OWORD *)(a1 + 320) = xmmword_10047AB40;
  *(_WORD *)(a1 + 336) = 1;
  *(_BYTE *)(a1 + 338) = 1;
  *(_QWORD *)(a1 + 344) = 0x4024000000000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 368) = xmmword_10047AB50;
  *(_QWORD *)(a1 + 384) = 0x403E000000000000;
  *(_BYTE *)(a1 + 392) = 1;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 416) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 448) = v7;
  *(_OWORD *)(a1 + 464) = v8;
  *(_OWORD *)(a1 + 432) = v6;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 832) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  v9 = (void *)(a1 + 992);
  v10 = 5489;
  v11 = 249;
  *(_DWORD *)(a1 + 992) = 5489;
  do
  {
    v12 = 1812433253 * (v10 ^ (v10 >> 30));
    v10 = v12 + v4;
    *(_DWORD *)(a1 + 4 * v11) = v11 + v12 - 248;
    ++v4;
    ++v11;
  }
  while (v11 != 872);
  *(_BYTE *)(a1 + 3512) = 0;
  *(_BYTE *)(a1 + 3520) = 0;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(_BYTE *)(a1 + 3504) = 0;
  *(_QWORD *)(a1 + 3528) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 3536) = 0;
  *(_BYTE *)(a1 + 3544) = 0;
  *(_BYTE *)(a1 + 3552) = 0;
  *(_BYTE *)(a1 + 3560) = 0;
  *(_BYTE *)(a1 + 3568) = 0;
  *(_BYTE *)(a1 + 3576) = 0;
  *(_BYTE *)(a1 + 3584) = 0;
  *(_QWORD *)(a1 + 3592) = 0;
  *(_OWORD *)(a1 + 3600) = xmmword_10047AB60;
  *(_DWORD *)(a1 + 3616) = 2;
  *(_BYTE *)(a1 + 3624) = 0;
  *(_BYTE *)(a1 + 3632) = 0;
  *(_WORD *)(a1 + 3688) = 0;
  *(_OWORD *)(a1 + 3640) = 0u;
  *(_OWORD *)(a1 + 3656) = 0u;
  *(_OWORD *)(a1 + 3672) = 0u;
  *(_QWORD *)(a1 + 3696) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 3704) = 0;
  *(_BYTE *)(a1 + 3712) = 0;
  *(_BYTE *)(a1 + 3720) = 0;
  *(_BYTE *)(a1 + 3728) = 0;
  *(_BYTE *)(a1 + 3736) = 0;
  *(_BYTE *)(a1 + 3744) = 0;
  *(_BYTE *)(a1 + 3752) = 0;
  *(_BYTE *)(a1 + 3912) = 0;
  *(_BYTE *)(a1 + 3920) = 0;
  *(_BYTE *)(a1 + 3928) = 0;
  *(_BYTE *)(a1 + 3936) = 0;
  *(_BYTE *)(a1 + 3944) = 0;
  *(_OWORD *)(a1 + 3952) = xmmword_10047AB70;
  *(_BYTE *)(a1 + 4080) = 0;
  *(_BYTE *)(a1 + 4088) = 0;
  *(_OWORD *)(a1 + 3968) = 0u;
  *(_OWORD *)(a1 + 3984) = 0u;
  *(_OWORD *)(a1 + 4000) = 0u;
  *(_OWORD *)(a1 + 4016) = 0u;
  *(_OWORD *)(a1 + 4032) = 0u;
  *(_OWORD *)(a1 + 4048) = 0u;
  *(_OWORD *)(a1 + 4057) = 0u;
  *(_QWORD *)(a1 + 4096) = 0x4014000000000000;
  *(_DWORD *)(a1 + 4104) = 0;
  *v3 = 0;
  v3[8] = 0;
  v3[16] = 0;
  v3[96] = 0;
  v3[104] = 0;
  v3[184] = 0;
  v3[248] = 0;
  v3[280] = 0;
  *(_BYTE *)(a1 + 4352) = 0;
  *(_OWORD *)(a1 + 4304) = 0u;
  *(_OWORD *)(a1 + 4320) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_OWORD *)(a1 + 4400) = xmmword_1004792C0;
  v3[312] = 0;
  v3[320] = 0;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(_OWORD *)(a1 + 4456) = 0u;
  *(_OWORD *)(a1 + 4472) = 0u;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 48);
  v13 = 1;
  v14 = 1;
  LODWORD(__src[0]) = 1;
  do
  {
    v13 = v14 + 1812433253 * (v13 ^ (v13 >> 30));
    *((_DWORD *)__src + v14++) = v13;
  }
  while (v14 != 624);
  __src[312] = 0;
  memcpy(v9, __src, 0x9C8uLL);
  sub_10033BECC(a1);
  return a1;
}

uint64_t sub_10033BECC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void **v4;
  void **v5;
  unint64_t v6;
  void **v7;
  _QWORD *v8;
  unint64_t v9;
  void (***v10)(void);
  void (**v11)(void);
  void (***v12)(void);
  unint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  _OWORD v20[3];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v20[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,particle filter reinitialized", (uint8_t *)v20, 2u);
  }
  if (*(_BYTE *)(a1 + 664))
    *(_BYTE *)(a1 + 664) = 0;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  if (*(_BYTE *)(a1 + 688))
    *(_BYTE *)(a1 + 688) = 0;
  if (*(_BYTE *)(a1 + 832))
    *(_BYTE *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 3496) = 0;
  *(_BYTE *)(a1 + 3504) = 0;
  if (*(_BYTE *)(a1 + 3520))
    *(_BYTE *)(a1 + 3520) = 0;
  *(_QWORD *)(a1 + 3528) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 392) = 1;
  *(_DWORD *)(a1 + 3616) = 2;
  if (*(_BYTE *)(a1 + 3632))
    *(_BYTE *)(a1 + 3632) = 0;
  v4 = *(void ***)(a1 + 3648);
  v5 = *(void ***)(a1 + 3656);
  if (v5 == v4)
  {
    v8 = (_QWORD *)(a1 + 3680);
    v5 = *(void ***)(a1 + 3648);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 3672);
    v7 = &v4[v6 / 0x49];
    v8 = (_QWORD *)(a1 + 3680);
    v9 = (unint64_t)v4[(*(_QWORD *)(a1 + 3680) + v6) / 0x49] + 56 * ((*(_QWORD *)(a1 + 3680) + v6) % 0x49);
    if ((char *)*v7 + 56 * (v6 % 0x49) != (void *)v9)
    {
      v10 = (void (***)(void))((char *)*v7 + 56 * (v6 % 0x49));
      do
      {
        v11 = *v10;
        v10 += 7;
        (*v11)();
        if ((char *)v10 - (_BYTE *)*v7 == 4088)
        {
          v12 = (void (***)(void))v7[1];
          ++v7;
          v10 = v12;
        }
      }
      while (v10 != (void (***)(void))v9);
      v5 = *(void ***)(a1 + 3656);
      v4 = *(void ***)(a1 + 3648);
    }
  }
  *v8 = 0;
  v13 = (char *)v5 - (char *)v4;
  if (v13 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v4 = (void **)(*(_QWORD *)(a1 + 3648) + 8);
      *(_QWORD *)(a1 + 3648) = v4;
      v13 = *(_QWORD *)(a1 + 3656) - (_QWORD)v4;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    v14 = 36;
  }
  else
  {
    if (v13 >> 3 != 2)
      goto LABEL_32;
    v14 = 73;
  }
  *(_QWORD *)(a1 + 3672) = v14;
LABEL_32:
  *(_WORD *)(a1 + 3688) = 0;
  if (*(_BYTE *)(a1 + 3728))
    *(_BYTE *)(a1 + 3728) = 0;
  if (*(_BYTE *)(a1 + 3744))
    *(_BYTE *)(a1 + 3744) = 0;
  if (*(_BYTE *)(a1 + 3928))
    *(_BYTE *)(a1 + 3928) = 0;
  if (*(_BYTE *)(a1 + 3944))
    *(_BYTE *)(a1 + 3944) = 0;
  if (*(_BYTE *)(a1 + 4392))
    *(_BYTE *)(a1 + 4392) = 0;
  v15 = *(void ***)(a1 + 3984);
  v16 = *(_QWORD *)(a1 + 3992);
  *(_QWORD *)(a1 + 4016) = 0;
  v17 = v16 - (_QWORD)v15;
  if (v17 >= 0x11)
  {
    do
    {
      operator delete(*v15);
      v15 = (void **)(*(_QWORD *)(a1 + 3984) + 8);
      *(_QWORD *)(a1 + 3984) = v15;
      v17 = *(_QWORD *)(a1 + 3992) - (_QWORD)v15;
    }
    while (v17 > 0x10);
  }
  if (v17 >> 3 == 1)
  {
    v18 = 25;
  }
  else
  {
    if (v17 >> 3 != 2)
      goto LABEL_49;
    v18 = 51;
  }
  *(_QWORD *)(a1 + 4008) = v18;
LABEL_49:
  *(_BYTE *)(a1 + 4352) = 0;
  *(_OWORD *)(a1 + 3600) = xmmword_10047AB60;
  *(_BYTE *)(a1 + 3584) = 0;
  memset(v20, 0, sizeof(v20));
  sub_100342170((_QWORD *)(a1 + 4440), (uint64_t)v20);
  result = sub_10003A394(v20);
  if (*(_BYTE *)(a1 + 48))
    *(_BYTE *)(a1 + 48) = 0;
  return result;
}

void sub_10033C1B4(uint64_t a1, double a2, double a3, double a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  char v46;
  int v47;
  const char *v48;
  const char *v49;
  int v50;
  uint64_t v51;
  uint64_t (**v52)();
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t (**v57)();
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE v62[32];
  uint64_t (**v63)();
  __int128 v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE v67[32];
  uint64_t (**v68)();
  __int128 v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE v72[32];
  uint64_t (**v73)();
  __int128 v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE v77[32];
  uint64_t (**v78)();
  __int128 v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t (**v83)();
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t (**v91)();
  __int128 v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;

  if (!*(_BYTE *)(a1 + 3688) && (!*(_BYTE *)(a1 + 3712) || a4 - *(double *)(a1 + 3704) > 0.5))
  {
    v93 = 0x100000002;
    v91 = off_100815CC0;
    v92 = xmmword_100478BD0;
    v94 = &v95;
    sub_10030DD0C(&v91, 2, 1);
    sub_10030DD58((uint64_t)&v91, 0.0);
    *(double *)sub_10030E194((uint64_t)&v91, 1u) = a2;
    *(double *)sub_10030E194((uint64_t)&v91, 0) = a3;
    sub_10033C978((_QWORD *)(a1 + 3640), (uint64_t)&v91);
    *(double *)(a1 + 3704) = a4;
    *(_BYTE *)(a1 + 3712) = 1;
    v8 = *(_QWORD *)(a1 + 3680);
    if ((double)v8 + (double)v8 > 100.0)
    {
      sub_10033CA2C((int64x2_t *)(a1 + 3640));
      v8 = *(_QWORD *)(a1 + 3680);
    }
    v88 = 0;
    v89 = 0;
    v90 = 0;
    sub_10031834C(&v88, v8);
    v85 = 0x100000002;
    v83 = off_100815CC0;
    v84 = xmmword_100478BD0;
    v86 = &v87;
    v9 = *(_QWORD *)(a1 + 3648);
    if (*(_QWORD *)(a1 + 3656) != v9)
    {
      v10 = *(_QWORD *)(a1 + 3672);
      v11 = *(_QWORD *)(v9 + 8 * (v10 / 0x49)) + 56 * (v10 % 0x49);
      v12 = *(_QWORD *)(v9 + 8 * ((*(_QWORD *)(a1 + 3680) + v10) / 0x49)) + 56 * ((*(_QWORD *)(a1 + 3680) + v10) % 0x49);
      if (v11 != v12)
      {
        v13 = (_QWORD *)(v9 + 8 * (v10 / 0x49));
        do
        {
          v14 = sub_10027C1A4(v11, 0);
          *(double *)sub_10030E194((uint64_t)&v83, 0) = v14;
          v15 = sub_10027C1A4(v11, 1u);
          *(double *)sub_10030E194((uint64_t)&v83, 1u) = v15;
          v16 = v89;
          if (v89 >= v90)
          {
            v17 = sub_10031D1F4(&v88, (uint64_t)&v83);
          }
          else
          {
            sub_10031CFEC(v89, (uint64_t)&v83);
            v17 = v16 + 56;
          }
          v89 = v17;
          v11 += 56;
          if (v11 - *v13 == 4088)
          {
            v18 = v13[1];
            ++v13;
            v11 = v18;
          }
        }
        while (v11 != v12);
      }
    }
    v80 = 0x100000002;
    v78 = off_100815CC0;
    v79 = xmmword_100478BD0;
    v81 = &v82;
    sub_10030DD0C(&v78, 2, 1);
    sub_10030DD58((uint64_t)&v78, 0.0);
    v19 = *(_QWORD *)(a1 + 3648);
    if (*(_QWORD *)(a1 + 3656) != v19)
    {
      v20 = *(_QWORD *)(a1 + 3672);
      v21 = *(_QWORD *)(v19 + 8 * (v20 / 0x49)) + 56 * (v20 % 0x49);
      v22 = *(_QWORD *)(v19 + 8 * ((*(_QWORD *)(a1 + 3680) + v20) / 0x49))
          + 56 * ((*(_QWORD *)(a1 + 3680) + v20) % 0x49);
      if (v21 != v22)
      {
        v23 = (_QWORD *)(v19 + 8 * (v20 / 0x49));
        do
        {
          v75 = 0x100000002;
          v73 = off_100815CC0;
          v74 = xmmword_100478BD0;
          v76 = v77;
          sub_10030F0E0((uint64_t)&v78, v21, (uint64_t)&v73);
          sub_10030EC4C((uint64_t)&v78, (uint64_t)&v73);
          v21 += 56;
          if (v21 - *v23 == 4088)
          {
            v24 = v23[1];
            ++v23;
            v21 = v24;
          }
        }
        while (v21 != v22);
      }
    }
    v25 = (double)*(unint64_t *)(a1 + 3680);
    v75 = 0x100000002;
    v73 = off_100815CC0;
    v74 = xmmword_100478BD0;
    v76 = v77;
    sub_10031CBA0((uint64_t)&v78, (uint64_t)&v73, 1.0 / v25);
    sub_10030EC4C((uint64_t)&v78, (uint64_t)&v73);
    v26 = v88;
    if (v89 != v88)
    {
      v27 = 0;
      v28 = 0;
      do
      {
        v75 = 0x100000002;
        v73 = off_100815CC0;
        v74 = xmmword_100478BD0;
        v76 = v77;
        sub_10030E2B4(v26 + v27, (uint64_t)&v78, (uint64_t)&v73);
        sub_10030EC4C(v88 + v27, (uint64_t)&v73);
        ++v28;
        v26 = v88;
        v27 += 56;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v89 - v88) >> 3) > v28);
    }
    v51 = a1;
    v75 = 0x200000002;
    v73 = off_100815D50;
    v74 = xmmword_100478BF0;
    v76 = v77;
    sub_10030DD0C(&v73, 2, 2);
    sub_10030DD58((uint64_t)&v73, 0.0);
    v29 = v88;
    v30 = v89;
    if (v88 != v89)
    {
      while (1)
      {
        v32 = *(_DWORD *)(v29 + 8);
        v31 = *(_DWORD *)(v29 + 12);
        v60 = 0x200000001;
        v61 = 0;
        v58 = 0;
        v59 = 0;
        v57 = off_100815D98;
        if (v31 > 1)
          break;
        if (v32 >= 3)
        {
          v47 = 423;
          v48 = "this->max_num_cols_ >= num_cols";
LABEL_59:
          __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v47, v48);
        }
        v58 = __PAIR64__(v32, v31);
        LODWORD(v59) = v32 * v31;
        HIDWORD(v59) = v31;
        v61 = v62;
        sub_10030E1CC(v29, &v57);
        v65 = 0x200000002;
        v63 = off_100815D50;
        v64 = xmmword_100478BF0;
        v66 = v67;
        sub_10030E3B0(v29, (uint64_t)&v57, (uint64_t)&v63);
        v70 = 0x200000002;
        v68 = off_100815D50;
        v69 = xmmword_100478BF0;
        v71 = v72;
        sub_10030F0E0((uint64_t)&v73, (uint64_t)&v63, (uint64_t)&v68);
        sub_10030EC4C((uint64_t)&v73, (uint64_t)&v68);
        v29 += 56;
        if (v29 == v30)
          goto LABEL_28;
      }
      v47 = 422;
      v48 = "this->max_num_rows_ >= num_rows";
      goto LABEL_59;
    }
LABEL_28:
    v70 = 0x200000002;
    v68 = off_100815D50;
    v69 = xmmword_100478BF0;
    v71 = v72;
    v65 = 0x200000002;
    v63 = off_100815D50;
    v64 = xmmword_100478BF0;
    v66 = v67;
    sub_100318438((uint64_t)&v73, (uint64_t)&v68, (uint64_t)&v63);
    v60 = 0x200000002;
    v57 = off_100815D50;
    if (DWORD1(v69) > 2)
    {
      v49 = "this->max_num_rows_ >= num_rows";
      v50 = 422;
    }
    else
    {
      if (v69 < 3)
      {
        v58 = __PAIR64__(v69, DWORD1(v69));
        LODWORD(v59) = v69 * DWORD1(v69);
        HIDWORD(v59) = DWORD1(v69);
        v61 = v62;
        sub_10030E1CC((uint64_t)&v68, &v57);
        v33 = v88;
        v34 = v89;
        if (v88 == v89)
        {
          v42 = 0.0;
          v43 = 0.0;
        }
        else
        {
          v35 = 0.0;
          v36 = 0.0;
          v37 = 0.0;
          v38 = 0.0;
          do
          {
            v54 = 0x100000002;
            v52 = off_100815CC0;
            v53 = xmmword_100478BD0;
            v55 = &v56;
            sub_10030E3B0((uint64_t)&v57, v33, (uint64_t)&v52);
            v39 = sub_10027C1A4((uint64_t)&v52, 0);
            v40 = sub_10027C1A4((uint64_t)&v52, 1u);
            if (v39 < v38)
              v41 = v39;
            else
              v41 = v38;
            if (v39 > v37)
              v37 = v39;
            else
              v38 = v41;
            if (v40 <= v35)
            {
              if (v40 < v36)
                v36 = v40;
            }
            else
            {
              v35 = v40;
            }
            v33 += 56;
          }
          while (v33 != v34);
          v42 = v37 - v38;
          v43 = v35 - v36;
        }
        if (v43 >= v42)
          v44 = v42;
        else
          v44 = v43;
        v45 = *(double *)(v51 + 3696);
        if (v44 >= v45)
        {
          v46 = 0;
          *(_BYTE *)(v51 + 3688) = 1;
        }
        else
        {
          if (v42 < v43)
            v42 = v43;
          if (v42 < v45)
            goto LABEL_55;
          v46 = 1;
        }
        *(_BYTE *)(v51 + 3689) = v46;
LABEL_55:
        v73 = (uint64_t (**)())&v88;
        sub_10031CE54((void ***)&v73);
        return;
      }
      v49 = "this->max_num_cols_ >= num_cols";
      v50 = 423;
    }
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v50, v49);
  }
}

void sub_10033C900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49)
{
  uint64_t v49;

  a49 = (void **)(v49 - 216);
  sub_10031CE54(&a49);
  _Unwind_Resume(a1);
}

void sub_10033C978(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 73 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    sub_1003423AC(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  }
  sub_10031CFEC(v8, a2);
  ++a1[5];
}

uint64_t sub_10033CA2C(int64x2_t *a1)
{
  void (***v2)(_QWORD);

  v2 = (void (***)(_QWORD))(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x49uLL))
                                     + 56 * (a1[2].i64[0] % 0x49uLL));
  (**v2)(v2);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10046C2B0);
  return sub_1003426C0((uint64_t)a1, 1);
}

void sub_10033CAA4(uint64_t a1, const void *a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  _OWORD v7[5];
  _OWORD v8[4];
  __int128 v9;
  float32x4_t v10[8];
  _BYTE __dst[392];

  memcpy(__dst, a2, 0x180uLL);
  if (!*(_BYTE *)(a1 + 832))
    sub_10000BA44();
  v3 = *(float32x4_t *)(a1 + 784);
  v10[4] = *(float32x4_t *)(a1 + 768);
  v10[5] = v3;
  v4 = *(float32x4_t *)(a1 + 816);
  v10[6] = *(float32x4_t *)(a1 + 800);
  v10[7] = v4;
  v5 = *(float32x4_t *)(a1 + 720);
  v10[0] = *(float32x4_t *)(a1 + 704);
  v10[1] = v5;
  v6 = *(float32x4_t *)(a1 + 752);
  v10[2] = *(float32x4_t *)(a1 + 736);
  v10[3] = v6;
  sub_10033CB70((uint64_t)__dst, v10, (uint64_t)v8);
  BYTE8(v9) = 1;
  *(_QWORD *)&v9 = 0x4034000000000000;
  v7[2] = v8[2];
  v7[3] = v8[3];
  v7[0] = v8[0];
  v7[1] = v8[1];
  v7[4] = v9;
  sub_10033CD84(a1, (double *)v7);
}

void sub_10033CB70(uint64_t a1@<X1>, float32x4_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int32 v7;
  __int8 v8;
  __int8 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  double v19;
  double v20;
  simd_float2x2 v21;
  __double2 v22;
  float v23;
  float v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  _OWORD v31[4];
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __int32 v37;
  __int8 v38;
  __int8 v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  simd_float2x2 v46;

  v6 = a2->i64[0];
  v29 = a2[1];
  v30 = a2[2];
  v27 = a2[4];
  v28 = a2[3];
  v7 = a2[5].i32[0];
  v8 = a2[5].i8[4];
  v9 = a2[5].i8[5];
  *(double *)&v10 = sub_100311080((float32x4_t)xmmword_10047ADB0);
  v11 = 0;
  v31[0] = v10;
  v31[1] = v12;
  v31[2] = v13;
  v31[3] = v14;
  do
  {
    *(float32x4_t *)((char *)&v32 + v11 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(v31[v11])), v30, *(float32x2_t *)&v31[v11], 1), v28, (float32x4_t)v31[v11], 2), v27, (float32x4_t)v31[v11], 3);
    ++v11;
  }
  while (v11 != 4);
  v15 = v32;
  v16 = v33;
  v17 = v34;
  v18 = v35;
  v32.i64[0] = v6;
  v33 = v15;
  v34 = v16;
  v35 = v17;
  v36 = v18;
  v37 = v7;
  v38 = v8;
  v39 = v9;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  if (!*(_BYTE *)(a1 + 208))
    goto LABEL_7;
  if (!*(_BYTE *)(a1 + 192))
    goto LABEL_7;
  v19 = *(double *)(a1 + 200);
  v20 = *(float *)(a1 + 24);
  v46.columns[0] = (simd_float2)sub_10030D5BC(&v32);
  v21 = __invert_f2(v46);
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(double *)a3 = v20;
  if (!*(_BYTE *)(a1 + 192))
LABEL_7:
    sub_10000BA44();
  v22 = __sincos_stret(v19 * 3.14159265 / 180.0);
  v23 = v22.__sinval * v20;
  v24 = v22.__cosval * v20;
  v25 = vmla_n_f32(vmul_n_f32((float32x2_t)v21.columns[0], v24), (float32x2_t)v21.columns[1], v23);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 16);
  v26 = a2[4];
  *(double *)(a3 + 32) = COERCE_FLOAT(a2[4].i64[1]);
  *(float64x2_t *)(a3 + 16) = vcvtq_f64_f32(*(float32x2_t *)v26.f32);
  *(double *)(a3 + 48) = (float)(atan2f(v25.f32[0], v25.f32[1]) * 180.0) / 3.14159265;
  *(_BYTE *)(a3 + 56) = 1;
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(a1 + 320);
  *(_BYTE *)(a3 + 72) = *(_BYTE *)(a1 + 328);
}

void sub_10033CD84(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  long double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unsigned int v12;
  long double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  __double2 v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  double v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  double v39;
  unsigned int v40;
  unsigned int v41;
  __double2 v42;
  long double v43;
  long double v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  double v52;
  double v53;
  double *v54;
  double __y;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  void *__p[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  double v77[3];
  char v78;
  double v79[3];
  char v80;

  sub_1003430A0(__p, *(_QWORD *)(a1 + 32));
  sub_100340698(a1, (__n128 *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 4352) = 0;
  v4 = *(double *)(a1 + 176);
  v79[0] = 0.0;
  v79[1] = v4;
  v80 = 0;
  *(_OWORD *)v77 = *(_OWORD *)(a1 + 136);
  v78 = 0;
  v75 = xmmword_1004792C0;
  v76 = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *((double *)&v75 + 1) = a2[8] * 3.14159265 / 180.0;
    *(_BYTE *)(a1 + 4352) = 1;
  }
  v5 = *a2;
  if (*a2 >= 10.0)
  {
    if (v5 >= 20.0)
    {
      v7 = 0.65;
      if (v5 >= 30.0)
      {
        if (v5 >= 40.0)
        {
          if (v5 >= 50.0)
          {
            v57 = 7.64;
            v6 = 9.58;
            v7 = 1.08;
          }
          else
          {
            v57 = 2.36;
            v6 = 2.91;
            v7 = 0.85;
          }
        }
        else
        {
          v57 = 2.32;
          v6 = 2.64;
        }
      }
      else
      {
        v57 = 1.13;
        v6 = 1.41;
      }
    }
    else
    {
      v57 = 0.646;
      v6 = 0.76;
      v7 = 0.43;
    }
  }
  else
  {
    v57 = 0.48;
    v6 = 0.57;
    v7 = 0.3;
  }
  v8 = pow(v7 * (v5 - v57) / v6 + 1.0, -1.0 / v7);
  v56 = exp(-v8);
  if (*(uint64_t *)(a1 + 32) >= 1)
  {
    v9 = 0;
    v10 = 0;
    __y = -v7;
    v54 = a2;
    v52 = v6;
    v53 = v7;
    do
    {
      v11 = (double)sub_10014CC9C(a1 + 992);
      v12 = sub_10014CC9C(a1 + 992);
      v13 = log(v56 * (((v11 + (double)v12 * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0) / 6.28318531));
      v14 = pow(-v13, __y);
      if (*((_BYTE *)a2 + 56))
      {
        v15 = a2[6] * 3.14159265 / 180.0;
        v16 = sub_10034271C((uint64_t)&v75, a1 + 992, (double *)&v75) + v15;
      }
      else
      {
        v17 = (double)sub_10014CC9C(a1 + 992);
        v16 = (v17 + (double)sub_10014CC9C(a1 + 992) * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0;
      }
      v18 = v57 + v6 * (v14 + -1.0) / v7;
      if (v18 >= *a2)
        v18 = *a2;
      v19 = *a2 - v18;
      v20 = sub_10034271C((uint64_t)v79, a1 + 992, v79);
      if (fabs(v20) > v19)
      {
        if (v19 <= 10.0)
          v21 = v19;
        else
          v21 = 10.0;
        v22 = (double)sub_10014CC9C(a1 + 992);
        v20 = -(v21
              - (v21 + v21) * ((v22 + (double)sub_10014CC9C(a1 + 992) * 4294967300.0) * 5.42101086e-20));
      }
      v23 = 0.0;
      v24 = 0.0;
      if (v19 != 0.0)
        v24 = asin(v20 / v19);
      v63 = a2[2];
      v25 = __sincos_stret(v16);
      v26 = cos(v24);
      v59 = a2[3];
      v60 = a2[4];
      v58 = *(_QWORD *)(a1 + 32);
      v27 = *(_DWORD *)(a1 + 3616);
      v28 = 0.5;
      if (v27 != 1)
        v28 = 0.0;
      if (v27)
        v29 = v28;
      else
        v29 = 0.9;
      v30 = (double)sub_10014CC9C(a1 + 992);
      if ((v30 + (double)sub_10014CC9C(a1 + 992) * 4294967300.0) * 5.42101086e-20 + 0.0 <= v29)
      {
        v33 = 0;
      }
      else
      {
        v31 = *(double *)(a1 + 208);
        v32 = (double)sub_10014CC9C(a1 + 992);
        v23 = v31
            + ((v32 + (double)sub_10014CC9C(a1 + 992) * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0)
            / 6.28318
            * *(double *)(a1 + 216);
        v33 = 1;
      }
      v34 = sub_10034271C((uint64_t)v77, a1 + 992, v77);
      v35 = sub_10014CC9C(a1 + 992);
      v36 = sub_10014CC9C(a1 + 992);
      v37 = sub_10014CC9C(a1 + 992);
      v38 = sub_10014CC9C(a1 + 992);
      v39 = sub_10034271C((uint64_t)v77, a1 + 992, v77);
      v40 = sub_10014CC9C(a1 + 992);
      v41 = sub_10014CC9C(a1 + 992);
      if (!*(_BYTE *)(a1 + 24))
        sub_10000BA44();
      v62 = v60 + v25.__sinval * v19 * v26;
      v61 = v20 + v59;
      v42 = __sincos_stret(((double)v40 + (double)v41 * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0);
      v43 = exp(v39);
      v44 = exp(v34);
      v45 = *(_QWORD *)a1 + v9;
      *(double *)v45 = v63 + v25.__cosval * v19 * v26;
      *(double *)(v45 + 8) = v61;
      *(double *)(v45 + 16) = v62;
      *(double *)(v45 + 24) = v23 * v42.__cosval;
      *(double *)(v45 + 32) = v23 * v42.__sinval;
      *(double *)(v45 + 40) = v23;
      *(double *)(v45 + 48) = ((double)v35 + (double)v36 * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0;
      *(double *)(v45 + 56) = ((double)v37 + (double)v38 * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0;
      *(long double *)(v45 + 64) = v44;
      *(long double *)(v45 + 72) = v43;
      *(_DWORD *)(v45 + 80) = v33;
      *(double *)(v45 + 88) = 1.0 / (double)v58;
      ++v10;
      v9 += 96;
      a2 = v54;
      v6 = v52;
      v7 = v53;
    }
    while (*(_QWORD *)(a1 + 32) > v10);
    v5 = *v54;
  }
  sub_10033F010(a1, (uint64_t)__p, v5, a2[2], a2[3], a2[4]);
  v46 = *(unsigned __int8 *)(a1 + 664);
  v47 = v73;
  *(_OWORD *)(a1 + 616) = v72;
  *(_OWORD *)(a1 + 632) = v47;
  *(_OWORD *)(a1 + 648) = v74;
  v48 = v69;
  *(_OWORD *)(a1 + 552) = v68;
  *(_OWORD *)(a1 + 568) = v48;
  v49 = v71;
  *(_OWORD *)(a1 + 584) = v70;
  *(_OWORD *)(a1 + 600) = v49;
  v50 = v65;
  *(_OWORD *)(a1 + 488) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 504) = v50;
  v51 = v67;
  *(_OWORD *)(a1 + 520) = v66;
  *(_OWORD *)(a1 + 536) = v51;
  if (!v46)
    *(_BYTE *)(a1 + 664) = 1;
}

void sub_10033D430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10033D44C(uint64_t a1, void *__src)
{
  unsigned __int8 *v4;
  __int128 v5;
  __int128 v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[5];
  _OWORD v15[5];
  float32x4_t v16[8];
  _BYTE __dst[392];

  v4 = (unsigned __int8 *)(a1 + 4208);
  if (*(_BYTE *)(a1 + 4296)
    && *(_BYTE *)(a1 + 4272)
    && *(_BYTE *)(a1 + 664)
    && (!*(_BYTE *)(a1 + 4088) || *(double *)(a1 + 560) <= *(double *)(a1 + 296)))
  {
    v5 = *(_OWORD *)(a1 + 4264);
    v15[2] = *(_OWORD *)(a1 + 4248);
    v15[3] = v5;
    v15[4] = *(_OWORD *)(a1 + 4280);
    v6 = *(_OWORD *)(a1 + 4232);
    v15[0] = *(_OWORD *)(a1 + 4216);
    v15[1] = v6;
    sub_10033CD84(a1, (double *)v15);
    v4[144] = 1;
  }
  if (*((_BYTE *)__src + 208) && *((_BYTE *)__src + 328))
  {
    if (*(_BYTE *)(a1 + 832))
    {
      memcpy(__dst, __src, 0x180uLL);
      v7 = *(float32x4_t *)(a1 + 784);
      v16[4] = *(float32x4_t *)(a1 + 768);
      v16[5] = v7;
      v8 = *(float32x4_t *)(a1 + 816);
      v16[6] = *(float32x4_t *)(a1 + 800);
      v16[7] = v8;
      v9 = *(float32x4_t *)(a1 + 720);
      v16[0] = *(float32x4_t *)(a1 + 704);
      v16[1] = v9;
      v10 = *(float32x4_t *)(a1 + 752);
      v16[2] = *(float32x4_t *)(a1 + 736);
      v16[3] = v10;
      sub_10033CB70((uint64_t)__dst, v16, (uint64_t)v14);
      v11 = *v4;
      v12 = v14[0];
      *(_OWORD *)(a1 + 4144) = v14[1];
      v13 = v14[3];
      *(_OWORD *)(a1 + 4160) = v14[2];
      *(_OWORD *)(a1 + 4176) = v13;
      *(_OWORD *)(a1 + 4192) = v14[4];
      *(_OWORD *)(a1 + 4128) = v12;
      if (!v11)
        *v4 = 1;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
  {
    sub_1003EDEA4();
  }
}

void sub_10033D5C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  NSObject *v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  double v28;
  double v29;
  uint64_t v30;
  float v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  int v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float64x2_t v43;
  double v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE buf[32];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  *(_DWORD *)(a2 + 232) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  *(_BYTE *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 288) = 0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_BYTE *)(a2 + 320) = 0;
  *(_BYTE *)(a2 + 328) = 0;
  *(_BYTE *)(a2 + 336) = 0;
  *(_BYTE *)(a2 + 344) = 0;
  *(_WORD *)(a2 + 352) = 0;
  *(_BYTE *)(a2 + 356) = 0;
  *(_BYTE *)(a2 + 360) = 0;
  *(_BYTE *)(a2 + 364) = 0;
  *(_BYTE *)(a2 + 368) = 0;
  *(_BYTE *)(a2 + 372) = 0;
  *(_BYTE *)(a2 + 376) = 0;
  *(_WORD *)(a2 + 380) = 0;
  if (!*(_BYTE *)(a1 + 664) || !*(_BYTE *)(a1 + 832))
    return;
  *(_DWORD *)(a2 + 364) = 5;
  *(_BYTE *)(a2 + 368) = 1;
  if (*(_BYTE *)(a1 + 3728))
  {
    v4 = *(double *)(a1 + 3720);
    if (*(_BYTE *)(a1 + 688) && v4 - *(double *)(a1 + 680) > *(double *)(a1 + 344) + 1.38)
    {
      v5 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,PF reset due to timeout calculated from current time during getFilterSolution", buf, 2u);
      }
      sub_10033BECC(a1);
      return;
    }
    v6 = *(double *)(a1 + 584);
    if (*(_BYTE *)(a1 + 3944))
    {
      v7 = atan2((v4 - *(double *)(a1 + 3936)) * 0.65, *(long double *)(a1 + 560)) * 180.0 / 3.14159265;
      v8 = sqrt(v7 * v7 + v6 * v6);
      v9 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        *(double *)&buf[4] = v8;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v6;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = fabs(v7);
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#sa_algo_particlefilter,total arrow unc: %f, estimator arrow unc: %f, arrow unc from gap between current time and last motion update: %f", buf, 0x20u);
      }
    }
    else
    {
      v8 = *(double *)(a1 + 584);
    }
    *(double *)(a2 + 320) = v8;
    *(_BYTE *)(a2 + 328) = 1;
    v10 = *(double *)(a1 + 288);
    if (*(_BYTE *)(a1 + 4088))
      v10 = v10 + *(double *)(a1 + 4096);
    *(_BYTE *)(a1 + 4088) = v8 <= v10;
    if (v8 <= v10)
    {
      if (!*(_BYTE *)(a1 + 664))
        goto LABEL_54;
      if (*(double *)(a1 + 560) > *(double *)(a1 + 296))
      {
        if (!*(_BYTE *)(a1 + 832))
          goto LABEL_54;
        v42 = *(float32x4_t *)(a1 + 768);
        v12 = *(double *)(a1 + 488);
        v11 = *(double *)(a1 + 496);
        *(long double *)(a2 + 200) = atan2(v11 - v42.f32[2], v12 - v42.f32[0]) * 180.0 / 3.14159265;
        *(_BYTE *)(a2 + 208) = 1;
        v43 = (float64x2_t)*(unint64_t *)&v12;
        v44 = v11;
        v13 = *(_QWORD *)(a1 + 704);
        v40 = *(float32x4_t *)(a1 + 736);
        v41 = *(float32x4_t *)(a1 + 720);
        v39 = *(float32x4_t *)(a1 + 752);
        v14 = *(_DWORD *)(a1 + 784);
        v15 = *(_BYTE *)(a1 + 788);
        v16 = *(_BYTE *)(a1 + 789);
        *(double *)&v17 = sub_100311080((float32x4_t)xmmword_10047ADB0);
        v18 = 0;
        v45 = v17;
        v46 = v19;
        v47 = v20;
        v48 = v21;
        do
        {
          *(float32x4_t *)&buf[v18] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v41, COERCE_FLOAT(*(__int128 *)((char *)&v45 + v18))), v40, *(float32x2_t *)((char *)&v45 + v18), 1), v39, *(float32x4_t *)((char *)&v45 + v18), 2), v42, *(float32x4_t *)((char *)&v45 + v18), 3);
          v18 += 16;
        }
        while (v18 != 64);
        v22 = *(_OWORD *)buf;
        v23 = *(_OWORD *)&buf[16];
        v24 = v50;
        v25 = v51;
        *(_QWORD *)buf = v13;
        *(_OWORD *)&buf[16] = v22;
        v50 = v23;
        v51 = v24;
        v52 = v25;
        v53 = v14;
        v54 = v15;
        v55 = v16;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v45 = 0uLL;
        LODWORD(v46) = 0;
        sub_10030BEDC(&v43, (float32x4_t *)buf, (uint64_t)&v45);
        *(double *)(a2 + 200) = (float)(*((float *)&v45 + 1) * 180.0) / 3.14159265;
        *(_BYTE *)(a2 + 208) = 1;
      }
    }
    if (*(_BYTE *)(a1 + 832))
    {
      *(double *)&v26 = COERCE_DOUBLE(sub_10033DB6C(a1, (uint64_t *)(a1 + 704)));
      if (v27)
      {
        v28 = *(double *)&v26;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 664))
          goto LABEL_54;
        v28 = *(double *)(a1 + 560);
      }
      if (*(_BYTE *)(a1 + 832) && *(_BYTE *)(a1 + 664))
      {
        v29 = *(double *)(a1 + 616);
        if (*(_BYTE *)(a2 + 208))
        {
          *(_DWORD *)a2 = 1;
        }
        else if (*(_BYTE *)(a1 + 3689))
        {
          *(_BYTE *)(a2 + 5) = 1;
        }
        else if (!*(_BYTE *)(a1 + 3688))
        {
          *(_BYTE *)(a2 + 4) = 1;
        }
        v30 = *(_QWORD *)(a1 + 704);
        v31 = v28;
        v32 = sqrt(v29);
        v33 = *(float *)(a1 + 772);
        v34 = *(double *)(a1 + 656) - v33;
        if (v34 > 10.0)
          v34 = 10.0;
        if (*(double *)(a1 + 592) >= v34 || *(_DWORD *)(a1 + 3616) == 2)
          goto LABEL_50;
        v35 = *(double *)(a1 + 648);
        if (v35 <= 0.95)
        {
          if (v35 >= 0.05)
            goto LABEL_50;
          *(_DWORD *)(a2 + 232) = 1;
          *(double *)(a2 + 240) = *(double *)(a1 + 504) - v33;
        }
        else
        {
          v36 = *(double *)(a1 + 504) - v33;
          if (v36 <= 2.5)
          {
            if (v36 >= -2.5)
            {
              *(_DWORD *)(a2 + 232) = 4;
LABEL_50:
              v38 = *(unsigned __int8 *)(a2 + 192);
              *(_QWORD *)(a2 + 8) = 0;
              *(_QWORD *)(a2 + 16) = v30;
              *(float *)(a2 + 24) = v31;
              *(_DWORD *)(a2 + 28) = 1;
              *(_BYTE *)(a2 + 56) = 0;
              *(_QWORD *)(a2 + 32) = 0;
              *(_QWORD *)(a2 + 40) = 0;
              *(_BYTE *)(a2 + 60) = 0;
              *(_BYTE *)(a2 + 64) = 0;
              *(_BYTE *)(a2 + 68) = 0;
              *(_QWORD *)(a2 + 72) = 0;
              *(_QWORD *)(a2 + 80) = 0;
              *(_WORD *)(a2 + 88) = 0;
              *(_QWORD *)(a2 + 96) = 0;
              *(_QWORD *)(a2 + 104) = 0;
              *(double *)(a2 + 112) = v32;
              *(_QWORD *)(a2 + 120) = 1;
              *(_QWORD *)(a2 + 128) = 0x200000000;
              *(_BYTE *)(a2 + 136) = 0;
              *(_BYTE *)(a2 + 160) = 0;
              *(_QWORD *)(a2 + 168) = 0;
              *(_QWORD *)(a2 + 176) = 0;
              *(_QWORD *)(a2 + 184) = 0;
              if (!v38)
                *(_BYTE *)(a2 + 192) = 1;
              return;
            }
            v37 = 3;
          }
          else
          {
            v37 = 2;
          }
          *(_DWORD *)(a2 + 232) = v37;
          *(double *)(a2 + 240) = v36;
        }
        *(_BYTE *)(a2 + 248) = 1;
        goto LABEL_50;
      }
    }
LABEL_54:
    sub_10000BA44();
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EDED0();
}

uint64_t sub_10033DB6C(uint64_t a1, uint64_t *a2)
{
  BOOL v2;
  double *v3;
  double *v4;
  double v5;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = !byte_10085E318 || byte_10085E308 == 0;
    if (v2 || *(double *)a2 - *(double *)&qword_10085E300 > dbl_100478A50[*(_BYTE *)(a1 + 4432) == 0])
    {
      if (!*(_BYTE *)(a1 + 832))
        sub_10000BA44();
      v3 = *(double **)a1;
      v4 = *(double **)(a1 + 8);
      if (*(double **)a1 == v4)
      {
        v5 = 0.0;
      }
      else
      {
        v5 = 0.0;
        do
        {
          v5 = v5
             + sqrt((v3[1] - *(float *)(a1 + 772)) * (v3[1] - *(float *)(a1 + 772))+ (*v3 - *(float *)(a1 + 768)) * (*v3 - *(float *)(a1 + 768))+ (v3[2] - *(float *)(a1 + 776)) * (v3[2] - *(float *)(a1 + 776)))* v3[11];
          v3 += 12;
        }
        while (v3 != v4);
      }
      qword_10085E310 = *(_QWORD *)&v5;
      byte_10085E318 = 1;
      qword_10085E300 = *a2;
      byte_10085E308 = 1;
    }
  }
  return qword_10085E310;
}

uint64_t sub_10033DC6C(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t result;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;

  v3 = *(_DWORD *)(a1 + 4104);
  *(_DWORD *)(a1 + 4104) = *((_DWORD *)a2 + 20);
  v4 = a2[11];
  *(_BYTE *)(a1 + 4120) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 4112) = v4;
  v5 = *((_DWORD *)a2 + 20);
  if (v3 != v5)
  {
    if (v5 == 2)
    {
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *a2;
        v18 = 134217984;
        v19 = v9;
        v8 = "#sa_algo_particlefilter,VIO Tracking State changed to Normal at %f s";
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v18, 0xCu);
      }
    }
    else
    {
      if (v5 != 1)
      {
        if (v5)
          return 0;
        v6 = qword_10085F520;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          goto LABEL_12;
        v7 = *a2;
        v18 = 134217984;
        v19 = v7;
        v8 = "#sa_algo_particlefilter,VIO Tracking State changed to Not Available at %f s";
        goto LABEL_11;
      }
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *a2;
        v18 = 134217984;
        v19 = v10;
        v8 = "#sa_algo_particlefilter,VIO Tracking State changed to Limited at %f s";
        goto LABEL_11;
      }
    }
LABEL_12:
    v3 = *((_DWORD *)a2 + 20);
  }
  if (v3 != 2)
    return 0;
  if (*((_BYTE *)a2 + 84))
  {
    v11 = qword_10085F520;
    v12 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v12)
      return result;
    v14 = *a2;
    if (*((_BYTE *)a2 + 85))
      v15 = "YES";
    else
      v15 = "NO";
    v18 = 134218498;
    v19 = v14;
    v20 = 2080;
    v21 = "YES";
    v22 = 2080;
    v23 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,VIO reported relocalization event at %f s, MAJOR: %s, MINOR: %s - resetting", (uint8_t *)&v18, 0x20u);
    return 0;
  }
  if (*((_BYTE *)a2 + 85))
  {
    v16 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *a2;
      v18 = 134217984;
      v19 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,VIO reported MINOR relocalization event at %f s", (uint8_t *)&v18, 0xCu);
    }
  }
  return 1;
}

void sub_10033DEE4(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v10;
  void **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  NSObject *v23;
  double v24[3];
  char v25;
  _BYTE buf[32];
  _BYTE v27[32];
  __int128 v28;
  __int128 v29;

  if (!*(_BYTE *)(a1 + 24) || !*(_BYTE *)(a1 + 153))
  {
    *(double *)(a1 + 3736) = a4;
    *(_BYTE *)(a1 + 3744) = 1;
    return;
  }
  v10 = (_BYTE *)(a1 + 4392);
  if (*(_BYTE *)(a1 + 4392))
    *v10 = 0;
  v11 = *(void ***)(a1 + 4032);
  v12 = *(_QWORD *)(a1 + 4040);
  *(_QWORD *)(a1 + 4064) = 0;
  v13 = v12 - (_QWORD)v11;
  if (v13 >= 0x11)
  {
    do
    {
      operator delete(*v11);
      v11 = (void **)(*(_QWORD *)(a1 + 4032) + 8);
      *(_QWORD *)(a1 + 4032) = v11;
      v13 = *(_QWORD *)(a1 + 4040) - (_QWORD)v11;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    v14 = 64;
    goto LABEL_12;
  }
  if (v13 >> 3 == 2)
  {
    v14 = 128;
LABEL_12:
    *(_QWORD *)(a1 + 4056) = v14;
  }
  if (*(_DWORD *)(a1 + 3616) == 2)
  {
    v15 = 1;
    *(_DWORD *)(a1 + 3972) = 1;
  }
  else
  {
    v15 = 0;
  }
  *(_DWORD *)(a1 + 3968) = v15;
  v16 = qword_10085F520;
  v17 = a3 / a5;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219008;
    *(double *)&buf[4] = a5;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = a2;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = a3;
    *(_WORD *)v27 = 2048;
    *(double *)&v27[2] = a2 / a5;
    *(_WORD *)&v27[10] = 2048;
    *(double *)&v27[12] = a3 / a5;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,ingesting peer kinematic data: deltaT: %f, delta Vh1: %f, delta Vh2: %f, accel H1: %f, accel H2: %f ", buf, 0x34u);
  }
  v18 = *(double *)(a1 + 232);
  v24[0] = 0.0;
  v24[1] = v18;
  v25 = 0;
  if (!*(_BYTE *)(a1 + 24))
    sub_10000BA44();
  v19 = *(double *)a1;
  v20 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v20)
  {
    while (*(_DWORD *)(a1 + 3616) != 2)
    {
      if (!*(_DWORD *)(*(_QWORD *)&v19 + 80))
      {
        v21 = **(double **)&v19;
        **(double **)&v19 = v21 + sub_10034271C((uint64_t)v24, a1 + 992, v24);
        v22 = *(double *)(*(_QWORD *)&v19 + 16);
        *(double *)(*(_QWORD *)&v19 + 16) = v22 + sub_10034271C((uint64_t)v24, a1 + 992, v24);
        goto LABEL_27;
      }
      if (*(_BYTE *)(a1 + 3928))
      {
        sub_10033E388((double *)a1, *(uint64_t *)&v19, (uint64_t)buf, a4 - *(double *)(a1 + 3920));
        goto LABEL_25;
      }
LABEL_27:
      *(_QWORD *)&v19 += 96;
      if (*(_QWORD *)&v19 == v20)
        goto LABEL_28;
    }
    sub_10033E20C((double *)a1, *(uint64_t *)&v19, (uint64_t)buf, a5, a2 / a5, v17);
LABEL_25:
    *(_OWORD *)(*(_QWORD *)&v19 + 32) = *(_OWORD *)v27;
    *(_OWORD *)(*(_QWORD *)&v19 + 48) = *(_OWORD *)&v27[16];
    *(_OWORD *)(*(_QWORD *)&v19 + 64) = v28;
    *(_OWORD *)(*(_QWORD *)&v19 + 80) = v29;
    **(_OWORD **)&v19 = *(_OWORD *)buf;
    *(_OWORD *)(*(_QWORD *)&v19 + 16) = *(_OWORD *)&buf[16];
    goto LABEL_27;
  }
LABEL_28:
  v23 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,peer kinematic data ingested", buf, 2u);
  }
  *(double *)(a1 + 3920) = a4;
  *(_BYTE *)(a1 + 3928) = 1;
  *(double *)(a1 + 3936) = a4;
  *(_BYTE *)(a1 + 3944) = 1;
  *(double *)(a1 + 3736) = a4;
  *(_BYTE *)(a1 + 3744) = 1;
  if (*v10)
    *v10 = 0;
}

double sub_10033E20C@<D0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  __double2 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double result;
  double v27[3];
  char v28;
  double v29[3];
  char v30;
  double v31[3];
  char v32;

  v12 = sqrt(a4 / 0.1);
  v29[1] = a1[31];
  v27[1] = v12 * a1[33];
  v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v13;
  v14 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v14;
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v15;
  *(_QWORD *)&v13 = *(_QWORD *)(a2 + 16);
  v16 = *(double *)a2 + a4 * *(double *)(a2 + 24);
  v29[0] = 0.0;
  v30 = 0;
  v27[0] = 0.0;
  v28 = 0;
  *(double *)a3 = v16;
  *(double *)(a3 + 16) = *(double *)&v13 + a4 * *(double *)(a2 + 32);
  v17 = (uint64_t)(a1 + 124);
  v18 = sub_10034271C((uint64_t)v29, (uint64_t)(a1 + 124), v29) + a5;
  v19 = sub_10034271C((uint64_t)v29, v17, v29) + a6;
  v20 = __sincos_stret(*(double *)(a2 + 56));
  v21 = *(double *)(a2 + 24) + a4 * (v20.__cosval * v19 - v20.__sinval * v18);
  v22 = *(double *)(a2 + 32) + a4 * (v18 * v20.__cosval + v20.__sinval * v19);
  *(double *)(a3 + 24) = v21;
  *(double *)(a3 + 32) = v22;
  v23 = sqrt(v22 * v22 + v21 * v21);
  if (v23 >= a1[32])
  {
    *(double *)(a3 + 24) = v21 / v23;
    *(double *)(a3 + 32) = v22 / v23;
  }
  *(double *)(a3 + 56) = sub_10034271C((uint64_t)v27, v17, v27) + *(double *)(a3 + 56);
  v24 = v12 * a1[13];
  v31[0] = 0.0;
  v31[1] = v24;
  v32 = 0;
  v25 = *(double *)(a3 + 8);
  result = v25 + sub_10034271C((uint64_t)v31, v17, v31);
  *(double *)(a3 + 8) = result;
  return result;
}

uint64_t sub_10033E388@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  double v14;
  __double2 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t result;
  double v22;
  double v23;
  uint64_t v24;
  double v25[3];
  char v26;
  double v27[3];
  char v28;
  double v29[3];
  char v30;

  v8 = a1[30];
  v27[0] = 0.0;
  v27[1] = v8;
  v28 = 0;
  v9 = a1[33];
  v25[0] = 0.0;
  v25[1] = v9;
  v26 = 0;
  v24 = 0x200000000;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v10;
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v11;
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v12;
  v13 = *(double *)a2;
  v14 = *(double *)(a2 + 40) * a4;
  v15 = __sincos_stret(*(double *)(a2 + 48));
  *(double *)a3 = v13 + v14 * v15.__cosval;
  *(double *)(a3 + 16) = *(double *)(a2 + 16) + v14 * v15.__sinval;
  v16 = sqrt(a4 / 0.1) * a1[13];
  v29[0] = 0.0;
  v29[1] = v16;
  v30 = 0;
  v17 = *(double *)(a3 + 8);
  *(double *)(a3 + 8) = v17 + sub_10034271C((uint64_t)v29, (uint64_t)(a1 + 124), v29);
  v18 = sub_10034271C((uint64_t)v27, (uint64_t)(a1 + 124), v27);
  v19 = sub_10034271C((uint64_t)v25, (uint64_t)(a1 + 124), v25) + *(double *)(a2 + 48);
  *(double *)(a3 + 40) = v18 + *(double *)(a2 + 40);
  *(double *)(a3 + 48) = v19;
  v20 = (double)sub_10014CC9C((uint64_t)(a1 + 124));
  result = sub_10014CC9C((uint64_t)(a1 + 124));
  v22 = (v20 + (double)result * 4294967300.0) * 5.42101086e-20;
  v23 = 0.0;
  if (v22 + 0.0 < a1[34])
  {
    result = sub_100165990((uint64_t)&v24, (uint64_t)(a1 + 124), &v24);
    if (result <= 2)
      v23 = dbl_10047AD90[(int)result];
    *(double *)(a3 + 48) = v23 + *(double *)(a2 + 48);
  }
  return result;
}

void sub_10033E528(uint64_t a1, __int128 *a2)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EDEFC();
  sub_10034E4B8((int64x2_t *)(a1 + 4440), a2);
}

double sub_10033E588(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int8x16_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;

  if (*(_BYTE *)(a2 + 16))
  {
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003EDF28((_QWORD *)a2, v4, v5);
    if (!*(_BYTE *)(a2 + 152))
      goto LABEL_8;
    v6 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 120)), *(float64x2_t *)(a2 + 136));
    *(double *)&v7 = sub_100311080((float32x4_t)vextq_s8(v6, v6, 4uLL));
    *(_OWORD *)(a1 + 720) = v7;
    *(_OWORD *)(a1 + 736) = v8;
    *(_OWORD *)(a1 + 752) = v9;
    *(_DWORD *)(a1 + 816) = 1;
    *(_BYTE *)(a1 + 820) = 1;
    *(_DWORD *)(a1 + 808) = 1;
    *(_BYTE *)(a1 + 812) = 1;
    if (!*(_BYTE *)(a2 + 16))
LABEL_8:
      sub_10000BA44();
    result = *(double *)(a2 + 8);
    *(double *)(a1 + 704) = result;
  }
  return result;
}

void sub_10033E634(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  double *v9;
  double v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[22];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a2 + 80) && *(_BYTE *)(a2 + 96) && *(_BYTE *)(a2 + 112))
  {
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)(a2 + 120);
      v19 = *(_QWORD *)(a2 + 128);
      v20 = *(_QWORD *)(a2 + 136);
      v21 = *(_QWORD *)(a2 + 144);
      *(_DWORD *)v22 = 134218752;
      *(_QWORD *)&v22[4] = v18;
      *(_WORD *)&v22[12] = 2048;
      *(_QWORD *)&v22[14] = v19;
      v23 = 2048;
      v24 = v20;
      v25 = 2048;
      v26 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#sa_algo_particlefilter,ingesting delayed spliced finder deltav IO data: quatw: %f, quatx: %f, quaty: %f, quatz: %f", v22, 0x2Au);
      if (!*(_BYTE *)(a2 + 80) || !*(_BYTE *)(a2 + 112))
        goto LABEL_21;
    }
    v5 = *(double *)(a2 + 72);
    v6 = *(double *)(a2 + 104);
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003EDFB8(v7, v5, v6);
    v8 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)v22 = 0;
    *(_QWORD *)&v22[8] = v8;
    LOBYTE(v24) = 0;
    if (!*(_BYTE *)(a1 + 24))
LABEL_21:
      sub_10000BA44();
    v9 = *(double **)(a1 + 8);
    if (*(double **)a1 != v9)
    {
      v10 = v5 / 0.1;
      v11 = (double *)(*(_QWORD *)a1 + 32);
      v12 = v6 / 0.1;
      do
      {
        if (*(_BYTE *)(a1 + 80) && !*(_BYTE *)(a1 + 88))
        {
          v13 = *(double **)(a1 + 56);
          *(v11 - 1) = *(v11 - 1) - *v13;
          *v11 = *v11 - v13[2];
        }
        v14 = v11 - 4;
        v15 = *(v11 - 2);
        *(v11 - 4) = *(v11 - 4) + *(v11 - 1) * 0.1;
        *(v11 - 2) = v15 + *v11 * 0.1;
        v16 = v10 + sub_10034271C((uint64_t)v22, a1 + 992, (double *)v22);
        v17 = *v11 + (v12 + sub_10034271C((uint64_t)v22, a1 + 992, (double *)v22)) * -0.1;
        *(v11 - 1) = *(v11 - 1) + v16 * -0.1;
        *v11 = v17;
        v11 += 12;
      }
      while (v14 + 12 != v9);
    }
    if (*(_BYTE *)(a1 + 80))
    {
      if (!*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 1;
    }
  }
}

void sub_10033E884(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  NSObject *v19;
  _OWORD v20[10];
  _OWORD v21[10];
  uint8_t buf[16];

  if (*(_BYTE *)(a2 + 128))
  {
    sub_10033EAF8(a1, *(double *)a2);
    if (!*(_BYTE *)(a2 + 128))
      goto LABEL_30;
    sub_10033EE14(a1, (float *)a2);
    if (*(_BYTE *)(a2 + 116) && !*(_DWORD *)(a2 + 112) && (v4 & 1) == 0)
    {
      sub_10033BECC(a1);
      return;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EE178();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 48) = 1;
      if (*(_BYTE *)(a1 + 832))
      {
        v5 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003EE108(a1, v5);
      }
    }
  }
  v6 = *(_BYTE *)(a2 + 272);
  if (v6)
  {
    v7 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003EE0C0(v7, (_BYTE *)(a2 + 272));
    sub_10033E528(a1, (__int128 *)(a2 + 144));
    v6 = *(_BYTE *)(a2 + 272) != 0;
  }
  if (!*(_BYTE *)(a2 + 128) && (v6 & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 48))
    {
LABEL_25:
      if (*(_BYTE *)(a1 + 832))
      {
        v9 = *(_OWORD *)(a2 + 400);
        v21[6] = *(_OWORD *)(a2 + 384);
        v21[7] = v9;
        v10 = *(_OWORD *)(a2 + 432);
        v21[8] = *(_OWORD *)(a2 + 416);
        v21[9] = v10;
        v11 = *(_OWORD *)(a2 + 336);
        v21[2] = *(_OWORD *)(a2 + 320);
        v21[3] = v11;
        v12 = *(_OWORD *)(a2 + 368);
        v21[4] = *(_OWORD *)(a2 + 352);
        v21[5] = v12;
        v13 = *(_OWORD *)(a2 + 304);
        v21[0] = *(_OWORD *)(a2 + 288);
        v21[1] = v13;
        sub_10033E588(a1, (uint64_t)v21);
        v14 = *(_OWORD *)(a2 + 560);
        v20[6] = *(_OWORD *)(a2 + 544);
        v20[7] = v14;
        v15 = *(_OWORD *)(a2 + 592);
        v20[8] = *(_OWORD *)(a2 + 576);
        v20[9] = v15;
        v16 = *(_OWORD *)(a2 + 496);
        v20[2] = *(_OWORD *)(a2 + 480);
        v20[3] = v16;
        v17 = *(_OWORD *)(a2 + 528);
        v20[4] = *(_OWORD *)(a2 + 512);
        v20[5] = v17;
        v18 = *(_OWORD *)(a2 + 464);
        v20[0] = *(_OWORD *)(a2 + 448);
        v20[1] = v18;
        sub_10033E634(a1, (uint64_t)v20);
        if (*(_BYTE *)(a1 + 832))
        {
          v19 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            sub_1003EE050(a1, v19);
        }
      }
      return;
    }
    if (*(_BYTE *)(a1 + 3728))
    {
      if (*(double *)(a1 + 3720) - *(double *)(a1 + 40) > 7.0)
      {
        v8 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,reinitializing PF due to finder delta V timeout", buf, 2u);
        }
        sub_10033BECC(a1);
      }
      goto LABEL_25;
    }
LABEL_30:
    sub_10000BA44();
  }
}

void sub_10033EAF8(uint64_t a1, double a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  __int128 v14;
  NSObject *v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  __int128 v20;
  NSObject *v21;
  _QWORD v22[5];
  int v23;
  __int128 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint8_t buf[4];
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  double v39;
  float v40;
  float v41;
  float v42;
  int v43;
  char v44;
  char v45;

  if (!*(_BYTE *)(a1 + 3728) || *(double *)(a1 + 3720) < a2)
  {
    *(double *)(a1 + 3720) = a2;
    *(_BYTE *)(a1 + 3728) = 1;
    v4 = *(_QWORD *)(a1 + 4016);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 4008);
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 3984) + 8 * (v5 / 0x33));
      v7 = *(double *)(v6 + 80 * (v5 % 0x33) + 8);
      if (a2 - v7 > 1.38)
      {
        v8 = (uint64_t *)(v6 + 80 * (v5 % 0x33));
        v9 = *(double *)v8;
        v10 = *((double *)v8 + 2);
        v11 = *((double *)v8 + 3);
        v12 = *((double *)v8 + 4);
        v13 = *((_DWORD *)v8 + 10);
        v14 = *(_OWORD *)((char *)v8 + 60);
        v27 = *(_OWORD *)((char *)v8 + 44);
        v28 = v14;
        v29 = *((_DWORD *)v8 + 19);
        *(_QWORD *)(a1 + 4016) = v4 - 1;
        *(_QWORD *)(a1 + 4008) = v5 + 1;
        sub_100145C6C(a1 + 3976, 1);
        v15 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218496;
          v31 = v9;
          v32 = 2048;
          v33 = v7;
          v34 = 2048;
          v35 = a2;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,ingesting measurement,  range: %f, range time: %f, current time: %f", buf, 0x20u);
        }
        v16.n128_f64[0] = v7;
        sub_10034E5A0((_QWORD *)(a1 + 4440), (uint64_t)buf, v16);
        if (v45 && v44 && v43 == 1)
        {
          v13 = 0;
          v10 = v40;
          v11 = v41;
          v12 = v42;
        }
        else if (*(_BYTE *)(a1 + 3544) && *(_BYTE *)(a1 + 3576) && *(_BYTE *)(a1 + 3560))
        {
          v13 = 1;
        }
        *(double *)v22 = v9;
        *(double *)&v22[1] = v7;
        *(double *)&v22[2] = v10;
        *(double *)&v22[3] = v11;
        *(double *)&v22[4] = v12;
        v23 = v13;
        v24 = v27;
        v25 = v28;
        v26 = v29;
        sub_10033F95C(a1, (uint64_t)v22);
      }
    }
    v17 = *(_QWORD *)(a1 + 4064);
    if (v17)
    {
      v18 = *(_QWORD *)(a1 + 4056);
      v19 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 4032) + ((v18 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v18 & 0x7F));
      if (a2 - *v19 > 1.38)
      {
        v20 = *((_OWORD *)v19 + 1);
        v27 = *(_OWORD *)v19;
        v28 = v20;
        *(_QWORD *)(a1 + 4064) = v17 - 1;
        *(_QWORD *)(a1 + 4056) = v18 + 1;
        sub_100343138(a1 + 4024, 1);
        v21 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134219008;
          v31 = *((double *)&v27 + 1);
          v32 = 2048;
          v33 = *(double *)&v28;
          v34 = 2048;
          v35 = *((double *)&v28 + 1);
          v36 = 2048;
          v37 = v27;
          v38 = 2048;
          v39 = a2;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,ingesting peer vio,  x: %f, y: %f, z: %f, range time: %f, current time: %f", buf, 0x34u);
        }
        sub_100341AD4(a1, (uint64_t)&v27);
      }
    }
  }
}

__n128 sub_10033EE14(uint64_t a1, float *a2)
{
  double v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  NSObject *v11;
  __n128 result;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[11];

  sub_10033EAF8(a1, *(double *)a2);
  if (!*(_BYTE *)(a1 + 360))
  {
    *(_QWORD *)(a1 + 352) = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 360) = 1;
  }
  if (*(_BYTE *)(a1 + 3520))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(_BYTE *)(a1 + 688))
      {
        v4 = *(double *)a2;
        if (*(double *)a2 - *(double *)(a1 + 680) > 1.58 && v4 - *(double *)(a1 + 352) > 0.1)
        {
          *(double *)(a1 + 352) = v4;
          *(_BYTE *)(a1 + 360) = 1;
          sub_10033F010(a1, (uint64_t)v21, *(double *)(a1 + 3512), a2[16], a2[17], a2[18]);
          v5 = *(unsigned __int8 *)(a1 + 664);
          v6 = v21[9];
          *(_OWORD *)(a1 + 616) = v21[8];
          *(_OWORD *)(a1 + 632) = v6;
          *(_OWORD *)(a1 + 648) = v21[10];
          v7 = v21[5];
          *(_OWORD *)(a1 + 552) = v21[4];
          *(_OWORD *)(a1 + 568) = v7;
          v8 = v21[7];
          *(_OWORD *)(a1 + 584) = v21[6];
          *(_OWORD *)(a1 + 600) = v8;
          v9 = v21[1];
          *(_OWORD *)(a1 + 488) = v21[0];
          *(_OWORD *)(a1 + 504) = v9;
          v10 = v21[3];
          *(_OWORD *)(a1 + 520) = v21[2];
          *(_OWORD *)(a1 + 536) = v10;
          if (!v5)
            *(_BYTE *)(a1 + 664) = 1;
          *(_QWORD *)(a1 + 576) = *(_QWORD *)(a1 + 160);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 688) && *(double *)a2 - *(double *)(a1 + 680) > *(double *)(a1 + 344) + 1.38)
  {
    v11 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,PF reset due to timeout calculated from current pose", (uint8_t *)v21, 2u);
    }
    sub_10033BECC(a1);
  }
  if (sub_10033DC6C(a1, (uint64_t *)a2))
  {
    v13 = (_OWORD *)(a1 + 704);
    v14 = *(_OWORD *)a2;
    v15 = *((_OWORD *)a2 + 1);
    v16 = *((_OWORD *)a2 + 3);
    if (*(_BYTE *)(a1 + 832))
    {
      *(_OWORD *)(a1 + 736) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 752) = v16;
      *v13 = v14;
      *(_OWORD *)(a1 + 720) = v15;
      result = *(__n128 *)(a2 + 16);
      v17 = *((_OWORD *)a2 + 5);
      v18 = *((_OWORD *)a2 + 6);
      *(_QWORD *)(a1 + 816) = *((_QWORD *)a2 + 14);
      *(_OWORD *)(a1 + 784) = v17;
      *(_OWORD *)(a1 + 800) = v18;
      *(__n128 *)(a1 + 768) = result;
    }
    else
    {
      *(_OWORD *)(a1 + 736) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 752) = v16;
      *v13 = v14;
      *(_OWORD *)(a1 + 720) = v15;
      result = *(__n128 *)(a2 + 16);
      v19 = *((_OWORD *)a2 + 5);
      v20 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 800) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 816) = v20;
      *(__n128 *)(a1 + 768) = result;
      *(_OWORD *)(a1 + 784) = v19;
      *(_BYTE *)(a1 + 832) = 1;
    }
  }
  return result;
}

double sub_10033F010@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double v16;
  double *v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  double *v33;
  double v34;
  double *v35;
  double v36;
  double *v37;
  double v38;
  double *v39;
  double v40;
  double v41;
  long double v43;
  double v44;
  __double2 v45;
  long double v46;
  double result;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  long double v57;

  if (!*(_BYTE *)(a1 + 24))
    sub_10000BA44();
  v8 = *(double **)a1;
  v9 = *(double **)(a1 + 8);
  if (*(double **)a1 == v9)
  {
    v51 = 0.0;
    v52 = 0.0;
    v55 = 0.0;
    v56 = 0.0;
    v20 = 0.0;
    v16 = 0.0;
    v12 = 0.0;
    v10 = 0.0;
LABEL_47:
    v14 = 0.0;
LABEL_48:
    v53 = 0.0;
    v54 = 0.0;
LABEL_49:
    v25 = 0.0;
    v48 = 0.0;
    v49 = 0.0;
LABEL_50:
    v50 = 0.0;
    goto LABEL_51;
  }
  v10 = 0.0;
  v11 = *(double **)a1;
  do
  {
    v10 = v10 + *v11 * v11[11];
    v11 += 12;
  }
  while (v11 != v9);
  if (v8 == v9)
  {
    v51 = 0.0;
    v52 = 0.0;
    v55 = 0.0;
    v56 = 0.0;
    v20 = 0.0;
    v16 = 0.0;
    v12 = 0.0;
    goto LABEL_47;
  }
  v12 = 0.0;
  v13 = *(double **)a1;
  do
  {
    v12 = v12 + v13[2] * v13[11];
    v13 += 12;
  }
  while (v13 != v9);
  if (v8 == v9)
  {
    v51 = 0.0;
    v52 = 0.0;
    v55 = 0.0;
    v56 = 0.0;
    v20 = 0.0;
    v16 = 0.0;
    goto LABEL_47;
  }
  v14 = 0.0;
  v15 = *(double **)a1;
  do
  {
    v14 = v14 + v15[1] * v15[11];
    v15 += 12;
  }
  while (v15 != v9);
  if (v8 == v9)
  {
    v51 = 0.0;
    v52 = 0.0;
    v55 = 0.0;
    v56 = 0.0;
    v20 = 0.0;
    v16 = 0.0;
    goto LABEL_48;
  }
  v16 = 0.0;
  v17 = *(double **)a1;
  do
  {
    v16 = v16 + v17[5] * v17[11];
    v17 += 12;
  }
  while (v17 != v9);
  if (v8 == v9)
  {
    v51 = 0.0;
    v52 = 0.0;
    v55 = 0.0;
    v56 = 0.0;
    v20 = 0.0;
    goto LABEL_48;
  }
  v18 = 0.0;
  v19 = *(double **)a1;
  do
  {
    v18 = v18 + v19[6] * v19[11];
    v19 += 12;
  }
  while (v19 != v9);
  if (v8 == v9)
  {
    v51 = 0.0;
    v52 = 0.0;
    v55 = 0.0;
    v56 = 0.0;
    v20 = 0.0;
    v53 = 0.0;
    v54 = v18;
    goto LABEL_49;
  }
  v20 = 0.0;
  v21 = 0.0;
  v22 = *(double **)a1;
  do
  {
    v23 = sqrt((v22[2] - a6) * (v22[2] - a6) + (*v22 - a4) * (*v22 - a4));
    v24 = v22[11];
    v20 = v20 + v23 * v24;
    v21 = v21 + v23 * v23 * v24;
    v22 += 12;
  }
  while (v22 != v9);
  v54 = v18;
  if (v8 == v9)
  {
    v51 = 0.0;
    v52 = 0.0;
    v55 = v21;
    v56 = 0.0;
    v53 = 0.0;
    goto LABEL_49;
  }
  v25 = 0.0;
  v26 = 0.0;
  v27 = *(double **)a1;
  do
  {
    v28 = sqrt((v27[1] - a5) * (v27[1] - a5) + (*v27 - a4) * (*v27 - a4) + (v27[2] - a6) * (v27[2] - a6));
    v29 = v27[11];
    v25 = v25 + v28 * v29;
    v26 = v26 + v28 * v28 * v29;
    v27 += 12;
  }
  while (v27 != v9);
  v55 = v21;
  if (v8 == v9)
  {
    v51 = 0.0;
    v52 = 0.0;
    v56 = 0.0;
    v48 = 0.0;
    v49 = 0.0;
    v50 = 0.0;
    v53 = v26;
    goto LABEL_51;
  }
  v30 = 0.0;
  v31 = *(double **)a1;
  do
  {
    v30 = v30 + (*v31 - v10) * (*v31 - v10) * v31[11];
    v31 += 12;
  }
  while (v31 != v9);
  v53 = v26;
  if (v8 == v9)
  {
    v51 = 0.0;
    v52 = 0.0;
    v48 = 0.0;
    v49 = 0.0;
    v50 = 0.0;
    v56 = v30;
    goto LABEL_51;
  }
  v32 = 0.0;
  v33 = *(double **)a1;
  do
  {
    v32 = v32 + (v33[2] - v12) * (v33[2] - v12) * v33[11];
    v33 += 12;
  }
  while (v33 != v9);
  v56 = v30;
  if (v8 == v9)
  {
    v51 = 0.0;
    v52 = 0.0;
    v48 = 0.0;
    v49 = v32;
    goto LABEL_50;
  }
  v34 = 0.0;
  v35 = *(double **)a1;
  do
  {
    v34 = v34 + (v35[1] - v14) * (v35[1] - v14) * v35[11];
    v35 += 12;
  }
  while (v35 != v9);
  v49 = v32;
  if (v8 == v9)
  {
    v51 = v34;
    v52 = 0.0;
    v48 = 0.0;
    goto LABEL_50;
  }
  v36 = 0.0;
  v37 = *(double **)a1;
  do
  {
    v36 = v36 + (*v37 - v10) * (v37[2] - v12) * v37[11];
    v37 += 12;
  }
  while (v37 != v9);
  v51 = v34;
  if (v8 == v9)
  {
    v52 = 0.0;
    v50 = 0.0;
    v48 = v36;
  }
  else
  {
    v38 = 0.0;
    v39 = *(double **)a1;
    do
    {
      v40 = -0.0;
      if (vabdd_f64(v39[1], a5) > 2.5)
        v40 = v39[11];
      v38 = v38 + v40;
      v39 += 12;
    }
    while (v39 != v9);
    v48 = v36;
    if (v8 == v9)
    {
      v50 = 0.0;
      v52 = v38;
    }
    else
    {
      v41 = 0.0;
      do
      {
        v41 = v41 + fabs(v8[1]) * v8[11];
        v8 += 12;
      }
      while (v8 != v9);
      v52 = v38;
      v50 = v41;
    }
  }
LABEL_51:
  v43 = atan2(v14 - a5, v20);
  v57 = a5 + v25 * sin(v43);
  v44 = atan2(v12 - a6, v10 - a4);
  v45 = __sincos_stret(v44);
  v46 = atan2(sqrt(v56 + v49), v20);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0x408F400000000000;
  *(double *)a2 = v10;
  *(double *)(a2 + 8) = v12;
  *(double *)(a2 + 16) = v14;
  *(double *)(a2 + 24) = v16;
  *(double *)(a2 + 32) = v54;
  *(double *)(a2 + 40) = v56;
  *(double *)(a2 + 48) = v49;
  *(double *)(a2 + 56) = v51;
  *(double *)(a2 + 64) = v48;
  *(double *)(a2 + 72) = a3;
  *(long double *)(a2 + 96) = v46 * 180.0 / 3.14159265;
  *(double *)(a2 + 104) = v20;
  *(double *)(a2 + 112) = v55 - v20 * v20;
  *(double *)(a2 + 120) = v25;
  *(double *)(a2 + 128) = v53 - v25 * v25;
  *(double *)(a2 + 136) = a4 + v20 * v45.__cosval;
  *(long double *)(a2 + 144) = v57;
  *(double *)(a2 + 152) = a6 + v20 * v45.__sinval;
  result = v50;
  *(double *)(a2 + 160) = v52;
  *(double *)(a2 + 168) = v50;
  return result;
}

uint64_t sub_10033F538(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;

  if (*(_BYTE *)(result + 24))
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)(result + 8);
    if (*(_QWORD *)result != v3)
    {
      v5 = result + 992;
      do
      {
        v6 = (double)sub_10014CC9C(v5);
        result = sub_10014CC9C(v5);
        *(_DWORD *)(v2 + 80) = (v6 + (double)result * 4294967300.0) * 5.42101086e-20 + 0.0 >= a2;
        v2 += 96;
      }
      while (v2 != v3);
    }
  }
  return result;
}

void sub_10033F5DC(uint64_t a1, int a2, double a3)
{
  int v6;
  double v7;

  sub_10033EAF8(a1, a3);
  v6 = *(_DWORD *)(a1 + 3616);
  switch(v6)
  {
    case 0:
      if (a2 == 1)
      {
LABEL_8:
        v7 = 0.5;
LABEL_13:
        sub_10033F538(a1, v7);
        break;
      }
LABEL_10:
      if (a2 == 2)
      {
        v7 = 0.0;
        goto LABEL_13;
      }
      break;
    case 1:
      if (!a2)
        goto LABEL_12;
      goto LABEL_10;
    case 2:
      if (a2)
      {
        if (a2 != 1)
          break;
        goto LABEL_8;
      }
LABEL_12:
      v7 = 0.9;
      goto LABEL_13;
  }
  *(_DWORD *)(a1 + 3616) = a2;
  *(double *)(a1 + 3624) = a3;
  *(_BYTE *)(a1 + 3632) = 1;
}

void sub_10033F678(uint64_t a1, int a2, double a3, double a4)
{
  _BYTE *v8;
  __int128 v9;
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  _QWORD v19[2];
  float64x2_t v20;
  double v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint8_t buf[4];
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  uint64_t v32;

  v8 = (_BYTE *)(a1 + 4208);
  sub_10033EAF8(a1, a4);
  v8[224] = a2;
  if (!*(_BYTE *)(a1 + 832))
    return;
  LOBYTE(v23) = 0;
  v24 = 0;
  LOBYTE(v25) = 0;
  v26 = 0;
  *(double *)v19 = a3;
  *(double *)&v19[1] = a4;
  v9 = *(_OWORD *)(a1 + 768);
  v21 = COERCE_FLOAT(*(_QWORD *)(a1 + 776));
  v20 = vcvtq_f64_f32(*(float32x2_t *)&v9);
  if (*(_BYTE *)(a1 + 812))
  {
    v10 = *(_DWORD *)(a1 + 808);
    if (v10)
    {
      if (v10 != 1)
        goto LABEL_8;
      v11 = 0;
    }
    else
    {
      v11 = 2;
    }
    v22 = v11;
  }
LABEL_8:
  if (*(_BYTE *)(a1 + 820) && *(_DWORD *)(a1 + 816) == 1)
    v22 = 1;
  if (*v8 && a4 - *(double *)(a1 + 4136) < 1.0)
  {
    v23 = *(_QWORD *)(a1 + 4176);
    v24 = *(_BYTE *)(a1 + 4184);
    v25 = *(_QWORD *)(a1 + 4192);
    v26 = *(_BYTE *)(a1 + 4200);
  }
  if (!*(_BYTE *)(a1 + 3632))
    goto LABEL_20;
  v12 = 0.1;
  if (a2)
    v12 = 0.2;
  if (a4 - *(double *)(a1 + 3624) < v12)
  {
    sub_10033F8A0((_QWORD *)(a1 + 3976), (uint64_t)v19);
    v13 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      return;
    v14 = *(_QWORD *)(a1 + 4016);
    *(_DWORD *)buf = 134218496;
    v28 = a4;
    v29 = 2048;
    v30 = a3;
    v31 = 2048;
    v32 = v14;
    v15 = "#sa_algo_particlefilter,measurement queued, time: %f, range: %f, queue size: %lu";
    v16 = v13;
    v17 = 32;
  }
  else
  {
LABEL_20:
    v18 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v15 = "#sa_algo_particlefilter,measurement not queued due to lack of recent motion data";
    v16 = v18;
    v17 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
}

__n128 sub_10033F8A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 51 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100342834(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(__n128 *)(v8 + 16) = result;
  *(_OWORD *)(v8 + 32) = v10;
  ++a1[5];
  return result;
}

void sub_10033F95C(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  _BYTE *v8;
  NSObject *v9;
  NSObject *v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  NSObject *v15;
  NSObject *v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  NSObject *v39;
  const char *v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  double v46;
  double *v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  __double2 v56;
  double *v57;
  double v58;
  __int128 v59;
  int64x2_t v60;
  uint64_t v61;
  int64x2_t v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  double **v66;
  double *v67;
  double *v68;
  unint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int64x2_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  _OWORD v97[5];
  void *__p[2];
  __int128 v99;
  uint64_t v100;
  double v101;
  char v102[120];
  double v103;
  double v104;
  double v105[3];
  char v106;
  _OWORD v107[5];
  _BYTE buf[32];
  _BYTE v109[48];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;

  v2 = *(double *)a2;
  v3 = *(double *)(a2 + 8);
  v4 = *(double *)(a2 + 24);
  v96 = *(double *)(a2 + 32);
  v5 = *(double *)(a2 + 16);
  *(double *)(a1 + 3568) = v4;
  *(_BYTE *)(a1 + 3576) = 1;
  if (!*(_BYTE *)(a1 + 832))
    return;
  v95 = v5;
  v8 = (_BYTE *)(a1 + 832);
  v9 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EE1D0(v9, v8, v2);
  if (*(_BYTE *)(a1 + 688) && v3 - *(double *)(a1 + 680) > *(double *)(a1 + 344))
  {
    v10 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,PF reset due to timeout calculated from current range", buf, 2u);
    }
    sub_10033BECC(a1);
  }
  if (!*(_BYTE *)(a1 + 24))
  {
    v25 = *(_OWORD *)(a2 + 48);
    v107[2] = *(_OWORD *)(a2 + 32);
    v107[3] = v25;
    v107[4] = *(_OWORD *)(a2 + 64);
    v26 = *(_OWORD *)(a2 + 16);
    v107[0] = *(_OWORD *)a2;
    v107[1] = v26;
    sub_10033CD84(a1, (double *)v107);
    *(double *)(a1 + 680) = v3;
    *(_BYTE *)(a1 + 688) = 1;
    *(_QWORD *)(a1 + 3512) = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 3520) = 1;
    v27 = *(unsigned __int8 *)(a1 + 4296);
    *(_OWORD *)(a1 + 4216) = *(_OWORD *)a2;
    v28 = *(_OWORD *)(a2 + 64);
    v30 = *(_OWORD *)(a2 + 16);
    v29 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 4264) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 4280) = v28;
    *(_OWORD *)(a1 + 4232) = v30;
    *(_OWORD *)(a1 + 4248) = v29;
    if (!v27)
      *(_BYTE *)(a1 + 4296) = 1;
    return;
  }
  v11 = *(double *)(a1 + 232);
  v105[0] = 0.0;
  v105[1] = v11;
  v106 = 0;
  v12 = 3960;
  if (!*(_BYTE *)(a1 + 4432))
    v12 = 3952;
  v13 = *(double *)(a1 + v12);
  if (*(_BYTE *)(a1 + 3928))
  {
    v14 = *(double *)(a1 + 3920);
    if (v3 - v14 <= v13)
      goto LABEL_34;
    v15 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,time of last pdr update: %f, current time: %f", buf, 0x16u);
    }
  }
  if (*(_BYTE *)(a1 + 3944))
  {
    v16 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v17 = v3 - *(double *)(a1 + 3936);
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,time since process model update: %f", buf, 0xCu);
      v16 = qword_10085F520;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,using random motion model", buf, 2u);
    }
    if (*(_BYTE *)(a1 + 3928) && v3 - *(double *)(a1 + 3920) > v13 + v13)
      return;
    if (!*(_BYTE *)(a1 + 24))
      sub_10000BA44();
    v18 = *(double **)a1;
    v19 = *(double **)(a1 + 8);
    if (*(double **)a1 != v19)
    {
      do
      {
        if (*((_DWORD *)v18 + 20))
        {
          if (*(_BYTE *)(a1 + 3928))
          {
            sub_10033E388((double *)a1, (uint64_t)v18, (uint64_t)buf, v3 - *(double *)(a1 + 3920));
LABEL_31:
            *((_OWORD *)v18 + 2) = *(_OWORD *)v109;
            *((_OWORD *)v18 + 3) = *(_OWORD *)&v109[16];
            *((_OWORD *)v18 + 4) = *(_OWORD *)&v109[32];
            *((_OWORD *)v18 + 5) = v110;
            *(_OWORD *)v18 = *(_OWORD *)buf;
            *((_OWORD *)v18 + 1) = *(_OWORD *)&buf[16];
            *(_DWORD *)(a1 + 3968) = 0;
            goto LABEL_32;
          }
          if (*(_BYTE *)(a1 + 688))
          {
            sub_10033E388((double *)a1, (uint64_t)v18, (uint64_t)buf, v3 - *(double *)(a1 + 680));
            goto LABEL_31;
          }
        }
        else
        {
          v20 = *v18;
          *v18 = v20 + sub_10034271C((uint64_t)v105, a1 + 992, v105);
          v21 = v18[2];
          v18[2] = v21 + sub_10034271C((uint64_t)v105, a1 + 992, v105);
        }
LABEL_32:
        v18 += 12;
      }
      while (v18 != v19);
    }
  }
  *(double *)(a1 + 3936) = v3;
  *(_BYTE *)(a1 + 3944) = 1;
LABEL_34:
  sub_10033F010(a1, (uint64_t)v102, v2, v95, v4, v96);
  v22 = v104;
  v23 = v2 - v103;
  v101 = v2 - v103;
  if (v2 >= 10.0)
  {
    if (v2 >= 20.0)
    {
      if (v2 >= 30.0)
      {
        if (v2 >= 40.0)
        {
          if (v2 >= 50.0)
          {
            if (v2 >= 60.0)
              v24 = 3.02;
            else
              v24 = 2.37;
          }
          else
          {
            v24 = 1.8;
          }
        }
        else
        {
          v24 = 1.56;
        }
      }
      else
      {
        v24 = 0.89;
      }
    }
    else
    {
      v24 = 0.69;
    }
  }
  else
  {
    v24 = 0.433;
  }
  v31 = *(double *)(a1 + 424);
  v32 = *(double *)(a1 + 432);
  sub_1001CF89C((_QWORD *)(a1 + 4304), &v101);
  v33 = *(_QWORD *)(a1 + 4344);
  if (v33 >= 0xB)
  {
    v34 = *(_QWORD *)(a1 + 4336);
    *(_QWORD *)(a1 + 4344) = v33 - 1;
    *(_QWORD *)(a1 + 4336) = v34 + 1;
    sub_1001CFCA4(a1 + 4304, 1);
  }
  v35 = (v23 - v24) / sqrt(v22 * v31 + v32 * v32);
  if (*(_BYTE *)(a1 + 3504))
  {
    v36 = *(double *)(a1 + 368);
    if (v35 < v36)
      *(_BYTE *)(a1 + 3504) = 0;
    if (*(_BYTE *)(a1 + 4352) || *(_DWORD *)(a1 + 3616) == 2)
      v37 = (double *)(a1 + 456);
    else
      v37 = (double *)(a1 + 376);
    if (v3 - *(double *)(a1 + 3528) <= *v37)
    {
      if (v35 >= v36)
        goto LABEL_75;
      goto LABEL_74;
    }
    v39 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
LABEL_66:
      sub_10033BECC(a1);
      return;
    }
    *(_WORD *)buf = 0;
    v40 = "#sa_algo_particlefilter,PF reset due to nlos timeout";
LABEL_65:
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v40, buf, 2u);
    goto LABEL_66;
  }
  if (!*(_BYTE *)(a1 + 3520))
  {
LABEL_74:
    sub_10033C1B4(a1, *(double *)(a2 + 16), *(double *)(a2 + 32), *(double *)(a2 + 8));
    goto LABEL_75;
  }
  v38 = *(double *)(a1 + 368);
  if (v35 <= v38)
  {
    if (v35 >= -v38)
    {
      if (*(_BYTE *)(a1 + 392))
        *(_BYTE *)(a1 + 392) = 0;
    }
    else if (*(_BYTE *)(a1 + 392))
    {
      *(_BYTE *)(a1 + 392) = 0;
      v39 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_66;
      *(_WORD *)buf = 0;
      v40 = "#sa_algo_particlefilter,PF reset due to transition from los to nlos detected";
      goto LABEL_65;
    }
    goto LABEL_74;
  }
  *(_BYTE *)(a1 + 3504) = 1;
  *(double *)(a1 + 3528) = v3;
  *(_BYTE *)(a1 + 392) = 0;
LABEL_75:
  *(double *)(a1 + 3512) = v2;
  *(_BYTE *)(a1 + 3520) = 1;
  v41 = *(unsigned __int8 *)(a1 + 4296);
  *(_OWORD *)(a1 + 4216) = *(_OWORD *)a2;
  v42 = *(_OWORD *)(a2 + 64);
  v44 = *(_OWORD *)(a2 + 16);
  v43 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4264) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 4280) = v42;
  *(_OWORD *)(a1 + 4232) = v44;
  *(_OWORD *)(a1 + 4248) = v43;
  if (!v41)
    *(_BYTE *)(a1 + 4296) = 1;
  if (*(_BYTE *)(a1 + 3544) && *(_BYTE *)(a1 + 3576) && *(_BYTE *)(a1 + 3560) && !*(_DWORD *)(a2 + 40))
  {
    v45 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = v45;
    buf[24] = 0;
    if (!*(_BYTE *)(a1 + 688))
      sub_10000BA44();
    if (!*(_BYTE *)(a1 + 24))
      sub_10000BA44();
    v46 = v95 - *(double *)(a1 + 3536);
    v93 = *(double *)(a2 + 8);
    v94 = v96 - *(double *)(a1 + 3552);
    v92 = *(double *)(a1 + 680);
    v47 = *(double **)a1;
    v48 = *(double **)(a1 + 8);
    if (*(double **)a1 != v48)
    {
      do
      {
        v49 = sub_10034271C((uint64_t)buf, a1 + 992, (double *)buf);
        v50 = v3;
        v51 = v2;
        v52 = v4;
        v53 = v47[9];
        v54 = v46 * v53 - v46;
        v55 = v94 * v53 - v94;
        v56 = __sincos_stret(v49);
        *v47 = *v47 + v56.__sinval * v55 - v56.__cosval * v54;
        v47[2] = v47[2] + -(v55 * v56.__cosval) - v56.__sinval * v54;
        if (*(_BYTE *)(a1 + 88) && *(_BYTE *)(a1 + 80))
        {
          v57 = *(double **)(a1 + 56);
          v58 = v47[4];
          v47[3] = *v57 + v47[3];
          v47[4] = v57[2] + v58;
        }
        v47 += 12;
        v4 = v52;
        v2 = v51;
        v3 = v50;
      }
      while (v47 != v48);
    }
    *(double *)&v118 = v46 / (v93 - v92);
    *((_QWORD *)&v118 + 1) = 0;
    *(double *)&v119 = v94 / (v93 - v92);
    sub_100337D5C(__p, &v118, 3uLL);
    sub_100340698(a1 + 56, (__n128 *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_BYTE *)(a1 + 88) = 0;
  }
  *(_OWORD *)__p = 0u;
  v99 = 0u;
  v100 = 0;
  v118 = 0u;
  v119 = 0u;
  v120 = 0;
  if (!*v8)
  {
    v59 = xmmword_10047AB80;
    v60 = vdupq_n_s64(0x408F400000000000uLL);
    v61 = 0x408F400000000000;
    v62 = v60;
    v63 = xmmword_10047AB80;
LABEL_105:
    *(double *)(a1 + 680) = v3;
    *(_BYTE *)(a1 + 688) = 1;
    v77 = 384;
    if (!*(_BYTE *)(a1 + 3504))
      v77 = 160;
    v78 = *(_QWORD *)(a1 + v77);
    v79 = *(unsigned __int8 *)(a1 + 664);
    *(_QWORD *)(a1 + 520) = v100;
    v80 = v99;
    *(_OWORD *)(a1 + 488) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 504) = v80;
    *(int64x2_t *)(a1 + 528) = v60;
    *(int64x2_t *)(a1 + 544) = v62;
    *(double *)(a1 + 560) = v2;
    *(double *)(a1 + 568) = v3;
    *(_QWORD *)(a1 + 576) = v78;
    *(_OWORD *)(a1 + 584) = v59;
    *(_OWORD *)(a1 + 600) = v63;
    *(_QWORD *)(a1 + 616) = v61;
    v81 = v119;
    *(_OWORD *)(a1 + 624) = v118;
    *(_OWORD *)(a1 + 640) = v81;
    *(_QWORD *)(a1 + 656) = v120;
    if (!v79)
      *(_BYTE *)(a1 + 664) = 1;
    v82 = *(_OWORD *)(a1 + 816);
    *(_OWORD *)(a1 + 944) = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 960) = v82;
    *(_BYTE *)(a1 + 976) = *(_BYTE *)(a1 + 832);
    v83 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a1 + 880) = *(_OWORD *)(a1 + 736);
    *(_OWORD *)(a1 + 896) = v83;
    v84 = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 912) = *(_OWORD *)(a1 + 768);
    *(_OWORD *)(a1 + 928) = v84;
    v85 = *(_OWORD *)(a1 + 720);
    *(_OWORD *)(a1 + 848) = *(_OWORD *)(a1 + 704);
    *(_OWORD *)(a1 + 864) = v85;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003EE1A4();
    *(_QWORD *)(a1 + 3536) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 3544) = 1;
    *(_QWORD *)(a1 + 3552) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 3560) = 1;
    return;
  }
  if (*(_BYTE *)(a1 + 3504))
  {
    if (!*(_BYTE *)(a1 + 664))
      sub_10000BA44();
    if (!*(_BYTE *)(a1 + 3520))
      sub_10000BA44();
    sub_10033F010(a1, (uint64_t)buf, *(double *)(a1 + 3512), v95, v4, v96);
LABEL_104:
    *(_OWORD *)__p = *(_OWORD *)buf;
    v99 = *(_OWORD *)&buf[16];
    v100 = *(_QWORD *)v109;
    v60 = *(int64x2_t *)&v109[8];
    v62 = *(int64x2_t *)&v109[24];
    v59 = v111;
    v63 = v112;
    v61 = v113;
    v118 = v114;
    v119 = v115;
    v120 = v116;
    goto LABEL_105;
  }
  v64 = *(_QWORD *)(a1 + 4312);
  if (*(_QWORD *)(a1 + 4320) != v64)
  {
    v65 = *(_QWORD *)(a1 + 4336);
    v66 = (double **)(v64 + 8 * (v65 >> 9));
    v67 = *v66;
    v68 = &(*v66)[v65 & 0x1FF];
    v69 = *(_QWORD *)(a1 + 4344);
    v70 = *(_QWORD *)(v64 + (((v69 + v65) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v69 + v65) & 0x1FF);
    if (v68 != (double *)v70)
    {
      v71 = (double)v69;
      v72 = 0.0;
      v73 = 0.0;
      do
      {
        v74 = *v68++;
        v75 = v74;
        if ((char *)v68 - (char *)v67 == 4096)
        {
          v76 = v66[1];
          ++v66;
          v67 = v76;
          v68 = v76;
        }
        v73 = v73 + v75 / v71;
        v72 = v72 + v75 * v75 / v71;
      }
      while (v68 != (double *)v70);
    }
  }
  sub_1003406F4(a1, (uint64_t)buf, v2, v95, v96, v4);
  if (v117)
    goto LABEL_104;
  v86 = *(_OWORD *)(a2 + 48);
  v97[2] = *(_OWORD *)(a2 + 32);
  v97[3] = v86;
  v97[4] = *(_OWORD *)(a2 + 64);
  v87 = *(_OWORD *)(a2 + 16);
  v97[0] = *(_OWORD *)a2;
  v97[1] = v87;
  sub_10033CD84(a1, (double *)v97);
  *(double *)(a1 + 680) = v3;
  *(_BYTE *)(a1 + 688) = 1;
  v88 = 384;
  if (!*(_BYTE *)(a1 + 3504))
    v88 = 160;
  v89 = *(_QWORD *)(a1 + v88);
  v90 = *(unsigned __int8 *)(a1 + 664);
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  v91 = vdupq_n_s64(0x408F400000000000uLL);
  *(int64x2_t *)(a1 + 528) = v91;
  *(int64x2_t *)(a1 + 544) = v91;
  *(_QWORD *)(a1 + 560) = 0;
  *(double *)(a1 + 568) = v3;
  *(_QWORD *)(a1 + 576) = v89;
  *(_QWORD *)(a1 + 584) = 0x408F400000000000;
  *(_OWORD *)(a1 + 592) = xmmword_10047AB90;
  *(_OWORD *)(a1 + 608) = xmmword_10047AB90;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  if (!v90)
    *(_BYTE *)(a1 + 664) = 1;
}

void sub_100340468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100340698(uint64_t a1, __n128 *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    sub_10013775C(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1003406F4(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  double *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  double v39;
  double *v40;
  double *v41;
  double *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  double *v48;
  uint64_t v49;
  double *v50;
  double v51;
  double v52;
  NSObject *v53;
  double *v54;
  double v55;
  double v56;
  uint64_t *v57;
  double *v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  double *v64;
  double v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  uint64_t v68;
  NSObject *v69;
  double v70;
  NSObject *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  double *v77;
  double v78;
  double v79;
  double v80;
  void *v81;
  double *v82;
  double *v83;
  void *__p;
  char *v85;
  char *v86;
  void *v87;
  double *v88;
  double *v89;
  uint8_t v90[4];
  double v91;
  __int16 v92;
  uint64_t v93;
  _BYTE buf[32];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;

  if (!*(_BYTE *)(a1 + 24))
    sub_1003EE284();
  *(double *)(a1 + 3496) = *(double *)(a1 + 3496) + 1.0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v12 = *(double **)a1;
  v13 = *(double **)(a1 + 8);
  if (*(double **)a1 == v13)
  {
    v29 = 0;
    __p = 0;
    v85 = 0;
    v86 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = a3 - sqrt((v12[2] - a5) * (v12[2] - a5) + (*v12 - a4) * (*v12 - a4) + (v12[1] - a6) * (v12[1] - a6));
      if (v14 >= v89)
      {
        v16 = (double *)v87;
        v17 = ((char *)v14 - (_BYTE *)v87) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          sub_100026E7C();
        v19 = (char *)v89 - (_BYTE *)v87;
        if (((char *)v89 - (_BYTE *)v87) >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_10005538C((uint64_t)&v89, v20);
          v16 = (double *)v87;
          v14 = v88;
        }
        else
        {
          v21 = 0;
        }
        v22 = (double *)&v21[8 * v17];
        *v22 = v15;
        v23 = v22 + 1;
        while (v14 != v16)
        {
          v24 = *((_QWORD *)v14-- - 1);
          *((_QWORD *)v22-- - 1) = v24;
        }
        v87 = v22;
        v88 = v23;
        v89 = (double *)&v21[8 * v20];
        if (v16)
          operator delete(v16);
        v14 = v23;
      }
      else
      {
        *v14++ = v15;
      }
      v88 = v14;
      v12 += 12;
    }
    while (v12 != v13);
    v25 = (double *)v87;
    __p = 0;
    v85 = 0;
    v86 = 0;
    if (v87 == v14)
    {
      v29 = 0;
    }
    else
    {
      v26 = 0;
      do
      {
        sub_100340FB4(a3, *v25);
        v28 = v27;
        if (v26 >= v86)
        {
          v30 = (char *)__p;
          v31 = (v26 - (_BYTE *)__p) >> 3;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61)
            sub_100026E7C();
          v33 = v86 - (_BYTE *)__p;
          if ((v86 - (_BYTE *)__p) >> 2 > v32)
            v32 = v33 >> 2;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)sub_10005538C((uint64_t)&v86, v34);
            v30 = (char *)__p;
            v26 = v85;
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[8 * v31];
          *(_QWORD *)v36 = v28;
          v29 = v36 + 8;
          while (v26 != v30)
          {
            v37 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            *((_QWORD *)v36 - 1) = v37;
            v36 -= 8;
          }
          __p = v36;
          v85 = v29;
          v86 = &v35[8 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *(_QWORD *)v26 = v27;
          v29 = v26 + 8;
        }
        v85 = v29;
        ++v25;
        v26 = v29;
      }
      while (v25 != v14);
    }
  }
  if (!*(_BYTE *)(a1 + 24))
    sub_10000BA44();
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5) != (v29 - (_BYTE *)__p) >> 3)
    __assert_rtn("measurementUpdate", "ParticleFilter.cpp", 1165, "likelihoods.size() == _particles.value().size()");
  v81 = 0;
  v82 = 0;
  v83 = 0;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
  {
    v41 = 0;
  }
  else
  {
    v38 = 0;
    do
    {
      v39 = *(double *)(*(_QWORD *)a1 + 96 * v38 + 88) * *((double *)__p + v38) + 1.0e-50;
      v40 = v82;
      if (v82 >= v83)
      {
        v42 = (double *)v81;
        v43 = ((char *)v82 - (_BYTE *)v81) >> 3;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 61)
          sub_100026E7C();
        v45 = (char *)v83 - (_BYTE *)v81;
        if (((char *)v83 - (_BYTE *)v81) >> 2 > v44)
          v44 = v45 >> 2;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v47 = (char *)sub_10005538C((uint64_t)&v83, v46);
          v42 = (double *)v81;
          v40 = v82;
        }
        else
        {
          v47 = 0;
        }
        v48 = (double *)&v47[8 * v43];
        *v48 = v39;
        v41 = v48 + 1;
        while (v40 != v42)
        {
          v49 = *((_QWORD *)v40-- - 1);
          *((_QWORD *)v48-- - 1) = v49;
        }
        v81 = v48;
        v82 = v41;
        v83 = (double *)&v47[8 * v46];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *v82 = v39;
        v41 = v40 + 1;
      }
      v82 = v41;
      if (!*(_BYTE *)(a1 + 24))
        sub_10000BA44();
      ++v38;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5) > v38);
  }
  v50 = (double *)v81;
  v51 = 0.0;
  while (v50 != v41)
  {
    v52 = *v50++;
    v51 = v51 + v52;
  }
  v53 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v77 = (double *)v87;
    v78 = 0.0;
    while (v77 != v88)
    {
      v79 = *v77++;
      v78 = v78 + v79;
    }
    v80 = (double)*(uint64_t *)(a1 + 32);
    *(_DWORD *)buf = 134218496;
    *(double *)&buf[4] = v78 / v80;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = a3;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v51;
    _os_log_debug_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "#sa_algo_particlefilter,average error: %f, measurement: %f m, total likelihood: %f", buf, 0x20u);
  }
  if (v51 >= 0.009)
  {
    v57 = (uint64_t *)v81;
    v58 = v82;
    if (v81 != v82)
    {
      v59 = (double *)v81;
      do
      {
        *v59 = *v59 / v51;
        ++v59;
      }
      while (v59 != v58);
    }
    if (!*(_BYTE *)(a1 + 24))
      sub_10000BA44();
    v60 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v60)
    {
      v61 = v60 / 96;
      v62 = (_QWORD *)(*(_QWORD *)a1 + 88);
      do
      {
        v63 = *v57++;
        *v62 = v63;
        v62 += 12;
        --v61;
      }
      while (v61);
    }
    sub_10033F010(a1, (uint64_t)buf, a3, a4, a6, a5);
    if (!*(_BYTE *)(a1 + 24))
      sub_10000BA44();
    v64 = *(double **)a1;
    v65 = 0.0;
    while (v64 != *(double **)(a1 + 8))
    {
      v65 = v65 + v64[11] * v64[11];
      v64 += 12;
    }
    v70 = 0.05;
    if (*(_DWORD *)(a1 + 3968) == 1)
      v70 = 0.25;
    *(double *)(a1 + 280) = v70;
    if (1.0 / v65 / (double)*(uint64_t *)(a1 + 32) < v70 && *(double *)(a1 + 3496) > *(double *)(a1 + 312))
    {
      sub_100341064(a1, (double **)&v81, a3, a4, a5);
      *(_QWORD *)(a1 + 3496) = 0;
    }
    v71 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v90 = 134218240;
      v91 = a3;
      v92 = 2048;
      v93 = v99;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,measurement: %f, uncertainty: %f", v90, 0x16u);
    }
    v72 = v102;
    *(_OWORD *)(a2 + 128) = v101;
    *(_OWORD *)(a2 + 144) = v72;
    *(_OWORD *)(a2 + 160) = v103;
    v73 = v98;
    *(_OWORD *)(a2 + 64) = v97;
    *(_OWORD *)(a2 + 80) = v73;
    v74 = v100;
    *(_OWORD *)(a2 + 96) = v99;
    *(_OWORD *)(a2 + 112) = v74;
    v75 = *(_OWORD *)&buf[16];
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_OWORD *)(a2 + 16) = v75;
    v76 = v96;
    *(_OWORD *)(a2 + 32) = v95;
    *(_OWORD *)(a2 + 48) = v76;
    *(_BYTE *)(a2 + 176) = 1;
  }
  else
  {
    v54 = (double *)v87;
    v55 = 0.0;
    while (v54 != v88)
    {
      v56 = *v54++;
      v55 = v55 + v56;
    }
    v66 = (_QWORD *)std::ostream::operator<<(&std::cout);
    std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
    v67 = std::locale::use_facet((const std::locale *)buf, &std::ctype<char>::id);
    v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
    std::locale::~locale((std::locale *)buf);
    std::ostream::put(v66, v68);
    std::ostream::flush(v66);
    v69 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,PF reset due to minimum likelihood threshold fail", buf, 2u);
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 176) = 0;
  }
  if (v81)
  {
    v82 = (double *)v81;
    operator delete(v81);
  }
  if (__p)
  {
    v85 = (char *)__p;
    operator delete(__p);
  }
  if (v87)
  {
    v88 = (double *)v87;
    operator delete(v87);
  }
}

void sub_100340F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100340FB4(double a1, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  long double v9;

  sub_10034048C();
  v6 = v3 * (a2 - v4) / v5;
  v7 = v6 + 1.0;
  if (v6 + 1.0 > 0.0)
  {
    v8 = -1.0 / v3;
    v9 = pow(v6 + 1.0, -1.0 / v3);
    exp(-v9);
    pow(v7, v8 + -1.0);
  }
}

void sub_100341064(uint64_t a1, double **a2, double a3, double a4, double a5)
{
  NSObject *v7;
  double *v8;
  double *v9;
  char *v10;
  double *v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  double v22;
  double v23;
  double *v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t *v42;
  int *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  double v60;
  double v61;
  double v62;
  __double2 v63;
  double v64;
  double *v65;
  double *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  double *v72;
  double *v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  int v82;
  double v83;
  unsigned int v84;
  __int128 v85;
  void *v86;
  double *v87;
  double *v88;
  void *__p;
  double *v90;
  double *v91;
  uint8_t buf[8];
  char *v93;

  if (!*(_BYTE *)(a1 + 24))
    sub_1003EE2AC();
  v7 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,resampling with systematic resample method", buf, 2u);
  }
  sub_100321A18(buf, *(_QWORD *)(a1 + 32));
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    v10 = *(char **)buf;
    v12 = *v8;
    v11 = v8 + 1;
    v13 = v12;
    **(double **)buf = v12;
    if (v11 != v9)
    {
      v14 = (double *)(v10 + 8);
      do
      {
        v15 = *v11++;
        v13 = v13 + v15;
        *v14++ = v13;
      }
      while (v11 != v9);
    }
  }
  v16 = a1 + 992;
  v17 = sub_10014CC9C(a1 + 992);
  v18 = sub_10014CC9C(a1 + 992);
  v19 = *(_QWORD *)(a1 + 32);
  __p = 0;
  v90 = 0;
  v91 = 0;
  if (v19 <= 0)
  {
    v86 = 0;
    v87 = 0;
    v88 = 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = (((double)v17 + (double)v18 * 4294967300.0) * 5.42101086e-20 + 0.0) / (double)v19;
    do
    {
      v23 = v22 + (double)(int)v21 / (double)v19;
      if (v20 >= v91)
      {
        v25 = (double *)__p;
        v26 = ((char *)v20 - (_BYTE *)__p) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          sub_100026E7C();
        v28 = (char *)v91 - (_BYTE *)__p;
        if (((char *)v91 - (_BYTE *)__p) >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)sub_10005538C((uint64_t)&v91, v29);
          v25 = (double *)__p;
          v20 = v90;
        }
        else
        {
          v30 = 0;
        }
        v31 = (double *)&v30[8 * v26];
        *v31 = v23;
        v24 = v31 + 1;
        while (v20 != v25)
        {
          v32 = *((_QWORD *)v20-- - 1);
          *((_QWORD *)v31-- - 1) = v32;
        }
        __p = v31;
        v90 = v24;
        v91 = (double *)&v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v20 = v23;
        v24 = v20 + 1;
      }
      v90 = v24;
      ++v21;
      v19 = *(_QWORD *)(a1 + 32);
      v20 = v24;
    }
    while (v19 > v21);
    v86 = 0;
    v87 = 0;
    v88 = 0;
    if (v19 >= 1)
    {
      v33 = 0;
      v82 = 0;
      do
      {
        v34 = *((double *)__p + v33);
        v35 = v82;
        if (v34 > *(double *)(*(_QWORD *)buf + 8 * v82))
        {
          v36 = (uint64_t)&v93[-*(_QWORD *)buf] >> 3;
          if (v36 <= v82)
            v36 = v82;
          while (v36 != v35)
          {
            v37 = v35 + 1;
            v38 = *(double *)(*(_QWORD *)buf + 8 + 8 * v35++);
            if (v34 <= v38)
              goto LABEL_36;
          }
          v37 = v36;
LABEL_36:
          v82 = v37;
          v35 = v37;
        }
        if (!*(_BYTE *)(a1 + 24))
          sub_10000BA44();
        v39 = *(_QWORD *)a1 + 96 * v35;
        v40 = *(double *)(v39 + 8);
        v83 = *(double *)v39;
        v41 = *(double *)(v39 + 16);
        v85 = *(_OWORD *)(v39 + 24);
        v42 = (uint64_t *)(v39 + 56);
        v43 = (int *)(v39 + 80);
        v44 = *(_QWORD *)a1 + 96 * v33;
        if (!*(_BYTE *)(a1 + 337))
          v43 = (int *)(v44 + 80);
        if (!*(_BYTE *)(a1 + 336))
          v42 = (uint64_t *)(v44 + 56);
        if (!*(_BYTE *)(a1 + 200))
          v40 = *(double *)(*(_QWORD *)a1 + 96 * v33 + 8);
        v45 = *(_DWORD *)(v39 + 84);
        v46 = *v43;
        v48 = *(_QWORD *)(v44 + 64);
        v47 = *(_QWORD *)(v44 + 72);
        v50 = *(_QWORD *)(v44 + 40);
        v49 = *(double *)(v44 + 48);
        v51 = *v42;
        v52 = sub_10014CC9C(v16);
        if (((double)v52 + (double)sub_10014CC9C(v16) * 4294967300.0) * 5.42101086e-20 + 0.0 < 0.5
          && *(_BYTE *)(a1 + 3576)
          && !*(_BYTE *)(a1 + 3584))
        {
          v40 = *(double *)(a1 + 3568) - (v40 - *(double *)(a1 + 3568));
        }
        v53 = sub_10014CC9C(v16);
        if (((double)v53 + (double)sub_10014CC9C(v16) * 4294967300.0) * 5.42101086e-20 + 0.0 < *(double *)(a1 + 304)
          && !*(_BYTE *)(a1 + 3504))
        {
          v84 = sub_10014CC9C(v16);
          v54 = sub_10014CC9C(v16);
          v55 = sub_10014CC9C(v16);
          v56 = sub_10014CC9C(v16);
          v57 = v16;
          v58 = sub_10014CC9C(v16);
          v59 = sub_10014CC9C(v57);
          v60 = ((double)v84 + (double)v54 * 4294967300.0) * 5.42101086e-20 + 0.0;
          v61 = ((double)v55 + (double)v56 * 4294967300.0) * 5.42101086e-20 + 0.0;
          v49 = (v61 + v61) * 3.14159265;
          v62 = (((double)v58 + (double)v59 * 4294967300.0) * 5.42101086e-20 + 0.0) * 2.0 + -1.0 + a3;
          v63 = __sincos_stret((v60 + v60) * 3.14159265);
          v83 = a4 + v62 * v63.__cosval;
          v41 = a5 + v62 * v63.__sinval;
          v16 = v57;
        }
        v64 = 1.0 / (double)v19;
        v65 = v87;
        if (v87 >= v88)
        {
          v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87 - (_BYTE *)v86) >> 5);
          v68 = v67 + 1;
          if (v67 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100026E7C();
          if (0x5555555555555556 * (((char *)v88 - (_BYTE *)v86) >> 5) > v68)
            v68 = 0x5555555555555556 * (((char *)v88 - (_BYTE *)v86) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (_BYTE *)v86) >> 5) >= 0x155555555555555)
            v69 = 0x2AAAAAAAAAAAAAALL;
          else
            v69 = v68;
          if (v69)
            v70 = (char *)sub_100342B48((uint64_t)&v88, v69);
          else
            v70 = 0;
          v71 = &v70[32 * (((char *)v87 - (_BYTE *)v86) >> 5)];
          *(double *)v71 = v83;
          *((double *)v71 + 1) = v40;
          *((double *)v71 + 2) = v41;
          *(_OWORD *)(v71 + 24) = v85;
          *((_QWORD *)v71 + 5) = v50;
          *((double *)v71 + 6) = v49;
          *((_QWORD *)v71 + 7) = v51;
          *((_QWORD *)v71 + 8) = v48;
          *((_QWORD *)v71 + 9) = v47;
          *((_DWORD *)v71 + 20) = v46;
          *((_DWORD *)v71 + 21) = v45;
          *((double *)v71 + 11) = v64;
          v73 = (double *)v86;
          v72 = v87;
          v74 = &v70[96 * v67];
          if (v87 != v86)
          {
            do
            {
              v75 = *((_OWORD *)v72 - 5);
              *((_OWORD *)v74 - 6) = *((_OWORD *)v72 - 6);
              *((_OWORD *)v74 - 5) = v75;
              v76 = *((_OWORD *)v72 - 4);
              v77 = *((_OWORD *)v72 - 3);
              v78 = *((_OWORD *)v72 - 1);
              *((_OWORD *)v74 - 2) = *((_OWORD *)v72 - 2);
              *((_OWORD *)v74 - 1) = v78;
              *((_OWORD *)v74 - 4) = v76;
              *((_OWORD *)v74 - 3) = v77;
              v74 -= 96;
              v72 -= 12;
            }
            while (v72 != v73);
            v72 = v73;
          }
          v66 = (double *)(v71 + 96);
          v86 = v74;
          v87 = (double *)(v71 + 96);
          v88 = (double *)&v70[96 * v69];
          if (v72)
            operator delete(v72);
        }
        else
        {
          *v87 = v83;
          v65[1] = v40;
          v65[2] = v41;
          *(_OWORD *)(v65 + 3) = v85;
          *((_QWORD *)v65 + 5) = v50;
          v65[6] = v49;
          *((_QWORD *)v65 + 7) = v51;
          *((_QWORD *)v65 + 8) = v48;
          *((_QWORD *)v65 + 9) = v47;
          *((_DWORD *)v65 + 20) = v46;
          *((_DWORD *)v65 + 21) = v45;
          v66 = v65 + 12;
          v65[11] = v64;
        }
        v87 = v66;
        ++v33;
        v19 = *(_QWORD *)(a1 + 32);
      }
      while (v19 > v33);
    }
  }
  sub_100341768(a1, (uint64_t)&v86);
  if (v86)
  {
    v87 = (double *)v86;
    operator delete(v86);
  }
  if (__p)
  {
    v90 = (double *)__p;
    operator delete(__p);
  }
  if (*(_QWORD *)buf)
  {
    v93 = *(char **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1003416FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100341768(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (a1 != a2)
      sub_100342B8C((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_100342D14((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5));
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t sub_1003417F4(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (void **)a1[504];
  v3 = a1[505];
  a1[508] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(a1[504] + 8);
      a1[504] = v2;
      v4 = a1[505] - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v5 = 64;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v5 = 128;
LABEL_7:
    a1[507] = v5;
  }
  return sub_100341874((uint64_t)a1);
}

uint64_t sub_100341874(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;

  if (*(_BYTE *)(result + 24))
  {
    v1 = *(_QWORD *)result;
    v2 = *(_QWORD *)(result + 8);
    if (*(_QWORD *)result != v2)
    {
      v3 = result + 992;
      do
      {
        v4 = (double)sub_10014CC9C(v3);
        result = sub_10014CC9C(v3);
        *(double *)(v1 + 56) = (v4 + (double)result * 4294967300.0) * 5.42101086e-20 * 6.28318531 + 0.0;
        v1 += 96;
      }
      while (v1 != v2);
    }
  }
  return result;
}

void sub_100341A0C(uint64_t a1, uint64_t a2)
{
  sub_100341A48((_QWORD *)(a1 + 4024), a2);
  if (*(_DWORD *)(a1 + 3972) != 3)
  {
    if (*(_BYTE *)(a1 + 3928))
      *(_BYTE *)(a1 + 3928) = 0;
  }
}

__n128 sub_100341A48(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100342D8C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_100341AD4(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _BYTE *v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  int v10;
  __int128 v11;
  __int128 v12;
  float64x2_t v13;
  double v14;
  int v15;
  double v16;
  double v17;
  BOOL v18;

  if (*(_DWORD *)(a1 + 3972) != 3)
  {
    if (*(_BYTE *)(a1 + 4392))
      sub_100341874(a1);
  }
  v4 = (_OWORD *)(a1 + 4360);
  v5 = (_BYTE *)(a1 + 4392);
  if (*(_BYTE *)(a1 + 4392))
  {
    v6 = *(double *)(a2 + 24) - *(double *)(a1 + 4384);
    v7 = *(double *)a2;
    v8 = *(double *)a2 - *(double *)(a1 + 4360);
    v9 = *(_DWORD *)(a1 + 3972) != 3;
    v13 = vsubq_f64(*(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 4368));
    v14 = v6;
    v15 = 1;
    v16 = v7;
    v17 = v8;
    v18 = v9;
    sub_100341BB8(a1, (uint64_t)&v13);
    *(_DWORD *)(a1 + 3972) = 3;
    v10 = *v5;
    v11 = *(_OWORD *)(a2 + 16);
    *v4 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 4376) = v11;
    if (v10)
      return;
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 16);
    *v4 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 4376) = v12;
  }
  *v5 = 1;
}

void sub_100341BB8(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  double v10;
  double v11;
  double v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  char v34;
  uint64_t v35;
  double v36;
  char v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;

  v2 = *(double *)(a2 + 40);
  if (v2 > 0.0 && *(_BYTE *)(a1 + 24))
  {
    v5 = *(_QWORD *)(a2 + 32);
    v6 = sqrt(v2 / 0.1);
    v7 = v6 * *(double *)(a1 + 96);
    v35 = 0;
    v36 = v7;
    v37 = 0;
    if (*(_BYTE *)(a2 + 48) && !*(_DWORD *)(a2 + 24))
      v36 = 1.0;
    v8 = v6 * *(double *)(a1 + 112);
    v32 = 0;
    v33 = v8;
    v34 = 0;
    *(_QWORD *)(a1 + 3920) = v5;
    *(_BYTE *)(a1 + 3928) = 1;
    *(_QWORD *)(a1 + 3936) = v5;
    *(_BYTE *)(a1 + 3944) = 1;
    v9 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)(a2 + 40);
      v18 = *(double *)(a2 + 16);
      v19 = *(double *)(*(_QWORD *)a1 + 64);
      v20 = sub_10034271C((uint64_t)&v35, a1 + 992, (double *)&v35);
      if (!*(_BYTE *)(a1 + 24))
        goto LABEL_28;
      v21 = v20;
      v22 = *(double *)a2;
      v23 = *(double *)(*(_QWORD *)a1 + 64);
      v24 = sub_10034271C((uint64_t)&v35, a1 + 992, (double *)&v35);
      if (!*(_BYTE *)(a1 + 24))
        goto LABEL_28;
      v25 = **(_QWORD **)a1;
      v26 = *(_QWORD *)(*(_QWORD *)a1 + 56);
      v27 = *(_QWORD *)(*(_QWORD *)a1 + 64);
      v28 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      v29 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      v30 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v31 = *(_QWORD *)(*(_QWORD *)a1 + 40);
      *(_DWORD *)buf = 134220544;
      v39 = v17;
      v40 = 2048;
      v41 = v8;
      v42 = 2048;
      v43 = v21 + v18 * v19;
      v44 = 2048;
      v45 = v24 + v22 * v23;
      v46 = 2048;
      v47 = v25;
      v48 = 2048;
      v49 = v28;
      v50 = 2048;
      v51 = v26;
      v52 = 2048;
      v53 = v27;
      v54 = 2048;
      v55 = v31;
      v56 = 2048;
      v57 = v29;
      v58 = 2048;
      v59 = v30;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#sa_algo_particlefilter,example deltaT: %f, frameRotNoise: %f, deltaZ: %f, deltaX: %f, px: %f, pz: %f, framerot: %f, stepscale: %f, vel: %f, vx: %f, vz: %f", buf, 0x70u);
    }
    v10 = *(double *)(a2 + 8) + *(double *)(a1 + 3592);
    *(double *)(a1 + 3592) = v10;
    v11 = *(double *)(a1 + 3600);
    if (v10 < v11)
    {
      *(double *)(a1 + 3600) = v10;
      v11 = v10;
    }
    v12 = *(double *)(a1 + 3608);
    if (v10 > v12)
    {
      *(double *)(a1 + 3608) = v10;
      v12 = v10;
    }
    if (v12 - v11 > 1.0)
      *(_BYTE *)(a1 + 3584) = 1;
    if (*(_DWORD *)(a2 + 24))
    {
      v32 = 0;
      v33 = v6 * 0.01;
      v34 = 0;
      if (*(_BYTE *)(a1 + 24))
      {
        v13 = *(double **)a1;
        v14 = *(double **)(a1 + 8);
        while (v13 != v14)
        {
          sub_100342004(a1, (double *)a2, v13, (double *)&v35, (double *)&v32, 0);
          v13 += 12;
        }
LABEL_22:
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003EE1A4();
        return;
      }
    }
    else if (*(_BYTE *)(a1 + 24))
    {
      v15 = *(double **)a1;
      v16 = *(double **)(a1 + 8);
      while (v15 != v16)
      {
        sub_100342004(a1, (double *)a2, v15, (double *)&v35, (double *)&v32, 1);
        v15 += 12;
      }
      goto LABEL_22;
    }
LABEL_28:
    sub_10000BA44();
  }
}

void sub_100341EE0(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  _BYTE *v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[3];
  int v19;
  double v20;
  double v21;
  char v22;

  v12 = (_BYTE *)(a1 + 4392);
  if (*(_BYTE *)(a1 + 4392))
    *v12 = 0;
  v13 = *(void ***)(a1 + 4032);
  v14 = *(_QWORD *)(a1 + 4040);
  *(_QWORD *)(a1 + 4064) = 0;
  v15 = v14 - (_QWORD)v13;
  if (v15 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v13 = (void **)(*(_QWORD *)(a1 + 4032) + 8);
      *(_QWORD *)(a1 + 4032) = v13;
      v15 = *(_QWORD *)(a1 + 4040) - (_QWORD)v13;
    }
    while (v15 > 0x10);
  }
  if (v15 >> 3 == 1)
  {
    v16 = 64;
  }
  else
  {
    if (v15 >> 3 != 2)
      goto LABEL_10;
    v16 = 128;
  }
  *(_QWORD *)(a1 + 4056) = v16;
LABEL_10:
  if (*(_DWORD *)(a1 + 3972) == 3)
  {
    sub_100341874(a1);
    a3 = 0.0;
    a2 = 0.3;
    if (*v12)
      *v12 = 0;
    v17 = 1;
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(a1 + 3968) = 0x200000002;
  *(double *)v18 = a3;
  *(double *)&v18[1] = a4;
  *(double *)&v18[2] = a2;
  v19 = 0;
  v20 = a5;
  v21 = a6;
  v22 = v17;
  sub_100341BB8(a1, (uint64_t)v18);
}

void sub_100342004(uint64_t a1, double *a2, double *a3, double *a4, double *a5, int a6)
{
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  __double2 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __double2 v22;
  double v23[3];
  char v24;

  if (a6)
    v11 = a3[8];
  else
    v11 = 1.0;
  v12 = a2[2];
  v13 = a1 + 992;
  v14 = sub_10034271C((uint64_t)a4, a1 + 992, a4) + v12 * v11;
  v15 = *a2;
  v16 = sub_10034271C((uint64_t)a4, v13, a4) + v15 * v11;
  v17 = __sincos_stret(a3[7]);
  *a3 = *a3 + v17.__cosval * v16 - v17.__sinval * v14;
  a3[2] = a3[2] + v14 * v17.__cosval + v17.__sinval * v16;
  a3[7] = sub_10034271C((uint64_t)a5, v13, a5) + a3[7];
  v18 = a2[1] + a3[1];
  a3[1] = v18;
  v19 = sqrt(a2[5] / 0.1);
  v20 = *(double *)(a1 + 104);
  v23[0] = 0.0;
  v23[1] = v19 * v20;
  v24 = 0;
  a3[1] = v18 + sub_10034271C((uint64_t)v23, v13, v23);
  v21 = a2[5];
  if (v21 > 0.01)
  {
    v22 = __sincos_stret(a3[7]);
    a3[3] = (v22.__cosval * v16 - v22.__sinval * v14) / v21;
    a3[4] = (v14 * v22.__cosval + v22.__sinval * v16) / v21;
  }
}

uint64_t sub_100342170(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 16;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 32;
LABEL_7:
    a1[4] = v8;
  }
  sub_100342210(a1);
  result = sub_100342340((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100342210(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_100145748((uint64_t)a1, 0);
    sub_10030ED60(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_100342280((uint64_t)a1);
}

void sub_100342280(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10005538C(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_100342340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_100342280(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_1003423AC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF8uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF8uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF8uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100342674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1003426C0(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x49)
    a2 = 1;
  if (v2 < 0x92)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 73;
  }
  return v4 ^ 1u;
}

double sub_10034271C(uint64_t a1, uint64_t a2, double *a3)
{
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    v5 = *(double *)(a1 + 16);
  }
  else
  {
    do
    {
      do
      {
        v7 = (double)sub_10014CC9C(a2);
        v8 = (v7 + (double)sub_10014CC9C(a2) * 4294967300.0) * 5.42101086e-20 * 2.0 + -1.0;
        v9 = (double)sub_10014CC9C(a2);
        v10 = (v9 + (double)sub_10014CC9C(a2) * 4294967300.0) * 5.42101086e-20 * 2.0 + -1.0;
        v11 = v10 * v10 + v8 * v8;
      }
      while (v11 > 1.0);
    }
    while (v11 == 0.0);
    v12 = sqrt(log(v10 * v10 + v8 * v8) * -2.0 / v11);
    *(double *)(a1 + 16) = v10 * v12;
    *(_BYTE *)(a1 + 24) = 1;
    v5 = v8 * v12;
  }
  return *a3 + v5 * a3[1];
}

void sub_100342834(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x33;
  v4 = v2 - 51;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100342AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *sub_100342B48(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_1000260B0();
  return operator new(96 * a2);
}

char *sub_100342B8C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 5) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      sub_100026E7C();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x155555555555555)
      v12 = 0x2AAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = sub_100342CC4(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 5) >= a4)
    goto LABEL_16;
  v16 = &__src[32 * ((v15 - v9) >> 5)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *sub_100342CC4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_100026E7C();
  result = (char *)sub_100342B48((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

_QWORD *sub_100342D14(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100342CC4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100342D70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100342D8C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100343054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003430A0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100342CC4(a1, a2);
    v4 = (char *)a1[1];
    v5 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_10034311C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100343138(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x80)
    a2 = 1;
  if (v2 < 0x100)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 128;
  }
  return v4 ^ 1u;
}

double sub_100343194(__n128 a1)
{
  return a1.n128_f32[2];
}

double sub_1003431C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = a2;
  return sub_10030C298(*(int8x16_t *)(a1 + 720), *(int8x16_t *)(a1 + 736), *(__n128 *)(a1 + 752));
}

void sub_1003431F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x2Au);
}

uint64_t sub_100343200()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10085E2D0 = 0;
  qword_10085E2D8 = 0;
  qword_10085E2E0 = 0;
  v0 = operator new(0x40uLL);
  qword_10085E2D8 = (uint64_t)(v0 + 4);
  qword_10085E2E0 = (uint64_t)(v0 + 4);
  *v0 = xmmword_10047AD00;
  v0[1] = unk_10047AD10;
  v0[2] = xmmword_10047AD20;
  v0[3] = unk_10047AD30;
  qword_10085E2D0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085E2D0, (void *)&_mh_execute_header);
  qword_10085E2F0 = 0;
  unk_10085E2F8 = 0;
  qword_10085E2E8 = 0;
  v1 = operator new(0x10uLL);
  qword_10085E2F0 = (uint64_t)(v1 + 1);
  unk_10085E2F8 = v1 + 1;
  *v1 = xmmword_10047AD40;
  qword_10085E2E8 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085E2E8, (void *)&_mh_execute_header);
}

uint64_t sub_1003432BC(uint64_t a1, uint64_t a2, _OWORD *a3, double a4, double a5)
{
  double v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[6];
  double v17;

  v17 = a4;
  if (!*(_BYTE *)(a1 + 72))
  {
    v9 = 0;
    v8 = 0.0;
    goto LABEL_5;
  }
  v8 = a5 - *(double *)(a1 + 64);
  v9 = 1;
  if (v8 > 0.0)
  {
LABEL_5:
    *(double *)(a1 + 64) = a5;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(int *)(a1 + 8);
  sub_1003433B4(a1 + 16, &v17);
  if (v10 >= v11)
  {
    --*(_QWORD *)(a1 + 56);
    sub_1001B0F54((_QWORD *)(a1 + 16), 1);
  }
  v12 = a3[3];
  v16[2] = a3[2];
  v16[3] = v12;
  v13 = a3[5];
  v16[4] = a3[4];
  v16[5] = v13;
  v14 = a3[1];
  v16[0] = *a3;
  v16[1] = v14;
  return (*(uint64_t (**)(uint64_t, double, uint64_t, uint64_t, _OWORD *, double))(*(_QWORD *)a1 + 40))(a1, COERCE_DOUBLE(*(_QWORD *)&v8), v9, a2, v16, v17);
}

double sub_1003433B4(uint64_t a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_100346380((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  else
    v7 = *v6 + 8 * (v4 & 0x1FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  result = *a2;
  *(double *)(v7 - 8) = *a2;
  v9 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 - 1;
  *(_QWORD *)(a1 + 40) = v9;
  return result;
}

void sub_100343430(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[80] = 0;
}

double sub_10034343C(_QWORD *a1, double result)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double **v5;
  double *v6;
  uint64_t v7;
  __int16 v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double **v15;
  double v16;
  double v17;
  double *v18;
  double *v19;
  double *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double *v25;

  v2 = a1[7];
  if (v2 >= 2)
  {
    v3 = a1[3];
    if (a1[4] == v3)
    {
      v13 = 0.0;
    }
    else
    {
      v4 = a1[6];
      v5 = (double **)(v3 + 8 * (v4 >> 9));
      v6 = *v5;
      v7 = v4 & 0x1FF;
      v8 = v4 + v2;
      v9 = (v4 + v2) >> 9;
      v10 = &(*v5)[v7];
      v11 = v8 & 0x1FF;
      v12 = *(_QWORD *)(v3 + 8 * v9) + 8 * v11;
      v13 = 0.0;
      v14 = 0.0;
      if (v10 != (double *)v12)
      {
        v15 = v5;
        do
        {
          v16 = *v10++;
          v17 = v16;
          if ((char *)v10 - (char *)v6 == 4096)
          {
            v18 = v15[1];
            ++v15;
            v6 = v18;
            v10 = v18;
          }
          v14 = v14 + v17;
        }
        while (v10 != (double *)v12);
      }
      v19 = *v5;
      v20 = &(*v5)[v7];
      v21 = *(_QWORD *)(v3 + 8 * v9) + 8 * v11;
      if (v20 != (double *)v21)
      {
        v22 = v14 / (double)v2;
        v13 = 0.0;
        do
        {
          v23 = *v20++;
          v24 = v23;
          if ((char *)v20 - (char *)v19 == 4096)
          {
            v25 = v5[1];
            ++v5;
            v19 = v25;
            v20 = v25;
          }
          v13 = v13 + (v24 - v22) * (v24 - v22);
        }
        while (v20 != (double *)v21);
      }
    }
    return sqrt(v13 / (double)(v2 - 1));
  }
  return result;
}

uint64_t sub_100343534(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 v8;
  _OWORD v10[10];
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_1008164F8;
  v3 = *(_OWORD *)(a2 + 144);
  v10[8] = *(_OWORD *)(a2 + 128);
  v10[9] = v3;
  v11 = *(_QWORD *)(a2 + 160);
  v4 = *(_OWORD *)(a2 + 80);
  v10[4] = *(_OWORD *)(a2 + 64);
  v10[5] = v4;
  v5 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v5;
  v6 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v7;
  v8 = sub_100343648((uint64_t)v10, a1 + 80);
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0x4059000000000000;
  (*(void (**)(uint64_t, __n128))(*(_QWORD *)a1 + 32))(a1, v8);
  return a1;
}

void sub_10034360C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    v1[38] = v6;
    operator delete(v6);
  }
  *v1 = off_1008165B8;
  sub_100152A44(v2);
  _Unwind_Resume(a1);
}

__n128 sub_100343648@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  std::runtime_error *exception;

  if (*(double *)(a1 + 32) >= 0.0
    || *(double *)(a1 + 24) <= 0.0
    || *(double *)(a1 + 16) < 0.0
    || *(double *)(a1 + 8) < 0.0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid OneStateKalmanFilterParams parameter: innovNegThresholdStd must be negative, innovPosThresholdStd must be positive, measStd cannot be negative, processStd cannot be negative.");
    goto LABEL_8;
  }
  if (!*(_QWORD *)(a1 + 64))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid nStartupMeasurements paramter: must be greater than 0");
LABEL_8:
  }
  v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 144) = v2;
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a1 + 160);
  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_100343714(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_100343730(uint64_t a1, uint64_t a2, char a3, int a4, double a5)
{
  double v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  NSObject *v15;
  _BOOL4 v16;
  void **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  NSObject *v26;
  double *v27;
  unint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  double *v46;
  unint64_t v47;
  double *v48;
  double *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  double *v55;
  char *v56;
  uint64_t v57;
  double *v58;
  unint64_t v59;
  double v61;
  double *v62;
  double v63;
  double *v64;
  double *v65;
  unint64_t v66;
  unint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  unint64_t v72;
  uint64_t v73;
  const char *v74;
  NSObject *v75;
  uint32_t v76;
  uint64_t v77;
  double *v78;
  char *v79;
  uint64_t v80;
  int v82;
  unint64_t v83;

  if (a3)
  {
    if (*(double *)&a2 < 0.0)
    {
      LOBYTE(v8) = 0;
      v9 = 0;
      return v9 | LOBYTE(v8);
    }
    if (*(double *)&a2 > (double)*(unint64_t *)(a1 + 152))
    {
      v14 = *(_QWORD *)(a1 + 144);
      v15 = qword_10085F520;
      v16 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
      if (v14 >= 2)
      {
        if (v16)
        {
          LOWORD(v82) = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Filter reset after timeout, gathering startup measurements", (uint8_t *)&v82, 2u);
        }
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(a1 + 296);
        v17 = *(void ***)(a1 + 24);
        v18 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 56) = 0;
        v19 = v18 - (_QWORD)v17;
        if (v19 >= 0x11)
        {
          do
          {
            operator delete(*v17);
            v20 = *(_QWORD *)(a1 + 32);
            v17 = (void **)(*(_QWORD *)(a1 + 24) + 8);
            *(_QWORD *)(a1 + 24) = v17;
            v19 = v20 - (_QWORD)v17;
          }
          while (v19 > 0x10);
        }
        if (v19 >> 3 == 1)
        {
          v21 = 256;
        }
        else
        {
          if (v19 >> 3 != 2)
          {
LABEL_51:
            *(_BYTE *)(a1 + 320) = 1;
            v46 = *(double **)(a1 + 304);
            v47 = *(_QWORD *)(a1 + 312);
            if ((unint64_t)v46 >= v47)
            {
              v49 = *(double **)(a1 + 296);
              v50 = v46 - v49;
              if ((unint64_t)(v50 + 1) >> 61)
                sub_100026E7C();
              v51 = v47 - (_QWORD)v49;
              v52 = (uint64_t)(v47 - (_QWORD)v49) >> 2;
              if (v52 <= v50 + 1)
                v52 = v50 + 1;
              if (v51 >= 0x7FFFFFFFFFFFFFF8)
                v53 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v53 = v52;
              if (v53)
              {
                v54 = (char *)sub_10005538C(a1 + 312, v53);
                v49 = *(double **)(a1 + 296);
                v46 = *(double **)(a1 + 304);
              }
              else
              {
                v54 = 0;
              }
              v78 = (double *)&v54[8 * v50];
              v79 = &v54[8 * v53];
              *v78 = a5;
              v48 = v78 + 1;
              while (v46 != v49)
              {
                v80 = *((_QWORD *)v46-- - 1);
                *((_QWORD *)v78-- - 1) = v80;
              }
              *(_QWORD *)(a1 + 296) = v78;
              *(_QWORD *)(a1 + 304) = v48;
              *(_QWORD *)(a1 + 312) = v79;
              if (v49)
                operator delete(v49);
            }
            else
            {
              *v46 = a5;
              v48 = v46 + 1;
            }
            *(_QWORD *)(a1 + 304) = v48;
            if (*(_BYTE *)(a1 + 256))
              *(_BYTE *)(a1 + 256) = 0;
            goto LABEL_98;
          }
          v21 = 512;
        }
        *(_QWORD *)(a1 + 48) = v21;
        goto LABEL_51;
      }
      if (!v16)
      {
LABEL_39:
        *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 328);
        *(_BYTE *)(a1 + 272) = 1;
        *(double *)(a1 + 248) = a5;
        *(_BYTE *)(a1 + 256) = 1;
        v8 = a5;
LABEL_99:
        v9 = *(_QWORD *)&v8 & 0xFFFFFFFFFFFFFF00;
        return v9 | LOBYTE(v8);
      }
      LOWORD(v82) = 0;
      v23 = "Filter reset after timeout, startup filtering not enabled";
      v24 = v15;
      v25 = 2;
LABEL_38:
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v82, v25);
      goto LABEL_39;
    }
    if (!*(_BYTE *)(a1 + 320))
    {
      sub_100343D44(a1, *(double *)&a2);
      sub_100343DD0(a1, a5);
LABEL_98:
      v8 = *(double *)(a1 + 248);
      goto LABEL_99;
    }
    v26 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v82) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "acquiring startup measurements", (uint8_t *)&v82, 2u);
    }
    v27 = *(double **)(a1 + 304);
    v28 = *(_QWORD *)(a1 + 312);
    if ((unint64_t)v27 >= v28)
    {
      v40 = *(double **)(a1 + 296);
      v41 = v27 - v40;
      if ((unint64_t)(v41 + 1) >> 61)
        sub_100026E7C();
      v42 = v28 - (_QWORD)v40;
      v43 = (uint64_t)(v28 - (_QWORD)v40) >> 2;
      if (v43 <= v41 + 1)
        v43 = v41 + 1;
      if (v42 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v43;
      if (v44)
      {
        v45 = (char *)sub_10005538C(a1 + 312, v44);
        v40 = *(double **)(a1 + 296);
        v27 = *(double **)(a1 + 304);
      }
      else
      {
        v45 = 0;
      }
      v55 = (double *)&v45[8 * v41];
      v56 = &v45[8 * v44];
      *v55 = a5;
      v29 = v55 + 1;
      while (v27 != v40)
      {
        v57 = *((_QWORD *)v27-- - 1);
        *((_QWORD *)v55-- - 1) = v57;
      }
      *(_QWORD *)(a1 + 296) = v55;
      *(_QWORD *)(a1 + 304) = v29;
      *(_QWORD *)(a1 + 312) = v56;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v27 = a5;
      v29 = v27 + 1;
    }
    *(_QWORD *)(a1 + 304) = v29;
    v58 = *(double **)(a1 + 296);
    v59 = v29 - v58;
    if (v59 < *(_QWORD *)(a1 + 144) && a4 == 0)
      goto LABEL_98;
    v61 = 0.0;
    if (v58 != v29)
    {
      v62 = *(double **)(a1 + 296);
      do
      {
        v63 = *v62++;
        v61 = v61 + v63;
      }
      while (v62 != v29);
    }
    std::__sort<std::__less<double,double> &,double *>();
    v65 = *(double **)(a1 + 296);
    v64 = *(double **)(a1 + 304);
    v66 = v64 - v65;
    v67 = v66 >> 1;
    if ((((_DWORD)v64 - (_DWORD)v65) & 8) != 0)
      v68 = v65[v67];
    else
      v68 = (v65[v67 - 1] + v65[v67]) * 0.5;
    if (v65 == v64)
    {
      v69 = 0.0;
    }
    else
    {
      v69 = 0.0;
      do
      {
        v70 = *v65++;
        v69 = v69 + (v70 - v61 / (double)v59) * (v70 - v61 / (double)v59);
      }
      while (v65 != v64);
    }
    v71 = v69 / (double)(v66 - 1);
    if ((a4 & 1) != 0 && (v72 = *(_QWORD *)(a1 + 144), v66 < v72))
    {
      v73 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v82 = 134217984;
        v83 = v72;
        v74 = "filter initialized by override before all %llu startup measurements were received";
        v75 = v73;
        v76 = 12;
LABEL_88:
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, v74, (uint8_t *)&v82, v76);
      }
    }
    else
    {
      v77 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82) = 0;
        v74 = "filter initialized with startup measurements";
        v75 = v77;
        v76 = 2;
        goto LABEL_88;
      }
    }
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a1 + 296);
    *(_BYTE *)(a1 + 320) = 0;
    *(double *)(a1 + 248) = v68;
    *(_BYTE *)(a1 + 256) = 1;
    *(double *)(a1 + 264) = v71;
    *(_BYTE *)(a1 + 272) = 1;
    goto LABEL_98;
  }
  v10 = *(_QWORD *)(a1 + 144);
  if (v10 < 2 || (a4 & 1) != 0)
  {
    if (!a4)
      goto LABEL_39;
    v22 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    v82 = 134217984;
    v83 = v10;
    v23 = "filter initialized by override before all %llu startup measurements were received";
    v24 = v22;
    v25 = 12;
    goto LABEL_38;
  }
  v11 = *(double **)(a1 + 296);
  *(_QWORD *)(a1 + 304) = v11;
  *(_BYTE *)(a1 + 320) = 1;
  v12 = *(_QWORD *)(a1 + 312);
  if ((unint64_t)v11 >= v12)
  {
    v30 = a1 + 312;
    v31 = v12 - (_QWORD)v11;
    v32 = v31 >> 2;
    if ((unint64_t)(v31 >> 2) <= 1)
      v32 = 1;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v32;
    v34 = (double *)sub_10005538C(v30, v33);
    v35 = *(char **)(a1 + 296);
    v36 = *(char **)(a1 + 304);
    v38 = &v34[v37];
    *v34 = a5;
    v13 = v34 + 1;
    while (v36 != v35)
    {
      v39 = *((_QWORD *)v36 - 1);
      v36 -= 8;
      *((_QWORD *)v34-- - 1) = v39;
    }
    *(_QWORD *)(a1 + 296) = v34;
    *(_QWORD *)(a1 + 304) = v13;
    *(_QWORD *)(a1 + 312) = v38;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *v11 = a5;
    v13 = v11 + 1;
  }
  LOBYTE(v8) = 0;
  v9 = 0;
  *(_QWORD *)(a1 + 304) = v13;
  return v9 | LOBYTE(v8);
}

void sub_100343D44(uint64_t a1, double a2)
{
  double v2;

  if (*(_BYTE *)(a1 + 272) && *(_BYTE *)(a1 + 256))
  {
    v2 = *(double *)(a1 + 120);
    *(double *)(a1 + 248) = v2 * *(double *)(a1 + 248);
    *(_BYTE *)(a1 + 256) = 1;
    *(double *)(a1 + 264) = *(double *)(a1 + 88) * (*(double *)(a1 + 88) * a2) + v2 * *(double *)(a1 + 264) * v2;
    *(_BYTE *)(a1 + 272) = 1;
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003EE2DC();
  }
}

void sub_100343DD0(uint64_t a1, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  uint8_t v10[16];

  if (*(_BYTE *)(a1 + 272) && *(_BYTE *)(a1 + 256))
  {
    v2 = *(double *)(a1 + 128);
    v3 = *(double *)(a1 + 264);
    v4 = v2 * v3;
    v5 = *(double *)(a1 + 96) * *(double *)(a1 + 96) + v2 * v3 * v2;
    if (v5 <= 0.0)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003EE308();
    }
    else
    {
      v6 = *(double *)(a1 + 248);
      v7 = a2 - v2 * v6;
      v8 = v7 * v7 / v5;
      if (v7 < 0.0)
        v8 = -v8;
      if (v8 <= -(*(double *)(a1 + 112) * *(double *)(a1 + 112))
        || v8 >= *(double *)(a1 + 104) * *(double *)(a1 + 104)
        || *(double *)(a1 + 136) >= a2)
      {
        v9 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Estimator: Measurement failed innovation check and will be rejected", v10, 2u);
        }
      }
      else
      {
        *(double *)(a1 + 248) = v6 + v4 / v5 * v7;
        *(_BYTE *)(a1 + 256) = 1;
        *(double *)(a1 + 264) = v3 * (1.0 - v4 / v5 * v2);
        *(_BYTE *)(a1 + 272) = 1;
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
  {
    sub_1003EE2DC();
  }
}

_BYTE *sub_100343F28(_BYTE *result)
{
  if (result[256])
    result[256] = 0;
  if (result[272])
    result[272] = 0;
  if (result[288])
    result[288] = 0;
  if (result[72])
    result[72] = 0;
  return result;
}

uint64_t sub_100343F5C(uint64_t a1, uint64_t a2, char a3, double a4, uint64_t a5, uint64_t a6)
{
  double v6;
  float v8;
  float v9;

  v6 = a4;
  if (*(_BYTE *)(a6 + 88) && *(_BYTE *)(a6 + 16))
    v6 = *(double *)(a6 + 8) + a4;
  if (!*(_BYTE *)(a1 + 184))
    goto LABEL_8;
  if (a3 && *(double *)&a2 > 0.0)
  {
    v8 = *(double *)&a2 / *(float *)(a1 + 84);
    v9 = powf(*(float *)(a1 + 80), v8);
    v6 = *(double *)(a1 + 176) * v9 + (float)(1.0 - v9) * v6;
LABEL_8:
    *(double *)(a1 + 176) = v6;
    *(_BYTE *)(a1 + 184) = 1;
  }
  return *(_QWORD *)(a1 + 176);
}

void sub_100343FFC(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 184))
    *(_BYTE *)(a1 + 184) = 0;
  v2 = *(void ***)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 56) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 32);
      v2 = (void **)(*(_QWORD *)(a1 + 24) + 8);
      *(_QWORD *)(a1 + 24) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 512;
  }
  *(_QWORD *)(a1 + 48) = v6;
}

uint64_t sub_10034407C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_100816538;
  *(_DWORD *)(a1 + 80) = 0;
  v3 = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 88) = v3;
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 184) = v8;
  *(_OWORD *)(a1 + 168) = v7;
  *(_OWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 219) = 0;
  *(_QWORD *)(a1 + 304) = 0x100000003;
  *(_QWORD *)(a1 + 280) = off_1008156E8;
  *(_OWORD *)(a1 + 288) = xmmword_100478880;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  *(_QWORD *)(a1 + 368) = 0x300000003;
  *(_QWORD *)(a1 + 344) = off_100815730;
  *(_OWORD *)(a1 + 352) = xmmword_100478B80;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_QWORD *)(a1 + 480) = 0x300000003;
  *(_QWORD *)(a1 + 456) = off_100815730;
  *(_OWORD *)(a1 + 464) = xmmword_100478B80;
  *(_QWORD *)(a1 + 488) = a1 + 496;
  *(_QWORD *)(a1 + 592) = 0x300000003;
  *(_QWORD *)(a1 + 568) = off_100815730;
  *(_OWORD *)(a1 + 576) = xmmword_100478B80;
  *(_QWORD *)(a1 + 600) = a1 + 608;
  *(_QWORD *)(a1 + 704) = 0x300000001;
  *(_QWORD *)(a1 + 680) = off_1008162E0;
  *(_OWORD *)(a1 + 688) = xmmword_1004794B0;
  *(_QWORD *)(a1 + 712) = a1 + 720;
  *(_QWORD *)(a1 + 768) = 0x300000001;
  *(_QWORD *)(a1 + 744) = off_1008162E0;
  *(_OWORD *)(a1 + 752) = xmmword_1004794B0;
  *(_QWORD *)(a1 + 776) = a1 + 784;
  *(_QWORD *)(a1 + 832) = 0x100000001;
  *(_QWORD *)(a1 + 808) = off_100815C78;
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 816) = v9;
  *(_QWORD *)(a1 + 840) = a1 + 848;
  sub_100344260(a1);
  return a1;
}

void sub_100344214(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1[101] = off_100807398;
  v1[93] = off_100807398;
  v1[85] = off_100807398;
  v1[71] = off_100807398;
  v1[57] = off_100807398;
  v1[43] = off_100807398;
  v1[35] = off_100807398;
  sub_100346690(v3);
  *v1 = off_1008165B8;
  sub_100152A44(v2);
  _Unwind_Resume(a1);
}

void sub_100344260(uint64_t a1)
{
  int i;
  NSObject *v3;
  uint8_t buf[8];
  __int128 v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v8[72];

  v6 = 0x300000003;
  *(_QWORD *)buf = off_100815730;
  v5 = xmmword_100478B80;
  v7 = v8;
  sub_10030DD0C(buf, 3, 3);
  sub_10030DD58((uint64_t)buf, 0.0);
  for (i = 0; i != 3; ++i)
    *(_QWORD *)sub_100346AA0((uint64_t)buf, i, i) = 0x3FF0000000000000;
  sub_10030EC4C(a1 + 456, (uint64_t)buf);
  v6 = 0x300000001;
  *(_QWORD *)buf = off_1008162E0;
  v5 = xmmword_1004794B0;
  v7 = v8;
  sub_10030DD0C(buf, 1, 3);
  sub_10030DD58((uint64_t)buf, 0.0);
  sub_10030EC4C(a1 + 680, (uint64_t)buf);
  *(_QWORD *)sub_10030E274(a1 + 680, 0, 0) = 0x3FF0000000000000;
  v6 = 0x300000001;
  *(_QWORD *)buf = off_1008162E0;
  v5 = xmmword_1004794B0;
  v7 = v8;
  sub_10030DD0C(buf, 1, 3);
  sub_10030DD58((uint64_t)buf, 0.0);
  sub_10030EC4C(a1 + 744, (uint64_t)buf);
  *(_QWORD *)sub_10030E274(a1 + 744, 0, 1) = 0x3FF0000000000000;
  v6 = 0x300000003;
  *(_QWORD *)buf = off_100815730;
  v5 = xmmword_100478B80;
  v7 = v8;
  sub_10030DD0C(buf, 3, 3);
  sub_10030DD58((uint64_t)buf, 0.0);
  sub_10030EC4C(a1 + 568, (uint64_t)buf);
  *(_QWORD *)sub_10030E274(a1 + 808, 0, 0) = 0;
  v3 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "kalman filter matrices initiated", buf, 2u);
  }
}

void sub_100344480(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 219) = 0;
  v2 = *(void ***)(a1 + 240);
  v3 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 272) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 248);
      v2 = (void **)(*(_QWORD *)(a1 + 240) + 8);
      *(_QWORD *)(a1 + 240) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 64;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 128;
  }
  *(_QWORD *)(a1 + 264) = v6;
LABEL_8:
  v7 = *(void ***)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 56) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *(_QWORD *)(a1 + 32);
      v7 = (void **)(*(_QWORD *)(a1 + 24) + 8);
      *(_QWORD *)(a1 + 24) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 256;
  }
  else
  {
    if (v9 >> 3 != 2)
      goto LABEL_15;
    v11 = 512;
  }
  *(_QWORD *)(a1 + 48) = v11;
LABEL_15:
  if (*(_BYTE *)(a1 + 72))
    *(_BYTE *)(a1 + 72) = 0;
  sub_100344260(a1);
}

unint64_t sub_100344568(uint64_t a1, uint64_t a2, double *a3, double a4, double a5)
{
  double v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v21[6];
  __int128 v22;
  double v23;
  char v24;

  if (!*((_BYTE *)a3 + 88))
    sub_1003EE334();
  if (!*(_BYTE *)(a1 + 72))
  {
    v9 = 0;
    v8 = 0.0;
    goto LABEL_6;
  }
  v8 = a5 - *(double *)(a1 + 64);
  v9 = 1;
  if (v8 > 0.0)
  {
LABEL_6:
    *(double *)(a1 + 64) = a5;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v10 = a4;
  if (*((_BYTE *)a3 + 16))
    v10 = a3[1] + a4;
  if (!*((_BYTE *)a3 + 1))
    sub_1003EE35C();
  *(double *)&v22 = a5;
  *((double *)&v22 + 1) = v10;
  v23 = a4;
  v24 = *(_BYTE *)a3;
  sub_100344730(a1 + 232, &v22);
  v11 = *(_QWORD *)(a1 + 272);
  if (v11 > *(int *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 272) = v11 - 1;
    sub_100346A34((_QWORD *)(a1 + 232), 1);
  }
  if (!*((_BYTE *)a3 + 1))
    sub_10000BA44();
  v12 = *(unsigned __int8 *)a3;
  if (v12 == 2)
  {
    v13 = 1;
    *(_BYTE *)(a1 + 222) = 1;
    if (!*(_BYTE *)(a1 + 221))
      goto LABEL_19;
    goto LABEL_17;
  }
  if (v12 == 1)
  {
    *(_BYTE *)(a1 + 221) = 1;
LABEL_17:
    if (!*(_BYTE *)(a1 + 222))
    {
      *(_DWORD *)(a1 + 80) = 0;
      goto LABEL_24;
    }
    v13 = 2;
LABEL_19:
    *(_DWORD *)(a1 + 80) = v13;
LABEL_24:
    v16 = *((_OWORD *)a3 + 3);
    v21[2] = *((_OWORD *)a3 + 2);
    v21[3] = v16;
    v17 = *((_OWORD *)a3 + 5);
    v21[4] = *((_OWORD *)a3 + 4);
    v21[5] = v17;
    v18 = *((_OWORD *)a3 + 1);
    v21[0] = *(_OWORD *)a3;
    v21[1] = v18;
    v19 = (*(uint64_t (**)(uint64_t, double, uint64_t, uint64_t, _OWORD *, double))(*(_QWORD *)a1 + 40))(a1, COERCE_DOUBLE(*(_QWORD *)&v8), v9, a2, v21, v10);
    v14 = v19 & 0xFFFFFFFFFFFFFF00;
    v15 = v19;
    return v15 | v14;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003EE384();
  v14 = 0;
  v15 = 0;
  return v15 | v14;
}

int64x2_t sub_100344730(uint64_t a1, _OWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_100346724((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 7));
  v7 = *v6 + 32 * (v4 & 0x7F);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  v8 = a2[1];
  *(_OWORD *)(v7 - 32) = *a2;
  *(_OWORD *)(v7 - 16) = v8;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_10047ADD0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

double sub_1003447B0(uint64_t a1)
{
  int v1;
  double result;
  uint64_t v3;
  double v4;

  if (!*(_DWORD *)(a1 + 216))
    return 0.0;
  v1 = *(_DWORD *)(a1 + 80);
  switch(v1)
  {
    case 2:
      v3 = a1 + 280;
      v4 = sub_10027C1A4(a1 + 280, 0);
      return (v4 + sub_10027C1A4(v3, 1u)) * 0.5;
    case 1:
      return sub_10027C1A4(a1 + 280, 1u);
    case 0:
      return sub_10027C1A4(a1 + 280, 0);
  }
  return result;
}

uint64_t sub_100344864(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  int v10;
  double v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  char v22;
  int v23;
  int v24;
  uint64_t v26;
  double v27;
  _OWORD v28[6];
  _OWORD v29[6];
  _OWORD v30[6];

  if (!a5[88])
    sub_1003EE3B0();
  if (*(_DWORD *)(a1 + 80) == 2)
    v6 = 152;
  else
    v6 = 88;
  if (*(_DWORD *)(a1 + 80) == 2)
    v7 = a1 + 152;
  else
    v7 = a1 + 88;
  if (!a3)
  {
    *(_DWORD *)(a1 + 216) = 0;
    v11 = 0.0;
    return *(_QWORD *)&v11;
  }
  if (!a5[1])
    sub_1003EE3D8();
  v9 = *a5;
  v10 = *(_DWORD *)(a1 + 216);
  v11 = 0.0;
  if (v10 == 2)
  {
    if (!sub_100344DE4((_DWORD *)a1, *(long double *)&a2))
      goto LABEL_25;
    v12 = *((_OWORD *)a5 + 3);
    v29[2] = *((_OWORD *)a5 + 2);
    v29[3] = v12;
    v13 = *((_OWORD *)a5 + 5);
    v29[4] = *((_OWORD *)a5 + 4);
    v29[5] = v13;
    v14 = *((_OWORD *)a5 + 1);
    v29[0] = *(_OWORD *)a5;
    v29[1] = v14;
    if (!sub_100345170(a1, v9, (uint64_t)v29))
      goto LABEL_25;
    v15 = *((_OWORD *)a5 + 3);
    v28[2] = *((_OWORD *)a5 + 2);
    v28[3] = v15;
    v16 = *((_OWORD *)a5 + 5);
    v28[4] = *((_OWORD *)a5 + 4);
    v28[5] = v16;
    v17 = *((_OWORD *)a5 + 1);
    v28[0] = *(_OWORD *)a5;
    v28[1] = v17;
    if ((sub_100345A68(a1, (uint64_t)v28) & 1) == 0)
      goto LABEL_25;
    goto LABEL_28;
  }
  if (v10 != 1)
  {
    if (v10)
      return *(_QWORD *)&v11;
    if (sub_100344AEC(a1))
    {
      *(_DWORD *)(a1 + 216) = 1;
      *(_DWORD *)(a1 + 224) = 0;
      *(_BYTE *)(a1 + 220) = 0;
      return *(_QWORD *)&v11;
    }
    goto LABEL_28;
  }
  if (!sub_100344DE4((_DWORD *)a1, *(long double *)&a2))
    goto LABEL_25;
  v18 = *((_OWORD *)a5 + 3);
  v30[2] = *((_OWORD *)a5 + 2);
  v30[3] = v18;
  v19 = *((_OWORD *)a5 + 5);
  v30[4] = *((_OWORD *)a5 + 4);
  v30[5] = v19;
  v20 = *((_OWORD *)a5 + 1);
  v30[0] = *(_OWORD *)a5;
  v30[1] = v20;
  if ((sub_100345170(a1, v9, (uint64_t)v30) & 1) == 0)
    goto LABEL_25;
  sub_1003447B0(a1);
  if (!v22)
    sub_1003EE400();
  if (!a5[32])
    sub_1003EE428();
  if (vabdd_f64(v21, *((double *)a5 + 3)) > *(double *)(v7 + 8))
  {
LABEL_25:
    *(_DWORD *)(a1 + 216) = 0;
    return *(_QWORD *)&v11;
  }
  v23 = *(_DWORD *)(a1 + 224) + 1;
  *(_DWORD *)(a1 + 224) = v23;
  if (v23 != *(_DWORD *)(a1 + v6))
  {
LABEL_28:
    if (*(_DWORD *)(a1 + 216) != 2)
      return *(_QWORD *)&v11;
    goto LABEL_29;
  }
  *(_DWORD *)(a1 + 216) = 2;
LABEL_29:
  v24 = *(_DWORD *)(a1 + 80);
  switch(v24)
  {
    case 2:
      v26 = a1 + 280;
      v27 = *(double *)sub_10030E194(v26, 0);
      v11 = (v27 + *(double *)sub_10030E194(v26, 1u)) * 0.5;
      break;
    case 1:
      v11 = *(double *)sub_10030E194(a1 + 280, 1u);
      break;
    case 0:
      v11 = *(double *)sub_10030E194(a1 + 280, 0);
      break;
  }
  return *(_QWORD *)&v11;
}

uint64_t sub_100344AEC(uint64_t a1)
{
  double *v1;
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  int i;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  if (*(_DWORD *)(a1 + 80) == 2)
    v1 = (double *)(a1 + 152);
  else
    v1 = (double *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 272);
  if (v2 < 2)
    return 0;
  v4 = a1;
  v5 = *(_QWORD *)(a1 + 264);
  v6 = *(_QWORD *)(a1 + 240);
  v7 = *(_QWORD *)(v6 + ((v5 >> 4) & 0xFFFFFFFFFFFFFF8));
  v8 = v5 & 0x7F;
  v9 = *(unsigned __int8 *)(v7 + 32 * v8 + 24);
  v10 = *(_QWORD *)(v6 + (((v5 + 1) >> 4) & 0xFFFFFFFFFFFFFF8));
  v11 = (v5 + 1) & 0x7F;
  if (*(unsigned __int8 *)(v10 + 32 * v11 + 24) == v9)
  {
    v12 = 1;
    v13 = 1;
LABEL_12:
    v15 = *(double *)(v7 + 32 * v8) - *(double *)(v10 + 32 * v11);
    if (v15 > 0.0 && v15 <= v1[7])
    {
      v16 = *(_QWORD *)(v7 + 32 * v8 + 8);
      *(_QWORD *)sub_10030E194(a1 + 280, 0) = v16;
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 240) + ((*(_QWORD *)(v4 + 264) >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * (*(_QWORD *)(v4 + 264) & 0x7FLL)
                      + 8);
      *(_QWORD *)sub_10030E194(v4 + 280, 1u) = v17;
      v18 = *(_QWORD *)(v4 + 264);
      v19 = (*(double *)(*(_QWORD *)(*(_QWORD *)(v4 + 240) + ((v18 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v18 & 0x7F) + 8)
           - *(double *)(*(_QWORD *)(*(_QWORD *)(v4 + 240) + (((v18 + v12) >> 4) & 0xFFFFFFFFFFFFFF8))
                       + 32 * ((v18 + v12) & 0x7F)
                       + 8))
          / v15;
      *(double *)sub_10030E194(v4 + 280, 2u) = v19;
      v27 = 0x300000003;
      v25 = off_100815730;
      v26 = xmmword_100478B80;
      v28 = &v29;
      sub_10030DD0C(&v25, 3, 3);
      sub_10030DD58((uint64_t)&v25, 0.0);
      for (i = 0; i != 3; ++i)
        *(_QWORD *)sub_100346AA0((uint64_t)&v25, i, i) = 0x3FF0000000000000;
      v21 = v4 + 344;
      sub_10030EC4C(v4 + 344, (uint64_t)&v25);
      v22 = v1[3] * v1[3];
      *(double *)sub_10030E274(v4 + 344, 2, 2) = v22;
      v23 = v1[2];
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 240) + ((*(_QWORD *)(v4 + 264) >> 4) & 0xFFFFFFFFFFFFFF8))
                    + 32 * (*(_QWORD *)(v4 + 264) & 0x7FLL)
                    + 24) == 1)
      {
        *(double *)sub_10030E274(v4 + 344, 0, 0) = v23 * v23;
        v24 = v1[2] + v1[2];
      }
      else
      {
        *(double *)sub_10030E274(v4 + 344, 0, 0) = (v23 + v23) * (v23 + v23);
        v24 = v1[2];
      }
      LODWORD(v4) = 1;
      *(double *)sub_10030E274(v21, 1, 1) = v24 * v24;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  else
  {
    v14 = 2;
    while (v2 != v14)
    {
      v10 = *(_QWORD *)(v6 + (((v5 + v14) >> 4) & 0xFFFFFFFFFFFFFF8));
      v11 = (v5 + v14++) & 0x7F;
      if (*(unsigned __int8 *)(v10 + 32 * v11 + 24) == v9)
      {
        v12 = v14 - 1;
        v13 = v2 > v14 - 1;
        goto LABEL_12;
      }
    }
    v13 = 0;
  }
  return v13 & v4;
}

uint64_t sub_100344DE4(_DWORD *a1, long double a2)
{
  double *v2;
  int i;
  double v7;
  double v8;
  long double v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t (**v13)();
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE v35[72];

  if (a1[20] == 2)
    v2 = (double *)(a1 + 38);
  else
    v2 = (double *)(a1 + 22);
  if (a2 <= 0.0 || v2[7] < a2)
    return 0;
  v33 = 0x300000003;
  v31 = off_100815730;
  v32 = xmmword_100478B80;
  v34 = v35;
  sub_10030DD0C(&v31, 3, 3);
  sub_10030DD58((uint64_t)&v31, 0.0);
  for (i = 0; i != 3; ++i)
    *(_QWORD *)sub_100346AA0((uint64_t)&v31, i, i) = 0x3FF0000000000000;
  sub_10030EC4C((uint64_t)(a1 + 114), (uint64_t)&v31);
  *(long double *)sub_10030E274((uint64_t)(a1 + 114), 0, 2) = a2;
  *(long double *)sub_10030E274((uint64_t)(a1 + 114), 1, 2) = a2;
  v33 = 0x100000003;
  v31 = off_1008156E8;
  v32 = xmmword_100478880;
  v34 = v35;
  sub_10030E3B0((uint64_t)(a1 + 114), (uint64_t)(a1 + 70), (uint64_t)&v31);
  sub_10030EC4C((uint64_t)(a1 + 70), (uint64_t)&v31);
  v7 = v2[4];
  v8 = pow(a2, 3.0);
  v33 = 0x300000003;
  v31 = off_100815730;
  v32 = xmmword_100478B80;
  v34 = v35;
  sub_10030DD0C(&v31, 3, 3);
  sub_10030DD58((uint64_t)&v31, 0.0);
  sub_10030EC4C((uint64_t)(a1 + 142), (uint64_t)&v31);
  v9 = a2 * a2 * v7 * 0.5;
  v10 = v8 * v7 / 3.0;
  *(double *)sub_10030E274((uint64_t)(a1 + 142), 1, 1) = v10;
  *(double *)sub_10030E274((uint64_t)(a1 + 142), 0, 0) = v10;
  *(long double *)sub_10030E274((uint64_t)(a1 + 142), 2, 2) = v7 * a2;
  *(long double *)sub_10030E274((uint64_t)(a1 + 142), 2, 1) = v9;
  *(long double *)sub_10030E274((uint64_t)(a1 + 142), 2, 0) = v9;
  *(long double *)sub_10030E274((uint64_t)(a1 + 142), 1, 2) = v9;
  *(long double *)sub_10030E274((uint64_t)(a1 + 142), 0, 2) = v9;
  v23 = 0x300000003;
  v21 = off_100815730;
  v22 = xmmword_100478B80;
  v24 = &v25;
  sub_10030E3B0((uint64_t)(a1 + 114), (uint64_t)(a1 + 86), (uint64_t)&v21);
  v11 = a1[117];
  v12 = a1[116];
  v18 = 0x300000003;
  v13 = off_100815730;
  if (v11 > 3)
    sub_1003EE450(422, "this->max_num_rows_ >= num_rows");
  if (v12 >= 4)
    sub_1003EE450(423, "this->max_num_cols_ >= num_cols");
  v14 = v11;
  v15 = v12;
  v16 = v12 * v11;
  v17 = v11;
  v19 = &v20;
  sub_10030E1CC((uint64_t)(a1 + 114), &v13);
  v28 = 0x300000003;
  v26 = off_100815730;
  v27 = xmmword_100478B80;
  v29 = &v30;
  sub_10030E3B0((uint64_t)&v21, (uint64_t)&v13, (uint64_t)&v26);
  v33 = 0x300000003;
  v31 = off_100815730;
  v32 = xmmword_100478B80;
  v34 = v35;
  sub_10030F0E0((uint64_t)&v26, (uint64_t)(a1 + 142), (uint64_t)&v31);
  sub_10030EC4C((uint64_t)(a1 + 86), (uint64_t)&v31);
  return 1;
}

uint64_t sub_100345170(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  double *v8;
  __int128 v9;
  __int128 v10;
  double v11;
  uint64_t result;
  __int128 v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE v27[72];
  uint64_t (**v28)();
  __int128 v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE v32[72];
  uint8_t buf[8];
  __int128 v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE v37[72];
  uint64_t (**v38)();
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (**v43)();
  __int128 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _BYTE v48[8];
  unsigned int v49;
  unsigned int v50;

  if (*(_DWORD *)(a1 + 80) == 2)
    v3 = a1 + 152;
  else
    v3 = a1 + 88;
  if ((a2 - 3) <= 0xFFFFFFFD)
    sub_1003EE474();
  if (a2 == 1)
    v6 = a1 + 680;
  else
    v6 = a1 + 744;
  sub_10032FCB4((uint64_t)v48, v6);
  if (*(_BYTE *)(a3 + 88) && *(_BYTE *)(a3 + 48))
  {
    v7 = *(double *)(a3 + 40);
    v8 = (double *)sub_10030E194(a1 + 808, 0);
  }
  else
  {
    v7 = *(double *)(v3 + 40);
    v8 = (double *)sub_10030E274(a1 + 808, 0, 0);
  }
  *v8 = v7 * v7;
  v35 = 0x300000001;
  *(_QWORD *)buf = off_1008162E0;
  v34 = xmmword_1004794B0;
  v36 = v37;
  sub_10030E3B0((uint64_t)v48, a1 + 344, (uint64_t)buf);
  v30 = 0x100000003;
  v31 = 0;
  v29 = 0uLL;
  v28 = off_1008156E8;
  if (v50 > 3)
  {
    v14 = "this->max_num_rows_ >= num_rows";
    v15 = 422;
    goto LABEL_22;
  }
  if (v49 >= 2)
  {
    v14 = "this->max_num_cols_ >= num_cols";
    v15 = 423;
LABEL_22:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_QWORD *)&v29 = __PAIR64__(v49, v50);
  DWORD2(v29) = v49 * v50;
  HIDWORD(v29) = v50;
  v31 = v32;
  sub_10030E1CC((uint64_t)v48, &v28);
  v25 = 0x100000001;
  v23 = off_100815C78;
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  v24 = v9;
  v26 = v27;
  sub_10030E3B0((uint64_t)buf, (uint64_t)&v28, (uint64_t)&v23);
  v45 = 0x100000001;
  v43 = off_100815C78;
  *(_QWORD *)&v10 = 0x100000001;
  *((_QWORD *)&v10 + 1) = 0x100000001;
  v44 = v10;
  v46 = &v47;
  sub_10030F0E0((uint64_t)&v23, a1 + 808, (uint64_t)&v43);
  v11 = sub_10027C1DC((uint64_t)&v43, 0, 0);
  result = 0;
  if (v11 > 0.0)
  {
    v25 = 0x100000003;
    v26 = 0;
    v24 = 0uLL;
    v23 = off_1008156E8;
    if (v50 > 3)
    {
      v16 = "this->max_num_rows_ >= num_rows";
      v17 = 422;
    }
    else
    {
      if (v49 < 2)
      {
        *(_QWORD *)&v24 = __PAIR64__(v49, v50);
        DWORD2(v24) = v49 * v50;
        HIDWORD(v24) = v50;
        v26 = v27;
        sub_10030E1CC((uint64_t)v48, &v23);
        v30 = 0x100000003;
        v28 = off_1008156E8;
        v29 = xmmword_100478880;
        v31 = v32;
        sub_10030E3B0(a1 + 344, (uint64_t)&v23, (uint64_t)&v28);
        v40 = 0x100000001;
        v38 = off_100815C78;
        *(_QWORD *)&v13 = 0x100000001;
        *((_QWORD *)&v13 + 1) = 0x100000001;
        v39 = v13;
        v41 = &v42;
        v20 = 0x100000001;
        v18 = off_1008166A8;
        v19 = v13;
        v21 = &v22;
        v35 = 0x100000004;
        *(_QWORD *)buf = off_100815778;
        v34 = xmmword_100478890;
        v36 = v37;
        sub_10031C6D8((uint64_t)&v43, (uint64_t)&v18, (uint64_t)buf, (uint64_t)&v38);
      }
      v16 = "this->max_num_cols_ >= num_cols";
      v17 = 423;
    }
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v17, v16);
  }
  return result;
}

uint64_t sub_100345A68(uint64_t a1, uint64_t a2)
{
  double v3;
  char v4;
  double v5;
  double v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t result;
  int v10;
  double v11;
  __int16 v12;
  double v13;

  sub_1003447B0(a1);
  if (!v4)
    return 1;
  if (!*(_BYTE *)(a2 + 88))
    return 1;
  if (!*(_BYTE *)(a2 + 32))
    return 1;
  v5 = v3;
  if (v3 >= 0.15)
    return 1;
  v6 = *(double *)(a2 + 24);
  if (vabdd_f64(v3, v6) <= 0.35)
    return 1;
  v7 = qword_10085F520;
  v8 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v8)
  {
    v10 = 134218240;
    v11 = v5;
    v12 = 2048;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "boundary check fails, filtered range: %.2f, expected range: %.2f", (uint8_t *)&v10, 0x16u);
    return 0;
  }
  return result;
}

void sub_100345B7C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_100816578;
  *(_BYTE *)(a1 + 80) = *a3;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  operator new();
}

void sub_100345C78()
{
  operator delete();
}

uint64_t sub_100345D28(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v6;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  std::string::size_type v16;
  double v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double v23;
  char v24;
  char v25;
  NSObject *v26;
  std::string *v27;
  int v28;
  std::string::size_type v29;
  int v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  _OWORD v34[6];
  _OWORD v35[6];
  std::string v36;
  int v37;
  uint8_t buf[4];
  std::string::size_type v39;
  __int16 v40;
  const char *v41;

  v6 = *(_QWORD *)(a1 + 112);
  if (v6 && *(_QWORD *)(a1 + 120))
  {
    if (*(_BYTE *)(a3 + 88))
    {
      if (!*(_BYTE *)(a3 + 1))
        sub_1003EE4F0();
      sub_100346C90((uint64_t **)(a1 + 88), (unsigned __int8 *)a3, (_BYTE *)a3);
      v6 = *(_QWORD *)(a1 + 112);
    }
    v11 = *(_OWORD *)(a3 + 16);
    v35[0] = *(_OWORD *)a3;
    v35[1] = v11;
    v12 = *(_OWORD *)(a3 + 80);
    v35[4] = *(_OWORD *)(a3 + 64);
    v35[5] = v12;
    v13 = *(_OWORD *)(a3 + 48);
    v35[2] = *(_OWORD *)(a3 + 32);
    v35[3] = v13;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, double, double))(*(_QWORD *)v6 + 16))(v6, a2, v35, a4, a5);
    if (!v15)
      sub_1003EE4C8();
    v16 = v14;
    v17 = *(double *)&v14;
    if (!*(_BYTE *)(a1 + 80))
    {
      if (!*(_BYTE *)(a3 + 88))
      {
        *(_QWORD *)(a3 + 80) = 0;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_BYTE *)(a3 + 88) = 1;
      }
      *(_QWORD *)(a3 + 24) = v14;
      *(_BYTE *)(a3 + 32) = 1;
      v19 = *(_QWORD *)(a1 + 120);
      v20 = *(_OWORD *)(a3 + 80);
      v34[4] = *(_OWORD *)(a3 + 64);
      v34[5] = v20;
      v21 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v21;
      v22 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v22;
      v23 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, double, double))(*(_QWORD *)v19 + 16))(v19, a2, v34, a4, a5));
      v25 = v24;
      v26 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        if (v25)
        {
          std::to_string(&v36, v23);
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v36;
          else
            v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 134218242;
          v39 = v16;
          v40 = 2080;
          v41 = (const char *)v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "exp filter output: %f, kalman filter output: %s", buf, 0x16u);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
        }
        else
        {
          *(_DWORD *)buf = 134218242;
          v39 = v16;
          v40 = 2080;
          v41 = "N/A";
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "exp filter output: %f, kalman filter output: %s", buf, 0x16u);
        }
      }
      if (!*(_BYTE *)(a3 + 88))
        sub_10000BA44();
      if (*(_BYTE *)(a3 + 80))
      {
        v28 = *(_DWORD *)(a3 + 56);
        v29 = *(_QWORD *)(a3 + 72);
        if (v25)
        {
          v30 = sub_10034FAC8(v28, v23, *(double *)(a3 + 72));
          v31 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v36.__r_.__value_.__l.__data_) = 134218496;
            *(double *)((char *)v36.__r_.__value_.__r.__words + 4) = v23;
            WORD2(v36.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 6) = v29;
            HIWORD(v36.__r_.__value_.__r.__words[2]) = 1024;
            v37 = v30;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "kf range_m %.2f, mfs %.1f, check result %d", (uint8_t *)&v36, 0x1Cu);
          }
          if (v30)
            v17 = v23;
          else
            v17 = 0.0;
        }
        else
        {
          v32 = sub_10034FAC8(v28, v17, *(double *)(a3 + 72));
          v33 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v36.__r_.__value_.__l.__data_) = 134218496;
            *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 4) = v16;
            WORD2(v36.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 6) = v29;
            HIWORD(v36.__r_.__value_.__r.__words[2]) = 1024;
            v37 = v32;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "ef range_m %.2f, mfs %.1f, check result %d", (uint8_t *)&v36, 0x1Cu);
          }
          if (!v32)
            v17 = 0.0;
        }
      }
      else if (v25)
      {
        v17 = v23;
      }
    }
  }
  else
  {
    v17 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003EE49C();
  }
  return *(_QWORD *)&v17;
}

void sub_100346130(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = a1[14];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = a1[15];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v5 = (_QWORD *)a1[12];
  v4 = a1 + 12;
  sub_10003E3F0((uint64_t)(v4 - 1), v5);
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
}

void sub_100346188()
{
  __assert_rtn("_filterMeasurement", "NRBYEstimator.cpp", 743, "false");
}

_QWORD *sub_1003461B0(_QWORD *a1)
{
  *a1 = off_1008165B8;
  sub_100152A44(a1 + 2);
  return a1;
}

void sub_1003461E0(_QWORD *a1)
{
  *a1 = off_1008165B8;
  sub_100152A44(a1 + 2);
  operator delete();
}

void sub_100346224(_QWORD *a1)
{
  sub_100326940(a1);
  operator delete();
}

void sub_10034624C(_QWORD *a1)
{
  sub_100346298(a1);
  operator delete();
}

void sub_100346274(uint64_t a1)
{
  sub_100346304(a1);
  operator delete();
}

_QWORD *sub_100346298(_QWORD *a1)
{
  *a1 = off_100816538;
  a1[101] = off_100807398;
  a1[93] = off_100807398;
  a1[85] = off_100807398;
  a1[71] = off_100807398;
  a1[57] = off_100807398;
  a1[43] = off_100807398;
  a1[35] = off_100807398;
  sub_100346690(a1 + 29);
  *a1 = off_1008165B8;
  sub_100152A44(a1 + 2);
  return a1;
}

uint64_t sub_100346304(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_100816578;
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10003E3F0(a1 + 88, *(_QWORD **)(a1 + 96));
  *(_QWORD *)a1 = off_1008165B8;
  sub_100152A44((_QWORD *)(a1 + 16));
  return a1;
}

void sub_100346380(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = ((v3 - v2) << 6) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x200)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10005538C(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      sub_100138C00(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10005538C((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 256;
      else
        v40 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_1001389D0(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      sub_100138AE4((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 256;
      else
        v35 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 512;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100138AE4((uint64_t)a1, &__p);
  }
}

void sub_100346644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100346690(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 64;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 128;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10003A428((uint64_t)a1);
}

void sub_100346724(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 16 * (v3 - v2) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x80)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10005538C(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      sub_100138C00(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10005538C((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 64;
      else
        v40 = (uint64_t)a1[4] + 128;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_1001389D0(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      sub_100138AE4((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 64;
      else
        v35 = (uint64_t)a1[4] + 128;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 128;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100138AE4((uint64_t)a1, &__p);
  }
}

void sub_1003469E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100346A34(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 16 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x80)
    a2 = 1;
  if (v5 < 0x100)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t sub_100346AA0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_1003EE518();
  v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0)
    sub_1003EE540();
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16))
    sub_1003EE568();
  return v3 + 8 * v4;
}

_QWORD *sub_100346AE0(_QWORD *result)
{
  *result = off_100815C00;
  return result;
}

void sub_100346AF0(_QWORD *a1)
{
  *a1 = off_100815C00;
  operator delete();
}

uint64_t sub_100346B10(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_100346B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  sub_10031CA0C(a1, &v3, a3);
}

_DWORD *sub_100346B3C(uint64_t a1, uint64_t a2, double a3)
{
  _DWORD *result;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;

  if (a1 == a2)
    sub_1003EE590();
  result = sub_10030DD0C((_DWORD *)a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  v7 = *(unsigned int *)(a2 + 16);
  if ((int)v7 >= 1)
  {
    v8 = *(double **)(a1 + 32);
    v9 = *(double **)(a2 + 32);
    do
    {
      v10 = *v8++;
      *v9++ = a3 - v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

float sub_100346BA8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  float v6;
  const char *v7;
  int v8;
  float result;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_100816608;
  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 96) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 128) = v4;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  v6 = *(float *)(a1 + 80);
  v7 = "_config.alpha >= 0.0 && _config.alpha <= 1.0";
  v8 = 188;
  if (v6 < 0.0 || v6 > 1.0)
LABEL_5:
    __assert_rtn("TimeDependentExpFilter", "NRBYEstimator.h", v8, v7);
  result = *(float *)(a1 + 84);
  if (result <= 0.0)
  {
    v7 = "_config.nominalUpdateIntervalSeconds > 0.0";
    v8 = 189;
    goto LABEL_5;
  }
  return result;
}

void sub_100346C70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v1 = off_1008165B8;
  sub_100152A44(v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_100346C90(uint64_t **a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v10 + 25) = *a3;
    sub_1000272A8(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t sub_100346D48()
{
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = xmmword_10047ADE0;
  v9 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085E320, (int *)&v8, 3);
  xmmword_10085E338 = xmmword_10046E050;
  unk_10085E348 = xmmword_10046E060;
  qword_10085E360 = 0;
  unk_10085E368 = 0;
  qword_10085E358 = 0x3FD999999999999ALL;
  unk_10085E370 = xmmword_10046E070;
  dword_10085E380 = 5;
  qword_10085E388 = 0x4000000000000000;
  dword_10085E390 = 5;
  byte_10085E398 = 0;
  unk_10085E39C = 0x30000000ALL;
  xmmword_10085E3A8 = xmmword_10046E080;
  unk_10085E3B8 = xmmword_10046E090;
  xmmword_10085E3C8 = xmmword_10046E0A0;
  qword_10085E3D8 = 0x3FE3333333333333;
  dword_10085E3E0 = 3;
  xmmword_10085E3E8 = xmmword_10046E0B0;
  unk_10085E3F8 = xmmword_10046E090;
  xmmword_10085E408 = xmmword_10046E080;
  qword_10085E418 = 0x3FE3333333333333;
  byte_10085E420 = 0;
  xmmword_10085E428 = xmmword_10046E0C0;
  unk_10085E438 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v6 = _Q0;
  xmmword_10085E448 = _Q0;
  qword_10085E458 = 0xBFD3333333333333;
  xmmword_10085E460 = xmmword_10046E0E0;
  qword_10085E470 = 0x3E99999A40000000;
  xmmword_10085E478 = xmmword_10046E060;
  qword_10085E490 = 0;
  unk_10085E498 = 0;
  qword_10085E488 = 0x3FD999999999999ALL;
  xmmword_10085E4A0 = xmmword_10046E070;
  dword_10085E4B0 = 5;
  qword_10085E4B8 = 0x4000000000000000;
  dword_10085E4C0 = 4;
  qword_10085E4C8 = 0x300000008;
  qword_10085E4D0 = 0xC04E800000000000;
  v7 = 0xC04E800000000000;
  sub_10018252C((uint64_t)&unk_10085E4D8, (double *)&v7, 1);
  xmmword_10085E4F0 = xmmword_10046E0F0;
  qword_10085E500 = 0x4024000000000000;
  dword_10085E508 = 45;
  byte_10085E50C = 0;
  dword_10085E510 = 1;
  byte_10085E518 = 1;
  xmmword_10085E520 = xmmword_10046E100;
  unk_10085E530 = xmmword_10046E110;
  xmmword_10085E540 = v6;
  qword_10085E550 = 0xC059000000000000;
  xmmword_10085E558 = xmmword_10046E120;
  qword_10085E568 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085E570 = xmmword_10046E060;
  qword_10085E580 = 0x3FD999999999999ALL;
  qword_10085E590 = 0;
  qword_10085E588 = 0;
  xmmword_10085E598 = xmmword_10046E070;
  dword_10085E5A8 = 5;
  qword_10085E5B0 = 0x4000000000000000;
  dword_10085E5B8 = 10;
  qword_10085E5C0 = 0x4034000000000000;
  dword_10085E5C8 = 3;
  xmmword_10085E5D0 = xmmword_10046E130;
  return __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085E320, (void *)&_mh_execute_header);
}

void sub_100346FF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100347010(int *a1, _BYTE *a2)
{
  uint64_t result;

  if (*a2 && !a2[4] && a2[3])
  {
    sub_10034705C(a1, a2);
    return *a1;
  }
  else
  {
    result = 0;
    *a1 = 0;
  }
  return result;
}

int *sub_10034705C(int *result, _BYTE *a2)
{
  int v2;
  BOOL v3;

  switch(*result)
  {
    case 0:
      if (a2[2])
        goto LABEL_20;
      if (a2[1])
      {
        v2 = 1;
        goto LABEL_21;
      }
      break;
    case 1:
      if (a2[2])
        goto LABEL_20;
      break;
    case 2:
      if (a2[1])
        v3 = 0;
      else
        v3 = a2[2] == 0;
      if (v3 && a2[5] != 0 && a2[6] == 0)
      {
        v2 = 3;
        goto LABEL_21;
      }
      break;
    case 3:
      if (!a2[5])
      {
LABEL_20:
        v2 = 2;
LABEL_21:
        *result = v2;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003470E4(uint64_t a1, uint64_t a2)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1008166F0;
  sub_1003243CC((_BYTE *)(a1 + 48));
  sub_10033C1B0(a1 + 448, a2 + 64);
  sub_100308DF8(a1 + 4944, *(unsigned __int8 *)(a2 + 2), *(unsigned __int8 *)(a2 + 3), *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 176), *(unsigned __int8 *)(a2 + 192));
  sub_10035AFE8(a1 + 5504, *(unsigned __int8 *)(a2 + 176), *(unsigned __int8 *)(a2 + 192));
  *(_BYTE *)(a1 + 6000) = 0;
  *(_BYTE *)(a1 + 6032) = 0;
  *(_BYTE *)(a1 + 6040) = 0;
  *(_BYTE *)(a1 + 6056) = 0;
  *(_BYTE *)(a1 + 6064) = 0;
  *(_BYTE *)(a1 + 6144) = 0;
  *(_BYTE *)(a1 + 6152) = 0;
  *(_BYTE *)(a1 + 6156) = 0;
  sub_10034E340(a1 + 6160);
  sub_1003344CC(a1 + 6528);
  *(_BYTE *)(a1 + 7688) = 0;
  *(_BYTE *)(a1 + 7696) = 0;
  *(_BYTE *)(a1 + 7704) = 0;
  *(_BYTE *)(a1 + 7712) = 0;
  *(_BYTE *)(a1 + 7720) = 0;
  *(_BYTE *)(a1 + 7728) = 0;
  *(_BYTE *)(a1 + 7736) = 0;
  *(_BYTE *)(a1 + 7744) = 0;
  *(_BYTE *)(a1 + 7752) = 0;
  *(_BYTE *)(a1 + 7760) = 0;
  *(_BYTE *)(a1 + 7768) = 0;
  *(_OWORD *)(a1 + 7632) = 0u;
  *(_OWORD *)(a1 + 7648) = 0u;
  *(_OWORD *)(a1 + 7664) = 0u;
  *(_BYTE *)(a1 + 7680) = 0;
  sub_100352F50(a1 + 7776, (__n128 *)(a2 + 160));
  *(_BYTE *)(a1 + 7832) = 0;
  *(_BYTE *)(a1 + 7848) = 0;
  *(_BYTE *)(a1 + 7856) = 0;
  *(_BYTE *)(a1 + 8040) = 0;
  *(_BYTE *)(a1 + 8160) = 0;
  *(_BYTE *)(a1 + 8208) = 0;
  *(_BYTE *)(a1 + 8216) = 0;
  *(_BYTE *)(a1 + 8264) = 0;
  *(_DWORD *)(a1 + 8272) = 0;
  *(_BYTE *)(a1 + 8276) = 0;
  *(_WORD *)(a1 + 8304) = 0;
  *(_BYTE *)(a1 + 8312) = 0;
  *(_BYTE *)(a1 + 8360) = 0;
  *(_BYTE *)(a1 + 8368) = 0;
  *(_BYTE *)(a1 + 8376) = 0;
  *(_BYTE *)(a1 + 8384) = 0;
  *(_BYTE *)(a1 + 8392) = 0;
  *(_BYTE *)(a1 + 8400) = 0;
  *(_BYTE *)(a1 + 8432) = 0;
  *(_BYTE *)(a1 + 8464) = 0;
  *(_BYTE *)(a1 + 8472) = 0;
  *(_BYTE *)(a1 + 8480) = 0;
  *(_BYTE *)(a1 + 8488) = 0;
  *(_BYTE *)(a1 + 8496) = 0;
  *(_OWORD *)(a1 + 8048) = 0u;
  *(_OWORD *)(a1 + 8064) = 0u;
  *(_OWORD *)(a1 + 8080) = 0u;
  *(_OWORD *)(a1 + 8096) = 0u;
  *(_OWORD *)(a1 + 8112) = 0u;
  *(_OWORD *)(a1 + 8128) = 0u;
  *(_WORD *)(a1 + 8144) = 0;
  *(_OWORD *)(a1 + 8440) = 0u;
  *(_BYTE *)(a1 + 8456) = 0;
  *(_DWORD *)(a1 + 8512) = 16843009;
  *(_BYTE *)(a1 + 8516) = 1;
  *(_WORD *)(a1 + 8517) = 256;
  *(_QWORD *)(a1 + 8520) = 0x3FF0000000000000;
  *(int64x2_t *)(a1 + 8528) = vdupq_n_s64(0x404A000000000000uLL);
  *(_OWORD *)(a1 + 8544) = xmmword_10047AEF0;
  __asm { FMOV            V0.2D, #2.0 }
  *(_OWORD *)(a1 + 8560) = _Q0;
  *(_WORD *)(a1 + 8576) = 0;
  *(_QWORD *)(a1 + 8584) = 0x3FA999999999999ALL;
  *(_QWORD *)(a1 + 8592) = 20000;
  *(_QWORD *)(a1 + 8600) = 0x3FA47AE147AE147BLL;
  *(_OWORD *)(a1 + 8608) = xmmword_10047AF00;
  *(_OWORD *)(a1 + 8624) = xmmword_10047AF10;
  *(_OWORD *)(a1 + 8640) = xmmword_10047AF20;
  *(_QWORD *)(a1 + 8656) = 0x3FD0000000000000;
  *(_BYTE *)(a1 + 8664) = 1;
  *(_OWORD *)(a1 + 8672) = xmmword_100477A90;
  *(_BYTE *)(a1 + 8688) = 1;
  *(_QWORD *)(a1 + 8696) = 0x4024000000000000;
  *(_WORD *)(a1 + 8704) = 256;
  *(_BYTE *)(a1 + 8712) = 0;
  *(_BYTE *)(a1 + 8720) = 0;
  *(_BYTE *)(a1 + 8848) = 0;
  *(_BYTE *)(a1 + 8864) = 0;
  *(_WORD *)(a1 + 8872) = 0;
  *(_BYTE *)(a1 + 8874) = 0;
  *(_BYTE *)(a1 + 9112) = 0;
  *(_BYTE *)(a1 + 9120) = 0;
  *(_BYTE *)(a1 + 9304) = 0;
  *(_DWORD *)(a1 + 9360) = 0;
  *(_OWORD *)(a1 + 9344) = 0u;
  *(_OWORD *)(a1 + 9328) = 0u;
  *(_OWORD *)(a1 + 9312) = 0u;
  *(_BYTE *)(a1 + 8928) = 0;
  *(_OWORD *)(a1 + 8912) = 0u;
  *(_OWORD *)(a1 + 8896) = 0u;
  *(_OWORD *)(a1 + 8880) = 0u;
  *(_BYTE *)(a1 + 9376) = 0;
  *(_BYTE *)(a1 + 9504) = 0;
  *(_BYTE *)(a1 + 9520) = 0;
  *(_BYTE *)(a1 + 9648) = 0;
  *(_BYTE *)(a1 + 9664) = 0;
  *(_BYTE *)(a1 + 9792) = 0;
  *(_DWORD *)(a1 + 9808) = 0;
  *(_BYTE *)(a1 + 9824) = 0;
  *(_BYTE *)(a1 + 9856) = 0;
  *(_BYTE *)(a1 + 9872) = 0;
  *(_BYTE *)(a1 + 9880) = 0;
  *(_QWORD *)(a1 + 9888) = 0;
  sub_100308DFC(a1 + 4944, 2.0);
  *(_OWORD *)(a1 + 8512) = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8560) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 8576) = v11;
  *(_OWORD *)(a1 + 8528) = v9;
  *(_OWORD *)(a1 + 8544) = v10;
  v12 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 8624) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 8640) = v14;
  *(_OWORD *)(a1 + 8592) = v12;
  *(_OWORD *)(a1 + 8608) = v13;
  v15 = *(_OWORD *)(a2 + 144);
  v16 = *(_OWORD *)(a2 + 160);
  v17 = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 8704) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(a1 + 8672) = v16;
  *(_OWORD *)(a1 + 8688) = v17;
  *(_OWORD *)(a1 + 8656) = v15;
  *(_DWORD *)(a1 + 8504) = 0;
  *(_OWORD *)(a1 + 7600) = 0u;
  return a1;
}

void sub_1003474B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  _QWORD *v19;
  void *v21;

  sub_10003A394(v13);
  sub_10034C9CC(v19);
  sub_10034CF88(v12 + 1012);
  sub_10034CF88(a10);
  if (*(_BYTE *)(v15 + 1808))
  {
    v21 = *v18;
    if (*v18)
    {
      v12[973] = v21;
      operator delete(v21);
    }
  }
  sub_10003A394(v17);
  sub_100347564(v16);
  sub_10003A394(v12 + 782);
  sub_10003A394(v12 + 776);
  sub_10034759C(a11);
  sub_100347600(v14);
  sub_10034CC24(a12);
  _Unwind_Resume(a1);
}

void sub_10034755C()
{
  JUMPOUT(0x10034754CLL);
}

_QWORD *sub_100347564(_QWORD *a1)
{
  sub_10034CA60(a1 + 84);
  sub_10003A394(a1 + 50);
  sub_10003A394(a1 + 44);
  return a1;
}

uint64_t sub_10034759C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  sub_100346690((_QWORD *)(a1 + 440));
  sub_10003A394((_QWORD *)(a1 + 368));
  sub_10034CAF4((_QWORD *)(a1 + 320));
  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(void **)(a1 + 88);
    if (v2)
    {
      *(_QWORD *)(a1 + 96) = v2;
      operator delete(v2);
    }
  }
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    sub_10034CB88(a1 + 64, v3);
  return a1;
}

uint64_t sub_100347600(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void **v5;

  v5 = (void **)(a1 + 528);
  sub_1002F190C(&v5);
  sub_10003A394((_QWORD *)(a1 + 456));
  v2 = *(_QWORD **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
  {
    v2[21] = off_100807398;
    v2[13] = off_100807398;
    v2[5] = off_100807398;
    operator delete();
  }
  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(void **)(a1 + 96);
    if (v3)
    {
      *(_QWORD *)(a1 + 104) = v3;
      operator delete(v3);
    }
  }
  sub_1002F1998((uint64_t *)(a1 + 72), 0);
  return a1;
}

uint64_t sub_10034769C(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v10;
  NSObject *v12;
  double v13;
  NSObject *v19;
  double v20;
  NSObject *v21;
  BOOL v22;
  double v23;
  double v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  v10 = a3 * a7;
  if (a3 > 0.0 && v10 <= a5 - a4)
  {
    v13 = a1 - a2;
    if (((*(_QWORD *)&a2 ^ *(_QWORD *)&a1) & 0x8000000000000000) != 0 && fabs(v13 / a3) > a7)
    {
      v19 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v25 = 134218496;
        v26 = a1;
        v27 = 2048;
        v28 = a2;
        v29 = 2048;
        v30 = a3;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,overflow detected in peer integrated value, currInteVal: %f, prevInteVal: %f, deltaT: %f", (uint8_t *)&v25, 0x20u);
      }
      v20 = a4 - (a5 - a1) - a6;
      if (v13 < 0.0)
        v20 = a1 - a4 + a5 + a6;
      v13 = v20 - a2;
    }
    v21 = qword_10085F520;
    v22 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
    v23 = fabs(v13);
    if (v22)
    {
      v25 = 134218496;
      v24 = v23 / a3;
      v26 = v23 / a3;
      v27 = 2048;
      v28 = v13;
      v29 = 2048;
      v30 = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,Delta derivative calculated for overflow detection: %f, corrected delta: %f, deltaT: %f", (uint8_t *)&v25, 0x20u);
    }
    else
    {
      v24 = v23 / a3;
    }
    if (v24 > a7)
      v13 = 0.0;
  }
  else
  {
    v12 = qword_10085F520;
    v13 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      v25 = 134218496;
      v26 = a3;
      v27 = 2048;
      v28 = v10;
      v29 = 2048;
      v30 = a5;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#findalgs-peoplefinder,invalid time delta, deltaT: %f, max potential value change: %f, max integrated value: %f", (uint8_t *)&v25, 0x20u);
    }
  }
  return *(_QWORD *)&v13;
}

BOOL sub_1003478E0(uint64_t a1)
{
  int v1;
  _BOOL4 v2;

  v1 = *(unsigned __int8 *)(a1 + 8360);
  if (*(_BYTE *)(a1 + 8360))
  {
    if (!*(_BYTE *)(a1 + 8376))
      goto LABEL_14;
    v1 = *(double *)(a1 + 8) - *(double *)(a1 + 8368) < 2.38;
  }
  if (!*(_BYTE *)(a1 + 8432))
  {
    v2 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a1 + 8376))
LABEL_14:
    sub_10000BA44();
  v2 = *(double *)(a1 + 16) - *(double *)(a1 + 8368) < 2.38;
LABEL_8:
  if (*(_BYTE *)(a1 + 7688))
    return 1;
  if (*(_BYTE *)(a1 + 7704))
    v1 = 1;
  return ((v1 | v2) & 1) != 0 || *(_BYTE *)(a1 + 7720) != 0;
}

void sub_100347988(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  double v9;
  __int128 *v10;
  double v11;
  double v12;
  int v13;
  int v14;
  _BOOL4 v15;
  double v16;
  _DWORD v17[90];
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD __src[13];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[25];
  unsigned __int8 v91;
  char v92;
  char v93;
  int v94;
  char v95;

  v4 = a1 + 8304;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EE668();
  sub_100347FF0(a1, &v79);
  v5 = v91;
  if (*(_BYTE *)(v4 + 360))
    v6 = v91 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = 0;
  }
  else
  {
    if (v93)
      v8 = v92 == 0;
    else
      v8 = 1;
    v7 = !v8;
  }
  if (*(_BYTE *)(v4 + 212))
  {
    sub_10035CEA0(a1 + 5504, (uint64_t)&v55);
    if ((_BYTE)v68 && *(_BYTE *)(v4 + 1200))
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EE63C();
      *(_WORD *)v4 = 0;
      sub_100348214(a1, (uint64_t)&v55, v9);
      sub_100348368(a1, (uint64_t)&v55);
      sub_1003484B4(a1, (uint64_t)&v55);
      sub_10034855C(a1, (uint64_t)&v55);
      DWORD1(v77) = *(_DWORD *)(a1 + 9808);
      BYTE8(v77) = 1;
      if (!(_BYTE)v67)
        goto LABEL_82;
      if (sub_1003485EC(a1, 0, *((float *)&v56 + 2)))
      {
        *(_QWORD *)(a1 + 8384) = *(_QWORD *)(a1 + 8);
        *(_BYTE *)(v4 + 88) = 1;
        v10 = &v55;
LABEL_79:
        memcpy((void *)a2, v10, 0x180uLL);
        return;
      }
      if ((v7 & 1) == 0)
        goto LABEL_80;
    }
  }
  else
  {
    v78 = 0u;
    v77 = 0u;
    v76 = 0u;
    v75 = 0u;
    v74 = 0u;
    v73 = 0u;
    v72 = 0u;
    v71 = 0u;
    v70 = 0u;
    v69 = 0u;
    v68 = 0u;
    v67 = 0u;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    v61 = 0u;
    v60 = 0u;
    v59 = 0u;
    v58 = 0u;
    v57 = 0u;
    v56 = 0u;
    v55 = 0u;
  }
  if (*(_BYTE *)(v4 + 210) || *(_BYTE *)(v4 + 211))
  {
    sub_10030AE88(a1 + 4944, (uint64_t)__src);
    if ((_BYTE)v44 && *(_BYTE *)(v4 + 1200))
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EE610();
      *(_WORD *)v4 = 0;
      sub_100348214(a1, (uint64_t)__src, v11);
      sub_100348368(a1, (uint64_t)__src);
      sub_1003484B4(a1, (uint64_t)__src);
      sub_10034855C(a1, (uint64_t)__src);
      DWORD1(v53) = *(_DWORD *)(a1 + 9808);
      BYTE8(v53) = 1;
      if (!LOBYTE(__src[12]))
        goto LABEL_82;
      if (sub_1003485EC(a1, 0, *((float *)&__src[1] + 2)))
      {
        *(_QWORD *)(a1 + 8384) = *(_QWORD *)(a1 + 8);
        *(_BYTE *)(v4 + 88) = 1;
        v10 = __src;
        goto LABEL_79;
      }
      if ((v7 & 1) == 0)
        goto LABEL_80;
    }
  }
  else
  {
    v54 = 0u;
    v53 = 0u;
    v52 = 0u;
    v51 = 0u;
    v50 = 0u;
    v49 = 0u;
    v48 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    memset(__src, 0, sizeof(__src));
  }
  if (*(_BYTE *)(v4 + 209))
  {
    sub_10033D5C8(a1 + 448, (uint64_t)&v19);
  }
  else
  {
    v12 = 0.0;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
  }
  if (*(_BYTE *)(v4 + 1200))
  {
    v13 = *(unsigned __int8 *)(v4 + 1180);
    if (*(_BYTE *)(v4 + 1180))
      v13 = *(_DWORD *)(a1 + 9480) == 1;
  }
  else
  {
    v13 = 0;
  }
  if (v5)
    v14 = v7;
  else
    v14 = 1;
  if (v14)
    v15 = v5 != 0;
  else
    v15 = *(unsigned __int8 *)(v4 + 1200) != 0;
  if ((v15 & v13 & 1) == 0 && (_BYTE)v32 && BYTE8(v39) && *(_BYTE *)(v4 + 1200) && (_BYTE)v31)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003EE5E4();
    sub_100348214(a1, (uint64_t)&v19, v16);
    sub_100348368(a1, (uint64_t)&v19);
    sub_1003484B4(a1, (uint64_t)&v19);
    sub_10034855C(a1, (uint64_t)&v19);
    DWORD1(v41) = *(_DWORD *)(a1 + 9808);
    BYTE8(v41) = 1;
    if (!(_BYTE)v31)
      goto LABEL_82;
    if (sub_1003485EC(a1, 0, *((float *)&v20 + 2)))
    {
      *(_QWORD *)(a1 + 8384) = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(v4 + 88) = 1;
      v10 = &v19;
      goto LABEL_79;
    }
    if ((v7 & 1) == 0)
      goto LABEL_80;
  }
  if (v15)
  {
    if (LOBYTE(__src[12]) && (!v90[24] || DWORD1(v81) == 4))
    {
      v88 = *(_OWORD *)((char *)&__src[8] + 8);
      v89 = *(_OWORD *)((char *)&__src[9] + 8);
      *(_OWORD *)v90 = *(_OWORD *)((char *)&__src[10] + 8);
      *(_OWORD *)&v90[9] = *(_OWORD *)((char *)&__src[11] + 1);
      v84 = *(_OWORD *)((char *)&__src[4] + 8);
      v85 = *(_OWORD *)((char *)&__src[5] + 8);
      v86 = *(_OWORD *)((char *)&__src[6] + 8);
      v87 = *(_OWORD *)((char *)&__src[7] + 8);
      v80 = *(_OWORD *)((char *)__src + 8);
      v81 = *(_OWORD *)((char *)&__src[1] + 8);
      v12 = *((double *)&__src[2] + 1);
      v82 = *(_OWORD *)((char *)&__src[2] + 8);
      v83 = *(_OWORD *)((char *)&__src[3] + 8);
      DWORD1(v81) = 1;
    }
    sub_100348214(a1, (uint64_t)&v79, v12);
    sub_100348368(a1, (uint64_t)&v79);
    sub_1003484B4(a1, (uint64_t)&v79);
    sub_10034855C(a1, (uint64_t)&v79);
    v94 = *(_DWORD *)(a1 + 9808);
    v95 = 1;
    if (v90[24])
    {
      if (sub_1003485EC(a1, v7, *(float *)&v81))
      {
        *(_QWORD *)(a1 + 8384) = *(_QWORD *)(a1 + 8);
        *(_BYTE *)(v4 + 88) = 1;
        v10 = (__int128 *)&v79;
        goto LABEL_79;
      }
      goto LABEL_80;
    }
    goto LABEL_82;
  }
  if (*(_BYTE *)(v4 + 1552))
    *(_BYTE *)(v4 + 1552) = 0;
  *(_WORD *)v4 = 0;
  if (LOBYTE(__src[12]) && *(double *)(a1 + 8) - *(double *)&__src[1] < 2.0)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003EE5B8();
    sub_1003488B0((unsigned __int8 *)__src, a1, (uint64_t)&v19, (uint64_t)&v55, (uint64_t)v17);
    sub_10034855C(a1, (uint64_t)v17);
    v17[89] = *(_DWORD *)(a1 + 9808);
    v18 = 1;
    if (LOBYTE(__src[12]))
    {
      if (sub_1003485EC(a1, 0, *((float *)&__src[1] + 2)))
      {
        *(_QWORD *)(a1 + 8384) = *(_QWORD *)(a1 + 8);
        *(_BYTE *)(v4 + 88) = 1;
        v10 = (__int128 *)v17;
        goto LABEL_79;
      }
LABEL_80:
      sub_100348700(a1, a2);
      return;
    }
LABEL_82:
    sub_10000BA44();
  }
  sub_100348700(a1, a2);
  sub_10034855C(a1, a2);
  *(_DWORD *)(a2 + 356) = *(_DWORD *)(a1 + 9808);
  *(_BYTE *)(a2 + 360) = 1;
}

void sub_100347FF0(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[24];
  __int128 v7[12];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a1 + 8304;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EE6C0();
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if (*(_BYTE *)(v4 + 211))
  {
    sub_10030CF78(a1 + 4944, 1, (uint64_t)v7);
    if ((_BYTE)v8)
      sub_100324B70(a1 + 48, (__int128 *)((char *)v7 + 8));
  }
  else
  {
    v18 = 0uLL;
    v19 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    memset(v7, 0, sizeof(v7));
  }
  if (*(_BYTE *)(v4 + 208))
    sub_1003243D0(a1 + 48, (uint64_t)v6);
  else
    memset(v6, 0, sizeof(v6));
  if (*(_BYTE *)(a1 + 32))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((sub_10034A750(a1, (uint64_t)v6) & 1) == 0)
      memset(v6, 0, 382);
    if (LOBYTE(v6[13]))
    {
      memcpy(a2, v6, 0x17EuLL);
      *(_QWORD *)(a1 + 8288) = v5;
      *(_WORD *)v4 = 256;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EE694();
    }
  }
}

double sub_100348214(uint64_t a1, uint64_t a2, double result)
{
  uint64_t v3;
  BOOL v6;
  double v8;
  double v9;
  double v10;
  float32x4_t v11;
  float32x4_t v12;
  float64x2_t v13;
  double v14;
  _QWORD v15[2];
  int v16;
  float32x4_t v17;

  v3 = a1 + 9504;
  if (*(_BYTE *)(a1 + 9504) && *(_DWORD *)(a1 + 9456) == 2)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v6 = !*(_BYTE *)(a2 + 208) || *(_BYTE *)(a2 + 192) == 0;
    if (!v6 && *(float *)&result != 1.1755e-38)
    {
      if (*(_BYTE *)(a1 + 32))
      {
        v17.i32[2] = 0;
        v17.i64[0] = 0;
        if (sub_10034C810(a1, a2, (float32x4_t *)(a1 + 9376), (uint64_t)&v17))
        {
          if (*(_BYTE *)(v3 + 352))
          {
            if (*(_BYTE *)(a1 + 32))
            {
              v8 = *(double *)(a1 + 8);
              v9 = (v8 - *(double *)(a1 + 9824)) / (v8 - *(double *)(a1 + 9824) + *(double *)(a1 + 8520));
              v10 = 1.0 - v9;
              *(float *)&v9 = v9;
              *(float *)&v10 = v10;
              v11 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 9840), *(float *)&v10), v17, *(float *)&v9);
              *(float32x4_t *)(a1 + 9840) = v11;
              *(double *)(a1 + 9824) = v8;
              v15[0] = 0;
              v15[1] = 0;
              v16 = 0;
              v13 = vcvtq_f64_f32(*(float32x2_t *)v11.f32);
              v14 = v11.f32[2];
              sub_10030BEDC(&v13, (float32x4_t *)(a1 + 9376), (uint64_t)v15);
              result = sub_100030334(*((float *)v15 + 1));
              if (*(_BYTE *)(a2 + 208))
              {
                *(double *)(a2 + 200) = result;
                return result;
              }
            }
LABEL_19:
            sub_10000BA44();
          }
          if (!*(_BYTE *)(a1 + 32))
            goto LABEL_19;
          result = *(double *)(a1 + 8);
          v12 = v17;
          *(double *)(a1 + 9824) = result;
          *(float32x4_t *)(a1 + 9840) = v12;
          *(_BYTE *)(v3 + 352) = 1;
        }
      }
    }
  }
  return result;
}

void sub_100348368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v4;
  BOOL v6;
  float v7[98];

  v2 = a1 + 8515;
  if (*(_BYTE *)(a1 + 8515))
  {
    sub_10030CF78(a1 + 4944, 0, (uint64_t)v7);
    v4 = v7[6];
    if (LOBYTE(v7[48]) && v7[6] != 1.1755e-38)
    {
      if (*(_BYTE *)(a2 + 192))
      {
        if (*(_BYTE *)(v2 + 197))
          v6 = v7[6] > 1.0;
        else
          v6 = v7[6] > 0.9;
        if (v6)
        {
          if (v7[6] > 1.5)
          {
            if (v7[6] > 3.0)
            {
LABEL_15:
              *(_BYTE *)(v2 + 197) = 0;
              return;
            }
            v4 = (1.0 - (3.0 - v7[6]) / 1.5) * *(float *)(a2 + 24) + (3.0 - v7[6]) / 1.5 * v7[6];
          }
          *(float *)(a2 + 24) = v4;
          goto LABEL_15;
        }
        memcpy((void *)a2, v7, 0x17EuLL);
        *(_BYTE *)(v2 + 197) = 1;
      }
      else
      {
        memcpy((void *)a2, v7, 0x17EuLL);
      }
    }
  }
}

uint64_t sub_1003484B4(uint64_t result, uint64_t a2)
{
  BOOL v3;
  char v4;
  BOOL v5;
  char v6;
  char v7;
  __int16 v8;
  BOOL v9;
  char v10;
  BOOL v11;
  char v12;

  if (!*(_BYTE *)(result + 32)
    || !*(_BYTE *)(result + 8496)
    || *(double *)(result + 8) - *(double *)(result + 8488) > 10.0)
  {
    *(_DWORD *)(result + 8504) = 0;
  }
  if (!*(_BYTE *)(result + 8704))
  {
    v3 = *(float *)(a2 + 24) != 1.1755e-38 && *(_BYTE *)(a2 + 192) != 0;
    v4 = *(_BYTE *)(a2 + 208);
    v5 = *(_DWORD *)(result + 8504) == 2;
    v6 = *(_BYTE *)(result + 7720);
    v7 = *(_BYTE *)(result + 9504);
    v8 = 0;
    v9 = v3;
    v10 = v4;
    v11 = v5;
    v12 = v6;
    return sub_10034C7AC(result, a2, &v7);
  }
  return result;
}

void sub_10034855C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t v5[16];

  if (*(_DWORD *)(a1 + 9888) == 1)
  {
    v4 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,Reporting VIO drift in solution", v5, 2u);
    }
    *(_BYTE *)(a2 + 380) = 1;
    *(_DWORD *)(a1 + 9888) = 2;
  }
}

BOOL sub_1003485EC(uint64_t a1, unsigned __int8 a2, double a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t v10[16];

  v3 = (_BYTE *)(a1 + 8145);
  if (*(_BYTE *)(a1 + 8145))
    return 1;
  v5 = 8560;
  if (!*(_BYTE *)(a1 + 40))
    v5 = 8544;
  v6 = 8568;
  if (!*(_BYTE *)(a1 + 40))
    v6 = 8552;
  v7 = 8528;
  if (((*(_BYTE *)(a1 + 8664) != 0) & a2) != 0)
    v7 = 8536;
  if (*(double *)(a1 + v7) <= a3
    || ((*(_BYTE *)(a1 + 8664) != 0) & a2) == 0
    && *(_QWORD *)(a1 + 8136) < (unint64_t)(int)(*(double *)(a1 + v5) * *(double *)(a1 + v6)))
  {
    return 0;
  }
  v4 = 1;
  *v3 = 1;
  *(_QWORD *)(a1 + 8152) = *(_QWORD *)(a1 + 8);
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,Condition to show find button met", v10, 2u);
    return *v3 != 0;
  }
  return v4;
}

uint64_t sub_100348700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  NSObject *v6;
  uint8_t v8[16];

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  *(_DWORD *)(a2 + 232) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  *(_BYTE *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 288) = 0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_BYTE *)(a2 + 320) = 0;
  *(_BYTE *)(a2 + 328) = 0;
  *(_BYTE *)(a2 + 336) = 0;
  *(_BYTE *)(a2 + 344) = 0;
  *(_WORD *)(a2 + 352) = 0;
  *(_BYTE *)(a2 + 356) = 0;
  *(_BYTE *)(a2 + 360) = 0;
  *(_BYTE *)(a2 + 372) = 0;
  *(_BYTE *)(a2 + 376) = 0;
  *(_WORD *)(a2 + 380) = 0;
  *(_DWORD *)(a2 + 364) = 0;
  *(_BYTE *)(a2 + 368) = 1;
  if (*(_BYTE *)(a1 + 8040))
    v4 = *(_QWORD *)(a1 + 7856);
  else
    v4 = 0;
  v5 = *(double *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 68) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0x100800000;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_WORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_QWORD *)(a2 + 128) = 0x200000000;
  *(_BYTE *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_BYTE *)(a2 + 192) = 1;
  if (*(_BYTE *)(a1 + 8392))
  {
    if (v5 - *(double *)(a1 + 8384) > *(double *)(a1 + 8696))
    {
      if (*(_BYTE *)(a1 + 8145))
      {
        *(_BYTE *)(a2 + 381) = 1;
        *(_BYTE *)(a1 + 8145) = 0;
        v6 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v8 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,disableFindButton set to true", v8, 2u);
        }
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EE6EC();
  return sub_1003484B4(a1, a2);
}

void sub_1003488B0(unsigned __int8 *__src@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  __int16 v13;
  BOOL v14;
  char v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BOOL4 v27;

  v10 = (char *)(a2 + 7720);
  if (!*(_BYTE *)(a2 + 32) || !*(_BYTE *)(a2 + 8496) || *(double *)(a2 + 8) - *(double *)(a2 + 8488) > 10.0)
    *(_DWORD *)(a2 + 8504) = 0;
  memcpy((void *)a5, __src, 0x180uLL);
  if (__src[5] | *(unsigned __int8 *)(a3 + 5))
    v11 = 1;
  else
    v11 = *(_BYTE *)(a4 + 5) != 0;
  if (__src[4] | *(unsigned __int8 *)(a3 + 4))
    v12 = 1;
  else
    v12 = *(_BYTE *)(a4 + 4) != 0;
  if (!v10[984])
  {
    v14 = *(_DWORD *)(a2 + 8504) == 2;
    v15 = *v10;
    LOBYTE(v21) = v10[1784];
    BYTE1(v21) = v12;
    BYTE2(v21) = v11;
    *(_WORD *)((char *)&v21 + 3) = 1;
    BYTE5(v21) = v14;
    BYTE6(v21) = v15;
    sub_10034C7AC(a2, a5, &v21);
    goto LABEL_18;
  }
  if (v11)
  {
    v13 = 256;
  }
  else
  {
    if (!v12)
      goto LABEL_18;
    v13 = 1;
  }
  *(_WORD *)(a5 + 4) = v13;
LABEL_18:
  v16 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v17 = *(unsigned __int8 *)(a3 + 4);
    v18 = *(unsigned __int8 *)(a4 + 4);
    v21 = __PAIR64__(__src[4], 67109888);
    v22 = 1024;
    v23 = v17;
    v24 = 1024;
    v25 = v18;
    v26 = 1024;
    v27 = v12;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,#convergence_blending, Insufficient Displacement: SA: %d, PF: %d, SAVIO: %d, Blended: %d", (uint8_t *)&v21, 0x1Au);
    v16 = qword_10085F520;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(unsigned __int8 *)(a3 + 5);
    v20 = *(unsigned __int8 *)(a4 + 5);
    v21 = __PAIR64__(__src[5], 67109888);
    v22 = 1024;
    v23 = v19;
    v24 = 1024;
    v25 = v20;
    v26 = 1024;
    v27 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,#convergence_blending, Insufficient Horizontal Displacement: SA: %d, PF: %d, SAVIO: %d, Blended: %d", (uint8_t *)&v21, 0x1Au);
  }
  *(_DWORD *)(a5 + 232) = *(_DWORD *)(a3 + 232);
}

double sub_100348B08(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  double result;
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  BOOL v19;
  unint64_t v20;
  NSObject *v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  NSObject *v32;
  _BOOL4 v33;
  int v34;
  int v35;
  int v36;
  NSObject *v37;
  double v38;
  uint64_t v39;
  int v40;
  _BYTE v41[10];
  uint64_t v42;
  int v43;

  v4 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
  if (v4)
    sub_1003EE7C8();
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a2 + 183))
    {
      if (*(_BYTE *)(a2 + 182) == 1)
      {
        if (!*(_BYTE *)(a1 + 40))
        {
          v6 = qword_10085F520;
          v4 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
          if (v4)
          {
            LOWORD(v40) = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,process Range: Setting reduced range rate to true", (uint8_t *)&v40, 2u);
          }
        }
        *(_BYTE *)(a1 + 40) = 1;
      }
      else
      {
        if (*(_BYTE *)(a1 + 40))
        {
          v7 = qword_10085F520;
          v4 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
          if (v4)
          {
            LOWORD(v40) = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,process Range: Setting reduced range rate to false", (uint8_t *)&v40, 2u);
          }
        }
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 40) = 0;
      v4 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR);
      if (v4)
        sub_1003EE79C();
    }
    if (!*(_BYTE *)(a2 + 181))
      goto LABEL_22;
    v8 = *(unsigned __int8 *)(a2 + 180);
    if (v8 > 2)
    {
      if (*(_BYTE *)(a1 + 8518) && v8 == 7)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003EE770();
        goto LABEL_35;
      }
LABEL_22:
      if (!*(_BYTE *)(a1 + 8040))
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003EE718();
        goto LABEL_45;
      }
      v9 = sub_100349040(*(double *)(a2 + 8), 2.0, v4, (_QWORD *)(a1 + 8048));
      v10 = 8568;
      if (!*(_BYTE *)(a1 + 40))
        v10 = 8552;
      sub_100349040(*(double *)(a2 + 8), *(double *)(a1 + v10), v9, (_QWORD *)(a1 + 8096));
      if (!*(_BYTE *)(a1 + 8040))
        sub_10000BA44();
      v11 = *(float *)(a2 + 16);
      if (*(float *)(a1 + 7872) - v11 > 1.0)
      {
        v12 = *(_QWORD *)(a1 + 8088);
        if (v12)
        {
          v13 = *(_QWORD *)(a1 + 8056);
          if (*(_QWORD *)(a1 + 8064) == v13
            || (v14 = *(_QWORD *)(a1 + 8080),
                v15 = (_QWORD *)(v13 + 8 * (v14 / 0x16)),
                v16 = *v15 + 184 * (v14 % 0x16),
                v17 = *(_QWORD *)(v13 + 8 * ((v14 + v12) / 0x16)) + 184 * ((v14 + v12) % 0x16),
                v16 == v17))
          {
            v19 = 0;
          }
          else
          {
            do
            {
              v18 = *(float *)(v16 + 16) - v11;
              v19 = v18 <= 1.0;
              if (v18 <= 1.0)
                break;
              v16 += 184;
              if (v16 - *v15 == 4048)
              {
                v20 = v15[1];
                ++v15;
                v16 = v20;
              }
            }
            while (v16 != v17);
          }
          *(_BYTE *)(a1 + 8144) = v19;
        }
        else
        {
          *(_BYTE *)(a1 + 8144) = 0;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            sub_1003EE744();
        }
        goto LABEL_45;
      }
LABEL_35:
      *(_BYTE *)(a1 + 8144) = 1;
LABEL_45:
      sub_1003491E4((_QWORD *)(a1 + 8048), (__int128 *)a2);
      v22 = *(unsigned __int8 *)(a1 + 8040);
      v23 = *(_OWORD *)(a2 + 32);
      v24 = *(_OWORD *)(a2 + 48);
      v25 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 7856) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 7904) = v24;
      *(_OWORD *)(a1 + 7888) = v23;
      *(_OWORD *)(a1 + 7872) = v25;
      v26 = *(_OWORD *)(a2 + 96);
      v27 = *(_OWORD *)(a2 + 112);
      v28 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 7920) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 7968) = v27;
      *(_OWORD *)(a1 + 7952) = v26;
      *(_OWORD *)(a1 + 7936) = v28;
      v30 = *(_OWORD *)(a2 + 144);
      v29 = *(_OWORD *)(a2 + 160);
      v31 = *(_QWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 7984) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 8032) = v31;
      *(_OWORD *)(a1 + 8016) = v29;
      *(_OWORD *)(a1 + 8000) = v30;
      if (!v22)
        *(_BYTE *)(a1 + 8040) = 1;
      *(_QWORD *)(a1 + 8280) = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(a1 + 8144))
      {
        sub_1003491E4((_QWORD *)(a1 + 8096), (__int128 *)a2);
        sub_10030A9D0(a1 + 4944, a2);
        v32 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v33 = sub_1003478E0(a1);
          v34 = *(unsigned __int8 *)(a1 + 7688);
          v35 = *(unsigned __int8 *)(a1 + 7704);
          v36 = *(unsigned __int8 *)(a1 + 8360);
          v40 = 67109888;
          *(_DWORD *)v41 = v33;
          *(_WORD *)&v41[4] = 1024;
          *(_DWORD *)&v41[6] = v34;
          LOWORD(v42) = 1024;
          *(_DWORD *)((char *)&v42 + 2) = v35;
          HIWORD(v42) = 1024;
          v43 = v36;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,shouldFeedPF: %d, peerStatic: %d, peerMovingSlowly: %d, hasLastPDR: %d", (uint8_t *)&v40, 0x1Au);
        }
        if (*(_BYTE *)(a1 + 7720) && *(double *)(a2 + 8) >= *(double *)(a1 + 7712))
          sub_10035CBA8(a1 + 5504, (__int128 *)a2);
        if (sub_1003478E0(a1))
          sub_10033F678(a1 + 448, *(unsigned __int8 *)(a1 + 40), *(float *)(a2 + 16), *(double *)(a2 + 8));
      }
      else
      {
        v37 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v38 = *(float *)(a2 + 16);
          v39 = *(_QWORD *)(a2 + 8);
          v40 = 134218240;
          *(double *)v41 = v38;
          *(_WORD *)&v41[8] = 2048;
          v42 = v39;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#negativeBiasRangeRejection, Rejected range measurement of %3.2f m at %3.2f seconds", (uint8_t *)&v40, 0x16u);
        }
      }
      return result;
    }
    v21 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v40 = 67109120;
      *(_DWORD *)v41 = v8;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,mmsValStatus %d does not pass check, rejecting range result event", (uint8_t *)&v40, 8u);
    }
    *(_BYTE *)(a1 + 8144) = 0;
  }
  return result;
}

unint64_t sub_100349040(double a1, double a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;

  v5 = a4[4];
  v6 = a4[1];
  v7 = a4[2];
  v8 = (_QWORD *)(v6 + 8 * (v5 / 0x16));
  if (v7 == v6)
  {
    v14 = 0;
    v10 = a4 + 5;
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 8 * (v5 / 0x16)) + 184 * (v5 % 0x16);
    v10 = a4 + 5;
    v11 = *(_QWORD *)(v6 + 8 * ((a4[5] + v5) / 0x16)) + 184 * ((a4[5] + v5) % 0x16);
    if (v9 != v11)
    {
      while (a1 - *(double *)(v9 + 8) <= a2)
      {
        v9 += 184;
        if (v9 - *v8 == 4048)
        {
          v12 = v8[1];
          ++v8;
          v9 = v12;
        }
        if (v9 == v11)
          goto LABEL_18;
      }
    }
    v13 = v8;
    if (v9 == v11)
    {
LABEL_18:
      v14 = *(_QWORD *)(v6 + 8 * ((a4[5] + v5) / 0x16)) + 184 * ((a4[5] + v5) % 0x16);
    }
    else
    {
      v14 = v9;
      while (1)
      {
        v9 += 184;
        if (v9 - *v13 == 4048)
        {
          v15 = v13[1];
          ++v13;
          v9 = v15;
        }
        if (v9 == v11)
          break;
        if (a1 - *(double *)(v9 + 8) <= a2)
        {
          v16 = *(_OWORD *)v9;
          v17 = *(_OWORD *)(v9 + 16);
          v18 = *(_OWORD *)(v9 + 48);
          *(_OWORD *)(v14 + 32) = *(_OWORD *)(v9 + 32);
          *(_OWORD *)(v14 + 48) = v18;
          *(_OWORD *)v14 = v16;
          *(_OWORD *)(v14 + 16) = v17;
          v19 = *(_OWORD *)(v9 + 64);
          v20 = *(_OWORD *)(v9 + 80);
          v21 = *(_OWORD *)(v9 + 112);
          *(_OWORD *)(v14 + 96) = *(_OWORD *)(v9 + 96);
          *(_OWORD *)(v14 + 112) = v21;
          *(_OWORD *)(v14 + 64) = v19;
          *(_OWORD *)(v14 + 80) = v20;
          v22 = *(_OWORD *)(v9 + 128);
          v23 = *(_OWORD *)(v9 + 144);
          v24 = *(_OWORD *)(v9 + 160);
          *(_QWORD *)(v14 + 176) = *(_QWORD *)(v9 + 176);
          *(_OWORD *)(v14 + 144) = v23;
          *(_OWORD *)(v14 + 160) = v24;
          *(_OWORD *)(v14 + 128) = v22;
          v14 += 184;
          if (v14 - *v8 == 4048)
          {
            v25 = v8[1];
            ++v8;
            v14 = v25;
          }
        }
      }
      v5 = a4[4];
      v6 = a4[1];
      v7 = a4[2];
    }
  }
  v26 = v5 + *v10;
  v27 = (_QWORD *)(v6 + 8 * (v26 / 0x16));
  if (v7 == v6)
    v28 = 0;
  else
    v28 = (char *)(*v27 + 184 * (v26 % 0x16));
  return sub_1003492FC(a4, v8, (char *)v14, v27, v28);
}

uint64_t sub_1003491E4(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 22 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10034D01C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x16)) + 184 * (v7 % 0x16);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = v13;
  v15 = a2[8];
  v16 = a2[9];
  v17 = a2[10];
  *(_QWORD *)(v8 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(v8 + 144) = v16;
  *(_OWORD *)(v8 + 160) = v17;
  *(_OWORD *)(v8 + 128) = v15;
  v18 = a1[4];
  v19 = a1[5] + 1;
  a1[5] = v19;
  v20 = v18 + v19;
  v21 = a1[1];
  v22 = (_QWORD *)(v21 + 8 * (v20 / 0x16));
  v23 = *v22 + 184 * (v20 % 0x16);
  if (a1[2] == v21)
    v23 = 0;
  if (v23 == *v22)
    v23 = *(v22 - 1) + 4048;
  return v23 - 184;
}

unint64_t sub_1003492FC(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 22 * (a4 - a2)
       - 0x2C8590B21642C859 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x2C8590B21642C859 * ((uint64_t)&a3[-*a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x16));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[184 * (v7 % 0x16)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 22 * ((char **)a2 - v9)
        - 0x2C8590B21642C859 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x2C8590B21642C859 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x16);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_10034D400(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10034D400(v24, v6);
      sub_10034D4B4(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_10034D330((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_10034D400(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x16));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[184 * (v14 % 0x16)];
      v24[0] = v12;
      sub_10034D660(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10034D38C(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x16));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 184 * (v19 % 0x16);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_10034D400(v24, v11);
  return v24[0].n128_u64[0];
}

void sub_1003495A4(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  double *v5;
  double v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  float32x4_t v20;
  float32x4_t v21;
  __int128 v22;
  float32x4_t v23;
  float32x4_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float v29;
  float v30;
  float v31;
  float v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  double v40;
  _OWORD v41[4];
  _OWORD v42[4];
  __int128 v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  double v61;
  double v62;
  double v63;
  double v64;
  char v65;
  int v66;
  char v67;
  float32x4_t v68;
  char v69;

  v4 = (_BYTE *)(a1 + 8705);
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EE84C();
  if (*v4)
  {
    if (*(_BYTE *)(a2 + 152))
    {
      v40 = 0.0;
      sub_10034F6EC(a1, &v40, *(double *)a2);
      sub_10034E750(a1 + 6160, a2, (uint64_t)&v68, v40);
      v5 = (double *)(a1 + 8);
      if (!*(_BYTE *)(a1 + 32))
        v5 = &v40;
      v6 = *v5;
      sub_10033454C((float32x4_t *)(a1 + 6528), a2, (uint64_t)&v43, v40, *v5);
      if (v69)
        *(float32x4_t *)(a1 + 7600) = vaddq_f32(v68, *(float32x4_t *)(a1 + 7600));
      if (v67)
      {
        *(_DWORD *)(a1 + 9808) = v66;
        sub_10033E884(a1 + 448, (uint64_t)&v43);
        if (v51)
        {
          v38 = v44;
          v39 = v45;
          v36 = v47;
          v37 = v46;
          *(double *)&v7 = sub_100311080((float32x4_t)xmmword_10047B190);
          v8 = 0;
          v41[0] = v7;
          v41[1] = v9;
          v41[2] = v10;
          v41[3] = v11;
          do
          {
            v42[v8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, COERCE_FLOAT(v41[v8])), v39, *(float32x2_t *)&v41[v8], 1), v37, (float32x4_t)v41[v8], 2), v36, (float32x4_t)v41[v8], 3);
            ++v8;
          }
          while (v8 != 4);
          v12 = v42[0];
          v13 = v42[1];
          v14 = v42[2];
          v15 = v42[3];
          v16 = v4[799];
          *(_OWORD *)(a1 + 9376) = v43;
          v17 = v49;
          *(_OWORD *)(a1 + 9456) = v48;
          *(_OWORD *)(a1 + 9472) = v17;
          if (v16)
          {
            *(_QWORD *)(a1 + 9488) = v50;
          }
          else
          {
            *(_OWORD *)(a1 + 9488) = v50;
            v4[799] = 1;
          }
          *(_OWORD *)(a1 + 9392) = v12;
          *(_OWORD *)(a1 + 9408) = v13;
          *(_OWORD *)(a1 + 9424) = v14;
          *(_OWORD *)(a1 + 9440) = v15;
          v18 = (_OWORD *)(a1 + 9520);
          v19 = v48;
          if (v4[943])
          {
            *(float32x4_t *)(a1 + 9584) = v47;
            *(_OWORD *)(a1 + 9600) = v19;
            *(_OWORD *)(a1 + 9616) = v49;
            *(_QWORD *)(a1 + 9632) = v50;
            v20 = v44;
            *v18 = v43;
            *(float32x4_t *)(a1 + 9536) = v20;
            v21 = v46;
            *(float32x4_t *)(a1 + 9552) = v45;
            *(float32x4_t *)(a1 + 9568) = v21;
          }
          else
          {
            *(float32x4_t *)(a1 + 9584) = v47;
            *(_OWORD *)(a1 + 9600) = v19;
            v22 = v50;
            *(_OWORD *)(a1 + 9616) = v49;
            *(_OWORD *)(a1 + 9632) = v22;
            v23 = v44;
            *v18 = v43;
            *(float32x4_t *)(a1 + 9536) = v23;
            v24 = v46;
            *(float32x4_t *)(a1 + 9552) = v45;
            *(float32x4_t *)(a1 + 9568) = v24;
            v4[943] = 1;
          }
          v25 = v56;
          *(_OWORD *)(a1 + 9744) = v57;
          v26 = v59;
          *(_OWORD *)(a1 + 9760) = v58;
          *(_OWORD *)(a1 + 9776) = v26;
          v27 = v52;
          *(_OWORD *)(a1 + 9680) = v53;
          v28 = v55;
          *(_OWORD *)(a1 + 9696) = v54;
          *(_OWORD *)(a1 + 9712) = v28;
          *(_OWORD *)(a1 + 9728) = v25;
          *(_DWORD *)(a1 + 9632) = v66;
          v4[931] = 1;
          *(_OWORD *)(a1 + 9664) = v27;
          *(_BYTE *)(a1 + 9792) = v60;
          *(double *)(a1 + 9872) = v6;
          v4[1175] = 1;
        }
        else if (v66 == 1)
        {
          if (v4[1175] && v6 - *(double *)(a1 + 9872) <= 3.0)
          {
            if (v4[799])
            {
              if (!v65)
                sub_10000BA44();
              v29 = v62;
              v30 = v63;
              v31 = v64;
              v32 = v61;
              *(double *)&v33 = sub_100311080(vaddq_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_10047AF30, v30), (float32x4_t)xmmword_10047AF40, v29), vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_10047AF50, v32), (float32x4_t)xmmword_10047AF60, v31)));
              *(_OWORD *)(a1 + 9392) = v33;
              *(_OWORD *)(a1 + 9408) = v34;
              *(_OWORD *)(a1 + 9424) = v35;
            }
          }
          else if (v4[799])
          {
            v4[799] = 0;
          }
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      sub_1003EE820();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    sub_1003EE7F4();
  }
}

double sub_100349968(uint64_t a1, __int128 *a2)
{
  double result;

  *(_QWORD *)&result = sub_100335558(a1 + 6528, a2).n128_u64[0];
  return result;
}

void sub_100349974(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  NSObject *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float32x4_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  int v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  double v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[8];
  _OWORD v105[8];
  _BYTE buf[32];
  _BYTE v107[32];
  _BYTE v108[32];
  __int128 v109;
  __int128 v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char v120;
  int v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;

  v4 = (_BYTE *)(a1 + 7720);
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EE878();
  if (*(_DWORD *)(a2 + 80) == 2)
  {
    v5 = (double *)(a1 + 8720);
    if (v4[1128])
    {
      v6 = *(double *)a2;
      v7 = *v5;
      v8 = *(double *)a2 - *v5;
      if (v8 > 1.0)
      {
        v9 = *(float *)(a1 + 8788);
        v10 = *(float *)(a1 + 8792);
        v11 = *(float *)(a2 + 64);
        v12 = *(float *)(a2 + 68);
        v13 = *(float *)(a2 + 72);
        v14 = sqrt((v12 - v9) * (v12 - v9)+ (v11 - *(float *)(a1 + 8784)) * (v11 - *(float *)(a1 + 8784))+ (v13 - v10) * (v13 - v10))/ v8;
        if (v14 > 4.0)
        {
          v99 = *(float *)(a1 + 8784);
          v27 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134220032;
            *(double *)&buf[4] = v14;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v11;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&buf[24] = v12;
            *(_WORD *)v107 = 2048;
            *(double *)&v107[2] = v13;
            *(_WORD *)&v107[10] = 2048;
            *(double *)&v107[12] = v99;
            *(_WORD *)&v107[20] = 2048;
            *(double *)&v107[22] = v9;
            *(_WORD *)&v107[30] = 2048;
            *(double *)v108 = v10;
            *(_WORD *)&v108[8] = 2048;
            *(double *)&v108[10] = v6;
            *(_WORD *)&v108[18] = 2048;
            *(double *)&v108[20] = v7;
            _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#findalgs-peoplefinder,Maximum VIO speed exceeded, resetting filters: %f m/s, x: %f, y: %f, z: %f, previous x: %f, previous y: %f, previous z: %f, current time: %f, previous time: %f  ", buf, 0x5Cu);
          }
          if (v4[1784])
            v4[1784] = 0;
          if (v4[2136])
            v4[2136] = 0;
          v28 = *(_OWORD *)(a2 + 64);
          v127 = *(_OWORD *)(a2 + 80);
          v126 = v28;
          v29 = *(_OWORD *)(a2 + 112);
          v128 = *(_OWORD *)(a2 + 96);
          v129 = v29;
          v30 = *(_OWORD *)(a2 + 16);
          v122 = *(_OWORD *)a2;
          v123 = v30;
          v31 = *(_OWORD *)(a2 + 48);
          v124 = *(_OWORD *)(a2 + 32);
          v125 = v31;
          LODWORD(v127) = 1;
          v105[2] = v124;
          v105[3] = v31;
          v105[0] = v122;
          v105[1] = v30;
          v105[6] = v128;
          v105[7] = v29;
          v105[4] = v28;
          v105[5] = v127;
          sub_100335178(a1 + 6528, (uint64_t)v105, (uint64_t)buf);
          sub_10033E884(a1 + 448, (uint64_t)buf);
          *(_DWORD *)(a1 + 9808) = v121;
          sub_100308E04(a1 + 4944, (uint64_t)&v122);
          sub_100322354((_QWORD *)(a1 + 8872), (uint64_t)&v122);
          sub_10034E394((_QWORD *)(a1 + 6160));
          if (*v4 && *(double *)&v122 >= *(double *)(a1 + 7712))
            sub_10035AFEC(a1 + 5504, (uint64_t)&v122);
          v32 = *(_OWORD *)a2;
          v33 = *(_OWORD *)(a2 + 16);
          v34 = *(_OWORD *)(a2 + 48);
          if (v4[1128])
          {
            *(_OWORD *)(a1 + 8752) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 8768) = v34;
            *(_OWORD *)v5 = v32;
            *(_OWORD *)(a1 + 8736) = v33;
            v35 = *(_OWORD *)(a2 + 64);
            v36 = *(_OWORD *)(a2 + 80);
            v37 = *(_OWORD *)(a2 + 96);
            *(_QWORD *)(a1 + 8832) = *(_QWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 8800) = v36;
            *(_OWORD *)(a1 + 8816) = v37;
            *(_OWORD *)(a1 + 8784) = v35;
          }
          else
          {
            *(_OWORD *)(a1 + 8752) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 8768) = v34;
            *(_OWORD *)v5 = v32;
            *(_OWORD *)(a1 + 8736) = v33;
            v38 = *(_OWORD *)(a2 + 64);
            v39 = *(_OWORD *)(a2 + 80);
            v40 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 8816) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(a1 + 8832) = v40;
            *(_OWORD *)(a1 + 8784) = v38;
            *(_OWORD *)(a1 + 8800) = v39;
            v4[1128] = 1;
          }
          v4[1144] = 1;
          if (!*(_DWORD *)(a1 + 9888))
            *(_DWORD *)(a1 + 9888) = 1;
        }
        else
        {
          v15 = *(_OWORD *)a2;
          v16 = *(_OWORD *)(a2 + 16);
          v17 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 8752) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 8768) = v17;
          *(_OWORD *)v5 = v15;
          *(_OWORD *)(a1 + 8736) = v16;
          v18 = *(_OWORD *)(a2 + 64);
          v19 = *(_OWORD *)(a2 + 80);
          v20 = *(_OWORD *)(a2 + 96);
          *(_QWORD *)(a1 + 8832) = *(_QWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 8800) = v19;
          *(_OWORD *)(a1 + 8816) = v20;
          *(_OWORD *)(a1 + 8784) = v18;
          *(_DWORD *)(a1 + 9888) = 0;
          v4[1144] = 0;
        }
      }
    }
    else
    {
      v21 = *(_OWORD *)a2;
      v22 = *(_OWORD *)(a2 + 16);
      v23 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 8752) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 8768) = v23;
      *(_OWORD *)v5 = v21;
      *(_OWORD *)(a1 + 8736) = v22;
      v24 = *(_OWORD *)(a2 + 64);
      v25 = *(_OWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 8816) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 8832) = v26;
      *(_OWORD *)(a1 + 8784) = v24;
      *(_OWORD *)(a1 + 8800) = v25;
      v4[1128] = 1;
    }
  }
  else
  {
    if (v4[1128])
      v4[1128] = 0;
    v4[1144] = 0;
    *(_DWORD *)(a1 + 9888) = 0;
  }
  if (!v4[1144])
  {
    sub_10034F050(a1 + 6160, a2, (uint64_t)buf);
    v41 = *(_OWORD *)(a2 + 80);
    v104[4] = *(_OWORD *)(a2 + 64);
    v104[5] = v41;
    v42 = *(_OWORD *)(a2 + 112);
    v104[6] = *(_OWORD *)(a2 + 96);
    v104[7] = v42;
    v43 = *(_OWORD *)(a2 + 16);
    v104[0] = *(_OWORD *)a2;
    v104[1] = v43;
    v44 = *(_OWORD *)(a2 + 48);
    v104[2] = *(_OWORD *)(a2 + 32);
    v104[3] = v44;
    sub_100335178(a1 + 6528, (uint64_t)v104, (uint64_t)buf);
    *(_DWORD *)(a1 + 9808) = v121;
    v45 = (float32x4_t)xmmword_10047B190;
    if (!v4[985])
    {
      if (*(_DWORD *)(a2 + 80) != 2 || *(_BYTE *)(a2 + 84))
      {
        if (v4[1784])
          v4[1784] = 0;
        if (v4[2136])
          v4[2136] = 0;
      }
      else
      {
        v95 = *(float32x4_t *)(a2 + 16);
        v97 = *(float32x4_t *)(a2 + 32);
        v91 = *(float32x4_t *)(a2 + 64);
        v93 = *(float32x4_t *)(a2 + 48);
        *(double *)&v46 = sub_100311080((float32x4_t)xmmword_10047B190);
        v47 = 0;
        v100 = v46;
        v101 = v48;
        v102 = v49;
        v103 = v50;
        do
        {
          *(__int128 *)((char *)&v122 + v47) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, COERCE_FLOAT(*(__int128 *)((char *)&v100 + v47))), v97, *(float32x2_t *)((char *)&v100 + v47), 1), v93, *(float32x4_t *)((char *)&v100 + v47), 2), v91, *(float32x4_t *)((char *)&v100 + v47), 3);
          v47 += 16;
        }
        while (v47 != 64);
        v51 = v122;
        v52 = v123;
        v53 = v124;
        v54 = v125;
        v55 = *(_BYTE *)(a2 + 85);
        v56 = v4[1784];
        *(_QWORD *)(a1 + 9376) = *(_QWORD *)a2;
        *(_OWORD *)(a1 + 9392) = v51;
        *(_OWORD *)(a1 + 9408) = v52;
        *(_OWORD *)(a1 + 9424) = v53;
        *(_OWORD *)(a1 + 9440) = v54;
        *(_DWORD *)(a1 + 9456) = 2;
        v4[1740] = 0;
        v4[1741] = v55;
        v4[1744] = 0;
        v4[1752] = 0;
        v4[1760] = 0;
        v4[1764] = 0;
        if (!v56)
          v4[1784] = 1;
        v4[1768] = 0;
        v4[1772] = 0;
      }
      sub_100308E04(a1 + 4944, a2);
      if (v111)
      {
        sub_10033E884(a1 + 448, (uint64_t)buf);
        if (*(_DWORD *)&v108[16] == 2)
        {
          if (!v111)
            goto LABEL_70;
          v57 = (_OWORD *)(a1 + 9520);
          v58 = *(_OWORD *)&v108[16];
          if (v4[1928])
          {
            *(_OWORD *)(a1 + 9584) = *(_OWORD *)v108;
            *(_OWORD *)(a1 + 9600) = v58;
            *(_OWORD *)(a1 + 9616) = v109;
            *(_QWORD *)(a1 + 9632) = v110;
            v59 = *(_OWORD *)&buf[16];
            *v57 = *(_OWORD *)buf;
            *(_OWORD *)(a1 + 9536) = v59;
            v60 = *(_OWORD *)&v107[16];
            *(_OWORD *)(a1 + 9552) = *(_OWORD *)v107;
            *(_OWORD *)(a1 + 9568) = v60;
          }
          else
          {
            *(_OWORD *)(a1 + 9584) = *(_OWORD *)v108;
            *(_OWORD *)(a1 + 9600) = v58;
            v61 = v110;
            *(_OWORD *)(a1 + 9616) = v109;
            *(_OWORD *)(a1 + 9632) = v61;
            v62 = *(_OWORD *)&buf[16];
            *v57 = *(_OWORD *)buf;
            *(_OWORD *)(a1 + 9536) = v62;
            v63 = *(_OWORD *)&v107[16];
            *(_OWORD *)(a1 + 9552) = *(_OWORD *)v107;
            *(_OWORD *)(a1 + 9568) = v63;
            v4[1928] = 1;
          }
          v64 = v116;
          *(_OWORD *)(a1 + 9744) = v117;
          v65 = v119;
          *(_OWORD *)(a1 + 9760) = v118;
          *(_OWORD *)(a1 + 9776) = v65;
          v66 = v112;
          *(_OWORD *)(a1 + 9680) = v113;
          v67 = v115;
          *(_OWORD *)(a1 + 9696) = v114;
          *(_OWORD *)(a1 + 9712) = v67;
          *(_OWORD *)(a1 + 9728) = v64;
          *(_OWORD *)(a1 + 9664) = v66;
          *(_BYTE *)(a1 + 9792) = v120;
        }
      }
      sub_100322354((_QWORD *)(a1 + 8872), a2);
      v45 = (float32x4_t)xmmword_10047B190;
      if (!v4[985])
        goto LABEL_63;
    }
    if (!v111)
      goto LABEL_63;
    if (BYTE4(v110))
    {
      if ((v110 - 2) < 2)
        goto LABEL_53;
      if (!(_DWORD)v110)
      {
        if (v4[1784])
          v4[1784] = 0;
        if (v4[2136])
          v4[2136] = 0;
        goto LABEL_56;
      }
      if ((_DWORD)v110 == 5)
      {
LABEL_53:
        v96 = *(float32x4_t *)&buf[16];
        v98 = *(float32x4_t *)v107;
        v92 = *(float32x4_t *)v108;
        v94 = *(float32x4_t *)&v107[16];
        *(double *)&v68 = sub_100311080(v45);
        v69 = 0;
        v100 = v68;
        v101 = v70;
        v102 = v71;
        v103 = v72;
        do
        {
          *(__int128 *)((char *)&v122 + v69) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, COERCE_FLOAT(*(__int128 *)((char *)&v100 + v69))), v98, *(float32x2_t *)((char *)&v100 + v69), 1), v94, *(float32x4_t *)((char *)&v100 + v69), 2), v92, *(float32x4_t *)((char *)&v100 + v69), 3);
          v69 += 16;
        }
        while (v69 != 64);
        v73 = v122;
        v74 = v123;
        v75 = *(_OWORD *)v107;
        *(_OWORD *)(a1 + 9392) = *(_OWORD *)&buf[16];
        *(_OWORD *)(a1 + 9408) = v75;
        v76 = *(_OWORD *)v108;
        *(_OWORD *)(a1 + 9424) = *(_OWORD *)&v107[16];
        *(_OWORD *)(a1 + 9440) = v76;
        v77 = v109;
        *(_OWORD *)(a1 + 9456) = *(_OWORD *)&v108[16];
        v78 = v124;
        v79 = v125;
        *(_OWORD *)(a1 + 9472) = v77;
        *(_OWORD *)(a1 + 9488) = v110;
        *(_BYTE *)(a1 + 9504) = v111;
        *(_OWORD *)(a1 + 9376) = *(_OWORD *)buf;
        *(_OWORD *)(a1 + 9392) = v73;
        *(_OWORD *)(a1 + 9408) = v74;
        *(_OWORD *)(a1 + 9424) = v78;
        *(_OWORD *)(a1 + 9440) = v79;
        *(_QWORD *)(a1 + 9872) = *(_QWORD *)buf;
        v4[2160] = 1;
      }
    }
LABEL_56:
    sub_100308E04(a1 + 4944, (uint64_t)buf);
    if (!v111)
      goto LABEL_70;
    sub_100322354((_QWORD *)(a1 + 8872), (uint64_t)buf);
    sub_10033E884(a1 + 448, (uint64_t)buf);
    if (*(_DWORD *)&v108[16] == 2)
    {
      if (v111)
      {
        v80 = (_OWORD *)(a1 + 9520);
        v81 = *(_OWORD *)&v108[16];
        if (v4[1928])
        {
          *(_OWORD *)(a1 + 9584) = *(_OWORD *)v108;
          *(_OWORD *)(a1 + 9600) = v81;
          *(_OWORD *)(a1 + 9616) = v109;
          *(_QWORD *)(a1 + 9632) = v110;
          v82 = *(_OWORD *)&buf[16];
          *v80 = *(_OWORD *)buf;
          *(_OWORD *)(a1 + 9536) = v82;
          v83 = *(_OWORD *)&v107[16];
          *(_OWORD *)(a1 + 9552) = *(_OWORD *)v107;
          *(_OWORD *)(a1 + 9568) = v83;
        }
        else
        {
          *(_OWORD *)(a1 + 9584) = *(_OWORD *)v108;
          *(_OWORD *)(a1 + 9600) = v81;
          v84 = v110;
          *(_OWORD *)(a1 + 9616) = v109;
          *(_OWORD *)(a1 + 9632) = v84;
          v85 = *(_OWORD *)&buf[16];
          *v80 = *(_OWORD *)buf;
          *(_OWORD *)(a1 + 9536) = v85;
          v86 = *(_OWORD *)&v107[16];
          *(_OWORD *)(a1 + 9552) = *(_OWORD *)v107;
          *(_OWORD *)(a1 + 9568) = v86;
          v4[1928] = 1;
        }
        v87 = v116;
        *(_OWORD *)(a1 + 9744) = v117;
        v88 = v119;
        *(_OWORD *)(a1 + 9760) = v118;
        *(_OWORD *)(a1 + 9776) = v88;
        v89 = v112;
        *(_OWORD *)(a1 + 9680) = v113;
        v90 = v115;
        *(_OWORD *)(a1 + 9696) = v114;
        *(_OWORD *)(a1 + 9712) = v90;
        *(_OWORD *)(a1 + 9728) = v87;
        *(_OWORD *)(a1 + 9664) = v89;
        *(_BYTE *)(a1 + 9792) = v120;
        goto LABEL_63;
      }
LABEL_70:
      sub_10000BA44();
    }
LABEL_63:
    if (*v4)
    {
      if (*(double *)a2 >= *(double *)(a1 + 7712))
        sub_10035AFEC(a1 + 5504, a2);
    }
  }
}

void sub_10034A1A8(uint64_t a1, double *a2, int a3)
{
  BOOL v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  NSObject *v18;
  int v19;
  double *v20;
  int v21;
  double v22;
  double v23;
  char v24;
  double v25;
  NSObject *v26;
  double v27;
  double v28;
  __int128 v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  char v39;
  double v40;
  uint8_t buf[4];
  _BYTE v42[10];
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EEA24();
  v40 = 0.0;
  v6 = sub_10034F710(a1, &v40, a2[2]);
  v7 = qword_10085F520;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_DWORD *)a2 + 23);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v42 = v8;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,CL location type: %d,isPeer,%d", buf, 0xEu);
    }
    if ((a3 & 1) != 0)
    {
      v9 = *(int *)(a1 + 8272);
      if (v9 < 7 && ((0x5Fu >> v9) & 1) != 0)
      {
        v11 = dbl_10047B108[v9];
      }
      else
      {
        v10 = qword_10085F520;
        v11 = 20.0;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003EE92C(v9, v10);
      }
      v20 = (double *)(a1 + 8216);
      v21 = *(unsigned __int8 *)(a1 + 8264);
      if (*(_BYTE *)(a1 + 8264) && (v22 = *v20, v40 <= *v20))
      {
        v26 = qword_10085F520;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          return;
        v28 = v22;
        v27 = a2[7];
      }
      else
      {
        v23 = a2[7];
        if (v23 > 0.0 && v23 < v11)
        {
          v24 = *(_BYTE *)(a1 + 7848);
          v25 = v40;
          if (v24)
            v24 = vabdd_f64(*(double *)(a1 + 7832), v40) < 3.0 && *(_BYTE *)(a1 + 7840) != 0;
          v29 = *(_OWORD *)a2;
          v30 = *((_QWORD *)a2 + 5);
          if (!*(_BYTE *)(a1 + 8264))
            *(_BYTE *)(a1 + 8264) = 1;
          *(double *)(a1 + 8216) = v25;
          *(_OWORD *)(a1 + 8224) = v29;
          *(double *)(a1 + 8240) = v23;
          *(_QWORD *)(a1 + 8248) = v30;
          *(_BYTE *)(a1 + 8256) = v24;
          v31 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            sub_1003EE8A4(v31, (_BYTE *)(a1 + 8264), v32, v33, v34, v35, v36, v37);
          sub_100324A8C(a1 + 48, a1 + 8216);
          return;
        }
        v26 = qword_10085F520;
        if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          return;
        v27 = v23;
        if (v21)
          v28 = *v20;
        else
          v28 = -1.0;
      }
      *(_DWORD *)buf = 134218752;
      *(double *)v42 = v28;
      *(_WORD *)&v42[8] = 2048;
      v43 = v40;
      v44 = 2048;
      v45 = v27;
      v46 = 2048;
      v47 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,Not injecting peer location received via NI SPI; duplicate, staleness, or uncertainty che"
        "ck failed, last_timestamp,%.2lf,current_timestamp,%.2lf,hUnc,%.1lf,hUncThreshold,%.1lf",
        buf,
        0x2Au);
      return;
    }
    *(_DWORD *)(a1 + 8272) = *((_DWORD *)a2 + 24);
    if (*((_DWORD *)a2 + 23) == 1)
    {
      v12 = v40;
      if (!*(_BYTE *)(a1 + 8208) || v40 > *(double *)(a1 + 8160))
      {
        v13 = *(_QWORD *)a2;
        v14 = *((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 7);
        v16 = *((_QWORD *)a2 + 5);
        sub_10000BF04(__p, "Finder");
        v17 = sub_100353054(a1 + 7776, (uint64_t *)__p, v12);
        if (!*(_BYTE *)(a1 + 8208))
          *(_BYTE *)(a1 + 8208) = 1;
        *(double *)(a1 + 8160) = v12;
        *(_QWORD *)(a1 + 8168) = v13;
        *(_QWORD *)(a1 + 8176) = v14;
        *(_QWORD *)(a1 + 8184) = v15;
        *(_QWORD *)(a1 + 0x2000) = v16;
        *(_BYTE *)(a1 + 8200) = v17;
        if (v39 < 0)
          operator delete(__p[0]);
        v18 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *(_DWORD *)(a1 + 8272);
          *(_DWORD *)buf = 134218240;
          *(double *)v42 = v40;
          *(_WORD *)&v42[8] = 1024;
          LODWORD(v43) = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,Pass self location to CL arrow filter, timestamp: %f,signalEnv,%d", buf, 0x12u);
        }
        if (!*(_BYTE *)(a1 + 8208))
          sub_10000BA44();
        sub_100324B10(a1 + 48, (__int128 *)(a1 + 8160));
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
  {
    sub_1003EE99C(a3, v7);
  }
}

void sub_10034A5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10034A5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE __dst[384];
  _QWORD __src[49];

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EEA7C();
  v4 = 0;
  if (sub_10034F710(a1, (double *)&v4, *(double *)(a2 + 24)))
  {
    __src[0] = v4;
    *(_OWORD *)&__src[1] = *(_OWORD *)(a2 + 8);
    sub_100324AC8(a1 + 48, (uint64_t)__src);
    if (*(_BYTE *)(a1 + 8576))
    {
      if (*(_BYTE *)(a1 + 8512))
        sub_1003243D0(a1 + 48, (uint64_t)__src);
      else
        memset(__src, 0, 384);
      if (sub_10034A750(a1, (uint64_t)__src))
      {
        memcpy(__dst, __src, sizeof(__dst));
        sub_10033D44C(a1 + 448, __dst);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
  {
    sub_1003EEA50();
  }
}

uint64_t sub_10034A750(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  double *v5;
  double v6;
  int v7;
  double v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  float v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double v29;
  int v30;
  unint64_t v31;
  double v32;
  _BOOL4 v33;
  unsigned __int8 *v34;
  double v35;
  double *v36;
  BOOL v37;
  int v38;
  NSObject *v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  double v43;
  NSObject *v44;
  int v45;
  NSObject *v46;
  int v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  NSObject *v51;
  int v52;
  uint64_t v53;
  NSObject *v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  NSObject *v61;
  _BOOL4 v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v73;
  uint8_t buf[4];
  _BYTE v75[18];
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;

  if (!*(_BYTE *)(a2 + 208) || !*(_BYTE *)(a2 + 328) || !*(_BYTE *)(a2 + 192) || !*(_BYTE *)(a2 + 344))
  {
LABEL_142:
    v71 = a1 + 8872;
    goto LABEL_143;
  }
  v4 = (_BYTE *)(a1 + 7752);
  v5 = (double *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 32))
    v5 = (double *)(a2 + 16);
  v6 = *v5;
  v7 = *(unsigned __int8 *)(a1 + 8515);
  if (*(_BYTE *)(a1 + 8515))
  {
    sub_10030CF78(a1 + 4944, 1, (uint64_t)&v112);
    v7 = v124;
    v8 = 0.0;
    if ((_BYTE)v124)
    {
      sub_100322100(a1 + 8872, (uint64_t)&v112);
      v7 = v124;
      if ((_BYTE)v124)
      {
        v7 = 1;
        v8 = *(double *)&v113;
      }
    }
  }
  else
  {
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v8 = 0.0;
  }
  if (*(_BYTE *)(a2 + 192))
    v9 = *(float *)(a2 + 24);
  else
    v9 = INFINITY;
  v10 = v6 - v8;
  if (v7 && v10 < 5.0 && *((float *)&v113 + 2) < v9)
    v9 = *((float *)&v113 + 2);
  if (v10 >= 20.0)
    v7 = 0;
  if (*(_BYTE *)(a2 + 192) && v7)
  {
    v11 = fmax(v10, 0.0);
    v12 = fmax(*((float *)&v113 + 2) - (v11 + v11), 0.0);
    v13 = *(float *)(a2 + 24);
    v14 = v13 - (v11 * 0.5 + *((float *)&v113 + 2));
    v15 = v12 - v13;
    if (v14 >= v15)
      v15 = v14;
    *(double *)(a1 + 7744) = v15;
    *v4 = 1;
  }
  else if (*v4)
  {
    *v4 = 0;
  }
  v16 = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 7760) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 7768) = v16;
  if (!*(_BYTE *)(a1 + 8514) && !*(_BYTE *)(a1 + 8515))
  {
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    goto LABEL_33;
  }
  sub_10030AE88(a1 + 4944, (uint64_t)&v88);
  if (!(_BYTE)v100)
  {
LABEL_33:
    v17 = *(float *)(a2 + 24);
    goto LABEL_34;
  }
  v17 = *((float *)&v89 + 2);
LABEL_34:
  v18 = *(_DWORD *)(a1 + 8272) - 1;
  if (v18 < 6 && ((0x2Fu >> v18) & 1) != 0)
  {
    v19 = qword_10047B140[v18];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
      sub_1003EEC04();
    v19 = 2;
  }
  v20 = (char *)&unk_10047B010 + 64 * v19;
  if (v17 >= 12.5)
  {
    if (v17 >= 15.0)
    {
      if (v17 >= 17.5)
      {
        if (v17 >= 20.0)
        {
          if (v17 >= 25.0)
          {
            if (v17 >= 30.0)
            {
              v21 = 7;
              if (v17 < 35.0)
                v21 = 6;
            }
            else
            {
              v21 = 5;
            }
          }
          else
          {
            v21 = 4;
          }
        }
        else
        {
          v21 = 3;
        }
      }
      else
      {
        v21 = 2;
      }
    }
    else
    {
      v21 = 1;
    }
  }
  else
  {
    v21 = 0;
  }
  v22 = *(double *)(a2 + 336);
  if (!*(_BYTE *)(a2 + 344))
    v22 = INFINITY;
  v23 = *v4;
  v24 = -1.0;
  if (*v4)
    v24 = *(double *)(a1 + 7744);
  v25 = *(double *)&v20[8 * v21];
  v26 = v9;
  if (*(_BYTE *)(a2 + 120))
    v27 = *(double *)(a2 + 112);
  else
    v27 = -1.0;
  v28 = *(unsigned __int8 *)(a1 + 8305);
  if (*(_BYTE *)(a1 + 8305))
    v29 = 10.0;
  else
    v29 = 12.0;
  v30 = *(unsigned __int8 *)(a2 + 328);
  v31 = *(_QWORD *)(a2 + 320);
  if (*(_BYTE *)(a2 + 328))
    v32 = *(double *)(a2 + 320);
  else
    v32 = INFINITY;
  if (*v4)
    v33 = *(double *)(a1 + 7744) > dbl_10047AF80[v28 == 0];
  else
    v33 = 0;
  v34 = (unsigned __int8 *)(a1 + 8305);
  v35 = dbl_10047AF70[*(_BYTE *)(a1 + 8305) == 0];
  if (v29 > v26 || v32 > v35 || v25 * v22 > 30.0 || v33)
  {
    v73 = v25 * v22;
    v39 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      v40 = v31;
      v41 = 0xBFF0000000000000;
      if (!v30)
        v40 = 0xBFF0000000000000;
      if (*(_BYTE *)(a2 + 192))
        v42 = *(float *)(a2 + 24);
      else
        v42 = -1.0;
      if ((_BYTE)v124)
        v43 = *((float *)&v113 + 2);
      else
        v43 = -1.0;
      if (v23)
        v41 = *(_QWORD *)(a1 + 7744);
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)v75 = v40;
      *(_WORD *)&v75[8] = 2048;
      *(double *)&v75[10] = v42;
      v76 = 2048;
      v77 = v43;
      v78 = 2048;
      v79 = v26;
      v80 = 2048;
      v81 = v25;
      v82 = 2048;
      v83 = v73;
      v84 = 2048;
      v85 = v24 / v27;
      v86 = 2048;
      v87 = v41;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,rejecting CL solution,unc = %.1lf,CL range,%.1lf,rangeFilterRange,%.1lf,fusedRange,%.1lf,bearing_scale_factor,%.1lf,scaled_bearing_unc,%.1lf,abs_range_diff_range_unc,%.1lf,absClRangeMinusUWBRangeM,%.1lf", buf, 0x52u);
    }
    if (v29 > v26)
    {
      v44 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        v45 = *v34;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v75 = v45;
        *(_WORD *)&v75[4] = 2048;
        *(double *)&v75[6] = v26;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,#clcc,isLastSolFromCL,%d,RANGE_TO_CLOSE_TO_YIELD_CL_FAILURE,%.1lf", buf, 0x12u);
      }
    }
    if (v32 > v35)
    {
      v46 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        v47 = *v34;
        v48 = 0x7FF0000000000000;
        if (*(_BYTE *)(a2 + 328))
          v48 = *(_QWORD *)(a2 + 320);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v75 = v47;
        *(_WORD *)&v75[4] = 2048;
        *(_QWORD *)&v75[6] = v48;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,#clcc,isLastSolFromCL,%d,CL_ANGLE_UNCERTAINTY_FAILURE,%.1lf", buf, 0x12u);
      }
    }
    if (v73 > 30.0)
    {
      v49 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        v50 = *v34;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v75 = v50;
        *(_WORD *)&v75[4] = 2048;
        *(double *)&v75[6] = v73;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,#clcc,isLastSolFromCL,%d,CL_BEARING_UNCERTAINTY_FAILURE,%.1lf", buf, 0x12u);
      }
    }
    if (v33)
    {
      v51 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        v52 = *(unsigned __int8 *)(a1 + 8305);
        if (*v4)
          v53 = *(_QWORD *)(a1 + 7744);
        else
          v53 = 0;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v75 = v52;
        *(_WORD *)&v75[4] = 2048;
        *(_QWORD *)&v75[6] = v53;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,#clcc,isLastSolFromCL,%d,CL_UWB_RANGE_DIFFERENCE_FAILURE,%.1lf", buf, 0x12u);
      }
    }
    goto LABEL_142;
  }
  if (!*(_BYTE *)(a1 + 9504))
  {
    v54 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
    {
      if (*(_BYTE *)(a2 + 353))
        v55 = *(_BYTE *)(a2 + 352) == 0;
      else
        v55 = 1;
      v56 = !v55;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v75 = v28;
      *(_WORD *)&v75[4] = 1024;
      *(_DWORD *)&v75[6] = v56;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,#clcc,isLastSolFromCL,%d,No valid poses to perform arrow range cross check,producedInGoodEnvironmentalConditions,%d", buf, 0xEu);
    }
    if (*(_BYTE *)(a1 + 8664) && *(_BYTE *)(a2 + 353) && *(_BYTE *)(a2 + 352))
    {
      v57 = a1 + 8872;
      v58 = 1;
      goto LABEL_146;
    }
    goto LABEL_142;
  }
  v36 = (double *)(a1 + 9376);
  if (*(_BYTE *)(a1 + 8664))
  {
    if (*(_BYTE *)(a2 + 353))
      v37 = *(_BYTE *)(a2 + 352) == 0;
    else
      v37 = 1;
    v38 = !v37;
  }
  else
  {
    v38 = 0;
  }
  v59 = a1 + 8872;
  v60 = sub_100322490(v59, v36, a2, v28 != 0);
  if (v60)
  {
    if (v60 != 2)
      return 1;
    v61 = qword_10085F520;
    v62 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
    if (v38)
    {
      if (v62)
        sub_1003EEB10(v34, v61, v63);
      if ((sub_100322A28(v59) & 1) != 0)
        return 1;
      v58 = 1;
      v57 = v59;
LABEL_146:
      sub_100322A38(v57, 1);
      return v58;
    }
    if (v62)
      sub_1003EEB8C(v34, v61, v63);
    if (*v34)
      sub_100322410(v59);
    goto LABEL_139;
  }
  v64 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EEAA8((uint64_t)v34, v64, v65, v66, v67, v68, v69, v70);
  if (*v34)
    sub_100322410(v59);
  v58 = sub_100322A30(v59);
  if (((v58 ^ 1 | v38) & 1) == 0)
  {
LABEL_139:
    v71 = v59;
LABEL_143:
    sub_100322A38(v71, 0);
    return 0;
  }
  return v58;
}

void sub_10034B00C(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EEC30();
  if (*(_BYTE *)(a1 + 32))
    sub_100352FC0(a1 + 7776, a2, *(double *)(a1 + 8));
}

void sub_10034B078(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EEC5C(v2, v3, v4, v5, v6, v7, v8, v9);
  *(_BYTE *)(a1 + 8276) = 1;
}

void sub_10034B0D8(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  int v15;
  double v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  NSObject *v28;
  char v29;
  double v30;
  char v31;
  int v32;
  int v33;
  double v34;
  double v35;
  NSObject *v36;
  double v37;
  double v38;
  double v39;
  _OWORD *v40;
  NSObject *v41;
  int v42;
  double v43;
  NSObject *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  NSObject *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int128 v56;
  __int128 v57;
  double v58;
  uint64_t v59;
  double v60;
  NSObject *v61;
  int v62;
  int v63;
  _OWORD *v64;
  _OWORD *v65;
  double v66;
  uint64_t v67;
  char v68;
  double v69;
  char v70;
  uint64_t v71;
  char v72;
  NSObject *v73;
  double v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  NSObject *v78;
  NSObject *v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  BOOL v88;
  int v89;
  double v90;
  int v91;
  __int128 v92;
  double v93;
  NSObject *v94;
  double v95;
  double v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  NSObject *v105;
  int v106;
  __int128 v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  double v116;
  int v117;
  double v118;
  double v119;
  int v120;
  int v121;
  int v122;
  _OWORD v123[2];
  _QWORD v124[4];
  double v125;
  _BYTE buf[24];
  double v127;
  _BYTE v128[24];
  uint64_t v129;
  char v130;

  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EF000();
  v125 = 0.0;
  if (*(_BYTE *)(a2 + 128))
  {
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003EEF78(a2 + 120, v6, (_BYTE *)(a2 + 128), v7, v8, v9, v10, v11);
    sub_10034F6EC(a1, &v125, *(double *)(a2 + 120));
    goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(double *)(a1 + 8);
    v125 = v2;
    v19 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
      sub_1003EEF10(v19, v20, v21, v22, v23, v24, v25, v26);
LABEL_7:
    v13 = v125;
    *(double *)(a1 + 8488) = v125;
    *(_BYTE *)(a1 + 8496) = 1;
    v120 = *(unsigned __int8 *)(a2 + 16);
    if (*(_BYTE *)(a2 + 16))
    {
      v14 = *(double *)a2;
      v117 = *(_DWORD *)(a2 + 8);
      sub_10033F5DC(a1 + 448, v117, v13);
      sub_100324BE0(a1 + 48, (int *)(a2 + 8), v125);
      v15 = *(_DWORD *)(a2 + 8);
      v16 = 0.0;
      if (v15 == 2)
      {
        *(_DWORD *)(a1 + 8504) = 2;
        if (*(double *)a2 != 409.5 || !*(_BYTE *)(a1 + 8464) || *(double *)(a1 + 8456) != 409.5)
        {
          v122 = 0;
          v17 = 0;
          *(_QWORD *)(a1 + 8456) = *(_QWORD *)a2;
          *(_BYTE *)(a1 + 8464) = 1;
          v14 = v125 - *(double *)a2;
          goto LABEL_44;
        }
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003EEEE4();
LABEL_36:
        v122 = 0;
        v17 = 0;
LABEL_44:
        v118 = 0.0;
        goto LABEL_47;
      }
      if (v15 != 1)
      {
        if (!v15)
        {
          v17 = 1;
          *(_DWORD *)(a1 + 8504) = 1;
          if (*(double *)a2 == 409.5
            && *(_BYTE *)(a1 + 8464)
            && *(double *)(a1 + 8456) == 409.5
            && *(_BYTE *)(a1 + 7688))
          {
            v18 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,Received bounded displacement with max enter timestamp again.", buf, 2u);
              v17 = *(unsigned __int8 *)(a1 + 7688);
              if (!*(_BYTE *)(a1 + 7688))
                sub_10000BA44();
            }
            v122 = 0;
            v14 = *(double *)(a1 + 7680);
          }
          else
          {
            *(_QWORD *)(a1 + 8456) = *(_QWORD *)a2;
            *(_BYTE *)(a1 + 8464) = 1;
            v14 = v125 - *(double *)a2;
            if (*(_BYTE *)(a1 + 7688)
              && (v12 = *(_BYTE *)(a1 + 40) == 0,
                  v2 = *(double *)(a1 + 7680),
                  v14 - v2 > dbl_10047AF90[*(_BYTE *)(a1 + 40) == 0]))
            {
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
                sub_1003EEE80();
              v122 = 0;
              *(double *)(a1 + 7680) = v14;
              *(_BYTE *)(a1 + 7688) = 1;
            }
            else
            {
              v122 = 0;
            }
          }
          v118 = 0.0;
          v16 = v14;
          goto LABEL_47;
        }
        goto LABEL_36;
      }
      v12 = 1;
      v122 = 1;
      *(_DWORD *)(a1 + 8504) = 1;
      if (*(double *)a2 == 409.5 && *(_BYTE *)(a1 + 8464) && *(double *)(a1 + 8456) == 409.5)
      {
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          sub_1003EEEE4();
        v17 = 0;
        v118 = *(double *)(a1 + 7696);
        v122 = *(unsigned __int8 *)(a1 + 7704);
      }
      else
      {
        v17 = 0;
        *(_QWORD *)(a1 + 8456) = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8464) = 1;
        v14 = v125 - *(double *)a2;
        v118 = v14;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 8464))
        *(_BYTE *)(a1 + 8464) = 0;
      v122 = 0;
      v17 = 0;
      *(_DWORD *)(a1 + 8504) = 0;
      v14 = 0.0;
      v118 = 0.0;
      v16 = 0.0;
    }
LABEL_47:
    if (!*(_BYTE *)(a2 + 72))
    {
      v30 = 0.0;
      v31 = 0;
      v121 = 0;
      v32 = 0;
      if (*(_BYTE *)(a1 + 8480))
        *(_BYTE *)(a1 + 8480) = 0;
      v37 = 0.0;
      v119 = 0.0;
LABEL_107:
      if (v120)
      {
        *(double *)buf = v14;
        *(_DWORD *)&buf[8] = v117;
        *(double *)&buf[16] = v30;
        v127 = v116;
        *(_DWORD *)v128 = v12;
        *(double *)&v128[8] = v2;
        *(_QWORD *)&v128[16] = v3;
        v129 = 0;
        v130 = v31;
        v62 = sub_10033629C((unsigned int *)(a1 + 6000), (uint64_t)buf);
        *(_DWORD *)(a1 + 6152) = v62;
        *(_BYTE *)(a1 + 6156) = 1;
        switch(v62)
        {
          case 2:
            sub_10034C38C(a1);
            sub_10030D7D4(a1 + 4944, 0);
            break;
          case 1:
            sub_10030D7D4(a1 + 4944, 0);
            break;
          case 0:
            sub_10034C38C(a1);
            break;
        }
      }
      if (!*(_BYTE *)(a2 + 112))
        goto LABEL_127;
      v63 = v17;
      v64 = (_OWORD *)(a2 + 80);
      v65 = (_OWORD *)(a1 + 8400);
      if (*(_BYTE *)(a1 + 8432))
      {
        if (*(_BYTE *)(a1 + 8376))
        {
          v66 = v125 - *(double *)(a2 + 88) - *(double *)(a1 + 8368);
          *(double *)&v67 = COERCE_DOUBLE(sub_10034769C(*(double *)(a2 + 96), *(double *)(a1 + 8416), v66, -6.4, 6.35, 0.05, 10.0));
          if (!*(_BYTE *)(a2 + 112))
            sub_10000BA44();
          v69 = *(double *)&v67;
          v70 = v68;
          *(double *)&v71 = COERCE_DOUBLE(sub_10034769C(*(double *)(a2 + 104), *(double *)(a1 + 8424), v66, -6.4, 6.35, 0.05, 10.0));
          if (v66 >= 0.0)
          {
            if (v70 && v72)
            {
              if (!*(_BYTE *)(a2 + 112))
                sub_10000BA44();
              v90 = *(double *)&v71;
              v91 = *(unsigned __int8 *)(a1 + 8432);
              v92 = *(_OWORD *)(a2 + 96);
              *v65 = *v64;
              *(_OWORD *)(a1 + 8416) = v92;
              if (!v91)
                *(_BYTE *)(a1 + 8432) = 1;
              if (!*(_BYTE *)(a2 + 112))
                sub_10000BA44();
              v17 = v63;
              v93 = v125;
              *(double *)(a1 + 8368) = v125 - *(double *)(a2 + 88);
              *(_BYTE *)(a1 + 8376) = 1;
              v94 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
              {
                if (!*(_BYTE *)(a2 + 112))
                  sub_10000BA44();
                v95 = v93 - *(double *)(a2 + 88);
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v69;
                *(_WORD *)&buf[12] = 2048;
                *(double *)&buf[14] = v90;
                *(_WORD *)&buf[22] = 2048;
                v127 = v66;
                *(_WORD *)v128 = 2048;
                *(double *)&v128[2] = v95;
                _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeePDR Received delta velocity, delta x: %f, delta z: %f, delta t: %f, app time: %f", buf, 0x2Au);
              }
              v96 = v69;
              *(double *)(a1 + 8440) = *(double *)(a1 + 8440) + v69;
              *(double *)(a1 + 8448) = *(double *)(a1 + 8448) + v90;
              v97 = (_QWORD *)std::ostream::operator<<(&std::cout);
              v98 = sub_100054C60(v97, (uint64_t)", ", 2);
              v99 = (_QWORD *)std::ostream::operator<<(v98);
              sub_10034C4A8(v99);
              v100 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
              {
                v101 = *(_QWORD *)(a1 + 8440);
                v102 = *(_QWORD *)(a1 + 8448);
                v103 = *(double *)(a1 + 8416);
                v104 = *(_QWORD *)(a1 + 8424);
                *(_DWORD *)buf = 134218752;
                *(_QWORD *)&buf[4] = v101;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v102;
                *(_WORD *)&buf[22] = 2048;
                v127 = v103;
                *(_WORD *)v128 = 2048;
                *(_QWORD *)&v128[2] = v104;
                _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeePDRtest Integrated velocity, H1: %f, H2: %f, true velocity H1: %f, H2: %f", buf, 0x2Au);
              }
              if (!*(_BYTE *)(a2 + 112))
                sub_10000BA44();
              sub_10033DEE4(a1 + 448, v96, v90, v125 - *(double *)(a2 + 88), v66);
            }
            else
            {
              v105 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeePDR Invalid overflow detected in received delta velocity", buf, 2u);
              }
              if (!*(_BYTE *)(a2 + 112))
                sub_10000BA44();
              v106 = *(unsigned __int8 *)(a1 + 8432);
              v107 = *(_OWORD *)(a2 + 96);
              *v65 = *v64;
              *(_OWORD *)(a1 + 8416) = v107;
              if (!v106)
                *(_BYTE *)(a1 + 8432) = 1;
              if (!*(_BYTE *)(a2 + 112))
                sub_10000BA44();
              v17 = v63;
              *(double *)(a1 + 8368) = v125 - *(double *)(a2 + 88);
              *(_BYTE *)(a1 + 8376) = 1;
            }
          }
          else
          {
            v73 = qword_10085F520;
            v17 = v63;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
            {
              if (!*(_BYTE *)(a2 + 112))
                sub_10000BA44();
              if (!*(_BYTE *)(a1 + 8376))
                sub_10000BA44();
              *(double *)&buf[4] = v125;
              v74 = *(double *)(a2 + 88);
              v75 = *(_QWORD *)(a1 + 8368);
              *(_DWORD *)buf = 134218752;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v74;
              *(_WORD *)&buf[22] = 2048;
              v127 = v125 - v74;
              *(_WORD *)v128 = 2048;
              *(_QWORD *)&v128[2] = v75;
              _os_log_error_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "#findalgs-peoplefinder,negative delta T, last range time: %f, app time: %f, curr timestamp: %f, last timestamp: %f ", buf, 0x2Au);
            }
          }
LABEL_127:
          if ((v17 != 0) != (*(_BYTE *)(a1 + 7688) != 0))
          {
            *(double *)(a1 + 7680) = v16;
            *(_BYTE *)(a1 + 7688) = v17;
          }
          if ((v122 != 0) != (*(_BYTE *)(a1 + 7704) != 0))
          {
            *(double *)(a1 + 7696) = v118;
            *(_BYTE *)(a1 + 7704) = v122;
            if (!sub_1003478E0(a1))
            {
              v78 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = v122 != 0;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v17 != 0;
                _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,reinitializing particle filter. FindeeSlowlyMoving: %d, findeeStatic: %d", buf, 0xEu);
              }
              sub_10033BECC(a1 + 448);
            }
          }
          if ((v32 != 0) != (*(_BYTE *)(a1 + 7720) != 0))
          {
            *(double *)(a1 + 7712) = v119;
            *(_BYTE *)(a1 + 7720) = v32;
            if (!v32)
            {
              v79 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeeVIO Lost findee VIO stream - resetting filter", buf, 2u);
              }
              sub_10034C284(a1);
            }
          }
          if ((v121 != 0) != (*(_BYTE *)(a1 + 7736) != 0))
          {
            *(double *)(a1 + 7728) = v37;
            *(_BYTE *)(a1 + 7736) = v121;
          }
          v80 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            sub_1003EECF0(a2, v80, v81, v82, v83, v84, v85, v86);
          v87 = *(_OWORD *)(a2 + 152);
          v123[0] = *(_OWORD *)(a2 + 136);
          v123[1] = v87;
          if (*(_BYTE *)(a2 + 169))
            v88 = *(_BYTE *)(a2 + 168) == 0;
          else
            v88 = 1;
          v89 = !v88;
          sub_10034C538(a1, (uint64_t)v123, v89, v125);
          return;
        }
        v77 = *(_OWORD *)(a2 + 96);
        *v65 = *v64;
        *(_OWORD *)(a1 + 8416) = v77;
      }
      else
      {
        v76 = *(_OWORD *)(a2 + 96);
        *v65 = *v64;
        *(_OWORD *)(a1 + 8416) = v76;
        *(_BYTE *)(a1 + 8432) = 1;
      }
      if (!*(_BYTE *)(a2 + 112))
        sub_10000BA44();
      v17 = v63;
      *(double *)(a1 + 8368) = v125 - *(double *)(a2 + 88);
      *(_BYTE *)(a1 + 8376) = 1;
      *(_OWORD *)(a1 + 8440) = *(_OWORD *)(a1 + 8416);
      goto LABEL_127;
    }
    v27 = (double *)(a2 + 24);
    v2 = *(double *)(a2 + 24);
    if (v2 == 409.5)
    {
      v12 = *(unsigned __int8 *)(a1 + 8480);
      if (!*(_BYTE *)(a1 + 8480))
      {
        v29 = 0;
        v2 = 409.5;
        goto LABEL_58;
      }
      v2 = 409.5;
      if (*(double *)(a1 + 8472) == 409.5)
      {
        v28 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,Received measured displacement with maximum enter timestamp.", buf, 2u);
          v2 = *v27;
        }
        v29 = 1;
LABEL_58:
        *(double *)(a1 + 8472) = v2;
        *(_BYTE *)(a1 + 8480) = 1;
        v33 = *(_DWORD *)(a2 + 40);
        v119 = 0.0;
        if (v33 != 1)
        {
          if (v33)
          {
            v31 = 0;
            v121 = 0;
            v32 = 0;
LABEL_106:
            v30 = 0.0;
            v37 = 0.0;
            goto LABEL_107;
          }
          v34 = v125;
          v35 = *(double *)(a2 + 32);
          if ((v29 & 1) != 0)
          {
            v119 = *(double *)(a1 + 7712);
            v32 = *(unsigned __int8 *)(a1 + 7720);
          }
          else
          {
            v39 = v125 - *v27;
            v119 = v39;
            if (*(_BYTE *)(a1 + 7720))
            {
              if (v39 - *(double *)(a1 + 7712) <= dbl_10047AF90[*(_BYTE *)(a1 + 40) == 0])
              {
                v32 = 1;
                goto LABEL_100;
              }
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
                sub_1003EED68();
              sub_10034C284(a1);
              sub_1003417F4((_QWORD *)(a1 + 448));
              *(double *)(a1 + 7712) = v119;
            }
            else
            {
              *(double *)(a1 + 7712) = v39;
            }
            v32 = 1;
            *(_BYTE *)(a1 + 7720) = 1;
          }
LABEL_100:
          v58 = v34 - v35;
          v59 = *(_QWORD *)(a2 + 56);
          v2 = *(double *)(a2 + 64);
          v60 = *(double *)(a2 + 48);
          v61 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            if (!v32)
              sub_10000BA44();
            *(_DWORD *)buf = 134219008;
            *(double *)&buf[4] = v58;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v59;
            *(_WORD *)&buf[22] = 2048;
            v127 = v2;
            *(_WORD *)v128 = 2048;
            *(double *)&v128[2] = v60;
            *(_WORD *)&v128[10] = 2048;
            *(double *)&v128[12] = v119;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeeVIO Got findee VIO at %lf s, x=%lf y=%lf z=%lf, startTime %lf s", buf, 0x34u);
            v61 = qword_10085F520;
          }
          *(double *)v124 = v58;
          v124[1] = v59;
          *(double *)&v124[2] = v2;
          *(double *)&v124[3] = v60;
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218752;
            *(double *)&buf[4] = v58;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v59;
            *(_WORD *)&buf[22] = 2048;
            v127 = v2;
            *(_WORD *)v128 = 2048;
            *(double *)&v128[2] = v60;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeeVIO Passing peer pose to filter, timestamp: %f s, peer position:[%0.2f,%0.2f,%0.2f]", buf, 0x2Au);
          }
          sub_10035C948(a1 + 5504, (uint64_t)v124);
          *(double *)buf = v58;
          *(_QWORD *)&buf[8] = v59;
          *(double *)&buf[16] = v2;
          v127 = v60;
          sub_100341A0C(a1 + 448, (uint64_t)buf);
          v31 = 0;
          v121 = 0;
          goto LABEL_106;
        }
        v36 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,Got PDR data", buf, 2u);
        }
        if ((v29 & 1) != 0)
        {
          v37 = *(double *)(a1 + 7728);
          v121 = *(unsigned __int8 *)(a1 + 7736);
          if (!*(_BYTE *)(a1 + 7736))
          {
            v121 = 0;
            v31 = 0;
            v30 = 0.0;
LABEL_76:
            v40 = (_OWORD *)(a1 + 8312);
            if (!*(_BYTE *)(a1 + 8360))
            {
              v53 = *(_OWORD *)v27;
              v54 = *(_OWORD *)(a2 + 56);
              *(_OWORD *)(a1 + 8328) = *(_OWORD *)(a2 + 40);
              *(_OWORD *)(a1 + 8344) = v54;
              *v40 = v53;
              goto LABEL_94;
            }
            if (!*(_BYTE *)(a1 + 8376))
            {
LABEL_93:
              v55 = *(unsigned __int8 *)(a1 + 8360);
              v57 = *(_OWORD *)(a2 + 40);
              v56 = *(_OWORD *)(a2 + 56);
              *v40 = *(_OWORD *)v27;
              *(_OWORD *)(a1 + 8328) = v57;
              *(_OWORD *)(a1 + 8344) = v56;
              if (v55)
              {
LABEL_95:
                v32 = 0;
                *(double *)(a1 + 8368) = v125 - *(double *)(a2 + 32);
                *(_BYTE *)(a1 + 8376) = 1;
                v12 = v115;
                goto LABEL_107;
              }
LABEL_94:
              *(_BYTE *)(a1 + 8360) = 1;
              goto LABEL_95;
            }
            v41 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
            {
              v108 = *(_QWORD *)(a2 + 32);
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v108;
              _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,measured applicability: %f", buf, 0xCu);
              v41 = qword_10085F520;
              v42 = *(unsigned __int8 *)(a1 + 8376);
            }
            else
            {
              v42 = 1;
            }
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              if (!v42)
                sub_10000BA44();
              v109 = v125 - *(double *)(a2 + 32);
              v110 = *(_QWORD *)(a1 + 8368);
              *(_DWORD *)buf = 134218240;
              *(double *)&buf[4] = v109;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v110;
              _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,measured applicability with offset: %f, last timestamp: %f ", buf, 0x16u);
              if (*(_BYTE *)(a1 + 8376))
                goto LABEL_82;
            }
            else if (v42)
            {
LABEL_82:
              v43 = v125 - *(double *)(a2 + 32) - *(double *)(a1 + 8368);
              v44 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
                sub_1003EEDF8(a2, v44, v43);
              v114 = v17;
              v112 = sub_10034769C(*(double *)(a2 + 48), *(double *)(a1 + 8336), v43, -409.6, 409.5, 0.1, 2.0);
              v46 = v45;
              *(double *)&v113 = COERCE_DOUBLE(sub_10034769C(*(double *)(a2 + 56), *(double *)(a1 + 8344), v43, -409.6, 409.5, 0.1, 2.0));
              v48 = v47;
              v49 = sub_10034769C(*(double *)(a2 + 64), *(double *)(a1 + 8352), v43, -25.6, 25.5, 0.1, 2.0);
              v51 = qword_10085F520;
              if (v46 && v48 && v50)
              {
                v111 = v49;
                v17 = v114;
                if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
                {
                  v52 = *(_QWORD *)(a2 + 32);
                  *(_DWORD *)buf = 134219008;
                  *(_QWORD *)&buf[4] = v112;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v111;
                  *(_WORD *)&buf[22] = 2048;
                  v127 = *(double *)&v113;
                  *(_WORD *)v128 = 2048;
                  *(double *)&v128[2] = v43;
                  *(_WORD *)&v128[10] = 2048;
                  *(_QWORD *)&v128[12] = v52;
                  _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeePDR Computed delta postion, x: %f, z: %f, y: %f, deltaT: %f, app time: %f", buf, 0x34u);
                }
                sub_100341EE0(a1 + 448, *(double *)&v112, *(double *)&v113, 0.0, v125 - *(double *)(a2 + 32), v43);
              }
              else
              {
                v17 = v114;
                if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
                  sub_1003EEDCC();
              }
              goto LABEL_93;
            }
            sub_10000BA44();
          }
          v38 = v125;
        }
        else
        {
          v38 = v125;
          v37 = v125 - *v27;
          v121 = 1;
        }
        v116 = v38 - *(double *)(a2 + 32);
        v115 = *(_DWORD *)(a2 + 40);
        v2 = *(double *)(a2 + 48);
        v3 = *(_QWORD *)(a2 + 56);
        v31 = 1;
        v30 = v37;
        goto LABEL_76;
      }
    }
    v29 = 0;
    goto LABEL_58;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EECC4();
}

void sub_10034C284(uint64_t a1)
{
  _BYTE v2[384];
  _OWORD __src[24];

  if (*(_BYTE *)(a1 + 8516))
  {
    sub_10035CEA0(a1 + 5504, (uint64_t)__src);
    if (LOBYTE(__src[13]))
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EF02C();
      memcpy(v2, __src, sizeof(v2));
      sub_10033CAA4(a1 + 448, v2);
    }
  }
  else
  {
    memset(__src, 0, sizeof(__src));
  }
  sub_10035B828(a1 + 5504);
}

void sub_10034C38C(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  _BYTE v4[384];
  _OWORD __src[24];

  v2 = a1 + 8514;
  if (*(_BYTE *)(a1 + 8514))
  {
    sub_10030AE88(a1 + 4944, (uint64_t)__src);
    if (*(_BYTE *)(v2 + 63))
      v3 = 1;
    else
      v3 = LOBYTE(__src[13]) == 0;
    if (!v3)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EF058();
      memcpy(v4, __src, sizeof(v4));
      sub_10033CAA4(a1 + 448, v4);
    }
  }
  else
  {
    memset(__src, 0, sizeof(__src));
  }
  sub_10030D7D4(a1 + 4944, 1);
}

_QWORD *sub_10034C4A8(_QWORD *a1)
{
  const std::locale::facet *v2;
  uint64_t v3;
  std::locale v5;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v5, &std::ctype<char>::id);
  v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v5);
  std::ostream::put(a1, v3);
  std::ostream::flush(a1);
  return a1;
}

void sub_10034C524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_10034C538(uint64_t a1, uint64_t a2, int a3, double a4)
{
  NSObject *v8;
  unsigned int v9;
  long double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  double v17[2];
  __int128 v18;
  _BYTE __dst[384];
  _OWORD __src[24];

  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EF084(a2, a1, v8);
  if (*(_BYTE *)(a2 + 24) && *(_BYTE *)(a1 + 8208))
  {
    v9 = *(_DWORD *)(a2 + 16);
    v18 = *(_OWORD *)a2;
    v17[0] = sub_100030318(*(double *)(a1 + 8168));
    if (!*(_BYTE *)(a1 + 8208))
      goto LABEL_19;
    v17[1] = sub_100030318(*(double *)(a1 + 8176));
    v10 = sub_100357EC0(v9);
    v11 = sub_100357D4C(v17, (double *)&v18);
    v13 = v12;
    v14 = sub_100030334(v11);
    v15 = sub_100030334(v13);
    if (!*(_BYTE *)(a1 + 8264))
      *(_BYTE *)(a1 + 8264) = 1;
    *(double *)(a1 + 8216) = a4;
    *(double *)(a1 + 8224) = v14;
    *(double *)(a1 + 8232) = v15;
    *(long double *)(a1 + 8240) = v10;
    *(_QWORD *)(a1 + 8248) = 0;
    *(_BYTE *)(a1 + 8256) = a3;
    v16 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__src[0]) = 134218496;
      *(double *)((char *)__src + 4) = a4;
      WORD6(__src[0]) = 2048;
      *(long double *)((char *)__src + 14) = v10;
      WORD3(__src[1]) = 1024;
      DWORD2(__src[1]) = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,#gri,findee,Pass peer location from UWB pipe to CL arrow filter, timestamp: %f, horUncM, %.1lf, goodGnssSignalConditions, %d", (uint8_t *)__src, 0x1Cu);
      if (!*(_BYTE *)(a1 + 8264))
LABEL_19:
        sub_10000BA44();
    }
    sub_100324A8C(a1 + 48, a1 + 8216);
    if (!*(_BYTE *)(a1 + 7848))
      *(_BYTE *)(a1 + 7848) = 1;
    *(double *)(a1 + 7832) = a4;
    *(_BYTE *)(a1 + 7840) = a3;
    if (*(_BYTE *)(a1 + 8576))
    {
      if (*(_BYTE *)(a1 + 8512))
        sub_1003243D0(a1 + 48, (uint64_t)__src);
      else
        memset(__src, 0, sizeof(__src));
      if (sub_10034A750(a1, (uint64_t)__src))
      {
        memcpy(__dst, __src, sizeof(__dst));
        sub_10033D44C(a1 + 448, __dst);
      }
    }
  }
}

uint64_t sub_10034C7AC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v5;

  result = sub_100347010((int *)(a1 + 9892), a3);
  if (result > 3)
  {
    v5 = 0;
  }
  else
  {
    v5 = qword_10047B170[(int)result];
    *(_DWORD *)(a2 + 372) = dword_10047AFA0[(int)result];
    *(_BYTE *)(a2 + 376) = 1;
  }
  *(_QWORD *)a2 = v5;
  return result;
}

uint64_t sub_10034C810(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  float v4;
  BOOL v5;
  double v9;
  __double2 v10;
  float v11;
  float v12;
  simd_float2x2 v13;
  float32x2_t v14;
  uint64_t v15;
  float v17;
  float v18;
  simd_float2x2 v19;

  if (a3[5].i32[0] != 2)
    return 0;
  v4 = *(float *)(a2 + 24);
  v5 = !*(_BYTE *)(a2 + 208) || *(_BYTE *)(a2 + 192) == 0;
  if (v5 || v4 == 1.1755e-38)
    return 0;
  v9 = v4;
  v10 = __sincos_stret(*(double *)(a2 + 200) * 3.14159265 / 180.0);
  v11 = v10.__cosval * v9;
  v12 = v10.__sinval * v9;
  v17 = v11;
  v18 = v12;
  v19.columns[0] = (simd_float2)sub_10030D5BC(a3);
  v13 = __invert_f2(v19);
  v14 = vmla_n_f32(vmul_n_f32((float32x2_t)v13.columns[0], v17), (float32x2_t)v13.columns[1], v18);
  *(float *)&v15 = a3[4].f32[0] + v14.f32[1];
  HIDWORD(v15) = a3[4].i32[1];
  *(float *)(a4 + 8) = a3[4].f32[2] + v14.f32[0];
  *(_QWORD *)a4 = v15;
  return 1;
}

uint64_t sub_10034C8F4()
{
  return 1;
}

uint64_t sub_10034C8FC()
{
  return 0;
}

uint64_t sub_10034C904()
{
  return 1;
}

uint64_t sub_10034C90C()
{
  return 1;
}

uint64_t sub_10034C914()
{
  return 1;
}

uint64_t sub_10034C91C()
{
  return 0;
}

uint64_t sub_10034C924()
{
  return 1;
}

uint64_t sub_10034C92C()
{
  return 1;
}

uint64_t sub_10034C934()
{
  return 1;
}

uint64_t sub_10034C93C()
{
  return 1;
}

uint64_t sub_10034C944()
{
  return 1;
}

uint64_t sub_10034C94C()
{
  return 1;
}

uint64_t sub_10034C954()
{
  return 1;
}

uint64_t sub_10034C95C()
{
  return 1;
}

uint64_t sub_10034C964()
{
  return 0;
}

uint64_t sub_10034C96C()
{
  return 0;
}

uint64_t sub_10034C974()
{
  return 0;
}

uint64_t sub_10034C97C()
{
  return 1;
}

uint64_t sub_10034C984()
{
  return 1;
}

uint64_t sub_10034C98C()
{
  return 1;
}

uint64_t sub_10034C994()
{
  return 0;
}

uint64_t sub_10034C99C()
{
  return 0;
}

void sub_10034C9A8(uint64_t a1)
{
  sub_10034CDE4(a1);
  operator delete();
}

uint64_t sub_10034C9CC(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 28;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 56;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10003A428((uint64_t)a1);
}

uint64_t sub_10034CA60(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 18;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 36;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10003A428((uint64_t)a1);
}

uint64_t sub_10034CAF4(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 13;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 26;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10003A428((uint64_t)a1);
}

void sub_10034CB88(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  if (a2)
  {
    *(_QWORD *)(a2 + 496) = off_100807398;
    *(_QWORD *)(a2 + 424) = off_100807398;
    v5 = (void **)(a2 + 360);
    sub_10031909C(&v5);
    *(_QWORD *)(a2 + 240) = off_100807398;
    *(_QWORD *)(a2 + 160) = off_100807398;
    *(_QWORD *)(a2 + 96) = off_100807398;
    v5 = (void **)(a2 + 72);
    sub_100319040(&v5);
    v3 = *(void **)(a2 + 40);
    if (v3)
    {
      *(_QWORD *)(a2 + 48) = v3;
      operator delete(v3);
    }
    v4 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v4;
      operator delete(v4);
    }
    operator delete();
  }
}

uint64_t sub_10034CC24(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_10003A394((_QWORD *)(a1 + 4440));
  sub_100152A44((_QWORD *)(a1 + 4304));
  sub_100346690((_QWORD *)(a1 + 4024));
  sub_100144AAC((_QWORD *)(a1 + 3976));
  sub_10034CCA4((_QWORD *)(a1 + 3640));
  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_10034CCA4(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x49];
    v7 = (unint64_t)v2[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if ((char *)*v6 + 56 * (v5 % 0x49) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 56 * (v5 % 0x49));
      do
      {
        v9 = *v8;
        v8 += 7;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 4088)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 36;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_17;
    v13 = 73;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_10003A428((uint64_t)a1);
}

uint64_t sub_10034CDE4(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void **v9;

  v2 = (_BYTE *)(a1 + 5072);
  *(_QWORD *)a1 = off_1008166F0;
  sub_10003A394((_QWORD *)(a1 + 9312));
  sub_10034C9CC((_QWORD *)(a1 + 8880));
  sub_10034CF88((_QWORD *)(a1 + 8096));
  sub_10034CF88((_QWORD *)(a1 + 8048));
  if (v2[2736])
  {
    v3 = *(void **)(a1 + 7776);
    if (v3)
    {
      *(_QWORD *)(a1 + 7784) = v3;
      operator delete(v3);
    }
  }
  sub_10003A394((_QWORD *)(a1 + 7632));
  sub_10034CA60((_QWORD *)(a1 + 7200));
  sub_10003A394((_QWORD *)(a1 + 6928));
  sub_10003A394((_QWORD *)(a1 + 6880));
  sub_10003A394((_QWORD *)(a1 + 6256));
  sub_10003A394((_QWORD *)(a1 + 6208));
  sub_100346690((_QWORD *)(a1 + 5944));
  sub_10003A394((_QWORD *)(a1 + 5872));
  sub_10034CAF4((_QWORD *)(a1 + 5824));
  if (v2[552])
  {
    v4 = *(void **)(a1 + 5592);
    if (v4)
    {
      *(_QWORD *)(a1 + 5600) = v4;
      operator delete(v4);
    }
  }
  v5 = *(_QWORD *)(a1 + 5568);
  *(_QWORD *)(a1 + 5568) = 0;
  if (v5)
    sub_10034CB88(a1 + 5568, v5);
  v9 = (void **)(a1 + 5472);
  sub_1002F190C(&v9);
  sub_10003A394((_QWORD *)(a1 + 5400));
  v6 = *(_QWORD **)(a1 + 5080);
  *(_QWORD *)(a1 + 5080) = 0;
  if (v6)
  {
    v6[21] = off_100807398;
    v6[13] = off_100807398;
    v6[5] = off_100807398;
    operator delete();
  }
  if (*v2)
  {
    v7 = *(void **)(a1 + 5040);
    if (v7)
    {
      *(_QWORD *)(a1 + 5048) = v7;
      operator delete(v7);
    }
  }
  sub_1002F1998((uint64_t *)(a1 + 5016), 0);
  sub_10034CC24(a1 + 448);
  return a1;
}

uint64_t sub_10034CF88(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 11;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 22;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10003A428((uint64_t)a1);
}

void sub_10034D01C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x16;
  v4 = v2 - 22;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFD0uLL);
      sub_1001389D0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFD0uLL);
    sub_100138AE4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10005538C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10005538C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFD0uLL);
  sub_100138C00(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100138D14((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10034D2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10034D330(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x16)
    a2 = 1;
  if (v2 < 0x2C)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 22;
  }
  return v4 ^ 1u;
}

uint64_t sub_10034D38C(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 22 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x16)
    a2 = 1;
  if (v5 < 0x2C)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *sub_10034D400(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x2C8590B21642C859 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 21 - v3;
      v6 = &v2[-(v5 / 0x16)];
      *result = v6;
      v4 = *v6 + 184 * (22 * (v5 / 0x16) - v5) + 3864;
    }
    else
    {
      *result = &v2[v3 / 0x16];
      v4 = v2[v3 / 0x16] + 184 * (v3 % 0x16);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_10034D4B4@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_10034D580(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4048;
    }
    v18 = *a1 + 4048;
    v19 = a2;
  }
  sub_10034D580(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10034D580@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xD37A6F4DE9BD37A7 * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xD37A6F4DE9BD37A7 * ((v11 - a1) >> 3)) < v12)
        v12 = 0xD37A6F4DE9BD37A7 * ((v11 - a1) >> 3);
      v11 -= 184 * v12;
      a4 -= 184 * v12;
      if (v12)
        result = memmove(a4, v11, 184 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4048);
    }
    if ((char *)(*v6 + 4048) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10034D660(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4048); ; i = v12 + 4048)
    {
      sub_10034D6F0(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_10034D6F0(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10034D6F0@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xD37A6F4DE9BD37A7 * ((v10 - __dst + 4048) >> 3);
      v12 = (uint64_t)(0xD37A6F4DE9BD37A7 * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xD37A6F4DE9BD37A7 * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 184 * v12);
      v7 += 184 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 184 * v12;
    if ((char *)*(v6 - 1) + 4048 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_10034D7DC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xEu);
}

uint64_t sub_10034D7F0()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10085E5E0 = 0;
  qword_10085E5E8 = 0;
  qword_10085E5F0 = 0;
  v0 = operator new(0x40uLL);
  qword_10085E5E8 = (uint64_t)(v0 + 4);
  qword_10085E5F0 = (uint64_t)(v0 + 4);
  *v0 = xmmword_10047AFC0;
  v0[1] = unk_10047AFD0;
  v0[2] = xmmword_10047AFE0;
  v0[3] = unk_10047AFF0;
  qword_10085E5E0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085E5E0, (void *)&_mh_execute_header);
  qword_10085E600 = 0;
  unk_10085E608 = 0;
  qword_10085E5F8 = 0;
  v1 = operator new(0x10uLL);
  qword_10085E600 = (uint64_t)(v1 + 1);
  unk_10085E608 = v1 + 1;
  *v1 = xmmword_10047B000;
  qword_10085E5F8 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085E5F8, (void *)&_mh_execute_header);
}

void sub_10034D8AC(uint64_t a1, double a2, double a3)
{
  double v5;
  unint64_t v6;
  unint64_t v7;
  double v8;

  v8 = a2;
  if (*(_BYTE *)(a1 + 32) && a3 - *(double *)(a1 + 24) > *(double *)(a1 + 8))
    sub_10034D97C(a1);
  sub_1001CF89C((_QWORD *)(a1 + 40), &v8);
  v5 = v8 + *(double *)(a1 + 16);
  *(double *)(a1 + 16) = v5;
  *(double *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 32) = 1;
  v6 = *(_QWORD *)(a1 + 80);
  if (*(double *)a1 < (double)v6)
  {
    v7 = *(_QWORD *)(a1 + 72);
    *(double *)(a1 + 16) = v5
                         - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * (v7 & 0x1FF));
    *(_QWORD *)(a1 + 72) = v7 + 1;
    *(_QWORD *)(a1 + 80) = v6 - 1;
    sub_1001CFCA4(a1 + 40, 1);
  }
}

void sub_10034D97C(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void ***)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 80) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 56);
      v2 = (void **)(*(_QWORD *)(a1 + 48) + 8);
      *(_QWORD *)(a1 + 48) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 512;
  }
  *(_QWORD *)(a1 + 72) = v6;
LABEL_8:
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_BYTE *)(a1 + 32))
    *(_BYTE *)(a1 + 32) = 0;
}

double sub_10034DA00(uint64_t a1, char a2)
{
  unint64_t v2;
  double result;
  char v4;

  v2 = *(_QWORD *)(a1 + 80);
  result = (double)v2;
  if (*(double *)a1 < (double)v2)
    sub_1003EF108();
  if (*(double *)a1 == (double)v2)
    v4 = 0;
  else
    v4 = a2;
  if (v2)
  {
    if ((v4 & 1) == 0)
      return *(double *)(a1 + 16) / result;
  }
  return result;
}

uint64_t sub_10034DA50(uint64_t a1, uint64_t a2, __int128 **a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  NSObject *v8;
  uint8_t v10[16];

  *(_QWORD *)a1 = off_100816890;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1002F1494((char *)(a1 + 8), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)&v5 = *(_QWORD *)(a2 + 64);
  *(double *)(a1 + 104) = (double)*(int *)(a2 + 56);
  *(_QWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  v8 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#handoffPredictor HandoffPredictor is created", v10, 2u);
  }
  return a1;
}

void sub_10034DB54(uint64_t a1, __int128 *a2)
{
  float v4;
  float v5;
  NSObject *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  NSObject *v16;
  double v17;
  double v18;
  float v19;
  double v20;
  char v21;
  double v22;
  NSObject *v23;
  NSObject *v24;
  BOOL v25;
  double v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  double v38;
  __int16 v39;
  double v40;

  if (!*(_BYTE *)(a1 + 592))
    goto LABEL_32;
  if (!*(_BYTE *)(a1 + 600))
  {
    v4 = *(float *)(a1 + 424);
    v5 = *((float *)a2 + 4);
    if (*(double *)(a1 + 64) <= vabds_f32(v5, v4))
    {
      *(_BYTE *)(a1 + 600) = 1;
      *(_QWORD *)(a1 + 192) = 0x3FF0000000000000;
      v6 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 134218240;
        v38 = v5;
        v39 = 2048;
        v40 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#handoffPredictor distance measurements have changed enough - current distance is %f, first distance is %f", (uint8_t *)&v37, 0x16u);
        if (!*(_BYTE *)(a1 + 592))
        {
LABEL_32:
          v7 = *a2;
          v8 = a2[1];
          v9 = a2[3];
          *(_OWORD *)(a1 + 440) = a2[2];
          *(_OWORD *)(a1 + 456) = v9;
          *(_OWORD *)(a1 + 408) = v7;
          *(_OWORD *)(a1 + 424) = v8;
          v10 = a2[4];
          v11 = a2[5];
          v12 = a2[7];
          *(_OWORD *)(a1 + 504) = a2[6];
          *(_OWORD *)(a1 + 520) = v12;
          *(_OWORD *)(a1 + 472) = v10;
          *(_OWORD *)(a1 + 488) = v11;
          v13 = a2[8];
          v14 = a2[9];
          v15 = a2[10];
          *(_QWORD *)(a1 + 584) = *((_QWORD *)a2 + 22);
          *(_OWORD *)(a1 + 552) = v14;
          *(_OWORD *)(a1 + 568) = v15;
          *(_OWORD *)(a1 + 536) = v13;
          *(_BYTE *)(a1 + 592) = 1;
          v16 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *(float *)(a1 + 424);
            v37 = 134217984;
            v38 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#handoffPredictor first distance measurement is %f", (uint8_t *)&v37, 0xCu);
          }
        }
      }
    }
  }
  if (!*(_BYTE *)(a1 + 400))
    goto LABEL_23;
  v18 = *((double *)a2 + 1);
  v19 = v18 - *(double *)(a1 + 224);
  if (v19 > 0.0)
  {
    if (*(double *)(a1 + 96) <= v19)
    {
      v24 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v37) = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#handoffPredictor velocity measurements stale, clearing velocity buffer and velocity score", (uint8_t *)&v37, 2u);
      }
      sub_10034D97C(a1 + 104);
    }
    else
    {
      sub_10034D8AC(a1 + 104, (float)((float)-(float)(*((float *)a2 + 4) - *(float *)(a1 + 232)) / v19), v18);
      sub_10034DA00(a1 + 104, 0);
      if (v21)
      {
        v22 = 0.0;
        if (*(double *)(a1 + 80) < v20)
          v22 = 1.0;
        goto LABEL_22;
      }
    }
    v22 = 0.0;
LABEL_22:
    *(double *)(a1 + 208) = v22;
LABEL_23:
    if (*((_BYTE *)a2 + 36))
    {
      v25 = fabs(sub_100030334(*((float *)a2 + 6))) > *(double *)(a1 + 72);
      v26 = 0.0;
      if (!v25)
        v26 = 1.0;
    }
    else
    {
      v26 = 0.0;
    }
    *(double *)(a1 + 200) = v26;
    v27 = *(unsigned __int8 *)(a1 + 400);
    v28 = a2[3];
    v30 = *a2;
    v29 = a2[1];
    *(_OWORD *)(a1 + 248) = a2[2];
    *(_OWORD *)(a1 + 264) = v28;
    *(_OWORD *)(a1 + 216) = v30;
    *(_OWORD *)(a1 + 232) = v29;
    v31 = a2[7];
    v33 = a2[4];
    v32 = a2[5];
    *(_OWORD *)(a1 + 312) = a2[6];
    *(_OWORD *)(a1 + 328) = v31;
    *(_OWORD *)(a1 + 280) = v33;
    *(_OWORD *)(a1 + 296) = v32;
    v35 = a2[9];
    v34 = a2[10];
    v36 = a2[8];
    *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 22);
    *(_OWORD *)(a1 + 360) = v35;
    *(_OWORD *)(a1 + 376) = v34;
    *(_OWORD *)(a1 + 344) = v36;
    if (!v27)
      *(_BYTE *)(a1 + 400) = 1;
    return;
  }
  v23 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003EF130(v23);
  sub_10034D97C(a1 + 104);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
}

void sub_10034DE90()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#handoffPredictor region changed", v1, 2u);
  }
}

double sub_10034DEF4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 192);
    v4 = *(_QWORD *)(a1 + 200);
    v5 = *(_QWORD *)(a1 + 208);
    v7 = 134218496;
    v8 = v3;
    v9 = 2048;
    v10 = v4;
    v11 = 2048;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#handoffPredictor _distanceChangeScore: %f, _directionScore: %f, _velocityScore: %f", (uint8_t *)&v7, 0x20u);
  }
  return *(double *)(a1 + 48) * *(double *)(a1 + 200)
       + *(double *)(a1 + 40) * *(double *)(a1 + 192)
       + *(double *)(a1 + 56) * *(double *)(a1 + 208);
}

uint64_t sub_10034DFCC(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_100816890;
  sub_100152A44((_QWORD *)(a1 + 144));
  v3 = (void **)(a1 + 8);
  sub_1002F0A00(&v3);
  return a1;
}

void sub_10034E014(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_100816890;
  sub_100152A44((_QWORD *)(a1 + 144));
  v2 = (void **)(a1 + 8);
  sub_1002F0A00(&v2);
  operator delete();
}

uint64_t sub_10034E070()
{
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = xmmword_10047B1A0;
  v9 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085E610, (int *)&v8, 3);
  xmmword_10085E628 = xmmword_10046E050;
  unk_10085E638 = xmmword_10046E060;
  qword_10085E650 = 0;
  unk_10085E658 = 0;
  qword_10085E648 = 0x3FD999999999999ALL;
  unk_10085E660 = xmmword_10046E070;
  dword_10085E670 = 5;
  qword_10085E678 = 0x4000000000000000;
  dword_10085E680 = 5;
  byte_10085E688 = 0;
  unk_10085E68C = 0x30000000ALL;
  xmmword_10085E698 = xmmword_10046E080;
  unk_10085E6A8 = xmmword_10046E090;
  xmmword_10085E6B8 = xmmword_10046E0A0;
  qword_10085E6C8 = 0x3FE3333333333333;
  dword_10085E6D0 = 3;
  xmmword_10085E6D8 = xmmword_10046E0B0;
  unk_10085E6E8 = xmmword_10046E090;
  xmmword_10085E6F8 = xmmword_10046E080;
  qword_10085E708 = 0x3FE3333333333333;
  byte_10085E710 = 0;
  xmmword_10085E718 = xmmword_10046E0C0;
  unk_10085E728 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v6 = _Q0;
  xmmword_10085E738 = _Q0;
  qword_10085E748 = 0xBFD3333333333333;
  xmmword_10085E750 = xmmword_10046E0E0;
  qword_10085E760 = 0x3E99999A40000000;
  xmmword_10085E768 = xmmword_10046E060;
  qword_10085E780 = 0;
  unk_10085E788 = 0;
  qword_10085E778 = 0x3FD999999999999ALL;
  xmmword_10085E790 = xmmword_10046E070;
  dword_10085E7A0 = 5;
  qword_10085E7A8 = 0x4000000000000000;
  dword_10085E7B0 = 4;
  qword_10085E7B8 = 0x300000008;
  qword_10085E7C0 = 0xC04E800000000000;
  v7 = 0xC04E800000000000;
  sub_10018252C((uint64_t)algn_10085E7C8, (double *)&v7, 1);
  xmmword_10085E7E0 = xmmword_10046E0F0;
  qword_10085E7F0 = 0x4024000000000000;
  dword_10085E7F8 = 45;
  byte_10085E7FC = 0;
  dword_10085E800 = 1;
  byte_10085E808 = 1;
  xmmword_10085E810 = xmmword_10046E100;
  unk_10085E820 = xmmword_10046E110;
  xmmword_10085E830 = v6;
  qword_10085E840 = 0xC059000000000000;
  xmmword_10085E848 = xmmword_10046E120;
  qword_10085E858 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085E860 = xmmword_10046E060;
  qword_10085E870 = 0x3FD999999999999ALL;
  qword_10085E880 = 0;
  qword_10085E878 = 0;
  xmmword_10085E888 = xmmword_10046E070;
  dword_10085E898 = 5;
  qword_10085E8A0 = 0x4000000000000000;
  dword_10085E8A8 = 10;
  qword_10085E8B0 = 0x4034000000000000;
  dword_10085E8B8 = 3;
  xmmword_10085E8C0 = xmmword_10046E130;
  return __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085E610, (void *)&_mh_execute_header);
}

void sub_10034E318(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_10034E338(uint64_t a1)
{
  return *(unsigned int *)(a1 + 352);
}

double sub_10034E340(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 360) = 0x3FB999999999999ALL;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_10047B1F0;
  *(_OWORD *)(a1 + 32) = xmmword_100478870;
  return result;
}

void sub_10034E394(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (void **)a1[7];
  v3 = a1[8];
  a1[11] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[8];
      v2 = (void **)(a1[7] + 8);
      a1[7] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 16;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 32;
  }
  a1[10] = v6;
LABEL_8:
  v7 = (void **)a1[13];
  v8 = a1[14];
  a1[17] = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = a1[14];
      v7 = (void **)(a1[13] + 8);
      a1[13] = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 16;
  }
  else
  {
    if (v9 >> 3 != 2)
      return;
    v11 = 32;
  }
  a1[16] = v11;
}

__n128 sub_10034E460@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 128) = 0;
  if (a1[11])
  {
    v2 = *(_QWORD *)(a1[7] + ((a1[10] >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((a1[10] & 0x1FLL) << 7);
    v3 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(a2 + 80) = v3;
    v4 = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(a2 + 112) = v4;
    v5 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v2;
    *(_OWORD *)(a2 + 16) = v5;
    result = *(__n128 *)(v2 + 32);
    v7 = *(_OWORD *)(v2 + 48);
    *(__n128 *)(a2 + 32) = result;
    *(_OWORD *)(a2 + 48) = v7;
    *(_BYTE *)(a2 + 128) = 1;
  }
  return result;
}

void sub_10034E4B8(int64x2_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  double *v7;
  uint64_t v8;
  double *v9;

  sub_1003098A8(a1, a2);
  v4 = a1->i64[1];
  if (a1[1].i64[0] != v4)
  {
    v5 = a1[2].u64[0];
    v6 = (_QWORD *)(v4 + 8 * (v5 >> 5));
    v7 = (double *)(*v6 + ((v5 & 0x1F) << 7));
    v8 = *(_QWORD *)(v4 + (((a1[2].i64[1] + v5) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((a1[2].i64[1] + v5) & 0x1F) << 7);
    while (v7 != (double *)v8)
    {
      if (*(double *)a2 - *v7 <= 5.0)
        break;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10046C2B0);
      sub_100145748((uint64_t)a1, 1);
      v7 += 16;
      if ((double *)((char *)v7 - *v6) == (double *)4096)
      {
        v9 = (double *)v6[1];
        ++v6;
        v7 = v9;
      }
    }
  }
}

__n128 sub_10034E5A0@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 128) = 0;
  v3 = a1[1];
  if (a1[2] != v3)
  {
    v4 = a1[4];
    v5 = (_QWORD *)(v3 + 8 * (v4 >> 5));
    v6 = *v5 + ((v4 & 0x1F) << 7);
    v7 = *(_QWORD *)(v3 + (((a1[5] + v4) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((a1[5] + v4) & 0x1F) << 7);
    while (v6 != v7)
    {
      v8 = *(double *)v6;
      v17 = *(_QWORD *)(v6 + 120);
      v15 = *(_OWORD *)(v6 + 88);
      v16 = *(_OWORD *)(v6 + 104);
      v14 = *(_OWORD *)(v6 + 72);
      v12 = *(__n128 *)(v6 + 40);
      v13 = *(_OWORD *)(v6 + 56);
      v10 = *(_OWORD *)(v6 + 8);
      v11 = *(_OWORD *)(v6 + 24);
      if (*(double *)v6 > result.n128_f64[0])
      {
        result.n128_f64[0] = v8 - result.n128_f64[0];
        if (result.n128_f64[0] < 0.2)
        {
          *(double *)a2 = v8;
          *(_OWORD *)(a2 + 72) = v14;
          *(_OWORD *)(a2 + 88) = v15;
          *(_OWORD *)(a2 + 104) = v16;
          *(_OWORD *)(a2 + 8) = v10;
          *(_OWORD *)(a2 + 24) = v11;
          result = v12;
          *(__n128 *)(a2 + 40) = v12;
          *(_QWORD *)(a2 + 120) = v17;
          *(_OWORD *)(a2 + 56) = v13;
          *(_BYTE *)(a2 + 128) = 1;
        }
        return result;
      }
      v6 += 128;
      if (v6 - *v5 == 4096)
      {
        v9 = v5[1];
        ++v5;
        v6 = v9;
      }
    }
  }
  return result;
}

__n128 sub_10034E6E0@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 128) = 0;
  if (a1[17])
  {
    v3 = *(_QWORD *)(a1[13] + ((a1[16] >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((a1[16] & 0x1FLL) << 7);
    result.n128_f64[0] = *(double *)v3 - result.n128_f64[0];
    if (result.n128_f64[0] < 0.2)
    {
      v4 = *(_OWORD *)(v3 + 80);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 64);
      *(_OWORD *)(a2 + 80) = v4;
      v5 = *(_OWORD *)(v3 + 112);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 96);
      *(_OWORD *)(a2 + 112) = v5;
      v6 = *(_OWORD *)(v3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v3;
      *(_OWORD *)(a2 + 16) = v6;
      result = *(__n128 *)(v3 + 32);
      v7 = *(_OWORD *)(v3 + 48);
      *(__n128 *)(a2 + 32) = result;
      *(_OWORD *)(a2 + 48) = v7;
      *(_BYTE *)(a2 + 128) = 1;
    }
  }
  return result;
}

void sub_10034E750(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  BOOL v13;
  _BOOL4 v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  int32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64[8];
  char v65;

  v8 = *(_QWORD *)(a1 + 88);
  if (v8)
  {
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 80);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v9 >> 2) & 0x3FFFFFFFFFFFFFF8));
      v11 = *(double *)(v10 + ((v9 & 0x1F) << 7));
      if (v11 >= a4)
        break;
      *(_QWORD *)(a1 + 80) = v9 + 1;
      *(_QWORD *)(a1 + 88) = v8 - 1;
      sub_100145748(a1 + 48, 1);
      v8 = *(_QWORD *)(a1 + 88);
      if (!v8)
        goto LABEL_4;
    }
    v64[0].i8[0] = 0;
    v65 = 0;
    v12 = 1;
    if (v11 - a4 < 0.1)
    {
      v15 = (float32x4_t *)(v10 + ((v9 & 0x1F) << 7));
      v16 = v15[5];
      v64[4] = v15[4];
      v64[5] = v16;
      v17 = v15[7];
      v64[6] = v15[6];
      v64[7] = v17;
      v18 = v15[1];
      v64[0] = *v15;
      v64[1] = v18;
      v19 = v15[3];
      v64[2] = v15[2];
      v64[3] = v19;
      v65 = 1;
      v12 = 0;
    }
  }
  else
  {
LABEL_4:
    v64[0].i8[0] = 0;
    v65 = 0;
    v12 = 1;
  }
  if (*(_BYTE *)(a2 + 32))
    v13 = *(_BYTE *)(a2 + 48) == 0;
  else
    v13 = 1;
  v14 = !v13 && *(_BYTE *)(a2 + 64) != 0;
  switch(*(_DWORD *)(a1 + 352))
  {
    case 0:
      if (!v14)
        goto LABEL_30;
      *(_OWORD *)(a1 + 16) = xmmword_10047B1F0;
LABEL_24:
      v20 = 4;
      goto LABEL_29;
    case 1:
      if (v14)
        goto LABEL_24;
      goto LABEL_30;
    case 2:
      if ((v12 & 1) != 0)
        goto LABEL_30;
      if (!*(_BYTE *)(a1 + 344))
        goto LABEL_42;
      sub_10034EB4C(a1, v64, a1 + 184);
      if (v14)
        v20 = 5;
      else
        v20 = 3;
LABEL_29:
      *(_DWORD *)(a1 + 352) = v20;
LABEL_30:
      if (!*(_BYTE *)(a2 + 80))
        goto LABEL_42;
      if (!*(_BYTE *)(a2 + 96))
        goto LABEL_42;
      if (!*(_BYTE *)(a2 + 112))
        goto LABEL_42;
      v21 = *(double *)(a2 + 72);
      v22 = *(double *)(a2 + 88);
      v23 = *(double *)(a2 + 104);
      v24 = *(float32x4_t *)(a1 + 16);
      v25 = vmulq_f32(v24, (float32x4_t)xmmword_100478A20);
      v26 = (int32x4_t)vnegq_f32(v25);
      v27 = (int8x16_t)vtrn2q_s32((int32x4_t)v25, vtrn1q_s32((int32x4_t)v25, v26));
      v28 = (float32x4_t)vextq_s8(v27, v27, 8uLL);
      v29 = (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v26, 8uLL);
      v30 = vmulq_n_f32(v29, v22);
      v31 = (float32x4_t)vrev64q_s32((int32x4_t)v25);
      v31.i32[0] = v26.i32[1];
      v31.i32[3] = v26.i32[2];
      v32 = vmlaq_n_f32(vmlaq_n_f32(v30, v28, v21), v31, v23);
      v33 = (int32x4_t)vnegq_f32(v32);
      v34 = (int8x16_t)vtrn2q_s32((int32x4_t)v32, vtrn1q_s32((int32x4_t)v32, v33));
      v35 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v33, 8uLL), *(float32x2_t *)v24.f32, 1), (float32x4_t)vextq_s8(v34, v34, 8uLL), v24.f32[0]);
      v36 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
      v36.i32[0] = v33.i32[1];
      v36.i32[3] = v33.i32[2];
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(double *)(a3 + 64) = a4;
      *(float32x4_t *)(a3 + 32) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v32, v24, 3), v36, v24, 2), v35);
      if (!*(_BYTE *)(a2 + 152))
        goto LABEL_42;
      v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 0);
      v38 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2);
      v39 = *(double *)(a2 + 128);
      v40 = *(double *)(a2 + 136);
      v41 = *(double *)(a2 + 144);
      v42 = *(double *)(a2 + 120);
      v43 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_10047B200, v40), (float32x4_t)xmmword_10047B210, v39), vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_10047B220, v42), (float32x4_t)xmmword_10047B230, v41));
      v44 = (int32x4_t)vnegq_f32(v43);
      v45 = (int8x16_t)vtrn2q_s32((int32x4_t)v43, vtrn1q_s32((int32x4_t)v43, v44));
      v46 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v44, 8uLL), *(float32x2_t *)v24.f32, 1), (float32x4_t)vextq_s8(v45, v45, 8uLL), v37);
      v47 = (float32x4_t)vrev64q_s32((int32x4_t)v43);
      v47.i32[0] = v44.i32[1];
      v47.i32[3] = v44.i32[2];
      *(float32x4_t *)(a3 + 48) = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v43, v24, 3), v47, v38), v46);
      v48 = *(unsigned __int8 *)(a1 + 344);
      v49 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 200) = v49;
      v50 = *(_OWORD *)(a2 + 64);
      v51 = *(_OWORD *)(a2 + 80);
      v52 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 264) = v51;
      *(_OWORD *)(a1 + 248) = v50;
      *(_OWORD *)(a1 + 232) = v52;
      v53 = *(_OWORD *)(a2 + 144);
      v55 = *(_OWORD *)(a2 + 96);
      v54 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 328) = v53;
      *(_OWORD *)(a1 + 280) = v55;
      *(_OWORD *)(a1 + 296) = v54;
      if (!v48)
        *(_BYTE *)(a1 + 344) = 1;
      *(double *)(a1 + 192) = a4;
      *(_BYTE *)(a1 + 200) = 1;
      if (v14)
      {
        if (!*(_BYTE *)(a2 + 32) || !*(_BYTE *)(a2 + 48) || !*(_BYTE *)(a2 + 64))
LABEL_42:
          sub_10000BA44();
        v56 = *(double *)(a2 + 24);
        v57 = *(double *)(a2 + 40);
        v58 = *(double *)(a2 + 56);
        v59 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v29, v57), v28, v56), v31, v58);
        v60 = (int32x4_t)vnegq_f32(v59);
        v61 = (int8x16_t)vtrn2q_s32((int32x4_t)v59, vtrn1q_s32((int32x4_t)v59, v60));
        v62 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v60, 8uLL), *(float32x2_t *)v24.f32, 1), (float32x4_t)vextq_s8(v61, v61, 8uLL), v37);
        v63 = (float32x4_t)vrev64q_s32((int32x4_t)v59);
        v63.i32[0] = v60.i32[1];
        v63.i32[3] = v60.i32[2];
        *(_BYTE *)(a3 + 16) = 1;
        *(float32x4_t *)a3 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v59, v24, 3), v63, v38), v62);
      }
      return;
    case 3:
      if (!v14)
        goto LABEL_30;
      v20 = 5;
      goto LABEL_29;
    case 4:
      if (v14)
        goto LABEL_30;
      v20 = 1;
      goto LABEL_29;
    case 5:
      if (v14)
        goto LABEL_30;
      v20 = 3;
      goto LABEL_29;
    default:
      goto LABEL_30;
  }
}

void sub_10034EB4C(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  uint64_t v14;
  __int128 v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  _OWORD v20[4];
  int8x16_t v21[3];

  v18 = a2[1];
  v19 = a2[2];
  v16 = a2[4];
  v17 = a2[3];
  *(double *)&v5 = sub_100311080((float32x4_t)xmmword_10047B290);
  v6 = 0;
  v20[0] = v5;
  v20[1] = v7;
  v20[2] = v8;
  v20[3] = v9;
  do
  {
    v21[v6] = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(v20[v6])), v19, *(float32x2_t *)&v20[v6], 1), v17, (float32x4_t)v20[v6], 2), v16, (float32x4_t)v20[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  *(double *)v10.i64 = sub_10030C298(v21[0], v21[1], (__n128)v21[2]);
  v11 = (int32x4_t)vnegq_f32(v10);
  v12 = (int8x16_t)vtrn2q_s32((int32x4_t)v10, vtrn1q_s32((int32x4_t)v10, v11));
  v13 = (float32x4_t)vrev64q_s32((int32x4_t)v10);
  v13.i32[0] = v11.i32[1];
  v13.i32[3] = v11.i32[2];
  *(double *)&v15 = sub_10034EC58(vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 8uLL), *(float32x2_t *)(a1 + 32), 1), (float32x4_t)vextq_s8(v12, v12, 8uLL), COERCE_FLOAT(*(_OWORD *)(a1 + 32))), vmlaq_laneq_f32(vmulq_laneq_f32(v10, *(float32x4_t *)(a1 + 32), 3), v13, *(float32x4_t *)(a1 + 32), 2)), v14, a3);
  *(_OWORD *)(a1 + 16) = v15;
}

double sub_10034EC28(uint64_t a1)
{
  int8x16_t v1;
  double result;

  if (!*(_BYTE *)(a1 + 152))
    sub_10000BA44();
  v1 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 120)), *(float64x2_t *)(a1 + 136));
  *(_QWORD *)&result = vextq_s8(v1, v1, 4uLL).u64[0];
  return result;
}

double sub_10034EC58(float32x4_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v3;
  float32x4_t v4;
  int32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  __float2 v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x2_t v23;
  float32x4_t v24;
  unsigned __int32 v25;
  float32x2_t v26;
  float32x2_t v27;
  double result;
  float32x4_t v29;

  if (!*(_BYTE *)(a3 + 152))
    sub_10000BA44();
  v3 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a3 + 120)), *(float64x2_t *)(a3 + 136));
  v4 = (float32x4_t)vextq_s8(v3, v3, 4uLL);
  v5 = (int32x4_t)vnegq_f32(v4);
  v6 = (int8x16_t)vtrn2q_s32((int32x4_t)v4, vtrn1q_s32((int32x4_t)v4, v5));
  v7.i64[0] = 0x8000000080000000;
  v7.i64[1] = 0x8000000080000000;
  v8 = (float32x4_t)vrev64q_s32((int32x4_t)v4);
  v8.i32[0] = v5.i32[1];
  v8.i32[3] = v5.i32[2];
  v9 = vaddq_f32(vmlaq_f32(vmulq_f32(v4, (float32x4_t)vdupq_n_s32(0x3F3504F3u)), v7, v8), vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL), v7), (float32x4_t)vdupq_n_s32(0xBF3504F3), (float32x4_t)vextq_s8(v6, v6, 8uLL)));
  v10 = vmulq_f32(v9, (float32x4_t)xmmword_100478A20);
  v11 = (int8x16_t)vmulq_f32(v9, v9);
  *(float32x2_t *)v11.i8 = vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
  v11.i32[0] = vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1)).u32[0];
  *(float32x2_t *)v6.i8 = vrecpe_f32((float32x2_t)v11.u32[0]);
  *(float32x2_t *)v6.i8 = vmul_f32(*(float32x2_t *)v6.i8, vrecps_f32((float32x2_t)v11.u32[0], *(float32x2_t *)v6.i8));
  v12 = vmulq_n_f32(v10, vmul_f32(*(float32x2_t *)v6.i8, vrecps_f32((float32x2_t)v11.u32[0], *(float32x2_t *)v6.i8)).f32[0]);
  v13 = (int32x4_t)vnegq_f32(v12);
  v14 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v13));
  v15 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
  v15.i32[0] = v13.i32[1];
  v15.i32[3] = v13.i32[2];
  v16 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v12, a1, 3), v15, a1, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v13, 8uLL), *(float32x2_t *)a1.f32, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), a1.f32[0]));
  v17 = vmulq_f32(v16, v16);
  v13.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).u32[0];
  v17.f32[0] = sqrtf(*(float *)v13.i32);
  *(float32x2_t *)v14.i8 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  *(float32x2_t *)v14.i8 = vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)));
  v18 = vmulq_f32(vmulq_n_f32(v16, vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8))).f32[0]), (float32x4_t)xmmword_100456C10);
  v29 = vmulq_n_f32((float32x4_t)xmmword_100456C10, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
  v19 = atan2f(v17.f32[0], v16.f32[3]);
  v20 = __sincosf_stret((float)(v19 + v19) * 0.5);
  v21 = vmulq_n_f32(v29, v20.__sinval);
  v21.i32[3] = LODWORD(v20.__cosval);
  v22 = (int8x16_t)vmulq_f32(v21, v21);
  v23 = vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
  if (vaddv_f32(v23) == 0.0)
  {
    v24 = (float32x4_t)xmmword_100478870;
  }
  else
  {
    v25 = vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1)).u32[0];
    v26 = vrsqrte_f32((float32x2_t)v25);
    v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25, vmul_f32(v26, v26)));
    v24 = vmulq_n_f32(v21, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25, vmul_f32(v27, v27))).f32[0]);
  }
  *(_QWORD *)&result = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)xmmword_10047B240, *(float32x2_t *)v24.f32, 1), (float32x4_t)xmmword_10047B250, v24.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)xmmword_10047B1F0, v24, 3), (float32x4_t)xmmword_10047B260, v24, 2)).u64[0];
  return result;
}

BOOL sub_10034EE58(float32x4_t *a1, float32x4_t *a2, float32x4_t a3)
{
  __int32 v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float v24;
  __float2 v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x2_t v28;
  float32x4_t v29;
  unsigned __int32 v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v39;
  _OWORD v40[4];
  int8x16_t v41[3];

  v3 = a2[5].i32[0];
  if (v3 == 2)
  {
    v36 = a2[1];
    v37 = a2[2];
    v34 = a2[4];
    v35 = a2[3];
    *(double *)&v5 = sub_100311080((float32x4_t)xmmword_10047B290);
    v6 = 0;
    v40[0] = v5;
    v40[1] = v7;
    v40[2] = v8;
    v40[3] = v9;
    do
    {
      v41[v6] = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, COERCE_FLOAT(v40[v6])), v37, *(float32x2_t *)&v40[v6], 1), v35, (float32x4_t)v40[v6], 2), v34, (float32x4_t)v40[v6], 3);
      ++v6;
    }
    while (v6 != 4);
    *(double *)v10.i64 = sub_10030C298(v41[0], v41[1], (__n128)v41[2]);
    v11 = vmulq_f32(v10, (float32x4_t)xmmword_100478A20);
    v12 = (int8x16_t)vmulq_f32(v10, v10);
    *(float32x2_t *)v12.i8 = vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
    v12.i32[0] = vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
    v13 = vrecpe_f32((float32x2_t)v12.u32[0]);
    v14 = vmul_f32(v13, vrecps_f32((float32x2_t)v12.u32[0], v13));
    v15 = vmulq_n_f32(v11, vmul_f32(v14, vrecps_f32((float32x2_t)v12.u32[0], v14)).f32[0]);
    v16 = (int32x4_t)vnegq_f32(v15);
    v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v15, vtrn1q_s32((int32x4_t)v15, v16));
    v18 = (float32x4_t)vrev64q_s32((int32x4_t)v15);
    v18.i32[0] = v16.i32[1];
    v18.i32[3] = v16.i32[2];
    v19 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v15, a3, 3), v18, a3, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 8uLL), *(float32x2_t *)a3.f32, 1), (float32x4_t)vextq_s8(v17, v17, 8uLL), a3.f32[0]));
    v20 = vmulq_f32(v19, v19);
    v17.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).u32[0];
    v20.f32[0] = sqrtf(*(float *)v17.i32);
    v21 = vrsqrte_f32((float32x2_t)v17.u32[0]);
    v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v21, v21)));
    v23 = vmulq_f32(vmulq_n_f32(v19, vmul_f32(v22, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v22, v22))).f32[0]), (float32x4_t)xmmword_100456C10);
    v39 = vmulq_n_f32((float32x4_t)xmmword_100456C10, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
    v24 = atan2f(v20.f32[0], v19.f32[3]);
    v25 = __sincosf_stret((float)(v24 + v24) * 0.5);
    v26 = vmulq_n_f32(v39, v25.__sinval);
    v26.i32[3] = LODWORD(v25.__cosval);
    v27 = (int8x16_t)vmulq_f32(v26, v26);
    v28 = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
    if (vaddv_f32(v28) == 0.0)
    {
      v29 = (float32x4_t)xmmword_100478870;
    }
    else
    {
      v30 = vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1)).u32[0];
      v31 = vrsqrte_f32((float32x2_t)v30);
      v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v30, vmul_f32(v31, v31)));
      v29 = vmulq_n_f32(v26, vmul_f32(v32, vrsqrts_f32((float32x2_t)v30, vmul_f32(v32, v32))).f32[0]);
    }
    a1[2] = v29;
  }
  return v3 == 2;
}

void sub_10034F050(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  float32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned int v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  __int128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[4];
  _OWORD v69[4];
  __int128 v70[8];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  float32x4_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  float32x4_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char v93;

  v6 = *(_DWORD *)(a2 + 80);
  v7 = *(_DWORD *)(a1 + 352);
  switch(v7)
  {
    case 0:
      if (v6 == 2)
      {
        v24 = 2;
        goto LABEL_17;
      }
      v46 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a3 + 80) = v46;
      v47 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a3 + 112) = v47;
      v48 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_OWORD *)(a3 + 16) = v48;
      v49 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a3 + 48) = v49;
      *(_DWORD *)(a3 + 112) = 0;
      *(_BYTE *)(a3 + 116) = 1;
      goto LABEL_20;
    case 1:
    case 4:
      if (v6 != 2)
        goto LABEL_18;
      if (!*(_BYTE *)(a1 + 344))
        goto LABEL_18;
      if (!*(_BYTE *)(a1 + 200))
        goto LABEL_18;
      if (!*(_QWORD *)(a1 + 88))
        goto LABEL_18;
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((*(_QWORD *)(a1 + 80) >> 2) & 0x3FFFFFFFFFFFFFF8))
         + ((*(_QWORD *)(a1 + 80) & 0x1FLL) << 7);
      if (*(double *)v8 - *(double *)(a1 + 192) >= *(double *)(a1 + 360))
        goto LABEL_18;
      v9 = *(_OWORD *)(v8 + 80);
      v89 = *(_OWORD *)(v8 + 64);
      v90 = v9;
      v10 = *(_OWORD *)(v8 + 112);
      v91 = *(_OWORD *)(v8 + 96);
      v92 = v10;
      v11 = *(_OWORD *)(v8 + 16);
      v85 = *(float32x4_t *)v8;
      v86 = v11;
      v12 = *(_OWORD *)(v8 + 48);
      v87 = *(_OWORD *)(v8 + 32);
      v88 = v12;
      v93 = 1;
      v13 = *(_OWORD *)(a1 + 296);
      v81 = *(_OWORD *)(a1 + 280);
      v82 = v13;
      v14 = *(_OWORD *)(a1 + 328);
      v83 = *(_OWORD *)(a1 + 312);
      v84 = v14;
      v15 = *(_OWORD *)(a1 + 232);
      v77 = *(_OWORD *)(a1 + 216);
      v78 = v15;
      v16 = *(_OWORD *)(a1 + 264);
      v79 = *(_OWORD *)(a1 + 248);
      v80 = v16;
      v17 = *(_OWORD *)(a1 + 200);
      v75 = *(float32x4_t *)(a1 + 184);
      v76 = v17;
      *(double *)v18.i64 = sub_10034EC28((uint64_t)&v75);
      v19 = (int32x4_t)vnegq_f32(v18);
      v20 = (int8x16_t)vtrn2q_s32((int32x4_t)v18, vtrn1q_s32((int32x4_t)v18, v19));
      v21 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
      v21.i32[0] = v19.i32[1];
      v21.i32[3] = v19.i32[2];
      if (!sub_10034EE58((float32x4_t *)a1, &v85, vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 8uLL), *(float32x2_t *)(a1 + 16), 1), (float32x4_t)vextq_s8(v20, v20, 8uLL), COERCE_FLOAT(*(_OWORD *)(a1 + 16))), vmlaq_laneq_f32(vmulq_laneq_f32(v18, *(float32x4_t *)(a1 + 16), 3), v21, *(float32x4_t *)(a1 + 16), 2))))goto LABEL_18;
      v22 = *(_DWORD *)(a1 + 352);
      if (v22 == 4)
      {
        v23 = 5;
      }
      else
      {
        if (v22 != 1)
          goto LABEL_38;
        v23 = 3;
      }
      *(_DWORD *)(a1 + 352) = v23;
LABEL_38:
      v51 = *(_QWORD *)(a1 + 56);
      if (*(_QWORD *)(a1 + 64) != v51)
      {
        v52 = *(_QWORD *)(a1 + 80);
        v53 = (_QWORD *)(v51 + 8 * (v52 >> 5));
        v54 = (__int128 *)(*v53 + ((v52 & 0x1F) << 7));
        v55 = *(_QWORD *)(v51 + (((*(_QWORD *)(a1 + 88) + v52) >> 2) & 0x3FFFFFFFFFFFFFF8))
            + (((*(_QWORD *)(a1 + 88) + v52) & 0x1F) << 7);
        while (v54 != (__int128 *)v55)
        {
          v56 = *v54;
          v66 = v54[2];
          v67 = v54[1];
          v64 = v54[4];
          v65 = v54[3];
          v57 = v54[6];
          v73 = v54[7];
          v74 = v56;
          v71 = v54[5];
          v72 = v57;
          v70[0] = v56;
          v70[5] = v71;
          v70[6] = v57;
          v70[7] = v73;
          *(double *)v58.i64 = sub_100311080(*(float32x4_t *)(a1 + 32));
          v62 = 0;
          v68[0] = v67;
          v68[1] = v66;
          v68[2] = v65;
          v68[3] = v64;
          do
          {
            v69[v62] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58, COERCE_FLOAT(v68[v62])), v59, *(float32x2_t *)&v68[v62], 1), v60, (float32x4_t)v68[v62], 2), v61, (float32x4_t)v68[v62], 3);
            ++v62;
          }
          while (v62 != 4);
          v70[1] = v69[0];
          v70[2] = v69[1];
          v70[3] = v69[2];
          v70[4] = v69[3];
          sub_1003098A8((_QWORD *)(a1 + 96), v70);
          v54 += 8;
          if ((__int128 *)((char *)v54 - *v53) == (__int128 *)4096)
          {
            v63 = (__int128 *)v53[1];
            ++v53;
            v54 = v63;
          }
        }
      }
      goto LABEL_18;
    case 2:
      if (v6 == 2)
        goto LABEL_22;
      *(_OWORD *)(a1 + 16) = xmmword_10047B1F0;
      *(_OWORD *)(a1 + 32) = xmmword_100478870;
      *(_DWORD *)(a1 + 352) = 0;
      goto LABEL_18;
    case 3:
      if (v6 == 2)
        goto LABEL_22;
      v24 = 1;
LABEL_17:
      *(_DWORD *)(a1 + 352) = v24;
      goto LABEL_18;
    case 5:
      if (v6 == 2)
      {
LABEL_22:
        v29 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a3 + 80) = v29;
        v30 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a3 + 112) = v30;
        v31 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v31;
        v32 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a3 + 48) = v32;
        *(_DWORD *)(a3 + 112) = v7;
        *(_BYTE *)(a3 + 116) = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 352) = 4;
        if (*(_BYTE *)(a1 + 344))
        {
          if (*(_BYTE *)(a1 + 200))
          {
            if (*(_QWORD *)(a1 + 88))
            {
              v50 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((*(_QWORD *)(a1 + 80) >> 2) & 0x3FFFFFFFFFFFFFF8))
                  + ((*(_QWORD *)(a1 + 80) & 0x1FLL) << 7);
              if (*(double *)v50 - *(double *)(a1 + 192) < *(double *)(a1 + 360))
              {
                v79 = *(_OWORD *)(v50 + 64);
                v80 = *(_OWORD *)(v50 + 80);
                v81 = *(_OWORD *)(v50 + 96);
                v82 = *(_OWORD *)(v50 + 112);
                v75 = *(float32x4_t *)v50;
                v76 = *(_OWORD *)(v50 + 16);
                v77 = *(_OWORD *)(v50 + 32);
                v78 = *(_OWORD *)(v50 + 48);
                LOBYTE(v83) = 1;
                sub_10034EB4C(a1, &v75, a1 + 184);
              }
            }
          }
        }
LABEL_18:
        v6 = *(_DWORD *)(a2 + 80);
        v7 = *(_DWORD *)(a1 + 352);
LABEL_19:
        v25 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a3 + 80) = v25;
        v26 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a3 + 112) = v26;
        v27 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v27;
        v28 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a3 + 48) = v28;
        *(_DWORD *)(a3 + 112) = v7;
        *(_BYTE *)(a3 + 116) = 1;
        if (v6 != 2)
        {
LABEL_20:
          sub_10034E394((_QWORD *)a1);
          return;
        }
      }
      sub_1003098A8((_QWORD *)(a1 + 48), (__int128 *)a2);
      *(_DWORD *)(a3 + 80) = 0;
      v33 = *(_DWORD *)(a1 + 352);
      if (v33 <= 5 && ((1 << v33) & 0x2C) != 0)
      {
        *(_DWORD *)(a3 + 80) = 2;
        *(double *)v34.i64 = sub_100311080(*(float32x4_t *)(a1 + 32));
        v38 = 0;
        v39 = *(_OWORD *)(a2 + 32);
        v40 = *(_OWORD *)(a2 + 48);
        v41 = *(_OWORD *)(a2 + 64);
        v85 = *(float32x4_t *)(a2 + 16);
        v86 = v39;
        v87 = v40;
        v88 = v41;
        do
        {
          *(float32x4_t *)((char *)&v75 + v38) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)((char *)&v85 + v38))), v35, *(float32x2_t *)&v85.f32[v38 / 4], 1), v36, *(float32x4_t *)((char *)&v85 + v38), 2), v37, *(float32x4_t *)((char *)&v85 + v38), 3);
          v38 += 16;
        }
        while (v38 != 64);
        v42 = v76;
        v43 = v77;
        v44 = v78;
        *(float32x4_t *)(a3 + 16) = v75;
        *(_OWORD *)(a3 + 32) = v42;
        *(_OWORD *)(a3 + 48) = v43;
        *(_OWORD *)(a3 + 64) = v44;
        sub_1003098A8((_QWORD *)(a1 + 96), (__int128 *)a3);
        if (*(double *)a3
           - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + ((*(_QWORD *)(a1 + 128) >> 2) & 0x3FFFFFFFFFFFFFF8))
                       + ((*(_QWORD *)(a1 + 128) & 0x1FLL) << 7)) > 1.28)
        {
          v45 = *(_QWORD *)(a1 + 136) - 1;
          ++*(_QWORD *)(a1 + 128);
          *(_QWORD *)(a1 + 136) = v45;
          sub_100145748(a1 + 96, 1);
        }
      }
      return;
    default:
      goto LABEL_19;
  }
}

void sub_10034F5B4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 356) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 364) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 372) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 380) = 0;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF170();
}

void sub_10034F65C(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF19C();
}

uint64_t sub_10034F6C4(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(result + 32);
  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(result + 8) = *(_OWORD *)a2;
  *(_QWORD *)(result + 24) = v3;
  if (!v2)
    *(_BYTE *)(result + 32) = 1;
  return result;
}

BOOL sub_10034F6EC(uint64_t a1, double *a2, double a3)
{
  int v3;

  v3 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
    *a2 = a3 - *(double *)(a1 + 16) + *(double *)(a1 + 8);
  return v3 != 0;
}

BOOL sub_10034F710(uint64_t a1, double *a2, double a3)
{
  int v3;

  v3 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
    *a2 = a3 - *(double *)(a1 + 24) + *(double *)(a1 + 8);
  return v3 != 0;
}

void sub_10034F738()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF1C8();
}

void sub_10034F778()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF1F4();
}

void sub_10034F7B8()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF220();
}

void sub_10034F7F8()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF24C();
}

void sub_10034F838()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF278();
}

void sub_10034F878()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF2A4();
}

void sub_10034F8B8()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF2D0();
}

void sub_10034F8F8()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF2FC();
}

void sub_10034F938()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF328();
}

void sub_10034F978()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF354();
}

void sub_10034F9B8()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF380();
}

void sub_10034F9F8()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF3AC();
}

void sub_10034FA38()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF3D8();
}

void sub_10034FA78()
{
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    sub_1003EF404();
}

uint64_t sub_10034FAB8()
{
  return 0;
}

uint64_t sub_10034FAC0()
{
  return 0;
}

uint64_t sub_10034FAC8(int a1, double a2, double a3)
{
  uint64_t result;

  if (a1 != 2)
    return 1;
  if (a2 < -1000.0)
    return 1;
  if (a2 > 0.15)
    return 1;
  result = 0;
  if (a3 <= 10000.0 && a3 >= 350.0)
    return 1;
  return result;
}

void sub_10034FB1C(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 96);
  sub_100352970((char *)(a1 + 208), (std::string *)(a1 + 96));
  if (*(_BYTE *)(a1 + 144))
  {
    if (*(char *)(a1 + 119) < 0)
      operator delete(*v2);
    *(_BYTE *)(a1 + 144) = 0;
  }
}

void sub_10034FB64(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>, float a4@<S0>)
{
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  _OWORD *v17;
  BOOL v18;
  double v19;
  uint64_t **v20;
  uint64_t **v21;
  int v22;
  char *v23;
  char *v24;
  __int128 *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  uint64_t **v40;
  uint64_t **v41;
  int v42;
  void *v43[2];
  uint64_t v44;
  __int128 v45;
  char v46;
  char v47;
  __int128 v48;
  char v49;
  char v50;
  char v51;
  void *v52[2];
  char v53;
  char v54;
  __int128 __p;
  char v56;
  char v57;
  char v58;
  void *v59[2];
  char v60;
  char v61;
  std::string buf[2];
  char v63;

  v8 = *(_QWORD *)(a1 + 80);
  v11 = *(uint64_t ***)(v8 + 8);
  v10 = (uint64_t *)(v8 + 8);
  v9 = v11;
  if (v11)
  {
    v12 = v10;
    do
    {
      v13 = v9 + 1;
      if (*((float *)v9 + 14) > a4)
      {
        v13 = v9;
        v12 = (uint64_t *)v9;
      }
      v9 = (uint64_t **)*v13;
    }
    while (*v13);
  }
  else
  {
    v12 = v10;
  }
  v14 = *(unsigned __int8 *)(a1 + 144);
  LOBYTE(__p) = 0;
  v57 = 0;
  v58 = 0;
  v15 = (__int128 *)v59;
  sub_1002F109C((char *)v59, &__p);
  if (v57 && v56 < 0)
    operator delete((void *)__p);
  LOBYTE(v48) = 0;
  v50 = 0;
  v51 = 1;
  v16 = (__int128 *)v52;
  sub_1002F109C((char *)v52, &v48);
  if (v50 && v49 < 0)
    operator delete((void *)v48);
  if (v12 == v10)
  {
    if (!v14)
      goto LABEL_48;
    if (!*(_BYTE *)(a1 + 144))
    {
      v42 = 106;
      goto LABEL_86;
    }
    if ((float)(*(float *)(a1 + 120) + *(float *)a1) < a4)
    {
      sub_100352970((char *)(a1 + 208), (std::string *)(a1 + 96));
      if (*(_BYTE *)(a1 + 144))
      {
        if (*(char *)(a1 + 119) < 0)
          operator delete(*(void **)(a1 + 96));
        *(_BYTE *)(a1 + 144) = 0;
      }
      v27 = *(_QWORD *)(a1 + 80);
      v30 = *(_QWORD *)(v27 + 8);
      v28 = v27 + 8;
      v29 = v30;
      if (v30)
      {
        do
        {
          v31 = v29;
          v29 = *(_QWORD *)(v29 + 8);
        }
        while (v29);
      }
      else
      {
        do
        {
          v31 = *(_QWORD *)(v28 + 16);
          v18 = *(_QWORD *)v31 == v28;
          v28 = v31;
        }
        while (v18);
      }
      sub_1003500FC((char *)(a1 + 152), (std::string *)(v31 + 32));
      v32 = &v51;
      v15 = (__int128 *)v52;
    }
    else
    {
LABEL_48:
      v32 = &v58;
    }
    *a3 = *v32;
    sub_1002F109C(a3 + 8, v15);
    goto LABEL_77;
  }
  v17 = v12 + 4;
  if (*((_BYTE *)v12 + 72))
    v18 = (a2 & 0xFF00000000) == 0;
  else
    v18 = 1;
  if (v18 || (v19 = *(double *)(a1 + 8), v19 <= *(float *)&a2))
  {
    if (!v14)
    {
      v33 = *(_QWORD *)(a1 + 80);
      v36 = *(_QWORD *)(v33 + 8);
      v34 = v33 + 8;
      v35 = v36;
      if (v36)
      {
        do
        {
          v37 = v35;
          v35 = *(_QWORD *)(v35 + 8);
        }
        while (v35);
      }
      else
      {
        do
        {
          v37 = *(_QWORD *)(v34 + 16);
          v18 = *(_QWORD *)v37 == v34;
          v34 = v37;
        }
        while (v18);
      }
      if ((float)(*(float *)(v37 + 56) - *(float *)(a1 + 4)) >= a4)
      {
        sub_100352970((char *)(a1 + 208), (std::string *)(a1 + 96));
        sub_1003500FC((char *)(a1 + 96), (std::string *)(v12 + 4));
        if (v12 == **(uint64_t ***)(a1 + 80))
        {
          if (*(_BYTE *)(a1 + 200))
          {
            if (*(char *)(a1 + 175) < 0)
              operator delete(*(void **)(a1 + 152));
            *(_BYTE *)(a1 + 200) = 0;
          }
        }
        else
        {
          v40 = (uint64_t **)*v12;
          if (*v12)
          {
            do
            {
              v41 = v40;
              v40 = (uint64_t **)v40[1];
            }
            while (v40);
          }
          else
          {
            do
            {
              v41 = (uint64_t **)v12[2];
              v18 = *v41 == v12;
              v12 = (uint64_t *)v41;
            }
            while (v18);
          }
          sub_1003500FC((char *)(a1 + 152), (std::string *)(v41 + 4));
        }
        v38 = &v51;
      }
      else
      {
        v38 = &v58;
        v16 = (__int128 *)v59;
      }
      *a3 = *v38;
      sub_1002F109C(a3 + 8, v16);
      goto LABEL_77;
    }
    if (*(_BYTE *)(a1 + 144))
    {
      buf[0].__r_.__value_.__s.__data_[0] = 0;
      v63 = 0;
      if (v12 != **(uint64_t ***)(a1 + 80))
      {
        v20 = (uint64_t **)*v12;
        if (*v12)
        {
          do
          {
            v21 = v20;
            v20 = (uint64_t **)v20[1];
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (uint64_t **)v12[2];
            v18 = *v21 == v12;
            v12 = (uint64_t *)v21;
          }
          while (v18);
        }
        sub_1003500FC((char *)buf, (std::string *)(v21 + 4));
      }
      v22 = sub_100350188(a1, (float *)(a1 + 96), (uint64_t)v17, buf, a4);
      v23 = &v58;
      if (v22)
        v23 = &v51;
      *a3 = *v23;
      v24 = a3 + 8;
      if (v22)
        v25 = (__int128 *)v52;
      else
        v25 = (__int128 *)v59;
      sub_1002F109C(v24, v25);
      if (v63 && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      {
        v26 = (void *)buf[0].__r_.__value_.__r.__words[0];
LABEL_70:
        operator delete(v26);
        goto LABEL_77;
      }
      goto LABEL_77;
    }
    v42 = 143;
LABEL_86:
    __assert_rtn("checkForRegionChange", "NRBYDeviceMonitor.cpp", v42, "_currentRegion.has_value()");
  }
  v39 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
    *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = *(float *)&a2;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v19;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#regionmon region change supressed: intent score: %f, required score: %f", (uint8_t *)buf, 0x16u);
  }
  if (*((char *)v12 + 55) < 0)
  {
    sub_100004678(v43, (void *)v12[4], v12[5]);
  }
  else
  {
    *(_OWORD *)v43 = *v17;
    v44 = v12[6];
  }
  v45 = *(_OWORD *)(v12 + 7);
  v46 = *((_BYTE *)v12 + 72);
  v47 = 1;
  *a3 = 0;
  sub_1002F109C(a3 + 8, (__int128 *)v43);
  if (v47 && SHIBYTE(v44) < 0)
  {
    v26 = v43[0];
    goto LABEL_70;
  }
LABEL_77:
  if (v54 && v53 < 0)
    operator delete(v52[0]);
  if (v61)
  {
    if (v60 < 0)
      operator delete(v59[0]);
  }
}

void sub_100350040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a40 && a36 < 0)
    operator delete(__p);
  if (a61)
  {
    if (a57 < 0)
      operator delete(a52);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003500FC(char *__dst, std::string *__str)
{
  std::string::value_type v4;
  __int128 v5;
  __int128 v6;

  if (__dst[48])
  {
    std::string::operator=((std::string *)__dst, __str);
    v4 = __str[1].__r_.__value_.__s.__data_[16];
    *(_OWORD *)(__dst + 24) = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
    __dst[40] = v4;
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100004678(__dst, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      *((_QWORD *)__dst + 2) = *((_QWORD *)&__str->__r_.__value_.__l + 2);
      *(_OWORD *)__dst = v5;
    }
    v6 = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
    __dst[40] = __str[1].__r_.__value_.__s.__data_[16];
    *(_OWORD *)(__dst + 24) = v6;
    __dst[48] = 1;
  }
  return __dst;
}

uint64_t sub_100350188(uint64_t a1, float *a2, uint64_t a3, std::string *a4, float a5)
{
  if (sub_100350258((unsigned __int8 *)a3, a2))
    return 0;
  if (*(float *)(a3 + 24) >= a2[6])
  {
    if (!*(_BYTE *)(a1 + 144))
      sub_1003EF458();
    if ((float)(*(float *)(a1 + 120) + *(float *)a1) >= a5)
      return 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 200))
      sub_1003EF430();
    if ((float)(*(float *)(a1 + 176) - *(float *)(a1 + 4)) <= a5)
      return 0;
  }
  sub_100352970((char *)(a1 + 208), (std::string *)(a1 + 96));
  sub_1003500FC((char *)(a1 + 96), (std::string *)a3);
  sub_100352970((char *)(a1 + 152), a4);
  return 1;
}

BOOL sub_100350258(unsigned __int8 *a1, float *a2)
{
  float *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *i;

  if (*((float *)a1 + 6) != a2[6])
    return 0;
  v2 = a2;
  v4 = a1[23];
  if ((v4 & 0x80u) == 0)
    v5 = a1[23];
  else
    v5 = *((_QWORD *)a1 + 1);
  v6 = *((unsigned __int8 *)a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    a2 = *(float **)a2;
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return *((_DWORD *)a1 + 9) == *((_DWORD *)v2 + 9);
    return 0;
  }
  if (a1[23])
  {
    for (i = a1; *i == *(unsigned __int8 *)a2; ++i)
    {
      a2 = (float *)((char *)a2 + 1);
      if (!--v4)
        return *((_DWORD *)a1 + 9) == *((_DWORD *)v2 + 9);
    }
    return 0;
  }
  return *((_DWORD *)a1 + 9) == *((_DWORD *)v2 + 9);
}

uint64_t sub_100350318(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD *v8;
  NSObject *v9;
  const char *v10;
  uint64_t result;
  uint64_t v12;
  _BOOL4 v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  _BOOL4 v25;
  int v26;
  _QWORD *v27;

  v2 = *(_QWORD *)(a1 + 80);
  v5 = *(uint64_t ***)(v2 + 8);
  v3 = (uint64_t *)(v2 + 8);
  v4 = v5;
  if (!v5)
    goto LABEL_14;
  v6 = v3;
  do
  {
    v7 = v4 + 1;
    if (*((float *)v4 + 14) > a2)
    {
      v7 = v4;
      v6 = (uint64_t *)v4;
    }
    v4 = (uint64_t **)*v7;
  }
  while (*v7);
  if (v6 == v3)
  {
LABEL_14:
    v12 = qword_10085F520;
    v13 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v13)
      return result;
    LOWORD(v26) = 0;
    v14 = "#regionmon #spatialGesturesPredictor Current region = candidateOutsideKnownRegions, shouldPredictIntent = false";
    v15 = v12;
    v16 = 2;
    goto LABEL_16;
  }
  v8 = v6 + 4;
  if (*((_BYTE *)v6 + 72))
  {
    v9 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      return 1;
    if (*((char *)v6 + 55) < 0)
      v8 = (_QWORD *)*v8;
    v26 = 136315138;
    v27 = v8;
    v10 = "#regionmon #spatialGesturesPredictor Current region = %s, shouldPredictIntent = true, since this region requires user intent";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v26, 0xCu);
    return 1;
  }
  if (v6 != **(uint64_t ***)(a1 + 80))
  {
    v17 = (uint64_t *)*v6;
    if (*v6)
    {
      do
      {
        v18 = v17;
        v17 = (uint64_t *)v17[1];
      }
      while (v17);
    }
    else
    {
      v19 = v6;
      do
      {
        v18 = (uint64_t *)v19[2];
        v20 = *v18 == (_QWORD)v19;
        v19 = v18;
      }
      while (v20);
    }
    if (*((_BYTE *)v18 + 72))
    {
      v9 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        return 1;
      if (*((char *)v6 + 55) < 0)
        v8 = (_QWORD *)*v8;
      v26 = 136315138;
      v27 = v8;
      v10 = "#regionmon #spatialGesturesPredictor Current region = %s, shouldPredictIntent = true, since inner adjacent r"
            "egion requires user intent";
      goto LABEL_12;
    }
  }
  v21 = (uint64_t *)v6[1];
  if (v21)
  {
    do
    {
      v22 = v21;
      v21 = (uint64_t *)*v21;
    }
    while (v21);
  }
  else
  {
    v23 = v6;
    do
    {
      v22 = (uint64_t *)v23[2];
      v20 = *v22 == (_QWORD)v23;
      v23 = v22;
    }
    while (!v20);
  }
  if (v22 != v3 && *((_BYTE *)v22 + 72))
  {
    v9 = qword_10085F520;
    if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      return 1;
    if (*((char *)v6 + 55) < 0)
      v8 = (_QWORD *)*v8;
    v26 = 136315138;
    v27 = v8;
    v10 = "#regionmon #spatialGesturesPredictor Current region = %s, shouldPredictIntent = true, since outer adjacent reg"
          "ion requires user intent";
    goto LABEL_12;
  }
  v24 = qword_10085F520;
  v25 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v25)
  {
    if (*((char *)v6 + 55) < 0)
      v8 = (_QWORD *)*v8;
    v26 = 136315138;
    v27 = v8;
    v14 = "#regionmon #spatialGesturesPredictor Current region = %s, shouldPredictIntent = false, since neither this regi"
          "on nor adjacent ones require user intent";
    v15 = v24;
    v16 = 12;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v26, v16);
    return 0;
  }
  return result;
}

uint64_t sub_1003505E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _OWORD *a6, int a7, int a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  uint64_t *v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  __int128 *v53;
  _QWORD *v54;
  _QWORD *v55;
  BOOL v56;
  NSObject *v57;
  NSObject *v58;
  __int128 v59;
  __int128 v60;
  NSObject *v61;
  __int128 v62;
  __int128 v63;
  NSObject *v64;
  NSObject *v65;
  const char *v67;
  int v68;
  NSObject *v69;
  std::runtime_error *exception;
  uint64_t v71;
  _QWORD **v72;
  __int128 v74;
  __int128 v75;
  _BYTE buf[24];

  *(_QWORD *)a1 = a2;
  v15 = a1 + 40;
  sub_100027674(a1 + 8, a3);
  sub_100027674(v15, a4);
  v71 = a2;
  *(_QWORD *)(a1 + 72) = *a5;
  v16 = a5[1];
  v72 = (_QWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  v19 = (_OWORD *)(a1 + 112);
  v20 = *a5;
  v21 = (std::__shared_weak_count *)a5[1];
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    *v19 = a6[2];
    v24 = a6[3];
    v25 = a6[4];
    v26 = a6[6];
    *(_OWORD *)(a1 + 160) = a6[5];
    *(_OWORD *)(a1 + 176) = v26;
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = v25;
    *(_QWORD *)(a1 + 192) = v20;
    *(_QWORD *)(a1 + 200) = v21;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  else
  {
    *v19 = a6[2];
    v28 = a6[3];
    v29 = a6[4];
    v30 = a6[6];
    *(_OWORD *)(a1 + 160) = a6[5];
    *(_OWORD *)(a1 + 176) = v30;
    *(_OWORD *)(a1 + 128) = v28;
    *(_OWORD *)(a1 + 144) = v29;
    *(_QWORD *)(a1 + 192) = v20;
    *(_QWORD *)(a1 + 200) = 0;
  }
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  if (v21)
  {
    v31 = (unint64_t *)&v21->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  sub_1002F0CAC((uint64_t *)(a1 + 392), (uint64_t)a6);
  memcpy((void *)(a1 + 416), (char *)a6 + 24, 0x18CuLL);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)((char *)a6 + 424);
  sub_100232898((uint64_t *)(a1 + 832), (uint64_t)a6 + 440);
  v33 = a6[29];
  v34 = a6[31];
  *(_OWORD *)(a1 + 872) = a6[30];
  *(_OWORD *)(a1 + 888) = v34;
  *(_OWORD *)(a1 + 856) = v33;
  v35 = a6[32];
  v36 = a6[33];
  v37 = a6[35];
  *(_OWORD *)(a1 + 936) = a6[34];
  *(_OWORD *)(a1 + 952) = v37;
  *(_OWORD *)(a1 + 904) = v35;
  *(_OWORD *)(a1 + 920) = v36;
  v38 = a6[36];
  v39 = a6[37];
  v40 = a6[39];
  *(_OWORD *)(a1 + 1000) = a6[38];
  *(_OWORD *)(a1 + 1016) = v40;
  *(_OWORD *)(a1 + 968) = v38;
  *(_OWORD *)(a1 + 984) = v39;
  v41 = a6[40];
  v42 = a6[41];
  v43 = a6[43];
  *(_OWORD *)(a1 + 1064) = a6[42];
  *(_OWORD *)(a1 + 1080) = v43;
  *(_OWORD *)(a1 + 1032) = v41;
  *(_OWORD *)(a1 + 1048) = v42;
  *(_DWORD *)(a1 + 1096) = a7;
  *(_DWORD *)(a1 + 1104) = a8;
  *(_OWORD *)(a1 + 1112) = 0u;
  v44 = *(_QWORD *)(a1 + 400);
  if (!v44)
    goto LABEL_70;
  v45 = a1 + 400;
  do
  {
    v46 = *(_DWORD *)(v44 + 28);
    v47 = v46 < a7;
    if (v46 >= a7)
      v48 = (uint64_t *)v44;
    else
      v48 = (uint64_t *)(v44 + 8);
    if (!v47)
      v45 = v44;
    v44 = *v48;
  }
  while (*v48);
  if (v45 == a1 + 400 || *(_DWORD *)(v45 + 28) > a7)
  {
LABEL_70:
    v69 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
      sub_1003EF480(v69);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "technology mapping not found for ranging technology.");
  }
  v49 = *(_DWORD *)(v45 + 32);
  *(_DWORD *)(a1 + 1100) = v49;
  switch(v49)
  {
    case 1:
      operator new();
    case 3:
      operator new();
    case 2:
      operator new();
  }
  v74 = 0uLL;
  *(_QWORD *)&v75 = 0;
  v50 = (uint64_t)(*v72 + 1);
  v51 = (_QWORD *)**v72;
  if (v51 != (_QWORD *)v50)
  {
    v52 = 0;
    do
    {
      if (*((_BYTE *)v51 + 72))
      {
        v53 = (__int128 *)(v51 + 4);
        if (v52 >= (unint64_t)v75)
        {
          v52 = sub_100352B50((uint64_t *)&v74, v53);
        }
        else
        {
          sub_100352ADC((uint64_t)&v74, v53);
          v52 += 48;
        }
        *((_QWORD *)&v74 + 1) = v52;
      }
      v54 = (_QWORD *)v51[1];
      if (v54)
      {
        do
        {
          v55 = v54;
          v54 = (_QWORD *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = (_QWORD *)v51[2];
          v56 = *v55 == (_QWORD)v51;
          v51 = v55;
        }
        while (!v56);
      }
      v51 = v55;
    }
    while (v55 != (_QWORD *)v50);
    if ((_QWORD)v74 != v52)
    {
      v57 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor", buf, 2u);
      }
      if ((a7 - 5) < 0xFFFFFFFD || a8 == 2)
      {
        switch(a8)
        {
          case 0:
            v58 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v71;
              _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor with intent predictor AoA for dev %llx", buf, 0xCu);
            }
            v59 = *(_OWORD *)(a1 + 480);
            xmmword_1008530E8 = *(_OWORD *)(a1 + 464);
            unk_1008530F8 = v59;
            qword_100853108 = *(_QWORD *)(a1 + 496);
            v60 = *(_OWORD *)(a1 + 448);
            xmmword_1008530C8 = *(_OWORD *)(a1 + 432);
            unk_1008530D8 = v60;
            operator new();
          case 1:
            v65 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v71;
              _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor with intent predictor SpatialGeatures for dev %llx", buf, 0xCu);
            }
            if (*(_BYTE *)(a9 + 16))
              operator new();
            v67 = "gestureClassifiers.has_value()";
            v68 = 347;
            goto LABEL_69;
          case 2:
            v61 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v71;
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor with intent predictor None for dev %llx", buf, 0xCu);
            }
            v62 = *(_OWORD *)(a1 + 480);
            xmmword_1008530E8 = *(_OWORD *)(a1 + 464);
            unk_1008530F8 = v62;
            qword_100853108 = *(_QWORD *)(a1 + 496);
            v63 = *(_OWORD *)(a1 + 448);
            xmmword_1008530C8 = *(_OWORD *)(a1 + 432);
            unk_1008530D8 = v63;
            operator new();
          case 3:
            v64 = qword_10085F520;
            if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v71;
              _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor with intent predictor DualAnchorAntennaSpatialGestures for dev %llx", buf, 0xCu);
            }
            if (*(_BYTE *)(a9 + 16))
              operator new();
            v67 = "gestureClassifiers.has_value()";
            v68 = 353;
            goto LABEL_69;
          default:
            goto LABEL_65;
        }
      }
      v67 = "typePredictor == common::TypeOfPredictor::None";
      v68 = 329;
LABEL_69:
      __assert_rtn("DeviceMonitor", "NRBYDeviceMonitor.cpp", v68, v67);
    }
  }
LABEL_65:
  *(_QWORD *)buf = &v74;
  sub_1002F0A00((void ***)buf);
  return a1;
}

void sub_1003512A0()
{
  operator delete();
}

uint64_t sub_1003514A8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 256) && *(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(_BYTE *)(a1 + 200) && *(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(_BYTE *)(a1 + 144) && *(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_10001AE68(a1 + 80);
  return a1;
}

uint64_t sub_100351518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _OWORD *a6, int a7, int a8, uint64_t a9)
{
  return sub_1003505E4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_100351524(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float v7;
  double v8;
  __int16 v9;
  uint64_t v10;
  double v11;
  double v12;
  char v13;
  float v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  int v38;
  float v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  double v45;
  int v46;
  const mach_header_64 *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  NSObject *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD v80[11];
  uint64_t v81;
  char v82;
  void *__p[2];
  char v84;
  char v85;
  char v86[23];
  char v87;
  char v88;
  _OWORD v89[11];
  uint64_t v90;
  char v91;
  void *v92[2];
  char v93;
  char v94;
  void *v95[2];
  char v96;
  char v97;
  void *v98[2];
  char v99;
  char v100;
  void *v101[2];
  char v102;
  char v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int16 v116;
  _QWORD v117[2];
  char v118;
  char v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char v123;
  uint8_t buf[4];
  _BYTE v125[18];
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  char v130;
  _OWORD v131[2];
  __int128 v132;
  _BYTE v133[15];

  v7 = *((float *)a2 + 4);
  v8 = *((double *)a2 + 1);
  v9 = *((_WORD *)a2 + 40);
  *(_QWORD *)&v133[6] = *((_QWORD *)a2 + 11);
  v133[14] = *((_BYTE *)a2 + 96);
  *(_QWORD *)((char *)&v132 + 7) = *((_QWORD *)a2 + 13);
  HIBYTE(v132) = *((_BYTE *)a2 + 112);
  *(_OWORD *)((char *)v131 + 7) = a2[8];
  v131[1] = *(__int128 *)((char *)a2 + 137);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = v7;
  v116 = v9;
  *(_QWORD *)((char *)v117 + 7) = *(_QWORD *)&v133[7];
  v117[0] = *(_QWORD *)v133;
  v118 = 0;
  v119 = 0;
  v120 = v132;
  v122 = v131[1];
  v121 = v131[0];
  v123 = 1;
  v12 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t, __int16 *, double, double))(*(_QWORD *)v10 + 16))(v10, a3, &v116, v7, v8));
  if (!v13)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 184) = 0;
    return;
  }
  v14 = v12;
  v15 = a2[9];
  v112 = a2[8];
  v113 = v15;
  v114 = a2[10];
  v115 = *((_QWORD *)a2 + 22);
  v16 = a2[5];
  v108 = a2[4];
  v109 = v16;
  v17 = a2[7];
  v110 = a2[6];
  v111 = v17;
  v18 = a2[1];
  v104 = *a2;
  v105 = v18;
  v19 = a2[3];
  v106 = a2[2];
  v107 = v19;
  *(float *)&v105 = v14;
  sub_10034343C(*(_QWORD **)(a1 + 88), *(double *)&v106);
  v21 = 0xBFF0000000000000;
  if (v22)
    v21 = v20;
  *((_QWORD *)&v106 + 1) = v21;
  v23 = *(_DWORD *)(a1 + 1104);
  if (v23 < 2)
  {
    v24 = *(_QWORD *)(a1 + 1112);
    if (!v24)
      goto LABEL_24;
    v25 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v75 = *(_QWORD *)a1;
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v125 = v75;
      _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#regionmon Consuming range result for default intent predictor for device identifier %llu", buf, 0xCu);
      v24 = *(_QWORD *)(a1 + 1112);
    }
LABEL_21:
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v24 + 24))(v24, &v104);
    goto LABEL_24;
  }
  if (v23 != 3)
    goto LABEL_24;
  if (!*((_BYTE *)a2 + 81))
    sub_1003EF554();
  v26 = *((unsigned __int8 *)a2 + 80);
  if (v26 == 2)
  {
    v24 = *(_QWORD *)(a1 + 1120);
    if (!v24)
      goto LABEL_24;
    v28 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v77 = *(_QWORD *)a1;
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v125 = v77;
      _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#regionmon Consuming range result for secondary intent predictor for device identifier 0x%llx", buf, 0xCu);
      v24 = *(_QWORD *)(a1 + 1120);
    }
    goto LABEL_21;
  }
  if (v26 == 1)
  {
    v24 = *(_QWORD *)(a1 + 1112);
    if (!v24)
      goto LABEL_24;
    v27 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v76 = *(_QWORD *)a1;
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v125 = v76;
      _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#regionmon Consuming range result for default intent predictor for device identifier 0x%llx", buf, 0xCu);
      v24 = *(_QWORD *)(a1 + 1112);
    }
    goto LABEL_21;
  }
  v29 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003EF4E8(a1, v29, v30, v31, v32, v33, v34, v35);
LABEL_24:
  v36 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v74 = *(_QWORD *)a2;
    *(_DWORD *)buf = 134218752;
    *(double *)v125 = v8;
    *(_WORD *)&v125[8] = 2048;
    *(_QWORD *)&v125[10] = v74;
    v126 = 2048;
    v127 = v11;
    v128 = 2048;
    v129 = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#regionmon time:%f, dev:%llx, raw:%f, filtered:%f", buf, 0x2Au);
  }
  v37 = *(unsigned __int8 *)(a1 + 384);
  v38 = *(_DWORD *)(a1 + 1104);
  v39 = 0.0;
  if (v38)
  {
    if (v38 == 1)
    {
      v46 = sub_100350318(a1 + 112, v14);
      v47 = 0;
      v48 = *(_QWORD *)(a1 + 1112);
      if (!v48 || !v46)
        goto LABEL_59;
      v49 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v50 = *(_QWORD *)a1;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)v125 = v50;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#regionmon using default intent predictor for dev 0x%llx", buf, 0xCu);
        v48 = *(_QWORD *)(a1 + 1112);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
      goto LABEL_55;
    }
    if (v38 == 3)
    {
      v40 = sub_100350318(a1 + 112, v14);
      if (!*((_BYTE *)a2 + 81))
        sub_1003EF4C0();
      v41 = *((unsigned __int8 *)a2 + 80);
      if (v41 == 2)
      {
        v53 = *(_QWORD *)(a1 + 1120);
        if (v53)
          v54 = v40;
        else
          v54 = 0;
        if (v54 == 1)
        {
          v55 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          {
            v79 = *(_QWORD *)a1;
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)v125 = v79;
            _os_log_debug_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "#regionmon using secondary SG predictory for dev 0x%llx", buf, 0xCu);
            v53 = *(_QWORD *)(a1 + 1120);
          }
          v45 = (*(double (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
          goto LABEL_55;
        }
      }
      else if (v41 == 1)
      {
        v42 = *(_QWORD *)(a1 + 1112);
        if (v42)
          v43 = v40;
        else
          v43 = 0;
        if (v43 == 1)
        {
          v44 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          {
            v78 = *(_QWORD *)a1;
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)v125 = v78;
            _os_log_debug_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#regionmon using default SG predictor for dev 0x%llx", buf, 0xCu);
            v42 = *(_QWORD *)(a1 + 1112);
          }
LABEL_38:
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
LABEL_55:
          v39 = v45;
          v47 = &_mh_execute_header;
          goto LABEL_59;
        }
      }
      else
      {
        v56 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
          sub_1003EF4E8(a1, v56, v57, v58, v59, v60, v61, v62);
      }
    }
  }
  else
  {
    v42 = *(_QWORD *)(a1 + 1112);
    if (v42)
    {
      v51 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v52 = *(_QWORD *)a1;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)v125 = v52;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#regionmon using default intent predictor for dev 0x%llx", buf, 0xCu);
        v42 = *(_QWORD *)(a1 + 1112);
      }
      goto LABEL_38;
    }
  }
  v47 = 0;
LABEL_59:
  v63 = v37 != 0;
  v64 = (unint64_t)v47 | LODWORD(v39);
  sub_10034FB64(a1 + 112, v64, (char *)buf, v14);
  if (buf[0])
    v65 = 0;
  else
    v65 = v63;
  if (!v65)
  {
    sub_1002F109C((char *)v101, (__int128 *)(a1 + 208));
    sub_1002F109C((char *)v98, (__int128 *)(a1 + 320));
    v68 = *(_QWORD *)a1;
    sub_1002F109C((char *)v95, (__int128 *)v101);
    sub_1002F109C((char *)v92, (__int128 *)v98);
    v89[8] = v112;
    v89[9] = v113;
    v89[10] = v114;
    v90 = v115;
    v89[4] = v108;
    v89[5] = v109;
    v89[6] = v110;
    v89[7] = v111;
    v89[0] = v104;
    v89[1] = v105;
    v89[2] = v106;
    v89[3] = v107;
    v91 = 1;
    sub_100351ED4(a1 + 8, v68, (uint64_t)v95, (uint64_t)v92, (uint64_t)v89, v64, 0, v8);
    if (v94 && v93 < 0)
      operator delete(v92[0]);
    if (!v97 || (v96 & 0x80000000) == 0)
      goto LABEL_81;
    v67 = v95[0];
    goto LABEL_80;
  }
  if (v130)
  {
    sub_1002F109C((char *)v101, (__int128 *)&v125[4]);
    if (v103)
    {
      sub_1002F109C((char *)v98, (__int128 *)(a1 + 208));
      if (v100)
      {
        if (!v103)
          sub_10000BA44();
        if (sub_100350258((unsigned __int8 *)v98, (float *)v101))
          goto LABEL_81;
      }
      v66 = *(_QWORD *)a1;
      sub_1002F109C(v86, (__int128 *)v101);
      sub_1002F109C((char *)__p, (__int128 *)v98);
      v80[8] = v112;
      v80[9] = v113;
      v80[10] = v114;
      v81 = v115;
      v80[4] = v108;
      v80[5] = v109;
      v80[6] = v110;
      v80[7] = v111;
      v80[0] = v104;
      v80[1] = v105;
      v80[2] = v106;
      v80[3] = v107;
      v82 = 1;
      sub_100351ED4(a1 + 8, v66, (uint64_t)v86, (uint64_t)__p, (uint64_t)v80, v64, 1, v8);
      if (v85 && v84 < 0)
        operator delete(__p[0]);
      if (!v88 || (v87 & 0x80000000) == 0)
        goto LABEL_81;
      v67 = *(void **)v86;
LABEL_80:
      operator delete(v67);
LABEL_81:
      if (v100 && v99 < 0)
        operator delete(v98[0]);
      if (v103 && v102 < 0)
        operator delete(v101[0]);
    }
  }
  *(double *)(a1 + 376) = v8;
  *(_BYTE *)(a1 + 384) = 1;
  v69 = v113;
  *(_OWORD *)(a4 + 128) = v112;
  *(_OWORD *)(a4 + 144) = v69;
  *(_OWORD *)(a4 + 160) = v114;
  *(_QWORD *)(a4 + 176) = v115;
  v70 = v109;
  *(_OWORD *)(a4 + 64) = v108;
  *(_OWORD *)(a4 + 80) = v70;
  v71 = v111;
  *(_OWORD *)(a4 + 96) = v110;
  *(_OWORD *)(a4 + 112) = v71;
  v72 = v105;
  *(_OWORD *)a4 = v104;
  *(_OWORD *)(a4 + 16) = v72;
  v73 = v107;
  *(_OWORD *)(a4 + 32) = v106;
  *(_OWORD *)(a4 + 48) = v73;
  *(_BYTE *)(a4 + 184) = 1;
  if (v130)
  {
    if (SHIBYTE(v127) < 0)
      operator delete(*(void **)&v125[4]);
  }
}

void sub_100351DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  if (a42 && a38 < 0)
    operator delete(__p);
  if (a52 && a48 < 0)
    operator delete(a43);
  if (LOBYTE(STACK[0x290]) && SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (LOBYTE(STACK[0x2C8]) && SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  if (*(_BYTE *)(v52 - 184))
  {
    if (*(char *)(v52 - 209) < 0)
      operator delete(*(void **)(v52 - 232));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100351ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  uint64_t v8;
  char v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  v13 = a6;
  v12 = a8;
  v11 = a2;
  v10 = a7;
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, double *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t *, char *))(*(_QWORD *)v8 + 48))(v8, &v12, &v11, a3, a4, a5, &v13, &v10);
}

BOOL sub_100351F34(uint64_t a1)
{
  unsigned int v1;
  _QWORD *v2;

  v1 = *(_DWORD *)(a1 + 1104);
  if (v1 < 2)
  {
    v2 = (_QWORD *)(a1 + 1112);
    return *v2 != 0;
  }
  if (v1 == 3 && *(_QWORD *)(a1 + 1112))
  {
    v2 = (_QWORD *)(a1 + 1120);
    return *v2 != 0;
  }
  return 0;
}

uint64_t sub_100351F74(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 1104);
  if (v4 < 2)
  {
    result = *(_QWORD *)(result + 1112);
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  }
  if (v4 == 3)
  {
    v5 = *(_QWORD *)(result + 1112);
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    result = *(_QWORD *)(v3 + 1120);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  }
  return result;
}

BOOL sub_100351FEC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1100) == 3;
}

BOOL sub_100351FFC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) == *(_DWORD *)(a1 + 1096);
}

void sub_100352010(uint64_t a1, double a2)
{
  uint64_t v4;
  int v5;
  _QWORD v6[6];
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24[2];
  char v25;
  char v26;
  void *v27[2];
  char v28;
  char v29;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 32))(*(_QWORD *)(a1 + 88));
  sub_10034FB1C(a1 + 112);
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 1104);
  sub_1002F109C((char *)v27, (__int128 *)(a1 + 208));
  sub_1002F109C((char *)v24, (__int128 *)(a1 + 320));
  v6[0] = v4;
  *(double *)&v6[1] = a2;
  v7 = 0;
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = 0x3C47A0000;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  v17 = v5;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  sub_100351ED4(a1 + 8, v4, (uint64_t)v27, (uint64_t)v24, (uint64_t)v6, 0x13F800000, 0, a2);
  if (v26 && v25 < 0)
    operator delete(v24[0]);
  if (v29)
  {
    if (v28 < 0)
      operator delete(v27[0]);
  }
}

void sub_100352130(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 112) && *(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(_BYTE *)(v1 - 56))
  {
    if (*(char *)(v1 - 81) < 0)
      operator delete(*(void **)(v1 - 104));
  }
  _Unwind_Resume(exception_object);
}

void sub_100352174(uint64_t a1, __int128 *a2)
{
  double v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  double v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  BOOL v19;
  float v20;
  uint64_t v21;
  float v22;
  NSObject *v23;
  NSObject *v24;
  double v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[2];
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  char v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD v54[2];
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  char v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  _QWORD v75[2];
  float v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  void *v96[2];
  char v97;
  char v98;
  void *v99[2];
  char v100;
  char v101;
  void *v102[2];
  char v103;
  char v104;
  void *v105[2];
  char v106;
  float v107;
  char v108;
  __int128 v109;
  int v110;
  __int128 v111;
  uint64_t v112;
  void *__p;
  void *v114;
  uint64_t v115;
  __int128 v116;
  _QWORD *v117;
  void *v118;
  double v119;
  uint64_t v120;
  int v121;
  unsigned __int8 v122;
  char v123;
  int v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint8_t buf[4];
  double v128;
  __int16 v129;
  _QWORD *v130;
  __int16 v131;
  uint64_t v132;
  uint8_t v133[24];

  v4 = *(double *)a2;
  v5 = *(_QWORD *)(a1 + 88);
  v109 = *a2;
  v110 = *((_DWORD *)a2 + 4);
  v6 = (__int128 *)((char *)a2 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    sub_100004678(&v111, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v111 = *v6;
    v112 = *((_QWORD *)a2 + 5);
  }
  v114 = 0;
  __p = 0;
  v115 = 0;
  sub_1001530EC(&__p, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6));
  v116 = *(__int128 *)((char *)a2 + 72);
  (*(void (**)(_QWORD **__return_ptr, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v5 + 24))(&v117, v5, &v109, 0);
  v7 = v118;
  v8 = v119;
  v31 = v117;
  v32 = v120;
  v9 = v121;
  v10 = v122;
  v11 = v124;
  v12 = v125;
  v13 = v126;
  if (__p)
  {
    v114 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v112) < 0)
  {
    operator delete((void *)v111);
    if (!v13)
      return;
  }
  else if (!v13)
  {
    return;
  }
  if (v10)
  {
    v14 = *(_QWORD *)(a1 + 72);
    if ((_DWORD)v9)
    {
      v117 = *(_QWORD **)v14;
      sub_100310398(&v117, v9 - 1);
      v15 = (float *)v117;
    }
    else
    {
      v18 = *(float **)(v14 + 8);
      v16 = (float *)(v14 + 8);
      v17 = v18;
      if (v18)
      {
        do
        {
          v15 = v17;
          v17 = (float *)*((_QWORD *)v17 + 1);
        }
        while (v17);
      }
      else
      {
        do
        {
          v15 = (float *)*((_QWORD *)v16 + 2);
          v19 = *(_QWORD *)v15 == (_QWORD)v16;
          v16 = v15;
        }
        while (v19);
      }
    }
    v20 = v15[14] + -0.101;
    sub_10034FB64(a1 + 112, 0x13F800000, (char *)&v117, v20);
    if ((_BYTE)v117)
    {
      sub_1002F109C((char *)v105, (__int128 *)(a1 + 208));
      sub_1002F109C((char *)v102, (__int128 *)(a1 + 320));
      v21 = *(_QWORD *)a1;
      v22 = v107;
      if (v12 && v11 < *(_DWORD *)(a1 + 816))
      {
        v23 = qword_10085F520;
        if ((_DWORD)v9)
        {
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
          {
            if (!v7)
              sub_10000BA44();
            *(_DWORD *)buf = 134218496;
            v128 = v22;
            v129 = 2048;
            v130 = v31;
            v131 = 1024;
            LODWORD(v132) = v11;
            _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#regionmon BT threshold detector early return with estimate, range:%f  RSSI: %f, numSamples: %d", buf, 0x1Cu);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        {
          if (!v7)
            sub_10000BA44();
          sub_1003EF57C(v133, (uint64_t)v31, v11, v23);
        }
      }
      v24 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_INFO))
      {
        v25 = *((double *)a2 + 10);
        if (*((char *)a2 + 47) >= 0)
          v26 = v6;
        else
          v26 = (_OWORD *)*((_QWORD *)a2 + 3);
        v27 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134218498;
        v128 = v25;
        v129 = 2080;
        v130 = v26;
        v131 = 2048;
        v132 = v27;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#regionmon Device Monitor suggested region change for device %llu (%s) with current RSSI of %f", buf, 0x20u);
      }
      v28 = *(_QWORD *)a1;
      sub_1002F109C((char *)v99, (__int128 *)v105);
      sub_1002F109C((char *)v96, (__int128 *)v102);
      v75[0] = v21;
      *(double *)&v75[1] = v4;
      v76 = v22;
      v77 = 3;
      v80 = 0;
      v78 = 0;
      v79 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0u;
      v88 = 0u;
      v89 = 0x200000000;
      v90 = 0;
      v91 = 0;
      v93 = 0;
      v92 = 0;
      v94 = 0;
      v95 = 1;
      sub_100351ED4(a1 + 8, v28, (uint64_t)v99, (uint64_t)v96, (uint64_t)v75, 0x13F800000, 0, v4);
      if (v98 && v97 < 0)
        operator delete(v96[0]);
      if (v101 && v100 < 0)
        operator delete(v99[0]);
      if (v104 && v103 < 0)
        operator delete(v102[0]);
      if (v108 && v106 < 0)
        operator delete(v105[0]);
    }
    if (!*(_BYTE *)(a1 + 884) || !(_BYTE)v32)
      goto LABEL_51;
    v29 = *(_QWORD *)a1;
    v30 = *(_DWORD *)(a1 + 232);
    if (*(_BYTE *)(a1 + 104))
    {
      if (vabdd_f64(*(double *)(a1 + 96), v8) <= 0.005)
        goto LABEL_51;
      v54[0] = *(_QWORD *)a1;
      *(double *)&v54[1] = v4;
      v55 = v30;
      v56 = 3;
      v59 = 0;
      v57 = 0;
      v58 = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v66 = 0u;
      v67 = 0u;
      v68 = 0x200000000;
      v69 = 0;
      v70 = 0;
      v71 = v8;
      v72 = v32;
      v73 = 0;
      v74 = 1;
      sub_1003527FC(a1 + 40, v29, (uint64_t)v54, v4);
    }
    else
    {
      v33[0] = *(_QWORD *)a1;
      *(double *)&v33[1] = v4;
      v34 = v30;
      v35 = 3;
      v38 = 0;
      v36 = 0;
      v37 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0u;
      v46 = 0u;
      v47 = 0x200000000;
      v48 = 0;
      v49 = 0;
      v50 = v8;
      v51 = v32;
      v52 = 0;
      v53 = 1;
      sub_1003527FC(a1 + 40, v29, (uint64_t)v33, v4);
    }
    *(double *)(a1 + 96) = v8;
    *(_BYTE *)(a1 + 104) = 1;
LABEL_51:
    *(double *)(a1 + 376) = v4;
    *(_BYTE *)(a1 + 384) = 1;
    if (v123)
    {
      if (SHIBYTE(v120) < 0)
        operator delete(v118);
    }
  }
}

void sub_10035271C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2F0]) && SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (LOBYTE(STACK[0x328]) && SLOBYTE(STACK[0x30F]) < 0)
    operator delete((void *)STACK[0x2F8]);
  if (LOBYTE(STACK[0x3C0]))
  {
    if (SLOBYTE(STACK[0x3A7]) < 0)
      operator delete((void *)STACK[0x390]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003527FC(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  double v7;

  v7 = a4;
  v6 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, double *, uint64_t *, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v7, &v6, a3);
}

void sub_100352840(uint64_t a1, double a2)
{
  uint64_t v4;
  _BYTE v5[192];
  void *__p;
  char v7;
  char v8;
  void *v9[2];
  char v10;
  char v11;
  __int128 v12;
  char v13;
  char v14;

  sub_1002F109C((char *)&v12, (__int128 *)(a1 + 208));
  v4 = *(_QWORD *)a1;
  sub_1002F109C((char *)v9, &v12);
  LOBYTE(__p) = 0;
  v8 = 0;
  v5[0] = 0;
  v5[184] = 0;
  sub_100351ED4(a1 + 8, v4, (uint64_t)v9, (uint64_t)&__p, (uint64_t)v5, 0x13F800000, 1, a2);
  if (v8 && v7 < 0)
    operator delete(__p);
  if (v11 && v10 < 0)
    operator delete(v9[0]);
  if (v14)
  {
    if (v13 < 0)
      operator delete((void *)v12);
  }
}

void sub_100352914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (a43 && a39 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v43 - 112) && *(char *)(v43 - 137) < 0)
    operator delete(*(void **)(v43 - 160));
  if (*(_BYTE *)(v43 - 56))
  {
    if (*(char *)(v43 - 81) < 0)
      operator delete(*(void **)(v43 - 104));
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100352970(char *__dst, std::string *__str)
{
  std::string::value_type v4;
  __n128 result;
  __int128 v6;

  if (__dst[48] == __str[2].__r_.__value_.__s.__data_[0])
  {
    if (__dst[48])
    {
      std::string::operator=((std::string *)__dst, __str);
      v4 = __str[1].__r_.__value_.__s.__data_[16];
      result = *(__n128 *)&__str[1].__r_.__value_.__l.__data_;
      *(__n128 *)(__dst + 24) = result;
      __dst[40] = v4;
    }
  }
  else if (__dst[48])
  {
    if (__dst[23] < 0)
      operator delete(*(void **)__dst);
    __dst[48] = 0;
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100004678(__dst, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      v6 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      *((_QWORD *)__dst + 2) = *((_QWORD *)&__str->__r_.__value_.__l + 2);
      *(_OWORD *)__dst = v6;
    }
    result = *(__n128 *)&__str[1].__r_.__value_.__l.__data_;
    __dst[40] = __str[1].__r_.__value_.__s.__data_[16];
    *(__n128 *)(__dst + 24) = result;
    __dst[48] = 1;
  }
  return result;
}

__n128 sub_100352A20(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __n128 result;
  __int128 v6;

  if (*(unsigned __int8 *)(a1 + 48) == *((unsigned __int8 *)a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      result = *(__n128 *)((char *)a2 + 24);
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(__n128 *)(a1 + 24) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    result = *(__n128 *)((char *)a2 + 24);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(__n128 *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return result;
}

__n128 sub_100352ADC(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(*(_BYTE **)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)((char *)a2 + 24);
  *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_100352B48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100352B50(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_100026E7C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002D1DB8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v18 = v11;
  v19 = &v10[48 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100004678(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v18;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v13 = &v10[48 * v4];
  v14 = *(__int128 *)((char *)a2 + 24);
  v13[40] = *((_BYTE *)a2 + 40);
  *(_OWORD *)(v13 + 24) = v14;
  v18 = v11 + 48;
  sub_1002F0A8C(a1, v17);
  v15 = a1[1];
  sub_1002F0C24((uint64_t)v17);
  return v15;
}

void sub_100352C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002F0C24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100352C88()
{
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = xmmword_10047B2F4;
  v9 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085E8D0, (int *)&v8, 3);
  xmmword_10085E8E8 = xmmword_10046E050;
  unk_10085E8F8 = xmmword_10046E060;
  qword_10085E910 = 0;
  unk_10085E918 = 0;
  qword_10085E908 = 0x3FD999999999999ALL;
  unk_10085E920 = xmmword_10046E070;
  dword_10085E930 = 5;
  qword_10085E938 = 0x4000000000000000;
  dword_10085E940 = 5;
  byte_10085E948 = 0;
  unk_10085E94C = 0x30000000ALL;
  xmmword_10085E958 = xmmword_10046E080;
  unk_10085E968 = xmmword_10046E090;
  xmmword_10085E978 = xmmword_10046E0A0;
  qword_10085E988 = 0x3FE3333333333333;
  dword_10085E990 = 3;
  xmmword_10085E998 = xmmword_10046E0B0;
  unk_10085E9A8 = xmmword_10046E090;
  xmmword_10085E9B8 = xmmword_10046E080;
  qword_10085E9C8 = 0x3FE3333333333333;
  byte_10085E9D0 = 0;
  xmmword_10085E9D8 = xmmword_10046E0C0;
  unk_10085E9E8 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v6 = _Q0;
  xmmword_10085E9F8 = _Q0;
  qword_10085EA08 = 0xBFD3333333333333;
  xmmword_10085EA10 = xmmword_10046E0E0;
  qword_10085EA20 = 0x3E99999A40000000;
  xmmword_10085EA28 = xmmword_10046E060;
  qword_10085EA40 = 0;
  unk_10085EA48 = 0;
  qword_10085EA38 = 0x3FD999999999999ALL;
  xmmword_10085EA50 = xmmword_10046E070;
  dword_10085EA60 = 5;
  qword_10085EA68 = 0x4000000000000000;
  dword_10085EA70 = 4;
  qword_10085EA78 = 0x300000008;
  qword_10085EA80 = 0xC04E800000000000;
  v7 = 0xC04E800000000000;
  sub_10018252C((uint64_t)algn_10085EA88, (double *)&v7, 1);
  xmmword_10085EAA0 = xmmword_10046E0F0;
  qword_10085EAB0 = 0x4024000000000000;
  dword_10085EAB8 = 45;
  byte_10085EABC = 0;
  dword_10085EAC0 = 1;
  byte_10085EAC8 = 1;
  xmmword_10085EAD0 = xmmword_10046E100;
  unk_10085EAE0 = xmmword_10046E110;
  xmmword_10085EAF0 = v6;
  qword_10085EB00 = 0xC059000000000000;
  xmmword_10085EB08 = xmmword_10046E120;
  qword_10085EB18 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085EB20 = xmmword_10046E060;
  qword_10085EB30 = 0x3FD999999999999ALL;
  qword_10085EB40 = 0;
  qword_10085EB38 = 0;
  xmmword_10085EB48 = xmmword_10046E070;
  dword_10085EB58 = 5;
  qword_10085EB60 = 0x4000000000000000;
  dword_10085EB68 = 10;
  qword_10085EB70 = 0x4034000000000000;
  dword_10085EB78 = 3;
  xmmword_10085EB80 = xmmword_10046E130;
  return __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085E8D0, (void *)&_mh_execute_header);
}

void sub_100352F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

__n128 sub_100352F50(uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  result = *a2;
  *(__n128 *)(a1 + 40) = *a2;
  return result;
}

double sub_100352F64(double *a1)
{
  double result;
  double v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = 0.0;
  if (*((_BYTE *)a1 + 32))
  {
    v2 = *a1;
    v3 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)a1 != v3)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        if (*(double *)(*(_QWORD *)&v2 + 8) >= a1[6])
        {
          ++v4;
          v5 += *(unsigned __int8 *)(*(_QWORD *)&v2 + 41);
        }
        *(_QWORD *)&v2 += 48;
      }
      while (*(_QWORD *)&v2 != v3);
      if (v4)
        return (double)v5 / (double)v4;
    }
  }
  return result;
}

void sub_100352FC0(uint64_t a1, uint64_t a2, double a3)
{
  void *__p[2];
  __int128 v7;
  char v8;

  *(_OWORD *)__p = 0u;
  v7 = 0u;
  v8 = 1;
  sub_100353194(a1, (__n128 *)__p);
  if (v8 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (a1 != a2)
    sub_10035322C((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  *(double *)(a1 + 24) = a3;
}

BOOL sub_100353054(uint64_t a1, uint64_t *a2, double a3)
{
  void *v4;
  _BOOL8 v5;
  double v7;
  double v8;
  NSObject *v9;
  int v11;
  uint64_t *v12;
  __int16 v13;
  double v14;
  __int16 v15;
  _BOOL4 v16;

  if (!*(_BYTE *)(a1 + 32))
    return 0;
  if (vabdd_f64(*(double *)(a1 + 24), a3) <= 3.0)
  {
    v7 = sub_100352F64((double *)a1);
    v8 = *(double *)(a1 + 40);
    v5 = v7 >= v8;
    v9 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a2 + 23) < 0)
        a2 = (uint64_t *)*a2;
      v11 = 136315650;
      v12 = a2;
      v13 = 2048;
      v14 = v7;
      v15 = 1024;
      v16 = v7 >= v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gri,%s,tracked_ratio,%.1lf,has_good_gnss_conditions,%d", (uint8_t *)&v11, 0x1Cu);
    }
  }
  else
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
    v5 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return v5;
}

double sub_100353194(uint64_t a1, __n128 *a2)
{
  double result;
  void *v5;

  if (*(unsigned __int8 *)(a1 + 32) == a2[2].n128_u8[0])
  {
    if (*(_BYTE *)(a1 + 32))
    {
      sub_10013775C(a1, a2);
      result = a2[1].n128_f64[1];
      *(double *)(a1 + 24) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v5 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v5;
      operator delete(v5);
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    result = a2[1].n128_f64[1];
    *(double *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

char *sub_10035322C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555)
      sub_100026E7C();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    result = sub_1002F1518(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4)
    goto LABEL_16;
  v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

uint64_t sub_100353364(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, const std::string *a7, double a8, double a9, double a10, double a11)
{
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v33;

  v33 = sub_100027674(a1, a3) + 32;
  sub_100027674(v33, a4);
  sub_100027674(a1 + 64, a5);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_1002F0CAC((uint64_t *)(a1 + 280), (uint64_t)a6);
  memcpy((void *)(a1 + 304), (char *)a6 + 24, 0x18CuLL);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)((char *)a6 + 424);
  sub_100232898((uint64_t *)(a1 + 720), (uint64_t)a6 + 440);
  v21 = a6[29];
  v22 = a6[31];
  *(_OWORD *)(a1 + 760) = a6[30];
  *(_OWORD *)(a1 + 776) = v22;
  *(_OWORD *)(a1 + 744) = v21;
  v23 = a6[32];
  v24 = a6[33];
  v25 = a6[35];
  *(_OWORD *)(a1 + 824) = a6[34];
  *(_OWORD *)(a1 + 840) = v25;
  *(_OWORD *)(a1 + 792) = v23;
  *(_OWORD *)(a1 + 808) = v24;
  v26 = a6[36];
  v27 = a6[37];
  v28 = a6[39];
  *(_OWORD *)(a1 + 888) = a6[38];
  *(_OWORD *)(a1 + 904) = v28;
  *(_OWORD *)(a1 + 856) = v26;
  *(_OWORD *)(a1 + 872) = v27;
  v29 = a6[40];
  v30 = a6[41];
  v31 = a6[43];
  *(_OWORD *)(a1 + 952) = a6[42];
  *(_OWORD *)(a1 + 968) = v31;
  *(_OWORD *)(a1 + 920) = v29;
  *(_OWORD *)(a1 + 936) = v30;
  *(double *)(a1 + 992) = a8;
  *(double *)(a1 + 1000) = a9;
  *(double *)(a1 + 1008) = a10;
  *(double *)(a1 + 1016) = a11;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 1048) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1072) = 0;
  sub_10035364C(a1, a2);
  if (a7[1].__r_.__value_.__s.__data_[0])
    sub_100355D74((std::string *)(a1 + 1024), a7);
  return a1;
}

void sub_100353528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_10003E3F0(a10, *(_QWORD **)(v12 + 288));
  sub_100356090(v17);
  sub_100356090(v16);
  sub_10035601C(v15);
  sub_100355E74(v14);
  sub_1002AA4D0(v13, *(_QWORD **)(v12 + 104));
  v19 = *(_QWORD **)(v12 + 88);
  if (v19 == a11)
  {
    v20 = 4;
    v19 = a11;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  v21 = *(_QWORD **)(v12 + 56);
  if (v21 == a12)
  {
    v22 = 4;
    v21 = a12;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  v23 = *(_QWORD *)(v12 + 24);
  if (v23 == v12)
  {
    v24 = 4;
  }
  else
  {
    if (!v23)
      goto LABEL_16;
    v24 = 5;
    v12 = *(_QWORD *)(v12 + 24);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8 * v24))(v12);
LABEL_16:
  _Unwind_Resume(a1);
}

void sub_10035364C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  int v6;
  uint64_t i;
  int v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  NSObject *v14;
  char v15;
  _BOOL8 v16;
  uint64_t v17;
  double v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  std::runtime_error *v26;
  std::runtime_error *exception;
  int v29;
  _QWORD *v30;
  int *v31;
  _BYTE buf[28];

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Region vector is empty.");
  }
  v4 = (uint64_t **)(a1 + 96);
  v5 = (uint64_t *)(a1 + 104);
  do
  {
    v6 = *(_DWORD *)(v2 + 28);
    v29 = v6;
    for (i = *v5; i; i = *(_QWORD *)i)
    {
      v8 = *(_DWORD *)(i + 32);
      if (v6 >= v8)
      {
        if (v8 >= v6)
          goto LABEL_13;
        i += 8;
      }
    }
    v9 = operator new(0x30uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = off_100816920;
    v9[5] = 0;
    v9[4] = 0;
    v9[3] = v9 + 4;
    *(_QWORD *)buf = v9 + 3;
    *(_QWORD *)&buf[8] = v9;
    v30 = buf;
    v31 = &v29;
    sub_100356168(v4, &v29, (uint64_t)&unk_100472CF8, &v31, &v30);
    v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
LABEL_13:
    v13 = sub_100353B8C((uint64_t)v4, &v29);
    sub_100356280(*v13, v2, v2);
    v14 = qword_10085F520;
    if (!v15)
    {
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        sub_1003EF5D0(v2, v14);
      sub_1002AA4D0((uint64_t)v4, *(_QWORD **)(a1 + 104));
      *(_QWORD *)(a1 + 104) = 0;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 96) = v5;
      v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v26, "Region radii are not unique.");
    }
    v16 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG);
    if (v16)
    {
      v17 = v2;
      if (*(char *)(v2 + 23) < 0)
        v17 = *(_QWORD *)v2;
      v18 = *(float *)(v2 + 24);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v18;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v29;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#regionmon #region-class adding region (%s: %.2f) to region category %d dictionary", buf, 0x1Cu);
    }
    v2 += 48;
  }
  while (v2 != v3);
  v19 = *v4;
  if (*v4 != v5)
  {
    do
    {
      sub_100353BE0(v16, (_QWORD *)v19[5]);
      v20 = qword_10085F520;
      v16 = os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT);
      if (v16)
      {
        v21 = *(_QWORD *)(v19[5] + 16);
        v22 = *((_DWORD *)v19 + 8);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v22;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "YES";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#regionmon region-class %lu regions for region category %d valid: %s", buf, 0x1Cu);
      }
      v23 = (uint64_t *)v19[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (uint64_t *)v19[2];
          v25 = *v24 == (_QWORD)v19;
          v19 = v24;
        }
        while (!v25);
      }
      v19 = v24;
    }
    while (v24 != v5);
  }
}

void sub_1003539BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_1003539F0(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint8_t v12[16];

  v2 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#regionmon ~RegionMonitor", v12, 2u);
  }
  v3 = *(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3 == (_QWORD *)a1)
  {
    v4 = 4;
    v3 = (_QWORD *)a1;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  if (*(_BYTE *)(a1 + 1072))
    sub_10001AE68(a1 + 1056);
  if (*(_BYTE *)(a1 + 1048) && *(char *)(a1 + 1047) < 0)
    operator delete(*(void **)(a1 + 1024));
  sub_10003E3F0(a1 + 720, *(_QWORD **)(a1 + 728));
  sub_10003E3F0(a1 + 280, *(_QWORD **)(a1 + 288));
  sub_100356090(a1 + 240);
  sub_100356090(a1 + 200);
  sub_10035601C(a1 + 160);
  sub_100355E74(a1 + 120);
  sub_1002AA4D0(a1 + 96, *(_QWORD **)(a1 + 104));
  v5 = *(_QWORD **)(a1 + 88);
  if (v5 == (_QWORD *)(a1 + 64))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 64);
  }
  else
  {
    if (!v5)
      goto LABEL_18;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_18:
  v7 = *(_QWORD **)(a1 + 56);
  if (v7 == (_QWORD *)(a1 + 32))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 32);
  }
  else
  {
    if (!v7)
      goto LABEL_23;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_23:
  v9 = *(_QWORD **)(a1 + 24);
  if (v9 == (_QWORD *)a1)
  {
    v10 = 4;
    v9 = (_QWORD *)a1;
    goto LABEL_27;
  }
  if (v9)
  {
    v10 = 5;
LABEL_27:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

uint64_t *sub_100353B8C(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    sub_100146798("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

uint64_t sub_100353BE0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  const void **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  const void **v17;
  float v18;
  float v19;
  float v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  NSObject *v25;
  std::runtime_error *v26;
  NSObject *v27;
  std::runtime_error *exception;
  NSObject *v29;
  std::runtime_error *v30;
  float v31;
  uint8_t buf[4];
  const void **v33;

  if (a2[2] >= 2uLL)
  {
    v2 = a2 + 1;
    v3 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 != a2 + 1)
    {
      do
      {
        v4 = (_QWORD *)v3[1];
        v5 = v4;
        v6 = v3;
        if (v4)
        {
          do
          {
            v7 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v6[2];
            v8 = *v7 == (_QWORD)v6;
            v6 = v7;
          }
          while (!v8);
        }
        if (v7 != v2)
        {
          v9 = (const void **)(v3 + 4);
          v10 = *((_DWORD *)v3 + 15);
          do
          {
            if (v10 != *((_DWORD *)v7 + 15))
            {
              v27 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
                sub_1003EF700(v27);
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Region categories in set doesn't match");
            }
            v11 = *((unsigned __int8 *)v3 + 55);
            if ((v11 & 0x80u) == 0)
              v12 = *((unsigned __int8 *)v3 + 55);
            else
              v12 = v3[5];
            v13 = *((unsigned __int8 *)v7 + 55);
            v14 = (char)v13;
            if ((v13 & 0x80u) != 0)
              v13 = v7[5];
            if (v12 == v13)
            {
              if (v14 >= 0)
                v15 = (unsigned __int8 *)(v7 + 4);
              else
                v15 = (unsigned __int8 *)v7[4];
              if ((v11 & 0x80) == 0)
              {
                if (*((_BYTE *)v3 + 55))
                {
                  v16 = (unsigned __int8 *)(v3 + 4);
                  do
                  {
                    if (*v16 != *v15)
                      goto LABEL_27;
                    ++v16;
                    ++v15;
                    --v11;
                  }
                  while (v11);
                  v25 = qword_10085F520;
                  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
                  {
LABEL_43:
                    *(_DWORD *)buf = 136315138;
                    v33 = v9;
                    _os_log_fault_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "#regionmon more than one region with name: %s\n", buf, 0xCu);
                  }
                }
                else
                {
                  v25 = qword_10085F520;
                  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
                    goto LABEL_43;
                }
                goto LABEL_44;
              }
              v17 = (const void **)*v9;
              if (!memcmp(*v9, v15, v3[5]))
              {
                v25 = qword_10085F520;
                if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
                {
                  v9 = v17;
                  goto LABEL_43;
                }
LABEL_44:
                v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v26, "Region names are not unique.");
              }
            }
LABEL_27:
            v18 = *((float *)v7 + 14);
            v19 = *((float *)v3 + 14);
            if (v18 <= v19)
              sub_1003EF648();
            v20 = v18 - v19;
            if (v20 < 0.1)
            {
              v31 = v20;
              v29 = qword_10085F520;
              if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
                sub_1003EF670(v29, v31);
              v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v30, "Regions are too close together.");
            }
            v21 = (_QWORD *)v7[1];
            if (v21)
            {
              do
              {
                v22 = v21;
                v21 = (_QWORD *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = (_QWORD *)v7[2];
                v8 = *v22 == (_QWORD)v7;
                v7 = v22;
              }
              while (!v8);
            }
            v7 = v22;
          }
          while (v22 != v2);
        }
        if (v4)
        {
          do
          {
            v23 = v4;
            v4 = (_QWORD *)*v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v3[2];
            v8 = *v23 == (_QWORD)v3;
            v3 = v23;
          }
          while (!v8);
        }
        v3 = v23;
      }
      while (v23 != v2);
    }
  }
  return 1;
}

void sub_100353F54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100353F78(std::string::size_type a1, std::string::size_type a2, int a3, int a4, int a5, double a6)
{
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  NSObject *v26;
  uint64_t *v27;
  int v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 *v34;
  __int128 *v35;
  _QWORD *v36;
  _QWORD *v37;
  BOOL v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::string::size_type v42;
  NSObject *v43;
  const char *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string::size_type v47;
  unsigned __int8 v48;
  int v49;
  uint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  _QWORD v56[3];
  char v57;
  __int128 v58;
  std::string::size_type v59;
  __int128 *v60;
  __int128 *v61;
  unint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  int v65;
  int v66;
  int v67;
  std::string::size_type v68;
  std::string::size_type *v69;
  std::string buf;
  __int128 v71;
  int *v72;
  int *v73;
  std::string::size_type *v74;
  std::string::size_type v75;

  v68 = a2;
  v66 = a4;
  v67 = a3;
  v65 = 0;
  switch(a3)
  {
    case 1:
      v8 = a5;
      v65 = a5;
      goto LABEL_11;
    case 2:
      v8 = 2;
      v65 = 2;
      v26 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#regionmon Setting typePredictor as None since WifiToF based ranging does not use user intent score.", (uint8_t *)&buf, 2u);
      }
      goto LABEL_11;
    case 3:
      v9 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003EF848(v9, v10, v11, v12, v13, v14, v15, v16);
      return 0;
    case 4:
      v17 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003EF878(v17, v18, v19, v20, v21, v22, v23, v24);
      return 0;
    default:
      v8 = 0;
LABEL_11:
      sub_1003563DC((_QWORD *)(a1 + 120), &v68);
      v63 = 0;
      v64 = 0;
      v27 = *(uint64_t **)(a1 + 104);
      if (!v27)
        goto LABEL_16;
      break;
  }
  while (1)
  {
    v28 = *((_DWORD *)v27 + 8);
    if (v66 >= v28)
      break;
LABEL_15:
    v27 = (uint64_t *)*v27;
    if (!v27)
    {
LABEL_16:
      v29 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
        sub_1003EF73C(&v66, (uint64_t *)&v68, v29);
      v25 = 0;
      goto LABEL_60;
    }
  }
  if (v28 < v66)
  {
    ++v27;
    goto LABEL_15;
  }
  v30 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    sub_1003EF7C4((uint64_t *)&v68, v66, v30);
  v31 = sub_100353B8C(a1 + 96, &v66);
  sub_100021C24(&v63, v31);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v32 = v63 + 1;
  v33 = (_QWORD *)*v63;
  if ((_QWORD *)*v63 != v63 + 1)
  {
    v34 = 0;
    do
    {
      v35 = (__int128 *)(v33 + 4);
      if ((unint64_t)v34 >= v62)
      {
        v34 = (__int128 *)sub_100352B50((uint64_t *)&v60, v35);
      }
      else
      {
        sub_100352ADC((uint64_t)&v60, v35);
        v34 += 3;
      }
      v61 = v34;
      v36 = (_QWORD *)v33[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v33[2];
          v38 = *v37 == (_QWORD)v33;
          v33 = v37;
        }
        while (!v38);
      }
      v33 = v37;
    }
    while (v37 != v32);
    v8 = v65;
  }
  v59 = 0;
  if ((v8 & 0xFFFFFFFD) == 1 && !*(_BYTE *)(a1 + 1072))
  {
    memset(&buf, 0, sizeof(buf));
    v71 = *(_OWORD *)(a1 + 1000);
    if (!*(_BYTE *)(a1 + 1048))
      __assert_rtn("initStateForDevice", "NRBYRegionMonitor.cpp", 201, "_pathToModelWeights.has_value()");
    std::string::operator=(&buf, (const std::string *)(a1 + 1024));
    LODWORD(v69) = 0;
    sub_10035646C(&v58);
    if (*(_BYTE *)(a1 + 1072))
    {
      sub_1000145E8(a1 + 1056, &v58);
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
      if (*((_QWORD *)&v58 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    else
    {
      *(_OWORD *)(a1 + 1056) = v58;
      *(_BYTE *)(a1 + 1072) = 1;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v8 = v65;
  }
  switch(v8)
  {
    case 0:
      v42 = *(_QWORD *)(a1 + 992);
      v59 = v42;
      v43 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v42;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v68;
        v44 = "#regionmon AoA intent threshold set to %f for dev 0x%llx";
        goto LABEL_55;
      }
      break;
    case 1:
      v47 = *(_QWORD *)(a1 + 1000);
      v59 = v47;
      v43 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v47;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v68;
        v44 = "#regionmon Single antenna spatial gesture threshold set to %f for dev 0x%llx";
        goto LABEL_55;
      }
      break;
    case 2:
      v45 = *(_QWORD *)(a1 + 1016);
      v59 = v45;
      v43 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v45;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v68;
        v44 = "#regionmon No intent classifier threshold set to %f for dev 0x%llx";
        goto LABEL_55;
      }
      break;
    case 3:
      v46 = *(_QWORD *)(a1 + 1008);
      v59 = v46;
      v43 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v46;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v68;
        v44 = "#regionmon Dual antenna spatial gesture threshold set to %f for dev 0x%llx";
LABEL_55:
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, v44, (uint8_t *)&buf, 0x16u);
      }
      break;
    default:
      break;
  }
  v69 = &v68;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  buf.__r_.__value_.__l.__size_ = a1;
  buf.__r_.__value_.__r.__words[2] = a1 + 64;
  *(_QWORD *)&v71 = &v63;
  *((_QWORD *)&v71 + 1) = a1 + 280;
  v72 = &v67;
  v73 = &v65;
  v74 = &v59;
  v75 = a1 + 1056;
  sub_100356564(a1 + 120, (uint64_t *)&v68, (uint64_t)&unk_100472CF8, &v69, (uint64_t)&buf);
  v49 = v48;
  if (v48)
  {
    v50 = v68;
    v51 = v66;
    memset(v56, 0, sizeof(v56));
    sub_1002F1494((char *)v56, v60, v61, 0xAAAAAAAAAAAAAAABLL * (v61 - v60));
    v57 = 1;
    sub_10035461C(a1 + 32, 1, v50, v51, (uint64_t)v56, v65, a6);
    if (v57)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
      sub_1002F0A00((void ***)&buf);
    }
  }
  v25 = v49 != 0;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  sub_1002F0A00((void ***)&buf);
LABEL_60:
  v52 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  return v25;
}

void sub_1003545A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  a13 = &a17;
  sub_1002F0A00((void ***)&a13);
  sub_10001AE68((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_10035461C(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, int a6, double a7)
{
  uint64_t v7;
  int v9;
  int v10;
  double v11;
  uint64_t v12;
  char v13;

  v13 = a2;
  v12 = a3;
  v11 = a7;
  v9 = a6;
  v10 = a4;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    sub_100027BC4();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *, double *, int *, uint64_t, int *))(*(_QWORD *)v7 + 48))(v7, &v13, &v12, &v11, &v10, a5, &v9);
}

BOOL sub_100354678(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  const std::string::value_type *p_p;
  std::string::size_type v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  NSObject *v47;
  int v48;
  int v49;
  std::string *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  __int128 *v55;
  __int128 *v56;
  _QWORD *v57;
  _QWORD *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  _QWORD *v67;
  _QWORD v68[3];
  char v69;
  int v70;
  int v71;
  _QWORD aBlock[5];
  uint64_t v73;
  std::string v74;
  std::string v75;
  uint64_t v76[3];
  _BYTE v77[396];
  __int128 v78;
  uint64_t *v79[3];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unint64_t v98;
  __int128 __p;
  int64_t v100;
  __int128 *v101;
  int v102;
  uint8_t buf[24];
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;

  v98 = a2;
  v97 = a3;
  v8 = (_QWORD *)(a1 + 160);
  if (sub_100356AD8((_QWORD *)(a1 + 160), &v98))
  {
    v9 = sub_1000550B8(v8, &v98);
    if (!v9)
      sub_100146798("unordered_map::at: key not found");
    sub_1003563DC(v9 + 3, (unint64_t *)&v97);
  }
  v10 = sub_100353B8C(a1 + 96, &dword_10047B330);
  v11 = v10[1];
  v95 = (_QWORD *)*v10;
  v96 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_1002F0CAC(v76, a1 + 280);
  memcpy(v77, (const void *)(a1 + 304), sizeof(v77));
  v78 = *(_OWORD *)(a1 + 704);
  sub_100232898((uint64_t *)v79, a1 + 720);
  v67 = v8;
  v14 = *(_OWORD *)(a1 + 952);
  v92 = *(_OWORD *)(a1 + 936);
  v93 = v14;
  v94 = *(_OWORD *)(a1 + 968);
  v15 = *(_OWORD *)(a1 + 888);
  v88 = *(_OWORD *)(a1 + 872);
  v89 = v15;
  v16 = *(_OWORD *)(a1 + 920);
  v90 = *(_OWORD *)(a1 + 904);
  v91 = v16;
  v17 = *(_OWORD *)(a1 + 824);
  v84 = *(_OWORD *)(a1 + 808);
  v85 = v17;
  v18 = *(_OWORD *)(a1 + 856);
  v86 = *(_OWORD *)(a1 + 840);
  v87 = v18;
  v19 = *(_OWORD *)(a1 + 760);
  v80 = *(_OWORD *)(a1 + 744);
  v81 = v19;
  v20 = *(_OWORD *)(a1 + 792);
  v82 = *(_OWORD *)(a1 + 776);
  v83 = v20;
  v21 = (_QWORD *)*a4;
  v22 = (_QWORD *)*a4;
  v78 = *(_OWORD *)(*a4 + 32);
  if (&v78 != (__int128 *)(v21 + 4))
  {
    sub_1002324B8(v79, (_QWORD *)v21[6], v21 + 7);
    v22 = (_QWORD *)*a4;
  }
  v23 = *(_OWORD *)(v21 + 9);
  v24 = *(_OWORD *)(v21 + 13);
  v81 = *(_OWORD *)(v21 + 11);
  v82 = v24;
  v80 = v23;
  v25 = *(_OWORD *)(v21 + 15);
  v26 = *(_OWORD *)(v21 + 17);
  v27 = *(_OWORD *)(v21 + 21);
  v85 = *(_OWORD *)(v21 + 19);
  v86 = v27;
  v83 = v25;
  v84 = v26;
  v28 = *(_OWORD *)(v21 + 23);
  v29 = *(_OWORD *)(v21 + 25);
  v30 = *(_OWORD *)(v21 + 29);
  v89 = *(_OWORD *)(v21 + 27);
  v90 = v30;
  v87 = v28;
  v88 = v29;
  v31 = *(_OWORD *)(v21 + 31);
  v32 = *(_OWORD *)(v21 + 33);
  v33 = *(_OWORD *)(v21 + 37);
  v93 = *(_OWORD *)(v21 + 35);
  v94 = v33;
  v91 = v31;
  v92 = v32;
  BYTE12(v81) = *(_BYTE *)(a1 + 772);
  LODWORD(v82) = *(_DWORD *)(a1 + 776);
  BYTE8(v82) = *(_BYTE *)(a1 + 784);
  memset(&v75, 0, sizeof(v75));
  if (v22 != a4 + 1)
  {
    do
    {
      *(_OWORD *)buf = *((_OWORD *)v22 + 2);
      sub_100232898((uint64_t *)&buf[16], (uint64_t)(v22 + 6));
      v115 = *(_OWORD *)(v22 + 31);
      v34 = *(_OWORD *)(v22 + 25);
      v111 = *(_OWORD *)(v22 + 23);
      v112 = v34;
      v35 = *(_OWORD *)(v22 + 29);
      v113 = *(_OWORD *)(v22 + 27);
      v114 = v35;
      v36 = *(_OWORD *)(v22 + 17);
      v107 = *(_OWORD *)(v22 + 15);
      v108 = v36;
      v37 = *(_OWORD *)(v22 + 21);
      v109 = *(_OWORD *)(v22 + 19);
      v110 = v37;
      v38 = *(_OWORD *)(v22 + 11);
      *(_OWORD *)&v104[16] = *(_OWORD *)(v22 + 9);
      v105 = v38;
      v106 = *(_OWORD *)(v22 + 13);
      v39 = *(_OWORD *)(v22 + 35);
      v116 = *(_OWORD *)(v22 + 33);
      v117 = v39;
      v118 = *(_OWORD *)(v22 + 37);
      sub_100356B8C(v79, (double *)&buf[8], (uint64_t *)&buf[8]);
      std::to_string(&v74, *(double *)&buf[8]);
      v40 = std::string::append(&v74, " ");
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v100 = v40->__r_.__value_.__r.__words[2];
      __p = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if (v100 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v100 >= 0)
        v43 = HIBYTE(v100);
      else
        v43 = *((_QWORD *)&__p + 1);
      std::string::append(&v75, p_p, v43);
      if (SHIBYTE(v100) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      sub_10003E3F0((uint64_t)&buf[16], *(_QWORD **)v104);
      v44 = (_QWORD *)v22[1];
      if (v44)
      {
        do
        {
          v45 = v44;
          v44 = (_QWORD *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (_QWORD *)v22[2];
          v46 = *v45 == (_QWORD)v22;
          v22 = v45;
        }
        while (!v46);
      }
      v22 = v45;
    }
    while (v45 != a4 + 1);
  }
  v47 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
  {
    v49 = *(_DWORD *)(*a4 + 32);
    v48 = *(_DWORD *)(*a4 + 36);
    v50 = &v75;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v50 = (std::string *)v75.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 134219010;
    *(_QWORD *)&buf[4] = v98;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v97;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)v104 = v49;
    *(_WORD *)&v104[4] = 1024;
    *(_DWORD *)&v104[6] = v48;
    *(_WORD *)&v104[10] = 2080;
    *(_QWORD *)&v104[12] = v50;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#regionmon setting threshold detector parameters for device-part:0x%llx-0x%llx -- sample size: %d, filter type: %d, rssi thresholds: %s", buf, 0x2Cu);
  }
  v51 = sub_100356AD8(v67, &v98);
  if (!v51)
  {
    v102 = 1065353216;
    *(_QWORD *)buf = v98;
    *(_QWORD *)&buf[8] = 0;
    v101 = 0;
    v100 = 0;
    __p = 0uLL;
    *(_QWORD *)&v104[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)v104 = 0;
    *(_DWORD *)&v104[16] = 1065353216;
    sub_100356C44((uint64_t)v67, (unint64_t *)buf, buf);
    sub_100355E74((uint64_t)&buf[8]);
    sub_100355E74((uint64_t)&__p);
  }
  v73 = *(_QWORD *)(a1 + 1016);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_100354F20;
  aBlock[3] = &unk_1008168F0;
  aBlock[4] = a1;
  v101 = 0;
  *(_QWORD *)&__p = off_1008169C0;
  *((_QWORD *)&__p + 1) = _Block_copy(aBlock);
  v101 = &__p;
  v52 = sub_1000550B8(v67, &v98);
  if (!v52)
    sub_100146798("unordered_map::at: key not found");
  v70 = 2;
  v71 = 3;
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
  *(_QWORD *)buf = &v98;
  *(_QWORD *)&buf[8] = &__p;
  *(_QWORD *)&buf[16] = a1 + 64;
  *(_QWORD *)v104 = &v95;
  *(_QWORD *)&v104[8] = v76;
  *(_QWORD *)&v104[16] = &v71;
  *(_QWORD *)&v104[24] = &v70;
  *(_QWORD *)&v105 = &v73;
  *((_QWORD *)&v105 + 1) = &unk_10047B334;
  sub_100357130((uint64_t)(v52 + 3), &v97, (uint64_t)&unk_100472CF8, &v74, (uint64_t)buf);
  if (!v51)
  {
    memset(buf, 0, sizeof(buf));
    v53 = v95 + 1;
    v54 = (_QWORD *)*v95;
    if ((_QWORD *)*v95 == v95 + 1)
    {
      v55 = 0;
      v59 = 0;
    }
    else
    {
      v55 = 0;
      do
      {
        v56 = (__int128 *)(v54 + 4);
        if ((unint64_t)v55 >= *(_QWORD *)&buf[16])
        {
          v55 = (__int128 *)sub_100352B50((uint64_t *)buf, v56);
        }
        else
        {
          sub_100352ADC((uint64_t)buf, v56);
          v55 += 3;
        }
        *(_QWORD *)&buf[8] = v55;
        v57 = (_QWORD *)v54[1];
        if (v57)
        {
          do
          {
            v58 = v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = (_QWORD *)v54[2];
            v46 = *v58 == (_QWORD)v54;
            v54 = v58;
          }
          while (!v46);
        }
        v54 = v58;
      }
      while (v58 != v53);
      v59 = *(__int128 **)buf;
    }
    v60 = v98;
    memset(v68, 0, sizeof(v68));
    sub_1002F1494((char *)v68, v59, v55, 0xAAAAAAAAAAAAAAABLL * (v55 - v59));
    v69 = 1;
    sub_10035461C(a1 + 32, 1, v60, 0, (uint64_t)v68, 2, a5);
    if (v69)
    {
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
      sub_1002F0A00((void ***)&v74);
    }
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    sub_1002F0A00((void ***)&v74);
  }
  v61 = v101;
  if (v101 == &__p)
  {
    v62 = 4;
    v61 = &__p;
  }
  else
  {
    if (!v101)
      goto LABEL_55;
    v62 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v61 + 8 * v62))();
LABEL_55:
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  sub_10003E3F0((uint64_t)v79, v79[1]);
  sub_10003E3F0((uint64_t)v76, (_QWORD *)v76[1]);
  v63 = v96;
  if (v96)
  {
    p_shared_owners = (unint64_t *)&v96->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  return v51 == 0;
}

void sub_100354DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  unint64_t *v33;
  uint64_t v34;

  if (a15)
  {
    a23 = &a12;
    sub_1002F0A00((void ***)&a23);
  }
  a23 = &STACK[0x3B0];
  sub_1002F0A00((void ***)&a23);
  v33 = (unint64_t *)STACK[0x398];
  if ((unint64_t *)STACK[0x398] == &STACK[0x380])
  {
    v34 = 4;
    v33 = &STACK[0x380];
  }
  else
  {
    if (!v33)
      goto LABEL_8;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_8:
  if (a31 < 0)
    operator delete(__p);
  sub_100180704((uint64_t)&a32);
  sub_10001AE68((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

void sub_100354F20(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, _OWORD *a5, uint64_t a6, int a7, double a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double v23;
  _OWORD v24[12];
  void *__p;
  char v26;
  char v27;
  void *v28;
  char v29;
  char v30;

  v14 = *(_QWORD *)(a1 + 32);
  sub_1002F109C((char *)&v28, a3);
  sub_1002F109C((char *)&__p, a4);
  v17 = a5[9];
  v24[8] = a5[8];
  v24[9] = v17;
  v18 = a5[11];
  v24[10] = a5[10];
  v24[11] = v18;
  v19 = a5[5];
  v24[4] = a5[4];
  v24[5] = v19;
  v20 = a5[7];
  v24[6] = a5[6];
  v24[7] = v20;
  v21 = a5[1];
  v24[0] = *a5;
  v24[1] = v21;
  v22 = a5[3];
  if ((a6 & 0xFF00000000) != 0)
    v23 = *(float *)&a6;
  else
    v23 = 0.0;
  v24[2] = a5[2];
  v24[3] = v22;
  sub_100355068(v14, a2, a8, v15, v16, v24, *(uint64_t *)&v23, (a6 & 0xFF00000000) != 0, a7);
  if (v27 && v26 < 0)
    operator delete(__p);
  if (v30)
  {
    if (v29 < 0)
      operator delete(v28);
  }
}

void sub_100355024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  if (a42 && a38 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v42 - 88))
  {
    if (*(char *)(v42 - 113) < 0)
      operator delete(*(void **)(v42 - 136));
  }
  _Unwind_Resume(exception_object);
}

void sub_100355068(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7, char a8, int a9)
{
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  __int128 v24;
  unint64_t v25;
  _OWORD v26[12];
  void *__p[2];
  char v28;
  char v29;
  void *v30[2];
  char v31;
  char v32;
  uint64_t v33;

  v33 = a2;
  if ((sub_100355B1C(a1, a2) & 1) != 0 || a9)
  {
    v16 = sub_1000550B8((_QWORD *)(a1 + 200), (unint64_t *)&v33);
    if (!v16)
      sub_100146798("unordered_map::at: key not found");
    sub_1002F109C((char *)v30, (__int128 *)(v16 + 3));
    v17 = sub_1000550B8((_QWORD *)(a1 + 240), (unint64_t *)&v33);
    if (!v17)
      sub_100146798("unordered_map::at: key not found");
    sub_1002F109C((char *)__p, (__int128 *)(v17 + 3));
    v18 = a6[9];
    v26[8] = a6[8];
    v26[9] = v18;
    v19 = a6[11];
    v26[10] = a6[10];
    v26[11] = v19;
    v20 = a6[5];
    v26[4] = a6[4];
    v26[5] = v20;
    v21 = a6[7];
    v26[6] = a6[6];
    v26[7] = v21;
    v22 = a6[1];
    v26[0] = *a6;
    v26[1] = v22;
    v24 = a6[3];
    if (a8)
    {
      *(float *)&v23 = *(double *)&a7;
      v25 = v23 | (unint64_t)&_mh_execute_header;
    }
    else
    {
      v25 = 0;
    }
    v26[2] = a6[2];
    v26[3] = v24;
    sub_100351ED4(a1, a2, (uint64_t)v30, (uint64_t)__p, (uint64_t)v26, v25, a9, a3);
    if (v29 && v28 < 0)
      operator delete(__p[0]);
    if (v32)
    {
      if (v31 < 0)
        operator delete(v30[0]);
    }
  }
}

void sub_1003551C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (a43 && a39 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v43 - 96))
  {
    if (*(char *)(v43 - 121) < 0)
      operator delete(*(void **)(v43 - 144));
  }
  _Unwind_Resume(exception_object);
}

void sub_100355204(uint64_t a1, uint64_t a2, double a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *i;
  _BYTE v9[24];
  char v10;
  uint64_t v11;
  void **v12;

  v11 = a2;
  v5 = (_QWORD *)(a1 + 120);
  if (sub_100356AD8((_QWORD *)(a1 + 120), (unint64_t *)&v11))
  {
    v6 = sub_1000550B8(v5, (unint64_t *)&v11);
    if (!v6)
      goto LABEL_11;
    sub_100352010((uint64_t)(v6 + 3), a3);
  }
  if (!sub_100356AD8((_QWORD *)(a1 + 160), (unint64_t *)&v11))
    goto LABEL_8;
  v7 = sub_1000550B8((_QWORD *)(a1 + 160), (unint64_t *)&v11);
  if (!v7)
LABEL_11:
    sub_100146798("unordered_map::at: key not found");
  for (i = (_QWORD *)v7[5]; i; i = (_QWORD *)*i)
    sub_100352010((uint64_t)(i + 3), a3);
LABEL_8:
  sub_1003563DC(v5, (unint64_t *)&v11);
  sub_10035766C((_QWORD *)(a1 + 160), (unint64_t *)&v11);
  v9[0] = 0;
  v10 = 0;
  sub_10035461C(a1 + 32, 0, v11, 0, (uint64_t)v9, 2, a3);
  if (v10)
  {
    v12 = (void **)v9;
    sub_1002F0A00(&v12);
  }
}

void sub_100355314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t *a14)
{
  if (a12)
  {
    a14 = &a9;
    sub_1002F0A00((void ***)&a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100355338(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  NSObject *v19;
  int v20;
  _QWORD *v21;
  std::string::size_type v22;
  uint8_t buf[4];
  std::string::size_type v24;
  __int16 v25;
  int v26;

  v6 = *(uint64_t **)(a1 + 104);
  if (!v6)
    goto LABEL_7;
  v9 = a1 + 96;
  v10 = (int *)(a2 + 120);
  v11 = *(_DWORD *)(a2 + 120);
  while (1)
  {
    v12 = *((_DWORD *)v6 + 8);
    if (v11 >= v12)
      break;
LABEL_6:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_7;
  }
  if (v12 < v11)
  {
    ++v6;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(*sub_100353B8C(v9, v10) + 16))
  {
LABEL_7:
    v13 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a4 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a4 + 144) = v13;
    *(_OWORD *)(a4 + 160) = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a4 + 176) = *(_QWORD *)(a2 + 176);
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a4 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a4 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_OWORD *)(a4 + 16) = v16;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a4 + 48) = v17;
    *(_BYTE *)(a4 + 184) = 1;
    return;
  }
  v22 = *(_QWORD *)a2;
  if (!sub_100356AD8((_QWORD *)(a1 + 120), &v22))
    goto LABEL_16;
  v18 = sub_1000550B8((_QWORD *)(a1 + 120), &v22);
  if (!v18)
    goto LABEL_19;
  if (!sub_100351FFC((uint64_t)(v18 + 3), a2))
  {
    v19 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)buf = 134218240;
      v24 = v22;
      v25 = 1024;
      v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#regionmon updating technology for device monitor: %llu, new tech: %d", buf, 0x12u);
    }
    sub_100355204(a1, v22, *(double *)(a2 + 8));
LABEL_16:
    sub_100353F78(a1, v22, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 120), *(_DWORD *)(a2 + 124), *(double *)(a2 + 8));
  }
  v21 = sub_1000550B8((_QWORD *)(a1 + 120), &v22);
  if (!v21)
LABEL_19:
    sub_100146798("unordered_map::at: key not found");
  sub_100351524((uint64_t)(v21 + 3), (__int128 *)a2, a3, a4);
}

uint64_t sub_100355524(uint64_t result, uint64_t a2)
{
  _QWORD *i;

  for (i = *(_QWORD **)(result + 136); i; i = (_QWORD *)*i)
  {
    result = sub_100351F34((uint64_t)(i + 3));
    if ((_DWORD)result)
      result = sub_100351F74((uint64_t)(i + 3), a2);
  }
  return result;
}

void sub_100355574(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v5;
  NSObject *v6;
  unint64_t *v10;
  NSObject *v11;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];
  uint64_t v30[3];
  _BYTE buf[22];
  __int16 v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  char v37;
  int v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  int32x2_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v5 = *(double *)a2;
  if (a4 - *(double *)a2 <= 60.0)
  {
    v10 = (unint64_t *)(a2 + 72);
    if (sub_1003559B4(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80)))
    {
      sub_1002F22AC(v30, a3);
      if (!v30[2])
      {
        v11 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
        {
          v26 = (_QWORD *)(a2 + 24);
          v27 = *(_QWORD *)(a2 + 72);
          v28 = *(_QWORD *)(a2 + 80);
          if (*(char *)(a2 + 47) < 0)
            v26 = *(_QWORD **)(a2 + 24);
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v27;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v28;
          v32 = 2080;
          v33 = v26;
          _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "#regionmon init bluetooth device with no thresholds for device-part: 0x%llx-0x%llx with model: %s. Using default threshold", buf, 0x20u);
        }
        *(_QWORD *)buf = 0x300000008;
        *(_QWORD *)&buf[8] = 0xC04E800000000000;
        v58 = 0xC04E800000000000;
        sub_10018252C((uint64_t)&buf[16], (double *)&v58, 1);
        v34 = xmmword_10046E0F0;
        v35 = 0x4024000000000000;
        v36 = 45;
        v37 = 0;
        v38 = 1;
        v39 = 1;
        v40 = xmmword_10046E100;
        v41 = xmmword_10046E110;
        __asm { FMOV            V0.2D, #1.0 }
        v42 = _Q0;
        v43 = 0xC059000000000000;
        v44 = xmmword_10046E120;
        v45 = vdup_n_s32(0x3DCCCCCDu);
        v46 = xmmword_10046E060;
        v48 = 0;
        v49 = 0;
        v47 = 0x3FD999999999999ALL;
        v50 = xmmword_10046E070;
        v51 = 5;
        v52 = 0x4000000000000000;
        v53 = 10;
        v54 = 0x4034000000000000;
        v55 = 3;
        v56 = 0x3FF0000000000000;
        v57 = 0x4008000000000000;
        sub_1002F20A8((uint64_t)v30, (uint64_t)buf, (uint64_t)buf);
        sub_10003E3F0((uint64_t)&buf[16], v33);
      }
      v17 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        v18 = (_QWORD *)(a2 + 24);
        v19 = *(_QWORD *)(a2 + 72);
        v20 = *(_QWORD *)(a2 + 80);
        if (*(char *)(a2 + 47) < 0)
          v18 = *(_QWORD **)(a2 + 24);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v19;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v20;
        v32 = 2080;
        v33 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#regionmon init bluetooth device-part: 0x%llx-0x%llx with model: %s", buf, 0x20u);
      }
      v21 = *v10;
      v22 = v10[1];
      sub_1002F22AC(v29, (uint64_t)v30);
      sub_100354678(a1, v21, v22, v29, *(double *)a2);
      sub_1002F205C((uint64_t)v29, (_QWORD *)v29[1]);
      sub_1002F205C((uint64_t)v30, (_QWORD *)v30[1]);
    }
    v23 = sub_1000550B8((_QWORD *)(a1 + 160), v10);
    if (!v23)
      sub_100146798("unordered_map::at: key not found");
    v24 = sub_1000550B8(v23 + 3, v10 + 1);
    if (!v24)
      sub_100146798("unordered_map::at: key not found");
    v25 = (uint64_t)(v24 + 3);
    if (sub_100351FEC((uint64_t)(v24 + 3)))
      sub_100352174(v25, (__int128 *)a2);
  }
  else
  {
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#regionmon stale sample being ignored, current time: %f, sample timestamp: %f", buf, 0x16u);
    }
  }
}

void sub_100355968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  uint64_t v20;

  sub_10003E3F0(v20, a20);
  sub_1002F205C((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

BOOL sub_1003559B4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v6;
  unint64_t v7;

  v6 = a3;
  v7 = a2;
  v3 = (_QWORD *)(a1 + 160);
  if (!sub_1000550B8((_QWORD *)(a1 + 160), &v7))
    return 1;
  v4 = sub_1000550B8(v3, &v7);
  if (!v4)
    sub_100146798("unordered_map::at: key not found");
  return !sub_100356AD8(v4 + 3, &v6);
}

void sub_100355A24(uint64_t a1, double a2)
{
  _QWORD *i;
  _QWORD *j;
  _QWORD *k;

  for (i = *(_QWORD **)(a1 + 136); i; i = (_QWORD *)*i)
    sub_100352840((uint64_t)(i + 3), a2);
  for (j = *(_QWORD **)(a1 + 176); j; j = (_QWORD *)*j)
  {
    for (k = (_QWORD *)j[5]; k; k = (_QWORD *)*k)
      sub_100352840((uint64_t)(k + 3), a2);
  }
}

uint64_t *sub_100355A94@<X0>(uint64_t *result@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;

  v9 = a2;
  if (!result[14] || (v4 = result[13]) == 0)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  result += 12;
  while (1)
  {
    v5 = *(_DWORD *)(v4 + 32);
    if (v5 <= a2)
      break;
LABEL_8:
    v4 = *(_QWORD *)v4;
    if (!v4)
      goto LABEL_9;
  }
  if (v5 < a2)
  {
    v4 += 8;
    goto LABEL_8;
  }
  result = sub_100353B8C((uint64_t)result, &v9);
  v6 = result[1];
  *a3 = *result;
  a3[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t sub_100355B1C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  std::string *v4;
  _QWORD *v5;
  uint64_t *i;
  uint64_t v7;
  std::string __p;
  float v10;
  char v11;
  void *v12[2];
  char v13;
  float v14;
  char v15;
  __int128 __dst;
  char v17;
  char v18;
  uint64_t v19;

  v19 = a2;
  LOBYTE(__dst) = 0;
  v18 = 0;
  LOBYTE(v12[0]) = 0;
  v3 = (_QWORD *)(a1 + 200);
  v15 = 0;
  if (sub_100356AD8((_QWORD *)(a1 + 200), (unint64_t *)&v19))
  {
    v4 = (std::string *)sub_1000550B8(v3, (unint64_t *)&v19);
    if (!v4)
      sub_100146798("unordered_map::at: key not found");
    sub_100352970((char *)&__dst, v4 + 1);
  }
  v5 = sub_1000550B8((_QWORD *)(a1 + 160), (unint64_t *)&v19);
  if (!v5)
    sub_100146798("unordered_map::at: key not found");
  for (i = (uint64_t *)v5[5]; i; i = (uint64_t *)*i)
  {
    sub_1002F109C((char *)&__p, (__int128 *)(i + 29));
    if (v11)
    {
      if (v15 && v10 >= v14 || (sub_100352970((char *)v12, &__p), v11))
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  if (!v18 || !v15)
  {
    if ((v18 != 0) != (v15 != 0))
      goto LABEL_16;
LABEL_18:
    v7 = 0;
    goto LABEL_19;
  }
  if (sub_100350258((unsigned __int8 *)&__dst, (float *)v12))
    goto LABEL_18;
LABEL_16:
  sub_100355D24((uint64_t)v3, &v19, (__int128 *)v12);
  sub_100355D24(a1 + 240, &v19, &__dst);
  v7 = 1;
LABEL_19:
  if (v15 && v13 < 0)
    operator delete(v12[0]);
  if (v18 && v17 < 0)
    operator delete((void *)__dst);
  return v7;
}

void sub_100355CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (a28 && a24 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v28 - 48))
  {
    if (*(char *)(v28 - 73) < 0)
      operator delete(*(void **)(v28 - 96));
  }
  _Unwind_Resume(exception_object);
}

char *sub_100355D24(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  char *v4;
  char *v5;
  char v6;

  v4 = (char *)sub_1003576B8(a1, a2, a2, a3);
  v5 = v4;
  if (!v6)
    sub_100352970(v4 + 24, (std::string *)a3);
  return v5;
}

void sub_100355D74(std::string *__dst, const std::string *a2)
{
  __int128 v3;

  if (__dst[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (__dst[1].__r_.__value_.__s.__data_[0])
      std::string::operator=(__dst, a2);
  }
  else if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst->__r_.__value_.__l.__data_);
    __dst[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100004678(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t sub_100355E04(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_100355E74(uint64_t a1)
{
  void *v2;

  sub_100355EAC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100355EAC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100355EE8((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100355EE8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  for (i = 1120; i != 1104; i -= 8)
  {
    v3 = *(_QWORD *)(a1 + i);
    *(_QWORD *)(a1 + i) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_10003E3F0(a1 + 832, *(_QWORD **)(a1 + 840));
  sub_10003E3F0(a1 + 392, *(_QWORD **)(a1 + 400));
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  if (*(_BYTE *)(a1 + 312) && *(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  if (*(_BYTE *)(a1 + 256) && *(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  sub_10001AE68(a1 + 192);
  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10001AE68(a1 + 72);
  v5 = *(_QWORD **)(a1 + 64);
  if (v5 == (_QWORD *)(a1 + 40))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v5)
      goto LABEL_21;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_21:
  v7 = *(_QWORD **)(a1 + 32);
  if (v7 == (_QWORD *)(a1 + 8))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 8);
    goto LABEL_25;
  }
  if (v7)
  {
    v8 = 5;
LABEL_25:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

uint64_t sub_10035601C(uint64_t a1)
{
  void *v2;

  sub_100356054(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100356054(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100355E74((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100356090(uint64_t a1)
{
  void *v2;

  sub_1003560C8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1003560C8(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      if (*((_BYTE *)v3 + 72))
      {
        if (*((char *)v3 + 47) < 0)
          operator delete((void *)v3[3]);
      }
      operator delete(v3);
    }
    while (v2);
  }
}

void sub_100356114(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100816920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100356124(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100816920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100356154(uint64_t a1)
{
  sub_10017ECCC(a1 + 24, *(char **)(a1 + 32));
}

uint64_t **sub_100356168(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4, _QWORD **a5)
{
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  int v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v20[2];
  char v21;

  v9 = a1 + 1;
  v8 = a1[1];
  v10 = a1 + 1;
  v11 = a1 + 1;
  if (v8)
  {
    v12 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v8;
        v13 = *((_DWORD *)v8 + 8);
        if (v12 >= v13)
          break;
        v8 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_9;
      }
      if (v13 >= v12)
        return v11;
      v8 = v11[1];
      if (!v8)
      {
        v10 = v11 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v14 = operator new(0x38uLL);
    v20[1] = v9;
    v15 = *a5;
    v14[8] = **a4;
    *((_QWORD *)v14 + 5) = *v15;
    v16 = v15[1];
    *((_QWORD *)v14 + 6) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v21 = 1;
    sub_1000272A8(a1, (uint64_t)v11, v10, (uint64_t *)v14);
    v20[0] = 0;
    sub_1002AA64C((uint64_t)v20, 0);
  }
  return (uint64_t **)v14;
}

uint64_t *sub_100356280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  float v6;
  uint64_t **v7;
  float v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *(float *)(a2 + 24);
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *((float *)v4 + 14);
        if (v6 >= v8)
          break;
        v4 = (uint64_t *)*v4;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = (uint64_t *)v4[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_100356330(a1, a3, (uint64_t)&v10);
    sub_1000272A8((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

__n128 sub_100356330@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100004678(v7, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  v6[72] = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1003563C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1001DA2BC(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1003563DC(_QWORD *a1, unint64_t *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_1000550B8(a1, a2);
  if (result)
  {
    sub_10002A5A0(a1, (_QWORD *)result, (uint64_t)v4);
    sub_100356428((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void sub_100356428(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100355EE8((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *sub_10035646C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x80uLL);
  result = sub_1003564CC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1003564B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003564CC(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100816970;
  sub_10031E118(a1 + 3);
  return a1;
}

void sub_100356500(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100356514(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100816970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100356524(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100816970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100356554(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100356564(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v5 = *a2;
      if (v7 >= v8)
        v5 = v7 % v8;
    }
    else
    {
      v5 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v5)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_1003567A8(a1, *a2, a4, a5, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10002A900(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v5 = v7 % v8;
      else
        v5 = v7;
    }
    else
    {
      v5 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100356428((uint64_t)v22, 0);
  return v11;
}

void sub_100356790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100356428((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003567A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  _QWORD *result;
  _OWORD v15[4];
  uint64_t v16;
  _QWORD *v17;

  v9 = a1 + 16;
  v10 = operator new(0x480uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v11 = *a3;
  v12 = *(_OWORD *)(a4 + 48);
  v15[2] = *(_OWORD *)(a4 + 32);
  v15[3] = v12;
  v16 = *(_QWORD *)(a4 + 64);
  v13 = *(_OWORD *)(a4 + 16);
  v15[0] = *(_OWORD *)a4;
  v15[1] = v13;
  v17 = v11;
  result = sub_10035684C(v10 + 2, &v17, (uint64_t)v15);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_100356834(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100356428(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10035684C(_QWORD *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  std::__shared_weak_count *v32;
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;

  *a1 = **a2;
  v5 = (uint64_t)(a1 + 1);
  v6 = **(_QWORD **)a3;
  sub_100027674((uint64_t)v38, *(_QWORD *)(a3 + 8));
  sub_100027674((uint64_t)v36, *(_QWORD *)(a3 + 16));
  v7 = *(uint64_t **)(a3 + 24);
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  v34 = v9;
  v35 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_OWORD **)(a3 + 32);
  v13 = **(_DWORD **)(a3 + 40);
  v14 = **(_DWORD **)(a3 + 48);
  v15 = *(uint64_t **)(a3 + 64);
  LOBYTE(v31) = 0;
  v33 = 0;
  if (*((_BYTE *)v15 + 16))
  {
    v17 = *v15;
    v16 = (std::__shared_weak_count *)v15[1];
    v31 = v17;
    v32 = v16;
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v33 = 1;
  }
  sub_100351518(v5, v6, (uint64_t)v38, (uint64_t)v36, &v34, v12, v13, v14, (uint64_t)&v31);
  if (v33)
  {
    v20 = v32;
    if (v32)
    {
      v21 = (unint64_t *)&v32->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v23 = v35;
  if (v35)
  {
    v24 = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v37;
  if (v37 == v36)
  {
    v27 = 4;
    v26 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_25;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_25:
  v28 = v39;
  if (v39 == v38)
  {
    v29 = 4;
    v28 = v38;
    goto LABEL_29;
  }
  if (v39)
  {
    v29 = 5;
LABEL_29:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  return a1;
}

void sub_100356A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, int a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  uint64_t v20;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  if (a13)
    sub_10001AE68((uint64_t)&a11);
  sub_10001AE68((uint64_t)&a15);
  v22 = a20;
  if (a20 == &a17)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_8;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_8:
  v24 = *(_QWORD **)(v20 - 48);
  if (v24 == (_QWORD *)(v20 - 72))
  {
    v25 = 4;
    v24 = (_QWORD *)(v20 - 72);
  }
  else
  {
    if (!v24)
      goto LABEL_13;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_13:
  _Unwind_Resume(a1);
}

_QWORD *sub_100356AD8(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *sub_100356B8C(uint64_t **a1, double *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  double v7;
  uint64_t **v8;
  double v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((double *)v5 + 4);
        if (v7 <= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 <= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1000272A8(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

_QWORD *sub_100356C44(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 16;
  v13 = operator new(0x40uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  v13[2] = *a3;
  sub_100355E04((uint64_t)(v13 + 3), a3 + 1);
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10002A900(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  v10 = (_QWORD *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100356EA4((uint64_t)v23, 0);
  return v10;
}

void sub_100356E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100356EA4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100356EA4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100355E74((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

void sub_100356EEC()
{
  operator delete();
}

uint64_t sub_100356F00()
{
  return 0;
}

void *sub_100356F08(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = off_1008169C0;
  result = *(void **)(a1 + 8);
  if (result)
    result = _Block_copy(result);
  a2[1] = result;
  return result;
}

void sub_100356F40(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_100356F74(uint64_t a1, unint64_t *a2, uint64_t *a3, __int128 *a4, __int128 *a5, _OWORD *a6, _QWORD *a7, unsigned __int8 *a8, __n128 a9)
{
  sub_100356FC4((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100356F7C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E27C(a2, (uint64_t)&off_100816A20))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100356FB8()
{
  return &off_100816A20;
}

void sub_100356FC4(uint64_t *a1, unint64_t *a2, uint64_t *a3, __int128 *a4, __int128 *a5, _OWORD *a6, _QWORD *a7, unsigned __int8 *a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[12];
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  char v27;

  v9 = *a1;
  a9.n128_u64[0] = *a2;
  v10 = *a3;
  LOBYTE(v23) = 0;
  v27 = 0;
  if (*((_BYTE *)a4 + 48))
  {
    v23 = *a4;
    v24 = *((_QWORD *)a4 + 2);
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    v25 = *(__int128 *)((char *)a4 + 24);
    v26 = *((_BYTE *)a4 + 40);
    v27 = 1;
  }
  LOBYTE(v18) = 0;
  v22 = 0;
  if (*((_BYTE *)a5 + 48))
  {
    v18 = *a5;
    v19 = *((_QWORD *)a5 + 2);
    *((_QWORD *)a5 + 1) = 0;
    *((_QWORD *)a5 + 2) = 0;
    *(_QWORD *)a5 = 0;
    v20 = *(__int128 *)((char *)a5 + 24);
    v21 = *((_BYTE *)a5 + 40);
    v22 = 1;
  }
  v11 = a6[3];
  v17[2] = a6[2];
  v17[3] = v11;
  v12 = a6[7];
  v17[6] = a6[6];
  v17[7] = v12;
  v13 = a6[5];
  v17[4] = a6[4];
  v17[5] = v13;
  v14 = a6[11];
  v17[10] = a6[10];
  v17[11] = v14;
  v15 = a6[9];
  v17[8] = a6[8];
  v17[9] = v15;
  v16 = a6[1];
  v17[0] = *a6;
  v17[1] = v16;
  (*(void (**)(uint64_t, uint64_t, __int128 *, __int128 *, _OWORD *, _QWORD, _QWORD, __n128))(v9 + 16))(v9, v10, &v23, &v18, v17, *a7, *a8, a9);
  if (v22 && SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  if (v27)
  {
    if (SHIBYTE(v24) < 0)
      operator delete((void *)v23);
  }
}

void sub_100357100(_Unwind_Exception *a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 - 112))
  {
    if (*(char *)(v2 - 137) < 0)
      operator delete(*(void **)(v2 - 160));
  }
  sub_1003EF8A8(v1, v2 - 96);
  _Unwind_Resume(a1);
}

_QWORD *sub_100357130(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v5 = *a2;
      if (v7 >= v8)
        v5 = v7 % v8;
    }
    else
    {
      v5 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v5)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_100357374(a1, *a2, a4, a5, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10002A900(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v5 = v7 % v8;
      else
        v5 = v7;
    }
    else
    {
      v5 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100356428((uint64_t)v22, 0);
  return v11;
}

void sub_10035735C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100356428((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100357374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  _QWORD *result;
  _OWORD v15[4];
  uint64_t v16;
  _QWORD *v17;

  v9 = a1 + 16;
  v10 = operator new(0x480uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v11 = *a3;
  v12 = *(_OWORD *)(a4 + 48);
  v15[2] = *(_OWORD *)(a4 + 32);
  v15[3] = v12;
  v16 = *(_QWORD *)(a4 + 64);
  v13 = *(_OWORD *)(a4 + 16);
  v15[0] = *(_OWORD *)a4;
  v15[1] = v13;
  v17 = v11;
  result = sub_100357418(v10 + 2, &v17, (uint64_t)v15);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_100357400(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100356428(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100357418(_QWORD *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _OWORD *v11;
  int v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v25[8];
  std::__shared_weak_count *v26;
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;

  *a1 = **a2;
  v5 = **(_QWORD **)a3;
  sub_100027674((uint64_t)v32, *(_QWORD *)(a3 + 8));
  sub_100027674((uint64_t)v30, *(_QWORD *)(a3 + 16));
  v6 = *(uint64_t **)(a3 + 24);
  v8 = *v6;
  v7 = (std::__shared_weak_count *)v6[1];
  v28 = v8;
  v29 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *(_OWORD **)(a3 + 32);
  v12 = **(_DWORD **)(a3 + 40);
  v13 = **(_DWORD **)(a3 + 48);
  v25[0] = 0;
  v27 = 0;
  sub_100351518((uint64_t)(a1 + 1), v5, (uint64_t)v32, (uint64_t)v30, &v28, v11, v12, v13, (uint64_t)v25);
  if (v27)
  {
    v14 = v26;
    if (v26)
    {
      v15 = (unint64_t *)&v26->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v31;
  if (v31 == v30)
  {
    v21 = 4;
    v20 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_20;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_20:
  v22 = v33;
  if (v33 == v32)
  {
    v23 = 4;
    v22 = v32;
    goto LABEL_24;
  }
  if (v33)
  {
    v23 = 5;
LABEL_24:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  return a1;
}

void sub_1003575D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, int a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  uint64_t v20;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  if (a13)
    sub_10001AE68((uint64_t)&a11);
  sub_10001AE68((uint64_t)&a15);
  v22 = a20;
  if (a20 == &a17)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_8;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_8:
  v24 = *(_QWORD **)(v20 - 48);
  if (v24 == (_QWORD *)(v20 - 72))
  {
    v25 = 4;
    v24 = (_QWORD *)(v20 - 72);
  }
  else
  {
    if (!v24)
      goto LABEL_13;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_13:
  _Unwind_Resume(a1);
}

uint64_t sub_10035766C(_QWORD *a1, unint64_t *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_1000550B8(a1, a2);
  if (result)
  {
    sub_10002A5A0(a1, (_QWORD *)result, (uint64_t)v4);
    sub_100356EA4((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

_QWORD *sub_1003576B8(uint64_t a1, uint64_t *a2, _QWORD *a3, __int128 *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_1003578EC(a1, *a2, a3, a4, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10002A900(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_1003578C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_100357988((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

char *sub_1003578EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  void *v10;
  char *result;

  v9 = a1 + 16;
  v10 = operator new(0x50uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  *((_QWORD *)v10 + 2) = *a3;
  result = sub_1002F109C((char *)v10 + 24, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_10035796C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100357988(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100357988(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((_BYTE *)__p + 72))
    {
      if (*((char *)__p + 47) < 0)
        operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_1003579DC()
{
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = xmmword_10047B318;
  v9 = 0x300000003;
  sub_100182284((uint64_t)&unk_10085EB90, (int *)&v8, 3);
  xmmword_10085EBA8 = xmmword_10046E050;
  unk_10085EBB8 = xmmword_10046E060;
  qword_10085EBD0 = 0;
  unk_10085EBD8 = 0;
  qword_10085EBC8 = 0x3FD999999999999ALL;
  unk_10085EBE0 = xmmword_10046E070;
  dword_10085EBF0 = 5;
  qword_10085EBF8 = 0x4000000000000000;
  dword_10085EC00 = 5;
  byte_10085EC08 = 0;
  unk_10085EC0C = 0x30000000ALL;
  xmmword_10085EC18 = xmmword_10046E080;
  unk_10085EC28 = xmmword_10046E090;
  xmmword_10085EC38 = xmmword_10046E0A0;
  qword_10085EC48 = 0x3FE3333333333333;
  dword_10085EC50 = 3;
  xmmword_10085EC58 = xmmword_10046E0B0;
  unk_10085EC68 = xmmword_10046E090;
  xmmword_10085EC78 = xmmword_10046E080;
  qword_10085EC88 = 0x3FE3333333333333;
  byte_10085EC90 = 0;
  xmmword_10085EC98 = xmmword_10046E0C0;
  unk_10085ECA8 = xmmword_10046E0D0;
  __asm { FMOV            V0.2D, #1.0 }
  v6 = _Q0;
  xmmword_10085ECB8 = _Q0;
  qword_10085ECC8 = 0xBFD3333333333333;
  xmmword_10085ECD0 = xmmword_10046E0E0;
  qword_10085ECE0 = 0x3E99999A40000000;
  xmmword_10085ECE8 = xmmword_10046E060;
  qword_10085ED00 = 0;
  unk_10085ED08 = 0;
  qword_10085ECF8 = 0x3FD999999999999ALL;
  xmmword_10085ED10 = xmmword_10046E070;
  dword_10085ED20 = 5;
  qword_10085ED28 = 0x4000000000000000;
  dword_10085ED30 = 4;
  qword_10085ED38 = 0x300000008;
  qword_10085ED40 = 0xC04E800000000000;
  v7 = 0xC04E800000000000;
  sub_10018252C((uint64_t)algn_10085ED48, (double *)&v7, 1);
  xmmword_10085ED60 = xmmword_10046E0F0;
  qword_10085ED70 = 0x4024000000000000;
  dword_10085ED78 = 45;
  byte_10085ED7C = 0;
  dword_10085ED80 = 1;
  byte_10085ED88 = 1;
  xmmword_10085ED90 = xmmword_10046E100;
  unk_10085EDA0 = xmmword_10046E110;
  xmmword_10085EDB0 = v6;
  qword_10085EDC0 = 0xC059000000000000;
  xmmword_10085EDC8 = xmmword_10046E120;
  qword_10085EDD8 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_10085EDE0 = xmmword_10046E060;
  qword_10085EDF0 = 0x3FD999999999999ALL;
  qword_10085EE00 = 0;
  qword_10085EDF8 = 0;
  xmmword_10085EE08 = xmmword_10046E070;
  dword_10085EE18 = 5;
  qword_10085EE20 = 0x4000000000000000;
  dword_10085EE28 = 10;
  qword_10085EE30 = 0x4034000000000000;
  dword_10085EE38 = 3;
  xmmword_10085EE40 = xmmword_10046E130;
  return __cxa_atexit((void (*)(void *))sub_100180704, &unk_10085EB90, (void *)&_mh_execute_header);
}

void sub_100357C84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003E3F0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

double sub_100357CA4(double *a1)
{
  double v1;
  double v2;
  double v3;

  v1 = (*a1 + 1.57079633) * 6378137.0;
  v2 = round(v1 * 0.0009765625) * 1024.0;
  v3 = v1 - v2;
  cos(v2 / 6378137.0 + -1.57079633);
  return v3;
}

double sub_100357D4C(double *a1, double *a2)
{
  double v4;
  long double v5;
  double v6;
  double v7;
  double v8;
  long double v9;

  v4 = round(((*a1 + 1.57079633) * 6378137.0 - *a2) * 0.0009765625) * 1024.0;
  v5 = (*a2 + v4) / 6378137.0 + -1.57079633 + 1.57079633;
  v6 = fmod(v5, 3.14159265);
  if (v5 >= 0.0)
    v7 = 0.0;
  else
    v7 = 3.14159265;
  v8 = v6 + v7 + -1.57079633;
  v9 = cos(v4 / 6378137.0 + -1.57079633);
  fmod((a2[1] + round(((a1[1] + 3.14159265) * (v9 * 6378137.0) - a2[1]) * 0.0009765625) * 1024.0) / (v9 * 6378137.0)+ -3.14159265+ 3.14159265, 6.28318531);
  return v8;
}

uint64_t sub_100357E7C(double a1)
{
  int v1;

  v1 = llround(log(a1 * 0.5) * 15.0 / 4.60517019);
  if (v1 >= 15)
    v1 = 15;
  return v1 & ~(v1 >> 31);
}

long double sub_100357EC0(unsigned int a1)
{
  long double v1;
  long double result;

  v1 = exp((double)a1 / 15.0 * 4.60517019);
  result = v1 + v1;
  if (result < 2.0)
    result = 2.0;
  if (result > 200.0)
    return 200.0;
  return result;
}

void sub_100358060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100358078(uint64_t a1, void *a2)
{
  id *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;

  v16 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  v4 = (id *)(a1 + 264);
  objc_storeStrong((id *)(a1 + 264), a2);
  if (*(_QWORD *)(a1 + 264))
  {
    v5 = objc_msgSend(*(id *)(a1 + 304), "mutableCopy");
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*v4, "horizontalDistanceNumber"));
    v7 = *(void **)(a1 + 272);
    *(_QWORD *)(a1 + 272) = v6;

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 264), "horizontalAngleNumber"));
    v9 = *(void **)(a1 + 280);
    *(_QWORD *)(a1 + 280) = v8;

    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 264), "horizontalAngleAccuracyNumber"));
    v11 = *(void **)(a1 + 288);
    *(_QWORD *)(a1 + 288) = v10;

    v12 = *(_QWORD *)(a1 + 272);
    if (v12)
      objc_msgSend(v5, "setObject:forKey:", v12, CFSTR("CMA_DISTANCE"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*v4, "revokeReason")));
    objc_msgSend(v5, "setObject:forKey:", v13, CFSTR("REVOKE_REASON"));

    v14 = objc_msgSend(v5, "copy");
    v15 = *(void **)(a1 + 304);
    *(_QWORD *)(a1 + 304) = v14;

  }
}

void sub_100358194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1003582C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003582E0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  v4 = objc_msgSend(*(id *)(a1 + 304), "mutableCopy");
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v9, (_QWORD)v13));
        objc_msgSend(v4, "setObject:forKey:", v10, v9);

      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

  v11 = objc_msgSend(v4, "copy");
  v12 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v11;

}

void sub_100358434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10035847C(uint64_t a1, void *a2)
{
  id v4;
  CMAPrecisionFindingManagerAdapter *v5;
  void *v6;
  id v7;
  void *v8;

  v4 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_100816A40;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  v5 = -[CMAPrecisionFindingManagerAdapter initWithFindingManager:]([CMAPrecisionFindingManagerAdapter alloc], "initWithFindingManager:", a1);
  v6 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v5;

  if (v4)
  {
    objc_storeStrong((id *)(a1 + 240), a2);
    v7 = objc_msgSend(objc_alloc((Class)CMAPrecisionFindingManager), "initWithDelegate:dispatchQueue:", *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 240));
    v8 = *(void **)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v7;

    objc_msgSend(*(id *)(a1 + 248), "startDeviceFindingUpdates");
    operator new();
  }
  __assert_rtn("DeviceFinderAlgorithms", "DeviceFinderAlgorithms.mm", 83, "externalQueue");
}

void sub_10035862C()
{
  operator delete();
}

void sub_1003586E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  void *v6;
  double v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  *(_DWORD *)(a2 + 232) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  *(_BYTE *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  *(_BYTE *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 288) = 0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_BYTE *)(a2 + 320) = 0;
  *(_BYTE *)(a2 + 328) = 0;
  *(_BYTE *)(a2 + 336) = 0;
  *(_BYTE *)(a2 + 344) = 0;
  *(_WORD *)(a2 + 352) = 0;
  *(_BYTE *)(a2 + 356) = 0;
  *(_BYTE *)(a2 + 360) = 0;
  *(_BYTE *)(a2 + 364) = 0;
  *(_BYTE *)(a2 + 368) = 0;
  *(_BYTE *)(a2 + 372) = 0;
  *(_BYTE *)(a2 + 376) = 0;
  *(_WORD *)(a2 + 380) = 0;
  v4 = objc_autoreleasePoolPush();
  if (*(_BYTE *)(a1 + 232))
    v5 = *(_QWORD *)(a1 + 48);
  else
    v5 = 0;
  v6 = *(void **)(a1 + 272);
  if (!v6 || (objc_msgSend(v6, "doubleValue"), !*(_QWORD *)(a1 + 264)))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v10 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a2 + 8) = v5;
      *(_QWORD *)(a2 + 16) = v10;
      *(_BYTE *)(a2 + 56) = 0;
      *(_BYTE *)(a2 + 60) = 0;
      *(_BYTE *)(a2 + 64) = 0;
      *(_BYTE *)(a2 + 68) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 24) = 0x100800000;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_WORD *)(a2 + 88) = 0;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_QWORD *)(a2 + 128) = 0x200000000;
      *(_BYTE *)(a2 + 136) = 0;
      *(_BYTE *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_QWORD *)(a2 + 176) = 0;
      *(_QWORD *)(a2 + 184) = 0;
      *(_BYTE *)(a2 + 192) = 1;
      *(_DWORD *)(a2 + 364) = 0;
      *(_BYTE *)(a2 + 368) = 1;
      *(_DWORD *)(a2 + 372) = sub_100358AB8(a1);
      *(_BYTE *)(a2 + 376) = 1;
      goto LABEL_12;
    }
LABEL_14:
    sub_10000BA44();
  }
  *(_DWORD *)(a2 + 364) = 7;
  *(_BYTE *)(a2 + 368) = 1;
  if (!*(_BYTE *)(a1 + 32))
    goto LABEL_14;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v7;
  if (*(_BYTE *)(a2 + 192))
    *(_BYTE *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v8;
  *(float *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 28) = 1;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 68) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_WORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_QWORD *)(a2 + 128) = 0x200000000;
  *(_BYTE *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_BYTE *)(a2 + 192) = 1;
  sub_10035895C(a1, a2, LODWORD(v9) | (unint64_t)&_mh_execute_header);
LABEL_12:
  objc_autoreleasePoolPop(v4);
  v14 = objc_msgSend(*(id *)(a1 + 304), "mutableCopy");
  if (!*(_BYTE *)(a2 + 192))
    sub_10000BA44();
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a2 + 24)));
  objc_msgSend(v14, "setObject:forKey:", v11, CFSTR("DISPLAYED_DISTANCE"));

  v12 = objc_msgSend(v14, "copy");
  v13 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v12;

}

void sub_10035893C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id sub_10035895C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  id result;
  int v17;

  v6 = objc_msgSend(*(id *)(a1 + 264), "convergenceStatus");
  v7 = *(void **)(a1 + 280);
  v8 = 0;
  if (v7)
  {
    objc_msgSend(v7, "doubleValue");
    v10 = v9;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v12 = *(void **)(a1 + 288);
  if (v12)
  {
    objc_msgSend(v12, "doubleValue");
    v8 = v13;
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)a2 = v6 == (id)2;
  if (v6 == (id)2)
  {
    if (*(unsigned __int8 *)(a2 + 224) == BYTE4(a3))
    {
      if (*(_BYTE *)(a2 + 224))
        *(double *)(a2 + 216) = *(float *)&a3;
    }
    else if (*(_BYTE *)(a2 + 224))
    {
      *(_BYTE *)(a2 + 224) = 0;
    }
    else
    {
      *(double *)(a2 + 216) = *(float *)&a3;
      *(_BYTE *)(a2 + 224) = 1;
    }
    *(_QWORD *)(a2 + 200) = v10;
    *(_BYTE *)(a2 + 208) = v11;
    *(_QWORD *)(a2 + 320) = v8;
    *(_BYTE *)(a2 + 328) = v14;
    *(_DWORD *)(a2 + 364) = 6;
    *(_BYTE *)(a2 + 368) = 1;
  }
  if (objc_msgSend(*(id *)(a1 + 264), "revokeReason"))
  {
    if (objc_msgSend(*(id *)(a1 + 264), "revokeReason") == (id)2)
      v15 = 2;
    else
      v15 = 1;
  }
  else
  {
    v15 = sub_100358AB8(a1);
  }
  *(_DWORD *)(a2 + 372) = v15;
  *(_BYTE *)(a2 + 376) = 1;
  result = objc_msgSend(*(id *)(a1 + 264), "verticalState");
  if (result)
  {
    result = objc_msgSend(*(id *)(a1 + 264), "verticalState");
    v17 = 4 * (result == (id)2);
    if (result == (id)1)
      v17 = 1;
    *(_DWORD *)(a2 + 232) = v17;
  }
  return result;
}

void *sub_100358AB8(uint64_t a1)
{
  void *result;
  unsigned int v3;
  NSObject *v4;
  uint8_t v5[8];

  result = *(void **)(a1 + 296);
  if (result)
  {
    v3 = objc_msgSend(result, "motionState");
    if (v3 < 8 && ((0x8Bu >> v3) & 1) != 0)
    {
      return (void *)dword_10047B6A4[v3];
    }
    else
    {
      v4 = (id)qword_10085F520;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1003EF928(v5, (int)objc_msgSend(*(id *)(a1 + 296), "motionState"), v4);

      return 0;
    }
  }
  return result;
}

void sub_100358B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100358B90(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  NSObject *v4;
  int v6;
  _DWORD v7[2];

  if (*(_BYTE *)(a2 + 181))
    v3 = *(unsigned __int8 *)(a2 + 180) > 2u;
  else
    v3 = 1;
  if (v3)
  {
    sub_100358CA4(a1, a2);
  }
  else
  {
    v4 = (id)qword_10085F520;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(_BYTE *)(a2 + 181))
        sub_10000BA44();
      v6 = *(unsigned __int8 *)(a2 + 180);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#findalgs-devicefinder,mmsValStatus %d does not pass check, rejecting range result event", (uint8_t *)v7, 8u);
    }

  }
}

void sub_100358C8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100358CA4(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  v4 = objc_autoreleasePoolPush();
  sub_1001D0140(0x2B730480u, 1, 0, 0, 0, 0);
  sub_100358E48(a1, a2, *(unsigned __int8 *)(a1 + 312));
  sub_1001D0140(0x2B730480u, 2, 0, 0, 0, 0);
  v5 = *(unsigned __int8 *)(a1 + 232);
  v6 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = *(_OWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v10;
  v13 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 160);
  v14 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 176) = v14;
  if (!v5)
    *(_BYTE *)(a1 + 232) = 1;
  v15 = (void *)objc_opt_new(CMARange);
  objc_msgSend(v15, "setTimestamp:", *(double *)(a2 + 8));
  objc_msgSend(v15, "setRange:", *(float *)(a2 + 16));
  objc_msgSend(v15, "setRangeError:", *(double *)(a2 + 40));
  if (*(_BYTE *)(a2 + 72))
    objc_msgSend(v15, "setRssi:", *(double *)(a2 + 64));
  if ((*(_DWORD *)(a2 + 176) & 0xFF0000) != 0)
    objc_msgSend(v15, "setCycleIndex:", (unsigned __int16)*(_DWORD *)(a2 + 176));
  if (*(_QWORD *)(a1 + 248))
  {
    sub_1001D0140(0x2B730484u, 1, 0, 0, 0, 0);
    objc_msgSend(*(id *)(a1 + 248), "updateRanging:", v15);
    sub_1001D0140(0x2B730484u, 2, 0, 0, 0, 0);
  }

  objc_autoreleasePoolPop(v4);
}

void sub_100358E30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100358E48(uint64_t a1, uint64_t a2, int a3)
{
  double v6;
  double v7;
  NSObject *v8;
  __int128 v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE buf[24];
  uint64_t v16;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  v6 = *(double *)(a2 + 8);
  if (*(_BYTE *)(a1 + 360) && v6 <= *(double *)(a1 + 352))
  {
    v10 = (id)qword_10085F520;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(_BYTE *)(a1 + 360))
        sub_10000BA44();
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(float *)(a2 + 16);
      v13 = *(_QWORD *)(a1 + 352);
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2048;
      v16 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#findalgs-devicefinder,Not passing range measurement to range filter, range: %0.2f m, timestamp: %f s, range filter time: %f s", buf, 0x20u);
    }

  }
  else
  {
    v7 = *(float *)(a2 + 16);
    *(_QWORD *)buf = *(_QWORD *)(a2 + 8);
    *(double *)&buf[8] = v7;
    *(_QWORD *)&buf[16] = 0x3FB999999999999ALL;
    LODWORD(v16) = 0;
    v8 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v14 = 134218240;
      *(double *)&v14[4] = v7;
      *(_WORD *)&v14[12] = 2048;
      *(double *)&v14[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#findalgs-devicefinder,Passing range measurement to range filter, range: %0.2f m, timestamp: %f s", v14, 0x16u);
    }
    sub_100323F64(*(_QWORD *)(a1 + 320), (double *)buf, a3, 1, (uint64_t)v14);
    if (*(_BYTE *)(a1 + 360))
      *(_BYTE *)(a1 + 360) = 0;
    v9 = *(_OWORD *)&v14[16];
    *(_OWORD *)(a1 + 328) = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 344) = v9;
    *(_BYTE *)(a1 + 360) = 1;
  }
}

void sub_100359014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100359030(uint64_t a1, double *a2)
{
  void *v4;
  void *v5;
  void *v6;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  v4 = objc_autoreleasePoolPush();
  v5 = (void *)objc_opt_new(CMADeviceMotion);
  objc_msgSend(v5, "setTimestamp:", *a2);
  objc_msgSend(v5, "setQuaternion:", a2[8], a2[9], a2[10], a2[7]);
  objc_msgSend(v5, "setRotationRate:", a2[4], a2[5], a2[6]);
  objc_msgSend(v5, "setAcceleration:", a2[1], a2[2], a2[3]);
  v6 = *(void **)(a1 + 248);
  if (v6)
    objc_msgSend(v6, "updateDeviceMotion:", v5);

  objc_autoreleasePoolPop(v4);
}

void sub_1003590C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003590DC(uint64_t a1, _BYTE *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  v4 = objc_autoreleasePoolPush();
  v5 = (void *)objc_opt_new(CMAWatchOrientation);
  v6 = v5;
  if (*a2)
    v7 = 1;
  else
    v7 = 2;
  objc_msgSend(v5, "setCrown:", v7);
  if (a2[1])
    v8 = 2;
  else
    v8 = 1;
  objc_msgSend(v6, "setWrist:", v8);
  v9 = *(void **)(a1 + 248);
  if (v9)
    objc_msgSend(v9, "updateWatchOrientation:", v6);

  objc_autoreleasePoolPop(v4);
}

void sub_10035916C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100359180(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  double v9;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  v4 = objc_autoreleasePoolPush();
  if (*(_BYTE *)(a2 + 16))
  {
    v5 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 312) = v5 != 0;
    if (v5 == 2)
    {
      v7 = *(void **)(a1 + 296);
      v6 = 3;
    }
    else
    {
      v7 = *(void **)(a1 + 296);
      if (v5 == 1)
        v6 = 7;
      else
        v6 = v5 == 0;
    }
    objc_msgSend(v7, "setMotionState:", v6);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 296), "setMotionState:", 0);
    *(_BYTE *)(a1 + 312) = 1;
  }
  v9 = 0.0;
  if (*(_BYTE *)(a2 + 128))
  {
    if (sub_10034F6EC(a1, &v9, *(double *)(a2 + 120)))
    {
      objc_msgSend(*(id *)(a1 + 296), "setTimestamp:", v9);
      v8 = *(void **)(a1 + 248);
      if (v8)
        objc_msgSend(v8, "updatePeerState:", *(_QWORD *)(a1 + 296));
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
        sub_1003EF96C();
    }
    else if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_FAULT))
    {
      sub_1003EF9A4();
    }
  }
  objc_autoreleasePoolPop(v4);
}

void sub_1003592CC(uint64_t a1, double *a2)
{
  void *v4;
  void *v5;
  void *v6;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  v4 = objc_autoreleasePoolPush();
  v5 = (void *)objc_opt_new(CMAAltimeterData);
  objc_msgSend(v5, "setMachAbsoluteTimestamp:", *a2);
  objc_msgSend(v5, "setRelativeAltitude:", a2[1]);
  objc_msgSend(v5, "setPressure:", a2[2]);
  v6 = *(void **)(a1 + 248);
  if (v6)
    objc_msgSend(v6, "updateAltimeterData:", v5);

  objc_autoreleasePoolPop(v4);
}

void sub_10035934C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10035935C(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 256), "invalidate");
  objc_msgSend(*(id *)(a1 + 248), "stopDeviceFindingUpdates");
  v2 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;

  v3 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;

}

uint64_t sub_10035939C()
{
  return 1;
}

uint64_t sub_1003593A4()
{
  return 1;
}

uint64_t sub_1003593AC()
{
  return 1;
}

uint64_t sub_1003593B4()
{
  return 1;
}

uint64_t sub_1003593BC()
{
  return 1;
}

uint64_t sub_1003593C4()
{
  return 1;
}

uint64_t sub_1003593CC()
{
  return 1;
}

uint64_t sub_1003593D4()
{
  return 1;
}

uint64_t sub_1003593DC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 304);
}

void sub_1003593E8(uint64_t a1)
{
  sub_10035940C(a1);
  operator delete();
}

uint64_t sub_10035940C(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_100816A40;
  v2 = *(_QWORD **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v2)
  {
    v2[21] = off_100807398;
    v2[13] = off_100807398;
    v2[5] = off_100807398;
    operator delete();
  }

  return a1;
}

void sub_1003594B4()
{
  void *v0;
  _OWORD *v1;
  _OWORD *v2;

  v0 = objc_autoreleasePoolPush();
  qword_10085EE58 = 0;
  unk_10085EE60 = 0;
  qword_10085EE50 = 0;
  v1 = operator new(0x40uLL);
  qword_10085EE58 = (uint64_t)(v1 + 4);
  unk_10085EE60 = v1 + 4;
  *v1 = xmmword_10047B618;
  v1[1] = unk_10047B628;
  v1[2] = xmmword_10047B638;
  v1[3] = unk_10047B648;
  qword_10085EE50 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085EE50, (void *)&_mh_execute_header);
  qword_10085EE70 = 0;
  unk_10085EE78 = 0;
  qword_10085EE68 = 0;
  v2 = operator new(0x10uLL);
  qword_10085EE70 = (uint64_t)(v2 + 1);
  unk_10085EE78 = v2 + 1;
  *v2 = xmmword_10047B658;
  qword_10085EE68 = (uint64_t)v2;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085EE68, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

double *sub_100359580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double *result;
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v15 = 0x100000003;
  v13 = off_1008156E8;
  v14 = xmmword_100478880;
  v16 = &v17;
  sub_10030E2B4(a1, a2, (uint64_t)&v13);
  v30 = 0x100000003;
  v28 = off_1008156E8;
  v29 = xmmword_100478880;
  v31 = &v32;
  v25 = 0x100000134;
  v23 = off_1008157C0;
  v24 = xmmword_1004788A0;
  v26 = &v27;
  v20 = 0x100000003;
  v18 = off_1008156E8;
  v19 = xmmword_100478880;
  v21 = &v22;
  sub_10030E510((uint64_t)&v13, (uint64_t)&v28, (uint64_t)&v23, (uint64_t)&v18, "2");
  v7 = v6;
  *(double *)sub_10030E194(a3, 0) = v6;
  if (v7 == 0.0)
  {
    *(_QWORD *)sub_10030E274(a4, 0, 0) = 0;
    *(_QWORD *)sub_10030E274(a4, 0, 1) = 0;
    result = (double *)sub_10030E274(a4, 0, 2);
    *result = 0.0;
  }
  else
  {
    v8 = sub_10027C1A4((uint64_t)&v13, 0);
    v9 = 1.0 / v7;
    *(double *)sub_10030E274(a4, 0, 0) = 1.0 / v7 * v8;
    v10 = sub_10027C1A4((uint64_t)&v13, 1u);
    *(double *)sub_10030E274(a4, 0, 1) = v9 * v10;
    v11 = sub_10027C1A4((uint64_t)&v13, 2u);
    result = (double *)sub_10030E274(a4, 0, 2);
    *result = v9 * v11;
  }
  return result;
}

void sub_100359758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v8;
  double v9;
  double v10;
  long double v11;
  double v12;
  long double v13;
  long double *v14;
  long double *v15;
  double v16;
  double v17;
  double v18;
  long double *v19;
  uint64_t (**v20)();
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (**v35)();
  __int128 v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE v39[2464];
  uint64_t (**v40)();
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  v27 = 0x100000003;
  v25 = off_1008156E8;
  v26 = xmmword_100478880;
  v28 = &v29;
  sub_10030E2B4(a1, a2, (uint64_t)&v25);
  v22 = 0x100000003;
  v20 = off_1008156E8;
  v21 = xmmword_100478880;
  v23 = &v24;
  sub_10030E3B0(a3, (uint64_t)&v25, (uint64_t)&v20);
  v42 = 0x100000003;
  v40 = off_1008156E8;
  v41 = xmmword_100478880;
  v43 = &v44;
  v37 = 0x100000134;
  v35 = off_1008157C0;
  v36 = xmmword_1004788A0;
  v38 = v39;
  v32 = 0x100000003;
  v30 = off_1008156E8;
  v31 = xmmword_100478880;
  v33 = &v34;
  sub_10030E510((uint64_t)&v20, (uint64_t)&v40, (uint64_t)&v35, (uint64_t)&v30, "2");
  v9 = v8;
  v10 = sub_10027C1A4((uint64_t)&v20, 0);
  v11 = sub_10027C1A4((uint64_t)&v20, 1u);
  v12 = sub_10027C1A4((uint64_t)&v20, 2u);
  if (v9 != 0.0)
  {
    v13 = v12;
    v14 = (long double *)sub_10030E194(a4, 0);
    *v14 = atan2(v13, v11);
    v15 = (long double *)sub_10030E194(a4, 1u);
    *v15 = asin(v10 / v9);
    v16 = v13 * v13 + v11 * v11;
    v17 = 1.0 / (v9 * v9);
    *(_QWORD *)sub_10030E274(a5, 0, 0) = 0;
    v18 = sqrt(v16);
    *(double *)sub_10030E274(a5, 1, 0) = v17 * v18;
    v19 = (long double *)sub_10030E274(a5, 0, 1);
    if (v16 == 0.0)
    {
      *v19 = 0.0;
      *(_QWORD *)sub_10030E274(a5, 0, 2) = 0;
      *(_QWORD *)sub_10030E274(a5, 1, 1) = 0;
      *(_QWORD *)sub_10030E274(a5, 1, 2) = 0;
    }
    else
    {
      *v19 = -v13 / v16;
      *(long double *)sub_10030E274(a5, 0, 2) = v11 / v16;
      *(long double *)sub_10030E274(a5, 1, 1) = v17 * (-(v10 * v11) / v18);
      *(long double *)sub_10030E274(a5, 1, 2) = v17 * (-(v10 * v13) / v18);
    }
  }
  v37 = 0x300000002;
  v35 = off_100816328;
  v36 = xmmword_1004794C0;
  v38 = v39;
  sub_10030E3B0(a5, a3, (uint64_t)&v35);
  sub_10030EC4C(a5, (uint64_t)&v35);
}

void sub_100359A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v15 = 0x300000001;
  v13 = off_1008162E0;
  v14 = xmmword_1004794B0;
  v16 = &v17;
  sub_100359580(a3, a4, a5, (uint64_t)&v13);
  v10 = 0x300000001;
  v8 = off_1008162E0;
  v9 = xmmword_1004794B0;
  v11 = &v12;
  sub_10030E3B0((uint64_t)&v13, a2, (uint64_t)&v8);
  sub_10030EC4C(a6, (uint64_t)&v8);
}

void sub_100359B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v16 = 0x300000002;
  v14 = off_100816328;
  v15 = xmmword_1004794C0;
  v17 = &v18;
  sub_100359758(a3, a4, a5, a6, (uint64_t)&v14);
  v11 = 0x300000002;
  v9 = off_100816328;
  v10 = xmmword_1004794C0;
  v12 = &v13;
  sub_10030E3B0((uint64_t)&v14, a2, (uint64_t)&v9);
  sub_10030EC4C(a7, (uint64_t)&v9);
}

double *sub_100359BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  __double2 v9;
  __double2 v10;
  double v11;
  double v12;
  double v13;
  double *result;

  v6 = sub_10027C1A4(a1, 0);
  v7 = sub_10027C1A4(a1, 1u);
  v8 = sub_10027C1A4(a1, 2u);
  v9 = __sincos_stret(v8);
  v10 = __sincos_stret(v7);
  v11 = v6 * v9.__cosval;
  *(double *)sub_10030E194(a2, 0) = v10.__sinval * (v6 * v9.__cosval);
  *(double *)sub_10030E194(a2, 1u) = v6 * v9.__sinval;
  v12 = v10.__cosval * (v6 * v9.__cosval);
  *(double *)sub_10030E194(a2, 2u) = v12;
  *(double *)sub_10030E274(a3, 0, 0) = v10.__sinval * v9.__cosval;
  *(double *)sub_10030E274(a3, 1, 0) = v9.__sinval;
  *(double *)sub_10030E274(a3, 2, 0) = v10.__cosval * v9.__cosval;
  *(double *)sub_10030E274(a3, 0, 1) = v12;
  *(_QWORD *)sub_10030E274(a3, 1, 1) = 0;
  *(double *)sub_10030E274(a3, 2, 1) = v10.__sinval * -(v6 * v9.__cosval);
  v13 = -(v6 * v9.__sinval);
  *(double *)sub_10030E274(a3, 0, 2) = v10.__sinval * v13;
  *(double *)sub_10030E274(a3, 1, 2) = v11;
  result = (double *)sub_10030E274(a3, 2, 2);
  *result = v10.__cosval * v13;
  return result;
}

void sub_100359D78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long double v4;
  double v5;
  long double v6;
  long double *v7;
  double v8;
  long double *v9;

  v4 = sub_10027C1A4(a1, 0);
  v5 = sub_10027C1A4(a1, 1u);
  v6 = sub_10027C1A4(a1, 2u);
  *(_QWORD *)(a2 + 24) = 0x100000003;
  *(_QWORD *)a2 = off_1008156E8;
  *(_OWORD *)(a2 + 8) = xmmword_100478880;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(double *)sub_10030E194(a2, 0) = sqrt(v5 * v5 + v4 * v4 + v6 * v6);
  if (*(double *)sub_10030E194(a2, 0) <= 0.0)
  {
    *(_QWORD *)sub_10030E194(a2, 1u) = 0;
    *(_QWORD *)sub_10030E194(a2, 2u) = 0;
  }
  else
  {
    v7 = (long double *)sub_10030E194(a2, 1u);
    *v7 = atan2(v4, v6);
    v8 = *(double *)sub_10030E194(a2, 0);
    v9 = (long double *)sub_10030E194(a2, 2u);
    *v9 = asin(v5 / v8);
  }
}

void sub_100359EA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

long double sub_100359EB8@<D0>(uint64_t a1@<X8>, double a2@<D0>, long double a3@<D1>, long double a4@<D2>)
{
  long double *v8;
  long double *v9;
  long double v10;
  double *v11;
  long double result;

  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = off_1008156E8;
  *(_OWORD *)(a1 + 8) = xmmword_100478880;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v8 = (long double *)sub_10030E194(a1, 0);
  *v8 = sin(a3) * a2;
  v9 = (long double *)sub_10030E194(a1, 1u);
  v10 = cos(a3) * a2;
  *v9 = v10 * cos(a4);
  v11 = (double *)sub_10030E194(a1, 2u);
  result = v10 * sin(a4);
  *v11 = result;
  return result;
}

void sub_100359F88(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

double sub_100359F98@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double *v12;
  double result;
  double v14;
  double v15;

  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = off_100815730;
  *(_OWORD *)(a2 + 8) = xmmword_100478B80;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  sub_10030DD0C((_DWORD *)a2, 3, 3);
  sub_10030DD58(a2, 0.0);
  v4 = sub_10027C1A4(a1, 0);
  v5 = sub_10027C1A4(a1, 1u);
  v6 = sub_10027C1A4(a1, 2u);
  v7 = sub_10027C1A4(a1, 3u);
  v14 = v5 * v5;
  v15 = v4 * v4;
  *(double *)sub_10030E274(a2, 0, 0) = v4 * v4 - v5 * v5 - v6 * v6 + v7 * v7;
  *(double *)sub_10030E274(a2, 1, 0) = v4 * v5 + v6 * v7 + v4 * v5 + v6 * v7;
  v8 = v4 * v6;
  v9 = v5 * v7;
  *(double *)sub_10030E274(a2, 2, 0) = v4 * v6 - v5 * v7 + v4 * v6 - v5 * v7;
  *(double *)sub_10030E274(a2, 0, 1) = v4 * v5 - v6 * v7 + v4 * v5 - v6 * v7;
  *(double *)sub_10030E274(a2, 1, 1) = v5 * v5 - v4 * v4 - v6 * v6 + v7 * v7;
  v10 = v4 * v7;
  v11 = v5 * v6;
  *(double *)sub_10030E274(a2, 2, 1) = v11 + v10 + v11 + v10;
  *(double *)sub_10030E274(a2, 0, 2) = v8 + v9 + v8 + v9;
  *(double *)sub_10030E274(a2, 1, 2) = v11 - v10 + v11 - v10;
  v12 = (double *)sub_10030E274(a2, 2, 2);
  result = -v15 - v14 + v6 * v6 + v7 * v7;
  *v12 = result;
  return result;
}

void sub_10035A1B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_100807398;
  _Unwind_Resume(a1);
}

double sub_10035A1DC(double a1)
{
  double v1;

  v1 = 1.0;
  if (a1 <= 1.0)
    return v1;
  v1 = 5.0;
  if (a1 >= 10.0)
    return v1;
  else
    return (a1 + -1.0) * 0.444444444 + 1.0;
}

void sub_10035A21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  __double2 v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v28 = 0x100000003;
  v26 = off_1008156E8;
  v27 = xmmword_100478880;
  v29 = &v30;
  v6 = sub_10027C1A4(a1, 0);
  *(double *)sub_10030E194((uint64_t)&v26, 0) = v6;
  v7 = sub_10027C1A4(a1, 1u);
  *(double *)sub_10030E194((uint64_t)&v26, 1u) = v7;
  v8 = sub_10027C1A4(a1, 2u);
  *(double *)sub_10030E194((uint64_t)&v26, 2u) = v8;
  v9 = sub_10027C1A4(a1, 3u);
  v10 = __sincos_stret(v9);
  v23 = 0x300000003;
  v21 = off_100815730;
  v22 = xmmword_100478B80;
  v24 = &v25;
  *(double *)sub_10030E274((uint64_t)&v21, 0, 0) = v10.__cosval;
  *(_QWORD *)sub_10030E274((uint64_t)&v21, 1, 0) = 0;
  *(double *)sub_10030E274((uint64_t)&v21, 2, 0) = -v10.__sinval;
  *(_QWORD *)sub_10030E274((uint64_t)&v21, 0, 1) = 0;
  *(_QWORD *)sub_10030E274((uint64_t)&v21, 1, 1) = 0x3FF0000000000000;
  *(_QWORD *)sub_10030E274((uint64_t)&v21, 2, 1) = 0;
  *(double *)sub_10030E274((uint64_t)&v21, 0, 2) = v10.__sinval;
  *(_QWORD *)sub_10030E274((uint64_t)&v21, 1, 2) = 0;
  *(double *)sub_10030E274((uint64_t)&v21, 2, 2) = v10.__cosval;
  v13 = 0x100000003;
  v11 = off_1008156E8;
  v12 = xmmword_100478880;
  v14 = &v15;
  sub_10030E3B0((uint64_t)&v21, a2, (uint64_t)&v11);
  v18 = 0x100000003;
  v16 = off_1008156E8;
  v17 = xmmword_100478880;
  v19 = &v20;
  sub_10030F0E0((uint64_t)&v11, (uint64_t)&v26, (uint64_t)&v16);
  sub_10030EC4C(a3, (uint64_t)&v16);
}

double sub_10035A45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  double result;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE v23[96];
  uint64_t (**v24)();
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (**v29)();
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t (**v34)();
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v36 = 0x100000003;
  v34 = off_1008156E8;
  v35 = xmmword_100478880;
  v37 = &v38;
  v8 = sub_10027C1A4(a1, 0);
  *(double *)sub_10030E194((uint64_t)&v34, 0) = v8;
  v9 = sub_10027C1A4(a1, 1u);
  *(double *)sub_10030E194((uint64_t)&v34, 1u) = v9;
  v10 = sub_10027C1A4(a1, 2u);
  *(double *)sub_10030E194((uint64_t)&v34, 2u) = v10;
  v11 = sub_10027C1A4(a1, 3u);
  v12 = __sincos_stret(v11);
  v31 = 0x300000003;
  v29 = off_100815730;
  v30 = xmmword_100478B80;
  v32 = &v33;
  *(double *)sub_10030E274((uint64_t)&v29, 0, 0) = v12.__cosval;
  *(_QWORD *)sub_10030E274((uint64_t)&v29, 1, 0) = 0;
  *(double *)sub_10030E274((uint64_t)&v29, 2, 0) = -v12.__sinval;
  *(_QWORD *)sub_10030E274((uint64_t)&v29, 0, 1) = 0;
  *(_QWORD *)sub_10030E274((uint64_t)&v29, 1, 1) = 0x3FF0000000000000;
  *(_QWORD *)sub_10030E274((uint64_t)&v29, 2, 1) = 0;
  *(double *)sub_10030E274((uint64_t)&v29, 0, 2) = v12.__sinval;
  *(_QWORD *)sub_10030E274((uint64_t)&v29, 1, 2) = 0;
  *(double *)sub_10030E274((uint64_t)&v29, 2, 2) = v12.__cosval;
  v26 = 0x100000003;
  v24 = off_1008156E8;
  v25 = xmmword_100478880;
  v27 = &v28;
  sub_10030E3B0((uint64_t)&v29, a2, (uint64_t)&v24);
  v21 = 0x100000003;
  v19 = off_1008156E8;
  v20 = xmmword_100478880;
  v22 = v23;
  sub_10030F0E0((uint64_t)&v24, (uint64_t)&v34, (uint64_t)&v19);
  sub_10030EC4C(a3, (uint64_t)&v19);
  v21 = 0x400000003;
  v19 = off_100815AD0;
  v20 = xmmword_100478B70;
  v22 = v23;
  sub_10030DD0C(&v19, 3, 4);
  sub_10030DD58((uint64_t)&v19, 0.0);
  sub_10030EC4C(a4, (uint64_t)&v19);
  *(_QWORD *)sub_10030E274(a4, 0, 0) = 0x3FF0000000000000;
  *(_QWORD *)sub_10030E274(a4, 1, 1) = 0x3FF0000000000000;
  *(_QWORD *)sub_10030E274(a4, 2, 2) = 0x3FF0000000000000;
  v13 = sub_10027C1A4(a2, 0);
  v14 = sub_10027C1A4(a2, 2u);
  *(double *)sub_10030E274(a4, 0, 3) = v12.__cosval * v14 + -v12.__sinval * v13;
  v15 = sub_10027C1A4(a2, 0);
  v16 = sub_10027C1A4(a2, 2u);
  v17 = (double *)sub_10030E274(a4, 2, 3);
  result = v16 * -v12.__sinval - v12.__cosval * v15;
  *v17 = result;
  return result;
}

double *sub_10035A7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v10;
  double v11;
  double v12;
  __double2 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *result;
  uint64_t (**v25)();
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (**v35)();
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (**v40)();
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (**v45)();
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;

  v10 = sub_10027C1A4(a1, 3u);
  v32 = 0x100000003;
  v30 = off_1008156E8;
  v31 = xmmword_100478880;
  v33 = &v34;
  sub_10035A21C(a1, a3, (uint64_t)&v30);
  v27 = 0x100000003;
  v25 = off_1008156E8;
  v26 = xmmword_100478880;
  v28 = &v29;
  sub_10030E2B4((uint64_t)&v30, a2, (uint64_t)&v25);
  v47 = 0x100000003;
  v45 = off_1008156E8;
  v46 = xmmword_100478880;
  v48 = &v49;
  v42 = 0x100000134;
  v40 = off_1008157C0;
  v41 = xmmword_1004788A0;
  v43 = &v44;
  v37 = 0x100000003;
  v35 = off_1008156E8;
  v36 = xmmword_100478880;
  v38 = &v39;
  sub_10030E510((uint64_t)&v25, (uint64_t)&v45, (uint64_t)&v40, (uint64_t)&v35, "2");
  v12 = v11;
  *(double *)sub_10030E194(a4, 0) = v11;
  if (v12 == 0.0)
  {
    *(_QWORD *)sub_10030E274(a5, 0, 0) = 0;
    *(_QWORD *)sub_10030E274(a5, 0, 1) = 0;
    *(_QWORD *)sub_10030E274(a5, 0, 2) = 0;
    result = (double *)sub_10030E274(a5, 0, 3);
    *result = 0.0;
  }
  else
  {
    v13 = __sincos_stret(v10);
    v14 = 1.0 / v12;
    v15 = sub_10027C1A4((uint64_t)&v25, 0);
    *(double *)sub_10030E274(a5, 0, 0) = v14 * v15;
    v16 = sub_10027C1A4((uint64_t)&v25, 1u);
    *(double *)sub_10030E274(a5, 0, 1) = v14 * v16;
    v17 = sub_10027C1A4((uint64_t)&v25, 2u);
    *(double *)sub_10030E274(a5, 0, 2) = v14 * v17;
    v18 = sub_10027C1A4(a3, 0);
    v19 = v13.__cosval * sub_10027C1A4(a3, 2u) - v13.__sinval * v18;
    v20 = sub_10027C1A4(a3, 0);
    v21 = -(v13.__sinval * sub_10027C1A4(a3, 2u)) - v13.__cosval * v20;
    v22 = sub_10027C1A4((uint64_t)&v25, 0);
    v23 = sub_10027C1A4((uint64_t)&v25, 2u);
    result = (double *)sub_10030E274(a5, 0, 3);
    *result = v14 * (v21 * v23 + v19 * v22);
  }
  return result;
}

void sub_10035AAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long double v6;
  double v7;
  long double v8;
  double v9;
  long double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = sub_10027C1A4(a1, 0);
  v7 = sub_10027C1A4(a1, 1u);
  v8 = sub_10027C1A4(a1, 2u);
  v9 = sqrt(v7 * v7 + v6 * v6 + v8 * v8);
  *(double *)sub_10030E194(a2, 0) = v9;
  if (v9 <= 0.0)
  {
    *(_QWORD *)sub_10030E194(a2, 1u) = 0;
    *(_QWORD *)sub_10030E194(a2, 2u) = 0;
    v20 = 0x300000003;
    v18 = off_100815730;
    v19 = xmmword_100478B80;
    v21 = &v22;
    sub_10030DD0C(&v18, 3, 3);
    sub_10030DD58((uint64_t)&v18, 0.0);
    sub_10030EC4C(a3, (uint64_t)&v18);
  }
  else
  {
    v10 = atan2(v6, v8);
    *(long double *)sub_10030E194(a2, 1u) = v10;
    v11 = asin(v7 / v9);
    *(long double *)sub_10030E194(a2, 2u) = v11;
    v12 = sub_10027C1A4(a1, 0) / v9;
    *(double *)sub_10030E274(a3, 0, 0) = v12;
    v13 = sub_10027C1A4(a1, 1u) / v9;
    *(double *)sub_10030E274(a3, 0, 1) = v13;
    v14 = sub_10027C1A4(a1, 2u) / v9;
    *(double *)sub_10030E274(a3, 0, 2) = v14;
    v15 = v8 * v8 + v6 * v6;
    v16 = 1.0 / (v9 * v9);
    *(_QWORD *)sub_10030E274(a3, 1, 1) = 0;
    v17 = sqrt(v15);
    *(double *)sub_10030E274(a3, 2, 1) = v17 * v16;
    if (v15 <= 0.0)
    {
      *(_QWORD *)sub_10030E274(a3, 1, 0) = 0;
      *(_QWORD *)sub_10030E274(a3, 1, 2) = 0;
      *(_QWORD *)sub_10030E274(a3, 2, 0) = 0;
      *(_QWORD *)sub_10030E274(a3, 2, 2) = 0;
    }
    else
    {
      *(long double *)sub_10030E274(a3, 1, 0) = v8 / v15;
      *(long double *)sub_10030E274(a3, 1, 2) = -v6 / v15;
      *(long double *)sub_10030E274(a3, 2, 0) = -(v7 * v6) / v17 * v16;
      *(long double *)sub_10030E274(a3, 2, 2) = -(v7 * v8) / v17 * v16;
    }
  }
}

uint64_t sub_10035AD90()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10085EE80 = 0;
  qword_10085EE88 = 0;
  qword_10085EE90 = 0;
  v0 = operator new(0x40uLL);
  qword_10085EE88 = (uint64_t)(v0 + 4);
  qword_10085EE90 = (uint64_t)(v0 + 4);
  *v0 = xmmword_10047B6D0;
  v0[1] = unk_10047B6E0;
  v0[2] = xmmword_10047B6F0;
  v0[3] = unk_10047B700;
  qword_10085EE80 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085EE80, (void *)&_mh_execute_header);
  qword_10085EEA0 = 0;
  unk_10085EEA8 = 0;
  qword_10085EE98 = 0;
  v1 = operator new(0x10uLL);
  qword_10085EEA0 = (uint64_t)(v1 + 1);
  unk_10085EEA8 = v1 + 1;
  *v1 = xmmword_10047B710;
  qword_10085EE98 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1000325D8, &qword_10085EE98, (void *)&_mh_execute_header);
}

void sub_10035AE4C(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  operator new();
}

void sub_10035AF70()
{
  operator delete();
}

void sub_10035AFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  double v7;
  int v8;
  NSObject *v9;
  double v10;
  const char *v11;
  double v12;
  double v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  double v18;
  const char *v19;
  NSObject *v20;
  double v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  __int16 v32;
  __int128 v33;
  void *__p[2];
  __int128 v35;
  __int128 v36;
  _BYTE buf[32];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  __int16 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v4 = *(_QWORD *)(a1 + 408);
  if (!v4
    || *(double *)a2 > *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 376)
                                             + (((unint64_t)(v4 + *(_QWORD *)(a1 + 400) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                                 + (((v4 + *(_QWORD *)(a1 + 400) - 1) & 0x1F) << 7)))
  {
    v5 = *(_DWORD *)(a1 + 416);
    *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 80);
    v6 = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(a1 + 424) = v6;
    v7 = *(double *)a2;
    if (!*(_BYTE *)(a1 + 24) || *(double *)(a1 + 16) < v7)
    {
      *(double *)(a1 + 16) = v7;
      *(_BYTE *)(a1 + 24) = 1;
    }
    v8 = *(_DWORD *)(a2 + 80);
    if (v5 == v8)
      goto LABEL_19;
    if (v8 == 2)
    {
      v9 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_19;
      v12 = *(double *)a2;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v12;
      v11 = "#sa_algo_moving_findee,VIO Tracking State changed to Normal at %f s";
    }
    else if (v8 == 1)
    {
      v9 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_19;
      v13 = *(double *)a2;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v13;
      v11 = "#sa_algo_moving_findee,VIO Tracking State changed to Limited at %f s";
    }
    else
    {
      if (v8)
        goto LABEL_19;
      v9 = qword_10085F520;
      if (!os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        goto LABEL_19;
      v10 = *(double *)a2;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v10;
      v11 = "#sa_algo_moving_findee,VIO Tracking State changed to Not Available at %f s";
    }
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
LABEL_19:
    sub_10035B4E0(a1, a2);
    v14 = *(_DWORD *)(a2 + 80);
    if (v5 == 2 && v14 != 2)
    {
      v15 = qword_10085F520;
      if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,VIO Tracking not normal anymore - resetting", buf, 2u);
      }
      if (*(_BYTE *)(a1 + 312))
      {
        v16 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,VIO Tracking not normal before the cached measurement can be interpolated - passing the cached measurement to the range filter without VIO", buf, 2u);
        }
      }
      sub_10035B828(a1);
      v14 = *(_DWORD *)(a2 + 80);
    }
    if (v14 == 2)
    {
      if (*(_BYTE *)(a2 + 84))
      {
        v17 = qword_10085F520;
        if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *(double *)a2;
          if (*(_BYTE *)(a2 + 85))
            v19 = "YES";
          else
            v19 = "NO";
          *(_DWORD *)buf = 134218498;
          *(double *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "YES";
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,VIO reported relocalization event at %f s, MAJOR: %s, MINOR: %s - resetting", buf, 0x20u);
        }
        sub_10035B828(a1);
      }
      else
      {
        if (*(_BYTE *)(a2 + 85))
        {
          v20 = qword_10085F520;
          if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
          {
            v21 = *(double *)a2;
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,VIO reported MINOR relocalization event at %f s", buf, 0xCu);
          }
        }
        v22 = 0;
        v23 = *(float32x4_t *)(a2 + 16);
        v24 = *(float32x4_t *)(a2 + 32);
        v25 = *(float32x4_t *)(a2 + 48);
        v26 = *(float32x4_t *)(a2 + 64);
        v33 = xmmword_100478840;
        *(_OWORD *)__p = xmmword_100478850;
        v35 = xmmword_100478860;
        v36 = xmmword_100478870;
        do
        {
          *(float32x4_t *)&buf[v22 * 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)&__p[v22 - 2])), v24, (float32x2_t)__p[v22 - 2], 1), v25, *(float32x4_t *)&__p[v22 - 2], 2), v26, *(float32x4_t *)&__p[v22 - 2], 3);
          v22 += 2;
        }
        while (v22 != 8);
        v27 = *(_OWORD *)buf;
        v28 = *(_OWORD *)&buf[16];
        v29 = v38;
        v30 = v39;
        v31 = *(_DWORD *)(a2 + 80);
        v32 = *(_WORD *)(a2 + 84);
        *(_QWORD *)buf = *(_QWORD *)a2;
        *(_OWORD *)&buf[16] = v27;
        v38 = v28;
        v39 = v29;
        v40 = v30;
        v41 = v31;
        v42 = v32;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        sub_1003098A8((_QWORD *)(a1 + 368), (__int128 *)buf);
        sub_10031383C(*(_QWORD *)(a1 + 64), (uint64_t)&v33, *(double *)buf, *(float *)&v40, *((float *)&v40 + 1), *((float *)&v40 + 2));
        sub_10030994C(a1 + 72, (uint64_t *)&v33);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
    sub_10035B8D0(a1);
    sub_10035BF88((uint64_t *)a1);
    sub_10035C674((_QWORD *)a1);
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    sub_1003EF9DC();
}

void sub_10035B4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035B4E0(uint64_t result, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  void **v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  void *__p;
  char v26;
  uint64_t v27;
  _QWORD v28[10];
  char v29;
  uint64_t v30;
  uint8_t buf[4];
  double v32;
  __int16 v33;
  void **v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;

  v3 = *(double *)a2;
  if (!*(_BYTE *)(result + 40) || v3 - *(double *)(result + 32) >= 0.2)
  {
    *(double *)(result + 32) = v3;
    *(_BYTE *)(result + 40) = 1;
    sub_100210A10((uint64_t)&v27);
    sub_100054C60(&v27, (uint64_t)"tracking state: ", 16);
    v4 = *(int *)(a2 + 80);
    if (v4 < 3)
      sub_100054C60(&v27, (uint64_t)(&off_100816BD0)[v4], qword_10047B790[v4]);
    sub_100054C60(&v27, (uint64_t)", light intensity ", 18);
    if (*(_BYTE *)(a2 + 96))
    {
      v5 = v27;
      *(_DWORD *)((char *)v28 + *(_QWORD *)(v27 - 24)) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(v27 - 24)) & 0xFFFFFEFB | 4;
      *(_QWORD *)((char *)&v28[1] + *(_QWORD *)(v5 - 24)) = 2;
      std::ostream::operator<<(&v27);
    }
    else
    {
      sub_100054C60(&v27, (uint64_t)"-", 1);
    }
    v6 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)a2;
      std::stringbuf::str(v28);
      v8 = v26 >= 0 ? &__p : (void **)__p;
      v9 = *(float *)(a2 + 16);
      v10 = *(float *)(a2 + 20);
      v11 = *(float *)(a2 + 24);
      v12 = *(float *)(a2 + 28);
      v13 = *(float *)(a2 + 32);
      v14 = *(float *)(a2 + 36);
      v15 = *(float *)(a2 + 40);
      v16 = *(float *)(a2 + 44);
      v17 = *(float *)(a2 + 48);
      v18 = *(float *)(a2 + 52);
      v19 = *(float *)(a2 + 56);
      v20 = *(float *)(a2 + 60);
      v21 = *(float *)(a2 + 64);
      v22 = *(float *)(a2 + 68);
      v23 = *(float *)(a2 + 72);
      v24 = *(float *)(a2 + 76);
      *(_DWORD *)buf = 134222338;
      v32 = v7;
      v33 = 2080;
      v34 = v8;
      v35 = 2048;
      v36 = v9;
      v37 = 2048;
      v38 = v10;
      v39 = 2048;
      v40 = v11;
      v41 = 2048;
      v42 = v12;
      v43 = 2048;
      v44 = v13;
      v45 = 2048;
      v46 = v14;
      v47 = 2048;
      v48 = v15;
      v49 = 2048;
      v50 = v16;
      v51 = 2048;
      v52 = v17;
      v53 = 2048;
      v54 = v18;
      v55 = 2048;
      v56 = v19;
      v57 = 2048;
      v58 = v20;
      v59 = 2048;
      v60 = v21;
      v61 = 2048;
      v62 = v22;
      v63 = 2048;
      v64 = v23;
      v65 = 2048;
      v66 = v24;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Pose timestamp: %f, %s, pose [%3.2f, %3.2f, %3.2f, %3.2f, ...\n\t%3.2f, %3.2f, %3.2f, %3.2f, ...\n\t%3.2f, %3.2f, %3.2f, %3.2f, ... \n\t%3.2f, %3.2f, %3.2f, %3.2f]", buf, 0xB6u);
      if (v26 < 0)
        operator delete(__p);
    }
    if (v29 < 0)
      operator delete((void *)v28[8]);
    std::streambuf::~streambuf(v28);
    return std::ios::~ios(&v30);
  }
  return result;
}

void sub_10035B804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100210AFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10035B828(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*(_BYTE *)(a1 + 312))
    *(_BYTE *)(a1 + 312) = 0;
  v2 = *(void ***)(a1 + 376);
  v3 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 408) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 384);
      v2 = (void **)(*(_QWORD *)(a1 + 376) + 8);
      *(_QWORD *)(a1 + 376) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 16;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_10;
    v6 = 32;
  }
  *(_QWORD *)(a1 + 400) = v6;
LABEL_10:
  if (*(_BYTE *)(a1 + 120))
  {
    v7 = *(void **)(a1 + 88);
    if (v7)
    {
      *(_QWORD *)(a1 + 96) = v7;
      operator delete(v7);
    }
    *(_BYTE *)(a1 + 120) = 0;
  }
  sub_1003154F8(*(_QWORD *)(a1 + 64));
  *(_BYTE *)(a1 + 488) = 0;
}

void sub_10035B8D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char *v10;
  unint64_t v11;
  double v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float v48;
  float v49;
  BOOL v50;
  float v51;
  float v52;
  float32x2_t v53;
  float32x2_t v54;
  float v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x2_t v63;
  int8x16_t v64;
  unsigned __int32 v65;
  float32x2_t v66;
  float32x2_t v67;
  int8x16_t v68;
  double v69;
  double v70;
  double v71;
  NSObject *v72;
  double v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x4_t v81;
  float v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float64x2_t v88;
  float v89;
  float64x2_t v90;
  uint8_t v91[4];
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  _BYTE buf[24];
  double v96;
  __int16 v97;
  float64_t v98;
  __int16 v99;
  float64_t v100;
  __int16 v101;
  double v102;
  __int16 v103;
  float64_t v104;
  __int16 v105;
  float64_t v106;
  __int16 v107;
  double v108;
  double v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  double v113;

  if (!*(_BYTE *)(a1 + 312))
    return;
  v2 = *(_QWORD *)(a1 + 408);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 400);
  v4 = v3 >> 5;
  v6 = *(_QWORD *)(a1 + 376);
  v5 = *(_QWORD *)(a1 + 384);
  v7 = (char *)(v6 + 8 * (v3 >> 5));
  if (v5 == v6)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
  }
  else
  {
    v8 = *(_QWORD *)v7 + ((*(_QWORD *)(a1 + 400) & 0x1FLL) << 7);
    v9 = v3 + v2;
    v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
    v11 = *(_QWORD *)v10 + ((unint64_t)(v9 & 0x1F) << 7);
  }
  v12 = *(double *)(a1 + 136);
  v13 = *(float *)(a1 + 144);
  *(_QWORD *)buf = v6 + 8 * (v3 >> 5);
  *(_QWORD *)&buf[8] = v8;
  if (v11 != v8)
  {
    v14 = ((uint64_t)(v11 - *(_QWORD *)v10) >> 7) + 4 * (v10 - v7);
    v15 = v8 - *(_QWORD *)v7;
    v16 = v14 - (v15 >> 7);
    if (v14 != v15 >> 7)
    {
      do
      {
        v17 = v16 >> 1;
        v18 = sub_10030ECFC((uint64_t)buf, v16 >> 1);
        if (v12 >= *v19)
        {
          v20 = v19 + 16;
          if ((double *)((char *)v19 - *v18 + 128) == (double *)4096)
          {
            v21 = (double *)v18[1];
            ++v18;
            v20 = v21;
          }
          *(_QWORD *)buf = v18;
          *(_QWORD *)&buf[8] = v20;
          v17 = v16 + ~v17;
        }
        v16 = v17;
      }
      while (v17);
      v7 = *(char **)buf;
      v8 = *(_QWORD *)&buf[8];
      v3 = *(_QWORD *)(a1 + 400);
      v6 = *(_QWORD *)(a1 + 376);
      v5 = *(_QWORD *)(a1 + 384);
      v4 = v3 >> 5;
    }
  }
  if (v5 == v6)
  {
    if (v8)
    {
      v23 = 0;
      v22 = *(_QWORD *)(a1 + 408);
      goto LABEL_19;
    }
LABEL_22:
    v30 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_ERROR))
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7));
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v31;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#sa_algo_moving_findee,Measurement at %f s earlier than the first pose in history at %f s - skipping interpolation and removing range measurement", buf, 0x16u);
    }
    goto LABEL_43;
  }
  if (*(_QWORD *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7) == v8)
    goto LABEL_22;
  v22 = *(_QWORD *)(a1 + 408);
  v23 = *(_QWORD *)(v6 + (((v22 + v3) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v22 + v3) & 0x1F) << 7);
LABEL_19:
  if (v23 != v8)
  {
    v24 = v8 - *(_QWORD *)v7;
    v25 = v24 >> 7;
    if (v24 < 129)
    {
      v34 = 32 - v25;
      v27 = &v7[-8 * (v34 >> 5)];
      v28 = *(_QWORD *)v27;
      v29 = ~(_DWORD)v34 & 0x1FLL;
    }
    else
    {
      v26 = v25 - 1;
      v27 = &v7[8 * (v26 >> 5)];
      v28 = *(_QWORD *)v27;
      v29 = v26 & 0x1F;
    }
    v35 = v28 + (v29 << 7);
    v36 = (v12 - *(double *)v35) / (*(double *)v8 - *(double *)v35);
    v89 = v36;
    v85 = *(float32x4_t *)(v35 + 64);
    *(double *)v37.i64 = sub_10030C298(*(int8x16_t *)(v35 + 16), *(int8x16_t *)(v35 + 32), *(__n128 *)(v35 + 48));
    v87 = v37;
    v84 = *(float32x4_t *)(v8 + 64);
    *(double *)v38.i64 = sub_10030C298(*(int8x16_t *)(v8 + 16), *(int8x16_t *)(v8 + 32), *(__n128 *)(v8 + 48));
    v39 = (int8x16_t)vmulq_f32(v87, v38);
    v40 = (float32x4_t)vextq_s8(v39, v39, 8uLL);
    *(float32x2_t *)v39.i8 = vadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v40.f32);
    *(float *)v39.i32 = vaddv_f32(*(float32x2_t *)v39.i8);
    v40.i32[0] = 0;
    v41 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)v39, v40)), 0), (int8x16_t)vnegq_f32(v38), (int8x16_t)v38);
    v42 = 1.0;
    v43 = 1.0 - v89;
    v44 = vsubq_f32(v87, v41);
    v45 = (int8x16_t)vmulq_f32(v44, v44);
    v86 = v41;
    v46 = vaddq_f32(v87, v41);
    v47 = (int8x16_t)vmulq_f32(v46, v46);
    v48 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)))));
    v49 = v48 + v48;
    v50 = (float)(v48 + v48) == 0.0;
    v51 = 1.0;
    if (!v50)
      v51 = sinf(v49) / v49;
    v52 = v51;
    v53 = vrecpe_f32((float32x2_t)LODWORD(v51));
    v54 = vmul_f32(v53, vrecps_f32((float32x2_t)LODWORD(v52), v53));
    LODWORD(v55) = vmul_f32(v54, vrecps_f32((float32x2_t)LODWORD(v52), v54)).u32[0];
    if ((float)(v43 * v49) != 0.0)
    {
      v82 = v55;
      v54.f32[0] = sinf(v43 * v49);
      v55 = v82;
      v42 = v54.f32[0] / (float)(v43 * v49);
    }
    v54.f32[0] = v43 * (float)(v55 * v42);
    v56 = (float32x4_t)vdupq_lane_s32((int32x2_t)v54, 0);
    v57 = v89;
    v58 = v49 * v89;
    v59 = 1.0;
    if (v58 != 0.0)
    {
      v81 = v56;
      v83 = v55;
      v60 = sinf(v58);
      v56 = v81;
      v55 = v83;
      v57 = v89;
      v59 = v60 / v58;
    }
    v61 = vmlaq_f32(vmulq_n_f32(v86, (float)(v55 * v59) * v57), v87, v56);
    v62 = (int8x16_t)vmulq_f32(v61, v61);
    v63 = vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
    if (vaddv_f32(v63) == 0.0)
    {
      v64 = (int8x16_t)xmmword_100478870;
    }
    else
    {
      v65 = vadd_f32(v63, (float32x2_t)vdup_lane_s32((int32x2_t)v63, 1)).u32[0];
      v66 = vrsqrte_f32((float32x2_t)v65);
      v67 = vmul_f32(v66, vrsqrts_f32((float32x2_t)v65, vmul_f32(v66, v66)));
      v64 = (int8x16_t)vmulq_n_f32(v61, vmul_f32(v67, vrsqrts_f32((float32x2_t)v65, vmul_f32(v67, v67))).f32[0]);
    }
    v68 = (int8x16_t)vmlaq_n_f32(v85, vsubq_f32(v84, v85), v57);
    v69 = *(float *)v68.i32;
    v70 = *(float *)v64.i32;
    v88 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 4uLL));
    v90 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 4uLL));
    v71 = *(float *)&v64.i32[3];
    v72 = qword_10085F520;
    v73 = v13;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134220032;
      *(double *)&buf[4] = v73;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2048;
      v96 = v69;
      v97 = 2048;
      v98 = v90.f64[0];
      v99 = 2048;
      v100 = v90.f64[1];
      v101 = 2048;
      v102 = v70;
      v103 = 2048;
      v104 = v88.f64[0];
      v105 = 2048;
      v106 = v88.f64[1];
      v107 = 2048;
      v108 = v71;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Interpolated self pose for range measurement, range: %0.2f m, timestamp: %f s, device position:[%0.2f,%0.2f,%0.2f], device quat:[%0.2f,%0.2f,%0.2f,%0.2f]", buf, 0x5Cu);
    }
    *(double *)buf = v12;
    *(double *)&buf[8] = v73;
    *(_QWORD *)&buf[16] = 0x3FB999999999999ALL;
    LODWORD(v96) = 0;
    LOBYTE(v97) = 0;
    BYTE4(v108) = 0;
    v109 = v69;
    v110 = v90;
    v111 = v70;
    v112 = v88;
    v113 = v71;
    sub_10035E30C((_QWORD *)(a1 + 320), (uint64_t)buf);
    v74 = *(_QWORD *)(a1 + 376);
    v75 = (char *)(v74 + 8 * (*(_QWORD *)(a1 + 400) >> 5));
    if (*(_QWORD *)(a1 + 384) == v74)
      v76 = 0;
    else
      v76 = *(_QWORD *)v75 + ((*(_QWORD *)(a1 + 400) & 0x1FLL) << 7);
    sub_10030D388((_QWORD *)(a1 + 368), v75, v76, v27, v35);
    v77 = qword_10085F520;
    if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
    {
      v78 = *(_QWORD *)(a1 + 376);
      v79 = *(_QWORD *)(*(_QWORD *)(v78 + ((*(_QWORD *)(a1 + 400) >> 2) & 0x3FFFFFFFFFFFFFF8))
                      + ((*(_QWORD *)(a1 + 400) & 0x1FLL) << 7));
      v80 = *(_QWORD *)(*(_QWORD *)(v78
                                  + (((unint64_t)(*(_QWORD *)(a1 + 400) + *(_QWORD *)(a1 + 408) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                      + (((*(_QWORD *)(a1 + 400) + *(_QWORD *)(a1 + 408) - 1) & 0x1F) << 7));
      *(_DWORD *)v91 = 134218240;
      v92 = v79;
      v93 = 2048;
      v94 = v80;
      _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,Pose history now between %f s and %f s", v91, 0x16u);
    }
LABEL_43:
    if (*(_BYTE *)(a1 + 312))
      *(_BYTE *)(a1 + 312) = 0;
    return;
  }
  v32 = qword_10085F520;
  if (os_log_type_enabled((os_log_t)qword_10085F520, OS_LOG_TYPE_DEBUG))
  {
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + (((v3 + v22 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v3 + v22 - 1) & 0x1F) << 7));
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v33;
    _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,Measurement at %f s later than the last pose in history at %f s - skipping interpolation", buf, 0x16u);
  }
}

